[
  {
    "text": "[Music]",
    "start": "1700",
    "end": "4810"
  },
  {
    "text": "it's my honor to present Marvin zoss",
    "start": "7400",
    "end": "12679"
  },
  {
    "text": "thank you thank you Jack for this content",
    "start": "12679",
    "end": "18000"
  },
  {
    "text": "reduction and yeah I just want to State before I even start it's really an honor",
    "start": "18000",
    "end": "23039"
  },
  {
    "text": "to be here at blackhead 25 and I met a lot of cool people having a really great time and I hope all of you are doing the",
    "start": "23039",
    "end": "29820"
  },
  {
    "text": "very same and yeah with this I would like to welcome all of you to my journey of fault injection countermeasures the",
    "start": "29820",
    "end": "36239"
  },
  {
    "text": "person name architecture as well as defeating both the aforementioned by using my very own multiple voltage fault",
    "start": "36239",
    "end": "41700"
  },
  {
    "text": "injection Hardware design but maybe first of all who am I actually to talk to you about fault injection",
    "start": "41700",
    "end": "47219"
  },
  {
    "text": "so my name is Marvin Zas and I'm an graduate in the field of I.T security from Technical University largest my",
    "start": "47219",
    "end": "54300"
  },
  {
    "text": "expertise is mostly in embedded system security as well as low-level software security and back in data I've been",
    "start": "54300",
    "end": "59760"
  },
  {
    "text": "working for quite some time now for a really awesome research team which is referred to as the system security lab I",
    "start": "59760",
    "end": "65640"
  },
  {
    "text": "have the great privilege to work with highly intelligent people over here and just in case you are around the corner",
    "start": "65640",
    "end": "71460"
  },
  {
    "text": "you know just reach out to me and let's see what we can break together all right and this brings me to my motivation so",
    "start": "71460",
    "end": "78119"
  },
  {
    "text": "kind of a central question which we have been asking what says was well how secure are actually these highly secure",
    "start": "78119",
    "end": "84060"
  },
  {
    "text": "labeled embedded processes when it comes to multiple fault injection and in order to evaluate this question we had to",
    "start": "84060",
    "end": "89939"
  },
  {
    "text": "develop a novel and especially a cheap way of injecting multiple faults because I have to State here that well",
    "start": "89939",
    "end": "96060"
  },
  {
    "text": "commercial setups which are dedicated to multiple laser fault injection already exist however these come at such high",
    "start": "96060",
    "end": "102299"
  },
  {
    "text": "cost that it is practically infeasible for private security researchers to afford them and yeah let's now have a",
    "start": "102299",
    "end": "108840"
  },
  {
    "text": "quick background on fault injection technical quick history basically and we will have here a strong focus on voltage",
    "start": "108840",
    "end": "114840"
  },
  {
    "text": "fault injection so the complexity of voltage fault injection attacks increased until the",
    "start": "114840",
    "end": "120540"
  },
  {
    "text": "point we are right now researchers started back in 1997 I would say by injecting rather simple voltage faults",
    "start": "120540",
    "end": "127200"
  },
  {
    "text": "as we know them today and well these were very simple and the hands had a low",
    "start": "127200",
    "end": "132239"
  },
  {
    "text": "success rate and a low reliability of the overall attack and quite early it has to be said but",
    "start": "132239",
    "end": "137640"
  },
  {
    "text": "Ringgit are introduce to fault injection countermeasures on the instruction level which are used to mitigate fault",
    "start": "137640",
    "end": "144120"
  },
  {
    "text": "injection attacks however in this work we are going to see how their approach can be broken by using our multiple",
    "start": "144120",
    "end": "149220"
  },
  {
    "text": "fault injection approach at some point column of linen joined the game basically and introduced to his",
    "start": "149220",
    "end": "156900"
  },
  {
    "text": "crowbar circuitry to perform voltage fault injection attacks this has shown to enhance the reliability of single",
    "start": "156900",
    "end": "163019"
  },
  {
    "text": "voltage fault injection text Christian cudera utilized this um fault inject Global Secretary of",
    "start": "163019",
    "end": "170280"
  },
  {
    "text": "college of Lin and injected voltage Falls based on a negative voltage level this has shown to increase the timely",
    "start": "170280",
    "end": "177420"
  },
  {
    "text": "resolution of our voltage faults other researchers went another way namely butato at all and what they did is to",
    "start": "177420",
    "end": "183720"
  },
  {
    "text": "literally shape the glitch by using digital to analog converters and yeah by",
    "start": "183720",
    "end": "189000"
  },
  {
    "text": "this they have shown that the reliability of a single voltage fault injection attack can even be enhanced",
    "start": "189000",
    "end": "196200"
  },
  {
    "text": "most recently we've been observing a vast amount of different work which has been proposed which utilizes different",
    "start": "196200",
    "end": "202019"
  },
  {
    "text": "onboard Regulators to generate this faulty environment and this is a really important step",
    "start": "202019",
    "end": "207480"
  },
  {
    "text": "because we're starting to get away from this physical access threat model which is commonly the downside of fault",
    "start": "207480",
    "end": "213599"
  },
  {
    "text": "injection attacks as well as such a normal attacks and we are starting to get towards an even remote fault",
    "start": "213599",
    "end": "219780"
  },
  {
    "text": "injection setup I would say really important work and probably the",
    "start": "219780",
    "end": "224940"
  },
  {
    "text": "most related work to this one has been the work proposed by order at all and what they did is to inject a single",
    "start": "224940",
    "end": "231239"
  },
  {
    "text": "voltage fault in order to attack the trust Zone N however at this point the authors did not realize that there were",
    "start": "231239",
    "end": "237060"
  },
  {
    "text": "additional protections on the internal HP was available which successfully mitigate their attack",
    "start": "237060",
    "end": "242879"
  },
  {
    "text": "and well basically here we are right now at Becker 25. to show you how to inject",
    "start": "242879",
    "end": "248340"
  },
  {
    "text": "up to four consecutive faults in order to fully break the Trust online architecture and yeah if you would like",
    "start": "248340",
    "end": "253560"
  },
  {
    "text": "to know how we did this stay tuned all right there's another part of our motivation was basically the this",
    "start": "253560",
    "end": "259440"
  },
  {
    "text": "yawning gap between different adversary models in the IC in the field of I.T Security in general",
    "start": "259440",
    "end": "265139"
  },
  {
    "text": "and this Gap even enlarges whenever we talk about Hardware security because we are just really dependent on different",
    "start": "265139",
    "end": "271680"
  },
  {
    "text": "tooling over here the left you see a lab which is quite similar to this I'm currently using and well I assume that",
    "start": "271680",
    "end": "278520"
  },
  {
    "text": "this looks familiar to at least most of the um Hardware focused security researchers",
    "start": "278520",
    "end": "283919"
  },
  {
    "text": "who attend this call it just has to be said our labs are not beautiful in fact but they suffice our daily purposes",
    "start": "283919",
    "end": "290940"
  },
  {
    "text": "so to the right you see the focus ion beam lip of the ultrastructural bio Imaging core facility of The Institute",
    "start": "290940",
    "end": "296639"
  },
  {
    "text": "pastel in France and based on such a focused I-beam you could for example go ahead and alter the doping of a single",
    "start": "296639",
    "end": "303360"
  },
  {
    "text": "transistor inside your integrated circuit even after it has been produced which is just crazy you know and if you",
    "start": "303360",
    "end": "310440"
  },
  {
    "text": "are like me which means your affiliation goes to the in the direction of this left lip over here well we are incapable",
    "start": "310440",
    "end": "317820"
  },
  {
    "text": "of Performing similar attacks and what we commonly have to do is to improvise in order to reach our goals and",
    "start": "317820",
    "end": "324419"
  },
  {
    "text": "improvising is exactly what also we did within this work so let's now discuss some a quick",
    "start": "324419",
    "end": "330180"
  },
  {
    "text": "background on a background which is required in order to follow the rest of this work and here we are going to focus",
    "start": "330180",
    "end": "336419"
  },
  {
    "text": "first of all on fault injection and afterwards reason about why the transition M architecture cannot be",
    "start": "336419",
    "end": "341880"
  },
  {
    "text": "overcome by using single fault injection text all right so fault injection methods in general concern rapid changes in an",
    "start": "341880",
    "end": "348900"
  },
  {
    "text": "integrated circuits environment in order to cause a specific and exploitable misbehavior in the past mainly four",
    "start": "348900",
    "end": "354360"
  },
  {
    "text": "different types of fault injection techniques have been used which are clock fault injection electromagnetic fault injection Optical fault injection",
    "start": "354360",
    "end": "360600"
  },
  {
    "text": "or laser fault injection more specifically as well as voltage fault injection and due to the use of analog",
    "start": "360600",
    "end": "366720"
  },
  {
    "text": "components which are referred to as Facebook Loops or PLS in short these clock forward injection attacks to the",
    "start": "366720",
    "end": "372060"
  },
  {
    "text": "left must be considered impractical as of today and in fact I would like to use this opportunity of public speaking to",
    "start": "372060",
    "end": "378539"
  },
  {
    "text": "officially declare clock fault injection as being dead this leaves us with basically three promising candidates to perform single",
    "start": "378539",
    "end": "384900"
  },
  {
    "text": "fault injection attacks and throughout this work we are going to focus on voltage fault injection for reasons",
    "start": "384900",
    "end": "390479"
  },
  {
    "text": "which we'll discuss once introducing to multiple fault injection for now let's just see how voltage fault injection is",
    "start": "390479",
    "end": "397139"
  },
  {
    "text": "commonly performed all right so here you see different voltage ranges depicted over time the",
    "start": "397139",
    "end": "403139"
  },
  {
    "text": "green range indicates that we are within our specified operating conditions whereas the red range indicates that we have left our specified operating",
    "start": "403139",
    "end": "409319"
  },
  {
    "text": "conditions what you commonly do in voltage fault injection is you keep your supply voltage in the specified range for most of the time once the",
    "start": "409319",
    "end": "415740"
  },
  {
    "text": "synchronizing trigger is a certain tie an internal counter starts counting upward until the specified offset has",
    "start": "415740",
    "end": "420960"
  },
  {
    "text": "been reached once this offset has been reached we inject the transient fault and by this uh this fault is",
    "start": "420960",
    "end": "426840"
  },
  {
    "text": "parameterized by our width parameter and yeah afterwards just continue as intended all right let's now see what we are",
    "start": "426840",
    "end": "433680"
  },
  {
    "text": "capable of doing once we found us some proper parameters",
    "start": "433680",
    "end": "438440"
  },
  {
    "text": "and this is perfectly described by our void model so default model for voltage fault injection states that a single",
    "start": "438900",
    "end": "446460"
  },
  {
    "text": "voltage for to be injected mainly affects our internal processors pipeline stages this means uh",
    "start": "446460",
    "end": "452699"
  },
  {
    "text": "yeah to the right you see an exemplary load modified store cycle based on the arm architecture and this is supposed to",
    "start": "452699",
    "end": "459900"
  },
  {
    "text": "illustrate the implications made by our fault model so once we go now ahead and inject a single voltage fault we could",
    "start": "459900",
    "end": "466020"
  },
  {
    "text": "for example corrupt instruction fetches but we could also go ahead and corrupt data loads or corrupt even data stores",
    "start": "466020",
    "end": "472259"
  },
  {
    "text": "but finally and what is most commonly utilized we could skip over the execution of a whole instruction and",
    "start": "472259",
    "end": "479099"
  },
  {
    "text": "through this work also we are going to focus on the skipping of instruction due to its deterministic nature basically",
    "start": "479099",
    "end": "484380"
  },
  {
    "text": "and in this context we Define our fault Target as the instruction which would",
    "start": "484380",
    "end": "490440"
  },
  {
    "text": "like to skip such a fall Target is assumed to be hit whenever we successfully skipped over its execution",
    "start": "490440",
    "end": "496680"
  },
  {
    "text": "all right let's now have an exemplary fault injection tech for this assume there is some kind of a memory net",
    "start": "496680",
    "end": "502800"
  },
  {
    "text": "register which is critical to your secure configuration for example exemplary firmware to write to this",
    "start": "502800",
    "end": "508319"
  },
  {
    "text": "version some may look like the following we first of all loaded address afterwards move a value which we'd like to store and finally we'll store back",
    "start": "508319",
    "end": "514560"
  },
  {
    "text": "this value let's unroll this execution and talk about voltage fault injection and what we would like to do here is to",
    "start": "514560",
    "end": "520260"
  },
  {
    "text": "skip over this time into this memory net register so there's still instruction over here represents our for Target now",
    "start": "520260",
    "end": "526860"
  },
  {
    "text": "once executing this load instruction we keep our Logic Supply in a specified range same holds true for this move instruction however once we come close",
    "start": "526860",
    "end": "533760"
  },
  {
    "text": "to our fall Target we inject the transient fault and by this skip over the assignment to this duplicate register to this memory net register",
    "start": "533760",
    "end": "541200"
  },
  {
    "text": "all right due to the criticality of fault injection attacks well several",
    "start": "541200",
    "end": "546420"
  },
  {
    "text": "countermeasures have been proposed by Academia and these are mainly divided into instruction level countermeasures on the one side as well as Hardware",
    "start": "546420",
    "end": "553140"
  },
  {
    "text": "level countermeasures on the other side what you commonly do in instruction level countermeasures is some sort of a",
    "start": "553140",
    "end": "558420"
  },
  {
    "text": "duplication based approach so well for example you perform some computation perform all the same permutation all",
    "start": "558420",
    "end": "564779"
  },
  {
    "text": "over again afterwards you check both your outputs for equality and check them both for equality again and it should be",
    "start": "564779",
    "end": "570480"
  },
  {
    "text": "easy to see for you at this point that whenever we skip a single step of this procedure well the corresponding other",
    "start": "570480",
    "end": "576060"
  },
  {
    "text": "step will still be able to detect your fault injection attack all right on the hardware level instead",
    "start": "576060",
    "end": "581459"
  },
  {
    "text": "we would commonly have to deploy physical sensors along our integrated circuit and afterwards use these",
    "start": "581459",
    "end": "588060"
  },
  {
    "text": "physical sensors to constantly monitor our integrated circuit environment",
    "start": "588060",
    "end": "593700"
  },
  {
    "text": "I'm telling you all this because it's quite interesting to see that this instruction level countermeasures to the left have made it into recent",
    "start": "593700",
    "end": "600180"
  },
  {
    "text": "microcontroller units all right and I think or in my opinion this is a great step in the right",
    "start": "600180",
    "end": "605700"
  },
  {
    "text": "direction however we are going to see how to break them so here are a couple of examples taken",
    "start": "605700",
    "end": "613200"
  },
  {
    "text": "from different data sheets from nxp of these duplication based approaches as an example this one is supposed to protect",
    "start": "613200",
    "end": "620279"
  },
  {
    "text": "against malicious attacks whereas this one is supposed to provide a better protection against malicious hacking",
    "start": "620279",
    "end": "625800"
  },
  {
    "text": "attacks such as glitter takes yeah you get the basic idea right and a question I was asking me when",
    "start": "625800",
    "end": "632580"
  },
  {
    "text": "going through this data sheets was well how does this actually prevent fault transaction text so let's have another",
    "start": "632580",
    "end": "638160"
  },
  {
    "text": "look in this you now deploy two memory map registers instead of only one and",
    "start": "638160",
    "end": "643500"
  },
  {
    "text": "exemplary firmware to write to this registers may look like the following you load the address of your original",
    "start": "643500",
    "end": "648959"
  },
  {
    "text": "register which is on the top you move the value you would like to store and you finally store back this value you",
    "start": "648959",
    "end": "654660"
  },
  {
    "text": "execute some stuff in between and do the very same for your duplicate duplicated register basically",
    "start": "654660",
    "end": "660600"
  },
  {
    "text": "all right let's unroll this execution again and talk about voltage fault injection and what we would like to do",
    "start": "660600",
    "end": "666060"
  },
  {
    "text": "here is to perform the very same attack we've been performing before so this two instruction over here represents our",
    "start": "666060",
    "end": "672240"
  },
  {
    "text": "fault Target now once executing this load instruction well we keep our budget Supply in a specified range same holds",
    "start": "672240",
    "end": "678660"
  },
  {
    "text": "true for this move instruction however once we come close to our full Target we inject the transient fold and by this skip over the assignment to original",
    "start": "678660",
    "end": "684959"
  },
  {
    "text": "register now as we are capable of only injecting a single voltage fault well all these",
    "start": "684959",
    "end": "691200"
  },
  {
    "text": "other steps would still be executed as intended and at this point we introduce an inconsistency between our original as",
    "start": "691200",
    "end": "697500"
  },
  {
    "text": "well as our duplicated register and this inconsistency is then going to be detected by by your processor which",
    "start": "697500",
    "end": "703860"
  },
  {
    "text": "basically locks itself down into some error on the stage so a question I was asking you here is",
    "start": "703860",
    "end": "709920"
  },
  {
    "text": "can this instruction level countermeasures be vetted by simply injecting multiple faults",
    "start": "709920",
    "end": "715079"
  },
  {
    "text": "and if we think about injecting multiple faults well which fault injection method shall we choose so let's reason about",
    "start": "715079",
    "end": "721980"
  },
  {
    "text": "this in order to implement multiple multiple fault injection we need a fault injection method which is first of all",
    "start": "721980",
    "end": "728339"
  },
  {
    "text": "basically alive right clock fault injection is directly out so we also need to be capable of injecting faults",
    "start": "728339",
    "end": "735120"
  },
  {
    "text": "on a rapid succession and the problem with electromagnetic fault injection is that after each fault injection attempt",
    "start": "735120",
    "end": "741240"
  },
  {
    "text": "you would have to recharge your internal capacitor and an internal capacitor Bank basically with a lot of static current",
    "start": "741240",
    "end": "747959"
  },
  {
    "text": "and this just takes too long also we would like to be as cheap as possible right just just have a look at",
    "start": "747959",
    "end": "754079"
  },
  {
    "text": "our lab over here I mean we obviously got no money left so The Logical consequence would be to go with voltage",
    "start": "754079",
    "end": "761579"
  },
  {
    "text": "voltage at least for this work all right let's now introduced the trust and M architecture and due to time",
    "start": "761579",
    "end": "768420"
  },
  {
    "text": "constraints I won't be able to provide an in-depth um knowledge basically around the trusts on M architecture",
    "start": "768420",
    "end": "774540"
  },
  {
    "text": "itself and instead I'm going to focus on the question why can the Trust on an architecture not be overcome by using",
    "start": "774540",
    "end": "780959"
  },
  {
    "text": "single-fold injection attacks and by this we'll basically trade brevity for precision and in case some members of",
    "start": "780959",
    "end": "787260"
  },
  {
    "text": "the Armed family are watching this talk well I hope you guys can forgive me all",
    "start": "787260",
    "end": "792480"
  },
  {
    "text": "right so let's just assume you get your rb8m core up and running and this core is now capable of splitting your 32-bit",
    "start": "792480",
    "end": "798779"
  },
  {
    "text": "address base into basically well secure as well as non-secure regions let's just keep it like this",
    "start": "798779",
    "end": "804240"
  },
  {
    "text": "and this how the separation works is as follows there are three components involved which are forwarded every",
    "start": "804240",
    "end": "811019"
  },
  {
    "text": "address your core accesses during runtime and these are the memory protection unit mpu which determines the",
    "start": "811019",
    "end": "817440"
  },
  {
    "text": "privilege level which is required in order to access your letter and this address and then you have your secure",
    "start": "817440",
    "end": "822600"
  },
  {
    "text": "attribution unit SAU as well as your implementation defined attribution and IDU which both determine the security",
    "start": "822600",
    "end": "828779"
  },
  {
    "text": "state which is required in order to access this address well the final Security State is then determined by",
    "start": "828779",
    "end": "834120"
  },
  {
    "text": "just choosing the most restrictive output of both usau as well as your idiu all right we are in a memory map",
    "start": "834120",
    "end": "841139"
  },
  {
    "text": "architecture right which means we have a bunch of components basically which are mapped in our address space and these",
    "start": "841139",
    "end": "846959"
  },
  {
    "text": "are interconnected by using some kind of a central System bus in arm-based systems this bus is referred to as the",
    "start": "846959",
    "end": "852600"
  },
  {
    "text": "advanced high performance bus or HB in short now based on the configuration of this SAU and IDU our code now for example go",
    "start": "852600",
    "end": "860040"
  },
  {
    "text": "ahead and Define our RAM and our flash as being non-seq and our peripherals as being secure",
    "start": "860040",
    "end": "865680"
  },
  {
    "text": "whenever our course now executing in a non-secure state well it could only access these components which have",
    "start": "865680",
    "end": "871079"
  },
  {
    "text": "explicitly been defined as being non-secure and once our course executed in a single state instead it could",
    "start": "871079",
    "end": "877560"
  },
  {
    "text": "additionally access our secure peripherals in this example all right now problems arise however",
    "start": "877560",
    "end": "883800"
  },
  {
    "text": "when we attempt to introduce other bus Masters because these have commonly not heard of Trust on them before and well",
    "start": "883800",
    "end": "889980"
  },
  {
    "text": "if you think about directly attaching them to the internet of your HP well this would totally break the security",
    "start": "889980",
    "end": "895620"
  },
  {
    "text": "introduced by your trust and architecture actually because this could arbitrarily access your secure as well",
    "start": "895620",
    "end": "901320"
  },
  {
    "text": "as your non-secure securable HP slaves all right what has been done to fix this",
    "start": "901320",
    "end": "906779"
  },
  {
    "text": "is the following we first of all introduce what we call a gate here in front of every other securable HP slaves",
    "start": "906779",
    "end": "913560"
  },
  {
    "text": "and these Gates must be provided in addition to the address our Security State as well as our privileged level",
    "start": "913560",
    "end": "919680"
  },
  {
    "text": "for our bus Masters to generate this required cycle information we would have to differentiate now between two",
    "start": "919680",
    "end": "924779"
  },
  {
    "text": "different scenarios and the first one we have a trust on an aware bus master and then the second one we have a trust on",
    "start": "924779",
    "end": "930540"
  },
  {
    "text": "an underwear bus master all right for our trust and Emma webass mustard the solution is quite simple because we could just directly go ahead",
    "start": "930540",
    "end": "936660"
  },
  {
    "text": "and provide the required information to the interns of our HB whereas for our",
    "start": "936660",
    "end": "942300"
  },
  {
    "text": "trust on an aware bus Masters well it's slightly more complicated here we first",
    "start": "942300",
    "end": "947579"
  },
  {
    "text": "of all have to introduce what we call a wrapper unit here which then based on its internal configuration is going to",
    "start": "947579",
    "end": "954300"
  },
  {
    "text": "to to to generate this required cycle information and provide it to the internals of our HP",
    "start": "954300",
    "end": "960480"
  },
  {
    "text": "all right let's now see what previous work has been doing so previous work injected a single voltage fault in into",
    "start": "960480",
    "end": "967620"
  },
  {
    "text": "the configuration of the SAU over here and based on this fault injection well a",
    "start": "967620",
    "end": "972779"
  },
  {
    "text": "single non-secure region was to be expanded whenever the IDU in conjunction stated that this region that this region",
    "start": "972779",
    "end": "979560"
  },
  {
    "text": "was in fact non-secure all right now the the authors did not realize that there were this additional",
    "start": "979560",
    "end": "986040"
  },
  {
    "text": "trusts on Gates available on the internet of our bus and at this point I hope all of you see that whatever we are",
    "start": "986040",
    "end": "992100"
  },
  {
    "text": "going to to attack over here is afterwards to be detected over here so unless we are able to well inject",
    "start": "992100",
    "end": "999300"
  },
  {
    "text": "another fault here there's actually not much we can do and this is perfectly stated by all the",
    "start": "999300",
    "end": "1005000"
  },
  {
    "text": "different data sheets I'm going to read out loud this example of an nxp data",
    "start": "1005000",
    "end": "1011180"
  },
  {
    "text": "sheet here so if some inconsistency is detected between the SAU and the HB secure controller configurations due to",
    "start": "1011180",
    "end": "1018259"
  },
  {
    "text": "some software error of Ledger Tech the access to a specific resources blocked that's a lot to hack in actually and",
    "start": "1018259",
    "end": "1025400"
  },
  {
    "text": "yeah well we cannot conclude all this by saying in order to fully break the Trust",
    "start": "1025400",
    "end": "1030500"
  },
  {
    "text": "online architecture well multiple fault injection is definitely required all right let's now see what we decided to",
    "start": "1030500",
    "end": "1037040"
  },
  {
    "text": "go with to implement multiple fault injections and here you see our setup a photography",
    "start": "1037040",
    "end": "1044000"
  },
  {
    "text": "basically of our setup however at this point it's rather unimportant to be honest because this is on a level which",
    "start": "1044000",
    "end": "1050059"
  },
  {
    "text": "we would like not to go into let's just instead discuss our abstract setup",
    "start": "1050059",
    "end": "1055640"
  },
  {
    "text": "and in this we basically have three different components we first of all have ourselves basically or the",
    "start": "1055640",
    "end": "1061640"
  },
  {
    "text": "controlling host system we also have this multiple fault injection platform and our device on a test which has",
    "start": "1061640",
    "end": "1067280"
  },
  {
    "text": "implemented some kind of a security measure which we would like to overcome and now we can go ahead and communicate",
    "start": "1067280",
    "end": "1073760"
  },
  {
    "text": "with this multiple fault injection platform via USB and by this for example set the number of voltage Falls to be",
    "start": "1073760",
    "end": "1079580"
  },
  {
    "text": "injected and the corresponding parameters in this example you see a curve to set up because well there is",
    "start": "1079580",
    "end": "1085039"
  },
  {
    "text": "some Target IO going on and moreover the trigger the synchronizing trigger signal",
    "start": "1085039",
    "end": "1090260"
  },
  {
    "text": "is directly asserted High by this device on a test however our multiple fault injection platform could also be used to",
    "start": "1090260",
    "end": "1095840"
  },
  {
    "text": "attack non-cooperative setups basically all right so now whenever the device on",
    "start": "1095840",
    "end": "1101240"
  },
  {
    "text": "a test in this case asserts the synchronizing trigger signal High our multiple fault injection engine gets",
    "start": "1101240",
    "end": "1107000"
  },
  {
    "text": "triggered and by this starts to inject multiple voltage faults based on its provided configuration to break the",
    "start": "1107000",
    "end": "1113840"
  },
  {
    "text": "security implemented in this device on a test all right let's now have a deeper look into the internals of our multiple fault",
    "start": "1113840",
    "end": "1120919"
  },
  {
    "text": "injection engine in order to understand how we decided to implement multiple multiple fault",
    "start": "1120919",
    "end": "1126799"
  },
  {
    "text": "injection however it is first of all important how to generate a single voltage fault and here you see a single",
    "start": "1126799",
    "end": "1132500"
  },
  {
    "text": "voltage fault injection unit and this is provided a reference clock signal and whenever a trigger signal is asserted",
    "start": "1132500",
    "end": "1139520"
  },
  {
    "text": "High well an internal counter would start counting upward until the offset which is an input here is reached once",
    "start": "1139520",
    "end": "1146299"
  },
  {
    "text": "this offset has been reached and default out signal as I set it high for as long as we have um for for exactly with",
    "start": "1146299",
    "end": "1155240"
  },
  {
    "text": "number of clock Cycles all right and one once all this process has taken place or for down signal is asserted high for a",
    "start": "1155240",
    "end": "1162320"
  },
  {
    "text": "single clock period in order to indicate that the single voltage fault injection has taken place",
    "start": "1162320",
    "end": "1167780"
  },
  {
    "text": "now if we are talking about multiple voltage fault injection well it's obvious that we need multiple such",
    "start": "1167780",
    "end": "1173120"
  },
  {
    "text": "single voltage fault injection units right the question is well how to combine them actually and it turns out",
    "start": "1173120",
    "end": "1178940"
  },
  {
    "text": "to be quite simple we can just directly forward this fold down signal into the subsequent ones trigger signal",
    "start": "1178940",
    "end": "1184700"
  },
  {
    "text": "there's the downside with this design I have to mention well this is a static setup basically right we cannot really",
    "start": "1184700",
    "end": "1191620"
  },
  {
    "text": "change the number of voltage faults to be injected after our Hardware synthesis took place so what we've been doing",
    "start": "1191620",
    "end": "1198140"
  },
  {
    "text": "instead is to introduce two additional multiplexers on these forwarding lines",
    "start": "1198140",
    "end": "1203299"
  },
  {
    "text": "and once we set the selection line to zero in this in this example the multiple fault injection just steps with",
    "start": "1203299",
    "end": "1209780"
  },
  {
    "text": "the most recent voltage fault to be injected whereas once we set the selection line to 1",
    "start": "1209780",
    "end": "1215539"
  },
  {
    "text": "um our subsequent single voltage for the injection unit gets triggered and based on this starts to inject another voltage",
    "start": "1215539",
    "end": "1221660"
  },
  {
    "text": "fault based on its provided configuration so in conclusion we could say due to these multiplexers we are able to change",
    "start": "1221660",
    "end": "1228020"
  },
  {
    "text": "the number of and voltage faults to be injected even after our Hardware synthesis took place and maybe one more",
    "start": "1228020",
    "end": "1234020"
  },
  {
    "text": "thing this at this slide here well why are we actually chaining our single",
    "start": "1234020",
    "end": "1239840"
  },
  {
    "text": "voltage fault injector units right we could just for example try to to utilize multiple triggers but",
    "start": "1239840",
    "end": "1247160"
  },
  {
    "text": "this is wrong because we would like to be able to to actually search for",
    "start": "1247160",
    "end": "1252620"
  },
  {
    "text": "parameters on a Cooperative setup and then afterwards transfer these parameters to a non-carbotic setup which",
    "start": "1252620",
    "end": "1258200"
  },
  {
    "text": "means we have a need of a minimum amount of synchronizing signals here right",
    "start": "1258200",
    "end": "1264440"
  },
  {
    "text": "okay be with me let me now see what we decided to go",
    "start": "1264440",
    "end": "1270260"
  },
  {
    "text": "with to to perform our search for parameters basically okay and I would like you to recap that",
    "start": "1270260",
    "end": "1277160"
  },
  {
    "text": "um for every voltage fault which we try to to inject we have to find basically",
    "start": "1277160",
    "end": "1283340"
  },
  {
    "text": "two things first of all we have to find an offset with respect to our timely invariant trigger signal and then we",
    "start": "1283340",
    "end": "1290179"
  },
  {
    "text": "have to find a proper width in order to hit our fault Target all right now what is commonly done in",
    "start": "1290179",
    "end": "1295220"
  },
  {
    "text": "in single voltage fault injection is that you just go ahead and combine all your parameters basically some kind of a",
    "start": "1295220",
    "end": "1301280"
  },
  {
    "text": "Brute Force approach right and this is what it looks like on a physical level here you see for a given offset that we",
    "start": "1301280",
    "end": "1308059"
  },
  {
    "text": "try try out different widths basically and then continue to the subsequent offset",
    "start": "1308059",
    "end": "1313460"
  },
  {
    "text": "all right if we would now go ahead and directly apply this approach to our multiple fault injection platform well",
    "start": "1313460",
    "end": "1320179"
  },
  {
    "text": "you can see that this already takes some time to only search for basically two parameters right and if you now imagine",
    "start": "1320179",
    "end": "1326620"
  },
  {
    "text": "well you would have to to to to search for maybe like three or four different",
    "start": "1326620",
    "end": "1332360"
  },
  {
    "text": "thoughts voltage fault parameters long story short this is getting impracticable",
    "start": "1332360",
    "end": "1338059"
  },
  {
    "text": "all right and in fact we can show that each additional voltage fault to be injected increases the overall surface",
    "start": "1338059",
    "end": "1344720"
  },
  {
    "text": "by exponential means which is basically the definition of impracticability right so we have to be we have to be better",
    "start": "1344720",
    "end": "1351980"
  },
  {
    "text": "than this what we decided to go with is to differentiate between different hitfall",
    "start": "1351980",
    "end": "1357020"
  },
  {
    "text": "targets and this differentiation may take place for example based on a clearly distinguishable Behavior upon",
    "start": "1357020",
    "end": "1363320"
  },
  {
    "text": "partial success or a challenge change in the section elimination upon partial",
    "start": "1363320",
    "end": "1368659"
  },
  {
    "text": "success most commonly by using just a corporate setup but as I said earlier you can then go ahead and transfer these",
    "start": "1368659",
    "end": "1374780"
  },
  {
    "text": "parameters you found by a co-parter setup and transfer them to a to an even non-corporative setup right",
    "start": "1374780",
    "end": "1380000"
  },
  {
    "text": "and yeah basically anything you can imagine which helps you differentiating between your different hit fall targets",
    "start": "1380000",
    "end": "1386780"
  },
  {
    "text": "now once we are able to differentiate we are able to perform our advanced search which goes like the following so first",
    "start": "1386780",
    "end": "1393020"
  },
  {
    "text": "of all we Define an overall success function which determines whether or not all of our four Target targets have been",
    "start": "1393020",
    "end": "1399140"
  },
  {
    "text": "hit at once we then go ahead and Define partial success functions which determine whether or not a specific for",
    "start": "1399140",
    "end": "1405440"
  },
  {
    "text": "target has been hit we now utilize a single voltage fault to sweep through all our search space and by this also",
    "start": "1405440",
    "end": "1412460"
  },
  {
    "text": "record partial successes with respect to our partial success functions all right now because we have previously",
    "start": "1412460",
    "end": "1417980"
  },
  {
    "text": "been chaining our single voltage fault injection units we would have to translate the parameters we just found",
    "start": "1417980",
    "end": "1423200"
  },
  {
    "text": "into relative ones quite simple here a problem arise however because we do not know how a previous voltage fault to",
    "start": "1423200",
    "end": "1430220"
  },
  {
    "text": "be injected affects the succeeding one's parameters basically and in fact this",
    "start": "1430220",
    "end": "1435320"
  },
  {
    "text": "cannot be decided because we are leaving the specified operating conditions guessing would be totally wrong at this",
    "start": "1435320",
    "end": "1440539"
  },
  {
    "text": "point and what we've been doing instead is to generate um very small intervals from our",
    "start": "1440539",
    "end": "1446360"
  },
  {
    "text": "parameters basically some plus minus Delta so to speak and use these small intervals to throw them into our",
    "start": "1446360",
    "end": "1453380"
  },
  {
    "text": "integration stage which then performs some kind of a combined brute force on",
    "start": "1453380",
    "end": "1458419"
  },
  {
    "text": "all these small intervals right this is the first stage where our overall attack is performed for the first time",
    "start": "1458419",
    "end": "1464240"
  },
  {
    "text": "and hence we do not care too much to evalu to evaluate our partial success functions anymore but instead we only",
    "start": "1464240",
    "end": "1470840"
  },
  {
    "text": "evaluate our overall success functions at this stage all right now",
    "start": "1470840",
    "end": "1475880"
  },
  {
    "text": "um in our evaluation stage afterwards we just check for um basically repeatability and",
    "start": "1475880",
    "end": "1481940"
  },
  {
    "text": "reliability of the previous attacks so quite simple all right let's now see",
    "start": "1481940",
    "end": "1487100"
  },
  {
    "text": "oh let's now see what we are um what what we can basically do with this right",
    "start": "1487100",
    "end": "1494120"
  },
  {
    "text": "let's break some stuff basically so here I'm going to focus on first of",
    "start": "1494120",
    "end": "1499220"
  },
  {
    "text": "all Breaking these duplication based approaches which I've introduced earlier and afterwards I'm going to show you how every trust the name architecture out",
    "start": "1499220",
    "end": "1505640"
  },
  {
    "text": "there can easily be broken so bear with me duplicated registers as we see in in our",
    "start": "1505640",
    "end": "1512120"
  },
  {
    "text": "background section basically these are commonly used to protect any security critical configurations in your system",
    "start": "1512120",
    "end": "1518179"
  },
  {
    "text": "against fault injection and we have found them to be used in for example debugging features which determine",
    "start": "1518179",
    "end": "1524000"
  },
  {
    "text": "whether or not you have debug access to your core or physically unclogable functions basically any system security",
    "start": "1524000",
    "end": "1530360"
  },
  {
    "text": "configurations and well yeah this is a non-exhaustive list right",
    "start": "1530360",
    "end": "1535640"
  },
  {
    "text": "all right let's make an attack plan to attack this and I want you to remember that we now have two registers mapped",
    "start": "1535640",
    "end": "1541880"
  },
  {
    "text": "into our memory space which are referred to as our original register as well as our duplicated register",
    "start": "1541880",
    "end": "1547940"
  },
  {
    "text": "under normal circumstances we would commonly go ahead and assign both of them the very same value in a sequential",
    "start": "1547940",
    "end": "1554240"
  },
  {
    "text": "fashion so first of all our original register gets written afterwards we write the very same value to our",
    "start": "1554240",
    "end": "1559580"
  },
  {
    "text": "duplicated register the attack plan ends looks quite simple we actually just skip over the assignment to this register and",
    "start": "1559580",
    "end": "1566000"
  },
  {
    "text": "afterwards skip over the assignment to this search system all right let's now see",
    "start": "1566000",
    "end": "1571940"
  },
  {
    "text": "um the results of our sweeping stage basically and this is what it looks like but maybe some preschool May first year",
    "start": "1571940",
    "end": "1578480"
  },
  {
    "text": "so our multiple fault injection platform is running with a frequency of 100 megahertz which means in turn we have a",
    "start": "1578480",
    "end": "1584659"
  },
  {
    "text": "period of exactly 10 nanoseconds right and this means that a single step along",
    "start": "1584659",
    "end": "1590600"
  },
  {
    "text": "the x-axis which depicts of voltage defaults offset and the y-axis which depicts our voltage faults with is",
    "start": "1590600",
    "end": "1597380"
  },
  {
    "text": "exactly equivalent to 10 nanoseconds all right the gray grayish process",
    "start": "1597380",
    "end": "1605360"
  },
  {
    "text": "um show these results where we injected a single fold and basically nothing ever happened",
    "start": "1605360",
    "end": "1611000"
  },
  {
    "text": "the red one I've labeled them here stupid crashes because we we commonly do not want to encounter them right if we",
    "start": "1611000",
    "end": "1616820"
  },
  {
    "text": "cause a crash well we have to reboot our Target and this just lowers our throughput and and fault injection",
    "start": "1616820",
    "end": "1623539"
  },
  {
    "text": "attempts in blue you see where we successfully skipped over the assignment to our",
    "start": "1623539",
    "end": "1629059"
  },
  {
    "text": "original register whereas in green you see where we successfully skipped over the assignment to our duplicated register let's now arbitrarily or maybe",
    "start": "1629059",
    "end": "1636919"
  },
  {
    "text": "semi arbitrarily choose some values from these intervals to perform multiple fault injections so let's go with this",
    "start": "1636919",
    "end": "1643039"
  },
  {
    "text": "one here because there are no stupid crashes around and well why am I actually choosing a",
    "start": "1643039",
    "end": "1648740"
  },
  {
    "text": "much narrower way for the second one any ideas all right let me tell you why because",
    "start": "1648740",
    "end": "1655400"
  },
  {
    "text": "this is what it looks like on a physical level and after we are done with our multiple fault injection you see there's",
    "start": "1655400",
    "end": "1661940"
  },
  {
    "text": "a really slow recover curve right we are slowly recovering for for from our multiple fault injection attack",
    "start": "1661940",
    "end": "1667760"
  },
  {
    "text": "basically and yeah well internal as well as external capacitances would have to be recharged at this point this however",
    "start": "1667760",
    "end": "1675200"
  },
  {
    "text": "is the original voltage level even before we injected a single fault and this is the voltage level before we",
    "start": "1675200",
    "end": "1682580"
  },
  {
    "text": "after we injected a single fold and before we are about to inject the second one and as you see this is only roughly",
    "start": "1682580",
    "end": "1688760"
  },
  {
    "text": "half the original voltage level so if we would now go ahead and inject a",
    "start": "1688760",
    "end": "1694220"
  },
  {
    "text": "much wider fault well we would unnecessarily stress our Target device and by this cause a lot of crashes",
    "start": "1694220",
    "end": "1701240"
  },
  {
    "text": "all right so you in in conclusion you could say that you would have to take",
    "start": "1701240",
    "end": "1706460"
  },
  {
    "text": "care of this whenever your fault targets are not reasonably separated in space",
    "start": "1706460",
    "end": "1712100"
  },
  {
    "text": "okay let's see some results and these are really amazing I couldn't believe it but first of all what are we seeing here the x-axis is an exponential scale which",
    "start": "1712100",
    "end": "1719299"
  },
  {
    "text": "shows you the number of fault injection attacks we've been performing and the y-axis is a linear scale which shows you",
    "start": "1719299",
    "end": "1726799"
  },
  {
    "text": "um our success rate in percent basically and as you see it's it's really crazy we seemingly converge around a success rate",
    "start": "1726799",
    "end": "1733460"
  },
  {
    "text": "of 70 percent which is really a lot because if you read single fault injection papers well they all state",
    "start": "1733460",
    "end": "1739100"
  },
  {
    "text": "like we have maybe a success rate of 20 or 30 but this is rather High to be honest and what we did here is we",
    "start": "1739100",
    "end": "1745400"
  },
  {
    "text": "injected multiple faults even and get the success rate of 70 percent okay",
    "start": "1745400",
    "end": "1751279"
  },
  {
    "text": "so I I hope you all agree that this encounter measure is in fact broken let's now see how to attack the trans",
    "start": "1751279",
    "end": "1757940"
  },
  {
    "text": "architectures out there and here I'm going to show you an attack which works on all these processes which are in the",
    "start": "1757940",
    "end": "1764120"
  },
  {
    "text": "heading over here so first of all we would have to go ahead and skip over the activation of",
    "start": "1764120",
    "end": "1769159"
  },
  {
    "text": "this SIU oh yeah and to the top right don't worry this is just meant to provide a reference in case you are",
    "start": "1769159",
    "end": "1775220"
  },
  {
    "text": "already familiar with the Trust online architecture if you are not just ignored",
    "start": "1775220",
    "end": "1780620"
  },
  {
    "text": "so first of all we skip over this SAU activation over here afterwards so we have to skip over the",
    "start": "1780620",
    "end": "1786740"
  },
  {
    "text": "um these additional back checking mechanisms on the HP bus and finally we",
    "start": "1786740",
    "end": "1792200"
  },
  {
    "text": "would have to perform some sort of a privileged escalation because we do not",
    "start": "1792200",
    "end": "1798799"
  },
  {
    "text": "we just deactivated the Trust on M and we can't make any transitions to non-secure at this point so yeah this is",
    "start": "1798799",
    "end": "1805520"
  },
  {
    "text": "basically it if you are like me know however um well I I just have to tell you all",
    "start": "1805520",
    "end": "1812419"
  },
  {
    "text": "these targets broke down you know and the STM for example it broke down like every 30 seconds the",
    "start": "1812419",
    "end": "1818919"
  },
  {
    "text": "m2351 broke down like every five minutes and the saml 11 took him some longer he",
    "start": "1818919",
    "end": "1824960"
  },
  {
    "text": "broke down like once in an hour and I assume that this differences arise due to maybe imperfect parameters however",
    "start": "1824960",
    "end": "1831440"
  },
  {
    "text": "the parameters are still sufficient because we successfully broke them all and if you are like me now however this",
    "start": "1831440",
    "end": "1837679"
  },
  {
    "text": "is this should make you happy but this you know just doesn't make you happy actually because well we have been",
    "start": "1837679",
    "end": "1842899"
  },
  {
    "text": "developing this super sophisticated uh let's let's just coin it this way super sophisticated",
    "start": "1842899",
    "end": "1849980"
  },
  {
    "text": "multiple fault injection approach you know we have developed this advanced",
    "start": "1849980",
    "end": "1855140"
  },
  {
    "text": "search basically and now really three-folds is all it takes so depressing right but you know what",
    "start": "1855140",
    "end": "1861500"
  },
  {
    "text": "thank God there's nxp I really love them it's my favorite they are my favorite IC manufacturer and what",
    "start": "1861500",
    "end": "1867679"
  },
  {
    "text": "they did is they additionally protected these trusts on gates to the right by",
    "start": "1867679",
    "end": "1873020"
  },
  {
    "text": "using this duplication-based approaches so instead of injecting only threefolds to to attack these trust and animals",
    "start": "1873020",
    "end": "1879760"
  },
  {
    "text": "implementations we would have to inject up to four voltage faults here first of all same as before we skip over",
    "start": "1879760",
    "end": "1886700"
  },
  {
    "text": "the activation of this SAU afterwards well we skip over the original register",
    "start": "1886700",
    "end": "1892039"
  },
  {
    "text": "of this trusts and gate over here afterwards we skip over the duplicate register and by this fully deactivate",
    "start": "1892039",
    "end": "1898399"
  },
  {
    "text": "the um this additional back checking mechanisms and finally we perform the very same",
    "start": "1898399",
    "end": "1904779"
  },
  {
    "text": "privileged escalation as before so you see let's let's see some results",
    "start": "1904779",
    "end": "1910940"
  },
  {
    "text": "actually so we inject a single fault over here and we gain a success rate of roughly 45 percent",
    "start": "1910940",
    "end": "1918140"
  },
  {
    "text": "let's untick both of them and we got a success rate of 2.5 percent three of them we are with 0.23 percent",
    "start": "1918140",
    "end": "1926179"
  },
  {
    "text": "and if we perform our overall attack against distrust Zone M well we have a success rate of roughly 0.0003 percent",
    "start": "1926179",
    "end": "1934340"
  },
  {
    "text": "you may wonder why is there such a huge drop in between these in between our third four targets and our fourth fall",
    "start": "1934340",
    "end": "1941179"
  },
  {
    "text": "Target actually and this is because well nxp decided today to to to activate their Brahma detection in between our",
    "start": "1941179",
    "end": "1948380"
  },
  {
    "text": "third and fourth floor Target so by this We additionally successfully glitched",
    "start": "1948380",
    "end": "1953419"
  },
  {
    "text": "over the brown detection of NXT which is also you know nice to have all right and if you now think well",
    "start": "1953419",
    "end": "1960260"
  },
  {
    "text": "this is not a real Attack you know 0.0003 that's almost nothing let me tell",
    "start": "1960260",
    "end": "1965779"
  },
  {
    "text": "you in our experiments we have been encountering successes in an average",
    "start": "1965779",
    "end": "1971480"
  },
  {
    "text": "time of half a day all right and it took at most one day let's just say by by saying one day and",
    "start": "1971480",
    "end": "1979940"
  },
  {
    "text": "if you think about the consequences so the implications made by this attack this must be considered critical actually because once we are done there",
    "start": "1979940",
    "end": "1987500"
  },
  {
    "text": "is no trusts on left actually there is no secure there is no it's non-secure",
    "start": "1987500",
    "end": "1992600"
  },
  {
    "text": "um there is just basically me owning all just all your precious secret data you know and yeah this so even",
    "start": "1992600",
    "end": "2000340"
  },
  {
    "text": "um a success rate of 0.0003 in this context must be considered practical critical",
    "start": "2000340",
    "end": "2006519"
  },
  {
    "text": "actually all right let's now conclude with some possible multiple fault injection countermeasures",
    "start": "2006519",
    "end": "2012100"
  },
  {
    "text": "and a little teaser here well shall we maybe Implement them on the instruction level",
    "start": "2012100",
    "end": "2018240"
  },
  {
    "text": "all right so in case your answer was yes I would like you to leave this room right now because you have obviously not",
    "start": "2019080",
    "end": "2024880"
  },
  {
    "text": "been paying attention we definitely want to go with hardware-based countermeasures right and",
    "start": "2024880",
    "end": "2031059"
  },
  {
    "text": "into as an example Intel just integrated them in that Wolfgang processors yesterday there was a great talk here at",
    "start": "2031059",
    "end": "2036519"
  },
  {
    "text": "black cat who um which just went about this um the configuration of this",
    "start": "2036519",
    "end": "2043539"
  },
  {
    "text": "um countermeasures on the hardware level it's great and it props to you really and I've been in contact with with quite",
    "start": "2043539",
    "end": "2050858"
  },
  {
    "text": "a lot of embedded IC manufacturers and all of them stated that they are working on well let's just say similar counter",
    "start": "2050859",
    "end": "2057820"
  },
  {
    "text": "measures basically you could now go ahead and ask well what about these devices which are security",
    "start": "2057820",
    "end": "2063040"
  },
  {
    "text": "critical and which are already on the market for this I will strongly appointment is",
    "start": "2063040",
    "end": "2068260"
  },
  {
    "text": "five minutes okay um for this I would strongly recommend you to",
    "start": "2068260",
    "end": "2073960"
  },
  {
    "text": "um use this duplication based approaches and we'll combine them with random",
    "start": "2073960",
    "end": "2079060"
  },
  {
    "text": "delays because we have only been able to perform our sophisticated uh search approach basically because these",
    "start": "2079060",
    "end": "2085300"
  },
  {
    "text": "photographers are always in the same location right timely location basically all right so here are your main",
    "start": "2085300",
    "end": "2091599"
  },
  {
    "text": "takeaways multiple fault injection can be implemented rather cheap by using voltage fault injection attacks such",
    "start": "2091599",
    "end": "2098380"
  },
  {
    "text": "multiple fault injection can then be used to for example break instruction level counter Metals as well as the transom and implementations out there",
    "start": "2098380",
    "end": "2104320"
  },
  {
    "text": "and basically any kind of secure interdependent security measure",
    "start": "2104320",
    "end": "2110320"
  },
  {
    "text": "and I just have to state that I would like to I would like to optimize our parameter search because I would like to",
    "start": "2110320",
    "end": "2117160"
  },
  {
    "text": "get rid of this differentiation based approach and go towards an even more independent solution I couldn't figure",
    "start": "2117160",
    "end": "2123880"
  },
  {
    "text": "it out yet so in case someone has a suggestion I'm definitely open to it and yeah finally we would like to thank nxp",
    "start": "2123880",
    "end": "2131320"
  },
  {
    "text": "for their really exceptional engagement in our responsible disclosure process yeah thank you",
    "start": "2131320",
    "end": "2137690"
  },
  {
    "text": "[Applause] [Music]",
    "start": "2137690",
    "end": "2143110"
  },
  {
    "text": "[Music]",
    "start": "2146950",
    "end": "2150060"
  }
]