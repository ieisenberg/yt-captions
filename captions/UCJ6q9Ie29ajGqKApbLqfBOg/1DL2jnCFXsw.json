[
  {
    "start": "0",
    "end": "135000"
  },
  {
    "text": "hi everybody uh I'm very glad to be here uh today we are going to talk about uh well",
    "start": "40",
    "end": "8880"
  },
  {
    "text": "ap's way evading your emulation based Network intrusion detection uh my name is Ali",
    "start": "8880",
    "end": "16278"
  },
  {
    "text": "Abasi and uh I am PhD a student in distributed and embeded system Security",
    "start": "16279",
    "end": "22000"
  },
  {
    "text": "Group at University of tent here in Netherlands and uh well I did my master",
    "start": "22000",
    "end": "29199"
  },
  {
    "text": "in China on PLC security and uh well before that I was working as head of",
    "start": "29199",
    "end": "36600"
  },
  {
    "text": "vulnerability analysis and penetration testing group uh in Iran national SE in",
    "start": "36600",
    "end": "42120"
  },
  {
    "text": "tahran Iran and my colleague yours yeah my master student and I'm a master",
    "start": "42120",
    "end": "48440"
  },
  {
    "text": "student and a research assistant at the same group and uh where I do research into advanced persistent threats and",
    "start": "48440",
    "end": "53840"
  },
  {
    "text": "unknown malware yeah we just have one M okay okay so let's",
    "start": "53840",
    "end": "63479"
  },
  {
    "text": "start uh well we start first with the history of exploitation and shell Cates",
    "start": "63479",
    "end": "69000"
  },
  {
    "text": "very fast and uh then we will we will give you very brief introduction to uh",
    "start": "69000",
    "end": "75040"
  },
  {
    "text": "emulation based Network in and detection approach and the adaptation of it and then after that we will talk about how",
    "start": "75040",
    "end": "82400"
  },
  {
    "text": "uh they detect the shell codes in the network streams and their heris stics",
    "start": "82400",
    "end": "88400"
  },
  {
    "text": "and after that we'll have we will talk about the evasions we uh designed and uh",
    "start": "88400",
    "end": "94360"
  },
  {
    "text": "we will have demo beside that and after we'll have question and",
    "start": "94360",
    "end": "99920"
  },
  {
    "text": "answer so 35 years ago around 35 years ago",
    "start": "99920",
    "end": "107600"
  },
  {
    "text": "first time you had uh warms which was first time using buffer overflow attacks",
    "start": "107600",
    "end": "113560"
  },
  {
    "text": "and they were using shell codes to exploit the systems and then time by time it's it get evolved and uh by uh",
    "start": "113560",
    "end": "122920"
  },
  {
    "text": "like using more complicated techniques using polymorphic shell codes like there was new encoders and whatever so it",
    "start": "122920",
    "end": "130399"
  },
  {
    "text": "changed time by time and it became more and more advanced so normally the the detection",
    "start": "130399",
    "end": "137959"
  },
  {
    "start": "135000",
    "end": "135000"
  },
  {
    "text": "was based on uh like very basic one was like signature based Network intrusion detection systems to detect attack and",
    "start": "137959",
    "end": "145360"
  },
  {
    "text": "it was like basically based on uh looking at the return addresses if you have m NOP instructions uh the shell Cod",
    "start": "145360",
    "end": "152239"
  },
  {
    "text": "signature or even if it if you had you were lucky then you could even detect",
    "start": "152239",
    "end": "157360"
  },
  {
    "text": "some polymorphic encoders based on their signatures well it wasn't very very",
    "start": "157360",
    "end": "164080"
  },
  {
    "start": "162000",
    "end": "162000"
  },
  {
    "text": "efficient because that the attackers could change some part of their their",
    "start": "164080",
    "end": "169200"
  },
  {
    "text": "their codes and then uh you couldn't like detect it and uh of course like",
    "start": "169200",
    "end": "175840"
  },
  {
    "text": "government supported attacker or like uh more sophisticated attackers they were they could uh make their own custom",
    "start": "175840",
    "end": "182800"
  },
  {
    "text": "encoder and decoder for the shell codes and uh well there was always the problem",
    "start": "182800",
    "end": "188680"
  },
  {
    "text": "that you have to always maintain and update your signatures that's a big",
    "start": "188680",
    "end": "194040"
  },
  {
    "text": "problem then you had a new approach which was emulation based Network",
    "start": "194040",
    "end": "199760"
  },
  {
    "start": "195000",
    "end": "195000"
  },
  {
    "text": "intrusion well it was there was a lot of benefits and the in the emulation based Network intersection",
    "start": "199760",
    "end": "206239"
  },
  {
    "text": "approaches uh well first of all it uh it could detect polymorphic shell codes",
    "start": "206239",
    "end": "212080"
  },
  {
    "text": "regardless of type of encoder you were using and U it was not vulnerability",
    "start": "212080",
    "end": "217239"
  },
  {
    "text": "dependent which means that even if you had a zero day exploit it might could",
    "start": "217239",
    "end": "222360"
  },
  {
    "text": "detect it and it was basically based on some Heros stics and uh like kind of",
    "start": "222360",
    "end": "227599"
  },
  {
    "text": "blacklisting some uh behaviors of the uh shell",
    "start": "227599",
    "end": "233159"
  },
  {
    "start": "233000",
    "end": "233000"
  },
  {
    "text": "codes and so basically how it was how it's working is based on uh you have a pre-processing step which you look at",
    "start": "233159",
    "end": "240400"
  },
  {
    "text": "the network stream and then um uh you select a suspicious Network stream you",
    "start": "240400",
    "end": "246400"
  },
  {
    "text": "emulate it you generate the execution patterns and once you generate the execution pattern you match it with",
    "start": "246400",
    "end": "251959"
  },
  {
    "text": "certain htic which is a behavior of a shell code and once you matched it then you generate alert and saying hey this",
    "start": "251959",
    "end": "258359"
  },
  {
    "text": "is a like a shell code in exploit in a network stream which probably means that somebody is exploiting you well and then",
    "start": "258359",
    "end": "265919"
  },
  {
    "text": "you had a lot of project adopting uh these approaches right yeah and uh well lot of uh famous",
    "start": "265919",
    "end": "275680"
  },
  {
    "text": "even honey project hi guys uh yeah so they adopted such approach and",
    "start": "275680",
    "end": "282280"
  },
  {
    "text": "uh for our work we choose two emulation based Network in detection for proof of",
    "start": "282280",
    "end": "288680"
  },
  {
    "text": "concept so first one is nimu which is a let's say state of the art uh emulation",
    "start": "288680",
    "end": "294800"
  },
  {
    "text": "based Network in section with a lot of f sticks uh let's say most advanced until",
    "start": "294800",
    "end": "300720"
  },
  {
    "text": "now we uh we saw and another one is Lim which is a simple uh emulation based",
    "start": "300720",
    "end": "305880"
  },
  {
    "text": "networking TR section which basically uh detecting shell codes which is very very",
    "start": "305880",
    "end": "312720"
  },
  {
    "text": "simple I'll first install",
    "start": "312720",
    "end": "316759"
  },
  {
    "text": "this it's too bad they didn't have two of them yeah so",
    "start": "319600",
    "end": "326800"
  },
  {
    "text": "basically what does it look like in can you hear me yeah so what does it look like in",
    "start": "326800",
    "end": "332280"
  },
  {
    "text": "practice um obviously first uh the emulation system will have to find a way to detect whether a given Network stream",
    "start": "332280",
    "end": "339600"
  },
  {
    "start": "333000",
    "end": "333000"
  },
  {
    "text": "actually includes Shell Code so it does this by uh having a pre-processing step which looks for the characteristics of",
    "start": "339600",
    "end": "346039"
  },
  {
    "text": "so-called GBC code for those who don't know uh most shell codes will need to have a way to find the program counter",
    "start": "346039",
    "end": "353039"
  },
  {
    "text": "in order to refer to their own body for further decryption purposes so two characteristics of uh G C code are",
    "start": "353039",
    "end": "360600"
  },
  {
    "text": "usually the so-called I don't know yeah if you can see over there are usually a",
    "start": "360600",
    "end": "366160"
  },
  {
    "text": "call or FPU store environment instruction which store the current program counters somewhere in memory",
    "start": "366160",
    "end": "372520"
  },
  {
    "text": "once these instructions are detected within a network stream it considers the network stream as a potential candidate",
    "start": "372520",
    "end": "378400"
  },
  {
    "text": "and it skips to the emulation step yeah so it skips to the emulation",
    "start": "378400",
    "end": "385960"
  },
  {
    "text": "step which is basically straightforward from the point where it detected the get p instruction it starts emulating it",
    "start": "385960",
    "end": "391680"
  },
  {
    "text": "using for example an emulated x86 instruction set and supplementing it with a generic memory image for uh",
    "start": "391680",
    "end": "398319"
  },
  {
    "text": "supporting like for example API calls having some local variables which the Shell Code could refer to in order to",
    "start": "398319",
    "end": "404479"
  },
  {
    "text": "generate an execution Trace which is compared against certain euristic so there are several euristic which are",
    "start": "404479",
    "end": "411000"
  },
  {
    "start": "408000",
    "end": "408000"
  },
  {
    "text": "used to detect shell codes the first and the primary one which is GPC code detection so obviously it already",
    "start": "411000",
    "end": "417440"
  },
  {
    "text": "detected some GPC seating instruction which is why it marked it as potentially suspicious and if the Shell Code",
    "start": "417440",
    "end": "423720"
  },
  {
    "text": "subsequently refers to the memory location where that uh program counter was stored it considers it as malicious",
    "start": "423720",
    "end": "431160"
  },
  {
    "text": "because it executes GPC code the second juristic is the socalled payload read",
    "start": "431160",
    "end": "436560"
  },
  {
    "text": "threshold ristic which means that if you have self- modifying Shell Code you obviously have a lot of read operations",
    "start": "436560",
    "end": "442479"
  },
  {
    "text": "over the Shell Code body for decryption and subsequent uh writing of the decoded plane text so if uh the emulator uh sees",
    "start": "442479",
    "end": "451039"
  },
  {
    "text": "a lot of read operations to Unique memory addresses uh and this number of",
    "start": "451039",
    "end": "456280"
  },
  {
    "text": "read operations executes a certain threshold then it considers it as",
    "start": "456280",
    "end": "461479"
  },
  {
    "text": "malicious uh the third juristic is also based on the behavior of decoders which is the right execute uh instruction",
    "start": "461479",
    "end": "468319"
  },
  {
    "text": "threshold um similarly when you're decoding a piece of Shell Code body uh",
    "start": "468319",
    "end": "473360"
  },
  {
    "text": "there are a lot of operations which are being ridden to the recently decoded memory area and if you execute Shell",
    "start": "473360",
    "end": "479800"
  },
  {
    "text": "Code instructions from a piece of um memory which is recently been written to then it considers it as malicious so",
    "start": "479800",
    "end": "487280"
  },
  {
    "start": "487000",
    "end": "487000"
  },
  {
    "text": "namu added a lot of additional tics to this which are mainly based on Windows Shell Code but similar Uris sixs could",
    "start": "487280",
    "end": "492800"
  },
  {
    "text": "be developed for Linux so the primarily one uh which is Kernel 32.dll Base",
    "start": "492800",
    "end": "498560"
  },
  {
    "text": "address resolution which we'll all discuss in detail in the next slides the second of which is structured exception",
    "start": "498560",
    "end": "504440"
  },
  {
    "text": "Handler based GPC code and the third of which is process memory scanning also known as egg hunting",
    "start": "504440",
    "end": "510960"
  },
  {
    "text": "so when you have a piece of Shell Code which runs on Windows you're obviously going to have a need for calling certain",
    "start": "510960",
    "end": "517719"
  },
  {
    "text": "apis for opening Network ports downloading a file doing whatever you want to do so in order to do this you",
    "start": "517719",
    "end": "524240"
  },
  {
    "text": "need to know the addresses of the certain apis which are located in certain libraries and you need to load those libraries and you do that with",
    "start": "524240",
    "end": "530640"
  },
  {
    "text": "functions which reside in kernel 32.dll so first of all you're going to have to need the Base address of this library in",
    "start": "530640",
    "end": "537360"
  },
  {
    "text": "order to perform any functionality as all at all so ebn IDs usually considers",
    "start": "537360",
    "end": "542600"
  },
  {
    "text": "uh Base address resolution of this Library as an invariant for Windows shell codes so one of the ways to do",
    "start": "542600",
    "end": "548680"
  },
  {
    "text": "this is using the so-called process environment block which is located in memory for any process which contains as",
    "start": "548680",
    "end": "554360"
  },
  {
    "text": "you can see over there a pointer to a linked list of all the modules that have been loaded during uh load time and the",
    "start": "554360",
    "end": "560720"
  },
  {
    "text": "second of which is traditionally kernel 32 so you can trivy obtain the Base address this is one of the things that",
    "start": "560720",
    "end": "567079"
  },
  {
    "text": "Neu blacklists second way to obtain uh the Base address of Kernel 32 is using",
    "start": "567079",
    "end": "573320"
  },
  {
    "text": "so-called backwards structured exception handling walking which involves basically walking the structured",
    "start": "573320",
    "end": "578880"
  },
  {
    "text": "exception Handler train all the way to the first structur exception Handler frame which uh includes the default",
    "start": "578880",
    "end": "585839"
  },
  {
    "text": "structured exception Handler which usually lives in kernel 32. and then once you have a pointer inside the B",
    "start": "585839",
    "end": "592880"
  },
  {
    "text": "inside the memory image of Kernel 32.dll you can walk all the way backwards until the portable executable header and you",
    "start": "592880",
    "end": "598640"
  },
  {
    "text": "have the base address as well this behavior is being blacklisted by Nemo as well as Base address",
    "start": "598640",
    "end": "604040"
  },
  {
    "text": "resolution so uh when they developed this they noticed that there was another way to uh execute get PC code without",
    "start": "604040",
    "end": "611360"
  },
  {
    "text": "having get PC seating instructions by using the structured exception Handler the thing is that if you construct a",
    "start": "611360",
    "end": "617040"
  },
  {
    "text": "custom structured exception Handler and then you trigger an exis violation by reading from an invalid memory address",
    "start": "617040",
    "end": "623160"
  },
  {
    "text": "you execute your own custom structured exception Handler which includes a pointer to the structured exception",
    "start": "623160",
    "end": "628519"
  },
  {
    "text": "record which includes a pointer to the violating instruction which is your program counter and then you continue",
    "start": "628519",
    "end": "634560"
  },
  {
    "text": "execution having a pointer to your own body for subsequent decryption as you can see over here so this Behavior was",
    "start": "634560",
    "end": "640560"
  },
  {
    "text": "added as well as a euristic and executing this Behavior gets you blacklisted as well finally there's egg",
    "start": "640560",
    "end": "646399"
  },
  {
    "start": "644000",
    "end": "644000"
  },
  {
    "text": "hunting for those who don't know egg hunting is usually when you have a piece of Shell Code a small piece of Shell",
    "start": "646399",
    "end": "652480"
  },
  {
    "text": "Code and you have a large piece of Shell Code that was put in memory earlier using some other method you search",
    "start": "652480",
    "end": "658079"
  },
  {
    "text": "throughout the memory for your egg and then you execute the EG in order to do this you need to iterate through all",
    "start": "658079",
    "end": "664000"
  },
  {
    "text": "memory pages and you need some way of telling whether a memory page is valid or it isn't because if it isn't valid you cause an access violation your shell",
    "start": "664000",
    "end": "670240"
  },
  {
    "text": "code doesn't execute so they use usually use system calls to check is this memory",
    "start": "670240",
    "end": "675600"
  },
  {
    "text": "page valid if it is we check all the bytes for our EG and we execute our EG so this behavior is being blacklisted as",
    "start": "675600",
    "end": "682279"
  },
  {
    "text": "well so yeah this is a very high quality clicker so we found a couple of uh",
    "start": "682279",
    "end": "688200"
  },
  {
    "start": "686000",
    "end": "686000"
  },
  {
    "text": "evasions which we categorized in implementational and intrinsic limitations so the implementational",
    "start": "688200",
    "end": "693600"
  },
  {
    "text": "limitations are basically limitations of these particular systems we looked at which could possibly be mitigated by a",
    "start": "693600",
    "end": "700079"
  },
  {
    "text": "lot of additional research effort and the intrinsic limitations are in our opinion limitations which are intrinsic",
    "start": "700079",
    "end": "705760"
  },
  {
    "text": "to the concept of ebn IDs so even like other implementations couldn't address",
    "start": "705760",
    "end": "710920"
  },
  {
    "text": "these in the case of the pre-processing and the euristic steps we found implementational limitations and in the",
    "start": "710920",
    "end": "716360"
  },
  {
    "text": "case of the emulation step which is integral to the entire proc process we found limitations of both kinds so what",
    "start": "716360",
    "end": "723639"
  },
  {
    "start": "723000",
    "end": "723000"
  },
  {
    "text": "kind of intrinsic limitations are there well the primary one is the unavailability of context data if you",
    "start": "723639",
    "end": "729839"
  },
  {
    "text": "have a piece of Shell Code which is being run against a Target machine then obviously the context of the target",
    "start": "729839",
    "end": "735320"
  },
  {
    "text": "machine is different than the one of the network based emulator because you're going to have a different usernames different times CPU ID all kinds of",
    "start": "735320",
    "end": "742279"
  },
  {
    "text": "information which is present on a Target system but cannot be possibly be present on the emulator for reasons of",
    "start": "742279",
    "end": "747720"
  },
  {
    "text": "scalability you can like memory image of every that's running on the emulator so",
    "start": "747720",
    "end": "752959"
  },
  {
    "text": "by including information from the target environment in your shell code you can",
    "start": "752959",
    "end": "758199"
  },
  {
    "text": "event prevent emulation by the ebn IDS and thus prevent detection which we'll discuss methods for in",
    "start": "758199",
    "end": "765079"
  },
  {
    "text": "detail um the second limitation is the execution threshold obviously for reasons of guaranteeing a decent",
    "start": "765079",
    "end": "771160"
  },
  {
    "text": "throughput the emulator will need to decide after a certain time of emulation to drop the emulation and say I didn't",
    "start": "771160",
    "end": "777040"
  },
  {
    "text": "detect anything because it doesn't have all the time in the world for every possible packet while the attacker can easily wait half an hour or an hour",
    "start": "777040",
    "end": "783360"
  },
  {
    "text": "before his shell before his payload executes so exploiting that is another intrinsic limitation as well and the",
    "start": "783360",
    "end": "790279"
  },
  {
    "text": "third limitation is the fact that ebn IDs cannot deal with fragmented Shell Code which is scattered over multiple",
    "start": "790279",
    "end": "795959"
  },
  {
    "text": "non-consecutive Network packets so what does unavailable context data look like well obviously the first",
    "start": "795959",
    "end": "802399"
  },
  {
    "start": "799000",
    "end": "799000"
  },
  {
    "text": "one is non selfcontain Shell Code think return oriented programming because obviously if you have a lot of uh return",
    "start": "802399",
    "end": "808839"
  },
  {
    "text": "oriented programming gadgets uh which are present in the application on the target system but the same gadgets",
    "start": "808839",
    "end": "814120"
  },
  {
    "text": "aren't present on the emulating system then you can execute the Shell Code and does not obtain like a memory trace and",
    "start": "814120",
    "end": "820000"
  },
  {
    "text": "compare it against juristic um the second way to uh exploit unavailable context data is using",
    "start": "820000",
    "end": "826560"
  },
  {
    "text": "so-called context keying which you can see right here which is a relatively straightforward Way by encoding your PL",
    "start": "826560",
    "end": "833320"
  },
  {
    "start": "828000",
    "end": "828000"
  },
  {
    "text": "Tex body using a key derived from information which is only present on the target system so say say for example I",
    "start": "833320",
    "end": "839639"
  },
  {
    "text": "know I'm exploiting a Target system that has a particular username then I obtain the username encrypt it with the",
    "start": "839639",
    "end": "845759"
  },
  {
    "text": "username or the CPU ID or information like that and then have the decoder",
    "start": "845759",
    "end": "850920"
  },
  {
    "text": "basically be an uh a decoder that obtains the same key and tries to decode the body if that information isn't",
    "start": "850920",
    "end": "857279"
  },
  {
    "text": "present on the emulator then it can emulate it and thus it cannot Blacklist it and it says nothing's going on",
    "start": "857279",
    "end": "863399"
  },
  {
    "text": "here so exploiting the execution threshold uh that basically involves using very straightforward solution",
    "start": "863399",
    "end": "870199"
  },
  {
    "text": "using time stalling code which tries to time out the emulator before it can actually detect something and as you can",
    "start": "870199",
    "end": "876480"
  },
  {
    "text": "see here which is a piece from the Neu code it decides after a couple of instructions has reached uh certain",
    "start": "876480",
    "end": "882959"
  },
  {
    "text": "threshold it just drops it and it says I detected nothing we tested this uh using uh very",
    "start": "882959",
    "end": "889800"
  },
  {
    "text": "basic techniques like opaque loops and intensive Loops which are documented in depth in the paper we published and",
    "start": "889800",
    "end": "895360"
  },
  {
    "text": "using integrated Loops which is basically calculating the decryption key based on the uh operations executed by",
    "start": "895360",
    "end": "901320"
  },
  {
    "text": "the loop itself so it actually has to execute and using the random decryption algorithm uh which is the following it's",
    "start": "901320",
    "end": "908240"
  },
  {
    "start": "907000",
    "end": "907000"
  },
  {
    "text": "also fairly straightforward it basically involves encoding your get PC code and your shell code body using a randomly",
    "start": "908240",
    "end": "915399"
  },
  {
    "text": "generated key then generating a hash of the plane text of the get PC code and",
    "start": "915399",
    "end": "920800"
  },
  {
    "text": "the Shell Code body throwing away the keys and having the decoder basically Brute Force the key and upon every key",
    "start": "920800",
    "end": "927040"
  },
  {
    "text": "candidate check whether the plane body matches the hash if so we can continue execution because we properly decoded it",
    "start": "927040",
    "end": "933279"
  },
  {
    "text": "if not it basically tries the next candidate I mean this takes a long time like 1 hour or something which is",
    "start": "933279",
    "end": "939560"
  },
  {
    "text": "Affordable for an attacker but again not for the amulet which times out fragmentation is a very rare condition",
    "start": "939560",
    "end": "946839"
  },
  {
    "start": "944000",
    "end": "944000"
  },
  {
    "text": "and it really depends on the kind of exploit you want to exploit but there are a lot of exploits where the payload",
    "start": "946839",
    "end": "952639"
  },
  {
    "text": "gets scattered across multiple Network packets so for example if you have an exploit which concatenates certain",
    "start": "952639",
    "end": "959040"
  },
  {
    "text": "information from various Network packets then it gets spread out over the network and the Shell Code isn't present in one",
    "start": "959040",
    "end": "966040"
  },
  {
    "text": "condition well while is being evaluated and thus not all the information is present and doesn't know how to handle",
    "start": "966040",
    "end": "971199"
  },
  {
    "text": "them so the results were obtained by in the case of context keying uh using a",
    "start": "971199",
    "end": "976240"
  },
  {
    "text": "modified version of the context keying encoder which is present in the Met exploit framework uh uh module this",
    "start": "976240",
    "end": "983519"
  },
  {
    "text": "encoder was detected by nemu the normal one because it uses a piece of get PC code which is detected so we encoded the",
    "start": "983519",
    "end": "990440"
  },
  {
    "text": "get PC code as well using a context key and in that case it wasn't detected by any of them uh exploiting the non-",
    "start": "990440",
    "end": "997199"
  },
  {
    "text": "self-contained shell codes was achieved by dynamically building a get PC code and a Shell Code decoder out of Roop",
    "start": "997199",
    "end": "1003360"
  },
  {
    "text": "gadgets against the target vulnerable service and which was then run against Neo and Liu neither of which detected it",
    "start": "1003360",
    "end": "1010120"
  },
  {
    "text": "the execution threshold was exploited by implementing all types of time intensive loops and a random decryption algorithm",
    "start": "1010120",
    "end": "1016680"
  },
  {
    "text": "Liu wasn't capable of detecting any of them nemu was capable of detecting the two most simple ones but not the",
    "start": "1016680",
    "end": "1022560"
  },
  {
    "text": "Intensive and the random decryption algorithms so Ali is now going to give a",
    "start": "1022560",
    "end": "1027600"
  },
  {
    "text": "demo and I'm going to give this to him thanks",
    "start": "1027600",
    "end": "1034079"
  },
  {
    "text": "you okay can I just put it here it's easier than change it every time okay so before",
    "start": "1034079",
    "end": "1041918"
  },
  {
    "text": "I uh demo I have to um show you",
    "start": "1041919",
    "end": "1047400"
  },
  {
    "text": "something so we have uh we just made a application",
    "start": "1047400",
    "end": "1055320"
  },
  {
    "text": "which run basically our Shell Code so uh just uh running one sample Shell Code we",
    "start": "1055320",
    "end": "1061880"
  },
  {
    "text": "have just want to show you that the shell codes are working and they are not some random application so this is just",
    "start": "1061880",
    "end": "1068360"
  },
  {
    "text": "uh one of our polymorphic Shell Code we designed and you can see running correctly and just to make you sure more",
    "start": "1068360",
    "end": "1078400"
  },
  {
    "text": "I just open in open it in ol buug and uh open the application as test and",
    "start": "1078400",
    "end": "1087559"
  },
  {
    "text": "uh set my arguments to run my shell code and uh let's restart",
    "start": "1087559",
    "end": "1095640"
  },
  {
    "text": "it and I have to set a break point before it start which I already did",
    "start": "1095640",
    "end": "1103200"
  },
  {
    "text": "before so let's start it so it hit the",
    "start": "1103200",
    "end": "1108440"
  },
  {
    "text": "breakpoint you can see there I'm just um running it and okay the basic idea of",
    "start": "1108440",
    "end": "1114960"
  },
  {
    "text": "this shell code is that it's uh looking for previous stack frame I will explain it to you later but I just wanted to",
    "start": "1114960",
    "end": "1121360"
  },
  {
    "text": "show you that it's working",
    "start": "1121360",
    "end": "1125400"
  },
  {
    "text": "so okay now",
    "start": "1127200",
    "end": "1133480"
  },
  {
    "text": "uh well I'm going to demo the stuff but",
    "start": "1133480",
    "end": "1140039"
  },
  {
    "text": "before that I have to show you how it look like when um our for example nimu",
    "start": "1140039",
    "end": "1146400"
  },
  {
    "text": "and Liu to test cases for our shell codes detect the shell codes so you have",
    "start": "1146400",
    "end": "1151679"
  },
  {
    "text": "to first know once it detected how it look like right so we just made some bunch of baser script to make the",
    "start": "1151679",
    "end": "1157760"
  },
  {
    "text": "process faster",
    "start": "1157760",
    "end": "1161640"
  },
  {
    "text": "and okay so here uh we are testing a",
    "start": "1167240",
    "end": "1172919"
  },
  {
    "text": "simple polymorphic shell Cod against uh leap emo",
    "start": "1172919",
    "end": "1178640"
  },
  {
    "text": "and okay so here is the command we are running and as a result uh yeah thanks",
    "start": "1178640",
    "end": "1185880"
  },
  {
    "text": "yeah you can see the word success over there which means that Nimo could Liu sorry could detect the Shell Code",
    "start": "1185880",
    "end": "1192039"
  },
  {
    "text": "correctly and detected that it's a Shell Code and then we run it against uh Nemo",
    "start": "1192039",
    "end": "1197640"
  },
  {
    "text": "now uh against again a normal poly polymorphic Shell Code which is not",
    "start": "1197640",
    "end": "1202760"
  },
  {
    "text": "designed by us it's just a normal polymorphic shell codes as you can see n",
    "start": "1202760",
    "end": "1207919"
  },
  {
    "text": "even can detect the type of the Shell Code so as a result it can detect if you",
    "start": "1207919",
    "end": "1213559"
  },
  {
    "text": "are doing a kind of attack it can detect that hey there is a Shell Code over in the network so that was the first one but",
    "start": "1213559",
    "end": "1221880"
  },
  {
    "text": "now I'm going to demo for you two implementation for RDA random destion",
    "start": "1221880",
    "end": "1228520"
  },
  {
    "text": "algorithm and uh context King payload and coding again uh we made bash script uh",
    "start": "1228520",
    "end": "1237120"
  },
  {
    "text": "to just make the process faster I will show you the one sample source code of our BAS script uh so this is the Liu as",
    "start": "1237120",
    "end": "1244280"
  },
  {
    "text": "you can see there you can see the word failed which means Liu couldn't detect",
    "start": "1244280",
    "end": "1249960"
  },
  {
    "text": "our RDA implementation and Nemo well Nemo is",
    "start": "1249960",
    "end": "1257679"
  },
  {
    "text": "different when it can't detect anything it don't show you anything so you see nothing absolutely",
    "start": "1257679",
    "end": "1264400"
  },
  {
    "text": "nothing and uh the next demo is I'm using I'm using the implementation for",
    "start": "1264400",
    "end": "1270960"
  },
  {
    "text": "Contex payload and coding and uh well again again Liu",
    "start": "1270960",
    "end": "1278760"
  },
  {
    "text": "first this the command we are running and uh again you see the word failed which means uh Liam failed to detect the",
    "start": "1278760",
    "end": "1285640"
  },
  {
    "text": "Shell Code and uh again it's Nemo again you see nothing which means",
    "start": "1285640",
    "end": "1292360"
  },
  {
    "text": "that Nemo couldn't detect the shell Cod just for make you sure I just show you example of our the the source code of uh",
    "start": "1292360",
    "end": "1299799"
  },
  {
    "text": "one of our bashes scripts basically uh you can",
    "start": "1299799",
    "end": "1305320"
  },
  {
    "text": "see yeah you're are running the the the commands against Nimo and Li so it's",
    "start": "1305320",
    "end": "1312240"
  },
  {
    "text": "just wanted to make you sure about okay",
    "start": "1312240",
    "end": "1320039"
  },
  {
    "start": "1323000",
    "end": "1323000"
  },
  {
    "text": "thanks well uh the problems are not only in intrinsic limitation but there are",
    "start": "1324320",
    "end": "1329880"
  },
  {
    "text": "some um implementation limitation which can get solved but with more effort time",
    "start": "1329880",
    "end": "1335600"
  },
  {
    "text": "research money of course uh so we made several type of uh limitations",
    "start": "1335600",
    "end": "1342679"
  },
  {
    "text": "categories and uh first of all are heuristics heuristics have some limitation which is",
    "start": "1342679",
    "end": "1348760"
  },
  {
    "text": "uh you have to uh always know the type of f or the beh the behavior of the",
    "start": "1348760",
    "end": "1354520"
  },
  {
    "text": "shell codes to to to to make a blacklist out of those malicious behavior right so",
    "start": "1354520",
    "end": "1362919"
  },
  {
    "text": "if somebody make a Shell Code which do not show such Behavior then you can't",
    "start": "1362919",
    "end": "1368279"
  },
  {
    "text": "detect and another problem in the implementation limitation is the runtime",
    "start": "1368279",
    "end": "1373960"
  },
  {
    "text": "difference your shell code uh when it when it get emulated in a uh ebn IDs it",
    "start": "1373960",
    "end": "1379840"
  },
  {
    "text": "have a different runtime compared to a real system of course with more effort and",
    "start": "1379840",
    "end": "1385520"
  },
  {
    "text": "time you might be able to overcome this problem and another another problem is",
    "start": "1385520",
    "end": "1390919"
  },
  {
    "text": "unsupported instructions which means that um there are some instructions",
    "start": "1390919",
    "end": "1396120"
  },
  {
    "text": "which uh your EVN idas might not not be able to support well instruction sets are",
    "start": "1396120",
    "end": "1403960"
  },
  {
    "text": "time by time gets uh updated and uh well if you don't Main it then you can't uh execute those",
    "start": "1403960",
    "end": "1411000"
  },
  {
    "text": "instruction and if the attacker use that instruction then as a result you can uh you can't for example uh decode your",
    "start": "1411000",
    "end": "1418240"
  },
  {
    "text": "polymorphic the target polymorphic Shell Code and then you will fail to detect the shell Cod and the another problem is",
    "start": "1418240",
    "end": "1425000"
  },
  {
    "text": "that detection uh relies heavily on dis onti disassem on the disassembly of the",
    "start": "1425000",
    "end": "1430840"
  },
  {
    "text": "network Stream So if somebody use some anti- disassembly technique you might heard in the malware world and bring it",
    "start": "1430840",
    "end": "1437640"
  },
  {
    "text": "to uh shell codes words then uh they might be able to uh evade the ebn ideas",
    "start": "1437640",
    "end": "1446360"
  },
  {
    "text": "so first look at let's look at the hes equation so um I recommend you to read",
    "start": "1446360",
    "end": "1452679"
  },
  {
    "text": "the paper because we couldn't bring all the stuff which we have in the paper so we just highlighted the most important",
    "start": "1452679",
    "end": "1459799"
  },
  {
    "text": "ones and uh I'm just mentioning them and then explain the again most important",
    "start": "1459799",
    "end": "1466399"
  },
  {
    "text": "ones so first of all is the curent 32 address resolution htic evasion which we",
    "start": "1466399",
    "end": "1471919"
  },
  {
    "text": "designed and uh uh another one is uh which I will explain it later so that's why I don't explain it now and then uh",
    "start": "1471919",
    "end": "1479440"
  },
  {
    "text": "evading the payload rustic that's another uh evasion which we designed and",
    "start": "1479440",
    "end": "1484840"
  },
  {
    "text": "using a CIS call to execute read operation instead of using directly the payload Shell Code and uh uh another one",
    "start": "1484840",
    "end": "1492360"
  },
  {
    "text": "is uh evading right execute instructions using the virtual mapping which I will",
    "start": "1492360",
    "end": "1497440"
  },
  {
    "text": "explain and uh another one is evasion based on process memory scanning using walking",
    "start": "1497440",
    "end": "1503960"
  },
  {
    "text": "and API based a hunting which again I will explain let's first look at Kel c.",
    "start": "1503960",
    "end": "1509919"
  },
  {
    "text": "D resolution evasion it's working okay so Kel",
    "start": "1509919",
    "end": "1518279"
  },
  {
    "start": "1515000",
    "end": "1515000"
  },
  {
    "text": "certitude at D resolution evasion uh we designed two technique to evade that",
    "start": "1518279",
    "end": "1524000"
  },
  {
    "text": "euristic uh first of all is the the working technique and uh uh another one",
    "start": "1524000",
    "end": "1529760"
  },
  {
    "text": "is a stack frameworking which I just demoed you in the Windows",
    "start": "1529760",
    "end": "1535760"
  },
  {
    "text": "application so this is the Evasion for um k2. listic",
    "start": "1535760",
    "end": "1542320"
  },
  {
    "start": "1537000",
    "end": "1537000"
  },
  {
    "text": "using SE chain so what we do basically is that uh we we follow the the next CH",
    "start": "1542320",
    "end": "1549080"
  },
  {
    "text": "until we reach the the last Handler which is containing zero FF FF FF which",
    "start": "1549080",
    "end": "1555640"
  },
  {
    "text": "that's what we look for and once we found there is a pointer to ntdll.dll not Kel 32.dll because there's some",
    "start": "1555640",
    "end": "1564399"
  },
  {
    "text": "changes in operating system all the time so we exploited that uh problem and uh",
    "start": "1564399",
    "end": "1570440"
  },
  {
    "text": "then once we are in ntdll.dll what we will do is like we will look for PE header or MZ bytes and uh once you found",
    "start": "1570440",
    "end": "1579240"
  },
  {
    "text": "it there is a uh fix distance between P header and like API called API specific",
    "start": "1579240",
    "end": "1586120"
  },
  {
    "text": "API which we want to load called ldr load dll and once you call the ldr load",
    "start": "1586120",
    "end": "1591840"
  },
  {
    "text": "dll you can call any uh DL you want so including K 32. DL which is nistic for",
    "start": "1591840",
    "end": "1600399"
  },
  {
    "text": "example for detecting your shell code so if you do that and you can call call current and as a result you can call",
    "start": "1600399",
    "end": "1606600"
  },
  {
    "text": "load Library a and as a result you can call any other API you want then you can",
    "start": "1606600",
    "end": "1611840"
  },
  {
    "text": "detect it so if you directly try to resolve the current c n will detect it so your shell code get flaged but if you",
    "start": "1611840",
    "end": "1619360"
  },
  {
    "text": "use this technique it's not get detected well another another technique",
    "start": "1619360",
    "end": "1625840"
  },
  {
    "start": "1623000",
    "end": "1623000"
  },
  {
    "text": "is uh basically stack frame working technique which means that you are you have multiple stack frames and you are",
    "start": "1625840",
    "end": "1632480"
  },
  {
    "text": "looking back to the previous stack frame until you reach the FR stack frame and in the FR stack frame you have a a",
    "start": "1632480",
    "end": "1639440"
  },
  {
    "text": "pointer to ntdll.dll again you do the same things you look for MZ bites or PE",
    "start": "1639440",
    "end": "1646159"
  },
  {
    "text": "header and once you found your P header uh what you will do you will try to load Lo ldr load D and once you uh found the",
    "start": "1646159",
    "end": "1654840"
  },
  {
    "text": "ldr load D at then you will uh like load K 32. and as a result you can call load",
    "start": "1654840",
    "end": "1661519"
  },
  {
    "text": "Library a again and you can call any API and then again Nemo can't detect",
    "start": "1661519",
    "end": "1667399"
  },
  {
    "text": "it well uh another technique is uh using payload read",
    "start": "1667399",
    "end": "1673519"
  },
  {
    "text": "threshold htic evasion well uh so the basic idea is",
    "start": "1673519",
    "end": "1679200"
  },
  {
    "text": "that um for evading that herti what you will do is like you are allocating a",
    "start": "1679200",
    "end": "1684760"
  },
  {
    "text": "virtual memory using in our implementation uh n allocate virtual memory and then uh what",
    "start": "1684760",
    "end": "1692399"
  },
  {
    "text": "you will do is like uh rather than multiple times read uh your shell code",
    "start": "1692399",
    "end": "1699080"
  },
  {
    "text": "and copy it somewhere or like put it somewhere uh what you will do is like uh",
    "start": "1699080",
    "end": "1705120"
  },
  {
    "text": "You by One Time by just by this - read virual memory just by one time you just",
    "start": "1705120",
    "end": "1711399"
  },
  {
    "text": "read your uh shell your entire Shell Code and and put it in your uh allocated",
    "start": "1711399",
    "end": "1716679"
  },
  {
    "text": "virtual memory so and as a result then you don't have that multiple reads which",
    "start": "1716679",
    "end": "1721960"
  },
  {
    "text": "um flag you in in the ebn IDS another evasion as a implementation",
    "start": "1721960",
    "end": "1730360"
  },
  {
    "start": "1726000",
    "end": "1726000"
  },
  {
    "text": "problem of course is a stack contracted Shell Code which evade the nimu get PC",
    "start": "1730360",
    "end": "1735640"
  },
  {
    "text": "and payload re threshold so so basic idea is that you have some um exord uh",
    "start": "1735640",
    "end": "1741799"
  },
  {
    "text": "dward P pushing into the stack which is like uh your shell code and uh and at the end you just jump to rather than",
    "start": "1741799",
    "end": "1749519"
  },
  {
    "text": "like uh directly calling your shell code which is kind of like Get PC code you jump to uh to beginning of your your",
    "start": "1749519",
    "end": "1757279"
  },
  {
    "text": "your shell code which you pushed to the stack and as a result then again you",
    "start": "1757279",
    "end": "1762919"
  },
  {
    "text": "don't do a direct get PC code and uh you don't have a you you don't have you",
    "start": "1762919",
    "end": "1768679"
  },
  {
    "text": "don't flag the payload read threshold because you don't multiple times read",
    "start": "1768679",
    "end": "1774799"
  },
  {
    "text": "it well uh another evasion is a egg hunting evasion against",
    "start": "1774799",
    "end": "1781919"
  },
  {
    "start": "1776000",
    "end": "1776000"
  },
  {
    "text": "nimu and in this example is that uh basically rather than using a CIS called",
    "start": "1781919",
    "end": "1787880"
  },
  {
    "text": "anti atom which iOS explained uh you don't use anti at home anymore but uh",
    "start": "1787880",
    "end": "1794840"
  },
  {
    "text": "you use another single virtual query so the the the main purpose of anti atom is",
    "start": "1794840",
    "end": "1801720"
  },
  {
    "text": "not for U detect is not for detecting if the the memory is a valid memory or not",
    "start": "1801720",
    "end": "1807840"
  },
  {
    "text": "in egg hunting Shell Code you have to know if the the the memory area area is a valid memory address or not because if",
    "start": "1807840",
    "end": "1814640"
  },
  {
    "text": "it's not then you are not going to scan it for your egg code or your marker but",
    "start": "1814640",
    "end": "1821640"
  },
  {
    "text": "you can use in SE virtual query and by using virtual query you actually uh you",
    "start": "1821640",
    "end": "1827880"
  },
  {
    "text": "it's doing the same and actually used for that but it's API it's not a cisal cisal is you have very few csols in the",
    "start": "1827880",
    "end": "1835080"
  },
  {
    "text": "system but you can use you have th like thousands of API so you use apis rather than cisal and then again you bypass the",
    "start": "1835080",
    "end": "1842679"
  },
  {
    "text": "ebn IDS tic well uh we have a demo",
    "start": "1842679",
    "end": "1849440"
  },
  {
    "start": "1845000",
    "end": "1845000"
  },
  {
    "text": "yeah yeah so so I'm going to demonstrate a couple of the techniques Ali just",
    "start": "1849440",
    "end": "1854640"
  },
  {
    "text": "talked about is it",
    "start": "1854640",
    "end": "1861880"
  },
  {
    "text": "showing yeah yeah so first I'm going to demonstrate the uh payload retress hold",
    "start": "1862600",
    "end": "1869000"
  },
  {
    "text": "evasion by doing right this which is an implementation based on",
    "start": "1869000",
    "end": "1875000"
  },
  {
    "text": "the uh stack constructed Shell Code as you can see oh wait a",
    "start": "1875000",
    "end": "1881000"
  },
  {
    "text": "second and as you can see over here it's first being tested against Le",
    "start": "1884399",
    "end": "1889720"
  },
  {
    "text": "AMU oh yeah yeah as you can see it isn't being",
    "start": "1895159",
    "end": "1901840"
  },
  {
    "text": "detected by Leu and then we test it against Nemo and you can see nothing which means",
    "start": "1901840",
    "end": "1907760"
  },
  {
    "text": "it isn't detected either so then we test the uh kernel evasion uh Base address",
    "start": "1907760",
    "end": "1915279"
  },
  {
    "text": "resolution evasion technique using uh stack frame walking which is first being tested against lib Amo as you can see a",
    "start": "1915279",
    "end": "1922919"
  },
  {
    "text": "lot of stuff is going on but in the end it isn't being detected so when we test it against",
    "start": "1922919",
    "end": "1930440"
  },
  {
    "text": "nemu you can see nothing which obviously means it isn't being detected",
    "start": "1930440",
    "end": "1936679"
  },
  {
    "text": "either wait second uh yeah so finally we're going to demon the",
    "start": "1939880",
    "end": "1947519"
  },
  {
    "text": "egg hunting Shell Code which is using an API instead of CIS",
    "start": "1947519",
    "end": "1952360"
  },
  {
    "text": "calls which isn't being detected either by lib AMU and obviously neither by",
    "start": "1953240",
    "end": "1961880"
  },
  {
    "text": "Neu so [Music]",
    "start": "1961919",
    "end": "1968399"
  },
  {
    "text": "um yeah so there are a couple of other ways to uh to bypass being detected by",
    "start": "1968399",
    "end": "1975639"
  },
  {
    "text": "uh ebn IDs uh one of which is uh detecting the fact that we're being emulated as a couple of you will know uh",
    "start": "1975639",
    "end": "1982720"
  },
  {
    "text": "most emulators have telltale signs of the fact that you're being emulated by an emulator which code can use to detect",
    "start": "1982720",
    "end": "1989720"
  },
  {
    "text": "uh the fact that it's being emulated well and nemu and libu are no different there are a couple of implementational",
    "start": "1989720",
    "end": "1995320"
  },
  {
    "text": "details which mean that for example in the case of Neu all the general purpose registers as you can see over there",
    "start": "1995320",
    "end": "2001799"
  },
  {
    "text": "they're initiated to the same constant value so by using a check suum over all",
    "start": "2001799",
    "end": "2006840"
  },
  {
    "text": "the general purpose registers combined with the constant value and incorporating the result in our get PC",
    "start": "2006840",
    "end": "2013440"
  },
  {
    "text": "code we can ensure that when it's being run on a normal machine we run normally but while we're being emulated by Neu",
    "start": "2013440",
    "end": "2020000"
  },
  {
    "text": "the code crashes and thus isn't being emulated and thus isn't being detected so we can do the same thing in the case",
    "start": "2020000",
    "end": "2026039"
  },
  {
    "text": "of lib AMU with the difference that the general purpose registers are initiated to zero um another trait of nemu is the",
    "start": "2026039",
    "end": "2033960"
  },
  {
    "text": "fact that it does properly decode the CPU ID in instruction but it doesn't properly implement it because it should",
    "start": "2033960",
    "end": "2039679"
  },
  {
    "text": "affect a couple of registers which it doesn't affect and by incorporating the effect of a CPU uh instruction on those",
    "start": "2039679",
    "end": "2047240"
  },
  {
    "text": "registers in our get PC code again we can evade emulation and thus evade",
    "start": "2047240",
    "end": "2052679"
  },
  {
    "text": "detection a more general purpose way to detect emulation at all is using timing",
    "start": "2052679",
    "end": "2057760"
  },
  {
    "start": "2054000",
    "end": "2054000"
  },
  {
    "text": "because obviously uh emulating an instruction is always a fraction uh slower than actually executing it",
    "start": "2057760",
    "end": "2063638"
  },
  {
    "text": "especially if you're not using like hardware virtualization such as the in ebn IDs and we do this by uh using",
    "start": "2063639",
    "end": "2070878"
  },
  {
    "text": "timing so we're executing a loop of no operation instructions and after that we're executing a loop of uh",
    "start": "2070879",
    "end": "2077638"
  },
  {
    "text": "computationally intensive um operations such as FPU instructions and then we",
    "start": "2077639",
    "end": "2082720"
  },
  {
    "text": "take the ratio of those two uh instruction loops and we compare it against the threshold which is the",
    "start": "2082720",
    "end": "2089398"
  },
  {
    "text": "normal threshold for normal machines because obviously it's going to be uh orders of magnitude higher on emulation",
    "start": "2089399",
    "end": "2095599"
  },
  {
    "text": "systems and then we Inc in orporate this result again in our code to prevent proper execution and thus detection so",
    "start": "2095599",
    "end": "2103079"
  },
  {
    "start": "2102000",
    "end": "2102000"
  },
  {
    "text": "Ali is now going to demonstrate this it's",
    "start": "2103079",
    "end": "2109440"
  },
  {
    "text": "hard okay so",
    "start": "2109960",
    "end": "2114040"
  },
  {
    "text": "it's so here is the emulator detection so once it detect it's getting being",
    "start": "2116640",
    "end": "2123119"
  },
  {
    "text": "being emulated then it's not decrypting itself so first against",
    "start": "2123119",
    "end": "2129240"
  },
  {
    "text": "Liu as you can see nothing of course you see the word failed which means that uh",
    "start": "2129240",
    "end": "2135000"
  },
  {
    "text": "Liu couldn't detect the Shell Code and then we use it against Nemo and using",
    "start": "2135000",
    "end": "2141800"
  },
  {
    "text": "nothing which means that it's not detected by",
    "start": "2141800",
    "end": "2147200"
  },
  {
    "text": "Nemo okay well uh",
    "start": "2147200",
    "end": "2155319"
  },
  {
    "start": "2152000",
    "end": "2152000"
  },
  {
    "text": "another uh technique which we talked we just briefly talked",
    "start": "2155319",
    "end": "2160480"
  },
  {
    "text": "about it was anti assembly you you have the anti assembly techniques in the",
    "start": "2160480",
    "end": "2165560"
  },
  {
    "text": "malare board but uh thank you but but why not in the Shell Code Bo",
    "start": "2165560",
    "end": "2173000"
  },
  {
    "text": "so uh we designed the for technique for anti disassembly so just trying to to",
    "start": "2173000",
    "end": "2179800"
  },
  {
    "text": "confuse the disassembler of the two test cases which we had which uh was not very",
    "start": "2179800",
    "end": "2187359"
  },
  {
    "text": "successful as you can see like uh most of them got detected by Nemo and uh Liu",
    "start": "2187359",
    "end": "2194400"
  },
  {
    "text": "could detect half of them which was for us was a failure let's say and uh anyway",
    "start": "2194400",
    "end": "2200839"
  },
  {
    "text": "there was four type the the simplest one which everybody probably uh use is using",
    "start": "2200839",
    "end": "2206920"
  },
  {
    "text": "garbage bites right and uh another one was like floor R Direction push pop mass",
    "start": "2206920",
    "end": "2213240"
  },
  {
    "text": "and then uh code transposition well uh another way to evade the",
    "start": "2213240",
    "end": "2221000"
  },
  {
    "start": "2217000",
    "end": "2217000"
  },
  {
    "text": "emulation based Network into insection system was using unsupported instruction so we thinking there might be some",
    "start": "2221000",
    "end": "2227440"
  },
  {
    "text": "instruction which is not supported by the ebn idas so what if we use those unsupported instructions for example as",
    "start": "2227440",
    "end": "2234839"
  },
  {
    "text": "a decryption key so if if the ABN idas cannot emulate that instruction as a",
    "start": "2234839",
    "end": "2240960"
  },
  {
    "text": "result it's because it can't run it because it's not supported by EVN IDs as a result it will fail to detect the uh",
    "start": "2240960",
    "end": "2250160"
  },
  {
    "text": "the Shell Code so we used four type of instructions not just the normal ones",
    "start": "2250160",
    "end": "2255839"
  },
  {
    "text": "but um like the FPU instructions uh two type of them uh FN fnst andv and FN save",
    "start": "2255839",
    "end": "2264200"
  },
  {
    "text": "and MMX instruction SS instruction and some some absolute instruction which are like not officially",
    "start": "2264200",
    "end": "2271079"
  },
  {
    "text": "documented and as you can see in the result um except one FPU instruction uh",
    "start": "2271079",
    "end": "2277440"
  },
  {
    "text": "uh fnst andb uh other instructions was not detected by any emulator and as a result they will fail to uh to detect",
    "start": "2277440",
    "end": "2285560"
  },
  {
    "text": "our Shell Code how first let's look at the uh unsupported instruction uh using",
    "start": "2285560",
    "end": "2292240"
  },
  {
    "text": "MMX so the basic idea is that uh what we'll do is that uh we want to U put the",
    "start": "2292240",
    "end": "2298200"
  },
  {
    "text": "address of uh ESP uh to uh eax so but we",
    "start": "2298200",
    "end": "2304680"
  },
  {
    "text": "copy this data before uh we decrypt the Shell Code so if but we do it using MMX",
    "start": "2304680",
    "end": "2312119"
  },
  {
    "text": "instructions so if the MMX instruction is not supported by the uh our EVN IDs as a",
    "start": "2312119",
    "end": "2321560"
  },
  {
    "text": "result it will fail to decrypt the Shell Code and as a result it can't detect detect the Shell Code at the end so we",
    "start": "2321560",
    "end": "2328280"
  },
  {
    "text": "use like MMX instruction and use the MMX registers to copy the data as you can see here we try to we first copy the",
    "start": "2328280",
    "end": "2335200"
  },
  {
    "text": "address is pointing the ES be pointing to mm0 and then from mm0 to mm1 using MMX instructions and then from mm1 to ax",
    "start": "2335200",
    "end": "2343920"
  },
  {
    "text": "and if if in the middle it couldn't get in couldn't get executed then as a result it will fail uh to to decrypt the",
    "start": "2343920",
    "end": "2351920"
  },
  {
    "text": "Shell Code that was one example another one U which was a little bit different I mean you could use the same thing for",
    "start": "2351920",
    "end": "2358040"
  },
  {
    "text": "another one but you just have to be more creative so uh this time U what we do is",
    "start": "2358040",
    "end": "2364119"
  },
  {
    "text": "that uh we copy the address which ESP pointing to eax and then um and then we",
    "start": "2364119",
    "end": "2369480"
  },
  {
    "text": "copy the address of eax using SS instructions to xmm0 register using S",
    "start": "2369480",
    "end": "2375960"
  },
  {
    "text": "instructions and uh and then we overwrite the the address which ESB pointing so basically it means that you",
    "start": "2375960",
    "end": "2382560"
  },
  {
    "text": "don't have that address anymore we just overwrite it with some junk data and so you don't have it so you lost it so if",
    "start": "2382560",
    "end": "2388079"
  },
  {
    "text": "you want to to uh get the address of ESP which pointing your register you have to be able to copy from the ESP uh sorry",
    "start": "2388079",
    "end": "2397200"
  },
  {
    "text": "from the the xmm zero uh to uh like ESP",
    "start": "2397200",
    "end": "2402400"
  },
  {
    "text": "or whatever so I mean your address is in that register right which is a SSE",
    "start": "2402400",
    "end": "2407560"
  },
  {
    "text": "instruction and if you can't copy it which means you can't you are not supporting that",
    "start": "2407560",
    "end": "2413599"
  },
  {
    "text": "instruction then as a result you will fail to um detect the Shell Code and uh",
    "start": "2413599",
    "end": "2420040"
  },
  {
    "start": "2420000",
    "end": "2420000"
  },
  {
    "text": "that was it it's a question and answer time yeah",
    "start": "2420040",
    "end": "2425119"
  },
  {
    "text": "shall we sit there or [Applause]",
    "start": "2425119",
    "end": "2435400"
  }
]