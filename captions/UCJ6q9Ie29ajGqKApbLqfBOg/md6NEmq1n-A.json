[
  {
    "start": "0",
    "end": "104000"
  },
  {
    "text": "I'd like to introduce both Daniel and Joe who will be speaking on time time trial racing toward practical remote",
    "start": "40",
    "end": "7000"
  },
  {
    "text": "timing attacks thank",
    "start": "7000",
    "end": "10360"
  },
  {
    "text": "you good afternoon thanks for cutting your lunch break short to make it back on to our talk on time um I talking",
    "start": "14400",
    "end": "21600"
  },
  {
    "text": "about time trial and the practicality of remote timing attacks um just a few words on who we are my name is Daniel",
    "start": "21600",
    "end": "27160"
  },
  {
    "text": "mayor I'm a senior security consultant with m security um I've gotten my PhD previously in computer science with a",
    "start": "27160",
    "end": "33559"
  },
  {
    "text": "focus on security and applied crypto um and I give the talk together with my colleague Joel sandon who also works in",
    "start": "33559",
    "end": "39320"
  },
  {
    "text": "madano um we are the application security company um with offices around the us and we're part of the NCC",
    "start": "39320",
    "end": "46120"
  },
  {
    "text": "group um brief overview of what we will be talking about we start out by giving you an introduction on timing side",
    "start": "46120",
    "end": "51600"
  },
  {
    "text": "channels what those are how they come about and then go into um the challenges you face when you try to explode those",
    "start": "51600",
    "end": "57520"
  },
  {
    "text": "remotely and things which you may need to take into consideration and which make it much harder in order to exploit",
    "start": "57520",
    "end": "63519"
  },
  {
    "text": "these kind of things um as a third item we present our new tool called time trial which is a feasibility analysis",
    "start": "63519",
    "end": "70360"
  },
  {
    "text": "tool so to speak so it allows you to do timing measurements and assess timing vulnerabilities in in your own",
    "start": "70360",
    "end": "75759"
  },
  {
    "text": "applications and based on that tool we then did a bunch of experiments on both in different network scenarios to see",
    "start": "75759",
    "end": "81840"
  },
  {
    "text": "what one can exploit in those and then putting that into perspective with common functions you see in your own software to see what you can exploit in",
    "start": "81840",
    "end": "88720"
  },
  {
    "text": "those environments and which you cannot so hopefully after this talk you have a better feel on um what are timing",
    "start": "88720",
    "end": "93799"
  },
  {
    "text": "attacks and do you need to worry about them or which kind you need to worry about what can be exploited and what is",
    "start": "93799",
    "end": "99159"
  },
  {
    "text": "more like a theoretical attack so let's start out by talking about site channels in general think",
    "start": "99159",
    "end": "104880"
  },
  {
    "start": "104000",
    "end": "104000"
  },
  {
    "text": "about if you have a web application and your main interaction with that application is usually you send a",
    "start": "104880",
    "end": "109960"
  },
  {
    "text": "request you get a response and that's that's your main communication with that application and if everything there is",
    "start": "109960",
    "end": "115600"
  },
  {
    "text": "secure and you don't get any information out of the out of the system which you're not supposed to there may still be a way around that and other paths",
    "start": "115600",
    "end": "122479"
  },
  {
    "text": "which you can try side channels in which you can gain information on the system um unfortunately the path is not as",
    "start": "122479",
    "end": "128640"
  },
  {
    "text": "smooth as the previous picture showed you it's actually a pretty Rocky Road there's a lot of different difficulties along the way in exploiting these things",
    "start": "128640",
    "end": "135360"
  },
  {
    "text": "and if you go astray in One Direction it may quickly go downhill and nothing works at all so to give you an overview",
    "start": "135360",
    "end": "142200"
  },
  {
    "text": "um what side channels are out there they have been studied quite extensively actually there is power consumption",
    "start": "142200",
    "end": "147920"
  },
  {
    "text": "analysis there is RF already frequency emissions there's recently sound emissions and what we will be talking",
    "start": "147920",
    "end": "153560"
  },
  {
    "text": "about processing time and what all these are have in common is that we can measure them outside the actual",
    "start": "153560",
    "end": "159040"
  },
  {
    "text": "application or the actual system you're testing it's the side effect you're measuring of the system but it's related to what the computation um related to to",
    "start": "159040",
    "end": "166680"
  },
  {
    "text": "the computation the system does at a given time and if that computation involves any kind of secret data or sensitive data you would like to learn",
    "start": "166680",
    "end": "173000"
  },
  {
    "text": "about then you can um infer from our measurement from the side Channel measurements you can infer something",
    "start": "173000",
    "end": "178599"
  },
  {
    "text": "about that secret which is happening in the application basically and if you compare this to the more traditional",
    "start": "178599",
    "end": "184760"
  },
  {
    "text": "vulnerabilities which we're all familiar with like in the web space we have crossed crypting Cerf we have SQL",
    "start": "184760",
    "end": "189959"
  },
  {
    "text": "injection those things are getting really well understood we know how to defend against them developers are getting better at not introducing them",
    "start": "189959",
    "end": "196519"
  },
  {
    "text": "anymore and Frameworks are helping a lot to make it much harder for them to be introduced in your software but if you",
    "start": "196519",
    "end": "202680"
  },
  {
    "text": "look at side channels there they're less well understood and people are introducing them very innocently using",
    "start": "202680",
    "end": "209040"
  },
  {
    "text": "regular operators in your language and it's very hard to test for them and even if you find them you don't really know are these exploitable are these issues",
    "start": "209040",
    "end": "215439"
  },
  {
    "text": "real or are they just theoretical issues which your pentester reported to you for example so we will be talking about the",
    "start": "215439",
    "end": "222280"
  },
  {
    "start": "220000",
    "end": "220000"
  },
  {
    "text": "timing side Channel specifically and what we what we do here is we measure response times from a system and we try",
    "start": "222280",
    "end": "227760"
  },
  {
    "text": "to reason about the computation that happened um on the based on the response time so certain me if you send a certain",
    "start": "227760",
    "end": "234720"
  },
  {
    "text": "message to a system it may take longer to compute than if you send it a different message and we can measure those timing differences and we can try",
    "start": "234720",
    "end": "241640"
  },
  {
    "text": "to infer things which happen in the system at the same time for instance um if a sensitive credential is being used",
    "start": "241640",
    "end": "247000"
  },
  {
    "text": "and involved in the computation we may be able to infer that or if certain branching branching is happening in the",
    "start": "247000",
    "end": "252200"
  },
  {
    "text": "application based on secret System state which you'd want to keep private we can",
    "start": "252200",
    "end": "257440"
  },
  {
    "text": "deduce that potentially but the main question here is um in principle those things are exploitable remotely because",
    "start": "257440",
    "end": "263199"
  },
  {
    "text": "we measure time over the Internet by using the application but are these really can these really be exploited and",
    "start": "263199",
    "end": "269120"
  },
  {
    "text": "that's kind of the question we hope to shed some more light on in our talk so let's dig a dig a little bit",
    "start": "269120",
    "end": "274800"
  },
  {
    "start": "273000",
    "end": "273000"
  },
  {
    "text": "deeper into side channels this is a very um simple example for a basic site channel in Ruby um what this application",
    "start": "274800",
    "end": "281560"
  },
  {
    "text": "does it it takes a username and a password and it takes the username first and it verifies if the username exists",
    "start": "281560",
    "end": "287600"
  },
  {
    "text": "and if it does not exist it will reject at this point and will say username or password is incorrect only if the",
    "start": "287600",
    "end": "293360"
  },
  {
    "text": "username is correct it will actually check the password and go in the next step and if the password is incorrect it will reject it with the same error",
    "start": "293360",
    "end": "299759"
  },
  {
    "text": "message so from a system standpoint from the outside you don't see a behavior of it whatsoever so you can't tell if there was a valid username submitted or not",
    "start": "299759",
    "end": "306520"
  },
  {
    "text": "but an attacker may be able to still distinguish these two cases based on the response time so how would you attack",
    "start": "306520",
    "end": "312639"
  },
  {
    "text": "this the very basic idea here is you have a you start your your clock the attacker starts their internal clock and",
    "start": "312639",
    "end": "318720"
  },
  {
    "text": "then sends a request to the server send it the username and a password the system will first verify if the user is",
    "start": "318720",
    "end": "324240"
  },
  {
    "text": "valid and then return in the first step there where we have um the time t zero and try to this done and um in the other",
    "start": "324240",
    "end": "331479"
  },
  {
    "text": "case it will actually go ahead and verify the password and if that one is incorrect it will reject here so if",
    "start": "331479",
    "end": "337680"
  },
  {
    "text": "we're able to distinguish the invalid user response at this point and the valid one down here then we're in game",
    "start": "337680",
    "end": "343960"
  },
  {
    "text": "and we can actually learn something about the system in this case just the rather boring whether username exists",
    "start": "343960",
    "end": "349880"
  },
  {
    "text": "but the point here is we have to be able to distinguish two different response times and it's not about measuring the actual time on the on the which is",
    "start": "349880",
    "end": "356560"
  },
  {
    "text": "executing on the system so there's been a lot of prayer work so we obviously not the first people looking at this this started out",
    "start": "356560",
    "end": "362600"
  },
  {
    "start": "359000",
    "end": "359000"
  },
  {
    "text": "in the crypto Community where people tried to look at implementations of um cryptographic algorithms and tried to",
    "start": "362600",
    "end": "367800"
  },
  {
    "text": "make those constant time that you cannot learn something about keys and that went into remote attacks by Brumley and Bon",
    "start": "367800",
    "end": "372960"
  },
  {
    "text": "for an open SSL implementation where they could recover Keys remotely actually and then more recently there",
    "start": "372960",
    "end": "378680"
  },
  {
    "text": "have been really excellent empirical studies starting with um crossby study which they analyzed how different networks behave and that's actually um",
    "start": "378680",
    "end": "385880"
  },
  {
    "text": "something which we based our work heavily on and then in 2010 there was a talk here blackhead by Nate Lawson um on",
    "start": "385880",
    "end": "392240"
  },
  {
    "text": "on the feasibility of these attacks has anybody seen this talk four years ago",
    "start": "392240",
    "end": "397520"
  },
  {
    "text": "okay so with that um I'm going to hand it off to Joel who will be talking about the challenges we face um in remote",
    "start": "397520",
    "end": "403479"
  },
  {
    "text": "timing attacks it's going to be a little bit more Theory to see with Statistics and how we analyze things so bear with",
    "start": "403479",
    "end": "409080"
  },
  {
    "text": "us it's going to get to practical results really quickly soon thanks thanks Daniel um so let's talk",
    "start": "409080",
    "end": "416000"
  },
  {
    "text": "about remote timing attacks in practice uh what makes these attacks difficult and we're going to look at the best",
    "start": "416000",
    "end": "421800"
  },
  {
    "text": "known techniques for performing them in a network environment so if we look at local",
    "start": "421800",
    "end": "427400"
  },
  {
    "text": "timing attacks uh we really have the luxury of measuring time precisely measuring the execution time of the",
    "start": "427400",
    "end": "432879"
  },
  {
    "text": "target precisely and we minimize external influences so we don't have to deal with major sources of Randomness or",
    "start": "432879",
    "end": "439000"
  },
  {
    "text": "error in our measurements uh when we're doing the analysis uh when we're doing a remote",
    "start": "439000",
    "end": "444639"
  },
  {
    "text": "timing attack against a Target on the internet um we can't measure the execution time of the Target directly uh",
    "start": "444639",
    "end": "451080"
  },
  {
    "text": "the only thing we can measure is the round trip time to the Target so that includes the propagation time uh the time it takes for us to send our request",
    "start": "451080",
    "end": "457639"
  },
  {
    "text": "the execution time and the time it takes for the server to respond to our sensor so what we're looking for here is the",
    "start": "457639",
    "end": "463599"
  },
  {
    "text": "signal which is the execution time um but what we're actually getting in our measurements is signal plus um this",
    "start": "463599",
    "end": "470120"
  },
  {
    "text": "random distribution of propagation times um on the network in an Ideal World Network propagation time would be uh",
    "start": "470120",
    "end": "476879"
  },
  {
    "text": "constant would be consistent but in practice it really isn't um and the problem we Face here is kind",
    "start": "476879",
    "end": "482319"
  },
  {
    "text": "of getting the needle from the Hy stack and um learning something about the execution time on the Target and it's",
    "start": "482319",
    "end": "488919"
  },
  {
    "text": "important to understand and Daniel mentioned this that um we're not trying to measure the execution time of the",
    "start": "488919",
    "end": "495120"
  },
  {
    "text": "target if we could do that that would be great uh the question we want to answer when we're performing a timing attack is",
    "start": "495120",
    "end": "501560"
  },
  {
    "text": "did the target take longer to process one request versus another if we can answer that question uh we can do a lot",
    "start": "501560",
    "end": "508560"
  },
  {
    "text": "so if we're sending say a password to a server and it takes a little bit longer to respond maybe that tells us that",
    "start": "508560",
    "end": "515120"
  },
  {
    "text": "additional btes of the password that we sent in one message uh match the expected value or we may be able to",
    "start": "515120",
    "end": "521719"
  },
  {
    "text": "infer that the server ran a database query uh as a result of one request versus another um so so being able to um",
    "start": "521719",
    "end": "530680"
  },
  {
    "text": "judge whether a server took longer to take to process one request versus another is really useful so let's look at what what do",
    "start": "530680",
    "end": "537680"
  },
  {
    "start": "536000",
    "end": "536000"
  },
  {
    "text": "these measurements look like in a real system so here we have a graph of um roundtrip time measurements um against a",
    "start": "537680",
    "end": "544320"
  },
  {
    "text": "cloud service provider a digital ocean instance and um the x- axis here is the",
    "start": "544320",
    "end": "549839"
  },
  {
    "text": "roundtrip time in um Nan seconds and the y- axis is a frequency how many times we",
    "start": "549839",
    "end": "555480"
  },
  {
    "text": "saw that measurement and a couple things jump out at us right away we have this long tail of uh longer response times",
    "start": "555480",
    "end": "561959"
  },
  {
    "text": "that are relatively infrequent um most of the measurements are really skewed towards shorter response times and we",
    "start": "561959",
    "end": "567720"
  },
  {
    "text": "have these we have multiple Peaks of the most frequently occurring values and there's this smooth ramp up in the",
    "start": "567720",
    "end": "574240"
  },
  {
    "text": "smaller response times um very smooth and all the way on the left there",
    "start": "574240",
    "end": "579360"
  },
  {
    "text": "we see we have our minimum response time so fitting something like a gaussian statistical distribution or another",
    "start": "579360",
    "end": "585360"
  },
  {
    "text": "parametric distribution um to this data that we see here it's not really going to work we can't Leverage The",
    "start": "585360",
    "end": "590480"
  },
  {
    "text": "statistical techniques that we get with those kinds of distribution so um we're really starting from scratch here trying",
    "start": "590480",
    "end": "596399"
  },
  {
    "text": "to come up with a technique that um lets us perform this back in practice so we want to like I said pull",
    "start": "596399",
    "end": "603200"
  },
  {
    "text": "the needle from the Hy stack is find a value in these measurements that correlates well with the execution time",
    "start": "603200",
    "end": "608680"
  },
  {
    "text": "on the Target and uh a good candidate is the the the measurement all the way on the left in the graph which is the",
    "start": "608680",
    "end": "614440"
  },
  {
    "text": "minimum response time and we know that that measurement is the execution time plus the minimum added Jitter that was",
    "start": "614440",
    "end": "620839"
  },
  {
    "text": "introduced by the network and you'd think that you know with enough measurements that the minimum response",
    "start": "620839",
    "end": "626800"
  },
  {
    "text": "time or the minimum propagation time would be something that's fairly well behaved in networks and consistent over many samples um or consistent between",
    "start": "626800",
    "end": "634920"
  },
  {
    "text": "sample sets I should say if they're big enough and you know one Theory would be that we take a neighborhood around that",
    "start": "634920",
    "end": "640079"
  },
  {
    "text": "minimum response time from two uh sample sets compare them and if they look different enough then um maybe we can",
    "start": "640079",
    "end": "646760"
  },
  {
    "text": "draw some conclusions about the execution time being different um in practice the minimum response time uh",
    "start": "646760",
    "end": "654000"
  },
  {
    "start": "652000",
    "end": "652000"
  },
  {
    "text": "doesn't correlate as well as other measurements with the processing time on the target so the minimum response time",
    "start": "654000",
    "end": "660399"
  },
  {
    "text": "it's actually a percentile and uh a percentile is just it's the minimum value that's greater than x per so the X",
    "start": "660399",
    "end": "668200"
  },
  {
    "text": "percentile is a minimum value that's greater than x% of the samples that we saw so the zeroth percentile is the",
    "start": "668200",
    "end": "673839"
  },
  {
    "text": "minimum response time the 100 100% percentile is the uh maximum response",
    "start": "673839",
    "end": "680399"
  },
  {
    "text": "time and we also have these very low percentiles which is uh the lower response times that we saw in the",
    "start": "680399",
    "end": "686600"
  },
  {
    "text": "previous graph so if we see here this this graph actually tells us a lot about how these percentiles track the server",
    "start": "686600",
    "end": "693360"
  },
  {
    "text": "processing time um and it's important to note that so we're talking about a plot of the percentile um as a function of",
    "start": "693360",
    "end": "701680"
  },
  {
    "text": "server processing time so each point on this line is actually taken from many samples um these are uh pulled from",
    "start": "701680",
    "end": "709279"
  },
  {
    "text": "sample sets for each server processing time and what we see here is that uh",
    "start": "709279",
    "end": "714560"
  },
  {
    "text": "these low percentiles actually have a much smoother relationship with the server processing time compared to the",
    "start": "714560",
    "end": "720240"
  },
  {
    "text": "minimum response time um so that gives us kind of a clue",
    "start": "720240",
    "end": "725320"
  },
  {
    "text": "as to what techniques will work in this context and uh the best performing",
    "start": "725320",
    "end": "730920"
  },
  {
    "text": "statistical technique from previous empirical studies is the Box test and it uses these percentiles so here we see",
    "start": "730920",
    "end": "737519"
  },
  {
    "text": "again this histogram plot of our response times and if we take the six percentile and this this is actually a",
    "start": "737519",
    "end": "743000"
  },
  {
    "text": "better illustration of what I mean when I say percentile um this is you know we're drawing a line here and the",
    "start": "743000",
    "end": "748680"
  },
  {
    "text": "samples to left of it constitutes 6% of uh of the samples that we have graphed or if you want to look at it another way",
    "start": "748680",
    "end": "755079"
  },
  {
    "text": "this is uh to the left of this is 6% of the area of this blue curve so um the a box is actually uh defined",
    "start": "755079",
    "end": "763959"
  },
  {
    "text": "by two percentiles so now we add the eighth percentile and if you look at that range on the x-axis that range of",
    "start": "763959",
    "end": "770480"
  },
  {
    "text": "range of sampled response times that's our box um that defines an interval",
    "start": "770480",
    "end": "775600"
  },
  {
    "text": "that's induced by these percentiles and um uh the percentiles themselves the",
    "start": "775600",
    "end": "783199"
  },
  {
    "text": "percentiles that we choose to use for this test it's going to depend on the target um they're going to be determined empirically by you know doing",
    "start": "783199",
    "end": "789600"
  },
  {
    "text": "measurements and figuring out which uh box actually performs well for our Target but in general these uh",
    "start": "789600",
    "end": "795199"
  },
  {
    "text": "percentiles are drawn from uh the low percentiles in the sample set so now if we add a second set of samples a second",
    "start": "795199",
    "end": "802440"
  },
  {
    "text": "distribution that we've sampled here and we see this corresponds to 105 millisecond execution time on the target",
    "start": "802440",
    "end": "809199"
  },
  {
    "text": "versus 100 milliseconds for the blue distribution um the the the sampled",
    "start": "809199",
    "end": "815519"
  },
  {
    "text": "responses uh correspond to that execution time and we we draw the same",
    "start": "815519",
    "end": "820760"
  },
  {
    "text": "box here so um we see for the the longer",
    "start": "820760",
    "end": "825959"
  },
  {
    "text": "execution time is 5 milliseconds longer the the Box actually occurs to the left of our um box for 100 milliseconds um so",
    "start": "825959",
    "end": "833880"
  },
  {
    "text": "we're basically confirming that uh one distribution is a time- shifted copy of the other that's what the box test",
    "start": "833880",
    "end": "840040"
  },
  {
    "text": "amounts to and um we'll talk more about the effectiveness of this statistical",
    "start": "840040",
    "end": "845079"
  },
  {
    "text": "method and uh I should just mention that this is what's actually built into the tool time trial and now Daniel will talk",
    "start": "845079",
    "end": "851000"
  },
  {
    "text": "more about the architecture and capabilities of the tool thanks",
    "start": "851000",
    "end": "856199"
  },
  {
    "text": "Joe all right so we used this statistical test and um we put it into a",
    "start": "856199",
    "end": "861880"
  },
  {
    "text": "tool which allows you to use it in a rather easy way um but first why do we actually need a tool for for these kind",
    "start": "861880",
    "end": "867959"
  },
  {
    "start": "866000",
    "end": "866000"
  },
  {
    "text": "of timing attack things well there's there's no real good way to analyze the the impact or the um the exploitability",
    "start": "867959",
    "end": "874839"
  },
  {
    "text": "which anything has if you see a timing attack in your code at the moment you say well theoretically this is a timing",
    "start": "874839",
    "end": "880240"
  },
  {
    "text": "attack and maybe you just go ahead and fix it any anyways just to be safe but you don't really know if if this is",
    "start": "880240",
    "end": "885720"
  },
  {
    "text": "exploitable or if should be maybe lower on your priority list if you have other things which you might want to worry about so we hope that this having a tool",
    "start": "885720",
    "end": "892320"
  },
  {
    "text": "available will allow you to make an educated decision of this is a high risk a no risk or like a lowrisk situation",
    "start": "892320",
    "end": "897480"
  },
  {
    "text": "for you when you have it any your software your product um so what time trial is is it's",
    "start": "897480",
    "end": "902720"
  },
  {
    "text": "a framework to allow you to do precise timing measurements and to then to analyze those using the most advanced statistical methods which have been",
    "start": "902720",
    "end": "909240"
  },
  {
    "text": "tested in previous studies and it um it also allows you then to generate a visual proof of concept so you can get",
    "start": "909240",
    "end": "915279"
  },
  {
    "text": "these plots which we seen before and you can illustrate okay these are clearly distinct or these are not distinct and you have some sort of in like indication",
    "start": "915279",
    "end": "922000"
  },
  {
    "text": "on whether you should worry about such a um timing attack or if you should not what tempol is not at the moment is like",
    "start": "922000",
    "end": "927880"
  },
  {
    "text": "a full exploit frame work where you just um put in an endpoint and say hey there's a timing attack and you just get suddenly access to the service so that's",
    "start": "927880",
    "end": "934680"
  },
  {
    "text": "that's not the goal of this the goal is to analyze if you if you actually have an issue and if you wanted to go ahead and then use that knowledge to build a",
    "start": "934680",
    "end": "941480"
  },
  {
    "text": "actional attack you can of course do that and you can use our tests to to guide you in this um so when we looked at this the",
    "start": "941480",
    "end": "948639"
  },
  {
    "start": "946000",
    "end": "946000"
  },
  {
    "text": "the main goal was to get precise measurements and the the best way we thought about doing that is going really",
    "start": "948639",
    "end": "954000"
  },
  {
    "text": "low level um and using C++ because you have access to the most precise timers on most computers these days",
    "start": "954000",
    "end": "959560"
  },
  {
    "text": "but at the same time we wanted to have a a nice front end for it so that you actually can use it and that you don't have to um run command L utilities only",
    "start": "959560",
    "end": "966680"
  },
  {
    "text": "but you actually have plots and graphs and things like that so we put a QT GUI um in front of on a python application",
    "start": "966680",
    "end": "973120"
  },
  {
    "text": "and both of those are communicating via a redis Q and the idea here is that we can take the sensor which we call the",
    "start": "973120",
    "end": "978600"
  },
  {
    "text": "racer um in Aly to the time trial thing we dump that racer anywhere we want so we can put the racer in ec2 if you want",
    "start": "978600",
    "end": "985639"
  },
  {
    "text": "to attack somebody in ec2 and be close to that Target or we can put it um on our home on our Network or you can run",
    "start": "985639",
    "end": "991160"
  },
  {
    "text": "it anywhere you would like but you can still have the go application and control everything from your desktop so the idea is uh you start an",
    "start": "991160",
    "end": "998839"
  },
  {
    "text": "experiment from your from the GUI it pushes it in the queue the sensor executes all the experiments sends the",
    "start": "998839",
    "end": "1004000"
  },
  {
    "text": "data back and then you have your GUI where you get the results you can plot them analyze them and uh make your",
    "start": "1004000",
    "end": "1009519"
  },
  {
    "text": "decisions about it one thing we thought about when um trying to decide how to do",
    "start": "1009519",
    "end": "1014839"
  },
  {
    "text": "precise measurements um was not just using um Reg C++ but what about if we using",
    "start": "1014839",
    "end": "1021040"
  },
  {
    "text": "dedicated Hardware because we cut out our noise all the way if we go down to the hardware level and we were thinking",
    "start": "1021040",
    "end": "1026319"
  },
  {
    "text": "about using um network interface which has Hardware time stamping like IDs systems oftentimes use this um or we're",
    "start": "1026319",
    "end": "1032880"
  },
  {
    "text": "using fpga which has a network interface to do in Hardware time stamping but in the end we just decided that Linux is",
    "start": "1032880",
    "end": "1039240"
  },
  {
    "text": "actually the most useful thing um because we can we can customize it and we can run it anywhere so we can go to",
    "start": "1039240",
    "end": "1045079"
  },
  {
    "text": "Amazon ec2 and we can rent an Cloud instance there we can install our software and run it there but we cannot",
    "start": "1045079",
    "end": "1050440"
  },
  {
    "text": "ship them a network interface and say hey can you please install this for us because we would like to attack some of your people there so um in the end we",
    "start": "1050440",
    "end": "1057679"
  },
  {
    "text": "just ended up using a MacBook Pro for most of our measurements um but we did some optimizations to this so we we first of",
    "start": "1057679",
    "end": "1064640"
  },
  {
    "start": "1064000",
    "end": "1064000"
  },
  {
    "text": "all the timing measurements we are doing is with a nanc timer using a monotonic clock which is available on most linuxes",
    "start": "1064640",
    "end": "1070960"
  },
  {
    "text": "these days um but we also triy to isolate our sensor process as much as possible from the operating system so we",
    "start": "1070960",
    "end": "1077000"
  },
  {
    "text": "isolated one CPU core that is not being being used by any other process and not by the Linux kernel itself and then we",
    "start": "1077000",
    "end": "1083240"
  },
  {
    "text": "assigned our process to that particular core so then it get it runs there with high priority and it's not getting",
    "start": "1083240",
    "end": "1088320"
  },
  {
    "text": "preempted by anything else um while measurements are running we also disabled frequency scaling just to be on",
    "start": "1088320",
    "end": "1093760"
  },
  {
    "text": "the safe side that we don't get any any artifacts because of that so with that um let me give you a brief demo on what",
    "start": "1093760",
    "end": "1099960"
  },
  {
    "text": "you can do with our tool at the moment going to switch this to mirror",
    "start": "1099960",
    "end": "1107600"
  },
  {
    "text": "can you see this okay so um this is the interface we have",
    "start": "1110799",
    "end": "1116520"
  },
  {
    "text": "right now um under the settings tab the only thing you can really do is um Define your sensors there's one in here",
    "start": "1116520",
    "end": "1122960"
  },
  {
    "text": "which I used for previous experiment basically you can just give it a name and you can give it a host",
    "start": "1122960",
    "end": "1128880"
  },
  {
    "text": "name and you can give it location just for your personal reasons the only",
    "start": "1128880",
    "end": "1134080"
  },
  {
    "text": "reason we have this is there's different different cues in in the redis queue which we're using for communication so",
    "start": "1134080",
    "end": "1139200"
  },
  {
    "text": "you can have multiple sensors running at the same time and you can say okay this task should run on this sensor and this",
    "start": "1139200",
    "end": "1144280"
  },
  {
    "text": "task should run on this sensor and this is just a way of distinguishing those then here um on the experiments tab an",
    "start": "1144280",
    "end": "1149960"
  },
  {
    "text": "experiment is basically one set of samples you would like to do to perform a certain measurement and we can just",
    "start": "1149960",
    "end": "1155240"
  },
  {
    "text": "start a new measurement here can just call this like a 2014 and um switch to",
    "start": "1155240",
    "end": "1160799"
  },
  {
    "text": "this new sample and then we can um Define our trials the trial is one one experiment against the system and um at",
    "start": "1160799",
    "end": "1168039"
  },
  {
    "text": "the moment we're the main thing we're supporting is an HTTP trial as we call this so it can run against any HTTP or",
    "start": "1168039",
    "end": "1173640"
  },
  {
    "text": "https Target and we feel that's like a pretty pretty substantial set of examples already um so we call this say",
    "start": "1173640",
    "end": "1181640"
  },
  {
    "text": "test and then you say how many iterations would you like to run this is basically when the histogram is being generated how how often do we try to",
    "start": "1181640",
    "end": "1187840"
  },
  {
    "text": "measure the response time let's say this is going to be 10,000 and we want to run this on our new sensor on CPU core one",
    "start": "1187840",
    "end": "1194200"
  },
  {
    "text": "use realtime scheduling and then we can put some um put some URLs in here which",
    "start": "1194200",
    "end": "1199799"
  },
  {
    "text": "I have prepared so this is just the URL which you're trying to attack and then um if you're familiar with burp or",
    "start": "1199799",
    "end": "1205640"
  },
  {
    "text": "something like this you can just get any request you have in burp and put it in here just in repeater um and this will",
    "start": "1205640",
    "end": "1210880"
  },
  {
    "text": "be parsed by our tool and will be um using a C++ library to actually execute the request so once this is created it",
    "start": "1210880",
    "end": "1217440"
  },
  {
    "text": "shows up in this list and then um if I would have a proper internet connection here I could just say start and it would",
    "start": "1217440",
    "end": "1222520"
  },
  {
    "text": "launch it wherever the sensor is located and um would execute and when things are done the results come back I have this",
    "start": "1222520",
    "end": "1229360"
  },
  {
    "text": "prepared here so you see that there a start time and an end time so these ones have been run correctly um previously um",
    "start": "1229360",
    "end": "1236080"
  },
  {
    "text": "and there's the two cases I ran um a trial against a system which was having a valid username and the invalid",
    "start": "1236080",
    "end": "1241320"
  },
  {
    "text": "username and in the case it was a valid username it would do one additional child to 56 hash afterwards and then as",
    "start": "1241320",
    "end": "1247039"
  },
  {
    "text": "you will see if I plot this um so this is a the correct username should take",
    "start": "1247039",
    "end": "1252280"
  },
  {
    "text": "longer because it does the password hashing so I can say this is the longer trial for my experiment and this one is",
    "start": "1252280",
    "end": "1257559"
  },
  {
    "text": "the shorter one and then I can move over to my fusibility analysis and I see that there is the plot for the two distributions",
    "start": "1257559",
    "end": "1263880"
  },
  {
    "text": "and you can probably already see that the blue one is further to the left than the other one it gets a bit more clearer if I add some bins for this so the",
    "start": "1263880",
    "end": "1270600"
  },
  {
    "text": "distributions are clearly separated and if I then use the Box test up here and I say I want to have boxes between 6 and",
    "start": "1270600",
    "end": "1276640"
  },
  {
    "text": "8% and plot this I'm going to get these two bars and I also get like an immediate indication that these",
    "start": "1276640",
    "end": "1281799"
  },
  {
    "text": "distributions are distinct and that there has been a measurable timing difference in that case and this is really one one execution of sh 256 using",
    "start": "1281799",
    "end": "1288559"
  },
  {
    "text": "open SSL this is not an attack against sh56 obviously but it's uh not some not a big computation happening but you can",
    "start": "1288559",
    "end": "1294600"
  },
  {
    "text": "distinguish this remotely over the network quite nicely there's a few more other options for defining the plot and",
    "start": "1294600",
    "end": "1300679"
  },
  {
    "text": "things like that I'm not going to go into that um for now so that's the",
    "start": "1300679",
    "end": "1306919"
  },
  {
    "text": "tool and um so let's let's see what kind of data we got with that and what we analyzed so",
    "start": "1307080",
    "end": "1312720"
  },
  {
    "text": "far as you can imagine if you have different kind of network settings if you have a land your network quality is going to be much better than if you're",
    "start": "1312720",
    "end": "1319240"
  },
  {
    "text": "um doing an experiment over the internet where you have transatlantic connections and things like that so we looked at different network scenarios like the Lan",
    "start": "1319240",
    "end": "1325400"
  },
  {
    "text": "internet at large let's say um in different Cloud environments and we were looking at um which kind of different",
    "start": "1325400",
    "end": "1332159"
  },
  {
    "text": "response times can we distinguish in those environments so remember we have to be able to tell whether we had response time t0 or T1 so that's what we",
    "start": "1332159",
    "end": "1339240"
  },
  {
    "text": "need to tell so in order to do that we um build on top of the technique which cross padl um",
    "start": "1339240",
    "end": "1345880"
  },
  {
    "text": "developed you guys are seeing something right yeah okay I forgot to switch back from the mirror mode so the um the idea",
    "start": "1345880",
    "end": "1352640"
  },
  {
    "text": "of this experiment is that we have our our server which is um on the left side the um attacker and that server is",
    "start": "1352640",
    "end": "1359039"
  },
  {
    "text": "sending an integer value to the to the server which is our mockup service to to demonstrate this and the server will",
    "start": "1359039",
    "end": "1364559"
  },
  {
    "text": "sleep for a certain amount of time so in this case it will sleep for 1,000 NCS which corresponds to like an",
    "start": "1364559",
    "end": "1370000"
  },
  {
    "text": "artificially created 1,000 nond processing time and then we can do this experiment again and we say okay now",
    "start": "1370000",
    "end": "1375440"
  },
  {
    "text": "sleep for 2,000 NCS and we measure the time for that and if if you can distinguish those two with a given Network then we can then we know that we",
    "start": "1375440",
    "end": "1381640"
  },
  {
    "text": "can distinguish a timing difference of 1,000 NCS over this particular Network so let's look at some some plots",
    "start": "1381640",
    "end": "1388400"
  },
  {
    "text": "for this we started off on a landan and we had one millisecond timing difference so these things are Worlds Apart so you",
    "start": "1388400",
    "end": "1394240"
  },
  {
    "text": "don't need any fancy statistical methods to see anything here and then if you decrease the timing difference to 100",
    "start": "1394240",
    "end": "1400360"
  },
  {
    "text": "micros to 10 microc to 5 microc you see the distributions are moving closer",
    "start": "1400360",
    "end": "1405440"
  },
  {
    "text": "together but even 5 microsc you probably can still see the eye that these things are separated um if you go to 1 micros um",
    "start": "1405440",
    "end": "1413039"
  },
  {
    "text": "things are getting a bit more difficult um on the top you had measurements with a, repetitions um the distributions look",
    "start": "1413039",
    "end": "1419600"
  },
  {
    "text": "really at the same place basically but then if you increase the iterations to 10,000 to 100,000 repetitions um they",
    "start": "1419600",
    "end": "1426400"
  },
  {
    "text": "become to se start to separate again and we can see that the blue curve is actually to the left than the red curve",
    "start": "1426400",
    "end": "1432039"
  },
  {
    "text": "and our box test confirms that so we did this a bit further and the limit we found for for the landan is that we can",
    "start": "1432039",
    "end": "1437960"
  },
  {
    "text": "to about 100 nanc timing difference um in the land environment we can maybe get better but",
    "start": "1437960",
    "end": "1444360"
  },
  {
    "text": "the problem here is that our artificial sleep sleeping um functions may have been a bit inconsistent so the problem",
    "start": "1444360",
    "end": "1449760"
  },
  {
    "text": "may not be that the measurement is not precise enough but that our artificial sleep we introduced also added some noise to this so we think that um",
    "start": "1449760",
    "end": "1456840"
  },
  {
    "text": "something close to below 100 nond in a landine is something which is pretty reasonable to to detect if you were to",
    "start": "1456840",
    "end": "1463400"
  },
  {
    "start": "1463000",
    "end": "1463000"
  },
  {
    "text": "happen to be on the same host as your target it's not not a very likely scenario but maybe in like virtual",
    "start": "1463400",
    "end": "1468760"
  },
  {
    "text": "hosting environments where you um have like Linux containers and you're actually on the same host you may have such a setting um here you can get below",
    "start": "1468760",
    "end": "1475720"
  },
  {
    "text": "that so this is a 30 n 30 nond plot and you may actually get um below that if you're if you're lucky",
    "start": "1475720",
    "end": "1482679"
  },
  {
    "text": "basically unfortunately if you look at the the van and the white area networks um things are not quite as nice this was",
    "start": "1482679",
    "end": "1489039"
  },
  {
    "text": "an experiment from um broad broadband connection from my home place to digital ocean just to see like a regular",
    "start": "1489039",
    "end": "1495960"
  },
  {
    "text": "connection which people would have um and here things are much much more broad um and we can only distinguish something",
    "start": "1495960",
    "end": "1502039"
  },
  {
    "text": "up to like one microsecond timing difference so that's the the limit we found there you may be able to get better if you have a better network",
    "start": "1502039",
    "end": "1508559"
  },
  {
    "text": "connection or a better vantage point but in principle um over over the Internet it really depends on where you are",
    "start": "1508559",
    "end": "1514360"
  },
  {
    "text": "located and where your target is located and how the network quality is between there so that's that got us to thinking",
    "start": "1514360",
    "end": "1520240"
  },
  {
    "text": "well if that's the case why don't we um move as close to the Target as you possibly can so we did measurements",
    "start": "1520240",
    "end": "1525679"
  },
  {
    "text": "inside of ec2 we just got two ec2 instances and we wanted to see how good is their network if we want to attack",
    "start": "1525679",
    "end": "1531000"
  },
  {
    "text": "somebody who's on ec2 could we get on the same availability zone or close to them and run experiments there and it",
    "start": "1531000",
    "end": "1537840"
  },
  {
    "text": "turns out the networks and ec2 are really nice they must have really good hardware and um we have a 100 n timing",
    "start": "1537840",
    "end": "1544720"
  },
  {
    "text": "difference and we can still distinguish that inside of ec2 instance between different ec2 instances you have a lot",
    "start": "1544720",
    "end": "1550120"
  },
  {
    "text": "of more Peaks here which is probably because of their visualization solution they're using um but if you zoom a bit",
    "start": "1550120",
    "end": "1555159"
  },
  {
    "text": "in you can see that there is um a clear difference between the blue and the red curve and we can if you run the Box test on this you can actually exploit this so",
    "start": "1555159",
    "end": "1563520"
  },
  {
    "text": "the bottom line of all of this is that um if you're local on the host you can go sub 100 nond really well and Lan and",
    "start": "1563520",
    "end": "1570080"
  },
  {
    "start": "1564000",
    "end": "1564000"
  },
  {
    "text": "ec2 behave very very similar to each other so here you can go up to 100 nond potentially a bit better depending on",
    "start": "1570080",
    "end": "1576399"
  },
  {
    "text": "how your environment is um on the van it really depends on on the on the particular connection you have to your",
    "start": "1576399",
    "end": "1582000"
  },
  {
    "text": "target but something between 1 microc and 100 nond seems Seems like reasonable probably closer to the microsc range",
    "start": "1582000",
    "end": "1589520"
  },
  {
    "text": "and all these things are pretty consistent with previous measurements so there hasn't been much movement from when Nate Lawson did this or crossby did",
    "start": "1589520",
    "end": "1595039"
  },
  {
    "text": "these measurements they got into the same range so our networks don't seem to have much improved or our tool is not",
    "start": "1595039",
    "end": "1601120"
  },
  {
    "text": "that great but I don't think that's the case so but what does this all mean for you guys um now we",
    "start": "1601120",
    "end": "1607440"
  },
  {
    "text": "know what the timing differences are but if you have a timing attack inside of your inside your free software how do",
    "start": "1607440",
    "end": "1613440"
  },
  {
    "text": "you know which timing difference you have so we looked at some real world applications in scenarios and things you",
    "start": "1613440",
    "end": "1619600"
  },
  {
    "text": "often encounter and we try to to gauge how do those compare to these timing differences which we just talked about",
    "start": "1619600",
    "end": "1625520"
  },
  {
    "text": "and I'm giving it to Joel for that thank you thanks Daniel yeah so uh let's look at the problem from the other side and",
    "start": "1625520",
    "end": "1632039"
  },
  {
    "text": "talk about um how timing attacks actually look in practice for um some vulnerabilities you may be aware of and",
    "start": "1632039",
    "end": "1639240"
  },
  {
    "text": "also uh maybe some system aspects that you haven't thought about before so string comparison is a it's a timing",
    "start": "1639240",
    "end": "1646159"
  },
  {
    "start": "1643000",
    "end": "1643000"
  },
  {
    "text": "side channel that probably immediately comes in mind when you hear about these side channels and um most string",
    "start": "1646159",
    "end": "1653360"
  },
  {
    "text": "comparison functions leak information uh they're designed to be fast and they",
    "start": "1653360",
    "end": "1658520"
  },
  {
    "text": "they actually terminate as soon as they find a difference between uh the strings that are being compared so that leaks",
    "start": "1658520",
    "end": "1664559"
  },
  {
    "text": "information about yeah where in the string um the difference was found so in",
    "start": "1664559",
    "end": "1670159"
  },
  {
    "text": "the context of a timing attack we see uh here an attacker is um sending a request",
    "start": "1670159",
    "end": "1675519"
  },
  {
    "text": "to a Target and the target is comparing the string against a valid credential",
    "start": "1675519",
    "end": "1680600"
  },
  {
    "text": "and over on the right here it's comparing one bite at a time and when it reaches the third bite um it responds",
    "start": "1680600",
    "end": "1686320"
  },
  {
    "text": "and says that the credential is invalid um the attacker can then brute force uh",
    "start": "1686320",
    "end": "1693000"
  },
  {
    "text": "try multiple bites in that third position and measure the uh and Sample the distributions",
    "start": "1693000",
    "end": "1699840"
  },
  {
    "text": "and if if the attacker finds the the next correct bite um they'll actually see a difference in the response time",
    "start": "1699840",
    "end": "1707000"
  },
  {
    "text": "distributions um that's how it works in theory um but in practice uh there's there's there's a",
    "start": "1707000",
    "end": "1713320"
  },
  {
    "text": "lot of roadblocks along the way so these kind of vulnerabilities are really easy to for developers to introduce um",
    "start": "1713320",
    "end": "1719840"
  },
  {
    "text": "they're introduced whenever attacker Control Data is being compared to some secret information and you see them all over",
    "start": "1719840",
    "end": "1726000"
  },
  {
    "text": "the place if you're looking at code bases um and developers are handling Computing hmx for example um let's say",
    "start": "1726000",
    "end": "1731960"
  },
  {
    "text": "you have a a web API and the request includes an hmac to authenticate it um",
    "start": "1731960",
    "end": "1737200"
  },
  {
    "text": "the the the server actually computes the hmac and then compares the hmac that they got in the request with the one they were that they computed if that's",
    "start": "1737200",
    "end": "1744039"
  },
  {
    "text": "done using a regular comparison equal equals or what have you um then you have a timing side Channel web API Keys is",
    "start": "1744039",
    "end": "1750519"
  },
  {
    "text": "another common place where developers compare these things inse securely so they have a web API key in memory that",
    "start": "1750519",
    "end": "1756320"
  },
  {
    "text": "they expect for the client they're getting the request from and they go ahead and compare it using a regular comparison uh ooth tokens they can be",
    "start": "1756320",
    "end": "1763000"
  },
  {
    "text": "implemented using hmax or they can be opaque values like web API keys and the same issues come into play um you know",
    "start": "1763000",
    "end": "1770200"
  },
  {
    "text": "web micro Frameworks that have these middlewares to do things like authentication a lot of times you'll see",
    "start": "1770200",
    "end": "1775279"
  },
  {
    "text": "when uh uh when they're handling passwords first of all they're not storing the password insecurely but they're also doing um a naive comparison",
    "start": "1775279",
    "end": "1782840"
  },
  {
    "text": "between the password they get and the password that they're expecting so um all these things uh it's very common for",
    "start": "1782840",
    "end": "1789159"
  },
  {
    "text": "developers to introduce these side channels and at the end of the day a side Channel um it is a concern it leaks",
    "start": "1789159",
    "end": "1795120"
  },
  {
    "text": "information um but it's a separate question to ask uh when you say okay so can we exploit",
    "start": "1795120",
    "end": "1801200"
  },
  {
    "text": "this remotely and uh actually before we go to",
    "start": "1801200",
    "end": "1806480"
  },
  {
    "text": "the next slide so the the the the two things we really want to know here that we want to understand is how much time",
    "start": "1806480",
    "end": "1812159"
  },
  {
    "text": "is introduced by one additional bik comparison uh for common programming languages that's really important",
    "start": "1812159",
    "end": "1817840"
  },
  {
    "text": "because that's the bump that you're going to see uh when that comparison actually matches one additional bite so",
    "start": "1817840",
    "end": "1825039"
  },
  {
    "text": "that's a really important Benchmark when we talk about feasibility of attacks against these string comparison functions and the other assumption that",
    "start": "1825039",
    "end": "1831760"
  },
  {
    "text": "a lot of people make and it's often unstated is that the comparison function is naive that it will return uh when the",
    "start": "1831760",
    "end": "1839440"
  },
  {
    "text": "first non-matching bite is found and Nate Nate Lawson pointing this out a long time ago is uh modern operating",
    "start": "1839440",
    "end": "1846080"
  },
  {
    "text": "systems modern CPUs they actually allow you to compare entire words at a time atomically um and it's up to the",
    "start": "1846080",
    "end": "1852120"
  },
  {
    "text": "platform to actually take advantage of this but more and more systems actually do take advantage of this so one thing",
    "start": "1852120",
    "end": "1858080"
  },
  {
    "text": "looked at is Java so we ran benchmarks for comparison in Java Java's been a target of timing attacks in the past",
    "start": "1858080",
    "end": "1864159"
  },
  {
    "text": "it's slower than C Python and Ruby and so on um so it's interesting to look at Java and see what does the performance",
    "start": "1864159",
    "end": "1869799"
  },
  {
    "text": "look like in 2014 so if we look at um string comparison in Java and here we have on",
    "start": "1869799",
    "end": "1876519"
  },
  {
    "text": "the x-axis we're comparing two strings and the first non-matching index the first non-matching bite that's the",
    "start": "1876519",
    "end": "1882799"
  },
  {
    "text": "x-axis and the y- axis is the execution time the total execution time of the",
    "start": "1882799",
    "end": "1888559"
  },
  {
    "text": "comparison and we don't see a smooth increasing line here we don't see a smooth U uh we don't see this smoothly",
    "start": "1888559",
    "end": "1895120"
  },
  {
    "text": "tracking the the index itself what we actually see is uh this this staircase graph and the jumps are happening uh",
    "start": "1895120",
    "end": "1902399"
  },
  {
    "text": "once you go past a word boundary so what's happening here is Java the Java",
    "start": "1902399",
    "end": "1908399"
  },
  {
    "text": "virtual machine this was tested with Java 8 on a um uh Intel CPU it's um it's",
    "start": "1908399",
    "end": "1913799"
  },
  {
    "text": "actually comparing an entire word at a time and when it exits it's exiting at",
    "start": "1913799",
    "end": "1919240"
  },
  {
    "text": "the same amount it's exiting at the same time uh regardless of which actual bite matched so it is leaking information",
    "start": "1919240",
    "end": "1925440"
  },
  {
    "text": "when we see those bumps on those word boundaries um that leaks information that tells us that an additional word",
    "start": "1925440",
    "end": "1931639"
  },
  {
    "text": "matched problem is is that words are really big we're not talking about bites anymore um here in this case you an",
    "start": "1931639",
    "end": "1937919"
  },
  {
    "text": "attacker would have to guess the entire word correctly in order to get the feedback from the timing uh to be able",
    "start": "1937919",
    "end": "1943440"
  },
  {
    "text": "to infer that their guess was actually correct and that's just too big of a space to too big of a search space to",
    "start": "1943440",
    "end": "1949240"
  },
  {
    "text": "really uh perform this attack in practice but we haven't even talked about um micro benchmarks we'll get to",
    "start": "1949240",
    "end": "1954639"
  },
  {
    "text": "that um but we can look at performance on a lower-end CPU so this is a 1 GHz arm 32bit CPU cortex A8 and we ran the",
    "start": "1954639",
    "end": "1962760"
  },
  {
    "text": "same Benchmark this is with Java 8 for arm and what we see here is it is using a naive string comparison function it is",
    "start": "1962760",
    "end": "1969880"
  },
  {
    "text": "exiting on the first non-matching bite and it tracks really well with the index so this is actually um better for an",
    "start": "1969880",
    "end": "1976840"
  },
  {
    "text": "attacker because they're going to learn exactly where in the string uh potentially where in the string um the",
    "start": "1976840",
    "end": "1983240"
  },
  {
    "text": "ma the the first non-matching bite occurs um but we also have to talk about",
    "start": "1983240",
    "end": "1988399"
  },
  {
    "text": "the difference that one additional bike comparison introduces for the for the",
    "start": "1988399",
    "end": "1993679"
  },
  {
    "text": "platform that we're looking at and so we want to perform micro benchmarks and here we're not benchmarking the whole",
    "start": "1993679",
    "end": "1999080"
  },
  {
    "start": "1995000",
    "end": "1995000"
  },
  {
    "text": "system we're trying to isolate and measure uh you know one basic operation in the system and we tried to look at B",
    "start": "1999080",
    "end": "2006320"
  },
  {
    "text": "comparison so n lawon Lawson and Taylor they did these measurements in 2010 for",
    "start": "2006320",
    "end": "2011480"
  },
  {
    "text": "64-bit CPU and for C Ruby and python uh let's just look at those for now um the",
    "start": "2011480",
    "end": "2017679"
  },
  {
    "text": "numbers are daunting we're looking at sub nanc these measurements are in nanc uh we're looking at sub nanosecond uh",
    "start": "2017679",
    "end": "2024399"
  },
  {
    "text": "numbers here so performing this attack over a network where we have 100 nond",
    "start": "2024399",
    "end": "2029880"
  },
  {
    "text": "resolution or let's say we improve the tool and you know we get to 50 nond re resolution um we're still way off on um",
    "start": "2029880",
    "end": "2037919"
  },
  {
    "text": "actually being able to perform this attack against these comparisons um if we look at the I5 these are the",
    "start": "2037919",
    "end": "2043279"
  },
  {
    "text": "benchmarks that we ran um first of all the numbers are pretty strikingly lower",
    "start": "2043279",
    "end": "2048800"
  },
  {
    "text": "um but I should also mention that these are no longer per bite values now we're talking about the micro Benchmark for",
    "start": "2048800",
    "end": "2054839"
  },
  {
    "text": "the word comparison so these numbers this looks like we're doing two word per comparisons uh per clock cycle um which",
    "start": "2054839",
    "end": "2063240"
  },
  {
    "text": "is not hard to imagine um the other side of it is when you're writing these micro",
    "start": "2063240",
    "end": "2068839"
  },
  {
    "text": "benchmarks and you're trying to isolate this operation um the compiler the CPU and the operating system they're doing",
    "start": "2068839",
    "end": "2074878"
  },
  {
    "text": "everything they can to run this Benchmark as quickly as possible so I think for C Ruby and python the truth is",
    "start": "2074879",
    "end": "2081398"
  },
  {
    "text": "somewhere in the middle we were already looking at really difficult numbers in 2010 and they've just gotten worse um in",
    "start": "2081399",
    "end": "2088158"
  },
  {
    "text": "Java we see the this is a friendlier number perhaps it's seven Nan seconds uh but again this is for an entire word so",
    "start": "2088159",
    "end": "2095358"
  },
  {
    "text": "not only do you have to guess an entire word when you're performance this attack um you're only getting a bump of 7 nond",
    "start": "2095359",
    "end": "2101160"
  },
  {
    "text": "so um I think we can pretty safely say that you know these attacks are just",
    "start": "2101160",
    "end": "2106720"
  },
  {
    "text": "infeasible for Modern Hardware um if we look at the 1 GHz 32-bit CPU uh it's a",
    "start": "2106720",
    "end": "2112800"
  },
  {
    "text": "the story is a little bit different python Ruby and C perform quite well um but Java is kind of putting us in the",
    "start": "2112800",
    "end": "2119280"
  },
  {
    "text": "ballpark of uh possibly being able to perform this attack so uh this is really more of a a risk today for embedded",
    "start": "2119280",
    "end": "2126520"
  },
  {
    "text": "systems for lower power system systems and uh this particular attack isn't going to affect uh Modern Hardware uh or",
    "start": "2126520",
    "end": "2134599"
  },
  {
    "text": "it certainly is a lot harder um to perform these attacks against modern Hardware um so let's uh let's move on to",
    "start": "2134599",
    "end": "2141160"
  },
  {
    "text": "some positive results and I'll pass it to Daniel right so yeah look at the more",
    "start": "2141160",
    "end": "2148400"
  },
  {
    "text": "happy side of timing attacks uh and what what actually can be done so the somewhat somewhat different side of this",
    "start": "2148400",
    "end": "2155720"
  },
  {
    "start": "2150000",
    "end": "2150000"
  },
  {
    "text": "um are branching based vulnerabilities as we call col them so there just if your system T makes a different takes a",
    "start": "2155720",
    "end": "2161240"
  },
  {
    "text": "different code path depending on whether um a certain decision has been made um",
    "start": "2161240",
    "end": "2166680"
  },
  {
    "text": "based on a secret value so the simple example here was the username enumeration from earlier if we um if you",
    "start": "2166680",
    "end": "2172839"
  },
  {
    "text": "can distinguish if usern name was valid or not um we can learn something about the system and what exactly the timing",
    "start": "2172839",
    "end": "2178599"
  },
  {
    "text": "difference there is really depends on your application so there is not a generic statement we can make about that if you let's say you have this username",
    "start": "2178599",
    "end": "2185400"
  },
  {
    "text": "an enumeration and either it returns immediately or it performs a logging operation to your file system it does a",
    "start": "2185400",
    "end": "2190520"
  },
  {
    "text": "SQL query it maybe notifies flunk that something happened um if all these things happen you're going to have a huge timing difference between that but",
    "start": "2190520",
    "end": "2197240"
  },
  {
    "text": "if um if there's only very small operation happening if the valid if the username was valid then we can maybe not distinguish this so in order to make a",
    "start": "2197240",
    "end": "2203880"
  },
  {
    "text": "decision about this we just looked at some some common scenarios here um the first one is we actually looked at the hash function and I kind of showed you",
    "start": "2203880",
    "end": "2210240"
  },
  {
    "text": "that in the live demo earlier today already so we have um the same same",
    "start": "2210240",
    "end": "2215480"
  },
  {
    "text": "example where either hash function happened or did not happen and here you see um a sh to 56 hash function",
    "start": "2215480",
    "end": "2220640"
  },
  {
    "text": "happening or not happening is pretty clear on the on the Lan and even over the of the van connection to digital",
    "start": "2220640",
    "end": "2226800"
  },
  {
    "text": "ocean I was using um I could distinguish whether the server was performing a shot 56 hash or not so this is um not a",
    "start": "2226800",
    "end": "2233560"
  },
  {
    "text": "complicated operation if you think of anything which includes io on your system you can almost 100% positive",
    "start": "2233560",
    "end": "2239720"
  },
  {
    "text": "distinguish that remotely because IO is just taking so much longer than um just the hash function because these are highly optimized for",
    "start": "2239720",
    "end": "2245960"
  },
  {
    "text": "Speed um but something slightly more interesting maybe is um you are you guys familiar with CBC padding oracles um",
    "start": "2245960",
    "end": "2252839"
  },
  {
    "start": "2247000",
    "end": "2247000"
  },
  {
    "text": "have you heard of those before it's uh I kind of explain the full concept right now but the idea is here if you this",
    "start": "2252839",
    "end": "2258599"
  },
  {
    "text": "came about um several years ago and they they have been well studied and there have been a lot of vulnerabilities asp.net notably was really vulnerable to",
    "start": "2258599",
    "end": "2265319"
  },
  {
    "text": "this um what it is is if you have a server endpoint which you can send an encrypted piece of data it will um",
    "start": "2265319",
    "end": "2272119"
  },
  {
    "text": "decrypt it for you and if there is an error in the decryption process we may learn something about um the padding of",
    "start": "2272119",
    "end": "2277280"
  },
  {
    "text": "the of the message and the padding in this case is if you have um as as a block Cipher you have fixed size blocks",
    "start": "2277280",
    "end": "2284079"
  },
  {
    "text": "which you need and if your message is longer or shorter than a block you would need to fill it with some padding so what the most algorithms do for example",
    "start": "2284079",
    "end": "2290440"
  },
  {
    "text": "open SSL implementation they perform a decryption of the data you give it and they check if the padding was right or not after the decryption and if it was",
    "start": "2290440",
    "end": "2297400"
  },
  {
    "text": "not right it will raise an exception but if if the padding was correct we'll assume this is correct data and will continue working with that so",
    "start": "2297400",
    "end": "2304240"
  },
  {
    "text": "traditionally the problem was that um the case for decryption was successful um which we have over here um would",
    "start": "2304240",
    "end": "2310400"
  },
  {
    "text": "throw an error message out to the user and the user could just see an error message and could say okay there was a pading error and I can exploit that to",
    "start": "2310400",
    "end": "2316280"
  },
  {
    "text": "actually um exploit this petting Oracle which allows me to decrypt any data I want so it's a really severe um",
    "start": "2316280",
    "end": "2321400"
  },
  {
    "text": "vulnerability um but even if you don't get an error message from the system which informs you that there was a",
    "start": "2321400",
    "end": "2327079"
  },
  {
    "text": "petting error you can still see a timing difference in these behaviors if the system decrypts data and it's um",
    "start": "2327079",
    "end": "2332960"
  },
  {
    "text": "unsuccessful it will give you an error message right away but if it's um successfully DEC crypting that data it",
    "start": "2332960",
    "end": "2338480"
  },
  {
    "text": "will try to process it in some form usually either it will do an XML parsing on that maybe or it will um try to do a",
    "start": "2338480",
    "end": "2344400"
  },
  {
    "text": "database lookup do something with it and um the idea is um that we can",
    "start": "2344400",
    "end": "2350640"
  },
  {
    "text": "distinguish that with a timing attack but again um it depends on what this processed data part is because that could be something quick something",
    "start": "2350640",
    "end": "2356640"
  },
  {
    "text": "longer so we we took something which is really small we just um used a sqlite in memory database with only one entry in",
    "start": "2356640",
    "end": "2362839"
  },
  {
    "text": "it and we made um if the decryption was successful we looked that decrypted token up the sqlite database and um if",
    "start": "2362839",
    "end": "2369720"
  },
  {
    "text": "that token was in there we send an okay message otherwise we send a data parsing error message so as you can see here um",
    "start": "2369720",
    "end": "2376000"
  },
  {
    "text": "you can easily distinguish that on the land this is just one SQL light query um on like a really small table in an inmemory database so um it's definitely",
    "start": "2376000",
    "end": "2383240"
  },
  {
    "text": "possible to explode those things so um in order to show you that this is actually possible to to run this um I",
    "start": "2383240",
    "end": "2389000"
  },
  {
    "text": "have a small demo about this and we try to make this Hollywood style it's going to decrypt bite by bite like you see it",
    "start": "2389000",
    "end": "2394599"
  },
  {
    "text": "in the movies right so here we have a I recorded",
    "start": "2394599",
    "end": "2400119"
  },
  {
    "text": "pre-recorded that on the left side we have the server which is running a ruby server on the right side is our pading",
    "start": "2400119",
    "end": "2406119"
  },
  {
    "text": "um ping Oracle attack thing and it's just running a quest against the server going through each bite and for each bite trying all possible combinations",
    "start": "2406119",
    "end": "2412319"
  },
  {
    "text": "and trying to find the bite which is actually um inducing a longer timing response and when it has a longer",
    "start": "2412319",
    "end": "2417960"
  },
  {
    "text": "response it knows the server Tred to process that particular piece of data and um it knows that the value it found",
    "start": "2417960",
    "end": "2423440"
  },
  {
    "text": "is the right one for the decryption and then bite by bite we can just go through this entire block of data and we um",
    "start": "2423440",
    "end": "2429480"
  },
  {
    "text": "recover a word um at a time I mean not a word like a character at a time in this case so this um in this case I just made",
    "start": "2429480",
    "end": "2437319"
  },
  {
    "text": "it a bit easier for myself and had a somewhat longer timing difference that I could run it that fast but in for each of these characters usually in a techer",
    "start": "2437319",
    "end": "2443720"
  },
  {
    "text": "would just um make like maybe 100 requests take the distribution of that run the statistical analysis I just",
    "start": "2443720",
    "end": "2449160"
  },
  {
    "text": "showed you before and can then say okay this one took longer than all the other ones beforehand and no it found the",
    "start": "2449160",
    "end": "2454359"
  },
  {
    "text": "right bite so um this should just show you that branching based things are not only the boring user enumeration which I",
    "start": "2454359",
    "end": "2460800"
  },
  {
    "text": "showed you before but there is actually real vulnerabilities which you can exploit through that um and that's",
    "start": "2460800",
    "end": "2465960"
  },
  {
    "text": "that's the problem so what is the takeaway of all",
    "start": "2465960",
    "end": "2471440"
  },
  {
    "text": "of this well the um Computing performances continues to improve I guess we're not really surprised by that",
    "start": "2471440",
    "end": "2477240"
  },
  {
    "text": "but um what we've seen before is that the timing differences for string comparisons get faster that most CPUs",
    "start": "2477240",
    "end": "2482400"
  },
  {
    "text": "are taking advantage of doing full word comparisons and so everything is getting more efficient and much harder for an attack to actually see one by",
    "start": "2482400",
    "end": "2489280"
  },
  {
    "text": "differences we might need to Pro Force a full 64 bits which which is INF feasible today at least um but on the other hand",
    "start": "2489280",
    "end": "2496240"
  },
  {
    "text": "we see that these branching B based vulnerabilities are often feasible so there is a there's a good way of um of",
    "start": "2496240",
    "end": "2501960"
  },
  {
    "text": "having these vulnerabilities in your applications and it really depends on where they are to determine if there's any risk for you and especially um low",
    "start": "2501960",
    "end": "2510560"
  },
  {
    "text": "lower-end systems like embedded systems are at greater risk of this we have seen um Joel has talked about Java and arm as",
    "start": "2510560",
    "end": "2516280"
  },
  {
    "text": "a quite feasible Target um and we actually looked at an Arduino which only runs with 16 MHz and um there you can",
    "start": "2516280",
    "end": "2523560"
  },
  {
    "text": "actually do string comparison timing attacks on the Arduino because it just takes so long to do one additional",
    "start": "2523560",
    "end": "2528920"
  },
  {
    "text": "comparison so that's actually something it's just like a 0.5 micros I believe for one string",
    "start": "2528920",
    "end": "2535119"
  },
  {
    "text": "comparison so what can you do well the first thing easy thing to say is well just make sure everything takes constant",
    "start": "2535119",
    "end": "2540800"
  },
  {
    "text": "time which your involve sensitive data right but even the crypto Community has tried to do that for a long time and",
    "start": "2540800",
    "end": "2546319"
  },
  {
    "text": "they needed multiple iterations for this in order to get it right and it's uh really difficult to to figure this out",
    "start": "2546319",
    "end": "2552760"
  },
  {
    "text": "so you have to look at your code and focus on the branching side Channel things if there is something like that like the CBC pading Oracle things like",
    "start": "2552760",
    "end": "2559599"
  },
  {
    "text": "that are are something to to look for um you might still want to use constant time comparison functions there clearly",
    "start": "2559599",
    "end": "2565400"
  },
  {
    "text": "is a timing leak there um it's most likely not exploitable from from like",
    "start": "2565400",
    "end": "2570800"
  },
  {
    "text": "from remote but people may be able to get more better Vantage points closer to your system they may be able to tap",
    "start": "2570800",
    "end": "2576200"
  },
  {
    "text": "wires directly there's all kind of possibilities you can think of so best practice would be just use a constant",
    "start": "2576200",
    "end": "2581319"
  },
  {
    "text": "time comparison function for Strings they in most Frameworks these days and we have examples in all white paper which can give you some guidance on what",
    "start": "2581319",
    "end": "2587520"
  },
  {
    "text": "to use there and then um monitor your environment make sure if you see somebody doing like 100,000 requests",
    "start": "2587520",
    "end": "2593200"
  },
  {
    "text": "like what you would maybe need to do for such a timing attack make sure you have something in place that notices that and that you can respond and maybe block",
    "start": "2593200",
    "end": "2600200"
  },
  {
    "text": "lock out that client if it's misbehaving so future plans for us are um doing some more empirical studies we",
    "start": "2600200",
    "end": "2606839"
  },
  {
    "start": "2603000",
    "end": "2603000"
  },
  {
    "text": "bit interested in um database queries and see if we can learn something how about the database structure by",
    "start": "2606839",
    "end": "2612359"
  },
  {
    "text": "observing response times and maybe Implement some more feasible attacks things like the um RSA pading article",
    "start": "2612359",
    "end": "2618119"
  },
  {
    "text": "which is more a crypto related thing um or um yeah anything else which may be",
    "start": "2618119",
    "end": "2623520"
  },
  {
    "text": "actually feasible in practice the other thing we noticed towards the end of our our study",
    "start": "2623520",
    "end": "2628880"
  },
  {
    "text": "basically was that since Jitter changes over time um if you ever looked at network network graphs they change over",
    "start": "2628880",
    "end": "2634800"
  },
  {
    "text": "time it depends on use of people routing may change along the way um so what we did for our measurements so far was we",
    "start": "2634800",
    "end": "2640920"
  },
  {
    "text": "always did all the short measurements first and then all the long measurements afterwards but in that this may take several minutes or for really long runs",
    "start": "2640920",
    "end": "2647359"
  },
  {
    "text": "it could take an hour or more so the network topology or not topology but the distribution of the quality may change",
    "start": "2647359",
    "end": "2653920"
  },
  {
    "text": "over time so what we might want to do is um inter leave our measurements so do",
    "start": "2653920",
    "end": "2659559"
  },
  {
    "text": "first one short measurements then one long measurement and one short one long and um have them so that way both",
    "start": "2659559",
    "end": "2665400"
  },
  {
    "text": "measurements see much closer um quality of the network during the experiment and then we may be getting a",
    "start": "2665400",
    "end": "2671559"
  },
  {
    "text": "much better resolution for our timing attack so that's something which we're going to do in the near future so with that um the code for this",
    "start": "2671559",
    "end": "2678480"
  },
  {
    "text": "is actually open source it's up on GitHub it should be public right now uh we also have an updated um research um",
    "start": "2678480",
    "end": "2685200"
  },
  {
    "text": "up this white paper on our research page on our website um and yeah I'm opening it up for any questions you have's",
    "start": "2685200",
    "end": "2693078"
  },
  {
    "text": "most complicated rate limiting yeah kind of",
    "start": "2697280",
    "end": "2705359"
  },
  {
    "text": "you guys are yeah that's a good point um so we",
    "start": "2705359",
    "end": "2712839"
  },
  {
    "text": "didn't run it against I mean we obviously didn't attack other people and so at the moment so ec2 was apparently",
    "start": "2712839",
    "end": "2718400"
  },
  {
    "text": "okay with us running these experiments between their hosts we we owned them both right so ac2 didn't do anything",
    "start": "2718400",
    "end": "2724160"
  },
  {
    "text": "even though they're known that they um if they see malicious traffic that would do something about it so we didn't see anything there um but that's definitely",
    "start": "2724160",
    "end": "2731280"
  },
  {
    "text": "something worth exploring if one uses rate limiting like like common products which are being used for that and to look into how that would affect these",
    "start": "2731280",
    "end": "2737079"
  },
  {
    "text": "measurements we actually haven't done that yet you",
    "start": "2737079",
    "end": "2743078"
  },
  {
    "text": "interested yeah let's talk offline after this",
    "start": "2746640",
    "end": "2750960"
  },
  {
    "text": "definitely any other questions oh sorry didn't see",
    "start": "2755559",
    "end": "2762760"
  },
  {
    "text": "you um we have not do we know if somebody did this before uh I haven't seen any research in into uh yeah using",
    "start": "2773680",
    "end": "2781200"
  },
  {
    "text": "basian like machine learning stuff for uh doing the hypothesis test there's",
    "start": "2781200",
    "end": "2786400"
  },
  {
    "text": "probably better hypothesis tests out there but uh we just went with the one that perform has performed the best in",
    "start": "2786400",
    "end": "2792559"
  },
  {
    "text": "previous empirical studies yeah we so the crossby analyzed various statistical techniques so they did also the student",
    "start": "2792559",
    "end": "2797680"
  },
  {
    "text": "T tests and other ones which are in that direction but um they they didn't go into the machine learning direction or anything or filtering or things like",
    "start": "2797680",
    "end": "2804280"
  },
  {
    "text": "that but that may be something to explore if you have any insights into that maybe it would be nice to",
    "start": "2804280",
    "end": "2810119"
  },
  {
    "text": "talk I don't see any other hands here yeah go",
    "start": "2813720",
    "end": "2820000"
  },
  {
    "text": "ahead um I'm not sure I heard it fully you saying that it relies on a large number of requests",
    "start": "2832040",
    "end": "2838599"
  },
  {
    "text": "yeah yeah it does so um that's why I think these kind of attacks are also easy to detect to some degree I mean if",
    "start": "2838599",
    "end": "2845839"
  },
  {
    "text": "somebody is doing it aggressively if somebody's doing it aggressively and like really hitting your server with all these requests you should pretty easy to",
    "start": "2845839",
    "end": "2852119"
  },
  {
    "text": "detect it um of course you could just spread it out and spend a long time if you have a non if whatever you're",
    "start": "2852119",
    "end": "2857800"
  },
  {
    "text": "attacking is not changing over time you could spread it out over a year if you wanted to and like make only one request",
    "start": "2857800",
    "end": "2863280"
  },
  {
    "text": "every every few seconds or something like that but then you have the problem that your network topal changes over or",
    "start": "2863280",
    "end": "2868559"
  },
  {
    "text": "quality changes over time and then your distributions will be much harder to match up so it's it's very challenging to do these attacks um and you need a",
    "start": "2868559",
    "end": "2875079"
  },
  {
    "text": "large number of samples yeah",
    "start": "2875079",
    "end": "2878839"
  },
  {
    "text": "yeah have you done any experiment to see how",
    "start": "2881280",
    "end": "2886760"
  },
  {
    "text": "well all",
    "start": "2886960",
    "end": "2890240"
  },
  {
    "text": "exp yeah um yeah we haven't personally",
    "start": "2892359",
    "end": "2897760"
  },
  {
    "text": "looked at it yet um but people have looked at that before um and they find that if you if you bump the let's say",
    "start": "2897760",
    "end": "2904200"
  },
  {
    "text": "you put the server under load um like the Target under load and then you just put your requests on top of that and I",
    "start": "2904200",
    "end": "2909440"
  },
  {
    "text": "think they were in the um in the low 10th per um increase in Jitter so they",
    "start": "2909440",
    "end": "2914760"
  },
  {
    "text": "noticed that it was maybe like 10 to 20% more Jitter don't quote me on the exact numbers but it's uh the the crossby",
    "start": "2914760",
    "end": "2920480"
  },
  {
    "text": "study investigated that so it's it's not like a order of magnitude different but it adds definitely somewhere",
    "start": "2920480",
    "end": "2928400"
  },
  {
    "text": "challenge okay I think we're out of time but yeah maybe one more have you found the difference between uh virtual",
    "start": "2929200",
    "end": "2935720"
  },
  {
    "text": "machines and Hardware uh yeah so that was interesting to see",
    "start": "2935720",
    "end": "2941160"
  },
  {
    "text": "we um the the land measurements you've seen they were actually they were actually real",
    "start": "2941160",
    "end": "2948000"
  },
  {
    "text": "hardware and um like bare metal running on bare metal um but the E2 things were",
    "start": "2948000",
    "end": "2953040"
  },
  {
    "text": "virtualized so the main thing we saw is that the distributions were not um not like one Peak and nicely distributed but",
    "start": "2953040",
    "end": "2958720"
  },
  {
    "text": "they had many more many more modes many more Maxima so um that would be worth exploring some more but I think it would",
    "start": "2958720",
    "end": "2965680"
  },
  {
    "text": "it suggests that there is like some preempting happening and maybe another another viral machine is executing for some amount of time things like that um",
    "start": "2965680",
    "end": "2972480"
  },
  {
    "text": "but the nice thing was if you repeated the two measurements even if they were minutes apart the shape of the distributions was still the same so it",
    "start": "2972480",
    "end": "2978319"
  },
  {
    "text": "must be some intrinsic measure mechanism from the system maybe I can even use it for finger printing or things like that",
    "start": "2978319",
    "end": "2983720"
  },
  {
    "text": "so it was like an idea we had yeah thanks",
    "start": "2983720",
    "end": "2992510"
  },
  {
    "text": "[Applause]",
    "start": "2992510",
    "end": "2994949"
  }
]