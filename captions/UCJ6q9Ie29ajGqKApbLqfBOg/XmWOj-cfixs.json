[
  {
    "text": "good morning everyone it's great to be here welcome to lost in transaction process",
    "start": "30",
    "end": "7770"
  },
  {
    "text": "doppelganger my name is Holly Burman and the security research team leader at in",
    "start": "7770",
    "end": "13799"
  },
  {
    "text": "silo with me here is Eugene hello Eugene : social developer from Salem and today",
    "start": "13799",
    "end": "20880"
  },
  {
    "text": "we're gonna be talking about doppelganger chizz a new evasion",
    "start": "20880",
    "end": "26070"
  },
  {
    "text": "technique for for Windows and we're gonna start off by talking about the history of evasion techniques we're",
    "start": "26070",
    "end": "33690"
  },
  {
    "text": "gonna move on to talk about AV scanners and all the different factors to consider when implementing one then",
    "start": "33690",
    "end": "39690"
  },
  {
    "text": "we're gonna discuss transacted NTFS or txf as this is known it's known by",
    "start": "39690",
    "end": "44789"
  },
  {
    "text": "Microsoft and then move on to discuss the evolution of the Windows process loader over the years finally we're",
    "start": "44789",
    "end": "51059"
  },
  {
    "text": "going to get to the doppelganger NEX accusin flow followed by a live demo and",
    "start": "51059",
    "end": "56070"
  },
  {
    "text": "then if we have time we'll discuss a mitigation in redstone a story of a blue",
    "start": "56070",
    "end": "61109"
  },
  {
    "text": "screen of death that we ran into while conducting this research so advanced",
    "start": "61109",
    "end": "67500"
  },
  {
    "text": "code injection techniques and evasion techniques evident with a spurt for many years now notable methods are ghost",
    "start": "67500",
    "end": "74310"
  },
  {
    "text": "writing atom bombing power loading propagating which was only recently released a few weeks ago we have",
    "start": "74310",
    "end": "81420"
  },
  {
    "text": "reflective loading which is loading of dll files into memory without ever",
    "start": "81420",
    "end": "86790"
  },
  {
    "text": "placing them on disk and we have process hollowing which is basically running a malicious process inside of a container",
    "start": "86790",
    "end": "92880"
  },
  {
    "text": "process so let's take a look at a bunch of these we'll start off with ghost writing this as the author describes it",
    "start": "92880",
    "end": "101070"
  },
  {
    "text": "is a paradox writing to another process without opening it nor actually writing to it and it's an injection technique",
    "start": "101070",
    "end": "107970"
  },
  {
    "text": "from actually over a decade ago from April 2010 and it hasn't really received much attention so it's why I decided to",
    "start": "107970",
    "end": "113640"
  },
  {
    "text": "cover it in this talk the goal here is to inject arbitrary code into a process",
    "start": "113640",
    "end": "120240"
  },
  {
    "text": "in this example specifically explorer.exe and do that without opening",
    "start": "120240",
    "end": "125549"
  },
  {
    "text": "the process without writing through the processes memory without creating any threads in the process or using a PC is in whatever",
    "start": "125549",
    "end": "132650"
  },
  {
    "text": "now this technique works by by first finding two patterns in ntdll we're",
    "start": "132650",
    "end": "140930"
  },
  {
    "text": "gonna call them the loop pattern and the jump pattern now we're gonna use these two patterns to achieve what we call a",
    "start": "140930",
    "end": "148190"
  },
  {
    "text": "right what we're which is basically the ability to write whatever we want into",
    "start": "148190",
    "end": "154519"
  },
  {
    "text": "the target processes address space and do that into any address that we want so",
    "start": "154519",
    "end": "160610"
  },
  {
    "text": "let's start off by talking about the move pattern the move pattern is a simple pattern made up of two instructions in assembly code the one",
    "start": "160610",
    "end": "167510"
  },
  {
    "text": "being moved from a an immediate value of stored in a register and then storing",
    "start": "167510",
    "end": "172910"
  },
  {
    "text": "that value in the memory pointed to by another register so an example would be",
    "start": "172910",
    "end": "177950"
  },
  {
    "text": "this where we have move the contents of EB X register into the memory where ei X",
    "start": "177950",
    "end": "184099"
  },
  {
    "text": "points to and now what we want to do is use set thread context API which controls the registers of a thread and",
    "start": "184099",
    "end": "193090"
  },
  {
    "text": "set the EAX register to point to an address in memory where we want to write",
    "start": "193090",
    "end": "198799"
  },
  {
    "text": "the double work and then write that double word into EB X and by that we can write a double work wherever we want in",
    "start": "198799",
    "end": "205280"
  },
  {
    "text": "memory the next thing that will happen is we're going to return which is the next part of this little gadget here we",
    "start": "205280",
    "end": "212090"
  },
  {
    "text": "have and this return there's a problem with it because we don't know where it's",
    "start": "212090",
    "end": "217489"
  },
  {
    "text": "going to return to and so what we're gonna utilize here is something called the jump pattern and basically we're",
    "start": "217489",
    "end": "222709"
  },
  {
    "text": "just gonna look for an instruction that is a jump zero which means it's gonna keep executing itself again and again and an infinite loop it's gonna stick",
    "start": "222709",
    "end": "229220"
  },
  {
    "text": "the program and that way we're gonna avoid a crash and so using some tricks that we're not going to cover right now",
    "start": "229220",
    "end": "234919"
  },
  {
    "text": "we're gonna get the return to jump to this to this jump and everything is covered in this blog post if you're",
    "start": "234919",
    "end": "240859"
  },
  {
    "text": "interested and then this ability enables us to iteratively one double word at a",
    "start": "240859",
    "end": "247010"
  },
  {
    "text": "time write whatever we want wherever we want now once we have this right what",
    "start": "247010",
    "end": "255169"
  },
  {
    "text": "wearability you can get creative and think how can we use this to execute code in this specific example the author",
    "start": "255169",
    "end": "261950"
  },
  {
    "text": "decided to write a shell code onto the stack of the of the target thread and then using separate",
    "start": "261950",
    "end": "268730"
  },
  {
    "text": "context call virtual protects to change the protection of the page make it executable and then run shellcode",
    "start": "268730",
    "end": "275350"
  },
  {
    "text": "another injection technique that actually we released about a year ago which was in October of 2016 is called",
    "start": "275350",
    "end": "282980"
  },
  {
    "text": "atom bombing and that uses the global atom table and APCs which are async procedure calls now we",
    "start": "282980",
    "end": "290720"
  },
  {
    "text": "actually witnessed this being used in the wild by dry decks the notorious banking Trojan now atom bombing works by",
    "start": "290720",
    "end": "299540"
  },
  {
    "text": "basically having a malicious process store code in the global atom table now",
    "start": "299540",
    "end": "306950"
  },
  {
    "text": "this is done by using the global add atom API and then what we do here is we",
    "start": "306950",
    "end": "312290"
  },
  {
    "text": "have a legitimate process we issue an APC call or an ASIC procedure call to",
    "start": "312290",
    "end": "318700"
  },
  {
    "text": "the legitimate process and thereby sort of force it to retrieve the code from the from the atom table and store it in",
    "start": "318700",
    "end": "326390"
  },
  {
    "text": "its own memory in the readwrite location at which point we go on to do some return oriented programming to allocate",
    "start": "326390",
    "end": "333230"
  },
  {
    "text": "virtual memory that is executable copy the memory from the readwrite section to the executable memory and then finally",
    "start": "333230",
    "end": "340490"
  },
  {
    "text": "execute the shell code now all the methods that we've discussed so far",
    "start": "340490",
    "end": "346150"
  },
  {
    "text": "ghostwriting atom bombing and the rest allow you to execute shellcode and a target process so usually an attacker",
    "start": "346150",
    "end": "354230"
  },
  {
    "text": "would want to have their code running inside of a legitimate very innocent-looking process which would be",
    "start": "354230",
    "end": "360410"
  },
  {
    "text": "either a system critical process or a process that's used by the user and so a crash in the in the code of the malware",
    "start": "360410",
    "end": "367100"
  },
  {
    "text": "could significantly impact the system if it's in critical windows process then a crash could lead to an even a blue",
    "start": "367100",
    "end": "372830"
  },
  {
    "text": "screen and then if it's in a user application such as Internet Explorer then obviously the user is going to",
    "start": "372830",
    "end": "379370"
  },
  {
    "text": "notice something so it would be very nice if there was an ability to create a process that will host our malicious",
    "start": "379370",
    "end": "386330"
  },
  {
    "text": "code and if it crashes it doesn't affect anything in the system and that's why cross hollowing was invented now the way",
    "start": "386330",
    "end": "392600"
  },
  {
    "text": "process Halloween works is that we first create a legitimate process in a",
    "start": "392600",
    "end": "398120"
  },
  {
    "text": "suspended state from something just SVC host and now what we have is a",
    "start": "398120",
    "end": "403940"
  },
  {
    "text": "process that's running in the system or it's not yet running but it exists in system it will be seen in the and the",
    "start": "403940",
    "end": "410130"
  },
  {
    "text": "task manager for example and this process has a process environment block which points to the main image that is",
    "start": "410130",
    "end": "416580"
  },
  {
    "text": "loaded now at this point it's important to note that we also have the EAX",
    "start": "416580",
    "end": "421920"
  },
  {
    "text": "register that points to the entry point of the executable which means that once",
    "start": "421920",
    "end": "429540"
  },
  {
    "text": "the process starts running this is the first instruction that's going to execute so what we go on to do is we",
    "start": "429540",
    "end": "436080"
  },
  {
    "text": "unwrap the main section the main image and so we have sort of a hollowed",
    "start": "436080",
    "end": "441510"
  },
  {
    "text": "process and this is where the method gets its name now at this point we move on to reallocate the memory for our evil",
    "start": "441510",
    "end": "449670"
  },
  {
    "text": "exe and then we use this memory that we've reallocated to the right for each",
    "start": "449670",
    "end": "455220"
  },
  {
    "text": "section in our malicious code we write it into the target into the container process at which point we can move on to",
    "start": "455220",
    "end": "461700"
  },
  {
    "text": "relocate the image if we need to and set the base address in the process environment block if we changed it in",
    "start": "461700",
    "end": "466740"
  },
  {
    "text": "this example it's not necessary and finally we have to change the ax to",
    "start": "466740",
    "end": "472140"
  },
  {
    "text": "point to the to the correct entry point by using set thread context and at this",
    "start": "472140",
    "end": "478590"
  },
  {
    "text": "point all we have left to do is to run the process and so we resume the thread and everything works just fine now this",
    "start": "478590",
    "end": "487710"
  },
  {
    "text": "technique was useful years ago when it was invented it was able to bypass a lot of security solutions but nowadays",
    "start": "487710",
    "end": "494400"
  },
  {
    "text": "vendors are aware of it and are able to block it that being said let's talk",
    "start": "494400",
    "end": "500940"
  },
  {
    "text": "about how so the most trivial implementations of process hollowing will create an image that is entirely",
    "start": "500940",
    "end": "507180"
  },
  {
    "text": "read/write/execute because it'll allocate everything in one chunk and it won't correct the protection and this is easy to detect a",
    "start": "507180",
    "end": "512700"
  },
  {
    "text": "numerous way so we're not going to get into that but if the malware authors are a bit more creative and they don't just",
    "start": "512700",
    "end": "519390"
  },
  {
    "text": "copy the first example off of github but actually implement themselves then they'll unmapped the executable and then",
    "start": "519390",
    "end": "525780"
  },
  {
    "text": "reallocate with correct protection for example in which case first of all the mapping of the main execute the unmapped",
    "start": "525780",
    "end": "531420"
  },
  {
    "text": "of the main executable is high suspicious and also what we need to understand is there for every address in",
    "start": "531420",
    "end": "537790"
  },
  {
    "text": "windows in a process in Windows we have something called the virtual address descriptor which is a structure that",
    "start": "537790",
    "end": "542910"
  },
  {
    "text": "describes the properties of that address and the start address of the thread is",
    "start": "542910",
    "end": "548740"
  },
  {
    "text": "going to have an image map property or an image map type when it's first loaded",
    "start": "548740",
    "end": "555940"
  },
  {
    "text": "legitimately but once the the threat actor reallocates the memory by",
    "start": "555940",
    "end": "560980"
  },
  {
    "text": "unwrapping the the main module the type is going to change and so we can detect that let's say the attackers get even",
    "start": "560980",
    "end": "568480"
  },
  {
    "text": "more creative and they decide to for example overwrite the original executable without unwrapping it",
    "start": "568480",
    "end": "574390"
  },
  {
    "text": "realizing that this change will not be reflected in the virtual address descriptor so in this case we need to",
    "start": "574390",
    "end": "581110"
  },
  {
    "text": "understand how Windows works when mapping images when mapping an image there's an optimization that makes the",
    "start": "581110",
    "end": "588670"
  },
  {
    "text": "pages of the image shared so that if we load it into multiple processes then the image is loaded is shared one time",
    "start": "588670",
    "end": "595660"
  },
  {
    "text": "because we don't want the image to be loaded into every process independently",
    "start": "595660",
    "end": "601540"
  },
  {
    "text": "and thus taking more memory so when Windows does this in the something",
    "start": "601540",
    "end": "606550"
  },
  {
    "text": "called the PFN database which describes the physical pages of the opera that the operating system is working with the",
    "start": "606550",
    "end": "613720"
  },
  {
    "text": "pages themselves will be marked as shared now once a process tries to write to that page the page will be turned",
    "start": "613720",
    "end": "621850"
  },
  {
    "text": "into a private copy just for that process because it's no longer shared and this change will be reflected in the",
    "start": "621850",
    "end": "627730"
  },
  {
    "text": "pfn database and so the flag that specified private specifies private or shared will turn from 1 to 0 which means",
    "start": "627730",
    "end": "634839"
  },
  {
    "text": "private and this again we can detect the attacker and you can get more creative and try to unmanned dream ramp remap the",
    "start": "634839",
    "end": "642040"
  },
  {
    "text": "image but again if it's not an executable than the virtual address the script is not going to match and the",
    "start": "642040",
    "end": "647649"
  },
  {
    "text": "most the best way to do this to make it look as genuine as possible is by",
    "start": "647649",
    "end": "653440"
  },
  {
    "text": "unmapped and remapping in another file as an actual image in which case first of all",
    "start": "653440",
    "end": "658720"
  },
  {
    "text": "the start address of the thread is not going to match the address of entry point of the image that's actually loaded and also the file",
    "start": "658720",
    "end": "666720"
  },
  {
    "text": "object that is associated with the process is going to be different from the file object that the virtual address",
    "start": "666720",
    "end": "672960"
  },
  {
    "text": "descriptor is pointing to so process Halloween not so great anymore given",
    "start": "672960",
    "end": "679440"
  },
  {
    "text": "what we just saw the rest of the techniques we talked about which are atom bomb and ghost riding etc they are",
    "start": "679440",
    "end": "686640"
  },
  {
    "text": "missing this file mapping property right they there they create this dynamic code",
    "start": "686640",
    "end": "691710"
  },
  {
    "text": "that's this it seems like a runtime generated code and it that's something that modern solutions nowadays are able",
    "start": "691710",
    "end": "696960"
  },
  {
    "text": "to detect because it's highly suspicious so we need something new wouldn't be",
    "start": "696960",
    "end": "702090"
  },
  {
    "text": "cool if we could create a sort of a Silas map file but we know that a v's",
    "start": "702090",
    "end": "708120"
  },
  {
    "text": "scan files so we need to understand how scanners work very well if we want to",
    "start": "708120",
    "end": "713610"
  },
  {
    "text": "try to slip something past them so for that I'd like to call Eugene to help me out so we'll talk a little bit about how",
    "start": "713610",
    "end": "724940"
  },
  {
    "text": "the scanners scan the files before they're being executed let's consider",
    "start": "724940",
    "end": "731339"
  },
  {
    "text": "the generic file execution process at the beginning file is opened and then",
    "start": "731339",
    "end": "737400"
  },
  {
    "text": "this section is created out of file and the the memory is met into the memory",
    "start": "737400",
    "end": "742920"
  },
  {
    "text": "space of the newly created process and then the execution stopped so varied interception can happen we will cover",
    "start": "742920",
    "end": "748890"
  },
  {
    "text": "some places for example a the a file execution can be intercepted",
    "start": "748890",
    "end": "755550"
  },
  {
    "text": "during file open process so usually it's done in the mini filter on the windows",
    "start": "755550",
    "end": "760770"
  },
  {
    "text": "during the create file called the second",
    "start": "760770",
    "end": "767100"
  },
  {
    "text": "place that can be intercepted by antiviruses is a they acquire for a",
    "start": "767100",
    "end": "772470"
  },
  {
    "text": "synchronization callback which is called during the section creation because a section is created and the third place",
    "start": "772470",
    "end": "779040"
  },
  {
    "text": "that we will cover today is the process in creation notification routine which is a called just before the process",
    "start": "779040",
    "end": "787140"
  },
  {
    "text": "starts execution and it's say in this in its form that about that allows blocking",
    "start": "787140",
    "end": "792900"
  },
  {
    "text": "of the execution is available only for I mean is acute Abel so before we going",
    "start": "792900",
    "end": "798689"
  },
  {
    "text": "further talk about a a you see some examples of how antivirus walks I let's",
    "start": "798689",
    "end": "806669"
  },
  {
    "text": "discuss how a what should be done that once the execution is intercepted so antivirus have to scan the file and",
    "start": "806669",
    "end": "813059"
  },
  {
    "text": "decide if it's malicious or not the scanning can be done either from a user north or from Kenya or from any",
    "start": "813059",
    "end": "818669"
  },
  {
    "text": "combination of the two it's up to a vendor to decide how to scan the file and the target file that is being",
    "start": "818669",
    "end": "825149"
  },
  {
    "text": "executed there should be somehow access so it could be opened by name it will be opened by file ID on some file system",
    "start": "825149",
    "end": "831119"
  },
  {
    "text": "that supports it and of course they a file object if it's already a available",
    "start": "831119",
    "end": "836729"
  },
  {
    "text": "could be used a the simple object will be used to scan the file so again it's up to a event or to decide how to how to",
    "start": "836729",
    "end": "843359"
  },
  {
    "text": "access the content of the file of course very scanning the file on each",
    "start": "843359",
    "end": "848549"
  },
  {
    "text": "change is not practical if you do it the operating system will be on just getting",
    "start": "848549",
    "end": "854819"
  },
  {
    "text": "files if we do anything else beside so a the every vendor had has to decide where",
    "start": "854819",
    "end": "860609"
  },
  {
    "text": "to scan the file so they have some distinct points where they scan the files and they if we scan the file",
    "start": "860609",
    "end": "869279"
  },
  {
    "text": "before its execute it's completely blind for the rest of the thing techniques that we have talked about so if the",
    "start": "869279",
    "end": "875039"
  },
  {
    "text": "content of the memories change or somehow files change in brought into the memory it's completely invisible for the",
    "start": "875039",
    "end": "882449"
  },
  {
    "text": "a file in secure file skinny so let's see some examples of the a real a real",
    "start": "882449",
    "end": "889850"
  },
  {
    "text": "starts taking from a well-known Windows so in the first example we can see that",
    "start": "889850",
    "end": "896220"
  },
  {
    "text": "the execution is blocked a during integrated process just before the file is opened here a antivirus in the mini",
    "start": "896220",
    "end": "904499"
  },
  {
    "text": "filter Kovach blocks the execution in vowel it's blocked from the other process a usually it's a antivirus",
    "start": "904499",
    "end": "911429"
  },
  {
    "text": "process it's a tries to scan the file by reopening it we can see from this example that the file is opened by file",
    "start": "911429",
    "end": "919379"
  },
  {
    "text": "names of the file name was taken from the original operation and it's used to reopen the file and scan it the second",
    "start": "919379",
    "end": "926879"
  },
  {
    "text": "example is the same in creation so in this specific example we can see that the the Windows Defender",
    "start": "926879",
    "end": "932370"
  },
  {
    "text": "in this case tries to create a section to scan the file by other AV vendor",
    "start": "932370",
    "end": "937620"
  },
  {
    "text": "blocks it and tries to scan the file before the others can do it and in this",
    "start": "937620",
    "end": "943259"
  },
  {
    "text": "case again like in the previous case the operation will be blocked until the file is scanned and then it will be resumed",
    "start": "943259",
    "end": "949050"
  },
  {
    "text": "depending on the a content file it's fungal issues will be blocked there's",
    "start": "949050",
    "end": "954569"
  },
  {
    "text": "some issue with a specific place it's called Eclair for synchronization a",
    "start": "954569",
    "end": "961100"
  },
  {
    "text": "because the mini filter API don't allow us to see all the parameters that is",
    "start": "961100",
    "end": "966899"
  },
  {
    "text": "which which are passed from the user space so then we map the section in user",
    "start": "966899",
    "end": "972300"
  },
  {
    "text": "space we have a parameter that tells the Windows kernel that we are mapping an",
    "start": "972300",
    "end": "979050"
  },
  {
    "text": "image and we have another option which specifies the page protection but inside",
    "start": "979050",
    "end": "984690"
  },
  {
    "text": "the AAV callback we have only three page protection don't have the image type this they was if in the user space we",
    "start": "984690",
    "end": "993089"
  },
  {
    "text": "map the image we specially donnelly for example they the the windows will still",
    "start": "993089",
    "end": "999839"
  },
  {
    "text": "map the file executable but the anti viruses you'll see only the patriot only a page protection and they they might",
    "start": "999839",
    "end": "1007310"
  },
  {
    "text": "decide not to scan the file because they might think that it's a it's only a data file it's by being map of course the",
    "start": "1007310",
    "end": "1013880"
  },
  {
    "text": "windows water will never do it but if the file is manually loaded into the memory for execution it can happen and",
    "start": "1013880",
    "end": "1021199"
  },
  {
    "text": "the last place that we would like to cover is the execution this is not the",
    "start": "1021199",
    "end": "1028010"
  },
  {
    "text": "file scanning it's not file operations actually an execution operation so here",
    "start": "1028010",
    "end": "1033260"
  },
  {
    "text": "we can see that a just after the process was created the same Indy create process",
    "start": "1033260",
    "end": "1038688"
  },
  {
    "text": "routine was blocked and the antivirus a would go to scan the file is exactly as",
    "start": "1038689",
    "end": "1044928"
  },
  {
    "text": "it does in the first example it's important to note that a this specific",
    "start": "1044929",
    "end": "1050830"
  },
  {
    "text": "operation is performed it's not not as part of file operation",
    "start": "1050830",
    "end": "1056059"
  },
  {
    "text": "so any subsequent a changes total mappings to using files will be",
    "start": "1056059",
    "end": "1062480"
  },
  {
    "text": "invisible to whisk oh so it's only useful for the main executable because",
    "start": "1062480",
    "end": "1068340"
  },
  {
    "text": "it's in its blocking a version this function is available only for main executable it cannot be used for dynamic",
    "start": "1068340",
    "end": "1074370"
  },
  {
    "text": "link libraries because it's not on the order a Windows as well in the Society's",
    "start": "1074370",
    "end": "1080250"
  },
  {
    "text": "bank to the subsequent changes to the process using files so it's not an easy",
    "start": "1080250",
    "end": "1089280"
  },
  {
    "text": "job to create an anti-virus we have to decide where to send the files how to scan them there's always a performance",
    "start": "1089280",
    "end": "1095400"
  },
  {
    "text": "considerations and the antivirus vendors have to support different platforms",
    "start": "1095400",
    "end": "1102000"
  },
  {
    "text": "different CPU types different file systems and this makes it work very very complicated but we would like to talk",
    "start": "1102000",
    "end": "1108570"
  },
  {
    "text": "about one more layer of complication that the antivirus have to do B's it's a transaction on GFS photo reduction which",
    "start": "1108570",
    "end": "1117210"
  },
  {
    "text": "if s also known as 6f short a was introduced on Windows Vista and it's implementing completely inside the",
    "start": "1117210",
    "end": "1124140"
  },
  {
    "text": "windows a kernel it's a works for local in DFS a discs originally the Microsoft",
    "start": "1124140",
    "end": "1131730"
  },
  {
    "text": "repertory solution they are proposed to use it for a multiple file updates that has to be performed as a atomic",
    "start": "1131730",
    "end": "1138660"
  },
  {
    "text": "operation is that all the changes would be committed to the disk or would be rolled back depends on the result of the",
    "start": "1138660",
    "end": "1144630"
  },
  {
    "text": "operation it can be used as part of the watcher transaction involving other applications but it's out of the scope",
    "start": "1144630",
    "end": "1151050"
  },
  {
    "text": "of this talk and they usually this is used for a installation processes you",
    "start": "1151050",
    "end": "1159510"
  },
  {
    "text": "can consider you can think of installation that changes a lot of files during the installation process and then",
    "start": "1159510",
    "end": "1164550"
  },
  {
    "text": "if something happens files has to be wrong but instead of writing the lot of code that role but the file since",
    "start": "1164550",
    "end": "1170160"
  },
  {
    "text": "installer just can roll back the transaction and every changes would disappear it's very nice feature but just before",
    "start": "1170160",
    "end": "1178410"
  },
  {
    "text": "we continue a you can taking from the storage developer conference but back",
    "start": "1178410",
    "end": "1183780"
  },
  {
    "text": "from 2009 you can see that we said this was a very major change to the kernel",
    "start": "1183780",
    "end": "1189120"
  },
  {
    "text": "code a watch part of a ntfs driver was written to support instruction we have",
    "start": "1189120",
    "end": "1194590"
  },
  {
    "text": "a lot of new functions we will talk about them little bit later and a lot of a functions that there exist previously",
    "start": "1194590",
    "end": "1200110"
  },
  {
    "text": "were changed to support transactions so we have a really huge change in the",
    "start": "1200110",
    "end": "1205270"
  },
  {
    "text": "specific area of kernel and it was duplicated it was duplicated a very",
    "start": "1205270",
    "end": "1212500"
  },
  {
    "text": "shortly after what it was it was proposed by Microsoft and if you look to",
    "start": "1212500",
    "end": "1217720"
  },
  {
    "text": "the interview miss the annual you just see notice don't use it anymore and it",
    "start": "1217720",
    "end": "1222820"
  },
  {
    "text": "usually happens is deprecated features they're still used not usually used by Microsoft in storage after today the",
    "start": "1222820",
    "end": "1228850"
  },
  {
    "text": "latest windows update will use transactions so let's see some API",
    "start": "1228850",
    "end": "1234970"
  },
  {
    "text": "before we start we just have to a real manual transactions have a special",
    "start": "1234970",
    "end": "1240309"
  },
  {
    "text": "function so they the application here has to be designed to use transactions they they know don't come out of nothing",
    "start": "1240309",
    "end": "1247630"
  },
  {
    "text": "they have we have to create a new action using transaction function we usually end the transaction using transaction a",
    "start": "1247630",
    "end": "1254020"
  },
  {
    "text": "commit or rollback depends on what we want to achieve for functions in the i/o",
    "start": "1254020",
    "end": "1260710"
  },
  {
    "text": "that avoids these file names we have a special function which ends of is",
    "start": "1260710",
    "end": "1265840"
  },
  {
    "text": "transacted a board and the this function in addition to the regular power options",
    "start": "1265840",
    "end": "1272919"
  },
  {
    "text": "takes the one more option which is handle two transactions of the open transaction then we can access the file",
    "start": "1272919",
    "end": "1278350"
  },
  {
    "text": "by its name you inside the transaction and all other functions which watch these file handles we'll just walk work",
    "start": "1278350",
    "end": "1285399"
  },
  {
    "text": "also with transactions so let's see some example in this example we create a",
    "start": "1285399",
    "end": "1290490"
  },
  {
    "text": "transaction we create a file inside the transaction let's say it's a new file we",
    "start": "1290490",
    "end": "1296320"
  },
  {
    "text": "write inside this file and we close the file so if if it would be a regular file and",
    "start": "1296320",
    "end": "1302049"
  },
  {
    "text": "if you would go to the directory with a Microsoft Explorer we will see this we",
    "start": "1302049",
    "end": "1307450"
  },
  {
    "text": "would see this file but because these files created it says the transaction is completely invisible for the application outside the transaction until we commit",
    "start": "1307450",
    "end": "1314200"
  },
  {
    "text": "the transaction so no only now then we commit the transaction the changes can be observed by other applications at the",
    "start": "1314200",
    "end": "1321700"
  },
  {
    "text": "end we have to close the transaction handle you so so what do we have so far we",
    "start": "1321700",
    "end": "1328780"
  },
  {
    "text": "talked about history of evasion techniques we talked about the inner workings of Av scanners and all the",
    "start": "1328780",
    "end": "1334570"
  },
  {
    "text": "different factors to consider when when implementing one we talked about NTFS transactions and you must be wondering",
    "start": "1334570",
    "end": "1341350"
  },
  {
    "text": "what's next well naturally transactions make life very hard for AV vendors now",
    "start": "1341350",
    "end": "1348160"
  },
  {
    "text": "what we want to do is want to leverage this and try to create a process from a transacted file that being said the",
    "start": "1348160",
    "end": "1355420"
  },
  {
    "text": "windows loader as most of us know only accepts the windows process loader only accepts a file path to create a a",
    "start": "1355420",
    "end": "1361890"
  },
  {
    "text": "process and we don't have an API create process transacted so what we're going",
    "start": "1361890",
    "end": "1369220"
  },
  {
    "text": "to do is we're going to try to dive into the process creation process on Windows and try to see if we can find a way to",
    "start": "1369220",
    "end": "1375100"
  },
  {
    "text": "somehow create a process out of a transacted file so comparing the create",
    "start": "1375100",
    "end": "1382540"
  },
  {
    "text": "process function between Windows XP and Windows 10 superficially we get the",
    "start": "1382540",
    "end": "1388990"
  },
  {
    "text": "impression that Microsoft changed completely how processes are created but if you look deeper into it then then you",
    "start": "1388990",
    "end": "1395440"
  },
  {
    "text": "see that Microsoft moved most of the code from the user mode library kernel32 to the NT kernel itself and somehow the",
    "start": "1395440",
    "end": "1403360"
  },
  {
    "text": "function in kernel 32 became longer logically the steps remained mostly the same but let's take a look at the",
    "start": "1403360",
    "end": "1410320"
  },
  {
    "text": "process loader on Windows XP now we're gonna take a look at this in assembly",
    "start": "1410320",
    "end": "1416320"
  },
  {
    "text": "code but for those of you who don't know assembly it's okay the words are pretty clear and I'm going to explain every",
    "start": "1416320",
    "end": "1421720"
  },
  {
    "text": "step as we go along so as we can see the first step is we call an internal routine which goes on to open the file",
    "start": "1421720",
    "end": "1429010"
  },
  {
    "text": "so we open the file here we with a few permissions that we're asking for the file and if that fails then we try to",
    "start": "1429010",
    "end": "1437020"
  },
  {
    "text": "open the file again with less permissions which is I guess something that all of us do in our code sometimes",
    "start": "1437020",
    "end": "1442620"
  },
  {
    "text": "at this point we create a section section is an object that can be later mapped into memory now the thing to note",
    "start": "1442620",
    "end": "1449560"
  },
  {
    "text": "here is that the type of allocation is SEC image while the page Protection is",
    "start": "1449560",
    "end": "1455680"
  },
  {
    "text": "page execute now as Eugene said before this is how the windows loader does it but nothing prevents an attacker from",
    "start": "1455680",
    "end": "1462520"
  },
  {
    "text": "passing a parameter of section of section paid protection of page read only which could cause the antivirus to",
    "start": "1462520",
    "end": "1469240"
  },
  {
    "text": "skip the scan altogether at this point we call the kernel to create the process",
    "start": "1469240",
    "end": "1475600"
  },
  {
    "text": "object to create the new process now the thing to note here is that we use the",
    "start": "1475600",
    "end": "1481480"
  },
  {
    "text": "section handle that we opened before so the steps are we create the file we create the section and then we create",
    "start": "1481480",
    "end": "1487809"
  },
  {
    "text": "the process from the section so the file has already been opened at this point",
    "start": "1487809",
    "end": "1494040"
  },
  {
    "text": "now the kernel what it does is creates the process object using the create object routine of the object manager and",
    "start": "1494550",
    "end": "1501820"
  },
  {
    "text": "then adds the process to the list of running processes at this point we move",
    "start": "1501820",
    "end": "1508270"
  },
  {
    "text": "on to talk about something called the process parameters now process parameters are a structure that every",
    "start": "1508270",
    "end": "1514840"
  },
  {
    "text": "process has on Windows and it's crucial for the ability of the process to run without this process cannot run and it",
    "start": "1514840",
    "end": "1521140"
  },
  {
    "text": "contains it contains stuff like the command line of the process and that kind of thing now at this point on",
    "start": "1521140",
    "end": "1528580"
  },
  {
    "text": "Windows XP we can see that we have a subroutine called base push process parameters which what it does is it",
    "start": "1528580",
    "end": "1534790"
  },
  {
    "text": "creates the process parameters allocates memory in the new process for the",
    "start": "1534790",
    "end": "1541030"
  },
  {
    "text": "parameters copies the parameters to the target process to the newly created",
    "start": "1541030",
    "end": "1546160"
  },
  {
    "text": "process and then finally sets the address of the parameters in the process environment block now the important",
    "start": "1546160",
    "end": "1554110"
  },
  {
    "text": "thing to note here is this happens after the process is created and it's implemented entirely in user mode and",
    "start": "1554110",
    "end": "1559300"
  },
  {
    "text": "we'll see why this is different in just a second when we take a look at Windows 10 at this point we create the thread",
    "start": "1559300",
    "end": "1565690"
  },
  {
    "text": "for the process the main thread and if the flag specified we resume the execution of the thread and that's it",
    "start": "1565690",
    "end": "1573670"
  },
  {
    "text": "for Windows XP now if we compare this to Windows 10 we still have the same subroutine that's inside and we can note",
    "start": "1573670",
    "end": "1580570"
  },
  {
    "text": "that the first thing that happens here is that the the first function that's",
    "start": "1580570",
    "end": "1585970"
  },
  {
    "text": "called is base create process parameters which creates the parameters we can see the parameters being created and filled",
    "start": "1585970",
    "end": "1592150"
  },
  {
    "text": "out some data but this happens before opening file before creating the section",
    "start": "1592150",
    "end": "1597369"
  },
  {
    "text": "before a process even exists at this point we call this new system call it's not that new it was introduced in",
    "start": "1597369",
    "end": "1603159"
  },
  {
    "text": "Windows Vista but it's this this suburb",
    "start": "1603159",
    "end": "1608379"
  },
  {
    "text": "tested this system called called anti create user process is does not accept a section handle like the one in Windows",
    "start": "1608379",
    "end": "1614799"
  },
  {
    "text": "XP did it actually expects a file path and the kernel opens the path for us the",
    "start": "1614799",
    "end": "1621519"
  },
  {
    "text": "other thing to note here is that the process parameters are being passed to the kernel as opposed to Windows XP when",
    "start": "1621519",
    "end": "1627100"
  },
  {
    "text": "this was copied post process creation in the user space code so if we take a look",
    "start": "1627100",
    "end": "1634149"
  },
  {
    "text": "at the kernel routine we can see that we try to open the file in kernel as opposed to Windows XP when it was a user",
    "start": "1634149",
    "end": "1639940"
  },
  {
    "text": "mode if it fails then we try again of course well then we create the section",
    "start": "1639940",
    "end": "1645039"
  },
  {
    "text": "just like in Windows XP except now it's happening in kernel at this point we copied the process parameters from user",
    "start": "1645039",
    "end": "1651279"
  },
  {
    "text": "mode to kernel mode and then we move on to call the allocate process routine",
    "start": "1651279",
    "end": "1656440"
  },
  {
    "text": "which again calls the create object routine to create the actual process object allocates virtual memory for the",
    "start": "1656440",
    "end": "1665499"
  },
  {
    "text": "process parameters copies the parameters to the new process and then sets the",
    "start": "1665499",
    "end": "1672489"
  },
  {
    "text": "value in the process environment block from this point on there's not much left",
    "start": "1672489",
    "end": "1678850"
  },
  {
    "text": "we are allocating the main thread we insert the main the process and thread",
    "start": "1678850",
    "end": "1684460"
  },
  {
    "text": "into their respective lists at this point the process create notify routine that Eugene mentioned earlier is called",
    "start": "1684460",
    "end": "1690909"
  },
  {
    "text": "and we leave the kernel and if we need to we resumed the thread according to",
    "start": "1690909",
    "end": "1696249"
  },
  {
    "text": "the creation flag specified okay so to",
    "start": "1696249",
    "end": "1704289"
  },
  {
    "text": "highlight the main differences in Windows 10 we have anti create user",
    "start": "1704289",
    "end": "1709509"
  },
  {
    "text": "process being used instead of anti create process the X now NT create process CX receives a handle to a",
    "start": "1709509",
    "end": "1715059"
  },
  {
    "text": "section while NT create user process receives a file path luckily for us and",
    "start": "1715059",
    "end": "1721330"
  },
  {
    "text": "to create processing X is still available in the latest Windows 10 least because it's used in the creation",
    "start": "1721330",
    "end": "1727870"
  },
  {
    "text": "of minimal processes which is a bit beyond the scope of this talk now the",
    "start": "1727870",
    "end": "1733060"
  },
  {
    "text": "only thing is unfortunately the all the supporting user mode code that we had an XP is no longer available for us so what",
    "start": "1733060",
    "end": "1739240"
  },
  {
    "text": "we need to do is we need to implement the the heavy lifting on our own by ourselves by creating it ourselves let's",
    "start": "1739240",
    "end": "1747550"
  },
  {
    "text": "talk about doppelganger so our goal here is to load and execute an arbitrary",
    "start": "1747550",
    "end": "1753430"
  },
  {
    "text": "executable inside the context of a legitimate process and we want to use none of the suspicious process hollowing",
    "start": "1753430",
    "end": "1759700"
  },
  {
    "text": "API calls such as an map view of section virtual protect set third context APCs and that kind of thing we want a visa to",
    "start": "1759700",
    "end": "1767080"
  },
  {
    "text": "scan only clean files or to not even scan us at all and we don't want to be discovered by advanced forensics tools",
    "start": "1767080",
    "end": "1774810"
  },
  {
    "text": "so we break doppelganger into four steps step number one transact step number two",
    "start": "1774810",
    "end": "1780850"
  },
  {
    "text": "load step number three rollback and step number four animate which brings the doppelganger to life let's take a look",
    "start": "1780850",
    "end": "1788560"
  },
  {
    "text": "at step number one transact first off we create a transaction just in the example",
    "start": "1788560",
    "end": "1793750"
  },
  {
    "text": "that Eugene showed before with a simple transaction aware application at this point we open a file that is a",
    "start": "1793750",
    "end": "1801550"
  },
  {
    "text": "legitimate file such as SVC host inside of a transaction so we have a nice green clean looking file object that we just",
    "start": "1801550",
    "end": "1808420"
  },
  {
    "text": "opened and it's open inside of a transaction what we're gonna do now is we're going to overwrite the file inside",
    "start": "1808420",
    "end": "1814210"
  },
  {
    "text": "of a transaction and now it's tainted with malicious code the only thing to note here is that anyone looking at this",
    "start": "1814210",
    "end": "1821530"
  },
  {
    "text": "file from the outside doesn't see our changes they're reflected only within the context of the transaction context",
    "start": "1821530",
    "end": "1828900"
  },
  {
    "text": "step number two load what we do at this point is we create a memory section from",
    "start": "1828900",
    "end": "1834190"
  },
  {
    "text": "the tainted file and so we have a newly allocated section object that contains",
    "start": "1834190",
    "end": "1840940"
  },
  {
    "text": "all the malicious code that we wrote to the file at this point we can move on to rollback",
    "start": "1840940",
    "end": "1846490"
  },
  {
    "text": "which is as we talked about before when you're working with transactions when you're done you need to decide if you",
    "start": "1846490",
    "end": "1852610"
  },
  {
    "text": "want to commit the transaction and save the files to the disk or if you want to roll them back because you ran in some kind of error in our example we",
    "start": "1852610",
    "end": "1859480"
  },
  {
    "text": "have no interest in committing the transaction because we don't want anybody to see the changes we made to the file so what we're going to do here",
    "start": "1859480",
    "end": "1866410"
  },
  {
    "text": "is we're gonna roll back the transaction the file becomes green again and clean and this really effectively removes all",
    "start": "1866410",
    "end": "1872320"
  },
  {
    "text": "of our rights from the file system now we move on to step number four animate",
    "start": "1872320",
    "end": "1879610"
  },
  {
    "text": "using the details we found out before from examining the windows process loader we can call the NT create process",
    "start": "1879610",
    "end": "1888670"
  },
  {
    "text": "the X routine that was used in Windows XP to create a process from the section that is create that we created and so",
    "start": "1888670",
    "end": "1895450"
  },
  {
    "text": "once we do that we now have a green process a nice clean looking process that's running our or hosting our",
    "start": "1895450",
    "end": "1901930"
  },
  {
    "text": "malicious X section at this point we create the thread of the for the main",
    "start": "1901930",
    "end": "1907690"
  },
  {
    "text": "the main thread and we move on to do all the heavy lifting that we need to do that Windows XP s user time libraries",
    "start": "1907690",
    "end": "1914320"
  },
  {
    "text": "libraries used to do for us which is to create the process parameters to fill them up with to fill them out with the",
    "start": "1914320",
    "end": "1920320"
  },
  {
    "text": "correct correct parameters to allocate memory for the parameters to copy it",
    "start": "1920320",
    "end": "1926650"
  },
  {
    "text": "into the doppelganger process and then to set it in the PB of the doppelganger and then finally all that's left to do",
    "start": "1926650",
    "end": "1934750"
  },
  {
    "text": "is resume the execution run the process and now we have a nice green process",
    "start": "1934750",
    "end": "1941020"
  },
  {
    "text": "that's running and the Avs will not take a look at it so let's see this live in a demo",
    "start": "1941020",
    "end": "1947850"
  },
  {
    "text": "I have here a virtual machine that as you can see it's running Windows Defender on the very updated definitions",
    "start": "1953910",
    "end": "1963060"
  },
  {
    "text": "December 7th that's today and what I'm gonna do here is we have this password",
    "start": "1963060",
    "end": "1968940"
  },
  {
    "text": "dumping tool that's should be well known to everyone and well we don't really",
    "start": "1968940",
    "end": "1973980"
  },
  {
    "text": "think this is a hacking tool on our own or on its own Windows Defender seems to",
    "start": "1973980",
    "end": "1979320"
  },
  {
    "text": "think so so let's try to double click it and see what happens",
    "start": "1979320",
    "end": "1983240"
  },
  {
    "text": "virus and threat protection threats found so Windows Defender found threats",
    "start": "1984920",
    "end": "1990980"
  },
  {
    "text": "obviously the executable did not run now what we're going to try to do is we're going to create a doppelganger of",
    "start": "1990980",
    "end": "1997610"
  },
  {
    "text": "mspaint which is the windows utility for making nice little drawings and we're",
    "start": "1997610",
    "end": "2004070"
  },
  {
    "text": "gonna have this actually execute the same tool except this time it's going to",
    "start": "2004070",
    "end": "2010730"
  },
  {
    "text": "read the tool from disk in an encrypted form so that defender cannot scan it and",
    "start": "2010730",
    "end": "2016250"
  },
  {
    "text": "let's see if defender has any problems with this with this action at this point",
    "start": "2016250",
    "end": "2022730"
  },
  {
    "text": "the tool was executed this is a fully functional tool it can be used and as you can see Windows Defender doesn't",
    "start": "2022730",
    "end": "2029150"
  },
  {
    "text": "seem to mind process Explorer can help us take a look at what's going on here",
    "start": "2029150",
    "end": "2034970"
  },
  {
    "text": "maybe we can figure out if we take a look and take a look at the process we can see that we have mspaint running and",
    "start": "2034970",
    "end": "2042100"
  },
  {
    "text": "there's nothing here showing us that it's actually a different tool that's",
    "start": "2042100",
    "end": "2047600"
  },
  {
    "text": "being hosted inside this process it actually even preserved the icon which is really interesting if we even try to",
    "start": "2047600",
    "end": "2053120"
  },
  {
    "text": "verify it'll say that the this is verified that's really nice",
    "start": "2053120",
    "end": "2058919"
  },
  {
    "text": "[Applause]",
    "start": "2058920",
    "end": "2061989"
  },
  {
    "text": "thank you so while conducting this research the",
    "start": "2064230",
    "end": "2069819"
  },
  {
    "text": "first time this thing we ran this thing I'm Windows 7 and network just fine and",
    "start": "2069819",
    "end": "2076059"
  },
  {
    "text": "then we ran it on Windows 10 and the system crashed and so it turns out that there is a bug that was introduced in",
    "start": "2076059",
    "end": "2081158"
  },
  {
    "text": "Windows redstone and reported by James first raw and its null pointer to reference so the empty create process",
    "start": "2081159",
    "end": "2087158"
  },
  {
    "text": "the X when it receives a zero is one of the parameters it tries to dereference it without checking first and so the",
    "start": "2087159",
    "end": "2093039"
  },
  {
    "text": "system crashes for for an access violation and luckily for us though",
    "start": "2093039",
    "end": "2098740"
  },
  {
    "text": "Microsoft was nice enough to fix it for this talk because if the bug was introduced in redstone a while back and",
    "start": "2098740",
    "end": "2106210"
  },
  {
    "text": "fixed in the fall of craters update two months ago so if this lecture was taking place two months ago we couldn't do it",
    "start": "2106210",
    "end": "2111730"
  },
  {
    "text": "on the most recent Windows 10 release but now we can so thanks the affected",
    "start": "2111730",
    "end": "2119140"
  },
  {
    "text": "products of process doppelganger are the following that we tested we tested all these they were all bypassed what we did",
    "start": "2119140",
    "end": "2125799"
  },
  {
    "text": "is we took the executable such as the tool we showed before we saw that the antivirus Flags this as an executable",
    "start": "2125799",
    "end": "2132880"
  },
  {
    "text": "when we double-click it then we loaded it as a doppelganger and it was able to run with no problems if you want to talk",
    "start": "2132880",
    "end": "2140529"
  },
  {
    "text": "detection and prevention then first of all it's not so easy but a simple way to",
    "start": "2140529",
    "end": "2146740"
  },
  {
    "text": "go about this is to scan the file object available in the create process",
    "start": "2146740",
    "end": "2151869"
  },
  {
    "text": "notification routine and to use the exact object not to reopen the file and if you get an error while trying to do",
    "start": "2151869",
    "end": "2157329"
  },
  {
    "text": "it then you know doppelganger is taking place so you could you should block it about DLL files this doesn't help so",
    "start": "2157329",
    "end": "2165460"
  },
  {
    "text": "what you can do here is try to scan all sections even data sections because as we saw the flag is in the mini filter",
    "start": "2165460",
    "end": "2170920"
  },
  {
    "text": "callback are are actually misleading as for forensics if you want to detect the",
    "start": "2170920",
    "end": "2177670"
  },
  {
    "text": "process in retrospect that has been doppelganger you can take a look at the file object of the associate with the",
    "start": "2177670",
    "end": "2185200"
  },
  {
    "text": "process and if it has the right access enabled then then you can know that something fishy is going on here and",
    "start": "2185200",
    "end": "2191859"
  },
  {
    "text": "there's a good chance it's process hot process doppelganger and also specifically on Windows 10 the",
    "start": "2191859",
    "end": "2197780"
  },
  {
    "text": "II process structure has something called the image file pointer which is supposed to point to the file object and this doesn't this will be null in a",
    "start": "2197780",
    "end": "2204170"
  },
  {
    "text": "doppelganger process to sum up process",
    "start": "2204170",
    "end": "2211010"
  },
  {
    "text": "doppelganger allows us to take a malicious executable load it in the context of a legitimate looking file and",
    "start": "2211010",
    "end": "2217490"
  },
  {
    "text": "create a process out of it we use the Windows loader right so there's no need",
    "start": "2217490",
    "end": "2223670"
  },
  {
    "text": "for a custom reflective loader of any sort the file is mapped to an image file",
    "start": "2223670",
    "end": "2228770"
  },
  {
    "text": "correctly on disk just like any legit process and we don't have any of the unman unmapped dynamically generated",
    "start": "2228770",
    "end": "2235760"
  },
  {
    "text": "runtime code that is the that is usually associated with modern malware and is detected by modern solutions this can be",
    "start": "2235760",
    "end": "2242840"
  },
  {
    "text": "used to can be leveraged to doppelgänger ll files as well and it's completely file s and even advanced",
    "start": "2242840",
    "end": "2250820"
  },
  {
    "text": "forensics tools such as volatility won't detect it at this point this works on",
    "start": "2250820",
    "end": "2256070"
  },
  {
    "text": "all Windows versions starting Vista and bypasses all these solutions that we tested the security solutions we'd like",
    "start": "2256070",
    "end": "2263210"
  },
  {
    "text": "to give a special thanks to am remiss give and Budhia vote who helped us a lot with this research and without them it",
    "start": "2263210",
    "end": "2269390"
  },
  {
    "text": "wouldn't be possible so thank you guys and thank you all for coming and listening and at this point if you have",
    "start": "2269390",
    "end": "2275960"
  },
  {
    "text": "any questions we'd love to address them",
    "start": "2275960",
    "end": "2279310"
  },
  {
    "text": "[Applause] all right what are the question that you",
    "start": "2284180",
    "end": "2292099"
  },
  {
    "text": "would like to ask them",
    "start": "2292099",
    "end": "2295059"
  },
  {
    "text": "thank you for the talk I have one question just to double-check if I understand correctly with this technique",
    "start": "2302730",
    "end": "2309660"
  },
  {
    "text": "when you execute the malicious code it will have all the privileges the process",
    "start": "2309660",
    "end": "2316349"
  },
  {
    "text": "you are using for that will normally have right so for example if that was the MS paint and I'm executing my",
    "start": "2316349",
    "end": "2322680"
  },
  {
    "text": "mother's code it will be able to do anything which the the MS paint process would be able to do is that correct yeah",
    "start": "2322680",
    "end": "2329339"
  },
  {
    "text": "yeah it's running with like Emma's paint the process gets the token just like Emma's paint but it all depends in",
    "start": "2329339",
    "end": "2335670"
  },
  {
    "text": "Windows on the context on which the process was created so if it was created by an unprivileged process then it won't",
    "start": "2335670",
    "end": "2342270"
  },
  {
    "text": "have privileges was created by a privileged process then it could do anything thank you next question",
    "start": "2342270",
    "end": "2353359"
  },
  {
    "text": "cents for presentation I just have an equation do you guys investigate it like",
    "start": "2361420",
    "end": "2366940"
  },
  {
    "text": "this transactions API that you used on Windows I doesn't have any kind of",
    "start": "2366940",
    "end": "2372370"
  },
  {
    "text": "memory implications so like we we agreed while on transaction should be created somewhere right so maybe Z's like",
    "start": "2372370",
    "end": "2379640"
  },
  {
    "text": "implications are detectable okay so that is they're actually written to choose",
    "start": "2379640",
    "end": "2386630"
  },
  {
    "text": "the file system in special files and the details of this can be read about online",
    "start": "2386630",
    "end": "2392570"
  },
  {
    "text": "on MSDN it's documented hello my",
    "start": "2392570",
    "end": "2404000"
  },
  {
    "text": "question is what about access rights is are the the rights checked just after",
    "start": "2404000",
    "end": "2411110"
  },
  {
    "text": "committing or at the beginning of the create transacted file can you spoof also a process that is",
    "start": "2411110",
    "end": "2419330"
  },
  {
    "text": "unavailable to you yeah I don't follow all right the binary there there was an",
    "start": "2419330",
    "end": "2425630"
  },
  {
    "text": "example about svchost.exe yes what if",
    "start": "2425630",
    "end": "2431180"
  },
  {
    "text": "it's a protected process that's unavailable to for example you don't have rights to read it as you mean on",
    "start": "2431180",
    "end": "2438620"
  },
  {
    "text": "the file system level yeah yeah I don't have access to it so no if I can't open the file then I can't do anything to it",
    "start": "2438620",
    "end": "2444140"
  },
  {
    "text": "yeah but in theory I could just copy the file somewhere and then and then do it from there okay thanks",
    "start": "2444140",
    "end": "2451900"
  },
  {
    "text": "anyone else has a question",
    "start": "2460930",
    "end": "2464970"
  },
  {
    "text": "thanks for attack what about code signing and executive signings are like",
    "start": "2474630",
    "end": "2482460"
  },
  {
    "text": "certificates for for executive executive battles sorry so as we saw in the demo",
    "start": "2482460",
    "end": "2490360"
  },
  {
    "text": "if you took a look in process Explorer for example which tries to verify the digital signature of the process that's",
    "start": "2490360",
    "end": "2497800"
  },
  {
    "text": "being executed so it looks legitimate but if you take a look in memory at what's running if you investigate this",
    "start": "2497800",
    "end": "2503230"
  },
  {
    "text": "at runtime then then obviously you'll be able to tell that something happened so like the signature will not match",
    "start": "2503230",
    "end": "2512580"
  },
  {
    "text": "we still have time if you have any other questions then before your lecture one",
    "start": "2518860",
    "end": "2531310"
  },
  {
    "text": "question about do the up locker prevent this those the app Locker check the",
    "start": "2531310",
    "end": "2538870"
  },
  {
    "text": "memory contents or those very violent discs so that's a good question and I",
    "start": "2538870",
    "end": "2545080"
  },
  {
    "text": "actually not sure about that because we didn't take a look at app Locker and this and this research we mostly focused",
    "start": "2545080",
    "end": "2551530"
  },
  {
    "text": "on on bypassing security solutions by seeing that they don't the in correctly",
    "start": "2551530",
    "end": "2557830"
  },
  {
    "text": "handled transactions so I don't have the answer for that next question",
    "start": "2557830",
    "end": "2567359"
  },
  {
    "text": "we still have the means",
    "start": "2574450",
    "end": "2577950"
  },
  {
    "text": "I was wondering have you gotten any response on this from Microsoft is it",
    "start": "2585349",
    "end": "2592700"
  },
  {
    "text": "will it be patched somehow so we've actually disclosed this to Microsoft and",
    "start": "2592700",
    "end": "2598460"
  },
  {
    "text": "they didn't deem it as a vulnerability which it's not the operating system is behaving as it should the only thing the",
    "start": "2598460",
    "end": "2605720"
  },
  {
    "text": "only thing here maybe that they could they could change is to add in the mini filter called back you could you could",
    "start": "2605720",
    "end": "2612200"
  },
  {
    "text": "tell the antivirus that a section is being created for execution even when you can kind of fool it into skipping",
    "start": "2612200",
    "end": "2618950"
  },
  {
    "text": "that but other than that there's not much Microsoft could or should be doing it's the anti viruses who should handle",
    "start": "2618950",
    "end": "2624979"
  },
  {
    "text": "transaction correctly thank you",
    "start": "2624979",
    "end": "2630160"
  },
  {
    "text": "so to that point about Microsoft not considering this vulnerability are there",
    "start": "2636690",
    "end": "2642119"
  },
  {
    "text": "legitimate cases where you would use transactions here for creating executables so that that should really",
    "start": "2642119",
    "end": "2650430"
  },
  {
    "text": "it shouldn't happen because as we saw the the Windows process loader the",
    "start": "2650430",
    "end": "2656640"
  },
  {
    "text": "official exported API it only accepts file paths there's no way to run a file out of a",
    "start": "2656640",
    "end": "2664109"
  },
  {
    "text": "transaction it's only using the system calls directly that enables us to create a process from from a handle if we take",
    "start": "2664109",
    "end": "2670950"
  },
  {
    "text": "the handle to a file we create a section then from the section we create the process but that is something that the",
    "start": "2670950",
    "end": "2675990"
  },
  {
    "text": "Windows loader is in charge of doing and as you saw in Windows 10 is no longer even happens and user mode it happens in",
    "start": "2675990",
    "end": "2681690"
  },
  {
    "text": "kernel mode it's just that the the old system call is still available ok so",
    "start": "2681690",
    "end": "2688079"
  },
  {
    "text": "then the real question is why do they persist that old method flat why does it still exist yeah so it's a bit beyond",
    "start": "2688079",
    "end": "2694920"
  },
  {
    "text": "this scope but the general idea is that NT create user process creates a proper Windows process while NT create process",
    "start": "2694920",
    "end": "2702900"
  },
  {
    "text": "is just a relatively much thinner wrapper around the function that creates",
    "start": "2702900",
    "end": "2708270"
  },
  {
    "text": "the object of a process and so it can be used to create a minimal process which doesn't have a lot of things that a",
    "start": "2708270",
    "end": "2714569"
  },
  {
    "text": "normal process does and it can be used in running things like other subsystems",
    "start": "2714569",
    "end": "2720420"
  },
  {
    "text": "on Windows such as for example the wsl the Windows system over Linux which can",
    "start": "2720420",
    "end": "2726029"
  },
  {
    "text": "be used to create these types of processes which are not normal Windows processes thank you next question",
    "start": "2726029",
    "end": "2739490"
  },
  {
    "text": "so this is a follow-up question of a question that was asked before so they",
    "start": "2750469",
    "end": "2757489"
  },
  {
    "text": "asked you for a reaction from Microsoft but did you get also some reaction from the antivirus software companies yeah so",
    "start": "2757489",
    "end": "2765430"
  },
  {
    "text": "antivirus software companies have been aware of this issue it's it's online if you look up Antivirus Plus transactions",
    "start": "2765430",
    "end": "2772369"
  },
  {
    "text": "you'll see that it's a known fact that they don't handle transactions correctly they're aware of this issue they just",
    "start": "2772369",
    "end": "2778400"
  },
  {
    "text": "haven't taken care of it yet and that's what we're trying to show here is that",
    "start": "2778400",
    "end": "2784009"
  },
  {
    "text": "even 11 years after this feature was introduced fully documented and and and",
    "start": "2784009",
    "end": "2789890"
  },
  {
    "text": "people have discussed online that that anti viruses don't handle the transaction as well still 11 years later",
    "start": "2789890",
    "end": "2797450"
  },
  {
    "text": "and all the anti viruses can be bypassed using this technique",
    "start": "2797450",
    "end": "2803710"
  },
  {
    "text": "that anyone else has a question",
    "start": "2817050",
    "end": "2820790"
  },
  {
    "text": "thanks for your talk um I was wondering if this could be used in a way with exact rules which elevate automatically",
    "start": "2834450",
    "end": "2841740"
  },
  {
    "text": "which are signed by Microsoft so say you pass the parameter of a processbook for example in your example when you pass a",
    "start": "2841740",
    "end": "2847800"
  },
  {
    "text": "parameter for acceptable that you want to elevate and you said inherits this visit the security descriptor fell",
    "start": "2847800",
    "end": "2854280"
  },
  {
    "text": "through the process which you the post process so could that be used for like process elevation or yeah so you're",
    "start": "2854280",
    "end": "2861180"
  },
  {
    "text": "talking about Auto elevating processes right yeah that's a very good question",
    "start": "2861180",
    "end": "2866250"
  },
  {
    "text": "and it's something that actually we've dealt with in the past you can see on",
    "start": "2866250",
    "end": "2871650"
  },
  {
    "text": "breaking malware on her blog we we actually did some USU AC bypasses using",
    "start": "2871650",
    "end": "2877410"
  },
  {
    "text": "exactly what we did specifically as we used a Auto elevating process and we",
    "start": "2877410",
    "end": "2883290"
  },
  {
    "text": "changed the environment for it so it loads our DLL but so this could actually be potentially used for this but it's we",
    "start": "2883290",
    "end": "2890070"
  },
  {
    "text": "haven't gotten around to to testing that yet but it's on our to-do list our thank you",
    "start": "2890070",
    "end": "2896990"
  },
  {
    "text": "if you still have a question we still have time yes yeah you still have time",
    "start": "2912330",
    "end": "2920070"
  },
  {
    "text": "guys yet",
    "start": "2920070",
    "end": "2922580"
  },
  {
    "text": "[Applause]",
    "start": "2928370",
    "end": "2932090"
  }
]