[
  {
    "start": "0",
    "end": "123000"
  },
  {
    "text": "thanks everyone for coming over to listen to our presentation today and",
    "start": "420",
    "end": "5640"
  },
  {
    "text": "thank you black hat for having us this is indeed a great pleasure to be here with you so if you are here",
    "start": "5640",
    "end": "11940"
  },
  {
    "text": "I already assume that you have been you already know what VMware Workstation and fusion is so we have been exploring",
    "start": "11940",
    "end": "18990"
  },
  {
    "text": "vulnerabilities in VMware and VMware patches for a while now and the presentation title the great escape so",
    "start": "18990",
    "end": "24330"
  },
  {
    "text": "via are kind of summarizes our findings and what all days to host escape attacks we have seen in the recent past so we",
    "start": "24330",
    "end": "31710"
  },
  {
    "text": "have pretty much lot of content to share with you today and with some demos so what we will try to do we will try to push the demos to the end of our",
    "start": "31710",
    "end": "37680"
  },
  {
    "text": "presentation so that we are we are good with the timings so this is about me my",
    "start": "37680",
    "end": "45180"
  },
  {
    "text": "name is - I am currently working in makka philips IPS vulnerability system as a part of the team my primary job is",
    "start": "45180",
    "end": "51180"
  },
  {
    "text": "to kind of find new attacks and provide mitigation for them and this is my",
    "start": "51180",
    "end": "59129"
  },
  {
    "text": "colleague yeah cool can you please hello everyone i'm also my name is Jacqueline John and I'm also a speedy researcher",
    "start": "59129",
    "end": "65850"
  },
  {
    "text": "from McAfee IPS Ron ability 13 I was somehow and that is in the power of past",
    "start": "65850",
    "end": "71970"
  },
  {
    "text": "a few years now I am focusing on software and I didn't ask colonel security you can find me on",
    "start": "71970",
    "end": "77790"
  },
  {
    "text": "Twitter thing thanks a cool so this is the agent of our talk today will will",
    "start": "77790",
    "end": "84330"
  },
  {
    "text": "quickly start with why we started this research what was the motivation behind doing this VM our patch analysis that we",
    "start": "84330",
    "end": "90689"
  },
  {
    "text": "have been doing for past one year so after that we are going to quickly jump into the most popular attack surfaces",
    "start": "90689",
    "end": "97049"
  },
  {
    "text": "that we have seen that has been targeted by vulnerability researchers to perform guest to host escapes after that into",
    "start": "97049",
    "end": "103049"
  },
  {
    "text": "this talk we are going to basically three attack surfaces the first one is the RPC the second one is the virtual printer",
    "start": "103049",
    "end": "108240"
  },
  {
    "text": "attack surface and after that we are going to move to the graphics components of vmware and after that we'll be",
    "start": "108240",
    "end": "114299"
  },
  {
    "text": "finishing our talk with the vulnerability trend analysis of vm r that we have seen and that we may see in",
    "start": "114299",
    "end": "119939"
  },
  {
    "text": "the near future so vm escape is something that scares all",
    "start": "119939",
    "end": "125280"
  },
  {
    "start": "123000",
    "end": "123000"
  },
  {
    "text": "of us if you are someone who is dealing with untrusted code on a daily basis there cannot be anything more scarier",
    "start": "125280",
    "end": "130319"
  },
  {
    "text": "than vm escape so as you all know that vm humor is a kind of a sophisticated piece",
    "start": "130319",
    "end": "135840"
  },
  {
    "text": "of software and when it comes to understanding the internals and security implementation of any huge software",
    "start": "135840",
    "end": "141420"
  },
  {
    "text": "beginning is probably always the hardest because you don't have any port of entry you don't know where to get started from",
    "start": "141420",
    "end": "146820"
  },
  {
    "text": "so we have seen that VMware has been targeted in many exploitation contests in the recent past and and what we have",
    "start": "146820",
    "end": "154500"
  },
  {
    "text": "seen in after the contest that most of the details are not even available to public so the successful exploits were",
    "start": "154500",
    "end": "162000"
  },
  {
    "text": "demonstrated but the details were not public so the our VMs story kind of started in November 2016 when in the in",
    "start": "162000",
    "end": "169770"
  },
  {
    "text": "when VMware exploitation was exploited twice I guess if I'm not wrong in the pond fest exploitation contest and to",
    "start": "169770",
    "end": "177240"
  },
  {
    "text": "successful exploits where I demonstrated so we won't say security actually acted",
    "start": "177240",
    "end": "182490"
  },
  {
    "text": "really fast and they have release patches for those vulnerabilities so we actually thought probably we can the it",
    "start": "182490",
    "end": "189870"
  },
  {
    "text": "was right time to do some performer binary dipping and patch defeat to the patches because if you do binary",
    "start": "189870",
    "end": "195360"
  },
  {
    "text": "difficult patch dipping so it it doesn't only give you a port of entry to a huge software but it also takes you to the",
    "start": "195360",
    "end": "201570"
  },
  {
    "text": "software components that matters the most and the best thing about post exploitation context patches are they",
    "start": "201570",
    "end": "207690"
  },
  {
    "text": "will be mostly having security fixes they are free from any functional or design changes so we thought probably",
    "start": "207690",
    "end": "213330"
  },
  {
    "text": "that was the right time to get started with it so when we at the very early",
    "start": "213330",
    "end": "218850"
  },
  {
    "text": "stage of our research what we started doing we we wanted to find out the most popular components of via mod that has",
    "start": "218850",
    "end": "225840"
  },
  {
    "text": "been targeted so we started analyzing the advisory that VMR publishes and and",
    "start": "225840",
    "end": "231060"
  },
  {
    "text": "this is what we have come up with the advisories are mostly not very technical but but it will have some component",
    "start": "231060",
    "end": "237810"
  },
  {
    "text": "details which it was affecting which component so we have seen some vulnerabilities in SVG component which",
    "start": "237810",
    "end": "243810"
  },
  {
    "text": "is the graphics of VMware Workstation and we did see some issues getting fixed in our PC here and we have seen some",
    "start": "243810",
    "end": "250980"
  },
  {
    "text": "issues getting fixed in virtual printer as well we did see some other issues but the numbers were not too much so in this",
    "start": "250980",
    "end": "257549"
  },
  {
    "text": "presentation we are going to discuss the major one so we have seen that vm our",
    "start": "257549",
    "end": "263430"
  },
  {
    "text": "work station and fusions shares most of the core functionalities whenever any patch was applied to",
    "start": "263430",
    "end": "268780"
  },
  {
    "text": "workstation it was getting applied to fusion as well but some of the vulnerability that we're going to",
    "start": "268780",
    "end": "274000"
  },
  {
    "text": "demonstrate today we're mostly we'll showcase in workstation but they will be they were they were affecting fusion as",
    "start": "274000",
    "end": "279940"
  },
  {
    "text": "well so these are as I have already said these are the three attack surfaces we",
    "start": "279940",
    "end": "284980"
  },
  {
    "start": "281000",
    "end": "281000"
  },
  {
    "text": "are going to cover in today's presentation so we are going to start with the RPC so so the guest operating",
    "start": "284980",
    "end": "291520"
  },
  {
    "text": "system and the host operating system has to communicate with each other for a lot of reasons so if I have to if I have to",
    "start": "291520",
    "end": "297550"
  },
  {
    "text": "define the via RPC in single sentence it will be like it can be considered as a communication channel that is used by",
    "start": "297550",
    "end": "303550"
  },
  {
    "text": "guest operating system and host operating system to communicate with each other so if you're familiar with vm",
    "start": "303550",
    "end": "309850"
  },
  {
    "start": "308000",
    "end": "308000"
  },
  {
    "text": "tools vmware you must be familiar with a tool called vm tools that you usually",
    "start": "309850",
    "end": "314890"
  },
  {
    "text": "install inside the guest operating system so this is a tiny piece of software that you install inside the guest operating system and it makes you",
    "start": "314890",
    "end": "321700"
  },
  {
    "text": "life lot easier by by bringing lot of features like file folders sharing between guest and host the clipboard",
    "start": "321700",
    "end": "329200"
  },
  {
    "text": "sharing drag-and-drop copy paste and clock synchronization and there are many features so most of these features",
    "start": "329200",
    "end": "335980"
  },
  {
    "text": "actually need smooth communication between guest and host so vehicles actually makes use of RPC channel to",
    "start": "335980",
    "end": "341590"
  },
  {
    "text": "enable many of these VM pool features in the guest operating system so once you install VM tools what you see in a new",
    "start": "341590",
    "end": "348340"
  },
  {
    "text": "process get started every time the test boots up the process name is VM tools D dot exe so this process is actually",
    "start": "348340",
    "end": "356140"
  },
  {
    "text": "responsible for interacting with the RPC channel and do some stuffs that the improved rings so when talking about",
    "start": "356140",
    "end": "364000"
  },
  {
    "start": "362000",
    "end": "362000"
  },
  {
    "text": "this starting C mechanism any application inside the guest operating system willing to communicate with that",
    "start": "364000",
    "end": "369160"
  },
  {
    "text": "easy channel has a couple of options to do that to communicate the first option they have is it can directly interact",
    "start": "369160",
    "end": "374980"
  },
  {
    "text": "with the VM backdoor so VM backdoor is a special i/o port specific to VM are we are going to come back to this later on",
    "start": "374980",
    "end": "381370"
  },
  {
    "text": "so the next option it has it can use the existing API is that VM tools provide to",
    "start": "381370",
    "end": "387040"
  },
  {
    "text": "the application so VM tools actually comes with a DLL that is known as VM tools or DLL it exports many ApS that",
    "start": "387040",
    "end": "393670"
  },
  {
    "text": "you can see here these are all mostly RPC related api's so then any application can use this DLL and I",
    "start": "393670",
    "end": "400420"
  },
  {
    "text": "ported API is to communicate with the RTC channel so now let's talk about the",
    "start": "400420",
    "end": "407500"
  },
  {
    "start": "406000",
    "end": "406000"
  },
  {
    "text": "VM backbone so we back door can be considered as the lowest component of RPC implementation in vmware and this is",
    "start": "407500",
    "end": "415330"
  },
  {
    "text": "nothing but a special i hope or the set of assembly instruction that you see here and that has to be executed to be",
    "start": "415330",
    "end": "421960"
  },
  {
    "text": "able to interact with the vm bed bore the here the e^x register is holding the VMware magic bytes and VX will will hold",
    "start": "421960",
    "end": "429880"
  },
  {
    "text": "the command number for guest to host RPC the command has to be set to hex 1e and the eb x will hold the holds the",
    "start": "429880",
    "end": "437980"
  },
  {
    "text": "parameter required for the for the command and edx will hold the VM our i/o",
    "start": "437980",
    "end": "443020"
  },
  {
    "text": "port there are basically two VM our i/o ports five six five eight for the low bandwidth and five six five nine is for",
    "start": "443020",
    "end": "448960"
  },
  {
    "text": "the high bandwidth communication and after that we see a privileged instruction that is called in so this",
    "start": "448960",
    "end": "455230"
  },
  {
    "text": "instruction when execute inside the guest operating system the hypervisor kind of hijacks the control flow and",
    "start": "455230",
    "end": "461370"
  },
  {
    "text": "process the request accordingly so this VM back door actually supports two protocols one is our PCI and TCL oh the",
    "start": "461370",
    "end": "470710"
  },
  {
    "text": "interesting part about the back door is you cannot disable it fully so it doesn't matter if you have VM tools",
    "start": "470710",
    "end": "476170"
  },
  {
    "text": "inside in the your guest operating system or not you cannot disable it fully so we have talked about some of",
    "start": "476170",
    "end": "483550"
  },
  {
    "text": "this feature of their VM will bring inside the guest operating system so to be able to communicate with the host the",
    "start": "483550",
    "end": "489190"
  },
  {
    "text": "guest operating system has to send some command from base to host so the guest operating system usually does this by",
    "start": "489190",
    "end": "494950"
  },
  {
    "text": "sending RPC RPC packet from glass to host as you can see here this is a row",
    "start": "494950",
    "end": "501490"
  },
  {
    "text": "RPC packet we have taken from VM to SD dot exe process so it each and every VC",
    "start": "501490",
    "end": "507700"
  },
  {
    "text": "packet of VMR actually starts with a commands IPC command stream so when the packet is actually received at the host",
    "start": "507700",
    "end": "513940"
  },
  {
    "text": "and the belt on this based on this command the host actually decides how to process the packet so as you can see",
    "start": "513940",
    "end": "521289"
  },
  {
    "text": "here we are actually sending the process is actually sending vmx to is gate version command to the host from guest",
    "start": "521290",
    "end": "527790"
  },
  {
    "text": "so now let's talk about RPC packet handling so we have come so far that the guest",
    "start": "527790",
    "end": "533410"
  },
  {
    "start": "528000",
    "end": "528000"
  },
  {
    "text": "operating system has send RPC packet to the host operating systems now what happens in the host operating system so",
    "start": "533410",
    "end": "539500"
  },
  {
    "text": "if you have a Windows host for each running virtual machine you see in a process will be there and the",
    "start": "539500",
    "end": "546490"
  },
  {
    "text": "process name is VAR b MX dot exe this process actually holds the most of the virtualization code the hypervisor code",
    "start": "546490",
    "end": "552370"
  },
  {
    "text": "and since this is pretty complex it is very attacked wrong and this this binary",
    "start": "552370",
    "end": "558490"
  },
  {
    "text": "will actually handle all these IPC commands that is received from the guest of the guest operating system so since",
    "start": "558490",
    "end": "566860"
  },
  {
    "text": "this handles lot of untrusted data that is coming from the guest operating system this is considered as the most popular gateway to escape from VMware",
    "start": "566860",
    "end": "573610"
  },
  {
    "text": "virtual machines so to be able to hit",
    "start": "573610",
    "end": "578740"
  },
  {
    "start": "576000",
    "end": "576000"
  },
  {
    "text": "those are easy command handler we somehow should be able to send custom",
    "start": "578740",
    "end": "584200"
  },
  {
    "text": "RPC packet from rest to host as I have already said there are multiple option to do that but then what you have seen",
    "start": "584200",
    "end": "590710"
  },
  {
    "text": "that the easiest option probably would be to use the existing API is to send those RPC command as you can see here we",
    "start": "590710",
    "end": "596830"
  },
  {
    "text": "are using Python C type privy to and we are using VM tools or DLL to use the",
    "start": "596830",
    "end": "602140"
  },
  {
    "text": "existing API to send RPC command so we are basically using RPC start RPC send",
    "start": "602140",
    "end": "608290"
  },
  {
    "text": "RPC stop function from VM to a DLL to send our PC packets so now we are going",
    "start": "608290",
    "end": "614680"
  },
  {
    "text": "to take a quick look at some of the vulnerabilities that has been fixed in RPC layer or VMR so when he started",
    "start": "614680",
    "end": "624520"
  },
  {
    "start": "622000",
    "end": "622000"
  },
  {
    "text": "patch analysis what we have seen that after the Pampas was over and we started doing binary decay",
    "start": "624520",
    "end": "630190"
  },
  {
    "text": "this is what we have come up with as you can see the left side this is a vulnerable code and VMO her has added a",
    "start": "630190",
    "end": "636280"
  },
  {
    "text": "fix for this validity by adding a small chip so what is interesting about the vulnerability what you see here that",
    "start": "636280",
    "end": "641560"
  },
  {
    "text": "there is a memcpy mem copy call here which is highlighted in the red and the",
    "start": "641560",
    "end": "647470"
  },
  {
    "text": "arguments of the main CPU mem copy call was actually coming from the second layer woman that was passed to that function so when he did some reverse",
    "start": "647470",
    "end": "654520"
  },
  {
    "text": "engineering what we have found that that second argument was actually directly coming from the guest operating system",
    "start": "654520",
    "end": "660130"
  },
  {
    "text": "and which is definitely untrusted data and the data that we are getting as a second argument of the function it is",
    "start": "660130",
    "end": "666220"
  },
  {
    "text": "nothing but a D disappea RPC packet and this entire things are untrusted data and coming",
    "start": "666220",
    "end": "671889"
  },
  {
    "text": "from host operating system what we have seen that some of these highlighted structure members if you can play with",
    "start": "671889",
    "end": "677920"
  },
  {
    "text": "that we can do some interesting stuff using this vulnerability so after doing",
    "start": "677920",
    "end": "685749"
  },
  {
    "start": "684000",
    "end": "684000"
  },
  {
    "text": "some analysis what you have seen that we can you achieve out of bound weed using that bug so to be able to achieve an out",
    "start": "685749",
    "end": "693939"
  },
  {
    "text": "about read condition what you have to do you have to send an RPC packet with following characteristics first we set",
    "start": "693939",
    "end": "699999"
  },
  {
    "text": "the packet payload size to maybe 4 500 bytes and we do not put any payload into",
    "start": "699999",
    "end": "705100"
  },
  {
    "text": "it so when the mem CP when the memcpy mem copy call will execute since we have",
    "start": "705100",
    "end": "711100"
  },
  {
    "text": "set the payload size to 500 but there is no payload in it will actually over it some data from the next address and he",
    "start": "711100",
    "end": "716829"
  },
  {
    "text": "block and we have an outer bound read so",
    "start": "716829",
    "end": "722589"
  },
  {
    "start": "722000",
    "end": "722000"
  },
  {
    "text": "that so the interesting part about the disavow already was using the same back we can achieve outer bound over write as",
    "start": "722589",
    "end": "728860"
  },
  {
    "text": "well so to be able to achieve outer bound over write you have to send more than one packet from this to host with",
    "start": "728860",
    "end": "734679"
  },
  {
    "text": "the following characteristics point to be noted here the session ID of the",
    "start": "734679",
    "end": "739720"
  },
  {
    "text": "packet should be the same on let's see so once the first packet it received at the host end the vimana daemons process",
    "start": "739720",
    "end": "746829"
  },
  {
    "text": "will actually allocate a memory in heap of thousand by 10,000 bytes",
    "start": "746829",
    "end": "752769"
  },
  {
    "text": "since the binary size is set to 10,000 and since the payload size is set to 500",
    "start": "752769",
    "end": "758559"
  },
  {
    "text": "it will copy 500 bytes of data into the allocated buffer now once the second",
    "start": "758559",
    "end": "764019"
  },
  {
    "text": "packet is received at the vemma at the host end the since the session ID is same VMR vmx you will actually use the",
    "start": "764019",
    "end": "770920"
  },
  {
    "text": "same allocated buffer to copy the new payload since the new payload size is FC",
    "start": "770920",
    "end": "776470"
  },
  {
    "text": "0 0 and we have if we sum up we see that we we have a 100 byte overwrite heap",
    "start": "776470",
    "end": "782769"
  },
  {
    "text": "over it it will actually overwrite the first few bites of next adjacent heap block so this is actually how we can",
    "start": "782769",
    "end": "789759"
  },
  {
    "text": "achieve outer bound right using the bug so we have talked about",
    "start": "789759",
    "end": "797049"
  },
  {
    "start": "794000",
    "end": "794000"
  },
  {
    "text": "this outer boundary right now how we can do some interesting stuff using that outbound",
    "start": "797049",
    "end": "802330"
  },
  {
    "text": "right so SLR is a is something that you has to be bypassed to be able to perform",
    "start": "802330",
    "end": "809050"
  },
  {
    "text": "exploitation in modern operating system so now we are going to take a look how can we bypass a seller using that outer",
    "start": "809050",
    "end": "815020"
  },
  {
    "text": "bound right so to be able to steal info from vrb mix process what do you need we",
    "start": "815020",
    "end": "821650"
  },
  {
    "text": "need to prepare a certain memory layout so this is what you see this is the this is it should be the memory layout we",
    "start": "821650",
    "end": "828040"
  },
  {
    "text": "need to prepare from in the guest in the host operating system to be able to leak",
    "start": "828040",
    "end": "833170"
  },
  {
    "text": "some interesting information so we see we we set up and the red block that you",
    "start": "833170",
    "end": "838900"
  },
  {
    "text": "see it's the overflow junk on which we are going to trigger the overflow and this is the yellow one is the control",
    "start": "838900",
    "end": "845350"
  },
  {
    "text": "string which you control from the guest operating system so the interesting thing I think about control string is",
    "start": "845350",
    "end": "852100"
  },
  {
    "text": "you have from the guest operating system you have access to the read and write to that block and after that we have a DND",
    "start": "852100",
    "end": "858790"
  },
  {
    "text": "CP object so once we trigger the overflow we are going to overwrite some",
    "start": "858790",
    "end": "863860"
  },
  {
    "text": "of the initial bytes of the the next adjacent key block which is a control C and and we do this and we actually",
    "start": "863860",
    "end": "870430"
  },
  {
    "text": "modify the the length of the string the control string and when the string is the length of the string is modified and",
    "start": "870430",
    "end": "877960"
  },
  {
    "text": "if you try to read back the stream from the guest operating system what we have will have the address of we have double",
    "start": "877960",
    "end": "883000"
  },
  {
    "text": "address of Dien disappear object in the guest operating system so once we have the VF table address of Beamer vmx",
    "start": "883000",
    "end": "889930"
  },
  {
    "text": "we can easily craft our basic find the base address of lemur vmix and craft our",
    "start": "889930",
    "end": "895630"
  },
  {
    "text": "rope gadget and perform exploitation so this actually this was actually it was",
    "start": "895630",
    "end": "901690"
  },
  {
    "text": "shown by Chen security research lab they have published a blog post I have a few",
    "start": "901690",
    "end": "907060"
  },
  {
    "text": "months back I guess so we have seen yet",
    "start": "907060",
    "end": "912100"
  },
  {
    "text": "another bug that was uncovered in ID in DCP the interesting thing about the bug is this bug is completely identical to",
    "start": "912100",
    "end": "919300"
  },
  {
    "text": "the bug we have just discussed but the only issue is this bug was residing in",
    "start": "919300",
    "end": "924340"
  },
  {
    "text": "the DNA CP version 3 so to be able to trigger the vulnerable code to reach the vulnerable code the from the guest",
    "start": "924340",
    "end": "930760"
  },
  {
    "text": "operating system what attacker has to do has to at has to downgrade the DND version to three from four so to be able to do that",
    "start": "930760",
    "end": "937750"
  },
  {
    "text": "you need to simply send following set of a PC command from this to host once the",
    "start": "937750",
    "end": "943090"
  },
  {
    "text": "version is downloaded in the host you can simply you can simply perform the",
    "start": "943090",
    "end": "948850"
  },
  {
    "text": "expert Asian in the same way we have just discussed so we have seen a use of",
    "start": "948850",
    "end": "959860"
  },
  {
    "start": "953000",
    "end": "953000"
  },
  {
    "text": "the free also issue also got passed in VMware in recent days so this use after free POC is quite simple what you have",
    "start": "959860",
    "end": "967089"
  },
  {
    "text": "to do you have to send certain sequence of RPC command so first we need to set the DND version to two by sending these",
    "start": "967089",
    "end": "973420"
  },
  {
    "text": "commands and after the DND version is set to two we need to change the version",
    "start": "973420",
    "end": "979570"
  },
  {
    "text": "to r irresistibility version two three so once the now once the we said we",
    "start": "979570",
    "end": "985839"
  },
  {
    "text": "registered the DNS IP version two three the host will actually register version three RPC and three some function",
    "start": "985839",
    "end": "991390"
  },
  {
    "text": "pointers registered for different words from to our pcs the structure actually we have found by reverse engineering that you can see here so although the",
    "start": "991390",
    "end": "1000060"
  },
  {
    "text": "function pointers are freed the some of the associated callbacks that you see here are remain active that was a",
    "start": "1000060",
    "end": "1005700"
  },
  {
    "text": "problem actually in this issue so after that when this scenario is this is a situation in the host process after that",
    "start": "1005700",
    "end": "1013080"
  },
  {
    "text": "if you send any of this RPC call from guest operating system to host operating system we can actually trigger and use",
    "start": "1013080",
    "end": "1018570"
  },
  {
    "text": "after free so there is an interesting",
    "start": "1018570",
    "end": "1025230"
  },
  {
    "text": "block that was published recently we have added the blog into the reference section you regarding the exploitation",
    "start": "1025230",
    "end": "1030480"
  },
  {
    "text": "of this bug so now the question is how",
    "start": "1030480",
    "end": "1036720"
  },
  {
    "text": "these issues could be identified and now in future how can you find similar issues in the VMware Workstation so what",
    "start": "1036720",
    "end": "1043438"
  },
  {
    "text": "you have what we can conclude here we have seen to be able to audit this RPC command handlers we need basically four",
    "start": "1043439",
    "end": "1048900"
  },
  {
    "text": "things so we need some valid RPC commands we need some valid RPC packet structure and any way to send RPC",
    "start": "1048900",
    "end": "1056250"
  },
  {
    "text": "command from nest to host and some monitoring engine in the host to monitor some of the interesting event that",
    "start": "1056250",
    "end": "1062730"
  },
  {
    "text": "occurred inside the host process so this the Bell our PC commands can be easily collected from the open source component of VM",
    "start": "1062730",
    "end": "1069080"
  },
  {
    "text": "tools and also you can reverse engineer the VM or vmx process to find out this command and our pcs structures are very",
    "start": "1069080",
    "end": "1076100"
  },
  {
    "text": "well defined in the open source component of VM tools so and we have already seen how can we send custom",
    "start": "1076100",
    "end": "1081830"
  },
  {
    "text": "custom RPC packet from this to host operating system so we just need to we",
    "start": "1081830",
    "end": "1086960"
  },
  {
    "text": "just need to implement a monitoring engine the host so that we can perform",
    "start": "1086960",
    "end": "1092559"
  },
  {
    "text": "the first for this RPC command handlers so we actually have no idea how these",
    "start": "1092830",
    "end": "1097940"
  },
  {
    "text": "bugs were identified but we think that probably it can be result of some semi dumb fuzzy and if and similar issues can",
    "start": "1097940",
    "end": "1105769"
  },
  {
    "text": "be identified if we craft the further in this way so now I'd like to request",
    "start": "1105769",
    "end": "1111559"
  },
  {
    "text": "yacón to you know explain the virtual filter part okay the second attack surface we would like",
    "start": "1111559",
    "end": "1118580"
  },
  {
    "text": "to show you is a either VMware virtual printer we were virtual printer is a",
    "start": "1118580",
    "end": "1124249"
  },
  {
    "start": "1122000",
    "end": "1122000"
  },
  {
    "text": "feature that allows guests to virtual machine to print documents by using the available printers in all the hosts",
    "start": "1124249",
    "end": "1131320"
  },
  {
    "text": "considering some security reasons it is not the default feature on the windward",
    "start": "1131320",
    "end": "1136940"
  },
  {
    "text": "workstation user should enable this this feature in the viewer preferences menu",
    "start": "1136940",
    "end": "1143799"
  },
  {
    "text": "before puts the virtual machine casteau virtual machine uses com1 power to talk to the virtual printer proxy on a host",
    "start": "1143799",
    "end": "1152600"
  },
  {
    "text": "when user puts a guest a virtual machine with a virtual printer feature enabled",
    "start": "1152600",
    "end": "1158389"
  },
  {
    "text": "we print proxy de XE will be launched by on a hosta by VMware vm x dot exe",
    "start": "1158389",
    "end": "1166029"
  },
  {
    "text": "meanwhile vm x dot exe and we print proxy directs e communicated with each",
    "start": "1166029",
    "end": "1171499"
  },
  {
    "text": "other through name pipes so one user in the castro virtual machine writes data",
    "start": "1171499",
    "end": "1176769"
  },
  {
    "text": "write state to calm one pot the data will eventually as an input in v print",
    "start": "1176769",
    "end": "1184039"
  },
  {
    "text": "proxy taxi so in this procedure some operations of",
    "start": "1184039",
    "end": "1190249"
  },
  {
    "text": "some operations of VMS spoonful will be processed from the gas to the host EMF",
    "start": "1190249",
    "end": "1195919"
  },
  {
    "text": "spoon is a meta file format that starts a printer it contains that device settings and",
    "start": "1195919",
    "end": "1202700"
  },
  {
    "text": "print contents which is represented by EMI file we will not go over the details",
    "start": "1202700",
    "end": "1210240"
  },
  {
    "text": "of EMF spoon fire in in this talk when we print proxy de XE received the print",
    "start": "1210240",
    "end": "1217679"
  },
  {
    "text": "job it to a low TP VDRL to to do a print preview work TP idea will pass the EMF",
    "start": "1217679",
    "end": "1225600"
  },
  {
    "text": "content and render the preview on the screen because of this interesting function of t v-- VOD are one can craft",
    "start": "1225600",
    "end": "1233130"
  },
  {
    "text": "mel from the EMF spoon and the EMF file a right to calm one party in the guest /",
    "start": "1233130",
    "end": "1238530"
  },
  {
    "text": "chill machine trigger box in we print proxy exe and finally get a code",
    "start": "1238530",
    "end": "1243750"
  },
  {
    "text": "execution on the host the architecture is like this gaston virtual machine",
    "start": "1243750",
    "end": "1249330"
  },
  {
    "text": "writes data to come one to the weimar vm x dot exe on the host we had an win",
    "start": "1249330",
    "end": "1255480"
  },
  {
    "text": "where BMX bikes at the exe will communicate with we print proxy direct c",
    "start": "1255480",
    "end": "1261919"
  },
  {
    "text": "by named pipes we print proxy de USC gather content and lo t pv l to do the",
    "start": "1261919",
    "end": "1268530"
  },
  {
    "text": "print print preview job after we learned the architecture we would like to know",
    "start": "1268530",
    "end": "1275160"
  },
  {
    "start": "1271000",
    "end": "1271000"
  },
  {
    "text": "how to trigger this print preview job by crop by programming first though we",
    "start": "1275160",
    "end": "1280620"
  },
  {
    "text": "would like to thanks to Google security researcher Castilla he did a great job on fuzzing TV we",
    "start": "1280620",
    "end": "1287010"
  },
  {
    "text": "taught the area of vulnerabilities many years ago our triggering code is based on his one PLC code in this PLC code the",
    "start": "1287010",
    "end": "1295980"
  },
  {
    "text": "variable thief mode contains many preview settings such as the preview page width and height variables EMF",
    "start": "1295980",
    "end": "1303870"
  },
  {
    "text": "spoon header and the EMRI meta fire ext are commonly no need to change what we",
    "start": "1303870",
    "end": "1310770"
  },
  {
    "text": "should do is preparing a crafty the EMF far as the argument of this trigger",
    "start": "1310770",
    "end": "1316559"
  },
  {
    "text": "function they need to be fun to do the printed job for us obviously this code",
    "start": "1316559",
    "end": "1322230"
  },
  {
    "text": "structure can be easily changed to make a father as well now let me simply",
    "start": "1322230",
    "end": "1328800"
  },
  {
    "text": "explain what is the UML file EMF is an abbreviation enhanced metafile format it's a matter",
    "start": "1328800",
    "end": "1335580"
  },
  {
    "text": "of it's a file format that can store in the device independent representations",
    "start": "1335580",
    "end": "1341760"
  },
  {
    "text": "of graphics images it is very widely used on many software's",
    "start": "1341760",
    "end": "1348030"
  },
  {
    "text": "such as the Internet Explorer Microsoft Office and some printer drivers including him know be aware virtual",
    "start": "1348030",
    "end": "1355740"
  },
  {
    "text": "printer besides the general fyodor it is mainly composed of many many records",
    "start": "1355740",
    "end": "1361950"
  },
  {
    "text": "named the EMR structures and accept the default record types if you wish to",
    "start": "1361950",
    "end": "1367950"
  },
  {
    "text": "print something like a JPEG file your JPEG file will be embedded in an EMF",
    "start": "1367950",
    "end": "1372990"
  },
  {
    "text": "file as a customer the record as we mentioned the EMR is the EMF record",
    "start": "1372990",
    "end": "1380910"
  },
  {
    "text": "structure it contains the properties and the definitions for representing the EMF",
    "start": "1380910",
    "end": "1386670"
  },
  {
    "text": "file EMR has a lot of default types these types are grouped into many categories such as a bit in bitmap",
    "start": "1386670",
    "end": "1394320"
  },
  {
    "text": "record types control record times and so on for the full details about EMF and",
    "start": "1394320",
    "end": "1400500"
  },
  {
    "text": "EMR structures you can find a well-documented materials on the Microsoft website now let's dive into",
    "start": "1400500",
    "end": "1408990"
  },
  {
    "text": "the issues about the viewer virtual printer in these years we wear a virtual",
    "start": "1408990",
    "end": "1414090"
  },
  {
    "text": "printer has been regarded as one of the most important attack surfaces in vain' were for many years early in VMware",
    "start": "1414090",
    "end": "1421500"
  },
  {
    "text": "Workstation 11.1 kostia of google security team has found a lot of",
    "start": "1421500",
    "end": "1427170"
  },
  {
    "text": "vulnerabilities in TB VDRL he has leveraged one stack overflow",
    "start": "1427170",
    "end": "1433140"
  },
  {
    "text": "vulnerabilities in TV idea jpeg2000 handling function to fool linguae escape",
    "start": "1433140",
    "end": "1440310"
  },
  {
    "text": "exploit his exploit code is also used by many other following researchers in last",
    "start": "1440310",
    "end": "1447510"
  },
  {
    "text": "year Mateus you checked first on the same module based on Costas code and discovered through CBS TV series 2016 70",
    "start": "1447510",
    "end": "1457050"
  },
  {
    "text": "80 to 83 and 84 here we would like to thanks to comatose hacks great work we",
    "start": "1457050",
    "end": "1463590"
  },
  {
    "text": "were also released an address or a VMs say 2016 double 14 to 4 for these three",
    "start": "1463590",
    "end": "1471630"
  },
  {
    "text": "TVs so they should already be patched on VMware Workstation version twelve point",
    "start": "1471630",
    "end": "1476640"
  },
  {
    "text": "five point zero not next we will show you the details of these three series",
    "start": "1476640",
    "end": "1482940"
  },
  {
    "start": "1478000",
    "end": "1478000"
  },
  {
    "text": "and their patch codes for case studies the first one I want to show you is a CV",
    "start": "1482940",
    "end": "1489350"
  },
  {
    "text": "2016 7080 - it's a tab of free vulnerability in TPU DMR small textile W",
    "start": "1489350",
    "end": "1497040"
  },
  {
    "text": "record handling function in this function after some record data passed the function tried to text out the text",
    "start": "1497040",
    "end": "1504800"
  },
  {
    "text": "in um are small textile W record as you could see in the Ida's screenshot at the",
    "start": "1504800",
    "end": "1510930"
  },
  {
    "text": "end of this function pointer v8 will be free twice because the first of three is",
    "start": "1510930",
    "end": "1517860"
  },
  {
    "text": "in the heirs branch the question is how could we bypass the if branch conditions",
    "start": "1517860",
    "end": "1522990"
  },
  {
    "text": "matter so you check set the pointer of a three at forty four value is always be a",
    "start": "1522990",
    "end": "1528960"
  },
  {
    "text": "nonzero value so it's difficult to enter the else branch to get a dab of free and",
    "start": "1528960",
    "end": "1535650"
  },
  {
    "text": "triggered after we did some reverse engineering on the memory we finally called the achieved method is as easily",
    "start": "1535650",
    "end": "1543180"
  },
  {
    "text": "as you just need to add a registry key on the host machine the registry key you",
    "start": "1543180",
    "end": "1549330"
  },
  {
    "text": "you need to add is HK local machine software imprint TP view and under this",
    "start": "1549330",
    "end": "1555270"
  },
  {
    "text": "key you also need to add a t1 named cliprect and set its value as 0 then the",
    "start": "1555270",
    "end": "1561960"
  },
  {
    "text": "pointer of a three and forty-four value will be zero then the if condition will",
    "start": "1561960",
    "end": "1568050"
  },
  {
    "text": "be bypassed and double free vulnerability will be triggered in this",
    "start": "1568050",
    "end": "1573960"
  },
  {
    "text": "win debug screen shot you could see the EDI register is a pointer which would",
    "start": "1573960",
    "end": "1579600"
  },
  {
    "text": "will be free twice before we called the",
    "start": "1579600",
    "end": "1584880"
  },
  {
    "text": "second free call the points are pointed he father was already be freed then we will invoke the second free car and we",
    "start": "1584880",
    "end": "1592230"
  },
  {
    "text": "call the hip Erik detected now we would",
    "start": "1592230",
    "end": "1597390"
  },
  {
    "start": "1594000",
    "end": "1594000"
  },
  {
    "text": "like as we saw in the previous slide viewers released em advisory VMs a 2016 double",
    "start": "1597390",
    "end": "1607120"
  },
  {
    "text": "14 to fix the CBE issue has already been patched however the truth is we were",
    "start": "1607120",
    "end": "1613210"
  },
  {
    "text": "didn't Patchett the picture I show you is the dispatch of the C usual function",
    "start": "1613210",
    "end": "1618789"
  },
  {
    "text": "between the VMware Workstation version 2.1 point 1 and version 2 upon 5.0 you",
    "start": "1618789",
    "end": "1625720"
  },
  {
    "text": "could see there is no any difference between the two versions even in the latest version we were 14 and one",
    "start": "1625720",
    "end": "1632919"
  },
  {
    "text": "abilities do exist now we would like to show you a demo about this issue on the",
    "start": "1632919",
    "end": "1640779"
  },
  {
    "text": "latest work of the word version 14mm",
    "start": "1640779",
    "end": "1648090"
  },
  {
    "text": "because we can we can discuss many details so we just a show a proof of",
    "start": "1648090",
    "end": "1658090"
  },
  {
    "text": "concept of this issue in the latest version of we were you could see the",
    "start": "1658090",
    "end": "1664059"
  },
  {
    "text": "version is the latest version 14 newer 14 point zero point zero when I run the",
    "start": "1664059",
    "end": "1677470"
  },
  {
    "text": "POC code you could see the reprint proxy",
    "start": "1677470",
    "end": "1683110"
  },
  {
    "text": "de acción a hosta has been crushed",
    "start": "1683110",
    "end": "1688169"
  },
  {
    "text": "and we've already reported co2 to be more security team and we think they",
    "start": "1699950",
    "end": "1707790"
  },
  {
    "text": "have already had some solution on this ii cv cv 2016 78 III he said memory",
    "start": "1707790",
    "end": "1716880"
  },
  {
    "start": "1711000",
    "end": "1711000"
  },
  {
    "text": "corruption vulnerability interview data one handling a malformed the truth - file embedded ems boom file in this case",
    "start": "1716880",
    "end": "1725130"
  },
  {
    "text": "in the EMF spoon file after AMF content we need to add another structure named",
    "start": "1725130",
    "end": "1731190"
  },
  {
    "text": "the MRI engine phone structure it contains a malformed to type on fire TP",
    "start": "1731190",
    "end": "1737700"
  },
  {
    "text": "view data will pass the truth - fire content get a name table in it extract",
    "start": "1737700",
    "end": "1744570"
  },
  {
    "text": "the name buffer and name size structure then comments ask function to feel the",
    "start": "1744570",
    "end": "1750240"
  },
  {
    "text": "name buffer which name size last arrow this issue is yes before the mem cycle",
    "start": "1750240",
    "end": "1756740"
  },
  {
    "text": "there is no any security check to restrict the name size and the name size",
    "start": "1756740",
    "end": "1762900"
  },
  {
    "text": "is in our crafted the truth - fire it is controlled by us so if the name size is",
    "start": "1762900",
    "end": "1769890"
  },
  {
    "text": "malformed as a very large number the process will overwrite the memory with the arrow far beyond the name buffer to",
    "start": "1769890",
    "end": "1777030"
  },
  {
    "text": "be an out of bounds right issue now look at the I - screenshot of variable v7 is",
    "start": "1777030",
    "end": "1784590"
  },
  {
    "text": "a name sighs what we could control before the mem mem cycle there is no any v7 check to ensure its value in a windy",
    "start": "1784590",
    "end": "1793290"
  },
  {
    "text": "back picture the EDI register is the name size it is set has a very large",
    "start": "1793290",
    "end": "1798780"
  },
  {
    "text": "number hex 8f and then after we call the memset it made the memory corruption the",
    "start": "1798780",
    "end": "1807420"
  },
  {
    "text": "patch code added some necessary checks before ma'amselle call to mitigate the the vulnerability the lastest CV I will",
    "start": "1807420",
    "end": "1815940"
  },
  {
    "text": "show you it CV 2016 70 80 for it's a set of vulnerabilities when TP view data are",
    "start": "1815940",
    "end": "1823770"
  },
  {
    "text": "decompressed the jpeg2000 file this CV includes nearly 40 different crashes",
    "start": "1823770",
    "end": "1829400"
  },
  {
    "text": "discovered by Mateusz you jack from the crashes you know the real reasons of every box",
    "start": "1829400",
    "end": "1835200"
  },
  {
    "text": "one should know jpeg2000 decompression algorithm very much it's really not a",
    "start": "1835200",
    "end": "1841259"
  },
  {
    "text": "small work for us in our talk I've explained one of them as a case study",
    "start": "1841259",
    "end": "1846570"
  },
  {
    "text": "it's an outer bounds right vulnerability this outer bounds right of vulnerability",
    "start": "1846570",
    "end": "1852359"
  },
  {
    "start": "1849000",
    "end": "1849000"
  },
  {
    "text": "is presenting tpv tlgb to decompression",
    "start": "1852359",
    "end": "1857700"
  },
  {
    "text": "image function in this function it will allocates many buffers to place every",
    "start": "1857700",
    "end": "1863190"
  },
  {
    "text": "decompressed data and also to some data operations on them look at the picture",
    "start": "1863190",
    "end": "1870019"
  },
  {
    "text": "in this function there is a while loop takes up the value in hip buffer at some",
    "start": "1870019",
    "end": "1877320"
  },
  {
    "text": "other data then refuse them to itself the loop the loop who will do the same",
    "start": "1877320",
    "end": "1882929"
  },
  {
    "text": "operation for the Hokie buffer being a hip entry sizes hex peel the feeling",
    "start": "1882929",
    "end": "1889109"
  },
  {
    "text": "operation starts from the hip user of set 8 and every value type is a what",
    "start": "1889109",
    "end": "1894989"
  },
  {
    "text": "type because exp o subtracted the heap header and offset 8 equals to hex a oh",
    "start": "1894989",
    "end": "1903619"
  },
  {
    "text": "it's definitely equals to hex 28 times the word lands for so the loop times",
    "start": "1903619",
    "end": "1912090"
  },
  {
    "text": "should be hex 28 in programming we know the loop count variable starts from 0 so",
    "start": "1912090",
    "end": "1917820"
  },
  {
    "text": "the variable should n do is hex 27 and the problem here is there are written",
    "start": "1917820",
    "end": "1923729"
  },
  {
    "text": "and there is no check for the loop times the while loop will only stop when a",
    "start": "1923729",
    "end": "1928889"
  },
  {
    "text": "decompressed data is consumed so this issue gives us a chance to do an",
    "start": "1928889",
    "end": "1934739"
  },
  {
    "text": "out-of-bounds right to the next EP entry in this windy bag screenshot the heap",
    "start": "1934739",
    "end": "1941039"
  },
  {
    "text": "buffer the hip ever is extra 3 a o to a fo the EDI register is the value of the",
    "start": "1941039",
    "end": "1949049"
  },
  {
    "text": "function will add to the power value and the edx register is the loop counter",
    "start": "1949049",
    "end": "1954330"
  },
  {
    "text": "which is already be hexed 29 and actually one it was hex to 8 is already",
    "start": "1954330",
    "end": "1961169"
  },
  {
    "text": "out of bounds right however at that time the EDI register is 0",
    "start": "1961169",
    "end": "1967140"
  },
  {
    "text": "so after the value-added there is no impact on the memory but at this time",
    "start": "1967140",
    "end": "1972360"
  },
  {
    "text": "the EDI register is hexie the target address is hex 3 802 beam eiffel which",
    "start": "1972360",
    "end": "1979770"
  },
  {
    "text": "belongs to the next heat buffer header so after we step over the instruction the next keep entry header is corrupted",
    "start": "1979770",
    "end": "1988370"
  },
  {
    "start": "1988000",
    "end": "1988000"
  },
  {
    "text": "at last in the patch code added some safety checks the loop times could no",
    "start": "1988370",
    "end": "1994770"
  },
  {
    "text": "longer larger than or you go to the proper value as we saw above be aware",
    "start": "1994770",
    "end": "2001220"
  },
  {
    "start": "1998000",
    "end": "1998000"
  },
  {
    "text": "virtual printer is so important we were attack surface it is very worth to do",
    "start": "2001220",
    "end": "2006920"
  },
  {
    "text": "more forcing work on this and the EMF fire is composed of many complex emi EMR",
    "start": "2006920",
    "end": "2013790"
  },
  {
    "text": "structures so it's truly an appropriate Farzin target thanks to costea's code",
    "start": "2013790",
    "end": "2020030"
  },
  {
    "text": "our fasting work is only to mutate the EMR structures and combine them to to be",
    "start": "2020030",
    "end": "2026480"
  },
  {
    "text": "crafted the emi file then sent the the EMF are to worship printer and wait for",
    "start": "2026480",
    "end": "2032480"
  },
  {
    "text": "capturing a lucky crash and finally by this work we've got a couple of",
    "start": "2032480",
    "end": "2038840"
  },
  {
    "text": "interesting issues and the we bar already report them to universe security",
    "start": "2038840",
    "end": "2044300"
  },
  {
    "text": "team okay thanks yeah cool so now we are going to talk about the",
    "start": "2044300",
    "end": "2050990"
  },
  {
    "text": "vmware workstation graphics components that are susceptible to place to host escape attacks so we have talked about",
    "start": "2050990",
    "end": "2057200"
  },
  {
    "text": "vm tools before if you install vm tools in the guest operating system and so along with other component it it also",
    "start": "2057200",
    "end": "2062898"
  },
  {
    "text": "installs a completely fake graphics card so under device manager in any Windows host UK it can be seen as VM our SVG a",
    "start": "2062899",
    "end": "2069590"
  },
  {
    "text": "3d device that's the special thing about this this graphics card is there is no no hardware actually exists for this for",
    "start": "2069590",
    "end": "2076730"
  },
  {
    "text": "this device so this is a completely fake graphics card so when the guest has to",
    "start": "2076730",
    "end": "2081770"
  },
  {
    "text": "perform some graphics related operations the guest has to communicate with this fake device and to be able to make this",
    "start": "2081770",
    "end": "2087889"
  },
  {
    "text": "communication easier this fake device actually provides several memory ranges which can be used by the guest OS to",
    "start": "2087890",
    "end": "2093919"
  },
  {
    "text": "communicate with this virtual GPU so this is a very high-level overview of the VM RSPCA to device",
    "start": "2093919",
    "end": "2100700"
  },
  {
    "start": "2097000",
    "end": "2097000"
  },
  {
    "text": "as you can see the the PCI device can communicate with the host with within",
    "start": "2100700",
    "end": "2106339"
  },
  {
    "text": "three medium the first one is IO port the this is a simple in and out instruction that that",
    "start": "2106339",
    "end": "2111440"
  },
  {
    "text": "is executed to send some stuff to the host and the next one is the 2d frame buffer pudy frame buffer is quite simple",
    "start": "2111440",
    "end": "2117020"
  },
  {
    "text": "the pixels to be range to be rendered has to be has to be written in this 2d",
    "start": "2117020",
    "end": "2122329"
  },
  {
    "text": "frame buffer and it will be rendered accordingly and the last one is the FIFO memory cube this is quite interesting",
    "start": "2122329",
    "end": "2127820"
  },
  {
    "text": "and complex because to be able to interact with this FIFO memory cube the guest OS has to write FIFO commands to",
    "start": "2127820",
    "end": "2134660"
  },
  {
    "text": "this FIFO memory queue and wait for the GPU to process the command once the command is processed the the GPU will",
    "start": "2134660",
    "end": "2141290"
  },
  {
    "text": "actually execute the command asynchronously and get the result back so the interesting thing about this this",
    "start": "2141290",
    "end": "2147980"
  },
  {
    "text": "FIFO memory queue and this virtual CPU that most of these components are",
    "start": "2147980",
    "end": "2153050"
  },
  {
    "text": "actually implemented VMware vm x dot exe process which you see in the host and including the two memory ranges we have",
    "start": "2153050",
    "end": "2159530"
  },
  {
    "text": "talked about 2d frame buffer and FIFO memory they are actually directly mapped to the VM our viewing process when when",
    "start": "2159530",
    "end": "2165260"
  },
  {
    "text": "anyway when when you VM is running so here are some of the example of 2d",
    "start": "2165260",
    "end": "2171230"
  },
  {
    "start": "2169000",
    "end": "2169000"
  },
  {
    "text": "commands and 3d commands for very obvious reasons since the 3d commands are used to do more complex graphic",
    "start": "2171230",
    "end": "2177650"
  },
  {
    "text": "stuffs the command 3d Command handlers are more complex than 2d commands so now",
    "start": "2177650",
    "end": "2184220"
  },
  {
    "start": "2183000",
    "end": "2183000"
  },
  {
    "text": "if we look at some of the history of the bugs in it this FIFO command handling will definitely have to mention the bug",
    "start": "2184220",
    "end": "2190730"
  },
  {
    "text": "that was named as cloudburst so this is a very popular bulk the command hand the",
    "start": "2190730",
    "end": "2195740"
  },
  {
    "text": "the bug was actually present in the 2d command is VGA CMD read copy and the",
    "start": "2195740",
    "end": "2201260"
  },
  {
    "text": "command handler did not actually have any check to verify whether whether the",
    "start": "2201260",
    "end": "2206290"
  },
  {
    "text": "the rectangle that is given for copy it is inside the frame buffer or not so",
    "start": "2206290",
    "end": "2213020"
  },
  {
    "text": "when the source rectangle is outside the frame buffer and the destination inside the frame buffer we can actually read",
    "start": "2213020",
    "end": "2218960"
  },
  {
    "text": "arbitrary data from the Vrba's processing to the frame buffer and we have to remember that the frame the gist",
    "start": "2218960",
    "end": "2224000"
  },
  {
    "text": "frame buffer actually accessible from the host so once we have the required data inside the frame buffer we can easily get the data inside the guest",
    "start": "2224000",
    "end": "2230030"
  },
  {
    "text": "operating system so in this way we can steal arbitrary information from the phone via our beings process",
    "start": "2230030",
    "end": "2235060"
  },
  {
    "text": "so when the distillation is outside the frame buffer and and the the source is",
    "start": "2235060",
    "end": "2240770"
  },
  {
    "text": "inside the frame buffer what you can do we can achieve an arbitrary overwrite as well so the author has demonstrated how",
    "start": "2240770",
    "end": "2247010"
  },
  {
    "text": "he has achieved a full-fledged exploit gets two hosts x-ray it gets two hosts ik explored using this abusing this",
    "start": "2247010",
    "end": "2253840"
  },
  {
    "text": "abusing this vulnerability so we'll add we have added that in the reference section if you are interested in details",
    "start": "2253840",
    "end": "2259430"
  },
  {
    "text": "you can refer to those so the bug we have just discussed was actually mainly",
    "start": "2259430",
    "end": "2265550"
  },
  {
    "text": "in the FIFO command handler but when we are analyzing VM our passes in the recent days well if we have noticed that",
    "start": "2265550",
    "end": "2271790"
  },
  {
    "text": "there is a certain shift in the focus and that what we have seen researchers and volumetric searchers have shifted",
    "start": "2271790",
    "end": "2277220"
  },
  {
    "text": "their focus to more complex graphics graphics components for example graphic shader so shaders under VMware huge",
    "start": "2277220",
    "end": "2284420"
  },
  {
    "text": "attack surface because of their complexity so shaders are actually everywhere virtually every modern graphics",
    "start": "2284420",
    "end": "2291020"
  },
  {
    "start": "2287000",
    "end": "2287000"
  },
  {
    "text": "simulation you see in your everyday life in somewhere powered by codes that is written for the GPU at the starting from",
    "start": "2291020",
    "end": "2297770"
  },
  {
    "text": "the realistic lighting effect in the cutting edge triple a glimpse to the 2d post-processing effects a shader can be",
    "start": "2297770",
    "end": "2303920"
  },
  {
    "text": "considered as a program that is that runs in the graphics pipeline and tells the computer how to render each pixels",
    "start": "2303920",
    "end": "2310100"
  },
  {
    "text": "so this is this is mainly used for the shading applying appropriate level of lights darkness and color within an",
    "start": "2310100",
    "end": "2316760"
  },
  {
    "text": "image so the shader actually can be in",
    "start": "2316760",
    "end": "2321800"
  },
  {
    "text": "simple word what we can say shaders allow graphics developer to directly program the GPU so this is how the",
    "start": "2321800",
    "end": "2326960"
  },
  {
    "text": "shredder input looks like and after it is compiled and render this is what we get this is a as you can see there are",
    "start": "2326960",
    "end": "2332810"
  },
  {
    "text": "some Lightning effect shading effect so there are there are two types of shredder 2d shaders and 3d shaders and",
    "start": "2332810",
    "end": "2338930"
  },
  {
    "text": "there are two popular graphics libraries available for 2d and 3d graphics rendering there OpenGL and direct3d",
    "start": "2338930",
    "end": "2345020"
  },
  {
    "text": "since in this talk we'll be mostly talking on window stuffs whenever we refer to graphics API we refer to",
    "start": "2345020",
    "end": "2351500"
  },
  {
    "text": "direct3d so now let's talk about the life of a shader how so as we already",
    "start": "2351500",
    "end": "2358520"
  },
  {
    "start": "2354000",
    "end": "2354000"
  },
  {
    "text": "said the shaders are usually written in HLSL at the high level shading language which looks something like this and in",
    "start": "2358520",
    "end": "2365660"
  },
  {
    "text": "direct3d version 9 the shader are actually allowed to be written in intermediate assembly language but from",
    "start": "2365660",
    "end": "2371029"
  },
  {
    "text": "directory 10 it is mandatory to write the shredder in HLSL which looks something like this",
    "start": "2371029",
    "end": "2376069"
  },
  {
    "text": "so once the shredder is compiled using direct CDA P is what we get is shredder bytecode and if you disassemble the",
    "start": "2376069",
    "end": "2381710"
  },
  {
    "text": "shredder byte code using any shredder disassembler what we find is intermediate assembly language so this",
    "start": "2381710",
    "end": "2387470"
  },
  {
    "text": "intermediate assembly language actually get passed to the GPU driver and GPU driver will actually convert them to the",
    "start": "2387470",
    "end": "2393500"
  },
  {
    "text": "to the to its proprietary instruction and the GPU will actually execute those instructions and what we see what we we",
    "start": "2393500",
    "end": "2399890"
  },
  {
    "text": "see some graphics effect in our screen so now we are going to talk about what",
    "start": "2399890",
    "end": "2406220"
  },
  {
    "start": "2403000",
    "end": "2403000"
  },
  {
    "text": "what if we render a shader inside a VMware Workstation so in the case to any any application you said err it uses",
    "start": "2406220",
    "end": "2413450"
  },
  {
    "text": "some several user mode API is to to process the shader the shader actually first get compiled and what we get is",
    "start": "2413450",
    "end": "2419150"
  },
  {
    "text": "shader bytecode and once the shader is compiled some vm v mode specific libraries comes into picture which",
    "start": "2419150",
    "end": "2425720"
  },
  {
    "text": "actually packs the shredder and shredder in P SVG 3d command buffer and the buffer get passed to the kernel mode",
    "start": "2425720",
    "end": "2431599"
  },
  {
    "text": "component of the device in this case which is virtual SVG device and once this is passed this this virtual this",
    "start": "2431599",
    "end": "2438650"
  },
  {
    "text": "this GPU will have a fake GP will actually pass those this 3d command buffer to the host for processing so",
    "start": "2438650",
    "end": "2444289"
  },
  {
    "text": "once we have received the raw shader bytecode inside this in host operating system the shader bytecode that we have",
    "start": "2444289",
    "end": "2450589"
  },
  {
    "text": "received at the host it doesn't necessarily have to be comfortable with the host so the VM or vmx process will have to do some translation parsing and",
    "start": "2450589",
    "end": "2458029"
  },
  {
    "text": "conversion to make the shader bytecode compatible with the host operating system so once this conversion is done",
    "start": "2458029",
    "end": "2463190"
  },
  {
    "text": "and transmission is done the and the GPU rendered the process we see some graphics graphics special effects in the",
    "start": "2463190",
    "end": "2470450"
  },
  {
    "text": "screen so we have talked about passing",
    "start": "2470450",
    "end": "2478009"
  },
  {
    "start": "2472000",
    "end": "2472000"
  },
  {
    "text": "3d command buffer along with shader bytecode from guest to host before now we are going to see how it is usually",
    "start": "2478009",
    "end": "2483680"
  },
  {
    "text": "done in the guest end it is done using a protocol that is called SVG a 3d protocol SVG a 3d protocol is designed",
    "start": "2483680",
    "end": "2491089"
  },
  {
    "text": "to be API vendor and API neutral but for convenience it has been designed to be comfortable with direct3d most of the",
    "start": "2491089",
    "end": "2497420"
  },
  {
    "text": "places so the first the shader bytecode can be passed from guest to host using a 3d command called SVG 3d CMD",
    "start": "2497420",
    "end": "2504470"
  },
  {
    "text": "shader define the parameters to be sent along with this particular 3d commands are are defined in a structure which",
    "start": "2504470",
    "end": "2510650"
  },
  {
    "text": "looks something like this as you can see so as you can see the structure holds some characteristics about the shader",
    "start": "2510650",
    "end": "2515750"
  },
  {
    "text": "which is shader type and it also holds the raw shader bytecode so after that",
    "start": "2515750",
    "end": "2521119"
  },
  {
    "text": "the space for the particular 3d command needs to be and n its parameter needs to be reserved in the FIFO memory cube so",
    "start": "2521119",
    "end": "2526880"
  },
  {
    "text": "in this example the function name is SVG a 3d FIFO razor it reserved the space",
    "start": "2526880",
    "end": "2532400"
  },
  {
    "text": "for this SVG 3d fee fie foe command and arguments this reservation has to be",
    "start": "2532400",
    "end": "2537740"
  },
  {
    "text": "done by making use of a structure called SVG a 3d CMD header this header actually looks something like this and as you can",
    "start": "2537740",
    "end": "2544340"
  },
  {
    "text": "see this structure actually holds some hold some characteristics about the 3d command that we are going to pass to the",
    "start": "2544340",
    "end": "2550340"
  },
  {
    "text": "GPU for to execute after after this this reservation is done what we have to do",
    "start": "2550340",
    "end": "2556130"
  },
  {
    "text": "we have to simply commit those commands for GPU to be processed and wait for the GPU to finish the the execution so what",
    "start": "2556130",
    "end": "2565610"
  },
  {
    "start": "2564000",
    "end": "2564000"
  },
  {
    "text": "we have seen so far we have received the raw shader bytecode in the host operating system now as you have already said the shooter is the shader at the",
    "start": "2565610",
    "end": "2572630"
  },
  {
    "text": "shader needs to be translated and the host process actually has to make it compatible with the the host GPU so for",
    "start": "2572630",
    "end": "2580400"
  },
  {
    "text": "that actually there are lot of translation and parsing going on and you have to remember that when when we are",
    "start": "2580400",
    "end": "2585619"
  },
  {
    "text": "actually parsing some untrusted data there can be some serious issues so in the screenshot what you see inside the",
    "start": "2585619",
    "end": "2591320"
  },
  {
    "text": "viewer vmx it translate each and every guest set of instruction to the host specific children instruction the screenshot here shows how to how the",
    "start": "2591320",
    "end": "2598280"
  },
  {
    "text": "shader opcodes each of codes of this intermediate shader assembly you get they get converted so now we are going",
    "start": "2598280",
    "end": "2609410"
  },
  {
    "start": "2608000",
    "end": "2608000"
  },
  {
    "text": "to take a quick look some of the vulnerabilities that has been passed past in a VM this VM our workstation the",
    "start": "2609410",
    "end": "2616609"
  },
  {
    "text": "shaders so the these are the these are some of the advisories that has fixed some shadow related issues we are going",
    "start": "2616609",
    "end": "2623359"
  },
  {
    "text": "to discuss couple of them so this is this is one of the paths that we have notice when vm i wrote about 5.5 was",
    "start": "2623359",
    "end": "2631000"
  },
  {
    "start": "2625000",
    "end": "2625000"
  },
  {
    "text": "released what you have seen that that this this particular piece of code I actually",
    "start": "2631000",
    "end": "2636680"
  },
  {
    "text": "responsible for parsing the shadow assembly instruction DCL index table Tim",
    "start": "2636680",
    "end": "2642080"
  },
  {
    "text": "and what you can see here the argument to of this function was actually",
    "start": "2642080",
    "end": "2647240"
  },
  {
    "text": "directly coming from argument two was we are writing to the this is the heap buffer that was that were writing to and",
    "start": "2647240",
    "end": "2653690"
  },
  {
    "text": "argument three was directly coming from the guest operating system which is untrusted so using this bug actually we",
    "start": "2653690",
    "end": "2659210"
  },
  {
    "text": "can trigger an arbitrary overrate so this is a this is a live debugging screenshot but you can see here the",
    "start": "2659210",
    "end": "2665060"
  },
  {
    "start": "2661000",
    "end": "2661000"
  },
  {
    "text": "destination is RCX which is the destination heap buffer it is pointing to him and this rd8 actually directly",
    "start": "2665060",
    "end": "2671960"
  },
  {
    "text": "coming from the host against based operating system as you can see it is set to four two four two so using this bug actually we can",
    "start": "2671960",
    "end": "2678470"
  },
  {
    "text": "trigger an arbitrary overwrite and we can write some data into that into this hey buffer now I'm going to show a quick",
    "start": "2678470",
    "end": "2685160"
  },
  {
    "text": "demo",
    "start": "2685160",
    "end": "2687250"
  },
  {
    "text": "so this is a vulnerable version of VMware Workstation this is you see that we have developed from the patch",
    "start": "2699269",
    "end": "2706890"
  },
  {
    "text": "so under Windows 10 there is a process called search UI dot exe which actually uses shredder to perform some animation",
    "start": "2713940",
    "end": "2720630"
  },
  {
    "text": "they start the animation that you see in the Start menu it is usually done using shredder so this process it will cease",
    "start": "2720630",
    "end": "2726119"
  },
  {
    "text": "will load all many of the direct3d dealers that are associated with direct3d as you can see some of these",
    "start": "2726119",
    "end": "2735180"
  },
  {
    "text": "dll's are loaded inside cells UI dot exe process now we have a driver in this",
    "start": "2735180",
    "end": "2746549"
  },
  {
    "text": "place so before the SPG virtualize vsvg a device passed the SVG a 3d command",
    "start": "2746549",
    "end": "2751710"
  },
  {
    "text": "buffer to the host operating system it simply intercept the content and write our own shader bytecode custom by a",
    "start": "2751710",
    "end": "2757619"
  },
  {
    "text": "custom shader bytecode to be able to trigger the vulnerability so now when we click on the start button it should send",
    "start": "2757619",
    "end": "2763859"
  },
  {
    "text": "some shader 3 SVG 3d command buffer and along with some shader bytecode to the host operating system when you click on",
    "start": "2763859",
    "end": "2770309"
  },
  {
    "text": "it as you can see the VMware Workstation has been crashed so this is not a zero",
    "start": "2770309",
    "end": "2777329"
  },
  {
    "text": "to this villanova T's has already been fixed by VMware we just developed this POC from the patch so we have seen lot",
    "start": "2777329",
    "end": "2790859"
  },
  {
    "start": "2788000",
    "end": "2788000"
  },
  {
    "text": "of similar issues got pass into the shader parsing code here is another issue that has been fixed by VMware as",
    "start": "2790859",
    "end": "2796440"
  },
  {
    "text": "you can see here the the a2 was the second argument of the function was",
    "start": "2796440",
    "end": "2802319"
  },
  {
    "text": "directly coming from the guest guest operating system and it is actually untrusted and and we are writing some",
    "start": "2802319",
    "end": "2808880"
  },
  {
    "text": "writing some content to the certain offset and we can actually achieve out",
    "start": "2808880",
    "end": "2814319"
  },
  {
    "text": "of bound write using this and what you can see here Beamer has added a tiny little fix for this just to make sure",
    "start": "2814319",
    "end": "2819960"
  },
  {
    "text": "that this the argument that is coming from the guest operating system has added some bounds checking for that and",
    "start": "2819960",
    "end": "2827960"
  },
  {
    "text": "there is another issue that has been fixed in a shader model for DCL intermediate constant were for parser as",
    "start": "2827960",
    "end": "2834299"
  },
  {
    "start": "2828000",
    "end": "2828000"
  },
  {
    "text": "you can see there is an MCP call and this the heart the third argument which",
    "start": "2834299",
    "end": "2839789"
  },
  {
    "text": "is the size of the memcpy it was directly coming from the host based operating system and since this is untrusted data and we can trigger an",
    "start": "2839789",
    "end": "2847349"
  },
  {
    "text": "outer bound condition here using this memcpy and VMO has added a fix for this by adding a",
    "start": "2847349",
    "end": "2853660"
  },
  {
    "text": "small check for this just to make sure that it is not greater than hexed and hits 1000 and if it is more than 1000 it",
    "start": "2853660",
    "end": "2860829"
  },
  {
    "text": "will actually take you to some error and it will just handle the error so the vulnerabilities we have discussed so far",
    "start": "2860829",
    "end": "2867160"
  },
  {
    "start": "2865000",
    "end": "2865000"
  },
  {
    "text": "are mostly in the shader model for but since as we have already said that view",
    "start": "2867160",
    "end": "2872890"
  },
  {
    "text": "more supports many other operating system and it the vmware vm x will have other shader model parser code as well",
    "start": "2872890",
    "end": "2878380"
  },
  {
    "text": "so this is an interesting patch that we have noticed in VMware Workstation what you can see here the second argument",
    "start": "2878380",
    "end": "2884730"
  },
  {
    "text": "second argument was actually coming from the directly from the guest operating system and yeah and this is untested vm",
    "start": "2884730",
    "end": "2892779"
  },
  {
    "text": "are actually added this tiny little fix just to make sure that the untrusted data is is enter they had added some",
    "start": "2892779",
    "end": "2900609"
  },
  {
    "text": "sanity sanity check on the untested data that is coming from the guest operating system this function actually handles",
    "start": "2900609",
    "end": "2906880"
  },
  {
    "text": "the national model of call instruction as you can see it was directly cross-referenced to that function this",
    "start": "2906880",
    "end": "2912910"
  },
  {
    "text": "is the actual shader model one parser code depending on the different different assembly instruction it will",
    "start": "2912910",
    "end": "2919420"
  },
  {
    "text": "redirect so we have talked about some of the three attack surfaces that that is",
    "start": "2919420",
    "end": "2927099"
  },
  {
    "text": "that we have seen attack most by the volume will be searched to perform this to host escape attack but what we what",
    "start": "2927099",
    "end": "2933640"
  },
  {
    "text": "we know that VMR is a very complex piece of software and there are other components as well so we we predict that",
    "start": "2933640",
    "end": "2939339"
  },
  {
    "text": "we in future we may see some more bugs in the SVG components as well because",
    "start": "2939339",
    "end": "2944559"
  },
  {
    "text": "and there are many other stuffs many other this shader assembly parser so we",
    "start": "2944559",
    "end": "2950529"
  },
  {
    "text": "may see some more bugs in SVG a to implementation and a unity feature is one of the one of the very complex",
    "start": "2950529",
    "end": "2956950"
  },
  {
    "text": "feature that VMware Workstation provide so we may see some bugs in the unity feature as well since this is a quite",
    "start": "2956950",
    "end": "2963430"
  },
  {
    "text": "complex and which which bugs may allow to perform this to host escapes and and",
    "start": "2963430",
    "end": "2969039"
  },
  {
    "text": "other than that every emulated device that is that we see inside the guest operating system can be susceptible to",
    "start": "2969039",
    "end": "2974170"
  },
  {
    "text": "guest to host escape attacks including the network card including the sound and everything so we may see some attacks in",
    "start": "2974170",
    "end": "2980799"
  },
  {
    "text": "the other virtual as well so now this is a take ways of",
    "start": "2980799",
    "end": "2985959"
  },
  {
    "start": "2984000",
    "end": "2984000"
  },
  {
    "text": "our talk as we as with other softwares when VM with us virtualization software",
    "start": "2985959",
    "end": "2991239"
  },
  {
    "text": "so our develop probably this this gets to host escape attacks were not seen as",
    "start": "2991239",
    "end": "2996369"
  },
  {
    "text": "a problem but guest to host escapes are real now so probably it is the right time to make",
    "start": "2996369",
    "end": "3002130"
  },
  {
    "text": "some changes or security improvement in the core virtualization tools so we have",
    "start": "3002130",
    "end": "3007469"
  },
  {
    "text": "to while doing that we have to keep in mind the attack surface the overall virtualization security and definitely",
    "start": "3007469",
    "end": "3013529"
  },
  {
    "text": "that is to host escapes so in terms of exploitation what we have seen while reverse engineering VMware Workstation it it lacks couple of things like for",
    "start": "3013529",
    "end": "3021299"
  },
  {
    "text": "example there is no C of G protection so far in the vm r vm x process but but we are we are we are hopeful that EMR will",
    "start": "3021299",
    "end": "3027869"
  },
  {
    "text": "improve this real soon so one more solution to the virtualization software",
    "start": "3027869",
    "end": "3034289"
  },
  {
    "text": "user would be we what they should do they should minimize attack surface by",
    "start": "3034289",
    "end": "3039410"
  },
  {
    "text": "by minimizing the minimizing by detaching the unused or running",
    "start": "3039410",
    "end": "3045089"
  },
  {
    "text": "unimportant virtualized components from the virtual machines which definitely makes the guest to host escape more",
    "start": "3045089",
    "end": "3052019"
  },
  {
    "text": "difficult for attackers so these are some recommended reads that would",
    "start": "3052019",
    "end": "3057599"
  },
  {
    "start": "3055000",
    "end": "3055000"
  },
  {
    "text": "recommend to read if you are interested more about some of this issues most of this this paper so I had not published",
    "start": "3057599",
    "end": "3063719"
  },
  {
    "text": "but it got published in last one two months I guess so this brings us to the",
    "start": "3063719",
    "end": "3070289"
  },
  {
    "start": "3069000",
    "end": "3069000"
  },
  {
    "text": "end of today's presentation thank you guys for your valuable attention and we",
    "start": "3070289",
    "end": "3075839"
  },
  {
    "text": "would like to thank the entire IDT research team and specially being son now we are open to questions and later",
    "start": "3075839",
    "end": "3082349"
  },
  {
    "text": "also if you can send questions to our email addresses Thanks any questions",
    "start": "3082349",
    "end": "3094079"
  },
  {
    "text": "yeah",
    "start": "3094079",
    "end": "3097039"
  },
  {
    "text": "thanks for the presentation do you have any knowledge about to what",
    "start": "3103500",
    "end": "3108670"
  },
  {
    "text": "extent these vulnerabilities they also exist in VMware server see our primary",
    "start": "3108670",
    "end": "3116050"
  },
  {
    "text": "focus was mainly the view my workstation we haven't yet analyzed the VMS servers but yeah since this is this probably",
    "start": "3116050",
    "end": "3124240"
  },
  {
    "text": "share some core functionalities so some of the vulnerabilities and maybe we can see in the service as well but we are we",
    "start": "3124240",
    "end": "3130990"
  },
  {
    "text": "I have no idea because we our focus was mainly the VMware Workstation",
    "start": "3130990",
    "end": "3136319"
  },
  {
    "text": "so did I adequately and say yeah thanks",
    "start": "3137760",
    "end": "3142920"
  },
  {
    "text": "hello Hey very great presentation I would like to know I hope so in on one",
    "start": "3143910",
    "end": "3150880"
  },
  {
    "text": "of the slides that the cord for the graphical process I generated in the VM",
    "start": "3150880",
    "end": "3157210"
  },
  {
    "text": "can it be used to talk the cute coat on the on the host machine and to grab the",
    "start": "3157210",
    "end": "3163750"
  },
  {
    "text": "data out of it I did you can you repeat once I yeah the graphical code is",
    "start": "3163750",
    "end": "3169090"
  },
  {
    "text": "generated in the virtual machine itself okay exactly",
    "start": "3169090",
    "end": "3175330"
  },
  {
    "text": "can it be used to steal the data from the host machine see see you are passing",
    "start": "3175330",
    "end": "3181750"
  },
  {
    "text": "the untrusted data to the host operating system right yeah so it there is no you can steal data you can add you can fit",
    "start": "3181750",
    "end": "3187750"
  },
  {
    "text": "arbitrary data to the guest OS and you may corrupt some memory and do this but there is no way you can steal data because it is a one-way you are sending",
    "start": "3187750",
    "end": "3194020"
  },
  {
    "text": "those data is from this to host ok I understand but if you if you are able to",
    "start": "3194020",
    "end": "3200860"
  },
  {
    "text": "trigger some memory corruption into that host process right by sending those untrusted data then you can trigger some",
    "start": "3200860",
    "end": "3206590"
  },
  {
    "text": "you can steal some information from the process but this is nothing to do with the shader bytecode this is a normal",
    "start": "3206590",
    "end": "3212830"
  },
  {
    "text": "exploitation that we have discussed here right how do how to bypass the SLR and all this so there is nothing to do with",
    "start": "3212830",
    "end": "3219970"
  },
  {
    "text": "the stealing information just using the shader bytecode ok thank you Thanks",
    "start": "3219970",
    "end": "3226350"
  },
  {
    "text": "and what is your claim about the depth of free bug is it the US only or is it",
    "start": "3230630",
    "end": "3236550"
  },
  {
    "text": "more than that because the demo was only a crash yeah the devil free crash that",
    "start": "3236550",
    "end": "3242910"
  },
  {
    "text": "we have shown yeah is it I mean did you get a chance to look into the WC but you",
    "start": "3242910",
    "end": "3251070"
  },
  {
    "text": "are talking about the use of Tuffy in the RPC or the you know the double free double one so what is the claim hey are",
    "start": "3251070",
    "end": "3258000"
  },
  {
    "text": "you claiming is it more than that or is it just at the US so did you get a chance to check whether it is",
    "start": "3258000",
    "end": "3265730"
  },
  {
    "text": "okay this not only this one",
    "start": "3280830",
    "end": "3285020"
  },
  {
    "text": "you're talking about this all right yes right so what is the claim is it a do s",
    "start": "3289150",
    "end": "3295570"
  },
  {
    "text": "bug or is it the exploitable bug so I think what we have done so far we have to get the just to trigger the",
    "start": "3295570",
    "end": "3301510"
  },
  {
    "text": "vulnerable code and it is a just review as but it is definitely exportable on Windows 1 Windows right is it because",
    "start": "3301510",
    "end": "3308530"
  },
  {
    "text": "they using their own management of hip or the VMware is using its own",
    "start": "3308530",
    "end": "3314530"
  },
  {
    "text": "management or is it a Windows management here see what I feel that since it's a",
    "start": "3314530",
    "end": "3319540"
  },
  {
    "text": "double free issue right we need to find a way to create a fake object right to be able to to be able to to be able to",
    "start": "3319540",
    "end": "3326200"
  },
  {
    "text": "exploit this condition so I think we haven't done any research on this fake object creation so if you if you have a",
    "start": "3326200",
    "end": "3331810"
  },
  {
    "text": "way to create a fake object into that feed object inside the frame a freed",
    "start": "3331810",
    "end": "3336910"
  },
  {
    "text": "object will be able to probably gain code execution using that not the only way I'm asking is because double for a",
    "start": "3336910",
    "end": "3343120"
  },
  {
    "text": "mitigation on Windows was way past in Windows service pack 2 so to have a safe",
    "start": "3343120",
    "end": "3349570"
  },
  {
    "text": "unlinking as a matter of the fact is we haven't really get a chance to look into",
    "start": "3349570",
    "end": "3356470"
  },
  {
    "text": "the expert ability of the bug but the EMR has fix this issue already so we are not really quite sure about this okay I",
    "start": "3356470",
    "end": "3369640"
  },
  {
    "text": "think that's it then thank you very much guys and we'll encourage you to the submit feedback probably you will get a",
    "start": "3369640",
    "end": "3375670"
  },
  {
    "text": "feedback link in your registered email address we'll appreciate that thank you",
    "start": "3375670",
    "end": "3381250"
  },
  {
    "text": "very much for your time [Applause]",
    "start": "3381250",
    "end": "3387090"
  }
]