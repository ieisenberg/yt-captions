[
  {
    "text": "[Music]",
    "start": "3410",
    "end": "15759"
  },
  {
    "text": "hi everyone thank you for joining today we'll be escaping virtualized containers hey i'm evaluating i'm a",
    "start": "15759",
    "end": "20960"
  },
  {
    "text": "security researcher at palo alto networks and me and my team's main focus is a cloud security",
    "start": "20960",
    "end": "26720"
  },
  {
    "text": "and container security and today i'm going to walk you through a research i conducted on a cata containers which is a",
    "start": "26720",
    "end": "32078"
  },
  {
    "text": "sandboxing solution for containers that runs virtualized containers it runs each",
    "start": "32079",
    "end": "37360"
  },
  {
    "text": "container inside the virtual machine and today we're trying to escape that sandbox and hopefully",
    "start": "37360",
    "end": "43360"
  },
  {
    "text": "through that learn a bit about the container security so a bit about the agenda for today we'll",
    "start": "43360",
    "end": "48719"
  },
  {
    "text": "start off by talking about the container and container security in general and then we'll talk about",
    "start": "48719",
    "end": "53920"
  },
  {
    "text": "cutter containers a sandboxing solution like i've said why is that needed and how is it implemented and",
    "start": "53920",
    "end": "60800"
  },
  {
    "text": "then we'll try to escape the sandbox so we first need to break out of the container and then",
    "start": "60800",
    "end": "66080"
  },
  {
    "text": "escape the virtual machine so we have a quite a bit of challenges ahead and then we'll wrap it up with some",
    "start": "66080",
    "end": "71360"
  },
  {
    "text": "takeaways from the research so let's start with containers there's a misconception that containers",
    "start": "71360",
    "end": "77759"
  },
  {
    "text": "are just lightweight vms that's not the case truth on steroids is actually a better description if you're familiar with",
    "start": "77759",
    "end": "84400"
  },
  {
    "text": "linux but when i wanted to really sum up containers in one sentence what i came",
    "start": "84400",
    "end": "89439"
  },
  {
    "text": "up with is restricted processes running in a separate file system and the keyword here is processes at the",
    "start": "89439",
    "end": "95759"
  },
  {
    "text": "end containers are just linux processors running with a couple of isolation primitives",
    "start": "95759",
    "end": "101040"
  },
  {
    "text": "applied to them and you probably heard about some of those isolation isolation primitives",
    "start": "101040",
    "end": "107840"
  },
  {
    "text": "so for example namespaces define what a process or what a container can see so the pid namespace will define",
    "start": "107840",
    "end": "114799"
  },
  {
    "text": "what other processes may containers see and then you have primitives which are more related to",
    "start": "114799",
    "end": "120240"
  },
  {
    "text": "what a container can do like capabilities in a second so for example capabilities",
    "start": "120240",
    "end": "125600"
  },
  {
    "text": "are based are basically privileges in linux so you wouldn't like the container to have the assist reboot capability as that would",
    "start": "125600",
    "end": "132800"
  },
  {
    "text": "allow him to shut down the machine and of course that's something you don't want the container to be able to do finally the",
    "start": "132800",
    "end": "139520"
  },
  {
    "text": "final piece that really ties it all together our control groups or c groups which are all about resource",
    "start": "139520",
    "end": "144800"
  },
  {
    "text": "isolation and limiting the containers access to host resources for example you wouldn't like the",
    "start": "144800",
    "end": "150319"
  },
  {
    "text": "container to be able to exhaust the entire host memory",
    "start": "150319",
    "end": "155360"
  },
  {
    "text": "and launch a denial of service attack against the host right and all of those together give allow us",
    "start": "155360",
    "end": "161360"
  },
  {
    "text": "to separate a process enough from the system for it to be considered",
    "start": "161360",
    "end": "166400"
  },
  {
    "text": "a container but you still can't really compare the type of isolation",
    "start": "166400",
    "end": "171440"
  },
  {
    "text": "provided by those primitives and the isolation of containers to the level of isolation provided by",
    "start": "171440",
    "end": "176560"
  },
  {
    "text": "virtual machines and and the main difference is is that a virtual machines run with a",
    "start": "176560",
    "end": "182400"
  },
  {
    "text": "on a separate kernel from the from the host and containers share the host kernel and that's really",
    "start": "182400",
    "end": "190000"
  },
  {
    "text": "a fancy way of saying that containers at the end are just processes and like any process they interact with the",
    "start": "190000",
    "end": "196480"
  },
  {
    "text": "kernel quite frequently frequently either a when they invoke system call or if a",
    "start": "196480",
    "end": "201840"
  },
  {
    "text": "page fault happen it happens in their context and that means that like other processes",
    "start": "201840",
    "end": "208959"
  },
  {
    "text": "on the on the machine and the kernel is quite a large of an attack surface for containers to try and exploit",
    "start": "208959",
    "end": "215040"
  },
  {
    "text": "uh to gain a foothold and a control over the entire host right and the the issue here is that",
    "start": "215040",
    "end": "222560"
  },
  {
    "text": "those vulnerabilities don't really have to be related to namespaces or to c groups or",
    "start": "222560",
    "end": "228000"
  },
  {
    "text": "to any of the primitives that really make up containers just any privilege escalation vulnerability in",
    "start": "228000",
    "end": "234159"
  },
  {
    "text": "the kernel in the in a code path in the kernel that the container can somehow invoke it",
    "start": "234159",
    "end": "240159"
  },
  {
    "text": "could allow a container to break out and that's quite concerning uh in a lot of scenarios",
    "start": "240159",
    "end": "246000"
  },
  {
    "text": "and to tackle that that issue a few a solution around a few tools",
    "start": "246000",
    "end": "252319"
  },
  {
    "text": "arrives that allow you to sandbox container and cutter containers is one of the",
    "start": "252319",
    "end": "258560"
  },
  {
    "text": "first solution to actually try to do that and it takes a pretty straightforward approach at the",
    "start": "258560",
    "end": "264080"
  },
  {
    "text": "sandbox in the containers it just runs each container inside the dedicated",
    "start": "264080",
    "end": "269440"
  },
  {
    "text": "lightweight virtual machine and by doing that you get two layers of isolation right you get first the container and then the virtual",
    "start": "269440",
    "end": "276000"
  },
  {
    "text": "machine and you also mitigated the breakouts which are based on kernel vulnerabilities because even if the",
    "start": "276000",
    "end": "282000"
  },
  {
    "text": "container exploits a vulnerability in the guest kernel he's only compromising the guest right he still doesn't have access to the host",
    "start": "282000",
    "end": "288720"
  },
  {
    "text": "and really the idea of qatar is to provide a simple way to sandbox containers where you can just",
    "start": "288720",
    "end": "294800"
  },
  {
    "text": "plug qatar into existing solutions like docker and kubernetes and have a certain containers run with",
    "start": "294800",
    "end": "301520"
  },
  {
    "text": "an additional layer of isolation so what's what's the use case for this type of solution so first as",
    "start": "301520",
    "end": "308080"
  },
  {
    "text": "i've said kata is great for untrusted or targeted containers where you you're afraid the container might",
    "start": "308080",
    "end": "314000"
  },
  {
    "text": "want to break out and affect the host and it's also really useful in multi-tenant environments where you want to",
    "start": "314000",
    "end": "320560"
  },
  {
    "text": "segregate a container from several tenants and there are a lot of",
    "start": "320560",
    "end": "325840"
  },
  {
    "text": "scenarios where you those use cases are useful but cloud service provider is is one of the prominent ones because",
    "start": "325840",
    "end": "333360"
  },
  {
    "text": "that's those two use cases are really the problem that cloud service providers have right they run a containers from",
    "start": "333360",
    "end": "340240"
  },
  {
    "text": "multiple customers on the same platforms those containers might be malicious they really don't they really don't know",
    "start": "340240",
    "end": "347120"
  },
  {
    "text": "they need a and they need a solution to create a strong isolation boundary between containers of different",
    "start": "347120",
    "end": "353039"
  },
  {
    "text": "customers right and qatar really fits that scenario great and several cloud service",
    "start": "353039",
    "end": "359680"
  },
  {
    "text": "providers are already using qatar in production to support customer multi-tenancy so how",
    "start": "359680",
    "end": "365600"
  },
  {
    "text": "do you really use kata and so in a normal container setup you have the",
    "start": "365600",
    "end": "371840"
  },
  {
    "text": "container engines or something like docker and you also have the container runtime and that's because container engines",
    "start": "371840",
    "end": "377280"
  },
  {
    "text": "don't really know how to run containers and when they actually need to they defer to their defined run time",
    "start": "377280",
    "end": "383520"
  },
  {
    "text": "and that runtime actually knows how to set up the container so normally you would use the run c",
    "start": "383520",
    "end": "388720"
  },
  {
    "text": "which is the default in industry standard runtime but you can decide that you if you have an untrusted container where",
    "start": "388720",
    "end": "395680"
  },
  {
    "text": "you want to sandbox that container you can just define kata as the underlying runtime of your container",
    "start": "395680",
    "end": "401440"
  },
  {
    "text": "engine say say docker and now when you run that container with kata it will be",
    "start": "401440",
    "end": "406960"
  },
  {
    "text": "deployed inside the virtual machine with an additional layer of isolation so we at the end of the day want to",
    "start": "406960",
    "end": "413360"
  },
  {
    "text": "break out of this of this sandbox so let's see a bit more in depth how does that work so that's",
    "start": "413360",
    "end": "418479"
  },
  {
    "text": "how you that's the command to start a container under docker with qatar",
    "start": "418479",
    "end": "423520"
  },
  {
    "text": "and the way this works is docker will tell the cataract time on the host please set up a container for me and the",
    "start": "423520",
    "end": "430479"
  },
  {
    "text": "canter runtime now needs to set up a virtual machine so it will defer to one of the predefined",
    "start": "430479",
    "end": "436400"
  },
  {
    "text": "virtual machine monitors virtual machine monitors are basically software that knows how to set up virtual machines and those",
    "start": "436400",
    "end": "442639"
  },
  {
    "text": "are either a qmu a cloud hypervisor by intel or file cracker by amazon and it will use one of those to set up",
    "start": "442639",
    "end": "449199"
  },
  {
    "text": "the virtual machine next it will also set up a shared directory between the host and the guest virtual",
    "start": "449199",
    "end": "454639"
  },
  {
    "text": "machine to deliver some files for the fro to the guest for example in order to deploy the",
    "start": "454639",
    "end": "460160"
  },
  {
    "text": "container the guest must have the a container image right and and now once that done",
    "start": "460160",
    "end": "466319"
  },
  {
    "text": "a process called the cutter agent will start running in the guest and he is responsible for",
    "start": "466319",
    "end": "471840"
  },
  {
    "text": "actually deploying the container inside the guest so it will take the container configuration",
    "start": "471840",
    "end": "477599"
  },
  {
    "text": "from the catalan time and also the image from the shell directory and use those two to actually deploy the",
    "start": "477599",
    "end": "483120"
  },
  {
    "text": "container and there you have it at the end you have a container running inside a lightweight virtual machine what you",
    "start": "483120",
    "end": "489680"
  },
  {
    "text": "expected and you get two layers of isolation so now that we know how things work",
    "start": "489680",
    "end": "495039"
  },
  {
    "text": "let's try to escape the sandbox and uh why would you like to do that well first it's fun and it's challenging",
    "start": "495039",
    "end": "500479"
  },
  {
    "text": "right you have two isolation layers to break out of and second i think it's a great opportunity to learn about",
    "start": "500479",
    "end": "506639"
  },
  {
    "text": "container security so what's our attack scenario so enterprises use qatar to contain",
    "start": "506639",
    "end": "512560"
  },
  {
    "text": "untrusted and targeted containers we're that untrusted container trying to break out and affect the host",
    "start": "512560",
    "end": "518719"
  },
  {
    "text": "cloud service providers use qatar to support customer multi-tenancy so we're that evil customer uploading",
    "start": "518719",
    "end": "525120"
  },
  {
    "text": "our malicious containers and trying to break out and affect the entire platform and affect other customers",
    "start": "525120",
    "end": "530560"
  },
  {
    "text": "so as that as a malicious container what's the plan it's pretty straightforward we first need to escape the container",
    "start": "530560",
    "end": "537200"
  },
  {
    "text": "and then break out of the virtual machine so we'll get to that in a second but i want to",
    "start": "537200",
    "end": "542560"
  },
  {
    "text": "discuss scope for a bit a kata is very configurable the vulnerabilities i'll show here won't",
    "start": "542560",
    "end": "548080"
  },
  {
    "text": "work in every configuration but we'll be targeting at the standard default configuration that cutter ships with",
    "start": "548080",
    "end": "554720"
  },
  {
    "text": "it also will be focusing on a simple container guest on a single container guest under docker",
    "start": "554720",
    "end": "560480"
  },
  {
    "text": "and with kubernetes you could have a multiple containers in one guest which some exploitation gets complex because",
    "start": "560480",
    "end": "567040"
  },
  {
    "text": "of that and in one of the attacks i'm going to show them still i still need to win a race condition for that to work",
    "start": "567040",
    "end": "572800"
  },
  {
    "text": "under kubernetes so we'll keep it simple we will focus on a single container guest under docker",
    "start": "572800",
    "end": "578560"
  },
  {
    "text": "and finally i want to say this is not an indictment against kata you know every software will have",
    "start": "578560",
    "end": "584080"
  },
  {
    "text": "its share of vulnerabilities i really want to show it just to so you could learn about container security so our",
    "start": "584080",
    "end": "591040"
  },
  {
    "text": "first job of the day as i've said is to escape the container right so we could rely on the vulnerability in",
    "start": "591040",
    "end": "596720"
  },
  {
    "text": "the guest kernel right and in a privileged escalation vulnerability in the guest kernel but that really misses the point right",
    "start": "596720",
    "end": "603680"
  },
  {
    "text": "we want to learn about container security we want to find an issue that is related to containers so we want to find a",
    "start": "603680",
    "end": "609920"
  },
  {
    "text": "native issue with how kata sets up the container inside the guest virtual machine so",
    "start": "609920",
    "end": "614959"
  },
  {
    "text": "in order to do that we need to talk about how do those issues even look like you know how do",
    "start": "614959",
    "end": "620320"
  },
  {
    "text": "you approach the task of looking at the container runtime and trying to break it",
    "start": "620320",
    "end": "625440"
  },
  {
    "text": "so let's look again at the setup of a containerized environment so you have the engine which as i've",
    "start": "625440",
    "end": "631440"
  },
  {
    "text": "said like like docker which as i've said doesn't really know how to set up containers and you have the runtime which really knows how to",
    "start": "631440",
    "end": "637920"
  },
  {
    "text": "take configuration and set up a container so the engine responsibility here is to generate a secure configuration it will",
    "start": "637920",
    "end": "645360"
  },
  {
    "text": "tell the runtime what restrictions to set up so where which namespaces and which capabilities",
    "start": "645360",
    "end": "650480"
  },
  {
    "text": "and so on and the runtime will take that configuration and apply it",
    "start": "650480",
    "end": "655760"
  },
  {
    "text": "to create a container now when you're talking about how do you uh escape containers you're really talking",
    "start": "655760",
    "end": "662160"
  },
  {
    "text": "about what issues uh could be in this in this process so the first type of issue that could er",
    "start": "662160",
    "end": "668640"
  },
  {
    "text": "that could arise in this process is in the initialization of a of the containerized process and you",
    "start": "668640",
    "end": "673920"
  },
  {
    "text": "have a host process the runtime trying to use untrusted variables like like the container image and the command",
    "start": "673920",
    "end": "679839"
  },
  {
    "text": "and to set up a containerized process that process is really uh that a procedure is really a",
    "start": "679839",
    "end": "686480"
  },
  {
    "text": "complicated and crucial and a lot of the issues was found in that process for",
    "start": "686480",
    "end": "693360"
  },
  {
    "text": "example there was an issue with the runtime exposing a briefly exposing host file",
    "start": "693360",
    "end": "698640"
  },
  {
    "text": "descriptors to the container which the container could have used to break out and that issue really is a runtime issue",
    "start": "698640",
    "end": "704959"
  },
  {
    "text": "because the runtime is the one in charge of setting up the container right and the second type of issue",
    "start": "704959",
    "end": "712399"
  },
  {
    "text": "is really an engine issue where you at the end you you finish the initial initialization of",
    "start": "712399",
    "end": "717760"
  },
  {
    "text": "the container and now you have a running container with a couple of restrictions applied to it but there",
    "start": "717760",
    "end": "723680"
  },
  {
    "text": "could be a scenario where that container is simply not restricted enough right and that really points to a",
    "start": "723680",
    "end": "730639"
  },
  {
    "text": "a problem with the container configuration and the restrictions supplied by the engine and because that that's a",
    "start": "730639",
    "end": "737600"
  },
  {
    "text": "issue with the engine and it really it's it points to permissive engine defaults",
    "start": "737600",
    "end": "742720"
  },
  {
    "text": "or perhaps to a new breakout techniques that wasn't discovered before and normally those are the two areas",
    "start": "742720",
    "end": "748639"
  },
  {
    "text": "where you will hunt for issues and vulnerabilities in but when i came to look at qatar i noticed",
    "start": "748639",
    "end": "755120"
  },
  {
    "text": "that it's quite a unique case because kata is a runtime that actually modifies the configuration",
    "start": "755120",
    "end": "761440"
  },
  {
    "text": "uh received from the engine and the reason it does it it is because it turns out that a",
    "start": "761440",
    "end": "766800"
  },
  {
    "text": "configuration generated on the host need to be adjusted in order to be a",
    "start": "766800",
    "end": "771920"
  },
  {
    "text": "valid a valid for use to deploy a container inside a different machine inside the",
    "start": "771920",
    "end": "777279"
  },
  {
    "text": "virtual machine which has a different kernel a different set of emulated hardware and so on",
    "start": "777279",
    "end": "782800"
  },
  {
    "text": "but that's really dangerous to do because container engines over the years",
    "start": "782800",
    "end": "788320"
  },
  {
    "text": "of vulnerabilities have learned how to create a restricted enough configuration that isn't",
    "start": "788320",
    "end": "794480"
  },
  {
    "text": "breakable so for us if we want to escape we could take a look at what qatar does and perhaps find issue",
    "start": "794480",
    "end": "800000"
  },
  {
    "text": "with how it modifies the configuration and kata does a couple of things but the main things i want to focus on",
    "start": "800000",
    "end": "806000"
  },
  {
    "text": "is that it discards a several c groups several control groups c groups and c groups are tied as i've said to",
    "start": "806000",
    "end": "813519"
  },
  {
    "text": "hardware resources and because the host and the guest have a different set of hardware resources",
    "start": "813519",
    "end": "818959"
  },
  {
    "text": "right the guests have an emulated set a virtualized set of hardware resources some sig groups just don't make sense",
    "start": "818959",
    "end": "825199"
  },
  {
    "text": "uh in the guest if you generate them on the host so for example a device group",
    "start": "825199",
    "end": "832240"
  },
  {
    "text": "the host and the guests have different devices and you might think it's a bit extreme to",
    "start": "832240",
    "end": "838079"
  },
  {
    "text": "just discard several several c groups but if you if i wanted to understand the reasoning behind it i",
    "start": "838079",
    "end": "843839"
  },
  {
    "text": "think i think the reasoning is that ac groups are known to be mainly about denying denial of service attacks",
    "start": "843839",
    "end": "850000"
  },
  {
    "text": "preventing denial of service attack from the container to the underlying machine but because here the container",
    "start": "850000",
    "end": "855040"
  },
  {
    "text": "runs inside the guest virtual machine it's no problem really if the container launches a denial of service attack",
    "start": "855040",
    "end": "861040"
  },
  {
    "text": "against the guest right is is not it's only a health in itself only attacking his",
    "start": "861040",
    "end": "866320"
  },
  {
    "text": "own sandbox he is not only closer to a gaining code execution on the host",
    "start": "866320",
    "end": "872320"
  },
  {
    "text": "but the thing is c groups are mainly about preventing an rf service but some people forget that they're not",
    "start": "872320",
    "end": "879279"
  },
  {
    "text": "only about that and one device one c groups that is actually quite interesting",
    "start": "879279",
    "end": "884399"
  },
  {
    "text": "which kata doesn't enforce is the devices group and let's have a look at what the device",
    "start": "884399",
    "end": "889760"
  },
  {
    "text": "group does so the devices group restricts the container access to system devices",
    "start": "889760",
    "end": "895519"
  },
  {
    "text": "quite simply and qatar doesn't enforce that c groups as i've said meaning that we inside the container",
    "start": "895519",
    "end": "901760"
  },
  {
    "text": "have more access than usual to the devices of the underlying system",
    "start": "901760",
    "end": "907279"
  },
  {
    "text": "and when you look in that system is the guest virtual machine and when you look at those devices and",
    "start": "907279",
    "end": "912320"
  },
  {
    "text": "think what device could be interesting to us from the container well the guest how this is quite",
    "start": "912320",
    "end": "917519"
  },
  {
    "text": "interesting right we in the container have a view of only a specific file system the container",
    "start": "917519",
    "end": "923279"
  },
  {
    "text": "file system but if we gain access to the entire guest hard disk we can now",
    "start": "923279",
    "end": "929120"
  },
  {
    "text": "possibly manipulate it in order to gain code execution on the host right so how do you even access a hard",
    "start": "929120",
    "end": "936399"
  },
  {
    "text": "disk in linux what and those type of devices are called block devices",
    "start": "936399",
    "end": "941440"
  },
  {
    "text": "well you first need a way to refer to that a hard disk to the device and in linux",
    "start": "941440",
    "end": "947600"
  },
  {
    "text": "everything is a file so of course you create a device file that refers to that blog device or to that hard disk",
    "start": "947600",
    "end": "954240"
  },
  {
    "text": "in linux every device is identified by two numbers you can see in the examples in the example here those are eight and",
    "start": "954240",
    "end": "961040"
  },
  {
    "text": "one so you first use make node to create the device file referring to",
    "start": "961040",
    "end": "966560"
  },
  {
    "text": "that device and then you mount the device file over some directory in your system and now when you interact",
    "start": "966560",
    "end": "973120"
  },
  {
    "text": "with the files under the directory you are actually interacting with the hard disk right everything you do in the directory",
    "start": "973120",
    "end": "979120"
  },
  {
    "text": "is propagated back to the hard disk and that's really the the easy way to interact with the file",
    "start": "979120",
    "end": "984480"
  },
  {
    "text": "system but we that's actually not very useful for us in the container",
    "start": "984480",
    "end": "989839"
  },
  {
    "text": "because the container in the container we have the make node capability which is required",
    "start": "989839",
    "end": "995519"
  },
  {
    "text": "to to create the device file but we don't have the sys admin capability",
    "start": "995519",
    "end": "1000720"
  },
  {
    "text": "which from the name you you you may realize that it's good the containers don't have the sysadmin capability",
    "start": "1000720",
    "end": "1006160"
  },
  {
    "text": "but because we don't have that capability we can't mount and below you can see a cataco a cata",
    "start": "1006160",
    "end": "1012240"
  },
  {
    "text": "container running under docker which tries to which can create the device file for the guesthouse but",
    "start": "1012240",
    "end": "1018240"
  },
  {
    "text": "it can mount it so it seems like we're in a bit of a problem even though we should have more access to the devices other",
    "start": "1018240",
    "end": "1025438"
  },
  {
    "text": "restrictions are still stopping us but there is actually another way to access devices in linux and that's by",
    "start": "1025439",
    "end": "1033678"
  },
  {
    "text": "directly reading and writing to the device file so you don't even need to mount them and why why is that useful for example",
    "start": "1033679",
    "end": "1041120"
  },
  {
    "text": "if the hard disk has a corrupted file system and you are not able to mount it correctly you might need some direct access to the",
    "start": "1041120",
    "end": "1047360"
  },
  {
    "text": "device to try to fix things so there are actually build tools like debug fs which you we can use",
    "start": "1047360",
    "end": "1054880"
  },
  {
    "text": "inside the container to directly interact with the hard disk without needing to mount it and you can see in the example there",
    "start": "1054880",
    "end": "1061120"
  },
  {
    "text": "that we can see the files on the hard disk and we have a great indication that that's really the guest style disk",
    "start": "1061120",
    "end": "1066480"
  },
  {
    "text": "because when it's when we inspect the binaries in it we can see the cutter agent which we expect to run to be a present on the",
    "start": "1066480",
    "end": "1073360"
  },
  {
    "text": "guest and it's not only reading access to the how this is only also writing access so because we don't have",
    "start": "1073360",
    "end": "1079440"
  },
  {
    "text": "device a group we can actually modify the guest hard disk from within the container so does that mean we broke out can we",
    "start": "1079440",
    "end": "1087200"
  },
  {
    "text": "now just easily execute code on the guest well it turns out that it's not so easy",
    "start": "1087200",
    "end": "1092240"
  },
  {
    "text": "and there are two mechanisms in a way the page cushion the entry cache and because of those changes that we",
    "start": "1092240",
    "end": "1098799"
  },
  {
    "text": "make at the device level may not really be apparent to a processors running on the guest",
    "start": "1098799",
    "end": "1104480"
  },
  {
    "text": "so why is that in linux when you when a process interacts with a file linux",
    "start": "1104480",
    "end": "1110720"
  },
  {
    "text": "will read that by reading it executing it or whatever linux will read that file from the hard",
    "start": "1110720",
    "end": "1116320"
  },
  {
    "text": "disk right but that's an expensive operation so it will also keep a cache of that file content in the page",
    "start": "1116320",
    "end": "1123760"
  },
  {
    "text": "cache so the next time a process access that file then linux doesn't have to go all the way to the hard disk and can simply",
    "start": "1123760",
    "end": "1130320"
  },
  {
    "text": "access the page cache that's great for performance but it's pretty bad for us because we're in the",
    "start": "1130320",
    "end": "1135440"
  },
  {
    "text": "container and we are directly writing to the hard disk so if we're in the container for example and we modify",
    "start": "1135440",
    "end": "1142160"
  },
  {
    "text": "a sh on the hard disk and then some process on the guest tries to access sh if sage is already in the page",
    "start": "1142160",
    "end": "1149760"
  },
  {
    "text": "cache and that process will see the original version of the sh from the page cache and not our malicious version",
    "start": "1149760",
    "end": "1156960"
  },
  {
    "text": "on the hard disk and that's not good for us if you want to gain code execution on the guest to make things works the guest is pretty",
    "start": "1156960",
    "end": "1164160"
  },
  {
    "text": "static and besides the kata agent and systemd nothing really else really runs on it",
    "start": "1164160",
    "end": "1169520"
  },
  {
    "text": "and it doesn't really invoke and interacts with files so it's even harder for us to gain code execution",
    "start": "1169520",
    "end": "1175440"
  },
  {
    "text": "so how do we deal with that problem so as i've said the guest is static so and we can't expect it to just run in",
    "start": "1175440",
    "end": "1182799"
  },
  {
    "text": "a new executable so we need to replace an already running executable so that's either the cutter agent or",
    "start": "1182799",
    "end": "1188320"
  },
  {
    "text": "systemd but those as i've said are already loaded to the page cache so in order for us to",
    "start": "1188320",
    "end": "1196240"
  },
  {
    "text": "you know in order for the uh for modification that we make to the hard disk to actually be apparent to guest processes",
    "start": "1196240",
    "end": "1203520"
  },
  {
    "text": "we need to some way to force the guest kernel to free the page cache and how can we do it well the page cache",
    "start": "1203520",
    "end": "1211120"
  },
  {
    "text": "uses memory that is currently unused but if a process wants that memory the kernel will give",
    "start": "1211120",
    "end": "1216799"
  },
  {
    "text": "the process that memory because it will say okay later on i can just read it again from the hard disk",
    "start": "1216799",
    "end": "1222799"
  },
  {
    "text": "and and right now that memory is used is necessary by process so when the",
    "start": "1222799",
    "end": "1228880"
  },
  {
    "text": "container can allocate small chunks of memory to a slowly chip away at the the page cache and the files in",
    "start": "1228880",
    "end": "1235600"
  },
  {
    "text": "it until we can actually successfully clear cutter agent from the page cache",
    "start": "1235600",
    "end": "1241200"
  },
  {
    "text": "and now when something access the the catagen binary it will must go to the hard disk so if",
    "start": "1241200",
    "end": "1247280"
  },
  {
    "text": "it's still not completely clear i'll try to explain it by showing the how the attack will",
    "start": "1247280",
    "end": "1252320"
  },
  {
    "text": "work so the attack the scenario is that we are in a malicious container right",
    "start": "1252320",
    "end": "1257919"
  },
  {
    "text": "and we want to gain code execution on the guest so what we do we first override the",
    "start": "1257919",
    "end": "1263520"
  },
  {
    "text": "cutter agent binary on the hard disk but nothing really really happens because the cut agent process the memory",
    "start": "1263520",
    "end": "1269919"
  },
  {
    "text": "is mapped to the version in the page cache which isn't malicious so in order for our version to",
    "start": "1269919",
    "end": "1275280"
  },
  {
    "text": "be propagated to the guest to the process we need we man we allocate small chunks of memory",
    "start": "1275280",
    "end": "1281120"
  },
  {
    "text": "in order to clear the cutter agent from the page cache and now when the execution passes back to the",
    "start": "1281120",
    "end": "1286960"
  },
  {
    "text": "cataloging process the kernel realizes okay wait i need to get the version i need to get cutter agent from the hard",
    "start": "1286960",
    "end": "1293200"
  },
  {
    "text": "disk again and now when it does it it fetches the malicious version that we've put in we've put in the hard disk so and now",
    "start": "1293200",
    "end": "1301360"
  },
  {
    "text": "the cutter agent process maps to our malicious version and it runs the code that we wrote to",
    "start": "1301360",
    "end": "1307280"
  },
  {
    "text": "the guest hard disk so it seems like we can get a guest code execution but the truth is it's it's not really",
    "start": "1307280",
    "end": "1314799"
  },
  {
    "text": "that easy because replacing a process that re replacing the binary",
    "start": "1314799",
    "end": "1319919"
  },
  {
    "text": "that the process is running while it is running it's quite tricky because you can",
    "start": "1319919",
    "end": "1325520"
  },
  {
    "text": "imagine that uh the pro the cut agent process is now running a specific op code in a specific function and now when we",
    "start": "1325520",
    "end": "1333120"
  },
  {
    "text": "replace the executable that it is running we don't know when that switch will happen so we don't know where",
    "start": "1333120",
    "end": "1338960"
  },
  {
    "text": "in the new binary uh where it will end which opcode it will now execute in the new binary so",
    "start": "1338960",
    "end": "1344400"
  },
  {
    "text": "it's really hard to get the stable code execution using that and the most likely thing that will happen is",
    "start": "1344400",
    "end": "1350240"
  },
  {
    "text": "that the cart agent process will just crash so that's not good for us we want stable code execution",
    "start": "1350240",
    "end": "1356880"
  },
  {
    "text": "so instead of the of the cut agent process crushing being a bug over exploit we actually make it a feature of",
    "start": "1356880",
    "end": "1362960"
  },
  {
    "text": "our exploit and we intentionally crash the cart agent binary so how do we do it we intentionally",
    "start": "1362960",
    "end": "1369039"
  },
  {
    "text": "override the cutter agent binary on hardisk with garbage data but we also override another binary uh",
    "start": "1369039",
    "end": "1375760"
  },
  {
    "text": "system the shadow with the actual malicious code that we want to run on the guest and then we follow the same procedure as",
    "start": "1375760",
    "end": "1381679"
  },
  {
    "text": "before we allocate small chunks of memory to clear the cut agent from the page cache and now when execution passes back",
    "start": "1381679",
    "end": "1388000"
  },
  {
    "text": "to the cut agent process on the guest it the kernel must read the garbage cut agent version from the",
    "start": "1388000",
    "end": "1395280"
  },
  {
    "text": "disk from the hard disk and the a cutter agent process now maps to the version its memory now maps to the version and",
    "start": "1395280",
    "end": "1402159"
  },
  {
    "text": "it of course crashes right because it now maps to garbage data but now once the cutter agent process",
    "start": "1402159",
    "end": "1408480"
  },
  {
    "text": "crashes a a system this shutdown sequence is in is started which eventually as you might have",
    "start": "1408480",
    "end": "1414640"
  },
  {
    "text": "guessed calls the shutdown binary now the shadow binary was never executed before it is only",
    "start": "1414640",
    "end": "1421120"
  },
  {
    "text": "accessed when you want to shut down the machine and therefore it is not in the page cache and will need to be",
    "start": "1421120",
    "end": "1427039"
  },
  {
    "text": "directly read from the disk so now uh the malicious version of the",
    "start": "1427039",
    "end": "1432880"
  },
  {
    "text": "shutdown binary that we've put in the hard disk will start executing on the guest and it starts executing from the uh",
    "start": "1432880",
    "end": "1439760"
  },
  {
    "text": "like a normal process and not a switch in the middle of execution so that we can actually get",
    "start": "1439760",
    "end": "1445120"
  },
  {
    "text": "stable code execution by doing that so let's see of them of how does that work",
    "start": "1445120",
    "end": "1450799"
  },
  {
    "text": "in the demo the malicious the malicious shutdown binary will simply create a file in the shared directory",
    "start": "1450799",
    "end": "1456720"
  },
  {
    "text": "which is supposed to be only accessible from the guest and not from inside the container and just and we it just creates that",
    "start": "1456720",
    "end": "1463039"
  },
  {
    "text": "file so we can see that the exploit works so let's see the export in action",
    "start": "1463039",
    "end": "1472480"
  },
  {
    "text": "so i'm going to show you the code of the shutdown binary that i'm going to write run on the guest and the code is quite",
    "start": "1472480",
    "end": "1479279"
  },
  {
    "text": "simple as i said it just creates a a a binary in the shared a file in the",
    "start": "1479279",
    "end": "1484320"
  },
  {
    "text": "shared directory called guess is now malicious so it's quite simple and then it slips so we can see inspect",
    "start": "1484320",
    "end": "1489440"
  },
  {
    "text": "the shared directory so we are now running the exploit with docker under qatar and the thing",
    "start": "1489440",
    "end": "1494880"
  },
  {
    "text": "first thing the exploit does is tell us this is my container id so that's where the shared directory on",
    "start": "1494880",
    "end": "1500159"
  },
  {
    "text": "the host side should be and we can see that the shared directory has the normal contents everything is okay but now when the",
    "start": "1500159",
    "end": "1506720"
  },
  {
    "text": "container continues it gets create a device file for the guest hard disk",
    "start": "1506720",
    "end": "1512320"
  },
  {
    "text": "and it replaces the shutdown binary with the code that i've showed you and also swaps the qatar agent binary on",
    "start": "1512320",
    "end": "1518400"
  },
  {
    "text": "the guest hard disk with garbage data nothing really happens now right because the cutter agent is still in the",
    "start": "1518400",
    "end": "1524080"
  },
  {
    "text": "page cache but when we allocate enough memory we will actually crash the",
    "start": "1524080",
    "end": "1529279"
  },
  {
    "text": "cutter agent causing our shutdown process to start running and we can now see that",
    "start": "1529279",
    "end": "1534880"
  },
  {
    "text": "it indeed it ran on the guest and it created the file that we expected so that's great",
    "start": "1534880",
    "end": "1542960"
  },
  {
    "text": "and we got a way to break out of the container and execute code on the guest",
    "start": "1542960",
    "end": "1548000"
  },
  {
    "text": "a breakout technique that exploits a direct device access that exploits the lack of c groups",
    "start": "1548000",
    "end": "1553360"
  },
  {
    "text": "and it really shows you if you mess around and modify containers configuration you better be only adding restrictions",
    "start": "1553360",
    "end": "1559679"
  },
  {
    "text": "you you you you don't really know what other effects removing that might happen if you remove",
    "start": "1559679",
    "end": "1567120"
  },
  {
    "text": "a certain restriction researchers might find a way to exploit that to break out now the",
    "start": "1567120",
    "end": "1572720"
  },
  {
    "text": "container does need the make note capability in order to exploit this issue but that's default in",
    "start": "1572720",
    "end": "1578880"
  },
  {
    "text": "most places and of course this issue received the cv so the next thing that we want to do",
    "start": "1578880",
    "end": "1584000"
  },
  {
    "text": "is to escape the virtual machine and that will actually be a bit easier so let's talk about the",
    "start": "1584000",
    "end": "1589440"
  },
  {
    "text": "attack surface of the virtual machine so first of all the cut around time is a process running on the host",
    "start": "1589440",
    "end": "1595840"
  },
  {
    "text": "and it passes messages from the qatar agent so if there's a vulnerability in the cataract time",
    "start": "1595840",
    "end": "1600960"
  },
  {
    "text": "a malicious cutter agent might be able to exploit that and gain code execution but qatar runtime is written in golang",
    "start": "1600960",
    "end": "1606720"
  },
  {
    "text": "which is memory safe and none of those messages really are that interesting so that's really not relevant another thing",
    "start": "1606720",
    "end": "1614320"
  },
  {
    "text": "that could happen is the issue with the vulnerability in the virtual machine monitor right which is actually the boundary between the",
    "start": "1614320",
    "end": "1619760"
  },
  {
    "text": "a guest virtual machine and the host but we'll not talk about that for for for for now",
    "start": "1619760",
    "end": "1626640"
  },
  {
    "text": "what i really want to talk about is the shared directory between the host and the guest because it's quite an interesting of an attack surface",
    "start": "1626640",
    "end": "1633120"
  },
  {
    "text": "um the cutter runtime on the whole side operates on the files in the shared directory",
    "start": "1633120",
    "end": "1638240"
  },
  {
    "text": "but the guest can control those files just as much as the host right it's a shared directory",
    "start": "1638240",
    "end": "1643440"
  },
  {
    "text": "meaning that we're in the get in the get in in a malicious guest we can manipulate the file in the shared",
    "start": "1643440",
    "end": "1649440"
  },
  {
    "text": "directory in order to maybe affect the catalog time running on the hostess loot to do some things that he doesn't expect",
    "start": "1649440",
    "end": "1656480"
  },
  {
    "text": "and one of the most interesting things that's done with the shared directory is that it is used to deliver the image",
    "start": "1656480",
    "end": "1662559"
  },
  {
    "text": "to the guest so let's see how does that work so when you're when the guest virtual",
    "start": "1662559",
    "end": "1668559"
  },
  {
    "text": "machine is started cataracting bind mounts the container image to the shell directory then the container starts",
    "start": "1668559",
    "end": "1674399"
  },
  {
    "text": "running inside the guest at some point it terminates inside the guest and then the catalog time unmounts the container",
    "start": "1674399",
    "end": "1680159"
  },
  {
    "text": "image from the shared directory so that seems quite reasonable right but the problem here is that both mount",
    "start": "1680159",
    "end": "1686640"
  },
  {
    "text": "and unmount operations follow symlinks so in the guest meaning that a malicious guest could",
    "start": "1686640",
    "end": "1692640"
  },
  {
    "text": "place sim links inside the shared directory and cause the qatar run time to target other things on",
    "start": "1692640",
    "end": "1699120"
  },
  {
    "text": "the host uh that are not in the show directory so it's really easier to see it in action",
    "start": "1699120",
    "end": "1705279"
  },
  {
    "text": "so let's start actually with the unmount redirection because that's easier to understand so that's how the attack looks we are in",
    "start": "1705279",
    "end": "1711679"
  },
  {
    "text": "the malicious container and we somehow broken up to the guest maybe using the technique that i've showed earlier and now from inside the",
    "start": "1711679",
    "end": "1718240"
  },
  {
    "text": "guest we can create a sim link when we where we know in the shared directory where we know",
    "start": "1718240",
    "end": "1724080"
  },
  {
    "text": "the qatar run time will unmount we'll try to unmount and then we we can actually kill the",
    "start": "1724080",
    "end": "1730640"
  },
  {
    "text": "container in order to trigger the cataract and to unmount",
    "start": "1730640",
    "end": "1735760"
  },
  {
    "text": "that path in the shared directory and now when it does that operation it actually is redirected",
    "start": "1735760",
    "end": "1742399"
  },
  {
    "text": "to a target of the guest choosing and that's true a really easy way to create a denial of service on the host because",
    "start": "1742399",
    "end": "1749120"
  },
  {
    "text": "of the because of the how the qatar run does the unmount operations if we tell it if we create a sim links",
    "start": "1749120",
    "end": "1755840"
  },
  {
    "text": "that points to the root directory it will actually unmount all mount points underneath the",
    "start": "1755840",
    "end": "1761600"
  },
  {
    "text": "directory making the host very unusable and not able to run any container",
    "start": "1761600",
    "end": "1768240"
  },
  {
    "text": "so let's see a demo for this attack",
    "start": "1768480",
    "end": "1772240"
  },
  {
    "text": "so first we will inspect the mount points on the hose see that everything is fine",
    "start": "1774480",
    "end": "1779679"
  },
  {
    "text": "and then we will run a container that exploits both the container to gas breakout and",
    "start": "1779679",
    "end": "1785440"
  },
  {
    "text": "then the unmount redirection vulnerability and it will target the root directory in",
    "start": "1785440",
    "end": "1790480"
  },
  {
    "text": "it attack in its attack and once the container is taken down we",
    "start": "1790480",
    "end": "1795520"
  },
  {
    "text": "can see that those mount points don't contain anything anymore on the host and if we try to do other things like",
    "start": "1795520",
    "end": "1802000"
  },
  {
    "text": "run a container you can see that the host is really unusable and you can't really use it to do anything so that's in host",
    "start": "1802000",
    "end": "1809520"
  },
  {
    "text": "denial of service and that's actually a a very nice moment for us because we got the first effect from the",
    "start": "1809520",
    "end": "1816320"
  },
  {
    "text": "container all the way up to the host and the first sort of a sandbox breakout",
    "start": "1816320",
    "end": "1821679"
  },
  {
    "text": "and a denial of services is nice right but we want to gain code execution so let's look at the mount redirection",
    "start": "1821679",
    "end": "1828159"
  },
  {
    "text": "you can also redirect not only the unmount operation of the image but also the mount operation of",
    "start": "1828159",
    "end": "1833360"
  },
  {
    "text": "the image and that's more interesting because the image as we as i've said kata is used to run",
    "start": "1833360",
    "end": "1838640"
  },
  {
    "text": "untrusted images so the image possibly is malicious so let's see how that attack will look like",
    "start": "1838640",
    "end": "1844159"
  },
  {
    "text": "uh so we are assuming that the kata agent now on the guest is malicious so the catalan time will tell it we're",
    "start": "1844159",
    "end": "1850640"
  },
  {
    "text": "about to create a sandbox that's the sandbox id and now using that message the qatar agent can know",
    "start": "1850640",
    "end": "1856480"
  },
  {
    "text": "where in the shared directory the catalog time is about to bind mount a the container image and it can create",
    "start": "1856480",
    "end": "1862559"
  },
  {
    "text": "a sim link at that path that will actually be followed by the catalog time when it tries to bind the container",
    "start": "1862559",
    "end": "1869120"
  },
  {
    "text": "image and now that untrusted possibly malicious container image can be will be mounted over a path on",
    "start": "1869120",
    "end": "1876000"
  },
  {
    "text": "the host that the k that the guest decides on so and there's those are the several",
    "start": "1876000",
    "end": "1881600"
  },
  {
    "text": "very interesting paths that the guest could they choose like slash bin or slash lib which will allow a pretty easy",
    "start": "1881600",
    "end": "1888960"
  },
  {
    "text": "code execution on the host but the problem with this attack that is that we assumed that the kata agent",
    "start": "1888960",
    "end": "1896799"
  },
  {
    "text": "is compromising that the guest is malicious even before the container starts running on the guest right because if if it's before the",
    "start": "1896799",
    "end": "1904480"
  },
  {
    "text": "container images bind mounted to the shell directory then of course that the container isn't",
    "start": "1904480",
    "end": "1909919"
  },
  {
    "text": "running on the guest so we actually need we actually need a way to compromise the guest before the container runs",
    "start": "1909919",
    "end": "1916559"
  },
  {
    "text": "and we don't have a way to do that right now right we only have a way to get gain code execution on the guest from",
    "start": "1916559",
    "end": "1921840"
  },
  {
    "text": "the container and that task so in order to do that we look at cloud hypervisor",
    "start": "1921840",
    "end": "1928000"
  },
  {
    "text": "and an issue and vulnerability that i found in how kata uses it so cloud hypervisor to remind you is one",
    "start": "1928000",
    "end": "1934000"
  },
  {
    "text": "of the free virtual machines monitor virtual machine monitor options of qatar and when i tried the container to guest a",
    "start": "1934000",
    "end": "1941360"
  },
  {
    "text": "breakout on a cutter with cloud hypervisor i noticed that kata stopped working after that i",
    "start": "1941360",
    "end": "1947039"
  },
  {
    "text": "couldn't run any container and when i inspected the virtual machine image i saw that the cutter agent",
    "start": "1947039",
    "end": "1953120"
  },
  {
    "text": "a binary on that on the virtual machine image actually contained garbage data",
    "start": "1953120",
    "end": "1958320"
  },
  {
    "text": "and that's really concerning because that was the garbage data that i wrote to hard disk on the",
    "start": "1958320",
    "end": "1963760"
  },
  {
    "text": "from the container meaning that from one con from in one guest any changes that we",
    "start": "1963760",
    "end": "1970000"
  },
  {
    "text": "make to the guest hard disk under cloud hypervisor are propagated to the virtual machine image on the",
    "start": "1970000",
    "end": "1976000"
  },
  {
    "text": "host meaning that one guest can control the hard disk of all future guests and because all virtual",
    "start": "1976000",
    "end": "1982880"
  },
  {
    "text": "machine monitors use the same virtual machine image to set up the the guest this means that",
    "start": "1982880",
    "end": "1988240"
  },
  {
    "text": "one guest can control every future guest regardless of what virtual machine monitor",
    "start": "1988240",
    "end": "1993919"
  },
  {
    "text": "it uses and that's really bad for multi-tenancy right and beside from being a pretty severe",
    "start": "1993919",
    "end": "1999679"
  },
  {
    "text": "issue by itself that one guest can control of all future guests it's also a way for us",
    "start": "1999679",
    "end": "2005279"
  },
  {
    "text": "uh to gain code execution on the host because we now can exploit the monthly",
    "start": "2005279",
    "end": "2010559"
  },
  {
    "text": "direction right we needed a way to for the guest to be compromised even before the container",
    "start": "2010559",
    "end": "2015679"
  },
  {
    "text": "runs but if we have a way to compromise the a the virtual machine image that means",
    "start": "2015679",
    "end": "2023200"
  },
  {
    "text": "that the guest can be malicious from the moment it boots right so we can it can actually",
    "start": "2023200",
    "end": "2028240"
  },
  {
    "text": "create the malicious symlink before the container is started so if it's still not that clear let's see",
    "start": "2028240",
    "end": "2034880"
  },
  {
    "text": "how that full attack will look like so we are now seeing a full container to host code execution",
    "start": "2034880",
    "end": "2040159"
  },
  {
    "text": "it will require the victim to run our container twice on the system but that's a pretty",
    "start": "2040159",
    "end": "2046640"
  },
  {
    "text": "acceptable expect that's pretty uh a pretty normal uh requirement because",
    "start": "2046640",
    "end": "2053599"
  },
  {
    "text": "most people an automated system if the first container crashes it will just try to run it again",
    "start": "2053599",
    "end": "2058878"
  },
  {
    "text": "so let's see how it works the first the first time the malicious container is executed is executed under cloud",
    "start": "2058879",
    "end": "2065839"
  },
  {
    "text": "hypervisor and it uses the direct device access vulnerability that we found",
    "start": "2065839",
    "end": "2071280"
  },
  {
    "text": "to change override the cart agent binary on the hard disk with a malicious version now because we are running under cloud",
    "start": "2071280",
    "end": "2076878"
  },
  {
    "text": "hypervisor that malicious version is going to be propagated and committed to the virtual machine image meaning that the next time",
    "start": "2076879",
    "end": "2085118"
  },
  {
    "text": "a guest will be run it will run with our malicious qatar agent right from the",
    "start": "2085119",
    "end": "2092000"
  },
  {
    "text": "moment it boots so now that malicious cutter agent on the second container run can exploit the mount redirection issue",
    "start": "2092000",
    "end": "2098800"
  },
  {
    "text": "create the sim link and redirect our malicious image to whenever on the host we want",
    "start": "2098800",
    "end": "2105040"
  },
  {
    "text": "to gain code execution on the host so let's see a demo for that attack",
    "start": "2105040",
    "end": "2111599"
  },
  {
    "text": "so we will be trying to mount the container image over slash bin on the host and we can",
    "start": "2114960",
    "end": "2120480"
  },
  {
    "text": "see that slash bin is completely normal right now",
    "start": "2120480",
    "end": "2125119"
  },
  {
    "text": "so we'll run the container under kata with cloud hypervisor and the first container",
    "start": "2128079",
    "end": "2133280"
  },
  {
    "text": "will replace the qatar agent uh the kite agent binary on the virtual machine image exploiting a the",
    "start": "2133280",
    "end": "2140400"
  },
  {
    "text": "vulnerabilities that we discussed and now the next time our malicious say",
    "start": "2140400",
    "end": "2145599"
  },
  {
    "text": "container image is executed it will be running under a with under a malicious guest",
    "start": "2145599",
    "end": "2151040"
  },
  {
    "text": "right and that malicious guest could exploit the redirection vulnerability that we found to redirect the image over bin and now",
    "start": "2151040",
    "end": "2158400"
  },
  {
    "text": "if we want to if we check out what hap what's happening on bin in the content in the host we can see",
    "start": "2158400",
    "end": "2164400"
  },
  {
    "text": "that it has a completely different files and that's actually the files of our malicious container file system and if we now",
    "start": "2164400",
    "end": "2171119"
  },
  {
    "text": "try to execute something from a inside the fro a binary that is inside bin we can",
    "start": "2171119",
    "end": "2177760"
  },
  {
    "text": "now see that the malicious version of that binary is running on the host and we actually got code execution from",
    "start": "2177760",
    "end": "2182800"
  },
  {
    "text": "the container all the way up to the host so that's great",
    "start": "2182800",
    "end": "2187839"
  },
  {
    "text": "right we we set up what we wanted to accomplish in the start we got code execution on the host from inside the container",
    "start": "2187839",
    "end": "2195520"
  },
  {
    "text": "and really the underlying issues here uh show how the the share directory is really a big",
    "start": "2195520",
    "end": "2200720"
  },
  {
    "text": "attack surface for virtual machines right we saw two issues with host app with a host applications",
    "start": "2200720",
    "end": "2206400"
  },
  {
    "text": "that interact with the shared directory right uh the mountain and mount redirection issue",
    "start": "2206400",
    "end": "2211920"
  },
  {
    "text": "uh that we found that we found that could be exploited and that could be used to trick the",
    "start": "2211920",
    "end": "2218160"
  },
  {
    "text": "qatar run time so there could be issues with the host application uh accessing the shared directory",
    "start": "2218160",
    "end": "2223760"
  },
  {
    "text": "but there could also be issue with the mechanism itself of the shared directory normally there is some process on the host that",
    "start": "2223760",
    "end": "2230079"
  },
  {
    "text": "manages the share directory and you can actually find the issues with that and i found one of those",
    "start": "2230079",
    "end": "2235280"
  },
  {
    "text": "issues that could allow in qatar to launch a denial of service attack but we won't get into that i just wanted to to",
    "start": "2235280",
    "end": "2241520"
  },
  {
    "text": "let you know that the mechanism itself could also be abused so what attacks that we saw today we saw",
    "start": "2241520",
    "end": "2247520"
  },
  {
    "text": "a container to guest a breakout using direct device access and exploiting the lack of a device group using a breakout new",
    "start": "2247520",
    "end": "2255280"
  },
  {
    "text": "breakout technique and we also saw a guest to host unmount operation right which we could have used",
    "start": "2255280",
    "end": "2261680"
  },
  {
    "text": "to launch a denial of service attack on the on the host we also saw a way for one guest",
    "start": "2261680",
    "end": "2266800"
  },
  {
    "text": "to compromise future guests under cloud hypervisor and we also found a way for one guest to gain code execution",
    "start": "2266800",
    "end": "2273119"
  },
  {
    "text": "on the host by redirecting the malicious image mount and i also briefly discussed a denial of",
    "start": "2273119",
    "end": "2279760"
  },
  {
    "text": "service issue that could be found in the shared directory mechanism itself now all of those attacks could be",
    "start": "2279760",
    "end": "2285200"
  },
  {
    "text": "chained together all of those vulnerabilities can be chained together to perform a number of attacks",
    "start": "2285200",
    "end": "2290960"
  },
  {
    "text": "on the host and i showed some of them today all of those issues i've disclosed them",
    "start": "2290960",
    "end": "2297359"
  },
  {
    "text": "to cutter containers maintainers they of course they were fixed and you can read more at this",
    "start": "2297359",
    "end": "2302480"
  },
  {
    "text": "directory and aside from seeing like a cool exploit chain and a sandbox sandbox",
    "start": "2302480",
    "end": "2310560"
  },
  {
    "text": "breakout what can we really learn from this research so first of all i want i hope you now understand that uh more",
    "start": "2310560",
    "end": "2317200"
  },
  {
    "text": "about container security and understand that containers are only as secure as their configuration",
    "start": "2317200",
    "end": "2322400"
  },
  {
    "text": "right and a simple way to improve the their configuration and security is to drop",
    "start": "2322400",
    "end": "2328160"
  },
  {
    "text": "unused privileges um the breakout that we saw today uh relied on cup make note right",
    "start": "2328160",
    "end": "2337359"
  },
  {
    "text": "and it's a great example for that because a cup make note most containers have that capability but",
    "start": "2337359",
    "end": "2343280"
  },
  {
    "text": "almost none of them actually need it right an ngx container doesn't need to create device files and interact with",
    "start": "2343280",
    "end": "2348880"
  },
  {
    "text": "them in any way so today we the point is that today we saw a breakout in cut a container that",
    "start": "2348880",
    "end": "2353920"
  },
  {
    "text": "relies on the magnet capability but tomorrow it's another breakout right in a different container runtime that",
    "start": "2353920",
    "end": "2359760"
  },
  {
    "text": "relies on another capability that your containers have but they don't use so the point is you",
    "start": "2359760",
    "end": "2366079"
  },
  {
    "text": "really should remove capabilities and privileges from the container which it doesn't use",
    "start": "2366079",
    "end": "2372640"
  },
  {
    "text": "the second thing you need to do is to beside further dropping capabilities is",
    "start": "2372640",
    "end": "2378880"
  },
  {
    "text": "to further restrict the container using some best practices",
    "start": "2378880",
    "end": "2384000"
  },
  {
    "text": "and history shows that all of those vulnerabilities that i've talked all of the types of issues that i've talked about in the container",
    "start": "2384000",
    "end": "2390800"
  },
  {
    "text": "escopology part most of them or a lot of them could have been mitigated by simply applying best",
    "start": "2390800",
    "end": "2396320"
  },
  {
    "text": "practices like username spaces or running the container as an unknown as the no note user and",
    "start": "2396320",
    "end": "2402079"
  },
  {
    "text": "that those type of things should really be the number one thing you do if you're trying to improve the security",
    "start": "2402079",
    "end": "2407440"
  },
  {
    "text": "of your containers but we also saw a we also talked about sandboxes today",
    "start": "2407440",
    "end": "2413359"
  },
  {
    "text": "and sandboxes do limit the attack surface right but i want to clarify there aren't magical solutions that",
    "start": "2413359",
    "end": "2419920"
  },
  {
    "text": "an attackers would find way to break out so the point here is don't bet all of your chips on a on one",
    "start": "2419920",
    "end": "2426880"
  },
  {
    "text": "bag right don't only rely on the sandbox you should really be",
    "start": "2426880",
    "end": "2434160"
  },
  {
    "text": "prepared for that sandbox to be broken up broken out of it should be an enhancement and not a replacement",
    "start": "2434160",
    "end": "2440319"
  },
  {
    "text": "of your coin security features and the final thing that if you do decide to use a sandbox",
    "start": "2440319",
    "end": "2445599"
  },
  {
    "text": "you should get you should really get the full potential out of it and enable its security features cutter for example has",
    "start": "2445599",
    "end": "2452400"
  },
  {
    "text": "some security features that aren't enabled by default that could have been useful to mitigate one of the attacks that we",
    "start": "2452400",
    "end": "2458319"
  },
  {
    "text": "saw today so that's really all i have for you today i hope that you enjoyed it that",
    "start": "2458319",
    "end": "2464000"
  },
  {
    "text": "you learn about the container security a bit and i'll be happy to take any questions",
    "start": "2464000",
    "end": "2469520"
  },
  {
    "text": "broken up broken out of it should be an enhancement and not a replacement of your coin security features and the",
    "start": "2476960",
    "end": "2484319"
  },
  {
    "text": "final thing that is yep",
    "start": "2484319",
    "end": "2489920"
  },
  {
    "text": "oh i'm live hi guys so i'll just go over any remaining",
    "start": "2492400",
    "end": "2499440"
  },
  {
    "text": "questions",
    "start": "2499440",
    "end": "2501920"
  },
  {
    "text": "hi guys can you win still equine",
    "start": "2518400",
    "end": "2524160"
  },
  {
    "text": "how bad is it can i uh",
    "start": "2525839",
    "end": "2536960"
  },
  {
    "text": "so guys it turns out i'm echoing uh so i'll answer any questions that you may have on the chat that you",
    "start": "2536960",
    "end": "2543200"
  },
  {
    "text": "may have left i hope you enjoyed it and see you in the rest of the conference bye",
    "start": "2543200",
    "end": "2551838"
  }
]