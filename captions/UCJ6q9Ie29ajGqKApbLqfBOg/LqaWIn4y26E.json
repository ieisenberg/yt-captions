[
  {
    "start": "0",
    "end": "107000"
  },
  {
    "text": "you are currently in Jasmine and the session you are in is Battle of the skm",
    "start": "520",
    "end": "5960"
  },
  {
    "text": "andum how Windows 10 rites OS architecture and your speaker is Alex",
    "start": "5960",
    "end": "11400"
  },
  {
    "text": "uncu uh thank you for putting your phone on vibrate in advance um this session will probably take the full allocations",
    "start": "11400",
    "end": "18480"
  },
  {
    "text": "so I don't know if there will be Q&A time here but Alex has kindly offered to stay around so if anyone wants to approach him during coffee break please",
    "start": "18480",
    "end": "24840"
  },
  {
    "text": "do thank you very much [Applause]",
    "start": "24840",
    "end": "34040"
  },
  {
    "text": "thank you so um welcome to uh my talk about skm and ium um what those words",
    "start": "34040",
    "end": "40600"
  },
  {
    "text": "mean and uh what the changes are uh in Windows 10 regarding that um brief",
    "start": "40600",
    "end": "45719"
  },
  {
    "text": "little bu about myself I'm currently Chief Architect at crra strike which is a security startup um but most of my OS",
    "start": "45719",
    "end": "52079"
  },
  {
    "text": "experience comes from having worked um at Apple on the iOS core team as well as having reverse engineered windows for",
    "start": "52079",
    "end": "58199"
  },
  {
    "text": "pretty much the last uh 15 years um which led me to be a co-author of the W's internals books which are really",
    "start": "58199",
    "end": "63960"
  },
  {
    "text": "great sleeping material if you ever have time uh problems going to bed um so I like to focus a lot on design issues",
    "start": "63960",
    "end": "70920"
  },
  {
    "text": "design flaws but also sometimes things that are really well implemented and that don't actually have any of the",
    "start": "70920",
    "end": "76040"
  },
  {
    "text": "above uh which is what this Talk's going to be about so U I'm not going to be dropping any OD days or vulnerabilities",
    "start": "76040",
    "end": "81520"
  },
  {
    "text": "rather I'm going to talk about some dramatic I find changes the OS architecture and U kind of open up some",
    "start": "81520",
    "end": "87799"
  },
  {
    "text": "questions and some thoughts about what that means for the future of uh platform security so Microsoft is basically",
    "start": "87799",
    "end": "95200"
  },
  {
    "text": "investing uh a lot of resources into what they call virtualization based security or VBS and Windows 10 and sir6",
    "start": "95200",
    "end": "103520"
  },
  {
    "text": "are implementing three features um to cover that which are um device guard",
    "start": "103520",
    "end": "109159"
  },
  {
    "start": "107000",
    "end": "107000"
  },
  {
    "text": "credential guard uh virtual TPM which they uh take part of a feature called",
    "start": "109159",
    "end": "114680"
  },
  {
    "text": "guarded Fabric or shielded VM now there's very little documentation so far",
    "start": "114680",
    "end": "119920"
  },
  {
    "text": "on a lot of these features it is slowly starting to U come up live there's a few blog posts there are a few presentations",
    "start": "119920",
    "end": "125799"
  },
  {
    "text": "from Microsoft um and there was a talk yesterday actually on credential guard so those of you who attended that talk",
    "start": "125799",
    "end": "131280"
  },
  {
    "text": "credential guard does use uh basically what I'm going to be talking about in this talk now I'm not going to be",
    "start": "131280",
    "end": "136599"
  },
  {
    "text": "talking about devis guard credential guard or um fabric guard those are things that Microsoft will Market",
    "start": "136599",
    "end": "142640"
  },
  {
    "text": "themselves I'm going to talk and go deep into the actual architecture that makes all those features um work which is",
    "start": "142640",
    "end": "149200"
  },
  {
    "text": "called virtual secure mode or vssm um as of last night there's also really good",
    "start": "149200",
    "end": "154360"
  },
  {
    "text": "talk on Channel 9 on a going deep uh series that also covers some of what I'll be talking about in here so I have",
    "start": "154360",
    "end": "160959"
  },
  {
    "text": "a few references throughout the presentation um for those of you that want to go uh deeper into that so I'll",
    "start": "160959",
    "end": "166480"
  },
  {
    "text": "start with a very brief recap of what those guard features are and then we're going to take a look at how vssm is architected um how it starts up and then",
    "start": "166480",
    "end": "174159"
  },
  {
    "text": "how scam and ium function um both being the kind of the privileged side of the",
    "start": "174159",
    "end": "179400"
  },
  {
    "text": "vssm and the um user M side then we'll talk about something called trust lets how they run how they execute and also",
    "start": "179400",
    "end": "186120"
  },
  {
    "text": "I'll show you kind of a demo of um you know a third party trust which is not supported by the architecture but just",
    "start": "186120",
    "end": "191959"
  },
  {
    "text": "to kind of show you what that would look like um and how trusts are developed and then we'll wrap up with some kind of",
    "start": "191959",
    "end": "197519"
  },
  {
    "text": "thoughts about what this really means and um potential Avenues of attack or things that could be a little bit better",
    "start": "197519",
    "end": "203480"
  },
  {
    "text": "improved uh in here so let's talk about some of the new things that are coming up which you may hear about when one of",
    "start": "203480",
    "end": "209920"
  },
  {
    "start": "209000",
    "end": "209000"
  },
  {
    "text": "them is the VIS guard um and there's a presentation RSA about that so with the guard essentially as an Enterprise you",
    "start": "209920",
    "end": "215959"
  },
  {
    "text": "can now decide what's going to run on your machines um using Code signing policies and create your own",
    "start": "215959",
    "end": "222120"
  },
  {
    "text": "certificates and sign your own binaries and determine what's going to run and what's not going to run now this sounds similar to app locker but what's",
    "start": "222120",
    "end": "228840"
  },
  {
    "text": "different is that ass signing checks are actually done by a component that's um supported through virtualization so it's",
    "start": "228840",
    "end": "234920"
  },
  {
    "text": "not the kernel that's doing the signature checks anymore it's actually a component U through the hypervisor that",
    "start": "234920",
    "end": "240480"
  },
  {
    "text": "I'll talk about credential guard which was uh presented yesterday here at black hat uses the same virtualization",
    "start": "240480",
    "end": "247200"
  },
  {
    "text": "technology but in this case to actually guard cryptographic Secrets um so like your",
    "start": "247200",
    "end": "252480"
  },
  {
    "text": "Elsas um secrets for example your ntlm hash your curb Bros TGT ticket those",
    "start": "252480",
    "end": "258079"
  },
  {
    "text": "things can now be hidden away and guarded Fabric and virtual TPM um is a feature that was talked about at ignite",
    "start": "258079",
    "end": "264720"
  },
  {
    "text": "uh conference in Chicago in May and that has to do with the ability to protect um the VM that's running in a fabricc",
    "start": "264720",
    "end": "271800"
  },
  {
    "text": "provider for example in a cloud provider from the actual host so you can now have a VM that's encrypted that uses bid",
    "start": "271800",
    "end": "276960"
  },
  {
    "text": "Locker uh run it on Azure let's say and whoever actually owns the virtualization infrastructure can't attack your VM so",
    "start": "276960",
    "end": "284240"
  },
  {
    "text": "you can read about all these features in official Microsoft Publications but I'll talk about kind of what powers um all",
    "start": "284240",
    "end": "289960"
  },
  {
    "text": "these things working together and you can turn all of these on today in Windows 10 um through the registry",
    "start": "289960",
    "end": "296080"
  },
  {
    "text": "there's a few registry keys to do that um there's Windows features uh that you can enable to turn this on in his group",
    "start": "296080",
    "end": "301400"
  },
  {
    "text": "policy as well so um there's different ways to kind of enable this this functionality but we're here to talk",
    "start": "301400",
    "end": "307199"
  },
  {
    "text": "about vssm specifically virtual secure mode which is what provides um all of this uh",
    "start": "307199",
    "end": "313960"
  },
  {
    "text": "functionality so how does this all work well as of the new hypervisor that's in Windows 10 and ser2 a virtual processor",
    "start": "313960",
    "end": "321400"
  },
  {
    "start": "315000",
    "end": "315000"
  },
  {
    "text": "now has an attribute called a vtl or virtual trust level now today there's two vtls there can be more in the future",
    "start": "321400",
    "end": "328720"
  },
  {
    "text": "and the higher the vtl is the more privileged you're going to be and the nice thing here is since you're going up",
    "start": "328720",
    "end": "334880"
  },
  {
    "text": "you're not going to end up with those ring minus one ring minus two problems you can just keep creating higher and higher vtls so vtl Z is what you can",
    "start": "334880",
    "end": "342520"
  },
  {
    "text": "call normal world or normal mode this is where kind of standard uh code can execute and vtl 1 is what you can call",
    "start": "342520",
    "end": "350120"
  },
  {
    "text": "secure world or secure mode and it is a more privileged level above vl0 provided",
    "start": "350120",
    "end": "355440"
  },
  {
    "text": "by the hypervisor now these vtls they're orthogonal through the ring levels so",
    "start": "355440",
    "end": "360960"
  },
  {
    "text": "you can be ring zero which is Kernel mode in vtl 0 that doesn't give you",
    "start": "360960",
    "end": "366120"
  },
  {
    "text": "access over vtl 1 unless you're ring zero in vtl one as well so you've got your ring levels that are kind of your",
    "start": "366120",
    "end": "371520"
  },
  {
    "text": "traditional uses and kernel boundaries but those ring levels are within a vtl and then horizontally you scale to other",
    "start": "371520",
    "end": "378120"
  },
  {
    "text": "vtls that provide their own ring levels within themselves as well so now you can kind of think of security as kind of",
    "start": "378120",
    "end": "384400"
  },
  {
    "text": "local within a vtl which is your ring level and then spreading across vtls as well now this essentially uses um what",
    "start": "384400",
    "end": "391960"
  },
  {
    "text": "you probably know a slat or EP or npt nested page tables extended page tables",
    "start": "391960",
    "end": "397080"
  },
  {
    "text": "or second level address translation which is what um CPUs that support harder virtualization allow hypervisors",
    "start": "397080",
    "end": "403440"
  },
  {
    "text": "to have their own view of what physical Pages correspond what virtual Pages",
    "start": "403440",
    "end": "409080"
  },
  {
    "text": "correspond to what physical pages and you're probably familiar with page table entries which is where the OS defines",
    "start": "409080",
    "end": "414720"
  },
  {
    "text": "this virtual address is readable or writable and points to this physical address but with the hypervisor even the",
    "start": "414720",
    "end": "419840"
  },
  {
    "text": "OS thinks that a page exists and is executable for example the hypervisor can say well actually no it doesn't",
    "start": "419840",
    "end": "426319"
  },
  {
    "text": "exist or yes it exist but it's not executable so the hypervisor can basically provide its own additional",
    "start": "426319",
    "end": "431919"
  },
  {
    "text": "layer of translation that overrides what the OS thinks so now you can do interesting things like for example",
    "start": "431919",
    "end": "437520"
  },
  {
    "text": "blocking read to a page that even the OS can't touch now and credential guard uses that if I stole your secrets in a",
    "start": "437520",
    "end": "444919"
  },
  {
    "text": "page that only let's say the hypervisor can read or something at vl1 can read then nothing can read those Secrets even",
    "start": "444919",
    "end": "451120"
  },
  {
    "text": "if they're running in ring zero because they're in ring zero in vtl um zero not in vtl 1 and so this lets you guard and",
    "start": "451120",
    "end": "460240"
  },
  {
    "text": "protect data you can block execution permissions which is what device guard uses so you can say sure the OS kernel",
    "start": "460240",
    "end": "466919"
  },
  {
    "text": "thinks that this page is executable but when we verifi the code Integrity through the hypervisor functionality um",
    "start": "466919",
    "end": "473280"
  },
  {
    "text": "it did not match the signature that the Enterprise wanted so I'm not actually going to make the page executable in the",
    "start": "473280",
    "end": "479479"
  },
  {
    "text": "extend in page tables so the CPU actually won't execute that code even though the OS thinks it's executable or",
    "start": "479479",
    "end": "485159"
  },
  {
    "text": "your exploit flips a bit to Mark the page executable that doesn't matter EPT still say the page isn't and you can",
    "start": "485159",
    "end": "491360"
  },
  {
    "text": "block rights as well so you can have critical data that even the kernel can't touch because the kernels running in",
    "start": "491360",
    "end": "497240"
  },
  {
    "text": "btl0 which is normal world and so basically by segregating memory access we can now provide two separate um",
    "start": "497240",
    "end": "504159"
  },
  {
    "text": "privilege levels through the hypervisor now the hypervisor doesn't actually implement",
    "start": "504159",
    "end": "510080"
  },
  {
    "start": "507000",
    "end": "507000"
  },
  {
    "text": "all of this logic to provide device guard and credential guard um and and guarded VM this would make the",
    "start": "510080",
    "end": "517159"
  },
  {
    "text": "hypervisor too complex and we want to keep the complexity of hypervisor low so that it doesn't have too much kind of H",
    "start": "517159",
    "end": "523399"
  },
  {
    "text": "surface of attack now within hyperv there's something that's called a partition and typically when you enable",
    "start": "523399",
    "end": "529360"
  },
  {
    "text": "hyperv your host OS boots in What's called the root partition and then your guest VMS have child partitions unless",
    "start": "529360",
    "end": "536480"
  },
  {
    "text": "you actually boot up other VMS all you have those the root partition now before hyperv fully trusted the root partition",
    "start": "536480",
    "end": "543320"
  },
  {
    "text": "and the root partition could do everything it wanted through the hypervisor and everything else with vssm",
    "start": "543320",
    "end": "548360"
  },
  {
    "text": "though now your root partition first starts out in BTL 1 so you start out in the more privileged mode in the secure",
    "start": "548360",
    "end": "555120"
  },
  {
    "text": "mode now code that's running there can then set up the EP entries as needed and then we drop down to vtl 0 and",
    "start": "555120",
    "end": "561600"
  },
  {
    "text": "everything now runs in vtl 0 Which is less privileged kind of like your machine starts up in ring zero and then",
    "start": "561600",
    "end": "567320"
  },
  {
    "text": "you lower it down to ring three same happens at a hypervisor so with vssm now the hypervisor no longer implicitly",
    "start": "567320",
    "end": "573519"
  },
  {
    "text": "trusts the root partition there's this vtl attribute that tells us how privileged you are within that",
    "start": "573519",
    "end": "579600"
  },
  {
    "text": "world so instead of loading your normal kernel and all of its drivers and with k",
    "start": "579600",
    "end": "585959"
  },
  {
    "text": "out CIS and all the mess that comes in your usual ring zero environment we don't actually load all of NT inside of",
    "start": "585959",
    "end": "592320"
  },
  {
    "text": "vl1 now so what's actually going to happen is we're going to create two environments uh of execution the secure",
    "start": "592320",
    "end": "598959"
  },
  {
    "text": "k environment or skm which runs at ring zero in vtl 1 and the isolated user mode",
    "start": "598959",
    "end": "604880"
  },
  {
    "text": "environment which runs at ring three in vtl 1 so skm is basically the kernel vtl",
    "start": "604880",
    "end": "611360"
  },
  {
    "text": "1 ium is the user mode environment at vtl 1 now the secure kernel mode",
    "start": "611360",
    "end": "616920"
  },
  {
    "text": "includes a little kernel which is called uh SK the secure kernel or sometimes you'll see it called the smart kernel",
    "start": "616920",
    "end": "623440"
  },
  {
    "text": "the secure mode application runtime and it only has two modules skci which provides code integrity and CNG which",
    "start": "623440",
    "end": "630200"
  },
  {
    "text": "provides cryptography there's nothing else there's no how there's no win k.st there's no drivers and the kernel itself",
    "start": "630200",
    "end": "636880"
  },
  {
    "text": "is only about 300 kilobytes it's not your standard 8 megabyte antiel in",
    "start": "636880",
    "end": "642480"
  },
  {
    "text": "isolated user mode you run what are called trls trusts we're going to see are little processes that run in vl1 and",
    "start": "642480",
    "end": "648800"
  },
  {
    "text": "they're isolated from each others and they're Limited in what they can do when they do system calls their system calls",
    "start": "648800",
    "end": "654399"
  },
  {
    "text": "first go through skm through the secure kernel and then it decides which of those system calls to implement and",
    "start": "654399",
    "end": "659480"
  },
  {
    "text": "we'll see there's a real limited number of system calls that are allowed for trls they don't talk to csrss for",
    "start": "659480",
    "end": "665040"
  },
  {
    "text": "example there's no shimming there's no app compat engine and they can only load dlls that are approved for execution in",
    "start": "665040",
    "end": "670920"
  },
  {
    "text": "this environment and we're going to see how the approval process works everything else in vtl zero Remains the",
    "start": "670920",
    "end": "676320"
  },
  {
    "text": "Same um so you've got your anti kernel and toss and it runs through what you can sometimes call the high level OS H",
    "start": "676320",
    "end": "682760"
  },
  {
    "text": "loss now it's important to note that the user mode environment is essentially identical across vl1 and btl0 so it's",
    "start": "682760",
    "end": "689560"
  },
  {
    "text": "the same kernel 32 binary the same ADV vapu 32 binary um but you are limited in",
    "start": "689560",
    "end": "694680"
  },
  {
    "text": "what DL you can load but you don't get a separate user mode environment in the kernel though you do have a separate kernel um which which runs which is",
    "start": "694680",
    "end": "701639"
  },
  {
    "text": "different from the anti kernel so this is basically what it looks like you've got your vtls that are kind of",
    "start": "701639",
    "end": "707079"
  },
  {
    "start": "703000",
    "end": "703000"
  },
  {
    "text": "horizontal and your ring levels that are basically vertical and you have your binary that's running as the tret here",
    "start": "707079",
    "end": "714279"
  },
  {
    "text": "and it's importing the standard Windows dlls which talk to the standard windows carel 32 which talks at a standard ndl",
    "start": "714279",
    "end": "722360"
  },
  {
    "text": "but now those system calls go through the secure kernel and we're going to see doesn't implement the system calls the ones that it does allow you to use it'll",
    "start": "722360",
    "end": "729480"
  },
  {
    "text": "proxy them to OS to do them there on the other hand you in this environment also",
    "start": "729480",
    "end": "735480"
  },
  {
    "text": "will have access to what we're going to see are called secure system calls which go through a separate dll which goes",
    "start": "735480",
    "end": "741160"
  },
  {
    "text": "through another dll which then goes through the skm and these are additional facilities that are provided if you're a",
    "start": "741160",
    "end": "747760"
  },
  {
    "text": "trust L and I'm going to see with some of those facilities are now for this to actually be secure",
    "start": "747760",
    "end": "754199"
  },
  {
    "start": "751000",
    "end": "751000"
  },
  {
    "text": "the boot loader which is setting all this up needs to trust the firmware in the platform because otherwise if I boot",
    "start": "754199",
    "end": "760120"
  },
  {
    "text": "up when I'm setting all this up the thing that runs a vl1 is malicious well then it's running like it's like running",
    "start": "760120",
    "end": "765240"
  },
  {
    "text": "malicious Cod of ring zero but only worse so secure boot provides this guarantee now the hypervisor also needs",
    "start": "765240",
    "end": "770600"
  },
  {
    "text": "to trust that you can't use dma to attack vt1 Pages because dma is direct",
    "start": "770600",
    "end": "775880"
  },
  {
    "text": "memory access through physical pages and it bypasses whatever EP protections you may have put into place so we rely onu",
    "start": "775880",
    "end": "783639"
  },
  {
    "text": "or vtd to provide this guarantee that dma cannot attack us and a hypervisor also needs to make sure that as it's",
    "start": "783639",
    "end": "789560"
  },
  {
    "text": "storing credentials and secrets it can store them in a safe place and seal them and measure them and a TPM provides this",
    "start": "789560",
    "end": "795639"
  },
  {
    "text": "guarantee now with all these three functionalities secure Boot immu and TPM",
    "start": "795639",
    "end": "800920"
  },
  {
    "text": "you have a as secure root of chain of trust as you can and VBS kind of requires all of these to be there to",
    "start": "800920",
    "end": "807959"
  },
  {
    "text": "provide and guarantee security now vssm will work if these are not all there you can run without secure boot",
    "start": "807959",
    "end": "814440"
  },
  {
    "text": "you can run without an IMU you can run without a TPM but then I can't guarantee those things anymore now your secrets",
    "start": "814440",
    "end": "819880"
  },
  {
    "text": "have to be on disk now dma can attack me now boot loader code can be malicious so really if these things are not all on",
    "start": "819880",
    "end": "826199"
  },
  {
    "text": "you don't have the same kind of layer of protection so part of what's running in",
    "start": "826199",
    "end": "831440"
  },
  {
    "start": "828000",
    "end": "828000"
  },
  {
    "text": "the secure kernel mode is that secure kernel but also this skci library and that's your hypervisor based code",
    "start": "831440",
    "end": "837240"
  },
  {
    "text": "Integrity or HCI this is kind of a identical is version of ci.dll which",
    "start": "837240",
    "end": "843720"
  },
  {
    "text": "runs um in in vtl Z as part of the normal uh kernel and it's what basically",
    "start": "843720",
    "end": "849480"
  },
  {
    "text": "checks for certificates checks for digital signing and when you enable what are called strong code guarantees",
    "start": "849480",
    "end": "855199"
  },
  {
    "text": "through rice guard it's going to be the thing that checks is this binary allowed to load that way even if your kernel is",
    "start": "855199",
    "end": "860800"
  },
  {
    "text": "exploited it's not the exploited kernel that's going to say yeah yeah this is allowed to load you have to exploit skm",
    "start": "860800",
    "end": "866880"
  },
  {
    "text": "which is a different vtl level and I need a h visor Bypass or something like that and so with the visard or with",
    "start": "866880",
    "end": "873519"
  },
  {
    "text": "strong code guarantees if you want to run code skm has to say yes make the",
    "start": "873519",
    "end": "878680"
  },
  {
    "text": "page executable and it's only going to do that if HCI validates the signature as being valid now you can also turn on",
    "start": "878680",
    "end": "885720"
  },
  {
    "start": "885000",
    "end": "885000"
  },
  {
    "text": "what are called hard code guarantees because the strong code guarantees that come with devis guard they only apply to",
    "start": "885720",
    "end": "891279"
  },
  {
    "text": "Kel mode drivers and the kernel itself with hard code guarantees you can make user mode behave this way as well and",
    "start": "891279",
    "end": "897800"
  },
  {
    "text": "you can have an Enterprise that says any executable any dll and even any Powershell script that's ever going to",
    "start": "897800",
    "end": "904519"
  },
  {
    "text": "run on this machine has to be signed and skm will validate if the signature is there or not and so if someone were to",
    "start": "904519",
    "end": "911920"
  },
  {
    "text": "turn us on well a almost nothing would run anymore but you'd have the most secure Windows environment you could",
    "start": "911920",
    "end": "917160"
  },
  {
    "text": "ever dream of because everything including even Anonymous executable memory would have to be signed and it'll",
    "start": "917160",
    "end": "923519"
  },
  {
    "text": "be impossible to execute any kind of onsign code here other than a dma vulnerability or attacking secur boot or",
    "start": "923519",
    "end": "929480"
  },
  {
    "text": "you know going to ring minus one or something like that so those a lot of information so those a little review normal World",
    "start": "929480",
    "end": "936360"
  },
  {
    "start": "932000",
    "end": "932000"
  },
  {
    "text": "secure World normal mode secure mode those are kind of two environments vssm or smart that's",
    "start": "936360",
    "end": "942880"
  },
  {
    "text": "basically the runtime the architecture that provides this isolation and the smart kernel or a secure kernel is the",
    "start": "942880",
    "end": "948399"
  },
  {
    "text": "kernel that runs inside vl1 skm H loss is the high level OS the normal world",
    "start": "948399",
    "end": "955360"
  },
  {
    "text": "and Os is the kernel that runs in the normal world I m is your isolated user mode which is your secure World in ring",
    "start": "955360",
    "end": "962079"
  },
  {
    "text": "3 skm is your secure and ring zero both of these in vtl 1 and the vtls again",
    "start": "962079",
    "end": "968000"
  },
  {
    "text": "they're your virtual trust level vtl Z is your normal mode vtl 1 is your secure mode and VBS is the set of Technologies",
    "start": "968000",
    "end": "975360"
  },
  {
    "text": "or features that are going to leverage what's there in vssm so how does this thing start up",
    "start": "975360",
    "end": "982120"
  },
  {
    "start": "982000",
    "end": "982000"
  },
  {
    "text": "well it's all done through the boot loader and so the hypervisor has vssm built into it and when you launch the",
    "start": "982120",
    "end": "988120"
  },
  {
    "text": "hypervisor with the BCD option hypervisor launch type this will start up the hypervisor which will kind of",
    "start": "988120",
    "end": "993680"
  },
  {
    "text": "initialize the VSM functionality but nothing will be running at vl1 yet when hypervisor is ready to launch there's a",
    "start": "993680",
    "end": "1000360"
  },
  {
    "text": "function that's going to basically load a hypervisor loader the hypervisor loader then initializes the hypervisor",
    "start": "1000360",
    "end": "1006279"
  },
  {
    "text": "then we drop back down on the boot loader and now the boot loader runs",
    "start": "1006279",
    "end": "1011240"
  },
  {
    "text": "hypervisor checks if vssm is turned if vssm is turned on and enabled for IM",
    "start": "1011680",
    "end": "1017240"
  },
  {
    "start": "1013000",
    "end": "1013000"
  },
  {
    "text": "functionality which is another CD variable called vssm launch type if it is we're then going to load a secure",
    "start": "1017240",
    "end": "1023560"
  },
  {
    "text": "kernel which is secure kernel. XE secure kernel. XE Imports skci and cng.sys we",
    "start": "1023560",
    "end": "1030959"
  },
  {
    "text": "load those binaries up we verify the signatures and we also basically set up everything that's needed for this then",
    "start": "1030959",
    "end": "1037360"
  },
  {
    "text": "we call the secure kernel so the first thing that's going to load in this environment is the secure Kel is the boot loader and then a secure kernel um",
    "start": "1037360",
    "end": "1043918"
  },
  {
    "text": "at dtl one and this is why secure boot is critical because if the boot loader is compromised in some way then this",
    "start": "1043919",
    "end": "1049520"
  },
  {
    "text": "whole process can be compromised and the thing that runs the vl1 is no longer trusted but barring secure boot",
    "start": "1049520",
    "end": "1055760"
  },
  {
    "text": "vulnerabilities or you turning off secure boot this whole process is validated through the signature checking",
    "start": "1055760",
    "end": "1061039"
  },
  {
    "text": "that secure boot provides now as part of doing that we're going to check your VSM policy and that comes from your group",
    "start": "1061039",
    "end": "1067120"
  },
  {
    "start": "1062000",
    "end": "1062000"
  },
  {
    "text": "policy settings it's going to come from the registry essentially there's this registry key I've got on the slide here device guard and that's going to Define",
    "start": "1067120",
    "end": "1074200"
  },
  {
    "text": "should we enable uh VBS should we uh require secure boot should we require an",
    "start": "1074200",
    "end": "1079880"
  },
  {
    "text": "immu um and should we use hypervisor based code integrity and based on whatever features are set this is going",
    "start": "1079880",
    "end": "1085960"
  },
  {
    "text": "to be passed on to the hypervisor and through vssm and a secure kernel which are going to decide What mechanisms to",
    "start": "1085960",
    "end": "1092640"
  },
  {
    "text": "uh adapt and so there's a bunch of options that are going to be set as this uh policy is happening now two",
    "start": "1092640",
    "end": "1100360"
  },
  {
    "start": "1093000",
    "end": "1093000"
  },
  {
    "text": "interesting options that were not very well documented when I did my research is MSR filtering and nxmm and these are",
    "start": "1100360",
    "end": "1107159"
  },
  {
    "start": "1104000",
    "end": "1104000"
  },
  {
    "text": "kind of two attacks you could do if you have the hypervisor code Integrity turned on the first one is device mapped",
    "start": "1107159",
    "end": "1113280"
  },
  {
    "text": "memory until Windows 10 there was no API to basically get non-executable device",
    "start": "1113280",
    "end": "1118880"
  },
  {
    "text": "map memory so when you called mm map IOP space you got executable memory in Windows 10 they added a feature to",
    "start": "1118880",
    "end": "1125039"
  },
  {
    "text": "basically have the driver's request to be non-executable but in Windows 8.1 for example chances are your V car's frame",
    "start": "1125039",
    "end": "1131720"
  },
  {
    "text": "buffer is actually executable so if you put code in there it can run now with",
    "start": "1131720",
    "end": "1137000"
  },
  {
    "text": "the hypervisor and VSM turned off on even if the drivers request those pages to be executable because that was a",
    "start": "1137000",
    "end": "1143280"
  },
  {
    "text": "default the EP pages will not be executable so now your frame buffer won't be executable even though your",
    "start": "1143280",
    "end": "1148600"
  },
  {
    "text": "driver is not updated the second type of attack is using msrs which your model specific registers on a CPU and these",
    "start": "1148600",
    "end": "1155440"
  },
  {
    "text": "lets you mess with a tlb and do things like tlb splitting and other kinds of cash pollution attacks and poisoning",
    "start": "1155440",
    "end": "1162200"
  },
  {
    "text": "well Microsoft has a list of msrs they consider dangerous and if you try to either read or write them there's",
    "start": "1162200",
    "end": "1167440"
  },
  {
    "text": "policies that going to prevent you from do doing that even from the hose based OS so they actually did a really good job at figuring out what are all the",
    "start": "1167440",
    "end": "1173840"
  },
  {
    "text": "attacks that you could Implement and try to mitigate against most of those so let's take a look at a little bit of the",
    "start": "1173840",
    "end": "1179400"
  },
  {
    "text": "internals of the skm so it's very similar to OS it's basically got ke etw",
    "start": "1179400",
    "end": "1185559"
  },
  {
    "start": "1181000",
    "end": "1181000"
  },
  {
    "text": "RTL dbg SC or usual kind of suspects um but it's also got some specific ium",
    "start": "1185559",
    "end": "1190640"
  },
  {
    "text": "functions uh what are called normal calls nks and it's got its own kind of object manager its own memory manager uh",
    "start": "1190640",
    "end": "1197320"
  },
  {
    "text": "its own Process Management function but these don't actually manage resources so I'm going to mention a little bit later these are basically just kind of micro",
    "start": "1197320",
    "end": "1205000"
  },
  {
    "text": "um components to provide basic functionality but secure kernel doesn't actually have a lot of uh kind of",
    "start": "1205000",
    "end": "1211679"
  },
  {
    "text": "doesn't have any resource management and doesn't have a lot of functionality it's very very small it also exports some",
    "start": "1211679",
    "end": "1217440"
  },
  {
    "text": "functions so that cng.sys and load um so things like allocating from the pool are now managed through skm uh some locking",
    "start": "1217440",
    "end": "1224320"
  },
  {
    "text": "functionalities are provided um by the secure kernel as well now if you're familiar with you know there's a PCR at",
    "start": "1224320",
    "end": "1230840"
  },
  {
    "start": "1227000",
    "end": "1227000"
  },
  {
    "text": "gs0 well SEC kernel has a structure there as well which you know we can call the SK PCR again n has a k thread",
    "start": "1230840",
    "end": "1238280"
  },
  {
    "text": "structure well here we have an SK thread structure so for every thread that's running secure mode there's a structure",
    "start": "1238280",
    "end": "1243919"
  },
  {
    "text": "for that and every time there's a process running in Secure mode there's a structure for that as well and we'll call it Escape process now unfortunately",
    "start": "1243919",
    "end": "1250799"
  },
  {
    "text": "un like the kernel where you have symbols for these structures there are no symbols so there's some offsets I put here through reverse engineering but",
    "start": "1250799",
    "end": "1257039"
  },
  {
    "text": "they might change and obviously there's these are not things you're going to be touching anyway but just to point out there are similar structures that mirror",
    "start": "1257039",
    "end": "1263360"
  },
  {
    "text": "what you have in a normal anti kernel now skm does provide a few kind of things that are not there in a normal",
    "start": "1263360",
    "end": "1269360"
  },
  {
    "start": "1265000",
    "end": "1265000"
  },
  {
    "text": "kernel um one of the things is called mailboxes and mailboxes allow you to basically communicate between ium and",
    "start": "1269360",
    "end": "1276240"
  },
  {
    "text": "code that's running inside of os so every process has eight mailbox slots and you can fill a slot with up to a",
    "start": "1276240",
    "end": "1282400"
  },
  {
    "text": "page of data then on the normal side there's a kernel API vssl retrieve mailbox and you can read one of these",
    "start": "1282400",
    "end": "1289240"
  },
  {
    "text": "mailboxes so it allows a TRL or an ium component to basically push some data",
    "start": "1289240",
    "end": "1294760"
  },
  {
    "text": "that can be read from the other side and we're going to see what uses this now there's also something called",
    "start": "1294760",
    "end": "1300440"
  },
  {
    "start": "1299000",
    "end": "1299000"
  },
  {
    "text": "capabilities that scam provides and capabilities determine which ium system calls that an ium component might call",
    "start": "1300440",
    "end": "1307679"
  },
  {
    "text": "are allowed by who so does an allow all policy a check trust L ID policy or a check tret instance guid policy every",
    "start": "1307679",
    "end": "1316120"
  },
  {
    "text": "time you launch something in ium it has a unique ID and the capabilities are going to determine which IDs are allowed to make",
    "start": "1316120",
    "end": "1322600"
  },
  {
    "text": "which calls so basically they can further log down and say this TRL can't do that thing now today the only thing",
    "start": "1322600",
    "end": "1328760"
  },
  {
    "text": "that uses that are two apis called Secure Storage get and Secure Storage put and the get can only be called by",
    "start": "1328760",
    "end": "1334679"
  },
  {
    "text": "tret id2 and the put can only be called by tret ID3 we going to mention what",
    "start": "1334679",
    "end": "1339880"
  },
  {
    "text": "those trets actually are so there is some knowledge in the skm about what trusts should exist and what are the",
    "start": "1339880",
    "end": "1345279"
  },
  {
    "text": "things they should be doing those storage you get and those storage put functions they're associated with what",
    "start": "1345279",
    "end": "1350559"
  },
  {
    "start": "1346000",
    "end": "1346000"
  },
  {
    "text": "are called storage blobs and storage blobs essentially allow two trls that",
    "start": "1350559",
    "end": "1355600"
  },
  {
    "text": "share different ID but a same instance to basically communicate between each others and we're going to see what",
    "start": "1355600",
    "end": "1361559"
  },
  {
    "text": "storage blobs are actually used for so mailboxes allow you to communicate from secure to normal storage blobs allow two",
    "start": "1361559",
    "end": "1367600"
  },
  {
    "text": "trust L to basically uh put and get data in a secured way now what SC scam provides are secure",
    "start": "1367600",
    "end": "1375679"
  },
  {
    "start": "1372000",
    "end": "1372000"
  },
  {
    "text": "mode calls and secure mode calls are things that in the secure kernel that NT may need to call so those are defined by",
    "start": "1375679",
    "end": "1383000"
  },
  {
    "text": "an operation code and a service code and there's three operations possible resuming a thread doing a secure service",
    "start": "1383000",
    "end": "1388840"
  },
  {
    "text": "call or flushing a tlb and from anos from normal world you perform a secure",
    "start": "1388840",
    "end": "1394720"
  },
  {
    "text": "call through the VM call instruction so you basically use the uh hypervisor Hardware extension to basically do this",
    "start": "1394720",
    "end": "1401320"
  },
  {
    "text": "you put 11 into rcx and this now takes you in V1 and you can do one of those operations so those service calls are",
    "start": "1401320",
    "end": "1408240"
  },
  {
    "start": "1406000",
    "end": "1406000"
  },
  {
    "text": "BAS basally things that OS needs to query for OS needs skm to do or Os needs",
    "start": "1408240",
    "end": "1414840"
  },
  {
    "text": "to tell skm about something so you can't allocate execu memory with a GCI turned",
    "start": "1414840",
    "end": "1420000"
  },
  {
    "text": "on so entos has to ask skm can you please allocate executable memory and",
    "start": "1420000",
    "end": "1425400"
  },
  {
    "text": "skm will decide to do that based on the signatures if you want to load an image in ium mode that has to be done by skm",
    "start": "1425400",
    "end": "1432600"
  },
  {
    "text": "if you want to flush a tlb well now that has to go through scam as well because the tlb affects epts as well hibernation",
    "start": "1432600",
    "end": "1439360"
  },
  {
    "text": "crash dump has to go through skm as well because now we want to encrypt those pages so anytime ENT needs something",
    "start": "1439360",
    "end": "1445080"
  },
  {
    "text": "from skm the secure remote service call is going to let us do that now there's some specialized ones as well um they're",
    "start": "1445080",
    "end": "1451559"
  },
  {
    "start": "1449000",
    "end": "1449000"
  },
  {
    "text": "kind of interesting so there is a special call for doing etw so you can actually Trace from an IM component and",
    "start": "1451559",
    "end": "1457120"
  },
  {
    "text": "you can turn tracing on in normal mode and see the traces that are coming from secure mode obviously Microsoft needs a",
    "start": "1457120",
    "end": "1462600"
  },
  {
    "text": "way to actually debug these things and there's also failure failure log pages that you can turn on which gives you",
    "start": "1462600",
    "end": "1468080"
  },
  {
    "text": "some limited information about what could have gone wrong in skm mode when they try to load an image so you can then later on analyze that so these are",
    "start": "1468080",
    "end": "1474679"
  },
  {
    "text": "kind of debugging uh features that exist now there's also normal mode calls",
    "start": "1474679",
    "end": "1479840"
  },
  {
    "start": "1477000",
    "end": "1477000"
  },
  {
    "text": "normal mode calls are the opposite of secure mode calls these are when the secure kernel needs something from entos",
    "start": "1479840",
    "end": "1486440"
  },
  {
    "text": "and again there's four possible operations there there's normal service calls and normal system calls and normal",
    "start": "1486440",
    "end": "1492360"
  },
  {
    "text": "system calls are when ium applications need to do a system call and we want to implement a system call in a normal",
    "start": "1492360",
    "end": "1497799"
  },
  {
    "text": "kernel a secure kernel and normal service calls are when skm itself needs",
    "start": "1497799",
    "end": "1502960"
  },
  {
    "text": "something from anos and again these are done through a VM call instruction and these take you from vtl 1 now to vtl 0",
    "start": "1502960",
    "end": "1509880"
  },
  {
    "text": "you drop down in privilege and you do the operation that's being asked here and there's a number of operations like",
    "start": "1509880",
    "end": "1515360"
  },
  {
    "start": "1513000",
    "end": "1513000"
  },
  {
    "text": "allocating physical Pages see memory management is still owned by the normal kernel so when skm needs some physical",
    "start": "1515360",
    "end": "1521679"
  },
  {
    "text": "Pages it's going to ask the normal Colonel to do that to terminate a thread or a process process management thread",
    "start": "1521679",
    "end": "1527200"
  },
  {
    "text": "scheduling that's still owned by by the normal kernel so skm has to ask and toss to do that weight synchronization um",
    "start": "1527200",
    "end": "1534039"
  },
  {
    "text": "copying virtual memory or allocating virtual memory in user mode um debugging tracing all those things still have to",
    "start": "1534039",
    "end": "1540120"
  },
  {
    "text": "be done in normal mode and skm does a normal mode call to perform any of those actions the last kind of call that's uh",
    "start": "1540120",
    "end": "1547559"
  },
  {
    "start": "1545000",
    "end": "1545000"
  },
  {
    "text": "needed here are EFI runtime calls now when you have an EFI um bias there are certain runtime",
    "start": "1547559",
    "end": "1555159"
  },
  {
    "text": "calls that can be called by the OS so for example your variables if you want to set or get an EFI variable this has",
    "start": "1555159",
    "end": "1562440"
  },
  {
    "text": "to go through EFI now for user mode there are apis to do this there's a um",
    "start": "1562440",
    "end": "1568200"
  },
  {
    "text": "get firmware environment variable and a set firware environment variable those calls from user mode eventually go into",
    "start": "1568200",
    "end": "1573799"
  },
  {
    "text": "Hal which eventually calls EFI but what about a trust L what about something that's running in uh isolated user mode",
    "start": "1573799",
    "end": "1580360"
  },
  {
    "text": "and it wants to touch EFI well vssm can also basically virtualize the EFI",
    "start": "1580360",
    "end": "1586760"
  },
  {
    "text": "runtime calls now this means though that when you're doing an EFI runtime call with this turned on the EFI runtime code",
    "start": "1586760",
    "end": "1593480"
  },
  {
    "text": "will run at vtl 1 and this is again why secure boot is so important because if you don't trust the firmware now when",
    "start": "1593480",
    "end": "1599760"
  },
  {
    "text": "you're trying to get a variable the get variable code runs a BTL one and it now has access to all the pages uh that",
    "start": "1599760",
    "end": "1606200"
  },
  {
    "text": "normally would be invisible to vtl Z so firmware could attack this but secure boot provides guarantees against that if",
    "start": "1606200",
    "end": "1612640"
  },
  {
    "text": "it's turned on if it's not buggy so that's kind of how the Kel side works let look at the user side a little bit",
    "start": "1612640",
    "end": "1619080"
  },
  {
    "text": "which is ium so skm provides three basic services to trls that are not available",
    "start": "1619080",
    "end": "1625679"
  },
  {
    "start": "1620000",
    "end": "1620000"
  },
  {
    "text": "when you're not a trust lit secured identification secured communication and secured cryptography these are all",
    "start": "1625679",
    "end": "1631559"
  },
  {
    "text": "provided as system calls so you do them through a normal CIS call instruction well they all have the high bit set so",
    "start": "1631559",
    "end": "1637360"
  },
  {
    "text": "you probably know the anti calls you know they're index zero index one index two these calls are 80 million1 80",
    "start": "1637360",
    "end": "1644240"
  },
  {
    "text": "million2 80 million3 and the trust Li BAS Bally doesn't do the system calls directly",
    "start": "1644240",
    "end": "1650520"
  },
  {
    "text": "just like a Windows application doesn't do the system calls directly there is a Baye library that implements some apis",
    "start": "1650520",
    "end": "1657080"
  },
  {
    "text": "those apis then call the lowlevel library which is the imdl and then it does the system calls just like a normal",
    "start": "1657080",
    "end": "1663240"
  },
  {
    "text": "application has kernel 32 which then calls antd which then does a system call",
    "start": "1663240",
    "end": "1668279"
  },
  {
    "text": "the trust lets work in the same way and so there's six system calls that are provided these are the indexes for them",
    "start": "1668279",
    "end": "1675679"
  },
  {
    "start": "1669000",
    "end": "1669000"
  },
  {
    "text": "so there's a system called to get the identif ation key and to set your instance those are basically to identify",
    "start": "1675679",
    "end": "1681159"
  },
  {
    "text": "yourself or the machine there's a cryptographic system call crypto and then there's the system cost for uh",
    "start": "1681159",
    "end": "1687360"
  },
  {
    "text": "mailbox and storage which are part of the communications package now the crypto API itself has five different sub",
    "start": "1687360",
    "end": "1694399"
  },
  {
    "text": "call so there's five different things it can do the other apis you call them and they just do their action so what can",
    "start": "1694399",
    "end": "1700480"
  },
  {
    "start": "1700000",
    "end": "1700000"
  },
  {
    "text": "the crypto API do it can encrypt data decrypt data it can decrypt data that's been boun specifically to the machine",
    "start": "1700480",
    "end": "1706840"
  },
  {
    "text": "with the identification key it can generate a seed and it can check if we're in fips mode or not since all this",
    "start": "1706840",
    "end": "1712120"
  },
  {
    "text": "is fips compliant but you never have to call these apis directly if you I mean if you're writing a TRL which you can't",
    "start": "1712120",
    "end": "1718519"
  },
  {
    "start": "1716000",
    "end": "1716000"
  },
  {
    "text": "now anyway there's another base API that provides that and so these are the apis that are kind of provided to trusts",
    "start": "1718519",
    "end": "1725440"
  },
  {
    "text": "today which match those system calls right so the Crypt the Crypt uh bound data encrypt get fips mode get the",
    "start": "1725440",
    "end": "1732320"
  },
  {
    "text": "identity key get the seed post the mailbox Secure Storage get put and set your instance so basically these are",
    "start": "1732320",
    "end": "1738679"
  },
  {
    "text": "kind of the I don't want to say documented but the high level interface that trls are going to be able to",
    "start": "1738679",
    "end": "1743720"
  },
  {
    "text": "call now outside of those specific skm system calls you have obviously trusts",
    "start": "1743720",
    "end": "1749840"
  },
  {
    "start": "1744000",
    "end": "1744000"
  },
  {
    "text": "are normal Windows code so they're going to be called things like create event create file the standard apis you might have the standard apis then are",
    "start": "1749840",
    "end": "1756720"
  },
  {
    "text": "converted to system calls but skm only allows you to do 48 of the 2,000 system",
    "start": "1756720",
    "end": "1762799"
  },
  {
    "text": "calls that the kernel has there's some synchronization apis that are allowed semaphor events and alerts which allow",
    "start": "1762799",
    "end": "1769640"
  },
  {
    "text": "critical sections to work in user mode for example there's no mutexes uh worker factories thread API weight completion",
    "start": "1769640",
    "end": "1775519"
  },
  {
    "text": "packets which are all used by the thread pool which intern allows RPC to work and alpc functions are allowed as well which",
    "start": "1775519",
    "end": "1782200"
  },
  {
    "text": "is required by RPC to work as well there's some apis to allocate virtual memory and section objects which is how",
    "start": "1782200",
    "end": "1788039"
  },
  {
    "text": "you can map a dlll and allocate from the Heap trets obviously need to do that and there's some random little apis for",
    "start": "1788039",
    "end": "1794480"
  },
  {
    "text": "exception handling and for querying a few things but no note for example there's no registry API list there's no",
    "start": "1794480",
    "end": "1801600"
  },
  {
    "text": "file API this list so you can't do any of those things you can't do registry Arrow from a trust slet you can't do file iio from a trust lit you can't do",
    "start": "1801600",
    "end": "1808640"
  },
  {
    "text": "any of the things that are not exposed through a system call that's accessible at vl1 so if you want to do any of those",
    "start": "1808640",
    "end": "1814960"
  },
  {
    "text": "things you need an agent you need something in normal mode that's going to do those things for you and for example",
    "start": "1814960",
    "end": "1820880"
  },
  {
    "text": "um in the else in the elsass case there's LSA ISO which is the isolated trust let in vt1 and there Crystal Elsas",
    "start": "1820880",
    "end": "1828840"
  },
  {
    "text": "which is the standard process in vtl Z and how do they communicate through RPC",
    "start": "1828840",
    "end": "1834080"
  },
  {
    "text": "that's why the threadpool and alpc is implemented and allowed so that you can communicate across vtls by using RPC so",
    "start": "1834080",
    "end": "1841240"
  },
  {
    "text": "there's a lack of functionality you might kind of uh see there and that's because trets are really designed for",
    "start": "1841240",
    "end": "1847039"
  },
  {
    "text": "the functionality Microsoft needs credential guard device guard and virtual TPM now whenever you do a system call",
    "start": "1847039",
    "end": "1853159"
  },
  {
    "start": "1851000",
    "end": "1851000"
  },
  {
    "text": "now you have a risk because you have something in vl1 calling normal mode what if mod has been compromised and it",
    "start": "1853159",
    "end": "1859320"
  },
  {
    "text": "wants to lie to you about the data it wants to screw up the structures you get back give you a fake handle give you a fake buffer so every time you you call",
    "start": "1859320",
    "end": "1867639"
  },
  {
    "text": "into um normal mode you're going to sanitize the output that you get back when you call into it though you have",
    "start": "1867639",
    "end": "1873559"
  },
  {
    "text": "another problem which is that all your pages now are vtl one Pages they can't be read necessarily from vtl Z so",
    "start": "1873559",
    "end": "1879720"
  },
  {
    "text": "there's some shared buffers that are used so I can actually allocate some memory that vtl Z is going to see",
    "start": "1879720",
    "end": "1885440"
  },
  {
    "text": "Marshall structures in those buffers safely get rid of any pointers to pointers to pointers and some generic",
    "start": "1885440",
    "end": "1890880"
  },
  {
    "text": "marshalling lets you do that then the normal mode sees the Marshall buffers does the action returns some data back",
    "start": "1890880",
    "end": "1896559"
  },
  {
    "text": "the data is sanitized and then copied back into a buffer that can be accessed by uh BTL one can access it anyway so",
    "start": "1896559",
    "end": "1904240"
  },
  {
    "text": "there's some marshalling and some sanitization here that has to happen and so this is a diagram I stole from",
    "start": "1904240",
    "end": "1909840"
  },
  {
    "start": "1907000",
    "end": "1907000"
  },
  {
    "text": "Microsoft from presentation it is our copyright I don't make nice diagrams like this but this basically shows you the whole process we have the secure",
    "start": "1909840",
    "end": "1916440"
  },
  {
    "text": "kernel trying to do a system call going through the marshaler going through vtl Z which then goes in a normal kernel",
    "start": "1916440",
    "end": "1923320"
  },
  {
    "text": "which then runs a normal kernel function so all this is not running in isol in in a normal mode in vtl 0 and then it all",
    "start": "1923320",
    "end": "1931080"
  },
  {
    "text": "goes back back at vl1 now UNM Marshal everything sanitize it or Harden it and",
    "start": "1931080",
    "end": "1936559"
  },
  {
    "text": "return the data back so the secure kernel doesn't have a lot of functionality it's almost acting like a proxy just sending things through to the",
    "start": "1936559",
    "end": "1943440"
  },
  {
    "text": "other side so how does the trust use all this functionality",
    "start": "1943440",
    "end": "1949840"
  },
  {
    "start": "1950000",
    "end": "1950000"
  },
  {
    "text": "well how do you first of all launch something as a tret in Windows Vista and later they added something called",
    "start": "1950440",
    "end": "1955880"
  },
  {
    "text": "process attributes and when you start up a process you can Define some attributes that are associated with it so one of",
    "start": "1955880",
    "end": "1961000"
  },
  {
    "text": "the attributes you can now set is I want this thing to launch as a TRL unfortunately that attribute is not",
    "start": "1961000",
    "end": "1967039"
  },
  {
    "text": "exposed to the standard documented Windows API it's only exposed to the native API so you need to build an",
    "start": "1967039",
    "end": "1972960"
  },
  {
    "text": "undocumented application that ACC as a launcher to pass that undocumented feature through the undocumented API and",
    "start": "1972960",
    "end": "1979799"
  },
  {
    "text": "the attribute you have to specify is a trust ID scam recognizes that only some things should be trls and you need to",
    "start": "1979799",
    "end": "1986559"
  },
  {
    "text": "pass an ID what trust are you trying to execute when the TRL executes we're then",
    "start": "1986559",
    "end": "1992399"
  },
  {
    "start": "1992000",
    "end": "1992000"
  },
  {
    "text": "going to check is this binary actually allowed to launch as a TRL because you don't want random stuff to launch as",
    "start": "1992399",
    "end": "1999000"
  },
  {
    "text": "trls and so there's some strong signing guarantees here they're going to make sure that this has what's called a",
    "start": "1999000",
    "end": "2004679"
  },
  {
    "text": "signature level of 12 now you can read my blog if you want to know about signature levels but they're basically",
    "start": "2004679",
    "end": "2009720"
  },
  {
    "text": "cryptographic levels associated with EKU enhanced key usages that aert can have",
    "start": "2009720",
    "end": "2015919"
  },
  {
    "text": "and so an image that's allowed to run as a tret has to have a special certificate with some special key usages in there",
    "start": "2015919",
    "end": "2021880"
  },
  {
    "text": "one of them that says this is a Windows binary and one of them that says this is an ium binary so it has to come from the",
    "start": "2021880",
    "end": "2028000"
  },
  {
    "text": "windows team in Microsoft and it has to be signed with a special sech saying this is allowed to launch in as a tret",
    "start": "2028000",
    "end": "2035399"
  },
  {
    "text": "now even if you boot in debug mode or in test signing mode and you make your own fake sech and you add those EKU in test",
    "start": "2035399",
    "end": "2042799"
  },
  {
    "text": "mode or in debug mode they won't be recognized so it has to be from a Microsoft certificate not a test",
    "start": "2042799",
    "end": "2047960"
  },
  {
    "text": "certificate and it has to have those zekus so there's practically no way other than corrupting the system in some",
    "start": "2047960",
    "end": "2053440"
  },
  {
    "text": "way um which requires an explo which requires a bypassing secure boot to actually change it functionality so only",
    "start": "2053440",
    "end": "2058878"
  },
  {
    "text": "things that are signed as trls can run as trets so here's an example of what",
    "start": "2058879",
    "end": "2064358"
  },
  {
    "text": "that would look like here the U digital certificate properties of a trust L and here it says isolated user mode and",
    "start": "2064359",
    "end": "2071200"
  },
  {
    "text": "Windows system component verification and you need these two things there and if you want to run us to protect a process there's another EKU there but",
    "start": "2071200",
    "end": "2077720"
  },
  {
    "text": "without those two eus in a search from Microsoft you're not going to be able to launch now when a trusted launches it",
    "start": "2077720",
    "end": "2084919"
  },
  {
    "text": "has to have what's called a trust policy associated with it so you have to have a special exported variable that special",
    "start": "2084919",
    "end": "2091679"
  },
  {
    "text": "exported variable has to have a special name in a special section with a special set of flags obviously has to be sign",
    "start": "2091679",
    "end": "2098000"
  },
  {
    "text": "cuz it's part of the binary and that policy has the trusted ID so you can't launch trusted ID 4 associated with",
    "start": "2098000",
    "end": "2104880"
  },
  {
    "text": "binary X if binary X is signed saying I'm trusted id8 so the binary kind of",
    "start": "2104880",
    "end": "2110880"
  },
  {
    "text": "signs its own identity and the launcher of the binary says I'm launching this binary with this identity and they have",
    "start": "2110880",
    "end": "2116920"
  },
  {
    "text": "to match so you can't have arbitrarily uh trls or run a TRL as a different identity so all this is checked by the",
    "start": "2116920",
    "end": "2123520"
  },
  {
    "text": "secure carel to make sure this is a legitimate valid trust the policy also says what can the truss lid do or what",
    "start": "2123520",
    "end": "2131200"
  },
  {
    "text": "what will it allow itself to do so for example etw tracing the trust can say I",
    "start": "2131200",
    "end": "2136359"
  },
  {
    "text": "don't want my tracing messages to be seen dumps the TR can say when I crash",
    "start": "2136359",
    "end": "2142040"
  },
  {
    "text": "don't write a crash dump or when I crash I want to crash dump but encrypted with this public key so only Microsoft which",
    "start": "2142040",
    "end": "2148560"
  },
  {
    "text": "has a private key can then encrypt the crash dump so a certain policy attributes that truster can say another",
    "start": "2148560",
    "end": "2153720"
  },
  {
    "text": "one is allow myself to be debugged or not so truster can say I do want to debug facility to be available to normal",
    "start": "2153720",
    "end": "2158839"
  },
  {
    "text": "mode or no I don't want normal mode to debug me and depending on what the trusted is doing some of those options",
    "start": "2158839",
    "end": "2164000"
  },
  {
    "text": "are going to be set Elsas for example the isolated lsas won't allow itself to be debugged it will allow itself to",
    "start": "2164000",
    "end": "2169880"
  },
  {
    "text": "crash and write a crash dump but the crash dump will be encrypted with a public key that is specified a tra can also have an",
    "start": "2169880",
    "end": "2176839"
  },
  {
    "start": "2175000",
    "end": "2175000"
  },
  {
    "text": "instance goid that's something used by hyperv because with virtual TPM you can now have hyperv virtual machines that",
    "start": "2176839",
    "end": "2184240"
  },
  {
    "text": "essentially are protected from the host and that's using uh trusts as well and the instance basically tells you what VM",
    "start": "2184240",
    "end": "2191400"
  },
  {
    "text": "is this TRL associated with so what trusts exist today well trust L zero is kind of the secure",
    "start": "2191400",
    "end": "2198000"
  },
  {
    "text": "kernel process itself which hosts the vice guard and when you have these features turned on um you'll see if you",
    "start": "2198000",
    "end": "2203720"
  },
  {
    "text": "look at task manager there's going to be an entry there called um me switch this around secure",
    "start": "2203720",
    "end": "2209960"
  },
  {
    "text": "system so that is basically an indication that skm is there now I also",
    "start": "2209960",
    "end": "2215079"
  },
  {
    "text": "have credential guard turned on so I'm going to have LSA ISO process this is truslate ID number one and truslate ID",
    "start": "2215079",
    "end": "2223160"
  },
  {
    "text": "number two and three are if you use guarded Fabric or vtpm so tret 2 is vmsp",
    "start": "2223160",
    "end": "2229280"
  },
  {
    "text": "which um lets you read what's in a TPM and tret ID3 is the provisioning tool which you would use to put Secrets uh",
    "start": "2229280",
    "end": "2236359"
  },
  {
    "text": "and seal things in a virtual TPM so those are kind of the four trusses that exist today so LSA ISO provides a credential",
    "start": "2236359",
    "end": "2244400"
  },
  {
    "text": "guard feature you may have heard about yesterday it only does two things decrypt and encrypt data that's all it",
    "start": "2244400",
    "end": "2249560"
  },
  {
    "text": "needs the cryptographic API the other trust L vmsp is used for virtual TPM and",
    "start": "2249560",
    "end": "2255640"
  },
  {
    "start": "2253000",
    "end": "2253000"
  },
  {
    "text": "for virtual TPM you need a bit of more complexity because now you need to use the mailboxes to basically um identify",
    "start": "2255640",
    "end": "2261680"
  },
  {
    "text": "yourself and pass data across normal mode and secure mode without using RPC or by adding another layer of security",
    "start": "2261680",
    "end": "2267920"
  },
  {
    "text": "on top of RPC and the vtpm data itself the secrets ntpm are used with that",
    "start": "2267920",
    "end": "2273319"
  },
  {
    "text": "secure storage facility so those API are kind of specifically designed for vtpm only the other apis to encrypt data and",
    "start": "2273319",
    "end": "2279880"
  },
  {
    "text": "encrypt data those are used by the credential guard feature now when a TRL loads it gets",
    "start": "2279880",
    "end": "2285760"
  },
  {
    "start": "2283000",
    "end": "2283000"
  },
  {
    "text": "loaded like any other application in user mode there's the same ndl that you have on the other normal side the",
    "start": "2285760",
    "end": "2291640"
  },
  {
    "text": "difference is this ndl is going to check a few things um to basically prevent normal mode from messing with it so you",
    "start": "2291640",
    "end": "2298040"
  },
  {
    "text": "probably fam the shim engine which allows you to put application compatibility Flags well we don't want",
    "start": "2298040",
    "end": "2303480"
  },
  {
    "text": "LSC ISO to have a shim that says you know and go do this we want this function ality to be non um influenced",
    "start": "2303480",
    "end": "2310920"
  },
  {
    "text": "non- influenceable by normal mode so some things are disabled like image file execution options are ignored the",
    "start": "2310920",
    "end": "2316280"
  },
  {
    "text": "redirection is ignored um there's no communication to csrss there's no shim engine to basically make sure a TRL does",
    "start": "2316280",
    "end": "2322480"
  },
  {
    "text": "what it's supposed to do and can be affected by the Admin in some way now because you don't talk to csrss there's",
    "start": "2322480",
    "end": "2328720"
  },
  {
    "start": "2326000",
    "end": "2326000"
  },
  {
    "text": "some structures that are missing as well so ndl will basically fake out what csrss would normally do now since you",
    "start": "2328720",
    "end": "2334880"
  },
  {
    "text": "can't talk to csrss though the key detail here is you can't have a UI and you can't even have a console so you",
    "start": "2334880",
    "end": "2340480"
  },
  {
    "text": "don't have access to the command prompt interfaces there's no standard in or standard out so you can't link a trust",
    "start": "2340480",
    "end": "2346319"
  },
  {
    "text": "as a console application because then it's going to try talking to a console driver or the console subsystem and",
    "start": "2346319",
    "end": "2351400"
  },
  {
    "text": "that's not there so they have to be linked as Windows images not as console images so then how do trust us talk well",
    "start": "2351400",
    "end": "2358480"
  },
  {
    "start": "2355000",
    "end": "2355000"
  },
  {
    "text": "they can trace thew which I mentioned there's a debug print API and there's local RPC now the debug print API is",
    "start": "2358480",
    "end": "2365760"
  },
  {
    "text": "actually not enabled in retail builds anyw tracing can be disabled the trust can't say I don't want to trace myself",
    "start": "2365760",
    "end": "2371800"
  },
  {
    "text": "so the one thing that trust can always do and that's always permitted is RPC and so there's going to be vulnerabilities here if they're going to",
    "start": "2371800",
    "end": "2378960"
  },
  {
    "text": "be an RPC or alpc or basically this interface that allows the two things to talk to each others if your trust lid is",
    "start": "2378960",
    "end": "2385960"
  },
  {
    "text": "accidentally badly parsing an RPC message the trust L can crash the trust Li may run code that it's not supposed",
    "start": "2385960",
    "end": "2392040"
  },
  {
    "text": "to again though you have to work around the signing issues and all the other kind of hardening features that the",
    "start": "2392040",
    "end": "2397359"
  },
  {
    "text": "ization brings on top of that but this RPC link is probably you know where people are going to be looking at now",
    "start": "2397359",
    "end": "2403839"
  },
  {
    "start": "2403000",
    "end": "2403000"
  },
  {
    "text": "there also is on top of any RPC kind of server that trust L can introduce there's a special RPC server that's",
    "start": "2403839",
    "end": "2410880"
  },
  {
    "text": "there on normal mode called ium trust dump server and when a trusted crashes",
    "start": "2410880",
    "end": "2417119"
  },
  {
    "text": "if crashing is if crash dumps are allowed there's function as a secure kernel to talk to the trust dump server",
    "start": "2417119",
    "end": "2423040"
  },
  {
    "text": "and to write a dump out to disk so this is the one Communications Channel trusts always always have the enable crash",
    "start": "2423040",
    "end": "2428440"
  },
  {
    "text": "dumps they can just shove encrypt the data to the server and the server is going to write it to disk so technically",
    "start": "2428440",
    "end": "2433880"
  },
  {
    "text": "you could write to disk with this interface that's something that's not a dump if you somehow got into a TRL um",
    "start": "2433880",
    "end": "2440160"
  },
  {
    "text": "but it would be you know limited path name and a limited location with a limited extension so the question is can you",
    "start": "2440160",
    "end": "2446160"
  },
  {
    "start": "2445000",
    "end": "2445000"
  },
  {
    "text": "build your own truss L this sounds like really cool technology but it also allows me to basically hide my data if",
    "start": "2446160",
    "end": "2452920"
  },
  {
    "text": "I'm malicious can I have a malet well there's a number of things that prevent you from doing this the first one is you",
    "start": "2452920",
    "end": "2460319"
  },
  {
    "text": "have to have a right policy with the right trust ID with the right name in the right section it has to be signed",
    "start": "2460319",
    "end": "2465720"
  },
  {
    "text": "correctly and those signature checks are not things you can bypass without some sort of ring minus one exploit you have",
    "start": "2465720",
    "end": "2471319"
  },
  {
    "text": "to be compiled and linked correctly and you have to be careful what dl's use not all dlls are signed with that certificate not all dl's can be used",
    "start": "2471319",
    "end": "2478720"
  },
  {
    "text": "inside the isolated environment and ultimately even if you rode your own malicious trust Le your trust doesn't",
    "start": "2478720",
    "end": "2484520"
  },
  {
    "text": "have access to stuff in normal mode everything it has access to has to be through one of those system calls and a",
    "start": "2484520",
    "end": "2490000"
  },
  {
    "text": "TRL is protected from other trls so malicious TRL can suddenly attack the credential guard trust LD so you still",
    "start": "2490000",
    "end": "2496480"
  },
  {
    "text": "have to kind of break out from ium into skm and be pretty complicated attack to do if you got there and youd have to",
    "start": "2496480",
    "end": "2502319"
  },
  {
    "text": "write a trust l in the first place anyway but there are ways to do that if there's exploits or vulnerabilities and",
    "start": "2502319",
    "end": "2508560"
  },
  {
    "text": "so I'm going to do a demo of an actual trust L to show you how that looks like uh and this is my own trust l so it's",
    "start": "2508560",
    "end": "2513800"
  },
  {
    "text": "not one that comes from Microsoft now it is a very simple trust lit it essentially only does uh two things",
    "start": "2513800",
    "end": "2520880"
  },
  {
    "text": "it initializes etw tracing it prints hello secure World it creates an event",
    "start": "2520880",
    "end": "2525960"
  },
  {
    "text": "called demolet active to show you that it actually ran and then it basically sets up RPC and creates an RPC endpoint",
    "start": "2525960",
    "end": "2533359"
  },
  {
    "text": "called demolet Port so I've signed this correctly and",
    "start": "2533359",
    "end": "2538680"
  },
  {
    "text": "everything and I'm going to try running it make sure it's not already active from earlier nope",
    "start": "2538680",
    "end": "2545200"
  },
  {
    "text": "okay so I've got my oh that's Sig signing so I've got my own launcher and",
    "start": "2545200",
    "end": "2550400"
  },
  {
    "text": "I've called this trle id5 it's got a policy that claims it's id5 I'm launching it as",
    "start": "2550400",
    "end": "2556240"
  },
  {
    "text": "id5 so it says it launched successfully let's see if it's actually in the process list pit",
    "start": "2556240",
    "end": "2563280"
  },
  {
    "text": "7200 so those are tret now how do you know this is actually a tret that I'm you know not lying to you so let's",
    "start": "2564200",
    "end": "2570680"
  },
  {
    "text": "double click on it and first of all you can see that it has created the demolet port there is an event demol let active",
    "start": "2570680",
    "end": "2578839"
  },
  {
    "text": "um so if I go inside wobs in uh sessions",
    "start": "2578839",
    "end": "2584760"
  },
  {
    "text": "one Bas named objects there should be an event here them will active so the TRL was",
    "start": "2584760",
    "end": "2591440"
  },
  {
    "text": "able to create this event um and if I go inside of RPC control there is the demolet port so I",
    "start": "2591440",
    "end": "2598880"
  },
  {
    "text": "have an RPC endpoint that I can talk to my tret now but is it actually protected so",
    "start": "2598880",
    "end": "2605680"
  },
  {
    "text": "let's look at the memory well I can see all of its memory well no I can see the memory allocations I can",
    "start": "2605680",
    "end": "2611319"
  },
  {
    "text": "see the Vats because the colonel owns the memory management so I can see what allocations exist but if I try to look",
    "start": "2611319",
    "end": "2617559"
  },
  {
    "text": "at any of these oh this is reserve let's look at",
    "start": "2617559",
    "end": "2624480"
  },
  {
    "text": "committed region invalid access to memory location even if I use the kernel",
    "start": "2624480",
    "end": "2629760"
  },
  {
    "text": "debugger which normally should have all the powers bank process 0000 trust. XE",
    "start": "2629760",
    "end": "2638200"
  },
  {
    "text": "I'm going to attach through it from the kernel I'm which is ring zero so I should be able to do anything I want to",
    "start": "2638200",
    "end": "2643440"
  },
  {
    "text": "it um let's down with the vads let's see the memory allocations so they're there these are",
    "start": "2643440",
    "end": "2649880"
  },
  {
    "text": "all this is all trust Li memory um but if I take one of these allocations try to look at",
    "start": "2649880",
    "end": "2658000"
  },
  {
    "text": "it oh that one worked um some of these can be shared so",
    "start": "2658200",
    "end": "2664800"
  },
  {
    "text": "what I probably picked is the I'll actually show you the if I do a bank",
    "start": "2664800",
    "end": "2669680"
  },
  {
    "text": "PEB notice that you can see the environment variables there and that's because part of the PEB",
    "start": "2670559",
    "end": "2677200"
  },
  {
    "text": "is readable and the environment variables are readable otherwise things would just break if if you don't let that so I probably picked the memory",
    "start": "2677200",
    "end": "2683559"
  },
  {
    "text": "that contains the environment I just got unlucky let me pick a different address let's say I'll take this",
    "start": "2683559",
    "end": "2690359"
  },
  {
    "text": "one it's all question marks um if I take the code itself of the the trust.",
    "start": "2692720",
    "end": "2698680"
  },
  {
    "text": "XE let's see that one it's mapped dd1 2 3 the code is there and that's not",
    "start": "2698680",
    "end": "2706800"
  },
  {
    "text": "something that's necessarily hidden so images can still be shared things can still be readable other things are not",
    "start": "2706800",
    "end": "2712119"
  },
  {
    "text": "going to be shown like the Heap in a stack so it's not that everything is isolated some things can be shown and read but that code is not modifiable for",
    "start": "2712119",
    "end": "2718640"
  },
  {
    "text": "example so if I try to modify the tret code from the high level OS I won't actually be able to do that so you know",
    "start": "2718640",
    "end": "2725559"
  },
  {
    "text": "if I take one last another thing is let's say I want to dump the modules so normally when I do a bang PEB I should",
    "start": "2725559",
    "end": "2732040"
  },
  {
    "text": "see the loaded DLS but notice here that it says null this isn't really null in the vtl one",
    "start": "2732040",
    "end": "2739800"
  },
  {
    "text": "side but in this kind of fake PEB it is in the real PEB on the other side the loaded dlos are here but I don't",
    "start": "2739800",
    "end": "2745280"
  },
  {
    "text": "actually see that so I can't kind of investigate anything in this environment uh and if I try to debug this or make a",
    "start": "2745280",
    "end": "2750800"
  },
  {
    "text": "dump out of it it's just not going to work so this process is basically isolated and protected from me trying to",
    "start": "2750800",
    "end": "2756359"
  },
  {
    "text": "read it SE crits or its Heap or modify its code that's actually running now now I want to be clear this is not something",
    "start": "2756359",
    "end": "2761960"
  },
  {
    "text": "supported I had to do a lot of kind of hacks at the system to allow my trust to launch um but just to kind of show you",
    "start": "2761960",
    "end": "2767680"
  },
  {
    "text": "what what provides now I can kill it it's not a protect I didn't make it protected so I can still kill the TRL",
    "start": "2767680",
    "end": "2772720"
  },
  {
    "text": "and now all these secrets are are gone now so let's talk a little bit about kind of what all this means and what are",
    "start": "2772720",
    "end": "2779040"
  },
  {
    "text": "some of the things that I found out so first of all is ium secure is vssm secure as far as I can see yes there are",
    "start": "2779040",
    "end": "2785960"
  },
  {
    "text": "not any design flaws I was able to find there's no kind of aha they didn't think of that they really did an extremely",
    "start": "2785960",
    "end": "2791880"
  },
  {
    "text": "good job at thinking of all these these Avenues of of attack now could there be RPC parsing vulnerabilities or",
    "start": "2791880",
    "end": "2797839"
  },
  {
    "text": "marshalling bugs sure but it's a very small amount of coat so chances are they took a really good look at that the",
    "start": "2797839",
    "end": "2803359"
  },
  {
    "text": "attack surface is Tiny the hypervisor is already a very small piece of code adding vtls adds complexity but it's",
    "start": "2803359",
    "end": "2809880"
  },
  {
    "text": "still manageable Zur kernel itself is only 350 Koby and yes skci does do ASN",
    "start": "2809880",
    "end": "2816359"
  },
  {
    "text": "i1 part ing of signatures but that code has been in Microsoft for more than a decade it's been very well tested and",
    "start": "2816359",
    "end": "2822359"
  },
  {
    "text": "it's not a full ASM one parser it's very limited one which actually is a static um State machine so this is all provably",
    "start": "2822359",
    "end": "2829319"
  },
  {
    "text": "almost correct code um that should have very very little attack surface on the on the flip side though this does rely",
    "start": "2829319",
    "end": "2835240"
  },
  {
    "text": "on platform features to work and to be well implemented now it's important to point out which I mentioned a few times as",
    "start": "2835240",
    "end": "2841720"
  },
  {
    "start": "2837000",
    "end": "2837000"
  },
  {
    "text": "well that a secure kernel is very simple it doesn't do scheduling it doesn't do marry management all the resource",
    "start": "2841720",
    "end": "2847400"
  },
  {
    "text": "management is still done by the normal kernel there's no Hardware drivers there's no devices and system calls are",
    "start": "2847400",
    "end": "2853079"
  },
  {
    "text": "proxied through normal mode there's no implementation for system calls in skam itself so skam doesn't trust an TOS it",
    "start": "2853079",
    "end": "2860760"
  },
  {
    "text": "does depend on it though so could you decide nope I'm not going to give you that physical page sure and you could",
    "start": "2860760",
    "end": "2865920"
  },
  {
    "text": "screw with s gam this way so you could do Den Deni of service attacks but it doesn't give you access to the secrets",
    "start": "2865920",
    "end": "2871440"
  },
  {
    "text": "and the information that's inside the secure world you also can't knop out calls you know sometime someone ask me",
    "start": "2871440",
    "end": "2876960"
  },
  {
    "text": "well the viice guard what if I just don't ask secure mode to is this signed or not what if I just lie and I tell",
    "start": "2876960",
    "end": "2882640"
  },
  {
    "text": "Enos yes this is signed you could lie to OS and say yes this is signed but then the epts are they going to be executable",
    "start": "2882640",
    "end": "2889079"
  },
  {
    "text": "no so OS is going to think this is executable memory but no one made them executable because you kned out the call",
    "start": "2889079",
    "end": "2894720"
  },
  {
    "text": "that's going to make them executable if you don't knop out the call then we're also going to verify the signatures so",
    "start": "2894720",
    "end": "2900359"
  },
  {
    "text": "there's no way to you can bypass communicating tokm but then you don't get any features or needs that the skm",
    "start": "2900359",
    "end": "2906000"
  },
  {
    "text": "has so how would you compromise this well again the Reliance One of the weaknesses",
    "start": "2906000",
    "end": "2911640"
  },
  {
    "start": "2907000",
    "end": "2907000"
  },
  {
    "text": "the Reliance on secure Boot and also the fact that not everyone has anmu and so at black hat and other conferences",
    "start": "2911640",
    "end": "2918119"
  },
  {
    "text": "there's been lots of talks about vendor bugs design bugs flash bugs option on",
    "start": "2918119",
    "end": "2923319"
  },
  {
    "text": "bugs uh and other vulnerabilities in firmware and this is kind of the weak spot today and Microsoft is doing a lot",
    "start": "2923319",
    "end": "2929480"
  },
  {
    "text": "of you know vendor kind of punching to make sure people get their bugs fixed",
    "start": "2929480",
    "end": "2934839"
  },
  {
    "text": "Windows update can also now deliver by updates as well but this is the weakness the other one is dma attacks not",
    "start": "2934839",
    "end": "2941200"
  },
  {
    "text": "everyone has an immu not everyone turns it on and so with those attack venues",
    "start": "2941200",
    "end": "2946319"
  },
  {
    "text": "vssm can be compromised now kind of risk here is a compromised vssm can then be used against the user itself because now",
    "start": "2946319",
    "end": "2954079"
  },
  {
    "text": "it can use the VSM facilities to hide malicious data but this is kind of a very limited risk because remember you",
    "start": "2954079",
    "end": "2960240"
  },
  {
    "text": "still don't have access to the file system you don't have access to drivers you don't have access to registry so if you really want to run a malet you have",
    "start": "2960240",
    "end": "2966599"
  },
  {
    "text": "to to have an agent that's a malware agent too and that's something running normal mode that I can detect so yes you",
    "start": "2966599",
    "end": "2971760"
  },
  {
    "text": "could use this you can use a compromise VSM to hide data but you could have built your own hypervisor anyway if",
    "start": "2971760",
    "end": "2977839"
  },
  {
    "text": "secure boot is not there so it's not of vssm vulnerability it's just something a VSM might make easier if it gets",
    "start": "2977839",
    "end": "2984200"
  },
  {
    "text": "compromised but if it's compromised it's game over anyway so you know these are kind of very Fringe types of uh attacks",
    "start": "2984200",
    "end": "2991960"
  },
  {
    "start": "2991000",
    "end": "2991000"
  },
  {
    "text": "so the real issue is if you don't have secure boot if you don't have secure boot then you can bypass all this for",
    "start": "2991960",
    "end": "2997240"
  },
  {
    "text": "example my laptop has a special version of skci where I made a one bite patch with that one bite patch I'm able to",
    "start": "2997240",
    "end": "3003559"
  },
  {
    "text": "reload any trusted that I want and so there's a dma attack there's a secure boot attack and you pass that one line",
    "start": "3003559",
    "end": "3009359"
  },
  {
    "text": "or that one bite then now you can run your own trls again that doesn't necessarily mean it's game over because",
    "start": "3009359",
    "end": "3014599"
  },
  {
    "text": "the trust still need a way to do malicious things so it's really important to make sure that all these platform features are turned on now",
    "start": "3014599",
    "end": "3020920"
  },
  {
    "start": "3020000",
    "end": "3020000"
  },
  {
    "text": "given that there are a few things Microsoft could probably to make it harder to do what I did for example if",
    "start": "3020920",
    "end": "3026079"
  },
  {
    "text": "SKC I validated itself if the hypervisor had some code to make sure that I didn't",
    "start": "3026079",
    "end": "3031119"
  },
  {
    "text": "you know patch it something like patch guard basically but in the hypervisor that could allow you to kind of detect",
    "start": "3031119",
    "end": "3037440"
  },
  {
    "text": "some things that are going on all these would be defense in depth though right because if secure boot is not working right you can't really protect the",
    "start": "3037440",
    "end": "3043640"
  },
  {
    "text": "system in in a in a true secure way but there could be little things that they do to make it harder to make the attack",
    "start": "3043640",
    "end": "3049880"
  },
  {
    "text": "less than just let's flip a bite just like in Colonel mode there's spad guard and if you flip a bite you'll eventually crash the system so these are like",
    "start": "3049880",
    "end": "3056760"
  },
  {
    "text": "weight recommendations um they're not really major things that affect the security system it is designed to be secure but your platform has to be",
    "start": "3056760",
    "end": "3063520"
  },
  {
    "text": "secure as well so that don't know if I'll have time for",
    "start": "3063520",
    "end": "3069559"
  },
  {
    "start": "3066000",
    "end": "3066000"
  },
  {
    "text": "questions like I mentioned though I will be uh available at the coffee break and also want to thank a few people from",
    "start": "3069559",
    "end": "3074760"
  },
  {
    "text": "Microsoft that um helped out a lot with this presentation making sure it was accurate so kudos to all those people so",
    "start": "3074760",
    "end": "3080799"
  },
  {
    "text": "thank you",
    "start": "3080799",
    "end": "3083960"
  },
  {
    "text": "[Applause]",
    "start": "3088110",
    "end": "3091619"
  }
]