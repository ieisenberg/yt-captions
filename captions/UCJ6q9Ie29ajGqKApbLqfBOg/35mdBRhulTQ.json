[
  {
    "text": "all right welcome and uh yeah stoked to be here to talk to you today about the Hidden Treasures of crash",
    "start": "2679",
    "end": "9160"
  },
  {
    "text": "reports so my name is Patrick wle I am the CEO and co-founder of w and also the",
    "start": "9160",
    "end": "16160"
  },
  {
    "text": "founder of The Objective C foundation and yes I am on the one up here on the stage today but this talk is really",
    "start": "16160",
    "end": "23160"
  },
  {
    "text": "about you all because today I'm going to be playing Matchmaker with the goal of making you fall in love with CR reports",
    "start": "23160",
    "end": "31199"
  },
  {
    "text": "so before we begin need a hand raise of everyone who already has a deep sense of",
    "start": "31199",
    "end": "39000"
  },
  {
    "text": "appreciation or love of crash reports anybody okay awesome the rest of you",
    "start": "39000",
    "end": "44879"
  },
  {
    "text": "we'll see if we can change that by the uh end of end of the talk all right so before we begin let's just you know deep",
    "start": "44879",
    "end": "51399"
  },
  {
    "text": "breath in deep breath out open our minds but also our hearts because we going to",
    "start": "51399",
    "end": "57640"
  },
  {
    "text": "try to fall in love all right so I like to start my talks with a little description about what I hope to teach",
    "start": "57640",
    "end": "64838"
  },
  {
    "text": "you all today so in a nutshell this will be understanding crash reports largely",
    "start": "64839",
    "end": "70080"
  },
  {
    "text": "on Mac OS and we'll see that from these crash reports we can extract extract a",
    "start": "70080",
    "end": "75520"
  },
  {
    "text": "myriad of information that will allow us to uncover malware bugs and much much",
    "start": "75520",
    "end": "81759"
  },
  {
    "text": "more now you might be wondering okay well who cares about crash reports answer everybody but this includes and",
    "start": "81759",
    "end": "89079"
  },
  {
    "text": "we'll look at these a little closer users developers security teams and even",
    "start": "89079",
    "end": "95759"
  },
  {
    "text": "hackers so now when you think about crash reports you're probably thinking about how they are useful to developers",
    "start": "95759",
    "end": "102159"
  },
  {
    "text": "because as we will see crash reports hold information that allow us to as developers fix our software but if you",
    "start": "102159",
    "end": "109079"
  },
  {
    "text": "think of the average users crash report should be important as well so imagine user is using their FA favorite",
    "start": "109079",
    "end": "115000"
  },
  {
    "text": "application it unfortunately crashes for the user that's annoying and frustrating",
    "start": "115000",
    "end": "120439"
  },
  {
    "text": "what's the goal for the user here to probably get this application or piece of software fixed and the best way to do",
    "start": "120439",
    "end": "126079"
  },
  {
    "text": "that is at least to grab the crash report and provide that to the developer",
    "start": "126079",
    "end": "131800"
  },
  {
    "text": "here's an example I am a fan of Hopper it's a disassembler fortunately like most software it has some small bugs and",
    "start": "131800",
    "end": "139319"
  },
  {
    "text": "so when it crashes what I do is I grab the crash report and send an email to the developer uh explaining what went",
    "start": "139319",
    "end": "145800"
  },
  {
    "text": "wrong how to reproduce it and then armed with the crash report he is able to often very quickly fix the software and",
    "start": "145800",
    "end": "152239"
  },
  {
    "text": "push out a new version so he's stoked because his software is less buggy and I'm stoked because well it's also less",
    "start": "152239",
    "end": "159040"
  },
  {
    "text": "buggy so win-win now that's common that's a very common case but I also want to talk",
    "start": "159040",
    "end": "164959"
  },
  {
    "text": "about other cases where crash reports are very valuable and one of those are two security teams and the idea is that",
    "start": "164959",
    "end": "173080"
  },
  {
    "text": "oftentimes exploits are not 100% reliable that is especially true today",
    "start": "173080",
    "end": "178480"
  },
  {
    "text": "where a lot of operating systems now have anti- exploitation mechanisms which",
    "start": "178480",
    "end": "184720"
  },
  {
    "text": "make especially memory corruption vulnerabilities not 100% reliable and if",
    "start": "184720",
    "end": "190280"
  },
  {
    "text": "an exploit crashes this is going to generate a crash report so if security teams or operating system vendors are",
    "start": "190280",
    "end": "196959"
  },
  {
    "text": "ingesting those crash reports they have the potential to uncover failed exploitation attempts which in some cases might be previously unknown or",
    "start": "196959",
    "end": "204040"
  },
  {
    "text": "zero day vulnerabilities I love this great case study from Microsoft which Illustrated out of the millions of crash",
    "start": "204040",
    "end": "211360"
  },
  {
    "text": "reports that they ingest they found too that when they analyze them realize that",
    "start": "211360",
    "end": "217959"
  },
  {
    "text": "the reason the crash reports had been generated is that adversaries were using what was at the time zero day",
    "start": "217959",
    "end": "224400"
  },
  {
    "text": "vulnerability that impacted every version of Windows giving the adversaries the attackers the ability to",
    "start": "224400",
    "end": "230000"
  },
  {
    "text": "remotely infect any Windows system insane but via the crash report Microsoft was able to find the",
    "start": "230000",
    "end": "236040"
  },
  {
    "text": "underlying flaw and patch that super powerful stuff security startups especially on Mac OS",
    "start": "236040",
    "end": "242640"
  },
  {
    "text": "are also very interested in crash reports as they should be because on iOS we really can't do that much in terms of",
    "start": "242640",
    "end": "248599"
  },
  {
    "text": "on device security tools uh but by analyzing crash reports again we can find perhaps failed exploitation",
    "start": "248599",
    "end": "254079"
  },
  {
    "text": "attempts or even malware that has surreptitiously infected the device some examples Ze Ops was acquired for a",
    "start": "254079",
    "end": "261440"
  },
  {
    "text": "decent amount of money by J thus really indicating I think the value of crash reports and I verify as another company",
    "start": "261440",
    "end": "267160"
  },
  {
    "text": "doing some really neat analysis on crash reports again though predominantly focused on",
    "start": "267160",
    "end": "272800"
  },
  {
    "text": "iOS now if you're creating malware detection products you should also be very interested in crash reports for the",
    "start": "272800",
    "end": "279039"
  },
  {
    "text": "simple reason that malware is somewhat buggy and actually often crashes a lot",
    "start": "279039",
    "end": "284240"
  },
  {
    "text": "for two reasons first malware authors are generally not as let's say competent",
    "start": "284240",
    "end": "291080"
  },
  {
    "text": "as maybe operating system vendor Engineers so malware is often not it's tested as well or written as well which",
    "start": "291080",
    "end": "297759"
  },
  {
    "text": "means it crashes also Mau is often pushing the envelope perhaps using",
    "start": "297759",
    "end": "303479"
  },
  {
    "text": "private apis doing kind of things that are a little strange which often means sure if the operating system perhaps is",
    "start": "303479",
    "end": "310120"
  },
  {
    "text": "updated that may result in the malware crashing so the idea is if these tools can ingest crash reports they can",
    "start": "310120",
    "end": "316919"
  },
  {
    "text": "perhaps detect that something has crashed and then analyze what has crashed and see maybe hey this was a",
    "start": "316919",
    "end": "323080"
  },
  {
    "text": "unauthorized piece of software that perhaps is Mal some great examples are stuck net the greatest piece of malware",
    "start": "323080",
    "end": "330440"
  },
  {
    "text": "ever written it was unfortunately uh detected originally via crash reports",
    "start": "330440",
    "end": "336120"
  },
  {
    "text": "more recently and more relevantly at least in the context of Mac OS is a",
    "start": "336120",
    "end": "341199"
  },
  {
    "text": "malware sample known as zuru initially undetected but had some bugs meaning that on certain Mac OS systems it would",
    "start": "341199",
    "end": "347639"
  },
  {
    "text": "crash again if tools were ingesting that crash reports they could have detected this malware where traditional",
    "start": "347639",
    "end": "353680"
  },
  {
    "text": "signatures had otherwise failed malware analysts in my opinion",
    "start": "353680",
    "end": "359199"
  },
  {
    "text": "should all also be interested in crash reports here's an example why so when I'm analyzing a piece of malware a lot",
    "start": "359199",
    "end": "365080"
  },
  {
    "text": "of times I need it to run to completion both so I can dynamically analyze it to figure out what it does but also so I",
    "start": "365080",
    "end": "372560"
  },
  {
    "text": "can detect uh test my detection capabilities against it so the lock bit",
    "start": "372560",
    "end": "377759"
  },
  {
    "text": "ransomware gang recently had a new Mac OS variant ransomware targeting Mac OS",
    "start": "377759",
    "end": "383479"
  },
  {
    "text": "unfortunately it had a bug which mean when it ran it would crash pretty early on before it actually had caused any",
    "start": "383479",
    "end": "389280"
  },
  {
    "text": "damage I mean this is good for Mac users the impact of this was really not that significant but for malare analysts this",
    "start": "389280",
    "end": "396000"
  },
  {
    "text": "was problematic so what I had to do was analyze the crash report figure out where the bug was in the malware patch",
    "start": "396000",
    "end": "402199"
  },
  {
    "text": "it at the binary level for testing purposes only and then I could run the malware which now no longer crashed and",
    "start": "402199",
    "end": "408319"
  },
  {
    "text": "confirm that my detection capabilities could generically for the ransomware again this was all possible because of",
    "start": "408319",
    "end": "414240"
  },
  {
    "text": "the crash report next we have hackers and intelligence agencies this to me is",
    "start": "414240",
    "end": "420080"
  },
  {
    "text": "super interesting so according to the press the NSA previously was collecting",
    "start": "420080",
    "end": "426000"
  },
  {
    "text": "Windows error reports and this is because well two reasons these reports",
    "start": "426000",
    "end": "431199"
  },
  {
    "text": "had a lot of very specific information about the systems that had crashed for example the operating system version the",
    "start": "431199",
    "end": "438199"
  },
  {
    "text": "language settings etc etc these are all very important and information you need when remotely infecting a system so if",
    "start": "438199",
    "end": "444800"
  },
  {
    "text": "you can get this fingerprinting information from a crash report that's super beneficial and then also this this could potentially reveal exploitable",
    "start": "444800",
    "end": "451240"
  },
  {
    "text": "security vulnerabilities on a remote system so I love this image it's a little hard to read but it's a leaked",
    "start": "451240",
    "end": "457000"
  },
  {
    "text": "image from what is supposedly an internal NSA uh slide presentation and",
    "start": "457000",
    "end": "462560"
  },
  {
    "text": "they photosho the Windows error dialogue and basically change the text instead of",
    "start": "462560",
    "end": "468319"
  },
  {
    "text": "saying hey this is going to Microsoft it's like no it's actually going to the NSA so that they can hack more systems",
    "start": "468319",
    "end": "473720"
  },
  {
    "text": "so very creative and again showing that crash reports are also very interesting",
    "start": "473720",
    "end": "479199"
  },
  {
    "text": "and valuable even to intelligence agencies and then finally in my opinion crash reports are super important",
    "start": "479199",
    "end": "485520"
  },
  {
    "text": "because in some senses they are an absolute truth and let's look at a very recent example involving crowd strike",
    "start": "485520",
    "end": "492520"
  },
  {
    "text": "crowd strike obviously caused a problem for many systems around the world but",
    "start": "492520",
    "end": "498680"
  },
  {
    "text": "originally when Windows systems started crashing who did everyone blame Microsoft which was totally",
    "start": "498680",
    "end": "505080"
  },
  {
    "text": "understandable the average user sees a blue screen they're not going to be like that's crash crowd strikes driver but",
    "start": "505080",
    "end": "511840"
  },
  {
    "text": "once we got a crash report we could very quickly see that this was not a Microsoft bug at all but rather crowd",
    "start": "511840",
    "end": "519399"
  },
  {
    "text": "strikes Colonel driver crashing and just because you have a crowd uh just because you have a crash",
    "start": "519399",
    "end": "525040"
  },
  {
    "text": "report though it doesn't mean you're going to understand exactly what you're what's going on right you still have to",
    "start": "525040",
    "end": "530240"
  },
  {
    "text": "have some knowledge which I'm going to talk about next and how to read it so this was also problematic because we had",
    "start": "530240",
    "end": "536240"
  },
  {
    "text": "people taking screenshots of crash reports drawing squiggly R lines and then making wild claims about the",
    "start": "536240",
    "end": "541839"
  },
  {
    "text": "underlying cause which were completely wrong but we getting retweeted by everyone the reality is if you really",
    "start": "541839",
    "end": "547800"
  },
  {
    "text": "looked at the crash report and understood it you could figure out exactly who was at fault and why which I think is also very very",
    "start": "547800",
    "end": "554760"
  },
  {
    "text": "important all right so hopefully I've shown you that crash reports are useful not just to users and developers but to",
    "start": "554760",
    "end": "562040"
  },
  {
    "text": "security teams malware detection products hackers intelligence agencies and others I now want to spend some time",
    "start": "562040",
    "end": "568760"
  },
  {
    "text": "talking about crash report Basics so well what is a crash report I've mentioned this many times already or at",
    "start": "568760",
    "end": "575360"
  },
  {
    "text": "least mentioned the term but haven't really defined it in a nutshell it is a",
    "start": "575360",
    "end": "580399"
  },
  {
    "text": "file generated by the operating system when a application crashes there's an",
    "start": "580399",
    "end": "586519"
  },
  {
    "text": "article by macpaw that gives a good introduction and basically they explain that you know it's kind of difficult for the average user to read because this",
    "start": "586519",
    "end": "593079"
  },
  {
    "text": "Crush Port yes it has a lot of very interesting information but it's pretty lowlevel so you got to have like some",
    "start": "593079",
    "end": "600200"
  },
  {
    "text": "understanding of it which is what we're going to learn today you might be wondering where crash",
    "start": "600200",
    "end": "605760"
  },
  {
    "text": "reports are stored on Mac OS if you open the console application and click on",
    "start": "605760",
    "end": "611079"
  },
  {
    "text": "crash reports you get a nice list or you can go to either of the two diagnostic",
    "start": "611079",
    "end": "616480"
  },
  {
    "text": "report directory and look for crash reports they're going to end in the IPS file",
    "start": "616480",
    "end": "622360"
  },
  {
    "text": "extension so what I want to now do is go through a demo we're going to start with some buggy code and then show you how in",
    "start": "622360",
    "end": "629079"
  },
  {
    "text": "the crash report we could work back to understanding exactly what went wrong we're kind of cheating here because we have source code so I'm going to point",
    "start": "629079",
    "end": "634959"
  },
  {
    "text": "out the bug already but it will show exactly how we could do that and then the rest of the cases we will work",
    "start": "634959",
    "end": "640440"
  },
  {
    "text": "backwards from the crash report to see what the underlying flaw was so top left",
    "start": "640440",
    "end": "645600"
  },
  {
    "text": "we have some buggy code basically what we're doing is we are declaring a pointer and we're setting its value to",
    "start": "645600",
    "end": "651720"
  },
  {
    "text": "null or zero sure many of you already know this but if you dreference a pointer that points to zero that is",
    "start": "651720",
    "end": "657880"
  },
  {
    "text": "going to cause a crash that is known as a null pointer D reference so if we compile and run this no surprises here",
    "start": "657880",
    "end": "665760"
  },
  {
    "text": "it crashes behind the scenes Mac OS creates a crash report for us that then",
    "start": "665760",
    "end": "670800"
  },
  {
    "text": "we can go analyze if we open it we can see it contains some basic information for example the path and name of the",
    "start": "670800",
    "end": "677760"
  },
  {
    "text": "process that crashed also the version this is important imagine you have multiple versions of your software",
    "start": "677760",
    "end": "683440"
  },
  {
    "text": "deployed well you need to know which version crashed there's also information about the operating system this is valid",
    "start": "683440",
    "end": "689800"
  },
  {
    "text": "as well this is one of the things that hypothetically speaking the NSA was interested in Reading crash reports",
    "start": "689800",
    "end": "694959"
  },
  {
    "text": "fingerprinting versions of the systems that were crashing but for example for a developer maybe it turns out it's",
    "start": "694959",
    "end": "700440"
  },
  {
    "text": "actually a bug in the operating system and not in their code the next thing that's really",
    "start": "700440",
    "end": "705560"
  },
  {
    "text": "important that we can pull out of the crash report is the crashed thread and exception information so most processes",
    "start": "705560",
    "end": "713120"
  },
  {
    "text": "are multi-threaded so we need to know what thread crashed that will be told to",
    "start": "713120",
    "end": "718200"
  },
  {
    "text": "you in the crash report important then there's some also what I refer to as basic exception information here we can",
    "start": "718200",
    "end": "724560"
  },
  {
    "text": "see that the operating system has identified that the crash is a bad access and it actually shows us that the",
    "start": "724560",
    "end": "731079"
  },
  {
    "text": "address that caused the fault or the crash is set to zero so very quickly we can already see yes this likely is a",
    "start": "731079",
    "end": "737040"
  },
  {
    "text": "null pointer D reference the next thing that you will find in the crash report which is super",
    "start": "737040",
    "end": "743639"
  },
  {
    "text": "important is the faulting instruction and a stack back Trace so the faulting",
    "start": "743639",
    "end": "749240"
  },
  {
    "text": "instruction and I will mention this many times is the location of the instruction that actually caused the exception or",
    "start": "749240",
    "end": "755959"
  },
  {
    "text": "fault this is the last thing that the CPU tried to execute which triggered a crash and often times this is where the",
    "start": "755959",
    "end": "761920"
  },
  {
    "text": "bug is or in the case where it's not this is a good starting point so often we will start at the faulting",
    "start": "761920",
    "end": "767680"
  },
  {
    "text": "instruction work backwards to figure out exactly what wrong now a lot of times this faulting instruction will be deep",
    "start": "767680",
    "end": "773720"
  },
  {
    "text": "within for example a system API more likely than not the API does not have a",
    "start": "773720",
    "end": "778839"
  },
  {
    "text": "bug in it it was invoked incorrectly perhaps it's a Memory freeing routine",
    "start": "778839",
    "end": "784120"
  },
  {
    "text": "that was passed the null pointer that's obviously going to crash that's not a bug in the API it's a bug in the caller",
    "start": "784120",
    "end": "790399"
  },
  {
    "text": "so from the stack back Trace we can figure out by looking backwards who called the code and ultimately this will",
    "start": "790399",
    "end": "796440"
  },
  {
    "text": "allow us to figure out what went wrong we also have the crashed thread",
    "start": "796440",
    "end": "801519"
  },
  {
    "text": "State this contains the values of the registers that occurred when the crash happened this is also super important",
    "start": "801519",
    "end": "808000"
  },
  {
    "text": "because this gives us cont context a lot of times when we look at the faulting instruction it'll just be some assembly",
    "start": "808000",
    "end": "814279"
  },
  {
    "text": "code that references some registers and if we didn't have the values of the registers we would not really know what",
    "start": "814279",
    "end": "820320"
  },
  {
    "text": "went wrong now these registers are going to be specific for example to the",
    "start": "820320",
    "end": "826040"
  },
  {
    "text": "operating system releas the architecture on Mac OS this is going to be arm 64 we",
    "start": "826040",
    "end": "831240"
  },
  {
    "text": "could do a whole talk about reversing arm64 and what the registers are for example register x0 through X7 are how",
    "start": "831240",
    "end": "837680"
  },
  {
    "text": "registers are passed Maria has written an amazing book all about this so I would recommend that book it's a great",
    "start": "837680",
    "end": "843320"
  },
  {
    "text": "read to get really into the topic the next thing we have in the crash report are loaded binaries this is",
    "start": "843320",
    "end": "849880"
  },
  {
    "text": "also important because perhaps the fault the exception the bug is not within the main binary but in one of its loaded",
    "start": "849880",
    "end": "857120"
  },
  {
    "text": "libraries also this has the address that the binary was loaded when the exception",
    "start": "857120",
    "end": "863759"
  },
  {
    "text": "occurred and this is actually very important because as you will see what we normally do is find the faulting instruction from the crash report and",
    "start": "863759",
    "end": "870680"
  },
  {
    "text": "then in a disassembler we load the binary that has the bug well on the file system and in memory there's going to be",
    "start": "870680",
    "end": "877399"
  },
  {
    "text": "a address mismatch because the operating system shifts around binaries when they're loaded in memory due to things",
    "start": "877399",
    "end": "883759"
  },
  {
    "text": "like aslr so what we need to do is look at where the binary image was loaded in memory then go into the disassembler and",
    "start": "883759",
    "end": "890839"
  },
  {
    "text": "tell it to rebase the image so that then all the addresses will",
    "start": "890839",
    "end": "897279"
  },
  {
    "text": "match finally we have the the address of the faulting instruction I've already mentioned this the few times this is",
    "start": "897279",
    "end": "902959"
  },
  {
    "text": "normally when we uh this is where we start so back to our crashing application we can see that the faulting",
    "start": "902959",
    "end": "909399"
  },
  {
    "text": "instruction is in the main I will crash binary at an address that occurs at",
    "start": "909399",
    "end": "914880"
  },
  {
    "text": "f78 so if we load then that binary into a disassembler rebase it so the address",
    "start": "914880",
    "end": "920040"
  },
  {
    "text": "is align and then go to that address we can see some in assembly instructions",
    "start": "920040",
    "end": "925720"
  },
  {
    "text": "where the fault occurred in this case it's a store instruction where it's trying to store the value in the W8",
    "start": "925720",
    "end": "932360"
  },
  {
    "text": "register into the X9 register and since we have the crashed thread State we can",
    "start": "932360",
    "end": "938759"
  },
  {
    "text": "see that the X9 register is zero so again if you try to dreference zero this is going to cause a crash which again",
    "start": "938759",
    "end": "945360"
  },
  {
    "text": "confirms that indeed we have a null pointer exception so even if we didn't have source code we now exactly know where there was the issue and also",
    "start": "945360",
    "end": "952680"
  },
  {
    "text": "exactly what was the issue okay so that's crash report Basics let's now make it a little more exciting",
    "start": "952680",
    "end": "959519"
  },
  {
    "text": "and talk about some real life examples now up till about a week ago",
    "start": "959519",
    "end": "965120"
  },
  {
    "text": "this was a Max specific talk but then CL crowd strike came along and really gave",
    "start": "965120",
    "end": "970759"
  },
  {
    "text": "us a great case study that I alluded to earlier so let's briefly look at that so",
    "start": "970759",
    "end": "977680"
  },
  {
    "text": "once we have a crash report from A system that had crowd strike installed",
    "start": "977680",
    "end": "983079"
  },
  {
    "text": "with its buggy uh Channel file we can load it in uh wind dbg this is the",
    "start": "983079",
    "end": "989800"
  },
  {
    "text": "program on Windows systems that can parse crash dumps or crash reports and",
    "start": "989800",
    "end": "995680"
  },
  {
    "text": "yes there's going to be a few differences from Mac OS but actually we'll see there's a ton of commonalities so even though again this talk is mostly",
    "start": "995680",
    "end": "1001920"
  },
  {
    "text": "back about Mac OS conceptually it also applies to Windows as well so in the",
    "start": "1001920",
    "end": "1007079"
  },
  {
    "text": "crash report we can see two three very important things we can see the address",
    "start": "1007079",
    "end": "1012440"
  },
  {
    "text": "of the faulting instruction so this is the instruction that the CPU executed that caused the crash and then we can",
    "start": "1012440",
    "end": "1019680"
  },
  {
    "text": "also see the thread state that holds the addresses or values of the registers at",
    "start": "1019680",
    "end": "1024839"
  },
  {
    "text": "the time of a crash and finally we can see that when dbg has pointed out that the address that was attempted to be",
    "start": "1024839",
    "end": "1031280"
  },
  {
    "text": "referenced was invalid it was unmapped so we already now know the faulting",
    "start": "1031280",
    "end": "1036319"
  },
  {
    "text": "instruction basically they were trying to dreference the R8 register and since the R8 register is invalid we know that",
    "start": "1036319",
    "end": "1043438"
  },
  {
    "text": "this is going to cause a crash so we don't know exactly why yet but we already know",
    "start": "1043439",
    "end": "1049360"
  },
  {
    "text": "it's not an all pointer D reference we know this was A Fault In Crowd strikes driver and since also we have the",
    "start": "1049360",
    "end": "1054559"
  },
  {
    "text": "address of the faulting instruction we can now disassemble their driver to figure out exactly what went wrong and",
    "start": "1054559",
    "end": "1059960"
  },
  {
    "text": "so we do that top left of the slide we can see one and two if we look at two",
    "start": "1059960",
    "end": "1065039"
  },
  {
    "text": "that's where the faulting instruction occurs as I mentioned it's dereferencing R8 so the goal is to try to figure out",
    "start": "1065039",
    "end": "1071440"
  },
  {
    "text": "why the R8 value is invalid what went wrong so if we look a few instructions",
    "start": "1071440",
    "end": "1076760"
  },
  {
    "text": "back where we see the number one we can see that the R8 register is populated by",
    "start": "1076760",
    "end": "1084280"
  },
  {
    "text": "extracting a value from an array the Rax register holds the base of the array and",
    "start": "1084280",
    "end": "1090880"
  },
  {
    "text": "the R11 register holds the index of the array now since this crash report also",
    "start": "1090880",
    "end": "1096159"
  },
  {
    "text": "has some memory contents we can actually look at that array it's the bottom of the screen and we can see that the",
    "start": "1096159",
    "end": "1102360"
  },
  {
    "text": "values from 0 to 19 the first 20 uh values in the array appear to be valid",
    "start": "1102360",
    "end": "1108440"
  },
  {
    "text": "pointers but as soon as we get to the 21st element which is index 20 because",
    "start": "1108440",
    "end": "1114960"
  },
  {
    "text": "register uh arrays are zero index we can see that clearly appears to be valid",
    "start": "1114960",
    "end": "1120120"
  },
  {
    "text": "invalid memory and also that is the same address that was dereferenced that caused the crash so very quickly we can",
    "start": "1120120",
    "end": "1127280"
  },
  {
    "text": "see now that what appears to be happening is they are indexing outside the array pulling some arbitrary value",
    "start": "1127280",
    "end": "1133799"
  },
  {
    "text": "which happens to be invalid memory that when they then dreference blows up and causes essentially a global shutdown and",
    "start": "1133799",
    "end": "1141400"
  },
  {
    "text": "this was ultimately confirmed later by crowd strike when they published as of yesterday exactly what went wrong which",
    "start": "1141400",
    "end": "1147799"
  },
  {
    "text": "confirmed this analysis precisely now the cool thing about this is not only did we debunk the claims",
    "start": "1147799",
    "end": "1155280"
  },
  {
    "text": "that people were blaming Microsoft or that this was a nullo or exception that crowd Strike should have detected we",
    "start": "1155280",
    "end": "1160960"
  },
  {
    "text": "also uh revealed the the truth of exactly what wrong even cooler I got a call from Good Morning America because",
    "start": "1160960",
    "end": "1167760"
  },
  {
    "text": "of my crash report analysis that I had tweeted about and they were like will you come explain to the general American",
    "start": "1167760",
    "end": "1173280"
  },
  {
    "text": "public what went wrong and I'm like yeah I mean I can try and so I got to be on TV I got my 15 minutes of fame thanks to",
    "start": "1173280",
    "end": "1180200"
  },
  {
    "text": "crash dump analysis so you know that's kind of neat as well and then my mom was like can I have your autograph so I",
    "start": "1180200",
    "end": "1186640"
  },
  {
    "text": "laugh at this I'm not sure if she was trolling me or not but again I never thought you know crash report analysis",
    "start": "1186640",
    "end": "1192960"
  },
  {
    "text": "would get me on TV so kind of another neat thing that we can gain from learning how to understand crash reports",
    "start": "1192960",
    "end": "1200120"
  },
  {
    "text": "okay so that was Windows as I mentioned the majority of this talk is really focused on Mac OS so now what we're",
    "start": "1200120",
    "end": "1206280"
  },
  {
    "text": "going to do is look at crashes from Mac OS and you might be wondering okay how",
    "start": "1206280",
    "end": "1212520"
  },
  {
    "text": "do I get these crash reports Patrick you've made some excellent points I'm already falling low with crash reports I want to analyze them this is a great",
    "start": "1212520",
    "end": "1219640"
  },
  {
    "text": "question and it turns out on Mac OS you just have to use your computer so all",
    "start": "1219640",
    "end": "1224720"
  },
  {
    "text": "the crashes I'm going to talk about for the remainder of the talk save for one which was still my fault actually came",
    "start": "1224720",
    "end": "1230600"
  },
  {
    "text": "directly from my computer and me just using my computer or running tools that",
    "start": "1230600",
    "end": "1235799"
  },
  {
    "text": "I had written but like inadvertently meaning I wasn't looking for vulnerabilities I was not trying to make",
    "start": "1235799",
    "end": "1241840"
  },
  {
    "text": "the system crash so I don't know if the takeaway is like Mac OS is super buggy but like there's lots of crash reports",
    "start": "1241840",
    "end": "1249000"
  },
  {
    "text": "again just from using Mac OS normally day to day and this is a great example I was writing a DNS monitor we'll talk",
    "start": "1249000",
    "end": "1255440"
  },
  {
    "text": "about this more it's a network extension and I had a bug in my code I'm human too",
    "start": "1255440",
    "end": "1261400"
  },
  {
    "text": "and so my DNS monitor crashed but when it crashed NS lookup which was the tool",
    "start": "1261400",
    "end": "1266960"
  },
  {
    "text": "I was using to test my tool also crashed and then worse the network extension session manager a root system Damon also",
    "start": "1266960",
    "end": "1275679"
  },
  {
    "text": "crashed so I was just like y'all like everyone's crashing and this is not ideal like my code crash that's fine but",
    "start": "1275679",
    "end": "1282200"
  },
  {
    "text": "why is it taking down all these other processes so again Mac OS clearly some room for improvement I don't mind",
    "start": "1282200",
    "end": "1288600"
  },
  {
    "text": "because this gives me some really interesting crash reports to dig into and let's do that now so let's start",
    "start": "1288600",
    "end": "1294159"
  },
  {
    "text": "with Lulu Lulu is actually a tool I wrote I am you know picking on crowd strike picking on Apple well I'm going",
    "start": "1294159",
    "end": "1299600"
  },
  {
    "text": "to pick on myself as well because it's important to understand that all software is going to have bucks so I got",
    "start": "1299600",
    "end": "1306000"
  },
  {
    "text": "a crash report from Lulu and looking at it I was like I'm not sure exactly what's going on it says there's an",
    "start": "1306000",
    "end": "1311200"
  },
  {
    "text": "exception a bad access but you know the memory address doesn't you know it's not a null it's kind of strange but as soon",
    "start": "1311200",
    "end": "1318000"
  },
  {
    "text": "as I looked at the stack back Trace I noticed it was a very deep repeating",
    "start": "1318000",
    "end": "1323039"
  },
  {
    "text": "call stack so the same function was being called again and again and again again like hundreds of times and when",
    "start": "1323039",
    "end": "1328640"
  },
  {
    "text": "you see this this is in very indicative of an issue with recursion that leads to something called stack exhaustion which",
    "start": "1328640",
    "end": "1335120"
  },
  {
    "text": "basically means you use up the call stack and so as soon as I saw that I was like damn I know exactly what went",
    "start": "1335120",
    "end": "1341919"
  },
  {
    "text": "wrong so previously I had implemented some logic in Lulu and I decided to do",
    "start": "1341919",
    "end": "1347559"
  },
  {
    "text": "this recursively I remembered learning about recursive in my computer science class and I was like I always want to use",
    "start": "1347559",
    "end": "1353240"
  },
  {
    "text": "recursion so basically what Lulu was trying to do is handle something referring referred to as related flows",
    "start": "1353240",
    "end": "1359320"
  },
  {
    "text": "the idea is imagine the user installs a new browser when it accesses the network",
    "start": "1359320",
    "end": "1364720"
  },
  {
    "text": "Lulu is a firewall it's going to pop up and say hey something is accessing the network that's all well and good but if",
    "start": "1364720",
    "end": "1370600"
  },
  {
    "text": "the browser is opening like 30 tabs I shouldn't alert the user 30 times I should alert them the first time and",
    "start": "1370600",
    "end": "1376480"
  },
  {
    "text": "then based on what their response is take the same action if they allow it I should allow all the other connections",
    "start": "1376480",
    "end": "1381799"
  },
  {
    "text": "so Lulu cues up the other connections and then recursively processes those when the user responds this is all well",
    "start": "1381799",
    "end": "1389039"
  },
  {
    "text": "and good until you get something like 300 related flows which then causes a",
    "start": "1389039",
    "end": "1395240"
  },
  {
    "text": "stack exhaustion issue due to the recursion basically the stack on Mac OS is not big enough to handle that so as",
    "start": "1395240",
    "end": "1401799"
  },
  {
    "text": "soon as I saw this I realized okay that's a problem and so I went back to implementing an iterative approach and",
    "start": "1401799",
    "end": "1407279"
  },
  {
    "text": "so even to this day I've never use recursion which I'm a little bummed about next up we have Yara Yara is a",
    "start": "1407279",
    "end": "1415400"
  },
  {
    "text": "widespread uh signature scanning Library it's used in a lot of antivirus products",
    "start": "1415400",
    "end": "1421640"
  },
  {
    "text": "and I was testing at one of my tools I noticed this like random crash so I looked at the crash report because again",
    "start": "1421640",
    "end": "1427320"
  },
  {
    "text": "I'm always super interested anytime something crashes and I looked at the exception type in the crash report and",
    "start": "1427320",
    "end": "1433200"
  },
  {
    "text": "it said bad access which wasn't surprising but then the reason it said was code signature in invalid and I was",
    "start": "1433200",
    "end": "1439440"
  },
  {
    "text": "like okay that's super weird so I did more testing and I found out what was happening is this crash would occur when",
    "start": "1439440",
    "end": "1446440"
  },
  {
    "text": "I was scanning a unsigned binary or a binary with an invalid signature which",
    "start": "1446440",
    "end": "1452200"
  },
  {
    "text": "is super weird Apple though has an implementation of Yara I was testing the open source",
    "start": "1452200",
    "end": "1458279"
  },
  {
    "text": "public one and so what I did was diff the two uh and basically I found that",
    "start": "1458279",
    "end": "1464159"
  },
  {
    "text": "when Apple mapped in a binary to scan they did so with a apple specific flag",
    "start": "1464159",
    "end": "1471279"
  },
  {
    "text": "which is map resilient code sign turns out on Mac OS if you map a file even in",
    "start": "1471279",
    "end": "1476679"
  },
  {
    "text": "a readon manner just to scan its btes if that file is a binary that has a invalid",
    "start": "1476679",
    "end": "1482559"
  },
  {
    "text": "signature if you don't map it with this specific flag when you go to try to read that memory for example to scan it Mac",
    "start": "1482559",
    "end": "1489559"
  },
  {
    "text": "OS freaks out and says hey this is not signed and crashes which is kind of",
    "start": "1489559",
    "end": "1495039"
  },
  {
    "text": "makes sense if that was an executable you were running but for like a read scan that's kind of",
    "start": "1495039",
    "end": "1500919"
  },
  {
    "text": "problematic so from the crash report though I was able to understand exactly what was going wrong Yara was not using",
    "start": "1500919",
    "end": "1507840"
  },
  {
    "text": "this flag so Mac OS was freaking out and causing it to crash uh and so I was able to create a bug report that contained a",
    "start": "1507840",
    "end": "1514360"
  },
  {
    "text": "crash report but also from the crash report since I understood exactly what was going wrong I could provide a lot of",
    "start": "1514360",
    "end": "1520880"
  },
  {
    "text": "really useful information to the developer instead of just saying hey Yara something sometimes crashes like",
    "start": "1520880",
    "end": "1526000"
  },
  {
    "text": "that's not helpful to them at all I could say it crashes on Mac OS when scanning a binary that has invalid code",
    "start": "1526000",
    "end": "1532640"
  },
  {
    "text": "signature because Yara is not using this specific flag you should copy what Apple does and and do this and so when I",
    "start": "1532640",
    "end": "1539320"
  },
  {
    "text": "submitted this to Yar the developers were were stoked because you know provided enough information they were",
    "start": "1539320",
    "end": "1544480"
  },
  {
    "text": "very uh they were able to very quickly P push out a patch so kudos to them and they were like thanks for the very",
    "start": "1544480",
    "end": "1549960"
  },
  {
    "text": "complete bug report so again this is an example of if we understand crash reports and software crashes it's if",
    "start": "1549960",
    "end": "1556120"
  },
  {
    "text": "it's a bug we want to get fixed we can provide that information which really empowers the developer to do that",
    "start": "1556120",
    "end": "1561640"
  },
  {
    "text": "quickly and if we look at their patch all they did was now they map files with that Apple specific flag so even if they",
    "start": "1561640",
    "end": "1568159"
  },
  {
    "text": "scan a binary with a invalid signature Mac OS no longer freaks out so Yara is",
    "start": "1568159",
    "end": "1573840"
  },
  {
    "text": "stoked and this means all the AV Tools that use it will no longer crash on Mac",
    "start": "1573840",
    "end": "1579200"
  },
  {
    "text": "OS the next crash I want to talk about is in adobe's Crash reporter it's kind of a silly bug but like caused me to",
    "start": "1579200",
    "end": "1585600"
  },
  {
    "text": "laugh for days that like adobe's crash report was crashing kind of ironic and",
    "start": "1585600",
    "end": "1590640"
  },
  {
    "text": "if we look at the crash report we can actually see some application specific information that tells us exactly why it",
    "start": "1590640",
    "end": "1596600"
  },
  {
    "text": "crashes it basically said CF release is called with null CF release is a",
    "start": "1596600",
    "end": "1601960"
  },
  {
    "text": "function that releases memory you can't invoke it with null if you do it'll crash and again this is not a bug in the",
    "start": "1601960",
    "end": "1608360"
  },
  {
    "text": "in the API it's rather a bug in it being called so now what we have to do is we have to look at the stack back Trace to",
    "start": "1608360",
    "end": "1615799"
  },
  {
    "text": "see who called it who is responsible for invoking this API with null because that's where the bug is so if we do that",
    "start": "1615799",
    "end": "1623799"
  },
  {
    "text": "looking at the stack back Trace we can see that the Adobe crash reporter cause",
    "start": "1623799",
    "end": "1629399"
  },
  {
    "text": "calls an API that can return a null pointer they don't check this and they",
    "start": "1629399",
    "end": "1635159"
  },
  {
    "text": "always free that which is problematic because if you try to free a null pointer that's going to crash so the",
    "start": "1635159",
    "end": "1642679"
  },
  {
    "text": "solution would be simply check this I asked chat GPT how to fix it and it's like yeah just check the return and if",
    "start": "1642679",
    "end": "1648159"
  },
  {
    "text": "the return is null handle that gracefully don't try to free it next up we have one of my other tools",
    "start": "1648159",
    "end": "1656520"
  },
  {
    "text": "do not disturb you might be thinking wow Patrick your tool sucks no no no in this case it turns out to be an apple bug but",
    "start": "1656520",
    "end": "1662799"
  },
  {
    "text": "I didn't initially expect that so I ran this tool and you know I came back to my",
    "start": "1662799",
    "end": "1667840"
  },
  {
    "text": "computer and again there was a crash and I was like uh what's wrong here and looking at the crash report I could see",
    "start": "1667840",
    "end": "1673440"
  },
  {
    "text": "it crashed in one of Apple's security Frameworks specifically in the SEC error",
    "start": "1673440",
    "end": "1679640"
  },
  {
    "text": "API I assumed that this was a bug in my code I was like there's no way that there is like a bug in Apple's core",
    "start": "1679640",
    "end": "1686760"
  },
  {
    "text": "security framework that I am inadvertently triggering so from the back uh the stack back Trace I found",
    "start": "1686760",
    "end": "1692240"
  },
  {
    "text": "where in my code I was making a call that eventually got into this API and it was very simple I was basically copying",
    "start": "1692240",
    "end": "1698120"
  },
  {
    "text": "a public key and the key object I was passing it was valid so I was like okay like I don't think I'm doing anything",
    "start": "1698120",
    "end": "1703840"
  },
  {
    "text": "wrong this is pretty straightforward let's take a closer look at that SEC error API because maybe there's a bug in",
    "start": "1703840",
    "end": "1709880"
  },
  {
    "text": "Mac OS maybe I shouldn't hold Apple in such high esteem so what we do is from the crash",
    "start": "1709880",
    "end": "1715320"
  },
  {
    "text": "report we find the address of the faulting instruction we load the security framework into a disassembler",
    "start": "1715320",
    "end": "1721279"
  },
  {
    "text": "to find the actual disassembly instructions of that faulting instruction we can see what they are",
    "start": "1721279",
    "end": "1727480"
  },
  {
    "text": "doing in the middle of the slide they are trying to dreference the second argument which in this case is somehow",
    "start": "1727480",
    "end": "1733200"
  },
  {
    "text": "invalid which is causing a crash since the security framework is actually open Source we can now map that disassembly",
    "start": "1733200",
    "end": "1740320"
  },
  {
    "text": "to source code which is always super nice you can more likely see what's going on when you're reading source code",
    "start": "1740320",
    "end": "1746720"
  },
  {
    "text": "and we can see it looks like a pretty innocuous instruction they're basically checking that a pointer is not null and",
    "start": "1746720",
    "end": "1752360"
  },
  {
    "text": "then if so they are dereferencing it but we know that this is apparently",
    "start": "1752360",
    "end": "1758039"
  },
  {
    "text": "crashing so if we look a little closer we can actually see even though they declare this error variable as a pointer",
    "start": "1758039",
    "end": "1765640"
  },
  {
    "text": "they never initialize it and if you try to dereference or use an un",
    "start": "1765640",
    "end": "1770960"
  },
  {
    "text": "uninitialized pointer it's going to point to random memory which at best is going to cause a crash at worst this is",
    "start": "1770960",
    "end": "1778159"
  },
  {
    "text": "going to introduce a exploitable memory corruption vulnerability and the kind of hilarious thing is if you actually",
    "start": "1778159",
    "end": "1784279"
  },
  {
    "text": "loaded the source code for the SEC error API uh it's open source into xcode xcode",
    "start": "1784279",
    "end": "1791080"
  },
  {
    "text": "will like yell at you and be like yo this code is buggy you are referencing a pointer that has never been initialized",
    "start": "1791080",
    "end": "1797519"
  },
  {
    "text": "so I don't know why Apple does to compile their code but like if they literally just looked at the compiler warnings they would have seen this bug",
    "start": "1797519",
    "end": "1803640"
  },
  {
    "text": "so I reported this to Apple they uh patched it they actually assigned it a cve because they said yeah this is very",
    "start": "1803640",
    "end": "1809559"
  },
  {
    "text": "problematic this is a bug in uninitialized pointer in one of our core API this is something that should be",
    "start": "1809559",
    "end": "1817960"
  },
  {
    "text": "fixed staying with my tools I again was testing another tool so yeah I test my tools a lot and I was like out surfing",
    "start": "1817960",
    "end": "1824720"
  },
  {
    "text": "and I came home and my box had not just like crashed it had kernel pan I'm a little strange when my computer",
    "start": "1824720",
    "end": "1830720"
  },
  {
    "text": "panics I get really excited because I'm like maybe it's a kernel bug right and so yeah I know I'm weird so I looked at",
    "start": "1830720",
    "end": "1837039"
  },
  {
    "text": "this and you know I was like this is strange I ran my tool a few hours later it kept crashing and I was like weird my",
    "start": "1837039",
    "end": "1842760"
  },
  {
    "text": "tool runs in user mode user mode tools should not cause the box to panic that's the whole point they run in user mode so",
    "start": "1842760",
    "end": "1850200"
  },
  {
    "text": "I looked at this Colonel crash report and I noticed a few things first we have a page fault and then we have the",
    "start": "1850200",
    "end": "1855760"
  },
  {
    "text": "faulting instruction but also the address of what is unmapped memory so again we start with the address of the",
    "start": "1855760",
    "end": "1862320"
  },
  {
    "text": "faulting instruction we find that in disassembly and again because this part of the kernel was open source I could",
    "start": "1862320",
    "end": "1868039"
  },
  {
    "text": "find the source code that mapped to the buggy instruction basically they were checking a path to see if it was null",
    "start": "1868039",
    "end": "1874440"
  },
  {
    "text": "terminated if we look at that we're like that looks kind of okay but it's crashing why well it turns out they had",
    "start": "1874440",
    "end": "1882840"
  },
  {
    "text": "a off by one error so what they did was they calculated the length of the data and then used that as the index to see",
    "start": "1882840",
    "end": "1889000"
  },
  {
    "text": "if it was null terminated that's problematic because again since arrays start at index zero if we want to look",
    "start": "1889000",
    "end": "1894880"
  },
  {
    "text": "at the last element of the array you have to do length minus one and this normally wouldn't cause a",
    "start": "1894880",
    "end": "1901559"
  },
  {
    "text": "problem unless the path they were checking happened to end exactly at a page boundary and then not the next page",
    "start": "1901559",
    "end": "1907880"
  },
  {
    "text": "was not mapped in that case it would be an out of bounds memory read which would",
    "start": "1907880",
    "end": "1912960"
  },
  {
    "text": "cause a kernel panic just like crowd strikes bug",
    "start": "1912960",
    "end": "1918000"
  },
  {
    "text": "so I reported this to like my tool was like inadvertently triggering This and like if I do that users yell at me even",
    "start": "1918000",
    "end": "1924679"
  },
  {
    "text": "though it's not my problem and Apple's fix was like I can't understand it so",
    "start": "1924679",
    "end": "1930600"
  },
  {
    "text": "again remember they're trying to like check if a path is null terminated and there's a comment in the code that says",
    "start": "1930600",
    "end": "1935960"
  },
  {
    "text": "make sure the path is n terminated and their fix was to add a stir copy specifically a stir L copy now many of",
    "start": "1935960",
    "end": "1943039"
  },
  {
    "text": "you might know this but what a sterl l copy function does is copy bites until either a the buffer is filled so it",
    "start": "1943039",
    "end": "1950039"
  },
  {
    "text": "doesn't overflow or B it encounters a null bite well we're b as the comment",
    "start": "1950039",
    "end": "1955080"
  },
  {
    "text": "says we're not sure this is null terminated so like if we just are blindly copying until we hit a null bite",
    "start": "1955080",
    "end": "1960840"
  },
  {
    "text": "this means now we've just introduced a information leak and also this will still crash if the path happens to be",
    "start": "1960840",
    "end": "1966919"
  },
  {
    "text": "aligned with uh an unmapped page so I was like apple I mean like not only did you not fix the bug you actually",
    "start": "1966919",
    "end": "1973039"
  },
  {
    "text": "introduce a info leak like what are you doing so I reported this to them as well",
    "start": "1973039",
    "end": "1978880"
  },
  {
    "text": "and while they were fixing this I said you know what I'm going to look at the rest of this function because clearly",
    "start": "1978880",
    "end": "1984000"
  },
  {
    "text": "it's buggy there's an off by one they have no idea what's going on here are there other bugs and it turns out yes",
    "start": "1984000",
    "end": "1990000"
  },
  {
    "text": "like two lines above it was a memory copy or a B copy that was actually",
    "start": "1990000",
    "end": "1996600"
  },
  {
    "text": "Incorrect and would lead to an exploitable kernel Heap overflow that's really problematic again we got here",
    "start": "1996600",
    "end": "2002880"
  },
  {
    "text": "from a crash report now this next one is maybe not",
    "start": "2002880",
    "end": "2008200"
  },
  {
    "text": "the most interesting bug in terms of what it was it was a null pointer exception but there's kind of an",
    "start": "2008200",
    "end": "2013240"
  },
  {
    "text": "interesting story about it which was my friend started complaining and she said Patrick every time you text me my phone",
    "start": "2013240",
    "end": "2020279"
  },
  {
    "text": "crashes and I was like what and she's like are you trying to hack me and I was",
    "start": "2020279",
    "end": "2025480"
  },
  {
    "text": "like rude uh I wouldn't use my hacking skills for personal gain and also my exploits don't crash like I was very",
    "start": "2025480",
    "end": "2031919"
  },
  {
    "text": "offended but she's like no no no no no no like let me show you this so I went",
    "start": "2031919",
    "end": "2036960"
  },
  {
    "text": "and looked and every time she typed the word Taiwan her phone would crash and so she's like maybe the Chinese are trying",
    "start": "2036960",
    "end": "2043039"
  },
  {
    "text": "to hack me and I'm like I don't think so but like let's figure out what's going on because like you shouldn't be able to",
    "start": "2043039",
    "end": "2049839"
  },
  {
    "text": "remotely crash iPhones right so what do we do we get the crash report we start",
    "start": "2049839",
    "end": "2055079"
  },
  {
    "text": "looking at the crash report and we can see that the exception information appears to show that it's a null pointer D reference so not like a super",
    "start": "2055079",
    "end": "2061440"
  },
  {
    "text": "interesting bug in the terms of exploitability but if we look at the call stack we can see that appears to be",
    "start": "2061440",
    "end": "2067200"
  },
  {
    "text": "related to to Emoji processing which makes sense because I would text her a lot of emojis and also it triggered when",
    "start": "2067200",
    "end": "2072760"
  },
  {
    "text": "she would try to type a word that would trigger Mac iOS to suggest an",
    "start": "2072760",
    "end": "2079720"
  },
  {
    "text": "emoji so looking at information from the crash report we have the crash thread stra uh thread State we can see it's",
    "start": "2079720",
    "end": "2087118"
  },
  {
    "text": "crashing in a stir compare function where the string that's being passed is null so again this is an example of not",
    "start": "2087119",
    "end": "2094440"
  },
  {
    "text": "a bug in an API but rather incorrectly calling an API you can't do a string",
    "start": "2094440",
    "end": "2099480"
  },
  {
    "text": "comparison passing in a null I mean maybe Apple could check for this but this is pretty standard that that would crash so the question is why so I looked",
    "start": "2099480",
    "end": "2108720"
  },
  {
    "text": "at the disassembly in the call stack and I basically found that what Apple was doing was trying to get the local of the",
    "start": "2108720",
    "end": "2115880"
  },
  {
    "text": "user's device and then comparing that with CM for China if that was true they",
    "start": "2115880",
    "end": "2122119"
  },
  {
    "text": "would not display the Taiwanese flag so that was interesting because basically it showed that Apple had acquas to",
    "start": "2122119",
    "end": "2129240"
  },
  {
    "text": "demands of the Chinese government and was like yeah sure we can censor content on the iPhone which I think is kind of",
    "start": "2129240",
    "end": "2136000"
  },
  {
    "text": "well I won't go on a rant about that but you know Apple claims to be for the users and then they're like agreeing to censor stuff so what they were trying to",
    "start": "2136000",
    "end": "2143079"
  },
  {
    "text": "do is censor the Taiwanese flag on Chinese phones and I guess the takeaway here is a China uh Apple seems to have",
    "start": "2143079",
    "end": "2150839"
  },
  {
    "text": "no problem like again acquiescing to the demands of the Chinese government but also like does this incorrectly so like",
    "start": "2150839",
    "end": "2157319"
  },
  {
    "text": "if you're going to introduce censorship codee like at least test it I guess would be my suggestion who",
    "start": "2157319",
    "end": "2164160"
  },
  {
    "text": "knows all right so those were some in my opinion very interesting crash reports that revealed exploitable you know",
    "start": "2164160",
    "end": "2170560"
  },
  {
    "text": "kernel Heap overflows crash reporters and bugs and crash reporters Apple censorship code um those were somewhat",
    "start": "2170560",
    "end": "2178119"
  },
  {
    "text": "historical but I do think showed the value of crash report analysis I now",
    "start": "2178119",
    "end": "2183440"
  },
  {
    "text": "want to shift gears a little bit and talk about more recent crash ports that reveal what are all currently still zero",
    "start": "2183440",
    "end": "2190400"
  },
  {
    "text": "days in Mac OS again all for my computer me not trying to find",
    "start": "2190400",
    "end": "2195640"
  },
  {
    "text": "bugs so the first one is in Apple's keychain access app and so I was using",
    "start": "2195640",
    "end": "2201720"
  },
  {
    "text": "the keychain and it generated a crash report and I was like that's strange so I looked at the crash report and if we",
    "start": "2201720",
    "end": "2207640"
  },
  {
    "text": "look at the reason for the crash we can see that the operating system has detected a pointer authentication",
    "start": "2207640",
    "end": "2213760"
  },
  {
    "text": "failure this indicates that something was freed or released and ultimately was corrupted if you see a pointer",
    "start": "2213760",
    "end": "2219359"
  },
  {
    "text": "authentication fa failure this is indicative of uh usually very interesting uh memory corruption",
    "start": "2219359",
    "end": "2225960"
  },
  {
    "text": "vulnerability so you might want to look into that to see if it's exploitable and to me it was interesting because the",
    "start": "2225960",
    "end": "2231760"
  },
  {
    "text": "keychain access application has the access rights to everything in the keychain which includes your passwords",
    "start": "2231760",
    "end": "2238400"
  },
  {
    "text": "your certificates and all other things so if we look at the stack back Trace in",
    "start": "2238400",
    "end": "2243680"
  },
  {
    "text": "the crash report we can see that it starts with a bunch bunch of calls to Apple various Apple security apis",
    "start": "2243680",
    "end": "2251119"
  },
  {
    "text": "including the certificate get data so I decided to debug the application to get",
    "start": "2251119",
    "end": "2256920"
  },
  {
    "text": "more insight into what exactly what was going on so I set a breakpoint on this method and once that breakpoint was hit",
    "start": "2256920",
    "end": "2264240"
  },
  {
    "text": "I simply printed out the values specifically the arguments and in lldb on Mac OS the PO",
    "start": "2264240",
    "end": "2272480"
  },
  {
    "text": "debugger command will print out an object and in this case we're printing out the address or the value of the",
    "start": "2272480",
    "end": "2279359"
  },
  {
    "text": "first parameter the first argument which is in the x0 register and we can see lldb tells us not only its value but its",
    "start": "2279359",
    "end": "2286560"
  },
  {
    "text": "type which is very important and we can see its type is a key object this is",
    "start": "2286560",
    "end": "2292079"
  },
  {
    "text": "strange because if we go read the documentation for the certificate get data API it expects not a key object but",
    "start": "2292079",
    "end": "2299560"
  },
  {
    "text": "a certificate object so basically what apple is doing is in some scenarios the",
    "start": "2299560",
    "end": "2304839"
  },
  {
    "text": "keychain access application is passing the wrong type of an object to an API",
    "start": "2304839",
    "end": "2310680"
  },
  {
    "text": "that expects one type of object it's passing a key object instead of a certificate object this is very",
    "start": "2310680",
    "end": "2317079"
  },
  {
    "text": "problematic because this is an object type um confusion vulnerability potentially exploitable but if nothing",
    "start": "2317079",
    "end": "2323079"
  },
  {
    "text": "else like just a a bad bug next up I want to talk about an",
    "start": "2323079",
    "end": "2329200"
  },
  {
    "text": "interesting crash in Apple's system extension Damon a little bit of backstory what is the system extension",
    "start": "2329200",
    "end": "2335760"
  },
  {
    "text": "Damon so about five years ago Apple decided to deprecate thirdparty Kernel extensions and when the crowd strike",
    "start": "2335760",
    "end": "2342560"
  },
  {
    "text": "Fiasco happened Apple was like this wouldn't happen to us we were smart enough to kick everyone out of the",
    "start": "2342560",
    "end": "2348400"
  },
  {
    "text": "colonel three years ago five years ago and that is correct and apple should be lotted for that decision the other thing",
    "start": "2348400",
    "end": "2355880"
  },
  {
    "text": "that Apple did that was very important is when they kicked everyone out of the kernel they said we are going to give you new Frameworks that allow you to",
    "start": "2355880",
    "end": "2363640"
  },
  {
    "text": "build the same type of tools that previously lived in the Kel these tools",
    "start": "2363640",
    "end": "2368960"
  },
  {
    "text": "will have the same power the same ability but if they crash they won't take down the entire system they also",
    "start": "2368960",
    "end": "2375560"
  },
  {
    "text": "won't be easily unloaded by malware and this is really important because when people talk about Microsoft kicking",
    "start": "2375560",
    "end": "2380720"
  },
  {
    "text": "kernel extension third party kernel extensions there's people who are like this is a bad idea because malware will",
    "start": "2380720",
    "end": "2386119"
  },
  {
    "text": "then be able to like own these tools and it's like no Microsoft would likely or would have to provide similar extensions",
    "start": "2386119",
    "end": "2393440"
  },
  {
    "text": "or Frameworks that would allow developers to write the same kind of tools but that would run in user mode",
    "start": "2393440",
    "end": "2400000"
  },
  {
    "text": "okay that's relevant because the system extension Damon is the component that",
    "start": "2400000",
    "end": "2405079"
  },
  {
    "text": "runs in user mode on Mac OS system that allows us to create these new security",
    "start": "2405079",
    "end": "2410119"
  },
  {
    "text": "tools that have the same power essentially as colel extensions about run in user mode so it's very important",
    "start": "2410119",
    "end": "2416960"
  },
  {
    "text": "that this is written well so I was writing a system extension I was porting one of my tools out of the kernel and",
    "start": "2416960",
    "end": "2423880"
  },
  {
    "text": "testing it and my tool had a bug seeing a here I guess but interestingly like it",
    "start": "2423880",
    "end": "2429839"
  },
  {
    "text": "ended up crashing Apple's system Damon and I was like that's not good like even if I have a bug in my code it shouldn't",
    "start": "2429839",
    "end": "2436200"
  },
  {
    "text": "crash Apple's you know component that's run this this core component looking at the crash report and looking at the call",
    "start": "2436200",
    "end": "2442560"
  },
  {
    "text": "stack we can see that the faulting instruction is in an assertion and if we",
    "start": "2442560",
    "end": "2448319"
  },
  {
    "text": "disassemble it we can see that what the system extension Damon is doing is handling some error Case by throwing uh",
    "start": "2448319",
    "end": "2456079"
  },
  {
    "text": "or validating an assertion but if that assertion fails instead of handling that gracely gracefully it",
    "start": "2456079",
    "end": "2461920"
  },
  {
    "text": "decides to crash which is like an interesting design decision so I decided",
    "start": "2461920",
    "end": "2467800"
  },
  {
    "text": "to look for other assertions that perhaps were easily triggerable and very quickly I found one if you ask the",
    "start": "2467800",
    "end": "2475520"
  },
  {
    "text": "system extension Damon to load a new system extension it validates the architectures and it does this because",
    "start": "2475520",
    "end": "2482000"
  },
  {
    "text": "on Mac OS you can have what are known as fat or Universal binaries that have multiple Arch ures for example Intel arm",
    "start": "2482000",
    "end": "2489200"
  },
  {
    "text": "64 etc etc so it makes sense that the system extension Damon should validate",
    "start": "2489200",
    "end": "2495119"
  },
  {
    "text": "that and so we can see a check checks to make sure the architecture count is not zero that would be an invalid file but",
    "start": "2495119",
    "end": "2501359"
  },
  {
    "text": "again if it detects this instead of like just refusing to load the extension it throws an assertion failure and crashes",
    "start": "2501359",
    "end": "2508359"
  },
  {
    "text": "so this means we can take a extension we can KN out the number of architectures",
    "start": "2508359",
    "end": "2514839"
  },
  {
    "text": "set it to zero request that the system extension loads this we don't need any special permissions or privileges to do",
    "start": "2514839",
    "end": "2521079"
  },
  {
    "text": "that and this will cause a repeatable crash the impact of that is if we do this over and over we can prevent any",
    "start": "2521079",
    "end": "2527400"
  },
  {
    "text": "other security tool from loading so this isn't exploitable because it's just an assertion failure but being able to",
    "start": "2527400",
    "end": "2533720"
  },
  {
    "text": "cause this Damon to crash can have impacts for other security tools now the last bug I want to talk",
    "start": "2533720",
    "end": "2540640"
  },
  {
    "text": "about is in Apple's Network extension session manager this is probably my favorite bog maybe because Apple's been",
    "start": "2540640",
    "end": "2547559"
  },
  {
    "text": "begging me to like give them details about this but I was like no I'm going to save it for y'all I want you to be the first ones to learn about this so",
    "start": "2547559",
    "end": "2554319"
  },
  {
    "text": "Apple's Network extension session manager is somewhat related to the system extension manager it handles a",
    "start": "2554319",
    "end": "2560760"
  },
  {
    "text": "certain type of extension known as Network extensions and these are things like firewalls so if you're writing a",
    "start": "2560760",
    "end": "2566240"
  },
  {
    "text": "firewall on Mac OS using the new approach it's going to run in user mode as a network extension so the network",
    "start": "2566240",
    "end": "2572800"
  },
  {
    "text": "extension session manager manages these so again I was writing this I had like a",
    "start": "2572800",
    "end": "2578480"
  },
  {
    "text": "bug in my configuration and when I tried to load my network extension it crashed",
    "start": "2578480",
    "end": "2584040"
  },
  {
    "text": "the crash was kind of interesting not a ton of information but it basically showed that there was invalid memory",
    "start": "2584040",
    "end": "2589920"
  },
  {
    "text": "access in what is the respond to selector method this is a method related",
    "start": "2589920",
    "end": "2595240"
  },
  {
    "text": "to Objective C calls and if you see a crash in this function it means it was likely invoked with a corrupted object",
    "start": "2595240",
    "end": "2601400"
  },
  {
    "text": "so I was like that's interesting let's look into this more so what was this object type",
    "start": "2601400",
    "end": "2607480"
  },
  {
    "text": "corruption basically what the network extension manager was trying to do was build a error message using a format",
    "start": "2607480",
    "end": "2615119"
  },
  {
    "text": "string it requested a format string using a key and also expect uh specified",
    "start": "2615119",
    "end": "2621160"
  },
  {
    "text": "what it expected the format specifiers to be the format specifiers are the things that follow the percent and these",
    "start": "2621160",
    "end": "2628680"
  },
  {
    "text": "have to match the type of object that you put in the format string so for example a percent at is the objectiv C",
    "start": "2628680",
    "end": "2636280"
  },
  {
    "text": "way you say I'm going to put an Objective C object into this format string it's a placeholder for an object",
    "start": "2636280",
    "end": "2642480"
  },
  {
    "text": "on the other hand if you put a percent s you say I am going to give you not an object but a traditional C string which",
    "start": "2642480",
    "end": "2649960"
  },
  {
    "text": "is is just a sequence of bytes so the network extension manager requests this",
    "start": "2649960",
    "end": "2656240"
  },
  {
    "text": "localized string to build a log message but if you look at the string it gets back the last format specifier is not a",
    "start": "2656240",
    "end": "2664440"
  },
  {
    "text": "percent s which is what it asks for but really a percent at and if we look at",
    "start": "2664440",
    "end": "2670800"
  },
  {
    "text": "the disassembly we can see that it then invokes the NS string in it with format to populate this format string with a C",
    "start": "2670800",
    "end": "2678800"
  },
  {
    "text": "string which is what it asks for so that's what it expects the format string to be we can confirm this in a debugger",
    "start": "2678800",
    "end": "2685920"
  },
  {
    "text": "basically showing this object mismatch by showing indeed the format string",
    "start": "2685920",
    "end": "2691079"
  },
  {
    "text": "that's about to be populated does contain as its last format specifier percent at which again says you should",
    "start": "2691079",
    "end": "2698839"
  },
  {
    "text": "give me an object when in reality what they are passing in is not an object but a C string this is very problematic",
    "start": "2698839",
    "end": "2706440"
  },
  {
    "text": "because if you pass a C string into something that expects an object pointer",
    "start": "2706440",
    "end": "2711720"
  },
  {
    "text": "it's going to crash horribly and maybe even be exploitable however what I noticed was",
    "start": "2711720",
    "end": "2717079"
  },
  {
    "text": "instead of trying to exploit this for privilege escalation whatever else that when the network extension session",
    "start": "2717079",
    "end": "2722680"
  },
  {
    "text": "manager crashed it would actually unload every other network extension this means",
    "start": "2722680",
    "end": "2728839"
  },
  {
    "text": "any other security tool that was running on the Mac OS system could be unloaded this is very problematic because this is",
    "start": "2728839",
    "end": "2734960"
  },
  {
    "text": "one of the things Apple promised would not happen if we moved our tools out of Kernel mode because one of the things is",
    "start": "2734960",
    "end": "2740240"
  },
  {
    "text": "if you're running in kernel mode user mode malware can't just be like yo unload yourself so this is problematic because",
    "start": "2740240",
    "end": "2746920"
  },
  {
    "text": "again the impact is malware could make a request to the network extension manager with no special permissions give it a",
    "start": "2746920",
    "end": "2754480"
  },
  {
    "text": "corrupted or malformed extension trigger this crash and thereby indirectly Rec uh",
    "start": "2754480",
    "end": "2760760"
  },
  {
    "text": "cause any other network extension security tools firewalls or anything else to be unloaded because when the",
    "start": "2760760",
    "end": "2767040"
  },
  {
    "text": "network extension session manager goes it down it takes all the other thirdparty network extensions with it",
    "start": "2767040",
    "end": "2773400"
  },
  {
    "text": "not cool this also has some impact on the network so there's some potential impact here as well ransomware for",
    "start": "2773400",
    "end": "2779880"
  },
  {
    "text": "example could kill the network to prevent backups and then start maybe encrypting all the files or a lot of",
    "start": "2779880",
    "end": "2785839"
  },
  {
    "text": "security tools GA events and do cloud-based analysis to detect Ma so",
    "start": "2785839",
    "end": "2790920"
  },
  {
    "text": "this gives ma the opportunity to prevent that as well now I could talk about crash",
    "start": "2790920",
    "end": "2796160"
  },
  {
    "text": "reports all day I don't want to put you to sleep but there's like so many more again these are just like from my",
    "start": "2796160",
    "end": "2802000"
  },
  {
    "text": "computer so there's like crashes in like the Bluetooth Damon and in like payment processor extensions and in the Windows",
    "start": "2802000",
    "end": "2808920"
  },
  {
    "text": "server and in virtualization so like Mac OS appears to be very buggy and as I've hopefully shown these crash reports can",
    "start": "2808920",
    "end": "2815720"
  },
  {
    "text": "reveal Sometimes some very interesting bugs that clearly have security Implement implications some of these",
    "start": "2815720",
    "end": "2822599"
  },
  {
    "text": "like the ones I just talked about even on the unreleased uh Mac OS 15 now I briefly want to end by talk",
    "start": "2822599",
    "end": "2829040"
  },
  {
    "text": "about crash report monitoring because at this point you're probably like yeah crash reports are cool how do I for",
    "start": "2829040",
    "end": "2834079"
  },
  {
    "text": "example maybe monitor for them in my Enterprise so that I can collect and analyze these well it turns out it's",
    "start": "2834079",
    "end": "2839839"
  },
  {
    "text": "pretty easy the idea is just monitor the crash report directories and then when new crash reports show up grab those and",
    "start": "2839839",
    "end": "2847720"
  },
  {
    "text": "perform some analysis so we can do this with endpoint security not going to really walk through all this code it's",
    "start": "2847720",
    "end": "2853800"
  },
  {
    "text": "more for reference but the idea is what we can do is we can tell the operating system to watch a specific directory and",
    "start": "2853800",
    "end": "2860559"
  },
  {
    "text": "then when files show up in there we will get a callback we use as I mentioned endpoint security and a technique known",
    "start": "2860559",
    "end": "2866800"
  },
  {
    "text": "as mute inversion you can tell endpoint security to mute specific events but if",
    "start": "2866800",
    "end": "2872119"
  },
  {
    "text": "you invert that the logic is flipped which tells you hey only give me very spefic specific events for example file",
    "start": "2872119",
    "end": "2878839"
  },
  {
    "text": "Creations in the crash report directory now I do want to point out",
    "start": "2878839",
    "end": "2883960"
  },
  {
    "text": "that say you start collecting crash reports majority of them are probably going to be uninteresting I definitely",
    "start": "2883960",
    "end": "2889680"
  },
  {
    "text": "picked what I thought were the most interesting ones today but the reality is a lot of applications crash and",
    "start": "2889680",
    "end": "2895599"
  },
  {
    "text": "that's maybe annoying but they're not going to have security impl implications it's not going to be malware etc etc so",
    "start": "2895599",
    "end": "2902000"
  },
  {
    "text": "here's example from xcode it crashed when I was like clicking a menu like the fact that xcode crashes annoying but",
    "start": "2902000",
    "end": "2909960"
  },
  {
    "text": "like no one's exploiting xcode right it's an IDE also it requires user",
    "start": "2909960",
    "end": "2915240"
  },
  {
    "text": "interaction so like it's not going to be like really exploitable per se so what I",
    "start": "2915240",
    "end": "2920720"
  },
  {
    "text": "always do is when I get a crash report I ask the question is this a process of interest if it's keychain access app",
    "start": "2920720",
    "end": "2926640"
  },
  {
    "text": "yeah that has a lot of access rights is it a Damon that's running with root privileges that might take down other",
    "start": "2926640",
    "end": "2932119"
  },
  {
    "text": "security tools yeah that's super interesting but if it's like xcode or calculator I'm like ah I don't care if",
    "start": "2932119",
    "end": "2938480"
  },
  {
    "text": "the crash is due to an assertion that's probably not interesting because that's not really exploitable unless that's in",
    "start": "2938480",
    "end": "2944319"
  },
  {
    "text": "something like a system Damon we talked about how being able to take that down allows malware for example to prevent",
    "start": "2944319",
    "end": "2950480"
  },
  {
    "text": "other tools from loading and then finally if the crash is on the main UI thread generally that's not interesting",
    "start": "2950480",
    "end": "2957280"
  },
  {
    "text": "Apple's UI Frameworks are notoriously buggy and they crash but again that like requires user interaction it's going to",
    "start": "2957280",
    "end": "2963680"
  },
  {
    "text": "be some crash and some rendering thing that like an attacker couldn't really take into account",
    "start": "2963680",
    "end": "2969720"
  },
  {
    "text": "anyways all right so some conclusions and takeaways wrapping this up so hopefully",
    "start": "2969720",
    "end": "2976640"
  },
  {
    "text": "I've shown you that crash reports are your best friends they can allow you to find bugs that you can fix or exploit if",
    "start": "2976640",
    "end": "2985559"
  },
  {
    "text": "that's your thing no judgment uh it also gives you the ability to uncover malware",
    "start": "2985559",
    "end": "2990720"
  },
  {
    "text": "failed exploits and much much more so we're going to end with another raise of your hands to see who here now loves",
    "start": "2990720",
    "end": "2998559"
  },
  {
    "text": "crash reports everybody more people see love is still alive so that's awesome",
    "start": "2998559",
    "end": "3005160"
  },
  {
    "text": "that makes me very happy and speaking of love I want to end by thanking the companies that support The Objective C",
    "start": "3005160",
    "end": "3010640"
  },
  {
    "text": "Foundation these are the companies that allow us to host the amazing objective by the C security conference support the",
    "start": "3010640",
    "end": "3016799"
  },
  {
    "text": "free open- source security tools that are well tested even though sometimes they crash Mac OS um and also the",
    "start": "3016799",
    "end": "3023319"
  },
  {
    "text": "student scholarships and everything else we do so so round of applause for them but also for all of you for attending my",
    "start": "3023319",
    "end": "3030000"
  },
  {
    "text": "talk today thank you so much I really appreciate it",
    "start": "3030000",
    "end": "3035240"
  }
]