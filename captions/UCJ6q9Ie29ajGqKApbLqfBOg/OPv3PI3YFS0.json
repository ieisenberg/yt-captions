[
  {
    "text": "[Music] foreign",
    "start": "1740",
    "end": "6720"
  },
  {
    "text": "Cruz and my name is Eric Kraft we're from guards University of Technology and",
    "start": "8840",
    "end": "13980"
  },
  {
    "text": "the talk was originally submitted also by Martin schwarzer who cannot be here because of another appointment and I",
    "start": "13980",
    "end": "22380"
  },
  {
    "text": "thought because I mean you are still a student Martin a student and I'm a professor I thought I should wear a",
    "start": "22380",
    "end": "28140"
  },
  {
    "text": "jacket now so that I look a bit more professional the last time I spoke at",
    "start": "28140",
    "end": "33420"
  },
  {
    "text": "blackhead actually I was a blackhead Keynotes because not not this year but at blackhead Asia I think it was in 2020",
    "start": "33420",
    "end": "40219"
  },
  {
    "text": "so I I think that's already a nice thing to be here also in person",
    "start": "40219",
    "end": "47219"
  },
  {
    "text": "because that was virtual so I'm really happy to be here so today we are going to talk about",
    "start": "47219",
    "end": "56420"
  },
  {
    "text": "I don't see the slides yet but it shows a video stream of us",
    "start": "57000",
    "end": "62000"
  },
  {
    "text": "I have to Recon check the laptop",
    "start": "62879",
    "end": "68960"
  },
  {
    "text": "let's check the laptop something is not there on the laptop but this can happen",
    "start": "69119",
    "end": "75439"
  },
  {
    "text": "that's better almost almost perfect right yeah nice",
    "start": "79560",
    "end": "85860"
  },
  {
    "text": "okay so we are going to talk about remote memory deduplication attacks and remote memory data application attacks",
    "start": "85860",
    "end": "92939"
  },
  {
    "text": "um memory data application has been a topic for a long time already and",
    "start": "92939",
    "end": "98340"
  },
  {
    "text": "and I know what this bug is yeah I had this um let me just",
    "start": "98340",
    "end": "105740"
  },
  {
    "text": "yes now it's back now it should stay okay um so remote memory deduplication",
    "start": "112500",
    "end": "118380"
  },
  {
    "text": "attacks um they have been um yeah that's actually the remote part is the new part married application",
    "start": "118380",
    "end": "123600"
  },
  {
    "text": "attacks have been around for a long time um and in this talk we will focus on the",
    "start": "123600",
    "end": "129360"
  },
  {
    "text": "remote scenario why do we do that because more and more services are hosted in the cloud or on",
    "start": "129360",
    "end": "136500"
  },
  {
    "text": "remote systems that we use all the time and they store our secrets yes exactly",
    "start": "136500",
    "end": "141660"
  },
  {
    "text": "so what the providers try to do is they try to isolate the secrets using virtualization or similar techniques but",
    "start": "141660",
    "end": "148739"
  },
  {
    "text": "still they share the underlying Hardware to improve utilization so and because of that because of the",
    "start": "148739",
    "end": "154620"
  },
  {
    "text": "shared hardware there are yeah multiple side channels that you can exploit both in hard and software so for example in",
    "start": "154620",
    "end": "160980"
  },
  {
    "text": "Hardware you could have a cache attack like Prime and probe or in software like we present today memory related application attacks",
    "start": "160980",
    "end": "167700"
  },
  {
    "text": "and another thing is that the network throughput is increasing and increasing and the latencies get more stable so",
    "start": "167700",
    "end": "173700"
  },
  {
    "text": "that makes a remote attack more easier to achieve yeah that's actually a big problem now because previously we had",
    "start": "173700",
    "end": "180780"
  },
  {
    "text": "these attacks maybe on the same machine where you had the attacker and the victim on the same machine but in",
    "start": "180780",
    "end": "185879"
  },
  {
    "text": "different containers or virtual machines yes or Yeah official attacks running in",
    "start": "185879",
    "end": "192060"
  },
  {
    "text": "a pro setup in JavaScript exactly yeah or what we look at now on the network so",
    "start": "192060",
    "end": "198239"
  },
  {
    "text": "we want to attack a system where we don't run a single line of code",
    "start": "198239",
    "end": "203700"
  },
  {
    "text": "the other system is not under our control we just send Network requests there and we still want to leak all the",
    "start": "203700",
    "end": "209519"
  },
  {
    "text": "secrets do you think that's possible oh it sounds it sounds really strange and nobody unrated yet so yeah yeah but",
    "start": "209519",
    "end": "216000"
  },
  {
    "text": "probably it worked we got a cve so let's continue um memory did application",
    "start": "216000",
    "end": "221459"
  },
  {
    "text": "um why do we why do we want to talk about this um memory deed application was disabled",
    "start": "221459",
    "end": "227640"
  },
  {
    "text": "after the first wave of memory deduplication attacks Linux disabled it Windows disabled it and then later on",
    "start": "227640",
    "end": "233819"
  },
  {
    "text": "they realized oh but we could re-enable it if we add some security around it",
    "start": "233819",
    "end": "240360"
  },
  {
    "text": "and today it is also used still in Virtual machines we have also talked with providers there and the current",
    "start": "240360",
    "end": "247920"
  },
  {
    "text": "mitigation there what is the current mitigation current mitigation just prevents it between security domains but",
    "start": "247920",
    "end": "254700"
  },
  {
    "text": "not inside the security domain so they don't consider a local attacker in the in their thread a remote remote deck in",
    "start": "254700",
    "end": "260519"
  },
  {
    "text": "the thread model exactly so the data application still works within the same security domain right because you say oh",
    "start": "260519",
    "end": "267300"
  },
  {
    "text": "they the pages belong to the same security domain shouldn't hurt to de-duplicate them but can we maybe",
    "start": "267300",
    "end": "273780"
  },
  {
    "text": "exploit that across the internet and that's the big question of this talk but",
    "start": "273780",
    "end": "279180"
  },
  {
    "text": "before let's take a step back and talk about how memory did application works so we see here setup we see on the left",
    "start": "279180",
    "end": "285479"
  },
  {
    "text": "side there is the attacker process the virtual address space of the attacker process on the right side there's the",
    "start": "285479",
    "end": "290699"
  },
  {
    "text": "virtual address space of the victim process and Below you see the shared physical address space and you see some",
    "start": "290699",
    "end": "296639"
  },
  {
    "text": "pages that are color coded and the colors stand for the contents of the pages so the pages with the same color",
    "start": "296639",
    "end": "301860"
  },
  {
    "text": "have the same content and what can now happen is you see you see of course every virtual page is",
    "start": "301860",
    "end": "308160"
  },
  {
    "text": "mapped to a physical page and that's um yeah Illustrated with the stashed line and what now can happen is that the",
    "start": "308160",
    "end": "315000"
  },
  {
    "text": "Decker creates a page with the same content like here now he has also created the",
    "start": "315000",
    "end": "320940"
  },
  {
    "text": "page with the blue content let's say and then on a operating system with memory data application from time to time a",
    "start": "320940",
    "end": "328139"
  },
  {
    "text": "kernel thread will start scanning the physical address space so for example he compares the first page to the other",
    "start": "328139",
    "end": "334919"
  },
  {
    "text": "pages and as long as they don't match nothing will happen and he will just continue scanning but if he comes to a",
    "start": "334919",
    "end": "340740"
  },
  {
    "text": "page where the content matches he will match these two pages by um modifying",
    "start": "340740",
    "end": "345780"
  },
  {
    "text": "the mapping so they point to one of them and set them to copy on right so they are this page is then read only and has",
    "start": "345780",
    "end": "352860"
  },
  {
    "text": "the and has the same physical physical address like shown here yeah and this",
    "start": "352860",
    "end": "358440"
  },
  {
    "text": "also gives us a perfect Oracle to tell whether the victim has a page with",
    "start": "358440",
    "end": "364080"
  },
  {
    "text": "exactly that content somewhere in memory so what can we do there we can now you",
    "start": "364080",
    "end": "370320"
  },
  {
    "text": "set a copy on right semantics that we have here we can exploit those we can time how long it takes to write to this",
    "start": "370320",
    "end": "377520"
  },
  {
    "text": "page exactly and then we learn well the operating system has to copy this back",
    "start": "377520",
    "end": "382979"
  },
  {
    "text": "and then we learn oh this was a slow ride access this page was deduplicated",
    "start": "382979",
    "end": "388020"
  },
  {
    "text": "so what we do here is we measure all the time this Delta between end and start",
    "start": "388020",
    "end": "393479"
  },
  {
    "text": "for the right access and this tells us whether the page was copy on right or not but maybe we should",
    "start": "393479",
    "end": "401039"
  },
  {
    "text": "have a look at the timings here how how far are they really apart yes so let's",
    "start": "401039",
    "end": "406080"
  },
  {
    "text": "first look at the local timings because we don't want to start with the network yet so what we see here locally you see",
    "start": "406080",
    "end": "412800"
  },
  {
    "text": "the blue the blue and pages are not copy and write marked and the red ones are copy and write exists and you see it's",
    "start": "412800",
    "end": "419699"
  },
  {
    "text": "easily distinguishable locally so there is a microsecond between those two a gap where there's really nothing in between",
    "start": "419699",
    "end": "425759"
  },
  {
    "text": "so that's very easy to do so you really see this this small bar down there that's the the non-copy and write case",
    "start": "425759",
    "end": "432720"
  },
  {
    "text": "it's a small blue blue yeah so this is very very easy to distinguish I think I can give that to a first semester yeah",
    "start": "432720",
    "end": "439380"
  },
  {
    "text": "everybody can do that yeah so how does our attack then work across",
    "start": "439380",
    "end": "444660"
  },
  {
    "text": "the network because we we can't create pages in the victim domain can we yeah",
    "start": "444660",
    "end": "450840"
  },
  {
    "text": "you can if the victim domain runs the server a server application that allows you to do such things so in our setup we",
    "start": "450840",
    "end": "457680"
  },
  {
    "text": "have the attacker now separated by a network from the victim so he has no chance to execute any code locally he",
    "start": "457680",
    "end": "463380"
  },
  {
    "text": "can just use the apis that are offered to the outside and what you see in the top this is the physical memory of the",
    "start": "463380",
    "end": "470400"
  },
  {
    "text": "victim and there is a two pages and let's say the attacker wants to know if page a is in memory for example he wants",
    "start": "470400",
    "end": "477120"
  },
  {
    "text": "to fingerprint the library and then takes a and this is a unique page of this library and he wants to use",
    "start": "477120",
    "end": "483419"
  },
  {
    "text": "exploited to know if this library is in the memory so what the decadent needs to do and",
    "start": "483419",
    "end": "488819"
  },
  {
    "text": "what the victim needs to offer is firstly the deck has to be able to send the data the page to the victim and the",
    "start": "488819",
    "end": "495780"
  },
  {
    "text": "victim has to store it page aligned in in the memory and also keep it there",
    "start": "495780",
    "end": "501120"
  },
  {
    "text": "the second second thing is that the then after some time the data",
    "start": "501120",
    "end": "508199"
  },
  {
    "text": "application will run and the two pages are merged and marked copy on right yeah so in this case then A and B would be",
    "start": "508199",
    "end": "514200"
  },
  {
    "text": "deduplicated within the same security domain right yes exactly so why is that a security problem now",
    "start": "514200",
    "end": "522240"
  },
  {
    "text": "yeah it's if if the attacker is also able to basically overwrite the same",
    "start": "522240",
    "end": "527279"
  },
  {
    "text": "page then he will see a timing difference you mean in place in place with an update operation exactly ah but",
    "start": "527279",
    "end": "534660"
  },
  {
    "text": "there might be an update operation yeah sure many web apis offer such things so",
    "start": "534660",
    "end": "539760"
  },
  {
    "text": "that's really bad so that means that the victim will now write to page B again",
    "start": "539760",
    "end": "546480"
  },
  {
    "text": "will update it and this triggers copy on right and this can be measured by the attacker",
    "start": "546480",
    "end": "552779"
  },
  {
    "text": "yes yeah but sure you have the network noise but you just do it more often than anything yeah yeah but but this will not",
    "start": "552779",
    "end": "559200"
  },
  {
    "text": "work over the Internet over a realistic setup over the Internet this cannot work this is like the difference in Nanos",
    "start": "559200",
    "end": "565019"
  },
  {
    "text": "we're the nanoseconds yeah cannot work yeah we will see so did you try that out yes we'd write",
    "start": "565019",
    "end": "571680"
  },
  {
    "text": "it out yeah oh and don't you remember",
    "start": "571680",
    "end": "576320"
  },
  {
    "text": "yeah so yes we tried it out on the on a remote server over 14 hops over the",
    "start": "576860",
    "end": "581940"
  },
  {
    "text": "Internet um yeah so we have a very high latency there um and we detect a KVM setup uh on a",
    "start": "581940",
    "end": "588959"
  },
  {
    "text": "Ubuntu or Ubuntu virtual machine and KVM um and there we had a service running",
    "start": "588959",
    "end": "594120"
  },
  {
    "text": "just off the shelf engine engine x with PHP with memcache d and with myosql",
    "start": "594120",
    "end": "599339"
  },
  {
    "text": "installed um and then we also used uh Pi shark to capture the web request exactly yeah",
    "start": "599339",
    "end": "607700"
  },
  {
    "text": "but still the 14 hops across the internet this will have latency variation in the range of milliseconds",
    "start": "607700",
    "end": "613980"
  },
  {
    "text": "how can that possibly work yeah and that's one of the problems so you would need many many requests to to",
    "start": "613980",
    "end": "620519"
  },
  {
    "text": "be able to distinguish it with this setup so one thing you need to do is you have to amplify this you have to make",
    "start": "620519",
    "end": "626640"
  },
  {
    "text": "multiple how excesses during one remote request to see the difference more easily so that the time becomes less and",
    "start": "626640",
    "end": "634200"
  },
  {
    "text": "it's more realistic setup so what we do we use amplification across the internet and like I said you basically just",
    "start": "634200",
    "end": "640620"
  },
  {
    "text": "increase the amount of pages you override that are marked with copy and right for fingerprinting libraries this",
    "start": "640620",
    "end": "646680"
  },
  {
    "text": "is easy to do you just take multiple unique pages from the Library store it in the in the server and then overwrite",
    "start": "646680",
    "end": "652560"
  },
  {
    "text": "them at once with one request so and for a cover Channel you can also",
    "start": "652560",
    "end": "659100"
  },
  {
    "text": "just you can just amplify it by storing more and you can also transmit multiple bytes in parallel by just storing more",
    "start": "659100",
    "end": "666540"
  },
  {
    "text": "and we did we did the request of async IO because it's faster than doing sequential requests and then we reach",
    "start": "666540",
    "end": "673680"
  },
  {
    "text": "the cover Channel which has around 35 bytes per hour well actually 34 bytes per hour",
    "start": "673680",
    "end": "681300"
  },
  {
    "text": "how fast is that in comparison to other channels so not very fast right now if you look",
    "start": "681300",
    "end": "688019"
  },
  {
    "text": "at remote channels it's it's not bad okay so take a look at remote channels",
    "start": "688019",
    "end": "693120"
  },
  {
    "text": "then so here we have some of the covert channels that we had so far with PhD",
    "start": "693120",
    "end": "699240"
  },
  {
    "text": "duplication and if we take a look there then you see that some of them were already remote but usually that meant",
    "start": "699240",
    "end": "706260"
  },
  {
    "text": "that they were running in a remote controlled environment like a browser or a cross VM or again the browser and that",
    "start": "706260",
    "end": "715500"
  },
  {
    "text": "means there was still code running locally on that machine so that's different in our attack where",
    "start": "715500",
    "end": "722519"
  },
  {
    "text": "we don't run a single line of attacker-controlled code on that machine so we have no local execution of",
    "start": "722519",
    "end": "728160"
  },
  {
    "text": "whatever type and we still are able to leak quite a lot of data over an hour",
    "start": "728160",
    "end": "736920"
  },
  {
    "text": "yeah so maybe um yeah maybe let's also mention here we can mount different attacks here it says",
    "start": "736920",
    "end": "742560"
  },
  {
    "text": "bytewise leakage case allow brick and fingerprinting maybe we can go through these attacks also but before we do that",
    "start": "742560",
    "end": "749760"
  },
  {
    "text": "we should pinpoint what are the challenges to mount these attacks",
    "start": "749760",
    "end": "755160"
  },
  {
    "text": "the challenge the first challenge is to amplify the latency yes Eric just",
    "start": "755160",
    "end": "760440"
  },
  {
    "text": "explained um and the Second Challenge we also mentioned already we need to trigger and",
    "start": "760440",
    "end": "766380"
  },
  {
    "text": "observe those copy on right page Folds while not sharing any memory with the",
    "start": "766380",
    "end": "771420"
  },
  {
    "text": "attacker domain yes exactly and the last the last challenge that is not really necessary",
    "start": "771420",
    "end": "777000"
  },
  {
    "text": "for fingerprinting or cover channel for example is to find remote Buffs that not only allow you to store the state in a",
    "start": "777000",
    "end": "783180"
  },
  {
    "text": "page length way so but also to change the alignment of the of the data you want to leak and this gives you then",
    "start": "783180",
    "end": "789420"
  },
  {
    "text": "more powerful attacks like bitewise leakage of data from from a database so can we take a look at the first",
    "start": "789420",
    "end": "795899"
  },
  {
    "text": "challenge maybe do you have any data for that how well that works yes we collected a plot which shows basically",
    "start": "795899",
    "end": "802980"
  },
  {
    "text": "if you increase the number of deduplicated pages the time increases linearly with that",
    "start": "802980",
    "end": "808440"
  },
  {
    "text": "so that's very nice so you can just increase the number of data of pages that are deduplicated and then you get a",
    "start": "808440",
    "end": "815279"
  },
  {
    "text": "nice simplifications out of there and this scales linearly so you can basically scale it to any number of",
    "start": "815279",
    "end": "821160"
  },
  {
    "text": "microseconds or even milliseconds that you need yes for your measurement okay so that sounds bad but there are two",
    "start": "821160",
    "end": "828120"
  },
  {
    "text": "more challenges maybe we figure out we can't solve them and then we're good right so um let's let's try the Second",
    "start": "828120",
    "end": "835500"
  },
  {
    "text": "Challenge so how do you trigger those copy and write page faults without shared memory so there are multiple",
    "start": "835500",
    "end": "841560"
  },
  {
    "text": "possibilities some websites of a file upload and files are buffered in the page cache which is part of the physical",
    "start": "841560",
    "end": "847680"
  },
  {
    "text": "memory and if there is also an overwrite operation offered then you can already use this as a as a possible solution",
    "start": "847680",
    "end": "856019"
  },
  {
    "text": "and we tried this with for instance with memcache yes data will be cached in Ram",
    "start": "856019",
    "end": "862019"
  },
  {
    "text": "so it's not written back to disk and the attacker can update or overwrite the",
    "start": "862019",
    "end": "868620"
  },
  {
    "text": "uploaded data and with that trigger those page Folds well again the question how well does",
    "start": "868620",
    "end": "874500"
  },
  {
    "text": "that work exactly if you combine that with the amplification we have another plot for that",
    "start": "874500",
    "end": "880920"
  },
  {
    "text": "and here you can see how the accuracy goes up with the number of requests that",
    "start": "880920",
    "end": "886560"
  },
  {
    "text": "you make and also for different amplification factors yes and there are some very sweet spots so you don't want",
    "start": "886560",
    "end": "892680"
  },
  {
    "text": "to send too much requests and you don't want it to have too much amplification because it also makes you",
    "start": "892680",
    "end": "898920"
  },
  {
    "text": "have to send more data but there is a spot where you have a sensible amplifications like 8 or 16 and the",
    "start": "898920",
    "end": "905519"
  },
  {
    "text": "still low number of requests and with a high accuracy but here you see it still",
    "start": "905519",
    "end": "911399"
  },
  {
    "text": "says local network I haven't still haven't seen a network internet based attack here so maybe this will follow",
    "start": "911399",
    "end": "918420"
  },
  {
    "text": "later let's also talk about the fingerprinting case we can fingerprint a",
    "start": "918420",
    "end": "923699"
  },
  {
    "text": "system now by uploading memory so if we do that for instance upload a",
    "start": "923699",
    "end": "930480"
  },
  {
    "text": "page that also appears in some specific binary version then of course our Oracle",
    "start": "930480",
    "end": "935940"
  },
  {
    "text": "tells us whether the server is running that specific binary version maybe that could also be useful",
    "start": "935940",
    "end": "942360"
  },
  {
    "text": "information and there again we use memcache D to store and replace the data and then we can think about that there's",
    "start": "942360",
    "end": "949800"
  },
  {
    "text": "one more challenge with memcachd so it stores the the items are stored in blocks of one megabyte and you don't",
    "start": "949800",
    "end": "956459"
  },
  {
    "text": "really know which alignment the items use the attacker stores has in there but you can pre-compute it and then",
    "start": "956459",
    "end": "961800"
  },
  {
    "text": "basically just store the uh these the attacker Control Data with all possible",
    "start": "961800",
    "end": "966920"
  },
  {
    "text": "alignments and then you you have always wanted get C duplicated",
    "start": "966920",
    "end": "972839"
  },
  {
    "text": "yeah um so um also a problem here might be this",
    "start": "972839",
    "end": "978600"
  },
  {
    "text": "free list yes so you cannot really directly overwrite",
    "start": "978600",
    "end": "984360"
  },
  {
    "text": "data but you have to if you overwrite it send another request and it comes on your free list and then you have to send",
    "start": "984360",
    "end": "990000"
  },
  {
    "text": "another request that then finally overwrites it yeah so basically somebody could interfere with this so it's sort",
    "start": "990000",
    "end": "996000"
  },
  {
    "text": "of a race condition yeah exactly but it's do a bit so let's take a look at how well this works the fingerprinting",
    "start": "996000",
    "end": "1001519"
  },
  {
    "text": "over local I guess it's over local area network again yeah first of course okay so here you can see it",
    "start": "1001519",
    "end": "1008600"
  },
  {
    "text": "um and you see that a timing histogram here for the non-copy on write case so where the attacker didn't guess",
    "start": "1008600",
    "end": "1015500"
  },
  {
    "text": "correctly and the number of requests that you that you have on the y-axis and here the copy",
    "start": "1015500",
    "end": "1023000"
  },
  {
    "text": "on right case yes so this is the case where the attacker found a page that exists like",
    "start": "1023000",
    "end": "1029959"
  },
  {
    "text": "this on the system so we can clearly distinguish those two cases based on the histograms but what about the internet",
    "start": "1029959",
    "end": "1037040"
  },
  {
    "text": "yeah let's take a look at it so as before we have the non-copy and write case",
    "start": "1037040",
    "end": "1042260"
  },
  {
    "text": "and you need more requests here yeah that's the first thing you you see you",
    "start": "1042260",
    "end": "1047298"
  },
  {
    "text": "already need more requests and also the timing is larger of course but then let's look also at the Cow case",
    "start": "1047299",
    "end": "1054679"
  },
  {
    "text": "and yeah I mean still you can distinguish it it's not so nice but still possible it has more noise but",
    "start": "1054679",
    "end": "1061220"
  },
  {
    "text": "it's still possible yeah okay but that's only fingerprinting that's not a real good attack yet can you do something",
    "start": "1061220",
    "end": "1066980"
  },
  {
    "text": "like Breaking kslr remotely without running a single line of code on that system yes okay and let's do that so we",
    "start": "1066980",
    "end": "1075080"
  },
  {
    "text": "want to break case that are in remote VMS and what is the idea there so the",
    "start": "1075080",
    "end": "1080299"
  },
  {
    "text": "idea is you search pages in the in the kernel text that are static except some",
    "start": "1080299",
    "end": "1085820"
  },
  {
    "text": "point to the context itself and then you basically only have to try all 512",
    "start": "1085820",
    "end": "1091400"
  },
  {
    "text": "different possibilities the kernel decks can get from the from the aslr and so that's a page that contains",
    "start": "1091400",
    "end": "1098539"
  },
  {
    "text": "basically all predictable data and just these yeah yeah okay yeah so you have only two",
    "start": "1098539",
    "end": "1105080"
  },
  {
    "text": "guess the pointer different pointer possibility possibilities and yeah then you have it but I can parallel that",
    "start": "1105080",
    "end": "1111320"
  },
  {
    "text": "rather than parallel exactly you can just upload your 512 cases then overwrite them and see who which one has",
    "start": "1111320",
    "end": "1118460"
  },
  {
    "text": "the largest time you may have to repeat this a few times because of the noises we saw but then you have this okay so",
    "start": "1118460",
    "end": "1124340"
  },
  {
    "text": "this attack will be very slow it will take ages then I guess so the attacker uploads some data triggers the page",
    "start": "1124340",
    "end": "1130760"
  },
  {
    "text": "faults and that's it so so how well does it work works very well I would say but",
    "start": "1130760",
    "end": "1137720"
  },
  {
    "text": "let's see let's look at at the picture so I guess everybody can see which is the right kernel offset here it's not",
    "start": "1137720",
    "end": "1144799"
  },
  {
    "text": "too complicated yeah so the one at the on the left where the timing is high yeah where we clearly got a copy on",
    "start": "1144799",
    "end": "1150740"
  },
  {
    "text": "right uh fault um yeah and overall there's a time this this attack also is very very fast if",
    "start": "1150740",
    "end": "1157940"
  },
  {
    "text": "you uh seconds minutes minutes low four minutes so it's yeah really nice so this",
    "start": "1157940",
    "end": "1163520"
  },
  {
    "text": "is really nice um but then we have a third Challenge and this one is tricky to really leak",
    "start": "1163520",
    "end": "1169700"
  },
  {
    "text": "data bite by bite and there we focused on a setup with",
    "start": "1169700",
    "end": "1175039"
  },
  {
    "text": "nodp um a database management system for instance used in MySQL mariadp",
    "start": "1175039",
    "end": "1182000"
  },
  {
    "text": "um so what do we exploit there in nodp so innov has an optimization it's called",
    "start": "1182000",
    "end": "1188000"
  },
  {
    "text": "reorganization it is used if the free space is too fragmented into index page",
    "start": "1188000",
    "end": "1194179"
  },
  {
    "text": "that a new record would fit in there and then it basically rebuilds this page by inserting all all records again in The",
    "start": "1194179",
    "end": "1201140"
  },
  {
    "text": "Logical order and then inserting the updated record and then the deck can exploit this optimization to basically",
    "start": "1201140",
    "end": "1207799"
  },
  {
    "text": "control the alignment of a secret record and yeah foreign",
    "start": "1207799",
    "end": "1216220"
  },
  {
    "text": "method because we didn't with innodb did not work because of some inner inner",
    "start": "1218740",
    "end": "1224960"
  },
  {
    "text": "problems in OTP with the storing yeah but it's still fine yeah it's still fine I mean you can use anything for leaking",
    "start": "1224960",
    "end": "1230780"
  },
  {
    "text": "that you want yes yeah so in ODB maybe we go a bit more into the",
    "start": "1230780",
    "end": "1236960"
  },
  {
    "text": "technical technical details there so that we talk a bit about the innodb",
    "start": "1236960",
    "end": "1243020"
  },
  {
    "text": "records that we exploit them so what do they look like so they have some headers some footer what is the",
    "start": "1243020",
    "end": "1249140"
  },
  {
    "text": "interesting part of this innodb record so the thing is you know the V stores record in this index features which are",
    "start": "1249140",
    "end": "1254419"
  },
  {
    "text": "610 kilobytes 16 kilobytes large and as you said there's some head and some footer but we don't care about that in between there are the actual records and",
    "start": "1254419",
    "end": "1261679"
  },
  {
    "text": "what we see here we have one record Rd that's the the record the attacker wants to leak and before we have to attack a",
    "start": "1261679",
    "end": "1268520"
  },
  {
    "text": "control records so the attacker has to before insert these two records but it does not really matter if there's a gap between them and the secret record this",
    "start": "1268520",
    "end": "1275720"
  },
  {
    "text": "just have to be before there and what also what you also see at the end is the trailing free space so always",
    "start": "1275720",
    "end": "1281480"
  },
  {
    "text": "when you update and record I want to insert a new record then into the B tries to insert it into the three space",
    "start": "1281480",
    "end": "1287539"
  },
  {
    "text": "except it is it is smaller than before then it does it in place but in every other case it tries to insert it there",
    "start": "1287539",
    "end": "1294500"
  },
  {
    "text": "okay so that means you can somehow place the victim data right next to your data",
    "start": "1294500",
    "end": "1300260"
  },
  {
    "text": "or even in between yes and that's also what the attack does then so we place this data in between",
    "start": "1300260",
    "end": "1308780"
  },
  {
    "text": "yeah yeah exactly but I mean by updating the records the Decker can can get this reorganization running and",
    "start": "1308780",
    "end": "1316940"
  },
  {
    "text": "then it what happens is that it reorganizes the page and then you have your alignment record before the target",
    "start": "1316940",
    "end": "1322400"
  },
  {
    "text": "somewhere and by changing the the size of this alignment record you can move move",
    "start": "1322400",
    "end": "1327919"
  },
  {
    "text": "around move it around and change its alignment yeah that's right um so we maybe we go a step further I",
    "start": "1327919",
    "end": "1336080"
  },
  {
    "text": "mean at the end then we have this reset State and then we can repeat the attack after that but let's go one step further",
    "start": "1336080",
    "end": "1342679"
  },
  {
    "text": "and uh think about the the bigger picture of how this attack on these innodb records then works so in this",
    "start": "1342679",
    "end": "1351500"
  },
  {
    "text": "setup we have an innodb page that we want to leak where we have a set of",
    "start": "1351500",
    "end": "1356659"
  },
  {
    "text": "known data and at the end you see this Illustrated with the S that's the first",
    "start": "1356659",
    "end": "1362539"
  },
  {
    "text": "byte of the secret and now what we do with memcache d",
    "start": "1362539",
    "end": "1367760"
  },
  {
    "text": "we send a lot of requests to memcache D and create the 256 possible solutions",
    "start": "1367760",
    "end": "1375740"
  },
  {
    "text": "for this original 256 possible characters that could be the secret exactly",
    "start": "1375740",
    "end": "1382460"
  },
  {
    "text": "so on the flow of the deck is then first use this reorganization trick to shift the secret byte into the into the innodb",
    "start": "1382460",
    "end": "1389600"
  },
  {
    "text": "page so you have only the known data and this secret byte and you store the gases",
    "start": "1389600",
    "end": "1395299"
  },
  {
    "text": "like done inside in maincash the 256 and then you basically just wait for the",
    "start": "1395299",
    "end": "1402140"
  },
  {
    "text": "application so the operating system will then run the kernel thread then after some point it will be done and what you",
    "start": "1402140",
    "end": "1408740"
  },
  {
    "text": "then see is that exactly the byte with the correct secret case will be duplicated while the others are not",
    "start": "1408740",
    "end": "1414620"
  },
  {
    "text": "deduplicated yeah exactly but then doing that a single time is not enough right no it's not enough so and also we want",
    "start": "1414620",
    "end": "1422600"
  },
  {
    "text": "to leak more than just one byte yes so what do we do I mean now we learned the",
    "start": "1422600",
    "end": "1427820"
  },
  {
    "text": "secret byte yeah so we have more known data exactly and what you then can do is",
    "start": "1427820",
    "end": "1433520"
  },
  {
    "text": "just again do this to this reorganization to shift the next Python and then you continue and continue until",
    "start": "1433520",
    "end": "1440659"
  },
  {
    "text": "you have your whole secret leaked and that means you can read all the memory contents there buy it buy buy it yes",
    "start": "1440659",
    "end": "1446780"
  },
  {
    "text": "without running a single line of attacker control code on that system it just uses the offered apis that's that's",
    "start": "1446780",
    "end": "1453740"
  },
  {
    "text": "pretty bad yeah we should do something against that but maybe let's further talk about the attack before we talk",
    "start": "1453740",
    "end": "1459020"
  },
  {
    "text": "about possible mitigations yeah so one thing we did not have yet seen is we",
    "start": "1459020",
    "end": "1464299"
  },
  {
    "text": "didn't have an amplification though we just had this one index page and it's like I said before you would need many",
    "start": "1464299",
    "end": "1470360"
  },
  {
    "text": "many many requests to then can distinguish it and that's not very interesting because the deck gets very very slow so we also use another trick",
    "start": "1470360",
    "end": "1477740"
  },
  {
    "text": "to still have this this amplification and so what it looks like if you change",
    "start": "1477740",
    "end": "1483740"
  },
  {
    "text": "the alignment you the the bytes you use for the alignment you can change for example here it's a",
    "start": "1483740",
    "end": "1489080"
  },
  {
    "text": "and in memcache like before like it was before you would have then this a",
    "start": "1489080",
    "end": "1494179"
  },
  {
    "text": "alignment byte and all the attacker guesses yeah and they would then be reduplicating the right uh prediction",
    "start": "1494179",
    "end": "1500720"
  },
  {
    "text": "exactly like if you like you showed before that is basically the same case but how do you amplify it then if I",
    "start": "1500720",
    "end": "1506179"
  },
  {
    "text": "create further pages with the same content they will all be duplicated with the same page yes",
    "start": "1506179",
    "end": "1511760"
  },
  {
    "text": "and there's one trick you can use so you basically change this alignment byte",
    "start": "1511760",
    "end": "1517600"
  },
  {
    "text": "okay that's waiting for the application if we saw this already before so let's",
    "start": "1517600",
    "end": "1522799"
  },
  {
    "text": "skip that but you can for example change the amplification byte now we have a b here any memcache you basically store as",
    "start": "1522799",
    "end": "1530480"
  },
  {
    "text": "many different alignment bytes as you want to have amplification ah so that means now when you start the attack now",
    "start": "1530480",
    "end": "1537140"
  },
  {
    "text": "the correct page from the first row would still be deduplicated but you",
    "start": "1537140",
    "end": "1542600"
  },
  {
    "text": "change the inner DB page now so this gets the copy and write fault but you're not interested in that one in the timing",
    "start": "1542600",
    "end": "1548779"
  },
  {
    "text": "yeah I mean I don't care about what is needed to be but now you have a second page with the bees you can create",
    "start": "1548779",
    "end": "1554539"
  },
  {
    "text": "further memcache D page exactly and again the one with the right secret guessability duplicate it and that's how",
    "start": "1554539",
    "end": "1560840"
  },
  {
    "text": "you then again get some deep application uh amplification as before very nice and then you do this with an amplification",
    "start": "1560840",
    "end": "1567140"
  },
  {
    "text": "factor of I don't know here in this example 26 and you would sum up over all",
    "start": "1567140",
    "end": "1572360"
  },
  {
    "text": "the columns 256 columns and for one of them you would now have a highly Amplified tight Peak yeah ah very nice",
    "start": "1572360",
    "end": "1579620"
  },
  {
    "text": "okay so this is a yeah very nice attack here um so",
    "start": "1579620",
    "end": "1586159"
  },
  {
    "text": "yeah so we we will store this information then and then we have recovered that byte and then the overall",
    "start": "1586159",
    "end": "1592460"
  },
  {
    "text": "attack works like in the overview um but how do we how do we stop that",
    "start": "1592460",
    "end": "1597500"
  },
  {
    "text": "because now this looks a bit dangerous how do we stop these attacks that there are multiple possibilities so",
    "start": "1597500",
    "end": "1603740"
  },
  {
    "text": "the first the easiest one is obviously let's just say let's disable memory duplication but that's maybe not a good",
    "start": "1603740",
    "end": "1610640"
  },
  {
    "text": "answer because memory D duplication can save a lot of memory it can even save power consumption in some cases",
    "start": "1610640",
    "end": "1618559"
  },
  {
    "text": "um so I don't think we will see this disabled no that would be like you said",
    "start": "1618559",
    "end": "1624860"
  },
  {
    "text": "a waste of resources yes so what else can we do",
    "start": "1624860",
    "end": "1630260"
  },
  {
    "text": "um there are other mitigations yes for instance Fusion yep Fusion basically embrace the same",
    "start": "1630260",
    "end": "1637039"
  },
  {
    "text": "behavior for writing to regular pages and copy and write pages so you basically only see the higher timing and",
    "start": "1637039",
    "end": "1643220"
  },
  {
    "text": "that of course then doesn't allow you anymore to see a timing difference yeah but they also have been further",
    "start": "1643220",
    "end": "1648919"
  },
  {
    "text": "proposals in the academic Community for instance to only de-duplicate zero pages",
    "start": "1648919",
    "end": "1655340"
  },
  {
    "text": "right yes but does that make sense are there so many zero pages yeah certain workloads zero Pages make",
    "start": "1655340",
    "end": "1663980"
  },
  {
    "text": "up a lot of of the of the content and yeah okay that means you can still gain",
    "start": "1663980",
    "end": "1669559"
  },
  {
    "text": "efficiency there yeah um but maybe you can also do something else um maybe we can detect the attack on a",
    "start": "1669559",
    "end": "1676159"
  },
  {
    "text": "network layer because you're sending a lot of packets so we can just detect that right yes of course yeah",
    "start": "1676159",
    "end": "1683240"
  },
  {
    "text": "or if we would encrypt or encode pages with a random salt or with a key then",
    "start": "1683240",
    "end": "1690320"
  },
  {
    "text": "also they couldn't be de-duplicated anymore but that would boil down to the same problem then we are disabling",
    "start": "1690320",
    "end": "1695779"
  },
  {
    "text": "memory lead application or if the key and the salt um are only specific to the security",
    "start": "1695779",
    "end": "1701779"
  },
  {
    "text": "domain then they would still allow the same attack um we definitely evaluated uh some of",
    "start": "1701779",
    "end": "1707179"
  },
  {
    "text": "these mitigations and one of them is a fusion that we looked at and here you",
    "start": "1707179",
    "end": "1712340"
  },
  {
    "text": "can see the timing differences when Fusion is enabled yeah and what does it look like when we",
    "start": "1712340",
    "end": "1719000"
  },
  {
    "text": "disable Fusion like this then we can still clearly see the kernel offset in our case on our",
    "start": "1719000",
    "end": "1725720"
  },
  {
    "text": "break yes okay so we see there are mitigations to this attack",
    "start": "1725720",
    "end": "1731720"
  },
  {
    "text": "um that don't sacrifice the um entire efficiency of the system and",
    "start": "1731720",
    "end": "1737960"
  },
  {
    "text": "maybe that's also already the point where we get to the conclusion",
    "start": "1737960",
    "end": "1743000"
  },
  {
    "text": "um some just maybe also here to mention um the remote attack got a new cve that",
    "start": "1743000",
    "end": "1748460"
  },
  {
    "text": "was in 2021 and um we were able to mount multiple",
    "start": "1748460",
    "end": "1754520"
  },
  {
    "text": "different attacks the first one was a remote fingerprinting of libraries or",
    "start": "1754520",
    "end": "1759919"
  },
  {
    "text": "executables on the system the second one and the second one was the kslr brick we",
    "start": "1759919",
    "end": "1766580"
  },
  {
    "text": "saw that managed to work in under four minutes so that's very nice over the Internet it needs to",
    "start": "1766580",
    "end": "1773659"
  },
  {
    "text": "emphasize I think yeah I always hear this argument yeah kslr is broken anyway if you already have code execution on",
    "start": "1773659",
    "end": "1780919"
  },
  {
    "text": "the system but if you don't have code execution on the system then still a case outbreak is quite",
    "start": "1780919",
    "end": "1787520"
  },
  {
    "text": "valuable so um or can be depending on what your attack Vector is so the third attack",
    "start": "1787520",
    "end": "1795080"
  },
  {
    "text": "then was the leakage of the database records bite by bite exploiting this",
    "start": "1795080",
    "end": "1800179"
  },
  {
    "text": "reorganization in nodb and finally we have been working with redhead there and",
    "start": "1800179",
    "end": "1806899"
  },
  {
    "text": "they have developed a probabilistic mitigation as opt-in for the Linux question that's not main main in the",
    "start": "1806899",
    "end": "1814159"
  },
  {
    "text": "mainline kernel yet um it's just a request for comments yeah",
    "start": "1814159",
    "end": "1819380"
  },
  {
    "text": "so far okay and with that we are at the end of our talk and uh we would be happy to",
    "start": "1819380",
    "end": "1826220"
  },
  {
    "text": "take your questions thank you [Music]",
    "start": "1826220",
    "end": "1832869"
  },
  {
    "text": "[Music]",
    "start": "1836710",
    "end": "1839799"
  }
]