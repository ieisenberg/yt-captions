[
  {
    "text": "[Music]",
    "start": "1080",
    "end": "30760"
  },
  {
    "text": "okay so we might as well started so everybody can hear me okay okay so my",
    "start": "33719",
    "end": "39000"
  },
  {
    "text": "name is Cher I'm a faculty member at the computer science department ston Brook University so uh this is going to be",
    "start": "39000",
    "end": "45800"
  },
  {
    "text": "what they call fairly academic talk so um let's see you know how it goes so",
    "start": "45800",
    "end": "50879"
  },
  {
    "text": "basically what I'm trying to do today is to describe a comprehensive horse-based",
    "start": "50879",
    "end": "55920"
  },
  {
    "text": "intrusion detection and prevention system called paid and along way I'm going to talk about some of the problem",
    "start": "55920",
    "end": "61879"
  },
  {
    "text": "that we are trying to solve in in design and Implement in this particular system so we all know that computer",
    "start": "61879",
    "end": "69439"
  },
  {
    "text": "majority of the computer attacks actually exploit sort of software flaws in these Network applications so the",
    "start": "69439",
    "end": "75439"
  },
  {
    "text": "most classical example is buffer overflow vulnerability which allows attackers to actually modify sensitive",
    "start": "75439",
    "end": "81720"
  },
  {
    "text": "data structures in these programs and it's also the most dangerous type of attack because it is used commonly as a",
    "start": "81720",
    "end": "88119"
  },
  {
    "text": "building block for modern worm attack and then there are other examples of computer attacks that actually exploit",
    "start": "88119",
    "end": "93600"
  },
  {
    "text": "software flaws like syntax Loop Hol exq or injection and raise condition and so on and then there are other attacks that",
    "start": "93600",
    "end": "100600"
  },
  {
    "text": "uh have nothing to do with software flaws like social engineering PW cracking Deni of service and so on what",
    "start": "100600",
    "end": "106159"
  },
  {
    "text": "I'm going to focus on today is what we call control hijacking attacks of which buffer overflow attack is a classical",
    "start": "106159",
    "end": "112719"
  },
  {
    "text": "example so in this type of attacks attackers actually try to hijack the control of the network applications uh",
    "start": "112719",
    "end": "119399"
  },
  {
    "text": "by modifying some control sensitive data structure such as return address function pointer or some import function",
    "start": "119399",
    "end": "126159"
  },
  {
    "text": "table like Global offset table and so on this kind of attack actually follow a very you know stylish three-step recipe",
    "start": "126159",
    "end": "133959"
  },
  {
    "text": "and this recipe is not unlike how a hijacker actually hijacks a real",
    "start": "133959",
    "end": "139000"
  },
  {
    "text": "airplane so for example the attacker would actually try to insert something bad into the victim application either",
    "start": "139000",
    "end": "145640"
  },
  {
    "text": "malicious code or some modification of the control sensitive data structure so this is like a hijacker try to sneak in",
    "start": "145640",
    "end": "152560"
  },
  {
    "text": "a weapon into the airplane and then the attacker would actually try to trick the attack application to transfer control",
    "start": "152560",
    "end": "158599"
  },
  {
    "text": "to the injected stuff by you know modifying that control sensitive data structure so this is like the hijacker",
    "start": "158599",
    "end": "164680"
  },
  {
    "text": "trying to take over the plane the control of the plane and then eventually once it's the the attacker is in it will",
    "start": "164680",
    "end": "170920"
  },
  {
    "text": "try to uh damage the underlying system by issuing some sort of system cause or do something bad to the underly system",
    "start": "170920",
    "end": "177680"
  },
  {
    "text": "so it's like taking an airplane and hit some Target uh of of of of their choice so given that this is sort of the the",
    "start": "177680",
    "end": "184159"
  },
  {
    "text": "standard recipe this this does not refer to any specific attack this is a general pattern that this type of attack tend to",
    "start": "184159",
    "end": "190280"
  },
  {
    "text": "exhibit so we are trying to develop strategies to stop these kind of attacks so that uh we can have a sort of",
    "start": "190280",
    "end": "196799"
  },
  {
    "text": "multi-layer Defense uh to prevent these kind of attacks from happening in practice so an example would be of",
    "start": "196799",
    "end": "204120"
  },
  {
    "text": "control hijacking attack will be stack Overflow so I'm not going to repeat this this is basically a very simple example",
    "start": "204120",
    "end": "210159"
  },
  {
    "text": "to show that the attackers can overflow a Lo local array and then modify some",
    "start": "210159",
    "end": "215560"
  },
  {
    "text": "control sensitive data structure in this case return address and along the way he he would actually hide uh insert some",
    "start": "215560",
    "end": "221319"
  },
  {
    "text": "malicious code in this case some kind of in8 instruction which allows you to make a system call so this is an example of",
    "start": "221319",
    "end": "228480"
  },
  {
    "text": "how do you actually insert something into the victim applications address bace and tweak the application to",
    "start": "228480",
    "end": "234159"
  },
  {
    "text": "transfer control to the code that you injected and then do something bad by making system call of your choice",
    "start": "234159",
    "end": "241159"
  },
  {
    "text": "right so so we have been trying to uh address this control hijacking attack",
    "start": "241159",
    "end": "247360"
  },
  {
    "text": "problem um using a multi prong approach and this this umbrella project is called",
    "start": "247360",
    "end": "252920"
  },
  {
    "text": "padium which has nothing to do with Microsoft the SEC Next Generation secure Computing based project has nothing",
    "start": "252920",
    "end": "258639"
  },
  {
    "text": "which just happens to have the same name so it it actually provides multiple lines of defense against this type of",
    "start": "258639",
    "end": "265560"
  },
  {
    "text": "attack the first line of defense is AR bang checking so basically a lot of this problem is because the the attacker",
    "start": "265560",
    "end": "272440"
  },
  {
    "text": "happens to be able to modify some of the data structure in the victim's application so the right thing to do",
    "start": "272440",
    "end": "278240"
  },
  {
    "text": "should have been that we should not allow them to do that and most of these kind of things happens through buffer",
    "start": "278240",
    "end": "283800"
  },
  {
    "text": "overflow so if we can actually check the bound of every array and every buffer then it would be a good idea to you be",
    "start": "283800",
    "end": "290000"
  },
  {
    "text": "provide the first line of defense so that they would not be able to do it and the second line of defense is we can",
    "start": "290000",
    "end": "295520"
  },
  {
    "text": "double check the Integrity of control sensitive data structure as I say this include something like return address",
    "start": "295520",
    "end": "302080"
  },
  {
    "text": "function pointer or some sort of global offset table and the third line of defense is with this attacker is really",
    "start": "302080",
    "end": "308400"
  },
  {
    "text": "good that even with this kind of defenses he can still get in and then actually try to do some damage to the",
    "start": "308400",
    "end": "314400"
  },
  {
    "text": "underly system by issuing some system calls the third line of defense of padium is to do system core policy check",
    "start": "314400",
    "end": "320639"
  },
  {
    "text": "basically we make sure that we understand what each application is allowed to do and check its wrong time",
    "start": "320639",
    "end": "326680"
  },
  {
    "text": "Behavior against the statically derived model and make sure there's no deviation between the two so that's the third line",
    "start": "326680",
    "end": "332600"
  },
  {
    "text": "of defense when all this fails when all this fails there are stupid thing people that would know screw up that we have to",
    "start": "332600",
    "end": "339440"
  },
  {
    "text": "do something so our position is that there's no such thing as perfect security you have to prepare for the",
    "start": "339440",
    "end": "345520"
  },
  {
    "text": "situation in which your system actually get compromised so the very last line of defense of padium is to provide a",
    "start": "345520",
    "end": "351360"
  },
  {
    "text": "so-called repairable fire service that basically tries to turn a compromise",
    "start": "351360",
    "end": "356479"
  },
  {
    "text": "into a temporary outage we what we are trying to do is to develop mechanism so that we can quickly repair a compromise",
    "start": "356479",
    "end": "363919"
  },
  {
    "text": "system and put it back to normal order so that we can maximize the overall system availability so essentially we",
    "start": "363919",
    "end": "369680"
  },
  {
    "text": "just want to think of an intrusion just like a glitch most just like the server overlo overload for example something",
    "start": "369680",
    "end": "375800"
  },
  {
    "text": "along those line so I'm going to what I'm going to do today is to briefly describe the first second and the fourth",
    "start": "375800",
    "end": "381800"
  },
  {
    "text": "element of padium and then Focus the rest of the this talk on the on how",
    "start": "381800",
    "end": "387639"
  },
  {
    "text": "padium performs the system core policy check that's the really the focus of this talk but I want to you know mention",
    "start": "387639",
    "end": "393520"
  },
  {
    "text": "the other three components a little bit as well so the idea of aray Bank checkin is not new everybody knows that you should",
    "start": "393520",
    "end": "400840"
  },
  {
    "text": "do aray bang checkin uh if you can afford it right so the idea is that if you make sure that every access to an",
    "start": "400840",
    "end": "407599"
  },
  {
    "text": "array not only static array but also dynamically allocated buffer like through Malo that you actually try to",
    "start": "407599",
    "end": "413840"
  },
  {
    "text": "check that every reference does not exceed its Associated objects BM then",
    "start": "413840",
    "end": "418960"
  },
  {
    "text": "that would be the solution right if if your every program actually goes through such a process is actually nice right so",
    "start": "418960",
    "end": "425400"
  },
  {
    "text": "that's essentially what Java gives you right unfortunately we we don't have necessarily have that for C but uh that",
    "start": "425400",
    "end": "431800"
  },
  {
    "text": "that's that's basically where the problem is now the fundamental two problems that you have to solve when you want to implement aray Bank checking",
    "start": "431800",
    "end": "438560"
  },
  {
    "text": "compiler is that for a given memory reference you have to know what is its Associated reference object what's the",
    "start": "438560",
    "end": "445280"
  },
  {
    "text": "object like I have a memory reference does it belong to this array or that buffer right you have to find out which",
    "start": "445280",
    "end": "450840"
  },
  {
    "text": "object it is associated with and then you have to check whether this particular me memory reference exceeds",
    "start": "450840",
    "end": "456680"
  },
  {
    "text": "its Associated object B right so usually it's the second part that's the the problem the second step that's the",
    "start": "456680",
    "end": "463120"
  },
  {
    "text": "problem now there are commercial array Bank checking compiler that can do something like this and the the problem",
    "start": "463120",
    "end": "470240"
  },
  {
    "text": "with this kind of this uh array Bank checking compiler is that it incurs a significant performance overhead",
    "start": "470240",
    "end": "476479"
  },
  {
    "text": "typically is between three to 30 times slow slow down okay so let me repeat",
    "start": "476479",
    "end": "481960"
  },
  {
    "text": "again the idea of array Bank checking is not new the problem is that how do we do it fast okay and that's where the the",
    "start": "481960",
    "end": "488479"
  },
  {
    "text": "innovation of padium comes in so the idea of padium is that it's",
    "start": "488479",
    "end": "493759"
  },
  {
    "text": "going to explo segmentation Hardware to uh do aray bang checkin for free now just a a simple sort of overview of what",
    "start": "493759",
    "end": "501199"
  },
  {
    "text": "x86 virtual memory Hardware uh do for um for a given memory reference a virtual",
    "start": "501199",
    "end": "508680"
  },
  {
    "text": "address in 86 architecture consists of a segment selector plus offset right and",
    "start": "508680",
    "end": "513760"
  },
  {
    "text": "then at the wrong time the the offset is added to the seltic segments based address to form a so-call linear address",
    "start": "513760",
    "end": "520719"
  },
  {
    "text": "which is then translated into a physical address through the standard paging mechanism so it actually provides",
    "start": "520719",
    "end": "526279"
  },
  {
    "text": "segmentation and Page mechanism at the hardware level and at the segmentation level he actually checked that the",
    "start": "526279",
    "end": "531920"
  },
  {
    "text": "linear address doesn't exceed the range of the corresponding segment now most of",
    "start": "531920",
    "end": "537000"
  },
  {
    "text": "the operating system today do not really uh EXP segmentation Hardware at all they just you know Liv long use flat address",
    "start": "537000",
    "end": "543720"
  },
  {
    "text": "space so now but if you look at this particular picture like if we can somehow twist this segment limit check",
    "start": "543720",
    "end": "550640"
  },
  {
    "text": "to perform AR bang checking we can actually get it for free because the hardware is always do is already doing",
    "start": "550640",
    "end": "557000"
  },
  {
    "text": "it you don't really need additional Hardware the hardware is already performing some sort of check similar to a bank check so for example if we can",
    "start": "557000",
    "end": "564040"
  },
  {
    "text": "allocate a segment for every static array even local array or Global array or every U meem dynamically allocated",
    "start": "564040",
    "end": "572200"
  },
  {
    "text": "buffer and then we can TW sort of organize the reference to this objects to this static array or dynamic buffers",
    "start": "572200",
    "end": "579519"
  },
  {
    "text": "in such a way that we can Leverage The segment limit Hardware check to do array",
    "start": "579519",
    "end": "584640"
  },
  {
    "text": "bang checking when that be nice and that's exactly what we do in padium so that's the idea that we want to exploit",
    "start": "584640",
    "end": "591000"
  },
  {
    "text": "segment limit check Hardware to perform aray B checkin and each array and buffer",
    "start": "591000",
    "end": "596320"
  },
  {
    "text": "will be treated as a SE SE separate segment and and referenced accordingly so there this a little uh program to",
    "start": "596320",
    "end": "602959"
  },
  {
    "text": "show you how what how it is actually done so basically what we do is that you if we want to do software arank check",
    "start": "602959",
    "end": "609640"
  },
  {
    "text": "then for every memory reference bi we actually have to insert some code to check whether the resting memory",
    "start": "609640",
    "end": "615800"
  },
  {
    "text": "reference exceeds the bound of b or not but then you can actually organize um",
    "start": "615800",
    "end": "621320"
  },
  {
    "text": "the the way that you generate the references for bi in such a way in this case in particular we are using this uh",
    "start": "621320",
    "end": "627320"
  },
  {
    "text": "gset with offset so we are using a separate segment for this particular array so",
    "start": "627320",
    "end": "634120"
  },
  {
    "text": "that when the code is actually generated that the hardware would actually check",
    "start": "634120",
    "end": "639600"
  },
  {
    "text": "whether the offset is within the range of this particular segment yes and as a result as you can see to the right of",
    "start": "639600",
    "end": "646120"
  },
  {
    "text": "your your slide there's actually no additional software needed to do array Bank checking but implicitly is the the",
    "start": "646120",
    "end": "652480"
  },
  {
    "text": "hardware is doing the aray bank checking for you now this actually gives you a astonishing performance um Improvement",
    "start": "652480",
    "end": "659320"
  },
  {
    "text": "so the standard AR Bank checking uh compiler that we have is BCC so these are the set of programs that we compile",
    "start": "659320",
    "end": "665959"
  },
  {
    "text": "and then we also compile no the a big program like Apachi and so on and the performance difference is similar so for",
    "start": "665959",
    "end": "673320"
  },
  {
    "text": "BCC what we reported to the right the third column is the performance overhead",
    "start": "673320",
    "end": "678360"
  },
  {
    "text": "like it used to take 100% And then one one for example SVD pack it gives you",
    "start": "678360",
    "end": "683959"
  },
  {
    "text": "120% performance overhead that means it's 2.2 times slower right that's what we mean and in the case of cach which is",
    "start": "683959",
    "end": "690959"
  },
  {
    "text": "our approach it only uh incurs 1.82% performance overhead it's almost nothing",
    "start": "690959",
    "end": "696680"
  },
  {
    "text": "it's sort of BU in the statistical noise right so so that that's a a interesting result of this particular",
    "start": "696680",
    "end": "703120"
  },
  {
    "text": "work and if you remember a second element or P of this padium project is",
    "start": "703120",
    "end": "708440"
  },
  {
    "text": "to double check the Integrity of um control sensitive data structure so we",
    "start": "708440",
    "end": "714399"
  },
  {
    "text": "apply this to to protect the return address though the resulting thing is similar to State guard so there's",
    "start": "714399",
    "end": "719800"
  },
  {
    "text": "nothing um nothing sort of exciting about this but we apply we generalize",
    "start": "719800",
    "end": "725440"
  },
  {
    "text": "this to know multiple kinds of control sensitive data structure and we get similar results so the results is",
    "start": "725440",
    "end": "732519"
  },
  {
    "text": "something like that again if you add something like this kind of check and basically the idea is very simple like for every control sensitive data",
    "start": "732519",
    "end": "739279"
  },
  {
    "text": "structure you keep a copy somewhere and later on when the program try to use it you check whether the one that you store",
    "start": "739279",
    "end": "745560"
  },
  {
    "text": "away and the one the program actually is going to use they actually match if they don't match then somebody trying to",
    "start": "745560",
    "end": "750959"
  },
  {
    "text": "screw us up and then we we can uh declare a a an intrusion all right and this particular check really doesn't",
    "start": "750959",
    "end": "757160"
  },
  {
    "text": "cost you that much so as you can see here is performance overhead is always under 5% right again it's sort of pretty",
    "start": "757160",
    "end": "765760"
  },
  {
    "text": "okay in a hip in a hip where you actually protected by two re only pages",
    "start": "766279",
    "end": "771760"
  },
  {
    "text": "so that they cannot be overflow and then we also apply this",
    "start": "771760",
    "end": "777600"
  },
  {
    "text": "idea some some people complain that this is fine but uh you know nobody's going to use you because you cannot have access to source code so we prove them",
    "start": "777600",
    "end": "784519"
  },
  {
    "text": "wrong by doing a version for for Windows minor as well so we can also do this",
    "start": "784519",
    "end": "789760"
  },
  {
    "text": "with big program like PowerPoint and and other programs in the office uh",
    "start": "789760",
    "end": "796079"
  },
  {
    "text": "Suite so that's the the second component so just to remind you first line of defense make sure that it cannot",
    "start": "796079",
    "end": "801639"
  },
  {
    "text": "overflow second line of defense make sure even if they can overflow they cannot touch my control sensitive data",
    "start": "801639",
    "end": "806720"
  },
  {
    "text": "structure because I I will double check and the third the fourth line of defense is if they can actually get in and then",
    "start": "806720",
    "end": "812600"
  },
  {
    "text": "do some damage then I want to quickly recover the system back to an order that can actually perform useful function so",
    "start": "812600",
    "end": "818800"
  },
  {
    "text": "this is what we call repairable file service and then this is actually somewhat orthogonal to this control",
    "start": "818800",
    "end": "824760"
  },
  {
    "text": "hijacking attack this there's a general context in which This research um was initiated and that's the recognition",
    "start": "824760",
    "end": "831759"
  },
  {
    "text": "that there's no such thing as unbreakable computer system right so you have Insider job you have social engineering there's nothing we can do uh",
    "start": "831759",
    "end": "838519"
  },
  {
    "text": "at the techn level but if you if you try to understand then what is the loss of a",
    "start": "838519",
    "end": "843720"
  },
  {
    "text": "computer Bridge like what what when it say that billions of dollars is is lost due to computer Bridges what exactly",
    "start": "843720",
    "end": "849240"
  },
  {
    "text": "does it mean so it turns out that most of them is due to sort of loss of",
    "start": "849240",
    "end": "854440"
  },
  {
    "text": "intellectual property right and loss of productivity like you know the computer is brought down or compromised somebody",
    "start": "854440",
    "end": "860199"
  },
  {
    "text": "has to come in try to fix it and at that time it's unavailable this and that so so that's where the money is lost due to",
    "start": "860199",
    "end": "867240"
  },
  {
    "text": "a uh computer uh Bridge so so what we are trying to do is to recognize that a",
    "start": "867240",
    "end": "874160"
  },
  {
    "text": "security bridge is just like a failure in a for tolerant Computing world and they already recognize that that you",
    "start": "874160",
    "end": "881279"
  },
  {
    "text": "know up to a certain point there's no point of trying to build a a a system that never fails a system never fails",
    "start": "881279",
    "end": "888000"
  },
  {
    "text": "means the meantime to fail is infinite right that's what you do you make sure that it never fails instead what you",
    "start": "888000",
    "end": "894920"
  },
  {
    "text": "really care about is availability right and availability is that it stays up you know with close to 100% of the time so",
    "start": "894920",
    "end": "903199"
  },
  {
    "text": "if you think about it availability is actually defined as meantime to failure over meantime to failure plus meantime",
    "start": "903199",
    "end": "909680"
  },
  {
    "text": "to repair right and what you want is availability approaching one that's really the goal for an individual",
    "start": "909680",
    "end": "916800"
  },
  {
    "text": "customer I just want my service and system to be up so that people can do useful work or customer can come in",
    "start": "916800",
    "end": "923440"
  },
  {
    "text": "order something right now in order to maximize the availability you can do two things one of two things one is to make",
    "start": "923440",
    "end": "930120"
  },
  {
    "text": "mttf meantime to failure to INF infinity or you can shrink meantime to repair",
    "start": "930120",
    "end": "936319"
  },
  {
    "text": "mttr to zero right either way can get you the same result that availability",
    "start": "936319",
    "end": "941440"
  },
  {
    "text": "would approach one right so if we take this and then put it in the context of security what does it mean like people",
    "start": "941440",
    "end": "948000"
  },
  {
    "text": "try to build a perfectly secure system which means that there's no Bridge meantime between bridge is in Infinity",
    "start": "948000",
    "end": "955680"
  },
  {
    "text": "right and that's certainly a worthy goal but the the other way to think about it is maybe we can try to repair a",
    "start": "955680",
    "end": "962199"
  },
  {
    "text": "compromise system as quickly as possible that's not too bad right after all what we really want is availability right and",
    "start": "962199",
    "end": "968720"
  },
  {
    "text": "that's what uh that's the context in which this project is um is started so",
    "start": "968720",
    "end": "974279"
  },
  {
    "text": "so so given that this is what what what we are trying to do then we have to ask ourselves what what do we mean by",
    "start": "974279",
    "end": "979680"
  },
  {
    "text": "repairing a system what exactly do people do when they say they are repairing when they are repairing a",
    "start": "979680",
    "end": "985600"
  },
  {
    "text": "system after a compromise what they are actually trying to do is to clean up up right and clean up means that they have",
    "start": "985600",
    "end": "991240"
  },
  {
    "text": "to first understand what damages have been caused by the attacker or the intrusion right so they have to",
    "start": "991240",
    "end": "997880"
  },
  {
    "text": "establish what we call sort of damage perimeter of the system so that they can clean up right so so the fundamental",
    "start": "997880",
    "end": "1005160"
  },
  {
    "text": "problem really is about what is that damage perimeter or associated with a particular attack or intrusion right so",
    "start": "1005160",
    "end": "1012120"
  },
  {
    "text": "that's actually where the problem is so we apply this this is line of thought to to protect in particular n FS server so",
    "start": "1012120",
    "end": "1019920"
  },
  {
    "text": "basically what we are trying to do is to put in a sort of a a transparent proxy if you will or monitor device if you",
    "start": "1019920",
    "end": "1026280"
  },
  {
    "text": "will that there's a there's a system that can actually uh a device that can actually relay NFS request and response",
    "start": "1026280",
    "end": "1033000"
  },
  {
    "text": "and then along the way you would actually lock all the updates to the NFS uh server and when the NFS server is",
    "start": "1033000",
    "end": "1039319"
  },
  {
    "text": "shown to be sort of compromised then we try to quickly come in and do something so that we can repail the compromise NFS",
    "start": "1039319",
    "end": "1045600"
  },
  {
    "text": "server so that that's what this uh what we call ifs is trying to to do now as I say that um there are two things that",
    "start": "1045600",
    "end": "1052400"
  },
  {
    "text": "you need to do to build a repairable fire service and and the goal of repairable fire service is that it has",
    "start": "1052400",
    "end": "1058400"
  },
  {
    "text": "to be designed in such a way that it's it's largely not completely but largely independent of the underlying Network",
    "start": "1058400",
    "end": "1065240"
  },
  {
    "text": "fire access protocol like it should be independent of NFS version two version three or it should be independent of",
    "start": "1065240",
    "end": "1070600"
  },
  {
    "text": "whether it's you know cifs and other network fire access protocols but",
    "start": "1070600",
    "end": "1076400"
  },
  {
    "text": "regardless of the underlying sort of network fire access protocol there are two fundamental things that you need to do first you have to keep every update",
    "start": "1076400",
    "end": "1084320"
  },
  {
    "text": "undoable right if you want to clean up you have to be able to undo the damage right so every fire update has to be",
    "start": "1084320",
    "end": "1091600"
  },
  {
    "text": "undoable for those of you who un who are familiar with things like Network Appliance they provide something called",
    "start": "1091600",
    "end": "1097880"
  },
  {
    "text": "snapshat they give you 32 snapshat per day that means that you know every you know 24 hours divided by 32 that's the",
    "start": "1097880",
    "end": "1104720"
  },
  {
    "text": "window in which that every every every update all the updates we that window will get lump into one snapshot but what",
    "start": "1104720",
    "end": "1112320"
  },
  {
    "text": "we are interested in is that every update every file update I should be able to preserve it's before image so",
    "start": "1112320",
    "end": "1118679"
  },
  {
    "text": "that later on if I want to roll back that update I can that's what I mean by every fire update has to be undoable and",
    "start": "1118679",
    "end": "1125720"
  },
  {
    "text": "the second thing is that you have to be able to track the interpress dependency for later on if you actually get hacked",
    "start": "1125720",
    "end": "1132559"
  },
  {
    "text": "you can selectively undo those that are left by the the attackers okay so that's",
    "start": "1132559",
    "end": "1138240"
  },
  {
    "text": "these are the fundamental two things that you need to do and then there are sort of more detailed things that which I'm going to",
    "start": "1138240",
    "end": "1144039"
  },
  {
    "text": "not going which I'm not going to go into it is to do so-call contamination analysis when you actually um uh detect",
    "start": "1144039",
    "end": "1151120"
  },
  {
    "text": "an intrusion and try to come back and fix it so we have a prototype um working for you know this is pretty old system",
    "start": "1151120",
    "end": "1158240"
  },
  {
    "text": "redhead 7.1 and it works for NFS version two and three um so there one",
    "start": "1158240",
    "end": "1164559"
  },
  {
    "text": "interesting aspect of this ifs prototype is that later on if you decide that whatever undo operation you do to fix",
    "start": "1164559",
    "end": "1171640"
  },
  {
    "text": "the damage left by an intruder you can undo those undo operation if you want to all right because you know still undo",
    "start": "1171640",
    "end": "1177840"
  },
  {
    "text": "operation are just updates and every update is undoable right so the good thing to know is that",
    "start": "1177840",
    "end": "1185080"
  },
  {
    "text": "the performance overhead of this particular system is relatively uh low like uh we have we have to do some kind",
    "start": "1185080",
    "end": "1191039"
  },
  {
    "text": "of client side login and we have to do some something at the NFS side servers login and uh the the login overhead in",
    "start": "1191039",
    "end": "1198840"
  },
  {
    "text": "general is pretty low is you know under know 6% and additional latency introduced by this ifs Interceptor is",
    "start": "1198840",
    "end": "1205600"
  },
  {
    "text": "between 02 to 1.5 millisecond and the good thing is that uh when the NFS",
    "start": "1205600",
    "end": "1211760"
  },
  {
    "text": "workloads right ratio is between 30% there's no throughput difference between NFS and NFS ifs so NFS is pure NFS",
    "start": "1211760",
    "end": "1219159"
  },
  {
    "text": "there's nothing there's no protection at all just sitting there NFS ifs is the one that I inserted I inserted",
    "start": "1219159",
    "end": "1224960"
  },
  {
    "text": "additional thing so that I can lock all the updates and analyze the uh tracking all the interpress",
    "start": "1224960",
    "end": "1230640"
  },
  {
    "text": "dependencies and on the storage requirement front is also pretty okay that you know even though it sounds like",
    "start": "1230640",
    "end": "1237480"
  },
  {
    "text": "being able to lock every update seems to be very expensive it turns out it's okay",
    "start": "1237480",
    "end": "1242720"
  },
  {
    "text": "I mean especially when you can actually buy you know 250 Gigabyte for $200 today this is really nothing that uh this is a",
    "start": "1242720",
    "end": "1249960"
  },
  {
    "text": "small price to pay all right compared to the the kind of uh um damage you would",
    "start": "1249960",
    "end": "1255919"
  },
  {
    "text": "let you you you you would leave if you don't have any protection at all all right so in the end what we end up",
    "start": "1255919",
    "end": "1261320"
  },
  {
    "text": "happening is that when an intrusion happens and all the ifs would automatically detect who who is the",
    "start": "1261320",
    "end": "1266880"
  },
  {
    "text": "first uh Intruder process and then going through that interprocess dependency tracking mechanism you find out all the",
    "start": "1266880",
    "end": "1273640"
  },
  {
    "text": "processes that depend on the updates of the first intrusion process directly or",
    "start": "1273640",
    "end": "1279279"
  },
  {
    "text": "indirectly and all these So-Cal contamin processes update will get selectively undone and therefore you don't actually",
    "start": "1279279",
    "end": "1286159"
  },
  {
    "text": "have to do anything so so that's what we mean by are being able to fix or quickly repair a compromise system",
    "start": "1286159",
    "end": "1293279"
  },
  {
    "text": "right okay so now we can go back to the the the the rear meid of this talk which",
    "start": "1293279",
    "end": "1298520"
  },
  {
    "text": "is the third element of padium so let me recap it again first element try to stop",
    "start": "1298520",
    "end": "1304000"
  },
  {
    "text": "people from overflowing data structures in the network application Second Step",
    "start": "1304000",
    "end": "1309200"
  },
  {
    "text": "try to make sure that the control sensitive data structure in the network applications are well protected because",
    "start": "1309200",
    "end": "1315360"
  },
  {
    "text": "we double check their integrity the third line of defense is that you know for whatever reason you don't like cash",
    "start": "1315360",
    "end": "1321279"
  },
  {
    "text": "a Bank checking compiler and you don't want to you don't have access to sourcecore you don't want to recompile your applications then the position we",
    "start": "1321279",
    "end": "1328440"
  },
  {
    "text": "are taking is that you know we want to allow people to to you know compromise or to take control of your that Network",
    "start": "1328440",
    "end": "1335320"
  },
  {
    "text": "application but we are saying that if they cannot issue arbitrary system call it's probably not too bad right so of",
    "start": "1335320",
    "end": "1341600"
  },
  {
    "text": "course this this is already some assumption about this that uh you know availability might suffer this is",
    "start": "1341600",
    "end": "1346679"
  },
  {
    "text": "probably not a good solution to Sol the availability problem like people can come in compromise your network",
    "start": "1346679",
    "end": "1352200"
  },
  {
    "text": "application and insert the idle Loop and do nothing so that would be an availability attack so that's not good",
    "start": "1352200",
    "end": "1357600"
  },
  {
    "text": "but we are talking about like a damages that are sort of that are in the form of either you know compromise the",
    "start": "1357600",
    "end": "1363720"
  },
  {
    "text": "underlying data files or or resend an email message using the contact in your address book that kind of thing that's",
    "start": "1363720",
    "end": "1370240"
  },
  {
    "text": "the kind of attack we are talking about so so the idea of monitoring the",
    "start": "1370240",
    "end": "1375880"
  },
  {
    "text": "behavior of an application when it runs and check this wrong time Behavior",
    "start": "1375880",
    "end": "1381240"
  },
  {
    "text": "against some kind of static model is n new again that's almost like every every",
    "start": "1381240",
    "end": "1387200"
  },
  {
    "text": "host based intrusion detection system including so-called Behavior brocking products today that's what they do",
    "start": "1387200",
    "end": "1394480"
  },
  {
    "text": "there's nothing special about this the only problem is for of this this kind of",
    "start": "1394480",
    "end": "1399640"
  },
  {
    "text": "system is that where do you come up with the policy the model right you have to have a good model about this application",
    "start": "1399640",
    "end": "1406960"
  },
  {
    "text": "and hopefully you have one model for each and every Network application out there that would be nice right as",
    "start": "1406960",
    "end": "1413919"
  },
  {
    "text": "opposed to right now they have to somehow guess to get this model and then at the wrong time check the wrong time",
    "start": "1413919",
    "end": "1420159"
  },
  {
    "text": "Behavior against this model and because these models are not precise that's why you get Force positive right and that's",
    "start": "1420159",
    "end": "1426600"
  },
  {
    "text": "that's the general problem of this kind of approach horse based intrusion",
    "start": "1426600",
    "end": "1431679"
  },
  {
    "text": "detection system that are based on system called magnet all right and this is the problem that we are trying to",
    "start": "1431679",
    "end": "1437520"
  },
  {
    "text": "solve so we are not inventing hor based intrusion detection system using system core magnet that's like what everybody",
    "start": "1437520",
    "end": "1444360"
  },
  {
    "text": "is doing we are trying to solve the problem of how do you come up with a system call policy for any arbitrary",
    "start": "1444360",
    "end": "1450279"
  },
  {
    "text": "application automatically and accurately okay that's what we are trying to do so what what what are people doing",
    "start": "1450279",
    "end": "1458039"
  },
  {
    "text": "nowadays in order to come up with a system call policy or model for a network application you can you know ask",
    "start": "1458039",
    "end": "1463960"
  },
  {
    "text": "somebody else to go through the the code I mean this is pretty painful if you only have access to the binary so you",
    "start": "1463960",
    "end": "1470159"
  },
  {
    "text": "can do manual specification right for for a particular um application and in",
    "start": "1470159",
    "end": "1476440"
  },
  {
    "text": "some sense that's exactly where the business value is for a lot of these company right they they actually sell",
    "start": "1476440",
    "end": "1482720"
  },
  {
    "text": "you not the the software that detect the intrustion but the policies because the policies are the most sort of valuable",
    "start": "1482720",
    "end": "1490080"
  },
  {
    "text": "part of the whole deal but manual specification is aerop prone labor intensive non-scalable and so on or",
    "start": "1490080",
    "end": "1497000"
  },
  {
    "text": "people try to do machine learning run the program you know a couple of times and try to learn it's a system called",
    "start": "1497000",
    "end": "1502559"
  },
  {
    "text": "Behavior so it's a normal mod but of course this again it's aror prom and then you need a training effort and you",
    "start": "1502559",
    "end": "1508679"
  },
  {
    "text": "sometime will miss something because you don't exercise all the execution path of the program so our approach is to say",
    "start": "1508679",
    "end": "1515080"
  },
  {
    "text": "that why bother I mean the information is always there in the program I mean if you can use a compiler to extract this",
    "start": "1515080",
    "end": "1522240"
  },
  {
    "text": "uh sites and ordering information of the system C from the source code of any network application then you can",
    "start": "1522240",
    "end": "1528799"
  },
  {
    "text": "actually get that information there it's all there in the program right so there's no need to treat them as a black",
    "start": "1528799",
    "end": "1533880"
  },
  {
    "text": "box and then try to do something so we we want to claim that our system paid is",
    "start": "1533880",
    "end": "1539279"
  },
  {
    "text": "the only host based intrusion detection system that can guarantee so zero Force",
    "start": "1539279",
    "end": "1544480"
  },
  {
    "text": "positive and very close to zero Force negatives now being able to uh guarantee",
    "start": "1544480",
    "end": "1550440"
  },
  {
    "text": "zero Force positive is nothing if you also provide a very high Force negative right if you don't do anything that's",
    "start": "1550440",
    "end": "1557039"
  },
  {
    "text": "zero Force positive right so the big deal is that it has to be zero Force positive and very close to zero Force",
    "start": "1557039",
    "end": "1563679"
  },
  {
    "text": "negatives I will show you that where the vulnerabilities of our current system is uh later on so the good thing is that we if you",
    "start": "1563679",
    "end": "1572240"
  },
  {
    "text": "we have a compiler that can automatically and accurately extract a system core policy From Any Given",
    "start": "1572240",
    "end": "1578799"
  },
  {
    "text": "Network application that's a tech home Point that's the thing that we can do",
    "start": "1578799",
    "end": "1584159"
  },
  {
    "text": "right and for now we can only do it when we have access to the source code but we are working on a binary version as well",
    "start": "1584159",
    "end": "1591159"
  },
  {
    "text": "right for now it's only for source code so so the overall architecture is",
    "start": "1591159",
    "end": "1597399"
  },
  {
    "text": "that at a compile time I'm going to extract some system call policy from the source code of the network application",
    "start": "1597399",
    "end": "1603760"
  },
  {
    "text": "and then at the wrong time I'm going to check the wrong time system core pattern against this statically derived system",
    "start": "1603760",
    "end": "1610159"
  },
  {
    "text": "core policy and if there's any deviation then we can comfortably say that's",
    "start": "1610159",
    "end": "1615200"
  },
  {
    "text": "definitely an intrusion okay and again this is is only useful for control hijacking attacks right this is this is",
    "start": "1615200",
    "end": "1622159"
  },
  {
    "text": "not going to work for you know arbitrary kind of attacks so so this is not a penia for you know all security problems",
    "start": "1622159",
    "end": "1631000"
  },
  {
    "text": "obviously okay so I'm going to do this first and then come back to mimicry attack so so what how do we actually do",
    "start": "1632799",
    "end": "1640159"
  },
  {
    "text": "it I'm just trying to go give you a outline of exactly how we do it so we are given the source code of an",
    "start": "1640159",
    "end": "1645279"
  },
  {
    "text": "application and then we can build a uh we can analyze the code to get a function call graph and then we can get",
    "start": "1645279",
    "end": "1651320"
  },
  {
    "text": "a per function uh control flow graph and this is a reduced control flow graph because if a function doesn't contain",
    "start": "1651320",
    "end": "1658440"
  },
  {
    "text": "any system calls directly or it doesn't call any function that eventually will call a system call we don't care those",
    "start": "1658440",
    "end": "1663960"
  },
  {
    "text": "function we don't care because eventually we just want to extract a system called control flow graph will",
    "start": "1663960",
    "end": "1670559"
  },
  {
    "text": "right we are not interested in the complete control program that's for like standard compiler people here we are",
    "start": "1670559",
    "end": "1676279"
  },
  {
    "text": "only interested in the the part of the control flow graph that actually has something to do with system call and",
    "start": "1676279",
    "end": "1683039"
  },
  {
    "text": "then for each system call we are going to extract its memory location and derive the following system core set so",
    "start": "1683039",
    "end": "1688960"
  },
  {
    "text": "we want to make sure that we understand that for each system core instance like a system core can be made in multiple",
    "start": "1688960",
    "end": "1695600"
  },
  {
    "text": "places but for each system core site we give you we give it a unique label so if",
    "start": "1695600",
    "end": "1701240"
  },
  {
    "text": "the open core get CAU in multiple places they would actually have multiple system called instances and each of them has a",
    "start": "1701240",
    "end": "1708159"
  },
  {
    "text": "unique memory location right and the way do it is we inline the system call so so",
    "start": "1708159",
    "end": "1713799"
  },
  {
    "text": "the reason we want to do it is we want to distinguish between not only uh the ordering in which the system call should",
    "start": "1713799",
    "end": "1720000"
  },
  {
    "text": "be made but also the places at which they can be made right so we want to check not only the order in which system",
    "start": "1720000",
    "end": "1726880"
  },
  {
    "text": "call should happen in a program but also the instruction address at which those system CS can happen right so that's",
    "start": "1726880",
    "end": "1733880"
  },
  {
    "text": "what we do at the wrong time we actually check both the ordering and the sites at which the system calls are",
    "start": "1733880",
    "end": "1741559"
  },
  {
    "text": "made but there's something wrong with this idea the idea of extracting this uh",
    "start": "1741720",
    "end": "1747799"
  },
  {
    "text": "system core policy or model through a compiler that that that idea has some",
    "start": "1747799",
    "end": "1753559"
  },
  {
    "text": "flaw because it is assuming that at compil time you can actually get the control control flow graph right which",
    "start": "1753559",
    "end": "1761440"
  },
  {
    "text": "is not necessary the case the control flow graph basically says that at the wrong time program will come here go",
    "start": "1761440",
    "end": "1766480"
  },
  {
    "text": "there but what if you have something like indirect call through uh function pointer right you have a function call",
    "start": "1766480",
    "end": "1773880"
  },
  {
    "text": "uh the target of the function call is a pointer whose value is not available at compile time you don't even know the",
    "start": "1773880",
    "end": "1780679"
  },
  {
    "text": "value of the function go what do you mean you are going to build a uh complete control flow graph right that's",
    "start": "1780679",
    "end": "1785799"
  },
  {
    "text": "the problem so so we have to somehow deal with what we call Dynamic Branch Target right you cannot even get the",
    "start": "1785799",
    "end": "1791640"
  },
  {
    "text": "control FL gra then forget about trying to check the know dynamic uh system call pattern against some static control",
    "start": "1791640",
    "end": "1798360"
  },
  {
    "text": "program so the way we do it is that we are going to insert a special system",
    "start": "1798360",
    "end": "1803480"
  },
  {
    "text": "call into the program into the source code of the program so the idea is that yes at the compile time I don't know the",
    "start": "1803480",
    "end": "1811039"
  },
  {
    "text": "value of the target of this kind of indirect function call but I know that I",
    "start": "1811039",
    "end": "1816200"
  },
  {
    "text": "don't know that's good enough right if I know that I don't know at least I can insert something a notify system call to",
    "start": "1816200",
    "end": "1822840"
  },
  {
    "text": "notify the wrong time Checker to tell me that hey this particular indirect call",
    "start": "1822840",
    "end": "1828240"
  },
  {
    "text": "whose Target is actually this at the wrong time so this notifi system C is to tell the wrong time Checker that I know",
    "start": "1828240",
    "end": "1835519"
  },
  {
    "text": "that at compile time you don't know but now I'm giving you that's the actual value of the target address of this",
    "start": "1835519",
    "end": "1841360"
  },
  {
    "text": "indirect call now right so that's how we solve this problem we actually have to to add additional code to the to the",
    "start": "1841360",
    "end": "1848240"
  },
  {
    "text": "program so that we can inform the wrong time Checker about the values of the this indirect uh function cost or or or",
    "start": "1848240",
    "end": "1855919"
  },
  {
    "text": "system cost so long time Checker is is this one let me give you so that so this",
    "start": "1855919",
    "end": "1863320"
  },
  {
    "text": "this legitimate check is what I mean by wrong time Checker",
    "start": "1863320",
    "end": "1869158"
  },
  {
    "text": "right okay so this solves the problems of dynamic uh Branch targets the the the",
    "start": "1869440",
    "end": "1875919"
  },
  {
    "text": "the kind of Branch instructions whose Target address is not available at compile time that's what I",
    "start": "1875919",
    "end": "1881720"
  },
  {
    "text": "mean but then there are other issue as well now programs are actually more complicated than that it's not just",
    "start": "1881720",
    "end": "1887600"
  },
  {
    "text": "about Dynamic uh Branch targets there are things what we call a synchronous control transfer right like there such",
    "start": "1887600",
    "end": "1895120"
  },
  {
    "text": "such things as a set jump and long jump right out of the blue you set jump somewhere and then you want to do a long",
    "start": "1895120",
    "end": "1900440"
  },
  {
    "text": "jump so that's a sort of unconventional control transfer if you will so we have to deal with this issue as well our our",
    "start": "1900440",
    "end": "1907480"
  },
  {
    "text": "system can deal with that that we can actually keep track of the the current cursor of this uh system core control",
    "start": "1907480",
    "end": "1914399"
  },
  {
    "text": "flow graph at the time of SE jump and when you do a long jump I so sort of that put the cursor back to uh the place",
    "start": "1914399",
    "end": "1920679"
  },
  {
    "text": "that we record it so we can resynchronize the wrong time behavior of the application with the system call",
    "start": "1920679",
    "end": "1926440"
  },
  {
    "text": "graph that we are checking with right and then there's the signal Handler right signal Handler has the",
    "start": "1926440",
    "end": "1932000"
  },
  {
    "text": "characteristics is that at the compile time you cannot find any core",
    "start": "1932000",
    "end": "1937159"
  },
  {
    "text": "instruction they actually call a signal Handler right by construction signal hand nobody's calling signal Handler the",
    "start": "1937159",
    "end": "1943600"
  },
  {
    "text": "only guy that's calling signal Handler is a kernel right so if you just analyze the source code of course you cannot see",
    "start": "1943600",
    "end": "1949120"
  },
  {
    "text": "the the any instruction that try to call a signal Handler right and that we can also handle so this is actually similar",
    "start": "1949120",
    "end": "1955639"
  },
  {
    "text": "to this indirect function codes and then there are things like you know at compile time you don't even see the code",
    "start": "1955639",
    "end": "1962159"
  },
  {
    "text": "because this actually get loaded at the wrong time like you do a low module you don't even see the code how are you",
    "start": "1962159",
    "end": "1967440"
  },
  {
    "text": "going to analyze it right so we can also deal with dynamically uh link Library as well so this is not D just D this is",
    "start": "1967440",
    "end": "1974440"
  },
  {
    "text": "like a d module kind of thing you actually load the module at a wrong time so we we our system can deal with this",
    "start": "1974440",
    "end": "1982039"
  },
  {
    "text": "kind of uh you know uh peculiarities U programming Primitives as",
    "start": "1982039",
    "end": "1988120"
  },
  {
    "text": "well so so let me go back to uh mimicry attack so given that we can we can uh",
    "start": "1988120",
    "end": "1997240"
  },
  {
    "text": "derive a system core policy or model at a compile time and we can deal with",
    "start": "1997240",
    "end": "2002360"
  },
  {
    "text": "Dynamic Branch targets and asynchronous control transfer and so on these are all fine looks okay the only problem is that",
    "start": "2002360",
    "end": "2010039"
  },
  {
    "text": "the bad guys still can get you right and this is a so-called mimicry attack so",
    "start": "2010039",
    "end": "2015440"
  },
  {
    "text": "the way the bad guy is going to behave is like this that U the guy is going to come in like exploit the buffer overflow",
    "start": "2015440",
    "end": "2022360"
  },
  {
    "text": "vulnerability and comes in and he understands that the the system core model of this particular victim",
    "start": "2022360",
    "end": "2028120"
  },
  {
    "text": "application maybe just by leveraging our tool right he can you know compile a application using exactly our tool to",
    "start": "2028120",
    "end": "2033639"
  },
  {
    "text": "get the system call model and then he's going to follow the system call model specified in that uh in the policy and",
    "start": "2033639",
    "end": "2042880"
  },
  {
    "text": "pretend to the wrong time Checker as if everything is okay and if one of the system call in the application is can",
    "start": "2042880",
    "end": "2051158"
  },
  {
    "text": "actually do the damage then he can eventually hit the application with the system call right so for example a",
    "start": "2051159",
    "end": "2057520"
  },
  {
    "text": "application actually just makes three system call like you know open something and then eventually do some EXA all",
    "start": "2057520",
    "end": "2063480"
  },
  {
    "text": "right so when he comes in and then takes control of the application he will follow all the innocent or you know",
    "start": "2063480",
    "end": "2070878"
  },
  {
    "text": "non-harmful system CA until the the flow the the program control flows go to the",
    "start": "2070879",
    "end": "2076480"
  },
  {
    "text": "sensitive system called EXA and then at that time he can hit the application to do something that he wants all right so",
    "start": "2076480",
    "end": "2082440"
  },
  {
    "text": "this is the this is what referred to as mimicry attack because the attacker actually tries to mimic the legitimate",
    "start": "2082440",
    "end": "2089599"
  },
  {
    "text": "system call sequence in the system core policy or model right so there's no violation right you know from under the",
    "start": "2089599",
    "end": "2096878"
  },
  {
    "text": "colonel I'm seeing all the wrong time system call pattern everything is okay because the the attacker actually does",
    "start": "2096879",
    "end": "2103280"
  },
  {
    "text": "exactly what the system call policy is suppose is saying that the application should behave right so there's actually",
    "start": "2103280",
    "end": "2109480"
  },
  {
    "text": "no deviation but as long as there's some sensitive system C that attacker can use",
    "start": "2109480",
    "end": "2114599"
  },
  {
    "text": "then the attacker can hit the application or the underlying system so",
    "start": "2114599",
    "end": "2120200"
  },
  {
    "text": "so none of the existing commercial or research horse-based intrusion detection system can deal with mimicry attacks",
    "start": "2120200",
    "end": "2127359"
  },
  {
    "text": "like they can come in and if they are really good they can actually do exactly this right so then how do we deal with this",
    "start": "2127359",
    "end": "2136040"
  },
  {
    "text": "problem so if we think about it in order to mount a mimicry attack what what do",
    "start": "2136040",
    "end": "2141680"
  },
  {
    "text": "you really need to do right as an attacker the first thing you need to do is of course you have to um issue you",
    "start": "2141680",
    "end": "2148160"
  },
  {
    "text": "have to come in and compromise the application right by taking advantage some buff overflow vulnerability and",
    "start": "2148160",
    "end": "2154040"
  },
  {
    "text": "then you have to issue all this intermediate system call with without being detected right because you are",
    "start": "2154040",
    "end": "2159440"
  },
  {
    "text": "trying to emulate it emulating the legitimate system cor sequence in the policy but this is in general not too",
    "start": "2159440",
    "end": "2166760"
  },
  {
    "text": "bad like people can actually do that almost all the system call can beend into no up by you know specifying the",
    "start": "2166760",
    "end": "2172960"
  },
  {
    "text": "proper arguments and then in the end when you reach the system C that you need you can",
    "start": "2172960",
    "end": "2179240"
  },
  {
    "text": "you you you can actually hit the system by issuing the system call with whatever uh uh argument that you like so that you",
    "start": "2179240",
    "end": "2185520"
  },
  {
    "text": "can achieve your purpose or attack to the underlying system but along the way",
    "start": "2185520",
    "end": "2190839"
  },
  {
    "text": "in order to be able to issue this each each intermediate system called appropriately to fool the the wrong time",
    "start": "2190839",
    "end": "2197640"
  },
  {
    "text": "Checker you have to be able to grab the control back right so what happens I have an application I grab the control",
    "start": "2197640",
    "end": "2204200"
  },
  {
    "text": "of the the program right and then I try to issue system call but every time I issue a system I have to get the control",
    "start": "2204200",
    "end": "2210480"
  },
  {
    "text": "back so that I can issue the next one right so that's the thing that the the mimicry attacker has to do that he he he",
    "start": "2210480",
    "end": "2217599"
  },
  {
    "text": "or she has to be able to get the control back and it's actually not too bad not too difficult to be able to do that",
    "start": "2217599",
    "end": "2223760"
  },
  {
    "text": "because once you are in you can manipulate the stack information anywhere you want it but as if it's actually coming back you know there's",
    "start": "2223760",
    "end": "2230119"
  },
  {
    "text": "actually a legitimate function call eventually leads to any particular system call so it's actually not too bad",
    "start": "2230119",
    "end": "2235319"
  },
  {
    "text": "that you can actually set up the stack so that eventually you get the the control back so given the recognition of how a",
    "start": "2235319",
    "end": "2243599"
  },
  {
    "text": "mimicry attacker is going to work then we can actually uh Pro use the following counter measures",
    "start": "2243599",
    "end": "2249839"
  },
  {
    "text": "against the mimicry attackers so basically what we are going to do is that we need to check system core argument remember as a last system call",
    "start": "2249839",
    "end": "2257760"
  },
  {
    "text": "that the attacker mimic attacker is trying to use he actually try to use some different system core argument so",
    "start": "2257760",
    "end": "2263040"
  },
  {
    "text": "so for example that's the exact so maybe he tries to do a you know bin share for example so if we can somehow check the",
    "start": "2263040",
    "end": "2269160"
  },
  {
    "text": "system core argument of every system core in other words the system core policy or Model includes not only the",
    "start": "2269160",
    "end": "2275680"
  },
  {
    "text": "order and sight of the system cord but also the arguments that they can they are allowed to use then you would",
    "start": "2275680",
    "end": "2281960"
  },
  {
    "text": "tighten up the window of vulnerability that attackers can exploit so even though the attacker can can emulate the",
    "start": "2281960",
    "end": "2289079"
  },
  {
    "text": "exact sequence of system core if in the end he cannot specify arbitrary system argument that's still not too bad right",
    "start": "2289079",
    "end": "2295359"
  },
  {
    "text": "so that's one way to to uh uh to counter this uh mimicry",
    "start": "2295359",
    "end": "2301040"
  },
  {
    "text": "attackers the second thing you can do is that you can make sure that the mimicry attacker cannot get the control back",
    "start": "2301040",
    "end": "2307599"
  },
  {
    "text": "back so think about it how does the mimicry attacker get the control back presumably he actually insert some piece",
    "start": "2307599",
    "end": "2313720"
  },
  {
    "text": "of cod to the stack or somewhere or in the hip somewhere and then every time he makees the system call then you will set",
    "start": "2313720",
    "end": "2320319"
  },
  {
    "text": "up a stack such that when a system call is done the control comes back to its place so that means that the return",
    "start": "2320319",
    "end": "2326599"
  },
  {
    "text": "address must going back to the place where he inserted the code right so this either in the stack or in the hip most",
    "start": "2326599",
    "end": "2333240"
  },
  {
    "text": "likely so if we can actually check every system call when it's done whether the",
    "start": "2333240",
    "end": "2338880"
  },
  {
    "text": "return address of this system call actually go to the stack or go to the hip then we know this is this looks",
    "start": "2338880",
    "end": "2344800"
  },
  {
    "text": "suspicious right usually is from the Cod segment how come you know the return address is actually going back to the",
    "start": "2344800",
    "end": "2350000"
  },
  {
    "text": "stack or going back to the Hep and the third third countermeasure",
    "start": "2350000",
    "end": "2355160"
  },
  {
    "text": "that we should do is to minimize the ambiguities in the system core model now this is a little bit dition here that",
    "start": "2355160",
    "end": "2362800"
  },
  {
    "text": "the the kind of system core model that paid can construct is in technical terms",
    "start": "2362800",
    "end": "2368760"
  },
  {
    "text": "nondeterministic finite State machine it's not a deterministic one that means that there are still some ambiguities in",
    "start": "2368760",
    "end": "2375640"
  },
  {
    "text": "the in the in the system call control program so in this example for example",
    "start": "2375640",
    "end": "2380800"
  },
  {
    "text": "in this if a program contain this if then so if a is greater than one then do",
    "start": "2380800",
    "end": "2386319"
  },
  {
    "text": "open as it it does open and right for example now so as you can see that at",
    "start": "2386319",
    "end": "2391880"
  },
  {
    "text": "the wrong time if I see a open I don't really know which arm of this conditional branch in instruction the",
    "start": "2391880",
    "end": "2398200"
  },
  {
    "text": "program is taken when I see open right I may be I may be able to to see when I",
    "start": "2398200",
    "end": "2404440"
  },
  {
    "text": "see right when I see right maybe I can tell that you know it's actually the L's arm not the Zen arm of this conditional",
    "start": "2404440",
    "end": "2411280"
  },
  {
    "text": "Branch right and then there are some other uh cases in which that make the system core control flow graphs sort of",
    "start": "2411280",
    "end": "2418160"
  },
  {
    "text": "ambiguous so for example if you have a a function that get call from multiple places and and that function actually",
    "start": "2418160",
    "end": "2425160"
  },
  {
    "text": "make the system call then when you see that that system call you don't really know from which call site that this",
    "start": "2425160",
    "end": "2431040"
  },
  {
    "text": "particular function is invoked and so on so when you return you don't know which one to go so I can give you example why",
    "start": "2431040",
    "end": "2437880"
  },
  {
    "text": "this is a problem so in this particular case I have uh two functions in this",
    "start": "2437880",
    "end": "2443000"
  },
  {
    "text": "program men and men men and food right so um is another",
    "start": "2443000",
    "end": "2453200"
  },
  {
    "text": "example I want yeah this is the example I want so man and F in this case so the",
    "start": "2453200",
    "end": "2459280"
  },
  {
    "text": "the main function actually makes two calls to the function f and f in itself actually makes two more system Code",
    "start": "2459280",
    "end": "2465800"
  },
  {
    "text": "system F and this these system CES are identical right so you can see that you",
    "start": "2465800",
    "end": "2471640"
  },
  {
    "text": "know I if I follow the usual thing I can take the red uh when I make the First",
    "start": "2471640",
    "end": "2476839"
  },
  {
    "text": "full function call I go to the full function and then come back so after that the the next legitimate system call",
    "start": "2476839",
    "end": "2483599"
  },
  {
    "text": "is actually CIS full right so if I take this hope this is not problem so you I",
    "start": "2483599",
    "end": "2489880"
  },
  {
    "text": "go this and then come back here then the next one I want to call is is another",
    "start": "2489880",
    "end": "2496319"
  },
  {
    "text": "call to the full function so the first system call in full function is system full so that's one possibility now if I",
    "start": "2496319",
    "end": "2503280"
  },
  {
    "text": "making the second uh call to the full function call then the the next system",
    "start": "2503280",
    "end": "2508440"
  },
  {
    "text": "call should be exit right so there's actually a way to distinguish between these two uh full function calls but but",
    "start": "2508440",
    "end": "2516520"
  },
  {
    "text": "there's some amb there what if I can say that you know I can go here and then",
    "start": "2516520",
    "end": "2522160"
  },
  {
    "text": "when I come back I actually text the text the blue one back so I my core path",
    "start": "2522160",
    "end": "2528640"
  },
  {
    "text": "is actually going to the full function through the red one and when I come back through the blue one all right because I",
    "start": "2528640",
    "end": "2535040"
  },
  {
    "text": "this is the only graph that I get so I the graph never actually specifi that there's a there's a red pair and there's",
    "start": "2535040",
    "end": "2540760"
  },
  {
    "text": "a blue pair you just specify that you have this ages right so at the wrong time when I'm checking the system call",
    "start": "2540760",
    "end": "2546760"
  },
  {
    "text": "pattern against this graph I don't know there's actually a red pair and there's a the blue pair so all the possibility",
    "start": "2546760",
    "end": "2553160"
  },
  {
    "text": "is allowed so after the the the the last instruction of F I can actually go back",
    "start": "2553160",
    "end": "2558400"
  },
  {
    "text": "to this return F or can go back to another return F right and that's where the ambiguities come in and that's why I",
    "start": "2558400",
    "end": "2564760"
  },
  {
    "text": "say that the the system core control flow graph that the pay construct is ambiguous right so so this is one one",
    "start": "2564760",
    "end": "2572760"
  },
  {
    "text": "possibility that attackers would actually try to use that attacker would actually try to exploit this ambiguity",
    "start": "2572760",
    "end": "2578839"
  },
  {
    "text": "so that it can sneak in some system callede pattern that is not allowed in the original program but because when",
    "start": "2578839",
    "end": "2586119"
  },
  {
    "text": "pay bill it system core control graph there is some ambiguity that it actually allows it at the wrong time and the",
    "start": "2586119",
    "end": "2591880"
  },
  {
    "text": "technical uh term for this kind of system call pack uh pattern is called impossible path The Impossible path in",
    "start": "2591880",
    "end": "2598920"
  },
  {
    "text": "the original program but because the way that we build our system call control flow graph we actually allow it at the",
    "start": "2598920",
    "end": "2604839"
  },
  {
    "text": "wrong time okay so we actually have to tighten that loop hole as well so so the the the technical problem",
    "start": "2604839",
    "end": "2612880"
  },
  {
    "text": "is really about how do we convert a an NFA into a DFA so without you know",
    "start": "2612880",
    "end": "2618640"
  },
  {
    "text": "boring you with all the details what we basically do is this the following two things we use the graph in lining to",
    "start": "2618640",
    "end": "2624800"
  },
  {
    "text": "disambiguate the return address for function with multiple core sites and uh every you know recursive call chain is",
    "start": "2624800",
    "end": "2631680"
  },
  {
    "text": "in line and turn into a self recursive core and then another way another step that we need to do is we do system call",
    "start": "2631680",
    "end": "2638200"
  },
  {
    "text": "uh stop in lineing so that we can disambiguate the two system call that are identical and that are two arms of a",
    "start": "2638200",
    "end": "2643240"
  },
  {
    "text": "conditional Branch so in that particular example what I'm showing you is that you know if I have two if I have a",
    "start": "2643240",
    "end": "2649160"
  },
  {
    "text": "conditional branch and in both arm I make the open core now if I can in line This open call then I know I know which",
    "start": "2649160",
    "end": "2656440"
  },
  {
    "text": "one we are talking about because by looking at the address of this open call I know that which one uh is is the one",
    "start": "2656440",
    "end": "2663000"
  },
  {
    "text": "that the program actually takes so that's where system call stop in lining can help you but this is relatively",
    "start": "2663000",
    "end": "2668880"
  },
  {
    "text": "expensive operation because as you can imagine that every system call instance now I have to inline it so that I can",
    "start": "2668880",
    "end": "2675480"
  },
  {
    "text": "disambiguate the potential ambiguities there right so okay I'm going to skip this so",
    "start": "2675480",
    "end": "2684520"
  },
  {
    "text": "in the end in the end what what exactly does paid provide like given all this",
    "start": "2684520",
    "end": "2689559"
  },
  {
    "text": "sort of theoretical stuff about what we should uh worry about when we build a",
    "start": "2689559",
    "end": "2694920"
  },
  {
    "text": "PID like system what kind of check checks that the paid actually provides it actually checks The Ordering of the",
    "start": "2694920",
    "end": "2701160"
  },
  {
    "text": "system call okay you know open you know exact and then you know do some set attribute this and that and you also",
    "start": "2701160",
    "end": "2707640"
  },
  {
    "text": "check the site of every system C so even though a program makes multiple CES to",
    "start": "2707640",
    "end": "2712680"
  },
  {
    "text": "the same system call we can distinguish them okay this is part of this system call stuff in lineing and then we we try",
    "start": "2712680",
    "end": "2720079"
  },
  {
    "text": "to defeat the the mimicry attack if you remember mimicry attackers actually try",
    "start": "2720079",
    "end": "2725559"
  },
  {
    "text": "to mimic the the legitimate sequence of the system call and this legitimate system call sequence is derived from the",
    "start": "2725559",
    "end": "2732440"
  },
  {
    "text": "program just like what we do right so they apply Out tool to derive the legitimate sequence and then use it to",
    "start": "2732440",
    "end": "2738160"
  },
  {
    "text": "emulate the legitimate system call sequence until the system cuse of interest to to them so in order to",
    "start": "2738160",
    "end": "2744800"
  },
  {
    "text": "defeat this what we are trying to do is that we actually insert this random notified system call at a load time so",
    "start": "2744800",
    "end": "2750960"
  },
  {
    "text": "when I start a program I actually randomly insert some system call which is not in the original uh source code so",
    "start": "2750960",
    "end": "2758599"
  },
  {
    "text": "that means at the wrong time my system legitimate system code policy is actually different from one instance to",
    "start": "2758599",
    "end": "2765000"
  },
  {
    "text": "the next so I start Apache this time my system core policy is slightly different because I'm randomly inserting this",
    "start": "2765000",
    "end": "2771200"
  },
  {
    "text": "notify all right so that's what we do and then we also check St return address check that that's what we what I just",
    "start": "2771200",
    "end": "2777760"
  },
  {
    "text": "talked about like every time I have a system call going into the kernel before I return I check whether the return",
    "start": "2777760",
    "end": "2783240"
  },
  {
    "text": "address go to the SE Co segment or not this is to prevent the mimicry attackers from grabbing the control back whenever",
    "start": "2783240",
    "end": "2790319"
  },
  {
    "text": "they fake a system call and all this checking is performed in the kernel and so on so in the end is",
    "start": "2790319",
    "end": "2797200"
  },
  {
    "text": "actually sort of relatively efficient so um so let me give you some",
    "start": "2797200",
    "end": "2803440"
  },
  {
    "text": "examples of why you know checking performing all these checks are necessary if you just check the ordering",
    "start": "2803440",
    "end": "2808760"
  },
  {
    "text": "like you do you know set u ID read open uh statistics and write then the the",
    "start": "2808760",
    "end": "2815119"
  },
  {
    "text": "attackers can just emulate this sequence right without checking as side so it's very easy to uh to defeat this kind of",
    "start": "2815119",
    "end": "2820839"
  },
  {
    "text": "system called ordering check only so the guy can actually just do",
    "start": "2820839",
    "end": "2827800"
  },
  {
    "text": "that once he hijacks the control of the application he just issue that this system CA uh according to the order uh",
    "start": "2827800",
    "end": "2835440"
  },
  {
    "text": "as derived from the system core policy now if you do ordering and side check then the attacker would actually and",
    "start": "2835440",
    "end": "2842880"
  },
  {
    "text": "again gets the control and he has to actually issue the the set u ID and then",
    "start": "2842880",
    "end": "2849400"
  },
  {
    "text": "come and then issue this in place so that all this system call have to made",
    "start": "2849400",
    "end": "2856280"
  },
  {
    "text": "in the same place as these system calls happens in the original program because we are checking not only the order but",
    "start": "2856280",
    "end": "2862440"
  },
  {
    "text": "also the site so the attacker if the attacker really wants to issue this system call he has to make sure the",
    "start": "2862440",
    "end": "2868400"
  },
  {
    "text": "system call is made at the place that they are supposed to be and that means that they the attacker has to be able to",
    "start": "2868400",
    "end": "2874040"
  },
  {
    "text": "grab the control back and in order to do that they have to set up step so that makes it his job slightly more difficult",
    "start": "2874040",
    "end": "2880480"
  },
  {
    "text": "so that's what side check gives you now if you can do ordering site and stack",
    "start": "2880480",
    "end": "2886119"
  },
  {
    "text": "check that means that we want to prevent attackers from grab the control back then",
    "start": "2886119",
    "end": "2892240"
  },
  {
    "text": "uh he can do something like this and then send it send it to do set uid and",
    "start": "2892240",
    "end": "2898040"
  },
  {
    "text": "then the control will actually come back to the to the original flow the control will not go back to the to the attacker",
    "start": "2898040",
    "end": "2905079"
  },
  {
    "text": "because we are doing stack check the return address has to go to the segment Co segment as opposed to go to the stack",
    "start": "2905079",
    "end": "2910520"
  },
  {
    "text": "or hip now there's still some problem even with st check if if the guy really",
    "start": "2910520",
    "end": "2916760"
  },
  {
    "text": "doesn't need to make a couple of system call for example if the guy comes in and",
    "start": "2916760",
    "end": "2922000"
  },
  {
    "text": "compromise a program and then the next system call is exactly what he needs to",
    "start": "2922000",
    "end": "2927040"
  },
  {
    "text": "to damage the underly system then he doesn't need to grab the control back and that's the only weakness in this",
    "start": "2927040",
    "end": "2932160"
  },
  {
    "text": "case so the same deer I get the control and I I can uh fake make a system call",
    "start": "2932160",
    "end": "2937559"
  },
  {
    "text": "to exact and even though the control uh doesn't come back to the attacker it's okay because he doesn't care he just",
    "start": "2937559",
    "end": "2943119"
  },
  {
    "text": "knee one shot and if it it's good enough then that's good enough right so I'm saying that even with ordering site and",
    "start": "2943119",
    "end": "2950200"
  },
  {
    "text": "stack check there's still some window or vulnerability then attacker can try to do that's what I'm",
    "start": "2950200",
    "end": "2956599"
  },
  {
    "text": "saying and in order to do this we can we can further do this random insertion of notify call right the mimicry attackers",
    "start": "2956599",
    "end": "2964200"
  },
  {
    "text": "try to be a good citizen by emulating the the legitimate system call sequence but if at a low time I actually get to",
    "start": "2964200",
    "end": "2970760"
  },
  {
    "text": "change the system call policy slightly then he's not able to to guess necessarily and that's what this random",
    "start": "2970760",
    "end": "2977160"
  },
  {
    "text": "insertion of notified system call is trying to do so buffer overflow tried to do",
    "start": "2977160",
    "end": "2983079"
  },
  {
    "text": "something and he he actually forget about this particular notify call because this one is what I inserted at",
    "start": "2983079",
    "end": "2989319"
  },
  {
    "text": "the wrong time so at the wrong time when I check that how come this guy is actually skipping a notifi call then we",
    "start": "2989319",
    "end": "2995799"
  },
  {
    "text": "know this is not our guid and that's that's how we uh uh detect um these mimicry",
    "start": "2995799",
    "end": "3001760"
  },
  {
    "text": "attackers okay so I'm going to skip this one the ne the last item I want to talk",
    "start": "3001760",
    "end": "3007119"
  },
  {
    "text": "a little bit about is the system core argument check basically what we are trying to do is to check the system core",
    "start": "3007119",
    "end": "3012920"
  },
  {
    "text": "argument as I say that at the end of the day you really want to check the system core argument as well as the ordering",
    "start": "3012920",
    "end": "3019200"
  },
  {
    "text": "the site and stack so basically what we do is very simple we go through the the same program and derive the using data",
    "start": "3019200",
    "end": "3025880"
  },
  {
    "text": "flow analysis and classify the system core arguments into three category either things that you can determine",
    "start": "3025880",
    "end": "3031720"
  },
  {
    "text": "statically static constant or things that you cannot determine statically but you know their value remain the same",
    "start": "3031720",
    "end": "3038920"
  },
  {
    "text": "things like you get it from environment variable you get it from configuration file those things the the values of the",
    "start": "3038920",
    "end": "3045880"
  },
  {
    "text": "system core arguments never change during the lifetime of the program but you cannot uh figure them out statically",
    "start": "3045880",
    "end": "3052000"
  },
  {
    "text": "because you can only run them and only then you know so this is So-Cal Dynamic constant and then everything else",
    "start": "3052000",
    "end": "3057400"
  },
  {
    "text": "Dynamic variable so we actually go through such a process and it turns out that more than 50% of the system core",
    "start": "3057400",
    "end": "3063920"
  },
  {
    "text": "arguments belong to either static constant or dynamic constant you can actually you know figure out their value",
    "start": "3063920",
    "end": "3069880"
  },
  {
    "text": "um once the program is initialized and but still a substantial percentage of them are Dynamic",
    "start": "3069880",
    "end": "3076480"
  },
  {
    "text": "variables so what can we do with Dynamic variables the only thing we can think of is that we can maybe derive some partial",
    "start": "3076480",
    "end": "3082640"
  },
  {
    "text": "constraint like you know apachi you would say that this is my root directory and every time user gives you some URL",
    "start": "3082640",
    "end": "3088559"
  },
  {
    "text": "or request that you concatenate the tool and that forms the object right so we can say that that that particular object",
    "start": "3088559",
    "end": "3095119"
  },
  {
    "text": "name is a system core argument and at least we know there's some partial constraints of the system core argument",
    "start": "3095119",
    "end": "3101520"
  },
  {
    "text": "or you can try to insert notifi system core so to enforce the application to go",
    "start": "3101520",
    "end": "3107400"
  },
  {
    "text": "through some system core argument computation process all right that's another approach that we are taking so",
    "start": "3107400",
    "end": "3114000"
  },
  {
    "text": "as I say at the end of the day our system has very close to zero Force",
    "start": "3114000",
    "end": "3119960"
  },
  {
    "text": "negatives so what is the window of vulnerability for our system the the one",
    "start": "3119960",
    "end": "3125760"
  },
  {
    "text": "possibility is that the guy comes in compromise the application and the next",
    "start": "3125760",
    "end": "3130799"
  },
  {
    "text": "system call in the legitimate system core policy is exactly what he needs and",
    "start": "3130799",
    "end": "3136079"
  },
  {
    "text": "the system core argument of that system core is a dynamic variable that's why we cannot check under the condition he can",
    "start": "3136079",
    "end": "3142640"
  },
  {
    "text": "attack the application that's one way the other way is sort of the more more subtle one that the the guy comes in",
    "start": "3142640",
    "end": "3148359"
  },
  {
    "text": "compromise the application instead of mounting sort of uh uh inserting the malicious code he just perform some",
    "start": "3148359",
    "end": "3155119"
  },
  {
    "text": "called of arguments modification so that the system call argument would actually modify in a way that he likes then",
    "start": "3155119",
    "end": "3161920"
  },
  {
    "text": "that's also something that we cannot do in both cases this kind of attacks are very rare that we cannot find anything",
    "start": "3161920",
    "end": "3168760"
  },
  {
    "text": "like that in the field at this point so we have a prototype implementation just give you a",
    "start": "3168760",
    "end": "3174920"
  },
  {
    "text": "throughput overhead so basically we compile a program right and derive it static uh uh it system called policy and",
    "start": "3174920",
    "end": "3182559"
  },
  {
    "text": "model and at the wrong time we will check the the wrong time system call pattern with this policy and then we we",
    "start": "3182559",
    "end": "3189760"
  },
  {
    "text": "we try to check U both the ordering the site and stack versus we will add some random notify so these four columns give",
    "start": "3189760",
    "end": "3197880"
  },
  {
    "text": "you like the generic paid and this give you doing paid plus stack address check",
    "start": "3197880",
    "end": "3203000"
  },
  {
    "text": "to make sure that the attacker cannot get a control back and the third column is with a random in insertion of notify",
    "start": "3203000",
    "end": "3210119"
  },
  {
    "text": "and the fourth colum column is uh everything all right so as you can see that still this is not too bad the",
    "start": "3210119",
    "end": "3215520"
  },
  {
    "text": "performance overhead is okay but this is really nothing um um nothing that",
    "start": "3215520",
    "end": "3221799"
  },
  {
    "text": "exciting that's almost what everybody is getting if you do horse based intrusion detection you'll get something like this",
    "start": "3221799",
    "end": "3228160"
  },
  {
    "text": "the the big deal of our system is that we can derive the the system call policy automatically and accurately",
    "start": "3228160",
    "end": "3234640"
  },
  {
    "text": "right so conclusion pay is perhaps arguably the most",
    "start": "3234640",
    "end": "3240079"
  },
  {
    "text": "efficient and comprehensive and accurate horse based intrustion detection and prevention system it can automatically",
    "start": "3240079",
    "end": "3246240"
  },
  {
    "text": "generat per application system call policy and system core policy is in the form of deterministic finite State",
    "start": "3246240",
    "end": "3252119"
  },
  {
    "text": "machine so that we can eliminate potential ambiguities to eliminate So-Cal impossible paths and it also",
    "start": "3252119",
    "end": "3258400"
  },
  {
    "text": "performs one of the first sort of uh extensive system core argument check and",
    "start": "3258400",
    "end": "3264280"
  },
  {
    "text": "you can handle function pointer as synchron transfer control it guarantees no Force positive because if there's a",
    "start": "3264280",
    "end": "3270720"
  },
  {
    "text": "deviation there is an attack it's just that it has a very small window of vulnerability that attacker can sneak",
    "start": "3270720",
    "end": "3276720"
  },
  {
    "text": "through so it has very close to zero uh Force negative it's not zero uh and you",
    "start": "3276720",
    "end": "3282640"
  },
  {
    "text": "can Brock most of the mimicry attacks so what we are trying to do is M Le to",
    "start": "3282640",
    "end": "3287920"
  },
  {
    "text": "derive a binary paid versions for Windows platform and we want to further reduce the latency and throughput",
    "start": "3287920",
    "end": "3293839"
  },
  {
    "text": "overhead and most of all we want to perform better job uh at analyzing the system call argument so that we can uh",
    "start": "3293839",
    "end": "3300880"
  },
  {
    "text": "hand cover most of the So-Cal Dynamic variable category of system core",
    "start": "3300880",
    "end": "3306839"
  },
  {
    "text": "arguments so um if you want more information you can go to this particular website um we we also have a",
    "start": "3306839",
    "end": "3313520"
  },
  {
    "text": "prototype system so if you guys are interested in trying we'll be happy to send you a copy right so if you have any",
    "start": "3313520",
    "end": "3318640"
  },
  {
    "text": "questions I'll be happy to entertain them",
    "start": "3318640",
    "end": "3323200"
  },
  {
    "text": "yes so the only thing attacker can get is our tool so he can figure out that statically what our tool will try to do",
    "start": "3339400",
    "end": "3346440"
  },
  {
    "text": "so the only thing we can do there is to do this low time sort of notify system call insertion so low time means that",
    "start": "3346440",
    "end": "3353160"
  },
  {
    "text": "when you start a program I'm going to insert some random system call to twist the system core policy a little bit and",
    "start": "3353160",
    "end": "3359039"
  },
  {
    "text": "this is random so even though the attacker has a complete source code of our tool he's not he's not able to",
    "start": "3359039",
    "end": "3364680"
  },
  {
    "text": "figure this part",
    "start": "3364680",
    "end": "3367400"
  },
  {
    "text": "out okay so thank [Applause]",
    "start": "3370440",
    "end": "3380929"
  },
  {
    "text": "you",
    "start": "3385240",
    "end": "3388240"
  },
  {
    "text": "e",
    "start": "3415240",
    "end": "3418240"
  },
  {
    "text": "e",
    "start": "3445160",
    "end": "3448160"
  },
  {
    "text": "e",
    "start": "3475119",
    "end": "3478119"
  },
  {
    "text": "e",
    "start": "3505119",
    "end": "3508119"
  },
  {
    "text": "e",
    "start": "3535039",
    "end": "3538039"
  },
  {
    "text": "e e",
    "start": "3565039",
    "end": "3569079"
  }
]