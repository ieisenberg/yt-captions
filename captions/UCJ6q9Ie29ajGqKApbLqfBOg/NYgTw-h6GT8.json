[
  {
    "start": "0",
    "end": "90000"
  },
  {
    "text": "[Music]",
    "start": "1180",
    "end": "14730"
  },
  {
    "text": "welcome to pre-built job chains with the job rocket bypassing depth without rob",
    "start": "16640",
    "end": "25279"
  },
  {
    "text": "hi i'm dr bremel brisendine and i'm the director of the verona lab i'm also the",
    "start": "25599",
    "end": "31439"
  },
  {
    "text": "creator of the job rocket i dabble in being an assistant professor of computer and cyber sciences at dakota",
    "start": "31439",
    "end": "38399"
  },
  {
    "text": "state university my interests include software exploitation reverse engineering",
    "start": "38399",
    "end": "44480"
  },
  {
    "text": "code reuse attacks malware analysis and just generally offensive security i'm",
    "start": "44480",
    "end": "49760"
  },
  {
    "text": "joined by my co-speaker austin babcock who is a graduate student at dakota",
    "start": "49760",
    "end": "55120"
  },
  {
    "text": "state university where he studies cyber operations and computer science austin",
    "start": "55120",
    "end": "60559"
  },
  {
    "text": "is a security researcher in verona lab at dakota state where he works with me",
    "start": "60559",
    "end": "66560"
  },
  {
    "text": "to develop a new shell code analysis framework funded by an nsa grant",
    "start": "66560",
    "end": "73119"
  },
  {
    "text": "he is a contributor to the job rocket and so skilled is he a jump or into programming you",
    "start": "73119",
    "end": "79119"
  },
  {
    "text": "could call him a job whisperer his interest includes software exploitation",
    "start": "79119",
    "end": "84320"
  },
  {
    "text": "fuzzing hey he built his own fuzzer reverse engineering and bug bounties",
    "start": "84320",
    "end": "90960"
  },
  {
    "start": "90000",
    "end": "184000"
  },
  {
    "text": "so what are we going to talk about today well we'll provide a background into jump oriented programming we'll",
    "start": "90960",
    "end": "97119"
  },
  {
    "text": "introduce the job rocket we'll have a manual approach to jump oriented programming",
    "start": "97119",
    "end": "103439"
  },
  {
    "text": "automated job change generation and we'll provide demos for both of those",
    "start": "103439",
    "end": "110479"
  },
  {
    "text": "we'll touch on advanced topics like switching registers for dispatcher gadgets and functional gadgets control",
    "start": "110479",
    "end": "117040"
  },
  {
    "text": "flow guard aslr and job and using job as another form of rob",
    "start": "117040",
    "end": "122799"
  },
  {
    "text": "so let's dig into that background did we create jump oriented programming",
    "start": "122799",
    "end": "128319"
  },
  {
    "text": "hmm let me think no actually we didn't it's been around for about a decade but the academic",
    "start": "128319",
    "end": "134400"
  },
  {
    "text": "literature is very very sparse minimal some serious limitations for one there's",
    "start": "134400",
    "end": "141280"
  },
  {
    "text": "no real dedicated tool to facilitate job gadget discovery before the job rocket",
    "start": "141280",
    "end": "148000"
  },
  {
    "text": "and more to the point no actual documentation on how to actually do job in a real world windows environment more",
    "start": "148000",
    "end": "156000"
  },
  {
    "text": "questions than answers which we resolved so lots of minute details that we had to",
    "start": "156000",
    "end": "162239"
  },
  {
    "text": "figure out for this to even work we introduced the job rocket at defcon",
    "start": "162239",
    "end": "169280"
  },
  {
    "text": "27 but now at black hat asia we introduce a refinement a novel technique",
    "start": "169280",
    "end": "175599"
  },
  {
    "text": "to build a complete job chain to bypass depth purely through automation",
    "start": "175599",
    "end": "184200"
  },
  {
    "start": "184000",
    "end": "303000"
  },
  {
    "text": "so control flow with job no returns",
    "start": "184560",
    "end": "189599"
  },
  {
    "text": "no stack we don't use them for control flow instead we're going to use the jump and call instructions",
    "start": "189599",
    "end": "196000"
  },
  {
    "text": "still we will also use the the stack but only for for when api calls",
    "start": "196000",
    "end": "201519"
  },
  {
    "text": "pure job will use a dispatcher gadget and dispatch table as the means to direct",
    "start": "201519",
    "end": "206640"
  },
  {
    "text": "control flow another style is the bring your own pop jump which is effectively",
    "start": "206640",
    "end": "212080"
  },
  {
    "text": "rob without the rats and we'll talk about that later on so let's see job control flow on action",
    "start": "212080",
    "end": "218799"
  },
  {
    "text": "we have a dispatcher and that will take us to a dispatch table which contains",
    "start": "218799",
    "end": "223840"
  },
  {
    "text": "addresses for functional gadgets and those go back to the dispatcher okay so",
    "start": "223840",
    "end": "228879"
  },
  {
    "text": "dispatcher goes to an address he dereferences it does the move ebx and then right on back",
    "start": "228879",
    "end": "234799"
  },
  {
    "text": "to the dispatcher we advance forward four to our next address dereference do that and then back to the dispatcher",
    "start": "234799",
    "end": "242640"
  },
  {
    "text": "and then this just simply repeats for however many gadgets that we have",
    "start": "242640",
    "end": "248480"
  },
  {
    "text": "so the key elements here for jump oriented programming our dispatch table",
    "start": "248480",
    "end": "253519"
  },
  {
    "text": "this contains the entries for all of our functional gadgets all of their addresses",
    "start": "253519",
    "end": "259040"
  },
  {
    "text": "typically we'll put this on the heap although we can also do the data section or the stack and we'll separate these",
    "start": "259040",
    "end": "266000"
  },
  {
    "text": "with uniform padding the dispatcher gadget allows us to move in a predictable fashion forwards backwards",
    "start": "266000",
    "end": "274320"
  },
  {
    "text": "however you want to do it as long as it's predictable functional gadgets we can think of these",
    "start": "274320",
    "end": "280080"
  },
  {
    "text": "as more similar to our traditional rob gadgets except they're going to terminate in a jump or a call yeah we",
    "start": "280080",
    "end": "286880"
  },
  {
    "text": "can do calls on over to the register that takes us back to the dispatcher gadget",
    "start": "286880",
    "end": "293040"
  },
  {
    "text": "and then windows apis of course we'll use these to do things like bypass dep",
    "start": "293040",
    "end": "298960"
  },
  {
    "text": "and with that we'll let austin talk next so we'll take another look at",
    "start": "298960",
    "end": "304320"
  },
  {
    "start": "303000",
    "end": "420000"
  },
  {
    "text": "our job control flow here we have a diagram similar to before however maybe a little bit more in depth",
    "start": "304320",
    "end": "309840"
  },
  {
    "text": "we have our dispatcher gadget on the left we have our dispatch table in the middle and we have our functional gadgets on the right so our dispatcher",
    "start": "309840",
    "end": "316560"
  },
  {
    "text": "gadget is using edi to store the address of our dispatch table that jump d reference edi is going to bring us to a",
    "start": "316560",
    "end": "323360"
  },
  {
    "text": "functional gadget based on what is in our dispatch table so our functional gadget will end in a",
    "start": "323360",
    "end": "328960"
  },
  {
    "text": "jump edx in this example because edx is holding the address of our dispatcher gadget once we return back around to our",
    "start": "328960",
    "end": "335520"
  },
  {
    "text": "dispatcher gadget our get that will increment our edi register our dispatch",
    "start": "335520",
    "end": "340960"
  },
  {
    "text": "tables pointer and bring us to the next functional gadget in the list so that's how our control flow for job works we",
    "start": "340960",
    "end": "347680"
  },
  {
    "text": "keep on going around in this loop and you might notice that esp is not a part of this control flow at all so um this",
    "start": "347680",
    "end": "354320"
  },
  {
    "text": "is a bit different from wrap or entire control flow is based on the stack so we're supplying all of our pointers in a",
    "start": "354320",
    "end": "359840"
  },
  {
    "text": "row on the stack with rop and then that return at the end of each gadget is kind of the glue tying them all together",
    "start": "359840",
    "end": "367360"
  },
  {
    "text": "with drop on the other hand on the stack still does play a role however it looks different because our",
    "start": "367360",
    "end": "373440"
  },
  {
    "text": "control flow isn't tied to the stack at all so with drop we still",
    "start": "373440",
    "end": "378800"
  },
  {
    "text": "can pop values we still can't push values and we're still using the stack to construct our function parameters",
    "start": "378800",
    "end": "384880"
  },
  {
    "text": "however that process just looks a little bit different so with drop here we can still pop values",
    "start": "384880",
    "end": "390639"
  },
  {
    "text": "pop another value and push a value our end goal job is to execute shellcode",
    "start": "390639",
    "end": "396319"
  },
  {
    "text": "of course and we're going to need to deal with depth in order to do that so in order to defeat data execution",
    "start": "396319",
    "end": "402560"
  },
  {
    "text": "prevention we will use something like virtual protect in order to grant permissions to execute shellcode and",
    "start": "402560",
    "end": "409039"
  },
  {
    "text": "then job's role is setting up our parameters and calling that function to do so",
    "start": "409039",
    "end": "414400"
  },
  {
    "text": "at this point i'm going to press pass the presentation on over to bramwell to introduce the drop rocket",
    "start": "414400",
    "end": "420960"
  },
  {
    "start": "420000",
    "end": "620000"
  },
  {
    "text": "thank you austin jop rocket jump oriented programming",
    "start": "420960",
    "end": "426000"
  },
  {
    "text": "reversing open cyber knowledge expert tool yes",
    "start": "426000",
    "end": "431039"
  },
  {
    "text": "just by using the job rocket we are experts and we dedicate this to the memory of rocket cats who made the",
    "start": "431039",
    "end": "438880"
  },
  {
    "text": "ultimate sacrifice we see throughout this presentation various images of cats",
    "start": "438880",
    "end": "447280"
  },
  {
    "text": "with a flammable device strapped to their back and their hell bent and setting a castle on fire",
    "start": "447280",
    "end": "454639"
  },
  {
    "text": "where this comes from is illuminated manuscripts from the 1300s",
    "start": "454639",
    "end": "460080"
  },
  {
    "text": "that show these rocket cats trying to subvert the defenses of an otherwise very well defended",
    "start": "460080",
    "end": "467120"
  },
  {
    "text": "castle with job rocket we want to do the same thing we want to subvert",
    "start": "467120",
    "end": "473599"
  },
  {
    "text": "we want to provide a side door to rap heuristics a side door",
    "start": "473599",
    "end": "479759"
  },
  {
    "text": "to when rob fails or when we just don't want to do rob so where did this come from well it grew",
    "start": "479759",
    "end": "486800"
  },
  {
    "text": "out of my doctoral dissertation research that i conducted culminating in a",
    "start": "486800",
    "end": "493440"
  },
  {
    "text": "rather large python program about 30 000 lines with",
    "start": "493440",
    "end": "498720"
  },
  {
    "text": "various dependencies including capstone pe file etc",
    "start": "498720",
    "end": "503840"
  },
  {
    "text": "and so really the job rocket is the first and only fully featured job gadget",
    "start": "503840",
    "end": "509919"
  },
  {
    "text": "discovery tool we're always adding new features the latest and greatest is the ability to",
    "start": "509919",
    "end": "516479"
  },
  {
    "text": "create a pre-built job chain to bypass dep it also empowers you to build your own",
    "start": "516479",
    "end": "524480"
  },
  {
    "text": "job chain purely from scratch now when i started this research i",
    "start": "524480",
    "end": "529680"
  },
  {
    "text": "thought well if i did a dynamic approach if i built something to integrate with",
    "start": "529680",
    "end": "535360"
  },
  {
    "text": "say windebug or immunity that would be very easy for me to do",
    "start": "535360",
    "end": "541440"
  },
  {
    "text": "too easy so i wanted to challenge myself and so i decided let's do static",
    "start": "541440",
    "end": "547440"
  },
  {
    "text": "analysis so it is able to go on there and extract the image executable as well as all the",
    "start": "547440",
    "end": "553040"
  },
  {
    "text": "modules and get those gadgets and when it's getting the gadgets it simultaneously at the same time",
    "start": "553040",
    "end": "560480"
  },
  {
    "text": "is classifying them into categories based on operation performed",
    "start": "560480",
    "end": "566160"
  },
  {
    "text": "based on register affected and literally there's hundreds of data structures used to store this",
    "start": "566160",
    "end": "572399"
  },
  {
    "text": "information now we've mentioned the pre-built job chains we'll get to that later",
    "start": "572399",
    "end": "578399"
  },
  {
    "text": "other new features include the ability to filter and exclude on bad characters we don't like those",
    "start": "578399",
    "end": "584959"
  },
  {
    "text": "or on mitigations that we just don't care for now job rocket does provide",
    "start": "584959",
    "end": "592240"
  },
  {
    "text": "significant customization when you're trying to initially form and find these gadgets so you can reduce or enlarge the",
    "start": "592240",
    "end": "599120"
  },
  {
    "text": "scope and like any rop tool that i can imagine it also uses op code splitting which",
    "start": "599120",
    "end": "607040"
  },
  {
    "text": "enables us to find the unintended instructors because you know unintended instructions that",
    "start": "607040",
    "end": "612800"
  },
  {
    "text": "are viable that is one of the great features of x86 intel architecture",
    "start": "612800",
    "end": "619839"
  },
  {
    "start": "620000",
    "end": "728000"
  },
  {
    "text": "so let's look at the job rocket command line interface now the first thing we want to do is pick out the registers",
    "start": "621680",
    "end": "627600"
  },
  {
    "text": "we're interested in so for if our functional gadget ends in jump eax then the rest of them will probably end and",
    "start": "627600",
    "end": "634000"
  },
  {
    "text": "jump eax unless we decide to transition to say jump edx so pick out the",
    "start": "634000",
    "end": "640720"
  },
  {
    "text": "registers registers that you want and then we can type g to extract those",
    "start": "640720",
    "end": "648000"
  },
  {
    "text": "or if we want everything which is probably what i would do just do the big g",
    "start": "648000",
    "end": "653440"
  },
  {
    "text": "and then s we can establish the scope is it the image executable or are we getting all the modules and dlls",
    "start": "653440",
    "end": "661600"
  },
  {
    "text": "and if we want to extract the modules we'll also need to do the m which will do that and also get the mitigations and",
    "start": "661600",
    "end": "668560"
  },
  {
    "text": "then at this point everything has been found it's been classified silk can now",
    "start": "668560",
    "end": "673680"
  },
  {
    "text": "be instantaneously retrieved and to do that we'll go into our print submenu",
    "start": "673680",
    "end": "680079"
  },
  {
    "text": "so first thing we want to do we want to use the r to specify the register of interest",
    "start": "680079",
    "end": "685440"
  },
  {
    "text": "and then next we want to use the g to pick out which operations",
    "start": "685440",
    "end": "691279"
  },
  {
    "text": "we want or if we want all then we can pick all and let's take a look here at some",
    "start": "691279",
    "end": "697200"
  },
  {
    "text": "results okay so creates a directory called wave read and it puts all of the different",
    "start": "697200",
    "end": "702399"
  },
  {
    "text": "files generated and they're saved based on operation and register affected let's",
    "start": "702399",
    "end": "707920"
  },
  {
    "text": "look at one of them okay this is add ebx i have add bh i have",
    "start": "707920",
    "end": "714560"
  },
  {
    "text": "bx i have add i have add with carry i have jump and of course i have call",
    "start": "714560",
    "end": "719760"
  },
  {
    "text": "because remember we can also do call so with that i will pass it to austin",
    "start": "719760",
    "end": "728160"
  },
  {
    "start": "728000",
    "end": "1110000"
  },
  {
    "text": "so we're going to be taking a look at the manual approach of jop here and to demonstrate that we're going to be using",
    "start": "728160",
    "end": "733200"
  },
  {
    "text": "a demo program which is a simple hash cracker and it contains a buffer over full vulnerability so we'll be looking",
    "start": "733200",
    "end": "739040"
  },
  {
    "text": "at examples from that demo program and the exploit built around it in order to see some challenges associated with the",
    "start": "739040",
    "end": "745680"
  },
  {
    "text": "being with the manual approach of job looking at a diagram of our exploit we",
    "start": "745680",
    "end": "751440"
  },
  {
    "text": "have our initial buffer overflow once we gain control of eip we'll set up our registers for job and we will use our",
    "start": "751440",
    "end": "757519"
  },
  {
    "text": "drop chain to get our parameters sorted out for virtual protect virtual protect will be de-referenced the pointer will",
    "start": "757519",
    "end": "763680"
  },
  {
    "text": "be dereferenced and we will call that function in order to overcome depth and then we will execute our shellcode",
    "start": "763680",
    "end": "769920"
  },
  {
    "text": "looking at our payload we have some padding until we can control eip then we have our job chain which sets up virtual",
    "start": "769920",
    "end": "775839"
  },
  {
    "text": "protect we have our shell code which is a proof of concept message box and then we have some additional padding and our",
    "start": "775839",
    "end": "781920"
  },
  {
    "text": "dispatch table our dispatcher gadget is this one on the left where we have edi reserved for use",
    "start": "781920",
    "end": "789279"
  },
  {
    "text": "of our dispatch table that's the pointer and we have add edi 8. since we have add",
    "start": "789279",
    "end": "795279"
  },
  {
    "text": "edi 8 and each pointer 2 gadgets are only 4 bytes we will need to add 4 bytes of padding in between each pointer",
    "start": "795279",
    "end": "804320"
  },
  {
    "text": "when we gain control vip we want to set up our job control flow that register",
    "start": "804320",
    "end": "809600"
  },
  {
    "text": "for our dispatcher gadget in our dispatch table in an ideal world we can use a job setup",
    "start": "809600",
    "end": "815360"
  },
  {
    "text": "gadget so we are using peer drop here however with a drop we only have access to one gadget to set everything up",
    "start": "815360",
    "end": "821760"
  },
  {
    "text": "because we don't have our control flow setup to use multiple so in a more ideal world we can use a series of wrap",
    "start": "821760",
    "end": "828560"
  },
  {
    "text": "gadgets which do the same thing as the job setup gadget however with rob so",
    "start": "828560",
    "end": "833680"
  },
  {
    "text": "this might be more practical and finding that magic drop gadget is not so easy",
    "start": "833680",
    "end": "838800"
  },
  {
    "text": "with our rob setup gadget we're doing the exact same thing where we're loading an xor key and some encoded",
    "start": "838800",
    "end": "845040"
  },
  {
    "text": "pointers in order to overcome bad bytes and then we're just getting that dispatcher gadget and our dispatch table",
    "start": "845040",
    "end": "850560"
  },
  {
    "text": "pointer set up in our registers for our control flow after that we can return to doing job and just jump to our",
    "start": "850560",
    "end": "856480"
  },
  {
    "text": "dispatcher gadget one thing to note is that even though jop is jump oriented programming we can",
    "start": "856480",
    "end": "863040"
  },
  {
    "text": "use gadgets ending and call the call gadgets are the same thing as a jump gadget they just have an implicit",
    "start": "863040",
    "end": "868959"
  },
  {
    "text": "push of the instruction pointer beforehand so in normal x86 programming that would allow you to return back to",
    "start": "868959",
    "end": "875600"
  },
  {
    "text": "whatever instruction was next after you perform a function call",
    "start": "875600",
    "end": "882079"
  },
  {
    "text": "for our purposes we can still use this call gadget however we do need to make sure that push isn't going to overwrite",
    "start": "882639",
    "end": "888320"
  },
  {
    "text": "anything we need and then afterwards we can just use a pop gadget no no in order to repair esp",
    "start": "888320",
    "end": "894959"
  },
  {
    "text": "we'll be using virtual protect in order to overcome depth",
    "start": "894959",
    "end": "899839"
  },
  {
    "text": "as far as setting up our parameters for virtual protectos many of them do have bad bytes in them so we can't put those",
    "start": "900079",
    "end": "906320"
  },
  {
    "text": "in our payload and we'll need to supply placeholders for these parameters however one parameter lpf old protect",
    "start": "906320",
    "end": "912000"
  },
  {
    "text": "does not have bad bytes so we're fine to supply that in the payload the placeholders will be overwritten by job",
    "start": "912000",
    "end": "917680"
  },
  {
    "text": "later they're just there to keep track of where we are we have two main methods of overriding",
    "start": "917680",
    "end": "924079"
  },
  {
    "text": "placeholders push is one more realistic and more common we will need to work with the stack",
    "start": "924079",
    "end": "929680"
  },
  {
    "text": "however which is a challenge and we only need one register for push for move d repointer we don't have to",
    "start": "929680",
    "end": "936320"
  },
  {
    "text": "work with the stack however we do need two registers reserved one for the address to write to and then one for the",
    "start": "936320",
    "end": "942880"
  },
  {
    "text": "value and registers are in short supply with job because we have two reserved for our control flow already",
    "start": "942880",
    "end": "950079"
  },
  {
    "text": "looking at ex at an example of the push method and we can get our value for our parameter that we want set",
    "start": "950079",
    "end": "956800"
  },
  {
    "text": "up in a register and then we pivot esp four bytes above the location we want to",
    "start": "956800",
    "end": "962480"
  },
  {
    "text": "write to because push is going to overwrite to esp minus four once we perform our push we will do our overrate",
    "start": "962480",
    "end": "969519"
  },
  {
    "text": "um looking at a generalized example here of how to do push for if we wanted to do",
    "start": "969519",
    "end": "975279"
  },
  {
    "text": "push for every single parameter um we can lay out our stack like this where we have parameter 1 2 then three which will",
    "start": "975279",
    "end": "981600"
  },
  {
    "text": "be xored of course to overcome bad bytes and then we have placeholder one two and three directly after with this layout we",
    "start": "981600",
    "end": "988000"
  },
  {
    "text": "can do this method where we pop our first parameter off the stack xor to avoid bad bytes then we pivot esp four",
    "start": "988000",
    "end": "994800"
  },
  {
    "text": "bytes above our placeholder because of that esp minus four where push is going to write to on one way to pivot is via",
    "start": "994800",
    "end": "1002160"
  },
  {
    "text": "pop gadgets which increment esp by four once we once we do our overwrite with",
    "start": "1002160",
    "end": "1008320"
  },
  {
    "text": "push we pivot esp backwards to our parameter 2 value and then we can repeat the process with every parameter",
    "start": "1008320",
    "end": "1016639"
  },
  {
    "text": "the reason that we can use the same offsets for our pivots is because with this layout the distance between each",
    "start": "1017759",
    "end": "1023360"
  },
  {
    "text": "placeholder and each parameter is always the same so here parameter 1 is 0xc away",
    "start": "1023360",
    "end": "1028558"
  },
  {
    "text": "from parameter or placeholder 1 and then placeholder 2 is the same distance from parameter 2 and so on",
    "start": "1028559",
    "end": "1035918"
  },
  {
    "text": "i'm looking at our move dereference method once we get our gadgets or once we get our register set up via our gadgets we",
    "start": "1035919",
    "end": "1042720"
  },
  {
    "text": "will need to have um the first dereference register being the address that we're writing to and then",
    "start": "1042720",
    "end": "1049600"
  },
  {
    "text": "our second register being the value that we're writing so here we have evx set up with the address and we have ecx set up",
    "start": "1049600",
    "end": "1056320"
  },
  {
    "text": "with our value and then once we execute this gadget we will overrate our parameter",
    "start": "1056320",
    "end": "1062320"
  },
  {
    "text": "after setting up all of our parameters we're going to call our api function to overcome depth we will need to pivot esp",
    "start": "1062320",
    "end": "1068559"
  },
  {
    "text": "to the beginning of all of those parameters to make sure we're using the correct values there's multiple ways in order to",
    "start": "1068559",
    "end": "1074880"
  },
  {
    "text": "actually dereference the pointer and make the call once we're ready so um one way is if ebx contains the",
    "start": "1074880",
    "end": "1081120"
  },
  {
    "text": "virtual protect pointer we can do jump d reference evx also you can do move evx",
    "start": "1081120",
    "end": "1087039"
  },
  {
    "text": "dealer pointer ebx and then do a normal jump or we could even dereference in place like before and then jump or push",
    "start": "1087039",
    "end": "1093679"
  },
  {
    "text": "to the stack and then jump to esp which is actually what we will do in our exploit",
    "start": "1093679",
    "end": "1099200"
  },
  {
    "text": "so looking at our demo of this exploit we will look at immunity and see how",
    "start": "1099200",
    "end": "1106000"
  },
  {
    "text": "this all works",
    "start": "1106000",
    "end": "1109480"
  },
  {
    "text": "okay so we're going to start out in our job setup gadget here we have our pops with our ink",
    "start": "1111520",
    "end": "1116880"
  },
  {
    "text": "with our xor keys so we have dispatcher gadget address and edx and our dispatch tables address and edi",
    "start": "1116880",
    "end": "1124240"
  },
  {
    "text": "we will follow that in the dump so we can see our actual dispatch table you might notice that our setup gadget",
    "start": "1124240",
    "end": "1130799"
  },
  {
    "text": "ends in a call so we will need to pop off that implicit push that we were talking about earlier so if you look in",
    "start": "1130799",
    "end": "1136640"
  },
  {
    "text": "the code here we can see that this first pop here is just labeled pop junk because we don't care about that address",
    "start": "1136640",
    "end": "1141760"
  },
  {
    "text": "at all we're just fixing our stack after our call messed it up a little bit",
    "start": "1141760",
    "end": "1146880"
  },
  {
    "text": "so we will do our first pop and then our next pop will be our shell codes address",
    "start": "1146880",
    "end": "1152080"
  },
  {
    "text": "encoded of course which will xor so we can see in the code we've labeled that that value we'll get xor to our shadow",
    "start": "1152080",
    "end": "1159039"
  },
  {
    "text": "code's address and this address will actually be used for two different parameters one of them being the return",
    "start": "1159039",
    "end": "1164080"
  },
  {
    "text": "address and then the next one being the lp address so first we'll pivot esp",
    "start": "1164080",
    "end": "1169919"
  },
  {
    "text": "after we get our xor setup we'll pivot esp to our corresponding placeholder",
    "start": "1169919",
    "end": "1175360"
  },
  {
    "text": "we're actually going to overwrite the return address first even though it's the last placeholder in order",
    "start": "1175360",
    "end": "1181520"
  },
  {
    "text": "because the pivot backwards to the next um the next placeholder that we're going to use the same value for is easier that",
    "start": "1181520",
    "end": "1188080"
  },
  {
    "text": "way so here we'll do our overwrite we can see in the dump we have it highlighted and we can see that we're",
    "start": "1188080",
    "end": "1193120"
  },
  {
    "text": "going to overwrite that 7070 value here corresponding to what's highlighted in the dump in the bottom left once you do",
    "start": "1193120",
    "end": "1199440"
  },
  {
    "text": "our push we will have returned we will have pushed our return address and then now we'll just pivot esp again using the",
    "start": "1199440",
    "end": "1205919"
  },
  {
    "text": "same value we don't need to change the value here because we're using the same thing for our lp address as well",
    "start": "1205919",
    "end": "1212480"
  },
  {
    "text": "so we'll do that overwrite and then following that we'll do two move dereference overwrites so skipping the",
    "start": "1212480",
    "end": "1218320"
  },
  {
    "text": "register setup for the move d reference because there's a lot of xoring",
    "start": "1218320",
    "end": "1223679"
  },
  {
    "text": "we will set up our size parameter to be written with ebx being the address to write to",
    "start": "1223760",
    "end": "1229760"
  },
  {
    "text": "and the ecx being the value so we're writing that 250 value",
    "start": "1229760",
    "end": "1234880"
  },
  {
    "text": "so now we've overwritten dw size and next we have um",
    "start": "1234880",
    "end": "1240240"
  },
  {
    "text": "our new protect setup so lastly we're going to write that new protect",
    "start": "1240240",
    "end": "1246080"
  },
  {
    "text": "value that 40 corresponds to read write execute now we get our virtual protect",
    "start": "1246080",
    "end": "1252880"
  },
  {
    "text": "pointer because we have our parameters set up we de-reference that we're going to push that onto the stack",
    "start": "1252880",
    "end": "1259360"
  },
  {
    "text": "after we push that onto the stack we'll do jump dwarf pointer esp to call the function immunity will show us that we have all",
    "start": "1259360",
    "end": "1265760"
  },
  {
    "text": "of our parameters set up correctly and assuming everything worked correctly our shellcode should run",
    "start": "1265760",
    "end": "1271919"
  },
  {
    "text": "and we can see we did it we got blackhat21 to display our message box our proof of concept and we've",
    "start": "1271919",
    "end": "1277600"
  },
  {
    "text": "successfully performed a job in order to run shellcode at this point i'm going to pass the",
    "start": "1277600",
    "end": "1282960"
  },
  {
    "text": "presentation back on over to bremo thank you austin",
    "start": "1282960",
    "end": "1288320"
  },
  {
    "start": "1286000",
    "end": "1663000"
  },
  {
    "text": "automated generation of job chains let's dig into it",
    "start": "1288320",
    "end": "1294080"
  },
  {
    "text": "so the manual approach that austin described it's kind of weird kind of scary kind of complex a little bit ugly",
    "start": "1294080",
    "end": "1301280"
  },
  {
    "text": "but what if we could simplify job what if we can make it a little bit easier to do",
    "start": "1301280",
    "end": "1307520"
  },
  {
    "text": "dare we attempt such a thing and i say let's just do it and",
    "start": "1307520",
    "end": "1313200"
  },
  {
    "text": "so we've done so and we take inspiration from a tool like mona that can enable us to bypass dep",
    "start": "1313200",
    "end": "1321760"
  },
  {
    "text": "with return oriented programming using apis like virtual protect and virtual",
    "start": "1321760",
    "end": "1327440"
  },
  {
    "text": "alec so the ideal way to set up rop is we will take all of our parameter values",
    "start": "1327440",
    "end": "1333039"
  },
  {
    "text": "for the win api plug it into registers and then push add will push them onto",
    "start": "1333039",
    "end": "1338080"
  },
  {
    "text": "the stack in a very very specific order and then make the win api call",
    "start": "1338080",
    "end": "1343919"
  },
  {
    "text": "with jop there is no magical push at instruction but instead we'll just take all of our",
    "start": "1343919",
    "end": "1350799"
  },
  {
    "text": "parameter values in a very specific order dump them onto the stack and then use a series of multiple stack pivots",
    "start": "1350799",
    "end": "1358320"
  },
  {
    "text": "to reach that location and then de-reference the win api call and from there the rest is history",
    "start": "1358320",
    "end": "1365840"
  },
  {
    "text": "now what job rocket does is it will try to produce distinct job chains for each and every register",
    "start": "1365840",
    "end": "1372960"
  },
  {
    "text": "because remember these registers are very conflicted so we have register always tied up for",
    "start": "1372960",
    "end": "1379440"
  },
  {
    "text": "the dispatch table and also tied up for the dispatcher gadget",
    "start": "1379440",
    "end": "1384559"
  },
  {
    "text": "so if we interfere with those registers it breaks the control flow and at the same time if you have a functional",
    "start": "1384559",
    "end": "1391360"
  },
  {
    "text": "gadget that ends in jump eax well it's probably going to stay in jump eax and",
    "start": "1391360",
    "end": "1396720"
  },
  {
    "text": "not go and end and jump ebx so there are lots of different possibilities in terms",
    "start": "1396720",
    "end": "1402159"
  },
  {
    "text": "of the different job chains we can generate we also produce five variations for each",
    "start": "1402159",
    "end": "1409679"
  },
  {
    "text": "specific register utilizing different stack pivot amounts",
    "start": "1409679",
    "end": "1416159"
  },
  {
    "text": "now the premise behind our stock pivots is imagine that you have a buffer overflow",
    "start": "1416159",
    "end": "1422159"
  },
  {
    "text": "you have an seh override whatever the case and you need to do a pivot",
    "start": "1422159",
    "end": "1427200"
  },
  {
    "text": "of 5000 bytes to reach your your destination your payload",
    "start": "1427200",
    "end": "1432559"
  },
  {
    "text": "i mean you could do that with one gadget if you if you found it but at the same time with job you can also do it with",
    "start": "1432559",
    "end": "1440240"
  },
  {
    "text": "many other different stock pivots that jointly can allow you to reach that",
    "start": "1440240",
    "end": "1446080"
  },
  {
    "text": "destination and then from there we just simply uh make the the win api call",
    "start": "1446080",
    "end": "1451279"
  },
  {
    "text": "so let's look specifically here so we have esi and we add esi and then dereference that",
    "start": "1451279",
    "end": "1456640"
  },
  {
    "text": "takes us to our dispatch table and then over here we have four different stack pivots equaling about",
    "start": "1456640",
    "end": "1462080"
  },
  {
    "text": "5000 we have some our parameter values we have the pointer to virtual protect we plug that in over here with the pop",
    "start": "1462080",
    "end": "1468240"
  },
  {
    "text": "eax we de-reference it and if we precisely calculate it",
    "start": "1468240",
    "end": "1473919"
  },
  {
    "text": "with the right stack pivot amounts at this point in time it's ready everything is ready",
    "start": "1473919",
    "end": "1480880"
  },
  {
    "text": "and it'll work no need for a push ad now specifically how the job rocket",
    "start": "1480880",
    "end": "1487520"
  },
  {
    "text": "generates this is firstly it's going to try to find the dispatcher gadget and then calculate the necessary padding",
    "start": "1487520",
    "end": "1494799"
  },
  {
    "text": "to place between each functional gadget if it doesn't find a dispatcher gadget",
    "start": "1494799",
    "end": "1500240"
  },
  {
    "text": "it'll still produce a chain because you can always enlarge the scope or look for alternative dgs",
    "start": "1500240",
    "end": "1507200"
  },
  {
    "text": "next it'll use two rob gadgets to load the dispatch table and the dispatcher gadget and then from there we start the",
    "start": "1507200",
    "end": "1514240"
  },
  {
    "text": "job it'll find your win api functions and also calculate these stat pivots to",
    "start": "1514240",
    "end": "1521440"
  },
  {
    "text": "match the minimum and the maximum that you specify for desired stack pivot",
    "start": "1521440",
    "end": "1526480"
  },
  {
    "text": "amount so quick and dirty method with the job rocket you can clear your current",
    "start": "1526480",
    "end": "1532559"
  },
  {
    "text": "settings go into the job chain menu and do the g or z and it'll it does everything",
    "start": "1532559",
    "end": "1538480"
  },
  {
    "text": "now this is not terribly realistic because if you know you have a 900 byte stock",
    "start": "1538480",
    "end": "1543760"
  },
  {
    "text": "pivot enter that 900 and it'll calculate it precisely that's what we want you can",
    "start": "1543760",
    "end": "1550000"
  },
  {
    "text": "also change the number of pre-built job chains per register",
    "start": "1550000",
    "end": "1555279"
  },
  {
    "text": "so this comes from a binary that we did at defcon a very very elaborate binary",
    "start": "1555279",
    "end": "1561120"
  },
  {
    "text": "and this is the result auto generated and it pretty much works so this is virtual outlook",
    "start": "1561120",
    "end": "1566720"
  },
  {
    "text": "and then we have virtual protect all we need to do is just plug in the stuff for the vulnerability and then some file",
    "start": "1566720",
    "end": "1572960"
  },
  {
    "text": "format uh issues that are not related to rob or job but the actual job itself does work so",
    "start": "1572960",
    "end": "1579120"
  },
  {
    "text": "let's look specifically here virtual pro tech we start with rob",
    "start": "1579120",
    "end": "1584320"
  },
  {
    "text": "we're going to load edx with the dispatcher gadget and then now we are going to get our",
    "start": "1584320",
    "end": "1589360"
  },
  {
    "text": "dispatch table onto edi and then call the dispatcher we have a stack pivot of 894 another",
    "start": "1589360",
    "end": "1595440"
  },
  {
    "text": "stack pivot and then we load the pointer to virtual protect so now we can de-reference it",
    "start": "1595440",
    "end": "1602559"
  },
  {
    "text": "and then that takes us over here let's bundle our gadgets",
    "start": "1602559",
    "end": "1607840"
  },
  {
    "text": "and then here are our stack parameters so we can customize these to whatever we",
    "start": "1607840",
    "end": "1613679"
  },
  {
    "text": "we may need and this gives you a good starting point and then some other stuff just that are useful generally in terms of getting",
    "start": "1613679",
    "end": "1620159"
  },
  {
    "text": "your uh getting it built so we have a little drop chain we have job chain",
    "start": "1620159",
    "end": "1625760"
  },
  {
    "text": "a vp stack etc let's see this in action here this is exactly what we've just been looking at",
    "start": "1625760",
    "end": "1632960"
  },
  {
    "text": "so stack pivot of 894 we have adding c to our with our dispatcher",
    "start": "1632960",
    "end": "1638960"
  },
  {
    "text": "another stock pivot of 894 right on back to the dispatcher adding c to edi then dereferencing edi",
    "start": "1638960",
    "end": "1645840"
  },
  {
    "text": "and now we're loading uh virtual protect into eax the pointer another dispatcher",
    "start": "1645840",
    "end": "1652480"
  },
  {
    "text": "okay so virtual protect we see it up there it's about to make that call and over here we have look at esp we",
    "start": "1652480",
    "end": "1658080"
  },
  {
    "text": "have our stack parameters set up and we got it in the rocket kit got our shell code",
    "start": "1658080",
    "end": "1665279"
  },
  {
    "start": "1663000",
    "end": "1811000"
  },
  {
    "text": "now that's ideal the reality though is sometimes you have to tweak your job",
    "start": "1665279",
    "end": "1671600"
  },
  {
    "text": "but at the very least job rocket provides an excellent starting point ideal requirements well of course we",
    "start": "1671600",
    "end": "1678159"
  },
  {
    "text": "need a dispatcher gadget for this to work next ideally we would",
    "start": "1678159",
    "end": "1683919"
  },
  {
    "text": "have no bad bites however uh we can still work with bad bites if the gadget addresses do not contain them or even",
    "start": "1683919",
    "end": "1692000"
  },
  {
    "text": "still if they do bad bias is not the end of the world because we can always change the bad",
    "start": "1692000",
    "end": "1697200"
  },
  {
    "text": "bytes to something else one way around them is with this method so let's say cd",
    "start": "1697200",
    "end": "1702399"
  },
  {
    "text": "is a bad byte well let's do the unassembled inside job rocket and now i have ca",
    "start": "1702399",
    "end": "1709679"
  },
  {
    "text": "that may not always work so a better approach is exclusive or so if we have 7x or 5 well that gives us 2 and we can",
    "start": "1709679",
    "end": "1718399"
  },
  {
    "text": "take that 2x or 5 right on back to 7 and we have dead code indeed code and",
    "start": "1718399",
    "end": "1723840"
  },
  {
    "text": "gives us 400 000 the image base and we have our null bytes over there",
    "start": "1723840",
    "end": "1730480"
  },
  {
    "text": "job rocket also gives you the functionality to simply exclude bad bytes however i don't recommend this",
    "start": "1730480",
    "end": "1737120"
  },
  {
    "text": "because we can always just simply transform the bad bites with exclusive ore",
    "start": "1737120",
    "end": "1742559"
  },
  {
    "text": "so if there are bad bites you can still do the uh generated chain you just simply may",
    "start": "1742559",
    "end": "1750559"
  },
  {
    "text": "supply dummy very values instead and then you can go and overwrite them one",
    "start": "1750559",
    "end": "1755919"
  },
  {
    "text": "way to do that is by sniping with the move dereference and that is extremely",
    "start": "1755919",
    "end": "1761600"
  },
  {
    "text": "effective with rop or job however with jop that gadget is relatively rare so",
    "start": "1761600",
    "end": "1768640"
  },
  {
    "text": "another way to do that and this is unique only to to jop is push",
    "start": "1768640",
    "end": "1773919"
  },
  {
    "text": "instruction which austin explained and this is also a technique that he created",
    "start": "1773919",
    "end": "1780559"
  },
  {
    "text": "so let's look here at the move d reference we load an xor value we have the xor key and then we do a",
    "start": "1780559",
    "end": "1786240"
  },
  {
    "text": "transformation we overwrite it and then we increment and then we can repeat as",
    "start": "1786240",
    "end": "1791279"
  },
  {
    "text": "many as times as we need to in order to overwrite all of the dummy",
    "start": "1791279",
    "end": "1796960"
  },
  {
    "text": "variables of course job rocket is going to deliver for us it'll find those move",
    "start": "1796960",
    "end": "1802320"
  },
  {
    "text": "dereferences if they are there to be found if they're not remember we can",
    "start": "1802320",
    "end": "1808000"
  },
  {
    "text": "always do the push method instead so with that we will pass it on over to",
    "start": "1808000",
    "end": "1814399"
  },
  {
    "start": "1811000",
    "end": "2217000"
  },
  {
    "text": "austin so first on our list of topics here we have switching registers for your",
    "start": "1814399",
    "end": "1819679"
  },
  {
    "text": "functional and dispatcher gadgets so one reason we might want to switch registers for your dispatch gadget",
    "start": "1819679",
    "end": "1825200"
  },
  {
    "text": "is because um if we have our gadgets ending in jump edx with the edx storing our dispatcher gadget but we have",
    "start": "1825200",
    "end": "1832399"
  },
  {
    "text": "another gadget which we may want to use that ends in a jump ebx that ebx gadget is off limits currently because ebx will",
    "start": "1832399",
    "end": "1839360"
  },
  {
    "text": "not bring us back around to our dispatcher gadget so in order to fix this we can perform a pop ebx popping",
    "start": "1839360",
    "end": "1845840"
  },
  {
    "text": "that dispatcher gadget's address into evx and now once we perform jump ebx we will return to our dispatcher gadget",
    "start": "1845840",
    "end": "1851919"
  },
  {
    "text": "allowing us to use that um that previously unavailable gadget",
    "start": "1851919",
    "end": "1857039"
  },
  {
    "text": "in a similar vein when we pop a dispatcher gadget into ebx we can also switch dispatcher gadgets entirely so",
    "start": "1857039",
    "end": "1864640"
  },
  {
    "text": "the reason to do this if we look in our gadget in the top right we have add edi 8 jump viewer pointer edi so edi is",
    "start": "1864640",
    "end": "1872000"
  },
  {
    "text": "being reserved currently for our dispatch table with our new dispatcher gadget we're using ebp for our dispatch table instead",
    "start": "1872000",
    "end": "1879919"
  },
  {
    "text": "so now we can use gadgets that will modify edi without ruining our control flow so here at the",
    "start": "1879919",
    "end": "1885200"
  },
  {
    "text": "bottom we have our example where we pop ebx with an alternate dispatcher gadget and then we can do our add edi gadget",
    "start": "1885200",
    "end": "1892080"
  },
  {
    "text": "without ruining our control flow i'm switching gears here we're going to talk about microsoft's control flow",
    "start": "1892080",
    "end": "1897360"
  },
  {
    "text": "guard which is a coarse grained cfi implementation which inserts check functions before indirect jumps and",
    "start": "1897360",
    "end": "1903120"
  },
  {
    "text": "calls um this is going to attempt to thwart exploits similar to drop",
    "start": "1903120",
    "end": "1908159"
  },
  {
    "text": "we do have some techniques to avoid control flow guard one such technique is op code splitting so for an example of",
    "start": "1908159",
    "end": "1913760"
  },
  {
    "text": "that at the bottom here we can see our first instruction starts with the op codes bf89 however if we strip off that",
    "start": "1913760",
    "end": "1921120"
  },
  {
    "text": "bf op code we get a different instruction which is actually a job gadget and this is an instance of an",
    "start": "1921120",
    "end": "1927120"
  },
  {
    "text": "unintended instruction however it's still valid in x86 assembly and we can use this as a",
    "start": "1927120",
    "end": "1932480"
  },
  {
    "text": "job function as a job gadget without um worrying about control flow guard",
    "start": "1932480",
    "end": "1939200"
  },
  {
    "text": "we have some other ways to avoid control flow guards so indirect calls occurring during inline",
    "start": "1939200",
    "end": "1944480"
  },
  {
    "text": "assembly are not going to have that check function inserted before of them before them we can also avoid cfg by using gadgets",
    "start": "1944480",
    "end": "1951760"
  },
  {
    "text": "found in dlls which don't have that cfg protection enabled and windows 7 doesn't",
    "start": "1951760",
    "end": "1957120"
  },
  {
    "text": "support cfg either so when running exploits on windows 7 we don't have to worry about that",
    "start": "1957120",
    "end": "1963840"
  },
  {
    "text": "the job rocket will allow us to enumerate whether or not modules have cfg enabled and we can also filter out",
    "start": "1963919",
    "end": "1969679"
  },
  {
    "text": "gadgets from cfg enabled modules however i don't recommend that you filter out those",
    "start": "1969679",
    "end": "1976000"
  },
  {
    "text": "gadgets because many job gadgets can occur from unintended instructions via opcode splitting like we were talking",
    "start": "1976000",
    "end": "1982080"
  },
  {
    "text": "before and as long as you don't execute the guard check function we can use our job gadget",
    "start": "1982080",
    "end": "1990080"
  },
  {
    "text": "at this point i'm going to pass the presentation back on over to bramwell for one last time thank you austin our next technique is",
    "start": "1990080",
    "end": "1997200"
  },
  {
    "text": "bypassing aslr with jop and let me level with you it's no different than doing it",
    "start": "1997200",
    "end": "2003919"
  },
  {
    "text": "with rob so imagine that you have a memory disclosure with a uaf you have an integer budget it's part of",
    "start": "2003919",
    "end": "2011360"
  },
  {
    "text": "a structure it displays the budget you free the structure and then you go",
    "start": "2011360",
    "end": "2016960"
  },
  {
    "text": "and try to display the budget again this is called a use after free you're using it after it has been freed and it's",
    "start": "2016960",
    "end": "2023679"
  },
  {
    "text": "going to display nonsense nothing useful well we can instead go",
    "start": "2023679",
    "end": "2029679"
  },
  {
    "text": "and overwrite that allocation with a similarly similarly sized structure",
    "start": "2029679",
    "end": "2036399"
  },
  {
    "text": "and instead of an integer at the first offset well maybe we'll have a function",
    "start": "2036399",
    "end": "2042720"
  },
  {
    "text": "address and thus instead of displaying a random integer or nonsense we are",
    "start": "2042720",
    "end": "2049679"
  },
  {
    "text": "leaking a function pointer and from that we can go and extrapolate the base",
    "start": "2049679",
    "end": "2055919"
  },
  {
    "text": "address of the dll and this is the aslr",
    "start": "2055919",
    "end": "2061358"
  },
  {
    "text": "bypass that we want if you do this you bypass aslr",
    "start": "2061359",
    "end": "2068560"
  },
  {
    "text": "another technique that we can use is using jop is rob so if you're doing",
    "start": "2068639",
    "end": "2074800"
  },
  {
    "text": "return oriented programming and you can't find the right rob gadget that you want one thing that you can do is",
    "start": "2074800",
    "end": "2082240"
  },
  {
    "text": "briefly transition to job if you can find the equivalent job",
    "start": "2082240",
    "end": "2088079"
  },
  {
    "text": "gadget that you want how you do that is you go and load a return instruction and",
    "start": "2088079",
    "end": "2094240"
  },
  {
    "text": "that's it just threat load that into a register and then when you go and jump",
    "start": "2094240",
    "end": "2100720"
  },
  {
    "text": "to the register it is then equivalent to a rob gadget and you don't need to mess",
    "start": "2100720",
    "end": "2107119"
  },
  {
    "text": "around with a dispatcher gadget or a dispatch table you can just briefly do",
    "start": "2107119",
    "end": "2112640"
  },
  {
    "text": "job and then return to your other rob now one recent innovation that we",
    "start": "2112640",
    "end": "2118880"
  },
  {
    "text": "provided is expanding the definition of what constitutes a dispatcher gadget",
    "start": "2118880",
    "end": "2125760"
  },
  {
    "text": "with rob you just assume you look for the the c3 op code and disassemble backwards",
    "start": "2125760",
    "end": "2132560"
  },
  {
    "text": "so we do the same thing with job looking for particular offsets but we found that",
    "start": "2132560",
    "end": "2138000"
  },
  {
    "text": "we're missing the offs the op codes for if you do a jump d word pointer plus or minus an",
    "start": "2138000",
    "end": "2144160"
  },
  {
    "text": "offset because this is a valid way to do it so we've added those op codes and",
    "start": "2144160",
    "end": "2149520"
  },
  {
    "text": "we've added this and other alternative forms of the dispatcher gadget that you can also read about in the white paper",
    "start": "2149520",
    "end": "2157440"
  },
  {
    "text": "you know aslr in depth they're strong mitigations but we can overcome them with job just the same as we can with",
    "start": "2157440",
    "end": "2165200"
  },
  {
    "text": "roth the only challenge is that with jop the gadgets are a lot less plentiful",
    "start": "2165200",
    "end": "2171440"
  },
  {
    "text": "so that could be a possible consideration if there are not enough gadgets",
    "start": "2171440",
    "end": "2177599"
  },
  {
    "text": "some final takeaways if you can find a dispatcher gadget don't be afraid to try",
    "start": "2177599",
    "end": "2183359"
  },
  {
    "text": "job it may actually even be easier and if you are doing just exclusively",
    "start": "2183359",
    "end": "2189680"
  },
  {
    "text": "wrap but you need a specific gadget well you can briefly transition to jop",
    "start": "2189680",
    "end": "2195520"
  },
  {
    "text": "and expand your tax surface if you want to try the pure job style we",
    "start": "2195520",
    "end": "2201839"
  },
  {
    "text": "have a couple binaries you can try we have an easier and a slightly harder and you can find those at the github or",
    "start": "2201839",
    "end": "2208079"
  },
  {
    "text": "jobrocket.com and with that we welcome any and all questions",
    "start": "2208079",
    "end": "2215240"
  }
]