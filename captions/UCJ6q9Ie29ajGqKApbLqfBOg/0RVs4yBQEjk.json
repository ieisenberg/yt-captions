[
  {
    "text": "[Music]",
    "start": "1700",
    "end": "4810"
  },
  {
    "text": "thank you and welcome to process injection breaking all macro security layers with a single vulnerability",
    "start": "7400",
    "end": "15480"
  },
  {
    "text": "if you are a Mac OS developer and you use xcode you may have noticed that if",
    "start": "15480",
    "end": "21240"
  },
  {
    "text": "you create a new project with the latest xcode version there's a new method in the template for applications for your",
    "start": "21240",
    "end": "28380"
  },
  {
    "text": "application delegate application supports secure restorable state now in this talk I'm going to describe",
    "start": "28380",
    "end": "35280"
  },
  {
    "text": "the vulnerability that the necessitated this change and how we could exploit this for sandbox Escape previous",
    "start": "35280",
    "end": "42239"
  },
  {
    "text": "escalation and then finally bypassing sip first a bit about me I'm Tasha okamada",
    "start": "42239",
    "end": "48360"
  },
  {
    "text": "I'm a security researcher at computest computers is a security company in the Netherlands providing services like pen",
    "start": "48360",
    "end": "55140"
  },
  {
    "text": "testing instrument response and security operations center together with my colleague Dan Cooper we",
    "start": "55140",
    "end": "61739"
  },
  {
    "text": "are the research Department which means that we don't work for customers but instead we look for vulnerabilities and",
    "start": "61739",
    "end": "68520"
  },
  {
    "text": "systems that are used often or suddenly you more popular to make the world a little bit safer so",
    "start": "68520",
    "end": "76799"
  },
  {
    "text": "all the work that you may have seen from us is a zero click remote code execution field Mobility we showed at Ubuntu owned",
    "start": "76799",
    "end": "84540"
  },
  {
    "text": "last year and when it comes on Miami this year with five ICS vulnerabilities",
    "start": "84540",
    "end": "91820"
  },
  {
    "text": "and there's some write-ups for these on our website if you want to know more about them what I'm going to be talking about today",
    "start": "91979",
    "end": "97979"
  },
  {
    "text": "is macro security which is a bit of a specialty for me um been a Mac User all my life so it's",
    "start": "97979",
    "end": "105000"
  },
  {
    "text": "it's a system I know most so um that's also where this",
    "start": "105000",
    "end": "110340"
  },
  {
    "text": "familiarability originated and this presentation will be consists",
    "start": "110340",
    "end": "116220"
  },
  {
    "text": "of two three parts first I'll describe a little bit to make a security model because many people don't really",
    "start": "116220",
    "end": "122280"
  },
  {
    "text": "understand um the current security model and then the second part will be",
    "start": "122280",
    "end": "128940"
  },
  {
    "text": "introducing the filmability that I found and then the third part will be to demonstrate how the film ability could",
    "start": "128940",
    "end": "135780"
  },
  {
    "text": "be applied in three different ways to as I said escape the sandbox Elevate",
    "start": "135780",
    "end": "141420"
  },
  {
    "text": "Privileges and then finally bypassing ship",
    "start": "141420",
    "end": "146120"
  },
  {
    "text": "so to make a security model as of the current latest release Macos Monterey",
    "start": "146640",
    "end": "152040"
  },
  {
    "text": "to describe that I'll first talk a little bit about the unixie Linux",
    "start": "152040",
    "end": "157140"
  },
  {
    "text": "security model as it used to be on Mac OS as well um and the basic idea behind it is that",
    "start": "157140",
    "end": "164040"
  },
  {
    "text": "users are security boundaries with processes are not so you can see this for files any file",
    "start": "164040",
    "end": "171959"
  },
  {
    "text": "has an owner as a group and there are these nine Flags to determine whether the owner or group or everybody is",
    "start": "171959",
    "end": "177780"
  },
  {
    "text": "allowed to retry to execute and also if you want to attach a debugger to another process and then",
    "start": "177780",
    "end": "183959"
  },
  {
    "text": "those processes need to be in general they need to be running as the same user",
    "start": "183959",
    "end": "189180"
  },
  {
    "text": "and root users an exception to this the road user can read or modify all files",
    "start": "189180",
    "end": "194280"
  },
  {
    "text": "and you can access basically any data in memory or even in a kernel in other processes any data is available for the",
    "start": "194280",
    "end": "202560"
  },
  {
    "text": "root user and this was the security model for Mac OS but it no longer is the case",
    "start": "202560",
    "end": "209280"
  },
  {
    "text": "ever since the introduction of system Integrity protection this was introduced in 2015 with the El",
    "start": "209280",
    "end": "216000"
  },
  {
    "text": "Capitan release and this was from the WWDC presentation where they announced it",
    "start": "216000",
    "end": "222780"
  },
  {
    "text": "and the basic idea of sip originally was to do two things",
    "start": "222780",
    "end": "228000"
  },
  {
    "text": "first of all introduce a security layer between the root user and the kernel",
    "start": "228000",
    "end": "233459"
  },
  {
    "text": "and secondly to protect the system from being modified even by the road user",
    "start": "233459",
    "end": "239760"
  },
  {
    "text": "so having just root access is no longer enough to completely compromise the system",
    "start": "239760",
    "end": "245340"
  },
  {
    "text": "and the reason Apple wanted to do this is that getting root access on a Mac is pretty simple in general if you're more",
    "start": "245340",
    "end": "252060"
  },
  {
    "text": "aware because most of the users are an admin user so if you just prompt the",
    "start": "252060",
    "end": "257160"
  },
  {
    "text": "user for their password to do something update the system or something like that and it's very easy to get the user to",
    "start": "257160",
    "end": "263880"
  },
  {
    "text": "enter their password and then you have root privileges so that's why Apple introduced sip and",
    "start": "263880",
    "end": "271800"
  },
  {
    "text": "one of the other names is known as is rootless many people thought well Apple's going to take the root user away from people",
    "start": "271800",
    "end": "278220"
  },
  {
    "text": "like they do on the iPhone but that's not really what this me what this name",
    "start": "278220",
    "end": "283500"
  },
  {
    "text": "means it means that root is less powerful that's the idea behind it",
    "start": "283500",
    "end": "290840"
  },
  {
    "text": "so the way that works is that you now need an entitlement to perform dangerous operations",
    "start": "290880",
    "end": "297000"
  },
  {
    "text": "so an entitlement is some metadata that's included when the code signature is generated for an application",
    "start": "297000",
    "end": "303479"
  },
  {
    "text": "so for many dangerous operations that would compromise the system or the kernel you now need a specific",
    "start": "303479",
    "end": "310259"
  },
  {
    "text": "entitlement to do that so loading a kernel extension or modifying the operating system or debugging a system",
    "start": "310259",
    "end": "317340"
  },
  {
    "text": "process so Apple can still make certain executables able to update the system",
    "start": "317340",
    "end": "323280"
  },
  {
    "text": "because yeah you still need to install updates but it's no longer just possible for any route you for the root user to",
    "start": "323280",
    "end": "329759"
  },
  {
    "text": "modify those files and over the years in the releases since",
    "start": "329759",
    "end": "335520"
  },
  {
    "text": "Apple has extended the protections of ship to other parts of the system as well",
    "start": "335520",
    "end": "340860"
  },
  {
    "text": "so even debugging any application is now restricted and you cannot just attach a debugger to anything unless they",
    "start": "340860",
    "end": "347759"
  },
  {
    "text": "specifically allow that and also an interesting feature is data faults with restrict as file access",
    "start": "347759",
    "end": "355560"
  },
  {
    "text": "I have an example here so Apple considers your email database to be very sensitive because it contains",
    "start": "355560",
    "end": "361560"
  },
  {
    "text": "a lot of personal information also your messages database or your Safari history",
    "start": "361560",
    "end": "366600"
  },
  {
    "text": "is protected in the same way and what this means is that you cannot",
    "start": "366600",
    "end": "371940"
  },
  {
    "text": "just see what files are there even the root user cannot do that",
    "start": "371940",
    "end": "377340"
  },
  {
    "text": "uh so even if the malware is on your Mac and has roots use your privileges it cannot just read your email",
    "start": "377340",
    "end": "384600"
  },
  {
    "text": "but of course mail itself needs to be able to access those files otherwise it would be useless",
    "start": "384600",
    "end": "389759"
  },
  {
    "text": "so mail has a specific entitlement that allows you to access those files",
    "start": "389759",
    "end": "395039"
  },
  {
    "text": "and this is the Commonwealth Apple dot rootless dot storage of mail which means it can access just the mail data fault",
    "start": "395039",
    "end": "401400"
  },
  {
    "text": "but nothing else so in this way now certainly processes have",
    "start": "401400",
    "end": "408419"
  },
  {
    "text": "become security boundaries and that also means that there's new types of vulnerabilities that we need to",
    "start": "408419",
    "end": "414120"
  },
  {
    "text": "think about and one important one is process injection which is basically the ability for one",
    "start": "414120",
    "end": "420240"
  },
  {
    "text": "process to execute code as another process so the systems thinks it's process B with the code is actually",
    "start": "420240",
    "end": "427080"
  },
  {
    "text": "specified for process a and on Windows you have these techniques like dll hijacking that do similar stuff",
    "start": "427080",
    "end": "435120"
  },
  {
    "text": "um a little Mac OS yeah this cannot really be a severe security issue if",
    "start": "435120",
    "end": "440160"
  },
  {
    "text": "you're able to go to a different process and when Apple introduced sip as you can",
    "start": "440160",
    "end": "447000"
  },
  {
    "text": "see on the right of the slide many techniques that could lead to process injection were disabled for those",
    "start": "447000",
    "end": "453840"
  },
  {
    "text": "protected programs so Apple thought a lot about how they can make this security boundary actually work",
    "start": "453840",
    "end": "460620"
  },
  {
    "text": "and also for third-party applications Apple introduced what's known as the hardened runtime to prevent certain",
    "start": "460620",
    "end": "466259"
  },
  {
    "text": "techniques that used to be possible for injecting codes like Dynamic Linker",
    "start": "466259",
    "end": "472199"
  },
  {
    "text": "environment variables and also Library validation which basically prevents the similar technique like dll hijacking but",
    "start": "472199",
    "end": "478620"
  },
  {
    "text": "for Mac OS but micros is quite all large and",
    "start": "478620",
    "end": "484199"
  },
  {
    "text": "established so there's a lot of parts of the system that were written before the",
    "start": "484199",
    "end": "489599"
  },
  {
    "text": "security model had changed and yeah it's not possible to really reconsider the",
    "start": "489599",
    "end": "494639"
  },
  {
    "text": "entire system into this new security model so there may still be vulnerabilities that can be used to",
    "start": "494639",
    "end": "500580"
  },
  {
    "text": "inject code to other applications",
    "start": "500580",
    "end": "504740"
  },
  {
    "text": "third-party applications can often have those process injection vulnerabilities",
    "start": "506240",
    "end": "511979"
  },
  {
    "text": "um for example to abuse what's known as TCC basically the permission from to get if an application wants to use your",
    "start": "511979",
    "end": "518279"
  },
  {
    "text": "webcam for the first time and many third-party developers are not aware of the security model so anytime",
    "start": "518279",
    "end": "524700"
  },
  {
    "text": "you find the availability like this you have to completely explain the security model",
    "start": "524700",
    "end": "529740"
  },
  {
    "text": "um and that's yeah it might be possible to use their application to steal the webcam data",
    "start": "529740",
    "end": "536640"
  },
  {
    "text": "you can also often do effects like downgrading an application to an older version and then still use the",
    "start": "536640",
    "end": "542040"
  },
  {
    "text": "permissions that the application has but those are incidents those are",
    "start": "542040",
    "end": "547140"
  },
  {
    "text": "incidental vulnerabilities of course it's much nicer to have a processary injection filter you can just",
    "start": "547140",
    "end": "552899"
  },
  {
    "text": "apply everywhere and that's exactly what I find so the CFE 2021",
    "start": "552899",
    "end": "560480"
  },
  {
    "text": "3873 is a process injection vulnerability in app kit which basically means that any applicant based",
    "start": "560480",
    "end": "566399"
  },
  {
    "text": "application was fill in the role and where this vulnerability was in is",
    "start": "566399",
    "end": "572580"
  },
  {
    "text": "in the safe State feature so when you shoot down your computer there's this checkbox if you want to",
    "start": "572580",
    "end": "579360"
  },
  {
    "text": "reopen the app the windows that you have open the next time you log in and this is known as safe state or",
    "start": "579360",
    "end": "585839"
  },
  {
    "text": "persistent UI internally and there's also do does stuff like if",
    "start": "585839",
    "end": "591120"
  },
  {
    "text": "you have an in-safe document you never didn't save it yet but you shared that in mac and then you start it up again and it can recover the content of that",
    "start": "591120",
    "end": "598140"
  },
  {
    "text": "in safe document and this largely Works automatically so",
    "start": "598140",
    "end": "604380"
  },
  {
    "text": "application developers do not need to opt in but appkit will automatically see oh there's this safe state I'm going to",
    "start": "604380",
    "end": "610980"
  },
  {
    "text": "restore it and reopen these windows but third-party developers can extend it",
    "start": "610980",
    "end": "616260"
  },
  {
    "text": "for example if they have their own document format then they may have their own objects that they want to store in",
    "start": "616260",
    "end": "621300"
  },
  {
    "text": "that safe state and the state is stored in your library",
    "start": "621300",
    "end": "626820"
  },
  {
    "text": "in the application State folder and there are basically two files that are",
    "start": "626820",
    "end": "631920"
  },
  {
    "text": "important here first of all windows.plist this is basically a list of all of the windows",
    "start": "631920",
    "end": "637320"
  },
  {
    "text": "that were open in the application and for each of them there's an encryption key",
    "start": "637320",
    "end": "643560"
  },
  {
    "text": "and then there's the data.data file which as far as I can tell this is a unique format not used anywhere else",
    "start": "643560",
    "end": "651240"
  },
  {
    "text": "let's contains a list of records and each of those records is corresponds to",
    "start": "651240",
    "end": "656339"
  },
  {
    "text": "window and it contains a serialized object encrypted using that key from the",
    "start": "656339",
    "end": "661980"
  },
  {
    "text": "windows to PLS file now I have no idea why this is encrypted",
    "start": "661980",
    "end": "667260"
  },
  {
    "text": "because the files are right next to each other there's no permission differences between them there's also no Integrity check on the",
    "start": "667260",
    "end": "675180"
  },
  {
    "text": "ciphertext so I have no idea why it's encrypted but it apparently it is",
    "start": "675180",
    "end": "681420"
  },
  {
    "text": "an availability that I found is that this object that's encrypted here is",
    "start": "681420",
    "end": "686519"
  },
  {
    "text": "serialized using a non-secure serializer so non-secure coding",
    "start": "686519",
    "end": "694220"
  },
  {
    "text": "now serialization field mobilities are very common in C sharp and Java very well known but also Python and Ruby it's",
    "start": "694380",
    "end": "701519"
  },
  {
    "text": "also very easy to exploit it to gain code execution with apple serialization format hasn't",
    "start": "701519",
    "end": "707399"
  },
  {
    "text": "really been discussed for these types of vulnerabilities as far as I could find",
    "start": "707399",
    "end": "713480"
  },
  {
    "text": "so Apple's format is called nscoding with apple added a secure version and a",
    "start": "713480",
    "end": "718980"
  },
  {
    "text": "secure Accounting in 10.8 which is 10 years ago and the secure coding already solved the",
    "start": "718980",
    "end": "726660"
  },
  {
    "text": "issue that many serialization vulnerabilities yeah",
    "start": "726660",
    "end": "732500"
  },
  {
    "text": "it causes many of the serialization vulnerabilities so instead of creating",
    "start": "732500",
    "end": "737700"
  },
  {
    "text": "an object first and then checking if it is the correct type which is which is what leads to these vulnerabilities",
    "start": "737700",
    "end": "742920"
  },
  {
    "text": "because by then the object already exists and maybe doing something is Constructor or Destructor you create the",
    "start": "742920",
    "end": "749399"
  },
  {
    "text": "object while checking its type so the example of the difference insecure version you first create the",
    "start": "749399",
    "end": "756360"
  },
  {
    "text": "object and then you check its type this is dangerous because by the time you check its type the object already",
    "start": "756360",
    "end": "762600"
  },
  {
    "text": "exists and may have done something and then secure version you decode the",
    "start": "762600",
    "end": "768000"
  },
  {
    "text": "object but only if it is of this class or this couple of classes",
    "start": "768000",
    "end": "774120"
  },
  {
    "text": "and secure coding is very common within Mac OS it's also very often used between",
    "start": "774120",
    "end": "780060"
  },
  {
    "text": "different security layers so an application may be communicating with some service that's privileged and then",
    "start": "780060",
    "end": "786600"
  },
  {
    "text": "sending these serialized objects over it's even used within iMessage so if you",
    "start": "786600",
    "end": "791760"
  },
  {
    "text": "send a message to another user that is a secure serialized object",
    "start": "791760",
    "end": "797420"
  },
  {
    "text": "um so there's been a lot of researching the secure serialization format the",
    "start": "798060",
    "end": "803399"
  },
  {
    "text": "insecure version is not used very often in this kind of context so Apple has been very good at making sure it's not",
    "start": "803399",
    "end": "809760"
  },
  {
    "text": "used in a way that could lead to vulnerabilities but in this case yeah it was possible",
    "start": "809760",
    "end": "817079"
  },
  {
    "text": "so what is the attack that this allows so what you can do is you can create a new",
    "start": "817079",
    "end": "824040"
  },
  {
    "text": "safe state for an application with a malicious serialized object",
    "start": "824040",
    "end": "829440"
  },
  {
    "text": "you can write it to that directory for the other application and then you can ask the system to",
    "start": "829440",
    "end": "835980"
  },
  {
    "text": "launch your other application and then when the application runs it will automatically deserialize that",
    "start": "835980",
    "end": "842100"
  },
  {
    "text": "object and then yeah we could be executing codes within an app within another",
    "start": "842100",
    "end": "847500"
  },
  {
    "text": "application which also means that we have access we can use the entitlements",
    "start": "847500",
    "end": "853079"
  },
  {
    "text": "or permissions of that other application so I found this and then it was just",
    "start": "853079",
    "end": "860459"
  },
  {
    "text": "well what object do I write can I find anything somebody else has done",
    "start": "860459",
    "end": "866160"
  },
  {
    "text": "so there's this famous projects uh White sociario for Java CU civilization vulnerabilities and also why so",
    "start": "866160",
    "end": "872459"
  },
  {
    "text": "serial.net for c-sharp but yeah no similar project exists for objective c",
    "start": "872459",
    "end": "878880"
  },
  {
    "text": "I also checked a couple of Google projects here white tips ready exploited serialization within all of those cases",
    "start": "878880",
    "end": "885420"
  },
  {
    "text": "it will secure serialization using a very specific vulnerability",
    "start": "885420",
    "end": "890639"
  },
  {
    "text": "and those were now fixed so I could no longer apply those techniques so I had to really find out yeah",
    "start": "890639",
    "end": "897060"
  },
  {
    "text": "construct these objects to change from scratch to exploit this issue",
    "start": "897060",
    "end": "903199"
  },
  {
    "text": "so how did I do that so I decompiled or",
    "start": "904740",
    "end": "910440"
  },
  {
    "text": "loaded into my decompiler or app kit and then I looked through all of the indices coder functions to look for something",
    "start": "910440",
    "end": "915959"
  },
  {
    "text": "useful and to my surprise many of those classes that are deserializable do not Implement",
    "start": "915959",
    "end": "923579"
  },
  {
    "text": "secure quality but they are also often not that interesting because the only thing they",
    "start": "923579",
    "end": "929279"
  },
  {
    "text": "do is just recursively decode their own interest variables and then there's",
    "start": "929279",
    "end": "934920"
  },
  {
    "text": "really no no other functionality that you might be able to access",
    "start": "934920",
    "end": "940220"
  },
  {
    "text": "so the first step that I found that I could use was the NS rule editor",
    "start": "940440",
    "end": "947480"
  },
  {
    "text": "I hope it's readable and so what this does is it obtains an object from the",
    "start": "950459",
    "end": "955680"
  },
  {
    "text": "archive and the place a key path from the archive and then it creates a binding",
    "start": "955680",
    "end": "962220"
  },
  {
    "text": "to that object using that key path so bindings are something like a reactive",
    "start": "962220",
    "end": "967920"
  },
  {
    "text": "programming technique in Macos this means that you can sort of",
    "start": "967920",
    "end": "973800"
  },
  {
    "text": "yeah you can directly connect your View to a model without having to use a controller",
    "start": "973800",
    "end": "980160"
  },
  {
    "text": "and then and one thing that you need to specify is that key path and it",
    "start": "980160",
    "end": "986339"
  },
  {
    "text": "determines a property that you want to bind to so for example if you have a person you might bind to their name to",
    "start": "986339",
    "end": "992279"
  },
  {
    "text": "make a field that's automatically contains your name but",
    "start": "992279",
    "end": "997500"
  },
  {
    "text": "that key path can basically be any methods even if it's not a property so",
    "start": "997500",
    "end": "1002779"
  },
  {
    "text": "you can bind to any method as long as this has no arguments so you can just bind to yeah any zero",
    "start": "1002779",
    "end": "1011240"
  },
  {
    "text": "argument method on an object so with this class I could Now call methods",
    "start": "1011240",
    "end": "1016940"
  },
  {
    "text": "um without any arguments and then the next step was NS Custom",
    "start": "1016940",
    "end": "1023540"
  },
  {
    "text": "Image wrap this obtains a object from the archive",
    "start": "1023540",
    "end": "1028760"
  },
  {
    "text": "and then a selector and the selector is basically like a function pointer for a Objective C method",
    "start": "1028760",
    "end": "1035298"
  },
  {
    "text": "but it doesn't use them yet it just stores them but then when you call draw on it",
    "start": "1035299",
    "end": "1041959"
  },
  {
    "text": "um object it will call the selector on the object that it's obtains",
    "start": "1041959",
    "end": "1047298"
  },
  {
    "text": "so if we combine this with the previous step or you can call zero argument methods we can now call the draw method",
    "start": "1047299",
    "end": "1053960"
  },
  {
    "text": "on a an S Custom Image wrap to perform any method",
    "start": "1053960",
    "end": "1059120"
  },
  {
    "text": "although we don't have any control yet over the arguments it bosses itself as its first argument and any other",
    "start": "1059120",
    "end": "1065240"
  },
  {
    "text": "arguments will be random data that happens to be in those registers",
    "start": "1065240",
    "end": "1071080"
  },
  {
    "text": "but this is a very powerful primitive already because you can call a lot of different functions",
    "start": "1072020",
    "end": "1078580"
  },
  {
    "text": "now I have to skip a few steps for time reasons and also disclosure reasons",
    "start": "1078679",
    "end": "1084520"
  },
  {
    "text": "but uh I'll summarize the steps a little bit",
    "start": "1084520",
    "end": "1089600"
  },
  {
    "text": "here so we can first call those serial argument methods and then we can call any method",
    "start": "1089600",
    "end": "1095000"
  },
  {
    "text": "let me use a trick to create other objects that were not implementing at NS",
    "start": "1095000",
    "end": "1100039"
  },
  {
    "text": "code or usually not serializable I'm going to use the same trick to call",
    "start": "1100039",
    "end": "1106039"
  },
  {
    "text": "zero argument methods on those objects and then and I'll take the arbitrary",
    "start": "1106039",
    "end": "1112520"
  },
  {
    "text": "methods on those objects and that's basically enough to evaluate applescript within that process",
    "start": "1112520",
    "end": "1119419"
  },
  {
    "text": "and evaluating applescript is already very powerful because if we for example",
    "start": "1119419",
    "end": "1125120"
  },
  {
    "text": "would attack mail then we can now access the files within the mail data fold copy",
    "start": "1125120",
    "end": "1130280"
  },
  {
    "text": "them out or could spawn a reverse shell and do stuff like that",
    "start": "1130280",
    "end": "1137059"
  },
  {
    "text": "so this was a nice success to have already but in one of the instances of the",
    "start": "1137059",
    "end": "1143660"
  },
  {
    "text": "exploit that we wanted to use this was not enough we really wanted to have basically",
    "start": "1143660",
    "end": "1149000"
  },
  {
    "text": "equivalent to native code execution in that other process",
    "start": "1149000",
    "end": "1154059"
  },
  {
    "text": "but this was quite tricky because as I mentioned there's not really hard on drain time",
    "start": "1154160",
    "end": "1160940"
  },
  {
    "text": "and the art engine time is is meant to make these kinds of attacks harder",
    "start": "1160940",
    "end": "1166720"
  },
  {
    "text": "so it prevents us from creating memory pages that are",
    "start": "1168020",
    "end": "1173539"
  },
  {
    "text": "yeah read a writable and executables or no uh just in time compilers are allowed",
    "start": "1173539",
    "end": "1179600"
  },
  {
    "text": "they see Library validation so we cannot just load the dll or the dynamic Library this is the environment variables which",
    "start": "1179600",
    "end": "1186440"
  },
  {
    "text": "would not be useful here but also blocked",
    "start": "1186440",
    "end": "1190299"
  },
  {
    "text": "so how how in the solution I found was I could",
    "start": "1192740",
    "end": "1199100"
  },
  {
    "text": "load the python framework which was signed by Apple and at the time it was still included in",
    "start": "1199100",
    "end": "1204260"
  },
  {
    "text": "Mac OS and then I could import the C types module and then using that I could",
    "start": "1204260",
    "end": "1209840"
  },
  {
    "text": "basically evaluate code that was equivalent to native code just called C",
    "start": "1209840",
    "end": "1215419"
  },
  {
    "text": "functions create structs stuff like that but now I was only able to create",
    "start": "1215419",
    "end": "1221419"
  },
  {
    "text": "Objective C objects but I wanted to call into Python and the python framework doesn't have any objective-c interfaces",
    "start": "1221419",
    "end": "1227960"
  },
  {
    "text": "you can use sorry I had to find some intermediate steps for this",
    "start": "1227960",
    "end": "1234159"
  },
  {
    "text": "and what I use for that is called The applescript Objective C Bridge it's basically similar to applescript",
    "start": "1234740",
    "end": "1241700"
  },
  {
    "text": "but it has the objective-c runtime breached into applescript",
    "start": "1241700",
    "end": "1247899"
  },
  {
    "text": "and what I noticed about that is that the art engine time doesn't allow you to load",
    "start": "1249020",
    "end": "1254299"
  },
  {
    "text": "libraries that are not signed by Apple but you by using applescript of the xfc",
    "start": "1254299",
    "end": "1260240"
  },
  {
    "text": "you can load scripts from another bundle the scripts don't need to be signed so you can use this to learn applescript",
    "start": "1260240",
    "end": "1268100"
  },
  {
    "text": "into another process",
    "start": "1268100",
    "end": "1271720"
  },
  {
    "text": "and this allowed me to create objective-c objects called Methods called C functions which was very useful",
    "start": "1273740",
    "end": "1280880"
  },
  {
    "text": "because this was not possible before but there was still one downside I could not create any",
    "start": "1280880",
    "end": "1288020"
  },
  {
    "text": "pointers to things that were not objective-c objects I could not create any structs or work with C strings",
    "start": "1288020",
    "end": "1294200"
  },
  {
    "text": "because the event time doesn't The applescript Objective C Bridge doesn't allow that",
    "start": "1294200",
    "end": "1300440"
  },
  {
    "text": "but I could call C functions so I went through all of the functions",
    "start": "1300440",
    "end": "1305539"
  },
  {
    "text": "exported by the python framework but all of those really require requires",
    "start": "1305539",
    "end": "1310580"
  },
  {
    "text": "a Char pointer because she needed to pass either path or the actual python code that you want",
    "start": "1310580",
    "end": "1316520"
  },
  {
    "text": "to evaluate and I had no way of generating those character pointers using applescript Objective C",
    "start": "1316520",
    "end": "1324799"
  },
  {
    "text": "but then I found a very neat but ugly trick to do that I could call Pai main with zero and null",
    "start": "1324799",
    "end": "1332900"
  },
  {
    "text": "and nose because it's zero it's equivalent to nil this was allowed and what this means is",
    "start": "1332900",
    "end": "1339440"
  },
  {
    "text": "that the process now acts as if it is python as if you would launch it normally in a shell",
    "start": "1339440",
    "end": "1345799"
  },
  {
    "text": "which means that it starts his Rebel within another process so in on standard",
    "start": "1345799",
    "end": "1351320"
  },
  {
    "text": "input I could just pass all of the Python codes that would then be evaluated in that process",
    "start": "1351320",
    "end": "1357320"
  },
  {
    "text": "now if you're a fan of how for Boost applescript or",
    "start": "1357320",
    "end": "1363260"
  },
  {
    "text": "objective c is then you really should look at the Apple script Objective C Bridge because it's",
    "start": "1363260",
    "end": "1368720"
  },
  {
    "text": "basically even for Boost and both of those and this is how you call functions",
    "start": "1368720",
    "end": "1374600"
  },
  {
    "text": "um yeah you need to drop everything in there and tell current application and then",
    "start": "1374600",
    "end": "1381020"
  },
  {
    "text": "all of these apostrophes to access Objective C goals",
    "start": "1381020",
    "end": "1388400"
  },
  {
    "text": "and using this with a reference that basically pass nil into it I could load",
    "start": "1388520",
    "end": "1394400"
  },
  {
    "text": "a python grapple so",
    "start": "1394400",
    "end": "1400039"
  },
  {
    "text": "to summarize that I could evaluate applescripts with the Apple script Objective C Bridge",
    "start": "1400039",
    "end": "1406700"
  },
  {
    "text": "and a good fra python because import C types and now I could execute code that's",
    "start": "1406700",
    "end": "1412880"
  },
  {
    "text": "basically equivalent to native code within the application I can just create structs I could create Char pointers I",
    "start": "1412880",
    "end": "1420080"
  },
  {
    "text": "could call C functions and yeah I've just bypassed the the",
    "start": "1420080",
    "end": "1425240"
  },
  {
    "text": "hardened runtime restrictions and can now execute any code in the process and also the neat thing about C types is",
    "start": "1425240",
    "end": "1432440"
  },
  {
    "text": "that this just works even with all of those restrictions if you look at for example the other Frameworks included like Ruby or Pearl",
    "start": "1432440",
    "end": "1440659"
  },
  {
    "text": "and you can create bindings to see but then you often need to compile some",
    "start": "1440659",
    "end": "1446179"
  },
  {
    "text": "intermediate codes to create those bindings and then the library validation",
    "start": "1446179",
    "end": "1451340"
  },
  {
    "text": "would not allow that",
    "start": "1451340",
    "end": "1454299"
  },
  {
    "text": "so now for exploitation for the three different ways that this vulnerability could be applied",
    "start": "1458539",
    "end": "1464840"
  },
  {
    "text": "first of all escaping your sandbox to do that I need to explain how this",
    "start": "1464840",
    "end": "1472159"
  },
  {
    "text": "works so this is an open Panel it looks really boring you see a lot if you use Mac OS but it's",
    "start": "1472159",
    "end": "1480200"
  },
  {
    "text": "actually technically quite complicated because if you have a sandboxed application and the application cannot",
    "start": "1480200",
    "end": "1486260"
  },
  {
    "text": "list all of the files you have on disk but if you want to open a file it would",
    "start": "1486260",
    "end": "1491720"
  },
  {
    "text": "be very inconvenient if the application called know what files you have before you open something",
    "start": "1491720",
    "end": "1497600"
  },
  {
    "text": "so the way Apple implemented this is that the window is now part of the",
    "start": "1497600",
    "end": "1502700"
  },
  {
    "text": "application but the contents are being drawn by a different process if you're a web developer you may be",
    "start": "1502700",
    "end": "1508820"
  },
  {
    "text": "familiar with iPhones this is kind of like the same idea so there's this open and panel open a",
    "start": "1508820",
    "end": "1514580"
  },
  {
    "text": "safe panel service which draws the contents and then when the user selects a file and clicks open",
    "start": "1514580",
    "end": "1521059"
  },
  {
    "text": "that panel will give temporary access to that file back to the application so then the application can read or write",
    "start": "1521059",
    "end": "1527179"
  },
  {
    "text": "that file and as it turned out that open or safe panel was loaning its",
    "start": "1527179",
    "end": "1534919"
  },
  {
    "text": "saved state from the same files as the application itself it's",
    "start": "1534919",
    "end": "1541400"
  },
  {
    "text": "I'm guessing that this is because you might want to resize the panel and then",
    "start": "1541400",
    "end": "1546980"
  },
  {
    "text": "you might shut down your computer while the panel was open so it needs to remember both states of the different",
    "start": "1546980",
    "end": "1553360"
  },
  {
    "text": "combination of this panel with the application but I'm not completely sure of that",
    "start": "1553360",
    "end": "1560419"
  },
  {
    "text": "so how we could attack this was quite simple we just write the saved State into our own applications directory we",
    "start": "1560419",
    "end": "1567740"
  },
  {
    "text": "trigger the open Panel and then we were executing code in a known sandbox process so essentially we have already",
    "start": "1567740",
    "end": "1574460"
  },
  {
    "text": "escaped the sign box and this part of the vulnerability was already fixed earlier than the rest so",
    "start": "1574460",
    "end": "1581000"
  },
  {
    "text": "this was fixed in 11.3 it was no longer sharing this directory with the open Panel so it was no longer",
    "start": "1581000",
    "end": "1587840"
  },
  {
    "text": "possible to do the same thing in The Next Step was elevating",
    "start": "1587840",
    "end": "1594140"
  },
  {
    "text": "privileges to root and for this I applied a trick founded by somebody else so this was a in the in",
    "start": "1594140",
    "end": "1602840"
  },
  {
    "text": "all of the logic books for the we invited by Elias morat um",
    "start": "1602840",
    "end": "1609380"
  },
  {
    "text": "there are there's specific entitlements and com.apple.private.authorization services",
    "start": "1609380",
    "end": "1615940"
  },
  {
    "text": "which may contain something like system install Apple software and what this entitlement means is that this",
    "start": "1615940",
    "end": "1622460"
  },
  {
    "text": "application is allowed to install packages signed by Apple without any",
    "start": "1622460",
    "end": "1628220"
  },
  {
    "text": "authorization or even any notification to the user so you can silently install",
    "start": "1628220",
    "end": "1633260"
  },
  {
    "text": "a new Apple sign package and then this could be combined with a",
    "start": "1633260",
    "end": "1639080"
  },
  {
    "text": "specific package and the Mecca's public data access utility [Music]",
    "start": "1639080",
    "end": "1644179"
  },
  {
    "text": "and when this package is installed it has a post install script so script that runs after the installation",
    "start": "1644179",
    "end": "1650659"
  },
  {
    "text": "that tries to run a command from the disk you install it to so normally you would install this to",
    "start": "1650659",
    "end": "1657260"
  },
  {
    "text": "your Mac OS disk and then it would just run a command from there but you can just install it to any disk",
    "start": "1657260",
    "end": "1664940"
  },
  {
    "text": "currently connected to your Mac so you can create a new Ram disk or disk image write the script that you want to run to",
    "start": "1664940",
    "end": "1672020"
  },
  {
    "text": "that disk and then when you install this package to the disk it will run that script",
    "start": "1672020",
    "end": "1677779"
  },
  {
    "text": "because there was no check that this was actually a Mac OS install disk you can just install it to an empty disk image",
    "start": "1677779",
    "end": "1685580"
  },
  {
    "text": "and also mounting one there so this images does not require root privileges so we could Mount the disk ask this USB",
    "start": "1685580",
    "end": "1693080"
  },
  {
    "text": "service to install this package because it's signed by Apple this is allowed and then this post install script runs which",
    "start": "1693080",
    "end": "1699020"
  },
  {
    "text": "runs with root privileges which means that we have now elevated privileges to root",
    "start": "1699020",
    "end": "1705940"
  },
  {
    "text": "and I finally bypassing the zip file system restrictions",
    "start": "1706340",
    "end": "1711880"
  },
  {
    "text": "to do this I basically wanted to make sure that we had the full impact of this",
    "start": "1712159",
    "end": "1717980"
  },
  {
    "text": "vulnerability mapped out so I looked to all of the applications that were available that were installed",
    "start": "1717980",
    "end": "1723440"
  },
  {
    "text": "on Mac OS and that might have an entitlement that I could use where they even looked through like the",
    "start": "1723440",
    "end": "1729260"
  },
  {
    "text": "macros Big Sur beta installation disk image and there I noticed this Macos update",
    "start": "1729260",
    "end": "1735080"
  },
  {
    "text": "assistant application this is a very powerful entitlement common.apple.rooter.install.heritable",
    "start": "1735080",
    "end": "1742640"
  },
  {
    "text": "and this basically means that it can access any zip protected files",
    "start": "1744020",
    "end": "1749620"
  },
  {
    "text": "and read or write to them of course the post-explanation still apply so you",
    "start": "1749620",
    "end": "1755059"
  },
  {
    "text": "cannot just write to anything but uh we also elevated a privileges to root",
    "start": "1755059",
    "end": "1760940"
  },
  {
    "text": "it's also heritable which is a nice bonus because we can just spawn a reverse shell we don't need to moderate",
    "start": "1760940",
    "end": "1766520"
  },
  {
    "text": "python within the process now what we can do with this",
    "start": "1766520",
    "end": "1772399"
  },
  {
    "text": "for example we can read the email or the messages database or the Safari history of all users",
    "start": "1772399",
    "end": "1779740"
  },
  {
    "text": "we can grant ourselves permission to use the webcam or the microphone of the user without the user have to having to",
    "start": "1779840",
    "end": "1786140"
  },
  {
    "text": "approve that you can also persist very well on the system because we can could write",
    "start": "1786140",
    "end": "1792380"
  },
  {
    "text": "ourselves to a set protected location because for example of providing mobile removal tool and then we we would be",
    "start": "1792380",
    "end": "1799100"
  },
  {
    "text": "launched when the applications already next starts and it would be",
    "start": "1799100",
    "end": "1804260"
  },
  {
    "text": "quite difficult for Apple to remove us or basically Apple could remove us with any fire scanners or something like that",
    "start": "1804260",
    "end": "1811039"
  },
  {
    "text": "would not be able to remove us and then finally we could also learn the",
    "start": "1811039",
    "end": "1816559"
  },
  {
    "text": "kernel extension without approval by the user so normally when you install a new",
    "start": "1816559",
    "end": "1821659"
  },
  {
    "text": "kernel extension you get this prompt and it usually really needs to click a couple of times to approve a new kernel",
    "start": "1821659",
    "end": "1827120"
  },
  {
    "text": "extension that we can just ride to the database of approved kernel extensions and then we",
    "start": "1827120",
    "end": "1833539"
  },
  {
    "text": "would automatically be loaded now we still need to have a relatively signed kernel extension and kernel",
    "start": "1833539",
    "end": "1841279"
  },
  {
    "text": "extension signing certificates are pretty hard to get Apple's",
    "start": "1841279",
    "end": "1847460"
  },
  {
    "text": "deprecating it so it's not very easy to get one but you might be able to find the film and welcome or extension in",
    "start": "1847460",
    "end": "1853520"
  },
  {
    "text": "just any kernel extension at all with the vulnerability and we could load that and Export it and then we would have",
    "start": "1853520",
    "end": "1858740"
  },
  {
    "text": "full kernel Cloud execution but even without that we would already have access to all set protected files",
    "start": "1858740",
    "end": "1865520"
  },
  {
    "text": "so even this up to this point would already basically have fully copyright",
    "start": "1865520",
    "end": "1870980"
  },
  {
    "text": "all of the sensitive information on the system",
    "start": "1870980",
    "end": "1875799"
  },
  {
    "text": "now I have this video to demonstrate this attack and this is on Mac OS 12.3 I think so",
    "start": "1876080",
    "end": "1882080"
  },
  {
    "text": "sandbox Escape still works and first you demonstrate that uh application really",
    "start": "1882080",
    "end": "1887179"
  },
  {
    "text": "is sandboxed so it goes through the three different steps here this one was quite fast privilege",
    "start": "1887179",
    "end": "1894380"
  },
  {
    "text": "escalation is a little bit slower because it needs to mount the disk image and then perform the installation",
    "start": "1894380",
    "end": "1901039"
  },
  {
    "text": "three to five you see it on the desktop there might be able to make it a little bit more subtle but it didn't bother",
    "start": "1901039",
    "end": "1907039"
  },
  {
    "text": "with that and then I would sit bypass should now spawn a shell",
    "start": "1907039",
    "end": "1913340"
  },
  {
    "text": "as you can see it's a root shell but also to demonstrate that we have also bypassed the zip file system",
    "start": "1913340",
    "end": "1918740"
  },
  {
    "text": "restrictions and go to the system policy configuration directory which is where",
    "start": "1918740",
    "end": "1923899"
  },
  {
    "text": "the approved kernel extensions are stored so very sensitive directory and as you can see we can create a new file",
    "start": "1923899",
    "end": "1930559"
  },
  {
    "text": "here [Applause] [Music]",
    "start": "1930559",
    "end": "1936790"
  },
  {
    "text": "[Applause]",
    "start": "1936790",
    "end": "1941899"
  },
  {
    "text": "so how was this fixed um so with that new method I showed that",
    "start": "1941899",
    "end": "1948980"
  },
  {
    "text": "start Apple third-party developers can indicate that their application only supports secure",
    "start": "1948980",
    "end": "1955640"
  },
  {
    "text": "objects a secure deserialization for their safe state",
    "start": "1955640",
    "end": "1960860"
  },
  {
    "text": "Apple has already enabled this for all of their own applications at existing applications might want to",
    "start": "1960860",
    "end": "1967820"
  },
  {
    "text": "store custom objects in their state so that's why this delicate method was needed because then that object would",
    "start": "1967820",
    "end": "1975679"
  },
  {
    "text": "break if Apple enables this for all applications um I'm not completely clear if it's",
    "start": "1975679",
    "end": "1982279"
  },
  {
    "text": "still exploitable if the application doesn't try to use that feature and I haven't completely",
    "start": "1982279",
    "end": "1988480"
  },
  {
    "text": "tested that with the release this was reported to Apple on December",
    "start": "1988480",
    "end": "1995059"
  },
  {
    "text": "4th in 2020. and then we fix the sandbox Escape quite early in 11.3 in April",
    "start": "1995059",
    "end": "2002440"
  },
  {
    "text": "and then they introduced The Fix together with the release of macro Monterey oh our thoughts up to a week ago that",
    "start": "2002440",
    "end": "2009760"
  },
  {
    "text": "they didn't export is fixed to Big Sur and Catalina because it was not originally in the release notes or in",
    "start": "2009760",
    "end": "2016779"
  },
  {
    "text": "the security advisories of Apple but then last week I was composing my slides I noticed that they added it to",
    "start": "2016779",
    "end": "2024039"
  },
  {
    "text": "the Catalina release notes in May so the Catalina release from octo where",
    "start": "2024039",
    "end": "2030100"
  },
  {
    "text": "they updated it in May to include this I'll miss that but in the Big Sur release notes have",
    "start": "2030100",
    "end": "2036460"
  },
  {
    "text": "not been updated so it's not listed there but last week I got a spontaneous email",
    "start": "2036460",
    "end": "2042519"
  },
  {
    "text": "from Apple that congratulations on your black hat talk",
    "start": "2042519",
    "end": "2047799"
  },
  {
    "text": "which would you like to tell us what you're going to talk about we might be able to provide feedback so I asked well",
    "start": "2047799",
    "end": "2053020"
  },
  {
    "text": "did you fix it in these other releases and then just uh two hours ago or something like that they",
    "start": "2053020",
    "end": "2059138"
  },
  {
    "text": "told me that it should be fixed in Big Sur that was not enough time for me to verify this so I don't know",
    "start": "2059139",
    "end": "2067118"
  },
  {
    "text": "supposedly it is fixed in both older versions",
    "start": "2067119",
    "end": "2072838"
  },
  {
    "text": "so to conclude um Macos has security boundaries between processes and these are very important",
    "start": "2073419",
    "end": "2079540"
  },
  {
    "text": "for the security of the system and each process injection vulnerabilities can now be used to break",
    "start": "2079540",
    "end": "2084940"
  },
  {
    "text": "those boundaries the CFE 2021",
    "start": "2084940",
    "end": "2090060"
  },
  {
    "text": "3873 was a process injection filamentability affecting basically all applications using App kits",
    "start": "2090060",
    "end": "2096700"
  },
  {
    "text": "and we use this vulnerability to escape the sandbox Elevate privileges to root and then bypassing the zip file system",
    "start": "2096700",
    "end": "2103780"
  },
  {
    "text": "restrictions and it's fixed in October 2021",
    "start": "2103780",
    "end": "2109480"
  },
  {
    "text": "now some key takeaways here and the macro security keeps adding more and more security layers",
    "start": "2109480",
    "end": "2116079"
  },
  {
    "text": "more and more to defend against attacks by malware but adding those new layers to an",
    "start": "2116079",
    "end": "2122740"
  },
  {
    "text": "established system is quite hard because there's all of these parts that have been written before these new security",
    "start": "2122740",
    "end": "2128440"
  },
  {
    "text": "requirements and it's really hard to investigate the entire system anytime anytime you make a",
    "start": "2128440",
    "end": "2135160"
  },
  {
    "text": "change like this so this code that was written before there was any attack service here it's not certainly a tech service because you",
    "start": "2135160",
    "end": "2141700"
  },
  {
    "text": "can attack other applications and also an important point there I think is that the effort of attackers",
    "start": "2141700",
    "end": "2147880"
  },
  {
    "text": "may not increase if you add more layers if you can just use the same bug to bypass all of those layers or you might",
    "start": "2147880",
    "end": "2154839"
  },
  {
    "text": "be able to find a trick to skip certain layers finally have some references for yeah",
    "start": "2154839",
    "end": "2162160"
  },
  {
    "text": "other stuff that I used for this talk um Apple's documentation and divide up",
    "start": "2162160",
    "end": "2168460"
  },
  {
    "text": "from Elias morat for example now if you want to read more about this",
    "start": "2168460",
    "end": "2175180"
  },
  {
    "text": "we will publish a write-up of this vulnerability with a lot more technical details sometime in the next couple",
    "start": "2175180",
    "end": "2180339"
  },
  {
    "text": "couple of days but if you have any questions now then please let me know",
    "start": "2180339",
    "end": "2186950"
  },
  {
    "text": "[Music]",
    "start": "2186950",
    "end": "2190060"
  },
  {
    "text": "[Music]",
    "start": "2193900",
    "end": "2197010"
  }
]