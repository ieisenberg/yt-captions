[
  {
    "text": "so in this talk I will introduce U autistic uh method to generate and",
    "start": "80",
    "end": "7480"
  },
  {
    "text": "verify the sematic signatures and this one can be useful to detect the",
    "start": "7480",
    "end": "12719"
  },
  {
    "text": "metamorphic mware and my name is looking for",
    "start": "12719",
    "end": "18279"
  },
  {
    "text": "coing okay first I will talk a little bit about the motivation behind my talk",
    "start": "19320",
    "end": "25840"
  },
  {
    "text": "so people in Industry uh always",
    "start": "25840",
    "end": "30960"
  },
  {
    "text": "criticize antivirus or AV in short because they cannot detect malware",
    "start": "30960",
    "end": "36360"
  },
  {
    "text": "timely and properly and one of the area that um I suffer most is that they",
    "start": "36360",
    "end": "44280"
  },
  {
    "text": "cannot detect metamorphic meare so uh metam metam metamorphic meare is a",
    "start": "44280",
    "end": "51559"
  },
  {
    "text": "concept that was introduced quite a long time ago about 15 years ago and so many",
    "start": "51559",
    "end": "57640"
  },
  {
    "text": "years pass but still nowadays if you cannot detect them properly and U metamorphic me was",
    "start": "57640",
    "end": "67080"
  },
  {
    "text": "introduced in they introduced many interesting concept to bypass the the",
    "start": "67080",
    "end": "72720"
  },
  {
    "text": "scanning signature employed by the AV and um this problem is",
    "start": "72720",
    "end": "79600"
  },
  {
    "text": "still uh happen now and in this uh",
    "start": "79600",
    "end": "84759"
  },
  {
    "text": "research I I propose another new method and and this one is called op6 and we",
    "start": "84759",
    "end": "92560"
  },
  {
    "text": "propose uh to use semantic signature that's different from the current signature in the AV and uh A6 can be",
    "start": "92560",
    "end": "99720"
  },
  {
    "text": "used to detect the metamorphic mware so we try to raise the bar higher so you",
    "start": "99720",
    "end": "106200"
  },
  {
    "text": "can show this problem somehow so in this talk I will first uh introduce the problems",
    "start": "106200",
    "end": "112479"
  },
  {
    "text": "shortly uh with a current inter and why they have so many problems to detect the",
    "start": "112479",
    "end": "118479"
  },
  {
    "text": "metamorphic mware and after that I introduce Otis and the",
    "start": "118479",
    "end": "124039"
  },
  {
    "text": "concept of semantic shates and how it can be used to uh detect the",
    "start": "124039",
    "end": "129239"
  },
  {
    "text": "metamorphics next I will uh explain how optic can generate the uh semantic",
    "start": "129239",
    "end": "136080"
  },
  {
    "text": "signatures and after that I have some light demo hope hopefully you can you",
    "start": "136080",
    "end": "141280"
  },
  {
    "text": "you like it and conclusion of the end of the",
    "start": "141280",
    "end": "146480"
  },
  {
    "text": "talk okay so uh m as a program that cause damage to the computer users and",
    "start": "146800",
    "end": "154519"
  },
  {
    "text": "one important thing about the ma m is that they propagate and multiply them",
    "start": "154519",
    "end": "160080"
  },
  {
    "text": "and the infect your machine and to detect the mware of course we use the",
    "start": "160080",
    "end": "165680"
  },
  {
    "text": "anus or AV and the um main method for",
    "start": "165680",
    "end": "170920"
  },
  {
    "text": "the AV to detect the mem is to use the signature so basically um the on the M",
    "start": "170920",
    "end": "178319"
  },
  {
    "text": "on a they have a huge database signature and each M hair has one signature inside",
    "start": "178319",
    "end": "184440"
  },
  {
    "text": "the database and when the AP want to detect the",
    "start": "184440",
    "end": "189799"
  },
  {
    "text": "the uh the mare they will scan the suspected file with some signatures",
    "start": "189799",
    "end": "196920"
  },
  {
    "text": "inside the database signature and if this signature match this file the a can",
    "start": "196920",
    "end": "202760"
  },
  {
    "text": "tell you that this file is infected by this mware and the signature is for that",
    "start": "202760",
    "end": "208360"
  },
  {
    "text": "mware and this this one thing we we can see that the signature is only about",
    "start": "208360",
    "end": "216000"
  },
  {
    "text": "syntactic why because signature can be a ranger of go extracted from somewhere",
    "start": "216000",
    "end": "222200"
  },
  {
    "text": "inside the mware and they they they take it as a signature or more flexible they",
    "start": "222200",
    "end": "229280"
  },
  {
    "text": "can have another C signature is a in regular expression form or they can",
    "start": "229280",
    "end": "236519"
  },
  {
    "text": "combine with some logican or comb combination uh to have a more flexible",
    "start": "236519",
    "end": "244159"
  },
  {
    "text": "signature and that is a that's what clam a is",
    "start": "244159",
    "end": "249879"
  },
  {
    "text": "doing here's one shampo uh",
    "start": "250879",
    "end": "255400"
  },
  {
    "text": "signature I take this one from clamy so you can see that this one this",
    "start": "256919",
    "end": "262240"
  },
  {
    "text": "F they have a go right here and this go",
    "start": "262240",
    "end": "268040"
  },
  {
    "text": "uh this one mware this go this go we don't see that anywhere is the nor one F not anywhere and this this",
    "start": "268040",
    "end": "275000"
  },
  {
    "text": "go specific for this mware so they take this go out and consider it the",
    "start": "275000",
    "end": "282360"
  },
  {
    "text": "signature so if you match this signature with a particular file and you see you",
    "start": "282360",
    "end": "288600"
  },
  {
    "text": "match you can match it you can see that this file is is this m and this in this",
    "start": "288600",
    "end": "294479"
  },
  {
    "text": "case Jan do exchanger so this the signature for Jan do exchanger",
    "start": "294479",
    "end": "301638"
  },
  {
    "text": "uh however you can see that U the signature like this car is not very flexible because with each mware you you",
    "start": "302840",
    "end": "310720"
  },
  {
    "text": "need one signature right so they have a more flexible signature it's called",
    "start": "310720",
    "end": "317560"
  },
  {
    "text": "something like regular expression so here we have two mware five. x there and",
    "start": "317560",
    "end": "324319"
  },
  {
    "text": "7. X there and you can see that they have some C inside and this twoo",
    "start": "324319",
    "end": "331199"
  },
  {
    "text": "are very similar except for by in the mid you see the first part are same the",
    "start": "331199",
    "end": "338520"
  },
  {
    "text": "last part are same but the four by in the midd are different so they try to",
    "start": "338520",
    "end": "344000"
  },
  {
    "text": "combine these two signature into one and they have the signature here so they",
    "start": "344000",
    "end": "350039"
  },
  {
    "text": "they take the first part here last part here and some somehow in the in the",
    "start": "350039",
    "end": "356080"
  },
  {
    "text": "middle we have four bites and the four bites can be anything so with this regular expression",
    "start": "356080",
    "end": "361759"
  },
  {
    "text": "signature we can detect both seven and 7 and 5 so this signature can detect more",
    "start": "361759",
    "end": "367639"
  },
  {
    "text": "than onew right so it's more",
    "start": "367639",
    "end": "372520"
  },
  {
    "text": "flexible however all them are still syntactic and there are some problems with the syntactic signatures first uh",
    "start": "373400",
    "end": "381039"
  },
  {
    "text": "we need to update the signature for each version one mware because the mare when",
    "start": "381039",
    "end": "386199"
  },
  {
    "text": "they infect they can change themselves so each ver of the MW you need one signature and",
    "start": "386199",
    "end": "393560"
  },
  {
    "text": "because there are so many maw the signature dat place is getting bigger and become a major isues for",
    "start": "393560",
    "end": "400560"
  },
  {
    "text": "users the other problem is that it's very hard to catch up with a new waveware because there are too many",
    "start": "400560",
    "end": "406120"
  },
  {
    "text": "mware and we need a new signature for each mware and that is a big problem",
    "start": "406120",
    "end": "412080"
  },
  {
    "text": "finally the syntactic signature is very easy to be evaded by the metamorphic",
    "start": "412080",
    "end": "417479"
  },
  {
    "text": "mware so what is the metamorph mware okay uh this concept was first",
    "start": "417479",
    "end": "424919"
  },
  {
    "text": "introduced about 15 years ago in the mare name rexb for Windows 95 and metap",
    "start": "424919",
    "end": "432919"
  },
  {
    "text": "morphing m is designed specifically to defeat the syntactic signatures and you",
    "start": "432919",
    "end": "439080"
  },
  {
    "text": "can understand that when the m in go into your machine it try to infect many file as many as possible so suppose that",
    "start": "439080",
    "end": "447039"
  },
  {
    "text": "it in fact first five and second five so when when the me infect your your file",
    "start": "447039",
    "end": "452280"
  },
  {
    "text": "it will inject some code into each file right so the idea is that they don't the",
    "start": "452280",
    "end": "459560"
  },
  {
    "text": "they don't inject the same C into two file they they inject two different C",
    "start": "459560",
    "end": "464720"
  },
  {
    "text": "even they do the same thing so two different go transform one from another",
    "start": "464720",
    "end": "470759"
  },
  {
    "text": "do the same thing but being injected by different files and that is the concept",
    "start": "470759",
    "end": "476120"
  },
  {
    "text": "of the metap mware so we can see is that",
    "start": "476120",
    "end": "481319"
  },
  {
    "text": "uh metamorphic uh introduced many problems for the synthetic signatures why because",
    "start": "481319",
    "end": "488840"
  },
  {
    "text": "which each infection by metapic mware we need one separate",
    "start": "488840",
    "end": "495039"
  },
  {
    "text": "signatures and uh because the in theory the metamorphic mare can can generate a",
    "start": "495039",
    "end": "501599"
  },
  {
    "text": "infinite number of infection so we should have infinite number of",
    "start": "501599",
    "end": "507000"
  },
  {
    "text": "signatures and that make the uh the signature database very huge and",
    "start": "507000",
    "end": "513279"
  },
  {
    "text": "just understandable and second um it's not only that the database huge but met",
    "start": "513279",
    "end": "521200"
  },
  {
    "text": "moving mware can totally bypass the syntactic",
    "start": "521200",
    "end": "527399"
  },
  {
    "text": "signature okay here is how how the Met can defeat the syntactic signatures",
    "start": "530080",
    "end": "539399"
  },
  {
    "text": "so the metamorphic mware use many different techniques but I I will introduce just some the most popular",
    "start": "539959",
    "end": "546079"
  },
  {
    "text": "techniques so they use four transformation technique to to infect",
    "start": "546079",
    "end": "553000"
  },
  {
    "text": "your your your file first one uh the user transformation Tech name",
    "start": "553000",
    "end": "560040"
  },
  {
    "text": "insert de second one substitute instruction with equivalent instruction",
    "start": "560040",
    "end": "566240"
  },
  {
    "text": "and the third transformation technique is reorder instruction and finally they can combine all of the",
    "start": "566240",
    "end": "573160"
  },
  {
    "text": "those three method to make the the go",
    "start": "573160",
    "end": "578240"
  },
  {
    "text": "much more complicated first one what is the insert that",
    "start": "578240",
    "end": "584120"
  },
  {
    "text": "go that go here means that um when you have a Cod and have that go inside z c",
    "start": "584279",
    "end": "590640"
  },
  {
    "text": "is the code that if you remove it just nothing change there's no impact Z Cod",
    "start": "590640",
    "end": "595720"
  },
  {
    "text": "doesn't make any impact to your Cod and uh in insert that go method there are",
    "start": "595720",
    "end": "601000"
  },
  {
    "text": "four U small method first one insert that instruction second insert no",
    "start": "601000",
    "end": "608560"
  },
  {
    "text": "operation semantic instruction the third one insert unreachable Cod and the last",
    "start": "608560",
    "end": "613959"
  },
  {
    "text": "one insert Branch instruction to the next instruction now we go into each method first one insert Des instruction",
    "start": "613959",
    "end": "623440"
  },
  {
    "text": "so we can see on the on the left side the original go is copy",
    "start": "623440",
    "end": "630560"
  },
  {
    "text": "555 to edx and when the Met metamorphic",
    "start": "630560",
    "end": "635639"
  },
  {
    "text": "transform this go it insert another instruction before that",
    "start": "635639",
    "end": "641480"
  },
  {
    "text": "copy 30 to edx so you can see that this one's that instruction",
    "start": "641480",
    "end": "647279"
  },
  {
    "text": "right because below we copy 555 to index so this one is that code you can you can",
    "start": "647279",
    "end": "653480"
  },
  {
    "text": "remove that there's no problem no impact but you can see the transform go look",
    "start": "653480",
    "end": "659560"
  },
  {
    "text": "very different so you can see that the left go and the right go they do the same thing but syntactically they look",
    "start": "659560",
    "end": "667800"
  },
  {
    "text": "different okay another method is insert knob semantic",
    "start": "669839",
    "end": "675760"
  },
  {
    "text": "instruction so the idea is that theare when they transform the C the insert",
    "start": "675760",
    "end": "681560"
  },
  {
    "text": "some Co that does actually does nothing so here original go is on the left side",
    "start": "681560",
    "end": "687880"
  },
  {
    "text": "and when that uh the M transform it it insert two instruction one before and",
    "start": "687880",
    "end": "693240"
  },
  {
    "text": "one after and you can see move from EDI to Ed does nothing right move uh",
    "start": "693240",
    "end": "700399"
  },
  {
    "text": "exchange CX with CX do nothing exchange one with itself so you can see that the",
    "start": "700399",
    "end": "706880"
  },
  {
    "text": "left C and the right C looks very different but they do the same thing",
    "start": "706880",
    "end": "713720"
  },
  {
    "text": "right so the ter thought is insert unre go and",
    "start": "715920",
    "end": "722720"
  },
  {
    "text": "met uh metamorphic mare use a lot so here you can see the on the left side",
    "start": "722720",
    "end": "728120"
  },
  {
    "text": "the original go and here when it transform itself it",
    "start": "728120",
    "end": "733480"
  },
  {
    "text": "insert a jam lbone to here and in",
    "start": "733480",
    "end": "739680"
  },
  {
    "text": "between jko it can beit long and you can see that this TKO is",
    "start": "739680",
    "end": "747160"
  },
  {
    "text": "not doesn't work it's not EX it's not unreachable but you can see the",
    "start": "747160",
    "end": "753959"
  },
  {
    "text": "left side and the right side looks so different even even they do exactly the same",
    "start": "753959",
    "end": "761000"
  },
  {
    "text": "thing the last one insert a branch instruction to the next",
    "start": "764320",
    "end": "769519"
  },
  {
    "text": "instruction you can see another transformation on the right side so we",
    "start": "769519",
    "end": "774839"
  },
  {
    "text": "insert a jump here jump to the next one which it does nothing but the go looks",
    "start": "774839",
    "end": "781639"
  },
  {
    "text": "very",
    "start": "781639",
    "end": "783880"
  },
  {
    "text": "different okay that is the first method insert Deco a very nice uh transformation",
    "start": "787240",
    "end": "793839"
  },
  {
    "text": "method for metamorphic me second one uh substitute instruction",
    "start": "793839",
    "end": "800959"
  },
  {
    "text": "with equivalent instruction so see here one example on",
    "start": "800959",
    "end": "806519"
  },
  {
    "text": "the left side is original Cod and on the right side the transform Cod you can see",
    "start": "806519",
    "end": "811600"
  },
  {
    "text": "that here the try to substitute move zero to SII ESI with",
    "start": "811600",
    "end": "821160"
  },
  {
    "text": "move one to ESI and after decrease it so you can see that this one and this one",
    "start": "821160",
    "end": "826639"
  },
  {
    "text": "they are the same thing copy zero toi but it looks it looks very different and",
    "start": "826639",
    "end": "832360"
  },
  {
    "text": "here move 1 2 3 4 0 0 to edx which can",
    "start": "832360",
    "end": "838320"
  },
  {
    "text": "be do can be done with copy 1 2 3 4 and something tox and after that is zero DX",
    "start": "838320",
    "end": "845279"
  },
  {
    "text": "DX which make the the the last two by zero right so this one and this two in",
    "start": "845279",
    "end": "853680"
  },
  {
    "text": "they do exactly the same thing but you can see left side and right side are very",
    "start": "853680",
    "end": "859240"
  },
  {
    "text": "different the third method reorder instruction",
    "start": "863440",
    "end": "868920"
  },
  {
    "text": "so here also we have original go and transform Cod so on the left side we",
    "start": "870759",
    "end": "876040"
  },
  {
    "text": "have copy zero to ESI and after that copy something to edx and when they",
    "start": "876040",
    "end": "882279"
  },
  {
    "text": "transform the code the transform they reorder these true instruction and you can see right side",
    "start": "882279",
    "end": "888839"
  },
  {
    "text": "left side they do exactly the same thing but syntactically they they different",
    "start": "888839",
    "end": "894399"
  },
  {
    "text": "right",
    "start": "894399",
    "end": "897399"
  },
  {
    "text": "and finally we come you can combine the first the second and the third uh method",
    "start": "899759",
    "end": "906199"
  },
  {
    "text": "uh which are a and you can generate a very completed",
    "start": "906199",
    "end": "911600"
  },
  {
    "text": "car so you can see that U metamorphic M really introduce a big problem for the",
    "start": "914120",
    "end": "921399"
  },
  {
    "text": "for the original for the Lego uh signature scanning AV",
    "start": "921399",
    "end": "929079"
  },
  {
    "text": "you can see that so far no a can detect the met metalysis so the question is how",
    "start": "929600",
    "end": "936959"
  },
  {
    "text": "to detect metamorphing mware so you can see that uh we have F transformation here so we break it down and we try to",
    "start": "936959",
    "end": "945040"
  },
  {
    "text": "Sol each problem so we want to we want to detect the insert that go and to",
    "start": "945040",
    "end": "950720"
  },
  {
    "text": "detect the subsid with equivalent instuction you want to detect the insert branch in inection to next injection and",
    "start": "950720",
    "end": "958519"
  },
  {
    "text": "finally try to um detect the reorder instruction and how to Sol each of them",
    "start": "958519",
    "end": "964920"
  },
  {
    "text": "and if you can Sol all of them you can solve the",
    "start": "964920",
    "end": "968800"
  },
  {
    "text": "problems okay so the detecting me is a very hard problem and in this research",
    "start": "971160",
    "end": "979759"
  },
  {
    "text": "we just try to solve the core problem not everything but the cor problem which",
    "start": "979759",
    "end": "984800"
  },
  {
    "text": "is that given two different Cod like in the assembly form uh you see here can we",
    "start": "984800",
    "end": "993199"
  },
  {
    "text": "answer that the left go and right go they do the same thing or not so you",
    "start": "993199",
    "end": "998839"
  },
  {
    "text": "answer answer yes or no we don't we don't need answer maybe just yes or no",
    "start": "998839",
    "end": "1004680"
  },
  {
    "text": "and if we can uh have the answer that the left go and the right go do the same",
    "start": "1004680",
    "end": "1011759"
  },
  {
    "text": "thing we can consider this one the signature right and all the go just",
    "start": "1011759",
    "end": "1016920"
  },
  {
    "text": "transform from here from this go to something else that match with this one can be considered to be from the",
    "start": "1016920",
    "end": "1024880"
  },
  {
    "text": "same meare from from the same metamorphic mare right so our problem",
    "start": "1024880",
    "end": "1030520"
  },
  {
    "text": "here that we try to compare two sequence of machine go and we can we need the",
    "start": "1030520",
    "end": "1036280"
  },
  {
    "text": "answer yes or no is that they are equivalent or",
    "start": "1036280",
    "end": "1041600"
  },
  {
    "text": "not and here comes the op solution",
    "start": "1041799",
    "end": "1047360"
  },
  {
    "text": "so with OP we propose a semantic signature not a syntactic signature and",
    "start": "1049400",
    "end": "1055760"
  },
  {
    "text": "this one is another approach to verify the suspected file so we propose a",
    "start": "1055760",
    "end": "1061559"
  },
  {
    "text": "schematic signature to fix the problem of syntactic signature and what is the",
    "start": "1061559",
    "end": "1068640"
  },
  {
    "text": "semantic signature semantic signature is something that contain the semantics of",
    "start": "1068640",
    "end": "1073799"
  },
  {
    "text": "the code to be verifi not the syntactic and the advantage of sematic signature",
    "start": "1073799",
    "end": "1079760"
  },
  {
    "text": "is that we can detect metamorphics that when they transform themselves they keep",
    "start": "1079760",
    "end": "1085360"
  },
  {
    "text": "the behavior unchanged so if the keep behavior in change we can detect that",
    "start": "1085360",
    "end": "1090640"
  },
  {
    "text": "and if you can uh detect the transform C so we don't need to update the signature",
    "start": "1090640",
    "end": "1095840"
  },
  {
    "text": "for each infection of the metab any anymore right we don't need to update U",
    "start": "1095840",
    "end": "1102159"
  },
  {
    "text": "the new signature for each infection so it's very good",
    "start": "1102159",
    "end": "1108840"
  },
  {
    "text": "okay so here's how we create the santic uh first one we create the stic",
    "start": "1110440",
    "end": "1116440"
  },
  {
    "text": "on the machine code the binary code and the signature of the code is actually",
    "start": "1116440",
    "end": "1122760"
  },
  {
    "text": "the formula the first other logic formula of the Cod which express the",
    "start": "1122760",
    "end": "1128880"
  },
  {
    "text": "semantics of the Cod and after that we use theorem Pro to compare the two",
    "start": "1128880",
    "end": "1134760"
  },
  {
    "text": "signatures which are actually the two logical formulas so you can see here on the diagram here",
    "start": "1134760",
    "end": "1143240"
  },
  {
    "text": "we have two go this one consider the signature for the mware on the transform",
    "start": "1143240",
    "end": "1149039"
  },
  {
    "text": "Cod so with the signature we generate the logic and formula and we consider",
    "start": "1149039",
    "end": "1155200"
  },
  {
    "text": "this one semetic signature and when you come want to verify something with this signature you",
    "start": "1155200",
    "end": "1162760"
  },
  {
    "text": "also do the same thing we also generate the rical formula for this go after that",
    "start": "1162760",
    "end": "1168400"
  },
  {
    "text": "we fit these two formulas to the theorem prover and this one can tell",
    "start": "1168400",
    "end": "1174039"
  },
  {
    "text": "you these two formula are equivalent or not which mean these two go are",
    "start": "1174039",
    "end": "1180760"
  },
  {
    "text": "equivalent or not and if we have the yes or no question uh is have answer as yes",
    "start": "1180760",
    "end": "1186400"
  },
  {
    "text": "or no here we you can show our problems so what is a semantic signature",
    "start": "1186400",
    "end": "1193039"
  },
  {
    "text": "for for the go here are some uh very simple example so basically the",
    "start": "1193039",
    "end": "1199320"
  },
  {
    "text": "forther simple Cod like arithmetic or moving data instuction we incode some like this so",
    "start": "1199320",
    "end": "1207240"
  },
  {
    "text": "on the left side we have the meis copy 48 to ESI copy 207 to edx and The",
    "start": "1207240",
    "end": "1216440"
  },
  {
    "text": "Logical formula for this SC is ESI = to 48 and edx equal to 207 and that is The",
    "start": "1216440",
    "end": "1225400"
  },
  {
    "text": "Logical formula for the left go right and in case the Cod contain the control",
    "start": "1225400",
    "end": "1232360"
  },
  {
    "text": "flow we break down the Cod into the control flow graph with uh basic block",
    "start": "1232360",
    "end": "1238159"
  },
  {
    "text": "inside and we follow we follow the control flow first exle here Miracle",
    "start": "1238159",
    "end": "1243960"
  },
  {
    "text": "here Here We compare eax to 32 if e is 32 we jump here and copy edx to e x",
    "start": "1243960",
    "end": "1254320"
  },
  {
    "text": "otherwise we saw isi with is Si right and The Logical formula consider two",
    "start": "1254320",
    "end": "1261400"
  },
  {
    "text": "Branch if ex is 32 we asside X to e x or",
    "start": "1261400",
    "end": "1269080"
  },
  {
    "text": "if e x is not 32 we set Z to ESI",
    "start": "1269080",
    "end": "1274279"
  },
  {
    "text": "right that's how we create the loal formulas that's all these are very",
    "start": "1274279",
    "end": "1280520"
  },
  {
    "text": "simple exle but you can imagine what it does",
    "start": "1280520",
    "end": "1287720"
  },
  {
    "text": "okay but there something to be careful because note that here we have logical",
    "start": "1288679",
    "end": "1297039"
  },
  {
    "text": "formul and can you tell me anyway tell me is there anything wrong with",
    "start": "1297039",
    "end": "1303559"
  },
  {
    "text": "this we have the left C gole on the left side we have logical formula for it for it on the on the right side anything",
    "start": "1303559",
    "end": "1310279"
  },
  {
    "text": "wrong here what's",
    "start": "1310279",
    "end": "1316960"
  },
  {
    "text": "wrong what you are doing here is a logical formula not aide 48 to ESI not a",
    "start": "1317039",
    "end": "1324760"
  },
  {
    "text": "side 207 to ESI so that means this one is not",
    "start": "1324760",
    "end": "1330039"
  },
  {
    "text": "acceptable you cannot have 48 ESI s 48 and later ESI is 207 this conflict in",
    "start": "1330039",
    "end": "1337520"
  },
  {
    "text": "The Logical formula logical formula doesn't accept the conflict so what you're doing here is not aide something",
    "start": "1337520",
    "end": "1344120"
  },
  {
    "text": "to variable but you has a formula logic and formula and cannot be conflict right",
    "start": "1344120",
    "end": "1350720"
  },
  {
    "text": "so how to solve this problem here's how we Sol problem we use",
    "start": "1350720",
    "end": "1357320"
  },
  {
    "text": "a method named single static assignment which which is borrow from compiler",
    "start": "1357320",
    "end": "1363039"
  },
  {
    "text": "technique so whenever we we we have the new value for the",
    "start": "1363039",
    "end": "1368880"
  },
  {
    "text": "aviable we don't override it but we create the new variable so in this case",
    "start": "1368880",
    "end": "1374720"
  },
  {
    "text": "I create the new esi1 so we have es I on equal to 48 and",
    "start": "1374720",
    "end": "1381960"
  },
  {
    "text": "esi1 uh ESI equal to 48 and Es i1 equal to 207 and after this only the reference",
    "start": "1381960",
    "end": "1389919"
  },
  {
    "text": "to es SII should reference to esi1 right so there's no more conflict",
    "start": "1389919",
    "end": "1397400"
  },
  {
    "text": "and we use single static assignment to solve the problems so this one uh we must be very",
    "start": "1397400",
    "end": "1404799"
  },
  {
    "text": "careful",
    "start": "1404799",
    "end": "1407799"
  },
  {
    "text": "okay so um looks uh very nice but there are many chall to to implement the ideas",
    "start": "1414200",
    "end": "1421720"
  },
  {
    "text": "so there are two challens the first machine instruction can overlap in semantics for example move ebx uh to e",
    "start": "1421720",
    "end": "1430360"
  },
  {
    "text": "is exactly what uh loot load effective arrest from ebx to ex here right so we",
    "start": "1430360",
    "end": "1437360"
  },
  {
    "text": "have a problem because the Intel uh Intel instruction set are very complicated and they have many overlap",
    "start": "1437360",
    "end": "1444000"
  },
  {
    "text": "instruction and that make a analyze it analy very complicated the second problem is that",
    "start": "1444000",
    "end": "1450520"
  },
  {
    "text": "the instruction in cell may have multiple implicit side effect for exle",
    "start": "1450520",
    "end": "1455760"
  },
  {
    "text": "puts e actually it does many inside and what it does that it copy e to the stack",
    "start": "1455760",
    "end": "1463440"
  },
  {
    "text": "and after that it move ESP the stack poter down for bar right so there are",
    "start": "1463440",
    "end": "1469120"
  },
  {
    "text": "many side effects inside one one simple instruction so to show this those",
    "start": "1469120",
    "end": "1476360"
  },
  {
    "text": "problems we first we first uh first we need to normalize machine go to a",
    "start": "1476360",
    "end": "1482399"
  },
  {
    "text": "intermediate representation language or ir and now we need the IR and we need to",
    "start": "1482399",
    "end": "1489360"
  },
  {
    "text": "normalize the Cod to IR so we have some requirements for the I first I must be",
    "start": "1489360",
    "end": "1494520"
  },
  {
    "text": "very simple no overlap second I must Express each",
    "start": "1494520",
    "end": "1499559"
  },
  {
    "text": "sematics explicitly without side effect we don't we don't want any side effect inside the the IR right and finally I",
    "start": "1499559",
    "end": "1507600"
  },
  {
    "text": "should support static single assignment SSI because we need to generate the",
    "start": "1507600",
    "end": "1513080"
  },
  {
    "text": "logic and formula from the from the normaliz scope right so we have three",
    "start": "1513080",
    "end": "1518720"
  },
  {
    "text": "requirements and here's what we work we I detail the the the diagram here so",
    "start": "1518720",
    "end": "1525799"
  },
  {
    "text": "first we need to translate machine code we need to normalize the machine Cod to",
    "start": "1525799",
    "end": "1531200"
  },
  {
    "text": "our IR after that somehow we need to optimize it later I will explain you how",
    "start": "1531200",
    "end": "1538120"
  },
  {
    "text": "why we need to optimize it after that from the normalize and optimize IR code",
    "start": "1538120",
    "end": "1543799"
  },
  {
    "text": "here we generate The Logical formulas and we do the same thing with the Cod that we want to verify again the",
    "start": "1543799",
    "end": "1550039"
  },
  {
    "text": "signatures everything will be fit to the theam approval in the last step is it",
    "start": "1550039",
    "end": "1555399"
  },
  {
    "text": "clear so the question is that we need the IR",
    "start": "1555399",
    "end": "1562520"
  },
  {
    "text": "to normalize the go so the big question is which IR uh the next step I introduce lvm",
    "start": "1562520",
    "end": "1569559"
  },
  {
    "text": "project and you will see why lvm is important for for",
    "start": "1569559",
    "end": "1576840"
  },
  {
    "text": "op6 anybody here already heard about lvm or use",
    "start": "1577720",
    "end": "1582810"
  },
  {
    "text": "[Music] a no anybody you here use a",
    "start": "1582810",
    "end": "1589320"
  },
  {
    "text": "ma OS do you have a r program in MA OS and",
    "start": "1589320",
    "end": "1594520"
  },
  {
    "text": "compile that so the question is because um",
    "start": "1594520",
    "end": "1600240"
  },
  {
    "text": "nowadays the compiler on the mosos 6 they own use lvm be as a compiler",
    "start": "1600240",
    "end": "1606159"
  },
  {
    "text": "techniqu and lvm project is open source project for the compiler and rvm the r",
    "start": "1606159",
    "end": "1612760"
  },
  {
    "text": "is there andm project um they offer a set of Frameworks so you can build the compiler very easily very quickly and",
    "start": "1612760",
    "end": "1621520"
  },
  {
    "text": "the core of the lvm is a lvm IR they have I inside and on top of the I we",
    "start": "1621520",
    "end": "1627279"
  },
  {
    "text": "have a lot of optimization module ready to use and everything is ready in",
    "start": "1627279",
    "end": "1633360"
  },
  {
    "text": "open so take a short look at the look at the compiler model here you can see that",
    "start": "1633360",
    "end": "1639679"
  },
  {
    "text": "uh in the normal compiler We compare uh you need to",
    "start": "1639679",
    "end": "1645600"
  },
  {
    "text": "compile from Source go to the machine go and the comp actually there are few",
    "start": "1645600",
    "end": "1650840"
  },
  {
    "text": "three components inside three key component first the front end which translates the short SC to the",
    "start": "1650840",
    "end": "1657720"
  },
  {
    "text": "IR and after that the comp has a second component to optimize the IR and after",
    "start": "1657720",
    "end": "1664360"
  },
  {
    "text": "this step the optimize IR will be compile by the back end to the machine Cod that's own the compiler is doing to",
    "start": "1664360",
    "end": "1673720"
  },
  {
    "text": "to compile the Cod for you and here lvm the use the same uh model but they break",
    "start": "1673720",
    "end": "1681240"
  },
  {
    "text": "three components here and they creat a very clean and very um explicit",
    "start": "1681240",
    "end": "1688039"
  },
  {
    "text": "interface between three three components so we have here first we we has the",
    "start": "1688039",
    "end": "1694440"
  },
  {
    "text": "front end lvm front end lvm front end will compare your sour scope to lvm ir",
    "start": "1694440",
    "end": "1701840"
  },
  {
    "text": "and after that rmm I will be fitted to the the second component rvm",
    "start": "1701840",
    "end": "1708640"
  },
  {
    "text": "Optimizer and after that Optimizer will send the optimize IR C to the back end",
    "start": "1708640",
    "end": "1715799"
  },
  {
    "text": "and after that back and we generate it we generate the the machine Cod for you",
    "start": "1715799",
    "end": "1721640"
  },
  {
    "text": "and here's the lvm model and you can see the important that they separate the",
    "start": "1721640",
    "end": "1727240"
  },
  {
    "text": "front end optimization and back end and the idea Y is very useful because they",
    "start": "1727240",
    "end": "1734919"
  },
  {
    "text": "have they introduce very clean and separately component which can be reused",
    "start": "1734919",
    "end": "1740960"
  },
  {
    "text": "so you imagine that if you want to um rise a new programing language you just",
    "start": "1740960",
    "end": "1746960"
  },
  {
    "text": "need to uh program your front end you translate the your programming",
    "start": "1746960",
    "end": "1752720"
  },
  {
    "text": "language to the lvm and that's it you don't need to do anything because after",
    "start": "1752720",
    "end": "1758840"
  },
  {
    "text": "that you can reuse the optimizer already available and you can reuse the back end already available so what you need to do",
    "start": "1758840",
    "end": "1765919"
  },
  {
    "text": "is just Rite your front end that's it very easy and that make uh make the",
    "start": "1765919",
    "end": "1772159"
  },
  {
    "text": "compiler programing very much much easier than",
    "start": "1772159",
    "end": "1777440"
  },
  {
    "text": "before so the cor component of lvm is the I so the lvm I is the independent of",
    "start": "1778000",
    "end": "1786080"
  },
  {
    "text": "the target architecture which which which mean it doesn't depend on the your",
    "start": "1786080",
    "end": "1791159"
  },
  {
    "text": "your your machine it can be x86 it can be power PC it can be M and it's a",
    "start": "1791159",
    "end": "1798760"
  },
  {
    "text": "uh reduce instruction set which mean uh they have very few instruction not like the Intel and it's a resistor based",
    "start": "1798760",
    "end": "1806600"
  },
  {
    "text": "machine and they have infinite numberers virtual resistor and the resistor also have uh",
    "start": "1806600",
    "end": "1815320"
  },
  {
    "text": "type like high level programming language like void float",
    "start": "1815320",
    "end": "1820480"
  },
  {
    "text": "integers and it also have poters it type poters can be integer integers poter on",
    "start": "1820480",
    "end": "1827519"
  },
  {
    "text": "FL or anything and here is important lvm",
    "start": "1827519",
    "end": "1833519"
  },
  {
    "text": "support SSA single single static assignment by Nature by default and the",
    "start": "1833519",
    "end": "1840799"
  },
  {
    "text": "basic block of lvm has only single entry and single exit and finally when you",
    "start": "1840799",
    "end": "1846760"
  },
  {
    "text": "compile some Sour code to lvm IR we have lvm B",
    "start": "1846760",
    "end": "1852880"
  },
  {
    "text": "code okay next rvm instruction uh lvm is very simple it U only introduce 30 31",
    "start": "1855159",
    "end": "1863320"
  },
  {
    "text": "instruction it's very simple design to be very simple no overlap it's support arithmetic",
    "start": "1863320",
    "end": "1870279"
  },
  {
    "text": "operation and on integers and flood you can add sh multiple",
    "start": "1870279",
    "end": "1877159"
  },
  {
    "text": "divide remainder it has a bitwise operation so you can and or saw and anything like",
    "start": "1877159",
    "end": "1883880"
  },
  {
    "text": "like on Intel it has branch instuction which is low level control",
    "start": "1883880",
    "end": "1889039"
  },
  {
    "text": "flow but this one remember one still unst structure very similar to",
    "start": "1889039",
    "end": "1894320"
  },
  {
    "text": "assembly like what you see on the Intel and um just one thing uh we need",
    "start": "1894320",
    "end": "1902159"
  },
  {
    "text": "to know the branch Target must be explicit you cannot you can have you cannot have U indirect jump inm not like",
    "start": "1902159",
    "end": "1910679"
  },
  {
    "text": "in Intel in so remember that on Intel instruction set is they allow the indirect jum right but on lvm they don't",
    "start": "1910679",
    "end": "1918000"
  },
  {
    "text": "allow that and they have some instruction for the memory accet load",
    "start": "1918000",
    "end": "1923880"
  },
  {
    "text": "store some inst for compare know compare and this one is T to support",
    "start": "1923880",
    "end": "1933200"
  },
  {
    "text": "SSA okay here's a shle very simple",
    "start": "1933440",
    "end": "1939519"
  },
  {
    "text": "simple Al here on the left side we have C and we compile this CLE to lvm on the",
    "start": "1939519",
    "end": "1945600"
  },
  {
    "text": "right side here you can see here so here is a function of",
    "start": "1945600",
    "end": "1951000"
  },
  {
    "text": "lvm and here is a argument for the function on the left side we compare if",
    "start": "1951000",
    "end": "1957760"
  },
  {
    "text": "a is zero we return B and on the right side we we have lvm instruction here to",
    "start": "1957760",
    "end": "1964600"
  },
  {
    "text": "compare a to zero and is it equal or not if it's",
    "start": "1964600",
    "end": "1969720"
  },
  {
    "text": "equal we jump to done here if it's not",
    "start": "1969720",
    "end": "1974919"
  },
  {
    "text": "equal you jump to the recursive here and you can see",
    "start": "1974919",
    "end": "1981960"
  },
  {
    "text": "that's that's the lvm mirle it looks uh question",
    "start": "1981960",
    "end": "1989638"
  },
  {
    "text": "right okay so here here another core component of rvm architecture that is",
    "start": "1993480",
    "end": "2001159"
  },
  {
    "text": "a uh the lvm optimizer and basically we",
    "start": "2001159",
    "end": "2006519"
  },
  {
    "text": "can fit the lvm to the optimizer and it can optimize the code for you and in lvm",
    "start": "2006519",
    "end": "2013960"
  },
  {
    "text": "terminology we call the optimizer lvm pass and we can combine different pass",
    "start": "2013960",
    "end": "2022320"
  },
  {
    "text": "with each other and in rvm there are few different kind P first one the pass can",
    "start": "2022320",
    "end": "2028639"
  },
  {
    "text": "be used to collect or visualize information this one is not very not very important for for our project the",
    "start": "2028639",
    "end": "2036120"
  },
  {
    "text": "second one is very important so lvm pass can be used to optimize the go to transform",
    "start": "2036120",
    "end": "2043480"
  },
  {
    "text": "the bitco and there some others uh pass which we don't don't care about and in",
    "start": "2043480",
    "end": "2050520"
  },
  {
    "text": "the latest version of rvm the version 3.2 they",
    "start": "2050520",
    "end": "2056398"
  },
  {
    "text": "provide 182 um passes that are ready to use so just a lot and we just need to",
    "start": "2056399",
    "end": "2064398"
  },
  {
    "text": "use it don't need to do anything so here um remember we need to choose a IR to",
    "start": "2064399",
    "end": "2071079"
  },
  {
    "text": "normalize the go right so here we decided that we choose lvm as a language",
    "start": "2071079",
    "end": "2076960"
  },
  {
    "text": "to normalize the code so you can see that originally lvm is was introduced to",
    "start": "2076960",
    "end": "2083358"
  },
  {
    "text": "uh for you to program your compiler but we don't we don't we don't use lvm to to",
    "start": "2083359",
    "end": "2090280"
  },
  {
    "text": "to ma the compiler but we use lvm to normalize the Cod and after that we automize the Cod so we choose uh lvm",
    "start": "2090280",
    "end": "2097760"
  },
  {
    "text": "because it satisfy all the requirements for the normalization phase and remember we only use a subset",
    "start": "2097760",
    "end": "2106640"
  },
  {
    "text": "of lvm we don't use only 31 instruction we just use subset instruction first of you can ignore the",
    "start": "2106640",
    "end": "2113800"
  },
  {
    "text": "instruction that U about the high level information that you can get from s SC but here because we we working with a",
    "start": "2113800",
    "end": "2121680"
  },
  {
    "text": "low level machine go so we can recogniz those instruction and every is good because it",
    "start": "2121680",
    "end": "2129839"
  },
  {
    "text": "uh it offer you a framework so you can process the output I very",
    "start": "2129839",
    "end": "2135000"
  },
  {
    "text": "easily and finally you can take advantage of the L lvm Optimizer so you",
    "start": "2135000",
    "end": "2142560"
  },
  {
    "text": "can optimize the bit Cod and the result the result bit Cod from this step is",
    "start": "2142560",
    "end": "2149240"
  },
  {
    "text": "normalized and optimized and um you can see that we have some every passes that that",
    "start": "2149240",
    "end": "2157119"
  },
  {
    "text": "are very s table and those passes can be used to reverse the transformation of",
    "start": "2157119",
    "end": "2163640"
  },
  {
    "text": "meta metamorphics",
    "start": "2163640",
    "end": "2166720"
  },
  {
    "text": "mware so here's the I detail my diagram first we need to translate the machine",
    "start": "2169319",
    "end": "2175640"
  },
  {
    "text": "code to lvm this one is similar to building the compiler front end but it's this one is not for high level language",
    "start": "2175640",
    "end": "2182720"
  },
  {
    "text": "but for machine go language low level language it's tough because yeah the",
    "start": "2182720",
    "end": "2188160"
  },
  {
    "text": "machine C is unst structure so first of we must deal with the indirect Branch or",
    "start": "2188160",
    "end": "2194880"
  },
  {
    "text": "shell modify go which can be available in the is the machine car and it's not",
    "start": "2194880",
    "end": "2200240"
  },
  {
    "text": "easy to to show and from machine C we build the control flow graph and we have",
    "start": "2200240",
    "end": "2208440"
  },
  {
    "text": "the control FL flow gra in connect the basic blocks and we go through with go",
    "start": "2208440",
    "end": "2214480"
  },
  {
    "text": "through each block and we we translate on instruction in each block to",
    "start": "2214480",
    "end": "2219720"
  },
  {
    "text": "lvm and this step uh to express the semantics of the machine code we need to",
    "start": "2219720",
    "end": "2226160"
  },
  {
    "text": "reference to the to the to the ISA manual and in this case I need to uh",
    "start": "2226160",
    "end": "2232599"
  },
  {
    "text": "reference to the do the Intel or AMD",
    "start": "2232599",
    "end": "2237560"
  },
  {
    "text": "Med you can see so here here's on shle WE translate NX ebx to l lvm and here is",
    "start": "2238119",
    "end": "2248440"
  },
  {
    "text": "the on the right side you you see the the lvm code that does",
    "start": "2248440",
    "end": "2254200"
  },
  {
    "text": "this you can see it looks very complicated because we need to update",
    "start": "2254200",
    "end": "2259960"
  },
  {
    "text": "the the flag right so it's not it's not that simple so one Intel instruction can be",
    "start": "2259960",
    "end": "2268839"
  },
  {
    "text": "translated to like 10 lvm [Music]",
    "start": "2268839",
    "end": "2274000"
  },
  {
    "text": "instruction and after that we optimize the bit we got from the normalization stamp and",
    "start": "2274000",
    "end": "2282079"
  },
  {
    "text": "here are some optimization I am using first one constant propagation so this",
    "start": "2282079",
    "end": "2289000"
  },
  {
    "text": "uh every pass can simplify the go here like",
    "start": "2289000",
    "end": "2294880"
  },
  {
    "text": "here you can simplify like y = to",
    "start": "2294880",
    "end": "2301039"
  },
  {
    "text": "22 the another Optimizer is a eliminate de store instruction",
    "start": "2301160",
    "end": "2307960"
  },
  {
    "text": "so we can have a we have the simple go here and here you can see that y = to 3",
    "start": "2307960",
    "end": "2313280"
  },
  {
    "text": "is that go right and D pass can remove this",
    "start": "2313280",
    "end": "2319839"
  },
  {
    "text": "Cod next one another pass combine instruction Y = X + 1 z = y + 2 this one",
    "start": "2319839",
    "end": "2329920"
  },
  {
    "text": "is actually Z = to x + 3 and this PA can combine this goal to be a simplifi goal",
    "start": "2329920",
    "end": "2337440"
  },
  {
    "text": "on the right side another pa uh which is very important is simplify contr flow",
    "start": "2337440",
    "end": "2343359"
  },
  {
    "text": "graph you can be used to remove isolated basic block it can be used to mge basic",
    "start": "2343359",
    "end": "2349839"
  },
  {
    "text": "block into it pre deor if there only one and only one and the pressor has only",
    "start": "2349839",
    "end": "2357400"
  },
  {
    "text": "one successor or you can m a basic block that only contain uncondition unconditional branch",
    "start": "2357400",
    "end": "2367599"
  },
  {
    "text": "so you see you have four transformation right insert that go substitute with",
    "start": "2368160",
    "end": "2374400"
  },
  {
    "text": "equivalent instuction insert Branch instruction to next instruction and on the first three transformation can be",
    "start": "2374400",
    "end": "2381640"
  },
  {
    "text": "show with Z lvm",
    "start": "2381640",
    "end": "2387160"
  },
  {
    "text": "optimization like this inser that Cod can be removed with Ds and simpli",
    "start": "2387240",
    "end": "2392640"
  },
  {
    "text": "simplify control pH graph insert Branch inection to the next inection can be remove with simplify control",
    "start": "2392640",
    "end": "2400040"
  },
  {
    "text": "prograph and that make us uh we show on",
    "start": "2400040",
    "end": "2405280"
  },
  {
    "text": "the on the first three transformation and what remains is the last one reorder instruction which cannot be show by",
    "start": "2405280",
    "end": "2412440"
  },
  {
    "text": "lvm so next we see how how we show last last trans",
    "start": "2412440",
    "end": "2419119"
  },
  {
    "text": "transformation so here I detail the diagram again",
    "start": "2421839",
    "end": "2428680"
  },
  {
    "text": "uh we generate the sematic from the normalized go so",
    "start": "2428680",
    "end": "2435400"
  },
  {
    "text": "here so the setic signature is actually a logical formula generated from the output I of the normal ration step so we",
    "start": "2435400",
    "end": "2443680"
  },
  {
    "text": "has machine C here we normalize the C after that we optimize and we can remove the first three transformation and after",
    "start": "2443680",
    "end": "2450920"
  },
  {
    "text": "that we gener the setic natures right",
    "start": "2450920",
    "end": "2457100"
  },
  {
    "text": "[Music] okay so uh about the um logic and",
    "start": "2457100",
    "end": "2464640"
  },
  {
    "text": "formula after we have the logical formula we need to solve it and how to solve it here uh we propose to use",
    "start": "2464640",
    "end": "2473280"
  },
  {
    "text": "satisability modul theories or smt server so smt server is a theorem Pro",
    "start": "2473280",
    "end": "2479720"
  },
  {
    "text": "that's based on decision procedure and S&T server work with the logic and",
    "start": "2479720",
    "end": "2484760"
  },
  {
    "text": "formulas of different theories and S&P server is is very suitable because it",
    "start": "2484760",
    "end": "2491040"
  },
  {
    "text": "can express the behavior of computer program very suitable and it can prove a",
    "start": "2491040",
    "end": "2497880"
  },
  {
    "text": "logical formula is statisfy ability or validity or not and this one is",
    "start": "2497880",
    "end": "2503880"
  },
  {
    "text": "important the SNT solver can prove the equivalence of two loogan formulas and that's why we need",
    "start": "2503880",
    "end": "2511480"
  },
  {
    "text": "it okay so there are many S&T of available uh on the internet but uh here",
    "start": "2512200",
    "end": "2518960"
  },
  {
    "text": "we use Z3 SNT server and this one is uh open source SNT server coming from",
    "start": "2518960",
    "end": "2526160"
  },
  {
    "text": "Microsoft and they support Linux and windows and they provide the Bing for",
    "start": "2526160",
    "end": "2531560"
  },
  {
    "text": "C++ and python it support B Vector Theory which is very very useful to mod",
    "start": "2531560",
    "end": "2538160"
  },
  {
    "text": "the arithmetic and logic operation it support a theory which good to model the",
    "start": "2538160",
    "end": "2543760"
  },
  {
    "text": "M memory access and finally it support the quanti exist or",
    "start": "2543760",
    "end": "2550280"
  },
  {
    "text": "for okay so here we have the mod detail uh",
    "start": "2551040",
    "end": "2557240"
  },
  {
    "text": "diagram so we have two logical formula and we fit all of them to the theorem",
    "start": "2557240",
    "end": "2563640"
  },
  {
    "text": "Pro here or smt server here and this two logical formula we want to prove the",
    "start": "2563640",
    "end": "2570640"
  },
  {
    "text": "equivalence equivalence of right so we if we have um this one and this one",
    "start": "2570640",
    "end": "2578079"
  },
  {
    "text": "are equivalent which mean with the same input same resistor input it didn't",
    "start": "2578079",
    "end": "2583319"
  },
  {
    "text": "produce the it produce the same output and that make it",
    "start": "2583319",
    "end": "2589319"
  },
  {
    "text": "equivalent okay here is the one example how we go from machine",
    "start": "2591760",
    "end": "2598359"
  },
  {
    "text": "go to to the loal formula so on the top we have the the machine go here and we",
    "start": "2598359",
    "end": "2605319"
  },
  {
    "text": "after after the normalization and UL the step we have this go and from this go we generate The",
    "start": "2605319",
    "end": "2613480"
  },
  {
    "text": "Logical formula which come here in the last box and this logical formula will be",
    "start": "2613480",
    "end": "2620359"
  },
  {
    "text": "fitted to the Z3 and you can show",
    "start": "2620359",
    "end": "2624599"
  },
  {
    "text": "it okay so you can see that the last remaining transformation that was not",
    "start": "2628119",
    "end": "2634160"
  },
  {
    "text": "show by lvm can be show by SNT server why here you has a signature and a m c",
    "start": "2634160",
    "end": "2642280"
  },
  {
    "text": "here you can see that the just reorder the two instruction in the",
    "start": "2642280",
    "end": "2649119"
  },
  {
    "text": "signature right and with the signature we have this logical",
    "start": "2649119",
    "end": "2654839"
  },
  {
    "text": "formula and with the re the go re the instruction go we have another logical",
    "start": "2654839",
    "end": "2660800"
  },
  {
    "text": "formula and you can see this one and this one they do the same thing and the",
    "start": "2660800",
    "end": "2667240"
  },
  {
    "text": "server can show can can can show that it can it can tell it it can tell us that",
    "start": "2667240",
    "end": "2672400"
  },
  {
    "text": "this one and this one are equivalent it can do this work very well so we show",
    "start": "2672400",
    "end": "2678079"
  },
  {
    "text": "the last transformation here the",
    "start": "2678079",
    "end": "2682280"
  },
  {
    "text": "instruction okay so uh that's our idea for Opti and we implemented that we had",
    "start": "2683839",
    "end": "2690200"
  },
  {
    "text": "the web interface for demo and we have framework to generate the signature for machine Cod and we can compare the",
    "start": "2690200",
    "end": "2696119"
  },
  {
    "text": "signatures and U of6 now they we support the 32bit",
    "start": "2696119",
    "end": "2701280"
  },
  {
    "text": "and 64bit for Intel Intel platform and we use ZT server to to process logic and",
    "start": "2701280",
    "end": "2709960"
  },
  {
    "text": "formulas and the FR uh the project was uh was implemented in Python and C++ and",
    "start": "2709960",
    "end": "2718440"
  },
  {
    "text": "it take about 5 uh 5,000 lies of go okay here come the interesting part",
    "start": "2718440",
    "end": "2724760"
  },
  {
    "text": "the demo",
    "start": "2724760",
    "end": "2727920"
  },
  {
    "text": "okay so the web demo you can see that very simple we have two box",
    "start": "2732800",
    "end": "2738680"
  },
  {
    "text": "here so I I will pass two machine Cod to assembly go on the left side and on the",
    "start": "2738680",
    "end": "2745760"
  },
  {
    "text": "right side after that I click this button and you can tell me uh this go",
    "start": "2745760",
    "end": "2751400"
  },
  {
    "text": "and this go are equivalent or not",
    "start": "2751400",
    "end": "2755880"
  },
  {
    "text": "okay you can see two c they look very different the right car looks very",
    "start": "2771119",
    "end": "2776800"
  },
  {
    "text": "simple and the left go look very complicated and actually the go on the left side they use many transformation",
    "start": "2776800",
    "end": "2783559"
  },
  {
    "text": "method to make the go very long very complicated but actually they do the",
    "start": "2783559",
    "end": "2789800"
  },
  {
    "text": "same thing the go on the left side was transform from the go on the right side",
    "start": "2789800",
    "end": "2796800"
  },
  {
    "text": "so uh I have some option here I can select the assembly syntax it can be the code",
    "start": "2796800",
    "end": "2804559"
  },
  {
    "text": "can be copy from ID or from Nas nasma and I can choose 32 be or 64 beit",
    "start": "2804559",
    "end": "2811400"
  },
  {
    "text": "here and verify equivalent",
    "start": "2811400",
    "end": "2817240"
  },
  {
    "text": "you see that the left go and the right go they are equivalent they do exactly the same",
    "start": "2817240",
    "end": "2822319"
  },
  {
    "text": "thing now if you don't believe that I show you",
    "start": "2822319",
    "end": "2827760"
  },
  {
    "text": "here we copy Z tox right we can do",
    "start": "2827760",
    "end": "2834319"
  },
  {
    "text": "something different two now try",
    "start": "2834319",
    "end": "2840800"
  },
  {
    "text": "again is it still equivalent or not different",
    "start": "2840800",
    "end": "2848839"
  },
  {
    "text": "now if letterer I",
    "start": "2849520",
    "end": "2855319"
  },
  {
    "text": "decrease now what is the answer",
    "start": "2860200",
    "end": "2865920"
  },
  {
    "text": "equivalent right we copy two to and later we we subject true from it so it's",
    "start": "2865920",
    "end": "2872920"
  },
  {
    "text": "still make it X zero now",
    "start": "2872920",
    "end": "2878720"
  },
  {
    "text": "now if I insert some uh KN semantical here let's see what",
    "start": "2878720",
    "end": "2886559"
  },
  {
    "text": "happen this one is not go right that's nothing this one also not go does",
    "start": "2895760",
    "end": "2901319"
  },
  {
    "text": "nothing exchange CX with itself and now see",
    "start": "2901319",
    "end": "2908000"
  },
  {
    "text": "Ste",
    "start": "2908079",
    "end": "2910520"
  },
  {
    "text": "equivalent okay now the the final",
    "start": "2916000",
    "end": "2922520"
  },
  {
    "text": "demo here let's try again",
    "start": "2922520",
    "end": "2928780"
  },
  {
    "text": "[Music] equivalent equivalent right now I move this this Junction",
    "start": "2928780",
    "end": "2937440"
  },
  {
    "text": "to the to here is it still equivalent or",
    "start": "2937920",
    "end": "2943359"
  },
  {
    "text": "not let's see still",
    "start": "2943359",
    "end": "2949280"
  },
  {
    "text": "equalent now you replace this one with",
    "start": "2949280",
    "end": "2954319"
  },
  {
    "text": "this one copy Z to edx right",
    "start": "2954319",
    "end": "2958480"
  },
  {
    "text": "s now what is the answer still same l",
    "start": "2961280",
    "end": "2967520"
  },
  {
    "text": "but is it actually same or not anybody tell",
    "start": "2967520",
    "end": "2973359"
  },
  {
    "text": "me are they really equivalent no right because uh move zero",
    "start": "2974359",
    "end": "2984400"
  },
  {
    "text": "to edx doesn't change any flux but s edx with C change some flux and",
    "start": "2984400",
    "end": "2993119"
  },
  {
    "text": "here okay here's a copy from the inment here saw change many flux like o o",
    "start": "2993240",
    "end": "3002839"
  },
  {
    "text": "overflow side flug zero flu AF gravity",
    "start": "3002839",
    "end": "3008720"
  },
  {
    "text": "flu and CF right so actually saw doesn't really do the same thing as move Z to",
    "start": "3008720",
    "end": "3018040"
  },
  {
    "text": "edx so here equivalent but now if we uncheck",
    "start": "3018040",
    "end": "3024559"
  },
  {
    "text": "this we don't ignore ref flux res update anymore we we take us into a car and see",
    "start": "3024559",
    "end": "3032240"
  },
  {
    "text": "what is the answer now different because now we we care about the",
    "start": "3032240",
    "end": "3040160"
  },
  {
    "text": "flux okay few more minutes I am back to the slide and just a",
    "start": "3047079",
    "end": "3054160"
  },
  {
    "text": "demo well all this looks nice but there are some limitation that uh cannot be",
    "start": "3054280",
    "end": "3060359"
  },
  {
    "text": "shown now first uh you cannot do anything with a cell modify because what",
    "start": "3060359",
    "end": "3066040"
  },
  {
    "text": "I are doing here is a pure stating analysis and stating analysis cannot",
    "start": "3066040",
    "end": "3071319"
  },
  {
    "text": "deal with the modify Cod and if we have some indirect branches inside the",
    "start": "3071319",
    "end": "3076960"
  },
  {
    "text": "machine code we have a problem because remember that lvm they don't allow the",
    "start": "3076960",
    "end": "3083079"
  },
  {
    "text": "indirect branch and Fin the efficiency of smt server really",
    "start": "3083079",
    "end": "3090319"
  },
  {
    "text": "depend on the complexity of the machine code so if the machine code is very complicated complicated SNT server can",
    "start": "3090319",
    "end": "3096960"
  },
  {
    "text": "take a lot of time to run and to give you back the answer that that will be a",
    "start": "3096960",
    "end": "3103240"
  },
  {
    "text": "problems so the future work that we we try to show the limitation",
    "start": "3103240",
    "end": "3109760"
  },
  {
    "text": "somehow and uh maybe if we have time we can try to implement op6 for the real AV",
    "start": "3109760",
    "end": "3117440"
  },
  {
    "text": "you can use clam AV which is open source so you can do that and uh we will deploy",
    "start": "3117440",
    "end": "3123799"
  },
  {
    "text": "a as an independent tun set for May anal people so they can they can they can",
    "start": "3123799",
    "end": "3130799"
  },
  {
    "text": "benefit from this tune okay here come",
    "start": "3130799",
    "end": "3136040"
  },
  {
    "text": "conclusion syntactic signature totally fail to detect the metamorphic Mare and uh we propose",
    "start": "3136040",
    "end": "3144000"
  },
  {
    "text": "tic which is a semantic signature and optic can show the problems of",
    "start": "3144000",
    "end": "3149880"
  },
  {
    "text": "syntactic signatures and we can detect the metamorphics which use popular",
    "start": "3149880",
    "end": "3155920"
  },
  {
    "text": "transformation the four transformation I I introduced and here I use two key",
    "start": "3155920",
    "end": "3161160"
  },
  {
    "text": "technology first one is rvm which uh we use to normalize the machine C and after",
    "start": "3161160",
    "end": "3168520"
  },
  {
    "text": "that we optimize a away man inside and to compare the signature we use the smt",
    "start": "3168520",
    "end": "3176119"
  },
  {
    "text": "solver and we generate The Logical formula from the normaliz go to to smt",
    "start": "3176119",
    "end": "3184319"
  },
  {
    "text": "logical formula and after that we use the server to to verify the equivalence",
    "start": "3184319",
    "end": "3189480"
  },
  {
    "text": "of them some references for",
    "start": "3189480",
    "end": "3195359"
  },
  {
    "text": "you okay so that's my talk and any",
    "start": "3195359",
    "end": "3200599"
  },
  {
    "text": "questions yes",
    "start": "3200599",
    "end": "3204599"
  },
  {
    "text": "yeah yes uh right uh okay so as I I have a",
    "start": "3212160",
    "end": "3222119"
  },
  {
    "text": "slide here so in this talk I just focus on the",
    "start": "3222119",
    "end": "3228520"
  },
  {
    "text": "most popular transformation which are simple enough for me to show for those",
    "start": "3228520",
    "end": "3234559"
  },
  {
    "text": "go that are too complicated The Logical formula generated from the C can be very",
    "start": "3234559",
    "end": "3240480"
  },
  {
    "text": "complex and in that case uh this this method cannot uh might be not very",
    "start": "3240480",
    "end": "3247280"
  },
  {
    "text": "suitable so yes that is still the open problem for for for us to",
    "start": "3247280",
    "end": "3254599"
  },
  {
    "text": "solve uh yes please your your example you don't use any code that does memory",
    "start": "3257240",
    "end": "3264559"
  },
  {
    "text": "referencing memory if I have two sequences of code that are identical but",
    "start": "3264559",
    "end": "3270040"
  },
  {
    "text": "the reference a global variable to a slightly different location how does that",
    "start": "3270040",
    "end": "3275960"
  },
  {
    "text": "address okay so in case of memory o right memory is another problem because",
    "start": "3279760",
    "end": "3285680"
  },
  {
    "text": "um if we don't really know uh where the memory is uh it's very",
    "start": "3285680",
    "end": "3292599"
  },
  {
    "text": "hard to to to to to generate The Logical formula for that so in the case that the",
    "start": "3292599",
    "end": "3301160"
  },
  {
    "text": "uh memory access that access to the some fixed arrest you can easily generate The",
    "start": "3301160",
    "end": "3307319"
  },
  {
    "text": "Logical formula but if if it access to some um some indirect memory arrest yeah just",
    "start": "3307319",
    "end": "3316240"
  },
  {
    "text": "another problem thank",
    "start": "3316240",
    "end": "3322280"
  },
  {
    "text": "you so is this U op we we try to at",
    "start": "3324839",
    "end": "3329960"
  },
  {
    "text": "least we know that is a open problem which in theory cannot be totally so",
    "start": "3329960",
    "end": "3335640"
  },
  {
    "text": "automatically so what we trying to do here is that we we try to raise by higher so you can you can somehow detect",
    "start": "3335640",
    "end": "3343280"
  },
  {
    "text": "some some metab but not on",
    "start": "3343280",
    "end": "3347160"
  },
  {
    "text": "those so any other questions okay so thank thank you very",
    "start": "3350000",
    "end": "3356640"
  },
  {
    "text": "much",
    "start": "3356640",
    "end": "3359640"
  }
]