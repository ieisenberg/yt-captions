[
  {
    "text": "[Music]",
    "start": "1180",
    "end": "14720"
  },
  {
    "text": "hello everyone welcome to our talk scan ranger misuse error handling needing to",
    "start": "16480",
    "end": "21680"
  },
  {
    "text": "kill mu kvm escape this is a joint work with anti-security 19-year lab and",
    "start": "21680",
    "end": "27279"
  },
  {
    "text": "georgian university first who am i i'm similarly a security",
    "start": "27279",
    "end": "33840"
  },
  {
    "text": "engineer from anti-security last year lab and my main research interest is",
    "start": "33840",
    "end": "39440"
  },
  {
    "text": "virtualization security fuzzing and the program analysis technology",
    "start": "39440",
    "end": "44719"
  },
  {
    "text": "and the welcome security researchers submitted vulnerabilities to enter group",
    "start": "44719",
    "end": "50160"
  },
  {
    "text": "security response center my partner guardian pound will introduce himself in his presentation part",
    "start": "50160",
    "end": "58640"
  },
  {
    "text": "this is the agenda of our talk firstly i will introduce the background of our",
    "start": "58640",
    "end": "63840"
  },
  {
    "text": "talk including qmu nvme virtual device and an error handling code usage in qmu",
    "start": "63840",
    "end": "70880"
  },
  {
    "text": "second i will introduce net we got inspired from cye 202025084",
    "start": "70880",
    "end": "78520"
  },
  {
    "text": "which is an use used after free vulnerability because of the misused",
    "start": "78640",
    "end": "84320"
  },
  {
    "text": "error handling code i will introduce that we apply the directed grid box",
    "start": "84320",
    "end": "89520"
  },
  {
    "text": "fuzzing to find the vulnerabilities in error handling code within the help of the fuzzing we found",
    "start": "89520",
    "end": "96079"
  },
  {
    "text": "an uninitialized free vulnerability we named it the scan ranger and i will",
    "start": "96079",
    "end": "101360"
  },
  {
    "text": "introduce the vulnerability details suddenly my co-speaker governing pound",
    "start": "101360",
    "end": "106640"
  },
  {
    "text": "will introduce the exploited development finally he will do the conclusion and",
    "start": "106640",
    "end": "112479"
  },
  {
    "text": "the discussion of the error handling code directed rebox fuzzing and an",
    "start": "112479",
    "end": "117759"
  },
  {
    "text": "exploit primitive we used in this exploit",
    "start": "117759",
    "end": "123438"
  },
  {
    "text": "ok let's begin this part i will introduce in the background including cumulative and error handling",
    "start": "126240",
    "end": "132640"
  },
  {
    "text": "code qmo is a generic and open source machine",
    "start": "132640",
    "end": "138480"
  },
  {
    "text": "emulator and virtualizer it supports multiple architectures such as ia32",
    "start": "138480",
    "end": "146280"
  },
  {
    "text": "x864 mips spark um risk and so on",
    "start": "146280",
    "end": "151360"
  },
  {
    "text": "furthermore it includes a huge connection of immunity devices",
    "start": "151360",
    "end": "157120"
  },
  {
    "text": "including nvme controller cumule is widely used in security research for",
    "start": "157120",
    "end": "162640"
  },
  {
    "text": "example iot firmware emulation af q mu for black box fuzzing dynamic",
    "start": "162640",
    "end": "169280"
  },
  {
    "text": "instrumentation platform however kim has a lot of attack service especially",
    "start": "169280",
    "end": "175360"
  },
  {
    "text": "device emulation net attackers can write data to host a machine from gas machine",
    "start": "175360",
    "end": "181840"
  },
  {
    "text": "high quality vulnerability allows attacker to break out from vm to control",
    "start": "181840",
    "end": "187519"
  },
  {
    "text": "the host our vulnerability locates in unime",
    "start": "187519",
    "end": "192959"
  },
  {
    "text": "virtual device here we briefly introduced the miami device protocol",
    "start": "192959",
    "end": "198720"
  },
  {
    "text": "mme defines an optimized register interface command and feature set to",
    "start": "198720",
    "end": "204560"
  },
  {
    "text": "communicate between guests and hosts for pcie ssds",
    "start": "204560",
    "end": "209920"
  },
  {
    "text": "it minimizes mmi rise in command submission and the compilation path",
    "start": "209920",
    "end": "215599"
  },
  {
    "text": "mime has efficient support for io utilization architectures like sr ioe",
    "start": "215599",
    "end": "222640"
  },
  {
    "text": "which makes it more and more popular in ssds device emulation",
    "start": "222640",
    "end": "229360"
  },
  {
    "text": "our work is was inspired by coe 202025084",
    "start": "230000",
    "end": "236000"
  },
  {
    "text": "which is used after free vulnerability because of the misused error handling",
    "start": "236000",
    "end": "241519"
  },
  {
    "text": "code this flaw occurs while setting up an usb package because it doesn't check the return",
    "start": "241519",
    "end": "248319"
  },
  {
    "text": "status of usb package map function which exists a error",
    "start": "248319",
    "end": "254080"
  },
  {
    "text": "handling code net free runtime memory then it uses the fluid memory in the",
    "start": "254080",
    "end": "259600"
  },
  {
    "text": "later code which leads to an uaf vulnerability this fraud results in a deny of service",
    "start": "259600",
    "end": "267280"
  },
  {
    "text": "and potentially exploitable so we can see in this code",
    "start": "267280",
    "end": "273280"
  },
  {
    "text": "if first in vocal usb packing mapped and when it fails qmi will fix it by",
    "start": "273280",
    "end": "280800"
  },
  {
    "text": "checking the return status and if it fails it will destroy the exterior structures and return the error code and",
    "start": "280800",
    "end": "288479"
  },
  {
    "text": "to stop the following following process",
    "start": "288479",
    "end": "293680"
  },
  {
    "text": "let's see the detail when usb package map fails you will free",
    "start": "295520",
    "end": "300800"
  },
  {
    "text": "as glo structure however the ordinary vulnerable code doesn't check the return",
    "start": "300800",
    "end": "306960"
  },
  {
    "text": "status of usb packet map then you will call usb handle",
    "start": "306960",
    "end": "312080"
  },
  {
    "text": "package which will use sdl structure that leads to a uf or liability so from",
    "start": "312080",
    "end": "318960"
  },
  {
    "text": "the code flow we can know that it was the foreign sdl structure and then use",
    "start": "318960",
    "end": "324720"
  },
  {
    "text": "the xgl structure so it will cause a uf vulnerability",
    "start": "324720",
    "end": "331520"
  },
  {
    "text": "and in the usb map function we can see that if dma memory map fails you will go to",
    "start": "332160",
    "end": "339600"
  },
  {
    "text": "error label and and in the error label body you will call usb packet unmapped",
    "start": "339600",
    "end": "345600"
  },
  {
    "text": "function to free sdl structure and the return negative number of the arrow",
    "start": "345600",
    "end": "351199"
  },
  {
    "text": "status this is a traditional error handling code pattern in qmu the",
    "start": "351199",
    "end": "357360"
  },
  {
    "text": "caller is responsible for the character usage of the function net contains error",
    "start": "357360",
    "end": "362800"
  },
  {
    "text": "handling code inspired by serie 202025084",
    "start": "362800",
    "end": "369960"
  },
  {
    "text": "we observed that the error handling code uses in the cumula code and we found the",
    "start": "370000",
    "end": "375919"
  },
  {
    "text": "net and the error handling code can be classified into the following categories",
    "start": "375919",
    "end": "382400"
  },
  {
    "text": "resource release and the debugger report another resource release category can be further",
    "start": "382400",
    "end": "388960"
  },
  {
    "text": "classified into a into release memory or file handler or release the locks",
    "start": "388960",
    "end": "397120"
  },
  {
    "text": "we can see that the debugging report code just does the debugging report and it doesn't operate",
    "start": "397520",
    "end": "403840"
  },
  {
    "text": "in the runtime resource so this category want to cross memory corruption harmful behavior to qmu",
    "start": "403840",
    "end": "411120"
  },
  {
    "text": "but in the in release memory of file handling category the error handling code will",
    "start": "411120",
    "end": "417199"
  },
  {
    "text": "release the runtime memory or the file handler in this code sample we can see",
    "start": "417199",
    "end": "422720"
  },
  {
    "text": "in this code sample you will call cumulio3 to for in a buffer origin",
    "start": "422720",
    "end": "430000"
  },
  {
    "text": "memory and then you will have close in the file handler so this behavior may lead to a uf",
    "start": "430080",
    "end": "436639"
  },
  {
    "text": "vulnerability if the color code doesn't check the return value or status and the",
    "start": "436639",
    "end": "442240"
  },
  {
    "text": "misuse in the freedom memory we introduced the",
    "start": "442240",
    "end": "447360"
  },
  {
    "text": "ce202025084 is in this situation and in the release rocks the",
    "start": "447560",
    "end": "454880"
  },
  {
    "text": "error handling code will release locks in the in the encoder this behavior may lead to a risk",
    "start": "454880",
    "end": "461599"
  },
  {
    "text": "condition so from the core samples we can see that",
    "start": "461599",
    "end": "466720"
  },
  {
    "text": "misused error handling code may lead to multiple memory corruption vulnerability",
    "start": "466720",
    "end": "472319"
  },
  {
    "text": "case therefore we think we think about how we can detect this type of vulnerability",
    "start": "472319",
    "end": "480720"
  },
  {
    "text": "so here we use the directed read box fasting in this fashion situation that",
    "start": "480720",
    "end": "486160"
  },
  {
    "text": "we want to know in the functioning process we'll go through the error handling code and all its size",
    "start": "486160",
    "end": "493680"
  },
  {
    "text": "we firstly do the same take analysis for the code samples in the error handle",
    "start": "493680",
    "end": "500400"
  },
  {
    "text": "encoder we can observe that the error handling code in queue is always jump",
    "start": "500400",
    "end": "505520"
  },
  {
    "text": "from go to statement therefore we positively locate and go to statement in",
    "start": "505520",
    "end": "510639"
  },
  {
    "text": "the code of the virtual device we only fast one virtual device each time",
    "start": "510639",
    "end": "517680"
  },
  {
    "text": "then we do a backward slicing analysis to get in the corner side to the go to",
    "start": "517839",
    "end": "522880"
  },
  {
    "text": "statement and then the code body of the photo statement",
    "start": "522880",
    "end": "528000"
  },
  {
    "text": "we use the af glue as our fasting engine and then the information created at step",
    "start": "528000",
    "end": "534080"
  },
  {
    "text": "two is used to assign feedback to the directed fusing engine",
    "start": "534080",
    "end": "540160"
  },
  {
    "text": "this is the whole fasting flow in a pre-processing step in the",
    "start": "540959",
    "end": "546640"
  },
  {
    "text": "cold body of the gold statement is the target size of our fasting process",
    "start": "546640",
    "end": "553200"
  },
  {
    "text": "which will be used to calculate the seed distance and in the fuzzy loop step we are based",
    "start": "553200",
    "end": "559279"
  },
  {
    "text": "on the distance guided structure to perform the power schedule",
    "start": "559279",
    "end": "564560"
  },
  {
    "text": "and we take the color side coverage into account to make the parting process",
    "start": "564560",
    "end": "570080"
  },
  {
    "text": "go through all the error handling code and its quarter size code",
    "start": "570080",
    "end": "576160"
  },
  {
    "text": "so with the help of a directed blue box buzzing we found an uninitialized free",
    "start": "576160",
    "end": "582000"
  },
  {
    "text": "vulnerability and we named it scan ranger it is load it locates in oem eos",
    "start": "582000",
    "end": "588480"
  },
  {
    "text": "device this is caused because of the misused error handling and the ume is used to",
    "start": "588480",
    "end": "595279"
  },
  {
    "text": "provide virtual solidus data drives service which as we know it it is ssds",
    "start": "595279",
    "end": "602480"
  },
  {
    "text": "and we used this vulnerability to win kim f cup 2020",
    "start": "602480",
    "end": "608000"
  },
  {
    "text": "ton contest and it was fixed at the version 5.2.0 of qmil because we submitted the",
    "start": "608000",
    "end": "616560"
  },
  {
    "text": "vulnerability to camp cup official so there is no sewing assignment",
    "start": "616560",
    "end": "621600"
  },
  {
    "text": "the exploit environment is ubuntu a 20 doctor 04 hoster",
    "start": "621600",
    "end": "627920"
  },
  {
    "text": "and then the guest is in the same environment and it has full protection such as the nx aslr and the pie",
    "start": "627920",
    "end": "637600"
  },
  {
    "text": "this vulnerability locates in nvme map prp function the function has two type",
    "start": "637760",
    "end": "644000"
  },
  {
    "text": "of initialization everyone you will initialize the ioc",
    "start": "644000",
    "end": "649040"
  },
  {
    "text": "and the type two you will need a sdg list the three uh green box in this is the",
    "start": "649040",
    "end": "656880"
  },
  {
    "text": "expert expected error handling a series metal free pair so it firstly",
    "start": "656880",
    "end": "663200"
  },
  {
    "text": "initializing the type 2 sdn list and if it steps into error condition you",
    "start": "663200",
    "end": "669360"
  },
  {
    "text": "will go to unmap label to foreign qst structure which is initialized in the buff code",
    "start": "669360",
    "end": "678320"
  },
  {
    "text": "but what if the code flow doesn't obey the merit repair actually we can control the",
    "start": "678320",
    "end": "684480"
  },
  {
    "text": "code flow to firstly initialize work and then we can control it to go to the",
    "start": "684480",
    "end": "691360"
  },
  {
    "text": "error handling code to free usd structure and in this time the qsc is",
    "start": "691360",
    "end": "698959"
  },
  {
    "text": "in uninitialized status which leads to an uninitialized free vulnerability",
    "start": "698959",
    "end": "705040"
  },
  {
    "text": "the misused error handling code leads to an increase inconsistent metallic free pair",
    "start": "705040",
    "end": "711680"
  },
  {
    "text": "so this is the whole details of this vulnerability and the my",
    "start": "711680",
    "end": "717839"
  },
  {
    "text": "presentation path is over and my co-speaker guardian power will continue this talk he will introduce the exploit",
    "start": "717839",
    "end": "725120"
  },
  {
    "text": "development and do some conclusion and discussion thank you",
    "start": "725120",
    "end": "731839"
  },
  {
    "text": "hello everyone my name is gao ningpan from zhojiang university and and security lawyer lab i'm also cpr player",
    "start": "732000",
    "end": "740000"
  },
  {
    "text": "at aaa and aoe team my background is trying to find vulnerabilities in",
    "start": "740000",
    "end": "745440"
  },
  {
    "text": "hypervisors such as cumule and virtualbox you can contact with me on",
    "start": "745440",
    "end": "750560"
  },
  {
    "text": "twitter there and in this section i'm going to talk about how to exploit this kind of",
    "start": "750560",
    "end": "756880"
  },
  {
    "text": "misused error handling bug and then escape the virtual machine and we have a quite big challenges here",
    "start": "756880",
    "end": "764160"
  },
  {
    "text": "and we finally make it overcome this problem and i think it is a interesting",
    "start": "764160",
    "end": "770079"
  },
  {
    "text": "exploit and now i will get stats first let's see what happens in these",
    "start": "770079",
    "end": "776480"
  },
  {
    "text": "error handling functions cumulative destroy as talked before by inconsistent mellow",
    "start": "776480",
    "end": "783519"
  },
  {
    "text": "free peer the arguments qst here represents a kind of initialized memory",
    "start": "783519",
    "end": "790480"
  },
  {
    "text": "and you can see that in this function it's just to free something and just",
    "start": "790480",
    "end": "796000"
  },
  {
    "text": "clear the memory it's dangerous you can see the red box here it's just a free",
    "start": "796000",
    "end": "802160"
  },
  {
    "text": "the first element sg in the uninitialized variable and you know it's",
    "start": "802160",
    "end": "807760"
  },
  {
    "text": "an initialized value but if you if you can control execution environment leading up to that it is initialized",
    "start": "807760",
    "end": "815360"
  },
  {
    "text": "because just to put something there ahead of time and that means if the attacker can",
    "start": "815360",
    "end": "822160"
  },
  {
    "text": "control the initialized memory you can find anything else but though just a",
    "start": "822160",
    "end": "827760"
  },
  {
    "text": "single initialized favorite bit it's totally enough for the attacker to",
    "start": "827760",
    "end": "833279"
  },
  {
    "text": "launch the guests to host via mesquite and i'm going to discuss the exploit in",
    "start": "833279",
    "end": "838560"
  },
  {
    "text": "the net and here i want to show you the port that how we trigger this path in this",
    "start": "838560",
    "end": "845440"
  },
  {
    "text": "pocket the malicious guest will simply create a nvme command for the device",
    "start": "845440",
    "end": "852079"
  },
  {
    "text": "and we will set invariants in this command and we could let the mapping",
    "start": "852079",
    "end": "858480"
  },
  {
    "text": "fail and then turn to the error handling so we can see that accumula crashed in",
    "start": "858480",
    "end": "864160"
  },
  {
    "text": "this way as a design map of service the nice bright spot we want to get code",
    "start": "864160",
    "end": "869760"
  },
  {
    "text": "execution on the host well it turns out that it's not easy",
    "start": "869760",
    "end": "874959"
  },
  {
    "text": "we need to confirm whether this structure is controllable by the attacker so we want to know where does",
    "start": "874959",
    "end": "882000"
  },
  {
    "text": "qsc comes from by checking the source code and found the reference of the nvme",
    "start": "882000",
    "end": "889760"
  },
  {
    "text": "map prp function we found that there are three places to",
    "start": "889760",
    "end": "894800"
  },
  {
    "text": "trigger this foundation for reverberability in this variable function and each of them locates in",
    "start": "894800",
    "end": "901519"
  },
  {
    "text": "different functions as well as different memory regions which means there are three options for",
    "start": "901519",
    "end": "908399"
  },
  {
    "text": "us to construct an initialized variable let's do and let's let's take a",
    "start": "908399",
    "end": "913519"
  },
  {
    "text": "look at each of them in the first place we can see that the qst data comes from a local stack area",
    "start": "913519",
    "end": "921279"
  },
  {
    "text": "of memory and it wasn't building anywhere before it caused to vulnerable function and vme",
    "start": "921279",
    "end": "928639"
  },
  {
    "text": "map prp which leaves an initialized variable on the stack",
    "start": "928639",
    "end": "934399"
  },
  {
    "text": "and given an initialized stack variable a street force adhere is to see",
    "start": "934399",
    "end": "940399"
  },
  {
    "text": "is there any considerable data at the same position on stack",
    "start": "940399",
    "end": "946240"
  },
  {
    "text": "however we found that nvme device functionality is quite simple and the",
    "start": "946240",
    "end": "952000"
  },
  {
    "text": "score stack is too shallow when knight turns to the base function that contains",
    "start": "952000",
    "end": "957440"
  },
  {
    "text": "guest data and finds all the core pieces we didn't find control the data in the",
    "start": "957440",
    "end": "964240"
  },
  {
    "text": "step that means no supply data could be right into the qst",
    "start": "964240",
    "end": "970639"
  },
  {
    "text": "this is a bit frustrating but that's okay when we look at the stacking case",
    "start": "970639",
    "end": "977279"
  },
  {
    "text": "this is almost the same pattern at the first test leaves an initialized",
    "start": "977279",
    "end": "982320"
  },
  {
    "text": "variable on the stat and called the vulnerable function but it's still difficult to control this",
    "start": "982320",
    "end": "988880"
  },
  {
    "text": "unleashed data for us so let's take a look at specifics",
    "start": "988880",
    "end": "994399"
  },
  {
    "text": "you can see that security here transform a global variable locating the heap",
    "start": "994399",
    "end": "1001279"
  },
  {
    "text": "and this value is allocated in the nvme indeed sq function",
    "start": "1001279",
    "end": "1006639"
  },
  {
    "text": "this function is just a new request structure and leave the qsc member",
    "start": "1006639",
    "end": "1012000"
  },
  {
    "text": "initialized and after many function calls he'll finally go through the nvme adapter",
    "start": "1012000",
    "end": "1019759"
  },
  {
    "text": "and here we just plus its member qst as a parameter to the verbal function",
    "start": "1019759",
    "end": "1026558"
  },
  {
    "text": "and because this value is on the heat it seems that we can control it",
    "start": "1026559",
    "end": "1032079"
  },
  {
    "text": "and because we can use some techniques that hip function and that means we can",
    "start": "1032079",
    "end": "1037360"
  },
  {
    "text": "control what we want to free and now given the hip initialized",
    "start": "1037360",
    "end": "1042400"
  },
  {
    "text": "preventability here is a problem regarding to that can we actually control what objective free",
    "start": "1042400",
    "end": "1049919"
  },
  {
    "text": "as i've said like some techniques like keep feng shui we couldn't make it to free anything",
    "start": "1049919",
    "end": "1055760"
  },
  {
    "text": "else and language we can turn to the initialize through to the app3",
    "start": "1055760",
    "end": "1062640"
  },
  {
    "text": "and another problem is that what object are we going to free",
    "start": "1062640",
    "end": "1068080"
  },
  {
    "text": "it's pretty stretchy forward to turn on initialize to free to uef because we know how to explore uef but",
    "start": "1068080",
    "end": "1076160"
  },
  {
    "text": "we don't know how to exploit initialization so what should we do we first found a structure",
    "start": "1076160",
    "end": "1083360"
  },
  {
    "text": "that's under our control filling this structure before and filling the edges fields with this",
    "start": "1083360",
    "end": "1090720"
  },
  {
    "text": "edges pointing to the object that we can control in the heat",
    "start": "1090720",
    "end": "1095919"
  },
  {
    "text": "then we just melt another uh request structure",
    "start": "1095919",
    "end": "1102080"
  },
  {
    "text": "and triggered our nature as free then we were just a food object that we",
    "start": "1102080",
    "end": "1107520"
  },
  {
    "text": "can control at this moment if we can read or write this object",
    "start": "1107520",
    "end": "1113360"
  },
  {
    "text": "then we get gotten uef well this plan is great but actually it",
    "start": "1113360",
    "end": "1118960"
  },
  {
    "text": "turns out that this is not easy to make these things works we first need",
    "start": "1118960",
    "end": "1124080"
  },
  {
    "text": "a structure with a specific size and this structure must have a pointer at",
    "start": "1124080",
    "end": "1130880"
  },
  {
    "text": "the specific of sets and most importantly this structure must",
    "start": "1130880",
    "end": "1135919"
  },
  {
    "text": "be a powerful primitive now the point here must point to a yes control object",
    "start": "1135919",
    "end": "1143200"
  },
  {
    "text": "which we can read or write notice that there must there should be a time window between the object",
    "start": "1143200",
    "end": "1150160"
  },
  {
    "text": "allocation and the object usage so that we can use it after it was free",
    "start": "1150160",
    "end": "1156880"
  },
  {
    "text": "well after many tries we didn't find such a structure because we not only need a structure to",
    "start": "1156880",
    "end": "1164000"
  },
  {
    "text": "point into an object but also this object should be completely controllable",
    "start": "1164000",
    "end": "1170240"
  },
  {
    "text": "that is too limited for example we found the structure in the nvme and other",
    "start": "1170240",
    "end": "1176400"
  },
  {
    "text": "traditional devices and some complexity devices all of them can not meet these",
    "start": "1176400",
    "end": "1182960"
  },
  {
    "text": "requirements most of the structures in the queue are not yet controllable",
    "start": "1182960",
    "end": "1188080"
  },
  {
    "text": "it is almost impossible to find this kind of structure and we can see that",
    "start": "1188080",
    "end": "1193200"
  },
  {
    "text": "the cumulus primitive is so limited so it's difficult for us to decide what",
    "start": "1193200",
    "end": "1198880"
  },
  {
    "text": "object to free however when i was founding i found that",
    "start": "1198880",
    "end": "1204000"
  },
  {
    "text": "there is a different structure on birth apple gpu device here you can see in this function",
    "start": "1204000",
    "end": "1210960"
  },
  {
    "text": "the device allocates an edges mapping table and this table is filled with the",
    "start": "1210960",
    "end": "1217600"
  },
  {
    "text": "series of pointers and lens and this looks like a grid structure it",
    "start": "1217600",
    "end": "1223760"
  },
  {
    "text": "has considerable size it has pointer numbers but differently this pointer",
    "start": "1223760",
    "end": "1229360"
  },
  {
    "text": "here goes through the guest space and this point just comes from a vmwa",
    "start": "1229360",
    "end": "1234559"
  },
  {
    "text": "memory map and this is a key function which maps against the physical memory into the",
    "start": "1234559",
    "end": "1241039"
  },
  {
    "text": "host virtual edges and these edges is what we have in this table this means the cumule can directly",
    "start": "1241039",
    "end": "1249679"
  },
  {
    "text": "access guest memory in the host process well can this structure help us to",
    "start": "1249679",
    "end": "1255679"
  },
  {
    "text": "facilitate the exploitation maybe it does inspired by the mapping table on the",
    "start": "1255679",
    "end": "1262960"
  },
  {
    "text": "word iotq maybe you don't have to find a reading writer",
    "start": "1262960",
    "end": "1268320"
  },
  {
    "text": "and primitive in the host process maybe you can just use the buffer and the guest directory to help us to craft",
    "start": "1268320",
    "end": "1276480"
  },
  {
    "text": "and exploit also let's take a look at cumulus process memory layout",
    "start": "1276480",
    "end": "1283440"
  },
  {
    "text": "in this picture we can see there are two important memories the first is the hip memory",
    "start": "1283440",
    "end": "1290640"
  },
  {
    "text": "which starts with 0x55 and the second is the guest memory which",
    "start": "1290640",
    "end": "1296400"
  },
  {
    "text": "starts with zero x7s and this gas memory is just backed by a single memory map",
    "start": "1296400",
    "end": "1303679"
  },
  {
    "text": "regions inside the qmu kvm process and notice that this gas memory is both",
    "start": "1303679",
    "end": "1310640"
  },
  {
    "text": "mapped into the cumulus process but also exposed to the guest vm",
    "start": "1310640",
    "end": "1316400"
  },
  {
    "text": "we can think it as a shield memory between the host and the guest",
    "start": "1316400",
    "end": "1322000"
  },
  {
    "text": "for the perspective the host the guest memory can also be some kind of the hip memory because they are both",
    "start": "1322000",
    "end": "1329120"
  },
  {
    "text": "snap into the cubing process so here's our idea",
    "start": "1329120",
    "end": "1334799"
  },
  {
    "text": "this is a whole head level overview first the guests share the same memory",
    "start": "1334799",
    "end": "1340559"
  },
  {
    "text": "with the host in the host any changes that will make it to the physical mapping release are",
    "start": "1340559",
    "end": "1347440"
  },
  {
    "text": "propagated to the memory on the guest so now the guest is aware of the foster",
    "start": "1347440",
    "end": "1353360"
  },
  {
    "text": "operation or guest memory and more importantly a guest can read or",
    "start": "1353360",
    "end": "1359440"
  },
  {
    "text": "write its memory at any time right so it will naturally provide us a",
    "start": "1359440",
    "end": "1365520"
  },
  {
    "text": "reading and writing exploit primitive we don't have to find the reading right printed in the host",
    "start": "1365520",
    "end": "1372400"
  },
  {
    "text": "and finally it's quite easy to make a big chunk in the guess we just need to",
    "start": "1372400",
    "end": "1378159"
  },
  {
    "text": "fill in the chunk with the trunk header just like the trunk size and some",
    "start": "1378159",
    "end": "1383520"
  },
  {
    "text": "friends so what do we what we if we directly free a",
    "start": "1383520",
    "end": "1388559"
  },
  {
    "text": "trade trunk in the gas system here i'll show you what it will create a",
    "start": "1388559",
    "end": "1394000"
  },
  {
    "text": "fake trunk in the guest the left is the debugger it shows tcat",
    "start": "1394000",
    "end": "1399520"
  },
  {
    "text": "space in the host overview and the right is what we have done in guess",
    "start": "1399520",
    "end": "1405360"
  },
  {
    "text": "you can see that we make a fake trunk and trigger the initializer",
    "start": "1405360",
    "end": "1410480"
  },
  {
    "text": "free variability and then the fake trunk is exerted into the horse tea catch",
    "start": "1410480",
    "end": "1416480"
  },
  {
    "text": "beans wow that's amazing because of the kitty melon in minutes",
    "start": "1416480",
    "end": "1422640"
  },
  {
    "text": "this chunk will point to the first chunk and the t category list and this will leave the first chunk",
    "start": "1422640",
    "end": "1429679"
  },
  {
    "text": "edges in this neutron and as expected by reading the buffer",
    "start": "1429679",
    "end": "1435279"
  },
  {
    "text": "after the initializer free we lick the hip edges of the hose",
    "start": "1435279",
    "end": "1440480"
  },
  {
    "text": "yeah this means our method truly works and the guest and the host share the",
    "start": "1440480",
    "end": "1446799"
  },
  {
    "text": "same memory they can operate on the same chart we can use this attack to first",
    "start": "1446799",
    "end": "1452240"
  },
  {
    "text": "elated expectation with the help of the guest member",
    "start": "1452240",
    "end": "1458000"
  },
  {
    "text": "so let's examine traditionally when we craft an exploit to escape the virtual",
    "start": "1458000",
    "end": "1464159"
  },
  {
    "text": "machine we'd like to find some data structure in the host process to help us",
    "start": "1464159",
    "end": "1469919"
  },
  {
    "text": "manipulate the memory layouts renaming it as first to force attack",
    "start": "1469919",
    "end": "1474960"
  },
  {
    "text": "and here we are processing a cross domain which manipulates the memory across the",
    "start": "1474960",
    "end": "1481679"
  },
  {
    "text": "hypervisor domain this is the most interesting part of this research",
    "start": "1481679",
    "end": "1487039"
  },
  {
    "text": "and it's basically like this we first make a fake trunk with a very",
    "start": "1487039",
    "end": "1492480"
  },
  {
    "text": "trunk header in the gas system and in the whole space we're just filling the",
    "start": "1492480",
    "end": "1497840"
  },
  {
    "text": "memory before with edges pointing to the guest state charm and then we just may",
    "start": "1497840",
    "end": "1504000"
  },
  {
    "text": "lock another initialized request structure twitter that are neglected free and then",
    "start": "1504000",
    "end": "1510720"
  },
  {
    "text": "we will get guest trump in the hospital and you know because the attacker has a full",
    "start": "1510720",
    "end": "1518080"
  },
  {
    "text": "privilege in guest system he can read or write his memory at any time",
    "start": "1518080",
    "end": "1523600"
  },
  {
    "text": "so now the problem is turn to uef with this part for primitive we can make",
    "start": "1523600",
    "end": "1530000"
  },
  {
    "text": "it export this initialize free just like to explore uefa a bit",
    "start": "1530000",
    "end": "1537039"
  },
  {
    "text": "okay now the problem is turn to exploit and a uaf the problems becomes more easy for us",
    "start": "1537039",
    "end": "1544799"
  },
  {
    "text": "and that our discussion details step by step first we need to find",
    "start": "1544799",
    "end": "1550080"
  },
  {
    "text": "information need to bypass the slr and then we need to manipulate hip",
    "start": "1550080",
    "end": "1555600"
  },
  {
    "text": "layout should hijack the control flow and finally we execute f3 command and",
    "start": "1555600",
    "end": "1562240"
  },
  {
    "text": "gain the code execution on the host before we start we have to do some",
    "start": "1562240",
    "end": "1567760"
  },
  {
    "text": "hipstery in order to get a stable system hip layout we'll just use the vme init sq",
    "start": "1567760",
    "end": "1575679"
  },
  {
    "text": "function here on the right side and this function can be called a lot of times to spread a lot of chunks",
    "start": "1575679",
    "end": "1583279"
  },
  {
    "text": "we just call this function a whole bunch of times to clear the ticket bins",
    "start": "1583279",
    "end": "1588320"
  },
  {
    "text": "and this way we can prevent the following ch friction to be consolidated",
    "start": "1588320",
    "end": "1594080"
  },
  {
    "text": "into a larger and that's we can get more reliable exploits",
    "start": "1594080",
    "end": "1600240"
  },
  {
    "text": "so looking at more graphically in order to bypass ascr we need to find",
    "start": "1600240",
    "end": "1605840"
  },
  {
    "text": "the information leak first we make a fake charm in the guest and this gap was filled with reading",
    "start": "1605840",
    "end": "1613200"
  },
  {
    "text": "data we put in and this chunk is with the size of 0x290",
    "start": "1613200",
    "end": "1619600"
  },
  {
    "text": "then the guest writes value to the mmao interface to lead up the device man",
    "start": "1619600",
    "end": "1625919"
  },
  {
    "text": "execution and in the hospitals the word iot2 device in the hypervisor will mellow the",
    "start": "1625919",
    "end": "1633440"
  },
  {
    "text": "mapping table built with the edges pointing to the gas big trunk and this chunk is filled with",
    "start": "1633440",
    "end": "1641200"
  },
  {
    "text": "the size with their x 150 and then we'll just read this matching",
    "start": "1641200",
    "end": "1649039"
  },
  {
    "text": "table and this fruit chunk will be inserted into this ticket beans",
    "start": "1649039",
    "end": "1654880"
  },
  {
    "text": "and that would actually leave us with the chunk in the state that we have left it before",
    "start": "1654880",
    "end": "1661360"
  },
  {
    "text": "in the next we'll just mellow an io request structure and this structure was just fitting the",
    "start": "1661360",
    "end": "1668559"
  },
  {
    "text": "position that we had we have initialized before with this uh",
    "start": "1668559",
    "end": "1674080"
  },
  {
    "text": "with the initialized field pointing to the gastroc we have to call those two metals in",
    "start": "1674080",
    "end": "1680159"
  },
  {
    "text": "order because if you do anything else between these two operations you've just used the hip for something",
    "start": "1680159",
    "end": "1686799"
  },
  {
    "text": "else so we have to be relative about that then we'll just go out the buggy code",
    "start": "1686799",
    "end": "1693440"
  },
  {
    "text": "and trigger the flavourability this will help make a big chunk in the",
    "start": "1693440",
    "end": "1698559"
  },
  {
    "text": "gas the post were treated as a normal hip jump and push this through trunk to",
    "start": "1698559",
    "end": "1705200"
  },
  {
    "text": "its key catch bins and this would leave a hip edges in the head",
    "start": "1705200",
    "end": "1710640"
  },
  {
    "text": "of the of the big charm then since we know what's in memory now and",
    "start": "1710640",
    "end": "1716799"
  },
  {
    "text": "we can actually reliably dig the host clip edges by just reading the buffer",
    "start": "1716799",
    "end": "1723200"
  },
  {
    "text": "and the guests of course only a heat patch is not enough we have to find some other edges",
    "start": "1723200",
    "end": "1730080"
  },
  {
    "text": "as well such as physical mapping edges  banner edges",
    "start": "1730080",
    "end": "1735200"
  },
  {
    "text": "then we just mount another mapping table with the size of cerex 219",
    "start": "1735200",
    "end": "1741919"
  },
  {
    "text": "to fill in the chunk located in the guest space and the pointer here in this table just",
    "start": "1741919",
    "end": "1748399"
  },
  {
    "text": "points to the command chart located in the guest we just initialize this combined buffer",
    "start": "1748399",
    "end": "1754880"
  },
  {
    "text": "for the code execution stage well besides before we could also leak",
    "start": "1754880",
    "end": "1761679"
  },
  {
    "text": "the physical mapping edges such as reading the buffer these edges represent the host virtual",
    "start": "1761679",
    "end": "1768559"
  },
  {
    "text": "edges which maps into the guest physical memory and with these edges you can just know",
    "start": "1768559",
    "end": "1775039"
  },
  {
    "text": "where the gas the buffer is to the guest to the host and in order to hijack",
    "start": "1775039",
    "end": "1781679"
  },
  {
    "text": "control flow many previous work just use the term structure which has a function pointer",
    "start": "1781679",
    "end": "1788720"
  },
  {
    "text": "and this is a good junction and if we get such a camera we can easily leak the human binary edges and",
    "start": "1788720",
    "end": "1796159"
  },
  {
    "text": "hijack the control flow so let's do it again make a fake charm in the guests",
    "start": "1796159",
    "end": "1802640"
  },
  {
    "text": "with the size of the timer size construct another uninitialized i o request structure with a pointer point",
    "start": "1802640",
    "end": "1809919"
  },
  {
    "text": "into the big trunk in the gas then you have to get a metal primitive",
    "start": "1809919",
    "end": "1816720"
  },
  {
    "text": "to metal tunnel fortunately in nvme device there's the",
    "start": "1816720",
    "end": "1822320"
  },
  {
    "text": "there is a primitive to medical uh new channel we don't have to find any other places",
    "start": "1822320",
    "end": "1829200"
  },
  {
    "text": "then the idea is just a thing and we just triggered our initializer-free and melody timing timer",
    "start": "1829200",
    "end": "1837039"
  },
  {
    "text": "is filling the chunk in the gas finally we will get a timer into the",
    "start": "1837039",
    "end": "1842159"
  },
  {
    "text": "guest and now since the camera is located in the guests we can easily read and write",
    "start": "1842159",
    "end": "1849520"
  },
  {
    "text": "this structure in this way we can link the cumulative binary edges with this edges we can",
    "start": "1849520",
    "end": "1855600"
  },
  {
    "text": "directly calculate the offset of the target function in the binary and easily",
    "start": "1855600",
    "end": "1861919"
  },
  {
    "text": "getting the where is the system function system function is the key function if",
    "start": "1861919",
    "end": "1867039"
  },
  {
    "text": "we want to get a code kill execution and after that we'll overwrite the",
    "start": "1867039",
    "end": "1874480"
  },
  {
    "text": "system function the function pointer in this timer to this address",
    "start": "1874480",
    "end": "1879760"
  },
  {
    "text": "uh to the system function and overwrite the first argument in this timer",
    "start": "1879760",
    "end": "1885360"
  },
  {
    "text": "and to the command button which will have set up before and this address is some kind of",
    "start": "1885360",
    "end": "1892000"
  },
  {
    "text": "physical mapping edges and in this way we will get the ip control",
    "start": "1892000",
    "end": "1897840"
  },
  {
    "text": "and finally by just expired timer to trigger the timeless callback we",
    "start": "1897840",
    "end": "1903919"
  },
  {
    "text": "actually execute the system genome calculation and this way we manage to hijack control flow and get a code",
    "start": "1903919",
    "end": "1911360"
  },
  {
    "text": "execution on the host and this is them of the vm escape by running our export code in the gas",
    "start": "1911360",
    "end": "1917919"
  },
  {
    "text": "system we finally make it pop a calculator in the host in fact you can",
    "start": "1917919",
    "end": "1922960"
  },
  {
    "text": "run any code that you wanted so the export is over but here you know",
    "start": "1922960",
    "end": "1929039"
  },
  {
    "text": "this export is different in several ways",
    "start": "1929039",
    "end": "1935440"
  },
  {
    "text": "for example for in the attack surface previous",
    "start": "1935440",
    "end": "1940720"
  },
  {
    "text": "no vm escape locates in the usb module sri ptcip ip emulator and amd ati",
    "start": "1940720",
    "end": "1949279"
  },
  {
    "text": "but we target the nvme storage device for the benedictine types more for",
    "start": "1949279",
    "end": "1954960"
  },
  {
    "text": "almost all four snow durabilities are caused by buffer overflow",
    "start": "1954960",
    "end": "1960640"
  },
  {
    "text": "however our case is an initializer favorability in error handling code",
    "start": "1960640",
    "end": "1966240"
  },
  {
    "text": "which requires more integrations and triggers to in the vulnerability exploitation",
    "start": "1966240",
    "end": "1973919"
  },
  {
    "text": "and for exploitation technique previous node benefits are almost the same",
    "start": "1973919",
    "end": "1979279"
  },
  {
    "text": "funding inconsolable data on the host process and construct exploits",
    "start": "1979279",
    "end": "1984559"
  },
  {
    "text": "primitives such as temperature rights instead we utilize the data present",
    "start": "1984559",
    "end": "1990320"
  },
  {
    "text": "guest memory which naturally provides us a reading and writing flow material",
    "start": "1990320",
    "end": "1995360"
  },
  {
    "text": "which is manipulative memory across the hypervisor domain further i want to show the additional",
    "start": "1995360",
    "end": "2001840"
  },
  {
    "text": "analysis of this attack as long as the temperature has such availability which",
    "start": "2001840",
    "end": "2007039"
  },
  {
    "text": "can actually control what objective 3 the cube can be exploited because the",
    "start": "2007039",
    "end": "2012399"
  },
  {
    "text": "techniques of cross-domain attack is general we observe that there's no memory oscillation uh the memory",
    "start": "2012399",
    "end": "2019399"
  },
  {
    "text": "standardization mechanism in qm such that we can utilize the user's base network firstly the exploitation",
    "start": "2019399",
    "end": "2027840"
  },
  {
    "text": "and we attribute this feature to that the trunk is not not encrypted in the linux",
    "start": "2027840",
    "end": "2034320"
  },
  {
    "text": "so that we can easily make a fake trunk but it may be difficult to launch the text if the trunk header is encrypted",
    "start": "2034320",
    "end": "2040799"
  },
  {
    "text": "back in windows and finally we believe this kind of attack may also affect other hypervisors",
    "start": "2040799",
    "end": "2047840"
  },
  {
    "text": "like virtualbox vmware and so on so what can we learn from this research",
    "start": "2047840",
    "end": "2054240"
  },
  {
    "text": "first of all i hope you now understand more about misused error handling error handling code is used extensively",
    "start": "2054240",
    "end": "2062000"
  },
  {
    "text": "in hypervisor we choose this is the area where you want to",
    "start": "2062000",
    "end": "2067520"
  },
  {
    "text": "account for issues and probabilities and second i hope you know our error",
    "start": "2067520",
    "end": "2072800"
  },
  {
    "text": "handling directly buzzing well make you text the touch phone box existing in",
    "start": "2072800",
    "end": "2079919"
  },
  {
    "text": "the air handling code effectively and finally we've shown the guest memory can",
    "start": "2079919",
    "end": "2085520"
  },
  {
    "text": "also bring us more attack primitives i hope you now understand how to persuade",
    "start": "2085520",
    "end": "2091599"
  },
  {
    "text": "exploitation with the help of the guest space memory and a public exploit on github okay",
    "start": "2091599",
    "end": "2099920"
  },
  {
    "text": "that's all i have today i hope you will enjoy thanks for your attention",
    "start": "2099920",
    "end": "2106200"
  }
]