[
  {
    "text": "hi there my name is ben serry i'm the vp of research at armis and today with me i have a barack haddad",
    "start": "880",
    "end": "7200"
  },
  {
    "text": "hi marachi is a researcher on my team today we're going to talk about city pawn silly pawn is a set of rsc",
    "start": "7200",
    "end": "14000"
  },
  {
    "text": "vulnerabilities that we've discovered in cisco's cdp protocol and these affect a wide",
    "start": "14000",
    "end": "19680"
  },
  {
    "text": "array of cisco's devices switches routers but also iphones and ib cameras",
    "start": "19680",
    "end": "25199"
  },
  {
    "text": "an estimated tens of millions of devices were affected by these vulnerabilities they can be used",
    "start": "25199",
    "end": "31199"
  },
  {
    "text": "to break network segmentation but also take over enterprise iot devices such as iphones and ip cameras",
    "start": "31199",
    "end": "39040"
  },
  {
    "text": "we'll get to how this can be done in a minute but first let me tell you a bit about ourselves the company we both work at armis is an",
    "start": "39040",
    "end": "46000"
  },
  {
    "text": "enterprise iot security company and that mean means that we deal with iot devices and unmanaged devices in",
    "start": "46000",
    "end": "52559"
  },
  {
    "text": "various environments incorporates in medical facilities and also in manufacturing part of our job is to study and research",
    "start": "52559",
    "end": "59520"
  },
  {
    "text": "the infrastructure that is there to limit devices to a defined segment so this research",
    "start": "59520",
    "end": "64960"
  },
  {
    "text": "set out to discover the risks to network infrastructure that may enable an unmanaged device to",
    "start": "64960",
    "end": "70799"
  },
  {
    "text": "target it and break network segmentation gaining access to more critical parts of the",
    "start": "70799",
    "end": "76400"
  },
  {
    "text": "network right so this is our agenda for this",
    "start": "76400",
    "end": "82560"
  },
  {
    "text": "talk we'll begin with what is cd pawn what did we actually find the severity of the vulnerabilities and",
    "start": "82560",
    "end": "89200"
  },
  {
    "text": "which devices they affect then we're going to discuss the history of vlan hopping",
    "start": "89200",
    "end": "95040"
  },
  {
    "text": "as i mentioned part of why we looked at this in the first place is to understand network segmentation better to understand whether it's secure",
    "start": "95040",
    "end": "102399"
  },
  {
    "text": "and whether we can poke holes in it so we want to cover the history of wheel and hopping techniques",
    "start": "102399",
    "end": "107920"
  },
  {
    "text": "how are attackers doing this what are the known techniques and what silly pawn adds to the equation",
    "start": "107920",
    "end": "113360"
  },
  {
    "text": "then we will discuss the attack surface of proprietary layer 2 protocols that constitute a large attack surface",
    "start": "113360",
    "end": "119840"
  },
  {
    "text": "in network appliances cdp is one example of a proprietary layer 2 protocol from cisco that is used",
    "start": "119840",
    "end": "125119"
  },
  {
    "text": "by almost every device that cisco manufactures but there are actually additional protocols",
    "start": "125119",
    "end": "130560"
  },
  {
    "text": "this research started from looking in vulnerabilities that were already patched what is called one days and analyzing",
    "start": "130560",
    "end": "138080"
  },
  {
    "text": "the patches for for them we looked at cisco disclosures in various literature protocols",
    "start": "138080",
    "end": "143440"
  },
  {
    "text": "and understood the underlying bugs that were fixed and formed there continued the research and found new vulnerabilities although the",
    "start": "143440",
    "end": "149920"
  },
  {
    "text": "affected devices are embedded devices that use very little mitigation aclr is",
    "start": "149920",
    "end": "156000"
  },
  {
    "text": "used and so overcoming it when exploiting these rc's was not trivial and we will discuss the",
    "start": "156000",
    "end": "161840"
  },
  {
    "text": "technique we developed to bypass a slr that is a very effective for these mobilities that we call polyrop",
    "start": "161840",
    "end": "168640"
  },
  {
    "text": "we'll end with some takeaways on the implication of this research to the security of networks and enterprise-grade iphones and ip",
    "start": "168640",
    "end": "175120"
  },
  {
    "text": "cameras and show a demo on how we manage to exploit the directories on the affected devices",
    "start": "175120",
    "end": "181440"
  },
  {
    "text": "so to begin in high level what is silipon it is five vulnerabilities",
    "start": "181599",
    "end": "188000"
  },
  {
    "text": "uh four remote execution vulnerabilities and one denial of service availability it is it is in the",
    "start": "188000",
    "end": "193920"
  },
  {
    "text": "implementation of cisco's cdp protocol and it affects a wide range of cisco's devices like steady switches routers iphones and ip",
    "start": "193920",
    "end": "200879"
  },
  {
    "text": "cameras and an estimate number of around tens of millions of devices affected",
    "start": "200879",
    "end": "207200"
  },
  {
    "text": "all these devices here were affected from nexus switches which are the newest line of cisco switches",
    "start": "207200",
    "end": "212799"
  },
  {
    "text": "to cisco irs xr routers cisco firepower firewalls and the entire line of current cisco",
    "start": "212799",
    "end": "218640"
  },
  {
    "text": "iphones and this 8000 series of cisco ip cameras",
    "start": "218640",
    "end": "225120"
  },
  {
    "text": "these devices are used everywhere and the cisco iphone specifically are the most prevalent iphones in the market",
    "start": "225120",
    "end": "231360"
  },
  {
    "text": "cisco advertises that 95 percent of fortune 500 companies use their iphone solutions in fact",
    "start": "231360",
    "end": "238560"
  },
  {
    "text": "they are used by the government in corporates in the white house specifically you can",
    "start": "238560",
    "end": "244239"
  },
  {
    "text": "you can find them in the situation room on the resolute",
    "start": "244239",
    "end": "249280"
  },
  {
    "text": "desk and throughout the white house staff rooms",
    "start": "249280",
    "end": "255680"
  },
  {
    "text": "yeah so yes they are really prevalent but they are actually not the main focus of this research",
    "start": "255680",
    "end": "261919"
  },
  {
    "text": "as i mentioned our initial goal was to see how vlan hopping was done in the past and whether it can still be achieved today using additional",
    "start": "261919",
    "end": "268000"
  },
  {
    "text": "vulnerabilities so so to understand vlan hopping techniques",
    "start": "268000",
    "end": "274160"
  },
  {
    "text": "let's discuss for a minute vlans and how network segments work this is a simple design of a",
    "start": "274160",
    "end": "281680"
  },
  {
    "text": "network diagram and the best practice of how networks needs to be connected today you will separate your devices based on",
    "start": "281680",
    "end": "288080"
  },
  {
    "text": "trust level and type of device so you might have one segment for low-grade iot devices that you don't trust at all",
    "start": "288080",
    "end": "294320"
  },
  {
    "text": "they connect to the internet but you really don't want them interacting with anything on your network and then",
    "start": "294320",
    "end": "299600"
  },
  {
    "text": "you'd have a corporate segment for for all your corporate assets your computer your computers and",
    "start": "299600",
    "end": "305600"
  },
  {
    "text": "and and whatnot and so your network will be split according to these segments in order to prevent devices",
    "start": "305600",
    "end": "311840"
  },
  {
    "text": "from low level trust talking to devices with the hard lever trust so if an attacker were to compromise a",
    "start": "311840",
    "end": "318080"
  },
  {
    "text": "device inside the iot segment for example he could interact with other iot devices but he can't by design",
    "start": "318080",
    "end": "324080"
  },
  {
    "text": "talk with devices in the corporate network or other parts of the network for that matter so this is the power of",
    "start": "324080",
    "end": "330400"
  },
  {
    "text": "network segmentation why it should be used and what are the techniques that existed",
    "start": "330400",
    "end": "336720"
  },
  {
    "text": "in the past or maybe still exist today uh that can challenge this strategy uh double vlan tagging",
    "start": "336720",
    "end": "344479"
  },
  {
    "text": "is a very old technique in certain circumstance circumstances it still works today it takes advantage",
    "start": "344479",
    "end": "350240"
  },
  {
    "text": "of a simple flaw in how vlans work each network has what is called an atv lan and it is the idea of the vlan of",
    "start": "350240",
    "end": "356880"
  },
  {
    "text": "any traffic that doesn't have a vlan header the native villa number one is a special case of native vlan",
    "start": "356880",
    "end": "363840"
  },
  {
    "text": "in which untagged traffic in a trunk port is considered to be in vlan number one in the native villain",
    "start": "363840",
    "end": "370639"
  },
  {
    "text": "and unfortunately in active vlan number one is the default native villain and so in a normal network",
    "start": "370639",
    "end": "375759"
  },
  {
    "text": "when you have an attacker connected to a switch through an access port in the native vlan he can send packets",
    "start": "375759",
    "end": "382000"
  },
  {
    "text": "without a vlan header and then in the trunk port between the switches the packets will also be without any vlan header",
    "start": "382000",
    "end": "389759"
  },
  {
    "text": "the switching also supports encapsulating a vlan header from an access port if the used vlan id is the",
    "start": "390160",
    "end": "396080"
  },
  {
    "text": "native villain of the network number one for example so the double vlan tagging attack simply",
    "start": "396080",
    "end": "402160"
  },
  {
    "text": "works by an attacker putting two vlan headers on packets the outer one on a native line and then the inner one",
    "start": "402160",
    "end": "409120"
  },
  {
    "text": "a target vlan id he'd like to be routed to the switch will decapitate the outer header and on",
    "start": "409120",
    "end": "416080"
  },
  {
    "text": "and on on the trunk port the packet will contain the target vlan so this is a very simple technique it",
    "start": "416080",
    "end": "422080"
  },
  {
    "text": "works but it has limitations so first of all you can only send packets one way you can't receive",
    "start": "422080",
    "end": "427280"
  },
  {
    "text": "targets back from the target vlan it's also very simple to fix this cisco recommends customers",
    "start": "427280",
    "end": "432560"
  },
  {
    "text": "not to use native vlan number one and then this problem doesn't exist but in certain cases when switched",
    "start": "432560",
    "end": "439199"
  },
  {
    "text": "configurations are not ideal this can still occur a second logical flaw to do villain",
    "start": "439199",
    "end": "445360"
  },
  {
    "text": "hopping is by abusing dtp btp the cisco propriety particle called the dynamic trunking protocol",
    "start": "445360",
    "end": "451919"
  },
  {
    "text": "this protocol is a simple one it's just there to enable that on the configuration of switch ports parts of a",
    "start": "451919",
    "end": "457840"
  },
  {
    "text": "switch will either be in access mode or trunk mode but dtp enables the port to change to change its mode",
    "start": "457840",
    "end": "463759"
  },
  {
    "text": "dynamically from an access mode to trunk mode by negotiating over the dp packets",
    "start": "463759",
    "end": "472000"
  },
  {
    "text": "so if dtp is not turned off an attacker can simply send a dtp packet to the switch that says to the switch change the mode",
    "start": "472000",
    "end": "479039"
  },
  {
    "text": "of my port from access port to trunk port one that once the port is in",
    "start": "479039",
    "end": "484879"
  },
  {
    "text": "trunk mode the attacker can natively send and receive packets from any vlan so this this just abuses the feature in",
    "start": "484879",
    "end": "491840"
  },
  {
    "text": "cisco switches that allows these virtual devices to change their ports mode from access trunk to from accessport",
    "start": "491840",
    "end": "498720"
  },
  {
    "text": "to trunk port and here a very simple solution from cisco is to turn off ddp at least on any port",
    "start": "498720",
    "end": "505199"
  },
  {
    "text": "that is connected to a non-trusted device",
    "start": "505199",
    "end": "508960"
  },
  {
    "text": "okay so what happens if dtp and double wheel attacking can't be used what can attackers still do",
    "start": "510319",
    "end": "516640"
  },
  {
    "text": "they can look for vulnerabilities in whatever layer 2 particles are parsed by the code inside uh the switch",
    "start": "516640",
    "end": "523360"
  },
  {
    "text": "even in access ports and silly pawn is exactly this vulnerabilities in this exact",
    "start": "523360",
    "end": "528880"
  },
  {
    "text": "attack surface if an attacker has something like cd-pawn how could he use",
    "start": "528880",
    "end": "534000"
  },
  {
    "text": "it so let's take this for example he had an attacker has gained control",
    "start": "534000",
    "end": "539120"
  },
  {
    "text": "over an iot device in the iot segment he can send maliciously crafted cdp packets",
    "start": "539120",
    "end": "545040"
  },
  {
    "text": "that will be parsed by the core switch and if a vulnerability exists there that might that might lead to code",
    "start": "545040",
    "end": "550959"
  },
  {
    "text": "execution on the core switch and from the switch he obviously he obviously has access to the entire network",
    "start": "550959",
    "end": "556560"
  },
  {
    "text": "including all of its vlans a core switch is a very strong position for an attacker to control he can accelerate",
    "start": "556560",
    "end": "562640"
  },
  {
    "text": "data from the switch he can listen in on any network traffic that traverses through the switch and he can carry out many in the middle",
    "start": "562640",
    "end": "568800"
  },
  {
    "text": "attacks so other than vlan hopping which is where we started it is important to understand that attacking a",
    "start": "568800",
    "end": "574480"
  },
  {
    "text": "switch can be a gold mine of its own to attackers",
    "start": "574480",
    "end": "579360"
  },
  {
    "text": "as i mentioned before dtp is a layer 2 protocol that is used",
    "start": "580080",
    "end": "588000"
  },
  {
    "text": "that had these logical flaws that allow you to move from an access port to a transport but there are",
    "start": "588000",
    "end": "594080"
  },
  {
    "text": "actually many more of these air to protocols that are used by network appliances",
    "start": "594080",
    "end": "599120"
  },
  {
    "text": "by switches and routers the orange ones here are cisco proprietary particles but cisco is",
    "start": "599120",
    "end": "605519"
  },
  {
    "text": "the de facto standard in network appliances so an attacker can consider all of these protocols as a",
    "start": "605519",
    "end": "610800"
  },
  {
    "text": "potential attack surface for him to try and poke at",
    "start": "610800",
    "end": "615120"
  },
  {
    "text": "okay so now uh barack will talk about the research that we've done",
    "start": "616800",
    "end": "623680"
  },
  {
    "text": "analyzing cisco security advisories and layer 2 protocols and how this led us eventually to the video that",
    "start": "623680",
    "end": "631120"
  },
  {
    "text": "we've discovered",
    "start": "631120",
    "end": "633839"
  },
  {
    "text": "hi so we wanted to find the most vulnerable parts of the layer to attack surface",
    "start": "636640",
    "end": "641680"
  },
  {
    "text": "so we started by looking at one days from cisco's website both of these advisories seem like they",
    "start": "641680",
    "end": "647040"
  },
  {
    "text": "could lead to some remote code execution",
    "start": "647040",
    "end": "651600"
  },
  {
    "text": "both of these advisories are about discovery protocols also the protocols are enabled by default and terminated",
    "start": "652240",
    "end": "658079"
  },
  {
    "text": "by the nearest switch cdp and ndp are discovery protocols the main functionality is for devices to find one",
    "start": "658079",
    "end": "664880"
  },
  {
    "text": "another in the network they walk away devices simply simply sending advertisement packets to a designated mac address every device",
    "start": "664880",
    "end": "672480"
  },
  {
    "text": "that listens to these advertisement packets records them and will not follow them down the line",
    "start": "672480",
    "end": "678399"
  },
  {
    "text": "cdp the cisco discovery protocol supports some advanced features like a voip and dedicated vlan and power over",
    "start": "678399",
    "end": "684959"
  },
  {
    "text": "ethernet negotiation which allows the voip phones to request specific power required requirements from the switch that's why",
    "start": "684959",
    "end": "692000"
  },
  {
    "text": "cisco voice phones don't have a cdp shutdown function it will hurt the functionality of the",
    "start": "692000",
    "end": "697839"
  },
  {
    "text": "device we saw this lldp one day in a cisco security advisory",
    "start": "697839",
    "end": "704160"
  },
  {
    "text": "and thought we may be able to exploit it and the only technical data was that",
    "start": "704160",
    "end": "709200"
  },
  {
    "text": "the vulnerability exists due to improper level handling of malformed lldp messages not much not much to start from so we",
    "start": "709200",
    "end": "716240"
  },
  {
    "text": "compared the firmware before and after the patch and looked for changes in the lldp passing functions",
    "start": "716240",
    "end": "723440"
  },
  {
    "text": "we used the afra as a diffic tool one of its handy features is the comparison of branches if",
    "start": "723440",
    "end": "729200"
  },
  {
    "text": "statements between matching functions the lldp process tlv function changed",
    "start": "729200",
    "end": "735519"
  },
  {
    "text": "quite a bit in green you can see the changes the function uses a switch case to pass",
    "start": "735519",
    "end": "740720"
  },
  {
    "text": "htlv tv is a type length value structure and for each tlv there are different length restrictions",
    "start": "740720",
    "end": "748800"
  },
  {
    "text": "as you can see there were many missing length checks we could easily develop a denial of",
    "start": "748800",
    "end": "753839"
  },
  {
    "text": "service attack using this but we were unable to make a remote code execution out of it so we continued our research",
    "start": "753839",
    "end": "759360"
  },
  {
    "text": "to cdp dcve says the vulnerability exists because of insufficiently validated cdp",
    "start": "759360",
    "end": "766240"
  },
  {
    "text": "packet headers just like with the lldp1day there is not much information in this cve but",
    "start": "766240",
    "end": "772240"
  },
  {
    "text": "they do say that it's a buffer overflow and that it could allow arbitrary code execution",
    "start": "772240",
    "end": "777360"
  },
  {
    "text": "so let's examine the cdp protocol looking at the addresses dlv we see",
    "start": "777360",
    "end": "783600"
  },
  {
    "text": "there are a lot of lengths and some of them doesn't even make sense the tlv length is two bytes but the",
    "start": "783600",
    "end": "789120"
  },
  {
    "text": "number of addresses is a four bytes field besides that we have two more landfills for each address",
    "start": "789120",
    "end": "794880"
  },
  {
    "text": "great for vulnerability research we tried overflowing each length and the device didn't crash",
    "start": "794880",
    "end": "801120"
  },
  {
    "text": "so we took a look at the actual code we found an interesting state confusion",
    "start": "801120",
    "end": "806160"
  },
  {
    "text": "that leads to a memory corruption by sending a legitimate packet and a malicious one right after it",
    "start": "806160",
    "end": "811440"
  },
  {
    "text": "on the right you can see the code that handles this field it tries to make sure that the address",
    "start": "811440",
    "end": "816880"
  },
  {
    "text": "length matches the protocol type so that ipv4 will have a 4 byte address and ipv6 will have a 16 byte address",
    "start": "816880",
    "end": "824000"
  },
  {
    "text": "an address blob is allocated for each device when the first lp packet arrives and it is being updated for every new",
    "start": "824000",
    "end": "830160"
  },
  {
    "text": "cpu packet address len and protocol type are tackle controlled so the first packet is a legitimate",
    "start": "830160",
    "end": "836959"
  },
  {
    "text": "rpv41 it sets the protocol type in the address blob to ipv4 and the address lan",
    "start": "836959",
    "end": "842560"
  },
  {
    "text": "to 4. on the next packet the attacker sets the protocol type to an invalid value",
    "start": "842560",
    "end": "847680"
  },
  {
    "text": "neither ipv4 nor ipv6 and sets the length to max unsigned short and since the",
    "start": "847680",
    "end": "853440"
  },
  {
    "text": "protocol type is invalid both if statements in the beginning of the function are not taken",
    "start": "853440",
    "end": "858720"
  },
  {
    "text": "and the protocol type stays ipv4 next and it's the one from the previous",
    "start": "858720",
    "end": "864240"
  },
  {
    "text": "packet next when we get to the last if statement we now get to copy as much as we want",
    "start": "864240",
    "end": "870480"
  },
  {
    "text": "to the address blob which is only 32 bytes long",
    "start": "870480",
    "end": "875120"
  },
  {
    "text": "we are now convinced that cdp is a good target and that boundary checks are an issue in this pulsar zero days",
    "start": "875600",
    "end": "882399"
  },
  {
    "text": "are closer than ever so it's time to sit upon all the things",
    "start": "882399",
    "end": "888160"
  },
  {
    "text": "so this first zero day we're going to talk about is actually in the same tlv as the previous one day",
    "start": "888399",
    "end": "895120"
  },
  {
    "text": "it impacts a white a wide variety of cisco switches and routers and you will shortly see",
    "start": "895120",
    "end": "900160"
  },
  {
    "text": "it deals with faulty length checks specifically the number of addresses which is a 4 byte long length",
    "start": "900160",
    "end": "907120"
  },
  {
    "text": "that's weird because the tlv length is represented with 2 with only 2 bytes so it's impossible to fit that amount of",
    "start": "907120",
    "end": "913600"
  },
  {
    "text": "addresses in the cdp packet in the next few slides we will show you we'll see how different code bases",
    "start": "913600",
    "end": "919440"
  },
  {
    "text": "struggled with these multiple lan fields the first vulnerable codebase is the one",
    "start": "919440",
    "end": "925600"
  },
  {
    "text": "found in the ios xr based product which mentioned which mainly includes routers notice that",
    "start": "925600",
    "end": "931440"
  },
  {
    "text": "there is a malloc with a user controlled size there is also a length check but the size that is checked is not",
    "start": "931440",
    "end": "938079"
  },
  {
    "text": "the one that is being allocated and both are vulnerable to classic integer overflows",
    "start": "938079",
    "end": "943279"
  },
  {
    "text": "if we can find a number that will overflow to a to a small number in the first check and a large number uh",
    "start": "943279",
    "end": "949360"
  },
  {
    "text": "when the allocation occurred occurs we can exhaust the device's memory",
    "start": "949360",
    "end": "955839"
  },
  {
    "text": "let's take max unsigned in divided by 5 rounded up after the multiplication and overflow we",
    "start": "956639",
    "end": "963279"
  },
  {
    "text": "end up with a small size by passing the length check but we end up trying to allocate three",
    "start": "963279",
    "end": "969920"
  },
  {
    "text": "gigabytes causing the malloc to fail instead of a deny of service now we'll try to take the same size but",
    "start": "969920",
    "end": "977279"
  },
  {
    "text": "times four causing another overflow in the allocation size we still get a small enough size for the",
    "start": "977279",
    "end": "984079"
  },
  {
    "text": "length and now we're trying to allocate only",
    "start": "984079",
    "end": "989240"
  },
  {
    "text": "820 megabytes and the allocation succeeds do that a few times and the device crashes",
    "start": "989240",
    "end": "994959"
  },
  {
    "text": "send these packets every 10 seconds and you put the router in a bootloop the next code base is the one of nxos",
    "start": "994959",
    "end": "1002720"
  },
  {
    "text": "that code is used in many of cisco switches and specifically the nexus series and xos is linux based and the chosen",
    "start": "1002720",
    "end": "1009920"
  },
  {
    "text": "parsing implement implementation is a one where each protocol parcel has its own process in this code base",
    "start": "1009920",
    "end": "1016639"
  },
  {
    "text": "the second if will allocate the new value if it's bigger than the old value so we can just ignore it",
    "start": "1016639",
    "end": "1021920"
  },
  {
    "text": "and the first if looks like some kind of overflow check but faulty one multiplying number of",
    "start": "1021920",
    "end": "1029438"
  },
  {
    "text": "addresses by 32 is the same as shifting the value by five bits left so to pass the first if statement we",
    "start": "1029439",
    "end": "1036400"
  },
  {
    "text": "just need the first five bits to be smaller than the next five ones",
    "start": "1036400",
    "end": "1041438"
  },
  {
    "text": "using this an attacker can allocate any number of bytes and easily crash the cdp process on nxos",
    "start": "1041439",
    "end": "1047600"
  },
  {
    "text": "the cdp process is restarted when it crashes but if there are more than 3 crashes in the same 5 minutes",
    "start": "1047600",
    "end": "1054080"
  },
  {
    "text": "the entire switch reboots an attacker could boot loop the device by broadcasting cdp messages every couple",
    "start": "1054080",
    "end": "1060320"
  },
  {
    "text": "of seconds the next geoday we'll talk about affects the same nxos",
    "start": "1060320",
    "end": "1066400"
  },
  {
    "text": "based devices it is in the power request tlv and it is a simple stack overflow funny",
    "start": "1066400",
    "end": "1071760"
  },
  {
    "text": "to me to mention this bug works even if the switch has no poe power over ethernet support because",
    "start": "1071760",
    "end": "1078480"
  },
  {
    "text": "the passing code is still there we successfully exploited this zero day due to no stack canaries and low entropy",
    "start": "1078480",
    "end": "1085120"
  },
  {
    "text": "aslr we will talk about how we bypassed the slr in a minute besides the stack overflow there is a",
    "start": "1085120",
    "end": "1091360"
  },
  {
    "text": "rightward well primitive which we will also demonstrate",
    "start": "1091360",
    "end": "1096399"
  },
  {
    "text": "okay so temp is a stack buffer of fixed length the while loop copies data from the cdp",
    "start": "1096960",
    "end": "1103600"
  },
  {
    "text": "packet to that buffer with no length checks whatsoever besides that a1 is also pointer on the",
    "start": "1103600",
    "end": "1109679"
  },
  {
    "text": "stack and the payload is written to an offset of it so when we overwrite a1 we get a",
    "start": "1109679",
    "end": "1116160"
  },
  {
    "text": "lightweight primitive as well it means we have both a stack overflow and a lightweight well primitive",
    "start": "1116160",
    "end": "1122480"
  },
  {
    "text": "in the same exploit packet let's see how we can leverage that",
    "start": "1122480",
    "end": "1127600"
  },
  {
    "text": "before digging in let's explore the mitigations the only mitigation in these devices are",
    "start": "1127679",
    "end": "1133520"
  },
  {
    "text": "nxbits and 32-bit aslr since the cdp process is a 32-bit process for 32-bit linux aslr is",
    "start": "1133520",
    "end": "1140960"
  },
  {
    "text": "randomizing just one byte of the address and it's not the most significant one",
    "start": "1140960",
    "end": "1146320"
  },
  {
    "text": "so the distance between two adjacent slr options is only four kilobytes multiply that by the number of options",
    "start": "1146320",
    "end": "1153320"
  },
  {
    "text": "256 and you get one megabyte top distance between two asl options",
    "start": "1153320",
    "end": "1158400"
  },
  {
    "text": "it means that if some code section is bigger than one megabyte an attacker can choose an address that",
    "start": "1158400",
    "end": "1164480"
  },
  {
    "text": "is guaranteed to have some code in it for any slr option besides that the entire memory map has the same asl",
    "start": "1164480",
    "end": "1171679"
  },
  {
    "text": "shift and shared objects are only 4 kilobytes apart which also helps dealing with aslr",
    "start": "1171679",
    "end": "1178559"
  },
  {
    "text": "we dub the term polyrop for the technique of slr based switch case",
    "start": "1178559",
    "end": "1183679"
  },
  {
    "text": "the concept is to find one absolute address that triggers different drop gadgets based on the current aslog option and",
    "start": "1183679",
    "end": "1190799"
  },
  {
    "text": "build a lock chain that works for more than one slr option without the need for infolex using this we can",
    "start": "1190799",
    "end": "1197280"
  },
  {
    "text": "shorten the slr boot first time and exploit the device in minutes instead of days",
    "start": "1197280",
    "end": "1203840"
  },
  {
    "text": "the other start it was defined to find in this poly option is the multi gadget an",
    "start": "1203840",
    "end": "1209520"
  },
  {
    "text": "address that triggers a different gadget for every slr option we are going to demonstrate a multi gadget that works",
    "start": "1209520",
    "end": "1215600"
  },
  {
    "text": "for three slr options in green you can see we highlighted the byte that sl shifts as you can see the addresses",
    "start": "1215600",
    "end": "1222559"
  },
  {
    "text": "are the same except for that byte so we can put one of these addresses and let aslr",
    "start": "1222559",
    "end": "1228400"
  },
  {
    "text": "choose the proper gadget for us it is another representation every",
    "start": "1228400",
    "end": "1233840"
  },
  {
    "text": "column represents represents the memory space of one slr option and the multi-gadget is the address",
    "start": "1233840",
    "end": "1240559"
  },
  {
    "text": "we're going to jump to at the beginning of our blockchain you can see that in sl option 1",
    "start": "1240559",
    "end": "1246159"
  },
  {
    "text": "the multi-gadget address triggers gadget a in slr option 2 it triggers gadget b and in slr option 3",
    "start": "1246159",
    "end": "1252880"
  },
  {
    "text": "it triggers gadget c so let's take the three addresses and",
    "start": "1252880",
    "end": "1258640"
  },
  {
    "text": "check the hypothesis with actual numbers for slr option 0",
    "start": "1258640",
    "end": "1263919"
  },
  {
    "text": "the addresses stay the same for sll option 8 the addresses are shifted and now",
    "start": "1263919",
    "end": "1269600"
  },
  {
    "text": "another gadget falls on address 6f314 for slot option 45",
    "start": "1269600",
    "end": "1275679"
  },
  {
    "text": "the addresses are shifted again and another gadget is moved to the same 6f address and bingo by jumping to",
    "start": "1275679",
    "end": "1283200"
  },
  {
    "text": "address 6f 314 we are guaranteed that one of the gadgets will be activated each row shows the location of the",
    "start": "1283200",
    "end": "1290159"
  },
  {
    "text": "gadgets for a specific aslr option and you can see that each row has some gadget in the address",
    "start": "1290159",
    "end": "1295880"
  },
  {
    "text": "6f314 looking back at this gadget gadget a pops and returns gadget b",
    "start": "1295880",
    "end": "1303520"
  },
  {
    "text": "pops and returns and double pops and returns and gadget c gets 32 bytes off the stack and returned",
    "start": "1303520",
    "end": "1310799"
  },
  {
    "text": "that means that for every aslog option the drop chain is pivoted and pivoted into a different",
    "start": "1310799",
    "end": "1316840"
  },
  {
    "text": "address looking at the rope chain flow the multi-gadget",
    "start": "1316840",
    "end": "1322320"
  },
  {
    "text": "acts as a switch case and splits the option to an individual option for each slr option in order to have",
    "start": "1322320",
    "end": "1329520"
  },
  {
    "text": "enough space for each slr option we needed to space out the rope chains for this purpose we use stacked keeping",
    "start": "1329520",
    "end": "1337120"
  },
  {
    "text": "stack skipping gadgets stack skipping gadgets are the gargets that add to the stack pointer but don't",
    "start": "1337120",
    "end": "1342480"
  },
  {
    "text": "write to the process memory using stack skipping gadgets we can give each rock chain enough space",
    "start": "1342480",
    "end": "1349280"
  },
  {
    "text": "to install execution and execute our shellcode so we just need to find some stacks keepers",
    "start": "1349280",
    "end": "1356000"
  },
  {
    "text": "just a second okay um these are a few stack skipper examples",
    "start": "1357520",
    "end": "1362559"
  },
  {
    "text": "the only uh changer they only change registers and the stack address but don't touch any actual memory",
    "start": "1362559",
    "end": "1368640"
  },
  {
    "text": "the first one on the left pops 244 bytes and returns the second one 36 and the",
    "start": "1368640",
    "end": "1374799"
  },
  {
    "text": "last one 640. we are no longer limited by slr so we made a script that automatically finds",
    "start": "1374799",
    "end": "1380799"
  },
  {
    "text": "a stack skipping gadgets and found these every line in this dictionary maps",
    "start": "1380799",
    "end": "1387039"
  },
  {
    "text": "between a skipping length and a rope gadget address so a quick recap the multi gadgets place",
    "start": "1387039",
    "end": "1394400"
  },
  {
    "text": "the rope to multiple paths because it triggers a different gadget for every slr option the stack skippers space out the rope",
    "start": "1394400",
    "end": "1401520"
  },
  {
    "text": "chains so that they have enough space for the shell code and now we just need to write the shell",
    "start": "1401520",
    "end": "1406720"
  },
  {
    "text": "code as if there is no slr and relocate the addresses for every srl option object",
    "start": "1406720",
    "end": "1413360"
  },
  {
    "text": "using this method we were able to make one rope chain that works for 15 slr options including execution",
    "start": "1413600",
    "end": "1420080"
  },
  {
    "text": "restoration this reduced the exploitation time from about seven hours to a half an hour and was a lot of fun",
    "start": "1420080",
    "end": "1426960"
  },
  {
    "text": "to develop in the picture you can see a remote a wood shell that we were able to trigger",
    "start": "1426960",
    "end": "1432480"
  },
  {
    "text": "using this exploitation so now we'll demonstrate this code",
    "start": "1432480",
    "end": "1439600"
  },
  {
    "text": "exploitation by takeover a cisco nexus switch and on the right you see a laptop on the",
    "start": "1439600",
    "end": "1444880"
  },
  {
    "text": "network on the internal network and the cisco switch on the bottom and on the left you can see the hacker",
    "start": "1444880",
    "end": "1451039"
  },
  {
    "text": "terminal and now it tries to get the secret data and he can't because it's not in the correct villain so he sniffs the",
    "start": "1451039",
    "end": "1458400"
  },
  {
    "text": "cdp packets and inside the cdp packets he knows you see the data from",
    "start": "1458400",
    "end": "1464080"
  },
  {
    "text": "which port is connected to the switch so now he can change settings for his own",
    "start": "1464080",
    "end": "1470080"
  },
  {
    "text": "port when he gets code execution now the attacker starts the attack sends the payload",
    "start": "1470080",
    "end": "1478640"
  },
  {
    "text": "until he gets an aslr bypass",
    "start": "1478640",
    "end": "1482880"
  },
  {
    "text": "successfully executed and now he adds a user to the switch and adds a management ip for the switch",
    "start": "1484000",
    "end": "1492240"
  },
  {
    "text": "in the same vlan as the vm is currently connected to [Music]",
    "start": "1492240",
    "end": "1498080"
  },
  {
    "text": "and connects the switch",
    "start": "1498080",
    "end": "1501840"
  },
  {
    "text": "okay so now he is connected to the switch he can execute a root shell and do whatever he wants so",
    "start": "1505679",
    "end": "1513120"
  },
  {
    "text": "he checks the villains and he sees he's connected to the guest villain and the it network is on the super",
    "start": "1513120",
    "end": "1521039"
  },
  {
    "text": "secret villain so it just changes the villain of the attacker to the one of the super secret villain",
    "start": "1521039",
    "end": "1530400"
  },
  {
    "text": "and when it's connected to the super secret wheel you can get the secret data and actually",
    "start": "1533440",
    "end": "1539520"
  },
  {
    "text": "exfiltrate it out okay",
    "start": "1539520",
    "end": "1546400"
  },
  {
    "text": "cool so the last video day we'll talk about effects multiple models of cisco voip phones it is also a simple",
    "start": "1550240",
    "end": "1557520"
  },
  {
    "text": "stack overflow using a mem copy with no length validation like nx os the cdp passing process runs",
    "start": "1557520",
    "end": "1564720"
  },
  {
    "text": "with loot privileges meaning that an attacker gains full control over a device after exploiting",
    "start": "1564720",
    "end": "1569919"
  },
  {
    "text": "this vulnerability as mentioned before cp is sent with a",
    "start": "1569919",
    "end": "1575200"
  },
  {
    "text": "special multicast mac address assuming it's all cisco switches when a cdp packet is being sent correctly it is",
    "start": "1575200",
    "end": "1582320"
  },
  {
    "text": "parsed in the neighbor's switch and it's not being forward the switch discards it because",
    "start": "1582320",
    "end": "1588080"
  },
  {
    "text": "it assumes the packet is destined for the switch",
    "start": "1588080",
    "end": "1593840"
  },
  {
    "text": "when a malformed packet one with an incorrect mac address is being sent the enabling switch will",
    "start": "1593919",
    "end": "1600480"
  },
  {
    "text": "pass it on since it's not being identified as a cv packet",
    "start": "1600480",
    "end": "1605840"
  },
  {
    "text": "if a packet is sent with a unicast or broadcast address it will be forwarded but not passed by",
    "start": "1605840",
    "end": "1611760"
  },
  {
    "text": "the switch at all on the way to the target we found another block in this line of void phones it doesn't check the mac",
    "start": "1611760",
    "end": "1619360"
  },
  {
    "text": "address when it parses cdp packets meaning that the malphone packet will be parsed as if it was a legitimate one",
    "start": "1619360",
    "end": "1626159"
  },
  {
    "text": "this expands the possible attack targets to all of the cisco voice phones in the current plan",
    "start": "1626159",
    "end": "1633039"
  },
  {
    "text": "to demonstrate this bug we can take a look at this graph showing the flow of a cdp packet inside",
    "start": "1633039",
    "end": "1638799"
  },
  {
    "text": "the void phone the main things to look at to look at are the red part which is the function containing the",
    "start": "1638799",
    "end": "1644320"
  },
  {
    "text": "stack overflow vulnerability and the green part which is the function in charge of packet validation",
    "start": "1644320",
    "end": "1651360"
  },
  {
    "text": "it is the function that validates the cdp packet as we can see the only validation of the ethernet",
    "start": "1651679",
    "end": "1657039"
  },
  {
    "text": "adder is of the source mac address and not the destination mac this means that any destination mac can",
    "start": "1657039",
    "end": "1662960"
  },
  {
    "text": "be used including including unicast and broadcast once again this enables the attacker to attack any",
    "start": "1662960",
    "end": "1669440"
  },
  {
    "text": "target in his in his local land as we've said these voips can be found",
    "start": "1669440",
    "end": "1675840"
  },
  {
    "text": "in imposing places let's take a closer look at the exploitation process",
    "start": "1675840",
    "end": "1681520"
  },
  {
    "text": "this iphone runs a linux system with busybox on a 32-bit arm processor it has aslr",
    "start": "1681520",
    "end": "1688000"
  },
  {
    "text": "and nxbit on as we've seen before linux 32-bit aslr randomizes only one byte",
    "start": "1688000",
    "end": "1693600"
  },
  {
    "text": "with the top memory distance of one megabyte between two ace vlog options",
    "start": "1693600",
    "end": "1698640"
  },
  {
    "text": "we will try polyrop for this offer to exploit but there are a few differences we need to consider",
    "start": "1698640",
    "end": "1704960"
  },
  {
    "text": "first the addresses in arm are aligned it means that we can choose an address that will give a valid op code for all",
    "start": "1704960",
    "end": "1711200"
  },
  {
    "text": "slr options second in r we also have the thumb mode as another alignment option if we look",
    "start": "1711200",
    "end": "1718159"
  },
  {
    "text": "back at our x 86 exploit the addresses are unaligned so we may not have a valid code for",
    "start": "1718159",
    "end": "1724480"
  },
  {
    "text": "every slr option but we have more addresses to choose from in general it sounds like polyrop",
    "start": "1724480",
    "end": "1730240"
  },
  {
    "text": "should be easier for this architect architecture",
    "start": "1730240",
    "end": "1735440"
  },
  {
    "text": "our first attempt at rm32 polygroup is all about branching looking at the epilogue of the",
    "start": "1735840",
    "end": "1741440"
  },
  {
    "text": "vulnerable function we see that the function ends with a pop of registers the stack pointer",
    "start": "1741440",
    "end": "1747760"
  },
  {
    "text": "and the pc this is actually very bad since the stack is also as allowed meaning we can",
    "start": "1747760",
    "end": "1753520"
  },
  {
    "text": "execute only one rope gadget because we don't know where the stack is but what can we do with just one drop",
    "start": "1753520",
    "end": "1759279"
  },
  {
    "text": "gadget we thought of this idea we use that one gadget to branch to a register",
    "start": "1759279",
    "end": "1766240"
  },
  {
    "text": "hopefully a different register for every slr option since we also overwrite the stack pointer the address we are going to",
    "start": "1766240",
    "end": "1773039"
  },
  {
    "text": "branch to is the start function of the parsing thread essentially restarting the current thread",
    "start": "1773039",
    "end": "1778720"
  },
  {
    "text": "but this time with a known stack address now that we know the stack address we can resend the exploit",
    "start": "1778720",
    "end": "1784480"
  },
  {
    "text": "but this time with a longer polygroup since the stack address is known",
    "start": "1784480",
    "end": "1790480"
  },
  {
    "text": "we found this branching multicartrid same as before the only difference between these gadgets at this gadget addresses is the byte",
    "start": "1790799",
    "end": "1798080"
  },
  {
    "text": "that slr randomizes but each gadget branches to a different register making a great multi-gadget the first gadget",
    "start": "1798080",
    "end": "1805360"
  },
  {
    "text": "branches to register seven the second one to register 4 and the third one to register 12.",
    "start": "1805360",
    "end": "1812559"
  },
  {
    "text": "to sound this poly up attempt we use the multi gadget to branch to register a different register for each slr option",
    "start": "1812559",
    "end": "1819919"
  },
  {
    "text": "the function we branch to is the thread start function and stack address is shifted",
    "start": "1819919",
    "end": "1825279"
  },
  {
    "text": "to an absolute address now that we know the stack address we send another packet with a full poly",
    "start": "1825279",
    "end": "1830640"
  },
  {
    "text": "option the main flaw of this method is that we are limited by the amount of popped",
    "start": "1830640",
    "end": "1836799"
  },
  {
    "text": "registers and in reality we found an exploit that works only for five unique options",
    "start": "1836799",
    "end": "1842000"
  },
  {
    "text": "hence polyurop m32 version two this time we use the same cv but don't",
    "start": "1842000",
    "end": "1848880"
  },
  {
    "text": "overwrite the stack pointer or the pc we found that just by overwriting the registers with the correct values we get",
    "start": "1848880",
    "end": "1855440"
  },
  {
    "text": "a relative right what well primitive and in the wise words of sar amar some people say that all you need is",
    "start": "1855440",
    "end": "1861840"
  },
  {
    "text": "love this is a lie all you need is a relatively write primitive we are going to use the relative right",
    "start": "1861840",
    "end": "1867760"
  },
  {
    "text": "in order to spray stack pivots that's not a stack spray we are literally going to spray stacks",
    "start": "1867760",
    "end": "1874399"
  },
  {
    "text": "after we spray our relative stacks we will jump to an absolute address and let slr choose the correct stack for",
    "start": "1874399",
    "end": "1881519"
  },
  {
    "text": "us we are going to explain this in more detail",
    "start": "1881519",
    "end": "1886720"
  },
  {
    "text": "okay each column in the slide illustrates the memory space of the cdp process for a specific slr",
    "start": "1888240",
    "end": "1893840"
  },
  {
    "text": "option and the three of the three options are four kilobytes apart in orange we have the absolute address",
    "start": "1893840",
    "end": "1899919"
  },
  {
    "text": "of our new stack that's where we want our our opt chain to be",
    "start": "1899919",
    "end": "1906799"
  },
  {
    "text": "we use the relative right primitive to write the drop chain for slr option 1. for slr option 1 it falls right on the",
    "start": "1906799",
    "end": "1913120"
  },
  {
    "text": "address of the new stack for slr option 2 it's 4 kilobytes away and for slr option 3 it's 8 kilobytes",
    "start": "1913120",
    "end": "1919440"
  },
  {
    "text": "away so we use the relative right to write the drop chain of slr option 2.",
    "start": "1919440",
    "end": "1925440"
  },
  {
    "text": "since it's relative the drop chain for slot option 1 is untouched and now option 2 has the correct sll",
    "start": "1925440",
    "end": "1931760"
  },
  {
    "text": "option in the correct place we use the relative right again this time writing the op chain for slr option",
    "start": "1931760",
    "end": "1938960"
  },
  {
    "text": "3. now all we need to do is to overwrite the stack with the absolute address of the new",
    "start": "1938960",
    "end": "1945519"
  },
  {
    "text": "stack that's the orange line and let aslr choose the correct drop chain for us",
    "start": "1945519",
    "end": "1951919"
  },
  {
    "text": "to sum this up we now have an exploit that works for all asl options without crashing the device even once we",
    "start": "1951919",
    "end": "1958960"
  },
  {
    "text": "just send 256 packets let's write the relative op chains one for each slr option and",
    "start": "1958960",
    "end": "1965600"
  },
  {
    "text": "one packet that pivots the stack since this can be sent over multicast",
    "start": "1965600",
    "end": "1970880"
  },
  {
    "text": "an attacker can use this to sit upon all cisco voips on the network in just one go we would",
    "start": "1970880",
    "end": "1977120"
  },
  {
    "text": "like to mention that this polylop technique works for any exploitation of 32-bit aslr",
    "start": "1977120",
    "end": "1982399"
  },
  {
    "text": "when the attacker has a relative right and a stack pivot primitive so we made a write paper for the",
    "start": "1982399",
    "end": "1987919"
  },
  {
    "text": "specific technique and now i will pass the print the presentation to ben we'll show some",
    "start": "1987919",
    "end": "1992960"
  },
  {
    "text": "demos of this exploitation okay so as barack mentioned we managed",
    "start": "1992960",
    "end": "2000240"
  },
  {
    "text": "to exploit this with the bypass of the aslr um and we're gonna show a",
    "start": "2000240",
    "end": "2007120"
  },
  {
    "text": "demo of this but first uh when we come to exploiting a voip phone uh we need to think what can we do",
    "start": "2007120",
    "end": "2014159"
  },
  {
    "text": "with a voip phone and obviously uh first of all it's a phone so it contains",
    "start": "2014159",
    "end": "2019760"
  },
  {
    "text": "audio of calls but it also has a screen and it has a keypad so actually the next",
    "start": "2019760",
    "end": "2026480"
  },
  {
    "text": "step is we want to run doom on it",
    "start": "2026480",
    "end": "2031600"
  },
  {
    "text": "so let's say let's see how this is done in this next demo",
    "start": "2031600",
    "end": "2037039"
  },
  {
    "text": "okay so on the left we have the hacker terminal and on the bottom left we'll see the audio recording",
    "start": "2040480",
    "end": "2047200"
  },
  {
    "text": "of whatever the hacker is recording on the phone um there is a phone call taking place or",
    "start": "2047200",
    "end": "2055200"
  },
  {
    "text": "is this there is something to record and then the attack starts we send this unicast",
    "start": "2055200",
    "end": "2061520"
  },
  {
    "text": "exploit in this example uh and we can also see that the the attacker is able to blink",
    "start": "2061520",
    "end": "2067760"
  },
  {
    "text": "the leds and record the ongoing call upload it back to his machine",
    "start": "2067760",
    "end": "2075679"
  },
  {
    "text": "and then we will see that he is able to listen in on the conversation",
    "start": "2075679",
    "end": "2081838"
  },
  {
    "text": "and now the fun part so we take over the screen of the device we upload doom to it and we start the",
    "start": "2084000",
    "end": "2091599"
  },
  {
    "text": "doom game and now we can see the skills of whatever whoever is",
    "start": "2091599",
    "end": "2098160"
  },
  {
    "text": "playing down here",
    "start": "2098160",
    "end": "2103838"
  },
  {
    "text": "um okay lastly we can see that selling this broadcast cp packet will crash all",
    "start": "2111280",
    "end": "2116640"
  },
  {
    "text": "of these devices simultaneously uh we didn't show those here but um",
    "start": "2116640",
    "end": "2122320"
  },
  {
    "text": "using the same exploits that we started with we can also do this broadcast aslr bypass integ",
    "start": "2122320",
    "end": "2129359"
  },
  {
    "text": "take over all of these voips simultaneously okay um so",
    "start": "2129359",
    "end": "2136880"
  },
  {
    "text": "another thing to know that a couple of months after we we published this research",
    "start": "2136880",
    "end": "2143760"
  },
  {
    "text": "there were a few other cvs that were discovered in cdp",
    "start": "2143760",
    "end": "2149040"
  },
  {
    "text": "and this is something that happens from time to time one researcher comes in finds vulnerabilities and this",
    "start": "2149040",
    "end": "2155599"
  },
  {
    "text": "marks the way to other researchers there is a potential here for vulnerabilities um and so we this is this brings us to",
    "start": "2155599",
    "end": "2164640"
  },
  {
    "text": "the takeaways from this talk that the purpose of this research as i said",
    "start": "2164640",
    "end": "2170640"
  },
  {
    "text": "in the beginning was to tackle network segmentation and as we saw it isn't bulletproof",
    "start": "2170640",
    "end": "2177440"
  },
  {
    "text": "vulnerabilities can be found in it we found five of these and then four more found a couple of",
    "start": "2177440",
    "end": "2182960"
  },
  {
    "text": "months later in cdp and the attack surface is quite large so there may be other",
    "start": "2182960",
    "end": "2188160"
  },
  {
    "text": "vulnerabilities that exist here um second um laser layer two particles are",
    "start": "2188160",
    "end": "2195119"
  },
  {
    "text": "an untapped attack surface the fact that we found five voltages um and then four more were found a",
    "start": "2195119",
    "end": "2201440"
  },
  {
    "text": "couple of months later it seems that this attack surface is ripe and there are",
    "start": "2201440",
    "end": "2206720"
  },
  {
    "text": "other vulnerabilities that may be found here um third thing is what we saw in poliwap",
    "start": "2206720",
    "end": "2213200"
  },
  {
    "text": "aslr is not perfect when it comes to 32 bit linux",
    "start": "2213200",
    "end": "2218800"
  },
  {
    "text": "and so even when mitigations are used you should use them in the correct way",
    "start": "2218800",
    "end": "2224160"
  },
  {
    "text": "or in a very hardened way and lastly but most importantly uh",
    "start": "2224160",
    "end": "2229839"
  },
  {
    "text": "running doom on a cisco voip is probably the best use of a conference room and we really recommend it",
    "start": "2229839",
    "end": "2235760"
  },
  {
    "text": "and we some have some time for questions now and we'd be happy to to take your questions",
    "start": "2235760",
    "end": "2241760"
  },
  {
    "text": "thank you",
    "start": "2241760",
    "end": "2245280"
  }
]