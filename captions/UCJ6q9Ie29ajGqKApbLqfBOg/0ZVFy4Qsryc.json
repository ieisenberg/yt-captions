[
  {
    "start": "0",
    "end": "45000"
  },
  {
    "text": "good afternoon welcome to sgx secure enclaves in practice security and crypto review in South Seas GH with Jean phip",
    "start": "199",
    "end": "8360"
  },
  {
    "text": "omon and Luis Marino before we begin a few brief notes stop by the business Hall located in Bayside AB on the first",
    "start": "8360",
    "end": "15320"
  },
  {
    "text": "level the blackhead Arsenal continues to be on the in the Palm foyer on level three and of course the Arsenal",
    "start": "15320",
    "end": "20480"
  },
  {
    "text": "reception will be today at 5:00 p.m. if you haven't picked up your merchandise today is your last chance to visit the",
    "start": "20480",
    "end": "26279"
  },
  {
    "text": "black hat swag and bookstore visit the colie Linux lab in ba a please also put",
    "start": "26279",
    "end": "32078"
  },
  {
    "text": "your phone on vibrate it makes it easier for the rest of us to ignore it ringing while you wait for your voicemail to pick it up without further Ado your",
    "start": "32079",
    "end": "38200"
  },
  {
    "text": "speakers thank you okay good morning so let's talk",
    "start": "38200",
    "end": "45760"
  },
  {
    "start": "45000",
    "end": "83000"
  },
  {
    "text": "about sjx um you probably know that sjx is the new security technology and Intel",
    "start": "45760",
    "end": "51239"
  },
  {
    "text": "chips and that's the first public review of sgx based on actual Hardware so",
    "start": "51239",
    "end": "57559"
  },
  {
    "text": "actual Intel chips that Implement GX and on the real SDK uh so just spoiler we're",
    "start": "57559",
    "end": "64680"
  },
  {
    "text": "not ring any big a or vulnerability so if if you don't like it you can leave the room but I hope it will be",
    "start": "64680",
    "end": "70640"
  },
  {
    "text": "interesting nevertheless uh what we'll show you is uh some undocumented parts of sgx so Stu that is not publicly",
    "start": "70640",
    "end": "78400"
  },
  {
    "text": "disclosed by Intel and we're releasing some tools and some applications all right so we would like to thank some",
    "start": "78400",
    "end": "84960"
  },
  {
    "text": "people who helped us gave us some useful feedback so the folks are Intel Sheron Simon Johnson Dan merman uh also Victor",
    "start": "84960",
    "end": "93200"
  },
  {
    "text": "from MIT who did this great paper about about sjx uh Sam n who helped us with",
    "start": "93200",
    "end": "99640"
  },
  {
    "text": "the crypto and Y and arog there some uh useful tips as well okay so what is sgx concretely so",
    "start": "99640",
    "end": "108799"
  },
  {
    "start": "104000",
    "end": "209000"
  },
  {
    "text": "it's yet another new extension of the x86 implementation of Intel and it's m",
    "start": "108799",
    "end": "115240"
  },
  {
    "text": "need two instructions so ank LS and enklu so ank LS can only be called in",
    "start": "115240",
    "end": "120680"
  },
  {
    "text": "kernel mode and enclude can be called in user mode uh what is good for so they",
    "start": "120680",
    "end": "126280"
  },
  {
    "text": "will allow you to create secure enclaves secure enclaves of code and data so what does that mean a secure Enclave is a",
    "start": "126280",
    "end": "134239"
  },
  {
    "text": "piece of bites uh device can be code can be data and you you can use this to run",
    "start": "134239",
    "end": "140319"
  },
  {
    "text": "uh a trusted program so trusted what does it mean that you can execute some piece of software on someone else's",
    "start": "140319",
    "end": "147160"
  },
  {
    "text": "computer with the guarantee that the execution uh the Integrity of the execution is predicted so the code",
    "start": "147160",
    "end": "153400"
  },
  {
    "text": "executed is what the one that you expect to be executed and it also guarantees",
    "start": "153400",
    "end": "159080"
  },
  {
    "text": "the confidentiality of the secret data that you you attach to The Enclave uh",
    "start": "159080",
    "end": "164959"
  },
  {
    "text": "the confidentiality means that only the CPU will see the clear text not the RS not the hypervisor we go back to this",
    "start": "164959",
    "end": "171920"
  },
  {
    "text": "okay so using the Str instructions uh you have actually a bunch of instruction leaves or sub instructions for example",
    "start": "171920",
    "end": "178159"
  },
  {
    "text": "EEG key can be used to create to derive cryptographic Keys within the CPU so without any other component uh signal",
    "start": "178159",
    "end": "185640"
  },
  {
    "text": "Keys you have e report for example that can be used to create um the kind of",
    "start": "185640",
    "end": "191120"
  },
  {
    "text": "identity of your enclave okay so if you want to play with this uh you can buy uh",
    "start": "191120",
    "end": "197519"
  },
  {
    "text": "one of the Intel CPUs of the using the Skylake marro architecture they came out first in autumn 2015 but you have to",
    "start": "197519",
    "end": "205360"
  },
  {
    "text": "make sure that you also get the the laptop and the BIOS that supports this",
    "start": "205360",
    "end": "210400"
  },
  {
    "text": "okay so maybe when people ask me to explain maybe the easiest way is to see it as the inverse of sendbox so typical",
    "start": "210400",
    "end": "217040"
  },
  {
    "text": "sendbox it isolates um an application from the system whatever that means so",
    "start": "217040",
    "end": "223319"
  },
  {
    "text": "you're trying to protect your application uh from the system and sorry to Pro I messed it up you're trying to",
    "start": "223319",
    "end": "230560"
  },
  {
    "text": "protect the system from your application or to protect other applications from your own application so you're trying to",
    "start": "230560",
    "end": "235840"
  },
  {
    "text": "isolate your system uh SX is the other way you protect your application from",
    "start": "235840",
    "end": "241799"
  },
  {
    "text": "the system from the external World okay so when I said the system it can mean",
    "start": "241799",
    "end": "246840"
  },
  {
    "text": "the operating system uh it can be an hypervisor can also be a lower level",
    "start": "246840",
    "end": "253000"
  },
  {
    "text": "bios firmware drivers even at lower level what is sometimes called ring",
    "start": "253000",
    "end": "258160"
  },
  {
    "text": "minus 2 dsmm system management mode uh I don't give all the details but you can",
    "start": "258160",
    "end": "263680"
  },
  {
    "text": "see it as a piece of software that sits between the BIOS and DRS and it also",
    "start": "263680",
    "end": "269840"
  },
  {
    "text": "protects from a compromise of the Intel me management engine which sometimes",
    "start": "269840",
    "end": "274960"
  },
  {
    "text": "called ring minus 3 and you can you can see it to simplify as a kind of CPU in the CPU",
    "start": "274960",
    "end": "281160"
  },
  {
    "text": "fuel so by extension it will protect your application so remember the Integrity of your program and the",
    "start": "281160",
    "end": "288039"
  },
  {
    "text": "confidentiality of the secrets that are attached to this program it will protect everything from any attacker any remote",
    "start": "288039",
    "end": "294639"
  },
  {
    "text": "attacker that would compromise any of those pieces of software Hardware so",
    "start": "294639",
    "end": "299680"
  },
  {
    "text": "that's pretty powerful one of this application is cloud computing um cloud services just",
    "start": "299680",
    "end": "307360"
  },
  {
    "start": "301000",
    "end": "335000"
  },
  {
    "text": "one super basic example imagine that you're using a word processor that's",
    "start": "307360",
    "end": "312680"
  },
  {
    "text": "running not on your machine but on one machine in the cloud you're editing a document so everything happens on a",
    "start": "312680",
    "end": "319720"
  },
  {
    "text": "remote CPU but the guy on the admin of the other machine the operating system",
    "start": "319720",
    "end": "324880"
  },
  {
    "text": "of the other machine he has no way to see what what you're doing the clear",
    "start": "324880",
    "end": "329919"
  },
  {
    "text": "text of your uh of your document okay so",
    "start": "329919",
    "end": "335720"
  },
  {
    "start": "335000",
    "end": "368000"
  },
  {
    "text": "another application is DRM so I've sometimes heard people saying sgx is bad",
    "start": "335720",
    "end": "341560"
  },
  {
    "text": "because it's a DRM no it's not a DRM I want to make it clear it allows you it will help you to create a DRM so the",
    "start": "341560",
    "end": "349080"
  },
  {
    "text": "whole point is that instead of trying to hide the content decryption key in the software isation and other techniques",
    "start": "349080",
    "end": "356600"
  },
  {
    "text": "the key will be uh just inside the CPU if you will so there will be nothing to",
    "start": "356600",
    "end": "362199"
  },
  {
    "text": "reverse nothing to the office gate because it will be totally different game it will be inside the CPU",
    "start": "362199",
    "end": "368479"
  },
  {
    "start": "368000",
    "end": "448000"
  },
  {
    "text": "okay um another C application is to make programs that are literally impossible",
    "start": "368479",
    "end": "374199"
  },
  {
    "text": "to reverse engineer uh so instead of saying some code that is uh packed off fiscated uh",
    "start": "374199",
    "end": "381400"
  },
  {
    "text": "partially encrypted with with a key hidden somewhere in the software you will just send an encrypted blob that",
    "start": "381400",
    "end": "388039"
  },
  {
    "text": "will be decrypted on the CPU and the CPU will a classic kind of your tril machine and run your Cod one way to realize it",
    "start": "388039",
    "end": "394479"
  },
  {
    "text": "is to have an enclave generate a public key pair to private key and public PE public key it will keep the private key",
    "start": "394479",
    "end": "401039"
  },
  {
    "text": "for itself and it will send the public key out with some evidence that the public key that you receive actually",
    "start": "401039",
    "end": "407479"
  },
  {
    "text": "comes from this sgx enable CPU so what you will do you will use this public key encrypt your program and send it to the",
    "start": "407479",
    "end": "415160"
  },
  {
    "text": "CPU which will decrypt it and execute your C so there's nothing to reverse engineer",
    "start": "415160",
    "end": "422520"
  },
  {
    "text": "uh but now the first reaction everybody is oh my God the bad guys they will make super malware that is impossible to",
    "start": "422520",
    "end": "428960"
  },
  {
    "text": "reverse engineer uh there's just one small caveat here is that in an enclave",
    "start": "428960",
    "end": "434280"
  },
  {
    "text": "you cannot do culls you can do IO you have a limited set of instructions and the program it can only",
    "start": "434280",
    "end": "440919"
  },
  {
    "text": "run in Newland not in kernel mode so you you need some privilege escalation if you want to to get",
    "start": "440919",
    "end": "447759"
  },
  {
    "text": "through so that's not new so the implementation of Intel is new that's",
    "start": "447759",
    "end": "452879"
  },
  {
    "text": "great but the idea of trust Computing dates back to at least the 80s with the orange book uh strust Computing to make",
    "start": "452879",
    "end": "459720"
  },
  {
    "text": "it super simple again it's the idea of using someone else's computer with Integrity confidential liity",
    "start": "459720",
    "end": "465680"
  },
  {
    "text": "guarantees and to implement this you need to implement several concept to Define several Notions uh at least",
    "start": "465680",
    "end": "472599"
  },
  {
    "text": "trusted Computing based TCB Hardware secrets you need remote attestation seal",
    "start": "472599",
    "end": "477800"
  },
  {
    "text": "storage and memory destion so I'll briefly go through the first three of those the trust and confuting base the",
    "start": "477800",
    "end": "484240"
  },
  {
    "start": "482000",
    "end": "615000"
  },
  {
    "text": "TCB is the components that you have to trust uh to benefit of the security of",
    "start": "484240",
    "end": "489879"
  },
  {
    "text": "the of the whole system so in Intel sgx the TCB consists",
    "start": "489879",
    "end": "495039"
  },
  {
    "text": "first of the CPU itself the physical CPU so it's physical package so what's inside you have integrated circuits you",
    "start": "495039",
    "end": "501319"
  },
  {
    "text": "have microc cods you have registers cash and a bunch of other stuff and the TCB",
    "start": "501319",
    "end": "507280"
  },
  {
    "text": "also includes some software components uh so Intel minimized the number of uh",
    "start": "507280",
    "end": "513039"
  },
  {
    "text": "the size of software in the TCB but in particular you need one piece of software that is called the qu enclave",
    "start": "513039",
    "end": "519880"
  },
  {
    "text": "and you can see it as a kind of um the software that will create the equivalent",
    "start": "519880",
    "end": "525839"
  },
  {
    "text": "of a public key certificate for GX this is called a quote and I will go back to this",
    "start": "525839",
    "end": "531200"
  },
  {
    "text": "later so many people are like oh but I don't want to trust Intel you know they're blah uh but man you got to trust",
    "start": "531200",
    "end": "539040"
  },
  {
    "text": "in Intel anyway it's running your Cod if if you don't want to trust Intel then you can use something else um there's",
    "start": "539040",
    "end": "547040"
  },
  {
    "text": "just one small caveat so you have the TCB stuff you have to trust but when you're creating The Enclave when you're",
    "start": "547040",
    "end": "552880"
  },
  {
    "text": "building The Enclave you need to trust the whole system not just the CPU but your compiler your operating system and",
    "start": "552880",
    "end": "559200"
  },
  {
    "text": "you should read this paper if you don't know it already um now how they Secrets uh it's very",
    "start": "559200",
    "end": "567120"
  },
  {
    "text": "simple slides so you got CPU and in CP you have when you buy it you get two harded secrets of 12 128 bits so can say",
    "start": "567120",
    "end": "577399"
  },
  {
    "text": "that um like a root of trust so the first one is called the provisioning key the second one is called the sil key",
    "start": "577399",
    "end": "583760"
  },
  {
    "text": "don't have to remember remember this but the important thing is that the second one is not known to Intel so Intel",
    "start": "583760",
    "end": "589959"
  },
  {
    "text": "doesn't know any of those keys and any of the CPU so again you got to trust int a maybe they're lying to us and maybe",
    "start": "589959",
    "end": "596440"
  },
  {
    "text": "they're but okay you have to trust someone and the important thing to know",
    "start": "596440",
    "end": "602120"
  },
  {
    "text": "is that all the cryptographic keys that are derived in a CPU they depend on this",
    "start": "602120",
    "end": "607519"
  },
  {
    "text": "seal key so this seal key is us as an argument and if you don't have it then you cannot determine the other Keys okay",
    "start": "607519",
    "end": "615959"
  },
  {
    "start": "615000",
    "end": "736000"
  },
  {
    "text": "so inic security limitation of sgx uh so it's not a magic box if you have",
    "start": "615959",
    "end": "621120"
  },
  {
    "text": "insecure software it will not make your inure software uh secure so specifically",
    "start": "621120",
    "end": "627560"
  },
  {
    "text": "if you are vulnerable to cash you will still be vulnerable to cash timeing attacks when running using",
    "start": "627560",
    "end": "634079"
  },
  {
    "text": "sgx um so maybe the attacks may be a little bit harder maybe a little bit easier you don't know but it won't fix",
    "start": "634079",
    "end": "641680"
  },
  {
    "text": "your problem so same if you have memory corruption or RIS conditions or the usual stuff um you have no guarantee against",
    "start": "641680",
    "end": "649680"
  },
  {
    "text": "physical attacks so if someone gets your CPU decaps it run some uh I Lazer",
    "start": "649680",
    "end": "655680"
  },
  {
    "text": "attacks then Intel doesn't give you any guarantee against this M uh and then",
    "start": "655680",
    "end": "661000"
  },
  {
    "text": "finally micro code patching so sgx depends largely on micro code so if you",
    "start": "661000",
    "end": "667760"
  },
  {
    "text": "are somehow able to PGE the micro code which is very hard because it's signed by Intel then you may modify the",
    "start": "667760",
    "end": "674160"
  },
  {
    "text": "behavior of sgx and even if you're super smart and you manage to do it you still need to gain persistence which is also",
    "start": "674160",
    "end": "680360"
  },
  {
    "text": "very hard okay now you want to find bugs INX you want to break in technology you",
    "start": "680360",
    "end": "685440"
  },
  {
    "text": "want to give to at blackout uh so nice nice thing for you is that the attack surface is huge it's super complex uh",
    "start": "685440",
    "end": "691800"
  },
  {
    "text": "there'll probably be many bugs uh but the bad news for us is that it's mostly",
    "start": "691800",
    "end": "697839"
  },
  {
    "text": "a black box you don't get to read the actual micro code even if you get to read the micr code you have to understand what means uh many of the",
    "start": "697839",
    "end": "705320"
  },
  {
    "text": "important instructions so they I they in micro Cod and they're not fully documented so the best way to try to",
    "start": "705320",
    "end": "711720"
  },
  {
    "text": "find run abilities is uh just blackbox testing or fuzzing if you can do this uh",
    "start": "711720",
    "end": "718440"
  },
  {
    "text": "good news for the secur researcher is that a large part is software that you can look at the platform software the",
    "start": "718440",
    "end": "725519"
  },
  {
    "text": "drivers the in Enclave that I used to make sgx run and D SDK so the libraries",
    "start": "725519",
    "end": "731760"
  },
  {
    "text": "that you can use and statically link to your own software to use an sgx okay so",
    "start": "731760",
    "end": "737160"
  },
  {
    "start": "736000",
    "end": "815000"
  },
  {
    "text": "for example uh Intel disclos some um some bugs not not the whole details but some CPU bugs uh it's written no fix so",
    "start": "737160",
    "end": "745480"
  },
  {
    "text": "I guess it means that it will not be fixed but I don't really know the implications of this uh you may also",
    "start": "745480",
    "end": "752079"
  },
  {
    "text": "have bugs in dependencies so at some point HDX software uses some small part",
    "start": "752079",
    "end": "757600"
  },
  {
    "text": "of open SSL and some part that happens to be uh vulnerable to some high severity attack as far as we could tell",
    "start": "757600",
    "end": "764920"
  },
  {
    "text": "it's not exploitable but that gives you an idea of the kind of stuff that can go wrong so can you recover from a",
    "start": "764920",
    "end": "772519"
  },
  {
    "text": "compromise can you patch it yes you can you can upgrade the TCB which means you can have a new version of the critical",
    "start": "772519",
    "end": "779440"
  },
  {
    "text": "Enclave you can have a new version of the micro code and also the nice thing is that when you perform the remote",
    "start": "779440",
    "end": "786360"
  },
  {
    "text": "attestation later on you will check the version of the TCB so you can say oh I will only run on the latest version of",
    "start": "786360",
    "end": "792320"
  },
  {
    "text": "the TCB not on the insecure one but the hardware cannot be patched",
    "start": "792320",
    "end": "798639"
  },
  {
    "text": "uh the memory encryption engine which is in Hardware because it needs to be super fast you cannot patch it so I hope that",
    "start": "798639",
    "end": "804399"
  },
  {
    "text": "they deed it correctly so now I'll give the mic to lis",
    "start": "804399",
    "end": "810760"
  },
  {
    "text": "thank you so we wanted to try this our setup is composed by a couple",
    "start": "811680",
    "end": "818079"
  },
  {
    "start": "815000",
    "end": "849000"
  },
  {
    "text": "of sdx enabled uh laptops six generation",
    "start": "818079",
    "end": "823680"
  },
  {
    "text": "you also need to you also need to get support from the BIOS it's not only the processor but you need the you need to",
    "start": "823680",
    "end": "831320"
  },
  {
    "text": "enable the technology in the Bios if you are working in Windows uh you need",
    "start": "831320",
    "end": "837399"
  },
  {
    "text": "Visual Studio professional to 2012 that is not free but you can get a free trial for one month and you will also need to",
    "start": "837399",
    "end": "844800"
  },
  {
    "text": "download the platform software and the SDK I will explain more about this later now you can also get the Linux SDK",
    "start": "844800",
    "end": "853320"
  },
  {
    "start": "849000",
    "end": "873000"
  },
  {
    "text": "it's ready it was release one month ago you can go to GitHub you can get the SDK",
    "start": "853320",
    "end": "860040"
  },
  {
    "text": "the platform software the drivers you have to compile them and you can get them ready uh at the moment only 21404",
    "start": "860040",
    "end": "868519"
  },
  {
    "text": "is support it maybe you can make it run somewhere else but you might want to know",
    "start": "868519",
    "end": "873920"
  },
  {
    "start": "873000",
    "end": "908000"
  },
  {
    "text": "this so now this is a warning uh sdx is about trust you you don't only need to",
    "start": "873920",
    "end": "881320"
  },
  {
    "text": "trust the technology but you also need to trust the supply chain when you want",
    "start": "881320",
    "end": "886440"
  },
  {
    "text": "when you go to download the SDK the website uh is running the connection is",
    "start": "886440",
    "end": "892440"
  },
  {
    "text": "running through https but when you click on the download the connection is on",
    "start": "892440",
    "end": "897519"
  },
  {
    "text": "Plain text so somebody in the middle might modify the tools you are",
    "start": "897519",
    "end": "903759"
  },
  {
    "text": "using to build secure enclaves and you might not know also when you get the",
    "start": "903759",
    "end": "909920"
  },
  {
    "text": "installer the certificates were expired now it's fixed but there are some",
    "start": "909920",
    "end": "915560"
  },
  {
    "text": "concerns in the whole supply chain in the whole environment that you might want to evaluate so what do you get you get a",
    "start": "915560",
    "end": "924040"
  },
  {
    "start": "920000",
    "end": "994000"
  },
  {
    "text": "couple of things the platform software is required to run enclaves",
    "start": "924040",
    "end": "930000"
  },
  {
    "text": "the technology is super complex so you need the processor to cooperate with",
    "start": "930000",
    "end": "935600"
  },
  {
    "text": "with a few privilege enclaves that will make everything happen uh some of these are the launch",
    "start": "935600",
    "end": "943199"
  },
  {
    "text": "Enclave that will enable your enclave to run uh the quoting Enclave that will",
    "start": "943199",
    "end": "950000"
  },
  {
    "text": "enable the remote attestation and a couple more that cooperates also with the provisioning",
    "start": "950000",
    "end": "956360"
  },
  {
    "text": "and something else that I still don't know know so you also get a system service some drivers some",
    "start": "956360",
    "end": "964399"
  },
  {
    "text": "dlls and also the Intel privilege enclaves they have some superpowers they",
    "start": "964399",
    "end": "969759"
  },
  {
    "text": "can access some of the hardware keys that nobody else can they assign by",
    "start": "969759",
    "end": "974880"
  },
  {
    "text": "Intel they have this privilege so if if you break into them you might compromise",
    "start": "974880",
    "end": "981880"
  },
  {
    "text": "the security of the whole technology uh on the Linux binaries you",
    "start": "981880",
    "end": "987800"
  },
  {
    "text": "also get the symbols so it's easier to understand what is happening you might not be allowed to reverse it",
    "start": "987800",
    "end": "994720"
  },
  {
    "start": "994000",
    "end": "1015000"
  },
  {
    "text": "though also the SDK it's around",
    "start": "994720",
    "end": "1000639"
  },
  {
    "text": "170,000 uh lines of code BSD license you also get a new standard Library so you",
    "start": "1000639",
    "end": "1009000"
  },
  {
    "text": "are not using the one from the system that is based on open BSD and netbsd and some more",
    "start": "1009000",
    "end": "1015920"
  },
  {
    "start": "1015000",
    "end": "1091000"
  },
  {
    "text": "dependencies what do you get with the SDK the SDK is mostly required to build sdx",
    "start": "1015920",
    "end": "1024360"
  },
  {
    "text": "enclaves and on one side you get libraries you",
    "start": "1024360",
    "end": "1029600"
  },
  {
    "text": "get a new standard Library you get some crypto libraries and then you also get some sdx libraries",
    "start": "1029600",
    "end": "1037079"
  },
  {
    "text": "that provide the whole functionality and they can in thebug and release mode with",
    "start": "1037079",
    "end": "1042520"
  },
  {
    "text": "and without symbols you also get a couple of tools one is the The Edge",
    "start": "1042520",
    "end": "1047600"
  },
  {
    "text": "writer that will generate glue so your application and your enclave can easily",
    "start": "1047600",
    "end": "1052760"
  },
  {
    "text": "communicate and it's C code and you also get a tool to sign the",
    "start": "1052760",
    "end": "1058080"
  },
  {
    "text": "Enclave you need to have a developer key okay this key you can generate it and",
    "start": "1058080",
    "end": "1064080"
  },
  {
    "text": "you can use it to play with the technology and you will use this keit to sign your enclaves and this signature",
    "start": "1064080",
    "end": "1070240"
  },
  {
    "text": "will be checked uh every time you want to run The Enclave if the signature",
    "start": "1070240",
    "end": "1075320"
  },
  {
    "text": "doesn't match uh The Enclave will not be allowed to run you also get some some example",
    "start": "1075320",
    "end": "1081760"
  },
  {
    "text": "code uh it's not fully complete and it's not fully reliable so if something",
    "start": "1081760",
    "end": "1087520"
  },
  {
    "text": "doesn't work maybe it's not your fault you also get a",
    "start": "1087520",
    "end": "1093840"
  },
  {
    "start": "1091000",
    "end": "1129000"
  },
  {
    "text": "debugger the debugger can be used in Visual Studio in debug mode enclaves and you",
    "start": "1093840",
    "end": "1100799"
  },
  {
    "text": "can also use use GTV release mode enclaves cannot be debugged you cannot hook a debug you",
    "start": "1100799",
    "end": "1108720"
  },
  {
    "text": "cannot Place break points inside and the every time you try to call The Enclave",
    "start": "1108720",
    "end": "1114960"
  },
  {
    "text": "it will it will be seen as a big instruction you cannot you cannot tell what is happening you cannot see the",
    "start": "1114960",
    "end": "1120600"
  },
  {
    "text": "memory inside you cannot Trace what is happening inside and also the sdx",
    "start": "1120600",
    "end": "1126400"
  },
  {
    "text": "instruction can be decoded by Aida and rad that is good now a bit more about",
    "start": "1126400",
    "end": "1132200"
  },
  {
    "start": "1129000",
    "end": "1214000"
  },
  {
    "text": "your developer key and the licensing program you cannot use the real thing",
    "start": "1132200",
    "end": "1137320"
  },
  {
    "text": "easily you can you can code and you can try and you can draun debug mode",
    "start": "1137320",
    "end": "1144039"
  },
  {
    "text": "enclaves but they are not secure why you can you can place a debugger you can",
    "start": "1144039",
    "end": "1150400"
  },
  {
    "text": "hook a debugger you can see the memory and you can modify what is happening release mode enclaves are",
    "start": "1150400",
    "end": "1157039"
  },
  {
    "text": "secure you cannot modify you cannot modify what is happening inside and you cannot read the memory but you need an",
    "start": "1157039",
    "end": "1163480"
  },
  {
    "text": "Intel approv key to do this there is a Intel developer program that you can",
    "start": "1163480",
    "end": "1169200"
  },
  {
    "text": "mail them and you can start the process and they can give you a key but there",
    "start": "1169200",
    "end": "1175760"
  },
  {
    "text": "you need to sign an NDA they need to approve you as a developer so there are some",
    "start": "1175760",
    "end": "1183720"
  },
  {
    "text": "limitations there were some concerns about this and it seems there is a major",
    "start": "1183720",
    "end": "1189520"
  },
  {
    "text": "change coming so the launch and clave might",
    "start": "1189520",
    "end": "1195480"
  },
  {
    "text": "be might be modified in in the way that you could be able to run enclaves",
    "start": "1195480",
    "end": "1203120"
  },
  {
    "text": "without the Intel approval this is still not in any processor in the market but",
    "start": "1203120",
    "end": "1211000"
  },
  {
    "text": "it's on the documents and should be coming when you are developing an",
    "start": "1211000",
    "end": "1216600"
  },
  {
    "start": "1214000",
    "end": "1280000"
  },
  {
    "text": "enclave application you need to partition your application in two parts the untrusted domain it is the normal",
    "start": "1216600",
    "end": "1223640"
  },
  {
    "text": "application that we always C it interacts with any EX parties the input",
    "start": "1223640",
    "end": "1229880"
  },
  {
    "text": "output the system and it will also start your enclave The Trusted domain it's The",
    "start": "1229880",
    "end": "1235880"
  },
  {
    "text": "Enclave it will be the run that execute the protected code and can be seal",
    "start": "1235880",
    "end": "1243000"
  },
  {
    "text": "Secrets the important thing is that the memory of The Trusted part is protected",
    "start": "1243000",
    "end": "1248720"
  },
  {
    "text": "and also keeps Integrity you cannot modify what the code is doing and you",
    "start": "1248720",
    "end": "1254440"
  },
  {
    "text": "can invoke each other the untrusted domain can call the the trusted and the other way around there are a couple of",
    "start": "1254440",
    "end": "1261679"
  },
  {
    "text": "challenges that you need to determine how to split the trusted and untrusted",
    "start": "1261679",
    "end": "1268200"
  },
  {
    "text": "domains in a way that you minimize the attack surface and you also need to do extra",
    "start": "1268200",
    "end": "1274679"
  },
  {
    "text": "validations on the untrusted inputs because now not even the operating system can be",
    "start": "1274679",
    "end": "1280840"
  },
  {
    "start": "1280000",
    "end": "1319000"
  },
  {
    "text": "trusted there are some constraints as I said uh you cannot do system calls and a",
    "start": "1280840",
    "end": "1287760"
  },
  {
    "text": "few instructions are not allowed also The Enclave code need to be statically",
    "start": "1287760",
    "end": "1294559"
  },
  {
    "text": "linked so it all the code is measured and the Integrity is kept you cannot",
    "start": "1294559",
    "end": "1301480"
  },
  {
    "text": "dynamically dynamically link against libraries and the code only runs in user",
    "start": "1301480",
    "end": "1308159"
  },
  {
    "text": "mode the memory limitations Al are also set during The Enclave signing this is",
    "start": "1308159",
    "end": "1314480"
  },
  {
    "text": "changing it's changing on sdx2 but you need to know",
    "start": "1314480",
    "end": "1319880"
  },
  {
    "start": "1319000",
    "end": "1397000"
  },
  {
    "text": "it now a couple of important things about sdx you you have something called SE",
    "start": "1319880",
    "end": "1327440"
  },
  {
    "text": "sealing sealing is a way to encrypt Secrets inside Enclave to store them out",
    "start": "1327440",
    "end": "1334520"
  },
  {
    "text": "so when you are working with secrets you sometimes need persistence",
    "start": "1334520",
    "end": "1339960"
  },
  {
    "text": "you need to distribute them in a way or you want to keep them in the hard drive but you want to keep them you want",
    "start": "1339960",
    "end": "1348159"
  },
  {
    "text": "to keep them encrypted so ceiling it's based on the",
    "start": "1348159",
    "end": "1354000"
  },
  {
    "text": "key derivation from the CPU the key the key use for sealing is",
    "start": "1354000",
    "end": "1359880"
  },
  {
    "text": "secret and it's based on the on the H of",
    "start": "1359880",
    "end": "1366080"
  },
  {
    "text": "your enclave and some some other things",
    "start": "1366080",
    "end": "1371919"
  },
  {
    "text": "so sorry you can base the key on on The",
    "start": "1372200",
    "end": "1377600"
  },
  {
    "text": "Enclave but there are two policies you can also base the key on the signer",
    "start": "1377600",
    "end": "1382919"
  },
  {
    "text": "identity in the way that any other Enclave signed by you can also read the",
    "start": "1382919",
    "end": "1389080"
  },
  {
    "text": "the secret material the cas are also different for thebag and production and you can Implement repl replay protection",
    "start": "1389080",
    "end": "1396240"
  },
  {
    "text": "and time based policies the other important component is remote attestation remote attestation",
    "start": "1396240",
    "end": "1402960"
  },
  {
    "start": "1397000",
    "end": "1472000"
  },
  {
    "text": "is the process of ensuring and verifying The Enclave Integrity from remote uh",
    "start": "1402960",
    "end": "1409840"
  },
  {
    "text": "client and also establish a secure Channel between the client and Enclave to provision secrets and",
    "start": "1409840",
    "end": "1416760"
  },
  {
    "text": "communicate in practice uh this is based on another of the hardware keys and you start doing a",
    "start": "1416760",
    "end": "1425080"
  },
  {
    "text": "handshake in which you get a secret key agreement and you get what is called a",
    "start": "1425080",
    "end": "1431279"
  },
  {
    "text": "quote from The Enclave that is it it comes with information about who signed",
    "start": "1431279",
    "end": "1437559"
  },
  {
    "text": "Enclave clave what is the H of The Enclave is it running in the back mode or not and also the security security",
    "start": "1437559",
    "end": "1446760"
  },
  {
    "text": "version of the platform this quote you have to verify",
    "start": "1446760",
    "end": "1451919"
  },
  {
    "text": "it you need to trust it by yourself you need to you need to check what who are",
    "start": "1451919",
    "end": "1457840"
  },
  {
    "text": "you communicating with and you also need to verify the quote against an Intel attestation service that will tell you",
    "start": "1457840",
    "end": "1464840"
  },
  {
    "text": "if that quote is valid or not if it's valid you can provision secrets and you",
    "start": "1464840",
    "end": "1470520"
  },
  {
    "text": "should be safe and now please thank you okay so",
    "start": "1470520",
    "end": "1475679"
  },
  {
    "start": "1472000",
    "end": "1538000"
  },
  {
    "text": "we're about halfway for the talk um it's small disclaimer uh hjx is really",
    "start": "1475679",
    "end": "1481080"
  },
  {
    "text": "complex so we went very quickly over DX specific at the beginning so if you're a bit confused if you never heard about",
    "start": "1481080",
    "end": "1487200"
  },
  {
    "text": "sjx it's totally normal so we know it's a lot of information but we'll releas the the slide and white paper so that",
    "start": "1487200",
    "end": "1493240"
  },
  {
    "text": "you can get all the details and sit down to understand everything okay so next part crypto uh so crypto is really super",
    "start": "1493240",
    "end": "1500399"
  },
  {
    "text": "super important in um in sgx so you need crypto to en Crypt authenticate stuff",
    "start": "1500399",
    "end": "1506240"
  },
  {
    "text": "and it's maybe one of the most complex uh use of cryptography I ever used and",
    "start": "1506240",
    "end": "1511360"
  },
  {
    "text": "I've seen pretty scary stuff uh what you just see here is uh schematics of what's",
    "start": "1511360",
    "end": "1517080"
  },
  {
    "text": "going on on the remote attestation process that L just described uh you don't need to read what's written just",
    "start": "1517080",
    "end": "1523080"
  },
  {
    "text": "to say that you have like six entities sending messages to each other and it's messages include cryptographic",
    "start": "1523080",
    "end": "1529360"
  },
  {
    "text": "signatures defilement stuff symmetric key cryptos and you can imagine that if",
    "start": "1529360",
    "end": "1534799"
  },
  {
    "text": "just one single piece of those is insecure and maybe everything can break down um so just very small uh review of",
    "start": "1534799",
    "end": "1544000"
  },
  {
    "start": "1538000",
    "end": "1655000"
  },
  {
    "text": "the crypto what's what kind of algorithm and schemes are in",
    "start": "1544000",
    "end": "1549080"
  },
  {
    "text": "sgx um very quickly you have RSA with a model of 3,000 bits the PK pkcs stand",
    "start": "1549080",
    "end": "1556159"
  },
  {
    "text": "out 1.5 which is not the latest one uh it's insecure in certain context but it's apparently not insecure in the",
    "start": "1556159",
    "end": "1562600"
  },
  {
    "text": "context of sgx it's using the Sha to sh to 5c function which is also a federal",
    "start": "1562600",
    "end": "1569200"
  },
  {
    "text": "standard it uses elliptic curve cryptography specifically ecds",
    "start": "1569200",
    "end": "1574360"
  },
  {
    "text": "signatures using the p256 curves uh standardized by Nest it's using eptic",
    "start": "1574360",
    "end": "1579960"
  },
  {
    "text": "curve Helman over same curve and most of the symetric cryptography uses ases so",
    "start": "1579960",
    "end": "1585799"
  },
  {
    "text": "as counter for nor encryption as GCM for authenticated encryption and as in CMAC",
    "start": "1585799",
    "end": "1592360"
  },
  {
    "text": "mode if you just want to tag and don't want to to encrypt okay so this all gets",
    "start": "1592360",
    "end": "1597399"
  },
  {
    "text": "you one 12 bit security except for RSA which get you approximately 1002 bits of",
    "start": "1597399",
    "end": "1604880"
  },
  {
    "text": "security so that was for the the standardized crypto there's also some customiz custom crypto in sgx uh so you",
    "start": "1604880",
    "end": "1612240"
  },
  {
    "text": "may have heard on the internet that a custom crypto is bad do not R your own crypto blah blah blah but but Intel they",
    "start": "1612240",
    "end": "1618600"
  },
  {
    "text": "have pretty good cryptographers they know what they are doing and they really had at some point to design a custom Mac",
    "start": "1618600",
    "end": "1625919"
  },
  {
    "text": "to be super fast to encrypt the ram CU you cannot afford too much latency and",
    "start": "1625919",
    "end": "1631240"
  },
  {
    "text": "it has to be um like I said in hardware and there's new design think by shy garon and other people that is really",
    "start": "1631240",
    "end": "1638559"
  },
  {
    "text": "nice they have uh proof of security so I do not adapt of the security of this algorithm it also uses as counter to",
    "start": "1638559",
    "end": "1645480"
  },
  {
    "text": "encrypt um data in memory a slightly modified version but we looked at it and there's no reason to believe that it",
    "start": "1645480",
    "end": "1651480"
  },
  {
    "text": "will be less safe than the standardized version okay let me",
    "start": "1651480",
    "end": "1658679"
  },
  {
    "start": "1655000",
    "end": "1712000"
  },
  {
    "text": "just so in the SDK you've got couple libraries uh lipc and you also have a",
    "start": "1660039",
    "end": "1665559"
  },
  {
    "text": "crypto library and the windows SDK it's called T crypto Li and T crypto op. lib",
    "start": "1665559",
    "end": "1672399"
  },
  {
    "text": "so op stands for optimize not optimize in speed but Main in space so the C",
    "start": "1672399",
    "end": "1677799"
  },
  {
    "text": "tends to be smaller so Intel warns you that uh well it's pretty boring say the",
    "start": "1677799",
    "end": "1683399"
  },
  {
    "text": "library might be somewhat limited and indeed you only have a GCM encounter mode CAC shout 2 56 and it de curve DSA",
    "start": "1683399",
    "end": "1691960"
  },
  {
    "text": "and Helman so these are secure standardized algorithm but you may need more than that uh you got to be careful",
    "start": "1691960",
    "end": "1698600"
  },
  {
    "text": "though because it the algorithms themselves are secure but they support weak parameters so if you tell the",
    "start": "1698600",
    "end": "1705399"
  },
  {
    "text": "counter API to use a one bit counter so which will 0 one 01 uh then it will",
    "start": "1705399",
    "end": "1710760"
  },
  {
    "text": "accept it it might remind you some other Library uh so where does this crypto",
    "start": "1710760",
    "end": "1716799"
  },
  {
    "start": "1712000",
    "end": "1742000"
  },
  {
    "text": "comes from so they didn't they didn't create it from scratch just for sgx uh they recycled the IPP which is Intel's",
    "start": "1716799",
    "end": "1723000"
  },
  {
    "text": "propriatary Library uh as far as who can understand it's the version 8.2 labeled gold from",
    "start": "1723000",
    "end": "1731360"
  },
  {
    "text": "2014 uh you only have the binaries and to use it I think you got to get license from um from Intel",
    "start": "1731360",
    "end": "1737919"
  },
  {
    "text": "so maybe HX is a way to use it without paying the license fee on",
    "start": "1737919",
    "end": "1743519"
  },
  {
    "start": "1742000",
    "end": "1803000"
  },
  {
    "text": "Linux I mean that's just it was a bit depressing because we started looking at this I think February or March and oh we",
    "start": "1743519",
    "end": "1750840"
  },
  {
    "text": "only have the binaries and then on 25th of June here comes the source code with the Linux SDK",
    "start": "1750840",
    "end": "1756760"
  },
  {
    "text": "so uh so you have a PR similar uh library with the same that's",
    "start": "1756760",
    "end": "1762360"
  },
  {
    "text": "API uh it's in the sdkp crypto directory",
    "start": "1762360",
    "end": "1768279"
  },
  {
    "text": "for the sjx wrappers and external crypto for the IP equivalent you've also got a",
    "start": "1768279",
    "end": "1773679"
  },
  {
    "text": "bunch of public keys that in is using but they are public and it's okay if",
    "start": "1773679",
    "end": "1779080"
  },
  {
    "text": "they are public CU in some applications public should not be public but here it's it's fine and if you look at the",
    "start": "1779080",
    "end": "1784960"
  },
  {
    "text": "code it's it's surprisingly well written and quite safe like you know you have",
    "start": "1784960",
    "end": "1790640"
  },
  {
    "text": "two different errors it will return different error cards um why this looks very stupid but not all libraries do do",
    "start": "1790640",
    "end": "1796120"
  },
  {
    "text": "this and yes well very well written and yeah compared to others I'm looking at",
    "start": "1796120",
    "end": "1802559"
  },
  {
    "text": "openl um now maybe one of the most important algorithm is ases uh how is it",
    "start": "1802559",
    "end": "1809000"
  },
  {
    "start": "1803000",
    "end": "1906000"
  },
  {
    "text": "implemented so you know ases might be vulnerable to some s attacks cash timing attacks the one that I mentioned before",
    "start": "1809000",
    "end": "1815240"
  },
  {
    "text": "where I said that you have you can have cash timing probabilities in sjx",
    "start": "1815240",
    "end": "1820799"
  },
  {
    "text": "enclaved um so if you look at the windows um uh Library uh it uses the",
    "start": "1820799",
    "end": "1826760"
  },
  {
    "text": "native inst instructions asnis the hardware instructions in CPUs to compete the rounds so ASU iterates 10 rounds and",
    "start": "1826760",
    "end": "1834240"
  },
  {
    "text": "you have an instruction called as ank to encrypt and as deck to decrypt you also",
    "start": "1834240",
    "end": "1840720"
  },
  {
    "text": "got instruction called as keyen assist to perform the key Skittle so the transformation of the key that you use to to encrypt or decrypt but",
    "start": "1840720",
    "end": "1847559"
  },
  {
    "text": "surprisingly uh again as far as we can tell uh it's not used in um in the",
    "start": "1847559",
    "end": "1854279"
  },
  {
    "text": "library of Intel but instead it's using an implementation based on on tables so the kind of thing that tends to be",
    "start": "1854279",
    "end": "1860159"
  },
  {
    "text": "vulnerable to Cash Time attacks but in these specific implementations there's some counter measures to avoid cash",
    "start": "1860159",
    "end": "1867039"
  },
  {
    "text": "timing attacks on Linux it's a little bit different um when you look at the source",
    "start": "1867039",
    "end": "1874159"
  },
  {
    "text": "code the implementation is a textbook implementation which is very slow uh",
    "start": "1874159",
    "end": "1879440"
  },
  {
    "text": "don't understand why it's um done this way even the yes box is not the usual table based implementation but it's just",
    "start": "1879440",
    "end": "1885880"
  },
  {
    "text": "uh simple lookip table with with 256 values but in the enclaves of Intel the",
    "start": "1885880",
    "end": "1892679"
  },
  {
    "text": "one for which you only got the binaries they do use the uh the fast instructions so this is simple of the the code why",
    "start": "1892679",
    "end": "1900519"
  },
  {
    "text": "you see that they're trying to access all the cach lines to avoid leing information on uh which Cash Line was",
    "start": "1900519",
    "end": "1907000"
  },
  {
    "start": "1906000",
    "end": "2000000"
  },
  {
    "text": "accessed now maybe the most important thing in crypto is Randomness so without Randomness you have no security at all",
    "start": "1907000",
    "end": "1912919"
  },
  {
    "text": "because everything becomes predictable uh the nice part when we looked at it is that the weak random",
    "start": "1912919",
    "end": "1918720"
  },
  {
    "text": "generators that you have in the lipy round uh round round they're not",
    "start": "1918720",
    "end": "1923799"
  },
  {
    "text": "available you only have uh one function called sgx raid round which is using the",
    "start": "1923799",
    "end": "1930120"
  },
  {
    "text": "Rd round the raid round instructions of the Intel CPU so that's that's nice and",
    "start": "1930120",
    "end": "1936039"
  },
  {
    "text": "Intel warns you that you got to try up to 10 times this instruction because it may fail they don't really tell you why",
    "start": "1936039",
    "end": "1943399"
  },
  {
    "text": "but um well I can tell you why later uh so you might think okay I got to call",
    "start": "1943399",
    "end": "1948960"
  },
  {
    "text": "this function up to 10 times but no if you look at how it's implemented uh in the library you actually have the this",
    "start": "1948960",
    "end": "1955960"
  },
  {
    "text": "iteration they test it up to 10 times and it fa if it fail they return an error Crow so you should always check",
    "start": "1955960",
    "end": "1963399"
  },
  {
    "text": "the return return value of redr uh one fun thing with red round and",
    "start": "1963399",
    "end": "1970600"
  },
  {
    "text": "Reed seed is that uh it's the only instructions for which uh an",
    "start": "1970600",
    "end": "1975919"
  },
  {
    "text": "hypervisor uh that an hypervisor can can can stop can prevent you from using the",
    "start": "1975919",
    "end": "1981600"
  },
  {
    "text": "hypervisor can modify the virtual machine control structure and say every time I see R run C I will do a vmx it so",
    "start": "1981600",
    "end": "1990919"
  },
  {
    "text": "can perform a din of Randomness attack if you will but you will notice it because you",
    "start": "1990919",
    "end": "1997240"
  },
  {
    "text": "will have a vmx it okay next okay uh just be careful if",
    "start": "1997240",
    "end": "2003279"
  },
  {
    "start": "2000000",
    "end": "2016000"
  },
  {
    "text": "you look at the Linux SDK there's something called sample lip crypto but you should not use it because it's very",
    "start": "2003279",
    "end": "2008960"
  },
  {
    "text": "weak and it's even written in the comments it's very weak just for testing",
    "start": "2008960",
    "end": "2014159"
  },
  {
    "text": "some stuff okay now um interesting part um so",
    "start": "2014159",
    "end": "2020159"
  },
  {
    "start": "2016000",
    "end": "2121000"
  },
  {
    "text": "I mentioned this um piece of software which is the qu Enclave which verifies",
    "start": "2020159",
    "end": "2026120"
  },
  {
    "text": "the identity of an enclave of its it program and it signs it using very",
    "start": "2026120",
    "end": "2032679"
  },
  {
    "text": "specific uh signature scheme called epid I'll talk about it later and it creates",
    "start": "2032679",
    "end": "2037720"
  },
  {
    "text": "a quote so in this SX world it's equivalent to a publicy",
    "start": "2037720",
    "end": "2043320"
  },
  {
    "text": "certificate but it's using some crypto scheme that is not documented so we try to to look at at the binary it looks",
    "start": "2043320",
    "end": "2050720"
  },
  {
    "text": "like this so just just look at the boxes not the errors you have RSA 248 as this",
    "start": "2050720",
    "end": "2057760"
  },
  {
    "text": "EP ID thing sh 2 56 and Sh 56 um so each time you create this kind",
    "start": "2057760",
    "end": "2064720"
  },
  {
    "text": "of certificate it creates a new random key K of 16 bytes and a new random IV of",
    "start": "2064720",
    "end": "2072000"
  },
  {
    "text": "12 bytes so if you've been to the talk yesterday about um GCM you might say aha",
    "start": "2072000",
    "end": "2078520"
  },
  {
    "text": "you should not use random IVs because might repeat because of the birthday",
    "start": "2078520",
    "end": "2083720"
  },
  {
    "text": "bound uh here's not a problem because you have a random key every time so it's",
    "start": "2083720",
    "end": "2089878"
  },
  {
    "text": "okay to have a random IV and you see that the the key is hashed so what's this doing essentially it creates a new",
    "start": "2089879",
    "end": "2096878"
  },
  {
    "text": "new symmetric key it uh encrypted using RSA and it used this key with ascm to",
    "start": "2096879",
    "end": "2105800"
  },
  {
    "text": "encrypt a signature with under my V so at the end of the day in the qut you get",
    "start": "2105800",
    "end": "2112200"
  },
  {
    "text": "the encrypted key a the encrypted signature and you get a har of the key",
    "start": "2112200",
    "end": "2117480"
  },
  {
    "text": "okay no you get the encrypted key okay it'ss anyway so how secure is",
    "start": "2117480",
    "end": "2124440"
  },
  {
    "start": "2121000",
    "end": "2192000"
  },
  {
    "text": "this so I've never seen this kind of scheme before if you try to abstract the construction it's actually what's called",
    "start": "2124440",
    "end": "2130599"
  },
  {
    "text": "a hybrid encryption scheme where you combine a Secure Public key scheme and a secure private key scheme so here you",
    "start": "2130599",
    "end": "2137160"
  },
  {
    "text": "combine as and RSA so the constrution itself looks sound because you have this",
    "start": "2137160",
    "end": "2143119"
  },
  {
    "text": "security notion you know that oap the mod RSA used here is indd CCA secure",
    "start": "2143119",
    "end": "2148880"
  },
  {
    "text": "which means very strong and you have as GCM which iscpa even a bit more so it also means",
    "start": "2148880",
    "end": "2156880"
  },
  {
    "text": "uh quite secure uh one small caveat is that it leaks the hash of the key so if",
    "start": "2156880",
    "end": "2163000"
  },
  {
    "text": "the key were too small you could do some uh me time memory tradeoff attacks that you couldn't do without it also you",
    "start": "2163000",
    "end": "2170760"
  },
  {
    "text": "don't get far secrecy because it's RSA so if the private key licks later on you can decrypt",
    "start": "2170760",
    "end": "2175839"
  },
  {
    "text": "everything and also what is a bit surprising so before I mentioned that RSA",
    "start": "2175839",
    "end": "2182079"
  },
  {
    "text": "372 was used and here you just got RSA 248 so it's equivalent to approximately",
    "start": "2182079",
    "end": "2189599"
  },
  {
    "text": "90 bits of security only okay now epd very briefly it would take",
    "start": "2189599",
    "end": "2196880"
  },
  {
    "start": "2192000",
    "end": "2245000"
  },
  {
    "text": "me like two hours to explain all the details but it's not the signatur you're used to where you have a sign verifier",
    "start": "2196880",
    "end": "2203680"
  },
  {
    "text": "it's a group signature scheme so you have a group of possible signers in this case a group of CPUs with the same TCB",
    "start": "2203680",
    "end": "2211680"
  },
  {
    "text": "version and each member of this group they can issue a signature and and when you get a",
    "start": "2211680",
    "end": "2217400"
  },
  {
    "text": "signature you will only see okay one member of the group sign this piece of data but you will not know which actual",
    "start": "2217400",
    "end": "2223000"
  },
  {
    "text": "CPU signed it and even the let's said the master key the holder of the master",
    "start": "2223000",
    "end": "2228119"
  },
  {
    "text": "keys Intel in this case and even the r CPUs they cannot figure out which actual CPU issued this signature so why doing",
    "start": "2228119",
    "end": "2236280"
  },
  {
    "text": "this um the whole point simplify again is to prevent the tracking of individual",
    "start": "2236280",
    "end": "2242319"
  },
  {
    "text": "CPUs by looking at the signatures okay um so again we don't have all the",
    "start": "2242319",
    "end": "2249359"
  },
  {
    "text": "details of How It's implemented we know that there's a research paper where they describe um all the details of this this",
    "start": "2249359",
    "end": "2257280"
  },
  {
    "text": "scheme you have security proofs and everything you it's not implemented in micro code because allegedly it's way",
    "start": "2257280",
    "end": "2264040"
  },
  {
    "text": "too complex if you don't have the source code either it's only in the binaries provided by by",
    "start": "2264040",
    "end": "2270119"
  },
  {
    "text": "Intel uh so again it's um our point of view on this um but the details of the",
    "start": "2270119",
    "end": "2278319"
  },
  {
    "text": "scheme implemented they available publicly the type of elliptic curve that it uses it's something called The",
    "start": "2278319",
    "end": "2284200"
  },
  {
    "text": "bariton Curve so a type of curve that is optimized for this type of scheme which ises cryptographic pairings but I won't",
    "start": "2284200",
    "end": "2291440"
  },
  {
    "text": "give the details and you have several ways to implement this is very very complicated but it seems similar to what",
    "start": "2291440",
    "end": "2298040"
  },
  {
    "text": "is published in this um paper where you have the reference okay and again you you don't have the actual parameter so",
    "start": "2298040",
    "end": "2304599"
  },
  {
    "text": "you cannot directly say it has One 120b Security level or 256 you have to dress Intel for this",
    "start": "2304599",
    "end": "2311880"
  },
  {
    "text": "okay and for the last part thank you so we have been busy",
    "start": "2311880",
    "end": "2317480"
  },
  {
    "text": "doing a few things we are releasing a couple of them here there's a cool thing about the CX",
    "start": "2317480",
    "end": "2323920"
  },
  {
    "start": "2321000",
    "end": "2355000"
  },
  {
    "text": "and crypto applications it allows you to cheat you can use the CPU",
    "start": "2323920",
    "end": "2330680"
  },
  {
    "text": "as a key storage or you can use it as a TCB and you and Implement complex",
    "start": "2330680",
    "end": "2339480"
  },
  {
    "text": "functionalities that are usually as slow and quite complex are fully monomorphic encryption multi party computation a few",
    "start": "2339480",
    "end": "2347000"
  },
  {
    "text": "things that would be complex with classic crypto but with SX you can you",
    "start": "2347000",
    "end": "2353240"
  },
  {
    "text": "can do them you can do them easily so one of the projects we are releasing as",
    "start": "2353240",
    "end": "2359040"
  },
  {
    "start": "2355000",
    "end": "2400000"
  },
  {
    "text": "a proof of concept warning you shouldn't use it in production it's not review",
    "start": "2359040",
    "end": "2364480"
  },
  {
    "text": "it's a pro concept it's a encryption proxy where you simply get a cipher",
    "start": "2364480",
    "end": "2371400"
  },
  {
    "text": "text and convert it to another Cipher text without exposing the keys nor not",
    "start": "2371400",
    "end": "2376839"
  },
  {
    "text": "exposing the plain text we are we are only using symmetric keys and we are using ceiling to store",
    "start": "2376839",
    "end": "2385680"
  },
  {
    "text": "the keys used for encryption and decryption and some policies like which",
    "start": "2385680",
    "end": "2390839"
  },
  {
    "text": "keys can be used together which clients are allowed to use the keys so it's an",
    "start": "2390839",
    "end": "2397560"
  },
  {
    "text": "interesting example the goal is no leaking the plain",
    "start": "2397560",
    "end": "2403480"
  },
  {
    "text": "text no leaking the secret Keys No leaking the keys involved the key IDs",
    "start": "2403480",
    "end": "2409839"
  },
  {
    "text": "involved on every the encryption process and not like in the policies there are a few limitations the OS May modify your",
    "start": "2409839",
    "end": "2418560"
  },
  {
    "text": "seal blobs but you will notice the the SE blobs have integrity you don't have a trusted clock",
    "start": "2418560",
    "end": "2426400"
  },
  {
    "text": "so if you try to implement a a key expiration uh",
    "start": "2426400",
    "end": "2432760"
  },
  {
    "text": "policy they always can tell you the wrong time there is a there is a clock",
    "start": "2432760",
    "end": "2438880"
  },
  {
    "text": "Source on sdx you have a trusted clock but you don't know the origin of time",
    "start": "2438880",
    "end": "2444640"
  },
  {
    "text": "it's only relative relative um it can",
    "start": "2444640",
    "end": "2450359"
  },
  {
    "text": "also it's it's not a full clock and also uh we are fing the keys",
    "start": "2450359",
    "end": "2457359"
  },
  {
    "text": "on every the encryption request so the O OS can tell which pair are used",
    "start": "2457359",
    "end": "2466160"
  },
  {
    "text": "together this is the protocol we have implemented on the left we have the laptop on the right we have The",
    "start": "2466160",
    "end": "2473240"
  },
  {
    "text": "Enclave so we compose a request in which the client identifies himself with his",
    "start": "2473240",
    "end": "2479880"
  },
  {
    "text": "public key we we telling the request the key identifiers that we want",
    "start": "2479880",
    "end": "2486760"
  },
  {
    "text": "as input and output and we give a cipher text this request is encrypted so now",
    "start": "2486760",
    "end": "2493480"
  },
  {
    "text": "that you encrypt the request anybody in the middle between you and Enclave cannot see what is happening we we send",
    "start": "2493480",
    "end": "2501000"
  },
  {
    "text": "the request to The Enclave we try to decrypt the the request with the client",
    "start": "2501000",
    "end": "2507440"
  },
  {
    "text": "public key and if it's okay we check the policies like can we",
    "start": "2507440",
    "end": "2513400"
  },
  {
    "text": "do this operation uh is this is are these two keys allowed to be used",
    "start": "2513400",
    "end": "2518920"
  },
  {
    "text": "together is this client allowed to use this key and if all this okay if all",
    "start": "2518920",
    "end": "2524079"
  },
  {
    "text": "this is okay we decrypt the cipher text we encrypt it again with the new key we",
    "start": "2524079",
    "end": "2529280"
  },
  {
    "text": "compost the response and we encrypt again the response with the client",
    "start": "2529280",
    "end": "2534640"
  },
  {
    "text": "public key we give it back and the client can can get the",
    "start": "2534640",
    "end": "2540480"
  },
  {
    "text": "response the implementation is based on Twi Sal why because it's compact it's",
    "start": "2540480",
    "end": "2546640"
  },
  {
    "text": "minimal it's post post Quantum no it's good",
    "start": "2546640",
    "end": "2554640"
  },
  {
    "text": "enough uh but we get a a small library with",
    "start": "2554640",
    "end": "2560640"
  },
  {
    "text": "authentication between the client and and Enclave we haven't implemented remote",
    "start": "2560640",
    "end": "2567000"
  },
  {
    "text": "attestation what happens when you don't have remote attestation in in our case we",
    "start": "2567000",
    "end": "2572960"
  },
  {
    "text": "authenticate Enclave with a public key this publicy key is generated the first",
    "start": "2572960",
    "end": "2578880"
  },
  {
    "text": "time you run the system this key is also",
    "start": "2578880",
    "end": "2584880"
  },
  {
    "text": "sealed so it can be retrieved every time you execute The Enclave so you have to do this process",
    "start": "2584880",
    "end": "2592480"
  },
  {
    "text": "in a trusted environment if the setup is doing is is done in in a trusted",
    "start": "2592480",
    "end": "2599000"
  },
  {
    "text": "environment the the Integrity of the key should be kept and then we have a couple",
    "start": "2599000",
    "end": "2605319"
  },
  {
    "text": "of interfaces we have one to register the keys and we have one to re encrypt and the",
    "start": "2605319",
    "end": "2612000"
  },
  {
    "text": "communication in both is encrypted and authenticated the other project is a",
    "start": "2612000",
    "end": "2617760"
  },
  {
    "start": "2614000",
    "end": "2671000"
  },
  {
    "text": "small tool for helping analyzing the metadata from the enclaves the seal blobs and the",
    "start": "2617760",
    "end": "2625280"
  },
  {
    "text": "quote so from enclaves you can tell the security attributes who did sign The",
    "start": "2625280",
    "end": "2632240"
  },
  {
    "text": "Enclave the hash you can also see which are the entry points that can be invoked",
    "start": "2632240",
    "end": "2637640"
  },
  {
    "text": "on Enclave from the quotes you can",
    "start": "2637640",
    "end": "2642800"
  },
  {
    "text": "tell the signature you can tell if the Enclave was running in the back",
    "start": "2642800",
    "end": "2648559"
  },
  {
    "text": "mode you can also see which is The Enclave who generated the quote and with",
    "start": "2648559",
    "end": "2654359"
  },
  {
    "text": "the seal blobs you can see which was the key policy if the blob is encrypted to",
    "start": "2654359",
    "end": "2660079"
  },
  {
    "text": "the signer or if it's encrypted to The Enclave if it has additional authenticated data in PL text so they",
    "start": "2660079",
    "end": "2668800"
  },
  {
    "text": "are small tools but they are cool I have small demo here we",
    "start": "2668800",
    "end": "2675559"
  },
  {
    "start": "2671000",
    "end": "2786000"
  },
  {
    "text": "have the person Enclave running and we can see we can see here",
    "start": "2675559",
    "end": "2683280"
  },
  {
    "text": "it will be yeah we can see the house of The Enclave we can see the signature we can",
    "start": "2683280",
    "end": "2689920"
  },
  {
    "text": "see the public key the RSA parameters are valid and then this will",
    "start": "2689920",
    "end": "2697400"
  },
  {
    "text": "move we can see which are the entry points at the bottom so all these uh memory positions",
    "start": "2697400",
    "end": "2706640"
  },
  {
    "text": "can be used to reverse the enclave and analyze what is",
    "start": "2706640",
    "end": "2712000"
  },
  {
    "text": "happening now we will see the seal blobs",
    "start": "2712000",
    "end": "2717160"
  },
  {
    "text": "in this case The Blob the policy is the signer so every other Enclave who is",
    "start": "2717160",
    "end": "2723720"
  },
  {
    "text": "signed by the same signer can decrypt this blob and we can also",
    "start": "2723720",
    "end": "2729119"
  },
  {
    "text": "see there is some addition additional authenticated data that comes in plain",
    "start": "2729119",
    "end": "2735078"
  },
  {
    "text": "text and now we can see the quote there is a signature there there",
    "start": "2736640",
    "end": "2743119"
  },
  {
    "text": "is a lot of data and at the bottom you can see which",
    "start": "2743119",
    "end": "2748680"
  },
  {
    "text": "is The Enclave has who generated this quote you can also see who is the signer",
    "start": "2748680",
    "end": "2757680"
  },
  {
    "text": "and now we will see in a minute the attributes yeah so the quote was",
    "start": "2757680",
    "end": "2763839"
  },
  {
    "text": "generated by edag mode Enclave so if you are if you are uh in the platform you",
    "start": "2763839",
    "end": "2771640"
  },
  {
    "text": "could hook a debugger and get the information that is",
    "start": "2771640",
    "end": "2776880"
  },
  {
    "text": "inside remember debug modes and caves are not",
    "start": "2776880",
    "end": "2781960"
  },
  {
    "text": "secure and that is Sol for me okay let me very",
    "start": "2784800",
    "end": "2792559"
  },
  {
    "start": "2786000",
    "end": "2890000"
  },
  {
    "text": "uh quickly conclude uh so the obligatory black conclusions so description of what",
    "start": "2792559",
    "end": "2800319"
  },
  {
    "text": "it jigs does uh it allows you to run your code on someone's computer uh",
    "start": "2800319",
    "end": "2807200"
  },
  {
    "text": "security it's very complicated you have huge tax surface we're not disclosing any issues but just showing stuff that",
    "start": "2807200",
    "end": "2813599"
  },
  {
    "text": "you don't have in Intel documentation and we reling some code now open",
    "start": "2813599",
    "end": "2818720"
  },
  {
    "text": "question so I really wonder how bad will be the burs uh on sjx I'm quite surprised we haven't seen any anyone yet",
    "start": "2818720",
    "end": "2826119"
  },
  {
    "text": "uh also how will it be adopted by the cloud providers will they just use it",
    "start": "2826119",
    "end": "2831359"
  },
  {
    "text": "for their own security or will you have maybe the ability to pay a premium to get HDX um as a",
    "start": "2831359",
    "end": "2838200"
  },
  {
    "text": "client uh we'll see also whether the bond manufacturers will support custom",
    "start": "2838200",
    "end": "2843760"
  },
  {
    "text": "launching play which means essentially a way to get more control on sgx um instead of Intel uh for example",
    "start": "2843760",
    "end": "2852720"
  },
  {
    "text": "open sour firmware like corro they may also support hgx at some point I think they will um I'm also looking forward",
    "start": "2852720",
    "end": "2859839"
  },
  {
    "text": "hgx three or four or five supporting the BM crypto that n will relase in five",
    "start": "2859839",
    "end": "2866240"
  },
  {
    "text": "years so we've got a couple frences uh the slides will be online we have the",
    "start": "2866240",
    "end": "2871480"
  },
  {
    "text": "references of pre work we hadn't had time to to present this we really had so time and yeah so thank you and that was",
    "start": "2871480",
    "end": "2878640"
  },
  {
    "text": "the very first talk of Lis the conference so I think it did a good job thank",
    "start": "2878640",
    "end": "2884800"
  },
  {
    "text": "you",
    "start": "2889200",
    "end": "2892200"
  }
]