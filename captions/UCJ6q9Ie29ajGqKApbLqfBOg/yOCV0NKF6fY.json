[
  {
    "text": "[Music]",
    "start": "1740",
    "end": "4810"
  },
  {
    "text": "hello uh today i'm going to talk about zooming zero to attack zero knowledge proof",
    "start": "8160",
    "end": "17480"
  },
  {
    "text": "so you know a lot of people come to the zero knowledge proof talk and then you know after the talk you learn zero",
    "start": "18240",
    "end": "25359"
  },
  {
    "text": "they don't know anything about um what the speaker was talking about",
    "start": "25359",
    "end": "32800"
  },
  {
    "text": "so so so my goal is pretty simple um you know like after the talk you will",
    "start": "32800",
    "end": "38960"
  },
  {
    "text": "learn non-zero knowledge and the second goal was to have some fun",
    "start": "38960",
    "end": "44640"
  },
  {
    "text": "with the number zero so you know like in the last few years",
    "start": "44640",
    "end": "50079"
  },
  {
    "text": "uh there are a lot of algorithms in general knowledge proof and they are deployed in",
    "start": "50079",
    "end": "56559"
  },
  {
    "text": "multiple blockchains and uh that development was so fast that",
    "start": "56559",
    "end": "63600"
  },
  {
    "text": "they used a lot of technologies that you know like just just to explain",
    "start": "63600",
    "end": "68640"
  },
  {
    "text": "the basic tech a semester so that's the reason why",
    "start": "68640",
    "end": "75119"
  },
  {
    "text": "i in this talk i just try to to give you very informal",
    "start": "75119",
    "end": "81600"
  },
  {
    "text": "techniques and ideas so that you can learn about their knowledge proof yourself",
    "start": "81600",
    "end": "87920"
  },
  {
    "text": "later um so you know but um",
    "start": "87920",
    "end": "93119"
  },
  {
    "text": "but i hope that you you uh you can see you know some basic and fundamental",
    "start": "93119",
    "end": "98960"
  },
  {
    "text": "um fundamental idea in zero knowledge proof",
    "start": "98960",
    "end": "104798"
  },
  {
    "text": "okay so and then i will talk about like how the theories",
    "start": "108399",
    "end": "113920"
  },
  {
    "text": "guide attack directions and later on uh i i will explain like why the attack",
    "start": "113920",
    "end": "120159"
  },
  {
    "text": "work in practice okay so so i i will have to explain to you a",
    "start": "120159",
    "end": "127119"
  },
  {
    "text": "lot of a lot of you know basic concept and so i will go pretty fast but the the",
    "start": "127119",
    "end": "135360"
  },
  {
    "text": "the main thing is we will not try to understand in depth instead we are",
    "start": "135360",
    "end": "140560"
  },
  {
    "text": "trying to understand the intuition between different concepts so that you know when we read complicated and",
    "start": "140560",
    "end": "147200"
  },
  {
    "text": "complex paper we have a better idea what's going on because you know network",
    "start": "147200",
    "end": "152239"
  },
  {
    "text": "is super super complicated so for a lift curve if you you never",
    "start": "152239",
    "end": "159280"
  },
  {
    "text": "deal with elliptical before the elliptical is just the blue line and then uh in elliptic curve there",
    "start": "159280",
    "end": "165680"
  },
  {
    "text": "it's very amazing that the addition operation is defined between two points basically you when you you have two",
    "start": "165680",
    "end": "172400"
  },
  {
    "text": "points p and q you can add them together so the red line p and q cut the blue line",
    "start": "172400",
    "end": "178959"
  },
  {
    "text": "at the point r prime and then its symmetry is the sum of p and q",
    "start": "178959",
    "end": "185120"
  },
  {
    "text": "you know and we we don't actually need to understand how the addition work what",
    "start": "185120",
    "end": "190560"
  },
  {
    "text": "we actually can is the the the points in elliptic curve forms a group what it",
    "start": "190560",
    "end": "197120"
  },
  {
    "text": "means is the addition operation is defined and it has a zero point when you add a zero point to any point",
    "start": "197120",
    "end": "204080"
  },
  {
    "text": "you get back the original point and in our elliptic curve we will",
    "start": "204080",
    "end": "211959"
  },
  {
    "text": "excuse me in our electric curve uh we were to",
    "start": "213280",
    "end": "219360"
  },
  {
    "text": "basically choose uh to a base pawn that a fixed pawn that is defined in advance",
    "start": "219360",
    "end": "225440"
  },
  {
    "text": "and everyone know what what it is and if you add that pawn q time then you get back zero so q is called the order",
    "start": "225440",
    "end": "233519"
  },
  {
    "text": "of the point okay so one very special property of uh zero",
    "start": "233519",
    "end": "239519"
  },
  {
    "text": "point is whenever you multiply that point with any point then you get back",
    "start": "239519",
    "end": "244799"
  },
  {
    "text": "zero and then we'll use this property in in our attack",
    "start": "244799",
    "end": "251040"
  },
  {
    "text": "next we will talk about pairing you know pairing has a lot of you know",
    "start": "251680",
    "end": "257840"
  },
  {
    "text": "deep math and we for the purpose of this talk we don't really care like how uh",
    "start": "257840",
    "end": "263919"
  },
  {
    "text": "pairing computation work and the formal definition what we care is you know like it maps uh",
    "start": "263919",
    "end": "270800"
  },
  {
    "text": "two points on a curve to to a finite field or to a number",
    "start": "270800",
    "end": "275840"
  },
  {
    "text": "and it can map two points on two different curve two number as well you",
    "start": "275840",
    "end": "282080"
  },
  {
    "text": "know one one trick that i learned how to deal with complicated math is to not to learn it",
    "start": "282080",
    "end": "288560"
  },
  {
    "text": "instead we just learn its property and this property is pretty simple it has very nice property so if the pairing of",
    "start": "288560",
    "end": "296320"
  },
  {
    "text": "p plus q with r is the product of p and r and q and r right",
    "start": "296320",
    "end": "302960"
  },
  {
    "text": "and uh the pairing of a ap and bq equals to the pairing of p and q",
    "start": "302960",
    "end": "309520"
  },
  {
    "text": "uh two to two to the power of uh a times b",
    "start": "309520",
    "end": "315120"
  },
  {
    "text": "so if you look at the top line what you see is we can basically move the coefficient",
    "start": "315120",
    "end": "321440"
  },
  {
    "text": "a b around when we can move it to the exponent we can move it to the first",
    "start": "321440",
    "end": "327360"
  },
  {
    "text": "component or we can move it uh splitted them in two different ways",
    "start": "327360",
    "end": "332560"
  },
  {
    "text": "so one nice property about pairing that we actually use in the in the prong",
    "start": "332560",
    "end": "337759"
  },
  {
    "text": "broker is it helps checking multiplication relations and then we'll come back to",
    "start": "337759",
    "end": "343680"
  },
  {
    "text": "that later uh before moving on one very special property of pairing is when you pair",
    "start": "343680",
    "end": "350160"
  },
  {
    "text": "zero points with any point you get back one and and we will use this observation uh",
    "start": "350160",
    "end": "357840"
  },
  {
    "text": "again in in the attack section",
    "start": "357840",
    "end": "362400"
  },
  {
    "text": "um you know like now i will introduce a little bit more about zero knowledge",
    "start": "363759",
    "end": "368960"
  },
  {
    "text": "proof so it's general knowledge proof has a lot of terminal terminologies",
    "start": "368960",
    "end": "374000"
  },
  {
    "text": "maybe jargon as well and and to explain them that they're basically two ways to explain them one",
    "start": "374000",
    "end": "380560"
  },
  {
    "text": "is you start with some definition formal definitions and and and then try to give some you",
    "start": "380560",
    "end": "387520"
  },
  {
    "text": "know examples i i would prefer going from the concrete example first try to",
    "start": "387520",
    "end": "393600"
  },
  {
    "text": "see like what's going on understand the core and basic protocol and then",
    "start": "393600",
    "end": "398880"
  },
  {
    "text": "and then use that as framework to understand the general definitions and how things work",
    "start": "398880",
    "end": "405120"
  },
  {
    "text": "so so let's start with with very simple protocol it's called snow protocol um",
    "start": "405120",
    "end": "411759"
  },
  {
    "text": "this this it plays a very important role in snarl signature and with digital signature",
    "start": "411759",
    "end": "419120"
  },
  {
    "text": "so so so it's very really important and it it serves the basic for many little",
    "start": "419120",
    "end": "426479"
  },
  {
    "text": "protocols uh so this is the problem right the approver",
    "start": "426479",
    "end": "432080"
  },
  {
    "text": "and the verifier talks with each other the approval has the private key smart w",
    "start": "432080",
    "end": "437440"
  },
  {
    "text": "and it has a public key [Music] a big w",
    "start": "437440",
    "end": "443120"
  },
  {
    "text": "and the approval wants to to convince the verifier that it knows",
    "start": "443120",
    "end": "448479"
  },
  {
    "text": "the private key without revealing any information about the private key right it sounds very",
    "start": "448479",
    "end": "455120"
  },
  {
    "text": "amazing right you convince someone that you know something without actually",
    "start": "455120",
    "end": "460800"
  },
  {
    "text": "revealing it right and and and this that kind of like the magic of uh zero knowledge proof",
    "start": "460800",
    "end": "468000"
  },
  {
    "text": "and in this protocol uh it basically consists of three steps",
    "start": "468000",
    "end": "473280"
  },
  {
    "text": "and the first one is the the approvals generate a random are a small r",
    "start": "473280",
    "end": "478720"
  },
  {
    "text": "and and and it will send r time g to the verifier the val the verifier will",
    "start": "478720",
    "end": "485520"
  },
  {
    "text": "generate a random c and then it will it will send it to the approver",
    "start": "485520",
    "end": "491120"
  },
  {
    "text": "the approval compute z equals to r plus c time w and then z to the verifier okay",
    "start": "491120",
    "end": "499199"
  },
  {
    "text": "um before moving on one note is you know my goal",
    "start": "499199",
    "end": "504560"
  },
  {
    "text": "is you know to uh to talk about a basic and because this talk is kind of like math heavy so if",
    "start": "504560",
    "end": "512000"
  },
  {
    "text": "you can understand around like 25 of the talk in the first time that's already a success so",
    "start": "512000",
    "end": "519680"
  },
  {
    "text": "the slide will be uploaded so that you can watch it later um",
    "start": "519680",
    "end": "525200"
  },
  {
    "text": "so so you know the verifier checks some equation right z times g equals to r",
    "start": "525200",
    "end": "530320"
  },
  {
    "text": "plus c times w and and you know if you try it now uh if",
    "start": "530320",
    "end": "536399"
  },
  {
    "text": "the approval and the verifier are honest then you know the equation is satisfied there's nothing special about this",
    "start": "536399",
    "end": "544080"
  },
  {
    "text": "the the the special thing happens somewhere else so the first",
    "start": "544080",
    "end": "549680"
  },
  {
    "text": "thing first you know um why does the prover",
    "start": "549680",
    "end": "556320"
  },
  {
    "text": "does it leak anything about the private key uh w right",
    "start": "556320",
    "end": "561600"
  },
  {
    "text": "so so this this um this protocol use a very common trick in",
    "start": "561600",
    "end": "566880"
  },
  {
    "text": "zero knowledge proof basically it is it do the masking technique uh it's very simple right to",
    "start": "566880",
    "end": "573519"
  },
  {
    "text": "to hide a number you just generate another number random another number and add them together and",
    "start": "573519",
    "end": "580080"
  },
  {
    "text": "yes you send the addition you send the sum right so in this case",
    "start": "580080",
    "end": "585760"
  },
  {
    "text": "because c times w is is related to private key right so the",
    "start": "585760",
    "end": "592800"
  },
  {
    "text": "the approval want to hide that value so it re it generate a random number r",
    "start": "592800",
    "end": "598160"
  },
  {
    "text": "so because r is random no matter what c times w is the sum is",
    "start": "598160",
    "end": "603680"
  },
  {
    "text": "random so that's why you see like in the first step generate a random it goes to mass out",
    "start": "603680",
    "end": "611600"
  },
  {
    "text": "what c times w so basically this protocol you know like",
    "start": "611600",
    "end": "616880"
  },
  {
    "text": "doesn't leak any information about the private kw uh the hard part is",
    "start": "616880",
    "end": "624000"
  },
  {
    "text": "how is the verified verifier convinced that the the proven knows w",
    "start": "624000",
    "end": "629839"
  },
  {
    "text": "and this is this is this is one of the most uh confusing definition",
    "start": "629839",
    "end": "635440"
  },
  {
    "text": "in in zero knowledge proof the f if it's the first time you deal with it",
    "start": "635440",
    "end": "640720"
  },
  {
    "text": "uh you will see that oh it is very strange so so i will goes a little bit slow on",
    "start": "640720",
    "end": "646320"
  },
  {
    "text": "this so think about approval is a is a process in the computer right",
    "start": "646320",
    "end": "652000"
  },
  {
    "text": "so if if the verifier communicate and interact with approval and process and somehow you know by you",
    "start": "652000",
    "end": "660240"
  },
  {
    "text": "know torturing the approver or assets to uh do random stuff or you know clone it",
    "start": "660240",
    "end": "667279"
  },
  {
    "text": "whatever as long as in the end the verifier can extract the private key then the",
    "start": "667279",
    "end": "672560"
  },
  {
    "text": "verifier is convinced that approval must have known the private key right otherwise where",
    "start": "672560",
    "end": "679920"
  },
  {
    "text": "does the private key come from so if the prover doesn't know the private key then no matter what the verifier does it can",
    "start": "679920",
    "end": "687120"
  },
  {
    "text": "extract the private key right because it doesn't exist in the approval process",
    "start": "687120",
    "end": "692160"
  },
  {
    "text": "so the in in in practice or in reality what they do",
    "start": "692160",
    "end": "698640"
  },
  {
    "text": "is they they ask the approver to keep to keep the random r unchanged and then",
    "start": "698640",
    "end": "706000"
  },
  {
    "text": "the verify will send two different values c and c prime and then the the the approval will do",
    "start": "706000",
    "end": "712160"
  },
  {
    "text": "the same thing you know compute z equal to r plus w c",
    "start": "712160",
    "end": "717279"
  },
  {
    "text": "and z prime equal to r plus w c prime and if you write down the equations and",
    "start": "717279",
    "end": "724480"
  },
  {
    "text": "then you can see that it's very easy to compute w it's actually equal to z minus",
    "start": "724480",
    "end": "729760"
  },
  {
    "text": "z prime z prime divided by c minus c prime so",
    "start": "729760",
    "end": "734880"
  },
  {
    "text": "it means that there is a way for the verify extract the approval by interacting with it",
    "start": "734880",
    "end": "742480"
  },
  {
    "text": "right so now the verifier is convinced that the approval actually know uh the",
    "start": "742480",
    "end": "748160"
  },
  {
    "text": "private key okay so you know the protocol",
    "start": "748160",
    "end": "753200"
  },
  {
    "text": "that i described is interactive right but in practice you know interactive protocol has a few",
    "start": "753200",
    "end": "760240"
  },
  {
    "text": "drawbacks first of all it requires the approval and the verifier to be synchronized and second or second you",
    "start": "760240",
    "end": "767200"
  },
  {
    "text": "know it only happens with one prover and one verifier in practice you want to create",
    "start": "767200",
    "end": "775040"
  },
  {
    "text": "a proof and then multiple verifier will verify",
    "start": "775040",
    "end": "780320"
  },
  {
    "text": "later at any time they want so so what we actually want is a",
    "start": "780320",
    "end": "787279"
  },
  {
    "text": "non-interactive protocol uh but how do how do we transform from a",
    "start": "787279",
    "end": "793040"
  },
  {
    "text": "interactive one to a non-interactive protocol and",
    "start": "793040",
    "end": "798160"
  },
  {
    "text": "the the procedure that helps us achieving that goal is called fiat chemical transform and you will hear",
    "start": "798160",
    "end": "805680"
  },
  {
    "text": "this word a lot like in any protocol in zero knowledge proof you will hear",
    "start": "805680",
    "end": "811120"
  },
  {
    "text": "the word okay let's use fiasco mere transform what it means is just",
    "start": "811120",
    "end": "816560"
  },
  {
    "text": "uh a known procedure to transform an interactive protocol to a",
    "start": "816560",
    "end": "823519"
  },
  {
    "text": "non-interactive one and it's actually pretty simple so instead of the verifier send the random",
    "start": "823519",
    "end": "831680"
  },
  {
    "text": "c to the approver the proverb just compute c it's itself using hash",
    "start": "831680",
    "end": "837279"
  },
  {
    "text": "function it has everything in the public domain",
    "start": "837279",
    "end": "843279"
  },
  {
    "text": "and everything in the public communication with between the approver and the verifier",
    "start": "843279",
    "end": "850800"
  },
  {
    "text": "and the hash function has some property that you know allows us",
    "start": "850800",
    "end": "857279"
  },
  {
    "text": "uh the approval so that the approval cannot control c because if the proof will change the input then the proof can't",
    "start": "857279",
    "end": "864560"
  },
  {
    "text": "control the output so basically if the approval can't control the input and the output at the",
    "start": "864560",
    "end": "871279"
  },
  {
    "text": "same time and you know that property is kind called random oracle model we're not",
    "start": "871279",
    "end": "877120"
  },
  {
    "text": "going to discuss this but what we've learned is okay we can",
    "start": "877120",
    "end": "883279"
  },
  {
    "text": "compute the hash of the transcript basically the public input of everything",
    "start": "883279",
    "end": "890399"
  },
  {
    "text": "and then that it will be the challenge from the verifier to the approval and it's called yesterday transform",
    "start": "890399",
    "end": "897360"
  },
  {
    "text": "okay so now we learn a concrete protocol now i will show you uh the general terminology that you will",
    "start": "897360",
    "end": "905120"
  },
  {
    "text": "that hopefully you will understand more when you read papers in zero knowledge proof",
    "start": "905120",
    "end": "911440"
  },
  {
    "text": "so in cryptography instead of using the word proof we use the word argument",
    "start": "911440",
    "end": "917040"
  },
  {
    "text": "so argument just mean that you know the protocol is secure based on computational assumption for instance",
    "start": "917040",
    "end": "922800"
  },
  {
    "text": "the hardness of the street log problem and",
    "start": "922800",
    "end": "927839"
  },
  {
    "text": "in general the approval wants to convey the",
    "start": "927839",
    "end": "933120"
  },
  {
    "text": "verifier that certain statement is true for instance f of x",
    "start": "933120",
    "end": "939760"
  },
  {
    "text": "and w equals to y where x is the public input w is the private input or the witness",
    "start": "939760",
    "end": "947519"
  },
  {
    "text": "and y is the supposed public output",
    "start": "947519",
    "end": "952959"
  },
  {
    "text": "in our protocol you know we have x is empty and w",
    "start": "952959",
    "end": "958160"
  },
  {
    "text": "is w and the function f of x and w is equal to w times g",
    "start": "958160",
    "end": "965199"
  },
  {
    "text": "and the proof is just r and z",
    "start": "965199",
    "end": "970079"
  },
  {
    "text": "okay so so if the approval convince the verifier that it knows w then we say",
    "start": "971839",
    "end": "978079"
  },
  {
    "text": "that is an argument of knowledge i i'm just saying the same thing but in",
    "start": "978079",
    "end": "983279"
  },
  {
    "text": "in more general terms okay so and if the verifier only learns that the",
    "start": "983279",
    "end": "988880"
  },
  {
    "text": "statement is correct without learning any information about the witness then we call it zero knowledge okay",
    "start": "988880",
    "end": "995519"
  },
  {
    "text": "and uh there there will be more a few more terminology not stand for",
    "start": "995519",
    "end": "1001720"
  },
  {
    "text": "non-interactive argument of knowledge and snark is succinct",
    "start": "1001720",
    "end": "1007440"
  },
  {
    "text": "not it is exactly the same it's not but it's the proof is short and sometimes there's",
    "start": "1007440",
    "end": "1013040"
  },
  {
    "text": "some requirement for the verifier to to be fast and zika snark is their knowledge stock",
    "start": "1013040",
    "end": "1020879"
  },
  {
    "text": "now we will talk about a snack software system you know like for nowadays zero",
    "start": "1021360",
    "end": "1026880"
  },
  {
    "text": "knowledge proof can uh can prove arbitrary computations so it's not just you know concrete statement like uh",
    "start": "1026880",
    "end": "1034720"
  },
  {
    "text": "like small protocol it can prove arbitrary statement so it's fairly complicated it's called",
    "start": "1034720",
    "end": "1041038"
  },
  {
    "text": "it consists of multiple systems so you can write zero knowledge proof in a high-level programming language and then",
    "start": "1041039",
    "end": "1047918"
  },
  {
    "text": "there will be a compiler that compiles this arithmetic circuit and then there's some transformation to polynomial and",
    "start": "1047919",
    "end": "1054960"
  },
  {
    "text": "then the snark or zika scenario will work on polynomial equations",
    "start": "1054960",
    "end": "1061039"
  },
  {
    "text": "so you're not supposed to understand anything on this line the only important",
    "start": "1061039",
    "end": "1066799"
  },
  {
    "text": "thing that that you should remember in this slide is",
    "start": "1066799",
    "end": "1072160"
  },
  {
    "text": "it first transforms to polynomials and polynomial is is the most important thing in the",
    "start": "1072160",
    "end": "1080000"
  },
  {
    "text": "modern technology of zero knowledge proof in basically every single zero knowledge proof you have to deal with polynomials",
    "start": "1080000",
    "end": "1087679"
  },
  {
    "text": "and it's it's the solution to all things is also",
    "start": "1087679",
    "end": "1092880"
  },
  {
    "text": "polynomials you deal with it all the time and it's very amazing like why such",
    "start": "1092880",
    "end": "1098160"
  },
  {
    "text": "a simple thing like polynomial is such powerful that it helps solve all kinds of issues",
    "start": "1098160",
    "end": "1104799"
  },
  {
    "text": "in zero knowledge proof i will talk briefly about circuit a little bit so so that it will help you",
    "start": "1104799",
    "end": "1111919"
  },
  {
    "text": "um understand the paper uh when you read it yourself so basically you know like the circuit",
    "start": "1111919",
    "end": "1118720"
  },
  {
    "text": "is in our case we have only the two two gate two kind of gates the",
    "start": "1118720",
    "end": "1124400"
  },
  {
    "text": "multiplication and addition so basically if uh you know like",
    "start": "1124400",
    "end": "1129440"
  },
  {
    "text": "multiplication and addition is enough to to for arbitra is to complete it means that",
    "start": "1129440",
    "end": "1136400"
  },
  {
    "text": "you can do all kind of operation just using uh addition and",
    "start": "1136400",
    "end": "1142080"
  },
  {
    "text": "multiplications so um the multiplication is called gate it has",
    "start": "1142080",
    "end": "1148400"
  },
  {
    "text": "two input the left input the right input and then it has an output right and it's a constant you can write it",
    "start": "1148400",
    "end": "1155760"
  },
  {
    "text": "okay the the output equals to the the left uh multiplied",
    "start": "1155760",
    "end": "1162400"
  },
  {
    "text": "by the right and and that's that's a constraint um but if you pay attention there",
    "start": "1162400",
    "end": "1170080"
  },
  {
    "text": "if you look at the the figure on the left hand side you can see that the",
    "start": "1170080",
    "end": "1175360"
  },
  {
    "text": "the the left input of the multiplication gate equals to the left input of the",
    "start": "1175360",
    "end": "1181760"
  },
  {
    "text": "addition gate right so and this is called a copy constraint is a different kind of constraint that",
    "start": "1181760",
    "end": "1188400"
  },
  {
    "text": "we have to enforce using polynomial all right",
    "start": "1188400",
    "end": "1193760"
  },
  {
    "text": "so we we've learned i hope that [Applause] you will remember that polynomial is the",
    "start": "1193760",
    "end": "1199919"
  },
  {
    "text": "most important thing in general knowledge proof so now i will tell you a few a few terminology and few polynomial",
    "start": "1199919",
    "end": "1207280"
  },
  {
    "text": "tricks uh that will help you read all the papers as well so",
    "start": "1207280",
    "end": "1213520"
  },
  {
    "text": "let's talk about polymer polynomial commitment assuming that you have some polynomial ppmx",
    "start": "1213520",
    "end": "1221520"
  },
  {
    "text": "so in many uh zkp or snark uh it the protocol often consists of a",
    "start": "1221520",
    "end": "1228559"
  },
  {
    "text": "few phases the first phase is often commitment basically commit just mean that you know",
    "start": "1228559",
    "end": "1234159"
  },
  {
    "text": "like you have some value uh you commit to it so that later on you",
    "start": "1234159",
    "end": "1239360"
  },
  {
    "text": "can't change this right it's combining that probably property that you can't change later is",
    "start": "1239360",
    "end": "1245039"
  },
  {
    "text": "combining but it also has another property called hiding in a sense that",
    "start": "1245039",
    "end": "1250080"
  },
  {
    "text": "the commitment doesn't review of the value that you commuted okay",
    "start": "1250080",
    "end": "1255280"
  },
  {
    "text": "and in in a special case of polynomial commitment then we we don't commit to",
    "start": "1255280",
    "end": "1260720"
  },
  {
    "text": "value we commit to a polynomial and then in the in the later phase you",
    "start": "1260720",
    "end": "1266320"
  },
  {
    "text": "will have a proof uh such that the the evaluation of the protocol at z",
    "start": "1266320",
    "end": "1273440"
  },
  {
    "text": "equals to y okay that's that's that's called polynomial commitment",
    "start": "1273440",
    "end": "1279120"
  },
  {
    "text": "and then there is uh some cool properties um in polynomial that",
    "start": "1279120",
    "end": "1284159"
  },
  {
    "text": "that is used all the time in in zkp uh so let's say you have a polynomial",
    "start": "1284159",
    "end": "1290480"
  },
  {
    "text": "over a finite field for for people who don't know what finite field is find if you you can",
    "start": "1290480",
    "end": "1296000"
  },
  {
    "text": "think of it modulo or prime number and uh a polynomial of the degree d",
    "start": "1296000",
    "end": "1303360"
  },
  {
    "text": "has at most d root right it doesn't have more than negative that's very basic uh",
    "start": "1303360",
    "end": "1309039"
  },
  {
    "text": "uh in in the math book um and typically you know when people",
    "start": "1309039",
    "end": "1314320"
  },
  {
    "text": "talking about you know two polynomials equal to each other then basically you know their",
    "start": "1314320",
    "end": "1320159"
  },
  {
    "text": "their difference is zero right is the same thing just different language okay",
    "start": "1320159",
    "end": "1325520"
  },
  {
    "text": "um but you know like how how can the approval convince the verifier that two",
    "start": "1325520",
    "end": "1331200"
  },
  {
    "text": "polynomials equal to each other by using only one challenge from the verifier so",
    "start": "1331200",
    "end": "1336320"
  },
  {
    "text": "the way it works is to verify you know send a random z uh to the approver and if the verifier",
    "start": "1336320",
    "end": "1343679"
  },
  {
    "text": "is convinced that p of z equal to zero",
    "start": "1343679",
    "end": "1349440"
  },
  {
    "text": "then then the verifier knows that f of x equal to g of x would have probability",
    "start": "1349440",
    "end": "1358159"
  },
  {
    "text": "why because you know the the polynomial p of x has at most d root",
    "start": "1358159",
    "end": "1364720"
  },
  {
    "text": "and if you send a a very huge number z the chance that z is one of the root is",
    "start": "1364720",
    "end": "1370720"
  },
  {
    "text": "in negligible right so so if if the evaluation of that polynomial equals to",
    "start": "1370720",
    "end": "1377840"
  },
  {
    "text": "zero then the the verifier is convinced that oh",
    "start": "1377840",
    "end": "1383840"
  },
  {
    "text": "it's likely that two polynomials equal everywhere",
    "start": "1383840",
    "end": "1389520"
  },
  {
    "text": "okay another trick is you know is is this so the the difference between",
    "start": "1389520",
    "end": "1395840"
  },
  {
    "text": "p of x and p of z is divisible by x minus z what it means",
    "start": "1395840",
    "end": "1401360"
  },
  {
    "text": "is there is another polynomial uh h of x such that h of x times x minus z equal",
    "start": "1401360",
    "end": "1408240"
  },
  {
    "text": "to p of x minus p of z and you know",
    "start": "1408240",
    "end": "1414320"
  },
  {
    "text": "here here i will give you a hint here that you know to check the multiplication relations",
    "start": "1414320",
    "end": "1420720"
  },
  {
    "text": "uh uh h of x times x minus z equal to p of",
    "start": "1420720",
    "end": "1426240"
  },
  {
    "text": "x minus p of z we can use pairing so that's exactly the reason why a pair is",
    "start": "1426240",
    "end": "1431840"
  },
  {
    "text": "used it's used to check the multiplication relations",
    "start": "1431840",
    "end": "1437840"
  },
  {
    "text": "okay so now now i can talk about the protocol itself but i won't go into detail the",
    "start": "1438000",
    "end": "1444159"
  },
  {
    "text": "the clock is very very complicated so the the plonk is just the name of the",
    "start": "1444159",
    "end": "1449360"
  },
  {
    "text": "protocol and it actually there are knowledge succinct non-interactive argument of knowledge it use fiesta",
    "start": "1449360",
    "end": "1456240"
  },
  {
    "text": "media transform to transfer to transform not",
    "start": "1456240",
    "end": "1461360"
  },
  {
    "text": "interactive protocol to a non-interactive one and it has pairing and it used polynomial commitment",
    "start": "1461360",
    "end": "1468400"
  },
  {
    "text": "basically it used everything that i've just described but the detail is",
    "start": "1468400",
    "end": "1474240"
  },
  {
    "text": "is complicated because you know it has a lot of optimization uh so that it can be deployed in",
    "start": "1474240",
    "end": "1480080"
  },
  {
    "text": "practice and it uses a lot of tricks as well so it won't have time to describe it",
    "start": "1480080",
    "end": "1486000"
  },
  {
    "text": "here okay um so so in the plonk um one special",
    "start": "1486000",
    "end": "1493039"
  },
  {
    "text": "notation is it it use pairing but the pairing actually",
    "start": "1493039",
    "end": "1498080"
  },
  {
    "text": "maps two points in two elliptic curve to a finite field",
    "start": "1498080",
    "end": "1503520"
  },
  {
    "text": "and let's say g1 is the the base pawn on the first car and g2 is the base pawn of the second curve",
    "start": "1503520",
    "end": "1510720"
  },
  {
    "text": "and plung your special notation basically x brackets one",
    "start": "1510720",
    "end": "1515840"
  },
  {
    "text": "equals to x times g one and x bracket two equal to x times g two okay",
    "start": "1515840",
    "end": "1522400"
  },
  {
    "text": "so you know as a security engineer when we look at this you know the first thing we think oh how",
    "start": "1522400",
    "end": "1528240"
  },
  {
    "text": "can i manipulate this right so basically the the the x",
    "start": "1528240",
    "end": "1533760"
  },
  {
    "text": "given x times g one the attacker doesn't know x because they",
    "start": "1533760",
    "end": "1539039"
  },
  {
    "text": "it has to break the street log problem but the attacker can manipulate it value",
    "start": "1539039",
    "end": "1544640"
  },
  {
    "text": "it can modify it can modify that value and we will use this observation in the",
    "start": "1544640",
    "end": "1550320"
  },
  {
    "text": "attack as well okay so here here is the block verifier you",
    "start": "1550320",
    "end": "1556159"
  },
  {
    "text": "know look at the equations yeah i i just just give you the last equation but",
    "start": "1556159",
    "end": "1562559"
  },
  {
    "text": "there are a lot of symbols here right it looks scary and basically it computes a pairing two",
    "start": "1562559",
    "end": "1568960"
  },
  {
    "text": "pairings and it check whether the result equals to one",
    "start": "1568960",
    "end": "1574960"
  },
  {
    "text": "and you know as an attacker you know when we look at this the first question is hey which parameters that attacker",
    "start": "1574960",
    "end": "1581919"
  },
  {
    "text": "can manipulate and which what is the least effort to manipulate parameters",
    "start": "1581919",
    "end": "1587279"
  },
  {
    "text": "right because yeah we are lazy we don't want to spend all day you know",
    "start": "1587279",
    "end": "1592480"
  },
  {
    "text": "uh or attack a very difficult point we want to find the weakest point",
    "start": "1592480",
    "end": "1599039"
  },
  {
    "text": "um so let me give you a little bit brief the depression of of the attacker",
    "start": "1599039",
    "end": "1605039"
  },
  {
    "text": "thoughts you know like from the theoretical point of view so so from from from the formulas then",
    "start": "1605039",
    "end": "1611600"
  },
  {
    "text": "you know like w z and w u z omega under attacker",
    "start": "1611600",
    "end": "1617120"
  },
  {
    "text": "control so but the attacker doesn't know the the value but attacker can modify it yeah so",
    "start": "1617120",
    "end": "1623600"
  },
  {
    "text": "we can use that observation later and you is the the the hash of transcript so",
    "start": "1623600",
    "end": "1630400"
  },
  {
    "text": "it's basically the fiasco must transform so it's outside of attacker control it's basically",
    "start": "1630400",
    "end": "1635919"
  },
  {
    "text": "um the tackle can't do anything about it well if there's some bug in the fiasco",
    "start": "1635919",
    "end": "1641600"
  },
  {
    "text": "transformer yes but in general no x is a secret that no one knows",
    "start": "1641600",
    "end": "1647279"
  },
  {
    "text": "in our case that even the approval and the verifier doesn't know what x is",
    "start": "1647279",
    "end": "1652480"
  },
  {
    "text": "and f you know is computed by a verify by in a very complicated process so so",
    "start": "1652480",
    "end": "1658080"
  },
  {
    "text": "we ignore it it's complicated we don't care we only want to attack the weakest point",
    "start": "1658080",
    "end": "1663840"
  },
  {
    "text": "okay so w z and w z omega are natural attack targets okay",
    "start": "1663840",
    "end": "1670960"
  },
  {
    "text": "uh you know to simply simplify the notation at just the nodes p1",
    "start": "1670960",
    "end": "1676240"
  },
  {
    "text": "is the first component of the first pairing p0 is the first component of for the",
    "start": "1676240",
    "end": "1681600"
  },
  {
    "text": "second pairing and then we want to check the the product of two pairing equals to one",
    "start": "1681600",
    "end": "1689120"
  },
  {
    "text": "okay so now is the attack so the tech is pretty simple you know the hardest part of this talk is to",
    "start": "1689120",
    "end": "1696399"
  },
  {
    "text": "understand the protocol the attack where the cell is not complicated at all so",
    "start": "1696399",
    "end": "1701679"
  },
  {
    "text": "what i did was to use you know like let's try um double z equal to zero and the",
    "start": "1701679",
    "end": "1709360"
  },
  {
    "text": "w z omega equals to zero so basically and then you know p one equal to zero plus u times zero it",
    "start": "1709360",
    "end": "1717520"
  },
  {
    "text": "equals zero right so what it means is we neutralize the row of fiesta transform",
    "start": "1717520",
    "end": "1723360"
  },
  {
    "text": "so u doesn't mean anything anymore we will have we will always have p1",
    "start": "1723360",
    "end": "1729679"
  },
  {
    "text": "equals to zero and that's amazing right because you know multiple leading uh",
    "start": "1729679",
    "end": "1735120"
  },
  {
    "text": "fiasco transform is pretty difficult but with zero points we get zero it is it's simple",
    "start": "1735120",
    "end": "1743279"
  },
  {
    "text": "and then you know the pairing of p1 with x is",
    "start": "1743279",
    "end": "1748320"
  },
  {
    "text": "one because the pairing of zero with anything is is 1 okay",
    "start": "1748320",
    "end": "1753919"
  },
  {
    "text": "but if you plug in p0 you will see that oh we simplified it",
    "start": "1753919",
    "end": "1760640"
  },
  {
    "text": "yeah we simplify it and then the end result is f1 minus e",
    "start": "1760640",
    "end": "1766399"
  },
  {
    "text": "but it's not it's not zero unfortunately yeah so the pairing is not one so the",
    "start": "1766399",
    "end": "1772960"
  },
  {
    "text": "equation doesn't hold right so okay so",
    "start": "1772960",
    "end": "1778480"
  },
  {
    "text": "the question does the attack work and the answer no it doesn't work",
    "start": "1778480",
    "end": "1784640"
  },
  {
    "text": "in theory only if practice is a different story okay",
    "start": "1784640",
    "end": "1791200"
  },
  {
    "text": "so in practice um you know when i look at this uh",
    "start": "1791440",
    "end": "1797039"
  },
  {
    "text": "i i you know i i think like theory is cool but i don't",
    "start": "1797039",
    "end": "1802720"
  },
  {
    "text": "really believe in theory right uh i have to try it out so i just send zero",
    "start": "1802720",
    "end": "1810480"
  },
  {
    "text": "zero to the verifier and see what happens and the verify compute the products of",
    "start": "1810480",
    "end": "1816240"
  },
  {
    "text": "two pairing and it's one and they accept the proof this is amazing i i was so surprised",
    "start": "1816240",
    "end": "1824159"
  },
  {
    "text": "and then you know like um before talking about why it happened i",
    "start": "1824159",
    "end": "1830720"
  },
  {
    "text": "want to talk about the consequence first so the consequences the approval can force proof for any incorrect statement",
    "start": "1830720",
    "end": "1838880"
  },
  {
    "text": "that that's that's really critical the second consequence is even if the proofer doesn't know",
    "start": "1838880",
    "end": "1844799"
  },
  {
    "text": "anything about the private or the witness uh the the verifier is convinced that",
    "start": "1844799",
    "end": "1851039"
  },
  {
    "text": "the prover actually knows the witness yeah so so so this this this attack is",
    "start": "1851039",
    "end": "1858799"
  },
  {
    "text": "devastating basically it it caused the xeno zero knowledge proof",
    "start": "1858799",
    "end": "1864799"
  },
  {
    "text": "becomes useless okay so",
    "start": "1864799",
    "end": "1869840"
  },
  {
    "text": "when when i dig into it uh i i found out that it actually falls",
    "start": "1869840",
    "end": "1875760"
  },
  {
    "text": "through a chain of perfectly aligned software cracks that i never seen in my life although i i've been doing",
    "start": "1875760",
    "end": "1882720"
  },
  {
    "text": "you know crypt analysis for a long time and uh i i will show you like how it",
    "start": "1882720",
    "end": "1888080"
  },
  {
    "text": "actually works uh before i continue i have to to talk a",
    "start": "1888080",
    "end": "1894240"
  },
  {
    "text": "little bit about you know different a little bit more details on implementation because now we're talking",
    "start": "1894240",
    "end": "1899360"
  },
  {
    "text": "about code vulnerabilities so you know like the first one is on elliptical",
    "start": "1899360",
    "end": "1906320"
  },
  {
    "text": "points has different representation depends on on on at what stage you're processing it so",
    "start": "1906320",
    "end": "1913679"
  },
  {
    "text": "you know the the the first one is by array right when you send a point on on",
    "start": "1913679",
    "end": "1918799"
  },
  {
    "text": "the while you saw it it's just by array and you know in some other when you",
    "start": "1918799",
    "end": "1925039"
  },
  {
    "text": "actually process this then it may be in the if i find coordinate basically it",
    "start": "1925039",
    "end": "1930159"
  },
  {
    "text": "has x and y coordinate but sometimes you know for optimization purpose people actually use protective",
    "start": "1930159",
    "end": "1936399"
  },
  {
    "text": "coordinate and uh in it x y and z",
    "start": "1936399",
    "end": "1942559"
  },
  {
    "text": "um okay so the attack so what what what what is the attack",
    "start": "1942559",
    "end": "1948960"
  },
  {
    "text": "uh in in a concrete term so what i did was really simple i i actually",
    "start": "1948960",
    "end": "1955519"
  },
  {
    "text": "it's not a really infinity point or anything i actually sent a zero byte so everything is zero there there is no",
    "start": "1955519",
    "end": "1962880"
  },
  {
    "text": "encoding or anything it's just zero by it just it just zero out the whole array",
    "start": "1962880",
    "end": "1969120"
  },
  {
    "text": "and send it to the verifier and the verifier accepted but the root call is fairly complicated",
    "start": "1969120",
    "end": "1976720"
  },
  {
    "text": "okay so the first the first the fourth vulnerabilities right so the first thing to verify i always does is to check",
    "start": "1976720",
    "end": "1982720"
  },
  {
    "text": "whether the point is on the curve it's kind of like basic stuff and then this zero point doesn't satisfy",
    "start": "1982720",
    "end": "1987760"
  },
  {
    "text": "any equation so it's not on a curve but the the amazing thing is the",
    "start": "1987760",
    "end": "1992960"
  },
  {
    "text": "verifier doesn't stop immediately it only excluded in some computations",
    "start": "1992960",
    "end": "1998559"
  },
  {
    "text": "but it includes in the final computation which has pairing with the allowance attack to work",
    "start": "1998559",
    "end": "2004480"
  },
  {
    "text": "so you know if the verifier stopped immediately the attack would fail but it doesn't stop",
    "start": "2004480",
    "end": "2009679"
  },
  {
    "text": "okay the second vulnerability is you know like on elliptical the author of the",
    "start": "2009679",
    "end": "2016320"
  },
  {
    "text": "code actually knows the danger of the infinitive point so the code actually check uh",
    "start": "2016320",
    "end": "2023519"
  },
  {
    "text": "where the the point is infinitive right they they have a check",
    "start": "2023519",
    "end": "2029120"
  },
  {
    "text": "so but the way it check whether it is infinitive it check the most significant bit",
    "start": "2029120",
    "end": "2034799"
  },
  {
    "text": "of the point but in our input the most significant bit is zero so it's not infinitive so it",
    "start": "2034799",
    "end": "2040720"
  },
  {
    "text": "bypass the the infinity check",
    "start": "2040720",
    "end": "2046320"
  },
  {
    "text": "okay so and then you know like in in some computation on elliptical you have to do uh",
    "start": "2046320",
    "end": "2053760"
  },
  {
    "text": "division as well uh in the finite field as well and you know like basically",
    "start": "2053760",
    "end": "2061440"
  },
  {
    "text": "uh the the inverse of the zero mod p shouldn't exist right it in theory it",
    "start": "2061440",
    "end": "2066878"
  },
  {
    "text": "doesn't exist because uh the inverse benefit of x by definition is y",
    "start": "2066879",
    "end": "2073280"
  },
  {
    "text": "such that x time y equal one mod p but there's no such y so that y times",
    "start": "2073280",
    "end": "2080000"
  },
  {
    "text": "zero equals one more p um but you know like also like the chord",
    "start": "2080000",
    "end": "2085760"
  },
  {
    "text": "use our little theorem basically to compute inverse of x it it",
    "start": "2085760",
    "end": "2092398"
  },
  {
    "text": "raised to the power of p minus one mod p and the if the code zero then zero to",
    "start": "2092399",
    "end": "2099839"
  },
  {
    "text": "the p minus one actually is actually zero so the inverse of zero is zero",
    "start": "2099839",
    "end": "2106000"
  },
  {
    "text": "so so so the the code doesn't say that oh it's wrong or anything it just is to",
    "start": "2106000",
    "end": "2112320"
  },
  {
    "text": "compute the inverse of zero and and it's output zero and it's fine it continues the computation there's no exception",
    "start": "2112320",
    "end": "2120400"
  },
  {
    "text": "uh furthermore you know like um in some of the steps um",
    "start": "2120400",
    "end": "2126000"
  },
  {
    "text": "you know sometimes you are in affine coordinates all the time you are in projectile coordinates so they they you",
    "start": "2126000",
    "end": "2132880"
  },
  {
    "text": "bash normalize and here it has another bug that it turns if one of the points is zero",
    "start": "2132880",
    "end": "2140720"
  },
  {
    "text": "then it will turn the whole array to become zero and we will show you this this is the",
    "start": "2140720",
    "end": "2146320"
  },
  {
    "text": "the the core example so if you look at this the the point p zero is not zero p one",
    "start": "2146320",
    "end": "2153119"
  },
  {
    "text": "is zero but after batch normalization everything becomes zero",
    "start": "2153119",
    "end": "2158560"
  },
  {
    "text": "right and what it means is uh in the end you have p1 and p0 is zero",
    "start": "2158560",
    "end": "2167200"
  },
  {
    "text": "here's the amazing thing uh p1 is is not on the curve and it's not infinitive so the by by definition",
    "start": "2167200",
    "end": "2174079"
  },
  {
    "text": "the pairing shouldn't equal to one but the code the pairing code actually computed and it equals to one",
    "start": "2174079",
    "end": "2181359"
  },
  {
    "text": "so so that it bypassed everything so so you know like",
    "start": "2181359",
    "end": "2186640"
  },
  {
    "text": "the the attack is so simple that they don't even bother to do a demo because you",
    "start": "2186640",
    "end": "2192079"
  },
  {
    "text": "just zero out the array and then the verifier just accept everything um",
    "start": "2192079",
    "end": "2197680"
  },
  {
    "text": "thanks for your uh attention if you have any questions please let me",
    "start": "2197680",
    "end": "2202880"
  },
  {
    "text": "know",
    "start": "2202880",
    "end": "2205880"
  },
  {
    "text": "[Music]",
    "start": "2212820",
    "end": "2215909"
  }
]