[
  {
    "text": "doing texts not not the good ones but the bad ones they're like oh string copy is bad do a grab for string copy and",
    "start": "9559",
    "end": "16139"
  },
  {
    "text": "replace all string copies with SDR and copy will make you safer um it seems that the general focus in",
    "start": "16139",
    "end": "22800"
  },
  {
    "text": "most cold audits is to focus on known to be problematic Library calls and replace those with safe variants which",
    "start": "22800",
    "end": "29099"
  },
  {
    "text": "completely ignores the fact that there's a lot of memory copying Loops just about everywhere and if you look at the recent bugs that",
    "start": "29099",
    "end": "36059"
  },
  {
    "text": "came out in Microsoft products almost all of them were in some way related to a loop messenger dcom workstation and so",
    "start": "36059",
    "end": "43620"
  },
  {
    "text": "on um so well we need some way of detecting Loops",
    "start": "43620",
    "end": "51300"
  },
  {
    "text": "automatically in binaries because they're not that easy to detect some of you might say that Loops are so 1998",
    "start": "51300",
    "end": "57719"
  },
  {
    "text": "because the most major open source packages Loops were audited quite heavily during that time four loops with",
    "start": "57719",
    "end": "64260"
  },
  {
    "text": "off by ones and what not but um seems nobody's auditing closed source",
    "start": "64260",
    "end": "69540"
  },
  {
    "text": "and thus we can still find lots of them everywhere um the main problem in binaries is our",
    "start": "69540",
    "end": "76260"
  },
  {
    "text": "human brain is not exactly built to like spot a loop in a flow graph or function",
    "start": "76260",
    "end": "81680"
  },
  {
    "text": "I challenge anyone in the audience to spot Loops in this graph like manually with your brain good luck",
    "start": "81680",
    "end": "89100"
  },
  {
    "text": "um you just can't your brain is not built this way that's why there's compiler",
    "start": "89100",
    "end": "94140"
  },
  {
    "text": "textbooks and compiler textbooks tell you something about dominated trees dominated trees are used when you build",
    "start": "94140",
    "end": "101520"
  },
  {
    "text": "compilers to detect loops and flow graphs um a very very simple thing about the",
    "start": "101520",
    "end": "107100"
  },
  {
    "text": "well the the simple definition of a dominator is that well if all paths to a",
    "start": "107100",
    "end": "113579"
  },
  {
    "text": "certain node for example node a it pass through the entry node the entry node dominates node",
    "start": "113579",
    "end": "119880"
  },
  {
    "text": "a if all paths two notes B go through node a a dominates B so in this example",
    "start": "119880",
    "end": "126479"
  },
  {
    "text": "here node a is dominated by entry and node B is dominated by both entry and a",
    "start": "126479",
    "end": "132780"
  },
  {
    "text": "whereas in this example node B is dominated by entry but not by",
    "start": "132780",
    "end": "137819"
  },
  {
    "text": "a because it has a path from entry to B which does not go through a",
    "start": "137819",
    "end": "143099"
  },
  {
    "text": "no once you go through a graph and you generate all these dominated relationships you can detect Loops relatively easily because",
    "start": "143099",
    "end": "150239"
  },
  {
    "text": "if you have a node that links to a node like links downwards has an error going",
    "start": "150239",
    "end": "155940"
  },
  {
    "text": "to a node but it is being dominated by you have a loop because every Power to",
    "start": "155940",
    "end": "161099"
  },
  {
    "text": "this node B goes through this node that is being like that it is being dominated by and links to which implies that if",
    "start": "161099",
    "end": "168180"
  },
  {
    "text": "all paths paths to the node which links downwards go to the note which is linked",
    "start": "168180",
    "end": "174420"
  },
  {
    "text": "to there must be a path from the node that is linked to to the node that links downward so we have a loop",
    "start": "174420",
    "end": "180900"
  },
  {
    "text": "um was that even remotely clear it's um really really simple if you make",
    "start": "180900",
    "end": "187140"
  },
  {
    "text": "yourself a small drawing on a piece of paper and um it is quite quite obvious once you",
    "start": "187140",
    "end": "192959"
  },
  {
    "text": "look at it so we can relatively easily build Dominator trees to find loops and graphs",
    "start": "192959",
    "end": "200159"
  },
  {
    "text": "and then highlight them in the appropriate manner I've built a small iea plugin that generates a flow graph",
    "start": "200159",
    "end": "205920"
  },
  {
    "text": "which has all the relevant Loops highlighted so you know previous example well this",
    "start": "205920",
    "end": "212040"
  },
  {
    "text": "is actually the same graph like for the same function this is the rock without the loop colorization",
    "start": "212040",
    "end": "217680"
  },
  {
    "text": "and this is the graph with root colorization um all the entry nodes to a loop are colored in green and all the end nodes",
    "start": "217680",
    "end": "224400"
  },
  {
    "text": "to a loop are colored in red which means the red nodes are the last node in the",
    "start": "224400",
    "end": "229620"
  },
  {
    "text": "loop before it links back to the entry node so all the red nodes link to the entry",
    "start": "229620",
    "end": "234959"
  },
  {
    "text": "note but can be reached from the entry node as well which is what uh all the stominator bubbling was all about so",
    "start": "234959",
    "end": "243180"
  },
  {
    "text": "um but we see now that we would not have found these Loops by just staring at the graph so computers are good for",
    "start": "243180",
    "end": "250680"
  },
  {
    "text": "something no not all Loops are all that interesting to us if you just go through",
    "start": "250680",
    "end": "256560"
  },
  {
    "text": "an average application and dump out all groups that are present in it you get a few hundreds or perhaps of thousands and",
    "start": "256560",
    "end": "262740"
  },
  {
    "text": "most of them are of zero significance to any one of us like the of no",
    "start": "262740",
    "end": "268320"
  },
  {
    "text": "significance to security at all um we're looking for very very specific",
    "start": "268320",
    "end": "273419"
  },
  {
    "text": "very very specific sort of loop for example we don't care about loops that do not write to memory our objective is",
    "start": "273419",
    "end": "279660"
  },
  {
    "text": "to corrupt memory if something is not writing to memory it can't corrupt memory thus the loop will not be interesting if it doesn't write",
    "start": "279660",
    "end": "286560"
  },
  {
    "text": "um secondly a loop that writes a welding well a well-defined number well to a",
    "start": "286560",
    "end": "293400"
  },
  {
    "text": "well-defined location on every iteration meaning you have a loop that constantly rides into the same local variable",
    "start": "293400",
    "end": "299759"
  },
  {
    "text": "that is definitely not going to overflow because the location will be the same on every Loop iteration",
    "start": "299759",
    "end": "304860"
  },
  {
    "text": "so if you have a loop that always writes to the same location no matter how often iterates this is obviously not a loop",
    "start": "304860",
    "end": "310740"
  },
  {
    "text": "that copy memory copies memory and thus it is not interesting to us so um",
    "start": "310740",
    "end": "316440"
  },
  {
    "text": "we will try to solve those ones sort out those ones as well",
    "start": "316440",
    "end": "321600"
  },
  {
    "text": "um and the third category which is not interesting because is memory copying Loops that iterate a statically defined",
    "start": "321600",
    "end": "327360"
  },
  {
    "text": "number of times for example if you duplicate a structure by using a mem copy with the size of the structure as",
    "start": "327360",
    "end": "333479"
  },
  {
    "text": "the length parameter you're copying in a memory copying Loop but there's no way that an attacker can",
    "start": "333479",
    "end": "340139"
  },
  {
    "text": "make this overflow so if the number of iterations the loop is taking is defined statically then",
    "start": "340139",
    "end": "347880"
  },
  {
    "text": "every like just reaching this code path would already like trigger the bug there",
    "start": "347880",
    "end": "353100"
  },
  {
    "text": "would be no functionality in the first place that's quite unlikely that well not completely but it's relatively",
    "start": "353100",
    "end": "358680"
  },
  {
    "text": "unlikely but a private ship to where basic functionality already leads to a crash without user the user being",
    "start": "358680",
    "end": "365160"
  },
  {
    "text": "malicious so we want to eliminate eliminate all the loops that do not write to memory you want to eliminate",
    "start": "365160",
    "end": "372240"
  },
  {
    "text": "all the loops that right to the same location of every iteration and then we want to eliminate all the loops that",
    "start": "372240",
    "end": "377699"
  },
  {
    "text": "write a statically defined number of bytes so",
    "start": "377699",
    "end": "383880"
  },
  {
    "text": "um the code which we're examining is translated to an intermediate assembly level language I spoke about this uh a few blackheads",
    "start": "383880",
    "end": "391560"
  },
  {
    "text": "ago in Amsterdam basically it's a simplified or not simplified it's a",
    "start": "391560",
    "end": "397139"
  },
  {
    "text": "beautiful risk machine which has um explicit memory access which means",
    "start": "397139",
    "end": "402720"
  },
  {
    "text": "there's no such thing as ADD to memory location there's only such thing as load",
    "start": "402720",
    "end": "408120"
  },
  {
    "text": "from memory location and to register store to memory location which means all memory access is explicit which means it",
    "start": "408120",
    "end": "415020"
  },
  {
    "text": "is relatively easy for us to determine whether a loop is writing to memory or not secondly all implicit Loops like repeat",
    "start": "415020",
    "end": "422340"
  },
  {
    "text": "move St or whatever all the craziness that x86 has has been abstracted away into something that is a bit more sane",
    "start": "422340",
    "end": "428039"
  },
  {
    "text": "to read and we does have something like we see an inline string copy with a red move SD",
    "start": "428039",
    "end": "435660"
  },
  {
    "text": "as a loop if you look just at look at the disassembly or the flow graph you will not see a loop at a move SD because it's",
    "start": "435660",
    "end": "442080"
  },
  {
    "text": "just one assembly instruction but technically it is a loop so by translating the assembly code from x86",
    "start": "442080",
    "end": "449699"
  },
  {
    "text": "to an intermediate representation we get rid of all the wackiness at the lowest level and have something that we can",
    "start": "449699",
    "end": "455580"
  },
  {
    "text": "more nicely analyze so the first step is eliminating all the loops that do not write your memory",
    "start": "455580",
    "end": "463380"
  },
  {
    "text": "um well I mentioned before we have an explicit store memory instruction so if we have a loop whoa um don't worry if",
    "start": "463380",
    "end": "471599"
  },
  {
    "text": "you can't see the addresses in the top node the instructions are read the operands of blue I'll explain them in a",
    "start": "471599",
    "end": "477360"
  },
  {
    "text": "second so the the objective now is to just take a loop which we've ripped out of the binary and determine whether",
    "start": "477360",
    "end": "483120"
  },
  {
    "text": "there's any store memory instruction if we cannot find a store memory instruction this Loop does not write your memory and thus cannot corrupt",
    "start": "483120",
    "end": "489660"
  },
  {
    "text": "memory and this is not interesting um to explain the the format of those instructions a bit",
    "start": "489660",
    "end": "495780"
  },
  {
    "text": "um this is a compare instruction and we have three operands it Compares input register zero to Value zero stores the",
    "start": "495780",
    "end": "502919"
  },
  {
    "text": "result in the Flags register which with index zero branches and so on this is just a",
    "start": "502919",
    "end": "508740"
  },
  {
    "text": "regular move like store store with sign extension test Branch F0 store with",
    "start": "508740",
    "end": "515580"
  },
  {
    "text": "Sonic extension and so on what we see is the that we do not have any STM instruction here there's Str",
    "start": "515580",
    "end": "522380"
  },
  {
    "text": "which stores one register or one one value into another register but it does not access memory now this Loop is",
    "start": "522380",
    "end": "529440"
  },
  {
    "text": "obviously not interesting we can just throw it away um next problem is variable writing in",
    "start": "529440",
    "end": "537480"
  },
  {
    "text": "terms of if we have a local variable on a stack into which a value is being written for example if the counter for",
    "start": "537480",
    "end": "543779"
  },
  {
    "text": "the loop itself this is written to a local variable we will obviously have a right access in this Loop because it's",
    "start": "543779",
    "end": "549839"
  },
  {
    "text": "written through local variable on the snack but this axis will be to the same location on every Loop iteration which",
    "start": "549839",
    "end": "556860"
  },
  {
    "text": "means that well there's no way in heck this can write out of bounds it's always the same location that is within bounds",
    "start": "556860",
    "end": "563940"
  },
  {
    "text": "so we want to throw this away um if we do well if we want to determine",
    "start": "563940",
    "end": "571380"
  },
  {
    "text": "whether this Loop actually rides to the same location or every iteration or not we have to do a certain amount of data",
    "start": "571380",
    "end": "577140"
  },
  {
    "text": "flow analysis meaning we have to find out how this value here is calculated we see this writes to a certain address",
    "start": "577140",
    "end": "583440"
  },
  {
    "text": "we need to find out how is this address calculated and is it always the same on every Loop iteration for example if I",
    "start": "583440",
    "end": "590480"
  },
  {
    "text": "calculate an address as for example base pointer plus offset",
    "start": "590480",
    "end": "596279"
  },
  {
    "text": "but I know that if like the offset is hard-coded that's static and the other factor which goes into my calculation",
    "start": "596279",
    "end": "602040"
  },
  {
    "text": "for the memory access is the base pointer now in order for this this memory access to go through different",
    "start": "602040",
    "end": "607800"
  },
  {
    "text": "locations and every iteration the base pointer has to be modified somewhere in the loop so the next step would be is",
    "start": "607800",
    "end": "613980"
  },
  {
    "text": "the base pointer modified anywhere if the base point is never modified in",
    "start": "613980",
    "end": "619140"
  },
  {
    "text": "the loop or if all inputs to the calculation are not modified in the loop the memory axis will always go to the",
    "start": "619140",
    "end": "626399"
  },
  {
    "text": "same spot and thus be not interesting as a small example um we have a very very simple writing",
    "start": "626399",
    "end": "632880"
  },
  {
    "text": "Loop which stores the contents of the general register zero into the con whoops sorry",
    "start": "632880",
    "end": "641160"
  },
  {
    "text": "into the memory location pointed to by g06 then adds 4 to g06",
    "start": "641160",
    "end": "647220"
  },
  {
    "text": "subtracts one from g01 and loops as long as dr1 is not zero okay so we do know there is a memory",
    "start": "647220",
    "end": "655980"
  },
  {
    "text": "storing two location point two by g06 and if we do a small data flow analysis",
    "start": "655980",
    "end": "662519"
  },
  {
    "text": "we get a graph like this this graph basically just tells us that well here's the memory store we're storing to",
    "start": "662519",
    "end": "669120"
  },
  {
    "text": "g06 and the value which well which is being stored to the pointer duplication we're",
    "start": "669120",
    "end": "675660"
  },
  {
    "text": "storing two is in go6 and for these three instructions as well so this data for graph basically tells",
    "start": "675660",
    "end": "682620"
  },
  {
    "text": "us where are all the input values for the memory store in this Loop",
    "start": "682620",
    "end": "689459"
  },
  {
    "text": "and as we can see they are in just in g06 there's no big moving around of of",
    "start": "689459",
    "end": "694500"
  },
  {
    "text": "the well values going into the calculation and we can see that there is one",
    "start": "694500",
    "end": "699899"
  },
  {
    "text": "instruction here that modifies geo6 so if we see that there's instruction modifying the inputs to our memory",
    "start": "699899",
    "end": "706620"
  },
  {
    "text": "calculation in the loop we know that this Loop is not writing through the same location on every iteration so we",
    "start": "706620",
    "end": "712200"
  },
  {
    "text": "do not throw this one out whereas we would have thrown it out if g06 would have not been modified",
    "start": "712200",
    "end": "718820"
  },
  {
    "text": "um if we look at this Loop in comparison we have one memory access down here",
    "start": "720060",
    "end": "726540"
  },
  {
    "text": "store memory the contents of the general register 0 are being stored",
    "start": "726540",
    "end": "732180"
  },
  {
    "text": "at the address pointed to by t3c and t3c is calculated here right above",
    "start": "732180",
    "end": "740820"
  },
  {
    "text": "width where's my cursor okay right here by adding 5dc to the frame pointer",
    "start": "740820",
    "end": "748740"
  },
  {
    "text": "so all the inputs to this calculation of this address here are frame pointer and",
    "start": "748740",
    "end": "753779"
  },
  {
    "text": "the hard-coded offset now this implies that if the frame point is not manipulated in this Loop",
    "start": "753779",
    "end": "759480"
  },
  {
    "text": "this will always go to the same location okay we see that the frame pointer",
    "start": "759480",
    "end": "764760"
  },
  {
    "text": "is not Target of any other instruction as the the underlying Assembly Language",
    "start": "764760",
    "end": "771600"
  },
  {
    "text": "always has the modified register in the third operands we now know that the frame point is not",
    "start": "771600",
    "end": "777600"
  },
  {
    "text": "being modified so this Loop would be flown away as not interesting because we are always writing to the same location",
    "start": "777600",
    "end": "783000"
  },
  {
    "text": "in this case the local variable at frame pointer plus 5 DC",
    "start": "783000",
    "end": "789000"
  },
  {
    "text": "all right um so what we can do now is we can find",
    "start": "789000",
    "end": "796560"
  },
  {
    "text": "all Loops throw those that are well but never right to memory and then throw out",
    "start": "796560",
    "end": "801720"
  },
  {
    "text": "those that right to the same location on every iteration of the loop the next step is to throw out those that",
    "start": "801720",
    "end": "807959"
  },
  {
    "text": "iterate a statically defined number of times so um for this we need to",
    "start": "807959",
    "end": "814260"
  },
  {
    "text": "well find what the counter of the loop is obviously if you cannot find a",
    "start": "814260",
    "end": "819660"
  },
  {
    "text": "counter in the loop because the loop is dependent on user data that Loop will be dangerous by default",
    "start": "819660",
    "end": "825360"
  },
  {
    "text": "so any dangerous Loop has the color well every any every safe Loop has a counter",
    "start": "825360",
    "end": "830639"
  },
  {
    "text": "if you can't find a counter just mark it as dangerous straight away do not throw it away if you can find a counter like a",
    "start": "830639",
    "end": "837300"
  },
  {
    "text": "counting variable you have to do data for analysis to see what the initial value was when you entered the loop",
    "start": "837300",
    "end": "842579"
  },
  {
    "text": "if you look at this we have a small Loop down there in green",
    "start": "842579",
    "end": "847800"
  },
  {
    "text": "which will iterate go1 times as we can see down here the the condition to iterate is as long as",
    "start": "847800",
    "end": "854279"
  },
  {
    "text": "the result of the last arithmetic instruction does not indicate that it was Zero so jio1 will be subtracted one",
    "start": "854279",
    "end": "862560"
  },
  {
    "text": "on every iteration of the loop this implies that this can iterate a maximum number of go1 times",
    "start": "862560",
    "end": "869760"
  },
  {
    "text": "um the the point is at this point that if the loop is too complex for simple heuristics to understand it has to be",
    "start": "869760",
    "end": "877079"
  },
  {
    "text": "well it is marked as dangerous by default we're just trying to eliminate those ones which we can",
    "start": "877079",
    "end": "882720"
  },
  {
    "text": "can eliminate because it's verified if you if you show this to a computer science Professor or",
    "start": "882720",
    "end": "888360"
  },
  {
    "text": "whatever he'll say well in the general case you can't find a counter well yes but we can throw away those cases where",
    "start": "888360",
    "end": "895680"
  },
  {
    "text": "we can find a counter and just look at those but we can't and odds are that those where we can find the counter are",
    "start": "895680",
    "end": "900959"
  },
  {
    "text": "not that dangerous after after all so we find find the counter and we do an inverse data flow analysis to find out",
    "start": "900959",
    "end": "906480"
  },
  {
    "text": "where the count is coming from on the counter in this case g01 whoa",
    "start": "906480",
    "end": "913639"
  },
  {
    "text": "Joe one is coming from this node we see G1 is here",
    "start": "913680",
    "end": "919680"
  },
  {
    "text": "never gets modified in the loop itself except for the decreasing at the end it gets assigned the value of the temporary",
    "start": "919680",
    "end": "925860"
  },
  {
    "text": "register T2 up here and T2 is loaded with 10 hex up here",
    "start": "925860",
    "end": "933420"
  },
  {
    "text": "so we see this Loop iterates 10 times which means a static slightly defined",
    "start": "933420",
    "end": "939000"
  },
  {
    "text": "number of times which means we're just going to throw it out assuming that somebody that or something that iterates",
    "start": "939000",
    "end": "944339"
  },
  {
    "text": "a static number of times for well all possible inputs is not going to overflow buffer which might be an unreasonable",
    "start": "944339",
    "end": "950519"
  },
  {
    "text": "assumption but if this product has undergone testing and this code path has been traveled before then there should",
    "start": "950519",
    "end": "956339"
  },
  {
    "text": "not be such a thing as a memory copying Loop that crops memory and iterates a",
    "start": "956339",
    "end": "961380"
  },
  {
    "text": "defined number of iterations assault to summarize all this",
    "start": "961380",
    "end": "967320"
  },
  {
    "text": "interesting Loops interesting Loops right to dynamically calculated addresses and iterate a dynamically",
    "start": "967320",
    "end": "974579"
  },
  {
    "text": "calculated number of times um we can scan multi-megabyte boundaries and upload a few dozen Loops to look at",
    "start": "974579",
    "end": "982040"
  },
  {
    "text": "with a few dozen I include numbers like 110.",
    "start": "982040",
    "end": "987600"
  },
  {
    "text": "like it can go in the three digits but usually it does not go far beyond like 100 200 Loops which you'll find which",
    "start": "987600",
    "end": "993959"
  },
  {
    "text": "are interesting and you can actually sift through all those Loops in pretty much a day or two",
    "start": "993959",
    "end": "999300"
  },
  {
    "text": "so you can go through a large binary and look at all memory copying Loops in two days which is something that was completely",
    "start": "999300",
    "end": "1004940"
  },
  {
    "text": "possibly beforehand I would think and those interesting Loops will all copy memory will all iterate an",
    "start": "1004940",
    "end": "1011300"
  },
  {
    "text": "undefined number of times and um",
    "start": "1011300",
    "end": "1016000"
  },
  {
    "text": "I just got confused on my own slide oh yeah um those things down here are",
    "start": "1017440",
    "end": "1022579"
  },
  {
    "text": "not bullet points to help me speak there are actually explanations concerning the loop on the left um",
    "start": "1022579",
    "end": "1028459"
  },
  {
    "text": "let's just ignore whatever is down here um so the interesting Loops if you'll find they'll copy memory and they will",
    "start": "1028459",
    "end": "1035360"
  },
  {
    "text": "write well iterate an undefined number of times and that should be enough for us to",
    "start": "1035360",
    "end": "1040520"
  },
  {
    "text": "justify looking at them for a few minutes are there any questions concerning this so far",
    "start": "1040520",
    "end": "1047558"
  },
  {
    "text": "all right on to the more fun part function signatures function signatures and what they're",
    "start": "1049040",
    "end": "1054980"
  },
  {
    "text": "good for when you deal with disassemblies functions do not normally have names unless somebody is kind enough to",
    "start": "1054980",
    "end": "1060500"
  },
  {
    "text": "provide you with debug information whether voluntarily or involuntarily is a question but",
    "start": "1060500",
    "end": "1066440"
  },
  {
    "text": "um the main point is that function signatures allow you to retrieve function names for known functions which",
    "start": "1066440",
    "end": "1072919"
  },
  {
    "text": "means if you have a binary you don't want to identify every string copy every malloc or the library functions yourself",
    "start": "1072919",
    "end": "1078440"
  },
  {
    "text": "you really don't want to spend the time on every binary because it's the same code you know well you should know what",
    "start": "1078440",
    "end": "1083539"
  },
  {
    "text": "to do what it does and you really don't want to focus on reconstructing Microsoft Visual C's runtime Lipsy or",
    "start": "1083539",
    "end": "1091280"
  },
  {
    "text": "the the statically limp part of the NPC every time you take apart a Trojan so this function signatures to find known",
    "start": "1091280",
    "end": "1097520"
  },
  {
    "text": "functions and binaries and um well so far they're mainly used to recognize",
    "start": "1097520",
    "end": "1104000"
  },
  {
    "text": "statically linked lipsies but they can be used for a lot more",
    "start": "1104000",
    "end": "1109160"
  },
  {
    "text": "um the the current application for them is finding mallocs and string copies and",
    "start": "1109160",
    "end": "1114620"
  },
  {
    "text": "if any one of you has ever used Ida before it had the library recognition engine in the days where you still have",
    "start": "1114620",
    "end": "1120919"
  },
  {
    "text": "to find printer and string copy and so on by yourself I think you remember how glad you were",
    "start": "1120919",
    "end": "1126200"
  },
  {
    "text": "when iea had a flush or flare Library recognition engine um what else a signature is good for",
    "start": "1126200",
    "end": "1133039"
  },
  {
    "text": "if you have good signatures you can do a lot more than just recognize string copies and mallocs you can start porting",
    "start": "1133039",
    "end": "1138140"
  },
  {
    "text": "information from one version of your disassembly to the next one um I really well I I I've been this is",
    "start": "1138140",
    "end": "1145160"
  },
  {
    "text": "something for quite a while now and oftentimes you have a disassembly for an old version of a product like for an old",
    "start": "1145160",
    "end": "1151160"
  },
  {
    "text": "really old version version of checkpoint and you spent a few weeks in there and you commented many functions you created a lot of function names and so on and",
    "start": "1151160",
    "end": "1157580"
  },
  {
    "text": "then you get a new version and in theory you'd have to redo all this work you had to recreate all the names and so on so",
    "start": "1157580",
    "end": "1164120"
  },
  {
    "text": "what you can do with function signatures is Port the information from an old disassembly to a new version",
    "start": "1164120",
    "end": "1170179"
  },
  {
    "text": "um the other option was the other thing which you can do with with good function signatures is you can scan binaries for",
    "start": "1170179",
    "end": "1176299"
  },
  {
    "text": "known to be vulnerable versions of libraries like zlip so I could when the next zealer bar comes out I take my",
    "start": "1176299",
    "end": "1183679"
  },
  {
    "text": "large cheap hard drive and scan all sorts of commercial applications for a broken version of zlip or opensso",
    "start": "1183679",
    "end": "1191780"
  },
  {
    "text": "which is like everywhere um well the next implication would be",
    "start": "1191780",
    "end": "1197179"
  },
  {
    "text": "finding GPL code in commercial applications which are closed source",
    "start": "1197179",
    "end": "1202820"
  },
  {
    "text": "that would be another fun application another really useful thing is if we can",
    "start": "1202820",
    "end": "1208280"
  },
  {
    "text": "Port the function names which we created ourselves we might as well or we might be able to import the debug info which",
    "start": "1208280",
    "end": "1213620"
  },
  {
    "text": "your vendor has provided for about one version to the next one so um many vendors tend to leave debug",
    "start": "1213620",
    "end": "1219260"
  },
  {
    "text": "information in their product at one point in the product's life cycle accidentally checkpoint has old versions",
    "start": "1219260",
    "end": "1224900"
  },
  {
    "text": "floating around with full debug info Nai once really really sniffer Pro with full debug info Microsoft gives you the full",
    "start": "1224900",
    "end": "1231860"
  },
  {
    "text": "debug info on all service packs but not for hot fixes so it's quite reasonable that you use well to assume that for",
    "start": "1231860",
    "end": "1238940"
  },
  {
    "text": "most closed Source applications there's some version out there which accidentally had debug info in there and",
    "start": "1238940",
    "end": "1245000"
  },
  {
    "text": "if you can Port those this information to the new version you can save ourselves a lot of time reading the disassembly to create all those names",
    "start": "1245000",
    "end": "1252679"
  },
  {
    "text": "um the most interesting interesting thing which you can do with these function signatures is reverse engineering binary patches for",
    "start": "1252679",
    "end": "1259780"
  },
  {
    "text": "executables Dr Greer said something this morning at the time from the publication",
    "start": "1259780",
    "end": "1264860"
  },
  {
    "text": "of a security patch to the exploit is shrinking and well with a good binary",
    "start": "1264860",
    "end": "1270080"
  },
  {
    "text": "gift tool that is very much true because about three to four hours after you have the binary you know what the bug is and",
    "start": "1270080",
    "end": "1276200"
  },
  {
    "text": "about a day later you'll be able to like exploit it which puts you into a nice position that if you want to really hack",
    "start": "1276200",
    "end": "1281660"
  },
  {
    "text": "a network and you know they're fairly good about patching like about 24 hours after the purchase out they will be",
    "start": "1281660",
    "end": "1286820"
  },
  {
    "text": "patched 24 hours is plenty you've got 12 hours to play around so um",
    "start": "1286820",
    "end": "1293799"
  },
  {
    "text": "all right now what is the usual approach to function signatures um most approaches so far deal mostly",
    "start": "1294080",
    "end": "1301520"
  },
  {
    "text": "with pattern matching with wild cards where they generate some binary pattern and try to well remove all the compiler",
    "start": "1301520",
    "end": "1308000"
  },
  {
    "text": "weakness by introducing wildcards um IDs Library recognition system works",
    "start": "1308000",
    "end": "1313280"
  },
  {
    "text": "by by doing this having um well a signature and then they take into account some aspects of the stack",
    "start": "1313280",
    "end": "1319760"
  },
  {
    "text": "frame as well of the size of the stack frame and so on the problem with this is that if Ida itself is confused and the stack frame",
    "start": "1319760",
    "end": "1326000"
  },
  {
    "text": "is broken in terms of idea has not reconstructed the full stack frame then obviously the signature will be broken",
    "start": "1326000",
    "end": "1331880"
  },
  {
    "text": "and you can't Port names um Michael zaletsky has written some",
    "start": "1331880",
    "end": "1336919"
  },
  {
    "text": "sort of signature system for penrith which I think is pattern based as well I don't know though I have never looked at it so there is a few approaches but they",
    "start": "1336919",
    "end": "1344900"
  },
  {
    "text": "are in this well in the sense for that if the compiler does things really",
    "start": "1344900",
    "end": "1350059"
  },
  {
    "text": "strangely if there is massive changes they can't really cope",
    "start": "1350059",
    "end": "1355780"
  },
  {
    "text": "um the main problem these days is that a small change in the source file can lead to significant changes in the in the",
    "start": "1355880",
    "end": "1361700"
  },
  {
    "text": "executable first of all if I change something somewhere in the binary and the",
    "start": "1361700",
    "end": "1367520"
  },
  {
    "text": "compilers decides to allocate registers differently I'll have a change propagate to the entire function and well the",
    "start": "1367520",
    "end": "1374179"
  },
  {
    "text": "instructions just won't be the same and thus the well binary signature will not be the same",
    "start": "1374179",
    "end": "1379280"
  },
  {
    "text": "um the next thing which compilers seem to really enjoy is switching Branch directions and conditions meaning in one",
    "start": "1379280",
    "end": "1384740"
  },
  {
    "text": "version of the binary you'll have a test eax jump not zero and then somewhere the",
    "start": "1384740",
    "end": "1390620"
  },
  {
    "text": "next version you'll have attach the ixca X jump zero which probably confuses things",
    "start": "1390620",
    "end": "1396260"
  },
  {
    "text": "um and if you look at the way Microsoft optimizes the the release binaries for for service packs and for four product",
    "start": "1396260",
    "end": "1402440"
  },
  {
    "text": "releases they have a really aggressive link time Optimizer which combines a whole bunch of dynamic data to to move",
    "start": "1402440",
    "end": "1409159"
  },
  {
    "text": "code around and as soon as the the well the block size has changed like the code",
    "start": "1409159",
    "end": "1414260"
  },
  {
    "text": "block sizes the control box sizes of functions your entire binary Market rearranged and nothing is even roughly",
    "start": "1414260",
    "end": "1419720"
  },
  {
    "text": "in the same space anymore so um that can get quite annoying",
    "start": "1419720",
    "end": "1425659"
  },
  {
    "text": "um well I'll do the keywords on Microsoft's link time optimization",
    "start": "1425659",
    "end": "1430760"
  },
  {
    "text": "um because well this this confuses the heck out of most or out of idea the most useful commercial disassembler",
    "start": "1430760",
    "end": "1438260"
  },
  {
    "text": "the main thing is that Microsoft basically disassembles their own executable and generates control block",
    "start": "1438260",
    "end": "1445039"
  },
  {
    "text": "information they then put breakpoints on every control block and collect statistics on how often these blocks are",
    "start": "1445039",
    "end": "1450260"
  },
  {
    "text": "hit in regular execution which means they'll get a trace of which is the code path that is normally used if no error",
    "start": "1450260",
    "end": "1456380"
  },
  {
    "text": "occurs so they can then decide okay these are the functions that we are that",
    "start": "1456380",
    "end": "1461419"
  },
  {
    "text": "we'll need on every normal use and keep then them in one block of memory and move all the error handlers and the",
    "start": "1461419",
    "end": "1467659"
  },
  {
    "text": "exceptional condition handling and all these other things to the end of the of the executable which massively improves",
    "start": "1467659",
    "end": "1473539"
  },
  {
    "text": "catering performance and well it's useful for paging as well because all the code you need will be in one page or",
    "start": "1473539",
    "end": "1480440"
  },
  {
    "text": "in two pages or three pages whereas all the error handling which will be a significant amount of code if you're coding properly will be somewhere",
    "start": "1480440",
    "end": "1487700"
  },
  {
    "text": "completely different so if you see a function Ida like this where somebody has obviously",
    "start": "1487700",
    "end": "1495620"
  },
  {
    "text": "cropped off the whoops cropped off the feet off the the",
    "start": "1495620",
    "end": "1501140"
  },
  {
    "text": "function here um well you see a victim of Microsoft's leading term optimization the normal",
    "start": "1501140",
    "end": "1507200"
  },
  {
    "text": "shape or a function would be something like this you have a single entry point it branches out to many different locations and then it all converges",
    "start": "1507200",
    "end": "1513980"
  },
  {
    "text": "again towards the end block perhaps you have multiple end blocks like two or three but in general you shouldn't have like many dead ends when you see",
    "start": "1513980",
    "end": "1520700"
  },
  {
    "text": "Microsoft's optimization you have lots of these dead ends um it confuses to the crap out of Ida",
    "start": "1520700",
    "end": "1526700"
  },
  {
    "text": "because Ida thinks that a function should always be in a consecutive bit of memory you can see this in the",
    "start": "1526700",
    "end": "1532039"
  },
  {
    "text": "navigation bar and idea occasionally where you have a bunch of well recognized functions in the beginning then some data and then a large chunk of",
    "start": "1532039",
    "end": "1539720"
  },
  {
    "text": "red function like of red code code that could not be assigned to a certain function right behind it",
    "start": "1539720",
    "end": "1546860"
  },
  {
    "text": "all right so what's the solution or to the the problems posed by the compiler doing crazy things and Microsoft doing",
    "start": "1546860",
    "end": "1552559"
  },
  {
    "text": "even crazier things it would be structural fingerprinting um the function flow graphs the the",
    "start": "1552559",
    "end": "1559340"
  },
  {
    "text": "actual logic of the function should stay the same no matter what weirdness the compiler comes up with with and whatever",
    "start": "1559340",
    "end": "1566179"
  },
  {
    "text": "weirdness the compiler does with register allocation and so on um so essentially the the problem of",
    "start": "1566179",
    "end": "1573440"
  },
  {
    "text": "finding another function which corresponds to one function is a problem of finding graph these are more physics",
    "start": "1573440",
    "end": "1578960"
  },
  {
    "text": "meaning uh or isomorphisms or whatever it's not speak for finding out what the two things are equal",
    "start": "1578960",
    "end": "1585980"
  },
  {
    "text": "um now graph isomorphisms are really expensive to compute if you have an undirected graph it's uh something like",
    "start": "1585980",
    "end": "1592880"
  },
  {
    "text": "a massively exponential problem if it's a directed graph it's still really expensive so",
    "start": "1592880",
    "end": "1598820"
  },
  {
    "text": "um I decided I'll cop out on on the hard problem and come up with some matching heuristics because quite frankly",
    "start": "1598820",
    "end": "1606740"
  },
  {
    "text": "um we do not have arbitrary graphs I would bet you that you will not find an",
    "start": "1606740",
    "end": "1612080"
  },
  {
    "text": "executable where there's any graph like a symmetric graph which is completely",
    "start": "1612080",
    "end": "1617419"
  },
  {
    "text": "symmetric in every possible path ever because writing such code that generates such a graph is probably",
    "start": "1617419",
    "end": "1623059"
  },
  {
    "text": "something which you can do for a competition but no production code will actually be symmetric so we can toss out a lot of the the",
    "start": "1623059",
    "end": "1629840"
  },
  {
    "text": "problems which would occur in theory if you try to solve this on a purely graph theoretical base and we'll use a few",
    "start": "1629840",
    "end": "1636260"
  },
  {
    "text": "heuristics we could get from the binary itself um we generate a signature for every",
    "start": "1636260",
    "end": "1641779"
  },
  {
    "text": "function combining the number of control blocks the number of links between those blocks and the number of subfunction",
    "start": "1641779",
    "end": "1647659"
  },
  {
    "text": "chords so if we have a function like this which has five control blocks over",
    "start": "1647659",
    "end": "1653840"
  },
  {
    "text": "here well we obviously have five control box and we have six links between those",
    "start": "1653840",
    "end": "1660440"
  },
  {
    "text": "functions or between those those nodes and six chords to sub function sub",
    "start": "1660440",
    "end": "1666440"
  },
  {
    "text": "functions which means the signature for this function would be five six six um obviously if the compiler does",
    "start": "1666440",
    "end": "1673220"
  },
  {
    "text": "something like fragment one node into multiple nodes with the jump between them you have to normalize that out so",
    "start": "1673220",
    "end": "1678620"
  },
  {
    "text": "jumps to the next block non-conditional jumps um should be normalized out before you",
    "start": "1678620",
    "end": "1684080"
  },
  {
    "text": "actually generate the signature which is what I'm doing but I'm not explaining here um after you have all these signatures",
    "start": "1684080",
    "end": "1691580"
  },
  {
    "text": "basically you take both binaries you generate all the signatures for all the functions",
    "start": "1691580",
    "end": "1696620"
  },
  {
    "text": "you get this big bag on the one side and the big bag on the other side now you have to find fixed points between those",
    "start": "1696620",
    "end": "1702260"
  },
  {
    "text": "two you have to find as many matches as possible now the problem is that many especially smaller functions will have the same",
    "start": "1702260",
    "end": "1708919"
  },
  {
    "text": "same signature in terms of there's not that many ways to build a function that consists of only one or only two control",
    "start": "1708919",
    "end": "1715820"
  },
  {
    "text": "blocks and if you only have two control blocks there's only going to be a maximum number of two links between the two",
    "start": "1715820",
    "end": "1721640"
  },
  {
    "text": "or if you only have one control box like a function that does return eax you might have 10 of those 10 different",
    "start": "1721640",
    "end": "1728720"
  },
  {
    "text": "functions but they all look really the same so um you can find clear unique mappings",
    "start": "1728720",
    "end": "1734480"
  },
  {
    "text": "for some functions but not fathers which means in this case we have four functions in each bag",
    "start": "1734480",
    "end": "1740799"
  },
  {
    "text": "two large functions with many nodes many links many children and two medium or",
    "start": "1740799",
    "end": "1747440"
  },
  {
    "text": "small functions which have the same signature what we can do right now before we do anything else is we can",
    "start": "1747440",
    "end": "1752480"
  },
  {
    "text": "find fixed points we can uniquely identify with the 1425 function belongs to the other 1425 because there's only",
    "start": "1752480",
    "end": "1759440"
  },
  {
    "text": "one of them there's no Collision we can be fairly sure that these are the same",
    "start": "1759440",
    "end": "1764840"
  },
  {
    "text": "secondly for the 75 94 30 function we consume that it's the same as the other",
    "start": "1764840",
    "end": "1770140"
  },
  {
    "text": "75 94 30 function all right so we have two fixed points",
    "start": "1770140",
    "end": "1775520"
  },
  {
    "text": "and we know that these two definitely correspond to each other the next step is to use information from the call tree to match the other two",
    "start": "1775520",
    "end": "1782720"
  },
  {
    "text": "because right now we can't really match which one of these two belongs to the other like which one",
    "start": "1782720",
    "end": "1789200"
  },
  {
    "text": "of the five six five belongs to each other five six five in order to do this we generate a call",
    "start": "1789200",
    "end": "1794960"
  },
  {
    "text": "tree of the entire application on both sides both the unpatched and the patch bar the the one version of the other",
    "start": "1794960",
    "end": "1800539"
  },
  {
    "text": "version and we then don't consider all like the set of all function in both boundaries",
    "start": "1800539",
    "end": "1806480"
  },
  {
    "text": "but just the subsets of functions which are directly called from a normal fixed",
    "start": "1806480",
    "end": "1812120"
  },
  {
    "text": "point which means in our example we know that 1425 is a fixed point so we just",
    "start": "1812120",
    "end": "1818840"
  },
  {
    "text": "consider those functions that are directly called from 1425. so all of a sudden we just have to",
    "start": "1818840",
    "end": "1825440"
  },
  {
    "text": "compare the set of five six five two instead of five six five there's no no",
    "start": "1825440",
    "end": "1830720"
  },
  {
    "text": "way of being confused this is direct mapping we can map five six five two five six five and fine",
    "start": "1830720",
    "end": "1837500"
  },
  {
    "text": "eliminate the last one for the other subset the subset of all",
    "start": "1837500",
    "end": "1843860"
  },
  {
    "text": "functions called from 75 94 30. and we can uniquely map those as well and but",
    "start": "1843860",
    "end": "1850100"
  },
  {
    "text": "now we're done um this works fairly well in practice",
    "start": "1850100",
    "end": "1855320"
  },
  {
    "text": "better than expected in fact we'll get to that a little bit later now what are the advantages of this method of mapping",
    "start": "1855320",
    "end": "1861200"
  },
  {
    "text": "functions first off this is tolerant to basic block reordering meaning no matter what weird convolutionist thing",
    "start": "1861200",
    "end": "1868159"
  },
  {
    "text": "Microsoft does with the binaries these signatures will stay the same and everything will work fine",
    "start": "1868159",
    "end": "1874460"
  },
  {
    "text": "um it is tolerant two differences in register assignment and it's even tolerant to certain like to all code",
    "start": "1874460",
    "end": "1879860"
  },
  {
    "text": "order optimizations which do not change the flow graph which is quite a bit um we will find all structural changes",
    "start": "1879860",
    "end": "1887480"
  },
  {
    "text": "meaning if somebody adds an if to a function like if string length is too",
    "start": "1887480",
    "end": "1892520"
  },
  {
    "text": "large please bail out we will see this what we will not see is somebody reordering functions or changing a",
    "start": "1892520",
    "end": "1898700"
  },
  {
    "text": "constant so if Microsoft decides to just change the buffer size of this this buffer to five thousand instead of two",
    "start": "1898700",
    "end": "1906140"
  },
  {
    "text": "thousands we will not be able to see this um the other disadvantage is if we can't",
    "start": "1906140",
    "end": "1912020"
  },
  {
    "text": "find cons well first off we can't find constant values like changes in constant values we can't find changes in buffer",
    "start": "1912020",
    "end": "1917960"
  },
  {
    "text": "sizes for very small functions we can't really get useful signatures meaning a function that just returns eax or",
    "start": "1917960",
    "end": "1924919"
  },
  {
    "text": "returns zero or whatever will not be very well matched we'll have a whole stack of them at the end which can't be",
    "start": "1924919",
    "end": "1930980"
  },
  {
    "text": "matched to each other um but then again the simple functions are not usually those in which many",
    "start": "1930980",
    "end": "1936740"
  },
  {
    "text": "security related bugs occur you can't get to return zero that wrong I mean it's really hard to make mistakes on",
    "start": "1936740",
    "end": "1942320"
  },
  {
    "text": "that okay so we will now start by porting",
    "start": "1942320",
    "end": "1948919"
  },
  {
    "text": "some debug information in order to do this we'll take and well the version of messenger before the security patch for",
    "start": "1948919",
    "end": "1956240"
  },
  {
    "text": "which we have debug info from Microsoft symbol server and then take the version after the Patch and for which we do not",
    "start": "1956240",
    "end": "1962120"
  },
  {
    "text": "have any debug information and Port the symbolic information between the two like from the old to the new one",
    "start": "1962120",
    "end": "1970120"
  },
  {
    "text": "um one second please all right so here we have an idea database with the unpatched version of",
    "start": "1970460",
    "end": "1977299"
  },
  {
    "text": "messenger and if we look at the function names we have all the symbols loaded message log MBE message blah blah",
    "start": "1977299",
    "end": "1985658"
  },
  {
    "text": "well I'll have to find the other instance of Ida",
    "start": "1986480",
    "end": "1991059"
  },
  {
    "text": "no okay when we disassemble the new version",
    "start": "2000039",
    "end": "2005518"
  },
  {
    "text": "all right so while this this assembly is running we go to the first version and",
    "start": "2006820",
    "end": "2012640"
  },
  {
    "text": "run the Ida plugin each other to generate and save a signature file meaning this will now go",
    "start": "2012640",
    "end": "2019000"
  },
  {
    "text": "through the entire application create flow graphs for every buyer like for every function generate a signature from",
    "start": "2019000",
    "end": "2024399"
  },
  {
    "text": "this and it'll take a few seconds okay",
    "start": "2024399",
    "end": "2030460"
  },
  {
    "text": "we then go to the other disassembly which is now finished run the plugin and apply the signature",
    "start": "2030460",
    "end": "2036519"
  },
  {
    "text": "file",
    "start": "2036519",
    "end": "2038700"
  },
  {
    "text": "okay and then we go to view results and we can see that we successfully",
    "start": "2048580",
    "end": "2054878"
  },
  {
    "text": "matched wait a second we get a window which tells us that we successfully matched all these functions",
    "start": "2054879",
    "end": "2060820"
  },
  {
    "text": "to each other meaning we now know that sub 767 blah blah blah is the same as",
    "start": "2060820",
    "end": "2065980"
  },
  {
    "text": "metric message remove session from list and we know that sub blah blah is the same as message in its support segment",
    "start": "2065980",
    "end": "2071679"
  },
  {
    "text": "whatever so what we can do now is we right click and Report the name",
    "start": "2071679",
    "end": "2077858"
  },
  {
    "text": "which changes the name in our new base database to the old one or if we're lazy and want to change all of them we just",
    "start": "2077859",
    "end": "2084760"
  },
  {
    "text": "told all names ignore the warnings and we now have to",
    "start": "2084760",
    "end": "2090398"
  },
  {
    "text": "go to the functions window whoops we need to refresh this",
    "start": "2090399",
    "end": "2095858"
  },
  {
    "text": "all the debug information which we had for the old one or next to all in the new version as well although",
    "start": "2095859",
    "end": "2101500"
  },
  {
    "text": "Microsoft does not provide us with any debug info so um that is quite a Time Saver",
    "start": "2101500",
    "end": "2107560"
  },
  {
    "text": "it works similarly when you're dealing with porting information from an old database to a new one so you just take",
    "start": "2107560",
    "end": "2112900"
  },
  {
    "text": "the old database you generate a signature open the new one port",
    "start": "2112900",
    "end": "2117900"
  },
  {
    "text": "but then again this is almost a legitimate application so it's a lot less fun than the other things you can do",
    "start": "2119020",
    "end": "2125280"
  },
  {
    "text": "patches now um I really like reading divs",
    "start": "2125280",
    "end": "2130660"
  },
  {
    "text": "seriously it's lots of fun um the the thing about open source patches is that they are visible to",
    "start": "2130660",
    "end": "2136240"
  },
  {
    "text": "everyone meaning that as soon as you publish the patch the buck class associated with this patch like integer",
    "start": "2136240",
    "end": "2142780"
  },
  {
    "text": "reps has to be assumed to be public knowledge afterwards many people regularly read CBS updates like other",
    "start": "2142780",
    "end": "2148660"
  },
  {
    "text": "people read the newspaper a friend of mine ran a mailing list where every morning it would like pull all the changes that the openbsd CBS had",
    "start": "2148660",
    "end": "2155020"
  },
  {
    "text": "undergone through like over the night and generated nice output and send it to you in the morning you just hit print",
    "start": "2155020",
    "end": "2161020"
  },
  {
    "text": "and then you have diffs with your morning coffee which is other people do crosswords diffs are kind of similar you",
    "start": "2161020",
    "end": "2166720"
  },
  {
    "text": "look at the code you see what was the mistake somebody else has gone through the hard work like finding the mistake in the first place you just need to",
    "start": "2166720",
    "end": "2173500"
  },
  {
    "text": "understand and that is not all that hard usually um since so many people read CBS updates",
    "start": "2173500",
    "end": "2179980"
  },
  {
    "text": "like other people read the newspaper security critical changes cannot easily be snuck in",
    "start": "2179980",
    "end": "2185040"
  },
  {
    "text": "the other thing is that many eyes reading the CVS in theory makes the fixed relatively throw meaning it's",
    "start": "2185040",
    "end": "2191560"
  },
  {
    "text": "really hard to up a fix and nobody will notice um the the important part is that",
    "start": "2191560",
    "end": "2197740"
  },
  {
    "text": "keeping information about debug is impossible after the Patch result which means the patch result everybody",
    "start": "2197740",
    "end": "2204579"
  },
  {
    "text": "knows what the bug is people can start writing exploits it's really hard to hide the impact of the exploit or of the",
    "start": "2204579",
    "end": "2210640"
  },
  {
    "text": "bug as well you can claim well this is not exploitable but people will either prove you wrong or not prove you wrong",
    "start": "2210640",
    "end": "2215800"
  },
  {
    "text": "wrong whatever um close those patches on the other hand are a very very different game vendors",
    "start": "2215800",
    "end": "2221740"
  },
  {
    "text": "try to hide behind the fact that they think close those patches are really hard to reverse engineer",
    "start": "2221740",
    "end": "2227320"
  },
  {
    "text": "um they want to tell they want to tell nobody really what is going on they want to just publish about bulletin telling",
    "start": "2227320",
    "end": "2233619"
  },
  {
    "text": "customers please upgrade you don't need to know why just upgrade and um they will even tell the",
    "start": "2233619",
    "end": "2239140"
  },
  {
    "text": "researchers to shut the heck up and not release any details about what the bug is until like six weeks after publication of the patch they're trying",
    "start": "2239140",
    "end": "2246280"
  },
  {
    "text": "to arm wrestle researchers to do this and there's um interestingly companies that don't do relevant research that",
    "start": "2246280",
    "end": "2252339"
  },
  {
    "text": "sign up very happily never mind okay so in general the other problem is",
    "start": "2252339",
    "end": "2259540"
  },
  {
    "text": "that vendors are not hackers meaning they really tend to underestimate bugs",
    "start": "2259540",
    "end": "2265540"
  },
  {
    "text": "um good good example is Microsoft publishing the peer-to-peer tunneling",
    "start": "2265540",
    "end": "2270579"
  },
  {
    "text": "protocol mistake which they claimed as like a remote blue screen it's a denial of service well it was a ring zero",
    "start": "2270579",
    "end": "2276940"
  },
  {
    "text": "counter level linked list over right kind of like a heap overflow where you could just execute code in ring zero two",
    "start": "2276940",
    "end": "2282099"
  },
  {
    "text": "but you can't expect them to know because that's not their job their job is to get things fixed so vendors try or will naturally because",
    "start": "2282099",
    "end": "2289839"
  },
  {
    "text": "their job is to get things fixed underestimate the impact of the bug they're like nobody's going to try to",
    "start": "2289839",
    "end": "2295540"
  },
  {
    "text": "manipulate kernel levels data structures and get this thing stable and so on so",
    "start": "2295540",
    "end": "2300760"
  },
  {
    "text": "um well it will be pushed out as a denial service but in fact it is a remote code execution bug and many",
    "start": "2300760",
    "end": "2307540"
  },
  {
    "text": "people actually believe what's in those bulletins because they think oh it's not of service we don't need to attach today it's like not that bad if the VPN Falls",
    "start": "2307540",
    "end": "2314380"
  },
  {
    "text": "over occasionally um the other thing is that they go through",
    "start": "2314380",
    "end": "2320140"
  },
  {
    "text": "really funny contortions to hide the true impact of buds in terms of um now this is an interesting example",
    "start": "2320140",
    "end": "2327760"
  },
  {
    "text": "um from the release notes of a major commercial web server you can see that there was some input where they or some",
    "start": "2327760",
    "end": "2334060"
  },
  {
    "text": "line where they said well certain malformed input can lead to disclosure of hexadecimal values from memory which",
    "start": "2334060",
    "end": "2339820"
  },
  {
    "text": "was in fact a remote common string but um so yeah there is a certain problem with",
    "start": "2339820",
    "end": "2346780"
  },
  {
    "text": "transparency when it comes to Patches the next thing is that vendors try to piggyback security updates onto other",
    "start": "2346780",
    "end": "2352900"
  },
  {
    "text": "security updates the workstation patch which Microsoft gave out was actually fixing numerous bugs",
    "start": "2352900",
    "end": "2359859"
  },
  {
    "text": "they only told you about one but there's numerous bugs in there like numerous bugs being fixed and that is something",
    "start": "2359859",
    "end": "2365500"
  },
  {
    "text": "that is hmm well one could argue it improves the overall state of security but it's like not very honest",
    "start": "2365500",
    "end": "2373060"
  },
  {
    "text": "so binary divs do have an application and um we can use the same methodology",
    "start": "2373060",
    "end": "2378820"
  },
  {
    "text": "which we used beforehand to like associate functions with each other to drift through a binary to find out what",
    "start": "2378820",
    "end": "2384280"
  },
  {
    "text": "the heck they changed we generate all the signatures we generate all the fixed points and all of those functions which",
    "start": "2384280",
    "end": "2389920"
  },
  {
    "text": "we could not match at all must have changed so what we're going to do now is we're",
    "start": "2389920",
    "end": "2395859"
  },
  {
    "text": "going to look at the ISA h323 patch and we'll see what the the binary diff",
    "start": "2395859",
    "end": "2401800"
  },
  {
    "text": "turns up so HP or 323 Philips dll and h323as and",
    "start": "2401800",
    "end": "2407680"
  },
  {
    "text": "one dll were updated in the patch um there's very little public information on on what the bug exactly",
    "start": "2407680",
    "end": "2414280"
  },
  {
    "text": "was and um if you look at the the differences between the two h323 filter",
    "start": "2414280",
    "end": "2419619"
  },
  {
    "text": "with dll files you'll see that they're almost all synchronization related it seems that some sort of of heap-like",
    "start": "2419619",
    "end": "2426520"
  },
  {
    "text": "data structure which was not synchronized and they decided that might be a bad idea in a multi-thread environment so they fixed it",
    "start": "2426520",
    "end": "2432760"
  },
  {
    "text": "um but that is not what we're looking at we're looking at something that according to the advisory can you have us execute code so we're looking at",
    "start": "2432760",
    "end": "2439380"
  },
  {
    "text": "h323as and one dll and after we run the binary diff which",
    "start": "2439380",
    "end": "2444579"
  },
  {
    "text": "I'm not going to do right now because it takes about three to four minutes um oh wait I'm really quick when it comes",
    "start": "2444579",
    "end": "2451480"
  },
  {
    "text": "to my time it seems so we might as well run it uh one second please",
    "start": "2451480",
    "end": "2459119"
  },
  {
    "text": "let's close this okay so we have the the unpatched ASN or",
    "start": "2463060",
    "end": "2472200"
  },
  {
    "text": "h323 ASN one idb here and we generate a signature for it",
    "start": "2472200",
    "end": "2478960"
  },
  {
    "text": "which will take slightly longer",
    "start": "2478960",
    "end": "2482338"
  },
  {
    "text": "yeah yes uh good question",
    "start": "2491680",
    "end": "2497099"
  },
  {
    "text": "um 200k well generating all those photographs",
    "start": "2510460",
    "end": "2517000"
  },
  {
    "text": "takes a minute and Ida does not update the use oh we're done very good um doesn't update the user interface",
    "start": "2517000",
    "end": "2522820"
  },
  {
    "text": "while your product plugin is running so it might seem as if it hangs okay",
    "start": "2522820",
    "end": "2528579"
  },
  {
    "text": "we open up the patched version",
    "start": "2528579",
    "end": "2532740"
  },
  {
    "text": "and we apply the signature",
    "start": "2546099",
    "end": "2549599"
  },
  {
    "text": "um this will now take twice as long as generating the signature because you have to generate signature for the file will go in and then load the other one",
    "start": "2552099",
    "end": "2558160"
  },
  {
    "text": "and then it's ready for this recycling the code is horribly unoptimized too but",
    "start": "2558160",
    "end": "2563740"
  },
  {
    "text": "I mean in comparison to the time it will take you to sit through this manually don't think about too much be too much",
    "start": "2563740",
    "end": "2569560"
  },
  {
    "text": "plus even program is one coffee breaks",
    "start": "2569560",
    "end": "2574619"
  },
  {
    "text": "any other questions while we're waiting okay this is not a cheap trick to increase",
    "start": "2577540",
    "end": "2584140"
  },
  {
    "text": "the suspension no suspense suspense",
    "start": "2584140",
    "end": "2589180"
  },
  {
    "text": "sorry but right now it works on x86 but it",
    "start": "2590980",
    "end": "2596619"
  },
  {
    "text": "should be a minor change to make it one of the main problem is I don't have a flow graph component for other",
    "start": "2596619",
    "end": "2602560"
  },
  {
    "text": "executables yet but for other CPUs as soon as I build the photograph component it should take a day",
    "start": "2602560",
    "end": "2608500"
  },
  {
    "text": "I should have um well something for another another CPU as well the other thing",
    "start": "2608500",
    "end": "2615880"
  },
  {
    "text": "which might save a lot of time is Ida is now in Fallout 6 finally exporting the internal graph interface thing so you",
    "start": "2615880",
    "end": "2622359"
  },
  {
    "text": "can access those foregrounds directly with the problem of course the IDS programs are incomplete because it can't handle fragmented functions so it's a",
    "start": "2622359",
    "end": "2630099"
  },
  {
    "text": "bit of a trade-off whether I write my own or take idas okay",
    "start": "2630099",
    "end": "2636400"
  },
  {
    "text": "we apply the signature",
    "start": "2636400",
    "end": "2639838"
  },
  {
    "text": "and wait another three minutes",
    "start": "2644200",
    "end": "2647520"
  },
  {
    "text": "so what does run will tell us it will give us two lists so it'll give us one list full of functions which could not be matched and one list flow of",
    "start": "2658839",
    "end": "2665319"
  },
  {
    "text": "signatures four functions which could not be matched in the other binary we will then have to manually associate the two which will not be too hard because",
    "start": "2665319",
    "end": "2671560"
  },
  {
    "text": "while the signatures will be not identical they will look very similar meaning if you add a function which had",
    "start": "2671560",
    "end": "2677500"
  },
  {
    "text": "like 20 nodes beforehand and eight sub-function chords they'll now have like 25 nodes and nine sub 100 calls or",
    "start": "2677500",
    "end": "2683260"
  },
  {
    "text": "something like this that's um you'll see this in a minute",
    "start": "2683260",
    "end": "2689338"
  },
  {
    "text": "uh nope um it will most likely become a",
    "start": "2703680",
    "end": "2709599"
  },
  {
    "text": "commercial product pretty soon like uh you will be able to buy this hopefully",
    "start": "2709599",
    "end": "2715720"
  },
  {
    "text": "so I might have to work on the user interface of it so that it doesn't look like you",
    "start": "2715720",
    "end": "2721480"
  },
  {
    "text": "put that fish in the water but I think I explained all the concept I need so it's not that hard to write",
    "start": "2721480",
    "end": "2728859"
  },
  {
    "text": "sorry",
    "start": "2728859",
    "end": "2731400"
  },
  {
    "text": "oh we're done we're good view results all right we have 600 functions matched",
    "start": "2737740",
    "end": "2743800"
  },
  {
    "text": "and we see that we have eight unmatched functions and 10 signatures which have not been matched which means that we have eight",
    "start": "2743800",
    "end": "2751000"
  },
  {
    "text": "functions in the new version which have changed from the old one and most likely two functions from the old version have",
    "start": "2751000",
    "end": "2757540"
  },
  {
    "text": "been removed it's quite common common with Microsoft binaries these days that some functions are removed for example",
    "start": "2757540",
    "end": "2762640"
  },
  {
    "text": "whenever you look at anything that had an RPC bug Microsoft the first thing Microsoft does is remove the functions",
    "start": "2762640",
    "end": "2768280"
  },
  {
    "text": "that bind it to a new UDP interface or UDP traffic thing so that you can't just",
    "start": "2768280",
    "end": "2773319"
  },
  {
    "text": "exploit messenger over the Internet or whatever um all right and we see that these these",
    "start": "2773319",
    "end": "2779200"
  },
  {
    "text": "signatures are kind of similar you see this function here could not be matched and there's a signature down here",
    "start": "2779200",
    "end": "2785140"
  },
  {
    "text": "which looks kind of the same 22 notes 40 links 21 children 26 notes 46 links 21 children",
    "start": "2785140",
    "end": "2793420"
  },
  {
    "text": "this is kinda well this is at least similar enough to assume that these two belong to each other in terms of this is",
    "start": "2793420",
    "end": "2798760"
  },
  {
    "text": "the unchanged version and this is the changed version we generate flow graphs for both of the both both of them",
    "start": "2798760",
    "end": "2806640"
  },
  {
    "text": "View Florida in one file and",
    "start": "2806680",
    "end": "2811660"
  },
  {
    "text": "view the other flow graph oops",
    "start": "2817060",
    "end": "2820560"
  },
  {
    "text": "oops okay",
    "start": "2824920",
    "end": "2827460"
  },
  {
    "text": "this is not quite as nice as we wanted it one second please",
    "start": "2830140",
    "end": "2834780"
  },
  {
    "text": "okay all right now these are the two flow",
    "start": "2837940",
    "end": "2843400"
  },
  {
    "text": "graphs for the two functions or for this one function and we can see there is a certain",
    "start": "2843400",
    "end": "2848800"
  },
  {
    "text": "similarity if we zoom in a bit",
    "start": "2848800",
    "end": "2853380"
  },
  {
    "text": "we see that they are in fact calling the same function some same sub functions up here",
    "start": "2856359",
    "end": "2863040"
  },
  {
    "text": "this ASN one one PR is it visible at all from the audience",
    "start": "2863260",
    "end": "2869339"
  },
  {
    "text": "DEC complex Choice thing okay so we now have to flip back and",
    "start": "2869440",
    "end": "2875319"
  },
  {
    "text": "forth between these two versions of the function to see where the actual change happens",
    "start": "2875319",
    "end": "2882400"
  },
  {
    "text": "so we look over here you can see that this block here obviously belongs to this block here",
    "start": "2882400",
    "end": "2888400"
  },
  {
    "text": "the skip fragmented belongs to this block here didn't change",
    "start": "2888400",
    "end": "2893460"
  },
  {
    "text": "decrease eax decrease the ax here these two belong to",
    "start": "2894460",
    "end": "2899619"
  },
  {
    "text": "each other",
    "start": "2899619",
    "end": "2901920"
  },
  {
    "text": "if we zoom in a bit more this seems to be the same as this",
    "start": "2906160",
    "end": "2911619"
  },
  {
    "text": "we see this asn1 per DEC u32 value and there's the same call here and the",
    "start": "2911619",
    "end": "2917859"
  },
  {
    "text": "instructions just look really similar this block here whoops",
    "start": "2917859",
    "end": "2924760"
  },
  {
    "text": "should be the same as this block here and then we see something strange wait a",
    "start": "2924760",
    "end": "2932260"
  },
  {
    "text": "second I'm seeing something really strange because we're looking at",
    "start": "2932260",
    "end": "2936480"
  },
  {
    "text": "two times the same Roth which might explain what things look like",
    "start": "2938020",
    "end": "2944338"
  },
  {
    "text": "all right okay back to the drawing board we have the unmatched function in the patch binary here which we open up",
    "start": "2945520",
    "end": "2953260"
  },
  {
    "text": "which is this graph and then we have the equivalent in the other database which is at 40 f4bb",
    "start": "2953260",
    "end": "2961000"
  },
  {
    "text": "we look at the graph okay so we got these two",
    "start": "2962740",
    "end": "2969539"
  },
  {
    "text": "if we zoom in a bit",
    "start": "2971440",
    "end": "2974520"
  },
  {
    "text": "to the location which we just wear we see that this is the old version here",
    "start": "2978579",
    "end": "2985599"
  },
  {
    "text": "and this is the new version this block asn1 PR deck u32 valve",
    "start": "2985599",
    "end": "2993160"
  },
  {
    "text": "this entire block here is the same as this block here Lea push eax push seven push EDI blah",
    "start": "2993160",
    "end": "2999819"
  },
  {
    "text": "blah all this is the same and all this is the same but all of a sudden the next block",
    "start": "2999819",
    "end": "3005040"
  },
  {
    "text": "is not the same this is the old version as on Deck",
    "start": "3005040",
    "end": "3011339"
  },
  {
    "text": "alignment is being called and then deck zero table string char No error is called",
    "start": "3011339",
    "end": "3016619"
  },
  {
    "text": "and the new version they are checking something they're checking whether Arc zero is smaller",
    "start": "3016619",
    "end": "3022200"
  },
  {
    "text": "than 129 so they added a size check for an integer and this checked like the checked value",
    "start": "3022200",
    "end": "3028500"
  },
  {
    "text": "is being passed into deck zero tables charge string no Allo where in this case it is passed and",
    "start": "3028500",
    "end": "3034859"
  },
  {
    "text": "unchecked so if we look at this here one PR deck u32 value we can guess from",
    "start": "3034859",
    "end": "3041579"
  },
  {
    "text": "the function name something like oh it's asn1 decrypt unsigned in 32 value which",
    "start": "3041579",
    "end": "3047280"
  },
  {
    "text": "means read an untrusted integer from an attacker do not check it at all and pass it in",
    "start": "3047280",
    "end": "3052800"
  },
  {
    "text": "here the new version does take an untrusted integer from the attacker check whether it's smaller than",
    "start": "3052800",
    "end": "3060000"
  },
  {
    "text": "129 and pass it in here so that is one change",
    "start": "3060000",
    "end": "3065880"
  },
  {
    "text": "now I will spare you the the hassle of going through all the",
    "start": "3065880",
    "end": "3071160"
  },
  {
    "text": "differences but the first deferring function like the first one we should have just looked at has two chords to S",
    "start": "3071160",
    "end": "3076440"
  },
  {
    "text": "and one deck zero table string char No alloy and both of them like both the changes just add a range check for this",
    "start": "3076440",
    "end": "3083579"
  },
  {
    "text": "integer and the second function like if you just go back to our binary diff results here",
    "start": "3083579",
    "end": "3089640"
  },
  {
    "text": "and look at this function and this function those two",
    "start": "3089640",
    "end": "3095040"
  },
  {
    "text": "only have the difference of one chord to this ASN nightmare thing with",
    "start": "3095040",
    "end": "3100380"
  },
  {
    "text": "an added range check so apparently all Microsoft is doing here is adding this range check wherever",
    "start": "3100380",
    "end": "3106980"
  },
  {
    "text": "this function is being called the third function is the same I haven't looked beyond the fourth function but",
    "start": "3106980",
    "end": "3112440"
  },
  {
    "text": "well it might be a good idea to look at Ace and one deck zero tables whatever it's called",
    "start": "3112440",
    "end": "3118859"
  },
  {
    "text": "and um we can look at the flow graph",
    "start": "3118859",
    "end": "3124519"
  },
  {
    "text": "and it's not really a large function it takes well we will not need to read all this",
    "start": "3126859",
    "end": "3133680"
  },
  {
    "text": "because I sat down with ethics this morning and we created nice C code to read don't be scared now it looks much",
    "start": "3133680",
    "end": "3139920"
  },
  {
    "text": "scarier than it is what we have here is there's four arguments coming in there a",
    "start": "3139920",
    "end": "3145440"
  },
  {
    "text": "structure pointer to an unknown structure the user inputs like the untrusted user input which was not verified",
    "start": "3145440",
    "end": "3152940"
  },
  {
    "text": "some value from the application and well some arbitrary inputs",
    "start": "3152940",
    "end": "3158940"
  },
  {
    "text": "and then we have something here a call to a subfunction oops the call to a sub function",
    "start": "3158940",
    "end": "3166319"
  },
  {
    "text": "where Arc C is multiplied by user input now this is not a good thing in terms of well if we are the user input we can",
    "start": "3166319",
    "end": "3173579"
  },
  {
    "text": "make this result of the multiplication be anything we liked and this is actually an integer wrap in",
    "start": "3173579",
    "end": "3179040"
  },
  {
    "text": "terms of the sub 7 6 whatever that has to evaluate it through up there in order for the function to do anything just as",
    "start": "3179040",
    "end": "3186059"
  },
  {
    "text": "a size check whether the result of this multiplication is well smaller than",
    "start": "3186059",
    "end": "3191460"
  },
  {
    "text": "whatever storage in arc0 and some well in some structure memory not zero so",
    "start": "3191460",
    "end": "3198300"
  },
  {
    "text": "what we can do now by supplying this malicious input is we can make this here we turn through",
    "start": "3198300",
    "end": "3206099"
  },
  {
    "text": "and then things continue if the third argument or the fourth argument was eight this function here will be called and",
    "start": "3206099",
    "end": "3213180"
  },
  {
    "text": "this function here will be called and then Arc 8 which points to some jar buffer to which data has been copied is",
    "start": "3213180",
    "end": "3219660"
  },
  {
    "text": "terminated so we can kind of guess from what is going on here but this will in some way retrieve a string",
    "start": "3219660",
    "end": "3226859"
  },
  {
    "text": "and this will terminate this and we control user completely there has been no check at all so this is um well",
    "start": "3226859",
    "end": "3233819"
  },
  {
    "text": "completely attacker Supply indexing into memory and we're riding low bytes most likely after we've written that many",
    "start": "3233819",
    "end": "3240119"
  },
  {
    "text": "bytes from an untrusted Source like as a string same down here if we look down here if",
    "start": "3240119",
    "end": "3246780"
  },
  {
    "text": "the RPC is not equal to eight then we will repeatedly call this function which retrieves one byte that one byte will be",
    "start": "3246780",
    "end": "3253500"
  },
  {
    "text": "stored in Arc 8 Arc 8 will be incremented by one and well some other sub function will be",
    "start": "3253500",
    "end": "3259079"
  },
  {
    "text": "called but this is just read up until user image many bytes from the packet",
    "start": "3259079",
    "end": "3264599"
  },
  {
    "text": "so by not checking the input the attacker can well just dictate how many",
    "start": "3264599",
    "end": "3270359"
  },
  {
    "text": "bytes the application will read and no matter what size the target buffer is detector can always well read more bytes",
    "start": "3270359",
    "end": "3278819"
  },
  {
    "text": "so um this is the problem now this is what all these these different locations were",
    "start": "3278819",
    "end": "3284640"
  },
  {
    "text": "patching now what are we learning from this first off",
    "start": "3284640",
    "end": "3290339"
  },
  {
    "text": "the second and the third argument to ASN deck zero table string char No alloc",
    "start": "3290339",
    "end": "3296220"
  },
  {
    "text": "have to as a product have to be smaller than 4 billion larger than four billion then we have an",
    "start": "3296220",
    "end": "3302640"
  },
  {
    "text": "integer rep and we can well erroneously make this thing read as much memory as we want to Microsoft has apparently gone",
    "start": "3302640",
    "end": "3309540"
  },
  {
    "text": "through Isa to make sure that all Isa components are now well taken care of",
    "start": "3309540",
    "end": "3314700"
  },
  {
    "text": "this what I can assure you is we didn't see any other updates to our Windows recently",
    "start": "3314700",
    "end": "3320040"
  },
  {
    "text": "just those as like the the h323 thing for I I say and I would really recommend",
    "start": "3320040",
    "end": "3325859"
  },
  {
    "text": "that we do a global search of where else is this at like this API call been used because",
    "start": "3325859",
    "end": "3332280"
  },
  {
    "text": "instead of adding a check to the API call they well which is hard because that might break many things because you",
    "start": "3332280",
    "end": "3338520"
  },
  {
    "text": "really don't want to change a like an API that is used everywhere there is many many checks being",
    "start": "3338520",
    "end": "3344400"
  },
  {
    "text": "introduced in Isa now whenever we have an application which uses this this API",
    "start": "3344400",
    "end": "3350400"
  },
  {
    "text": "call we can now go in there and check all they're actually like taking their medicine properly",
    "start": "3350400",
    "end": "3355740"
  },
  {
    "text": "and Microsoft just told us of a new Bug cars so nice of them good for us",
    "start": "3355740",
    "end": "3362400"
  },
  {
    "text": "and as a conclusion reading binary gifs is almost as much fun as reading source",
    "start": "3362400",
    "end": "3368280"
  },
  {
    "text": "differences and the notion that it takes a long time to reverse engineer at binary patch is uh not correct",
    "start": "3368280",
    "end": "3374819"
  },
  {
    "text": "all right um any questions",
    "start": "3374819",
    "end": "3379338"
  },
  {
    "text": "yes",
    "start": "3380400",
    "end": "3383000"
  },
  {
    "text": "the question was whether we can't find a way to make this annoying look into",
    "start": "3395960",
    "end": "3401400"
  },
  {
    "text": "those two graphs at once and try to match things manually automatically like be done in an automated manner meaning",
    "start": "3401400",
    "end": "3407579"
  },
  {
    "text": "if we have two functions which differ but we suspect they are the same to automatically magically match those",
    "start": "3407579",
    "end": "3413579"
  },
  {
    "text": "parts of the function that are the same and only highlight those where the changes actually occur um I have thought of this in so far is",
    "start": "3413579",
    "end": "3420839"
  },
  {
    "text": "that I really want to build something like this but I have no clue how to start yet but then again semester breaks",
    "start": "3420839",
    "end": "3426720"
  },
  {
    "text": "coming up so I might have some time any other questions",
    "start": "3426720",
    "end": "3432318"
  },
  {
    "text": "yes",
    "start": "3433980",
    "end": "3436460"
  },
  {
    "text": "well hopefully after like I think beginning of March I will be quite busy until end of",
    "start": "3440099",
    "end": "3447119"
  },
  {
    "text": "February I think at the beginning of March everything should be set we'll see how long everything takes um I'm new to",
    "start": "3447119",
    "end": "3452819"
  },
  {
    "text": "the entire software selling things so there will be bumps in the world out here",
    "start": "3452819",
    "end": "3458220"
  },
  {
    "text": "any other questions yes",
    "start": "3458220",
    "end": "3463520"
  },
  {
    "text": "I have never well the question is whether my fingerprinting technique breaks code obfuscators",
    "start": "3472859",
    "end": "3480078"
  },
  {
    "text": "um I have not seen very many very good code obfuscaters and as soon as they had a",
    "start": "3480359",
    "end": "3486960"
  },
  {
    "text": "lot of conditional not like a lot of conditional branches that cannot be easily statically",
    "start": "3486960",
    "end": "3492920"
  },
  {
    "text": "determined whether they are being taken or not you can relatively easily turn my stuff",
    "start": "3492920",
    "end": "3498839"
  },
  {
    "text": "to be completely useless because if I can't determine statically whether this branch is an obfuscation Branch or not",
    "start": "3498839",
    "end": "3504660"
  },
  {
    "text": "an obfuscation Branch then I can't do all that much so then again I have I",
    "start": "3504660",
    "end": "3510420"
  },
  {
    "text": "have seen a lot of obfuscation code in terms of we just take a bunch of instructions and tap it with junk",
    "start": "3510420",
    "end": "3515520"
  },
  {
    "text": "instructions in between if you just pepper junk instructions in between this will still work but as soon as you add",
    "start": "3515520",
    "end": "3520680"
  },
  {
    "text": "malicious jumps which are evaluated based on Dynamic data I'm screwed",
    "start": "3520680",
    "end": "3526619"
  },
  {
    "text": "any other questions okay then thank you and enjoy your day",
    "start": "3526619",
    "end": "3534380"
  },
  {
    "text": "foreign",
    "start": "3537000",
    "end": "3539660"
  }
]