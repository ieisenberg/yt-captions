[
  {
    "start": "0",
    "end": "63000"
  },
  {
    "text": "good afternoon this is httpd sync attack smashing to the cell next door with",
    "start": "0",
    "end": "6509"
  },
  {
    "text": "james kettle this is the Islander F G",
    "start": "6509",
    "end": "11990"
  },
  {
    "text": "and welcome good afternoon",
    "start": "11990",
    "end": "17580"
  },
  {
    "text": "I welcome to httpd sync attacks smashing into the cell next door have you ever",
    "start": "17580",
    "end": "23490"
  },
  {
    "text": "seen a system that was so complex it just had to be vulnerable these days we",
    "start": "23490",
    "end": "30599"
  },
  {
    "text": "belong layer upon layer of abstraction to have the faintest understanding of what's really going on with the website",
    "start": "30599",
    "end": "36800"
  },
  {
    "text": "and we tell people things like HTTP is stateless and you send one request",
    "start": "36800",
    "end": "43290"
  },
  {
    "text": "you get one response but what if both of those were just kind of wrong in this",
    "start": "43290",
    "end": "50219"
  },
  {
    "text": "session I'll share with you new tools and techniques to D synchronize complex systems smash through the barriers",
    "start": "50219",
    "end": "56760"
  },
  {
    "text": "around HTTP requests and make websites rain exploits on their visitors during",
    "start": "56760",
    "end": "63750"
  },
  {
    "text": "some research last year I came up with a theory which was if you're trying to",
    "start": "63750",
    "end": "69150"
  },
  {
    "text": "select a topic to research then the best topic is the one that makes you the most nervous and this year I thought okay I'm",
    "start": "69150",
    "end": "77070"
  },
  {
    "text": "gonna try this theory out so I asked myself what topic am i really scared of and the answer for me personally had to",
    "start": "77070",
    "end": "84659"
  },
  {
    "text": "be HTTP requests smuggling I saw a Def Con presentation on this a few years back called hiding wiki's in HTTP and it",
    "start": "84659",
    "end": "93360"
  },
  {
    "text": "was a thrilling presentation but for a number of reasons it left me far too scared to actually tackle this topic",
    "start": "93360",
    "end": "99990"
  },
  {
    "text": "myself one of those reasons was that this technique was first documented way",
    "start": "99990",
    "end": "105210"
  },
  {
    "text": "back in 2005 and yet I'd never seen anyone ever successfully apply this",
    "start": "105210",
    "end": "110850"
  },
  {
    "text": "technique to a real website another was that some of the diagrams just made",
    "start": "110850",
    "end": "116759"
  },
  {
    "text": "absolutely no sense to me because my technical understanding of the topic was just not there and then there were some",
    "start": "116759",
    "end": "122850"
  },
  {
    "text": "concerning statements on some of the slides things like you will not earn any bounties",
    "start": "122850",
    "end": "128759"
  },
  {
    "text": "using this technique and even worse you will certainly not be considered like a",
    "start": "128759",
    "end": "134099"
  },
  {
    "text": "white hat if you try and find out if a single live website is actually vulnerable to this technique so at the",
    "start": "134099",
    "end": "142049"
  },
  {
    "text": "time I thought okay I'm just gonna leave that research well alone and forget it exists but this year I decided to try it",
    "start": "142049",
    "end": "148590"
  },
  {
    "text": "out and see what happened and well quite a few things happened so I did manage to",
    "start": "148590",
    "end": "155250"
  },
  {
    "text": "get some bounties and no one's called me a black hat for it so far but I got quite a few interesting reactions from",
    "start": "155250",
    "end": "161670"
  },
  {
    "text": "people one guy was so surprised by them by the vulnerability I submitted to him",
    "start": "161670",
    "end": "167400"
  },
  {
    "text": "he thought I was actually faking the entire thing he thought he was some kind",
    "start": "167400",
    "end": "172410"
  },
  {
    "text": "of digital sleight of hand in order to trick him into paying me about e and at",
    "start": "172410",
    "end": "178980"
  },
  {
    "text": "the other end of the spectrum another guy liked the unique technique that I used on his website so much he thought",
    "start": "178980",
    "end": "185579"
  },
  {
    "text": "he would take that technique and apply it to some other bug bounty sites behind",
    "start": "185579",
    "end": "190769"
  },
  {
    "text": "my back to earn himself some pocket money now of course I had no idea he was doing this until he ran into a technical",
    "start": "190769",
    "end": "198959"
  },
  {
    "text": "problem and decided that the way to resolve this was to pretend to be someone else and then email me asking",
    "start": "198959",
    "end": "205049"
  },
  {
    "text": "for help which didn't work out very well but out of all of this chaos I've been",
    "start": "205049",
    "end": "212190"
  },
  {
    "text": "able to bring safe detection methods so you can find these vulnerabilities without being called a black hat all new",
    "start": "212190",
    "end": "218849"
  },
  {
    "text": "methods to trigger desynchronization and exploit the results and fresh method",
    "start": "218849",
    "end": "223919"
  },
  {
    "text": "methodology and tooling to bring clarity to attack topic that's been overlooked",
    "start": "223919",
    "end": "228930"
  },
  {
    "text": "for far too long so first I'm going to",
    "start": "228930",
    "end": "234930"
  },
  {
    "text": "talk about what makes this attack possible how to assess if a website is vulnerable and what to do next then I'll",
    "start": "234930",
    "end": "241769"
  },
  {
    "text": "look at how to exploit it I will illustrate it using case studies looking at real websites that I've exploited",
    "start": "241769",
    "end": "247349"
  },
  {
    "text": "myself starting with some really simple easy ones and in building in complexity and",
    "start": "247349",
    "end": "252769"
  },
  {
    "text": "finally ending with a knife demo on a replica of a real system in which I'll also show how to use the open-source",
    "start": "252769",
    "end": "259489"
  },
  {
    "text": "burp suite extension that I'm releasing as part of this research after that I'll talk about how to",
    "start": "259489",
    "end": "265340"
  },
  {
    "text": "prevent these attacks and in wrap up and take five minutes of questions if you",
    "start": "265340",
    "end": "272060"
  },
  {
    "start": "271000",
    "end": "408000"
  },
  {
    "text": "picture website as an end user it probably looks something like this because as an end user that's all that",
    "start": "272060",
    "end": "279139"
  },
  {
    "text": "we can dive a see but behind the scenes most modern websites routing requests",
    "start": "279139",
    "end": "285320"
  },
  {
    "text": "through a chain of servers speaking to each other over HTTP over a stream based",
    "start": "285320",
    "end": "291199"
  },
  {
    "text": "transport layer protocol like TCP or TLS and for the sake of performance these",
    "start": "291199",
    "end": "297949"
  },
  {
    "text": "TCP and TLS streams are heavily reused following the HTTP 1.1 keepalive",
    "start": "297949",
    "end": "304130"
  },
  {
    "text": "protocol which means the HTTP requests are placed back-to-back on the stream",
    "start": "304130",
    "end": "309740"
  },
  {
    "text": "with no des limiters in between them and each server in the chain is expected to",
    "start": "309740",
    "end": "315050"
  },
  {
    "text": "pause the haste taystee to be headers of each request to work out where one of the quest stops and the next one starts so you have",
    "start": "315050",
    "end": "323870"
  },
  {
    "text": "requests from users from all over the world being funneled over a small pool of shared TCP streams to the backend",
    "start": "323870",
    "end": "330080"
  },
  {
    "text": "application server which is pausing these in order to understand where each one stops and the next one starts it's",
    "start": "330080",
    "end": "336530"
  },
  {
    "text": "pretty obvious what's gonna go wrong right what happens if someone sends an",
    "start": "336530",
    "end": "342289"
  },
  {
    "text": "ambiguous message one where the front end thinks the message is a different length to the bucket so in this example",
    "start": "342289",
    "end": "349490"
  },
  {
    "text": "the front end is interpreting this as one request so it's floating the whole thing onto",
    "start": "349490",
    "end": "354530"
  },
  {
    "text": "the back end and the back end for some reason thinks that the final blue square is the end of the request and therefore",
    "start": "354530",
    "end": "362539"
  },
  {
    "text": "it thinks that orange square is the start of the next request and then it's just going to wait for that next request",
    "start": "362539",
    "end": "368720"
  },
  {
    "text": "to be completed and when the next real request is the backend server we end up",
    "start": "368720",
    "end": "375139"
  },
  {
    "text": "with this orange data at the start of it so that's the essence of the quest",
    "start": "375139",
    "end": "380310"
  },
  {
    "text": "smuggling we can apply an arbitrary prefix to the next request to hit the",
    "start": "380310",
    "end": "385380"
  },
  {
    "text": "back end now because we can't directly see what's happening behind the front",
    "start": "385380",
    "end": "391080"
  },
  {
    "text": "end system it's quite easy to get bogged down in the technical details I certainly did myself but ultimately it's",
    "start": "391080",
    "end": "398280"
  },
  {
    "text": "really that simple so now let's zoom in and take a look at what the data might actually look like",
    "start": "398280",
    "end": "404760"
  },
  {
    "text": "on the wire this request is ambiguous",
    "start": "404760",
    "end": "411330"
  },
  {
    "start": "408000",
    "end": "563000"
  },
  {
    "text": "because we're using an absolutely classic desynchronisation technique we've just specified the content length",
    "start": "411330",
    "end": "417030"
  },
  {
    "text": "had a twice in this example the front end is looking at the first content length header so it's forwarding all the",
    "start": "417030",
    "end": "423180"
  },
  {
    "text": "blue data and the Owens G onto the back end but the back end is looking at the second content length so it's only",
    "start": "423180",
    "end": "429750"
  },
  {
    "text": "meeting in the blue data if thinks the G is the start of the next request so in the next request which could be coming",
    "start": "429750",
    "end": "436170"
  },
  {
    "text": "from the same user or a different user hits the back end they're going to get an unexpected response saying something",
    "start": "436170",
    "end": "442500"
  },
  {
    "text": "like unknown method G post and that's it we've successfully done and the quest",
    "start": "442500",
    "end": "448230"
  },
  {
    "text": "smuggiing it up the only catch is this technique is so classic that it doesn't",
    "start": "448230",
    "end": "454380"
  },
  {
    "text": "really work on anything that's actually worth hacking these dates what does work",
    "start": "454380",
    "end": "459690"
  },
  {
    "text": "on plenty of interesting systems is using chunked encoding so chunked",
    "start": "459690",
    "end": "465360"
  },
  {
    "text": "encoding is an alternative way of specifying the length of the message instead of instead of specifying their",
    "start": "465360",
    "end": "470820"
  },
  {
    "text": "continent you say transfer encoding chunked and that means that the back-end server or the front end whatever the",
    "start": "470820",
    "end": "477180"
  },
  {
    "text": "server is will just pause the body of the message until it reaches a zero followed by an empty line so in this",
    "start": "477180",
    "end": "484350"
  },
  {
    "text": "example here once again the front end is used the content let's header its is Florida - all the data up to and",
    "start": "484350",
    "end": "490410"
  },
  {
    "text": "including the orange key but the back end is looked at the content length transfer encoding chunks so it stopped",
    "start": "490410",
    "end": "496590"
  },
  {
    "text": "reading in this message after the zero and the newline and once again our victim is going to get an unknown method",
    "start": "496590",
    "end": "502800"
  },
  {
    "text": "G post response now great that's like that techniques nice inner works on lots",
    "start": "502800",
    "end": "508740"
  },
  {
    "text": "of systems but what if the d synchronization happens the other way round what if it's",
    "start": "508740",
    "end": "513789"
  },
  {
    "text": "the front end the looks of the transfer encoding chunked header and the back end that uses the content length well we can",
    "start": "513790",
    "end": "521349"
  },
  {
    "text": "still exploit that there's this minor limitation which is though if the malicious prefix shown in our winchester",
    "start": "521350",
    "end": "527980"
  },
  {
    "text": "end with a 0 followed by an empty line but in general that's not going to cause us any trouble one other thing you might",
    "start": "527980",
    "end": "536890"
  },
  {
    "text": "be looking at the content that's header and wondering why that says 3 when",
    "start": "536890",
    "end": "542050"
  },
  {
    "text": "there's only one obvious blue byte of data that's because every line in pretty much every slide actually ends with",
    "start": "542050",
    "end": "548950"
  },
  {
    "text": "slash our sacha in general it will be easier to use the highlighting to work",
    "start": "548950",
    "end": "554140"
  },
  {
    "text": "out which bit is the malicious prefix rather than manually pausing all of the content length and chunk headers so why",
    "start": "554140",
    "end": "564850"
  },
  {
    "start": "563000",
    "end": "708000"
  },
  {
    "text": "does that chunk technique work on so many systems I think we've got to give",
    "start": "564850",
    "end": "570160"
  },
  {
    "text": "some credit to the specification ofc 2 6 1 6 says if you receive a message that",
    "start": "570160",
    "end": "576160"
  },
  {
    "text": "specifies a content length and uses chunked encoding then you should give the chunked encoding priority and that",
    "start": "576160",
    "end": "583240"
  },
  {
    "text": "kind of implicitly says that these messages are located and they shouldn't",
    "start": "583240",
    "end": "589150"
  },
  {
    "text": "be rejected so what that means is if you've got a chain of servers for a given website if any server in that",
    "start": "589150",
    "end": "595810"
  },
  {
    "text": "chain has chunked encoding disabled then they will just fall back to using the",
    "start": "595810",
    "end": "601450"
  },
  {
    "text": "content length and you'll be able to desynchronize and exploit it so this technique by itself works on loads of",
    "start": "601450",
    "end": "607720"
  },
  {
    "text": "systems including possibly the majority of systems using the content delivery",
    "start": "607720",
    "end": "612880"
  },
  {
    "text": "network Akamai I have told them about that so that might be changing in the",
    "start": "612880",
    "end": "618610"
  },
  {
    "text": "near future hopefully but what if you want to exploit a system that isn't",
    "start": "618610",
    "end": "624090"
  },
  {
    "text": "where every server in the chain supports chunked encoding well luckily you can",
    "start": "624090",
    "end": "630310"
  },
  {
    "text": "still do that all you need to do is find a way to hide the transfer encoding chunked header from one server in the",
    "start": "630310",
    "end": "637090"
  },
  {
    "text": "chain and there's lots of ways of doing that for example some servers normalize",
    "start": "637090",
    "end": "642250"
  },
  {
    "text": "trailing whitespace in headin eight so some who think this message is chopped and some what other",
    "start": "642250",
    "end": "649080"
  },
  {
    "text": "servers like to grip the transfer encoding header for the word chopped rather than tokenizing it so they will",
    "start": "649080",
    "end": "655980"
  },
  {
    "text": "think that messages chunk words others won't and you can desynchronize them and there's loads of techniques that you can",
    "start": "655980",
    "end": "662010"
  },
  {
    "text": "use to decent canal systems this is just a tiny sampling of them but every technique on this slide is one that I've",
    "start": "662010",
    "end": "668820"
  },
  {
    "text": "successfully used on a real system journalists research the ones highlighted in orange the techniques",
    "start": "668820",
    "end": "675360"
  },
  {
    "text": "that I came up with myself though I don't think have ever been documented anywhere else so at this point we",
    "start": "675360",
    "end": "684660"
  },
  {
    "text": "understand the fundamentals of how to decent kunai service which is a really powerful building block but if we just",
    "start": "684660",
    "end": "690990"
  },
  {
    "text": "try and work with this building blog I can tell you with confidence we'll run into hazards and complications and waste",
    "start": "690990",
    "end": "697410"
  },
  {
    "text": "a lot of time so to avoid that I've developed this methodology to guide us",
    "start": "697410",
    "end": "702420"
  },
  {
    "text": "in a controlled manner step by step towards a successful exploit first off",
    "start": "702420",
    "end": "709200"
  },
  {
    "start": "708000",
    "end": "1024000"
  },
  {
    "text": "we need to detect when the synchronization is possible now the obvious way of doing that is to send two",
    "start": "709200",
    "end": "716430"
  },
  {
    "text": "requests to the server where the first one has a is ambiguous and has a",
    "start": "716430",
    "end": "721620"
  },
  {
    "text": "malicious prefix and in the second one should get poisoned by the malicious prefix from the first request and get a",
    "start": "721620",
    "end": "727860"
  },
  {
    "text": "different response however this technique is massively flawed because if",
    "start": "727860",
    "end": "733470"
  },
  {
    "text": "anyone else's request hits the server in between your two requests then they'll",
    "start": "733470",
    "end": "739080"
  },
  {
    "text": "get the poisoned response they will potentially have a bad day as a result and you won't find the vulnerability",
    "start": "739080",
    "end": "744900"
  },
  {
    "text": "you'll sing that server is secure so we need a better way of doing it and after",
    "start": "744900",
    "end": "750060"
  },
  {
    "text": "a lot of effort I think I've got one how this request gets handled depends on",
    "start": "750060",
    "end": "756780"
  },
  {
    "text": "whether the front end and back end seeing this message is chunked or whether they use the content met if both",
    "start": "756780",
    "end": "763440"
  },
  {
    "text": "systems use the content length everything's fine we just get a normal response from the back end straightaway",
    "start": "763440",
    "end": "768480"
  },
  {
    "text": "if the front end looks at the transfer encoding header it's going to read in",
    "start": "768480",
    "end": "773580"
  },
  {
    "text": "the chunk size of three reading the ABC and then it's gonna read in the next chunk size which is Q which",
    "start": "773580",
    "end": "779369"
  },
  {
    "text": "is not a valid chunk size because that's going to be a hexadecimal number so it's just going to reject that request",
    "start": "779369",
    "end": "784439"
  },
  {
    "text": "without even affording it onto the back-end system but if the front-end",
    "start": "784439",
    "end": "791279"
  },
  {
    "text": "looks at the content length header so it forwards all the blue data but nor the Owens Q onto the back end and in the",
    "start": "791279",
    "end": "797220"
  },
  {
    "text": "back end look so that transfer encoding chunks header then the back end will",
    "start": "797220",
    "end": "802349"
  },
  {
    "text": "time out waiting for the final chunk size to arrive so if we send this request and we get a significant time",
    "start": "802349",
    "end": "809759"
  },
  {
    "text": "delay in the response that's a pretty strong indication that that server is vulnerable to request smuggling and if",
    "start": "809759",
    "end": "816839"
  },
  {
    "text": "the DD synchronization happens the other way round or the front end looking at the transfer encoding we can still",
    "start": "816839",
    "end": "822389"
  },
  {
    "text": "detect that using a similar technique there is a small catch with that second",
    "start": "822389",
    "end": "827579"
  },
  {
    "text": "technique which is that if the second if the server is vulnerable the first way round then we end up poisoning the back",
    "start": "827579",
    "end": "834569"
  },
  {
    "text": "end socket with this X which might have negative side-effects for someone else so to avoid that simply always use the",
    "start": "834569",
    "end": "842579"
  },
  {
    "text": "technique on the left side first now you",
    "start": "842579",
    "end": "848459"
  },
  {
    "text": "should try this technique by using every every different distinct Rinna's ation",
    "start": "848459",
    "end": "854369"
  },
  {
    "text": "technique on the target system and you should try it on every URL on the target",
    "start": "854369",
    "end": "859470"
  },
  {
    "text": "server because different URLs maybe voted to different backends and you can't always tell simply by looking",
    "start": "859470",
    "end": "865259"
  },
  {
    "text": "at them as of today this technique is used by burps sweet scanner to have to",
    "start": "865259",
    "end": "871379"
  },
  {
    "text": "find this vulnerability and it's also used by the open source free tool that I'm releasing as part of this research",
    "start": "871379",
    "end": "877789"
  },
  {
    "text": "now because this technique is finding the vulnerability based on influence it",
    "start": "877789",
    "end": "883919"
  },
  {
    "text": "is gonna get some folks nuggets some false positives but it doesn't get very",
    "start": "883919",
    "end": "889139"
  },
  {
    "text": "many and the real strength is it gets vastly less false negatives than the classic approach for example on one",
    "start": "889139",
    "end": "896549"
  },
  {
    "text": "target this technique found the vulnerability every single time I scanned it and using the classic",
    "start": "896549",
    "end": "903419"
  },
  {
    "text": "approach approach took 800 failed attempts before I successfully managed",
    "start": "903419",
    "end": "908939"
  },
  {
    "text": "to applicator and that's potentially 800 real users who got unexpected responses",
    "start": "908939",
    "end": "915820"
  },
  {
    "text": "so in an ideal world we could stop there but probably quite a few clients won't",
    "start": "915820",
    "end": "921170"
  },
  {
    "text": "take a report seriously without more evidence so that means we're going to have to fall back to using the good old",
    "start": "921170",
    "end": "926680"
  },
  {
    "text": "unreliable classic approach we're going to send a pair of the quests that the",
    "start": "926680",
    "end": "932329"
  },
  {
    "text": "first one will look like this and as a malicious prefix designed to affect the response that the second requests shown",
    "start": "932329",
    "end": "939170"
  },
  {
    "text": "in green will get so it's the second request which would normally get a 200",
    "start": "939170",
    "end": "944269"
  },
  {
    "text": "code guess of 44 in this case that proves this system is definitely vulnerable to requests mugging there's a",
    "start": "944269",
    "end": "952550"
  },
  {
    "text": "few key points here one is that you should absolutely not send those two requests over the same connection",
    "start": "952550",
    "end": "959089"
  },
  {
    "text": "yourself if you do that you'll just get false positives also the end point you",
    "start": "959089",
    "end": "964550"
  },
  {
    "text": "send these payloads to is really important because if the back end",
    "start": "964550",
    "end": "969680"
  },
  {
    "text": "doesn't expect to receive her post request or if he doesn't like your request for any reason then it may",
    "start": "969680",
    "end": "976190"
  },
  {
    "text": "reject the request with like a 500 code and it may also close the connection to",
    "start": "976190",
    "end": "981380"
  },
  {
    "text": "the front end and if it closes the connection that means the malicious prefix in orange gets thrown out and the",
    "start": "981380",
    "end": "987680"
  },
  {
    "text": "attack will fail so you want to try and find an endpoint that expects to receive a post request and also trying to",
    "start": "987680",
    "end": "994190"
  },
  {
    "text": "preserve any parameters it needs so in these examples here I've tried to preserve the coupon smuggling parameter",
    "start": "994190",
    "end": "1002250"
  },
  {
    "text": "finally even if you do all of that you've got to remember this technique is non-deterministic it will randomly",
    "start": "1002250",
    "end": "1009190"
  },
  {
    "text": "affect other people browsing the website instead of you and even if there is no one else browsing the website some many",
    "start": "1009190",
    "end": "1016240"
  },
  {
    "text": "servers use pools of connections to talk to the backend so you'll still probably have to try it a few times okay now",
    "start": "1016240",
    "end": "1026380"
  },
  {
    "start": "1024000",
    "end": "1074000"
  },
  {
    "text": "we're done with a theory we can finally take a look at what damage we can do using this technique now every case",
    "start": "1026380",
    "end": "1033428"
  },
  {
    "text": "study in this section is a real system that I exploited Jonas research I have unfortunately been forced to adapt quite",
    "start": "1033429",
    "end": "1040418"
  },
  {
    "text": "a few company names partly because some of them haven't even managed to patch it yet but I'd like to",
    "start": "1040419",
    "end": "1047910"
  },
  {
    "text": "give a shout out to every company that actually does let me name them in these slides please remember these are the",
    "start": "1047910",
    "end": "1054150"
  },
  {
    "text": "companies that are now secured against these techniques it's the companies that aren't my aren't",
    "start": "1054150",
    "end": "1059280"
  },
  {
    "text": "named that may still be vulnerable also during this section I'm going to keep a",
    "start": "1059280",
    "end": "1064620"
  },
  {
    "text": "running total of the bounties earned using each attack technique here and as",
    "start": "1064620",
    "end": "1070740"
  },
  {
    "text": "usual of these over 50% has been donated to charity probably the easiest attack",
    "start": "1070740",
    "end": "1077130"
  },
  {
    "start": "1074000",
    "end": "1250000"
  },
  {
    "text": "you can do with requests smuggling is bypassing security rules on the front end on a popular software vendor I found",
    "start": "1077130",
    "end": "1084690"
  },
  {
    "text": "their front end wouldn't let you access slash admin but by smuggling to request the front end thinks for accessing the",
    "start": "1084690",
    "end": "1091200"
  },
  {
    "text": "route of the server so when we send the next request ourselves we get access to the admin page right so far so easy now",
    "start": "1091200",
    "end": "1101070"
  },
  {
    "text": "lots of fun ins like to rewrite requests by adding headers to them and one head",
    "start": "1101070",
    "end": "1106440"
  },
  {
    "text": "of the practically every system uses some variation of is exported for which",
    "start": "1106440",
    "end": "1111510"
  },
  {
    "text": "just specifies the remote users IP now if we try and add this header to a normal request ourselves most well",
    "start": "1111510",
    "end": "1118230"
  },
  {
    "text": "configured servers will rewrite this header or just remove it completely but when we smuggle a request we bypass",
    "start": "1118230",
    "end": "1125850"
  },
  {
    "text": "header rewriting so we can use that to make our IP look like it's coming from anywhere and using",
    "start": "1125850",
    "end": "1131820"
  },
  {
    "text": "that technique on a security vendor I got an incredible three hundred dollar bounty so I'm not suggesting you're",
    "start": "1131820",
    "end": "1139200"
  },
  {
    "text": "gonna get rich quick using this technique but it works on practically every server so it's worth knowing and also it has a",
    "start": "1139200",
    "end": "1146760"
  },
  {
    "text": "slightly less obvious use imagine that you've got a certain target website",
    "start": "1146760",
    "end": "1152730"
  },
  {
    "text": "where the time out technique works every time so you're fairly sure its vulnerable but their traffic volume is",
    "start": "1152730",
    "end": "1160020"
  },
  {
    "text": "so high you've effectively got zero chance of ever getting a poisoned response yourself how do you prove that",
    "start": "1160020",
    "end": "1168269"
  },
  {
    "text": "server is really vulnerable well one way of doing it is to smuggle a request that looks something like this but put a",
    "start": "1168269",
    "end": "1174539"
  },
  {
    "text": "unique hostname in the X 44 Yoel if you get a DNS lookup for that hostname that",
    "start": "1174539",
    "end": "1181320"
  },
  {
    "text": "shows that that there the body of that message has been interpreted as a separate request by the backend server",
    "start": "1181320",
    "end": "1186989"
  },
  {
    "text": "and thereby foods that they're vulnerable to requests modeling now",
    "start": "1186989",
    "end": "1194429"
  },
  {
    "text": "might be spoofing is okay but the really interesting behavior is going to come from custom application specific headers",
    "start": "1194429",
    "end": "1201320"
  },
  {
    "text": "but we can't exploit those unless we know what they are fortunately it's",
    "start": "1201320",
    "end": "1207209"
  },
  {
    "text": "often quite easy to find out as long as the target website takes has has an endpoint that expects to receive a post",
    "start": "1207209",
    "end": "1213179"
  },
  {
    "text": "request and reflects the value of at least 1 gram etre so on New Relic I",
    "start": "1213179",
    "end": "1219329"
  },
  {
    "text": "smuggled a request to their login page and I made sure my email address was the last parameter so that made when I when",
    "start": "1219329",
    "end": "1226919"
  },
  {
    "text": "I sent the next normal request that god concatenate it onto the email address",
    "start": "1226919",
    "end": "1231929"
  },
  {
    "text": "that I was trying to log in with which meant there was the response reflected the whole of the second request",
    "start": "1231929",
    "end": "1238129"
  },
  {
    "text": "including all of the hey all of the headers that the front end had depended on to that request and some of those",
    "start": "1238129",
    "end": "1245700"
  },
  {
    "text": "headers are going to come in useful on the next site on UL ik the back end",
    "start": "1245700",
    "end": "1253109"
  },
  {
    "start": "1250000",
    "end": "1553000"
  },
  {
    "text": "system wasn't really the back end it was actually a reverse proxy so by changing the host header I could access different",
    "start": "1253109",
    "end": "1258869"
  },
  {
    "text": "internal systems but all the internal systems I could find responded with this redirect tasty PS suggesting that they",
    "start": "1258869",
    "end": "1266579"
  },
  {
    "text": "thought my request was sent being sent over HTTP but by looking in the previous site I saw the exported proto header so I",
    "start": "1266579",
    "end": "1274529"
  },
  {
    "text": "stuck that on to the smuggle to request myself and that meant I could actually access these internal systems and so I",
    "start": "1274529",
    "end": "1282149"
  },
  {
    "text": "went exploring and I found an endpoint that gave me a really taunting error",
    "start": "1282149",
    "end": "1287399"
  },
  {
    "text": "message it said not authorized with header but it didn't tell me what the",
    "start": "1287399",
    "end": "1293070"
  },
  {
    "text": "name of the header that I wasn't authorized with was and I thought okay",
    "start": "1293070",
    "end": "1298409"
  },
  {
    "text": "well maybe this is the in our external service header that we saw on the previous slide but that",
    "start": "1298409",
    "end": "1305130"
  },
  {
    "text": "didn't work that actually made the problem worse so at this point I could have retried the request reflection",
    "start": "1305130",
    "end": "1311970"
  },
  {
    "text": "technique on loads of different end points on the New Relic until I found out the name of this header but I was",
    "start": "1311970",
    "end": "1318659"
  },
  {
    "text": "feeling kind of lazy so instead I decided to cheat and look at my notes from the last time I compromised new",
    "start": "1318659",
    "end": "1324299"
  },
  {
    "text": "ellic and that revealed the service gateway account ID and service gateway",
    "start": "1324299",
    "end": "1330450"
  },
  {
    "text": "is New Relic admin headers so by specifying those two headers on a",
    "start": "1330450",
    "end": "1335850"
  },
  {
    "text": "smuggled requests suicide by paths they're rewriting I gained access to",
    "start": "1335850",
    "end": "1340889"
  },
  {
    "text": "their core internal API as an admin and as every account on their system so I",
    "start": "1340889",
    "end": "1346649"
  },
  {
    "text": "gain pretty much full access to everything and got a few thousand dollar bounty for that now you will occur hacked this really",
    "start": "1346649",
    "end": "1354389"
  },
  {
    "text": "quite fast for the hotfix but they said that the root cause of this was associated with their f5 load",
    "start": "1354389",
    "end": "1361320"
  },
  {
    "text": "balancer and I'm not sure the f5 have patched that yet so you might want to",
    "start": "1361320",
    "end": "1366480"
  },
  {
    "text": "share that out if you're using them now what we've seen is with requests modeling if you're willing to put the",
    "start": "1366480",
    "end": "1373049"
  },
  {
    "text": "time in you can break directly into internal systems and have a good time but there's also a lot of much easier",
    "start": "1373049",
    "end": "1380129"
  },
  {
    "text": "techniques that are less environment dependent focused on attacking other users so that's what we're going to look",
    "start": "1380129",
    "end": "1386429"
  },
  {
    "text": "at next if application has any way of persistently stolen text later",
    "start": "1386429",
    "end": "1392570"
  },
  {
    "text": "exploitation is really easy so for example on on Trello I smuggled a",
    "start": "1392570",
    "end": "1398220"
  },
  {
    "text": "request to update my own profile bio and I made sure the bio parameter was lost",
    "start": "1398220",
    "end": "1405149"
  },
  {
    "text": "and I didn't send a photo so someone else's request got Concannon got",
    "start": "1405149",
    "end": "1410370"
  },
  {
    "text": "concatenated on to that and then described browse into my own bio on Trello I could retrieve the whole of",
    "start": "1410370",
    "end": "1416399"
  },
  {
    "text": "someone else's request including all of their so all of their session cookies",
    "start": "1416399",
    "end": "1421649"
  },
  {
    "text": "even though they were HTTP only and secure so this is a technique that requires no user interaction whatsoever",
    "start": "1421649",
    "end": "1428519"
  },
  {
    "text": "it's just every time I send that request I get control over the account of anyone",
    "start": "1428519",
    "end": "1433919"
  },
  {
    "text": "that to be browsing Trello site and I use that on a different target but also that",
    "start": "1433919",
    "end": "1440429"
  },
  {
    "text": "didn't have any direct storage of text but did have a support request system so",
    "start": "1440429",
    "end": "1446039"
  },
  {
    "text": "by filing I support a support request I could make it so the victims request",
    "start": "1446039",
    "end": "1451409"
  },
  {
    "text": "would eventually get emailed to my account the primary limitation with this",
    "start": "1451409",
    "end": "1458700"
  },
  {
    "text": "technique is that you can only steal data as far as the first ampersand in the victim's request because everything",
    "start": "1458700",
    "end": "1465419"
  },
  {
    "text": "after that will be interpreted as just a different parameter and that means in general this technique is not very good",
    "start": "1465419",
    "end": "1472379"
  },
  {
    "text": "for stealing passwords directly she sat but there is an exception if the target",
    "start": "1472379",
    "end": "1478499"
  },
  {
    "text": "application submits passwords using JSON then you probably can't steal them unless the victims transferred contains",
    "start": "1478499",
    "end": "1485369"
  },
  {
    "text": "an ampersand in which case you can't okay so what if you can't store the",
    "start": "1485369",
    "end": "1494339"
  },
  {
    "text": "quests well there's a whole nother branch of attack based on serving up harmful responses to use probably the",
    "start": "1494339",
    "end": "1503399"
  },
  {
    "text": "most conceptually simple one is on one SAS vendor that I can't name they had",
    "start": "1503399",
    "end": "1508919"
  },
  {
    "text": "reflected XSS which is kind of an ok vulnerability by itself but it's not very good for mass exploitation because",
    "start": "1508919",
    "end": "1515729"
  },
  {
    "text": "it requires user interaction but by smuggling of a quest that triggered the",
    "start": "1515729",
    "end": "1521009"
  },
  {
    "text": "reflected exercise and then just leaving that on the socket some random are the person browsing the website would",
    "start": "1521009",
    "end": "1526080"
  },
  {
    "text": "receive the response that was meant for me and get exploited so that's more",
    "start": "1526080",
    "end": "1531330"
  },
  {
    "text": "powerful than standard reflected XSS it also exposes hast to be only only",
    "start": "1531330",
    "end": "1537869"
  },
  {
    "text": "cookies once again and it also enables exploitation of truth of traditionally unexploited or XS s such as XSS in the",
    "start": "1537869",
    "end": "1546389"
  },
  {
    "text": "user agent header or or XSS in post requests that have C surf tokens one",
    "start": "1546389",
    "end": "1554070"
  },
  {
    "text": "while testing or one target trying to cause a redirect response I happened to",
    "start": "1554070",
    "end": "1559109"
  },
  {
    "text": "Lolo load up their home page when a web browser were they developed always open",
    "start": "1559109",
    "end": "1564670"
  },
  {
    "text": "and this message popped up and the IP address looked worryingly familiar and",
    "start": "1564670",
    "end": "1571799"
  },
  {
    "start": "1565000",
    "end": "1698000"
  },
  {
    "text": "what was more worrying was that regardless of which web browser and which network I connected to their",
    "start": "1571799",
    "end": "1576970"
  },
  {
    "text": "system from I always got that error message and looking through my logs it",
    "start": "1576970",
    "end": "1584890"
  },
  {
    "text": "turned out that yet this was my fault I'd smuggled over Quest that looked something like this and someone else's",
    "start": "1584890",
    "end": "1591309"
  },
  {
    "text": "request for an image had snuck in there so they've got the V direct response which is you know that's not great but",
    "start": "1591309",
    "end": "1598090"
  },
  {
    "text": "only affected one person right but a cache had seen that happening so the",
    "start": "1598090",
    "end": "1604299"
  },
  {
    "text": "cache had saved the V of X and anyone who went to the homepage of the target website and tried to load this image",
    "start": "1604299",
    "end": "1611140"
  },
  {
    "text": "ended up trying to load the image from my site now on the one hand this is a",
    "start": "1611140",
    "end": "1617410"
  },
  {
    "text": "brilliant demonstration of how easy it is to do cache poisoning with request smuggling it's so easy I did it by",
    "start": "1617410",
    "end": "1623470"
  },
  {
    "text": "accident but yeah and also you can see it's really powerful because there yeah I hijacked an image but if I'd hijacked",
    "start": "1623470",
    "end": "1630340"
  },
  {
    "text": "a JavaScript file I would have complete control over their homepage more or less permanently of that stayed in their",
    "start": "1630340",
    "end": "1636880"
  },
  {
    "text": "cache for over 24 hours even after I told them please believe us but on the",
    "start": "1636880",
    "end": "1643570"
  },
  {
    "text": "other hand you probably don't want this happening by accident right there's an undesirable side effect unless you're",
    "start": "1643570",
    "end": "1649240"
  },
  {
    "text": "doing it on purpose so what can you do to try and reduce the chance of this happening well one thing you can do is",
    "start": "1649240",
    "end": "1655450"
  },
  {
    "text": "try and craft a prefix that has no cache headers on the response and otherwise",
    "start": "1655450",
    "end": "1661510"
  },
  {
    "text": "just make sure that you send your victim requests as fast as possible and finally if you have a choice of front-end",
    "start": "1661510",
    "end": "1667960"
  },
  {
    "text": "systems try and target one in a geographical region there's asleep or otherwise won't be",
    "start": "1667960",
    "end": "1674020"
  },
  {
    "text": "getting as much traffic because that reduces the chance of someone else's requests sneaking in in front of loss",
    "start": "1674020",
    "end": "1680350"
  },
  {
    "text": "but ultimately if they're using a cache this is always a risk of this technique",
    "start": "1680350",
    "end": "1685679"
  },
  {
    "text": "the the timing based detection technique is perfectly safe",
    "start": "1685679",
    "end": "1691179"
  },
  {
    "text": "that won't do this but if you try and actually demoed it act is properly vulnerable",
    "start": "1691179",
    "end": "1696640"
  },
  {
    "text": "this is a risk now that wasn't ideal but it left me wondering what if we embrace",
    "start": "1696640",
    "end": "1702100"
  },
  {
    "text": "this possibility so here I've sent a malicious prefix to try and fetch an API",
    "start": "1702100",
    "end": "1708730"
  },
  {
    "text": "key from an account and when the users of the quest gets concatenated on that",
    "start": "1708730",
    "end": "1715180"
  },
  {
    "text": "request gets completed with their session cooking so it fetches their API key now at this point all we've done is",
    "start": "1715180",
    "end": "1721810"
  },
  {
    "text": "made them receive their own API key so that's not really very dangerous but if",
    "start": "1721810",
    "end": "1726940"
  },
  {
    "text": "they were trying to load a static file then a cache may see that happening and it may save their API key over that",
    "start": "1726940",
    "end": "1733810"
  },
  {
    "text": "static file so then we can just browsers say that javascript file and retrieve the victim's key if this attack sounds",
    "start": "1733810",
    "end": "1741370"
  },
  {
    "text": "kind of familiar that's because this isn't conceptually very similar to web cache deception which is a technique",
    "start": "1741370",
    "end": "1747820"
  },
  {
    "text": "that was on the old like a few years ago the key difference is that this",
    "start": "1747820",
    "end": "1752980"
  },
  {
    "text": "technique doesn't require any use of interaction it's just exploiting a random person browsing the website now",
    "start": "1752980",
    "end": "1759970"
  },
  {
    "text": "unfortunately my attack pipeline that I used to find examples for presentations doesn't log into websites so I haven't",
    "start": "1759970",
    "end": "1767350"
  },
  {
    "text": "found any genuine examples of this happening but oops I'm pretty sure it",
    "start": "1767350",
    "end": "1774760"
  },
  {
    "text": "exists out there and I think you're gonna find it in those locations if anyone does find it I'd love to see a",
    "start": "1774760",
    "end": "1781690"
  },
  {
    "text": "light up now on you ellic their back-end",
    "start": "1781690",
    "end": "1787210"
  },
  {
    "start": "1784000",
    "end": "1837000"
  },
  {
    "text": "system was an internal proxy and on some other systems their back-end was actually a CDN they like James for most",
    "start": "1787210",
    "end": "1794140"
  },
  {
    "text": "full CD ins on to each other which I mean I have no idea why you do that but some of them do and what that means is",
    "start": "1794140",
    "end": "1800980"
  },
  {
    "text": "if you change the host header you can serve up any content that's hosted on that CDN so on this advertising company",
    "start": "1800980",
    "end": "1809650"
  },
  {
    "text": "that I can't me if you change the host header you can access you can serve content from any Akamai website on their",
    "start": "1809650",
    "end": "1817900"
  },
  {
    "text": "own site and once again that would get cached so you could effectively over wipe their homepage with any page on",
    "start": "1817900",
    "end": "1823690"
  },
  {
    "text": "anyone oh I and that same concept works on SAS",
    "start": "1823690",
    "end": "1828850"
  },
  {
    "text": "providers to like you you can change the host editor a different client of the SAS provider and serve up their content",
    "start": "1828850",
    "end": "1835950"
  },
  {
    "text": "now Viacom was itself directly vulnerable to request model and while",
    "start": "1835950",
    "end": "1843670"
  },
  {
    "start": "1837000",
    "end": "1903000"
  },
  {
    "text": "looking for vulnerabilities to chain in to do some damage with it I found this dom-based open video it and",
    "start": "1843670",
    "end": "1849130"
  },
  {
    "text": "that raised an interesting challenge because with requests modeling we",
    "start": "1849130",
    "end": "1854770"
  },
  {
    "text": "control what the backend server thinks the gyro is but we don't control what",
    "start": "1854770",
    "end": "1860020"
  },
  {
    "text": "the victims web browser thinks to your OS and this get query Fram function function is being executed in the",
    "start": "1860020",
    "end": "1866410"
  },
  {
    "text": "victims web browser so effectively by itself you can't combine this issue with",
    "start": "1866410",
    "end": "1872500"
  },
  {
    "text": "request smuggling but if the target has a local redirect then you can use that",
    "start": "1872500",
    "end": "1879370"
  },
  {
    "text": "you can chain these so it you smuggle to request to trigger the local redirect to",
    "start": "1879370",
    "end": "1884560"
  },
  {
    "text": "redirect the user to the page that has the actual exploitable Dom issue and use",
    "start": "1884560",
    "end": "1889990"
  },
  {
    "text": "that so this technique can be used to combine any Dom based issue based on the",
    "start": "1889990",
    "end": "1895840"
  },
  {
    "text": "URL with request smuggling to make it exploitable with no user interaction",
    "start": "1895840",
    "end": "1902820"
  },
  {
    "start": "1903000",
    "end": "2021000"
  },
  {
    "text": "now local feed of X a useful but also with address modeling because we can",
    "start": "1903510",
    "end": "1909460"
  },
  {
    "text": "control the host header a lot of local redirects a lot of your X in general turn into open lyrics in particular",
    "start": "1909460",
    "end": "1918360"
  },
  {
    "text": "Apache and I think some versions of iOS have a default behavior where if you try",
    "start": "1918360",
    "end": "1923500"
  },
  {
    "text": "and access a folder that's a real folder and you don't specify the training slash they'll give you a redirect to put the",
    "start": "1923500",
    "end": "1929800"
  },
  {
    "text": "slash on there using the host header so using this technique you can sugar AV",
    "start": "1929800",
    "end": "1934930"
  },
  {
    "text": "director not arbitrary system with requesting on pretty much any target website and by itself v directing users",
    "start": "1934930",
    "end": "1943570"
  },
  {
    "text": "isn't that great but if we can redirect a JavaScript file that lets us fight AK accounts and if we can get that we drive",
    "start": "1943570",
    "end": "1949420"
  },
  {
    "text": "it cached over the JavaScript file we can take full control over the website this technique is one of the easiest",
    "start": "1949420",
    "end": "1956360"
  },
  {
    "text": "ones and it's really fast so this became my go-to technique for exploiting websites and I earned a",
    "start": "1956360",
    "end": "1961910"
  },
  {
    "text": "decent number of different bounties using it there's a couple of other",
    "start": "1961910",
    "end": "1967760"
  },
  {
    "text": "points one is if you get a 307 redirect that is absolute dolt",
    "start": "1967760",
    "end": "1973400"
  },
  {
    "text": "because if someone's browser is doing a login request so it's posting their",
    "start": "1973400",
    "end": "1980150"
  },
  {
    "text": "username and password to a site and it gets a 307 redirect as a response it will repost",
    "start": "1980150",
    "end": "1986150"
  },
  {
    "text": "that data to the attackers website so you can make people send their password to your website from the target login",
    "start": "1986150",
    "end": "1993830"
  },
  {
    "text": "page also worth mentioning is some thick clients like HTTP live means but there",
    "start": "1993830",
    "end": "2000580"
  },
  {
    "text": "aren't browsers have that date of reposting behavior on all all redirects",
    "start": "2000580",
    "end": "2007030"
  },
  {
    "text": "so for example on a new relic I was able to steal some of the API keys because",
    "start": "2007030",
    "end": "2013240"
  },
  {
    "text": "they were v because they were reposting data even though the status code was just 301 or something like that now one",
    "start": "2013240",
    "end": "2023140"
  },
  {
    "start": "2021000",
    "end": "2085000"
  },
  {
    "text": "of the targets this we direct based cache poisoning technique works on was PayPal which might be happy and so if we",
    "start": "2023140",
    "end": "2033669"
  },
  {
    "text": "issued a request to web static without the training slash they would give IV direct and we can make that redirect go",
    "start": "2033669",
    "end": "2039580"
  },
  {
    "text": "to our serve however there was a couple of complications one is that as you can",
    "start": "2039580",
    "end": "2045040"
  },
  {
    "text": "see the two hosts headers were getting concatenated onto each other meaning that the host part of the me direct was",
    "start": "2045040",
    "end": "2050740"
  },
  {
    "text": "just broken fortunately that was easily fixed by clicking a question mark at the",
    "start": "2050740",
    "end": "2056408"
  },
  {
    "text": "end of my host header the second problem is that this V Direct uses the HTTP",
    "start": "2056409",
    "end": "2062679"
  },
  {
    "text": "protocol not HTTP and I couldn't find any way to change that which meant that when we were putting the JavaScript",
    "start": "2062679",
    "end": "2068830"
  },
  {
    "text": "files this would get blocked by mixed content protection accepts on Safari and",
    "start": "2068830",
    "end": "2075040"
  },
  {
    "text": "edge and Internet Explorer the details of that in my presentation from last year",
    "start": "2075040",
    "end": "2081440"
  },
  {
    "text": "but still that's a decent number of users and that javascript file that we",
    "start": "2081440",
    "end": "2087770"
  },
  {
    "start": "2085000",
    "end": "2179000"
  },
  {
    "text": "can permanently convert into a redirect is used on PayPal's login page however",
    "start": "2087770",
    "end": "2093500"
  },
  {
    "text": "there's a catch PayPal's login page I also use the CSP which blocks this redirect but PayPal's",
    "start": "2093500",
    "end": "2102380"
  },
  {
    "text": "login page also loads a different page in an iframe a page on seed or paper",
    "start": "2102380",
    "end": "2107480"
  },
  {
    "text": "comm and that page also imports my poisons javascript file and doesn't have",
    "start": "2107480",
    "end": "2112670"
  },
  {
    "text": "CSP so that means i can hydrate the eye frame but i can't just read the password",
    "start": "2112670",
    "end": "2120410"
  },
  {
    "text": "out the parent page because of the same origin policy the user's browser will",
    "start": "2120410",
    "end": "2125630"
  },
  {
    "text": "just block this but my colleague amethyst found a page at paypal.com",
    "start": "2125630",
    "end": "2131390"
  },
  {
    "text": "slash us slash gifts which was a static page and it didn't have CSP and it also",
    "start": "2131390",
    "end": "2139100"
  },
  {
    "text": "imported my malicious javascript file so by hijacking the iframe and by",
    "start": "2139100",
    "end": "2144650"
  },
  {
    "text": "redirecting it to this slash us slash gifts euro and then we hijacking the",
    "start": "2144650",
    "end": "2149750"
  },
  {
    "text": "iframe for the second time that got me code execution on the JavaScript",
    "start": "2149750",
    "end": "2154790"
  },
  {
    "text": "execution on the same domain so I could then read the user's paypal password out of the parent page and send it off to my",
    "start": "2154790",
    "end": "2161360"
  },
  {
    "text": "website so the effect was if anyone wanted to log in try to log into PayPal",
    "start": "2161360",
    "end": "2168260"
  },
  {
    "text": "in edge or IE or Safari I could steal their password with no user interaction and PayPal paid a decent 19 thousand",
    "start": "2168260",
    "end": "2175340"
  },
  {
    "text": "dollar bounty for that now they fix this",
    "start": "2175340",
    "end": "2180590"
  },
  {
    "text": "really fast and they did it by making the front end system which was Akamai",
    "start": "2180590",
    "end": "2185720"
  },
  {
    "text": "unsurprisingly block any requests that had the word chunked and the transfer",
    "start": "2185720",
    "end": "2191780"
  },
  {
    "text": "encoding header and at the time I looked at this defense and I kind of poked it a bit and I thought yeah that looks pretty",
    "start": "2191780",
    "end": "2198380"
  },
  {
    "text": "sound but a few weeks later I was trying out a new D synchronization technique",
    "start": "2198380",
    "end": "2205160"
  },
  {
    "text": "simply using a loin wrapped header now this attack is completely specification compliant I didn't really expect it to",
    "start": "2205160",
    "end": "2211220"
  },
  {
    "text": "work on anything it pretty much didn't work on anything directly but what it did do was exposed",
    "start": "2211220",
    "end": "2220030"
  },
  {
    "text": "an interesting little bug in Akamai where if you use line wrapping they just don't see any of the data after the new",
    "start": "2220030",
    "end": "2226660"
  },
  {
    "text": "line so when they looked at that they thought it had a blank transfer encoding header and passed it on to the backend",
    "start": "2226660",
    "end": "2232990"
  },
  {
    "text": "server so I think once again compromised ferrets login page and are another $20,000 bounty Thanks I thought",
    "start": "2232990",
    "end": "2248500"
  },
  {
    "text": "that was really generous of them especially given that I said that the first fix was fine and it wasn't okay",
    "start": "2248500",
    "end": "2256780"
  },
  {
    "start": "2255000",
    "end": "2543000"
  },
  {
    "text": "right so now we've seen a whole range of different attacks it's time for the demo",
    "start": "2256780",
    "end": "2263700"
  },
  {
    "text": "so I'm going to exploit a replica of a real system you might even recognize it",
    "start": "2263700",
    "end": "2269950"
  },
  {
    "text": "this is a system that where the real version of this holds all kinds of juicy zero-days within and this is bobzilla so",
    "start": "2269950",
    "end": "2280530"
  },
  {
    "text": "firstly I'm going to take a request to the system and I'm going to right click and click Launch smuggle probe which is",
    "start": "2280530",
    "end": "2286930"
  },
  {
    "text": "going to launch this burp suite expects extension that I'm releasing as part of this research and here we get loads of",
    "start": "2286930",
    "end": "2293980"
  },
  {
    "text": "options you can see there's tons of D synchronization techniques I've just turned them all off except for the one",
    "start": "2293980",
    "end": "2299410"
  },
  {
    "text": "that's actually going to work for the sake of speed so if I send that running we can see the requests it's sending and",
    "start": "2299410",
    "end": "2307090"
  },
  {
    "text": "if we look at the requests you can see it's using this timeout technique but I showed you earlier and sure enough we're",
    "start": "2307090",
    "end": "2313750"
  },
  {
    "text": "getting a timeout from the server now why is this message ambiguous you can",
    "start": "2313750",
    "end": "2319420"
  },
  {
    "text": "see we've got a continent here and there's a transfer encoding chunk total up here but the interesting thing is",
    "start": "2319420",
    "end": "2325330"
  },
  {
    "text": "this header that we've got before it if we switch to the hex view it'll probably",
    "start": "2325330",
    "end": "2331300"
  },
  {
    "text": "too small to see but just believe me this character that I've just highlighted is oay so I've terminated",
    "start": "2331300",
    "end": "2337780"
  },
  {
    "text": "this header with OE when you're meant to terminate headers with OD okay and",
    "start": "2337780",
    "end": "2343450"
  },
  {
    "text": "that's meant that the front in server thinks that this is one header",
    "start": "2343450",
    "end": "2348460"
  },
  {
    "text": "where's the back in which is nginx thinks that ROA by itself is terminating",
    "start": "2348460",
    "end": "2353589"
  },
  {
    "text": "the header and does see that if they're chunked continents so that's how we're able to desynchronize it and hopefully",
    "start": "2353589",
    "end": "2360940"
  },
  {
    "text": "we found this one ability yep so I'm going to right click on it and now we've got this extra option that says smuggle",
    "start": "2360940",
    "end": "2366849"
  },
  {
    "text": "attack once again this is the open source extension that I'm releasing which works with the free version at birth and so on so this is going to pop",
    "start": "2366849",
    "end": "2374079"
  },
  {
    "text": "open a turbo intruder window and you don't need to worry about changing most of it the only thing you want to change",
    "start": "2374079",
    "end": "2380559"
  },
  {
    "text": "is this prefix variable this is the malicious prefix that's going to be applied to the next",
    "start": "2380559",
    "end": "2386170"
  },
  {
    "text": "request so in this example we're going to send the attack once and a bunch of",
    "start": "2386170",
    "end": "2391359"
  },
  {
    "text": "follow-up requests that are identical and one of the follow-ups should get a 404 status code back and sure enough it",
    "start": "2391359",
    "end": "2400660"
  },
  {
    "text": "hats so these requests are identical but the first one is getting a 4/4 and that's because in the first request",
    "start": "2400660",
    "end": "2410290"
  },
  {
    "text": "we've got this attack happening here so that demonstrates the system is",
    "start": "2410290",
    "end": "2416500"
  },
  {
    "text": "vulnerable to request modeling and now we just want to try and do some damage on Bugzilla anyone by design kind of",
    "start": "2416500",
    "end": "2423309"
  },
  {
    "text": "register an account and file a bug and on a bug you can put an attachment and these attachments can contain HTML but",
    "start": "2423309",
    "end": "2430299"
  },
  {
    "text": "this isn't a security risk because if you see here the application is on web dot VM but the attachments I'll",
    "start": "2430299",
    "end": "2438849"
  },
  {
    "text": "rendered on sandbox got VM so by itself this is not a security risk",
    "start": "2438849",
    "end": "2445829"
  },
  {
    "text": "thanks to the same origin policy but maybe we can use that behavior with our",
    "start": "2445829",
    "end": "2451780"
  },
  {
    "text": "attacks so I'm gonna find the request that loads that attachment which is here and I'm just going to copy that and I'm",
    "start": "2451780",
    "end": "2458440"
  },
  {
    "text": "going to put that in the free fix",
    "start": "2458440",
    "end": "2463559"
  },
  {
    "text": "variable here so I'm applying that as a prefix to it to the next request it's",
    "start": "2463559",
    "end": "2471099"
  },
  {
    "text": "important that you leave this extra header on the end because remember the Vic request is being stuck directly on the",
    "start": "2471099",
    "end": "2478369"
  },
  {
    "text": "end of this so if I didn't have this the victims request would land on the host header and it would just break the whole",
    "start": "2478369",
    "end": "2483709"
  },
  {
    "text": "thing so if I send this the second request here we go should get even even",
    "start": "2483709",
    "end": "2490039"
  },
  {
    "text": "though it's being sent to be a mobile web dot VM it's getting our harmful",
    "start": "2490039",
    "end": "2495189"
  },
  {
    "text": "HTML file back so that demonstrates that the server is almost certainly vulnerable all we need to do now is",
    "start": "2495189",
    "end": "2501769"
  },
  {
    "text": "prove the attack and to do that I'm going to comment out the victim requests",
    "start": "2501769",
    "end": "2506959"
  },
  {
    "text": "so I'm going to leave the back in socket poisoned there we go so now for anyone browsing the site no",
    "start": "2506959",
    "end": "2514699"
  },
  {
    "text": "matter what they click I'll just do a my dashboard they will get this harmful",
    "start": "2514699",
    "end": "2520400"
  },
  {
    "text": "response back and always still their possible",
    "start": "2520400",
    "end": "2524769"
  },
  {
    "text": "[Applause]",
    "start": "2526050",
    "end": "2534310"
  },
  {
    "text": "and that got $4,000 that bounty taking",
    "start": "2534310",
    "end": "2540530"
  },
  {
    "text": "the total to 70k turn this research now to fix these vulnerabilities you have to",
    "start": "2540530",
    "end": "2547010"
  },
  {
    "start": "2543000",
    "end": "3004000"
  },
  {
    "text": "be able to find them and that means you need the right tolling so whatever tool",
    "start": "2547010",
    "end": "2552410"
  },
  {
    "text": "you're using Amy it needs to support manually changing the content length if you have a tool that automatically",
    "start": "2552410",
    "end": "2558830"
  },
  {
    "text": "updates the content anthem there's no way to turn that off you can't properly find requests smuggling vulnerabilities and also it",
    "start": "2558830",
    "end": "2566330"
  },
  {
    "text": "must not normalize requests because once again that will lead to you failing to find these vulnerabilities so in",
    "start": "2566330",
    "end": "2573020"
  },
  {
    "text": "particular this means that using Co to replicate this issue may cause you problems you'll want to use like like",
    "start": "2573020",
    "end": "2579640"
  },
  {
    "text": "netcat and then pipe it enter yeah you using their cat or I've been SSL or",
    "start": "2579640",
    "end": "2585020"
  },
  {
    "text": "something like that if you have to try and replicate this on the command line also some companies like to force pen",
    "start": "2585020",
    "end": "2593540"
  },
  {
    "text": "testers to attack the target site through a dedicated proxy just for the",
    "start": "2593540",
    "end": "2599210"
  },
  {
    "text": "pen testers and this is really bad for requests smuggling four-for-one it will",
    "start": "2599210",
    "end": "2605000"
  },
  {
    "text": "prevent you finding the great smuggling vulnerabilities that really do exist but even more amusing Lee it will also",
    "start": "2605000",
    "end": "2611570"
  },
  {
    "text": "introduced extra vulnerabilities that can only be used to exploit other pen testers so please just target the",
    "start": "2611570",
    "end": "2619790"
  },
  {
    "text": "director please target the system exactly as a normal user would be accessing it as far as preventing these",
    "start": "2619790",
    "end": "2627410"
  },
  {
    "text": "goes the best possible strategy is for the front-end to exclusively use HTTP to",
    "start": "2627410",
    "end": "2632450"
  },
  {
    "text": "to talk to all all back-end systems because this is basically a vulnerability with HTTP 1.1 if that's",
    "start": "2632450",
    "end": "2640670"
  },
  {
    "text": "not plausible the next best strategy which I have seen successfully done is",
    "start": "2640670",
    "end": "2645770"
  },
  {
    "text": "to have the front end and normalize any kind of ambiguity in request any kind of unexpected data before rooting it on to",
    "start": "2645770",
    "end": "2653690"
  },
  {
    "text": "the back-end system and that strategy is backed up by army RFC 7230",
    "start": "2653690",
    "end": "2659660"
  },
  {
    "text": "if you're forced to try and patch this on the backend system the life is a bit",
    "start": "2659660",
    "end": "2664700"
  },
  {
    "text": "more difficult the only option you've got is their fusion receiver a request that could be considered to be ambiguous",
    "start": "2664700",
    "end": "2670630"
  },
  {
    "text": "you need to drop that request like just send a 500 back and also drop the",
    "start": "2670630",
    "end": "2676040"
  },
  {
    "text": "connection so any poisoned data is thrown out there's loads of resources online the",
    "start": "2676040",
    "end": "2683120"
  },
  {
    "text": "white paper is the companion to this presentation also for the first time we've released a bunch of free in the",
    "start": "2683120",
    "end": "2690020"
  },
  {
    "text": "intentionally vulnerable websites so you can practice exploiting this fist vulnerability on real systems without",
    "start": "2690020",
    "end": "2697190"
  },
  {
    "text": "risks according causing side effects for other users the source code for this",
    "start": "2697190",
    "end": "2702860"
  },
  {
    "text": "tool is online and both of the references are well worth of eat as well",
    "start": "2702860",
    "end": "2709300"
  },
  {
    "text": "so the three key things to take away are the HTTP request smuggling is real as",
    "start": "2709330",
    "end": "2715160"
  },
  {
    "text": "much as we might not want to think about it HTTP 1.1 pausing is security critical",
    "start": "2715160",
    "end": "2720770"
  },
  {
    "text": "and must be audited in service and detection doesn't have to be dangerous",
    "start": "2720770",
    "end": "2725900"
  },
  {
    "text": "I'm going to take four minister's questions now and if you have any more after that you can come and speak to me",
    "start": "2725900",
    "end": "2732500"
  },
  {
    "text": "out in the back or chat me an email don't forget to follow me on Twitter thank you for listening",
    "start": "2732500",
    "end": "2737530"
  },
  {
    "text": "[Applause]",
    "start": "2737530",
    "end": "2741949"
  },
  {
    "text": "Thanks any questions there was a the dursa microphones around the room I have",
    "start": "2746800",
    "end": "2752780"
  },
  {
    "text": "a question I'm interested to know I haven't quite processed all this is a",
    "start": "2752780",
    "end": "2758990"
  },
  {
    "text": "lot of information and thank you that's really awesome one thing that I was thinking about that you didn't talk about I don't know if you tried we",
    "start": "2758990",
    "end": "2764780"
  },
  {
    "text": "looked into it this at all is it possible to trigger somebody to initiate",
    "start": "2764780",
    "end": "2770660"
  },
  {
    "text": "a request smuggling attack themselves through a request smuggling attacks so could you for instance cause somebody to",
    "start": "2770660",
    "end": "2776540"
  },
  {
    "text": "issue a request for something that reveals sense of information in the response and then requests muggles to",
    "start": "2776540",
    "end": "2783500"
  },
  {
    "text": "somewhere else and possibly if it's a low traffic site you could be the one who gets affected by that and receive",
    "start": "2783500",
    "end": "2789470"
  },
  {
    "text": "the response with a sense of information is that have you thought about that is that am i thinking about this wrong I",
    "start": "2789470",
    "end": "2795460"
  },
  {
    "text": "think I did too right so the question is can you trigger can you do a request",
    "start": "2795460",
    "end": "2802490"
  },
  {
    "text": "modeling that creates a knock-on effect that makes someone else to request smuggling on the next request I have",
    "start": "2802490",
    "end": "2809090"
  },
  {
    "text": "seen this happening but I've only seen it happening happening very rarely I",
    "start": "2809090",
    "end": "2815390"
  },
  {
    "text": "think yes so if it is if it's impossible",
    "start": "2815390",
    "end": "2820670"
  },
  {
    "text": "but I've never been able to successfully trigger it on a real system thank you",
    "start": "2820670",
    "end": "2828819"
  },
  {
    "text": "question over here yep I was wondering if you know that you",
    "start": "2829420",
    "end": "2834530"
  },
  {
    "text": "were detected either in the discovery or the attack phases of this kind of research and if so how that happened",
    "start": "2834530",
    "end": "2840619"
  },
  {
    "text": "what they did I didn't receive any evidence that anyone that noticed that I",
    "start": "2840619",
    "end": "2847010"
  },
  {
    "text": "was doing these attacks as far as I could tell we I didn't get IP bans met",
    "start": "2847010",
    "end": "2855290"
  },
  {
    "text": "anywhere this time around yeah I think that attack is probably relatively",
    "start": "2855290",
    "end": "2861260"
  },
  {
    "text": "tricky to detect and the current knowledge of it is is just practically",
    "start": "2861260",
    "end": "2866480"
  },
  {
    "text": "non-existent so people wouldn't know what was happening anyway like if you",
    "start": "2866480",
    "end": "2871940"
  },
  {
    "text": "try and debug this from server logs you're gonna have a really hard time figuring out what on earth is happening",
    "start": "2871940",
    "end": "2877609"
  },
  {
    "text": "your your like TCP dump to stand the chance got another question would stricter content",
    "start": "2877609",
    "end": "2885240"
  },
  {
    "text": "security policies as well as same origin policies help reduce the viability of this yes",
    "start": "2885240",
    "end": "2891600"
  },
  {
    "text": "CSP certainly makes exploiting this more challenging as we saw with PayPal and",
    "start": "2891600",
    "end": "2897780"
  },
  {
    "text": "sub source integrity can also help make this harder to exploit but neither of",
    "start": "2897780",
    "end": "2905250"
  },
  {
    "text": "neither of those will render it completely unexploited all be more yeah",
    "start": "2905250",
    "end": "2914610"
  },
  {
    "text": "the limitation you mentioned with Amina at the first ampersand a lot of servers",
    "start": "2914610",
    "end": "2920010"
  },
  {
    "text": "will normalize multiplayer forum requests did you yeah I actually some",
    "start": "2920010",
    "end": "2926400"
  },
  {
    "text": "actually spent quite a full time trying to steal foxfire's just because it's a cool kind of concept I didn't get",
    "start": "2926400",
    "end": "2933870"
  },
  {
    "text": "anywhere with multi-part but if I was going to suggest a topic for further research I feel maybe if you combine",
    "start": "2933870",
    "end": "2940800"
  },
  {
    "text": "multi-part encoding with unusual work with unusual encodings that kind of",
    "start": "2940800",
    "end": "2949440"
  },
  {
    "text": "stuff that you might be able to get to get somewhere that yeah sorry could you",
    "start": "2949440",
    "end": "2964530"
  },
  {
    "text": "be that slightly new into the mic I have",
    "start": "2964530",
    "end": "2974610"
  },
  {
    "text": "I have used request pipelining with it it's seen my experience with it is that",
    "start": "2974610",
    "end": "2981660"
  },
  {
    "text": "it decreases determinism and it's also very easy to kind of end up doing the",
    "start": "2981660",
    "end": "2987900"
  },
  {
    "text": "doing the attack just on yourself so you think it's working when it's not really working and just getting really confused",
    "start": "2987900",
    "end": "2993750"
  },
  {
    "text": "so my advice would be to in most of the time stay away from pipelining I think",
    "start": "2993750",
    "end": "2998760"
  },
  {
    "text": "that's it for time but if you have any more questions I'll be just at the back thank you [Applause]",
    "start": "2998760",
    "end": "3005949"
  }
]