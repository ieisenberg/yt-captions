[
  {
    "text": "[Music]",
    "start": "1700",
    "end": "4810"
  },
  {
    "text": "all right well welcome everyone to our session uh we are the Android red team we work for Google my name is farzan",
    "start": "7040",
    "end": "13320"
  },
  {
    "text": "curry me the engineering manager of the team I'm joined by our two senior security researchers Juan Chang our technical lead as well as Eugene",
    "start": "13320",
    "end": "19859"
  },
  {
    "text": "rodianov a special thanks to Christopher Cole as well one of our former leaders",
    "start": "19859",
    "end": "25380"
  },
  {
    "text": "in Android security for all your help Contra for your contributions to this deck but also for helping us build a",
    "start": "25380",
    "end": "31619"
  },
  {
    "text": "phenomenal red team so our presentation is uh we'll cover how Google reimagined a phone with the",
    "start": "31619",
    "end": "37559"
  },
  {
    "text": "pixel 6 and how it was our job to red team and secure it uh so this transformation from prior generation",
    "start": "37559",
    "end": "43379"
  },
  {
    "text": "phones meant that our red team had the unique task to test a phone that serves millions of customers with an entirely",
    "start": "43379",
    "end": "48660"
  },
  {
    "text": "new SOC it's a new hardware firmware of uh software components as well and we",
    "start": "48660",
    "end": "54480"
  },
  {
    "text": "had to get all this work done in about a year before launch so we're going to cover how we did that the first a little bit about who we are",
    "start": "54480",
    "end": "61020"
  },
  {
    "text": "uh our scope and how our red team fits into the Android security wheel to help secure Google products running on",
    "start": "61020",
    "end": "66840"
  },
  {
    "text": "Android OS so we'll talk about some interesting attack surface under pixel 6 and then we'll dive into some impactful",
    "start": "66840",
    "end": "72479"
  },
  {
    "text": "pocs or proof of Concepts we developed over the course of a few red team engagements so we'll be demoing the",
    "start": "72479",
    "end": "77939"
  },
  {
    "text": "first code execution on the Titan M2 today so you definitely want to stick around for that and we also have some",
    "start": "77939",
    "end": "83340"
  },
  {
    "text": "impressive work on the Android Bootloader which we call ADL so a lot of quality content to cover in this",
    "start": "83340",
    "end": "88500"
  },
  {
    "text": "presentation also want to emphasize that everything in this presentation is fixed we are not",
    "start": "88500",
    "end": "93720"
  },
  {
    "text": "dropping zero days today a little bit about who we are we are the red team we are the eyes of Android",
    "start": "93720",
    "end": "99840"
  },
  {
    "text": "security so our mission is to secure pixel and Android uh by from by attacking key uh surfaces or rather",
    "start": "99840",
    "end": "107579"
  },
  {
    "text": "features to find impactful security issues before real attackers find them so we do that a number of ways primarily",
    "start": "107579",
    "end": "113100"
  },
  {
    "text": "through red team engagements so uh this helps us validate security assumptions are real or we wind up breaking them uh",
    "start": "113100",
    "end": "120600"
  },
  {
    "text": "we scale through tool develop development primarily through fuzzing so we built fuzzers and we hand them off to",
    "start": "120600",
    "end": "125820"
  },
  {
    "text": "our Central Android fuzzing team to enhance and manage so that they can continue to work for us behind the",
    "start": "125820",
    "end": "131520"
  },
  {
    "text": "scenes 24 7 365 days a year and this is an approach we call continuous fuzzing that has provided a lot of benefit for",
    "start": "131520",
    "end": "137940"
  },
  {
    "text": "us we invest time in exploit development so this helps inform difficult security",
    "start": "137940",
    "end": "143819"
  },
  {
    "text": "decisions we found so it helps articulate impact the leadership it also helps us as a red team during the",
    "start": "143819",
    "end": "149760"
  },
  {
    "text": "exploit writing exercise find even new vulnerabilities we wouldn't have found before and finally we're deeply integrated in",
    "start": "149760",
    "end": "155520"
  },
  {
    "text": "the remediation process red team shouldn't just be finding bugs but should be active participants in",
    "start": "155520",
    "end": "161160"
  },
  {
    "text": "remediation it's ultimately how we provide the most value to the business so the business being Android and Google",
    "start": "161160",
    "end": "168239"
  },
  {
    "text": "products that run on Android such as the pixel so how do we secure these areas well our",
    "start": "168239",
    "end": "173340"
  },
  {
    "text": "Android security organization makes many Investments to ensure we ship products like pixel to you into most secure form",
    "start": "173340",
    "end": "178620"
  },
  {
    "text": "possible this the intent of this slide is just to really hone in on red team is just one integral piece of this big",
    "start": "178620",
    "end": "184620"
  },
  {
    "text": "process another big part of that process is you so thank you for all your contributions to our vrp program our",
    "start": "184620",
    "end": "190920"
  },
  {
    "text": "vulnerability Rewards program it's also a great opportunity to acknowledge some of the other sessions at black hat on",
    "start": "190920",
    "end": "196620"
  },
  {
    "text": "Android security last I counted I think there's 12 and there's actually another session",
    "start": "196620",
    "end": "202140"
  },
  {
    "text": "tomorrow on the Titan M it's really world-class research like fees that helps improve the security posture of",
    "start": "202140",
    "end": "208500"
  },
  {
    "text": "Google products like the pixel so a few words on where we focus today as a red team so we invest heavily in",
    "start": "208500",
    "end": "214920"
  },
  {
    "text": "fuzzing and static analysis so both Schwann and Eugene will dive into intensive detail on what we do here but",
    "start": "214920",
    "end": "221400"
  },
  {
    "text": "as we're growing we're also looking at server-side attacks as a red team so quick overview of the pixel Journey",
    "start": "221400",
    "end": "229200"
  },
  {
    "text": "so the point to highlight here is that there have been many iterations of pixel with unique security components uh prior",
    "start": "229200",
    "end": "235080"
  },
  {
    "text": "to the pixel 6. pixel 3 took a big step forward with the creation of the Titan M chip",
    "start": "235080",
    "end": "240420"
  },
  {
    "text": "and uh and finally with the pixel 6 we build a custom SOC that adds an additional security Enclave private",
    "start": "240420",
    "end": "246840"
  },
  {
    "text": "compute core and most importantly the Titan from our perspective the Titan M2 is introduced as the most secure element",
    "start": "246840",
    "end": "252060"
  },
  {
    "text": "in the pixel 6. so how does that Journey translate to where attackers are focused today so in",
    "start": "252060",
    "end": "259440"
  },
  {
    "text": "general vulnerability Trends are moving lower down to stack uh don't worry there's still plenty of cross-site scripting out there if that's your bread",
    "start": "259440",
    "end": "265380"
  },
  {
    "text": "and butter but as applications were moved to sandboxes attacks also started moving lower through the OS down to the",
    "start": "265380",
    "end": "271860"
  },
  {
    "text": "kernel firmware level even ROM code that makes exploits in these lower portions of the stack incredibly",
    "start": "271860",
    "end": "277259"
  },
  {
    "text": "attractive for attackers so just some supporting evidence we can look at exploit pricing at one data",
    "start": "277259",
    "end": "283800"
  },
  {
    "text": "point to support these vulnerability Trends so we've come to the consensus that if third-party markets or pricing",
    "start": "283800",
    "end": "289199"
  },
  {
    "text": "exploits against Android higher than other mobile platforms then we know we're doing a pretty good job",
    "start": "289199",
    "end": "294360"
  },
  {
    "text": "so the harder it is to explain the higher the price of those exploits generally are so this is the zero DM",
    "start": "294360",
    "end": "300180"
  },
  {
    "text": "Elemental chart of mobile payouts uh this tells us how third parties are pricing exploits on mobile platforms and",
    "start": "300180",
    "end": "305520"
  },
  {
    "text": "browsers you can see what's worth two and a half million up top that's an Android full chain with persistent zero",
    "start": "305520",
    "end": "311580"
  },
  {
    "text": "click bug again this gives it some level of confidence that we're doing good things and shipping you a secure phone",
    "start": "311580",
    "end": "318259"
  },
  {
    "text": "so let's hone in on a bit on the pixel 6 attack surface so this diagram represents a high level",
    "start": "318300",
    "end": "325139"
  },
  {
    "text": "attack surface of the Google tensor SOC in the pixel 6. what you see in light blue are updated features from previous",
    "start": "325139",
    "end": "331500"
  },
  {
    "text": "pixels dark blue is new primarily our tensor security core as well as the Titan M2 Chip uh what you see covered in",
    "start": "331500",
    "end": "338280"
  },
  {
    "text": "red now is attack surface that our red team has tested and helped mitigate uh in Prior red team reviews so we covered",
    "start": "338280",
    "end": "344280"
  },
  {
    "text": "thing areas like normal and secure world everything including our trust EOS our trusted execution environment all the",
    "start": "344280",
    "end": "350280"
  },
  {
    "text": "way to secure monitor running in the L3 now what you see in dark red is attack",
    "start": "350280",
    "end": "355620"
  },
  {
    "text": "surface that we'll cover in this presentation today again the Titan M2 and the ADL or Android Bootloader so",
    "start": "355620",
    "end": "361860"
  },
  {
    "text": "last point I want to emphasize before I hand it off to Eugene is that we're going to be talking about some pretty",
    "start": "361860",
    "end": "367020"
  },
  {
    "text": "impactful code execution bugs today but despite this we're confident in sharing with you that we're shipping the",
    "start": "367020",
    "end": "373020"
  },
  {
    "text": "most secure pixel yet with the pixel 6 and you might ask well isn't that counter-intuitive if you're telling me",
    "start": "373020",
    "end": "378600"
  },
  {
    "text": "about code execution bugs and we would say that that's exactly why the pixel 6 is so secure we've red teamed it we've",
    "start": "378600",
    "end": "384780"
  },
  {
    "text": "improved line coverage through fuzzing and static analysis we've worked with uh remediation or rather feature teams to",
    "start": "384780",
    "end": "390600"
  },
  {
    "text": "prioritize remediation efforts and Implement hardening recommendations so that we can ship you a secure phone",
    "start": "390600",
    "end": "397800"
  },
  {
    "text": "so with that said I'm going to hand it off to Eugene rhodianov who will cover the Titan M2",
    "start": "397800",
    "end": "403879"
  },
  {
    "text": "thank you for sending so from the attacker standpoint Titan M2 is",
    "start": "405360",
    "end": "411780"
  },
  {
    "text": "one of the high profile targets it is created to handle heavily secrets on Android platform and pixel devices and",
    "start": "411780",
    "end": "418460"
  },
  {
    "text": "it provides such protections against physical attacks such as fault injection as an example Android Erp program offers",
    "start": "418460",
    "end": "425460"
  },
  {
    "text": "bounties up to one million dollars per code execution on Titan M2 which signifies the security claims",
    "start": "425460",
    "end": "430979"
  },
  {
    "text": "and for Pixel and Android type number 2 provides foundational security services",
    "start": "430979",
    "end": "436020"
  },
  {
    "text": "such as a hardware-backed key storage strong box key area station it plays an essential",
    "start": "436020",
    "end": "442800"
  },
  {
    "text": "role in Android verified boot process so Titan M2 is the second version of Titan chip the first version of Titan",
    "start": "442800",
    "end": "449639"
  },
  {
    "text": "was released first in pixel 3 devices and unlike Titan M which is based on arm architecture Titan M2 is based on custom",
    "start": "449639",
    "end": "456780"
  },
  {
    "text": "risk fiber architecture build with a non-standard tool chain and runs a completely redesigned operating system",
    "start": "456780",
    "end": "462539"
  },
  {
    "text": "and firmware stack and given that there is not too much",
    "start": "462539",
    "end": "468060"
  },
  {
    "text": "publicly available information on technical details of that name I would like to reference a great paper a",
    "start": "468060",
    "end": "473160"
  },
  {
    "text": "titanium Odyssey presented at black hat 2021 which provides a lot of interesting details on reverse engineering type name",
    "start": "473160",
    "end": "479819"
  },
  {
    "text": "chip and a lot of technical details that's really great to see what the researchers could achieve with the black",
    "start": "479819",
    "end": "486180"
  },
  {
    "text": "box approach on this that Target so here is a attack surface of Titan M2 so Titan M2",
    "start": "486180",
    "end": "493199"
  },
  {
    "text": "is a discrete secure element connected to the main tensor SOC over spy bus the application processor is not able to",
    "start": "493199",
    "end": "500699"
  },
  {
    "text": "directly send data to Titan M2 over spy bus or there is an Enterprise in a",
    "start": "500699",
    "end": "506340"
  },
  {
    "text": "dedicated tensor security core which actually sends data to Titan 2 over spy bus",
    "start": "506340",
    "end": "512219"
  },
  {
    "text": "and on the left hand side of the slide we can see a high level architecture of Titan empty chips or at the bottom we",
    "start": "512219",
    "end": "518159"
  },
  {
    "text": "have mask from a hardware responsible for secure boot to boost the bootloader bootloader on its own implements",
    "start": "518159",
    "end": "524459"
  },
  {
    "text": "recovery functionality it authenticates the next stage main firmware image which",
    "start": "524459",
    "end": "529740"
  },
  {
    "text": "consists of the kernel and applications and Titan M2 implements risk fiber",
    "start": "529740",
    "end": "536100"
  },
  {
    "text": "architecture using team modes user remote and machine mode um so all the applications are running",
    "start": "536100",
    "end": "541200"
  },
  {
    "text": "in the same address space um as there is no mmu so I will be also calling them in the slides as tasks but",
    "start": "541200",
    "end": "548220"
  },
  {
    "text": "they are isolated between each other and those applications they implement the main logic of the chief exposed to their",
    "start": "548220",
    "end": "553680"
  },
  {
    "text": "SOC and the Android platform and basically those applications they",
    "start": "553680",
    "end": "559080"
  },
  {
    "text": "process uh untrusted data received from their AP and this is our main attack Vector in this uh so this is our threat",
    "start": "559080",
    "end": "566580"
  },
  {
    "text": "model so we're assuming that an attacker is able to run arbitrary code on the application processor in the privileged",
    "start": "566580",
    "end": "572580"
  },
  {
    "text": "context and is able to send arbitrary data to your titman 2.",
    "start": "572580",
    "end": "578120"
  },
  {
    "text": "uh before we dive into details are of fuzzing and vulnerabilities which we discovered in this engagement I would",
    "start": "578220",
    "end": "584880"
  },
  {
    "text": "like to say a few words about your defense and depth mitigations implemented in titanum 2 which they which make this chip more secure so well",
    "start": "584880",
    "end": "592019"
  },
  {
    "text": "there is another next policy which is enforced by physical memory protection registers and custom uh Titan extensions",
    "start": "592019",
    "end": "597959"
  },
  {
    "text": "uh which should make code section not writable and stack not executable",
    "start": "597959",
    "end": "604140"
  },
  {
    "text": "um but there isolation so or essentially physical memory protection registers are used to make sure that a certain task is",
    "start": "604140",
    "end": "611580"
  },
  {
    "text": "not able to read or write globals and stack of other tasks so that if an attacker is able to compromise sites and",
    "start": "611580",
    "end": "616980"
  },
  {
    "text": "get code execution inside one task they are not able to or compromise Secrets handled by other tasks in addition to",
    "start": "616980",
    "end": "623580"
  },
  {
    "text": "address isolation there is also a file system isolation so every task is provided with this album file system to",
    "start": "623580",
    "end": "629519"
  },
  {
    "text": "persist its secrets and finally there is a number of ciscals exposed by the",
    "start": "629519",
    "end": "634680"
  },
  {
    "text": "kernel to the applications and there is an ACL policy which allows to restrict certain Seas calls to the applications",
    "start": "634680",
    "end": "642060"
  },
  {
    "text": "which we actually don't need them so we're in this red team engagement our",
    "start": "642060",
    "end": "648060"
  },
  {
    "text": "team was tasked with uh proactively identifying and helping and helping the feature team to mitigate issues in Titan",
    "start": "648060",
    "end": "654720"
  },
  {
    "text": "M2 firmware before pixel 6 release and as far as I mentioned earlier fuzzing is",
    "start": "654720",
    "end": "660420"
  },
  {
    "text": "one of our Central methodologies and Titan Mt was no exception so we approached it using two directions a",
    "start": "660420",
    "end": "666839"
  },
  {
    "text": "host based buzzing and emulator based buzzing thanks to the implementation details of Titan M2 firmware we were",
    "start": "666839",
    "end": "674339"
  },
  {
    "text": "able to build a subset of modules for x86 32-bit architecture and as a result we came up with a very high performance",
    "start": "674339",
    "end": "681060"
  },
  {
    "text": "buzzer and we also took advantage of a large arsenal of tools available for fast and onyx86 platforms such as",
    "start": "681060",
    "end": "687899"
  },
  {
    "text": "address sanitizers uh with Father Aboriginal guided fasting engine and so on",
    "start": "687899",
    "end": "693600"
  },
  {
    "text": "as a downside of this approach there are some components which we obviously were not able to build for host nodes for",
    "start": "693600",
    "end": "698700"
  },
  {
    "text": "instance crypto task because crypto task communicates directly with the crypto Hardware which we which is not easy to",
    "start": "698700",
    "end": "704760"
  },
  {
    "text": "mock on host uh platform and also there are some architecture specific drivers",
    "start": "704760",
    "end": "709860"
  },
  {
    "text": "which we also needed to deal with so in order to cover those critical components",
    "start": "709860",
    "end": "715200"
  },
  {
    "text": "we implemented in other fuzzer using the full system emulator provided by the feature team in order to be able to",
    "start": "715200",
    "end": "720600"
  },
  {
    "text": "cover the firmware stack completely and in total we developed three fuzzers",
    "start": "720600",
    "end": "726899"
  },
  {
    "text": "so two host based fuzzers uh one Elite prot above meter coverage guided fuzzer",
    "start": "726899",
    "end": "732360"
  },
  {
    "text": "um and one dedicated father to you fast as",
    "start": "732360",
    "end": "737579"
  },
  {
    "text": "and one decoding functionality because well as we know asm1 decoding is not really difficult to get right so we want",
    "start": "737579",
    "end": "743760"
  },
  {
    "text": "to make sure that this attack surface is mitigated and additionally we have a third fuzzer emulator based fuzzer",
    "start": "743760",
    "end": "750980"
  },
  {
    "text": "and interestingly we have fuzzers number one and number three we can replace test",
    "start": "750980",
    "end": "756420"
  },
  {
    "text": "cases from each other so basically they're using the same interface um as we expected the the emulator the",
    "start": "756420",
    "end": "762600"
  },
  {
    "text": "father was quite slow uh five test cases per second this is attributed to the accuracy of the emulation of the",
    "start": "762600",
    "end": "769320"
  },
  {
    "text": "peripheral devices because this is like an accurate Hardware emulator provided by the feature team but on the",
    "start": "769320",
    "end": "775200"
  },
  {
    "text": "other hand side but on the other hand host based faster compensated for it because it's about 2.200 times faster a",
    "start": "775200",
    "end": "782519"
  },
  {
    "text": "thousand test cases per second and by running this fuzzers for some time we accumulated the initial set of issues I",
    "start": "782519",
    "end": "789540"
  },
  {
    "text": "would say that not all the issues identified in this engagements were came from the fuzzers but fuzzers were",
    "start": "789540",
    "end": "794940"
  },
  {
    "text": "instrumental in bringing our attention to our problematic code and by doing variant analysis we were able uncover",
    "start": "794940",
    "end": "800480"
  },
  {
    "text": "issues in other components and uh essentially here as we were triaging the",
    "start": "800480",
    "end": "806279"
  },
  {
    "text": "issues we were particularly interested in exploitable ones and there uh we got a few interesting examples so",
    "start": "806279",
    "end": "813600"
  },
  {
    "text": "one of this is actually out of bonds right in the identity task so as we can",
    "start": "813600",
    "end": "818880"
  },
  {
    "text": "see here there is a vulnerable mem CPI operation in a presentation push reader",
    "start": "818880",
    "end": "824279"
  },
  {
    "text": "cert so this is a pretty straightforward vulnerability to exploit quite powerful primitive where the attacker is able to",
    "start": "824279",
    "end": "829620"
  },
  {
    "text": "control public key and public key length arguments and essentially your",
    "start": "829620",
    "end": "834720"
  },
  {
    "text": "uh attacker is able to write arbitrary data of arbitral links to non-controlled address so this is not yet sufficient to",
    "start": "834720",
    "end": "842399"
  },
  {
    "text": "give code execution and we started to explore how can we improve this primitive if you look at the where with the",
    "start": "842399",
    "end": "848100"
  },
  {
    "text": "Republic key points at it actually points in global variables of the identity task and we can see that there",
    "start": "848100",
    "end": "854040"
  },
  {
    "text": "are two interesting objects located in identity tasks at offset A4 and 164 and",
    "start": "854040",
    "end": "859320"
  },
  {
    "text": "hex so our C board dot buffer size and cboard.buffer and those variables are",
    "start": "859320",
    "end": "864360"
  },
  {
    "text": "used in another operation C board and string so if we change those two",
    "start": "864360",
    "end": "869579"
  },
  {
    "text": "commands together we're able to come up with write what we're primitive very precise we can basically overwrite data",
    "start": "869579",
    "end": "876120"
  },
  {
    "text": "on the stack and uh trigger our code execution",
    "start": "876120",
    "end": "882440"
  },
  {
    "text": "well in reality it takes a little bit more interaction with the cheap to get kill execution because identity is a",
    "start": "882440",
    "end": "889079"
  },
  {
    "text": "stateful task and they're in order to exploit the first vulnerability we needed to put identity into the right",
    "start": "889079",
    "end": "894779"
  },
  {
    "text": "state so that's why basically we are replaying those commands step number one and step number two just to advance",
    "start": "894779",
    "end": "900779"
  },
  {
    "text": "identity State into the right state step number three this is actually we",
    "start": "900779",
    "end": "906060"
  },
  {
    "text": "were we exploited the first mem CPI out of bonds right and we override Global C",
    "start": "906060",
    "end": "911399"
  },
  {
    "text": "board with the attacker control values we have step number four and step number five again to your Advanced identity",
    "start": "911399",
    "end": "918360"
  },
  {
    "text": "task into the right State and at step number six we're actually delivering our Shell Code we are overwriting the return",
    "start": "918360",
    "end": "925980"
  },
  {
    "text": "address on the stack and we're executing our code so at this point we're able to run",
    "start": "925980",
    "end": "931380"
  },
  {
    "text": "arbitrary codes in the context of the identity task and uh so what we can do else",
    "start": "931380",
    "end": "939060"
  },
  {
    "text": "our ultimate goal in this engagement was to compromise high value Secrets protected by technology chip and then I started to look around and see like what",
    "start": "939060",
    "end": "945959"
  },
  {
    "text": "actually is protected by identity we we didn't find any interesting secrets you were compromised from the identity tasks",
    "start": "945959",
    "end": "952079"
  },
  {
    "text": "or we started looking like a different exploitation scenarios and one of them was actually to compromise Weber Secrets",
    "start": "952079",
    "end": "959760"
  },
  {
    "text": "by dumping a secure file system so on the previous slide I mentioned that every task is isolated file system so",
    "start": "959760",
    "end": "966839"
  },
  {
    "text": "you may wonder how it is possible well I will explain on the next slide how it is possible but right now just a quick",
    "start": "966839",
    "end": "972300"
  },
  {
    "text": "overview of what river is and how it works so we will provides a password protected storage for Secrets where a",
    "start": "972300",
    "end": "978660"
  },
  {
    "text": "user when it would like to store a secret using Weber it submits password and secret and Weaver will store those",
    "start": "978660",
    "end": "985860"
  },
  {
    "text": "objects in Secure flash in the plain text and when a user would like to retrieve",
    "start": "985860",
    "end": "990899"
  },
  {
    "text": "the secret it submissive password waiver verifies password if it matches the record it Returns the secret by reading",
    "start": "990899",
    "end": "997019"
  },
  {
    "text": "the plain text Data from The Flash if the password isn't correct obviously we refuses to return secret and then",
    "start": "997019",
    "end": "1003019"
  },
  {
    "text": "also throttles the consequent authentication attempts to prevent Brute Force attacks even with passwords uh",
    "start": "1003019",
    "end": "1009259"
  },
  {
    "text": "with low entropy and at this point when we're able to run code arbitrary code on Titan M2 we basically your bypass waiver",
    "start": "1009259",
    "end": "1016339"
  },
  {
    "text": "protection will read secret directly from The Flash and return it to the attacker and now let's take a look how it is",
    "start": "1016339",
    "end": "1022579"
  },
  {
    "text": "possible because they're um identity is not able to read the secret directly from the reverse file",
    "start": "1022579",
    "end": "1028280"
  },
  {
    "text": "system but there is a gap in the ACL policy so there are some ciscolls which enable to map The Flash page directly",
    "start": "1028280",
    "end": "1036020"
  },
  {
    "text": "into the SRAM and as a result bypass this isolation ciscals exposed by the",
    "start": "1036020",
    "end": "1041360"
  },
  {
    "text": "kernel and the identity task was actually able to call the Cisco so and here is how our",
    "start": "1041360",
    "end": "1047120"
  },
  {
    "text": "Shell Code script looks like we first invoke flash map page to map the page",
    "start": "1047120",
    "end": "1052580"
  },
  {
    "text": "with Weaver secrets into the SRAM of the identity task we use Cisco number two to",
    "start": "1052580",
    "end": "1057620"
  },
  {
    "text": "allocate a short memory buffer which will be used to transfer data to the attacker Cisco number three is a signal",
    "start": "1057620",
    "end": "1065059"
  },
  {
    "text": "to the technical that this operation is done and the title current will send data over",
    "start": "1065059",
    "end": "1072020"
  },
  {
    "text": "spy bus to the attacker and step number four is put tighten them 2 into the Sleep state to prevent them from",
    "start": "1072020",
    "end": "1077240"
  },
  {
    "text": "crashing because when the Titan will wake up from the Sleep state next time it will re-initialize the state of the",
    "start": "1077240",
    "end": "1084020"
  },
  {
    "text": "tasks and step and we can replay our attack as many times as possible without crushing the Weaver and tightening and",
    "start": "1084020",
    "end": "1091760"
  },
  {
    "text": "here is the final piece before we go to the attack is the actual the Rope gadgets that we use to run the Shell",
    "start": "1091760",
    "end": "1097400"
  },
  {
    "text": "Code we had some small difficulty to find useful rub gadgets because we really wanted to Control Function",
    "start": "1097400",
    "end": "1103640"
  },
  {
    "text": "argument registers and function in Risk 5 architecture and this is something which is",
    "start": "1103640",
    "end": "1108980"
  },
  {
    "text": "difficult to achieve um so we had four graduates in total Gadget number one will load save",
    "start": "1108980",
    "end": "1115340"
  },
  {
    "text": "registers with the attacker control values then Gadget number two will load those saved registers into the function",
    "start": "1115340",
    "end": "1121760"
  },
  {
    "text": "argument registers Gadget number three will be invoked in the Cisco and Gadget number four will start operation over",
    "start": "1121760",
    "end": "1127400"
  },
  {
    "text": "because we want to invoke four Cisco's in in a row and we have all our ingredients ready to",
    "start": "1127400",
    "end": "1134900"
  },
  {
    "text": "put our Tech together and show you the demo so we're in this case we're exploitation",
    "start": "1134900",
    "end": "1140600"
  },
  {
    "text": "happens on Raven device which is pixel 6 Pro and we are using Citadel updater command your readout the firmware",
    "start": "1140600",
    "end": "1148039"
  },
  {
    "text": "version of the running on Titan 2 which we are given to your exploit in this case",
    "start": "1148039",
    "end": "1155299"
  },
  {
    "text": "um so this is a retail firmware uh signed but your pre-production version",
    "start": "1155299",
    "end": "1161419"
  },
  {
    "text": "before device is released and right now is the next step we will",
    "start": "1161419",
    "end": "1166460"
  },
  {
    "text": "try to write a secret into the Weaver so our custom secret to simplify this work we developed a tool read dauntless flash",
    "start": "1166460",
    "end": "1172460"
  },
  {
    "text": "which essentially communicates directly with Citadel Daemon and there well we",
    "start": "1172460",
    "end": "1177559"
  },
  {
    "text": "need to have root preview just to run this so we use rightly recommend we provide three arguments the first",
    "start": "1177559",
    "end": "1182840"
  },
  {
    "text": "argument is the slot number because we will have multiple slots the second argument is actually the password and",
    "start": "1182840",
    "end": "1189440"
  },
  {
    "text": "the last argument is the secret which we would like to protect so 13 is a slot number uh this is our password and this",
    "start": "1189440",
    "end": "1196580"
  },
  {
    "text": "is our secret and we return success so it means that our secrets are right now in Weaver",
    "start": "1196580",
    "end": "1202880"
  },
  {
    "text": "right now we will use another command redweaver to retrieve the same secret",
    "start": "1202880",
    "end": "1208039"
  },
  {
    "text": "and show that everything works correctly so we use read we recommend we provide",
    "start": "1208039",
    "end": "1213500"
  },
  {
    "text": "the same slot number and we provide the same password and uh um waiver should be returning as our",
    "start": "1213500",
    "end": "1220100"
  },
  {
    "text": "secret so we got our secret back from the Weaver right now we will do a little bit different we will",
    "start": "1220100",
    "end": "1226940"
  },
  {
    "text": "we will essentially alter the password and right now Weber refuses to return to",
    "start": "1226940",
    "end": "1232039"
  },
  {
    "text": "Secret would have been really weird if it provided Secret at this point um so or do it a few more times in a row",
    "start": "1232039",
    "end": "1239419"
  },
  {
    "text": "uh to see how it throttles so right now after fifth unsuccessful attempt it tells us to wait 30 seconds",
    "start": "1239419",
    "end": "1245960"
  },
  {
    "text": "but given that we're able to run code directly on Titan we will not be waiting",
    "start": "1245960",
    "end": "1251000"
  },
  {
    "text": "soar we will be um sending our Shell Code exploit and vulnerability right away so we're using",
    "start": "1251000",
    "end": "1257900"
  },
  {
    "text": "done flash command and Flash command takes two arguments the first argument is address of The Flash page which we",
    "start": "1257900",
    "end": "1264500"
  },
  {
    "text": "would like to dump with Weaver secrets and then the number of bytes and hex to dump",
    "start": "1264500",
    "end": "1269660"
  },
  {
    "text": "and as we run it uh here we go we have our secret red from the flash memory",
    "start": "1269660",
    "end": "1276559"
  },
  {
    "text": "without providing passwords so we achieved our goal here and",
    "start": "1276559",
    "end": "1282440"
  },
  {
    "text": "if we scroll up here here is actually the commands that we will burst we have mirror sending to Weaver uh to",
    "start": "1282440",
    "end": "1289280"
  },
  {
    "text": "technology to exploit this vulnerability exactly the same six requests to your",
    "start": "1289280",
    "end": "1295220"
  },
  {
    "text": "which we showed on previous slide and I think this is probably mostly it",
    "start": "1295220",
    "end": "1300740"
  },
  {
    "text": "what I would like to say about Titan M2 before I hand it off to Shawn I would like to say a few words that even though we were able to wear final",
    "start": "1300740",
    "end": "1306620"
  },
  {
    "text": "vulnerabilities exploit them code to get code execution those issues are have been mitigated proactively before",
    "start": "1306620",
    "end": "1313100"
  },
  {
    "text": "release of pixel 6 which made their Titanium 2 and pixel 6 more secure and more importantly we developed fuzzers",
    "start": "1313100",
    "end": "1319940"
  },
  {
    "text": "which are up and running on the internal Android fuzzing infrastructure to provide continuous fuzzing and",
    "start": "1319940",
    "end": "1325760"
  },
  {
    "text": "continuous security for taking them to Firmware and with that I'm transferring to Schwan",
    "start": "1325760",
    "end": "1332140"
  },
  {
    "text": "hey thanks Eugene let's take a look at another component",
    "start": "1333620",
    "end": "1338780"
  },
  {
    "text": "that we covered so this is AVL we're going through the very interesting issue that we discovered and show a code",
    "start": "1338780",
    "end": "1345679"
  },
  {
    "text": "execution that based on this issue",
    "start": "1345679",
    "end": "1350080"
  },
  {
    "text": "so here's a very high overly simplified boot sequence how",
    "start": "1350960",
    "end": "1356000"
  },
  {
    "text": "pixel 6 works so the boot ROM starts at the beginning and it loads PBA or pr1",
    "start": "1356000",
    "end": "1361460"
  },
  {
    "text": "and from there it initialized trust the environment and it also loads APR in non-secure DIY environment ABR will",
    "start": "1361460",
    "end": "1368720"
  },
  {
    "text": "eventually jump to Android kernel but before doing that it also talks to trusty apps to secure some",
    "start": "1368720",
    "end": "1374780"
  },
  {
    "text": "configurations and ABR is a very important piece in the",
    "start": "1374780",
    "end": "1380960"
  },
  {
    "text": "Android boot chain for example it does lock down some security settings before kernel is loaded it implements the",
    "start": "1380960",
    "end": "1387200"
  },
  {
    "text": "Android verify boot it of course loads a kernel and it also hosts our recovery",
    "start": "1387200",
    "end": "1392299"
  },
  {
    "text": "environment which is fastboot and because of all that APR shows a bigger attack surface compared to other",
    "start": "1392299",
    "end": "1398720"
  },
  {
    "text": "pool of the components for example in general recovery interface is a historical source of",
    "start": "1398720",
    "end": "1404360"
  },
  {
    "text": "security issues especially for secure boot and also ADR is dealing with arbitrary",
    "start": "1404360",
    "end": "1410480"
  },
  {
    "text": "user input via fastboot implementations and of course it also needs to load and",
    "start": "1410480",
    "end": "1416600"
  },
  {
    "text": "update some Android configurations which are usually stored in the flash which is considered as an unsecured source",
    "start": "1416600",
    "end": "1424039"
  },
  {
    "text": "and lastly APR is also responsible for loading and verifying kernel signatures which is another attack surface",
    "start": "1424039",
    "end": "1432820"
  },
  {
    "text": "so because of all the other we include AVR into our engagement for this component there are some low level",
    "start": "1433039",
    "end": "1440299"
  },
  {
    "text": "dependencies to Hardware so it's not easy to fast so we decide to go with manual code reviews",
    "start": "1440299",
    "end": "1446120"
  },
  {
    "text": "for this engagement our main focus is actually on the fastboot handlers but while doing that we noticed a very",
    "start": "1446120",
    "end": "1452720"
  },
  {
    "text": "interesting issue from our Eurotech surface which leads to our poc in this case so",
    "start": "1452720",
    "end": "1458840"
  },
  {
    "text": "the issue we look into is the hip OB ride in the GPT practice handlers",
    "start": "1458840",
    "end": "1465640"
  },
  {
    "text": "to demonstrate that we need to modify the GPT headers in Flash and we could install the chip modify the Flash and",
    "start": "1465799",
    "end": "1472640"
  },
  {
    "text": "restarter it but that's destructive and technically it's hard to do that so we",
    "start": "1472640",
    "end": "1478159"
  },
  {
    "text": "think okay let's step back and assuming we already have a good privilege what can we do we can probably modify the",
    "start": "1478159",
    "end": "1484100"
  },
  {
    "text": "block devices directly and and then reboot to activate our attacks",
    "start": "1484100",
    "end": "1489679"
  },
  {
    "text": "so that means we have a prerequisite is a root privilege",
    "start": "1489679",
    "end": "1494620"
  },
  {
    "text": "code here's how the code looks like on the right side we have two structures defined according to the GPT format and",
    "start": "1499100",
    "end": "1506419"
  },
  {
    "text": "on the left side we have a function parsing the GPD headers it does this by",
    "start": "1506419",
    "end": "1511880"
  },
  {
    "text": "first allocating a maximum buffer that is able to holding the maximum allowed DVD entries and the calculation is Down",
    "start": "1511880",
    "end": "1518960"
  },
  {
    "text": "based on the side of the structure and the maximum number of activity entries and after that it loads The Flash into",
    "start": "1518960",
    "end": "1526340"
  },
  {
    "text": "this buffer however when doing the load instead of using the side of the structure and using the size declared in",
    "start": "1526340",
    "end": "1532760"
  },
  {
    "text": "the header itself and the header is not very uh is not validated",
    "start": "1532760",
    "end": "1538400"
  },
  {
    "text": "so in this case if we put a large value in the header or entry size we can trick",
    "start": "1538400",
    "end": "1544039"
  },
  {
    "text": "the AVL to read more data than it should be into the buffer that creates a heat",
    "start": "1544039",
    "end": "1549140"
  },
  {
    "text": "buff override so how do we explore this issue",
    "start": "1549140",
    "end": "1554720"
  },
  {
    "text": "not two cents first ABR uses a linked list based Heap implementation so that",
    "start": "1554720",
    "end": "1559760"
  },
  {
    "text": "means classic hip-hop overflow works here another thing I want to call it is that we have multiple flash disks on the on",
    "start": "1559760",
    "end": "1567260"
  },
  {
    "text": "the device and every disk has a dpd header that means we can explore this issue multiple times not just once",
    "start": "1567260",
    "end": "1575360"
  },
  {
    "text": "assuming that this is first time when the code runs and this is hip layout so",
    "start": "1575360",
    "end": "1580880"
  },
  {
    "text": "we have a TPT entries pointed to the Adobe buffer and following that buffer is a free Block buffer and in the free",
    "start": "1580880",
    "end": "1588740"
  },
  {
    "text": "Block there's a header showing the side of the free block and also the next free Block",
    "start": "1588740",
    "end": "1594740"
  },
  {
    "text": "so we prepare our first GPD header so that after read it overrides this header and modifies",
    "start": "1594740",
    "end": "1601760"
  },
  {
    "text": "the size to be a very small value and also modifies the P next to a stack area",
    "start": "1601760",
    "end": "1609400"
  },
  {
    "text": "so next time when the code tries to load the next GPD header or try to allocate the same buffer from the Heap but",
    "start": "1609980",
    "end": "1617539"
  },
  {
    "text": "because it modified the size to be a very small value it's not able to hold that so try to follow this chain to the",
    "start": "1617539",
    "end": "1622880"
  },
  {
    "text": "next memory buffer which is the buffer we specified on step after reading GPD headers",
    "start": "1622880",
    "end": "1629419"
  },
  {
    "text": "we overwrite the call frame that contains ARR and other registers from",
    "start": "1629419",
    "end": "1634760"
  },
  {
    "text": "there we control our PC registers so starting from here we could just wrap",
    "start": "1634760",
    "end": "1641600"
  },
  {
    "text": "our way to get our code executions and I guess first thing you would do is modify the MMA configurations to add to",
    "start": "1641600",
    "end": "1648559"
  },
  {
    "text": "add more executable areas but we found well there's an easy way there's a",
    "start": "1648559",
    "end": "1655400"
  },
  {
    "text": "incorrectly configured memory region which is marked and read write executable and its address is predefined",
    "start": "1655400",
    "end": "1663799"
  },
  {
    "text": "so all we need is run our payload to this region and then jump to it so that",
    "start": "1663799",
    "end": "1669679"
  },
  {
    "text": "gives our full control of abl in the real case there's always troubles",
    "start": "1669679",
    "end": "1676039"
  },
  {
    "text": "we'll Implement that for example we have to be very careful we modify the GPD",
    "start": "1676039",
    "end": "1681380"
  },
  {
    "text": "headers because if we modify it containing the PBR or other earlier stage bootloaders our device will be",
    "start": "1681380",
    "end": "1687679"
  },
  {
    "text": "bricked it won't be getting through here now recovery from there without fastboot",
    "start": "1687679",
    "end": "1692720"
  },
  {
    "text": "interface is not a good experience and the other thing is in APR there's a",
    "start": "1692720",
    "end": "1698779"
  },
  {
    "text": "multi-threading happening so there's some synchronization environment we need to fix after we get into control",
    "start": "1698779",
    "end": "1706179"
  },
  {
    "text": "so now we get code executions but what's impact remember we require root",
    "start": "1707480",
    "end": "1712760"
  },
  {
    "text": "privilege and that is very close to a kernel and it's running a year when not",
    "start": "1712760",
    "end": "1718400"
  },
  {
    "text": "secure so we get code execution eery input loader is that something",
    "start": "1718400",
    "end": "1723679"
  },
  {
    "text": "better than codex extreme kernel yes first is we get full persistence by default because our attack is from flash",
    "start": "1723679",
    "end": "1730580"
  },
  {
    "text": "it's by default survives the reboots and also even OT updates the next thing is",
    "start": "1730580",
    "end": "1735799"
  },
  {
    "text": "that our bootloader can now run malicious kernel without violating a testation",
    "start": "1735799",
    "end": "1742880"
  },
  {
    "text": "service integrity that's because this exploitation happens earlier than the",
    "start": "1742880",
    "end": "1748520"
  },
  {
    "text": "key master initialization so that the exploit cash boost AVB measurement by providing expected hash",
    "start": "1748520",
    "end": "1755539"
  },
  {
    "text": "OS patch lab or unlock status and from there the malicious kernel is",
    "start": "1755539",
    "end": "1761840"
  },
  {
    "text": "allowed to use key Masters protective secrets so with that let's take a look at a demo",
    "start": "1761840",
    "end": "1770860"
  },
  {
    "text": "so we have our pixel 6 device connected to the laptop and in theory we should we're supposed",
    "start": "1771860",
    "end": "1777799"
  },
  {
    "text": "to use a root vulnerability first to get there but we didn't have one so we just use the debug build it gives us root",
    "start": "1777799",
    "end": "1784279"
  },
  {
    "text": "access automatically but even with user debug build the device is still running a locked production sign for loader so",
    "start": "1784279",
    "end": "1791600"
  },
  {
    "text": "we are still attacking the right target and our only operation here is to",
    "start": "1791600",
    "end": "1797899"
  },
  {
    "text": "prepare our exploit and write to GPD headers we use ufs2 and ufs3 these two",
    "start": "1797899",
    "end": "1804140"
  },
  {
    "text": "are proved working and all the other competitions will break the device",
    "start": "1804140",
    "end": "1809200"
  },
  {
    "text": "and this is a done deal once we write that we reboot the device to activate the attack if it works it works if it",
    "start": "1809779",
    "end": "1815960"
  },
  {
    "text": "doesn't we break our device so now we reboot into bootloader we do",
    "start": "1815960",
    "end": "1822740"
  },
  {
    "text": "that because our payload is implemented as a fastboot Handler but in real scenario you don't have to do that you",
    "start": "1822740",
    "end": "1829279"
  },
  {
    "text": "can just reboot into regular mode and our payload will still run so now that the device is rebooting and",
    "start": "1829279",
    "end": "1837380"
  },
  {
    "text": "let's check first a secure boot element so it shows production that means the",
    "start": "1837380",
    "end": "1843260"
  },
  {
    "text": "device security is still enabled and here's our bootloader version",
    "start": "1843260",
    "end": "1850658"
  },
  {
    "text": "yeah for this one you're gonna have to trust me this is the retail version but loaders",
    "start": "1853520",
    "end": "1858580"
  },
  {
    "text": "and now let's check our magic command we call it OEM rootkit",
    "start": "1859520",
    "end": "1866200"
  },
  {
    "text": "yep so this icon shows okay our code is running ABR actually for demo purposes our rootkit Implement",
    "start": "1867320",
    "end": "1875179"
  },
  {
    "text": "only two commands the first one is read arbitrary memory from the address",
    "start": "1875179",
    "end": "1881380"
  },
  {
    "text": "and the other one is patch the memory with arbitrary values so this proves that we gain full control",
    "start": "1888860",
    "end": "1896120"
  },
  {
    "text": "of abl and okay we can do whatever we want from there and if you reboot the device our attack is still there",
    "start": "1896120",
    "end": "1904940"
  },
  {
    "text": "so let's conclude the demo the series we used for this demo the first one is OB right that's assessed as",
    "start": "1904940",
    "end": "1911899"
  },
  {
    "text": "a high severity the other one is read write executable memory configurations which is also high and both issues are",
    "start": "1911899",
    "end": "1918679"
  },
  {
    "text": "already patched and released on the device from here I'll head over to farzan for",
    "start": "1918679",
    "end": "1924260"
  },
  {
    "text": "the conclusions all right thank you Sean all right so",
    "start": "1924260",
    "end": "1931279"
  },
  {
    "text": "I'm just a brief concluding thoughts to leave some room from q a uh so our red team identified impactful",
    "start": "1931279",
    "end": "1937520"
  },
  {
    "text": "issues during our pixel 6 reviews for those who have not yet invested in red teaming we highly encourage you to do it",
    "start": "1937520",
    "end": "1942620"
  },
  {
    "text": "it provides that adversarial input into your security program on fuzzing the team continues to manually develop",
    "start": "1942620",
    "end": "1948740"
  },
  {
    "text": "fuzzers that run in perpetuity uh so that helps us scale but despite that ability to scale a fuzzing ain't easy",
    "start": "1948740",
    "end": "1956059"
  },
  {
    "text": "and so specifically a fuzzing bare metal code so having a good Hardware abstraction layer and good",
    "start": "1956059",
    "end": "1961159"
  },
  {
    "text": "compartmentalization really helps uh that make that process easier for us uh mitigations while doing Security",
    "start": "1961159",
    "end": "1968000"
  },
  {
    "text": "reviews we noticed a common theme when we were reviewing low-level components that there was some basic mitigations",
    "start": "1968000",
    "end": "1973279"
  },
  {
    "text": "that were not implemented such as aslr so we're actually working with various feature teams to assess the feasibility",
    "start": "1973279",
    "end": "1979340"
  },
  {
    "text": "of these moving forward and uh finally the the last Point we'd",
    "start": "1979340",
    "end": "1984919"
  },
  {
    "text": "like to land is that we want to emphasize your pixel 6 is the most secure pixel to date uh sure we talked about impactful code execution bugs but",
    "start": "1984919",
    "end": "1991399"
  },
  {
    "text": "again this is a good thing there's no bugless software and proactively identifying security issues like these",
    "start": "1991399",
    "end": "1996740"
  },
  {
    "text": "that Sean and Eugene talked about through red teaming is a very positive benefit of having an offensive security",
    "start": "1996740",
    "end": "2002260"
  },
  {
    "text": "program we're also being transparent about our process so the community grows from knowledge sharing we also encourage the",
    "start": "2002260",
    "end": "2009880"
  },
  {
    "text": "folks out there to continue submitting to our vrp program we've had actually a pretty active uh researcher that's been",
    "start": "2009880",
    "end": "2017440"
  },
  {
    "text": "submitting bugs I think the last two bugs they submitted were worth more than 40K each so we decided to just hire that",
    "start": "2017440",
    "end": "2023320"
  },
  {
    "text": "person instead of paying them out continuously probably better for the company big kudos to the Google pixel",
    "start": "2023320",
    "end": "2030220"
  },
  {
    "text": "and Android feature teams they value security and support remediation work as if it was the next big priority feature",
    "start": "2030220",
    "end": "2037059"
  },
  {
    "text": "and finally our work is never done right so we're already working closely with pixel in the Next Generation phone we",
    "start": "2037059",
    "end": "2043120"
  },
  {
    "text": "have a presentation in the works on the pixel modem as well it's a lot of great work there it's a great point to land here at the end uh red teams in the",
    "start": "2043120",
    "end": "2049599"
  },
  {
    "text": "industry often look at Products Post deployment uh you can get profound exponential impact if you integrate your",
    "start": "2049599",
    "end": "2055658"
  },
  {
    "text": "red team into your software development life cycle so you can catch these issues of how to launch with that uh we'll move",
    "start": "2055659",
    "end": "2061480"
  },
  {
    "text": "over to uh thank you everyone rather for your time we'll move over to q a",
    "start": "2061480",
    "end": "2066659"
  },
  {
    "text": "[Music]",
    "start": "2067530",
    "end": "2070638"
  },
  {
    "text": "thank you",
    "start": "2074700",
    "end": "2077760"
  }
]