[
  {
    "text": "[Music]",
    "start": "1700",
    "end": "4810"
  },
  {
    "text": "and without further Ado I'd like to welcome today's presenter Yang Wang",
    "start": "7280",
    "end": "13320"
  },
  {
    "text": "okay good morning and evening welcome to my talk",
    "start": "13320",
    "end": "18420"
  },
  {
    "text": "my name is Wang Yong I focus on Android and the brother vulnerability research",
    "start": "18420",
    "end": "23580"
  },
  {
    "text": "you can follow me on Twitter my DM is open by the way one of my friends wants",
    "start": "23580",
    "end": "30060"
  },
  {
    "text": "to know if there are some jobs in Canada for foreigners he is also a vulnerability researcher in Singapore I",
    "start": "30060",
    "end": "37980"
  },
  {
    "text": "really appreciate your sharing of the job information Harry's agenda I will briefly review the",
    "start": "37980",
    "end": "46140"
  },
  {
    "text": "conventional ideas and steps of exploiting a uaf vulnerability in the",
    "start": "46140",
    "end": "52020"
  },
  {
    "text": "general cache and the details why the technique of cross-cash attack has to be",
    "start": "52020",
    "end": "57899"
  },
  {
    "text": "a planned when exploiting a uaf bug in the dedicated cache then I will",
    "start": "57899",
    "end": "64140"
  },
  {
    "text": "introduce a return to page a new and generic exploitation technique",
    "start": "64140",
    "end": "69560"
  },
  {
    "text": "specifically I will review the critical parts of both slab and the body",
    "start": "69560",
    "end": "75299"
  },
  {
    "text": "allocator and I will detail the well-known cross-catch attack techniques",
    "start": "75299",
    "end": "80400"
  },
  {
    "text": "and discuss why those techniques are time consuming and the less deterministic and I will also detail the",
    "start": "80400",
    "end": "88619"
  },
  {
    "text": "king idea and the cons conceptual module behind the new exploitation technique",
    "start": "88619",
    "end": "95100"
  },
  {
    "text": "to clearly understand the technique I will discuss the two typical uaf",
    "start": "95100",
    "end": "101040"
  },
  {
    "text": "vulnerability fixed the last year detail how to exploit those two vulnerabilities",
    "start": "101040",
    "end": "107360"
  },
  {
    "text": "respectively the last part just to summarize the talk",
    "start": "107360",
    "end": "112979"
  },
  {
    "text": "he needs Carlo there are two main categories have cash in general and",
    "start": "112979",
    "end": "118380"
  },
  {
    "text": "dedicated cash for General cash just the invoke King memory and K3 API to",
    "start": "118380",
    "end": "125340"
  },
  {
    "text": "allocate and free a help object for dedicated cash the cash is created for a",
    "start": "125340",
    "end": "132780"
  },
  {
    "text": "specific type the cache must be provided when allocating and freely",
    "start": "132780",
    "end": "138900"
  },
  {
    "text": "as a mailing attack surfaces have been reduced in recent years fuel bugs can be",
    "start": "138900",
    "end": "145319"
  },
  {
    "text": "exploited from the untrusted app context in Android color the second part in the",
    "start": "145319",
    "end": "152099"
  },
  {
    "text": "e-post subsystem and the fourth stack in the TTY driver fixed last year caused a",
    "start": "152099",
    "end": "158340"
  },
  {
    "text": "little attention even if the second one was exploited in the wild last year",
    "start": "158340",
    "end": "164099"
  },
  {
    "text": "there are no public exploits against the Andrew Carlo like the 30 people",
    "start": "164099",
    "end": "170760"
  },
  {
    "text": "before discussing how to exploit a uaf vulnerability in the dedicated cache let",
    "start": "170760",
    "end": "177900"
  },
  {
    "text": "me briefly review two typical Android exploits about how to exploit a uaf",
    "start": "177900",
    "end": "184019"
  },
  {
    "text": "vulnerability in the general cache the first UF vulnerability is 7 year",
    "start": "184019",
    "end": "191220"
  },
  {
    "text": "2020 00141 they'll relate the bundle load object is",
    "start": "191220",
    "end": "197700"
  },
  {
    "text": "allocated the incremental 128 cash in order to leak color pointers",
    "start": "197700",
    "end": "204599"
  },
  {
    "text": "to fix a bundle load object the public exploits brings the e-port item objects",
    "start": "204599",
    "end": "212400"
  },
  {
    "text": "to refuse the freedom load object after leaking the color address of the bundle",
    "start": "212400",
    "end": "219180"
  },
  {
    "text": "load the exploit use send messages spring technique to obtain the right",
    "start": "219180",
    "end": "225239"
  },
  {
    "text": "primitive then corrupts some fields of the leaked pointers to obtain aarw",
    "start": "225239",
    "end": "232260"
  },
  {
    "text": "Primitives the second one is also a bundled bag",
    "start": "232260",
    "end": "237920"
  },
  {
    "text": "they exploit the Sprint's sequential field objects to obtain color slide",
    "start": "237920",
    "end": "245459"
  },
  {
    "text": "and it also use the import item objects to obtain aarw Primitives",
    "start": "245459",
    "end": "254000"
  },
  {
    "text": "it's easy to find out that the sequential field objects is indeed",
    "start": "254459",
    "end": "259680"
  },
  {
    "text": "allocated in the general cache however the EP item object seems to be allocated",
    "start": "259680",
    "end": "266520"
  },
  {
    "text": "in the dedicated cache to remove the doubt let's dive into the source code",
    "start": "266520",
    "end": "274639"
  },
  {
    "text": "when creating a new slab cache it will first try try to find an alias cache it",
    "start": "275520",
    "end": "283800"
  },
  {
    "text": "aims to reduce the memory fragmentation the slab emerge config is usually",
    "start": "283800",
    "end": "291540"
  },
  {
    "text": "enabled is the main switch if the new cache has a Constructor it can't be",
    "start": "291540",
    "end": "298740"
  },
  {
    "text": "merged into another cache without any special flag the new cache will be",
    "start": "298740",
    "end": "305220"
  },
  {
    "text": "merged into a ladder cache which basically has the same config so that's why the EP item objects are",
    "start": "305220",
    "end": "314160"
  },
  {
    "text": "eventually allocated in the general cache since change the front Android Carlo",
    "start": "314160",
    "end": "321740"
  },
  {
    "text": "4.19 the sequential field has its own cache and the slab account is said that",
    "start": "321740",
    "end": "329520"
  },
  {
    "text": "means both of the two caches will not be merged into the general cache",
    "start": "329520",
    "end": "336120"
  },
  {
    "text": "for our Android 10 to Android 11 both free list the random and the free list",
    "start": "336120",
    "end": "342300"
  },
  {
    "text": "adding are enabled in my view is a kind of oob mitigation and the Alias switch",
    "start": "342300",
    "end": "350880"
  },
  {
    "text": "is still on from Android Carlo",
    "start": "350880",
    "end": "356360"
  },
  {
    "text": "5.4 the aliens switch is off by default",
    "start": "356360",
    "end": "362360"
  },
  {
    "text": "that means the dedicated cache will never be merged into the general cache",
    "start": "362699",
    "end": "368100"
  },
  {
    "text": "the cost is increasing the memory fragmentation",
    "start": "368100",
    "end": "373759"
  },
  {
    "text": "upperversity different types of objects are located from Key malloc still share",
    "start": "373759",
    "end": "380580"
  },
  {
    "text": "the same cache so to exploit a bug in the dedicated",
    "start": "380580",
    "end": "385860"
  },
  {
    "text": "cache cross-cash attack techniques have to be planned to make different types of",
    "start": "385860",
    "end": "392539"
  },
  {
    "text": "objects share the same memory a second part",
    "start": "392539",
    "end": "399319"
  },
  {
    "text": "here is the typical example of how to exploit a uaf bug the key point is that",
    "start": "399319",
    "end": "406259"
  },
  {
    "text": "one of these is overlapped with the freed of GPA so how to refuse the freed",
    "start": "406259",
    "end": "412919"
  },
  {
    "text": "object a reliably to answer this question let's dive into the slab",
    "start": "412919",
    "end": "418680"
  },
  {
    "text": "allocator here I list some important fields of the key memory cache now just focus on the",
    "start": "418680",
    "end": "427620"
  },
  {
    "text": "CPU slab and the load fields the CPU cache CPU sorry the key memory is cache",
    "start": "427620",
    "end": "436080"
  },
  {
    "text": "CPU is allocated the perceptual call first we can pick a process to a",
    "start": "436080",
    "end": "442319"
  },
  {
    "text": "specific CPU code by setting the Affinity where you can simply record",
    "start": "442319",
    "end": "447660"
  },
  {
    "text": "like that there is only one CPU core for Android devices the long uniform memory",
    "start": "447660",
    "end": "454560"
  },
  {
    "text": "architecture does not be enabled enabled so there is only one CPU cash load",
    "start": "454560",
    "end": "464039"
  },
  {
    "text": "when allocating an object is the first tries to allocate from the free list the",
    "start": "464039",
    "end": "470759"
  },
  {
    "text": "free list points to a physical page here the page frame number is the 11th result",
    "start": "470759",
    "end": "478460"
  },
  {
    "text": "is the so-called first path when page 1100 is full page 2020 the",
    "start": "478460",
    "end": "487620"
  },
  {
    "text": "result will be moved into the free list now the partial list of K member cache",
    "start": "487620",
    "end": "495840"
  },
  {
    "text": "is empty Pages 33000 in the past you list of key memory cash load will be",
    "start": "495840",
    "end": "503220"
  },
  {
    "text": "moved into the free list after all the pages in the partial list",
    "start": "503220",
    "end": "509400"
  },
  {
    "text": "our K memory cash load are full of objects a new page 1338 will be",
    "start": "509400",
    "end": "516300"
  },
  {
    "text": "allocated from the body allocator when freeing an object of page 35",
    "start": "516300",
    "end": "525860"
  },
  {
    "text": "respectively the two pages will be added to the partial list of key memory cache",
    "start": "529339",
    "end": "536459"
  },
  {
    "text": "CPU the pages are you are in a so-called freeze state",
    "start": "536459",
    "end": "543500"
  },
  {
    "text": "when the number of free the objects in a partial list our K memory cache CPU is a",
    "start": "543500",
    "end": "549839"
  },
  {
    "text": "larger than CPU passion page 2200 under page 11 the result will",
    "start": "549839",
    "end": "556980"
  },
  {
    "text": "be added to their partial list of camera K member cash load not this game memory",
    "start": "556980",
    "end": "566420"
  },
  {
    "text": "sorry not the herlo cash CPU",
    "start": "566580",
    "end": "571740"
  },
  {
    "text": "with the number of pages in a partial list of key memory cash load is the",
    "start": "571740",
    "end": "577740"
  },
  {
    "text": "larger than million cap passion the MPT page 1100 will be freed and reclaimed by",
    "start": "577740",
    "end": "586019"
  },
  {
    "text": "the body allocator suppose a user handle is associated with",
    "start": "586019",
    "end": "593399"
  },
  {
    "text": "the freed object a it's possible that a is allocated from page 2020",
    "start": "593399",
    "end": "601339"
  },
  {
    "text": "22.00 it doesn't matter when screening object B is probably that",
    "start": "601339",
    "end": "609660"
  },
  {
    "text": "the freed object a is reviewed the first path makes it reliable",
    "start": "609660",
    "end": "617600"
  },
  {
    "text": "so this become complicated with the freed object is allocated from the",
    "start": "617660",
    "end": "624060"
  },
  {
    "text": "dedicated cache here both A and B have their own cache",
    "start": "624060",
    "end": "630320"
  },
  {
    "text": "so three orbital B cannot reveal the fluid object a",
    "start": "630320",
    "end": "637339"
  },
  {
    "text": "although the freed object a cannot directly be reviewed with other types of",
    "start": "637620",
    "end": "644459"
  },
  {
    "text": "objects it's possible to freeze the related physical page and the page can",
    "start": "644459",
    "end": "651000"
  },
  {
    "text": "be allocated to other caches so the freed object a can be reviewed by this",
    "start": "651000",
    "end": "657300"
  },
  {
    "text": "indirect way but how to reuse the freedom physical page reliably to answer this question",
    "start": "657300",
    "end": "665000"
  },
  {
    "text": "let's dive into the physical page allocator",
    "start": "665000",
    "end": "670380"
  },
  {
    "text": "this is the classical body allocator I take from the book The allocator",
    "start": "670380",
    "end": "675779"
  },
  {
    "text": "maintains blocks of three pages where each block is a part of two number of",
    "start": "675779",
    "end": "682260"
  },
  {
    "text": "pages you can clearly understand the three-page management I put the two",
    "start": "682260",
    "end": "689459"
  },
  {
    "text": "allocators together here the author of the cache u3 it means that the slab slab",
    "start": "689459",
    "end": "697320"
  },
  {
    "text": "page contains eight physical pages and the partial list of both can memory",
    "start": "697320",
    "end": "704220"
  },
  {
    "text": "cache CPU and the key memory cash load are empty and the the order of compound",
    "start": "704220",
    "end": "710579"
  },
  {
    "text": "Pages 1338 and 533803",
    "start": "710579",
    "end": "716040"
  },
  {
    "text": "so page1338 will be allocated when",
    "start": "716779",
    "end": "721860"
  },
  {
    "text": "allocating a new object when page 1338 in full page 5338 will be",
    "start": "721860",
    "end": "731640"
  },
  {
    "text": "allocated now there is no third order compound page",
    "start": "731640",
    "end": "738140"
  },
  {
    "text": "when page 5338 is full the fourth order compound",
    "start": "738360",
    "end": "743640"
  },
  {
    "text": "page eight one the result will be spilled into bodies",
    "start": "743640",
    "end": "750500"
  },
  {
    "text": "now we began to begin to free the objects specifically except the page",
    "start": "751100",
    "end": "759500"
  },
  {
    "text": "8108 make all other Pages partial were empty",
    "start": "759500",
    "end": "764940"
  },
  {
    "text": "and the most important sense that the number of pages in the partial list of K",
    "start": "764940",
    "end": "771420"
  },
  {
    "text": "member cash load is larger than merely cap millilitation",
    "start": "771420",
    "end": "777200"
  },
  {
    "text": "when page 8108 is empty it will be reclaimed",
    "start": "777200",
    "end": "785180"
  },
  {
    "text": "as the party page 8 8 1 0 0 is still",
    "start": "785180",
    "end": "790860"
  },
  {
    "text": "free the two-thirds of other compound page will be merged in merged to form a",
    "start": "790860",
    "end": "798420"
  },
  {
    "text": "fourth order compound page so that's basically how a slab page is",
    "start": "798420",
    "end": "806040"
  },
  {
    "text": "handled by those two allocators",
    "start": "806040",
    "end": "810560"
  },
  {
    "text": "in fact there are several zones based on the miggregation type",
    "start": "811139",
    "end": "818279"
  },
  {
    "text": "here is the basic idea about cross-cash attack in the limbs Carlo the first step",
    "start": "818279",
    "end": "825839"
  },
  {
    "text": "is bringing the objects not only the current slab page exhaust data but also",
    "start": "825839",
    "end": "832740"
  },
  {
    "text": "all the pages in a partial list must be occupied the red block represents the vulnerable",
    "start": "832740",
    "end": "840320"
  },
  {
    "text": "objective after triggering the uaf bug other objects in the current slab page",
    "start": "840320",
    "end": "847380"
  },
  {
    "text": "are freed make the current slab page empty next the slab page is reclaimed by",
    "start": "847380",
    "end": "855000"
  },
  {
    "text": "the body allocator when spring object B is the word first exhaust the partial",
    "start": "855000",
    "end": "862019"
  },
  {
    "text": "list of both can memory cache CPU and keep memory cash load",
    "start": "862019",
    "end": "868019"
  },
  {
    "text": "then the cashew will require more pages if the free the page is successfully",
    "start": "868019",
    "end": "874519"
  },
  {
    "text": "allocated for the cache object B can be over overlapped with the",
    "start": "874519",
    "end": "881040"
  },
  {
    "text": "vulnerable object a to cross the slab cache the related",
    "start": "881040",
    "end": "887579"
  },
  {
    "text": "Pages must be in the free state so the step one two three is required and to",
    "start": "887579",
    "end": "894540"
  },
  {
    "text": "allocate a new slab page is required to exhaust the water free slab page first",
    "start": "894540",
    "end": "901699"
  },
  {
    "text": "this is the reason why cross-cash attack is a memory and the time consuming and",
    "start": "901699",
    "end": "908820"
  },
  {
    "text": "the less deterministic in 2015",
    "start": "908820",
    "end": "915420"
  },
  {
    "text": "when she published a paper from my own opinion I recognized it as a cross-cash",
    "start": "915420",
    "end": "922860"
  },
  {
    "text": "technique the key point is that all the physical",
    "start": "922860",
    "end": "929279"
  },
  {
    "text": "Pages which can be allocated for slab allocator are nearly mapped",
    "start": "929279",
    "end": "935820"
  },
  {
    "text": "so we can repeatedly call the M map Cisco to Sprint the pages until the",
    "start": "935820",
    "end": "942720"
  },
  {
    "text": "specific page is mapped into the user space as the physical pages are nearly mapped",
    "start": "942720",
    "end": "951060"
  },
  {
    "text": "the current address of the dangling pointer is always validated",
    "start": "951060",
    "end": "958320"
  },
  {
    "text": "several years ago I used this idea to exploit a type comforting bug you can",
    "start": "959279",
    "end": "966180"
  },
  {
    "text": "find this slide on my GitHub here is the steps to fill the uaf",
    "start": "966180",
    "end": "973980"
  },
  {
    "text": "sockets the expoid repeatedly called the M map",
    "start": "973980",
    "end": "979380"
  },
  {
    "text": "Cisco until the free the circuit returns a fixed fixed time step",
    "start": "979380",
    "end": "985760"
  },
  {
    "text": "obviously is time and memory consuming but why",
    "start": "985760",
    "end": "991079"
  },
  {
    "text": "sorry there are lots of flags to be said when",
    "start": "991079",
    "end": "997320"
  },
  {
    "text": "allocating a page here you just focus on the migration",
    "start": "997320",
    "end": "1002600"
  },
  {
    "text": "type and the page order first lab page is unmovable",
    "start": "1002600",
    "end": "1010000"
  },
  {
    "text": "when allocating a page for a user address the aggregation type is movable",
    "start": "1010100",
    "end": "1018399"
  },
  {
    "text": "I take the figure from Yahoo slide roughly the different aggregation types",
    "start": "1018459",
    "end": "1024798"
  },
  {
    "text": "of pages are stored in the different page free list it looks like the cross cache so it's",
    "start": "1024799",
    "end": "1032600"
  },
  {
    "text": "time and memory consuming now we know the answer to this question",
    "start": "1032600",
    "end": "1039079"
  },
  {
    "text": "the page order is different as mentioned before the high order Pages can be",
    "start": "1039079",
    "end": "1045798"
  },
  {
    "text": "spilled into now or now other pages so it's required to",
    "start": "1045799",
    "end": "1051919"
  },
  {
    "text": "exhaust the no other Pages first meanwhile the miggregation type is",
    "start": "1051919",
    "end": "1058820"
  },
  {
    "text": "different and now when freeing a single page the",
    "start": "1058820",
    "end": "1063919"
  },
  {
    "text": "page did not reclaimed directly instead it will be added to a cash list based on",
    "start": "1063919",
    "end": "1070640"
  },
  {
    "text": "the aggregation type so the page can be reallocated very soon and it's",
    "start": "1070640",
    "end": "1077299"
  },
  {
    "text": "impossible to reduce the Page by m map Cisco more generally the loan cross cache",
    "start": "1077299",
    "end": "1083900"
  },
  {
    "text": "technique is useless with the order of a slant page is reservo now let me",
    "start": "1083900",
    "end": "1090260"
  },
  {
    "text": "introduce the cross-catch tag technique return to page",
    "start": "1090260",
    "end": "1097299"
  },
  {
    "text": "the cork concept is allocating the same order and aggregation type Pages which",
    "start": "1103940",
    "end": "1111679"
  },
  {
    "text": "can be read and write and directly or indirectly instead of object X to review",
    "start": "1111679",
    "end": "1119240"
  },
  {
    "text": "the free object the same order and the migration type",
    "start": "1119240",
    "end": "1124280"
  },
  {
    "text": "can significantly increase their possibility I will be using the target",
    "start": "1124280",
    "end": "1130220"
  },
  {
    "text": "slab page under the content of the freed object can be leaked and Modified by",
    "start": "1130220",
    "end": "1137059"
  },
  {
    "text": "reading and writing the pages it's next time and the memory consuming",
    "start": "1137059",
    "end": "1144080"
  },
  {
    "text": "and the more deterministic but is but is",
    "start": "1144080",
    "end": "1149660"
  },
  {
    "text": "but the limitation is obvious generally since the content of the pages",
    "start": "1149660",
    "end": "1155780"
  },
  {
    "text": "can't remain intact you cannot directly link the color or dress without",
    "start": "1155780",
    "end": "1162500"
  },
  {
    "text": "triggering the operation on the object the step one two three cannot be avoided",
    "start": "1162500",
    "end": "1171280"
  },
  {
    "text": "I talk about the previous at the same four some tricks",
    "start": "1171280",
    "end": "1177820"
  },
  {
    "text": "can be used to shape the help feng shui and make the reallocation more",
    "start": "1177820",
    "end": "1184600"
  },
  {
    "text": "deterministic here at least some",
    "start": "1184600",
    "end": "1189700"
  },
  {
    "text": "the old friend the pipel subsystem gives us the one page allocation both the user",
    "start": "1189919",
    "end": "1198080"
  },
  {
    "text": "space and the color space can read or write it",
    "start": "1198080",
    "end": "1203200"
  },
  {
    "text": "the pages order is under the control although the usual space cannot write",
    "start": "1203660",
    "end": "1212000"
  },
  {
    "text": "the page directly it can we can net the color to the dirty job",
    "start": "1212000",
    "end": "1220059"
  },
  {
    "text": "uh the io and drivers can give us some totally controlled pages",
    "start": "1221299",
    "end": "1227980"
  },
  {
    "text": "but even maybe you know might might be",
    "start": "1227980",
    "end": "1233120"
  },
  {
    "text": "different uh due to their vendors specific implementation",
    "start": "1233120",
    "end": "1240020"
  },
  {
    "text": "the GPU drivers can also give us some totally controlled pages",
    "start": "1241700",
    "end": "1248020"
  },
  {
    "text": "but it's not Universal uh I this code this code is lifted I take from Arduino",
    "start": "1248020",
    "end": "1256820"
  },
  {
    "text": "GPU driver the io uterus statistical can give us",
    "start": "1256820",
    "end": "1265400"
  },
  {
    "text": "some totally control the pages and however it is blocked Under The",
    "start": "1265400",
    "end": "1271840"
  },
  {
    "text": "untrusted Apple domain uh you can use it under the show the shared domain",
    "start": "1271840",
    "end": "1280419"
  },
  {
    "text": "the third part to clearly understand the return to page",
    "start": "1280760",
    "end": "1287500"
  },
  {
    "text": "exploitation technique I will deter how to exploit those two highlighted",
    "start": "1287500",
    "end": "1294020"
  },
  {
    "text": "vulnerabilities fifths the last year uh you can fed the briefly root of",
    "start": "1294020",
    "end": "1303080"
  },
  {
    "text": "course lenses on Google project through those blog",
    "start": "1303080",
    "end": "1309260"
  },
  {
    "text": "so we inserting uh you profile",
    "start": "1310220",
    "end": "1315280"
  },
  {
    "text": "descriptor inside another Evo field descriptor uh it will first perform the",
    "start": "1315280",
    "end": "1322280"
  },
  {
    "text": "loop check specifically a user will Traverse was a",
    "start": "1322280",
    "end": "1329840"
  },
  {
    "text": "a items recursively if the related field is not the Evo field and it has not been",
    "start": "1329840",
    "end": "1338720"
  },
  {
    "text": "added to alien linked list the reference counter will be increased increase the",
    "start": "1338720",
    "end": "1345559"
  },
  {
    "text": "unconditionally to the regular regular field will be put",
    "start": "1345559",
    "end": "1351559"
  },
  {
    "text": "at the end of the evil control Cisco although the whole process is protected",
    "start": "1351559",
    "end": "1358520"
  },
  {
    "text": "by hippo mutex the regular field can be closed via the FD handle",
    "start": "1358520",
    "end": "1368200"
  },
  {
    "text": "specifically task a creates an evil field and adds a bunker field to it then",
    "start": "1368480",
    "end": "1375320"
  },
  {
    "text": "task a starts to add the euper field descriptor to another evil field",
    "start": "1375320",
    "end": "1381320"
  },
  {
    "text": "descriptor a during the loop check if the bundle field is submitted to 3",
    "start": "1381320",
    "end": "1387620"
  },
  {
    "text": "before increasing the reference count the boundary field can be submitted to",
    "start": "1387620",
    "end": "1393620"
  },
  {
    "text": "free again uh if you are interested in how to control the threat interleaving and just",
    "start": "1393620",
    "end": "1401600"
  },
  {
    "text": "check out this slide before triggering the bug we should ship",
    "start": "1401600",
    "end": "1407059"
  },
  {
    "text": "their cash and make sure that the number of the freed objects is larger than",
    "start": "1407059",
    "end": "1413360"
  },
  {
    "text": "cpule partial and the number of pages in the partial list of key memory cache",
    "start": "1413360",
    "end": "1419360"
  },
  {
    "text": "node is the larger than me mini partial then trigger the bug and refuse the",
    "start": "1419360",
    "end": "1426980"
  },
  {
    "text": "freedom fields the Target Field will be freed when",
    "start": "1426980",
    "end": "1434120"
  },
  {
    "text": "clearing the target of field link list",
    "start": "1434120",
    "end": "1439299"
  },
  {
    "text": "we can close all the other field descriptors to make the slab page back",
    "start": "1439299",
    "end": "1445580"
  },
  {
    "text": "to body allocator now there is a handle related to the",
    "start": "1445580",
    "end": "1452179"
  },
  {
    "text": "freedom field but we don't know which one is",
    "start": "1452179",
    "end": "1457840"
  },
  {
    "text": "since the page is shaded between user space and color space",
    "start": "1458059",
    "end": "1463360"
  },
  {
    "text": "smav4 Pam mitigation is naturally bypassed as discussed previously the",
    "start": "1463360",
    "end": "1470900"
  },
  {
    "text": "content of the page is usually reset Nokia pointers can be leaked directly",
    "start": "1470900",
    "end": "1477679"
  },
  {
    "text": "so how to bypass the k-a-slr mitigation",
    "start": "1477679",
    "end": "1484059"
  },
  {
    "text": "because that the pending fields are opened with right only mode so we can",
    "start": "1484880",
    "end": "1492320"
  },
  {
    "text": "set the free the fields mode as read only then repeatedly causes split splice",
    "start": "1492320",
    "end": "1500480"
  },
  {
    "text": "Cisco to check whether the fde is a target descriptor",
    "start": "1500480",
    "end": "1507679"
  },
  {
    "text": "even though it just Returns the band descriptor Arrow",
    "start": "1507679",
    "end": "1513620"
  },
  {
    "text": "since since both in and out fields are not hyper fuels they do splice function",
    "start": "1513620",
    "end": "1520940"
  },
  {
    "text": "just Returns the embedded value error So based on the different error codes",
    "start": "1520940",
    "end": "1528020"
  },
  {
    "text": "the target handle can be figured out since no color pointers can be leaked",
    "start": "1528020",
    "end": "1536000"
  },
  {
    "text": "directly we have to find a way to bypass the kasr mitigation for Android devices",
    "start": "1536000",
    "end": "1542840"
  },
  {
    "text": "the color slide into two megabyte aligned and cannot extend across one",
    "start": "1542840",
    "end": "1548000"
  },
  {
    "text": "gigabyte alignment boundary the limitation is derived the front armor V8",
    "start": "1548000",
    "end": "1553760"
  },
  {
    "text": "mmu hardware and the most important thing that there are only 16 for bits",
    "start": "1553760",
    "end": "1560900"
  },
  {
    "text": "for randomization so it's possible to Guess the Color slide",
    "start": "1560900",
    "end": "1566299"
  },
  {
    "text": "in a short time but how to guess without color crash since the fuel has no value",
    "start": "1566299",
    "end": "1572720"
  },
  {
    "text": "the field operation it's easy to panic the color due to a non-pointer the",
    "start": "1572720",
    "end": "1578240"
  },
  {
    "text": "reference or inventing the color address it's similar to finding the user handle",
    "start": "1578240",
    "end": "1584120"
  },
  {
    "text": "is just requires setting the parameters carefully here the fde must be larger",
    "start": "1584120",
    "end": "1591620"
  },
  {
    "text": "the value when the color slide is wrong the fde will not be recognized as a type",
    "start": "1591620",
    "end": "1599000"
  },
  {
    "text": "of field so it Returns the invalid value Arrow when the color slide is right it",
    "start": "1599000",
    "end": "1606140"
  },
  {
    "text": "will return a piper Arrow because the of e is not zero",
    "start": "1606140",
    "end": "1611799"
  },
  {
    "text": "now we can fake any type of view and the page is under is under our control uh",
    "start": "1611799",
    "end": "1619340"
  },
  {
    "text": "it's easy to obtain aarw Primitives I will talk about it",
    "start": "1619340",
    "end": "1624740"
  },
  {
    "text": "later the bug was this bag was first disclosed to this color by Young home but also",
    "start": "1624740",
    "end": "1632360"
  },
  {
    "text": "found by me before it was fixed the vulnerability was finally leaked under Android security in May last year",
    "start": "1632360",
    "end": "1641419"
  },
  {
    "text": "although Zhong details how to exploit against the dbm kernel the exploit code",
    "start": "1641419",
    "end": "1648140"
  },
  {
    "text": "cannot work on adding Android devices directly due to the different color",
    "start": "1648140",
    "end": "1654260"
  },
  {
    "text": "config I successfully rooted the pixel 2 to 5",
    "start": "1654260",
    "end": "1660200"
  },
  {
    "text": "and other Android 11 Flagship Flagship devices at that time",
    "start": "1660200",
    "end": "1666500"
  },
  {
    "text": "from your host poster the object is allocated in the general cache",
    "start": "1666500",
    "end": "1673039"
  },
  {
    "text": "but it's not such a simple Android color branches for Carlo 4.4 indeed the PID",
    "start": "1673039",
    "end": "1680900"
  },
  {
    "text": "object is allocated in a general cache however for color four point lighting is",
    "start": "1680900",
    "end": "1688820"
  },
  {
    "text": "not I'll discussed previously a cash with slab account cannot be merged into the",
    "start": "1688820",
    "end": "1695480"
  },
  {
    "text": "general cache so basically for the old color like 4.4 the object is allocated",
    "start": "1695480",
    "end": "1701960"
  },
  {
    "text": "in the general cache and then for the Upstream Color Branch the object is",
    "start": "1701960",
    "end": "1708140"
  },
  {
    "text": "allocated in the dedicated cache here I just focused on the Upstream Color",
    "start": "1708140",
    "end": "1714080"
  },
  {
    "text": "branch when I reviewed the this is I'll control",
    "start": "1714080",
    "end": "1719779"
  },
  {
    "text": "Handler I found the code is likely body look at the red circle the code release",
    "start": "1719779",
    "end": "1726919"
  },
  {
    "text": "the older PID object of real Pi real TTY",
    "start": "1726919",
    "end": "1732080"
  },
  {
    "text": "object and the assign a new one to it however you use the spring node of TTY",
    "start": "1732080",
    "end": "1739220"
  },
  {
    "text": "objects like this window of a real TTY object when sending a command to the master",
    "start": "1739220",
    "end": "1746179"
  },
  {
    "text": "driver the gtu object represents the master endpoint and the relative object",
    "start": "1746179",
    "end": "1752620"
  },
  {
    "text": "represents the Sleep endpoint uh but when sending a command to the",
    "start": "1752620",
    "end": "1758299"
  },
  {
    "text": "sleeve driver both of the objects represent the slip and point",
    "start": "1758299",
    "end": "1763399"
  },
  {
    "text": "so we're sending commands to the different driver drivers drivers can currently one thread",
    "start": "1763399",
    "end": "1770179"
  },
  {
    "text": "put a pida and then the context switch happens another state can also put a",
    "start": "1770179",
    "end": "1776419"
  },
  {
    "text": "pida its reference count is decreased twice if Ace reference count becomes",
    "start": "1776419",
    "end": "1782600"
  },
  {
    "text": "becomes 0 though a will be destroyed so there are three different types of",
    "start": "1782600",
    "end": "1790220"
  },
  {
    "text": "hash list in PID object the pi link array of the test struct",
    "start": "1790220",
    "end": "1797299"
  },
  {
    "text": "object is used to attach to the PID object",
    "start": "1797299",
    "end": "1804220"
  },
  {
    "text": "a PID object is allocated when creating a thread or",
    "start": "1804320",
    "end": "1810039"
  },
  {
    "text": "process for a new process all the types of PID objects are attached for new",
    "start": "1810039",
    "end": "1817880"
  },
  {
    "text": "thread only the PID type PID is attached",
    "start": "1817880",
    "end": "1823580"
  },
  {
    "text": "a lot of things should be pay attention too is that the Page's order is zero",
    "start": "1823580",
    "end": "1831440"
  },
  {
    "text": "the hype function is very similar to the previous exploit",
    "start": "1831440",
    "end": "1838220"
  },
  {
    "text": "as a single page will be reallocated soon using the pipe page feng shui can",
    "start": "1839179",
    "end": "1846860"
  },
  {
    "text": "significantly improve the successful read",
    "start": "1846860",
    "end": "1852340"
  },
  {
    "text": "now we have the same question and the answer is almost the same",
    "start": "1852799",
    "end": "1859960"
  },
  {
    "text": "as the pages under our control we can set the pointer of page H leads the head",
    "start": "1860419",
    "end": "1868100"
  },
  {
    "text": "to zero and we can focus a new process and",
    "start": "1868100",
    "end": "1876100"
  },
  {
    "text": "attach it to the trade object the test struct address can be leaked by reading",
    "start": "1876100",
    "end": "1883279"
  },
  {
    "text": "the page look at the red circle if the limb space",
    "start": "1883279",
    "end": "1890360"
  },
  {
    "text": "is equal the NR value will be returned",
    "start": "1890360",
    "end": "1896500"
  },
  {
    "text": "uh otherwise you should just Returns the result and the PID lamp space is a lot enabled",
    "start": "1896500",
    "end": "1904399"
  },
  {
    "text": "on Android color branch the lamp space is always you need a PID",
    "start": "1904399",
    "end": "1910880"
  },
  {
    "text": "lamp space is a Carlo data pointer",
    "start": "1910880",
    "end": "1916539"
  },
  {
    "text": "as the page is under our control we can set the first pointer to address X",
    "start": "1916940",
    "end": "1927100"
  },
  {
    "text": "the fork a due process and attach the test structure to the freed object free",
    "start": "1927260",
    "end": "1934640"
  },
  {
    "text": "the PID now it points to the test struct",
    "start": "1934640",
    "end": "1941179"
  },
  {
    "text": "let's change change the pi PG ID of the",
    "start": "1941179",
    "end": "1946399"
  },
  {
    "text": "newly spawned process it will point back to the page",
    "start": "1946399",
    "end": "1951679"
  },
  {
    "text": "that means we can overwrite under redirect our pointer of adding objects",
    "start": "1951679",
    "end": "1959360"
  },
  {
    "text": "to the control page under the test structure of a one-page",
    "start": "1959360",
    "end": "1965899"
  },
  {
    "text": "leaked we can't redirect some pointers here I choose the fields structure",
    "start": "1965899",
    "end": "1973580"
  },
  {
    "text": "because the FD table is storing it",
    "start": "1973580",
    "end": "1979059"
  },
  {
    "text": "under the mask fds can be read from the process status",
    "start": "1979100",
    "end": "1986260"
  },
  {
    "text": "after redirecting the field structure pointer to the page the FD the FD table",
    "start": "1987440",
    "end": "1996140"
  },
  {
    "text": "pointer is controlled so we can use it to point to anywhere",
    "start": "1996140",
    "end": "2003039"
  },
  {
    "text": "and read the four bytes each time by reading the status uh basically it's the AAR ability",
    "start": "2003039",
    "end": "2013440"
  },
  {
    "text": "now we we can also fake any fields we",
    "start": "2014080",
    "end": "2019299"
  },
  {
    "text": "can craft a few metadata in the page",
    "start": "2019299",
    "end": "2024480"
  },
  {
    "text": "here I think a paper field by controlling the page of a pipe buffer",
    "start": "2025360",
    "end": "2033779"
  },
  {
    "text": "basically the aarw Primitive is obtained",
    "start": "2033779",
    "end": "2041399"
  },
  {
    "text": "so here's the demo five minutes Mr Wong five minutes",
    "start": "2041500",
    "end": "2050638"
  },
  {
    "text": "so takeaways uh the the interval of both the slab and body allocators have been",
    "start": "2072220",
    "end": "2079599"
  },
  {
    "text": "analysis return to page a new and the general exploitation technique has been detailed",
    "start": "2079599",
    "end": "2087358"
  },
  {
    "text": "those two vulnerabilities have been discussed and the exploits have been",
    "start": "2087359",
    "end": "2093040"
  },
  {
    "text": "fully detailed here are the reference",
    "start": "2093040",
    "end": "2099220"
  },
  {
    "text": "okay that's all thanks uh by the way since this slide has changed uh you can",
    "start": "2099220",
    "end": "2106060"
  },
  {
    "text": "find the current version on my GitHub later",
    "start": "2106060",
    "end": "2111359"
  },
  {
    "text": "foreign",
    "start": "2111579",
    "end": "2114240"
  },
  {
    "text": "[Music]",
    "start": "2118290",
    "end": "2121400"
  }
]