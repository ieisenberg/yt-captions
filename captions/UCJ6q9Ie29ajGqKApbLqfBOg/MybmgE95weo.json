[
  {
    "start": "0",
    "end": "54000"
  },
  {
    "text": "all right thank you for coming to our talk about the Windows notification facility so just to get started like to",
    "start": "30",
    "end": "6330"
  },
  {
    "text": "introduce my co-speaker Gabrielle so hey everybody I'm Gabby reverse engineer at",
    "start": "6330",
    "end": "12059"
  },
  {
    "text": "Crocs lab in France and I'm focusing on Windows internals and not specifically Sakana",
    "start": "12059",
    "end": "17490"
  },
  {
    "text": "I'm also bidding bedont going to the black Fuji against this organization ku",
    "start": "17490",
    "end": "22590"
  },
  {
    "text": "where we trying to show newcomers ladies that's reversing some answers pretty",
    "start": "22590",
    "end": "29670"
  },
  {
    "text": "hard for me thanks Abby you know it's very rare that it happens that you do research and you end up",
    "start": "29670",
    "end": "36450"
  },
  {
    "text": "having a collision of someone and instead of fighting over who's gonna present and you know trying to get into",
    "start": "36450",
    "end": "42239"
  },
  {
    "text": "all sorts of pestering it's nice that we're in a community where two people who met at a conference doing similar",
    "start": "42239",
    "end": "48239"
  },
  {
    "text": "research got to combine their research so I'm very lucky to have Gabrielle here who helped out a lot with some of the",
    "start": "48239",
    "end": "53789"
  },
  {
    "text": "tough stuff you're gonna see in this top for those of you don't know me my name is Alex Enescu currently VP of EDR strategy crash",
    "start": "53789",
    "end": "60570"
  },
  {
    "start": "54000",
    "end": "54000"
  },
  {
    "text": "strike and I'm a passion and Windows internals researcher that have been has been doing this for way too long now",
    "start": "60570",
    "end": "67189"
  },
  {
    "text": "publisher of the windows internal series and you know often speak your various",
    "start": "67189",
    "end": "72540"
  },
  {
    "text": "conferences about low-level things in Windows that no one knows about that are interesting to misuse abuse or otherwise",
    "start": "72540",
    "end": "79439"
  },
  {
    "text": "play around with and hopefully you'll see some examples of that in this w NF talk so first of all we'll start by",
    "start": "79439",
    "end": "86009"
  },
  {
    "text": "talking a little about what double-unit is why it exists why it was built how it works some of the api's who use w NF and",
    "start": "86009",
    "end": "93720"
  },
  {
    "text": "then Gabrielle will go over some of the data structures for those of you who are doing forensics or kind of understand",
    "start": "93720",
    "end": "98850"
  },
  {
    "text": "how it works behind the scenes and will also talk about some tools that we've built together some wind back extensions",
    "start": "98850",
    "end": "105479"
  },
  {
    "text": "some Python scripts some C scripts that will be releasing so that you can also you know fuzz manipulate and play around",
    "start": "105479",
    "end": "112049"
  },
  {
    "text": "in W net area I don't think you some of the interesting attack surfaces a WMS provides like most you know kernel",
    "start": "112049",
    "end": "118740"
  },
  {
    "text": "functionality it's not inherently bad it's just the way people use it and you know what can happen when you misuse it",
    "start": "118740",
    "end": "125490"
  },
  {
    "text": "and kind of break the assumptions when things are undocumented there's often a lot less fuzzing and security testing",
    "start": "125490",
    "end": "131879"
  },
  {
    "text": "that goes on within the vendor because they figured hey it's undocumented until someone talks about it we're okay",
    "start": "131879",
    "end": "138299"
  },
  {
    "text": "I'll also talk about you know interesting use cases of W&F that are probably not intended things like using",
    "start": "138299",
    "end": "144239"
  },
  {
    "text": "it as a covert side channel as well as using some of the notifications that provides for you know rootkit like",
    "start": "144239",
    "end": "151890"
  },
  {
    "text": "implant like behavior without doing some of the hard work someone in that space normally has to do it is a kernel level",
    "start": "151890",
    "end": "159000"
  },
  {
    "text": "facility and so it allows you to get very fine-grained information about the system and you get to see some examples",
    "start": "159000",
    "end": "164519"
  },
  {
    "text": "that you often can't do in carl mode at all or that's very very complex and again piggybacking on the system we're",
    "start": "164519",
    "end": "170940"
  },
  {
    "text": "living off the land is something that's very popular these days and insecurity research and also talk about a few",
    "start": "170940",
    "end": "176790"
  },
  {
    "text": "examples on how WUF can be used to manipulate a system state you know instead of global variables more and",
    "start": "176790",
    "end": "183120"
  },
  {
    "text": "more state is now stored in W&F data and again you can manipulate assist them in",
    "start": "183120",
    "end": "188280"
  },
  {
    "text": "interesting ways either as an administrator or not and then we'll wrap up with some some future research ideas",
    "start": "188280",
    "end": "193829"
  },
  {
    "text": "that would come up with so let's talk about first of all what is w enough so",
    "start": "193829",
    "end": "199109"
  },
  {
    "start": "198000",
    "end": "198000"
  },
  {
    "text": "the Windows notification facility this is a new kernel component that was added in Windows 8 and it's essentially a pup",
    "start": "199109",
    "end": "205169"
  },
  {
    "text": "sub model publisher subscriber so you have one side that's basically publishing data publishing notifications",
    "start": "205169",
    "end": "211169"
  },
  {
    "text": "and you have one or more subscribers or consumers on the other side that are consuming that data now the way WF was",
    "start": "211169",
    "end": "217590"
  },
  {
    "text": "built is actually very nice because it fixes some of the design limitations that Windows had before and I'll give",
    "start": "217590",
    "end": "224010"
  },
  {
    "text": "you an example of you know something you couldn't do before W enough now what's really cool about is that it's",
    "start": "224010",
    "end": "229229"
  },
  {
    "text": "completely blind in many pups up models the publisher has to come first you can't subscribe for something that",
    "start": "229229",
    "end": "234959"
  },
  {
    "text": "hasn't been published yet and if your publisher you're publishing something before their subscribers and subscribers",
    "start": "234959",
    "end": "240209"
  },
  {
    "text": "might miss the data and so there's a lot of synchronization in a lot of classical pup sub models around who publishes first who subscribes and so on and so",
    "start": "240209",
    "end": "246930"
  },
  {
    "text": "forth so forth with W&F it's kind of a blind system is registration less and so the publisher in a consumer or",
    "start": "246930",
    "end": "253139"
  },
  {
    "text": "subscriber don't really need to know about each other's or cool loads first before the other so kind of support is",
    "start": "253139",
    "end": "259530"
  },
  {
    "text": "out of order behavior on top of this it has lots of cool features like persistent data versus volatile data",
    "start": "259530",
    "end": "265720"
  },
  {
    "text": "it has a change stamp so you can see someone's modify the data in between you lives reading it it supports when to secure the scripture",
    "start": "265720",
    "end": "272260"
  },
  {
    "text": "so it's kind of got all the features you'd expect out of amateur Windows kernel functionality and a good example",
    "start": "272260",
    "end": "278290"
  },
  {
    "start": "277000",
    "end": "277000"
  },
  {
    "text": "for why you need something like wnf is on Windows the example when you write a",
    "start": "278290",
    "end": "283960"
  },
  {
    "text": "Windows driver that loads a boot and you want to write to the disk now the disk when Windows boots up is",
    "start": "283960",
    "end": "290080"
  },
  {
    "text": "usually mounted read-only this happens in every major OS in the world and even Linux and Mac OS booted discrete only",
    "start": "290080",
    "end": "296200"
  },
  {
    "text": "then at some point around a utility like fsck or AutoCheck and windows this case which makes sure the disk is safe for",
    "start": "296200",
    "end": "303010"
  },
  {
    "text": "writing 6 is any bad sectors and then rebounds to drive as read right now that",
    "start": "303010",
    "end": "308350"
  },
  {
    "text": "point a driver knows that it's safe to write to the disk now because AutoCheck executed now to do this oughta check",
    "start": "308350",
    "end": "315340"
  },
  {
    "text": "signals an event that's named but who creates that event because if AutoCheck creates the event then any drivers which",
    "start": "315340",
    "end": "322360"
  },
  {
    "text": "load before auto check don't have an event to wait on because the thing that tells you auto check around doesn't",
    "start": "322360",
    "end": "327370"
  },
  {
    "text": "exist yet if the drivers are supposed to create the event first then which driver",
    "start": "327370",
    "end": "332560"
  },
  {
    "text": "becomes the first one to wait on the event becomes the one to create the event again you end up with in these weird",
    "start": "332560",
    "end": "337840"
  },
  {
    "text": "ordering problems which were fixed in this particular case by having the",
    "start": "337840",
    "end": "343960"
  },
  {
    "text": "kernel very early boot being the one that carries the auto check event that way auto check always knows it can",
    "start": "343960",
    "end": "349660"
  },
  {
    "text": "signal it and drivers always know it's it's already there someone took care of it for them but this is for this one",
    "start": "349660",
    "end": "355419"
  },
  {
    "text": "specific use case right sure some of your programmers you've had similar issues where there's some event out",
    "start": "355419",
    "end": "360669"
  },
  {
    "text": "there at once I need to signal and other sightings through to wait on how do you wait on something before it exists right",
    "start": "360669",
    "end": "366760"
  },
  {
    "text": "W&F solves that because with W enough I can subscribe to that event and block",
    "start": "366760",
    "end": "372220"
  },
  {
    "text": "even if it doesn't exist yet and when the event actually gets created then I'll actually wake up once it's get once",
    "start": "372220",
    "end": "378610"
  },
  {
    "text": "it gets published too so that's kind of one of the top use cases is blind registration less subscription model now",
    "start": "378610",
    "end": "385840"
  },
  {
    "text": "in the W&F world would you have aren't events there W&F state names these are",
    "start": "385840",
    "end": "390880"
  },
  {
    "text": "basically 64-bit IDs they're just numbers well there's a trick to it these",
    "start": "390880",
    "end": "395890"
  },
  {
    "text": "numbers actually encode a data structure inside of the dodges random numbers they actually are bits",
    "start": "395890",
    "end": "401650"
  },
  {
    "text": "that represent a version a lifetime of scope a permanent flag and then a unique sequence number the trick is you take a",
    "start": "401650",
    "end": "408729"
  },
  {
    "text": "W&F state name you take the 64-bit number you XOR it with this magic key here which you know who knows what it",
    "start": "408729",
    "end": "415360"
  },
  {
    "text": "really means I don't know if it's a person's name and a skew or whatnot but you XOR it with this key and then you",
    "start": "415360",
    "end": "421030"
  },
  {
    "text": "get this data structure out of it with these different bits that are gonna mean different things so they're not just",
    "start": "421030",
    "end": "426430"
  },
  {
    "text": "goods they actually have meaning associated with them so the first meaning is the lifetime W&F state names",
    "start": "426430",
    "end": "433630"
  },
  {
    "start": "430000",
    "end": "430000"
  },
  {
    "text": "have lifetime and there's three main lifetimes that are used well-known names vermin and names and persistent things",
    "start": "433630",
    "end": "440949"
  },
  {
    "text": "and then there's a fourth type of lifetime which is a temporary name now well-known names are actually in the",
    "start": "440949",
    "end": "447520"
  },
  {
    "text": "registry and they're published and basically created when the Windows installation media is created so these",
    "start": "447520",
    "end": "453610"
  },
  {
    "text": "are in a header file of Microsoft and they basically get added in the registry permanent names are names that can be",
    "start": "453610",
    "end": "460060"
  },
  {
    "text": "registered after the fact they're also stored in the registry so once a permanent name gets registered it",
    "start": "460060",
    "end": "465699"
  },
  {
    "text": "persists it's data may or may not persist there's a flag that specifies should the last data that was associated",
    "start": "465699",
    "end": "472569"
  },
  {
    "text": "with this state name be persistent or not and then this is gets a little bit confusing there are persistent names",
    "start": "472569",
    "end": "478990"
  },
  {
    "text": "which go on a registry key called volatile notifications so persistent",
    "start": "478990",
    "end": "484270"
  },
  {
    "text": "names are persistent with regards to the process that registered them but they're not permanent across reboots so if I'm a",
    "start": "484270",
    "end": "491110"
  },
  {
    "text": "process and I register persistent name and I exit the data and the name of that wnf state name persists until I reboot",
    "start": "491110",
    "end": "498969"
  },
  {
    "text": "and then it's got a temporary name if I create it and I exit it's got no",
    "start": "498969",
    "end": "504310"
  },
  {
    "text": "registry backing associated with it once the process exits the temporary name is gone so temporary names are bound to the",
    "start": "504310",
    "end": "510610"
  },
  {
    "text": "lifetime of the process persist the names are bound to the lifetime of the system permanent names are in the",
    "start": "510610",
    "end": "516159"
  },
  {
    "text": "registry forever and then well no names are in the registry but you can't register them they're kind of pre",
    "start": "516159",
    "end": "521860"
  },
  {
    "text": "registered well no names that the system is going to use and this kind of follows similar models objects where unless you",
    "start": "521860",
    "end": "528490"
  },
  {
    "text": "an administrator or you have the create global name privilege you can't create permanent or persistent names you can",
    "start": "528490",
    "end": "534460"
  },
  {
    "text": "only create temporary names unless you're an admin or above and then obviously you can do that the second",
    "start": "534460",
    "end": "539650"
  },
  {
    "start": "538000",
    "end": "538000"
  },
  {
    "text": "piece of its state name is its scope and the scope determines basically the initial security boundary and visibility",
    "start": "539650",
    "end": "545980"
  },
  {
    "text": "boundary around a WF state so W and F state name can either be global",
    "start": "545980",
    "end": "551170"
  },
  {
    "text": "or it can be unique to a session or it can be unique to a user or it can be",
    "start": "551170",
    "end": "557020"
  },
  {
    "text": "unique to a process so you can say only this process and it's threads know about these state names or only the user only",
    "start": "557020",
    "end": "564460"
  },
  {
    "text": "Alex's processes can touch the state name or only whoever's logged in a session one can touch a state name or",
    "start": "564460",
    "end": "570160"
  },
  {
    "text": "anything across the system can do this so there's different scoping that you can associate and lifetime in scope",
    "start": "570160",
    "end": "575650"
  },
  {
    "text": "obviously go hand and hand together for example you couldn't create a permanent name that has process scoped because",
    "start": "575650",
    "end": "582790"
  },
  {
    "text": "that wouldn't make sense once your process is gone the process scope is gone where were you why are you persisting this name that no one will",
    "start": "582790",
    "end": "589270"
  },
  {
    "text": "ever be able to open again because no one will ever be that process again so there are some rules obviously some scopes don't make sense for certain",
    "start": "589270",
    "end": "595750"
  },
  {
    "text": "lifetimes and vice-versa and then the last piece is the sequence number because since these names are just bits",
    "start": "595750",
    "end": "602410"
  },
  {
    "start": "597000",
    "end": "597000"
  },
  {
    "text": "well some of the bits are the scope some of the bits are the lifetime one bit says if this is persistent data or not",
    "start": "602410",
    "end": "608770"
  },
  {
    "text": "how do you then actually make that the name be unique so there's a 51 bit sequence number now for well no names",
    "start": "608770",
    "end": "615190"
  },
  {
    "text": "the first 32 bits are basically characters kind of like a pool tag or a heap tag it's for ASCII letters that",
    "start": "615190",
    "end": "621940"
  },
  {
    "text": "kind of define the the family the tag that really is associated with this name and you'll see some examples soon the",
    "start": "621940",
    "end": "628810"
  },
  {
    "text": "remainder of the bits the last 21 bits are then used as a number within that family so this is the let's say I don't",
    "start": "628810",
    "end": "635320"
  },
  {
    "text": "know it's come up with a tag called BK HT event 1 all right so BK HT that's",
    "start": "635320",
    "end": "641350"
  },
  {
    "text": "your tag that's your first 32 bits then one is the first black hat event and then 2 3 4 5 and so on so forth that's 4",
    "start": "641350",
    "end": "647800"
  },
  {
    "text": "well no names for the other names I wanted you to register at runtime the persisted names the permanent names that",
    "start": "647800",
    "end": "653620"
  },
  {
    "text": "sequence number is a monotonically increasing number so the first ever permanent state name that was ever",
    "start": "653620",
    "end": "658690"
  },
  {
    "text": "created it's sequence number was 1 and then 2 and then 3 and then 4 and the",
    "start": "658690",
    "end": "663730"
  },
  {
    "text": "last used sequence number gets rid in the registry so every permanent aim until you reformat your",
    "start": "663730",
    "end": "668770"
  },
  {
    "text": "drive will always be increasing increasing increasing increasing then the persistent and temporary names which",
    "start": "668770",
    "end": "674860"
  },
  {
    "text": "disappear once you reboot the machine those have their own monotonically increasing sequence number that",
    "start": "674860",
    "end": "679900"
  },
  {
    "text": "obviously gives reset to zero wants to reboot the machine so somewhere in a kernel variable we basically remember this was the last you know",
    "start": "679900",
    "end": "686680"
  },
  {
    "text": "non non permanent sequence number and we'll just keeping incrementing that so here's an example of a state named W&F",
    "start": "686680",
    "end": "694540"
  },
  {
    "text": "boot dirty shutdown like that's its friendly name that's kind of what you can see in the symbols what it looks",
    "start": "694540",
    "end": "700120"
  },
  {
    "text": "like if you open this up in Ida is one five eight nine zero a bunch of hex numbers you XOR those hex numbers with",
    "start": "700120",
    "end": "707620"
  },
  {
    "text": "that magic key and then you get you know something that still looks like magic hex but it's a little bit more readable",
    "start": "707620",
    "end": "713020"
  },
  {
    "text": "now all right some of you can probably recognize okay that looks like a ski okay you know there's some meaning to",
    "start": "713020",
    "end": "718960"
  },
  {
    "text": "this and if we follow the data structure from earlier well this one basically tells us this is version one this zero",
    "start": "718960",
    "end": "726190"
  },
  {
    "text": "over here tells us that this is a well-known system scoped name and then",
    "start": "726190",
    "end": "731560"
  },
  {
    "text": "obviously these ASCII characters represent the word boot and then the one",
    "start": "731560",
    "end": "738220"
  },
  {
    "text": "over here and this isn't one shift that obviously so it looks like an eight means that it's the first event by part",
    "start": "738220",
    "end": "744970"
  },
  {
    "text": "of the boot family so wnf boot dirty shutdown is that number that's internally like how its represented by",
    "start": "744970",
    "end": "751420"
  },
  {
    "text": "the WUF system so to register names that are not well know names there's a nice",
    "start": "751420",
    "end": "756550"
  },
  {
    "start": "753000",
    "end": "753000"
  },
  {
    "text": "little API a system called Korea W enough state name you pass in the lifetime to scope whether or not data",
    "start": "756550",
    "end": "762850"
  },
  {
    "text": "should be persisted this is the size a security of scripter it goes in the registry or if it's temporary it doesn't",
    "start": "762850",
    "end": "769330"
  },
  {
    "text": "and then it creates this name for you if you want to get rid of it at some point you called Z W delete WF state name and",
    "start": "769330",
    "end": "775630"
  },
  {
    "text": "then this will then get rid of it then if you want to add data if you want to",
    "start": "775630",
    "end": "780970"
  },
  {
    "start": "777000",
    "end": "777000"
  },
  {
    "text": "send some sentinel if you can notification there is a update WF state data in which you pass in the state name",
    "start": "780970",
    "end": "786640"
  },
  {
    "text": "a buffer size and then something called a change stamp and the change down",
    "start": "786640",
    "end": "791860"
  },
  {
    "text": "basically lets you say look every time I publish data there's a unique timestamp",
    "start": "791860",
    "end": "798100"
  },
  {
    "text": "that's basically a monotonically increasing number that says you know data entry 37 was",
    "start": "798100",
    "end": "804610"
  },
  {
    "text": "written to and then it's 30 and then 39 and so on and so forth you can say look I the last time I published data the",
    "start": "804610",
    "end": "811390"
  },
  {
    "text": "time stamp was 40 and so now I believe I'm publishing timestamp 41 so I can",
    "start": "811390",
    "end": "817000"
  },
  {
    "text": "enforce that basically says if someone else has already published something then ignore what I'm saying so you can",
    "start": "817000",
    "end": "822700"
  },
  {
    "text": "put a matching change tab that basically says I expect the data to currently be 40 if it's 41 or later than me some",
    "start": "822700",
    "end": "829480"
  },
  {
    "text": "someone argued an update or we can say I don't care if someone updated data just go ahead and publish it so that's what",
    "start": "829480",
    "end": "835000"
  },
  {
    "text": "that change stamp of the concept is about it's kind of like a sequence number that you can use to see if anyone's made a change or not if you",
    "start": "835000",
    "end": "841660"
  },
  {
    "text": "want to delete data you can call ZW delete WF stay data and then this gets rid of it to read W&F data there is a ZW",
    "start": "841660",
    "end": "849460"
  },
  {
    "start": "846000",
    "end": "846000"
  },
  {
    "text": "query W&F state data which gives you the data the buffer size and the current",
    "start": "849460",
    "end": "855130"
  },
  {
    "text": "change stamp of the data that you just read now the real power of WN f though is that both for consuming data and",
    "start": "855130",
    "end": "862750"
  },
  {
    "text": "querying data the name doesn't yet have to be registered unless it's a temporary name which wouldn't make sense if it's a",
    "start": "862750",
    "end": "869050"
  },
  {
    "text": "persistent permanent or well-known name even if it's not been registered by anyone yet you can still publish data to",
    "start": "869050",
    "end": "875110"
  },
  {
    "text": "it the kernel will basically allocate a buffer where it says okay for this name that I don't know about yet here's the",
    "start": "875110",
    "end": "880750"
  },
  {
    "text": "data it's gonna be associated with it so when the consumer or the publisher comes in and says now this name exists well",
    "start": "880750",
    "end": "886330"
  },
  {
    "text": "then I could just associate the data that was already kind of associate with the name even though the name wasn't even published yet and vice versa I can",
    "start": "886330",
    "end": "893200"
  },
  {
    "text": "ask for data even though the publisher may not have published it because I could have it from a previous reboot for",
    "start": "893200",
    "end": "898480"
  },
  {
    "text": "example so this kind of this associates the data associated with a state before without the state needing to really",
    "start": "898480",
    "end": "905140"
  },
  {
    "text": "exist yet with the difference of ten with the exception of temporary names because obviously temporary names are completely based on a sequence number",
    "start": "905140",
    "end": "912100"
  },
  {
    "text": "that gets updated every time you reboot if I probably get up to a temporary name before the temporary name gets registered I don't know how to associate",
    "start": "912100",
    "end": "919240"
  },
  {
    "text": "those two things right because there's there's no kind of static information associated with it and so when you query",
    "start": "919240",
    "end": "924640"
  },
  {
    "text": "or when you publish if the name doesn't exist there'll be an instance created anyway and then we got BL talks about",
    "start": "924640",
    "end": "930880"
  },
  {
    "text": "the data structures you'll see that that name instance data structure so so far we can see we've seen that you",
    "start": "930880",
    "end": "936339"
  },
  {
    "start": "933000",
    "end": "933000"
  },
  {
    "text": "can create a state name delete it and then publish or read data from it but what if the data doesn't exist yet well",
    "start": "936339",
    "end": "943089"
  },
  {
    "text": "then the last thing you can do is set up a notification and so there's a bunch of system calls that allow you to be",
    "start": "943089",
    "end": "948790"
  },
  {
    "text": "notified whenever data gets published to a state name the way this works is you",
    "start": "948790",
    "end": "954130"
  },
  {
    "text": "call an API zlw set W&F process notification event to first associate an",
    "start": "954130",
    "end": "959440"
  },
  {
    "text": "event with your process then you call a different API subscribe state change that lets you specify that you want to",
    "start": "959440",
    "end": "966820"
  },
  {
    "text": "be notified when certain things happen to receive to the state either when data gets published or when the state gets",
    "start": "966820",
    "end": "972220"
  },
  {
    "text": "destroyed or you can even register to know when someone has subscribed the event it's basically called a meta",
    "start": "972220",
    "end": "977769"
  },
  {
    "text": "notification it tells you when anyone else has also subscribed for the thing you're also subscribing for they you",
    "start": "977769",
    "end": "983350"
  },
  {
    "text": "could that's something you can do then your event will get signaled so you wait on your event handle every time you get",
    "start": "983350",
    "end": "989079"
  },
  {
    "text": "signaled you call get completion W&F state subscription this gives you a delivery descriptor that basically shows",
    "start": "989079",
    "end": "995050"
  },
  {
    "text": "you the last update that was just pushed what data what size what is the change tab that caused you to wake up and so",
    "start": "995050",
    "end": "1001589"
  },
  {
    "text": "initially I had a POC that use these system calls to basically be notified and I was trying to hit various",
    "start": "1001589",
    "end": "1007470"
  },
  {
    "text": "keystrokes launch various apps and see what wmf IDs were being you know lighted up when I was when I was doing things",
    "start": "1007470",
    "end": "1013970"
  },
  {
    "text": "eventually I'm not sure the code with Gabrielle she found out that I wasn't working on some of her systems that my",
    "start": "1013970",
    "end": "1019140"
  },
  {
    "text": "code is basically failing and the reason for that is only a single event can be",
    "start": "1019140",
    "end": "1024600"
  },
  {
    "text": "associated with the process so as soon as someone wants to be notified about 1wf state no one else can be notified",
    "start": "1024600",
    "end": "1031890"
  },
  {
    "text": "about any other states because only one event can be associated with one process it's like well how the heck does this",
    "start": "1031890",
    "end": "1037260"
  },
  {
    "text": "work then if there's multiple WF consumers and it turns out that in 80 DLL there's a higher level API you're",
    "start": "1037260",
    "end": "1044610"
  },
  {
    "start": "1042000",
    "end": "1042000"
  },
  {
    "text": "not supposed to directly call the system calls those are actually meant for ntdll itself which does assess process startup",
    "start": "1044610",
    "end": "1051150"
  },
  {
    "text": "registers its own event and then everyone else is basically getting multiplexed my NT DLL and so there's an",
    "start": "1051150",
    "end": "1057900"
  },
  {
    "text": "API called RTL subscribe W&F state change notification where you're asking ntdll on your behalf to subscribe for",
    "start": "1057900",
    "end": "1064799"
  },
  {
    "text": "this it uses its event and every time it's even get signal it goes over the list of all the current",
    "start": "1064799",
    "end": "1070360"
  },
  {
    "text": "subscribers in the process figures out who owns this particularly event and then notifies that subscriber by issuing",
    "start": "1070360",
    "end": "1076630"
  },
  {
    "text": "a callback so you're supposed to rely on this not on basically calling syscalls yourself if you want the notifications to work",
    "start": "1076630",
    "end": "1082930"
  },
  {
    "text": "and this will have some interesting use cases I want to talk about forensics and some attack surfaces so that callback",
    "start": "1082930",
    "end": "1088210"
  },
  {
    "start": "1087000",
    "end": "1087000"
  },
  {
    "text": "basically gives you the name the stamp the buffer and the buffer size and this is how inside of your process you can",
    "start": "1088210",
    "end": "1093850"
  },
  {
    "text": "know that there's data has been published for one of these W&F state IDs that you're registered for now there",
    "start": "1093850",
    "end": "1100180"
  },
  {
    "start": "1100000",
    "end": "1100000"
  },
  {
    "text": "also is a kernel mode API so in kernel mode there also is a e^x subscribe W&F state change which let's do the same",
    "start": "1100180",
    "end": "1106720"
  },
  {
    "text": "thing as the kernel driver and then the driver gets that gets a call back and the driver calls e^x query W&F stay data",
    "start": "1106720",
    "end": "1113080"
  },
  {
    "text": "to read the information that's there so both drivers can publish and consume WN",
    "start": "1113080",
    "end": "1118180"
  },
  {
    "text": "f data both drivers and user space applications can can get notifications for W and F as well so you can",
    "start": "1118180",
    "end": "1124660"
  },
  {
    "text": "communicate across process boundaries across session boundaries across user kernel boundaries and obviously it's",
    "start": "1124660",
    "end": "1129940"
  },
  {
    "text": "very interesting when you have you know an IPC mechanism that's that's this rich that crosses these many boundaries and",
    "start": "1129940",
    "end": "1135370"
  },
  {
    "text": "kind of hands the interest of looking at it in more detail because no one's really talked about the W and F in the",
    "start": "1135370",
    "end": "1140500"
  },
  {
    "text": "past so that's kind of the basic basics of how it works and we're gonna publish",
    "start": "1140500",
    "end": "1146260"
  },
  {
    "text": "all these slides obviously so you're not have to memorize how those api's work and what's good is that they",
    "start": "1146260",
    "end": "1151510"
  },
  {
    "text": "accidentally all leak them in an old windows header file so they're available you know if you know where to look but",
    "start": "1151510",
    "end": "1156850"
  },
  {
    "text": "you'll have the slides sound as well so next up I'll pass it off to Gibby to talk about some of the data structures",
    "start": "1156850",
    "end": "1162550"
  },
  {
    "text": "that are involved in the internals of keeping track of all this data so now",
    "start": "1162550",
    "end": "1170410"
  },
  {
    "text": "you have basically prudent and understanding about the WWN F mechanism",
    "start": "1170410",
    "end": "1176020"
  },
  {
    "text": "so let's dive into the structures so W&F events is indentified in memory as a",
    "start": "1176020",
    "end": "1184870"
  },
  {
    "start": "1178000",
    "end": "1178000"
  },
  {
    "text": "name instance these structures basically or the all the information rich it to the event for example you can find the",
    "start": "1184870",
    "end": "1193780"
  },
  {
    "text": "state name the scope in which the event occurs so security descriptor and so on",
    "start": "1193780",
    "end": "1201480"
  },
  {
    "text": "you may notice that the first field of the structures is tiny tiny circles",
    "start": "1201480",
    "end": "1209350"
  },
  {
    "text": "names the W&F context vida in fact this to choose keeps information",
    "start": "1209350",
    "end": "1216190"
  },
  {
    "text": "about the type of structures and decides and in fact most of the deputy minutes",
    "start": "1216190",
    "end": "1223510"
  },
  {
    "text": "to choose as these videos so it's kind of convenient when you're in memory and",
    "start": "1223510",
    "end": "1229810"
  },
  {
    "text": "your 1 25 something you don't know because you just have so Ada and also",
    "start": "1229810",
    "end": "1237550"
  },
  {
    "text": "things such as interesting is that in the instance name you have a pointer to",
    "start": "1237550",
    "end": "1243850"
  },
  {
    "text": "the data that will be sent to subscribers this data start with a",
    "start": "1243850",
    "end": "1251410"
  },
  {
    "text": "double unit state data structures that gives information about the size of the",
    "start": "1251410",
    "end": "1257680"
  },
  {
    "text": "data and for example the number of time it has been updated as Alex told you an",
    "start": "1257680",
    "end": "1267370"
  },
  {
    "start": "1265000",
    "end": "1265000"
  },
  {
    "text": "event occurs in a specific scope so since the scopes are represented as",
    "start": "1267370",
    "end": "1272640"
  },
  {
    "text": "scope instances just cut this cap",
    "start": "1272640",
    "end": "1278350"
  },
  {
    "text": "instances gives all of the stuff needed to identify this cap and they also give",
    "start": "1278350",
    "end": "1287500"
  },
  {
    "text": "got a list of name instance that are available on this cup well when I said a",
    "start": "1287500",
    "end": "1294850"
  },
  {
    "text": "list is not a list it's more like a binary tree that enables a quick lookup",
    "start": "1294850",
    "end": "1300810"
  },
  {
    "text": "and all these scape instances are stored",
    "start": "1300810",
    "end": "1305980"
  },
  {
    "start": "1302000",
    "end": "1302000"
  },
  {
    "text": "in lists and tree and escape map enables to keep track of all of that you can",
    "start": "1305980",
    "end": "1313420"
  },
  {
    "text": "find the scope map in the server side or Global's and basically yeah it's bound",
    "start": "1313420",
    "end": "1321970"
  },
  {
    "text": "to one side but for bond to other side okay so",
    "start": "1321970",
    "end": "1328509"
  },
  {
    "start": "1326000",
    "end": "1326000"
  },
  {
    "text": "when a consumer wants to subscribe an event it created the Burien f",
    "start": "1328509",
    "end": "1333669"
  },
  {
    "text": "subscription this situation basically stores all the information needed to",
    "start": "1333669",
    "end": "1339429"
  },
  {
    "text": "have four W&F to to notify the consumer",
    "start": "1339429",
    "end": "1346379"
  },
  {
    "text": "it's also star as the state of the switch question and the submitted the",
    "start": "1346379",
    "end": "1353080"
  },
  {
    "text": "way so the option in fact okay last structures in canals i",
    "start": "1353080",
    "end": "1361779"
  },
  {
    "start": "1357000",
    "end": "1357000"
  },
  {
    "text": "represents is the process context in fact the ISIS structures that keep",
    "start": "1361779",
    "end": "1368649"
  },
  {
    "text": "tracks of all the different objects ready to a process and you can find it",
    "start": "1368649",
    "end": "1375459"
  },
  {
    "text": "in the a process object so oh yeah you",
    "start": "1375459",
    "end": "1382450"
  },
  {
    "text": "may notice that the last field is actually syndication in notification event so that mean yeah you can just",
    "start": "1382450",
    "end": "1389079"
  },
  {
    "text": "have one event as Alex told you so how's the WEF managed to circulant program of",
    "start": "1389079",
    "end": "1397089"
  },
  {
    "text": "having only one single processed notification well when you you even when",
    "start": "1397089",
    "end": "1403899"
  },
  {
    "text": "you are using high-level api's you actually are dealings with a set of user",
    "start": "1403899",
    "end": "1409149"
  },
  {
    "text": "none structures this another's multiplexing of subscriptions and to",
    "start": "1409149",
    "end": "1415479"
  },
  {
    "text": "keep track of all these different object you have the subscription table and",
    "start": "1415479",
    "end": "1422519"
  },
  {
    "text": "basically if you have the sub consumer that want to subscribe an event you will",
    "start": "1422519",
    "end": "1431440"
  },
  {
    "text": "create a W&F name its description this structures is a unique for a state name",
    "start": "1431440",
    "end": "1438309"
  },
  {
    "text": "in the process context and then you will also have W net user subscription to of",
    "start": "1438309",
    "end": "1446469"
  },
  {
    "text": "the information about the notification mechanism for the soup consumer so this",
    "start": "1446469",
    "end": "1454479"
  },
  {
    "text": "way you can have one the various names description and",
    "start": "1454479",
    "end": "1459940"
  },
  {
    "text": "several the Burien excuse of subscription so that's how the kaepa the",
    "start": "1459940",
    "end": "1466960"
  },
  {
    "text": "issue is a managed and I think that's quite cool okay so I finished those are",
    "start": "1466960",
    "end": "1475299"
  },
  {
    "text": "structures and I will present some tours oh well we are making some kills",
    "start": "1475299",
    "end": "1481169"
  },
  {
    "text": "so as you can see there's a lot of structures and it's quite an answer to",
    "start": "1481169",
    "end": "1486630"
  },
  {
    "text": "keep track of all of them to intensify them when you're debugging every you",
    "start": "1486630",
    "end": "1492669"
  },
  {
    "text": "have let you win the back command which is called bang W&F that's provide and",
    "start": "1492669",
    "end": "1500860"
  },
  {
    "text": "play relevant information about the structures the thing is it doesn't work out of the box because it's realized of",
    "start": "1500860",
    "end": "1507700"
  },
  {
    "text": "the symbols and obviously we don't have any symbols but you can fix it by adding",
    "start": "1507700",
    "end": "1515200"
  },
  {
    "text": "the structure definition to your PD B's and with that so WM f is a W and F",
    "start": "1515200",
    "end": "1524880"
  },
  {
    "text": "command is working the problem is well",
    "start": "1524880",
    "end": "1532240"
  },
  {
    "text": "even if you manage to fix it you would still have a bunch of error popping out",
    "start": "1532240",
    "end": "1537399"
  },
  {
    "text": "I think well it seemed like ii wasn't really finished and it's not totally",
    "start": "1537399",
    "end": "1544179"
  },
  {
    "text": "polished yeah it's quite strange particularly I had to patch the DLL for",
    "start": "1544179",
    "end": "1551260"
  },
  {
    "text": "for this beings spot some of the features so it's quite strange so for artists reason I decided to",
    "start": "1551260",
    "end": "1559059"
  },
  {
    "start": "1559000",
    "end": "1559000"
  },
  {
    "text": "create my own extension it's nothing fancy in basically do all the things at",
    "start": "1559059",
    "end": "1565120"
  },
  {
    "text": "the command line the command does already but it doesn't rely on your PB",
    "start": "1565120",
    "end": "1572200"
  },
  {
    "text": "symbols so it should work out of the box and smoothly",
    "start": "1572200",
    "end": "1578340"
  },
  {
    "text": "nothing region I created a tiny Python",
    "start": "1578880",
    "end": "1584019"
  },
  {
    "text": "modules thanks to your script for in a ping communication ya deberías",
    "start": "1584019",
    "end": "1593250"
  },
  {
    "text": "basically with this module you can read and write to existing name instance or",
    "start": "1593250",
    "end": "1599980"
  },
  {
    "text": "even create a new temporary state name for creating some kind of server side",
    "start": "1599980",
    "end": "1606880"
  },
  {
    "text": "and the wizard supply inside you can just create it and it's pretty pretty",
    "start": "1606880",
    "end": "1612750"
  },
  {
    "text": "easy to use I show you an example well I just created a server and youngsaeng",
    "start": "1612750",
    "end": "1621120"
  },
  {
    "text": "second join cakes yeah alright thanks a real fun and",
    "start": "1621120",
    "end": "1629320"
  },
  {
    "text": "apparently this is what goes for not very fancy it's just she just put 50",
    "start": "1629320",
    "end": "1634960"
  },
  {
    "text": "commands in there and that are super awesome but it's nothing fancy I created something that's really not fancy which",
    "start": "1634960",
    "end": "1640690"
  },
  {
    "text": "is a little see tool and I don't do Python because you know I suck so this",
    "start": "1640690",
    "end": "1646210"
  },
  {
    "text": "see tool WF dump and basically lets you do is just dump all the state names and I'll do a little demo",
    "start": "1646210",
    "end": "1652000"
  },
  {
    "text": "it lets you brute force state names as well should have how actually you can root for the names that are not well-known lets you read a state name",
    "start": "1652000",
    "end": "1659260"
  },
  {
    "text": "right into a state name or register for a notification on a state name in a very",
    "start": "1659260",
    "end": "1664960"
  },
  {
    "text": "very simple tool here's you know me running it with with Daphne saying you",
    "start": "1664960",
    "end": "1670510"
  },
  {
    "text": "know just just dump all the states and you know it just starts dumping all the WF IDs some of these you're gonna see",
    "start": "1670510",
    "end": "1677620"
  },
  {
    "text": "look pretty interesting and we're gonna talk about that very soon kind of tells you you know if there's system wiry door",
    "start": "1677620",
    "end": "1684610"
  },
  {
    "text": "for process if you have write access or not there's any current subscribers to",
    "start": "1684610",
    "end": "1689770"
  },
  {
    "text": "it if you have sorry this is the scope read write read only and then it gives",
    "start": "1689770",
    "end": "1695740"
  },
  {
    "text": "you kind of the current change stamp so that kind of tells you how many times just has been updated obviously if it's zero it means no one's ever written into",
    "start": "1695740",
    "end": "1702040"
  },
  {
    "text": "this and then basically how much data is currently nasty event so once you have",
    "start": "1702040",
    "end": "1707410"
  },
  {
    "text": "the tool to play around with obviously the he'll probably make a lot more sense but it's kind of something I used initially to kind of figure out you know",
    "start": "1707410",
    "end": "1714010"
  },
  {
    "text": "what are different WF IDs out there that we can start looking at and you know",
    "start": "1714010",
    "end": "1719080"
  },
  {
    "text": "playing around with and again many of these seem very interesting just from kind of looking at",
    "start": "1719080",
    "end": "1724110"
  },
  {
    "text": "them from the beginning and I can start dumping them looking at a security scriptures and so on and so forth so hopefully with these tools in the",
    "start": "1724110",
    "end": "1729900"
  },
  {
    "text": "extensions once we release them you know you can do your own research and find out more because we've literally only",
    "start": "1729900",
    "end": "1735840"
  },
  {
    "text": "scratch the surface of everything that's out there and so let's talk about about kind of what are some of the interesting",
    "start": "1735840",
    "end": "1741120"
  },
  {
    "text": "areas you can start poking at w enough the first and some of the kind of findings that I had because some of you",
    "start": "1741120",
    "end": "1747870"
  },
  {
    "start": "1744000",
    "end": "1744000"
  },
  {
    "text": "know me I'm I don't do fuzzers not because I look down on them on anything I'm just not a fuzzer person I I like",
    "start": "1747870",
    "end": "1753210"
  },
  {
    "text": "finding these on Logic issues but accidentally as I was writing WF dump I",
    "start": "1753210",
    "end": "1758400"
  },
  {
    "text": "kind of turned it into a fuzzer because one of the ways I wanted to see if I",
    "start": "1758400",
    "end": "1763440"
  },
  {
    "text": "have access to modify state name is instead of getting it secured descriptor I just tried writing into it and I said",
    "start": "1763440",
    "end": "1770130"
  },
  {
    "text": "look if I just write zero bytes what could go wrong right it's actually pretty naive because if you write zero",
    "start": "1770130",
    "end": "1776130"
  },
  {
    "text": "bytes you're overriding anyone that had any had ever written anything in there whose data hadn't been consumed yet so",
    "start": "1776130",
    "end": "1782670"
  },
  {
    "text": "when the consumer comes along they get my zero byte payload instead of the real payload also every writes changes the",
    "start": "1782670",
    "end": "1787950"
  },
  {
    "text": "chained stamp so anyone that was trying to write to it legitimately with enforced change stamps saw some other",
    "start": "1787950",
    "end": "1794760"
  },
  {
    "text": "things already modify the data so it ended up happening after I wrote zero",
    "start": "1794760",
    "end": "1800160"
  },
  {
    "text": "into every single W and F ID on my system is explored just disappeared I could never relaunch it I rebooted the",
    "start": "1800160",
    "end": "1807300"
  },
  {
    "text": "Machine and I was greeted by a black screen my that's not good and I had to",
    "start": "1807300",
    "end": "1813120"
  },
  {
    "text": "fix it by basically going on a different machines registry exporting all the W nfid data back and I was like right data",
    "start": "1813120",
    "end": "1819510"
  },
  {
    "text": "is persistent so I probably wrote a bunch of zeros any persistent W enough state ID that something gonna system",
    "start": "1819510",
    "end": "1825510"
  },
  {
    "text": "relies on but the interesting thing is I had run I had run WN f dumb as a",
    "start": "1825510",
    "end": "1830580"
  },
  {
    "text": "standard user so like Oh a standard user King Nuka box cool I think I should have",
    "start": "1830580",
    "end": "1835620"
  },
  {
    "text": "more research on this another thing that I did is I eventually dumped every",
    "start": "1835620",
    "end": "1840660"
  },
  {
    "start": "1838000",
    "end": "1838000"
  },
  {
    "text": "single byte that was there in every single W and F ID both his admin both the system both the cemented user and a",
    "start": "1840660",
    "end": "1846930"
  },
  {
    "text": "standard user when I started reading some of the data that's there I start seeing things like you know wireless",
    "start": "1846930",
    "end": "1852000"
  },
  {
    "text": "network names and things like pointers you know they that's privileged across process",
    "start": "1852000",
    "end": "1858060"
  },
  {
    "text": "boundaries user boundaries there was some globally scoped you know world accessible W nuff state names whose data",
    "start": "1858060",
    "end": "1865070"
  },
  {
    "text": "really shouldn't be exposed that way and you know I submitted these to nsrc last",
    "start": "1865070",
    "end": "1870990"
  },
  {
    "text": "week because I was reminded that actually these types of issues do matter information disclosure czar considered",
    "start": "1870990",
    "end": "1876630"
  },
  {
    "text": "security boundaries and it's hard to keep track of all that so that's one reason why I can't share the tools or I won't name names because if you run the",
    "start": "1876630",
    "end": "1884100"
  },
  {
    "text": "tools you would literally see that in like the first three seconds so please don't do that wait for them to fix it",
    "start": "1884100",
    "end": "1889460"
  },
  {
    "text": "and so that's why these tools will come out once these issues are fixed because we don't want to make it easier for",
    "start": "1889460",
    "end": "1894570"
  },
  {
    "text": "people to just rediscover the the same bucks another thing that I have noticed is when I accidentally wrote some data",
    "start": "1894570",
    "end": "1901140"
  },
  {
    "start": "1896000",
    "end": "1896000"
  },
  {
    "text": "in one of the WUF IDs I wasn't able to launch any modern apps anymore so calc actually calc is modern nowadays regedit",
    "start": "1901140",
    "end": "1908610"
  },
  {
    "text": "work fine your notepad work but calculator the new one in Windows 10 or any other metro modern payal app wasn't",
    "start": "1908610",
    "end": "1915660"
  },
  {
    "text": "launching anymore because I accidentally corrupted one of the state names reboot it and it worked again right so I wasn't",
    "start": "1915660",
    "end": "1922050"
  },
  {
    "text": "trying to like fuzz and find these types of issues but just kind of while accidentally riding into the wrong thing",
    "start": "1922050",
    "end": "1927630"
  },
  {
    "text": "there these things are happening the last one is when I run my tools as admin so again I had to be admin so it's",
    "start": "1927630",
    "end": "1933720"
  },
  {
    "start": "1929000",
    "end": "1929000"
  },
  {
    "text": "probably not an issue but as admin and when I started writing garbage over the WUF world I started getting service hosts to crash",
    "start": "1933720",
    "end": "1939630"
  },
  {
    "text": "with no point of dereferences so you know probably not exploitable have to be admin anyway who cares about an admin to",
    "start": "1939630",
    "end": "1946500"
  },
  {
    "text": "service null pointer but it kind of showed me you know what if someone is actually competent in the arc of writing fuzzers and you know crew creating",
    "start": "1946500",
    "end": "1953460"
  },
  {
    "text": "polymorphic data and you know doing all the things that good fuzz are supposed to do and then logging what right caused",
    "start": "1953460",
    "end": "1958890"
  },
  {
    "text": "what crash I'm sure you could find something right I mean if like me stumbling around I got some things to",
    "start": "1958890",
    "end": "1964710"
  },
  {
    "text": "happen someone more competent and probably do a lot better there so how do you kind of discover your these names so",
    "start": "1964710",
    "end": "1972060"
  },
  {
    "start": "1967000",
    "end": "1967000"
  },
  {
    "text": "the first approach is to basically go for the well-known permanent persistence names there in the registry so if you",
    "start": "1972060",
    "end": "1977400"
  },
  {
    "text": "just enumerate the registry keys that are on an earlier slide also on the kernel you can basically get all the",
    "start": "1977400",
    "end": "1983580"
  },
  {
    "text": "state names and the registry data that's there is the state data that's there right now plus is the queue descriptor",
    "start": "1983580",
    "end": "1989250"
  },
  {
    "text": "so the secure descriptor and the data that's there and that's what my tool does basically parses that and shows it",
    "start": "1989250",
    "end": "1994799"
  },
  {
    "text": "to you in a nice format but ten three names they're only known to the kernel they're not in the registry so I also",
    "start": "1994799",
    "end": "2001580"
  },
  {
    "text": "wanted to do fahza to play around with temporary names I'm like well how do I get those without having a kernel",
    "start": "2001580",
    "end": "2007279"
  },
  {
    "text": "extension well if you think about a temporary name or volatile name again it's a state name like any other so it's",
    "start": "2007279",
    "end": "2013909"
  },
  {
    "start": "2009000",
    "end": "2009000"
  },
  {
    "text": "got a version and the version is always one it's got a lifetime and the lifetime is temporary it's got a permanent flag",
    "start": "2013909",
    "end": "2020510"
  },
  {
    "text": "which by definition is 0 because the temporary name can't have permanent data and the scope is one of the four",
    "start": "2020510",
    "end": "2025760"
  },
  {
    "text": "possible scopes right Machine scope or process scope or user scope so what the",
    "start": "2025760",
    "end": "2030830"
  },
  {
    "text": "only part that's left to guess is the sequence number and a sequence numbers 51 bits how are you gonna brute-force 51",
    "start": "2030830",
    "end": "2036649"
  },
  {
    "text": "bits you don't have to because remember the sequence number is a monotonically increasing number that starts 0 so for",
    "start": "2036649",
    "end": "2043700"
  },
  {
    "text": "permanent names you know those are in the registry but for temporary names you",
    "start": "2043700",
    "end": "2049040"
  },
  {
    "text": "remember that this is it gets reset so once you reboot the machine how many stadiums can there possibly be 20,000",
    "start": "2049040",
    "end": "2055520"
  },
  {
    "text": "50,000 a million let's say a million so I just basically loop from zero to a million try all the sequence numbers and",
    "start": "2055520",
    "end": "2062118"
  },
  {
    "text": "it turns out there's an API query W&F state name information with W info state",
    "start": "2062119",
    "end": "2068210"
  },
  {
    "text": "name exists and this tells you if this state name exists or not now this thing name doesn't exist that the returns",
    "start": "2068210",
    "end": "2074240"
  },
  {
    "text": "false if the state name exists and you're allowed to know that it exists it returns exists and if the state name",
    "start": "2074240",
    "end": "2080148"
  },
  {
    "text": "exists and you're not allowed to know that it exists it returns access denied so you know it exists right so very easy",
    "start": "2080149",
    "end": "2088550"
  },
  {
    "text": "to be asked a brute-force what the names are even though you might not be able to access them at least you know they're there so you can you can start messing",
    "start": "2088550",
    "end": "2094398"
  },
  {
    "start": "2094000",
    "end": "2094000"
  },
  {
    "text": "with them now the last problem is the secure descriptors how can you know what access you have to the state name again",
    "start": "2094399",
    "end": "2100369"
  },
  {
    "text": "with the kernel I could just dump the SD and see it but from user space the skews creeper isn't anywhere there so I said",
    "start": "2100369",
    "end": "2106730"
  },
  {
    "text": "ok well if I can try reading from it then I know it'll work rest illustrated in the read ok the read doesn't work I",
    "start": "2106730",
    "end": "2112069"
  },
  {
    "text": "know I don't have read access how can I tell if I've write access well again you can do this stupid thing I was doing",
    "start": "2112069",
    "end": "2117800"
  },
  {
    "text": "initially which is write nothing but by writing nothing you're destroying what's there but remember that when you run",
    "start": "2117800",
    "end": "2123470"
  },
  {
    "text": "you can enforce the current change them and when I thought it is what what if I make the current change snap be F F F F",
    "start": "2123470",
    "end": "2130609"
  },
  {
    "text": "F F F F F F F F F well if you have write access you're gonna get back status and",
    "start": "2130609",
    "end": "2136099"
  },
  {
    "text": "valid change that which basically tells you it's not an F F F F F F F F right now no rights gonna happen so you didn't",
    "start": "2136099",
    "end": "2142520"
  },
  {
    "text": "corrupt anything if you don't have access you're gonna get access denied and it's still not gonna change anything",
    "start": "2142520",
    "end": "2148280"
  },
  {
    "text": "so if I get access denied I know I don't have write access if I get invalid change stamp I know I have write access but thankfully I",
    "start": "2148280",
    "end": "2154730"
  },
  {
    "text": "didn't modify the data the only way this can break is if there is a legitimate event out there whose change that really",
    "start": "2154730",
    "end": "2160940"
  },
  {
    "text": "is F F F F F F F yes by writing into it I will now make it overflow into zero and potentially break something but that",
    "start": "2160940",
    "end": "2166880"
  },
  {
    "text": "would mean there's been four billion writes in a temporary state name which which should never happen so that's kind of the approach I took when creating WN",
    "start": "2166880",
    "end": "2173750"
  },
  {
    "text": "f WN f tap now what are some things you can do with would that be enough other than trying to like once you know these",
    "start": "2173750",
    "end": "2179900"
  },
  {
    "text": "names are well one of the things you can use that PMF for is basically a covert side channel right let's say you want to",
    "start": "2179900",
    "end": "2185450"
  },
  {
    "text": "communicate across process boundaries there's lots of windows EP outlets that lets you do that but what's cool about W&F is you get",
    "start": "2185450",
    "end": "2192140"
  },
  {
    "text": "these well-known W&F names that already exists that you don't have to register so there's no windows api that anyone",
    "start": "2192140",
    "end": "2198109"
  },
  {
    "text": "any EDR vendor can hook that tells you someone is using a well known name because the well-known name is is",
    "start": "2198109",
    "end": "2204020"
  },
  {
    "text": "already there and so you can publish and read from a well-known name and the only thing that anyone's ever gonna see is",
    "start": "2204020",
    "end": "2210140"
  },
  {
    "text": "that you did a system call but you know in Windows there's no way to hook system calls officially right and so reading",
    "start": "2210140",
    "end": "2215540"
  },
  {
    "text": "and writing into wnf names doesn't reveal anything that vendors know know about unless they know the registry keys",
    "start": "2215540",
    "end": "2221599"
  },
  {
    "text": "where the data is being stored so with well-known names you can basically store data and read the data later by relying",
    "start": "2221599",
    "end": "2228530"
  },
  {
    "text": "on parts of the registry that most people don't know what was in there and without these actually being registry",
    "start": "2228530",
    "end": "2233810"
  },
  {
    "text": "reads or writes right cuz if you're an anti Meyer vendor who's doing the registry right it's the kernels WF",
    "start": "2233810",
    "end": "2239240"
  },
  {
    "text": "subsystem who's doing the crud that registry read it's the kernels w nuff subsystem so by using state names that",
    "start": "2239240",
    "end": "2245089"
  },
  {
    "text": "are defined but not used by anyone you can kind of by piggybacking on your registry",
    "start": "2245089",
    "end": "2250250"
  },
  {
    "text": "you know achieve a side channel that most people don't know what to look for the other option is to actually create",
    "start": "2250250",
    "end": "2255980"
  },
  {
    "start": "2255000",
    "end": "2255000"
  },
  {
    "text": "your own names now if you create your own temporary names this completely avoids the registry all right so these are now",
    "start": "2255980",
    "end": "2262010"
  },
  {
    "text": "gonna be names and data that only exists in current memory where most people don't know where to look with the caveat",
    "start": "2262010",
    "end": "2268970"
  },
  {
    "text": "that you do have to register by now calling zlw create register name but as you're gonna see there's no etw event",
    "start": "2268970",
    "end": "2275210"
  },
  {
    "text": "there's no kernel notification and there's no event log there's no auditing of any kind when someone registers a",
    "start": "2275210",
    "end": "2280640"
  },
  {
    "text": "temporary name so unless you literally hook that API which you know you all know you're not supposed to be hooking",
    "start": "2280640",
    "end": "2285710"
  },
  {
    "text": "Windows api's it's a completely invisible way to basically exchange data between processes and there are many",
    "start": "2285710",
    "end": "2291650"
  },
  {
    "text": "other such ways but this is one that you know no one's kind of named and put a logo on it yet you know you know about",
    "start": "2291650",
    "end": "2297230"
  },
  {
    "text": "atom bomb being now you can call WF bombing or something like that so that's kind of one you know interesting thing",
    "start": "2297230",
    "end": "2303140"
  },
  {
    "start": "2302000",
    "end": "2302000"
  },
  {
    "text": "here and so from a EDR and time our perspective if WF permanent or",
    "start": "2303140",
    "end": "2309230"
  },
  {
    "text": "persistent names are used you'll kind of see registry reads and writes if you know about those values they'll come",
    "start": "2309230",
    "end": "2314270"
  },
  {
    "text": "from the kernel behind the scenes or some processes doing that if they're temporary names there's nothing you can",
    "start": "2314270",
    "end": "2320720"
  },
  {
    "text": "really do to see that people are using W enough although there are ECW events there actually is an ECW event for",
    "start": "2320720",
    "end": "2326480"
  },
  {
    "text": "subscribe and I'm subscribed for callback and for publish but only for user mode callers and only if you're",
    "start": "2326480",
    "end": "2333200"
  },
  {
    "text": "using the RTL api's so if you're in kernel mode and you're using WF no etw",
    "start": "2333200",
    "end": "2338390"
  },
  {
    "text": "trace is generated if you and user space and your genius is caught the system calls directly no e2w trace is being",
    "start": "2338390",
    "end": "2344059"
  },
  {
    "text": "generated at all so it's a very invisible kind of IPC mechanism which makes it interesting for me now the",
    "start": "2344059",
    "end": "2350539"
  },
  {
    "text": "other thing that's interesting is what are some names that that reveal information about the system that really",
    "start": "2350539",
    "end": "2355700"
  },
  {
    "text": "should perhaps shouldn't be revealed right now there's like 4,000 well-known names so we're just going to go over a",
    "start": "2355700",
    "end": "2360829"
  },
  {
    "text": "few of them but for example there's a W nfid called w NF Wi-Fi connection status this tells you the machine is connected",
    "start": "2360829",
    "end": "2367490"
  },
  {
    "text": "to the Wi-Fi network and the current signal strength and if you register notification on this even from Kermode",
    "start": "2367490",
    "end": "2372619"
  },
  {
    "text": "for example you'll get this data right now if some of your kernel programmers you know the official way of doing this with like an end this lightweight filter",
    "start": "2372619",
    "end": "2379160"
  },
  {
    "text": "and like sending a light diesel all you need is one API and you get notified every time the or else that will goes up",
    "start": "2379160",
    "end": "2384319"
  },
  {
    "text": "and down there's one for Bluetooth in fact there's even one called tethering States every time there's tethering",
    "start": "2384319",
    "end": "2389750"
  },
  {
    "text": "enabled or disabled you get notification there is one called power source which tells you if the",
    "start": "2389750",
    "end": "2395010"
  },
  {
    "text": "machine is current through an AC adapter or living off the battery if is living off the battery you can get the battery",
    "start": "2395010",
    "end": "2400590"
  },
  {
    "text": "level from another W nfid there are cell phone w NF IDs on this thing called a",
    "start": "2400590",
    "end": "2406350"
  },
  {
    "text": "Windows Phone which here you can bind some archaeological stores which had information like the network you're",
    "start": "2406350",
    "end": "2413130"
  },
  {
    "text": "connected to LTE band that you connected to you know if one day there's Windows phones again you know those would be",
    "start": "2413130",
    "end": "2419040"
  },
  {
    "text": "useful there's one that we came in for user behaviors for example there's audio capture all your render this will give",
    "start": "2419040",
    "end": "2425790"
  },
  {
    "text": "you notification anytime someone plays any sound and or anytime someone captures any sound so anytime I use",
    "start": "2425790",
    "end": "2431880"
  },
  {
    "text": "Cortana the capture Wi-Fi D gets notified TKB an touch event registers a",
    "start": "2431880",
    "end": "2437670"
  },
  {
    "text": "notification every single time I touch my touch screen press the mouse or press the key boom that gets notified in fact",
    "start": "2437670",
    "end": "2444510"
  },
  {
    "text": "if you might want to do user detection Windows has already its own built-in user presence detector and it will",
    "start": "2444510",
    "end": "2450990"
  },
  {
    "text": "notify SCB user present or SCP user present change when the user leaves or",
    "start": "2450990",
    "end": "2456450"
  },
  {
    "text": "approaches the Machine based on the machine learning heuristics that Windows already has so these are all things you could already do but now you have a",
    "start": "2456450",
    "end": "2462900"
  },
  {
    "text": "simple way of just registering for an ID that tells you when these things happen there's also things that there's already",
    "start": "2462900",
    "end": "2468630"
  },
  {
    "text": "API support like there is an API to get notified when a prosecute started but everyone knows about PS register across",
    "start": "2468630",
    "end": "2475590"
  },
  {
    "text": "the notification but did you know that there's a WN f shell desktop application started WN f shell application started",
    "start": "2475590",
    "end": "2483180"
  },
  {
    "text": "and terminated that if you listen for these events you will get the name and over the package name in the path of",
    "start": "2483180",
    "end": "2488730"
  },
  {
    "text": "every single process creation and destruction as long as it's down through shell execute so sure you won't get like",
    "start": "2488730",
    "end": "2494370"
  },
  {
    "text": "non shell based launches but it's a nice way to get most interactive law launched",
    "start": "2494370",
    "end": "2499650"
  },
  {
    "text": "applications without calling any other API you know one of my favorite ones is WN f edge last navigated host which",
    "start": "2499650",
    "end": "2507240"
  },
  {
    "text": "basically you know I I'll just do like a live demo hoping the demo gods are with me",
    "start": "2507240",
    "end": "2512600"
  },
  {
    "text": "WUF dumb dash n BB enough edge last",
    "start": "2512600",
    "end": "2519050"
  },
  {
    "text": "navigated host all right let's see if that works",
    "start": "2519050",
    "end": "2524609"
  },
  {
    "text": "cross fingers open edge I'll be not gonna work",
    "start": "2524609",
    "end": "2531289"
  },
  {
    "text": "let's see google.com I'm not connected so what else oh there we go",
    "start": "2531289",
    "end": "2538789"
  },
  {
    "text": "mvlr which is probably the Mandalay base Wi-Fi network so you know now I can get",
    "start": "2538789",
    "end": "2544769"
  },
  {
    "text": "every every URL that's ever piped or clicking the edge without any DLL injection or anything like that",
    "start": "2544769",
    "end": "2550739"
  },
  {
    "text": "including from kernel mode right another one is shell lockscreen active over the shells every time the lockscreen exactly",
    "start": "2550739",
    "end": "2556799"
  },
  {
    "text": "right and there are thousands of these right so I'm sure you can find something interesting if you go over that list there's also Wi-Fi deselect you change",
    "start": "2556799",
    "end": "2563969"
  },
  {
    "start": "2561000",
    "end": "2561000"
  },
  {
    "text": "state like there's one called FS RTL opt lock break where you write a bunch of pits and there's a servicing user space",
    "start": "2563969",
    "end": "2570809"
  },
  {
    "text": "that terminates those pits for you so you just write like eight and it just kills pit number eight now you'd have to",
    "start": "2570809",
    "end": "2577289"
  },
  {
    "text": "be system so this one is not something a you know app container can write in here you have to be system if your system you",
    "start": "2577289",
    "end": "2582509"
  },
  {
    "text": "can already terminate process right but you terminated process going through mechanisms that have no CD articles know",
    "start": "2582509",
    "end": "2588029"
  },
  {
    "text": "how to look at who the heck knows that if you write eight in there it ends up killing process eight you",
    "start": "2588029",
    "end": "2593969"
  },
  {
    "text": "know there's other things like that BNF surd flushed cache sugar which flush to the certificate cache or boot memory",
    "start": "2593969",
    "end": "2599309"
  },
  {
    "text": "partitions restore which restores memory allocations so there's nothing nfid that by signaling them you get the system to",
    "start": "2599309",
    "end": "2605789"
  },
  {
    "text": "do certain things they almost behave like API is where you put some parameters you signal the event and then some service does some action on behalf",
    "start": "2605789",
    "end": "2612959"
  },
  {
    "text": "of that and you know there's really lots examples people will find and so if you",
    "start": "2612959",
    "end": "2618900"
  },
  {
    "text": "want to kind of find things to have fun with one of the things you can do is basically dump the WUF process context",
    "start": "2618900",
    "end": "2625319"
  },
  {
    "text": "and instead of a double eunice process context you're gonna see all the active for subscriptions now if you look at a system process all of its subscriptions",
    "start": "2625319",
    "end": "2632609"
  },
  {
    "text": "are basically subscriptions owned by kernel mode drivers as you can see what are all the kernel mode callbacks",
    "start": "2632609",
    "end": "2638189"
  },
  {
    "text": "that'll get notified based on what W&F ID that kind of gives you know this driver is my attack surface right here",
    "start": "2638189",
    "end": "2644309"
  },
  {
    "text": "and then the callbacks office again you get a payload and the question is you know if i statically analyze the driver",
    "start": "2644309",
    "end": "2650009"
  },
  {
    "text": "what does it do with the pay with its payload is it actually correctly handling the data that comes in there",
    "start": "2650009",
    "end": "2655309"
  },
  {
    "text": "now in some cases you're going to find aggravated driver there's a driver called the event aggregator ei dot sis",
    "start": "2655309",
    "end": "2661860"
  },
  {
    "text": "and it a great supple unified ease and it has its own sub callbacks so there's drivers that rely on CA da",
    "start": "2661860",
    "end": "2668400"
  },
  {
    "text": "sis which then registered some callback kind of like in userspace yet ntdll acting as an aggregator as well in",
    "start": "2668400",
    "end": "2674670"
  },
  {
    "text": "userspace there's an RTL pwf process subscriptions table and this table has",
    "start": "2674670",
    "end": "2680780"
  },
  {
    "text": "underling lists of all the active subscriptions as Gabriele talked about for each subscription all the callbacks",
    "start": "2680780",
    "end": "2687420"
  },
  {
    "text": "that are associated with it and given a process you can see what are all the user mode functions inside of every DLL",
    "start": "2687420",
    "end": "2693660"
  },
  {
    "text": "instead of every function and what name are they basically listening on so that kind of gives you a good mapping of here",
    "start": "2693660",
    "end": "2699660"
  },
  {
    "text": "all the code paths that I can hit by modifying or writing into certain W and F state names and let me statically",
    "start": "2699660",
    "end": "2705930"
  },
  {
    "text": "analyze the code right so you can have the Foss things and just write garbage or you know look into what you know the callbacks are and seeing what they're",
    "start": "2705930",
    "end": "2712800"
  },
  {
    "text": "gonna be doing and so once you know that you can basically signal arbitrary subscribers to see you know what's the",
    "start": "2712800",
    "end": "2718680"
  },
  {
    "text": "impact the system once I do this are the fun things that I can do one of the things actually wanted to talk about is",
    "start": "2718680",
    "end": "2724290"
  },
  {
    "text": "how you can play with windows insider features because all of the wind side windows inside insider preview a be",
    "start": "2724290",
    "end": "2730920"
  },
  {
    "text": "testing that Microsoft does where they enable dark mode for half of you but not the other half and they see if one half",
    "start": "2730920",
    "end": "2736200"
  },
  {
    "text": "is jealous of the other half for other good reasons or bad reasons is they actually encode thousands of a be",
    "start": "2736200",
    "end": "2742110"
  },
  {
    "text": "testing features asked w enough payload inside of w nfid and that's so figuring",
    "start": "2742110",
    "end": "2748230"
  },
  {
    "text": "this out rafael Riviera really great you know windows MVP and internals kind of person he ended up",
    "start": "2748230",
    "end": "2755490"
  },
  {
    "text": "figuring us out as well and he actually created a tool on github called mock to where it actually uses WF underneath the",
    "start": "2755490",
    "end": "2761580"
  },
  {
    "text": "scenes to modify which windows insider preview features are activated on your machine so even though you didn't get",
    "start": "2761580",
    "end": "2767640"
  },
  {
    "text": "selected to try this cool new dark mode feature with this you can kind of force it on or if you're like yuck dark mode",
    "start": "2767640",
    "end": "2773370"
  },
  {
    "text": "you just want to force it off you can do that so that's kind of you know one of",
    "start": "2773370",
    "end": "2778380"
  },
  {
    "text": "the many things that rely on top of that up that'd be enough and if you go over and you look at like what are some of the interesting insider settings you can",
    "start": "2778380",
    "end": "2784560"
  },
  {
    "start": "2782000",
    "end": "2782000"
  },
  {
    "text": "enable one of them is Windows application guard container for office oh cool office under application guard I",
    "start": "2784560",
    "end": "2791010"
  },
  {
    "text": "know gonna happen the Andromeda store oh so there is gonna be a device called Andromeda the CNN anti-spoofing data",
    "start": "2791010",
    "end": "2798059"
  },
  {
    "text": "collection not I'm gonna get into that deep inferno I don't know what that does",
    "start": "2798059",
    "end": "2803579"
  },
  {
    "text": "dev mode internal alright so you kind of see you know new features that they're testing internally and what W&F you can",
    "start": "2803579",
    "end": "2810269"
  },
  {
    "text": "enable the enable those on like HV CI everywhere or you know virtual machine chipset load firmer from file so",
    "start": "2810269",
    "end": "2816630"
  },
  {
    "text": "interesting things show up there you know in the world of things that rely behind WN F so if you interested in some",
    "start": "2816630",
    "end": "2823289"
  },
  {
    "text": "of the insider stuff here definitely check out Mach 2 by Rafael Rivera on github he uses you know they'll be",
    "start": "2823289",
    "end": "2828809"
  },
  {
    "text": "enough to kind of mess around these things and there's lots of other things you can mess around with as well another",
    "start": "2828809",
    "end": "2834029"
  },
  {
    "start": "2830000",
    "end": "2830000"
  },
  {
    "text": "thing you can do with W&F that's kind of not by design is code injection right lots of people love to migrate code from",
    "start": "2834029",
    "end": "2840089"
  },
  {
    "text": "one place to another and the way they normally do that is by either calling write process memory or using file",
    "start": "2840089",
    "end": "2845190"
  },
  {
    "text": "mappings or using add some objects or Windows messages or GUI objects because these are all Windows epi is where one",
    "start": "2845190",
    "end": "2850499"
  },
  {
    "text": "side can send some data and the other side can receive the data well W have lets you do that as well so if you",
    "start": "2850499",
    "end": "2856380"
  },
  {
    "text": "actually know there's a W nfid that a process already kind of reads from time to time if you signal that ID and put a",
    "start": "2856380",
    "end": "2862680"
  },
  {
    "text": "payload you know your payload is gonna end up in the other process right when that process sends a heap address to get the result the result is basically your",
    "start": "2862680",
    "end": "2869609"
  },
  {
    "text": "data so you can use this as a way to inject data or code into another process without the standard techniques that you",
    "start": "2869609",
    "end": "2875910"
  },
  {
    "text": "know everyone on the internet knows about you can also redirect code execution right because you want a",
    "start": "2875910",
    "end": "2882180"
  },
  {
    "start": "2878000",
    "end": "2878000"
  },
  {
    "text": "process the or threat to do something else and what it normally does typically use an EPC or remote thread or we change",
    "start": "2882180",
    "end": "2888089"
  },
  {
    "text": "the thread context or you modify the window long there's again lots of things that hackers and you know designers know",
    "start": "2888089",
    "end": "2894239"
  },
  {
    "text": "about but remember that instead of every process there's a list of very subscription and every subscription has",
    "start": "2894239",
    "end": "2900210"
  },
  {
    "text": "a callback and a context and so basically if I can find out a WF IDs",
    "start": "2900210",
    "end": "2905819"
  },
  {
    "text": "callback inside of your process all I have to do is modify the data structure by passing a different callback now I",
    "start": "2905819",
    "end": "2912960"
  },
  {
    "text": "have to worry about control flow guard signaling the W and F ID and now that other function runs instead of the real",
    "start": "2912960",
    "end": "2918239"
  },
  {
    "text": "function and parameter five and six are the buffer in the buffer size so by stimuli that the nfid I now get your",
    "start": "2918239",
    "end": "2923970"
  },
  {
    "text": "process to execute function it normally wouldn't execute now there's million other things you can do like this but you know it's another",
    "start": "2923970",
    "end": "2930579"
  },
  {
    "text": "kind of use case for this um or we can modify the context a lot of double Univ callbacks what the callback code does is",
    "start": "2930579",
    "end": "2937930"
  },
  {
    "text": "it gets a context and then it made on that context there's a V table there there's another function pointer there I",
    "start": "2937930",
    "end": "2943450"
  },
  {
    "text": "could just modify the function pointer in the call in the callback context of a callback signal W nfid",
    "start": "2943450",
    "end": "2948640"
  },
  {
    "text": "the real callback runs but when it reads its context its context is different and something else ends up basically",
    "start": "2948640",
    "end": "2955329"
  },
  {
    "text": "happening alright so those are kind of some ideas of things that you can end up doing to kind of wrap up here w NF is a",
    "start": "2955329",
    "end": "2963609"
  },
  {
    "start": "2962000",
    "end": "2962000"
  },
  {
    "text": "very interesting well-designed kind of feature that was added to Windows 8 provides lots of useful legitimate",
    "start": "2963609",
    "end": "2969220"
  },
  {
    "text": "functionality but because it's highly undocumented and provides almost no visibility other than a wind back",
    "start": "2969220",
    "end": "2975130"
  },
  {
    "text": "extension which doesn't work until a Gabi fixed it you basically have no idea what's really",
    "start": "2975130",
    "end": "2980319"
  },
  {
    "text": "using W net behind the scenes and there's really no reason where Microsoft shouldn't just publish the symbols for w",
    "start": "2980319",
    "end": "2985660"
  },
  {
    "text": "NF ID and they'll be enough it's not like there's some sort of super-secret PII and mojo in there they probably just",
    "start": "2985660",
    "end": "2991329"
  },
  {
    "text": "never thought about adding the symbols that again creates a breeding ground where people can kind of hide and the",
    "start": "2991329",
    "end": "2997059"
  },
  {
    "text": "last thing here to note is that uh BNF is basically growing beyond just providing notifications right you've got",
    "start": "2997059",
    "end": "3002819"
  },
  {
    "text": "a kernel user mode above buffer you've got things like every edge tab being like sent and W enough so there's more",
    "start": "3002819",
    "end": "3009210"
  },
  {
    "text": "and more things use W&F well the question is like our people gonna start doing silly things like putting code in",
    "start": "3009210",
    "end": "3014940"
  },
  {
    "text": "W&F state names or putting pointers and W in a state names like one of the ones we found and so because it can be used",
    "start": "3014940",
    "end": "3020640"
  },
  {
    "text": "to transfer data across boundaries you know add marks don't have to be very careful that they make sure that they",
    "start": "3020640",
    "end": "3025859"
  },
  {
    "text": "know you know WF is not documented that doesn't mean that it's secure so definitely if you're a defender start",
    "start": "3025859",
    "end": "3032039"
  },
  {
    "text": "fuzzing start building your own visibility tool start poking at this because I'm sure you'll find Dragons and hopefully once you release the tools",
    "start": "3032039",
    "end": "3038160"
  },
  {
    "text": "that'll give you kind of some more some more ideas there all right and so thank",
    "start": "3038160",
    "end": "3043920"
  },
  {
    "text": "you very very much thank you to Gabrielle for assisting with the talk and helping here I hope you liked it and",
    "start": "3043920",
    "end": "3050880"
  },
  {
    "text": "if there's any questions I think we can move to a different room and I'll be happy to feel those so thank you very",
    "start": "3050880",
    "end": "3056069"
  },
  {
    "text": "much [Applause]",
    "start": "3056069",
    "end": "3062099"
  }
]