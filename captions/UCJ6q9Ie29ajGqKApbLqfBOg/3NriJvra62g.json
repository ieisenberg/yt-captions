[
  {
    "start": "0",
    "end": "91000"
  },
  {
    "text": "[Music] [Laughter]",
    "start": "1610",
    "end": "10260"
  },
  {
    "text": "we're in the defense track and we're we're here to listen to exploit mitigation Improvement and windows8 we",
    "start": "10800",
    "end": "17160"
  },
  {
    "text": "have Matt Miller and Ken",
    "start": "17160",
    "end": "20160"
  },
  {
    "text": "Johnson all right thanks everybody uh as our Proctor said my name is Matt Miller I'm Ken Johnson and and uh we work in uh",
    "start": "24599",
    "end": "31279"
  },
  {
    "text": "the Microsoft security engineering center the team that we work on work on uh focuses on uh finding new ways to",
    "start": "31279",
    "end": "36960"
  },
  {
    "text": "make it harder for people to find vulnerabilities and making it harder for people to actually write exploits for them uh and what we're going to talk",
    "start": "36960",
    "end": "43640"
  },
  {
    "text": "about today is some of the fruits of the labor that ourselves and other people at Microsoft uh have worked on throughout windows8 uh to actually make it harder",
    "start": "43640",
    "end": "50280"
  },
  {
    "text": "for people to write exploits for vulnerabilities not just in Microsoft products but also on products that are found and software that runs on Windows",
    "start": "50280",
    "end": "57600"
  },
  {
    "text": "uh so with that let's go ahead and dive in before we get started I do want to make a special point to acknowledge uh",
    "start": "57600",
    "end": "64119"
  },
  {
    "text": "the individuals who actually worked very hard to make this work happen I think uh externally it's easy to just see",
    "start": "64119",
    "end": "69280"
  },
  {
    "text": "Microsoft as a big entity but in practice there are individual people working really hard to to make these kind of improvements and while Ken and I",
    "start": "69280",
    "end": "76200"
  },
  {
    "text": "happened to be the two people up here talking about these improvements today it it wasn't just us that worked on this uh so there were people across Windows",
    "start": "76200",
    "end": "83040"
  },
  {
    "text": "visual studio uh our team and so on and so forth that that worked really hard to make this happen uh so we just want to",
    "start": "83040",
    "end": "88280"
  },
  {
    "text": "acknowledge their hard work in this space before we uh dive into kind of the",
    "start": "88280",
    "end": "94479"
  },
  {
    "start": "91000",
    "end": "91000"
  },
  {
    "text": "core of what we're going to talk about I did wanted to set some context and provide an overview for the broad areas",
    "start": "94479",
    "end": "100479"
  },
  {
    "text": "that we've invested in with respect to security for Windows 8 you can kind of bucket these into four areas of course",
    "start": "100479",
    "end": "105960"
  },
  {
    "text": "we've made a ton of security improvements but these are kind of four broad brush Strokes that we can focus on uh for security related changes in",
    "start": "105960",
    "end": "112280"
  },
  {
    "text": "Windows 8 it probably comes as no surprise that Windows 8 continues to follow the security development life",
    "start": "112280",
    "end": "118280"
  },
  {
    "text": "cycle uh this is a uh a set of policies and procedures that Microsoft has defined that set the best practices for",
    "start": "118280",
    "end": "126039"
  },
  {
    "text": "how we design software how we implement it and how we test it uh and this goes a long way for us uh make to make sure",
    "start": "126039",
    "end": "133160"
  },
  {
    "text": "that we find and fix vulnerabilities before our product ship uh and it's something that we've continued to follow through uh in Windows 8 another area",
    "start": "133160",
    "end": "141080"
  },
  {
    "text": "that we've invested in is improving our technology to secure the boot process and windows uh and this is designed to",
    "start": "141080",
    "end": "148160"
  },
  {
    "text": "prevent uh boot kits and root kits so for UF U UEFI enabled systems uh this is",
    "start": "148160",
    "end": "154040"
  },
  {
    "text": "designed to prevent malware from starting before Windows itself starts uh and it's also meant to protect uh the",
    "start": "154040",
    "end": "160200"
  },
  {
    "text": "remainder of the boot process itself uh and this is including uh early launch anti-malware software we've also taken",
    "start": "160200",
    "end": "166959"
  },
  {
    "text": "steps to secure after the machine is booted uh and one of the things that we've done here is we've actually integrated Windows Defender uh into",
    "start": "166959",
    "end": "173640"
  },
  {
    "text": "windows by default uh so now customers can be protected uh with an antivirus solution uh that that comes shipping",
    "start": "173640",
    "end": "179599"
  },
  {
    "text": "with with Windows itself and we've also taken the application reputation features of Internet Explorer if you're",
    "start": "179599",
    "end": "185200"
  },
  {
    "text": "familiar with smart screen filter and we've actually integrated that into the platform itself so that customers can be",
    "start": "185200",
    "end": "190680"
  },
  {
    "text": "protected from malware regardless of what browser they use it's just an integrated part of the platform but for",
    "start": "190680",
    "end": "196239"
  },
  {
    "text": "our scope today we're really going to focus specifically on the work that we've done to do what we call securing",
    "start": "196239",
    "end": "201480"
  },
  {
    "text": "the core and what we mean by this is this involves integrating features uh",
    "start": "201480",
    "end": "206519"
  },
  {
    "text": "that we typically call mitigations into the platform itself that make it difficult and costly for malware authors",
    "start": "206519",
    "end": "212159"
  },
  {
    "text": "to develop reliable exploits for vulnerabilities so this is going to be the focus of what we talk about",
    "start": "212159",
    "end": "217760"
  },
  {
    "text": "today to set the stage for this we like to think about this problem in terms of",
    "start": "217760",
    "end": "223120"
  },
  {
    "start": "218000",
    "end": "218000"
  },
  {
    "text": "uh what we call exploit economics and what other people in the industry call exploit economics as well and as many",
    "start": "223120",
    "end": "229120"
  },
  {
    "text": "problems do a lot of things really do boil down to economics and from uh in this context you can think about an",
    "start": "229120",
    "end": "236120"
  },
  {
    "text": "attacker uh as wanting to achieve some kind of return on investment by leveraging some vulnerability in in",
    "start": "236120",
    "end": "241920"
  },
  {
    "text": "software and there's a very simple formula to to model uh some of the the costs uh and returns that they stand to",
    "start": "241920",
    "end": "248200"
  },
  {
    "text": "to gain from from this so on the cost side the attacker has to invest in uh first finding a vulnerability and then",
    "start": "248200",
    "end": "255200"
  },
  {
    "text": "actually weaponizing that vulnerability and that means developing a reliable exploit for it and then on the return",
    "start": "255200",
    "end": "260799"
  },
  {
    "text": "side uh the number of times that they can actually use that exploit uh and the amount that they stand to gain is what's",
    "start": "260799",
    "end": "267080"
  },
  {
    "text": "going to determine uh their return so from the the attacker perspective of course they want to maximize their",
    "start": "267080",
    "end": "272320"
  },
  {
    "text": "return on investment they want to cheaply find vulnerabilities and in practice they only really need one good vulnerability whereas from a vendor's",
    "start": "272320",
    "end": "278880"
  },
  {
    "text": "perspective we actually need to find and eliminate all vulnerabilities uh so this is an interesting imbalance uh to to",
    "start": "278880",
    "end": "285080"
  },
  {
    "text": "keep in mind and from the attacker perspective they want to drive down the cost of developing a weaponized exploit",
    "start": "285080",
    "end": "291360"
  },
  {
    "text": "so they want to be able to use cookie cutter techniques that they can apply to all the different vulnerabilities that they come into contact with and of",
    "start": "291360",
    "end": "297759"
  },
  {
    "text": "course they want to maximize uh the window of time that they uh can actually apply uh the exploit for their",
    "start": "297759",
    "end": "303800"
  },
  {
    "text": "vulnerability now of course from the vendor perspective like Microsoft we want to do the opposite so we want to",
    "start": "303800",
    "end": "309199"
  },
  {
    "text": "drive up their cost of acquiring a vulnerability we want to do things that allow us to find and eliminate classes",
    "start": "309199",
    "end": "314479"
  },
  {
    "text": "of vulnerabilities uh from our products and and actually enable our our partners to do this as well and we also want to",
    "start": "314479",
    "end": "320400"
  },
  {
    "text": "uh drive up the cost of weaponizing uh vulnerability and this means we want to do things like break uh cookbook",
    "start": "320400",
    "end": "326160"
  },
  {
    "text": "techniques that attackers uh come up with and it also means making exploits unreliable so that it's not going to",
    "start": "326160",
    "end": "331759"
  },
  {
    "text": "succeed on every machine that the attacker goes after and on the flip side we want to drive down uh the the amount",
    "start": "331759",
    "end": "338840"
  },
  {
    "text": "that they stand to gain uh through exploiting a vulnerability so this means that we want to minimize the window of",
    "start": "338840",
    "end": "344560"
  },
  {
    "text": "time that they can actually do this such as by intelligently using Telemetry uh so that we become aware of these things",
    "start": "344560",
    "end": "349720"
  },
  {
    "text": "sooner and we also could actually minimize the amount that they stand to gain from any particular exploit such as",
    "start": "349720",
    "end": "355080"
  },
  {
    "text": "by employing sandboxing Technologies to help protect user data uh and privacy so these are some of the ways that we can",
    "start": "355080",
    "end": "360960"
  },
  {
    "text": "think about from a vendor's perspective how we can try to minimize the attacker's return on",
    "start": "360960",
    "end": "366080"
  },
  {
    "text": "investment for the scope of our presentation today we're going to really focus specifically on what we've done in",
    "start": "366080",
    "end": "372919"
  },
  {
    "text": "Windows 8 uh to improve our exploit mitigation technology which is meant to increase the cost of developing a",
    "start": "372919",
    "end": "379039"
  },
  {
    "text": "reliable exploit for a vulnerability now before we can talk about what we've done in Windows 8 we",
    "start": "379039",
    "end": "384800"
  },
  {
    "start": "382000",
    "end": "382000"
  },
  {
    "text": "need to spend a little bit of time uh describing the work that we've done in the past because Windows 8 isn't the first version of Windows to include",
    "start": "384800",
    "end": "391000"
  },
  {
    "text": "exploit mitigation technology in fact we've been doing this since uh Windows XP Service Pack 2 so the way that we're",
    "start": "391000",
    "end": "397160"
  },
  {
    "text": "going to set this stage is we're going to paint some broad Strokes here uh in general when you think about memory",
    "start": "397160",
    "end": "402720"
  },
  {
    "text": "safety vulnerabilities you can generally bucket them into kind of two types of vulnerabilities there are vulnerabilities that involve uh",
    "start": "402720",
    "end": "409319"
  },
  {
    "text": "Corruption of memory that's on the stack and there are vulnerabilities that involve uh Corruption of memory that's on the heat now that's not precisely",
    "start": "409319",
    "end": "415319"
  },
  {
    "text": "true there are other types of Corruptions that can happen but for our purposes it helps to kind of put them into those two",
    "start": "415319",
    "end": "420800"
  },
  {
    "text": "contexts and so for first of all when we look at the stack paste vulnerability what attackers have done over time is",
    "start": "420800",
    "end": "427280"
  },
  {
    "text": "they've come up with a number of different techniques that they can employ to take a stack based memory corruption vulnerability and turn that",
    "start": "427280",
    "end": "433160"
  },
  {
    "text": "into something that gives them control of the instruction pointer and as we'll see in a minute control the instruction pointer is really the the first step to",
    "start": "433160",
    "end": "440400"
  },
  {
    "text": "getting arbitrary code execution so they developed a number of techniques the canonical examples the return address",
    "start": "440400",
    "end": "445879"
  },
  {
    "text": "overwrite uh some other examples are overwriting local variables and parameters on the stack uh and for Windows there's also overriding",
    "start": "445879",
    "end": "452319"
  },
  {
    "text": "structured exception Handler Records On The Stack now in turn Microsoft has responded by developing a number of",
    "start": "452319",
    "end": "458599"
  },
  {
    "text": "technologies that are designed to thwart these techniques that attackers have come up with for turning a stack based memory corruption vulnerability into",
    "start": "458599",
    "end": "464840"
  },
  {
    "text": "something that gives the control the instruction pointer so we've uh developed Technologies such as uh GS",
    "start": "464840",
    "end": "470039"
  },
  {
    "text": "which is stack cookies if you've heard of it and we've had a number of iterations of that over time and we've also developed Technologies to make it",
    "start": "470039",
    "end": "476159"
  },
  {
    "text": "more difficult to uh exploit a SE override and this includes Technologies like safe SE and seop but as you can see",
    "start": "476159",
    "end": "484199"
  },
  {
    "text": "these Technologies don't cover all the cases there are still some cases where stack based memory corruption could allow an attacker to get control of the",
    "start": "484199",
    "end": "490400"
  },
  {
    "text": "instruction pointer so there are still some things that are left unmitigated today as I mentioned there are kind of",
    "start": "490400",
    "end": "496080"
  },
  {
    "text": "these two broad buckets and the other bucket are heat-based vulnerabilities and like the stack based memory corruption vulnerabilities attackers",
    "start": "496080",
    "end": "502440"
  },
  {
    "text": "over time have come up with the ways to turn a heat-based memory corruption into something that can give them control of the instruction pointer there are a",
    "start": "502440",
    "end": "508759"
  },
  {
    "text": "variety of techniques here uh if you went and saw Chris bisc and T's talk they talked about some of the things",
    "start": "508759",
    "end": "514959"
  },
  {
    "text": "with respect to heat-based memory Corruptions but attackers have been looking at this for a long time and they developed a bunch of different",
    "start": "514959",
    "end": "520279"
  },
  {
    "text": "techniques to do this and in turn we've responded in Windows uh XP Service Pack 2 uh and Windows Vista and we've",
    "start": "520279",
    "end": "526560"
  },
  {
    "text": "developed uh hardening measures within the Heap itself that try to close off some of these techniques that attackers",
    "start": "526560",
    "end": "531680"
  },
  {
    "text": "have come up with but as you can see uh at least in in Windows 7 and and previous there are still some some",
    "start": "531680",
    "end": "537680"
  },
  {
    "text": "techniques that uh attackers can apply that aren't mitigated today that could allow an attacker to get control of the instruction",
    "start": "537680",
    "end": "543760"
  },
  {
    "text": "pointer and finally whether it's a stack based memory corruption or it's a heat-based Memory corruption once you",
    "start": "543760",
    "end": "549079"
  },
  {
    "text": "have control of the instruction pointer attackers have come up with different methods to take that control of the instruction pointer and turn it into",
    "start": "549079",
    "end": "554880"
  },
  {
    "text": "something that gives them arbitrary code execution on the machine uh there are trivial examples like executing code",
    "start": "554880",
    "end": "560120"
  },
  {
    "text": "directly from the stack or the Heap or more evolved examples like executing code from load loaded images whether it",
    "start": "560120",
    "end": "565200"
  },
  {
    "text": "be return on programming return to lib C and so on and as you might ECT uh We've",
    "start": "565200",
    "end": "570560"
  },
  {
    "text": "integrated support for features and windows that try to counter these techniques so we integrated support for data execution prevention or dep in",
    "start": "570560",
    "end": "577760"
  },
  {
    "text": "Windows XP Service Pack 2 and we integrated support for aslr address Bas layout randomization and Windows Vista",
    "start": "577760",
    "end": "583959"
  },
  {
    "text": "and these counter a lot of the techniques that attackers employ today but with that said attackers have come",
    "start": "583959",
    "end": "589079"
  },
  {
    "text": "up with other techniques that allow them to bypass uh some of these countermeasures so one of them is jit spray uh which we've actually released",
    "start": "589079",
    "end": "595519"
  },
  {
    "text": "mitigations for an Internet Explorer 9 uh and other things like predictable memory mappings or address space",
    "start": "595519",
    "end": "601839"
  },
  {
    "text": "information disclosures as being a way to circumvent aslr so as you can see there are still vectors that attackers can use to turn control of the",
    "start": "601839",
    "end": "608240"
  },
  {
    "text": "instruction pointer uh into arbitrary code execution so with that stage set I",
    "start": "608240",
    "end": "615040"
  },
  {
    "start": "612000",
    "end": "612000"
  },
  {
    "text": "thought it would be helpful to kind of give you a summary of our perspective about the state of memory safety",
    "start": "615040",
    "end": "620959"
  },
  {
    "text": "exploits on Windows and there are couple of key points that we I'd like to drive home here the the first point that we",
    "start": "620959",
    "end": "627200"
  },
  {
    "text": "see is from the data that that we actually collect in the wild uh we see that most of the systems today we",
    "start": "627200",
    "end": "633200"
  },
  {
    "text": "believe are not compromised due to exploits uh if you look at our security intelligence report we released an",
    "start": "633200",
    "end": "639480"
  },
  {
    "text": "article in there that talked about how we believe 6% of infections that were removed by a tool that we have called",
    "start": "639480",
    "end": "645760"
  },
  {
    "text": "the malicious uh software removable toolkit uh we believe that 6% of those infections were likely caused by",
    "start": "645760",
    "end": "651519"
  },
  {
    "text": "exploits and this tells us that in practice uh at least with this data the majority of machines that are infected",
    "start": "651519",
    "end": "657440"
  },
  {
    "text": "are are not infected through exploitation vectors and what's even more interesting here is those the",
    "start": "657440",
    "end": "663279"
  },
  {
    "text": "vulnerabilities that were exploited there we actually exploiting vulnerabilities that had security updates available for more than a year",
    "start": "663279",
    "end": "670320"
  },
  {
    "text": "and so this really drives home the point that one of the best ways for you to stay protected and I think the people in this audience know this but one of the",
    "start": "670320",
    "end": "676480"
  },
  {
    "text": "best ways for you to stay protected against exploitation in the wild is to make sure you stay up toate uh on your",
    "start": "676480",
    "end": "681760"
  },
  {
    "text": "patches uh it's critical um another Point here that we see today is that",
    "start": "681760",
    "end": "687120"
  },
  {
    "text": "most exploits actually Target uh third part applications most of the exploits that we see in the wild don't actually",
    "start": "687120",
    "end": "692360"
  },
  {
    "text": "go after uh Microsoft applications there was a research paper published by Dano",
    "start": "692360",
    "end": "697959"
  },
  {
    "text": "uh it was a something he called the exploit intelligence project where he showed that for popular exploit kits in",
    "start": "697959",
    "end": "704480"
  },
  {
    "text": "2011 11 of the 13 cves that were exploited there actually targeted non-microsoft applications so that's an",
    "start": "704480",
    "end": "711240"
  },
  {
    "text": "interesting data point uh for you know kind of widespread exploitation uh most of the vulnerabilities are actually not",
    "start": "711240",
    "end": "717399"
  },
  {
    "text": "in Microsoft software another thing that we see is that most of the exploits out there today actually",
    "start": "717399",
    "end": "722800"
  },
  {
    "text": "Target older versions of Windows uh again in our security intelligence report we had an article where we showed",
    "start": "722800",
    "end": "728320"
  },
  {
    "text": "that uh if you take we had we had about 184 exploit samples of document formats essentially and if you just go and try",
    "start": "728320",
    "end": "734880"
  },
  {
    "text": "to run those exploits on Windows 7 only 5% of them work uh whereas if you run",
    "start": "734880",
    "end": "740040"
  },
  {
    "text": "them on Windows XP the majority of them do succeed so we believe that a big",
    "start": "740040",
    "end": "745199"
  },
  {
    "text": "contributing factor to this are the mitigations that we've introduced already in Windows 7 such as aslr and",
    "start": "745199",
    "end": "751040"
  },
  {
    "text": "this really drives up the cost of exploitation and hinders people from actually even trying to to exploit those",
    "start": "751040",
    "end": "756760"
  },
  {
    "text": "targets and one other data point that we see is that most of the exploits fail uh when you enable mitigations so again if",
    "start": "756760",
    "end": "763720"
  },
  {
    "text": "you look at uh if again from I believe this from from Dan Guido's research he",
    "start": "763720",
    "end": "768880"
  },
  {
    "text": "saw that uh of the 19 exploits that were in these popular exploit kits that he looked at if you enable de then 14 of",
    "start": "768880",
    "end": "774920"
  },
  {
    "text": "them just failed so just by enabling data execution prevention all those 14 of those 19 exploits failed and we also",
    "start": "774920",
    "end": "782199"
  },
  {
    "text": "see that uh of those 184 exploit samples that I mentioned earlier if you use imit",
    "start": "782199",
    "end": "787600"
  },
  {
    "text": "and enable that on Windows XP then about 90% of them fail so just by enabling mitigations that's enough to perturb",
    "start": "787600",
    "end": "794079"
  },
  {
    "text": "those uh exploits enough that they fail but yet we do have to be diligent and recognize that there are exploits today",
    "start": "794079",
    "end": "800839"
  },
  {
    "text": "that are capable of bypassing the latest mitigations and that are capable of targeting the the latest versions of our",
    "start": "800839",
    "end": "806800"
  },
  {
    "text": "products and other products uh for instance uh some data points here the zero day issues were exploited in very",
    "start": "806800",
    "end": "813279"
  },
  {
    "text": "sophisticated attacks such as stuck net and Dooku and some other attacks over the past few years and if you look at",
    "start": "813279",
    "end": "818760"
  },
  {
    "text": "the pond to own competition from this year you can see that both Chrome and Internet Explorer 9 had exploits written",
    "start": "818760",
    "end": "823839"
  },
  {
    "text": "for them uh that were capable bypassing the mitigations that we have available today so although uh the data suggests",
    "start": "823839",
    "end": "830279"
  },
  {
    "text": "that you know exploits may not be the most common Vector of infection and most of the exploits don't Target or work on the latest versions of the platforms it",
    "start": "830279",
    "end": "837040"
  },
  {
    "text": "is still possible and there are data points suggest that this still happens so the bottom line for us is that we do",
    "start": "837040",
    "end": "843000"
  },
  {
    "text": "need to invest in continuing to increase the cost of exploitation for attackers we haven't driven it down enough to",
    "start": "843000",
    "end": "848560"
  },
  {
    "text": "really move everybody uh out of the game so that's one of the the motivations for us uh for the work that we've done in",
    "start": "848560",
    "end": "854600"
  },
  {
    "text": "Windows 8 okay so now we're actually ready to talk about Windows 8 so for Windows 8 we had three",
    "start": "854600",
    "end": "861759"
  },
  {
    "start": "856000",
    "end": "856000"
  },
  {
    "text": "objectives three high level objectives that we wanted to go after for improving exploit mitigations the first was we",
    "start": "861759",
    "end": "868720"
  },
  {
    "text": "wanted do everything we can to mitigate entire classes of vulnerabilities if if we have a mitigation that's 100%",
    "start": "868720",
    "end": "874440"
  },
  {
    "text": "effective for a particular class of vulnerability then that vulnerability can no longer be used to elevate privileges it's a denial of service uh",
    "start": "874440",
    "end": "881440"
  },
  {
    "text": "at best we also wanted to do things to take those exploitation techniques that attackers have come up with and just",
    "start": "881440",
    "end": "886800"
  },
  {
    "text": "break them and if we can't break them 100% let's at least make them as unreliable as possible so that the",
    "start": "886800",
    "end": "892240"
  },
  {
    "text": "attackers won't be guaranteed that their techniques will succeed all the time and finally we wanted to make sure that we",
    "start": "892240",
    "end": "897560"
  },
  {
    "text": "did everything we could to increase the cost of exploitation in key domains so these are the application domains that",
    "start": "897560",
    "end": "902880"
  },
  {
    "text": "are commonly exposed to attackers uh web browsers is a great example so with these objectives in mind",
    "start": "902880",
    "end": "909360"
  },
  {
    "text": "we had uh five different Focus areas for where we actually uh invested in exploit mitigation improvements uh we're going",
    "start": "909360",
    "end": "915560"
  },
  {
    "text": "to go into detail in all these but at a high level uh code generation Security address space layout randomization the",
    "start": "915560",
    "end": "920600"
  },
  {
    "text": "windows Heap the windows kernel and the system defaults for when certain mitigations are",
    "start": "920600",
    "end": "926360"
  },
  {
    "text": "enabled and with that said I'm going to hand it over to can to talk about some of the things we've done with respect to code Generation all",
    "start": "926360",
    "end": "932839"
  },
  {
    "text": "right thanks Matt as Matt mentioned one of the focus areas we spent time on for improving Security in window Z has been",
    "start": "932839",
    "end": "939240"
  },
  {
    "text": "the compy itself adding mitigations to the code that the compy emits to make it more secure something we call compy",
    "start": "939240",
    "end": "944759"
  },
  {
    "text": "based mitigations and I'll be going through some of these today uh the first of them is GS and now",
    "start": "944759",
    "end": "950360"
  },
  {
    "text": "GS has been around in the compy for several compy releases now and we've added another round of improvements to it starting with Visual Studio 2010 now",
    "start": "950360",
    "end": "957240"
  },
  {
    "text": "you see that Windows 8 en code that buil or is built and ships with Windows how these mior improvements",
    "start": "957240",
    "end": "962600"
  },
  {
    "text": "enabled uh We've improved gs's heuristics which decide which functions warrant GS protection in which uh C or",
    "start": "962600",
    "end": "968399"
  },
  {
    "text": "code constructs especially weren't uh code protection for GS uh one notable example of this is C structures in the",
    "start": "968399",
    "end": "974399"
  },
  {
    "text": "stack are now protected by GS uh this is especially notable as there have been real world exploits in the past that",
    "start": "974399",
    "end": "979600"
  },
  {
    "text": "were essentially only exploitable because GS was not protecting sea structures such as the Ani vulnerability we had several years back if you may",
    "start": "979600",
    "end": "985639"
  },
  {
    "text": "recall now those kind of vulnerabilities are are blocked by GS starting with the GS version that you're using in Windows",
    "start": "985639",
    "end": "991120"
  },
  {
    "text": "8 uh We've also improved the ability of the compiler to optimize a away GS checks when it can prove that a section",
    "start": "991120",
    "end": "996560"
  },
  {
    "text": "of code is safe and that there can never be a buffer overrun there uh and this is important because allows us to reclaim",
    "start": "996560",
    "end": "1002040"
  },
  {
    "text": "performance that otherwi be wasted on an essentially unused DS check and allows us to reinvest that by being more",
    "start": "1002040",
    "end": "1007519"
  },
  {
    "text": "aggressive with GS in places where will have a higher impact as well uh the next Empire based mitigation",
    "start": "1007519",
    "end": "1013360"
  },
  {
    "start": "1012000",
    "end": "1012000"
  },
  {
    "text": "I'll be talking about is something that we like to call range checks uh you can think of range checks as essentially a targeted a a bounds check that the comp",
    "start": "1013360",
    "end": "1019720"
  },
  {
    "text": "adds when it detects certain code sequences that are potentially dangerous uh so if you look at the code that we have on the screen here we essentially",
    "start": "1019720",
    "end": "1025480"
  },
  {
    "text": "have a stack based buffer of a fix size and we have some code that's writing a zero integer through a variable index",
    "start": "1025480",
    "end": "1031280"
  },
  {
    "text": "and if you compile this code with range checks enabled this code in green here is what the capy would logically be",
    "start": "1031280",
    "end": "1036520"
  },
  {
    "text": "inserting into the Pinal binary what this code is basically trying to do is to make sure that this array index we're",
    "start": "1036520",
    "end": "1041558"
  },
  {
    "text": "writing is a zero integer through is actually within the within the confines of the array if not the compy will emit",
    "start": "1041559",
    "end": "1047240"
  },
  {
    "text": "code to safely terminate the program and now this is now one thing to keep in mind is this mitigation is specifically",
    "start": "1047240",
    "end": "1053559"
  },
  {
    "text": "targeted to certain set of scenarios a fixed size array you're writing a zero integer through it through a variable",
    "start": "1053559",
    "end": "1059280"
  },
  {
    "text": "index and the array can be on the stack or can be a global variable or a static array and the reason for this is for",
    "start": "1059280",
    "end": "1064880"
  },
  {
    "text": "forance reasons uh now this is notable as this closes another Gap in stack based vulnerabilities and it's a gap",
    "start": "1064880",
    "end": "1071000"
  },
  {
    "text": "that has been exploited potentially uh in the wild uh the next compy based mitigation",
    "start": "1071000",
    "end": "1077080"
  },
  {
    "start": "1075000",
    "end": "1075000"
  },
  {
    "text": "I'll be talking about is something we call the seal optim ization uh which is actually an optimization in Disguise and this is one of those cool scenarios",
    "start": "1077080",
    "end": "1083120"
  },
  {
    "text": "where we can both improve performance and add extra security at the same time so sealed is an attribute that you can",
    "start": "1083120",
    "end": "1089120"
  },
  {
    "text": "apply to a C++ class and what this basically tells or does is it tells the compiler you can't derive this class",
    "start": "1089120",
    "end": "1094440"
  },
  {
    "text": "with a more derived version of it and this has a couple of consequences but the one of the most important ones is",
    "start": "1094440",
    "end": "1099960"
  },
  {
    "text": "that if you have a virtual method call uh the compy knows because this class is marked as sealed that you can't have a",
    "start": "1099960",
    "end": "1105559"
  },
  {
    "text": "class that deres and provides a more specific implementation of the virtual method that are attached to this class",
    "start": "1105559",
    "end": "1110600"
  },
  {
    "text": "now if you think about the way a virtual method normally works when you have a call site for example this one that has a virtual",
    "start": "1110600",
    "end": "1116440"
  },
  {
    "text": "method call the comp will emit some code that goes and looks into the virt vtable pointer within the object and pulls out",
    "start": "1116440",
    "end": "1122520"
  },
  {
    "text": "the function pointer index corresponding to this virtual method we're going to call and then it calls it through a call and direct",
    "start": "1122520",
    "end": "1128000"
  },
  {
    "text": "instruction now if this class was optimized by the had the sealed",
    "start": "1128000",
    "end": "1133080"
  },
  {
    "text": "attribute applied to it we can uh de virtualize this virtual method call what this basically means is since ay knows",
    "start": "1133080",
    "end": "1139039"
  },
  {
    "text": "there can be no more derived inflation this virtual method it can get rid of this vtable reference entirely and simply turn this into a standard Direct",
    "start": "1139039",
    "end": "1145280"
  },
  {
    "text": "Call the call Target is baked into the binary compile time essentially the upshot of this is if the attacker did",
    "start": "1145280",
    "end": "1151240"
  },
  {
    "text": "have some way to corrupt this V table in the C++ object header they can no longer just directly leverage that with a",
    "start": "1151240",
    "end": "1156600"
  },
  {
    "text": "virtual method call to gain control of code execution because we're no longer even referencing that V table for these de virtualized function calls and to",
    "start": "1156600",
    "end": "1163480"
  },
  {
    "text": "give you an idea for some of the impact this has we've di virtualized around 4500 virtual function calls and M HTML",
    "start": "1163480",
    "end": "1168880"
  },
  {
    "text": "in I10 around 13,000 MSO in the new office uh now while de while de",
    "start": "1168880",
    "end": "1175400"
  },
  {
    "start": "1173000",
    "end": "1173000"
  },
  {
    "text": "virtualizing virtual method calls is a great thing for performance and security when we can do it there are circumstances where we can't necessarily",
    "start": "1175400",
    "end": "1180760"
  },
  {
    "text": "do this I mean there may be code that does uh that relies on being able to provide more derived imputation of virtual methods and marking those",
    "start": "1180760",
    "end": "1187280"
  },
  {
    "text": "classes as sealed would break the program for those cases we've introduced a new mitigation that we call VT guard",
    "start": "1187280",
    "end": "1192679"
  },
  {
    "text": "or virtual table guard it's basically a probalistic mitigation that targets this class of vulnerabilities that would allow V tables to be corrupted",
    "start": "1192679",
    "end": "1200320"
  },
  {
    "text": "now vtg guard is enabled by adding a specific attribute to a C++ class that marks it as vtg guard aware now if you",
    "start": "1200320",
    "end": "1206400"
  },
  {
    "text": "think about the way the compy normally lays out a a virtual function table or V table for a class you essentially have an array of function pointers that's",
    "start": "1206400",
    "end": "1212760"
  },
  {
    "text": "baked into the binary this basically describes a set of virtual method uh call targets that are there that this",
    "start": "1212760",
    "end": "1217840"
  },
  {
    "text": "class implements now if a class is marked as a VT guard aware the compy will insert as an exra entry into this",
    "start": "1217840",
    "end": "1223320"
  },
  {
    "text": "virtual function table something we called the VT card cookie and you can think of this VT card cookie is really just the address of a special symbol",
    "start": "1223320",
    "end": "1229480"
  },
  {
    "text": "within this module and the key thing to keep in mind here is because this module has ASR enabled the attacker doesn't",
    "start": "1229480",
    "end": "1234520"
  },
  {
    "text": "know the specific value that this VT cookie has at runtime and so they can't easily synthesize a fake VP guard value",
    "start": "1234520",
    "end": "1240880"
  },
  {
    "text": "there now when the capy goes to emit a colite for a class that has a virtual method and it's a VT guard where classro",
    "start": "1240880",
    "end": "1248200"
  },
  {
    "text": "add some extra instrumentation here before the call instruction it basically checks to make sure does the VT guard cookie exists in this virtual function",
    "start": "1248200",
    "end": "1254200"
  },
  {
    "text": "table that's about to be called through and does it have the correct value and if not some code will be added to safely terminate the program uh and the",
    "start": "1254200",
    "end": "1260600"
  },
  {
    "text": "important thing here is that if attacker has a vulnerability that lets them replace this V table for some reason they can now justly an arbitrary V table",
    "start": "1260600",
    "end": "1267760"
  },
  {
    "text": "because it's checked to make sure the VT guard cookie is there or fail and you'll see that an I10 and M HTML we started to",
    "start": "1267760",
    "end": "1273400"
  },
  {
    "text": "deploy VT guard and a couple of key classes that being said I'll hand it back over to Matt for a discussion about",
    "start": "1273400",
    "end": "1280320"
  },
  {
    "text": "ASR all right thanks again so I think uh some of the things that Ken just showed you really showed that how integrating",
    "start": "1280600",
    "end": "1287360"
  },
  {
    "text": "mitigations into the compiler is a really powerful way for us to try to mitigate entire classes of vulnerabilities and also make sure that",
    "start": "1287360",
    "end": "1294000"
  },
  {
    "text": "the code that we actually generate in our products and products built on top of visual studio uh are actually H are",
    "start": "1294000",
    "end": "1300640"
  },
  {
    "text": "more secure by default because they have these mitigations built into to the code and the program itself so with that said",
    "start": "1300640",
    "end": "1306919"
  },
  {
    "text": "I me one of the other areas that I mentioned that we made improvements in was address based layout randomization",
    "start": "1306919",
    "end": "1312039"
  },
  {
    "text": "uh so to give you a bit of a retrospective address spased lay rization is something that we actually initially introduced support for in",
    "start": "1312039",
    "end": "1318600"
  },
  {
    "start": "1313000",
    "end": "1313000"
  },
  {
    "text": "Windows Vista and from our perspective this has led to a big shift in attacker mentality if you remember some of the",
    "start": "1318600",
    "end": "1324600"
  },
  {
    "text": "data points that I cited earlier uh where most exploits fail when they run against Windows 7 we believe a big",
    "start": "1324600",
    "end": "1329960"
  },
  {
    "text": "factor of that is aslr uh just just by virtue of randomizing where images and the stack and the heaper located uh that",
    "start": "1329960",
    "end": "1336799"
  },
  {
    "text": "perturbs exploits enough that they fail uh with that said if attackers today are looking to bypass aslr uh they do it in",
    "start": "1336799",
    "end": "1344120"
  },
  {
    "text": "a few different ways uh one way that they do it is they take advantage of images that AR aren't uh they don't",
    "start": "1344120",
    "end": "1349400"
  },
  {
    "text": "indicate that they support aslr uh when we implemented support for aslr we needed to do it in a way that was",
    "start": "1349400",
    "end": "1354520"
  },
  {
    "text": "Backward Compatible with applications so individual Xs and dlls actually have to set a bit in their image that says",
    "start": "1354520",
    "end": "1360559"
  },
  {
    "text": "they're capable of being randomized and if they don't set this uh they can still be loaded at a predictable address and",
    "start": "1360559",
    "end": "1366080"
  },
  {
    "text": "attackers have leveraged this When developing exploits because it gives them a predictable memory region another",
    "start": "1366080",
    "end": "1371720"
  },
  {
    "text": "technique that attackers used is something called address space spraying this is either Heap spraying or jit spraying and it's basically just a way",
    "start": "1371720",
    "end": "1377039"
  },
  {
    "text": "of filling up a large portion of the address base with data or code that the attacker uh controls and as I mentioned",
    "start": "1377039",
    "end": "1384840"
  },
  {
    "text": "they'll try to also leverage predictable memory regions so not necessarily just uh DLS and xes but other regions of",
    "start": "1384840",
    "end": "1391760"
  },
  {
    "text": "memory that happen to be located at the same address in every process and also uh information disclosures if you went",
    "start": "1391760",
    "end": "1397400"
  },
  {
    "text": "to Ferman Cera talk earlier today uh he went into great detail about how information disclosures can be used to",
    "start": "1397400",
    "end": "1402600"
  },
  {
    "text": "bypass aslr and that's something that we are seeing attackers look at more and more so with that said we've taken steps",
    "start": "1402600",
    "end": "1409080"
  },
  {
    "text": "to substantially improve uh aslr and windows8 to try to counter these specific gaps uh in the implementation",
    "start": "1409080",
    "end": "1415640"
  },
  {
    "text": "today one of the first things that we did is something that we call force aslr uh or mandatory aslr and as I mentioned",
    "start": "1415640",
    "end": "1422720"
  },
  {
    "start": "1416000",
    "end": "1416000"
  },
  {
    "text": "many of the exploits today that quote unquote bypass aslr is they do this by leveraging dlls in the address base that",
    "start": "1422720",
    "end": "1429440"
  },
  {
    "text": "haven't been randomized they're still being loaded at a predictable address now as I mentioned this happens because",
    "start": "1429440",
    "end": "1434520"
  },
  {
    "text": "images don't set a bit uh in their PE header that indicates that they support support uh what's called Dynamic base or",
    "start": "1434520",
    "end": "1440600"
  },
  {
    "text": "being randomized so this example here shows a dll that whose dll characteristic fit doesn't have the",
    "start": "1440600",
    "end": "1445720"
  },
  {
    "text": "dynamic base flag set with that said in Windows 8 we've actually added support for allowing",
    "start": "1445720",
    "end": "1452279"
  },
  {
    "text": "processes to set a flag that says any image that's randomized that is non aslr",
    "start": "1452279",
    "end": "1457919"
  },
  {
    "text": "should should or any image that's loaded that's non aslr should be randomized and the way that this works is it behaves",
    "start": "1457919",
    "end": "1463760"
  },
  {
    "text": "differently from the actual aslr implementation when you have that bit set and the way that it works is it behaves similar to there being an",
    "start": "1463760",
    "end": "1469960"
  },
  {
    "text": "address Collision so it's kind of as if the preferred Base address didn't exist for the image and uh this causes the",
    "start": "1469960",
    "end": "1476080"
  },
  {
    "text": "image to get a new Base address other than what its preferred Base address would be and I'll talk about where the",
    "start": "1476080",
    "end": "1481399"
  },
  {
    "text": "entropy comes from this for a second something called bottom up randomization now with that said this isn't something that we've turned on by",
    "start": "1481399",
    "end": "1487679"
  },
  {
    "text": "default processes actually have to say specifically that they want this Behavior to happen and this is of course",
    "start": "1487679",
    "end": "1493360"
  },
  {
    "text": "to retain uh compatibility and also performance uh that's something that's very important so uh processes have to",
    "start": "1493360",
    "end": "1499080"
  },
  {
    "text": "explicitly turn this on one other thing I do want to mention is that we've actually backported support for this feature to Windows 7 uh so if you're up",
    "start": "1499080",
    "end": "1506399"
  },
  {
    "text": "to date on your your uh updates then uh your Windows 7 installation already supports this so uh that's something",
    "start": "1506399",
    "end": "1513039"
  },
  {
    "text": "else to to bear in mind and we'll talk more about how specifically applications can turn on these features toward the",
    "start": "1513039",
    "end": "1518279"
  },
  {
    "text": "end of the talk so don't worry we'll get to that so the aquam of course here is by having Force aslr turned on for a",
    "start": "1518279",
    "end": "1524559"
  },
  {
    "text": "process attackers can no longer depend on uh dlls and X is being loaded at a predictable location because all images",
    "start": "1524559",
    "end": "1531520"
  },
  {
    "text": "will have been randomized okay A second thing that we've done uh is something that we call",
    "start": "1531520",
    "end": "1537640"
  },
  {
    "start": "1533000",
    "end": "1533000"
  },
  {
    "text": "bottom up and top down randomization if you think about the way that memory is allocated in Windows and in fact most",
    "start": "1537640",
    "end": "1543480"
  },
  {
    "text": "other operating systems there are kind of three different ways that memory is allocated it's either allocated searching either it's allocated One Way",
    "start": "1543480",
    "end": "1550120"
  },
  {
    "text": "by specifying a specific Base address where memory should be mapped or it's allocated by saying I don't know where I",
    "start": "1550120",
    "end": "1555919"
  },
  {
    "text": "want to be allocated at so it tells the colonel to start searching from the bottom up for a free region that satisfies uh what's been requested and",
    "start": "1555919",
    "end": "1562960"
  },
  {
    "text": "on Windows you can also have what are called top down allocations where the search will happen starting from the top of the address bace and going down this",
    "start": "1562960",
    "end": "1569000"
  },
  {
    "text": "is typically used for PBS and TBS uh and you can also explicitly specify it whereas bottom up allocations are used",
    "start": "1569000",
    "end": "1574279"
  },
  {
    "text": "for for most allocations in Windows Stacks heaps map files virtual Alec Etc so if you look at Windows 7 we spe",
    "start": "1574279",
    "end": "1582919"
  },
  {
    "text": "specifically integrated support to randomize both heaps and stacks on kind of a one-off basis separate from other",
    "start": "1582919",
    "end": "1589159"
  },
  {
    "text": "memory regions that were allocated and we also uh had support for randomizing peps and TS but with relatively limited",
    "start": "1589159",
    "end": "1595720"
  },
  {
    "text": "entropy but what's notable and what people actually have noticed uh externally is that virtual Alo and map",
    "start": "1595720",
    "end": "1602200"
  },
  {
    "text": "view of file don't have any implicit entropy applied to them there there's no randomization applied to them in Windows",
    "start": "1602200",
    "end": "1607520"
  },
  {
    "text": "7 and below and as as a result of this predictable memory regions can exist that attackers can potentially take",
    "start": "1607520",
    "end": "1612880"
  },
  {
    "text": "advantage of so in Windows 8 what we've done is we've taken steps to make sure that all bottom up and top down",
    "start": "1612880",
    "end": "1619279"
  },
  {
    "text": "allocations are randomized and the way that we've done this and efficiently is we essentially bias where bottom up and",
    "start": "1619279",
    "end": "1626200"
  },
  {
    "text": "top down allocations will start from so rather than just throwing allocations in random places in the address space we'll",
    "start": "1626200",
    "end": "1631840"
  },
  {
    "text": "actually shift where about the colonel will start searching for memory from for both bottom up and top down allocations",
    "start": "1631840",
    "end": "1638679"
  },
  {
    "text": "and as a result of this not only do virtual Alec and map view file and all these other allocation routines receive",
    "start": "1638679",
    "end": "1643919"
  },
  {
    "text": "implicit entropy but pebs and TBS and other things like that as well also receive much more be now with that said",
    "start": "1643919",
    "end": "1650360"
  },
  {
    "text": "both of these mitigations are opt in uh and one way that this is a bit different from most of our opt-in mitigations is",
    "start": "1650360",
    "end": "1656440"
  },
  {
    "text": "that if you already have an executable that has the dynamic base flag set then both of these will already be turned on",
    "start": "1656440",
    "end": "1662840"
  },
  {
    "text": "so this isn't something where we'll see uh people have to specifically set a flag existing applications will already",
    "start": "1662840",
    "end": "1668760"
  },
  {
    "text": "take advantage of this in Windows 8 and the outcome here is that predictable memory regions that may have",
    "start": "1668760",
    "end": "1675159"
  },
  {
    "text": "existed previously because of virtual Al and map VI file have been eliminated through",
    "start": "1675159",
    "end": "1681120"
  },
  {
    "text": "this another step that we've taken is to what we call High entropy aslr for",
    "start": "1681120",
    "end": "1686240"
  },
  {
    "text": "64-bit processes one of the big differences between a 32-bit process and a 64-bit process is the size of their",
    "start": "1686240",
    "end": "1692600"
  },
  {
    "text": "address bace on Windows by default if you just look on x86 a 32-bit process uh",
    "start": "1692600",
    "end": "1697720"
  },
  {
    "text": "you'll get a 2 gig address space whereas for a 64-bit process that's large address aware you'll get an 8 tab",
    "start": "1697720",
    "end": "1704200"
  },
  {
    "text": "address bace so this is orders of magnitude larger than a 32-bit processor and because of this this means that",
    "start": "1704200",
    "end": "1710519"
  },
  {
    "text": "there's uh we have a lot more freedom in terms of where we can position things in the address space without causing uh",
    "start": "1710519",
    "end": "1717360"
  },
  {
    "text": "unnecessary fragmentation so we've done three things here one is we've implemented what we call High attribute",
    "start": "1717360",
    "end": "1723159"
  },
  {
    "text": "bottom-up randomization so again this is biasing where bottom up allocations start from but for 64-bit processes with",
    "start": "1723159",
    "end": "1730200"
  },
  {
    "text": "this flag set we'll actually buy us the bottomup start location within a range of 1 tbyte so that means the initial",
    "start": "1730200",
    "end": "1737320"
  },
  {
    "text": "allocations could start anywhere from the first 4 gigs of memory up to 1 terab into the address space and what's no",
    "start": "1737320",
    "end": "1744039"
  },
  {
    "text": "worthy about this is by doing this we essentially break uh traditional address based spraying techniques so Heap",
    "start": "1744039",
    "end": "1750080"
  },
  {
    "text": "spraying and jit spraying and the reason for this is because machines today don't have sufficient commit to be able to",
    "start": "1750080",
    "end": "1756080"
  },
  {
    "text": "spray the amount of memory that would be needed to guarantee that an allocation would be located at a specific address",
    "start": "1756080",
    "end": "1762279"
  },
  {
    "text": "uh through through bottom up allocations you know it's not feasible for people to spray a terabyte of memory right now",
    "start": "1762279",
    "end": "1769399"
  },
  {
    "text": "uh again processes must explicitly turn this on and the reason for that is compatibility there are some",
    "start": "1769399",
    "end": "1774880"
  },
  {
    "text": "applications that don't necessarily handle uh memory addresses being above 4 gbt and that's they have pointer",
    "start": "1774880",
    "end": "1780880"
  },
  {
    "text": "truncation issues and things like this so this is something that an application has to specifically turn on uh to to",
    "start": "1780880",
    "end": "1786559"
  },
  {
    "text": "take advantage of this like bottom up randomization we've also implemented a high entropy top- down randomization and",
    "start": "1786559",
    "end": "1792279"
  },
  {
    "text": "for this one we'll do 8 gigs of variance in where top down allocations start and this is something that's automatically",
    "start": "1792279",
    "end": "1798080"
  },
  {
    "text": "enabled if the process is taking advantage of top- down randomization and finally we've taken steps to increase",
    "start": "1798080",
    "end": "1803799"
  },
  {
    "text": "the amount of entropy that images receive uh specifically images that are based above 4 gigs and as a result of",
    "start": "1803799",
    "end": "1809840"
  },
  {
    "text": "increasing this entropy we've taken steps to move uh all of the system images above 4 gigs so that they can",
    "start": "1809840",
    "end": "1816240"
  },
  {
    "text": "take advantage of this and when I say above four gigs that means their preferred Base address is above four gigs the outcome here is that because",
    "start": "1816240",
    "end": "1823120"
  },
  {
    "text": "we've increased the amount of entropy that 64bit processes receive the probability of guessing an address is",
    "start": "1823120",
    "end": "1828720"
  },
  {
    "text": "significantly decreased and it also has an impact on information disclosures because it means that now that we've",
    "start": "1828720",
    "end": "1835080"
  },
  {
    "text": "introduced entropy into the higher order bits uh above bit 31 this means that",
    "start": "1835080",
    "end": "1840120"
  },
  {
    "text": "attackers actually need to disclose more than just the low 32 bits of an address to know specifically where something's",
    "start": "1840120",
    "end": "1845200"
  },
  {
    "text": "mapped in the 64-bit process address base so this has an impact on information disclosures as",
    "start": "1845200",
    "end": "1850960"
  },
  {
    "text": "well so let's talk specifically a little bit about uh entropy in terms of the improvements that we've",
    "start": "1850960",
    "end": "1856919"
  },
  {
    "start": "1851000",
    "end": "1851000"
  },
  {
    "text": "made so if you look at Windows 7 uh we've",
    "start": "1856919",
    "end": "1862120"
  },
  {
    "text": "kind of break it down in terms of the different types of memory allocations and one of the things that's most noteworthy is one bottom up allocations",
    "start": "1862120",
    "end": "1868720"
  },
  {
    "text": "top- down allocations and non- aslr dlll images all have zero entropy just",
    "start": "1868720",
    "end": "1873919"
  },
  {
    "text": "implicitly and what's also noteworthy is that if you look between 32-bit and 64-bit processes the entropy is the same",
    "start": "1873919",
    "end": "1880240"
  },
  {
    "text": "despite the fact as I mentioned their address space sizes are substantially different now as you might expect on",
    "start": "1880240",
    "end": "1886240"
  },
  {
    "text": "Windows 88 uh the storage changes quite a bit so if you look at a 32-bit process that's opted in to bottom up uh",
    "start": "1886240",
    "end": "1892880"
  },
  {
    "text": "randomization and has force aslr on we've made sure that all of these memory regions have some baseline level of",
    "start": "1892880",
    "end": "1899559"
  },
  {
    "text": "entropy eight bits is the minimum so that means 1 and 256 chance of guessing correctly and on Windows 8 for 64-bit uh",
    "start": "1899559",
    "end": "1908600"
  },
  {
    "text": "We've significantly increased it for Stacks pebs TBS Xs and dlls uh and",
    "start": "1908600",
    "end": "1914159"
  },
  {
    "text": "specifically if you enable the high entropy bottom-up randomization uh those numbers go up substantially so uh 24",
    "start": "1914159",
    "end": "1920440"
  },
  {
    "text": "bits of entropy uh which is what equates to that one terab of variance so as you can see uh we substantially increased",
    "start": "1920440",
    "end": "1927279"
  },
  {
    "text": "the amount of entropy across across the board for aslr uh in user mode",
    "start": "1927279",
    "end": "1932639"
  },
  {
    "start": "1932000",
    "end": "1932000"
  },
  {
    "text": "processes and finally we've also taken steps to the degree that we can to try to remove generic information disclosure",
    "start": "1932639",
    "end": "1939480"
  },
  {
    "text": "vectors so as Ferman mentioned in his talk it's possible to use an Adder space information disclosure to bypass aslr if",
    "start": "1939480",
    "end": "1946440"
  },
  {
    "text": "you can learn where a dll is loaded or where a heap is loaded uh then you can use that to your advantage When",
    "start": "1946440",
    "end": "1951519"
  },
  {
    "text": "developing an exploit so some of the steps that we've taken here is that in a 64-bit process and even in a 32-bit",
    "start": "1951519",
    "end": "1957799"
  },
  {
    "text": "process uh disclosure via a flaw that enables you to read from anywhere in the address space is now less reliable uh",
    "start": "1957799",
    "end": "1964840"
  },
  {
    "text": "and this is because predictable mappings have been eliminated this is more the case on 64-bit processes because the",
    "start": "1964840",
    "end": "1970120"
  },
  {
    "text": "Baseline amount of entropy that we apply to all memory regions makes it such that it's as I said uh not really feasible",
    "start": "1970120",
    "end": "1976279"
  },
  {
    "text": "for people to Heap spray uh the address base and and be assured that something will be mapped at a specific location so",
    "start": "1976279",
    "end": "1982360"
  },
  {
    "text": "an attacker actually needs another information leak to learn where something is mapped in the address space before they can try to read from it and",
    "start": "1982360",
    "end": "1989840"
  },
  {
    "text": "one thing that we've also done is that uh there's a data structure in Windows called shared user data and this is a",
    "start": "1989840",
    "end": "1995440"
  },
  {
    "text": "data structure that's load mapped at the same address uh in every process and every version of Windows that we've",
    "start": "1995440",
    "end": "2001000"
  },
  {
    "text": "released to date and that includes Windows 8 and this is something of course that attackers have keyed off of as being interesting because you know",
    "start": "2001000",
    "end": "2007399"
  },
  {
    "text": "it's just there in every process uh and uh it's something they might be able to make use of but in Windows 8 we've taken",
    "start": "2007399",
    "end": "2013399"
  },
  {
    "text": "steps to make sure that although this region is still located at the same address uh it's no longer particularly",
    "start": "2013399",
    "end": "2018639"
  },
  {
    "text": "useful to attackers and the way that we've done this is that we've removed uh pointers there were fields in this data",
    "start": "2018639",
    "end": "2025039"
  },
  {
    "text": "structure that pointed to images in the address Bas we've removed those in Windows 8 uh and this breaks techniques",
    "start": "2025039",
    "end": "2030120"
  },
  {
    "text": "that attackers have used uh in practice and it's something that that Ferman mentioned in his talk as well and",
    "start": "2030120",
    "end": "2036200"
  },
  {
    "text": "another thing that we've done is we've also uh shuffled the the this is this is kind of orthogonal but something else",
    "start": "2036200",
    "end": "2041760"
  },
  {
    "text": "that we've done is we've also shuffled the order of the system calls uh and statically shuffled them in the system call table and uh we give an example",
    "start": "2041760",
    "end": "2049040"
  },
  {
    "text": "here if if anybody can tell me why this is interesting after the talk uh then you get a bonus Prize or something uh",
    "start": "2049040",
    "end": "2055000"
  },
  {
    "text": "but yeah so these are some of the things that we've done to uh close off uh some of the generic information disclosure",
    "start": "2055000",
    "end": "2061560"
  },
  {
    "text": "vectors all right so that's some those are some of the improvements that we've made to address based layout randomization but as I mentioned in the",
    "start": "2061560",
    "end": "2068398"
  },
  {
    "text": "initial talk one of those big broad categories that a lot of vulnerabilities fall into are these heat-based vulnerabilities and so in Windows 8",
    "start": "2068399",
    "end": "2075320"
  },
  {
    "text": "we've taken steps to try to uh better protect the Heap uh against memory corruption if you went to Chris valc or",
    "start": "2075320",
    "end": "2081079"
  },
  {
    "text": "T's talk then uh they went into much more detail than I'm going to go into here but uh this kind of gives you an",
    "start": "2081079",
    "end": "2087398"
  },
  {
    "text": "overview of some of the changes that we've made here so a bit of a retrospective first of all to set the",
    "start": "2087399",
    "end": "2092440"
  },
  {
    "start": "2089000",
    "end": "2089000"
  },
  {
    "text": "context we believe that the Heap hardening that we did in Windows Vista has been very effective in practice in",
    "start": "2092440",
    "end": "2098280"
  },
  {
    "text": "terms of protecting metadata on the Heap and preventing attackers from really leveraging it for heat-based memory corruption to to my knowledge there's",
    "start": "2098280",
    "end": "2105359"
  },
  {
    "text": "only been one documented exploit that corrupts heat metadata and this was Chris's exploit for the is fdp bug um so",
    "start": "2105359",
    "end": "2112480"
  },
  {
    "text": "that tells you something that you know really attackers Focus pretty much uh entirely on targeting application data",
    "start": "2112480",
    "end": "2118160"
  },
  {
    "text": "on the Heap rather than metadata but with that said uh although there's only been this one documented exploit",
    "start": "2118160",
    "end": "2124160"
  },
  {
    "text": "attackers have proposed a number of other attacks that could in principle be used to attack metadata on the Heap um",
    "start": "2124160",
    "end": "2130280"
  },
  {
    "text": "but yeah like I said most of the real world exploits that we see Target app data on the Heap uh they aren't really targeting Heap metadata and the real",
    "start": "2130280",
    "end": "2136720"
  },
  {
    "text": "reason for this is because today the the Heap doesn't really have safeguards to protect against application data that's",
    "start": "2136720",
    "end": "2142160"
  },
  {
    "text": "stored in the Heap and when I say application data I'm talking about C++ objects and other application",
    "start": "2142160",
    "end": "2148000"
  },
  {
    "start": "2148000",
    "end": "2148000"
  },
  {
    "text": "state so from a very high level don't worry I'm not going to go too deep in terms of algorithms and data structures",
    "start": "2148000",
    "end": "2153319"
  },
  {
    "text": "for the Heap but I did want to give you kind of a high level overview of the Windows 8 Heap AR Ure and if you're",
    "start": "2153319",
    "end": "2158520"
  },
  {
    "text": "already familiar with the Heap architecture from Windows 7 it's at a high level It's relatively unchanged uh",
    "start": "2158520",
    "end": "2163880"
  },
  {
    "text": "when you use Heap Alec to request some memory it could come from one of three places U most allocations will come from",
    "start": "2163880",
    "end": "2170000"
  },
  {
    "text": "what we call the front end allocator or low fragmentation Heap this is used for allocation sizes uh below or equal to",
    "start": "2170000",
    "end": "2176359"
  },
  {
    "text": "16k uh if you request an allocation that's larger than that but less than 512k or one Meg on 64-bit that will come",
    "start": "2176359",
    "end": "2183359"
  },
  {
    "text": "from what we call the backend allocator the backend allocator is also used by the front end allocator to request memory and if you request really large",
    "start": "2183359",
    "end": "2189880"
  },
  {
    "text": "allocations those will come from what we call the virtual memory allocator which essentially calls directly into the kernel uh to request memory to allocate",
    "start": "2189880",
    "end": "2197480"
  },
  {
    "text": "so this is a very high level picture of the architecture for the Heap uh and it's relatively unchanged in in Windows",
    "start": "2197480",
    "end": "2204200"
  },
  {
    "start": "2204000",
    "end": "2204000"
  },
  {
    "text": "8 so I mentioned the front-end allocator and I mentioned how the front end allocator or low fragmentation Heap is",
    "start": "2204200",
    "end": "2210000"
  },
  {
    "text": "used for the majority of allocations that actually come from the Heap and windows uh so this is an area that we've",
    "start": "2210000",
    "end": "2215319"
  },
  {
    "text": "really focused on uh introducing new uh Integrity checks to better protect metadata uh on the Heap so I'm going to",
    "start": "2215319",
    "end": "2222960"
  },
  {
    "text": "walk through a couple of the things that we've done here uh Chris mentioned most of these in in his talk but uh this is a",
    "start": "2222960",
    "end": "2228520"
  },
  {
    "text": "this is kind of the The Rundown uh first of all one of the things that we've done is that uh the low fragmentation Heap is",
    "start": "2228520",
    "end": "2234560"
  },
  {
    "text": "now a bitmap based allocator and Windows 7 it actually used essentially a free list implementation uh for uh",
    "start": "2234560",
    "end": "2241160"
  },
  {
    "text": "maintaining a linked list of free chunks that's no no longer the case in Windows 8 we now use a bit map to maintain uh",
    "start": "2241160",
    "end": "2247119"
  },
  {
    "text": "the free busy state for chunks within a a Subs segment and as a result the that",
    "start": "2247119",
    "end": "2252400"
  },
  {
    "text": "one exploit that I mentioned the is FP exploit the technique that was used in that exploit will no longer work uh",
    "start": "2252400",
    "end": "2258079"
  },
  {
    "text": "because it relied on corrupting metadata that's no longer used in Windows 8 it's actually no longer there another step",
    "start": "2258079",
    "end": "2263640"
  },
  {
    "text": "that we've taken is that in previous versions of Windows we actually encapsulated a few different areas of the Heap in what what are called",
    "start": "2263640",
    "end": "2269800"
  },
  {
    "text": "catchall exception handling blocks and these are blocks that where if an exception is thrown such as by accessing an invalid address it'll simply be",
    "start": "2269800",
    "end": "2276720"
  },
  {
    "text": "caught and the program will continue running it won't crash uh and this could potentially be used to an attacker's advantage so what we've done is we've",
    "start": "2276720",
    "end": "2284040"
  },
  {
    "text": "removed these catchall exception handling blocks uh in Windows 8 and as a result exceptions are no longer going to",
    "start": "2284040",
    "end": "2289839"
  },
  {
    "text": "be swallowed in those cases another step that we've taken is we've uh made it so that attackers can",
    "start": "2289839",
    "end": "2296040"
  },
  {
    "text": "no longer free the Heap handle this is kind of the main data structure of the Heap and this present prevents certain",
    "start": "2296040",
    "end": "2301160"
  },
  {
    "text": "attacks that were described in the research we've also encoded the commit routine of the Heap data structure with",
    "start": "2301160",
    "end": "2306319"
  },
  {
    "text": "a global key versus a key that stored in a field of the data structure this also prevents some attacks that were described to get reliable control of the",
    "start": "2306319",
    "end": "2312640"
  },
  {
    "text": "instruction pointer we now do extended validation of the block headers uh and this is to prevent an attack that could",
    "start": "2312640",
    "end": "2318640"
  },
  {
    "text": "allow you to potentially free a a a a heat block prematurely and we also added",
    "start": "2318640",
    "end": "2324319"
  },
  {
    "text": "checks to both the backend and the front end allocator that make it such that you can no longer allocate a block that uh",
    "start": "2324319",
    "end": "2330119"
  },
  {
    "text": "indicates that it's already busy that it's already in use and this prevents a variety of attacks that attempt to",
    "start": "2330119",
    "end": "2335359"
  },
  {
    "text": "reallocate a block that's still in use by the application and finally we've also taken steps to enable uh Heap",
    "start": "2335359",
    "end": "2341599"
  },
  {
    "text": "encoding in colonal mode previously this wasn't enabled in Colonel mode uh and now now it is enabled and of course the",
    "start": "2341599",
    "end": "2347800"
  },
  {
    "text": "outcome of this is that uh metadata attacks against the Heap are increasingly difficult uh because we've",
    "start": "2347800",
    "end": "2353480"
  },
  {
    "text": "closed off both some of the applied and theoretical techniques for attacking metadata uh on the",
    "start": "2353480",
    "end": "2358640"
  },
  {
    "text": "Heap another major change that we've made is we've introduced support for what we call guard pages and guard pages",
    "start": "2358640",
    "end": "2364760"
  },
  {
    "start": "2359000",
    "end": "2359000"
  },
  {
    "text": "in this context are designed to partition the Heap such that if there is a sequential uh overrun vulnerability uh",
    "start": "2364760",
    "end": "2371920"
  },
  {
    "text": "that vulnerability the amount of data that corrupt is isolated to C certain parts of the heat uh particularly if the",
    "start": "2371920",
    "end": "2379119"
  },
  {
    "text": "sequential overflow happens to touch one of these guard Pages that's going to lead to an exception being raised and the process crashing um so the places",
    "start": "2379119",
    "end": "2387200"
  },
  {
    "text": "that we will insert these guard pages is limited to a few places we can't just enable them after every allocation because that would not be feasible from",
    "start": "2387200",
    "end": "2393480"
  },
  {
    "text": "a performance perspective so what we do instead is we kind of take a broader approach where when you uh do large",
    "start": "2393480",
    "end": "2398839"
  },
  {
    "text": "allocations from the Heap we'll make sure that those have a guard page when new Heap segments are allocated these are kind of big chunks of memory that",
    "start": "2398839",
    "end": "2405240"
  },
  {
    "text": "the Heap uses to slice and dice we'll make sure that Heap segments have guard pages around them and we'll also make",
    "start": "2405240",
    "end": "2411119"
  },
  {
    "text": "sure that what we call maximally sized subsegments from the low fragmentation Heap these are Subs segments that have",
    "start": "2411119",
    "end": "2416560"
  },
  {
    "text": "the maximum number of blocks in them or they have a certain size uh we will make sure that those are also have a a trailing guard page and this is",
    "start": "2416560",
    "end": "2423079"
  },
  {
    "text": "something that is always the case on 64-bit but it's actually probabilistic on 32 bit bit as to whether or not the",
    "start": "2423079",
    "end": "2428400"
  },
  {
    "text": "guard page gets inserted again for performance reasons another major change that we've made is something we call allocation",
    "start": "2428400",
    "end": "2434760"
  },
  {
    "start": "2431000",
    "end": "2431000"
  },
  {
    "text": "order randomization and what this does is it basically makes it such that allocations",
    "start": "2434760",
    "end": "2440079"
  },
  {
    "text": "made from the low fragmentation Heap uh the order in which they will be returned with respect to one another is no longer",
    "start": "2440079",
    "end": "2446119"
  },
  {
    "text": "deterministic and the reason we do this is because exploits often rely on surgical manipulation of the layout of",
    "start": "2446119",
    "end": "2452760"
  },
  {
    "text": "the Heap they want to place a block that they can overflow directly adjacent into",
    "start": "2452760",
    "end": "2457880"
  },
  {
    "text": "some memory that they want to corrupt say it has a vtable pointer so by randomizing the order in which these blocks are allocated uh we make that",
    "start": "2457880",
    "end": "2464760"
  },
  {
    "text": "less reliable so that attackers can't rely can't depend on that so if you look at window 7 uh from lfh the allocation",
    "start": "2464760",
    "end": "2471200"
  },
  {
    "text": "order is sequential uh the attacker can get the Heap into such a state where he can make sure that his overflow block",
    "start": "2471200",
    "end": "2476960"
  },
  {
    "text": "comes right before the the block that he wants to uh overflow the target Block in Windows 8 of course the allocation",
    "start": "2476960",
    "end": "2483560"
  },
  {
    "text": "behavior is no longer deterministic so the attacker isn't guaranteed that his overflow block is going to precede the",
    "start": "2483560",
    "end": "2489760"
  },
  {
    "text": "target block that he wants to corrupt and as a result uh an attacker looking to maximize the reliability of their",
    "start": "2489760",
    "end": "2496880"
  },
  {
    "text": "heat-based memory corruption is going to face some some some challenges here I mean it's going to be application",
    "start": "2496880",
    "end": "2502280"
  },
  {
    "text": "specific and vulnerability specific it may require them to corrupt more data to try to overcome the effects of this heat",
    "start": "2502280",
    "end": "2507839"
  },
  {
    "text": "randomization thus increasing instability by uh uh collateral damage to the Heap and it may also require them",
    "start": "2507839",
    "end": "2514880"
  },
  {
    "text": "to allocate more data and by allocating more data that may trip the policy for when we decide when to enable guard",
    "start": "2514880",
    "end": "2520960"
  },
  {
    "text": "Pages for for a particular sub segment so those are some of the changes we made to the Heap I'm going to hand it",
    "start": "2520960",
    "end": "2527040"
  },
  {
    "text": "over to Ken to talk about the windows kernel all right thanks Matt we've made",
    "start": "2527040",
    "end": "2533800"
  },
  {
    "text": "a number of improvements to make us mode exploitation more difficult and more costly in window eight uh We've also spent a lot of time making the kernel",
    "start": "2533800",
    "end": "2539640"
  },
  {
    "text": "more resum as well to both vulnerabilities and Microsoft code as well as vulnerabilities and third party code as well I'll be going through some",
    "start": "2539640",
    "end": "2545839"
  },
  {
    "text": "of these today uh let's start with the retrospective on exploitation in the windows kernel at large uh historically",
    "start": "2545839",
    "end": "2551640"
  },
  {
    "start": "2547000",
    "end": "2547000"
  },
  {
    "text": "kernel vulnerabilities have been less targeted by attackers in the wild and there have been a couple reasons for this but generally attackers want to",
    "start": "2551640",
    "end": "2556760"
  },
  {
    "text": "Target juicy targets like internet browsers or multimedia applications or document file viewers and so on and so",
    "start": "2556760",
    "end": "2562760"
  },
  {
    "text": "forth that Ted to be on their mode attack service and most of these tend to be user mode applications and as a logical consequence of this exploitation",
    "start": "2562760",
    "end": "2569359"
  },
  {
    "text": "techniques for user mode code tend to be a lot more researched and refined than C mode exploitation techniques now with that being said we",
    "start": "2569359",
    "end": "2576200"
  },
  {
    "text": "are starting to City ship the attacker mentality uh who're seeing more interest in looking for CRI vulnerabilities and exploiting them now we think there are a",
    "start": "2576200",
    "end": "2582520"
  },
  {
    "text": "couple reasons for this but one of the big ones is that there's an increasing interest in escaping sandboxes so those same internet browsers and document",
    "start": "2582520",
    "end": "2589680"
  },
  {
    "text": "viewers and multimedia applications are starting to deploy sandboxing technologies that try to contain the impact of vulnerabilities that may exist",
    "start": "2589680",
    "end": "2595440"
  },
  {
    "text": "in code in their processes and one of the ways that attackers will try and Escape these sandboxes is by looking for vulnerabilities in the kernel that could",
    "start": "2595440",
    "end": "2601720"
  },
  {
    "text": "be allowed to use to uh circumvent the sandbox as well uh we're also see",
    "start": "2601720",
    "end": "2607480"
  },
  {
    "text": "increasing refinement for Local Coral approvals escalation vulnerabilities and we're also seeing increasing research as",
    "start": "2607480",
    "end": "2612559"
  },
  {
    "text": "to you how that Coral approval protects its internal mated data as well and in a handful of cases we have seen some",
    "start": "2612559",
    "end": "2618480"
  },
  {
    "text": "sophisticated remote kernel exploits all right so let's dig into some of the details for some of the kernel improvements we made uh one of the",
    "start": "2618480",
    "end": "2624680"
  },
  {
    "text": "improvements is a better or increased ement of depth data execution prevention in the windows8 kernel so this chart",
    "start": "2624680",
    "end": "2630640"
  },
  {
    "text": "basically uh describes which kernel memory regions have anex and force for various versions of Windows and as you",
    "start": "2630640",
    "end": "2636240"
  },
  {
    "text": "can see for Windows we've taken a holistic bottom up approach to make sure that as many kernel regions as possible have Annex in first for them especially",
    "start": "2636240",
    "end": "2642880"
  },
  {
    "text": "on 64bit and arm as well there are a couple of data points you may find especially interesting here first of",
    "start": "2642880",
    "end": "2648599"
  },
  {
    "text": "them is we introduce a new po type called non-page po on X and as you might imagine from the name of this PO type po",
    "start": "2648599",
    "end": "2654480"
  },
  {
    "text": "Pages drawn from this allocation type are non-executable uh this is a default for arm and as well all inbox components",
    "start": "2654480",
    "end": "2660280"
  },
  {
    "text": "for Windows 8 have gener converted over to use this pool type as well uh the second notable data point here is several of these uh cural mem regions",
    "start": "2660280",
    "end": "2666839"
  },
  {
    "text": "that been converted over to be non-executable in Windows 8 were previously relied on for real world exploits for example the real world",
    "start": "2666839",
    "end": "2674160"
  },
  {
    "text": "exploit for the ASB server vulnerability several years ago relied on some of these memory regions like the kernel for",
    "start": "2674160",
    "end": "2679280"
  },
  {
    "text": "like the how memory region being executable those assumptions are no longer valid for windows8 that XY code is written would crash if it was run in",
    "start": "2679280",
    "end": "2686119"
  },
  {
    "text": "Window 8 I we've also made substantial improvements to Colonel ASR Window 8 as",
    "start": "2686119",
    "end": "2691200"
  },
  {
    "start": "2688000",
    "end": "2688000"
  },
  {
    "text": "well uh ASR and the colonel was something we introduced with Vista sp1 and Server 2008 uh the initial",
    "start": "2691200",
    "end": "2697000"
  },
  {
    "text": "impementation included limited entry for drivers and for the kernel and how image as well we uh had some incable",
    "start": "2697000",
    "end": "2702760"
  },
  {
    "text": "improvements to driver randomization in Windows 7 we've teed these forward with a number round of improvement in Windows",
    "start": "2702760",
    "end": "2707960"
  },
  {
    "text": "8 for example the kernel segment base which is basically the start of a memory memory region where the boot loader and",
    "start": "2707960",
    "end": "2714200"
  },
  {
    "text": "the operating system allocates several ear start data structures for example the first processor Idol stack and several other data structures that are",
    "start": "2714200",
    "end": "2720200"
  },
  {
    "text": "passed on from the boot loader to the kernel itself now has a holistic level of randomization applied to it so all",
    "start": "2720200",
    "end": "2725760"
  },
  {
    "text": "these data structures have a Sr applied across the board in addition we significantly boosted the entropy that",
    "start": "2725760",
    "end": "2730880"
  },
  {
    "text": "the colel image and the how image receive especially on 64 we can take advantage of that much expanded kernel address space to provide a much more",
    "start": "2730880",
    "end": "2737720"
  },
  {
    "text": "comprehensive set of randomization there I've also added support for incoming Hardware features called asmap",
    "start": "2737720",
    "end": "2743680"
  },
  {
    "start": "2740000",
    "end": "2740000"
  },
  {
    "text": "or pxn the hardware guys kind of had at us a bit of an alphabet through here asmap stand for uh supervisory mode",
    "start": "2743680",
    "end": "2749720"
  },
  {
    "text": "execution prevention and pxn stands for privilege execute never what these Hardware features basically allow the",
    "start": "2749720",
    "end": "2755359"
  },
  {
    "text": "the operating system to do is to enforce a new invariant that if you have code running in kernel mode it can no longer directly transfer control to a page",
    "start": "2755359",
    "end": "2761880"
  },
  {
    "text": "that's owned by user mode now this is important as a lot of local privileg escalation exploits that are exploting C",
    "start": "2761880",
    "end": "2767359"
  },
  {
    "text": "abilities today take tend to take advantage of this privative and if the hardw Spas we turn this feature on now",
    "start": "2767359",
    "end": "2773920"
  },
  {
    "text": "we're expecting that smap and pxn and Def will make cernal exploitation more difficult and in some cases smap or pxn",
    "start": "2773920",
    "end": "2779680"
  },
  {
    "text": "would be a strong mitigation for issues so for example one of the vulnerabilities in stet would have been completely mitigated by smap and pxn it",
    "start": "2779680",
    "end": "2785880"
  },
  {
    "text": "would have been impossible to exploit that vulnerability for anything other than a denial of service or a system crash you could never have gained code",
    "start": "2785880",
    "end": "2791280"
  },
  {
    "text": "from it uh that being said there we expect there may still be some circumstances where attackers may be",
    "start": "2791280",
    "end": "2796559"
  },
  {
    "text": "able to leverage already existing code that's legitimately executable in existing kernel images we've also added comprehensive",
    "start": "2796559",
    "end": "2803040"
  },
  {
    "start": "2801000",
    "end": "2801000"
  },
  {
    "text": "protection for NY references to the kernel Windows 8 as far as kernel vulnerabilities go NY references tend to",
    "start": "2803040",
    "end": "2808520"
  },
  {
    "text": "be one of the more common issues out there uh we've seen a lot of these in the wild and furthermore exploitation techniques for these class of",
    "start": "2808520",
    "end": "2814599"
  },
  {
    "text": "vulnerabilities tend to be relatively straightforward we think think about this when you a cur the references know this is actually reading memory that's",
    "start": "2814599",
    "end": "2820720"
  },
  {
    "text": "in part of the user mode address space and not the curle mode address space so what attackers are typically tend to do is they would allocate the first 64k",
    "start": "2820720",
    "end": "2827280"
  },
  {
    "text": "memory or memory within that region and then instead of De referencing null when they trigger their vulnerability the the",
    "start": "2827280",
    "end": "2832880"
  },
  {
    "text": "K will start interpreting data structures that are allocated by the user or the malicious application this could potentially all the application to",
    "start": "2832880",
    "end": "2839280"
  },
  {
    "text": "elevate privileges and we strongly mitigate this entire class of vulnerabilities both in third party code and in Windows code something with",
    "start": "2839280",
    "end": "2845800"
  },
  {
    "text": "Windows 8 we've done this by essentially blocking off this first 64k of memory in every process so you can now allocate",
    "start": "2845800",
    "end": "2851400"
  },
  {
    "text": "memory here and the basally the option of this is if you do have a kernel NY reference the kernel is always going to",
    "start": "2851400",
    "end": "2856960"
  },
  {
    "text": "crash it's never going to start running attacker supplied code uh the side effect of this we've turned off antium",
    "start": "2856960",
    "end": "2862920"
  },
  {
    "text": "by default on 32bit skes x86 skes and only on x86 32bit enabling into VM which",
    "start": "2862920",
    "end": "2869480"
  },
  {
    "text": "must be done by an admin only will turn off NY reference protection uh that can't be done on 64bit or R because",
    "start": "2869480",
    "end": "2875319"
  },
  {
    "text": "those uh systems have no NTV M at all uh We've also added some Integrity",
    "start": "2875319",
    "end": "2880400"
  },
  {
    "start": "2878000",
    "end": "2878000"
  },
  {
    "text": "checks to the kernel pool I'm not going to go into that same level of detail that tarj did and tarj and Chris's C if",
    "start": "2880400",
    "end": "2885520"
  },
  {
    "text": "you had seen that just a little bit ago but that being said let's jump into the details about the pool here so the",
    "start": "2885520",
    "end": "2891960"
  },
  {
    "text": "kernel pool is essentially a general purpose memory allocator that most Cur in the kernel whether that's third party drivers or the kernel itself or other",
    "start": "2891960",
    "end": "2898119"
  },
  {
    "text": "mode kernel moments can use uh so it's conceptu fairly similar to the anti Heap that user mode uses that being said the",
    "start": "2898119",
    "end": "2904640"
  },
  {
    "text": "internal implementation details are very different for the for the kernel pool has some different goals from performance perspective as",
    "start": "2904640",
    "end": "2910480"
  },
  {
    "text": "the user Ro heat and different scenarios that it targets so the inflation is substantially different uh and while we spent a number",
    "start": "2910480",
    "end": "2917280"
  },
  {
    "text": "of time uh in previous RS Lees we've added a lot of hardening into the standard anti especially in xps2 and",
    "start": "2917280",
    "end": "2923240"
  },
  {
    "text": "Vista now in Windows 8 we've also taken that forward to add additional extra hardening to the kernel pool as well in Windows 8 we've added encoding that",
    "start": "2923240",
    "end": "2930160"
  },
  {
    "text": "covers a number of internal data structures in the pool for example the process build pointer for quota allocations look aside list delay fre",
    "start": "2930160",
    "end": "2937040"
  },
  {
    "text": "the pool Pages for page pool we've added pool andex bound checks and we further expanded safe linking and safe unlinking",
    "start": "2937040",
    "end": "2943040"
  },
  {
    "text": "checks as well you also made a slew of other improvements you see showing up both in the curle and in US Bo in windows8 uh",
    "start": "2943040",
    "end": "2950160"
  },
  {
    "start": "2945000",
    "end": "2945000"
  },
  {
    "text": "one of them is something we call safe unlinking or safe linking and and this mitigation basically when you have a w",
    "start": "2950160",
    "end": "2955319"
  },
  {
    "text": "list operation that's adding and removing enry from the list will start verifying the Integrity of the neighboring list links when that",
    "start": "2955319",
    "end": "2960880"
  },
  {
    "text": "operation performs uh now Windows essentially has a cent a centralized set of libraries that entally provide this",
    "start": "2960880",
    "end": "2967599"
  },
  {
    "text": "primitive of list entry manipulation and this Bas this set of librar have been instrumented to have the safe and",
    "start": "2967599",
    "end": "2972799"
  },
  {
    "text": "linking capability uh deployed so you'll see this both in US mode code and in C mode code and also in third party code",
    "start": "2972799",
    "end": "2978359"
  },
  {
    "text": "that starts to be built with a new Windows 8 wdk uh safe and ling leverages a new mechanism we call fast fail for safely",
    "start": "2978359",
    "end": "2985160"
  },
  {
    "text": "terminating the process if it's a US mode application or bug checking the system if it's in kernel mode to bring the system down if it's a hypervisor all",
    "start": "2985160",
    "end": "2991520"
  },
  {
    "text": "other other operating environments as well we also spent some time improving the entry resources that gsna to our use",
    "start": "2991520",
    "end": "2997520"
  },
  {
    "text": "uh both of these are mitigations strongly depend on secure and well generated random numbers for their uh",
    "start": "2997520",
    "end": "3003680"
  },
  {
    "text": "Effectiveness if we have strong Hardware sources available such as the TPM or Rd r or other sources when they'll take",
    "start": "3003680",
    "end": "3009480"
  },
  {
    "text": "advantage of this so if you think about how GS is initial or GS cookies are set up in previous or previous versions of",
    "start": "3009480",
    "end": "3015040"
  },
  {
    "text": "the system essentially every code or every module that was built had a small section of code that was linked into it",
    "start": "3015040",
    "end": "3020119"
  },
  {
    "text": "that would run on the module starts up and essentially the job of this code was to scr up whatever entropy it had it",
    "start": "3020119",
    "end": "3025559"
  },
  {
    "text": "could get a hold of and use that to build the GS cookie for that module now there's some problems with this because",
    "start": "3025559",
    "end": "3030760"
  },
  {
    "text": "that code had to run in a whole bunch of different environments across the system and so it had a lot could couldn't make a lot of assumptions about what apis are",
    "start": "3030760",
    "end": "3037079"
  },
  {
    "text": "available or the operative environment is running under so that make it made it kind of difficult for it to get good randomization if elevated this in",
    "start": "3037079",
    "end": "3044040"
  },
  {
    "text": "Windows 8 by moving this responsibility for initializing GS cookie to the image loader and user Moder to the system",
    "start": "3044040",
    "end": "3049319"
  },
  {
    "text": "loader for colel mode image as well and that that causes these GS cookies to now take advantage of those strong enty",
    "start": "3049319",
    "end": "3054799"
  },
  {
    "text": "sources such as the TPM already Rand we've also hardened the colonel object manager against reference count overflow",
    "start": "3054799",
    "end": "3060920"
  },
  {
    "text": "attacks so if you had a vulnerability that an object manager out to have reference count simply incremented over and over and it overflows that'll now",
    "start": "3060920",
    "end": "3067200"
  },
  {
    "text": "result in a bug check we've also resolved information disclosure for the colel address space for certain system calls are not scrubbing the return",
    "start": "3067200",
    "end": "3073319"
  },
  {
    "text": "return of dis completely hand it back over to M for an exciting discussion about default",
    "start": "3073319",
    "end": "3079599"
  },
  {
    "text": "settings thanks again all right so we've integrated all these great features but",
    "start": "3079599",
    "end": "3084680"
  },
  {
    "text": "the big question is uh what good are they if they aren't enabled or we can't enable them so it's important for us to",
    "start": "3084680",
    "end": "3090359"
  },
  {
    "text": "spend a little bit of time talking about the default settings for these mitigations and how not only uh products",
    "start": "3090359",
    "end": "3095920"
  },
  {
    "text": "that we develop can take advantage of them but also products that other people develop for Windows can actually take advantage of them too so the first thing",
    "start": "3095920",
    "end": "3102559"
  },
  {
    "start": "3101000",
    "end": "3101000"
  },
  {
    "text": "that we wanted to touch on is arm and the important thing to keep in mind here with arm is that we have an opportunity",
    "start": "3102559",
    "end": "3109280"
  },
  {
    "text": "since we don't have to deal with uh Legacy compatibility issues to actually be really aggressive in terms of the mitigations that we enable for arm and",
    "start": "3109280",
    "end": "3116200"
  },
  {
    "text": "we've try to take advantage of that to the maximum degree possible as you can see here uh dep aslr U Heap termination",
    "start": "3116200",
    "end": "3124559"
  },
  {
    "text": "NY reference protection pxn all of these things are on on arm and they can't be",
    "start": "3124559",
    "end": "3129880"
  },
  {
    "text": "disabled so in particular if you tried to load a PE image on arm that didn't",
    "start": "3129880",
    "end": "3135559"
  },
  {
    "text": "opt in to depth for aslr it didn't have those flags set in the PE image the colonel will actually fail to load the image uh so this is uh something",
    "start": "3135559",
    "end": "3142599"
  },
  {
    "text": "noteworthy that where by virtue of the fact that we're now supporting arm we had an opportunity to take advantage of that and be really aggressive in terms",
    "start": "3142599",
    "end": "3149119"
  },
  {
    "text": "of how we turned on mitigations for for that platform in terms of application default",
    "start": "3149119",
    "end": "3154799"
  },
  {
    "start": "3153000",
    "end": "3153000"
  },
  {
    "text": "settings a couple of noteworthy things here is that for the new Windows metro style applications again we we kind of",
    "start": "3154799",
    "end": "3160680"
  },
  {
    "text": "had an opportunity here where we have a new uh development platform that applications are being developed against",
    "start": "3160680",
    "end": "3166160"
  },
  {
    "text": "and because of that uh we didn't have necessarily the same type of application compatibility concerns that we have with existing desktop applications and",
    "start": "3166160",
    "end": "3173240"
  },
  {
    "text": "because of that we've taken steps to turn on mitigations for all metro style applications that are developed for",
    "start": "3173240",
    "end": "3178880"
  },
  {
    "text": "Windows 8 so this includes dep aslr Force relocate images bottom up top down randomization uh seop which we didn't",
    "start": "3178880",
    "end": "3185799"
  },
  {
    "text": "talk about in this talk but uh it's been supported since uh Windows 7 uh and windows just sp1 um in addition the",
    "start": "3185799",
    "end": "3194319"
  },
  {
    "text": "majority of the inbox applications these are the applications like Cal and notepad and other things that are included in Windows 8 by default uh in",
    "start": "3194319",
    "end": "3200920"
  },
  {
    "text": "the majority of cases the mitigations are all turned on there the one exception is the force aslr feature",
    "start": "3200920",
    "end": "3206160"
  },
  {
    "text": "which is still an opt-in feature applications still have to turn this on themselves and again that's for performance and compatibility reasons",
    "start": "3206160",
    "end": "3212960"
  },
  {
    "text": "Internet Explorer 10 when running on Windows 8 takes full advantage of the new mitigation features in Windows 8 as",
    "start": "3212960",
    "end": "3218680"
  },
  {
    "text": "does the new version of office but by default uh existing applications that run uh on Windows 8 will still need to",
    "start": "3218680",
    "end": "3225680"
  },
  {
    "text": "explicitly uh opt in to some of these features so dep uh aslr Force relocate",
    "start": "3225680",
    "end": "3231280"
  },
  {
    "text": "all these opt-in mitigation features are something the application still has to explicitly elect to enable and again",
    "start": "3231280",
    "end": "3236640"
  },
  {
    "text": "this is to retain application compatibility in terms of how",
    "start": "3236640",
    "end": "3242160"
  },
  {
    "start": "3240000",
    "end": "3240000"
  },
  {
    "text": "applications can actually turn these things on we have a couple of different options one is uh we have What's called",
    "start": "3242160",
    "end": "3247839"
  },
  {
    "text": "the mitigation options image file execution option this is essentially a registry value that you can set for your executable that will turn on these",
    "start": "3247839",
    "end": "3254240"
  },
  {
    "text": "mitigations this something they can be used by an application developer themselves or by a system administrator",
    "start": "3254240",
    "end": "3259960"
  },
  {
    "text": "to protect uh potentially Legacy applications that they may not be able to get changes to we've also added a",
    "start": "3259960",
    "end": "3265400"
  },
  {
    "text": "process creation attrib so when you're launching a process you can actually enable these flags for the process",
    "start": "3265400",
    "end": "3270920"
  },
  {
    "text": "that's being created and we've also added a new API that for certain mitigations can be used called set process mitigation that can be used to",
    "start": "3270920",
    "end": "3277359"
  },
  {
    "text": "turn on certain mitigations and in some cases there's a new Linker flag that you can actually when you're building your application set a bit in the image that",
    "start": "3277359",
    "end": "3284200"
  },
  {
    "text": "will turn these on so I'm not going to go into detail on this table here uh other than to note in particular for",
    "start": "3284200",
    "end": "3289799"
  },
  {
    "text": "bottom up randomization particularly High entropy B randomization we've added a new Linker flag called high entropy VA",
    "start": "3289799",
    "end": "3296440"
  },
  {
    "text": "which is enabled by default uh that needs to be set if you want to take advantage of 64-bit High",
    "start": "3296440",
    "end": "3302440"
  },
  {
    "text": "entropy okay so to wrap up uh our expectations for exploitation on Windows 8 we believe because of the Investments",
    "start": "3302440",
    "end": "3308960"
  },
  {
    "start": "3303000",
    "end": "3303000"
  },
  {
    "text": "that we've made in Windows 8 and in previous versions of Windows writing exploits for Windows 8 is going to be very costly it's it's something that you",
    "start": "3308960",
    "end": "3316240"
  },
  {
    "text": "know in certain cases we've actually uh taken steps to uh mitigate certain",
    "start": "3316240",
    "end": "3321440"
  },
  {
    "text": "vulnerability classes entirely so if you think back to range checks and if you think back to the colonel n protection",
    "start": "3321440",
    "end": "3327319"
  },
  {
    "text": "these both turn what were previously elevation of privilege vulnerabilities and things that are now denial of services and we've also taken steps to",
    "start": "3327319",
    "end": "3334280"
  },
  {
    "text": "make sure that many of the techniques that attackers have relied on in previous version of versions of Windows are now broken and",
    "start": "3334280",
    "end": "3340720"
  },
  {
    "text": "unreliable with that said uh we expect attackers will shift their focus in a couple of different ways we think that",
    "start": "3340720",
    "end": "3346440"
  },
  {
    "text": "attackers will continue to Target desktop applications that either don't fully enable mitigations uh or that are",
    "start": "3346440",
    "end": "3351799"
  },
  {
    "text": "running on previous versions of Windows we expect that Trend to continue we also expect because of the Investments that",
    "start": "3351799",
    "end": "3357720"
  },
  {
    "text": "we've made in hardening aslr and windows8 we expect that attackers are going to uh increasingly focus on",
    "start": "3357720",
    "end": "3363240"
  },
  {
    "text": "refining techniques for uh disclosing address based information uh so if you saw furman's talk he gave some insight",
    "start": "3363240",
    "end": "3369319"
  },
  {
    "text": "into where researchers might be going there and we also fully expect that attackers will spend time researching new exploitation techniques so they'll",
    "start": "3369319",
    "end": "3376119"
  },
  {
    "text": "take stock of the changes that we've made and try to find new ways to to develop uh exploitation techniques in",
    "start": "3376119",
    "end": "3381160"
  },
  {
    "text": "that in that domain and with that said we'll continue to evolve our mitigations you know we we've been thinking about",
    "start": "3381160",
    "end": "3387000"
  },
  {
    "text": "things that we'd like to do in the future and while we're not going to talk about those today it's something that you know we'll continue to look at how",
    "start": "3387000",
    "end": "3392559"
  },
  {
    "text": "the the TAC ecosystem evolves and how we see the field playing out and we'll continue to evolve our Technologies to",
    "start": "3392559",
    "end": "3398559"
  },
  {
    "text": "try to close gaps here uh I think one closing point to make is that the Investments that we make in mitigation",
    "start": "3398559",
    "end": "3404960"
  },
  {
    "text": "Technologies are are really geared as we said to drive up the cost of developing a reliable exploit and they're meant to",
    "start": "3404960",
    "end": "3410520"
  },
  {
    "text": "make it such that even if there is a latent vulnerability that's in our software or in software that runs on Windows even if that's the case we want",
    "start": "3410520",
    "end": "3417640"
  },
  {
    "text": "to make it as hard as possible for somebody to develop an exploit for it uh hopefully such to the degree that it",
    "start": "3417640",
    "end": "3423720"
  },
  {
    "text": "just isn't worth their time to actually even try to write an exploit for it so the call to action here is of course if",
    "start": "3423720",
    "end": "3429640"
  },
  {
    "start": "3428000",
    "end": "3428000"
  },
  {
    "text": "you want to take advantage of these features you should probably upgrade to Windows 8 and Internet Explorer 10 from our perspective uh 64-bit is certainly",
    "start": "3429640",
    "end": "3437520"
  },
  {
    "text": "best for mitigations as you saw with the high inop aslr and we also recommend that you enable enhanced protected mode",
    "start": "3437520",
    "end": "3443559"
  },
  {
    "text": "for the desktop version of Internet Explorer 10 if you're a software developer in the audience we recommend",
    "start": "3443559",
    "end": "3449240"
  },
  {
    "text": "that you build your applications with Visual Studio 2012 if you want to take advantage of some of the same hardening",
    "start": "3449240",
    "end": "3454559"
  },
  {
    "text": "compiler hardening features that we used to build Windows 8 and we also recommend that you enable these opin uh",
    "start": "3454559",
    "end": "3460280"
  },
  {
    "text": "mitigations for your application you know it's it's really important as we said such that you know even if you do have a lat and vulnerability in your",
    "start": "3460280",
    "end": "3465920"
  },
  {
    "text": "application by enabling these mitigations you're making it that much harder for people to write exploits and",
    "start": "3465920",
    "end": "3471160"
  },
  {
    "text": "finally if you're a driver developer uh we recommend that you take your existing driver and Port it to use nonpatient",
    "start": "3471160",
    "end": "3476240"
  },
  {
    "text": "pool and X we have some great guidance on how to do that that's linked here so I think we're out of time um but uh if",
    "start": "3476240",
    "end": "3483440"
  },
  {
    "text": "anybody wants to hang around we can take questions uh but yeah thanks",
    "start": "3483440",
    "end": "3488640"
  },
  {
    "text": "everybody",
    "start": "3494799",
    "end": "3497799"
  }
]