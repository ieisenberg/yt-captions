[
  {
    "start": "0",
    "end": "660000"
  },
  {
    "text": "well good morning everyone I'm agent tag from Columbia University it's really great to see everybody here today at a",
    "start": "30",
    "end": "6210"
  },
  {
    "text": "black hat and thank you black hat for inviting me here for for this talk so",
    "start": "6210",
    "end": "11250"
  },
  {
    "text": "this talk that I'm gonna talking about today is is a joint work with my advisers back in Columbia South Stoffel",
    "start": "11250",
    "end": "17910"
  },
  {
    "text": "and sim house at the Mud Run and today we're really excited to share with you how we broke energy management a very",
    "start": "17910",
    "end": "25050"
  },
  {
    "text": "fundamental component that we see in a lot of systems that we have today and we call this new class of attack vector",
    "start": "25050",
    "end": "31669"
  },
  {
    "text": "clocks crew so first a brief bio of myself currently doing my PhD in",
    "start": "31669",
    "end": "37739"
  },
  {
    "text": "Columbia University I belong to two labs over their ideas lab and the computer architecture lab for a huge part of my",
    "start": "37739",
    "end": "44820"
  },
  {
    "text": "research I do a lot of reverse engineering a lot of buck hunting created a couple of buzzes and and also",
    "start": "44820",
    "end": "51239"
  },
  {
    "text": "do a couple like malwan and analysis focus a lot of security issues that are related to hardware and software",
    "start": "51239",
    "end": "57329"
  },
  {
    "text": "interfaces so now about energy management so today as we know we're energy management is a indispensable in",
    "start": "57329",
    "end": "64500"
  },
  {
    "text": "fact none of the systems that we have today can actually exist without energy management and this is because as we",
    "start": "64500",
    "end": "70470"
  },
  {
    "text": "shown it chart over here energy density is getting at a totally ridiculous point as far as we try to cram as much more",
    "start": "70470",
    "end": "76979"
  },
  {
    "text": "and more functionality into like smaller and smaller chips we can create hot spots in them so much so that if we",
    "start": "76979",
    "end": "83280"
  },
  {
    "text": "don't manage the energy well it might clear that the battery might rain really quickly or worse we might even burn a",
    "start": "83280",
    "end": "88680"
  },
  {
    "text": "hole in the trip so because this is so important practitioner in the industry",
    "start": "88680",
    "end": "94710"
  },
  {
    "text": "and our researchers in the academia they have gone to great lengths just to optimize the way we manage energy or",
    "start": "94710",
    "end": "100560"
  },
  {
    "text": "consumption so this is clearly very important in the industry and both in the in the academia too so in summary we",
    "start": "100560",
    "end": "106770"
  },
  {
    "text": "have this mechanism energy management that we cannot live without and it's found on almost all the systems and is",
    "start": "106770",
    "end": "113520"
  },
  {
    "text": "extremely complicated so this is a perfect storm for security and yet no studies have actually looked at this and",
    "start": "113520",
    "end": "119490"
  },
  {
    "text": "so in this work we study the mechanisms and show that this systems can be fragile in terms of security so our",
    "start": "119490",
    "end": "127920"
  },
  {
    "text": "attack idea is this through software we try to manipulate the energy man management parameters to stretch the",
    "start": "127920",
    "end": "135000"
  },
  {
    "text": "operational limits of the devices in the way that it induces false insecurity",
    "start": "135000",
    "end": "140520"
  },
  {
    "text": "critical software so why is this cool because this allows us to sidestep all",
    "start": "140520",
    "end": "145950"
  },
  {
    "text": "the requirements of traditional fault attacks like needing physical proximity a separate equipments crocodile clips",
    "start": "145950",
    "end": "152130"
  },
  {
    "text": "and all the maths and business but more importantly it opens up a very new attack surface on something very",
    "start": "152130",
    "end": "158640"
  },
  {
    "text": "pervasive in systems and it has little raises the possibility of doing four attacks",
    "start": "158640",
    "end": "164130"
  },
  {
    "text": "remotely so just to summarize at all in a nutshell what have we achieved in this",
    "start": "164130",
    "end": "169410"
  },
  {
    "text": "work we found a new software based attack vector that exploits a mccannon them found in almost all systems we",
    "start": "169410",
    "end": "177330"
  },
  {
    "text": "showed that this vector can be used to break at raz√≥n or the security guarantees of trusted execution environment we disclose our findings to",
    "start": "177330",
    "end": "185580"
  },
  {
    "text": "the vendors whose chips are going to millions and hundreds of devices out there and the vendors have accepted our",
    "start": "185580",
    "end": "190650"
  },
  {
    "text": "disclosure as highly critical and novel and are currently working to its mitigation that fixes and finally we",
    "start": "190650",
    "end": "196890"
  },
  {
    "text": "hope that the security can be duly considered in future designs of all the systems this is an overview of what we",
    "start": "196890",
    "end": "203850"
  },
  {
    "text": "were going to be talking about today first we'll pick apart what we can about the hardware and software support for",
    "start": "203850",
    "end": "209670"
  },
  {
    "text": "devfs devfs is a very commonly used energy management technique I'm gonna",
    "start": "209670",
    "end": "214799"
  },
  {
    "text": "talk more about that later and then based on what we learn we're gonna be talking about the general attack",
    "start": "214799",
    "end": "221220"
  },
  {
    "text": "architecture and finally we describe in detail how we pull off to trust zone attacks on an actual phone so first up",
    "start": "221220",
    "end": "229140"
  },
  {
    "text": "about devfs and deep dive into the hardware regulators now there are two",
    "start": "229140",
    "end": "235049"
  },
  {
    "text": "main factors that affect energy consumption the operating frequency and",
    "start": "235049",
    "end": "240299"
  },
  {
    "text": "voltage think of frequency as how much how fast a system can process the data",
    "start": "240299",
    "end": "246239"
  },
  {
    "text": "the higher the frequency the more energy consumed you can think of voltage as how",
    "start": "246239",
    "end": "251310"
  },
  {
    "text": "much power to supply to the system and more voltage the more energy will be consumed now devfs saves the energy by turning",
    "start": "251310",
    "end": "257789"
  },
  {
    "text": "this two knobs based on runtime computing demands it's a little bit like putting putting a rubber band over this",
    "start": "257789",
    "end": "264090"
  },
  {
    "text": "to NOx and carefully adjusting both at the same time so of course it sketches devfs a very very high level",
    "start": "264090",
    "end": "270240"
  },
  {
    "text": "but in practice how a frequency and voltage actually changed on your phone so this is possible due to a combination",
    "start": "270240",
    "end": "277470"
  },
  {
    "text": "of hardware and software support for devfs at the hardware level we have the",
    "start": "277470",
    "end": "282780"
  },
  {
    "text": "circuit level hardware regulators and that they control the frequency and voltage at the hardware level now at the",
    "start": "282780",
    "end": "289350"
  },
  {
    "text": "software level we have the power governor's that monitor the runtime usage and initiate frequency and voltage",
    "start": "289350",
    "end": "294690"
  },
  {
    "text": "changes using the device drivers now by studying the source code of the device",
    "start": "294690",
    "end": "300390"
  },
  {
    "text": "driver we know that the software can control the hardware regulators via memory map registers and this really",
    "start": "300390",
    "end": "306990"
  },
  {
    "text": "interesting because now we know that software can affect some physical characteristics of the hardware that is running on and so we focus our Tara our",
    "start": "306990",
    "end": "314880"
  },
  {
    "text": "study on the regulators and your interfaces for this work will focus on",
    "start": "314880",
    "end": "320280"
  },
  {
    "text": "starting an actual arm v7 phone so specifically the Nexus 6 mv7 form for",
    "start": "320280",
    "end": "328169"
  },
  {
    "text": "illustration we here we show the schematics of the frequency in the voltage regulators that we reverse",
    "start": "328169",
    "end": "333419"
  },
  {
    "text": "engineer from the Nexus device now the important point to note here is on this",
    "start": "333419",
    "end": "338550"
  },
  {
    "text": "device kinetics this regulators are all configurable from the software through the memory map registers I want to",
    "start": "338550",
    "end": "345060"
  },
  {
    "text": "elaborate the details for this so if you interested I've made available the source code that I use I created the",
    "start": "345060",
    "end": "350460"
  },
  {
    "text": "driver that allows you to manipulate the voltage and frequency and I give the link over here so after creating the",
    "start": "350460",
    "end": "358260"
  },
  {
    "text": "driver to programmatically control the frequency in the voltage at runtime this",
    "start": "358260",
    "end": "363870"
  },
  {
    "text": "is where things starts to get really interesting because for certain values of frequency and the voltages we begin",
    "start": "363870",
    "end": "370380"
  },
  {
    "text": "to see really interesting crashes for example programs to start to terminate prematurely or even like you know you I",
    "start": "370380",
    "end": "376140"
  },
  {
    "text": "will stop working so this is a screenshot of what happened when we try to like raise the frequency past",
    "start": "376140",
    "end": "381150"
  },
  {
    "text": "specific point or in combination with some other voltages so we play around",
    "start": "381150",
    "end": "388350"
  },
  {
    "text": "with different settings even we like different temperatures the picture that you see over here this is a basically a",
    "start": "388350",
    "end": "394229"
  },
  {
    "text": "picture of my my fridge my laptop and my phone which is actually in the freezer which can seen in the picture here so I gotta say",
    "start": "394229",
    "end": "400889"
  },
  {
    "text": "this fridge has been really useful in my research but clearly my wife is not very excited about me putting like random",
    "start": "400889",
    "end": "406980"
  },
  {
    "text": "phones in there in the fridge but anyway we died we decided like dig a little bit further into this so now yeah we want to",
    "start": "406980",
    "end": "414300"
  },
  {
    "text": "know that the software can control the frequency and the voltage right a fair question for us to ask is whether any",
    "start": "414300",
    "end": "420450"
  },
  {
    "text": "limits actually imposed are on all this configuration at runtime so it's",
    "start": "420450",
    "end": "426330"
  },
  {
    "text": "actually why we want to do is it configure different frequency and voltage points on an actual phone and then we want to track when bad things",
    "start": "426330",
    "end": "432360"
  },
  {
    "text": "happen and we need to do this like systematically there's couple of things we need to do so now we know we can",
    "start": "432360",
    "end": "438300"
  },
  {
    "text": "observe and probe like the the phone for unintended computing behaviors like crashing and trigger freezes we know we",
    "start": "438300",
    "end": "444660"
  },
  {
    "text": "can control the frequency and the voltage we need to also be able to verify that the frequency and the",
    "start": "444660",
    "end": "450180"
  },
  {
    "text": "voltage actually change according to what we want so how do we actually do that so fortunately if we have the debug",
    "start": "450180",
    "end": "456960"
  },
  {
    "text": "FS interface and able they're actually sensors on the thing which you can access and you can probe to see what the",
    "start": "456960",
    "end": "463110"
  },
  {
    "text": "frequency and the voltage is on the actual phone so short of using like you know opening the phone up and using",
    "start": "463110",
    "end": "468990"
  },
  {
    "text": "physical instrument to probe for all this physical like the frequency in the voltage we can use a debug statement",
    "start": "468990",
    "end": "475140"
  },
  {
    "text": "over here to get information directly so this commands are actually more convenient here for us",
    "start": "475140",
    "end": "480919"
  },
  {
    "text": "so now let's let's explore this a little bit more you the the various operating points for the frequency in the voltage",
    "start": "480919",
    "end": "486660"
  },
  {
    "text": "right so what we have here is a nexus 6 device this is advertised to run our at",
    "start": "486660",
    "end": "491910"
  },
  {
    "text": "2.7 gigahertz and we measure the vendor recommended frequency and voltage at runtime so the frequency is the y-axis",
    "start": "491910",
    "end": "500039"
  },
  {
    "text": "and on the x-axis you have the voltage and after measurement we observe several discrete frequency and voltage operating",
    "start": "500039",
    "end": "506760"
  },
  {
    "text": "points here so true enough well the vendors is definitely not lying to us because if you look at the top",
    "start": "506760",
    "end": "511830"
  },
  {
    "text": "right most corner of that the highest frequency of 2.7 gigahertz it's really as advertised there so they're",
    "start": "511830",
    "end": "518039"
  },
  {
    "text": "definitely not lying now we use the software interfaces that we've uncovered earlier on our to control the frequency",
    "start": "518039",
    "end": "524250"
  },
  {
    "text": "in voltage and then for every voltage we try to raise the frequency all the way up until we see some signs of",
    "start": "524250",
    "end": "530670"
  },
  {
    "text": "instability on the phone this can range from apps crashing or you know the device of rebooting and then we",
    "start": "530670",
    "end": "536910"
  },
  {
    "text": "measure like the frequency in the voltage and plot the points over here now these are the operating points are",
    "start": "536910",
    "end": "543660"
  },
  {
    "text": "the blue points that we see over here on the graph is the points that we try to push it all the way up so these are the",
    "start": "543660",
    "end": "549839"
  },
  {
    "text": "what we have actually measured from there as we can see from this graph two things are actually appearing here one",
    "start": "549839",
    "end": "557420"
  },
  {
    "text": "there are really no safeguard limits in the hardware regulators here despite",
    "start": "557420",
    "end": "562709"
  },
  {
    "text": "what the the vendors they're advertised here and two when we reduce the voltage this also reduces the minimum frequency",
    "start": "562709",
    "end": "570120"
  },
  {
    "text": "we need to get some kind of instability on the phone so all these things starts",
    "start": "570120",
    "end": "575160"
  },
  {
    "text": "to get really interesting and more interesting we tried on different kind of phones and besides the Nexus 6 we also found similar behaviors in the",
    "start": "575160",
    "end": "581339"
  },
  {
    "text": "other devices now that we know that we can change the frequency and voltage with no limits the next thing we want to",
    "start": "581339",
    "end": "587579"
  },
  {
    "text": "access here is how dangerous is it is on the commodity devices as we all know like arm devices comes with the",
    "start": "587579",
    "end": "593879"
  },
  {
    "text": "transient technology that isolate trusting execution environment we can perhaps affect the frequency and voltage",
    "start": "593879",
    "end": "600420"
  },
  {
    "text": "wow the transient code is running and maybe you can do something interesting over there so this is a simplified view",
    "start": "600420",
    "end": "607379"
  },
  {
    "text": "of at raz√≥n and enable our arm core so basically what trustzone does is that it isolates the trusted",
    "start": "607379",
    "end": "615180"
  },
  {
    "text": "code on on the left from the untrusted code on the right and in our research we",
    "start": "615180",
    "end": "621720"
  },
  {
    "text": "found that the underlying regulators the operator crosses the security boundaries both the trust own code and the normal",
    "start": "621720",
    "end": "629339"
  },
  {
    "text": "untrusted code they share the same frequency and the voltage regulators that you have in the core so when the",
    "start": "629339",
    "end": "634500"
  },
  {
    "text": "untrusted code changes the frequency and the voltages are of the regulator's it also affects the the the execution of",
    "start": "634500",
    "end": "641399"
  },
  {
    "text": "the trusted code within the terrazzo so now we know we can affect the execution of the transient code from outside Tran",
    "start": "641399",
    "end": "648000"
  },
  {
    "text": "so next about the actual attack ultimately one we want to ask can we",
    "start": "648000",
    "end": "653249"
  },
  {
    "text": "actually attack the trans own code execution from outside trust zone using purely software only control the",
    "start": "653249",
    "end": "659189"
  },
  {
    "text": "regulator's the idea is to push the frequency and the voltage past the operating points and in do",
    "start": "659189",
    "end": "665459"
  },
  {
    "start": "660000",
    "end": "788000"
  },
  {
    "text": "some kind of like timing faults in there so ultimately you want to break the confidentiality and integrity guarantees",
    "start": "665459",
    "end": "672629"
  },
  {
    "text": "of trans owned note that we are not trying to do we're not looking at availability attacks because they're trivial to to break over here but before",
    "start": "672629",
    "end": "680850"
  },
  {
    "text": "we talk about injecting Falls I want to just give a quick overview a quick sketch on why faults occur on the",
    "start": "680850",
    "end": "686490"
  },
  {
    "text": "systems yeah what happened and underlying electrical circuit so now if you look at the devices we have today",
    "start": "686490",
    "end": "692639"
  },
  {
    "text": "are all the digital circuits are made up of electronic components and we call it",
    "start": "692639",
    "end": "698129"
  },
  {
    "text": "flip-flops think of them as elements that hold some kind of state say or the",
    "start": "698129",
    "end": "703589"
  },
  {
    "text": "bit 1 or 0 and each flip-flop has an input and output and because there's so",
    "start": "703589",
    "end": "708929"
  },
  {
    "text": "many flip-flops they need coordinate the operation using a common clock so the",
    "start": "708929",
    "end": "714689"
  },
  {
    "text": "flip-flops can only change the states together at each clock pulse and there",
    "start": "714689",
    "end": "720779"
  },
  {
    "text": "needs to flow from one flip-flop to the next one and usually there's some kind of intermediate path in between so say",
    "start": "720779",
    "end": "726889"
  },
  {
    "text": "we want to transfer this bit one from this end all the way to the other end and then it actually it takes some time",
    "start": "726889",
    "end": "733920"
  },
  {
    "text": "to propagate the data bit but more importantly actually needs to do it within the consecutive pulses of the",
    "start": "733920",
    "end": "739529"
  },
  {
    "text": "clock signal and so there's actually a hot timing dateline some sense so now we",
    "start": "739529",
    "end": "745769"
  },
  {
    "text": "want to transfer the bit 0 instead of 1 to the other end so what happens when we increase the frequency too much beyond",
    "start": "745769",
    "end": "753179"
  },
  {
    "text": "what the the vendors have actually advertised means that the clock pulses they have to occur more frequently in",
    "start": "753179",
    "end": "759600"
  },
  {
    "text": "the same amount of time and since the flow of flip-flop changes the states only at the pulses this means that the",
    "start": "759600",
    "end": "765629"
  },
  {
    "text": "data have less time to propagate through the intermediate path that they have in between so as a result of that the",
    "start": "765629",
    "end": "771959"
  },
  {
    "text": "output is supposed to be 0 but it remains as the old value which is 1 and at a high level this basically means",
    "start": "771959",
    "end": "778199"
  },
  {
    "text": "that it it results in a perceived bit flip of 0 to 1 so this is essentially",
    "start": "778199",
    "end": "784769"
  },
  {
    "text": "how the fault actually happens in the context of flip-flops so what are some",
    "start": "784769",
    "end": "790439"
  },
  {
    "text": "of the possible security implications of inducing faults using software base overclocking for example so to get to",
    "start": "790439",
    "end": "797579"
  },
  {
    "text": "get an initial assessment of this we created two simple victim programs just like acceleration and then we use",
    "start": "797579",
    "end": "803460"
  },
  {
    "text": "the tool that we discussed earlier to manipulate the frequency and voltage so",
    "start": "803460",
    "end": "808560"
  },
  {
    "text": "now in the first example we will show how the control flow of an actual program can be influenced so I'm gonna",
    "start": "808560",
    "end": "815220"
  },
  {
    "text": "show a quick video over here so on the left here we run our victim program you can see it's pin looks for awhile checks",
    "start": "815220",
    "end": "821730"
  },
  {
    "text": "for some conditions and then it fills the authentication the expected thing is the authentication would be a whitfill",
    "start": "821730",
    "end": "827070"
  },
  {
    "text": "and then after that while it's running we're gonna run it again and then we are",
    "start": "827070",
    "end": "832230"
  },
  {
    "text": "run a code on the separate core as an attacker we change and increase the frequency all the way up while the cell",
    "start": "832230",
    "end": "839970"
  },
  {
    "text": "during the second time we run the victim program and here we see how the the victim program actually behaves very",
    "start": "839970",
    "end": "846780"
  },
  {
    "text": "differently across while the the old clocking actually happens in the first one you failed and the second one",
    "start": "846780",
    "end": "852420"
  },
  {
    "text": "actually passed so the control for the program was actually influenced in this case in the second example we want to",
    "start": "852420",
    "end": "859560"
  },
  {
    "text": "show how overclocking can cause arithmatic computation to create to produce error",
    "start": "859560",
    "end": "865290"
  },
  {
    "text": "errors so on the left here we have our victim program we're gonna run it as you",
    "start": "865290",
    "end": "870300"
  },
  {
    "text": "can run a couple of computation mathematic computation it should return the numbers 0 1 & 2 we're gonna run it",
    "start": "870300",
    "end": "877950"
  },
  {
    "text": "again do the overclocking which is wait for a while and see what happens so",
    "start": "877950",
    "end": "884090"
  },
  {
    "text": "we're supposed to be expecting 0 1 & 2 I'm not sure whether it's a pretty",
    "start": "886040",
    "end": "891270"
  },
  {
    "text": "visible here but we supposed to expect 1 0 1 2 but for when we overclock the thing the first number that came out for",
    "start": "891270",
    "end": "898590"
  },
  {
    "text": "that would be an invalid number so by using overclocking you can actually influence the deal flow as well as the",
    "start": "898590",
    "end": "904980"
  },
  {
    "text": "corruption of the the data that's been computed from the unit so what we have",
    "start": "904980",
    "end": "910740"
  },
  {
    "start": "909000",
    "end": "1366000"
  },
  {
    "text": "earlier is a very simple programs unfortunately program any programs that you want to attack they're more",
    "start": "910740",
    "end": "915900"
  },
  {
    "text": "complicated and we were playing around this and we realize that to pull it off to put into a pool of the inducing a",
    "start": "915900",
    "end": "922140"
  },
  {
    "text": "fault in an actual self-contained device entirely from software is actually very very challenging so these are some of",
    "start": "922140",
    "end": "928740"
  },
  {
    "text": "the challenges we have to we have to overcome we outlined some this challenges and briefly sketch how",
    "start": "928740",
    "end": "933990"
  },
  {
    "text": "we address them so for one over cocky requires being able to set the frequency",
    "start": "933990",
    "end": "939300"
  },
  {
    "text": "way past this suggested value and we have seen earlier that the hardware regulators they have no limits based on",
    "start": "939300",
    "end": "945840"
  },
  {
    "text": "our earlier exploration in fact any operating points are above the blue dots",
    "start": "945840",
    "end": "952200"
  },
  {
    "text": "over there in the graph it's a possible candidate that we can use for the attack and the both the attack and the victim",
    "start": "952200",
    "end": "961200"
  },
  {
    "text": "courts have to execute on the same device so how do we prevent the attack code from attacking itself or attacking",
    "start": "961200",
    "end": "968340"
  },
  {
    "text": "something some other non victim code that we don't want to attack at all so for this we exploit the emerging trend",
    "start": "968340",
    "end": "974430"
  },
  {
    "text": "where energy management techniques are the mechanisms are getting more and more fine-grain so many devices such as the",
    "start": "974430",
    "end": "980700"
  },
  {
    "text": "one that we attack have separate frequency regulators on on the core so with that in mind we weep in the the",
    "start": "980700",
    "end": "988410"
  },
  {
    "text": "threat execution of the attack and the victim codes to separate course and this helps to isolate the the effects of the",
    "start": "988410",
    "end": "994200"
  },
  {
    "text": "fault injection just to the victim threat that we want and the environment",
    "start": "994200",
    "end": "1000170"
  },
  {
    "text": "that we attacking is in the is a complex full OS and to deal with that carefully design the attack to disable the the",
    "start": "1000170",
    "end": "1008090"
  },
  {
    "text": "interrupts during the window of the attack so a couple with Corpening this reduced a lot of noise during our attack",
    "start": "1008090",
    "end": "1013820"
  },
  {
    "text": "and finally for many attack scenarios we need very very precise timing as to when",
    "start": "1013820",
    "end": "1019400"
  },
  {
    "text": "the fault should be in fact injected and for how long so we need very fine-grained timing",
    "start": "1019400",
    "end": "1025430"
  },
  {
    "text": "resolutions so for example to give a sense of like the difficulty in one of",
    "start": "1025430",
    "end": "1030740"
  },
  {
    "text": "our attack scenarios we have to inject a fault within a small window of about",
    "start": "1030740",
    "end": "1036100"
  },
  {
    "text": "65,000 clock cycles within an entire victim threat execution that actually",
    "start": "1036100",
    "end": "1041150"
  },
  {
    "text": "takes about 1.1 billion clock cycles so that is the skill that we are actually looking at so for timing resolution we",
    "start": "1041150",
    "end": "1047240"
  },
  {
    "text": "rely on assembly level are no ops loops for high precision timing delays and to",
    "start": "1047240",
    "end": "1052490"
  },
  {
    "text": "guide the timing of the fault delivery we rely on cache side-channel base profiling techniques so more about that",
    "start": "1052490",
    "end": "1058790"
  },
  {
    "text": "later so now for the attacks we explore two attacks here in the first attack",
    "start": "1058790",
    "end": "1066140"
  },
  {
    "text": "we break confidentiality by inferring the secret AES key data stored in trans",
    "start": "1066140",
    "end": "1071240"
  },
  {
    "text": "oh and in the second attack we show how trustzone how clocks crew can tricked resume into",
    "start": "1071240",
    "end": "1077330"
  },
  {
    "text": "loading a self-signed application so let's talk about the first attack so the",
    "start": "1077330",
    "end": "1084080"
  },
  {
    "text": "frame model is this we have an aes decryption application that's running within truss though it uses a secret key",
    "start": "1084080",
    "end": "1090830"
  },
  {
    "text": "that cannot be accessed from the non secure normal world now the attacker wants to extract this secret key out",
    "start": "1090830",
    "end": "1097400"
  },
  {
    "text": "from trussel and we assume that the attacker outside raz√≥n can repeatedly invoke this decryption application and",
    "start": "1097400",
    "end": "1103940"
  },
  {
    "text": "we assume that the attacker has software access to the hub regulators so he can",
    "start": "1103940",
    "end": "1108950"
  },
  {
    "text": "actually inject this fault during the decryption operation so what we want to",
    "start": "1108950",
    "end": "1115280"
  },
  {
    "text": "do is this in this attack Isis we want to induce the fault while the AES decryption is happening within trustzone",
    "start": "1115280",
    "end": "1121010"
  },
  {
    "text": "and here we show an expected operation where we get the correct plaintext from the decryption so now we will invoke the",
    "start": "1121010",
    "end": "1127970"
  },
  {
    "text": "decryption operation again but this time we will induce a timing fault at the",
    "start": "1127970",
    "end": "1133429"
  },
  {
    "text": "decryption level to result in the faulty plaintext and then using this pair of",
    "start": "1133429",
    "end": "1139280"
  },
  {
    "text": "correct and faulty plaintext we can run a technique which we call Herbie who is",
    "start": "1139280",
    "end": "1144410"
  },
  {
    "text": "well known tackier using like a differential fault analysis that allows us to infer the secret key or based on",
    "start": "1144410",
    "end": "1150530"
  },
  {
    "text": "this pair of correct and faulty print X so to induce the timing fault to the",
    "start": "1150530",
    "end": "1156169"
  },
  {
    "text": "decryption execution there are these are some of the parameters that we use for the attacks the hardest part of the",
    "start": "1156169",
    "end": "1162770"
  },
  {
    "text": "attack is to figure out how to inject a one-bite fault to the seventh eight years around during the the decryption",
    "start": "1162770",
    "end": "1170410"
  },
  {
    "text": "so very briefly on how the differential for analysis work are by corrupting the",
    "start": "1170410",
    "end": "1175760"
  },
  {
    "text": "first one one byte in the seventh a year round this introduces a fall into the f√°s",
    "start": "1175760",
    "end": "1181160"
  },
  {
    "text": "round key so this diagram shows how this fault actually probably is through like the remaining AES rounds ultimately at",
    "start": "1181160",
    "end": "1187669"
  },
  {
    "text": "the end of it what we'll get is a system of equation basically a set of constraints that we can use to reduce",
    "start": "1187669",
    "end": "1193370"
  },
  {
    "text": "the key search space you can check out the code at the following link over here",
    "start": "1193370",
    "end": "1199809"
  },
  {
    "text": "so luckily we can also profile the execution timing of the trans old code using hardware hardware cycle counters",
    "start": "1199809",
    "end": "1206870"
  },
  {
    "text": "so even when we are actually outside resume we can access that this allows us to perform timing profiles of the",
    "start": "1206870",
    "end": "1213740"
  },
  {
    "text": "profiling of the victim applications from outside trans own so the first question we ask is this how long does",
    "start": "1213740",
    "end": "1221120"
  },
  {
    "text": "the decryption operation actually takes does it vary from run to run because if it changes too much we're going to have",
    "start": "1221120",
    "end": "1226789"
  },
  {
    "text": "a tough time injecting the fault to wherever we want so here we plot a histogram of the execution time of the",
    "start": "1226789",
    "end": "1234260"
  },
  {
    "text": "decryption we see that more than 80% of the invocation actually takes between eight hundred nine hundred thousand",
    "start": "1234260",
    "end": "1240590"
  },
  {
    "text": "score cycle so in terms of execution time there's not much variability and that's on the attacker side of things we",
    "start": "1240590",
    "end": "1247880"
  },
  {
    "text": "call that we're using the number of no op loops to time the delivery of the default so is this an accurate a proxy",
    "start": "1247880",
    "end": "1255080"
  },
  {
    "text": "that we use to control the timing so here we plot the number of norm loops that we use before the fault injection",
    "start": "1255080",
    "end": "1261340"
  },
  {
    "text": "against the execution duration of the attack field threat and we see a clear predictable linear trend here so this",
    "start": "1261340",
    "end": "1268429"
  },
  {
    "text": "parameter that we use for the fault injection is actually a good proxy or for us to time when we do the fault",
    "start": "1268429",
    "end": "1274700"
  },
  {
    "text": "injection so our differential for analysis requires our fault model to",
    "start": "1274700",
    "end": "1280309"
  },
  {
    "text": "achieve two things we need to exactly corrupt only one byte in the seventh AES realm now we value help resolve that is",
    "start": "1280309",
    "end": "1287809"
  },
  {
    "text": "and how like we can we inject the for in exactly one a year round here we plot a",
    "start": "1287809",
    "end": "1295250"
  },
  {
    "text": "frequency histogram of the number of AES round where the default actually occurs and we see that more than 60% of the",
    "start": "1295250",
    "end": "1302539"
  },
  {
    "text": "resulting force here are precise enough to affect exactly one round so essentially we have we have quite a good",
    "start": "1302539",
    "end": "1310130"
  },
  {
    "text": "success rate to that on in terms of transients how likely can we corrupt as a tree just one bite here we plot the",
    "start": "1310130",
    "end": "1317149"
  },
  {
    "text": "frequency frequency histogram of the number of corrupted bytes when one AES row is actually a fault we see that all",
    "start": "1317149",
    "end": "1324230"
  },
  {
    "text": "of the before that affect one row more than half actually trans in enough to corrupt is aptly one byte",
    "start": "1324230",
    "end": "1331250"
  },
  {
    "text": "yep so we end up with and this versa attack with a summary of the results for",
    "start": "1331250",
    "end": "1337370"
  },
  {
    "text": "this attack this that is evident that we can actually control the note in the OP loops before the fault delivery yeah",
    "start": "1337370",
    "end": "1343309"
  },
  {
    "text": "if this allows us to precisely time Graham you want to do this so it takes roughly about training attempts to",
    "start": "1343309",
    "end": "1348799"
  },
  {
    "text": "induce a one-bite fault to the desire is wrong so subsequently then once we have the faulty and the correct of Intex we",
    "start": "1348799",
    "end": "1356090"
  },
  {
    "text": "can conduct differential foreign analysis takes roughly about 12 minutes to get about 3,600 key hypothesis after",
    "start": "1356090",
    "end": "1363710"
  },
  {
    "text": "that we can just brute force for the correct key and now for the second attack now in this a second attack we",
    "start": "1363710",
    "end": "1373669"
  },
  {
    "text": "want to attack the RSA signature verification routine within the trust",
    "start": "1373669",
    "end": "1379610"
  },
  {
    "text": "zone from where so on an actual phone the apps running within trust zone are basically building blocks for like",
    "start": "1379610",
    "end": "1385400"
  },
  {
    "text": "security so this apps are loaded at runtime from binary blob files you can",
    "start": "1385400",
    "end": "1391010"
  },
  {
    "text": "find from the the firmware and each of the app binary block files actually comes with a certificate chain of",
    "start": "1391010",
    "end": "1397760"
  },
  {
    "text": "digital images that ultimately the etre own OS would use to verify the authenticity of the app file just before",
    "start": "1397760",
    "end": "1405530"
  },
  {
    "text": "loading a thing so if it fails it won't look that so here's our threat model for",
    "start": "1405530",
    "end": "1410570"
  },
  {
    "text": "the attack scenario it's an attacker we want to trick the app loading routine to",
    "start": "1410570",
    "end": "1417230"
  },
  {
    "text": "accept a self-signed binary that we created and we assume that the attacker can repeatedly invoke the trans own to",
    "start": "1417230",
    "end": "1424640"
  },
  {
    "text": "load an application file and clearly we need to have software access to the regulator's and we also need to be",
    "start": "1424640",
    "end": "1430970"
  },
  {
    "text": "easily we can easily tell if an app has been loaded successfully just based on the return value of the invocation so",
    "start": "1430970",
    "end": "1438799"
  },
  {
    "text": "the attack general attack idea is this right so we want to self sign this app binary and then invoke the app loading",
    "start": "1438799",
    "end": "1445340"
  },
  {
    "text": "while the trazodone is verifying the signature that we provide then we want to actually inject the default in there",
    "start": "1445340",
    "end": "1452059"
  },
  {
    "text": "so we want to do that such that the RSA modulus that is actually being used at one time it gets corrupted to a value",
    "start": "1452059",
    "end": "1459140"
  },
  {
    "text": "that we can actually predict and use and essentially this if this RSA",
    "start": "1459140",
    "end": "1464960"
  },
  {
    "text": "modulus can be factorized we can then generate our own private key and then generate a signature that we can use to",
    "start": "1464960",
    "end": "1470210"
  },
  {
    "text": "trick the thing so to pull this attack off we need to export two things number",
    "start": "1470210",
    "end": "1476990"
  },
  {
    "text": "one how do we craft the self sign binary applications that we want to load into",
    "start": "1476990",
    "end": "1482179"
  },
  {
    "text": "the trans oh and two how does the the RSA signature verification actually work",
    "start": "1482179",
    "end": "1487279"
  },
  {
    "text": "how is they actually implemented in there how when and where do we inject",
    "start": "1487279",
    "end": "1492950"
  },
  {
    "text": "the form there so first let's investigate the format of the application our binary files so for the",
    "start": "1492950",
    "end": "1499820"
  },
  {
    "text": "form phone that we are exploring the trust zone app files can be found in the firmware updates or on the phone device",
    "start": "1499820",
    "end": "1506270"
  },
  {
    "text": "itself you can just extract them now and each of the app consists of a collection of files here are basically a dot MDT",
    "start": "1506270",
    "end": "1513320"
  },
  {
    "text": "file that contains the certificate chain a bunch of metadata and the Joseon ages",
    "start": "1513320",
    "end": "1519679"
  },
  {
    "text": "has been used and then we have a series of like the Program Files here so since this nature and the hashes and",
    "start": "1519679",
    "end": "1527500"
  },
  {
    "text": "certificate chain are all in the app have the adult MDT file are we big we",
    "start": "1527500",
    "end": "1532940"
  },
  {
    "text": "just get a focus or the our analysis on that one we just be attacking that one",
    "start": "1532940",
    "end": "1539049"
  },
  {
    "start": "1538000",
    "end": "1605000"
  },
  {
    "text": "so let's zoom into the format of the dot MDT file so here is a pictorial view of",
    "start": "1539049",
    "end": "1545659"
  },
  {
    "text": "what you can find in a dot empty fit md key file that you you can get from the",
    "start": "1545659",
    "end": "1551120"
  },
  {
    "text": "firmware first I'd like to acknowledge talent girl from Google project project",
    "start": "1551120",
    "end": "1556640"
  },
  {
    "text": "zero for their valuable work on reversing the the format of the MDG file so from their work we know that the",
    "start": "1556640",
    "end": "1563120"
  },
  {
    "text": "certificate is stored in a in a proprietary Motorola hav binary format",
    "start": "1563120",
    "end": "1568279"
  },
  {
    "text": "so let's zoom into an actual certificate that is found on the white vine",
    "start": "1568279",
    "end": "1574010"
  },
  {
    "text": "application on that will run we didn't trust own on the phone so since the public exponent is usually fixed is",
    "start": "1574010",
    "end": "1581240"
  },
  {
    "text": "always fixed to one zero zero zero one so in fact only the modulus and and the",
    "start": "1581240",
    "end": "1589190"
  },
  {
    "text": "signature is actually of interest during our analysis and if you're interested I",
    "start": "1589190",
    "end": "1594320"
  },
  {
    "text": "made a copy of my my certificate parsing code here at the link here if you want you can go",
    "start": "1594320",
    "end": "1600080"
  },
  {
    "text": "play around that download the the firmware and pass the certificate itself",
    "start": "1600080",
    "end": "1605920"
  },
  {
    "start": "1605000",
    "end": "1736000"
  },
  {
    "text": "next we want to dive into the trans own OS code that does the signature",
    "start": "1605920",
    "end": "1611840"
  },
  {
    "text": "verification so I know many of you already know this but let's quickly just review how this images are very thight",
    "start": "1611840",
    "end": "1618650"
  },
  {
    "text": "just so that we are on the same page say you have some blob of binary data that you want to you want to protect and",
    "start": "1618650",
    "end": "1624560"
  },
  {
    "text": "together with an attached certificate to prove its authenticity so to verify that",
    "start": "1624560",
    "end": "1630470"
  },
  {
    "text": "this is what this binary data that you want to protect the first thing you have to do is so special did get the hash of",
    "start": "1630470",
    "end": "1636380"
  },
  {
    "text": "the data so over here in the inside on the phone is avi uses sha-256 and then",
    "start": "1636380",
    "end": "1642020"
  },
  {
    "text": "now we assume that there's some kind of root root trust the key that is embedded in the in the in the firmware and is",
    "start": "1642020",
    "end": "1649220"
  },
  {
    "text": "actually trusted and using the modulus of the root key we can then decrypt the",
    "start": "1649220",
    "end": "1655100"
  },
  {
    "text": "signature that we refined from the signature certificate and then to finally get hash to and then to do the",
    "start": "1655100",
    "end": "1660920"
  },
  {
    "text": "actual verification of this issue what we do at the end of that is to verify that the two hashes actually match if",
    "start": "1660920",
    "end": "1667730"
  },
  {
    "text": "they don't match the certificate the signature verification will fail so this",
    "start": "1667730",
    "end": "1673820"
  },
  {
    "text": "works because when someone tries to modify the binary data the resulting",
    "start": "1673820",
    "end": "1679100"
  },
  {
    "text": "hash would not match the hash value that is finally decrypted from this is an issue that we have over here so well",
    "start": "1679100",
    "end": "1686960"
  },
  {
    "text": "then that why do we need to inject a fault at run time the biggest reason is",
    "start": "1686960",
    "end": "1692210"
  },
  {
    "text": "because the root verifying key is actually fixed within the the firmware so even if we try to change this in",
    "start": "1692210",
    "end": "1698780"
  },
  {
    "text": "nature in a way that we don't knowing what the the private key for the modulus is going to be the resulting decrypt",
    "start": "1698780",
    "end": "1705020"
  },
  {
    "text": "decrypted hash is extremely unlikely to match over here so the one play that we have left is to inject a fault",
    "start": "1705020",
    "end": "1711950"
  },
  {
    "text": "while the decryption function here is running so they become so that the modulus that is actually being used at",
    "start": "1711950",
    "end": "1718160"
  },
  {
    "text": "runtime is one that we can actually factorize and hold the corresponding private key to and then we can actually",
    "start": "1718160",
    "end": "1724850"
  },
  {
    "text": "generate the desire intended hash over here so let's figure out how to inject a",
    "start": "1724850",
    "end": "1730520"
  },
  {
    "text": "fault into the decryption function here well it's",
    "start": "1730520",
    "end": "1737000"
  },
  {
    "text": "all design theory so the devil is usually in all the in the in the details so we'll need to analyze the binary of",
    "start": "1737000",
    "end": "1742460"
  },
  {
    "text": "the trust own code form from where to formulate the attack properly so we download the trust one from where from",
    "start": "1742460",
    "end": "1747740"
  },
  {
    "text": "the vendor's website is assemble it look at that so in this trust own firmware here's an",
    "start": "1747740",
    "end": "1753080"
  },
  {
    "text": "example of the super super root key that we found in here and we know the RS a 2048-bit is actually being used and",
    "start": "1753080",
    "end": "1761590"
  },
  {
    "text": "digging further we found a the the function that decrypt a given signature",
    "start": "1761590",
    "end": "1768320"
  },
  {
    "text": "using like a public modulus and the exponent key so this is a screenshot of",
    "start": "1768320",
    "end": "1773330"
  },
  {
    "text": "the disassemble our function so with a bit of reversing we figure out the exact",
    "start": "1773330",
    "end": "1780409"
  },
  {
    "text": "implementation of the RSA decryption function from the disassembly so for your reference here this is the pseudo",
    "start": "1780409",
    "end": "1786590"
  },
  {
    "text": "code for the function so this is extremely crucial for us to figure out where and how to inject the fall so just",
    "start": "1786590",
    "end": "1794840"
  },
  {
    "start": "1794000",
    "end": "1873000"
  },
  {
    "text": "as a side note edge elastic at that it's like staring at the disassembly aesthetically I found that using code",
    "start": "1794840",
    "end": "1800360"
  },
  {
    "text": "emulation using the anger framework it has been really helpful in testing out the hypothesis of the reverse",
    "start": "1800360",
    "end": "1807039"
  },
  {
    "text": "functionality so kudos to the UCSB team for this really great tool and in",
    "start": "1807039",
    "end": "1812690"
  },
  {
    "text": "addition I've also devised a cool debugging trick that allows me to dynamically instrument the trust own",
    "start": "1812690",
    "end": "1818000"
  },
  {
    "text": "code running on actual phones itself on the phone that I'm actually looking at so this tricks allows me to set up",
    "start": "1818000",
    "end": "1823370"
  },
  {
    "text": "virtual breakpoints and uncover contents of the data structure that is only available at runtime I won't have time",
    "start": "1823370",
    "end": "1829700"
  },
  {
    "text": "to cover this in this talk so hopefully I can cover it next time in a separate talk in future so anyway let's let's dig",
    "start": "1829700",
    "end": "1835519"
  },
  {
    "text": "further into this this function that we have right now are at a high level this",
    "start": "1835519",
    "end": "1841190"
  },
  {
    "text": "function computes the modular exponentiation on the signature given to it so it isn't implemented with an",
    "start": "1841190",
    "end": "1848269"
  },
  {
    "text": "efficient form of multiplication routine called Montgomery",
    "start": "1848269",
    "end": "1854210"
  },
  {
    "text": "can have more information over there and finally it uses a memory intensive function that reverse the memory buffers",
    "start": "1854210",
    "end": "1861409"
  },
  {
    "text": "over here use it into three different spots here and it deals with like the mod this and with the signature and finally",
    "start": "1861409",
    "end": "1868140"
  },
  {
    "text": "with an intermediate value of the decrypted signature so now the first",
    "start": "1868140",
    "end": "1874440"
  },
  {
    "text": "question to ask is where in this function do we inject this runtime form",
    "start": "1874440",
    "end": "1882140"
  },
  {
    "text": "ideally we want to have we want a code section that metals with the given",
    "start": "1882140",
    "end": "1887400"
  },
  {
    "text": "modulus and after some trial and error we found that the function flip and in this is very very susceptible to false",
    "start": "1887400",
    "end": "1894390"
  },
  {
    "text": "furthermore is invocation and lying for is used to reverse the the modulus supplied as an argument so for reference",
    "start": "1894390",
    "end": "1902340"
  },
  {
    "text": "this is zoom up this disassembly and the corresponding pseudo code of the free end in this function by exploring",
    "start": "1902340",
    "end": "1909990"
  },
  {
    "text": "various values of the faulting parameters yeah here is a set of a parameters actually what reliably for us",
    "start": "1909990",
    "end": "1915570"
  },
  {
    "text": "in comparing the compute corrupting the output of with endedness so this is an example of the corrupted",
    "start": "1915570",
    "end": "1922200"
  },
  {
    "text": "modulus that we see in our experiments we can see how one particular byte in",
    "start": "1922200",
    "end": "1927929"
  },
  {
    "text": "this modulus gets corrupted to a value of his a neighboring byte so in to aid",
    "start": "1927929",
    "end": "1933809"
  },
  {
    "text": "in our exploration we created a test bench which allows us to quickly swap out like binaries of functions that we",
    "start": "1933809",
    "end": "1939870"
  },
  {
    "text": "want to test and see where they are they actually are susceptible to false we",
    "start": "1939870",
    "end": "1945299"
  },
  {
    "text": "provide a code that we want to test as a binary block to this test bench so for a demo in a source code for the test bench",
    "start": "1945299",
    "end": "1951299"
  },
  {
    "text": "please refer to this link probably won't have time to actually show this demo and then the next step next issue that we",
    "start": "1951299",
    "end": "1958950"
  },
  {
    "text": "want to tackle is this we actually craft the attacks in nature that we want given that we really know what the description",
    "start": "1958950",
    "end": "1966240"
  },
  {
    "text": "function is gonna be so it turns out to be trickier than we expected before we",
    "start": "1966240",
    "end": "1973830"
  },
  {
    "start": "1969000",
    "end": "2123000"
  },
  {
    "text": "started we have this general idea what we want to do but again looking at the implementation is a little bit more",
    "start": "1973830",
    "end": "1980100"
  },
  {
    "text": "tricky so the biggest problem actually lies in line three and four so if you",
    "start": "1980100",
    "end": "1985470"
  },
  {
    "text": "look at line three and four we see how the original modulus and gets corrupted to the new end at line four and",
    "start": "1985470",
    "end": "1991919"
  },
  {
    "text": "previously at line three the original end is still being used by line three and strictly because if we",
    "start": "1991919",
    "end": "2000200"
  },
  {
    "text": "fast forward to line 15 the Montgomery multiplication function over here uses",
    "start": "2000200",
    "end": "2006799"
  },
  {
    "text": "both the original and the original n and",
    "start": "2006799",
    "end": "2011929"
  },
  {
    "text": "the corrupted end over here so this gets really really tricky over here and we",
    "start": "2011929",
    "end": "2017450"
  },
  {
    "text": "formulated a technique to solve this allowing us to generate a n attacks in Asia given both the moduli so I want to",
    "start": "2017450",
    "end": "2024529"
  },
  {
    "text": "talk about this here please refer to the white paper and the Python script that I have to generate this attacks in nature",
    "start": "2024529",
    "end": "2032380"
  },
  {
    "text": "so now that we know what to attack and how to attack we need to figure out when",
    "start": "2032769",
    "end": "2037970"
  },
  {
    "text": "to inject the fault so by reversing the transform from where we know that the decrypted decrypt signature function is",
    "start": "2037970",
    "end": "2045440"
  },
  {
    "text": "actually involved for times when verifying an application binary we can attack any one of those indications so",
    "start": "2045440",
    "end": "2052339"
  },
  {
    "text": "we pick the forth invocation for our attack so to profile the the trans own code from outside resume we exploit a",
    "start": "2052339",
    "end": "2058908"
  },
  {
    "text": "design issue in there where the memory accesses from outside resume can actually evict or remove the the cache",
    "start": "2058909",
    "end": "2067040"
  },
  {
    "text": "lines used by trans own so this opens up a range of site channel based profiling attacks and we rely on the cache based",
    "start": "2067040",
    "end": "2073638"
  },
  {
    "text": "ones over here we found that by doing a prime and probe profiling on instruction",
    "start": "2073639",
    "end": "2079760"
  },
  {
    "text": "caches is more reliable than data caches we won't describe the the side channel based profiling attacked on the arm here",
    "start": "2079760",
    "end": "2086628"
  },
  {
    "text": "are some of the references to them so it turns out the eye cache profiling it's not as convenient as data cache",
    "start": "2086629",
    "end": "2093040"
  },
  {
    "text": "profiling because instead of using memory read operations we actually need to execute execute the instructions and",
    "start": "2093040",
    "end": "2099560"
  },
  {
    "text": "the memory addresses that are congruent to the the cache set that we are monitoring so we created a JIT compiler",
    "start": "2099560",
    "end": "2107660"
  },
  {
    "text": "a JIT compiler such that given a list of cache that you want to monitor you would allocate a skew a block of executed",
    "start": "2107660",
    "end": "2114380"
  },
  {
    "text": "memory and then we put in like the branch instruction in there and then change all the relative branch instructions together that is congruent",
    "start": "2114380",
    "end": "2121099"
  },
  {
    "text": "to the monitor set so here's a sketch of how we do the the whole eye cache",
    "start": "2121099",
    "end": "2127730"
  },
  {
    "start": "2123000",
    "end": "2183000"
  },
  {
    "text": "profiling we have a target victim that victim code that we want to try",
    "start": "2127730",
    "end": "2133850"
  },
  {
    "text": "to monitor for we try to pick a couple of core areas just before that and we monitor for the I cache eviction for",
    "start": "2133850",
    "end": "2140570"
  },
  {
    "text": "this cache set simultaneously we in our experiment in our text we actually monitor for four sets cache sets at the",
    "start": "2140570",
    "end": "2146690"
  },
  {
    "text": "same time say you have e which is the event when all this cache set is filed",
    "start": "2146690",
    "end": "2152120"
  },
  {
    "text": "to be evicted and then you want to track the next you track the next time that II actually happens we do that using like",
    "start": "2152120",
    "end": "2158630"
  },
  {
    "text": "incremental incrementing counters as a high precision timer you track the duration between the consecutive es so",
    "start": "2158630",
    "end": "2165260"
  },
  {
    "text": "we call this duration between consecutive cache eviction events G so",
    "start": "2165260",
    "end": "2170480"
  },
  {
    "text": "with this time series G I'm going to show over here is this is actually a very nice fine green proxy of the trans",
    "start": "2170480",
    "end": "2177410"
  },
  {
    "text": "own code execution that we can use to analyze or profile TransAm code so to",
    "start": "2177410",
    "end": "2183950"
  },
  {
    "start": "2183000",
    "end": "2216000"
  },
  {
    "text": "look for a timing anchor for our fault injection let's see how useful this feature this time series G is so on the",
    "start": "2183950",
    "end": "2190820"
  },
  {
    "text": "y axis we plot the G interval while the x axis is the time the general time",
    "start": "2190820",
    "end": "2197690"
  },
  {
    "text": "series pattern of G is similar whenever trustzone is in the process of validating the forth our signature so we",
    "start": "2197690",
    "end": "2204920"
  },
  {
    "text": "exploit this pattern to create additional features that we can use to fine tune our timing anchor so these are",
    "start": "2204920",
    "end": "2211820"
  },
  {
    "text": "the main handcrafted features we use based on the time series G now to track",
    "start": "2211820",
    "end": "2217910"
  },
  {
    "start": "2216000",
    "end": "2245000"
  },
  {
    "text": "a fault we track the fault success as when our target and modulus buffer is",
    "start": "2217910",
    "end": "2224000"
  },
  {
    "text": "actually corrupted here we see both features are above features that we have product as a scatterplot so you have to",
    "start": "2224000",
    "end": "2230570"
  },
  {
    "text": "cache the first feature or as the y axis and then the second feature as x axis see therefore both features are",
    "start": "2230570",
    "end": "2236870"
  },
  {
    "text": "indicated of the for success rate you kind of see this like a downward sloping",
    "start": "2236870",
    "end": "2242770"
  },
  {
    "text": "relationship over here but this feature is alone actually not enough so you look",
    "start": "2242770",
    "end": "2248210"
  },
  {
    "start": "2245000",
    "end": "2304000"
  },
  {
    "text": "at this scatter plot over here this scatter plot actually plots on the y",
    "start": "2248210",
    "end": "2253340"
  },
  {
    "text": "axis it plots the position of where which part of the buffer is actually",
    "start": "2253340",
    "end": "2258440"
  },
  {
    "text": "being corrupted and the x axis is how much time do we wait before we actually inject this thing in there so ideally",
    "start": "2258440",
    "end": "2265250"
  },
  {
    "text": "you want to see like a straight line but is definitely not as over here there's a lot of variability it's tough to pinpoint the the fault",
    "start": "2265250",
    "end": "2272720"
  },
  {
    "text": "injection to a particular thing so if you look at that if we use a fixed value",
    "start": "2272720",
    "end": "2279740"
  },
  {
    "text": "of the number of delays before we inject the fault it actually corrupts a wide range of a",
    "start": "2279740",
    "end": "2287480"
  },
  {
    "text": "wide range of the positions within the actual buffer itself so it's very tough for us to actually pinpoint which buffer",
    "start": "2287480",
    "end": "2294080"
  },
  {
    "text": "which position within the buffer we want to corrupt so this is actually problematic for all attack because then we won't be able to reliably reliably",
    "start": "2294080",
    "end": "2300860"
  },
  {
    "text": "predict what the values are going to be so the idea that we have is this instead",
    "start": "2300860",
    "end": "2306380"
  },
  {
    "start": "2304000",
    "end": "2322000"
  },
  {
    "text": "of using a fixed delay before the the fault injection we need to somehow devise an adaptive delay that we can use",
    "start": "2306380",
    "end": "2315040"
  },
  {
    "text": "based on runtime conditions to target the specific positions that we want in",
    "start": "2315040",
    "end": "2320450"
  },
  {
    "text": "in the modulus so this is the final piece to our attack so this is we use",
    "start": "2320450",
    "end": "2326870"
  },
  {
    "text": "the linear regression models to based by collect a bunch of empirical",
    "start": "2326870",
    "end": "2332260"
  },
  {
    "text": "observations and we found that including additional features like temperature are and they actually help to increase like",
    "start": "2332260",
    "end": "2339740"
  },
  {
    "text": "the accuracy of our models so now with this models we can then adjust our the",
    "start": "2339740",
    "end": "2346250"
  },
  {
    "text": "delay that we need to time the thing and target a specific positions within the",
    "start": "2346250",
    "end": "2351500"
  },
  {
    "text": "modulus buffer given several runtime conditions and how accurate is that so",
    "start": "2351500",
    "end": "2358310"
  },
  {
    "text": "we see that this is a histogram of the frequency of the fault across where in the the buffer is",
    "start": "2358310",
    "end": "2364550"
  },
  {
    "text": "actually corrupted so the x-axis here she shows where in the buffer the buffer",
    "start": "2364550",
    "end": "2369680"
  },
  {
    "text": "is about 256 bytes and where in the buffer he actually gets corrupted more",
    "start": "2369680",
    "end": "2375560"
  },
  {
    "text": "so we want to try to target somewhere in between the buffer so now we can see it's kind of like this a normal",
    "start": "2375560",
    "end": "2381980"
  },
  {
    "text": "distribution of the thing so some statistics on that for 20 roughly about",
    "start": "2381980",
    "end": "2387770"
  },
  {
    "text": "20 percent of the faulting attempts that we want results in a successful desire for in in the buffer that we want so",
    "start": "2387770",
    "end": "2395270"
  },
  {
    "text": "this false actually consists of roughly about 805 unique values of which about 5",
    "start": "2395270",
    "end": "2402069"
  },
  {
    "text": "factorizable and one instance of the desired form we tried out in roughly",
    "start": "2402069",
    "end": "2407809"
  },
  {
    "text": "about 65 folding attempts one of the actually result in the fault everyone and we actually managed to get the app",
    "start": "2407809",
    "end": "2413300"
  },
  {
    "text": "to load in there so I'm going to briefly summarize like all the different attack",
    "start": "2413300",
    "end": "2419059"
  },
  {
    "start": "2415000",
    "end": "2449000"
  },
  {
    "text": "and nibblers that allows us to pull up this attack so this is a summary list of",
    "start": "2419059",
    "end": "2425329"
  },
  {
    "text": "that so the main thing is it summarizes like most of the designs issues that we find on the architectural design of",
    "start": "2425329",
    "end": "2431599"
  },
  {
    "text": "energy management mechanisms on the systems these days one of the biggest issues is the fact that it's not just",
    "start": "2431599",
    "end": "2440240"
  },
  {
    "text": "one specific design issue and the thing is actually a combination of that that",
    "start": "2440240",
    "end": "2446119"
  },
  {
    "text": "allows us to pull off all these different attacks here so now I want to try to cut I'll have some completing",
    "start": "2446119",
    "end": "2451880"
  },
  {
    "start": "2449000",
    "end": "2510000"
  },
  {
    "text": "remarks for this so we know that the the industry is deafening training to its final green and increasingly",
    "start": "2451880",
    "end": "2457510"
  },
  {
    "text": "heterogeneous design so as a result we're gonna see more and more designs giving a software more control over the",
    "start": "2457510",
    "end": "2464089"
  },
  {
    "text": "energy management so we probably see this on 64 64-bit ARM architecture and newer in Intel processes or even on some",
    "start": "2464089",
    "end": "2471650"
  },
  {
    "text": "of the cloud computing providers they are giving VM gets more control over power management so thinking about the",
    "start": "2471650",
    "end": "2477859"
  },
  {
    "text": "security ramification of all these different designs definitely require so",
    "start": "2477859",
    "end": "2483470"
  },
  {
    "text": "they're possible defenses both on the hardware and software level but one thing is is is clear is that there is",
    "start": "2483470",
    "end": "2490010"
  },
  {
    "text": "actually no clear defense that we can use they can entirely prevent clocks proof style of attacks because many of",
    "start": "2490010",
    "end": "2496280"
  },
  {
    "text": "the design decisions like that contribute to the possibility of this attack they're in fact driven by real",
    "start": "2496280",
    "end": "2502220"
  },
  {
    "text": "practical engineering concerns and a lot of food systems most probably like a full system response is needed for an",
    "start": "2502220",
    "end": "2508730"
  },
  {
    "text": "effective defense so the roundup to talk I'll briefly highlight some of the key takeaways from this work we discover new",
    "start": "2508730",
    "end": "2515930"
  },
  {
    "start": "2510000",
    "end": "2807000"
  },
  {
    "text": "class of attack vectors mainly enabled by the software interfaces of energy",
    "start": "2515930",
    "end": "2521390"
  },
  {
    "text": "management mechanisms and we show that you can actually be used and exploited by attackers to attack trust execution",
    "start": "2521390",
    "end": "2527690"
  },
  {
    "text": "environment and ultimately this is not a hardware software bug it results from the fundamental design flaws of the end",
    "start": "2527690",
    "end": "2534410"
  },
  {
    "text": "management mechanisms as such the future energy management designs must take",
    "start": "2534410",
    "end": "2539630"
  },
  {
    "text": "security into consideration especially in the context of the use of how enforce isolation so this is some of the links",
    "start": "2539630",
    "end": "2548030"
  },
  {
    "text": "that I have the made available this is related to clocks group and with that",
    "start": "2548030",
    "end": "2554869"
  },
  {
    "text": "I'm happy to take questions",
    "start": "2554869",
    "end": "2558279"
  },
  {
    "text": "hello thank you for this talk would it be possible to protect for this kind of",
    "start": "2569450",
    "end": "2575670"
  },
  {
    "text": "attacks by protecting on restricting access to the registers that control",
    "start": "2575670",
    "end": "2581040"
  },
  {
    "text": "frequency and voltage how that was done this are going to develop controls and",
    "start": "2581040",
    "end": "2587339"
  },
  {
    "text": "control mechanism ago requests for but it wasn't software this is definitely",
    "start": "2587339",
    "end": "2593609"
  },
  {
    "text": "possible this is actually one of the possible approach in trying to solve this thing that is but the key thing is",
    "start": "2593609",
    "end": "2598680"
  },
  {
    "text": "you need to make sure that the enforcement is actually done at the transform level and actually not from outside trust so that way the transom",
    "start": "2598680",
    "end": "2604680"
  },
  {
    "text": "can actually put better protect yourself because you put it outside and that's gonna be a problem but of course there's",
    "start": "2604680",
    "end": "2610079"
  },
  {
    "text": "a lot of implication in terms of like the overhead their model overhead that you're gonna be you don't have to expect",
    "start": "2610079",
    "end": "2615089"
  },
  {
    "text": "when could this kind of enforcement logic in there as far as I understand",
    "start": "2615089",
    "end": "2625880"
  },
  {
    "text": "the the victim is executing in the tread zone and those target is in the torrid",
    "start": "2625880",
    "end": "2631140"
  },
  {
    "text": "zone and the attacker is in the normal world so it means that it's possible to have one core working on the treads own",
    "start": "2631140",
    "end": "2637380"
  },
  {
    "text": "and the other car walking in the normal world and working in parallel yes that is possible ok that is why the attack works ok and",
    "start": "2637380",
    "end": "2645059"
  },
  {
    "text": "the other question is you talked about Hardware cycle contours accessible from",
    "start": "2645059",
    "end": "2650220"
  },
  {
    "text": "number world that allows to monitor the secure world could you elaborate on that how is it accessible well what is it",
    "start": "2650220",
    "end": "2657390"
  },
  {
    "text": "sure so on arm there's actually a specific registers that you can actually set that enable the use of Hardware",
    "start": "2657390",
    "end": "2663540"
  },
  {
    "text": "cycle counters even for code that is running within trans own so for example",
    "start": "2663540",
    "end": "2669059"
  },
  {
    "text": "from the normal world what you can do is you can go to this register and you set enable then what happens is that you can",
    "start": "2669059",
    "end": "2675720"
  },
  {
    "text": "enable this cycle counter invoked raz√≥n to do some kind of code that you want and then when it returns to the normal",
    "start": "2675720",
    "end": "2682859"
  },
  {
    "text": "rule you track how much the value of this cycle count actually changes then this value here would be how long that",
    "start": "2682859",
    "end": "2690420"
  },
  {
    "text": "resumed code actually takes to run so this is what I meant by that and arm design actually allows you to do this at",
    "start": "2690420",
    "end": "2697200"
  },
  {
    "text": "least for the 32-bit size it is a documented feature they call a",
    "start": "2697200",
    "end": "2702400"
  },
  {
    "text": "secure debug so but you actually have to you actually have to I can't ever what he's enable or disable it but you look",
    "start": "2702400",
    "end": "2709660"
  },
  {
    "text": "at that one yeah I've just got a quick",
    "start": "2709660",
    "end": "2719650"
  },
  {
    "text": "question how long did it take you to assemble these sophisticated attack to get it running and leak data out of",
    "start": "2719650",
    "end": "2724930"
  },
  {
    "text": "trustzone well I think the whole I started working on this last year but I",
    "start": "2724930",
    "end": "2732670"
  },
  {
    "text": "finished everything roughly around if we didn't one year's time the exploration",
    "start": "2732670",
    "end": "2738220"
  },
  {
    "text": "of the one part of that is actually trying to explore how the actual interfaces actually work trying to reverse engineer the memory map thing",
    "start": "2738220",
    "end": "2744400"
  },
  {
    "text": "that probably took me about a month the bulk of it is actually the reverse engineering of the actual firmware to",
    "start": "2744400",
    "end": "2750790"
  },
  {
    "text": "figure out exactly where we want to do the fault injection how we want to do the fault injection and then there's a",
    "start": "2750790",
    "end": "2756460"
  },
  {
    "text": "bunch of different ricky stuff that we actually have to solve then as you think happen in this specific talk so I would",
    "start": "2756460",
    "end": "2762099"
  },
  {
    "text": "say it takes roughly about what one year to pull off two attacks on this trust",
    "start": "2762099",
    "end": "2767260"
  },
  {
    "text": "own thing yep that's why I wanted to actually share that well the key thing is actually not just not the attack it's",
    "start": "2767260",
    "end": "2772990"
  },
  {
    "text": "more like they're on the architectural design issues there whether it's very critical to the security of the phones",
    "start": "2772990",
    "end": "2778060"
  },
  {
    "text": "that we have these days and it's something that no one has actually looked at especially the endangering management side of things Thanks typical",
    "start": "2778060",
    "end": "2789070"
  },
  {
    "text": "work I I actually I really agree with something you just said that for me the",
    "start": "2789070",
    "end": "2794380"
  },
  {
    "text": "interesting part is not that you could build the really complicated injector whatever it's that the design is set up",
    "start": "2794380",
    "end": "2801010"
  },
  {
    "text": "so that this is possible and the moment you realize this like you can see that there's six months work to implement it",
    "start": "2801010",
    "end": "2806589"
  },
  {
    "text": "but it's gonna work so I'm curious when you were doing your vendor disclosures right can you just disclose to them look we",
    "start": "2806589",
    "end": "2813880"
  },
  {
    "start": "2807000",
    "end": "2854000"
  },
  {
    "text": "could do this well did you have to did you have to spend six months building an attack to prove to them that it would",
    "start": "2813880",
    "end": "2819700"
  },
  {
    "text": "work well you don't have to this varies from like different kind of vendors",
    "start": "2819700",
    "end": "2824890"
  },
  {
    "text": "right based on the vendors that we actually talk to they were actually very receptive you do have to show some kind",
    "start": "2824890",
    "end": "2829900"
  },
  {
    "text": "of proof of concept it doesn't have to be an to end proof of concept but you have to show that you know you can actually pull",
    "start": "2829900",
    "end": "2836289"
  },
  {
    "text": "off corrupting the some kind of data computation or some kind of control flow influence from outside resume within",
    "start": "2836289",
    "end": "2843849"
  },
  {
    "text": "transition itself so you do actually have to show some level of the attack ability but not a full thing like the",
    "start": "2843849",
    "end": "2850509"
  },
  {
    "text": "RSA is a sure thing yeah yeah I was wondering if you start maybe",
    "start": "2850509",
    "end": "2857049"
  },
  {
    "start": "2854000",
    "end": "2902000"
  },
  {
    "text": "look into Intel SGX and yeah so oh",
    "start": "2857049",
    "end": "2865179"
  },
  {
    "text": "actually I looked into Intel before and I felt like a whole bunch of undocumented thing in there where you",
    "start": "2865179",
    "end": "2871149"
  },
  {
    "text": "can actually model you can do like all the other power management stuff on Intel so why not SPX but on the security",
    "start": "2871149",
    "end": "2877089"
  },
  {
    "text": "no more like the node there's really no reason why that is not possible because this is more like an architectural thing",
    "start": "2877089",
    "end": "2884319"
  },
  {
    "text": "rather than an actual micro architectural thing so yeah I have",
    "start": "2884319",
    "end": "2889599"
  },
  {
    "text": "actually never really go all the way down and tried to pull all the thing but I'm sure someone over here would be able",
    "start": "2889599",
    "end": "2894909"
  },
  {
    "text": "to do that",
    "start": "2894909",
    "end": "2897328"
  },
  {
    "start": "2902000",
    "end": "3001000"
  },
  {
    "text": "yes so I have a question regarding the RSA attack so as I understood it your",
    "start": "2902410",
    "end": "2909880"
  },
  {
    "text": "attack made it possible so that the this the signature of your modified software",
    "start": "2909880",
    "end": "2920230"
  },
  {
    "text": "would actually match the signature of the original software in the signature",
    "start": "2920230",
    "end": "2927130"
  },
  {
    "text": "verification oh it did yes yes the output of the signature and signature",
    "start": "2927130",
    "end": "2932200"
  },
  {
    "text": "verification after you glitch it at one time yeah yeah so what's the RSA key",
    "start": "2932200",
    "end": "2938440"
  },
  {
    "text": "sighs on on Android is it 2048 bits so",
    "start": "2938440",
    "end": "2944110"
  },
  {
    "text": "it's a 512 byte result that you need to match them so and your attack makes it",
    "start": "2944110",
    "end": "2954010"
  },
  {
    "text": "possible to get incorrect results so you need to have a 512 byte buffer that that",
    "start": "2954010",
    "end": "2963820"
  },
  {
    "text": "you randomly affect to get the expected value so how long did it take you what",
    "start": "2963820",
    "end": "2971320"
  },
  {
    "text": "when you run the attack how long would it take before you actually find that",
    "start": "2971320",
    "end": "2976390"
  },
  {
    "text": "expected value yeah so when we started it took a really long time that's why",
    "start": "2976390",
    "end": "2981520"
  },
  {
    "text": "most of our efforts is based on trying to fine tune this thing like using the linear regression model and trying to do",
    "start": "2981520",
    "end": "2987160"
  },
  {
    "text": "all of that it took for example with the linear regression model it probably",
    "start": "2987160",
    "end": "2992530"
  },
  {
    "text": "gonna take if you have a scoop that is actually running it's probably gonna take maybe one or two days given the",
    "start": "2992530",
    "end": "2997690"
  },
  {
    "text": "number of attempts that you have over there okay so maybe I'm missing something because",
    "start": "2997690",
    "end": "3004260"
  },
  {
    "start": "3001000",
    "end": "3267000"
  },
  {
    "text": "one or two days you know to generate a 512 byte buffer that that's quick yeah",
    "start": "3004260",
    "end": "3010560"
  },
  {
    "text": "it's not trying to generate a B right yeah but you're trying to pinpoint the corruption of a specific position within",
    "start": "3010560",
    "end": "3017970"
  },
  {
    "text": "the entire buffer so you're not doing like randomly on all the different kind of position you want to try to pinpoint",
    "start": "3017970",
    "end": "3024000"
  },
  {
    "text": "that on a specific part of that and the interesting thing is the the values",
    "start": "3024000",
    "end": "3031920"
  },
  {
    "text": "they're actually being corrupted it's not exactly random because actually if you look at one of",
    "start": "3031920",
    "end": "3037710"
  },
  {
    "text": "the examples that I showed earlier a lot of times it takes on the neighboring bytes of their the positions that's why",
    "start": "3037710",
    "end": "3044070"
  },
  {
    "text": "we can a priority kind of predict based on the byte position that is gonna be corrupted what the value of the",
    "start": "3044070",
    "end": "3050849"
  },
  {
    "text": "corrupted part is gonna be okay yeah so that's why it's not exactly random is it",
    "start": "3050849",
    "end": "3057750"
  },
  {
    "text": "does it answer your question Hey yeah I think so okay so we could take it offline anyway discuss more about that",
    "start": "3057750",
    "end": "3063090"
  },
  {
    "text": "thank you",
    "start": "3063090",
    "end": "3065599"
  },
  {
    "text": "so you mentioned that in order for these types of attacks to work you the values that you set for frequency and voltage",
    "start": "3073040",
    "end": "3079220"
  },
  {
    "text": "need to be significantly outside of vendor specifications what mechanisms",
    "start": "3079220",
    "end": "3085130"
  },
  {
    "text": "control the values that you can actually set are they controlled by the driver",
    "start": "3085130",
    "end": "3090730"
  },
  {
    "text": "yeah so currently on the the phones that we have today they are all being",
    "start": "3090730",
    "end": "3098300"
  },
  {
    "text": "controlled by a device driver that the vendor would actually provide so right",
    "start": "3098300",
    "end": "3108530"
  },
  {
    "text": "now on the phones that we have the enforcement logic or rather the the protection logic is all implemented",
    "start": "3108530",
    "end": "3113780"
  },
  {
    "text": "within the device driver but the device driver is running outside raz√≥n so now",
    "start": "3113780",
    "end": "3120140"
  },
  {
    "text": "what we're trying to do is ready it attack something that is within transition itself and the interesting",
    "start": "3120140",
    "end": "3125270"
  },
  {
    "text": "thing is any kind of stuff any kind of frequency of voltage that you affect outside for zone also affects was building trust on yourself that's what",
    "start": "3125270",
    "end": "3131630"
  },
  {
    "text": "is that tags possible yeah are you familiar with any work is it possible to",
    "start": "3131630",
    "end": "3138020"
  },
  {
    "text": "implement some sort of Hardware protections that just the hardware will not let you go outside specific",
    "start": "3138020",
    "end": "3146030"
  },
  {
    "text": "boundaries for these values oh yeah there are I think they're ongoing was they actually look at trying to put some",
    "start": "3146030",
    "end": "3152150"
  },
  {
    "text": "kind of enforcement logic within the actual hardware itself the reason why is not being I would speculate I'm not",
    "start": "3152150",
    "end": "3159110"
  },
  {
    "text": "really that sure like what the what the thing would be but I was speculate that it's actually extremely hard to put some",
    "start": "3159110",
    "end": "3165050"
  },
  {
    "text": "kind of enforcement logic within the hardware at this point in time because",
    "start": "3165050",
    "end": "3170540"
  },
  {
    "text": "if you look at the production process itself in order for you to put like the front of the enforcement logic you need to know what are the ranges of the",
    "start": "3170540",
    "end": "3177590"
  },
  {
    "text": "frequency in the voltage and any enforcement actually have to take into account both the frequency and voltage",
    "start": "3177590",
    "end": "3182810"
  },
  {
    "text": "so if you just look at the if you just enforce the limits of frequency itself or voltage itself is not gonna work",
    "start": "3182810",
    "end": "3189470"
  },
  {
    "text": "because if you look at the graph over there what you could do is you can pull down the voltage and the amount of the",
    "start": "3189470",
    "end": "3194720"
  },
  {
    "text": "the amount of frequency that you have to exceed is actually much lower than right so that's one another one is you need to",
    "start": "3194720",
    "end": "3201230"
  },
  {
    "text": "run a lot of extensive tests or to get limits that you need to protect this the",
    "start": "3201230",
    "end": "3208680"
  },
  {
    "text": "frequency in voltage but this kind of limits are usually only done when the",
    "start": "3208680",
    "end": "3214859"
  },
  {
    "text": "device has finished production so it's like a post manufacturing thing then you test it and you get the values now if",
    "start": "3214859",
    "end": "3220829"
  },
  {
    "text": "you say it's like a chicken-and-egg problem right so how do you put this values into the hardware at the design",
    "start": "3220829",
    "end": "3226950"
  },
  {
    "text": "phase as well so this are some of the issues that actually has to be mapped out or solved in order to save the solve",
    "start": "3226950",
    "end": "3234359"
  },
  {
    "text": "this button specific problem thank you so much",
    "start": "3234359",
    "end": "3238819"
  },
  {
    "text": "well if there are no further questions thank you so much for attending the talk today I'll be around if you want to talk",
    "start": "3251470",
    "end": "3258760"
  },
  {
    "text": "to me offline or you think of any questions just shoot me an email all right thank you so much",
    "start": "3258760",
    "end": "3264040"
  },
  {
    "text": "[Applause]",
    "start": "3264040",
    "end": "3269389"
  }
]