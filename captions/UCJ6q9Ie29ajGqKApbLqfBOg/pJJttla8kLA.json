[
  {
    "text": "[Music]",
    "start": "1180",
    "end": "15180"
  },
  {
    "text": "hello everyone welcome to my presentation my topic today is related to operating",
    "start": "16640",
    "end": "22320"
  },
  {
    "text": "system kernel memory access mapping parsing and risk condition issues the title is",
    "start": "22320",
    "end": "30080"
  },
  {
    "text": "reaching the dark a new talk to a story from apple's call",
    "start": "30080",
    "end": "35520"
  },
  {
    "text": "talk tall is short for time of check to time of use it's kind of risk condition issue",
    "start": "35520",
    "end": "45160"
  },
  {
    "text": "my name is i can be reached through this email address",
    "start": "45360",
    "end": "50960"
  },
  {
    "text": "this research is a third kernel security research project i made public in 2020",
    "start": "50960",
    "end": "57520"
  },
  {
    "text": "the first two projects are related to the bluetooth and the wi-fi subsystems",
    "start": "57520",
    "end": "63760"
  },
  {
    "text": "of mac os and ios today's content can be divided into four",
    "start": "63760",
    "end": "70840"
  },
  {
    "text": "parts background knowledge and the tactile vulnerability project chemo",
    "start": "70840",
    "end": "77680"
  },
  {
    "text": "kernel vulnerability case studies and the end in the first part of the presentation",
    "start": "77680",
    "end": "84000"
  },
  {
    "text": "we will focus on the background knowledge of user mode memory access and the kernel risk condition",
    "start": "84000",
    "end": "90159"
  },
  {
    "text": "vulnerability so let's start when developing operating system kernels",
    "start": "90159",
    "end": "97840"
  },
  {
    "text": "and drivers functions related to user data mapping accessing parsing are",
    "start": "97840",
    "end": "104799"
  },
  {
    "text": "often found vulnerable in order to solve this type of problem",
    "start": "104799",
    "end": "110240"
  },
  {
    "text": "almost every system defines standard operating rules when touching",
    "start": "110240",
    "end": "116000"
  },
  {
    "text": "our trusted user input in this section i will list the user mode memory access",
    "start": "116000",
    "end": "122960"
  },
  {
    "text": "message of android linux windows and mac os ios platforms",
    "start": "122960",
    "end": "129440"
  },
  {
    "text": "as well as some real world vulnerability cases so let's start one by one case by case",
    "start": "129440",
    "end": "136480"
  },
  {
    "text": "from easy to hard the first platform is android linux",
    "start": "136480",
    "end": "143680"
  },
  {
    "text": "in my opinion the linux kernel api document is worth reading",
    "start": "143680",
    "end": "150080"
  },
  {
    "text": "the first capital of the document is named memory management in linux in",
    "start": "150080",
    "end": "156560"
  },
  {
    "text": "which user space memory access describes in detail the api set that should be",
    "start": "156560",
    "end": "163599"
  },
  {
    "text": "used when accessing untrusted memory for example the well-known functions",
    "start": "163599",
    "end": "170640"
  },
  {
    "text": "copy from user and copy to user their explanations can be found in the",
    "start": "170640",
    "end": "177680"
  },
  {
    "text": "links below if this if this rules are violated when",
    "start": "177680",
    "end": "183920"
  },
  {
    "text": "accessing user data the vulnerable function will at least introduce a local privilege escalation",
    "start": "183920",
    "end": "191840"
  },
  {
    "text": "vulnerability into the kernel the simplest but the real cases real",
    "start": "191840",
    "end": "199680"
  },
  {
    "text": "case is as follows i found this vulnerability when i was",
    "start": "199680",
    "end": "205519"
  },
  {
    "text": "working on mobile security research seven years ago we can still find the leaked source code",
    "start": "205519",
    "end": "211840"
  },
  {
    "text": "on github this vulnerability is located in the media tag sd card driver",
    "start": "211840",
    "end": "219440"
  },
  {
    "text": "due to lack of restrictions user mode processes can open and operate",
    "start": "219440",
    "end": "225760"
  },
  {
    "text": "this driver through auditing the leaked source code",
    "start": "225760",
    "end": "232000"
  },
  {
    "text": "we can find that almost every io control handler of the driver has problems",
    "start": "232000",
    "end": "238560"
  },
  {
    "text": "for example in line 9 94 the function copy from user mistakenly",
    "start": "238560",
    "end": "245760"
  },
  {
    "text": "trust trust trusted the length of input the size of the buffer on the local",
    "start": "245760",
    "end": "252720"
  },
  {
    "text": "stack is only 25 bytes and such a copy means that stack based buffer floor",
    "start": "252720",
    "end": "259519"
  },
  {
    "text": "in general this vulnerability gives you a chance to be",
    "start": "259519",
    "end": "265680"
  },
  {
    "text": "guard of course all of this is based on the fact that",
    "start": "265680",
    "end": "271759"
  },
  {
    "text": "seven years ago there was basically no mitigation mechanism for mobile phones",
    "start": "271759",
    "end": "278960"
  },
  {
    "text": "but this simple exploit took me a lot of time at first",
    "start": "280000",
    "end": "285600"
  },
  {
    "text": "i found that no matter what i tried i could only get my phone restarted",
    "start": "285600",
    "end": "292560"
  },
  {
    "text": "so i had to re-exam the last written instruction of the",
    "start": "292560",
    "end": "298240"
  },
  {
    "text": "vulnerable function without the help of kernel debugger i guess the one by one about the",
    "start": "298240",
    "end": "305520"
  },
  {
    "text": "possibility of overwriting the registers",
    "start": "305520",
    "end": "310639"
  },
  {
    "text": "destroying the blue register like r4 or r5 may cause the call function caller",
    "start": "310639",
    "end": "317120"
  },
  {
    "text": "function to crash because the value in this register may",
    "start": "317120",
    "end": "322320"
  },
  {
    "text": "be the base address of an object for example and we cannot just",
    "start": "322320",
    "end": "329120"
  },
  {
    "text": "rewrite it this drawing the green pc register means",
    "start": "329120",
    "end": "334320"
  },
  {
    "text": "we need to figure out where to put the shell code the good news is that security features",
    "start": "334320",
    "end": "341680"
  },
  {
    "text": "such as pxen were basically not enabled on mobile phones in",
    "start": "341680",
    "end": "347520"
  },
  {
    "text": "2018 with the deepening of the analysis i",
    "start": "347520",
    "end": "353600"
  },
  {
    "text": "found that the red sp register is a key to the",
    "start": "353600",
    "end": "358720"
  },
  {
    "text": "problem i broke the sp address before handling the return address",
    "start": "358720",
    "end": "366000"
  },
  {
    "text": "so so why why is the sp register so critical",
    "start": "366000",
    "end": "371680"
  },
  {
    "text": "the answer is related to current threat in order to improve speed",
    "start": "372880",
    "end": "378720"
  },
  {
    "text": "each operating system uses the simplest method to locate the current threat",
    "start": "378720",
    "end": "384240"
  },
  {
    "text": "structure for example the windows kernel determines current thread based on the",
    "start": "384240",
    "end": "390000"
  },
  {
    "text": "fixed offset of the fs register while in the linux kernel version 2.6",
    "start": "390000",
    "end": "397360"
  },
  {
    "text": "current thread is located with the help of the sp register",
    "start": "397360",
    "end": "402720"
  },
  {
    "text": "therefore once the stack overflow crops the sp register",
    "start": "402720",
    "end": "409280"
  },
  {
    "text": "it will cause serious problems during context switching",
    "start": "409280",
    "end": "414880"
  },
  {
    "text": "that's why i have to turn off interrupts in the shell code first",
    "start": "414880",
    "end": "423159"
  },
  {
    "text": "the next question is where we should return",
    "start": "423759",
    "end": "429120"
  },
  {
    "text": "where we should return to after the shell code is executed the problem is not difficult for us i",
    "start": "429120",
    "end": "435919"
  },
  {
    "text": "think we need to search the code segment find the return address of the br",
    "start": "435919",
    "end": "442400"
  },
  {
    "text": "instruction and then redirect the execution flow to",
    "start": "442400",
    "end": "447759"
  },
  {
    "text": "of the exploit to that location in this way our code can be executed stably",
    "start": "447759",
    "end": "457440"
  },
  {
    "text": "the following figure shows the complete process of vulnerability exploitation",
    "start": "458479",
    "end": "464720"
  },
  {
    "text": "first of all we need to select the appropriate value of r4 r5 and other",
    "start": "464720",
    "end": "471039"
  },
  {
    "text": "registers and select the appropriate address to place shellcode",
    "start": "471039",
    "end": "477280"
  },
  {
    "text": "once the shell code is executed we need to turn off system interrupts at the",
    "start": "477280",
    "end": "482879"
  },
  {
    "text": "first time and then search the double linked process list to",
    "start": "482879",
    "end": "488319"
  },
  {
    "text": "find our own task structure by locating the correct sp offset",
    "start": "488319",
    "end": "495360"
  },
  {
    "text": "through signature search for example we can restore the sp register",
    "start": "495360",
    "end": "501919"
  },
  {
    "text": "then we can re-enable the interruption and complete the process of",
    "start": "501919",
    "end": "508240"
  },
  {
    "text": "escalation the last step we need to search the correct return address and exit",
    "start": "508240",
    "end": "515919"
  },
  {
    "text": "by the way we don't have the kernel debugger and we cannot print out",
    "start": "515919",
    "end": "520959"
  },
  {
    "text": "debugging information because this will cause contextual switching",
    "start": "520959",
    "end": "527440"
  },
  {
    "text": "so this page contains a seven years old screenshot of a successful eop privilege",
    "start": "528320",
    "end": "534800"
  },
  {
    "text": "escalation to avoid trouble i removed the name of mobile phone brand",
    "start": "534800",
    "end": "541279"
  },
  {
    "text": "the vulnerability is actually caused by third party vendors sd card driver",
    "start": "541279",
    "end": "547120"
  },
  {
    "text": "this vulnerability affected many mobile phone brands at that time including",
    "start": "547120",
    "end": "553279"
  },
  {
    "text": "samsung xiaomi huawei and so on in the third part of this presentation",
    "start": "553279",
    "end": "560880"
  },
  {
    "text": "we will see other vulnerability cases caused by",
    "start": "560880",
    "end": "566160"
  },
  {
    "text": "graphics card supplier",
    "start": "566160",
    "end": "570240"
  },
  {
    "text": "as a summary of the android linux part i",
    "start": "571279",
    "end": "577040"
  },
  {
    "text": "would like to make a few points number one all input is harmful",
    "start": "577040",
    "end": "583519"
  },
  {
    "text": "for the vulnerability mentioned earlier i think every kernel programmer",
    "start": "583519",
    "end": "589120"
  },
  {
    "text": "should try his or her best to avoid making such mistakes",
    "start": "589120",
    "end": "594480"
  },
  {
    "text": "number two stack-based buffalo floor exploit explain",
    "start": "594480",
    "end": "600080"
  },
  {
    "text": "exploitation in real world is not as simple as in books especially",
    "start": "600080",
    "end": "605680"
  },
  {
    "text": "when you don't have a kernel debugger number three you may be wondering",
    "start": "605680",
    "end": "612480"
  },
  {
    "text": "do stack overflow vulnerabilities still make sense today",
    "start": "612480",
    "end": "617839"
  },
  {
    "text": "i would like to give two examples on this topic the the first one comes from the",
    "start": "617839",
    "end": "624399"
  },
  {
    "text": "presentation of pangu team um at blackhead usa in",
    "start": "624399",
    "end": "630839"
  },
  {
    "text": "2019 the title is towards discovering remote code execution vulnerabilities in",
    "start": "630839",
    "end": "636720"
  },
  {
    "text": "apple this time on page 101 of the slides tla discovered",
    "start": "636720",
    "end": "642079"
  },
  {
    "text": "some cases of stack of floor caused by the compilers",
    "start": "642079",
    "end": "647519"
  },
  {
    "text": "incorrect in session of stack canary on arm platform the second example comes",
    "start": "647519",
    "end": "653760"
  },
  {
    "text": "from my presentation at blackhead usa last year the title is diving to apple",
    "start": "653760",
    "end": "661480"
  },
  {
    "text": "io80211 family version 2. i found a case where the compiler did not insert the",
    "start": "661480",
    "end": "669120"
  },
  {
    "text": "stack canary for the target wonderful function the id is cve 2020",
    "start": "669120",
    "end": "676160"
  },
  {
    "text": "98.99 i think after reading these presentations you may have some",
    "start": "676160",
    "end": "681600"
  },
  {
    "text": "different ideas about stack-based buffer floor the next platform is the windows kernel",
    "start": "681600",
    "end": "689920"
  },
  {
    "text": "i would like to share some more interesting cases with you first of all",
    "start": "689920",
    "end": "695360"
  },
  {
    "text": "there is a slide called common coding errors that is worth reading",
    "start": "695360",
    "end": "701519"
  },
  {
    "text": "it contains most of the common kernel programming errors and the solutions",
    "start": "701519",
    "end": "709279"
  },
  {
    "text": "as a part of the user data processing rules",
    "start": "709279",
    "end": "714320"
  },
  {
    "text": "routines such as prop for read and proper write are apis",
    "start": "714320",
    "end": "719519"
  },
  {
    "text": "that we must use their explanations can be found in the links below",
    "start": "719519",
    "end": "726240"
  },
  {
    "text": "similarly if this rules are violated when accessing user data",
    "start": "726240",
    "end": "733440"
  },
  {
    "text": "the vulnerable function will at least introduce a log privilege escalation",
    "start": "733440",
    "end": "738959"
  },
  {
    "text": "vulnerability into the kernel",
    "start": "738959",
    "end": "743240"
  },
  {
    "text": "in uh 2012 i mentioned an interesting feature",
    "start": "744079",
    "end": "750000"
  },
  {
    "text": "in the 132k fund engine in my found",
    "start": "750000",
    "end": "755279"
  },
  {
    "text": "security related presentation at the c-scan 360 conference",
    "start": "755279",
    "end": "762399"
  },
  {
    "text": "for efficiency reasons phone file will not be copied into kernel mode",
    "start": "762399",
    "end": "769279"
  },
  {
    "text": "so how does the kernel scalar engine access this data located in user space",
    "start": "769279",
    "end": "776639"
  },
  {
    "text": "the answer is that the engine will access and manipulate this data directly",
    "start": "776639",
    "end": "783200"
  },
  {
    "text": "in the figure we can see that the return value of the rooting uh p way get pointer callback",
    "start": "783200",
    "end": "791120"
  },
  {
    "text": "um is a user mode address with lens of four e8",
    "start": "791120",
    "end": "797360"
  },
  {
    "text": "and the the the address here is a user space address",
    "start": "797360",
    "end": "804240"
  },
  {
    "text": "and all subsequent parsing operations are based on this user mode address",
    "start": "804240",
    "end": "810800"
  },
  {
    "text": "so in my opinion this design and the implementation give total",
    "start": "810800",
    "end": "816320"
  },
  {
    "text": "or risk condition vulnerability a large living space",
    "start": "816320",
    "end": "821600"
  },
  {
    "text": "a year after juror from google project zero released",
    "start": "821920",
    "end": "827279"
  },
  {
    "text": "his box palm on github this amazing tool found a large number of kernel double",
    "start": "827279",
    "end": "834399"
  },
  {
    "text": "fetch and risk condition vulnerabilities some of this",
    "start": "834399",
    "end": "839600"
  },
  {
    "text": "recourse can still be found on google docs today the box phone can",
    "start": "839600",
    "end": "846320"
  },
  {
    "text": "record or access actions of the kernel to user mode data",
    "start": "846320",
    "end": "851920"
  },
  {
    "text": "and vulnerability types like double fetch will have no well to hide",
    "start": "851920",
    "end": "859440"
  },
  {
    "text": "then juror 10 turned his research direction to the",
    "start": "861120",
    "end": "867360"
  },
  {
    "text": "132k from the engine and again his tour found a large number of",
    "start": "867360",
    "end": "872959"
  },
  {
    "text": "double fetch and tactile vulnerabilities i listed some of his blog here",
    "start": "872959",
    "end": "878959"
  },
  {
    "text": "if you are interested in font security this blog should not be missed",
    "start": "878959",
    "end": "885760"
  },
  {
    "text": "this excellent studies keep me thinking what else can i do",
    "start": "885760",
    "end": "892000"
  },
  {
    "text": "in general there are only two ways left the first way is to improve the code",
    "start": "892000",
    "end": "899760"
  },
  {
    "text": "coverage rate during vulnerability hunting and maybe i can find",
    "start": "899760",
    "end": "905360"
  },
  {
    "text": "some missed cases and yes i i did",
    "start": "905360",
    "end": "910480"
  },
  {
    "text": "the other way is that i must try to find some new vulnerability patterns",
    "start": "910560",
    "end": "918639"
  },
  {
    "text": "so i shared my approach in the blackhead usa 2014",
    "start": "918720",
    "end": "924160"
  },
  {
    "text": "my slides can be downloaded in the first link here",
    "start": "924160",
    "end": "928959"
  },
  {
    "text": "in short i mainly did two things i compiled the fund scale engine in the",
    "start": "931440",
    "end": "938240"
  },
  {
    "text": "kernel of the leaked windows entity source code yes it can be compiled",
    "start": "938240",
    "end": "943360"
  },
  {
    "text": "i compiled actually recompiled all project codes",
    "start": "943360",
    "end": "948720"
  },
  {
    "text": "into a static library in user mode then i wrote a corresponding application",
    "start": "948720",
    "end": "954880"
  },
  {
    "text": "to drive it to work and then i uploaded the project to github",
    "start": "954880",
    "end": "961279"
  },
  {
    "text": "because i recompiled repackaged the source code",
    "start": "961279",
    "end": "966320"
  },
  {
    "text": "my slides should not be put on the official website of black hat",
    "start": "966320",
    "end": "972160"
  },
  {
    "text": "but i think the the whole process is very interesting for example on the left",
    "start": "972160",
    "end": "978880"
  },
  {
    "text": "um i can get all the symbols of the fountain engine and i can also see",
    "start": "978880",
    "end": "985120"
  },
  {
    "text": "how each gleef is rendered in pixels",
    "start": "985120",
    "end": "990399"
  },
  {
    "text": "it's very interesting the second thing is that i did fund find",
    "start": "990399",
    "end": "997279"
  },
  {
    "text": "a new type of vulnerability it's id cve 2014",
    "start": "997279",
    "end": "1003759"
  },
  {
    "text": "1819 because the fund engine introduced a",
    "start": "1003759",
    "end": "1008959"
  },
  {
    "text": "catching mechanism in windows xp i found that the logic of many kernel routings",
    "start": "1008959",
    "end": "1014560"
  },
  {
    "text": "has become first go to query the font cache",
    "start": "1014560",
    "end": "1019680"
  },
  {
    "text": "here we can call it the first fetch and then the kernel buffer is",
    "start": "1019680",
    "end": "1025438"
  },
  {
    "text": "a lock it according to the size of first query next",
    "start": "1025439",
    "end": "1031199"
  },
  {
    "text": "access to user mode data to to initialize the kernel buffer which",
    "start": "1031199",
    "end": "1037038"
  },
  {
    "text": "we can call the second fetch here as you can imagine",
    "start": "1037039",
    "end": "1042240"
  },
  {
    "text": "there is a huge time window here adding inconsistency between the first",
    "start": "1042240",
    "end": "1049440"
  },
  {
    "text": "batch and the second batch will result in heap of the bond access",
    "start": "1049440",
    "end": "1054880"
  },
  {
    "text": "this vulnerability pattern can perfectly avoid box pawn scanning because there is",
    "start": "1054880",
    "end": "1061280"
  },
  {
    "text": "only one user mode read or fetch in the entire process",
    "start": "1061280",
    "end": "1069280"
  },
  {
    "text": "as a summary i want to say again that all input is harmful",
    "start": "1069919",
    "end": "1077360"
  },
  {
    "text": "and the new features or changes always means new attack surfaces",
    "start": "1077360",
    "end": "1083200"
  },
  {
    "text": "the phone cache introduces new tactile vulnerability to the kernel",
    "start": "1083200",
    "end": "1089120"
  },
  {
    "text": "this non-traditional double fetch vulnerabilities are difficult to capture",
    "start": "1089120",
    "end": "1096000"
  },
  {
    "text": "the third platform is the mac os ios kernel on mac os ios platform the situation",
    "start": "1096000",
    "end": "1103600"
  },
  {
    "text": "becomes a little more complicated functions like io connect method can automatically handle",
    "start": "1103600",
    "end": "1111360"
  },
  {
    "text": "user input for the kernel and extensions while bsd functions such as copying and",
    "start": "1111360",
    "end": "1117679"
  },
  {
    "text": "the copy alt provides sports support for many operations",
    "start": "1117679",
    "end": "1124000"
  },
  {
    "text": "in the link above is a document called kernel programming guide",
    "start": "1124000",
    "end": "1129679"
  },
  {
    "text": "also some of the contained in the document is out of date but i",
    "start": "1129679",
    "end": "1134799"
  },
  {
    "text": "still recommend kernel developers to read it as a reference",
    "start": "1134799",
    "end": "1142240"
  },
  {
    "text": "for the more commonly used iocate functions i have list",
    "start": "1144000",
    "end": "1150640"
  },
  {
    "text": "listed some links such as io connect core method inside inside the io connect column",
    "start": "1150640",
    "end": "1158160"
  },
  {
    "text": "method function many code branches are related to the class io memory",
    "start": "1158160",
    "end": "1165280"
  },
  {
    "text": "descriptor so i also listed the i o memory descriptor",
    "start": "1165280",
    "end": "1171200"
  },
  {
    "text": "documentation below next i would like to refer a blog post",
    "start": "1171200",
    "end": "1178799"
  },
  {
    "text": "by king lab tencent security this four years old blog explains in",
    "start": "1178799",
    "end": "1186640"
  },
  {
    "text": "detail a vulnerability pattern related to memory mapping in the macos ios kernel the idea of the",
    "start": "1186640",
    "end": "1194320"
  },
  {
    "text": "vulnerabilities include cbe 2016 17 6 20 24 and 25",
    "start": "1194320",
    "end": "1203840"
  },
  {
    "text": "regarding the topic of memory related vulnerabilities embio has a blog in",
    "start": "1203840",
    "end": "1210880"
  },
  {
    "text": "2019 that i have to mention if you are interested this article is also worth reading",
    "start": "1210880",
    "end": "1219440"
  },
  {
    "text": "today due to the limited time i have to limit the discussion to the first",
    "start": "1219440",
    "end": "1226080"
  },
  {
    "text": "king labs blog for friends who have not read this blog",
    "start": "1226080",
    "end": "1233600"
  },
  {
    "text": "i will use the simplest words to summarize the root cause of this tactile vulnerabilities",
    "start": "1233600",
    "end": "1240559"
  },
  {
    "text": "inside the io connector call method function the user mode input will be processed if the",
    "start": "1240559",
    "end": "1247919"
  },
  {
    "text": "input user data size is less than one page this function will use memory copy to",
    "start": "1247919",
    "end": "1254400"
  },
  {
    "text": "copy all the data into the kernel the problem is that if the input data is",
    "start": "1254400",
    "end": "1261360"
  },
  {
    "text": "larger than one page io connect call method will create a",
    "start": "1261360",
    "end": "1267360"
  },
  {
    "text": "memory descript descriptor to describe the target data",
    "start": "1267360",
    "end": "1274080"
  },
  {
    "text": "and at that time the user process still has right permission",
    "start": "1274080",
    "end": "1280000"
  },
  {
    "text": "to the map the data so let's think about it what does the right permission mean here",
    "start": "1280000",
    "end": "1287760"
  },
  {
    "text": "it means talk to attack so in this block other also gives",
    "start": "1288159",
    "end": "1293919"
  },
  {
    "text": "apple's fixed solution which seems to be related to the vm copy",
    "start": "1293919",
    "end": "1299840"
  },
  {
    "text": "vm underscore copy flag if you are interested you can read the then source code on github",
    "start": "1299840",
    "end": "1307919"
  },
  {
    "text": "as a summary of this section and the and the the first part",
    "start": "1307919",
    "end": "1314080"
  },
  {
    "text": "i would like to say penny penny penny all inputs are potentially harmful",
    "start": "1314080",
    "end": "1320799"
  },
  {
    "text": "one more thing is that um does the security update",
    "start": "1320799",
    "end": "1327039"
  },
  {
    "text": "really work i i mean this one the mac mac os one can it cover all uh",
    "start": "1327039",
    "end": "1334720"
  },
  {
    "text": "corner cases i don't think so we will see that",
    "start": "1334720",
    "end": "1340960"
  },
  {
    "text": "um after seeing this you might say that these cases are not the latest",
    "start": "1342159",
    "end": "1347919"
  },
  {
    "text": "vulnerability they are just some end days not one day nor zero day",
    "start": "1347919",
    "end": "1354640"
  },
  {
    "text": "i would say if we want to find more interesting warner vulnerabilities",
    "start": "1354640",
    "end": "1361120"
  },
  {
    "text": "we must have have powerful tools in hand here i",
    "start": "1361120",
    "end": "1366320"
  },
  {
    "text": "would like to introduce kaimong to you in this chapter",
    "start": "1366320",
    "end": "1371919"
  },
  {
    "text": "i will explain what kmong is and what problem can't solve",
    "start": "1371919",
    "end": "1378720"
  },
  {
    "text": "chemo is an open source pre and post callback based framework for mac os",
    "start": "1378720",
    "end": "1384720"
  },
  {
    "text": "kernel monitoring its source code can be found on github",
    "start": "1384720",
    "end": "1390240"
  },
  {
    "text": "kimono includes many useful features like file process",
    "start": "1391039",
    "end": "1397600"
  },
  {
    "text": "network traffic monitoring dynamic library and current extension monitoring and blocking management access control",
    "start": "1397600",
    "end": "1404080"
  },
  {
    "text": "policy filtering and so on in addition kimono also integrates a",
    "start": "1404080",
    "end": "1409840"
  },
  {
    "text": "kernel in hook engine through which we can hook almost any kernel function we want",
    "start": "1409840",
    "end": "1417840"
  },
  {
    "text": "some of the above functions are not that easy to implement",
    "start": "1418000",
    "end": "1424000"
  },
  {
    "text": "for example for file and process money operation monitoring k-month's solution is based",
    "start": "1424000",
    "end": "1430240"
  },
  {
    "text": "on the kiosk kpis but the chaos has many limitations",
    "start": "1430240",
    "end": "1435840"
  },
  {
    "text": "for file operating the kiosk callback cannot distinguish whether the operation",
    "start": "1435840",
    "end": "1441200"
  },
  {
    "text": "is create new or open existing for process creation the chaos callback",
    "start": "1441200",
    "end": "1448960"
  },
  {
    "text": "cannot get the command-line parameters this is unacceptable for kernel monitoring",
    "start": "1448960",
    "end": "1457039"
  },
  {
    "text": "but all of this can be easily solved this screenshot is to locate the command",
    "start": "1457039",
    "end": "1463840"
  },
  {
    "text": "line information by searching call stacks",
    "start": "1463840",
    "end": "1468799"
  },
  {
    "text": "another interesting topic is related to mandatory access control policy the security implementation of mac os",
    "start": "1469120",
    "end": "1476559"
  },
  {
    "text": "ios almost all relies on the manager access control mechanism so",
    "start": "1476559",
    "end": "1483440"
  },
  {
    "text": "is it possible for us to dump the kernel's msa list",
    "start": "1483440",
    "end": "1489440"
  },
  {
    "text": "a potential issue of these requirements is how to",
    "start": "1489440",
    "end": "1496080"
  },
  {
    "text": "obtain unexported logs and access kernel data structure safely",
    "start": "1496080",
    "end": "1503919"
  },
  {
    "text": "such challenges cannot stop us after reading the kernel source code i found that",
    "start": "1503919",
    "end": "1510799"
  },
  {
    "text": "there are two callback opportunities for the third party between the code that",
    "start": "1510799",
    "end": "1516559"
  },
  {
    "text": "obtained the mutex log this means that i can safely and dump a",
    "start": "1516559",
    "end": "1522240"
  },
  {
    "text": "safely access and dump mac related data structures in the callback functions",
    "start": "1522240",
    "end": "1529840"
  },
  {
    "text": "for for kernel english hook engine it will insert pre and post callbacks for",
    "start": "1529840",
    "end": "1536159"
  },
  {
    "text": "the target function in the pre-callback handler we can filter the input parameters and in the",
    "start": "1536159",
    "end": "1543200"
  },
  {
    "text": "post callback handler we can modify the return return value of the function",
    "start": "1543200",
    "end": "1551440"
  },
  {
    "text": "this screenshot is an application of k-mong kerneling like hook engine i hooked up functions related to kernel",
    "start": "1551919",
    "end": "1557919"
  },
  {
    "text": "extension loading downloading you can see that i passed and filtered the input parameters",
    "start": "1557919",
    "end": "1564559"
  },
  {
    "text": "of the function in the pre-callback handler and i can even patch the target kernel",
    "start": "1564559",
    "end": "1570159"
  },
  {
    "text": "extension with the power force part of chemo",
    "start": "1570159",
    "end": "1576799"
  },
  {
    "text": "i built many sniffers and flooding tours last",
    "start": "1576799",
    "end": "1581919"
  },
  {
    "text": "year i published the two research projects one related to bluetooth security and",
    "start": "1581919",
    "end": "1589679"
  },
  {
    "text": "the other related to wifi security they were presented at blackhead usa and blackhat europe conferences",
    "start": "1589679",
    "end": "1597679"
  },
  {
    "text": "this is a request the sniffer for",
    "start": "1597679",
    "end": "1602880"
  },
  {
    "text": "io80211 family we can see that the the kernel receives a large amount of",
    "start": "1603240",
    "end": "1609919"
  },
  {
    "text": "user data from the daemons such as airport d airport is very important to",
    "start": "1609919",
    "end": "1617039"
  },
  {
    "text": "you the user mode daemon of wi-fi subsystem",
    "start": "1617039",
    "end": "1622720"
  },
  {
    "text": "some of the requests the data contains complex formats",
    "start": "1622720",
    "end": "1629279"
  },
  {
    "text": "and i have reported about 18 kernel vulnerabilities some of which have been fixed",
    "start": "1629279",
    "end": "1637279"
  },
  {
    "text": "and this is a sniffer for i o bluetooth family hci requests",
    "start": "1637279",
    "end": "1642960"
  },
  {
    "text": "we can also see that the kernel receives a large amount of user data from the daemon bluetooth d",
    "start": "1642960",
    "end": "1649840"
  },
  {
    "text": "more complicated is that third parties can customize their own",
    "start": "1649840",
    "end": "1655600"
  },
  {
    "text": "vendor commands and most of all most of these commands are not documented",
    "start": "1655600",
    "end": "1663440"
  },
  {
    "text": "i have reported about 23 kernel vulnerabilities vulnerabilities last year and some of",
    "start": "1663440",
    "end": "1670399"
  },
  {
    "text": "which have been fixed with the help of k-mong i hooked up",
    "start": "1670399",
    "end": "1675840"
  },
  {
    "text": "almost all kernel mapping related functions this engineering practice",
    "start": "1675840",
    "end": "1682480"
  },
  {
    "text": "practice have given me a better understanding of the implementation of kernel mapping",
    "start": "1682480",
    "end": "1688640"
  },
  {
    "text": "and this sniffers can be easily transformed into fuzzing tools",
    "start": "1688640",
    "end": "1694240"
  },
  {
    "text": "and in addition um last year i also implemented a simple kernel address",
    "start": "1694240",
    "end": "1700080"
  },
  {
    "text": "sanitizer it's still not perfect but it does work",
    "start": "1700080",
    "end": "1707120"
  },
  {
    "text": "yeah the next part is the latest kernel tactile vulnerability case studies",
    "start": "1707600",
    "end": "1714320"
  },
  {
    "text": "last november apple fixed at least the two gpu graphics card vulnerabilities that i",
    "start": "1714320",
    "end": "1721840"
  },
  {
    "text": "submitted but i only got one cv id at the moment",
    "start": "1721840",
    "end": "1727919"
  },
  {
    "text": "the id is 3 20 20 2 7 9 1 4",
    "start": "1727919",
    "end": "1734640"
  },
  {
    "text": "and the pattern of this vulnerability looks like this the driver trusts the user mode input by",
    "start": "1734640",
    "end": "1743200"
  },
  {
    "text": "mistake and the fatal thing is that um this input is directly related to the",
    "start": "1743200",
    "end": "1750320"
  },
  {
    "text": "number of kernel loops so such code means heap outbound access read and write",
    "start": "1750320",
    "end": "1759440"
  },
  {
    "text": "so in summary it seems that the root cause of the vulnerability is",
    "start": "1760159",
    "end": "1766080"
  },
  {
    "text": "related to is related to the lack of effective input validation and this type",
    "start": "1766080",
    "end": "1773919"
  },
  {
    "text": "of vulnerability can be easily captured by kernel address sanitizer and you will",
    "start": "1773919",
    "end": "1779200"
  },
  {
    "text": "see why i used the words it seems that",
    "start": "1779200",
    "end": "1784720"
  },
  {
    "text": "next let's look at the the patch for this vulnerability um",
    "start": "1785440",
    "end": "1791120"
  },
  {
    "text": "it is not complicated the number of loops is limited to a fixed value here",
    "start": "1791120",
    "end": "1799679"
  },
  {
    "text": "before the the loop starts this time everything looks fine but let's think",
    "start": "1800799",
    "end": "1808640"
  },
  {
    "text": "about it more carefully",
    "start": "1808640",
    "end": "1813360"
  },
  {
    "text": "there are there is there are two questions i",
    "start": "1814480",
    "end": "1819919"
  },
  {
    "text": "leave to you is it possible for us to bypass the",
    "start": "1819919",
    "end": "1825840"
  },
  {
    "text": "security update 20 20 20 007 and re-trigger the vulnerability",
    "start": "1825840",
    "end": "1833520"
  },
  {
    "text": "and also input buffer is on the kernel heap",
    "start": "1833520",
    "end": "1839039"
  },
  {
    "text": "is it possible to raise against it from for example user mode",
    "start": "1839039",
    "end": "1846559"
  },
  {
    "text": "the answer is yes i have a demo for for this",
    "start": "1846880",
    "end": "1852240"
  },
  {
    "text": "okay",
    "start": "1854399",
    "end": "1856640"
  },
  {
    "text": "yeah today is the march uh 29th",
    "start": "1859600",
    "end": "1865279"
  },
  {
    "text": "it's already monday yeah today's monday and the latest version of mac os",
    "start": "1865279",
    "end": "1873039"
  },
  {
    "text": "bixer is is 11.3 beta 5 and the build number is 20e",
    "start": "1873039",
    "end": "1881840"
  },
  {
    "text": "5217a",
    "start": "1881840",
    "end": "1884840"
  },
  {
    "text": "yeah and the the kernel version is the latest one please allow me",
    "start": "1893600",
    "end": "1900559"
  },
  {
    "text": "wrong my poc my tour",
    "start": "1900559",
    "end": "1905960"
  },
  {
    "text": "then we can see that after a few seconds yeah we can see that the operating system has crashed",
    "start": "1907200",
    "end": "1914960"
  },
  {
    "text": "yeah i actually prepared two versions of the slides the current version and the",
    "start": "1917519",
    "end": "1924240"
  },
  {
    "text": "more complicated version since apple has not fixed the this serious",
    "start": "1924240",
    "end": "1930159"
  },
  {
    "text": "vulnerabilities i cannot share the details with you yet [Music]",
    "start": "1930159",
    "end": "1938008"
  },
  {
    "text": "here is a summary of the of patch bypass as the vulnerability has not been fixed",
    "start": "1938320",
    "end": "1945440"
  },
  {
    "text": "please forgive me for not disclosing the details of the vulnerabilities",
    "start": "1945440",
    "end": "1951760"
  },
  {
    "text": "i i will write a blog blog post after",
    "start": "1951760",
    "end": "1958559"
  },
  {
    "text": "the patch released um tactile vulnerabilities such as cbe 2020-27914",
    "start": "1958559",
    "end": "1966240"
  },
  {
    "text": "have been hidden in plant site for a long time and even after i submitted the",
    "start": "1966240",
    "end": "1971360"
  },
  {
    "text": "vulnerabilities they were not correctly identified by",
    "start": "1971360",
    "end": "1977840"
  },
  {
    "text": "by by the developers this leads to the patch can be bypassed",
    "start": "1977919",
    "end": "1986000"
  },
  {
    "text": "okay the end last part",
    "start": "1986960",
    "end": "1992720"
  },
  {
    "text": "from the perspective of security research um i",
    "start": "1993200",
    "end": "1999039"
  },
  {
    "text": "i would say uh the first one vulnerabilities like 2020",
    "start": "1999039",
    "end": "2005200"
  },
  {
    "text": "279 uh 1 4 and 279 36",
    "start": "2005200",
    "end": "2011919"
  },
  {
    "text": "have been hidden in planetside for a long time they remind us to re-examine the",
    "start": "2011919",
    "end": "2017039"
  },
  {
    "text": "the kernel memory mapping mechanism of mac os and ios and the",
    "start": "2017039",
    "end": "2022640"
  },
  {
    "text": "number two sometimes the security patch can be bypassed yeah um",
    "start": "2022640",
    "end": "2027919"
  },
  {
    "text": "in the um in the black hat europe",
    "start": "2027919",
    "end": "2035120"
  },
  {
    "text": "presentation i i presented i i have another example",
    "start": "2035440",
    "end": "2041279"
  },
  {
    "text": "it's a bluetooth hci subsystem example i can bypass the",
    "start": "2041279",
    "end": "2048960"
  },
  {
    "text": "the patch so understanding the implementation of paths is often helpful for for",
    "start": "2048960",
    "end": "2055520"
  },
  {
    "text": "vulnerability research and with this research as a new starting",
    "start": "2055520",
    "end": "2061520"
  },
  {
    "text": "point i believe we can do more and",
    "start": "2061520",
    "end": "2067040"
  },
  {
    "text": "from the perspective of security engineering i would say",
    "start": "2067040",
    "end": "2073200"
  },
  {
    "text": "with the help of cayman project i believe we can do better",
    "start": "2073200",
    "end": "2080560"
  },
  {
    "text": "yeah thank you thank you very much thank you for your time bye",
    "start": "2080639",
    "end": "2086839"
  },
  {
    "text": "you",
    "start": "2088560",
    "end": "2090639"
  }
]