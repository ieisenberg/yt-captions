[
  {
    "text": "so uh good afternoon everyone and thanks for attending our talk enhancing",
    "start": "2879",
    "end": "8960"
  },
  {
    "text": "automatic vulnerability discovery for Windows RPC and com in new way um my",
    "start": "8960",
    "end": "15679"
  },
  {
    "text": "name is Juny Pong and this is joint work with uh founding",
    "start": "15679",
    "end": "22960"
  },
  {
    "text": "and first uh please allow us to introduce ourself i'm Pong and also know",
    "start": "23560",
    "end": "31199"
  },
  {
    "text": "as Edwards Pong in Twitter and I'm a associate professor for Huajong",
    "start": "31199",
    "end": "37040"
  },
  {
    "text": "University of Science and Technology and in the meantime I'm also a security",
    "start": "37040",
    "end": "42680"
  },
  {
    "text": "researcher at Cypun i got my PhD degree in cryptography but actually I was",
    "start": "42680",
    "end": "49120"
  },
  {
    "text": "interested in all area of computer science and I work in both in defensive",
    "start": "49120",
    "end": "55120"
  },
  {
    "text": "and offensive security previously I have published many security research in both",
    "start": "55120",
    "end": "60640"
  },
  {
    "text": "industry and academia to get more information about me you can find it in the my personal",
    "start": "60640",
    "end": "67960"
  },
  {
    "text": "site and also I'm a bug hunter in the past six years and here are some of my",
    "start": "67960",
    "end": "73920"
  },
  {
    "text": "bug in the past six years and most of the time I'm doing vulnerability hunting",
    "start": "73920",
    "end": "79119"
  },
  {
    "text": "on Windows or some web applications so we are going to talk",
    "start": "79119",
    "end": "84320"
  },
  {
    "text": "about how do we find some of of those back automatically in com and",
    "start": "84320",
    "end": "90719"
  },
  {
    "text": "IPC good afternoon everyone here's the introduction of me famingu and I'm a PhD",
    "start": "91000",
    "end": "97200"
  },
  {
    "text": "student at University of Chinese academic and sciences and my research",
    "start": "97200",
    "end": "102400"
  },
  {
    "text": "focus on Windows security and reverse engineering uh my research publishes on",
    "start": "102400",
    "end": "107600"
  },
  {
    "text": "USI security NDSS and blackheads i also interested in automated bug finding",
    "start": "107600",
    "end": "113840"
  },
  {
    "text": "ideas and tools uh and I'm my ranger and I'm a security",
    "start": "113840",
    "end": "120880"
  },
  {
    "text": "researcher at cyber i uh focus on the windows uh bug hunting and",
    "start": "120880",
    "end": "126920"
  },
  {
    "text": "exploitation for several years okay here is the agenda of this",
    "start": "126920",
    "end": "134160"
  },
  {
    "text": "talk first we will give an introduction then we will talk about the ARPC",
    "start": "134160",
    "end": "140200"
  },
  {
    "text": "internals after that we will present XPC our solution to fuzzing and",
    "start": "140200",
    "end": "146560"
  },
  {
    "text": "monitoring Windows ARPC message and in the end we'll give a summary",
    "start": "146560",
    "end": "153840"
  },
  {
    "text": "first the introduction IPC and COM is a large",
    "start": "153840",
    "end": "159440"
  },
  {
    "text": "attack surface for those founding IP and vulnerabilities on Windows and there are",
    "start": "159440",
    "end": "166879"
  },
  {
    "text": "many in the wild exploitation in this area in past historically research in",
    "start": "166879",
    "end": "173360"
  },
  {
    "text": "this area has focused on existing vulnerability pattern for example the",
    "start": "173360",
    "end": "178959"
  },
  {
    "text": "risk condition vulnerability the fire redirection vulnerability however founding those",
    "start": "178959",
    "end": "185760"
  },
  {
    "text": "vulnerability require a significant time of reverse",
    "start": "185760",
    "end": "191280"
  },
  {
    "text": "engineering we want to uh fast RPC and com server in Windows to find",
    "start": "192280",
    "end": "198720"
  },
  {
    "text": "vulnerability automatically to reduce a uh hum uh manual work",
    "start": "198720",
    "end": "205040"
  },
  {
    "text": "however to fast com server research often find themsself need to creating",
    "start": "205040",
    "end": "212239"
  },
  {
    "text": "custom corros and the fer for each different interface while reversing",
    "start": "212239",
    "end": "218640"
  },
  {
    "text": "engineering process need a lot of human work and in this talk we will present",
    "start": "218640",
    "end": "223840"
  },
  {
    "text": "our solution to do it to fast RPC and com server our uh solution is XPC a",
    "start": "223840",
    "end": "232159"
  },
  {
    "text": "cutting edge IPC and com fasting and monitoring tool to hunt IPC and com",
    "start": "232159",
    "end": "238000"
  },
  {
    "text": "vulnerability automatically the second part the ARPC",
    "start": "238000",
    "end": "246239"
  },
  {
    "text": "internals stands for advanced local procedure core on Windows operating",
    "start": "246920",
    "end": "252120"
  },
  {
    "text": "system it's a interprocess communication mechanism on Windows",
    "start": "252120",
    "end": "257840"
  },
  {
    "text": "it work just like the network socket a server listening on a RPC port and a",
    "start": "257840",
    "end": "264639"
  },
  {
    "text": "client can connecting to that port and then they can exchange message irpc is widely used in Windows",
    "start": "264639",
    "end": "273280"
  },
  {
    "text": "for example the COM the RPC the RPC server depends on ARPC for local inter",
    "start": "273280",
    "end": "281280"
  },
  {
    "text": "uh local interprocess communication an ARPC port object is a",
    "start": "281280",
    "end": "288800"
  },
  {
    "text": "kernel object and its use is familiar to the use of network socket when a server",
    "start": "288800",
    "end": "295680"
  },
  {
    "text": "open a socket that a client can connect to it in order to exchange message and",
    "start": "295680",
    "end": "302240"
  },
  {
    "text": "if you fire up uh one object uh from the system tunnel shoot you will find that",
    "start": "302240",
    "end": "308800"
  },
  {
    "text": "there are many PC port running on Windows and just like this picture",
    "start": "308800",
    "end": "316080"
  },
  {
    "text": "shows and there are some typical ARC API for ARPC server and the client it work",
    "start": "317560",
    "end": "324960"
  },
  {
    "text": "just like the socket API it's easy to understand them from their name the",
    "start": "324960",
    "end": "330880"
  },
  {
    "text": "server call NIPC create port to create a port the client call NIPC connect port",
    "start": "330880",
    "end": "337840"
  },
  {
    "text": "to connect to the port then the server and the client can both call NPC send",
    "start": "337840",
    "end": "343520"
  },
  {
    "text": "white receive port to send and receive",
    "start": "343520",
    "end": "348000"
  },
  {
    "text": "message the RPC message includes two parts the first part is the port message",
    "start": "348600",
    "end": "354960"
  },
  {
    "text": "which is the header and the data of the message",
    "start": "354960",
    "end": "360000"
  },
  {
    "text": "and and this is our fasting target in this talk the second part is AIPC",
    "start": "360000",
    "end": "365600"
  },
  {
    "text": "message attributes which is attributes header and data for advanced future in",
    "start": "365600",
    "end": "371120"
  },
  {
    "text": "ARC communication for for example handles and some other",
    "start": "371120",
    "end": "377919"
  },
  {
    "text": "object the NDR engine which stand for network uh data representation engine",
    "start": "378600",
    "end": "386240"
  },
  {
    "text": "it's a mushrooming engine of the RPC and DOM component actual data in ARPC",
    "start": "386240",
    "end": "393199"
  },
  {
    "text": "message is marshed and unmarshed by the NDR agent data marshed in NDR format is our",
    "start": "393199",
    "end": "402000"
  },
  {
    "text": "fasten target this picture shows a architecture when a client application want to call a",
    "start": "402000",
    "end": "409520"
  },
  {
    "text": "remote function with parameter argument one and argument two the the NDR",
    "start": "409520",
    "end": "415600"
  },
  {
    "text": "marshall engine will marshall those two par uh parameter into the NDR marshall",
    "start": "415600",
    "end": "421440"
  },
  {
    "text": "buffer then the RPC runtime will touch this buffer in RPC message and send it",
    "start": "421440",
    "end": "427919"
  },
  {
    "text": "to the server in ARPC channel the server will use the India um un",
    "start": "427919",
    "end": "434319"
  },
  {
    "text": "marshall engine to un marshall the buffer and to recover the parameter argument one and arguments two then coin",
    "start": "434319",
    "end": "442319"
  },
  {
    "text": "the real application of the function with those parameter for more detail of",
    "start": "442319",
    "end": "447840"
  },
  {
    "text": "NDR engine you can find it on the MSDN document online",
    "start": "447840",
    "end": "455160"
  },
  {
    "text": "so here is a basic architecture of the RPC over ARPC",
    "start": "455360",
    "end": "461120"
  },
  {
    "text": "the IPC client and the R IPC server will",
    "start": "461120",
    "end": "466160"
  },
  {
    "text": "uh communicate through RPC channel and all the parameter will marshed into NDR",
    "start": "466160",
    "end": "472880"
  },
  {
    "text": "marshall buffer in the RPC channel and we are going to talk going to and and we",
    "start": "472880",
    "end": "479360"
  },
  {
    "text": "are going to do it uh in this talk is actually hookc message and fuzzing and",
    "start": "479360",
    "end": "485759"
  },
  {
    "text": "monitoring the NDR marsh buffer to find vulnerability automatically",
    "start": "485759",
    "end": "492638"
  },
  {
    "text": "ly here we just briefly introduce AIPC internals if you really want to know",
    "start": "493720",
    "end": "500080"
  },
  {
    "text": "more about uh ARPC how ARPC work we strongly suggest you to find those uh",
    "start": "500080",
    "end": "506479"
  },
  {
    "text": "public research and next part XC fuzzing and my",
    "start": "506479",
    "end": "514320"
  },
  {
    "text": "coworker founding will present it now uh the next part I will introduce",
    "start": "514320",
    "end": "521360"
  },
  {
    "text": "the design uh some design ideas behind the XRPCA fuzzing",
    "start": "521360",
    "end": "526680"
  },
  {
    "text": "architecture based on the ARPC internal implementation details we have already",
    "start": "526680",
    "end": "532959"
  },
  {
    "text": "mastered we further consider how to effect effectively explore this attack",
    "start": "532959",
    "end": "538120"
  },
  {
    "text": "surface so to fast ARPC messages efficiently we are facing basically",
    "start": "538120",
    "end": "543680"
  },
  {
    "text": "three challenges first there are huge amounts of default ERPC messages",
    "start": "543680",
    "end": "549399"
  },
  {
    "text": "systemwide most of them are critical to Windows system functionalities second RPC and COM are",
    "start": "549399",
    "end": "556720"
  },
  {
    "text": "different protocols so choose the right location to mutate the message is important for efficient testing and fing",
    "start": "556720",
    "end": "564240"
  },
  {
    "text": "third lots of applications contains hidden ARPC messages so we need to",
    "start": "564240",
    "end": "569360"
  },
  {
    "text": "trigger them as much as possible to increase the coverage of ARPC messages",
    "start": "569360",
    "end": "574880"
  },
  {
    "text": "so we propose our fuzzing solution the XERPC father for ARPC messages targeting",
    "start": "574880",
    "end": "581200"
  },
  {
    "text": "RPC and com service live and at scale so here is our design this figure",
    "start": "581200",
    "end": "588320"
  },
  {
    "text": "shows the overall design of our tool XRP files we perform fuzzing based on",
    "start": "588320",
    "end": "594399"
  },
  {
    "text": "targeting existing or triggered RPC and COM coursees the father basically",
    "start": "594399",
    "end": "600160"
  },
  {
    "text": "contains three parts first is trigger we need to trigger as much as ARPC messages",
    "start": "600160",
    "end": "606320"
  },
  {
    "text": "hidden everywhere on the Windows operating system the second is hook with",
    "start": "606320",
    "end": "612080"
  },
  {
    "text": "cracked hooking our father can intercept the com and RPC messages efficiently the",
    "start": "612080",
    "end": "617760"
  },
  {
    "text": "third is mutate and coverage and coverage monitor with specifically designed mutators and mutation",
    "start": "617760",
    "end": "625040"
  },
  {
    "text": "strategies we can reuse and mutate COM and RPC messages based on ARPC messages",
    "start": "625040",
    "end": "631200"
  },
  {
    "text": "level this gives us the advantage of detouring the complexity of COM and RPC",
    "start": "631200",
    "end": "637160"
  },
  {
    "text": "runtimes so and uh we'll show the results of several crashes at the server side which lead to memory corruptions in",
    "start": "637160",
    "end": "644640"
  },
  {
    "text": "privileged RPC and COM servers the key idea of XRPCA fuzzing is",
    "start": "644640",
    "end": "652720"
  },
  {
    "text": "to reusing existing ARPC messages the first problem is for father is where to",
    "start": "652720",
    "end": "658800"
  },
  {
    "text": "hook and what to mutate since common and RPC is our goal we intercept a RPC core",
    "start": "658800",
    "end": "665360"
  },
  {
    "text": "stack to expand our analyze obviously we can choose to mutate before the",
    "start": "665360",
    "end": "671360"
  },
  {
    "text": "marshalling procedure inside the RPC runtime or after it so if we choose to",
    "start": "671360",
    "end": "677519"
  },
  {
    "text": "mutate it right before the marshalling process we will get a lot of invalid",
    "start": "677519",
    "end": "682640"
  },
  {
    "text": "payloads because they can't they just simply cannot pass the RPC runtime check",
    "start": "682640",
    "end": "688880"
  },
  {
    "text": "if the mutation happens after the marshalling process the hook can mutate buffers just before the critical API",
    "start": "688880",
    "end": "696240"
  },
  {
    "text": "mentioned before narpc send receive port to send the data to the server so no",
    "start": "696240",
    "end": "703120"
  },
  {
    "text": "more checks before sending at the client",
    "start": "703120",
    "end": "707519"
  },
  {
    "text": "side the another question is how can we deploy our father efficiently we need to",
    "start": "708680",
    "end": "714720"
  },
  {
    "text": "deploy the father per process or and our goal is to deploy it in as many process",
    "start": "714720",
    "end": "720880"
  },
  {
    "text": "as possible as we can see there are so many components that contains CORM and",
    "start": "720880",
    "end": "726240"
  },
  {
    "text": "RPC communication messages in the Windows userland leading to ARPC messages spreading on the system at any",
    "start": "726240",
    "end": "733279"
  },
  {
    "text": "time in order to deploy XRPC hooks globally we implement our XRPC using a",
    "start": "733279",
    "end": "740000"
  },
  {
    "text": "kernel driver leveraging kernel APC cure mechanism to inject the hook code into",
    "start": "740000",
    "end": "746320"
  },
  {
    "text": "every user space process globally note that we cannot only inject common",
    "start": "746320",
    "end": "752480"
  },
  {
    "text": "RPC applications but also common RPC services because common RPC services can",
    "start": "752480",
    "end": "758800"
  },
  {
    "text": "also be clients for issuing any ARPC messages to other common RPC services",
    "start": "758800",
    "end": "765440"
  },
  {
    "text": "through this approach we can ensure that the coverage of our our method is suffic",
    "start": "765440",
    "end": "770720"
  },
  {
    "text": "is sufficiently comprehensive and another step is based",
    "start": "770720",
    "end": "777120"
  },
  {
    "text": "on the hook we need to make the XRPC father recognize which message is sent",
    "start": "777120",
    "end": "782880"
  },
  {
    "text": "from the client to the server and vice versa so that we can mutate the right correct message based on our reverse",
    "start": "782880",
    "end": "790639"
  },
  {
    "text": "engineering the key parameter for the NTRPC send weight receive port core is",
    "start": "790639",
    "end": "796079"
  },
  {
    "text": "the third parameter we name it send message X this parameter is of type P",
    "start": "796079",
    "end": "802160"
  },
  {
    "text": "port message and will be filled with RPC marsh body when the ERPC message is",
    "start": "802160",
    "end": "807839"
  },
  {
    "text": "carrying an RPC message by analyzing send message X we can judge if the",
    "start": "807839",
    "end": "814320"
  },
  {
    "text": "current message inter intercepted by our hook is RPC message or not so the send",
    "start": "814320",
    "end": "820880"
  },
  {
    "text": "receive message and the RPC bind message or not in this way we can determine the",
    "start": "820880",
    "end": "826160"
  },
  {
    "text": "real message that we we care about and the target we want to f we also log the",
    "start": "826160",
    "end": "831760"
  },
  {
    "text": "core stack when our trig our hook triggered to fil to filter npc send",
    "start": "831760",
    "end": "837920"
  },
  {
    "text": "receive part course from critical processes and modules if we try to f",
    "start": "837920",
    "end": "844079"
  },
  {
    "text": "critical processes arpc messages it will simply cause the whole system frozen or",
    "start": "844079",
    "end": "849519"
  },
  {
    "text": "not responding in very short period by filtering out certain processes and",
    "start": "849519",
    "end": "854720"
  },
  {
    "text": "modules we successfully deploy a XCRPC further in a more stable way and make it",
    "start": "854720",
    "end": "861120"
  },
  {
    "text": "to run on the live Windows operating system and for the mutation strategy",
    "start": "861120",
    "end": "869040"
  },
  {
    "text": "part the mutation replies on relies replies on ARPC message context reserved",
    "start": "869040",
    "end": "875279"
  },
  {
    "text": "from the original ARPC message the message is very varied using multiple",
    "start": "875279",
    "end": "880800"
  },
  {
    "text": "different mutation strategies carried out by our father the strategies proposed by our father focusing on",
    "start": "880800",
    "end": "887680"
  },
  {
    "text": "mutating two aspects the input fathers the input buffers and the ARPC messages",
    "start": "887680",
    "end": "893839"
  },
  {
    "text": "reply the father also combines two stab strategies together to form a more complex testing sequence each original",
    "start": "893839",
    "end": "901839"
  },
  {
    "text": "ARPC message will be mutated around 100 times on average based on all of the",
    "start": "901839",
    "end": "907760"
  },
  {
    "text": "different strategies this makes sure the mutator explore as much potential cases",
    "start": "907760",
    "end": "912880"
  },
  {
    "text": "as possible start from a normal user our goal is to trigger as much deep hidden",
    "start": "912880",
    "end": "920399"
  },
  {
    "text": "ARPC messages in the system as possible from a user's perspective lots of ARPC",
    "start": "920399",
    "end": "926320"
  },
  {
    "text": "messages are hidden in client program in client pro programs so the trigger",
    "start": "926320",
    "end": "932240"
  },
  {
    "text": "component tries to trigger DUI applications command line applications",
    "start": "932240",
    "end": "937920"
  },
  {
    "text": "schedule tasks and different system different kind of system services using",
    "start": "937920",
    "end": "943199"
  },
  {
    "text": "clicking input start schedule start and service start etc we trigger all",
    "start": "943199",
    "end": "950639"
  },
  {
    "text": "schedule tasks and restart all services registered on the Windows system to",
    "start": "950639",
    "end": "956320"
  },
  {
    "text": "activate as much ARPC messages as possible we involve random GUI clicking",
    "start": "956320",
    "end": "963440"
  },
  {
    "text": "and command line inputs to drive applications to send ARPC messages which",
    "start": "963440",
    "end": "969519"
  },
  {
    "text": "will be intercepted and caught by our father before sending to the server side in this way we make sure that we can",
    "start": "969519",
    "end": "976800"
  },
  {
    "text": "trigger as much hidden ERPC messages as",
    "start": "976800",
    "end": "981519"
  },
  {
    "text": "possible compared to fuzzing methods that do not support coverage coverage",
    "start": "981880",
    "end": "987440"
  },
  {
    "text": "guided fuzz has been proved to achieve higher efficiency and better results",
    "start": "987440",
    "end": "993480"
  },
  {
    "text": "however since ARPC fuzzing operate across processes the task of collecting",
    "start": "993480",
    "end": "999519"
  },
  {
    "text": "coverage data must be decoupled from a part containing the mutator which",
    "start": "999519",
    "end": "1005199"
  },
  {
    "text": "reduces testing efficiency to address this we need to deploy separately a",
    "start": "1005199",
    "end": "1011839"
  },
  {
    "text": "coverage tracker module in the server side but there are many many options",
    "start": "1011839",
    "end": "1017600"
  },
  {
    "text": "both software and hardware for software options we have tried the uh uh coverage",
    "start": "1017600",
    "end": "1025600"
  },
  {
    "text": "collector modules which need to inject a module software module into the target process to collect the coverage info but",
    "start": "1025600",
    "end": "1034000"
  },
  {
    "text": "that way is very low efficiency and uh it causes the server side to become",
    "start": "1034000",
    "end": "1039120"
  },
  {
    "text": "instable so instead we select the Intel PT hardware feature to support this step",
    "start": "1039120",
    "end": "1046079"
  },
  {
    "text": "and accelerate the testing process through lib XDC",
    "start": "1046079",
    "end": "1051160"
  },
  {
    "text": "decoding but there are certain limitations for Intel PT2 use uh for for",
    "start": "1051160",
    "end": "1056880"
  },
  {
    "text": "example the restriction of hardware requirement for new newer Intel CPUs and",
    "start": "1056880",
    "end": "1063360"
  },
  {
    "text": "different processes with different MSRs so we need to target uh one one server",
    "start": "1063360",
    "end": "1070000"
  },
  {
    "text": "side process at a time we cannot collect coverage from lots of serverside",
    "start": "1070000",
    "end": "1076080"
  },
  {
    "text": "processes at the same time it is hard to monitor all processes and threads all",
    "start": "1076080",
    "end": "1082360"
  },
  {
    "text": "together so basically for XRPC fing solution it is only capable of targeting",
    "start": "1082360",
    "end": "1088480"
  },
  {
    "text": "and tranking one server side process at a time due to the architectural design of",
    "start": "1088480",
    "end": "1096400"
  },
  {
    "text": "our Excel PC father it is often challenging to pinpoint the root cause",
    "start": "1096400",
    "end": "1101520"
  },
  {
    "text": "of a serverside crash intro induced by the server mutated inputs in many cases",
    "start": "1101520",
    "end": "1108640"
  },
  {
    "text": "reproducing a vulnerability can also be difficult to address this issue we aim",
    "start": "1108640",
    "end": "1114480"
  },
  {
    "text": "to g to g or gather more detailed information about the vulnerability",
    "start": "1114480",
    "end": "1119520"
  },
  {
    "text": "encompassing both the client side and the server sides to this end we need to",
    "start": "1119520",
    "end": "1125280"
  },
  {
    "text": "record additional data including our mutation strategy deployed in this this",
    "start": "1125280",
    "end": "1131039"
  },
  {
    "text": "round of fing and the mutated content of course for each ARPC message the message",
    "start": "1131039",
    "end": "1137200"
  },
  {
    "text": "sending sequence is also the key and the corresponding client and server UIDs to",
    "start": "1137200",
    "end": "1142720"
  },
  {
    "text": "make a mapping between the ARPC server and client and also the crash core stack",
    "start": "1142720",
    "end": "1149200"
  },
  {
    "text": "by leveraging these informations all together along with auxiliary methods we",
    "start": "1149200",
    "end": "1154240"
  },
  {
    "text": "can deploy and refine our root cause analyze",
    "start": "1154240",
    "end": "1159760"
  },
  {
    "text": "strategy okay now uh let me introduce several cases found by our Excel PC",
    "start": "1160679",
    "end": "1167440"
  },
  {
    "text": "father here's the one is a CVE 22 uh",
    "start": "1167440",
    "end": "1173080"
  },
  {
    "text": "2024 uh 38050 is a vulnerability in the Windows",
    "start": "1173080",
    "end": "1178720"
  },
  {
    "text": "workstation service aka WS service.dale is an essential and important RPC",
    "start": "1178720",
    "end": "1185520"
  },
  {
    "text": "service to perform tasks on computer remotely on a network including",
    "start": "1185520",
    "end": "1191000"
  },
  {
    "text": "configuring properties and behavior of a server message block network redirector",
    "start": "1191000",
    "end": "1197280"
  },
  {
    "text": "managing domain membership and computer names it need to be in uh uh it also",
    "start": "1197280",
    "end": "1203440"
  },
  {
    "text": "need to be noted that this service is enabled by default on the newest Windows 11",
    "start": "1203440",
    "end": "1210440"
  },
  {
    "text": "PCs such the number of enabled transport protocols and a number of uh current",
    "start": "1210440",
    "end": "1216320"
  },
  {
    "text": "logown users is also managed by this critical service this service also expose RPC interfaces for local users to",
    "start": "1216320",
    "end": "1224240"
  },
  {
    "text": "query information about the workstation during our fing we found a vulnerability",
    "start": "1224240",
    "end": "1230720"
  },
  {
    "text": "occurs in the DFS DS get DC name RPC interface inside the Dell which is which",
    "start": "1230720",
    "end": "1237360"
  },
  {
    "text": "which can be invoked where RPC and it's being triggered by our triging model by",
    "start": "1237360",
    "end": "1243520"
  },
  {
    "text": "ending a user inside the configuration manager of the MMC uh console if a",
    "start": "1243520",
    "end": "1250159"
  },
  {
    "text": "normal user invoked this interface using the crafted arguments a hip overflow",
    "start": "1250159",
    "end": "1255919"
  },
  {
    "text": "memory right would occur causing the elevation of pre privilege issue the",
    "start": "1255919",
    "end": "1261360"
  },
  {
    "text": "root cause of this bug is also caught and analyzed and found by our XRP PC",
    "start": "1261360",
    "end": "1266559"
  },
  {
    "text": "father and we found and we found the crash uh crash course uh through root",
    "start": "1266559",
    "end": "1273039"
  },
  {
    "text": "cause analyzes procedure and also can successfully reproduce the vulnerability",
    "start": "1273039",
    "end": "1279520"
  },
  {
    "text": "and we found the uh problem inside the DFSDS get DC name function the function",
    "start": "1279520",
    "end": "1285840"
  },
  {
    "text": "receives three parameters the third parameter is of type prc string it",
    "start": "1285840",
    "end": "1291760"
  },
  {
    "text": "structure is a inter is shown in the left and the core stack of the crush is",
    "start": "1291760",
    "end": "1298159"
  },
  {
    "text": "on the right so basically we what we do with our xrpc father is triggering the",
    "start": "1298159",
    "end": "1306000"
  },
  {
    "text": "core originally and then mutate the message based on the uh captured arpc",
    "start": "1306000",
    "end": "1312159"
  },
  {
    "text": "message through several runs of mutation we found and caught the crash dump of",
    "start": "1312159",
    "end": "1317919"
  },
  {
    "text": "this service uh there's a incorrect lens check lead to the crash and the stack",
    "start": "1317919",
    "end": "1324000"
  },
  {
    "text": "dump uh helps us to uh bring out the root cause of the",
    "start": "1324000",
    "end": "1331159"
  },
  {
    "text": "vulnerability here's another bug and is very interesting also caught by the PC",
    "start": "1331159",
    "end": "1337080"
  },
  {
    "text": "father when our trigger launches a PowerShell.exe exe by default the excl",
    "start": "1337080",
    "end": "1344000"
  },
  {
    "text": "PC father triggers a bug uh that cause directly a bsod that which is a very uh",
    "start": "1344000",
    "end": "1351039"
  },
  {
    "text": "classic bug on Windows operating systems and we uh begin our root cause analysis",
    "start": "1351039",
    "end": "1357520"
  },
  {
    "text": "we found the PSOD's course root cause is a service it crash uh it's a the crash",
    "start": "1357520",
    "end": "1365360"
  },
  {
    "text": "is inside the services.exe exe which is a very critical process on Windows when",
    "start": "1365360",
    "end": "1370640"
  },
  {
    "text": "the service dies the BSOD will happen so uh it's basically a problem still inside",
    "start": "1370640",
    "end": "1376880"
  },
  {
    "text": "the userland and and the services.exe is a important uh module component for",
    "start": "1376880",
    "end": "1384080"
  },
  {
    "text": "service control manager this service uh the services.exe exe crashes immediately",
    "start": "1384080",
    "end": "1390159"
  },
  {
    "text": "due to a hip autobound access leading to BSOD the corresponding mutator for",
    "start": "1390159",
    "end": "1396240"
  },
  {
    "text": "triggering this bug is a random replace two with a 0x FF so basically a very",
    "start": "1396240",
    "end": "1403120"
  },
  {
    "text": "simple mutator can trigger this bug the mutated ARPC message is then processed",
    "start": "1403120",
    "end": "1408960"
  },
  {
    "text": "as a server side resulting uh out of bound due to the lack of proper checking",
    "start": "1408960",
    "end": "1414080"
  },
  {
    "text": "of the input ARPC message buffer",
    "start": "1414080",
    "end": "1418919"
  },
  {
    "text": "so a simple summary of our XRP further part",
    "start": "1420400",
    "end": "1426280"
  },
  {
    "text": "uh further enhancing XRPCA testing capabilities there's a still a lot of",
    "start": "1426280",
    "end": "1431760"
  },
  {
    "text": "work to improve for example in scenarios with multiple clients under testing",
    "start": "1431760",
    "end": "1437840"
  },
  {
    "text": "windows may freeze or become unstable likely due to critical ARPC messages",
    "start": "1437840",
    "end": "1444400"
  },
  {
    "text": "being corrupted or being uh repeated ly sending to critical processes and",
    "start": "1444400",
    "end": "1450000"
  },
  {
    "text": "coverage for coverage information courage cannot be differentiated between",
    "start": "1450000",
    "end": "1455039"
  },
  {
    "text": "different requests generated by our pillows or the normal requests issued by",
    "start": "1455039",
    "end": "1460720"
  },
  {
    "text": "the normal kinds or different kind of RPC kinds or servers",
    "start": "1460720",
    "end": "1465919"
  },
  {
    "text": "uh and those normal program execution will influence our coverage collecting",
    "start": "1465919",
    "end": "1471039"
  },
  {
    "text": "module which makes it a judg error about the increase or decrease of coverage",
    "start": "1471039",
    "end": "1478320"
  },
  {
    "text": "which lead to a very instable and inaccurate coverage feedback information",
    "start": "1478320",
    "end": "1485279"
  },
  {
    "text": "so this uh these things will influence infect us the efficiency of our XLP PC",
    "start": "1485279",
    "end": "1490640"
  },
  {
    "text": "fuzzer which is a further enhanced feature that we need to consider okay the next part is XRP PC",
    "start": "1490640",
    "end": "1500440"
  },
  {
    "text": "monitor um okay good afternoon everyone my ranger and I'll bring the next part",
    "start": "1500440",
    "end": "1506080"
  },
  {
    "text": "the SLPC monitor so when we talk about infolique box uh",
    "start": "1506080",
    "end": "1511600"
  },
  {
    "text": "we usually think about autobound read issues but another infolique box uh caused by the initialized memory is easy",
    "start": "1511600",
    "end": "1518080"
  },
  {
    "text": "to overlook um as we know uh when a memory is freed it will be insert into",
    "start": "1518080",
    "end": "1523760"
  },
  {
    "text": "the free list of the hip manager so for the performance consideration the hip",
    "start": "1523760",
    "end": "1529279"
  },
  {
    "text": "manager will not clear the memory content uh therefore uh when this memory",
    "start": "1529279",
    "end": "1534880"
  },
  {
    "text": "is located again uh if the developer forgot to uh empty the memory content it",
    "start": "1534880",
    "end": "1540960"
  },
  {
    "text": "may contain some uh sensit sensit sensitive data such as",
    "start": "1540960",
    "end": "1546200"
  },
  {
    "text": "pointers uh as you can see in this code uh when using a str type with multiple",
    "start": "1546200",
    "end": "1552320"
  },
  {
    "text": "members uh because the size of each members may be different so there may be",
    "start": "1552320",
    "end": "1558000"
  },
  {
    "text": "alignment issues for example as you can see uh if the data one field is four",
    "start": "1558000",
    "end": "1563520"
  },
  {
    "text": "bytes and the data two field is eight bytes so there will be a gap memory",
    "start": "1563520",
    "end": "1569840"
  },
  {
    "text": "between these two members so if the developer forgot to empty the gap memory",
    "start": "1569840",
    "end": "1575440"
  },
  {
    "text": "uh the gap memory uh may contain some uninitialized data so how's the uh how's the",
    "start": "1575440",
    "end": "1583039"
  },
  {
    "text": "uninitialized data leak to the attackers uh let's review the AICO commission process uh as shown in the diagram the",
    "start": "1583039",
    "end": "1591120"
  },
  {
    "text": "client sends a request to code the service interface and this request will",
    "start": "1591120",
    "end": "1596159"
  },
  {
    "text": "be handled and reach the interface function in server side uh here we give a sample function uh do something uh",
    "start": "1596159",
    "end": "1603279"
  },
  {
    "text": "this function will uh uh generate a object uh and then uh marshall this",
    "start": "1603279",
    "end": "1610720"
  },
  {
    "text": "object into binary data through the uh marshalling process and and the marsh",
    "start": "1610720",
    "end": "1616880"
  },
  {
    "text": "data will subsequently send back to the client via AOPC so once the client receives the",
    "start": "1616880",
    "end": "1624960"
  },
  {
    "text": "messages the client side RPC runtime will generate the retrieved object based",
    "start": "1624960",
    "end": "1630720"
  },
  {
    "text": "based on the binary data through the unsho process so this is a simple",
    "start": "1630720",
    "end": "1636000"
  },
  {
    "text": "communication circle um during this process uh the leaked data is written",
    "start": "1636000",
    "end": "1641120"
  },
  {
    "text": "into the binary data in server side during the marshalling process and then",
    "start": "1641120",
    "end": "1646159"
  },
  {
    "text": "return to the client via APC so therefore the client only needs to read",
    "start": "1646159",
    "end": "1651520"
  },
  {
    "text": "the binary data in client side uh in client sidec level and then he can get",
    "start": "1651520",
    "end": "1656640"
  },
  {
    "text": "the leaked information so uh how to identify if the data is initialized if we are in client",
    "start": "1656640",
    "end": "1664240"
  },
  {
    "text": "side so we need to enable PG heap for all the system process because without",
    "start": "1664240",
    "end": "1670159"
  },
  {
    "text": "page heap uninitialized he memory may contain some unpredictable data uh",
    "start": "1670159",
    "end": "1675679"
  },
  {
    "text": "making it difficult to to determine which data is initialized uh but however",
    "start": "1675679",
    "end": "1681679"
  },
  {
    "text": "uh when the page he enabled uninitialized heap memory will be filled with a fixed value uh 0x e so this will",
    "start": "1681679",
    "end": "1690880"
  },
  {
    "text": "be be a good signature for us in uh in client side to identify the initialized",
    "start": "1690880",
    "end": "1698480"
  },
  {
    "text": "data so okay now uh we know the war buttons and know how to detect them it's",
    "start": "1698520",
    "end": "1704320"
  },
  {
    "text": "time to build out the monitor module um to detect this info league",
    "start": "1704320",
    "end": "1709679"
  },
  {
    "text": "bugs we decide to install hook in server side and hook the APC reply API before",
    "start": "1709679",
    "end": "1716320"
  },
  {
    "text": "the message is sent uh just like what we did in the fuzzing section but this time",
    "start": "1716320",
    "end": "1722240"
  },
  {
    "text": "we are in server side so uh after we complete the development according to",
    "start": "1722240",
    "end": "1728399"
  },
  {
    "text": "the experience of the fuzzing part uh several vulnerabilities were discovered in a short time uh but we quickly uh",
    "start": "1728399",
    "end": "1736000"
  },
  {
    "text": "realized that uh there are several issues coming um unlike in the fuzzing parts uh",
    "start": "1736000",
    "end": "1742640"
  },
  {
    "text": "fuzzing section uh uh in fuzzy section we can identify vulnerabilities by triging the crash uh but the info leak",
    "start": "1742640",
    "end": "1749840"
  },
  {
    "text": "uh due to the uninitialized memory does not lead to any memory corruptions so",
    "start": "1749840",
    "end": "1756080"
  },
  {
    "text": "the previous method doesn't work anymore in current situation uh one of the challenging here is at the APC level we",
    "start": "1756080",
    "end": "1764399"
  },
  {
    "text": "have no information about the vulnerable function as you can see at the background uh we can check the co stark",
    "start": "1764399",
    "end": "1771520"
  },
  {
    "text": "uh when the cons server reply the AOPC response the co stark is separate from",
    "start": "1771520",
    "end": "1777840"
  },
  {
    "text": "the vulnerable function so we cannot get the name of the vulnerable function from",
    "start": "1777840",
    "end": "1782960"
  },
  {
    "text": "directly from the stock so without this information even",
    "start": "1782960",
    "end": "1788399"
  },
  {
    "text": "even that we have uh found the initialized data we don't know how to",
    "start": "1788399",
    "end": "1793520"
  },
  {
    "text": "locate the root cause of the bug and we don't know how to reproduce it and uh the second challenge is uh for",
    "start": "1793520",
    "end": "1802640"
  },
  {
    "text": "the complex interface uh which m which with multiple uh out parameters the",
    "start": "1802640",
    "end": "1809360"
  },
  {
    "text": "structure for each parameters uh may be complex and a different object may have",
    "start": "1809360",
    "end": "1815600"
  },
  {
    "text": "different me memory layout as you can see at the background uh assuming that",
    "start": "1815600",
    "end": "1820640"
  },
  {
    "text": "uh we found the initialized data uh in the return buffer in the server side and the vulnerable function has multiple out",
    "start": "1820640",
    "end": "1828240"
  },
  {
    "text": "parameters uh because we don't have any extra information so how could we know",
    "start": "1828240",
    "end": "1833760"
  },
  {
    "text": "which object which out parameters cost the info leak uh one possible way we can",
    "start": "1833760",
    "end": "1839760"
  },
  {
    "text": "think is to uh reverse the vulnerable function and then manually check uh this",
    "start": "1839760",
    "end": "1846080"
  },
  {
    "text": "parameters one by one uh but this will take a lot of time on reverse",
    "start": "1846080",
    "end": "1851440"
  },
  {
    "text": "engineering uh especially when the internal implementation of the vulnerable function is very complex uh",
    "start": "1851440",
    "end": "1858320"
  },
  {
    "text": "this is uh this will be very terrible and it's very in inefficient uh we want to automatically",
    "start": "1858320",
    "end": "1867240"
  },
  {
    "text": "wait so um to solve these two challenges we decided to change our hook strategy",
    "start": "1867240",
    "end": "1874159"
  },
  {
    "text": "for the monitor uh for the challenge one uh we need to know the vulnerable function",
    "start": "1874159",
    "end": "1879520"
  },
  {
    "text": "name uh to solve that uh we decided to install an extra hook as a RPC4 invoke",
    "start": "1879520",
    "end": "1886960"
  },
  {
    "text": "function if you are familiar with RPC con windows you should know this",
    "start": "1886960",
    "end": "1892240"
  },
  {
    "text": "function is the entry point for the for all of the RPC con interface course uh",
    "start": "1892240",
    "end": "1898480"
  },
  {
    "text": "all the RPC requests will be handled and goes and uh goes through this function",
    "start": "1898480",
    "end": "1903919"
  },
  {
    "text": "uh to reach the target interface target interface function so the first parameter of this",
    "start": "1903919",
    "end": "1910799"
  },
  {
    "text": "function uh is is is the target function A and this is what we are looking for so",
    "start": "1910799",
    "end": "1917200"
  },
  {
    "text": "we just need to uh record this address as a global position so we can use this",
    "start": "1917200",
    "end": "1922799"
  },
  {
    "text": "address later just from the global position so and uh uh for challenge two",
    "start": "1922799",
    "end": "1931200"
  },
  {
    "text": "uh for challenge two we need to know which parameter the info leak uh to solve to solve that we decide to uh hook",
    "start": "1931200",
    "end": "1940159"
  },
  {
    "text": "the marshall process instead uh as you can see uh in the left diagram uh all",
    "start": "1940159",
    "end": "1945760"
  },
  {
    "text": "all the all the parameters will be handled uh during this period uh and",
    "start": "1945760",
    "end": "1950799"
  },
  {
    "text": "then the message will be handled uh will be sent uh passed to the RPC level so",
    "start": "1950799",
    "end": "1957200"
  },
  {
    "text": "this enable us to achieve the same result as hooking uh APC",
    "start": "1957200",
    "end": "1962760"
  },
  {
    "text": "level uh to achieve that uh we decided to rewrite the marshall process uh we",
    "start": "1962760",
    "end": "1970960"
  },
  {
    "text": "can call the uh we can enam the out parameters of the interface function and",
    "start": "1970960",
    "end": "1976960"
  },
  {
    "text": "uh we can call the marshall handler uh uh of each auto parameters one by one",
    "start": "1976960",
    "end": "1982960"
  },
  {
    "text": "and once we found that a oh sorry and we once we found that the return buffer",
    "start": "1982960",
    "end": "1989760"
  },
  {
    "text": "contest the initialized data and this means bingo we found the vulnerability",
    "start": "1989760",
    "end": "1996519"
  },
  {
    "text": "so at this time we just need to uh record the parameter index and obtain",
    "start": "1996519",
    "end": "2003279"
  },
  {
    "text": "the function address from the global position uh from the previous step then",
    "start": "2003279",
    "end": "2008880"
  },
  {
    "text": "we just need to save the result into our log and this will help us to reproduce",
    "start": "2008880",
    "end": "2015360"
  },
  {
    "text": "this bug okay um let me show you an example",
    "start": "2015360",
    "end": "2020960"
  },
  {
    "text": "of vulnerability uh that discovered by XPC monitor uh this is a Windows printer",
    "start": "2020960",
    "end": "2026480"
  },
  {
    "text": "spooler uh information leak bugs uh the this bug uh exists in the RPC interface",
    "start": "2026480",
    "end": "2034159"
  },
  {
    "text": "get the printer of Windows uh of print service of Windows uh this function is",
    "start": "2034159",
    "end": "2041840"
  },
  {
    "text": "used to query uh some printer printer related informations",
    "start": "2041840",
    "end": "2048480"
  },
  {
    "text": "uh so uh when quiring uh such as security attributes the the printer service will generate generate a buffer",
    "start": "2048480",
    "end": "2056960"
  },
  {
    "text": "of the printer and initialize it uh the issue here is that uh this function does",
    "start": "2056960",
    "end": "2062960"
  },
  {
    "text": "not clear uh fully clear the memory during the initialization and the",
    "start": "2062960",
    "end": "2070000"
  },
  {
    "text": "information uh doesn't fully cover the SEO buffer so uh if we look at this code directly",
    "start": "2070000",
    "end": "2078560"
  },
  {
    "text": "when we do reverse engineering uh it's hard to say if there is a infolique box",
    "start": "2078560",
    "end": "2083679"
  },
  {
    "text": "uh however uh through our monitor it can quickly find this uh it can quickly find",
    "start": "2083679",
    "end": "2090398"
  },
  {
    "text": "that the tail of the buffer contains uh eight bytes initialized contents uh this",
    "start": "2090399",
    "end": "2097359"
  },
  {
    "text": "means the total ACL size is larger than the uh expected size so all we need all we need",
    "start": "2097359",
    "end": "2106640"
  },
  {
    "text": "to do is just to trig this function and then the rest will be handled by our",
    "start": "2106640",
    "end": "2112480"
  },
  {
    "text": "monitor uh it will automatically found this type of issues for",
    "start": "2112480",
    "end": "2118520"
  },
  {
    "text": "us and this is another vulnerabilities uh that's reported by XPC uh this",
    "start": "2118520",
    "end": "2125440"
  },
  {
    "text": "vulnerability occurs when the count runtime marshall marshall the bstream object uh calling the bream user",
    "start": "2125440",
    "end": "2133119"
  },
  {
    "text": "marshall 64 function uh the implementation of this function is very simple uh it aligns the",
    "start": "2133119",
    "end": "2140720"
  },
  {
    "text": "buffer to eight bytes by calling the function align pointer",
    "start": "2140720",
    "end": "2146040"
  },
  {
    "text": "uh uh and and and then it will generate the header and the body field according",
    "start": "2146040",
    "end": "2151839"
  },
  {
    "text": "to the information of the B string object and and and generates a binary",
    "start": "2151839",
    "end": "2157599"
  },
  {
    "text": "data so the issue here is if the data is aligned to eight bytes there will be no",
    "start": "2157599",
    "end": "2163839"
  },
  {
    "text": "issues but if the buffer is not aligned to eight bytes for example the last byes",
    "start": "2163839",
    "end": "2169680"
  },
  {
    "text": "of the buffer is four and then the last last bytes of the buffer after the",
    "start": "2169680",
    "end": "2175200"
  },
  {
    "text": "alignment will be eight so the data from offset four to offset eight will be",
    "start": "2175200",
    "end": "2181599"
  },
  {
    "text": "skipped and the skipped gap memory will be uh returned back to the caller uh",
    "start": "2181599",
    "end": "2187920"
  },
  {
    "text": "thus cost the info leak info leak uh as we know uh B string is used almost",
    "start": "2187920",
    "end": "2194079"
  },
  {
    "text": "everywhere in Windows therefore this vulnerability should have exist when Windows con was",
    "start": "2194079",
    "end": "2201119"
  },
  {
    "text": "created but it has been ignored for several years however through our",
    "start": "2201119",
    "end": "2206320"
  },
  {
    "text": "monitor we can quickly discover this type of vulnerabilities",
    "start": "2206320",
    "end": "2212680"
  },
  {
    "text": "so well uh once we have uh uh initiate the memory leak box uh we can leak the",
    "start": "2213599",
    "end": "2220079"
  },
  {
    "text": "heap address within the Abiscom service to bypass ASL through uh appropriate",
    "start": "2220079",
    "end": "2227760"
  },
  {
    "text": "hippo location and deallocation uh for for example assuming that there is a con",
    "start": "2227760",
    "end": "2233760"
  },
  {
    "text": "object uh which has multiple internal pointers this is a common situation uh",
    "start": "2233760",
    "end": "2239040"
  },
  {
    "text": "if the internal pointer memory offset uh is the same with the initialized memory",
    "start": "2239040",
    "end": "2245280"
  },
  {
    "text": "offset this this means they are over overlapped so we can try to allocate",
    "start": "2245280",
    "end": "2251680"
  },
  {
    "text": "this con object and then we free this object and we try to make the vulnerable",
    "start": "2251680",
    "end": "2257440"
  },
  {
    "text": "function to reallocate the freed object con object memory buffer again so in",
    "start": "2257440",
    "end": "2263839"
  },
  {
    "text": "this way uh we can uh read out the internal pointer values from the server",
    "start": "2263839",
    "end": "2269880"
  },
  {
    "text": "side uh for the user mode memory corruption uh exploitations uh",
    "start": "2269880",
    "end": "2276320"
  },
  {
    "text": "information leak bugs is often important especially when we uh need to construct",
    "start": "2276320",
    "end": "2283200"
  },
  {
    "text": "a fake object to for for our use in server side uh when we need a hip",
    "start": "2283200",
    "end": "2289680"
  },
  {
    "text": "address this will help us a lot so okay um the the final part the",
    "start": "2289680",
    "end": "2300799"
  },
  {
    "text": "summary so um in this talk we present XLPC files and XPC monitor module uh",
    "start": "2300839",
    "end": "2309680"
  },
  {
    "text": "both of them has a as a hook based framework to f and monitor Windows RPC",
    "start": "2309680",
    "end": "2316079"
  },
  {
    "text": "com messages uh for the fuzzing part is a client side hook is automatically uh",
    "start": "2316079",
    "end": "2322320"
  },
  {
    "text": "mutate APC messages uh based on the existing messages uh to discover",
    "start": "2322320",
    "end": "2328520"
  },
  {
    "text": "vulnerabilities for the monitor part is a server side hook is monitor and",
    "start": "2328520",
    "end": "2334400"
  },
  {
    "text": "identify leaked memory information in in the RPC messages so we use uh this tool",
    "start": "2334400",
    "end": "2342160"
  },
  {
    "text": "to find the Windows RPC vulnerabilities automatically in total we found more than 10 CVE uh by using this",
    "start": "2342160",
    "end": "2352440"
  },
  {
    "text": "framework so of course uh this should not be the end of this work our f and",
    "start": "2352440",
    "end": "2358560"
  },
  {
    "text": "monitor can be improved or to further improve it one direction is to trig as",
    "start": "2358560",
    "end": "2364240"
  },
  {
    "text": "many RPC concourse as possible uh here we can think of two ways uh we can run",
    "start": "2364240",
    "end": "2370960"
  },
  {
    "text": "Windows client applications and play various features provided by Windows as",
    "start": "2370960",
    "end": "2376480"
  },
  {
    "text": "much as possible uh and or we can uh generate the client code for the RPCON",
    "start": "2376480",
    "end": "2382480"
  },
  {
    "text": "service uh to to interact with the uh RPCON service and cover as many",
    "start": "2382480",
    "end": "2390320"
  },
  {
    "text": "functionalities as possible uh another direction is to",
    "start": "2390320",
    "end": "2395359"
  },
  {
    "text": "improve the uh mutation algorithm for example we can uh mutate based on the",
    "start": "2395359",
    "end": "2401920"
  },
  {
    "text": "NDR format and or we can do coverage guide",
    "start": "2401920",
    "end": "2407838"
  },
  {
    "text": "mutations okay um that's all of the content of this talk thank you everyone",
    "start": "2408040",
    "end": "2413920"
  },
  {
    "text": "for joining this talk [Applause]",
    "start": "2413920",
    "end": "2422749"
  }
]