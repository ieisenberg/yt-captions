[
  {
    "start": "0",
    "end": "73000"
  },
  {
    "text": "good morning everyone um we're going to go ahead and get started um welcome to",
    "start": "320",
    "end": "6480"
  },
  {
    "text": "Windows 10 segment Heap internals we are in South Seas",
    "start": "6480",
    "end": "11960"
  },
  {
    "text": "sea your speaker today is Mark Vincent yassen so before we begin just a couple",
    "start": "11960",
    "end": "18520"
  },
  {
    "text": "of brief notes you'll be hearing these over the course of the day um please stop by the business Hall which is",
    "start": "18520",
    "end": "24000"
  },
  {
    "text": "located downstairs in Bayside AB the black hat Arsenal is on the PO Palm",
    "start": "24000",
    "end": "30160"
  },
  {
    "text": "foyer up here and of course the Arsenal reception is at 5:00 p.m. if you haven't",
    "start": "30160",
    "end": "35960"
  },
  {
    "text": "picked up your merchandise today is your last chance to visit the black hat swagen bookstore and we encourage you to",
    "start": "35960",
    "end": "42840"
  },
  {
    "text": "visit the Kali Linux lab in Mandalay Bay a thank you for putting your phone on",
    "start": "42840",
    "end": "48199"
  },
  {
    "text": "vibrate without further Ado your",
    "start": "48199",
    "end": "52600"
  },
  {
    "text": "speaker uh good morning everyone and uh thanks for presenting my talk uh I'm Mark Vincent yasson I'm from ibmx force",
    "start": "57199",
    "end": "64559"
  },
  {
    "text": "and today I'm going to share with you my research of the new hip implementation in Windows 10 called uh the segment",
    "start": "64559",
    "end": "72399"
  },
  {
    "start": "73000",
    "end": "73000"
  },
  {
    "text": "Heap my talk is uh consist of three parts the internals where I'll talk about the architecture and uh different",
    "start": "73360",
    "end": "80159"
  },
  {
    "text": "components of the segment Heap the security mechanisms where I'll talk about the different mechanisms in place",
    "start": "80159",
    "end": "85960"
  },
  {
    "text": "that uh make it difficult or unreliable to attack Heap metadata and in certain cases uh makes it",
    "start": "85960",
    "end": "92280"
  },
  {
    "text": "unreliable to manipulate the layout of the Heap cases study is where I'll",
    "start": "92280",
    "end": "98119"
  },
  {
    "text": "discuss and how to manipulate the layout of the Heap that is managed by the segment Heap in order to uh reliably uh",
    "start": "98119",
    "end": "104479"
  },
  {
    "text": "leverage a memory corruption vulnerability for an for an arbitrary right in the context of the edge content",
    "start": "104479",
    "end": "111200"
  },
  {
    "text": "process and the demonstration will follow some notes before we proceed uh",
    "start": "111200",
    "end": "118159"
  },
  {
    "text": "very detailed white paper uh is available which you should be able to download from black blackhe Hat's",
    "start": "118159",
    "end": "123840"
  },
  {
    "text": "webbsite sometime after it's stock and it is uh it contains the details about the data structures the diagrams of the",
    "start": "123840",
    "end": "130599"
  },
  {
    "text": "algorithms and names of internal functions in case you are interested in doing your own research of the segment",
    "start": "130599",
    "end": "137080"
  },
  {
    "text": "sheap also this paper and uh presentation is uh based on the 64bit ndl from Windows 10 red Redstone one",
    "start": "137080",
    "end": "145000"
  },
  {
    "text": "preview build uh 14295",
    "start": "145000",
    "end": "149160"
  },
  {
    "text": "so with that let's begin here's the architecture of the",
    "start": "151000",
    "end": "156040"
  },
  {
    "start": "153000",
    "end": "153000"
  },
  {
    "text": "segment Heap it consists of a four components the back end part here uses the NT memory manager",
    "start": "156040",
    "end": "164120"
  },
  {
    "text": "apis for creating and uh managing the segments where back end blocks are uh",
    "start": "164120",
    "end": "169239"
  },
  {
    "text": "allocated from and on the top of that is the low fragmentation Heap or lfh it is",
    "start": "169239",
    "end": "174680"
  },
  {
    "text": "similar in purpose to the lfh in the older Hep implementation but as you see",
    "start": "174680",
    "end": "179879"
  },
  {
    "text": "see later the data structures used are different the lfh depends on the back",
    "start": "179879",
    "end": "184959"
  },
  {
    "text": "end for creating the lfh sub segments where the lfh blocks are allocated",
    "start": "184959",
    "end": "191200"
  },
  {
    "text": "from another another component on the top of the back end is the variable size allocation component or vs it also uses",
    "start": "191200",
    "end": "198840"
  },
  {
    "text": "the back end to create the vs Sub segments where uh VSS blocks are allocated",
    "start": "198840",
    "end": "203920"
  },
  {
    "text": "from from its name it's a difference from the lfh is that in vs the blocks",
    "start": "203920",
    "end": "209959"
  },
  {
    "text": "the VSS Subs segments are variable in size it starts with a large free block",
    "start": "209959",
    "end": "216280"
  },
  {
    "text": "and then it is split into different sizes as allocation request comes in",
    "start": "216280",
    "end": "221680"
  },
  {
    "text": "finally the large blocks allocation component here uh Services a large allocation",
    "start": "221680",
    "end": "227959"
  },
  {
    "text": "request it uh it directly uses the ENT memory manager apis for the allocation",
    "start": "227959",
    "end": "233959"
  },
  {
    "text": "and the freeing of the large blocks another part to notice is that uh for allocation said less than or equal",
    "start": "233959",
    "end": "241120"
  },
  {
    "text": "to 16,3 368 bytes the allocation request will be",
    "start": "241120",
    "end": "246840"
  },
  {
    "text": "serviced which will only be serviced by the lfh if the lfh bucket for that uh",
    "start": "246840",
    "end": "252360"
  },
  {
    "text": "particular allocation size is uh is activated if not activated it will be uh",
    "start": "252360",
    "end": "257479"
  },
  {
    "text": "serviced by the variable size allocation",
    "start": "257479",
    "end": "262040"
  },
  {
    "text": "component so when is the segment chip enabled in the process So currently it is an upend feature a Windows app",
    "start": "262759",
    "end": "269840"
  },
  {
    "text": "formerly called modern or Metro apps are opted in by default this includes uh",
    "start": "269840",
    "end": "276320"
  },
  {
    "text": "apps from the Windows store and more importantly uh Microsoft Edge dependencies or uh components used",
    "start": "276320",
    "end": "284039"
  },
  {
    "text": "by Edge that do not use a custom hip manager will uh will use the segment Hep",
    "start": "284039",
    "end": "289560"
  },
  {
    "text": "additionally executables uh with those listed names are also obtained by default this uh this Encompass the",
    "start": "289560",
    "end": "296120"
  },
  {
    "text": "different uh system processes the older Heap implementation the antip is still the default use for a",
    "start": "296120",
    "end": "302800"
  },
  {
    "text": "traditional uh win32 applications if you want to enable or",
    "start": "302800",
    "end": "309800"
  },
  {
    "start": "306000",
    "end": "306000"
  },
  {
    "text": "disable segment Hep for a particular executable you can use the front end hip debug option in the image file execution",
    "start": "309800",
    "end": "317560"
  },
  {
    "text": "uh options uh register entry or if you want to enable the disabled segment Heap",
    "start": "317560",
    "end": "322600"
  },
  {
    "text": "for for our executables you can modify the enabled entry in the segment TI key",
    "start": "322600",
    "end": "328880"
  },
  {
    "text": "under the current control set control session uh manager uh register",
    "start": "328880",
    "end": "334919"
  },
  {
    "start": "335000",
    "end": "335000"
  },
  {
    "text": "key so for an illustration here's an uh here's the edge content process hips when uh Edge is initially loaded as you",
    "start": "336000",
    "end": "343639"
  },
  {
    "text": "can see the default process hip the first hip in the list is managed by the segment Hep also the msvcrt Hep the",
    "start": "343639",
    "end": "350880"
  },
  {
    "text": "third hip in the list is also managed by the segment Hep a thing to note that even if a segment hip is enabled in the",
    "start": "350880",
    "end": "357160"
  },
  {
    "text": "process not all hips created by the process will will use uh we use the segment Heap example of these are the",
    "start": "357160",
    "end": "364240"
  },
  {
    "text": "shared heaps and heaps that are not growable in the illustration the second Hep is a shared Hep and therefore it is",
    "start": "364240",
    "end": "371199"
  },
  {
    "text": "still managed by the anti Hep next in this in this presentation I",
    "start": "371199",
    "end": "378560"
  },
  {
    "text": "will be uh mentioning about the hip base the hip base is the address returned by hip create or RTL create hip when the",
    "start": "378560",
    "end": "385759"
  },
  {
    "text": "hip is created you can quickly check if a hip is uh managed by the segment Heat by looking at the dword at uh offset 10",
    "start": "385759",
    "end": "393440"
  },
  {
    "text": "hex if the value is DDE DDE it means that it is managed by the segment Heap",
    "start": "393440",
    "end": "400479"
  },
  {
    "text": "at the top of the Heap base is the segment Heap structure here it contains",
    "start": "400479",
    "end": "405759"
  },
  {
    "text": "the state of the four uh segment component such as the large block allocation uh the back end the",
    "start": "405759",
    "end": "412840"
  },
  {
    "text": "structures for tracking the VSS and lfh state are more complex and therefore",
    "start": "412840",
    "end": "418280"
  },
  {
    "text": "they are stored as a sub structure called uh uh vs context and lfh",
    "start": "418280",
    "end": "423520"
  },
  {
    "text": "context also uh since the lfh buckets are dynamically activated at run time",
    "start": "423520",
    "end": "429520"
  },
  {
    "text": "instead of being uh stored in this LF context the reserve memory below the",
    "start": "429520",
    "end": "435360"
  },
  {
    "text": "segment hip here is dynamically Comm committed to uh store uh elev bucket related structures",
    "start": "435360",
    "end": "443759"
  },
  {
    "text": "and that is why the lower part of the heat base is called the LF Contex extension",
    "start": "443759",
    "end": "450759"
  },
  {
    "text": "Al so after discussing the architecture and configuration and the Hep base I'll now discuss the four different",
    "start": "452240",
    "end": "457840"
  },
  {
    "text": "components of the segment Heap and I'm going to start with the back end so the back end is used for",
    "start": "457840",
    "end": "464639"
  },
  {
    "text": "allocation sizes greater than 128 to 58 uh KB and the back end blocks have a",
    "start": "464639",
    "end": "471319"
  },
  {
    "text": "page size allocation granularity the back end operates on a segment structures here which are 1 Megabyte",
    "start": "471319",
    "end": "478759"
  },
  {
    "text": "chunks of virtual memory allocated via NT allocate virtual memory and the segments owned by the Heap are tracked",
    "start": "478759",
    "end": "486000"
  },
  {
    "text": "by the segment list head found in the hip base and the segment is consists of two",
    "start": "486000",
    "end": "492039"
  },
  {
    "text": "parts the segment the segment header and the data part where the black backend blocks are allocated",
    "start": "492039",
    "end": "500120"
  },
  {
    "text": "from so uh zooming in on the on the segment so the header is consists of a",
    "start": "500639",
    "end": "506080"
  },
  {
    "text": "page range descriptors here that describes each page in the segments",
    "start": "506080",
    "end": "512800"
  },
  {
    "text": "uh there's one uh page range descriptor for every page for example a page range descriptor 2 uh describes this page and",
    "start": "512800",
    "end": "520000"
  },
  {
    "text": "Page range descriptor three describes uh this page one of the main fields in the page",
    "start": "520000",
    "end": "526320"
  },
  {
    "text": "range descriptor is the range flag here uh it is a bit flag that describes",
    "start": "526320",
    "end": "533200"
  },
  {
    "text": "whether the page is uh committed or uh busy or allocated next uh because uh backend",
    "start": "533200",
    "end": "540480"
  },
  {
    "text": "blocks can span multiple Pages there is what is called a first uh",
    "start": "540480",
    "end": "545880"
  },
  {
    "text": "page to arrange descriptors which are basically the page range descriptor for the first page of the backend",
    "start": "545880",
    "end": "552600"
  },
  {
    "text": "block uh first page uh range descriptor are marked as such by the the first flag",
    "start": "552600",
    "end": "558640"
  },
  {
    "text": "in the range flag field and they have additional field set such as the size field which is equal to",
    "start": "558640",
    "end": "566560"
  },
  {
    "text": "the size of the backend block uh in pages finally another important item to",
    "start": "566560",
    "end": "571720"
  },
  {
    "text": "discuss is that for uh for free backend blocks their first page range descriptor",
    "start": "571720",
    "end": "576959"
  },
  {
    "text": "is inserted to a back end a free tree and when inserting the first page range",
    "start": "576959",
    "end": "582240"
  },
  {
    "text": "descriptor the key field here is used I'll further discuss the back backend",
    "start": "582240",
    "end": "588560"
  },
  {
    "text": "free tree and and the key field in the later",
    "start": "588560",
    "end": "593320"
  },
  {
    "start": "593000",
    "end": "593000"
  },
  {
    "text": "slide here is an example of a set of page train descriptors uh that describes BC block",
    "start": "593839",
    "end": "600040"
  },
  {
    "text": "uh page range descriptor two describes this this page and then page range descriptor three describes this",
    "start": "600040",
    "end": "606360"
  },
  {
    "text": "page they St they state that the pages are both uh committed here and then uh",
    "start": "606360",
    "end": "612440"
  },
  {
    "text": "allocated means uh which means busy uh also the page range descriptor uh for",
    "start": "612440",
    "end": "617760"
  },
  {
    "text": "page two which is the start of the block is marked as the first here and",
    "start": "617760",
    "end": "624480"
  },
  {
    "text": "therefore the size field is to is the total number of pages of the backend block",
    "start": "624480",
    "end": "631320"
  },
  {
    "start": "631000",
    "end": "631000"
  },
  {
    "text": "so to track the free back backend blocks the first page range descriptor of a",
    "start": "633040",
    "end": "638079"
  },
  {
    "text": "free backend blocks as I previously mentioned uh are inserted to this uh backend free tree the key use for",
    "start": "638079",
    "end": "645480"
  },
  {
    "text": "inserting notes to this uh back end free tree is a word size value in which the high bite is uh is the number of pages",
    "start": "645480",
    "end": "652560"
  },
  {
    "text": "of the back end block so here 23 and then 21 and then uh",
    "start": "652560",
    "end": "657959"
  },
  {
    "text": "4f and low bite is the encoded commit count now uh encoded commit count is",
    "start": "657959",
    "end": "663839"
  },
  {
    "text": "equivalent to the bitwise nut of the number of committed pages that the block",
    "start": "663839",
    "end": "669000"
  },
  {
    "text": "has in this example the blocks are fully decommitted and that's why their value are",
    "start": "669000",
    "end": "674839"
  },
  {
    "text": "FFX the key is uh set up this way so that uh when searching for uh free backend blocks uh a best fit search is",
    "start": "674839",
    "end": "682600"
  },
  {
    "text": "done and the most committed blocks are given preference so in other words if uh",
    "start": "682600",
    "end": "688279"
  },
  {
    "text": "two blocks we equal size will fit the allocation request the most committed block will be",
    "start": "688279",
    "end": "695519"
  },
  {
    "text": "selected so for allocation as I mentioned uh best fit search is done with the most committed block uh given",
    "start": "695560",
    "end": "701600"
  },
  {
    "text": "preference if a large block is selected the large block is split and for for for",
    "start": "701600",
    "end": "707800"
  },
  {
    "text": "freeing the to be to be freed block is coales with neighboring free blocks to",
    "start": "707800",
    "end": "712839"
  },
  {
    "text": "reduce a fragmentation so that's the back end and",
    "start": "712839",
    "end": "718800"
  },
  {
    "text": "now the second second component the variable size allocation variable size allocation or",
    "start": "718800",
    "end": "725480"
  },
  {
    "start": "723000",
    "end": "723000"
  },
  {
    "text": "VSS is a used for allocation sizes less than or equal to 12 128 KB and have 16",
    "start": "725480",
    "end": "732160"
  },
  {
    "text": "bytes allocation granularity BC blocks have a 16 by header at the beginning of each block",
    "start": "732160",
    "end": "739120"
  },
  {
    "text": "and VSS blocks are allocated from a vs Sub segments here which are just a",
    "start": "739120",
    "end": "744519"
  },
  {
    "text": "special type of a back and block and VSS Subs segments are tracked using the sub",
    "start": "744519",
    "end": "749680"
  },
  {
    "text": "segment list here found in the vs context field in the Hep",
    "start": "749680",
    "end": "755560"
  },
  {
    "text": "base and then zooming into a vs Sub segment two of the most important Fields",
    "start": "755680",
    "end": "761720"
  },
  {
    "start": "756000",
    "end": "756000"
  },
  {
    "text": "is the commit bit map which is uh which tracks which part of the vs Sub segment",
    "start": "761720",
    "end": "767040"
  },
  {
    "text": "are uh are committed and the other one is the size of the vs Sub",
    "start": "767040",
    "end": "772600"
  },
  {
    "text": "segment so after offset uh 30X is where the vs blocks are are located",
    "start": "772600",
    "end": "779880"
  },
  {
    "text": "so when a new Subs when a new vs Subs segment is uh created the whole area here is a one large uh one large fre",
    "start": "779880",
    "end": "787600"
  },
  {
    "text": "free block it is just split into different sizes as allocation request uh comes",
    "start": "787600",
    "end": "794360"
  },
  {
    "start": "794000",
    "end": "794000"
  },
  {
    "text": "in so of all the different components of the segment Heap only the vs blocks have",
    "start": "795199",
    "end": "800480"
  },
  {
    "text": "a header at the beginning of each block BC blocks have 16 by header",
    "start": "800480",
    "end": "806880"
  },
  {
    "text": "here and the first8 by is uh are are encoded I'll discuss the encoding in the",
    "start": "806880",
    "end": "812880"
  },
  {
    "text": "security mechanisms part of the talk so the the first 8 by of this BC block",
    "start": "812880",
    "end": "818079"
  },
  {
    "text": "header is also found in the in the header of a of a free BS",
    "start": "818079",
    "end": "823320"
  },
  {
    "text": "block and the memory cost field is a is only significant in previous blocks",
    "start": "823320",
    "end": "831480"
  },
  {
    "text": "is is it is a value computed based on how much portion of the freebs block is",
    "start": "831480",
    "end": "837040"
  },
  {
    "text": "committed the more portion of the free Block is a uh the more portion of free",
    "start": "837040",
    "end": "842120"
  },
  {
    "text": "block has is H committed the lower memory the lower the memory cost is so",
    "start": "842120",
    "end": "848199"
  },
  {
    "text": "unsafe size is the size of the block and the unsafe previous size is the size of",
    "start": "848199",
    "end": "854440"
  },
  {
    "text": "the previous block and the allocated field is a non-zero value if the block is",
    "start": "854440",
    "end": "860040"
  },
  {
    "text": "busy so another important field is the is the bit here it is the ause uh news",
    "start": "860040",
    "end": "866160"
  },
  {
    "text": "bite field uh it is the bit that uh means that there's a difference between the user requested size and the total",
    "start": "866160",
    "end": "873320"
  },
  {
    "text": "block size which happens due to the allocation of granularity the value of the difference",
    "start": "873320",
    "end": "879320"
  },
  {
    "text": "is is stored at the end of the vs blocks in the last two bytes finally the free BS blocks are",
    "start": "879320",
    "end": "886360"
  },
  {
    "text": "node of the VSS free tree and that is why there's a Noe field here starting at",
    "start": "886360",
    "end": "891600"
  },
  {
    "text": "upset eight so similar to the back end uh vs",
    "start": "891600",
    "end": "898639"
  },
  {
    "start": "894000",
    "end": "894000"
  },
  {
    "text": "also has a free tree for tracking the free vs blocks the notes of the free tree are the free vs blocks header and",
    "start": "898639",
    "end": "906399"
  },
  {
    "text": "the key for inserting noes to the free tree is a DW size value in which the high word is the size of the block here",
    "start": "906399",
    "end": "913519"
  },
  {
    "text": "0 1 01 0 f8 and then 0 03 01 and the lower is the memory cost",
    "start": "913519",
    "end": "921320"
  },
  {
    "text": "which I previously discussed the more committed portion of the block the lower the memory cost is so similar to the",
    "start": "921320",
    "end": "929279"
  },
  {
    "text": "back end the key is set up that way so that when searching for free BS blocks a",
    "start": "929279",
    "end": "934440"
  },
  {
    "text": "best fit search is done with the most committed blocks uh given preference in",
    "start": "934440",
    "end": "939519"
  },
  {
    "text": "other words if two BS blocks with equal size will fit the allocation request the most committed block will be",
    "start": "939519",
    "end": "947000"
  },
  {
    "start": "947000",
    "end": "947000"
  },
  {
    "text": "selected for the allocation as I mentioned uh best fit search with a preference to the most committed block",
    "start": "948240",
    "end": "953959"
  },
  {
    "text": "is conducted and large free blocks are split unless the the size of the",
    "start": "953959",
    "end": "959680"
  },
  {
    "text": "resulting uh remaining block will be less than 20 hex bytes because the 20x",
    "start": "959680",
    "end": "964759"
  },
  {
    "text": "bytes is the size of a free vs block haer so for freeing the to be freed",
    "start": "964759",
    "end": "970120"
  },
  {
    "text": "block is a coales with the neighboring freed blocks to reduce",
    "start": "970120",
    "end": "975560"
  },
  {
    "text": "fragmentation so that's the back end and the vs allocation component now we go to the low fragmentation",
    "start": "976839",
    "end": "984360"
  },
  {
    "start": "984000",
    "end": "984000"
  },
  {
    "text": "Heap the low fragmentation Heap or lfh uh Services allocation request for less",
    "start": "984519",
    "end": "989920"
  },
  {
    "text": "than or equal to uh 16 368 bytes and the allocation granularity depends on the",
    "start": "989920",
    "end": "996120"
  },
  {
    "text": "allocation size so similar to the lfh in the anti heip the lfh have prevents fragmentation",
    "start": "996120",
    "end": "1003319"
  },
  {
    "text": "by allocating a similarly size blocks from larger pre-allocated blocks of memory which in this particular case the",
    "start": "1003319",
    "end": "1009920"
  },
  {
    "text": "lfas subs segments lfh Subs segments are are just a special just a special type of uh bu",
    "start": "1009920",
    "end": "1017319"
  },
  {
    "text": "and block and uh lfh or bucket related structures here",
    "start": "1017319",
    "end": "1022759"
  },
  {
    "text": "which are which are allocated from the lfh context extension uh points to this uh lfh uh Subs",
    "start": "1022759",
    "end": "1030360"
  },
  {
    "start": "1031000",
    "end": "1031000"
  },
  {
    "text": "segments alloc Insurance sizes are distributed into a buckets so initially all bu buckets are not activated and for",
    "start": "1031959",
    "end": "1040160"
  },
  {
    "text": "each bucket there's a countert tracking the allocation and free request for the allocation sizes corresponding to the",
    "start": "1040160",
    "end": "1046678"
  },
  {
    "text": "bucket the bucket is activated on the 17th active allocation for the buckets",
    "start": "1046679",
    "end": "1052200"
  },
  {
    "text": "corresponding allocation size and another way to activate the bucket is if",
    "start": "1052200",
    "end": "1057320"
  },
  {
    "text": "the allocation request for the bucket uh corresponding allocation size reaches uh 2040 uh regardless if the blocks were",
    "start": "1057320",
    "end": "1064960"
  },
  {
    "text": "previously freed so another concept of lfh is the",
    "start": "1064960",
    "end": "1070840"
  },
  {
    "start": "1067000",
    "end": "1067000"
  },
  {
    "text": "Affinity slots affini slots actually own the lfh subs segments where the lfh blocks are",
    "start": "1070840",
    "end": "1078360"
  },
  {
    "text": "allocated from and the Heap manager assigns processors to this Affinity slots so",
    "start": "1078360",
    "end": "1085440"
  },
  {
    "text": "initially when the bucket is activated only one affin slot is uh is created and",
    "start": "1085440",
    "end": "1090960"
  },
  {
    "text": "all processors are assigned to it so now imagine that this uh processor here is",
    "start": "1090960",
    "end": "1096240"
  },
  {
    "text": "assigned to this Affinity slot so contention in in accessing this uh lfh",
    "start": "1096240",
    "end": "1101919"
  },
  {
    "text": "Subs segments can occur so if there's too if there's too much contention detected uh when the lfh uh if there are",
    "start": "1101919",
    "end": "1109360"
  },
  {
    "text": "too much contention detected uh when the LF sub Subs segments are",
    "start": "1109360",
    "end": "1114840"
  },
  {
    "text": "accessed a new uh finish slot is created with their own set of uh lfh sub",
    "start": "1114840",
    "end": "1120400"
  },
  {
    "text": "segments and the processor is reassigned to this uh to this new Affinity",
    "start": "1120400",
    "end": "1127000"
  },
  {
    "text": "slot so lfh sub segments are where the lfh blocks are allocated from the top of",
    "start": "1128400",
    "end": "1133880"
  },
  {
    "text": "the lfh subs segment is the Heap lfh Subs segment structure",
    "start": "1133880",
    "end": "1139000"
  },
  {
    "text": "some of its important fields are the free count uh field which is the number of uh free lfh blocks in the subs",
    "start": "1139000",
    "end": "1146000"
  },
  {
    "text": "segment and another is the black count field which is the total number of lfh",
    "start": "1146000",
    "end": "1151440"
  },
  {
    "text": "block in the the sub segment has so another important uh fields are the",
    "start": "1151440",
    "end": "1156480"
  },
  {
    "text": "black siiz field and the first black obser field which are both encoded the encoding I will talk about",
    "start": "1156480",
    "end": "1164000"
  },
  {
    "text": "later so uh finally the black bit map is uh which tracks the which tracks the",
    "start": "1164000",
    "end": "1169799"
  },
  {
    "text": "state of lfh blocks if they are busy or they have unused",
    "start": "1169799",
    "end": "1174919"
  },
  {
    "text": "bites and the lfh subs segment merera and so after the lfh subs segment Mera",
    "start": "1174919",
    "end": "1181200"
  },
  {
    "text": "here are the lfh blocks",
    "start": "1181200",
    "end": "1185960"
  },
  {
    "start": "1186000",
    "end": "1186000"
  },
  {
    "text": "here so focusing on the lfh Block bit map each lfh block in the sub segment is",
    "start": "1187000",
    "end": "1193360"
  },
  {
    "text": "represented by uh two bits in the black bit map uh the first bit is the BC bit",
    "start": "1193360",
    "end": "1199720"
  },
  {
    "text": "and the other bit is the unus bites bit if the unused bites bit is set it",
    "start": "1199720",
    "end": "1205520"
  },
  {
    "text": "means that there's a difference between the requested allocation size and the total block size which happens due to",
    "start": "1205520",
    "end": "1211880"
  },
  {
    "text": "the alignment to whatever the allocation granularity is uh the difference is stored in this last two bites of the lfh",
    "start": "1211880",
    "end": "1220400"
  },
  {
    "text": "block also the lfh black bit map is uh div divided into 64 bit chunks which I",
    "start": "1220400",
    "end": "1227159"
  },
  {
    "text": "call the bitmap bits and each of this uh represents uh 32 lfh",
    "start": "1227159",
    "end": "1234480"
  },
  {
    "start": "1235000",
    "end": "1235000"
  },
  {
    "text": "blocks the allocation from the lfh is different because it involves some",
    "start": "1235840",
    "end": "1242080"
  },
  {
    "text": "randomization for the allocation the allocation routine first select uh bitmap bits from the black bitmap in",
    "start": "1242080",
    "end": "1249240"
  },
  {
    "text": "which the starting point is uh depends on the fre on a free hint so once a",
    "start": "1249240",
    "end": "1254400"
  },
  {
    "text": "bitmap bit is selected it will randomly select a bit position in the bitmap bit",
    "start": "1254400",
    "end": "1259760"
  },
  {
    "text": "where the BC bit is clear so once a once a random bit position is selected it",
    "start": "1259760",
    "end": "1265480"
  },
  {
    "text": "will set the BC bit and if necessary the unused bike bit the illustration shows an actual result of an of the allocation",
    "start": "1265480",
    "end": "1273760"
  },
  {
    "text": "randomization whereas the first allocated block is here and the second allocated block is here and the third",
    "start": "1273760",
    "end": "1281000"
  },
  {
    "text": "allocated block is here and so on for freeing among other things the blocks are busy and unus bite bit from",
    "start": "1281000",
    "end": "1288279"
  },
  {
    "text": "the black bit map is cleared this is just a simplified explanation of the lfh allocation and",
    "start": "1288279",
    "end": "1295039"
  },
  {
    "text": "freeing and for a more detailed explanation please uh please refer to the white",
    "start": "1295039",
    "end": "1301399"
  },
  {
    "text": "paper and finally the fourth component of the segment Heap the large block allocation",
    "start": "1302120",
    "end": "1308760"
  },
  {
    "text": "component the large blocks allocation component handles all allocation request for sizes greater than 58 KB large block",
    "start": "1308840",
    "end": "1317799"
  },
  {
    "text": "are allocated free using the virtual memor virtual memory functions provided by the NTI memory manager the large",
    "start": "1317799",
    "end": "1325159"
  },
  {
    "text": "block here do not have a header at the beginning of each block uh instead a",
    "start": "1325159",
    "end": "1331039"
  },
  {
    "text": "meta the metad data for each block is are allocated from a separate the metadata Hep and for the Hep manager to",
    "start": "1331039",
    "end": "1338720"
  },
  {
    "text": "identify if the block is a large block allocation its address is is marked as a",
    "start": "1338720",
    "end": "1343880"
  },
  {
    "text": "large as large uh depending on the large allocation bit map here",
    "start": "1343880",
    "end": "1350520"
  },
  {
    "text": "so the large allocation is straightforward since uh there's no free list to consult first the blocks",
    "start": "1353799",
    "end": "1359320"
  },
  {
    "text": "metadata is allocated from a separate metadata Hep then the blocks virtual memory is allocated and then the blocks",
    "start": "1359320",
    "end": "1366799"
  },
  {
    "text": "address is uh Mark in the large allocation bit map the freeing is also straightforward this is just the reverse",
    "start": "1366799",
    "end": "1373320"
  },
  {
    "text": "process of the large block allocational process",
    "start": "1373320",
    "end": "1378679"
  },
  {
    "text": "oh before entering before ending the internal part of the talk I want to discuss the black pading which will",
    "start": "1379679",
    "end": "1385559"
  },
  {
    "text": "affect the layout of the segment hip blocks just in case you are",
    "start": "1385559",
    "end": "1391720"
  },
  {
    "text": "investigating a FR process in which the segment Heap is enabled but that process is not opted in by default to use the",
    "start": "1391720",
    "end": "1397880"
  },
  {
    "text": "segment Heap take note that there will be a 16 byte ping added before the user data portion of the",
    "start": "1397880",
    "end": "1403799"
  },
  {
    "text": "block as shown this is a modified layout of the backend block",
    "start": "1403799",
    "end": "1409159"
  },
  {
    "text": "here and a BC block here and an lfh",
    "start": "1409159",
    "end": "1415000"
  },
  {
    "text": "block so to summarize there are four components of the segment Heap the the back end the",
    "start": "1417080",
    "end": "1423600"
  },
  {
    "start": "1419000",
    "end": "1419000"
  },
  {
    "text": "VSS allocation the lfh and the large black allocation component the D",
    "start": "1423600",
    "end": "1428919"
  },
  {
    "text": "structures of the segment Heap are largely uh different compared to the data structures of the anti Heap and",
    "start": "1428919",
    "end": "1435200"
  },
  {
    "text": "free trees are used instead of a free list of all the components only VSS blocks have a header at the beginning of",
    "start": "1435200",
    "end": "1441520"
  },
  {
    "text": "each block and the best fit search algorithm with a preference to most committed block is used uh by the back",
    "start": "1441520",
    "end": "1447480"
  },
  {
    "text": "end and the vs component while the lfh allocation uh the selection for the free",
    "start": "1447480",
    "end": "1453279"
  },
  {
    "text": "vs for the free blocks are",
    "start": "1453279",
    "end": "1456880"
  },
  {
    "text": "randomized so that's it for the internals and in the second part of the talk I'll discuss the mechanisms that",
    "start": "1458520",
    "end": "1464039"
  },
  {
    "text": "are added in the segment Heap that make it difficult or unreliable to attack a Heap met data and in certain cases make",
    "start": "1464039",
    "end": "1471000"
  },
  {
    "text": "it unreliable to perform Heap layout manipulation the security mechanism is",
    "start": "1471000",
    "end": "1478279"
  },
  {
    "text": "well is well known the subs segment and segment list are link list so to prevent",
    "start": "1478279",
    "end": "1483360"
  },
  {
    "text": "classic arbitrary rights due to corrupted link list nodes checks are added when removing and inserting nodes",
    "start": "1483360",
    "end": "1489480"
  },
  {
    "text": "from uh link list if the check failed the the fast spell mechanism will be triggered and this will cause the",
    "start": "1489480",
    "end": "1495399"
  },
  {
    "text": "process to uh to terminate immediately",
    "start": "1495399",
    "end": "1500120"
  },
  {
    "text": "so similar to a link list node of corruption an attacker is Al if an attacker uh can also cause an arbitrary",
    "start": "1500960",
    "end": "1507200"
  },
  {
    "text": "right if if three nodes are attacker controlled in this in this example the",
    "start": "1507200",
    "end": "1512960"
  },
  {
    "text": "attacker may had control the parent value of this uh left child if if if",
    "start": "1512960",
    "end": "1518880"
  },
  {
    "text": "that is the case when the parent of this left child is manipulated an arbitrary right may occur so to prevent this the",
    "start": "1518880",
    "end": "1526159"
  },
  {
    "text": "ndl functions for manipulating the uh arbitri will follow the parent",
    "start": "1526159",
    "end": "1532760"
  },
  {
    "text": "value and then check if one of each child is indeed uh the left child and if",
    "start": "1532760",
    "end": "1539760"
  },
  {
    "text": "not uh uh there will be a failure in validation it will cause the fast spell mechanism to be triggered causing the",
    "start": "1539760",
    "end": "1546279"
  },
  {
    "text": "immediate process termination next to make it unreliable",
    "start": "1546279",
    "end": "1552080"
  },
  {
    "start": "1549000",
    "end": "1549000"
  },
  {
    "text": "to Guess The Hip address a random size uh free memory is created before the hip base and this random size a multiple of",
    "start": "1552080",
    "end": "1559640"
  },
  {
    "text": "64 KB then to prevent overflow from BS",
    "start": "1559640",
    "end": "1565520"
  },
  {
    "start": "1562000",
    "end": "1562000"
  },
  {
    "text": "blocks here and uh from lfh blocks here from correcting data outside the sub",
    "start": "1565520",
    "end": "1572200"
  },
  {
    "text": "segments where they are located a guard pages are added at the at the end of a vs Subs segments here and the lfh subs",
    "start": "1572200",
    "end": "1580880"
  },
  {
    "text": "segment so also to prevent an overflow from corrupting data outside the the large block a guard Bridge was also",
    "start": "1580880",
    "end": "1587960"
  },
  {
    "text": "added at the end of the large block here and back and blocks uh on the other",
    "start": "1587960",
    "end": "1593039"
  },
  {
    "text": "hand do not have a guard page allowing an overflow to corrupt adjacent data",
    "start": "1593039",
    "end": "1598279"
  },
  {
    "text": "outside the back and block next there are function pointers",
    "start": "1598279",
    "end": "1605480"
  },
  {
    "start": "1602000",
    "end": "1602000"
  },
  {
    "text": "is stored in the hip base assuming that an attacker is able to determine the address of the Hep and that an attacker",
    "start": "1605480",
    "end": "1612000"
  },
  {
    "text": "has a control flow guard bypass one way to control execution flow is to modify",
    "start": "1612000",
    "end": "1617279"
  },
  {
    "text": "the function pointers uh found at the heat base to protect this function",
    "start": "1617279",
    "end": "1622880"
  },
  {
    "text": "pointers from uh trivial modification there are they are encoded using the hip key and uh and the vs context address or",
    "start": "1622880",
    "end": "1631600"
  },
  {
    "text": "the lfh context address next uh vs blocks have a black",
    "start": "1631600",
    "end": "1637919"
  },
  {
    "start": "1635000",
    "end": "1635000"
  },
  {
    "text": "header at the beginning of each block and this uh headers here are potential",
    "start": "1637919",
    "end": "1643720"
  },
  {
    "text": "Target for overflows to protect important parts of the vs block header from a modification they are encoded",
    "start": "1643720",
    "end": "1650520"
  },
  {
    "text": "using the LF key and the black",
    "start": "1650520",
    "end": "1655720"
  },
  {
    "text": "address so similarly the lfh subs segment headers also have some important fields that an attacker May leverage",
    "start": "1656559",
    "end": "1663399"
  },
  {
    "text": "again to protect this important fields from trille modification they're encoded using the lfh key and the lfh subs",
    "start": "1663399",
    "end": "1671440"
  },
  {
    "text": "segment address here then finally to make uh",
    "start": "1671440",
    "end": "1677519"
  },
  {
    "start": "1674000",
    "end": "1674000"
  },
  {
    "text": "exploitation of uh lfh based buffer overflows and use use of the freeze",
    "start": "1677519",
    "end": "1682840"
  },
  {
    "text": "unreliable as I previously discussed uh the LF and randomly select which a free",
    "start": "1682840",
    "end": "1688279"
  },
  {
    "text": "free LF of block to use to make it uh to make it uh this makes it unreliable to",
    "start": "1688279",
    "end": "1694399"
  },
  {
    "text": "place a Target lfh block adjacent to a lfh block that can be",
    "start": "1694399",
    "end": "1699720"
  },
  {
    "text": "overflowed it also makes it unreliable to uh reuse a recently freed lfh Block",
    "start": "1699720",
    "end": "1705760"
  },
  {
    "text": "in case of user use after free exploit",
    "start": "1705760",
    "end": "1710120"
  },
  {
    "text": "to summarize important metad encoded uh less notes and tree notes are checked uh",
    "start": "1712519",
    "end": "1718600"
  },
  {
    "text": "detected corruption will cause an IM immediate termination of the process guard pages and some randomization are",
    "start": "1718600",
    "end": "1724640"
  },
  {
    "text": "added also it will be difficult to perform a precise layout manipulation for for the lp due to the randomization",
    "start": "1724640",
    "end": "1732559"
  },
  {
    "text": "uh but the back end and vs allocation which do not use a randomization are more over more welcoming to Heap layout",
    "start": "1732559",
    "end": "1740559"
  },
  {
    "text": "manipulation in the final part of the presentation I'm going to talk about how the layup of bfbs allocations can be",
    "start": "1740559",
    "end": "1747519"
  },
  {
    "text": "precisely uh manipulated in this final part of the",
    "start": "1747519",
    "end": "1753120"
  },
  {
    "text": "presentation I'll discuss the layout of uh how the layout of um Heap managed by the sment heat can be manipulated I'll",
    "start": "1753120",
    "end": "1760279"
  },
  {
    "text": "use a vulnerability in the Windows PDF library that I discovered and uh and was",
    "start": "1760279",
    "end": "1765799"
  },
  {
    "text": "patched by Microsoft uh last last March",
    "start": "1765799",
    "end": "1770039"
  },
  {
    "text": "first the vulnerability in this case study is found in the wi WT PDF a built",
    "start": "1771519",
    "end": "1777200"
  },
  {
    "text": "in a PDF library in Windows since Windows 8.1 one interesting aspect of a winnert",
    "start": "1777200",
    "end": "1783480"
  },
  {
    "text": "PDF is that it is used by Ed to render PDFs therefore uh remote code ex",
    "start": "1783480",
    "end": "1789320"
  },
  {
    "text": "execution vulnerabilities in uh in this PDF Library can uh potentially be used in Edge uh driveby attacks so in the",
    "start": "1789320",
    "end": "1797159"
  },
  {
    "text": "illustration uh 25 by 25 pixel sized embed element references a PDF",
    "start": "1797159",
    "end": "1804000"
  },
  {
    "text": "file which uh which wi RT PDF would then render if the PDF exploits a remote code",
    "start": "1804000",
    "end": "1811039"
  },
  {
    "text": "execution vulnerability then an attacker may take control of the edge content Edge content",
    "start": "1811039",
    "end": "1818159"
  },
  {
    "start": "1818000",
    "end": "1818000"
  },
  {
    "text": "process the vulnerability that that I'll discuss involves the postcript oper stack this postcript oper stack is uh",
    "start": "1819159",
    "end": "1826640"
  },
  {
    "text": "used when interpreting uh postcript calculator functions embedded in our PDFs the postcript oper stack is a",
    "start": "1826640",
    "end": "1833200"
  },
  {
    "text": "vector of a 65 hex C type or operand pointers here and each of these points to a c",
    "start": "1833200",
    "end": "1840640"
  },
  {
    "text": "type or operand structure where the first DW is the type and the second",
    "start": "1840640",
    "end": "1845799"
  },
  {
    "text": "dword is the value representing the value in the postcript open stack and this is where the segment Hep",
    "start": "1845799",
    "end": "1852880"
  },
  {
    "text": "comes to the picture this uh postcript oper stch is allocated from the msv CT",
    "start": "1852880",
    "end": "1858519"
  },
  {
    "text": "Hep and in the context of the edge content process this msvcrt Hep is",
    "start": "1858519",
    "end": "1864880"
  },
  {
    "text": "managed by the segment Hep now for the",
    "start": "1864880",
    "end": "1871840"
  },
  {
    "text": "vulnerability the issue is that The postcript Interpreter fails to properly validate if the postcript oper index is",
    "start": "1871840",
    "end": "1879399"
  },
  {
    "text": "already past the end of a postcript oper stack wherein it allows the postcript",
    "start": "1879399",
    "end": "1885279"
  },
  {
    "text": "calculator function to push a Val a value to invalid index 65 of the postcript oper stack now if an attacker",
    "start": "1885279",
    "end": "1893200"
  },
  {
    "text": "is able to implant an attackered control address right after the postcript op stack here the attacker can perform a",
    "start": "1893200",
    "end": "1900720"
  },
  {
    "text": "memory right operation to the attacker control address thereby an arbitrary",
    "start": "1900720",
    "end": "1906480"
  },
  {
    "text": "thereby an arbitrary rights now that we have an understanding",
    "start": "1906480",
    "end": "1913240"
  },
  {
    "text": "of the vulnerability the plan to implant the target address after the postcript oper stack is as follows so we allocate",
    "start": "1913240",
    "end": "1920519"
  },
  {
    "text": "a controlled buffer and set offset 328 with the target",
    "start": "1920519",
    "end": "1925960"
  },
  {
    "text": "address and uh we free the control buffer and when the post script oper",
    "start": "1925960",
    "end": "1931200"
  },
  {
    "text": "stack is allocated the free vs block of the free control bu buffer will be returned by the Heap manager and will be",
    "start": "1931200",
    "end": "1938440"
  },
  {
    "text": "used uh for the Post scrip open stack so this looks like a good plan but this",
    "start": "1938440",
    "end": "1943840"
  },
  {
    "text": "requires the ability to uh allocate and free control buffers unfortunately winrt PDF still does not",
    "start": "1943840",
    "end": "1951159"
  },
  {
    "text": "support JavaScript embedded in PDF that would potentially allow the arbitrary allocation of freeing of uh of blocks",
    "start": "1951159",
    "end": "1958480"
  },
  {
    "text": "from the msbc RT Hep so there is a problem and uh one solution is there is",
    "start": "1958480",
    "end": "1965159"
  },
  {
    "text": "this this is where the chakra and the chakras AR buffer implementation comes in using JavaScript code in a in an HTML",
    "start": "1965159",
    "end": "1974320"
  },
  {
    "text": "an arbitrary Siz block can be allocated from the msvcrt Heap by instantiating an",
    "start": "1974320",
    "end": "1980200"
  },
  {
    "text": "arve buffer object in the illustration an AR buffer with a 340 hex as the size",
    "start": "1980200",
    "end": "1986480"
  },
  {
    "text": "in instantiated because the data buffer of the arve buffer is allocated using uh",
    "start": "1986480",
    "end": "1992039"
  },
  {
    "text": "msvcrt maloc the the data buffer is eventually allocated from the msvcrt",
    "start": "1992039",
    "end": "1999799"
  },
  {
    "text": "Heap and putting the arbitrary values inside inside the data buffer is is as",
    "start": "1999799",
    "end": "2005440"
  },
  {
    "text": "simple as excuting the code here",
    "start": "2005440",
    "end": "2009759"
  },
  {
    "text": "if elev bucket activation is needed we just need to sequentially instantiate a 17 R buffers with the same size here for",
    "start": "2013279",
    "end": "2023159"
  },
  {
    "text": "freeing the data buffer we just need to remove our references to the array buffer and then trigger garbage",
    "start": "2023159",
    "end": "2028600"
  },
  {
    "text": "collection but again unfortunately collect garbage does not work in Edge you can call it you can call it but uh",
    "start": "2028600",
    "end": "2034880"
  },
  {
    "text": "but it fun but its functionality is disabled but further looking at the array buffer",
    "start": "2034880",
    "end": "2040840"
  },
  {
    "text": "implementation the size pass to the array buffer Constructor here is added to an internal chakra",
    "start": "2040840",
    "end": "2048240"
  },
  {
    "text": "engine counter if that counter reaches a 192 MB in machines with more than 1 gig",
    "start": "2048240",
    "end": "2054520"
  },
  {
    "text": "of memory a concurrent garbage collection will be triggered so to perform garbage collection one one just",
    "start": "2054520",
    "end": "2061638"
  },
  {
    "text": "need to instantiate an R buffer with a size of 19 192 MB and a delay is then",
    "start": "2061639",
    "end": "2067919"
  },
  {
    "text": "introduced to let the garbage collection to to finish and then the succeeding JavaScript code is",
    "start": "2067919",
    "end": "2074398"
  },
  {
    "text": "executed so now that we have the the capability to allocate a block and the free a block from the MS msvcrt heip but",
    "start": "2074399",
    "end": "2082358"
  },
  {
    "text": "there's another problem to overcome the if the elevage bucket",
    "start": "2082359",
    "end": "2089280"
  },
  {
    "text": "uh the problem is that the highest 16 bit of the target address will be overated here by the anus by value",
    "start": "2089280",
    "end": "2097839"
  },
  {
    "text": "even if a larger controlled buffers allocated in feed the Heap manager will split the size to uh to where there",
    "start": "2097839",
    "end": "2105359"
  },
  {
    "text": "there are still eight unused bites so this is a showstopper because the target address will become invalid",
    "start": "2105359",
    "end": "2111680"
  },
  {
    "text": "due to the corruption now to solve this problem internals of a vs allocation can",
    "start": "2111680",
    "end": "2118520"
  },
  {
    "text": "be a leverage if we allocate uh and free uh control buffer that is large enough",
    "start": "2118520",
    "end": "2124599"
  },
  {
    "text": "so there so that there will be more unused bites here and is small enough so that the free",
    "start": "2124599",
    "end": "2131240"
  },
  {
    "text": "block of the controled buffer will not be split then the target address will remain intact",
    "start": "2131240",
    "end": "2138000"
  },
  {
    "text": "here so in this case uh 340 hexb control buffer is allocated and freed and again",
    "start": "2138000",
    "end": "2144440"
  },
  {
    "text": "there's another problem the this free Block here may become uh maybe coales with",
    "start": "2144440",
    "end": "2150960"
  },
  {
    "text": "neighboring free blocks before the before the postc open stack is allocated",
    "start": "2150960",
    "end": "2156200"
  },
  {
    "text": "in in his place thereby reducing the reliability of the arbitrary right now to solve that",
    "start": "2156200",
    "end": "2164319"
  },
  {
    "start": "2164000",
    "end": "2164000"
  },
  {
    "text": "problem instead of one controlled buffer 15 controlled buffers are allocated and",
    "start": "2164319",
    "end": "2169880"
  },
  {
    "text": "in an alternating manner eight are left busy while seven are freed to prevent",
    "start": "2169880",
    "end": "2175520"
  },
  {
    "text": "the free blocks from from being coales so in an actual allocation Parn of the",
    "start": "2175520",
    "end": "2181280"
  },
  {
    "text": "sum of the controlled buers may be allocated in a different vs Sub segment or allocate from a separate larger free",
    "start": "2181280",
    "end": "2188160"
  },
  {
    "text": "blocks therefore the allocation the actual allocation pattern will not always exactly match the illustration",
    "start": "2188160",
    "end": "2194960"
  },
  {
    "text": "but nonetheless this increases the the chance that at least one or more free control buffer will will not be",
    "start": "2194960",
    "end": "2201160"
  },
  {
    "text": "coales and then finally there's one there's another problem to be solved before the postp oper and stack will be",
    "start": "2201160",
    "end": "2208359"
  },
  {
    "text": "allocated in one of these free free uh control buffers these free blocks may be used",
    "start": "2208359",
    "end": "2214720"
  },
  {
    "text": "for a small allocation request and they may be split and therefore further",
    "start": "2214720",
    "end": "2220319"
  },
  {
    "text": "reducing the reliability of the arbitr right now to solve that final",
    "start": "2220319",
    "end": "2226760"
  },
  {
    "text": "problem we just need to activate the lfh bucket for this uh smaller allocation",
    "start": "2228280",
    "end": "2233400"
  },
  {
    "text": "sizes so that in so instead of so instead of the vs allocation component",
    "start": "2233400",
    "end": "2238920"
  },
  {
    "text": "servicing them the lfh component will handle the allocation",
    "start": "2238920",
    "end": "2244040"
  },
  {
    "text": "request therefore uh protecting the free the free blocks from unintended",
    "start": "2244040",
    "end": "2250160"
  },
  {
    "text": "use so to summarize the JavaScript code in the HTML file will manipulate the",
    "start": "2251119",
    "end": "2256200"
  },
  {
    "text": "layout of the msvcrt Heap U using AR buffers uh once the Heap layout is manipulated and embed element",
    "start": "2256200",
    "end": "2265200"
  },
  {
    "text": "here referencing the concept PDF file is injected to the page uh wi RT PDF will",
    "start": "2265200",
    "end": "2271480"
  },
  {
    "text": "then load the PDF file and will then request for the allocation of the postcript open stack the Heap manager",
    "start": "2271480",
    "end": "2278760"
  },
  {
    "text": "will return one of the free uh controlled buffer blocks and there you go the target",
    "start": "2278760",
    "end": "2284640"
  },
  {
    "text": "address is uh implanted right after the postcript op stack and the PDF just",
    "start": "2284640",
    "end": "2290079"
  },
  {
    "text": "needs to trigger the vulnerability and the arbitrary right can be",
    "start": "2290079",
    "end": "2295839"
  },
  {
    "text": "achieved so if if everything work as plann in the demonstration you will see something like this where windbg will be",
    "start": "2296520",
    "end": "2303720"
  },
  {
    "text": "loaded as a postmortem debugger to a crash Edge content process the crash is",
    "start": "2303720",
    "end": "2309000"
  },
  {
    "text": "due to our right access violation here and where the address of the me of",
    "start": "2309000",
    "end": "2315079"
  },
  {
    "text": "the memor right operation is fully controlled here and the high 32 bits of the of the value to write to is",
    "start": "2315079",
    "end": "2323079"
  },
  {
    "text": "controlled so I'll now start up the",
    "start": "2323079",
    "end": "2327440"
  },
  {
    "text": "demo this is the VM that serves the the HTML file that manipulates the Heap",
    "start": "2330880",
    "end": "2336200"
  },
  {
    "text": "layout and uh prop concept PDF that triggers the",
    "start": "2336200",
    "end": "2341279"
  },
  {
    "text": "vulnerability and this is the VM where hge will be loaded",
    "start": "2346200",
    "end": "2352400"
  },
  {
    "text": "and here you",
    "start": "2373720",
    "end": "2376240"
  },
  {
    "text": "[Applause] go as you can see the the Target AR is",
    "start": "2378890",
    "end": "2386079"
  },
  {
    "text": "uh fully controlled and the high 32 bits of the value is uh",
    "start": "2386079",
    "end": "2391480"
  },
  {
    "text": "controlled and to verify we are in the edge of content",
    "start": "2393000",
    "end": "2399318"
  },
  {
    "start": "2408000",
    "end": "2408000"
  },
  {
    "text": "process so to summarize the case study showed that a precise layout manipulation uh is achieved in hips uh",
    "start": "2409680",
    "end": "2416560"
  },
  {
    "text": "managed by the segment Hep specifically it showed how the layout of vs allocations can be controlled and how",
    "start": "2416560",
    "end": "2423000"
  },
  {
    "text": "the lfh can be used to uh preserve the control the vs allocation layout the two",
    "start": "2423000",
    "end": "2429000"
  },
  {
    "text": "main elements that allowed the precise Heap layout manipulation in the case study was the descripting capability",
    "start": "2429000",
    "end": "2434880"
  },
  {
    "text": "provided by by the chakra JavaScript engine and and the common Heap used by uh the chakras aray buffer and Wier PDF",
    "start": "2434880",
    "end": "2442839"
  },
  {
    "text": "postcript interpreter finally When developing a proof of Concepts one might encounter",
    "start": "2442839",
    "end": "2449000"
  },
  {
    "text": "issues that seem to be unresolvable such as the target address corruption described in the case study in cases",
    "start": "2449000",
    "end": "2456800"
  },
  {
    "text": "such as those uh understanding the internals of the Hep implementation will Pro will",
    "start": "2456800",
    "end": "2462280"
  },
  {
    "text": "sometimes provide the solution to",
    "start": "2462280",
    "end": "2467319"
  },
  {
    "start": "2467000",
    "end": "2467000"
  },
  {
    "text": "conclude the internals of the segment Heap and the anti Heap are largely different although some components of",
    "start": "2467319",
    "end": "2473480"
  },
  {
    "text": "the segment Heap and the anti Heap are uh uh have the same purpose the data structur supporting them are uh are",
    "start": "2473480",
    "end": "2480520"
  },
  {
    "text": "mostly unlike the their counter their counterpart in the anti heip security mechanisms are comparable with the anti",
    "start": "2480520",
    "end": "2486599"
  },
  {
    "text": "heip since the data structures are new uh these new data structures are interesting for for metad data attack",
    "start": "2486599",
    "end": "2494000"
  },
  {
    "text": "research so in terms of Heap layout manipulation the case studies show that uh given the capability to perform",
    "start": "2494000",
    "end": "2501599"
  },
  {
    "text": "arbitrary allocation and free uh precisely out manipulation of Heap managed by the segment Heap is",
    "start": "2501599",
    "end": "2507119"
  },
  {
    "text": "achievable finally I encourage you to read the B the white paper if you are further interested in in this",
    "start": "2507119",
    "end": "2514400"
  },
  {
    "text": "topic these are some uh fireworks and references additional references can be found in",
    "start": "2514400",
    "end": "2520160"
  },
  {
    "text": "the white paper and thank you for your time and if you have any questions uh just let me",
    "start": "2520160",
    "end": "2527160"
  },
  {
    "text": "know thank you",
    "start": "2527160",
    "end": "2531359"
  }
]