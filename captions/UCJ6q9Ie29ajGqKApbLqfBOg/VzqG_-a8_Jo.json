[
  {
    "text": "good morning and welcome to smashing the state machine the true potential of web race",
    "start": "2560",
    "end": "9000"
  },
  {
    "text": "conditions have you ever seen a vulnerability that made absolutely no",
    "start": "9000",
    "end": "14360"
  },
  {
    "text": "sense something that didn't just leave you wondering why would anyone code that",
    "start": "14360",
    "end": "19480"
  },
  {
    "text": "but asking how is it even possible to write code that has that",
    "start": "19480",
    "end": "24680"
  },
  {
    "text": "effect maybe you even got hold of the source code and stared at it for hours and it's still made no sense and perhaps",
    "start": "24680",
    "end": "32920"
  },
  {
    "text": "if you showed it to someone else they'd say something like oh it must be a race",
    "start": "32920",
    "end": "39120"
  },
  {
    "text": "condition in this session I'm going to share with you tools and techniques to discover and exploit that kind of race",
    "start": "39120",
    "end": "47800"
  },
  {
    "text": "condition let's start by surveying what we do understand what race conditions have you seen or exploited in the wild",
    "start": "47800",
    "end": "54039"
  },
  {
    "text": "maybe things like transferring or withdrawing more funds than your account is supposed to have perhaps applying a",
    "start": "54039",
    "end": "60680"
  },
  {
    "text": "single use discount code multiple times or bypassing a rate limit on a login form or such like one of my favorites",
    "start": "60680",
    "end": "68400"
  },
  {
    "text": "that I found is I noticed that you can reuse a valid recapture solution",
    "start": "68400",
    "end": "73439"
  },
  {
    "text": "multiple times within a small time window I reported that to Google and",
    "start": "73439",
    "end": "78520"
  },
  {
    "text": "they were like well unfortunately our system is so distributed that we can't patch this uh and as a result that",
    "start": "78520",
    "end": "85920"
  },
  {
    "text": "technique still works on a bunch of websites today but all these examples",
    "start": "85920",
    "end": "91360"
  },
  {
    "text": "have something in common they could all be classed as limit overrun vulnerabilities they're all about doing",
    "start": "91360",
    "end": "97600"
  },
  {
    "text": "something more times than you supposed to be able to but if you go digging",
    "start": "97600",
    "end": "103399"
  },
  {
    "text": "through every post you can find on Race conditions you'll see glimmers of other",
    "start": "103399",
    "end": "109159"
  },
  {
    "text": "exploits now and then you might land on a post called race conditions on the web",
    "start": "109159",
    "end": "114320"
  },
  {
    "text": "by ysep frankovic in that post he describes four vulnerabilities",
    "start": "114320",
    "end": "120479"
  },
  {
    "text": "they're all really cool vulnerabilities but three of them are limit overruns and one of them is a bit",
    "start": "120479",
    "end": "126640"
  },
  {
    "text": "different he found this vulnerability by accident it took two months for him and",
    "start": "126640",
    "end": "132680"
  },
  {
    "text": "Facebook's security team to figure out how to replicate it",
    "start": "132680",
    "end": "138319"
  },
  {
    "text": "and the symptom was that when changing email address sometimes Facebook would",
    "start": "138319",
    "end": "144040"
  },
  {
    "text": "send two codes for two different addresses in a single confirmation email",
    "start": "144040",
    "end": "150440"
  },
  {
    "text": "now I had no idea what could be causing this but one thing was clear this wasn't a limit overrun",
    "start": "150440",
    "end": "158080"
  },
  {
    "text": "vulnerability and so last September six years after I first read that blog post",
    "start": "158080",
    "end": "164040"
  },
  {
    "text": "I decided to try and figure out what actually happened and gradually came to",
    "start": "164040",
    "end": "169440"
  },
  {
    "text": "realize that the race condition attacks that we all know and love already are just toy vulnerabilities compared with",
    "start": "169440",
    "end": "175720"
  },
  {
    "text": "what else is out there so in this session I'm going to show you the true potential",
    "start": "175720",
    "end": "182319"
  },
  {
    "text": "of this attack class tools and techniques to achieve this potential and case studies and a live demo to show",
    "start": "182319",
    "end": "188959"
  },
  {
    "text": "some of the insanity that's out there waiting for you to discover it after that I'll share where things can be",
    "start": "188959",
    "end": "195080"
  },
  {
    "text": "taken further how to prevent these attacks and the key takeaways leaving 5 minutes for",
    "start": "195080",
    "end": "201560"
  },
  {
    "text": "questions on certain slides you'll see this Mortar Board icon uh that just means that I've designed a free online",
    "start": "201560",
    "end": "208439"
  },
  {
    "text": "replica of that vulnerability in the web Security Academy so you can practice",
    "start": "208439",
    "end": "214480"
  },
  {
    "text": "exploiting that technique live online for free to communicate the true potential",
    "start": "214480",
    "end": "221959"
  },
  {
    "text": "of this attack class I'm going to use a multi-step vulnerability that I found a",
    "start": "221959",
    "end": "227239"
  },
  {
    "text": "while back I logged into a website and it asked me to select a role before proceeding to the application so I",
    "start": "227239",
    "end": "233959"
  },
  {
    "text": "thought well I guess the state machine for the users's role looks something like this and maybe I can jump straight",
    "start": "233959",
    "end": "240959"
  },
  {
    "text": "from the role selection page to the back end and elevate my privileges but that didn't work and I",
    "start": "240959",
    "end": "247799"
  },
  {
    "text": "concluded it was Secure I mean look at that picture it looks pretty secure right uh but this state machine was",
    "start": "247799",
    "end": "255360"
  },
  {
    "text": "wrong maybe you've already spotted the floor with it it's not zoomed in enough",
    "start": "255360",
    "end": "261280"
  },
  {
    "text": "and it's assuming that the get request to the role selection page doesn't",
    "start": "261280",
    "end": "266639"
  },
  {
    "text": "change the application State and and as it so happened for reasons I don't",
    "start": "266639",
    "end": "272600"
  },
  {
    "text": "entirely understand uh the application was creating every session with administrative Privileges and then the",
    "start": "272600",
    "end": "278880"
  },
  {
    "text": "get request to the role selection page was revoking those privileges so by not",
    "start": "278880",
    "end": "284320"
  },
  {
    "text": "sending that get and going straight to the back end anyone could get admin access and by failing to zoom in enough",
    "start": "284320",
    "end": "291520"
  },
  {
    "text": "I'd almost missed that vulnerability but that's okay you know that was just my mistake everyone knows",
    "start": "291520",
    "end": "297639"
  },
  {
    "text": "that multi-step sequences are a wonderful source of all kinds of serious vulnerabilities and whenever you see one",
    "start": "297639",
    "end": "305000"
  },
  {
    "text": "it's essential to zoom in as much as possible and test every possible permutation of the",
    "start": "305000",
    "end": "311039"
  },
  {
    "text": "process but while researching race conditions I found myself looking back",
    "start": "311039",
    "end": "316479"
  },
  {
    "text": "at this finding and wondering is this the furthest that we could zoom in or",
    "start": "316479",
    "end": "322440"
  },
  {
    "text": "can we go further still what if the application had dropped our privileges immediately using",
    "start": "322440",
    "end": "328759"
  },
  {
    "text": "a second dat base statement there would still be a maybe one millisecond time",
    "start": "328759",
    "end": "334120"
  },
  {
    "text": "window where every session had administrated privileges but I would never have discovered",
    "start": "334120",
    "end": "340639"
  },
  {
    "text": "it that's a slightly scary thought partly because well any login form could",
    "start": "340639",
    "end": "346840"
  },
  {
    "text": "have that vulnerability it doesn't need to be multi-step but more than that it shows",
    "start": "346840",
    "end": "352120"
  },
  {
    "text": "that any HTTP request could be transitioning an application through an",
    "start": "352120",
    "end": "357840"
  },
  {
    "text": "invisible sequence of tiny substates that could be enabling serious",
    "start": "357840",
    "end": "364240"
  },
  {
    "text": "vulnerabilities in other words we all know that multi-step sequences are",
    "start": "364240",
    "end": "370319"
  },
  {
    "text": "really dangerous and with race conditions everything is potentially",
    "start": "370319",
    "end": "376599"
  },
  {
    "text": "multi-step that is the true potential of this attack class and now it's time to",
    "start": "376599",
    "end": "382120"
  },
  {
    "text": "start hacking things to discover a substate we need a",
    "start": "382120",
    "end": "387440"
  },
  {
    "text": "collision and for that we need two request Quest S one to trigger the substate or race window and another that",
    "start": "387440",
    "end": "394800"
  },
  {
    "text": "tries to access the same resource at the same time so in the example we just saw",
    "start": "394800",
    "end": "400960"
  },
  {
    "text": "that might mean something like trying to log in and access the admin panel",
    "start": "400960",
    "end": "406680"
  },
  {
    "text": "simultaneously however there's a major barrier to this very first step which has plagued this entire attack class for",
    "start": "406680",
    "end": "412880"
  },
  {
    "text": "decades which is Network Jitter which randomly delays requests meaning that",
    "start": "412880",
    "end": "418319"
  },
  {
    "text": "the race windows don't line up and the vulnerabilities don't reliably get",
    "start": "418319",
    "end": "424280"
  },
  {
    "text": "discovered to solve this problem I've developed the single packet attack which lets you make 20 to 30 requests arrive",
    "start": "424280",
    "end": "432400"
  },
  {
    "text": "at the Target server simultaneously completely regardless of network",
    "start": "432400",
    "end": "438360"
  },
  {
    "text": "Jitter under the hood this technique is all about TCP and",
    "start": "438360",
    "end": "443800"
  },
  {
    "text": "HP the previously best known technique was called last bite sync and this",
    "start": "443800",
    "end": "448919"
  },
  {
    "text": "explor the fact that web servers won't start to process a request until the",
    "start": "448919",
    "end": "454160"
  },
  {
    "text": "whole request has arrived so by withholding the final bite and putting",
    "start": "454160",
    "end": "459400"
  },
  {
    "text": "that in a separate packet you make the final packet of each request really small and kind of make things a little",
    "start": "459400",
    "end": "465680"
  },
  {
    "text": "bit more reliable but it only goes so far a couple of years ago though I read",
    "start": "465680",
    "end": "472400"
  },
  {
    "text": "an academic paper called Timeless timing attacks where they noticed that with hp2",
    "start": "472400",
    "end": "478759"
  },
  {
    "text": "you can start off two entire requests into a single TCP packet and they were",
    "start": "478759",
    "end": "485199"
  },
  {
    "text": "using that for timing attacks but it occurred to me that this might have some race condition potential the only issue",
    "start": "485199",
    "end": "492599"
  },
  {
    "text": "is that really thanks to other factors like server site Jitter you need more than two requests to reliably detect and",
    "start": "492599",
    "end": "500319"
  },
  {
    "text": "exploit race conditions so to create the single packet attack I just took these two",
    "start": "500319",
    "end": "507319"
  },
  {
    "text": "techniques and smushed them together I'm releasing this in an update",
    "start": "507319",
    "end": "513200"
  },
  {
    "text": "to the open source tool turbo Intruder Landing in 30 minutes time and you can",
    "start": "513200",
    "end": "519839"
  },
  {
    "text": "go and try out for yourself and well it's quite an obvious concept actually isn't it but after implementing this I",
    "start": "519839",
    "end": "528040"
  },
  {
    "text": "actually realized someone else had had the same idea and implemented the same thing for a master's project back in",
    "start": "528040",
    "end": "534800"
  },
  {
    "text": "2020 and nobody even noticed so what what is so exciting about this technique",
    "start": "534800",
    "end": "541959"
  },
  {
    "text": "why why did I even try and come up with a fancy name for it well it's because",
    "start": "541959",
    "end": "547480"
  },
  {
    "text": "this isn't just some cool implementation trick after refining the technique over",
    "start": "547480",
    "end": "553640"
  },
  {
    "text": "months of research it now works on all major web servers I can still fit the",
    "start": "553640",
    "end": "559120"
  },
  {
    "text": "entire algorithm on one slide and ultimately it brings insane performance",
    "start": "559120",
    "end": "565200"
  },
  {
    "text": "in a parcel that's so easy to implement that I think it's it's going to end up in all major web testing",
    "start": "565200",
    "end": "572240"
  },
  {
    "text": "tools the reason is so easy to implement is that thanks to some creative abuse of",
    "start": "572240",
    "end": "577399"
  },
  {
    "text": "Nagel's algorithm which is present in all operating systems Network Stacks",
    "start": "577399",
    "end": "582720"
  },
  {
    "text": "this technique doesn't require you to code a custom TCP or TLS stack you can",
    "start": "582720",
    "end": "588800"
  },
  {
    "text": "just take a hp2 library and bolt this feature onto the site if you're tempted to make your own",
    "start": "588800",
    "end": "596000"
  },
  {
    "text": "implementation I'd say go for it and I think go Langs hp2 stack is one of the easy ones to extend in this manner and",
    "start": "596000",
    "end": "604680"
  },
  {
    "text": "I'm really looking forward to seeing where other people take this technique in future but right now let's focus a",
    "start": "604680",
    "end": "611640"
  },
  {
    "text": "little bit more on the performance to Benchmark this new technique I repeatedly sent a batch of",
    "start": "611640",
    "end": "618880"
  },
  {
    "text": "20 requests from Melbourne to Dublin and I measured the gap between the execution",
    "start": "618880",
    "end": "624640"
  },
  {
    "text": "Tim stamp of the first request to arrive and the last request to arrive in each batch in other words how close together",
    "start": "624640",
    "end": "632000"
  },
  {
    "text": "they landed using last bite sync we saw a median spread of 4 milliseconds and a",
    "start": "632000",
    "end": "638480"
  },
  {
    "text": "standard deviation of three which is actually not that bad uh I think the reason it's relatively low here uh is",
    "start": "638480",
    "end": "646360"
  },
  {
    "text": "that I was using Data Centers at both ends of this connection and if you were using uh Australian consumer Broadband",
    "start": "646360",
    "end": "653680"
  },
  {
    "text": "you'd probably see higher Jitter so then over the same connection",
    "start": "653680",
    "end": "659880"
  },
  {
    "text": "I tried the single packet attack and with that we saw a median spread of 1",
    "start": "659880",
    "end": "666000"
  },
  {
    "text": "millisecond and a standard deviation of 0.3 so in other words these 20 requests",
    "start": "666000",
    "end": "673600"
  },
  {
    "text": "traveling 177,000 kilm were mostly getting executed on the same millisecond",
    "start": "673600",
    "end": "680200"
  },
  {
    "text": "on the target server that makes this technique 4 to 10",
    "start": "680200",
    "end": "685680"
  },
  {
    "text": "times more effective by those metrics and with one live vulnerability I was able to",
    "start": "685680",
    "end": "692639"
  },
  {
    "text": "replicate it using the single packet attack in 30 seconds and it took two",
    "start": "692639",
    "end": "697800"
  },
  {
    "text": "hours of automated attempts to replicate the same issue using last bite",
    "start": "697800",
    "end": "704120"
  },
  {
    "text": "sync if you want to kind of visualize what this impact actually means",
    "start": "704120",
    "end": "709880"
  },
  {
    "text": "basically the single packet attack makes remote race conditions",
    "start": "709880",
    "end": "716279"
  },
  {
    "text": "local now that we've solved Network Jitter it's it's time to go hunting for bucks now limit overrun vulnerabilities",
    "start": "716279",
    "end": "723320"
  },
  {
    "text": "are really easy to find you look for a limit and then you try and overrun it",
    "start": "723320",
    "end": "728839"
  },
  {
    "text": "but as soon as you go beyond that to multi-step style attack things are not so simple but after months of manual",
    "start": "728839",
    "end": "735680"
  },
  {
    "text": "testing and discovering every possible Pitfall I've developed the following three-step methodology to find these",
    "start": "735680",
    "end": "742320"
  },
  {
    "text": "bugs efficiently first you predict where you might have potential collisions then",
    "start": "742320",
    "end": "748199"
  },
  {
    "text": "you probe the those places to identify Clues as to whether there's a substate there or not and finally you prove the",
    "start": "748199",
    "end": "754720"
  },
  {
    "text": "concept by figuring out what happened and using that knowledge to build an",
    "start": "754720",
    "end": "759959"
  },
  {
    "text": "exploit prediction is about efficiency in theory we ought to test every",
    "start": "759959",
    "end": "765839"
  },
  {
    "text": "possible combination of endpoints on the entire website and also on related websites that share the same backend",
    "start": "765839",
    "end": "772399"
  },
  {
    "text": "which is not very feasible so instead we're going to home in on places that are likely to have collisions that",
    "start": "772399",
    "end": "779120"
  },
  {
    "text": "serious con have serious consequences and then try and furthermore roll out endpoints that",
    "start": "779120",
    "end": "785480"
  },
  {
    "text": "don't have much Collision potential for example if you've got two",
    "start": "785480",
    "end": "790920"
  },
  {
    "text": "threads editing a single piece of data that might have a collision whereas if",
    "start": "790920",
    "end": "797160"
  },
  {
    "text": "the two links are just appending to the same data structure that's less likely to have an exciting",
    "start": "797160",
    "end": "803760"
  },
  {
    "text": "outcome likewise you can ask well are our two requests going to edit the same",
    "start": "803760",
    "end": "808880"
  },
  {
    "text": "record in the database if a password reset system is storing tokens in the user's table then",
    "start": "808880",
    "end": "816360"
  },
  {
    "text": "resets for two different users are going to edit two different rows of that table and we're not going to get a collision",
    "start": "816360",
    "end": "823000"
  },
  {
    "text": "and it's probably not worth testing meanwhile if they're doing something like generating a pin and storing it in",
    "start": "823000",
    "end": "829600"
  },
  {
    "text": "the user session then we can use our single session to cause resets for two",
    "start": "829600",
    "end": "834880"
  },
  {
    "text": "different users at the same time and maybe a collision and an interesting outcome will",
    "start": "834880",
    "end": "841720"
  },
  {
    "text": "occur after we've built these requests it's time to use them to proe for Clues",
    "start": "841720",
    "end": "848079"
  },
  {
    "text": "so the first step here is to make sure that we recognize a clue when we see one by benchmarking how the application",
    "start": "848079",
    "end": "854360"
  },
  {
    "text": "behaves when we don't trigger any race conditions just by sending their requests to the server one at a time",
    "start": "854360",
    "end": "860360"
  },
  {
    "text": "with a delay between each and recording what happens then you just throw them at",
    "start": "860360",
    "end": "865560"
  },
  {
    "text": "the application all at once and look for any anomalies in how the application",
    "start": "865560",
    "end": "870880"
  },
  {
    "text": "responds or behaves afterwards if you don't get any that",
    "start": "870880",
    "end": "876040"
  },
  {
    "text": "might mean that there secure or that you need to tune your attack timing which I'll talk a little bit more about in one",
    "start": "876040",
    "end": "881240"
  },
  {
    "text": "of the case studies later once you've got an anomaly it's",
    "start": "881240",
    "end": "887160"
  },
  {
    "text": "time to understand what happened make sure you can replicate the Behavior Uh trust me that's worth doing uh and",
    "start": "887160",
    "end": "894199"
  },
  {
    "text": "explore the impact a word of warning about the impact if you're doing this methodology",
    "start": "894199",
    "end": "901440"
  },
  {
    "text": "right and being sufficiently ambitious then you'll often end up with behavior from the application that's quite weird",
    "start": "901440",
    "end": "908920"
  },
  {
    "text": "and unfamiliar with what you might have seen with other exploit techniques and",
    "start": "908920",
    "end": "914399"
  },
  {
    "text": "as a result the path to maximum security impact may not be obvious at all and it",
    "start": "914399",
    "end": "920040"
  },
  {
    "text": "can be easy to underestimate it to try and identify the impact I",
    "start": "920040",
    "end": "925560"
  },
  {
    "text": "would say think of what you found as a structural weakness and see if there's",
    "start": "925560",
    "end": "931199"
  },
  {
    "text": "any functionality within the application that this structural weakness under",
    "start": "931199",
    "end": "936240"
  },
  {
    "text": "mites also don't just stop and Report the first viable exploit that you find",
    "start": "936240",
    "end": "942319"
  },
  {
    "text": "uh I made that mistake myself and lost out on around $5,000 as a",
    "start": "942319",
    "end": "949360"
  },
  {
    "text": "result now we're going to look at some case studies so this is a tiny slice of",
    "start": "949360",
    "end": "955519"
  },
  {
    "text": "what you might find if you apply this approach in the",
    "start": "955519",
    "end": "960920"
  },
  {
    "text": "wild gitlab lets you invite unregistered users to administer projects via their",
    "start": "962160",
    "end": "968519"
  },
  {
    "text": "email address and this sounded juicy so I thought I'd test it out as a baseline",
    "start": "968519",
    "end": "974079"
  },
  {
    "text": "I invited one address six times sequentially and that resulted in one",
    "start": "974079",
    "end": "979319"
  },
  {
    "text": "invitation being created one invitation email and six responses saying status",
    "start": "979319",
    "end": "985560"
  },
  {
    "text": "success when I retried this sending the requests in parallel with the single packet attack we got one state of",
    "start": "985560",
    "end": "993079"
  },
  {
    "text": "success five error messages and two",
    "start": "993079",
    "end": "998199"
  },
  {
    "text": "emails so there's two Clues here that we've hit a substate the first is two",
    "start": "998199",
    "end": "1004519"
  },
  {
    "text": "emails is obviously quite suspicious and the other one is that the responses that we got differed from what we saw in the",
    "start": "1004519",
    "end": "1012880"
  },
  {
    "text": "Baseline it's worth noting that if we hadn't bothered to do the Baseline then",
    "start": "1012880",
    "end": "1018319"
  },
  {
    "text": "the the responses that we got when we did the attack wouldn't have looked suspicious at all and we might have missed the",
    "start": "1018319",
    "end": "1024558"
  },
  {
    "text": "buck now I initially thought that this had zero impact but then I noticed that",
    "start": "1024559",
    "end": "1030520"
  },
  {
    "text": "on gitlab the page there that lists active invitations assumes that there's",
    "start": "1030520",
    "end": "1036360"
  },
  {
    "text": "only one invitation present for a given address but with this you can create multiple and what that means is if an",
    "start": "1036360",
    "end": "1043918"
  },
  {
    "text": "admin sees an invitation that they don't like they might revoke it it will say",
    "start": "1043919",
    "end": "1049840"
  },
  {
    "text": "user was successfully removed from project but thanks to this technique it will actually upgrade that invitation to",
    "start": "1049840",
    "end": "1056160"
  },
  {
    "text": "a better admin level invitation now that impact isn't that",
    "start": "1056160",
    "end": "1061840"
  },
  {
    "text": "amazing because you need quite High privileges to exploit it in the first place but it got my attention firmly",
    "start": "1061840",
    "end": "1068160"
  },
  {
    "text": "fixed on gitlab and it left me wondering well is",
    "start": "1068160",
    "end": "1073440"
  },
  {
    "text": "there another angle I can take to get a more notable impact one approach that you can take to",
    "start": "1073440",
    "end": "1080039"
  },
  {
    "text": "finding inspiration for advanced race condition attacks is to look to Classic multi-step exploits and see if there's a",
    "start": "1080039",
    "end": "1087720"
  },
  {
    "text": "race condition adaption there's one attack where you add an extra product to your basket",
    "start": "1087720",
    "end": "1094120"
  },
  {
    "text": "during an online checkout when you're doing the payment process and if you time it right then you get the extra",
    "start": "1094120",
    "end": "1100720"
  },
  {
    "text": "item for free and I noticed that if you draw the state machine for gitlab's email very",
    "start": "1100720",
    "end": "1108400"
  },
  {
    "text": "verification process it looks quite similar so maybe if we change our email",
    "start": "1108400",
    "end": "1115640"
  },
  {
    "text": "address while gitlab is validating our previous email address it'll end up",
    "start": "1115640",
    "end": "1121080"
  },
  {
    "text": "validating the wrong one that would be high impact because it",
    "start": "1121080",
    "end": "1126320"
  },
  {
    "text": "would let me obtain validated email addresses belonging to other people and",
    "start": "1126320",
    "end": "1131480"
  },
  {
    "text": "crucially highjack any pending invitations like administrator invitations intended for those other",
    "start": "1131480",
    "end": "1139360"
  },
  {
    "text": "users so I tried this attack out and it didn't yield any clues but I noticed",
    "start": "1139360",
    "end": "1145720"
  },
  {
    "text": "that the email change response was arriving before the confirmation response every single time presumably",
    "start": "1145720",
    "end": "1153240"
  },
  {
    "text": "because one was a slower operation than the other and on gitlab I was able to",
    "start": "1153240",
    "end": "1159720"
  },
  {
    "text": "fix this and get a 50/50 distribution by adding a 90 millisecond delay before I",
    "start": "1159720",
    "end": "1166400"
  },
  {
    "text": "sent the request that was faster processing so what that meant was that",
    "start": "1166400",
    "end": "1171799"
  },
  {
    "text": "ID lined up the race windows and if there was a bug I was more likely to find",
    "start": "1171799",
    "end": "1176880"
  },
  {
    "text": "it there's an issue with using client side delays like this though which is",
    "start": "1176880",
    "end": "1181919"
  },
  {
    "text": "that it rolls out the single packet attack and means that Network Jitter might mess up your attack but I later",
    "start": "1181919",
    "end": "1188760"
  },
  {
    "text": "discovered an alternative solution which is often more effective web servers often delay",
    "start": "1188760",
    "end": "1196200"
  },
  {
    "text": "requests that are sent too quickly and that means that you can send a",
    "start": "1196200",
    "end": "1201440"
  },
  {
    "text": "single packet with a whole load of dummy requests in the middle of it which will",
    "start": "1201440",
    "end": "1206960"
  },
  {
    "text": "cause a server side delay and mean that when your fast processing request at the",
    "start": "1206960",
    "end": "1212200"
  },
  {
    "text": "end is reached It lines everything up perfectly so because with this",
    "start": "1212200",
    "end": "1218000"
  },
  {
    "text": "everything is reaching the server at the same time and the server is injecting the delay for us Network Jitter is no",
    "start": "1218000",
    "end": "1225440"
  },
  {
    "text": "longer going to make our attack fail using this technique on gitlab revealed",
    "start": "1225440",
    "end": "1232159"
  },
  {
    "text": "a massive clue sometimes the email confirmation token was sent to the wrong",
    "start": "1232159",
    "end": "1238200"
  },
  {
    "text": "address unfortunately for me this initially looked really exciting but this misdirected code was only valid for",
    "start": "1238200",
    "end": "1245880"
  },
  {
    "text": "the address that I'd already confirmed so it was completely useless but it did",
    "start": "1245880",
    "end": "1252760"
  },
  {
    "text": "show that there was at least one substate hidden inside gitlab's email",
    "start": "1252760",
    "end": "1258240"
  },
  {
    "text": "change endpoint and so it was clearly worth digging further and with that it's time for a",
    "start": "1258240",
    "end": "1267080"
  },
  {
    "text": "live demo so here we've got gitlab this is a",
    "start": "1267080",
    "end": "1274679"
  },
  {
    "text": "remote gear laab installation hosted in Ireland and I'm going to use the conference Wi-Fi to demonstrate a race",
    "start": "1274679",
    "end": "1280960"
  },
  {
    "text": "condition attack on it uh because the single packet attack is so powerful",
    "start": "1280960",
    "end": "1286279"
  },
  {
    "text": "there's no way that this could go",
    "start": "1286279",
    "end": "1290760"
  },
  {
    "text": "wrong so I'm just going to demonstrate if I change my email uh then the new",
    "start": "1291320",
    "end": "1297760"
  },
  {
    "text": "email is set as pending because I need to click the confirmation link and prove that I own that",
    "start": "1297760",
    "end": "1304440"
  },
  {
    "text": "address so I'm going to get the request and I'm going to send a prob so",
    "start": "1304440",
    "end": "1312600"
  },
  {
    "text": "the single packet attack is implemented in Turbo Intruder and for my prob",
    "start": "1312600",
    "end": "1319360"
  },
  {
    "text": "uh I'm just going to tell gitlab I want to change my email address to uh six",
    "start": "1319360",
    "end": "1326200"
  },
  {
    "text": "different email addresses and this is going to happen in the same millisecond on the server hopefully uh and we'll see",
    "start": "1326200",
    "end": "1333640"
  },
  {
    "text": "if anything interesting happens so the responses should appear all at once yeah that looks good uh",
    "start": "1333640",
    "end": "1341200"
  },
  {
    "text": "first thing to point out is there's a kind of a tiny hint here this this",
    "start": "1341200",
    "end": "1347320"
  },
  {
    "text": "runtime is pretty low for an endpoint that we know is sending an email so it kind of",
    "start": "1347320",
    "end": "1356200"
  },
  {
    "text": "suggests that maybe gitlab is passing the email send off to a different thread",
    "start": "1356200",
    "end": "1362480"
  },
  {
    "text": "and as soon as you've got different threads involved race conditions get a",
    "start": "1362480",
    "end": "1367640"
  },
  {
    "text": "lot more likely uh so if you see that it's worth doing thorough testing on that endpoint",
    "start": "1367640",
    "end": "1373120"
  },
  {
    "text": "but for a proper clue let's have a look at our emails and see if one is a",
    "start": "1373120",
    "end": "1378799"
  },
  {
    "text": "arrived so let's right here we go okay so you",
    "start": "1378799",
    "end": "1385039"
  },
  {
    "text": "can see this email was sent to demo 3 portswigger Donnet but this link is",
    "start": "1385039",
    "end": "1391440"
  },
  {
    "text": "going to confirm demo 5 so that's our clue that something is not quite right",
    "start": "1391440",
    "end": "1397440"
  },
  {
    "text": "here uh but it's not a valid exploit because this token is is definitely not going to work uh because it's been",
    "start": "1397440",
    "end": "1404480"
  },
  {
    "text": "overwritten by one of the other requests uh and some other reasons so I finished the",
    "start": "1404480",
    "end": "1411440"
  },
  {
    "text": "probe stage and now I'm going to try to exploit this vulnerability so I'm",
    "start": "1411440",
    "end": "1417039"
  },
  {
    "text": "dropping down to two synchronized requests here the first one set an email",
    "start": "1417039",
    "end": "1422440"
  },
  {
    "text": "address that I control and the second request sets spoof that Local Host which",
    "start": "1422440",
    "end": "1427880"
  },
  {
    "text": "I don't control that should not be rooted to my inbox uh there's one other thing worth",
    "start": "1427880",
    "end": "1434120"
  },
  {
    "text": "mentioning which is that in order for the Mis rooted token to be valid you",
    "start": "1434120",
    "end": "1439640"
  },
  {
    "text": "need to trigger gitlab's resend token functionality not their send token",
    "start": "1439640",
    "end": "1445960"
  },
  {
    "text": "functionality uh so you have to preset it to the email address that you control",
    "start": "1445960",
    "end": "1451320"
  },
  {
    "text": "first so that this one triggers a reset uh it took me three months to figure",
    "start": "1451320",
    "end": "1456760"
  },
  {
    "text": "that out so now I'm going to run this and if we're really lucky then in my inbox",
    "start": "1456760",
    "end": "1463120"
  },
  {
    "text": "we'll see an email for spoofed at Local Host",
    "start": "1463120",
    "end": "1469799"
  },
  {
    "text": "uh maybe this one uh okay I'm just going to try this like a couple of",
    "start": "1471919",
    "end": "1480880"
  },
  {
    "text": "times it usually works within like three attempts",
    "start": "1484399",
    "end": "1490799"
  },
  {
    "text": "maybe uh do have a backup video but I'm sure it won't be necessary you know what this",
    "start": "1490799",
    "end": "1498720"
  },
  {
    "text": "is doing is it's proving the point right you use loads of requests to probe for Clues because the more requests you use",
    "start": "1498720",
    "end": "1506080"
  },
  {
    "text": "the more likely things are to line up and make something interesting happen whereas for an exploit you have to use a",
    "start": "1506080",
    "end": "1512360"
  },
  {
    "text": "tiny number of requests uh which makes the whole thing less all right so that's promising",
    "start": "1512360",
    "end": "1520960"
  },
  {
    "text": "but that's a good start but we still don't know if this lit button is actually going to work um uh it depends",
    "start": "1521919",
    "end": "1528919"
  },
  {
    "text": "on what happen server side uh ah it worked",
    "start": "1528919",
    "end": "1535760"
  },
  {
    "text": "excellent so you can see my email is now spoofed at local host and if we go over",
    "start": "1538279",
    "end": "1543480"
  },
  {
    "text": "here it shows as verified uh and if we if there was a",
    "start": "1543480",
    "end": "1550600"
  },
  {
    "text": "pending admin invite for that address I would have just hijacked it so oh yeah",
    "start": "1550600",
    "end": "1556559"
  },
  {
    "text": "one other thing about that bug uh I discovered that on gitlab.com and I",
    "start": "1556559",
    "end": "1561600"
  },
  {
    "text": "couldn't resist using it to get a verified email of albino wax at gitlab.com uh and you can still see that",
    "start": "1561600",
    "end": "1568440"
  },
  {
    "text": "email on my gitlab profile uh over there so that shiny finding left me",
    "start": "1568440",
    "end": "1575679"
  },
  {
    "text": "wondering about what the underlying code might look like and the vulnerable code path starts",
    "start": "1575679",
    "end": "1583760"
  },
  {
    "text": "out in a Ruby on Rails framework called Dev and the root problem is an",
    "start": "1583760",
    "end": "1590679"
  },
  {
    "text": "inconsistency between how they decide where to send the email and what to put inside it the email is sent to an",
    "start": "1590679",
    "end": "1598000"
  },
  {
    "text": "address held in an instance variable that's passed directly to the background",
    "start": "1598000",
    "end": "1603279"
  },
  {
    "text": "thread that sends the email but the contents of the email are generated via a server side template",
    "start": "1603279",
    "end": "1610360"
  },
  {
    "text": "engine which reads the security token the security token back in from",
    "start": "1610360",
    "end": "1617600"
  },
  {
    "text": "from the database so the value in the database might have changed in that",
    "start": "1617600",
    "end": "1622679"
  },
  {
    "text": "intervening time period of maybe 1 millisecond and the wrong token can get",
    "start": "1622679",
    "end": "1628200"
  },
  {
    "text": "sent the impact of that discrepancy is pretty significant so as I mentioned you",
    "start": "1628200",
    "end": "1633360"
  },
  {
    "text": "can use it to hijack invitations uh but it's not just limited to that because",
    "start": "1633360",
    "end": "1639559"
  },
  {
    "text": "gitlab can be used as an open ID provider to create a sign in with gitlab",
    "start": "1639559",
    "end": "1645159"
  },
  {
    "text": "button on third-party websites and depending on how the third party",
    "start": "1645159",
    "end": "1650559"
  },
  {
    "text": "website implements that feature that vulnerability can enable issues all the",
    "start": "1650559",
    "end": "1657000"
  },
  {
    "text": "way up to arbitrary account hijacking on the third party site just to mention if",
    "start": "1657000",
    "end": "1663000"
  },
  {
    "text": "you were to find that bug in one of the major open ID providers that would be",
    "start": "1663000",
    "end": "1668519"
  },
  {
    "text": "pretty cool uh I did look for it I didn't find it but that doesn't mean it's not there I reported this issue to",
    "start": "1668519",
    "end": "1675159"
  },
  {
    "text": "gitlab and they patched it pretty quickly and then I confirmed it works on other",
    "start": "1675159",
    "end": "1681519"
  },
  {
    "text": "websites using the devise framework and I reported it to devise and that did not",
    "start": "1681519",
    "end": "1686840"
  },
  {
    "text": "go so well uh I reported it to four different addresses over the span of 200",
    "start": "1686840",
    "end": "1693679"
  },
  {
    "text": "days and heard absolutely nothing back from them until last week uh so we know",
    "start": "1693679",
    "end": "1700200"
  },
  {
    "text": "they are now looking at it which is good but I do not believe a patch is available yet now this library is really",
    "start": "1700200",
    "end": "1709080"
  },
  {
    "text": "popular uh it's also really easy to fingerprint because there's a fingerprintable unauthenticated endpoint",
    "start": "1709080",
    "end": "1714880"
  },
  {
    "text": "at/ users confirmation and because it's a library",
    "start": "1714880",
    "end": "1720480"
  },
  {
    "text": "the the way every website integrates with this functionality is slightly different so exploiting it is kind of",
    "start": "1720480",
    "end": "1726399"
  },
  {
    "text": "different and fun every time a few of the highlights that I found looking at bug Bounty sites that",
    "start": "1726399",
    "end": "1732720"
  },
  {
    "text": "use devis were some sites are secure because they have visible locking around",
    "start": "1732720",
    "end": "1738440"
  },
  {
    "text": "the whole email change process they obviously only change only process one email change request at a time on",
    "start": "1738440",
    "end": "1746399"
  },
  {
    "text": "another site when they generate the confirmation email the email doesn't",
    "start": "1746399",
    "end": "1751760"
  },
  {
    "text": "tell you which email address it's going to confirm so there's no clues that the",
    "start": "1751760",
    "end": "1757240"
  },
  {
    "text": "vulnerability is present and to actually exploit that I had to write a script that repeatedly triggered the emails",
    "start": "1757240",
    "end": "1764760"
  },
  {
    "text": "received the emails paed them visited the link and then re loed my profile in order to work out which email address",
    "start": "1764760",
    "end": "1770679"
  },
  {
    "text": "actually got confirmed and on a couple of other sites their visible email change functionality",
    "start": "1770679",
    "end": "1778519"
  },
  {
    "text": "was Secure but devise registers a hidden endpoint for resending uh emails and",
    "start": "1778519",
    "end": "1784600"
  },
  {
    "text": "that endpoint was still vulnerable and with that it's time to",
    "start": "1784600",
    "end": "1790559"
  },
  {
    "text": "move on from gab and device now race conditions are weird and I've saved the",
    "start": "1790559",
    "end": "1795840"
  },
  {
    "text": "weirdest one for the last case study study this was another token Mis rting flaw but the two email change requests",
    "start": "1795840",
    "end": "1803200"
  },
  {
    "text": "could be sent with a 20 minute delay in between them and you might be thinking",
    "start": "1803200",
    "end": "1809159"
  },
  {
    "text": "well that doesn't sound like a race condition but it was reliably inconsistent just like you would expect",
    "start": "1809159",
    "end": "1816399"
  },
  {
    "text": "a race condition to be and after summer analysis what I think was happening is",
    "start": "1816399",
    "end": "1821919"
  },
  {
    "text": "that my email change requests were getting put on a queue and that was being processed by a multi-threaded",
    "start": "1821919",
    "end": "1828000"
  },
  {
    "text": "batch job once every 30 minutes or so so my request timing was almost irrelevant",
    "start": "1828000",
    "end": "1835360"
  },
  {
    "text": "the reason I triggered the vulnerability was my request volume and the only reason I discovered",
    "start": "1835360",
    "end": "1842559"
  },
  {
    "text": "it was that I noticed that I received two emails to the same address",
    "start": "1842559",
    "end": "1848960"
  },
  {
    "text": "so basically these second order Clues like the emails you get afterwards or",
    "start": "1848960",
    "end": "1854279"
  },
  {
    "text": "the state the application ends up in are absolutely Cru crucial for finding deferred race conditions like this you",
    "start": "1854279",
    "end": "1860880"
  },
  {
    "text": "can't look at the response the application sends you because when it sends you the response the race",
    "start": "1860880",
    "end": "1866279"
  },
  {
    "text": "condition hasn't even been triggered yet overall over the course of This research",
    "start": "1866279",
    "end": "1871720"
  },
  {
    "text": "I've begun to regard spotting anomalies like this as probably the most important skill for finding race",
    "start": "1871720",
    "end": "1879679"
  },
  {
    "text": "conditions now from my case studies I focused on email based attacks but there's quite a few other places where",
    "start": "1879679",
    "end": "1886039"
  },
  {
    "text": "you can find high impact face conditions one pattern you'll find is partial",
    "start": "1886039",
    "end": "1891519"
  },
  {
    "text": "construction vulnerabilities these are particularly likely when an object is created in",
    "start": "1891519",
    "end": "1897679"
  },
  {
    "text": "multiple steps creating an insecure midle State like in this code snippet here uh which is some code that I wrote",
    "start": "1897679",
    "end": "1904799"
  },
  {
    "text": "five years ago that was not supposed to be vulnerable uh there's a brief window where this token value is not",
    "start": "1904799",
    "end": "1911799"
  },
  {
    "text": "initialized now this type of attack is most likely to work on applications that",
    "start": "1911799",
    "end": "1916840"
  },
  {
    "text": "have default or null type values and that don't just throw an exception when",
    "start": "1916840",
    "end": "1922080"
  },
  {
    "text": "they encounter those values but that attack is that that scenario is not a",
    "start": "1922080",
    "end": "1929120"
  },
  {
    "text": "strict requirement for this attack and for a completely different type of partial construction attack check out",
    "start": "1929120",
    "end": "1935440"
  },
  {
    "text": "the linked vulnerability found by Natalie sanovich in Google's web RTC",
    "start": "1935440",
    "end": "1942279"
  },
  {
    "text": "implementation now another angle for further research is to explore the root cause of race conditions which is unsafe",
    "start": "1942279",
    "end": "1949600"
  },
  {
    "text": "combinations of data structures and locking strategies there's three main strategies that I've run into the the",
    "start": "1949600",
    "end": "1957559"
  },
  {
    "text": "the first one is the classic defense which is locking for example php's",
    "start": "1957559",
    "end": "1963840"
  },
  {
    "text": "default native session Handler only processes one request in a given session",
    "start": "1963840",
    "end": "1969519"
  },
  {
    "text": "at a time now that means that well a site",
    "start": "1969519",
    "end": "1975080"
  },
  {
    "text": "isn't going to have a session based race condition with that session Handler but even if it has a database race condition",
    "start": "1975080",
    "end": "1983120"
  },
  {
    "text": "if you try and exploit that with a single session you're going to fail to find the vulnerability so it's important",
    "start": "1983120",
    "end": "1989679"
  },
  {
    "text": "to spot this locking behavior and adapt by using requests in multiple separate",
    "start": "1989679",
    "end": "1995600"
  },
  {
    "text": "sessions for your attack the second approach is batching which is really common in most modern",
    "start": "1995600",
    "end": "2002320"
  },
  {
    "text": "session handling mes systems because the performance is pretty good this is where",
    "start": "2002320",
    "end": "2007840"
  },
  {
    "text": "they read the entire value like the entire session from the database into a local inmemory copy when they get your",
    "start": "2007840",
    "end": "2015320"
  },
  {
    "text": "when they get your request they apply any read and write operations to that copy and then they write the whole thing",
    "start": "2015320",
    "end": "2022080"
  },
  {
    "text": "back to the database at the end of the request life cycle that makes them internally",
    "start": "2022080",
    "end": "2028519"
  },
  {
    "text": "consistent with regard to that thread during the request life cycle but as we saw on gitlab as soon as data gets",
    "start": "2028519",
    "end": "2036000"
  },
  {
    "text": "passed to a background thread everything falls apart also if you've got two",
    "start": "2036000",
    "end": "2041320"
  },
  {
    "text": "requests operating on the same record at the same time with this system then generally one of those requests will end",
    "start": "2041320",
    "end": "2048520"
  },
  {
    "text": "up overwriting the database changes from the other finally sometimes there's no",
    "start": "2048520",
    "end": "2054240"
  },
  {
    "text": "defense at all so we see this with databases where transactions aren't being used and you will occasionally see",
    "start": "2054240",
    "end": "2061158"
  },
  {
    "text": "this with session handlers especially custom session handlers now if your",
    "start": "2061159",
    "end": "2068118"
  },
  {
    "text": "session Handler falls into this category that's quite bad news because there's",
    "start": "2068119",
    "end": "2073358"
  },
  {
    "text": "loads of plausible completely reasonable code patents that are absolutely fine",
    "start": "2073359",
    "end": "2079679"
  },
  {
    "text": "unless your session Handler isn't doing batching in which case they suddenly have critical",
    "start": "2079679",
    "end": "2085960"
  },
  {
    "text": "vulnerabilities uh so it's worth making sure that you know what approach your session Handler is",
    "start": "2085960",
    "end": "2092878"
  },
  {
    "text": "using the final area for potential Improvement is of course improving the single packet attack So currently my",
    "start": "2092879",
    "end": "2101480"
  },
  {
    "text": "implementation lets you get 20 to 30 requests reliably in a single packet and",
    "start": "2101480",
    "end": "2107160"
  },
  {
    "text": "I'm certain that you can fit that you can fit more in you can definitely do it",
    "start": "2107160",
    "end": "2112839"
  },
  {
    "text": "with a custom TCP or TLS stack but that's probably a bit of a pain to implement but there may be other easier",
    "start": "2112839",
    "end": "2119320"
  },
  {
    "text": "strategies that exist as well uh I'm confident this can be pushed further I",
    "start": "2119320",
    "end": "2124440"
  },
  {
    "text": "didn't look into it in depth myself because once I'd got 20 requests in a single packet that was enough to trigger",
    "start": "2124440",
    "end": "2131720"
  },
  {
    "text": "enough vulnerabilities to be getting on with the other thing that would be improving the other thing that would",
    "start": "2131720",
    "end": "2138480"
  },
  {
    "text": "help is finding ways to cause delays of different length of time reliably",
    "start": "2138480",
    "end": "2144599"
  },
  {
    "text": "servici side using that technique because that would mean you could use it to try and find a broader range of",
    "start": "2144599",
    "end": "2151200"
  },
  {
    "text": "vulnerabilities that require different timings and it would also help out with certain timing attacks as",
    "start": "2151200",
    "end": "2158280"
  },
  {
    "text": "well now as far as defense goes when a single request can push an application",
    "start": "2158280",
    "end": "2164440"
  },
  {
    "text": "through multiple invisible substates understanding and predicting that application's behavior is",
    "start": "2164440",
    "end": "2170599"
  },
  {
    "text": "incredibly difficult and defense is really not practical so I would suggest",
    "start": "2170599",
    "end": "2177440"
  },
  {
    "text": "trying to avoid the creation of substates wherever possible and the way to do that is primarily to use your data",
    "start": "2177440",
    "end": "2184400"
  },
  {
    "text": "store consistency features and avoid mix ing data data sources devise was",
    "start": "2184400",
    "end": "2190520"
  },
  {
    "text": "vulnerable because they read a token from the database and sent it to an address held in an instance variable if",
    "start": "2190520",
    "end": "2197599"
  },
  {
    "text": "they' passed both values in instance variables they would have been fine or if they'd held them both in the database",
    "start": "2197599",
    "end": "2202920"
  },
  {
    "text": "that would have been fine too it was this blending that led to the vulnerability the other key key point",
    "start": "2202920",
    "end": "2209079"
  },
  {
    "text": "for defense is of course make sure you know what locking strategy your session Handler is",
    "start": "2209079",
    "end": "2215480"
  },
  {
    "text": "using now there's quite a lot of further reading available uh I would primarily",
    "start": "2215480",
    "end": "2222119"
  },
  {
    "text": "like to suggest check out the white paper that's the online version of this presentation it'll be live on our",
    "start": "2222119",
    "end": "2227359"
  },
  {
    "text": "website in 2 minutes time uh have a practice on the online Labs they're free",
    "start": "2227359",
    "end": "2233079"
  },
  {
    "text": "and there's no substitute for getting actual experience exploiting these vulnerabilities and then finally grab my",
    "start": "2233079",
    "end": "2239880"
  },
  {
    "text": "code and go out and find some real vulnerabilities in the wild there's a lot of them out there I've left more on",
    "start": "2239880",
    "end": "2245960"
  },
  {
    "text": "the table than usual because I wasn't able to automate scanning for this type of issue uh and if you have any crazy",
    "start": "2245960",
    "end": "2253000"
  },
  {
    "text": "findings with these techniques that you'd like to share I definitely love to hear about",
    "start": "2253000",
    "end": "2258200"
  },
  {
    "text": "it the three key things to take away are the single packet attack makes race",
    "start": "2258200",
    "end": "2263960"
  },
  {
    "text": "conditions reliable with race conditions everything is potentially multi-step and to find",
    "start": "2263960",
    "end": "2271000"
  },
  {
    "text": "these bugs predict probe and proof I'm going to take three minutes of questions",
    "start": "2271000",
    "end": "2277480"
  },
  {
    "text": "now if you have any more after that feel free to come and chat to me at the back or just ch me an email uh don't forget",
    "start": "2277480",
    "end": "2283760"
  },
  {
    "text": "to follow me on Twitter or wherever you are these days thanks for",
    "start": "2283760",
    "end": "2289480"
  },
  {
    "text": "listening",
    "start": "2290119",
    "end": "2293119"
  }
]