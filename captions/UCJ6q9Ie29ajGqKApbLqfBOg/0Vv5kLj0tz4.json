[
  {
    "text": "[Music]",
    "start": "1700",
    "end": "4810"
  },
  {
    "text": "it's my pleasure to welcome Christian Russell to the stage",
    "start": "7340",
    "end": "12620"
  },
  {
    "text": "all right hey everyone uh Welcome to our presentation uh today we'll talk about a couple of uh Android full chains we",
    "start": "17520",
    "end": "24420"
  },
  {
    "text": "discovered in the wild in 2021 by monitoring surveillance vendors",
    "start": "24420",
    "end": "30539"
  },
  {
    "text": "This Is Us on your left hand side you have shingyu and Richard they work in the Android malware research team where",
    "start": "30539",
    "end": "37800"
  },
  {
    "text": "they work on protecting Android against malware and exploits and on your right hand side you have me",
    "start": "37800",
    "end": "44160"
  },
  {
    "text": "Christian I work in Google's threat analysis group I'll talk a bit uh more about what we do in a couple of slides",
    "start": "44160",
    "end": "52879"
  },
  {
    "text": "so uh the main part of this presentation is a deep dive into an exploit uh we",
    "start": "53160",
    "end": "58440"
  },
  {
    "text": "found as part of a food chain uh and xingyu will guide us through this",
    "start": "58440",
    "end": "63539"
  },
  {
    "text": "um but before that I'll give you some background on what tagged us and some examples of these full chains",
    "start": "63539",
    "end": "70680"
  },
  {
    "text": "and after that uh Richard will go through some post exploitation techniques uh an exploit we found in the",
    "start": "70680",
    "end": "76799"
  },
  {
    "text": "Play Store and a bit about defending Android before we wrap up the conclusion",
    "start": "76799",
    "end": "84380"
  },
  {
    "text": "all right so Google's threat analysis group or tag for sure",
    "start": "85140",
    "end": "90240"
  },
  {
    "text": "um our goal is to protect Google and our users and one way that we're doing this",
    "start": "90240",
    "end": "95520"
  },
  {
    "text": "is that we're routinely hunting for zero days exploited in the wild and as you",
    "start": "95520",
    "end": "100560"
  },
  {
    "text": "can see on your right hand side um back in 2019 we reported seven zero",
    "start": "100560",
    "end": "106200"
  },
  {
    "text": "days found in the wild uh five in 2020 10 in 2021 so it was a pretty good year",
    "start": "106200",
    "end": "111899"
  },
  {
    "text": "for us and so far in 2022 we reported three zero days that we found in the",
    "start": "111899",
    "end": "116939"
  },
  {
    "text": "wild and to discover these series um what we're doing is that or one thing",
    "start": "116939",
    "end": "122520"
  },
  {
    "text": "we're doing is that we're tracking more than 30 different commercial surveillance vendor so any company that",
    "start": "122520",
    "end": "128399"
  },
  {
    "text": "provides um exploits or implants or other offensive services to its customers",
    "start": "128399",
    "end": "136519"
  },
  {
    "text": "um yeah and as I mentioned there's like we're tracking more than 30. so like we often see just a handful of companies",
    "start": "136680",
    "end": "143040"
  },
  {
    "text": "mentioned in the media but that's just the tip of the iceberg and this is a very thriving industry with a lot of",
    "start": "143040",
    "end": "148500"
  },
  {
    "text": "different companies involved and one interesting thing that we've seen is that some of these groups are",
    "start": "148500",
    "end": "155400"
  },
  {
    "text": "actually sharing or selling exploits between each other so there was one case uh we had a chrome intense logic floor",
    "start": "155400",
    "end": "162800"
  },
  {
    "text": "uh back in I think it was 2021 that we saw several groups using the same exploit so there's also some form of",
    "start": "162800",
    "end": "170580"
  },
  {
    "text": "cooperation going on here all right and next up I'll talk about two Android full chains that we",
    "start": "170580",
    "end": "176760"
  },
  {
    "text": "discovered in 2021 so these are two full chains from two different surveillance",
    "start": "176760",
    "end": "182519"
  },
  {
    "text": "vendors and the first one",
    "start": "182519",
    "end": "187680"
  },
  {
    "text": "um this was discovered by us in October 2021 uh and it was served to an",
    "start": "187680",
    "end": "192840"
  },
  {
    "text": "up-to-date Android device at the time uh and they were exploiting two vulnerabilities uh one of them was a",
    "start": "192840",
    "end": "198599"
  },
  {
    "text": "zero day in Chrome to get execution in Chrome's rendering process which is heavily sandboxed and from there they",
    "start": "198599",
    "end": "205440"
  },
  {
    "text": "need to escape the samox and they were exploiting an e-pol reference counting vulnerability in the Linux kernel",
    "start": "205440",
    "end": "212580"
  },
  {
    "text": "and what's interesting about this vulnerability is that it was actually quickly fixed in the Upstream kernel so",
    "start": "212580",
    "end": "219300"
  },
  {
    "text": "they introduced the patch like or the bug with one patch and then it was fixed",
    "start": "219300",
    "end": "224400"
  },
  {
    "text": "like I think it was a week later so pretty quickly but unfortunately in Android only the first patch was picked",
    "start": "224400",
    "end": "229739"
  },
  {
    "text": "up so it left Android vulnerable for about a year I think and unfortunately it's not the first",
    "start": "229739",
    "end": "236640"
  },
  {
    "text": "time this has happened this was also the case for another runability known as bad binder which has been yeah documented a",
    "start": "236640",
    "end": "244019"
  },
  {
    "text": "lot publicly and this was also quickly fixed in the Upstream kernel but took a while to",
    "start": "244019",
    "end": "249060"
  },
  {
    "text": "reach Android yep um so one thing that was interesting with this",
    "start": "249060",
    "end": "255360"
  },
  {
    "text": "um full chain uh in the sandbox Escape Park so when they were exploiting this",
    "start": "255360",
    "end": "260400"
  },
  {
    "text": "EPO reference counting vulnerability they had a pretty interesting exploitation technique that I just",
    "start": "260400",
    "end": "265620"
  },
  {
    "text": "wanted to mention because yeah I thought it was cool and I don't think I've ever seen this documented before so yeah",
    "start": "265620",
    "end": "271380"
  },
  {
    "text": "so this vulnerability uh gives an attacker the ability to free a file structure in the Linux kernel uh while",
    "start": "271380",
    "end": "279060"
  },
  {
    "text": "you still have a reference to it from userspace as a file descriptor so you have a pretty classic use after free",
    "start": "279060",
    "end": "285419"
  },
  {
    "text": "scenario um and the goal of this exploitation technique which is just a part of the",
    "start": "285419",
    "end": "291840"
  },
  {
    "text": "exploit it's not like the full exploit but the way that the surveillance vendor chose to exploit the vulnerability",
    "start": "291840",
    "end": "298380"
  },
  {
    "text": "uh is to get Riot access to codes and what they're doing here is that they're",
    "start": "298380",
    "end": "304080"
  },
  {
    "text": "getting right access to lib C and these changes when they're writing to lib c",
    "start": "304080",
    "end": "309120"
  },
  {
    "text": "will be mirrored into every process on the system so effectively this gives you by exploiting this you get code",
    "start": "309120",
    "end": "317100"
  },
  {
    "text": "execution every process that uses slip C which is everything",
    "start": "317100",
    "end": "322280"
  },
  {
    "text": "and the steps uh the first step is you map lib C which is your target using a map and then you create some file",
    "start": "322440",
    "end": "329460"
  },
  {
    "text": "descriptor that you can trigger this vulnerability on and",
    "start": "329460",
    "end": "334919"
  },
  {
    "text": "um yeah so I've uh in the original code I mean there was a huge bug trigger but I",
    "start": "334919",
    "end": "341280"
  },
  {
    "text": "replaced this with f put which is the kernel API for freeing file structures so just to kind of distill it into one",
    "start": "341280",
    "end": "348060"
  },
  {
    "text": "slide so it's easier to see but yeah so the next step is like you triggered a bug so now you have a file descriptor",
    "start": "348060",
    "end": "354300"
  },
  {
    "text": "that points to a freed file in the kernel and you quickly replace it by creating",
    "start": "354300",
    "end": "359880"
  },
  {
    "text": "an MFD which will occupy the last read file structure and then you map this as readable and",
    "start": "359880",
    "end": "366060"
  },
  {
    "text": "writable and now uh we want to free this yet",
    "start": "366060",
    "end": "371639"
  },
  {
    "text": "again so since we replaced this previous file structure by creating another file both",
    "start": "371639",
    "end": "378060"
  },
  {
    "text": "of these file descriptors in user space actually points to the same file structure in the kernel so by closing",
    "start": "378060",
    "end": "384780"
  },
  {
    "text": "this twice we can free the file structure again and the reason why I have to do it twice",
    "start": "384780",
    "end": "390360"
  },
  {
    "text": "is because the Linux kernel has two references to this file one by creating",
    "start": "390360",
    "end": "396419"
  },
  {
    "text": "the MFD and one by doing the M map so if we and yet again we replace it",
    "start": "396419",
    "end": "403259"
  },
  {
    "text": "so now this um memfd shared memory mapping it has a reference to the previous file which you",
    "start": "403259",
    "end": "410639"
  },
  {
    "text": "know should be like a shared mem file but now it's actually lib C again",
    "start": "410639",
    "end": "416520"
  },
  {
    "text": "and this is like the juicy part of the exploit technique what they're doing is looping through every page in libsy so",
    "start": "416520",
    "end": "423900"
  },
  {
    "text": "you don't have this Loop looping through every single page and you touch the start of a page this makes sure that the",
    "start": "423900",
    "end": "430500"
  },
  {
    "text": "kernel will load the pages into memory from this um but the interesting part is when you",
    "start": "430500",
    "end": "436740"
  },
  {
    "text": "do this for the readable and writable mapping the Linux kernel like the page full Handler will look up the file",
    "start": "436740",
    "end": "442440"
  },
  {
    "text": "that's associated with this memory mapping which now is actually lib C and since we",
    "start": "442440",
    "end": "448560"
  },
  {
    "text": "just folded in all the pages the kernel is happy and we get lib C pages into our readable and writable memory mapping",
    "start": "448560",
    "end": "456000"
  },
  {
    "text": "which we can then overwrite and this will be reflected in every process and this particular surveillance vendor",
    "start": "456000",
    "end": "462840"
  },
  {
    "text": "used this to inject a shell code into certain system calls that would then",
    "start": "462840",
    "end": "468060"
  },
  {
    "text": "load an implant if it was running in the correct process",
    "start": "468060",
    "end": "472819"
  },
  {
    "text": "yeah that was the first full chain so the second one this is directly related to the exploit that xinyu and Richard will",
    "start": "473220",
    "end": "480060"
  },
  {
    "text": "talk about um and this surveillance vendor was using quite a it was a bit different",
    "start": "480060",
    "end": "485639"
  },
  {
    "text": "strategy so instead of using zero days against Chrome they were actually targeting a",
    "start": "485639",
    "end": "491099"
  },
  {
    "text": "chrome based browser that was lagging behind Chrome in patches",
    "start": "491099",
    "end": "496740"
  },
  {
    "text": "so they could use um end days against these browsers as it",
    "start": "496740",
    "end": "501780"
  },
  {
    "text": "was a zero day basically and depending on the version of the browser they have three different bugs",
    "start": "501780",
    "end": "507539"
  },
  {
    "text": "that they would bundle uh with their exploit and for the samples Escape part to",
    "start": "507539",
    "end": "512760"
  },
  {
    "text": "escape from chrome uh in some cases they were using the bad binder vulnerability that I mentioned earlier",
    "start": "512760",
    "end": "518399"
  },
  {
    "text": "but in other cases they were actually using a zero day and you'll hear more about this bug very soon",
    "start": "518399",
    "end": "526140"
  },
  {
    "text": "but first let me take you through the kind of timeline how does it look like for a user that's targeted by this",
    "start": "526140",
    "end": "533580"
  },
  {
    "text": "so the first thing that happens is the user receives a one-time link and they click it",
    "start": "533580",
    "end": "541320"
  },
  {
    "text": "and when they click it they're redirected to an exploit server uh and the job of this exploit server is to",
    "start": "541320",
    "end": "546899"
  },
  {
    "text": "fingerprint the device and serve the correct exploit depending on browser versions OS version and so on",
    "start": "546899",
    "end": "554519"
  },
  {
    "text": "and in both of these cases for the uh for the surveillance vendors they were",
    "start": "554519",
    "end": "560700"
  },
  {
    "text": "targeting Chrome so they have some sort of chrome exploit that gets code execution in Chrome's rendering process",
    "start": "560700",
    "end": "567480"
  },
  {
    "text": "and from there at least at the time of uh when we discovered this vulnerability I'm not sure if it's the same anymore",
    "start": "567480",
    "end": "573200"
  },
  {
    "text": "but they were abusing Chrome's webassembly code mappings because they",
    "start": "573200",
    "end": "578399"
  },
  {
    "text": "used to be readable writable executable so they put some Shell Code and elf",
    "start": "578399",
    "end": "584040"
  },
  {
    "text": "loader yeah and they're explaining there and by jumping to this elf loader they",
    "start": "584040",
    "end": "591180"
  },
  {
    "text": "load a local privilege escalation exploits and with that I'll hand it over to",
    "start": "591180",
    "end": "596279"
  },
  {
    "text": "shinyu there we go thank you Christian",
    "start": "596279",
    "end": "602100"
  },
  {
    "text": "so uh we're gonna do a div dive to the zero day we captured and it's also fixed",
    "start": "602100",
    "end": "607620"
  },
  {
    "text": "in the last November it's a CV 2021 0920 so it's the most probably the most",
    "start": "607620",
    "end": "613800"
  },
  {
    "text": "complicated Android uh kernels exploit last year and it could also be one of the most convoluted exploit in across",
    "start": "613800",
    "end": "621180"
  },
  {
    "text": "the newest kind of History in terms of this uh broadcast analysis and exploitation techniques so basically",
    "start": "621180",
    "end": "627660"
  },
  {
    "text": "we capture two major versions of exploits so the expiration version a targeted at recent early devices and",
    "start": "627660",
    "end": "635580"
  },
  {
    "text": "expert B Target our recent devices so everything starting at a very simple",
    "start": "635580",
    "end": "641160"
  },
  {
    "text": "kind of features that users can send fight this graders to other process by something called SCM let's call it right",
    "start": "641160",
    "end": "648060"
  },
  {
    "text": "datagram by send message Cisco so let's say I am a socket fight in square a and",
    "start": "648060",
    "end": "653640"
  },
  {
    "text": "I send a cell to a 5D square B so what happens in kernel is that first of all kernel Atticus structure called SK",
    "start": "653640",
    "end": "660480"
  },
  {
    "text": "underscore buff or socket buffer or AKA as SKB at attend the circuit buffer to",
    "start": "660480",
    "end": "667800"
  },
  {
    "text": "the receiver queue and as you can see there's one field in the socket buffer point to another newly allocated",
    "start": "667800",
    "end": "674399"
  },
  {
    "text": "structure called Sam underscore list and it contains an Aries of file Founders",
    "start": "674399",
    "end": "680579"
  },
  {
    "text": "that point to the file in the flight so from our receiver point of view it received the message so the socket",
    "start": "680579",
    "end": "686880"
  },
  {
    "text": "platform is removed from the receiver queue and get free and kernel will install another file disclosure C in",
    "start": "686880",
    "end": "693720"
  },
  {
    "text": "terms of the 5A so as you can see the 5A now has two reference count okay so",
    "start": "693720",
    "end": "699899"
  },
  {
    "text": "however let's consider the following scenario like I am despite this group a",
    "start": "699899",
    "end": "705060"
  },
  {
    "text": "I send a cell to B and B Center cell 2A and then what happens in the user space is that uses space cross A and B so",
    "start": "705060",
    "end": "712620"
  },
  {
    "text": "there's no way for the kernel to destruct file A and B because they still have a reference count but there's no",
    "start": "712620",
    "end": "718800"
  },
  {
    "text": "way for the user Space Program to calculus again because five Distributors are already removed from kind of",
    "start": "718800",
    "end": "724620"
  },
  {
    "text": "descriptive table so that's why we need a guard reflector in the Linux kernel so",
    "start": "724620",
    "end": "730200"
  },
  {
    "text": "for example every time you you call close this car it may trigger W collection system and the way to",
    "start": "730200",
    "end": "736500"
  },
  {
    "text": "identify potential garbage is to implement something called in Flight count so what does inflightcom means is",
    "start": "736500",
    "end": "742680"
  },
  {
    "text": "is pretty simple is that you know if there's a file in the flight then we just increment the reference in Flight",
    "start": "742680",
    "end": "749040"
  },
  {
    "text": "comes so as you can see the Ace in front count is one because a is in the fly so",
    "start": "749040",
    "end": "754079"
  },
  {
    "text": "similarly it based in flight card is sort of one so as you can see the",
    "start": "754079",
    "end": "759120"
  },
  {
    "text": "replica here equals to the infrared count so it could be a good sign of potential garbage but it is not always",
    "start": "759120",
    "end": "765540"
  },
  {
    "text": "the case if we consider this cycle like a center b b send itself to alpha alpha",
    "start": "765540",
    "end": "772019"
  },
  {
    "text": "centers out to 3 and b Center a so if you're the Space Program close A",
    "start": "772019",
    "end": "777360"
  },
  {
    "text": "and B what happens here is that the Run Ace reference count equals to the inside count and B's infinite account equals to",
    "start": "777360",
    "end": "784380"
  },
  {
    "text": "the reference count so A and B are considered as potential garbage but they are not actually garbage because we can",
    "start": "784380",
    "end": "790980"
  },
  {
    "text": "guide 5D square B from 5 Discord Alpha and we can get 5 display a from the 5D is great to be so for our coverage",
    "start": "790980",
    "end": "798120"
  },
  {
    "text": "collector point of view is that first of all A and B are considered as potential garbage so A and B are put into Global",
    "start": "798120",
    "end": "805139"
  },
  {
    "text": "list called GC underscore candidates and then what kind of does is to scan",
    "start": "805139",
    "end": "811260"
  },
  {
    "text": "the inflight for the GC candidate so let's say the criminal scans a first so",
    "start": "811260",
    "end": "816660"
  },
  {
    "text": "it will check a receiver queue okay so a is the reciprocal Q is B and",
    "start": "816660",
    "end": "822779"
  },
  {
    "text": "because B is also in the GC candidates what kind of what does is to decrement these inflate columns so this infrared",
    "start": "822779",
    "end": "830279"
  },
  {
    "text": "count is decremented from two to one and similarly Ace infinite count is also",
    "start": "830279",
    "end": "835500"
  },
  {
    "text": "document to zero however as a result because this infrared account is still",
    "start": "835500",
    "end": "840540"
  },
  {
    "text": "above zero so B is not considered as a garbage what kind of will do is to",
    "start": "840540",
    "end": "845760"
  },
  {
    "text": "recursely restore info account so this info account will be restored to two and Ace infant color will be restored from 0",
    "start": "845760",
    "end": "852720"
  },
  {
    "text": "to 1 and no one is considered as garbage so however if you consider the the",
    "start": "852720",
    "end": "859380"
  },
  {
    "text": "formation on breakout cycle A and B are considered as potential coverage so they",
    "start": "859380",
    "end": "865139"
  },
  {
    "text": "are put into the GC candidates and scanning flag process will lead to the foreign result that A and B's inflatcom",
    "start": "865139",
    "end": "872339"
  },
  {
    "text": "are both zero so all of them are considered as garbage so the final step for the kernel is to improve this",
    "start": "872339",
    "end": "878459"
  },
  {
    "text": "garbage is by remove and free the socket buffer and then digital 5 in and P",
    "start": "878459",
    "end": "884040"
  },
  {
    "text": "so we also have two ways to cause receive message so if we call receive",
    "start": "884040",
    "end": "889500"
  },
  {
    "text": "messages call without massive Peak flag first of all it will synchronize with GC which means that kernel will install a",
    "start": "889500",
    "end": "896040"
  },
  {
    "text": "new fight distribution artwork before did she say finish so what happens in kernel is that the receiver will remove",
    "start": "896040",
    "end": "903300"
  },
  {
    "text": "and free the socket buffers and install another file distributor however if we",
    "start": "903300",
    "end": "909180"
  },
  {
    "text": "call receive message with massive Peak flag it doesn't synchronize with GC it",
    "start": "909180",
    "end": "914279"
  },
  {
    "text": "means that we can have one third cause received message with message Peak flag while there's another thread doing the",
    "start": "914279",
    "end": "919860"
  },
  {
    "text": "GC in the meantime and also from receiver point of view it will not",
    "start": "919860",
    "end": "925620"
  },
  {
    "text": "remove the socket buffer so and and kernel will still install another file",
    "start": "925620",
    "end": "930660"
  },
  {
    "text": "description so you can see and the a reference column can get elevated",
    "start": "930660",
    "end": "935699"
  },
  {
    "text": "okay so now we really want to introduce the vulnerability scenario so like I said the issue here is that the recently",
    "start": "935699",
    "end": "944100"
  },
  {
    "text": "message with massive big flag doesn't synchronize with GC so there will be one file and the reference can't get",
    "start": "944100",
    "end": "950399"
  },
  {
    "text": "elevated however you know this kind of vulnerability is difficult to trigger",
    "start": "950399",
    "end": "955440"
  },
  {
    "text": "because you know most of the time you heard about is like hey the file reference can't get decremented by",
    "start": "955440",
    "end": "960540"
  },
  {
    "text": "accident so how to do how to get a user-free by elevator file files",
    "start": "960540",
    "end": "965880"
  },
  {
    "text": "reference count however it's very complicated and unfortunately we are not",
    "start": "965880",
    "end": "971459"
  },
  {
    "text": "going to go through details here but we will illustrate call Ideal um so you know the color here that I",
    "start": "971459",
    "end": "978720"
  },
  {
    "text": "received message zip code doesn't synchronize with uh with massive pink product and simplified with GC so if we",
    "start": "978720",
    "end": "984540"
  },
  {
    "text": "at least we are very very uh complex and consistent GC State and various subtle risk conditions here uh when it leads to",
    "start": "984540",
    "end": "991320"
  },
  {
    "text": "a result in a user-free in the socket buffer so uh you know we have to create",
    "start": "991320",
    "end": "996839"
  },
  {
    "text": "three main threads one thread does GC and two or two tasks cause risky message",
    "start": "996839",
    "end": "1002180"
  },
  {
    "text": "with some good results massive Peak flag and through a very comfortable coaches are one of the receiver will receive a",
    "start": "1002180",
    "end": "1009199"
  },
  {
    "text": "user-friendly socket buffer object so the patch here is actually pretty simple you know it's just called spin long it's",
    "start": "1009199",
    "end": "1015139"
  },
  {
    "text": "being all in two lines to make sure like uh the best it picks the top will install a fighter skirt before GC have",
    "start": "1015139",
    "end": "1021500"
  },
  {
    "text": "completes and interestingly the current bug was found in 2016 and you can see you can",
    "start": "1021500",
    "end": "1027740"
  },
  {
    "text": "check this email address because there's a public Linux kind of email address",
    "start": "1027740",
    "end": "1032918"
  },
  {
    "text": "unfortunately the patch was not accepted so that means any Bad actors see the",
    "start": "1032919",
    "end": "1038720"
  },
  {
    "text": "ones kind of email thread may come up with an exploit against the Linux and Android users okay so now let's take a",
    "start": "1038720",
    "end": "1045798"
  },
  {
    "text": "look at how of the Explorer a does so A is for the old devices so first of all",
    "start": "1045799",
    "end": "1051860"
  },
  {
    "text": "you know there will be a lot of thread in living and the way to win the risk condition with higher chance is to",
    "start": "1051860",
    "end": "1057559"
  },
  {
    "text": "generate as much coverage as possible and it's also a good sign for detection and in reality there will be really a",
    "start": "1057559",
    "end": "1063620"
  },
  {
    "text": "lot to us including each other sometimes for history some threads for fixing the kernel structure for for backgrounds and",
    "start": "1063620",
    "end": "1070460"
  },
  {
    "text": "there will be also a lot a lot of threads to impact on schedulers and through very very cool choices there",
    "start": "1070460",
    "end": "1076880"
  },
  {
    "text": "will be very small chance that you will have a useful object and also get history so that's why the X-ray tries",
    "start": "1076880",
    "end": "1082580"
  },
  {
    "text": "250 times for getting a free soccer park object and also spray on the circuit",
    "start": "1082580",
    "end": "1088940"
  },
  {
    "text": "buffer object is not it's not easy because circuit buffer object is allocated from our separate cache",
    "start": "1088940",
    "end": "1095419"
  },
  {
    "text": "so that means the conventional ships to the technique doesn't work but there is something called cross-catching pad is",
    "start": "1095419",
    "end": "1102380"
  },
  {
    "text": "that you know if we can free all the circuit buffer object in The Sims lab page and freeze so the page may have the",
    "start": "1102380",
    "end": "1109220"
  },
  {
    "text": "chance to be returned to the page allocator that might be used by other cache that could be impacted by the",
    "start": "1109220",
    "end": "1116000"
  },
  {
    "text": "normal confessional history technique but the chance is very small and now assume we can spray the SKB and we can",
    "start": "1116000",
    "end": "1123320"
  },
  {
    "text": "control that SKB data what happens here in kernel inter if we call the receive message Cisco kernel will copy address",
    "start": "1123320",
    "end": "1130160"
  },
  {
    "text": "from SKB data back to user space so now the question here is that I have no",
    "start": "1130160",
    "end": "1135500"
  },
  {
    "text": "information disclosure what address I should read so for the actual sample a it's very interesting because it reads",
    "start": "1135500",
    "end": "1141559"
  },
  {
    "text": "our physical address and it is the page size data calculated md5 hash value",
    "start": "1141559",
    "end": "1147640"
  },
  {
    "text": "comparing with a hash table with 512 values so you can calculate the kind of",
    "start": "1147640",
    "end": "1155059"
  },
  {
    "text": "base of the that so why does it actually reads our fixed and address so we",
    "start": "1155059",
    "end": "1163100"
  },
  {
    "text": "believe it's because OEM X invent is on things for current based realization before mainstream kernel and based on",
    "start": "1163100",
    "end": "1169280"
  },
  {
    "text": "the exponent it only randomized nine base at 4K alignment so an attacker is due to excess of that it can address",
    "start": "1169280",
    "end": "1175580"
  },
  {
    "text": "locally so by having a semi arbitrary they actually is able to iterate in the",
    "start": "1175580",
    "end": "1182000"
  },
  {
    "text": "tasks and find the exact type structures from its one within chart process and get the address of the address damage so",
    "start": "1182000",
    "end": "1188840"
  },
  {
    "text": "if you run your Android device which can use conversion lower than 4.14 overwriting the address limit to like",
    "start": "1188840",
    "end": "1194059"
  },
  {
    "text": "minus two where that and user users based program is able to write object",
    "start": "1194059",
    "end": "1199700"
  },
  {
    "text": "kind of address so to get the arbitrary right perimeter they actually has some very rare things",
    "start": "1199700",
    "end": "1206240"
  },
  {
    "text": "called kernel stagger for primitive and so basic idea here is that you know if user Space Program initialize something",
    "start": "1206240",
    "end": "1213260"
  },
  {
    "text": "called Unix address and pass it to the kernel what kind of what does is to cast mem copy to copy the the name of around",
    "start": "1213260",
    "end": "1220340"
  },
  {
    "text": "the user's address and as you can see the address here is from the SKB because we have control of SKB so presumably if",
    "start": "1220340",
    "end": "1228980"
  },
  {
    "text": "we have the control of the SKB SK then we can craft a stack Overflow so if we",
    "start": "1228980",
    "end": "1235100"
  },
  {
    "text": "have stock flow we can corrupt a lot of Stack variable from the above or three voltages underscore recent message so",
    "start": "1235100",
    "end": "1241940"
  },
  {
    "text": "this is a bigger diagram and this is the affected area of the stack Overflow if we can control the SKB SK so the way to",
    "start": "1241940",
    "end": "1250039"
  },
  {
    "text": "do so or bypass privilege access level is that the experts use in map Cisco and",
    "start": "1250039",
    "end": "1255919"
  },
  {
    "text": "create a USB memory with mapshare property and because map sure property is not affected by the copyright",
    "start": "1255919",
    "end": "1262820"
  },
  {
    "text": "mechanism so the first time reading memory will trigger the page fault so as a result the current way allocator Page",
    "start": "1262820",
    "end": "1269299"
  },
  {
    "text": "and the expert is able to use its semi option real printer to find to dump the",
    "start": "1269299",
    "end": "1275840"
  },
  {
    "text": "entire Corner stack and find the pointers or page pointers and use page to Verge macro to get a corresponding",
    "start": "1275840",
    "end": "1282559"
  },
  {
    "text": "kernel address in other words the expert is able to you know get",
    "start": "1282559",
    "end": "1290080"
  },
  {
    "text": "corresponding kernel address but the pressure the user-based memory and kernel space memory maps to the same",
    "start": "1290080",
    "end": "1297260"
  },
  {
    "text": "Facebook pages and then you can craft all the fake kind of data structures",
    "start": "1297260",
    "end": "1302360"
  },
  {
    "text": "from the user space memory and it Factor trigger the stack Overflow so once you",
    "start": "1302360",
    "end": "1307640"
  },
  {
    "text": "do so and and Trigger stack flow here is what actually looks like so first of all there's one very critical stack variable",
    "start": "1307640",
    "end": "1315679"
  },
  {
    "text": "called massive header get corrupted so every time when a receiver calls receive message the kernel will be tricked to",
    "start": "1315679",
    "end": "1323000"
  },
  {
    "text": "use the corrupted method header and then we kind of believe that hey we are using the pipe data structure so you will look",
    "start": "1323000",
    "end": "1329780"
  },
  {
    "text": "at the fake pipe data structure so the the right destination address here is it",
    "start": "1329780",
    "end": "1335360"
  },
  {
    "text": "pointed to the touch structure and the source address now the point is SKB data and it just points to it points to your",
    "start": "1335360",
    "end": "1342860"
  },
  {
    "text": "keyword which you feel with -2 so as a result if the receiver called receive",
    "start": "1342860",
    "end": "1348740"
  },
  {
    "text": "message uh the fake pipe data structure will be utilized so the address limit will be over breathing against matters",
    "start": "1348740",
    "end": "1356360"
  },
  {
    "text": "too so using space program can call option unit right primitive to do uh to",
    "start": "1356360",
    "end": "1361580"
  },
  {
    "text": "get a room privilege okay so uh let's talk about expert sample B so actual sample B Target out a recent version so",
    "start": "1361580",
    "end": "1368780"
  },
  {
    "text": "there will be no issues in implementing aslr okay so you know anytime what we",
    "start": "1368780",
    "end": "1374840"
  },
  {
    "text": "have a user 360 buffer the SKB data will be free to and if like in the if I stand",
    "start": "1374840",
    "end": "1380900"
  },
  {
    "text": "a fighting spirituality I learn the task the kernel will allocated structure called essay on FB list which contains",
    "start": "1380900",
    "end": "1386659"
  },
  {
    "text": "an area of five pointer that point to the final flight okay so when the escaping part so when SKB gets user-free",
    "start": "1386659",
    "end": "1393980"
  },
  {
    "text": "we can somehow to history to history on the SQL data to the newly allocated LCM",
    "start": "1393980",
    "end": "1399980"
  },
  {
    "text": "activities so the strategy here is that the activate sample spans about 85",
    "start": "1399980",
    "end": "1406039"
  },
  {
    "text": "Distributors for opening five a device new and then from the receiver side it will receive like 80 kernel file adjust",
    "start": "1406039",
    "end": "1414020"
  },
  {
    "text": "so you know there will be several file structures occupying an entire slide page",
    "start": "1414020",
    "end": "1419539"
  },
  {
    "text": "okay so if we close these five descriptors and do the history by sending socket datagram that means we",
    "start": "1419539",
    "end": "1427100"
  },
  {
    "text": "can control the entire stack page and then we can craft the all kinds of",
    "start": "1427100",
    "end": "1432200"
  },
  {
    "text": "fake pipe data structure here to this is the control stack page so the next question here is that how to link up",
    "start": "1432200",
    "end": "1438500"
  },
  {
    "text": "with our normal file to this fake pack data structure so this is what the online Premiership came to rescue so",
    "start": "1438500",
    "end": "1445460"
  },
  {
    "text": "well victim tells receive users free socket socket buffer it may invoke",
    "start": "1445460",
    "end": "1450860"
  },
  {
    "text": "something called SV on link and by springing on the SKB and override the",
    "start": "1450860",
    "end": "1456380"
  },
  {
    "text": "next and privilege to some uh malicious address then what happened in unlink is",
    "start": "1456380",
    "end": "1462320"
  },
  {
    "text": "that the number file especially the private data get hijacked it to the",
    "start": "1462320",
    "end": "1467539"
  },
  {
    "text": "controls that page address or to be more specific is the pipe in node info so the",
    "start": "1467539",
    "end": "1472820"
  },
  {
    "text": "pipe in node info designate kernel that hey we have two following pipe buffers",
    "start": "1472820",
    "end": "1477860"
  },
  {
    "text": "for arena right primitive and the next issue here is that Pi buffer offs is not",
    "start": "1477860",
    "end": "1483260"
  },
  {
    "text": "initialized so we can now use this fake pipe structure now however initialize",
    "start": "1483260",
    "end": "1488780"
  },
  {
    "text": "the pipe off is a type buffer off is very easy just write one byte to the pi so the color will initialize the up",
    "start": "1488780",
    "end": "1495260"
  },
  {
    "text": "first and by reading the socket used to occupy the slab page we can link the entire",
    "start": "1495260",
    "end": "1501320"
  },
  {
    "text": "slab page including the pi buffer a lot so we can effectively by pass the ASL and we may also do the something called",
    "start": "1501320",
    "end": "1508820"
  },
  {
    "text": "type migration to bypass privileged access never so to sum up we by",
    "start": "1508820",
    "end": "1515840"
  },
  {
    "text": "manipulating the type buffer page and type buffer offset we can achieve a kernel object in the right primitive and",
    "start": "1515840",
    "end": "1522380"
  },
  {
    "text": "this is one more method to bypass the hardware level of mitigation user access",
    "start": "1522380",
    "end": "1528020"
  },
  {
    "text": "override and we call it as Pi primitive and we see in the Y expert use this",
    "start": "1528020",
    "end": "1534500"
  },
  {
    "text": "tricks into the alternative so since you have the option green right perimeter you can get code execution you",
    "start": "1534500",
    "end": "1541400"
  },
  {
    "text": "can recover a kind of simple table address so for more information please stay turned on our project table guest",
    "start": "1541400",
    "end": "1547580"
  },
  {
    "text": "blog now please welcome Richard for talking about post exploitation techniques thank you okay thank you",
    "start": "1547580",
    "end": "1556000"
  },
  {
    "text": "so post exploitation um the attackers at this point have got a kernel read write so you might think",
    "start": "1556520",
    "end": "1564020"
  },
  {
    "text": "the next step is the normal status SE Linux to permissive and overwrite the",
    "start": "1564020",
    "end": "1569299"
  },
  {
    "text": "process credentials so you become uid 0. however in this case the target devices",
    "start": "1569299",
    "end": "1576220"
  },
  {
    "text": "concerned have a hypervisor providing an additional set layer of protection",
    "start": "1576220",
    "end": "1581720"
  },
  {
    "text": "the memory containing SE Linux enforcing is read-only the process credential structures are monitored so you can't",
    "start": "1581720",
    "end": "1588260"
  },
  {
    "text": "edit them and unprivileged user mode processes aren't allowed to call useful",
    "start": "1588260",
    "end": "1593539"
  },
  {
    "text": "functions such as rkp override creds or power off command so the attackers need",
    "start": "1593539",
    "end": "1599539"
  },
  {
    "text": "to find other ways to change SE Linux and set their user ID",
    "start": "1599539",
    "end": "1605539"
  },
  {
    "text": "so for SE Linux the exploit code finds some important static variables by",
    "start": "1605539",
    "end": "1612200"
  },
  {
    "text": "analyzing instructions in SE Linux related kernel functions they find an adrp instruction which if",
    "start": "1612200",
    "end": "1619880"
  },
  {
    "text": "you know arm assembler it's referencing some data find the instruction you know",
    "start": "1619880",
    "end": "1625340"
  },
  {
    "text": "the address of the data the exploit code can then extract the SE Linux policy make some modifications to it refresh",
    "start": "1625340",
    "end": "1634279"
  },
  {
    "text": "reload the database and effectively SC Linux has been made permissive",
    "start": "1634279",
    "end": "1639440"
  },
  {
    "text": "so what about uid 0 this is a little bit more complicated the real-time kernel",
    "start": "1639440",
    "end": "1645919"
  },
  {
    "text": "protection mechanism trusts its own executable system bin SMD exe is",
    "start": "1645919",
    "end": "1652520"
  },
  {
    "text": "executed as a privileged process so this gives you an initial point of entry for",
    "start": "1652520",
    "end": "1658159"
  },
  {
    "text": "getting the back door running a second executable simple perf is used to get the the full back door running",
    "start": "1658159",
    "end": "1665960"
  },
  {
    "text": "so how this works inject a bit of Shell Code into SMD exe",
    "start": "1665960",
    "end": "1672159"
  },
  {
    "text": "this does then use rkp override creds because it is a trusted privilege",
    "start": "1672159",
    "end": "1678799"
  },
  {
    "text": "process so that sets itself to root uid 0. the full back door has been put into",
    "start": "1678799",
    "end": "1685640"
  },
  {
    "text": "simple perf so SMD exe then runs simple perf at which point we have the entire",
    "start": "1685640",
    "end": "1691580"
  },
  {
    "text": "back door running as uid 0 and SE Linux is effectively in permissive mode",
    "start": "1691580",
    "end": "1698900"
  },
  {
    "text": "right what do the attackers do with this um to begin with it's pretty much what you might expect they upload a lot of",
    "start": "1698900",
    "end": "1706039"
  },
  {
    "text": "information off the device focusing on social media databases messages that",
    "start": "1706039",
    "end": "1711320"
  },
  {
    "text": "kind of thing the list here isn't comprehensive we didn't have space on the slide to fit all the path names on",
    "start": "1711320",
    "end": "1717559"
  },
  {
    "text": "but you can see Social Media stuff at the top Android accounts databases at the bottom and there's a spelling",
    "start": "1717559",
    "end": "1724820"
  },
  {
    "text": "mistake highlighted in red which we'll come back to later after copying various data off the",
    "start": "1724820",
    "end": "1731600"
  },
  {
    "text": "device the attackers then go through and disable a lot of system security settings again they",
    "start": "1731600",
    "end": "1739279"
  },
  {
    "text": "change more settings than are shown here but we didn't have space on the slide so",
    "start": "1739279",
    "end": "1744440"
  },
  {
    "text": "the device is now at increased risk of other malware because security settings",
    "start": "1744440",
    "end": "1750679"
  },
  {
    "text": "automatic updates Etc have been disabled uh",
    "start": "1750679",
    "end": "1755900"
  },
  {
    "text": "a number of third-party anti-virus applications are also uninstalled again potentially placing the user at greater",
    "start": "1755900",
    "end": "1762860"
  },
  {
    "text": "risk of random other malware and finally the back door can clean itself up if it's commanded to do so",
    "start": "1762860",
    "end": "1772159"
  },
  {
    "text": "now Christian earlier mentioned cve 2019-2215 so I'd like to go back to look",
    "start": "1772159",
    "end": "1778640"
  },
  {
    "text": "at a particular instance of that as a reminder of the timeline in late",
    "start": "1778640",
    "end": "1783980"
  },
  {
    "text": "September 2019 Maddie Stone from Project zero identified the vulnerability and",
    "start": "1783980",
    "end": "1790640"
  },
  {
    "text": "tag confirmed evidence of exploitation in the wild October 2019 Android patched the",
    "start": "1790640",
    "end": "1797899"
  },
  {
    "text": "vulnerability we wrote some detection for exploitation and",
    "start": "1797899",
    "end": "1804520"
  },
  {
    "text": "sent that out to see what we could find so what did we find well we found an",
    "start": "1804520",
    "end": "1811820"
  },
  {
    "text": "exploit four CV 2019-2215 uh slightly more interestingly",
    "start": "1811820",
    "end": "1817220"
  },
  {
    "text": "it contained references to a couple of Android applications within it one of which is shown here pictivio viewer kit",
    "start": "1817220",
    "end": "1824919"
  },
  {
    "text": "this was on play at the time we found it and interestingly it had been uploaded",
    "start": "1824919",
    "end": "1830840"
  },
  {
    "text": "to play in February 2019 some seven months before we knew about the",
    "start": "1830840",
    "end": "1837679"
  },
  {
    "text": "existence of CV 2019-2215 as you can see on the right hand side of this slide that's quite a",
    "start": "1837679",
    "end": "1845299"
  },
  {
    "text": "comprehensive list of permissions this image viewer has you probably don't need all of those in order to render images",
    "start": "1845299",
    "end": "1850700"
  },
  {
    "text": "on your device the second application wasn't on play that was an off-market",
    "start": "1850700",
    "end": "1856039"
  },
  {
    "text": "application masquerading as an app from Google using the Google Drive icon",
    "start": "1856039",
    "end": "1862159"
  },
  {
    "text": "pictivio viewer kit didn't have very many installs we saw less than 30 lifetime installs by the time we spotted",
    "start": "1862159",
    "end": "1870080"
  },
  {
    "text": "it there are a number of similarities between the payloads in 2019 and the",
    "start": "1870080",
    "end": "1876620"
  },
  {
    "text": "payloads in 2021. the elf files exported a function which was essentially a",
    "start": "1876620",
    "end": "1883220"
  },
  {
    "text": "self-loader call that function that patches up the L file for where In",
    "start": "1883220",
    "end": "1889340"
  },
  {
    "text": "memory it is at that time processes all of the relocations and resolves all of",
    "start": "1889340",
    "end": "1895520"
  },
  {
    "text": "the Imports what's shown on the slide is something else that we saw sometimes the",
    "start": "1895520",
    "end": "1901100"
  },
  {
    "text": "elf header was overwritten by a fairly simple shim which calls the self-loading",
    "start": "1901100",
    "end": "1906440"
  },
  {
    "text": "function this is the 64-bit shim there was another very similar one for 32-bit",
    "start": "1906440",
    "end": "1911899"
  },
  {
    "text": "so you can treat the L file like a blob of Shell Code just drop it off in memory jump into the beginning of that block of",
    "start": "1911899",
    "end": "1919340"
  },
  {
    "text": "memory and itself loads so everything is fixed up no extra",
    "start": "1919340",
    "end": "1924380"
  },
  {
    "text": "hassle as in 2021 in 2019 the payloads",
    "start": "1924380",
    "end": "1929899"
  },
  {
    "text": "were injected into various privileged processes the list of similarities goes on uh",
    "start": "1929899",
    "end": "1936860"
  },
  {
    "text": "security settings disabled files to copy applications to uninstall Etc and we see",
    "start": "1936860",
    "end": "1943820"
  },
  {
    "text": "here the same spelling mistake in the 2019 payloads as in 2021",
    "start": "1943820",
    "end": "1950480"
  },
  {
    "text": "that config file hasn't actually been in that location for a little while so maybe the attackers just didn't clean up",
    "start": "1950480",
    "end": "1957140"
  },
  {
    "text": "their standard list of files to copy right uh what are we doing about this",
    "start": "1957140",
    "end": "1963260"
  },
  {
    "text": "well native payloads anything written that compiles into arm or arm 64. you've got",
    "start": "1963260",
    "end": "1970340"
  },
  {
    "text": "to have executable memory to run that in so if you can see some",
    "start": "1970340",
    "end": "1975440"
  },
  {
    "text": "unexpected executable memory turning up in your process it might be interesting to have a look in that memory to see",
    "start": "1975440",
    "end": "1982100"
  },
  {
    "text": "what the contents are the information shown here is from one of our internal",
    "start": "1982100",
    "end": "1987860"
  },
  {
    "text": "analysis systems running Chrome where we've given Chrome the cve 2020",
    "start": "1987860",
    "end": "1994360"
  },
  {
    "text": "16040 exploit again that Christian mentioned earlier if you look here we can see",
    "start": "1994360",
    "end": "2001779"
  },
  {
    "text": "an interesting length blob of memory is being made read write execute and then",
    "start": "2001779",
    "end": "2008679"
  },
  {
    "text": "slightly below we can see a system call is returning into this potentially",
    "start": "2008679",
    "end": "2014500"
  },
  {
    "text": "suspicious block of read write execute memory so there's definitely some code",
    "start": "2014500",
    "end": "2019720"
  },
  {
    "text": "in there and happily our analysis system captured this blob of memory and saved",
    "start": "2019720",
    "end": "2024760"
  },
  {
    "text": "it out for us so here's the beginning of that potentially suspicious blob of memory",
    "start": "2024760",
    "end": "2030279"
  },
  {
    "text": "and the first thing that might catch your eye is there's an elf header at a",
    "start": "2030279",
    "end": "2035980"
  },
  {
    "text": "rather unusual offset normally you'd expect to see the elf header at the beginning of the page or as I mentioned",
    "start": "2035980",
    "end": "2041559"
  },
  {
    "text": "earlier uh depending on what you're looking at potentially in this case overwritten by",
    "start": "2041559",
    "end": "2047500"
  },
  {
    "text": "the shim jumping into the self-loading code the data before the L file here is",
    "start": "2047500",
    "end": "2053200"
  },
  {
    "text": "another shim this one's potentially slightly more interesting it copies some data from one location to another",
    "start": "2053200",
    "end": "2059080"
  },
  {
    "text": "location and then it jumps into the self-loading export from the L file",
    "start": "2059080",
    "end": "2065679"
  },
  {
    "text": "so yeah this tldr this is the exploit payload that",
    "start": "2065679",
    "end": "2072040"
  },
  {
    "text": "shinyu has just explained in great detail uh so this takes us full circle tag",
    "start": "2072040",
    "end": "2078460"
  },
  {
    "text": "found the Chrome remote code execution being used in the wild it contained an interesting payload which turned out to",
    "start": "2078460",
    "end": "2085000"
  },
  {
    "text": "be a zero day the payloads in 2021 have some very strong similarities to the",
    "start": "2085000",
    "end": "2090940"
  },
  {
    "text": "older payloads and in both cases the exploits concerned are relating to",
    "start": "2090940",
    "end": "2098020"
  },
  {
    "text": "patching mismatches you could call them between Android and Linux where perhaps a patch wasn't applied in one whereas it",
    "start": "2098020",
    "end": "2105520"
  },
  {
    "text": "was applied in the other or something was missed out so CV",
    "start": "2105520",
    "end": "2112619"
  },
  {
    "text": "2021-0920 was a very complicated vulnerability and it was quite complicated to exploit the developers",
    "start": "2112619",
    "end": "2120280"
  },
  {
    "text": "came up with some rather interesting behavioral Primitives in order to make everything work",
    "start": "2120280",
    "end": "2126660"
  },
  {
    "text": "researching and implementing all of that must have taken them some time so they're obviously fairly well resourced",
    "start": "2126760",
    "end": "2131920"
  },
  {
    "text": "to be able to do it because it might not have succeeded the faster the security industry can",
    "start": "2131920",
    "end": "2138160"
  },
  {
    "text": "find and patch things like that the better we can protect our users and the more time and money it costs the",
    "start": "2138160",
    "end": "2144520"
  },
  {
    "text": "surveillance industry to maintain their capability against things",
    "start": "2144520",
    "end": "2150099"
  },
  {
    "text": "so we need to reduce the time it takes us to detect things to patch things and",
    "start": "2150099",
    "end": "2155560"
  },
  {
    "text": "to get the updates out there in order to keep protecting people the faster",
    "start": "2155560",
    "end": "2160599"
  },
  {
    "text": "response we can do this the better hopefully things like vulnerability reward programs are going to help with",
    "start": "2160599",
    "end": "2166060"
  },
  {
    "text": "this because it encourages people to submit things to us and they'll get some reward",
    "start": "2166060",
    "end": "2171160"
  },
  {
    "text": "so with that I think that's the end thank you very much for watching everybody",
    "start": "2171160",
    "end": "2177470"
  },
  {
    "text": "[Music]",
    "start": "2177470",
    "end": "2180580"
  },
  {
    "text": "thank you",
    "start": "2183180",
    "end": "2186780"
  }
]