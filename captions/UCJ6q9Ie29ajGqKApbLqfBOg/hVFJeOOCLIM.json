[
  {
    "text": "today we're going to be talking about MMF and what that means is memory map files and we're gonna explore a couple",
    "start": "2070",
    "end": "8910"
  },
  {
    "text": "of different avenues that we can use those maliciously so or our presentation",
    "start": "8910",
    "end": "14040"
  },
  {
    "text": "is also tile how to exploit memory map files and profit yeah so step one is",
    "start": "14040",
    "end": "19590"
  },
  {
    "text": "exploit em to net files and step two is profit and thank you PN T so so yeah my",
    "start": "19590",
    "end": "26789"
  },
  {
    "text": "name's Ben holder I work for serious security penetration tester and web application security guy my name is",
    "start": "26789",
    "end": "32910"
  },
  {
    "text": "Parker crook I am a solutions engineer at Cinna one and apologies for that previous little trope I threw that I was",
    "start": "32910",
    "end": "39989"
  },
  {
    "text": "a random idea it was late at night he like threw it in there and we kept it so",
    "start": "39989",
    "end": "45690"
  },
  {
    "text": "moving on the reason you're here is to listen about we're also not oh yeah",
    "start": "45690",
    "end": "51629"
  },
  {
    "text": "one little note is that I meant to bring up is we are not professional developers so if you see terminology or disagree",
    "start": "51629",
    "end": "58350"
  },
  {
    "text": "with a specific same thing that I say please don't take that as a professional dis courtesy we're just you know we're",
    "start": "58350",
    "end": "65940"
  },
  {
    "text": "hackers and we like to break things with code so you could call us script",
    "start": "65940",
    "end": "71430"
  },
  {
    "text": "scriptures or script kiddies if you want we want to take us just a second to step",
    "start": "71430",
    "end": "77880"
  },
  {
    "text": "back and really talk about one of the problems when we're talking about attackers and doing malicious things on your computer and the one of the",
    "start": "77880",
    "end": "84810"
  },
  {
    "text": "problems that you have is that behaviors are being or in some cases have been categorized by defenders and what I mean",
    "start": "84810",
    "end": "93030"
  },
  {
    "text": "by that is that you know we're gone away from the day of using signatures to detect something as being bad and we're",
    "start": "93030",
    "end": "99690"
  },
  {
    "text": "getting to the point where certain behaviors are either atomically bad or atomically good now that's a pretty small subset of things that can happen",
    "start": "99690",
    "end": "106230"
  },
  {
    "text": "on our system you know it's very rare that something whenever it happens is always bad but more in context of other",
    "start": "106230",
    "end": "113880"
  },
  {
    "text": "behaviors you can go ahead and determine that invocation of this API along with another activity on the system that is",
    "start": "113880",
    "end": "119820"
  },
  {
    "text": "bad that's already been done there there are defenders out there that are able to make those determinations so what we",
    "start": "119820",
    "end": "126360"
  },
  {
    "text": "wanted to do is understand is there a file list method out there that doesn't",
    "start": "126360",
    "end": "131430"
  },
  {
    "text": "use API calls that have been mapped or modeled to still do malicious act that was kind of the genesis of really",
    "start": "131430",
    "end": "138820"
  },
  {
    "text": "what we're talking about today right so you know the we came across this or looking at memory map files in terms of",
    "start": "138820",
    "end": "146080"
  },
  {
    "text": "doing you know exploit level stuff or trying to you know hide a payload comes",
    "start": "146080",
    "end": "151090"
  },
  {
    "text": "back in 2016 we were looking at ways that we could pass Moff comp dot exe",
    "start": "151090",
    "end": "157050"
  },
  {
    "text": "content without it necessarily sitting on disk so that we could recompile them off and gain persistence on the system",
    "start": "157050",
    "end": "163120"
  },
  {
    "text": "that you know that particular research didn't prove out anything worthwhile but it it started us looking down the path",
    "start": "163120",
    "end": "170680"
  },
  {
    "text": "of what is MMF what does it do how does it operate and how might we be able to leverage putting things directly into",
    "start": "170680",
    "end": "177310"
  },
  {
    "text": "heat memory to do stuff so hang on just a second so memory map files if we take",
    "start": "177310",
    "end": "184660"
  },
  {
    "text": "a look at the history of memory map files they really started out on Linux and the reason being they they were created as a way to take files off of",
    "start": "184660",
    "end": "191650"
  },
  {
    "text": "disk and put them in memory for high speed access so you didn't have latency with disk i/o so use cases typically",
    "start": "191650",
    "end": "197290"
  },
  {
    "text": "were taking database files and being able to access them at high speeds one of the side benefits was that once you",
    "start": "197290",
    "end": "203380"
  },
  {
    "text": "map that in memory you can share that across multiple processes so another one of the use cases was being able to load",
    "start": "203380",
    "end": "209170"
  },
  {
    "text": "a file into memory and allow multiple processes to access the same piece of data so you only had to load at once and",
    "start": "209170",
    "end": "217360"
  },
  {
    "text": "this this was ported over to Windows long time ago in the memory map file",
    "start": "217360",
    "end": "223600"
  },
  {
    "text": "class in.net is what we're talking about when we talk about memory mapped files today so yeah and back when we were",
    "start": "223600",
    "end": "229960"
  },
  {
    "text": "doing this research we found that for the you know MMF for the purposes that we were looking at there wasn't really a",
    "start": "229960",
    "end": "235060"
  },
  {
    "text": "lot of solid documentation at that time but you know an idea was born out of this and it was you know that generally",
    "start": "235060",
    "end": "242650"
  },
  {
    "text": "the way that the memory map file class is leveraged is for high speed access you takes you take an object that's on",
    "start": "242650",
    "end": "248230"
  },
  {
    "text": "disk read the contents into memory and then that allows the process to go directly to memory instead of having to",
    "start": "248230",
    "end": "253990"
  },
  {
    "text": "go to the disk to read the object to go back and process it it speeds it up you",
    "start": "253990",
    "end": "259989"
  },
  {
    "text": "know and and when you look at the way that the memory map or that MMF is used is",
    "start": "259989",
    "end": "265599"
  },
  {
    "text": "that it either sits in virtual memory or heap memory and what we wanted to do is",
    "start": "265599",
    "end": "272620"
  },
  {
    "text": "to make sure that we dodged the the virtual memory portion of it so we",
    "start": "272620",
    "end": "279969"
  },
  {
    "text": "didn't want anything to touch disk so we started looking at what can we do to use a memory map to get straight to heap and",
    "start": "279969",
    "end": "288129"
  },
  {
    "text": "so most formats of MMF are disk back meaning that they read an object from the disk take the content and stick it",
    "start": "288129",
    "end": "295270"
  },
  {
    "text": "into memory you know if you go and do a count of the methods that are available",
    "start": "295270",
    "end": "300550"
  },
  {
    "text": "in that class there's 11 of them that are disk backed there are three that can do or sorry there are four that can do",
    "start": "300550",
    "end": "307840"
  },
  {
    "text": "both so there are 15 total methods available in that class that specifically operate on accessing and",
    "start": "307840",
    "end": "313479"
  },
  {
    "text": "leveraging objects that already exist on the disk but there are three specific",
    "start": "313479",
    "end": "319050"
  },
  {
    "text": "methods that allow you to just create a memory map and put content into it",
    "start": "319050",
    "end": "324610"
  },
  {
    "text": "without actually having to touch an object on the disk to get that kind of that content so what we looked at is the",
    "start": "324610",
    "end": "331210"
  },
  {
    "text": "create new method and that except you know pretty much any data type that you want to throw it at a string a byte in",
    "start": "331210",
    "end": "336550"
  },
  {
    "text": "an integer and so on and so forth arbitrary data yeah pretty much that's all right I have little kids and dry",
    "start": "336550",
    "end": "343120"
  },
  {
    "text": "weather so it puts a frog in my throat all right so yeah nan file back remember",
    "start": "343120",
    "end": "349659"
  },
  {
    "text": "doc files so non persistent files are memory map files that are not associated with a file on disk and this is the",
    "start": "349659",
    "end": "356949"
  },
  {
    "text": "behavior that we wanted to leverage as much as we could so one of the limitations of this though is that when",
    "start": "356949",
    "end": "363699"
  },
  {
    "text": "you're done working with that content when there's no longer a process that's actually accessing that member in that",
    "start": "363699",
    "end": "369430"
  },
  {
    "text": "file the data is lost because it's it's D allocated and then it's passed a",
    "start": "369430",
    "end": "374800"
  },
  {
    "text": "garbage collection so you know they're suitable for creating shared memory and",
    "start": "374800",
    "end": "380039"
  },
  {
    "text": "IPC's you know they're their general operation so it's an interesting use",
    "start": "380039",
    "end": "386919"
  },
  {
    "text": "case but it's it's severely limited so we just talked about IPC so in IPC",
    "start": "386919",
    "end": "393759"
  },
  {
    "text": "applications you you've got this handle for a memory map file how do you share the handle between",
    "start": "393759",
    "end": "399630"
  },
  {
    "text": "the two processes in such a way that you don't cause real inking to occur because the goal of using memory mat file in",
    "start": "399630",
    "end": "405990"
  },
  {
    "text": "memory only from a malicious actor standpoint would be to break that really the the contextual information between",
    "start": "405990",
    "end": "411420"
  },
  {
    "text": "malicious process a and malicious process B and having a shared memory channel but you would either have to",
    "start": "411420",
    "end": "418020"
  },
  {
    "text": "have a static name and then incident responders of forensic analysts could then understand that those processes",
    "start": "418020",
    "end": "424170"
  },
  {
    "text": "were talking because of that static name or if you generated dynamic handles for those memory map files you would have to",
    "start": "424170",
    "end": "430290"
  },
  {
    "text": "be able to share that name between the two processes somehow and then that would enable an analyst to relink those",
    "start": "430290",
    "end": "435930"
  },
  {
    "text": "together and understand that those processes were interrelated and communicating to each other",
    "start": "435930",
    "end": "441210"
  },
  {
    "text": "the other thing is that once the last process dies that actually had a memory",
    "start": "441210",
    "end": "446760"
  },
  {
    "text": "handle it's collected by garbage collection so limited use case definitely not usable for persistence so",
    "start": "446760",
    "end": "455130"
  },
  {
    "text": "yeah so we what into C is what if we could use F to actually execute code so",
    "start": "455130",
    "end": "461310"
  },
  {
    "text": "you know okay so real quick couple of programming fundamentals you shouldn't",
    "start": "461310",
    "end": "467670"
  },
  {
    "text": "be able to readily get addressable memory space without going through memory protection programs like a SLR",
    "start": "467670",
    "end": "474660"
  },
  {
    "text": "depth all memory allocations should be going through the kernel you shouldn't be able to do that from user space there",
    "start": "474660",
    "end": "481980"
  },
  {
    "text": "are a couple of methods that allow you to do this type of memory injection attack a couple of those are upper on",
    "start": "481980",
    "end": "487380"
  },
  {
    "text": "the board things like reflective DLL injection process hollowing a new one that came out last year was process doppelganger",
    "start": "487380",
    "end": "495180"
  },
  {
    "text": "I also return-oriented programming an talked about a couple of these just so you understand the difference between",
    "start": "495180",
    "end": "500370"
  },
  {
    "text": "existing methods and the method that we're gonna be talking about today so the first one if we take a look at return oriented programming the concept",
    "start": "500370",
    "end": "507570"
  },
  {
    "text": "or the core concept is that a return oriented programmer wants to find what's called gadgets inside a running process",
    "start": "507570",
    "end": "514800"
  },
  {
    "text": "what those gadgets are chunks of assembly so chunks of assembly like jump or pop pop return in an assembly code",
    "start": "514800",
    "end": "522030"
  },
  {
    "text": "basically these gadgets are things that allow you to move execution to a certain space in memory and basically what an",
    "start": "522030",
    "end": "528000"
  },
  {
    "text": "attacker would do is hide thing in memory and they need to find a gadget that allows them to get execution over to that space in memory that's",
    "start": "528000",
    "end": "536240"
  },
  {
    "text": "that's exploiting vulnerable applications in most cases another one is invoke shellcode so what we're doing",
    "start": "536240",
    "end": "542750"
  },
  {
    "text": "with invoke shellcode is mmm taking dotnet methods that are not",
    "start": "542750",
    "end": "548209"
  },
  {
    "text": "native to powershell and loading them from kernel32.dll and taking those",
    "start": "548209",
    "end": "553339"
  },
  {
    "text": "methods and then making them available in powershell namely allocate memory so",
    "start": "553339",
    "end": "558680"
  },
  {
    "text": "that there's there's unsafe methods that are just not ported into powershell and once you can allocate memory you can go",
    "start": "558680",
    "end": "566240"
  },
  {
    "text": "ahead and create a process take that memory space and then create a delicate and point execution there it's a really",
    "start": "566240",
    "end": "571279"
  },
  {
    "text": "roundabout method of doing a shellcode injection or yeah injecting shell code",
    "start": "571279",
    "end": "579410"
  },
  {
    "text": "inside of PowerShell so the problem is that all of these methods utilize API",
    "start": "579410",
    "end": "584480"
  },
  {
    "text": "calls that have been well known as malicious or contextually suspicious so",
    "start": "584480",
    "end": "591010"
  },
  {
    "text": "how do we go back and can we can we use any methods so we know earlier we had said that when we were originally",
    "start": "591010",
    "end": "597950"
  },
  {
    "text": "researching and looking into the memory map files documentation was lackluster there wasn't a lot for us to read so",
    "start": "597950",
    "end": "603950"
  },
  {
    "text": "that we could understand how does this operate how does it function and how can we leverage it for our purposes so we go",
    "start": "603950",
    "end": "609470"
  },
  {
    "text": "forward to 2017 Microsoft did a major overhaul of their documentation and we",
    "start": "609470",
    "end": "614930"
  },
  {
    "text": "saw the memory map file class and that there's a lot of methods underneath that",
    "start": "614930",
    "end": "620000"
  },
  {
    "text": "that allow us to do some interesting things so one of the major components is",
    "start": "620000",
    "end": "626420"
  },
  {
    "text": "that we found that you could for when you create your memory map area or you",
    "start": "626420",
    "end": "631430"
  },
  {
    "text": "do you use a view accessor which is what has the capability of going back and accessing the content in your memory map",
    "start": "631430",
    "end": "638650"
  },
  {
    "text": "you started to see that you've had permissions that you could assign to it so you had you know read read write",
    "start": "638650",
    "end": "644690"
  },
  {
    "text": "rewrite execute and it was the executive function that became really interesting",
    "start": "644690",
    "end": "651230"
  },
  {
    "text": "to us saying this you know this is a little strange I'm not used to the concept of being able to throw an",
    "start": "651230",
    "end": "657320"
  },
  {
    "text": "execute permission just natively like that to memory so we formatted a",
    "start": "657320",
    "end": "662929"
  },
  {
    "text": "theory and we looked at you know as an attacker what would you want to do so you would you know generate your",
    "start": "662929",
    "end": "669379"
  },
  {
    "text": "malicious content and you need you know you use MMF to put that you know that",
    "start": "669379",
    "end": "674779"
  },
  {
    "text": "content into memory and then what as the you know what the attacker would look to",
    "start": "674779",
    "end": "679999"
  },
  {
    "text": "do is to generate a malicious trigger something that's going to be able to prop to pass execution back to that",
    "start": "679999",
    "end": "686480"
  },
  {
    "text": "position in memory because so when you look directly at PowerShell the memory",
    "start": "686480",
    "end": "692839"
  },
  {
    "text": "map class is directly accessible and it's a normal it's a normal use case so",
    "start": "692839",
    "end": "699139"
  },
  {
    "text": "when you go and you load a dll into memory you're generally adding it into a memory map so that multiple processes",
    "start": "699139",
    "end": "706009"
  },
  {
    "text": "can access it at the same time so you have one copy in memory that can be utilized by multiple processes so this",
    "start": "706009",
    "end": "714079"
  },
  {
    "text": "is you know this is okay normal behavior so AV doesn't can convict it whatever",
    "start": "714079",
    "end": "719360"
  },
  {
    "text": "the methodologies that we use to redirect execution then points back to MMF and it runs the code that you put in",
    "start": "719360",
    "end": "726619"
  },
  {
    "text": "there so our original use case was to sit there and figure out how you know",
    "start": "726619",
    "end": "732049"
  },
  {
    "text": "could we take this concept and could we turn it into something that would actually execute so we looked at c-sharp",
    "start": "732049",
    "end": "737329"
  },
  {
    "text": "on net because we you know we wanted to make sure that all the functionality",
    "start": "737329",
    "end": "742730"
  },
  {
    "text": "that we needed was there without having to go and load dish you know load different assemblies so looking at the",
    "start": "742730",
    "end": "749749"
  },
  {
    "text": "code either the first thing that we do is we declare a variable into a byte array that will hold the shellcode",
    "start": "749749",
    "end": "755209"
  },
  {
    "text": "whatever it is that we want to use we just sit there and store it temporarily you know we go ahead and we add MMF or",
    "start": "755209",
    "end": "763429"
  },
  {
    "text": "the memory map file and I'm at view accessor so we can go ahead and get the the methods that are underneath it later",
    "start": "763429",
    "end": "770350"
  },
  {
    "text": "really what is important to start looking at is underneath the try block so you see MMF for memory map file",
    "start": "770350",
    "end": "776240"
  },
  {
    "text": "create new and that's the component that actually creates the memory map for us",
    "start": "776240",
    "end": "782480"
  },
  {
    "text": "you see the component in red where it says you know underscore underscore shellcode and we were talking about",
    "start": "782480",
    "end": "787610"
  },
  {
    "text": "where you have to create a handle or a name your memory map that's what this is doing that's where you would share the",
    "start": "787610",
    "end": "794090"
  },
  {
    "text": "shell code to process a and shell code to process B and both of those processes now understand where to go they know how",
    "start": "794090",
    "end": "800690"
  },
  {
    "text": "to access the content of that memory map we have to declare the length you know tell it how long it is but you look at",
    "start": "800690",
    "end": "807800"
  },
  {
    "text": "the memory map file access you now can actually say you know read write and execute so it starts getting us into",
    "start": "807800",
    "end": "814100"
  },
  {
    "text": "that position that we're looking at of being able to execute the content so that's a that was one of the major",
    "start": "814100",
    "end": "821949"
  },
  {
    "text": "points where we moved forward with this proof of concept was that once we can assign execute permissions to the memory",
    "start": "822130",
    "end": "828110"
  },
  {
    "text": "then we could actually pass a pointer and execute so as we see here all right take it over again so and like I had",
    "start": "828110",
    "end": "833510"
  },
  {
    "text": "mentioned before the accessor is the component that actually goes back to the memory map and does something with it",
    "start": "833510",
    "end": "838880"
  },
  {
    "text": "accesses the content reads and writes so this is where we build the view accessor",
    "start": "838880",
    "end": "843920"
  },
  {
    "text": "you pass it the length again of the shell code and then you give the accessor itself the capability to do",
    "start": "843920",
    "end": "849860"
  },
  {
    "text": "something so in this case we just matched our permissions so it gets to read write and execute the content",
    "start": "849860",
    "end": "855470"
  },
  {
    "text": "that's in the memory map where you see view accessor tried array what that is",
    "start": "855470",
    "end": "860570"
  },
  {
    "text": "it's actually taking the content that we had before the shell code that we generated and stuck into the variable it",
    "start": "860570",
    "end": "866930"
  },
  {
    "text": "now takes that reads that content out and then writes it for the first time into the actual memory map so now it's",
    "start": "866930",
    "end": "872990"
  },
  {
    "text": "sitting in the heap we initialize a variable for the pointer and what this pointer is is it's going to hold the",
    "start": "872990",
    "end": "879440"
  },
  {
    "text": "value of where where the memory address for the memory map starts that's what",
    "start": "879440",
    "end": "887000"
  },
  {
    "text": "we're trying to pull so that we can pass it to execution so really the the last",
    "start": "887000",
    "end": "895550"
  },
  {
    "text": "part that we you know have to go over in terms of the street Sharpe code is we end up having to create a delegate and",
    "start": "895550",
    "end": "901940"
  },
  {
    "text": "we're not really gonna go over the you know the intricacies of what a delegate is and what it does but it's important",
    "start": "901940",
    "end": "907790"
  },
  {
    "text": "to know that this is what we pass or the delegate is you know what is given the tax to actually go and execute the code",
    "start": "907790",
    "end": "914630"
  },
  {
    "text": "for us so we generate a function that will take the pointer that we referenced before and then passes it and says go",
    "start": "914630",
    "end": "921800"
  },
  {
    "text": "and run this code so enjoy so and then you know late at night one night I'm sitting there trying",
    "start": "921800",
    "end": "927589"
  },
  {
    "text": "you know that doesn't work but that also does not work and then I have all of a sudden a calculator so this is what we",
    "start": "927589",
    "end": "934880"
  },
  {
    "text": "were able to do is our very first use case is just some very simple shell code that pop the calculator so we use you",
    "start": "934880",
    "end": "941750"
  },
  {
    "text": "know MSF venom just a render you know command SC calculate exe as opcode so",
    "start": "941750",
    "end": "946940"
  },
  {
    "text": "that we could take that and stick that in there jammed it into the byte array and it's really because it's just it's small it's simple and it's not its own",
    "start": "946940",
    "end": "954380"
  },
  {
    "text": "run time it's just making a call via command to the system to do something so",
    "start": "954380",
    "end": "959750"
  },
  {
    "text": "start Calcott exe a really simple really easy a very good first use case for us",
    "start": "959750",
    "end": "965620"
  },
  {
    "text": "so remember you know the overall concept is that we shouldn't be able to get",
    "start": "965620",
    "end": "971959"
  },
  {
    "text": "readily addressable memory to execute code without going through protections like you know deeper SLR you really",
    "start": "971959",
    "end": "979940"
  },
  {
    "text": "should be able to do this from user space in general so kind of the next",
    "start": "979940",
    "end": "985459"
  },
  {
    "text": "goal that we had once we had this initial proof of concept was can we make this code portable so one of the",
    "start": "985459",
    "end": "990769"
  },
  {
    "text": "limitations of c-sharp is that you've got to compile it and once you compile it it turns into a file and so now your",
    "start": "990769",
    "end": "997310"
  },
  {
    "text": "delivery mechanism is writing to disk and again the whole concept was can we do this from memory and also when you",
    "start": "997310",
    "end": "1003610"
  },
  {
    "text": "compile something excuse me there are attributes associated with that file one",
    "start": "1003610",
    "end": "1010029"
  },
  {
    "text": "of those key attributes is going to be the fact that this code was compiled with unsafe methods so I don't know if",
    "start": "1010029",
    "end": "1015160"
  },
  {
    "text": "you saw the little Asterix in the bottom hand right hand corner on one of those slides but one of those methods is actually an unsafe method so to compile",
    "start": "1015160",
    "end": "1021910"
  },
  {
    "text": "with it yeah you actually have to you pass a flag that says allow unsafe methods to be utilized c-sharp net is",
    "start": "1021910",
    "end": "1028390"
  },
  {
    "text": "very memory safe it doesn't when you start trying to directly interact with memory you have that's where you have to",
    "start": "1028390",
    "end": "1034688"
  },
  {
    "text": "create your method and say this is unsafe I know I'm not supposed to be doing this but allow me to do it anyways",
    "start": "1034689",
    "end": "1039790"
  },
  {
    "text": "before it'll let you compile you actually have to pass a switch to to your IDE to your compiler or whatever it",
    "start": "1039790",
    "end": "1045760"
  },
  {
    "text": "is that allows you to actually compile a program with an unsafe method so the",
    "start": "1045760",
    "end": "1051309"
  },
  {
    "text": "idea was made that let's can we get away from the file import this code to powershell so that you can do just-in-time compiling with",
    "start": "1051309",
    "end": "1058510"
  },
  {
    "text": "the methods in PowerShell so with that I want to walk you through our proof of",
    "start": "1058510",
    "end": "1064660"
  },
  {
    "text": "concept code for PowerShell it turns out getting and creating an MMF in",
    "start": "1064660",
    "end": "1070540"
  },
  {
    "text": "PowerShell is actually pretty easy it doesn't it doesn't look like it up there but basically what we're doing is we're",
    "start": "1070540",
    "end": "1076870"
  },
  {
    "text": "creating a variable called MMF and Mel and as you can see there we're creating new and it's created with the name are a",
    "start": "1076870",
    "end": "1082780"
  },
  {
    "text": "handle of exe next parameter we're passing is shellcode length so before",
    "start": "1082780",
    "end": "1088000"
  },
  {
    "text": "this in the code stub that I have I have a shellcode stub and the shellcode and",
    "start": "1088000",
    "end": "1093700"
  },
  {
    "text": "then a return all mapped up into that one variable and what we need that link for is for how much memory do we need to",
    "start": "1093700",
    "end": "1100030"
  },
  {
    "text": "allocate if you're dealing with small payloads it's not necessarily needed you",
    "start": "1100030",
    "end": "1105580"
  },
  {
    "text": "still need to provide a length but one of the things to know about memory map files as memory allocations are done in 4k blocks so in it you know in most",
    "start": "1105580",
    "end": "1114670"
  },
  {
    "text": "cases you're probably not going to need that but you know if you're dealing with like a 10 K block you need you need to",
    "start": "1114670",
    "end": "1120730"
  },
  {
    "text": "know that so that out kits enough memory for you hello hood that your payload exceeds 4k is pretty small yeah and as",
    "start": "1120730",
    "end": "1127180"
  },
  {
    "text": "you can see the next option that we're passing is read write execute permissions there are a couple other options that are available to you as",
    "start": "1127180",
    "end": "1133000"
  },
  {
    "text": "overloads that really aren't important for this talk the next thing we do is we",
    "start": "1133000",
    "end": "1138700"
  },
  {
    "text": "go ahead and create a view accessor or I'm sorry a view stream in PowerShell there are two methods there's a view",
    "start": "1138700",
    "end": "1144160"
  },
  {
    "text": "accessor interview stream they're different and what they can do in the case here what I need what I found that I need to do is create a view stream to",
    "start": "1144160",
    "end": "1150730"
  },
  {
    "text": "actually do the write it was a bitwise right and as you can see we do the write on the next line down there and then I",
    "start": "1150730",
    "end": "1157630"
  },
  {
    "text": "need to find out that I needed to do a view accessor to be able to utilize the read to end functionality so the view",
    "start": "1157630",
    "end": "1163480"
  },
  {
    "text": "accessor allows you to read the entire contents of the stream and as we can go",
    "start": "1163480",
    "end": "1169360"
  },
  {
    "text": "ahead and see once I have the view accessor I can go ahead and utilize a method on that called dangerous get",
    "start": "1169360",
    "end": "1176980"
  },
  {
    "text": "handle and this is essentially I like the fact that it's a method on safe",
    "start": "1176980",
    "end": "1183010"
  },
  {
    "text": "memory map view handle I don't know you know safe memory map dangerous it's very Microsoft II yeah so once you",
    "start": "1183010",
    "end": "1190540"
  },
  {
    "text": "call that you actually get the memory address of that memory not file and as",
    "start": "1190540",
    "end": "1195700"
  },
  {
    "text": "you can see with some manipulation I can actually return that in print to screen what the location is in memory in human",
    "start": "1195700",
    "end": "1201910"
  },
  {
    "text": "readable format so in the bottom here I've got an example of a memory location of one in my run attempts and in the",
    "start": "1201910",
    "end": "1209140"
  },
  {
    "text": "bottom right hand corner what I've got up on the screen is that I used process",
    "start": "1209140",
    "end": "1214450"
  },
  {
    "text": "hacker to show the memory space of the current running process and I was able to go to that memory location and validate that my code actually existed",
    "start": "1214450",
    "end": "1221740"
  },
  {
    "text": "at that location memory that was kind of the final check box that where we thought it was based on this MIM handle",
    "start": "1221740",
    "end": "1228340"
  },
  {
    "text": "was actually where it was in memory and this is where we hit a pretty major roadblock that took me a couple of",
    "start": "1228340",
    "end": "1234669"
  },
  {
    "text": "months to get over and that's the fact that there is no direct way to do delegates and PowerShell now thankfully",
    "start": "1234669",
    "end": "1244470"
  },
  {
    "text": "mat Graber out there has a function called get delegate type and it's used",
    "start": "1244470",
    "end": "1249880"
  },
  {
    "text": "in the invoke shell code that he's got available on the Internet the reason I",
    "start": "1249880",
    "end": "1255400"
  },
  {
    "text": "stumbled with this for a while is that his use of it depends on loading of",
    "start": "1255400",
    "end": "1260410"
  },
  {
    "text": "dll's to do the allocation of memory and then the accessing of the memory so it caused me some stumbling blocks what we",
    "start": "1260410",
    "end": "1267370"
  },
  {
    "text": "found out is that the stumbling blocks that I was running up against was artifacts of necessary ways of",
    "start": "1267370",
    "end": "1274480"
  },
  {
    "text": "allocating memory through the methodologies they were using and it turns out that MMF way is much easier",
    "start": "1274480",
    "end": "1279880"
  },
  {
    "text": "because with MMF we've already allocated the memory we don't and we've already",
    "start": "1279880",
    "end": "1285190"
  },
  {
    "text": "found out where the memory address is so that necessary of loading the DLL to utilize those methods is no longer",
    "start": "1285190",
    "end": "1291640"
  },
  {
    "text": "necessary so I just want you to know that he says stumbling blocks and what he means is like three months tirades",
    "start": "1291640",
    "end": "1297309"
  },
  {
    "text": "and slack of just bad language about trying to figure this out yeah so it",
    "start": "1297309",
    "end": "1304809"
  },
  {
    "text": "turns out the only thing that we needed to do was create a delegate since we already had the memory location so",
    "start": "1304809",
    "end": "1309929"
  },
  {
    "text": "utilizing Matt graders get delegate type function we had to figure out what we were passing and what we wanted back",
    "start": "1309929",
    "end": "1316000"
  },
  {
    "text": "turns out we just needed to create a get delegate type for in Poynter and expect a void function back",
    "start": "1316000",
    "end": "1321580"
  },
  {
    "text": "once you did that you actually do the get delegate for function pointer call and I've actually got this broken out on",
    "start": "1321580",
    "end": "1327830"
  },
  {
    "text": "the next slide so you create the function delegate for the pointer create the delegate from him handle and then",
    "start": "1327830",
    "end": "1333290"
  },
  {
    "text": "you go ahead and pass a memory location to the delegate and it actually executes your code to that invoke call so here's",
    "start": "1333290",
    "end": "1339290"
  },
  {
    "text": "a little example this was my first proof of concept that's when I took my screenshot because I was thinking oh it worked",
    "start": "1339290",
    "end": "1344300"
  },
  {
    "text": "well this is the first time I did something other than calc let me say so",
    "start": "1344300",
    "end": "1350180"
  },
  {
    "text": "I used meterpreter is just a proof of concept the reason being is our first proof of concept was calc which was just",
    "start": "1350180",
    "end": "1356090"
  },
  {
    "text": "a simple pass off to an executable on on that already that's already exists on the on the system run on the disk and",
    "start": "1356090",
    "end": "1362540"
  },
  {
    "text": "here we were actually trying to run an interactive shell code and which is a whole different story",
    "start": "1362540",
    "end": "1367880"
  },
  {
    "text": "right so basically taking all the instructions and all the intelligence and putting it completely in shell code and seeing if that runs and this was a",
    "start": "1367880",
    "end": "1373400"
  },
  {
    "text": "validation of it yeah we wanted we wanted to be able to prove at that beyond just making calls to things that already exist that you could load the",
    "start": "1373400",
    "end": "1381290"
  },
  {
    "text": "entire contents of you know a runtime like I matter pre-recession so that you",
    "start": "1381290",
    "end": "1386660"
  },
  {
    "text": "could actually run it and get it to function in the way that it's meant to do so yeah so so I didn't want to just",
    "start": "1386660",
    "end": "1396230"
  },
  {
    "text": "give you screenshots I wanted to do a live demo so what I've got here is I've got a Windows 10 host and I've put two",
    "start": "1396230",
    "end": "1404240"
  },
  {
    "text": "samples up I've got one out on our github site this is our code that we've actually published proof of concept is",
    "start": "1404240",
    "end": "1410390"
  },
  {
    "text": "actually just launching calc dot exe like we originally did for our c-sharp code so I'm just going and grabbing that code and executing it and it's gonna",
    "start": "1410390",
    "end": "1420020"
  },
  {
    "text": "launch calc now one of the things that we did with our public code that we published was the powershell is going to",
    "start": "1420020",
    "end": "1427430"
  },
  {
    "text": "die in the background because what's happening when we're passing execution to the heap address is that there's not error handling built in so once it",
    "start": "1427430",
    "end": "1434240"
  },
  {
    "text": "passes all set execution from powershell it's not passing it off as a new thread so execution actually a PowerShell dies",
    "start": "1434240",
    "end": "1441020"
  },
  {
    "text": "once Calchas that's ok it'll probably get fixed here shortly as the community",
    "start": "1441020",
    "end": "1446510"
  },
  {
    "text": "grabs onto this and Forks the code and does more things with it but for now that actually gives us some artifact",
    "start": "1446510",
    "end": "1452050"
  },
  {
    "text": "to look for you know powershell we're faulting and there are specific error codes that i'll publish that you can",
    "start": "1452050",
    "end": "1458380"
  },
  {
    "text": "look for what does it look like these api calls and the error logs when you're invoking MMF and launching directly into",
    "start": "1458380",
    "end": "1466030"
  },
  {
    "text": "the heap next code I'm going to make sure that my mitre procession is running",
    "start": "1466030",
    "end": "1471280"
  },
  {
    "text": "and it is not so I get to type this live",
    "start": "1471280",
    "end": "1477120"
  },
  {
    "text": "these windows ya know [Applause]",
    "start": "1478590",
    "end": "1485510"
  },
  {
    "text": "yep tab complete takes a while sometimes sorry guys x64 you know call me insane",
    "start": "1487770",
    "end": "1497380"
  },
  {
    "text": "because I'm doing a live demo in recording I haven't learned my lesson",
    "start": "1497380",
    "end": "1504270"
  },
  {
    "text": "I've done this a few times [Applause]",
    "start": "1511130",
    "end": "1520750"
  },
  {
    "text": "so I come back over to my house now then I'm now that my listener is running I'm gonna go ahead and execute this download",
    "start": "1520750",
    "end": "1525820"
  },
  {
    "text": "the payload and hit enter twice apparently so when we pass execution off",
    "start": "1525820",
    "end": "1532330"
  },
  {
    "text": "to shellcode in MMF our powershell process is going to keep running now we can fix this a couple of ways we can run",
    "start": "1532330",
    "end": "1538150"
  },
  {
    "text": "this as a hidden window but as long as nobody kills this powershell process our shell code is running if i come back",
    "start": "1538150",
    "end": "1543429"
  },
  {
    "text": "over here i can go ahead and interact with this system and what's interesting about this is if you're using a",
    "start": "1543429",
    "end": "1551100"
  },
  {
    "text": "sufficiently advanced piece of defense software at this point that communication if you're if you're using",
    "start": "1551100",
    "end": "1557919"
  },
  {
    "text": "something like Metasploit will be detected unless you encode the payload or use SSL or something like that this",
    "start": "1557919",
    "end": "1566679"
  },
  {
    "text": "this methodology isn't intended to use well-known practices and hide those",
    "start": "1566679",
    "end": "1572320"
  },
  {
    "text": "channels the the MMF invocation is intended as a new way to launch shell",
    "start": "1572320",
    "end": "1578679"
  },
  {
    "text": "code so attackers may utilize this methodology and they may already be using it to launch malicious shell code",
    "start": "1578679",
    "end": "1586059"
  },
  {
    "text": "that's not known to be bad or unique shell code in your environment today it's yeah it's really that MSF venom is",
    "start": "1586059",
    "end": "1592390"
  },
  {
    "text": "just a very convenient way for us to be able to generate payloads different kinds of payloads different sizes that",
    "start": "1592390",
    "end": "1599130"
  },
  {
    "text": "the do different things like the like calling a command and actually executing the command to bring up Cal thought exe",
    "start": "1599130",
    "end": "1605470"
  },
  {
    "text": "versus actually creating something that should fully run inside of the heat memory for us so just to recap for",
    "start": "1605470",
    "end": "1613059"
  },
  {
    "text": "everybody there's a couple of different things that we can do with MMF so we wanted to do a little recap rate for you",
    "start": "1613059",
    "end": "1618340"
  },
  {
    "text": "yeah so it's you know one of the points is that so MMF for this this methodology allows you",
    "start": "1618340",
    "end": "1624610"
  },
  {
    "text": "to place arbitrary code into memory and makes it you know readily addressable",
    "start": "1624610",
    "end": "1629860"
  },
  {
    "text": "it's something that you can access very easily as you can see we were able to gain that actual address back into a",
    "start": "1629860",
    "end": "1637270"
  },
  {
    "text": "variable that we could use to pass execution pretty consistently and then MMF can be set with you know the execute",
    "start": "1637270",
    "end": "1644679"
  },
  {
    "text": "permission it's something that's you know contrary to what you would expect in terms of direct memory access from",
    "start": "1644679",
    "end": "1650620"
  },
  {
    "text": "user space and number one address to execute and you know do what it is that you like so say",
    "start": "1650620",
    "end": "1657030"
  },
  {
    "text": "for example you know the one of the methods that we had up on the screen earlier is invoke shellcode it's very",
    "start": "1657030",
    "end": "1662549"
  },
  {
    "text": "similar in its goals and its path but one of the differentiations between the",
    "start": "1662549",
    "end": "1668010"
  },
  {
    "text": "two ways that we can invoke inject shellcode into memory is that with",
    "start": "1668010",
    "end": "1673520"
  },
  {
    "text": "invoke shellcode we're literally loading kernel32.dll from disk and then we're",
    "start": "1673520",
    "end": "1679860"
  },
  {
    "text": "loading modules or methods that we know are suspicious yeah so so defense security defense products can flag that",
    "start": "1679860",
    "end": "1687570"
  },
  {
    "text": "activity as suspicious and when context of other activities trying to say for example trying to launch directly into",
    "start": "1687570",
    "end": "1692850"
  },
  {
    "text": "that memory address that's malicious whereas we're not doing indicators such",
    "start": "1692850",
    "end": "1697919"
  },
  {
    "text": "as loading a DLL we're just using native API calls in the.net framework that are",
    "start": "1697919",
    "end": "1703500"
  },
  {
    "text": "natively allowed for powershell to utilize and allocating memory and executing that memory directly it's just",
    "start": "1703500",
    "end": "1710340"
  },
  {
    "text": "it's it's just a kind of a broader example of living off Lin there's nothing else that we have to include it's already natively available to us",
    "start": "1710340",
    "end": "1716460"
  },
  {
    "text": "you don't have to do something you know you look at at PowerShell Empire would you know wonderful great system you know",
    "start": "1716460",
    "end": "1723150"
  },
  {
    "text": "but a lot of the you know the various modules need to get that extended capability by getting you know methods",
    "start": "1723150",
    "end": "1731160"
  },
  {
    "text": "and functions from assemblies so dll's yeah so some of the other use cases that",
    "start": "1731160",
    "end": "1736169"
  },
  {
    "text": "are potentially available to us with using MMF are things like braking context for behavioral engines so going",
    "start": "1736169",
    "end": "1742830"
  },
  {
    "text": "back to those IPC examples you know how do I share data as a back-channel you",
    "start": "1742830",
    "end": "1748260"
  },
  {
    "text": "know how would security products know which memory map files to watch if they're using new handles things like",
    "start": "1748260",
    "end": "1753630"
  },
  {
    "text": "that and then another one that we kind of wrote on the whiteboard is an idea is",
    "start": "1753630",
    "end": "1758790"
  },
  {
    "text": "can we utilize memory map files as a way to bypass like DLP protections to really shuttle sensitive information maybe we",
    "start": "1758790",
    "end": "1766380"
  },
  {
    "text": "didn't test that that's something that will be done later but possible if so we",
    "start": "1766380",
    "end": "1772110"
  },
  {
    "text": "definitely need to address it as an industry and yeah so you know it's it's",
    "start": "1772110",
    "end": "1779280"
  },
  {
    "text": "going to you know really the biggest things that we want to take away this for people to understand is that you know we're using",
    "start": "1779280",
    "end": "1785980"
  },
  {
    "text": "something that's that's pretty much allowable it's it's it's given as normal",
    "start": "1785980",
    "end": "1791289"
  },
  {
    "text": "access to people inside of PowerShell and whatnot so it can be used to do",
    "start": "1791289",
    "end": "1796539"
  },
  {
    "text": "things like you know maybe hiding data and sharing you know information between different processes or different memory",
    "start": "1796539",
    "end": "1802870"
  },
  {
    "text": "safe spaces and that's not necessarily something that behavioural engines are",
    "start": "1802870",
    "end": "1807880"
  },
  {
    "text": "looking at right now so it's a it's a different variation on a theme yeah and so last week as we were finalizing this",
    "start": "1807880",
    "end": "1815169"
  },
  {
    "text": "presentation I just kind of had an aha moment and I don't know how feasible this is and we'll talk about why but one",
    "start": "1815169",
    "end": "1820480"
  },
  {
    "text": "of the ideas that I thought about was if you're a serious assembler or shell",
    "start": "1820480",
    "end": "1825909"
  },
  {
    "text": "coder it's possible you could create memory map files as a meta register so you",
    "start": "1825909",
    "end": "1831520"
  },
  {
    "text": "could take like all the contents of all the registers and shove it into NMM MMF so that would be like a snapshot of",
    "start": "1831520",
    "end": "1837070"
  },
  {
    "text": "where I was before and store that data or you could create additional registers so in assembly you're working with a set",
    "start": "1837070",
    "end": "1842679"
  },
  {
    "text": "amount of registers and those registers allow you to store locations and memory and you're working with that finite so",
    "start": "1842679",
    "end": "1850029"
  },
  {
    "text": "you've got to do things to basically save state or save a register and you",
    "start": "1850029",
    "end": "1855580"
  },
  {
    "text": "could potentially allocate new memory as a meta register and just store a location memory there again I said I",
    "start": "1855580",
    "end": "1861940"
  },
  {
    "text": "don't know how feasible that is because remember memory map files are for K blocks so that's a little insane amount",
    "start": "1861940",
    "end": "1867580"
  },
  {
    "text": "of allocation just to store you know a little memory address but it's it's some ongoing research we'll probably do but",
    "start": "1867580",
    "end": "1874390"
  },
  {
    "text": "for now our code is up on github it's available it's there you know if there's if there's anything that you've seen",
    "start": "1874390",
    "end": "1880240"
  },
  {
    "text": "you're like hey you know I want to I think that you could do this better or maybe here's the error handling that you're looking for you know feel free",
    "start": "1880240",
    "end": "1886840"
  },
  {
    "text": "please you fort you know propose it back to us we'll take a look at it you know we're happy",
    "start": "1886840",
    "end": "1892360"
  },
  {
    "text": "to commit other people's changes it's no big deal to us you know on a personal note for myself and Parker we'd like you",
    "start": "1892360",
    "end": "1898750"
  },
  {
    "text": "know the e FF was actually very helpful as you know part of this when we decided to pursue this path and make sure that",
    "start": "1898750",
    "end": "1905470"
  },
  {
    "text": "we were you know not stepping in anybody's toes so you know we appreciate their effort on this",
    "start": "1905470",
    "end": "1910970"
  },
  {
    "text": "yeah so just a quick note on that this is not a vulnerability we just did disclose this to Microsoft and it works",
    "start": "1910970",
    "end": "1917000"
  },
  {
    "text": "as intended yeah just a quick note there",
    "start": "1917000",
    "end": "1922250"
  },
  {
    "text": "but but we did want to go ahead and",
    "start": "1922250",
    "end": "1927650"
  },
  {
    "text": "think there were a couple of sponsors out there for us a that allowed us to do our independent research yeah so checkpoint Cisco digital Guardian",
    "start": "1927650",
    "end": "1934430"
  },
  {
    "text": "Gemalto and f5 all contributed to us being able to do this independently so",
    "start": "1934430",
    "end": "1940610"
  },
  {
    "text": "that we could you know as individual contributors come up with something and then propose it back to you know you",
    "start": "1940610",
    "end": "1946430"
  },
  {
    "text": "guys here your black ass so we really appreciate their their support yeah",
    "start": "1946430",
    "end": "1951550"
  },
  {
    "text": "thanks [Applause]",
    "start": "1951550",
    "end": "1958589"
  }
]