[
  {
    "start": "0",
    "end": "22000"
  },
  {
    "text": "hello I'm Cal B and today I'll be talking about some new classes of vulnerabilities that ice covered earlier",
    "start": "0",
    "end": "5700"
  },
  {
    "text": "this year that affects single sign-on systems these vulnerabilities were discovered recently and pretty generally",
    "start": "5700",
    "end": "11429"
  },
  {
    "text": "applicable to multiple systems and in some cases these vulnerabilities enable authentication bypasses and allow",
    "start": "11429",
    "end": "17850"
  },
  {
    "text": "attackers to pivot from one user account to another so a quick thing about me",
    "start": "17850",
    "end": "23910"
  },
  {
    "start": "22000",
    "end": "48000"
  },
  {
    "text": "before I dive into my research um so my professional and research interests are in cryptography mathematics and security",
    "start": "23910",
    "end": "30090"
  },
  {
    "text": "engineering so if you like those things feel free to check out my blog or Twitter I do most of my time to spend as",
    "start": "30090",
    "end": "36840"
  },
  {
    "text": "a security advisor for a product and engineering teams as well as doing code and system design audits and in fact the",
    "start": "36840",
    "end": "43079"
  },
  {
    "text": "research that I'm presenting today was originally identified during one of these internal audits so the goal today",
    "start": "43079",
    "end": "49980"
  },
  {
    "start": "48000",
    "end": "68000"
  },
  {
    "text": "is to describe these classes of taxon SSO and sam'l and how an attacker could exploit them so at first I'll discuss",
    "start": "49980",
    "end": "56610"
  },
  {
    "text": "sam'l at a high level so we're along the same page for the mechanisms that enable these vulnerabilities and then from",
    "start": "56610",
    "end": "62730"
  },
  {
    "text": "there I'll take more into the the nuance of exploitation as well as mitigation so",
    "start": "62730",
    "end": "68700"
  },
  {
    "start": "68000",
    "end": "177000"
  },
  {
    "text": "with that being said let's first get started off with sam'l an SSO there's quite a bit I could cover here but I'll",
    "start": "68700",
    "end": "74220"
  },
  {
    "text": "cover enough ground just so these vulnerabilities seem relatively intuitive so single sign-on is really",
    "start": "74220",
    "end": "80520"
  },
  {
    "text": "just describing a user experience where you authenticate to one service in order to access multiple services so in an",
    "start": "80520",
    "end": "87479"
  },
  {
    "text": "ideal SSO world users would benefit from this u-axis they would only need to remember one really good password in",
    "start": "87479",
    "end": "93479"
  },
  {
    "text": "order to access many services in a generalized SSO set up there are like",
    "start": "93479",
    "end": "98790"
  },
  {
    "text": "three main characters the first is the identity provider which is often abbreviated IDP the IDP is who you",
    "start": "98790",
    "end": "105689"
  },
  {
    "text": "authenticate to in order to get access to these multiple services so for example your organization's user",
    "start": "105689",
    "end": "111600"
  },
  {
    "text": "directory the second character is the user agent which is just a fancy term for a process acting on a user's behalf",
    "start": "111600",
    "end": "118890"
  },
  {
    "text": "and for this talk you'll always just be a web browser and then finally we have a",
    "start": "118890",
    "end": "124079"
  },
  {
    "text": "service provider which is often abbreviated SP and the SP is the service the user wants to access so this could",
    "start": "124079",
    "end": "130800"
  },
  {
    "text": "be a payroll payroll web application or some sort of chat application so one",
    "start": "130800",
    "end": "137790"
  },
  {
    "text": "fairly common SSO flow starts with authentication to the IB P the IB P then",
    "start": "137790",
    "end": "143370"
  },
  {
    "text": "generates and signs a message intended for the SP and passes that to the browser the browser takes this message",
    "start": "143370",
    "end": "149550"
  },
  {
    "text": "and directs it towards the SP and the SP parses that message out validates it and",
    "start": "149550",
    "end": "154980"
  },
  {
    "text": "determines how to authenticate the user if at all so what's notable about this particular workflow is that the browser process is",
    "start": "154980",
    "end": "162330"
  },
  {
    "text": "under user control and these messages are ultimately passed through it so a service provider must be able to",
    "start": "162330",
    "end": "167940"
  },
  {
    "text": "authenticate the contents of the message when it receives it this is part of the problem that sam'l and some of the",
    "start": "167940",
    "end": "174030"
  },
  {
    "text": "related standards are attempting to solve so sam'l is the security assertion",
    "start": "174030",
    "end": "179430"
  },
  {
    "start": "177000",
    "end": "222000"
  },
  {
    "text": "markup language and it's a common standard used for SSO there are multiple other standards that could be used for",
    "start": "179430",
    "end": "185910"
  },
  {
    "text": "an SSO setup like Open ID Connect for example but from my experience sam'l is more prevalent and organizational",
    "start": "185910",
    "end": "192900"
  },
  {
    "text": "context whereas you may see things like open ID Connect or similar ad hoc protocols in a more consumer facing",
    "start": "192900",
    "end": "199230"
  },
  {
    "text": "context and really and what same well is defining is considering that your IDP",
    "start": "199230",
    "end": "205319"
  },
  {
    "text": "and your SP may be built by completely different people or systems it's a common language that's used to share",
    "start": "205319",
    "end": "211829"
  },
  {
    "text": "data across these disparate systems so sam'l also defines how other standards",
    "start": "211829",
    "end": "217709"
  },
  {
    "text": "interact with it such as those that provide things like message authenticity so I think everyone would probably hate",
    "start": "217709",
    "end": "225060"
  },
  {
    "start": "222000",
    "end": "243000"
  },
  {
    "text": "me if I put like a real sam'l document up here so this is a very simplified example sam'l documents are just XML XML can get",
    "start": "225060",
    "end": "232980"
  },
  {
    "text": "like relatively nasty so this is has a lot of the crux removed I would however like to highlight a few key elements",
    "start": "232980",
    "end": "238709"
  },
  {
    "text": "that are often used during same old base SSO because they are relevant to this talk the first of the subject in the",
    "start": "238709",
    "end": "245370"
  },
  {
    "start": "243000",
    "end": "273000"
  },
  {
    "text": "name ID elements so the subject element is just conveying information about the authenticating user the name ID is one",
    "start": "245370",
    "end": "252989"
  },
  {
    "text": "part of the subject element and defined as a string value that uniquely identifies a user this could be really",
    "start": "252989",
    "end": "259289"
  },
  {
    "text": "any identifier but like more commonly you'll see things like email addresses or user names",
    "start": "259289",
    "end": "265260"
  },
  {
    "text": "SPS very often end up using this name ID in order to identify what user they want",
    "start": "265260",
    "end": "270450"
  },
  {
    "text": "to authenticate when they receive a sam'l message so the next interesting",
    "start": "270450",
    "end": "275490"
  },
  {
    "start": "273000",
    "end": "313000"
  },
  {
    "text": "set of elements are the attributed statements and attributes so add attribute statement is just a set of",
    "start": "275490",
    "end": "281520"
  },
  {
    "text": "attributes and attributes are just general properties of the user that the identity provider may want to convey to",
    "start": "281520",
    "end": "287640"
  },
  {
    "text": "a service provider so for example an identity provider may use a user name",
    "start": "287640",
    "end": "293340"
  },
  {
    "text": "for a name ID but also wants to inform a service provider of the user's email for like notification purposes so you could",
    "start": "293340",
    "end": "301440"
  },
  {
    "text": "also say use the attributes section to convey as I've done in the slide access",
    "start": "301440",
    "end": "307440"
  },
  {
    "text": "control roles like this person is an administrator and finally we need a",
    "start": "307440",
    "end": "315000"
  },
  {
    "start": "313000",
    "end": "325000"
  },
  {
    "text": "signature to prove that this information wasn't changed by a malicious user and this is where the signature element and",
    "start": "315000",
    "end": "321450"
  },
  {
    "text": "the XML digital signature student standard comes into play so sam'l uses",
    "start": "321450",
    "end": "327780"
  },
  {
    "start": "325000",
    "end": "371000"
  },
  {
    "text": "the XML digital signature standard often said XML deseg to sign documents and",
    "start": "327780",
    "end": "333300"
  },
  {
    "text": "prevent tampering by potentially malicious user agents so what the simple signature element and the slide is",
    "start": "333300",
    "end": "339630"
  },
  {
    "text": "conveying is that these signatures are included within the same ole messages passed within between these systems so",
    "start": "339630",
    "end": "346830"
  },
  {
    "text": "at first glance this may seem like somewhat of a chicken and egg problem how do you sign a document that includes",
    "start": "346830",
    "end": "352260"
  },
  {
    "text": "its own signature but this is part of what XML D cig and the standard is",
    "start": "352260",
    "end": "358470"
  },
  {
    "text": "specifying so for the most part XML D cig is irrelevant for this presentation but there's one step of creating XML",
    "start": "358470",
    "end": "365400"
  },
  {
    "text": "digital signatures that enable these authentication bypasses that I alluded to so we'll dig into it a bit more in",
    "start": "365400",
    "end": "372330"
  },
  {
    "start": "371000",
    "end": "451000"
  },
  {
    "text": "this step is xml canonicalization so as you may know digital signatures become",
    "start": "372330",
    "end": "377460"
  },
  {
    "text": "invalid if even one single bit changes in the sign text because signed XML",
    "start": "377460",
    "end": "383280"
  },
  {
    "text": "documents could pass through multiple services and experience possibly inconsequential changes XML documents",
    "start": "383280",
    "end": "390540"
  },
  {
    "text": "are not signed as is xml documents are instead signed in their canonical format so",
    "start": "390540",
    "end": "396619"
  },
  {
    "text": "canonicalization which is abbreviated c 14 n as a standard series of transformations that are applied to",
    "start": "396619",
    "end": "402829"
  },
  {
    "text": "documents before signature operations so this prevents minor differences in signed documents from causing signatures",
    "start": "402829",
    "end": "409309"
  },
  {
    "text": "to become invalid the key point here is so long as the documents have the same logical meaning they should have the",
    "start": "409309",
    "end": "415459"
  },
  {
    "text": "same signature so a demonstration of c14 in can be seen and these xml documents i",
    "start": "415459",
    "end": "421159"
  },
  {
    "text": "have included in the slide so the first two are quite similar aside from their",
    "start": "421159",
    "end": "426259"
  },
  {
    "text": "attribute ordering being reversed these two documents have the same canonical form because they have the same logical",
    "start": "426259",
    "end": "432739"
  },
  {
    "text": "meaning and would therefore have the same XML signature the last two",
    "start": "432739",
    "end": "438049"
  },
  {
    "text": "documents are also quite signature except are actually quite similar except for the comment included in the last",
    "start": "438049",
    "end": "443869"
  },
  {
    "text": "document and so the last two documents could have the same canonical form but it depends on the canonicalization",
    "start": "443869",
    "end": "449929"
  },
  {
    "text": "algorithm which the fact that there are multiple c14 in algorithms is probably not surprising because it is XML and XML",
    "start": "449929",
    "end": "456379"
  },
  {
    "start": "451000",
    "end": "517000"
  },
  {
    "text": "is complicated but however for this talk there's only one distinction that's worth noting across these algorithms and",
    "start": "456379",
    "end": "462559"
  },
  {
    "text": "it's that some c14 algorithms remove comments prior to signature operations so that is xml comments like the ones",
    "start": "462559",
    "end": "469819"
  },
  {
    "text": "that i included in the previous slide do not actually affect the signature there",
    "start": "469819",
    "end": "475009"
  },
  {
    "text": "are algorithms that I that do include comments as part of the canonical document but from my research I think",
    "start": "475009",
    "end": "481069"
  },
  {
    "text": "those c14 algorithms are actually far less frequently used and I believe that's probably due to this quote which",
    "start": "481069",
    "end": "487279"
  },
  {
    "text": "suggests that c14 in including comments is merely a recommended part of the",
    "start": "487279",
    "end": "492769"
  },
  {
    "text": "standard whereas c14 in without comments is a required part of the standard so",
    "start": "492769",
    "end": "499389"
  },
  {
    "text": "given this complexity of sam'l and the supporting specifications like XML C for",
    "start": "499389",
    "end": "504919"
  },
  {
    "text": "tuning and the xml digital signature standard if I was a developer wanting to implement a sam'l service provider",
    "start": "504919",
    "end": "511369"
  },
  {
    "text": "I'm very unlikely to just start from scratch and this is where sam'l libraries come in so sam'l api's are",
    "start": "511369",
    "end": "520399"
  },
  {
    "start": "517000",
    "end": "592000"
  },
  {
    "text": "often abstract away all the nasty details to make developer ux a bit more straight so considering sam'l is also just a",
    "start": "520399",
    "end": "528960"
  },
  {
    "text": "language to convey data it's still up to the SP implementer to decide on what",
    "start": "528960",
    "end": "534540"
  },
  {
    "text": "needs to be done with that data so we can see in this code snippet here using the Python sam'l api how you could",
    "start": "534540",
    "end": "541830"
  },
  {
    "text": "probably build a very simple sam'l SP so this code snippet here is just taking",
    "start": "541830",
    "end": "547770"
  },
  {
    "text": "something like an HTTP request object processing it and transforming it into a sam'l document object the sam'l object",
    "start": "547770",
    "end": "555240"
  },
  {
    "text": "is then processed and check for signature validity and assuming there were no errors during processing we can",
    "start": "555240",
    "end": "562320"
  },
  {
    "text": "extract the data relevant for our use case so in this case we just need to extract the name ID element from the",
    "start": "562320",
    "end": "568530"
  },
  {
    "text": "sam'l XML which is the username that we want to use to authenticate our user so",
    "start": "568530",
    "end": "574440"
  },
  {
    "text": "a subtle point here is that these libraries do not often use the canonical XML document for this post-processing",
    "start": "574440",
    "end": "580980"
  },
  {
    "text": "step that's SP specific this means that the document used for signature verification may be slightly different",
    "start": "580980",
    "end": "587730"
  },
  {
    "text": "than the document that's used for this post-processing step so considering",
    "start": "587730",
    "end": "594840"
  },
  {
    "start": "592000",
    "end": "662000"
  },
  {
    "text": "sam'l library authors or SP developers may need some way to extract the relevant XML data during the",
    "start": "594840",
    "end": "600240"
  },
  {
    "text": "authentication process I may help to get a sense on how this is accomplished underneath the hood of these sam'l api's and this is where the",
    "start": "600240",
    "end": "607410"
  },
  {
    "text": "lower-level XML API is come in so this code snippet is an example of what",
    "start": "607410",
    "end": "612750"
  },
  {
    "text": "extracting a name ID may look like at the XML API level using the popular Python L XML library so first we need to",
    "start": "612750",
    "end": "621450"
  },
  {
    "text": "convert some string representing XML into an XML object and then we can call a method like the dot text method on",
    "start": "621450",
    "end": "628200"
  },
  {
    "text": "that element to extract the inner text of it the output of this code is simply",
    "start": "628200",
    "end": "633450"
  },
  {
    "text": "the name ID value kalbi Lib League I think most of in here would probably guess that so one of the key findings",
    "start": "633450",
    "end": "640260"
  },
  {
    "text": "from my research however is how these api is changed when comments are included into these inner text values so",
    "start": "640260",
    "end": "646110"
  },
  {
    "text": "given that a comment has been inserted into the inner text of this name ID what would output of this code be",
    "start": "646110",
    "end": "652410"
  },
  {
    "text": "one might expect to it to not change at all however the insertion of this",
    "start": "652410",
    "end": "657870"
  },
  {
    "text": "comment actually truncate the attracted intertext so you may ask why did that",
    "start": "657870",
    "end": "664860"
  },
  {
    "start": "662000",
    "end": "739000"
  },
  {
    "text": "value get truncated if it of course depends on the implementation but a",
    "start": "664860",
    "end": "669870"
  },
  {
    "text": "probable answer is that XML documents may be internally represented in the library as trees by the underlying XML",
    "start": "669870",
    "end": "676529"
  },
  {
    "text": "library so in my first text extracting extract in my first text extraction example the document used could be seen",
    "start": "676529",
    "end": "684269"
  },
  {
    "text": "as a tree with one root with one child node containing the full inner text however the second document may have",
    "start": "684269",
    "end": "691319"
  },
  {
    "text": "three child nodes so a text node containing the first part of the text a comment node and then a node with the",
    "start": "691319",
    "end": "697050"
  },
  {
    "text": "rest of the text so if viewed in this manner it may be a bit more clear what false assumption was",
    "start": "697050",
    "end": "702360"
  },
  {
    "text": "made and it's at a root node may have multiple text nodes as children's that represents one string so if it's assumed",
    "start": "702360",
    "end": "709410"
  },
  {
    "text": "there's only one child containing all the relevant text that partial text extraction may occur although I hadn't",
    "start": "709410",
    "end": "716879"
  },
  {
    "text": "personally seen an example of this when I was doing my research I've since seen some systems that actually accidentally",
    "start": "716879",
    "end": "722250"
  },
  {
    "text": "only extracting strings from like the last text node instead of just",
    "start": "722250",
    "end": "727410"
  },
  {
    "text": "extracting the first so that means there's a possible few variations of this type of failure but for now would",
    "start": "727410",
    "end": "733680"
  },
  {
    "text": "just assume that a comment is truncating everything after the comment so is L XML",
    "start": "733680",
    "end": "741660"
  },
  {
    "start": "739000",
    "end": "817000"
  },
  {
    "text": "broken it's kind of hard to say so other libraries do what L XML does and",
    "start": "741660",
    "end": "747480"
  },
  {
    "text": "their methods for extracting inner text but take for example Ruby's re XML they'll also truncate text after",
    "start": "747480",
    "end": "755240"
  },
  {
    "text": "everything after the comment but re XML documents this behavior so it could just",
    "start": "755240",
    "end": "761160"
  },
  {
    "text": "be viewed as correct but another perspective on correctness may be whether a language ecosystem is",
    "start": "761160",
    "end": "767880"
  },
  {
    "text": "consistent other Python libraries like pythons XML each tree has a dot text",
    "start": "767880",
    "end": "773220"
  },
  {
    "text": "method exactly like L XML does but that one actually ignores the comment and",
    "start": "773220",
    "end": "778259"
  },
  {
    "text": "returns the full inner text so at best you could probably argue that this behavior is technically correct but",
    "start": "778259",
    "end": "784879"
  },
  {
    "text": "technical correctness may not be intuitive and intuitive unintuitive this may be artful",
    "start": "784879",
    "end": "792120"
  },
  {
    "text": "so some libraries like for example pythons mini Dom doesn't even provide a method for extracting inner text users",
    "start": "792120",
    "end": "798809"
  },
  {
    "text": "of this library just have an XML tree API and so they would be responsible for using an XML tree API to extract inner",
    "start": "798809",
    "end": "805050"
  },
  {
    "text": "text and are likely to also introduce a similar issue so at this point we know",
    "start": "805050",
    "end": "812370"
  },
  {
    "text": "just enough about sam'l to actually construct one of the vulnerability classes that I identified so to recap",
    "start": "812370",
    "end": "819480"
  },
  {
    "start": "817000",
    "end": "1059000"
  },
  {
    "text": "what we know first sam'l documents are passed through an untrustworthy browser browser to convey authentication",
    "start": "819480",
    "end": "825209"
  },
  {
    "text": "information within XML these documents are then signed to prevent tampering but xml canonicalization algorithms",
    "start": "825209",
    "end": "831899"
  },
  {
    "text": "often don't factor in comments into signature validity and on top of that",
    "start": "831899",
    "end": "837569"
  },
  {
    "text": "the api is provided to sam'l implementers may truncate text when a comment is added to inter text so our",
    "start": "837569",
    "end": "846240"
  },
  {
    "text": "attack is simply taking a section of XML that looks like this and inserting a",
    "start": "846240",
    "end": "851850"
  },
  {
    "text": "comment into their appropriate location and so the result is that when this is processed by a vulnerable sam'l SP the",
    "start": "851850",
    "end": "858899"
  },
  {
    "text": "comment would not invalidate the signature but would still cause the subjects user identifier to become truncated so in this example",
    "start": "858899",
    "end": "865670"
  },
  {
    "text": "authenticating as the user admin at victim combat evil comm would allow an attacker to truncate the name ID to a",
    "start": "865670",
    "end": "872370"
  },
  {
    "text": "completely different user like admin at victim com so in other words the comment is acting",
    "start": "872370",
    "end": "878999"
  },
  {
    "text": "very similar it's similarly to null byte attacks so it gives me the capability to truncate my own credential in order to",
    "start": "878999",
    "end": "886139"
  },
  {
    "text": "become other users so as I mentioned before I first identified this",
    "start": "886139",
    "end": "891929"
  },
  {
    "text": "vulnerability during an internal audit of a potential dependency so once we identified this first instance of the",
    "start": "891929",
    "end": "897959"
  },
  {
    "text": "single vulnerability doing a root cause analysis suggested that this issue could be much more widespread in fact I when",
    "start": "897959",
    "end": "904949"
  },
  {
    "text": "doing my initial proof of concept ended up making the same mistake as L XML and I had hawk recreating the issue myself",
    "start": "904949",
    "end": "912290"
  },
  {
    "text": "so testing that other people could have also made this mistake testing that",
    "start": "912290",
    "end": "917579"
  },
  {
    "text": "hypothesis actually turned out to be fairly efficient with the help of a couple of other duo researchers we",
    "start": "917579",
    "end": "923069"
  },
  {
    "text": "hunted down open source animal and patience to try to identify similar behavior so our main strategy for doing",
    "start": "923069",
    "end": "930000"
  },
  {
    "text": "this was weaponizing existing unit tests so what I mean by that is many open",
    "start": "930000",
    "end": "936240"
  },
  {
    "text": "source sam'l libraries often included a set of unit tests where at least one tests involved extracting a name ID from",
    "start": "936240",
    "end": "942600"
  },
  {
    "text": "a sign symbol element to identify if a library was vulnerable we nearly made it",
    "start": "942600",
    "end": "949440"
  },
  {
    "text": "needed to take that test in that format add a comment somewhere and ensure the name ID was extracted properly so this",
    "start": "949440",
    "end": "956730"
  },
  {
    "text": "allowed us to very quickly identify multiple open source projects that were affected by this vulnerability the",
    "start": "956730",
    "end": "964380"
  },
  {
    "text": "initial research identified for open source projects that were affected python sam'l Ruby sam'l sam'l two Jas",
    "start": "964380",
    "end": "970920"
  },
  {
    "text": "and Omni out sam'l the last project interestingly was actually built using Ruby sam'l so the presence of the Volm",
    "start": "970920",
    "end": "977790"
  },
  {
    "text": "ended up propagating through into a different project throughout our",
    "start": "977790",
    "end": "983040"
  },
  {
    "text": "disclosure process there had been additional projects that have self reported being a portable such as open",
    "start": "983040",
    "end": "989010"
  },
  {
    "text": "sam'l C++ and really like the interesting aspect of this particular outcome is that these are known",
    "start": "989010",
    "end": "995160"
  },
  {
    "text": "vulnerable sam'l libraries so this means that the scope is much larger than just",
    "start": "995160",
    "end": "1000410"
  },
  {
    "text": "these five projects because service providers or products reliant on vulnerable versions of these libraries",
    "start": "1000410",
    "end": "1006529"
  },
  {
    "text": "are often affected so additionally this doesn't account for any one-off sam'l",
    "start": "1006529",
    "end": "1012170"
  },
  {
    "text": "implementations that may have ad hoc recreated the vulnerability themselves",
    "start": "1012170",
    "end": "1018190"
  },
  {
    "text": "and this is a subset of products that I'm aware of that were affected by this comment truncation vulnerability this",
    "start": "1018190",
    "end": "1024319"
  },
  {
    "text": "includes products such as shibboleths SP get lab a few semantic products and the",
    "start": "1024319",
    "end": "1029990"
  },
  {
    "text": "product I alluded to earlier that we did the review of to do a network gateway so a good chunk of these products had sam'l",
    "start": "1029990",
    "end": "1036380"
  },
  {
    "text": "implications based on libraries that I previously mentioned and for what it's worth most of these products are",
    "start": "1036380",
    "end": "1042770"
  },
  {
    "text": "on-premise so there could be SAS products that were affected and some have self-reported being affected but",
    "start": "1042770",
    "end": "1049660"
  },
  {
    "text": "not everyone always publishes release notes when their SAS service has some back-end vulnerability patch so those",
    "start": "1049660",
    "end": "1055970"
  },
  {
    "text": "cases are a bit harder to track and finally this is the",
    "start": "1055970",
    "end": "1061070"
  },
  {
    "start": "1059000",
    "end": "1099000"
  },
  {
    "text": "timeline of our findings and research as I mentioned before I identified the",
    "start": "1061070",
    "end": "1066080"
  },
  {
    "text": "first issue during an internal audit last December three days after that while simultaneously sorting out what a",
    "start": "1066080",
    "end": "1071929"
  },
  {
    "text": "good patch would look like for the seemingly new vulnerability we identified three other vendors that were also affected and since we were dealing",
    "start": "1071929",
    "end": "1079700"
  },
  {
    "text": "with most multiple affected vendors we opted to work with cert CC to coordinate disclosure across these vendors as well",
    "start": "1079700",
    "end": "1085970"
  },
  {
    "text": "as other common sam'l IDPs an SPS and the coordinated public disclosure was done around two months after the initial",
    "start": "1085970",
    "end": "1092420"
  },
  {
    "text": "contact a cert CC which is about a month earlier than the initial suggested deadline so switching gears a bit let's",
    "start": "1092420",
    "end": "1101720"
  },
  {
    "start": "1099000",
    "end": "1146000"
  },
  {
    "text": "let's take some time to look at how this one er ability could be exploited so given that we know that we can find",
    "start": "1101720",
    "end": "1108380"
  },
  {
    "text": "vulnerable sam'l service providers that allow us to truncate signed data how could this be leveraged by an attacker",
    "start": "1108380",
    "end": "1114140"
  },
  {
    "text": "does exploitation just require sheer luck to get an identifier that is truncates to some other target and the",
    "start": "1114140",
    "end": "1122000"
  },
  {
    "text": "answer to that is actually kind of complicated because both SPS and IDPs are really configurable so there's like",
    "start": "1122000",
    "end": "1128540"
  },
  {
    "text": "lots of wiggle room for configuring things in such a way where risk is negatively or positively impacted so",
    "start": "1128540",
    "end": "1136130"
  },
  {
    "text": "let's first take a look at some ways that a service provider may be affected as well as walk through an example",
    "start": "1136130",
    "end": "1141200"
  },
  {
    "text": "against of an exploit of vulnerable service provider so to be clear the",
    "start": "1141200",
    "end": "1149210"
  },
  {
    "start": "1146000",
    "end": "1305000"
  },
  {
    "text": "threat model this tact first requires authenticated access to an identity provider so initial access may be",
    "start": "1149210",
    "end": "1155059"
  },
  {
    "text": "achieved through some form of account takeover like phishing or could just be carried out by an employee looking to",
    "start": "1155059",
    "end": "1160910"
  },
  {
    "text": "access a co-workers data this initial foothold when combined with the common truncation vulnerability can be used to",
    "start": "1160910",
    "end": "1167450"
  },
  {
    "text": "pivot to different user accounts so at first glance this may be impractical since we may be reliant on truncating",
    "start": "1167450",
    "end": "1176300"
  },
  {
    "text": "the data for our foothold account which is may not necessarily lead to anything interesting but this is where these SP",
    "start": "1176300",
    "end": "1182420"
  },
  {
    "text": "specific features or minor implementation details that vary across SPS may make things easier for attackers",
    "start": "1182420",
    "end": "1189789"
  },
  {
    "text": "so the first aspect of SPS that is could lead to more interesting exploits is how",
    "start": "1189789",
    "end": "1196490"
  },
  {
    "text": "samwell's sometimes used to convey authorization information so recall that the sam'l attribute statement is just",
    "start": "1196490",
    "end": "1202399"
  },
  {
    "text": "some set of properties relevant to the authenticating subject so a sam'l",
    "start": "1202399",
    "end": "1207890"
  },
  {
    "text": "document may use these attribute statements to inform the SPS as a use of the user's role like I mentioned earlier",
    "start": "1207890",
    "end": "1214269"
  },
  {
    "text": "so this adds another possible Avenue for impactful value truncation so if the",
    "start": "1214269",
    "end": "1220490"
  },
  {
    "text": "attacker doesn't necessarily have an interesting user identifier to truncate they may be able to truncate group names",
    "start": "1220490",
    "end": "1226399"
  },
  {
    "text": "into something impactful and and this this generally applies to any other XML element that is conveying authentication",
    "start": "1226399",
    "end": "1232700"
  },
  {
    "text": "or authorization information so in the same ole example a user may have say a",
    "start": "1232700",
    "end": "1238940"
  },
  {
    "text": "lesser privilege administration role like one thatis coped to HR administration however if this was",
    "start": "1238940",
    "end": "1244700"
  },
  {
    "text": "truncated to something like administrators the service provider may be enabling a privilege escalation",
    "start": "1244700",
    "end": "1250340"
  },
  {
    "text": "vulnerability through this particular comment truncation technique",
    "start": "1250340",
    "end": "1255700"
  },
  {
    "text": "so another SP specific detail is how name IDs are handled in processed s' the",
    "start": "1255700",
    "end": "1261200"
  },
  {
    "text": "only requirement for user identifier is conveyed via name ID is that it uniquely identifies a specific user identifiers",
    "start": "1261200",
    "end": "1268970"
  },
  {
    "text": "could be anything from user selected user names to completely random identifiers using random identifiers",
    "start": "1268970",
    "end": "1275799"
  },
  {
    "text": "it's probably unlikely to be truncated to anything interesting but maybe things",
    "start": "1275799",
    "end": "1281360"
  },
  {
    "text": "like incremental numeric identifiers could be exploitable as numbers like 104",
    "start": "1281360",
    "end": "1286549"
  },
  {
    "text": "could be truncated to become one other identifiers such as email addresses and",
    "start": "1286549",
    "end": "1291980"
  },
  {
    "text": "user names are more dependent on how accounts are registered and since account registration is often more of a",
    "start": "1291980",
    "end": "1298639"
  },
  {
    "text": "function of the identity provider I'll discuss that a bit more when we get to the IDP exploitability part of that talk",
    "start": "1298639",
    "end": "1305769"
  },
  {
    "text": "so an interesting case study for exploitation is actually get lab the open source source code management",
    "start": "1306039",
    "end": "1312200"
  },
  {
    "text": "service it's notable because prior to 10.7 dot o gate lab was vulnerable to",
    "start": "1312200",
    "end": "1317929"
  },
  {
    "text": "the common truncation vulnerability and their same as sam'l service provider as they use one of the vulnerable",
    "start": "1317929",
    "end": "1323000"
  },
  {
    "text": "dependencies that I mentioned early on Gil AB Sam OSP implementation also",
    "start": "1323000",
    "end": "1328160"
  },
  {
    "text": "highlights some of the unique processing that is done during a service provider authentication that that makes it a also",
    "start": "1328160",
    "end": "1335360"
  },
  {
    "text": "an interesting case study so first to",
    "start": "1335360",
    "end": "1340429"
  },
  {
    "text": "get a understanding of their architecture for identity first gitlab maintains separate tables for their",
    "start": "1340429",
    "end": "1346610"
  },
  {
    "text": "username and these external identities an example of the latter these external identities would be a sam'l name ID so",
    "start": "1346610",
    "end": "1354320"
  },
  {
    "text": "once the sam'l document is processed get lab would attempt to map that external identifier to a gitlab user if the name",
    "start": "1354320",
    "end": "1362000"
  },
  {
    "text": "idea was already mapped to a user the user is then authenticated if the name",
    "start": "1362000",
    "end": "1367070"
  },
  {
    "text": "ID isn't mapped to a user get lab may just create an entirely new user with whatever privileges the administrator",
    "start": "1367070",
    "end": "1373490"
  },
  {
    "text": "had configured for default access so to exploit gitlab using the common",
    "start": "1373490",
    "end": "1379669"
  },
  {
    "start": "1377000",
    "end": "1389000"
  },
  {
    "text": "truncation vulnerability the attacker needs to truncate their name ID in order to match an external identifier that",
    "start": "1379669",
    "end": "1385580"
  },
  {
    "text": "maps to our target user so to walk through what this would look like",
    "start": "1385580",
    "end": "1391210"
  },
  {
    "text": "suppose that we're targeting a get lab user with the username victim this is not the actual username that we'd be",
    "start": "1391210",
    "end": "1397309"
  },
  {
    "text": "targeting for this exploit because they're set us external identity which is shown in the bottom right photo here",
    "start": "1397309",
    "end": "1402830"
  },
  {
    "text": "might be something like sam'l victim and so this is the one that we're looking to target for this truncation bug so this",
    "start": "1402830",
    "end": "1411410"
  },
  {
    "start": "1410000",
    "end": "1448000"
  },
  {
    "text": "is a snippet of what the target users sam'l assertion would actually look like so this is a completely normal",
    "start": "1411410",
    "end": "1417049"
  },
  {
    "text": "unmodified benign sam'l assertion basically the name ID has the external",
    "start": "1417049",
    "end": "1423100"
  },
  {
    "text": "identifier that we're looking for which is sam'l victim and it's also noteworthy to see that the user's email is provided",
    "start": "1423100",
    "end": "1432020"
  },
  {
    "text": "through the attribute statement element so that part doesn't necessarily affect",
    "start": "1432020",
    "end": "1437030"
  },
  {
    "text": "our ability to exploit the system it's really just used so gitlab can keep user",
    "start": "1437030",
    "end": "1442460"
  },
  {
    "text": "profile information synchronized between the identity provider and the service provider so assuming we can access an",
    "start": "1442460",
    "end": "1450800"
  },
  {
    "start": "1448000",
    "end": "1495000"
  },
  {
    "text": "account on on the identity provider with name ID sam'l victim 1 three and attacker can truncate their",
    "start": "1450800",
    "end": "1457350"
  },
  {
    "text": "own sam'l document to collide with the target users external identifier using the payload seen here an interesting",
    "start": "1457350",
    "end": "1464400"
  },
  {
    "text": "side effect of successful exploitation is that the victims profile information may be updated based on attributes in",
    "start": "1464400",
    "end": "1470640"
  },
  {
    "text": "the attackers sam'l document so for example here in the bottom picture the attackers account email address replaced",
    "start": "1470640",
    "end": "1477000"
  },
  {
    "text": "the victims original email address during authentication this is not necessarily indicative of an increase or",
    "start": "1477000",
    "end": "1484289"
  },
  {
    "text": "decrease in exploit ability but it's another indication that these sam'l service providers often implement some",
    "start": "1484289",
    "end": "1490380"
  },
  {
    "text": "amount of custom logic after sam'l documents are verified so before I get",
    "start": "1490380",
    "end": "1498480"
  },
  {
    "start": "1495000",
    "end": "1571000"
  },
  {
    "text": "into how IDPs expect effect exploitability I'd like to cover some of the remediation of the comment on",
    "start": "1498480",
    "end": "1504900"
  },
  {
    "text": "patient owner ability so both the identification and remediation process",
    "start": "1504900",
    "end": "1509909"
  },
  {
    "text": "of this of a vulnerable service provider depends a bit on your relationship with",
    "start": "1509909",
    "end": "1514980"
  },
  {
    "text": "the service provider so if you say manager administrator administrator",
    "start": "1514980",
    "end": "1520320"
  },
  {
    "text": "service providers your two best options are probably asking service providers if they're vulnerable",
    "start": "1520320",
    "end": "1525840"
  },
  {
    "text": "or just spinning up a browser proxy and testing things yourself if you're",
    "start": "1525840",
    "end": "1531780"
  },
  {
    "text": "someone in an organization that has written a sam'l service provider I'd probably recommend to follow the the",
    "start": "1531780",
    "end": "1537299"
  },
  {
    "text": "weaponize unit test strategy to identify if your library or implementation is",
    "start": "1537299",
    "end": "1542490"
  },
  {
    "text": "vulnerable this does of course assume that someone wrote tests but which may be an absurd assumption but you never",
    "start": "1542490",
    "end": "1549059"
  },
  {
    "text": "know so there are also other mitigation strategies as well such as rejecting",
    "start": "1549059",
    "end": "1555330"
  },
  {
    "text": "sam'l documents that are non canonical when they are received or rejecting sam'l documents that contain comments",
    "start": "1555330",
    "end": "1561240"
  },
  {
    "text": "which is probably fairly unlikely in most normal circumstances but the efficacy and practicality of both of",
    "start": "1561240",
    "end": "1567750"
  },
  {
    "text": "those solutions does depend on your context okay so up until this point I",
    "start": "1567750",
    "end": "1574980"
  },
  {
    "text": "pretty much heavily focused on exploiting the service provider but the service provider is really only one part",
    "start": "1574980",
    "end": "1581190"
  },
  {
    "text": "of the SSO system so even if even though service providers are ultimately making",
    "start": "1581190",
    "end": "1587800"
  },
  {
    "text": "this comic truncation mistake in my opinion most of the risk increasing features actually come from the identity",
    "start": "1587800",
    "end": "1594100"
  },
  {
    "text": "provider so what features are configurations of an IDP would influence exploitability the first feature that",
    "start": "1594100",
    "end": "1602740"
  },
  {
    "text": "one might possibly think could reduce exploit ability is something like two-factor authentication however",
    "start": "1602740",
    "end": "1607840"
  },
  {
    "text": "whether to if a actually completely eliminates this mourner bility depends",
    "start": "1607840",
    "end": "1613060"
  },
  {
    "text": "on what systems or systems are enforcing to effect so if the IDP is responsible",
    "start": "1613060",
    "end": "1619660"
  },
  {
    "text": "for it responsible for enforcing 2fa that may not provide additional protection from this vulnerability our",
    "start": "1619660",
    "end": "1627310"
  },
  {
    "text": "threat model is based on a user with authenticated session the attacker already has authenticated access to the",
    "start": "1627310",
    "end": "1633460"
  },
  {
    "text": "ID key so while - if a may increase the costs required for an attacker to get their initial foothold in the case of",
    "start": "1633460",
    "end": "1640180"
  },
  {
    "text": "like an ATO this doesn't really help for the threat model of malicious insiders",
    "start": "1640180",
    "end": "1645940"
  },
  {
    "text": "who have the capability to provide their own second factor of authentication in order to access their own IDP",
    "start": "1645940",
    "end": "1652870"
  },
  {
    "text": "and since sam'l talk document tampering takes place after off the IDP authentication is complete identity and",
    "start": "1652870",
    "end": "1659920"
  },
  {
    "text": "i didn'ti provider enforce to a fade doesn't necessarily limit the risk of",
    "start": "1659920",
    "end": "1665140"
  },
  {
    "text": "exploitation if the SP enforces to a PHA or the SP",
    "start": "1665140",
    "end": "1671800"
  },
  {
    "text": "enforces to a PHA in addition to the IDP exploitation opportunities are a bit more limited and this is because the SP",
    "start": "1671800",
    "end": "1678940"
  },
  {
    "text": "would likely be extracting the users identity from the sam'l document in",
    "start": "1678940",
    "end": "1683950"
  },
  {
    "text": "order to look up the users to a PHA information and in this case the common truncation exploit would cause the SP to",
    "start": "1683950",
    "end": "1690370"
  },
  {
    "text": "look up the victim users - if they information which means the attacker would then be presented with the use the",
    "start": "1690370",
    "end": "1696340"
  },
  {
    "text": "victim users - if a prompt and would have to then bypass that in order to gain access as well so in this case it's",
    "start": "1696340",
    "end": "1702790"
  },
  {
    "text": "still a first actor authentication bypass but there's still that second factor of authentication another",
    "start": "1702790",
    "end": "1710440"
  },
  {
    "text": "variable that can greatly influence impact as I mentioned previously is how IDP users are registered so self",
    "start": "1710440",
    "end": "1716830"
  },
  {
    "text": "registration is a pretty standard practice for consumer services but for my experience as I mentioned earlier",
    "start": "1716830",
    "end": "1722640"
  },
  {
    "text": "sam'l based authentication for consumer services is probably a bit less common",
    "start": "1722640",
    "end": "1728090"
  },
  {
    "text": "organizations that are more likely to use something like sam'l may manually provision other and manually provision",
    "start": "1728090",
    "end": "1734700"
  },
  {
    "text": "all their employees however some identity providers do offer self registration options which may be used",
    "start": "1734700",
    "end": "1741150"
  },
  {
    "text": "to for example reduce IT burden so an attacker who takes advantage of self-service user registration for an",
    "start": "1741150",
    "end": "1747570"
  },
  {
    "text": "IDP would likely increase the impact of this vulnerability as the attacker can provision accounts for themselves and so",
    "start": "1747570",
    "end": "1754080"
  },
  {
    "text": "this gives them an opportunity to influence their SSO identifier and if I'm able to just choose my username for",
    "start": "1754080",
    "end": "1760800"
  },
  {
    "text": "the IDP that gets used in the same low assertion I can just pick one that matches my target user with some like",
    "start": "1760800",
    "end": "1766560"
  },
  {
    "text": "junk at the end and so I can truncate it as I need so another potentially risky",
    "start": "1766560",
    "end": "1776400"
  },
  {
    "text": "IDB feature is account lifecycle functionality such as user profiles so",
    "start": "1776400",
    "end": "1781680"
  },
  {
    "text": "if an IDP also functions as an employee directory the employees may be also able",
    "start": "1781680",
    "end": "1787470"
  },
  {
    "text": "to do self server self-service profile management such as updating the first name or updating their phone number in",
    "start": "1787470",
    "end": "1794280"
  },
  {
    "text": "other words if an identity provider allows the user to edit the data that they then use later for SSO identity",
    "start": "1794280",
    "end": "1801300"
  },
  {
    "text": "they may have some influence over how they're identified and to describe this",
    "start": "1801300",
    "end": "1807330"
  },
  {
    "text": "particular scenario I'll use the term mutable identity to describe user profiles that exhibit this particular",
    "start": "1807330",
    "end": "1813990"
  },
  {
    "text": "behavior in fact I think mutable identities aren't interesting enough concept that it's worth digging into",
    "start": "1813990",
    "end": "1819360"
  },
  {
    "text": "more as it can kind of be its own vulnerability class so mutable",
    "start": "1819360",
    "end": "1824640"
  },
  {
    "text": "identities are interesting because users are able to influence their SSO identity they also greatly impact or effect the",
    "start": "1824640",
    "end": "1833280"
  },
  {
    "text": "impact of the comment from patient owner ability so just like user registration may allow an attacker to choose their",
    "start": "1833280",
    "end": "1839010"
  },
  {
    "text": "own identity to mutable identities allow an attacker to update their identity in",
    "start": "1839010",
    "end": "1845490"
  },
  {
    "text": "order to be conveniently truncate able so to get a better sense of this comment",
    "start": "1845490",
    "end": "1851250"
  },
  {
    "text": "or this concept we can see an example of new identity and LastPass enterprises SSO",
    "start": "1851250",
    "end": "1856500"
  },
  {
    "text": "feature so similar to other identity providers LastPass has an enterprise feature that gives you this like launch",
    "start": "1856500",
    "end": "1862920"
  },
  {
    "text": "review for all the service providers that a user has access to so if an",
    "start": "1862920",
    "end": "1868410"
  },
  {
    "text": "administrator had configured a user's email identifier as the sam'l name ID for one of these services the name ID",
    "start": "1868410",
    "end": "1875700"
  },
  {
    "text": "would update after the user updates their account email so this allows the",
    "start": "1875700",
    "end": "1880770"
  },
  {
    "text": "attacker to update their SSO name ID to any email address they can prove ownership for so in normal circumstances",
    "start": "1880770",
    "end": "1887940"
  },
  {
    "text": "this actually wouldn't be an issue because an attacker wouldn't likely to be able to prove ownership of a victim's",
    "start": "1887940",
    "end": "1894390"
  },
  {
    "text": "email address however when combined with the comment truncation vulnerability that becomes trivial to use mutable",
    "start": "1894390",
    "end": "1901080"
  },
  {
    "text": "identity to target any user so this is what an example exploit steps would look",
    "start": "1901080",
    "end": "1907500"
  },
  {
    "start": "1904000",
    "end": "2150000"
  },
  {
    "text": "like in order to combine the comment truncation vulnerability with mutable identities so in this case I'm acting as",
    "start": "1907500",
    "end": "1913830"
  },
  {
    "text": "myself an employee within duo looking to target our CTO jonno so I first need to",
    "start": "1913830",
    "end": "1920580"
  },
  {
    "text": "find the SP vulnerable to the comment truncation vulnerability that uses email addresses for identity so this can be",
    "start": "1920580",
    "end": "1927900"
  },
  {
    "text": "detected just by authenticating to services that I have access to and inserting comments into sam'l assertions",
    "start": "1927900",
    "end": "1934470"
  },
  {
    "text": "and observing responses from SPS so like things like error responses or maybe default user access is a good",
    "start": "1934470",
    "end": "1942000"
  },
  {
    "text": "indication that a service is vulnerable so once a vulnerables SP is found I can",
    "start": "1942000",
    "end": "1948660"
  },
  {
    "text": "update my last pass account email under a domain I own so for example pretending I own attacker comm I could use the",
    "start": "1948660",
    "end": "1956070"
  },
  {
    "text": "email address jonno at duo comm attacker comm since I own attacker comm this is",
    "start": "1956070",
    "end": "1962220"
  },
  {
    "text": "an email I can prove ownership of by following through Lots passes confirmation email and so once this",
    "start": "1962220",
    "end": "1967740"
  },
  {
    "text": "email address is confirmed my LastPass profile is updated as is my name ID used for",
    "start": "1967740",
    "end": "1973380"
  },
  {
    "text": "LastPass SSO and then I can reallocate to the vulnerable SP and cert a comment",
    "start": "1973380",
    "end": "1979170"
  },
  {
    "text": "before my domain attacker comm and authenticate as my target user so I've",
    "start": "1979170",
    "end": "1984840"
  },
  {
    "text": "actually recorded a demo of this ex workflow using LastPass enterprises so and a demo sam'l service provider that",
    "start": "1984840",
    "end": "1991910"
  },
  {
    "text": "is vulnerable to the common truncation vulnerability so this first video",
    "start": "1991910",
    "end": "1997550"
  },
  {
    "text": "demonstrates LastPass is estação workflow as well as the demo vulnerable",
    "start": "1997550",
    "end": "2002680"
  },
  {
    "text": "service provider who just logs who I bought the negated as so you'll see I'll",
    "start": "2002680",
    "end": "2008140"
  },
  {
    "text": "start the attack with a with my standard",
    "start": "2008140",
    "end": "2013420"
  },
  {
    "text": "organizational email like my name at duo comm would you can see there and then once I authenticate through lots passes",
    "start": "2013420",
    "end": "2020080"
  },
  {
    "text": "to so my last name ID is just shown in the service providers UI so completely",
    "start": "2020080",
    "end": "2025630"
  },
  {
    "text": "normal SSO workflow this video demonstrates how",
    "start": "2025630",
    "end": "2032890"
  },
  {
    "text": "LastPass email update functionality is mutable by M users within the last pass enterprise organization so here I'm",
    "start": "2032890",
    "end": "2041230"
  },
  {
    "text": "updating my email address from one in my organization so my name at duo comm to",
    "start": "2041230",
    "end": "2046630"
  },
  {
    "text": "target the email address subdue Oct oh under domain I own which is John Doe at do comm Cal DZ which I don't actually",
    "start": "2046630",
    "end": "2055270"
  },
  {
    "text": "own attacker calm as cool as that would be I can come I can confirm this email since I do own this domain and then",
    "start": "2055270",
    "end": "2064840"
  },
  {
    "text": "finally after proving email ownership of that domain which I did out of an my",
    "start": "2064840",
    "end": "2070870"
  },
  {
    "text": "LastPass account email has been updated so this video demonstrates my ability to authenticate as a different user in my",
    "start": "2070870",
    "end": "2077020"
  },
  {
    "text": "organization using the comment truncation vulnerability so you'll note at one point in this video I enable a",
    "start": "2077020",
    "end": "2082720"
  },
  {
    "text": "browser extension which is this little blue circle in the top right corner and that's really just a browser proxy",
    "start": "2082720",
    "end": "2087760"
  },
  {
    "text": "that's inserting comments into their appropriate location automatically as sam'l messages or pass through my",
    "start": "2087760",
    "end": "2092830"
  },
  {
    "text": "browser so here I first killed my",
    "start": "2092830",
    "end": "2098980"
  },
  {
    "text": "previous SP session because I had RA authenticated and so after doing a",
    "start": "2098980",
    "end": "2106330"
  },
  {
    "text": "reallocation you can see that my email address has been updated to the one that I just proved ownership of and then",
    "start": "2106330",
    "end": "2112510"
  },
  {
    "text": "after killing my session and enabling my browser proxy I can reallocate which inserts the comment in the appropriate",
    "start": "2112510",
    "end": "2119020"
  },
  {
    "text": "location this new address and allows me to target jano a duo calm so just as I demonstrated",
    "start": "2119020",
    "end": "2133050"
  },
  {
    "text": "mutable identity is a great pairing with a service provider that's one herbal to the common truncation bug but in some",
    "start": "2133050",
    "end": "2140310"
  },
  {
    "text": "cases mutable identity could just be a vulnerability on its own what if I could",
    "start": "2140310",
    "end": "2145860"
  },
  {
    "text": "just edit my identity to become someone else if my IDP was configured in this",
    "start": "2145860",
    "end": "2151860"
  },
  {
    "text": "way an attacker may not even need a common truncation vulnerability they may just be able to indirectly choose their",
    "start": "2151860",
    "end": "2157350"
  },
  {
    "text": "name ID and so during my research I actually found a fairly straightforward path to this behavior and octa so for",
    "start": "2157350",
    "end": "2165750"
  },
  {
    "text": "context octa is an identity service that provides users with an esse so experience similar to what I described",
    "start": "2165750",
    "end": "2171210"
  },
  {
    "text": "with LastPass the path towards choose your own identity for users just required the usage of three features the",
    "start": "2171210",
    "end": "2180120"
  },
  {
    "start": "2179000",
    "end": "2203000"
  },
  {
    "text": "first feature was that octa allows a service provider to use a programmable identity so instead of configuring each",
    "start": "2180120",
    "end": "2186210"
  },
  {
    "text": "user's identity on a case-by-case basis you could use their expression language to provision identities under a common",
    "start": "2186210",
    "end": "2192600"
  },
  {
    "text": "format so if your organization uses a standard username format like first name dot last name",
    "start": "2192600",
    "end": "2198930"
  },
  {
    "text": "this makes provisioning accounts much easier octa also gives users edible",
    "start": "2198930",
    "end": "2205770"
  },
  {
    "text": "account information once they're authenticated to their IDP some of this account information was by default",
    "start": "2205770",
    "end": "2211050"
  },
  {
    "text": "writable by a user at the time of this research so for example a user could update values such as their first name",
    "start": "2211050",
    "end": "2217950"
  },
  {
    "text": "their last name or email and ultimately octa would end up using these editable values for previously mentioned",
    "start": "2217950",
    "end": "2223860"
  },
  {
    "text": "programmable identity so at first glance this seems like it's a fairly",
    "start": "2223860",
    "end": "2230640"
  },
  {
    "text": "straightforward path because a user could update their profile information which then gets used to an SSO gets used",
    "start": "2230640",
    "end": "2238830"
  },
  {
    "text": "as their sam'l name ID so for example if I use my first name and last name for",
    "start": "2238830",
    "end": "2244830"
  },
  {
    "text": "identity in the SSO context I could just change my first name and last name using the account update profile functionality",
    "start": "2244830",
    "end": "2251770"
  },
  {
    "text": "but there was actually one more trick to making this work it wasn't that straightforward",
    "start": "2251770",
    "end": "2256880"
  },
  {
    "start": "2254000",
    "end": "2322000"
  },
  {
    "text": "octa didn't actually provision these programmable identities on a per authentication basis so if you were",
    "start": "2256880",
    "end": "2263510"
  },
  {
    "text": "previously provisioned in the account and you updated your profile your identity wouldn't change on that off",
    "start": "2263510",
    "end": "2269240"
  },
  {
    "text": "next authentication like you've experienced with LastPass however there was a third feature that made this",
    "start": "2269240",
    "end": "2275990"
  },
  {
    "text": "vulnerability possible which was a self-service application portal for users and what this feature would allow",
    "start": "2275990",
    "end": "2281750"
  },
  {
    "text": "is directory administrators could allow their users to opt into or opt out of",
    "start": "2281750",
    "end": "2286970"
  },
  {
    "text": "applications that they have access to so this could for example be used to clean",
    "start": "2286970",
    "end": "2293210"
  },
  {
    "text": "up a user's UI if they have access to multiple applications but only end up using a few this feature was not enabled",
    "start": "2293210",
    "end": "2300380"
  },
  {
    "text": "by default at the time of the research but if this was enabled and used with programmable identities a user could use",
    "start": "2300380",
    "end": "2306770"
  },
  {
    "text": "it to D provision their their application and then reprovision themselves from an application which",
    "start": "2306770",
    "end": "2313640"
  },
  {
    "text": "would cause their identity to be a count to be reprovision and they would have complete control over their sam'l name",
    "start": "2313640",
    "end": "2320060"
  },
  {
    "text": "ID used in SSO so identifying our exploiting this issue would have gone",
    "start": "2320060",
    "end": "2325580"
  },
  {
    "start": "2322000",
    "end": "2425000"
  },
  {
    "text": "through these high-level steps so you just update your profile information and deprovision yourself from a target",
    "start": "2325580",
    "end": "2331760"
  },
  {
    "text": "service provider and after reprovision a and using the self-service application management portal you could reallocate",
    "start": "2331760",
    "end": "2338240"
  },
  {
    "text": "and expect and inspect the sam'l document that was issued if it had not changed you could try again with another",
    "start": "2338240",
    "end": "2344510"
  },
  {
    "text": "application if your identity had changed you can use the same set of steps to",
    "start": "2344510",
    "end": "2349520"
  },
  {
    "text": "target any user that you want it does depend on a bit on how these usernames",
    "start": "2349520",
    "end": "2355520"
  },
  {
    "text": "were programmed but in some cases you may not even need a comment truncation vulnerability at all so if you were a",
    "start": "2355520",
    "end": "2364460"
  },
  {
    "text": "user of Octus dynamic expressions and our user expressions and you wanted to remediate this you could do so by either",
    "start": "2364460",
    "end": "2371869"
  },
  {
    "text": "avoiding programmable identities or disappointing them with writable user attributes octave remediation plan for",
    "start": "2371869",
    "end": "2379190"
  },
  {
    "text": "this issue when I first reported it was to mark some of these profile attributes",
    "start": "2379190",
    "end": "2384560"
  },
  {
    "text": "that I mentioned is read only by default for new organizations at the time there were no",
    "start": "2384560",
    "end": "2390170"
  },
  {
    "text": "stated plans to change existing organizations but prior to this presentation octave did state that they",
    "start": "2390170",
    "end": "2396290"
  },
  {
    "text": "worked with customers to disable mutable user attributes and existing orgs but I don't have timelines or contexts on the",
    "start": "2396290",
    "end": "2403190"
  },
  {
    "text": "scope of that so if you use these features it probably wouldn't hurt to spot-check your configuration and it's",
    "start": "2403190",
    "end": "2409340"
  },
  {
    "text": "worth noting that in general it's still possible to configure an application in this way but the changes that octave",
    "start": "2409340",
    "end": "2415099"
  },
  {
    "text": "made for new organizations made this foot gun a lot easier to avoid or I'm a",
    "start": "2415099",
    "end": "2421190"
  },
  {
    "text": "lot more difficult to stumble across by accident so to wrap things up so I hope",
    "start": "2421190",
    "end": "2428270"
  },
  {
    "start": "2425000",
    "end": "2446000"
  },
  {
    "text": "this talk demonstrates that even old and frequently used systems may have some interesting vulnerability classes lying",
    "start": "2428270",
    "end": "2433760"
  },
  {
    "text": "dormant underneath piles of complexity and I'd also like to emphasize that we could only look at so many systems and I",
    "start": "2433760",
    "end": "2440540"
  },
  {
    "text": "hope this talk inspires some a few folks to go out and look at their own SSO set up and see what they can find and then",
    "start": "2440540",
    "end": "2447410"
  },
  {
    "start": "2446000",
    "end": "2465000"
  },
  {
    "text": "finally I'd like to give a shout out to cert CC and duo for supporting this research and the coordinated disclosure as well as big thanks to any vendors who",
    "start": "2447410",
    "end": "2455089"
  },
  {
    "text": "provided patchers to their users and with that thank you all as well for coming",
    "start": "2455089",
    "end": "2461050"
  },
  {
    "text": "you",
    "start": "2463720",
    "end": "2465780"
  }
]