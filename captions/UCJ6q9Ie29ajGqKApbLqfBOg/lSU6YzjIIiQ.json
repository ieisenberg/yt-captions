[
  {
    "start": "0",
    "end": "33000"
  },
  {
    "text": "okay uh thank you very much for coming uh this uh presentation is drama how your Dam becomes a security problem it's",
    "start": "400",
    "end": "8120"
  },
  {
    "text": "a particular pleasure for me to be here today with Michael uh Michael and I did concurrent research meaning that we're",
    "start": "8120",
    "end": "13519"
  },
  {
    "text": "actually competitors rather than Cooperators and it's a bit weird standing here as an old hacker tied for",
    "start": "13519",
    "end": "19080"
  },
  {
    "text": "lack of a better word and be here with a young academic like Michael uh but I think it's a great thing we have",
    "start": "19080",
    "end": "24720"
  },
  {
    "text": "sufficient mutual respect for each other that we can do this presentation together well anyways let's go on with",
    "start": "24720",
    "end": "30119"
  },
  {
    "text": "the technical stuff uh this talk is about how leaks information across security",
    "start": "30119",
    "end": "36200"
  },
  {
    "start": "33000",
    "end": "33000"
  },
  {
    "text": "boundaries uh what is not about is software it's often perceived that if we fix all the software box that we will",
    "start": "36200",
    "end": "42680"
  },
  {
    "text": "have safe Computing however if the underlying Hardware is not inherently safe then we have an insecurity problem",
    "start": "42680",
    "end": "50000"
  },
  {
    "text": "um so we have found what we think is a design problem with Dam and we can use that as an attack Victor uh the word",
    "start": "50000",
    "end": "57480"
  },
  {
    "text": "design is chosen with intent here uh it's not a bug it's not like rammer where you have a reliability problem in",
    "start": "57480",
    "end": "64158"
  },
  {
    "text": "the production of dam it is very much to the way that Dam Works instead so we",
    "start": "64159",
    "end": "70280"
  },
  {
    "text": "will be focused on an Intel x86 64 um the problem that we identified is in Dam",
    "start": "70280",
    "end": "76040"
  },
  {
    "text": "meaning that it applies to other platform as well so you should just keep that in mind going through this",
    "start": "76040",
    "end": "83240"
  },
  {
    "start": "83000",
    "end": "83000"
  },
  {
    "text": "talk so the takeaways that we want you to have when you go is that D design is security relevant uh it's specifically",
    "start": "83240",
    "end": "90520"
  },
  {
    "text": "that Dam leaks information uh we can use this information to extract information",
    "start": "90520",
    "end": "95600"
  },
  {
    "text": "cross VM cross CPU we can spy another software and we can use the information",
    "start": "95600",
    "end": "101399"
  },
  {
    "text": "that Dam leaks to enable efficient and targeted row Hammer attacks um so we're going to start right",
    "start": "101399",
    "end": "109040"
  },
  {
    "text": "off with a demo and for the demo uh we're going to need a random number between 100 and a thousand so if",
    "start": "109040",
    "end": "116680"
  },
  {
    "text": "anybody who has a random number just scream it out otherwise take the last digits off your credit card and and",
    "start": "116680",
    "end": "121960"
  },
  {
    "text": "Shout them out 914 9146 uh we should to demo please yeah",
    "start": "121960",
    "end": "129759"
  },
  {
    "text": "it's switched so what we can see here now is we have a virtual machine on the right",
    "start": "129759",
    "end": "135959"
  },
  {
    "text": "side uh running a normal Linux operating system with a shell in here and I can",
    "start": "135959",
    "end": "141800"
  },
  {
    "text": "show you we don't have any access to the internet we only have the loop adapter no internet connection on the left side",
    "start": "141800",
    "end": "148599"
  },
  {
    "text": "we have a Firefox running on our host system and that is of course connected to the internet and our goal is to",
    "start": "148599",
    "end": "156280"
  },
  {
    "text": "extract information from the virtual machine and send it to the browser so we can get it to the",
    "start": "156280",
    "end": "161720"
  },
  {
    "text": "internet and during I doed the JavaScript in the",
    "start": "161720",
    "end": "168080"
  },
  {
    "text": "browser did some stuff on dram found vulnerable pages and then now I should be able now",
    "start": "168080",
    "end": "175800"
  },
  {
    "text": "I did the same in the virtual machine uh they have now a channel open and and I should be able to get information out of",
    "start": "175800",
    "end": "181720"
  },
  {
    "text": "the virtual machine to the browser so the number was 914",
    "start": "181720",
    "end": "186959"
  },
  {
    "text": "right so transmit the nine",
    "start": "186959",
    "end": "194040"
  },
  {
    "text": "one it's not the fastest but it should be quite reliable and we can really see",
    "start": "194040",
    "end": "199799"
  },
  {
    "text": "I type in the virtual machine and get the numbers out of the out of the virtual machine without any connection",
    "start": "199799",
    "end": "206239"
  },
  {
    "text": "between the virtual machine and the host system on on the outside and your credit",
    "start": "206239",
    "end": "211680"
  },
  {
    "text": "card number or whatever this was your CC I don't know is now on the",
    "start": "211680",
    "end": "217799"
  },
  {
    "text": "internet good so switch switch back to the",
    "start": "217799",
    "end": "225200"
  },
  {
    "text": "slides can we switch back to the slides yeah",
    "start": "225200",
    "end": "231239"
  },
  {
    "text": "perfect so what did you see here there were no software bux we use zero software box for this uh demo and we had",
    "start": "231239",
    "end": "238239"
  },
  {
    "text": "a real covered communication from the virtual machine to the internet uh and we just had a JavaScript running on the",
    "start": "238239",
    "end": "244680"
  },
  {
    "text": "host system no binary on the host system and this isn't Magic and in the remaining talk we are going to present",
    "start": "244680",
    "end": "251280"
  },
  {
    "text": "all the backgrounds and what exactly we did here to make that work but first who are we my name is",
    "start": "251280",
    "end": "259720"
  },
  {
    "text": "Michael Schwarz I a student a PhD student at CS University of Technology",
    "start": "259720",
    "end": "265280"
  },
  {
    "text": "uh you can find me on Twitter you can write me an email you can come to me after afterwards so that we can if you",
    "start": "265280",
    "end": "271000"
  },
  {
    "text": "have any questions want to talk and I'm part of a research team at GS University",
    "start": "271000",
    "end": "277039"
  },
  {
    "text": "of Technology uh consisting of PETA Bessel Daniel go Clementine Maurice and",
    "start": "277039",
    "end": "282600"
  },
  {
    "text": "Stefan mangard and together we did a lot of research on this DM stuff and also",
    "start": "282600",
    "end": "287880"
  },
  {
    "text": "published a paper for the first part of this the all the backgrounds at the usn",
    "start": "287880",
    "end": "292919"
  },
  {
    "text": "security conference in August and this talk is then the extension of this paper",
    "start": "292919",
    "end": "298400"
  },
  {
    "text": "with all a new cool features we have here so my name is Anders F I'm a",
    "start": "298400",
    "end": "304960"
  },
  {
    "text": "principal security researcher with G data Advanced analytics and you can re me reach me on Twitter and by email as",
    "start": "304960",
    "end": "312759"
  },
  {
    "text": "well um so usually we want to leak Secrets uh there's no no nothing funny",
    "start": "312759",
    "end": "319280"
  },
  {
    "text": "in leaking stuff that isn't secret and secrets are usually managed by software and computers um so we need to find out",
    "start": "319280",
    "end": "326880"
  },
  {
    "text": "how we go from software to Dam and here our software is symbolized with a move",
    "start": "326880",
    "end": "332520"
  },
  {
    "start": "328000",
    "end": "328000"
  },
  {
    "text": "instruction x86 instruction and Dam is symbolized by a capacitor if you're",
    "start": "332520",
    "end": "338319"
  },
  {
    "text": "asking yourself why a capacitor well Dam stores data in capacitors there's a",
    "start": "338319",
    "end": "343960"
  },
  {
    "text": "capacitor for each bit if the capacitor is charged the bit is one if it's discharged it's zero so we need to find",
    "start": "343960",
    "end": "350720"
  },
  {
    "text": "out how we get from this m instruction to these capacitors and the first thing that",
    "start": "350720",
    "end": "356360"
  },
  {
    "text": "happens when we run this m instruction is that",
    "start": "356360",
    "end": "361440"
  },
  {
    "text": "we discovered that the 4141 in the last slide is a virtual address of the current process however the CPU needs a",
    "start": "361440",
    "end": "368199"
  },
  {
    "text": "physical address to talk to DRM and consequently we need to do a bit of translation um so why do we need to do",
    "start": "368199",
    "end": "375400"
  },
  {
    "start": "374000",
    "end": "374000"
  },
  {
    "text": "translation well back in the late ' 80s early 90s indel decided it was a wonderful idea if we could run more than",
    "start": "375400",
    "end": "381479"
  },
  {
    "text": "one process securely on a single CPU and the way they implemented this would was that they gave each",
    "start": "381479",
    "end": "387800"
  },
  {
    "text": "application its own private ver virtual address space and then have a mapping",
    "start": "387800",
    "end": "393000"
  },
  {
    "text": "for each process to from virtual memory to physical memory the exchangeability is that each process has its own that is",
    "start": "393000",
    "end": "400120"
  },
  {
    "text": "when the operating system a kernel swaps process it will just swap the mapping and everything will work fine U this",
    "start": "400120",
    "end": "406120"
  },
  {
    "text": "also create creates a choke point where every memory instruction has to go through and this choke point can be used",
    "start": "406120",
    "end": "412000"
  },
  {
    "text": "for checking privileges on memory access and this is what is happening uh the operating system uh usually takes care",
    "start": "412000",
    "end": "418879"
  },
  {
    "text": "of these tables uh and if you have a hypervisor on your system it has a second goal on the",
    "start": "418879",
    "end": "424120"
  },
  {
    "text": "memory accesses uh what actually happens looks something like this in the upper left",
    "start": "424120",
    "end": "431120"
  },
  {
    "start": "426000",
    "end": "426000"
  },
  {
    "text": "corner you have the the3 register uh this is where the exchangeability comes in the operating system uses this",
    "start": "431120",
    "end": "438080"
  },
  {
    "text": "register to swap table every time it swaps process uh down below you have the virtual address and you see the",
    "start": "438080",
    "end": "444879"
  },
  {
    "text": "uppermost bits are going into this fall level translation table",
    "start": "444879",
    "end": "450520"
  },
  {
    "text": "called the page tables um only the upper bits are actually used to translate something so usually we translate to 4",
    "start": "450520",
    "end": "457080"
  },
  {
    "text": "kilobytes the rest of the bits are taken once to directly from the virtual address and added to the physical",
    "start": "457080",
    "end": "463080"
  },
  {
    "text": "address so we're doing translation on a page level and pages are almost always 4",
    "start": "463080",
    "end": "468159"
  },
  {
    "text": "kilobyte large there are exceptions but almost always uh that is of course a bit quick",
    "start": "468159",
    "end": "474199"
  },
  {
    "text": "for you me to summarize the paging operation of modern CPUs in operating systems uh so we have a summary slide",
    "start": "474199",
    "end": "481000"
  },
  {
    "start": "480000",
    "end": "480000"
  },
  {
    "text": "here of what is important for you to remember um well what is important is the most significant bit of the virtual",
    "start": "481000",
    "end": "487039"
  },
  {
    "text": "address determines the page the page is almost 4 kiloby large and the least",
    "start": "487039",
    "end": "492240"
  },
  {
    "text": "significant bits almost always 12 of them is the offset into the page only the page is translated and",
    "start": "492240",
    "end": "499879"
  },
  {
    "text": "thus security checked um so these are the facts that are going to turn into a violation of an",
    "start": "499879",
    "end": "507159"
  },
  {
    "text": "assumption later on um so should be mentioned that these page tables this is",
    "start": "507159",
    "end": "513360"
  },
  {
    "text": "the entire Security check there is for memory on the x86 meaning that Beyond this point the CPU will think that",
    "start": "513360",
    "end": "520880"
  },
  {
    "text": "everything is good and dandy there will be no more Security checks um once we clear the page tables",
    "start": "520880",
    "end": "528920"
  },
  {
    "text": "and security check we run into the data caches the story here is that DRM is",
    "start": "528920",
    "end": "534680"
  },
  {
    "start": "533000",
    "end": "533000"
  },
  {
    "text": "relatively slow to Mutton CPUs and the idea with caches is that you store more frequently used memory for the CPU U and",
    "start": "534680",
    "end": "544240"
  },
  {
    "text": "have every memory reference go through it the cers are so built that they are transparent to the operating systems and",
    "start": "544240",
    "end": "550200"
  },
  {
    "text": "to programs and to hyp devices and everything else uh we here as attackers have a problem with cashes that is we",
    "start": "550200",
    "end": "556600"
  },
  {
    "text": "want to talk to D because that that's where we have our problem um so we need",
    "start": "556600",
    "end": "561920"
  },
  {
    "text": "to bypass them we need to bypass this roadblock and we can do this in two ways",
    "start": "561920",
    "end": "567320"
  },
  {
    "start": "564000",
    "end": "564000"
  },
  {
    "text": "the easy way is that inel provide unprivileged instruction actually there's two of them uh seal flush and",
    "start": "567320",
    "end": "573600"
  },
  {
    "text": "seal floss up unprivileged uh for cast maintenance by applications we can use that to bypass the cache uh you saw",
    "start": "573600",
    "end": "581079"
  },
  {
    "text": "JavaScript and in JavaScript we don't have access to any special instructions like the seal flush instructions so we",
    "start": "581079",
    "end": "586279"
  },
  {
    "text": "need to use a technique called evict uh there is a paper by G Maurice and",
    "start": "586279",
    "end": "592120"
  },
  {
    "text": "mangard on the subject called roh hammerjs that describes how we can evict stuff from the cach and thus bypass it",
    "start": "592120",
    "end": "599760"
  },
  {
    "text": "uh we'll leave it at that there um once we have passed the data caches we arrive",
    "start": "599760",
    "end": "606440"
  },
  {
    "text": "in the memory controller uh the memory controller does a lot of stuff but the thing we're interested in here is it has",
    "start": "606440",
    "end": "613079"
  },
  {
    "start": "611000",
    "end": "611000"
  },
  {
    "text": "a mapping function this is where the physical addresses is taken as input and",
    "start": "613079",
    "end": "618519"
  },
  {
    "text": "through the map the capacitor that stes the data we want to read is found which",
    "start": "618519",
    "end": "623839"
  },
  {
    "text": "will take us to how is dram actually organized uh so you have an idea how",
    "start": "623839",
    "end": "629079"
  },
  {
    "text": "this map is used um what you see here is a dim this is what you buy if you go to",
    "start": "629079",
    "end": "636000"
  },
  {
    "text": "a store and buy DM um and you can have one or more dim in your",
    "start": "636000",
    "end": "642360"
  },
  {
    "text": "computer and they are connected to the CPU through channels and each of the dim has a front",
    "start": "642360",
    "end": "649839"
  },
  {
    "text": "side and a back side and these are called ranks and on the ranks we have a",
    "start": "649839",
    "end": "655240"
  },
  {
    "text": "number of chips and if we open up the chips we'll see we have a number of banks inside each of these Bank have a",
    "start": "655240",
    "end": "663040"
  },
  {
    "start": "658000",
    "end": "658000"
  },
  {
    "text": "row buffer we're going to be talking a lot about the row buffer in a moment for now we'll just have a look what's inside",
    "start": "663040",
    "end": "668519"
  },
  {
    "text": "one of these 30,000 32,000 rows of the bank and you probably guessed this is",
    "start": "668519",
    "end": "675680"
  },
  {
    "text": "where we have our capacitors the capacitors are part of a cell and a cell consists of a capacitor and a transistor",
    "start": "675680",
    "end": "681959"
  },
  {
    "text": "each this means that each bid takes only two electronic components to be stored the capacitor is there for control so",
    "start": "681959",
    "end": "688680"
  },
  {
    "text": "that we actually get a chance to read and write the bit um now here so that we don't bore",
    "start": "688680",
    "end": "695040"
  },
  {
    "start": "692000",
    "end": "692000"
  },
  {
    "text": "you too long before it gets security related uh this is the first end of trouble a row is 64,000 cells meaning",
    "start": "695040",
    "end": "702480"
  },
  {
    "text": "it's 8 kiloby large and security was checked for 4 kilobyte blocks so we have",
    "start": "702480",
    "end": "708880"
  },
  {
    "text": "here first hint of trouble this means that security domains may end up sharing",
    "start": "708880",
    "end": "714680"
  },
  {
    "text": "rows uh we're going to talk a lot about this we just didn't want to bore you um",
    "start": "714680",
    "end": "720079"
  },
  {
    "text": "so we're going to talk about how Damm actually works how you read from Damm and internally dramm is only",
    "start": "720079",
    "end": "727639"
  },
  {
    "text": "capable of reading entire rows this is a design decision uh so that you can",
    "start": "727639",
    "end": "732920"
  },
  {
    "text": "maintain only two um components for storing a bit meaning that the entire",
    "start": "732920",
    "end": "738760"
  },
  {
    "start": "738000",
    "end": "738000"
  },
  {
    "text": "overhead are for a very large number of bits so internally it can only read",
    "start": "738760",
    "end": "744760"
  },
  {
    "text": "entire rows um also capacity and sells",
    "start": "744760",
    "end": "750040"
  },
  {
    "text": "discharge when you read the bits what I mean by that is if you take a capacitor and put a voltmeter on it if the",
    "start": "750040",
    "end": "756160"
  },
  {
    "text": "capacitor is charged you'll see a short spike and you'll never see anything again so reading Dam actually destroys",
    "start": "756160",
    "end": "762160"
  },
  {
    "text": "the the content of the cells and the solution is of course weere the bits out",
    "start": "762160",
    "end": "767959"
  },
  {
    "text": "put them in a buffer and write them back when you're done and this is the row buffer this is why we have it here so",
    "start": "767959",
    "end": "777120"
  },
  {
    "start": "776000",
    "end": "776000"
  },
  {
    "text": "say the CPU wants to reach something in the yellow row here um that is the first row and the row offer is empty so the",
    "start": "777120",
    "end": "785040"
  },
  {
    "text": "CPU um tells us we need something from this row and then we activate it activating has is nothing more than",
    "start": "785040",
    "end": "792199"
  },
  {
    "text": "essentially copying the row to the row buffer nothing more just copy it to the row buffer and then we can extract the",
    "start": "792199",
    "end": "799000"
  },
  {
    "text": "bits that we needed from the row and return it to the CPU um so now it becomes funny if the",
    "start": "799000",
    "end": "805800"
  },
  {
    "text": "CPU immediately afterwards decides it needs to read some stop from the same row again maybe some other stuff in the",
    "start": "805800",
    "end": "811560"
  },
  {
    "text": "row well now the row buffer is already full and the CPU can get it directly",
    "start": "811560",
    "end": "817160"
  },
  {
    "text": "from here this is sounds like it's less work and the question is is it faster in fact this very question was what got me",
    "start": "817160",
    "end": "824320"
  },
  {
    "text": "into researching this stuff so what we did was we measured the latency of row hits that is when the",
    "start": "824320",
    "end": "832480"
  },
  {
    "start": "829000",
    "end": "829000"
  },
  {
    "text": "information that we are trying to read is already in the row buffer and we got this nice graph and",
    "start": "832480",
    "end": "839639"
  },
  {
    "text": "then we measured the latency of reading from memory when there's a row conflict or row miss that is when the data we're",
    "start": "839639",
    "end": "846759"
  },
  {
    "text": "reading is not in the row buffer it it has to activate the row before and if we put the these two together we can see",
    "start": "846759",
    "end": "853920"
  },
  {
    "text": "that there is a very nice threshold that half of them the green the the row hits",
    "start": "853920",
    "end": "859079"
  },
  {
    "text": "is almost always faster than the row misses meaning we're able to distinguish",
    "start": "859079",
    "end": "864680"
  },
  {
    "text": "uh from outside if a row was in the row buffer or not",
    "start": "864680",
    "end": "870360"
  },
  {
    "start": "870000",
    "end": "870000"
  },
  {
    "text": "so we can just summarize everything up to here security is typically checked for 4 kiloby",
    "start": "870360",
    "end": "875920"
  },
  {
    "text": "Pages um we can bypass the data caches uh to read from dram uh pages of",
    "start": "875920",
    "end": "882360"
  },
  {
    "text": "different security domains can share our banks pages of different security domains can share",
    "start": "882360",
    "end": "888160"
  },
  {
    "text": "rows and through timing we can establish row hits and misses across security boundaries and the total result is Dam",
    "start": "888160",
    "end": "895920"
  },
  {
    "text": "leaks information so now that we have a background on the",
    "start": "895920",
    "end": "902160"
  },
  {
    "text": "dram and we know how the dram is organized uh we can do our first attack",
    "start": "902160",
    "end": "907279"
  },
  {
    "text": "and do a reverse engineering of the CPU so you remember this slide we had that a",
    "start": "907279",
    "end": "912959"
  },
  {
    "start": "910000",
    "end": "910000"
  },
  {
    "text": "few minutes ago in the background that's the mapping function of the memory controller so if you have data that has",
    "start": "912959",
    "end": "920519"
  },
  {
    "text": "a virtual address and then it translates to the physical address the physic address gets to the memory controller",
    "start": "920519",
    "end": "926560"
  },
  {
    "text": "and the memory controller then uses a function to decide where in which location of the dim the data is actually",
    "start": "926560",
    "end": "933240"
  },
  {
    "text": "stored this is this mapping function so this is a mapping function of uh Sky",
    "start": "933240",
    "end": "939000"
  },
  {
    "text": "computer here and the problem is we don't know this",
    "start": "939000",
    "end": "944959"
  },
  {
    "text": "mapping function so this is not documented this is a secret Intel keeps it secret they don't want anyone to know",
    "start": "944959",
    "end": "950480"
  },
  {
    "text": "this mapping function uh but we are really interested in this mapping function so we really want to know if we",
    "start": "950480",
    "end": "956480"
  },
  {
    "text": "have a physical address where is this data stored in the actual DRM in which",
    "start": "956480",
    "end": "961800"
  },
  {
    "text": "uh Bank in which channel in which rank uh in which chip we we really want to know this and that's why we need the",
    "start": "961800",
    "end": "968120"
  },
  {
    "text": "mapping function and as it is undocumented we have to reverse engineer it and we want to do it only in software",
    "start": "968120",
    "end": "977279"
  },
  {
    "text": "so we could do that with Hardware measurements but we wanted to do it in software and we already know we have",
    "start": "977279",
    "end": "982959"
  },
  {
    "text": "timing differences so we want to exploit those timing differences to really reverse engineer the Ming function from",
    "start": "982959",
    "end": "989480"
  },
  {
    "text": "the timing differences only and here's an animation about our",
    "start": "989480",
    "end": "995399"
  },
  {
    "start": "991000",
    "end": "991000"
  },
  {
    "text": "approach so what we actually do so you can see here a dim and it has the chips on it and we",
    "start": "995399",
    "end": "1003240"
  },
  {
    "text": "call each chip a bank and then we see that this numbered rectangles in in there that are the rows of the of of the",
    "start": "1003240",
    "end": "1011319"
  },
  {
    "text": "banks in the dam and then we just start with one random address we just take one",
    "start": "1011319",
    "end": "1018160"
  },
  {
    "text": "completely random address and this address will be somewhere in the dram and it will be in One Bank we don't know",
    "start": "1018160",
    "end": "1024319"
  },
  {
    "text": "which bank but it will be in some bank and then we select more random",
    "start": "1024319",
    "end": "1029640"
  },
  {
    "text": "addresses so this the first one is our Base address and then we select more random addresses and then we Hammer",
    "start": "1029640",
    "end": "1035918"
  },
  {
    "text": "these addresses so we access the Base address and the other address and then again the Base address the other other",
    "start": "1035919",
    "end": "1042438"
  },
  {
    "text": "address and so on and we measure the timing it takes to hammer those addresses and if they are in different",
    "start": "1042439",
    "end": "1050280"
  },
  {
    "text": "uh Banks then that's quite fast because they don't influence the Rob buffer they each have their own Rob buffer it can be",
    "start": "1050280",
    "end": "1057400"
  },
  {
    "text": "served in parallel so we see fast timings if we uh choose random addresses",
    "start": "1057400",
    "end": "1063240"
  },
  {
    "text": "that are not in the same bank and if we find an address that maps to the same bank in the dim then the",
    "start": "1063240",
    "end": "1071440"
  },
  {
    "text": "timing is worse so it's it's much slower because now we have two addresses in the",
    "start": "1071440",
    "end": "1077120"
  },
  {
    "text": "same bank but in different rows and that means it always has to overwrite the row buffer you remember",
    "start": "1077120",
    "end": "1083200"
  },
  {
    "text": "the row buffer from before if I access the the first address it gets copied to the row buffer if I access the second",
    "start": "1083200",
    "end": "1089360"
  },
  {
    "text": "address it has to be copied over the row buffer so that will be slower and then",
    "start": "1089360",
    "end": "1095600"
  },
  {
    "text": "we can see if addresses map to the same bank or if they don't map to the same bank and then we choose another random",
    "start": "1095600",
    "end": "1103799"
  },
  {
    "text": "Base address and do this again over and over and we again see addresses that map",
    "start": "1103799",
    "end": "1109559"
  },
  {
    "text": "to the same bank have high timing different banks low timings and we can do that for all the",
    "start": "1109559",
    "end": "1117080"
  },
  {
    "text": "banks we have in the dram we choose random base addresses from every bank and then find addresses that map to the",
    "start": "1117080",
    "end": "1123679"
  },
  {
    "text": "same bank using those timing differences and then we have for each",
    "start": "1123679",
    "end": "1128880"
  },
  {
    "text": "Bank a set of addresses that map there and we can see that as a linear equation",
    "start": "1128880",
    "end": "1135039"
  },
  {
    "text": "system so we have the physical address as the the efficients and we have the",
    "start": "1135039",
    "end": "1140720"
  },
  {
    "text": "bank number as the right side of the equation and then we have a few equations and a few coefficients and we",
    "start": "1140720",
    "end": "1147280"
  },
  {
    "text": "could solve that and if we solve that we get the mapping functions but as we were a bit lazy when",
    "start": "1147280",
    "end": "1154559"
  },
  {
    "text": "doing that uh we didn't want to write an equation solver so we do did root force",
    "start": "1154559",
    "end": "1160360"
  },
  {
    "text": "and that makes my sound slow but it was really fast so brute forcing the",
    "start": "1160360",
    "end": "1165480"
  },
  {
    "text": "equation system you only have zeros and or ones is coefficients and you only have up to 30",
    "start": "1165480",
    "end": "1171400"
  },
  {
    "text": "coefficients that's very fast so it was in the order of seconds to minutes depending on the computer the fastest",
    "start": "1171400",
    "end": "1178240"
  },
  {
    "text": "result for example on this computer was 6 seconds from starting the measurement",
    "start": "1178240",
    "end": "1183480"
  },
  {
    "text": "until having the mapping function and the slow part was the measurement so",
    "start": "1183480",
    "end": "1189400"
  },
  {
    "text": "root forcing the equation system took a fraction of a",
    "start": "1189400",
    "end": "1194440"
  },
  {
    "text": "second and we de uh we developed the toolkit that does that fully automated",
    "start": "1194440",
    "end": "1200799"
  },
  {
    "text": "so we wanted to have that on a lot of computers so we did an fully automated",
    "start": "1200799",
    "end": "1205960"
  },
  {
    "text": "toolkit to reverse engineer the mapping and that's really fast depending",
    "start": "1205960",
    "end": "1211520"
  },
  {
    "text": "on how much memory you have between seconds and minutes uh we open source",
    "start": "1211520",
    "end": "1216679"
  },
  {
    "text": "that tool so it's available on GitHub and you can just right now pull the",
    "start": "1216679",
    "end": "1222679"
  },
  {
    "text": "repository compile a program running on your computer and hopefully until the",
    "start": "1222679",
    "end": "1228159"
  },
  {
    "text": "end of the you will have the M mapping function and you can compare to the ones we have in our paper and we did it for a",
    "start": "1228159",
    "end": "1235280"
  },
  {
    "text": "few machines so if you have the same machine you will hopefully get the same mapping function for new machines you",
    "start": "1235280",
    "end": "1241600"
  },
  {
    "text": "get new mapping functions so you can really try that out you don't have to do anything just start a program and",
    "start": "1241600",
    "end": "1248760"
  },
  {
    "text": "wait so what we now have is a toolkit that gives us the mapping function for",
    "start": "1249240",
    "end": "1255200"
  },
  {
    "text": "every computer and we know which physic address maps to which part of the",
    "start": "1255200",
    "end": "1261240"
  },
  {
    "text": "dam and we can do that everywhere fully automated and now we want to exploit",
    "start": "1261240",
    "end": "1267360"
  },
  {
    "text": "that knowledge so we have that knowledge now now we want to exploit it with uh some",
    "start": "1267360",
    "end": "1274440"
  },
  {
    "text": "attacks um so the first thing we want to exploit here is we want to spy on other pe",
    "start": "1274880",
    "end": "1281159"
  },
  {
    "text": "people's software uh through the Damm and imagine this function it is",
    "start": "1281159",
    "end": "1287000"
  },
  {
    "start": "1285000",
    "end": "1285000"
  },
  {
    "text": "really an imaginary function it's inspired from a real function that leaks a lot more information than this one does uh imagine you have a scan code",
    "start": "1287000",
    "end": "1294159"
  },
  {
    "text": "from the keyboard coming in if it's upper case it goes into a handle uppercase function if it's lowercase it",
    "start": "1294159",
    "end": "1299440"
  },
  {
    "text": "goes into a handle lowercase function now functions are memory as well meaning",
    "start": "1299440",
    "end": "1305440"
  },
  {
    "text": "that different memory will be touched if the handle uppercase function is called than when the handle lowercase function",
    "start": "1305440",
    "end": "1311720"
  },
  {
    "text": "is called so we're going to see if we can figure out which of these two functions are called and whether your",
    "start": "1311720",
    "end": "1317200"
  },
  {
    "text": "password uses upward cases letters or lowercase levers so here important to remember handle uppercase handle",
    "start": "1317200",
    "end": "1323039"
  },
  {
    "text": "lowercase different memory so we want to spy on the behavior of a victim and the victim actually",
    "start": "1323039",
    "end": "1329840"
  },
  {
    "start": "1325000",
    "end": "1325000"
  },
  {
    "text": "won't know that we're spying on him because he will not be seeing that we're what we're doing in DM his software will run as always and he'll probably be in a",
    "start": "1329840",
    "end": "1336960"
  },
  {
    "text": "different security domain and does have no knowledge about what we're doing um",
    "start": "1336960",
    "end": "1342600"
  },
  {
    "text": "we can use row hits to get useful information about this um this is very very much like cash",
    "start": "1342600",
    "end": "1349240"
  },
  {
    "text": "attacks maybe some of you went to the talk earlier by Clementine Maurice and morit slip about Armageddon cash attacks",
    "start": "1349240",
    "end": "1355840"
  },
  {
    "text": "on um armed computers it works pretty much the same way but it has an advantage over normal cash attacks on",
    "start": "1355840",
    "end": "1362080"
  },
  {
    "text": "ex6 this is that dramm is shared between CPUs on multi-cpu systems so it's really",
    "start": "1362080",
    "end": "1369919"
  },
  {
    "text": "shared across the board meaning to work across CPU as well um so how does it work",
    "start": "1369919",
    "end": "1376400"
  },
  {
    "text": "well we established before you can have shared rows that is because the row is 8",
    "start": "1376400",
    "end": "1382159"
  },
  {
    "text": "kiloby large and the page is 4 kilobyte large and and the operating system maps and",
    "start": "1382159",
    "end": "1388200"
  },
  {
    "text": "pages so how do we go about this well we start out by the Spy picking a random",
    "start": "1388200",
    "end": "1394080"
  },
  {
    "text": "row which he's not really interested in in this case row Sero and he accesses some data in it and it gets copied to",
    "start": "1394080",
    "end": "1401080"
  },
  {
    "text": "the row buffer and the data gets returned from there U the Spy doesn't really care about the data or the actual",
    "start": "1401080",
    "end": "1407880"
  },
  {
    "text": "row he just wants to know the state of the row buffer in this case he had established that the row buffer should",
    "start": "1407880",
    "end": "1413400"
  },
  {
    "text": "be full with his own memory and now he activates the shared",
    "start": "1413400",
    "end": "1419320"
  },
  {
    "text": "row that he shares with the victim this gets copied to the row buffer and returned and since the Spy previously",
    "start": "1419320",
    "end": "1427480"
  },
  {
    "text": "had his own memory in the row buffer from another row it'll take a long time he would expect it to be a high timing",
    "start": "1427480",
    "end": "1433320"
  },
  {
    "text": "have the RO conflict here however what if the victim accessed the share shared row before the Spy",
    "start": "1433320",
    "end": "1441919"
  },
  {
    "text": "activated the shared row well the victim will activate the shared row it will get copied to the row buffer he'll get his",
    "start": "1441919",
    "end": "1448679"
  },
  {
    "text": "data that he wanted and now the Spy activates it but this time it's in the",
    "start": "1448679",
    "end": "1454480"
  },
  {
    "text": "row buffer he will ret retrieve the data fast and he will know that somebody else",
    "start": "1454480",
    "end": "1459880"
  },
  {
    "text": "accessed this row um so imagine if that was handled",
    "start": "1459880",
    "end": "1466559"
  },
  {
    "start": "1463000",
    "end": "1463000"
  },
  {
    "text": "uppercase he will be able to tell that your password has an uppercase letter in it um so this brings us to two important",
    "start": "1466559",
    "end": "1474600"
  },
  {
    "text": "questions that are turns out to be very much related is what is the chance that we share a row with important victim",
    "start": "1474600",
    "end": "1480880"
  },
  {
    "text": "data and the second question is what kind of spatial accuracy do we get uh I",
    "start": "1480880",
    "end": "1486240"
  },
  {
    "text": "have to explain this spatial accuracy uh imagine that handle uppercase and handle",
    "start": "1486240",
    "end": "1491399"
  },
  {
    "text": "lower case are very small function lying directly next to each other that means they would fit in the same page in the",
    "start": "1491399",
    "end": "1497320"
  },
  {
    "text": "same row and would be unable to distinguish between them so the question here is how far do they have to be apart",
    "start": "1497320",
    "end": "1503720"
  },
  {
    "text": "for us to be able to distinguish uppercase and lower case functions in this",
    "start": "1503720",
    "end": "1508880"
  },
  {
    "text": "case and well the smallest unit of your physical memory is one page as I keep on",
    "start": "1508880",
    "end": "1515480"
  },
  {
    "text": "saying it's for 4 kiloby large and rows are still 8 kiloby large and we need the",
    "start": "1515480",
    "end": "1521840"
  },
  {
    "text": "victim's address and our address to be in the same row so you probably thinking",
    "start": "1521840",
    "end": "1527480"
  },
  {
    "text": "well two pages share one row well you're not exactly right either if you think",
    "start": "1527480",
    "end": "1532720"
  },
  {
    "text": "that and why well not the entire physical page must",
    "start": "1532720",
    "end": "1538320"
  },
  {
    "text": "be in the same row and this happens when the mapping function tells the mapping",
    "start": "1538320",
    "end": "1545799"
  },
  {
    "text": "function in the memory controller tells that the page should be distributed over multiple rows and this happens when the",
    "start": "1545799",
    "end": "1552960"
  },
  {
    "text": "lower bits which are not translated 0 to 11 bits are used for this mapping um on",
    "start": "1552960",
    "end": "1559399"
  },
  {
    "text": "skyl for example um there are two there are low bits that are used for selecting",
    "start": "1559399",
    "end": "1564760"
  },
  {
    "text": "the channel and the bank group essentially the bank and thus the",
    "start": "1564760",
    "end": "1570279"
  },
  {
    "text": "physical page gets distributed over four rows um graphically it looks something",
    "start": "1570279",
    "end": "1576600"
  },
  {
    "text": "like this you have on the left side U the page that we're interested in",
    "start": "1576600",
    "end": "1582799"
  },
  {
    "text": "where say where handle uppercases and if we have an address in that uh where the bits so that the bank selection and the",
    "start": "1582799",
    "end": "1590480"
  },
  {
    "text": "channel selection is both zero we will end up in the green uh green row below and if one of",
    "start": "1590480",
    "end": "1598399"
  },
  {
    "text": "the bits here the uh bank group bit is set to one well we'll end up in the blue and so on and so forth uh another way to",
    "start": "1598399",
    "end": "1606480"
  },
  {
    "text": "look at this is um here in our bank here we have a Sandy Bridge with a single dim",
    "start": "1606480",
    "end": "1612520"
  },
  {
    "text": "and the mapping function does not have any bit of the low bits in the lower",
    "start": "1612520",
    "end": "1619039"
  },
  {
    "text": "does not use any of the bits in the lower 11s to map it meaning that we get the case that we have been talking about",
    "start": "1619039",
    "end": "1625080"
  },
  {
    "text": "so far the two pages per row this means we have a spatial accuracy of one page",
    "start": "1625080",
    "end": "1630480"
  },
  {
    "text": "that is 4, 96 bytes and our chance of getting collocated with important victim",
    "start": "1630480",
    "end": "1636360"
  },
  {
    "text": "data is relatively small because we have to get exactly the other color or we",
    "start": "1636360",
    "end": "1641960"
  },
  {
    "text": "don't can't not see anything uh so this doesn't look very promising for spying",
    "start": "1641960",
    "end": "1647919"
  },
  {
    "text": "but turns out that ivy brids with two dim modules have one bit in the lower 11",
    "start": "1647919",
    "end": "1653520"
  },
  {
    "text": "bit turning out to be four pages in a row this means that",
    "start": "1653520",
    "end": "1659159"
  },
  {
    "text": "we now have three colors where we can get our own material in and then we share a row with the victim it also means that the victim the the spatial",
    "start": "1659159",
    "end": "1667320"
  },
  {
    "text": "accuracy is now a half page meaning that we're able to distinguish between handling upper case and lower case if",
    "start": "1667320",
    "end": "1674120"
  },
  {
    "text": "they're only 248 bytes apart and on the latest generation of",
    "start": "1674120",
    "end": "1679559"
  },
  {
    "text": "Intel CPUs it's much much better there are eight pages per Row Two Bits as you saw before u meaning that you have seven",
    "start": "1679559",
    "end": "1686320"
  },
  {
    "text": "colors you can pick to get collocation with the victim and your spatial accuracy is just a quarter of a page and",
    "start": "1686320",
    "end": "1693440"
  },
  {
    "text": "um this sort of looks like a rainbow which is why I call my um skylet computer Rainbow Dash Rainbow Dash is a",
    "start": "1693440",
    "end": "1700640"
  },
  {
    "text": "character in the documentary My Little Pony so in other words we can deduct",
    "start": "1700640",
    "end": "1708120"
  },
  {
    "text": "behavior from memory access much like cast side Channel attacks it works cross VM cross CPU even sandb because",
    "start": "1708120",
    "end": "1715559"
  },
  {
    "text": "everybody does memory accesses there's pretty much no way to avoid memory accesses no matter what kind of",
    "start": "1715559",
    "end": "1721200"
  },
  {
    "text": "execution environment you have um on the latest generation on personal computers we are very likely to be in the same row",
    "start": "1721200",
    "end": "1728000"
  },
  {
    "text": "as secret victim information we have spatial accuracy of 1,24 bytes which is",
    "start": "1728000",
    "end": "1733039"
  },
  {
    "text": "pretty good it does handle uppercase don't have to be a pretty a particularly big function to put push handle",
    "start": "1733039",
    "end": "1738960"
  },
  {
    "text": "lowercase out even if they are located directly beside each other in a code and",
    "start": "1738960",
    "end": "1744720"
  },
  {
    "text": "it gets even better on Multi CPU servers because often you have a third bit in the lower",
    "start": "1744720",
    "end": "1752240"
  },
  {
    "text": "11 um we have been using this to spy on keyboard input uh to Firefox just and",
    "start": "1752240",
    "end": "1757799"
  },
  {
    "text": "doing an example of what we can actually do with this stuff and I'll return it over to Michael here so thank you so",
    "start": "1757799",
    "end": "1764760"
  },
  {
    "text": "spying is is a nice thing but that doesn't explain the demo yet so we have something else we did so",
    "start": "1764760",
    "end": "1771480"
  },
  {
    "text": "another attack and it is a cover channel so DRM cover Channel first of all we",
    "start": "1771480",
    "end": "1777960"
  },
  {
    "text": "have to say Okay what is a cover channel so a cover channel is if you have two",
    "start": "1777960",
    "end": "1783080"
  },
  {
    "text": "programs and they would like to communicate with each other and that sounds pretty normal but in the case of",
    "start": "1783080",
    "end": "1788840"
  },
  {
    "text": "a cover Channel they are not allowed to do so so what does it mean they're not allowed to communicate with each others",
    "start": "1788840",
    "end": "1795640"
  },
  {
    "text": "all the normal channels are either blocked or monitored art so for example if you have two programs and they",
    "start": "1795640",
    "end": "1801200"
  },
  {
    "text": "usually communicate over the Internet or using files or interpress communication",
    "start": "1801200",
    "end": "1806760"
  },
  {
    "text": "shared memory whatsoever that's either not available due to Hardware or software",
    "start": "1806760",
    "end": "1813320"
  },
  {
    "text": "limitations or it is monitored so that means you have a monitoring program running on your computer and if the",
    "start": "1813320",
    "end": "1819200"
  },
  {
    "text": "monitor detects oh these programs I they want to communicate we abort them so",
    "start": "1819200",
    "end": "1824519"
  },
  {
    "text": "there shouldn't be any communication possible so have to exploit some side channels in order to get a communication",
    "start": "1824519",
    "end": "1831159"
  },
  {
    "start": "1831000",
    "end": "1831000"
  },
  {
    "text": "running between those two programs and in our case the side channel is of course the",
    "start": "1831159",
    "end": "1837480"
  },
  {
    "text": "dram so in this animation we have again a dram bank and I'd like to explain what",
    "start": "1837480",
    "end": "1844360"
  },
  {
    "start": "1838000",
    "end": "1838000"
  },
  {
    "text": "the Primitive here is that we can use a communication through the dam without anyone noticing it and if no chance to",
    "start": "1844360",
    "end": "1853080"
  },
  {
    "text": "block that so we have a send and a receiver application and they agree on some Dam",
    "start": "1853080",
    "end": "1859880"
  },
  {
    "text": "bank they can do that beforehand so it can be hardcoded in the application it doesn't matter they can also agree on",
    "start": "1859880",
    "end": "1865799"
  },
  {
    "text": "that um we don't care about how they do it it can just be hardcoded and both the sender and the",
    "start": "1865799",
    "end": "1873440"
  },
  {
    "text": "receiver use one row inside this D bank so use different rows and the receiver",
    "start": "1873440",
    "end": "1880760"
  },
  {
    "text": "does nothing else than just reading its data from one row of the dam bank and",
    "start": "1880760",
    "end": "1887639"
  },
  {
    "text": "there receiver is not interested in the data at all just on in the access times",
    "start": "1887639",
    "end": "1893080"
  },
  {
    "text": "so at the first access this data will be copied to the Rob buffer the timing will be high we ignore the first reading uh",
    "start": "1893080",
    "end": "1900519"
  },
  {
    "text": "but afterwards every time the receiver accesses data which Maps into this Dam row it will always already be in the",
    "start": "1900519",
    "end": "1907840"
  },
  {
    "text": "ruffer so the access is really fast and the receiver sees Fast Access times and",
    "start": "1907840",
    "end": "1914120"
  },
  {
    "text": "knows its data is in the Rob buffer and then the sender can access data in",
    "start": "1914120",
    "end": "1921559"
  },
  {
    "text": "its row so what happens the rows are in the same bank so they have the same row buffer and if the sender accesses data",
    "start": "1921559",
    "end": "1928960"
  },
  {
    "text": "in its Bank it will be copied to a row buffer and the old row buffer is",
    "start": "1928960",
    "end": "1934159"
  },
  {
    "text": "gone so the Senter just accesses this doesn't care about the data it's just",
    "start": "1934159",
    "end": "1939399"
  },
  {
    "text": "interested in setting the row buffer to a defined State and if then the receiver again",
    "start": "1939399",
    "end": "1945360"
  },
  {
    "text": "accesses uh the data in its row it has to be copied to the Rob buffer first because it was overwritten by the Senter",
    "start": "1945360",
    "end": "1952639"
  },
  {
    "text": "and this uh leads to a high access time so the send the receiver sees now it has",
    "start": "1952639",
    "end": "1958360"
  },
  {
    "text": "a high access time so the uh transmitter must have sent something by accessing its",
    "start": "1958360",
    "end": "1964360"
  },
  {
    "start": "1964000",
    "end": "1964000"
  },
  {
    "text": "rope and what is the scenario here so the scenario is we are trapped inside a",
    "start": "1964360",
    "end": "1970279"
  },
  {
    "text": "virtual machine without network access as we have seen it in the demo at the beginning of the talk and there's",
    "start": "1970279",
    "end": "1976399"
  },
  {
    "text": "absolutely no communication between between the guest and the host so imagine you work at a company you get a",
    "start": "1976399",
    "end": "1981880"
  },
  {
    "text": "virtual machine for maware analysis or with sensitive data in there and you really don't want to have data going",
    "start": "1981880",
    "end": "1988840"
  },
  {
    "text": "from the VM to the Internet so you have a isolated virtual machine no communic communication",
    "start": "1988840",
    "end": "1996720"
  },
  {
    "text": "between guest and host and then you have a host system um that is connected to the",
    "start": "1996720",
    "end": "2004320"
  },
  {
    "text": "internet but you're not allowed to run any binaries on on the host system you're not allowed to install software",
    "start": "2004320",
    "end": "2009919"
  },
  {
    "text": "there run something there with just a normal host system that is monitored and then you don't have any",
    "start": "2009919",
    "end": "2017279"
  },
  {
    "text": "software bugs so there are no bugs in the host in the guest or in the virtualization software so absolutely no",
    "start": "2017279",
    "end": "2024720"
  },
  {
    "text": "way to exploit something in software to get data out of the virtual machine and what is the solution here we",
    "start": "2024720",
    "end": "2032720"
  },
  {
    "start": "2030000",
    "end": "2030000"
  },
  {
    "text": "can Implement a cover channel in JavaScript so we have this host system and",
    "start": "2032720",
    "end": "2038399"
  },
  {
    "text": "most of us will have a browser running on the host system if it's connected to the internet and therefore we can also",
    "start": "2038399",
    "end": "2044600"
  },
  {
    "text": "run JavaScript inside the browser which is considered to be safe and we can use the DRM as a side",
    "start": "2044600",
    "end": "2051638"
  },
  {
    "text": "Channel every computer will have DRM in there and the DRM is of course shared",
    "start": "2051639",
    "end": "2057000"
  },
  {
    "text": "between the virtual machine and the host system so we have a side channel here we know the diamond differences um and we",
    "start": "2057000",
    "end": "2064200"
  },
  {
    "text": "have this JavaScript running on the host system inside the browser the only thing we have to do is get the",
    "start": "2064200",
    "end": "2070520"
  },
  {
    "text": "victim to visit our page with this JavaScript so we have also seen that in a demo at the beginning with this",
    "start": "2070520",
    "end": "2077200"
  },
  {
    "text": "Firefox running with the JavaScript on the page and it was the receiver for the",
    "start": "2077200",
    "end": "2083878"
  },
  {
    "text": "information and we use this R Miss uh attack primitive which we showed",
    "start": "2083879",
    "end": "2090398"
  },
  {
    "start": "2084000",
    "end": "2084000"
  },
  {
    "text": "before so the only thing is we have this sender and the receiver agree on a bank",
    "start": "2090399",
    "end": "2095440"
  },
  {
    "text": "at the beginning so this is hardcoded in the application we can choose any of the banks and then inside the VM we have",
    "start": "2095440",
    "end": "2103440"
  },
  {
    "text": "this binary running this mware or whatever that wants to exfiltrate the data from the virtual machine to the",
    "start": "2103440",
    "end": "2110640"
  },
  {
    "text": "internet and in the JavaScript we have this script running that just measures access time to the data we can measure",
    "start": "2110640",
    "end": "2117640"
  },
  {
    "text": "access time also in JavaScript and see if if there was a a row conflict or",
    "start": "2117640",
    "end": "2123400"
  },
  {
    "text": "not and if the sender inside the virtual machine wants to send data out it",
    "start": "2123400",
    "end": "2128560"
  },
  {
    "text": "accesses its data inside the virtual machine to Sender one and if it does",
    "start": "2128560",
    "end": "2133800"
  },
  {
    "text": "nothing then that's interpreted by JavaScript just a low access time as a zero and it looks something like that so",
    "start": "2133800",
    "end": "2141839"
  },
  {
    "text": "that's an actual measurement from the JavaScript we see uh we can really see",
    "start": "2141839",
    "end": "2147440"
  },
  {
    "text": "the the differences between uh row conflicts and row hits so we have this",
    "start": "2147440",
    "end": "2153880"
  },
  {
    "text": "low and this High access times and we did always a few measurements for every bit so to be absolutely sure that's",
    "start": "2153880",
    "end": "2159800"
  },
  {
    "text": "correct so in this case we did 10 measurements per bit we sent and we can",
    "start": "2159800",
    "end": "2165760"
  },
  {
    "text": "do an overlay here use the average very simple see the zero and the one bits",
    "start": "2165760",
    "end": "2171160"
  },
  {
    "text": "that are transmitted from the virtual machine to the JavaScript in the browser and the actual communication is",
    "start": "2171160",
    "end": "2178599"
  },
  {
    "start": "2175000",
    "end": "2175000"
  },
  {
    "text": "based on backets uh we don't want to stream the data because if we lose one of bits or more bits then we out of",
    "start": "2178599",
    "end": "2185800"
  },
  {
    "text": "synchronization and the whole data is corrupted so we decided to use backets here with a two bit preamble to see that",
    "start": "2185800",
    "end": "2193480"
  },
  {
    "text": "there's a backet starting uh with an error detection codes because of course we sometimes have bit flips to you noise",
    "start": "2193480",
    "end": "2200000"
  },
  {
    "text": "or scheduling interrupts so we have an error detection in there that detects this corrup backets then of course we",
    "start": "2200000",
    "end": "2206040"
  },
  {
    "text": "need a sequence number to have free transmission working and with that we can reliably transmit data so the D at",
    "start": "2206040",
    "end": "2213960"
  },
  {
    "text": "the beginning we have approximately 11 bits per second that might not sound",
    "start": "2213960",
    "end": "2219599"
  },
  {
    "text": "very fast but it's absolutely reliable you've seen it in the beginning we have 0% errors and that can still be improved",
    "start": "2219599",
    "end": "2229079"
  },
  {
    "text": "so we have multiple ways to improve that for example by using few",
    "start": "2229079",
    "end": "2234480"
  },
  {
    "text": "retransmissions which means we have to somehow uh correct the errors we only have error detection in there that",
    "start": "2234480",
    "end": "2240760"
  },
  {
    "text": "discards backets that are destroyed but we could go for error correction forward error correction and correct and any bit",
    "start": "2240760",
    "end": "2247839"
  },
  {
    "text": "flips we encounter and then we can also go for multi threading the new JavaScript",
    "start": "2247839",
    "end": "2254119"
  },
  {
    "text": "standard allows us to have multi Fring in the browser so we can transmit multi multiple bits in parallel using",
    "start": "2254119",
    "end": "2260599"
  },
  {
    "text": "different banks so we DED that in native code and we get up to 596 kilobit per second",
    "start": "2260599",
    "end": "2268720"
  },
  {
    "text": "between CPUs and inside the virtual machine so that's pretty fast but still",
    "start": "2268720",
    "end": "2274599"
  },
  {
    "text": "for stealing data from a virtual machine to the to the internet imagine credit",
    "start": "2274599",
    "end": "2279800"
  },
  {
    "text": "cards or private Keys 11 bits per second without any errors is still fast",
    "start": "2279800",
    "end": "2286319"
  },
  {
    "text": "enough good and now that we had now that you know how the demo worked we have",
    "start": "2286319",
    "end": "2292480"
  },
  {
    "text": "another good that we can do with this the reverse engineering so many of you probably",
    "start": "2292480",
    "end": "2299599"
  },
  {
    "text": "already thought this is somehow maps to R Hammer especially if you were paying attention during the introduction um and",
    "start": "2299599",
    "end": "2306359"
  },
  {
    "text": "it does map quite well so let me just do a recap of how rammer actually works um",
    "start": "2306359",
    "end": "2312359"
  },
  {
    "start": "2311000",
    "end": "2311000"
  },
  {
    "text": "the thing with capacitors is that they don't just Le charge when you read them out they leak charge over time all by",
    "start": "2312359",
    "end": "2320000"
  },
  {
    "text": "them themselves um for this reason uh we need to refresh dram every once in a",
    "start": "2320000",
    "end": "2326079"
  },
  {
    "text": "while and how we do that is we read the row into the row buffer and ride it back",
    "start": "2326079",
    "end": "2331800"
  },
  {
    "text": "and the capacitors are all refreshed uh this happens every 64 milliseconds in normal computer",
    "start": "2331800",
    "end": "2338079"
  },
  {
    "text": "all the time um so um the thing is that cells leaks",
    "start": "2338079",
    "end": "2346319"
  },
  {
    "text": "faster upon proximate axis that is if a neighboring cell is accessed the cell",
    "start": "2346319",
    "end": "2352920"
  },
  {
    "text": "will leak faster and this means if we do enough proximate axis bits will start to",
    "start": "2352920",
    "end": "2359599"
  },
  {
    "text": "flip because capacitors will drain charge will no longer be charged and the",
    "start": "2359599",
    "end": "2364839"
  },
  {
    "text": "bit will um be zero afterwards so how do we do this in",
    "start": "2364839",
    "end": "2371280"
  },
  {
    "text": "practice well we already know that we can activate a row copy it into the row buffer and return it to the CPU from",
    "start": "2371280",
    "end": "2376520"
  },
  {
    "text": "there now because it's already in the row buffer we need to access another row",
    "start": "2376520",
    "end": "2381839"
  },
  {
    "text": "uh to get proximate AIS so we pick the green row here and access that and copy",
    "start": "2381839",
    "end": "2387400"
  },
  {
    "text": "to the row buffer we have our approximate axis and then we go back to the yellow row green row yellow row and",
    "start": "2387400",
    "end": "2392960"
  },
  {
    "text": "Bam we have bit flips um so this is how row Hammer works",
    "start": "2392960",
    "end": "2398480"
  },
  {
    "text": "in the two-minute version um the problem with row Hammer",
    "start": "2398480",
    "end": "2406720"
  },
  {
    "text": "is where are the victim row and where are the neighboring rows having a",
    "start": "2406720",
    "end": "2412119"
  },
  {
    "start": "2407000",
    "end": "2407000"
  },
  {
    "text": "gigabyte worth of memory gigabytes worth of memory in your computer you have have to search a long time to find actually",
    "start": "2412119",
    "end": "2418079"
  },
  {
    "text": "something that really Maps well to victim data because you don't want anything from the victim you want the",
    "start": "2418079",
    "end": "2424200"
  },
  {
    "text": "important data and um the first Solution by cbon and Dulan uh in their Google",
    "start": "2424200",
    "end": "2430839"
  },
  {
    "text": "blog post was uh spraying spraying is an very old method that hackers have been",
    "start": "2430839",
    "end": "2435880"
  },
  {
    "text": "using for a long time and it works by filling memory with security relevant information and just by poor chance you",
    "start": "2435880",
    "end": "2442960"
  },
  {
    "text": "hit something uh randomly if the memory is full of something security relevant uh",
    "start": "2442960",
    "end": "2448960"
  },
  {
    "text": "what they did was page table entries uh you remember we discussed page table really shortly this is the entire",
    "start": "2448960",
    "end": "2455760"
  },
  {
    "text": "security system for the mem Mor subsystem of the Intel x86 meaning if you fit a b in a page table weird things",
    "start": "2455760",
    "end": "2462680"
  },
  {
    "text": "can happen and security can be severely broken uh they also did an attack on the",
    "start": "2462680",
    "end": "2468480"
  },
  {
    "text": "Chrome uh sandbox the native client and here they did not spray page tables they",
    "start": "2468480",
    "end": "2474720"
  },
  {
    "text": "spray sanity checking code so if somebody write an a plugin for a native",
    "start": "2474720",
    "end": "2480720"
  },
  {
    "text": "client in a malicious way there's lots and lots of Sanity checking code in there and if you start flipping bits",
    "start": "2480720",
    "end": "2487319"
  },
  {
    "text": "randomly sometime at some point in time you will hit the sanity checking code and it will no longer check for sanity",
    "start": "2487319",
    "end": "2493520"
  },
  {
    "text": "but for insanity and we have a security break and we can leave the native client",
    "start": "2493520",
    "end": "2499480"
  },
  {
    "text": "sandbox um a problem with this method is not everything can be sprayed imagine",
    "start": "2499480",
    "end": "2505119"
  },
  {
    "text": "attacking a private key say you want to flip a bit in a private key so you can Factor it afterwards well it's kind of",
    "start": "2505119",
    "end": "2513200"
  },
  {
    "text": "hard to tell a victim that he should copy his private key all over uh the memory that life doesn't work that way",
    "start": "2513200",
    "end": "2520640"
  },
  {
    "text": "um so there was a talk here at U at bad Europe earlier flip F shuy and",
    "start": "2520640",
    "end": "2529800"
  },
  {
    "text": "what they figured out was to use duplication duplication is when an",
    "start": "2529800",
    "end": "2535119"
  },
  {
    "text": "operating system or a virtualizer is Idle he starts searching for identical",
    "start": "2535119",
    "end": "2540240"
  },
  {
    "text": "pages in physical memory once he find The Identical pages in memory he uses",
    "start": "2540240",
    "end": "2545960"
  },
  {
    "text": "the page table system to map them into the same physical data so that each",
    "start": "2545960",
    "end": "2552000"
  },
  {
    "text": "client access the pH same physical data but have their own version of of the",
    "start": "2552000",
    "end": "2558079"
  },
  {
    "text": "data um this actually turns out to leak physical addresses the way it works is",
    "start": "2558079",
    "end": "2564400"
  },
  {
    "text": "you allocate a very large buffer you start hammering a random you see where your bit flips are then you modify the",
    "start": "2564400",
    "end": "2570920"
  },
  {
    "text": "page to match that what you want to break in the attacker and then you sit around and wait for the duplication to",
    "start": "2570920",
    "end": "2576800"
  },
  {
    "text": "find your page merge the page with that of the victim and then you can start",
    "start": "2576800",
    "end": "2583000"
  },
  {
    "text": "hammering on the same place as you hammered before and you'll soon flip a bit in the victim's",
    "start": "2583000",
    "end": "2588040"
  },
  {
    "text": "context the problem with this method is that duplication is turned off in any serious cloud uh the serious is in",
    "start": "2588040",
    "end": "2597280"
  },
  {
    "text": "quotation marks I actually mean it quite literally I think if you do not uh if",
    "start": "2597280",
    "end": "2602319"
  },
  {
    "text": "you use D duplication in your Cloud you're not a serious cloud provider um also it's default in most operating",
    "start": "2602319",
    "end": "2608200"
  },
  {
    "text": "system not just because of row Hammer but because there are other attacks and duplication it's just a bad",
    "start": "2608200",
    "end": "2614920"
  },
  {
    "text": "idea um so this is where we come in we know the mapping function meaning if we",
    "start": "2614920",
    "end": "2621599"
  },
  {
    "text": "have physical address addresses of the victim data uh then we can actually calculate where his stuff is in Dam we",
    "start": "2621599",
    "end": "2628760"
  },
  {
    "text": "can calculate where the uh rows that we need to attack the victim is we can",
    "start": "2628760",
    "end": "2633800"
  },
  {
    "text": "calculate everything and uh some other researchers uh they are quoted here uh found out",
    "start": "2633800",
    "end": "2640440"
  },
  {
    "text": "they could actually use that to hit a private key and flip a bit once you flip a bit in an key you can actually Factor",
    "start": "2640440",
    "end": "2646800"
  },
  {
    "text": "it and figure out what the real key was the real problem here is for this attack",
    "start": "2646800",
    "end": "2651839"
  },
  {
    "text": "to work you need physical addresses um classically we have the proc pitch",
    "start": "2651839",
    "end": "2658240"
  },
  {
    "text": "page map uh but that is now um privilege",
    "start": "2658240",
    "end": "2663440"
  },
  {
    "text": "in part due to row Hammer uh however I co-authored a paper",
    "start": "2663440",
    "end": "2668599"
  },
  {
    "text": "recently that show that on most operating system we're capable of getting physical addresses from virtual addresses even on privileged um and",
    "start": "2668599",
    "end": "2677040"
  },
  {
    "text": "there are other kinds of leaks for example if you should you leave using uh not using 4 kilobyte Pages would start",
    "start": "2677040",
    "end": "2683640"
  },
  {
    "text": "using large Pages 2 megabyte or 1 gigaby Pages then you leak a lot of bits of the physical address as well and the way the",
    "start": "2683640",
    "end": "2691480"
  },
  {
    "text": "cach works actually turns out to leak information about physical addresses as well so knowing the m mapping function",
    "start": "2691480",
    "end": "2697839"
  },
  {
    "text": "actually brings you very very far in terms of figuring out where the stuff is",
    "start": "2697839",
    "end": "2702960"
  },
  {
    "text": "you want to row Hammer uh there is a very interesting application",
    "start": "2702960",
    "end": "2708160"
  },
  {
    "start": "2706000",
    "end": "2706000"
  },
  {
    "text": "here U it was once thought that only DDR3 RAM was vulnerable to the row",
    "start": "2708160",
    "end": "2713400"
  },
  {
    "text": "Hammer problem because testing it did not turn up any bit flips turns out that ddr4 is much more resilient to row",
    "start": "2713400",
    "end": "2720280"
  },
  {
    "text": "Hammer but it doesn't rule it out however knowing the mapping function we",
    "start": "2720280",
    "end": "2725400"
  },
  {
    "text": "could as the first team do bit flips in ddr4 Ram because we",
    "start": "2725400",
    "end": "2730960"
  },
  {
    "text": "could very efficiently Target a row we could we know the exact neighbors and we",
    "start": "2730960",
    "end": "2736000"
  },
  {
    "text": "could just start looking for them instead of looking for stuff in the entire memory and this is what enabl us",
    "start": "2736000",
    "end": "2742200"
  },
  {
    "text": "to do the first bit flips and ddr4 RAM um so there's a force solution and",
    "start": "2742200",
    "end": "2748160"
  },
  {
    "text": "this goes back to uh the spying stuff if we're able to invoke victim code",
    "start": "2748160",
    "end": "2755480"
  },
  {
    "text": "say you can make can use his private Key by accessing his website uh well then",
    "start": "2755480",
    "end": "2760920"
  },
  {
    "text": "you can use the row Miss primitive to locate the bank where he is in and if you're very lucky you get to",
    "start": "2760920",
    "end": "2768079"
  },
  {
    "text": "get to be in the same row as the uh as the victim and then you can",
    "start": "2768079",
    "end": "2773839"
  },
  {
    "text": "locate the exact row where he is using the spying method we showed before um of course this isn't perfect but it does",
    "start": "2773839",
    "end": "2781720"
  },
  {
    "text": "drastically improve accuracy um if you remember we're very likely that is very",
    "start": "2781720",
    "end": "2788520"
  },
  {
    "text": "very likely to be in the same bank as the victim because a bank is 265 megabytes meaning we're able to tell",
    "start": "2788520",
    "end": "2794240"
  },
  {
    "text": "tell what 265 megabytes the attacker uh",
    "start": "2794240",
    "end": "2799880"
  },
  {
    "text": "the victim important information is in uh and that is a lot less than gigabytes",
    "start": "2799880",
    "end": "2805200"
  },
  {
    "text": "worth of memory also we can map our aggressor rows very efficiently to",
    "start": "2805200",
    "end": "2810720"
  },
  {
    "text": "the same 256 megabytes and we could get lucky and have row uh collocation with the",
    "start": "2810720",
    "end": "2819720"
  },
  {
    "text": "victim anyways that is pretty much it for our talk today um we hope that we have U made",
    "start": "2819720",
    "end": "2828760"
  },
  {
    "start": "2825000",
    "end": "2825000"
  },
  {
    "text": "clear that we think that Dam design is security relevant we hope we have showed that we can ctly ex exfiltrate",
    "start": "2828760",
    "end": "2834640"
  },
  {
    "text": "information that we can spy on other software and that we can enable efficient and targeted rowhammer attacks",
    "start": "2834640",
    "end": "2841160"
  },
  {
    "text": "so if there are any questions uh we'll be happy to take them",
    "start": "2841160",
    "end": "2846640"
  },
  {
    "text": "what mitigations do you see apart from slowing the Dr taes down so",
    "start": "2856880",
    "end": "2862800"
  },
  {
    "text": "consistent uh it's really difficult to to to mitigate um you saw in the slides",
    "start": "2862800",
    "end": "2871160"
  },
  {
    "text": "that they moved you put ever more bits into the lower 11 uh uh they do that to",
    "start": "2871160",
    "end": "2878240"
  },
  {
    "text": "get more parallelism in the ram so you can read sequentially it is really difficult there is one thing the cash is",
    "start": "2878240",
    "end": "2885520"
  },
  {
    "text": "is is in the way for much in much much of this stuff so if you don't have access to the seal flush instruction it gets much more difficult much slower you",
    "start": "2885520",
    "end": "2892359"
  },
  {
    "text": "lose accuracy uh we actually have don't have any really good mitigations you can",
    "start": "2892359",
    "end": "2898079"
  },
  {
    "text": "do stuff like detected with performance counters but you're bound to round up with uh um false positives so it's a",
    "start": "2898079",
    "end": "2905800"
  },
  {
    "text": "it's a difficult thing it's a design issue in my",
    "start": "2905800",
    "end": "2910680"
  },
  {
    "text": "opinion uh not that I know of Michael do you know something no not that we know of no uh one should remember here it's",
    "start": "2918800",
    "end": "2926680"
  },
  {
    "text": "not really Intel's issue here the the core reason is dram and Intel to my knowledge does not produce d uh you",
    "start": "2926680",
    "end": "2934480"
  },
  {
    "text": "could probably reproduce these kinds of back on on any processor it doesn't depend on the processor it is about the",
    "start": "2934480",
    "end": "2943480"
  },
  {
    "text": "dam so uh we also did this attack on arm so it works the same on smartphones and",
    "start": "2944079",
    "end": "2950079"
  },
  {
    "text": "for AMD for example they even released the function so that's not really their problem that the and inel doesn't make",
    "start": "2950079",
    "end": "2956359"
  },
  {
    "text": "it secure by keeping this as a secret it just made it a uh step harder for us",
    "start": "2956359",
    "end": "2962280"
  },
  {
    "text": "because we had to reverse engineer it first on on Intel and on arm but yeah I",
    "start": "2962280",
    "end": "2967400"
  },
  {
    "text": "don't think they see it as their",
    "start": "2967400",
    "end": "2971520"
  },
  {
    "text": "problem you use timing s channel to reverse engineer the the bank allocation Channel",
    "start": "2973559",
    "end": "2979680"
  },
  {
    "text": "allocation but how do you identify the neighboring row rows so when you find a",
    "start": "2979680",
    "end": "2986040"
  },
  {
    "text": "biging how do you identify the addresses of the neighbor",
    "start": "2986040",
    "end": "2991640"
  },
  {
    "text": "row uh it turns out that the mapping of the rows is really primitive",
    "start": "2991640",
    "end": "2998160"
  },
  {
    "text": "so we we don't actually do that but but the the mapping is really",
    "start": "2998160",
    "end": "3006520"
  },
  {
    "text": "pred any more",
    "start": "3013119",
    "end": "3016558"
  },
  {
    "text": "questions okay could you once again put back the slide with the URL where the",
    "start": "3021240",
    "end": "3028640"
  },
  {
    "text": "I yeah yeah you know where that",
    "start": "3029480",
    "end": "3033760"
  },
  {
    "text": "is we be hard with this one because our laptop is back",
    "start": "3035920",
    "end": "3041200"
  },
  {
    "text": "there oh God maybe you just run over yeah",
    "start": "3041200",
    "end": "3047079"
  },
  {
    "text": "that are there any other questions we can take them meanwhile I think it was",
    "start": "3047079",
    "end": "3053079"
  },
  {
    "text": "30 that's what I Michael slide number 30",
    "start": "3053079",
    "end": "3061078"
  },
  {
    "text": "[Applause]",
    "start": "3062730",
    "end": "3065460"
  }
]