[
  {
    "start": "0",
    "end": "16000"
  },
  {
    "text": "uh the talk right now that you're in is Reflections on trusting trust Zone by Dan Rosenberg sorry",
    "start": "359",
    "end": "7000"
  },
  {
    "text": "Rosenberg thank you all right so as you said I'm Dan and",
    "start": "7000",
    "end": "12320"
  },
  {
    "text": "today we're going to be talking about attacking trust Zone uh so hopefully if you're in this",
    "start": "12320",
    "end": "17640"
  },
  {
    "start": "16000",
    "end": "16000"
  },
  {
    "text": "room you've heard of trust Zone before have some idea of what it is but just in case uh trust zone is a systemwide",
    "start": "17640",
    "end": "24000"
  },
  {
    "text": "approach to security implemented on arm devices which enjoy a sort of majority market share especially among mobile",
    "start": "24000",
    "end": "30240"
  },
  {
    "text": "devices um and TruStone allows these devices to implement a fairly wide range",
    "start": "30240",
    "end": "35280"
  },
  {
    "text": "of security security related tasks it accomplishes this by segregating all software and Hardware on",
    "start": "35280",
    "end": "42200"
  },
  {
    "start": "38000",
    "end": "38000"
  },
  {
    "text": "the device into what are referred to as the normal world and the secure world so in the normal world you have all the",
    "start": "42200",
    "end": "49039"
  },
  {
    "text": "components of your traditional operating system including your standard applications system services and the",
    "start": "49039",
    "end": "55079"
  },
  {
    "text": "operating system kernel now today we're going to be talking exclusively about an implementation on Androids so this will",
    "start": "55079",
    "end": "60559"
  },
  {
    "text": "include the Linux kernel for example uh then in contrast on the other side we have the secure world now there are a",
    "start": "60559",
    "end": "67000"
  },
  {
    "text": "number of different design models uh for implementing a secure world but the most popular in practice is having a secure",
    "start": "67000",
    "end": "73960"
  },
  {
    "text": "operating system kernel or a trust Zone kernel under which a number of potentially independent trusted",
    "start": "73960",
    "end": "79759"
  },
  {
    "text": "applications or trust LS may run and these can run concurrently and are frequently written by Third parties to",
    "start": "79759",
    "end": "86200"
  },
  {
    "text": "implement various modularized pieces of of security techn technology now access",
    "start": "86200",
    "end": "92479"
  },
  {
    "text": "between the normal world and the secure world is mediated by a monitor component and the secure world has complete access",
    "start": "92479",
    "end": "99439"
  },
  {
    "text": "to all of the hardware and software on the device uh but the normal world does not it can only communicate with the",
    "start": "99439",
    "end": "105880"
  },
  {
    "text": "secure World via carefully defined channels uh so the secure world is capable of designating certain regions",
    "start": "105880",
    "end": "112079"
  },
  {
    "text": "of memory for example as secure only and the normal world even with higher privileges like kernel privileges cannot",
    "start": "112079",
    "end": "119560"
  },
  {
    "text": "access access those secure memory segments so it's acting much like a hypervisor in this",
    "start": "119560",
    "end": "126079"
  },
  {
    "start": "126000",
    "end": "126000"
  },
  {
    "text": "case uh in my experience the most common usage of trust zone is for DRM uh",
    "start": "126079",
    "end": "132440"
  },
  {
    "text": "digital Rights Management where the basic use case is protected media content can be sent to a user's device",
    "start": "132440",
    "end": "139400"
  },
  {
    "text": "and then decoded exclusively in the secure world so even if the user has full control over their own operating",
    "start": "139400",
    "end": "145959"
  },
  {
    "text": "system there all of this uh all of this decoding takes place in a protected environment that the user does not have",
    "start": "145959",
    "end": "151959"
  },
  {
    "text": "access to uh to prevent piracy additionally TruStone is used frequently",
    "start": "151959",
    "end": "157120"
  },
  {
    "text": "for uh other secure key storage applications such as for DM verifi which is the Linux Kernel's full dis",
    "start": "157120",
    "end": "162879"
  },
  {
    "text": "encryption technology it may also be used for storing sensitive information related to mobile payments and for",
    "start": "162879",
    "end": "169159"
  },
  {
    "text": "creating protected Hardware components such as a secure keypad that only communicates with the secure World such",
    "start": "169159",
    "end": "175599"
  },
  {
    "text": "that if the operating system is compromised perhaps elements of P entry May remain uh",
    "start": "175599",
    "end": "182480"
  },
  {
    "text": "secure uh additionally uh many vendors choose to implement secure boot in such",
    "start": "182480",
    "end": "188760"
  },
  {
    "text": "a way that it relies on software programmable fuses such as qualcomm's Q fuse technology and because truss Zone",
    "start": "188760",
    "end": "196440"
  },
  {
    "text": "has the ability to read and write these uh software programmable fuses frequently truss Zone plays some sort of",
    "start": "196440",
    "end": "202120"
  },
  {
    "text": "role either directly or indirectly in actually managing secure boot itself on mobile devices and then finally a number",
    "start": "202120",
    "end": "209400"
  },
  {
    "text": "of device manufacturers most notably Samsung have implemented their own Security Solutions that rely on truss",
    "start": "209400",
    "end": "215480"
  },
  {
    "text": "Zone uh as part of their nox Security Suite Samsung has implemented teima which is the trust Zone based Integrity",
    "start": "215480",
    "end": "222120"
  },
  {
    "text": "measurement architecture uh among other things this subsystem runs in the secure",
    "start": "222120",
    "end": "227720"
  },
  {
    "text": "world and periodically scans the device kernel in memory to verify that no tampering has taken place and if it",
    "start": "227720",
    "end": "234439"
  },
  {
    "text": "detects any sort of compromise or suspicious activity it'll raise some sort of security exception or potentially reboot the",
    "start": "234439",
    "end": "242200"
  },
  {
    "start": "242000",
    "end": "242000"
  },
  {
    "text": "phone uh prior to today there's actually been very little public research on attacking trust Zone uh Thomas Roth gave",
    "start": "242200",
    "end": "248959"
  },
  {
    "text": "a talk in 2013 I believe at KC West called Next Generation Mobile rootkits",
    "start": "248959",
    "end": "255200"
  },
  {
    "text": "in which he described using trust Zone as a platform for surreptitiously spying on a user and noted that it's a",
    "start": "255200",
    "end": "261199"
  },
  {
    "text": "particularly uh good choice for this kind of activity because even if a user has the ability to control the kernel",
    "start": "261199",
    "end": "268759"
  },
  {
    "text": "the konel does not have the the ability to look into trust Zone to see if any sort of malicious activity is going on",
    "start": "268759",
    "end": "274560"
  },
  {
    "text": "and while he described the existence of EX specific vulnerabilities in trust",
    "start": "274560",
    "end": "279960"
  },
  {
    "text": "Zone as a potential Vector to install such a rootkit to my knowledge he didn't talk about specific vulnerabilities much",
    "start": "279960",
    "end": "285680"
  },
  {
    "text": "less exploitation of them which is what I'm going to be mostly focusing on today uh next also in 2013 I published a post",
    "start": "285680",
    "end": "292919"
  },
  {
    "text": "on the asouth security blog called unlocking the Motorola bootloader in which I described a Motorola specific",
    "start": "292919",
    "end": "299199"
  },
  {
    "text": "TruStone vulnerability that allowed me to defeat secure boot on these devices uh next a number of exploits",
    "start": "299199",
    "end": "307360"
  },
  {
    "text": "published by the sort of Android rooting and modding Community like XDA Developers and the like uh specifically",
    "start": "307360",
    "end": "313479"
  },
  {
    "text": "for HTC phones uh have have used trust Zone related attacks in the past uh but",
    "start": "313479",
    "end": "320479"
  },
  {
    "text": "these exploits have all been not only undocumented but OB fiscated and not publicly analyzed so very little public",
    "start": "320479",
    "end": "326800"
  },
  {
    "text": "insight has been gleaned by this research and then most recently uh perhaps a month or two ago in at Recon",
    "start": "326800",
    "end": "334319"
  },
  {
    "text": "uh Nathan Kelner and Charles Holmes gave a talk called Herby dragons where they described uh vulnerability specific to",
    "start": "334319",
    "end": "341199"
  },
  {
    "text": "HTC's trust Zone implementation and I should thank these guys for uh communicating with me while they were",
    "start": "341199",
    "end": "347160"
  },
  {
    "text": "doing this research and sharing their findings so looking back at the previous couple slides we can begin to paint a",
    "start": "347160",
    "end": "353919"
  },
  {
    "start": "350000",
    "end": "350000"
  },
  {
    "text": "picture of why this may be an interesting research Target uh firstly it's clearly a high value Target to a",
    "start": "353919",
    "end": "359759"
  },
  {
    "text": "number of of different parties you have content providers who rely on trust Zone to prevent piracy of their media you",
    "start": "359759",
    "end": "366240"
  },
  {
    "text": "have oems who like Samsung who Implement Security Services to protect their users",
    "start": "366240",
    "end": "371919"
  },
  {
    "text": "and gain Advantage especially in Enterprise markets and then we have users who rely on the same security",
    "start": "371919",
    "end": "377919"
  },
  {
    "text": "features to protect themselves and as is the case with groups like XDA Developers",
    "start": "377919",
    "end": "383160"
  },
  {
    "text": "and other ROM ROM and rooting enthusiasts frequently want to defeat trust Zone to defeat things like secure",
    "start": "383160",
    "end": "388880"
  },
  {
    "text": "boot to install their own software on their phones uh this coupled with the fact that there's been very little",
    "start": "388880",
    "end": "394560"
  },
  {
    "text": "public research and as a result very little public scrutiny to support the you know sort of lofty claims of",
    "start": "394560",
    "end": "399960"
  },
  {
    "text": "security that marketing literature has put forward makes this a compelling",
    "start": "399960",
    "end": "405280"
  },
  {
    "text": "Target so for This research in particular I chose to focus on qualcomm's implementation of a trust",
    "start": "405280",
    "end": "410520"
  },
  {
    "text": "Zone kernel uh which is called the qualcom secure execution environment or QE and the reason behind this was fairly",
    "start": "410520",
    "end": "417039"
  },
  {
    "text": "simple uh Qualcomm enjoys a sort of majority market share especially among mid to high-end Android phones",
    "start": "417039",
    "end": "423639"
  },
  {
    "text": "especially in North America and Europe um basically if if you have heard of a",
    "start": "423639",
    "end": "428800"
  },
  {
    "text": "flagship model by Samsung LG Motorola HTC and it's for sale in Europe or North",
    "start": "428800",
    "end": "435360"
  },
  {
    "text": "America chances are it's running a Qualcomm chipset and as a result is using qualcomm's trust Zone kernel so",
    "start": "435360",
    "end": "441720"
  },
  {
    "text": "it's by far the most popular trust own kernel in the market",
    "start": "441720",
    "end": "446840"
  },
  {
    "start": "446000",
    "end": "446000"
  },
  {
    "text": "today for actually performing This research the uh tool chain requirements are fairly minimal uh obtaining trust",
    "start": "446840",
    "end": "453639"
  },
  {
    "text": "Zone images is incredibly straightforward if you just spend the time Google searching you can find huge",
    "start": "453639",
    "end": "460039"
  },
  {
    "text": "archives of firmware images for dozens and dozens of android devices and frequently these are just simple archive",
    "start": "460039",
    "end": "466759"
  },
  {
    "text": "formats like tarballs or Zips and you can pull out the TruStone images directly from those full firmware uh",
    "start": "466759",
    "end": "473479"
  },
  {
    "text": "file formats additionally if you have root access on a live device you can use a Linux utility like DD to simply pull",
    "start": "473479",
    "end": "480560"
  },
  {
    "text": "the trust Zone image directly from dis and once you have a trust Zone image in hand analysis was really just as",
    "start": "480560",
    "end": "487280"
  },
  {
    "text": "straightforward as pulling up your favorite disassembler in my case ID proo um and going to work reverse",
    "start": "487280",
    "end": "493919"
  },
  {
    "text": "engineering now earlier trust Zone images actually rely on a proprietary Qualcomm header format uh which is a 40",
    "start": "493919",
    "end": "501120"
  },
  {
    "text": "byte header that dictates where in memory certain sections of trust zone are loaded uh which is fairly easy to",
    "start": "501120",
    "end": "507840"
  },
  {
    "text": "sort of guess the meaning of and I think some people have gone out of their way to provide third party documentation on",
    "start": "507840",
    "end": "512880"
  },
  {
    "text": "that uh but nowadays the more recent TruStone kernels are actually elf binaries so you can load them up in Ida",
    "start": "512880",
    "end": "518919"
  },
  {
    "text": "Pro and it will handle loading things in memory for you and then you can go to",
    "start": "518919",
    "end": "525080"
  },
  {
    "start": "525000",
    "end": "525000"
  },
  {
    "text": "work now I find it's a useful exercise whenever beginning any sort of vulnerability research Endeavor to",
    "start": "525680",
    "end": "531480"
  },
  {
    "text": "enumerate the attack surface that's present on the Target in this case by far the most lucrative piece of attack",
    "start": "531480",
    "end": "536959"
  },
  {
    "text": "surface was a software exception mechanism called the secure monitor call or SMC so SMC is an arm instruction",
    "start": "536959",
    "end": "543720"
  },
  {
    "text": "which is a privileged instruction meaning it can only be executed by the colonel that is somewhat analogous to a",
    "start": "543720",
    "end": "549360"
  },
  {
    "text": "system call so much like a normal application will issue a system call to request the operating system kernel",
    "start": "549360",
    "end": "556399"
  },
  {
    "text": "provide some sort of service for it the operating system kernel can issue an SMC request to request that trust Zone do",
    "start": "556399",
    "end": "564240"
  },
  {
    "text": "something on its behalf additionally trust Zone may be tasked with handling various Hardware",
    "start": "564240",
    "end": "569399"
  },
  {
    "text": "exeptions such as interrupts and external aborts but this is a much more narrowly defined interface so I suspect",
    "start": "569399",
    "end": "574600"
  },
  {
    "text": "it's less likely to have vulnerabilities qualcomm's implementation doesn't rely on this so",
    "start": "574600",
    "end": "579839"
  },
  {
    "text": "much but other trust own implementations most notably mobicore rely fairly extensively on shared memory segments to",
    "start": "579839",
    "end": "586920"
  },
  {
    "text": "pass information back and forth between the secure and non-secure worlds uh so that's a potentially interesting Target",
    "start": "586920",
    "end": "593079"
  },
  {
    "text": "on those implementations next it's possibly interesting to note that the contents of",
    "start": "593079",
    "end": "598839"
  },
  {
    "text": "of the disc EMC emmc flash on the devices is a potential attack Vector to",
    "start": "598839",
    "end": "604240"
  },
  {
    "text": "attack the secure world when you consider the fact that in many cases trust Zone will actually read the contents of dis and do some amount of",
    "start": "604240",
    "end": "611240"
  },
  {
    "text": "parsing for example to verify the contents of dis for secure boot any vulnerabilities in that reading from dis",
    "start": "611240",
    "end": "617360"
  },
  {
    "text": "and parsing could potentially be exploited by pathological disc contents to exploit these",
    "start": "617360",
    "end": "623760"
  },
  {
    "text": "vulnerabilities and then finally there may actually be vulnerabilities in the individual trust LS these trusted appc",
    "start": "623760",
    "end": "629480"
  },
  {
    "text": "applications that are frequently authored by Third parties and I did spend some time looking at a number of",
    "start": "629480",
    "end": "635040"
  },
  {
    "text": "these and found that there was a a high amount of sort of lwh hanging fruit uh",
    "start": "635040",
    "end": "640399"
  },
  {
    "text": "somewhat trivial and and easy to exploit vulnerabilities in these trls uh probably because the vendors that are",
    "start": "640399",
    "end": "646320"
  },
  {
    "text": "authoring them likely don't have the same kind of security engineering culture as organization like Qualcomm",
    "start": "646320",
    "end": "651360"
  },
  {
    "text": "might uh but unfortunately or fortunately uh",
    "start": "651360",
    "end": "657079"
  },
  {
    "text": "these trusts are isolated from one another on later trust Zone kernels so even if you're able to compromise an",
    "start": "657079",
    "end": "662760"
  },
  {
    "text": "individual trust lit with a vulnerability in it uh you don't necessarily gain access to other trust lits much less the trust Zone kernel uh",
    "start": "662760",
    "end": "670399"
  },
  {
    "text": "so it's a somewhat more limited attack having enumerated this attack",
    "start": "670399",
    "end": "676399"
  },
  {
    "start": "673000",
    "end": "673000"
  },
  {
    "text": "surface I wanted to be clear about what my sort of assumptions were about the capabilities an attacker would need to",
    "start": "676399",
    "end": "682079"
  },
  {
    "text": "possess to perform an attack on trust zone so for today's research I wanted to assume that we had",
    "start": "682079",
    "end": "688880"
  },
  {
    "text": "arbit code execution on the device already and this is really just for practical reasons because there's",
    "start": "688880",
    "end": "694399"
  },
  {
    "text": "essentially no remote attack surface for most real TruStone implementations it's very difficult to imagine a sane use",
    "start": "694399",
    "end": "701079"
  },
  {
    "text": "case where uh the trust Zone kernel on a phone needs to receive data directly",
    "start": "701079",
    "end": "706440"
  },
  {
    "text": "remotely uh that having been said we also want to assume that the attacker has kernel privileges on the device uh",
    "start": "706440",
    "end": "712839"
  },
  {
    "text": "whether that be because the attacker is the owner of the phone who actually physically owns it or an attacker that",
    "start": "712839",
    "end": "718959"
  },
  {
    "text": "has gained access to a a device and escalated privileges via a kernel exploit which is a somewhat well",
    "start": "718959",
    "end": "724959"
  },
  {
    "text": "understood process um the reason for this assumption is that we really want the ability to issue these SMC",
    "start": "724959",
    "end": "731120"
  },
  {
    "text": "instructions because this provides by far the broadest attack surface um and if we don't have kernel privileges",
    "start": "731120",
    "end": "737320"
  },
  {
    "text": "there's practically no ability to interact with trust Zone at all uh you can sort of Imagine a scenario where",
    "start": "737320",
    "end": "742600"
  },
  {
    "text": "some sort of unprivileged application may be able to request that a privileged application make a call to trust Zone on",
    "start": "742600",
    "end": "749720"
  },
  {
    "text": "its behalf that exploits a vulnerability in trust Zone but as you can probably guess this this is seeming less and less",
    "start": "749720",
    "end": "756120"
  },
  {
    "text": "likely to happen in real life uh the last thing that's important to note is that in this threat model uh",
    "start": "756120",
    "end": "763720"
  },
  {
    "text": "crashes and denial of service bugs in trust zone are not considered security relevant to us uh because we're assuming",
    "start": "763720",
    "end": "770000"
  },
  {
    "text": "that we already have the ability to run code as as the kernel uh we already have the ability to not only reboot the",
    "start": "770000",
    "end": "775920"
  },
  {
    "text": "device but also probably do irreparable harm to it uh so having the kernel",
    "start": "775920",
    "end": "781120"
  },
  {
    "text": "trigger something that causes trust Zone to crash doesn't actually result in gaining any sort of privileges that we",
    "start": "781120",
    "end": "787279"
  },
  {
    "text": "didn't already have uh next we're going to be moving on to the actual implementation details of",
    "start": "787279",
    "end": "794040"
  },
  {
    "text": "Q itself specifically so qce as a trust Z kernel is closed source so all of the",
    "start": "794040",
    "end": "800680"
  },
  {
    "text": "information presented here on QE has been reverse engineered in idpr um",
    "start": "800680",
    "end": "806800"
  },
  {
    "text": "however the kernel side of things that um actually communicates with TruStone",
    "start": "806800",
    "end": "811880"
  },
  {
    "text": "is open source as part of the codora Forum uh GitHub tree that's available",
    "start": "811880",
    "end": "817600"
  },
  {
    "text": "online um so actually looking at these kernel drivers and how they talk to truss Zone gave some insight on on some",
    "start": "817600",
    "end": "825160"
  },
  {
    "text": "of the ways of communication so the interface that",
    "start": "825160",
    "end": "830279"
  },
  {
    "start": "828000",
    "end": "828000"
  },
  {
    "text": "Qualcomm provides as a kernel driver is called SCM which is the secure channel manager which I found very confusing",
    "start": "830279",
    "end": "836959"
  },
  {
    "text": "considering the fact that it actually uses the SMC instruction as the way of communication um and the way it issues",
    "start": "836959",
    "end": "844800"
  },
  {
    "text": "these requests is via two calling conventions there is a call by register convention and a convention that relies",
    "start": "844800",
    "end": "850759"
  },
  {
    "text": "on using a request and response structure so the call by register",
    "start": "850759",
    "end": "855880"
  },
  {
    "start": "854000",
    "end": "854000"
  },
  {
    "text": "convention is fairly straightforward in this convention the colonel loads the rzo register with this or value that",
    "start": "855880",
    "end": "863680"
  },
  {
    "text": "contains the SMC command number which you can think of as a system call number it's just sort of the ID of the command",
    "start": "863680",
    "end": "869240"
  },
  {
    "text": "that the colonel is requesting of trust Zone uh various flags and then the number of arguments that it should",
    "start": "869240",
    "end": "874759"
  },
  {
    "text": "expect and then the individual arguments to the to the um SMC request go in",
    "start": "874759",
    "end": "879920"
  },
  {
    "text": "subsequent arm registers R1 R2 and so on much more interesting is the second",
    "start": "879920",
    "end": "886880"
  },
  {
    "start": "884000",
    "end": "884000"
  },
  {
    "text": "convention which relies on these command structures so in this convention the rzo",
    "start": "886880",
    "end": "892600"
  },
  {
    "text": "register is loaded with the physical address corresponding to a command buffer and then the SMC instruction is",
    "start": "892600",
    "end": "898199"
  },
  {
    "text": "issued now these command buffers feature a request header a request buffer",
    "start": "898199",
    "end": "903560"
  },
  {
    "text": "containing essentially arbitrary input data a response header and then a response buffer containing arbitrary",
    "start": "903560",
    "end": "909720"
  },
  {
    "text": "output data the request header is described by this sem command structure in the in the",
    "start": "909720",
    "end": "915920"
  },
  {
    "text": "kernel tree that's available as open source uh and it features a length field which describes the length of the entire",
    "start": "915920",
    "end": "922519"
  },
  {
    "text": "command buffer a buffer offset field which is the offset of the input data from the beginning of the command the",
    "start": "922519",
    "end": "929120"
  },
  {
    "text": "response header offset which is the offset of the response header from the beginning of the command the ID which is",
    "start": "929120",
    "end": "934440"
  },
  {
    "text": "this or value that encapsulates the SMC request number flags and so on and then",
    "start": "934440",
    "end": "939839"
  },
  {
    "text": "the actual input data and this is expected to be populated by the colel before it issues the SMC request to",
    "start": "939839",
    "end": "946519"
  },
  {
    "text": "trust Zone then when trust Zone has finished processing the request it is expected to",
    "start": "946519",
    "end": "954319"
  },
  {
    "text": "populate the SCM response structure which contains a length field a buff offset field which is the offset from",
    "start": "954319",
    "end": "960639"
  },
  {
    "text": "the beginning of the response header to the output data and then this is complete flag which is just set to",
    "start": "960639",
    "end": "967839"
  },
  {
    "start": "968000",
    "end": "968000"
  },
  {
    "text": "one now because now because this request structure is populated entirely by the",
    "start": "968079",
    "end": "974639"
  },
  {
    "text": "kernel and in our threat model from the perspective of trust Zone we're considering the kernel as untrusted as a",
    "start": "974639",
    "end": "981079"
  },
  {
    "text": "potential attacker then trusso needs to perform some sanity checking or or",
    "start": "981079",
    "end": "986680"
  },
  {
    "text": "validation of this request structure to ensure that the colonel is not trying to trick trust Zone into doing something",
    "start": "986680",
    "end": "992600"
  },
  {
    "text": "malicious into perhaps writing into secure memory and corrupting something",
    "start": "992600",
    "end": "998040"
  },
  {
    "text": "now in particular there are five sanity checks that they perform to make sure that the request structure is is San the",
    "start": "998040",
    "end": "1005920"
  },
  {
    "text": "first of these is that the length of the command buffer is greater than or equal to 16 which is the size of the request",
    "start": "1005920",
    "end": "1011759"
  },
  {
    "text": "header uh next they confirm that the buffer offset which is the offset from the beginning of the command buffer to",
    "start": "1011759",
    "end": "1018000"
  },
  {
    "text": "the input buffer resides somewhere inside the command buffer all of these make sense so far uh next they check",
    "start": "1018000",
    "end": "1025360"
  },
  {
    "text": "that the buffer offset is greater than or equal to 16 which is the size of the request header to guarantee that the",
    "start": "1025360",
    "end": "1031360"
  },
  {
    "text": "input data doesn't overlap with the request header next they confirm that the response header offset is less than",
    "start": "1031360",
    "end": "1038038"
  },
  {
    "text": "or equal to the command length minus 12 where 12 is the size of the response header so this is a check to actually",
    "start": "1038039",
    "end": "1044640"
  },
  {
    "text": "guarantee that the response header fits inside the command buffer and then finally perhaps most",
    "start": "1044640",
    "end": "1050640"
  },
  {
    "text": "importantly there is an invocation of a function that I called qse is non-secure",
    "start": "1050640",
    "end": "1055720"
  },
  {
    "text": "memory there's no symbol support available in trust zones so all of these functions I just uh named appropriately",
    "start": "1055720",
    "end": "1062160"
  },
  {
    "text": "for for convenience sake and what this function is designed to do is guarantee",
    "start": "1062160",
    "end": "1067440"
  },
  {
    "text": "that the entire command buffer being provided by the kernel resides in non-secure memory and when you think",
    "start": "1067440",
    "end": "1073600"
  },
  {
    "text": "about it this makes sense this is a an important security assumption because if the colel were to for example provide an",
    "start": "1073600",
    "end": "1081200"
  },
  {
    "text": "address residing in Secure memory and then issue an SMC instruction it's possible that trust Zone would then go",
    "start": "1081200",
    "end": "1087600"
  },
  {
    "text": "ahead and perform operations either read from or write to that memory in Secure",
    "start": "1087600",
    "end": "1092640"
  },
  {
    "text": "memory and potentially uh allow for a",
    "start": "1092640",
    "end": "1098000"
  },
  {
    "text": "compromise the way these secure memory checking functions work uh they're",
    "start": "1098000",
    "end": "1103760"
  },
  {
    "text": "actually a series of functions that are designed to check if a range of memory is considered protected",
    "start": "1103760",
    "end": "1109440"
  },
  {
    "text": "uh and the way they implement this is entirely in software using a hard-coded list of regions with various flags that",
    "start": "1109440",
    "end": "1114960"
  },
  {
    "text": "indicate various memory attributes so when this top level secure",
    "start": "1114960",
    "end": "1120640"
  },
  {
    "text": "range checking function is called Q iterates over this list of regions and checks that the specified region doesn't",
    "start": "1120640",
    "end": "1127559"
  },
  {
    "text": "overlap with anything that's considered protected and returns a value appropriately and this is somewhat",
    "start": "1127559",
    "end": "1133360"
  },
  {
    "text": "analogous to the Linux Kernel's use of the access okay Macro for those of you who are familiar with Linux program",
    "start": "1133360",
    "end": "1139320"
  },
  {
    "text": "where the question that's being asked is is this memory safe for truss Zone to operate on or is the colel potentially",
    "start": "1139320",
    "end": "1146320"
  },
  {
    "text": "trying to trick truss Zone into doing something malicious now this is pseudo code that I",
    "start": "1146320",
    "end": "1153480"
  },
  {
    "start": "1150000",
    "end": "1150000"
  },
  {
    "text": "put together that roughly approximates what goes on when Q performs these checks uh you have this top level",
    "start": "1153480",
    "end": "1159799"
  },
  {
    "text": "function qce is non-secure memory that takes arguments of an address meaning",
    "start": "1159799",
    "end": "1165000"
  },
  {
    "text": "the start of the region that's going to be checked and a size field indicating how big the region that they want to",
    "start": "1165000",
    "end": "1170039"
  },
  {
    "text": "check is uh next they call down to a secondary function that I called Q range",
    "start": "1170039",
    "end": "1176240"
  },
  {
    "text": "not in region where they provide the address of this linked list of protected regions that resides in Secure memory",
    "start": "1176240",
    "end": "1182720"
  },
  {
    "text": "and then they provide the address again and then they attempt to calculate the end of the region that they want to",
    "start": "1182720",
    "end": "1188760"
  },
  {
    "text": "check by adding the address plus the size of the region now interestingly in this",
    "start": "1188760",
    "end": "1196600"
  },
  {
    "text": "function uh this secondary function actually checks that if the end of the",
    "start": "1196600",
    "end": "1202480"
  },
  {
    "text": "region that's going to be checked is less than the start of the region that's going to be checked they assume that the",
    "start": "1202480",
    "end": "1207799"
  },
  {
    "text": "caller has made some kind of an error and they reverse the arguments for you and this immediately jumped out at me as",
    "start": "1207799",
    "end": "1214880"
  },
  {
    "text": "something that's potentially a very bad idea so some of you probably have",
    "start": "1214880",
    "end": "1221159"
  },
  {
    "start": "1219000",
    "end": "1219000"
  },
  {
    "text": "already spotted the bug having looked at that code uh just in case uh a quick review of the concept of an integer",
    "start": "1221159",
    "end": "1227440"
  },
  {
    "text": "overflow so so on arm devices or other 32-bit devices in general integers are",
    "start": "1227440",
    "end": "1233200"
  },
  {
    "text": "represented as 32-bit numbers which is the maximum size of S A single standard register so integers have a maximum",
    "start": "1233200",
    "end": "1240120"
  },
  {
    "text": "range of 0er to hex FFF F FFF FF which is 2 to the 32 minus one um so for what",
    "start": "1240120",
    "end": "1247799"
  },
  {
    "text": "during arithmetic operations if this maximum value of an integer is exceeded",
    "start": "1247799",
    "end": "1252880"
  },
  {
    "text": "then the resulting value will wrap back around to zero so in this case if you",
    "start": "1252880",
    "end": "1258320"
  },
  {
    "text": "add the largest integer possible with one you get zero so applying this idea to the",
    "start": "1258320",
    "end": "1266320"
  },
  {
    "start": "1264000",
    "end": "1264000"
  },
  {
    "text": "invocation of the secure memory checking that's used to validate this uh SCM command structure they invoke this is",
    "start": "1266320",
    "end": "1273679"
  },
  {
    "text": "non-secure memory with an attack a kernel provided or attacker provided in our case address of a command and the",
    "start": "1273679",
    "end": "1281200"
  },
  {
    "text": "length of that command now what happens if the address of the command plus its",
    "start": "1281200",
    "end": "1286320"
  },
  {
    "text": "supposed length both of which are attacker provided values is greater than the maximum repes representation of a",
    "start": "1286320",
    "end": "1292080"
  },
  {
    "text": "32-bit integer well in this case the answer is fairly clear so this secondary function",
    "start": "1292080",
    "end": "1298400"
  },
  {
    "text": "will be called with the start of the command buffer and then this address plus size field will actually be will",
    "start": "1298400",
    "end": "1306320"
  },
  {
    "text": "wrap around and result in an address that is lower than the starting address",
    "start": "1306320",
    "end": "1311880"
  },
  {
    "text": "and then in this secondary function end will be less than start and it will reverse these",
    "start": "1311880",
    "end": "1317520"
  },
  {
    "text": "arguments so this allows us to create a pathological command buffer that does evil things so in this",
    "start": "1317520",
    "end": "1325279"
  },
  {
    "start": "1319000",
    "end": "1319000"
  },
  {
    "text": "example say that this region here is the actual qse image which is secure memory",
    "start": "1325279",
    "end": "1332080"
  },
  {
    "text": "it's considered protected now we can place our Command start perhaps over",
    "start": "1332080",
    "end": "1337880"
  },
  {
    "text": "here and then provide an extremely large command length such that the sum of the",
    "start": "1337880",
    "end": "1343000"
  },
  {
    "text": "address of the command and command length wraps all the way around and ends up here",
    "start": "1343000",
    "end": "1349320"
  },
  {
    "text": "then in the range checking function these arguments will be reversed so that the range that is checked to guarantee",
    "start": "1349320",
    "end": "1356039"
  },
  {
    "text": "that it is in non-secure memory is this region here rather than the region",
    "start": "1356039",
    "end": "1361200"
  },
  {
    "text": "starting at command and extending all the way to the end of memory which is what it intended to do as a result we can actually set a",
    "start": "1361200",
    "end": "1369880"
  },
  {
    "text": "response buffer offset to be anywhere in this region of memory including on top",
    "start": "1369880",
    "end": "1375720"
  },
  {
    "text": "of the qse image itself",
    "start": "1375720",
    "end": "1380440"
  },
  {
    "text": "so looking through these five sanity checks once more it's clear that with this pathological command buffer all of",
    "start": "1381080",
    "end": "1387000"
  },
  {
    "text": "these conditions are satisfied the command length is significantly greater than 16 the buffer offset is less than",
    "start": "1387000",
    "end": "1392679"
  },
  {
    "text": "the command length the buffer offset is significantly greater than 16 the response header offset is our sort of",
    "start": "1392679",
    "end": "1398840"
  },
  {
    "text": "arbitrary offset to point into the secure memory is less than our Command length which is really massive and then",
    "start": "1398840",
    "end": "1405320"
  },
  {
    "text": "because of this integer overflow and the subsequent reverse veral of these start and end values for range checking uh",
    "start": "1405320",
    "end": "1412480"
  },
  {
    "text": "this check that is designed to guarantee that this range is non-secure returns true even though it clearly should be",
    "start": "1412480",
    "end": "1419600"
  },
  {
    "text": "returning false now the result of this bug is that",
    "start": "1419600",
    "end": "1424919"
  },
  {
    "text": "we can craft an SMC request that exploits the integer overflow and causes qce to write a response header to",
    "start": "1424919",
    "end": "1432559"
  },
  {
    "text": "arbitrary secure memory and this this is clearly a serious vulnerability that can result in",
    "start": "1432559",
    "end": "1438080"
  },
  {
    "text": "compromise and the goal from this point forward is to achieve arbitrary secure code",
    "start": "1438080",
    "end": "1443120"
  },
  {
    "text": "execution on these devices the first thing to look at is",
    "start": "1443120",
    "end": "1448320"
  },
  {
    "start": "1446000",
    "end": "1446000"
  },
  {
    "text": "clearly what gets written to a response header what kind of data can we cause qce to write to arbitrary secure memory",
    "start": "1448320",
    "end": "1454679"
  },
  {
    "text": "and it turns out that the response header is hard-coded in all cases uh the",
    "start": "1454679",
    "end": "1459760"
  },
  {
    "text": "it writes the length as 12 which is just the size of the response header the buffer offset is 12 and then this is",
    "start": "1459760",
    "end": "1467279"
  },
  {
    "text": "complete is set to one so the final result is that we can write these three words 1221 to arbitrary",
    "start": "1467279",
    "end": "1474240"
  },
  {
    "text": "secure memory exploiting this is somewhat of a challenge uh but a few things make it",
    "start": "1474240",
    "end": "1480919"
  },
  {
    "text": "easier uh the first of these is that the memory layout of qce is almost entirely known to the attacker uh because the",
    "start": "1480919",
    "end": "1487960"
  },
  {
    "text": "trust Zone image sits on dis and we're assuming that we're running as the kernel we can read that image from disk",
    "start": "1487960",
    "end": "1494080"
  },
  {
    "text": "and because it is loaded at a known constant physical address in memory we essentially know everywhere we know the",
    "start": "1494080",
    "end": "1501760"
  },
  {
    "text": "entire layout of the trust Zone image in memory even though we can't explicitly read the secure memory where it resides",
    "start": "1501760",
    "end": "1508520"
  },
  {
    "text": "uh next it's helpful that most of RAM is actually non-secure memory so we have a a somewhat large sort of scratch pad to",
    "start": "1508520",
    "end": "1514760"
  },
  {
    "text": "to work with when we're trying to do things in memory now the sort of classic approach that you would take if you were",
    "start": "1514760",
    "end": "1521320"
  },
  {
    "text": "approaching this like a traditional kernel exploit maybe to find some sort of function pointer that lives in Secure",
    "start": "1521320",
    "end": "1527120"
  },
  {
    "text": "memory and then use our right primitive to overwrite some of the btes of that function pointer so that it now points",
    "start": "1527120",
    "end": "1533880"
  },
  {
    "text": "to an address residing in non-secure memory then we could put a payload at that non-secure address and cause that",
    "start": "1533880",
    "end": "1540919"
  },
  {
    "text": "function pointer to be invoked by trust Zone and then the result would be trust Zone running our non-secure payload and",
    "start": "1540919",
    "end": "1546679"
  },
  {
    "text": "that would be Victory um unfortunately this doesn't actually appear to work uh so I suspect that Q",
    "start": "1546679",
    "end": "1554880"
  },
  {
    "start": "1549000",
    "end": "1549000"
  },
  {
    "text": "actually has some sort of mechanism in place that prevents trust Zone from executing code from non-secure Pages uh",
    "start": "1554880",
    "end": "1560960"
  },
  {
    "text": "sort of analogously to how userland applications have NX or D or um more",
    "start": "1560960",
    "end": "1566440"
  },
  {
    "text": "recently the Linux kernel uh on arm or or x86 have pxn",
    "start": "1566440",
    "end": "1572120"
  },
  {
    "text": "andme uh respectively and I suspect it may have to do with the xpu which is the",
    "start": "1572120",
    "end": "1577840"
  },
  {
    "text": "memory management component that handles marking regions as secure uh but this is a an undocumented black hole it's very",
    "start": "1577840",
    "end": "1584360"
  },
  {
    "text": "difficult to to understand what's going on here and I don't have the capabilities to look at the Hardware",
    "start": "1584360",
    "end": "1589399"
  },
  {
    "text": "close enough to actually understand what's going on so this is the part of the talk where I co ask if there are any",
    "start": "1589399",
    "end": "1595000"
  },
  {
    "text": "qualcom or arm employees in the audience who want to answer this question as to whether this is the case but I'll let",
    "start": "1595000",
    "end": "1601000"
  },
  {
    "text": "them off the hook because I assume that they can't say uh so we need to take another",
    "start": "1601000",
    "end": "1608080"
  },
  {
    "start": "1605000",
    "end": "1605000"
  },
  {
    "text": "approach to actually gaining arbitrary code execution because it's clear that at least from experimentation it's not",
    "start": "1608080",
    "end": "1613480"
  },
  {
    "text": "going to work we're not going to be able to cause trust Zone to execute non-secure code we need to find find a",
    "start": "1613480",
    "end": "1618520"
  },
  {
    "text": "way to cause trust Zone to execute SEC secure code in a way that allows us to",
    "start": "1618520",
    "end": "1623919"
  },
  {
    "text": "win now the fact that this is a a 12 byte memory right with where we don't",
    "start": "1623919",
    "end": "1629240"
  },
  {
    "text": "control the contents uh makes exploitation somewhat difficult so the",
    "start": "1629240",
    "end": "1634559"
  },
  {
    "text": "first thing that's a little bit tricky is that because it's a 12 byte right if we're want to overwrite one word in",
    "start": "1634559",
    "end": "1639679"
  },
  {
    "text": "memory then we're necessarily clobbering two adjacent words to that which could",
    "start": "1639679",
    "end": "1644880"
  },
  {
    "text": "potentially lead to instability depending on uh what the target is and then additionally probably more",
    "start": "1644880",
    "end": "1651240"
  },
  {
    "text": "importantly we have very minimal options in terms of what we can do because we have this very limited vocabulary of",
    "start": "1651240",
    "end": "1658200"
  },
  {
    "text": "what we can cause to be written in Secure memory you know we only have zeros a 12 and a one that's that's",
    "start": "1658200",
    "end": "1665000"
  },
  {
    "text": "fairly limited so the challenge here is actually coming up with a way of using",
    "start": "1665000",
    "end": "1671320"
  },
  {
    "text": "this first exploit primitive to build a more flexible one that allows us to achieve our",
    "start": "1671320",
    "end": "1677120"
  },
  {
    "text": "goals now revisiting these secure memory",
    "start": "1677120",
    "end": "1683320"
  },
  {
    "text": "protection uh functions so we recall that QE checks uh",
    "start": "1683320",
    "end": "1688919"
  },
  {
    "text": "the status of memory regions by iterating over this linked list which has hard-coded regions and each of these",
    "start": "1688919",
    "end": "1694919"
  },
  {
    "text": "regions is uh encapsulated by a structure that is similar to this this",
    "start": "1694919",
    "end": "1700200"
  },
  {
    "text": "is just what I've revers engineered each region structure has an ID which is just an incremental",
    "start": "1700200",
    "end": "1706720"
  },
  {
    "text": "identifier flag that indicate the actual protection attributes of that region and then the start and end of these",
    "start": "1706720",
    "end": "1714799"
  },
  {
    "text": "regions so what I came up with was that we can actually use our 12 byte right to",
    "start": "1715080",
    "end": "1720480"
  },
  {
    "text": "overwrite the flags start and end addresses of the region entry corresponding to the Q image so the",
    "start": "1720480",
    "end": "1728080"
  },
  {
    "text": "result of this is anytime QE goes to check the safety of a pointer provided",
    "start": "1728080",
    "end": "1733760"
  },
  {
    "text": "by the kernel to guarantee that it's safe for it to assume that it's non-secure and that it can read from it",
    "start": "1733760",
    "end": "1739039"
  },
  {
    "text": "and write to it without consequence if that pointer resides in the address",
    "start": "1739039",
    "end": "1744200"
  },
  {
    "text": "space reserved for the Qs image it's going to say it's fine it's safe and at this point this gives us the",
    "start": "1744200",
    "end": "1751559"
  },
  {
    "text": "ability to write to arbitrary secure memory with any value that Qs writes as",
    "start": "1751559",
    "end": "1757200"
  },
  {
    "text": "output at any point here we can basically choose a new",
    "start": "1757200",
    "end": "1762320"
  },
  {
    "start": "1760000",
    "end": "1760000"
  },
  {
    "text": "WR primitive we've we've expanded our vocabulary for what we're able to write to secure memory so at this this point I",
    "start": "1762320",
    "end": "1768600"
  },
  {
    "text": "enumerated all of the SMC handlers eliminated those that don't write any output at any point and now we've got a",
    "start": "1768600",
    "end": "1775640"
  },
  {
    "text": "list of things that we can write to arbitrary secure memory and we can depending on how we design the rest of",
    "start": "1775640",
    "end": "1781799"
  },
  {
    "text": "the exploit just pick the one that that suits the task at hand and now the only missing piece here",
    "start": "1781799",
    "end": "1787720"
  },
  {
    "text": "is actually finding a way to to win you know we have a more flexible right primitive but how do we actually get",
    "start": "1787720",
    "end": "1792760"
  },
  {
    "text": "code execution well re visiting how qse",
    "start": "1792760",
    "end": "1799720"
  },
  {
    "start": "1794000",
    "end": "1794000"
  },
  {
    "text": "actually handles SMC instructions so when an SMC instruction is issued Q will",
    "start": "1799720",
    "end": "1806240"
  },
  {
    "text": "parse the command structure and it will iterate over a table with these variable",
    "start": "1806240",
    "end": "1811679"
  },
  {
    "text": "length entries where each entry corresponds to an SMC Handler sort of like a a system call Handler um where",
    "start": "1811679",
    "end": "1819960"
  },
  {
    "text": "each entry contains an SMC number which is just the identifier of of the SMC request a a pointer to a string",
    "start": "1819960",
    "end": "1827399"
  },
  {
    "text": "describing the Handler which was incredibly useful when trying to figure out what each of these handlers actually",
    "start": "1827399",
    "end": "1832559"
  },
  {
    "text": "did uh various flags and then a function pointer to the actual function that gets invoked by qse",
    "start": "1832559",
    "end": "1840200"
  },
  {
    "text": "when this when this SMC request matching this ID is issued a number of arguments",
    "start": "1840200",
    "end": "1845399"
  },
  {
    "text": "field and then a variable length array whose length depends on this number of arguments field because this variable",
    "start": "1845399",
    "end": "1851679"
  },
  {
    "text": "length array is um actually contains one entry for each argument and each entry",
    "start": "1851679",
    "end": "1858399"
  },
  {
    "text": "corresponds to the length of each",
    "start": "1858399",
    "end": "1861679"
  },
  {
    "start": "1863000",
    "end": "1863000"
  },
  {
    "text": "argument so I ended up using the ability to write essentially arbitrary data to",
    "start": "1863840",
    "end": "1870279"
  },
  {
    "text": "arbitrary qce memory to create what I call an SMC table extension attack so I",
    "start": "1870279",
    "end": "1877559"
  },
  {
    "text": "actually use arbitrary secure memory to modify the number of arguments field in",
    "start": "1877559",
    "end": "1882679"
  },
  {
    "text": "one of the SMC tables table entries rather now what I I",
    "start": "1882679",
    "end": "1888080"
  },
  {
    "text": "did was I actually expanded the size of one of these SMC entries so that it's",
    "start": "1888080",
    "end": "1893760"
  },
  {
    "text": "particularly massive and that when QSC is iterating through this table and",
    "start": "1893760",
    "end": "1898960"
  },
  {
    "text": "tries to find the location of the next um SMC entry it will actually jump way",
    "start": "1898960",
    "end": "1905399"
  },
  {
    "text": "into non-secure attacker controlled memory at which point we can put a fake",
    "start": "1905399",
    "end": "1911639"
  },
  {
    "text": "entry there and at this point we control an SMC Handler we can make up an C ID",
    "start": "1911639",
    "end": "1919559"
  },
  {
    "text": "point the function pointer anywhere we want in Secure memory and craft any sort of set of",
    "start": "1919559",
    "end": "1925880"
  },
  {
    "text": "arbitrary arguments and basically call any function in trust Zone at at whim",
    "start": "1925880",
    "end": "1931919"
  },
  {
    "text": "with any arguments we want which in my opinion is a fairly elegant way to gain total control of trust",
    "start": "1931919",
    "end": "1939559"
  },
  {
    "text": "Zone at this point we have arbitrary trust own code execution and we have we have W um one of the fun things you can",
    "start": "1939559",
    "end": "1947679"
  },
  {
    "start": "1940000",
    "end": "1940000"
  },
  {
    "text": "do is actually find the mem copy implementation in the trust Zone kernel and actually just invoke that to copy",
    "start": "1947679",
    "end": "1954880"
  },
  {
    "text": "all of secure memory to a non-secure buffer um so this would allow you to steal any DRM or secure key storage",
    "start": "1954880",
    "end": "1962519"
  },
  {
    "text": "related stuff so any any sensitive data stored in Secure memory now becomes available to the attacker uh you could",
    "start": "1962519",
    "end": "1968760"
  },
  {
    "text": "disable teema you could disable any piece of security related functionality in Trestle and you have full control and",
    "start": "1968760",
    "end": "1974919"
  },
  {
    "text": "then perhaps the flashiest thing you can do um is invoke OEM specific functionality to do things like",
    "start": "1974919",
    "end": "1980600"
  },
  {
    "text": "permanently unlock a bootloader of a device so that's what I'm going to do right now um so I have on stage a",
    "start": "1980600",
    "end": "1988960"
  },
  {
    "text": "Verizon branded Moto Moto X so the way that Motorola implements",
    "start": "1988960",
    "end": "1994679"
  },
  {
    "text": "secure boot is by featuring a um a manufacturer",
    "start": "1994679",
    "end": "2001240"
  },
  {
    "text": "sponsored mechanism to unlock the boot loader to which would allow users to install custom operating systems and so",
    "start": "2001240",
    "end": "2007159"
  },
  {
    "text": "forth and the way they do that is the user actually sends Motorola a request",
    "start": "2007159",
    "end": "2013039"
  },
  {
    "text": "token that they got from their device if the if that token matches a device on an approved carrier then Motorola will send",
    "start": "2013039",
    "end": "2020480"
  },
  {
    "text": "a token in response that the user can then issue to the bootloader and the bootloader will make a request of trust",
    "start": "2020480",
    "end": "2026200"
  },
  {
    "text": "Zone to unlock permanently by blowing a q fuse now and they for Verizon and",
    "start": "2026200",
    "end": "2033120"
  },
  {
    "text": "AT&T um they just won't give you a response token back so there's no way to",
    "start": "2033120",
    "end": "2038200"
  },
  {
    "text": "unlock your boot order except if you have a single TruStone vulnerability you can actually do it yourself by just",
    "start": "2038200",
    "end": "2044120"
  },
  {
    "text": "invoking the functionality that they would do if you gave them the the response token so here I've got",
    "start": "2044120",
    "end": "2051060"
  },
  {
    "text": "[Music] um we've got a uh Verizon Moto X running",
    "start": "2051060",
    "end": "2058240"
  },
  {
    "text": "Android 4.4 um as you can see it is not unlocked um and the warranty is still",
    "start": "2058240",
    "end": "2066158"
  },
  {
    "text": "present so I need to to continue booting so this will take just a moment",
    "start": "2066159",
    "end": "2074000"
  },
  {
    "text": "so this is an incredibly risky demo because first of all it's live which is always a bad idea but additionally um",
    "start": "2074000",
    "end": "2080679"
  },
  {
    "text": "you can only do this once to a phone because you're permanently blowing a fuse so I obviously have never tested it",
    "start": "2080679",
    "end": "2086919"
  },
  {
    "text": "on this phone so who knows what's going to happen it's the uh I think it's the second riskiest thing I did in this talk",
    "start": "2086919",
    "end": "2092440"
  },
  {
    "text": "the first was uh using open Office to make my slides um",
    "start": "2092440",
    "end": "2098200"
  },
  {
    "text": "okay so just using ADB we have a shell I'm going to use uh an implementation of",
    "start": "2098200",
    "end": "2104280"
  },
  {
    "text": "the recent Linux fext vulnerability to escalate privileges to root and then I going to cross my",
    "start": "2104280",
    "end": "2112200"
  },
  {
    "text": "fingers and hope that this",
    "start": "2112200",
    "end": "2116040"
  },
  {
    "text": "works well it didn't",
    "start": "2121000",
    "end": "2125880"
  },
  {
    "text": "break",
    "start": "2126640",
    "end": "2129640"
  },
  {
    "text": "and we're going to pull up the bootloader variables again and we can see that the device is now",
    "start": "2135920",
    "end": "2141680"
  },
  {
    "text": "unlocked so at this point you can actually use uh fast boot which is boot built into the boot order to flash any",
    "start": "2147359",
    "end": "2153520"
  },
  {
    "text": "software you'd like on this phone so as far as I know this is the only are one of the only Verizon Moto Moto X's in the",
    "start": "2153520",
    "end": "2160359"
  },
  {
    "text": "world that's unlocked uh so a few lessons can be",
    "start": "2160359",
    "end": "2165599"
  },
  {
    "start": "2163000",
    "end": "2163000"
  },
  {
    "text": "learned from this research uh one of the most practical ones is that analysis and exploitation of of truss Zone was made",
    "start": "2165599",
    "end": "2172160"
  },
  {
    "text": "much easier due to the fact that there's no sort of protection or encryption of the TruStone image itself you can",
    "start": "2172160",
    "end": "2178560"
  },
  {
    "text": "compare this to iOS where truss zone is actually stored encrypted on disk and as",
    "start": "2178560",
    "end": "2184319"
  },
  {
    "text": "a result without either a leak of firmware from Apple or um exploiting",
    "start": "2184319",
    "end": "2189720"
  },
  {
    "text": "trust Zone itself which is basically impossible if you've never had a trust Zone image to analyze in the first place",
    "start": "2189720",
    "end": "2196520"
  },
  {
    "text": "uh you need an i booot vulnerability to actually gain access to a decrypted trone image to analyze in the first",
    "start": "2196520",
    "end": "2202200"
  },
  {
    "text": "place uh next uh parsing of complex data structures in this case these command",
    "start": "2202200",
    "end": "2208640"
  },
  {
    "text": "buffers uh seem like a fairly obvious point of of failure so as a vulnerability researcher uh places like",
    "start": "2208640",
    "end": "2214920"
  },
  {
    "text": "this are are really good targets uh for scrutiny uh the next thing is as a as a",
    "start": "2214920",
    "end": "2220040"
  },
  {
    "text": "researcher it's important to learn to develop a spider sense and learn how to trust your gut um if it looks sketchy it",
    "start": "2220040",
    "end": "2227200"
  },
  {
    "text": "it very likely is in this case the uh minute I saw in the assembly code this uh reversal of arguments in the case of",
    "start": "2227200",
    "end": "2233319"
  },
  {
    "text": "an erroneous call that seemed to to yell out at me as something that was potentially bad even though I didn't",
    "start": "2233319",
    "end": "2239000"
  },
  {
    "text": "know immediately what that would be and it turned out to be a very critical vulnerability uh next just looking at",
    "start": "2239000",
    "end": "2246920"
  },
  {
    "text": "for example bootloader design single points of failure are a bad idea when you look at Samsung's implementation of",
    "start": "2246920",
    "end": "2252839"
  },
  {
    "text": "secure boot for example there's no single point of failure there's no off switch that allows you to exploit",
    "start": "2252839",
    "end": "2258760"
  },
  {
    "text": "something and unlock the bootloader in contrast to Motorola which made a design decision that makes it easier for them",
    "start": "2258760",
    "end": "2265000"
  },
  {
    "text": "because now they don't have to ship different software or or hardware for different carriers but they also",
    "start": "2265000",
    "end": "2270640"
  },
  {
    "text": "included a mechanism by which any single TruStone vulnerability will result in a permanent unlock of of Motorola",
    "start": "2270640",
    "end": "2276839"
  },
  {
    "text": "bootloader which is great if you if you're like me and you like installing stuff on your phone but not so good for motorol as",
    "start": "2276839",
    "end": "2284760"
  },
  {
    "text": "customers uh next I think the basic idea",
    "start": "2284760",
    "end": "2290160"
  },
  {
    "text": "and design of trust zone is is excellent um having Hardware enforc security boundaries and a minimal core operating",
    "start": "2290160",
    "end": "2297960"
  },
  {
    "text": "system component that is considered trusted um is a great idea but unfortunately",
    "start": "2297960",
    "end": "2304880"
  },
  {
    "text": "what I think we've been seeing here is that so many vendors are so jazzed about about trust Zone that there's been so",
    "start": "2304880",
    "end": "2312079"
  },
  {
    "text": "much feature bloat that the attack surface in trust Zone itself has widened substantially um and that sort of",
    "start": "2312079",
    "end": "2318319"
  },
  {
    "text": "eliminates one of the big advantages of having a system like trust Zone which is designed to be small and then finally I",
    "start": "2318319",
    "end": "2324520"
  },
  {
    "text": "think everyone in here already knew this but the best marketing team in the world will not change the fact that software",
    "start": "2324520",
    "end": "2329640"
  },
  {
    "text": "is written by humans and humans occasionally make mistakes so despite the fact that something maybe build as",
    "start": "2329640",
    "end": "2335000"
  },
  {
    "text": "100% secure and no joke I have actually seen that that in in uh media reports about trust Zone um that does not mean",
    "start": "2335000",
    "end": "2342240"
  },
  {
    "text": "that it it's not worthy of attention and scrutiny and there aren't bugs",
    "start": "2342240",
    "end": "2347280"
  },
  {
    "text": "there uh that's it so I had a contact slide but that's all right that's the",
    "start": "2347280",
    "end": "2354079"
  },
  {
    "text": "end of my talk thank",
    "start": "2354079",
    "end": "2356839"
  },
  {
    "text": "you",
    "start": "2364000",
    "end": "2367000"
  }
]