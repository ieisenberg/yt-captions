[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "so with that out of the way um let's kick the session off the session is uh",
    "start": "40",
    "end": "5160"
  },
  {
    "text": "thinking outside the sandbox violating trust boundaries in uncommon ways with Brian goren and jasel Spellman thank",
    "start": "5160",
    "end": "14000"
  },
  {
    "text": "[Applause] you hello everyone uh welcome this is",
    "start": "14000",
    "end": "19840"
  },
  {
    "text": "thinking outside of the sandbox um I'm glad you could roll out of bed this morning after probably drinking all night to attend our talk um jel and I",
    "start": "19840",
    "end": "26960"
  },
  {
    "text": "are honored to be speaking here today um there's been a lot of innovative exploitation talks this year at blackhead we're glad to be part of that",
    "start": "26960",
    "end": "33120"
  },
  {
    "text": "list of of chosen speakers um and we hope you greatly enjoy the talk and learn a lot of things about sandbox",
    "start": "33120",
    "end": "39239"
  },
  {
    "text": "bypasses that you may not know today um if you attended forshaw's talk earlier",
    "start": "39239",
    "end": "44280"
  },
  {
    "text": "yesterday um you'll see a little bit of technique overlap which is kind of interesting to see that there are",
    "start": "44280",
    "end": "49480"
  },
  {
    "text": "researchers all around the world who are finding similar vulnerabilities in the sandbox um and which is allowing them to",
    "start": "49480",
    "end": "55800"
  },
  {
    "text": "escape first we'll kind of go over the agenda um we're going first you know for the the people in the audience who've",
    "start": "55800",
    "end": "61120"
  },
  {
    "text": "done a little bit of sandbox Escape work uh you know you can probably ignore the first two sections we're going to cover",
    "start": "61120",
    "end": "66600"
  },
  {
    "text": "how uh what exactly a Sandbox is um and how it's implemented and try to bring everybody up to a point where they can",
    "start": "66600",
    "end": "72159"
  },
  {
    "text": "understand the attacks um then we're going to talk about how you actually attack the sandbox itself and the",
    "start": "72159",
    "end": "77280"
  },
  {
    "text": "different archetypes that exist uh to go after getting a privilege escalation and then we're going to discuss uh four Cas",
    "start": "77280",
    "end": "83960"
  },
  {
    "text": "case studies that showed up at this year's Ponda own two of them are Google Chrome sandbox bypasses and two of them",
    "start": "83960",
    "end": "89640"
  },
  {
    "text": "are Microsoft Internet Explorer sandbox bypasses and one of them is actually an active zero day we're releasing it today",
    "start": "89640",
    "end": "96320"
  },
  {
    "text": "uh for everybody to to see um you can you know because Google's uh patched",
    "start": "96320",
    "end": "101960"
  },
  {
    "text": "both of their sandbox bypasses you can imagine which vendor the zero day applies to but uh we're going to be you",
    "start": "101960",
    "end": "108560"
  },
  {
    "text": "know discussing some of those more obscure techniques throughout the talk little bit of introduction uh my",
    "start": "108560",
    "end": "114920"
  },
  {
    "text": "name is Brian goren I'm the manager of vulnerability research inside of um HP security research organization uh my",
    "start": "114920",
    "end": "122159"
  },
  {
    "text": "primary responsibility is running the zero day initiative which is the world's largest vendor agnostic bug Bounty",
    "start": "122159",
    "end": "128399"
  },
  {
    "text": "program uh through this program we've been able to inject uh over $10 million into white hat research uh and the",
    "start": "128399",
    "end": "134840"
  },
  {
    "text": "vulnerability Marketplace to get uh bugs fixed we' fixed over the lifetime of the program over 1600 zero days many in",
    "start": "134840",
    "end": "141120"
  },
  {
    "text": "which uh fall into critical software like Internet Explorer SK systems and things like that",
    "start": "141120",
    "end": "148400"
  },
  {
    "text": "um I'm also responsible for running the Ponda own competition uh every year this year we I think patched or well at least",
    "start": "148400",
    "end": "156040"
  },
  {
    "text": "disclosed 30 zero days to vendors uh and I think spent out more than $700,000 to",
    "start": "156040",
    "end": "161480"
  },
  {
    "text": "the best exploiters in the world in my free time I like to look for bugs and then when I'm not organizing and running",
    "start": "161480",
    "end": "167680"
  },
  {
    "text": "zdi uh I'd like to do case analysis on all the submissions from everybody in the world who submits to the program I'm",
    "start": "167680",
    "end": "174000"
  },
  {
    "text": "malicious input on Twitter uh and I also run the zdi handle how's it going I'm J Spellman and",
    "start": "174000",
    "end": "180720"
  },
  {
    "start": "178000",
    "end": "178000"
  },
  {
    "text": "I'm also part of the HP security research team I'm actually uh Brian is my boss I'm also part of the zero day",
    "start": "180720",
    "end": "187040"
  },
  {
    "text": "initiative and as a result I spent a fair amount of time analyzing the bugs that are submitted to us as well as",
    "start": "187040",
    "end": "192480"
  },
  {
    "text": "analyzing and exploiting any bugs that we find internally as a result I spent a lot of time staring at Ida and also",
    "start": "192480",
    "end": "199720"
  },
  {
    "text": "instrumenting binaries with pin Dynamo Rio or even just uh injecting python to",
    "start": "199720",
    "end": "205319"
  },
  {
    "text": "then have arbitrary assembly uh inserted into the process uh I'm wandering glitch",
    "start": "205319",
    "end": "210720"
  },
  {
    "text": "on Twitter and I'm also one of the guys behind the the zdi",
    "start": "210720",
    "end": "215560"
  },
  {
    "text": "account all right so what we're looking at today is actually attacking the modern web browser uh and if you talk to",
    "start": "217840",
    "end": "223519"
  },
  {
    "start": "218000",
    "end": "218000"
  },
  {
    "text": "the people who actually do exploitation against the browsers they'll tell you that it is getting harder uh to do this",
    "start": "223519",
    "end": "229439"
  },
  {
    "text": "and to actually um get code all the way through the browser through the sandbox so that you have elevated privileges to",
    "start": "229439",
    "end": "234920"
  },
  {
    "text": "do something actually interesting um but if you actually look at the type of attacks that they're using",
    "start": "234920",
    "end": "240400"
  },
  {
    "text": "uh first they have to find a vulnerability in the actual renderer process um which allows them to get code",
    "start": "240400",
    "end": "245879"
  },
  {
    "text": "execution uh they've got to bypass all the mitigations that exist including aslr leaking an address to find them",
    "start": "245879",
    "end": "252280"
  },
  {
    "text": "find where their code is running in memory develop the r chain on the Fly uh so that they can bypass uh D um and once",
    "start": "252280",
    "end": "259280"
  },
  {
    "text": "they've actually got that code running uh it's just running at low integrity and then a low Integrity you don't",
    "start": "259280",
    "end": "264360"
  },
  {
    "text": "really have access to a lot of resources and stuff that will allow you to um like persist a piece of M",
    "start": "264360",
    "end": "270680"
  },
  {
    "text": "um along with this the developers of the browsers are implementing a lot of new mitigations um if you look at uh",
    "start": "270680",
    "end": "277080"
  },
  {
    "text": "partition Alec and oil pan and chrome and Microsoft's uh recently released yet",
    "start": "277080",
    "end": "282400"
  },
  {
    "text": "not announced um used after free mitigations uh called isolated Heap and memory protection they're doing a lot of",
    "start": "282400",
    "end": "288840"
  },
  {
    "text": "work to stop uh exploitation of some of the most common vulnerability types in the renderer process um but once you",
    "start": "288840",
    "end": "295080"
  },
  {
    "text": "have that that code running at low Integrity you need to actually break out of the sandbox to do do anything",
    "start": "295080",
    "end": "300320"
  },
  {
    "text": "interesting and so that's where this talk actually starts we're going to make the assumption that you have code",
    "start": "300320",
    "end": "305600"
  },
  {
    "text": "execution in the browser and you need to attack the sandbox to elevate privileges um so you can do more interesting",
    "start": "305600",
    "end": "313600"
  },
  {
    "text": "things but first we need to understand what exactly a Sandbox is and if we look at this from an academic perspective um",
    "start": "313759",
    "end": "320440"
  },
  {
    "text": "all the application developers are trying to do is create a clear separation inside of their application",
    "start": "320440",
    "end": "326039"
  },
  {
    "text": "um where data crosses a TR a boundary of trust um you know this boundary there on",
    "start": "326039",
    "end": "331199"
  },
  {
    "text": "one side is untrusted processing on the other side is TR uh is trusted processing and at this boundary they can",
    "start": "331199",
    "end": "337720"
  },
  {
    "text": "actually validate the input that's coming in and enforce a set of security policies um to verify that the the code",
    "start": "337720",
    "end": "344160"
  },
  {
    "text": "that's coming in should be allowed to run in elevated privileges um they are actually considering the fact that their",
    "start": "344160",
    "end": "350120"
  },
  {
    "text": "untrusted code actually contains zero uh zero days and code execution vulnerabilities in them if you look at a",
    "start": "350120",
    "end": "356680"
  },
  {
    "text": "lot of the uh zero days that are released or active in the wild the first mitigation that Microsoft releases is go",
    "start": "356680",
    "end": "363120"
  },
  {
    "text": "enable enhanced protected mode and go enable EMT to actually stop it they're relying heavily on these browser imple",
    "start": "363120",
    "end": "369319"
  },
  {
    "text": "uh the sandbox implementations to actually stop um the zero day attack from being",
    "start": "369319",
    "end": "375680"
  },
  {
    "text": "useful but if we want to understand exactly how it's implemented we need to go back to 2007 uh when Microsoft's",
    "start": "376039",
    "end": "382800"
  },
  {
    "start": "377000",
    "end": "377000"
  },
  {
    "text": "David LeBlanc leaded uh released a series of blog posts called uh pratical practical Windows sandboxing where he",
    "start": "382800",
    "end": "389080"
  },
  {
    "text": "released a set of best practices uh for application developers to use uh to sandbox their",
    "start": "389080",
    "end": "395240"
  },
  {
    "text": "application uh obviously the vendors take these best practices and Implement them to varying degrees but the first",
    "start": "395240",
    "end": "401120"
  },
  {
    "text": "recommendation that he actually provided was that the process that is running should be",
    "start": "401120",
    "end": "406160"
  },
  {
    "text": "running using a restricted access token what exactly is an access token it identifies uh the Privileges of the user",
    "start": "406160",
    "end": "413319"
  },
  {
    "text": "account associated with the process and a restricted access token is exactly what it sounds like it's an access token",
    "start": "413319",
    "end": "419440"
  },
  {
    "text": "and that has restricted uh SIDS disabled security identifiers and deleted Privileges and what you see on the",
    "start": "419440",
    "end": "425440"
  },
  {
    "text": "screen is the access tokens for both Internet Explorer and chrome and you can",
    "start": "425440",
    "end": "430479"
  },
  {
    "text": "see the the level of difference between the two uh sandbox process where Chrome really has no privileges assigned to it",
    "start": "430479",
    "end": "437560"
  },
  {
    "text": "and Microsoft's Internet Explorer does have some Google Chrome has a lot more denied SIDS than um Microsoft Internet",
    "start": "437560",
    "end": "443319"
  },
  {
    "text": "explor why that is I don't know but um as an application developer if you want to run with a restricted access token uh",
    "start": "443319",
    "end": "449759"
  },
  {
    "text": "you should be using Create restricted token or adjust token privileges API calls to get those",
    "start": "449759",
    "end": "456199"
  },
  {
    "text": "tokens the next recommendation that LeBlanc uh suggested was that application developers use what's called",
    "start": "456199",
    "end": "461440"
  },
  {
    "start": "457000",
    "end": "457000"
  },
  {
    "text": "a job object a job object is a part of the oper is a mechanism in the operating",
    "start": "461440",
    "end": "466840"
  },
  {
    "text": "system to manage a group of processes as a single unit and apply restrictions to that single unit that get applied to the",
    "start": "466840",
    "end": "473440"
  },
  {
    "text": "processes that are associated with it there are a lot of limitations that you can actually uh Implement using a job uh",
    "start": "473440",
    "end": "480479"
  },
  {
    "text": "job object first is limiting the number of active processes associated with a job object uh in the case of what you",
    "start": "480479",
    "end": "486639"
  },
  {
    "text": "see on the screen that's Google Chrome's job object and they restrict access to uh active processes to one um along with",
    "start": "486639",
    "end": "494440"
  },
  {
    "text": "there's other limitations that can be uh uh applied to the job object including creating and switching desktops exiting",
    "start": "494440",
    "end": "501240"
  },
  {
    "text": "Windows reading and writing from the clipboard uh and changing system privileges and so what you see uh in",
    "start": "501240",
    "end": "507840"
  },
  {
    "text": "fact Google Chrome actually uses the job object they apply almost every restriction that's available to the job",
    "start": "507840",
    "end": "513039"
  },
  {
    "text": "object where this is the same for Adobe Reader um Internet Explorer does not use a job object at all the last time I",
    "start": "513039",
    "end": "519120"
  },
  {
    "text": "checked um so you know I don't understand why but that's what they do they I'm sure have other",
    "start": "519120",
    "end": "525640"
  },
  {
    "start": "522000",
    "end": "522000"
  },
  {
    "text": "restrictions the final recommendation for uh a Sandbox application uh that",
    "start": "525640",
    "end": "531000"
  },
  {
    "text": "LeBlanc provided was to run on an isolated Windows station and desktop a Windows station is des desktop is a",
    "start": "531000",
    "end": "538000"
  },
  {
    "text": "mechanism inside of the operating system uh for managing user interface objects um for a window station it provides a",
    "start": "538000",
    "end": "544839"
  },
  {
    "text": "clipboard it provides an atom table it provides the desktop itself uh and the desktop actually provides all of the",
    "start": "544839",
    "end": "550240"
  },
  {
    "text": "user interface objects like Windows menus and things like that uh the interesting thing is all the processes",
    "start": "550240",
    "end": "556079"
  },
  {
    "text": "that are associated with a single desktop can communicate with each other using window procedures and window",
    "start": "556079",
    "end": "561560"
  },
  {
    "text": "messages and hook procedures and actually in the past um there was a thing a an attack called the shatter",
    "start": "561560",
    "end": "567360"
  },
  {
    "text": "attack that actually allowed you to elevate privileges by using window messages and hook procedures uh to elevate privileges in other processes",
    "start": "567360",
    "end": "574320"
  },
  {
    "text": "that are running on the same desktop uh the idea of isolating an application on a unique desktop is to uh",
    "start": "574320",
    "end": "581600"
  },
  {
    "text": "enforce uh reduce the ability for a compromised process to move laterally throughout the other processes that are",
    "start": "581600",
    "end": "587880"
  },
  {
    "text": "exist on the same desktop and so you'll see Google Chrome's renderer process runs on its own desktop this is actually",
    "start": "587880",
    "end": "594160"
  },
  {
    "text": "important to understand uh for an attack that we're going to show later uh that takes advantage of a clipboard uh",
    "start": "594160",
    "end": "602639"
  },
  {
    "text": "attack so one of the most uh I guess popular ways to actually Implement a the sandbox combining all of those things",
    "start": "602760",
    "end": "609519"
  },
  {
    "start": "603000",
    "end": "603000"
  },
  {
    "text": "along with man uh along with mandatory Integrity controls which were introduced in Microsoft's Vista there are five",
    "start": "609519",
    "end": "615399"
  },
  {
    "text": "levels in the operating system for integrity um and they really represent the level of trust in a process lower",
    "start": "615399",
    "end": "621079"
  },
  {
    "text": "Integrity processes don't have access to all the resources that a higher Integrity process would have so you can",
    "start": "621079",
    "end": "627279"
  },
  {
    "text": "see an Internet Explorer if you run process Explorer and you'll see that later in the presentation the renderer process itself is running at low",
    "start": "627279",
    "end": "633600"
  },
  {
    "text": "Integrity where the broker code is running at medium Integrity in Google Chrome they decided to use the untrusted",
    "start": "633600",
    "end": "639800"
  },
  {
    "text": "uh Integrity level for their renderer and medium Integrity for their broker we'll show you both of those later",
    "start": "639800",
    "end": "646040"
  },
  {
    "text": "another interesting thing that they introduced in Windows Vista is the user interface privilege",
    "start": "646040",
    "end": "651120"
  },
  {
    "text": "isolation which prevents lower Integrity processes from sending window messages and hook procedures to higher Integrity",
    "start": "651120",
    "end": "657560"
  },
  {
    "text": "processes um effectively trying to stop shatter attacks and privilege escalations that",
    "start": "657560",
    "end": "664200"
  },
  {
    "text": "way next uh is uh sandbox",
    "start": "665720",
    "end": "670880"
  },
  {
    "start": "666000",
    "end": "666000"
  },
  {
    "text": "communication if we look at if you try to isolate your your application um it",
    "start": "670880",
    "end": "676480"
  },
  {
    "text": "still has to provide a certain level of feature set to be competitive on the market and so the application developers",
    "start": "676480",
    "end": "683279"
  },
  {
    "text": "have to communicate this low Integrity process has to communicate back to the higher Integrity part of the the",
    "start": "683279",
    "end": "688360"
  },
  {
    "text": "application to actually provide these uh elevated privileges this elevated functionality",
    "start": "688360",
    "end": "694000"
  },
  {
    "text": "uh and this communication usually takes place um in two different types uh in Google Chrome and an Adobe Reader",
    "start": "694000",
    "end": "700440"
  },
  {
    "text": "they're using a shared IPC interface to actually do this broker communication uh",
    "start": "700440",
    "end": "705639"
  },
  {
    "text": "uh providing the apis for the broker and you'll see a couple of those later in the presentation um an Internet Explorer",
    "start": "705639",
    "end": "711360"
  },
  {
    "text": "uh large majority of its um uh elevated privilege processing actually happens",
    "start": "711360",
    "end": "716720"
  },
  {
    "text": "through Comm objects um these at this point the these apis actually enforce",
    "start": "716720",
    "end": "722440"
  },
  {
    "text": "all of the validation and and and the security policies so they make sure that files aren't being being written outside",
    "start": "722440",
    "end": "728480"
  },
  {
    "text": "of the sandboxed areas uh and making sure that the the information is valid as it crosses that trust",
    "start": "728480",
    "end": "735160"
  },
  {
    "text": "boundary um there are other uh sandboxing Technologies things like app container um recently in Windows 8 um",
    "start": "735160",
    "end": "742399"
  },
  {
    "start": "736000",
    "end": "736000"
  },
  {
    "text": "some of these things aren't on by default so we didn't include them in the presentation um you know I guess if",
    "start": "742399",
    "end": "747440"
  },
  {
    "text": "you're using metro mode you get uh get access to app container by default but I don't think anybody actually in this",
    "start": "747440",
    "end": "752680"
  },
  {
    "text": "audience uses iie in Metro mode so um we didn't include it in the",
    "start": "752680",
    "end": "758880"
  },
  {
    "text": "presentation next is we're going to next now that you kind of understand how uh sandbox process uh or how you actually",
    "start": "758880",
    "end": "765000"
  },
  {
    "text": "sandbox a process we're going to look at how how you would attack that implementation um and what are the most",
    "start": "765000",
    "end": "770800"
  },
  {
    "text": "common techniques for doing this first is uh finding a vulnerability",
    "start": "770800",
    "end": "776600"
  },
  {
    "text": "in the kernel obviously this is um you know game over if you have a vulnerability in the kernel you can get",
    "start": "776600",
    "end": "782320"
  },
  {
    "text": "system level code execution or privilege escalation and this is obviously um you",
    "start": "782320",
    "end": "787920"
  },
  {
    "text": "know would be much more valuable than actually medium level Integrity code execution um the issue is the colel CER",
    "start": "787920",
    "end": "793959"
  },
  {
    "text": "vulnerabilities are difficult to discover they do happen but that code is typically uh gone through a lot of",
    "start": "793959",
    "end": "799839"
  },
  {
    "text": "Security reviews and it's highly tested prior to its release um so it is more",
    "start": "799839",
    "end": "805120"
  },
  {
    "text": "difficult to find but um at this the last uh two years of P own contestants have brought in system level code ex or",
    "start": "805120",
    "end": "812360"
  },
  {
    "text": "privilege escalation bugs as part of their attacks and what you see on the screen is actually a picture I took at",
    "start": "812360",
    "end": "818600"
  },
  {
    "text": "Ponda own during when we were disclosing to Microsoft uh this exploit um it's Sebastian's and Andreas uh exploit it's",
    "start": "818600",
    "end": "827440"
  },
  {
    "text": "what you see on the screen is actually a system level calculator running which is obviously not supposed to happen um but",
    "start": "827440",
    "end": "833000"
  },
  {
    "text": "in in Ponda own 2013 yeah it's pretty common at Ponda",
    "start": "833000",
    "end": "838360"
  },
  {
    "text": "own at least it's common um the uh the system level in 2013 uh there was a",
    "start": "838360",
    "end": "843600"
  },
  {
    "text": "system level compromise through Google Chrome John Butler and Nils from MWR lab abused a um a vulnerability an anti-user",
    "start": "843600",
    "end": "851199"
  },
  {
    "text": "message call what yeah uh and it was due to the way that that function call actually misused a Boolean argument that",
    "start": "851199",
    "end": "858240"
  },
  {
    "text": "was a slick bug um and in 2014 this year um there was a vulnerability system",
    "start": "858240",
    "end": "863880"
  },
  {
    "text": "level compromise through Internet Explorer where Sebastian and Andreas abused a couple years after free to get",
    "start": "863880",
    "end": "869120"
  },
  {
    "text": "code execution uh in the renderer process and um and once they were running there they abused a double free",
    "start": "869120",
    "end": "875079"
  },
  {
    "text": "vulnerability in the afd.sys driver um to gain system level code execution and I believe uh correct me if",
    "start": "875079",
    "end": "881720"
  },
  {
    "text": "I'm wrong but that actually won the pony for the best privilege escalation for the year um that was a killer bug",
    "start": "881720",
    "end": "886880"
  },
  {
    "text": "there's a badass write up on the Internet so you should go check it out uh next um Beyond looking just at",
    "start": "886880",
    "end": "893880"
  },
  {
    "start": "891000",
    "end": "891000"
  },
  {
    "text": "the kernel which is actually a hard attack surface um there's the going after the actual IPC and the",
    "start": "893880",
    "end": "900040"
  },
  {
    "text": "communication mechanisms that are implemented by the browsers um there are two the most common types uh for uh for",
    "start": "900040",
    "end": "908000"
  },
  {
    "text": "abuse of broker apis first is memory corruption which where the broker",
    "start": "908000",
    "end": "913160"
  },
  {
    "text": "actually mishandles the parameters that are coming in uh from the low Integrity process and there's also logic errors",
    "start": "913160",
    "end": "919639"
  },
  {
    "text": "where you're able to bypass the security policies and Elevate privileges that way uh two case studies that we're going to",
    "start": "919639",
    "end": "925160"
  },
  {
    "text": "look at is um Adobe readers the first Adobe Reader sandbox Escape that was found in the wild it actually abused a",
    "start": "925160",
    "end": "931600"
  },
  {
    "text": "heap overflow in um in how the sandbo or the broker actually handled G clipboard",
    "start": "931600",
    "end": "937639"
  },
  {
    "text": "format name W um and with that Heap overflow uh they were able to break out of the sandbox uh and and Elevate",
    "start": "937639",
    "end": "944680"
  },
  {
    "text": "privileges next is Microsoft Internet Explorer cve 2013 4",
    "start": "944680",
    "end": "950680"
  },
  {
    "text": "415 um this we consider a logic bug inside of uh Microsoft's G sanitized",
    "start": "950680",
    "end": "957240"
  },
  {
    "text": "parameters from non-quoted command line method call in this it's a long API call",
    "start": "957240",
    "end": "962600"
  },
  {
    "text": "the uh in this case this uh this method didn't properly handle uh the tab whites",
    "start": "962600",
    "end": "968519"
  },
  {
    "text": "space character and as a result a an attacker who had code execution in the renderer process uh could launch um an",
    "start": "968519",
    "end": "976240"
  },
  {
    "text": "attacker controlled uh specified executable name through the broker and effectively Elevate privileges uh to",
    "start": "976240",
    "end": "982319"
  },
  {
    "text": "what a two medium next is actually shared resources",
    "start": "982319",
    "end": "988560"
  },
  {
    "start": "985000",
    "end": "985000"
  },
  {
    "text": "this is actually becoming actually pretty common um when you look at a shared resource or or access to um",
    "start": "988560",
    "end": "994800"
  },
  {
    "text": "handles or sections or registry keys um this sharing typ or leaking of handles",
    "start": "994800",
    "end": "1000240"
  },
  {
    "text": "typically occurs uh either directly from the broker to the lower Integrity process or from a thirdparty dll that",
    "start": "1000240",
    "end": "1007199"
  },
  {
    "text": "provides back to the low Integrity process a a privileged handle um if you have access a right access to this",
    "start": "1007199",
    "end": "1013000"
  },
  {
    "text": "handle um it does provide it might provide an opportunity to escape depending on how the code actually uses",
    "start": "1013000",
    "end": "1019040"
  },
  {
    "text": "the handle um you'll see later on one of the Google Chrome sandbox bypasses abuses a privilege handle in a unique",
    "start": "1019040",
    "end": "1025480"
  },
  {
    "text": "way uh that in fact one of my favorites um in this case browser developers are",
    "start": "1025480",
    "end": "1031199"
  },
  {
    "text": "taking an active approach against this abuse of shared handles by restricting the uh the dlls and executables that are",
    "start": "1031199",
    "end": "1037480"
  },
  {
    "text": "allowed to be run by low Integrity processes this is typically in IE at least called elevation policy um which",
    "start": "1037480",
    "end": "1043160"
  },
  {
    "text": "we'll show later as well um there are additional vectors to",
    "start": "1043160",
    "end": "1049280"
  },
  {
    "start": "1046000",
    "end": "1046000"
  },
  {
    "text": "bypassing the sandbox that have have come up in the past uh you know researchers have abused a base named",
    "start": "1049280",
    "end": "1055280"
  },
  {
    "text": "object Nam space squatting uh null daal um and we actually released a socket based attack against uh last week",
    "start": "1055280",
    "end": "1062799"
  },
  {
    "text": "against Microsoft Internet Explorer that worked against the default installation of Internet Explorer 11 on Windows 8.1",
    "start": "1062799",
    "end": "1068559"
  },
  {
    "text": "using a socket based attack um uh the blog is out there it's a really interesting technique to bypass",
    "start": "1068559",
    "end": "1074160"
  },
  {
    "text": "protected mode um application developers though are um you know in the end have to balance the security of an",
    "start": "1074160",
    "end": "1080799"
  },
  {
    "text": "application and the function and the feature set that they have to provide and so it may provide that you as an attacker access um to escape the",
    "start": "1080799",
    "end": "1090480"
  },
  {
    "text": "sandbox and jz's going to come up and and start describing some of the attacks that we saw at Ponda",
    "start": "1090919",
    "end": "1097799"
  },
  {
    "start": "1092000",
    "end": "1092000"
  },
  {
    "text": "own all right so the way we'll do this is we'll show a video of the exploit actually taking place and then we'll go",
    "start": "1097919",
    "end": "1103960"
  },
  {
    "text": "into the details as to what the bug is and how they were able to exploit it",
    "start": "1103960",
    "end": "1110320"
  },
  {
    "start": "1110000",
    "end": "1110000"
  },
  {
    "text": "the first one was brought to us by vupen um they actually found this in 2011",
    "start": "1110480",
    "end": "1115559"
  },
  {
    "text": "though they brought it to Pon own in 2014 um it started off with a use after free in Flash in the external interface",
    "start": "1115559",
    "end": "1123200"
  },
  {
    "text": "object it was CBE 2014 0506 and the issue is a logic bug in the",
    "start": "1123200",
    "end": "1129520"
  },
  {
    "text": "um handling of the save as dialogue bug or dialogue window and I apologize the",
    "start": "1129520",
    "end": "1135720"
  },
  {
    "text": "spray is a bit long so be with a",
    "start": "1135720",
    "end": "1140720"
  },
  {
    "text": "sec and despite the fact that uh this does require user interaction there's no",
    "start": "1147440",
    "end": "1152600"
  },
  {
    "text": "good response despite what they're doing I should have recorded Mouse movements I'm actually going to hit cancel for this window and I'm not going to allow",
    "start": "1152600",
    "end": "1159000"
  },
  {
    "text": "the file to save but we'll see in a second that a file was actually written so there's hello. HTA and at the bottom",
    "start": "1159000",
    "end": "1167720"
  },
  {
    "text": "of it although it's bunch of binary there is um some controlled string at the bottom that in this case will",
    "start": "1167720",
    "end": "1174159"
  },
  {
    "text": "execute calc but could do anything so first you need to understand",
    "start": "1174159",
    "end": "1179720"
  },
  {
    "start": "1178000",
    "end": "1178000"
  },
  {
    "text": "why this sort of functionality would exist a renderer process runs at low integrity and as a result can't save",
    "start": "1179720",
    "end": "1185760"
  },
  {
    "text": "files to places like in the desktop or the download folder or documents wherever um places a user would actually",
    "start": "1185760",
    "end": "1191919"
  },
  {
    "text": "want to save things as a result the broker offers two com controls two Comm methods to allow for this uh the first",
    "start": "1191919",
    "end": "1199760"
  },
  {
    "text": "is in the C protected mode API object show save file dialogue and as the name",
    "start": "1199760",
    "end": "1205559"
  },
  {
    "text": "implies it shows it save file dialogue the one you see on the right side of the screen the renderer can specify a",
    "start": "1205559",
    "end": "1211960"
  },
  {
    "text": "default path to use at which point the user can overwrite and change it or do",
    "start": "1211960",
    "end": "1217039"
  },
  {
    "text": "whatever if the user then hits save a message is sent back to the renderer the renderer then downloads the file to some",
    "start": "1217039",
    "end": "1223600"
  },
  {
    "text": "location that is writable by a lowres process and then it calls the save file as function despite the name that",
    "start": "1223600",
    "end": "1230880"
  },
  {
    "text": "function actually just functions as a move and will move the file that's specified as an argument to the file",
    "start": "1230880",
    "end": "1237120"
  },
  {
    "text": "that was specified to show sa file dialogue and the issue here is that in show say file dialogue Microsoft was",
    "start": "1237120",
    "end": "1244360"
  },
  {
    "text": "well they had a logic bug one issue with this is downloaded files have the mark of the web applied to it so if someone",
    "start": "1244360",
    "end": "1251280"
  },
  {
    "text": "were to save a file to the startup folder then when uh the user logged back in and Explorer tried to execute it it",
    "start": "1251280",
    "end": "1258480"
  },
  {
    "text": "would prompt the user and make sure that they want to uh execute it so there was something else that they had to do to",
    "start": "1258480",
    "end": "1265360"
  },
  {
    "text": "use this or to get around that vupen used the C recovery store which is responsible for storing data about a",
    "start": "1265360",
    "end": "1272120"
  },
  {
    "text": "currently open tab anyone that's ever written an exploit for IE that wasn't successful the first time knows that I",
    "start": "1272120",
    "end": "1278080"
  },
  {
    "text": "is nice enough to run it again and that's thanks to the data stored by the C recovery",
    "start": "1278080",
    "end": "1283440"
  },
  {
    "text": "store um the file is stored in a predictable location however it's an Olay container and as you saw in the",
    "start": "1283440",
    "end": "1290600"
  },
  {
    "text": "notepad window during the video it has lots of binary thankfully the renderer",
    "start": "1290600",
    "end": "1295919"
  },
  {
    "text": "controls the string that's or the title that's written as well as the URL that gets written and the HTML application",
    "start": "1295919",
    "end": "1302919"
  },
  {
    "text": "parser is incredibly lenient this is the parser that handles HTA files it will",
    "start": "1302919",
    "end": "1308120"
  },
  {
    "text": "look for any script tag within the given file and as long as it finds a script tag it'll execute whatever's in it",
    "start": "1308120",
    "end": "1315440"
  },
  {
    "text": "blindly so putting it all together rupin triggered the use after free in Flash controlled it and then made a broker",
    "start": "1315440",
    "end": "1322120"
  },
  {
    "text": "call to show sa file dialogue with the destination in the startup folder and you can see um on the right side of the",
    "start": "1322120",
    "end": "1328440"
  },
  {
    "text": "top that they're setting the string to hello. HTA they then made a call to set current title which I should have",
    "start": "1328440",
    "end": "1334760"
  },
  {
    "text": "pointed out on the previous slide here you can see that uh they're controlling the string and putting malicious script",
    "start": "1334760",
    "end": "1340000"
  },
  {
    "text": "inside it and then they're calling safe file as and they're setting the source as the recovery source so they're",
    "start": "1340000",
    "end": "1346240"
  },
  {
    "text": "controlling the source and the destination and part of the string inside so that they can execute",
    "start": "1346240",
    "end": "1352279"
  },
  {
    "text": "calc the bug itself is due to the um handling of the state in show say file",
    "start": "1352279",
    "end": "1359200"
  },
  {
    "text": "dialogue it assumed success and would only reset things if a failure had occurred as a result despite the fact",
    "start": "1359200",
    "end": "1366559"
  },
  {
    "text": "that I hit cancel in the video the right was still able to be performed all the",
    "start": "1366559",
    "end": "1371600"
  },
  {
    "text": "renderer has to do is immediately issue this call to sa file as and then you'll",
    "start": "1371600",
    "end": "1376760"
  },
  {
    "text": "be able to have an arbit a file rate to remediate this Microsoft ended",
    "start": "1376760",
    "end": "1383240"
  },
  {
    "text": "up just doing the obvious thing which is only move into a success date when they've actually guaranteed and",
    "start": "1383240",
    "end": "1388400"
  },
  {
    "text": "confirmed that the user does indeed want to save the file and that there were no errors um raised by the IE get save file",
    "start": "1388400",
    "end": "1395559"
  },
  {
    "text": "name function in addition to make things a little bit more difficult they removed access to the C recovery store",
    "start": "1395559",
    "end": "1402480"
  },
  {
    "text": "previously this was accessible through the broker crate known object function which is a function that's ailable to",
    "start": "1402480",
    "end": "1408440"
  },
  {
    "text": "the renderer to instantiate a few com controls it takes a list of allowed classes and C recovery store is no",
    "start": "1408440",
    "end": "1415600"
  },
  {
    "text": "longer there however you still can indirectly access it through window messages and that you need to be able to",
    "start": "1415600",
    "end": "1421880"
  },
  {
    "text": "if it's to properly recovery tab oh and Microsoft patched that in",
    "start": "1421880",
    "end": "1427400"
  },
  {
    "start": "1426000",
    "end": "1426000"
  },
  {
    "text": "June of 2014 it was part of ms1435 this next vulnerability is a",
    "start": "1427400",
    "end": "1434400"
  },
  {
    "text": "Sandbox Escape in Google Chrome and I think it's my favorite because it's just so interesting um it starts off with cve",
    "start": "1434400",
    "end": "1442039"
  },
  {
    "text": "2014 17113 which was a use after free in the blink bindings however despite it",
    "start": "1442039",
    "end": "1448480"
  },
  {
    "text": "being blink it also affected webkit uh Ruben then exploited a chrome bypass in",
    "start": "1448480",
    "end": "1454679"
  },
  {
    "text": "the broker and then they got exploitation at medium Integrity by taking advantage of a buffer overflow in",
    "start": "1454679",
    "end": "1460440"
  },
  {
    "text": "direct show so here I'll show the video this one's fairly",
    "start": "1460440",
    "end": "1466799"
  },
  {
    "text": "quick",
    "start": "1466799",
    "end": "1469799"
  },
  {
    "text": "and so I'm just right clicking on the desktop and you can see calculators are just spawning um definitely my favorite",
    "start": "1473159",
    "end": "1479120"
  },
  {
    "text": "bug and here in process Explorer you can see that all those calculators are running at medium",
    "start": "1479120",
    "end": "1485398"
  },
  {
    "text": "Integrity so uh to understand why this happens you first need to understand that all the renderer processes for",
    "start": "1487320",
    "end": "1493480"
  },
  {
    "start": "1488000",
    "end": "1488000"
  },
  {
    "text": "Chrome run as untrusted but they also run in their own windows station and as",
    "start": "1493480",
    "end": "1498679"
  },
  {
    "text": "Brian had mentioned earlier this means that they have their own clipboard and their own atom table this means that if someone wants",
    "start": "1498679",
    "end": "1505520"
  },
  {
    "text": "to copy data from a renderer process the renderer has to send it to the broker and have the broker copy it to the",
    "start": "1505520",
    "end": "1511080"
  },
  {
    "text": "clipboard for them to that end the broker offers two cross calls clipboard host message and uh right objects async",
    "start": "1511080",
    "end": "1518600"
  },
  {
    "text": "and clipboard host message right object sync on Windows these end up calling the set when set clipboard data API which",
    "start": "1518600",
    "end": "1526640"
  },
  {
    "text": "takes two parameters the first is the clipboard type and the second is the actual data which gets handled",
    "start": "1526640",
    "end": "1531919"
  },
  {
    "text": "differently based on the clipboard type data is serialized to the clipboard U by",
    "start": "1531919",
    "end": "1537200"
  },
  {
    "text": "Chrome depending on the type that the renderer requested so if the renderer requested text then that'll Bubble Up",
    "start": "1537200",
    "end": "1544039"
  },
  {
    "text": "and end up calling the right text function and the broker will specify the",
    "start": "1544039",
    "end": "1549279"
  },
  {
    "text": "the format type when calling SE clipboard data however if the render requires data just arbitrary data being",
    "start": "1549279",
    "end": "1556000"
  },
  {
    "text": "put to the clipboard then the renderer has control over the clipboard and",
    "start": "1556000",
    "end": "1561279"
  },
  {
    "text": "that's in essence the entire bug Microsoft explicitly states that clipboard data is not to be trusted and",
    "start": "1561279",
    "end": "1568080"
  },
  {
    "text": "that should be parsed very carefully and a huge reason for this is clipboard type",
    "start": "1568080",
    "end": "1573200"
  },
  {
    "text": "hex c016 which is an undocumented clipboard type that gets registered by",
    "start": "1573200",
    "end": "1578720"
  },
  {
    "text": "Microsoft in the atom table it's known as more Olay private data and this can be used to instantiate arbitrary com",
    "start": "1578720",
    "end": "1585760"
  },
  {
    "text": "controls which is exactly what you saw when we were just right clicking on the desktop uh com controls that are",
    "start": "1585760",
    "end": "1591799"
  },
  {
    "text": "instantiated in this manner are not checked against the ActiveX kill bit and that's how ruin was able to put all",
    "start": "1591799",
    "end": "1599000"
  },
  {
    "text": "three together and get a direct show of vulnerability and get calculators to spawn so all in all what they did is",
    "start": "1599000",
    "end": "1606679"
  },
  {
    "text": "they took advantage of the use after free in blink they then sent a message to the broker and specified that they",
    "start": "1606679",
    "end": "1613520"
  },
  {
    "text": "wanted CBF data which then grabbed the clipboard format from the data that they",
    "start": "1613520",
    "end": "1619080"
  },
  {
    "text": "were also supplying and so they supplied both the clipboard format and the buffer",
    "start": "1619080",
    "end": "1624159"
  },
  {
    "text": "itself when you right click on the uh desktop it then or just access the clipboard in general it then",
    "start": "1624159",
    "end": "1630399"
  },
  {
    "text": "instantiates the com controls triggers a buffer overflow and then whatever you want to execute executes one interesting",
    "start": "1630399",
    "end": "1637559"
  },
  {
    "text": "aspect about this is depending on how a VM or VNC or our desktop was implemented",
    "start": "1637559",
    "end": "1644320"
  },
  {
    "text": "and how copying is shared between you could potentially bring this back to you which is particularly frightening for",
    "start": "1644320",
    "end": "1650320"
  },
  {
    "text": "anyone that does any malware research and does all their work in a",
    "start": "1650320",
    "end": "1655200"
  },
  {
    "text": "VM exactly um to fix this chrome basically added a list of allowed",
    "start": "1658240",
    "end": "1664399"
  },
  {
    "text": "formats and when the broker spins up it starts registering formats that it knows it needs to be able to pass and that it",
    "start": "1664399",
    "end": "1671039"
  },
  {
    "text": "knows it needs it it knows are safe to um pass back and forth then in the right",
    "start": "1671039",
    "end": "1677559"
  },
  {
    "text": "pickle data function which is called as uh part of any right to the clipboard it",
    "start": "1677559",
    "end": "1683320"
  },
  {
    "text": "then does a clip quick check in is registered format type and if it's not a format type that it is aware of and",
    "start": "1683320",
    "end": "1690240"
  },
  {
    "text": "likes it'll just flat out reject and not write it to the clipboard and now I'm going to pass it over back to Brian so",
    "start": "1690240",
    "end": "1696279"
  },
  {
    "text": "you can go over the next vulnerability all right so this uh vulnerability itself is actually the",
    "start": "1696279",
    "end": "1702640"
  },
  {
    "start": "1699000",
    "end": "1699000"
  },
  {
    "text": "zero day that we're releasing today um and before we go into the details about the zero day um you understand why we're",
    "start": "1702640",
    "end": "1708519"
  },
  {
    "text": "releasing it as a zero day the zero day initiative has a quite famous disclosure policy that limit basically provides the",
    "start": "1708519",
    "end": "1715840"
  },
  {
    "text": "vendors 120 days to fix the bug um Microsoft had 120 days to fix this bug",
    "start": "1715840",
    "end": "1720960"
  },
  {
    "text": "and it wasn't fixed we actually provided them an extension to uh for fixing the bug until yesterday um and so now we're",
    "start": "1720960",
    "end": "1727480"
  },
  {
    "text": "going to release the details for everybody to see because it is still not fixed um this specific sandbox bypass uh",
    "start": "1727480",
    "end": "1733880"
  },
  {
    "text": "abuses presentation host um and if you watch the exploit on the screen this was actually brought To Us by ke a",
    "start": "1733880",
    "end": "1739919"
  },
  {
    "text": "combination of keen team and team 509 um they came in and exploited Adobe Flash",
    "start": "1739919",
    "end": "1745679"
  },
  {
    "text": "uh the initial bug that they used was cve 2014 510 and the flaw is in the handling of",
    "start": "1745679",
    "end": "1752880"
  },
  {
    "text": "display objects U this error actually resulted in an out-of-bound indexing",
    "start": "1752880",
    "end": "1758000"
  },
  {
    "text": "which allowed them to gain code execution in the context of the process where they could go about attacking uh",
    "start": "1758000",
    "end": "1764159"
  },
  {
    "text": "the sandbox itself and it's a relatively quick exploit to run um the things to be looking for in the video um is first we",
    "start": "1764159",
    "end": "1772399"
  },
  {
    "text": "they navigate to the page um the application there's a crash that occurs you see a tab pop up another tab pop up",
    "start": "1772399",
    "end": "1778880"
  },
  {
    "text": "in the browser um and then another crash and a calculator pops up at medium Integrity um they just weren't cleaning",
    "start": "1778880",
    "end": "1785120"
  },
  {
    "text": "up the exploit so um that's why other the crashing occurs but they are successfully bypassing the sandbox so",
    "start": "1785120",
    "end": "1791440"
  },
  {
    "text": "we'll run that real quick so you can see the two tabs uh and",
    "start": "1791440",
    "end": "1799039"
  },
  {
    "text": "and a calculator running and then you'll see that it is actually at medium",
    "start": "1799039",
    "end": "1804440"
  },
  {
    "text": "Integrity so they've effectively bypassed the sandbox using presentation host uh which we'll talk about now um so",
    "start": "1804440",
    "end": "1812080"
  },
  {
    "start": "1811000",
    "end": "1811000"
  },
  {
    "text": "why is this why is this possible um Microsoft Internet Explorer has a thing called elevation policy elevation policy",
    "start": "1812080",
    "end": "1818640"
  },
  {
    "text": "is that white list of applications um that can be run from the low Integrity process um when the renderer calls",
    "start": "1818640",
    "end": "1825399"
  },
  {
    "text": "create process it eventually it gets redirected into the broker using Microsoft's application shim uh",
    "start": "1825399",
    "end": "1832640"
  },
  {
    "text": "infrastructure uh during the broker calls there is a set of checks that it",
    "start": "1832640",
    "end": "1838399"
  },
  {
    "text": "does against an elevation policy which is that white list um this policy is",
    "start": "1838399",
    "end": "1843600"
  },
  {
    "text": "actually defined inside of the registry at the location listed on the slide and it will identify the exes that are",
    "start": "1843600",
    "end": "1850120"
  },
  {
    "text": "allowed to be run or the DLS along with the policy value the policy value itself",
    "start": "1850120",
    "end": "1855480"
  },
  {
    "text": "defines how the broker is going to run the process the policy if the policy value is three the broker silently",
    "start": "1855480",
    "end": "1861639"
  },
  {
    "text": "executes the process at medium Integrity uh if if it's two it prompts the user with an elevation prompt before running",
    "start": "1861639",
    "end": "1868080"
  },
  {
    "text": "the executable uh the less interesting ones are one and zero where it's running at low Integrity uh and running at or",
    "start": "1868080",
    "end": "1874399"
  },
  {
    "text": "zero which it will just block the process altogether and so in this case if you look at the registry for",
    "start": "1874399",
    "end": "1880039"
  },
  {
    "text": "presentation host um and it's it's an excellent Target for attack because it is a uh running with a policy value of",
    "start": "1880039",
    "end": "1886360"
  },
  {
    "text": "three which means it's running at medium uh medium Integrity without any intervention from the",
    "start": "1886360",
    "end": "1891919"
  },
  {
    "text": "user uh presentation host provides uh one argument to it um and so if you can",
    "start": "1891919",
    "end": "1898240"
  },
  {
    "text": "find a vulnerability in the way that presentation H host Works uh you could get medium level code execution uh",
    "start": "1898240",
    "end": "1903880"
  },
  {
    "text": "through that Vector in this case the researchers were abusing the way that the way that presentation host uses uh",
    "start": "1903880",
    "end": "1910320"
  },
  {
    "text": "protocol handlers if you look at protocol handlers and Internet Explorer the privilege level of the page is based",
    "start": "1910320",
    "end": "1915679"
  },
  {
    "text": "off of the URI so if you you are using a file protocol Handler um the page will get loaded at medium Integrity but if",
    "start": "1915679",
    "end": "1921760"
  },
  {
    "text": "you're in a low-level process you can't just you know redirect to a local file it'll actually block that uh so you",
    "start": "1921760",
    "end": "1927960"
  },
  {
    "text": "can't do like local. href equals file colon whatever it it won't allow you to",
    "start": "1927960",
    "end": "1933240"
  },
  {
    "text": "do that in this case presentation host actually will implicitly call the file protocol Handler uh if you're using",
    "start": "1933240",
    "end": "1939519"
  },
  {
    "text": "Local Host C dollar sign as the um as the location and then you can basically",
    "start": "1939519",
    "end": "1945960"
  },
  {
    "text": "put any location on the dis that you want to load in to presentation host um and in this case this is how they ended",
    "start": "1945960",
    "end": "1951720"
  },
  {
    "text": "up abusing a presentation host and we'll show you exactly how here what the exploit actually does is it first uh",
    "start": "1951720",
    "end": "1959320"
  },
  {
    "text": "gains code execution inside a flash um the payload drops a malicious Swift to",
    "start": "1959320",
    "end": "1965240"
  },
  {
    "text": "the local low area on the dis this L uh this is a place on the disc where the low Integrity process can actually drop",
    "start": "1965240",
    "end": "1972279"
  },
  {
    "text": "files to um and then it calls create process on presentation host",
    "start": "1972279",
    "end": "1977600"
  },
  {
    "text": "uh with the command shown on the screen uh which will load the Swift into a medium Integrity tab uh and then exploit",
    "start": "1977600",
    "end": "1984000"
  },
  {
    "text": "the same exact flashbug again uh to with a different payload and um there you go",
    "start": "1984000",
    "end": "1990200"
  },
  {
    "text": "you get a Sandbox bypass using presentation host uh for all of you system administrators in the audience we do",
    "start": "1990200",
    "end": "1996679"
  },
  {
    "text": "provide remediations for this actual vulnerability just set the policy value to zero uh in the registry this will",
    "start": "1996679",
    "end": "2002960"
  },
  {
    "text": "stop presentation host from being run and used as a possible Vector there are are a lot of researchers looking at",
    "start": "2002960",
    "end": "2008480"
  },
  {
    "text": "elevation policy stuff so you can only assume that somebody else has found this as well um so uh because that seems to",
    "start": "2008480",
    "end": "2015000"
  },
  {
    "text": "be the easiest way to get to break out of the sandbox next is actually my favorite",
    "start": "2015000",
    "end": "2021120"
  },
  {
    "start": "2019000",
    "end": "2019000"
  },
  {
    "text": "sandbox bypass from Pon to own uh it's a abuse of symbolic links uh inside of",
    "start": "2021120",
    "end": "2026279"
  },
  {
    "text": "Google Chrome which will allow the uh uh this in this case an anonymous researcher in deponent own to bypass a",
    "start": "2026279",
    "end": "2032799"
  },
  {
    "text": "Sandbox um he used a cve 2014 1705 which actually is the same vulnerability used",
    "start": "2032799",
    "end": "2039039"
  },
  {
    "text": "by geohot in the ponum contest which I believe also won the ponum uh um award",
    "start": "2039039",
    "end": "2044720"
  },
  {
    "text": "uh this vulnerability allowed uh is an out-of-bound indexing issue with typed array objects and you allows you to read",
    "start": "2044720",
    "end": "2051440"
  },
  {
    "text": "and write uh to any address uh in the process allowing you code execution um",
    "start": "2051440",
    "end": "2056480"
  },
  {
    "text": "it was actually a very popular bug there was there was a lot of collisions with this bug um out there but so let's watch",
    "start": "2056480",
    "end": "2061839"
  },
  {
    "text": "the video the other interesting thing is this uh prefa concept is actually entertaining to watch it's just not like a calp",
    "start": "2061839",
    "end": "2068878"
  },
  {
    "text": "so so he'll kind of give you a step by",
    "start": "2074359",
    "end": "2079078"
  },
  {
    "text": "step",
    "start": "2082040",
    "end": "2085040"
  },
  {
    "text": "woohoo so that so that's the Google Chrome uh in this case uh we're not going to talk about exactly how he",
    "start": "2090560",
    "end": "2096638"
  },
  {
    "text": "popped Cal right away but we are going to talk about the sandbox bypass um which allow them to write uh out to the",
    "start": "2096639",
    "end": "2102320"
  },
  {
    "text": "startup folder so to understand what's actually going on in this attack uh you need to",
    "start": "2102320",
    "end": "2107400"
  },
  {
    "start": "2104000",
    "end": "2104000"
  },
  {
    "text": "understand what exactly Google Chrome is doing uh Google Chrome actually uses a sqlite database to store information",
    "start": "2107400",
    "end": "2112880"
  },
  {
    "text": "about open tabs um there is actually an IPC call to facilitate this it's database host message open file um and",
    "start": "2112880",
    "end": "2120400"
  },
  {
    "text": "so you can the attacker or a person running at low Integrity can provide a controlled file name to that call uh and",
    "start": "2120400",
    "end": "2127320"
  },
  {
    "text": "eventually it gets down to this create full file path for VFS file at this",
    "start": "2127320",
    "end": "2133520"
  },
  {
    "text": "point it merges a base directory along with the uh attacker supplied file name",
    "start": "2133520",
    "end": "2139359"
  },
  {
    "text": "uh and um Google actually does at this point do a check for a malicious intent",
    "start": "2139359",
    "end": "2144400"
  },
  {
    "text": "of that that parameter they are doing a directory or they did a directory traversal check uh at that time um they",
    "start": "2144400",
    "end": "2150160"
  },
  {
    "text": "were trying to make sure that the right was not happening outside the sandbox um but the attacker took a different",
    "start": "2150160",
    "end": "2155800"
  },
  {
    "text": "approach eventually the file name gets goes all the way down to a Windows create file",
    "start": "2155800",
    "end": "2162079"
  },
  {
    "text": "API and but what the attacker was actually abusing is the fact that NTFS",
    "start": "2162079",
    "end": "2167119"
  },
  {
    "text": "contain files that are stored on NTFS contain streams alternate data streams you know they were like popular like 10",
    "start": "2167119",
    "end": "2172319"
  },
  {
    "text": "years ago um he this bringing it back new again with this one um if you can",
    "start": "2172319",
    "end": "2177960"
  },
  {
    "text": "actually U access the streams for an NTFS file using colon separated values",
    "start": "2177960",
    "end": "2184160"
  },
  {
    "text": "um so he actually appended to the file Name colon uh dollar sign I30 which uh",
    "start": "2184160",
    "end": "2189280"
  },
  {
    "text": "specifies the default stream name and then uh pended dollar sign index",
    "start": "2189280",
    "end": "2194800"
  },
  {
    "text": "allocation which allowed him access to the default D directory stream for the file",
    "start": "2194800",
    "end": "2200160"
  },
  {
    "text": "itself um this when you create a file with this set of um coal um stream",
    "start": "2200160",
    "end": "2207280"
  },
  {
    "text": "attributes at the end will actually set uh the file flag backup semantic flag indirectly uh implicitly um which is not",
    "start": "2207280",
    "end": "2214520"
  },
  {
    "text": "allowed by the process to begin with um or War through the broker uh he once he has uh once this",
    "start": "2214520",
    "end": "2222079"
  },
  {
    "text": "file has been created it is a handle to a directory stream this is passed back from the Chrome broker to the renderer",
    "start": "2222079",
    "end": "2227920"
  },
  {
    "text": "process where the uh attacker just has to use device IO control uh with an F",
    "start": "2227920",
    "end": "2233599"
  },
  {
    "text": "fctl set reparse point as the io control code uh and he can produce a junction point to an arbitrary location on disc",
    "start": "2233599",
    "end": "2241160"
  },
  {
    "text": "in this case he used the root of the C drive C colon backlash um as the as the",
    "start": "2241160",
    "end": "2247000"
  },
  {
    "text": "junction point and at this point he can create and modify files off of this privileged handle wherever he wants and",
    "start": "2247000",
    "end": "2253240"
  },
  {
    "text": "so he targeted in this case the startup directory um and through that he was able to achieve medium level code",
    "start": "2253240",
    "end": "2259640"
  },
  {
    "text": "execution uh this there is you know he was using other techniques to actually get it to pop right away um but this is",
    "start": "2259640",
    "end": "2265520"
  },
  {
    "text": "how he broke out of the sandbox what is actually the root cause of this or the root cause of this",
    "start": "2265520",
    "end": "2271960"
  },
  {
    "text": "vulnerability it is some it's some weirdness inside of Windows where a low integrity process uh cannot create",
    "start": "2271960",
    "end": "2278160"
  },
  {
    "text": "symbolic links but they can create Junction points um and these Junction points can be used uh to get access an",
    "start": "2278160",
    "end": "2284319"
  },
  {
    "text": "act like a symbolic link for a directory um in this case the junction Point requires uh the directory handle um but",
    "start": "2284319",
    "end": "2292760"
  },
  {
    "text": "in in most cases you don't have access to the actual create file Windows API uh to set the file flag backup semantics",
    "start": "2292760",
    "end": "2299560"
  },
  {
    "text": "flag um but you can implicitly set this through uh dollar sign I30 dollar sign",
    "start": "2299560",
    "end": "2304640"
  },
  {
    "text": "index allocation um and get access to that directory stream and then which allows you to create a junction",
    "start": "2304640",
    "end": "2311200"
  },
  {
    "text": "Point Google Chrome fix this by introducing a couple checks um the first",
    "start": "2311200",
    "end": "2316880"
  },
  {
    "text": "they do a check against their platform file backup semantics flag uh to see if a directory or reparse point was",
    "start": "2316880",
    "end": "2323560"
  },
  {
    "text": "actually requested uh and if not they make sure that they're not passing back a directory handle or a reparse point uh",
    "start": "2323560",
    "end": "2329760"
  },
  {
    "text": "to the low Integrity process so that they can't create a junction Point uh and right to wherever they want on",
    "start": "2329760",
    "end": "2335520"
  },
  {
    "text": "disk so in conclusion uh you know application developers are working hard to uh",
    "start": "2335520",
    "end": "2341640"
  },
  {
    "start": "2336000",
    "end": "2336000"
  },
  {
    "text": "Implement and create sandboxes uh they're doing a lot of implementing the best practices or most of them are um",
    "start": "2341640",
    "end": "2347160"
  },
  {
    "text": "they're trying to restrict the number of apis you see recently Google Chrome um some of the members of the Google team",
    "start": "2347160",
    "end": "2352960"
  },
  {
    "text": "uh tweeted out a way to reduce the type of uh kernel apis that are available to the low Integrity process so they are",
    "start": "2352960",
    "end": "2359599"
  },
  {
    "text": "working hard to actually reduce the attack surface um they spent a lot of time obviously analyzing their code",
    "start": "2359599",
    "end": "2364760"
  },
  {
    "text": "looking uh hiring Consultants look at their code uh to make it uh to make it as secure as possible and their primary",
    "start": "2364760",
    "end": "2370560"
  },
  {
    "text": "purpose is to to have that clear separation of untrusted processing and trusted processing and enforcement of",
    "start": "2370560",
    "end": "2376000"
  },
  {
    "text": "security policy this of course though drives the next evolution in exploits um you know",
    "start": "2376000",
    "end": "2381839"
  },
  {
    "start": "2378000",
    "end": "2378000"
  },
  {
    "text": "there are many techniques that are very popular to actually break out of the sandbox things like kernel vulnerabilities or vulnerabilities in uh",
    "start": "2381839",
    "end": "2387839"
  },
  {
    "text": "the sandbox processing itself the IPC processing um but there are many uncommon approaches that can be uh",
    "start": "2387839",
    "end": "2393200"
  },
  {
    "text": "valuable to an attacker things like logic errors in the dialogue mishandling of privileged handles um clipboard bugs",
    "start": "2393200",
    "end": "2400920"
  },
  {
    "text": "um abuse of symbolic links those are all very possible way and vectors out of the sandbox um and you know with your",
    "start": "2400920",
    "end": "2408319"
  },
  {
    "text": "understanding of of the sandbox itself uh you can Poss possibly find new ways to actually uh break out of the sandbox",
    "start": "2408319",
    "end": "2415599"
  },
  {
    "text": "um we are you know the zero day initiative is a bug baly program um we do purchase privilege escalations and sandbox bypasses so if you discover a",
    "start": "2415599",
    "end": "2422680"
  },
  {
    "text": "Sandbox bypass um we obviously purchase those uh and will disclose them to the vendor um if you use some of this",
    "start": "2422680",
    "end": "2428640"
  },
  {
    "text": "information in our slides we'd love to hear it uh and um to find your sandbox bypasses uh and get them fixed thank",
    "start": "2428640",
    "end": "2436480"
  },
  {
    "text": "you",
    "start": "2440560",
    "end": "2443560"
  }
]