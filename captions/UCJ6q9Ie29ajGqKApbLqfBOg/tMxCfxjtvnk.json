[
  {
    "start": "0",
    "end": "37000"
  },
  {
    "text": "[Music]",
    "start": "4260",
    "end": "14060"
  },
  {
    "text": "hello everybody this is frank block and you're watching hiding process memory via anti-forensic techniques this talk",
    "start": "14639",
    "end": "22480"
  },
  {
    "text": "is based on the research that i've done together with ralph politger patrick reichenberger and dominic schwepper",
    "start": "22480",
    "end": "28320"
  },
  {
    "text": "from the university of erlangenberg so this was a cooperation between the emw",
    "start": "28320",
    "end": "33440"
  },
  {
    "text": "research and the university of erlang to the agenda we will start with a short",
    "start": "33440",
    "end": "39360"
  },
  {
    "start": "37000",
    "end": "37000"
  },
  {
    "text": "introduction some technical background then dive into the subversion techniques there are three of them",
    "start": "39360",
    "end": "45680"
  },
  {
    "text": "then we'll talk a little bit about about challenges and some considerations after that we'll have a look at",
    "start": "45680",
    "end": "52559"
  },
  {
    "text": "evaluation so we have evaluated our techniques with memory forensics and life forensics techniques",
    "start": "52559",
    "end": "59199"
  },
  {
    "text": "after that we'll talk about and have a look at detection approaches evaluate those two and at the end some",
    "start": "59199",
    "end": "66159"
  },
  {
    "text": "conclusion there's some radiated work that i wanted to mention also to give you an idea what",
    "start": "66159",
    "end": "72799"
  },
  {
    "start": "68000",
    "end": "68000"
  },
  {
    "text": "this is about and what is different from them the first great research that i want to mention is",
    "start": "72799",
    "end": "78560"
  },
  {
    "text": "shadow walker by sherry sparks and jaime butler so what they basically did was changing",
    "start": "78560",
    "end": "83759"
  },
  {
    "text": "the mapping between witcher and physical memory and by that any subsequent",
    "start": "83759",
    "end": "90799"
  },
  {
    "text": "access to a which address would not end up anymore at the actual physical content for that mutual address",
    "start": "90799",
    "end": "97040"
  },
  {
    "text": "we are doing something similar but there are three major differences between those two approaches",
    "start": "97040",
    "end": "102079"
  },
  {
    "text": "on the one hand shadow walker only focused on the kernel space it",
    "start": "102079",
    "end": "108799"
  },
  {
    "text": "required a hook in the page fault handler in order to work and the third difference is that it doesn't",
    "start": "108799",
    "end": "114720"
  },
  {
    "text": "work anymore on current cpus so sadly or luckily and the second related work that i",
    "start": "114720",
    "end": "120960"
  },
  {
    "text": "wanted to mention is gargoyle by josh los pinozzo he concentrated on the process address",
    "start": "120960",
    "end": "126640"
  },
  {
    "text": "space so similar to our approaches but he didn't his approach doesn't hide",
    "start": "126640",
    "end": "132800"
  },
  {
    "text": "the actual memory content but he changed some characteristics of the injected code in this case the executable state and by",
    "start": "132800",
    "end": "140400"
  },
  {
    "text": "that tried tries to hide from detection tools uh our approach is here in this case",
    "start": "140400",
    "end": "146319"
  },
  {
    "text": "different we are solely interested in hiding the actual memory content so we don't change",
    "start": "146319",
    "end": "151599"
  },
  {
    "text": "characteristics uh the memory is still executable for example in some cases but the actual memory content behind it",
    "start": "151599",
    "end": "158640"
  },
  {
    "text": "is hidden okay let's talk about a little bit a",
    "start": "158640",
    "end": "164080"
  },
  {
    "start": "161000",
    "end": "161000"
  },
  {
    "text": "little bit about some technical backgrounds so the procedure space contains",
    "start": "164080",
    "end": "169280"
  },
  {
    "text": "different data executables dlls schedule shared libraries or heap",
    "start": "169280",
    "end": "175920"
  },
  {
    "text": "stack data whatsoever and all those memory areas are described by what we will call in this context",
    "start": "175920",
    "end": "181120"
  },
  {
    "text": "memory error structures so mes structures on windows those are virtual address",
    "start": "181120",
    "end": "186239"
  },
  {
    "text": "descriptors on linux those are virtual memory areas and as you can see",
    "start": "186239",
    "end": "192560"
  },
  {
    "text": "one thing that both those types have in common both those structures have in common is a start and an end pointer so you can",
    "start": "192560",
    "end": "199599"
  },
  {
    "text": "see here that the start address points to the beginning of the memory area and the end pointer to the end",
    "start": "199599",
    "end": "204799"
  },
  {
    "text": "and normally every memory in the which address base of a process is described by at least one",
    "start": "204799",
    "end": "210159"
  },
  {
    "text": "or ideally by one memory error structure",
    "start": "210159",
    "end": "215440"
  },
  {
    "start": "216000",
    "end": "216000"
  },
  {
    "text": "so the second second part that we're going to talk a little bit about is the depends are the paging structures",
    "start": "216000",
    "end": "222159"
  },
  {
    "text": "so the process of translating a virtual address to a physical page frame the relevant part for us here",
    "start": "222159",
    "end": "228799"
  },
  {
    "text": "in this case is just a page table so at the end of the translation process we will end up for a which address on a",
    "start": "228799",
    "end": "236159"
  },
  {
    "text": "specific pte a page table entry this one contains a pointer to the actual page",
    "start": "236159",
    "end": "241280"
  },
  {
    "text": "frame that contains the memory for the switch address and the widget just also has a page",
    "start": "241280",
    "end": "246400"
  },
  {
    "text": "offset into this page frame where the actual byte is that byte is located where this",
    "start": "246400",
    "end": "251920"
  },
  {
    "text": "address points to and yeah exactly this is something that we are going to",
    "start": "251920",
    "end": "257260"
  },
  {
    "text": "[Music] tamper with also to mention right here now",
    "start": "257260",
    "end": "262400"
  },
  {
    "text": "is uh on both operating systems on windows and linux there are some reverse",
    "start": "262400",
    "end": "267680"
  },
  {
    "text": "mappings so in windows there's the page frame number database and the linux the page structures and those are more",
    "start": "267680",
    "end": "275199"
  },
  {
    "text": "or less the physical point of view and the memory but we will dig a little bit deeper into those two types a little bit",
    "start": "275199",
    "end": "282560"
  },
  {
    "text": "later and the third part is shared memory so the idea of short memory is to just",
    "start": "282560",
    "end": "288800"
  },
  {
    "text": "share data between different processes and the relevant part for us here to mention",
    "start": "288800",
    "end": "294000"
  },
  {
    "text": "is that shared memory as um despite in contrast to private memory is still",
    "start": "294000",
    "end": "300160"
  },
  {
    "text": "accessible if the shared memory has been unmapped so if it's not part of any process for example anymore",
    "start": "300160",
    "end": "307039"
  },
  {
    "text": "not in not mapped in any virtual address space it can still be wrestling in a physical memory and can still be remapped as long",
    "start": "307039",
    "end": "313120"
  },
  {
    "text": "as at least one process has a handle to the shared memory so that's something to keep in mind and",
    "start": "313120",
    "end": "319919"
  },
  {
    "text": "there are different ways to create shared memory on windows there's especially this api sequence on linux there are at least",
    "start": "319919",
    "end": "326080"
  },
  {
    "text": "three different ways to create shared memory that we had a look at and we will see later",
    "start": "326080",
    "end": "332560"
  },
  {
    "text": "okay let's start with our separation techniques in general we are trying to hide process memory",
    "start": "332560",
    "end": "339759"
  },
  {
    "start": "335000",
    "end": "335000"
  },
  {
    "text": "with those those techniques can be used independently or can also be combined",
    "start": "339759",
    "end": "344880"
  },
  {
    "text": "and our scenario is for example an attacker that injected code into another process and now wants to hide this memory or he",
    "start": "344880",
    "end": "351440"
  },
  {
    "text": "wants to hide memory that is in his own process space",
    "start": "351440",
    "end": "356560"
  },
  {
    "text": "so the first technique is what we will call mas remapping so the idea was",
    "start": "356800",
    "end": "364240"
  },
  {
    "text": "to do this technique is because that many tools attention tools depend on the information provided by those structures",
    "start": "364240",
    "end": "371759"
  },
  {
    "text": "so you rely on those and this is why we wanted to remap some of the information",
    "start": "371759",
    "end": "377600"
  },
  {
    "text": "so to change the information in order to hide our malicious memory um one thing to note here is that this technique will",
    "start": "377600",
    "end": "384160"
  },
  {
    "text": "require kernel level privileges so this is something to keep in mind so we are here right now at the beginning",
    "start": "384160",
    "end": "389840"
  },
  {
    "text": "with our malicious memory and we are now trying to hide it by just",
    "start": "389840",
    "end": "394880"
  },
  {
    "text": "simply changing those pointers here so you can now see here the effect so what we did",
    "start": "394880",
    "end": "399919"
  },
  {
    "text": "is we placed some benign data in the beginning which is not malicious any in any way",
    "start": "399919",
    "end": "405440"
  },
  {
    "text": "and we are changing the pointers in that way that the malicious memory which is placed right after is not described or",
    "start": "405440",
    "end": "412639"
  },
  {
    "text": "not contained in this area so they're not described by the vm and vm start they are not in",
    "start": "412639",
    "end": "419280"
  },
  {
    "text": "this range so there's no mes structure anymore at this point of",
    "start": "419280",
    "end": "424479"
  },
  {
    "text": "time that is including this memory area right here but still it can can still be accessed",
    "start": "424479",
    "end": "431520"
  },
  {
    "text": "especially by the cpu cpu executed because the cu cpu doesn't care about the mas structures",
    "start": "431520",
    "end": "437919"
  },
  {
    "text": "it only is interested or uses the ptes in order to do the",
    "start": "437919",
    "end": "443520"
  },
  {
    "text": "translation and to access the memory and those are still valid and are still there so this",
    "start": "443520",
    "end": "449120"
  },
  {
    "text": "works after this modification fine one advantage of this technique in",
    "start": "449120",
    "end": "455360"
  },
  {
    "text": "regards to the other twos to the other two that we will see right now is that there's no it is not necessary",
    "start": "455360",
    "end": "462960"
  },
  {
    "text": "to reverse this modification in order for the malicious coach to execute",
    "start": "462960",
    "end": "470240"
  },
  {
    "start": "470000",
    "end": "470000"
  },
  {
    "text": "so the second technique also requires kernel privileges in order to work and it also requires",
    "start": "470240",
    "end": "476319"
  },
  {
    "text": "some restoration so it is necessary to all the time unhide",
    "start": "476319",
    "end": "481520"
  },
  {
    "text": "and re-hide the memory in order for it to work and we will talk about two different flavors of this technique",
    "start": "481520",
    "end": "488240"
  },
  {
    "text": "so we are calling them pt subversions and we have the pte rimer peng and the pte erasure and the beginning in",
    "start": "488240",
    "end": "495919"
  },
  {
    "text": "both cases is the same so we have here our malicious page and we have a benign page with data that",
    "start": "495919",
    "end": "502400"
  },
  {
    "text": "is yeah not malicious at all and our goal now is to remap in the first technique to remake",
    "start": "502400",
    "end": "508800"
  },
  {
    "text": "remap this witcher address to this benign data by simply changing the pfn",
    "start": "508800",
    "end": "514159"
  },
  {
    "start": "512000",
    "end": "512000"
  },
  {
    "text": "so there's a field and this pte that points to the physical page and we are just changing this volume so",
    "start": "514159",
    "end": "520000"
  },
  {
    "text": "that this which address does it uh from this point on um point to this benign data down here",
    "start": "520000",
    "end": "525920"
  },
  {
    "text": "and this page here has no pte the point switch is not mapped in any virtual address and hence can't be accessed simply by",
    "start": "525920",
    "end": "533839"
  },
  {
    "text": "enumerating or accessing which addresses anymore the second technique is what we call pte",
    "start": "533839",
    "end": "540399"
  },
  {
    "start": "539000",
    "end": "539000"
  },
  {
    "text": "erasure so in this case we are nullifying so we are erasing the pte",
    "start": "540399",
    "end": "545760"
  },
  {
    "text": "just putting zeros in there so there's also in this case no more reference to this malicious page",
    "start": "545760",
    "end": "552640"
  },
  {
    "text": "it's not mapped in any rich address space anymore and any access to this which address",
    "start": "552640",
    "end": "558240"
  },
  {
    "text": "will end up in no memory which is not a problem per se because um this can be",
    "start": "558240",
    "end": "564160"
  },
  {
    "text": "for when it reasons the case for example if the page has not yet been accessed um then this would be look the same so",
    "start": "564160",
    "end": "570640"
  },
  {
    "text": "it's not suspicious by itself if there's a rich address that points to a pte that is zero",
    "start": "570640",
    "end": "577839"
  },
  {
    "text": "and the third technique that we want to talk about is shared memory subversion so the idea here is now to use shared",
    "start": "578320",
    "end": "584399"
  },
  {
    "text": "memory in order to hide our manager's content and it is not to mention",
    "start": "584399",
    "end": "590800"
  },
  {
    "text": "i wanted to mention that it is not necessary to share memory um between poses shadman we can also use",
    "start": "590800",
    "end": "596320"
  },
  {
    "text": "solely by one process and this is also the way we are using it our evil process does use this memory",
    "start": "596320",
    "end": "602079"
  },
  {
    "text": "more or less like private memory but with the advantages that come with chad memory from the attacker's point of view",
    "start": "602079",
    "end": "607839"
  },
  {
    "text": "so what the attacker does is he creates a shared memory segment and puts his malicious code in there and",
    "start": "607839",
    "end": "613760"
  },
  {
    "text": "then the first step unmaps it so it's not visible anymore and then after that anytime he wants to",
    "start": "613760",
    "end": "621040"
  },
  {
    "text": "use it he will remap it and again and again one major advantage of this technique is",
    "start": "621040",
    "end": "626399"
  },
  {
    "text": "that it doesn't require any kernel privileges so it can be used with solely users with solely standard user privileges",
    "start": "626399",
    "end": "635279"
  },
  {
    "text": "so the attack process after we have set it up is more or less like this as soon as the evil process wants to",
    "start": "635279",
    "end": "641200"
  },
  {
    "text": "execute or access the malicious data it shortly unmaps it into",
    "start": "641200",
    "end": "646480"
  },
  {
    "text": "its memory space executed or reads data from it and then unmaps it again",
    "start": "646480",
    "end": "651600"
  },
  {
    "text": "and by that we successfully hide from most of the tools or from nearly every detection tool that we",
    "start": "651600",
    "end": "657839"
  },
  {
    "text": "evaluated by simply with the with the simple trick so why is that that this memory can't be um",
    "start": "657839",
    "end": "665440"
  },
  {
    "text": "detected by any of the tools that we will see later let's dig a little bit into",
    "start": "665440",
    "end": "670800"
  },
  {
    "text": "the details so with the unmapping what happens in the background is that the page tab entries for this",
    "start": "670800",
    "end": "676800"
  },
  {
    "text": "shared memory are zeroed so they are not pointing anymore to the malicious pages",
    "start": "676800",
    "end": "682640"
  },
  {
    "text": "but there must be still some reference to it because it is possible to remit it remap those pages so there",
    "start": "682640",
    "end": "688240"
  },
  {
    "text": "must be some kind of reference to them and this reference is more or less",
    "start": "688240",
    "end": "693920"
  },
  {
    "text": "hidden behind this memory handle that the process keeps in order for the pages not to be erased",
    "start": "693920",
    "end": "700959"
  },
  {
    "text": "in the case of windows this memory handle is a section object so a pointer to a section object",
    "start": "700959",
    "end": "707600"
  },
  {
    "text": "and this section object the section structure is located in the kernel address space",
    "start": "707600",
    "end": "712720"
  },
  {
    "text": "so if you're following the section structure we are getting to a control area field this one points to the controller area",
    "start": "712720",
    "end": "719920"
  },
  {
    "text": "structure which is more or less um pointing to the file if there's a if there's a file related",
    "start": "719920",
    "end": "726000"
  },
  {
    "text": "to this memory area and right after that more interesting more interestingly for us",
    "start": "726000",
    "end": "731360"
  },
  {
    "text": "is a subsection structure or there can be multiple ones and those are pointing to the so-called prototype pds and this",
    "start": "731360",
    "end": "737519"
  },
  {
    "text": "is the interesting part for us because those type ptes contain the",
    "start": "737519",
    "end": "742639"
  },
  {
    "text": "actual pointer to the malicious pages so the reason why we are that we don't",
    "start": "742639",
    "end": "748720"
  },
  {
    "text": "find this malicious memory also if we scan the kernel address space is that the pages are not",
    "start": "748720",
    "end": "756399"
  },
  {
    "text": "mapped into the kernel address space so those prototype pds are not part of the",
    "start": "756399",
    "end": "761440"
  },
  {
    "text": "page tables for the kernel address for the kernel so they are not mapped into the current",
    "start": "761440",
    "end": "766959"
  },
  {
    "text": "address space but only those prototype pd's itself are part of the virtual address space of the kernel",
    "start": "766959",
    "end": "772480"
  },
  {
    "text": "so it's just data lying in there those ptes they are not part of the page tables itself from for for the",
    "start": "772480",
    "end": "779200"
  },
  {
    "text": "kernel and that means that those pages are not mapped into the address space and hence the memory",
    "start": "779200",
    "end": "784320"
  },
  {
    "text": "content can't be found when searching the witcher address space",
    "start": "784320",
    "end": "790880"
  },
  {
    "text": "okay let's have a look at the evaluation we implemented our techniques for windows and linux",
    "start": "791120",
    "end": "797120"
  },
  {
    "text": "and tested those in multiple vms for windows and linux and both in both",
    "start": "797120",
    "end": "802240"
  },
  {
    "text": "cases on x64 architectures and this is the those are the results for the memory forensics point of view",
    "start": "802240",
    "end": "809279"
  },
  {
    "start": "805000",
    "end": "805000"
  },
  {
    "text": "we used multiple plugins we used yarascan plugins we use recall and volatility for all",
    "start": "809279",
    "end": "815680"
  },
  {
    "text": "those plugins and what you can see for yar scan for example is that volatility cr scan was",
    "start": "815680",
    "end": "820959"
  },
  {
    "text": "not able to detect any of our hidden malicious content but recalled it the reason is that",
    "start": "820959",
    "end": "828720"
  },
  {
    "text": "recall does a raw search so it doesn't rely on any virtual address structures which address",
    "start": "828720",
    "end": "833839"
  },
  {
    "text": "translation structures it only searches the raw memory and by that he finds our hidden code but",
    "start": "833839",
    "end": "841680"
  },
  {
    "text": "obviously this only works if we know upfront what we are searching for so it doesn't work as a generic method",
    "start": "841680",
    "end": "849199"
  },
  {
    "text": "we also had a look at some dumping plugins so we dumped the memory content of the processes and",
    "start": "849199",
    "end": "855600"
  },
  {
    "text": "only in the case of the mas remapping and only",
    "start": "855600",
    "end": "860880"
  },
  {
    "text": "with volatility we were able to find our malicious code in there with the other tools and other plugins",
    "start": "860880",
    "end": "867839"
  },
  {
    "text": "it was not the case and also we did find our malicious code by",
    "start": "867839",
    "end": "874720"
  },
  {
    "text": "if we accessed it directly so if we used recall or volatility the interactive shell",
    "start": "874720",
    "end": "879839"
  },
  {
    "text": "and the reach for the virtual address in this case also it was possible to detect the malicious memory but only",
    "start": "879839",
    "end": "884959"
  },
  {
    "text": "in the case again for mas remapping and a third time again with pte num",
    "start": "884959",
    "end": "891680"
  },
  {
    "text": "we were also able to find our engineer code for mes remapping but besides that in all other cases our",
    "start": "891680",
    "end": "898000"
  },
  {
    "text": "malicious code was not found by any of those plugins in some cases there were some indicators",
    "start": "898000",
    "end": "904639"
  },
  {
    "text": "that could maybe give you a hint about something fishy going on but the actual memory",
    "start": "904639",
    "end": "909920"
  },
  {
    "text": "content was only detected in those cases that i mentioned earlier",
    "start": "909920",
    "end": "915120"
  },
  {
    "start": "915000",
    "end": "915000"
  },
  {
    "text": "so from a live forensics point of view it gets a little bit worse on the one hand we also use the tools",
    "start": "915120",
    "end": "922079"
  },
  {
    "text": "yara and scanned all the processes um none of our hidden memory has been",
    "start": "922079",
    "end": "928399"
  },
  {
    "text": "detected by yara um we were able to detect our malicious content",
    "start": "928399",
    "end": "933920"
  },
  {
    "text": "in the case of mas remapping again with the debugger but only on windows so with the",
    "start": "933920",
    "end": "939600"
  },
  {
    "text": "wind debug tool we were we were able to find our manager's content by searching",
    "start": "939600",
    "end": "945120"
  },
  {
    "text": "and also by directly accessing the visual addresses but besides that none of those approaches were able to",
    "start": "945120",
    "end": "950639"
  },
  {
    "text": "find our hidden malicious code we tried",
    "start": "950639",
    "end": "956160"
  },
  {
    "text": "dumping the process address space with debug with gdb within debug also used process explorer on g-core but",
    "start": "956160",
    "end": "963440"
  },
  {
    "text": "our image's content wasn't in those dumps but at least in some cases there were errors",
    "start": "963440",
    "end": "968560"
  },
  {
    "text": "um pointing out that some of the addresses seemed to be that seemed to be something wrong with them so there were some indicators but the",
    "start": "968560",
    "end": "974880"
  },
  {
    "text": "actual memory content was only detected in those two cases for mes remapping and not in the other cases",
    "start": "974880",
    "end": "980959"
  },
  {
    "text": "and also to mention the shared memory scenario with shem get on linux was not at all in any case in",
    "start": "980959",
    "end": "987519"
  },
  {
    "text": "any way detected by any of those plugins or tools okay",
    "start": "987519",
    "end": "993040"
  },
  {
    "text": "let's talk about some challenges and considerations some things that you have to consider when you're implementing and using those techniques",
    "start": "993040",
    "end": "1000000"
  },
  {
    "start": "995000",
    "end": "995000"
  },
  {
    "text": "and the one hand as mentioned earlier for pte subversions and chat memory we need still some control code that has",
    "start": "1000000",
    "end": "1006639"
  },
  {
    "text": "to be somewhere so this could be detected in order to unhide and re-hide the memory we did also",
    "start": "1006639",
    "end": "1013680"
  },
  {
    "text": "lock our memory in order to prevent any interferences from page swapping and",
    "start": "1013680",
    "end": "1019839"
  },
  {
    "text": "also to prevent any side effects we are doing we are undoing all our",
    "start": "1019839",
    "end": "1025438"
  },
  {
    "text": "modifications right before the process exits also especially on linux",
    "start": "1025439",
    "end": "1031199"
  },
  {
    "text": "there are some fields that you want to have a look at and might in some cases have to that you might",
    "start": "1031199",
    "end": "1036240"
  },
  {
    "text": "have to adjust in order to prevent side effects especially if you're not on doing the modifications then there are some counters that you",
    "start": "1036240",
    "end": "1042160"
  },
  {
    "text": "might have a look at and might have to adjust in order to prevent any problems",
    "start": "1042160",
    "end": "1048000"
  },
  {
    "text": "okay let's talk a little bit about a problem on windows with the standard pfn remapping",
    "start": "1048000",
    "end": "1053360"
  },
  {
    "text": "so if we are doing the pfn remapping as explained earlier this will lead to crashes especially if",
    "start": "1053360",
    "end": "1059039"
  },
  {
    "text": "we for example scan the process with yara then a pretty reliable crashes after",
    "start": "1059039",
    "end": "1064960"
  },
  {
    "text": "the pfn remapping so we came up with a little work around in this case",
    "start": "1064960",
    "end": "1070720"
  },
  {
    "start": "1068000",
    "end": "1068000"
  },
  {
    "text": "this is an initial situation so the pte points to a malicious memory and what we",
    "start": "1070720",
    "end": "1076640"
  },
  {
    "text": "now do in order to prevent the detection is to in the first step to erase to",
    "start": "1076640",
    "end": "1082000"
  },
  {
    "text": "erase it similar to the pta ratio but we added some additional steps so what",
    "start": "1082000",
    "end": "1087440"
  },
  {
    "text": "we then do after that we are doing a read access to the switch address which will lead to the creation of a new",
    "start": "1087440",
    "end": "1093600"
  },
  {
    "text": "page because the operating system will think um there has not yet been created any page for this",
    "start": "1093600",
    "end": "1098640"
  },
  {
    "text": "um virtual address so we are creating it that means that after that we have two pages",
    "start": "1098640",
    "end": "1104799"
  },
  {
    "text": "which relate on correspond to this pte and after that we are simply switching",
    "start": "1104799",
    "end": "1111039"
  },
  {
    "text": "between those two pages in order to hide and unhide our malicious memory and by that we are",
    "start": "1111039",
    "end": "1116320"
  },
  {
    "text": "preventing the process from crashing if yara scans it there's still some",
    "start": "1116320",
    "end": "1122000"
  },
  {
    "text": "issue left with this approach at blue screens as soon as the process exits we have not",
    "start": "1122000",
    "end": "1127760"
  },
  {
    "text": "yet identified what exactly is the problem with that so this is something to be done and will be hopefully fixed in the next",
    "start": "1127760",
    "end": "1133919"
  },
  {
    "text": "few weeks or months so let's talk about memories of version detection",
    "start": "1133919",
    "end": "1140160"
  },
  {
    "start": "1140000",
    "end": "1140000"
  },
  {
    "text": "first mas remapping detection what we are using here are the paging structures we are",
    "start": "1140160",
    "end": "1146400"
  },
  {
    "text": "enumerating all the page tables and examining the page table entries each page table entry corresponds to a",
    "start": "1146400",
    "end": "1153360"
  },
  {
    "text": "virtual address and by examining the page table entry we know which virtual addresses are currently valid so they",
    "start": "1153360",
    "end": "1159200"
  },
  {
    "text": "are referencing page frames that are currently mapped and we can use this information to check",
    "start": "1159200",
    "end": "1165679"
  },
  {
    "text": "whether or not they are virtual addresses which are not described by a vm area structure but are",
    "start": "1165679",
    "end": "1171919"
  },
  {
    "text": "valid so in this case we have those two which addresses which seem to reference",
    "start": "1171919",
    "end": "1177600"
  },
  {
    "text": "valid page frames so there's actually memory content behind them but they are not part of any mas",
    "start": "1177600",
    "end": "1182880"
  },
  {
    "text": "structure so that's something suspicious which we alert on now the pt subversion detection on",
    "start": "1182880",
    "end": "1189919"
  },
  {
    "start": "1186000",
    "end": "1186000"
  },
  {
    "text": "windows it's on linux different story so we are splitting this",
    "start": "1189919",
    "end": "1195919"
  },
  {
    "text": "detection into parts on windows we now have here the initial situation",
    "start": "1195919",
    "end": "1201039"
  },
  {
    "text": "so the messages pte points currently still to the malicious page and",
    "start": "1201039",
    "end": "1206240"
  },
  {
    "text": "in this case here now we have also the physical point of view on the memory the phn database which we",
    "start": "1206240",
    "end": "1211520"
  },
  {
    "text": "mentioned earlier briefly this is just an more or less just an array of mmpfn structs which are indexed",
    "start": "1211520",
    "end": "1218720"
  },
  {
    "text": "by the pfn number so the pfn here points at the one hand through the page",
    "start": "1218720",
    "end": "1224159"
  },
  {
    "text": "to the page frame and to a mmp of instruct over here each mmpf instruct for valid page",
    "start": "1224159",
    "end": "1232480"
  },
  {
    "text": "also points back to the pte that belongs to it so we have here a kind of",
    "start": "1232480",
    "end": "1239120"
  },
  {
    "text": "loop that points back and forth so we are now doing the pt remapping so we are",
    "start": "1239120",
    "end": "1245200"
  },
  {
    "text": "changing the pfn value the pointers get modified",
    "start": "1245200",
    "end": "1250240"
  },
  {
    "text": "so we are now pointing at the b9 page down here and we are also referencing another mmph instruct so that means we have",
    "start": "1250240",
    "end": "1258320"
  },
  {
    "text": "a broken loop we have a valid loop down here because um this mmph instructor belongs to a valid page",
    "start": "1258320",
    "end": "1264320"
  },
  {
    "text": "the benign patch is already there and we have a valid loop here but we have also the pointer from from",
    "start": "1264320",
    "end": "1270480"
  },
  {
    "text": "over here which does not point back over here so this is something that we can detect on",
    "start": "1270480",
    "end": "1276400"
  },
  {
    "text": "also by enumerating all the mmpf instructs we will encounter this one here which points to this pte",
    "start": "1276400",
    "end": "1282400"
  },
  {
    "text": "but the pte does not point back so this is also something that we can detect",
    "start": "1282400",
    "end": "1287840"
  },
  {
    "text": "and the third part here is the pfn number so by enumerating all the ptes and collecting all the page frame",
    "start": "1287840",
    "end": "1293760"
  },
  {
    "text": "numbers we can detect duplicates and by that the pt remapping this only",
    "start": "1293760",
    "end": "1301360"
  },
  {
    "text": "works for shared memory for private memory with shared memory this doesn't work because with chat memory it's quite",
    "start": "1301360",
    "end": "1306960"
  },
  {
    "text": "common that multiple ptes point to the same page frame to the same page frame",
    "start": "1306960",
    "end": "1312960"
  },
  {
    "text": "also this detection here does not work with shared memory because for shared memory those mmpfns don't point to this pt but",
    "start": "1312960",
    "end": "1319919"
  },
  {
    "text": "to the prototype pte so we don't have this loop that we can detect on so this detections here",
    "start": "1319919",
    "end": "1326000"
  },
  {
    "text": "only work with private memory on windows the detection that we will now see for",
    "start": "1326000",
    "end": "1331440"
  },
  {
    "text": "in a few seconds on linux does work also with shared memory",
    "start": "1331440",
    "end": "1336720"
  },
  {
    "text": "okay now the last slide for windows in this case we see now our motif or",
    "start": "1336720",
    "end": "1341840"
  },
  {
    "text": "modified pte remapping because the original one as i said um crashes when yara is for example",
    "start": "1341840",
    "end": "1348240"
  },
  {
    "text": "scanning the process so this is the situation the detection is more or less the same only the situation",
    "start": "1348240",
    "end": "1353840"
  },
  {
    "text": "is a bit different so we can see now here um we have our pfn value which points at the second",
    "start": "1353840",
    "end": "1360320"
  },
  {
    "text": "page which has been created for this pte so the uh also created mmpfn struct",
    "start": "1360320",
    "end": "1365840"
  },
  {
    "text": "points back to this pt so this loop here is fine it points back and forth validly so there's nothing suspicious here",
    "start": "1365840",
    "end": "1372400"
  },
  {
    "text": "but there are two um things to mention over here at the one hand we have again an mmp of",
    "start": "1372400",
    "end": "1378159"
  },
  {
    "text": "n struct which points to this pte but this pt doesn't point back and also we have two",
    "start": "1378159",
    "end": "1383520"
  },
  {
    "text": "mm pfn structs which point to the same pt so those are two characteristics that we",
    "start": "1383520",
    "end": "1388960"
  },
  {
    "text": "can detect on okay let's now look at linux",
    "start": "1388960",
    "end": "1395600"
  },
  {
    "start": "1391000",
    "end": "1391000"
  },
  {
    "text": "the physical the point of view on the physical memory on linux is are the page structures so",
    "start": "1395600",
    "end": "1402720"
  },
  {
    "text": "there are several page structures which are more or less also indexed by the page frame number and by",
    "start": "1402720",
    "end": "1408240"
  },
  {
    "text": "enumerating those we can collect pages which belong page structures which belong together and also physical pages",
    "start": "1408240",
    "end": "1415120"
  },
  {
    "text": "by that manner this is done by looking at the mapping object that is referenced by those page",
    "start": "1415120",
    "end": "1421039"
  },
  {
    "text": "structures this mapping object is also referenced by the vm area structures so by this mapping we can correlate",
    "start": "1421039",
    "end": "1427679"
  },
  {
    "text": "pages with their corresponding vm area structures",
    "start": "1427679",
    "end": "1432960"
  },
  {
    "text": "um a little thing to mention over here there can be multiple mappings per vm area structure and the one end",
    "start": "1433440",
    "end": "1440400"
  },
  {
    "text": "mapping camera can be referenced by the f mapping so this is the case for files that are mapped and also in this",
    "start": "1440400",
    "end": "1446880"
  },
  {
    "text": "case they can additionally be the n on vmat chain pointing to mappings there can be multiple ones this is especially the",
    "start": "1446880",
    "end": "1453200"
  },
  {
    "text": "case when forking and when using copy and write protections and then getting private",
    "start": "1453200",
    "end": "1459679"
  },
  {
    "text": "copies being created those are then referenced by those mappings so there can be multiple ones",
    "start": "1459679",
    "end": "1464960"
  },
  {
    "text": "just something that we have to keep in mind when investigating this issue that we have to collect all of them behind those mapping",
    "start": "1464960",
    "end": "1472720"
  },
  {
    "text": "is in this case for the nmn vma chain uh uh n on vma structs and for the f mapping it's an",
    "start": "1472720",
    "end": "1478799"
  },
  {
    "text": "address-based struct but this detail doesn't really matter for us uh the only thing that we are interested",
    "start": "1478799",
    "end": "1483840"
  },
  {
    "text": "in is are the um the object itself which we can use to correlate the page structures",
    "start": "1483840",
    "end": "1490000"
  },
  {
    "text": "with the vm error structure so the fields of those mappings are not really interesting to us just the object itself",
    "start": "1490000",
    "end": "1497760"
  },
  {
    "text": "okay now let's have a look at the other side so when we are now enumerating the which addresses foreign vm",
    "start": "1497760",
    "end": "1504960"
  },
  {
    "text": "area struct we can resolve them to the page frame number and by that",
    "start": "1504960",
    "end": "1510240"
  },
  {
    "text": "get the corresponding page structure and again we can um collect them based on the mapping",
    "start": "1510240",
    "end": "1517679"
  },
  {
    "text": "and in this case we have three virtual addresses with the three page structures which belong to this mapping which also corresponds to",
    "start": "1517679",
    "end": "1524240"
  },
  {
    "text": "the mapping for this vm error structure if we are now looking at our our attacks in this case the pt",
    "start": "1524240",
    "end": "1531919"
  },
  {
    "text": "erasure the initial situation is that we have the analysis page over here which is still referenced",
    "start": "1531919",
    "end": "1537440"
  },
  {
    "text": "now we are erasing the pte the pointer goes goes away and when we are enumerating",
    "start": "1537440",
    "end": "1543760"
  },
  {
    "text": "the witcher addresses we now only get two pages because this one doesn't um",
    "start": "1543760",
    "end": "1549120"
  },
  {
    "text": "belong to any page structure anymore because it doesn't have a corresponding pfn so when we are collecting those for",
    "start": "1549120",
    "end": "1556400"
  },
  {
    "text": "this vm area for the witcher addresses we only get two pages for this mapping or with this mapping if",
    "start": "1556400",
    "end": "1563600"
  },
  {
    "text": "we on the other hand enumerating all the page structures collecting them based on their mapping",
    "start": "1563600",
    "end": "1569520"
  },
  {
    "text": "and then looking for each vm error struct for their corresponding mapping and the pages",
    "start": "1569520",
    "end": "1574640"
  },
  {
    "text": "we will see that we will end up with three pages page structures so we can clearly see a diff two on the",
    "start": "1574640",
    "end": "1581120"
  },
  {
    "text": "left side three on the right side and this is something suspicious which we alert",
    "start": "1581120",
    "end": "1586799"
  },
  {
    "start": "1586000",
    "end": "1586000"
  },
  {
    "text": "so and the last step uh is our shared memory subversion detection it's small it's the same on linux and",
    "start": "1586799",
    "end": "1592880"
  },
  {
    "text": "windows and we are basically just enumerating all the shared memory handles and looking for those which are",
    "start": "1592880",
    "end": "1598080"
  },
  {
    "text": "currently not mapped into the original address space and alert on them on windows we are additionally checking",
    "start": "1598080",
    "end": "1603440"
  },
  {
    "text": "for the executable permission so we are only alerting on executable memory because there would otherwise be",
    "start": "1603440",
    "end": "1609039"
  },
  {
    "text": "a lot of false positives on linux we are not checking for the exitable state because it's a not a",
    "start": "1609039",
    "end": "1615039"
  },
  {
    "text": "reliable way to detect this kind of memory and hence we also have some false puzzles on linux",
    "start": "1615039",
    "end": "1621039"
  },
  {
    "text": "which we'll see later okay let's now talk about detection",
    "start": "1621039",
    "end": "1626799"
  },
  {
    "text": "about the evaluation of our detection approaches we use the same environment as for the",
    "start": "1626799",
    "end": "1631919"
  },
  {
    "start": "1630000",
    "end": "1630000"
  },
  {
    "text": "memory subversion evaluation additionally for the false positive positive evaluation we",
    "start": "1631919",
    "end": "1638080"
  },
  {
    "text": "started several browsers office applications and also pdf documents and",
    "start": "1638080",
    "end": "1645039"
  },
  {
    "text": "this will the results of that we will see a little bit later okay here are some some examples for",
    "start": "1645039",
    "end": "1650960"
  },
  {
    "start": "1649000",
    "end": "1649000"
  },
  {
    "text": "detection on windows in the first case we have an output of our recoil plug-in for the standard pfn",
    "start": "1650960",
    "end": "1657120"
  },
  {
    "text": "remapping so not our modified version so what would look would look like in the output",
    "start": "1657120",
    "end": "1662559"
  },
  {
    "text": "if we would use the standard version and also for the pt erasure so the first two entries here are",
    "start": "1662559",
    "end": "1670559"
  },
  {
    "text": "an output for the pfn remapping so we can see here in the dot pfn column that we have a true for the first",
    "start": "1670559",
    "end": "1677120"
  },
  {
    "text": "two entries so there we can see also here in the pfn column that there's in fact",
    "start": "1677120",
    "end": "1682399"
  },
  {
    "text": "the same pfn value for those two entries and what we also can see is a true value for the pte",
    "start": "1682399",
    "end": "1688080"
  },
  {
    "text": "pointer div which means that the pte with its pfn points to a certain mmpf instruct",
    "start": "1688080",
    "end": "1694880"
  },
  {
    "text": "but the mmp instruct doesn't point back so we have a diff over here and this also means that",
    "start": "1694880",
    "end": "1700480"
  },
  {
    "text": "the second entry is the malicious one or most probably dimensionless one because it has the value true in this",
    "start": "1700480",
    "end": "1706000"
  },
  {
    "text": "case and this the third entry is an example for the three zero for the pte erasure",
    "start": "1706000",
    "end": "1712720"
  },
  {
    "text": "we have in the column zero pde a true uh we can also see that the pte value is actually zero",
    "start": "1712720",
    "end": "1718880"
  },
  {
    "text": "and um this means that we have a mmpfn struct identified which is valid and points to a pte",
    "start": "1718880",
    "end": "1725360"
  },
  {
    "text": "which however has a pt value of zero which shouldn't be the case and this is something that is detected over here and the second",
    "start": "1725360",
    "end": "1732320"
  },
  {
    "text": "example is an example output for mas remapping so in this case we have in the column",
    "start": "1732320",
    "end": "1737520"
  },
  {
    "text": "orphaned page a true value for those two virtual addresses which means that they are currently",
    "start": "1737520",
    "end": "1742960"
  },
  {
    "text": "valid but not described by any mas here are some examples for",
    "start": "1742960",
    "end": "1749200"
  },
  {
    "start": "1747000",
    "end": "1747000"
  },
  {
    "text": "the evaluation on linux first pte remapping so here we can see output essentially",
    "start": "1749200",
    "end": "1756720"
  },
  {
    "text": "two mappings that have been identified by our plugins the first case is in",
    "start": "1756720",
    "end": "1762000"
  },
  {
    "text": "false positive so we have in the systemd journal process we have some mappings that are reported here but",
    "start": "1762000",
    "end": "1769120"
  },
  {
    "text": "it is not an attack so it's no subversion technique that has been resolved for this so in linux we have",
    "start": "1769120",
    "end": "1775039"
  },
  {
    "text": "quite some false processes in some cases but the second output is in fact a result of our pte subversion",
    "start": "1775039",
    "end": "1782240"
  },
  {
    "text": "attack so we have two pages which are not referenced by the virtual",
    "start": "1782240",
    "end": "1789200"
  },
  {
    "text": "addresses but are part of the page structures so this is detected over here and the last output",
    "start": "1789200",
    "end": "1796399"
  },
  {
    "text": "here is an example for shared memory on linux in this case so we have a shared memory handle which",
    "start": "1796399",
    "end": "1801760"
  },
  {
    "text": "is currently not mapped in any process or not in this process so this is",
    "start": "1801760",
    "end": "1806840"
  },
  {
    "text": "reported okay now let's have a look at false positives first windows",
    "start": "1806840",
    "end": "1813279"
  },
  {
    "start": "1808000",
    "end": "1808000"
  },
  {
    "text": "regarding mes remapping there have been some false positives in the context of chromium so",
    "start": "1813279",
    "end": "1820159"
  },
  {
    "text": "there were pages which are not described by any mes structure which is interesting and we are planning to have a closer look at",
    "start": "1820159",
    "end": "1827520"
  },
  {
    "text": "regarding pd sub versions there are no false poses at the moment known at least we didn't",
    "start": "1827520",
    "end": "1832720"
  },
  {
    "text": "find any in our test environments and regarding shared memory subversion there can be false positives",
    "start": "1832720",
    "end": "1839760"
  },
  {
    "text": "obviously if the process has a shared memory handle but does not have this memory mapped into",
    "start": "1839760",
    "end": "1846159"
  },
  {
    "text": "its address space but in our test environment we did not encounter any shard memory",
    "start": "1846159",
    "end": "1851919"
  },
  {
    "text": "segment that is executable or not mapped at the moment with linux mis remapping is not",
    "start": "1851919",
    "end": "1859200"
  },
  {
    "start": "1856000",
    "end": "1856000"
  },
  {
    "text": "implemented yet so we can't make any statements there pd subversion on linux there were quite some false",
    "start": "1859200",
    "end": "1866000"
  },
  {
    "text": "positives especially for the firefox and for the systemd journal process so",
    "start": "1866000",
    "end": "1871440"
  },
  {
    "text": "this is something that we are trying to optimize in the next time some hopefully we'll come up with a solution",
    "start": "1871440",
    "end": "1877679"
  },
  {
    "text": "for that and regarding essentially the shared memory subversion uh in our test cases uh also again with",
    "start": "1877679",
    "end": "1884080"
  },
  {
    "text": "the firefox we had quite some false positives 40 shared memory segments that were reported by our",
    "start": "1884080",
    "end": "1890840"
  },
  {
    "text": "plugin so it's also something where we might be able hopefully in the future to",
    "start": "1890840",
    "end": "1896720"
  },
  {
    "text": "improve the output okay let's come to the conclusion here we can see a simple short",
    "start": "1896720",
    "end": "1904000"
  },
  {
    "start": "1901000",
    "end": "1901000"
  },
  {
    "text": "comparison of the techniques from a ticker's point of view we already mentioned all the advantages and disadvantages so",
    "start": "1904000",
    "end": "1910799"
  },
  {
    "text": "it's just for the documentation to conclude with this research and with",
    "start": "1910799",
    "end": "1916320"
  },
  {
    "start": "1913000",
    "end": "1913000"
  },
  {
    "text": "this talk we introduced three novel subversion techniques which are able to hide memory from",
    "start": "1916320",
    "end": "1922640"
  },
  {
    "text": "memory and live forensics on windows and linux we are releasing with this talk also some proof of concept implementations",
    "start": "1922640",
    "end": "1928960"
  },
  {
    "text": "for both operating systems that implement our subversion techniques and our plugins",
    "start": "1928960",
    "end": "1934640"
  },
  {
    "text": "the recall and volatility plugins that we've implemented which are applying the detection approaches which",
    "start": "1934640",
    "end": "1939679"
  },
  {
    "text": "we have described in this talk and those are all referenced in the next slides where you",
    "start": "1939679",
    "end": "1946480"
  },
  {
    "text": "can grab them some limitations um we still have the issue for the",
    "start": "1946480",
    "end": "1952799"
  },
  {
    "start": "1948000",
    "end": "1948000"
  },
  {
    "text": "subversion with the blue screen and windows with our pd subversions so this is something that we need to",
    "start": "1952799",
    "end": "1958960"
  },
  {
    "text": "fix also the detection approaches for the pt subversions on windows can be circumvented by shared memory by",
    "start": "1958960",
    "end": "1966960"
  },
  {
    "text": "the usage of chat memory so there's something that we have uh in the future to have a closer look at",
    "start": "1966960",
    "end": "1972720"
  },
  {
    "text": "also there were quite some false positives with windows with linux with the detections so that's something",
    "start": "1972720",
    "end": "1979039"
  },
  {
    "text": "that's not ideal at the moment also an additional problem in linux there can be page",
    "start": "1979039",
    "end": "1984240"
  },
  {
    "text": "instances so paid structure instances that have no corresponding mapping and by that",
    "start": "1984240",
    "end": "1991679"
  },
  {
    "text": "it's not possible for us at the moment to attack those pages with in regards to subversion",
    "start": "1991679",
    "end": "1997039"
  },
  {
    "text": "techniques and also again on linux our ptc version detection implementation is at the",
    "start": "1997039",
    "end": "2003519"
  },
  {
    "text": "moment quite time consuming the main reason is that we",
    "start": "2003519",
    "end": "2009360"
  },
  {
    "text": "have not yet implemented the ms remapping detection because the same approach for that is also used to speed up the pd",
    "start": "2009360",
    "end": "2016480"
  },
  {
    "text": "subversion so as soon as we have implemented that also the pd subversion detection should be faster but at the moment it's quite",
    "start": "2016480",
    "end": "2022799"
  },
  {
    "text": "slow okay some words to future work",
    "start": "2022799",
    "end": "2027840"
  },
  {
    "start": "2024000",
    "end": "2024000"
  },
  {
    "text": "one thing that we want to have a closer look at is different ways for mapping shared memory especially",
    "start": "2027840",
    "end": "2033840"
  },
  {
    "text": "using subfuse and by that maybe circumventing our detection approaches",
    "start": "2033840",
    "end": "2040399"
  },
  {
    "text": "also we want to resolve the windows crash obviously and we are also wanting to have a closer",
    "start": "2040399",
    "end": "2046080"
  },
  {
    "text": "look at the new windows 10 memory combining feature so this might be something that interferes with our detection and",
    "start": "2046080",
    "end": "2052480"
  },
  {
    "text": "subversion techniques and we should have a closer look at and last but not least manipulating",
    "start": "2052480",
    "end": "2058720"
  },
  {
    "text": "everything that we've used for detection so far so the mmp mmp fans drugs paid",
    "start": "2058720",
    "end": "2064398"
  },
  {
    "text": "structures messing with those might be interesting to look at in order to",
    "start": "2064399",
    "end": "2070240"
  },
  {
    "text": "prevent the detection from being successful so with that thank you for attention if",
    "start": "2070240",
    "end": "2076158"
  },
  {
    "text": "there are any questions hopefully we have some time for them here are the resources so all the links to all the proof concept implementations",
    "start": "2076159",
    "end": "2083200"
  },
  {
    "text": "and plugins and with that are there any questions",
    "start": "2083200",
    "end": "2089040"
  },
  {
    "text": "okay hello everybody i hope you can hear me fine i'm not sure if it's working right now",
    "start": "2089040",
    "end": "2094800"
  },
  {
    "text": "because my screen freaks here",
    "start": "2094800",
    "end": "2099119"
  },
  {
    "text": "and now i see there's a movement",
    "start": "2099920",
    "end": "2103838"
  },
  {
    "text": "yeah hello yeah i started to talk but i'm not sure",
    "start": "2107680",
    "end": "2114880"
  },
  {
    "text": "if everybody can hear me maybe in the chat someone can tell me if you hear me fine",
    "start": "2114880",
    "end": "2130240"
  },
  {
    "text": "but do they hear me because i don't see any reactions in the chat",
    "start": "2130240",
    "end": "2136400"
  },
  {
    "text": "okay yeah",
    "start": "2137040",
    "end": "2145040"
  },
  {
    "text": "hello so if there are any questions feel free to",
    "start": "2145040",
    "end": "2150079"
  },
  {
    "text": "do it in the chat um otherwise thank you for your attention",
    "start": "2150160",
    "end": "2156320"
  },
  {
    "text": "hope you enjoyed the talk and the rest of the conference",
    "start": "2156320",
    "end": "2160560"
  },
  {
    "text": "oh yeah okay now",
    "start": "2162640",
    "end": "2173838"
  },
  {
    "text": "yeah thank you let's see now that you can hear me i had a little delay in the chat so i",
    "start": "2174400",
    "end": "2180079"
  },
  {
    "text": "was not sure okay thank you very much",
    "start": "2180079",
    "end": "2187838"
  },
  {
    "text": "i don't see any questions right now then yeah feel free to contact me um",
    "start": "2189440",
    "end": "2196079"
  },
  {
    "text": "there's some coding information in the github page feel free to email me uh my linkedin handle should also be in",
    "start": "2196079",
    "end": "2203680"
  },
  {
    "text": "my profile so yeah if there are any further questions later on feel free to uh question and put a question somewhere",
    "start": "2203680",
    "end": "2211599"
  },
  {
    "text": "in the mobile world uh otherwise yeah enjoy the rest of the conference",
    "start": "2211599",
    "end": "2219040"
  },
  {
    "text": "see",
    "start": "2219040",
    "end": "2221200"
  },
  {
    "text": "you too thank you",
    "start": "2226800",
    "end": "2229839"
  }
]