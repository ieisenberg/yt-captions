[
  {
    "text": "well thanks for coming I appreciate that it's towards the end of the black cat",
    "start": "30",
    "end": "5370"
  },
  {
    "text": "conference and I'm delighted to be here for my first ever speaking engagement at",
    "start": "5370",
    "end": "10559"
  },
  {
    "text": "blackhat I can say unequivocally that this is the most people I've ever seen in one room coming to one of my talks",
    "start": "10559",
    "end": "17449"
  },
  {
    "text": "Phil Young and I gave a talk at RSA last year and there were seven people in the",
    "start": "17449",
    "end": "23460"
  },
  {
    "text": "room including me and Phil so this is outstanding thank you now most of you",
    "start": "23460",
    "end": "28920"
  },
  {
    "text": "are probably thinking wait I'm in the wrong room but you can't leave now you're in so you have to say and I take",
    "start": "28920",
    "end": "35489"
  },
  {
    "text": "the next few slides to just talk a little bit about me before we dive into it so if I could just draw your attention over to one of these monitors",
    "start": "35489",
    "end": "43129"
  },
  {
    "text": "so I spent the last prior to the last year and a half about the last 20 years at a large financial institution and",
    "start": "66400",
    "end": "73040"
  },
  {
    "text": "basically got tired of working for corporate America and then I reached out",
    "start": "73040",
    "end": "79220"
  },
  {
    "text": "to a friend of mine who owns a consulting company in the UK said hey how about we start a franchise in the US",
    "start": "79220",
    "end": "85400"
  },
  {
    "text": "under for our SM partners and I'll run it and we thought that was a great idea so we did so I am the director of",
    "start": "85400",
    "end": "92800"
  },
  {
    "text": "operations for North American Forests and partners and all we do is mainframe we do mainframes security assessments",
    "start": "92800",
    "end": "98450"
  },
  {
    "text": "mainframe software we do Red Team augmentation and when I talk about",
    "start": "98450",
    "end": "104180"
  },
  {
    "text": "mainframe for the purposes of this talk I am talking about IBM's System z running z/os there are other",
    "start": "104180",
    "end": "111710"
  },
  {
    "text": "things that maybe rightly or wrongly considered a mainframe but for what we're talking about gear we're talking about what is probably the 800-pound",
    "start": "111710",
    "end": "118070"
  },
  {
    "text": "gorilla the most predominant mainframe out there you may have heard of it",
    "start": "118070",
    "end": "123440"
  },
  {
    "text": "referred to as system Z or Z MVS is the",
    "start": "123440",
    "end": "128810"
  },
  {
    "text": "operating system now called z/os for the last several years that's what we'll be talking about here so what is this talk",
    "start": "128810",
    "end": "137110"
  },
  {
    "text": "this talk is a year maybe he's worth of research and working on stuff condensed",
    "start": "137110",
    "end": "143240"
  },
  {
    "text": "into 40 minutes it's probably several week class if we were to really blow",
    "start": "143240",
    "end": "148730"
  },
  {
    "text": "through it all so I am gonna talk about a lot of these things as if you already know what what I'm talking about because I can't go into a tremendous amount of",
    "start": "148730",
    "end": "155090"
  },
  {
    "text": "detail but I'll make analogies wherever I can to things that a lot of you probably do understand if you're not a",
    "start": "155090",
    "end": "160700"
  },
  {
    "text": "mainframe ER by the way who in the room would consider themselves a mainframe er unit you know who you are that's pretty",
    "start": "160700",
    "end": "168440"
  },
  {
    "text": "reasonable I think I saw six maybe four perfect so all of the main framers at blackhat are probably here I think",
    "start": "168440",
    "end": "174920"
  },
  {
    "text": "that's safe to say but the things that we talked about not specifically the mainframe will be familiar to you so",
    "start": "174920",
    "end": "181220"
  },
  {
    "text": "we're gonna talk a little bit about the machine itself a little bit about the structure of it the CPU instructions",
    "start": "181220",
    "end": "187550"
  },
  {
    "text": "binaries vulnerabilities some of the tools that are out there how we might exploit and find these vulnerabilities",
    "start": "187550",
    "end": "193280"
  },
  {
    "text": "but there's a lot of one-on-one stuff out there that I'm not going to go into you can look at all the people listed",
    "start": "193280",
    "end": "198500"
  },
  {
    "text": "there below have done talks and videos and blog posts and all kinds of stuff",
    "start": "198500",
    "end": "203660"
  },
  {
    "text": "101 wise on this platform that's not this so we talked about the mainframe as",
    "start": "203660",
    "end": "210560"
  },
  {
    "text": "just as a machine for a minute if I bring up mainframe to somebody usually",
    "start": "210560",
    "end": "215840"
  },
  {
    "text": "after they asked what I do this first word or maybe somewhere in the top 10",
    "start": "215840",
    "end": "221270"
  },
  {
    "text": "words that comes out of their mouth is this anybody know what this is yeah this",
    "start": "221270",
    "end": "227420"
  },
  {
    "text": "is COBOL right so I say I do mainframe it I'm like oh god that thing runs COBOL right it's like yeah is that is that",
    "start": "227420",
    "end": "234709"
  },
  {
    "text": "COBOL I'm like that's not really COBOL anymore then your dishwasher is a fork right it's an operating system that runs",
    "start": "234709",
    "end": "243019"
  },
  {
    "text": "a bunch of different programming languages COBOL just happens to be one of them got bad news if you're kind of",
    "start": "243019",
    "end": "248989"
  },
  {
    "text": "one of these people who's against COBOL caused a great deal of the world runs on it still in fact here's a tip and don't",
    "start": "248989",
    "end": "254330"
  },
  {
    "text": "share that outside this room but if you want to make a ton of money learn how to write COBOL because you'll probably never have to ask for another job again",
    "start": "254330",
    "end": "262810"
  },
  {
    "text": "if you ask the media what a mainframe is generally you'll get something that looks like this oops so IBM released",
    "start": "262810",
    "end": "273110"
  },
  {
    "text": "their new flagship systems II this year called the Z 14 has been by all accounts",
    "start": "273110",
    "end": "279410"
  },
  {
    "text": "just a raging success and there was a whole bunch of news articles about it and one of them from a really well-known",
    "start": "279410",
    "end": "285560"
  },
  {
    "text": "newspaper talked about it did a great job talking about it and ran the byline with this picture you know I don't know",
    "start": "285560",
    "end": "292850"
  },
  {
    "text": "how I'm gonna change people's minds if I can't get the Wall Street Journal to publish a better picture than that but",
    "start": "292850",
    "end": "298789"
  },
  {
    "text": "what it really is if you want to know what it looks like is something like this probably not all that dissimilar to things you have in your data center",
    "start": "298789",
    "end": "304880"
  },
  {
    "text": "today it's a lot of rack full of CPU and memory and a bunch of racks full of storage it's important it's really",
    "start": "304880",
    "end": "312919"
  },
  {
    "text": "important so these these numbers are over a year old that they've gone up",
    "start": "312919",
    "end": "318080"
  },
  {
    "text": "since then but I didn't feel like updating them but effectively from a Global Payments perspective the",
    "start": "318080",
    "end": "324020"
  },
  {
    "text": "mainframes globally process about eight trillion dollars twenty nine billion ATM transactions",
    "start": "324020",
    "end": "329190"
  },
  {
    "text": "four billion passenger flights these numbers don't mean much to me so I like to break them down into something a little bit smaller eight trillion",
    "start": "329190",
    "end": "336720"
  },
  {
    "text": "dollars is the GDP of the UK France India and Brazil combined or eight",
    "start": "336720",
    "end": "341730"
  },
  {
    "text": "apples if your passenger flights per",
    "start": "341730",
    "end": "347610"
  },
  {
    "text": "minute transactions per second that last one was kind of interesting in terms of the number of global transactions per",
    "start": "347610",
    "end": "353070"
  },
  {
    "text": "second it's about eight and a half times what Google does I like to use analogies",
    "start": "353070",
    "end": "359280"
  },
  {
    "text": "wherever I can because this kind of a it is not not a pun intended a black box for a lot of people I know that the rage",
    "start": "359280",
    "end": "366360"
  },
  {
    "text": "today is you know full-stack to developers DevOps which in my mind looks",
    "start": "366360",
    "end": "372060"
  },
  {
    "text": "a little bit like this if you think about that from a mainframe from a",
    "start": "372060",
    "end": "378090"
  },
  {
    "text": "mainframe perspective though is probably a little bit more like this if you go into a mainframe shop today what you'll",
    "start": "378090",
    "end": "384090"
  },
  {
    "text": "probably find are a bunch of people who are very siloed and very much have expertise in one particular area of it",
    "start": "384090",
    "end": "391169"
  },
  {
    "text": "maybe networking maybe security maybe storage all working in concert to make",
    "start": "391169",
    "end": "398100"
  },
  {
    "text": "this thing to sing make it perform as much as as much as it possibly can so",
    "start": "398100",
    "end": "405690"
  },
  {
    "text": "I'm going to dive a little bit into the architecture the actual Z architecture the CPU and a little bit into z/os with",
    "start": "405690",
    "end": "413700"
  },
  {
    "text": "the lens towards what we're talking about today which is exploits and vulnerabilities so the CPU a lot of",
    "start": "413700",
    "end": "421050"
  },
  {
    "text": "people don't know the CPU is a different CPU it's not x86 it's not arm it's Z architecture right it's it's own",
    "start": "421050",
    "end": "427740"
  },
  {
    "text": "CPU now it has a lot in common with those other CPUs it's a von Neumann architecture right so",
    "start": "427740",
    "end": "433770"
  },
  {
    "text": "you've got data and instructions occupying the same memory space you can execute data as instructions like shell",
    "start": "433770",
    "end": "439800"
  },
  {
    "text": "code but it is a different animal altogether so from an exploit point of view there's",
    "start": "439800",
    "end": "445680"
  },
  {
    "text": "a few things we need to understand we're always looking at escalating our privileges so we're going to start at",
    "start": "445680",
    "end": "450780"
  },
  {
    "text": "the lowest level and work up the CPU can operate for any given address for any given process in a couple of states",
    "start": "450780",
    "end": "457050"
  },
  {
    "text": "problem State and supervisor state problem state is kind of normal right so problem state",
    "start": "457050",
    "end": "464050"
  },
  {
    "text": "is normal makes sense right supervisor state is the one that allows you to do pretty much anything you want",
    "start": "464050",
    "end": "469330"
  },
  {
    "text": "really the difference between these two states is how many of the instructions that the CPU knows about can you execute",
    "start": "469330",
    "end": "475090"
  },
  {
    "text": "if you're in supervisor state you can execute the full gamut of instructions if you are in problem state you can only",
    "start": "475090",
    "end": "481330"
  },
  {
    "text": "execute some of that some subset of that especially not the ones that allow you",
    "start": "481330",
    "end": "486790"
  },
  {
    "text": "to do privileged executions for instance there's one there's one instruction that",
    "start": "486790",
    "end": "493419"
  },
  {
    "text": "allows you to move from problem state to supervisor state so the goal of most exploits or most things we're trying to",
    "start": "493419",
    "end": "498610"
  },
  {
    "text": "do is to be able to get to execute that instruction simple enough couple of",
    "start": "498610",
    "end": "504970"
  },
  {
    "text": "other terms you need to understand as we go on here PSW stands for program status",
    "start": "504970",
    "end": "511389"
  },
  {
    "text": "word so for x86 people out there this is kind of like a combination of AI PR IP",
    "start": "511389",
    "end": "518800"
  },
  {
    "text": "it's your instruction pointer tells you what instruction in memory what a memory address is gonna be executed next and a",
    "start": "518800",
    "end": "525010"
  },
  {
    "text": "bunch of flags all kind of smashed together one of those flags is are you in is this process that I'm talking",
    "start": "525010",
    "end": "531279"
  },
  {
    "text": "about in problem state or in supervisor state the processor the current model",
    "start": "531279",
    "end": "537820"
  },
  {
    "text": "processor can run in three different modes it can run 24 bit programs run 31",
    "start": "537820",
    "end": "542830"
  },
  {
    "text": "bit binaries and it can run 64-bit binaries if you take only a couple",
    "start": "542830",
    "end": "548170"
  },
  {
    "text": "things away from this talk one thing to help you get into the right mindset about mainframe is it's backwards",
    "start": "548170",
    "end": "553360"
  },
  {
    "text": "compatible to a fault the name of the game and one of the reasons why",
    "start": "553360",
    "end": "558430"
  },
  {
    "text": "mainframe kind of slips into lore as this old technology this antiquated technology is because code that was",
    "start": "558430",
    "end": "564130"
  },
  {
    "text": "written in the 70s can still run on the very current model architecture with almost and then in some cases no",
    "start": "564130",
    "end": "571029"
  },
  {
    "text": "modification whatsoever there are absolutely organizations out there running binaries that they wrote 30",
    "start": "571029",
    "end": "576310"
  },
  {
    "text": "years ago that they don't have the source code to and they just work it just works the other thing in our stance",
    "start": "576310",
    "end": "584950"
  },
  {
    "text": "we've got problem state and supervisor state in terms of the CPU mode is this idea of access storage keys so when I",
    "start": "584950",
    "end": "592750"
  },
  {
    "text": "talk about storage I'm talking about memory and talking about RAM okay part of getting",
    "start": "592750",
    "end": "597910"
  },
  {
    "text": "into the mainframe vibe is understanding the parlance that they use for things and I hate to tell you but they were",
    "start": "597910",
    "end": "604060"
  },
  {
    "text": "here first so it's not like they're gonna change their way anytime soon we",
    "start": "604060",
    "end": "609310"
  },
  {
    "text": "talked about access storage keys what I'm talking about is for any given address space for any given process",
    "start": "609310",
    "end": "614770"
  },
  {
    "text": "there is a key a byte between 0 and 15 that says simply put what memory pages",
    "start": "614770",
    "end": "624910"
  },
  {
    "text": "does it have access to each page of memory also has a key basically if those pages match and I'm oversimplifying this",
    "start": "624910",
    "end": "631779"
  },
  {
    "text": "you might be able to read and write that memory if they don't match you're not going to be able to read and write that memory the exception then is key 0 which",
    "start": "631779",
    "end": "639700"
  },
  {
    "text": "allows you to read and write any memory so the goal from a privileged escalation point of view is to get the supervisor",
    "start": "639700",
    "end": "645970"
  },
  {
    "text": "state key 0 I can execute all the things and I can read and write all the memory",
    "start": "645970",
    "end": "652380"
  },
  {
    "text": "lots just to recap so that's that that is just the architecture that has nothing whatsoever to do with the",
    "start": "654720",
    "end": "661060"
  },
  {
    "text": "operating system at this point so z/os has this idea of operating",
    "start": "661060",
    "end": "667089"
  },
  {
    "text": "system integrity whereby it decides through a series of fairly simple rules",
    "start": "667089",
    "end": "672450"
  },
  {
    "text": "who can who can execute in an authorized state when I say authorized state I'm talking about who has the ability to you",
    "start": "672450",
    "end": "680110"
  },
  {
    "text": "know change that CPU into supervisor mode or become key 0 there's a few",
    "start": "680110",
    "end": "685839"
  },
  {
    "text": "different ways to do that there are more than I list here but these are the common ones the first one which is should be obvious is is in the early IPL",
    "start": "685839",
    "end": "692529"
  },
  {
    "text": "process or the boot process IPL initial program load booting you boot the",
    "start": "692529",
    "end": "697810"
  },
  {
    "text": "mainframe that all has to be run an authorized code because it is the code responsible for setting up the operating",
    "start": "697810",
    "end": "703209"
  },
  {
    "text": "system and making sure it can do what it needs to do at some point in time when the operating system is sufficiently",
    "start": "703209",
    "end": "708399"
  },
  {
    "text": "loaded it gets locked down and when user land programs start running then they",
    "start": "708399",
    "end": "714279"
  },
  {
    "text": "have a couple of other options if they need to perform authorized functions they have supervisor calls and program",
    "start": "714279",
    "end": "720370"
  },
  {
    "text": "calls so these can be analogous to what you think about in Linux is maybe a sis call so if you're writing a",
    "start": "720370",
    "end": "727139"
  },
  {
    "text": "program you have to do an open or a closed socket connect those kinds of things those are things that are",
    "start": "727139",
    "end": "732839"
  },
  {
    "text": "necessarily part of the kernel because they have to do very privileged operations right IO to a device reading",
    "start": "732839",
    "end": "738660"
  },
  {
    "text": "writing from a hard disk those are privileged operations you don't want average users to be able to do that's",
    "start": "738660",
    "end": "743669"
  },
  {
    "text": "why you have assist call you think we're gonna talk a lot about SVC so you can think about that loosely as a as like",
    "start": "743669",
    "end": "749519"
  },
  {
    "text": "what it would be assist call in Linux the other construct which doesn't have a",
    "start": "749519",
    "end": "755249"
  },
  {
    "text": "really good analogy in Linux or Windows Land is this idea of an AP F authorized",
    "start": "755249",
    "end": "761160"
  },
  {
    "text": "library list so in a nutshell what this is is a list of libraries on the",
    "start": "761160",
    "end": "768179"
  },
  {
    "text": "mainframe and all the mainframes in here cringe when I say this but a library you could kind of think about like a folder so it's a list of folders that have a",
    "start": "768179",
    "end": "777449"
  },
  {
    "text": "property such that if you can have if you are a binary if you can put a binary in this folder any binaries in this",
    "start": "777449",
    "end": "783059"
  },
  {
    "text": "folder can run authorized by definition so what that means is there's a",
    "start": "783059",
    "end": "789359"
  },
  {
    "text": "concatenation or a list of these libraries that's set up on IPL on boot if you can write to one of these",
    "start": "789359",
    "end": "795149"
  },
  {
    "text": "libraries write to one of these libraries or if you can add a library",
    "start": "795149",
    "end": "800610"
  },
  {
    "text": "that you can write to to this list dynamically which is also possible that is game over because now you can run a",
    "start": "800610",
    "end": "807119"
  },
  {
    "text": "binary in supervisor state p0 by definition this is how the system",
    "start": "807119",
    "end": "812279"
  },
  {
    "text": "maintains can integrity this system basically z/os basically says only",
    "start": "812279",
    "end": "817769"
  },
  {
    "text": "authorized programs can call other authorized programs unless you meet one",
    "start": "817769",
    "end": "823679"
  },
  {
    "text": "of these criteria I'm going to blow really quickly through the tools and",
    "start": "823679",
    "end": "828929"
  },
  {
    "text": "this is basically just to kind of show you what's out there and and some of it",
    "start": "828929",
    "end": "834179"
  },
  {
    "text": "I think you'll find hilarious if you're if you work in reverse engineering or you spend any time and like Ida it's",
    "start": "834179",
    "end": "840539"
  },
  {
    "text": "worth mentioning that the debuggers and disassemblers for the most part on the mainframe were designed for people who",
    "start": "840539",
    "end": "846600"
  },
  {
    "text": "have the code to the program they're debugging or disassembling right not like reverse engineering or looking for",
    "start": "846600",
    "end": "853769"
  },
  {
    "text": "vulnerabilities and that kind of stuff they they don't do a very good job of this but some of these are really quite",
    "start": "853769",
    "end": "858899"
  },
  {
    "text": "clever so I thought I would show them to you first ones called DB X DB X is a",
    "start": "858899",
    "end": "864629"
  },
  {
    "text": "debugger actually I think Oracle has DB x as well it looks a little bit like gdb",
    "start": "864629",
    "end": "871110"
  },
  {
    "text": "it's kind of gdb esque it's nowhere near as functional as gdb but the good thing about DB x if you're just getting",
    "start": "871110",
    "end": "877379"
  },
  {
    "text": "started in this the mainframe has a unix-like interface it's not a separate operating system it's just a separate",
    "start": "877379",
    "end": "882990"
  },
  {
    "text": "interface to the to the operating system it really looks like AI X DB X runs in",
    "start": "882990",
    "end": "889709"
  },
  {
    "text": "in the UNIX based operating system so if you're new to it like I was when I",
    "start": "889709",
    "end": "894930"
  },
  {
    "text": "started this it's a good place to learn because it'll be the most familiar to you debug tool this one's just hilarious",
    "start": "894930",
    "end": "902899"
  },
  {
    "text": "it's that I'm game ajan staring at that all day long but there's a lot of limitations to it you can't do",
    "start": "902899",
    "end": "908970"
  },
  {
    "text": "authorized code you can't do cross memory stuff it's super kludgy but man those colors are cool the the debugger",
    "start": "908970",
    "end": "918329"
  },
  {
    "text": "that comes with the high-level assembler is pretty good and actually if you modify it a little bit you can do authorized code debugging and",
    "start": "918329",
    "end": "925139"
  },
  {
    "text": "disassembly I lived in this one for a long time before I got the one that I use now which was a third party product",
    "start": "925139",
    "end": "930829"
  },
  {
    "text": "all of the previous ones are all IBM products some of them come with come with the operating system some of them",
    "start": "930829",
    "end": "936899"
  },
  {
    "text": "are add-ons TSO ii test is kind of an interesting one it's the original it's",
    "start": "936899",
    "end": "942540"
  },
  {
    "text": "all command driven it's the one where if you're stuck on a system and you have to",
    "start": "942540",
    "end": "947879"
  },
  {
    "text": "live off the land if you know how to use it you might be able to get what you need done but basically you type the",
    "start": "947879",
    "end": "953670"
  },
  {
    "text": "command TSO he tests in your binary name and then you just get a prompt so it's a little bit like running gdb without any",
    "start": "953670",
    "end": "960269"
  },
  {
    "text": "you know any chewy interface or Python interface or anything like that or as",
    "start": "960269",
    "end": "966839"
  },
  {
    "text": "somebody likened it once if you ever ended up in Linux using the editor edie",
    "start": "966839",
    "end": "971850"
  },
  {
    "text": "and you're like what the hell is this I have like one line of text that I can enter and I can't see it when I'm done",
    "start": "971850",
    "end": "978569"
  },
  {
    "text": "and how do I exit this thing it's kind of like that z/xdc is the real contender it's made by a third party Cole soft and",
    "start": "978569",
    "end": "986600"
  },
  {
    "text": "it is it is very good it has all the features you would want on this platform it's still text based on the interface",
    "start": "986600",
    "end": "993900"
  },
  {
    "text": "but it's exceptionally good as one I'll use for my demonstration some miscellaneous tools these are things we",
    "start": "993900",
    "end": "1000890"
  },
  {
    "text": "find on pen tests on systems that are part of the operating system that can be useful in a pinch some of them are",
    "start": "1000890",
    "end": "1007090"
  },
  {
    "text": "really useful I start ddn is kind of a handy Swiss Army knife lets you look at",
    "start": "1007090",
    "end": "1012910"
  },
  {
    "text": "lets you look at the concatenations of folders you can also browse memory so you can actually browse your address",
    "start": "1012910",
    "end": "1018890"
  },
  {
    "text": "space with this which will show later which is pretty handy disassemble is a disassembler i'm not shockingly and amb",
    "start": "1018890",
    "end": "1026510"
  },
  {
    "text": "list is kind of like a knob them objdump that you might use on linux to basically show you entry points and external",
    "start": "1026510",
    "end": "1032689"
  },
  {
    "text": "symbols and that sort of stuff from a binary so we can't talk about exploiting",
    "start": "1032690",
    "end": "1038120"
  },
  {
    "text": "in binaries and finding vulnerabilities without talking about the binary formats just like if we were doing this in Linux and Windows we couldn't do it without",
    "start": "1038120",
    "end": "1044030"
  },
  {
    "text": "talking about l4 PE or something like that so briefly we'll talk about the binaries and how it works",
    "start": "1044030",
    "end": "1049310"
  },
  {
    "text": "generally speaking the creation of binaries works just like it does on any other platform you've got source code",
    "start": "1049310",
    "end": "1054380"
  },
  {
    "text": "you can pilot get an object you link it and then you have a binary there are a few exceptions that and also it's",
    "start": "1054380",
    "end": "1061940"
  },
  {
    "text": "important that you get the nominal Eicher so take your source code we compile it or assemble it and that",
    "start": "1061940",
    "end": "1067010"
  },
  {
    "text": "generates program object so program objects are non executable compiled but",
    "start": "1067010",
    "end": "1072020"
  },
  {
    "text": "don't have the external references that might come at the time of loading them there is an option to take those program",
    "start": "1072020",
    "end": "1079730"
  },
  {
    "text": "objects through what's called a batch loader and it links those program objects and writes them directly into memory it doesn't actually put them on",
    "start": "1079730",
    "end": "1086300"
  },
  {
    "text": "disk so you can take your objects you can link edit them you can put it directly into memory and execute it right out of memory that binary never",
    "start": "1086300",
    "end": "1092570"
  },
  {
    "text": "exists on disk interesting possibilities but the more traditional route you take",
    "start": "1092570",
    "end": "1099320"
  },
  {
    "text": "your program object you link edit it you bind it you create what's called a program module and then you write that",
    "start": "1099320",
    "end": "1104420"
  },
  {
    "text": "to disk or in mainframe parlance des the direct access storage device or the disk we'll just call it a disk program",
    "start": "1104420",
    "end": "1113390"
  },
  {
    "text": "modules then have a couple of different types so these are the actual executable binaries load modules and program",
    "start": "1113390",
    "end": "1119000"
  },
  {
    "text": "objects a load module is a legacy construct that's been around for a long time program object is relatively new",
    "start": "1119000",
    "end": "1125840"
  },
  {
    "text": "relatively new has a lot more features a bunch of different kind of formats and that sort",
    "start": "1125840",
    "end": "1131780"
  },
  {
    "text": "of thing I'm not gonna dive into these at all except to say that the differentiation between them has to do",
    "start": "1131780",
    "end": "1137720"
  },
  {
    "text": "with where they land so if you're creating a binary whether it's a load",
    "start": "1137720",
    "end": "1143780"
  },
  {
    "text": "module or whether it's a program object depends upon where that final binary lives if it lives in UNIX system",
    "start": "1143780",
    "end": "1149870"
  },
  {
    "text": "services on the mainframe or if it lives in a PDS II it's a program object if it lives in a PDS it's a load module when",
    "start": "1149870",
    "end": "1157610"
  },
  {
    "text": "you upload the slides I just put these in here so people can look at the the manual that basically lays all this out",
    "start": "1157610",
    "end": "1163760"
  },
  {
    "text": "so if you want to learn more about this I've got slides through here when I post these it's like here's the manual that",
    "start": "1163760",
    "end": "1169160"
  },
  {
    "text": "really breaks all this down some really basic assembler constructs the assembler",
    "start": "1169160",
    "end": "1174230"
  },
  {
    "text": "is very very intuitive it's a great assembler language really intuitive I find it a lot more intuitive actually",
    "start": "1174230",
    "end": "1179330"
  },
  {
    "text": "the next 86 assembler but a couple of ideas that don't exactly match up here",
    "start": "1179330",
    "end": "1184840"
  },
  {
    "text": "store and the structions that revolve around store have to do with moving something into a memory address so from",
    "start": "1184840",
    "end": "1192410"
  },
  {
    "text": "a register into memory or from memory into memory a load is the opposite has to do with moving something into a",
    "start": "1192410",
    "end": "1198560"
  },
  {
    "text": "register so from memory to a register from a register to register addressing",
    "start": "1198560",
    "end": "1204260"
  },
  {
    "text": "is could be relative or base plus displacement so generally speaking you",
    "start": "1204260",
    "end": "1209990"
  },
  {
    "text": "have a base register and if you're addressing a variable or something in memory of a base register which is usually set to maybe the beginning of",
    "start": "1209990",
    "end": "1216050"
  },
  {
    "text": "your program its entry point and then you have an offset pointing to where where your variable in the data you're",
    "start": "1216050",
    "end": "1222110"
  },
  {
    "text": "trying to access can also be relative just like in x86 where I want to say I want to access the thing that's 67 bytes",
    "start": "1222110",
    "end": "1227960"
  },
  {
    "text": "from where I'm at right now can do both this is just an example of an",
    "start": "1227960",
    "end": "1233240"
  },
  {
    "text": "instruction a common instruction and what it looks like if you look it up in the manual there they're all documented very well but just to give you an idea",
    "start": "1233240",
    "end": "1239390"
  },
  {
    "text": "and then also what it looks like in assembler as well so this instruction",
    "start": "1239390",
    "end": "1245000"
  },
  {
    "text": "basically just takes a memory address and puts that address into a register",
    "start": "1245000",
    "end": "1250210"
  },
  {
    "text": "when you look it up in the you look it up in the manual you'll see the mnemonic right there up in the corner la for load",
    "start": "1250210",
    "end": "1257540"
  },
  {
    "text": "address and then you'll see this construct right here which basically is how you lay it out you've got the the target register left",
    "start": "1257540",
    "end": "1263370"
  },
  {
    "text": "to right target register displacement and then what the base register is to calculate the address from and then",
    "start": "1263370",
    "end": "1270030"
  },
  {
    "text": "below that it's got the Machine opcodes so when you see it in shellcode or when you see it in a machine code you can",
    "start": "1270030",
    "end": "1275340"
  },
  {
    "text": "know what that looks like so I've written the same instruction three times just so you can see what it looks like an assembler so this instruction the",
    "start": "1275340",
    "end": "1282660"
  },
  {
    "text": "kind of like Intel syntax you've got target comma source so load address in",
    "start": "1282660",
    "end": "1288060"
  },
  {
    "text": "to register for from my variable that will get resolved that gets resolved at",
    "start": "1288060",
    "end": "1294270"
  },
  {
    "text": "compile time but for readability you would code it like this you can do it directly and say I want to load address",
    "start": "1294270",
    "end": "1301560"
  },
  {
    "text": "into r4 from register 7 which we don't know where register 7 points here but we",
    "start": "1301560",
    "end": "1307200"
  },
  {
    "text": "know that one echo hex bytes from register 7 is also where the address is",
    "start": "1307200",
    "end": "1313110"
  },
  {
    "text": "going to get loaded into register 4 and we could do it as shellcode and this will execute just fine as well where we",
    "start": "1313110",
    "end": "1319050"
  },
  {
    "text": "basically just coded in the same format that you see it on the left hand side so when we talk about shellcode here in a minute that's what that'll look like",
    "start": "1319050",
    "end": "1325560"
  },
  {
    "text": "that is basically just a declaration of a constant if you will it has a label s3",
    "start": "1325560",
    "end": "1331890"
  },
  {
    "text": "and the constant is four hex bytes 4 1 4 0 700 1e and there again is to manually",
    "start": "1331890",
    "end": "1340020"
  },
  {
    "text": "if you want to read all about that principles of operation is the manual that describes the architecture",
    "start": "1340020",
    "end": "1345750"
  },
  {
    "text": "describes all the mnemonics describes all the assembler statements describes how the system works it is a jarring read that is really good",
    "start": "1345750",
    "end": "1353610"
  },
  {
    "text": "for insomnia but it is absolutely essential reference manual so we talked",
    "start": "1353610",
    "end": "1360030"
  },
  {
    "text": "about vulnerabilities there's a link at the end of this where IBM lists the six coding sins on the mainframe I'm only",
    "start": "1360030",
    "end": "1367260"
  },
  {
    "text": "going to talk about a couple of them for the purposes of the purpose of this talk but what you'll find when you look at",
    "start": "1367260",
    "end": "1372780"
  },
  {
    "text": "the vulnerabilities is by and large they're similar to vulnerabilities that you would find on other platforms it",
    "start": "1372780",
    "end": "1378330"
  },
  {
    "text": "might just be called something different but they're pretty common here's an example so untrusted parameters so",
    "start": "1378330",
    "end": "1385530"
  },
  {
    "text": "you've got a service call which is you'll remember like a sis call and that",
    "start": "1385530",
    "end": "1391830"
  },
  {
    "text": "is a privileged program that is a program that can run authorized so it incumbent upon the privileged program to",
    "start": "1391830",
    "end": "1397380"
  },
  {
    "text": "make sure that the calling program which is not privileged is authorized to either read or write wherever it's being",
    "start": "1397380",
    "end": "1403740"
  },
  {
    "text": "told to read or write to so as an example if I call a service if I call an FCC and say hey you know fetch me the",
    "start": "1403740",
    "end": "1410940"
  },
  {
    "text": "fetch me that data that's in memory location XYZ it's incumbent upon that SVC to make sure that I actually have",
    "start": "1410940",
    "end": "1416910"
  },
  {
    "text": "the ability to read that if I don't have the ability to read that as my user it should not perform that action but we",
    "start": "1416910",
    "end": "1423270"
  },
  {
    "text": "see lots of them that do write so I just passed it a memory space and say hey read that for me and return it and if",
    "start": "1423270",
    "end": "1429450"
  },
  {
    "text": "it's not checking to see if I had access the proper access to that to begin with it's not checking my processes key then",
    "start": "1429450",
    "end": "1435540"
  },
  {
    "text": "it was happy we return it in I've got all kinds of vulnerabilities to be able to read memory write read unauthorized",
    "start": "1435540",
    "end": "1441810"
  },
  {
    "text": "memory reads all over the place the worst one is is the converse which is not checking write access so that same",
    "start": "1441810",
    "end": "1448410"
  },
  {
    "text": "eight scenario I call an SVC I say read this memory space just a byte in memory",
    "start": "1448410",
    "end": "1456180"
  },
  {
    "text": "somewhere but return it to the pointer in the in the parameter I'm going to give you a pointer in the one of the",
    "start": "1456180",
    "end": "1461190"
  },
  {
    "text": "parameters where I want the value returned to if that pointer points somewhere that I don't already have access to now you've got an SVC that's",
    "start": "1461190",
    "end": "1468390"
  },
  {
    "text": "doing arbitrary writes and as soon as you can do arbitrary memory rights that's also game over just like just",
    "start": "1468390",
    "end": "1474990"
  },
  {
    "text": "like x86 land buffer overflows work just like buffer overflows work for the maybe",
    "start": "1474990",
    "end": "1482130"
  },
  {
    "text": "one person in here that doesn't know what a buffer overflow is it basically just an unchecked read that's out of",
    "start": "1482130",
    "end": "1488070"
  },
  {
    "text": "bounds outside of wherever it's being stored so you've got a program reads a nine-digit social security number in it",
    "start": "1488070",
    "end": "1493440"
  },
  {
    "text": "but the caller feeds at a hundred digits and now you've overwritten memory that you weren't supposed to write to buy",
    "start": "1493440",
    "end": "1499050"
  },
  {
    "text": "some 91 bytes and if you do that right you can write something important like a return address or a jump address or a",
    "start": "1499050",
    "end": "1505080"
  },
  {
    "text": "routine or maybe just some important data one we're going to talk about today",
    "start": "1505080",
    "end": "1510330"
  },
  {
    "text": "because it's just fun is a real live vendor SVC that we found in the wild",
    "start": "1510330",
    "end": "1515970"
  },
  {
    "text": "then we found it years ago it's since been fixed but I think it's just great and it's great for a couple reasons one",
    "start": "1515970",
    "end": "1522060"
  },
  {
    "text": "we can show you kind of what to look for how this works frankly it's still out there I still",
    "start": "1522060",
    "end": "1527190"
  },
  {
    "text": "find this unpatched version of this but also it really kind of lends to what happens if",
    "start": "1527190",
    "end": "1535690"
  },
  {
    "text": "you have people writing critical code for a critical system but they're not being checked by anyone whether they're",
    "start": "1535690",
    "end": "1541299"
  },
  {
    "text": "a vendor whether they are a user because oftentimes what'll happen like a vendor",
    "start": "1541299",
    "end": "1547539"
  },
  {
    "text": "might leave a bat literally like a backdoor in their code so that when they come in and do maintenance they don't have to go through that pesky change",
    "start": "1547539",
    "end": "1553480"
  },
  {
    "text": "control process right or worry about checking out an authorized ID they can just use this magic switch to get",
    "start": "1553480",
    "end": "1559840"
  },
  {
    "text": "themself access to whatever they need it's also really common to see especially in today's day and age where",
    "start": "1559840",
    "end": "1565780"
  },
  {
    "text": "we we are working on these privileged we're locking people out of their authorized IDs we're not letting you",
    "start": "1565780",
    "end": "1571179"
  },
  {
    "text": "have all that permissions on your developer ID that you used to have the developers aren't taking that line down",
    "start": "1571179",
    "end": "1576940"
  },
  {
    "text": "so they create themselves a little backdoor that they can just call periodically when they need to do a thing or another thing but effectively",
    "start": "1576940",
    "end": "1584650"
  },
  {
    "text": "it just becomes a giant gaping hole that can pierce the integrity of the system the one we're gonna look at today",
    "start": "1584650",
    "end": "1590789"
  },
  {
    "text": "literally takes four parameters action type a secret code which we'll talk more",
    "start": "1590789",
    "end": "1596320"
  },
  {
    "text": "about later and potentially a jump address and that's the pseudo code in",
    "start": "1596320",
    "end": "1602409"
  },
  {
    "text": "the orange box it checks secrets to make sure that if the secrets are not good then it gives you an error and says",
    "start": "1602409",
    "end": "1607900"
  },
  {
    "text": "Shane and if the secrets are good then you get to steal all the things and everything everybody's happy maybe not",
    "start": "1607900",
    "end": "1616230"
  },
  {
    "text": "so I'm gonna look at that in one minute but before we do that I just want to show you an example of what shell code",
    "start": "1616230",
    "end": "1622150"
  },
  {
    "text": "might look like there are there are more succinct ways to do this but I'm a man",
    "start": "1622150",
    "end": "1628270"
  },
  {
    "text": "of like living off the land keeping it simple pretty straightforward but I'll",
    "start": "1628270",
    "end": "1633490"
  },
  {
    "text": "just show you real quick so you get your working code this is JCL that's generated from Metasploit so Metasploit",
    "start": "1633490",
    "end": "1639940"
  },
  {
    "text": "supports this platform there are payloads out there one authenticated exploit a few other things out there",
    "start": "1639940",
    "end": "1645580"
  },
  {
    "text": "this is just assembler and JCL that gets generated from Metasploit put it on my",
    "start": "1645580",
    "end": "1651340"
  },
  {
    "text": "system compile it bind it create a binary then I'm just gonna copy that binary off to my machine because the the",
    "start": "1651340",
    "end": "1657630"
  },
  {
    "text": "manipulation tools on Linux for me are way easier to use then been doing it on the mainframe and",
    "start": "1657630",
    "end": "1663860"
  },
  {
    "text": "I'm essentially just gonna take that binary I'm just gonna use a combination of like xx the grep cut that kind of",
    "start": "1663860",
    "end": "1670730"
  },
  {
    "text": "stuff and make it into a text file that is formatted like a bunch of assembly",
    "start": "1670730",
    "end": "1676420"
  },
  {
    "text": "constant strings I'm gonna put that back up on the mainframe as a text file and",
    "start": "1676420",
    "end": "1682400"
  },
  {
    "text": "then the only other thing I've got to do is resolve those pesky external functions so when you write when you",
    "start": "1682400",
    "end": "1691970"
  },
  {
    "text": "write a program and this is not this is not unique to the mainframe but when you write shell code there's a couple things",
    "start": "1691970",
    "end": "1698030"
  },
  {
    "text": "shell code needs to be one is generally it needs to be a string that can live",
    "start": "1698030",
    "end": "1703580"
  },
  {
    "text": "anywhere in memory and it has to be position independent and it can't require any kind of like a loader so",
    "start": "1703580",
    "end": "1709730"
  },
  {
    "text": "when you load a when you load a program when you execute a binary it fills in all kinds of information for you about",
    "start": "1709730",
    "end": "1715070"
  },
  {
    "text": "where that function is open and read and all this kind of stuff because on different systems they might be in different places in memory that happens",
    "start": "1715070",
    "end": "1721490"
  },
  {
    "text": "when you launch a binary same thing happens on the mainframe so we've got to have functions in here that look that up",
    "start": "1721490",
    "end": "1727250"
  },
  {
    "text": "for us because we're not necessarily launching our shell code right we're gonna be we're gonna be just jumping to",
    "start": "1727250",
    "end": "1732650"
  },
  {
    "text": "it from some area memory so we're gonna put the instruction these in here that do the dynamic lookups a two step",
    "start": "1732650",
    "end": "1738950"
  },
  {
    "text": "process we create the original shell code we put these in we put these instructions in here that will do the dynamic lookup of those functions this",
    "start": "1738950",
    "end": "1747320"
  },
  {
    "text": "is a reverse shell so we've got like a socket connect fctl and then some kind of exact or spawn we're gonna go in to",
    "start": "1747320",
    "end": "1755720"
  },
  {
    "text": "the debugger we're gonna find out where those offsets are we're gonna change the instructions instead of loading from",
    "start": "1755720",
    "end": "1762380"
  },
  {
    "text": "those offsets to just load the address so we can jump to them and then we're gonna zap it and if you learn nothing else today you'll learn that the coolest",
    "start": "1762380",
    "end": "1769100"
  },
  {
    "text": "tournament mainframe is zapping basically because it's really it really",
    "start": "1769100",
    "end": "1774140"
  },
  {
    "text": "is the only cool term on the mainframe but that basically just means that you're patching a binary right so",
    "start": "1774140",
    "end": "1780320"
  },
  {
    "text": "patching a binary they refer to as this app or changing changing data in memory they referred to as a zap which is like",
    "start": "1780320",
    "end": "1786680"
  },
  {
    "text": "super cool so we can find that code that does the lookups on the system this is",
    "start": "1786680",
    "end": "1791960"
  },
  {
    "text": "the actual code then that does the lookups on the system and we basically just gonna dump that copy",
    "start": "1791960",
    "end": "1797630"
  },
  {
    "text": "those bytes and create shelf code out of that now what we've got is position",
    "start": "1797630",
    "end": "1802789"
  },
  {
    "text": "independent shell code so this code now can be jumped to rather than launched as a binary so here's a here's some",
    "start": "1802789",
    "end": "1811370"
  },
  {
    "text": "examples I'm gonna show some demonstrations I recorded them because when I get up here my brain can't tell",
    "start": "1811370",
    "end": "1816470"
  },
  {
    "text": "my fingers what to do and it's really painful so on the left hand side you're",
    "start": "1816470",
    "end": "1821510"
  },
  {
    "text": "just gonna see that shell code that we just looked at on the mainframe I'm gonna run that job on the right hand side probably looks familiar to a lot of",
    "start": "1821510",
    "end": "1827690"
  },
  {
    "text": "you that's just MSF console running a listener I don't get a reverse shell on",
    "start": "1827690",
    "end": "1833059"
  },
  {
    "text": "here just to basically show you what that looks like the shell is a Linux excuse me is the UNIX shell so we're",
    "start": "1833059",
    "end": "1839120"
  },
  {
    "text": "operating on the UNIX side of the mainframe but it absolutely is the mainframe and you're all the permissions",
    "start": "1839120",
    "end": "1844640"
  },
  {
    "text": "of whoever it was that that actually executed that shell so back to this",
    "start": "1844640",
    "end": "1850909"
  },
  {
    "text": "vendor SVC for whatever reason in the annals of mainframe history this has",
    "start": "1850909",
    "end": "1856190"
  },
  {
    "text": "been referred to as the magic SVC or a magic sec being something that gives you",
    "start": "1856190",
    "end": "1861700"
  },
  {
    "text": "that backdoor gives you that immediate like escalation to route or supervisor",
    "start": "1861700",
    "end": "1868070"
  },
  {
    "text": "state or whatever so we refer to it as magic because when you do it you get to do all the magic what we're looking for",
    "start": "1868070",
    "end": "1875990"
  },
  {
    "text": "in terms of a vulnerable SVC is a few things there's there's only a few ways to do this transition from problem state",
    "start": "1875990",
    "end": "1882950"
  },
  {
    "text": "to supervisor state but one of the things that has to happen is there's a bit there's always just one bit there's",
    "start": "1882950",
    "end": "1888830"
  },
  {
    "text": "a bit that has to be flipped in your address space for the operating system to say ok you can do that so there's a",
    "start": "1888830",
    "end": "1894529"
  },
  {
    "text": "permission that if you will that says yeah this person this process this address space can issue the command to",
    "start": "1894529",
    "end": "1900919"
  },
  {
    "text": "move from problem state the supervisor state so it doesn't actually move you there it just gives you permission to execute the command so you could think",
    "start": "1900919",
    "end": "1908149"
  },
  {
    "text": "about it's like the ability to run sudo versus like actually running studio right so if we load up is our DD N and",
    "start": "1908149",
    "end": "1917600"
  },
  {
    "text": "we pump we look into our memory where we've got this vulnerable SVC loaded what we can see first of all is there",
    "start": "1917600",
    "end": "1925220"
  },
  {
    "text": "are some text over on the side here and obviously that text has changed from the original but",
    "start": "1925220",
    "end": "1932119"
  },
  {
    "text": "it wasn't much different than that to be honest with you and then there's another hard-coded word down below which is of",
    "start": "1932119",
    "end": "1939589"
  },
  {
    "text": "course the password yes so the password required to execute this is just",
    "start": "1939589",
    "end": "1944599"
  },
  {
    "text": "hard-coded in the SVC itself sort non-encrypted not encoded in memory and",
    "start": "1944599",
    "end": "1950690"
  },
  {
    "text": "it just does a string compare if you type it in and it they're equal I mean this is three lines of assembler code",
    "start": "1950690",
    "end": "1956869"
  },
  {
    "text": "that anybody in here could read after about five minutes of instruction but",
    "start": "1956869",
    "end": "1962649"
  },
  {
    "text": "what I'm looking for is to see if if if they're doing something nefarious with this or if this is something else so the",
    "start": "1962649",
    "end": "1969559"
  },
  {
    "text": "first thing I'm looking for is I'm looking for an instruction something like this so this is an or instruction it's an or immediate so for you guys out",
    "start": "1969559",
    "end": "1976729"
  },
  {
    "text": "there that are bit Twitter's if you're doing an or two a byte in memory what you're probably doing is changing bits",
    "start": "1976729",
    "end": "1983179"
  },
  {
    "text": "from zero to one so if you or a byte in memory with some kind of mask wherever the mask bytes are one then the",
    "start": "1983179",
    "end": "1990409"
  },
  {
    "text": "resulting in memory will also be a one so this is flipping a bit in memory and that particular instruction sequence",
    "start": "1990409",
    "end": "1997159"
  },
  {
    "text": "nine six zero one eight zero echo Charlie's kind of hard to read that is a",
    "start": "1997159",
    "end": "2003459"
  },
  {
    "text": "sequence that I can look for and know that that is probably not necessarily",
    "start": "2003459",
    "end": "2008709"
  },
  {
    "text": "but probably flipping this bit and there are legit reasons to flip this bit but it's definitely something I would look",
    "start": "2008709",
    "end": "2014200"
  },
  {
    "text": "into further I'll also mention in case it went by too fast that when I went to",
    "start": "2014200",
    "end": "2019419"
  },
  {
    "text": "disassemble this in memory this warning popped up preventing me from disassembling it if I don't have",
    "start": "2019419",
    "end": "2025629"
  },
  {
    "text": "permission because if you type know then it won't do it but if you type yes it will so I dumped that SVC out of memory",
    "start": "2025629",
    "end": "2035379"
  },
  {
    "text": "disassembled it put it into a source library and then I clean it up I'm gonna",
    "start": "2035379",
    "end": "2042309"
  },
  {
    "text": "rewrite it basically so that I can really figure out what this thing does I've reversed engine I reversed it I've",
    "start": "2042309",
    "end": "2048579"
  },
  {
    "text": "disassembled it and but now I really want to understand what it does to know if it's malicious or not or something",
    "start": "2048579",
    "end": "2053589"
  },
  {
    "text": "that I can exploit I'm gonna and the way I'm gonna do that is I'm going to copy it in and I'm gonna use all the macros",
    "start": "2053589",
    "end": "2059470"
  },
  {
    "text": "that the system is designed to do and then I'm gonna go look at it and see this looked like what was in the memory",
    "start": "2059470",
    "end": "2064570"
  },
  {
    "text": "what was in memory to begin with so something like this so this is the source code after I've rewritten it of",
    "start": "2064570",
    "end": "2071770"
  },
  {
    "text": "this SVC and you'll see when we scroll down here a little bit that it's actually using the names that the system",
    "start": "2071770",
    "end": "2077800"
  },
  {
    "text": "resolves for these things so for instance there on that war statement you'll see it doesn't have register",
    "start": "2077800",
    "end": "2083350"
  },
  {
    "text": "names and addresses anymore it has something called JSC B ops and JSC D off",
    "start": "2083350",
    "end": "2088750"
  },
  {
    "text": "so JSC D stands for job step control block JSC the ops is a byte in that",
    "start": "2088750",
    "end": "2094030"
  },
  {
    "text": "control box this is all well documented as part of the operating system you can look all this up JSC B off is the one",
    "start": "2094030",
    "end": "2100780"
  },
  {
    "text": "bit inside that byte that if it's turned on that is my permission that I need to be able to execute a privileged",
    "start": "2100780",
    "end": "2107560"
  },
  {
    "text": "escalation or change the processor state if you will now when this was found I",
    "start": "2107560",
    "end": "2113980"
  },
  {
    "text": "wasn't working there at the time this has been a while ago but when this was found we reported it to the company who",
    "start": "2113980",
    "end": "2119110"
  },
  {
    "text": "is no longer in business but has sold their IP to someone else and they are still in business but when we reported",
    "start": "2119110",
    "end": "2125260"
  },
  {
    "text": "it to them at the time and we explained this and said look what you've left behind here is basically like a functional back door and it's not even a",
    "start": "2125260",
    "end": "2131830"
  },
  {
    "text": "good back door right it's got the password hard-coded in memory and what it does which we'll talk about in a",
    "start": "2131830",
    "end": "2137560"
  },
  {
    "text": "minute is kind of horrific like you know anybody with with a few years of experience or 10 minutes and is half way",
    "start": "2137560",
    "end": "2143830"
  },
  {
    "text": "smart would be able to figure this out and they said yep yeah",
    "start": "2143830",
    "end": "2151090"
  },
  {
    "text": "that's how we built it it's doing what it meant to be but what it meant to do this is kind of a cultural problem",
    "start": "2151090",
    "end": "2158080"
  },
  {
    "text": "because there isn't them the reason I have the job that I do is because there",
    "start": "2158080",
    "end": "2163390"
  },
  {
    "text": "isn't the hacker ethos the pentesting mindset doesn't exist in a lot of these",
    "start": "2163390",
    "end": "2168580"
  },
  {
    "text": "places so there's nobody holding these people in check there's nobody telling them which you think you wouldn't have",
    "start": "2168580",
    "end": "2173950"
  },
  {
    "text": "to but there's this whole security by obscurity feeling where nobody's telling",
    "start": "2173950",
    "end": "2180160"
  },
  {
    "text": "them hey you shouldn't leave a gaping hole of a backdoor on production systems at customer sites that's irresponsible",
    "start": "2180160",
    "end": "2188040"
  },
  {
    "text": "so that's why I have a job there's an easier way to go about this there's a",
    "start": "2188460",
    "end": "2193660"
  },
  {
    "text": "friend of mine named IU who was going to present here last year but",
    "start": "2193660",
    "end": "2198930"
  },
  {
    "text": "he couldn't make it over couldn't get into the country but presented it black at Europe but he basically has a tool",
    "start": "2198930",
    "end": "2206280"
  },
  {
    "text": "that will just go through and search all the SV C's in memory search all the strings of bytes and look for",
    "start": "2206280",
    "end": "2213200"
  },
  {
    "text": "particularly suspicious codes of bytes it's just a regular expression and if it",
    "start": "2213200",
    "end": "2220170"
  },
  {
    "text": "finds it then it will kick it out and say hey you should maybe have a look at this this is kind of suspicious and then you can go through the whole process of",
    "start": "2220170",
    "end": "2226650"
  },
  {
    "text": "disassembling it or whatever but it's a quick and dirty way I use it all the time on customer systems to see if they",
    "start": "2226650",
    "end": "2232470"
  },
  {
    "text": "have anything that looks suspicious and it does it does a pretty good job so",
    "start": "2232470",
    "end": "2237680"
  },
  {
    "text": "back to this back to this vendor SVC this magic SVC it turns out this thing",
    "start": "2237680",
    "end": "2245190"
  },
  {
    "text": "has a couple of different uses it does a couple different things and it is magic when I tell you about this you'll be I'm",
    "start": "2245190",
    "end": "2252960"
  },
  {
    "text": "pretty sure you'll agree with me that it's magic you call this SVC and in",
    "start": "2252960",
    "end": "2258090"
  },
  {
    "text": "addition to the super secret password the one that's hard coded and stored unencrypted in memory you pass it",
    "start": "2258090",
    "end": "2263490"
  },
  {
    "text": "another argument the second argument can be one of three values if you pass it a four it flips this jstv bit on and",
    "start": "2263490",
    "end": "2270470"
  },
  {
    "text": "basically your address space can now execute the command to move yourself",
    "start": "2270470",
    "end": "2276630"
  },
  {
    "text": "from problem state and supervisor state PHP zero if you pass it an eight it",
    "start": "2276630",
    "end": "2281790"
  },
  {
    "text": "flips that bit off so you don't want it if you don't want to leave it on you can flip it off if you pass it a zero if you",
    "start": "2281790",
    "end": "2289590"
  },
  {
    "text": "pass it a zero you can set the program status where the PSW you'll remember that was like the instruction pointer and some flags to",
    "start": "2289590",
    "end": "2296100"
  },
  {
    "text": "anything you want so basically it's like a buffer overflow without all the problem right you just pass it an",
    "start": "2296100",
    "end": "2301980"
  },
  {
    "text": "address and it just jumps to that address in a fully authorized mode so this is awesome",
    "start": "2301980",
    "end": "2307410"
  },
  {
    "text": "right this is fantastic it's just a handful of lines of code this is what that looks like in a debugger so I put",
    "start": "2307410",
    "end": "2314550"
  },
  {
    "text": "this in the debugger what you're gonna see is it calls this SVC fvc 241 when it",
    "start": "2314550",
    "end": "2321660"
  },
  {
    "text": "comes back I issued the command to put me in a supervisor state just real quick to show you what that looks like from",
    "start": "2321660",
    "end": "2327620"
  },
  {
    "text": "from a debugger point of view when you're when you're actually going through this stuff so this is my debugger I'm gonna",
    "start": "2327620",
    "end": "2335070"
  },
  {
    "text": "launch a cassette a couple breakpoints one right before I issue the SVC 2:41",
    "start": "2335070",
    "end": "2340770"
  },
  {
    "text": "command this is I'm using it in the mode for so flip on my JSC be bit and the",
    "start": "2340770",
    "end": "2348000"
  },
  {
    "text": "second breakpoint I'm gonna stop it right when I issue the command to actually move myself from supervisor",
    "start": "2348000",
    "end": "2353640"
  },
  {
    "text": "state to profit from excuse me problems take supervisor state key eight key zero",
    "start": "2353640",
    "end": "2360380"
  },
  {
    "text": "so there we are stop right on that and now you can see that we're in supervisor",
    "start": "2362210",
    "end": "2369630"
  },
  {
    "text": "state so super easy only a couple lines of code to get that point okay then what",
    "start": "2369630",
    "end": "2376560"
  },
  {
    "text": "now it's important and this is a distinction that that you might miss if you're not following along entirely or",
    "start": "2376560",
    "end": "2384960"
  },
  {
    "text": "even if you are because it's a lot of stuff in a short period of time but this only is a CPU level",
    "start": "2384960",
    "end": "2391530"
  },
  {
    "text": "privilege that I've changed so I have changed the CPU to say hey this user this users address space can now execute",
    "start": "2391530",
    "end": "2398580"
  },
  {
    "text": "any of the CPUs instruction but we've still got an operating system in front of that and so my user is still contain",
    "start": "2398580",
    "end": "2404850"
  },
  {
    "text": "constrained by the security protections of the operating system itself just because I'm able to now read any memory",
    "start": "2404850",
    "end": "2411450"
  },
  {
    "text": "and execute any CPU level command doesn't mean I'm able to execute any z/os level command but since I can write",
    "start": "2411450",
    "end": "2418290"
  },
  {
    "text": "any place in memory I can now start flipping bits in my own address space to",
    "start": "2418290",
    "end": "2423420"
  },
  {
    "text": "trick the operating system into thinking that I am allowed to do that so we go back in here and the next thing",
    "start": "2423420",
    "end": "2429510"
  },
  {
    "text": "I do after I go to supervisor state is I start modifying bits in my memory this system runs rack F rack F is the",
    "start": "2429510",
    "end": "2436590"
  },
  {
    "text": "security security manager for for z/os on this system there's a couple of other",
    "start": "2436590",
    "end": "2442470"
  },
  {
    "text": "products but this one runs rack F and basically I'm flipping the bits in my memory in a in a data area called the AC",
    "start": "2442470",
    "end": "2450630"
  },
  {
    "text": "EE to tell the system if I try to run a privileged command or view a data set that I don't have access to it checks a",
    "start": "2450630",
    "end": "2457410"
  },
  {
    "text": "few things there's a list of things that checks to see decide if it's going to give you access to that command or",
    "start": "2457410",
    "end": "2462480"
  },
  {
    "text": "access to that data but the first thing on both of those lists is does this person system special",
    "start": "2462480",
    "end": "2467810"
  },
  {
    "text": "do they have operations and those are just bits those are just two bits in your memory for your address space if",
    "start": "2467810",
    "end": "2474350"
  },
  {
    "text": "you they're obviously read-only unless you have all right supervisor state so now",
    "start": "2474350",
    "end": "2479720"
  },
  {
    "text": "we've got supervisor state zero we can flip these bits and now I can run I can",
    "start": "2479720",
    "end": "2485330"
  },
  {
    "text": "turn the supervisor state off and I can use the operating system in all the commands in the operating system to give",
    "start": "2485330",
    "end": "2490400"
  },
  {
    "text": "myself all the privileges I need and go forth the jumpring bit is really pretty",
    "start": "2490400",
    "end": "2495950"
  },
  {
    "text": "cool because that was the one feature of this SVC feature the jumpring that is",
    "start": "2495950",
    "end": "2502670"
  },
  {
    "text": "pretty cool so wrote a write a program to call this SVC and I'm gonna pass it",
    "start": "2502670",
    "end": "2507710"
  },
  {
    "text": "an address of a of this reverse shell that we built and have it jump to it and",
    "start": "2507710",
    "end": "2514490"
  },
  {
    "text": "when I built it I just built this function that calls the reverse shell into the source code but it's an orphan",
    "start": "2514490",
    "end": "2521210"
  },
  {
    "text": "function there's no way in the source code to actually get to this function you can't it isn't called - it isn't",
    "start": "2521210",
    "end": "2526940"
  },
  {
    "text": "branch to anywhere just to prove that when I'm calling this SVC and passing in an address and we put the breakpoint",
    "start": "2526940",
    "end": "2532880"
  },
  {
    "text": "back on this function and it lands there that that's how it got there so what you",
    "start": "2532880",
    "end": "2540140"
  },
  {
    "text": "see here is this is the assembler source code I'm gonna do the branch to the I'm",
    "start": "2540140",
    "end": "2545750"
  },
  {
    "text": "gonna do a branch to call this magic SVC I'm gonna pass it the address of my",
    "start": "2545750",
    "end": "2551120"
  },
  {
    "text": "shellcode and if we look down here at the parameters that I'm gonna that I'm gonna pass when I call that SVC 2:41",
    "start": "2551120",
    "end": "2558820"
  },
  {
    "text": "down in the bottom you'll see I'm passing it my super-secret and I am",
    "start": "2558820",
    "end": "2564320"
  },
  {
    "text": "passing it right there and I'm passing it a number zero and I'm passing it the address of my shellcode so then there's",
    "start": "2564320",
    "end": "2572900"
  },
  {
    "text": "a function right there in the in the source code that is that shellcode",
    "start": "2572900",
    "end": "2577910"
  },
  {
    "text": "function and like I said there's no way there's no way to branch to this if we end up here it's because we did a",
    "start": "2577910",
    "end": "2583100"
  },
  {
    "text": "deliberate modification of the instruction pointer and we ended up here that shouldn't happen so this is what",
    "start": "2583100",
    "end": "2590450"
  },
  {
    "text": "that looks like in a debugger although we'll put it all together",
    "start": "2590450",
    "end": "2596320"
  },
  {
    "text": "so they set a breakpoint again before the SVC 2:41 call and I'm gonna set a",
    "start": "2596320",
    "end": "2602060"
  },
  {
    "text": "breakpoint at this shellcode orphan function I'm gonna run run it a couple",
    "start": "2602060",
    "end": "2607730"
  },
  {
    "text": "of times and what you'll see is after I run it the second time here that it basically lands at the shellcode",
    "start": "2607730",
    "end": "2615260"
  },
  {
    "text": "function right before it calls the reverse shell so here we are the instruction pointer is now set to the to",
    "start": "2615260",
    "end": "2624290"
  },
  {
    "text": "call the reverse shell and for those of you keeping track at home I am also",
    "start": "2624290",
    "end": "2631280"
  },
  {
    "text": "running it's kind of hard to read but the PSW down there basically indicates that I'm also running in the supervisor",
    "start": "2631280",
    "end": "2636740"
  },
  {
    "text": "state so not only am I going to get this to kick off a reverse shell for me but it's gonna be a fully authorized for burst shell so when you want to put this",
    "start": "2636740",
    "end": "2643880"
  },
  {
    "text": "all together obviously if I'm on a client side if I'm testing this out if I find this I'm not gonna do a bunch of you know the disassembler and the",
    "start": "2643880",
    "end": "2650960"
  },
  {
    "text": "stepping through this I'm gonna wrap this all up into one tight little package usually I have an ID at this point that's not privileged maybe can't",
    "start": "2650960",
    "end": "2657170"
  },
  {
    "text": "submit jobs and I want obviously more than that so what you'll see on the next",
    "start": "2657170",
    "end": "2663260"
  },
  {
    "text": "one is basically unprivileged user bad guy logs in tries the first thing you",
    "start": "2663260",
    "end": "2669020"
  },
  {
    "text": "usually try when you get creds in a box Who am I what do I have what can I do",
    "start": "2669020",
    "end": "2674090"
  },
  {
    "text": "he's nobody he can't really do anything calls this binary now this all happens",
    "start": "2674090",
    "end": "2679130"
  },
  {
    "text": "in memory so it is probably not going to set off any alarms I can tell you it's not gonna set off any alarms because",
    "start": "2679130",
    "end": "2685190"
  },
  {
    "text": "this is all happening in memory when you log out if you don't execute any operating system-level privileged",
    "start": "2685190",
    "end": "2690230"
  },
  {
    "text": "commands all these bits are just being flipped in your address base when you log out they're gone right so in order",
    "start": "2690230",
    "end": "2696860"
  },
  {
    "text": "to catch this they would have to be monitoring a whole lot of address spaces and a whole lot of changes basically real-time so that's what it looks like",
    "start": "2696860",
    "end": "2704180"
  },
  {
    "text": "so left hand side is my TSO session where i'm logging in as the bad guy",
    "start": "2704180",
    "end": "2710330"
  },
  {
    "text": "whose user ID is bad guy would think they'd be easy to catch that way and I'm",
    "start": "2710330",
    "end": "2716000"
  },
  {
    "text": "gonna I'm gonna do a check a couple things I'm gonna see if I have if I can look at the user the administrator user Chad can I change my ID right away not",
    "start": "2716000",
    "end": "2724310"
  },
  {
    "text": "authorized to do that I'm just gonna call this one program and as soon as I do thing you'll notice is the reverse shell",
    "start": "2724310",
    "end": "2730130"
  },
  {
    "text": "that pops up on the right hand side and then the second thing is I'm gonna start retyping these commands and now I can",
    "start": "2730130",
    "end": "2735710"
  },
  {
    "text": "list Chad now I can change my own user to something more something more with",
    "start": "2735710",
    "end": "2743870"
  },
  {
    "text": "more privilege and on the right hand side you'll see that I've got a shell and that that shell is also in fact",
    "start": "2743870",
    "end": "2750530"
  },
  {
    "text": "authorized so z/os shell and I can run commands on there",
    "start": "2750530",
    "end": "2755860"
  },
  {
    "text": "display my user and things like that that I would not have had the ability to do you can see that I've got system",
    "start": "2755860",
    "end": "2761420"
  },
  {
    "text": "special and all that good stuff so what what just happened so as a non",
    "start": "2761420",
    "end": "2767780"
  },
  {
    "text": "privileged user because of a very very irresponsible piece of vendor code that",
    "start": "2767780",
    "end": "2774200"
  },
  {
    "text": "was left behind or could have been user code but in this case it was vendor code as a is a non privileged user I",
    "start": "2774200",
    "end": "2780140"
  },
  {
    "text": "basically just wrote a fairly simpler assembler program that anybody with you",
    "start": "2780140",
    "end": "2786620"
  },
  {
    "text": "know half an ability to write some assembly code could absolutely put that together in short order called it and",
    "start": "2786620",
    "end": "2792230"
  },
  {
    "text": "then I ended up with a privileged TSO session as well as a privileged shell so I can analyze both sides of the",
    "start": "2792230",
    "end": "2798620"
  },
  {
    "text": "operating system actual trade data go look for whatever I'm looking for but basically it's full-on game over at that",
    "start": "2798620",
    "end": "2805280"
  },
  {
    "text": "point all right",
    "start": "2805280",
    "end": "2810380"
  },
  {
    "text": "so there's a lot of stuff for no there's a lot of stuff for you there's a lot of",
    "start": "2810380",
    "end": "2816020"
  },
  {
    "text": "stuff for me this is this is what I would have you take away from all of this if you're not somebody who's gonna",
    "start": "2816020",
    "end": "2821360"
  },
  {
    "text": "go dive into the technical end of this if you're somebody who works in an enterprise that has one of these systems if you're in the media if you're",
    "start": "2821360",
    "end": "2828290"
  },
  {
    "text": "interested in this if you like having money and airplanes that work this is what I would have have you take away",
    "start": "2828290",
    "end": "2834310"
  },
  {
    "text": "first of all it's just another computer it's a big computer it's an expensive computer super powerful computer but",
    "start": "2834310",
    "end": "2840350"
  },
  {
    "text": "it's just a computer and I say that not to minimize it but I say that to get people to think about it in a way like",
    "start": "2840350",
    "end": "2845990"
  },
  {
    "text": "you would think about the you know your thermostat your IOT device your PC at home your new robot dog that you bought",
    "start": "2845990",
    "end": "2853430"
  },
  {
    "text": "all of those things we know our computers and all those things we know are written by humans and have have",
    "start": "2853430",
    "end": "2859880"
  },
  {
    "text": "vulnerabilities in them or operated by humans and misconfigurations you need to think about this the same way second thing is",
    "start": "2859880",
    "end": "2868180"
  },
  {
    "text": "it's systemically important I'm gonna go over that again but it's really freaking important to kind of the world operating",
    "start": "2868180",
    "end": "2875510"
  },
  {
    "text": "as we know it there's no excuse for this thing to not be a fortress if you forget",
    "start": "2875510",
    "end": "2882650"
  },
  {
    "text": "everything I said understand that this thing can be locked down so well that I",
    "start": "2882650",
    "end": "2887690"
  },
  {
    "text": "would have no problem dropping one in Def Con or on the internet and letting",
    "start": "2887690",
    "end": "2892850"
  },
  {
    "text": "people have access to it and use it the way it was meant to be used there are intrusion detection systems there's full-blown inch ingress egress",
    "start": "2892850",
    "end": "2900410"
  },
  {
    "text": "firewalls there's something called defense manager which can take active acts active action against things that",
    "start": "2900410",
    "end": "2907670"
  },
  {
    "text": "things that are attacking it there's a million in one different ways to secure this thing and lock it down but I'm here",
    "start": "2907670",
    "end": "2913790"
  },
  {
    "text": "to tell you that most of the mainframes I run across if not all of them are not and that has nothing to do with the",
    "start": "2913790",
    "end": "2920150"
  },
  {
    "text": "platform's ability to be secured it has to do with neglect it has to do with a false sense of security it has to do",
    "start": "2920150",
    "end": "2925910"
  },
  {
    "text": "with people thinking like do we still have mainframes around isn't that in that COBOL you need to enforce your",
    "start": "2925910",
    "end": "2933290"
  },
  {
    "text": "existing policy in this platform you've got policies say we're gonna Penn test we're gonna audit we're gonna do",
    "start": "2933290",
    "end": "2938810"
  },
  {
    "text": "vulnerability management we're going to do patch management we're gonna do we're gonna have these controls all this stuff set up on this platform you need to do",
    "start": "2938810",
    "end": "2944570"
  },
  {
    "text": "that for this for this platform as well get a pen test exploits work here some",
    "start": "2944570",
    "end": "2950420"
  },
  {
    "text": "variation but they're they're gonna work here and we can't keep our vendors honest if we don't have people out doing this kind of research and lastly it's",
    "start": "2950420",
    "end": "2957140"
  },
  {
    "text": "not COBOL so that's it thank you very much I think I am right at the end of my time",
    "start": "2957140",
    "end": "2964240"
  }
]