[
  {
    "text": "[Music] foreign",
    "start": "1730",
    "end": "6720"
  },
  {
    "text": "a.m in Taiwan and sorry I can't be physically on the stage because of the",
    "start": "12080",
    "end": "18539"
  },
  {
    "text": "Visa I hope one day we can meet face to face in Vegas",
    "start": "18539",
    "end": "24300"
  },
  {
    "text": "about 10 years ago I failed my algorithm course at University",
    "start": "24300",
    "end": "30599"
  },
  {
    "text": "but I'm now here to talk about the hash table this is a big achievement for me",
    "start": "30599",
    "end": "37440"
  },
  {
    "text": "and orangey and today my topic is less dense in the cache this stabilizing hash",
    "start": "37440",
    "end": "43379"
  },
  {
    "text": "table on Microsoft IIs before the talk I would like to give you",
    "start": "43379",
    "end": "49920"
  },
  {
    "text": "a short test if there is a super secret area which is",
    "start": "49920",
    "end": "55739"
  },
  {
    "text": "protected by a super secure password you cannot login only if you know this",
    "start": "55739",
    "end": "62699"
  },
  {
    "text": "long password [Music] however under the design of IIs",
    "start": "62699",
    "end": "69560"
  },
  {
    "text": "all of these passwords are valid and can look into the system",
    "start": "69780",
    "end": "77460"
  },
  {
    "text": "the next thing right I guess you might have several questions in your life",
    "start": "77460",
    "end": "83939"
  },
  {
    "text": "this is one of the attacks I will present today and you will learn the details later",
    "start": "83939",
    "end": "91520"
  },
  {
    "text": "hi and orange another principal security researcher at that column I I an Azure",
    "start": "92280",
    "end": "99060"
  },
  {
    "text": "the researcher and focusing on web and application security my job is to discover the most severe",
    "start": "99060",
    "end": "106439"
  },
  {
    "text": "bugs and the attack service that can impact the world ahead of the bad guys",
    "start": "106439",
    "end": "112259"
  },
  {
    "text": "my research has also received several Awards such as the best server side part",
    "start": "112259",
    "end": "118920"
  },
  {
    "text": "of tangney award and the champ and the champion of the punctivo if you are interested welcome to follow",
    "start": "118920",
    "end": "126180"
  },
  {
    "text": "my Twitter or chat with me later this is the outline today first we will",
    "start": "126180",
    "end": "133920"
  },
  {
    "text": "introduce several essential Concepts those concepts are important to let you",
    "start": "133920",
    "end": "139860"
  },
  {
    "text": "into Microsoft IIs internals in our topic today",
    "start": "139860",
    "end": "145379"
  },
  {
    "text": "after having a good understanding of IIs internals we will elaborate on our",
    "start": "145379",
    "end": "151560"
  },
  {
    "text": "research followed by three different types of vulnerabilities",
    "start": "151560",
    "end": "157319"
  },
  {
    "text": "also we will demonstrate how we apply this attacks to Microsoft Exchange",
    "start": "157319",
    "end": "162780"
  },
  {
    "text": "Server as a showcase of course we will provide mitigations",
    "start": "162780",
    "end": "168500"
  },
  {
    "text": "recommendations and Future Works to those components",
    "start": "168500",
    "end": "174060"
  },
  {
    "text": "so first what is Hash table hashtago is the most fundamental data",
    "start": "174060",
    "end": "180360"
  },
  {
    "text": "structure in computer science and its purpose is to store data",
    "start": "180360",
    "end": "186900"
  },
  {
    "text": "no matter how the data is Hash table can hold the data in memory very well",
    "start": "186900",
    "end": "193200"
  },
  {
    "text": "hash table is especially good at handling the key value pair and can",
    "start": "193200",
    "end": "198360"
  },
  {
    "text": "operate data with a high performance due to those benefits hash table is used",
    "start": "198360",
    "end": "205760"
  },
  {
    "text": "extensively in computer infrastructures such as operating system programming",
    "start": "205760",
    "end": "212099"
  },
  {
    "text": "language database or web server here's an example of the hash table",
    "start": "212099",
    "end": "218760"
  },
  {
    "text": "usage in programming language programming language uses the hash table widely however you don't know because",
    "start": "218760",
    "end": "226680"
  },
  {
    "text": "they wrapped hash table into a more high level structure such as the array",
    "start": "226680",
    "end": "232760"
  },
  {
    "text": "dictionary or object so if you are a developer you must have",
    "start": "232760",
    "end": "239040"
  },
  {
    "text": "used hash table as the internal I assume that everyone",
    "start": "239040",
    "end": "244200"
  },
  {
    "text": "here is a good student at University so I I skipped the hash table internal",
    "start": "244200",
    "end": "250860"
  },
  {
    "text": "this time as for what is the hash voting attack",
    "start": "250860",
    "end": "256680"
  },
  {
    "text": "also we are not going to talk about this attack only we still give it a slot",
    "start": "256680",
    "end": "262560"
  },
  {
    "text": "because I believe that that hash voting attack is the best test to learn the",
    "start": "262560",
    "end": "268500"
  },
  {
    "text": "mindset of how an attacker abuse a hash table",
    "start": "268500",
    "end": "273720"
  },
  {
    "text": "the idea of hash floating attack is to drop all the records into the same",
    "start": "273720",
    "end": "279300"
  },
  {
    "text": "bucket since the hash algorithm is public an attacker can predict its hash and make",
    "start": "279300",
    "end": "287220"
  },
  {
    "text": "all records fall into the same bucket and at the time the attacker degenerate",
    "start": "287220",
    "end": "293419"
  },
  {
    "text": "degenerates the hash table which can store numbers later into a single linked",
    "start": "293419",
    "end": "298800"
  },
  {
    "text": "list for example the attacker has crafted",
    "start": "298800",
    "end": "304080"
  },
  {
    "text": "several malicious records on the left side the hash function in the in the middle",
    "start": "304080",
    "end": "309660"
  },
  {
    "text": "will process and convert the radical into an index",
    "start": "309660",
    "end": "314840"
  },
  {
    "text": "the first record is convert to the index 4 and put into the corresponding bucket",
    "start": "314840",
    "end": "321660"
  },
  {
    "text": "the second is also put into the same bucket the Third",
    "start": "321660",
    "end": "328759"
  },
  {
    "text": "the fifth and the attacker can jump all records",
    "start": "329400",
    "end": "334560"
  },
  {
    "text": "into the same bucket and the table now becomes a single linked list",
    "start": "334560",
    "end": "340380"
  },
  {
    "text": "so the hash floating attack connect the table always sit under broadcast that",
    "start": "340380",
    "end": "347160"
  },
  {
    "text": "thing that means for inserting and Records the time complexity comes to N squared we should",
    "start": "347160",
    "end": "355080"
  },
  {
    "text": "all agree that N squared is is in a terrible performance",
    "start": "355080",
    "end": "361199"
  },
  {
    "text": "okay with a good understanding of the hash table let's discuss the relationship between the hash table and",
    "start": "361199",
    "end": "368699"
  },
  {
    "text": "IIs first IIs lab hash table",
    "start": "368699",
    "end": "375240"
  },
  {
    "text": "it's a well-known and only web server in Windows IIs uses the hash table",
    "start": "375240",
    "end": "381259"
  },
  {
    "text": "extensively architecture to store information such as the HTTP headers",
    "start": "381259",
    "end": "387840"
  },
  {
    "text": "server variables configurations and cache",
    "start": "387840",
    "end": "394220"
  },
  {
    "text": "due to the nested use of this data structure Microsoft has designed its own",
    "start": "394319",
    "end": "400020"
  },
  {
    "text": "hash table implementation from a very early stage the following two are all the",
    "start": "400020",
    "end": "406919"
  },
  {
    "text": "implementations that will be used in IIs one is code 3 hash table and the other",
    "start": "406919",
    "end": "413819"
  },
  {
    "text": "is called LKR hash table the three hash tables should be the most",
    "start": "413819",
    "end": "421139"
  },
  {
    "text": "common like the sample code in your textbooks it uses the linked list to",
    "start": "421139",
    "end": "427080"
  },
  {
    "text": "resolve the correlation and rehash the table when it's in an unhealthy state",
    "start": "427080",
    "end": "432900"
  },
  {
    "text": "the rehash is a series of the rebuilding process it first enlarges the table",
    "start": "432900",
    "end": "439039"
  },
  {
    "text": "recalculates our records and reposition then to their new index",
    "start": "439039",
    "end": "445080"
  },
  {
    "text": "as for hot hash us for hot hash function is used we will have a further",
    "start": "445080",
    "end": "451139"
  },
  {
    "text": "discussion later the other table is the LKR hash and",
    "start": "451139",
    "end": "458400"
  },
  {
    "text": "implementation that adds us to build a scalable and high concurrent hash table",
    "start": "458400",
    "end": "464460"
  },
  {
    "text": "under the multi trading and multicore environment the net LKR is an acronym for the name",
    "start": "464460",
    "end": "472680"
  },
  {
    "text": "of the creators this implementation was also patterned by Microsoft in 1999.",
    "start": "472680",
    "end": "480660"
  },
  {
    "text": "the LKR hash is a successor of linear hashing which uses another better",
    "start": "480660",
    "end": "487580"
  },
  {
    "text": "algorithm to resolve the expensive rehash to enhance the performance",
    "start": "487580",
    "end": "493680"
  },
  {
    "text": "the creators put a lot of effort to make this implementation portable flexible",
    "start": "493680",
    "end": "499919"
  },
  {
    "text": "and usable the application the application can Define its own terrible related",
    "start": "499919",
    "end": "506639"
  },
  {
    "text": "functions to adapt to multiple products across Microsoft",
    "start": "506639",
    "end": "513240"
  },
  {
    "text": "it's interesting to note that part of the creators are also the IIs Developers",
    "start": "513240",
    "end": "519839"
  },
  {
    "text": "which which should be the reason why we find lots of these implementation in IIs",
    "start": "519839",
    "end": "528080"
  },
  {
    "text": "now we have a complete understanding of the hash table it's time to go deep into",
    "start": "528899",
    "end": "535140"
  },
  {
    "text": "our research in this section we will show the IIs in",
    "start": "535140",
    "end": "540720"
  },
  {
    "text": "channels and Define the scope we really cared about we will first explain our mindset and",
    "start": "540720",
    "end": "548820"
  },
  {
    "text": "idea to uncover box we are mainly focusing on the hash table",
    "start": "548820",
    "end": "554060"
  },
  {
    "text": "implementation and its usage since most of the hash table used in IIs",
    "start": "554060",
    "end": "561060"
  },
  {
    "text": "are cash related we also study and look into mechanism",
    "start": "561060",
    "end": "568680"
  },
  {
    "text": "because Microsoft has designed its own hash table without open source the",
    "start": "569959",
    "end": "575760"
  },
  {
    "text": "implementation should be an explored area to discover box",
    "start": "575760",
    "end": "581399"
  },
  {
    "text": "so in this context we hide we hunt not only for memory Corruptions but also",
    "start": "581399",
    "end": "588480"
  },
  {
    "text": "Logic box here I would like to highlight the Box CV 2006",
    "start": "588480",
    "end": "595700"
  },
  {
    "text": "3017 it's a logic back in the unsafe function of PHP",
    "start": "595700",
    "end": "601800"
  },
  {
    "text": "the hash table implementation didn't distinguish the key type of an array so",
    "start": "601800",
    "end": "609060"
  },
  {
    "text": "that so that an attacker can delete archery elements with an index number",
    "start": "609060",
    "end": "615959"
  },
  {
    "text": "when I saw this part it amazed me and I believe this is just the bug I'm looking",
    "start": "615959",
    "end": "621899"
  },
  {
    "text": "for of course we also look for the algorithm complexity problems such as the hash",
    "start": "621899",
    "end": "629640"
  },
  {
    "text": "floating attack however since it's already a 20 years",
    "start": "629640",
    "end": "634980"
  },
  {
    "text": "old attack most of the low hanging fruits should be disappeared",
    "start": "634980",
    "end": "640860"
  },
  {
    "text": "so in this context we put more effort into the implementation",
    "start": "640860",
    "end": "647839"
  },
  {
    "text": "as for the usage we mentioned that the Nokia hash is designed to be a portable",
    "start": "648540",
    "end": "654560"
  },
  {
    "text": "flexible and easy to use algorithm that can be applied to any situation",
    "start": "654560",
    "end": "662220"
  },
  {
    "text": "the convention requires the application to configure its own table related",
    "start": "662220",
    "end": "667560"
  },
  {
    "text": "functions during initialization this kind of extensibility gives us more",
    "start": "667560",
    "end": "674339"
  },
  {
    "text": "opportunities to uncover box when I saw this I was curious that is",
    "start": "674339",
    "end": "681959"
  },
  {
    "text": "the particular function good is the key calculation good or how does",
    "start": "681959",
    "end": "687899"
  },
  {
    "text": "the function select the correct record when the Collision when a collision",
    "start": "687899",
    "end": "693480"
  },
  {
    "text": "happens happens this type of questions all interested me",
    "start": "693480",
    "end": "700680"
  },
  {
    "text": "so in this context we care more about the relationship between the record the",
    "start": "700680",
    "end": "707220"
  },
  {
    "text": "keys and the function foreign",
    "start": "707220",
    "end": "712399"
  },
  {
    "text": "HTTP request is coming the kernel http.c will first will first handle the",
    "start": "712399",
    "end": "720180"
  },
  {
    "text": "connection and dispatch the request",
    "start": "720180",
    "end": "724700"
  },
  {
    "text": "the Kernel check the kernel checks is based and active IIs worker",
    "start": "725640",
    "end": "731519"
  },
  {
    "text": "if not it knocks the IRS service to spawn a new process",
    "start": "731519",
    "end": "738019"
  },
  {
    "text": "the was Windows activation Service First reads the configuration to note several",
    "start": "738360",
    "end": "745380"
  },
  {
    "text": "specifications for the process initialization",
    "start": "745380",
    "end": "750720"
  },
  {
    "text": "and sprung the worker process several IRS components are loaded here",
    "start": "751019",
    "end": "759079"
  },
  {
    "text": "the worker then lost the major which are defined in the configuration",
    "start": "759720",
    "end": "766519"
  },
  {
    "text": "IRS by default load several modules for different purples such as the compaction",
    "start": "767519",
    "end": "775940"
  },
  {
    "text": "redirection authentication and the cash",
    "start": "775940",
    "end": "781760"
  },
  {
    "text": "among all measures the following four are the global cash provider to manage",
    "start": "782540",
    "end": "789300"
  },
  {
    "text": "the cash between modules each measure is responsible for handling a different",
    "start": "789300",
    "end": "794519"
  },
  {
    "text": "catch such as the cash flow static file the cash flow configuration or the cash",
    "start": "794519",
    "end": "801839"
  },
  {
    "text": "for Windows token",
    "start": "801839",
    "end": "805220"
  },
  {
    "text": "once the modules are loaded the worker enters the request life cycle",
    "start": "807000",
    "end": "812760"
  },
  {
    "text": "the life cycle is an event Loop that process all the notifications from the",
    "start": "812760",
    "end": "818639"
  },
  {
    "text": "request there are several events in a life cycle",
    "start": "818639",
    "end": "824519"
  },
  {
    "text": "a manager can subscribe to its interesting events to complete its logic",
    "start": "824519",
    "end": "832760"
  },
  {
    "text": "there are also Global events that a budget can subscribe to",
    "start": "833820",
    "end": "838980"
  },
  {
    "text": "for example the cash provider subscribes to the event cash clean up and catch",
    "start": "838980",
    "end": "846060"
  },
  {
    "text": "operation to manage the cash between modules",
    "start": "846060",
    "end": "851540"
  },
  {
    "text": "so our research is not only focusing on the cash between the request life cycle",
    "start": "852620",
    "end": "861000"
  },
  {
    "text": "but also the global cash providers especially those for our golden targets",
    "start": "861000",
    "end": "869899"
  },
  {
    "text": "the following section is about our research and the Box in this section we will first elaborate",
    "start": "871560",
    "end": "878700"
  },
  {
    "text": "on our idea and the last direction we are trying to find bugs we will attach",
    "start": "878700",
    "end": "885180"
  },
  {
    "text": "three different types of vulnerabilities to prove our idea works",
    "start": "885180",
    "end": "890339"
  },
  {
    "text": "all about our box include a hash floating dos attach poisoning and",
    "start": "890339",
    "end": "897440"
  },
  {
    "text": "authentication bypass we will also talk about the exploitation",
    "start": "897440",
    "end": "902459"
  },
  {
    "text": "of how we maximize the civility to make this bug impactful",
    "start": "902459",
    "end": "908880"
  },
  {
    "text": "of course a real world authentication bypass a Microsoft Exchange Server will",
    "start": "908880",
    "end": "914040"
  },
  {
    "text": "be detailed and demonstrated",
    "start": "914040",
    "end": "918139"
  },
  {
    "text": "okay the First cast we would like to share is the hash building POS",
    "start": "919260",
    "end": "925699"
  },
  {
    "text": "first we would like to give you a spoiler that all hash table implemented",
    "start": "926779",
    "end": "932639"
  },
  {
    "text": "implemented by Microsoft are affected by hash floating attack",
    "start": "932639",
    "end": "939019"
  },
  {
    "text": "the trade hash table is vulnerable by default and LKR hash is vulnerable only",
    "start": "939420",
    "end": "946139"
  },
  {
    "text": "if a pro hash function is configured",
    "start": "946139",
    "end": "950839"
  },
  {
    "text": "however vulnerable is not equal to exploitable",
    "start": "951440",
    "end": "957240"
  },
  {
    "text": "besides finding the entrance point we still have several obstacles to overcome",
    "start": "957240",
    "end": "965300"
  },
  {
    "text": "we find that URI cache modules seems to be a good Target",
    "start": "965940",
    "end": "971040"
  },
  {
    "text": "the purpose of this module is to Cache configuration for urls",
    "start": "971040",
    "end": "977220"
  },
  {
    "text": "grid configuration is costly so cash is the best strategy strategy",
    "start": "977220",
    "end": "985339"
  },
  {
    "text": "in this module in this module every https triggers the cache operation and",
    "start": "985339",
    "end": "992760"
  },
  {
    "text": "the most important things is that the module uses three hash table as is cache",
    "start": "992760",
    "end": "998940"
  },
  {
    "text": "storage well and as a sport by default three",
    "start": "998940",
    "end": "1004940"
  },
  {
    "text": "hash table sounds good to us and this is the tide chart of every",
    "start": "1004940",
    "end": "1012680"
  },
  {
    "text": "thousand new records in three hash table because it's not open source we must",
    "start": "1012680",
    "end": "1018800"
  },
  {
    "text": "reverse the structure and code the table dynamically to get the data set",
    "start": "1018800",
    "end": "1024678"
  },
  {
    "text": "the light in blue is the type of inserting random records and the light",
    "start": "1024679",
    "end": "1030260"
  },
  {
    "text": "in Orange is the records with collisions you should be able to figure out there's",
    "start": "1030260",
    "end": "1036740"
  },
  {
    "text": "a huge difference between the two lines",
    "start": "1036740",
    "end": "1041380"
  },
  {
    "text": "however the Jitters around 35 000 and 75 000 are weird what's the",
    "start": "1041900",
    "end": "1050299"
  },
  {
    "text": "Twitter so theoretically the lines growth in",
    "start": "1050299",
    "end": "1055400"
  },
  {
    "text": "Orange should be in linear time so what actually makes the time increase",
    "start": "1055400",
    "end": "1062600"
  },
  {
    "text": "on smoothly the answer is rehash",
    "start": "1062600",
    "end": "1068720"
  },
  {
    "text": "this is the part of the insert operation the implementation first traversed the",
    "start": "1068720",
    "end": "1075500"
  },
  {
    "text": "linked list to ensure no duplicates and do its internal jobs",
    "start": "1075500",
    "end": "1082360"
  },
  {
    "text": "however after the internal ad operation there is a call to the function rehash",
    "start": "1082880",
    "end": "1089780"
  },
  {
    "text": "table if needed the function checks the number of",
    "start": "1089780",
    "end": "1095539"
  },
  {
    "text": "records and rehash the table if the number is greater than two types of the",
    "start": "1095539",
    "end": "1101299"
  },
  {
    "text": "threshold threshold the threshold is is Select from a list of prime numbers",
    "start": "1101299",
    "end": "1107960"
  },
  {
    "text": "and once rehashing the function enlarges the table by the next prime number and",
    "start": "1107960",
    "end": "1114320"
  },
  {
    "text": "we map our records to their corresponding bucket this is a huge and",
    "start": "1114320",
    "end": "1119960"
  },
  {
    "text": "extensive operation that's also why the chart increased on smoothly",
    "start": "1119960",
    "end": "1127600"
  },
  {
    "text": "to exploit that there are still several questions to be solved for example how",
    "start": "1128179",
    "end": "1135320"
  },
  {
    "text": "much of the cash key we can control or how to construct the paper the",
    "start": "1135320",
    "end": "1140960"
  },
  {
    "text": "Collision payload there are several elements in a cache",
    "start": "1140960",
    "end": "1148280"
  },
  {
    "text": "key and the only element we can control is the URL test which reflected at the",
    "start": "1148280",
    "end": "1155299"
  },
  {
    "text": "end of the cache key the implementation will first convert",
    "start": "1155299",
    "end": "1160880"
  },
  {
    "text": "all the text to uppercase and send a key to the hash function",
    "start": "1160880",
    "end": "1167980"
  },
  {
    "text": "the hash functions simply multiplies each byte of the cache Key by 101 and",
    "start": "1168740",
    "end": "1176059"
  },
  {
    "text": "some stand up the function also uses an lcg to",
    "start": "1176059",
    "end": "1182360"
  },
  {
    "text": "scramble the result however is this hash function good",
    "start": "1182360",
    "end": "1190600"
  },
  {
    "text": "this is the answer from elect and very in their in their ocean clock at 2028 C3",
    "start": "1191780",
    "end": "1201700"
  },
  {
    "text": "this multiplied and add method is a variant of bjb hash",
    "start": "1203179",
    "end": "1210820"
  },
  {
    "text": "and this algorithm has been proven that correlatable by equivalent substrings",
    "start": "1211520",
    "end": "1219559"
  },
  {
    "text": "point two keys have the same hash such as the PS and Q2 they must be equal no",
    "start": "1219559",
    "end": "1228020"
  },
  {
    "text": "matter what you add before or after them for example after you add a letter A the",
    "start": "1228020",
    "end": "1236720"
  },
  {
    "text": "H of PSA and q2a are still equal",
    "start": "1236720",
    "end": "1243260"
  },
  {
    "text": "by knowing the by knowing this feature it's not difficult to understanding to",
    "start": "1243260",
    "end": "1249080"
  },
  {
    "text": "understand that two equivalent substrings can be combined to from",
    "start": "1249080",
    "end": "1254900"
  },
  {
    "text": "different keys such as the PSPs psq2 q2ps and Q2 Q2",
    "start": "1254900",
    "end": "1264580"
  },
  {
    "text": "they all share the same hash",
    "start": "1264580",
    "end": "1268960"
  },
  {
    "text": "since you can repeat the string many times constructed constructing the",
    "start": "1270200",
    "end": "1275480"
  },
  {
    "text": "payload is easy you just need to find a field string with the send hash and",
    "start": "1275480",
    "end": "1281360"
  },
  {
    "text": "arrangement in combinations",
    "start": "1281360",
    "end": "1285100"
  },
  {
    "text": "so all of this share the same hash value this is Handy for our exploitation",
    "start": "1286940",
    "end": "1295960"
  },
  {
    "text": "however there is a fatal flow in this attack that",
    "start": "1296000",
    "end": "1302900"
  },
  {
    "text": "is too weak to get a notice about slow down you must",
    "start": "1302900",
    "end": "1309260"
  },
  {
    "text": "have sent about 35 000 requests at least",
    "start": "1309260",
    "end": "1314299"
  },
  {
    "text": "so for our one request at one record exploit is too slow",
    "start": "1314299",
    "end": "1321500"
  },
  {
    "text": "and uh what's more ridiculous is that there's a",
    "start": "1321500",
    "end": "1327440"
  },
  {
    "text": "cash scavenger to recycle records regularly the scavenger is a threat to delete",
    "start": "1327440",
    "end": "1334640"
  },
  {
    "text": "unused record every 30 seconds every 30 seconds",
    "start": "1334640",
    "end": "1340760"
  },
  {
    "text": "those two obstacles makes our attacker make our attack not so practical",
    "start": "1340760",
    "end": "1349900"
  },
  {
    "text": "to overcome this we have to dive into the implementation model",
    "start": "1351919",
    "end": "1357860"
  },
  {
    "text": "during our investigation we find an interesting behavior that can",
    "start": "1357860",
    "end": "1366380"
  },
  {
    "text": "rescue the rescue our attack the implementation will scan the key",
    "start": "1366380",
    "end": "1372679"
  },
  {
    "text": "recursively it Trace all subdirectories as new",
    "start": "1372679",
    "end": "1378020"
  },
  {
    "text": "records and asked all of them to the table",
    "start": "1378020",
    "end": "1383799"
  },
  {
    "text": "for example in our imagination the URL",
    "start": "1384159",
    "end": "1389299"
  },
  {
    "text": "will only trigger one search and one insert operation",
    "start": "1389299",
    "end": "1395299"
  },
  {
    "text": "however each sub directory will also betrayed as",
    "start": "1395299",
    "end": "1401360"
  },
  {
    "text": "a new record so that the URL will trigger multiple insert operations",
    "start": "1401360",
    "end": "1408020"
  },
  {
    "text": "what's more interesting is that all new case will be packed with a",
    "start": "1408020",
    "end": "1414860"
  },
  {
    "text": "normal record the scavenger is nice to know records and only release them one by one instead",
    "start": "1414860",
    "end": "1422960"
  },
  {
    "text": "of killing all in a batch",
    "start": "1422960",
    "end": "1427179"
  },
  {
    "text": "so the only question left is how to construct the Collision in this new",
    "start": "1429200",
    "end": "1436039"
  },
  {
    "text": "context stop the record because because all",
    "start": "1436039",
    "end": "1441640"
  },
  {
    "text": "subdirectories are Traders are Traders independent case we have to construct a",
    "start": "1441640",
    "end": "1448220"
  },
  {
    "text": "payload that satisfies all the following equations",
    "start": "1448220",
    "end": "1453440"
  },
  {
    "text": "it may be a little hard to imagine how to make this happen should our previous",
    "start": "1453440",
    "end": "1459460"
  },
  {
    "text": "equivalent feature but if if we map all the results to be",
    "start": "1459460",
    "end": "1467419"
  },
  {
    "text": "zero then since comes much easier zero multiply anything is zero and zero",
    "start": "1467419",
    "end": "1474980"
  },
  {
    "text": "plus zero is also zero so we can satisfy all the equations if",
    "start": "1474980",
    "end": "1482179"
  },
  {
    "text": "we make the hash of each subdirectory to zero",
    "start": "1482179",
    "end": "1487960"
  },
  {
    "text": "so we can prepare a set of zero hashes and amplify the attack 10 times at least",
    "start": "1488240",
    "end": "1495620"
  },
  {
    "text": "by a slide modification",
    "start": "1495620",
    "end": "1499840"
  },
  {
    "text": "the result is that we can make a server on responsive with about 30 30",
    "start": "1501140",
    "end": "1507679"
  },
  {
    "text": "connections per second this is not an unreasonable number because IIs can",
    "start": "1507679",
    "end": "1514520"
  },
  {
    "text": "handle thousands of connections can handle thousands of connections",
    "start": "1514520",
    "end": "1519980"
  },
  {
    "text": "easily and concurrently because this bug affects the windows by",
    "start": "1519980",
    "end": "1525559"
  },
  {
    "text": "default we also avoid a good amount of bounty",
    "start": "1525559",
    "end": "1531100"
  },
  {
    "text": "let's check the demo",
    "start": "1532400",
    "end": "1536080"
  },
  {
    "text": "okay we first double check and ensure the target server has eight cores and 32",
    "start": "1539179",
    "end": "1547760"
  },
  {
    "text": "gigabyte Sprint",
    "start": "1547760",
    "end": "1550659"
  },
  {
    "text": "the window in the lower left is the script that monitors the status of IIs",
    "start": "1555260",
    "end": "1563179"
  },
  {
    "text": "it is a simple while loop and checks the server every second",
    "start": "1563179",
    "end": "1570399"
  },
  {
    "text": "okay we first run the random test we we sent",
    "start": "1578900",
    "end": "1584840"
  },
  {
    "text": "random tests to the IIs you can see the loading is less than 10",
    "start": "1584840",
    "end": "1590600"
  },
  {
    "text": "percent",
    "start": "1590600",
    "end": "1592840"
  },
  {
    "text": "okay we now run the Collision mode Collision yeah",
    "start": "1603860",
    "end": "1611740"
  },
  {
    "text": "okay",
    "start": "1614059",
    "end": "1617059"
  },
  {
    "text": "please wait okay as you can see the CPU is now on",
    "start": "1622580",
    "end": "1631460"
  },
  {
    "text": "the high loading and uh",
    "start": "1631460",
    "end": "1638679"
  },
  {
    "text": "wait four minutes",
    "start": "1638679",
    "end": "1642399"
  },
  {
    "text": "and the the check script is enter the time out Loop",
    "start": "1644440",
    "end": "1650980"
  },
  {
    "text": "and the CPU loading is 100 uh forever",
    "start": "1657080",
    "end": "1664539"
  },
  {
    "text": "okay here we speed a little bit up",
    "start": "1669620",
    "end": "1674260"
  },
  {
    "text": "foreign",
    "start": "1674720",
    "end": "1677320"
  },
  {
    "text": "is available and cannot handle any request anymore",
    "start": "1688720",
    "end": "1695919"
  },
  {
    "text": "okay this is our demo the second cast is a cash poisoning",
    "start": "1696440",
    "end": "1704240"
  },
  {
    "text": "attack there are two types of response catch in",
    "start": "1704240",
    "end": "1709940"
  },
  {
    "text": "IIs one is the static cache support by the kernel such as the picture the CSS",
    "start": "1709940",
    "end": "1717260"
  },
  {
    "text": "and the JavaScript resources the other is dynamic catch which is",
    "start": "1717260",
    "end": "1722659"
  },
  {
    "text": "usually used in which is usually used to catch responses that rarely change",
    "start": "1722659",
    "end": "1729980"
  },
  {
    "text": "for example the product information of an online shop or the news announcement",
    "start": "1729980",
    "end": "1735620"
  },
  {
    "text": "of ncns the benefit of the dynamic cache is that",
    "start": "1735620",
    "end": "1741020"
  },
  {
    "text": "you can reduce the number of the database tests",
    "start": "1741020",
    "end": "1746440"
  },
  {
    "text": "Dynamic cache is handled by the HTTP cache module and you can configure the",
    "start": "1746720",
    "end": "1752659"
  },
  {
    "text": "cache by the output caching component to use the cache you must first set out",
    "start": "1752659",
    "end": "1760640"
  },
  {
    "text": "your own rule the law can pass on several convections such such as the",
    "start": "1760640",
    "end": "1766340"
  },
  {
    "text": "file extension the query string over the HTTP header",
    "start": "1766340",
    "end": "1771440"
  },
  {
    "text": "here we set our level for the extension of aspx and catch the result based on",
    "start": "1771440",
    "end": "1778340"
  },
  {
    "text": "the ID so the low cost of the cash poisoning is",
    "start": "1778340",
    "end": "1784820"
  },
  {
    "text": "that the manager uses a bad password to handle the quality string",
    "start": "1784820",
    "end": "1789919"
  },
  {
    "text": "assign that you have already set out the rule to catch a specific a specific",
    "start": "1789919",
    "end": "1795440"
  },
  {
    "text": "pyramid and inconsistency between the margin and the backend mainly IIs to catch the",
    "start": "1795440",
    "end": "1803000"
  },
  {
    "text": "wrong result foreign the most common backhand is asp.net and",
    "start": "1803000",
    "end": "1811399"
  },
  {
    "text": "a simple HTTP Parliament production can lower than all",
    "start": "1811399",
    "end": "1816679"
  },
  {
    "text": "for the key to be cast in the color string the module only uses the first",
    "start": "1816679",
    "end": "1822140"
  },
  {
    "text": "occurrence of the cache however the sp.net concatenate all",
    "start": "1822140",
    "end": "1828559"
  },
  {
    "text": "together this inconsistent this inconsistent passive Behavior calls the IIs to catch",
    "start": "1828559",
    "end": "1837020"
  },
  {
    "text": "the wrong response for example if a patch just prints out",
    "start": "1837020",
    "end": "1844880"
  },
  {
    "text": "your name that's on the ID the attacker can poison the result by",
    "start": "1844880",
    "end": "1850100"
  },
  {
    "text": "repeating the ID on the URL IIs only recognized the orange as the",
    "start": "1850100",
    "end": "1857779"
  },
  {
    "text": "cash key however the sp.net will concatenate both",
    "start": "1857779",
    "end": "1863000"
  },
  {
    "text": "values and show them out so the result is that the next time the",
    "start": "1863000",
    "end": "1869840"
  },
  {
    "text": "user access the patch he got hacked",
    "start": "1869840",
    "end": "1874720"
  },
  {
    "text": "foreign is the authentication bypass",
    "start": "1875480",
    "end": "1882399"
  },
  {
    "text": "back to our opening a super secret area which is protected by a super strong",
    "start": "1882620",
    "end": "1888919"
  },
  {
    "text": "passwords under the design of the IIs all of these passwords are valid",
    "start": "1888919",
    "end": "1897260"
  },
  {
    "text": "I guess you might have several questions and be thinking",
    "start": "1897260",
    "end": "1902419"
  },
  {
    "text": "what's the loot codes or how do I get those passwords",
    "start": "1902419",
    "end": "1908059"
  },
  {
    "text": "or suspect this must be an edge case what kind of the scenario is vulnerable",
    "start": "1908059",
    "end": "1915640"
  },
  {
    "text": "first log on is an expensive operation to not reduce the performance IIs",
    "start": "1917000",
    "end": "1925100"
  },
  {
    "text": "patches all tokens for password best authentication by default",
    "start": "1925100",
    "end": "1931640"
  },
  {
    "text": "the implementation uses the LKR hash instead of the tree hash table and",
    "start": "1931640",
    "end": "1937820"
  },
  {
    "text": "configure a scavenger to delete unused record every 15 minutes",
    "start": "1937820",
    "end": "1945260"
  },
  {
    "text": "foreign is highly customized",
    "start": "1945260",
    "end": "1951620"
  },
  {
    "text": "during initialization the module defines several functions such as the hash",
    "start": "1951620",
    "end": "1957559"
  },
  {
    "text": "function the logic of how to extracting the key from the breaker and how to decide which",
    "start": "1957559",
    "end": "1965299"
  },
  {
    "text": "one is the correct record when the Collision happened",
    "start": "1965299",
    "end": "1970600"
  },
  {
    "text": "and this is the hash function defined by the token cache module it simply uses",
    "start": "1971360",
    "end": "1978500"
  },
  {
    "text": "the djb to Hash the username and the password and then mix them together by X",
    "start": "1978500",
    "end": "1985460"
  },
  {
    "text": "all and",
    "start": "1985460",
    "end": "1991460"
  },
  {
    "text": "this is the function used to decide which one is the correct record when the",
    "start": "1991460",
    "end": "1998360"
  },
  {
    "text": "Collision happens the function first checks whether the log on next of both records are equal or",
    "start": "1998360",
    "end": "2006880"
  },
  {
    "text": "not and then compare their username",
    "start": "2006880",
    "end": "2012360"
  },
  {
    "text": "and compare the username again you may be wondering",
    "start": "2012360",
    "end": "2019840"
  },
  {
    "text": "why did function compare the username twice",
    "start": "2019840",
    "end": "2025059"
  },
  {
    "text": "I guess the original intent of IIs was to compare the password",
    "start": "2025059",
    "end": "2031059"
  },
  {
    "text": "however the developer copy and passed the code but forgot to repress the name",
    "start": "2031059",
    "end": "2037720"
  },
  {
    "text": "to the possible it's a big fail",
    "start": "2037720",
    "end": "2043860"
  },
  {
    "text": "the failure could add an inconsistency between the hash calculation and the",
    "start": "2045880",
    "end": "2051700"
  },
  {
    "text": "cash comparison the hash calculation involves both the username and the password",
    "start": "2051700",
    "end": "2058599"
  },
  {
    "text": "however when the Collision occurs the table only compare the username to get",
    "start": "2058599",
    "end": "2065440"
  },
  {
    "text": "the correct entry since we can adjust the field of the password to change the hash",
    "start": "2065440",
    "end": "2072940"
  },
  {
    "text": "if a hash if a hash hit a record that is already in the table the module will",
    "start": "2072940",
    "end": "2079839"
  },
  {
    "text": "return that to Earth directory so the result is that you can reuse",
    "start": "2079839",
    "end": "2087638"
  },
  {
    "text": "another user's logo login token with random passwords",
    "start": "2087639",
    "end": "2094658"
  },
  {
    "text": "however there are still a few prerequisites first each password attempt only has the",
    "start": "2094659",
    "end": "2103359"
  },
  {
    "text": "success rate of 4.2 billion because the hash is is a 32-bit integer",
    "start": "2103359",
    "end": "2111579"
  },
  {
    "text": "the other is that there must be a successful looking uh but the other is that there must be a",
    "start": "2111579",
    "end": "2120700"
  },
  {
    "text": "successful logging before our attack however once the loading is done and the",
    "start": "2120700",
    "end": "2127000"
  },
  {
    "text": "token is cached in the memory you have unlimited attempts during the 15 minutes",
    "start": "2127000",
    "end": "2132579"
  },
  {
    "text": "time window so to make this box a more severe",
    "start": "2132579",
    "end": "2140339"
  },
  {
    "text": "malability we have developed several ways to win the lottery",
    "start": "2140339",
    "end": "2146680"
  },
  {
    "text": "the first enhancements is to increase the probability of the Collision",
    "start": "2146680",
    "end": "2153660"
  },
  {
    "text": "and a vulnerability that requires user interaction is to land",
    "start": "2153660",
    "end": "2160720"
  },
  {
    "text": "so for the second enhancement we must find a way to exploit without user",
    "start": "2160720",
    "end": "2167380"
  },
  {
    "text": "interaction the last is to defeat the Restriction of",
    "start": "2167380",
    "end": "2173440"
  },
  {
    "text": "the 15-minute time window we figure out a way to catch the token forever",
    "start": "2173440",
    "end": "2181680"
  },
  {
    "text": "okay the first enhancement is to increase the probability",
    "start": "2182880",
    "end": "2188800"
  },
  {
    "text": "as we mentioned that the 4 billion possible records are are a ridiculous",
    "start": "2188800",
    "end": "2195400"
  },
  {
    "text": "number the LKR hash even uses an lstg to make",
    "start": "2195400",
    "end": "2201880"
  },
  {
    "text": "the result more rendered but just because of this locg we can",
    "start": "2201880",
    "end": "2208960"
  },
  {
    "text": "lower the key space because the lcg is not one-to-one mapping under the key",
    "start": "2208960",
    "end": "2214960"
  },
  {
    "text": "space of 32-bit integer so there must be results that will never",
    "start": "2214960",
    "end": "2223359"
  },
  {
    "text": "appear we can pre-compute a dictionary that actually excludes the password whose",
    "start": "2223359",
    "end": "2230980"
  },
  {
    "text": "hash is not in the results this development can reduce a number of",
    "start": "2230980",
    "end": "2236440"
  },
  {
    "text": "key stats also there are still billion possible",
    "start": "2236440",
    "end": "2241599"
  },
  {
    "text": "records we have increased the success rate by 30 percent at least",
    "start": "2241599",
    "end": "2249099"
  },
  {
    "text": "thank you the second enhancement is to regen Regan the initiative",
    "start": "2249099",
    "end": "2254740"
  },
  {
    "text": "there is a feature called connect us that is usually that is usually used in",
    "start": "2254740",
    "end": "2261760"
  },
  {
    "text": "the virtual hosting because the vendor has to separate IIs process for their",
    "start": "2261760",
    "end": "2267400"
  },
  {
    "text": "customers with this feature each IIs process can",
    "start": "2267400",
    "end": "2272500"
  },
  {
    "text": "be under different user contexts",
    "start": "2272500",
    "end": "2276960"
  },
  {
    "text": "so under this feature IIs will Auto look on the user use best you specify",
    "start": "2277780",
    "end": "2284160"
  },
  {
    "text": "corresponding the new process this token will also be cached that",
    "start": "2284160",
    "end": "2290380"
  },
  {
    "text": "means we can reuse the customer's identity and no longer to wait for user",
    "start": "2290380",
    "end": "2296859"
  },
  {
    "text": "interaction in this case we have regained the initiative",
    "start": "2296859",
    "end": "2303720"
  },
  {
    "text": "to prove it works we did a test in our lab environment Windows Server can handle about 1",
    "start": "2304780",
    "end": "2312640"
  },
  {
    "text": "000 and 800 logging attempts per second because every attempts cost nothing you",
    "start": "2312640",
    "end": "2319599"
  },
  {
    "text": "can run this all day and the success rate is about 42 percent",
    "start": "2319599",
    "end": "2326020"
  },
  {
    "text": "foreign",
    "start": "2326020",
    "end": "2328619"
  },
  {
    "text": "you can also rank it for longer five days for 20 12 days for 50 and the",
    "start": "2334480",
    "end": "2342640"
  },
  {
    "text": "success rate of running for 24 days can get 100 percent",
    "start": "2342640",
    "end": "2349859"
  },
  {
    "text": "we have reproduced in our lab environment and can get a password in about five days",
    "start": "2349900",
    "end": "2357839"
  },
  {
    "text": "the last enhancement is to defeat the tie window our idea is simple in modern",
    "start": "2358180",
    "end": "2365740"
  },
  {
    "text": "software architecture it's common to see the pattern of a background demon",
    "start": "2365740",
    "end": "2371500"
  },
  {
    "text": "monitors the system's healthy or several Chrome jobs access the",
    "start": "2371500",
    "end": "2377020"
  },
  {
    "text": "internal apis regularly",
    "start": "2377020",
    "end": "2380940"
  },
  {
    "text": "so we can assign a situation that a credential is attached with the contract",
    "start": "2382359",
    "end": "2389020"
  },
  {
    "text": "and the gap between each assets is less than 50 15 minutes",
    "start": "2389020",
    "end": "2395380"
  },
  {
    "text": "in this assumption the token will be cashed forever",
    "start": "2395380",
    "end": "2401339"
  },
  {
    "text": "okay I know it's very I I know it's very ideal is there any real test",
    "start": "2401440",
    "end": "2409500"
  },
  {
    "text": "sure let's talk about The Exchange Server again",
    "start": "2409960",
    "end": "2415320"
  },
  {
    "text": "there is a service called active monitoring which is enabled by default",
    "start": "2415960",
    "end": "2421780"
  },
  {
    "text": "and responsible for monitoring all services it checks the owa and the active sync",
    "start": "2421780",
    "end": "2430240"
  },
  {
    "text": "service every 10 minutes with a text with a test credential",
    "start": "2430240",
    "end": "2436180"
  },
  {
    "text": "so thanks for the health check the token of the credential will be cashed forever",
    "start": "2436180",
    "end": "2443940"
  },
  {
    "text": "you can try as many as you like until you get a successful login",
    "start": "2445060",
    "end": "2452520"
  },
  {
    "text": "and the password is also usable to log into the owa",
    "start": "2452859",
    "end": "2459960"
  },
  {
    "text": "the account for the health track has its own mailbox too this is useful for",
    "start": "2460619",
    "end": "2467140"
  },
  {
    "text": "further exploitations such as fishing or training and other post office rce",
    "start": "2467140",
    "end": "2472720"
  },
  {
    "text": "together that's our last test",
    "start": "2472720",
    "end": "2477420"
  },
  {
    "text": "okay let's talk about medications and Future Works",
    "start": "2478240",
    "end": "2483820"
  },
  {
    "text": "for the design of the hash table it's recommend to use the pseudo-render functions such as the Sip hash or",
    "start": "2483820",
    "end": "2491440"
  },
  {
    "text": "Highway hash that can reduce the collision and make the attacker more costly",
    "start": "2491440",
    "end": "2497680"
  },
  {
    "text": "for the design of the cache inconsistency is still the king just like our classes today the cash",
    "start": "2497680",
    "end": "2505180"
  },
  {
    "text": "poisoning due to the different possible behaviors and the authentication bypassed due to the unkinned Past groups",
    "start": "2505180",
    "end": "2514119"
  },
  {
    "text": "since the hash voting attack is by this side attack there are several workarounds to mitigate the problems",
    "start": "2514119",
    "end": "2521440"
  },
  {
    "text": "such as the input size limitation or a state to randomize the hash",
    "start": "2521440",
    "end": "2527800"
  },
  {
    "text": "if solution has its limitations so so my last recommendation is to learn",
    "start": "2527800",
    "end": "2534880"
  },
  {
    "text": "from the history there are still several cool ideas in my",
    "start": "2534880",
    "end": "2541960"
  },
  {
    "text": "mind such as using Timeless timing attack to reduce the keys fast",
    "start": "2541960",
    "end": "2547780"
  },
  {
    "text": "however since I am lazy will come to pick them up if you are interested",
    "start": "2547780",
    "end": "2555660"
  },
  {
    "text": "this is the end of my presentation if you have any questions here's my contact",
    "start": "2555960",
    "end": "2562060"
  },
  {
    "text": "information thank you again for being here thanks",
    "start": "2562060",
    "end": "2568020"
  },
  {
    "text": "[Music]",
    "start": "2568390",
    "end": "2571510"
  },
  {
    "text": "[Music]",
    "start": "2575350",
    "end": "2578440"
  }
]