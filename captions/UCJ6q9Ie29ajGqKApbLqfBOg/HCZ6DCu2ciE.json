[
  {
    "text": "okay so hi um Welcome to our talk and today we're going to talk about um",
    "start": "2560",
    "end": "8679"
  },
  {
    "text": "microarchitecture Texs uh on risk five and what is risk 5 risk 5 is a new CPU",
    "start": "8679",
    "end": "13920"
  },
  {
    "text": "architecture and we are going to see um how this architecture enables old and",
    "start": "13920",
    "end": "19600"
  },
  {
    "text": "new attacks um that lead to very powerful attack Primitives so how are we",
    "start": "19600",
    "end": "25039"
  },
  {
    "text": "going to go through this talk well first of all we're going to recap CPU security",
    "start": "25039",
    "end": "31320"
  },
  {
    "text": "Basics and we're going to learn what the state-of-the-art uh in CPU security research in recent years was um and then",
    "start": "31320",
    "end": "38440"
  },
  {
    "text": "we're going to learn about existing attacks so we're going to see which attacks were possible in the past and",
    "start": "38440",
    "end": "45000"
  },
  {
    "text": "then we're going to transition with all of this knowledge um to investigating CPU Security on risk 5 CPUs and well who",
    "start": "45000",
    "end": "53399"
  },
  {
    "text": "are we um we are both members of the ROTC research group uh at cisper a journ",
    "start": "53399",
    "end": "59039"
  },
  {
    "text": "research Institution and I'm Lucas a PhD student and with me today is Daniel and hi I'm Daniel and",
    "start": "59039",
    "end": "65960"
  },
  {
    "text": "unfortunately not with us today is our supervisor Michael Schwarz and our entire research group focuses on CPU",
    "start": "65960",
    "end": "73560"
  },
  {
    "text": "security but one thing you Lookers what I still didn't quite get is like why do we even care why do we care about you",
    "start": "73560",
    "end": "80400"
  },
  {
    "text": "Security in the first place well let's start with a very easy to understand example a life demo um and well let's",
    "start": "80400",
    "end": "88640"
  },
  {
    "text": "hope uh the demo got are in our favor today um maybe they",
    "start": "88640",
    "end": "96040"
  },
  {
    "text": "are um and what we're going to see is a cacher tag and this cacher tag is going",
    "start": "96040",
    "end": "102399"
  },
  {
    "text": "to leak um an interesting logo that you maybe already",
    "start": "102399",
    "end": "108439"
  },
  {
    "text": "know well and with this live demo we've basically shown that it's uh possible to",
    "start": "108439",
    "end": "114240"
  },
  {
    "text": "leak data to which you shouldn't have access to Via a microarchitectural side Channel and more precisely What's",
    "start": "114240",
    "end": "120920"
  },
  {
    "text": "Happening Here is that we could just encode this data in the CPU component called the microarchitectural cache and",
    "start": "120920",
    "end": "127240"
  },
  {
    "text": "then we could just leak that later",
    "start": "127240",
    "end": "131200"
  },
  {
    "text": "on so the the thinger is um once we saw something like this can happen and we",
    "start": "132720",
    "end": "138400"
  },
  {
    "text": "can leak the plet logo okay that that's fine but is that really something we should care about because drawing a",
    "start": "138400",
    "end": "145360"
  },
  {
    "text": "blacket logo that's way easier and but it turns out that CPU vulnerability can leak way more so you can actually leak",
    "start": "145360",
    "end": "153000"
  },
  {
    "text": "cryptographic keys so directly private keys but keys are not the only thing that we uh care about in today's",
    "start": "153000",
    "end": "159440"
  },
  {
    "text": "security we also care about browser cookies and it turns out you can actually also leak browser cookies it",
    "start": "159440",
    "end": "165400"
  },
  {
    "text": "doesn't stop there the thing is you can leak almost arbitrary memory from your system well and now the question is if",
    "start": "165400",
    "end": "172760"
  },
  {
    "text": "we can leak our almost arbitrary memory from where can we leak it what is the attacker model and it shows that with",
    "start": "172760",
    "end": "179760"
  },
  {
    "text": "CPU vulnerabilities we can have a very high flexibility so what we can for",
    "start": "179760",
    "end": "184920"
  },
  {
    "text": "example do is we can leak data across the user space kernel space boundary which we shouldn't be able to do",
    "start": "184920",
    "end": "190680"
  },
  {
    "text": "traditionally and then we can also uh to go with the theme from the browser do a",
    "start": "190680",
    "end": "195799"
  },
  {
    "text": "text on the browser uh so for example fingerprint which websites a victim is visiting or do a text out of the browser",
    "start": "195799",
    "end": "203400"
  },
  {
    "text": "so for example we can leak stuff out outside of the browser sandbox from only",
    "start": "203400",
    "end": "208599"
  },
  {
    "text": "the browser sandbox by using JavaScript and even worse if we're thinking about the cloud we can also um leak data from",
    "start": "208599",
    "end": "217200"
  },
  {
    "text": "within virtual machine so one virtual machine can attack another virtual machine or the hypervisor and it turns",
    "start": "217200",
    "end": "223360"
  },
  {
    "text": "also out that this research field especially those stronger attacks is quite new like the story for those",
    "start": "223360",
    "end": "230159"
  },
  {
    "text": "stronger types of attacks and where we actually started to really really worry about C Security started in 2018 with",
    "start": "230159",
    "end": "236439"
  },
  {
    "text": "meltdown inspector and I guess that most of you have already heard heard about met inspector but the fun thing here is",
    "start": "236439",
    "end": "242640"
  },
  {
    "text": "that the story doesn't end there like recently afterwards we found variant of",
    "start": "242640",
    "end": "247879"
  },
  {
    "text": "such attacks or more precisely like CPU researchers across the world found more variants of those attacks like MDS",
    "start": "247879",
    "end": "254000"
  },
  {
    "text": "attacks and it doesn't stop that even like even more variants came into play with lvi and yesterday we saw power side",
    "start": "254000",
    "end": "262479"
  },
  {
    "text": "channels during the colliding power talk and it turns out that you can actually also abuse power side channels to leak",
    "start": "262479",
    "end": "268880"
  },
  {
    "text": "information from your CPU and then last year we figured out that you can",
    "start": "268880",
    "end": "274160"
  },
  {
    "text": "actually go even further like CPU researchers from CRS figured out that",
    "start": "274160",
    "end": "279320"
  },
  {
    "text": "you can actually abuse microarchitectural bucks like those are just implementation bucks now because",
    "start": "279320",
    "end": "284880"
  },
  {
    "text": "CPU are so complex that you can just build bucks in there similar to software",
    "start": "284880",
    "end": "290280"
  },
  {
    "text": "bus and you can just actually exploit that from within the software similar to",
    "start": "290280",
    "end": "295520"
  },
  {
    "text": "what you saw yesterday when you attended the Collide and Power Talk you saw that those power",
    "start": "295520",
    "end": "301680"
  },
  {
    "text": "attacks can be even stronger and we're still not at the edge there also for new",
    "start": "301680",
    "end": "307280"
  },
  {
    "text": "cpers like the apple chips we also saw similar leakage and even recently we saw",
    "start": "307280",
    "end": "312520"
  },
  {
    "text": "texts such as downfall or cash wap on Intel and AMD CPUs and you can classify",
    "start": "312520",
    "end": "317880"
  },
  {
    "text": "those detects a little bit you can say you have Primitives to leak Secrets like Spectre meltdown and MDS style attacks",
    "start": "317880",
    "end": "325080"
  },
  {
    "text": "but you can also not only read stuff out of some victim's memory but you can also",
    "start": "325080",
    "end": "330960"
  },
  {
    "text": "change the data that the victim processes with like for example with plunder or casw you can actually change",
    "start": "330960",
    "end": "337600"
  },
  {
    "text": "those data and so I think that superar security is actually something we should",
    "start": "337600",
    "end": "343759"
  },
  {
    "text": "care about and all these things show how diverse that field actually is but Daniel I mean in the past all these",
    "start": "343759",
    "end": "351039"
  },
  {
    "text": "attacks you described are on Intel or most of these attacks are on in and AMD CPUs right there there's other",
    "start": "351039",
    "end": "356759"
  },
  {
    "text": "architectures um yeah fair enough I have to admit that like most of them were on",
    "start": "356759",
    "end": "362319"
  },
  {
    "text": "Intel and AMD but it doesn't stop there like we also saw attacks on arm and on arm many things also work like you have",
    "start": "362319",
    "end": "369240"
  },
  {
    "text": "cach attacks there and also some variance of uh Spectre and some variance of meltdown so that's not a thing that's",
    "start": "369240",
    "end": "376880"
  },
  {
    "text": "not a fault of AMD or Intel but also arm renders have these same problems so arm",
    "start": "376880",
    "end": "383039"
  },
  {
    "text": "basically you can say it's vulnerable to similar classes of attacks but wait I",
    "start": "383039",
    "end": "388759"
  },
  {
    "text": "mean we don't have to stop at arm right there's still other architectures and and one of these architectures is the",
    "start": "388759",
    "end": "394479"
  },
  {
    "text": "topic of our talk so risk five is a very new instruction set architecture um that",
    "start": "394479",
    "end": "401039"
  },
  {
    "text": "is great not only because it's um very new and newly designed architecture but also because it's fully open source in",
    "start": "401039",
    "end": "407720"
  },
  {
    "text": "the standard and you can actually get open- Source core designs even so what that allows to is uh for for a similar",
    "start": "407720",
    "end": "415479"
  },
  {
    "text": "method that we've done um with open source software you can basically do white box buck hunting so you basically",
    "start": "415479",
    "end": "422400"
  },
  {
    "text": "can for the first time now look at the source code of your chip and find bucks in the chips source code and well you",
    "start": "422400",
    "end": "430319"
  },
  {
    "text": "can even go further you can build your own Hardware mitigations into this chip you know what the chip does you have the",
    "start": "430319",
    "end": "436400"
  },
  {
    "text": "source code of the chip so you can basically modify the hardware to be resilient against the kinds of attacks",
    "start": "436400",
    "end": "443160"
  },
  {
    "text": "you want to uh prevent against and this is exactly what Academia has done a lot in the recent years because of of course",
    "start": "443160",
    "end": "449720"
  },
  {
    "text": "Academia wants to implement mitigations and we want a nice um basically stack to",
    "start": "449720",
    "end": "455280"
  },
  {
    "text": "implement our mitigations on top on and that has been risk five for the recent years okay but but wait there like",
    "start": "455280",
    "end": "461840"
  },
  {
    "text": "Academia that that's nice and we're academics after all but do we really care about academic things like Intel",
    "start": "461840",
    "end": "469159"
  },
  {
    "text": "AMD arm we see these things but risk five is the just another Academia thingy",
    "start": "469159",
    "end": "475039"
  },
  {
    "text": "like do we really care about that should we it turns out that you can actually buy risk course so it's it's not only an",
    "start": "475039",
    "end": "481720"
  },
  {
    "text": "Academia thing after all the first risk course are just coming out right now and now we have available course that we can",
    "start": "481720",
    "end": "487800"
  },
  {
    "text": "actually buy in hardware and this is the target of the rest our talk so basically",
    "start": "487800",
    "end": "493520"
  },
  {
    "text": "what we analyzed are two different risk five cores that we've looked at and",
    "start": "493520",
    "end": "498840"
  },
  {
    "text": "analyzed for microarchitectural attack surfice and these are namely the all winner D1 which is a core from China and",
    "start": "498840",
    "end": "505560"
  },
  {
    "text": "the sci5 u74 which is a core by sci5 okay but is risk 5 actually going to be",
    "start": "505560",
    "end": "511599"
  },
  {
    "text": "used well so let's look at it right let's look at what the industry says and",
    "start": "511599",
    "end": "516640"
  },
  {
    "text": "we we looked for it and we found out that there's predictions that 62 uh around 62 billion risk sces are",
    "start": "516640",
    "end": "522880"
  },
  {
    "text": "predicted to be running by 2025 so it seems that risk um is gaining quite a",
    "start": "522880",
    "end": "528320"
  },
  {
    "text": "lot of traction and even more we have projects that uh support the entire uh risk ecosystem with major vendor",
    "start": "528320",
    "end": "535240"
  },
  {
    "text": "involvement like Google qualcom and Samsung and they actually try to to bring risk support into their products",
    "start": "535240",
    "end": "543079"
  },
  {
    "text": "okay fair enough like Risk five is not an academic thing anymore and it will be",
    "start": "543079",
    "end": "548200"
  },
  {
    "text": "like one of the rising CPU renders or CPU architectures out there so let's ask",
    "start": "548200",
    "end": "553680"
  },
  {
    "text": "the important question here what about security like what is the status quo on actual Hardware implementations of risk",
    "start": "553680",
    "end": "559800"
  },
  {
    "text": "5 and to analyze that we wanted to start with a couple questions because one thing is the very obvious thing we have",
    "start": "559800",
    "end": "566800"
  },
  {
    "text": "C for quite a while now and now we have a completely new architecture did we learn anything from a security",
    "start": "566800",
    "end": "573399"
  },
  {
    "text": "standpoint are those CPUs now hardened against such vulnerabilities that we saw in the recent years on the other hand do",
    "start": "573399",
    "end": "581200"
  },
  {
    "text": "academic mitigations and we have a lot of them do they actually make it into practice are they now implemented in our",
    "start": "581200",
    "end": "587640"
  },
  {
    "text": "microarchitectures let's find out and the other thing is which I personally also found very interesting like does",
    "start": "587640",
    "end": "593160"
  },
  {
    "text": "open source imply now better or worse security because For the First Time Ever we're having a open source standard",
    "start": "593160",
    "end": "599800"
  },
  {
    "text": "there so what does it mean and for that we will analyze the c906 and the u74",
    "start": "599800",
    "end": "607279"
  },
  {
    "text": "CPUs so actual Hardware cores but how do we do that Lucas well I would say before",
    "start": "607279",
    "end": "613160"
  },
  {
    "text": "we start jumping in right into the security analysis of these CES we should understand how they work right and point",
    "start": "613160",
    "end": "620480"
  },
  {
    "text": "so that basically means we we should now very quickly understand how a CPU in general works and basically a CPU is",
    "start": "620480",
    "end": "628839"
  },
  {
    "text": "just there to execute the instructions um that you want to be executed and to do that as fast and reliably as possible",
    "start": "628839",
    "end": "635959"
  },
  {
    "text": "and to execute this instructions you actually have to get them from somewhere right if you write a program that gets",
    "start": "635959",
    "end": "641079"
  },
  {
    "text": "compiled somewhere the instructions somehow have to end up where they get uh processed and that's what what we call",
    "start": "641079",
    "end": "647440"
  },
  {
    "text": "the the fetch phase where we basically fetch an instruction from the processor's memory or from the memory of",
    "start": "647440",
    "end": "653880"
  },
  {
    "text": "the system into the processor but after we end up with this instruction um we need to decide what we need to do to",
    "start": "653880",
    "end": "661040"
  },
  {
    "text": "execute this instruction this is a phase which is called decode where we basically look at the instruction pass",
    "start": "661040",
    "end": "667680"
  },
  {
    "text": "it um put it into some internal representation and then basically decide",
    "start": "667680",
    "end": "673240"
  },
  {
    "text": "what are we going to do next um and after we decided what we need to do next of course we need to do that right and",
    "start": "673240",
    "end": "680519"
  },
  {
    "text": "there's the actual phase where we execute the instruction and this can for example be",
    "start": "680519",
    "end": "685639"
  },
  {
    "text": "if you look at something that you do arithmetically as simple as an addition that you perform right this is where you",
    "start": "685639",
    "end": "691639"
  },
  {
    "text": "actually do the work and after you've done the work of computing your instruction maybe needs to change",
    "start": "691639",
    "end": "698360"
  },
  {
    "text": "something in memory for your program to have an effect right um and this is what we do in a write back phase where we",
    "start": "698360",
    "end": "704720"
  },
  {
    "text": "write the entire result back to this uh to the memory that we've used so now we",
    "start": "704720",
    "end": "709959"
  },
  {
    "text": "basically very roughly know what a CPU does and now the question is what kind",
    "start": "709959",
    "end": "715560"
  },
  {
    "text": "of attacks are there and how do they relate to this different phases of an execution in the CPU and so what we have",
    "start": "715560",
    "end": "722480"
  },
  {
    "text": "um is basically a lot of attacks that use timing in caches and predictors which is a structure that is used to",
    "start": "722480",
    "end": "729279"
  },
  {
    "text": "speed up memory loads and stores in the processor and there in the recent years we've seen really a lot of attacks um",
    "start": "729279",
    "end": "737160"
  },
  {
    "text": "most notably flush and reload and Prime and probe which are two very generic Primitives that allow you to leak",
    "start": "737160",
    "end": "743040"
  },
  {
    "text": "metadata out of the cache and they've really been applied to a lot of different contexts we had a lot of",
    "start": "743040",
    "end": "748600"
  },
  {
    "text": "attack on cryptographic libraries um with with these Primitives um more recently we also had",
    "start": "748600",
    "end": "754760"
  },
  {
    "text": "implementation bugs uh for example Daniel talked before about epic League where we could basically architecturally",
    "start": "754760",
    "end": "760639"
  },
  {
    "text": "see something that ran wrong in the microarchitecture OR meltdown where we can leak arbitrary data by um a bug in",
    "start": "760639",
    "end": "767839"
  },
  {
    "text": "default handling of the CPU and then if you visited the Collide and power talk we also had um a lot of attacks that",
    "start": "767839",
    "end": "775240"
  },
  {
    "text": "abuse the physical properties of a CPU so either the this can be a rowhammer attack which for example abuses how the",
    "start": "775240",
    "end": "782399"
  },
  {
    "text": "dram stores memory and um the basically the nature of the Dr itself to induce",
    "start": "782399",
    "end": "788000"
  },
  {
    "text": "bit flips in a dam and bit powerful attacks or it can be attacks on the power consumption of the CPU that allow",
    "start": "788000",
    "end": "793839"
  },
  {
    "text": "you to infer what the CPU is doing by by looking at its power consumption okay so",
    "start": "793839",
    "end": "799560"
  },
  {
    "text": "that was quite a lot already but let's actually just start to Deep dive into our first attack and the first attack",
    "start": "799560",
    "end": "806519"
  },
  {
    "text": "that we want to discuss today is flush and reload that's been a thing on on x86 CPUs for quite a while now so what's",
    "start": "806519",
    "end": "814240"
  },
  {
    "text": "happening on risk 5 now but to understand flush and reload the cach attack we first have to understand CPU",
    "start": "814240",
    "end": "820120"
  },
  {
    "text": "caches a little bit so let suppos you have the following on your right hand",
    "start": "820120",
    "end": "825160"
  },
  {
    "text": "side of the slide you have your main memory so your DRM in the middle you have the CPU cache and on your left hand",
    "start": "825160",
    "end": "830920"
  },
  {
    "text": "side you have two lines of code doing memory accesses and what's not happening on the first memory access we have a",
    "start": "830920",
    "end": "837240"
  },
  {
    "text": "so-called cach Miss because first if you look at thebu cache it's just empty so we call that a CPU uh or Cache miss that",
    "start": "837240",
    "end": "845199"
  },
  {
    "text": "means we have to still fetch that data and so we fetch that from the DRM and that takes actually quite a while",
    "start": "845199",
    "end": "851560"
  },
  {
    "text": "because DMS compared to everything else in the microarchitecture are very very slow but after a while this data comes",
    "start": "851560",
    "end": "858800"
  },
  {
    "text": "back and we can just forward that to the exess but it doesn't stop there like",
    "start": "858800",
    "end": "865839"
  },
  {
    "text": "transparently so without the programmer noticing this data is also put into the CPU",
    "start": "865839",
    "end": "871480"
  },
  {
    "text": "cache and why is that nice well the thing now is if you have a second memory access which accesses the same memory",
    "start": "871480",
    "end": "879279"
  },
  {
    "text": "well then we can directly surf that from the cache and we call that a cache hit and the really nice thing is our first",
    "start": "879279",
    "end": "886040"
  },
  {
    "text": "access was really slow because it had to travel all this way to ddam and back and",
    "start": "886040",
    "end": "891360"
  },
  {
    "text": "remember ddam is very very slow our second access however can just be",
    "start": "891360",
    "end": "896560"
  },
  {
    "text": "directly surfed from the CPU cache so it's really fast and if I now equip one",
    "start": "896560",
    "end": "902440"
  },
  {
    "text": "of you with a very high Precision timer you can actually plot that you by just measuring those excess timings then you",
    "start": "902440",
    "end": "908759"
  },
  {
    "text": "see something like this so yes those are very small timings as you can see here",
    "start": "908759",
    "end": "916040"
  },
  {
    "text": "if your timer is precise enough you can actually distinguish those two peaks I would say quite easily on your left hand",
    "start": "916040",
    "end": "922360"
  },
  {
    "text": "side you have cach hits on your right hand side you have cach misses and that's a little bit of theory",
    "start": "922360",
    "end": "928959"
  },
  {
    "text": "about CPU caches so the one takeaway here is we can distinguish cach hits and",
    "start": "928959",
    "end": "934399"
  },
  {
    "text": "cache misses so we know whether something is in the cache or not if we access it and once we have that we can",
    "start": "934399",
    "end": "940959"
  },
  {
    "text": "build our first tech there so suppose you have two processes because we want to attack something let's name them",
    "start": "940959",
    "end": "947959"
  },
  {
    "text": "attacker and victim and these two processes share some shed memory and that's actually",
    "start": "947959",
    "end": "954160"
  },
  {
    "text": "very common if you think about it for example all your Shar libraries are named like that because say abuse shared",
    "start": "954160",
    "end": "959680"
  },
  {
    "text": "memory for efficiency reasons so we have just some library in there that both the",
    "start": "959680",
    "end": "965720"
  },
  {
    "text": "attacker and the victim processors are using and now suppose one of those two entities just does a memory access then",
    "start": "965720",
    "end": "972959"
  },
  {
    "text": "the thing is that data is now cached so it's in the CPU cache now and both",
    "start": "972959",
    "end": "980160"
  },
  {
    "text": "actually see that cached memory so once the attacker accesses that data it's a really fast access because the victim",
    "start": "980160",
    "end": "986720"
  },
  {
    "text": "has previously accessed that and that's the idea of our first attack so first the attacker",
    "start": "986720",
    "end": "994000"
  },
  {
    "text": "flushes this memory or the flushes the CPU cache so hence the name flush and",
    "start": "994000",
    "end": "999560"
  },
  {
    "text": "reload and everything from the CPU cache is now gone because flush flushing just",
    "start": "999560",
    "end": "1005519"
  },
  {
    "text": "removes the memory from the CPU cache now the attacker just Waits and at some point the victim May access that memory",
    "start": "1005519",
    "end": "1014240"
  },
  {
    "text": "and if it does well then it's incb again we know how that works now and the cool thing is now if our",
    "start": "1014240",
    "end": "1020480"
  },
  {
    "text": "attacker just tries to access this memory again depending on that timing we",
    "start": "1020480",
    "end": "1026280"
  },
  {
    "text": "get the information of whether or not our victim has accessed that memory in the",
    "start": "1026280",
    "end": "1031720"
  },
  {
    "text": "meantime if they didn't well then we wouldn't see anything going far uh anything on there being far because it's",
    "start": "1031720",
    "end": "1039199"
  },
  {
    "text": "uncashed but if they access it well then we just see that it's",
    "start": "1039199",
    "end": "1044360"
  },
  {
    "text": "cached so wait that's flush and reload I mean yeah and that sounds good right on",
    "start": "1044360",
    "end": "1049600"
  },
  {
    "text": "on risk 5 we should also have shared libraries right every every system uses it it's more of an operating system",
    "start": "1049600",
    "end": "1055000"
  },
  {
    "text": "thing than it is a microarchitecture thing but what we found out is that basically flush and reload does not work",
    "start": "1055000",
    "end": "1060720"
  },
  {
    "text": "anymore and then we're going to going to find out why that is so typically flush and reload is used to spy on control",
    "start": "1060720",
    "end": "1067600"
  },
  {
    "text": "floow so you have a victim that executes a branch um that is secret dependent and",
    "start": "1067600",
    "end": "1073120"
  },
  {
    "text": "you want to infer the direction of the secret dependent Branch so you basically see which of the branches is cached and",
    "start": "1073120",
    "end": "1080360"
  },
  {
    "text": "um then you find out which branch was basically executed by monitoring whether it was cached or not and this requires",
    "start": "1080360",
    "end": "1087400"
  },
  {
    "text": "shared caches for data and instructions because when you perform this load as Daniel Illustrated before um this load",
    "start": "1087400",
    "end": "1094799"
  },
  {
    "text": "basically hits both the data and the instruction cache and on risk at least on the designs that we've analyzed um we",
    "start": "1094799",
    "end": "1101840"
  },
  {
    "text": "have split data and instruction caches so the there's no shared element between data and instruction which intu L sounds",
    "start": "1101840",
    "end": "1109159"
  },
  {
    "text": "very good for security right you don't want to share resources overly that you don't need to share and this means that",
    "start": "1109159",
    "end": "1116000"
  },
  {
    "text": "this cach design at least for aexs that's by on control flow uh mitigates flush and reload but but wait there for",
    "start": "1116000",
    "end": "1122880"
  },
  {
    "text": "a second like okay that that's cool and all so flush and reload is kind of mitigated but let's not stop there like",
    "start": "1122880",
    "end": "1130400"
  },
  {
    "text": "negative results are okay positive results are way better and I'm really convinced that we can just do a short",
    "start": "1130400",
    "end": "1136400"
  },
  {
    "text": "tweak there and then everything will work again and we called our nech flush and fault because it's a similar",
    "start": "1136400",
    "end": "1143240"
  },
  {
    "text": "approach but a little bit different so the idea here is let's try to spy on the branch of our victim so",
    "start": "1143240",
    "end": "1151480"
  },
  {
    "text": "depending on a secret bit either A or B is executed here and by executed it also",
    "start": "1151480",
    "end": "1157760"
  },
  {
    "text": "means that the memory of either A or B is fetched into dcbu cache so if those",
    "start": "1157760",
    "end": "1162919"
  },
  {
    "text": "are sh Library functions we can just measure that excess timing but because",
    "start": "1162919",
    "end": "1168559"
  },
  {
    "text": "our data and instruction C are split we cannot do that directly so we tweak our",
    "start": "1168559",
    "end": "1173919"
  },
  {
    "text": "attack a little bit first off we start with the same thing we just flush the memory it turns out on risk 5 that's as",
    "start": "1173919",
    "end": "1180880"
  },
  {
    "text": "easy as it has been on x86 there just an instruction for that it's sounded it's",
    "start": "1180880",
    "end": "1186320"
  },
  {
    "text": "sounding a little bit weird but we just execute that and it works the other thing is instead of just accessing that",
    "start": "1186320",
    "end": "1193159"
  },
  {
    "text": "memory we load uh we jump to that memory but we do not jump to a dire corly we",
    "start": "1193159",
    "end": "1199120"
  },
  {
    "text": "just jumped there misaligned so if you ever played around with r chains for example if you jump",
    "start": "1199120",
    "end": "1205799"
  },
  {
    "text": "somewhere misaligned chances are quite high that you crash and we do exactly that we just jump there and hope for a",
    "start": "1205799",
    "end": "1213360"
  },
  {
    "text": "crash and then we just handle that fault so that our tea program does not abort",
    "start": "1213360",
    "end": "1219039"
  },
  {
    "text": "but the trick now is for executing that code and for the CPU to figuring out",
    "start": "1219039",
    "end": "1226120"
  },
  {
    "text": "that it should actually crash it needs to that code either from DRM or the CPU cache so if you now take a look at the",
    "start": "1226120",
    "end": "1233480"
  },
  {
    "text": "timing it took us to actually crash we can still see whether the memory was",
    "start": "1233480",
    "end": "1239720"
  },
  {
    "text": "cached or not and with that simple variation we can again Mount Cash",
    "start": "1239720",
    "end": "1245240"
  },
  {
    "text": "attacks on risk five well that's cool it sounded like this split cach would Pro",
    "start": "1245240",
    "end": "1251720"
  },
  {
    "text": "protect us here but I mean in the end uh we see that with a little bit of creativity an attacker can still buy",
    "start": "1251720",
    "end": "1258280"
  },
  {
    "text": "pass something like this and this is in no way uh security mitigation um because it only prevents",
    "start": "1258280",
    "end": "1265159"
  },
  {
    "text": "well-known cash attacks that rely basically on this load being shared in the cache um and does not prevent an",
    "start": "1265159",
    "end": "1272360"
  },
  {
    "text": "attacker that tries to perform more sophisticated attack so flush and reload",
    "start": "1272360",
    "end": "1277880"
  },
  {
    "text": "we basically fixed um but if we adapt our attacks to for example flush and",
    "start": "1277880",
    "end": "1283159"
  },
  {
    "text": "fault where we do not need this load but rather execute Direct ly um and get the",
    "start": "1283159",
    "end": "1289919"
  },
  {
    "text": "timing there um we can still Mount attacks and also on the other side while",
    "start": "1289919",
    "end": "1295039"
  },
  {
    "text": "we often want to recover control flow there's also attack that work with data accesses only so you for example want to",
    "start": "1295039",
    "end": "1302960"
  },
  {
    "text": "look at a secret um at the excess pattern that is secret dependent in a library that does a with optimizations",
    "start": "1302960",
    "end": "1310159"
  },
  {
    "text": "and so these attacks are also still possible okay but in the beginning you",
    "start": "1310159",
    "end": "1315200"
  },
  {
    "text": "mentioned way more attacks like cash attacks okay that work but what about all these other Texs that we saw in the",
    "start": "1315200",
    "end": "1321559"
  },
  {
    "text": "beginning yeah well let's just step through how the CPU works we basically had the fetch part now and now we're",
    "start": "1321559",
    "end": "1328200"
  },
  {
    "text": "looking at the part where we actually Target the execution and this execution uh relates to a concept in CPUs that is",
    "start": "1328200",
    "end": "1334679"
  },
  {
    "text": "called a performance counter and the performance counter is basically a tool that we build into our CPUs because CPUs",
    "start": "1334679",
    "end": "1341360"
  },
  {
    "text": "become very very complex and it's very very hard to reliably Benchmark CPUs so",
    "start": "1341360",
    "end": "1347080"
  },
  {
    "text": "what we've done in recent years is we um increased the number of performance",
    "start": "1347080",
    "end": "1352320"
  },
  {
    "text": "counters that ease benchmarking and really provide insight into the microarchitecture so you're basically",
    "start": "1352320",
    "end": "1358480"
  },
  {
    "text": "allowed to look a little bit into the actual implementation details of your processor uh by using these performance",
    "start": "1358480",
    "end": "1365559"
  },
  {
    "text": "counters what can you see there well for example we can see such events as for example the cach misses so we can see a",
    "start": "1365559",
    "end": "1372279"
  },
  {
    "text": "lot of uh cash activity there and you might already know how that relates to a",
    "start": "1372279",
    "end": "1377440"
  },
  {
    "text": "tax BAS basically because we've talked about cash attacks you also see instructions that are executed or",
    "start": "1377440",
    "end": "1383520"
  },
  {
    "text": "instructions that retire and you also can monitor stuff like the CPU frequency",
    "start": "1383520",
    "end": "1389320"
  },
  {
    "text": "which you might again remember from the Collide and Power Talk where this was basically used to get an unprivileged uh",
    "start": "1389320",
    "end": "1396360"
  },
  {
    "text": "interface uh into the the power consumption of the CPU like okay but that that sounds quite nice like",
    "start": "1396360",
    "end": "1402360"
  },
  {
    "text": "benchmarking is cool makes our code run faster so where's the problem well so",
    "start": "1402360",
    "end": "1407559"
  },
  {
    "text": "perform counters can themselves enable a text because if you think about it we",
    "start": "1407559",
    "end": "1413000"
  },
  {
    "text": "basically get an extra insight into what the CPU is doing that we didn't get before and if these performance counters",
    "start": "1413000",
    "end": "1420400"
  },
  {
    "text": "are shared then by definition they're also accessible to an attacker running on the same system think for example of",
    "start": "1420400",
    "end": "1427240"
  },
  {
    "text": "a scenario where you're running in the cloud and sharing one CPU or just a system that is shared between multiple",
    "start": "1427240",
    "end": "1433200"
  },
  {
    "text": "users so for example if we go back to our example of uh um inferring control",
    "start": "1433200",
    "end": "1439080"
  },
  {
    "text": "flow we have a branch here on the side and this branch on the side basically um",
    "start": "1439080",
    "end": "1444120"
  },
  {
    "text": "depends on a secret and we would like to know as the attacker what is the secret and to do that we can look at the",
    "start": "1444120",
    "end": "1450440"
  },
  {
    "text": "performance counters and it turns out that some processors for example Implement a branch taken event that just",
    "start": "1450440",
    "end": "1456120"
  },
  {
    "text": "tells you whether the most recent Branch was taken or was not taken and this of",
    "start": "1456120",
    "end": "1461720"
  },
  {
    "text": "course very trivially um gives you the the secret there because you know whether the secret then is one or zero",
    "start": "1461720",
    "end": "1468640"
  },
  {
    "text": "right and what is the fix for example in a cloud environment or a shared environment well the fix is just to make",
    "start": "1468640",
    "end": "1475039"
  },
  {
    "text": "the interface itself privileged so don't give the attacker access to the performance counters prevent it by uh",
    "start": "1475039",
    "end": "1482520"
  },
  {
    "text": "putting the interface behind the wall of privilege okay so I'm starting to see a pattern here like first we had timing",
    "start": "1482520",
    "end": "1489640"
  },
  {
    "text": "for CPU caches now we have debug interfaces or benchmarking interfaces so similar pattern so again let's take a",
    "start": "1489640",
    "end": "1496799"
  },
  {
    "text": "look what's happening on risk 5 and once we took a look here it was actually kind of interesting what we found it turns",
    "start": "1496799",
    "end": "1503960"
  },
  {
    "text": "out if you just read the manual or the the standard to be more precise some performance counters are just",
    "start": "1503960",
    "end": "1510679"
  },
  {
    "text": "unprivileged and not by this or not by some implementation choices but it's dictated by the standard and we think",
    "start": "1510679",
    "end": "1518840"
  },
  {
    "text": "that's that's a really surprising thing because we know that that's a security thing and you can abuse that for attacks",
    "start": "1518840",
    "end": "1526320"
  },
  {
    "text": "and now a new standard comes along get standardized and it's supposed to be",
    "start": "1526320",
    "end": "1531960"
  },
  {
    "text": "unprivileged it's not entirely hopeless so some attack some events are still",
    "start": "1531960",
    "end": "1537679"
  },
  {
    "text": "privileged and only a few unprivileged events exists like the attack on the previous slide using Branch taking",
    "start": "1537679",
    "end": "1543960"
  },
  {
    "text": "events that does not work because they are privileged but there are some leftovers dictated by this standard and",
    "start": "1543960",
    "end": "1550840"
  },
  {
    "text": "those two are the number of CPU Cycles elapsed and the numbers of instructions",
    "start": "1550840",
    "end": "1556000"
  },
  {
    "text": "that retire so that finish execution and if we have those two performance couns it may not sound like",
    "start": "1556000",
    "end": "1563240"
  },
  {
    "text": "too much but it again gives us a few Primitives that we can abuse to gain",
    "start": "1563240",
    "end": "1568760"
  },
  {
    "text": "interesting information Daniel that sounds like a very limited primitive is there even an attack that we can do with",
    "start": "1568760",
    "end": "1574440"
  },
  {
    "text": "that of course and to attack something we again have to understand what do we attack and this time we want to",
    "start": "1574440",
    "end": "1581640"
  },
  {
    "text": "circumvent a security mitigation called kslr kernel address space layout randomization the idea is if you have",
    "start": "1581640",
    "end": "1589120"
  },
  {
    "text": "memory corruption exploits like kernel exploits to gain privilege escalation well then typically you require very",
    "start": "1589120",
    "end": "1595679"
  },
  {
    "text": "precise knowledge of all these addresses you really have to know where each function and each instructions is",
    "start": "1595679",
    "end": "1601039"
  },
  {
    "text": "located in the kernel so to defend against that well what can we do we just randomize that",
    "start": "1601039",
    "end": "1607440"
  },
  {
    "text": "location we just take the kernel and move it somewhere else and more precisely the Linux kernel does that on",
    "start": "1607440",
    "end": "1614440"
  },
  {
    "text": "every boot so maybe we can just break this should work I guess let's find out",
    "start": "1614440",
    "end": "1621679"
  },
  {
    "text": "right let's get to our second live demo um okay and so the idea here is once you",
    "start": "1621679",
    "end": "1629760"
  },
  {
    "text": "have such an interface again and you can see debug mechanisms then you can also",
    "start": "1629760",
    "end": "1635760"
  },
  {
    "text": "just time or then you can basically just read out the number of retired instructions if you just do that and try",
    "start": "1635760",
    "end": "1641440"
  },
  {
    "text": "to access all locations where the kernel can recite then at some point you notice",
    "start": "1641440",
    "end": "1646480"
  },
  {
    "text": "something strange because that that's a peak we actually",
    "start": "1646480",
    "end": "1651760"
  },
  {
    "text": "see a Peak at one location and Lookers where's that that Peak actually coming from well so this relates very closely",
    "start": "1651760",
    "end": "1658840"
  },
  {
    "text": "to how the CPU works with memory and how the address translation in the CPU works",
    "start": "1658840",
    "end": "1663880"
  },
  {
    "text": "so if we have um an address that needs to be translated in the CPU we need to do a page table walk and of course we",
    "start": "1663880",
    "end": "1670880"
  },
  {
    "text": "cannot access kernel addresses right that would be security violation because we shouldn't access the memory of the",
    "start": "1670880",
    "end": "1676399"
  },
  {
    "text": "kernel uh um so we have to abort there at some point but it turns out the CPU",
    "start": "1676399",
    "end": "1681960"
  },
  {
    "text": "can abort the page table work much quicker if no page at all is mapped then",
    "start": "1681960",
    "end": "1687120"
  },
  {
    "text": "if it has to check basically whether there's an access violation because we're accessing something in the kernel",
    "start": "1687120",
    "end": "1692279"
  },
  {
    "text": "and this is this timing difference that we see here so first um there's nothing mapped before the ker so the time is",
    "start": "1692279",
    "end": "1698480"
  },
  {
    "text": "basically very quick because we can directly the page table walk and then as soon as we hit basically the",
    "start": "1698480",
    "end": "1704760"
  },
  {
    "text": "first kernel offset um we see that CPU has to check whether we allowed to",
    "start": "1704760",
    "end": "1709799"
  },
  {
    "text": "access and it sees well there's a page mapped but in the end I can't access that page because the page belongs to",
    "start": "1709799",
    "end": "1716320"
  },
  {
    "text": "the kernel okay that that makes sense so as an attacker basically then all I need to",
    "start": "1716320",
    "end": "1722320"
  },
  {
    "text": "do is just take a look at this graph just take the memory address and then I directly know where this where our Linux",
    "start": "1722320",
    "end": "1729080"
  },
  {
    "text": "kernel starts and I can just continue with my normal memory corruption exploit so it's nice yeah that's nice and so",
    "start": "1729080",
    "end": "1735200"
  },
  {
    "text": "what did we take away from this right so risk 5 course have unprivileged performance counters and um this makes",
    "start": "1735200",
    "end": "1743679"
  },
  {
    "text": "performance counter attacks possible again so we saw casear break there's potentially more you can do you can for",
    "start": "1743679",
    "end": "1749720"
  },
  {
    "text": "example monitor activity in the kernel space with the user space counters um",
    "start": "1749720",
    "end": "1755720"
  },
  {
    "text": "and in the end it just shows again that uh there's an additional attack surface and this attack surface potentially gets",
    "start": "1755720",
    "end": "1762799"
  },
  {
    "text": "bigger when we add more performance counters or enable them for unprivileged users",
    "start": "1762799",
    "end": "1768000"
  },
  {
    "text": "okay so basically cash attacks they still work little bit of tricking around but you get them to work same thing goes",
    "start": "1768000",
    "end": "1775200"
  },
  {
    "text": "here for performance counters that's even weirder because the standard dictates unprivileged access there but",
    "start": "1775200",
    "end": "1781240"
  },
  {
    "text": "in the beginning we mentioned even stronger attacks like things like Spectre for example so let's take a look",
    "start": "1781240",
    "end": "1786679"
  },
  {
    "text": "at what's up with Spectre does Spectre still work is that still a thing on risk five hardware and to understand Spectre",
    "start": "1786679",
    "end": "1794519"
  },
  {
    "text": "and to reason about that we first have to understand branch prediction so Branch prediction is done by the branch",
    "start": "1794519",
    "end": "1800240"
  },
  {
    "text": "prediction unit and short the BPU and the thing is if you execute code",
    "start": "1800240",
    "end": "1805640"
  },
  {
    "text": "branches are very expensive because they impact your execution speed and if you take a look at the branch on the right",
    "start": "1805640",
    "end": "1811880"
  },
  {
    "text": "hand side and think about that a little while then you're also trying to figure",
    "start": "1811880",
    "end": "1817360"
  },
  {
    "text": "out where it's coming from you you may see a pattern here the problem is that the CPU tries to pipeline all",
    "start": "1817360",
    "end": "1824000"
  },
  {
    "text": "instruction so during the execution of instruction a it already tries to execute instruction B but once you",
    "start": "1824000",
    "end": "1830960"
  },
  {
    "text": "encounter a branch that's hard because we do not know uh we do not not know",
    "start": "1830960",
    "end": "1837200"
  },
  {
    "text": "where to continue next is it a or is it B no idea we first have to evaluate the",
    "start": "1837200",
    "end": "1843320"
  },
  {
    "text": "condition so the CPU has to wait for such branches and that's slow we are",
    "start": "1843320",
    "end": "1850200"
  },
  {
    "text": "stalling our CPU and our entire pipeline that takes a lot of time well Daniel so",
    "start": "1850200",
    "end": "1856760"
  },
  {
    "text": "why why do we even wait can we not optimize that we want our CPUs to be fast right yes and it turns out we can",
    "start": "1856760",
    "end": "1862720"
  },
  {
    "text": "and that's the purpose of the branch prediction unit so the idea is okay branches may maybe like think think of",
    "start": "1862720",
    "end": "1870960"
  },
  {
    "text": "common branches like error conditions they're probably always false but only",
    "start": "1870960",
    "end": "1876240"
  },
  {
    "text": "one time they're true so if you think about it for a little while you'll notice to see similar patterns like",
    "start": "1876240",
    "end": "1882760"
  },
  {
    "text": "branches they don't change their behavior every time they execute it typically they stay similar so we can",
    "start": "1882760",
    "end": "1889519"
  },
  {
    "text": "just take a look at the history of a branch so CBU vendors actually do that and the branch prediction unit just",
    "start": "1889519",
    "end": "1895720"
  },
  {
    "text": "keeps track of the history of this Branch when it was executed the last few",
    "start": "1895720",
    "end": "1900880"
  },
  {
    "text": "times and then based on that information it just predicts which branch direction is taken then it can just prefetch that",
    "start": "1900880",
    "end": "1907360"
  },
  {
    "text": "memory into dcbu cache so it's executed or it's prefetched at least way farther",
    "start": "1907360",
    "end": "1913639"
  },
  {
    "text": "faster that's no execution yet but it's at least Le faster well that's a really",
    "start": "1913639",
    "end": "1919120"
  },
  {
    "text": "cool trick and that probably optimizes our performance of our CPU in a very big way but I mean we still having to wait",
    "start": "1919120",
    "end": "1926519"
  },
  {
    "text": "at the branch um yes good point and the thing",
    "start": "1926519",
    "end": "1931799"
  },
  {
    "text": "there is what is still missing is so-called speculative execution so why do we stop at",
    "start": "1931799",
    "end": "1938679"
  },
  {
    "text": "predicting just the branch outcome and just prefetching that memory when we can even execute that memory but doing that",
    "start": "1938679",
    "end": "1945600"
  },
  {
    "text": "is a little bit more complicated because you have to differentiate two cases in the first case well you have a correct",
    "start": "1945600",
    "end": "1952399"
  },
  {
    "text": "prediction that's that's easy you just gained a lot of performance and it's one of the key features why CPUs nowadays",
    "start": "1952399",
    "end": "1958480"
  },
  {
    "text": "are that fast but the problem is what happens if you predict falsely and then",
    "start": "1958480",
    "end": "1963559"
  },
  {
    "text": "a false prediction you have to roll back the inner state of the CPU to the actual",
    "start": "1963559",
    "end": "1969799"
  },
  {
    "text": "branch and then take on the correct Branch so that's that's a little weird and some side effects occur there",
    "start": "1969799",
    "end": "1977360"
  },
  {
    "text": "nothing that you can directly observe but with a little bit of insights in the CPU things can go wrong there well",
    "start": "1977360",
    "end": "1984880"
  },
  {
    "text": "Spectre that speculative execution that sounds really close to that Spectre attack that you talked about earlier",
    "start": "1984880",
    "end": "1990200"
  },
  {
    "text": "right yes ex exactly and that's also where name Spectre comes from but the thing there is um talking about Spectre",
    "start": "1990200",
    "end": "1996840"
  },
  {
    "text": "on risk five well Spectre requires speculative execution because it's abusing those false predictions but all",
    "start": "1996840",
    "end": "2004760"
  },
  {
    "text": "tested risk 5 CPUs that were in our lab once we did those experiments they do",
    "start": "2004760",
    "end": "2010840"
  },
  {
    "text": "not have speculative execution yet so that does not really work maybe on",
    "start": "2010840",
    "end": "2016360"
  },
  {
    "text": "future CPUs time will tell but but we still have this speculative prefetching",
    "start": "2016360",
    "end": "2022639"
  },
  {
    "text": "so we still basically have this thing where a branch is predicted and prefetched and and maybe that's",
    "start": "2022639",
    "end": "2029039"
  },
  {
    "text": "exploitable as an attacker Gadget and it turns out it is so using this",
    "start": "2029039",
    "end": "2034320"
  },
  {
    "text": "prefetching um you can basically build a site Channel on the instruction cache and this side channel is really nice",
    "start": "2034320",
    "end": "2040919"
  },
  {
    "text": "because we don't require shared memory which um limits us to attacking shared libraries for example only and as a",
    "start": "2040919",
    "end": "2047320"
  },
  {
    "text": "developer you could just say well I don't use shared libraries I only use static binaries and it's basically fixed",
    "start": "2047320",
    "end": "2053398"
  },
  {
    "text": "um and it also has the cach line granularity which is basically the best Precision that you can get for such a",
    "start": "2053399",
    "end": "2059358"
  },
  {
    "text": "cash site gener well and how does that work how can we basically go from speculative prefetching uh to a site",
    "start": "2059359",
    "end": "2067000"
  },
  {
    "text": "channel so what we have is again this victim on the right side that we want to um where we basically want to infer",
    "start": "2067000",
    "end": "2073398"
  },
  {
    "text": "whether a or b was executed and what we do again is we first flush the entire",
    "start": "2073399",
    "end": "2078919"
  },
  {
    "text": "instruction cache with def fense instruction here and after we did that",
    "start": "2078919",
    "end": "2084200"
  },
  {
    "text": "we basically as an attacker Mist Trin a prefetch gadget so we basically make the prefetcher our friend um and let it",
    "start": "2084200",
    "end": "2091760"
  },
  {
    "text": "prefetch whatever we want and we can prefetch almost arbitrary memory with that and in this case we decide to",
    "start": "2091760",
    "end": "2098839"
  },
  {
    "text": "prefetch the beef branch and now imagine that the A and the beef Branch contain exactly the same function um so you",
    "start": "2098839",
    "end": "2105760"
  },
  {
    "text": "couldn't distinguish them by timing normally but I think you're seeing where this going um now one of the branches is",
    "start": "2105760",
    "end": "2111720"
  },
  {
    "text": "cached and one of the branches is not cached and as soon as you execute the victim you're going to get a different",
    "start": "2111720",
    "end": "2117079"
  },
  {
    "text": "time independent of whether the code in these branches is exactly the same so what we've built now is basically a",
    "start": "2117079",
    "end": "2122960"
  },
  {
    "text": "gadget that can infer control flow um without relying on shared memory that we",
    "start": "2122960",
    "end": "2128079"
  },
  {
    "text": "need to control and exploiting this speculative prefetching so we relied on",
    "start": "2128079",
    "end": "2133760"
  },
  {
    "text": "this speculative prefetching okay but uh Lucas one thing that crossed my mind there like two weeks ago or so we we got",
    "start": "2133760",
    "end": "2142240"
  },
  {
    "text": "this new risk five machine in our LA right right and we we said like Spectre that's not a thing because we have no",
    "start": "2142240",
    "end": "2148520"
  },
  {
    "text": "speculative execution there but doesn't this new chip it has speculative execution right I guess we we should try",
    "start": "2148520",
    "end": "2154599"
  },
  {
    "text": "right we should try so what do we what we did is um we we got this new CPU we",
    "start": "2154599",
    "end": "2160160"
  },
  {
    "text": "were quite unhappy that Spectre doesn't work on these CPUs so uh it was quite",
    "start": "2160160",
    "end": "2166119"
  },
  {
    "text": "interesting um and then we found this new CPU and we thought well this CPU um",
    "start": "2166119",
    "end": "2173040"
  },
  {
    "text": "supports all the requirements for Spectre so maybe Spectre should work on that and actually I think yesterday",
    "start": "2173040",
    "end": "2178760"
  },
  {
    "text": "night uh we we implemented the Spectre exploit um which we can now also show in",
    "start": "2178760",
    "end": "2184520"
  },
  {
    "text": "a live demo so it turns out once you have those more complex or more optimized risk 5",
    "start": "2184520",
    "end": "2192240"
  },
  {
    "text": "CPUs well similar things happen again like you again have speculative execution and you can again leak strings",
    "start": "2192240",
    "end": "2199760"
  },
  {
    "text": "from the memory so in this case we leak the string Spector on risk 5 Hardware at plat Europe",
    "start": "2199760",
    "end": "2206040"
  },
  {
    "text": "2023 from inaccessible memory and to the best of our knowledge that's actually",
    "start": "2206040",
    "end": "2211640"
  },
  {
    "text": "the first demonstration of respect that attack on cots Hardware",
    "start": "2211640",
    "end": "2217240"
  },
  {
    "text": "so it was a little bit unsure whether it will work turns out it will just work and in the end what we have now",
    "start": "2217240",
    "end": "2223800"
  },
  {
    "text": "different to the gadgets we showed before is a is a gadget that allows you to read almost arbitrary memory given",
    "start": "2223800",
    "end": "2230119"
  },
  {
    "text": "given the right um conditions so this is different as it's basically the first transient execution attack on risk five",
    "start": "2230119",
    "end": "2236560"
  },
  {
    "text": "Hardware CPU that allows you to leak much more than a side Channel",
    "start": "2236560",
    "end": "2241680"
  },
  {
    "text": "code okay and so the lesson that we take from that is the buxs that's possible and The Limited",
    "start": "2245040",
    "end": "2252720"
  },
  {
    "text": "speculation on some of those machines mitigate some well-known attacks for example Spectre but the thing is even",
    "start": "2252720",
    "end": "2259560"
  },
  {
    "text": "with the limited speculation you can do a lot of powerful things but once you have more optimized CPUs like the one",
    "start": "2259560",
    "end": "2266640"
  },
  {
    "text": "that arrived in our lab two weeks ago the problems come again and we again have Spectre on risk 5 so by that we",
    "start": "2266640",
    "end": "2275560"
  },
  {
    "text": "want to conclude include for today and keep a little bit track of what we've seen on those machines so for once let's",
    "start": "2275560",
    "end": "2283640"
  },
  {
    "text": "summarize that again and we are under the impression that open source",
    "start": "2283640",
    "end": "2288880"
  },
  {
    "text": "architectures are great yes they have some limits there but the thing is for",
    "start": "2288880",
    "end": "2294880"
  },
  {
    "text": "back hounting open source is great because you can actually take a look at the RTL level and actually search for",
    "start": "2294880",
    "end": "2301359"
  },
  {
    "text": "buck there on the other hand if you plan to mitigate attacks you can just impl M",
    "start": "2301359",
    "end": "2306960"
  },
  {
    "text": "that so if you have a hardware mitigation for an Intel or an AMD or an arm CPU implementing that is quite hard",
    "start": "2306960",
    "end": "2313839"
  },
  {
    "text": "for risk 5 go ahead just implement it but what we also saw and that's an",
    "start": "2313839",
    "end": "2321680"
  },
  {
    "text": "unfortunate thing security wise is once you redesign a microarchitecture from",
    "start": "2321680",
    "end": "2326880"
  },
  {
    "text": "scratch it may sound great at first but in the end if you really want to optimize and want to become a competitor",
    "start": "2326880",
    "end": "2333440"
  },
  {
    "text": "for most recent CPUs and for the big companies you will end up with these same vulnerabilities as other",
    "start": "2333440",
    "end": "2339319"
  },
  {
    "text": "architectures have for example cash attacks that's the thing prediction based attacks and even transient",
    "start": "2339319",
    "end": "2346200"
  },
  {
    "text": "execution attacks like Spectre and the thing is if you're just",
    "start": "2346200",
    "end": "2352480"
  },
  {
    "text": "redesigning something from scratch it's also easy to make a mistake or at least some weird decision so we got this this",
    "start": "2352480",
    "end": "2359359"
  },
  {
    "text": "one surprising design decision that unprivileged performance counters are a thing now again and that's kind of weird",
    "start": "2359359",
    "end": "2367560"
  },
  {
    "text": "and if you actually want to play around with that code and maybe you also want to buy your own core and want to test",
    "start": "2367560",
    "end": "2373040"
  },
  {
    "text": "those experiments or also you want to just um read the code and how to mount such attacks we encourage you to check",
    "start": "2373040",
    "end": "2381359"
  },
  {
    "text": "out our GitHub repository in which we open source decode for all our experiments so what are the key",
    "start": "2381359",
    "end": "2387400"
  },
  {
    "text": "takeaways that that you should really take away from this talk so first of all we've seen risk five and we've seen that",
    "start": "2387400",
    "end": "2394000"
  },
  {
    "text": "it has a lot of potential so there's a lot lot of adoption already there's great projects on it out there um but on",
    "start": "2394000",
    "end": "2400359"
  },
  {
    "text": "the other side we've seen that redesigning something and making it open source that does not fix all of the",
    "start": "2400359",
    "end": "2406040"
  },
  {
    "text": "problems magically so there's really um a lot of requirements that go above",
    "start": "2406040",
    "end": "2411760"
  },
  {
    "text": "basically making the stuff open source to to get a secure chip and if you build",
    "start": "2411760",
    "end": "2417240"
  },
  {
    "text": "more complex processors then you also end up with more vulnerabilities as you've seen today um and this really",
    "start": "2417240",
    "end": "2424640"
  },
  {
    "text": "means in the end that security research on on risk 5 itself is really essential",
    "start": "2424640",
    "end": "2429720"
  },
  {
    "text": "and and there really needs to be a lot of investment in security research to to basically make sure that we have secure",
    "start": "2429720",
    "end": "2436400"
  },
  {
    "text": "chips in the future and by that we end our talk and we are really happy to take on your questions",
    "start": "2436400",
    "end": "2444070"
  },
  {
    "text": "[Applause]",
    "start": "2444070",
    "end": "2450829"
  },
  {
    "text": "thanks thank you for your talk I just have a question regarding um did you try",
    "start": "2450960",
    "end": "2456400"
  },
  {
    "text": "your attacks on proprietary RTL using risk 5 so for example nvdia GPU contains",
    "start": "2456400",
    "end": "2462319"
  },
  {
    "text": "a risk 5 Core for doing a lot of stuff uh same for uh hard drives they have",
    "start": "2462319",
    "end": "2467599"
  },
  {
    "text": "also RIS five core for fumor uh and more generally like um speculation attacks s",
    "start": "2467599",
    "end": "2474920"
  },
  {
    "text": "attacks are very interesting in the context of cloud cloud computing uh ipis hypervisor extension for is5 is not yet",
    "start": "2474920",
    "end": "2482079"
  },
  {
    "text": "out even though two days ago on the Linux Canal mailing list there is a dtb for a new CPU containing a supervisor",
    "start": "2482079",
    "end": "2488640"
  },
  {
    "text": "extension announced um what do you think about the ramification of uh those attacks so um I",
    "start": "2488640",
    "end": "2495760"
  },
  {
    "text": "think so in general in our work we focused on um on CPUs that run a commodity system so not on hard drive",
    "start": "2495760",
    "end": "2502000"
  },
  {
    "text": "controllers but more on complex CPUs and they are just now coming out and while some of the features for example the",
    "start": "2502000",
    "end": "2508200"
  },
  {
    "text": "hypervisor extension may not be implemented yet I think it's a very good idea to start considering security very",
    "start": "2508200",
    "end": "2514480"
  },
  {
    "text": "early in the design process so you should not um first build the hypervisor",
    "start": "2514480",
    "end": "2520240"
  },
  {
    "text": "extension and then think about microarchitecture detch models instead I think it's a really good idea to First",
    "start": "2520240",
    "end": "2525720"
  },
  {
    "text": "Look at the attch model and then think how can we maneuver around that with basically designing our",
    "start": "2525720",
    "end": "2533200"
  },
  {
    "text": "extensions okay um so you said that um flush and reload doesn't work because the instruction cach and data caches are",
    "start": "2534640",
    "end": "2541400"
  },
  {
    "text": "separated um does it also apply for the um tlb for the translation look side",
    "start": "2541400",
    "end": "2546480"
  },
  {
    "text": "buffer or are they also not shared so after all it depends uh it depends very",
    "start": "2546480",
    "end": "2552800"
  },
  {
    "text": "much on the um on the chip that you're using so also this is this is a",
    "start": "2552800",
    "end": "2558000"
  },
  {
    "text": "microarchitectural detail so it's implemented on all the chips um that that we've seen now but it doesn't mean",
    "start": "2558000",
    "end": "2564040"
  },
  {
    "text": "that uh a new chip that is coming out needs to have these split caches this is by no means a requirement of the risk",
    "start": "2564040",
    "end": "2570200"
  },
  {
    "text": "standard and for the tlb I imagine it to be the same some of them I think some of them have now shared second level TL TBS",
    "start": "2570200",
    "end": "2576800"
  },
  {
    "text": "uh some of them don't so so you didn't actually test this test this all the CPUs you have on hand um I think we did",
    "start": "2576800",
    "end": "2582920"
  },
  {
    "text": "TB attacks on we did TB attacks on the CPUs uh I I would come back to you offline and we can discuss uh in more",
    "start": "2582920",
    "end": "2589839"
  },
  {
    "text": "detail which CPU doesn't and does share the TBB I don't recall that right now",
    "start": "2589839",
    "end": "2594880"
  },
  {
    "text": "thank you hi thank you very much um I guess",
    "start": "2594880",
    "end": "2600280"
  },
  {
    "text": "what I wanted to ask is most of these come down to the laws of physics kind of semiconductors and how they operate and",
    "start": "2600280",
    "end": "2606800"
  },
  {
    "text": "how current flows where do you do you have any thoughts on how kind of changes",
    "start": "2606800",
    "end": "2613800"
  },
  {
    "text": "in kind of semiconductor use or different substrates or different kind of how we measure uh these",
    "start": "2613800",
    "end": "2622079"
  },
  {
    "text": "characteristics of semic um of these microprocessors might change to improve",
    "start": "2622079",
    "end": "2627920"
  },
  {
    "text": "security um so one thing I'm thinking when uh going into this direction is",
    "start": "2627920",
    "end": "2634200"
  },
  {
    "text": "certain attacks actually require are such properties like rammer for example where you abuse the characteristics of",
    "start": "2634200",
    "end": "2641880"
  },
  {
    "text": "DM chips so that's a very interesting attack scenario there the thing there is",
    "start": "2641880",
    "end": "2647000"
  },
  {
    "text": "that's a little bit in the the hand of the D vendors but for a lot of those attacks you actually don't have to dive",
    "start": "2647000",
    "end": "2653400"
  },
  {
    "text": "you have to to Deep dive into how CPUs are implemented but",
    "start": "2653400",
    "end": "2659040"
  },
  {
    "text": "there like a lot of those attacks are just not relying on the the exact",
    "start": "2659040",
    "end": "2665119"
  },
  {
    "text": "physical properties that you abuse there because like Spectre for example you just abuse how CPUs are I'm saying on a",
    "start": "2665119",
    "end": "2673160"
  },
  {
    "text": "high level because it's a higher level than physical properties are implemented so you can a little bit think of the",
    "start": "2673160",
    "end": "2679440"
  },
  {
    "text": "microarchitecture as just some software project like yes there are also bugs on",
    "start": "2679440",
    "end": "2684680"
  },
  {
    "text": "the on the assembly level and maybe on the compiler level but most of those attacks focus on the the software code",
    "start": "2684680",
    "end": "2692040"
  },
  {
    "text": "that is in there so the actual firmware running on there but those uh Texs definitely exist but uh the research is",
    "start": "2692040",
    "end": "2700319"
  },
  {
    "text": "still Limited in the direction of on how changes to risk five actually changed",
    "start": "2700319",
    "end": "2705480"
  },
  {
    "text": "that so we'll see hi so compared to x86 where you only",
    "start": "2705480",
    "end": "2712319"
  },
  {
    "text": "have a couple lines of CPUs with risk feed maybe we can have many types of different ones do you see that um these",
    "start": "2712319",
    "end": "2720800"
  },
  {
    "text": "microarchitectural attacks will be really reusable on all of these or do you maybe expect that they will only",
    "start": "2720800",
    "end": "2727200"
  },
  {
    "text": "apply to a couple of models I think that's in general a very very double-edged sort the point you're",
    "start": "2727200",
    "end": "2733599"
  },
  {
    "text": "talking about so we can we can basically have great flexibility and I think this is also what many vendors find so",
    "start": "2733599",
    "end": "2740280"
  },
  {
    "text": "attractive in Risk but the the thing is so some of these attacks are going to transfer some of them are going not",
    "start": "2740280",
    "end": "2746520"
  },
  {
    "text": "going to transfer but the thing is what you're going to end up with is you're going to have more small chips that do",
    "start": "2746520",
    "end": "2751800"
  },
  {
    "text": "stuff differently and that in my opinion increases the the potential to basically",
    "start": "2751800",
    "end": "2757160"
  },
  {
    "text": "make an mistake in the implementation with x86 for example we have two big vendors and both of the chips are very",
    "start": "2757160",
    "end": "2763400"
  },
  {
    "text": "well tested if you're a smaller company you probably can't afford to invest so much testing into the chip so it's a",
    "start": "2763400",
    "end": "2770359"
  },
  {
    "text": "it's a very interesting thing uh that is also I think a big chance for for risk 5 to develop because we can have more",
    "start": "2770359",
    "end": "2775880"
  },
  {
    "text": "specialized code but I think on the microarchitecture level it's a going to show in the future whether that's",
    "start": "2775880",
    "end": "2782000"
  },
  {
    "text": "helping or not all right thank you no problem",
    "start": "2782000",
    "end": "2787800"
  },
  {
    "text": "all right if there are no further questions then uh if you want to speak to us offline we're happy to do that um",
    "start": "2788640",
    "end": "2794200"
  },
  {
    "text": "besides that thanks for the interesting [Applause]",
    "start": "2794200",
    "end": "2801880"
  },
  {
    "text": "discussions",
    "start": "2801880",
    "end": "2804880"
  }
]