[
  {
    "text": "foreign",
    "start": "1979",
    "end": "4159"
  },
  {
    "text": "thanks for coming uh my name is Andrew and I work at Microsoft I'm on the msrc",
    "start": "9540",
    "end": "15299"
  },
  {
    "text": "vulnerability mitigations team and let's talk about kernel exploitation",
    "start": "15299",
    "end": "22080"
  },
  {
    "text": "so most of you are probably aware of who msrc are and what we do but my team of",
    "start": "22080",
    "end": "28439"
  },
  {
    "text": "vulnerability mitigations team we handle all of the security vulnerabilities that come into Microsoft we are Microsoft",
    "start": "28439",
    "end": "34620"
  },
  {
    "text": "Central Security team we triage the vulnerabilities to work out the severity of these issues and then we work with",
    "start": "34620",
    "end": "40860"
  },
  {
    "text": "the various teams product engineering groups throughout Microsoft to fix those issues they typically then be patched",
    "start": "40860",
    "end": "47879"
  },
  {
    "text": "you know in a patch Tuesday at some time after the initial reporting of vulnerability so I spend roughly 50 of",
    "start": "47879",
    "end": "55920"
  },
  {
    "text": "my time doing this I use the case information to try and find patterns within the vulnerabilities that we see",
    "start": "55920",
    "end": "62399"
  },
  {
    "text": "such that we can develop mitigations to kill potential whole classes of vulnerabilities rather",
    "start": "62399",
    "end": "68939"
  },
  {
    "text": "than dealing with Point fixes across a series of issues and when I'm not doing that we're doing uh well so typically I",
    "start": "68939",
    "end": "77159"
  },
  {
    "text": "do red teaming exercises where we hack infrastructure in Azure and work with the product teams to fix vulnerabilities",
    "start": "77159",
    "end": "83280"
  },
  {
    "text": "proactively in our internal infrastructure and products so I worked on this piece of work with",
    "start": "83280",
    "end": "88320"
  },
  {
    "text": "row here to unfortunately can't join us today because he's over in the US",
    "start": "88320",
    "end": "94460"
  },
  {
    "text": "so what I want to talk about here really is our handling of some kernel vulnerabilities that we see so we get a",
    "start": "94460",
    "end": "102180"
  },
  {
    "text": "lot of vulnerability submitted to Microsoft now typically the bug which is submitted to us is clear you know we",
    "start": "102180",
    "end": "107220"
  },
  {
    "text": "double click a POC we get a blue screen you know we can root cause that and work out what the cause of the crash was but",
    "start": "107220",
    "end": "114119"
  },
  {
    "text": "the exploitability of an issue is not always apparent and this is because we don't require you know researchers and",
    "start": "114119",
    "end": "120960"
  },
  {
    "text": "finders that we work with to give us a full exploit because you know we want to patch the operating system we want to",
    "start": "120960",
    "end": "126540"
  },
  {
    "text": "fix vulnerabilities proactively and sometimes writing an exploit for some of these bugs particularly in kernel can",
    "start": "126540",
    "end": "133200"
  },
  {
    "text": "you know be more time consuming than simply just fixing the vulnerability um and so for this reason some there are",
    "start": "133200",
    "end": "139739"
  },
  {
    "text": "some classes of vulnerability that it can be hard to triage and work out what the real severity of that issue should",
    "start": "139739",
    "end": "145200"
  },
  {
    "text": "be um and and I guess I kind of want to talk here about a couple of outliers so there's so if we have an out of bounds",
    "start": "145200",
    "end": "152220"
  },
  {
    "text": "read in kernel for example where the attacker is not able to retrieve the content of that read",
    "start": "152220",
    "end": "157860"
  },
  {
    "text": "um you know typically we're gonna uh call this a Dos maybe it's an information disclosure if you can probe",
    "start": "157860",
    "end": "163560"
  },
  {
    "text": "the memory address which is read or something to work out whether it's resident whether it's mapped or whether it isn't",
    "start": "163560",
    "end": "169140"
  },
  {
    "text": "um but not all bugs are equal here right there are some out of bounds reads that we see",
    "start": "169140",
    "end": "175739"
  },
  {
    "text": "that that potentially could be more critical than others and there was one specific example that we got uh that",
    "start": "175739",
    "end": "181920"
  },
  {
    "text": "that got us talking so let's cover the example which sort of",
    "start": "181920",
    "end": "187019"
  },
  {
    "text": "led to us you know doing this if you will feasibility research study",
    "start": "187019",
    "end": "192060"
  },
  {
    "text": "um and we'll talk about memory mapped i o so device uh drivers communicate with",
    "start": "192060",
    "end": "198480"
  },
  {
    "text": "Hardware which is attached to a system potentially via mmio we'll talk about whether you know it",
    "start": "198480",
    "end": "204720"
  },
  {
    "text": "might be possible for example to Target mmio ranges with a blind kernel read in order to be able to corrupt device state",
    "start": "204720",
    "end": "211500"
  },
  {
    "text": "or device driver state which runs on top of this and whether the right exploit Primitives which are applicable in that",
    "start": "211500",
    "end": "217739"
  },
  {
    "text": "area I'll cover some kind of reverse engineering over various drivers which",
    "start": "217739",
    "end": "223019"
  },
  {
    "text": "Implement mmio what we need to look for to work out whether a driver is using this or not and some kind of interesting",
    "start": "223019",
    "end": "229860"
  },
  {
    "text": "patterns that we've seen in there",
    "start": "229860",
    "end": "233480"
  },
  {
    "text": "so I'll start with the vulnerability which got us talking about this this was presented at blackout us 2021 after I",
    "start": "235080",
    "end": "242400"
  },
  {
    "text": "started at Microsoft this was one of the first hyper-v cases that I handled so in",
    "start": "242400",
    "end": "248159"
  },
  {
    "text": "this case it was presented by palega norfia at um",
    "start": "248159",
    "end": "253500"
  },
  {
    "text": "sorry palega northier at uh blackout last year but essentially a guest",
    "start": "253500",
    "end": "259380"
  },
  {
    "text": "virtual machine is able to issue a packet which is sent to the host or the",
    "start": "259380",
    "end": "264780"
  },
  {
    "text": "root partition the root partition dereferences an attacker control pointer and it crashes the host so that's a",
    "start": "264780",
    "end": "271199"
  },
  {
    "text": "picture of my of our machine in my office just blue screened with this bug",
    "start": "271199",
    "end": "277500"
  },
  {
    "text": "um now the bugs in VM switch which is the hyper-v virtual network switch so uh",
    "start": "277500",
    "end": "284940"
  },
  {
    "text": "this provides virtual ethernet services to guests which are attached to the machine and Communications happen via",
    "start": "284940",
    "end": "290699"
  },
  {
    "text": "renders over VM bus from a guest to the host in order to reach this code now the crash itself was like I say it's",
    "start": "290699",
    "end": "299160"
  },
  {
    "text": "a dereference for read but the value which we are dereferencing from the packet was used for nothing in this case",
    "start": "299160",
    "end": "304620"
  },
  {
    "text": "apart from logging and so it checks a field within this",
    "start": "304620",
    "end": "310620"
  },
  {
    "text": "structure which is partially attacker controlled we de-reference a value in there if it's not null",
    "start": "310620",
    "end": "316680"
  },
  {
    "text": "um so here's an example of this structure it's kind of unimportant really apart from uh there's this field",
    "start": "316680",
    "end": "322380"
  },
  {
    "text": "here which contains data which comes from a packet of the attacker controls and the code or at least a minimized",
    "start": "322380",
    "end": "329699"
  },
  {
    "text": "version of the code which handles this on the host side takes the data which has been passed in uh casts it to an",
    "start": "329699",
    "end": "336180"
  },
  {
    "text": "example of that structure I've shown we check if that field is null and if it's not we dereference it",
    "start": "336180",
    "end": "343199"
  },
  {
    "text": "and we get a nice 4141 41 plus hex 20 crash now",
    "start": "343199",
    "end": "350400"
  },
  {
    "text": "we we rated this vulnerability um 9.0 CVSs guest to host rce or VM",
    "start": "350400",
    "end": "358620"
  },
  {
    "text": "Escape and the reason for this was because we we can't guarantee that A Primitive like",
    "start": "358620",
    "end": "364500"
  },
  {
    "text": "this is not exploitable um in a case where we could for example point this to any memory region that",
    "start": "364500",
    "end": "370320"
  },
  {
    "text": "exists within the host infrastructure or the host uh can we guarantee that that doesn't lead",
    "start": "370320",
    "end": "376680"
  },
  {
    "text": "to memory corruption because if we could point this to a device mmio range if we",
    "start": "376680",
    "end": "382440"
  },
  {
    "text": "had a device which implemented a kind of quote-unquote interesting Behavior would it be possible to turn this into",
    "start": "382440",
    "end": "389100"
  },
  {
    "text": "something which causes an onward memory corruption with potentially like a right",
    "start": "389100",
    "end": "395699"
  },
  {
    "text": "so let's talk about memory mapped i o so mmio is used or can be thought of as",
    "start": "395699",
    "end": "403380"
  },
  {
    "text": "kind of a message passing mechanism which operates between peripheral devices which are attached to your",
    "start": "403380",
    "end": "409199"
  },
  {
    "text": "machine so your hardware and the device drivers would communicate with those so",
    "start": "409199",
    "end": "414780"
  },
  {
    "text": "we can kind of view the logic at a high level as a state machine and if we were to inject a reed into",
    "start": "414780",
    "end": "421440"
  },
  {
    "text": "that state machine a during operations which were transiting that region of memory",
    "start": "421440",
    "end": "427199"
  },
  {
    "text": "would it be possible to corrupt the device driver which is reading and relying on that memory in",
    "start": "427199",
    "end": "433199"
  },
  {
    "text": "order to cause a more critical memory corruption with our initial read so there was an article which I mean is",
    "start": "433199",
    "end": "440639"
  },
  {
    "text": "six years old now this is discussing the implementation of mmio in the Linux kernel and you know that they highlight",
    "start": "440639",
    "end": "447780"
  },
  {
    "text": "a bunch of issues or questions areas in that code which could be of concern",
    "start": "447780",
    "end": "453419"
  },
  {
    "text": "there's a couple of points I'd like to pull out I suppose one is that the size of a right to an Mio region is important",
    "start": "453419",
    "end": "460580"
  },
  {
    "text": "a device can respond very differently to say a right of a d word than it might to the right of a byte so the size of the",
    "start": "460580",
    "end": "468000"
  },
  {
    "text": "access is is is important the second point is that um",
    "start": "468000",
    "end": "474900"
  },
  {
    "text": "if you considered a device which may be operated like a Serial input buffer",
    "start": "474900",
    "end": "481080"
  },
  {
    "text": "um that would imply for example that if we were reading characters from a queue which existed on Hardware device into",
    "start": "481080",
    "end": "487500"
  },
  {
    "text": "device memory when we read a character it should be removed from the state of the physical Hardware device also",
    "start": "487500",
    "end": "494180"
  },
  {
    "text": "and because this implies State between the two devices I mean you could imagine",
    "start": "494180",
    "end": "499560"
  },
  {
    "text": "a scenario where you have a length prefix buffer for example if you interjected read at the point that the",
    "start": "499560",
    "end": "505500"
  },
  {
    "text": "length was read from the start of a buffer but what then happens if the device which is reading from that relies",
    "start": "505500",
    "end": "511800"
  },
  {
    "text": "upon the subsequent characters uh you know as the length then potentially we've got corruption issues",
    "start": "511800",
    "end": "518700"
  },
  {
    "text": "um so there's been a few bugs in the mmio space discussed um I won't go into the first two in much detail because",
    "start": "518700",
    "end": "524039"
  },
  {
    "text": "they are they're Hardware based and and I want to talk more about software-based attacks here",
    "start": "524039",
    "end": "529740"
  },
  {
    "text": "um the Intel one's interesting because it backs up the point that we made about the size of a read muttering here if you",
    "start": "529740",
    "end": "537360"
  },
  {
    "text": "read data from an MRI region and the size of the read is not the same as or at least as large as the instruction set",
    "start": "537360",
    "end": "544980"
  },
  {
    "text": "architecture size so 64-bit for example then a data can be leaked",
    "start": "544980",
    "end": "551519"
  },
  {
    "text": "um the the last example which was presented at cansec West this year was was particularly impressive they",
    "start": "551519",
    "end": "556800"
  },
  {
    "text": "demonstrated a full VM Escape uh running on a Linux system with Kimu or KVM and",
    "start": "556800",
    "end": "563160"
  },
  {
    "text": "in that scenario they chained together four bugs in order to ex to to break out of the VM one of those bugs was a",
    "start": "563160",
    "end": "570180"
  },
  {
    "text": "recursive and not my own floor this is uh essentially using Mio regions to the",
    "start": "570180",
    "end": "575940"
  },
  {
    "text": "overlap or that you can use to trigger a UF vulnerability for example so it's",
    "start": "575940",
    "end": "582420"
  },
  {
    "text": "kind of sort of demonstrated that uh these bugs can be bad for for kind of",
    "start": "582420",
    "end": "588060"
  },
  {
    "text": "guest to host escapes but their research focuses primarily on using something like coql",
    "start": "588060",
    "end": "594959"
  },
  {
    "text": "to analyze a Linux source code to find vulnerable patterns and use those to find places that we might want to",
    "start": "594959",
    "end": "601140"
  },
  {
    "text": "exploit the issue is on Windows we can't do that right it's closed Source we can't use code ql we need to be able to",
    "start": "601140",
    "end": "608160"
  },
  {
    "text": "find drivers via some other means uh in order to try and work out where the",
    "start": "608160",
    "end": "613860"
  },
  {
    "text": "places are that we might want to be able to build attack Primitives uh and and kind of that's the difference",
    "start": "613860",
    "end": "619740"
  },
  {
    "text": "between what we want to talk about here so how do we find something on a system",
    "start": "619740",
    "end": "625440"
  },
  {
    "text": "which uses mmio um there's a couple of kind of basic",
    "start": "625440",
    "end": "630600"
  },
  {
    "text": "methods which one of the slides are published you'll have links here but I won't go into these because they're not too interesting I'll talk about acpi and",
    "start": "630600",
    "end": "638459"
  },
  {
    "text": "I'll talk about hooking the kernel in order to do this information or to dump this in a debugger",
    "start": "638459",
    "end": "645360"
  },
  {
    "text": "um the first the first point is that mmio ranges as are mapped are physical",
    "start": "645360",
    "end": "650519"
  },
  {
    "text": "address ranges they're not virtual address ranges so if we were going from user mode to Kernel mode and trying to",
    "start": "650519",
    "end": "656339"
  },
  {
    "text": "use an attack primitive like this this implies that we would also need a kslr bypass we need to know the physical",
    "start": "656339",
    "end": "662760"
  },
  {
    "text": "address range where that resided in kernel memory",
    "start": "662760",
    "end": "668519"
  },
  {
    "text": "um so what is a CPI um the advanced configuration and power",
    "start": "668519",
    "end": "674579"
  },
  {
    "text": "interface this controls kind of at a low level operations which include things like system power hibernation States",
    "start": "674579",
    "end": "681180"
  },
  {
    "text": "sleep States i o flow like I O probing plug and play and it's kind of designed",
    "start": "681180",
    "end": "687540"
  },
  {
    "text": "to reduce the Reliance on older Technologies like smm or SMI so that we can bring control of some of the lower",
    "start": "687540",
    "end": "693180"
  },
  {
    "text": "level Hardware uh into the realm of the operating system rather than relying on some",
    "start": "693180",
    "end": "699480"
  },
  {
    "text": "Intel secret source to do this for us now acpi is a subsystem which runs in",
    "start": "699480",
    "end": "705899"
  },
  {
    "text": "ring zero it's managed by the acpi sys driver and it contains a full virtual machine the virtual machines are capable",
    "start": "705899",
    "end": "712680"
  },
  {
    "text": "of interpreting AML which is uh acpi machine language bytecode and it can",
    "start": "712680",
    "end": "718980"
  },
  {
    "text": "execute this so that is a turing complete programming language you know you can go to the apica website and",
    "start": "718980",
    "end": "725339"
  },
  {
    "text": "download all your like computer science 101 Fibonacci Sequence you know programming examples and write them in",
    "start": "725339",
    "end": "731579"
  },
  {
    "text": "acpi AML um now all of this information is built",
    "start": "731579",
    "end": "738720"
  },
  {
    "text": "in the UAV pre-boot environment it's handed over to the operating system in Phase zero kernel initialization and",
    "start": "738720",
    "end": "744060"
  },
  {
    "text": "it's stored in the registry that is accessible by low Integrity callers uh",
    "start": "744060",
    "end": "749220"
  },
  {
    "text": "so it's not protected uh you know to high integrity users or anything like this",
    "start": "749220",
    "end": "755420"
  },
  {
    "text": "and it contact well we can use these public tools to just dump information from in there",
    "start": "755420",
    "end": "762060"
  },
  {
    "text": "um and and as as is relevant to our Point here there's a bunch of optional tables which exist within acpi one of",
    "start": "762060",
    "end": "768720"
  },
  {
    "text": "which is the mcfg table which contains pcie configuration information for the",
    "start": "768720",
    "end": "773820"
  },
  {
    "text": "system which you're running on um now we're told that that particular table is the what Express mapped",
    "start": "773820",
    "end": "780180"
  },
  {
    "text": "configuration space address description table which is a mouthful but this contains information on all of",
    "start": "780180",
    "end": "787200"
  },
  {
    "text": "the PCI devices which are registered on the system so it contains the bus device function numbers BDF for every device",
    "start": "787200",
    "end": "793200"
  },
  {
    "text": "which is attached to a bus and has been enumerated at system boot so we can decompile these tables at runtime from",
    "start": "793200",
    "end": "800279"
  },
  {
    "text": "the desktop operating system we can dump the mcfg table and we can take the address of that and just pump it into a",
    "start": "800279",
    "end": "807180"
  },
  {
    "text": "public tool like RW everything and if we do that then we're able to see",
    "start": "807180",
    "end": "812459"
  },
  {
    "text": "any devices on the system which have mmio ranges registered now I caveat this with when I've been",
    "start": "812459",
    "end": "819839"
  },
  {
    "text": "doing this on test systems hyper-v virtual machines do not have this table registered under a default configuration",
    "start": "819839",
    "end": "825660"
  },
  {
    "text": "at least a physical Hardware devices that I've tested do um so your mileage with this may vary",
    "start": "825660",
    "end": "831860"
  },
  {
    "text": "but using these tools we're able to dump the acpi table information which will",
    "start": "831860",
    "end": "837720"
  },
  {
    "text": "show us all of the optional tables that we have registered and some of the compulsory ones like the dsdt which will",
    "start": "837720",
    "end": "844019"
  },
  {
    "text": "contain all of your code for all of the devices attached to the system uh given those we can extract the",
    "start": "844019",
    "end": "850740"
  },
  {
    "text": "information to adapt file and use the iasl decompiler to decompile that information and in doing so we'll get",
    "start": "850740",
    "end": "858240"
  },
  {
    "text": "something that looks like this it gives us a base address in physical RAM where",
    "start": "858240",
    "end": "863579"
  },
  {
    "text": "the mcfg table is stored if we take that and put it into the RW everything tool we'll get something like this",
    "start": "863579",
    "end": "870500"
  },
  {
    "text": "for every device on the system so I've selected one of the pcie devices attached to this system and we can see",
    "start": "870500",
    "end": "877560"
  },
  {
    "text": "that it's a PCI Bridge so it's a root PCI to subordinate PCI bus and we've got",
    "start": "877560",
    "end": "885300"
  },
  {
    "text": "the memory range where that is mapped so this is one this is one way that we",
    "start": "885300",
    "end": "890459"
  },
  {
    "text": "can enumerate all of the devices that exist on the system we can then go find the driver for this and start to reverse engineer it",
    "start": "890459",
    "end": "896699"
  },
  {
    "text": "the other mechanism is hooking um so ntos kernel exports a bunch of public interfaces from the memory",
    "start": "896699",
    "end": "903120"
  },
  {
    "text": "management executive which allow us to map an mmio region to a physical kernel",
    "start": "903120",
    "end": "908399"
  },
  {
    "text": "vas virtual address space and if we hook this and the associated",
    "start": "908399",
    "end": "915240"
  },
  {
    "text": "unmapping then you know we can get all of the entries on the system which which",
    "start": "915240",
    "end": "921899"
  },
  {
    "text": "use mmio um which is what I've just said these are",
    "start": "921899",
    "end": "927120"
  },
  {
    "text": "publicly exported so it's fairly easy to do so um the slides that I'll publish will have scripts in them",
    "start": "927120",
    "end": "934019"
  },
  {
    "text": "um but just for here I've got a video I think the guys at the back might have to click on play",
    "start": "934019",
    "end": "940519"
  },
  {
    "text": "so here we have a kernel debugger attached to Windows VM and just to prove",
    "start": "941160",
    "end": "946680"
  },
  {
    "text": "that I'm not using any Microsoft secret Source we've got public pdb symbols we're not operating on private symbols",
    "start": "946680",
    "end": "952019"
  },
  {
    "text": "we'll dump the map i o space and unmap routines that we've got symbols for just",
    "start": "952019",
    "end": "958260"
  },
  {
    "text": "to prove they're there set a set of scripted breakpoints that just simply print out the physical",
    "start": "958260",
    "end": "963660"
  },
  {
    "text": "addresses and the virtual addresses that are mapped as we go through so that we can see for every mmio region mapping",
    "start": "963660",
    "end": "969839"
  },
  {
    "text": "and unmapping the the values which are which are used and and you know you get a ton of output in here for doing this",
    "start": "969839",
    "end": "976199"
  },
  {
    "text": "but if you issue something like a log off or sign out uh command",
    "start": "976199",
    "end": "982860"
  },
  {
    "text": "then you know typically at this point you're going to hit a bunch of these in the debugger so by doing particular",
    "start": "982860",
    "end": "988800"
  },
  {
    "text": "actions or exercising functionality of given pieces of Hardware with these breakpoints enabled gives you the",
    "start": "988800",
    "end": "995279"
  },
  {
    "text": "ability to not only see where they come from in terms of drivers but also what those are potentially used for where",
    "start": "995279",
    "end": "1001579"
  },
  {
    "text": "they are mapped and so on so one of the one of the things that we",
    "start": "1001579",
    "end": "1008600"
  },
  {
    "text": "notice in the output when doing this is that in a bunch of places we we kind of",
    "start": "1008600",
    "end": "1014360"
  },
  {
    "text": "see this pattern where we map some memory to a given virtual address and then immediately unmap it again and we",
    "start": "1014360",
    "end": "1019820"
  },
  {
    "text": "go through this pattern where we map and unmap and we map and unmap now from kind of like a fuzzing perspective this makes",
    "start": "1019820",
    "end": "1025220"
  },
  {
    "text": "things difficult because you can't just pick one of these regions and start to fuzz it because the chances are it's going to be immediately unmapped and",
    "start": "1025220",
    "end": "1031040"
  },
  {
    "text": "then you're gonna you know essentially seg forward the system by reading an address which is no longer resident",
    "start": "1031040",
    "end": "1037579"
  },
  {
    "text": "um there are some which if you measure this early on in the boot process remain resident throughout the full boot of the",
    "start": "1037579",
    "end": "1043040"
  },
  {
    "text": "system here's some examples of those um",
    "start": "1043040",
    "end": "1048040"
  },
  {
    "text": "now given that we can find some things that use mmio we can find some you know",
    "start": "1048319",
    "end": "1054020"
  },
  {
    "text": "driver files or like what do we want to do with those um so there's a list here of some that I",
    "start": "1054020",
    "end": "1059960"
  },
  {
    "text": "spotted which use mmio I've looked at some of these but not all of them I'll talk about a couple and and some of the",
    "start": "1059960",
    "end": "1065960"
  },
  {
    "text": "points that are interesting within them um but one thing that I've not looked at at all is is the hyper-v attack surface",
    "start": "1065960",
    "end": "1072679"
  },
  {
    "text": "here like when we originally started looking at this work we were trying to work out whether we could exploit the kernel from user mode but actually the",
    "start": "1072679",
    "end": "1078980"
  },
  {
    "text": "attacks that we're talking about here I think apply much much better type of e and for that reason I've not looked at",
    "start": "1078980",
    "end": "1085820"
  },
  {
    "text": "any of these drivers and I think that actually this is if anyone wants to continue you know building on this work",
    "start": "1085820",
    "end": "1091340"
  },
  {
    "text": "for example that's a great place to go and look like for example if you examine something like virtual GPU or vgpu and",
    "start": "1091340",
    "end": "1098179"
  },
  {
    "text": "hyper-v this is a virtual device which runs root aside so on the host and it is",
    "start": "1098179",
    "end": "1105140"
  },
  {
    "text": "a virtual device implementation which talks with a driver installed in a guest directly using my own regions and and",
    "start": "1105140",
    "end": "1112039"
  },
  {
    "text": "there's actually some benefits to an attack of that nature because we don't need to understand complex things like virtual machine bus and how the",
    "start": "1112039",
    "end": "1118640"
  },
  {
    "text": "information is transferred between the two we just need to reverse engineer the driver on the host and if we find bugs",
    "start": "1118640",
    "end": "1124160"
  },
  {
    "text": "in the way that it's handling the mmio code then you know as an attacker you completely control the guest right you",
    "start": "1124160",
    "end": "1130280"
  },
  {
    "text": "don't need to worry about these physical address mappings you can issue reads and writes and potentially even trigger",
    "start": "1130280",
    "end": "1136220"
  },
  {
    "text": "particular actions within a given piece of hardware and then start to spray your rights or reads for example and in this",
    "start": "1136220",
    "end": "1143360"
  },
  {
    "text": "way I think that some of the Primitives that we're talking about here potentially can be particularly powerful in that case and the other thing that's",
    "start": "1143360",
    "end": "1150380"
  },
  {
    "text": "worth note in in that respect is that you know msrc are paying bounties of up to like two hundred thousand dollars for",
    "start": "1150380",
    "end": "1157100"
  },
  {
    "text": "bugs in hyper-v um so if anyone's got spare research time go look there",
    "start": "1157100",
    "end": "1164900"
  },
  {
    "text": "um so one of the drivers I looked at to start with was um this one the Intel AV",
    "start": "1164900",
    "end": "1169940"
  },
  {
    "text": "stream camera driver this is the embedded camera in this Surface Book laptop that I'm using here",
    "start": "1169940",
    "end": "1177020"
  },
  {
    "text": "um and the reason I started looking at this is simply like I I run a new strings found the mmio base addresses",
    "start": "1177020",
    "end": "1183260"
  },
  {
    "text": "and as I know I'll start looking there um and the first thing that we see is it does mmio map IO space ex so this is the",
    "start": "1183260",
    "end": "1190880"
  },
  {
    "text": "API that we talked about before the first thing we do is we map a region of memory from the physical address into",
    "start": "1190880",
    "end": "1196400"
  },
  {
    "text": "this local variable we pass it to some routine called cache region and and then",
    "start": "1196400",
    "end": "1203179"
  },
  {
    "text": "that is essentially stored for use throughout the rest of the driver so",
    "start": "1203179",
    "end": "1209120"
  },
  {
    "text": "it's a plug-and-play device which means that you know when you turn the camera on you get that little red light to tell you it's active at that point you get a",
    "start": "1209120",
    "end": "1215720"
  },
  {
    "text": "plug and play device arrival event and in the device arrival event we map this",
    "start": "1215720",
    "end": "1220940"
  },
  {
    "text": "mmio region we cache it to a global variable stored in the data section of that driver and it's used for the",
    "start": "1220940",
    "end": "1226820"
  },
  {
    "text": "duration of the time the camera is active when we turn the camera off and the red light goes off we'll get a",
    "start": "1226820",
    "end": "1231919"
  },
  {
    "text": "device interface removal event and these mmir regions will be unmapped from",
    "start": "1231919",
    "end": "1237320"
  },
  {
    "text": "memory um accesses to those regions are in this",
    "start": "1237320",
    "end": "1242840"
  },
  {
    "text": "driver case correctly uh synchronized so that there",
    "start": "1242840",
    "end": "1248059"
  },
  {
    "text": "is not you know opportunity for race conditions within a given read routine",
    "start": "1248059",
    "end": "1254299"
  },
  {
    "text": "so apologies if you can't see this in too much detail at the back but the details",
    "start": "1254299",
    "end": "1260840"
  },
  {
    "text": "somewhat unimportant really this is the code which will issue an mmir read basically what we're doing here is you",
    "start": "1260840",
    "end": "1268160"
  },
  {
    "text": "know we we get the call we make sure that we're running at a DPC level or and if we're not we'll raise the occult that",
    "start": "1268160",
    "end": "1273919"
  },
  {
    "text": "the driver is running at we'll acquire a spin lock to ensure that you know we're",
    "start": "1273919",
    "end": "1278960"
  },
  {
    "text": "not going to be preempted we'll read an offset from that mmio range and then we'll release the spin lock so the other",
    "start": "1278960",
    "end": "1285500"
  },
  {
    "text": "thing that's worth note here is that we've got MML fence calls which prevent CPU speculation past these points so I",
    "start": "1285500",
    "end": "1292159"
  },
  {
    "text": "guess that's kind of an example of of a good read function we're issuing a single read from an mmio region we're",
    "start": "1292159",
    "end": "1298039"
  },
  {
    "text": "ensuring that it happens atomically and that we can't be preempted when that happens and we'll read a particular range into a result field uh like drop",
    "start": "1298039",
    "end": "1306080"
  },
  {
    "text": "the Urkel back down potentially and and then return um now in the driver this is used",
    "start": "1306080",
    "end": "1313460"
  },
  {
    "text": "so when we first map the region we should pass it to this cache routine which basically stores it straight in a",
    "start": "1313460",
    "end": "1319580"
  },
  {
    "text": "global variable which is used throughout the rest of the driver and that and that routine we've looked at just before uses",
    "start": "1319580",
    "end": "1324799"
  },
  {
    "text": "one of these range offsets to read from that now I guess what this is to say that like this is in typically kind of a",
    "start": "1324799",
    "end": "1332120"
  },
  {
    "text": "common pattern that I've seen in some of these drivers right we we map a region while we're going to use the device we",
    "start": "1332120",
    "end": "1338120"
  },
  {
    "text": "cache that somewhere and and it's available for use throughout throughout the time that we're using it",
    "start": "1338120",
    "end": "1344600"
  },
  {
    "text": "and this is the original function that I showed you before we mapped the address and we cache it",
    "start": "1344600",
    "end": "1350840"
  },
  {
    "text": "so if we if we examine cross-references in either to some of the places that use",
    "start": "1350840",
    "end": "1356120"
  },
  {
    "text": "this code um in this one driver there's 260 locations that do mmao rights and",
    "start": "1356120",
    "end": "1362299"
  },
  {
    "text": "there's 180 that do reads um now a lot of those are not very interesting",
    "start": "1362299",
    "end": "1367520"
  },
  {
    "text": "they read performance counter information or something from the device and just you know use this to to make",
    "start": "1367520",
    "end": "1373820"
  },
  {
    "text": "various decisions but I've included this example here because it's kind of a nice one because it has",
    "start": "1373820",
    "end": "1379400"
  },
  {
    "text": "some print statements in it and things and it kind of makes it obvious what's going on um I don't think this particular one is",
    "start": "1379400",
    "end": "1385340"
  },
  {
    "text": "exploitable uh to be clear but what's interesting here is the pattern and is the pattern that is more interesting and",
    "start": "1385340",
    "end": "1391700"
  },
  {
    "text": "is this kind of what I was hoping to see when we first started looking at these we have a function which we're told is",
    "start": "1391700",
    "end": "1396919"
  },
  {
    "text": "authenticate firmware the first thing that we do in there is we do an MMI or region read and then we're told that the",
    "start": "1396919",
    "end": "1403340"
  },
  {
    "text": "value that we've read from the devices the security CTL register before authentication we go off and we perform",
    "start": "1403340",
    "end": "1409220"
  },
  {
    "text": "some function that I'm going to wave my hands past at this point but afterwards we do a second read from the same mmio",
    "start": "1409220",
    "end": "1415159"
  },
  {
    "text": "region offset and then we're told that the security CTL register after the device firmware has been authenticated",
    "start": "1415159",
    "end": "1421220"
  },
  {
    "text": "is this now as we've talked about like you know these do read calls correctly",
    "start": "1421220",
    "end": "1427520"
  },
  {
    "text": "synchronized to make sure that operations happen atomically within themselves but ultimately what we're",
    "start": "1427520",
    "end": "1432620"
  },
  {
    "text": "looking at here really is a potential double fetch vulnerability in the usage of the mmir regions themselves where we",
    "start": "1432620",
    "end": "1439400"
  },
  {
    "text": "have this pattern that we issue a read we perform some conditional operations and we reissue the read that you know",
    "start": "1439400",
    "end": "1444740"
  },
  {
    "text": "there's a chance to exploit a double fetch or talk to in this case right",
    "start": "1444740",
    "end": "1450500"
  },
  {
    "text": "um and so this is kind of a pattern that's that's interesting the second driver that I will talk about",
    "start": "1450500",
    "end": "1457520"
  },
  {
    "text": "here is is an entirely different class of driver this is a a bus driver",
    "start": "1457520",
    "end": "1463460"
  },
  {
    "text": "basically to support integrated circuits uh so specifically uh it",
    "start": "1463460",
    "end": "1470299"
  },
  {
    "text": "it is to support the registration of devices onto a PCI bus so when the",
    "start": "1470299",
    "end": "1476179"
  },
  {
    "text": "system enumerates devices that are on a bus they'll be registered with like the bus bridge and and that contains a set",
    "start": "1476179",
    "end": "1483559"
  },
  {
    "text": "of functions for example within a given device which it is able to issue Communications or commands to so one of",
    "start": "1483559",
    "end": "1490640"
  },
  {
    "text": "the things that we'll register is things like interrupt service routines and deferred procedure call handlers for a given device uh we'll register things",
    "start": "1490640",
    "end": "1497960"
  },
  {
    "text": "like d0 and D3 sleep State Management functions on prepare Hardware on release Hardware functions this kind of thing",
    "start": "1497960",
    "end": "1505059"
  },
  {
    "text": "now the in in this case it's kind of our suspicion I guess that mmio is employed",
    "start": "1505059",
    "end": "1510380"
  },
  {
    "text": "here to support things like the registration of acpi compliant devices with a given PCI bus Which would mean",
    "start": "1510380",
    "end": "1516679"
  },
  {
    "text": "that where a device supported something like a temperature cut off sensor then it can be registered with the acpi",
    "start": "1516679",
    "end": "1523220"
  },
  {
    "text": "subsystem and acpi can dynamically issue device i o based upon interrupts that",
    "start": "1523220",
    "end": "1528559"
  },
  {
    "text": "can be registered in that framework so this means at a kind of a high level you know if you've just spent two thousand",
    "start": "1528559",
    "end": "1535100"
  },
  {
    "text": "dollars on your brand new 40 90 and it starts to overheat right you you don't want you don't want it to burn out so",
    "start": "1535100",
    "end": "1540500"
  },
  {
    "text": "instead what we'll do is we'll uh register and interrupt with that device which will trigger uh and and",
    "start": "1540500",
    "end": "1546500"
  },
  {
    "text": "essentially you know we'd be able to perform an action like triple fault the system in order to not you know protect the hardware and not burn it out that's",
    "start": "1546500",
    "end": "1552559"
  },
  {
    "text": "kind of the purpose of some of this um and so here's some code from within",
    "start": "1552559",
    "end": "1557659"
  },
  {
    "text": "this driver which does um you know we can see we've got dco entry in and exit those are device power",
    "start": "1557659",
    "end": "1564080"
  },
  {
    "text": "management states which kind of support you know the description that I've just given",
    "start": "1564080",
    "end": "1569600"
  },
  {
    "text": "um and and the code in here should again look very similar to the one before we map an mmio region and once we've done",
    "start": "1569600",
    "end": "1576260"
  },
  {
    "text": "it we store it in some struct and that struct is used throughout kind of access",
    "start": "1576260",
    "end": "1581779"
  },
  {
    "text": "to this device so this happens on prepare hardware and we've got a similar routine on release Hardware which will",
    "start": "1581779",
    "end": "1587840"
  },
  {
    "text": "do the reciprocal unmapping for this call now we've already said that here this is",
    "start": "1587840",
    "end": "1594440"
  },
  {
    "text": "used to support registration of devices with a bus um so",
    "start": "1594440",
    "end": "1599600"
  },
  {
    "text": "system control interrupts or SCI interrupts in acpi can be raised on things like I say",
    "start": "1599600",
    "end": "1606380"
  },
  {
    "text": "thermal event triggers those are registered with an acpi AML control method which runs inside that virtual",
    "start": "1606380",
    "end": "1612679"
  },
  {
    "text": "machine that I already talked about in ring zero now the question here is like basically",
    "start": "1612679",
    "end": "1619820"
  },
  {
    "text": "this exhibits the same pattern that we've just talked about in drivers we have an mmira region which is mapped for",
    "start": "1619820",
    "end": "1625700"
  },
  {
    "text": "the duration of use for a device and you know callbacks can be issued to the host",
    "start": "1625700",
    "end": "1631940"
  },
  {
    "text": "OS which happen to be executed inside a virtual machine which is running a full programming language which can do",
    "start": "1631940",
    "end": "1637880"
  },
  {
    "text": "whatever it likes including issuing device i o requests and",
    "start": "1637880",
    "end": "1643059"
  },
  {
    "text": "yeah essentially this means that it looks like we can Target code that runs inside this by code interpreter in the",
    "start": "1643059",
    "end": "1650179"
  },
  {
    "text": "same way that we can Target code which runs on drivers so you know discussion of some of the",
    "start": "1650179",
    "end": "1655760"
  },
  {
    "text": "internals of acpi is kind of beyond the scope of the talk here but if you're a nerd like me you can go and read this",
    "start": "1655760",
    "end": "1661159"
  },
  {
    "text": "back that's out there um so this potentially means that anything",
    "start": "1661159",
    "end": "1666740"
  },
  {
    "text": "which is using acpi is interesting as well and that those regions are mapped throughout the usage of that device once",
    "start": "1666740",
    "end": "1673760"
  },
  {
    "text": "it's attached to the bus that region is resident so to start to you know",
    "start": "1673760",
    "end": "1683020"
  },
  {
    "text": "to wrap up some of the the observations here typically we have this pattern",
    "start": "1683020",
    "end": "1688279"
  },
  {
    "text": "which happens a lot in drivers where we map some region we allocate a kernel virtual address space we copy",
    "start": "1688279",
    "end": "1693440"
  },
  {
    "text": "information out of that virtual address space and we unmot the region if we have patterns where we do some action that",
    "start": "1693440",
    "end": "1699860"
  },
  {
    "text": "relies on this state and then we do the same action again then we've got opportunities potentially to exploit",
    "start": "1699860",
    "end": "1706039"
  },
  {
    "text": "double fetch Primitives here and you know we've seen this in more than just the place that I've that I've",
    "start": "1706039",
    "end": "1712100"
  },
  {
    "text": "demonstrated and and typically these end up wrapped up into these functions like do a read do some action do another read",
    "start": "1712100",
    "end": "1718940"
  },
  {
    "text": "um and because each individual one is synchronized but there's perhaps not",
    "start": "1718940",
    "end": "1724159"
  },
  {
    "text": "synchronization across the the two calls you know that that that's where we have a potential to exploit this",
    "start": "1724159",
    "end": "1730940"
  },
  {
    "text": "and and like I say I think that this applies far more as a hypervisor attack primitive right if we've got a driver",
    "start": "1730940",
    "end": "1737000"
  },
  {
    "text": "for a virtualized device which runs on the root partition then being able to Target this uh directly removes actually",
    "start": "1737000",
    "end": "1744620"
  },
  {
    "text": "some complexity from uh the path of the attacker",
    "start": "1744620",
    "end": "1750020"
  },
  {
    "text": "at least one person doesn't think we're crazy uh so this this individual's a",
    "start": "1750020",
    "end": "1755179"
  },
  {
    "text": "finder who's known to msrc for high quality submissions they kind of agree with us that you know this double fetch",
    "start": "1755179",
    "end": "1760399"
  },
  {
    "text": "primitive is something that potentially can you know is potentially exploitable",
    "start": "1760399",
    "end": "1765679"
  },
  {
    "text": "um the other issue that we talked about is kind of the opportunity to exploit race conditions here so the order that these",
    "start": "1765679",
    "end": "1772700"
  },
  {
    "text": "operations are executed is important to depending on the type of mmio that's used there are two mmio schemes we have",
    "start": "1772700",
    "end": "1780220"
  },
  {
    "text": "uncached which would mean that every read and write that's issued is independent it's Atomic there's no",
    "start": "1780220",
    "end": "1785960"
  },
  {
    "text": "combining prefetching caching in those scenarios the other scheme that we have available is uh WC all right combined in",
    "start": "1785960",
    "end": "1793520"
  },
  {
    "text": "that scenario we cannot guarantee the order of two sequentially issued MMI operations reach the device in the same",
    "start": "1793520",
    "end": "1799279"
  },
  {
    "text": "order the hardware is free to reorder those and in that scenario if we have a",
    "start": "1799279",
    "end": "1805340"
  },
  {
    "text": "device that is actually uh sensitive to the order that those are",
    "start": "1805340",
    "end": "1810380"
  },
  {
    "text": "issued then we need to ensure that we are locking in the way that I just showed in that driver before and if",
    "start": "1810380",
    "end": "1815539"
  },
  {
    "text": "we're not we also have the ability to exploit race conditions in the issue of those operations",
    "start": "1815539",
    "end": "1822140"
  },
  {
    "text": "and and you know you may use the second uh one of these schemes if you were doing something like modifying a",
    "start": "1822140",
    "end": "1828140"
  },
  {
    "text": "graphics buffer right it doesn't really matter what operation you or what order you modify all the pixels in a buffer as",
    "start": "1828140",
    "end": "1834200"
  },
  {
    "text": "long as they've all been modified before you send it off to be rastered um so",
    "start": "1834200",
    "end": "1840799"
  },
  {
    "text": "caching memory fences and barriers are important if you're using the right combined scheme is the main point here",
    "start": "1840799",
    "end": "1847159"
  },
  {
    "text": "um I guess this is complicated and where this complexity that you know typically",
    "start": "1847159",
    "end": "1853580"
  },
  {
    "text": "there's potential for bugs um so so if we move to wrap up some of",
    "start": "1853580",
    "end": "1860179"
  },
  {
    "text": "this you know like programming devices at this level is complicated",
    "start": "1860179",
    "end": "1865340"
  },
  {
    "text": "um you know and and there's a lot of devices out there like we've we've barely scratched the surface",
    "start": "1865340",
    "end": "1871580"
  },
  {
    "text": "by examining a few which exist with on the systems that we've that we've looked at",
    "start": "1871580",
    "end": "1877039"
  },
  {
    "text": "um and you know I suppose the other point is that today like why would you go down to here and exploit this stuff",
    "start": "1877039",
    "end": "1883940"
  },
  {
    "text": "when you know there's much lower hanging fruit out there like the number of bugs that I see in a standard driver I octals",
    "start": "1883940",
    "end": "1890840"
  },
  {
    "text": "which cause region rights and kernel you know it's not really worth spending the effort down here in order to exploit",
    "start": "1890840",
    "end": "1896600"
  },
  {
    "text": "this kind of a primitive when it's much more easy to find an exploitable primitive in a if you will standard ring",
    "start": "1896600",
    "end": "1903140"
  },
  {
    "text": "zero component um and so expending effort on weaponizing bugs in this space is is you",
    "start": "1903140",
    "end": "1909320"
  },
  {
    "text": "know probably uh not going to give you a great return on investment",
    "start": "1909320",
    "end": "1914659"
  },
  {
    "text": "um unless you're able to do something like develop a complicated fuzzing platform which enables to find you to",
    "start": "1914659",
    "end": "1920360"
  },
  {
    "text": "find you know large swathes of these books potentially in classes of device that that are",
    "start": "1920360",
    "end": "1926059"
  },
  {
    "text": "um used a lot because that's the other point like one of these bugs is going to be specific to a hardware device which",
    "start": "1926059",
    "end": "1931460"
  },
  {
    "text": "uses it but the same is not true like I say for hypervisor exploitation if you",
    "start": "1931460",
    "end": "1936620"
  },
  {
    "text": "can find a virtual device implementation which runs on the root partition which uses mmio it gives you a direct means of",
    "start": "1936620",
    "end": "1943399"
  },
  {
    "text": "communicating with that code from a guest um and you know in in terms of",
    "start": "1943399",
    "end": "1948700"
  },
  {
    "text": "theoretical discussions like what could be more cool than getting Aussie on a host from Simply reading a memory buffer",
    "start": "1948700",
    "end": "1954440"
  },
  {
    "text": "where you don't get any data returned and so I guess like my my final plea I",
    "start": "1954440",
    "end": "1960260"
  },
  {
    "text": "suppose is like you know there's a there's a ton of security researchers here um",
    "start": "1960260",
    "end": "1965480"
  },
  {
    "text": "go look at this tell us if you can find some bugs you know hopefully I've tried to give you some two-length to be able",
    "start": "1965480",
    "end": "1970580"
  },
  {
    "text": "to understand how you can find drivers which use this some patterns which you know based on our experience look",
    "start": "1970580",
    "end": "1976820"
  },
  {
    "text": "exploitable um so you can you know go and start to reverse engineer some of these look for",
    "start": "1976820",
    "end": "1982700"
  },
  {
    "text": "patterns and if you find anything cool please let us know",
    "start": "1982700",
    "end": "1988720"
  },
  {
    "text": "that's it does anybody have any questions",
    "start": "1989179",
    "end": "1993460"
  },
  {
    "text": "[Music]",
    "start": "1994750",
    "end": "1997859"
  },
  {
    "text": "[Music]",
    "start": "2001700",
    "end": "2004809"
  }
]