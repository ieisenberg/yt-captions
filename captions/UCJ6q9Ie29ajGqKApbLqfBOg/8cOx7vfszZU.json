[
  {
    "start": "0",
    "end": "70000"
  },
  {
    "text": "this session is attacking iPhone XS Max and this room is South Pacific and our",
    "start": "0",
    "end": "5819"
  },
  {
    "text": "speaker is TLA Y so I don't have a great deal to cover because I think most",
    "start": "5819",
    "end": "11370"
  },
  {
    "text": "things are sort of wrapping up but don't forget the merchandise store on level 2 and session recordings mess ok they have",
    "start": "11370",
    "end": "17279"
  },
  {
    "text": "a desk on every level and the other thing to remember is to put your cell phone on vibrate please it's way more",
    "start": "17279",
    "end": "23340"
  },
  {
    "text": "pleasant for everybody else that way so without further ado please join me in",
    "start": "23340",
    "end": "28439"
  },
  {
    "text": "providing a warm welcome to TLA well thank you thank you thank you so much",
    "start": "28439",
    "end": "39239"
  },
  {
    "text": "for coming to my second talk this year and the title is attacking iPhone 10s",
    "start": "39239",
    "end": "45270"
  },
  {
    "text": "Mac's the work is about how we do break the iPhone TX max last year the work was",
    "start": "45270",
    "end": "51780"
  },
  {
    "text": "done by me and how she and we are the members of Kim Pangu we we did release",
    "start": "51780",
    "end": "58410"
  },
  {
    "text": "two breakthroughs in the past for many times and unfortunately who didn't come",
    "start": "58410",
    "end": "63539"
  },
  {
    "text": "here for personal reason so the presentation will be done by myself and",
    "start": "63539",
    "end": "69049"
  },
  {
    "text": "this is the a plan of the talk and the first I'm going to introduce Colonel",
    "start": "69049",
    "end": "75479"
  },
  {
    "start": "70000",
    "end": "70000"
  },
  {
    "text": "Bach in the UNIX domain socket me xnu kernel and I will analyze the root cause",
    "start": "75479",
    "end": "82890"
  },
  {
    "text": "and the patent after that I will describe how we exploit hit the park for",
    "start": "82890",
    "end": "89630"
  },
  {
    "text": "from devices before iPhone 10 smacks that has ate her chips and after that I",
    "start": "89630",
    "end": "97439"
  },
  {
    "text": "will explain why our original export didn't work for the latest hardware",
    "start": "97439",
    "end": "103680"
  },
  {
    "text": "model because of the hardware based mechanism called a pack and I will",
    "start": "103680",
    "end": "110520"
  },
  {
    "text": "analyze the implementation of the pack on iPhone and then we were good to say",
    "start": "110520",
    "end": "116460"
  },
  {
    "text": "how we're a it's portable and do breaks iPhone 10s max and conclude the talk so",
    "start": "116460",
    "end": "123780"
  },
  {
    "start": "123000",
    "end": "123000"
  },
  {
    "text": "I'm I think most of attendees here are familiar with UNIX dome and socket but just in case I will please allow me to",
    "start": "123780",
    "end": "131039"
  },
  {
    "text": "use to page to explain the basic usage of UNIX domain socket UNIX domain socket is a",
    "start": "131039",
    "end": "138620"
  },
  {
    "text": "mechanism that allows different process on the same device to do the data",
    "start": "138620",
    "end": "145920"
  },
  {
    "text": "exchange so it's a inter process communication channel the two piece of",
    "start": "145920",
    "end": "152040"
  },
  {
    "text": "code here shows how the basically usage of the UNIX domain socket you don't have",
    "start": "152040",
    "end": "158040"
  },
  {
    "text": "to read the code I will explain for you so basically you create a socket and the specify is a UNIX domain socket and a",
    "start": "158040",
    "end": "165989"
  },
  {
    "text": "being for the floor side you need to bind a socket to a file pass and then",
    "start": "165989",
    "end": "172290"
  },
  {
    "text": "you can read the socket as if it's a file or whatever so you can do it from",
    "start": "172290",
    "end": "178530"
  },
  {
    "text": "the socket and a fall client what you need to do is first you create a socket",
    "start": "178530",
    "end": "184709"
  },
  {
    "text": "and the rather than binding it to a file path you need to connect the socket to",
    "start": "184709",
    "end": "191430"
  },
  {
    "text": "the file path that is used by the server and then you are able to write to the",
    "start": "191430",
    "end": "198209"
  },
  {
    "text": "socket the data you write to the socket will be received by the Theroux",
    "start": "198209",
    "end": "203609"
  },
  {
    "text": "so this is a basic usage very basic usage of UNIX domain sockets so let's",
    "start": "203609",
    "end": "210450"
  },
  {
    "text": "say what happened in the kernel let's move our eye into the kernel so first",
    "start": "210450",
    "end": "217049"
  },
  {
    "text": "when we create a UNIX domain socket the socket function will trap into the",
    "start": "217049",
    "end": "222780"
  },
  {
    "text": "kernel and then a bunch of our sequence of kernel functions will be executed and",
    "start": "222780",
    "end": "228840"
  },
  {
    "text": "including I so created underlying to know I saw a log u NT attached and among",
    "start": "228840",
    "end": "237120"
  },
  {
    "text": "after the execution of such kernel functions a number of kernel data",
    "start": "237120",
    "end": "243630"
  },
  {
    "text": "structures will be updated all created among such data structures we just need",
    "start": "243630",
    "end": "250590"
  },
  {
    "text": "to remember that the kernel will create a structure called soft socket and",
    "start": "250590",
    "end": "256350"
  },
  {
    "text": "another structure called UN PCB and the reference registers relationship between",
    "start": "256350",
    "end": "262620"
  },
  {
    "text": "the two structures looks very simple so basically I saw protocol the circuit structure has",
    "start": "262620",
    "end": "270060"
  },
  {
    "text": "a field called SEO PCB which points to UM PCB and the you implicitly has a",
    "start": "270060",
    "end": "276449"
  },
  {
    "text": "field called the Olympia socket which points back to the socket after that we",
    "start": "276449",
    "end": "282810"
  },
  {
    "text": "bind the socket to a file name what happened in the kernel is this that the",
    "start": "282810",
    "end": "288630"
  },
  {
    "text": "binder this call trapped in traps into the kernel and it will eventually call",
    "start": "288630",
    "end": "294870"
  },
  {
    "text": "function called the UMP bind for the first impression UMP bind is surrounded by socket lock",
    "start": "294870",
    "end": "302610"
  },
  {
    "text": "and unlock so for the first impression this function seems not visible what you",
    "start": "302610",
    "end": "309659"
  },
  {
    "text": "imply bind data is it will create a new window the specified is type is very",
    "start": "309659",
    "end": "315090"
  },
  {
    "text": "sock and update the related pointing relationship to be specific you in PCB",
    "start": "315090",
    "end": "323099"
  },
  {
    "text": "will update its field called UMP winnowed which we appoint you the",
    "start": "323099",
    "end": "329069"
  },
  {
    "text": "winnowed and as we know that we has another field called V underline socket which will point back to the socket so",
    "start": "329069",
    "end": "337280"
  },
  {
    "text": "it's very clear relationship but if you took a further look and UMP bind you",
    "start": "337280",
    "end": "346259"
  },
  {
    "start": "341000",
    "end": "341000"
  },
  {
    "text": "will notice actually there is a temporary unlock because creation of a",
    "start": "346259",
    "end": "352530"
  },
  {
    "text": "node is kind of time consuming so the kernel doesn't want to lock the cicadas",
    "start": "352530",
    "end": "358110"
  },
  {
    "text": "for a very long time so there is a temporary unlock during the creation of",
    "start": "358110",
    "end": "363780"
  },
  {
    "text": "the the winnowed it's good for performance but it introduced a risk",
    "start": "363780",
    "end": "370229"
  },
  {
    "text": "condition so the kernel function will be executed in this sequence and the red",
    "start": "370229",
    "end": "377190"
  },
  {
    "text": "box here marked the temporary unlock that means and the beginning UMP binder",
    "start": "377190",
    "end": "382800"
  },
  {
    "text": "is protect protected by the lock but due to the temporary a lock we can risk into",
    "start": "382800",
    "end": "389849"
  },
  {
    "text": "UMP bind assume we have to thrice the two strides are trying to bind the same socket to",
    "start": "389849",
    "end": "398460"
  },
  {
    "text": "two different fire paths what would happen so the to bind function we are trapped",
    "start": "398460",
    "end": "407250"
  },
  {
    "text": "into the kernel and finally you won't be binary will be executed and at the same time and two we nose will be created and",
    "start": "407250",
    "end": "415740"
  },
  {
    "text": "but you in PCB will only keep a by reference to one of the two windows and",
    "start": "415740",
    "end": "421400"
  },
  {
    "text": "but the two-way nose will both how reference how a pointer pointing back to",
    "start": "421400",
    "end": "427650"
  },
  {
    "text": "the socket so and this moment nothing wrong so there's no panic no memory",
    "start": "427650",
    "end": "434340"
  },
  {
    "text": "corruption just a 2-way knows they are holding the same Haunter now let's say",
    "start": "434340",
    "end": "440370"
  },
  {
    "text": "we don't care about great if what happened if we close the socket the",
    "start": "440370",
    "end": "445560"
  },
  {
    "text": "closed traps into the kernel and fine you later will go to are so close i",
    "start": "445560",
    "end": "450920"
  },
  {
    "text": "school i so close will cling up the memory and the socket will be afraid on",
    "start": "450920",
    "end": "457290"
  },
  {
    "text": "the UN PCB will be afraid one of the way nose will be cleaned the so the pointer",
    "start": "457290",
    "end": "463320"
  },
  {
    "text": "will be clean we will be clean clear to be zero but there is another way note",
    "start": "463320",
    "end": "469470"
  },
  {
    "text": "there's no reference to this way note so this we know the still holding the",
    "start": "469470",
    "end": "475140"
  },
  {
    "text": "pointer pointing back to afraid memory so after we close the socket",
    "start": "475140",
    "end": "480930"
  },
  {
    "text": "okay and this moment nothing wrong so there's no panic no memory corruption",
    "start": "480930",
    "end": "486380"
  },
  {
    "text": "but we can trigger or use of a free or UAF by connecting to the to fire pass if",
    "start": "486380",
    "end": "494820"
  },
  {
    "text": "we call connect connect us another socket to the two different file paths",
    "start": "494820",
    "end": "500340"
  },
  {
    "text": "because we don't know which file path is holding the dangling pointer so we we",
    "start": "500340",
    "end": "505740"
  },
  {
    "text": "can connect twice connect kernel function is complicated but it will",
    "start": "505740",
    "end": "512460"
  },
  {
    "text": "usually will go to a function called UMP Connect and what you in pconnect do is",
    "start": "512460",
    "end": "518760"
  },
  {
    "text": "this material tries to look hard the we node by the file name if the we note in",
    "start": "518760",
    "end": "525630"
  },
  {
    "text": "there is comparable to confirm that the we know the type is we saw",
    "start": "525630",
    "end": "532050"
  },
  {
    "text": "we suck if it's a we stock it we will try to fetch access its member Reece oak",
    "start": "532050",
    "end": "538620"
  },
  {
    "text": "we socket and then the we circuit will be passed into a function called socket",
    "start": "538620",
    "end": "544260"
  },
  {
    "text": "lock so the dangling pointer in one of the windows will pass into this function",
    "start": "544260",
    "end": "549750"
  },
  {
    "text": "is a typical UAS this page shows the minimum of POC code for the back",
    "start": "549750",
    "end": "557880"
  },
  {
    "text": "basically you can create a two socket and for the first one you run to thrice",
    "start": "557880",
    "end": "564750"
  },
  {
    "text": "the truth rights bind the socket to two different file pass if you it's very",
    "start": "564750",
    "end": "570720"
  },
  {
    "text": "easy to to win the the risk condition after that you close the socket so you",
    "start": "570720",
    "end": "578430"
  },
  {
    "text": "will create a dangling pointer in one of the two windows after that you connected",
    "start": "578430",
    "end": "584460"
  },
  {
    "text": "the another socket to the two different file paths likely you will trigger a panic or some",
    "start": "584460",
    "end": "591270"
  },
  {
    "text": "some weird thing so this is the park and I think the back was finally fixed in",
    "start": "591270",
    "end": "599340"
  },
  {
    "start": "596000",
    "end": "596000"
  },
  {
    "text": "version 12.2 and the fit the fixed is",
    "start": "599340",
    "end": "604680"
  },
  {
    "text": "kind of tricky now the bind function is still reasonable but after UMP binary takes a",
    "start": "604680",
    "end": "612270"
  },
  {
    "text": "log to the socket it will check whether during PCB we know this is now or not so",
    "start": "612270",
    "end": "619100"
  },
  {
    "text": "although it's still reasonable but it's only when we know the we'll have a",
    "start": "619100",
    "end": "624270"
  },
  {
    "text": "reference to the socket so it is fixed",
    "start": "624270",
    "end": "629750"
  },
  {
    "text": "there's no public civilly so very likely is audited by Apple internal security",
    "start": "629750",
    "end": "636510"
  },
  {
    "text": "team so after I found the bug I realized",
    "start": "636510",
    "end": "643080"
  },
  {
    "start": "639000",
    "end": "639000"
  },
  {
    "text": "that actually more and more bugs they are caused by temporary unlocks over",
    "start": "643080",
    "end": "648570"
  },
  {
    "text": "discovered recently and for example a couple months ago",
    "start": "648570",
    "end": "653610"
  },
  {
    "text": "embr from Google Protege row released the bug in VM copy operation it's also",
    "start": "653610",
    "end": "660390"
  },
  {
    "text": "caused by a temporal log and the two years ago Adam has a bug in okay especially in our surface allocated",
    "start": "660390",
    "end": "668080"
  },
  {
    "text": "Molly oh it's also caused by a temporary unlock so we can find the same part in",
    "start": "668080",
    "end": "673600"
  },
  {
    "text": "box in different modules like IO cage and VM and also socket so I believe that",
    "start": "673600",
    "end": "681180"
  },
  {
    "text": "temporary a lock will become very important bug pattern so when we do bug",
    "start": "681180",
    "end": "687070"
  },
  {
    "text": "funding I maybe we should pay more attention on this kind of temporary or not okay now we go to the explosion",
    "start": "687070",
    "end": "696960"
  },
  {
    "text": "exploitation how we exported bark on old iOS devices then to reserved ETL chips",
    "start": "696960",
    "end": "704400"
  },
  {
    "text": "so because it's a finally the risk condition turns into UAF let's take a look at the use the",
    "start": "704400",
    "end": "713320"
  },
  {
    "start": "705000",
    "end": "705000"
  },
  {
    "text": "dangling pointer socket will be used by the function called socket socket lock",
    "start": "713320",
    "end": "719770"
  },
  {
    "text": "you'd you may you may not want to read all the code but if you look an albino",
    "start": "719770",
    "end": "726120"
  },
  {
    "text": "binding binary version you will find how how beautiful the bug it is so first",
    "start": "726120",
    "end": "732790"
  },
  {
    "text": "there is a function pointer home after to the reference from of read socket and",
    "start": "732790",
    "end": "740220"
  },
  {
    "text": "if we can bypass that there's another right the the drug will see a return",
    "start": "740220",
    "end": "748090"
  },
  {
    "text": "address to the freed circuit so the binary binary word may be clear so the",
    "start": "748090",
    "end": "756970"
  },
  {
    "start": "752000",
    "end": "752000"
  },
  {
    "text": "first from dangling pointer it will try to access a cattle pointer from offset",
    "start": "756970",
    "end": "764290"
  },
  {
    "text": "zero acts 1:8 and from that point hurry to get another function pointer from",
    "start": "764290",
    "end": "771010"
  },
  {
    "text": "offset Dirac 68 and make a function call if it's not zero if we can avoid this",
    "start": "771010",
    "end": "777880"
  },
  {
    "text": "function call we and the second red box you will see a return address it's saved",
    "start": "777880",
    "end": "783820"
  },
  {
    "text": "to the fridge circuit so the exploitation is kind of straightforward",
    "start": "783820",
    "end": "789310"
  },
  {
    "text": "so we create a number of sockets and for",
    "start": "789310",
    "end": "794410"
  },
  {
    "text": "one of them we don't we don't have to know which one but one of them we can explore to the risk",
    "start": "794410",
    "end": "800720"
  },
  {
    "text": "condition unp bite and we can create a two-way note one of the windows holding",
    "start": "800720",
    "end": "806919"
  },
  {
    "text": "tank bloom counter to the socket and then we of course we close the socket the socket is frayed but one of the",
    "start": "806919",
    "end": "815660"
  },
  {
    "text": "windows do has a dangling pointer after that we closed all the sockets we",
    "start": "815660",
    "end": "822589"
  },
  {
    "text": "created and we trigger the zoom garbage collection so all the memory will be",
    "start": "822589",
    "end": "828139"
  },
  {
    "text": "reclaimed by the kernel after that we can spray a lot of control board data",
    "start": "828139",
    "end": "834889"
  },
  {
    "text": "like OS data buffer or pipe buffer whatever you like so we call them fix",
    "start": "834889",
    "end": "841429"
  },
  {
    "text": "sockets and we make sure that the offset 0 X 1 8 me no fixed sockets pointing to",
    "start": "841429",
    "end": "848720"
  },
  {
    "text": "a fixed or leak people address so how to get the the people address first in my",
    "start": "848720",
    "end": "857269"
  },
  {
    "text": "opinion people dress leaks are not very hard on iOS so you Hamill you can use in",
    "start": "857269",
    "end": "862579"
  },
  {
    "text": "public parks or you can just do some very simple 3 and then occupying or fix",
    "start": "862579",
    "end": "869149"
  },
  {
    "text": "triple address is very very likely so basically you have many ways to get that",
    "start": "869149",
    "end": "874579"
  },
  {
    "text": "fixed address after that if we make the",
    "start": "874579",
    "end": "880569"
  },
  {
    "text": "venue and offset 0 X 0 X 6 8 in the fixed fixed hip addresses 0 what would",
    "start": "880569",
    "end": "888529"
  },
  {
    "text": "happen so the following instructions will be executed in a box so basically the function return address will be",
    "start": "888529",
    "end": "895789"
  },
  {
    "text": "right - we will be written to the Freid memory to the to the memory not free",
    "start": "895789",
    "end": "901909"
  },
  {
    "text": "memory sorry and return to the OS data or pipe buffer we can retrieve such data",
    "start": "901909",
    "end": "909649"
  },
  {
    "text": "back and then here sorry is bypassed so if we make the venue and offset 0 x 6 8",
    "start": "909649",
    "end": "918619"
  },
  {
    "text": "for the fixed hit buffer the following instructions in the box will be executed",
    "start": "918619",
    "end": "924529"
  },
  {
    "text": "so basically it's a up to artistic control so the rest work for jailbreak",
    "start": "924529",
    "end": "929899"
  },
  {
    "text": "is we just chained our god is love God is so it's easy",
    "start": "929899",
    "end": "935120"
  },
  {
    "text": "because a lot of work already done that but after we go to the new device that",
    "start": "935120",
    "end": "942590"
  },
  {
    "text": "is iPhone 10 smacks with a tray of chips which one our exploit we found a dozen",
    "start": "942590",
    "end": "948830"
  },
  {
    "text": "it didn't work to be accurate for the minimum QC that trigger panic we join it",
    "start": "948830",
    "end": "955730"
  },
  {
    "text": "on the device okay it's again it can trigger the panic that means the bug was",
    "start": "955730",
    "end": "961610"
  },
  {
    "text": "there and we are just our exploit a little bit and we got the info leak",
    "start": "961610",
    "end": "967730"
  },
  {
    "text": "first okay I'm resiliency everything seems okay but when we try to hijack the",
    "start": "967730",
    "end": "975290"
  },
  {
    "text": "culture flow we got some trouble look this is the the left side is in the",
    "start": "975290",
    "end": "982130"
  },
  {
    "text": "instructions on the old devices that we are we can hijack the country flow",
    "start": "982130",
    "end": "987260"
  },
  {
    "text": "because the function pointer is fetched from dangling afraid the memory though",
    "start": "987260",
    "end": "993350"
  },
  {
    "text": "finally there's instruction called a br rx-8 so if we can control X H we",
    "start": "993350",
    "end": "998990"
  },
  {
    "text": "basically the BR will jump to our target and we can successfully hijacked the",
    "start": "998990",
    "end": "1005500"
  },
  {
    "text": "country flow but for the new devices that has eight health devices for the",
    "start": "1005500",
    "end": "1011890"
  },
  {
    "text": "same source code it will generate a new instruction called a beer Raz",
    "start": "1011890",
    "end": "1017290"
  },
  {
    "text": "what's that so we can we will trigger a panic during the PRI anything that says",
    "start": "1017290",
    "end": "1025839"
  },
  {
    "text": "because a new mechanism called Pak was introduced in the new iOS device so when",
    "start": "1025839",
    "end": "1033189"
  },
  {
    "text": "I submit this proposal to blackhat few work publicly discussed a pack and",
    "start": "1033190",
    "end": "1040079"
  },
  {
    "text": "discussed is effectiveness but look at this page now so many excellent research",
    "start": "1040080",
    "end": "1047199"
  },
  {
    "text": "and disclosure and just a couple hours ago Apple had a talk in the same room on",
    "start": "1047199",
    "end": "1053050"
  },
  {
    "text": "the same stage discussed the tax and rotation so I willing to go much details",
    "start": "1053050",
    "end": "1059110"
  },
  {
    "text": "here with we will go through some high-level idea and say how effective it is so pact was",
    "start": "1059110",
    "end": "1066860"
  },
  {
    "start": "1060000",
    "end": "1060000"
  },
  {
    "text": "introduced King way 8.3 is a hardware based solution for pointer integrity to",
    "start": "1066860",
    "end": "1074510"
  },
  {
    "text": "me the high-level idea is this Kamin pointer new minder is a kernel pointer or a user space pointer if you lookin at",
    "start": "1074510",
    "end": "1083330"
  },
  {
    "text": "a high base it's either all ones or zeros this always means is a kernel",
    "start": "1083330",
    "end": "1089899"
  },
  {
    "text": "pointer all zeros means is is a user space pointer apparently you don't have",
    "start": "1089899",
    "end": "1095330"
  },
  {
    "text": "to use so many beasts to indicate a is a kernel pointer or user space pointer so",
    "start": "1095330",
    "end": "1100940"
  },
  {
    "text": "how to leverage such a new space to protect the integrity of a pointer",
    "start": "1100940",
    "end": "1106730"
  },
  {
    "text": "that's the initial situation of the pack so give me a pointer I think only the",
    "start": "1106730",
    "end": "1113630"
  },
  {
    "text": "lower 39 bits could be used to funding the real physical address the high level",
    "start": "1113630",
    "end": "1121520"
  },
  {
    "text": "the high 25 bits are kind of unused so on",
    "start": "1121520",
    "end": "1127370"
  },
  {
    "text": "ETL device there's a new set of instructions called pack instructions which will calculate a secure hash of",
    "start": "1127370",
    "end": "1136850"
  },
  {
    "text": "the caiman pointer it will calculate a hash value based according to context or",
    "start": "1136850",
    "end": "1145789"
  },
  {
    "text": "called modifier and a set of security keys so what a pack instruction data is",
    "start": "1145789",
    "end": "1153710"
  },
  {
    "text": "this given point her it will generate hash code and the third the hash code",
    "start": "1153710",
    "end": "1159350"
  },
  {
    "text": "into the the pointer mark the high twenty the high twenty five B's so the",
    "start": "1159350",
    "end": "1167149"
  },
  {
    "text": "yellow part so for pack the pointer there is another set of instructions",
    "start": "1167149",
    "end": "1173330"
  },
  {
    "text": "called audit instructions the auditor attractions the idea this so we just",
    "start": "1173330",
    "end": "1179330"
  },
  {
    "text": "recalculate a hash code of the pointer according to the modifier and as a",
    "start": "1179330",
    "end": "1184760"
  },
  {
    "text": "secure case and we compare the newly calculated hash code against the the",
    "start": "1184760",
    "end": "1191570"
  },
  {
    "text": "hash code inserted in the PAC pointer if they match that means the pointer is",
    "start": "1191570",
    "end": "1198920"
  },
  {
    "text": "not corrupted the audit instructions will produce the original pointer if",
    "start": "1198920",
    "end": "1205340"
  },
  {
    "text": "there is a mismatch that means the pointer is kind of thick or corrupted",
    "start": "1205340",
    "end": "1210620"
  },
  {
    "text": "the audit instructions will generate her in 1e the pointer it will mask some",
    "start": "1210620",
    "end": "1217040"
  },
  {
    "text": "peace in the pointer which I record so the error code will make the whole pointer humanity so the PR is in",
    "start": "1217040",
    "end": "1226190"
  },
  {
    "text": "instruction it equals auditor is a and then B are so what a the data is the",
    "start": "1226190",
    "end": "1233960"
  },
  {
    "text": "first of audit of the integrity of x8 and then jump to the original address",
    "start": "1233960",
    "end": "1239620"
  },
  {
    "text": "because we have no idea about the security case we don't know how to",
    "start": "1239620",
    "end": "1246200"
  },
  {
    "text": "generate a valid hash code so basically even we have actually control our x8 we",
    "start": "1246200",
    "end": "1253790"
  },
  {
    "text": "will trigger a kernel panic for the brr instruction so we have to reveal the",
    "start": "1253790",
    "end": "1261950"
  },
  {
    "text": "Dovan ability and see what we can do okay this is how we trigger the UAF we",
    "start": "1261950",
    "end": "1274700"
  },
  {
    "text": "trigger the UF by connecting the another circuit through the different file path",
    "start": "1274700",
    "end": "1279830"
  },
  {
    "text": "and finally the kernel we would go to UMP connect and for our original exploit",
    "start": "1279830",
    "end": "1286850"
  },
  {
    "text": "we mainly focus on socket lock that's the first use to the dumb balloon",
    "start": "1286850",
    "end": "1292610"
  },
  {
    "text": "pointer so if we can avoid that we will get the second the use of the read",
    "start": "1292610",
    "end": "1300130"
  },
  {
    "text": "socket or a dangling pointer so that the socket will be passed into function",
    "start": "1300130",
    "end": "1307610"
  },
  {
    "text": "called sock socket unlock so basically let's click looking at the second use",
    "start": "1307610",
    "end": "1314030"
  },
  {
    "start": "1311000",
    "end": "1311000"
  },
  {
    "text": "socket unlock is very received very similar to socket lock except the key",
    "start": "1314030",
    "end": "1320299"
  },
  {
    "text": "slanted as sockets reference counter turns to zero yes Sol Kadi is also maintained by",
    "start": "1320299",
    "end": "1326990"
  },
  {
    "text": "reference counter so what would happen the reference counter turns to zero we",
    "start": "1326990",
    "end": "1333730"
  },
  {
    "text": "reviewed a code finally we find socket unlock will finally go to key free okay we have a",
    "start": "1333730",
    "end": "1341980"
  },
  {
    "text": "way to make a treat risk condition into UAF and based on at UF we got a chance",
    "start": "1341980",
    "end": "1350350"
  },
  {
    "text": "to make a double free so this is our new exploitation strategies first again with",
    "start": "1350350",
    "end": "1358960"
  },
  {
    "text": "the same we create a number of circuits and the for one of them we explore the",
    "start": "1358960",
    "end": "1365710"
  },
  {
    "text": "risk condition issue and we create a dangling pointer in one of the ways nose",
    "start": "1365710",
    "end": "1371820"
  },
  {
    "text": "after then we close all the sulcus and and the trigger the resume garbage",
    "start": "1371820",
    "end": "1377409"
  },
  {
    "text": "collection after then we spray control data and we call it fixed focus but the",
    "start": "1377409",
    "end": "1386260"
  },
  {
    "text": "theme thing is we make sure the offset zero acts 1:8 and in the fixed sock is",
    "start": "1386260",
    "end": "1393370"
  },
  {
    "text": "point to a fixed hippo address and after",
    "start": "1393370",
    "end": "1399039"
  },
  {
    "text": "that what we do is we connect another socket through the file names and what",
    "start": "1399039",
    "end": "1407470"
  },
  {
    "text": "we can do is if we can control if we carefully control the reference counter",
    "start": "1407470",
    "end": "1414520"
  },
  {
    "text": "field in the OS data it will go to key free so the OS data buffer will be read",
    "start": "1414520",
    "end": "1423549"
  },
  {
    "text": "by the key free function so the key OSD the buffer will be freed as if it were a",
    "start": "1423549",
    "end": "1429909"
  },
  {
    "text": "socket then we spray again but this time",
    "start": "1429909",
    "end": "1435429"
  },
  {
    "text": "we spray a number of all ool aft of lon pause descriptors we are mock message",
    "start": "1435429",
    "end": "1443409"
  },
  {
    "text": "it's also a very typical exploiting technique by currently do break throughs",
    "start": "1443409",
    "end": "1449470"
  },
  {
    "text": "and the purpose is we want to occupy the free to SD buffer with oil post buffer",
    "start": "1449470",
    "end": "1458820"
  },
  {
    "text": "after that we free all the OS data and so all the OS databar afraid",
    "start": "1458820",
    "end": "1465420"
  },
  {
    "text": "wonderful the OS data buffer actually now is Ohio post buffer so oh well the",
    "start": "1465420",
    "end": "1472240"
  },
  {
    "text": "old I'll post buffer will be frayed as if it's all a state buffer after that we",
    "start": "1472240",
    "end": "1480580"
  },
  {
    "text": "can spray a number of OS that again this time our purpose purpose is that our new",
    "start": "1480580",
    "end": "1486430"
  },
  {
    "text": "OS data buffer will occupy the freedo our post buffer and this time we can",
    "start": "1486430",
    "end": "1494440"
  },
  {
    "text": "refill the pointer in refill that the way no in the OSD the buffer pointing to",
    "start": "1494440",
    "end": "1501850"
  },
  {
    "text": "a fake pot structure so now what we do now is we just receive all the mock",
    "start": "1501850",
    "end": "1509080"
  },
  {
    "text": "message and then we will guinness and write to a thick object to a thick pot",
    "start": "1509080",
    "end": "1515980"
  },
  {
    "text": "so yes as I said earlier x' is a very typical exploitation technique now by",
    "start": "1515980",
    "end": "1524860"
  },
  {
    "text": "building a fictional task object we can easily get up to a kernel read and write",
    "start": "1524860",
    "end": "1532690"
  },
  {
    "text": "based on the task of task task 4p0 technique so far so good so since we",
    "start": "1532690",
    "end": "1540160"
  },
  {
    "text": "already get after after a kernel code read and write do we need to fight",
    "start": "1540160",
    "end": "1547180"
  },
  {
    "text": "against pack so in the past if after we",
    "start": "1547180",
    "end": "1553030"
  },
  {
    "start": "1549000",
    "end": "1549000"
  },
  {
    "text": "get tasks for p0 we can easily pass the kernel",
    "start": "1553030",
    "end": "1558670"
  },
  {
    "text": "no matter the data or some other sensitive data structures so we can",
    "start": "1558670",
    "end": "1564670"
  },
  {
    "text": "easily ND we can easily add a new trust dynamic trust cache so we can bypass the",
    "start": "1564670",
    "end": "1572590"
  },
  {
    "text": "code signing checks in the user space we can run up to encode we want but on ETL",
    "start": "1572590",
    "end": "1578650"
  },
  {
    "text": "devices when we try to add some dynamic trust cache it will trigger some new",
    "start": "1578650",
    "end": "1586660"
  },
  {
    "text": "panic is some panic looks like this so apparently besides pack",
    "start": "1586660",
    "end": "1592870"
  },
  {
    "text": "Apple has some other medications on a 12 devices so we analyzed the colonel we find out",
    "start": "1592870",
    "end": "1600970"
  },
  {
    "text": "some new kernel segments and dead and if",
    "start": "1600970",
    "end": "1606309"
  },
  {
    "text": "you went to a post talk or taco our school is called a PR so a lot of a PPR",
    "start": "1606309",
    "end": "1614679"
  },
  {
    "text": "segments introduced and there is a segment called the PP our text",
    "start": "1614679",
    "end": "1621250"
  },
  {
    "text": "it contains a lot of code the code for Pima related functions code signature is",
    "start": "1621250",
    "end": "1627130"
  },
  {
    "text": "related functions as well as trust cash related functions but the question is",
    "start": "1627130",
    "end": "1632440"
  },
  {
    "text": "the code in this segment is not a suitable or unless a special register is",
    "start": "1632440",
    "end": "1639279"
  },
  {
    "text": "set to some special value so the only",
    "start": "1639279",
    "end": "1644740"
  },
  {
    "text": "entry point to set this special register is some code in PPR trend segment so",
    "start": "1644740",
    "end": "1652620"
  },
  {
    "text": "this the code in this segment is used to dispatch course to function GPIO text",
    "start": "1652620",
    "end": "1661408"
  },
  {
    "text": "okay let me explain this so based on task for period Tasker for PID zeroes",
    "start": "1661529",
    "end": "1668320"
  },
  {
    "start": "1662000",
    "end": "1662000"
  },
  {
    "text": "right capcity in the past before iPhone 7 we are able",
    "start": "1668320",
    "end": "1675159"
  },
  {
    "text": "to write any where for the for kernel image like including the cold segments",
    "start": "1675159",
    "end": "1682179"
  },
  {
    "text": "and all the data segments but the scene so I phone salmon or magnesium code",
    "start": "1682179",
    "end": "1688750"
  },
  {
    "text": "ggrrr was introduced and you may already knew that from Apple stock so the code",
    "start": "1688750",
    "end": "1696309"
  },
  {
    "text": "segment is protected by them the memory MMU controller so what we can do is we",
    "start": "1696309",
    "end": "1703389"
  },
  {
    "text": "can only patch the data segments but on iphone 10s after a PR was introduced",
    "start": "1703389",
    "end": "1712620"
  },
  {
    "text": "some special data segment called PB iodate can only be written by the code",
    "start": "1712620",
    "end": "1719679"
  },
  {
    "text": "inside the PPR text so even we have TR p",
    "start": "1719679",
    "end": "1724870"
  },
  {
    "text": "0 we can only have limited right city for some kernel data so - and some",
    "start": "1724870",
    "end": "1738010"
  },
  {
    "text": "new dynamic trust cash we want code as corrosion in the kernel so we begin to",
    "start": "1738010",
    "end": "1746350"
  },
  {
    "start": "1744000",
    "end": "1744000"
  },
  {
    "text": "look for unprotected a control flow transfer points and we revealed a lot of",
    "start": "1746350",
    "end": "1755340"
  },
  {
    "text": "we revealed a lot of points like indirect function calls context wishes",
    "start": "1755700",
    "end": "1761820"
  },
  {
    "text": "interrupt handlers and I strongly refer",
    "start": "1761820",
    "end": "1766840"
  },
  {
    "text": "you to Brandon's work a study impact which was this published in mistake this",
    "start": "1766840",
    "end": "1773890"
  },
  {
    "text": "year and he proposed us so many ways to bypass pack and so for us what we did is",
    "start": "1773890",
    "end": "1783540"
  },
  {
    "text": "after we review this country flow transfer points or special function",
    "start": "1783540",
    "end": "1790900"
  },
  {
    "text": "called the thread exception return jumps to our eyes where the exception return",
    "start": "1790900",
    "end": "1797020"
  },
  {
    "text": "is used to return us right from the kernel to user mode and there's special",
    "start": "1797020",
    "end": "1804010"
  },
  {
    "text": "instruction code return or exactly return this instruction is supposed to",
    "start": "1804010",
    "end": "1809800"
  },
  {
    "text": "transfer Australia which trapped in into the kernel back to the user mode so when",
    "start": "1809800",
    "end": "1818080"
  },
  {
    "text": "you return is executed the CPU will restore peace paid from SP SR and the",
    "start": "1818080",
    "end": "1825550"
  },
  {
    "text": "branch to the target by yard register if you look at the binary code you will",
    "start": "1825550",
    "end": "1832840"
  },
  {
    "text": "find actually the two registers will be cited by X 0 and X 1 and both are 0 and",
    "start": "1832840",
    "end": "1841150"
  },
  {
    "text": "X 1 actually they are read from or kernel memory so if we can control the",
    "start": "1841150",
    "end": "1849520"
  },
  {
    "text": "two memory loss we are able to control IVA turn we can",
    "start": "1849520",
    "end": "1855070"
  },
  {
    "text": "force the Yi returned tom to actually kernel address in the kernel rather than",
    "start": "1855070",
    "end": "1861250"
  },
  {
    "text": "back the user space by the way the same trick was used by Gambier for his kernel iOS",
    "start": "1861250",
    "end": "1870140"
  },
  {
    "text": "kernel debugger and but there is a special function before he returned we",
    "start": "1870140",
    "end": "1878600"
  },
  {
    "text": "don't know his name but according to the panic string we named it a GOP detector",
    "start": "1878600",
    "end": "1884390"
  },
  {
    "text": "what this function does is I think it's supposed to attack the integrity of the",
    "start": "1884390",
    "end": "1890660"
  },
  {
    "text": "save destroy the context and the beginning we thought oh there's no",
    "start": "1890660",
    "end": "1896270"
  },
  {
    "text": "chance but my friend told me ok something's wrong here",
    "start": "1896270",
    "end": "1903730"
  },
  {
    "text": "after compare the newly calculated hash code against compare it with the one",
    "start": "1903730",
    "end": "1910730"
  },
  {
    "text": "stored in the context even the mismatching nothing's wrong after the",
    "start": "1910730",
    "end": "1917390"
  },
  {
    "text": "compare instruction it just returned so the early return will award coding the",
    "start": "1917390",
    "end": "1924860"
  },
  {
    "text": "panic function so what we can do we can make a stripe MCUs right tramping into",
    "start": "1924860",
    "end": "1932330"
  },
  {
    "start": "1927000",
    "end": "1927000"
  },
  {
    "text": "the kernel like we can make us rather receiving some Mac message so it will",
    "start": "1932330",
    "end": "1938720"
  },
  {
    "text": "travel into kernel and then based on the task for PID 0 we are able to change the",
    "start": "1938720",
    "end": "1946280"
  },
  {
    "text": "silver thread context especially here are your 1 and SPR yawen and after that",
    "start": "1946280",
    "end": "1955340"
  },
  {
    "text": "we can seen a message - that's right after receiving that kernel message",
    "start": "1955340",
    "end": "1961910"
  },
  {
    "text": "that's right it's supposed to return to the user space but when ye return",
    "start": "1961910",
    "end": "1969980"
  },
  {
    "text": "instruction is executed we are we got a chance to gain after a code execution so",
    "start": "1969980",
    "end": "1977000"
  },
  {
    "text": "what we do is we can make the u-turn jumped into a special function that in",
    "start": "1977000",
    "end": "1983630"
  },
  {
    "text": "tax is 0x20 file in the PPI Oh triumph",
    "start": "1983630",
    "end": "1989290"
  },
  {
    "text": "which will load trust cash as if the kernel is loading",
    "start": "1989290",
    "end": "1995400"
  },
  {
    "text": "trust cash so we are able to end our trust cash and we got SSS environment",
    "start": "1995400",
    "end": "2002570"
  },
  {
    "start": "1998000",
    "end": "1998000"
  },
  {
    "text": "iPhone tears Max and sex for the top PR environment okay this is a fix the fix",
    "start": "2002570",
    "end": "2011960"
  },
  {
    "text": "is so easy after the compare you should dump right you shouldn't just return",
    "start": "2011960",
    "end": "2019180"
  },
  {
    "text": "okay the conclusion so first for the back part we believed and the temporary",
    "start": "2019180",
    "end": "2026240"
  },
  {
    "start": "2020000",
    "end": "2020000"
  },
  {
    "text": "unlock is becoming a very important back patent so when we do source code level",
    "start": "2026240",
    "end": "2033200"
  },
  {
    "text": "or binary level auditing we should pay more attention on this kind of pattern",
    "start": "2033200",
    "end": "2039410"
  },
  {
    "text": "and I post new medication pack and ppl",
    "start": "2039410",
    "end": "2044809"
  },
  {
    "text": "they accurate and the combination of the two mechanisms made a lot of trouble for",
    "start": "2044809",
    "end": "2050030"
  },
  {
    "text": "us but I don't think it will end the memory corruption wall and more",
    "start": "2050030",
    "end": "2056388"
  },
  {
    "text": "importantly a good design need very good and a complete implementation and",
    "start": "2056389",
    "end": "2061490"
  },
  {
    "text": "interval box may need to a total bypass for the whole design okay thank you I'm",
    "start": "2061490",
    "end": "2067370"
  },
  {
    "text": "happy to answer your questions [Applause]",
    "start": "2067370",
    "end": "2079149"
  }
]