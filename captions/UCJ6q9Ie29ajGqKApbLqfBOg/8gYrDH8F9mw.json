[
  {
    "text": "okay so everyone good noon thank you for coming to for tonight presentation today",
    "start": "30",
    "end": "6629"
  },
  {
    "text": "I'm going to present you a research that I've done on an iOS kernel module and",
    "start": "6629",
    "end": "12210"
  },
  {
    "text": "ice driver called Ethel a ve driver and so the agenda the main agenda for today",
    "start": "12210",
    "end": "18180"
  },
  {
    "text": "first we will review some of the core attack vectors on iOS and some of the",
    "start": "18180",
    "end": "26250"
  },
  {
    "text": "actually also related to Mac OS second for a second I will present the",
    "start": "26250",
    "end": "32148"
  },
  {
    "text": "vulnerabilities that I found some of them and then we'll get to the",
    "start": "32149",
    "end": "37290"
  },
  {
    "text": "exploitation part of how to actually take those from abilities and take them into a fully working exploit and then",
    "start": "37290",
    "end": "44520"
  },
  {
    "text": "fewer to bore jailbreak and small surprise and finally QA QA and",
    "start": "44520",
    "end": "51710"
  },
  {
    "text": "disclosure timeline so a little bit about myself my name is Adam donenfeld",
    "start": "51710",
    "end": "57780"
  },
  {
    "text": "I'm a security researcher work mainly on iOS and Android",
    "start": "57780",
    "end": "63110"
  },
  {
    "text": "I I do over mobility assessment and exploitation so more the offensive part",
    "start": "63110",
    "end": "69869"
  },
  {
    "text": "and currently I work as a senior security researcher for as imperium and",
    "start": "69869",
    "end": "77070"
  },
  {
    "text": "additionally additionally I would like to thank sook of RAM and Univ Carter for",
    "start": "77070",
    "end": "83250"
  },
  {
    "text": "helping me with the presentation and supporting me during the times of frustration so let's start I will start",
    "start": "83250",
    "end": "92250"
  },
  {
    "text": "like I said with the review of the attack surfaces so in iOS and also on",
    "start": "92250",
    "end": "98850"
  },
  {
    "text": "Mac OS there are a lot of attack surface we can categorize them into different",
    "start": "98850",
    "end": "105890"
  },
  {
    "text": "sections let's call it this way mainly cisco sitting calls now on iOS on new we",
    "start": "105890",
    "end": "115020"
  },
  {
    "text": "have Maxis calls and FreeBSD syscalls we also have a MIG which is an",
    "start": "115020",
    "end": "121770"
  },
  {
    "text": "auto-generated messages interface so you can just put",
    "start": "121770",
    "end": "127890"
  },
  {
    "text": "it's like it works like an idea you you write an idea ideal and templates",
    "start": "127890",
    "end": "134640"
  },
  {
    "text": "templates and then some code is auto-generated and finally we have iokit",
    "start": "134640",
    "end": "139770"
  },
  {
    "text": "and by the way I okay it is profoundly based on me so to actually issue IO kit",
    "start": "139770",
    "end": "146970"
  },
  {
    "text": "cause eventually everything is everything goes through a but I",
    "start": "146970",
    "end": "153810"
  },
  {
    "text": "get is a huge platform and even though everything is that is going over big it",
    "start": "153810",
    "end": "161240"
  },
  {
    "text": "deserves its own bullet here as in an independent category so sixty seconds",
    "start": "161240",
    "end": "168480"
  },
  {
    "text": "about our kit so I hope it is apples",
    "start": "168480",
    "end": "173670"
  },
  {
    "text": "apples collections of resources tools frameworks and everything for creating",
    "start": "173670",
    "end": "180810"
  },
  {
    "text": "Bibles falls new and unlike let's say",
    "start": "180810",
    "end": "186030"
  },
  {
    "text": "unlike Linux driver for example those drivers are actually written in C++ it",
    "start": "186030",
    "end": "191940"
  },
  {
    "text": "is done because they do have some macros which gives you some basic reflection",
    "start": "191940",
    "end": "197190"
  },
  {
    "text": "capabilities now it's super cool in my opinion for divers and additionally you",
    "start": "197190",
    "end": "202980"
  },
  {
    "text": "have some layers some isolation between an actual driver and the communication",
    "start": "202980",
    "end": "210570"
  },
  {
    "text": "channel of the user mode and the driver again if we compared to the normal Linux",
    "start": "210570",
    "end": "216860"
  },
  {
    "text": "drivers of Windows rivals additionally Apple gave a huge amount of",
    "start": "216860",
    "end": "222690"
  },
  {
    "text": "pre built-in types you have pre-built dictionaries arrays integer strings",
    "start": "222690",
    "end": "229680"
  },
  {
    "text": "whether that's you have those types from Apple and finally I think this is the",
    "start": "229680",
    "end": "237540"
  },
  {
    "text": "best gift Apple could give to offensive researchers because it's an amazing",
    "start": "237540",
    "end": "243300"
  },
  {
    "text": "platform for exploitation of this new kernel now I want to review some of the",
    "start": "243300",
    "end": "250580"
  },
  {
    "text": "projects that have added dependent on IO kids so you can see",
    "start": "250580",
    "end": "256169"
  },
  {
    "text": "that's a list of recent jail breaks that were based on IO kids own abilities it's",
    "start": "256169",
    "end": "263129"
  },
  {
    "text": "not the fullest the only reason I actually didn't try to move them is because I didn't have room in the on the",
    "start": "263129",
    "end": "268949"
  },
  {
    "text": "slide but there are more jail breaks and projects and obviously probably you know",
    "start": "268949",
    "end": "276810"
  },
  {
    "text": "more texts that are no jail breaks which depend on iokit now the question that's",
    "start": "276810",
    "end": "282419"
  },
  {
    "text": "probably most of us asked is why hackers love I get so much what makes Eric it's",
    "start": "282419",
    "end": "288270"
  },
  {
    "text": "such a good platform for attacking so first of all there are a lot of drivers",
    "start": "288270",
    "end": "293810"
  },
  {
    "text": "which definitely increase the attack surface now there's no I mean we don't",
    "start": "293810",
    "end": "302159"
  },
  {
    "text": "really know that for a hundred percent but I believe there is a there is a disk the people who work on our kids don't",
    "start": "302159",
    "end": "308969"
  },
  {
    "text": "really work on is new and that's why there are some miscommunications between those two groups which leads to bugs I",
    "start": "308969",
    "end": "318710"
  },
  {
    "text": "hope it is like I said out it is written in C++ and which means there it does",
    "start": "318710",
    "end": "325889"
  },
  {
    "text": "have actually objects so for example you have V tables now if you can overwrite something and you can override a veto a",
    "start": "325889",
    "end": "332669"
  },
  {
    "text": "bill you can override function pointers and you can hijack the kernel very easily which is by the way something",
    "start": "332669",
    "end": "338789"
  },
  {
    "text": "that you can also also do to bypass the new kpp and MTC mitigations because",
    "start": "338789",
    "end": "345240"
  },
  {
    "text": "those are not protected finally because most of the IOT drivers are not",
    "start": "345240",
    "end": "351149"
  },
  {
    "text": "open-source less people look audit that code I think it's a mistake and I think",
    "start": "351149",
    "end": "358469"
  },
  {
    "text": "our kids is our kids Intel in term of Security's underrated undermined I mean",
    "start": "358469",
    "end": "365430"
  },
  {
    "text": "is new is a little bit more protected in my opinion again just my personal experience so how do we actually use",
    "start": "365430",
    "end": "372210"
  },
  {
    "text": "iokit how do we actually communicate with titles so the first thing we do and I just wrote a basic snippets here to",
    "start": "372210",
    "end": "379319"
  },
  {
    "text": "get the get a handle to a driver so this function gets it gives out a connection",
    "start": "379319",
    "end": "385319"
  },
  {
    "text": "to a driver which is by the way just a port and it's a it gets a name of a driver that it has",
    "start": "385319",
    "end": "392129"
  },
  {
    "text": "to look for so the first thing we do we call that we gets the i/o master pot but",
    "start": "392129",
    "end": "397830"
  },
  {
    "text": "this is like I said I hope it is fun",
    "start": "397830",
    "end": "403759"
  },
  {
    "text": "essentially based on me so this is a MIG Pole which gives us that being master",
    "start": "403759",
    "end": "408960"
  },
  {
    "text": "port the master port is used to it to get a list of drivers so here we say",
    "start": "408960",
    "end": "414569"
  },
  {
    "text": "yeah give me all the drivers which are based on IO service which is all the",
    "start": "414569",
    "end": "419969"
  },
  {
    "text": "drivers as we will see soon we get an iterator back and then we can iterate",
    "start": "419969",
    "end": "425430"
  },
  {
    "text": "all the drivers we get the name of the driver we check the name that we are",
    "start": "425430",
    "end": "430740"
  },
  {
    "text": "currently running on and if that's the name once we just call I will service open another API that uses me to get a",
    "start": "430740",
    "end": "438029"
  },
  {
    "text": "connection to the driver so you can see master ports gives us an iterator which",
    "start": "438029",
    "end": "443759"
  },
  {
    "text": "gives us a service like we can iterate the service and the service is eventually deport so how do how do we",
    "start": "443759",
    "end": "453270"
  },
  {
    "text": "actually write diverse for iOS oh no it's actually not really documented and",
    "start": "453270",
    "end": "459870"
  },
  {
    "text": "I personally understood how to do that just from reverse engineering drivers this cannot function it so those levels",
    "start": "459870",
    "end": "467639"
  },
  {
    "text": "have an external methods if you're familiar with Linux it kind of reminds",
    "start": "467639",
    "end": "472800"
  },
  {
    "text": "il CDL drivers of there's like mmm",
    "start": "472800",
    "end": "478289"
  },
  {
    "text": "drivers overrides the external method function which is called every time the user wants to communicate with the",
    "start": "478289",
    "end": "484199"
  },
  {
    "text": "driver the users issue those the issue those comments using an API called IO",
    "start": "484199",
    "end": "491159"
  },
  {
    "text": "connect call method we'll see an example soon so like I said the drivers must override the external method and because",
    "start": "491159",
    "end": "498900"
  },
  {
    "text": "everything is based on me everything is based on messages because maybe it's just a messages so again I'll connect",
    "start": "498900",
    "end": "506310"
  },
  {
    "text": "call method ultimately calls mash message will see example soon flow so",
    "start": "506310",
    "end": "511889"
  },
  {
    "text": "that's the signature of the of the external method functions that drivers have to override and what the user gives",
    "start": "511889",
    "end": "519240"
  },
  {
    "text": "is an index that's the selector so that's just an index to recommend let's color this way",
    "start": "519240",
    "end": "526880"
  },
  {
    "text": "it also gets arguments which is a struct that contains the input buffers and the",
    "start": "526880",
    "end": "532250"
  },
  {
    "text": "output buffers from ends to the user this patch is the pointer that dispatch",
    "start": "532250",
    "end": "539870"
  },
  {
    "text": "is the block of is the function the script oh let's call this way the file the function the script oh that will",
    "start": "539870",
    "end": "546080"
  },
  {
    "text": "eventually be called target is the actual driver and reference is something that I actually never saw you know I",
    "start": "546080",
    "end": "554360"
  },
  {
    "text": "never seen any driver using it actually so that's an example of the the override",
    "start": "554360",
    "end": "561830"
  },
  {
    "text": "of that function so like I said before the selector is something the user supplies so obviously because it is",
    "start": "561830",
    "end": "568640"
  },
  {
    "text": "completely controlled by the user you have to check that this is the actual",
    "start": "568640",
    "end": "573890"
  },
  {
    "text": "method account that it doesn't go beyond that account then the driver takes the",
    "start": "573890",
    "end": "580460"
  },
  {
    "text": "appropriate function block this is the external on method dispatch it takes the function block like the function script",
    "start": "580460",
    "end": "587930"
  },
  {
    "text": "oh it takes it it puts it into the dispatch target is the driver itself because like I said in the beginning",
    "start": "587930",
    "end": "594530"
  },
  {
    "text": "there is an isolation between the connection of the communication of the user and the driver so that's the driver",
    "start": "594530",
    "end": "601880"
  },
  {
    "text": "and this is the communication and I said the ref is never used and then the the",
    "start": "601880",
    "end": "608060"
  },
  {
    "text": "super implementation of Excel a method is being called there are you user",
    "start": "608060",
    "end": "614360"
  },
  {
    "text": "client implementation and this is just checks that the user buffers in the say",
    "start": "614360",
    "end": "620720"
  },
  {
    "text": "in the appropriate size with the function block and that's actually what that's ultimately called for the",
    "start": "620720",
    "end": "626750"
  },
  {
    "text": "function it's not necessary to call that but that's what that's the appropriate way to do it but you can do it yourself",
    "start": "626750",
    "end": "633020"
  },
  {
    "text": "also without calling this one so we saw how the drivers implement its nuts everything you have to know to actually",
    "start": "633020",
    "end": "639980"
  },
  {
    "text": "call implement the most basic user driver communication now let's see what the user does so that's the function I",
    "start": "639980",
    "end": "648280"
  },
  {
    "text": "showed before that's the driver while trying to communicate with so a lav",
    "start": "648280",
    "end": "654279"
  },
  {
    "text": "it is just the communication with the driver that's the handles of the driver now we call function with index 0 so",
    "start": "654279",
    "end": "662740"
  },
  {
    "text": "I'll select o is 0 here we create a struck and input my buffer in in the",
    "start": "662740",
    "end": "669610"
  },
  {
    "text": "size of 8 bytes and output struct 4 bytes and we actually because the output",
    "start": "669610",
    "end": "676629"
  },
  {
    "text": "the size might be different we actually have to supply a size parameter which the kernel can override so like I said",
    "start": "676629",
    "end": "683699"
  },
  {
    "text": "index 0 and we can see that here because we select though is now 0 it takes the",
    "start": "683699",
    "end": "690339"
  },
  {
    "text": "first the first the script off from here so in our case s open and like like here",
    "start": "690339",
    "end": "698559"
  },
  {
    "text": "you see that the input is 8 bytes the output is 4 bytes so here eight bytes 4",
    "start": "698559",
    "end": "704319"
  },
  {
    "text": "bytes and that's it that's the whole thing between user and drive a lot like",
    "start": "704319",
    "end": "709720"
  },
  {
    "text": "the basic communication so again the whole flow user calls IO Connect called",
    "start": "709720",
    "end": "715809"
  },
  {
    "text": "method we see it here io connect or method which calls the MiG function IO connect method which calls",
    "start": "715809",
    "end": "724059"
  },
  {
    "text": "much message it drops into the kernel the calendar gets into x io connect",
    "start": "724059",
    "end": "729069"
  },
  {
    "text": "method which calls is IO Connect method which eventually calls the drivers",
    "start": "729069",
    "end": "734709"
  },
  {
    "text": "external method implementation so so far that's everything about the code now",
    "start": "734709",
    "end": "740379"
  },
  {
    "text": "let's see how it actually looks in the binary so so this is an example from the",
    "start": "740379",
    "end": "746829"
  },
  {
    "text": "drive API lav driver like I showed you before that's exactly like in the code",
    "start": "746829",
    "end": "752589"
  },
  {
    "text": "you have a pointer to a function you have the struct input size you have the struct output size by the way this is",
    "start": "752589",
    "end": "759339"
  },
  {
    "text": "these two zeros if you want to just pass an array of integers but I mean you can",
    "start": "759339",
    "end": "767019"
  },
  {
    "text": "just pass an array of integers but it'll cannot pass a struct so it's up to date today to the drive you to the size so",
    "start": "767019",
    "end": "773889"
  },
  {
    "text": "that's it now we know more or less how drivers work and how users communicate",
    "start": "773889",
    "end": "778990"
  },
  {
    "text": "with them so now let's see the vulnerabilities so here's the list of",
    "start": "778990",
    "end": "785709"
  },
  {
    "text": "the vulnerabilities I found one of them is in IO surface I'm not going to get into that vulnerability",
    "start": "785709",
    "end": "791560"
  },
  {
    "text": "but if you I mean details are available online and if you want more explanation",
    "start": "791560",
    "end": "796570"
  },
  {
    "text": "feel free to ask me about it and what I am going to talk about is so much the",
    "start": "796570",
    "end": "801970"
  },
  {
    "text": "vulnerabilities I found here I didn't have to use all of them to actually create write a full exploit but I'm",
    "start": "801970",
    "end": "810850"
  },
  {
    "text": "going to show a few of them that I may be enthused just to learn now in order",
    "start": "810850",
    "end": "816490"
  },
  {
    "text": "to understand some of them we have to talk a little bit about IO surface so 60",
    "start": "816490",
    "end": "822700"
  },
  {
    "text": "seconds about our surface our surface is a channel object which is used to share",
    "start": "822700",
    "end": "828930"
  },
  {
    "text": "hardware accelerated graphics data so frame buffers for example you can show",
    "start": "828930",
    "end": "836980"
  },
  {
    "text": "them across multiple processes the the advantages of using an IO surface object",
    "start": "836980",
    "end": "843700"
  },
  {
    "text": "and not actually send the frame buffer data is that idle surface Maps the data",
    "start": "843700",
    "end": "850960"
  },
  {
    "text": "so instead of sending out gigabytes of information you can just send an hour surface object like the earth surface",
    "start": "850960",
    "end": "858370"
  },
  {
    "text": "object the process asked the colonel to map the data that the earth surface object handles and then the calendars",
    "start": "858370",
    "end": "866200"
  },
  {
    "text": "Maps the data so just the mapping of the same physical memory which is a lot of",
    "start": "866200",
    "end": "871480"
  },
  {
    "text": "time and it's a very convenient way of passing a lot of information and our",
    "start": "871480",
    "end": "877270"
  },
  {
    "text": "surfaces are shared by an ID you can create a global surface so anyone can each map that information based on an",
    "start": "877270",
    "end": "885550"
  },
  {
    "text": "i/o surface ID you can create a platter you can create private ones doesn't really matter for our specific case but",
    "start": "885550",
    "end": "891280"
  },
  {
    "text": "still nice to know so to summarize it our surface is just an object that",
    "start": "891280",
    "end": "896980"
  },
  {
    "text": "allows you to transfer data so now what is a PLA V driver so every driver is",
    "start": "896980",
    "end": "905260"
  },
  {
    "text": "responsible for hardware accelerated encoding a video encoding in iOS it's not available on all six unfortunately",
    "start": "905260",
    "end": "914070"
  },
  {
    "text": "there is absolutely no information or documentation about it on the Internet and unfortunately like most of the I key",
    "start": "914070",
    "end": "922190"
  },
  {
    "text": "drivers there are no source codes which means that I had to reverse engineer it",
    "start": "922190",
    "end": "927230"
  },
  {
    "text": "so here's the table of the external methods of epilady driver I just moved",
    "start": "927230",
    "end": "938180"
  },
  {
    "text": "the the properties of every function so it gets into one slide but one of the",
    "start": "938180",
    "end": "944389"
  },
  {
    "text": "things that really attracts my attention in that table is that one of the functions required a very large amount",
    "start": "944389",
    "end": "951860"
  },
  {
    "text": "of input which could somehow understand because yeah videos have a lot of",
    "start": "951860",
    "end": "957199"
  },
  {
    "text": "properties so maybe I don't really know what's going on I mean offer a reference",
    "start": "957199",
    "end": "962930"
  },
  {
    "text": "glance it looks suspicious but you know it's not like I can do something about it but it also gave a lot of information",
    "start": "962930",
    "end": "969920"
  },
  {
    "text": "out which is also something that usually you wouldn't expect from a driver so I started reverse engineering that",
    "start": "969920",
    "end": "977000"
  },
  {
    "text": "function also said session settings that's the name I gave to the function based on logs from the based on the",
    "start": "977000",
    "end": "984050"
  },
  {
    "text": "prints in that function so I spoke before about this function this script",
    "start": "984050",
    "end": "989990"
  },
  {
    "text": "oh so you have a function pointer input count and output count so a buffer sorry",
    "start": "989990",
    "end": "996680"
  },
  {
    "text": "so the input buffer is in offset 30 and the output buffers in offset 58 so x1 is",
    "start": "996680",
    "end": "1004959"
  },
  {
    "text": "the input buffer x2 is the output buffer now let's see what a function does so",
    "start": "1004959",
    "end": "1010839"
  },
  {
    "text": "first of all we put here yeah so the",
    "start": "1010839",
    "end": "1016209"
  },
  {
    "text": "input buffer gets into X 19 and the driver itself gets into the the",
    "start": "1016209",
    "end": "1021760"
  },
  {
    "text": "connection so it gets into the X 20 so it fetches something from our input some",
    "start": "1021760",
    "end": "1028168"
  },
  {
    "text": "keyword then if we actually put something in that offset which we",
    "start": "1028169",
    "end": "1033339"
  },
  {
    "text": "completely control because that's the input buffer if we supply if it's not now then we jump here but if it's not we",
    "start": "1033339",
    "end": "1042548"
  },
  {
    "text": "see that it gets it gets something it gets some integer from our inputs which",
    "start": "1042549",
    "end": "1050559"
  },
  {
    "text": "of reversing reverse engineering that function I know that this is an iOS surface ID then it just gets the ice",
    "start": "1050559",
    "end": "1057240"
  },
  {
    "text": "surface ID it puts it back in to offset 1 7 8 into the input buffer which is not",
    "start": "1057240",
    "end": "1065280"
  },
  {
    "text": "suitable from the user anymore by the way and then it continues it continues further now what what we see here is",
    "start": "1065280",
    "end": "1071850"
  },
  {
    "text": "that we can supply something and if we don't supply it the camel puts there a",
    "start": "1071850",
    "end": "1078720"
  },
  {
    "text": "valid channel pointer and continues on which means we control we can get the",
    "start": "1078720",
    "end": "1084150"
  },
  {
    "text": "kind of thinking that we have an outer surface object control and we can supply",
    "start": "1084150",
    "end": "1089190"
  },
  {
    "text": "any others we want and the can I will believe that this is indeed and our surface object",
    "start": "1089190",
    "end": "1094320"
  },
  {
    "text": "so to summarize the primitive we have here we can supply any can address we",
    "start": "1094320",
    "end": "1099840"
  },
  {
    "text": "want and they cannot believe it's an isle surface object you know it's it's",
    "start": "1099840",
    "end": "1104940"
  },
  {
    "text": "important to mention we can also also supply a user mode address but because I",
    "start": "1104940",
    "end": "1110790"
  },
  {
    "text": "wanted to O bypass the SMAP or pun mitigation that are in the new versions",
    "start": "1110790",
    "end": "1116880"
  },
  {
    "text": "I'm sticking to channel Channel pointers here because the kernel will not accept",
    "start": "1116880",
    "end": "1122309"
  },
  {
    "text": "user addresses if if that mitigation is enabled so one thing that surprised me",
    "start": "1122309",
    "end": "1131910"
  },
  {
    "text": "with that behavior is that why is the kernel expecting the user to actually give in channel addresses so I said it",
    "start": "1131910",
    "end": "1140400"
  },
  {
    "text": "must probably someone supply those channel addresses to the user so I look",
    "start": "1140400",
    "end": "1147900"
  },
  {
    "text": "for that and in selector number seven I saw that just like before we can supply",
    "start": "1147900",
    "end": "1155910"
  },
  {
    "text": "a surface ID it puts that into the input buffer but then for some reason",
    "start": "1155910",
    "end": "1162450"
  },
  {
    "text": "inference for some reason dictates it from the input buffer into X 9 and it",
    "start": "1162450",
    "end": "1167490"
  },
  {
    "text": "puts it back into output buffer so what we get here is an info leak so we can",
    "start": "1167490",
    "end": "1173370"
  },
  {
    "text": "supply any i/o surface ID which is completely something that his user I",
    "start": "1173370",
    "end": "1178799"
  },
  {
    "text": "mean it's not really usable but it's something that you could share to to talk about the specific surface",
    "start": "1178799",
    "end": "1184630"
  },
  {
    "text": "we can get it scandal address which is completely something that user is not supposed to have so let's summarize what",
    "start": "1184630",
    "end": "1192340"
  },
  {
    "text": "we have so far to actually craft the exploits we can fake a nice surface object which is an aggregate object so",
    "start": "1192340",
    "end": "1199840"
  },
  {
    "text": "it has variables so we can fake a variable which means you can hijack the kernel code execution we also have the",
    "start": "1199840",
    "end": "1207580"
  },
  {
    "text": "address of that aisle surface which which means we have the answer which",
    "start": "1207580",
    "end": "1212680"
  },
  {
    "text": "means they have we can bypass map because we can still stick to kernel addresses the only thing we don't have",
    "start": "1212680",
    "end": "1220000"
  },
  {
    "text": "is some some way to bypass a sub KS allowed so that's the last thing we have",
    "start": "1220000",
    "end": "1225880"
  },
  {
    "text": "and then more or less we have all the bypasses for every mitigation in order",
    "start": "1225880",
    "end": "1231310"
  },
  {
    "text": "to I Jack the camel code execution so I at that point I said okay this level is",
    "start": "1231310",
    "end": "1236980"
  },
  {
    "text": "very interesting let's dig further to what it does and I saw that eventually all of those functions lead to the same",
    "start": "1236980",
    "end": "1246030"
  },
  {
    "text": "do the same code into the same yeah the same function so all of those selectors",
    "start": "1246030",
    "end": "1252850"
  },
  {
    "text": "wrote just wrappers to the main logic by the way command gate if someone is",
    "start": "1252850",
    "end": "1258310"
  },
  {
    "text": "interested it's a way it's in a synchronization mechanism in iOS and o6",
    "start": "1258310",
    "end": "1265090"
  },
  {
    "text": "not really relevant to this example but there's also very importance to know so",
    "start": "1265090",
    "end": "1272560"
  },
  {
    "text": "that's how the main logic looks really unpleasant if you have to do a click",
    "start": "1272560",
    "end": "1277870"
  },
  {
    "text": "reverse engineer nevertheless we have to head to reverse engineer it's understand what's going on so let's quickly brief",
    "start": "1277870",
    "end": "1286270"
  },
  {
    "text": "it so the driver is put into X xx the user the user client like the",
    "start": "1286270",
    "end": "1292330"
  },
  {
    "text": "communication channel of the user is put into 22 and something which you are not so exactly sure what is is put into 21",
    "start": "1292330",
    "end": "1299710"
  },
  {
    "text": "and 25 is our input buffer so what I saw",
    "start": "1299710",
    "end": "1305890"
  },
  {
    "text": "someone is that it's takes like I said 25 is our input buffer it takes from X",
    "start": "1305890",
    "end": "1312910"
  },
  {
    "text": "25 a surface channel address which we can control but we can also put a valid journalist here",
    "start": "1312910",
    "end": "1319860"
  },
  {
    "text": "so x 1.is canal an isosurface scandal others it puts idiots also a lot of",
    "start": "1319860",
    "end": "1326400"
  },
  {
    "text": "other information not really relevant i'll surmise it because it's not the important part here what it does it it",
    "start": "1326400",
    "end": "1333390"
  },
  {
    "text": "gets the iris surface object and then like I said before it maps them from all",
    "start": "1333390",
    "end": "1338790"
  },
  {
    "text": "surfaces are meant to map to assured information so it Maps the information",
    "start": "1338790",
    "end": "1344460"
  },
  {
    "text": "to another address space so what eventually it does is it puts into X 26",
    "start": "1344460",
    "end": "1350610"
  },
  {
    "text": "the map of the data of the Isle surface so everything X 26 points to a kernel",
    "start": "1350610",
    "end": "1357750"
  },
  {
    "text": "address which we fully control its content and because it's mapping we can",
    "start": "1357750",
    "end": "1363780"
  },
  {
    "text": "also modify that data and during the execution which unfortunately they",
    "start": "1363780",
    "end": "1369690"
  },
  {
    "text": "cannot didn't consider at all so nothing is locked in buffalo everything that is",
    "start": "1369690",
    "end": "1376110"
  },
  {
    "text": "in this buffer can be changed anytime so what I saw eventually that the camera",
    "start": "1376110",
    "end": "1383220"
  },
  {
    "text": "does is here's the X 23 is the channel address of that mapping mapping it takes",
    "start": "1383220",
    "end": "1390060"
  },
  {
    "text": "some commands from the form X 23 then there is a switch case one of the",
    "start": "1390060",
    "end": "1396540"
  },
  {
    "text": "examples that I saw in that switch case is that it takes a kernel address from that mapping it checks if this kernel",
    "start": "1396540",
    "end": "1404040"
  },
  {
    "text": "address is not now if it's not now mmm if it's null it allocates some data puts",
    "start": "1404040",
    "end": "1409920"
  },
  {
    "text": "it back into the mapping which is also an information disclosure because we get",
    "start": "1409920",
    "end": "1414930"
  },
  {
    "text": "to how to have camel address in the size of X 28 and because it's mapping we can",
    "start": "1414930",
    "end": "1421230"
  },
  {
    "text": "read it and then it takes that pointer and it's it initializes it so not only",
    "start": "1421230",
    "end": "1426570"
  },
  {
    "text": "it's an info leak but we can also initialize the first X 28 bytes of any",
    "start": "1426570",
    "end": "1433050"
  },
  {
    "text": "kernel point that we want which is by itself might sometimes be sufficient to create a full exploit but why borrow",
    "start": "1433050",
    "end": "1440280"
  },
  {
    "text": "when we have such better primitives here so again our goal is to eventually",
    "start": "1440280",
    "end": "1447250"
  },
  {
    "text": "it's the kernel-based to bypass que es Salaam so eventually it gets to some",
    "start": "1447250",
    "end": "1454750"
  },
  {
    "text": "function which is called map y UV input form say Sadie again that's the name because from the",
    "start": "1454750",
    "end": "1460180"
  },
  {
    "text": "idea of it from the KA prints but we don't really have to understand what it means to find the bug there so it gets",
    "start": "1460180",
    "end": "1468370"
  },
  {
    "text": "the soil surface can I let us into it three puts it into our map date map data",
    "start": "1468370",
    "end": "1474700"
  },
  {
    "text": "lots another one late again and what it eventually does is x-23 is our mapping",
    "start": "1474700",
    "end": "1483250"
  },
  {
    "text": "so it takes an integer a controllable integer from there and it also takes a",
    "start": "1483250",
    "end": "1488980"
  },
  {
    "text": "pointer from there now then x2 is get in here and mix to is",
    "start": "1488980",
    "end": "1495160"
  },
  {
    "text": "a point to be completely control now I puts the code here into a pseudo code",
    "start": "1495160",
    "end": "1502270"
  },
  {
    "text": "because in assembly it's a little bit more annoying so and I want everyone to understand so controllable pointer is",
    "start": "1502270",
    "end": "1508720"
  },
  {
    "text": "the mapped pointer we put there from here so it's it's something we",
    "start": "1508720",
    "end": "1516610"
  },
  {
    "text": "completely control it puts there a mapping then it extracts the the address",
    "start": "1516610",
    "end": "1522790"
  },
  {
    "text": "in from that pointer and then what it does it from data extracted address it's",
    "start": "1522790",
    "end": "1528520"
  },
  {
    "text": "the references this address in specific offsets into our controllable pointer",
    "start": "1528520",
    "end": "1534160"
  },
  {
    "text": "then in some of that it checks whether this is it checked keyword it checks",
    "start": "1534160",
    "end": "1539950"
  },
  {
    "text": "well the high 32 bits are zero and if",
    "start": "1539950",
    "end": "1545530"
  },
  {
    "text": "you're not and the kernel panics so this is a very interesting primitive view",
    "start": "1545530",
    "end": "1551920"
  },
  {
    "text": "because we can put any others we want into controllable pointer and we can read from that address so we can have a",
    "start": "1551920",
    "end": "1559180"
  },
  {
    "text": "very powerful in folic now the reason again that this is not there isn't that",
    "start": "1559180",
    "end": "1564970"
  },
  {
    "text": "here it's any others we want and not iOS surface buffer manager is because this",
    "start": "1564970",
    "end": "1570310"
  },
  {
    "text": "is a controllable pointer so after iOS surface before manager is being put here we can still change the content of that",
    "start": "1570310",
    "end": "1577870"
  },
  {
    "text": "pointer because this is the point of a completely control so if you put it in if we point it into",
    "start": "1577870",
    "end": "1583600"
  },
  {
    "text": "something we control you can just change it right after it sets your day before manager so if we summarize the problem",
    "start": "1583600",
    "end": "1593230"
  },
  {
    "text": "we have here our expert if you want to leak a specific address at least one of",
    "start": "1593230",
    "end": "1599680"
  },
  {
    "text": "those rules have to happen because if you want to lick pad with 100 we can",
    "start": "1599680",
    "end": "1606130"
  },
  {
    "text": "take 100 - 38 and then we have to make sure that you know that Delta plus 50 is",
    "start": "1606130",
    "end": "1612910"
  },
  {
    "text": "not here and that's the summarize of our primitive at least if one of those",
    "start": "1612910",
    "end": "1618130"
  },
  {
    "text": "addresses is not now we can lick any other so the address and of course",
    "start": "1618130",
    "end": "1623410"
  },
  {
    "text": "because this is just the reference in kernel memory mix has to be a valid kernel address so here we have an info",
    "start": "1623410",
    "end": "1631240"
  },
  {
    "text": "leak we have heap in Falak we have sort of semi absolutes Colonel Reed and you",
    "start": "1631240",
    "end": "1638470"
  },
  {
    "text": "have a channel called hijack so we have a lot of freight is let's see if we can",
    "start": "1638470",
    "end": "1643720"
  },
  {
    "text": "craft and exploit from all of them so our plan is as follows first we create",
    "start": "1643720",
    "end": "1650410"
  },
  {
    "text": "an our surface object we will lick its can huddle address because we have the vulnerability that gives us the general",
    "start": "1650410",
    "end": "1657520"
  },
  {
    "text": "address from any surface ID and then we somehow have to lick the kernel base to",
    "start": "1657520",
    "end": "1666000"
  },
  {
    "text": "me to find the K cellar slide calculation we three with three the the",
    "start": "1666000",
    "end": "1672250"
  },
  {
    "text": "i/o surface object we spray data in the same size so our spray data gets into",
    "start": "1672250",
    "end": "1678010"
  },
  {
    "text": "the same kernel address we have to so that it gets in the same channel address but statistics show that this is",
    "start": "1678010",
    "end": "1685320"
  },
  {
    "text": "unbelievably available and then we give the kernel address to the channel and",
    "start": "1685320",
    "end": "1690820"
  },
  {
    "text": "they cannot believe it's a real surface object because that's the first one",
    "start": "1690820",
    "end": "1696780"
  },
  {
    "text": "availability I showed here this time we can put different V table pointer for",
    "start": "1696780",
    "end": "1702250"
  },
  {
    "text": "example which will lead to execution of the kernel to somewhere else you want",
    "start": "1702250",
    "end": "1709240"
  },
  {
    "text": "and ultimately our goal is to get can read write gives sell food and enjoy your life so again",
    "start": "1709240",
    "end": "1717420"
  },
  {
    "text": "and let's see how we take advantages of an advantage of the absolute it so again",
    "start": "1717420",
    "end": "1728130"
  },
  {
    "text": "our goal is to lick a constant journal address so we can calculate this slide",
    "start": "1728130",
    "end": "1733410"
  },
  {
    "text": "between the leeks address and the original artists so again X has to be a",
    "start": "1733410",
    "end": "1739710"
  },
  {
    "text": "valid journalist so we do have a valid kernel address we have the i/o surface object which is a can a valid key others",
    "start": "1739710",
    "end": "1747180"
  },
  {
    "text": "so let's start to see if we can somehow leak something constant from the coladas",
    "start": "1747180",
    "end": "1753020"
  },
  {
    "text": "obviously the first thing that comes to mind is the V table because it's always it's a content is constant Cutlass",
    "start": "1753020",
    "end": "1760010"
  },
  {
    "text": "always slided from the candelabras so that's the Isle surface object and again",
    "start": "1760010",
    "end": "1768690"
  },
  {
    "text": "these are the offsets we have we need X 18 1 C and 3 C so 18 is that one C is",
    "start": "1768690",
    "end": "1779780"
  },
  {
    "text": "also that and 3 C is the current is the",
    "start": "1779780",
    "end": "1787020"
  },
  {
    "text": "memory descriptor and unfortunately this is never now and remember this crypto is",
    "start": "1787020",
    "end": "1795900"
  },
  {
    "text": "the memo is that actually it's the actual memory that the object that map's the data of the earth surface so of",
    "start": "1795900",
    "end": "1802530"
  },
  {
    "text": "course this is also never not so we can't unfortunately leak the V table of the i/o surface but lucky for us",
    "start": "1802530",
    "end": "1811290"
  },
  {
    "text": "pirate surface is a very big object so I just reversed I just kept understanding",
    "start": "1811290",
    "end": "1818400"
  },
  {
    "text": "what's the other parameters the other variables of the object are so our",
    "start": "1818400",
    "end": "1824100"
  },
  {
    "text": "surface creates and an object surface maintains the list of something called",
    "start": "1824100",
    "end": "1829290"
  },
  {
    "text": "IO fence we don't really have to understand a lot about it it's just a second ization object that our surface",
    "start": "1829290",
    "end": "1835740"
  },
  {
    "text": "uses it so it actually has a list of those and lucky for us after that list",
    "start": "1835740",
    "end": "1842910"
  },
  {
    "text": "there is a lot of controllable information these are called bulks I",
    "start": "1842910",
    "end": "1848849"
  },
  {
    "text": "have no idea what they actually used for but we can completely control them so",
    "start": "1848849",
    "end": "1854489"
  },
  {
    "text": "everything we see here is completely controlled by the user so we want to",
    "start": "1854489",
    "end": "1861119"
  },
  {
    "text": "lick either one of those lists so lucky for us if we control everything here we",
    "start": "1861119",
    "end": "1867299"
  },
  {
    "text": "are able to actually click one of the 1n and I offense object so now once we have",
    "start": "1867299",
    "end": "1874109"
  },
  {
    "text": "it let's see how our face looks and when we can lick its variable so most of the",
    "start": "1874109",
    "end": "1880679"
  },
  {
    "text": "of the offsets we need to be zero or not snarl lucky for us the last one is zero",
    "start": "1880679",
    "end": "1887940"
  },
  {
    "text": "if the eye offense is in a surface kill now because we lick the eye offence form",
    "start": "1887940",
    "end": "1894479"
  },
  {
    "text": "a surface skill that it must be in surface skill which means completed is never zero in our case so we can lick",
    "start": "1894479",
    "end": "1900209"
  },
  {
    "text": "the vtable and calculate the aslo so back to our plan we create an object in",
    "start": "1900209",
    "end": "1907769"
  },
  {
    "text": "our surface object lick the address now we can lick a vtable of an eye offence",
    "start": "1907769",
    "end": "1913169"
  },
  {
    "text": "so we can calculate the ksl of slide 3d surface spray with a fake object with a",
    "start": "1913169",
    "end": "1920519"
  },
  {
    "text": "fake v table and then hijack the code execution now what I wanted to do here",
    "start": "1920519",
    "end": "1928019"
  },
  {
    "text": "is to have the best spray the best reliable spray ever so that I wanted to",
    "start": "1928019",
    "end": "1934529"
  },
  {
    "text": "make the exploit as reliable and stable as possible and now for those of you who",
    "start": "1934529",
    "end": "1939989"
  },
  {
    "text": "are not familiar with I was spraying there is a very common play Colonel hips",
    "start": "1939989",
    "end": "1946950"
  },
  {
    "text": "playing iOS and our six as well and I all uncivilized XML you just give an XML",
    "start": "1946950",
    "end": "1953759"
  },
  {
    "text": "to the kernel they can serialize the XML object which by the way had a very",
    "start": "1953759",
    "end": "1959219"
  },
  {
    "text": "interesting vulnerability I think it was last year yeah",
    "start": "1959219",
    "end": "1965070"
  },
  {
    "text": "and anyway so but there are a few problems with that first of all there is",
    "start": "1965070",
    "end": "1972299"
  },
  {
    "text": "up to this presentation I didn't see any persistent family so usually",
    "start": "1972299",
    "end": "1978040"
  },
  {
    "text": "can you just answer as the XML extract the relevant information and then",
    "start": "1978040",
    "end": "1984130"
  },
  {
    "text": "immediately free that information and I also didn't want any limitation on the spread data and I wanted to be able to",
    "start": "1984130",
    "end": "1990430"
  },
  {
    "text": "spray as many times as possible and so luckily if lucky for us",
    "start": "1990430",
    "end": "1996520"
  },
  {
    "text": "I'll surface maintains a list of properties which are written as an XML",
    "start": "1996520",
    "end": "2002070"
  },
  {
    "text": "data so why do we select online for those of you interested so what it does",
    "start": "2002070",
    "end": "2009860"
  },
  {
    "text": "it just uncivilized or invalid data then it gets the first object as the value",
    "start": "2009860",
    "end": "2016710"
  },
  {
    "text": "the second object as the key and then it just puts that into dictionary",
    "start": "2016710",
    "end": "2022140"
  },
  {
    "text": "dictionary which our surface holds that's how the set value function looks",
    "start": "2022140",
    "end": "2028380"
  },
  {
    "text": "like it just checks that the key the key is nuts creation properties and if it's not it",
    "start": "2028380",
    "end": "2035070"
  },
  {
    "text": "just calls the it just takes the all properties dictionary and such puts the",
    "start": "2035070",
    "end": "2040440"
  },
  {
    "text": "other object which is the key and the value is supplied so yeah so this is",
    "start": "2040440",
    "end": "2047820"
  },
  {
    "text": "very good for us because it's persistent in the memory because these are only properties that are being kept in the",
    "start": "2047820",
    "end": "2054120"
  },
  {
    "text": "memory we can spray pretty much any data we want because there was no specific limitation the implementation as long as",
    "start": "2054120",
    "end": "2060960"
  },
  {
    "text": "it's valid as long as our XML is valid and we can do that as many times as we",
    "start": "2060960",
    "end": "2066929"
  },
  {
    "text": "want we can put as many values as you want into the i/o surface object and we",
    "start": "2066929",
    "end": "2071970"
  },
  {
    "text": "can create a door thing that is an actual limitation on the number of i/o",
    "start": "2071970",
    "end": "2077580"
  },
  {
    "text": "surfaces just the common memory limitation and but that's not everything about display and this is the first time",
    "start": "2077580",
    "end": "2084360"
  },
  {
    "text": "I saw a good channel generic Kalakh can display in iOS like that it's not only",
    "start": "2084360",
    "end": "2092879"
  },
  {
    "text": "that you can put and set those properties you can also with those",
    "start": "2092880",
    "end": "2098580"
  },
  {
    "text": "properties back because that's that's the point of those properties if you can set them you can also read them back which means that we can also everything",
    "start": "2098580",
    "end": "2106980"
  },
  {
    "text": "respite can be read back so for example if we spray the channel and the channel modifiers our spread",
    "start": "2106980",
    "end": "2113390"
  },
  {
    "text": "data due to another vulnerability we can just read back from any Kiwi ones our",
    "start": "2113390",
    "end": "2120110"
  },
  {
    "text": "data so eventually we can also also hit hit our information so this is extremely",
    "start": "2120110",
    "end": "2127580"
  },
  {
    "text": "powerful it can save us for example an information disclosure because again if",
    "start": "2127580",
    "end": "2132710"
  },
  {
    "text": "the if for example we we spray in an object and then the kernel are no puts",
    "start": "2132710",
    "end": "2138950"
  },
  {
    "text": "it into a list we can leak that list if it's a linked list just that's just one",
    "start": "2138950",
    "end": "2144020"
  },
  {
    "text": "example and this is extremely useful for us playing in a camel hip sprain in iOS",
    "start": "2144020",
    "end": "2151340"
  },
  {
    "text": "and o6 now again my goal is to the goals",
    "start": "2151340",
    "end": "2156500"
  },
  {
    "text": "are have arbitrary kernel he general memory read write and we I also want to",
    "start": "2156500",
    "end": "2161630"
  },
  {
    "text": "be able to call any function and I want to be do that to be able to do that anytime I want without any statistics in",
    "start": "2161630",
    "end": "2169700"
  },
  {
    "text": "mind so deterministically so our current primitive is to hijack I put a fake V",
    "start": "2169700",
    "end": "2177650"
  },
  {
    "text": "table so we can we can hijack any channel out of three ones so you can call any candle address we want and we",
    "start": "2177650",
    "end": "2183890"
  },
  {
    "text": "control only or we control only the first parameter which is the actual the",
    "start": "2183890",
    "end": "2189980"
  },
  {
    "text": "actual spray of react we had so now it's time for to look for the gadget so there",
    "start": "2189980",
    "end": "2197450"
  },
  {
    "text": "is a very fair now it's a very famous gadget called on unsterilized theorized again we",
    "start": "2197450",
    "end": "2204590"
  },
  {
    "text": "control x 0 3 control both these X 1 X 3",
    "start": "2204590",
    "end": "2210280"
  },
  {
    "text": "then we control X 9 because it also derives from extent and eventually X 3",
    "start": "2210280",
    "end": "2217580"
  },
  {
    "text": "is again something that we control so this gives us the opportunity to control",
    "start": "2217580",
    "end": "2222650"
  },
  {
    "text": "the first parameter X 0 the second parameter X 1 and we can jump to any",
    "start": "2222650",
    "end": "2229220"
  },
  {
    "text": "function 1 we are not able to control the third parameter however so what I did here I wanted to be able to con a I",
    "start": "2229220",
    "end": "2236510"
  },
  {
    "text": "had to put interesting stuff into extent and 18 so extent is just the kernel spread",
    "start": "2236510",
    "end": "2246160"
  },
  {
    "text": "address plus some offset X 18 is what we",
    "start": "2246160",
    "end": "2251830"
  },
  {
    "text": "will see soon be the third parameter for a final vote so it free is just that see",
    "start": "2251830",
    "end": "2260230"
  },
  {
    "text": "Scott I'll handle size twice and X 20 is just calling unsterilized also always",
    "start": "2260230",
    "end": "2267910"
  },
  {
    "text": "say let us analyze again what will happen is that we will get to that function again and we are going to have",
    "start": "2267910",
    "end": "2276060"
  },
  {
    "text": "to use that as the first parameter the",
    "start": "2276060",
    "end": "2281530"
  },
  {
    "text": "second parameter is going to be X 18 from before because we control X 1 so if",
    "start": "2281530",
    "end": "2287710"
  },
  {
    "text": "we call it again it's going to be X 8 so it's the third parameter this is the",
    "start": "2287710",
    "end": "2293170"
  },
  {
    "text": "fill parameter the the second parameter is going it is going to be LD cache size",
    "start": "2293170",
    "end": "2299440"
  },
  {
    "text": "handler which is a sis cattle and the function we are going to call is copy in",
    "start": "2299440",
    "end": "2305910"
  },
  {
    "text": "which gives us a new industry primitive we can call any function we want and",
    "start": "2305910",
    "end": "2313170"
  },
  {
    "text": "control the first three arguments which is enough for a single deterministic",
    "start": "2313170",
    "end": "2320290"
  },
  {
    "text": "right on the kernel arbitrary address arbitrary data and arbitrary size so",
    "start": "2320290",
    "end": "2326670"
  },
  {
    "text": "what should be over right so a small so",
    "start": "2326670",
    "end": "2333130"
  },
  {
    "text": "my guess most you know there is a new mitigation Apple did its kpp or a MCC so",
    "start": "2333130",
    "end": "2340510"
  },
  {
    "text": "unfortunately we can't override constants or we can and we also cannot",
    "start": "2340510",
    "end": "2346690"
  },
  {
    "text": "override kernel make a text so kernel code so we cannot override",
    "start": "2346690",
    "end": "2352350"
  },
  {
    "text": "we cannot change V tables because they are constant but what Apple didn't",
    "start": "2352350",
    "end": "2358350"
  },
  {
    "text": "protect is this cattle now the reason sis cattle are not",
    "start": "2358350",
    "end": "2364960"
  },
  {
    "text": "protected is that they are dynamically loaded and therefore they cannot be",
    "start": "2364960",
    "end": "2370200"
  },
  {
    "text": "static they cannot be it that's why the function point tell us",
    "start": "2370200",
    "end": "2375230"
  },
  {
    "text": "which Apple did not protect and we can override it so again our goal is to be able to",
    "start": "2375230",
    "end": "2381339"
  },
  {
    "text": "authorize to be able to be able to read write and Bob deterministically anytime",
    "start": "2381339",
    "end": "2387589"
  },
  {
    "text": "we want so what it is and by of course wiper sync npc and all the new medications Smurfs and everything so what I did was",
    "start": "2387589",
    "end": "2394819"
  },
  {
    "text": "I of about - Cisco tells one of them to walk to my spread data to my splayed",
    "start": "2394819",
    "end": "2403369"
  },
  {
    "text": "channel address and the second one is to modify my sprite channel address again",
    "start": "2403369",
    "end": "2408589"
  },
  {
    "text": "because I wanted to be deterministic so once we established a successful single right I want to be able to establish as",
    "start": "2408589",
    "end": "2415849"
  },
  {
    "text": "many red lights as possible so the way it looks is that I have two sisters so",
    "start": "2415849",
    "end": "2424430"
  },
  {
    "text": "the first one of them over lights our spreads data which is which resides in",
    "start": "2424430",
    "end": "2431869"
  },
  {
    "text": "the kernel so we over also we overcome this map our mitigation the second sis",
    "start": "2431869",
    "end": "2438109"
  },
  {
    "text": "cattle takes a small portion from our spread data and wops based and issues",
    "start": "2438109",
    "end": "2444470"
  },
  {
    "text": "hope to always realize or serialize based on this data so again what I want",
    "start": "2444470",
    "end": "2450680"
  },
  {
    "text": "to do to actually issue any call is call sis cattle and once this cattle to",
    "start": "2450680",
    "end": "2457640"
  },
  {
    "text": "modify my data call this second one to use my kernel resided modified data and",
    "start": "2457640",
    "end": "2463369"
  },
  {
    "text": "then we can we can get to any others to job or up to any other swans so the way",
    "start": "2463369",
    "end": "2470390"
  },
  {
    "text": "it looks is first of all we we have two valid Cisco cells we call formal first",
    "start": "2470390",
    "end": "2479499"
  },
  {
    "text": "call we call our sterilizer serialize we control only the first two arguments we",
    "start": "2479829",
    "end": "2486680"
  },
  {
    "text": "call over serialize until all civilized civilized again this time we control",
    "start": "2486680",
    "end": "2492470"
  },
  {
    "text": "three arguments we call from that I mean we call again using those control three",
    "start": "2492470",
    "end": "2499430"
  },
  {
    "text": "arguments we call copying which overrides those two sis Qatar's and now",
    "start": "2499430",
    "end": "2505099"
  },
  {
    "text": "every time I want to call some function I call once eschaton this cattle calls copying which is",
    "start": "2505099",
    "end": "2512079"
  },
  {
    "text": "constant which constantly overrides a specific kernel address which is our",
    "start": "2512079",
    "end": "2517099"
  },
  {
    "text": "spread data so we override some parameters here this second sis cattle",
    "start": "2517099",
    "end": "2522679"
  },
  {
    "text": "will call the oil de-serialize a gadget which will call itself again to control",
    "start": "2522679",
    "end": "2529309"
  },
  {
    "text": "three arguments which which ultimately will call our modified data this way we",
    "start": "2529309",
    "end": "2535639"
  },
  {
    "text": "can achieve kernel readwrite and kernel",
    "start": "2535639",
    "end": "2541009"
  },
  {
    "text": "function call deterministically and so we have we have cantaloupe so the way",
    "start": "2541009",
    "end": "2548989"
  },
  {
    "text": "how are we going to achieve cannily rights so because we can call any kind address we can also call copying and",
    "start": "2548989",
    "end": "2555049"
  },
  {
    "text": "copy out which means we have arbitrary candlelit light from user",
    "start": "2555049",
    "end": "2560329"
  },
  {
    "text": "deterministically and that's it we that's the exploit the capabilities were",
    "start": "2560329",
    "end": "2565549"
  },
  {
    "text": "looking for and we successfully successfully achieved them so a few auto",
    "start": "2565549",
    "end": "2571519"
  },
  {
    "text": "jailbreak the exploit is available on",
    "start": "2571519",
    "end": "2576919"
  },
  {
    "text": "github you can download it and just use it in goods friendly behavior and not in",
    "start": "2576919",
    "end": "2586339"
  },
  {
    "text": "any unintended way about jailbreaks so I said before that I don't intend to walk",
    "start": "2586339",
    "end": "2593419"
  },
  {
    "text": "on a jailbreak not because I am against it I think javac is a very important",
    "start": "2593419",
    "end": "2599299"
  },
  {
    "text": "power part of iOS it's just that Cydia in my opinion is not good enough we have",
    "start": "2599299",
    "end": "2605989"
  },
  {
    "text": "kernel exploits we will always probably have them CD has to be refactored and changed to",
    "start": "2605989",
    "end": "2614239"
  },
  {
    "text": "be able to walk good with a MCC and kpp now Ziva I test the diva on ten point",
    "start": "2614239",
    "end": "2622609"
  },
  {
    "text": "three point one with with triple fetch and I got it to be very stable and so at",
    "start": "2622609",
    "end": "2628939"
  },
  {
    "text": "least ten point three point fund is possible to be a pound if you want to experiment with that ten point two point",
    "start": "2628939",
    "end": "2636889"
  },
  {
    "text": "one already has a working experts for some devices the only the only reason",
    "start": "2636889",
    "end": "2641960"
  },
  {
    "text": "TenPoint 3.1 wasn't implemented in my opinion it's just um just because of the",
    "start": "2641960",
    "end": "2648320"
  },
  {
    "text": "offsets nobody actually took the liberty of modifying the offsets for ten point three point one other than that I don't",
    "start": "2648320",
    "end": "2655340"
  },
  {
    "text": "see why someone wouldn't use it by the way someone did write a jailbreak for",
    "start": "2655340",
    "end": "2662060"
  },
  {
    "text": "ten point two point one by using Ziva I didn't test it myself though so",
    "start": "2662060",
    "end": "2667930"
  },
  {
    "text": "conclusion given a little surprise and this is closure timeline so I must say",
    "start": "2667930",
    "end": "2675410"
  },
  {
    "text": "Apple are not abuse the first vandal I'm walking on but they have been the best",
    "start": "2675410",
    "end": "2680540"
  },
  {
    "text": "one in communicating in communication with security researchers they are very open and friendly they listened listens",
    "start": "2680540",
    "end": "2688490"
  },
  {
    "text": "to my opinion suggestions and they actually cooperated with some babies I",
    "start": "2688490",
    "end": "2693800"
  },
  {
    "text": "asked them to do some changes in the advisory and they did it unlike other vendors and they never",
    "start": "2693800",
    "end": "2699380"
  },
  {
    "text": "ignored me and which is something that sounds that it sounds like that's a way to be but it I mean other vendors just",
    "start": "2699380",
    "end": "2706580"
  },
  {
    "text": "stopped the communication for some reason it is compared currently in my",
    "start": "2706580",
    "end": "2713330"
  },
  {
    "text": "opinion the most secure operating system the still some work still has to be done",
    "start": "2713330",
    "end": "2720280"
  },
  {
    "text": "but I mean we are getting there FL adding ever led any new very powerful",
    "start": "2720280",
    "end": "2726710"
  },
  {
    "text": "mitigations over the time now in iOS 11 in - eggs Apple fix all the bugs and",
    "start": "2726710",
    "end": "2733910"
  },
  {
    "text": "that's it we can purple stuff and go home or not and so I just I wanted to give a little",
    "start": "2733910",
    "end": "2740480"
  },
  {
    "text": "bit a small sneak peek about a new project we are working on it's a kernel exploits this time",
    "start": "2740480",
    "end": "2748610"
  },
  {
    "text": "accessible from the sandbox a very powerful kernel buffer overflow",
    "start": "2748610",
    "end": "2754480"
  },
  {
    "text": "unfortunately I can't give more information about that because Apple asked me asks me enough to but I",
    "start": "2754480",
    "end": "2761240"
  },
  {
    "text": "promised to put a working for at least the full crash because I did not explore",
    "start": "2761240",
    "end": "2767990"
  },
  {
    "text": "it to be to be completely working so far like a full would exploit but I think it does have",
    "start": "2767990",
    "end": "2775960"
  },
  {
    "text": "potential and what we see here is iPhone 10 11 point one point two eleven eleven",
    "start": "2775960",
    "end": "2782590"
  },
  {
    "text": "point two was released this week I didn't have the time to upgrade and test it I'm not sure if Apple fix that or not",
    "start": "2782590",
    "end": "2788470"
  },
  {
    "text": "I think they did but I'm not sure if you want I also have the device here with me",
    "start": "2788470",
    "end": "2795820"
  },
  {
    "text": "so someone wants to see like the version and everything and the device crashes you know I don't think it's that's",
    "start": "2795820",
    "end": "2802800"
  },
  {
    "text": "important but if you want to see it then can come and asks later and so that was",
    "start": "2802800",
    "end": "2810760"
  },
  {
    "text": "it thank you very much if you have questions about everything as long as it's not oh an 88 jailbreak",
    "start": "2810760",
    "end": "2818380"
  },
  {
    "text": "but job like questions are also welcome to you that's the time thank you very",
    "start": "2818380",
    "end": "2823480"
  },
  {
    "text": "much I hope you enjoyed the presentation and i beautiful questions any questions",
    "start": "2823480",
    "end": "2836610"
  },
  {
    "text": "yeah I mean someone's coming with a microphone just a second",
    "start": "2836610",
    "end": "2843060"
  },
  {
    "text": "hi thank you very well presentation Thanks just a quick question that however",
    "start": "2845869",
    "end": "2853380"
  },
  {
    "text": "everybody is always asking never got a question that answered how much time",
    "start": "2853380",
    "end": "2858450"
  },
  {
    "text": "this type of thing cost and work and how much about about this device right yeah",
    "start": "2858450",
    "end": "2865200"
  },
  {
    "text": "well finding this and exploiting that and making work okay so the IO surface",
    "start": "2865200",
    "end": "2872819"
  },
  {
    "text": "hijack vulnerability and the information disclosure it was like I don't know it",
    "start": "2872819",
    "end": "2879390"
  },
  {
    "text": "was already done on the same day the problem I mean the the thing that took",
    "start": "2879390",
    "end": "2885539"
  },
  {
    "text": "most of the time was first of all the information disclosure second of all debugging those crashes is",
    "start": "2885539",
    "end": "2895769"
  },
  {
    "text": "an unpleasant process you have to read from a crash dump you have to fetch it and it with device specifically because",
    "start": "2895769",
    "end": "2904589"
  },
  {
    "text": "it requires a sandbox escape each iteration you wanted you needed a sandbox escape and debug was written",
    "start": "2904589",
    "end": "2911489"
  },
  {
    "text": "before the I mean I could always do it on earlier versions then 10.2 but",
    "start": "2911489",
    "end": "2918569"
  },
  {
    "text": "actually debugging it is not the most pleasant experience but from the point that I said from the point I found the",
    "start": "2918569",
    "end": "2925559"
  },
  {
    "text": "first I hijack a execution which was the",
    "start": "2925559",
    "end": "2931559"
  },
  {
    "text": "first day of the researcher of that title till the day I said okay we're done it was within a time range of less",
    "start": "2931559",
    "end": "2939479"
  },
  {
    "text": "than two weeks everything so I think and it required more time because I",
    "start": "2939479",
    "end": "2944809"
  },
  {
    "text": "dependent on another information disclosure vulnerability but unfortunately it didn't work out 12 19",
    "start": "2944809",
    "end": "2952739"
  },
  {
    "text": "different problems so I really had to work most I didn't expect this delay I think it would could have been done in",
    "start": "2952739",
    "end": "2959670"
  },
  {
    "text": "less time but everything was in one and a half weeks maybe something like that",
    "start": "2959670",
    "end": "2964920"
  },
  {
    "text": "so that's it any other questions",
    "start": "2964920",
    "end": "2969828"
  },
  {
    "text": "I just wanted to more about the questions and it's not always the case",
    "start": "2971470",
    "end": "2977620"
  },
  {
    "text": "it really depends on the vulnerabilities and on the left how reliable you want the exploit to be how many version",
    "start": "2977620",
    "end": "2984190"
  },
  {
    "text": "versions you have to support and a good Pacific deterministic exploit in my",
    "start": "2984190",
    "end": "2990160"
  },
  {
    "text": "opinion again it depends on the primitives you have might take again it might take sometimes six months and I",
    "start": "2990160",
    "end": "2996850"
  },
  {
    "text": "take one month it might take three days again depends on the primitives you have",
    "start": "2996850",
    "end": "3001950"
  },
  {
    "text": "so that's my two cents about it any other questions okay so thank you",
    "start": "3001950",
    "end": "3010290"
  },
  {
    "text": "very much",
    "start": "3010290",
    "end": "3012620"
  }
]