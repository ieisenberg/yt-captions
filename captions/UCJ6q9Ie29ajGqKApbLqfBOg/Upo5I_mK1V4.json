[
  {
    "text": "[Music]",
    "start": "1700",
    "end": "4810"
  },
  {
    "text": "today I'm going to be talking about the early launch anti-mower system also known as Elam this is Microsoft's",
    "start": "7519",
    "end": "15859"
  },
  {
    "text": "anti-tampering mechanism that they offer to well not only themselves like in",
    "start": "15859",
    "end": "21300"
  },
  {
    "text": "Defender for endpoints uh Defender AV but also like any third party",
    "start": "21300",
    "end": "27140"
  },
  {
    "text": "endpoint vendors can opt into this security feature",
    "start": "27140",
    "end": "32398"
  },
  {
    "text": "all right so a brief introduction into Elam and PPL protected process light",
    "start": "32399",
    "end": "37920"
  },
  {
    "text": "processes but before I get started I just want to give credit where credit is due",
    "start": "37920",
    "end": "44820"
  },
  {
    "text": "um even like any work that is novel it's derivative in some way and so this is no",
    "start": "44820",
    "end": "50940"
  },
  {
    "text": "exception so I just want to give a shout out to James Forshaw and Alex aionesku this work wouldn't have been possible",
    "start": "50940",
    "end": "57480"
  },
  {
    "text": "without all of the previous work that they did especially this talk that they gave at Recon in 2018 so recommend you",
    "start": "57480",
    "end": "64978"
  },
  {
    "text": "check it out and if you ever run into them thank them for all their awesome research",
    "start": "64979",
    "end": "71780"
  },
  {
    "text": "so protect the processes I could have a dedicated talk just to",
    "start": "71820",
    "end": "77100"
  },
  {
    "text": "this Alex and James have done talks on this as well so I'm not going to get",
    "start": "77100",
    "end": "82439"
  },
  {
    "text": "super into the weeds here so I just like to offer a very high level description",
    "start": "82439",
    "end": "88380"
  },
  {
    "text": "of the protective process mechanisms and how they apply to the Elam ecosystem so",
    "start": "88380",
    "end": "96479"
  },
  {
    "text": "a PPL process the protections that they afford is it's designed to prevent",
    "start": "96479",
    "end": "101820"
  },
  {
    "text": "tampering in user mode so emphasis on that all of this work is scoped to",
    "start": "101820",
    "end": "107159"
  },
  {
    "text": "attacking everything in user mode all of these anti-tampering mechanisms",
    "start": "107159",
    "end": "113220"
  },
  {
    "text": "like if you could abuse a signed driver you can bypass all these things anyway",
    "start": "113220",
    "end": "118500"
  },
  {
    "text": "but we're just going to keep things scoped again to to use a mode and it's designed to prevent uh admin tampering",
    "start": "118500",
    "end": "125820"
  },
  {
    "text": "as well even things running as system so you can't start or stop a protected",
    "start": "125820",
    "end": "131520"
  },
  {
    "text": "process like more specifically it's harder to stop than it is to start a protective process you can't get a",
    "start": "131520",
    "end": "138360"
  },
  {
    "text": "handle to a protected process you can't attach a debugger they're really hard to actually troubleshoot if you don't have",
    "start": "138360",
    "end": "145379"
  },
  {
    "text": "all the right signers in place to troubleshoot and debug these things in a",
    "start": "145379",
    "end": "150840"
  },
  {
    "text": "legitimate scenario um and in order to run protected at the anti-mower light level which is what",
    "start": "150840",
    "end": "158040"
  },
  {
    "text": "we're going to be talking about here today the executable must meet very specific signing requirements and we'll",
    "start": "158040",
    "end": "164340"
  },
  {
    "text": "get into a very explicit detail about what those signing requirements are and how we can possibly take advantage of",
    "start": "164340",
    "end": "170879"
  },
  {
    "text": "them so in order to opt in to running as a",
    "start": "170879",
    "end": "176900"
  },
  {
    "text": "PPL anti-malware light process again this is what all third party vendors but",
    "start": "176900",
    "end": "183180"
  },
  {
    "text": "also first party Microsoft products get to opt into you need an Elon driver",
    "start": "183180",
    "end": "189599"
  },
  {
    "text": "so in this driver you don't actually have to implement any code now there are",
    "start": "189599",
    "end": "196019"
  },
  {
    "text": "like early launch hooks that you could Implement in that driver if you wanted to do some like signature checking uh",
    "start": "196019",
    "end": "203760"
  },
  {
    "text": "very early in the boot process but the only thing that you really need in this driver is a binary resource that",
    "start": "203760",
    "end": "211200"
  },
  {
    "text": "specifies which signers are allowed to run as anti-mower light services",
    "start": "211200",
    "end": "219140"
  },
  {
    "text": "and in order to be approved to um to be co-signed by Microsoft as an",
    "start": "220500",
    "end": "225780"
  },
  {
    "text": "elom driver you have to submit your driver to Microsoft and also be a member",
    "start": "225780",
    "end": "231120"
  },
  {
    "text": "of the rather exclusive Microsoft virus Initiative Program",
    "start": "231120",
    "end": "236420"
  },
  {
    "text": "so I'll talk a little bit about how I went about doing initial Recon and just",
    "start": "236700",
    "end": "241739"
  },
  {
    "text": "discovering like what was available so that I could better understand um how Elam drivers are structured what",
    "start": "241739",
    "end": "249540"
  },
  {
    "text": "the rules in them actually mean when it comes to the designers that are allowed to run as a protected service so what",
    "start": "249540",
    "end": "257040"
  },
  {
    "text": "you're seeing here is this is the traditional way that an Elon driver is supposed to be registered we're looking",
    "start": "257040",
    "end": "263580"
  },
  {
    "text": "at WD boots this is the the Microsoft Defender AV Elon driver this will be",
    "start": "263580",
    "end": "269460"
  },
  {
    "text": "installed by default on any Windows system they're supposed to be installed as a service in the early launch Service",
    "start": "269460",
    "end": "278160"
  },
  {
    "text": "Group so this wmi query would just list all of those out now I said this is the",
    "start": "278160",
    "end": "285000"
  },
  {
    "text": "default way of installing it as we'll see later on you don't actually have to",
    "start": "285000",
    "end": "290100"
  },
  {
    "text": "install the Elon driver in this way you can just call an API to get it registered",
    "start": "290100",
    "end": "296220"
  },
  {
    "text": "so in the rule sets in the Elon driver and that binary resource there is a list",
    "start": "296220",
    "end": "302520"
  },
  {
    "text": "of signer hashes and those signer hashes correspond to the certificates that are",
    "start": "302520",
    "end": "308820"
  },
  {
    "text": "allowed to start a service protected at the anti-malware light level now these",
    "start": "308820",
    "end": "314880"
  },
  {
    "text": "aren't the typical certificate hashes that you may be accustomed to specifically thumb prints which is the",
    "start": "314880",
    "end": "322199"
  },
  {
    "text": "Shawan hash of the certificate rather these are TPS or 2B side hashes those of",
    "start": "322199",
    "end": "329520"
  },
  {
    "text": "you who may be familiar with Windows Defender um application control you may have seen",
    "start": "329520",
    "end": "335580"
  },
  {
    "text": "these quite a bit it's just a slightly different hashing algorithm I don't know the mechanics behind it but",
    "start": "335580",
    "end": "342900"
  },
  {
    "text": "it's based on the hashing algorithm that's specified in the certificate so it's just a slightly different",
    "start": "342900",
    "end": "348360"
  },
  {
    "text": "representation of the hash now unfortunately what made some of this",
    "start": "348360",
    "end": "354360"
  },
  {
    "text": "research a little bit more challenging is that virustotal doesn't understand TBS hashes it understands thumb prints",
    "start": "354360",
    "end": "362280"
  },
  {
    "text": "so you can search for binaries uh based on on thumbprint which is great",
    "start": "362280",
    "end": "368880"
  },
  {
    "text": "um so but if you're auditing these drivers and pulling out all the rules you may not necessarily be able to go",
    "start": "368880",
    "end": "376259"
  },
  {
    "text": "easily identify what the corresponding executables would be that could run protected",
    "start": "376259",
    "end": "382880"
  },
  {
    "text": "there are two utilities I'm aware of that will calculate and present to you",
    "start": "382880",
    "end": "389400"
  },
  {
    "text": "these tbs hashes in the windows SDK there's cert manager so it was supplied by Microsoft I also wrote a Powershell",
    "start": "389400",
    "end": "396360"
  },
  {
    "text": "script that's publicly available called get TBS hash",
    "start": "396360",
    "end": "402000"
  },
  {
    "text": "so this is the structure that the signer rules are expected to be",
    "start": "402000",
    "end": "408620"
  },
  {
    "text": "represented as in that binary resource in the Elam driver so it's the certificate hash and then",
    "start": "408620",
    "end": "416220"
  },
  {
    "text": "the hash algorithm which is specific to TBS hash as I mentioned you have to have",
    "start": "416220",
    "end": "422940"
  },
  {
    "text": "the corresponding certificate hashing algorithm for the actual hash and then",
    "start": "422940",
    "end": "428100"
  },
  {
    "text": "optionally any ekus these are enhanced key usage attributes so these are just",
    "start": "428100",
    "end": "433800"
  },
  {
    "text": "special attributes that you can apply to the certificate to specify that a certificate is used for a very",
    "start": "433800",
    "end": "440160"
  },
  {
    "text": "particular purpose so let's look at an example of what these rules would look like in the wild",
    "start": "440160",
    "end": "446580"
  },
  {
    "text": "so after parsing out the rule set in WD boots this is Microsoft's Defender driver there are two rules in it so you",
    "start": "446580",
    "end": "455520"
  },
  {
    "text": "see there are two tbs hashes in there try to remember that f6f1 will be referencing that later",
    "start": "455520",
    "end": "462240"
  },
  {
    "text": "it uses the sha-256 hashing algorithm and it also specifies two ekus so the",
    "start": "462240",
    "end": "468720"
  },
  {
    "text": "way that you would interpret this is any code like any executable like an exe",
    "start": "468720",
    "end": "475560"
  },
  {
    "text": "or a dll could be loaded as a protected service at the anti-mower light level",
    "start": "475560",
    "end": "483300"
  },
  {
    "text": "if it has any of those certificate hashes anywhere in the chain so a",
    "start": "483300",
    "end": "489960"
  },
  {
    "text": "typical certificate chain will be comprised of three certificates as a root certificate an intermediate",
    "start": "489960",
    "end": "495599"
  },
  {
    "text": "certificate and a lease certificate the lease certificate is what signs the the code but this says if any of those are",
    "start": "495599",
    "end": "503879"
  },
  {
    "text": "anywhere in the certificate chain then it's allowed to run with one caveat the",
    "start": "503879",
    "end": "510180"
  },
  {
    "text": "leaf certificate in this case must have both of those ekus present in the binary",
    "start": "510180",
    "end": "516899"
  },
  {
    "text": "when it's signed so let's look at one such binary that is signed and meets all of those",
    "start": "516899",
    "end": "523440"
  },
  {
    "text": "prerequisites so we are looking at let me skip ahead",
    "start": "523440",
    "end": "528779"
  },
  {
    "text": "one this is MP eng.exe this is the main Defender AV malware engine executable",
    "start": "528779",
    "end": "536760"
  },
  {
    "text": "so I'm using the built-in get system driver commandlet which I can use to",
    "start": "536760",
    "end": "541980"
  },
  {
    "text": "extract the thumbprint you can do this through the GUI as well I'm a Powershell Fanboy so just do everything through",
    "start": "541980",
    "end": "548040"
  },
  {
    "text": "there and so just note the thumb print value the f25 this is the sha-1 hash of the",
    "start": "548040",
    "end": "556140"
  },
  {
    "text": "certificate and the corresponding TVs hash so I said",
    "start": "556140",
    "end": "561839"
  },
  {
    "text": "remember that f6f TBS hash so I'm showing you here like this executable",
    "start": "561839",
    "end": "567480"
  },
  {
    "text": "msnp eng.exe has that certificate hash somewhere in its chain and just note its",
    "start": "567480",
    "end": "575880"
  },
  {
    "text": "corresponding thumbprint it's the same hash just different hashing algorithms okay it's it's there are two different",
    "start": "575880",
    "end": "583260"
  },
  {
    "text": "hashes for the same certificate I mean and this is what it looks like in the",
    "start": "583260",
    "end": "589260"
  },
  {
    "text": "GUI but what I wanted to highlight here was for msnp Eng when we look at the signer attributes I've pulled up the EKU",
    "start": "589260",
    "end": "597120"
  },
  {
    "text": "the enhanced key usages and you'll see it's the first two ones listed uh the",
    "start": "597120",
    "end": "603660"
  },
  {
    "text": "ones that end in 76 11 1 and 76 8 1. that match those two specified ekus so",
    "start": "603660",
    "end": "613800"
  },
  {
    "text": "we have the certificate hash that's somewhere in the chain and we have those ekus applied and it's",
    "start": "613800",
    "end": "620519"
  },
  {
    "text": "a valid certificate so that means that msnp eng.exe is allowed to run as a",
    "start": "620519",
    "end": "627240"
  },
  {
    "text": "protected anti-mower light service okay",
    "start": "627240",
    "end": "632360"
  },
  {
    "text": "so let's do some further validation let's actually confirm that this process is running at the anti-malware protected",
    "start": "632399",
    "end": "639959"
  },
  {
    "text": "light level so this was a tool I wrote Johnny Johnson here also on on our team",
    "start": "639959",
    "end": "645959"
  },
  {
    "text": "wrote a similar tool parsing this out so you can get this information via nte",
    "start": "645959",
    "end": "652079"
  },
  {
    "text": "query information process I think so this is just useful for troubleshooting",
    "start": "652079",
    "end": "657720"
  },
  {
    "text": "so you can indeed see that it's running protected and then I'm using wmi to",
    "start": "657720",
    "end": "663300"
  },
  {
    "text": "identify the corresponding service for that running process the wind defense",
    "start": "663300",
    "end": "668760"
  },
  {
    "text": "service because remember I mentioned you have to install this as a service in order to get it to run at the protected",
    "start": "668760",
    "end": "674820"
  },
  {
    "text": "level and here's the corresponding Service registration for wind defend and what is",
    "start": "674820",
    "end": "682079"
  },
  {
    "text": "noteworthy is the launch protected value is set to three which corresponds to the",
    "start": "682079",
    "end": "687959"
  },
  {
    "text": "PS protected signer anti-malware level so Windows when the service manager goes",
    "start": "687959",
    "end": "696060"
  },
  {
    "text": "to start this service it sees that launch protected value it says okay I",
    "start": "696060",
    "end": "702060"
  },
  {
    "text": "need to start this up as a Nancy Maurer light service",
    "start": "702060",
    "end": "707579"
  },
  {
    "text": "so it goes back and it validates all the signatures the certificate hashes if it",
    "start": "707579",
    "end": "714120"
  },
  {
    "text": "checks all those boxes then it will indeed run at the anti-mower light level and be afforded all of the",
    "start": "714120",
    "end": "720660"
  },
  {
    "text": "anti-tampering protections given to you by Elam and PPL",
    "start": "720660",
    "end": "726899"
  },
  {
    "text": "mm-hmm Okay so as I was researching this the question",
    "start": "726899",
    "end": "732540"
  },
  {
    "text": "that naturally arose for me was given that Elam is like an allow list for",
    "start": "732540",
    "end": "738540"
  },
  {
    "text": "anti-malware PPL process execution does there exist an Elon driver that might be",
    "start": "738540",
    "end": "745740"
  },
  {
    "text": "overly permissive and maybe allowing more than it should",
    "start": "745740",
    "end": "751320"
  },
  {
    "text": "so let's investigate that so this was my initial research process",
    "start": "751320",
    "end": "758420"
  },
  {
    "text": "I've got a virustotal intelligence account so which is really nice because I can do a query like this so",
    "start": "758420",
    "end": "765779"
  },
  {
    "text": "this query specifies um this is the signer subject name for",
    "start": "765779",
    "end": "772139"
  },
  {
    "text": "Elon certificates so when you submit your driver to Microsoft they return it back to you approve it and co-sign it",
    "start": "772139",
    "end": "777540"
  },
  {
    "text": "with their certificates that is the subject name of that of that driver",
    "start": "777540",
    "end": "783019"
  },
  {
    "text": "tag native searches just for device drivers I'm looking for things that are",
    "start": "783019",
    "end": "788459"
  },
  {
    "text": "signed and that are executables or just like PE files and then filter out",
    "start": "788459",
    "end": "794279"
  },
  {
    "text": "anything that has an invalid signature and this yielded 886 unique results",
    "start": "794279",
    "end": "800839"
  },
  {
    "text": "um I did some additional validation just to whittle things down to make sure that I was working with Elam drivers that",
    "start": "801060",
    "end": "807660"
  },
  {
    "text": "would that actually had that binary resource it's called the MS Elam cert info ID resource made sure I could parse",
    "start": "807660",
    "end": "816360"
  },
  {
    "text": "those out and just double check to make sure that every Elam driver that I pulled down in bulk had a valid",
    "start": "816360",
    "end": "821519"
  },
  {
    "text": "certificate and then just on mass I parsed out every",
    "start": "821519",
    "end": "826740"
  },
  {
    "text": "single rule for every for all 766 drivers that I identified and pulled",
    "start": "826740",
    "end": "834060"
  },
  {
    "text": "down in bulk um apologies if you can't see this clearly in the back this is just kind of",
    "start": "834060",
    "end": "840540"
  },
  {
    "text": "a reference and to give you a sense of the scope of how many vendors have Elam",
    "start": "840540",
    "end": "846959"
  },
  {
    "text": "drivers out there so they're the typical players which you'd probably see most of",
    "start": "846959",
    "end": "853139"
  },
  {
    "text": "these vendors over in the the vendor Hall some of them definitely stood out to me so like there's that one blank",
    "start": "853139",
    "end": "858839"
  },
  {
    "text": "bullet that wasn't a typo there were some Elam drivers that didn't have a vendor assigned to it's kind of",
    "start": "858839",
    "end": "865740"
  },
  {
    "text": "interesting also in the center column kind of like in the center up a little bit there's a vendor name of to do",
    "start": "865740",
    "end": "872279"
  },
  {
    "text": "company name Windows win 7 ddk just some kind of like Oddball vendors that's",
    "start": "872279",
    "end": "879720"
  },
  {
    "text": "um I don't know just uh just seemed odd but I all I could really go off was just",
    "start": "879720",
    "end": "886260"
  },
  {
    "text": "kind of a gut feel but this was kind of like potential further validation that",
    "start": "886260",
    "end": "892019"
  },
  {
    "text": "maybe maybe there exists at least one rule set um that might be overly permissive",
    "start": "892019",
    "end": "898500"
  },
  {
    "text": "whether that was intentional or not all right so the Elam auditing strategy",
    "start": "898500",
    "end": "904560"
  },
  {
    "text": "once I pulled down unmasked those 766 Elam drivers",
    "start": "904560",
    "end": "910279"
  },
  {
    "text": "is to go about the difficult process of taking the TBS hashes which I parsed out",
    "start": "910279",
    "end": "917760"
  },
  {
    "text": "from the Elon drivers and identifying the corresponding TBS or sorry the",
    "start": "917760",
    "end": "922920"
  },
  {
    "text": "corresponding thumbprint value this was pretty challenging I couldn't always do that I had to resort to",
    "start": "922920",
    "end": "930480"
  },
  {
    "text": "Googling for some of these but most of these hashes just aren't on the internet so I had to resort to more creative",
    "start": "930480",
    "end": "936660"
  },
  {
    "text": "strategies for identifying the thumbprint values so that I could actually search for some candidate",
    "start": "936660",
    "end": "943019"
  },
  {
    "text": "abusable binaries in virustotal um and the idea was like if there was a",
    "start": "943019",
    "end": "950220"
  },
  {
    "text": "hypothetical overly permissive rule sets are there any",
    "start": "950220",
    "end": "955860"
  },
  {
    "text": "um like potential law bins that would permit arbitrary unsigned code execution that uh matched all of that matched one",
    "start": "955860",
    "end": "963720"
  },
  {
    "text": "of those overly permissive rules which would then allow me to install it as a protected service and potentially",
    "start": "963720",
    "end": "970620"
  },
  {
    "text": "get arbitrary code execution in the context of a protected process",
    "start": "970620",
    "end": "976199"
  },
  {
    "text": "so remember I said remember that f6f hash that was the Microsoft intermediate",
    "start": "976199",
    "end": "982380"
  },
  {
    "text": "hash so here I'm just going through some more of the the Recon process so I was",
    "start": "982380",
    "end": "988680"
  },
  {
    "text": "literally going through the like hundreds of hashes that I parsed out and just Googling all of them to see if I",
    "start": "988680",
    "end": "994980"
  },
  {
    "text": "could find any uh any hope of finding a corresponding thumbprint value I got",
    "start": "994980",
    "end": "1000980"
  },
  {
    "text": "lucky in this case should be no surprise like it's it's a Microsoft intermediate cert",
    "start": "1000980",
    "end": "1007040"
  },
  {
    "text": "um fairly common so I got a few hits fortunately for this there was one great",
    "start": "1007040",
    "end": "1013339"
  },
  {
    "text": "website it's almost like trying to troubleshoot some signer issues and uh",
    "start": "1013339",
    "end": "1019100"
  },
  {
    "text": "right like there in the website is like the TBS hash right next to the thumbprint so great like I had something",
    "start": "1019100",
    "end": "1025280"
  },
  {
    "text": "that I could easily search for again that thumbprint hash so I'll take that Thumper and hash and",
    "start": "1025280",
    "end": "1031699"
  },
  {
    "text": "then search for that in fires total using the signature tag",
    "start": "1031699",
    "end": "1037959"
  },
  {
    "text": "um and I got something like this so 171",
    "start": "1038059",
    "end": "1043100"
  },
  {
    "text": "000 results no big surprise because that was a Microsoft intermediate certificate you would expect like there's a lot of",
    "start": "1043100",
    "end": "1050000"
  },
  {
    "text": "Microsoft signed code that uses that intermediate certificate out there and there's no way in virustotal to",
    "start": "1050000",
    "end": "1056660"
  },
  {
    "text": "search for binaries without maybe doing some like fancy Yara hunting that have",
    "start": "1056660",
    "end": "1062960"
  },
  {
    "text": "those EKU values so that was a challenge right there but I didn't really want to",
    "start": "1062960",
    "end": "1069260"
  },
  {
    "text": "focus my research per se on those restrictive ekus because I just kind of",
    "start": "1069260",
    "end": "1075559"
  },
  {
    "text": "had a sense that there weren't going to be many abusable binaries that match",
    "start": "1075559",
    "end": "1081200"
  },
  {
    "text": "these rules that have the Microsoft Publisher and anti-mower ekus applied to them I'm not saying that they don't",
    "start": "1081200",
    "end": "1087919"
  },
  {
    "text": "exist I just think it's probably unlikely that they do there's probably",
    "start": "1087919",
    "end": "1093140"
  },
  {
    "text": "like there's bigger fish to fry out there that's just going to be easier to find uh and so here's the results of the",
    "start": "1093140",
    "end": "1100700"
  },
  {
    "text": "quick um research that I did this slide is really important pay attention to it so",
    "start": "1100700",
    "end": "1106340"
  },
  {
    "text": "I'll walk you through how to interpret this of all the 766 Elon drivers that I",
    "start": "1106340",
    "end": "1112820"
  },
  {
    "text": "identified and parsed out all the TBS hashes for all the rule sets and found",
    "start": "1112820",
    "end": "1118179"
  },
  {
    "text": "corresponding thumb prints these are ones that uh these are rules",
    "start": "1118179",
    "end": "1124880"
  },
  {
    "text": "that were present in those binaries so that first Microsoft corporation uh hash",
    "start": "1124880",
    "end": "1133640"
  },
  {
    "text": "value mind you it didn't have an EKU restriction on it so this means that if",
    "start": "1133640",
    "end": "1141140"
  },
  {
    "text": "you have any Microsoft signed executable that has that certificate anywhere in",
    "start": "1141140",
    "end": "1146720"
  },
  {
    "text": "the chain then it can run protected same for the second and then",
    "start": "1146720",
    "end": "1152980"
  },
  {
    "text": "what was even worse was the intermediate the third party intermediate certificates",
    "start": "1152980",
    "end": "1159260"
  },
  {
    "text": "so if you have any certificate that was issued by any of those three",
    "start": "1159260",
    "end": "1167679"
  },
  {
    "text": "certificate authorities then you can run your code your malware or whatever as uh",
    "start": "1167679",
    "end": "1174679"
  },
  {
    "text": "at the anti-mower light protected level so the one we'll focus on is 495 let me",
    "start": "1174679",
    "end": "1182480"
  },
  {
    "text": "go back one okay that's the verisign intermediate certificate Okay so I had",
    "start": "1182480",
    "end": "1188960"
  },
  {
    "text": "the we had the corresponding thumbprint for the verisign intermediate certificate I wanted to know what code",
    "start": "1188960",
    "end": "1195860"
  },
  {
    "text": "is signed any code signed by that so like so this is going to be the intermediate",
    "start": "1195860",
    "end": "1201620"
  },
  {
    "text": "certificate so the leaf certificate will be different but that's okay it's going to be allowed to run and show me any",
    "start": "1201620",
    "end": "1207260"
  },
  {
    "text": "executables that have 40 or more positive AV hits so in other words like",
    "start": "1207260",
    "end": "1212360"
  },
  {
    "text": "confirmed malware that would be allowed to run at the anti-mower light level so",
    "start": "1212360",
    "end": "1217700"
  },
  {
    "text": "we have 177 000 unique samples of malware that can",
    "start": "1217700",
    "end": "1223100"
  },
  {
    "text": "be afforded all of the protections of uh anti-malware PPL",
    "start": "1223100",
    "end": "1229160"
  },
  {
    "text": "so kind of hard to kill those things once I get started at that level",
    "start": "1229160",
    "end": "1234640"
  },
  {
    "text": "now this relies on my ability your ability to identify what",
    "start": "1235100",
    "end": "1241820"
  },
  {
    "text": "those Elam drivers are so if you have vti access then maybe this is something that you could investigate a little bit",
    "start": "1241820",
    "end": "1248660"
  },
  {
    "text": "further I'm not going to be calling out any vendor names here so the",
    "start": "1248660",
    "end": "1253940"
  },
  {
    "text": "could be an exercise for for later okay so how would you actually weaponize",
    "start": "1253940",
    "end": "1259520"
  },
  {
    "text": "this so you'll want to identify a candidate",
    "start": "1259520",
    "end": "1264559"
  },
  {
    "text": "abusable executable note the thumbprint value here that's 620 that corresponds",
    "start": "1264559",
    "end": "1271220"
  },
  {
    "text": "to the second Microsoft certificate there",
    "start": "1271220",
    "end": "1278299"
  },
  {
    "text": "okay and the first law bin that came to mind",
    "start": "1278299",
    "end": "1285080"
  },
  {
    "text": "for me was Ms build should be easy enough to abuse it's like one of the most classic low bins that can get you",
    "start": "1285080",
    "end": "1292159"
  },
  {
    "text": "arbitrary unsigned code execution thank you Casey Smith for that and so I found",
    "start": "1292159",
    "end": "1297679"
  },
  {
    "text": "16 unique hits for that that were signed with that very specific uh Elum rule set",
    "start": "1297679",
    "end": "1305960"
  },
  {
    "text": "okay so what do you do with that once you identify that candidate Ms build I would like to get arbitrary unsigned",
    "start": "1305960",
    "end": "1312380"
  },
  {
    "text": "code execution from that what you do is you take the Elam driver that you identified was overly permissive and had",
    "start": "1312380",
    "end": "1320059"
  },
  {
    "text": "that Microsoft rule in it and you drop it to the host it's signed",
    "start": "1320059",
    "end": "1325640"
  },
  {
    "text": "like it's legitimate it's fine and you um you call the install Elon certificate",
    "start": "1325640",
    "end": "1330799"
  },
  {
    "text": "info API you have to do this as admin you would have to be elevated anyway to",
    "start": "1330799",
    "end": "1336020"
  },
  {
    "text": "install the the service so and then you would drop your",
    "start": "1336020",
    "end": "1341900"
  },
  {
    "text": "candidate binary that you want to abuse in this case Ms build and then calling change service config to W or you can",
    "start": "1341900",
    "end": "1349760"
  },
  {
    "text": "just do this directly in the registry you're going to specify that the service needs to run at the anti-mower light",
    "start": "1349760",
    "end": "1356000"
  },
  {
    "text": "level start the service and then profit maybe now there's still additional steps like",
    "start": "1356000",
    "end": "1363140"
  },
  {
    "text": "in order to get arbitrary and sign code execution from them from Ms build you",
    "start": "1363140",
    "end": "1368299"
  },
  {
    "text": "have to give it an XML file which consists of like c-sharp code and hope that you can actually get that to run",
    "start": "1368299",
    "end": "1375100"
  },
  {
    "text": "turns out there are some constraints though what are those so most probably all law",
    "start": "1375100",
    "end": "1382640"
  },
  {
    "text": "bins out there were not designed for the express purpose of running in the context of a protected process and uh by",
    "start": "1382640",
    "end": "1391700"
  },
  {
    "text": "the nature of the anti-malware lights protection level being pretty robust and not allowing a lot of dangerous things",
    "start": "1391700",
    "end": "1398780"
  },
  {
    "text": "to occur one thing that can't happen by default is a malware running at the",
    "start": "1398780",
    "end": "1403940"
  },
  {
    "text": "protected level cannot spawn a child process by default so like if you just call the create process API",
    "start": "1403940",
    "end": "1410360"
  },
  {
    "text": "from the context of the protective process it's going to fail you have to supply like a specific flag",
    "start": "1410360",
    "end": "1417500"
  },
  {
    "text": "to um to create process to actually allow that but these law bins like they're not going to be supplying that",
    "start": "1417500",
    "end": "1423440"
  },
  {
    "text": "flag and when you execute code and like abuse Ms build part of the artifacts of",
    "start": "1423440",
    "end": "1430880"
  },
  {
    "text": "that is there's a child process it calls like the c-sharp compiler assuming you're supplying C sharp code to execute",
    "start": "1430880",
    "end": "1438260"
  },
  {
    "text": "so it spawns that process so that that wasn't allowed so this broke for me when I was trying to weaponize it like I",
    "start": "1438260",
    "end": "1444620"
  },
  {
    "text": "confirmed that it started the service started protected but I couldn't get it",
    "start": "1444620",
    "end": "1449720"
  },
  {
    "text": "to execute code so I had to get a little creative and again thank you Casey Smith",
    "start": "1449720",
    "end": "1454760"
  },
  {
    "text": "for blogging way back when about property functions and Ms build so this was kind of a neat little hack that I",
    "start": "1454760",
    "end": "1462320"
  },
  {
    "text": "was able to use to get around not having Ms Bill not spawn a child process so",
    "start": "1462320",
    "end": "1468440"
  },
  {
    "text": "this is what the weaponized payload from as build actually looks like it's a super weird syntax it's kind of",
    "start": "1468440",
    "end": "1475880"
  },
  {
    "text": "like Powershell and it has to be in a one-liner so I had",
    "start": "1475880",
    "end": "1481700"
  },
  {
    "text": "to get kind of creative like how to weaponize this so what I ultimately wanted to do to demonstrate arbitrary",
    "start": "1481700",
    "end": "1488120"
  },
  {
    "text": "unsigned code execution was get this to load in memory and execute a.net",
    "start": "1488120",
    "end": "1496039"
  },
  {
    "text": "assembly so that's what the highlighted code does here you would just take your",
    "start": "1496039",
    "end": "1502000"
  },
  {
    "text": "malicious.net assembly excuse me and you would implement the",
    "start": "1502000",
    "end": "1508460"
  },
  {
    "text": "logic that you want to execute in the test Constructor and then in that and",
    "start": "1508460",
    "end": "1514700"
  },
  {
    "text": "then you take that whole binary base64 encode it and then you just drop the",
    "start": "1514700",
    "end": "1520039"
  },
  {
    "text": "base64 code string in there and then NS build will run your payload without the",
    "start": "1520039",
    "end": "1525860"
  },
  {
    "text": "issue so thanks again Casey okay so quick demo",
    "start": "1525860",
    "end": "1532360"
  },
  {
    "text": "okay what we're going to be seeing here is first we're going to list out all the protected processes",
    "start": "1532880",
    "end": "1540100"
  },
  {
    "text": "and note the ones that are running at the anti-malware lights level so we have",
    "start": "1540740",
    "end": "1546080"
  },
  {
    "text": "two here msnp Eng that's the defender AV engine and Nas SRV",
    "start": "1546080",
    "end": "1553700"
  },
  {
    "text": "now I'm going to run my code that runs arbitrary Powershell uh using Ms build",
    "start": "1553700",
    "end": "1560980"
  },
  {
    "text": "and you can see that Ms build is indeed running at the anti-mower light level",
    "start": "1561200",
    "end": "1567580"
  },
  {
    "text": "this code is out there it's publicly available I'll link to it at the end",
    "start": "1567580",
    "end": "1573260"
  },
  {
    "text": "okay so this is just the rather benign payload I was just having it like run asleep command just to show and prove",
    "start": "1573260",
    "end": "1580880"
  },
  {
    "text": "that Ms build was indeed running at that protected level so another payload that we could do so",
    "start": "1580880",
    "end": "1588679"
  },
  {
    "text": "once you're running at the protected level not only is your own malware",
    "start": "1588679",
    "end": "1594080"
  },
  {
    "text": "protected by processes that aren't protected but you can now go kill other",
    "start": "1594080",
    "end": "1600260"
  },
  {
    "text": "protected processes so let's see what that looks like again we'll list out the protected",
    "start": "1600260",
    "end": "1606500"
  },
  {
    "text": "processes we're going to pick on msnp Eng note the process ID 3168",
    "start": "1606500",
    "end": "1613580"
  },
  {
    "text": "and I'm running elevated here and I'm just going to try to stop it using stop process doesn't allow it",
    "start": "1613580",
    "end": "1620240"
  },
  {
    "text": "no surprise there but using invoke anti-malware light command by abusing that overly",
    "start": "1620240",
    "end": "1626360"
  },
  {
    "text": "permissive driver we're going to kill the process through Ms build running protected",
    "start": "1626360",
    "end": "1635679"
  },
  {
    "text": "and now note that msnp Eng has a new process ID so what happened there was",
    "start": "1639860",
    "end": "1646820"
  },
  {
    "text": "the old one was killed and Defender AV it restarts itself",
    "start": "1646820",
    "end": "1654158"
  },
  {
    "text": "then gets a new one and then we'll just try it again for giggles and see what happens",
    "start": "1654799",
    "end": "1661539"
  },
  {
    "text": "so now it just failed to restart again and then you can hopefully see on the",
    "start": "1662539",
    "end": "1667760"
  },
  {
    "text": "bottom right the defender little icon went from green to Red indicating that",
    "start": "1667760",
    "end": "1673580"
  },
  {
    "text": "something happened so we've effectively killed um the defender AV engine through Ms",
    "start": "1673580",
    "end": "1680240"
  },
  {
    "text": "build running at the protected level because we abused an Elon driver that",
    "start": "1680240",
    "end": "1686200"
  },
  {
    "text": "has an overly permissive rule set in this case",
    "start": "1686200",
    "end": "1691700"
  },
  {
    "text": "um it's overly permissive Elam dot sis I had to rename it to protect innocent",
    "start": "1691700",
    "end": "1697400"
  },
  {
    "text": "vendors so yeah that's that's what's necessary to",
    "start": "1697400",
    "end": "1703159"
  },
  {
    "text": "abuse that so how might we go about mitigating and trying to detect this stuff",
    "start": "1703159",
    "end": "1710539"
  },
  {
    "text": "so fortunately wdac for the few people out there who might employ this so again",
    "start": "1710539",
    "end": "1715760"
  },
  {
    "text": "this is Windows Defender application control it can block these from loading",
    "start": "1715760",
    "end": "1721159"
  },
  {
    "text": "so if you want to be very specific about the Elon drivers that you want to allow",
    "start": "1721159",
    "end": "1726559"
  },
  {
    "text": "in your environment it's generally a good thing to do not sure how well that would scale but the technology does",
    "start": "1726559",
    "end": "1732860"
  },
  {
    "text": "allow you to block Elam drivers that shouldn't be allowed in your environment",
    "start": "1732860",
    "end": "1740500"
  },
  {
    "text": "and then hopefully we might be able to get uh more robust fix from Microsoft in the future",
    "start": "1740500",
    "end": "1746480"
  },
  {
    "text": "um but as you can maybe understand like this is abusing the features of the Elam",
    "start": "1746480",
    "end": "1752000"
  },
  {
    "text": "uh allows like allow rule Set uh rather than abusing any any sort of",
    "start": "1752000",
    "end": "1757340"
  },
  {
    "text": "vulnerability uh in abusing the uh submission process to Microsoft that",
    "start": "1757340",
    "end": "1763580"
  },
  {
    "text": "Microsoft even allowed these overly permissive rules to be put in place in the first place",
    "start": "1763580",
    "end": "1769580"
  },
  {
    "text": "now I can't even begin to speculate why any",
    "start": "1769580",
    "end": "1774860"
  },
  {
    "text": "of those like third-party intermediate certificates would ever be allowed",
    "start": "1774860",
    "end": "1780080"
  },
  {
    "text": "um so you know shame on Microsoft for that um the Microsoft rule sets my only",
    "start": "1780080",
    "end": "1785120"
  },
  {
    "text": "speculation as to why those might be in there is because imagine if an endpoint",
    "start": "1785120",
    "end": "1791360"
  },
  {
    "text": "security vendor took a dependency on like the the visual C runtime Library like that's signed by Microsoft and",
    "start": "1791360",
    "end": "1798200"
  },
  {
    "text": "they're like well we take a dependency on this so we need to be able to get our dll to load into our protected service",
    "start": "1798200",
    "end": "1805279"
  },
  {
    "text": "and so Microsoft like please allow this and sure sure enough they they allowed that that's still speculation but I",
    "start": "1805279",
    "end": "1812840"
  },
  {
    "text": "think that's a reasonable explanation for why some of those",
    "start": "1812840",
    "end": "1818179"
  },
  {
    "text": "vendors had those Microsoft certificates in there",
    "start": "1818179",
    "end": "1822760"
  },
  {
    "text": "um and we also audited like a bunch of other vendors and one thing that we wanted to try to do was for the rule",
    "start": "1823460",
    "end": "1830360"
  },
  {
    "text": "sets that were particular to a vendor I'm not picking on like VMware here it's just the first vendor that comes to mind",
    "start": "1830360",
    "end": "1836299"
  },
  {
    "text": "like they have their own Elam driver and so you can parse their rule set and then identify any of their corresponding",
    "start": "1836299",
    "end": "1843100"
  },
  {
    "text": "VMware assigned executables that could in theory run protected and then this",
    "start": "1843100",
    "end": "1850399"
  },
  {
    "text": "whole auditing process would apply equally like to VMware where we would try to identify like VMware signs low",
    "start": "1850399",
    "end": "1858559"
  },
  {
    "text": "bins that would protect or that would permit arbitrary unsigned code execution in the case of VMware I wasn't able to",
    "start": "1858559",
    "end": "1866000"
  },
  {
    "text": "find any obvious ones same goes for lots of other vendors so again I was just going for like the",
    "start": "1866000",
    "end": "1873380"
  },
  {
    "text": "um the path of least resistance here like anything that allows Microsoft because as you saw I was able to find an",
    "start": "1873380",
    "end": "1881659"
  },
  {
    "text": "abusable MS this build so that got the job done so some detection recommendations",
    "start": "1881659",
    "end": "1889360"
  },
  {
    "text": "my advice would be to focus on the registering of any protected services of",
    "start": "1889360",
    "end": "1897080"
  },
  {
    "text": "course you're going to have false positives but in theory like if you can suppress some of those this should be",
    "start": "1897080",
    "end": "1903980"
  },
  {
    "text": "relatively rare that you would have any new Services be created that you don't expect in your environment",
    "start": "1903980",
    "end": "1911200"
  },
  {
    "text": "I would probably shy away from like anti-malware light process creation I",
    "start": "1911200",
    "end": "1917539"
  },
  {
    "text": "think that would probably be much more false positive prone so yeah I just encourage you to focus on service",
    "start": "1917539",
    "end": "1924140"
  },
  {
    "text": "creation or modification uh as for vendors",
    "start": "1924140",
    "end": "1929480"
  },
  {
    "text": "um again I'm not going to shame any vendors here I don't even blame the vendors who have the overly permissive",
    "start": "1929480",
    "end": "1935600"
  },
  {
    "text": "rule sets entirely um because Microsoft allowed them to submit and approve those overly",
    "start": "1935600",
    "end": "1942440"
  },
  {
    "text": "permissive rules but I would encourage any vendor who does publish and have a",
    "start": "1942440",
    "end": "1949039"
  },
  {
    "text": "signed elom driver just to go back and audit your rule set and make sure you're not allowing anything that shouldn't be",
    "start": "1949039",
    "end": "1956779"
  },
  {
    "text": "in there because you wouldn't want to be the vendor that ruins the entire",
    "start": "1956779",
    "end": "1962299"
  },
  {
    "text": "anti-mower light ecosystem for everyone yeah",
    "start": "1962299",
    "end": "1967880"
  },
  {
    "text": "so in conclusion why is this so bad one overly permissive Elam driver from a",
    "start": "1967880",
    "end": "1974899"
  },
  {
    "text": "single vendor poisons the well for all other vendors",
    "start": "1974899",
    "end": "1980000"
  },
  {
    "text": "again so the way that we weaponize this is we identify that overly permissive",
    "start": "1980000",
    "end": "1985640"
  },
  {
    "text": "driver we drop it onto the system we register it with that API and then we take our corresponding",
    "start": "1985640",
    "end": "1993140"
  },
  {
    "text": "service executable that is signed so I must build and run that protected and so",
    "start": "1993140",
    "end": "1999260"
  },
  {
    "text": "even if what's installed on our Target system is like uh again like VMware carbon black",
    "start": "1999260",
    "end": "2006640"
  },
  {
    "text": "cloud right um if the overly permissive Elon driver is from another vendor there's nothing",
    "start": "2006640",
    "end": "2013179"
  },
  {
    "text": "preventing me the attacker from just dropping that side by side with VMware in this case registering that and then",
    "start": "2013179",
    "end": "2020679"
  },
  {
    "text": "getting Ms build to run my malicious payload and be protected or to go",
    "start": "2020679",
    "end": "2028179"
  },
  {
    "text": "stop the VMware on black cloud endpoint Service as well",
    "start": "2028179",
    "end": "2034120"
  },
  {
    "text": "um so again the Microsoft's vetting process for these things is far from robust and hopefully in the future they",
    "start": "2034120",
    "end": "2040720"
  },
  {
    "text": "may gradually Implement some stronger checks and start to lock this down but there is no easy fix right now",
    "start": "2040720",
    "end": "2047799"
  },
  {
    "text": "so I reported this to Microsoft back in December uh of 2021",
    "start": "2047799",
    "end": "2052980"
  },
  {
    "text": "they acknowledge the issue no surprise like I'm not bashing on MSR msrc this is",
    "start": "2052980",
    "end": "2058540"
  },
  {
    "text": "not a security boundary but I pass it on to the defender research team and they own this like so I just want to thank",
    "start": "2058540",
    "end": "2065560"
  },
  {
    "text": "David Kaplan gilbasso Phil Zuckerman on the defender research team they've just",
    "start": "2065560",
    "end": "2071618"
  },
  {
    "text": "been wonderful to work with they've taken it very seriously and they have proactively communicated with their",
    "start": "2071619",
    "end": "2078940"
  },
  {
    "text": "Microsoft virus initiative Partners so anyone who does have an Elon certificate",
    "start": "2078940",
    "end": "2084480"
  },
  {
    "text": "or Elam driver through the mvi program you would have already been reached out to and",
    "start": "2084480",
    "end": "2090339"
  },
  {
    "text": "proactively communicated with so again shout out to them they've just been awesome",
    "start": "2090339",
    "end": "2097118"
  },
  {
    "text": "um like soft gave me an official response um saying we've got a tight partnership here uh and indeed they did communicate",
    "start": "2097119",
    "end": "2104800"
  },
  {
    "text": "with their mvi Partners so they've been great okay so some resources if you want to",
    "start": "2104800",
    "end": "2110560"
  },
  {
    "text": "learn more about Elam protective processes these slides will be available soon so",
    "start": "2110560",
    "end": "2117579"
  },
  {
    "text": "recommend you check these out if you want to learn more and then the code that you saw me use",
    "start": "2117579",
    "end": "2123099"
  },
  {
    "text": "all this is available on my GitHub so get Elon cert info will you just point",
    "start": "2123099",
    "end": "2128800"
  },
  {
    "text": "it to an Elon driver and it will parse out those rules for you get TBS hash",
    "start": "2128800",
    "end": "2134500"
  },
  {
    "text": "again that's the one that will take a certificate and calculate the TBS hash so that you can start to go through that",
    "start": "2134500",
    "end": "2140859"
  },
  {
    "text": "research process and then finally the The partially weaponized script it's a",
    "start": "2140859",
    "end": "2146980"
  },
  {
    "text": "Powershell module called anti-malware blight I intentionally wanted it to be defanged",
    "start": "2146980",
    "end": "2152980"
  },
  {
    "text": "so it is fully weaponized if you bring your own abusable",
    "start": "2152980",
    "end": "2159359"
  },
  {
    "text": "Elum driver and abusable Ms build that you can go find on on virus total okay",
    "start": "2159359",
    "end": "2166900"
  },
  {
    "text": "so thank you [Music]",
    "start": "2166900",
    "end": "2172310"
  },
  {
    "text": "[Music]",
    "start": "2176150",
    "end": "2179260"
  }
]