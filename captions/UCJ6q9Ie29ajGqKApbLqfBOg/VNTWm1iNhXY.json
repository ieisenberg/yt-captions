[
  {
    "text": "and hello everyone I'm Jan and I comes from chinai University in China uh today",
    "start": "2919",
    "end": "8679"
  },
  {
    "text": "we will show you how we perform the hatrick once again in",
    "start": "8679",
    "end": "14480"
  },
  {
    "text": "browers",
    "start": "14480",
    "end": "17480"
  },
  {
    "text": "uh okay uh so first let's briefly introduce ourselves uh my partner now",
    "start": "22160",
    "end": "29320"
  },
  {
    "text": "often known by the mck Saka work as secur researcher at 360 Research",
    "start": "29320",
    "end": "36079"
  },
  {
    "text": "Institute and I'm J coming uh currently pursuing a master degree at chinai",
    "start": "36079",
    "end": "42399"
  },
  {
    "text": "University in China we focus on morbility hunting in browers uh primarily in chome as uh top researchers",
    "start": "42399",
    "end": "50000"
  },
  {
    "text": "for both chome and Facebook's morbility reward program uh we have made multiple",
    "start": "50000",
    "end": "55239"
  },
  {
    "text": "presentations at blackhe hat uh next this is an organization with represents",
    "start": "55239",
    "end": "60920"
  },
  {
    "text": "the 360 reability Research",
    "start": "60920",
    "end": "65000"
  },
  {
    "text": "Institute uh this is our agent uh where we will introduce the courses and",
    "start": "66400",
    "end": "71759"
  },
  {
    "text": "exploitation of four liabilities the first two are viabilities on the chromos",
    "start": "71759",
    "end": "77400"
  },
  {
    "text": "side and the last two are viabilities on the Firefox side okay uh so the first",
    "start": "77400",
    "end": "84280"
  },
  {
    "text": "part is cor isue which is hidden in the r support Cod logic and is related to a",
    "start": "84280",
    "end": "91200"
  },
  {
    "text": "new JavaScript proposal uh this vulnerability was identified by us just",
    "start": "91200",
    "end": "96360"
  },
  {
    "text": "before it was about to be included in the release version and was reported to",
    "start": "96360",
    "end": "102000"
  },
  {
    "text": "chome earning as $116,000 render remote C execution",
    "start": "102000",
    "end": "107719"
  },
  {
    "text": "exploited bounding uh before d uh deeper into the Cris of varability let's first have have",
    "start": "107719",
    "end": "115600"
  },
  {
    "text": "a brief understanding of the background knowledge uh in 2015 15 new data",
    "start": "115600",
    "end": "121119"
  },
  {
    "text": "structure sets was introduced into the JavaScript to make the developer more",
    "start": "121119",
    "end": "126240"
  },
  {
    "text": "easier to understand or to make it more easier to code uh however as you can see",
    "start": "126240",
    "end": "132000"
  },
  {
    "text": "the functions available in this set structure are very limited and provide",
    "start": "132000",
    "end": "137200"
  },
  {
    "text": "only some very basic measures so all of these measures operates on the set",
    "start": "137200",
    "end": "143400"
  },
  {
    "text": "itself so if we want to perform some operations on two sets such as getting",
    "start": "143400",
    "end": "148840"
  },
  {
    "text": "layer intersections or Union what should we do uh the answer is pretty simple you",
    "start": "148840",
    "end": "154879"
  },
  {
    "text": "have to write your own functions to handle this situation uh you need to Traverse the two sets compare the",
    "start": "154879",
    "end": "162120"
  },
  {
    "text": "elements and then take out the elements that meet the conditions and put them into a new set and finally return a set",
    "start": "162120",
    "end": "170120"
  },
  {
    "text": "to the column the whole process is very tederous uh so uh tc39 has made a new",
    "start": "170120",
    "end": "177879"
  },
  {
    "text": "proposal in the last two years uh let introduces more useful methods such such",
    "start": "177879",
    "end": "184000"
  },
  {
    "text": "as the union and intersection and you can and you do not need to write your",
    "start": "184000",
    "end": "189680"
  },
  {
    "text": "own functions anymore it's very convenient for you to compare and operate on both sets however weight",
    "start": "189680",
    "end": "196200"
  },
  {
    "text": "engine introduced uh CC morbility when try to SP this feature uh let's take a",
    "start": "196200",
    "end": "202920"
  },
  {
    "text": "look at the proof of concept which is listed in the left of the slides as you",
    "start": "202920",
    "end": "208360"
  },
  {
    "text": "can see the PC is pretty simple uh first we create two uh different set structure",
    "start": "208360",
    "end": "215400"
  },
  {
    "text": "then Define a cic function on one of the sets and then call this uh is disjoint",
    "start": "215400",
    "end": "222599"
  },
  {
    "text": "from function to operate both of sets uh this function uh will be triggered when",
    "start": "222599",
    "end": "229200"
  },
  {
    "text": "we try to take a value of property size on we1 uh in this cic function it only",
    "start": "229200",
    "end": "235879"
  },
  {
    "text": "clean all elements on WE zero sets and method is dis joint from where triggers",
    "start": "235879",
    "end": "242360"
  },
  {
    "text": "this cic function internally on the right side of the slce shows the aror",
    "start": "242360",
    "end": "247599"
  },
  {
    "text": "outputs of we8 when try to execute the PC the anal message suggests that there",
    "start": "247599",
    "end": "254879"
  },
  {
    "text": "may be a type confusion M ability because it tries to use objects as if it",
    "start": "254879",
    "end": "261519"
  },
  {
    "text": "were an object of another another type which triggers debug",
    "start": "261519",
    "end": "266560"
  },
  {
    "text": "check uh how this morbility is triggered uh actually it's very easy to understand",
    "start": "266560",
    "end": "271759"
  },
  {
    "text": "let's take a look at L Source Cod when executing newly implemented methods on",
    "start": "271759",
    "end": "277800"
  },
  {
    "text": "sets uh we first try to uh take out the pointer of backing store from the just",
    "start": "277800",
    "end": "283800"
  },
  {
    "text": "set object and then store it into variable table uh then we ex get set",
    "start": "283800",
    "end": "291320"
  },
  {
    "text": "record function uh tranger in used defined callback function when fetching the value of property size however L",
    "start": "291320",
    "end": "299080"
  },
  {
    "text": "Developers do not take into account side effects of the get set record function",
    "start": "299080",
    "end": "304919"
  },
  {
    "text": "which can cause the pr previously fetched the pointer to become obsoleted",
    "start": "304919",
    "end": "310840"
  },
  {
    "text": "l a problem uh very simple but interesting uh as the PC demonstrates uh",
    "start": "310840",
    "end": "316680"
  },
  {
    "text": "treering viabilities is very easy uh fixing list varability is also",
    "start": "316680",
    "end": "323360"
  },
  {
    "text": "easy just to move the get sets record function let may call the cack function",
    "start": "323360",
    "end": "328880"
  },
  {
    "text": "forward so that's there's no cback issue so how to expl uh unlikely the CC",
    "start": "328880",
    "end": "338160"
  },
  {
    "text": "issue with array types that has occurred in previous versions of we the CC",
    "start": "338160",
    "end": "344080"
  },
  {
    "text": "Mobility insets cannot be easily exploited through methods like uh modifying the ARR Lance therefore we",
    "start": "344080",
    "end": "352680"
  },
  {
    "text": "must gain a deeper understanding of set implementation in order to exploit less",
    "start": "352680",
    "end": "357919"
  },
  {
    "text": "varability uh when exploiting we V abilities one of the most common",
    "start": "357919",
    "end": "363840"
  },
  {
    "text": "exploits is called fake objects as the name suggested if we can fake an actual",
    "start": "363840",
    "end": "370800"
  },
  {
    "text": "memory controllable object to make it fake as a Jay uh we can use this fix as",
    "start": "370800",
    "end": "377680"
  },
  {
    "text": "a rate to read and write to arbitrary addresses in the we8 Heap and thus",
    "start": "377680",
    "end": "383199"
  },
  {
    "text": "achieve remote code execution however the hardest parts of the whole exploit",
    "start": "383199",
    "end": "388639"
  },
  {
    "text": "process is actually the first step uh how do we get uh such a memory",
    "start": "388639",
    "end": "393919"
  },
  {
    "text": "controllable object through Le varability uh we needed to dig a Little",
    "start": "393919",
    "end": "399120"
  },
  {
    "text": "Deeper to understand the related object model as demonstrated in the slid there",
    "start": "399120",
    "end": "405880"
  },
  {
    "text": "are two object model uh the first is J sets as you can see it holds a pointer",
    "start": "405880",
    "end": "411759"
  },
  {
    "text": "to an ordered head set uh all the elements of JS sets are actually stored",
    "start": "411759",
    "end": "416960"
  },
  {
    "text": "in this H stat uh the second is ordered has sets uh the blue marked element",
    "start": "416960",
    "end": "422599"
  },
  {
    "text": "count property is what we are going to focus on next uh normally it's a small",
    "start": "422599",
    "end": "427960"
  },
  {
    "text": "integer that represents the number of elements uh currently stored in the hash",
    "start": "427960",
    "end": "433360"
  },
  {
    "text": "table here is the example where we creat J set with integer one and integer two",
    "start": "433360",
    "end": "439240"
  },
  {
    "text": "and the elements count on the table is two uh let's take a look at the J",
    "start": "439240",
    "end": "445720"
  },
  {
    "text": "examples on the right at first we create a set stru structure with two elements",
    "start": "445720",
    "end": "451479"
  },
  {
    "text": "uh the internal memory layout of V8 is consistent with the examples in the",
    "start": "451479",
    "end": "456960"
  },
  {
    "text": "object model uh we introduced earlier L variable with zero take a pointer to um",
    "start": "456960",
    "end": "463840"
  },
  {
    "text": "order the head sets storing two elements and the elements count property is a",
    "start": "463840",
    "end": "469800"
  },
  {
    "text": "small integer of two uh can still remember the meths involved in the",
    "start": "469800",
    "end": "476080"
  },
  {
    "text": "proof of Concepts uh what happen if we call uh clean method on left sets uh",
    "start": "476080",
    "end": "483520"
  },
  {
    "text": "after exting the clean function on variable zero with zero uh something",
    "start": "483520",
    "end": "488599"
  },
  {
    "text": "will happen we first uh creates a newly uh we it first creates a new empty",
    "start": "488599",
    "end": "495960"
  },
  {
    "text": "ordered hash sets then change the pointer on the JS set to point to list",
    "start": "495960",
    "end": "501800"
  },
  {
    "text": "new uh hash set hash table one thing we needed to keep in mind is that with list",
    "start": "501800",
    "end": "508479"
  },
  {
    "text": "new hash table the elements count is still a small integer zero however the",
    "start": "508479",
    "end": "514800"
  },
  {
    "text": "elements count property of the ordered has sets a structure that just set",
    "start": "514800",
    "end": "520000"
  },
  {
    "text": "previously pointed to is modified to be a pointer to the new hash table uh let's",
    "start": "520000",
    "end": "528120"
  },
  {
    "text": "previously hash table was also considered obsolet uh in this way we can see that",
    "start": "528120",
    "end": "534519"
  },
  {
    "text": "the table held in the V8 code after theity is triggered we all have its size",
    "start": "534519",
    "end": "540200"
  },
  {
    "text": "property changed from a small integer to a pointer in this case the property next",
    "start": "540200",
    "end": "545399"
  },
  {
    "text": "table and the property element count shares the same memory slots finally let's take a brief look at",
    "start": "545399",
    "end": "552640"
  },
  {
    "text": "why we Implement SL code logic let's make order hash set table obsolet as we",
    "start": "552640",
    "end": "558959"
  },
  {
    "text": "can quickly understand from the slides the obsolet table is designed primary for iterators uh the main way to",
    "start": "558959",
    "end": "566920"
  },
  {
    "text": "determine whether a hash set is obsolet or not is whether the VAR stored in the",
    "start": "566920",
    "end": "572800"
  },
  {
    "text": "element count property is an integer or a pointer the final question is how to",
    "start": "572800",
    "end": "579480"
  },
  {
    "text": "obsolute ordered has set the process can be triggered in two ways either by",
    "start": "579480",
    "end": "584880"
  },
  {
    "text": "adding or removing elements so that layer lens reaches a certain Threshold",
    "start": "584880",
    "end": "590279"
  },
  {
    "text": "at which point we at uh obsoletes the original ordered head sets and creates a",
    "start": "590279",
    "end": "596920"
  },
  {
    "text": "larger or smaller ordered haset or by directly executing the clean",
    "start": "596920",
    "end": "602279"
  },
  {
    "text": "function in this exploits we are using the first measures uh get back to variability",
    "start": "602279",
    "end": "609120"
  },
  {
    "text": "exploitation from the previous analysis we knew that uh the table variable holes",
    "start": "609120",
    "end": "614320"
  },
  {
    "text": "and obsoleted hash Table after the is triggered and the size field on the OBS",
    "start": "614320",
    "end": "620560"
  },
  {
    "text": "hash table is a pointer is stand instead of a new instead of a small integer",
    "start": "620560",
    "end": "627200"
  },
  {
    "text": "which is called Next table so how do we leak a pointer to control the memory",
    "start": "627200",
    "end": "632680"
  },
  {
    "text": "Let's ignore whether the memory is controllable or not and let's first try to leak out a pointer to an object uh",
    "start": "632680",
    "end": "640000"
  },
  {
    "text": "that should then have been in the user layer in the first place while browsing the source cord in uh while browsing the",
    "start": "640000",
    "end": "647360"
  },
  {
    "text": "S cord the method set prototype Union gets our interest this methods will copy",
    "start": "647360",
    "end": "653040"
  },
  {
    "text": "all the memory contents from obol hash table to a new one and you see",
    "start": "653040",
    "end": "659800"
  },
  {
    "text": "list a newly created has table to create a new has uh to create a new J sets and",
    "start": "659800",
    "end": "666560"
  },
  {
    "text": "a return since the union methods makes it makes it makes a complete copy of the",
    "start": "666560",
    "end": "674920"
  },
  {
    "text": "entire obsolet table uh therefore the table of J sets returned by list",
    "start": "674920",
    "end": "680040"
  },
  {
    "text": "measures is also obsolet uh repeat again uh the property next table and the",
    "start": "680040",
    "end": "685600"
  },
  {
    "text": "property size share the same memory slots in ed sets uh we can then try to",
    "start": "685600",
    "end": "692279"
  },
  {
    "text": "leak this next table value by accessing the size property of the uh J sets we",
    "start": "692279",
    "end": "698839"
  },
  {
    "text": "have made very minor changes to the PC we replace the meths called with Union",
    "start": "698839",
    "end": "705040"
  },
  {
    "text": "and L gets and print the size on the set object return return by the Union",
    "start": "705040",
    "end": "710959"
  },
  {
    "text": "function you can see that it prints out the internal structure ordered has sets not a regular integer uh but leaking out",
    "start": "710959",
    "end": "718839"
  },
  {
    "text": "one such internal ordered has set doesn't really help our exploits and we cannot make any changes to the internal",
    "start": "718839",
    "end": "725399"
  },
  {
    "text": "structure or really sensitive data uh if we can control the leaking next table",
    "start": "725399",
    "end": "730959"
  },
  {
    "text": "pointer uh offset this pointer slightly this way the next table pointer in the",
    "start": "730959",
    "end": "736800"
  },
  {
    "text": "obsoleted the ordered H sets will be offset to user controllable memory U",
    "start": "736800",
    "end": "742920"
  },
  {
    "text": "making it easier to for us to subsequently fake the objects uh once",
    "start": "742920",
    "end": "748240"
  },
  {
    "text": "again since next table and size property share the same memory slots in obol",
    "start": "748240",
    "end": "753480"
  },
  {
    "text": "ordered headsets we can manipulate the next table pointer by adding or deleting",
    "start": "753480",
    "end": "760040"
  },
  {
    "text": "me elements on list J set which holds uh list OBS related ordered H",
    "start": "760040",
    "end": "766279"
  },
  {
    "text": "sets uh when a new when a next table pointer can be manipulated for a",
    "start": "766279",
    "end": "772240"
  },
  {
    "text": "slightly offsets uh what we only need to do is lay out uh user controlable memory",
    "start": "772240",
    "end": "778600"
  },
  {
    "text": "object such as jsr in front of the obsolet ordered headset objects so let's",
    "start": "778600",
    "end": "786199"
  },
  {
    "text": "uh lak pointer point to the mid position on the jray uh and we can modify the",
    "start": "786199",
    "end": "793720"
  },
  {
    "text": "data on the jray as expected and then link the next table pointer to the user",
    "start": "793720",
    "end": "800199"
  },
  {
    "text": "for fake list for fake objects uh in this way since we have successfully for",
    "start": "800199",
    "end": "806600"
  },
  {
    "text": "fix G objects of control lens with a controllable backing store",
    "start": "806600",
    "end": "812120"
  },
  {
    "text": "pointer we have liability to read and write to arbitrary addresses within the",
    "start": "812120",
    "end": "818160"
  },
  {
    "text": "VH chip memory at that time uh the weh chip sandbox had not yet formed uh",
    "start": "818160",
    "end": "825079"
  },
  {
    "text": "security boundy so we could exploit L powerful pability to reach remote code",
    "start": "825079",
    "end": "831040"
  },
  {
    "text": "execution through its Point through its powerful exploit primitive in the next part we are going",
    "start": "831040",
    "end": "837880"
  },
  {
    "text": "to introduce l of missing checks due to BR assumption in code",
    "start": "837880",
    "end": "844240"
  },
  {
    "text": "optimization L vulnerability and the classic cack reability above have",
    "start": "844240",
    "end": "849600"
  },
  {
    "text": "relatively simple root curses but this reability involves code optimization",
    "start": "849600",
    "end": "854720"
  },
  {
    "text": "design okay so uh the most important and the complex part of the we8 engine is",
    "start": "854720",
    "end": "860880"
  },
  {
    "text": "the combination optimization Parts the first things we need to uh understand is",
    "start": "860880",
    "end": "867279"
  },
  {
    "text": "the design of check map node there is no way to do any advanced optimization of the target function",
    "start": "867279",
    "end": "874120"
  },
  {
    "text": "without being able to determine the type of arguments because the caller is likely to pass in a variety of different",
    "start": "874120",
    "end": "881600"
  },
  {
    "text": "types of arguments when calling a function uh when calling the target function uh to get an our list we use uh",
    "start": "881600",
    "end": "889120"
  },
  {
    "text": "feedback from the functions previous execution to assume the type of a",
    "start": "889120",
    "end": "894880"
  },
  {
    "text": "arguments and this is what the check map node does when the optimized function is",
    "start": "894880",
    "end": "901160"
  },
  {
    "text": "called uh the check map node will determine whether the type of current",
    "start": "901160",
    "end": "906800"
  },
  {
    "text": "incoming parameter is the expected one and then executes the specialization",
    "start": "906800",
    "end": "912560"
  },
  {
    "text": "code behind the normary uh if it's the nonexpected one uh then it needs to um",
    "start": "912560",
    "end": "919040"
  },
  {
    "text": "optimize the function to prevent the type confusion uh since that check map is a",
    "start": "919040",
    "end": "925519"
  },
  {
    "text": "runand check is necessary to perform this check before assuming that the",
    "start": "925519",
    "end": "931120"
  },
  {
    "text": "parameter is a certain type and then perform refinement operations such as uncheck pointer differences a l design",
    "start": "931120",
    "end": "938160"
  },
  {
    "text": "introduces some performance overhead because conventionally a functions arguments will always be of the same",
    "start": "938160",
    "end": "944720"
  },
  {
    "text": "type in this case it's actually unnecessary to uh check the type of",
    "start": "944720",
    "end": "950360"
  },
  {
    "text": "planets each time the function being CED this brings us to the key points we are",
    "start": "950360",
    "end": "956240"
  },
  {
    "text": "going to introduce uh L map dependency check map is more likely checking before",
    "start": "956240",
    "end": "961600"
  },
  {
    "text": "a pieces of code let relies on some type assumptions kind of like typ guard uh",
    "start": "961600",
    "end": "969240"
  },
  {
    "text": "stable map dependency is even more like checking for a c which is possible to",
    "start": "969240",
    "end": "975000"
  },
  {
    "text": "break the type assumptions in or optimize the function uh the third",
    "start": "975000",
    "end": "980120"
  },
  {
    "text": "points on the slides may not be clear uh what's what's the stable method and",
    "start": "980120",
    "end": "985639"
  },
  {
    "text": "what's the type transition here we have prepared examples that demonstrates what a stable",
    "start": "985639",
    "end": "992399"
  },
  {
    "text": "map is uh firstly we create two objects of exactly the same type reliable old",
    "start": "992399",
    "end": "998680"
  },
  {
    "text": "map and new map uh the type of both objects shares the same map with only",
    "start": "998680",
    "end": "1004399"
  },
  {
    "text": "one prop X initially these two variables share the same math and at this points",
    "start": "1004399",
    "end": "1011279"
  },
  {
    "text": "there are no other objects whose type is transitioned from this map therefore the",
    "start": "1011279",
    "end": "1017440"
  },
  {
    "text": "current map is marked as stable uh with the Box highlighted in the blue okay uh",
    "start": "1017440",
    "end": "1025120"
  },
  {
    "text": "let's do something interesting uh we assign a value to the property a of new",
    "start": "1025120",
    "end": "1030520"
  },
  {
    "text": "map uh making this object to creat a new property a after completing the",
    "start": "1030520",
    "end": "1037199"
  },
  {
    "text": "assignments operations to new map you can see that the map of reliable new map",
    "start": "1037199",
    "end": "1042600"
  },
  {
    "text": "is marked as stable and the map of the variable aut map is no longer stable uh",
    "start": "1042600",
    "end": "1048600"
  },
  {
    "text": "as lay is object transitionary from this map to another uh the most intuitive",
    "start": "1048600",
    "end": "1055720"
  },
  {
    "text": "understanding is that until now if there is no path to transition from one map to",
    "start": "1055720",
    "end": "1061520"
  },
  {
    "text": "another uh this map is will be considered stable uh let's take a let's",
    "start": "1061520",
    "end": "1068120"
  },
  {
    "text": "take a look at how it works in code optimization uh in this example the",
    "start": "1068120",
    "end": "1073880"
  },
  {
    "text": "function to be optimized which is called Fun will retrieve the property uh save",
    "start": "1073880",
    "end": "1079600"
  },
  {
    "text": "the in parameters and retain it before optimizing the function we create a",
    "start": "1079600",
    "end": "1085200"
  },
  {
    "text": "suitable object and pass it into fun to optimize the function based on the",
    "start": "1085200",
    "end": "1091080"
  },
  {
    "text": "exclusion feedback then we use the same procedure to create another object named",
    "start": "1091080",
    "end": "1097320"
  },
  {
    "text": "uh obj1 the purpose of using the same steps to create another object is to",
    "start": "1097320",
    "end": "1103159"
  },
  {
    "text": "prevent M transition however we do not use the list obj1 next but once again",
    "start": "1103159",
    "end": "1109600"
  },
  {
    "text": "use the previous object variable to call a fun function uh this process will not",
    "start": "1109600",
    "end": "1116520"
  },
  {
    "text": "trigger any code DE optimization and it is also easy to understand because the",
    "start": "1116520",
    "end": "1121640"
  },
  {
    "text": "parameter type passed in uh when calling the function are always the same uh what",
    "start": "1121640",
    "end": "1127720"
  },
  {
    "text": "would happen if such a line of code is added to the previously code you know",
    "start": "1127720",
    "end": "1134080"
  },
  {
    "text": "this ob one variable has no use and should not have any imps on the",
    "start": "1134080",
    "end": "1140320"
  },
  {
    "text": "optimized function the operation on this obg1 variable should not cause any coded",
    "start": "1140320",
    "end": "1146919"
  },
  {
    "text": "optimization however Cod optimization did occur as described in the figure the",
    "start": "1146919",
    "end": "1152640"
  },
  {
    "text": "reason is that uh Cod dependency is broken due to map transition uh very",
    "start": "1152640",
    "end": "1158200"
  },
  {
    "text": "interesting right so uh for stable map dependency there are two ways to H",
    "start": "1158200",
    "end": "1165159"
  },
  {
    "text": "theability inside the list components the first way is to to find the code to",
    "start": "1165159",
    "end": "1170280"
  },
  {
    "text": "find the logic where the compiler depends on a map but forget to register",
    "start": "1170280",
    "end": "1175600"
  },
  {
    "text": "it another way is to try to find a code pass to break the type assumption",
    "start": "1175600",
    "end": "1181559"
  },
  {
    "text": "without triggering the cback function let's de optimize the code uh commonality between these two ways is",
    "start": "1181559",
    "end": "1188400"
  },
  {
    "text": "that they break the time assumption on the optimize the function uh leading to",
    "start": "1188400",
    "end": "1194080"
  },
  {
    "text": "uh type confusion varability let's take a look at list morbility uh",
    "start": "1194080",
    "end": "1200080"
  },
  {
    "text": "in machine optimization reducer of Tu shaft we it's attempts to optimize the",
    "start": "1200080",
    "end": "1205440"
  },
  {
    "text": "map rows and directly operates on the objects to keep the object map",
    "start": "1205440",
    "end": "1211039"
  },
  {
    "text": "assumption uh we first try to uh with will attempt to create a stable map",
    "start": "1211039",
    "end": "1216960"
  },
  {
    "text": "dependency before optimizing uh map rows however there are slightly discrepancies",
    "start": "1216960",
    "end": "1223039"
  },
  {
    "text": "in determining whether a map is stable it's considered stable only when a map is not further specialized to our Maps",
    "start": "1223039",
    "end": "1231600"
  },
  {
    "text": "this approach is a bit interesting for primitive types such as string uh because primitive types cannot be",
    "start": "1231600",
    "end": "1238480"
  },
  {
    "text": "changed and the maps of Le types are always considered stable however",
    "start": "1238480",
    "end": "1244120"
  },
  {
    "text": "primitive objects do not necessarily means that layer map will not change",
    "start": "1244120",
    "end": "1249679"
  },
  {
    "text": "which allows us to try changing uh layer types through primitive objects without",
    "start": "1249679",
    "end": "1255440"
  },
  {
    "text": "triggering an optimization cack uh in this way we will ultimat cause the t",
    "start": "1255440",
    "end": "1261720"
  },
  {
    "text": "confus uh Tima cause the T confusion we can take a brief look at how some",
    "start": "1261720",
    "end": "1269120"
  },
  {
    "text": "developers fix list Mobility uh developer adds a white list at the if",
    "start": "1269120",
    "end": "1275279"
  },
  {
    "text": "statement will only optimize the TPS in the white list such as just objects",
    "start": "1275279",
    "end": "1281919"
  },
  {
    "text": "while directly optimizing other simple primitive types that can be optimized as",
    "start": "1281919",
    "end": "1288080"
  },
  {
    "text": "for types that are not included here such as string uh they will not be",
    "start": "1288080",
    "end": "1294240"
  },
  {
    "text": "optimized now we have reached the L exciting moment uh in this previous sections on the root on the root course",
    "start": "1294240",
    "end": "1301400"
  },
  {
    "text": "of varability we have uh already introduces the way to trigger in L",
    "start": "1301400",
    "end": "1307120"
  },
  {
    "text": "varability due to the inability of stable map dependency to detect map",
    "start": "1307120",
    "end": "1312559"
  },
  {
    "text": "changes of primitive type SE string we can change the type of incoming",
    "start": "1312559",
    "end": "1318039"
  },
  {
    "text": "parameters without triggering an optimization uh without triggering and",
    "start": "1318039",
    "end": "1323320"
  },
  {
    "text": "the optimization cack resulting type confusion uh the entire vulnerability exploitation process is divided into",
    "start": "1323320",
    "end": "1330520"
  },
  {
    "text": "three steps uh let's verify the vulnerability exploitation strategy firstly we create a stram variable of",
    "start": "1330520",
    "end": "1338640"
  },
  {
    "text": "type three stram afterwards uh we created a function called check CS to be",
    "start": "1338640",
    "end": "1345120"
  },
  {
    "text": "optimized uh which has a simple function of read a variable from a specific",
    "start": "1345120",
    "end": "1350960"
  },
  {
    "text": "offset position in this variable string and retaining it then we optimize the",
    "start": "1350960",
    "end": "1357679"
  },
  {
    "text": "check CS function manually at this point the check CS function will establish a",
    "start": "1357679",
    "end": "1362840"
  },
  {
    "text": "St map dependency for thing string before calling garbage collection when we call the check CS function we can see",
    "start": "1362840",
    "end": "1370279"
  },
  {
    "text": "that the entire function can process still uh the entire function call Process uh still returns uh the correct",
    "start": "1370279",
    "end": "1377600"
  },
  {
    "text": "value however after completing garbage collection which immediately trigger a",
    "start": "1377600",
    "end": "1382760"
  },
  {
    "text": "crash in next function core uh let's take a look at this string",
    "start": "1382760",
    "end": "1388840"
  },
  {
    "text": "object model we can clearly see that the th string object does not actually store thin string uh does not actually store",
    "start": "1388840",
    "end": "1396400"
  },
  {
    "text": "uh string data but uh rather holds a pointer to sequence string this string",
    "start": "1396400",
    "end": "1402720"
  },
  {
    "text": "uh content is actually stored in the memory of the sequence stram structure",
    "start": "1402720",
    "end": "1408080"
  },
  {
    "text": "uh in thin string is reference to sequence string so what happen if the optimized",
    "start": "1408080",
    "end": "1415480"
  },
  {
    "text": "fun function mistakenly identifies sequence string as th string a lenser is",
    "start": "1415480",
    "end": "1420679"
  },
  {
    "text": "OB we were able to freely control the the pointer values on the thin string",
    "start": "1420679",
    "end": "1426400"
  },
  {
    "text": "structure before triggering cage collection the variable string references the thin string objects which",
    "start": "1426400",
    "end": "1433320"
  },
  {
    "text": "is uh turn which is in turn references the sequence stram that actually stores",
    "start": "1433320",
    "end": "1439039"
  },
  {
    "text": "uh collector data however after triggering garage collection we discovered that sequence stram was",
    "start": "1439039",
    "end": "1446039"
  },
  {
    "text": "already in the old generation memory so there was no need to move the th string",
    "start": "1446039",
    "end": "1451559"
  },
  {
    "text": "objects from the new generation memory to other generate memory and updates the",
    "start": "1451559",
    "end": "1457279"
  },
  {
    "text": "pointer on it uh instead the pointing relationship of variable string can be",
    "start": "1457279",
    "end": "1463880"
  },
  {
    "text": "uh directly updated uh pointing directly to sequence string and releasing useless",
    "start": "1463880",
    "end": "1469559"
  },
  {
    "text": "th string since the function checkes still assume that the variable string is",
    "start": "1469559",
    "end": "1475480"
  },
  {
    "text": "of type th string the operation of reading data from the string in the",
    "start": "1475480",
    "end": "1480640"
  },
  {
    "text": "function will be specialized to obtain the pointer on string the reference it's",
    "start": "1480640",
    "end": "1486640"
  },
  {
    "text": "and reading a data from pointed memory uh in this way we can trigger",
    "start": "1486640",
    "end": "1491720"
  },
  {
    "text": "vulnerability by adjusting the string content to read arry addresses within",
    "start": "1491720",
    "end": "1497159"
  },
  {
    "text": "the weight Heap back cusing sensitive information leakage uh list shows how we",
    "start": "1497159",
    "end": "1502840"
  },
  {
    "text": "trigger M abilities to leak Base address of8 Heap uh after we trigger garbage",
    "start": "1502840",
    "end": "1509000"
  },
  {
    "text": "collections calling the check CS function will successfully leak base Heap addresses uh we create a special string",
    "start": "1509000",
    "end": "1516480"
  },
  {
    "text": "which represents a four byte data uh with a value of one at the memory level",
    "start": "1516480",
    "end": "1521520"
  },
  {
    "text": "uh in this way we can use the we can use list type confusion ability to arbitr read data from the first page on the we",
    "start": "1521520",
    "end": "1529440"
  },
  {
    "text": "Heap we can find the base address of the we Heap on that page which is considered",
    "start": "1529440",
    "end": "1534480"
  },
  {
    "text": "as sensitive information uh because string belongs to primitive type we cannot make any memory",
    "start": "1534480",
    "end": "1541440"
  },
  {
    "text": "modification through T confusion however from from the varability patch it can be",
    "start": "1541440",
    "end": "1547039"
  },
  {
    "text": "seen that besides the string type there are quite a few types that can be",
    "start": "1547039",
    "end": "1552520"
  },
  {
    "text": "attempted to trigger through list varability uh due to the time limits we",
    "start": "1552520",
    "end": "1557600"
  },
  {
    "text": "haven't done any further research here and you can give it a try if interested in the next section I will",
    "start": "1557600",
    "end": "1564399"
  },
  {
    "text": "introduce a regrettable fair Fox remote code exclusion the uh this probability",
    "start": "1564399",
    "end": "1570080"
  },
  {
    "text": "also existed in the implementation of a new feature the web assembly Gage",
    "start": "1570080",
    "end": "1575399"
  },
  {
    "text": "collection uh which started to be supported in all major function last year but two months after I kep it the",
    "start": "1575399",
    "end": "1584000"
  },
  {
    "text": "vulnerability was internally discovered and fixed by the Firefox",
    "start": "1584000",
    "end": "1589880"
  },
  {
    "text": "uh let's learn something about web assembly first you need to write a c code compile it and generates assembly",
    "start": "1589880",
    "end": "1597320"
  },
  {
    "text": "code and finally generates web assembly uh best codes afterwards this code will",
    "start": "1597320",
    "end": "1603559"
  },
  {
    "text": "be placed in the JavaScript code for exclusion the web assembly cabbage",
    "start": "1603559",
    "end": "1609039"
  },
  {
    "text": "collection proposal introduces several new uh types aimed at enabling more",
    "start": "1609039",
    "end": "1614600"
  },
  {
    "text": "complex data structure directory in web assembly such as structure type and",
    "start": "1614600",
    "end": "1620440"
  },
  {
    "text": "array type uh with SC uh correction supports the process of initializing web",
    "start": "1620440",
    "end": "1627559"
  },
  {
    "text": "assembly instances involves sequentially initializing imported function uh memory",
    "start": "1627559",
    "end": "1633760"
  },
  {
    "text": "tables text and the TPS uh please note the initialization order here where the",
    "start": "1633760",
    "end": "1640840"
  },
  {
    "text": "structure and array type definitions are initialized last uh interestingly the new new web",
    "start": "1640840",
    "end": "1648799"
  },
  {
    "text": "assembly standards introduces a feature that allows adding an optional",
    "start": "1648799",
    "end": "1654679"
  },
  {
    "text": "initializer expression to uh table definitions for elements types lacking",
    "start": "1654679",
    "end": "1660159"
  },
  {
    "text": "and implicates uh default value a fire fox implemented this standard last",
    "start": "1660159",
    "end": "1667240"
  },
  {
    "text": "year uh so here is the key code for array initialization please note that",
    "start": "1667240",
    "end": "1673679"
  },
  {
    "text": "when creating array variables in with the initialized expression the array type has not been",
    "start": "1673679",
    "end": "1681760"
  },
  {
    "text": "initialized yet the initialization of the type was mistaken placed at the end",
    "start": "1681760",
    "end": "1687840"
  },
  {
    "text": "as a as a result all members variables of type defined data are as layer",
    "start": "1687840",
    "end": "1694640"
  },
  {
    "text": "default value of zero at this sign uh this leads to element type size to being",
    "start": "1694640",
    "end": "1700720"
  },
  {
    "text": "zero as well and calculated total array size outline bites also turns out to to",
    "start": "1700720",
    "end": "1708240"
  },
  {
    "text": "be zero uh when offline Bice is zero a small memory space is allocated for",
    "start": "1708240",
    "end": "1715120"
  },
  {
    "text": "storing the array uh since n elements can be any controllable value uh this",
    "start": "1715120",
    "end": "1721480"
  },
  {
    "text": "enables us to perform out of B ser and right separations of any lens uh this is",
    "start": "1721480",
    "end": "1727399"
  },
  {
    "text": "the patch of the variabilities uh requiring only a simple adjustments of",
    "start": "1727399",
    "end": "1732799"
  },
  {
    "text": "the initialization order then it killed my the Set uh so once we have",
    "start": "1732799",
    "end": "1739399"
  },
  {
    "text": "constructed an array with controllable lens by the minimum memory location",
    "start": "1739399",
    "end": "1744840"
  },
  {
    "text": "exploiting this varability become trial uh we will skip this slides to the",
    "start": "1744840",
    "end": "1750679"
  },
  {
    "text": "audience because the time limits and it's a little comp is a little complicated however the details are",
    "start": "1750679",
    "end": "1757720"
  },
  {
    "text": "released in our white uh in our white paper uh in the following section we",
    "start": "1757720",
    "end": "1765039"
  },
  {
    "text": "will discuss the issue of integer overflow uh compared to the initializer",
    "start": "1765039",
    "end": "1770440"
  },
  {
    "text": "initialization order L mentioned earlier uh the root course of this Mobility is",
    "start": "1770440",
    "end": "1777559"
  },
  {
    "text": "relatively simple uh with the introduction of web assembly garbage collection objects spox has also",
    "start": "1777559",
    "end": "1785559"
  },
  {
    "text": "implemented related just inside optimization code for them uh however uh",
    "start": "1785559",
    "end": "1791159"
  },
  {
    "text": "integer workflow is you in this optimization code leads to um leads to",
    "start": "1791159",
    "end": "1796840"
  },
  {
    "text": "controllable array out of mouse read and rights uh in the spider marking engine",
    "start": "1796840",
    "end": "1803679"
  },
  {
    "text": "used in the Firefox browser when creating an array it size needs to be uh",
    "start": "1803679",
    "end": "1811519"
  },
  {
    "text": "specific this size is checked at wrong time to ensure that the alloca memory",
    "start": "1811519",
    "end": "1817840"
  },
  {
    "text": "size does not overflow however the Overflow check performed by the multiplication use sign",
    "start": "1817840",
    "end": "1825480"
  },
  {
    "text": "checks which allows certain special values to byac this check as you can see",
    "start": "1825480",
    "end": "1832120"
  },
  {
    "text": "the proof of Concepts is straightforward the first we creates an array with an",
    "start": "1832120",
    "end": "1839039"
  },
  {
    "text": "initial value of XX 1 one 2 two 3 4 4 a size of five then we create another",
    "start": "1839039",
    "end": "1846880"
  },
  {
    "text": "array with the initial value of LX de be and a size of XX uh FFF FF uh Special",
    "start": "1846880",
    "end": "1855279"
  },
  {
    "text": "Value let can byass sign check overflow uh the image below shows the",
    "start": "1855279",
    "end": "1861760"
  },
  {
    "text": "arrow outputs when spider markeing attempts to uh excute the pro of concept",
    "start": "1861760",
    "end": "1868159"
  },
  {
    "text": "the arror message indicates that the program has crashed uh so how to exploit",
    "start": "1868159",
    "end": "1874639"
  },
  {
    "text": "when exploiting spider monke abilities uh we typically aimed to construct",
    "start": "1874639",
    "end": "1880600"
  },
  {
    "text": "Primitives of arry read and right operations uh but we needed to know the",
    "start": "1880600",
    "end": "1887919"
  },
  {
    "text": "object model first uh this is um web assembly array object object model uh remember we need",
    "start": "1887919",
    "end": "1896120"
  },
  {
    "text": "to pay attention to our highlighted in blue uh namely num elements and data L",
    "start": "1896120",
    "end": "1904519"
  },
  {
    "text": "elements represents the number of elements which can be specific by our",
    "start": "1904519",
    "end": "1910960"
  },
  {
    "text": "parameters uh the data pointer points to the beginning of the of where the array",
    "start": "1910960",
    "end": "1917200"
  },
  {
    "text": "data is stor typically located just after the web assembly array",
    "start": "1917200",
    "end": "1922760"
  },
  {
    "text": "objects if we use array new to create two arrays so what would the memory",
    "start": "1922760",
    "end": "1928600"
  },
  {
    "text": "layouts look like uh the starting position of the second array objects",
    "start": "1928600",
    "end": "1934000"
  },
  {
    "text": "will be after the memory region where the first array stores its data in other",
    "start": "1934000",
    "end": "1941240"
  },
  {
    "text": "words if the first array is um out of bound read right array we can uh read",
    "start": "1941240",
    "end": "1948200"
  },
  {
    "text": "all that data after the first Aras data area out Mouse and uh at the same time",
    "start": "1948200",
    "end": "1954600"
  },
  {
    "text": "we have also modify all data after the first race data area out of",
    "start": "1954600",
    "end": "1960399"
  },
  {
    "text": "bouse uh returning to our initial questions so how do we convert this out",
    "start": "1960399",
    "end": "1966919"
  },
  {
    "text": "of lines out of bous read and rights into arbitrary read and rights first we",
    "start": "1966919",
    "end": "1973399"
  },
  {
    "text": "uh can utilize Al bounce read to read the stack data after the first race data",
    "start": "1973399",
    "end": "1980919"
  },
  {
    "text": "area for example we can read the array contents pointed two by the the first by",
    "start": "1980919",
    "end": "1987960"
  },
  {
    "text": "the data pointer on the secondary uh or we can read the data pointer itself in",
    "start": "1987960",
    "end": "1995000"
  },
  {
    "text": "the secondary uh in this way we can obtain a stack we can obtain a stack related",
    "start": "1995000",
    "end": "2002159"
  },
  {
    "text": "address uh through this powerful exploitation primitive we can leverage this uh varability to achieve remote",
    "start": "2002159",
    "end": "2010880"
  },
  {
    "text": "code exclusion uh in the last sess we will demonstrate two remote code exclusion",
    "start": "2010880",
    "end": "2017559"
  },
  {
    "text": "demo and these two are relatively simple the first one is C issue with in run T",
    "start": "2017559",
    "end": "2024000"
  },
  {
    "text": "ports andal thisis",
    "start": "2024000",
    "end": "2027279"
  },
  {
    "text": "video the first we'll try to compile V8 engine and run proof of of concept",
    "start": "2029039",
    "end": "2036600"
  },
  {
    "text": "multiple times and then we will get the share the second is um uh is an wner",
    "start": "2036600",
    "end": "2045919"
  },
  {
    "text": "ability on the fair Fox we just simply run the proof of of concept and",
    "start": "2045919",
    "end": "2052079"
  },
  {
    "text": "calculation we all finally pop up uh let's all thank you for your",
    "start": "2052079",
    "end": "2057638"
  },
  {
    "text": "listenings [Applause]",
    "start": "2057639",
    "end": "2065730"
  }
]