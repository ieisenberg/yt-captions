[
  {
    "text": "by the sound of knowledge incorporated",
    "start": "320",
    "end": "4439"
  },
  {
    "text": "i'm just going to start the talk and people can drift in as as they wish",
    "start": "21920",
    "end": "27519"
  },
  {
    "text": "first off can i say good morning to everybody and i hope you're all enjoying vegas because i'm sure of vegas is enjoying",
    "start": "27519",
    "end": "33520"
  },
  {
    "text": "your money certainly did mine anyway",
    "start": "33520",
    "end": "38239"
  },
  {
    "text": "okay first off some of you may have seen on the the schedule that uh i was down as",
    "start": "39280",
    "end": "44960"
  },
  {
    "text": "managing director of cerberus information security um i'm happy to announce that uh cerberus and uh at",
    "start": "44960",
    "end": "51280"
  },
  {
    "text": "stake have joined forces so hence the uh the at stake uh pp uh powerpoint",
    "start": "51280",
    "end": "57120"
  },
  {
    "text": "presentation okay um",
    "start": "57120",
    "end": "62879"
  },
  {
    "text": "i was told not to say um and i've done it like in the first two minutes right today we're going to talk about",
    "start": "62879",
    "end": "68880"
  },
  {
    "text": "buffer overruns it's simply um",
    "start": "68880",
    "end": "74320"
  },
  {
    "text": "looking at on a basic level showing you how to recognize one how to exploit one",
    "start": "74320",
    "end": "80159"
  },
  {
    "text": "uh and this is hopefully with no prior knowledge of buffer overruns and what they are so uh i know uh dom uh if dom's",
    "start": "80159",
    "end": "88960"
  },
  {
    "text": "around uh was doing this a similar talk uh a few days ago so hopefully we're not gonna cover too much similar ground but",
    "start": "88960",
    "end": "95680"
  },
  {
    "text": "let's get started anyway",
    "start": "95680",
    "end": "99400"
  },
  {
    "text": "okay uh as i said the theme of this talk is being able to write buffer overruns with very limited knowledge so i'm going",
    "start": "101600",
    "end": "108479"
  },
  {
    "text": "to start with a quote by a man called plato he said at one point the only thing i",
    "start": "108479",
    "end": "115200"
  },
  {
    "text": "know is i know nothing and i would like to say that i know nothing",
    "start": "115200",
    "end": "120799"
  },
  {
    "text": "um just before i start okay so what is a buffer over on and why",
    "start": "120799",
    "end": "125840"
  },
  {
    "text": "should you care um can i get a show of hands to see how many people have heard of buffer",
    "start": "125840",
    "end": "131920"
  },
  {
    "text": "overruns and and know what they are so the majority of people in here damn it",
    "start": "131920",
    "end": "138480"
  },
  {
    "text": "okay um for those that didn't raise their hand um i'll give a quick explanation of of what",
    "start": "139360",
    "end": "146160"
  },
  {
    "text": "above buffer overrun is um imagine a running computer program uh",
    "start": "146160",
    "end": "151760"
  },
  {
    "text": "sometimes known as a process um obviously for that program to be useful",
    "start": "151760",
    "end": "157120"
  },
  {
    "text": "it's got to deal with data um it will say imagine a program that will",
    "start": "157120",
    "end": "162640"
  },
  {
    "text": "simply say enter your name so you enter your name and then it will print to the screen hello whatever you typed in",
    "start": "162640",
    "end": "168640"
  },
  {
    "text": "so it basically sets aside a buffer imagine a buffer basically is being",
    "start": "168640",
    "end": "174560"
  },
  {
    "text": "a cup or something like that now normally uh this would be able to hold the average person's name um",
    "start": "174560",
    "end": "182319"
  },
  {
    "text": "there's our buffer the name goes in there and uh it then does a a number of different things so",
    "start": "182319",
    "end": "189360"
  },
  {
    "text": "i'm not sure if you've uh you've actually got this printed out but consider five steps ask the user to type",
    "start": "189360",
    "end": "196640"
  },
  {
    "text": "something set aside 100 bytes of memory as a as a as the buffer to hold whatever",
    "start": "196640",
    "end": "202080"
  },
  {
    "text": "the user types wait for input on getting the user's input copy all of the all of",
    "start": "202080",
    "end": "208000"
  },
  {
    "text": "it to the 100 byte buffer read the contents of the buffer and print it to the screen okay",
    "start": "208000",
    "end": "213599"
  },
  {
    "text": "so where the overflow occurs",
    "start": "213599",
    "end": "218560"
  },
  {
    "text": "i'm not actually going to do it but you can imagine someone enters too much data",
    "start": "218640",
    "end": "225040"
  },
  {
    "text": "the buffer's gonna overflow and it's gonna start causing pyrotechnics or something",
    "start": "225040",
    "end": "231360"
  },
  {
    "text": "um now when the overflow occurs um this is by someone entering too much",
    "start": "231360",
    "end": "237760"
  },
  {
    "text": "data so we've set aside a hundred bite buffer basically and someone enters say 200 characters uh in other words tries",
    "start": "237760",
    "end": "243519"
  },
  {
    "text": "putting 200 bytes into a 100 byte buffer you can imagine what's going to happen it's all going to overflow and",
    "start": "243519",
    "end": "251040"
  },
  {
    "text": "sometimes it will overwrite critical parts of other data and memory",
    "start": "251040",
    "end": "257280"
  },
  {
    "text": "now to explain that this is going to be fairly disjointed",
    "start": "257280",
    "end": "262400"
  },
  {
    "text": "and everything by the way so please excuse me this is my first time speaking in public i'm but a simple man",
    "start": "262400",
    "end": "268479"
  },
  {
    "text": "and everything like that okay um so",
    "start": "268479",
    "end": "275280"
  },
  {
    "text": "once the buffer's overflowed",
    "start": "275840",
    "end": "279199"
  },
  {
    "text": "it's been overflowed um right i'm just going to start reading from",
    "start": "281199",
    "end": "286479"
  },
  {
    "text": "from here this is probably going to be easier when you run a program it becomes known",
    "start": "286479",
    "end": "292080"
  },
  {
    "text": "as a process and is given 4 gigabytes of address space to execute him now what that means exactly is it's like",
    "start": "292080",
    "end": "299280"
  },
  {
    "text": "a playground they the the computer operating system says i'm going to give you four",
    "start": "299280",
    "end": "305040"
  },
  {
    "text": "gigabytes of address space starting from addresses 0 down to f f f f f f uh f f being uh hex",
    "start": "305040",
    "end": "314240"
  },
  {
    "text": "for 256 by the way um is that right um",
    "start": "314240",
    "end": "320400"
  },
  {
    "text": "again so um the best way to imagine this is uh",
    "start": "320400",
    "end": "329680"
  },
  {
    "text": "sorry uh if i stand back here can people hear me at all or do i need to speak up",
    "start": "331440",
    "end": "338479"
  },
  {
    "text": "just pick up okay i'll just try and stand here imagine um you have",
    "start": "338479",
    "end": "343919"
  },
  {
    "text": "zero here and ff down here when you run the computer program basically like say for",
    "start": "343919",
    "end": "349680"
  },
  {
    "text": "example notepad.exe it basically almost peels the the data off that disk and",
    "start": "349680",
    "end": "355759"
  },
  {
    "text": "slaps it into memory okay and that's the computer code basically now",
    "start": "355759",
    "end": "361039"
  },
  {
    "text": "as far as buffer overruns are concerned there's another area of interest another area of memory we're interested",
    "start": "361039",
    "end": "366240"
  },
  {
    "text": "in this is known as the stack okay so continuing reading as you'll be aware",
    "start": "366240",
    "end": "373680"
  },
  {
    "text": "most programs manipulate data in one form or another any that don't will be pretty useless",
    "start": "373680",
    "end": "378960"
  },
  {
    "text": "accordingly there's a block of address space that is designated as the area where data will be stored and",
    "start": "378960",
    "end": "384319"
  },
  {
    "text": "manipulated this area is known as the stack and dynamically shrinks and grows as and when desired",
    "start": "384319",
    "end": "391120"
  },
  {
    "text": "it's easiest to think of this this stack as an expandable workbench you know something that a carpenter or a diy",
    "start": "391120",
    "end": "397840"
  },
  {
    "text": "expert uh or lover would do uh when the stack grows now this is uh",
    "start": "397840",
    "end": "403919"
  },
  {
    "text": "sort of crucial sorry we're talking about uh intel platforms here by the way as opposed to spark so that's a an",
    "start": "403919",
    "end": "409919"
  },
  {
    "text": "important point when the stack grows it grows towards address zero it will probably never get",
    "start": "409919",
    "end": "417280"
  },
  {
    "text": "there but just remember it grows from this way up towards zero okay",
    "start": "417280",
    "end": "425680"
  },
  {
    "text": "um keep on doing this um thing okay",
    "start": "425680",
    "end": "431680"
  },
  {
    "text": "if you would like to look on the screen to my right assuming the bottom of the stack can be",
    "start": "431680",
    "end": "437919"
  },
  {
    "text": "found at address 12 ff 0f it looks like this before it grows so we",
    "start": "437919",
    "end": "444000"
  },
  {
    "text": "have the the bottom of the stack here",
    "start": "444000",
    "end": "450280"
  },
  {
    "text": "and the top of the stack just above it i don't know if you guys can see over there so",
    "start": "450960",
    "end": "457840"
  },
  {
    "text": "now when it grows it looks like this you can see the old",
    "start": "457840",
    "end": "465120"
  },
  {
    "text": "top of the stack and where our new top of the stack is so that's what i mean by it grows towards address zero",
    "start": "465120",
    "end": "471919"
  },
  {
    "text": "but when it shrinks it does that so there was our old top of the stack and now we're down to uh",
    "start": "471919",
    "end": "481840"
  },
  {
    "text": "down there so where is all this leading just setting the scene to explain how a",
    "start": "481840",
    "end": "486960"
  },
  {
    "text": "program executes and it's important to know the the stack",
    "start": "486960",
    "end": "494240"
  },
  {
    "text": "before i can explain it as you'll see this is integral to the understanding and exploiting a buffer overrun",
    "start": "494240",
    "end": "500319"
  },
  {
    "text": "a program can be really divided up into district discrete chunks of code",
    "start": "500319",
    "end": "507120"
  },
  {
    "text": "called procedures that each perform their own little task but when combined as a whole together they pride the",
    "start": "507120",
    "end": "512560"
  },
  {
    "text": "program's functionality each of these procedures execute and when finished the next procedure is",
    "start": "512560",
    "end": "518080"
  },
  {
    "text": "called and it goes off and does its little bit when the next procedure is called and this is the key the address following",
    "start": "518080",
    "end": "525360"
  },
  {
    "text": "the address where the call to execute sorry starting again because this is crucial",
    "start": "525360",
    "end": "532320"
  },
  {
    "text": "when the next procedure is called and this is the key the address following the address of where the call to execute",
    "start": "532320",
    "end": "538959"
  },
  {
    "text": "oh typo okay i'm just going to ignore this for a minute",
    "start": "538959",
    "end": "544399"
  },
  {
    "text": "when a procedure is called basically the address directly below it",
    "start": "544399",
    "end": "551040"
  },
  {
    "text": "that's pushed on to the stack so when that procedure that has just been called finish executing the processor will go",
    "start": "551040",
    "end": "558000"
  },
  {
    "text": "onto the stack and look for the address to return to so it can continue from where it left off",
    "start": "558000",
    "end": "564000"
  },
  {
    "text": "is is is anyone um not understanding what i mean by that",
    "start": "564000",
    "end": "569519"
  },
  {
    "text": "no good i'm sorry",
    "start": "569519",
    "end": "575040"
  },
  {
    "text": "everybody um right i will go over this uh a couple more times um",
    "start": "575200",
    "end": "582720"
  },
  {
    "text": "okay uh as i said the computer code is uh broken up into discrete little chunks of code basically",
    "start": "582880",
    "end": "590560"
  },
  {
    "text": "and we'll term these procedures now um procedure one",
    "start": "590560",
    "end": "596720"
  },
  {
    "text": "goes off does its bit of execution and then it returns now the next time some",
    "start": "596720",
    "end": "602000"
  },
  {
    "text": "procedure is called basically when that's called the address one down from that call",
    "start": "602000",
    "end": "608000"
  },
  {
    "text": "statement okay is that address is pushed onto the stack so once that procedure has finished",
    "start": "608000",
    "end": "614880"
  },
  {
    "text": "doing its whatever it needed to do that address is pulled off of the stack basically",
    "start": "614880",
    "end": "620640"
  },
  {
    "text": "so the processor then jumps to that address and starts executing downwards from there yeah it's just uh the saved return",
    "start": "620640",
    "end": "627600"
  },
  {
    "text": "address that's that's all it's doing it's placing it on top of the stack",
    "start": "627600",
    "end": "633040"
  },
  {
    "text": "so",
    "start": "633040",
    "end": "635199"
  },
  {
    "text": "i've got to cut this arm thing out um",
    "start": "639440",
    "end": "644680"
  },
  {
    "text": "consider the following the top of the stack can be found at address 12 ff04",
    "start": "646640",
    "end": "652880"
  },
  {
    "text": "the program is just about to execute the instruction that can be found at address 40",
    "start": "652880",
    "end": "659200"
  },
  {
    "text": "f 2 0 3 4 call procedure q which can be found at",
    "start": "659200",
    "end": "664800"
  },
  {
    "text": "address 402 9876 so here's the top of our stack",
    "start": "664800",
    "end": "671279"
  },
  {
    "text": "there's i'm pointing here it's not going to be any good we're looking at the",
    "start": "671279",
    "end": "678240"
  },
  {
    "text": "diagram here",
    "start": "678240",
    "end": "681880"
  },
  {
    "text": "and then cut out a uh a lot of the address space and there we have our instruction at",
    "start": "688959",
    "end": "694880"
  },
  {
    "text": "address 401 f2034 called procedure queue process is about to execute this okay",
    "start": "694880",
    "end": "702079"
  },
  {
    "text": "procedure cues much further down and we reach the bottom of our address",
    "start": "702079",
    "end": "708079"
  },
  {
    "text": "space when the instruction at a address 401 f 2034 is executed our address space looks",
    "start": "708079",
    "end": "716000"
  },
  {
    "text": "like this as you can see this is the top of the stack at the the",
    "start": "716000",
    "end": "722000"
  },
  {
    "text": "top of the document on on the right here the address",
    "start": "722000",
    "end": "727440"
  },
  {
    "text": "one below where the cool exit call procedure queue statement was called",
    "start": "727440",
    "end": "733040"
  },
  {
    "text": "it's been pushed onto the stack",
    "start": "733040",
    "end": "736320"
  },
  {
    "text": "has everyone got this um on their their schedule stuff by the way",
    "start": "741600",
    "end": "747440"
  },
  {
    "text": "can can you see this if for those people over on on my left if you can't see the board",
    "start": "747440",
    "end": "753519"
  },
  {
    "text": "okay cool as you can see the address after the address where call procedure queue can",
    "start": "753519",
    "end": "760560"
  },
  {
    "text": "be found has been pushed onto the stack on top of the stack the reason this happens is so",
    "start": "760560",
    "end": "766000"
  },
  {
    "text": "that when procedure queue has finished its task and is ready to return the processor can pull this address off the",
    "start": "766000",
    "end": "771600"
  },
  {
    "text": "stack and resume execution from where it left off this address is known as the",
    "start": "771600",
    "end": "776639"
  },
  {
    "text": "saved return address from an from an attacker's perspective",
    "start": "776639",
    "end": "782000"
  },
  {
    "text": "if this saved return address could somehow be overwritten when something by with something else when procedure queue",
    "start": "782000",
    "end": "788800"
  },
  {
    "text": "is finished executing uh then the the replaced return address is pre peeled off the stack uh then it",
    "start": "788800",
    "end": "795440"
  },
  {
    "text": "would be possible to get the program to execute arbitrary code imagine if somehow an attacker could",
    "start": "795440",
    "end": "802160"
  },
  {
    "text": "overwrite this save to china address it would then be possible to jump to an arbitrary address in memory of the",
    "start": "802160",
    "end": "807200"
  },
  {
    "text": "attacker's choosing thus radically altering the original intended path of the program's execution",
    "start": "807200",
    "end": "813760"
  },
  {
    "text": "jump to the right place and it might even be possible to execute computer code of the attackers choosing to",
    "start": "813760",
    "end": "820000"
  },
  {
    "text": "enter the buffer over on exploit and uh the whole reason behind this talk",
    "start": "820000",
    "end": "825519"
  },
  {
    "text": "remember the stack is also placed the place where data is manipulated if we can find and cause a",
    "start": "825519",
    "end": "832000"
  },
  {
    "text": "buffer overflow it will be possible to overwrite the saved return address and gain complete control of the program's",
    "start": "832000",
    "end": "837519"
  },
  {
    "text": "execution now uh talking about web servers you can",
    "start": "837519",
    "end": "842560"
  },
  {
    "text": "imagine if if we can find a buffer over on a web server and we can gain control of that",
    "start": "842560",
    "end": "847680"
  },
  {
    "text": "program's execution um then from from a remote location we can",
    "start": "847680",
    "end": "853040"
  },
  {
    "text": "pretty much compromise that web server so these are pretty handy for an",
    "start": "853040",
    "end": "858079"
  },
  {
    "text": "attacker not very good for someone trying to defend their web server",
    "start": "858079",
    "end": "862959"
  },
  {
    "text": "okay the first step in being able to exploit a buffer overrun sorry this is the first step in being",
    "start": "863600",
    "end": "870720"
  },
  {
    "text": "able to exploit buffer overrun but why do situations that allow memory buffers to be overflowed crop up",
    "start": "870720",
    "end": "876480"
  },
  {
    "text": "more often than not buffer overall vulnerabilities are caused by poor or lazy programming though in all fairness",
    "start": "876480",
    "end": "881920"
  },
  {
    "text": "they can simply be an oversight much uh anti-sniff",
    "start": "881920",
    "end": "887519"
  },
  {
    "text": "um to this the programming language used to write the program is in the first instance is",
    "start": "887519",
    "end": "894639"
  },
  {
    "text": "partially to blame two most overruns can be uh found in programs written in c or c plus plus and",
    "start": "894639",
    "end": "900880"
  },
  {
    "text": "are usually caused by uh how c handles character strings other program other programming",
    "start": "900880",
    "end": "907040"
  },
  {
    "text": "languages handle strings in a much more safe manner consider the following c source",
    "start": "907040",
    "end": "913360"
  },
  {
    "text": "basically if you have a quick uh look at this um all it does is say enter some",
    "start": "913360",
    "end": "918880"
  },
  {
    "text": "characters the the program when it's compiled will then take that uh",
    "start": "918880",
    "end": "923920"
  },
  {
    "text": "input from the from the console and then echo it to the screen okay",
    "start": "923920",
    "end": "930720"
  },
  {
    "text": "i've already said that the problem with the gets function which is in the c source code is it keeps on",
    "start": "935120",
    "end": "942000"
  },
  {
    "text": "copying data until it comes across a null byte and if the first null byte happens to be 200 bytes away from the",
    "start": "942000",
    "end": "949040"
  },
  {
    "text": "beginning of the string then to 200 bytes will be copied to the 100 byte buffer the math simply doesn't go and",
    "start": "949040",
    "end": "956000"
  },
  {
    "text": "the overflow occurs a null is simply a byte with a numeric value of zero",
    "start": "956000",
    "end": "961199"
  },
  {
    "text": "strings are terminated with nulls in c and c plus plus um to denote where the string actually",
    "start": "961199",
    "end": "967600"
  },
  {
    "text": "ends other c functions that lead to similar problems are strcpy which copies the contents of one",
    "start": "967600",
    "end": "974320"
  },
  {
    "text": "string buffer to another str cat which tacks on the end of one string onto the",
    "start": "974320",
    "end": "980000"
  },
  {
    "text": "the end of another buffer obviously in both of these cases if one buffer isn't big enough to hold the other then an",
    "start": "980000",
    "end": "985839"
  },
  {
    "text": "overflow occurs there are other c functions that have similar problems but we'll leave these for the moment",
    "start": "985839",
    "end": "991839"
  },
  {
    "text": "these functions all do however have safer equivalents for example strcat has strong cat and strcpy has str and cpy",
    "start": "991839",
    "end": "1001839"
  },
  {
    "text": "and getz has f gets with each of these you can specify how many bytes are to be copied to the buffer regardless of where",
    "start": "1001839",
    "end": "1008160"
  },
  {
    "text": "the string is in alternate whether the string is no terminate well it will be non-terminated but where that null",
    "start": "1008160",
    "end": "1013920"
  },
  {
    "text": "terminator occurs it's regardless you say copy 200 bytes to the buffer it will only copy 200 bytes to the buffer",
    "start": "1013920",
    "end": "1021920"
  },
  {
    "text": "using these functions still can lead to problems i won't go into those now but providing",
    "start": "1021920",
    "end": "1027360"
  },
  {
    "text": "you're checking your buffer lengths and everything like that you shouldn't have problems like this",
    "start": "1027360",
    "end": "1033038"
  },
  {
    "text": "i won't go into s printf",
    "start": "1033199",
    "end": "1037160"
  },
  {
    "text": "putting this together here's how we gain control of the program's execution",
    "start": "1039360",
    "end": "1044400"
  },
  {
    "text": "a program calls print message to a screen asking the user to type something procedure this is the uh going over the",
    "start": "1044400",
    "end": "1051039"
  },
  {
    "text": "the c source that uh just previously discussed by the way b return address is pushed onto the",
    "start": "1051039",
    "end": "1057360"
  },
  {
    "text": "stack c print a message to the screen asking the user to type something procedure",
    "start": "1057360",
    "end": "1062720"
  },
  {
    "text": "executes d print a message to the screen asking the user to type something procedure returns to the address that was saved on",
    "start": "1062720",
    "end": "1069360"
  },
  {
    "text": "the stack e program sets aside 100 bytes of memory on the stack for the buffer",
    "start": "1069360",
    "end": "1074799"
  },
  {
    "text": "here the user enters 200 bytes of input f program calls the copy the user",
    "start": "1074799",
    "end": "1080480"
  },
  {
    "text": "applied data onto the stack procedure return address",
    "start": "1080480",
    "end": "1086559"
  },
  {
    "text": "is pushed onto the stack the copy the user supplied data onto the buffer procedure executes and",
    "start": "1086559",
    "end": "1093280"
  },
  {
    "text": "copies those 200 bytes of view supplied data to the stack at step 8 in the process of doing this",
    "start": "1093280",
    "end": "1099440"
  },
  {
    "text": "the save return address on the stack is overwritten j",
    "start": "1099440",
    "end": "1104640"
  },
  {
    "text": "the copy of the user apply user supply data to the buffer on stack",
    "start": "1104640",
    "end": "1110960"
  },
  {
    "text": "to buffer on stack procedure returns to the address that was saved on the stack aha",
    "start": "1110960",
    "end": "1116559"
  },
  {
    "text": "but this has been overwritten with the user supplied data now here's the crunch we now control where the program will",
    "start": "1116559",
    "end": "1122320"
  },
  {
    "text": "return to and if we overwrite this with an address in memory where our user-supplied data can be found we can",
    "start": "1122320",
    "end": "1127919"
  },
  {
    "text": "possibly execute computer code of our choosing we do this by putting together the code",
    "start": "1127919",
    "end": "1133919"
  },
  {
    "text": "putting the code in the data that we supply and so when the program returns it does so to our buffer and",
    "start": "1133919",
    "end": "1140799"
  },
  {
    "text": "hence computer code then the code is executed",
    "start": "1140799",
    "end": "1145919"
  },
  {
    "text": "simply this is the buffer over on exploited granted the actual mechanics of",
    "start": "1147360",
    "end": "1153280"
  },
  {
    "text": "exploiting the buffer overrun are more difficult but before we examine the exploit building process i'd better explain a few more things",
    "start": "1153280",
    "end": "1159760"
  },
  {
    "text": "for those wanting zero day exploits you'll just have to hold on a few minutes and then i'll get to the uh well",
    "start": "1159760",
    "end": "1165760"
  },
  {
    "text": "it was publicly undisclosed but it's all being printed anyway so um moving on swiftly",
    "start": "1165760",
    "end": "1173200"
  },
  {
    "text": "everyone knows that a cpu sorry everyone knows that a computer cpu or processor",
    "start": "1173600",
    "end": "1179360"
  },
  {
    "text": "is the hardware component that does all the donkey work it's the thing for one of a better word",
    "start": "1179360",
    "end": "1185039"
  },
  {
    "text": "that executes a program's code i keep on referring to the computer code",
    "start": "1185039",
    "end": "1190160"
  },
  {
    "text": "but what is this code exactly well again as many of uh you know computers are logical beasts and work with numbers to",
    "start": "1190160",
    "end": "1197039"
  },
  {
    "text": "a computer everything is seen as a number a binary one at that to be able to do anything useful a",
    "start": "1197039",
    "end": "1203520"
  },
  {
    "text": "processor needs to have a set of instructions that it knows and can blindly follow",
    "start": "1203520",
    "end": "1208799"
  },
  {
    "text": "for example if it comes across the instruction hex 55",
    "start": "1208799",
    "end": "1214240"
  },
  {
    "text": "it knows what to do with it it knows this because it has an instruction set",
    "start": "1214240",
    "end": "1220799"
  },
  {
    "text": "this instruction set is a a list of operations that map to a numeric value",
    "start": "1220799",
    "end": "1226320"
  },
  {
    "text": "or code these are often referred to as opcodes that's all computer code is a list of op",
    "start": "1226320",
    "end": "1232159"
  },
  {
    "text": "codes strung together in a certain way that will produce something useful",
    "start": "1232159",
    "end": "1237520"
  },
  {
    "text": "when someone programs with these numbers it's known as programming using machine code in other words the real language",
    "start": "1237520",
    "end": "1243679"
  },
  {
    "text": "language of what the computer talks and understands when we program in a high-level language like c our human friendly source is",
    "start": "1243679",
    "end": "1250480"
  },
  {
    "text": "converted to the to in into machine code this is then executed by the computer",
    "start": "1250480",
    "end": "1257600"
  },
  {
    "text": "to help with the actual processing a processor has little storage units on it called registers these registers can",
    "start": "1257600",
    "end": "1264320"
  },
  {
    "text": "hold values addresses and the like some of them have a special purpose for",
    "start": "1264320",
    "end": "1269919"
  },
  {
    "text": "example the eip register is known as the instruction pointer it contains the",
    "start": "1269919",
    "end": "1275039"
  },
  {
    "text": "address of or points to the next instruction to execute remember the stack",
    "start": "1275039",
    "end": "1280559"
  },
  {
    "text": "there are two registers that's uh that's there specifically to help with",
    "start": "1280559",
    "end": "1286320"
  },
  {
    "text": "manipulate and keep track of data on top of the stack the ebp",
    "start": "1286320",
    "end": "1291440"
  },
  {
    "text": "register is the base pointer and contains the address of the bottom of the stack then there's the esp or stack pointer",
    "start": "1291440",
    "end": "1299039"
  },
  {
    "text": "which points to the top of the stack as far as this talk goes these three registers are enough to know about and",
    "start": "1299039",
    "end": "1304799"
  },
  {
    "text": "as far as their purposes and uh as far as their purpose is concerned for the time being though just note that",
    "start": "1304799",
    "end": "1311520"
  },
  {
    "text": "we have a number of other registers available for for our use such as the eax esi edi and a few others",
    "start": "1311520",
    "end": "1319919"
  },
  {
    "text": "it is with the use of these registers that the work is actually done before you can manipulate any data a",
    "start": "1319919",
    "end": "1325600"
  },
  {
    "text": "pointer needs to be placed to it in in one of these registers slightly more user friendly than machine code is",
    "start": "1325600",
    "end": "1332080"
  },
  {
    "text": "assembly language by the way a pointer simply points to an address in memory",
    "start": "1332080",
    "end": "1338000"
  },
  {
    "text": "so you can use that as a reference say this pointer points to my character",
    "start": "1338000",
    "end": "1343200"
  },
  {
    "text": "string so every time i want to refer to that character string i'm just going to use this pointer because it basically",
    "start": "1343200",
    "end": "1349200"
  },
  {
    "text": "points to it consider the following snippet of assembly code",
    "start": "1349200",
    "end": "1354880"
  },
  {
    "text": "move into the eax the number 4 move into the edx the number one",
    "start": "1354880",
    "end": "1361039"
  },
  {
    "text": "and add the two together this simply moves into the eax register the hex",
    "start": "1361039",
    "end": "1367600"
  },
  {
    "text": "value zero four then moves the value one into the udx register and finishes by",
    "start": "1367600",
    "end": "1372960"
  },
  {
    "text": "adding the two together deja vu leaving the value 5 in the ex simple",
    "start": "1372960",
    "end": "1380640"
  },
  {
    "text": "really a when we're building our exploit code we'll be using assembly language and once that's been done we'll put it",
    "start": "1380640",
    "end": "1387280"
  },
  {
    "text": "through the debugger to get the machine code equivalent if this is this is the machine code we'll be",
    "start": "1387280",
    "end": "1392480"
  },
  {
    "text": "putting into our buffer so with all of this let's start building our exploit in my opinion there are",
    "start": "1392480",
    "end": "1399120"
  },
  {
    "text": "seven steps to building a buffer over on exploit one first find the buffer over on",
    "start": "1399120",
    "end": "1404159"
  },
  {
    "text": "vulnerability two when found find out how many bytes are required to overflow the buffer and",
    "start": "1404159",
    "end": "1410720"
  },
  {
    "text": "overwrite the returned the saved return address three find a copy of our user supplied data",
    "start": "1410720",
    "end": "1417840"
  },
  {
    "text": "somewhere in the address space work out what address we need to to use to overwrite the saved return address",
    "start": "1417840",
    "end": "1424320"
  },
  {
    "text": "with to be able to get back to our buffer work out what we want to do with our",
    "start": "1424320",
    "end": "1429360"
  },
  {
    "text": "overflow exploit you know what command we want to run you know and or stuff like that then write our computer code",
    "start": "1429360",
    "end": "1435679"
  },
  {
    "text": "that'll perform what we've decided we want to do in step five and then seven test it and uh",
    "start": "1435679",
    "end": "1442000"
  },
  {
    "text": "if you if you start playing around with uh stuff like this you'll probably have to keep on testing and re-testing going",
    "start": "1442000",
    "end": "1447120"
  },
  {
    "text": "back to the drawing board and lots of debugging so testing is extremely important",
    "start": "1447120",
    "end": "1454320"
  },
  {
    "text": "as far as this uh talk is concerned stage one is fairly easy i'll be telling you where the buffer over on",
    "start": "1454320",
    "end": "1460000"
  },
  {
    "text": "vulnerability can be found to find one there are several ways to do it you could read through the source code looking for slip-ups that is that",
    "start": "1460000",
    "end": "1467360"
  },
  {
    "text": "is of course if the source code is uh freely available the source code isn't available then you",
    "start": "1467360",
    "end": "1472799"
  },
  {
    "text": "could use a debugger or a decompiler or simply you could sit through and look at all areas where you can supply",
    "start": "1472799",
    "end": "1478559"
  },
  {
    "text": "information and you know enter long strings and stuff like that and",
    "start": "1478559",
    "end": "1484000"
  },
  {
    "text": "see if the overflow occurs what you'll recognize dr watson or something like that popping",
    "start": "1484000",
    "end": "1489440"
  },
  {
    "text": "up saying there's been some access violation uh if you find one of those",
    "start": "1489440",
    "end": "1494880"
  },
  {
    "text": "then yeah then you could have found a a buffer over on vulnerability",
    "start": "1494880",
    "end": "1501399"
  },
  {
    "text": "but you have to look at the right programs basically you're looking for an overflow that is in a program that you can access remotely or if you're looking",
    "start": "1503360",
    "end": "1510480"
  },
  {
    "text": "to gain elevated privilege privileges on your own machine then examine all processes that have more access rights",
    "start": "1510480",
    "end": "1516400"
  },
  {
    "text": "or privileges than yourself we're going to look at a remotely exploitable buffer overrun that in most",
    "start": "1516400",
    "end": "1522640"
  },
  {
    "text": "cases runs with system privileges this is the nirvana of the buffer overflow hunter",
    "start": "1522640",
    "end": "1528720"
  },
  {
    "text": "a remotely exportable buffer overflow that runs with system privileges means that we can compromise servers with ease",
    "start": "1528720",
    "end": "1534480"
  },
  {
    "text": "such an overruns hand you the keys to the car essentially so where is it",
    "start": "1534480",
    "end": "1540640"
  },
  {
    "text": "well oracle make great databases um and i i mean that seriously by the way uh",
    "start": "1540640",
    "end": "1546159"
  },
  {
    "text": "their web front end leaves something to be desired though on its own oracle application server provides a web server",
    "start": "1546159",
    "end": "1552159"
  },
  {
    "text": "called oracle web listener oracle application server can also be laid on top of other web servers such as",
    "start": "1552159",
    "end": "1557760"
  },
  {
    "text": "apache internet information server and netscape enterprise server to enable the use of plsql to provide the web front",
    "start": "1557760",
    "end": "1564559"
  },
  {
    "text": "end functionality that feeds into an oracle database server regardless of whether oracle web",
    "start": "1564559",
    "end": "1570240"
  },
  {
    "text": "listener is in use if uh is in use or oas is layered on top of",
    "start": "1570240",
    "end": "1575440"
  },
  {
    "text": "another web server a directory called ows bin is created this ows bin is by default accessible",
    "start": "1575440",
    "end": "1582799"
  },
  {
    "text": "and non anonymously over the world wide web and contains a number of executables",
    "start": "1582799",
    "end": "1588080"
  },
  {
    "text": "many of which are shot through with von buffer on buffer overrun vulnerabilities",
    "start": "1588080",
    "end": "1593600"
  },
  {
    "text": "as far as physical location is concerned on nt anyway this virtual directory path",
    "start": "1593600",
    "end": "1599039"
  },
  {
    "text": "maps to c colon backslash orant backslash ows backslash 4.0 backslash",
    "start": "1599039",
    "end": "1605279"
  },
  {
    "text": "ben for example one of the executables in there oas netconf.exe",
    "start": "1605279",
    "end": "1611679"
  },
  {
    "text": "has a buffer overrun in it the overrun occurs when a sim uh when an overly long string is supplied uh after a minus",
    "start": "1611679",
    "end": "1619200"
  },
  {
    "text": "switch and l switch os netconf.exe minus l minus s long string",
    "start": "1619200",
    "end": "1627200"
  },
  {
    "text": "now when you're requesting this over the web you would obviously",
    "start": "1627200",
    "end": "1632559"
  },
  {
    "text": "after the question mark denoting the query string question mark minus l percent 20 minus s percent 20 string",
    "start": "1632559",
    "end": "1640559"
  },
  {
    "text": "okay moving on to point two when found find out how many bytes are",
    "start": "1640559",
    "end": "1646080"
  },
  {
    "text": "required to overwrite the saved return address the simplest way to find this number of",
    "start": "1646080",
    "end": "1651200"
  },
  {
    "text": "bytes required to do this is uh test it",
    "start": "1651200",
    "end": "1656320"
  },
  {
    "text": "without getting too technical um generate a string basically that has uh",
    "start": "1656320",
    "end": "1663919"
  },
  {
    "text": "four characters like aaa bbb ccc ddd uppercase then do",
    "start": "1663919",
    "end": "1670559"
  },
  {
    "text": "the lowercase then go through the numbers zero to nine um",
    "start": "1670559",
    "end": "1675840"
  },
  {
    "text": "and try that there's no access violation slap some a's keep on trying and you'll eventually get",
    "start": "1675840",
    "end": "1682320"
  },
  {
    "text": "the access violation so using this string here there's uh",
    "start": "1682320",
    "end": "1687600"
  },
  {
    "text": "starts off with a lot of a's then it goes b b b c c c d d d blah blah uh",
    "start": "1687600",
    "end": "1693200"
  },
  {
    "text": "if we supply this string to oas netconf this will cause an overflow now we'll",
    "start": "1693200",
    "end": "1699760"
  },
  {
    "text": "get a message pop up uh on on our on our computer saying the instruction at",
    "start": "1699760",
    "end": "1705200"
  },
  {
    "text": "address 7a7a7a reference memory at 787 a7a",
    "start": "1705200",
    "end": "1711760"
  },
  {
    "text": "we've overwritten the the same return address with our lowercase z this means that our buffer is 300 bytes",
    "start": "1711760",
    "end": "1718559"
  },
  {
    "text": "we simply look at the length of our string and chop it up and work out how many bites",
    "start": "1718559",
    "end": "1723760"
  },
  {
    "text": "we need what we do now is slap on an extra number of bites and overflow the buffer again this time",
    "start": "1723760",
    "end": "1730559"
  },
  {
    "text": "we'll debug it um give me two secs please",
    "start": "1730559",
    "end": "1737080"
  },
  {
    "text": "turn the remote mic onto",
    "start": "1746960",
    "end": "1750840"
  },
  {
    "text": "okay um i'm just gonna have to set something up here slip my",
    "start": "1754240",
    "end": "1759520"
  },
  {
    "text": "at mind point in time so i'll just continue uh take it on faith for the time being",
    "start": "1765760",
    "end": "1771279"
  },
  {
    "text": "um okay so we find a copy of our user-supplied data in the address space",
    "start": "1771279",
    "end": "1777600"
  },
  {
    "text": "once again the debugger has kicked in i use uh",
    "start": "1777600",
    "end": "1783279"
  },
  {
    "text": "once again the debugger has kicked in i use microsoft's debugger by the way that comes with visual c plus plus",
    "start": "1783760",
    "end": "1789600"
  },
  {
    "text": "uh we need to see if we can find our overflow string and i suppose i should really demonstrate this section",
    "start": "1789600",
    "end": "1797880"
  },
  {
    "text": "what i'll do on this one",
    "start": "1819600",
    "end": "1823320"
  },
  {
    "text": "just checking it was uh 7a the the the address at 7 8 7 8 7 8 7 8 tried to",
    "start": "1836399",
    "end": "1842240"
  },
  {
    "text": "reference memory at address 7a7a7a so that's our overflow occurred we've",
    "start": "1842240",
    "end": "1848240"
  },
  {
    "text": "not actually exploited anything there we've just caused the overrun so i'm going to debug this now",
    "start": "1848240",
    "end": "1856039"
  },
  {
    "text": "okay uh the the has not got access to uh the desktop on here so i'm just going to do it from a",
    "start": "1889279",
    "end": "1895039"
  },
  {
    "text": "command line uh it achieves the the same result",
    "start": "1895039",
    "end": "1900600"
  },
  {
    "text": "okay we have uh the instruction at 4141 4141 reference",
    "start": "1906080",
    "end": "1911679"
  },
  {
    "text": "memory at 41 41 41 41 a capital a by the way uh has a hex",
    "start": "1911679",
    "end": "1917039"
  },
  {
    "text": "value of 41. so if we kick in the debugger now",
    "start": "1917039",
    "end": "1923679"
  },
  {
    "text": "okay that's just saying we've got an unhandled exception in oas netconf and uh",
    "start": "1932320",
    "end": "1939760"
  },
  {
    "text": "we have basically a number of different windows the uh the top window contains a list of our uh",
    "start": "1940080",
    "end": "1946840"
  },
  {
    "text": "registers uh the one below that contains just uh",
    "start": "1946840",
    "end": "1952960"
  },
  {
    "text": "memory and the one below that uh is our instructions now the reason we had this access violation is because the the",
    "start": "1952960",
    "end": "1959919"
  },
  {
    "text": "memory at 41 41 41 41 has not been initialized there's nothing there so we",
    "start": "1959919",
    "end": "1965200"
  },
  {
    "text": "get the access violation now looking at the registers if we look at the esp if you uh",
    "start": "1965200",
    "end": "1974519"
  },
  {
    "text": "up in the top right hand corner here is uh the esp the the contents of the",
    "start": "1976559",
    "end": "1982880"
  },
  {
    "text": "esp is for those that can't see it in the back uh one two",
    "start": "1982880",
    "end": "1988159"
  },
  {
    "text": "zero zero one two c seven seven four so if we go to that address",
    "start": "1988159",
    "end": "1994559"
  },
  {
    "text": "twelve let's see seven seven four",
    "start": "1994960",
    "end": "2000159"
  },
  {
    "text": "we can see a whole load of our capital a's that was our user supply data now",
    "start": "2000159",
    "end": "2007120"
  },
  {
    "text": "to be able to execute arbitrary code what we need to do is",
    "start": "2007200",
    "end": "2012640"
  },
  {
    "text": "overwrite the saved return address not with 4141 4141 but with",
    "start": "2012640",
    "end": "2017760"
  },
  {
    "text": "a an address in memory that contains basically a cool esp or a jump esp instruction basically what that will do",
    "start": "2017760",
    "end": "2024640"
  },
  {
    "text": "is uh once that particular procedure has finished it will pull our address off",
    "start": "2024640",
    "end": "2030399"
  },
  {
    "text": "the stack the one we've supplied go to that address execute the code it finds there which is call or jump esp it will",
    "start": "2030399",
    "end": "2037360"
  },
  {
    "text": "then the process will then go down to the the address that the esp points to",
    "start": "2037360",
    "end": "2042480"
  },
  {
    "text": "and start executing downwards from there now obviously if we put computer code in here it's going to start executing our",
    "start": "2042480",
    "end": "2048480"
  },
  {
    "text": "code",
    "start": "2048480",
    "end": "2051480"
  },
  {
    "text": "okay um so we've now found out a copy of our user supplied data in",
    "start": "2060079",
    "end": "2066800"
  },
  {
    "text": "memory we can reference it by the esp now",
    "start": "2066800",
    "end": "2072480"
  },
  {
    "text": "when you're playing with overflows the first thing to do is look at every single register uh and go to that address basically and",
    "start": "2073679",
    "end": "2080960"
  },
  {
    "text": "see if you can find your data if you can't um then it's it's still possible to execute",
    "start": "2080960",
    "end": "2086480"
  },
  {
    "text": "it uh but it's so much handier if we can uh have",
    "start": "2086480",
    "end": "2092398"
  },
  {
    "text": "one of the registers referencing our our user supplied data",
    "start": "2092399",
    "end": "2099399"
  },
  {
    "text": "okay so now we need to work out what dress we address we need to use to overwrite the",
    "start": "2102240",
    "end": "2107280"
  },
  {
    "text": "saved return address with to be able to get back to our buffer this is what i was saying about we need to find an address in memory that has a cool esp or",
    "start": "2107280",
    "end": "2114160"
  },
  {
    "text": "jump esp instruction basically um that those two different op codes basically",
    "start": "2114160",
    "end": "2119839"
  },
  {
    "text": "will say um as as it it sounds basically jump to the esp and start executing or call asp",
    "start": "2119839",
    "end": "2125599"
  },
  {
    "text": "it will it's the same result at the end of the day okay remember we've overwritten the",
    "start": "2125599",
    "end": "2131359"
  },
  {
    "text": "saved return address uh in this particular case we've overwritten with uh capital a's",
    "start": "2131359",
    "end": "2138400"
  },
  {
    "text": "and and and the the consequences of that and what this means it means that the address that the",
    "start": "2139280",
    "end": "2144320"
  },
  {
    "text": "processor should have returned to after the procedure had just finished executing had called",
    "start": "2144320",
    "end": "2149599"
  },
  {
    "text": "uh return has been overwritten by us the attacker that means we can override it with",
    "start": "2149599",
    "end": "2154880"
  },
  {
    "text": "almost anything we want i say anything because we we we can't have things like uh a null um",
    "start": "2154880",
    "end": "2161520"
  },
  {
    "text": "remember they terminate strings in c so we'd be just be chopping our uh our exploit string off",
    "start": "2161520",
    "end": "2167359"
  },
  {
    "text": "uh if we hadn't known there uh if you're lucky sometimes you can put it in in",
    "start": "2167359",
    "end": "2172720"
  },
  {
    "text": "certain places but i'm not going to go into that now a code to be can be found at the esp in",
    "start": "2172720",
    "end": "2179040"
  },
  {
    "text": "this case to get back there all we need to do is overwrite the save return address with an address that contains",
    "start": "2179040",
    "end": "2185200"
  },
  {
    "text": "either reiterating a jump esp or call esp instruction these instructions do",
    "start": "2185200",
    "end": "2191680"
  },
  {
    "text": "essentially the same thing the processor will go back to the esp and start executing downwards from there",
    "start": "2191680",
    "end": "2197760"
  },
  {
    "text": "this way what will what will have happened this way what will happen is",
    "start": "2197760",
    "end": "2202880"
  },
  {
    "text": "when the finishing procedure calls rent our address is peeled off of the stack the process process uh",
    "start": "2202880",
    "end": "2209040"
  },
  {
    "text": "then goes the processor then goes to this address to find its next instruction to execute which will be a",
    "start": "2209040",
    "end": "2214960"
  },
  {
    "text": "call or jump esp instruction and when this executes the processor will go down to the esp and execute what it finds",
    "start": "2214960",
    "end": "2221359"
  },
  {
    "text": "there the only problem now is to find such an instruction in memory that doesn't contain a null",
    "start": "2221359",
    "end": "2228480"
  },
  {
    "text": "a few things can be done to help speed up this process you can use something like ultraedit a",
    "start": "2228720",
    "end": "2234160"
  },
  {
    "text": "binary editor and do a search for ffe4 or ffd4",
    "start": "2234160",
    "end": "2241280"
  },
  {
    "text": "the actual machine op codes for the jump uh and call esp instructions uh look in",
    "start": "2241280",
    "end": "2247359"
  },
  {
    "text": "every single dll that's actually loaded into the address space of the the executing program the the target program",
    "start": "2247359",
    "end": "2254800"
  },
  {
    "text": "um and uh look in there uh ultra edit by the way this is a",
    "start": "2254800",
    "end": "2260079"
  },
  {
    "text": "screenshot of ultra edit i've got kernel 32.dll open as you can see um you have",
    "start": "2260079",
    "end": "2268560"
  },
  {
    "text": "in in the center pane was this this is actual uh binary co uh",
    "start": "2268560",
    "end": "2276720"
  },
  {
    "text": "binary uh data and this is its um ascii equivalent",
    "start": "2276720",
    "end": "2282079"
  },
  {
    "text": "on the the right here okay so doing a search for something",
    "start": "2282079",
    "end": "2289040"
  },
  {
    "text": "like ffv4 or something which is our instruction we're looking for",
    "start": "2289680",
    "end": "2295839"
  },
  {
    "text": "it finds one right here now it's offset from this file at 32",
    "start": "2295839",
    "end": "2303040"
  },
  {
    "text": "83 and a couple of bytes in now what we would do is is",
    "start": "2303040",
    "end": "2309040"
  },
  {
    "text": "add this to the the base address that kernel32.dll is loaded into when i say",
    "start": "2309040",
    "end": "2315760"
  },
  {
    "text": "base address there is a preferred address at which",
    "start": "2315760",
    "end": "2321359"
  },
  {
    "text": "dlls are loaded into now on um windows nt4 kernel 32 uh is loaded at",
    "start": "2321359",
    "end": "2329280"
  },
  {
    "text": "base address 77f i believe i just need to verify that you use something like quick view um on",
    "start": "2329280",
    "end": "2335359"
  },
  {
    "text": "nt4 to find this by the way",
    "start": "2335359",
    "end": "2339799"
  },
  {
    "text": "okay this is a quick view to run quick view right click on a uh a dlr or an",
    "start": "2363359",
    "end": "2369200"
  },
  {
    "text": "executable and uh just go down to quickview that's obviously if you've installed quickview uh i believe it is",
    "start": "2369200",
    "end": "2374320"
  },
  {
    "text": "installed by default okay so getting the the the",
    "start": "2374320",
    "end": "2380320"
  },
  {
    "text": "the um the base address is simply uh as simple as as looking through this um",
    "start": "2380320",
    "end": "2386800"
  },
  {
    "text": "right here um",
    "start": "2386800",
    "end": "2391599"
  },
  {
    "text": "i can't i can't see it clearly looking for image base there",
    "start": "2392640",
    "end": "2398079"
  },
  {
    "text": "yeah look for image base and as you can see that 77f uh with five zeros tacked onto the end",
    "start": "2398079",
    "end": "2404960"
  },
  {
    "text": "so that's the address at which kernel 32.dll is loaded into the address base of the running program",
    "start": "2404960",
    "end": "2411839"
  },
  {
    "text": "so what we'll do is take that file offset add it to that to produce",
    "start": "2411839",
    "end": "2418599"
  },
  {
    "text": "i'm not even going to risk doing the math in my head",
    "start": "2435760",
    "end": "2439838"
  },
  {
    "text": "okay so we have uh 77f32830",
    "start": "2453839",
    "end": "2459480"
  },
  {
    "text": "um it was as simple as just doing that stupidly i'm very nervous by the way",
    "start": "2459520",
    "end": "2464839"
  },
  {
    "text": "um so we then go back to our",
    "start": "2464839",
    "end": "2470160"
  },
  {
    "text": "debugging session and look around that area",
    "start": "2470160",
    "end": "2477520"
  },
  {
    "text": "for an ffe4 instruction",
    "start": "2477520",
    "end": "2481839"
  },
  {
    "text": "okay and there there we go right here",
    "start": "2497359",
    "end": "2501279"
  },
  {
    "text": "we have ff e4 our jump esp so as you can see this address here",
    "start": "2502480",
    "end": "2509920"
  },
  {
    "text": "seven seven f three two eight three six there's no nulls in it so that's uh",
    "start": "2509920",
    "end": "2515119"
  },
  {
    "text": "handy if we overwrite the saved return address with this address then",
    "start": "2515119",
    "end": "2521359"
  },
  {
    "text": "what will happen is once the ret is called we'll come down to here basically",
    "start": "2521359",
    "end": "2527520"
  },
  {
    "text": "jump esp will execute and then we'll end up back in our buffer",
    "start": "2527520",
    "end": "2534359"
  },
  {
    "text": "so we now have our address we're going to use so in our overflow string that we",
    "start": "2546240",
    "end": "2551440"
  },
  {
    "text": "originally used where we'd overwritten with lowercase z we'll replace this um",
    "start": "2551440",
    "end": "2557040"
  },
  {
    "text": "zzz with um this address we've just found with one caveat uh we need to load it in",
    "start": "2557040",
    "end": "2563359"
  },
  {
    "text": "backwards okay so in our exploit string uh that's currently being built at the moment",
    "start": "2563359",
    "end": "2569119"
  },
  {
    "text": "we'll put it in 3628 ff sorry f377",
    "start": "2569119",
    "end": "2575200"
  },
  {
    "text": "so now we have a way to get back to our exploit code we need to write it",
    "start": "2575200",
    "end": "2580240"
  },
  {
    "text": "so first off we need to work out what we want to do with the overflow exploit before we can do this we need to know",
    "start": "2580240",
    "end": "2586560"
  },
  {
    "text": "what we want to do first off we need to consider where the overflow is if it's an xc that is accessed over the",
    "start": "2586560",
    "end": "2593119"
  },
  {
    "text": "web this means it's going over tcp port 80 and we can make the assumption that the target is protected by a firewall",
    "start": "2593119",
    "end": "2599040"
  },
  {
    "text": "allowing incoming traffic over only ports 80 and maybe 443",
    "start": "2599040",
    "end": "2604720"
  },
  {
    "text": "because these ports will be bound to another process there's no point in trying to spawn a remote shell that'll listen on these ports and there's no",
    "start": "2604720",
    "end": "2610640"
  },
  {
    "text": "point in doing it on the other on any other port because it may be blocked by a firewall we want this exploit to work on as many",
    "start": "2610640",
    "end": "2617680"
  },
  {
    "text": "machines as possible protected by a firewall or not so rather than spawning a remote shell",
    "start": "2617680",
    "end": "2623280"
  },
  {
    "text": "we should code an exploit that will give us the equivalent of a remote shell something that will allow us not only to run arbitrary code but also arbitrary",
    "start": "2623280",
    "end": "2630240"
  },
  {
    "text": "commands without ever having to need to change the exploit code",
    "start": "2630240",
    "end": "2636319"
  },
  {
    "text": "what we can do is append a command any command to our exploit code and get our code to find this command and then and",
    "start": "2636319",
    "end": "2643119"
  },
  {
    "text": "then execute that so",
    "start": "2643119",
    "end": "2647960"
  },
  {
    "text": "here is our overflow strength with our exploit code zzz and then the",
    "start": "2650000",
    "end": "2657200"
  },
  {
    "text": "the command we want to run after it you know for example cmd.exe forward ford c-d-i-r",
    "start": "2657200",
    "end": "2663760"
  },
  {
    "text": "to do this we'll need to understand something about the way arguments are supplied to programs basically any arguments and the whole",
    "start": "2663760",
    "end": "2670000"
  },
  {
    "text": "command line for that matter can be found on another area of memory called the heap like the stack the heap holds data",
    "start": "2670000",
    "end": "2676480"
  },
  {
    "text": "sort of on heap you can find the environment variables the command line and other stuff which i won't go into",
    "start": "2676480",
    "end": "2682079"
  },
  {
    "text": "now all we need to know is um that whatever we supply to is netconf",
    "start": "2682079",
    "end": "2687839"
  },
  {
    "text": "will be found on the heap including our exploit code and everything we supply after it",
    "start": "2687839",
    "end": "2693040"
  },
  {
    "text": "what we could uh do is get our exploit code sorry what we could get our exploit code to do",
    "start": "2693040",
    "end": "2699680"
  },
  {
    "text": "is work out where our command line is and step through it step through this until it finds a special d word one",
    "start": "2699680",
    "end": "2705520"
  },
  {
    "text": "which we're going to create and when it finds this it knows everything after this is the the command",
    "start": "2705520",
    "end": "2710880"
  },
  {
    "text": "we want to execute don't worry this will become much more clearer essentially we'll get our exploit code",
    "start": "2710880",
    "end": "2716960"
  },
  {
    "text": "to do the equivalent of the following c the c code that is we'll use get command line a to get the",
    "start": "2716960",
    "end": "2723040"
  },
  {
    "text": "address of the command line we'll then step through everything downwards from this address looking for",
    "start": "2723040",
    "end": "2728319"
  },
  {
    "text": "a special byte that denotes our command to run when we find this we'll supply",
    "start": "2728319",
    "end": "2733599"
  },
  {
    "text": "the address we'll supply this address to one exec when exec will execute a command so when",
    "start": "2733599",
    "end": "2740560"
  },
  {
    "text": "we supply uh the address of our command to run it will go off and execute it we'll choose our special by looking",
    "start": "2740560",
    "end": "2747119"
  },
  {
    "text": "through our final exploit code and choose a value that is not in there for example if the if the uh",
    "start": "2747119",
    "end": "2755760"
  },
  {
    "text": "for example if the the special byte um if if in our exploit code",
    "start": "2756880",
    "end": "2762599"
  },
  {
    "text": "7a7a7a7a isn't in there we'll use that as our special d word if we were to use a byte that was in our",
    "start": "2762599",
    "end": "2769520"
  },
  {
    "text": "export code then we wouldn't be able to find our command to run so we write our computer code that'll",
    "start": "2769520",
    "end": "2774880"
  },
  {
    "text": "perform what we're to do what we decided to do in step five going back to step five essentially what we're going to do",
    "start": "2774880",
    "end": "2780400"
  },
  {
    "text": "um recapping is the exploit code is going to stay the same okay always",
    "start": "2780400",
    "end": "2786800"
  },
  {
    "text": "we're then going to slap on the end of our exploit code a command to run so if we wanted to launch notepad on on this",
    "start": "2786800",
    "end": "2792800"
  },
  {
    "text": "machine here we just type notepad.exe and on and tack that on to the end of",
    "start": "2792800",
    "end": "2797839"
  },
  {
    "text": "our exploit code however we're going to delimit the end of our exploit code with",
    "start": "2797839",
    "end": "2802880"
  },
  {
    "text": "a special byte 7a7a7a7a okay and uh we'll look through for that special byte so our xbox code",
    "start": "2802880",
    "end": "2810480"
  },
  {
    "text": "will know everything after 7a7a7a is the command the uh",
    "start": "2810480",
    "end": "2815920"
  },
  {
    "text": "you want to run okay the first thing we need to do is preserve the stack uh the state of the",
    "start": "2815920",
    "end": "2822000"
  },
  {
    "text": "stack if we don't do this we could mess up our own exploit code which we don't want we",
    "start": "2822000",
    "end": "2827040"
  },
  {
    "text": "do this by using what's known as the procedure prologue simply it's push ebp",
    "start": "2827040",
    "end": "2832240"
  },
  {
    "text": "and then move the esp into the ebp what that essentially does is",
    "start": "2832240",
    "end": "2837920"
  },
  {
    "text": "the address of the ebp the base pointer that thing that points to the stack um",
    "start": "2837920",
    "end": "2845119"
  },
  {
    "text": "the bottom of the sack rather onto the stack and then bring up level the the esp and the ebp",
    "start": "2845119",
    "end": "2853119"
  },
  {
    "text": "so we're starting off from a common ground basically we need to call get command line a first",
    "start": "2853119",
    "end": "2859200"
  },
  {
    "text": "so we'll open up kernel32.dll in quick view look through the export table for this function",
    "start": "2859200",
    "end": "2864960"
  },
  {
    "text": "uh an export table is the list of functions exported by the dll that other dlls and executables can call the export",
    "start": "2864960",
    "end": "2871680"
  },
  {
    "text": "table tells us that get command line a can be found at offset zero zero zero one a three five f five",
    "start": "2871680",
    "end": "2880000"
  },
  {
    "text": "uh and i'll show you here",
    "start": "2880000",
    "end": "2883040"
  },
  {
    "text": "okay this being quick view again here's our oops export table",
    "start": "2885200",
    "end": "2894000"
  },
  {
    "text": "and uh fortunately it's uh all listed alphabetically so we go down to get command line a",
    "start": "2895119",
    "end": "2903839"
  },
  {
    "text": "and um at the top there we see it's offset",
    "start": "2903839",
    "end": "2909839"
  },
  {
    "text": "again we would uh add this onto the base address and that's uh the address at",
    "start": "2912079",
    "end": "2918559"
  },
  {
    "text": "which we can find uh get command line a that is in the address space of uh the",
    "start": "2918559",
    "end": "2925040"
  },
  {
    "text": "executing process okay",
    "start": "2925040",
    "end": "2930559"
  },
  {
    "text": "so we need to call get command line a first uh the reason we do this is uh basically so",
    "start": "2930559",
    "end": "2937119"
  },
  {
    "text": "we can find um our environment variables and everything like that our whole command line uh on",
    "start": "2937119",
    "end": "2945040"
  },
  {
    "text": "the heap get command line a takes no arguments so all we need to do is load this address",
    "start": "2945040",
    "end": "2950240"
  },
  {
    "text": "into a register and then call it this is the simplest method of doing it unfortunately this is going to be tied",
    "start": "2950240",
    "end": "2956000"
  },
  {
    "text": "to a particular service pack this is service pack 6a on this server here so we move into a register of our",
    "start": "2956000",
    "end": "2963359"
  },
  {
    "text": "choosing ebx you shouldn't use things like the esp the eip",
    "start": "2963359",
    "end": "2969280"
  },
  {
    "text": "and the ebp by the way for moving things and everything like that into",
    "start": "2969280",
    "end": "2974720"
  },
  {
    "text": "because they're they're quite important you know as far as referencing stack and executing code is concerned",
    "start": "2974720",
    "end": "2980640"
  },
  {
    "text": "so we choose the the ebx register we could have chosen the eax whatever",
    "start": "2980640",
    "end": "2986240"
  },
  {
    "text": "so we move the address 77 f1 a3 f5 into",
    "start": "2986240",
    "end": "2991359"
  },
  {
    "text": "the ebx register that's our address of get command line a and then call ebx okay that simply goes and calls get",
    "start": "2991359",
    "end": "2998160"
  },
  {
    "text": "command line a when get command line a returns it",
    "start": "2998160",
    "end": "3003520"
  },
  {
    "text": "places the address of the command line into the eax register now we've got our command line back",
    "start": "3003520",
    "end": "3009760"
  },
  {
    "text": "we'll step through the string looking for our special d word that denotes where our command",
    "start": "3009760",
    "end": "3015520"
  },
  {
    "text": "to run can be found at this point in time we can assume that 7 a 7 a 7 a 7 a won't exist in the",
    "start": "3015520",
    "end": "3022319"
  },
  {
    "text": "command line so we'll just use that so here is um",
    "start": "3022319",
    "end": "3029280"
  },
  {
    "text": "our assembly code we add one to the eax move into the edx the d word pointer",
    "start": "3029280",
    "end": "3036400"
  },
  {
    "text": "pointed to by the ea by the sorry start again uh",
    "start": "3036400",
    "end": "3042160"
  },
  {
    "text": "we add one to the uh eax uh we have remember in the ex already",
    "start": "3042160",
    "end": "3048720"
  },
  {
    "text": "the address of our command line we're simply adding one to it okay we then move um",
    "start": "3048720",
    "end": "3054800"
  },
  {
    "text": "the what's pointed to by the ex into the the edx and then compare it with seven",
    "start": "3054800",
    "end": "3060000"
  },
  {
    "text": "a7 a7 a7a and then if it if it doesn't compare go back and keep looping until",
    "start": "3060000",
    "end": "3066000"
  },
  {
    "text": "it comes across but here we have a problem we now have 7a7a7a7a in our command line to avoid",
    "start": "3066000",
    "end": "3072400"
  },
  {
    "text": "this we'll have to do the following move into the esi uh fffffff",
    "start": "3072400",
    "end": "3079280"
  },
  {
    "text": "and then subtract from the esi 85 85 85 85",
    "start": "3079280",
    "end": "3086240"
  },
  {
    "text": "what that will do is leave us with 7a 78787a in the esi register",
    "start": "3086240",
    "end": "3093200"
  },
  {
    "text": "so then we just do a compare pretty similar to the code above but we just do a compare esi with the edx",
    "start": "3093200",
    "end": "3101040"
  },
  {
    "text": "that way we we've hidden the fact that there was 7 a7 a7 a 7a in our",
    "start": "3101040",
    "end": "3108000"
  },
  {
    "text": "command line what this code basically does is loops until it comes across our special d word",
    "start": "3108000",
    "end": "3114160"
  },
  {
    "text": "it does this by incrementing the address in eax in the eax register by one then moves",
    "start": "3114160",
    "end": "3119920"
  },
  {
    "text": "the d word pointed to by the eax into the edx register it then compares the edx with the esi register which contains",
    "start": "3119920",
    "end": "3126880"
  },
  {
    "text": "7a 787a7a special d-word here we have another problem some web",
    "start": "3126880",
    "end": "3133440"
  },
  {
    "text": "servers such as internet information server will kick out an error message if there appears to be too far requests",
    "start": "3133440",
    "end": "3140559"
  },
  {
    "text": "and there would be in this case uh what i mean by that is",
    "start": "3140559",
    "end": "3146000"
  },
  {
    "text": "http colon forward slash forward slash server forward slash food.exe question",
    "start": "3146319",
    "end": "3151839"
  },
  {
    "text": "mark food.exe we'll get a 500 internal server error if",
    "start": "3151839",
    "end": "3158400"
  },
  {
    "text": "we do that a call to oas netconf",
    "start": "3158400",
    "end": "3164960"
  },
  {
    "text": "and the command we uh and the command we want to run would cause this kind of problem so we'll have",
    "start": "3164960",
    "end": "3170800"
  },
  {
    "text": "to obscure the command we want to run in the request they do we do this by adding one to every character in our command",
    "start": "3170800",
    "end": "3177680"
  },
  {
    "text": "line and then supply it to the server tacked onto the end of our exploit code because",
    "start": "3177680",
    "end": "3182800"
  },
  {
    "text": "of this we'll have to undo this as part of our exploit first off we'll move the pointer to our",
    "start": "3182800",
    "end": "3188400"
  },
  {
    "text": "command line into another register move the eax into the edx then we go through another loop",
    "start": "3188400",
    "end": "3196559"
  },
  {
    "text": "if you have a look over that what this code basically does is subtract one from the byte pointed to by",
    "start": "3197440",
    "end": "3203599"
  },
  {
    "text": "edx and adds one to the edx to move on down the line",
    "start": "3203599",
    "end": "3208720"
  },
  {
    "text": "moves a byte pointed to by the edx into the edi register then compares it with 58 or an uppercase x",
    "start": "3208720",
    "end": "3216960"
  },
  {
    "text": "um we're going to use this uppercase x to delimit the end of where the end of our",
    "start": "3216960",
    "end": "3222480"
  },
  {
    "text": "command to run basically this code keeps on looping until it comes across this x no puns about x",
    "start": "3222480",
    "end": "3228960"
  },
  {
    "text": "marks the spot once this loop ends we're going to need to get rid of this x we do this by",
    "start": "3228960",
    "end": "3234160"
  },
  {
    "text": "subtracting 58 from the byte pointed to by edx",
    "start": "3234160",
    "end": "3240160"
  },
  {
    "text": "now when exec takes two arguments a pointer to the string of the command",
    "start": "3240160",
    "end": "3246240"
  },
  {
    "text": "to run and a d word that denotes how the program should be displayed for example",
    "start": "3246240",
    "end": "3252319"
  },
  {
    "text": "sw hide is defined as zero freeze will just use this uh it will",
    "start": "3252319",
    "end": "3257359"
  },
  {
    "text": "also hide it from the console as well to get zeros we'll need to",
    "start": "3257359",
    "end": "3263200"
  },
  {
    "text": "simply do an exhaust with the red exhaust register with itself uh once this is done we'll push them onto the",
    "start": "3263200",
    "end": "3269040"
  },
  {
    "text": "stack so xor esi with esi gsi what this will do basically",
    "start": "3269040",
    "end": "3274880"
  },
  {
    "text": "excuse me",
    "start": "3274880",
    "end": "3278200"
  },
  {
    "text": "what this will do is create our zeros our nulls and push them on top of the stack",
    "start": "3282400",
    "end": "3288640"
  },
  {
    "text": "the second argument we need to pass to an exec is a pointer to the string of our command to run",
    "start": "3288640",
    "end": "3294400"
  },
  {
    "text": "this is stored in eax at the moment well not strictly speaking true eax points to our zeds our special d word so we'll",
    "start": "3294400",
    "end": "3301440"
  },
  {
    "text": "need to add four to eax and then push these onto the stack too so",
    "start": "3301440",
    "end": "3306640"
  },
  {
    "text": "add four to the eax and then push eax so we've now pushed our arguments to win exec onto the stack",
    "start": "3306640",
    "end": "3314000"
  },
  {
    "text": "now we have our arguments primed we'll load the address of winxact into a register and then call it",
    "start": "3314000",
    "end": "3320079"
  },
  {
    "text": "when it's cooled it will look on the stack for its arguments we do this the same way as we did for command line",
    "start": "3320079",
    "end": "3326000"
  },
  {
    "text": "a to get the address which turns out to be 77f18986",
    "start": "3326000",
    "end": "3331559"
  },
  {
    "text": "we in other words we go through um quick view get the offset add it to the base and that gives us our address of",
    "start": "3332079",
    "end": "3338960"
  },
  {
    "text": "win exec",
    "start": "3338960",
    "end": "3341440"
  },
  {
    "text": "this should now go off and execute when we call ebx once we've sorry once we've loaded that address into the ebx",
    "start": "3344160",
    "end": "3350559"
  },
  {
    "text": "register we then simply call ebx this should now go off and execute the command we've we've slapped on to the",
    "start": "3350559",
    "end": "3356640"
  },
  {
    "text": "end of our exploit code to cleanly kill oas netconf without causing an access violation we'll call exit process so",
    "start": "3356640",
    "end": "3364079"
  },
  {
    "text": "likewise we move the address of exit process into ebx and then call ebx",
    "start": "3364079",
    "end": "3371520"
  },
  {
    "text": "okay that's our exploit code there's not much to it really",
    "start": "3371520",
    "end": "3377119"
  },
  {
    "text": "now we have our assembly code we need to get our op codes we do this by cutting and pasting the code",
    "start": "3377119",
    "end": "3383280"
  },
  {
    "text": "into a simple c source file that calls the asm function",
    "start": "3383280",
    "end": "3389480"
  },
  {
    "text": "so here's our code just gonna",
    "start": "3394720",
    "end": "3399400"
  },
  {
    "text": "so we put that into our c compiler",
    "start": "3412480",
    "end": "3418520"
  },
  {
    "text": "we then build that",
    "start": "3420079",
    "end": "3423280"
  },
  {
    "text": "and then we're going to debug it once it's built and you'll see why in two seconds",
    "start": "3428319",
    "end": "3436160"
  },
  {
    "text": "so we step into it",
    "start": "3439440",
    "end": "3443318"
  },
  {
    "text": "go to disassembly",
    "start": "3446240",
    "end": "3449839"
  },
  {
    "text": "and as you can see here we have our assembly push ebp move the espn to the",
    "start": "3451359",
    "end": "3458000"
  },
  {
    "text": "ebp but more importantly we have here",
    "start": "3458000",
    "end": "3463760"
  },
  {
    "text": "our numeric op codes these are exactly this is what we'll be putting into",
    "start": "3465760",
    "end": "3472640"
  },
  {
    "text": "our overflow string not things like push ebp but the actual",
    "start": "3472640",
    "end": "3478240"
  },
  {
    "text": "binary number for it so we open up visual c plus plus build",
    "start": "3478240",
    "end": "3485119"
  },
  {
    "text": "it once we've built it we debug it by doing this we can extract the op codes and",
    "start": "3485119",
    "end": "3492078"
  },
  {
    "text": "this is our op codes with our assembly now we have our op codes we can choose",
    "start": "3493760",
    "end": "3498799"
  },
  {
    "text": "what our special bytes going to be we'll stick with 7a7a7a7a otherwise known as four lowercase zeds",
    "start": "3498799",
    "end": "3507280"
  },
  {
    "text": "all we need to do now is put everything together uh in an exploit program first off we",
    "start": "3507280",
    "end": "3512799"
  },
  {
    "text": "need to fill up the buffer then place 77f32836",
    "start": "3512799",
    "end": "3518920"
  },
  {
    "text": "uh the as the value to overwrite the saved return address when the uh with",
    "start": "3519440",
    "end": "3524880"
  },
  {
    "text": "and then tack on our exploit uh attack on our opcodes rather we can also write our exploit program",
    "start": "3524880",
    "end": "3532720"
  },
  {
    "text": "uh to convert the command line for us to you know add one so we we hide the facts uh from the web servers that where",
    "start": "3532720",
    "end": "3540400"
  },
  {
    "text": "there's two dot exes uh being requested okay um",
    "start": "3540400",
    "end": "3546880"
  },
  {
    "text": "i'm not gonna go through this um it you've all got it printed there so if you want to read uh",
    "start": "3546880",
    "end": "3553599"
  },
  {
    "text": "over this in your own time um",
    "start": "3553599",
    "end": "3559079"
  },
  {
    "text": "if i uh this has already been built so uh",
    "start": "3560960",
    "end": "3565839"
  },
  {
    "text": "this is the the attacker's box this is the web server",
    "start": "3567119",
    "end": "3573640"
  },
  {
    "text": "okay that program you've got listed there um",
    "start": "3612480",
    "end": "3617760"
  },
  {
    "text": "when compiled we'll do this ten two two three four eighteen okay",
    "start": "3617760",
    "end": "3624319"
  },
  {
    "text": "um we supply uh the ip address or the domain name of the the the target server",
    "start": "3624319",
    "end": "3631200"
  },
  {
    "text": "and what port the the server is listing on the web service it then asks us for the enter uh asks us",
    "start": "3631200",
    "end": "3638000"
  },
  {
    "text": "to enter the command to run uh someone give me an x sorry",
    "start": "3638000",
    "end": "3643599"
  },
  {
    "text": "notepad.exe okay",
    "start": "3643599",
    "end": "3646880"
  },
  {
    "text": "and there is notepad.exe so essentially what we've",
    "start": "3653599",
    "end": "3659119"
  },
  {
    "text": "done is sent our exploit code across and uh it's executed and launched",
    "start": "3659119",
    "end": "3665680"
  },
  {
    "text": "notepad uh one more",
    "start": "3665680",
    "end": "3669960"
  },
  {
    "text": "i'm sorry uh",
    "start": "3680880",
    "end": "3686880"
  },
  {
    "text": "it's i think uh it's it's set give me two seconds i will well yeah i was going to say it's set to",
    "start": "3686880",
    "end": "3693280"
  },
  {
    "text": "slb hyde a few uh i've not actually tested it but if you used three sw maximize",
    "start": "3693280",
    "end": "3700160"
  },
  {
    "text": "if if if it is going to be able to interact with the desktop then uh use three as opposed to zero here",
    "start": "3700160",
    "end": "3708160"
  },
  {
    "text": "with this one internet information servers running as the anonymous internet account um",
    "start": "3711359",
    "end": "3716400"
  },
  {
    "text": "so not with not with this particular one but if i was using oracle web listener um see",
    "start": "3716400",
    "end": "3724240"
  },
  {
    "text": "it's you have to code the exploit differently for awkward web listener",
    "start": "3724640",
    "end": "3729760"
  },
  {
    "text": "so um",
    "start": "3729760",
    "end": "3733520"
  },
  {
    "text": "the oracle web listener is running a system so if if you actually coded it for oracle web listener then yes you",
    "start": "3735200",
    "end": "3741280"
  },
  {
    "text": "could um this is uh on nt anyway um",
    "start": "3741280",
    "end": "3747440"
  },
  {
    "text": "internet information server and netscape enterprise actually netscape enterprise server if you're using uh",
    "start": "3747680",
    "end": "3753280"
  },
  {
    "text": "oracle application server on top of that and it's still running a system then you you should be able to do that as",
    "start": "3753280",
    "end": "3759839"
  },
  {
    "text": "well um so do you want to see someone give me one more",
    "start": "3759839",
    "end": "3764960"
  },
  {
    "text": "command and i'll just run it sorry",
    "start": "3764960",
    "end": "3772160"
  },
  {
    "text": "format uh you i don't think you'll be able to do that",
    "start": "3772480",
    "end": "3776640"
  },
  {
    "text": "sorry uh yep um okay",
    "start": "3778240",
    "end": "3784480"
  },
  {
    "text": "what we would do here is go cmd fortnite c um",
    "start": "3784480",
    "end": "3789760"
  },
  {
    "text": "let's",
    "start": "3789760",
    "end": "3792000"
  },
  {
    "text": "think i'm not sure if the the redirection character will actually work but we'll give it a shot",
    "start": "3794839",
    "end": "3800720"
  },
  {
    "text": "um so you come back to final txt",
    "start": "3800720",
    "end": "3806160"
  },
  {
    "text": "right providing uh ford's i see with cmd.exe by the way will execute the command to run and then cmd.exe will",
    "start": "3809200",
    "end": "3816480"
  },
  {
    "text": "actually uh go",
    "start": "3816480",
    "end": "3820400"
  },
  {
    "text": "yeah so we have a directory listing now so what i could do um",
    "start": "3822240",
    "end": "3829200"
  },
  {
    "text": "is create a batch file instead or something um let's have a look",
    "start": "3829200",
    "end": "3836160"
  },
  {
    "text": "sorry um",
    "start": "3836160",
    "end": "3841760"
  },
  {
    "text": "and uh you would need administrative privileges again uh this is running as a low privileged account",
    "start": "3841760",
    "end": "3847920"
  },
  {
    "text": "on this particular thing um",
    "start": "3847920",
    "end": "3852440"
  },
  {
    "text": "okay this should have created a batch file called food.bat",
    "start": "3862240",
    "end": "3868160"
  },
  {
    "text": "and food.bat simply has dir in it so one method i suppose you could do is",
    "start": "3871839",
    "end": "3879440"
  },
  {
    "text": "providing you had the ntfs permissions to be able to write to startup folders and",
    "start": "3879440",
    "end": "3884480"
  },
  {
    "text": "stuff like that which if they're using fat well there's no ntfs permissions but if you've got a web",
    "start": "3884480",
    "end": "3890880"
  },
  {
    "text": "server using fat then you're asking for trouble really",
    "start": "3890880",
    "end": "3896960"
  },
  {
    "text": "exactly um for example say i have",
    "start": "3900799",
    "end": "3905760"
  },
  {
    "text": "questions to write to the ows bin yeah um i'll give this a shot um",
    "start": "3905839",
    "end": "3912640"
  },
  {
    "text": "cmd actually net dot exe",
    "start": "3912640",
    "end": "3917839"
  },
  {
    "text": "user",
    "start": "3917839",
    "end": "3920839"
  },
  {
    "text": "oh",
    "start": "3930880",
    "end": "3933880"
  },
  {
    "text": "okay what i'm going to attempt to do here is run net.exe",
    "start": "3940400",
    "end": "3945599"
  },
  {
    "text": "supplying user which will give us a list of user accounts kind of thing redirect that to",
    "start": "3945599",
    "end": "3951039"
  },
  {
    "text": "a file in the iws bin called users.txt",
    "start": "3951039",
    "end": "3956720"
  },
  {
    "text": "okay",
    "start": "3956720",
    "end": "3959720"
  },
  {
    "text": "yeah and that's our user account champ bad permissions on that by the way",
    "start": "3973680",
    "end": "3981280"
  },
  {
    "text": "well what we could do is if we wanted to download stuff onto it um we could create a file called file.txt",
    "start": "3993280",
    "end": "4000880"
  },
  {
    "text": "and put ftp commands in there and then run ftp dot exe minus s colon uh path to the the",
    "start": "4000880",
    "end": "4007680"
  },
  {
    "text": "text file um but that's providing the firewall will allow ftp out and and stuff like that so",
    "start": "4007680",
    "end": "4015119"
  },
  {
    "text": "okay is there any questions",
    "start": "4015119",
    "end": "4019880"
  },
  {
    "text": "numeric codes um i i compare my um assembly code",
    "start": "4027760",
    "end": "4033280"
  },
  {
    "text": "basically using the asm function builder yes sorry okay the gentleman down here was asking where did i get my numeric op",
    "start": "4033280",
    "end": "4039839"
  },
  {
    "text": "codes from so um the answer to that basically is i put my assembly code into um the asm",
    "start": "4039839",
    "end": "4049200"
  },
  {
    "text": "function build that using uh microsoft visual c plus plus",
    "start": "4049200",
    "end": "4055119"
  },
  {
    "text": "step into it and debug it basically you right click on the thing and show code bytes yeah",
    "start": "4055119",
    "end": "4061839"
  },
  {
    "text": "now with that we can get our op codes",
    "start": "4061839",
    "end": "4068920"
  },
  {
    "text": "for example um add one to the eax",
    "start": "4076880",
    "end": "4083838"
  },
  {
    "text": "in here add one to the eax just below it we can",
    "start": "4085920",
    "end": "4092160"
  },
  {
    "text": "see the op codes for that is 83 co 0 1. it's quite faint i'll highlight it that",
    "start": "4092160",
    "end": "4099199"
  },
  {
    "text": "may be easier yeah",
    "start": "4099199",
    "end": "4105920"
  },
  {
    "text": "okay so essentially what we'll do is is take these out um",
    "start": "4105920",
    "end": "4113278"
  },
  {
    "text": "of uh of here remove all the source code and stuff like that and the addresses and all the other numbers so we're left",
    "start": "4113279",
    "end": "4119278"
  },
  {
    "text": "basically with our pure our pure",
    "start": "4119279",
    "end": "4124560"
  },
  {
    "text": "numeric op codes and then add them to a buffer as as you can see in in the exploit program uh the",
    "start": "4124560",
    "end": "4131920"
  },
  {
    "text": "source code for example move",
    "start": "4131920",
    "end": "4137880"
  },
  {
    "text": "ffffff into the esi be",
    "start": "4137880",
    "end": "4143199"
  },
  {
    "text": "here yeah put that into a byte um of our character string our character strings",
    "start": "4143199",
    "end": "4149520"
  },
  {
    "text": "what our payload basically what we're going to send to the web server and uh then fff so each",
    "start": "4149520",
    "end": "4156159"
  },
  {
    "text": "uh byte of our exploit code goes into a character string on our",
    "start": "4156159",
    "end": "4161600"
  },
  {
    "text": "exploit code uh program rather which we then send to the to the web server",
    "start": "4161600",
    "end": "4168400"
  },
  {
    "text": "okay before asking uh asking if anyone has any more questions the protection for",
    "start": "4168400",
    "end": "4173838"
  },
  {
    "text": "this by the way oracle have provided a workaround for",
    "start": "4173839",
    "end": "4179120"
  },
  {
    "text": "most of these problems the ows bin being accessible and everything like that it is available from technet.oracle.com",
    "start": "4179120",
    "end": "4187960"
  },
  {
    "text": "you'll have to if if you're not registered there yet uh you'll you'll have to get a user id and password",
    "start": "4188080",
    "end": "4194000"
  },
  {
    "text": "i also believe if you've got oracle products meta link has it there too",
    "start": "4194000",
    "end": "4201120"
  },
  {
    "text": "any other questions sure",
    "start": "4201120",
    "end": "4204960"
  },
  {
    "text": "it was it was arbitrary i could have yeah",
    "start": "4211199",
    "end": "4216960"
  },
  {
    "text": "uh",
    "start": "4216960",
    "end": "4219960"
  },
  {
    "text": "uh colonel 32 um and nt uh dll.dll i believe someone",
    "start": "4230400",
    "end": "4236719"
  },
  {
    "text": "correct me if i'm wrong will always get their uh image base other dlls if someone else is loaded there um",
    "start": "4236719",
    "end": "4244560"
  },
  {
    "text": "then they might get pushed up but kernel 32 and ntdll.dll will always",
    "start": "4244560",
    "end": "4250560"
  },
  {
    "text": "be given their image base addresses that they they require kind of thing yeah",
    "start": "4250560",
    "end": "4257159"
  },
  {
    "text": "well yeah specifically with kernel 32. dll on on nt uh service pack uh nt4 uh",
    "start": "4259600",
    "end": "4266239"
  },
  {
    "text": "we know it's going to be uh 77f that's its base address yeah uh because",
    "start": "4266239",
    "end": "4271600"
  },
  {
    "text": "that uh colonel 32 and ntdll will always get their base addresses i believe as i said if i'm wrong on that someone shout",
    "start": "4271600",
    "end": "4278320"
  },
  {
    "text": "out and say you're on uh does that answer your question",
    "start": "4278320",
    "end": "4285800"
  },
  {
    "text": "the reason i did this i coded it specifically for a service pack because rather than building a jump table and",
    "start": "4296239",
    "end": "4302080"
  },
  {
    "text": "stuff like that um i was trying to keep it simple basically so i'm hard coding addresses in so if",
    "start": "4302080",
    "end": "4308080"
  },
  {
    "text": "you can ascertain remotely uh what service they're doing uh what what they've got you can modify the addresses",
    "start": "4308080",
    "end": "4314320"
  },
  {
    "text": "in this code basically to work on any other service packs you just need to know the exported addresses and stuff like that",
    "start": "4314320",
    "end": "4322080"
  },
  {
    "text": "well i i've done a number of uh stuff with this but uh stuff i don't want to make public",
    "start": "4326000",
    "end": "4331360"
  },
  {
    "text": "yeah sure at the back",
    "start": "4331360",
    "end": "4337719"
  },
  {
    "text": "yeah well um assuming you only have the the web service available specifically on",
    "start": "4345199",
    "end": "4351280"
  },
  {
    "text": "internet information server five um there's there's a number of easy ways you can tell what service pack they're running",
    "start": "4351280",
    "end": "4357120"
  },
  {
    "text": "for example even if you don't have the phone book service installed on your box it will create um as part of the",
    "start": "4357120",
    "end": "4362880"
  },
  {
    "text": "installation process of service pack six it will create these directories these phone book service directories so you if",
    "start": "4362880",
    "end": "4370080"
  },
  {
    "text": "you you test for it and you get a 403 forbidden then you know they've got service pack 6a",
    "start": "4370080",
    "end": "4375199"
  },
  {
    "text": "unless of course they've gone and removed it but there's there's a number of different ways you can tell what service pack they're running and stuff",
    "start": "4375199",
    "end": "4380320"
  },
  {
    "text": "like that",
    "start": "4380320",
    "end": "4383560"
  },
  {
    "text": "yeah any other questions",
    "start": "4396840",
    "end": "4400960"
  },
  {
    "text": "uh i would like to apologize by the way freud uh this is my first time speaking in public and a lot of hesitancy",
    "start": "4402320",
    "end": "4408320"
  },
  {
    "text": "hesitancy and a lot of um's and ours and uh i hope i haven't made it too bad an experience for you okay",
    "start": "4408320",
    "end": "4416039"
  }
]