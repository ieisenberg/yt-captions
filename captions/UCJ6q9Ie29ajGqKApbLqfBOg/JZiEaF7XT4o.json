[
  {
    "text": "yeah thank you very much I'm honored uh to speak a little bit about attack that",
    "start": "2639",
    "end": "10040"
  },
  {
    "text": "we found on the SSH protocol and um to start things off um",
    "start": "10040",
    "end": "17080"
  },
  {
    "text": "this is actually based on a research paper that um we",
    "start": "17080",
    "end": "22720"
  },
  {
    "text": "published um I with my colleagues Marcus Brinkman and YK shrink will appear in",
    "start": "22720",
    "end": "29320"
  },
  {
    "text": "the usn security Symposium this year but if you're already familiar with",
    "start": "29320",
    "end": "34840"
  },
  {
    "text": "the paper I would like to shuffle things a little bit up and tell you a little",
    "start": "34840",
    "end": "43160"
  },
  {
    "text": "tale what now so let's imagine we have a",
    "start": "43160",
    "end": "52680"
  },
  {
    "text": "system administrator we will call him Bob and Bob is working for a company um",
    "start": "52680",
    "end": "57879"
  },
  {
    "text": "and is responsible for for maintaining two servers one we will call Surf prod 01",
    "start": "57879",
    "end": "65960"
  },
  {
    "text": "which is a production level server and another one serf test 01 which is a test",
    "start": "65960",
    "end": "71920"
  },
  {
    "text": "level server as uh for common use Bob uses the",
    "start": "71920",
    "end": "77280"
  },
  {
    "text": "SSH protocol to connect to those servers he does have pseudo rides on the servers",
    "start": "77280",
    "end": "83000"
  },
  {
    "text": "so he has full control over the servers now one day the company hir Ires",
    "start": "83000",
    "end": "90400"
  },
  {
    "text": "a new employee a trainee which we call mallerie as a trainee he does not get",
    "start": "90400",
    "end": "96640"
  },
  {
    "text": "access to the production level service he only gets access to the test",
    "start": "96640",
    "end": "102360"
  },
  {
    "text": "level and only without pseud rights so mallerie is not the nice kind",
    "start": "102360",
    "end": "110840"
  },
  {
    "text": "of guy he is eager to access the production level",
    "start": "110840",
    "end": "116280"
  },
  {
    "text": "server and to do this he makes it rather simple he installs himself a network tab at the",
    "start": "116280",
    "end": "122840"
  },
  {
    "text": "computer of Bob to gain men INE middle privileges on all of the connection that",
    "start": "122840",
    "end": "129160"
  },
  {
    "text": "uh Bob initializes and with this story in mind",
    "start": "129160",
    "end": "134280"
  },
  {
    "text": "I would like to start with a brief demonstration uh of a normal work day",
    "start": "134280",
    "end": "140239"
  },
  {
    "text": "for Bob now I will try to",
    "start": "140239",
    "end": "146800"
  },
  {
    "text": "switch to My Demo",
    "start": "146800",
    "end": "151599"
  },
  {
    "text": "perfect okay so first of all we have to start our servers uh for this demo we",
    "start": "155599",
    "end": "162400"
  },
  {
    "text": "will um run them as Docker",
    "start": "162400",
    "end": "168439"
  },
  {
    "text": "containers now what you can see here is that we have now two Docker containers",
    "start": "171879",
    "end": "177319"
  },
  {
    "text": "running both of those Docker containers ERS are accepting incoming TCP connections on Port 22 and they are",
    "start": "177319",
    "end": "185159"
  },
  {
    "text": "running Asun SSH many of you might not be familiar with Asing SSH ASN SSH is a python",
    "start": "185159",
    "end": "192840"
  },
  {
    "text": "implementation for SSH and why this is important that we do use the async SSH implementation uh you",
    "start": "192840",
    "end": "201200"
  },
  {
    "text": "will see in just a bit for the client I will also use um",
    "start": "201200",
    "end": "208720"
  },
  {
    "text": "async SSH but I have made a little reper script um which actually runs the um",
    "start": "208720",
    "end": "217200"
  },
  {
    "text": "async SS AG client um so it's just a convenience script that I do not have to type this",
    "start": "217200",
    "end": "225159"
  },
  {
    "text": "whole lines all the time so let's start and",
    "start": "225159",
    "end": "230360"
  },
  {
    "text": "connect to the production level server as Bob and uh of course he has",
    "start": "230360",
    "end": "239200"
  },
  {
    "text": "chosen a super secure password called secret and if we do so we see that we",
    "start": "239200",
    "end": "245120"
  },
  {
    "text": "get a normal shell you can ignore the warnings for now if we check who am I",
    "start": "245120",
    "end": "252120"
  },
  {
    "text": "we'll see that I'm Bob and if we run the same command with sides we can also see",
    "start": "252120",
    "end": "258040"
  },
  {
    "text": "that Bob does indeed have suar rides on this uh",
    "start": "258040",
    "end": "265880"
  },
  {
    "text": "container now the same is true if we now connect to the test",
    "start": "266720",
    "end": "273160"
  },
  {
    "text": "server can once again Calli we get Bob and we can also run",
    "start": "273160",
    "end": "280720"
  },
  {
    "text": "pseudo am I and we will see that we have",
    "start": "280720",
    "end": "287320"
  },
  {
    "text": "uh root access to this container okay up until this point Marie",
    "start": "287320",
    "end": "295360"
  },
  {
    "text": "has not yet um messed with the connection made by Bob",
    "start": "295360",
    "end": "300600"
  },
  {
    "text": "we will now introduce mallerie to the connection and we will do this by introducing him in a",
    "start": "300600",
    "end": "308400"
  },
  {
    "text": "um TCP proxy so to keep things simple we will now connect to the TCP proxy but",
    "start": "308400",
    "end": "317240"
  },
  {
    "text": "the TCP uh the SSH client is actually configured to only trust the uh actual",
    "start": "317240",
    "end": "323840"
  },
  {
    "text": "SSH servers public key so there's no way that we could simply",
    "start": "323840",
    "end": "330039"
  },
  {
    "text": "emulate another SSH server and proxy all those but we can only proxy at the TCP",
    "start": "330039",
    "end": "335720"
  },
  {
    "text": "level here now if we now",
    "start": "335720",
    "end": "342479"
  },
  {
    "text": "Connect using the um T proxy and we once",
    "start": "342479",
    "end": "351520"
  },
  {
    "text": "again oh no of course it does",
    "start": "353720",
    "end": "361639"
  },
  {
    "text": "work it's always the same with these machines ah back back at it okay so",
    "start": "374599",
    "end": "383880"
  },
  {
    "text": "let's see uh if we now connect we the only thing that we can",
    "start": "383880",
    "end": "390120"
  },
  {
    "text": "immediately see is that it takes a little bit longer to connect here but we get the same shell that we are used to",
    "start": "390120",
    "end": "396720"
  },
  {
    "text": "we can once again Ask for",
    "start": "396720",
    "end": "401520"
  },
  {
    "text": "Suites and we can see we get root X but wait what's that here's another",
    "start": "402360",
    "end": "409960"
  },
  {
    "text": "password prompt another pseudo password prompt and this is kind of strange so",
    "start": "409960",
    "end": "417280"
  },
  {
    "text": "why exactly um do we have uh additional prompts that",
    "start": "417280",
    "end": "423319"
  },
  {
    "text": "were not there before although we Simply Connected over the tap nwor controller",
    "start": "423319",
    "end": "429360"
  },
  {
    "text": "okay let me tell you what happened here so what you can see here is actually an attempt for from mallerie to interfere",
    "start": "429360",
    "end": "437879"
  },
  {
    "text": "with the connection what happened here is that um",
    "start": "437879",
    "end": "443000"
  },
  {
    "text": "while you see at the bottom The Prompt Bob at s",
    "start": "443000",
    "end": "448120"
  },
  {
    "text": "test01 it's not actually Bob that it's that's logged in but",
    "start": "448120",
    "end": "453960"
  },
  {
    "text": "mallerie so if I would be able to type in who am I um with the account uh that I'm",
    "start": "453960",
    "end": "462759"
  },
  {
    "text": "currently logged in you would see that we are currently logged in as mallerie and not Bob as we would",
    "start": "462759",
    "end": "469639"
  },
  {
    "text": "expect now how is th this possible well uh for the shell it's pretty easy you",
    "start": "469639",
    "end": "475240"
  },
  {
    "text": "can customize the PS1 uh variable to obtain your custom prompt then you write",
    "start": "475240",
    "end": "481479"
  },
  {
    "text": "a little Alias for the pseudo command and you get to that level that we have here but how did mallerie actually",
    "start": "481479",
    "end": "490759"
  },
  {
    "text": "authenticate um Bob into his account in the first place because usually the SSH",
    "start": "490759",
    "end": "496120"
  },
  {
    "text": "protocol should protect against this kind of",
    "start": "496120",
    "end": "501280"
  },
  {
    "text": "attack and this is what I would like you to learn within the next 30 minutes so",
    "start": "507759",
    "end": "514159"
  },
  {
    "text": "how was mallerie actually available or able to mess with the",
    "start": "514159",
    "end": "519200"
  },
  {
    "text": "authentication um that Bob made against the server the client authentication also I will talk a little",
    "start": "519200",
    "end": "525880"
  },
  {
    "text": "bit about what variants are there for the attack um what requirements do we",
    "start": "525880",
    "end": "531399"
  },
  {
    "text": "have and also last but not least how Bob can protect himself against the attack",
    "start": "531399",
    "end": "539640"
  },
  {
    "text": "beyond that I will talk just a little bit about how modern cryptography can",
    "start": "539640",
    "end": "545120"
  },
  {
    "text": "break older protocols when it's introduced into the",
    "start": "545120",
    "end": "550279"
  },
  {
    "text": "protocol and also how we handled this protocol level responsive",
    "start": "550279",
    "end": "557800"
  },
  {
    "text": "disclosure now I know most of you will have some experience with the SSH",
    "start": "558360",
    "end": "565000"
  },
  {
    "text": "protocol most of you certainly will have used it to connect to a server manager",
    "start": "565000",
    "end": "570360"
  },
  {
    "text": "server and so on but I pretty sure that not all of you are familiar with how the",
    "start": "570360",
    "end": "576040"
  },
  {
    "text": "SSH protocol actually works and this is what I would like you to learn first so",
    "start": "576040",
    "end": "583320"
  },
  {
    "text": "to understand the attack that meler did here it's pretty important to first",
    "start": "583320",
    "end": "588959"
  },
  {
    "text": "understand um how the SSH protocol is structured and how it works so SSH is",
    "start": "588959",
    "end": "594680"
  },
  {
    "text": "built on top of the TCP IP protocol stack and is split into three sub",
    "start": "594680",
    "end": "600399"
  },
  {
    "text": "protocols on the lowest level we have the so called transport layer protocol or TLP for short and it in itself is",
    "start": "600399",
    "end": "608440"
  },
  {
    "text": "structured into the binary packet protocol which is similar to the TLs record layers some of you are familiar",
    "start": "608440",
    "end": "615000"
  },
  {
    "text": "with it and uh we have the SSH key exchange which negotiates uh the",
    "start": "615000",
    "end": "621480"
  },
  {
    "text": "algorithms and the key material that is going to be used by the binary packet",
    "start": "621480",
    "end": "627000"
  },
  {
    "text": "protocol on top of that we have the the Authentication Protocol the Authentication Protocol does a little",
    "start": "627000",
    "end": "633760"
  },
  {
    "text": "bit less than the name suggests it does only do client authentication so it does",
    "start": "633760",
    "end": "639160"
  },
  {
    "text": "not perform server authentication this is actually part of the transport layer protocol but the Authentication Protocol",
    "start": "639160",
    "end": "646000"
  },
  {
    "text": "solely focuses on client authentication this means that you can find password authentication public key",
    "start": "646000",
    "end": "652399"
  },
  {
    "text": "authentication host based authentication keyboard interactive all of those methods are",
    "start": "652399",
    "end": "659040"
  },
  {
    "text": "part of the Authentication Protocol and last but not least um we",
    "start": "659040",
    "end": "664399"
  },
  {
    "text": "have the connection protocol which is the application layer protocol of SSH where you basically can find all the",
    "start": "664399",
    "end": "671560"
  },
  {
    "text": "need stuff that SSH um offers so not only the remote shells but for example",
    "start": "671560",
    "end": "677560"
  },
  {
    "text": "port forwarding and stuff like this we will in uh for the next few",
    "start": "677560",
    "end": "684880"
  },
  {
    "text": "minutes focus on the transport layer protocol and a little bit on the Authentication protocol we do not need",
    "start": "684880",
    "end": "691160"
  },
  {
    "text": "the connection protocol at all for this Tech to work so how does uh SSH client actually",
    "start": "691160",
    "end": "699800"
  },
  {
    "text": "connect uh to a server so let's assume Bob and the server already have a",
    "start": "699800",
    "end": "704839"
  },
  {
    "text": "working TCP connection set up so we're going to uh not display that here the",
    "start": "704839",
    "end": "711040"
  },
  {
    "text": "first thing that we have is called a version exchange simple Sky messages to",
    "start": "711040",
    "end": "716839"
  },
  {
    "text": "signal that the client and and the server both support the same version of",
    "start": "716839",
    "end": "722959"
  },
  {
    "text": "SSH you can also see there's a little bit more information than just the SSH version contained within this",
    "start": "722959",
    "end": "730600"
  },
  {
    "text": "message um and uh depending on your actual implementation you will get a lot of information um sent within this",
    "start": "730600",
    "end": "737959"
  },
  {
    "text": "version exchange next step is that client and",
    "start": "737959",
    "end": "744680"
  },
  {
    "text": "server will send over lists of algorithms the SSH protocol um negotiates be",
    "start": "744680",
    "end": "752839"
  },
  {
    "text": "algorithms by using a deterministic algorithm So based on these two lists the client and the server now know",
    "start": "752839",
    "end": "760040"
  },
  {
    "text": "whether or not they can actually negotiate keys and speak SSH and if so which algorithms they are",
    "start": "760040",
    "end": "767839"
  },
  {
    "text": "going to use we also have what is denoted as NS and NC here nonis that",
    "start": "767839",
    "end": "774760"
  },
  {
    "text": "ensure that each session has a decent amount of Randomness to it",
    "start": "774760",
    "end": "781120"
  },
  {
    "text": "let's assume we have a Dy Helman key exchange here and the Dy hman key exchange in SSH is rather plain so",
    "start": "781120",
    "end": "788240"
  },
  {
    "text": "there's nothing special going on the only thing that we have here is that the",
    "start": "788240",
    "end": "793880"
  },
  {
    "text": "server alongside its ephemerate public key sends uh a long-term public key PKS",
    "start": "793880",
    "end": "800279"
  },
  {
    "text": "which is often also referred to as the host key as well as a signature that is",
    "start": "800279",
    "end": "807240"
  },
  {
    "text": "actually computed um using this uh the public the private key that corresponds",
    "start": "807240",
    "end": "814000"
  },
  {
    "text": "to this public key now the signature is computed over the previous message Fields",
    "start": "814000",
    "end": "820720"
  },
  {
    "text": "but something that you and that come in handy later this signature is only",
    "start": "820720",
    "end": "825839"
  },
  {
    "text": "computed over a fixed subset of message Fields so keep that in mind because we",
    "start": "825839",
    "end": "831680"
  },
  {
    "text": "will later introduce some optional messages to this handshake and those",
    "start": "831680",
    "end": "837399"
  },
  {
    "text": "optional messages are not actually being signed by the server",
    "start": "837399",
    "end": "843399"
  },
  {
    "text": "here of course the reason for the signature in the first place is to authenticate the handshake and the",
    "start": "843399",
    "end": "850399"
  },
  {
    "text": "server um against the client if uh for whatever reason uh an",
    "start": "850399",
    "end": "856720"
  },
  {
    "text": "attacker would mess with the connection Al the signature or the signature becomes invalid um then the client could",
    "start": "856720",
    "end": "863800"
  },
  {
    "text": "be a would be able to detect this and uh terminate the connection",
    "start": "863800",
    "end": "869880"
  },
  {
    "text": "now client server do have um Keys available now so they signal with a simple bite that they will now use these",
    "start": "869880",
    "end": "877560"
  },
  {
    "text": "uh keys and after this they will now communicate in an encrypted way for the",
    "start": "877560",
    "end": "884040"
  },
  {
    "text": "reminder of this talk I will denote the separation between the unencrypted context and the encrypted context by a",
    "start": "884040",
    "end": "891959"
  },
  {
    "text": "dash line so everything that is above the dash line is unencrypted and",
    "start": "891959",
    "end": "898120"
  },
  {
    "text": "unauthenticated uh at least on the message level and everything below this line is now sent",
    "start": "898120",
    "end": "904639"
  },
  {
    "text": "in an encrypted way the the part that remains is that",
    "start": "904639",
    "end": "910800"
  },
  {
    "text": "now the um client or server may send some extensions and then at some point",
    "start": "910800",
    "end": "917519"
  },
  {
    "text": "the uh client will request um a service from the server in this case the SSH",
    "start": "917519",
    "end": "924320"
  },
  {
    "text": "user authentication or Authentication Protocol and the server usually accept this request and they will now continue",
    "start": "924320",
    "end": "931560"
  },
  {
    "text": "to run the Authentication Protocol now a common attack type that",
    "start": "931560",
    "end": "938360"
  },
  {
    "text": "we have in uh SSH or in cryptographic network protocols in general are replay",
    "start": "938360",
    "end": "943839"
  },
  {
    "text": "attacks so how does the SSH protocol actually prevent replay attacks that is",
    "start": "943839",
    "end": "950800"
  },
  {
    "text": "for example we take the extension info message the encrypted extension info message and send it at a later date um",
    "start": "950800",
    "end": "958120"
  },
  {
    "text": "and see whether or not this still works SSH uses sequence numbers to",
    "start": "958120",
    "end": "965720"
  },
  {
    "text": "prevent this so rather straightforward concept so Bob and the server both keep",
    "start": "965720",
    "end": "971680"
  },
  {
    "text": "track of how many messages they have sent and received and uh if we now send",
    "start": "971680",
    "end": "978040"
  },
  {
    "text": "over a message from the server to the client we will actually increment those",
    "start": "978040",
    "end": "984759"
  },
  {
    "text": "sequence numbers note that the sequence numbers are not transmitted within uh",
    "start": "984759",
    "end": "991120"
  },
  {
    "text": "the message itself this is not necessary we are using reliable transport there's no way something could be reordered by",
    "start": "991120",
    "end": "998079"
  },
  {
    "text": "the transport layer so every reordering here um has to appear uh has to happen",
    "start": "998079",
    "end": "1005000"
  },
  {
    "text": "because of an attack so we now incremented after we've sent the message",
    "start": "1005000",
    "end": "1010639"
  },
  {
    "text": "and of course if we now send a message back that is from the client to the",
    "start": "1010639",
    "end": "1016040"
  },
  {
    "text": "server will of course increment the clients send counter and the servers",
    "start": "1016040",
    "end": "1021800"
  },
  {
    "text": "receive counter now let's briefly assume that at",
    "start": "1021800",
    "end": "1029760"
  },
  {
    "text": "this point um what we are looking at were the new keys messages and we have a",
    "start": "1029760",
    "end": "1035558"
  },
  {
    "text": "separation between the unencrypted context above the line and the encrypted context below the",
    "start": "1035559",
    "end": "1042798"
  },
  {
    "text": "line the SSH protocol does not care so sequence numbers are never re set to",
    "start": "1042799",
    "end": "1049799"
  },
  {
    "text": "zero within the protocol so they are initialized to zero at the beginning and then simply incremented as long as they",
    "start": "1049799",
    "end": "1056760"
  },
  {
    "text": "don't overflow and um yeah that means if we now send another",
    "start": "1056760",
    "end": "1063000"
  },
  {
    "text": "message here um this will actually be verified through a Mech so we will now",
    "start": "1063000",
    "end": "1069559"
  },
  {
    "text": "use these sequence numbers to actually verify that the message is sent in order",
    "start": "1069559",
    "end": "1075120"
  },
  {
    "text": "and we do this by putting the sequence number into into our me or message",
    "start": "1075120",
    "end": "1080840"
  },
  {
    "text": "authentication code that we compute for each me message to ensure that they it's not",
    "start": "1080840",
    "end": "1086679"
  },
  {
    "text": "altered and the server will compute this Mech as well using its receive counter",
    "start": "1086679",
    "end": "1093039"
  },
  {
    "text": "and as long as send and receive counter for a single message are in sync um the",
    "start": "1093039",
    "end": "1098440"
  },
  {
    "text": "message is accepted of course we will increment the",
    "start": "1098440",
    "end": "1106840"
  },
  {
    "text": "uh send and receive counter afterwards now let's put this idea of sequence",
    "start": "1106840",
    "end": "1113520"
  },
  {
    "text": "numbers into the protocol as you can see here the",
    "start": "1113520",
    "end": "1119480"
  },
  {
    "text": "protocol version exchange itself does not get any sequence numbers just plain askd messages nothing special there the",
    "start": "1119480",
    "end": "1126360"
  },
  {
    "text": "first message to receive a sequence number is the kex init message sent by both client and",
    "start": "1126360",
    "end": "1133520"
  },
  {
    "text": "server and you can also see that every message sent be in in an unencrypted",
    "start": "1133520",
    "end": "1140679"
  },
  {
    "text": "context does not have its sequence number validated so there is no way in",
    "start": "1140679",
    "end": "1145919"
  },
  {
    "text": "the unencrypted context because sequence numbers are not transmitted there's no way that the server or client could",
    "start": "1145919",
    "end": "1152679"
  },
  {
    "text": "check whether or not their sequence number is correct for a message they are only able to check the",
    "start": "1152679",
    "end": "1159559"
  },
  {
    "text": "sequence as soon as we switch over to the encrypted protocol and uh at this",
    "start": "1159559",
    "end": "1166720"
  },
  {
    "text": "point they will input it in Mech computation and",
    "start": "1166720",
    "end": "1172120"
  },
  {
    "text": "verify now I will have to um uh sum up a few things here just to put a little bit",
    "start": "1173000",
    "end": "1180440"
  },
  {
    "text": "more space at the bottom if you're not everything's still there so how does user authentication Works uh it's rather",
    "start": "1180440",
    "end": "1187720"
  },
  {
    "text": "simple in the SSH protocol it's a simple um challenge response or the client can",
    "start": "1187720",
    "end": "1194159"
  },
  {
    "text": "choose whatever authentication request uh it likes it will simply try to",
    "start": "1194159",
    "end": "1199240"
  },
  {
    "text": "authenticate itself so for this uh in this example we will use password authentication we will put in Bob secret",
    "start": "1199240",
    "end": "1206760"
  },
  {
    "text": "as our authentication and um we will then get either a user authentication",
    "start": "1206760",
    "end": "1212080"
  },
  {
    "text": "success message which signals that uh the authentication was indeed successful or we will get a user authentication",
    "start": "1212080",
    "end": "1218520"
  },
  {
    "text": "failure which means that the client has to try another method of",
    "start": "1218520",
    "end": "1225320"
  },
  {
    "text": "authentication now that's all uh regarding the normal protocol FL there's nothing special going on here",
    "start": "1226120",
    "end": "1234520"
  },
  {
    "text": "but we had the question how can mallerie actually mess with this protocol",
    "start": "1234520",
    "end": "1240080"
  },
  {
    "text": "flow so the ultimate goal of mallerie is to actually inject his own",
    "start": "1240080",
    "end": "1247000"
  },
  {
    "text": "authentication request into the connection so if we now introduce melery to the connection and uh this would be",
    "start": "1247000",
    "end": "1255280"
  },
  {
    "text": "what meloy wants obviously this is not",
    "start": "1255280",
    "end": "1262360"
  },
  {
    "text": "possible because everything below the dash line is encrypted mie has no access to it so he cannot simply insert his own",
    "start": "1262360",
    "end": "1270480"
  },
  {
    "text": "messages into the encrypted connection state but what he can do is actually try",
    "start": "1270480",
    "end": "1278840"
  },
  {
    "text": "to do it a little bit earlier so he can simply try to authenticate himself ahead",
    "start": "1278840",
    "end": "1286120"
  },
  {
    "text": "of time so before we even switch on the encrypted connection",
    "start": "1286120",
    "end": "1292279"
  },
  {
    "text": "part of course rather obvious this would terminate the connection as soon as the",
    "start": "1292279",
    "end": "1299320"
  },
  {
    "text": "um key exchange finishes because we have this sequence number mismatch you can see the extension info message sent by",
    "start": "1299320",
    "end": "1306600"
  },
  {
    "text": "Bob is sent under sequence number three is received under sequence number four by the server which will then",
    "start": "1306600",
    "end": "1314120"
  },
  {
    "text": "consequently cause a Mech failure and cause the connection to terminate",
    "start": "1314120",
    "end": "1320320"
  },
  {
    "text": "now mie tries to fix this and uh he has the idea that he could potentially",
    "start": "1321320",
    "end": "1326840"
  },
  {
    "text": "remove one message that is sent by the client so that it is never actually seen",
    "start": "1326840",
    "end": "1333200"
  },
  {
    "text": "by the server those not incrementing the receive",
    "start": "1333200",
    "end": "1338080"
  },
  {
    "text": "counter there's only one message that he could potentially remove in this connection without causing the",
    "start": "1338480",
    "end": "1345080"
  },
  {
    "text": "connection to stall and this is the extension info message",
    "start": "1345080",
    "end": "1350520"
  },
  {
    "text": "as you can see here if we remove this extens extension info message that caused our connection",
    "start": "1351480",
    "end": "1357360"
  },
  {
    "text": "terminate we can simply realign our sequence numbers and the um verification",
    "start": "1357360",
    "end": "1363120"
  },
  {
    "text": "of the mech succeeds so this is a rather uh easy idea that we have here we'll talk a",
    "start": "1363120",
    "end": "1369760"
  },
  {
    "text": "little bit about under which conditions this does work but now mallerie observes that he",
    "start": "1369760",
    "end": "1378080"
  },
  {
    "text": "gets the user success me message a little bit earlier because this",
    "start": "1378080",
    "end": "1383520"
  },
  {
    "text": "authentication success message is now a direct response to his authentication request",
    "start": "1383520",
    "end": "1390760"
  },
  {
    "text": "message there's a simple solution to that mallerie could simply rearrange um this message so delay it",
    "start": "1390919",
    "end": "1399039"
  },
  {
    "text": "just a little bit that it seems like a response to the authentication request",
    "start": "1399039",
    "end": "1404760"
  },
  {
    "text": "by Bob now you might ask what is uh what happens to the authentication request",
    "start": "1404760",
    "end": "1411679"
  },
  {
    "text": "sent by Bob nothing the SSH protocol allows you to send a bunch of different",
    "start": "1411679",
    "end": "1417000"
  },
  {
    "text": "authentication requests in parallel and it says the first is good and if authentications succeed you forget about",
    "start": "1417000",
    "end": "1423039"
  },
  {
    "text": "everything else and send nothing in",
    "start": "1423039",
    "end": "1426720"
  },
  {
    "text": "response so what went actually wrong here um we have the black server State",
    "start": "1428159",
    "end": "1436559"
  },
  {
    "text": "machine of course this is is obviously an implementation flaw um the server is not supposed to",
    "start": "1436559",
    "end": "1444159"
  },
  {
    "text": "accept user authentication ahead of time but it did as you have",
    "start": "1444159",
    "end": "1451120"
  },
  {
    "text": "seen another problem that allowed us to exploit this",
    "start": "1451120",
    "end": "1457480"
  },
  {
    "text": "um implementation flaw in a man of the midle scenario was that the signature",
    "start": "1457480",
    "end": "1463520"
  },
  {
    "text": "that is used to authenticate the handshake and the server is not comput",
    "start": "1463520",
    "end": "1468559"
  },
  {
    "text": "over all messages during the handshake but only this fixed subset of messages",
    "start": "1468559",
    "end": "1474320"
  },
  {
    "text": "therefore it does not cover for example the user authentication request said by mallerie so it is not detected and last",
    "start": "1474320",
    "end": "1481919"
  },
  {
    "text": "but not least also the continuation of sequence numbers across the different",
    "start": "1481919",
    "end": "1488240"
  },
  {
    "text": "encryption contexts uh also allowed us to manipulate the sequence number within",
    "start": "1488240",
    "end": "1494840"
  },
  {
    "text": "the encrypted context by um or other way around the sequence numbers u",
    "start": "1494840",
    "end": "1501799"
  },
  {
    "text": "in the unencrypted context could be manipulated by the sequence numbers in the encrypted",
    "start": "1501799",
    "end": "1507760"
  },
  {
    "text": "context okay now this is a rather specific attack it only works against",
    "start": "1509440",
    "end": "1514600"
  },
  {
    "text": "asyn SSH and um but this is a very interesting take",
    "start": "1514600",
    "end": "1522399"
  },
  {
    "text": "idea so let's talk about some attack variants that we found so the most",
    "start": "1522399",
    "end": "1528399"
  },
  {
    "text": "obvious attack would be to Simply replace our user authentication request",
    "start": "1528399",
    "end": "1534200"
  },
  {
    "text": "with any SSH message you want as long as it's accepted by the server this would work so we could for example introduce",
    "start": "1534200",
    "end": "1541840"
  },
  {
    "text": "our own extension info message so negotiate extensions with the server for",
    "start": "1541840",
    "end": "1548120"
  },
  {
    "text": "example we could say that we do not support RSA 2 uh authentication for",
    "start": "1548120",
    "end": "1553919"
  },
  {
    "text": "users up until now we only focused that we",
    "start": "1553919",
    "end": "1561240"
  },
  {
    "text": "would like to insert a message into the connection and uh we removed this",
    "start": "1561240",
    "end": "1566880"
  },
  {
    "text": "extension info message uh inside the secet channel for the sole purpose of realigning the sequence numbers but we",
    "start": "1566880",
    "end": "1573679"
  },
  {
    "text": "can also turn things around so if we uh insert a message which we call",
    "start": "1573679",
    "end": "1579919"
  },
  {
    "text": "ignore which actually exists in the SSH protocol so there is a message that is designed to be ignored um we could offset the sequence",
    "start": "1579919",
    "end": "1588000"
  },
  {
    "text": "of ahead of time and then remove a according number of messages within the",
    "start": "1588000",
    "end": "1593760"
  },
  {
    "text": "SEC channel and this is the key idea of our attack because the SSH protocol",
    "start": "1593760",
    "end": "1601520"
  },
  {
    "text": "usually um tries to protect against this kind of attack so it should not be possible that the client and the server",
    "start": "1601520",
    "end": "1608679"
  },
  {
    "text": "have different transcripts from the secure channel of course this is limited to",
    "start": "1608679",
    "end": "1615799"
  },
  {
    "text": "only the first message in the connection if we try to remove another message further down in the connection we would",
    "start": "1615799",
    "end": "1622880"
  },
  {
    "text": "actually cause um either a verification failure because we verified at an",
    "start": "1622880",
    "end": "1630360"
  },
  {
    "text": "inconsistent state or we the connection to",
    "start": "1630360",
    "end": "1635240"
  },
  {
    "text": "stale note that this attack pattern that we see here does not require any",
    "start": "1637000",
    "end": "1643000"
  },
  {
    "text": "implementation Flor so you can run this attack as long as you implement SSH",
    "start": "1643000",
    "end": "1648159"
  },
  {
    "text": "according to specification now let's uh talk a little",
    "start": "1648159",
    "end": "1654720"
  },
  {
    "text": "bit about what uh requir requirements we have because it's not that simple uh to",
    "start": "1654720",
    "end": "1660320"
  },
  {
    "text": "remove a message from the encrypted connection State removing a message",
    "start": "1660320",
    "end": "1666080"
  },
  {
    "text": "could potentially cause trouble within the connection because maybe the um",
    "start": "1666080",
    "end": "1672320"
  },
  {
    "text": "subsequent messages decryption depend on the first encrypted message",
    "start": "1672320",
    "end": "1679440"
  },
  {
    "text": "and um we categorized all of those different encryption modes that we found",
    "start": "1679440",
    "end": "1685159"
  },
  {
    "text": "in the SSH protocol and tried uh to determine whether or not we could",
    "start": "1685159",
    "end": "1691320"
  },
  {
    "text": "actually remove the first message without causing a connection",
    "start": "1691320",
    "end": "1697600"
  },
  {
    "text": "failure we did this by looking at the state of the encryption at each step so",
    "start": "1699480",
    "end": "1706200"
  },
  {
    "text": "we tried to analyze what kind of variables make up the state",
    "start": "1706200",
    "end": "1713480"
  },
  {
    "text": "of the encryption for example in the Chacha 20",
    "start": "1713480",
    "end": "1718519"
  },
  {
    "text": "po305 we found that only the sequence numbers are part of the encryption State and we have seen we could manipulate",
    "start": "1718519",
    "end": "1724840"
  },
  {
    "text": "these sequence numbers and therefore we could perfectly exploit the cha 20 po305",
    "start": "1724840",
    "end": "1732640"
  },
  {
    "text": "algorithm now on the different side of the spectrum we have GCM GCM uses a",
    "start": "1732640",
    "end": "1738120"
  },
  {
    "text": "counter that we cannot access as an attacker at least in not any way that we know of and is therefore not affected by",
    "start": "1738120",
    "end": "1745559"
  },
  {
    "text": "our attack there are modes namely encrypt endme and encrypt denme that are only",
    "start": "1745559",
    "end": "1753480"
  },
  {
    "text": "partially controllable by an attacker we have the sequence number in there but we",
    "start": "1753480",
    "end": "1758600"
  },
  {
    "text": "also have either an IV or a counter value and for those it heavily depends",
    "start": "1758600",
    "end": "1764399"
  },
  {
    "text": "on the internal workings of the algorithms we found that for encrypt andme we were not able to perform our",
    "start": "1764399",
    "end": "1771600"
  },
  {
    "text": "attack but for the encrypt then Mech we were able to successfully attack um the",
    "start": "1771600",
    "end": "1779799"
  },
  {
    "text": "implementation with a certain percentage so just to give you some numbers the encrypt denme CBC we had up",
    "start": "1779799",
    "end": "1787960"
  },
  {
    "text": "to 80% success rate so rather",
    "start": "1787960",
    "end": "1792960"
  },
  {
    "text": "high now you could say we have 50/50 we have uh the encrypt endm and sh 20 poly3",
    "start": "1793440",
    "end": "1799039"
  },
  {
    "text": "5 that are uh some tech uh worthy we have the encrypt endme and GCM which are",
    "start": "1799039",
    "end": "1806440"
  },
  {
    "text": "not affected by our attack but if you actually look at the use usage of those algorithms you you will find that CH are",
    "start": "1806440",
    "end": "1813519"
  },
  {
    "text": "20 po305 and encrypt then Mech modes are among the most common encryption modes",
    "start": "1813519",
    "end": "1819840"
  },
  {
    "text": "that there are this is not only because chat2 polyal 5 is modern algorithm but",
    "start": "1819840",
    "end": "1828080"
  },
  {
    "text": "especially because the op SS I the open sssh implementation favors cha 20 po305 for a",
    "start": "1828080",
    "end": "1835799"
  },
  {
    "text": "few years now so whenever you use open SSH you connect to an SSH server that",
    "start": "1835799",
    "end": "1843159"
  },
  {
    "text": "actually supports Chacha 20 po 305 you will be using Chacha 20",
    "start": "1843159",
    "end": "1848720"
  },
  {
    "text": "po305 allowing for this attack uh to take place now we have talked about",
    "start": "1848720",
    "end": "1858880"
  },
  {
    "text": "what uh this attack is all about we have seen what variants there are what requirements we have now let's talk",
    "start": "1858880",
    "end": "1865840"
  },
  {
    "text": "about what we can actually do to protect ourselves against the",
    "start": "1865840",
    "end": "1872760"
  },
  {
    "text": "attack so we made a few suggestions so the most obvious one would be to Simply reset sequence numbers and to",
    "start": "1872760",
    "end": "1880480"
  },
  {
    "text": "authenticate the entire handshake transcript reset sequence numbers pretty",
    "start": "1880480",
    "end": "1886639"
  },
  {
    "text": "obvious it coupled the sequence numbers from the unencrypted context and the encrypted context therefore removing the",
    "start": "1886639",
    "end": "1894240"
  },
  {
    "text": "attacker's capability to manipulate sequence numbers um across different connection uh encryption",
    "start": "1894240",
    "end": "1901240"
  },
  {
    "text": "contexts this is not sufficient we will need also authenticated handshake transcripts",
    "start": "1901240",
    "end": "1908360"
  },
  {
    "text": "because if we authenticate the entire handshake transcript we could detect the",
    "start": "1908360",
    "end": "1913799"
  },
  {
    "text": "message injection during the handshake op M AG um to our report um developed a",
    "start": "1913799",
    "end": "1924159"
  },
  {
    "text": "countermeasure which they call strict key exchange or strict k for short and strict key exchange is part of our",
    "start": "1924159",
    "end": "1932519"
  },
  {
    "text": "suggestion so they do actually reset sequence numers but on the other side",
    "start": "1932519",
    "end": "1938000"
  },
  {
    "text": "they do not authenticate the entire hand transcript but they went for an easier way at least for them they simply said",
    "start": "1938000",
    "end": "1945200"
  },
  {
    "text": "we do not allow any message that is not strict required for the key exchange to succeed within the key",
    "start": "1945200",
    "end": "1952200"
  },
  {
    "text": "exchange can see why this could go wrong in some implementations but here we",
    "start": "1952200",
    "end": "1957279"
  },
  {
    "text": "are so stri CeX is actually the defao standard to mitigate terapin nowadays so",
    "start": "1957279",
    "end": "1964519"
  },
  {
    "text": "we have over 30 vendors that support stri CeX as a protocol extension and if",
    "start": "1964519",
    "end": "1970679"
  },
  {
    "text": "you look for example on Showdown you will find that roughly 11 million servers now day on the public public IP",
    "start": "1970679",
    "end": "1978760"
  },
  {
    "text": "before address range run uh some kind of strict key",
    "start": "1978760",
    "end": "1984559"
  },
  {
    "text": "exchange now how did we get there so we started in October and we first",
    "start": "1985919",
    "end": "1991519"
  },
  {
    "text": "contacted op SSH and Asun SSH open SSH obviously it's the most",
    "start": "1991519",
    "end": "1997600"
  },
  {
    "text": "common SSH implementation there is you may recall from the uh secure Shades and",
    "start": "1997600",
    "end": "2004440"
  },
  {
    "text": "shambles yesterday um the huge importance of the open S",
    "start": "2004440",
    "end": "2010240"
  },
  {
    "text": "implementation and we also contacted asyn SSH because of the implementation bux in their state machine now Asing",
    "start": "2010240",
    "end": "2017159"
  },
  {
    "text": "sssh um fixed their implementation bux in November and",
    "start": "2017159",
    "end": "2023039"
  },
  {
    "text": "um this was done so no implementation bux as in SSH but the protocol",
    "start": "2023039",
    "end": "2028279"
  },
  {
    "text": "vulnerability remained our idea was op M age should develop counter measure we",
    "start": "2028279",
    "end": "2036120"
  },
  {
    "text": "will take this counter measure with a patch for open SSH and provided to all",
    "start": "2036120",
    "end": "2042240"
  },
  {
    "text": "other SSH implementation vendors because as a protocol level counter measure we",
    "start": "2042240",
    "end": "2047960"
  },
  {
    "text": "need this counter measure to be implemented across a multitude of different SSH",
    "start": "2047960",
    "end": "2055118"
  },
  {
    "text": "implementations and this worked out just fine so op AG said they would like to",
    "start": "2055119",
    "end": "2060560"
  },
  {
    "text": "disclose within a month so we said yeah we will take the month and uh we had our",
    "start": "2060560",
    "end": "2066560"
  },
  {
    "text": "public disclosure in December and at this point I would like to thank everyone that was involved um for the",
    "start": "2066560",
    "end": "2074158"
  },
  {
    "text": "smooth responsible disclosure now what have we seen in the",
    "start": "2074159",
    "end": "2080358"
  },
  {
    "text": "uh last 30 minutes well terapin is another kind of attack um it targets the",
    "start": "2080359",
    "end": "2086599"
  },
  {
    "text": "SSH gen Integrity which is a rather rare attack usually you are interested in for",
    "start": "2086599",
    "end": "2093679"
  },
  {
    "text": "whatever reason trying to access the connection contents itself self and uh of",
    "start": "2093679",
    "end": "2101119"
  },
  {
    "text": "course we could exploit this in practice to downgrade for example user",
    "start": "2101119",
    "end": "2106160"
  },
  {
    "text": "authentication and this does not require any implementation",
    "start": "2106160",
    "end": "2111280"
  },
  {
    "text": "flaw however the more impactful part of our attack is that it actually does",
    "start": "2111280",
    "end": "2117079"
  },
  {
    "text": "allow exploitation of certain men in the middle uh or certain implementation floors s men in the middle",
    "start": "2117079",
    "end": "2125599"
  },
  {
    "text": "attack we ALS also uh have seen that encryption modes that are affected are",
    "start": "2126320",
    "end": "2131760"
  },
  {
    "text": "widely spread so we have cha 20 po 30 of five and CTR CBC ciphers along and crypt",
    "start": "2131760",
    "end": "2137720"
  },
  {
    "text": "then make algorithms last but not least strict CeX is a protocol level counter",
    "start": "2137720",
    "end": "2145000"
  },
  {
    "text": "measure so as such it requires support from both client and server and this is",
    "start": "2145000",
    "end": "2151440"
  },
  {
    "text": "the one thing that I would like you to remember not only patch your servers but",
    "start": "2151440",
    "end": "2156720"
  },
  {
    "text": "also if you haven't done already patch your SSH client especially if you are using open SSH under Windows because",
    "start": "2156720",
    "end": "2163800"
  },
  {
    "text": "they do not deliver this update over Windows update and with this I would like to",
    "start": "2163800",
    "end": "2170640"
  },
  {
    "text": "conclude my talk and we do have some uh three minutes for questions if there are",
    "start": "2170640",
    "end": "2176599"
  },
  {
    "text": "any [Applause]",
    "start": "2176599",
    "end": "2189199"
  },
  {
    "text": "thank you for the talk um how are specification issues being addressed what can you repeat it uh how",
    "start": "2202599",
    "end": "2209520"
  },
  {
    "text": "are specification issues being addressed possibly with rfc's yeah uh so he asked",
    "start": "2209520",
    "end": "2215599"
  },
  {
    "text": "uh how the specification uh flaws are addressed so we did this using",
    "start": "2215599",
    "end": "2221319"
  },
  {
    "text": "the strict C counter measure the problem is that currently the SSH protocol",
    "start": "2221319",
    "end": "2226839"
  },
  {
    "text": "Community does not have a working group at the iatf so there are no standardization efforts to the SSH",
    "start": "2226839",
    "end": "2234599"
  },
  {
    "text": "protocol but instead most of the implement or the progress in SSH is done over or by op",
    "start": "2234599",
    "end": "2243319"
  },
  {
    "text": "sssh so they simply implemented everyone else will follow their recommendation",
    "start": "2243319",
    "end": "2248599"
  },
  {
    "text": "and they call it a standard that's basically what's happening to the SSH",
    "start": "2248599",
    "end": "2256960"
  },
  {
    "text": "protocol yeah if you do have any questions uh later on you can always",
    "start": "2264280",
    "end": "2269599"
  },
  {
    "text": "find me on uh via email or on X or Mastodon so just let me know when you",
    "start": "2269599",
    "end": "2277280"
  },
  {
    "text": "have any questions",
    "start": "2277280",
    "end": "2280800"
  }
]