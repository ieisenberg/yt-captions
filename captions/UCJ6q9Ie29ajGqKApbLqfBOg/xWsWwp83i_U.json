[
  {
    "text": "hello everyone uh I'm Scott Constable this is my colleague Raju and just want",
    "start": "2639",
    "end": "8960"
  },
  {
    "text": "to begin by saying so today my manager is presenting in Hawaii at a conference",
    "start": "8960",
    "end": "14639"
  },
  {
    "text": "and when we learned that she's going to present in Hawaii and I'm going to present in London in",
    "start": "14639",
    "end": "21400"
  },
  {
    "text": "December we concluded that one of us was the lucky one but I have to say after uh",
    "start": "21400",
    "end": "27279"
  },
  {
    "text": "going through the process of preparing for Black Hat seeing all the effort that it takes to make this herculean event",
    "start": "27279",
    "end": "33840"
  },
  {
    "text": "come together uh on account of uh Christina Lydia everyone else who is involved uh I'm really humbled to be",
    "start": "33840",
    "end": "40239"
  },
  {
    "text": "here really honored to be here with my colleague Raju on stage to talk to you about a technology that both of us love",
    "start": "40239",
    "end": "46800"
  },
  {
    "text": "a lot Intel trust domain extensions and there are just three uh co-authors",
    "start": "46800",
    "end": "53280"
  },
  {
    "text": "on this u briefing but there are a lot of other teams uh that worked together",
    "start": "53280",
    "end": "58800"
  },
  {
    "text": "to uh launch this product to continue to enhance it and uh also we want to",
    "start": "58800",
    "end": "65280"
  },
  {
    "text": "acknowledge the uh researchers on an earlier paper that was presented at",
    "start": "65280",
    "end": "70439"
  },
  {
    "text": "ACMCCS this year titled TDX down who allowed us to use their PC in some of",
    "start": "70439",
    "end": "75920"
  },
  {
    "text": "our demos today I'm going to begin by walking through some of the background",
    "start": "75920",
    "end": "81600"
  },
  {
    "text": "information i'll talk about confidential computing Intel TDX side channels and a",
    "start": "81600",
    "end": "87439"
  },
  {
    "text": "technique uh that can uh be used to maliciously single step so execute a",
    "start": "87439",
    "end": "92640"
  },
  {
    "text": "single instruction at a time in a trusted execution environment and we'll talk about what trusted execution",
    "start": "92640",
    "end": "98240"
  },
  {
    "text": "environments are then Raju is going to take over and talk about some early prototyping that we did to mitigate",
    "start": "98240",
    "end": "103920"
  },
  {
    "text": "these kinds of attacks in a pre-production uh TDX environment then I'm going to take over",
    "start": "103920",
    "end": "110960"
  },
  {
    "text": "and we're going to go through some demos that show how these attacks work in practice and how they can be mitigated",
    "start": "110960",
    "end": "116960"
  },
  {
    "text": "and finally we're going to compare with the defenses in Intel's other trusted execution environment Intel SGX",
    "start": "116960",
    "end": "125759"
  },
  {
    "text": "so this talk is fundamentally centered on a concept called confidential computing that addresses a long-standing",
    "start": "125759",
    "end": "132160"
  },
  {
    "text": "gap in traditional security and privacy technologies so these traditional technologies for a long time have been",
    "start": "132160",
    "end": "138080"
  },
  {
    "text": "able to protect data at rest like in storage using techniques such as data encryption and protect data in transit",
    "start": "138080",
    "end": "145840"
  },
  {
    "text": "uh like over a network with technologies such as uh TLS and HTTPS but the gap has been protecting",
    "start": "145840",
    "end": "153440"
  },
  {
    "text": "data that is in use while it is being processed by a CPU while it resides in",
    "start": "153440",
    "end": "159519"
  },
  {
    "text": "the main memory and that is the gap that is addressed by confidential computing and the specific driving force behind",
    "start": "159519",
    "end": "166800"
  },
  {
    "text": "confidential computing for the past decade has been trusted execution environments including Intel TDX and",
    "start": "166800",
    "end": "173200"
  },
  {
    "text": "Intel SGX this talk is going to focus on Intel TDX uh which is a confidential",
    "start": "173200",
    "end": "180000"
  },
  {
    "text": "computing technology that provides confidentiality and integrity for virtual machines and we call virtual",
    "start": "180000",
    "end": "186640"
  },
  {
    "text": "machines that are protected by TDX we call them trust domains or TDs and Intel TDX is backed by a TDX",
    "start": "186640",
    "end": "195680"
  },
  {
    "text": "module which is a new piece of firmware that acts as a kind of co-hypervisor to",
    "start": "195680",
    "end": "201040"
  },
  {
    "text": "the hypervisor that would be enabled on the platform uh so today these are typically um in being enabled in cloud",
    "start": "201040",
    "end": "208480"
  },
  {
    "text": "service providers uh to facilitate confidential VMs",
    "start": "208480",
    "end": "213840"
  },
  {
    "text": "uh such as TDs and TDX enforces security properties that protect the tenant",
    "start": "213840",
    "end": "221040"
  },
  {
    "text": "software running inside of a TE of a TD from all other software that resides on",
    "start": "221040",
    "end": "227120"
  },
  {
    "text": "the system including the most privileged software such as the host hypervisor and",
    "start": "227120",
    "end": "232879"
  },
  {
    "text": "uh from all other tenants on the system",
    "start": "232879",
    "end": "237480"
  },
  {
    "text": "tdx assumes a very very strong threat model and therefore has a relatively",
    "start": "238560",
    "end": "244239"
  },
  {
    "text": "small trusted computing base that includes just the TDX firmware the",
    "start": "244239",
    "end": "249920"
  },
  {
    "text": "underlying processor and uh some additional components that are used for",
    "start": "249920",
    "end": "255840"
  },
  {
    "text": "remote attestation to allow a client to attest that the client's expected code",
    "start": "255840",
    "end": "261919"
  },
  {
    "text": "and data is residing in in a remote uh a remotely attested an environment such as",
    "start": "261919",
    "end": "267759"
  },
  {
    "text": "one that would be hosted by a cloud service provider uh everything else is outside of the TDX threat model and that",
    "start": "267759",
    "end": "275120"
  },
  {
    "text": "includes um some physical attackers such as a rogue system administrator who might have some degree of physical",
    "start": "275120",
    "end": "281600"
  },
  {
    "text": "access to the machine tdx has a variety of mechanisms that enforce these",
    "start": "281600",
    "end": "287040"
  },
  {
    "text": "confidentiality and integrity protections so just to give a brief overview and if you have any questions want to discuss this afterwards Roger",
    "start": "287040",
    "end": "293600"
  },
  {
    "text": "and I will be available during lunch please feel free to come up and talk to us uh for example if any other piece of",
    "start": "293600",
    "end": "299680"
  },
  {
    "text": "software on the system including privileged software tries to read private TD memory uh it will receive a",
    "start": "299680",
    "end": "305680"
  },
  {
    "text": "fixed uh bite pattern from memory so it won't even see cipher text no chance of",
    "start": "305680",
    "end": "311039"
  },
  {
    "text": "trying to um choose a chosen plain text attack uh if other software in the",
    "start": "311039",
    "end": "316320"
  },
  {
    "text": "system tries to overwrite uh private TD memory it will poison that memory in one",
    "start": "316320",
    "end": "322880"
  },
  {
    "text": "of several mechanisms and if a TD uh later on tries to read or execute poison",
    "start": "322880",
    "end": "328080"
  },
  {
    "text": "memory the TDX module will shut down that TD it'll pro it'll assume that the TD has been compromised and it won't",
    "start": "328080",
    "end": "334639"
  },
  {
    "text": "allow it to access any further now those protect uh the data",
    "start": "334639",
    "end": "341440"
  },
  {
    "text": "itself the plain text data within the TD from any confidentiality or integrity violations but what is not included in",
    "start": "341440",
    "end": "348479"
  },
  {
    "text": "the TDX uh threat model is some kinds of side channel attacks so what is a side",
    "start": "348479",
    "end": "356120"
  },
  {
    "text": "channel uh side channels arise from fundamental resource constraints in",
    "start": "356120",
    "end": "361440"
  },
  {
    "text": "modern CPUs they have a finite number of caches of buffers to keep data and they",
    "start": "361440",
    "end": "366880"
  },
  {
    "text": "might have many different tenants that have to be co-hosted uh and running concurrently on the machine at a given",
    "start": "366880",
    "end": "372960"
  },
  {
    "text": "time so these microarchchitectural resources that that are not visible to the software uh are",
    "start": "372960",
    "end": "380639"
  },
  {
    "text": "being dynamically shared in a way that's transparent to to software to provide very good uh availability and quality of",
    "start": "380639",
    "end": "386560"
  },
  {
    "text": "service so in this example suppose the attacker is doing something with a teapot and the processor has allocated",
    "start": "386560",
    "end": "395120"
  },
  {
    "text": "some buffer for the attacker to do its teapot things and the victim is also",
    "start": "395120",
    "end": "400560"
  },
  {
    "text": "doing some confidential computing on cat things and in this instance the attacker",
    "start": "400560",
    "end": "406560"
  },
  {
    "text": "and the victim are sharing this hardware buffer and so when the victim wants to do a cat thing it needs to get that",
    "start": "406560",
    "end": "412479"
  },
  {
    "text": "buffer this is demand sharing and the hardware will uh invalidate the data or",
    "start": "412479",
    "end": "418880"
  },
  {
    "text": "clear the data uh that the attacker was using so that it can make space for the the victim's cat thing so uh and then if",
    "start": "418880",
    "end": "426400"
  },
  {
    "text": "the attacker needs to do another teapot thing then because the hardware had",
    "start": "426400",
    "end": "431520"
  },
  {
    "text": "taken that buffer from the attacker it must now give it back to the attacker so that it can do its teapot thing and the",
    "start": "431520",
    "end": "438479"
  },
  {
    "text": "attacker might notice that when it does the teapot thing it took a little bit longer because it takes some time for",
    "start": "438479",
    "end": "444960"
  },
  {
    "text": "the processor to give the hardware buffer back to the attacker now if the victim does something else not a cat",
    "start": "444960",
    "end": "452080"
  },
  {
    "text": "thing then the attacker tries to do a teapot thing again it will be noticeably",
    "start": "452080",
    "end": "457639"
  },
  {
    "text": "faster because the hardware didn't have to take the hardware buffer from the attacker",
    "start": "457639",
    "end": "464000"
  },
  {
    "text": "then suppose the victim does a cat thing again maybe with a different cat then the attacker tries to do its teapot",
    "start": "464000",
    "end": "470960"
  },
  {
    "text": "thing again teapot is again slow so the attacker is able to infer that oh the",
    "start": "470960",
    "end": "476400"
  },
  {
    "text": "victim must have done a cat thing now I want to emphasize the attacker cannot",
    "start": "476400",
    "end": "481440"
  },
  {
    "text": "see the plain text that the victim's operating on it can't see the picture of a cat it can't tell that the victim is",
    "start": "481440",
    "end": "486800"
  },
  {
    "text": "doing a house cat thing or a lion cub thing but it might at least be able to",
    "start": "486800",
    "end": "492319"
  },
  {
    "text": "infer whether the victim is doing a cat thing or something other than a cat thing and in some security contexts this",
    "start": "492319",
    "end": "498639"
  },
  {
    "text": "might be interesting the attacker might be able to learn something useful",
    "start": "498639",
    "end": "503759"
  },
  {
    "text": "however in practice this is very challenging um to to make use of in part",
    "start": "503759",
    "end": "509039"
  },
  {
    "text": "because uh watching a TD using these hardware buffers is like trying to watch",
    "start": "509039",
    "end": "515360"
  },
  {
    "text": "a pin wheel that's spinning very fast and trying to make sense of it because the processor is executing billions of",
    "start": "515360",
    "end": "522279"
  },
  {
    "text": "operations so billions of instructions per second and these side channel",
    "start": "522279",
    "end": "528000"
  },
  {
    "text": "measurements become very noisy it's difficult to make sense of so what if the adversary just triggers a single",
    "start": "528000",
    "end": "533680"
  },
  {
    "text": "operation like giving the TD a network packet just one operation at a time and performs a side channel measurement so",
    "start": "533680",
    "end": "539680"
  },
  {
    "text": "that's sort of like taking a picture with a slow camera shutter uh so even",
    "start": "539680",
    "end": "545440"
  },
  {
    "text": "observing millions of instructions at a time not very easy to filter through all",
    "start": "545440",
    "end": "551040"
  },
  {
    "text": "that noise and you get a very noisy image and it's it's uh in general very",
    "start": "551040",
    "end": "556240"
  },
  {
    "text": "challenging but let's try something more precise can the adversary trigger just a",
    "start": "556240",
    "end": "561920"
  },
  {
    "text": "single instruction at a time like using a debugger like GDB so if the attacker",
    "start": "561920",
    "end": "568000"
  },
  {
    "text": "could do this then maybe the attacker could step by step observe one instruction at a time did the victim do",
    "start": "568000",
    "end": "574720"
  },
  {
    "text": "a cat thing or did it do something else and in fact this technique was",
    "start": "574720",
    "end": "580399"
  },
  {
    "text": "pioneered and demonstrated in a framework called SGX step that established this for Intel SGX and this",
    "start": "580399",
    "end": "587440"
  },
  {
    "text": "was published back in 2016 so what those authors did is they",
    "start": "587440",
    "end": "593120"
  },
  {
    "text": "looked at the Intel software developers manual and they noticed that there's this feature called the advanced",
    "start": "593120",
    "end": "598560"
  },
  {
    "text": "programmable interrupt controller and that controller uh includes a",
    "start": "598560",
    "end": "603680"
  },
  {
    "text": "programmable timer that is available to software to time events or operations and it has a mode that allows software",
    "start": "603680",
    "end": "610800"
  },
  {
    "text": "to use the local API to signal an interrupt at an absolute time",
    "start": "610800",
    "end": "616320"
  },
  {
    "text": "and maybe they thought hm that's interesting so maybe if we know that the",
    "start": "616320",
    "end": "621360"
  },
  {
    "text": "first instruction executes exactly 5,000 cycles from when we arm the timer then",
    "start": "621360",
    "end": "628399"
  },
  {
    "text": "maybe we can arm it so that it interrupts that first instruction and",
    "start": "628399",
    "end": "633600"
  },
  {
    "text": "causes just that one instruction to execute then exits the trusted execution environment then we can achieve a sort",
    "start": "633600",
    "end": "640560"
  },
  {
    "text": "of singlestepping almost like using a debugger well it doesn't quite work out of the",
    "start": "640560",
    "end": "646240"
  },
  {
    "text": "box because uh the you if you try doing this you'll see that the SDM uh it",
    "start": "646240",
    "end": "652880"
  },
  {
    "text": "doesn't work quite as well as the software developers manual would suggest there's a lot more variability in the",
    "start": "652880",
    "end": "658399"
  },
  {
    "text": "accuracy of this API and there are three reasons for this the first reason is that the API timer",
    "start": "658399",
    "end": "665680"
  },
  {
    "text": "frequency uses the core crystal clock which is not part of the individual CPU",
    "start": "665680",
    "end": "670720"
  },
  {
    "text": "cores it's unccore elsewhere on the SOC and it's a much lower resolution than",
    "start": "670720",
    "end": "676880"
  },
  {
    "text": "each of the physical cores by about two orders of magnitude or more and it tends",
    "start": "676880",
    "end": "682000"
  },
  {
    "text": "to drift from each of the individual compute cores the third reason is that",
    "start": "682000",
    "end": "687440"
  },
  {
    "text": "on these modern processors they execute instructions in a supercalar manner out of order and that means that a lot of",
    "start": "687440",
    "end": "694000"
  },
  {
    "text": "operations happen in a non-deterministic amount of time so one time you enter a trust domain takes 5,000 cycles the next",
    "start": "694000",
    "end": "700800"
  },
  {
    "text": "time 5,500 cycles and you can't predict or control exactly how long it's going to take so all this adds together to be",
    "start": "700800",
    "end": "707360"
  },
  {
    "text": "rather challenging however the SGX step authors figured out an interesting solution so they noticed that when",
    "start": "707360",
    "end": "714000"
  },
  {
    "text": "entering an SGX enclave uh SGX flushes all of the virtual to physical page",
    "start": "714000",
    "end": "719519"
  },
  {
    "text": "translations from the translation look aside buffers and what that means is that after entering an enclave every",
    "start": "719519",
    "end": "726000"
  },
  {
    "text": "instruction that executes has to go through a page table walk or at least the first instruction does and that",
    "start": "726000",
    "end": "731440"
  },
  {
    "text": "takes some time to get the physical address then there might be some other microode assists that have to happen",
    "start": "731440",
    "end": "737600"
  },
  {
    "text": "like to set uh an access bit on a page table entry and that takes some more time and eventually all this extra stuff",
    "start": "737600",
    "end": "744720"
  },
  {
    "text": "that has to happen for the first instruction may make even a noop that you think takes one cycle the fastest",
    "start": "744720",
    "end": "750959"
  },
  {
    "text": "possible instruction that might actually end up taking hundreds of cycles which makes it a big enough target to hit with",
    "start": "750959",
    "end": "756959"
  },
  {
    "text": "the API so the first key idea from this presentation is don't try to hit a small target instead make the target slower",
    "start": "756959",
    "end": "763839"
  },
  {
    "text": "and therefore bigger now Roger is going to take over and talk about some early prototyping",
    "start": "763839",
    "end": "769839"
  },
  {
    "text": "that we did with TDX to try to mitigate this attack vector thank you Scott",
    "start": "769839",
    "end": "775200"
  },
  {
    "text": "hey everyone good morning i am Raju here and I'm offensive security researcher with Intel uh my team and my focus area",
    "start": "775200",
    "end": "783200"
  },
  {
    "text": "is primarily looking into how to break some of these technologies rather than building and when we came across the",
    "start": "783200",
    "end": "789200"
  },
  {
    "text": "SDXep attack for the first time uh our team was given a charter to go ahead and",
    "start": "789200",
    "end": "794240"
  },
  {
    "text": "see how this can implicate the Intel TDX technology which was still under",
    "start": "794240",
    "end": "799279"
  },
  {
    "text": "development 3 years ago and that's when we got engaged to really create something called a proof of concept to",
    "start": "799279",
    "end": "806320"
  },
  {
    "text": "demonstrate the exploit to see whether SGXstep is really a feasible attack for",
    "start": "806320",
    "end": "812200"
  },
  {
    "text": "TDX so we want to look into the TDX step attack scenario there are two things we",
    "start": "812200",
    "end": "817760"
  },
  {
    "text": "considered one is we have to develop a proof of concept because we never had a TDX enabled platform at that time and as",
    "start": "817760",
    "end": "824639"
  },
  {
    "text": "we know the trust domain extension technology is built on Intel's VMX or virtual machine extension which relies",
    "start": "824639",
    "end": "831440"
  },
  {
    "text": "upon the virtualization and we needed to use a virtualization setup and secondly",
    "start": "831440",
    "end": "836720"
  },
  {
    "text": "as Scott mentioned the SGXep attack was demonstrated by abusing the Apic timer",
    "start": "836720",
    "end": "841839"
  },
  {
    "text": "and the platform and that is where we also wanted to reproduce the same attack for TDX",
    "start": "841839",
    "end": "848160"
  },
  {
    "text": "and this is how the attack scenario looks like where we have a malicious VM or a untrusted VMM uh which can actually",
    "start": "848160",
    "end": "856560"
  },
  {
    "text": "abuse the APIC timer to malconfigure it in such a way that it can cause the interrupt on every instruction boundary",
    "start": "856560",
    "end": "863839"
  },
  {
    "text": "of the VM or the victim VM which is executing and when we set up this kind of a attack scenario we will be able to",
    "start": "863839",
    "end": "871680"
  },
  {
    "text": "cause the VM to do VM exit on every instruction boundary and now the VMM has",
    "start": "871680",
    "end": "876880"
  },
  {
    "text": "the control of VM execution and I'm going to step you through some of those details in the coming slide so for the",
    "start": "876880",
    "end": "884480"
  },
  {
    "text": "PD pre-TDX test setup as I said we never had a TDX enabled platform but still the",
    "start": "884480",
    "end": "890160"
  },
  {
    "text": "job was to showcase that this attack is feasible and the step we took first of all we used the KVM as the host and the",
    "start": "890160",
    "end": "899360"
  },
  {
    "text": "KVM host which is untrusted for TDX attack scenario but we also leveraged a",
    "start": "899360",
    "end": "904880"
  },
  {
    "text": "portion of the KVM to behave like a good VMM which essentially detects the step",
    "start": "904880",
    "end": "910880"
  },
  {
    "text": "attack and also be able to mitigate the attack so that the VM is secure and the",
    "start": "910880",
    "end": "917120"
  },
  {
    "text": "bad VMM is the one which is essentially causing the Apic timer configuration and causing those periodic interrupts and",
    "start": "917120",
    "end": "924639"
  },
  {
    "text": "coming to the VM or the guest OS we used a Ubuntu VM as a guest OS and we were",
    "start": "924639",
    "end": "930079"
  },
  {
    "text": "running a string length application of 34 instructions to keep it simple so",
    "start": "930079",
    "end": "935920"
  },
  {
    "text": "that the intention was to demonstrate that this attack is feasible and eventually whatever the",
    "start": "935920",
    "end": "942959"
  },
  {
    "text": "code that we developed as part of the good VMM in the KVM that was taken as a reference code and implemented inside of",
    "start": "942959",
    "end": "949519"
  },
  {
    "text": "the TDX module which is a trusted entity and uh a secure software that is able to",
    "start": "949519",
    "end": "956000"
  },
  {
    "text": "maintain the TDX security objectives so I will show how we manage to do that in",
    "start": "956000",
    "end": "961360"
  },
  {
    "text": "the TDX module in coming slides so now we will see how we managed to",
    "start": "961360",
    "end": "967440"
  },
  {
    "text": "realize the TDX step attack as I showed you earlier the bad VMM configures uh",
    "start": "967440",
    "end": "973040"
  },
  {
    "text": "the API timer to cause the periodic interrupt and now on every interrupt it",
    "start": "973040",
    "end": "978480"
  },
  {
    "text": "by design the VM has to exit to the host through VM exit and now if the VMM has",
    "start": "978480",
    "end": "983839"
  },
  {
    "text": "configured the API in a way that it interrupts on every instruction boundary the VMM will get the control of the VM",
    "start": "983839",
    "end": "990480"
  },
  {
    "text": "execution on every instruction boundary not only that the VMM will also be able",
    "start": "990480",
    "end": "996160"
  },
  {
    "text": "to do some micro architectural analysis as part of that and in turn it will also",
    "start": "996160",
    "end": "1002079"
  },
  {
    "text": "cause the VM resume to make the VM to continue the execution of all the instructions until it get exhausted so",
    "start": "1002079",
    "end": "1009440"
  },
  {
    "text": "that way it has a full control over the execution of VM from a result perspective as you see",
    "start": "1009440",
    "end": "1015920"
  },
  {
    "text": "the interrupt based attack string length the victim VM was running the string length application uh which was having",
    "start": "1015920",
    "end": "1022000"
  },
  {
    "text": "34 instructions and we ran the experiment maybe for around 100 times",
    "start": "1022000",
    "end": "1027280"
  },
  {
    "text": "and as you see in the graph we managed to hit the success rate of around eight",
    "start": "1027280",
    "end": "1032558"
  },
  {
    "text": "which means that around eight times we are able to get all the 34 instructions in a correct order that demonstrated",
    "start": "1032559",
    "end": "1039438"
  },
  {
    "text": "that indeed this step attack on TDX architecture is real",
    "start": "1039439",
    "end": "1045280"
  },
  {
    "text": "then once we prove that this is a valid attack we have to work on the mitigation as well and we came out with two",
    "start": "1045280",
    "end": "1052080"
  },
  {
    "text": "proposals we started with the first mitigation where the mitigation was",
    "start": "1052080",
    "end": "1057120"
  },
  {
    "text": "implemented with the help of the good VMM and also a V handler or a",
    "start": "1057120",
    "end": "1062240"
  },
  {
    "text": "virtualization exception handler which is running inside of the TD that means whenever the good VMM is able to detect",
    "start": "1062240",
    "end": "1069200"
  },
  {
    "text": "that the given VM is under step attack it will send a notification to the VM saying that you are under attack so you",
    "start": "1069200",
    "end": "1076640"
  },
  {
    "text": "have to manage this uh VM virtualization exception and then the VM will manage",
    "start": "1076640",
    "end": "1082480"
  },
  {
    "text": "this V handler which is essentially running some arbitrary random instructions and then return the control",
    "start": "1082480",
    "end": "1089200"
  },
  {
    "text": "back to the bad host by doing so what we are preventing is the VM is not going to",
    "start": "1089200",
    "end": "1095120"
  },
  {
    "text": "execute the real instructions at that point rather it is running some arbitrary instructions so that way even",
    "start": "1095120",
    "end": "1101520"
  },
  {
    "text": "if the bad VMM runs any side channel analysis it will not be able to get to the real instructions that VM is",
    "start": "1101520",
    "end": "1108000"
  },
  {
    "text": "executed so from a P result perspective this is",
    "start": "1108000",
    "end": "1113760"
  },
  {
    "text": "what the outcome was where we ran the test and we managed to show that with the mitigation we are not able to get to",
    "start": "1113760",
    "end": "1120559"
  },
  {
    "text": "the 34 real instruction at any point of time based on the number of experiments we did and however this mitigation has",
    "start": "1120559",
    "end": "1129360"
  },
  {
    "text": "two limitations as you can see right the first one is the scalability where the",
    "start": "1129360",
    "end": "1135280"
  },
  {
    "text": "mitigation required support from the TD implementation or the TD owner he or she",
    "start": "1135280",
    "end": "1140400"
  },
  {
    "text": "has to implement this VE handler and make sure that it is working correctly and in a real world it is not scalable",
    "start": "1140400",
    "end": "1148240"
  },
  {
    "text": "and the second limitation is also because we are bringing the TD into the trust boundary of the mitigation it also",
    "start": "1148240",
    "end": "1155280"
  },
  {
    "text": "increases the attack surface so the challenge is how can we still meet the",
    "start": "1155280",
    "end": "1160720"
  },
  {
    "text": "same security objective but overcome these limitations and that's when we came out",
    "start": "1160720",
    "end": "1166160"
  },
  {
    "text": "with uh mitigation proposal two where the mitigation was implemented fully",
    "start": "1166160",
    "end": "1172160"
  },
  {
    "text": "self-contained within the good VMM which is became you know eventually became part of the TDX module implementation",
    "start": "1172160",
    "end": "1179760"
  },
  {
    "text": "and also because the implementation is inside the good VMM the attack surface",
    "start": "1179760",
    "end": "1184799"
  },
  {
    "text": "is only restricted to TDX module and also scalability is not a issue because",
    "start": "1184799",
    "end": "1189919"
  },
  {
    "text": "the same module will be deployed across any VMs or any platform so the scalability is also addressed and what",
    "start": "1189919",
    "end": "1196880"
  },
  {
    "text": "happens is when in this model when the good VMM detects it implements a step",
    "start": "1196880",
    "end": "1202160"
  },
  {
    "text": "filter detection algorithm based on which it will detect that the VM is under attack instead of sending a",
    "start": "1202160",
    "end": "1209120"
  },
  {
    "text": "notification to the TD or VM this time it will basically implement a random VM",
    "start": "1209120",
    "end": "1215440"
  },
  {
    "text": "resume instruction for X or N number of times so that the VM uh implements or",
    "start": "1215440",
    "end": "1221919"
  },
  {
    "text": "execute some random instructions just like the previous one but only after that n instructions the good VMM will",
    "start": "1221919",
    "end": "1228960"
  },
  {
    "text": "return the control back to the host which is bad that way it is hiding uh the completely the real instructions",
    "start": "1228960",
    "end": "1235280"
  },
  {
    "text": "that were executed by the VM and from the result we were not able to anytime",
    "start": "1235280",
    "end": "1240400"
  },
  {
    "text": "with this setup the 34 instructions were never able to seen by the host VMM",
    "start": "1240400",
    "end": "1245440"
  },
  {
    "text": "thereby defeating the attack and this is my last slide so as I",
    "start": "1245440",
    "end": "1251360"
  },
  {
    "text": "said from the beginning the good VMM portion of the implementation was eventually ported to TDX module and",
    "start": "1251360",
    "end": "1257440"
  },
  {
    "text": "Intel TDX module the good thing is we have also made it open for the auditing",
    "start": "1257440",
    "end": "1262720"
  },
  {
    "text": "to the external researchers or industry partners which is available in this GitHub link and this is the step",
    "start": "1262720",
    "end": "1268559"
  },
  {
    "text": "algorithm that it actually implements where it is a huristics based implementation where it implements this",
    "start": "1268559",
    "end": "1276159"
  },
  {
    "text": "VM type filter algorithm there are two conditions based on which the TDX module",
    "start": "1276159",
    "end": "1281760"
  },
  {
    "text": "will detect whether the TD is under step attack the first one is it will basically make sure that the interrupt",
    "start": "1281760",
    "end": "1289120"
  },
  {
    "text": "occurrence of the current TD versus the TD enter if that number of cycles",
    "start": "1289120",
    "end": "1294960"
  },
  {
    "text": "consumed is less than 4K cycles then it will determine that this TD is under",
    "start": "1294960",
    "end": "1300720"
  },
  {
    "text": "step attack and we use the TSC or time stamp counter to measure these cycles",
    "start": "1300720",
    "end": "1306480"
  },
  {
    "text": "and my friend Scott is going to talk a little more detail on TSC later and we also look at the written instruction",
    "start": "1306480",
    "end": "1312640"
  },
  {
    "text": "pointer to make sure that if it is not progressed then the TD is also under step attack based on this outcome it",
    "start": "1312640",
    "end": "1319760"
  },
  {
    "text": "will basically cause the VM resume to execute some random number of instructions so that the TD will not be",
    "start": "1319760",
    "end": "1327039"
  },
  {
    "text": "able to execute the real instructions at that point of time based on this mitigation we were able to prove that",
    "start": "1327039",
    "end": "1333840"
  },
  {
    "text": "SGXstep attack is feasible on TDX architecture but we also came out with a mitigation to defeat that purpose and",
    "start": "1333840",
    "end": "1341760"
  },
  {
    "text": "interestingly from security research we always want to make progress and there are different attack scenarios that one",
    "start": "1341760",
    "end": "1348559"
  },
  {
    "text": "can think of and Scott is going to talk about how we managed to also defeat this mitigation and make it more stronger in",
    "start": "1348559",
    "end": "1356240"
  },
  {
    "text": "the next slides thank you thank you Raju now let's get into some demos but before",
    "start": "1356240",
    "end": "1362480"
  },
  {
    "text": "we do I'm going to dwell on this diagram a little bit this this dartthrowing metaphor uh we're going to keep",
    "start": "1362480",
    "end": "1368480"
  },
  {
    "text": "returning to this to show how each demo is a progression on the previous one so this dartthrowing metaphor the attacker",
    "start": "1368480",
    "end": "1375520"
  },
  {
    "text": "is is throwing darts right and the darts are apic interrupts and the attacker has to throw it over uh the operation that",
    "start": "1375520",
    "end": "1383760"
  },
  {
    "text": "enters the trusted execution environment and tries to hit the first instruction that is executed after entering and the",
    "start": "1383760",
    "end": "1391600"
  },
  {
    "text": "goal of the attacker in this single stepping is usually to try to make the target as big as possible so that the",
    "start": "1391600",
    "end": "1398720"
  },
  {
    "text": "interrupt is likely to land on that instruction and cause it to execute and then trigger an exit",
    "start": "1398720",
    "end": "1407399"
  },
  {
    "text": "so progressing from singlestepping SGX to trying to singlestep TDX the attacker",
    "start": "1408640",
    "end": "1414799"
  },
  {
    "text": "encounters some additional challenges so the first challenge is that the page",
    "start": "1414799",
    "end": "1420480"
  },
  {
    "text": "tables in TDX are isolated they are protected within the trust domain's",
    "start": "1420480",
    "end": "1425840"
  },
  {
    "text": "private memory so the attacker can't manipulate metadata on the page tables to try to trigger additional um microode",
    "start": "1425840",
    "end": "1434240"
  },
  {
    "text": "assists that might add latency to the instruction the second challenge is as",
    "start": "1434240",
    "end": "1439840"
  },
  {
    "text": "my colleague Roger just explained that there's a built-in mitigation now that the attacker has to contend with that if",
    "start": "1439840",
    "end": "1445120"
  },
  {
    "text": "the attacker uh launches the attack and tries and uh triggers the the",
    "start": "1445120",
    "end": "1451440"
  },
  {
    "text": "instruction to exit too soon before the a certain amount of time stamp counter cycles have elapsed then the mitigation",
    "start": "1451440",
    "end": "1458320"
  },
  {
    "text": "will be triggered and force a random number of instructions to execute",
    "start": "1458320",
    "end": "1464240"
  },
  {
    "text": "so let's just try to single step through a TD without doing anything else and see",
    "start": "1464240",
    "end": "1470559"
  },
  {
    "text": "what happens so in this demonstration there there are two windows on the top is the attacker and on the bottom is a",
    "start": "1470559",
    "end": "1477600"
  },
  {
    "text": "victim that's running in a trust domain and it's it's going to take uh a few seconds to boot up but I'll talk through",
    "start": "1477600",
    "end": "1483840"
  },
  {
    "text": "the example while it's booting uh so the code that's shown on the left here is an assembly instruction snippet and it's",
    "start": "1483840",
    "end": "1491200"
  },
  {
    "text": "going to execute a loop 10 times each loop iteration has six instructions and",
    "start": "1491200",
    "end": "1497679"
  },
  {
    "text": "there's an additional kind of boilerplate instruction at the beginning and the end so in total this instruction",
    "start": "1497679",
    "end": "1504159"
  },
  {
    "text": "snippet that's going to be under attack uh executes 62 instructions and the attacker's goal is going to be able to",
    "start": "1504159",
    "end": "1511279"
  },
  {
    "text": "try to single step through this this loop so the attacker ideally should be able to measure 62 instructions each",
    "start": "1511279",
    "end": "1519039"
  },
  {
    "text": "time and right now uh this singlestepping attacker is taking some measurements and as you can see they're",
    "start": "1519039",
    "end": "1525840"
  },
  {
    "text": "not correct uh so the first attempt had five instructions measured then seven then four 3 six five those are not the",
    "start": "1525840",
    "end": "1533760"
  },
  {
    "text": "correct measurements each one should show 62 instructions so what happened",
    "start": "1533760",
    "end": "1539960"
  },
  {
    "text": "here is that the mitigation was being triggered because the interrupt arrived and the enforcement mechanism detected",
    "start": "1539960",
    "end": "1547760"
  },
  {
    "text": "oh you didn't execute at least 4,000 cycles so I'm going to force uh a bunch of instructions to execute at random and",
    "start": "1547760",
    "end": "1555440"
  },
  {
    "text": "between two and 32 instructions execute the mean of that random distribution is",
    "start": "1555440",
    "end": "1561520"
  },
  {
    "text": "16 so if you want to explain why the attacker made these measurements take the total number of instructions 62",
    "start": "1561520",
    "end": "1568960"
  },
  {
    "text": "divide by about 16 that are being forced to execute each time and you get roughly",
    "start": "1568960",
    "end": "1574320"
  },
  {
    "text": "four and that's about what the attacker is observing so this shows that the mitigation is working as expected",
    "start": "1574320",
    "end": "1582640"
  },
  {
    "text": "but now uh as I mentioned earlier this year there was a paper called TDX down that was published in",
    "start": "1582640",
    "end": "1588919"
  },
  {
    "text": "ACMCCS and the authors of that paper noticed something else that's kind of interesting in the Intel software",
    "start": "1588919",
    "end": "1594480"
  },
  {
    "text": "developers manual that newer processors have this feature called invariant timestamp counter and the SDM says the",
    "start": "1594480",
    "end": "1601760"
  },
  {
    "text": "invariant TSC will run at a constant rate in all ACPI states so it's talking",
    "start": "1601760",
    "end": "1607600"
  },
  {
    "text": "about frequency scaling and sleep modes etc um and newer processors have this so",
    "start": "1607600",
    "end": "1613679"
  },
  {
    "text": "they they tried to think about okay maybe is there some way we could use this to circumvent that timestamp",
    "start": "1613679",
    "end": "1620240"
  },
  {
    "text": "counter heristic and it turns out they were successful in doing so so they",
    "start": "1620240",
    "end": "1626400"
  },
  {
    "text": "observe that by slowing down the victim core that in this case is executing a t",
    "start": "1626400",
    "end": "1632559"
  },
  {
    "text": "a program within a trust domain by slowing it for example from 1.8 8 GHz to",
    "start": "1632559",
    "end": "1638720"
  },
  {
    "text": "800 megahertz because of this invariant TSC property that causes the latency of",
    "start": "1638720",
    "end": "1645520"
  },
  {
    "text": "all operations executed by the trust domain to increase by a factor of two or",
    "start": "1645520",
    "end": "1651600"
  },
  {
    "text": "more so on our test machine uh all the victim operations would increase by a factor of 2.25 25 and it seems like",
    "start": "1651600",
    "end": "1659760"
  },
  {
    "text": "that's just enough in fact to to um exceed the threshold of that built-in",
    "start": "1659760",
    "end": "1666400"
  },
  {
    "text": "mitigation to make entering the TD plus executing an instruction plus exiting",
    "start": "1666400",
    "end": "1672000"
  },
  {
    "text": "add up to more than 4,000 cycles and we'll show that in this demo here so at",
    "start": "1672000",
    "end": "1677279"
  },
  {
    "text": "the bottom right you'll see I'm running htop now and htop is showing the frequencies of the core so the attacker",
    "start": "1677279",
    "end": "1683600"
  },
  {
    "text": "is running on logical processors 2 and 130 and the victim is running on 1 and",
    "start": "1683600",
    "end": "1689480"
  },
  {
    "text": "129 and what the attacker just did is invoked a script that that uh descales",
    "start": "1689480",
    "end": "1696720"
  },
  {
    "text": "the frequencies of the victim core and you can see the victim core just dropped to 800 megahertz so now the victim core",
    "start": "1696720",
    "end": "1703360"
  },
  {
    "text": "is running slower but the TSC is running at the same rate and so that's going to affect the effectiveness of the",
    "start": "1703360",
    "end": "1709840"
  },
  {
    "text": "mitigation and so now you see when the attacker runs the exact same uh attack program the attacker reliably counts the",
    "start": "1709840",
    "end": "1718159"
  },
  {
    "text": "uh exact number of instructions 62 62 62 and then uh once with 63 so it's not",
    "start": "1718159",
    "end": "1724240"
  },
  {
    "text": "100% accurate but it's pretty good it's like 98 99% accurate so the second key idea from",
    "start": "1724240",
    "end": "1731039"
  },
  {
    "text": "this presentation is that frequency scaling can be used to fool mitigation heristics that are that rely on the",
    "start": "1731039",
    "end": "1737600"
  },
  {
    "text": "processor's time stamp counter now there is another way to circumvent",
    "start": "1737600",
    "end": "1743760"
  },
  {
    "text": "this this mitigation uh that has not been previously published this is something that we discovered internally",
    "start": "1743760",
    "end": "1750080"
  },
  {
    "text": "uh so this is again the dartthrowing diagram and uh that bar at the bottom",
    "start": "1750080",
    "end": "1755360"
  },
  {
    "text": "shows how TDX down works is it slows uh lots of",
    "start": "1755360",
    "end": "1760679"
  },
  {
    "text": "operations but let's go back to key idea one don't try to hit a small target try",
    "start": "1760679",
    "end": "1766399"
  },
  {
    "text": "to make the target and only the target slower and therefore bigger so is there",
    "start": "1766399",
    "end": "1771919"
  },
  {
    "text": "something that we can do here like in the page table walk now I really love",
    "start": "1771919",
    "end": "1777279"
  },
  {
    "text": "love this diagram um and I I love the title of this slide too um so the the",
    "start": "1777279",
    "end": "1783039"
  },
  {
    "text": "blue line at the bottom shows how uh bare metal processes so",
    "start": "1783039",
    "end": "1788679"
  },
  {
    "text": "nonVMs translate from linear or virtual memory to physical memory addresses they",
    "start": "1788679",
    "end": "1794320"
  },
  {
    "text": "do a page table walk and the page tables are somewhat shallow you walk through um",
    "start": "1794320",
    "end": "1799360"
  },
  {
    "text": "usually four levels of page tables uh to get from a virtual address to a physical address but if you're executing inside",
    "start": "1799360",
    "end": "1806799"
  },
  {
    "text": "of a VM the square of that number of operations has to occur because each",
    "start": "1806799",
    "end": "1813360"
  },
  {
    "text": "level of the page table hierarchy must itself be translated from a guest",
    "start": "1813360",
    "end": "1818960"
  },
  {
    "text": "address to a physical address so you might have to perform uh I think 20",
    "start": "1818960",
    "end": "1826559"
  },
  {
    "text": "operations and these cannot be parallelized this happens serially one after another you have to perform as",
    "start": "1826559",
    "end": "1832799"
  },
  {
    "text": "many as 20 operations to go from a guest virtual address to a physical",
    "start": "1832799",
    "end": "1839559"
  },
  {
    "text": "address normally this is very very fast because these addresses are cached but",
    "start": "1839559",
    "end": "1844640"
  },
  {
    "text": "in the worst case if those uh translations are not cached and if the",
    "start": "1844640",
    "end": "1849679"
  },
  {
    "text": "processor has to do an extended page table walk and those page table entries",
    "start": "1849679",
    "end": "1854799"
  },
  {
    "text": "aren't available in the CPU's caches it will have to go to memory to get the first address to get the second address",
    "start": "1854799",
    "end": "1861679"
  },
  {
    "text": "to get the third to get the fourth to get the fifth all the way up to the 20th and that can take a while uh on many",
    "start": "1861679",
    "end": "1868000"
  },
  {
    "text": "processors it might take several hundred i think uh on our test platform about 750 cycles to go to memory to get some",
    "start": "1868000",
    "end": "1875039"
  },
  {
    "text": "data so multiply 750 by 20 and you get a rather large number and you can uh end",
    "start": "1875039",
    "end": "1882640"
  },
  {
    "text": "up making a single noop very very very expensive to execute if you do this",
    "start": "1882640",
    "end": "1888840"
  },
  {
    "text": "maliciously so in our third demo let's attempt to singlestep a TD by flushing",
    "start": "1888840",
    "end": "1894240"
  },
  {
    "text": "the EPs and I tried making this into a demo but it the process of flushing all these uh",
    "start": "1894240",
    "end": "1901679"
  },
  {
    "text": "EPs takes a long time so the demo runs but it takes about 10 minutes i couldn't quite show it here and the de the code",
    "start": "1901679",
    "end": "1908880"
  },
  {
    "text": "to enable this demo is fairly simple we wrote a kernel module that plugs in and",
    "start": "1908880",
    "end": "1914240"
  },
  {
    "text": "before invoking and arming the API it invokes this instruction called write back invalidate which flushes all of the",
    "start": "1914240",
    "end": "1922000"
  },
  {
    "text": "CPU's caches and takes quite a while so you have to sleep for a fraction of a second for it to complete and what that",
    "start": "1922000",
    "end": "1929440"
  },
  {
    "text": "does is whatever uh PTEES and and extended page tables the TD had",
    "start": "1929440",
    "end": "1934799"
  },
  {
    "text": "previously used those will all be flushed so when the the TD has to do a",
    "start": "1934799",
    "end": "1939919"
  },
  {
    "text": "page table walk again to find its instruction memory to find its data memory it's going to have to keep going",
    "start": "1939919",
    "end": "1945440"
  },
  {
    "text": "to memory to do all of that and when we run this demo um it it it's pretty",
    "start": "1945440",
    "end": "1951760"
  },
  {
    "text": "accurate you can see it uh it does circumvent the mitigation that instruction will take a very long time",
    "start": "1951760",
    "end": "1957120"
  },
  {
    "text": "to execute uh it's not quite 99% accurate but I think when I did my own",
    "start": "1957120",
    "end": "1962159"
  },
  {
    "text": "pencil and paper calculation it was about 96 97% um",
    "start": "1962159",
    "end": "1968679"
  },
  {
    "text": "accurate so now how do we mitigate this how do we how do we address this problem",
    "start": "1968679",
    "end": "1974240"
  },
  {
    "text": "um so the newer versions of the Intel TDX module which is firmware so it's continuously being upgraded through the",
    "start": "1974240",
    "end": "1981279"
  },
  {
    "text": "Intel platform updates uh that we release at a regular cadence uh there's a new feature called",
    "start": "1981279",
    "end": "1987679"
  },
  {
    "text": "instruction counting singlestep defense or IAC SSD",
    "start": "1987679",
    "end": "1992960"
  },
  {
    "text": "um that instead of using the timestamp counter as a proxy for forward progress",
    "start": "1992960",
    "end": "1998640"
  },
  {
    "text": "within a trust domain uh uses a performance counter um that measures instructions re executed to retirement",
    "start": "1998640",
    "end": "2006159"
  },
  {
    "text": "so instructions executed to completion and if the TD doesn't execute enough instructions to completion then that",
    "start": "2006159",
    "end": "2012559"
  },
  {
    "text": "mitigation uh enforcement will be imposed by the by the uh TDX",
    "start": "2012559",
    "end": "2019720"
  },
  {
    "text": "module so in this last demo we'll show how the uh again the TDX down technique",
    "start": "2019720",
    "end": "2025840"
  },
  {
    "text": "the frequency descaling um so the attacker in this case has already descaled the the victim's uh CPU",
    "start": "2025840",
    "end": "2033519"
  },
  {
    "text": "frequency to 800 megahertz and now is attempting to execute the same singlestepping technique",
    "start": "2033519",
    "end": "2041480"
  },
  {
    "text": "and yeah so as you can see the uh it's just like the first demo",
    "start": "2042039",
    "end": "2049040"
  },
  {
    "text": "the mitigation was activated reliably and now the attacker is only counting an",
    "start": "2049040",
    "end": "2054240"
  },
  {
    "text": "average of uh four instructions per attack per attack attempt which is",
    "start": "2054240",
    "end": "2059599"
  },
  {
    "text": "incorrect so finally we're going to close with a comparison to another mitigation that we",
    "start": "2059599",
    "end": "2066800"
  },
  {
    "text": "implemented for Intel SGX um this was introduced a couple years ago and we",
    "start": "2066800",
    "end": "2072398"
  },
  {
    "text": "presented it at the Usenix security symposium uh last year in",
    "start": "2072399",
    "end": "2078200"
  },
  {
    "text": "2023 and this mitigation is called AEX Notify it's uh it's different from the",
    "start": "2078200",
    "end": "2085280"
  },
  {
    "text": "TD um from the ICSSD which I'll explain why that is uh but I'll return to this",
    "start": "2085280",
    "end": "2091200"
  },
  {
    "text": "dart throwing diagram again remember um single stepping in SGX enclave is facilitated by the page walk and the a",
    "start": "2091200",
    "end": "2098960"
  },
  {
    "text": "bit assist makes each instruction take a while after exe after entering an enclave uh so what AEX notify does is it",
    "start": "2098960",
    "end": "2107359"
  },
  {
    "text": "slightly tweaks the behavior uh when entering an enclave so you don't resume",
    "start": "2107359",
    "end": "2113119"
  },
  {
    "text": "at the previous instruction where execution had stopped instead each time",
    "start": "2113119",
    "end": "2119359"
  },
  {
    "text": "an SGX enclave is entered it passes through a kind of uh what we call an AEX",
    "start": "2119359",
    "end": "2125680"
  },
  {
    "text": "notify handler and it's a software um routine that preemptively kind of warms",
    "start": "2125680",
    "end": "2132320"
  },
  {
    "text": "up the enclave and preemptively triggers page table walks microode assists ahead",
    "start": "2132320",
    "end": "2139119"
  },
  {
    "text": "of time before at before jumping to the application code that runs inside the",
    "start": "2139119",
    "end": "2145040"
  },
  {
    "text": "the uh Enclave memory so why did we implement two very",
    "start": "2145040",
    "end": "2150960"
  },
  {
    "text": "different uh singleststepping mitigations for Intel SGX and Intel TDX",
    "start": "2150960",
    "end": "2156480"
  },
  {
    "text": "so fundamentally it's because they're they're two very different technologies so SGX is a processbased technology an",
    "start": "2156480",
    "end": "2163280"
  },
  {
    "text": "SGX enclave is a region within an application's memory um so if you could",
    "start": "2163280",
    "end": "2170960"
  },
  {
    "text": "imagine like loading an SGX enclave is sort of like loading a DLL or a shared object the application loads it and then",
    "start": "2170960",
    "end": "2178000"
  },
  {
    "text": "calls into it and calls back out of it it's a part of a process whereas TDX is",
    "start": "2178000",
    "end": "2185280"
  },
  {
    "text": "a virtualizationbased um technology that hosts an entire virtual machine within a TD and because",
    "start": "2185280",
    "end": "2194160"
  },
  {
    "text": "of that there are some consequences when we try to mitigate implementations for them um so notably uh popular operating",
    "start": "2194160",
    "end": "2202320"
  },
  {
    "text": "systems such as uh Linux can't accommodate um a software handler that",
    "start": "2202320",
    "end": "2208480"
  },
  {
    "text": "can run at arbitrary times because there are certain uh critical sections of code",
    "start": "2208480",
    "end": "2213760"
  },
  {
    "text": "that run inside the Linux kernel that cannot be interrupted and uh in such a",
    "start": "2213760",
    "end": "2219920"
  },
  {
    "text": "way where they'd require some event to be handled uh so that was a a fundamental limitation um when we looked",
    "start": "2219920",
    "end": "2227440"
  },
  {
    "text": "at uh proposal one which Raju presented uh that um where we we thought about",
    "start": "2227440",
    "end": "2233680"
  },
  {
    "text": "maybe doing this for Intel TDX it occurred to us very early on that this approach would not work for TDX and so",
    "start": "2233680",
    "end": "2239839"
  },
  {
    "text": "we uh eventually uh went with the mitigation option two which was to implement the mitigation entirely within",
    "start": "2239839",
    "end": "2246640"
  },
  {
    "text": "the TDX module so here's our conclusion with some",
    "start": "2246640",
    "end": "2252560"
  },
  {
    "text": "takeaways and Raju and I are more than happy to stay up here afterwards for some uh informal Q&A as well um so first",
    "start": "2252560",
    "end": "2261680"
  },
  {
    "text": "of all confidential computing has a very very strong adversary model that has",
    "start": "2261680",
    "end": "2266720"
  },
  {
    "text": "proven I think very interesting and exciting for security research this has opened up an entirely new frontier uh",
    "start": "2266720",
    "end": "2274000"
  },
  {
    "text": "with these these very very strong threat models uh and there are three really",
    "start": "2274000",
    "end": "2279200"
  },
  {
    "text": "good examples from this presentation so one is the privileged software uh has access to these privileged capabilities",
    "start": "2279200",
    "end": "2286480"
  },
  {
    "text": "such as using the advanced programmable interrupt controller um also scaling",
    "start": "2286480",
    "end": "2292320"
  },
  {
    "text": "descaling the frequ the clock frequency of a victim CPU cores and finally uh the",
    "start": "2292320",
    "end": "2298320"
  },
  {
    "text": "ability to flush all of the CPU's caches on demand but defense and depth cap uh",
    "start": "2298320",
    "end": "2304480"
  },
  {
    "text": "mech mechanisms such as ICSSD and AEX notify can help to mitigate any",
    "start": "2304480",
    "end": "2310240"
  },
  {
    "text": "potential side channel attacks against trusted execution environments uh and",
    "start": "2310240",
    "end": "2315760"
  },
  {
    "text": "finally modern processors use a variety of address translation caching techniques to dramatically accelerate",
    "start": "2315760",
    "end": "2322560"
  },
  {
    "text": "memory accesses i think one way to one possible takeaway from the slide I showed about the page table walks is oh",
    "start": "2322560",
    "end": "2329240"
  },
  {
    "text": "wow this can be really really slow but in reality the normal case is",
    "start": "2329240",
    "end": "2336079"
  },
  {
    "text": "that it's actually very very fast the processor does an enormously good job of",
    "start": "2336079",
    "end": "2341599"
  },
  {
    "text": "dealing with the complexity of virtualization uh translation and so in the normal case",
    "start": "2341599",
    "end": "2347760"
  },
  {
    "text": "instructions do execute one cycle at a time uh and that's that's because of some very uh careful engineering that",
    "start": "2347760",
    "end": "2355359"
  },
  {
    "text": "has evolved over over several decades um and I I'm always I'm always very",
    "start": "2355359",
    "end": "2360560"
  },
  {
    "text": "impressed with what what modern processors can do and I've been very impressed with with Black Hat so far and",
    "start": "2360560",
    "end": "2366720"
  },
  {
    "text": "I know Roger and myself are looking forward to all the other briefings and events over the next couple of days",
    "start": "2366720",
    "end": "2372560"
  },
  {
    "text": "thank you so much for being such a attentive audience um I had a lot of fun presenting and yeah we'll be happy to",
    "start": "2372560",
    "end": "2378880"
  },
  {
    "text": "take any questions [Applause]",
    "start": "2378880",
    "end": "2387309"
  },
  {
    "text": "yeah if you could go up to the mic",
    "start": "2402560",
    "end": "2407000"
  },
  {
    "text": "nice talk a trend we've seen a lot is basically using machine learning models to boost the signal to noise from a very",
    "start": "2415200",
    "end": "2422720"
  },
  {
    "text": "low bandwidth side channel um why do you think that only seeing one instruction",
    "start": "2422720",
    "end": "2429359"
  },
  {
    "text": "is sufficient to prevent a side channel attack what would happen if I could reliably stop it two instructions and",
    "start": "2429359",
    "end": "2436480"
  },
  {
    "text": "then be able to start learning the behavior of the instruction that I'm trying to uh recover information from",
    "start": "2436480",
    "end": "2443200"
  },
  {
    "text": "the trust domain yeah that's that's a really valid point uh so what I'll say",
    "start": "2443200",
    "end": "2449040"
  },
  {
    "text": "is that there's no trusted execution environment that can comprehensively",
    "start": "2449040",
    "end": "2455839"
  },
  {
    "text": "mitigate side channels it's not really a solvable problem as long as you have",
    "start": "2455839",
    "end": "2461200"
  },
  {
    "text": "multi-tenant systems that share hardware resources the only way to close side",
    "start": "2461200",
    "end": "2466480"
  },
  {
    "text": "channels is to not share and that is very costly so the best that we can do",
    "start": "2466480",
    "end": "2471760"
  },
  {
    "text": "is have as much defense in depth uh as",
    "start": "2471760",
    "end": "2477400"
  },
  {
    "text": "possible without impacting the key performance indicators like availability",
    "start": "2477400",
    "end": "2483920"
  },
  {
    "text": "like performance um and so that's what that's what we've attempted to do with",
    "start": "2483920",
    "end": "2489280"
  },
  {
    "text": "both the single stepping mitigation for Intel SGX and the uh ICSSD for Intel TDX",
    "start": "2489280",
    "end": "2496319"
  },
  {
    "text": "is that we we think those are the best mitigations that we can possibly implement without having a negative",
    "start": "2496319",
    "end": "2501520"
  },
  {
    "text": "impact on the way trust domains um SGX enclaves are used um so you're right no",
    "start": "2501520",
    "end": "2509520"
  },
  {
    "text": "it doesn't comprehensively mitigate side channels but what I could say is just imagine you're using GDB and the GDB",
    "start": "2509520",
    "end": "2517599"
  },
  {
    "text": "version you're using doesn't allow you to single step through your program it",
    "start": "2517599",
    "end": "2522880"
  },
  {
    "text": "forces you to execute a random number of instructions each time it would be be very frustrating right uh so that on its",
    "start": "2522880",
    "end": "2529839"
  },
  {
    "text": "own is just raising the bar to make it more frustrating to try to get",
    "start": "2529839",
    "end": "2535920"
  },
  {
    "text": "meaningful information from trusted execution environments and if we can do that with basically no cost or virtually",
    "start": "2535920",
    "end": "2543440"
  },
  {
    "text": "no cost to the end user we think that's worth doing",
    "start": "2543440",
    "end": "2549000"
  },
  {
    "text": "sorry hi guys um just touching on that Scott um yeah",
    "start": "2554319",
    "end": "2559760"
  },
  {
    "text": "on these mitigations um have you released any papers on actually performance impacts of any of",
    "start": "2559760",
    "end": "2566720"
  },
  {
    "text": "these mitigations like the step filter for example uh for TDX um what's the impact for that in the",
    "start": "2566720",
    "end": "2574160"
  },
  {
    "text": "TDX module right um I don't know about the",
    "start": "2574160",
    "end": "2580000"
  },
  {
    "text": "performance impact for the TDX module do you Raju have any information about that",
    "start": "2580000",
    "end": "2586160"
  },
  {
    "text": "so from performance perspective the step filter will take into action only when",
    "start": "2586160",
    "end": "2591280"
  },
  {
    "text": "the attack is really in place right and we have measured in terms of it doesn't",
    "start": "2591280",
    "end": "2597200"
  },
  {
    "text": "had any additional latency by introducing this mitigation into the TDX module uh because we are also relying",
    "start": "2597200",
    "end": "2604319"
  },
  {
    "text": "upon the hardware earlier we were relying upon the TSC now with a performance counter uh the TDX module is",
    "start": "2604319",
    "end": "2611119"
  },
  {
    "text": "the most privileged software on the platform and it has direct access to the hardware ware so it does not we have not",
    "start": "2611119",
    "end": "2616400"
  },
  {
    "text": "seen any performance implications because of this mitigation when it was introduced i could add a little bit to",
    "start": "2616400",
    "end": "2622560"
  },
  {
    "text": "that yeah so the the TDX mitigation is really triggered only when the TD executes for a very very short amount of",
    "start": "2622560",
    "end": "2629359"
  },
  {
    "text": "time and in benign scenarios that should really never or just about never happen",
    "start": "2629359",
    "end": "2634400"
  },
  {
    "text": "the SGX mitigation is invoked each time the enclave is entered but it also has a",
    "start": "2634400",
    "end": "2639920"
  },
  {
    "text": "very low latency so in the paper we published last year we did publish performance numbers and we estimated",
    "start": "2639920",
    "end": "2645839"
  },
  {
    "text": "that the the maximum impact uh to the workload should be no more than",
    "start": "2645839",
    "end": "2652359"
  },
  {
    "text": "0.4% that was a very the most conservative",
    "start": "2652359",
    "end": "2657440"
  },
  {
    "text": "estimate any other questions",
    "start": "2662119",
    "end": "2666680"
  },
  {
    "text": "because you're injecting at least two instructions uh once you detect this does this then allow if I continually",
    "start": "2674640",
    "end": "2681520"
  },
  {
    "text": "trigger this attack to completely halt any forward performance of the victim",
    "start": "2681520",
    "end": "2686920"
  },
  {
    "text": "BM right so you're going to I'm going to try to single step an instruction is not going to go be processed so it's going",
    "start": "2686920",
    "end": "2692720"
  },
  {
    "text": "to inject two plus random instructions i'm going to stop after one and it's",
    "start": "2692720",
    "end": "2697920"
  },
  {
    "text": "going to continue just to stall at that point and only execute your random instructions without ever making forward",
    "start": "2697920",
    "end": "2704319"
  },
  {
    "text": "progress on the victim workload okay yeah that's it",
    "start": "2704319",
    "end": "2710519"
  },
  {
    "text": "all right all right thank you very much thank you so much",
    "start": "2716400",
    "end": "2721960"
  }
]