[
  {
    "text": "good afternoon everyone Welcome to our talk we will be discussing the topic ACH",
    "start": "2879",
    "end": "9559"
  },
  {
    "text": "view of G engines exploiting modern browser during weom",
    "start": "9559",
    "end": "15359"
  },
  {
    "text": "execution first let me introduce ourselves we are a group of researchers",
    "start": "15359",
    "end": "20880"
  },
  {
    "text": "interested in browser security and we have found as the imported multiple boxs",
    "start": "20880",
    "end": "27439"
  },
  {
    "text": "in Chrome Fair forks and Safari now let's dive into the background of",
    "start": "27439",
    "end": "33559"
  },
  {
    "text": "our research on this topic this table shows the exploited we8 bux in",
    "start": "33559",
    "end": "40559"
  },
  {
    "text": "2024 is collected by Salo from Google we can see that the weam buxs are all",
    "start": "40559",
    "end": "47399"
  },
  {
    "text": "introduced in the past year some of them do not even need to bypass the we8",
    "start": "47399",
    "end": "53120"
  },
  {
    "text": "sandbox prot",
    "start": "53120",
    "end": "56480"
  },
  {
    "text": "protection since web Zam was introduced in",
    "start": "58920",
    "end": "64158"
  },
  {
    "text": "2008 there have been researchers into its security old vulnerabilities can be",
    "start": "64159",
    "end": "70880"
  },
  {
    "text": "summarized into two types one is compilation issu such as errors in B",
    "start": "70880",
    "end": "76320"
  },
  {
    "text": "code passing the other is check missing in memory isolation such as Auto Bond",
    "start": "76320",
    "end": "82759"
  },
  {
    "text": "access when Bing memory accessing JavaScript objects mystically",
    "start": "82759",
    "end": "90159"
  },
  {
    "text": "as the researcher has progressed the old attack surface has been reduced in the",
    "start": "92479",
    "end": "99399"
  },
  {
    "text": "past two years new proposals like webam garbage collection brought new changes",
    "start": "99399",
    "end": "104759"
  },
  {
    "text": "to webam this development introduced new issues for",
    "start": "104759",
    "end": "111520"
  },
  {
    "text": "wsom JavaScript has more optimization than weam does and thus includes more",
    "start": "112719",
    "end": "120840"
  },
  {
    "text": "Security checks WM is a lowlevel language it can operat stack and",
    "start": "120840",
    "end": "127000"
  },
  {
    "text": "registers directly and has few safy checks and vulnerability",
    "start": "127000",
    "end": "134200"
  },
  {
    "text": "mitigations in addition there are more JS fathers than webam DB so many JS box",
    "start": "136680",
    "end": "143599"
  },
  {
    "text": "has been discovered by internal fathers in last last year's black hat",
    "start": "143599",
    "end": "150920"
  },
  {
    "text": "isos conference we discussed the methods for finding issues in the weom compiler",
    "start": "150920",
    "end": "156160"
  },
  {
    "text": "of safari Aros in the compiler can lead to compilation fures which we classify",
    "start": "156160",
    "end": "162760"
  },
  {
    "text": "as compilation bugs however if the compiler generates incorrect code that",
    "start": "162760",
    "end": "167920"
  },
  {
    "text": "can still execute we classify this as execution issues execution V abilities",
    "start": "167920",
    "end": "173480"
  },
  {
    "text": "are generally more exploitable than comp comper",
    "start": "173480",
    "end": "178519"
  },
  {
    "text": "vulnerabilities so how do we find new bugs from the old module we will start",
    "start": "178519",
    "end": "183680"
  },
  {
    "text": "by analyzing recent V abilities to identify new attack surfaces in",
    "start": "183680",
    "end": "188840"
  },
  {
    "text": "weom here is a simple example of calling weom from JavaScript the weom test code",
    "start": "188840",
    "end": "195319"
  },
  {
    "text": "is represented as binary code stored in a JavaScript array when we call new web",
    "start": "195319",
    "end": "202120"
  },
  {
    "text": "Zam module it passes and complies this binary code in the execution phase the",
    "start": "202120",
    "end": "209239"
  },
  {
    "text": "weom objects export weom function and invoke",
    "start": "209239",
    "end": "215439"
  },
  {
    "text": "it here is the overall architecture of the weom visual machine the upper",
    "start": "215439",
    "end": "220760"
  },
  {
    "text": "diagram means the comp compilation phase it takes weom Baner code as it input and",
    "start": "220760",
    "end": "228239"
  },
  {
    "text": "produces machine code optimized code the lower part represents the execution",
    "start": "228239",
    "end": "234400"
  },
  {
    "text": "phase it also uses unst replacement to dynamically replace code with optimized",
    "start": "234400",
    "end": "241560"
  },
  {
    "text": "code when the code becomes hot so what box may occur at execution",
    "start": "241560",
    "end": "248720"
  },
  {
    "text": "stage the exe execution phase can be divided into three sub phases we found",
    "start": "248720",
    "end": "255640"
  },
  {
    "text": "that the code here is less tested so we choose it as our new research",
    "start": "255640",
    "end": "262280"
  },
  {
    "text": "Target now we will have more detailed introduction about execution the Rand",
    "start": "262280",
    "end": "268120"
  },
  {
    "text": "build provides support for objects memory and stack frame switching for the execution of weym so that it can be",
    "start": "268120",
    "end": "275840"
  },
  {
    "text": "executed in the independent memory B code execution refer to the complied",
    "start": "275840",
    "end": "282639"
  },
  {
    "text": "machine code and optimized code running in the virual machine the external",
    "start": "282639",
    "end": "288039"
  },
  {
    "text": "interaction phase refers to the part where weom interacts with other modules",
    "start": "288039",
    "end": "293560"
  },
  {
    "text": "such as JavaScript and web Ido",
    "start": "293560",
    "end": "298800"
  },
  {
    "text": "the runtime build pH involves three aspects the weom engine initialization",
    "start": "300520",
    "end": "307000"
  },
  {
    "text": "provides a global environment the runtime initialization sets up call",
    "start": "307000",
    "end": "312400"
  },
  {
    "text": "information and call frames for specific weom instances the tear up makes",
    "start": "312400",
    "end": "318720"
  },
  {
    "text": "preparation for contest reaching when osr occurs vulnerabilities in this phas are",
    "start": "318720",
    "end": "326919"
  },
  {
    "text": "related to the design of the weom run run time structure complex contests May",
    "start": "326919",
    "end": "332560"
  },
  {
    "text": "link certain boundary checks here is the Chrome B of P1 20",
    "start": "332560",
    "end": "339639"
  },
  {
    "text": "2024 there is a type array where the first meaning types are user defined",
    "start": "339639",
    "end": "345400"
  },
  {
    "text": "followed by System default types if checks are missing users can Define",
    "start": "345400",
    "end": "350680"
  },
  {
    "text": "types out of this range causing the runtime to tr user defined types as",
    "start": "350680",
    "end": "356360"
  },
  {
    "text": "system defined this SP can be transfer into T confusion similar issues have",
    "start": "356360",
    "end": "363080"
  },
  {
    "text": "been observed in other browsers for instance in Safari the snack overflow",
    "start": "363080",
    "end": "368400"
  },
  {
    "text": "checks for weom function is insufficient when hting weom deceptions the instance",
    "start": "368400",
    "end": "375240"
  },
  {
    "text": "pointer is uninitialized the bite code execution",
    "start": "375240",
    "end": "380639"
  },
  {
    "text": "phase takes the output from the compiler as it input we8 has lift off and turo",
    "start": "380639",
    "end": "387039"
  },
  {
    "text": "fun lift off if is a Baseline compiler it generates machine code and execute it",
    "start": "387039",
    "end": "394759"
  },
  {
    "text": "during the execution if a particular piece of code execute frequently it is",
    "start": "394759",
    "end": "400919"
  },
  {
    "text": "Rec complied by the optimizing compiler tble fun which generates optimized the",
    "start": "400919",
    "end": "406680"
  },
  {
    "text": "code that dynamically replace the original code in this part we are",
    "start": "406680",
    "end": "411919"
  },
  {
    "text": "concerned with the issues that can pass through the compilation phases and causes problem during execution",
    "start": "411919",
    "end": "420240"
  },
  {
    "text": "the new proposal will also introduce new operation codes thus affecting the B",
    "start": "420240",
    "end": "425840"
  },
  {
    "text": "code execution after extensive vulnerability research and fing we found",
    "start": "425840",
    "end": "431360"
  },
  {
    "text": "that vulnerabilities in this area are often related to newly introduced proposal or particles for example these",
    "start": "431360",
    "end": "440080"
  },
  {
    "text": "four Winer abilities are all related to web ex garbage collection ultimately",
    "start": "440080",
    "end": "445879"
  },
  {
    "text": "leading to rce attack as weom evolves its interaction with",
    "start": "445879",
    "end": "452960"
  },
  {
    "text": "JavaScript has increased such as state transition and object interaction So",
    "start": "452960",
    "end": "459520"
  },
  {
    "text": "based on whether they involve weom B code we can categorize these interactions into active and passive",
    "start": "459520",
    "end": "467159"
  },
  {
    "text": "interactions the active external interaction are explicit interactions",
    "start": "467159",
    "end": "472800"
  },
  {
    "text": "generated by B code the B code are designed to interact with the JavaScript",
    "start": "472800",
    "end": "479120"
  },
  {
    "text": "such as import export and corri through this SP codes JavaScript objects and",
    "start": "479120",
    "end": "486199"
  },
  {
    "text": "functions can be imported into web Z envelopment well positive interactions",
    "start": "486199",
    "end": "492960"
  },
  {
    "text": "do not involve exploited B code instead they occur through some mechanisms and",
    "start": "492960",
    "end": "500360"
  },
  {
    "text": "object interactions so how do JavaScript and web exam exchange data with each",
    "start": "500360",
    "end": "506360"
  },
  {
    "text": "other as we can see the weom and jav script use use different tab systems for",
    "start": "506360",
    "end": "513360"
  },
  {
    "text": "example weom uses tabs like i32 and the stru where JavaScript use tabs like SMI",
    "start": "513360",
    "end": "521200"
  },
  {
    "text": "and a JavaScript object so how do they pass variables to each other and",
    "start": "521200",
    "end": "527080"
  },
  {
    "text": "communicate for example there will may be two different results um of adding the same number if",
    "start": "527080",
    "end": "534440"
  },
  {
    "text": "they use different types just as the following picture shows to avoid this problem compilers",
    "start": "534440",
    "end": "541640"
  },
  {
    "text": "introduce glue code this glue code converts variables between different types enabling simulat interaction and",
    "start": "541640",
    "end": "550040"
  },
  {
    "text": "function code between the JavaScript and webm for example in8 there are two",
    "start": "550040",
    "end": "556399"
  },
  {
    "text": "wrappers weom to JavaScript and JavaScript to weom these wrappers are",
    "start": "556399",
    "end": "561959"
  },
  {
    "text": "used for converting functions and objects between the two languages we can use this two rappers to",
    "start": "561959",
    "end": "569519"
  },
  {
    "text": "handle the conversion of parameter types according to their corresponding mapping such as converting we i32",
    "start": "569519",
    "end": "579120"
  },
  {
    "text": "toi the refers fill the cost St of the invoked function with the converted",
    "start": "579120",
    "end": "586040"
  },
  {
    "text": "converted parameters once op preparations are complete the execution",
    "start": "586040",
    "end": "592079"
  },
  {
    "text": "jumps to the EXT function start entry so weom code is optimized by the",
    "start": "592079",
    "end": "599000"
  },
  {
    "text": "weom compiler and JavaScript code is optimized by the Javas compiler but what",
    "start": "599000",
    "end": "604279"
  },
  {
    "text": "about the glue code between them in fact this GL code is in a state where neither",
    "start": "604279",
    "end": "609720"
  },
  {
    "text": "of the optimizer optimizers fully manages it therefore it can only be",
    "start": "609720",
    "end": "615120"
  },
  {
    "text": "optimized in a relative isolation every function in RM has a",
    "start": "615120",
    "end": "621959"
  },
  {
    "text": "signature the first issue of resm to JavaScript interaction arises when",
    "start": "621959",
    "end": "627120"
  },
  {
    "text": "analyzing the sign nature of imported function function it Lees considerating",
    "start": "627120",
    "end": "632440"
  },
  {
    "text": "invalid signatures this oversight can lead to incorrect parameter tabs being",
    "start": "632440",
    "end": "639079"
  },
  {
    "text": "passed during execution causing tab confusion boxs for the issue on the",
    "start": "639079",
    "end": "644360"
  },
  {
    "text": "right if there is a JS call to a web Zam function and within that function that",
    "start": "644360",
    "end": "650399"
  },
  {
    "text": "function there is another JS function call the problem arises when the JS to",
    "start": "650399",
    "end": "656600"
  },
  {
    "text": "we web Z lineing retrieves are incorrect instance object types leading to tpe",
    "start": "656600",
    "end": "663920"
  },
  {
    "text": "conion apart from active in interactions such as JavaScript and the webm",
    "start": "663920",
    "end": "670760"
  },
  {
    "text": "functions coding each other they are also passive interactions The Proposal such as weom exception handling weakens",
    "start": "670760",
    "end": "678320"
  },
  {
    "text": "isolation protection of weom memory old web zbl did not have exception handling",
    "start": "678320",
    "end": "685720"
  },
  {
    "text": "so some exceptions that could could have been caught will directly stop program",
    "start": "685720",
    "end": "691600"
  },
  {
    "text": "execution the weom establish handling proposal introduce the track mechanism",
    "start": "691600",
    "end": "697880"
  },
  {
    "text": "in weom when an imported JavaScript function is called with within a tri",
    "start": "697880",
    "end": "702959"
  },
  {
    "text": "block and throughs an exception the exception can be caught by the catch Block in weom similarly exceptions",
    "start": "702959",
    "end": "710839"
  },
  {
    "text": "thrown by weom can also be caught by JavaScript catch blocks if not",
    "start": "710839",
    "end": "716160"
  },
  {
    "text": "implemented properly there this interactions can lead to set",
    "start": "716160",
    "end": "721880"
  },
  {
    "text": "Effect memory and the table in the web Zam virual machine serve as isolated",
    "start": "721880",
    "end": "727440"
  },
  {
    "text": "memory for storing however in the design of JavaScript there are fundamental",
    "start": "727440",
    "end": "733760"
  },
  {
    "text": "JavaScript objects typically implemented as a Reb buffer as a result they retain",
    "start": "733760",
    "end": "740600"
  },
  {
    "text": "some characteristics on a t surface of a Reb buffer historically many",
    "start": "740600",
    "end": "746279"
  },
  {
    "text": "vulnerabilities have a reason due to set effects from the gr method used to",
    "start": "746279",
    "end": "751720"
  },
  {
    "text": "expand the memory of web ass leading to use three issue such when abilities",
    "start": "751720",
    "end": "757839"
  },
  {
    "text": "faded after 2017 but now they are coming back with",
    "start": "757839",
    "end": "763000"
  },
  {
    "text": "with the increasing interaction between the JavaScript and web exam the goal of web exam garbage",
    "start": "763000",
    "end": "770880"
  },
  {
    "text": "collection is to support high level Language by allowing the virual machine garbage collector to manage memory for",
    "start": "770880",
    "end": "778360"
  },
  {
    "text": "programs running in the whm without needing needing to translate GC",
    "start": "778360",
    "end": "783959"
  },
  {
    "text": "operation into weom the implementation of GC in the weom VM requires the",
    "start": "783959",
    "end": "790880"
  },
  {
    "text": "ability to provide nonlinear data structures and reference external objects this has introduced new",
    "start": "790880",
    "end": "798600"
  },
  {
    "text": "objects like weom array and weom structure so far we haven't observed",
    "start": "798600",
    "end": "804240"
  },
  {
    "text": "when when abilities directly tied to the garbage collection feature itself the",
    "start": "804240",
    "end": "809399"
  },
  {
    "text": "primary concerns have new structure objects that break certain security uh",
    "start": "809399",
    "end": "816399"
  },
  {
    "text": "assumption in it leading to issues that multiple def defination of the same",
    "start": "816399",
    "end": "821880"
  },
  {
    "text": "property of the object based on our analyze of recent WM vulnerabilities and",
    "start": "821880",
    "end": "828760"
  },
  {
    "text": "our own findings we have identified three main attack surfaces first new",
    "start": "828760",
    "end": "834880"
  },
  {
    "text": "procs like exception handling enhance interactions between Java script and web",
    "start": "834880",
    "end": "840320"
  },
  {
    "text": "assembl second issue can arise from tab translators between weom and JavaScript",
    "start": "840320",
    "end": "846519"
  },
  {
    "text": "such as tab conversion and call stack switching finally the development of new",
    "start": "846519",
    "end": "852720"
  },
  {
    "text": "optimizers May introduce new attack surfaces in the future okay the remain remaining time",
    "start": "852720",
    "end": "859639"
  },
  {
    "text": "will be taken over by my friend",
    "start": "859639",
    "end": "863560"
  },
  {
    "text": "L hello everyone how yeah uh I think already know the issues",
    "start": "866120",
    "end": "873519"
  },
  {
    "text": "that need to be focused on right uh many problem during the extrution process are actually not sufficiently tested yeah",
    "start": "873519",
    "end": "881240"
  },
  {
    "text": "especially due to the increase complexity in the extrution phase of web",
    "start": "881240",
    "end": "886440"
  },
  {
    "text": "and interaction which is caused by the new specifications introduction and uh blackhead a last",
    "start": "886440",
    "end": "893720"
  },
  {
    "text": "year we just discussed the web generator but using it directly to explore the new attack surface",
    "start": "893720",
    "end": "900040"
  },
  {
    "text": "uh we are addressing this talk is obviously uh not suitable uh of course",
    "start": "900040",
    "end": "906160"
  },
  {
    "text": "we should still review a little bit uh we need we first need a web generator to",
    "start": "906160",
    "end": "912040"
  },
  {
    "text": "produce some Sally roughly correct web samples and next the question arises we",
    "start": "912040",
    "end": "919320"
  },
  {
    "text": "need to test the factors that increase the complexity of the we so the first",
    "start": "919320",
    "end": "926000"
  },
  {
    "text": "step we take is to enrich the web itself then uh we made a small",
    "start": "926000",
    "end": "932720"
  },
  {
    "text": "modification to the generator when producing webm samples which was to increase the use of the input right the",
    "start": "932720",
    "end": "942079"
  },
  {
    "text": "inputs after generating inputs objects with we8 web compiler father randomly",
    "start": "942079",
    "end": "948680"
  },
  {
    "text": "the subsequent work of the web generator is to treat those import object just as",
    "start": "948680",
    "end": "955000"
  },
  {
    "text": "other local object in generating n of code after entire web modules were",
    "start": "955000",
    "end": "960759"
  },
  {
    "text": "completed we collect a list of the Import and Export we just used and which",
    "start": "960759",
    "end": "967040"
  },
  {
    "text": "we defined and Shar object list so the next step is to complete the",
    "start": "967040",
    "end": "974519"
  },
  {
    "text": "Shar object list uh which is achieved by rating a unit generator with fly uh a",
    "start": "974519",
    "end": "982319"
  },
  {
    "text": "powerful tool right and overall approach is similar to uh Toy project named f for",
    "start": "982319",
    "end": "990519"
  },
  {
    "text": "web uh meanwhile another optimization on the Fly is to increase the usage",
    "start": "990519",
    "end": "996279"
  },
  {
    "text": "frequency of web object and to mutate them the overall idea of the mutation is",
    "start": "996279",
    "end": "1002759"
  },
  {
    "text": "to replace the object originally generated in the fly program with shared",
    "start": "1002759",
    "end": "1009319"
  },
  {
    "text": "object we just introduced uh this introduce uh uh uh this includes the uh",
    "start": "1009319",
    "end": "1016360"
  },
  {
    "text": "equivalent uh replacement of import and the export functions of for original",
    "start": "1016360",
    "end": "1021519"
  },
  {
    "text": "functions as well as object replacement of course we have also made",
    "start": "1021519",
    "end": "1027120"
  },
  {
    "text": "10 template editions yeah the templates the template is always uh good uh we",
    "start": "1027120",
    "end": "1035400"
  },
  {
    "text": "have also made template additions of the two web generators focusing on",
    "start": "1035400",
    "end": "1040520"
  },
  {
    "text": "generating g mode such as loops and line and considering that the the exceptions",
    "start": "1040520",
    "end": "1048160"
  },
  {
    "text": "of web exceptions are currently a cross language feature so we have to create",
    "start": "1048160",
    "end": "1053760"
  },
  {
    "text": "templated generators for exception generation across web and JavaScript",
    "start": "1053760",
    "end": "1059840"
  },
  {
    "text": "this evolve template within we within web region that capture exceptions",
    "start": "1059840",
    "end": "1064919"
  },
  {
    "text": "through by JavaScript and template within JavaScript that capture exception",
    "start": "1064919",
    "end": "1070320"
  },
  {
    "text": "through by web those template use fix function name during",
    "start": "1070320",
    "end": "1076919"
  },
  {
    "text": "execution indeed uh by the end of the phase the generator part is essentially",
    "start": "1077080",
    "end": "1082559"
  },
  {
    "text": "complete but we still need to make some optimization to f++ first let's review",
    "start": "1082559",
    "end": "1088280"
  },
  {
    "text": "the traditional form of the fing Loop uh used by previous web compil",
    "start": "1088280",
    "end": "1094960"
  },
  {
    "text": "fathers you can just see that uh all the B from f++ can be FedEd into the web",
    "start": "1094960",
    "end": "1102159"
  },
  {
    "text": "generator allowing to continuously generate web samples and however for assist that",
    "start": "1102159",
    "end": "1109159"
  },
  {
    "text": "include two corresponding generators that is web generator and JavaScript generator each P need to independently",
    "start": "1109159",
    "end": "1116200"
  },
  {
    "text": "consume the r bites during operation therefore we just SPL this random output from FF Plus+ into two parts fitting",
    "start": "1116200",
    "end": "1123720"
  },
  {
    "text": "them separately to the webm generator and the JavaScript generator currently we use a cut off lens of when something",
    "start": "1123720",
    "end": "1131200"
  },
  {
    "text": "bites uh is mainly because if the bite count is too short it just limit exec of",
    "start": "1131200",
    "end": "1137159"
  },
  {
    "text": "the generators of course this also requir the setting uh in the sose lens argument of the FL P",
    "start": "1137159",
    "end": "1146320"
  },
  {
    "text": "itself okay okay uh when we actually start fing we encoun a program uh we",
    "start": "1146320",
    "end": "1153280"
  },
  {
    "text": "just encountered a problem where the samples generated by the father uh would",
    "start": "1153280",
    "end": "1158600"
  },
  {
    "text": "frequently trigger errors during the compilation phase or in other word fail",
    "start": "1158600",
    "end": "1164240"
  },
  {
    "text": "to reach the exion phases which is uh really contrary to our design",
    "start": "1164240",
    "end": "1170039"
  },
  {
    "text": "there in fact there are many reasons for this first is uh nearly impossible for",
    "start": "1170039",
    "end": "1176440"
  },
  {
    "text": "the fs who just uh completely bypass the checks during the compilation phasis",
    "start": "1176440",
    "end": "1182559"
  },
  {
    "text": "however uh when we just uh moreover when",
    "start": "1182559",
    "end": "1188320"
  },
  {
    "text": "we just switch the target the feature cannot always stay synchronized leing very frequent fails when uh very new",
    "start": "1188320",
    "end": "1195640"
  },
  {
    "text": "features are tested engines that do not support them so we optimize the F Loop we just found",
    "start": "1195640",
    "end": "1203320"
  },
  {
    "text": "that the aror message can just show the engin processing stage clearly for",
    "start": "1203320",
    "end": "1209159"
  },
  {
    "text": "instance pass and compile air logs are pretty different from runtime a logs and",
    "start": "1209159",
    "end": "1215159"
  },
  {
    "text": "this is true for nearly all the engines based on the observation we",
    "start": "1215159",
    "end": "1220360"
  },
  {
    "text": "added a regular expression matching uh strategy to f++ to determine the process",
    "start": "1220360",
    "end": "1226720"
  },
  {
    "text": "phas based on the engin of bo uh because see uh please see red L uh samples",
    "start": "1226720",
    "end": "1235240"
  },
  {
    "text": "belong to the Extrusion pH are most likely to be mutated while those are not in the ex phase are directly removed",
    "start": "1235240",
    "end": "1241880"
  },
  {
    "text": "from the C this strategy greatly increase the proportion of the samples in the cops",
    "start": "1241880",
    "end": "1248559"
  },
  {
    "text": "really trick the Extrusion fais our father have found over 10 bus",
    "start": "1248559",
    "end": "1254159"
  },
  {
    "text": "and several of them are pretty easy to exploit during the ex uh during the extrution process uh next we will enter",
    "start": "1254159",
    "end": "1261600"
  },
  {
    "text": "the exploitation part for web for several web vulnerabilities the first exploitation",
    "start": "1261600",
    "end": "1268679"
  },
  {
    "text": "is for web the first sorry the first exploitation is for",
    "start": "1268679",
    "end": "1274360"
  },
  {
    "text": "cre uh the background is web and JavaScript interactions are sported by",
    "start": "1274360",
    "end": "1280320"
  },
  {
    "text": "rappers uh we8 has a generate webon 2gs rapers for this the implementation of",
    "start": "1280320",
    "end": "1287640"
  },
  {
    "text": "the rer use arure related buildings and use a lazy compilation which means the",
    "start": "1287640",
    "end": "1293640"
  },
  {
    "text": "compilation start only when the import J function is called and this is friendly",
    "start": "1293640",
    "end": "1298720"
  },
  {
    "text": "for and devices the BG was introduced in the page that fix another BG related to the",
    "start": "1298720",
    "end": "1305720"
  },
  {
    "text": "feature named GS2 web line please not that there is a critical function check",
    "start": "1305720",
    "end": "1311919"
  },
  {
    "text": "whether the web 2gs uh generate rer features was enabled but however in the",
    "start": "1311919",
    "end": "1318960"
  },
  {
    "text": "subsequent logic uh the part that actually imit the code that did",
    "start": "1318960",
    "end": "1325600"
  },
  {
    "text": "uh the code that uh actually emit the a rer code did not check this B anymore",
    "start": "1325600",
    "end": "1333559"
  },
  {
    "text": "which breaks the Assumption and we also found that there is no check in the run time about",
    "start": "1333559",
    "end": "1339679"
  },
  {
    "text": "whether the signature is compatible across we and J the code uh on the right",
    "start": "1339679",
    "end": "1346440"
  },
  {
    "text": "side display the best functionality of the rapper in the run time we would like to know a little bit",
    "start": "1346440",
    "end": "1353840"
  },
  {
    "text": "more just like how the rapper conver veros actually in web mistake veros are",
    "start": "1353840",
    "end": "1361159"
  },
  {
    "text": "three categories the GP FB and stake web",
    "start": "1361159",
    "end": "1366559"
  },
  {
    "text": "to just RM functions will set up the regions and then web to just uh web to",
    "start": "1366559",
    "end": "1372799"
  },
  {
    "text": "GS re a will be responsible for generating specific GS object the",
    "start": "1372799",
    "end": "1378720"
  },
  {
    "text": "process mainly involve five stamps to list uh just at list it uh the overall",
    "start": "1378720",
    "end": "1384559"
  },
  {
    "text": "idea is to transfer the web mistake to uh fix array in JavaScript uh with the",
    "start": "1384559",
    "end": "1391559"
  },
  {
    "text": "most critical step being uh the second one actually taking out the parameters",
    "start": "1391559",
    "end": "1397559"
  },
  {
    "text": "in order however in the G stick slot function we found that data copying is",
    "start": "1397559",
    "end": "1405000"
  },
  {
    "text": "always done in B of 84 uh depending on the architecture the",
    "start": "1405000",
    "end": "1411600"
  },
  {
    "text": "length of the pointer right but uh what about the them",
    "start": "1411600",
    "end": "1417640"
  },
  {
    "text": "type S the value as St I 16 by data and the stake not 8",
    "start": "1417640",
    "end": "1423919"
  },
  {
    "text": "by therefore when converting s the data the translator performs uh get stick",
    "start": "1423919",
    "end": "1430600"
  },
  {
    "text": "slot uh which first process low lower eight point of s value as a first",
    "start": "1430600",
    "end": "1436120"
  },
  {
    "text": "variables and continuously treat the oper eight bytes as the next Val however the signature at the time",
    "start": "1436120",
    "end": "1444000"
  },
  {
    "text": "will just remain still so th will cause type",
    "start": "1444000",
    "end": "1450600"
  },
  {
    "text": "confusion yeah the confusion need to be cast into JavaScript object right uh so there are",
    "start": "1452000",
    "end": "1460520"
  },
  {
    "text": "two branch in way in the first Branch the lower four bits can be cast into",
    "start": "1460520",
    "end": "1465559"
  },
  {
    "text": "JavaScript object and return as a parameter back into the import JavaScript uh functions so we got uh we",
    "start": "1465559",
    "end": "1474440"
  },
  {
    "text": "we got a fake object to perit directly in the second Branch the entire",
    "start": "1474440",
    "end": "1480360"
  },
  {
    "text": "8 by data can be used as the parameters a web generate web to JavaScript object",
    "start": "1480360",
    "end": "1487120"
  },
  {
    "text": "function uh the function name is little little complex to generate a new uh web",
    "start": "1487120",
    "end": "1493919"
  },
  {
    "text": "functions this can break the V8 sandbox but uh this is not the scope of our talk",
    "start": "1493919",
    "end": "1501399"
  },
  {
    "text": "just like this okay let's assess our situations we",
    "start": "1501399",
    "end": "1506760"
  },
  {
    "text": "can fake any address as a just object and operate on it but we like a s fake",
    "start": "1506760",
    "end": "1512799"
  },
  {
    "text": "location and address Le uh PR here we",
    "start": "1512799",
    "end": "1517880"
  },
  {
    "text": "can resolve it us a h spring first we can count to the memory",
    "start": "1517880",
    "end": "1523360"
  },
  {
    "text": "of high just by allocating a pretty larger ruers uh and we can next suffect",
    "start": "1523360",
    "end": "1528919"
  },
  {
    "text": "several JavaScript string objects with very large lenses um value on this AR",
    "start": "1528919",
    "end": "1536720"
  },
  {
    "text": "buffer and next we allocate object with marker in V8 hip please know that uh",
    "start": "1536720",
    "end": "1544000"
  },
  {
    "text": "while you're non-readable and writeable protective segment exist among different we8 hip sections it's pretty easy to",
    "start": "1544000",
    "end": "1550880"
  },
  {
    "text": "find the stable map of8 he addresses under uh sufficient memory",
    "start": "1550880",
    "end": "1557000"
  },
  {
    "text": "pressure now we trick the B get fake j string handlers with this High addresses and",
    "start": "1557000",
    "end": "1564600"
  },
  {
    "text": "then use the slice method of the GS string uh with a",
    "start": "1564600",
    "end": "1571480"
  },
  {
    "text": "fake uh yeah this is just a fake streen right uh we can search the V8 H memory",
    "start": "1571480",
    "end": "1578240"
  },
  {
    "text": "to locate JavaScript object containing markers which just it uh the final step is to transfer the",
    "start": "1578240",
    "end": "1585640"
  },
  {
    "text": "F object into the uh array buffer to achieve up address R right and",
    "start": "1585640",
    "end": "1592080"
  },
  {
    "text": "RC just I do the first step to show uh this is a uh demo",
    "start": "1592080",
    "end": "1601200"
  },
  {
    "text": "yeah okay we open uh browser and check the",
    "start": "1601200",
    "end": "1610039"
  },
  {
    "text": "varing and just visit the park",
    "start": "1611919",
    "end": "1618278"
  },
  {
    "text": "yeah pop the calculator",
    "start": "1620399",
    "end": "1626480"
  },
  {
    "text": "okay and this is exploiting the Android",
    "start": "1626480",
    "end": "1631760"
  },
  {
    "text": "platform uh if we just consider 64 bit uh system the situation is somewhat",
    "start": "1631760",
    "end": "1637760"
  },
  {
    "text": "different notably in V8 memory allocation certain features can have b f",
    "start": "1637760",
    "end": "1643120"
  },
  {
    "text": "fixed addresses such as map and empty fixed array in same binary and hardcoded",
    "start": "1643120",
    "end": "1650080"
  },
  {
    "text": "string on the same execution environment we can use hardcoded string to get a",
    "start": "1650080",
    "end": "1655480"
  },
  {
    "text": "stable fake object addresses uh while the rest exploitation is just similar to",
    "start": "1655480",
    "end": "1661039"
  },
  {
    "text": "the formal ones okay",
    "start": "1661039",
    "end": "1668799"
  },
  {
    "text": "so now you have probably noticed something critical the data from SE is",
    "start": "1668799",
    "end": "1674480"
  },
  {
    "text": "really as a fake object without any checks right just very different from the strictly checked",
    "start": "1674480",
    "end": "1680760"
  },
  {
    "text": "in J this also happen in other engines let's look at some exploitation examples",
    "start": "1680760",
    "end": "1687399"
  },
  {
    "text": "in fir Fox the first vulnerability we will discuss is related to tail call tail C",
    "start": "1687399",
    "end": "1695440"
  },
  {
    "text": "optimization save stick Space by reducing the color space just consider",
    "start": "1695440",
    "end": "1700559"
  },
  {
    "text": "the normal color uh with s c example and the bug is um when SPID",
    "start": "1700559",
    "end": "1708919"
  },
  {
    "text": "monkey recycle the stick frame oh yeah SPID monkey is the JavaScript engine of",
    "start": "1708919",
    "end": "1714159"
  },
  {
    "text": "the Five Forks when SPID monage recycle the Stak frame the frame pointer moves",
    "start": "1714159",
    "end": "1719559"
  },
  {
    "text": "too far it overwrites the low Co of the parameter functions when copying the",
    "start": "1719559",
    "end": "1726120"
  },
  {
    "text": "argument of the children functions so how to explo it first we",
    "start": "1726120",
    "end": "1733600"
  },
  {
    "text": "use this park to overwrite as a i32 array reference on to the position of",
    "start": "1733600",
    "end": "1739240"
  },
  {
    "text": "the I64 array reference in the quarter allowing us to assess the content Beyond",
    "start": "1739240",
    "end": "1745880"
  },
  {
    "text": "i34 uh no sorry r62 array with an larger",
    "start": "1745880",
    "end": "1751519"
  },
  {
    "text": "opposite uh we need to First explain why we just doing this okay uh the reason actually this is also",
    "start": "1751519",
    "end": "1759480"
  },
  {
    "text": "rely on the issues um missing checks missing really critical checks in Sp",
    "start": "1759480",
    "end": "1765279"
  },
  {
    "text": "monkey especially top checks let's look at example code generated for assessing",
    "start": "1765279",
    "end": "1771240"
  },
  {
    "text": "a web array the generated code Force check in the v assess is within the range of the array lens if this is",
    "start": "1771240",
    "end": "1779559"
  },
  {
    "text": "within the range it just visits the off code at Ox 88 yeah the value is actually",
    "start": "1779559",
    "end": "1787200"
  },
  {
    "text": "an offet calculate during the compilation phases and based on the type",
    "start": "1787200",
    "end": "1792360"
  },
  {
    "text": "A and is hard coded in the generated as code so so was",
    "start": "1792360",
    "end": "1799200"
  },
  {
    "text": "the type checked no only the index was checked right I know this wouldn't be",
    "start": "1799200",
    "end": "1805080"
  },
  {
    "text": "case in JavaScript because dynamic dynamic check uh Dynamic typing uh program are filled with type conventions",
    "start": "1805080",
    "end": "1812440"
  },
  {
    "text": "so we need checking jaas however it turn out that strong type languages like web",
    "start": "1812440",
    "end": "1818760"
  },
  {
    "text": "may also need some typ checking to increase the difficulty of the exploitation but unfortunately they did",
    "start": "1818760",
    "end": "1825600"
  },
  {
    "text": "not therefore we just um i32 array to",
    "start": "1825600",
    "end": "1831960"
  },
  {
    "text": "replace the large one the larg one in order to out of bound read and write",
    "start": "1831960",
    "end": "1838159"
  },
  {
    "text": "with the valid index and by allocating the object we which we want to leak can",
    "start": "1838159",
    "end": "1845240"
  },
  {
    "text": "arising advice the address of primitive is completed just like",
    "start": "1845240",
    "end": "1853600"
  },
  {
    "text": "this with the link address we can continue to f web array on array buffer",
    "start": "1853600",
    "end": "1860960"
  },
  {
    "text": "by using the vulnerability to replace legal legal web array within int value",
    "start": "1860960",
    "end": "1866960"
  },
  {
    "text": "targeting F uh web array address which every field on the control arbit radar",
    "start": "1866960",
    "end": "1874120"
  },
  {
    "text": "right can be easily achieved please know that we have to use",
    "start": "1874120",
    "end": "1880000"
  },
  {
    "text": "some special structures to bypass nonbox strategy with SP Markey finally the method to get sh to",
    "start": "1880000",
    "end": "1887639"
  },
  {
    "text": "change the G address of function class to share code address which can achieve",
    "start": "1887639",
    "end": "1893399"
  },
  {
    "text": "through G spray using flood just array and please note that the Spiderman",
    "start": "1893399",
    "end": "1901440"
  },
  {
    "text": "Cas St all the floating Point numbers together at the end of the code and",
    "start": "1901440",
    "end": "1906799"
  },
  {
    "text": "assess some V and index like rip plus XX blah blah so the share code code uh the",
    "start": "1906799",
    "end": "1914200"
  },
  {
    "text": "share code does not require a small jumps within the float uh Point as Euro",
    "start": "1914200",
    "end": "1921120"
  },
  {
    "text": "like uh uh number just spr",
    "start": "1921120",
    "end": "1926399"
  },
  {
    "text": "technology and let's turn to the case two the RO cause of the vulnerability is",
    "start": "1926399",
    "end": "1931760"
  },
  {
    "text": "that this is the lens varable intake overflow of renew in the generator",
    "start": "1931760",
    "end": "1937760"
  },
  {
    "text": "code uh this Al in inline field allocation uh something like theine",
    "start": "1937760",
    "end": "1944679"
  },
  {
    "text": "object uh with pretty large lens this is a typical an bound bug that and is very",
    "start": "1944679",
    "end": "1952440"
  },
  {
    "text": "easy to exploit you just mind wonder if this",
    "start": "1952440",
    "end": "1958320"
  },
  {
    "text": "such simple vulnerability still exist in 2024 uh actually this vulnerability is",
    "start": "1958320",
    "end": "1964279"
  },
  {
    "text": "in the generated code uh generated assembly code and ASM code checks if NY",
    "start": "1964279",
    "end": "1970760"
  },
  {
    "text": "allocate uh account whatever just a flag is zero and jump to all an line code if",
    "start": "1970760",
    "end": "1977240"
  },
  {
    "text": "it is only after initial through align code to set the flag then we can allow a",
    "start": "1977240",
    "end": "1983200"
  },
  {
    "text": "semic to exclude it that's to to just trigger the vulnerability and extra uh",
    "start": "1983200",
    "end": "1989519"
  },
  {
    "text": "renew operations is required we achieve on of bond radar right directly by marking two new arrays",
    "start": "1989519",
    "end": "1997559"
  },
  {
    "text": "and using a large lens on the second array then combining web object to",
    "start": "1997559",
    "end": "2004679"
  },
  {
    "text": "transfer om perative into object right per but in fact we haven't per uh",
    "start": "2004679",
    "end": "2011919"
  },
  {
    "text": "performed the address leak right here we can Swip the data field of the two",
    "start": "2011919",
    "end": "2017919"
  },
  {
    "text": "different type webplay array in principle this allows to lead the R into",
    "start": "2017919",
    "end": "2023880"
  },
  {
    "text": "the form of R32 without any check if we place the GS object that",
    "start": "2023880",
    "end": "2030279"
  },
  {
    "text": "need to be leaked in the ref array then we can uh just read the value using the",
    "start": "2030279",
    "end": "2036080"
  },
  {
    "text": "i32 format so we achieve the address of",
    "start": "2036080",
    "end": "2041519"
  },
  {
    "text": "obession then the G spray is same as before okay so at this point",
    "start": "2041519",
    "end": "2047480"
  },
  {
    "text": "exploitation process is completed uh another thing I really want",
    "start": "2047480",
    "end": "2052960"
  },
  {
    "text": "to discuss is that patch uh is a patch for the box which just add the checking",
    "start": "2052960",
    "end": "2059800"
  },
  {
    "text": "to the value of the lens but please know that uh what we are",
    "start": "2059800",
    "end": "2066280"
  },
  {
    "text": "curious about is that the original function of this part of the code is to avoid the allocation space being greater",
    "start": "2066280",
    "end": "2073000"
  },
  {
    "text": "than the limit right uh we think that the check itself had nothing to do with",
    "start": "2073000",
    "end": "2078240"
  },
  {
    "text": "the ounter condition statement that is the if condition checking the non element uh",
    "start": "2078240",
    "end": "2086560"
  },
  {
    "text": "is constant varable so uh there should be similar checks in the else uh branch",
    "start": "2086560",
    "end": "2093480"
  },
  {
    "text": "of the ounter uh if conditions uh just with the same logic in fact",
    "start": "2093480",
    "end": "2102400"
  },
  {
    "text": "there is indeed the same checks in the web new array object like the red part",
    "start": "2102400",
    "end": "2109200"
  },
  {
    "text": "uh Yellow Part sorry but it include the same in integral overflow error uh what",
    "start": "2109200",
    "end": "2116560"
  },
  {
    "text": "P so this lead to the next issue this is the same integ overflow vulnerability",
    "start": "2116560",
    "end": "2122359"
  },
  {
    "text": "the difference is that the first one is uh targeting the web new uh new array",
    "start": "2122359",
    "end": "2127720"
  },
  {
    "text": "object fixed function where is second one is talkg about something new array object function which can be directly",
    "start": "2127720",
    "end": "2134520"
  },
  {
    "text": "invoked in Baseline compilator and the exploration technique",
    "start": "2134520",
    "end": "2140240"
  },
  {
    "text": "St technique and the stepes stay same",
    "start": "2140240",
    "end": "2147119"
  },
  {
    "text": "okay uh here is a conclusion introducing the concept of",
    "start": "2149920",
    "end": "2156040"
  },
  {
    "text": "web Fusion vulnerabilities and we just analysis the attch surface",
    "start": "2156040",
    "end": "2161960"
  },
  {
    "text": "of those vulnerabilities and we have improved and integrate web and generate fing testing",
    "start": "2161960",
    "end": "2168520"
  },
  {
    "text": "framework and propos a targeted vulnerability finding method using multiple",
    "start": "2168520",
    "end": "2173960"
  },
  {
    "text": "method and at last we analysis high risk of execution vulnerabilities we found uh",
    "start": "2173960",
    "end": "2180960"
  },
  {
    "text": "the mainstream process and show how to exploit them uh with a less check than",
    "start": "2180960",
    "end": "2187160"
  },
  {
    "text": "JavaScript okay uh the talk is bound over and we",
    "start": "2187160",
    "end": "2193960"
  },
  {
    "text": "really thanks to the collaborators for this talk thank",
    "start": "2193960",
    "end": "2199480"
  },
  {
    "text": "you so if you have any questions please feel free to ask us in Twitter and we",
    "start": "2204520",
    "end": "2210880"
  },
  {
    "text": "are online and waiting for thank you [Applause]",
    "start": "2210880",
    "end": "2221059"
  }
]