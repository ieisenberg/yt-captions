[
  {
    "text": "blue",
    "start": "15040",
    "end": "17920"
  },
  {
    "text": "can you hear me in the back of the room all right you know there's still some good seats",
    "start": "42559",
    "end": "48719"
  },
  {
    "text": "up front you know those of you paid for the cheap seats you get a chance to upgrade for free today in case you want to move up you know",
    "start": "48719",
    "end": "54320"
  },
  {
    "text": "power convectors they're all available wireless is available anywhere in this room so there are no bad seats",
    "start": "54320",
    "end": "60320"
  },
  {
    "text": "okay hope you're all still awake because i'm not",
    "start": "60320",
    "end": "65760"
  },
  {
    "text": "anyway here we go again a lot of material to cover in this session and",
    "start": "65760",
    "end": "72720"
  },
  {
    "text": "i want to introduce sean claus he's come all the way here from down under",
    "start": "72720",
    "end": "78560"
  },
  {
    "text": "in australia with secure reality is it true that the toilets flush opposite way than they do",
    "start": "78560",
    "end": "85360"
  },
  {
    "text": "up here there's lots of mysteries about australia we're trying to clear up today so anyway uh sean's got a lot of material",
    "start": "85360",
    "end": "91920"
  },
  {
    "text": "to cover so please welcome sean claus",
    "start": "91920",
    "end": "96320"
  },
  {
    "text": "thank you okay so as the introduction just said my name's sean claus i'm from sydney",
    "start": "98400",
    "end": "104000"
  },
  {
    "text": "australia i work with a small consulting company there called sku reality and uh the title of my speech today is",
    "start": "104000",
    "end": "109840"
  },
  {
    "text": "fixing and making holes in binaries the easy the hard and the time consuming",
    "start": "109840",
    "end": "115280"
  },
  {
    "text": "uh okay um but but before i get started on all of that i really should work out what the level what sort of audience i'm",
    "start": "115280",
    "end": "122240"
  },
  {
    "text": "speaking to um so of those in the audience who would be familiar with binary file format",
    "start": "122240",
    "end": "128319"
  },
  {
    "text": "stuff like elf other executable formats pe okay",
    "start": "128319",
    "end": "133360"
  },
  {
    "text": "who would be familiar with disassembly assembly reverse engineering okay okay fair enough",
    "start": "133360",
    "end": "140080"
  },
  {
    "text": "um so as uh as was just said i have a lot of content so i'm gonna have to move through it quite quickly so i apologize",
    "start": "140080",
    "end": "145920"
  },
  {
    "text": "if i speak uh a bit fast so i guess the first thing i ought to cover",
    "start": "145920",
    "end": "153040"
  },
  {
    "text": "is exactly what i plan on talking about today because i'm going to be banding around a lot of terminology",
    "start": "153040",
    "end": "158400"
  },
  {
    "text": "some of it may not be the same as what you guys would normally use it to mean so but",
    "start": "158400",
    "end": "164400"
  },
  {
    "text": "in essence what we're actually talking about is we're just talking about changing the behavior of programs we're",
    "start": "164400",
    "end": "169440"
  },
  {
    "text": "talking about modifying programs but we're not talking about that in the standard way which it's done in general",
    "start": "169440",
    "end": "175120"
  },
  {
    "text": "software is obviously modified by changing the source code recompiling and re-running the executable we're not",
    "start": "175120",
    "end": "180480"
  },
  {
    "text": "going to do that we're going to modify the program directly in its compiled form so we don't need the source code",
    "start": "180480",
    "end": "186400"
  },
  {
    "text": "for the program and we don't need to recompile it and in some cases we don't even need to execute it again",
    "start": "186400",
    "end": "193200"
  },
  {
    "text": "so there are actually two basic types of binary modification which i'm going to be talking about today one is static or executable file",
    "start": "193519",
    "end": "200239"
  },
  {
    "text": "modification so that's when you modify the executable in its on-disk file form",
    "start": "200239",
    "end": "206800"
  },
  {
    "text": "and there's also run time or process modification which is quite interesting where you actually modify the program in",
    "start": "206800",
    "end": "213760"
  },
  {
    "text": "its running running memory image so while the program is running you modify it",
    "start": "213760",
    "end": "219519"
  },
  {
    "text": "so i guess it's a little bit of a glib question but we do have to ask why exactly would we want to modify binaries",
    "start": "220159",
    "end": "226159"
  },
  {
    "text": "well modifying binaries is exactly the same as any other sort of as any other way of modifying",
    "start": "226159",
    "end": "232239"
  },
  {
    "text": "executables or modifying programs you want to do it for the same reasons you want to fix bugs you want to add",
    "start": "232239",
    "end": "237680"
  },
  {
    "text": "functionality at times and sometimes you just want to change the way in which the program currently works",
    "start": "237680",
    "end": "243760"
  },
  {
    "text": "you want to make it behave differently for some reason so then the question becomes why not",
    "start": "243760",
    "end": "250640"
  },
  {
    "text": "just use the source well there are lots of reasons for this and i'm sure um all of you can think of a number but and the",
    "start": "250640",
    "end": "256160"
  },
  {
    "text": "most obvious one is um is that you simply don't have access to it and that's obviously usually the case",
    "start": "256160",
    "end": "262000"
  },
  {
    "text": "with common off-the-shelf software um every enterprise is using a hell of a lot of software to which it",
    "start": "262000",
    "end": "268400"
  },
  {
    "text": "does not have the source and will never get the and and will never get access to so we can use this sort of methodology",
    "start": "268400",
    "end": "274400"
  },
  {
    "text": "and approach to modifying that sort of software but there are other reasons which perhaps aren't thought of as often one",
    "start": "274400",
    "end": "280639"
  },
  {
    "text": "of them is when the source isn't readily available so in that case we may actually have",
    "start": "280639",
    "end": "285680"
  },
  {
    "text": "access to the source it may be something which we wrote you know four years ago and it's been in production ever since",
    "start": "285680",
    "end": "291199"
  },
  {
    "text": "and now we have this problem so we need to fix it but how can we do that when the source code is hidden on a disk",
    "start": "291199",
    "end": "296720"
  },
  {
    "text": "behind everything else in a covered somewhere and no one has any idea where it is so in that sort of situation if we can",
    "start": "296720",
    "end": "302800"
  },
  {
    "text": "modify binaries reasonably easily without an extraordinary amount of work effort then it may actually just be",
    "start": "302800",
    "end": "308400"
  },
  {
    "text": "easier to modify the compiled program than it would be to find the source and finally one case in which you simply",
    "start": "308400",
    "end": "315600"
  },
  {
    "text": "don't have the option of using the source is when you're trying to modify a running program obviously in a lot of",
    "start": "315600",
    "end": "320880"
  },
  {
    "text": "cases i'm sure a lot of you run networks and services which simply can't be down you",
    "start": "320880",
    "end": "326160"
  },
  {
    "text": "have five nines uptime on those services and you can't bring them down so if you need to change them what do you do",
    "start": "326160",
    "end": "332800"
  },
  {
    "text": "you can't just get a new copy of the program and stop the running service and then you know run a new one in this case",
    "start": "332800",
    "end": "338240"
  },
  {
    "text": "you you have no option to restart it you have you don't have the option of restarting the service so you don't have",
    "start": "338240",
    "end": "343600"
  },
  {
    "text": "any other option but modifying the binary in its process form",
    "start": "343600",
    "end": "348800"
  },
  {
    "text": "and i guess one thing about this stuff is that it's always been seen as too hard in the past",
    "start": "349360",
    "end": "354880"
  },
  {
    "text": "it just hasn't been seen as an option people don't think about modifying binaries that they don't think in their",
    "start": "354880",
    "end": "360240"
  },
  {
    "text": "everyday development life if you're a developer you don't think about you know oh why don't we just modify the binary",
    "start": "360240",
    "end": "365280"
  },
  {
    "text": "to fix this problem and that's generally because it's always been seen as too hard it's always been seen as",
    "start": "365280",
    "end": "371039"
  },
  {
    "text": "esoteric just something which no one wants to go near but it's like everything it really does",
    "start": "371039",
    "end": "377039"
  },
  {
    "text": "depend on the value proposition there are times when it's when it is clearly a very good deal to modify a binary as",
    "start": "377039",
    "end": "383919"
  },
  {
    "text": "opposed to any other form of trying to fix your problem and that's because",
    "start": "383919",
    "end": "390400"
  },
  {
    "text": "it's not always hard it can actually be very easy and we're going to cover a number of ways today some of them are",
    "start": "390400",
    "end": "396880"
  },
  {
    "text": "quite easy some of them are quite hard and hopefully",
    "start": "396880",
    "end": "402319"
  },
  {
    "text": "you will also agree with me that some sometimes it can be quite easy to do this and you might consider using it",
    "start": "402319",
    "end": "408160"
  },
  {
    "text": "yourself so one thing i do need to point out is that while i say that some of these methods",
    "start": "408160",
    "end": "414319"
  },
  {
    "text": "are easy all of them do require some coding skill you can't you can't really do this",
    "start": "414319",
    "end": "420240"
  },
  {
    "text": "unless you're at least reasonably proficient with c and have a have a re at least a basic understanding",
    "start": "420240",
    "end": "425520"
  },
  {
    "text": "of what's going on so i guess i ought to explain exactly how this is related to security because",
    "start": "425520",
    "end": "431919"
  },
  {
    "text": "i mean we are at a security conference um there are actually two aspects to this and actually i'm going to speak about",
    "start": "431919",
    "end": "438319"
  },
  {
    "text": "the the second aspect first because in the past binary modification has actually been used quite extensively but",
    "start": "438319",
    "end": "444160"
  },
  {
    "text": "it's been used by the bad guys if you think about viruses trojans backdoors all that sort of stuff that's that's",
    "start": "444160",
    "end": "450560"
  },
  {
    "text": "binary modification for you and that's the bad side of binary modification so so that's the one which people tend",
    "start": "450560",
    "end": "456800"
  },
  {
    "text": "to think of when they think of binary modification and security but",
    "start": "456800",
    "end": "462000"
  },
  {
    "text": "there is another aspect and and that's from the defender's point of view that the defender can use these",
    "start": "462000",
    "end": "467120"
  },
  {
    "text": "techniques just as well as the attacker can to fix the holes which the attacker normally use to normally would use to",
    "start": "467120",
    "end": "473039"
  },
  {
    "text": "get in and they don't have to wait for vendor patches i mean the whole reason that full disclosure is around is",
    "start": "473039",
    "end": "478400"
  },
  {
    "text": "because no one could no one could handle the fact that vendors took so long to get around to patching problems with",
    "start": "478400",
    "end": "484080"
  },
  {
    "text": "this sort of approach you don't need to worry about what the vendor's doing you don't need to wait for the vendor and you can fix the problem yourself",
    "start": "484080",
    "end": "492759"
  },
  {
    "text": "so binary modification is a very wide area there's a lot to talk about there are a lot of platforms architectures",
    "start": "493199",
    "end": "498960"
  },
  {
    "text": "binary file formats and clearly we can't cover all of it today so we're just going to cover a small subset of that",
    "start": "498960",
    "end": "506160"
  },
  {
    "text": "but hopefully a useful subset of that so my speech today is actually going to focus on unix systems binary",
    "start": "506160",
    "end": "512080"
  },
  {
    "text": "modification on unix systems and the techniques which we're going to talk about in particular are going to be very applicable to linux and solaris",
    "start": "512080",
    "end": "518839"
  },
  {
    "text": "systems although oh and in particular we're going to be working on elf binaries so but the",
    "start": "518839",
    "end": "525200"
  },
  {
    "text": "binary file format elf we're going to be working on those sorts of binaries on solaris and linux although most of the",
    "start": "525200",
    "end": "530880"
  },
  {
    "text": "concepts which we're going to talk about are generally applicable elsewhere and some of the concepts and even tools",
    "start": "530880",
    "end": "537760"
  },
  {
    "text": "uh work on other platforms but but that's our focus for today",
    "start": "537760",
    "end": "544640"
  },
  {
    "text": "so now that we've covered the basic introduction to exactly what it is that we're doing today uh what are we going to do now uh where",
    "start": "545839",
    "end": "552959"
  },
  {
    "text": "are we going to go from here well initially we're going to have a quite in-depth discussion on elf and exactly",
    "start": "552959",
    "end": "558880"
  },
  {
    "text": "how elf works what elf is and what an alpha what an elf file consists of and",
    "start": "558880",
    "end": "564160"
  },
  {
    "text": "then we're going to straight into talking about file patching of elf programs and we're going to demonstrate how you can patch an elf file to remove",
    "start": "564160",
    "end": "571279"
  },
  {
    "text": "a vulnerability then we're going to talk about in-memory patching which we can also use to to patch",
    "start": "571279",
    "end": "577519"
  },
  {
    "text": "running elf programs then we're going to talk about library interception which is a rather simple",
    "start": "577519",
    "end": "583040"
  },
  {
    "text": "way of binary modification and finally we're going to be talking about injector so which is",
    "start": "583040",
    "end": "589040"
  },
  {
    "text": "which can be thought of as a runtime version of of that library interception technique",
    "start": "589040",
    "end": "596320"
  },
  {
    "text": "so obviously for what we're talking about today since we're talking about binary modification we're going to need an",
    "start": "596880",
    "end": "602399"
  },
  {
    "text": "understanding of what a binary is and what the structure is of of your typical well of an elf executable here the elf",
    "start": "602399",
    "end": "610080"
  },
  {
    "text": "stands for the executable and linking format it was originally a unix systems labs",
    "start": "610080",
    "end": "615760"
  },
  {
    "text": "specification but it's since been adopted by intel's tools interface standards committee as a portable binary",
    "start": "615760",
    "end": "622320"
  },
  {
    "text": "file format for the intel architecture and since then it's been used in",
    "start": "622320",
    "end": "627680"
  },
  {
    "text": "virtually every recent unix aix hp solaris linux bsd they all use elf and",
    "start": "627680",
    "end": "634640"
  },
  {
    "text": "that's because elf is very powerful as where as we're about to see very flexible",
    "start": "634640",
    "end": "641279"
  },
  {
    "text": "so there are three main types of elf files there are relocatable files and they're",
    "start": "641279",
    "end": "646880"
  },
  {
    "text": "they're object files which consist of data or code and and they are then linked with other relocatable files in",
    "start": "646880",
    "end": "653920"
  },
  {
    "text": "order to become executables or shared objects executables being",
    "start": "653920",
    "end": "659120"
  },
  {
    "text": "being programs which can actually be executed and run by themselves shared objects",
    "start": "659120",
    "end": "665120"
  },
  {
    "text": "being code and data which is meant to be dynamically used by executables at runtime",
    "start": "665120",
    "end": "671680"
  },
  {
    "text": "so it's actually only the last two which are particularly relevant to our discussion today and we're going to focus on executables",
    "start": "671680",
    "end": "680000"
  },
  {
    "text": "the this may be a bit obvious but i just want to want to cover this quickly there are two types of executables",
    "start": "680959",
    "end": "686800"
  },
  {
    "text": "static and dynamic executables static executables are entirely self-contained every bit of code and",
    "start": "686800",
    "end": "692560"
  },
  {
    "text": "data which they require is inside the file and is there so if you take the example of say printf which is a very",
    "start": "692560",
    "end": "699680"
  },
  {
    "text": "complex function and is used in most programs what would actually happen is in a static executable all of the code of",
    "start": "699680",
    "end": "706640"
  },
  {
    "text": "printf everything required by printf is copied into the binary when it's compiled and then you have a completely",
    "start": "706640",
    "end": "712880"
  },
  {
    "text": "self-contained binary including all of the code to printf dynamic executables on the other hand",
    "start": "712880",
    "end": "718720"
  },
  {
    "text": "use external data encoded runtime they're meant to be dynamically linked with code and data which they need and",
    "start": "718720",
    "end": "724640"
  },
  {
    "text": "they do that by using shared libraries which can which as i mentioned previously contained data and code",
    "start": "724640",
    "end": "730399"
  },
  {
    "text": "and are meant to be used at runtime and the the benefit of this approach is that you end up with smaller executables",
    "start": "730399",
    "end": "736560"
  },
  {
    "text": "because you compile your dynamic your your dynamic executable you want printf and all you have to say is that i need",
    "start": "736560",
    "end": "742880"
  },
  {
    "text": "libc at runtime and i need printf from libsy at runtime and then when you're",
    "start": "742880",
    "end": "748000"
  },
  {
    "text": "loaded they're into memory the shared library is also loaded into memory and you can work out where printf is and use",
    "start": "748000",
    "end": "753839"
  },
  {
    "text": "it rather than having to have it inside your executable and that also results in less disk and memory usage because the",
    "start": "753839",
    "end": "760480"
  },
  {
    "text": "executables are smaller so so there's less disk usage and there's less memory use because there's this one shared",
    "start": "760480",
    "end": "765839"
  },
  {
    "text": "library which can be mapped into multiple processes at once and that's why dynamic executables are",
    "start": "765839",
    "end": "771360"
  },
  {
    "text": "much more common in fact on a typical unix system you'll be lucky to find many static executables at all and all the vendors",
    "start": "771360",
    "end": "778320"
  },
  {
    "text": "recommend that you don't ever use them so almost all of our discussion is actually going to be related to dynamic",
    "start": "778320",
    "end": "784320"
  },
  {
    "text": "executables the l file format describes the two",
    "start": "784320",
    "end": "789600"
  },
  {
    "text": "separate views of a file there's a linking view and a loading view the linking the linking view is",
    "start": "789600",
    "end": "795839"
  },
  {
    "text": "exclusively for use at static link time so it's used when you're combining relocatable files or relocatable files",
    "start": "795839",
    "end": "802959"
  },
  {
    "text": "with shared objects or relocatable files to create an executable it's used by the linker to learn all of the information",
    "start": "802959",
    "end": "808959"
  },
  {
    "text": "it needs to put all the files together to create an executable or a shared object the loading view on the other hand is",
    "start": "808959",
    "end": "815200"
  },
  {
    "text": "meant for use by the operating system and it's used exclusively at runtime to load and execute the program to begin to",
    "start": "815200",
    "end": "822480"
  },
  {
    "text": "start it working or in the case of a shared of a shared library shared object in order to map it into memory so that",
    "start": "822480",
    "end": "827760"
  },
  {
    "text": "it can be used so so this is what a typical l file may",
    "start": "827760",
    "end": "832800"
  },
  {
    "text": "actually look like every other file has an elf header and the off header provides a pointer to the",
    "start": "832800",
    "end": "838399"
  },
  {
    "text": "section headers and the program headers the section headers describe the linking view and the program headers describe",
    "start": "838399",
    "end": "844160"
  },
  {
    "text": "the loading view the and as you can see in general there will be many more section headers and there",
    "start": "844160",
    "end": "849760"
  },
  {
    "text": "will be program headers because the section headers are a meaningful view and the program headers only have to",
    "start": "849760",
    "end": "855279"
  },
  {
    "text": "describe enough so that the file is so that the file can be loaded into memory and each of the headers refers to",
    "start": "855279",
    "end": "860399"
  },
  {
    "text": "offsets inside the file now so taking a more in-depth look at",
    "start": "860399",
    "end": "866240"
  },
  {
    "text": "the linking view um",
    "start": "866240",
    "end": "871839"
  },
  {
    "text": "the the linking view divides the ex divides the executable into meaningful sections uh each section has a name and a type",
    "start": "872480",
    "end": "880399"
  },
  {
    "text": "and it can have a requested memory location if that section is meant to be loaded into memory when the program is",
    "start": "880399",
    "end": "885519"
  },
  {
    "text": "run and it can and it has permissions if it's meant to be loaded into memory when the executable is run",
    "start": "885519",
    "end": "891120"
  },
  {
    "text": "and that they can indicate whether the section should be writable or executable in memory",
    "start": "891120",
    "end": "896959"
  },
  {
    "text": "uh so so some common examples there are down the left interp dynamic dynasium etc",
    "start": "896959",
    "end": "902880"
  },
  {
    "text": "uh but but here are some important sections which will come in useful during our discussion the dot interp",
    "start": "902880",
    "end": "909120"
  },
  {
    "text": "section contains a string representing the name of the requested dynamic linker for this",
    "start": "909120",
    "end": "914480"
  },
  {
    "text": "executable and we'll discuss the dynamic linker in much more detail shortly the dynamic section contains all of the",
    "start": "914480",
    "end": "920480"
  },
  {
    "text": "dynamic linking information for the executable and that's used by the dynamic linker so",
    "start": "920480",
    "end": "926000"
  },
  {
    "text": "that it can link the executable at runtime uh the symbol table and the dynamic",
    "start": "926000",
    "end": "931279"
  },
  {
    "text": "symbol table that they contain all of the symbols in the executable the symbol table contains the local symbols used",
    "start": "931279",
    "end": "937360"
  },
  {
    "text": "only inside the program and the dynamic symbol table contains the imported or exported symbols",
    "start": "937360",
    "end": "943199"
  },
  {
    "text": "the string tab and the dynamic string tab are the partners to the sim tab and the dynamics dynamic symbol table and",
    "start": "943199",
    "end": "950720"
  },
  {
    "text": "basically they just hold strings which are used to describe the names of all of the symbols",
    "start": "950720",
    "end": "955759"
  },
  {
    "text": "the plt contains the procedure linkage table which we'll talk about shortly",
    "start": "955759",
    "end": "962160"
  },
  {
    "text": "the the relocation sections dot relocation dot something describes the relocations over a particular section",
    "start": "962160",
    "end": "968720"
  },
  {
    "text": "and we'll again we'll discuss them more shortly and finally the um the simplest and the most obvious sections are the",
    "start": "968720",
    "end": "975199"
  },
  {
    "text": "other dot tech section which contains all of the code for the executable the actual uh machine code for the",
    "start": "975199",
    "end": "980639"
  },
  {
    "text": "executable and the data section which contains initial pre-initialized data",
    "start": "980639",
    "end": "987480"
  },
  {
    "text": "um and then we have the data section as i said which contains initialized data",
    "start": "1001440",
    "end": "1008319"
  },
  {
    "text": "if you look at the linking view what you'll realize is that as i said some sections don't have a memory",
    "start": "1008959",
    "end": "1014480"
  },
  {
    "text": "location and what that means is that they're not meant to be loaded into memory at runtime those sections are",
    "start": "1014480",
    "end": "1019680"
  },
  {
    "text": "simply for information the information which is used by the linker to create the relocate to create the executables",
    "start": "1019680",
    "end": "1025678"
  },
  {
    "text": "or the shared libraries or they just contain debugging information or other useful information from uh from",
    "start": "1025679",
    "end": "1032319"
  },
  {
    "text": "from a system point of view but that's actually the difference between the link time and the runtime",
    "start": "1032319",
    "end": "1038959"
  },
  {
    "text": "the the loading the loading view doesn't describe any superfluous information which isn't required to actually load",
    "start": "1038959",
    "end": "1045360"
  },
  {
    "text": "and execute the the program and that actually makes it much much simpler and it divides the executable into segments",
    "start": "1045360",
    "end": "1052000"
  },
  {
    "text": "and each segment is is either a load segment or an informative segment",
    "start": "1052000",
    "end": "1058799"
  },
  {
    "text": "a load segment describes a portion of the file which is to be mapped into memory when the executable is",
    "start": "1058799",
    "end": "1064840"
  },
  {
    "text": "run and and the other types of segments which are informative segments uh describe the",
    "start": "1064840",
    "end": "1072000"
  },
  {
    "text": "location of important data at runtime such that the system can find it",
    "start": "1072000",
    "end": "1077280"
  },
  {
    "text": "so each segment has a simple type so if you look on the left there you'll see some simple types of interp load and",
    "start": "1077280",
    "end": "1082720"
  },
  {
    "text": "dynamic they have a requested memory location at runtime",
    "start": "1082720",
    "end": "1088080"
  },
  {
    "text": "and they have permissions read writer execute when they're when they're mapped into memory and they have a size which",
    "start": "1088080",
    "end": "1094559"
  },
  {
    "text": "can specify two different sizes one is their size in the file and one is the size in memory where the system will pad",
    "start": "1094559",
    "end": "1101280"
  },
  {
    "text": "it in memory and we'll discuss that more shortly",
    "start": "1101280",
    "end": "1106559"
  },
  {
    "text": "so some of the more useful segment types for our discussion today uh load segments which as i described",
    "start": "1106720",
    "end": "1111840"
  },
  {
    "text": "describe a portion of the file to be loaded into memory the interp segment which is actually",
    "start": "1111840",
    "end": "1118080"
  },
  {
    "text": "appointed to the to the dynamic linker string specifying the requested dynamic linker for this executable",
    "start": "1118080",
    "end": "1123840"
  },
  {
    "text": "and as you would realize that's actually the interp section so there's this informative segment which is actually a pointer to what",
    "start": "1123840",
    "end": "1130240"
  },
  {
    "text": "would normally be called the inter section and it's the same with the dynamic segment it contains a pointer to the",
    "start": "1130240",
    "end": "1136720"
  },
  {
    "text": "dynamic linking information or the dynamic section",
    "start": "1136720",
    "end": "1141200"
  },
  {
    "text": "so what that actually means is that if you look at if you look at trying to match up the two views of an executable",
    "start": "1141919",
    "end": "1147520"
  },
  {
    "text": "what you'll see is is that you'll have some sections which happen to be meant to be mapped contiguously into",
    "start": "1147520",
    "end": "1153840"
  },
  {
    "text": "memory and they also and they also need to have the same permissions so in this case you might see the interp",
    "start": "1153840",
    "end": "1160000"
  },
  {
    "text": "dynamic symbol table and the text none of that needs to be writable so they may",
    "start": "1160000",
    "end": "1165039"
  },
  {
    "text": "all be combined into one load segment with read and execute permissions in addition because the in the location",
    "start": "1165039",
    "end": "1171440"
  },
  {
    "text": "of the interp string is needed at run time there may be an interp segment which is pointing where where the interrupt",
    "start": "1171440",
    "end": "1177520"
  },
  {
    "text": "string is and it's the same with the data and dynamic as you can see below there they could be combined into this time a",
    "start": "1177520",
    "end": "1183919"
  },
  {
    "text": "writable segment but not executable and again there's an informative segment to point to the dynamic",
    "start": "1183919",
    "end": "1190080"
  },
  {
    "text": "table and finally as i mentioned before you've got purely informative sections stuff like the",
    "start": "1190080",
    "end": "1196000"
  },
  {
    "text": "string tab and the symbol table local symbol table neither of which are needed at runtime so they",
    "start": "1196000",
    "end": "1202000"
  },
  {
    "text": "simply don't map to any segment so portions of the executable will not map to to a segment but in general all",
    "start": "1202000",
    "end": "1208960"
  },
  {
    "text": "of the executable will be mapped to our section so what that actually means is that is",
    "start": "1208960",
    "end": "1214480"
  },
  {
    "text": "that all of the meaning or all of the information which is provided inside the section table or the linking view is",
    "start": "1214480",
    "end": "1220480"
  },
  {
    "text": "completely irrelevant in the loading view it's absolutely not needed and what that means is that the section",
    "start": "1220480",
    "end": "1226000"
  },
  {
    "text": "information can be removed entirely from an executable and that executable will continue to run",
    "start": "1226000",
    "end": "1231679"
  },
  {
    "text": "there'll be no problems loading and executing it and this is actually a pretty good way to kill any tools which is",
    "start": "1231679",
    "end": "1238960"
  },
  {
    "text": "the gnu lib bfd any of you guys who are familiar with tools like gdb and obj don't which do use that library once the",
    "start": "1238960",
    "end": "1245360"
  },
  {
    "text": "section information is removed those tools will not work they all rely on section information",
    "start": "1245360",
    "end": "1251760"
  },
  {
    "text": "one interesting point one interesting thing which i want to point out following our discussion is that there are lots of really cool",
    "start": "1252640",
    "end": "1258960"
  },
  {
    "text": "things which you could do without files lots of really amazing twists and turns which you could make but while elf is a really flexible file",
    "start": "1258960",
    "end": "1266320"
  },
  {
    "text": "format the operating system loaders the routines which load these executables and start them running aren't",
    "start": "1266320",
    "end": "1272159"
  },
  {
    "text": "very flexible and that means that they suffer from a lot of bugs and idiosyncrasies and there",
    "start": "1272159",
    "end": "1277520"
  },
  {
    "text": "are a lot of valid l-files which won't load and execute and there are a lot of completely",
    "start": "1277520",
    "end": "1283280"
  },
  {
    "text": "invalid l-files which will load and execute on these through these loaders through these",
    "start": "1283280",
    "end": "1289120"
  },
  {
    "text": "buggy operating system loaders so the basic process of loading and executing an",
    "start": "1289120",
    "end": "1294960"
  },
  {
    "text": "elf executable is uh is basically the first thing the operating system does is it opens the file obviously then it",
    "start": "1294960",
    "end": "1300960"
  },
  {
    "text": "loops through all of the segment headers and it looks for any load segments once it's found them it memory maps them at",
    "start": "1300960",
    "end": "1307280"
  },
  {
    "text": "the specified location inside the processor's memory image and then it finds the interps the interp",
    "start": "1307280",
    "end": "1313760"
  },
  {
    "text": "segment which contains the string specifying the dynamic linker it loads the dynamic linker",
    "start": "1313760",
    "end": "1318960"
  },
  {
    "text": "and passes it control specifying some information about the executable where it can find the segment table of the",
    "start": "1318960",
    "end": "1325280"
  },
  {
    "text": "executable where it can find the dynamic table of the executable so we should talk about the dynamic",
    "start": "1325280",
    "end": "1331360"
  },
  {
    "text": "linker and loader it's going to come in quite useful later on when we start modifying executables",
    "start": "1331360",
    "end": "1337280"
  },
  {
    "text": "the dynamic linker is responsible for handling all of the runtime needs of the executable all of the shared library",
    "start": "1337280",
    "end": "1343039"
  },
  {
    "text": "needs of the executable and to do that it retrieves information all of its information from the dynamic",
    "start": "1343039",
    "end": "1348240"
  },
  {
    "text": "segment and once it's found the information in the dynamic segment it can then load all of",
    "start": "1348240",
    "end": "1354159"
  },
  {
    "text": "the shared libraries which are needed by the executable into memory and then it modifies the executable such",
    "start": "1354159",
    "end": "1360480"
  },
  {
    "text": "that it can access all of the resources which it needs from those libraries and we'll explain more about",
    "start": "1360480",
    "end": "1367039"
  },
  {
    "text": "exactly how that happens quite shortly so what's actually in the dynamic sectional segment it's a pretty simple",
    "start": "1367039",
    "end": "1374400"
  },
  {
    "text": "table it uh which contains simple records with critical data about how the",
    "start": "1374400",
    "end": "1380000"
  },
  {
    "text": "executable should be should be dynamically loaded and it allows the dynamic linker to quickly find out all of the information",
    "start": "1380000",
    "end": "1385760"
  },
  {
    "text": "it needs about the executable meaning that the dynamic linker doesn't need the section table or",
    "start": "1385760",
    "end": "1391360"
  },
  {
    "text": "indeed the the segment table in most cases each record consists of a simple type",
    "start": "1391360",
    "end": "1396960"
  },
  {
    "text": "which is called a tag and a value or a pointer so some useful tags which will which we",
    "start": "1396960",
    "end": "1403919"
  },
  {
    "text": "will be interested in today a dt needed tag which contains the offset inside the dynamics string table",
    "start": "1403919",
    "end": "1411120"
  },
  {
    "text": "of the name of a required shared library the dt a dt rail entry contains the",
    "start": "1411120",
    "end": "1416880"
  },
  {
    "text": "address of relocation entries and we'll discuss relocation entries shortly dt jump rail which contains the address",
    "start": "1416880",
    "end": "1422799"
  },
  {
    "text": "of relocation entries but only those which are relevant to the plt and the dt debug entry which contains a",
    "start": "1422799",
    "end": "1428720"
  },
  {
    "text": "pointer to dynamic sorry to debug information which is provided by the dynamic linker and that will come in",
    "start": "1428720",
    "end": "1434640"
  },
  {
    "text": "quite useful again with uh with some of the later tools which we'll be using",
    "start": "1434640",
    "end": "1440000"
  },
  {
    "text": "so looking at the final three steps of loading and executing an alpha executable you map in the shared",
    "start": "1440000",
    "end": "1445200"
  },
  {
    "text": "libraries by reading all the dt needed entries so you find those shared objects and you map them in",
    "start": "1445200",
    "end": "1450320"
  },
  {
    "text": "then you add those libraries to what's called a link map and then you store a pointer to the link map inside the",
    "start": "1450320",
    "end": "1456840"
  },
  {
    "text": "debug structure which is referenced by the dt debug entry and then you go on to perform relocations",
    "start": "1456840",
    "end": "1464880"
  },
  {
    "text": "the relocations tell the dynamic linker how to rewrite portions of the executable",
    "start": "1464880",
    "end": "1470320"
  },
  {
    "text": "such that the executable can then refer to external resources and each each basically each",
    "start": "1470320",
    "end": "1476320"
  },
  {
    "text": "relocation specifies a dynamic symbol table entry to which it relates and then",
    "start": "1476320",
    "end": "1481760"
  },
  {
    "text": "the dynamic linker comes through and performs all of these relocations but based on whatever symbol is specified",
    "start": "1481760",
    "end": "1488880"
  },
  {
    "text": "and we need the relocations so that the program can use data which is in shared libraries because obviously",
    "start": "1488880",
    "end": "1495039"
  },
  {
    "text": "when the program was compiled the it cannot know where those things are going to be when the program was",
    "start": "1495039",
    "end": "1500720"
  },
  {
    "text": "compiled it couldn't know where printf was going to be in memory when it was when it was loaded and executed where",
    "start": "1500720",
    "end": "1506640"
  },
  {
    "text": "libc was going to be mapped so that's where the procedure linkage table comes in handy",
    "start": "1506640",
    "end": "1512960"
  },
  {
    "text": "it's stored in the plt section and it allows the executables to call functions which aren't present",
    "start": "1512960",
    "end": "1518720"
  },
  {
    "text": "at compile time so for example printf like we were talking about it's basically just a pretty simple set",
    "start": "1518720",
    "end": "1525360"
  },
  {
    "text": "of function stubs i'm not going to explain what the function stubs do when before they've",
    "start": "1525360",
    "end": "1531039"
  },
  {
    "text": "been relocated but basically it's just a bit of code and wherever the program wants to use printf instead it makes a",
    "start": "1531039",
    "end": "1537760"
  },
  {
    "text": "call to this function stub and later on the dynamic linker actually rewrites these function stubs based on",
    "start": "1537760",
    "end": "1543440"
  },
  {
    "text": "relocations such that they then point to the real location of printf so you do a call to the stub and then the stub does",
    "start": "1543440",
    "end": "1549840"
  },
  {
    "text": "a jump to printf to where the real printf is and that actually looks exactly like that once the program calls",
    "start": "1549840",
    "end": "1556000"
  },
  {
    "text": "the plt stub the printf stub has been modified by the dynamic linker and it makes just a jump to the real printf in",
    "start": "1556000",
    "end": "1562720"
  },
  {
    "text": "libsy the global offset table i'm not going to talk about it much but it's pretty much",
    "start": "1562720",
    "end": "1568080"
  },
  {
    "text": "exactly the same thing except for data stuff like standard error and erno",
    "start": "1568080",
    "end": "1574000"
  },
  {
    "text": "and it's actually referenced by the plt on the intel architecture which is why people often confuse the two people",
    "start": "1574000",
    "end": "1580240"
  },
  {
    "text": "often talk about attacking the got in particular you'll see a lot of people who've written format string exploits",
    "start": "1580240",
    "end": "1586480"
  },
  {
    "text": "and are talking about attacking the got when in reality they're really attacking the plt",
    "start": "1586480",
    "end": "1593760"
  },
  {
    "text": "and i just want to talk quickly about the dt debug record because it comes in so useful basically it contains debugging",
    "start": "1594480",
    "end": "1601840"
  },
  {
    "text": "information from the dynamic linker which debuggers normally use to work out the the contents of the program",
    "start": "1601840",
    "end": "1608559"
  },
  {
    "text": "in particular for our use it contains a pointer to a link map which describes all of the memory layout of the process",
    "start": "1608559",
    "end": "1614799"
  },
  {
    "text": "including which which files are loaded into the executable and where they're loaded and that will come in",
    "start": "1614799",
    "end": "1620559"
  },
  {
    "text": "useful when we talk about runtime process modification",
    "start": "1620559",
    "end": "1626440"
  },
  {
    "text": "so finally we actually move on to to some real stuff we actually move on to modifying some executables",
    "start": "1626799",
    "end": "1633039"
  },
  {
    "text": "file patching file patching is the most common form of executable modification and it's been around for a very long",
    "start": "1633039",
    "end": "1638400"
  },
  {
    "text": "time viruses use it all the time basically it involves statically",
    "start": "1638400",
    "end": "1643679"
  },
  {
    "text": "modifying the code as it's represented inside the executable file and your basic needs are that you",
    "start": "1643679",
    "end": "1649919"
  },
  {
    "text": "generally want to take the existing code and then at some point you want to break",
    "start": "1649919",
    "end": "1655440"
  },
  {
    "text": "the flow of execution you want to jump out into your new code which does something really interesting different",
    "start": "1655440",
    "end": "1660799"
  },
  {
    "text": "to what the program used to do before and then you want to jump back to somewhere interesting again once",
    "start": "1660799",
    "end": "1666640"
  },
  {
    "text": "you've completed your new code one of the problems with file patching and the reason why generally it's not",
    "start": "1666640",
    "end": "1673440"
  },
  {
    "text": "particularly common is that you do need to understand the existing code quite well and that can",
    "start": "1673440",
    "end": "1678799"
  },
  {
    "text": "involve some disassembly and reverse engineering of the target executable and",
    "start": "1678799",
    "end": "1684960"
  },
  {
    "text": "in addition your new code usually has to be written in assembly although sometimes you can write it in c if you have enough if you have enough space and",
    "start": "1684960",
    "end": "1691200"
  },
  {
    "text": "are really suicidal so the question then becomes where are we going to put the additional code",
    "start": "1691200",
    "end": "1698399"
  },
  {
    "text": "one obvious thing is to just override existing code which you know isn't going to be used but the question is how do",
    "start": "1698399",
    "end": "1703440"
  },
  {
    "text": "you know existing code which isn't ever used it can be quite difficult to identify where you can successfully patch the",
    "start": "1703440",
    "end": "1709840"
  },
  {
    "text": "program without killing it so in general that's something we don't want to we don't want to do we're after",
    "start": "1709840",
    "end": "1714960"
  },
  {
    "text": "a generalized sort of way of doing this one option is to use the section padding there is a small amount of padding",
    "start": "1714960",
    "end": "1720159"
  },
  {
    "text": "between the sections but generally not enough and worse you have to find a section which happens to be an executable segment",
    "start": "1720159",
    "end": "1726799"
  },
  {
    "text": "at least that's on any architecture except the intel architecture given that ia32 if memory is readable then it's",
    "start": "1726799",
    "end": "1733279"
  },
  {
    "text": "executable we can also add a segment which initially seems like an incredibly cool",
    "start": "1733279",
    "end": "1739200"
  },
  {
    "text": "idea because if we just add a segment we can just specify the we can add a portion to the file and then just have",
    "start": "1739200",
    "end": "1744559"
  },
  {
    "text": "that portion of the file mapped in and have as much space as we want but there are a lot of reasons why that isn't a",
    "start": "1744559",
    "end": "1750240"
  },
  {
    "text": "particularly good approach the code is very messy because there are a lot of elf loader bugs and issues which to do",
    "start": "1750240",
    "end": "1757279"
  },
  {
    "text": "with this so if you do do it um you'll find a lot of issues so that's not that's not the approach we've taken",
    "start": "1757279",
    "end": "1763600"
  },
  {
    "text": "today instead what we're going to do is we're going to extend an existing segment basically we're just going to add some",
    "start": "1763600",
    "end": "1769600"
  },
  {
    "text": "more space into the file and extend that segment mapping such that we can have as much space as we like and i'll",
    "start": "1769600",
    "end": "1775360"
  },
  {
    "text": "explain that more shortly but it's but it's quite useful and there are lots of other methods if",
    "start": "1775360",
    "end": "1781200"
  },
  {
    "text": "you're interested in finding some other methods and i suggest you examine unix viruses silvio cesar's work",
    "start": "1781200",
    "end": "1788159"
  },
  {
    "text": "there's a lot of work out there on on how to add some space to the executable",
    "start": "1788159",
    "end": "1793440"
  },
  {
    "text": "but the method which we're using is extending a segment so if you look at basically what happens",
    "start": "1793440",
    "end": "1798640"
  },
  {
    "text": "is that we have this portion of the file which is a few sections and they've been mapped to a segment then what we do is",
    "start": "1798640",
    "end": "1803760"
  },
  {
    "text": "we just insert some blank space in the middle of the file at the at the end of that segment pushing down all of the",
    "start": "1803760",
    "end": "1809600"
  },
  {
    "text": "sections following the executable sorry following that segment now previous i wouldn't you can imagine",
    "start": "1809600",
    "end": "1816799"
  },
  {
    "text": "that in a lot of cases that would cause lots of problems particularly if the sections",
    "start": "1816799",
    "end": "1822320"
  },
  {
    "text": "linked to each other using absolute offsets or or something like that but luckily elf doesn't work that way in",
    "start": "1822320",
    "end": "1829279"
  },
  {
    "text": "general sections refer to each other using an offset relative to the section number so if we insert space like this",
    "start": "1829279",
    "end": "1836640"
  },
  {
    "text": "there is no problem um even though we've disturbed the layout of the file we haven't disturbed it in",
    "start": "1836640",
    "end": "1841840"
  },
  {
    "text": "such a way that it will prevent the that it will prevent the program working or cause any difficulties",
    "start": "1841840",
    "end": "1847840"
  },
  {
    "text": "and so basically we can just extend this segment as far as we want and have as much virtually addressable space as we want",
    "start": "1847840",
    "end": "1854960"
  },
  {
    "text": "so let's actually take a look at a demo of that",
    "start": "1855039",
    "end": "1861080"
  },
  {
    "text": "so this is just going to be a simple demonstration and for the demonstration i'm actually going to use a sample program the reason i'm going to use a",
    "start": "1874080",
    "end": "1880159"
  },
  {
    "text": "pretty trivial sample program is that although the methods are quite applicable to much larger software we do",
    "start": "1880159",
    "end": "1885919"
  },
  {
    "text": "have to have an understanding of the software and it will be much easier from a reverse engineering and disassembly point of view to understand",
    "start": "1885919",
    "end": "1891919"
  },
  {
    "text": "this to understand this simple executable than it would be if i brought in some some big server software or",
    "start": "1891919",
    "end": "1897440"
  },
  {
    "text": "something so let's take a look at our sample program it's just called",
    "start": "1897440",
    "end": "1902640"
  },
  {
    "text": "login demo and all it does is it brings up a username prompt password prompt doesn't actually do",
    "start": "1902640",
    "end": "1909120"
  },
  {
    "text": "anything with it but i mean i guess if we were looking at the at this from a security perspective one of the first one of the first things",
    "start": "1909120",
    "end": "1915519"
  },
  {
    "text": "we might try and it never works but in this case it's going to is we might do",
    "start": "1915519",
    "end": "1921200"
  },
  {
    "text": "that and enter in a really long username and a really long password",
    "start": "1921200",
    "end": "1926640"
  },
  {
    "text": "unsurprisingly given that this is a demonstration the program segmentation faults so we immediately assume that there must",
    "start": "1926640",
    "end": "1932080"
  },
  {
    "text": "be some sort of problem inside this executable with handling long usernames and passwords",
    "start": "1932080",
    "end": "1938159"
  },
  {
    "text": "so what we're going to do in order to get a better understanding we're going to use a tool called ltrace on the executable for those of you who aren't",
    "start": "1938159",
    "end": "1944000"
  },
  {
    "text": "familiar with it l-trace traces all of the shared library calls which are made by the executable and prints them out on",
    "start": "1944000",
    "end": "1950000"
  },
  {
    "text": "the screen as they're happening and by using the dash i option i'm also asking it to show me the address from which the",
    "start": "1950000",
    "end": "1956240"
  },
  {
    "text": "function was called so if i run ltrace i see a couple of libsy setup functions then i see an f",
    "start": "1956240",
    "end": "1962960"
  },
  {
    "text": "puts in order to put the username prompt f flush and i see an f gets which is waiting for my input so i enter in a",
    "start": "1962960",
    "end": "1969279"
  },
  {
    "text": "really long username and i call see a call to australian for",
    "start": "1969279",
    "end": "1975120"
  },
  {
    "text": "some reason not sure then i see what's almost certainly going to be the culprit in our particular investigation i see a bare string copy",
    "start": "1975120",
    "end": "1981279"
  },
  {
    "text": "with what looks like our long input our long username into a variable on the stack at bff418",
    "start": "1981279",
    "end": "1988880"
  },
  {
    "text": "and then i see another call to f puts for the password prompt so if i enter in a",
    "start": "1988880",
    "end": "1993919"
  },
  {
    "text": "long password i see another quartus trillion for some reason once more a bare string copy to a",
    "start": "1993919",
    "end": "2000159"
  },
  {
    "text": "different buffer on the stack and finally i see a segmentation fault because obviously i've overwritten something important on the stack and in",
    "start": "2000159",
    "end": "2006880"
  },
  {
    "text": "this case i can sorry",
    "start": "2006880",
    "end": "2010320"
  },
  {
    "text": "yeah but that wouldn't matter sorry the question was was login demo",
    "start": "2013440",
    "end": "2019120"
  },
  {
    "text": "compiled with debugging and yes it was but it wouldn't matte in terms of ltrace working that wouldn't",
    "start": "2019120",
    "end": "2024399"
  },
  {
    "text": "have any effect ltrace works on on programs whether or not they have debugging information in them",
    "start": "2024399",
    "end": "2029440"
  },
  {
    "text": "um so finally i see a segmentation fault and i can tell that i've overwritten save dip because well we've got the",
    "start": "2029440",
    "end": "2035279"
  },
  {
    "text": "telltale 4141 4141 over in the instruction location",
    "start": "2035279",
    "end": "2041760"
  },
  {
    "text": "portion of the output which is obviously full capitalized so let's take a closer look at exactly",
    "start": "2041760",
    "end": "2047039"
  },
  {
    "text": "what's going on inside this executable and then what we're going to do is we're going to fix it",
    "start": "2047039",
    "end": "2052720"
  },
  {
    "text": "okey dokey so if you look back here we can see that the first string copy happens at 804 8562",
    "start": "2056720",
    "end": "2063839"
  },
  {
    "text": "if we look at that in this particular i can't see it",
    "start": "2063839",
    "end": "2069839"
  },
  {
    "text": "oh anyway if you look at 804 8562 there there's actually an ad instruction so clearly the output from all traces",
    "start": "2069839",
    "end": "2076878"
  },
  {
    "text": "actually wrong it shows the instruct it shows the return address rather than the address from which the function was called",
    "start": "2076879",
    "end": "2082960"
  },
  {
    "text": "so if we look at 804855d that's where the real call to string copy happens if you look immediately above it then then",
    "start": "2082960",
    "end": "2089599"
  },
  {
    "text": "that's where the destination operand is being pushed onto the stack and the destination operand is ebp -10 so that's",
    "start": "2089599",
    "end": "2095440"
  },
  {
    "text": "the base pointer on the stack minus 10 in hex so that's 16 bytes that buffer cannot by definition be larger than 16",
    "start": "2095440",
    "end": "2101760"
  },
  {
    "text": "bytes so clearly that string copy should not be allowing any more than 16 bytes to be",
    "start": "2101760",
    "end": "2106960"
  },
  {
    "text": "copied into that target buffer if we look down further for the second string copy we can see it there at",
    "start": "2106960",
    "end": "2112960"
  },
  {
    "text": "80485c9 and again we can see the target operand there this time it's ebp minus 20 in hex",
    "start": "2112960",
    "end": "2119200"
  },
  {
    "text": "so it's ebp minus 32 and since we know that the other buffer was at ebp minus 10",
    "start": "2119200",
    "end": "2124800"
  },
  {
    "text": "we automatically know that once again this buffer cannot be larger than 16 bytes",
    "start": "2124800",
    "end": "2129839"
  },
  {
    "text": "so once again this this string copy should not be allowing more than 16 bytes to be copied into the into the",
    "start": "2129839",
    "end": "2135440"
  },
  {
    "text": "destination buffer so what we're actually going to do is we're actually going to make that happen we're going to",
    "start": "2135440",
    "end": "2140480"
  },
  {
    "text": "make sure that these are length limiting string copies to a maximum of 16 bytes to do that",
    "start": "2140480",
    "end": "2146240"
  },
  {
    "text": "the first thing i have to do is add some space to do that i'm going to use a tool called ad space which is included on the",
    "start": "2146240",
    "end": "2151280"
  },
  {
    "text": "conference cd basically it does exactly what we talked about it extends a segment and and adds as much space as you",
    "start": "2151280",
    "end": "2157599"
  },
  {
    "text": "require to the executable so i'll just do that now",
    "start": "2157599",
    "end": "2162400"
  },
  {
    "text": "the source is included on the conference cd",
    "start": "2163359",
    "end": "2167800"
  },
  {
    "text": "okay so i asked ad space to create a new executable called fixed login demo and i and which is a copy of login demo",
    "start": "2182000",
    "end": "2188960"
  },
  {
    "text": "but has an additional one that one that some additional 1k of space added to it to do that it extended one of the",
    "start": "2188960",
    "end": "2195040"
  },
  {
    "text": "segments and it created me new virtual storage at 804.9754 if i take a look at that using red elf",
    "start": "2195040",
    "end": "2201040"
  },
  {
    "text": "and i take a look at the segments in the old executable",
    "start": "2201040",
    "end": "2206400"
  },
  {
    "text": "by the way if you guys aren't familiar with redolph it's it's a another tool included with the bin utils it can be",
    "start": "2207119",
    "end": "2213119"
  },
  {
    "text": "used for examining elf files and it's much much better than obj dump so if any of you guys were thinking about that",
    "start": "2213119",
    "end": "2220160"
  },
  {
    "text": "this is the tool to be used so if i look at the old login demo i can",
    "start": "2220160",
    "end": "2226000"
  },
  {
    "text": "see the two load segments there and we can see that one of them was size",
    "start": "2226000",
    "end": "2231119"
  },
  {
    "text": "642 in hex in memory that's readable and executable so that contains the code and then we can see the second segment which",
    "start": "2231119",
    "end": "2237359"
  },
  {
    "text": "was of size f0 in the file and 110 in memory and i'll explain more the",
    "start": "2237359",
    "end": "2242720"
  },
  {
    "text": "difference shortly but it's rewritable now if i look at the new one",
    "start": "2242720",
    "end": "2248319"
  },
  {
    "text": "this time i have two segments but as you can see the second segment has now been pushed it's now 510",
    "start": "2251440",
    "end": "2257839"
  },
  {
    "text": "in hex length and it's now rewritable and executable it's been modified so we now we now have",
    "start": "2257839",
    "end": "2263680"
  },
  {
    "text": "a new executable we've got some space what are we going to put in there well we're just going to put in some trivial code to fix the problem",
    "start": "2263680",
    "end": "2270480"
  },
  {
    "text": "if i just",
    "start": "2270480",
    "end": "2273119"
  },
  {
    "text": "okay um this is just some pretty pretty bad um assembly to patch",
    "start": "2280400",
    "end": "2285680"
  },
  {
    "text": "this problem basically what it does is is we have this call stub as we were talking about before the idea is to",
    "start": "2285680",
    "end": "2291040"
  },
  {
    "text": "break the current chain of execution go somewhere else do something better and then come back so the call stub is meant to be put over",
    "start": "2291040",
    "end": "2297359"
  },
  {
    "text": "the existing call to string copy and what it does instead is it calls the code which is at 804 9754 which as",
    "start": "2297359",
    "end": "2304400"
  },
  {
    "text": "you'll note is the location of the space which we added to the executable and what's meant to go there is this new",
    "start": "2304400",
    "end": "2310800"
  },
  {
    "text": "code section below and all the new code section does is change the existing call to string copy",
    "start": "2310800",
    "end": "2316800"
  },
  {
    "text": "instead it now calls something called astrl copy which is just an assembly version of strl copy which i hacked up",
    "start": "2316800",
    "end": "2324320"
  },
  {
    "text": "so you can see all it does is it pushes onto the stack the usual parameters destination source and then the string",
    "start": "2324320",
    "end": "2330640"
  },
  {
    "text": "length which is specified as a maximum of 16 bytes and then it calls off to 804 9810 which",
    "start": "2330640",
    "end": "2336720"
  },
  {
    "text": "is where it expects astral copy to be and then the problem should be fixed because it then just jump jumps back to",
    "start": "2336720",
    "end": "2342960"
  },
  {
    "text": "the existing existing code so so what we need to do now is we need to apply that to the executable to do",
    "start": "2342960",
    "end": "2349359"
  },
  {
    "text": "that we create what i call a code patch file i just made up made up some simple tools to be used to do this",
    "start": "2349359",
    "end": "2356160"
  },
  {
    "text": "and they work on things which are called code patch files basically a code patch file all it does is it contains",
    "start": "2356160",
    "end": "2362640"
  },
  {
    "text": "portions of data which are designed to be patched at specified virtual addresses in the target so i need to construct a code patch file",
    "start": "2362640",
    "end": "2370079"
  },
  {
    "text": "to do this so i'll just do that now",
    "start": "2370079",
    "end": "2374680"
  },
  {
    "text": "so so the first thing i need to do is i need to patch the first quarter string copy which is at 804855d",
    "start": "2386560",
    "end": "2393280"
  },
  {
    "text": "and i need to put over that",
    "start": "2393280",
    "end": "2397480"
  },
  {
    "text": "the the patch stub so",
    "start": "2399359",
    "end": "2405440"
  },
  {
    "text": "sorry the call stub",
    "start": "2405440",
    "end": "2409000"
  },
  {
    "text": "okay okay so i've copied that into our new patch file which is called fixed lock or fixed login path sorry",
    "start": "2414000",
    "end": "2419440"
  },
  {
    "text": "anyway so so that's the first string copy the second string copy was at 80485 c9 and since we also need that to be an",
    "start": "2419440",
    "end": "2426400"
  },
  {
    "text": "astral copy of size 16 we can put the same call stub there so 80485 c9",
    "start": "2426400",
    "end": "2433599"
  },
  {
    "text": "and then we also need to copy in the actual new code which",
    "start": "2433599",
    "end": "2439200"
  },
  {
    "text": "is expected to be at 804 9754",
    "start": "2439200",
    "end": "2443720"
  },
  {
    "text": "okey dokey and finally i need to copy an astrl copy which which is called by the new code at 804.9810",
    "start": "2458400",
    "end": "2466920"
  },
  {
    "text": "okay so so finally i now have a complete code patch file which should fix this problem",
    "start": "2493599",
    "end": "2500079"
  },
  {
    "text": "and as we can see it just consists of four individual patches at that which are meant to go at those specified virtual locations now all i have to do",
    "start": "2504400",
    "end": "2511200"
  },
  {
    "text": "is apply it all that means is that i need to use a program which is also included on the conference cd called code patch apply and all it does is it",
    "start": "2511200",
    "end": "2518240"
  },
  {
    "text": "loops to all of the program headers works out where the virtual addresses are and patches those locations in the file",
    "start": "2518240",
    "end": "2524400"
  },
  {
    "text": "so code patch apply",
    "start": "2524400",
    "end": "2530319"
  },
  {
    "text": "and so i need to fixed",
    "start": "2531520",
    "end": "2537599"
  },
  {
    "text": "login demo",
    "start": "2537599",
    "end": "2540240"
  },
  {
    "text": "okay so as you can see it goes off and it applies that patch at the specified virtual memory locations now if i run",
    "start": "2544640",
    "end": "2551359"
  },
  {
    "text": "the new fixed program it asks me for user name fan tuner a long username",
    "start": "2551359",
    "end": "2558640"
  },
  {
    "text": "long password nothing happens anymore and if we do an",
    "start": "2558640",
    "end": "2564319"
  },
  {
    "text": "l trace of that we'll see that it doesn't even call string copy anymore",
    "start": "2564319",
    "end": "2570240"
  },
  {
    "text": "as you can see there's there's no longer any calls to string copy there so basically we can use this sort of",
    "start": "2572319",
    "end": "2577520"
  },
  {
    "text": "technique in order to fix holes in binaries",
    "start": "2577520",
    "end": "2583240"
  },
  {
    "text": "okay so so what were the features what were the good bits about that well obviously uh file patching is very",
    "start": "2596160",
    "end": "2602240"
  },
  {
    "text": "powerful you can do anything you want to you can change anything you want to about the target executable as long as you understand enough about it",
    "start": "2602240",
    "end": "2608880"
  },
  {
    "text": "the and it's also permanent so from now on that particular executable will never have that problem",
    "start": "2608880",
    "end": "2614560"
  },
  {
    "text": "again but the problem with it is that it's quite complex and it's very error-prone it's quite easy to end up with patches",
    "start": "2614560",
    "end": "2620720"
  },
  {
    "text": "that just don't work or don't work in strange situations the program must be restarted",
    "start": "2620720",
    "end": "2626480"
  },
  {
    "text": "you obviously you you can't d you can't patch the file and then expect",
    "start": "2626480",
    "end": "2631920"
  },
  {
    "text": "it to magically work inside the executable which is loaded into memory and you can't easily you can but but not",
    "start": "2631920",
    "end": "2639680"
  },
  {
    "text": "easily call new library functions so if you want to like call functions which aren't normally",
    "start": "2639680",
    "end": "2644720"
  },
  {
    "text": "called by the target executable then it's quite it's it can be difficult to get them to",
    "start": "2644720",
    "end": "2649920"
  },
  {
    "text": "get difficult to get at them so now let's move on to a different form",
    "start": "2649920",
    "end": "2655520"
  },
  {
    "text": "of patching this one's in core patching this is runtime patching it's basically exactly the same as file",
    "start": "2655520",
    "end": "2660640"
  },
  {
    "text": "patching but instead it's performed on the process memory image all we have to do is we connect to the",
    "start": "2660640",
    "end": "2665839"
  },
  {
    "text": "process exactly as though we were a debugger using the debugging supported on the platform so that might",
    "start": "2665839",
    "end": "2672640"
  },
  {
    "text": "be p trace on linux systems or procfs on solaris systems and we just uh apply code on top of the",
    "start": "2672640",
    "end": "2679440"
  },
  {
    "text": "image so where do we put the additional code exactly the same problem as before",
    "start": "2679440",
    "end": "2685440"
  },
  {
    "text": "we need to find some map we need to find some executable mapped space somewhere which we can use",
    "start": "2685440",
    "end": "2691920"
  },
  {
    "text": "except under intel architecture since that's not important but we can again try and overwrite unused",
    "start": "2691920",
    "end": "2698240"
  },
  {
    "text": "code but we have to find it we could also in this case use segment padding instead",
    "start": "2698240",
    "end": "2704079"
  },
  {
    "text": "of section padding we could use segment padding and that's quite useful in this case and that's going to be the technique we're going to use because",
    "start": "2704079",
    "end": "2710079"
  },
  {
    "text": "segments are padded to the end to page boundaries so their start is padded to a page boundary and the end is padded to a",
    "start": "2710079",
    "end": "2716400"
  },
  {
    "text": "page boundary what i mean by that is if you take a look at this particular example of of a segment which is meant",
    "start": "2716400",
    "end": "2722079"
  },
  {
    "text": "to be mapped at virtual address 8049644 for a file size of f0 and a memory size",
    "start": "2722079",
    "end": "2727359"
  },
  {
    "text": "of 110 you'll see that when it is actually mapped into memory it's actually mapped from 804.900",
    "start": "2727359",
    "end": "2734400"
  },
  {
    "text": "to 804a 0 000 and what that means is that there's actually",
    "start": "2734400",
    "end": "2739880"
  },
  {
    "text": "1604 bytes of padding before the segment even begins then you have the segment proper and",
    "start": "2739880",
    "end": "2746319"
  },
  {
    "text": "then you have 32 bytes of nulls which are provided by the operating system because the memory size is 110 the file",
    "start": "2746319",
    "end": "2752560"
  },
  {
    "text": "size is f0 the difference being 32 bytes so the operating system provides 32 bytes of nulls immediately",
    "start": "2752560",
    "end": "2759520"
  },
  {
    "text": "following the segment that's the bss for those of you who are familiar with it and then we have following the end of",
    "start": "2759520",
    "end": "2765920"
  },
  {
    "text": "the segment well the real end of the segment we can see that there's also some padding right up to the page boundaries",
    "start": "2765920",
    "end": "2771200"
  },
  {
    "text": "so that's another two hundred 2 twenty bytes so basically there's a lot of free space in most executables which",
    "start": "2771200",
    "end": "2777920"
  },
  {
    "text": "can be used for in-call patching so let's actually do a quick demo of",
    "start": "2777920",
    "end": "2782960"
  },
  {
    "text": "in-call patching",
    "start": "2782960",
    "end": "2786359"
  },
  {
    "text": "okie dokie so so we're back to our to everyone's favorite program login demo but if we take a look at login demo one",
    "start": "2792240",
    "end": "2799280"
  },
  {
    "text": "more time",
    "start": "2799280",
    "end": "2802520"
  },
  {
    "text": "okay if you take a look at those segments you can see that the first segment is mapped from 804800",
    "start": "2816560",
    "end": "2822160"
  },
  {
    "text": "for 642 bytes in hex that's actually mapped from 804.8000 to 804900",
    "start": "2822160",
    "end": "2829760"
  },
  {
    "text": "the second segment is mapped from 8049 644 you may recognize the second segment since it was the one in the slides",
    "start": "2829760",
    "end": "2835760"
  },
  {
    "text": "previously and if we look at that that segment is actually supposed to end at 804",
    "start": "2835760",
    "end": "2842839"
  },
  {
    "text": "9754 but it doesn't it ends at 804 a zero zero zero",
    "start": "2842839",
    "end": "2848319"
  },
  {
    "text": "so we can use plenty of space there uh in order to patch the executable but something which is quite convenient",
    "start": "2848319",
    "end": "2854400"
  },
  {
    "text": "is that if you'll is it if you recall our our our patch previously it works based",
    "start": "2854400",
    "end": "2861760"
  },
  {
    "text": "on virtual virtual memory addresses if you look at the addresses which it uses 8049754 for example and 8049810",
    "start": "2861760",
    "end": "2870160"
  },
  {
    "text": "these happen to be the portions of memory which are provided free to us by the operating system in terms of padding",
    "start": "2870160",
    "end": "2876240"
  },
  {
    "text": "and so we can actually apply this this fix on the running image of the process without any problems it will work",
    "start": "2876240",
    "end": "2882960"
  },
  {
    "text": "because that memory is just there it's free to be used one thing you might note though is that the second segment isn't",
    "start": "2882960",
    "end": "2888960"
  },
  {
    "text": "mapped executable that isn't a problem here because we're on the intel architecture but on other architectures",
    "start": "2888960",
    "end": "2894480"
  },
  {
    "text": "we could as simply apply it against the um against the first segment we see it's got plenty of padding too so basically",
    "start": "2894480",
    "end": "2900640"
  },
  {
    "text": "all i have to do is if i just run login demo",
    "start": "2900640",
    "end": "2905680"
  },
  {
    "text": "and in another screen all i have to do is i just run code",
    "start": "2908000",
    "end": "2915200"
  },
  {
    "text": "patch core all it does is it takes a patch file and it applies it against the memory",
    "start": "2915200",
    "end": "2921760"
  },
  {
    "text": "image of a process so code patch file the target pit in this case is",
    "start": "2921760",
    "end": "2928800"
  },
  {
    "text": "whatever the process id login demo is and then the patch file",
    "start": "2928800",
    "end": "2934640"
  },
  {
    "text": "which was fix login path in this case so i've got the running executable here",
    "start": "2934640",
    "end": "2942720"
  },
  {
    "text": "code patch core it goes off and it applies the patch exactly as it did before but this time against the memory image",
    "start": "2942720",
    "end": "2948400"
  },
  {
    "text": "and then if i enter in a really long username a really long password",
    "start": "2948400",
    "end": "2956559"
  },
  {
    "text": "nothing happens so exactly as before we've just done exactly the same thing except we've done it while the process",
    "start": "2956559",
    "end": "2962400"
  },
  {
    "text": "was running so for example you could use this to fix holes in in services",
    "start": "2962400",
    "end": "2968880"
  },
  {
    "text": "while they're running 99 uptime services",
    "start": "2968880",
    "end": "2973279"
  },
  {
    "text": "so what are the features of in-call patching well it's exactly like file patching you can do almost anything you want to in this case it's non-permanent",
    "start": "2980240",
    "end": "2986880"
  },
  {
    "text": "which can at times be an advantage once the process finishes obviously the changes are gone",
    "start": "2986880",
    "end": "2992640"
  },
  {
    "text": "and it can be performed on any running process but exactly as with file patching it's",
    "start": "2992640",
    "end": "2998000"
  },
  {
    "text": "complex and it's error prone it's easy to get wrong uh and and in this case if you get it",
    "start": "2998000",
    "end": "3003280"
  },
  {
    "text": "wrong you generally kill the service at the same time uh you have limited space for new code",
    "start": "3003280",
    "end": "3008800"
  },
  {
    "text": "well at least with the techniques we were covering today you do and you can't easily call new library functions exactly as before",
    "start": "3008800",
    "end": "3016318"
  },
  {
    "text": "so now i want to move on to actually something simpler because those are the those are the common ones",
    "start": "3016400",
    "end": "3022000"
  },
  {
    "text": "which have been used quite frequently in the past for modifying binaries what it would be nice if we could cover",
    "start": "3022000",
    "end": "3027520"
  },
  {
    "text": "something a little bit more a little bit simpler which could be used by more people effectively by more",
    "start": "3027520",
    "end": "3032960"
  },
  {
    "text": "people so now we're going to talk about a different technique called library interception",
    "start": "3032960",
    "end": "3038640"
  },
  {
    "text": "and basically what this is based on is it's based on the fact that the dynamic loader is responsible for runtime",
    "start": "3038640",
    "end": "3043920"
  },
  {
    "text": "resolution of all of the dynamic relocations so we're talking about the got relocations for the data and the plt",
    "start": "3043920",
    "end": "3051119"
  },
  {
    "text": "relocations for the functions like printf how exactly does it do that well it reads the dt needed entries as",
    "start": "3051119",
    "end": "3058000"
  },
  {
    "text": "we talked about in the dynamics segment it loads all of the libraries which are needed and adds them to the link map and",
    "start": "3058000",
    "end": "3064160"
  },
  {
    "text": "then it goes on to process the relocations like we were talking about previously",
    "start": "3064160",
    "end": "3069440"
  },
  {
    "text": "so if you look at a at the process view you've got the link map on the side which shows uh all of the libraries",
    "start": "3069440",
    "end": "3075760"
  },
  {
    "text": "which are loaded into the process and it contains pointers out into each of the light points out to where each of the",
    "start": "3075760",
    "end": "3081280"
  },
  {
    "text": "libraries has been loaded the base address of each of the libraries so when when the dynamic linker is",
    "start": "3081280",
    "end": "3087119"
  },
  {
    "text": "actually processing all the relocations what it does is it looks through each of the libraries in the map in order it",
    "start": "3087119",
    "end": "3093119"
  },
  {
    "text": "searches all of the exported symbols and it tries to find a the matching symbol name for the symbol which it's looking",
    "start": "3093119",
    "end": "3099119"
  },
  {
    "text": "for looking for a function which isn't marked weak which is just some detail in case you want to look into this further",
    "start": "3099119",
    "end": "3105359"
  },
  {
    "text": "but basically the first match is the winner so the the first symbol name which",
    "start": "3105359",
    "end": "3110800"
  },
  {
    "text": "matches the one it's looking for is the one which gets which gets the relocation process for it",
    "start": "3110800",
    "end": "3117200"
  },
  {
    "text": "so library function call interception is all about getting in first if you get your library loaded first",
    "start": "3117200",
    "end": "3122720"
  },
  {
    "text": "before the others then you will be the winner for any functions which you export and what that means is that you can then",
    "start": "3122720",
    "end": "3129200"
  },
  {
    "text": "proceed to intercept any function call which is made by the executable simply by exporting",
    "start": "3129200",
    "end": "3135200"
  },
  {
    "text": "that particular symbol so how do you get in first",
    "start": "3135200",
    "end": "3140880"
  },
  {
    "text": "well the obviously one of the ways to do so is to modify the dt needed records inside the dynamic",
    "start": "3140880",
    "end": "3147839"
  },
  {
    "text": "inside the dynamic table one way to do that is to overwrite the library entry for another library and",
    "start": "3147839",
    "end": "3154400"
  },
  {
    "text": "simply make it point to yours instead and then inside your your library you",
    "start": "3154400",
    "end": "3159520"
  },
  {
    "text": "open the other library to make sure that it can get whatever other dependencies it had on the old library which you",
    "start": "3159520",
    "end": "3165359"
  },
  {
    "text": "just removed from the process but that's a bit hairy and i'm not going",
    "start": "3165359",
    "end": "3170800"
  },
  {
    "text": "to go into it but it certainly does work another option is to move the dynamic segments and recreate it so start with a",
    "start": "3170800",
    "end": "3177119"
  },
  {
    "text": "whole new dynamic segment and and then add a new library dependency before all",
    "start": "3177119",
    "end": "3182319"
  },
  {
    "text": "of the others higher up in the order than the others and perhaps the the much more common",
    "start": "3182319",
    "end": "3188079"
  },
  {
    "text": "approach to this sort of stuff is to use the linker environments and that's using the ld preload",
    "start": "3188079",
    "end": "3193359"
  },
  {
    "text": "environment variable basically the dynamic linker will use this you will use this environment variable and any",
    "start": "3193359",
    "end": "3199280"
  },
  {
    "text": "libraries which are specified in it will be mapped before any other libraries the problem with that is that it doesn't",
    "start": "3199280",
    "end": "3204880"
  },
  {
    "text": "work for set uid programs and it doesn't work in lots of different circumstances and it's been covered perfectly well",
    "start": "3204880",
    "end": "3211680"
  },
  {
    "text": "before so we're not going to go into it today so fair enough once once you've managed",
    "start": "3211680",
    "end": "3217200"
  },
  {
    "text": "to get your library loaded in first what are you actually going to do well you intercept the function that you intercept a particular function and then",
    "start": "3217200",
    "end": "3223680"
  },
  {
    "text": "in most cases you'll need to filter it in some way or do something groovy and then you'll need to call the old",
    "start": "3223680",
    "end": "3229200"
  },
  {
    "text": "function or in fact the other way around to do that that's quite simple because the dynamic linker provides an interface",
    "start": "3229200",
    "end": "3235920"
  },
  {
    "text": "which can be used by the program called through the libdl.so library",
    "start": "3235920",
    "end": "3242000"
  },
  {
    "text": "it contains one function called dlopen which can be used to load a library and dlcim which can be used to find the",
    "start": "3242000",
    "end": "3247839"
  },
  {
    "text": "address of a particular function or a particular symbol and if you specify the rtld next flag basically",
    "start": "3247839",
    "end": "3254800"
  },
  {
    "text": "exactly what happens is a dynamic linker ignores your library looks to all of the others and finds the real one the one",
    "start": "3254800",
    "end": "3260079"
  },
  {
    "text": "which really would have been should have had the relocation pointed to it so let's actually look at something which",
    "start": "3260079",
    "end": "3265599"
  },
  {
    "text": "we can do which we can do with library interception in this case uh we're not going to look at login demo anymore",
    "start": "3265599",
    "end": "3273040"
  },
  {
    "text": "we're actually going to look at a simple a simple vulnerability in a bit of software with a well-known",
    "start": "3273040",
    "end": "3279520"
  },
  {
    "text": "vulnerability and old vulnerability um",
    "start": "3279520",
    "end": "3285040"
  },
  {
    "text": "so basically on this machine i'm",
    "start": "3285040",
    "end": "3291640"
  },
  {
    "text": "silly enough to run the ahu is d daemon from network",
    "start": "3292720",
    "end": "3298079"
  },
  {
    "text": "solutions this is version 1.5.5 it suffered from a really simple to exploit remote",
    "start": "3298079",
    "end": "3305280"
  },
  {
    "text": "vulnerability if i pass an soa query and i happen to specify percentage p percentage p",
    "start": "3305280",
    "end": "3313599"
  },
  {
    "text": "percentage p the reply which is the error reply happens to have a format string vulnerability so you can see",
    "start": "3313599",
    "end": "3319920"
  },
  {
    "text": "where it should have said in valid authority area percentage percentage percentage p instead it's given me pointers so as you",
    "start": "3319920",
    "end": "3326880"
  },
  {
    "text": "can see this is a pretty trivially exploitable sort of vulnerability there have been a",
    "start": "3326880",
    "end": "3333359"
  },
  {
    "text": "a number of exploits for this",
    "start": "3333359",
    "end": "3340000"
  },
  {
    "text": "this is just one publicly oh god",
    "start": "3343359",
    "end": "3348039"
  },
  {
    "text": "and there you go work second time around anyway so this is just one of the public exploits for this problem",
    "start": "3349040",
    "end": "3355200"
  },
  {
    "text": "so as you can see um this is this is an issue which you'd want fixed and if you imagine the sort of people who are running our who indeed",
    "start": "3355200",
    "end": "3362000"
  },
  {
    "text": "who are running ahu is d they can't afford down time in this particular service uh this was being run by",
    "start": "3362000",
    "end": "3367280"
  },
  {
    "text": "registrars network registrars people who had to have the service up at all times so uh that they would they would need to",
    "start": "3367280",
    "end": "3374319"
  },
  {
    "text": "fix this problem as soon as possible so so what we'll do is we're going to try",
    "start": "3374319",
    "end": "3379760"
  },
  {
    "text": "and use library interception to to fix the issue to do that all i have is i have a really",
    "start": "3379760",
    "end": "3384880"
  },
  {
    "text": "trivial library",
    "start": "3384880",
    "end": "3388359"
  },
  {
    "text": "it's called fixer who is d or all it does is it um is it its initialization function just works out",
    "start": "3390400",
    "end": "3396880"
  },
  {
    "text": "the address of f gets and then it replaces the the f gets",
    "start": "3396880",
    "end": "3402079"
  },
  {
    "text": "basically what happens is that if you run an l trace on ah who is d all it does is it calls f gets in order to read in the user input then it goes off to",
    "start": "3402079",
    "end": "3408720"
  },
  {
    "text": "process it and suffers from that format string vulnerability all i've done here is i've i've taken control of fgats i",
    "start": "3408720",
    "end": "3415440"
  },
  {
    "text": "call the old fgats and this time i check to see whether this is whether this is an soa request if it is then i strip any",
    "start": "3415440",
    "end": "3422880"
  },
  {
    "text": "percentage marks out of it since i know that it suffers from a vulnerability so i mean that's what",
    "start": "3422880",
    "end": "3429359"
  },
  {
    "text": "40 lines of trivial code so all i really need to do now is to",
    "start": "3429359",
    "end": "3434799"
  },
  {
    "text": "actually get that uh into the yahoo isd daemon such that it won't suffer any more from",
    "start": "3434799",
    "end": "3440640"
  },
  {
    "text": "the problem so to do that i'm going to use a tool called add library",
    "start": "3440640",
    "end": "3446440"
  },
  {
    "text": "and basically all i have to do is i run ad library again this is on the conference cd",
    "start": "3454240",
    "end": "3460480"
  },
  {
    "text": "yeah so if i specify my input file which in this case is",
    "start": "3460480",
    "end": "3466079"
  },
  {
    "text": "yeah who is d daemon specify my output file",
    "start": "3466079",
    "end": "3471480"
  },
  {
    "text": "fixture who is d and then i specify the new library which i want to pick up",
    "start": "3476079",
    "end": "3481359"
  },
  {
    "text": "so that would be",
    "start": "3481520",
    "end": "3485079"
  },
  {
    "text": "uh who is d so so there we go now now if i look at the library",
    "start": "3494000",
    "end": "3500160"
  },
  {
    "text": "dependencies in the old rhusd",
    "start": "3500160",
    "end": "3503838"
  },
  {
    "text": "we can see that it needed the standard sort of resolution dns resolution libraries now if i take a look at",
    "start": "3506480",
    "end": "3513200"
  },
  {
    "text": "at the new one as we can see the first requirement the",
    "start": "3513200",
    "end": "3518640"
  },
  {
    "text": "first needed library in this executable is now our our library it's a fixer who",
    "start": "3518640",
    "end": "3523920"
  },
  {
    "text": "is d so that means that our f gets is going to be higher up in the order than anybody else's f gets we're gonna get",
    "start": "3523920",
    "end": "3529839"
  },
  {
    "text": "control so if i kill the existing",
    "start": "3529839",
    "end": "3535920"
  },
  {
    "text": "ah who is d and i start a new one this time the fixture who is there",
    "start": "3540960",
    "end": "3548799"
  },
  {
    "text": "you can see the message which has come from our library when it's been loaded and now it should be it should no longer",
    "start": "3548799",
    "end": "3554400"
  },
  {
    "text": "suffer from this vulnerability",
    "start": "3554400",
    "end": "3557880"
  },
  {
    "text": "so as you can see now if i put in the same soa request which previously used to be a format string vulnerability my f",
    "start": "3570240",
    "end": "3576240"
  },
  {
    "text": "gets is getting control and filtering it so this problem doesn't exist in this demon anymore",
    "start": "3576240",
    "end": "3583319"
  },
  {
    "text": "okay so what are the features of library interception well contrary to previous um binary modification techniques",
    "start": "3598160",
    "end": "3605280"
  },
  {
    "text": "and the more common ones library interception is easy and simple it's quite trivial",
    "start": "3605280",
    "end": "3610400"
  },
  {
    "text": "anyone with some c coding knowledge can can make it work all the interception code can be done in c",
    "start": "3610400",
    "end": "3617599"
  },
  {
    "text": "it's safe it's pretty hard to to break it unless of course your replacement function is really bad",
    "start": "3617599",
    "end": "3623599"
  },
  {
    "text": "and you can call any library functions anything you want to do effectively you can write just standard c code and just",
    "start": "3623599",
    "end": "3629200"
  },
  {
    "text": "have it picked up by by the target executable but the ld preload technique isn't isn't",
    "start": "3629200",
    "end": "3635440"
  },
  {
    "text": "permanent the dt needed approach requires the library to stay there at all times that library is now an important part of that",
    "start": "3635440",
    "end": "3642240"
  },
  {
    "text": "executable if you remove the library the executable won't work anymore and the program must be restarted in",
    "start": "3642240",
    "end": "3649040"
  },
  {
    "text": "order to make this work all this form of library interception so on to inject so which is a tool i",
    "start": "3649040",
    "end": "3654640"
  },
  {
    "text": "wrote a while ago and basically injector cells like injelib for windows in case any of you",
    "start": "3654640",
    "end": "3659760"
  },
  {
    "text": "are familiar with injelib all it really does is it injects a shared library into a running program so you have a",
    "start": "3659760",
    "end": "3665359"
  },
  {
    "text": "particular running process you specify a shared library and it forces that shared library to be loaded into the into the",
    "start": "3665359",
    "end": "3671040"
  },
  {
    "text": "remote program it's much harder on unix than windows because under windows the operating system provides quite a lot of support",
    "start": "3671040",
    "end": "3677359"
  },
  {
    "text": "to allow this to happen under unix that's not the case there's very minimal support",
    "start": "3677359",
    "end": "3683440"
  },
  {
    "text": "so basically what does inject so do it opens the process using whatever the debugging mechanism is on the platform",
    "start": "3683440",
    "end": "3689440"
  },
  {
    "text": "it searches the link map which is exported by the program in order to find the dl open function which as we",
    "start": "3689440",
    "end": "3694960"
  },
  {
    "text": "specified is a dynamic linker function which is you used to load a library",
    "start": "3694960",
    "end": "3700000"
  },
  {
    "text": "it constructs the arguments to dl open on the on the stack note that it doesn't construct any code",
    "start": "3700000",
    "end": "3705839"
  },
  {
    "text": "inside the target executable it just constructs the arguments on the stack inside the executable and then it forces the process to jump",
    "start": "3705839",
    "end": "3712160"
  },
  {
    "text": "to deal open setting the return address to 4141 4140 which is pretty much well in every case",
    "start": "3712160",
    "end": "3719359"
  },
  {
    "text": "uh an invalid address so so the deal open happens the function",
    "start": "3719359",
    "end": "3725599"
  },
  {
    "text": "ends with the seg fault which is when it tries to return to the invalid address that's intercepted by inject so",
    "start": "3725599",
    "end": "3732720"
  },
  {
    "text": "then injector so can go on to call a particular function which is specified by the user providing it the address of",
    "start": "3732720",
    "end": "3738160"
  },
  {
    "text": "the dynamic segment if it wants it and then once it's done all that it restores the",
    "start": "3738160",
    "end": "3743599"
  },
  {
    "text": "state of the process restarting any sys calls which it was in the middle of at the time and the process continues on running as",
    "start": "3743599",
    "end": "3749599"
  },
  {
    "text": "normal so so the process is stopped for a second loads the library and then continues on exactly as it was before",
    "start": "3749599",
    "end": "3757280"
  },
  {
    "text": "that wouldn't be particularly useful if that was all that happened inject so also comes with a utility object called intercept auto",
    "start": "3757280",
    "end": "3764319"
  },
  {
    "text": "which is meant to be linked into libraries which are going to be injected using injector so",
    "start": "3764319",
    "end": "3769359"
  },
  {
    "text": "and all it really does is it is it can be used to redirect dynamic function calls exactly like when we're",
    "start": "3769359",
    "end": "3775920"
  },
  {
    "text": "looking before we got our library in first so we got control of the functions intercept.o allows you to get control of",
    "start": "3775920",
    "end": "3781440"
  },
  {
    "text": "the functions without having to be in first so the user code provides the list of function which functions which it wants",
    "start": "3781440",
    "end": "3787599"
  },
  {
    "text": "to override and then intercept.o goes on to patch the plt and forces them to forces the",
    "start": "3787599",
    "end": "3795520"
  },
  {
    "text": "relocation forces the plt to refer to the replacement versions and then provides the the injected library",
    "start": "3795520",
    "end": "3801520"
  },
  {
    "text": "appointed to the old function so what it really looks like is this if you've got simple program it's trying to",
    "start": "3801520",
    "end": "3807839"
  },
  {
    "text": "call printf when the injected library is loaded up the intercept routines are used to break",
    "start": "3807839",
    "end": "3813200"
  },
  {
    "text": "the link between the p the printf stub and the actual real printf in libc instead it now points to",
    "start": "3813200",
    "end": "3819200"
  },
  {
    "text": "the injected library and the injected library can add its leisure called the old printf",
    "start": "3819200",
    "end": "3824400"
  },
  {
    "text": "so let's let's take a look at a demo of that um we've uh i think we've covered",
    "start": "3824400",
    "end": "3830400"
  },
  {
    "text": "uh using this sort of technology for good pretty well it can be used by the defenders to fix problems but we should",
    "start": "3830400",
    "end": "3836640"
  },
  {
    "text": "also cover how this sort of technology can can be used but by attackers so in this case instead of covering fixing a",
    "start": "3836640",
    "end": "3843599"
  },
  {
    "text": "vulnerability we're going to cover introducing a vulnerability into something so basically i've got a again a pretty",
    "start": "3843599",
    "end": "3850799"
  },
  {
    "text": "simple library",
    "start": "3850799",
    "end": "3853839"
  },
  {
    "text": "and it's called backdoor ssh so i'm sure you can immediately have an idea of what it does",
    "start": "3862319",
    "end": "3867440"
  },
  {
    "text": "if you look if you look at the code for this particular injection module it has a few interceptions uh it intercepts the",
    "start": "3867440",
    "end": "3874319"
  },
  {
    "text": "pam functions which are used on most modern unix's to authenticate users it intercepts set uid get uid get euid",
    "start": "3874319",
    "end": "3882160"
  },
  {
    "text": "which is obviously normally used to drop privileges and it also intercepts read and write",
    "start": "3882160",
    "end": "3888079"
  },
  {
    "text": "so i'm sure you can you can take a guess the sort of thing which this library can do",
    "start": "3888079",
    "end": "3893839"
  },
  {
    "text": "and you'll also note that the entire library is 262 lines and most of that is",
    "start": "3893839",
    "end": "3899280"
  },
  {
    "text": "comment so it's really quite trivial to do this stuff so let's see actually what happens if we",
    "start": "3899280",
    "end": "3904559"
  },
  {
    "text": "inject this library",
    "start": "3904559",
    "end": "3908359"
  },
  {
    "text": "so all i need to do so just specify inject so",
    "start": "3916160",
    "end": "3922039"
  },
  {
    "text": "and i will switch on all of the debugging tell it that i wanted to call the user",
    "start": "3922799",
    "end": "3929200"
  },
  {
    "text": "function after it's injected the program and by default it will call intercept begin to start interception",
    "start": "3929200",
    "end": "3936359"
  },
  {
    "text": "the process id is the ssh daemon and the library to be injected is",
    "start": "3940240",
    "end": "3947039"
  },
  {
    "text": "backdoor ssh.so",
    "start": "3947039",
    "end": "3950440"
  },
  {
    "text": "okay so it goes off in it and it and it does its thing um",
    "start": "3962000",
    "end": "3967359"
  },
  {
    "text": "but i mean if you guys are really interested in injectors so and how it works internally the source codes there and uh",
    "start": "3967359",
    "end": "3974240"
  },
  {
    "text": "and the documentation from the last presentation i did on injector so it goes into quite a lot of detail but basically it's gone off and it's",
    "start": "3974240",
    "end": "3980319"
  },
  {
    "text": "modified the remote process and it's forced it to load this library if i look",
    "start": "3980319",
    "end": "3986319"
  },
  {
    "text": "at the load mapped files in the ssh daemon at this stage",
    "start": "3986319",
    "end": "3992760"
  },
  {
    "text": "as you can see you wouldn't normally see this if you look at the top mapped from 401600 to 401 900 is my library",
    "start": "3998240",
    "end": "4007039"
  },
  {
    "text": "so so the running ssh daemon has now loaded my library and its functions have been intercepted",
    "start": "4007039",
    "end": "4012559"
  },
  {
    "text": "let's see what actually this library can do",
    "start": "4012559",
    "end": "4017559"
  },
  {
    "text": "so if i log into localhost actually i'm not going to do it as me",
    "start": "4023119",
    "end": "4029038"
  },
  {
    "text": "so if i log in as a test user okay",
    "start": "4031200",
    "end": "4037440"
  },
  {
    "text": "enter in my password say i do an ls my directory",
    "start": "4037440",
    "end": "4042640"
  },
  {
    "text": "you know etc oh well can't do that",
    "start": "4042640",
    "end": "4049838"
  },
  {
    "text": "anyway so so i just log in as a normal user everything's fine uh s login works in in",
    "start": "4050960",
    "end": "4056559"
  },
  {
    "text": "sorry the ssh daemon works exactly as it previously would uh the problem is that it does stuff",
    "start": "4056559",
    "end": "4062000"
  },
  {
    "text": "which it now shouldn't do now to demonstrate what i mean if i cut the file",
    "start": "4062000",
    "end": "4067680"
  },
  {
    "text": "temp evil as we can see what's actually happened",
    "start": "4067680",
    "end": "4073200"
  },
  {
    "text": "is it's now logging from inside the ssh daemon and we can see that it's intercepted the credentials and it's",
    "start": "4073200",
    "end": "4079520"
  },
  {
    "text": "gone username test user the response in this case was hello that's not my normal password",
    "start": "4079520",
    "end": "4085599"
  },
  {
    "text": "and then we have uh then we have an interesting message automatic login not enabled then credentials are set as",
    "start": "4085599",
    "end": "4091680"
  },
  {
    "text": "normal but in addition if i do strings",
    "start": "4091680",
    "end": "4097120"
  },
  {
    "text": "so as we can see that that login session happened in three three six one nine process three six one nine",
    "start": "4097120",
    "end": "4103758"
  },
  {
    "text": "so if i do a strings on ten people three six one nine there's all the session all of the session has been logged",
    "start": "4103759",
    "end": "4110719"
  },
  {
    "text": "and uh and in addition it also has one other groovy feature if i log in this time i'm gonna try and",
    "start": "4110719",
    "end": "4117120"
  },
  {
    "text": "log in as a user which you know couldn't normally interactively log in this let's say for example bim just any existing",
    "start": "4117120",
    "end": "4123040"
  },
  {
    "text": "user localhost",
    "start": "4123040",
    "end": "4127359"
  },
  {
    "text": "okay it asked me for the password how about the magic password let me",
    "start": "4128400",
    "end": "4133839"
  },
  {
    "text": "and indeed that's exactly what it does as root so effectively this this running ssh",
    "start": "4137359",
    "end": "4143359"
  },
  {
    "text": "demon has been totally subverted in about well well less than two well less than",
    "start": "4143359",
    "end": "4149520"
  },
  {
    "text": "200 lines of code",
    "start": "4149520",
    "end": "4153318"
  },
  {
    "text": "so what are the features of this sort of approach what are the features of injector so well it's simple it's flexible it has",
    "start": "4170080",
    "end": "4177440"
  },
  {
    "text": "all of the features of other library interception it doesn't require any modifications to the binary that is once",
    "start": "4177440",
    "end": "4183440"
  },
  {
    "text": "the process finishes there is no remaining trace of of anything which happened to it",
    "start": "4183440",
    "end": "4189758"
  },
  {
    "text": "that there are no disk files because you can uh delete the library once you've injected it",
    "start": "4189759",
    "end": "4194960"
  },
  {
    "text": "and the service it doesn't need to be restarted in any way so you can use this to fix vulnerabilities in running",
    "start": "4194960",
    "end": "4201840"
  },
  {
    "text": "the technical features of injectors so for those of you who are interested there's unlimited space for code because of the way in which the library is",
    "start": "4201840",
    "end": "4207760"
  },
  {
    "text": "loaded there are no trampolines at all there is no code injected into the remote target",
    "start": "4207760",
    "end": "4213440"
  },
  {
    "text": "which means that there's no executable or even writable memory required",
    "start": "4213440",
    "end": "4218640"
  },
  {
    "text": "you can call any library functions you want easily and you can override any library functions you wish to easily",
    "start": "4218640",
    "end": "4224400"
  },
  {
    "text": "but it's not permanent which can sometimes be seen as a disadvantage so that brings me to the end of my",
    "start": "4224400",
    "end": "4230320"
  },
  {
    "text": "speech thanks very much for listening the uh",
    "start": "4230320",
    "end": "4235120"
  },
  {
    "text": "uh are there any questions for anybody",
    "start": "4240080",
    "end": "4244840"
  },
  {
    "text": "no questions",
    "start": "4249120",
    "end": "4251840"
  },
  {
    "text": "this stuff has been well and truly done with win32 pes",
    "start": "4255440",
    "end": "4260639"
  },
  {
    "text": "in in terms of doing this on portable executables windows uh",
    "start": "4262800",
    "end": "4268239"
  },
  {
    "text": "not particularly sorry no i i'm uh mostly unix guy so",
    "start": "4268239",
    "end": "4274880"
  },
  {
    "text": "any other questions yep",
    "start": "4274880",
    "end": "4279040"
  },
  {
    "text": "absolutely uh because of the way injector so um connects to the remote exec to the remote process the remote",
    "start": "4285120",
    "end": "4291199"
  },
  {
    "text": "process doesn't even know that there's been a segmentation fault before before inject so intercepts it and",
    "start": "4291199",
    "end": "4296560"
  },
  {
    "text": "removes it so when you think about it that way there's",
    "start": "4296560",
    "end": "4301840"
  },
  {
    "text": "the previously the approach has always been to put a trampoline onto the stack to write some code onto the stack and",
    "start": "4301840",
    "end": "4306960"
  },
  {
    "text": "then cause that code to be executed uh that way you didn't have to try and find somewhere else but this sort of",
    "start": "4306960",
    "end": "4314400"
  },
  {
    "text": "mechanism because we're just doing it by this segfault segfault mechanism we don't need to inject any code and the",
    "start": "4314400",
    "end": "4320400"
  },
  {
    "text": "process doesn't need to know anything or need to be modified in any significant way other than other than would be",
    "start": "4320400",
    "end": "4326000"
  },
  {
    "text": "normal with dlopen or something any other questions",
    "start": "4326000",
    "end": "4333199"
  },
  {
    "text": "no okay thank you very much",
    "start": "4333920",
    "end": "4338600"
  },
  {
    "text": "you",
    "start": "4351679",
    "end": "4353760"
  }
]