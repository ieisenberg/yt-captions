[
  {
    "text": "[Music]",
    "start": "1700",
    "end": "4810"
  },
  {
    "text": "okay hi everybody thank you for coming today uh our presentation is Android universal route exploiting xpu drivers",
    "start": "7520",
    "end": "16080"
  },
  {
    "text": "so we are shingu Richard and John we're all members of Google's Android security",
    "start": "16080",
    "end": "21400"
  },
  {
    "text": "and privacy organization shingu and myself are security engineers in the Android malware research team with an",
    "start": "21400",
    "end": "28519"
  },
  {
    "text": "interest in detecting exploit ation John is program manager for the apvi program",
    "start": "28519",
    "end": "35040"
  },
  {
    "text": "an internal Google effort aimed at coordinating the finding and fixing of",
    "start": "35040",
    "end": "40800"
  },
  {
    "text": "vulnerabilities today we're going to talk to you about some routing exploits on Android we'll start off with an inth",
    "start": "40800",
    "end": "47280"
  },
  {
    "text": "wild exploit that triggered This research then we'll move through some of the results of the internal research and",
    "start": "47280",
    "end": "53640"
  },
  {
    "text": "then finally cover the Android partner vulnerability initiative which is how we got the internal findings",
    "start": "53640",
    "end": "60960"
  },
  {
    "text": "fixed so a long time ago about 10 years now uh there was a series of similar",
    "start": "60960",
    "end": "67439"
  },
  {
    "text": "vulnerabilities in multiple Android drivers the overall family was called framar essentially owing to bugs in the",
    "start": "67439",
    "end": "75560"
  },
  {
    "text": "drivers mmap handlers user mode could create read write mappings of Kernel",
    "start": "75560",
    "end": "81000"
  },
  {
    "text": "memory resulting in fairly simple privilege elevation this was a common problem at the time as you can see by",
    "start": "81000",
    "end": "87320"
  },
  {
    "text": "the number of exploits listed on the slide but the problem was recognized and the situation",
    "start": "87320",
    "end": "94200"
  },
  {
    "text": "improved the first more modern exploit we're going to talk about is Mt KSU",
    "start": "94200",
    "end": "100280"
  },
  {
    "text": "Trend Micro published a Blog posting as you can see here uh about a piece of",
    "start": "100280",
    "end": "105399"
  },
  {
    "text": "Android malware they found the main focus of the blog posting was the exploit for CV 2019",
    "start": "105399",
    "end": "112880"
  },
  {
    "text": "2215 AKA bad binder uh but if further down in the blog they also mentioned a",
    "start": "112880",
    "end": "119439"
  },
  {
    "text": "second exploit mediate Tech Su uh Tren micro attributed the malware to an AP",
    "start": "119439",
    "end": "125320"
  },
  {
    "text": "group everybody likes an AP so we thought we'd take a look at it uh we very rapidly found ourselves at the XDA",
    "start": "125320",
    "end": "132920"
  },
  {
    "text": "Developers forums the first release of Mt KSU supported Amazon Fire HD devices",
    "start": "132920",
    "end": "139840"
  },
  {
    "text": "and this was very rapidly followed up by a second release supporting a much wider range of Hardware uh there are still",
    "start": "139840",
    "end": "147080"
  },
  {
    "text": "people actually testing this this release today on hardware and Reporting whether it works or",
    "start": "147080",
    "end": "153120"
  },
  {
    "text": "not so here's a video of Mt KSU running on one of my test devices with the minus",
    "start": "153120",
    "end": "160480"
  },
  {
    "text": "V for verose option so it'll display all its debug output and here it goes so we",
    "start": "160480",
    "end": "167360"
  },
  {
    "text": "can see it's uh looked up some kernel symbols you can see some kernel addresses floating around there and then",
    "start": "167360",
    "end": "174319"
  },
  {
    "text": "at the end uid Z SE Linux is permissive",
    "start": "174319",
    "end": "180000"
  },
  {
    "text": "so here are the three most important things broken out first thing it does go",
    "start": "180000",
    "end": "185599"
  },
  {
    "text": "through the kernel symbol table get the function names and addresses the next two steps the exploit",
    "start": "185599",
    "end": "193319"
  },
  {
    "text": "looks through the code of a couple of functions actually looking for particular instructions by finding particular",
    "start": "193319",
    "end": "200319"
  },
  {
    "text": "instructions that are accessing certain variables uh the exploit can get the",
    "start": "200319",
    "end": "205480"
  },
  {
    "text": "memory addresses of those variables or structures together with the structure offset out of the instructions this",
    "start": "205480",
    "end": "211720"
  },
  {
    "text": "means it can then find various data that it needs to perform the exploit less hardcoded data makes the",
    "start": "211720",
    "end": "219519"
  },
  {
    "text": "exploit more portable um if you think about Android there's a huge variety of",
    "start": "219519",
    "end": "225120"
  },
  {
    "text": "kernels and devices out there own to fragmentation and OEM customization so if you're trying to maintain hardcoded",
    "start": "225120",
    "end": "231920"
  },
  {
    "text": "lists of configuration addresses that's an awful lot of work if the exploit can find stuff on its own makes it a lot",
    "start": "231920",
    "end": "238760"
  },
  {
    "text": "more portable uh King root who some of you might remember used to be a big provider of",
    "start": "238760",
    "end": "244680"
  },
  {
    "text": "Android rooting solutions they went with the hardcoded approach uh configuration with addresses",
    "start": "244680",
    "end": "250920"
  },
  {
    "text": "and offsets Etc a single one of their exploits that we found actually had",
    "start": "250920",
    "end": "256000"
  },
  {
    "text": "configuration for over 5,000 combinations of Android device and kernel um that was the largest one we",
    "start": "256000",
    "end": "263280"
  },
  {
    "text": "found some of them had considerably fewer but that's still a huge amount of work to maintain Mt KSU doesn't have",
    "start": "263280",
    "end": "269960"
  },
  {
    "text": "that it just finds what it needs and goes for it now the exploit printed out quite a",
    "start": "269960",
    "end": "276360"
  },
  {
    "text": "lot about what it was doing but it didn't really give many Clues as to how it was doing it so uh the important",
    "start": "276360",
    "end": "284240"
  },
  {
    "text": "strings here at the top those are various things that are passed to the open CIS call however if you reverse",
    "start": "284240",
    "end": "289840"
  },
  {
    "text": "engineer the binary they're not present the strings are obfuscated there's actually over 250 obfuscated strings in",
    "start": "289840",
    "end": "297320"
  },
  {
    "text": "the executable most of them aren't referenced these three are looked up via a modified",
    "start": "297320",
    "end": "302600"
  },
  {
    "text": "djb2 hash um in order to then get get the deod fiscated versions pass them to",
    "start": "302600",
    "end": "308880"
  },
  {
    "text": "the CIS call once you've got the device nodes as here you can then have a look at the SE policy if you pull that off",
    "start": "308880",
    "end": "316520"
  },
  {
    "text": "the device and as we can see here uh the device node is accessible by regular",
    "start": "316520",
    "end": "322400"
  },
  {
    "text": "unprivileged Android applications now the driver supports an",
    "start": "322400",
    "end": "327800"
  },
  {
    "text": "ioctl which essentially allows user mode to send a buffer of op codes from user",
    "start": "327800",
    "end": "334319"
  },
  {
    "text": "into the kernel those OP codes include read move and write so essentially",
    "start": "334319",
    "end": "340919"
  },
  {
    "text": "unprivileged user mode code has kernel read write capability uh via this",
    "start": "340919",
    "end": "347639"
  },
  {
    "text": "ioctl now the driver's doing exactly what it was designed to do it's just the",
    "start": "347639",
    "end": "352840"
  },
  {
    "text": "design and configuration didn't consider that someone might come along later and try to abuse the driver for different",
    "start": "352840",
    "end": "359280"
  },
  {
    "text": "purposes pures uh an initial fix is quite simple change SE policy take away",
    "start": "359280",
    "end": "366840"
  },
  {
    "text": "unprivileged application's ability to access the de well to open the device or issue I Opals and as you can see the",
    "start": "366840",
    "end": "373440"
  },
  {
    "text": "exploit fails it can't initialize um there may be pre-installed",
    "start": "373440",
    "end": "379039"
  },
  {
    "text": "applications which require access to the device node to do what they need to do but you can work around that with",
    "start": "379039",
    "end": "385400"
  },
  {
    "text": "further SE policy explicitly allowing those applications alternatively you",
    "start": "385400",
    "end": "391039"
  },
  {
    "text": "could Implement an out ofprocess how exposing specific functionality rather",
    "start": "391039",
    "end": "396919"
  },
  {
    "text": "than generic pass through to the driver um that would have performance issues though so not always",
    "start": "396919",
    "end": "403479"
  },
  {
    "text": "applicable compared to the earlier framar rout series of exploits Mt KSU is",
    "start": "403479",
    "end": "408720"
  },
  {
    "text": "more complicated but it has exactly the same end result compromise of the",
    "start": "408720",
    "end": "414440"
  },
  {
    "text": "kernel now we did eventually read the XDA Developers forum uh diplomatic is",
    "start": "414440",
    "end": "420960"
  },
  {
    "text": "the individual who originally found the Mt KSU vulnerability and exploited it",
    "start": "420960",
    "end": "426039"
  },
  {
    "text": "and without whose work I probably wouldn't be standing here talking to you today so mtk command Q is an accelerator",
    "start": "426039",
    "end": "434080"
  },
  {
    "text": "driver with an interesting vulnerability what about other",
    "start": "434080",
    "end": "439199"
  },
  {
    "text": "drivers GPU drivers need to be accessible if you think about the Chrome renderer process it's running in a very",
    "start": "439199",
    "end": "446120"
  },
  {
    "text": "restrictive sandbox but it needs to do Graphics operations GPU drivers are very complicated",
    "start": "446120",
    "end": "453039"
  },
  {
    "text": "performance is a very important Focus part of this involves a lot of attention on mapping memory between user mode and",
    "start": "453039",
    "end": "460520"
  },
  {
    "text": "kernel or GPU so it fits into a number of the areas we've spoken about and",
    "start": "460520",
    "end": "466120"
  },
  {
    "text": "there's not that many different GPU manufacturers for Android um arm and",
    "start": "466120",
    "end": "471879"
  },
  {
    "text": "Qualcomm we tend to see security reports for those on a reasonably regular basis uh but",
    "start": "471879",
    "end": "480199"
  },
  {
    "text": "imagination Technologies power VR we couldn't find very many security reports on that if you're not familiar with",
    "start": "480199",
    "end": "487240"
  },
  {
    "text": "power VR there's an awful lot of power VR Hardware around in various places uh",
    "start": "487240",
    "end": "493479"
  },
  {
    "text": "as well as Android devices power VR has been previously used by Apple it's in Chromebooks TVs some desktop computers",
    "start": "493479",
    "end": "501319"
  },
  {
    "text": "even drones so it seems like this might be uh a suitable area for some further",
    "start": "501319",
    "end": "508440"
  },
  {
    "text": "research so with that I will pass things over to shingu who will tell us about",
    "start": "508440",
    "end": "513839"
  },
  {
    "text": "the other research thank you so uh like rich just said there's no",
    "start": "513839",
    "end": "520240"
  },
  {
    "text": "way we can restrict on prev user access to uh Power GPU driver and uh uh par GPU",
    "start": "520240",
    "end": "527600"
  },
  {
    "text": "driver exports hundreds ofal API to us space uh par developers called them as",
    "start": "527600",
    "end": "534279"
  },
  {
    "text": "uh Bridge apis or Bridge functionings um so basically there are mean three three",
    "start": "534279",
    "end": "539640"
  },
  {
    "text": "steps for talking to the device driver like you know opening device and oo and get response so to be more specific us",
    "start": "539640",
    "end": "547640"
  },
  {
    "text": "space program can always use I Cisco providing uh function group ID function",
    "start": "547640",
    "end": "553399"
  },
  {
    "text": "ID and the input uput data pass to the uh device driver so device driver will",
    "start": "553399",
    "end": "559640"
  },
  {
    "text": "take look at the ID invoke the exact Bri gpis and S result back to user okay so",
    "start": "559640",
    "end": "566800"
  },
  {
    "text": "here is the overview of how the uh brid API works so first step is to create",
    "start": "566800",
    "end": "572200"
  },
  {
    "text": "curent buffers and copy user inputs uh invoke internal curent functions and then return result back to user",
    "start": "572200",
    "end": "579079"
  },
  {
    "text": "unfortunately every step is buggy and so let's take a look at the first step so",
    "start": "579079",
    "end": "584680"
  },
  {
    "text": "for example if we want to call the the specific uh Bri API we have to specify",
    "start": "584680",
    "end": "590440"
  },
  {
    "text": "uh group ID and function IDs and on the right side you can see how the device driver uh export hundreds of uh IPS in",
    "start": "590440",
    "end": "598920"
  },
  {
    "text": "this way so the way to calculate the D size is to naively trust user input so there will",
    "start": "598920",
    "end": "605560"
  },
  {
    "text": "be an very obvious integral overflow issue happen here and which leads to he Auto bound right and you you may also",
    "start": "605560",
    "end": "613399"
  },
  {
    "text": "see that device driver may have a lot of s checks but they always checking if an",
    "start": "613399",
    "end": "618680"
  },
  {
    "text": "on sign integrator is always about zero so basically it's doing nothing okay and it also creates massive travel in the",
    "start": "618680",
    "end": "625760"
  },
  {
    "text": "GPU framewor because all the bridge APS are implemented in the this way so Google assign several CVS for this issue",
    "start": "625760",
    "end": "632680"
  },
  {
    "text": "H but good news here is that you know sometimes in flow May cancel the uh let's say if you allocate buer with the",
    "start": "632680",
    "end": "640360"
  },
  {
    "text": "size that is Overflow but the size of the M Copy is also overflow so the three oflow here cancel each other so there's",
    "start": "640360",
    "end": "647040"
  },
  {
    "text": "actually no security impact although the code is written in a very wrong way cool so uh let's take a look at the Second",
    "start": "647040",
    "end": "653560"
  },
  {
    "text": "Step here um the second step is to about invoking internal function so basically",
    "start": "653560",
    "end": "658720"
  },
  {
    "text": "there are me three types of con functions create con object use object",
    "start": "658720",
    "end": "664360"
  },
  {
    "text": "and release object okay so uh just say we have a set of set of bridge API",
    "start": "664360",
    "end": "670240"
  },
  {
    "text": "called act what it does is to create internal curent objects use current object for computations and then return",
    "start": "670240",
    "end": "676200"
  },
  {
    "text": "handle back to user and handle something much pretty much predictable okay so if",
    "start": "676200",
    "end": "681760"
  },
  {
    "text": "we take a close look uh the device driver create object a increment the reference count the reference count is",
    "start": "681760",
    "end": "687160"
  },
  {
    "text": "one and then increment the reference count Protect by the log because we are going to C do something for internal",
    "start": "687160",
    "end": "693680"
  },
  {
    "text": "computation and then de reference count and it's also Protect by the log okay and we also have a bridge set of bridge",
    "start": "693680",
    "end": "700480"
  },
  {
    "text": "API y so the bridge API y does is uh finding con objects by handle provide",
    "start": "700480",
    "end": "706240"
  },
  {
    "text": "from us space and decrement the reference count okay so if the reference count is decrement to zero then object a",
    "start": "706240",
    "end": "713399"
  },
  {
    "text": "is free so there's a c CH we want to see that you know the F thre qu ofj a",
    "start": "713399",
    "end": "719240"
  },
  {
    "text": "increment reference count and then Contex s happens to the third to to the uh second threat the second threat de",
    "start": "719240",
    "end": "725800"
  },
  {
    "text": "reference count from one 2 to one and then do something is invoked and then",
    "start": "725800",
    "end": "732160"
  },
  {
    "text": "the a ref count get decremented a is free everything looks fine however if we",
    "start": "732160",
    "end": "737399"
  },
  {
    "text": "have a third Evo th here to further decrement the reference count from 1 to zero so a object will be free and then",
    "start": "737399",
    "end": "745160"
  },
  {
    "text": "Conex we happens the first radicals do something here but a is also free so",
    "start": "745160",
    "end": "751079"
  },
  {
    "text": "because every bridge API are written in this way in terms of its synchronization infrastructure so basic most like a",
    "start": "751079",
    "end": "758079"
  },
  {
    "text": "dozens of konal apis are vulnerable in this way by the user free vulnerability",
    "start": "758079",
    "end": "763199"
  },
  {
    "text": "so imagination technology also take a few months for fixing the issue because obviously you can not use a big lock to",
    "start": "763199",
    "end": "769639"
  },
  {
    "text": "lock the entire world State otherwise we have a huge performance hit cool so uh",
    "start": "769639",
    "end": "775320"
  },
  {
    "text": "there's a final step here copy result back to user so what it basic does does it to you know a divide driver tries to",
    "start": "775320",
    "end": "782079"
  },
  {
    "text": "initialize an allocated con object copy object data back to us space so what",
    "start": "782079",
    "end": "788000"
  },
  {
    "text": "happens here is that you know we have object a and divide driver tries to initialize object a by do something",
    "start": "788000",
    "end": "794639"
  },
  {
    "text": "function and then it will copy a data back to your space so here's the problem if do something FS very early then a is",
    "start": "794639",
    "end": "802160"
  },
  {
    "text": "left un initialized so we can easily Le kind of H pointers or pass of in this",
    "start": "802160",
    "end": "807720"
  },
  {
    "text": "way with a SLS say that there a very stable way to leak all kinds of kind of information and we also have other",
    "start": "807720",
    "end": "814160"
  },
  {
    "text": "issues like you know reference C fls up St flows user all types of user fre free",
    "start": "814160",
    "end": "820839"
  },
  {
    "text": "our refence St later uh so as you can see in brid there",
    "start": "820839",
    "end": "826079"
  },
  {
    "text": "will be lots of classic memory corruption risk conditions but and these bugs are definitely exploitable to rot",
    "start": "826079",
    "end": "832320"
  },
  {
    "text": "any prop devices but we are not going to do a deep di for how to exploit this these bugs because we have something",
    "start": "832320",
    "end": "838320"
  },
  {
    "text": "much more powerful so let's take a look at uh the memory management so you know we have a CPU we",
    "start": "838320",
    "end": "844320"
  },
  {
    "text": "have GPU there will be lots of memory mappings happening here like CPU will allocate virtual Pages map to physic",
    "start": "844320",
    "end": "850240"
  },
  {
    "text": "Pages similarly GPU will also map virtual pages to physic pages and",
    "start": "850240",
    "end": "855279"
  },
  {
    "text": "there's also something called sh virtual memory or svm that basically mean the the the CPU and GPU will allocate their",
    "start": "855279",
    "end": "862800"
  },
  {
    "text": "own separate different virtual pages and map to the same physical Pages for data",
    "start": "862800",
    "end": "867959"
  },
  {
    "text": "transfer so uh well let's take a look at how the physical pag get managed and how",
    "start": "867959",
    "end": "873320"
  },
  {
    "text": "GPU establish mappings from with uh GPU virtual pages to the phys pages okay so",
    "start": "873320",
    "end": "879920"
  },
  {
    "text": "here is a important concept here called PMR or the PMR stands for physical memory resources so the US Space Program",
    "start": "879920",
    "end": "887759"
  },
  {
    "text": "uh cause a lot of uh Bri apis to get a PMI handle so what PMI handle means is",
    "start": "887759",
    "end": "893560"
  },
  {
    "text": "that userspace program tells the GPU driver like hey this is a bunch of physical memory I want to reserve and",
    "start": "893560",
    "end": "899880"
  },
  {
    "text": "please give me a PMR handle back and later us space program can use can pass",
    "start": "899880",
    "end": "905000"
  },
  {
    "text": "the PM handle for creating the GPU or CPU virtual memory allocation because uh",
    "start": "905000",
    "end": "910759"
  },
  {
    "text": "we've already reserved a bunch of physical memory for memory mappings so",
    "start": "910759",
    "end": "916120"
  },
  {
    "text": "you know creating P will involve with very lot arguments from the US space and you can always fast this arguments and",
    "start": "916120",
    "end": "923680"
  },
  {
    "text": "because the arguments are not sanitized very well so for example if I say hey I want to Min two physical pages and you",
    "start": "923680",
    "end": "929199"
  },
  {
    "text": "will get a k crash for auto B read and similarly if you want to create a GPU",
    "start": "929199",
    "end": "935399"
  },
  {
    "text": "virtu P virtual Pages you also has to pass really a lot of arguments here um",
    "start": "935399",
    "end": "941959"
  },
  {
    "text": "for example if I say oh physic the the physical ma of set is minus two then the",
    "start": "941959",
    "end": "947839"
  },
  {
    "text": "C will crash because aound read so you can utilize the aound read issues to make sure like U that you can map to op",
    "start": "947839",
    "end": "955839"
  },
  {
    "text": "physical Pages you want because you have the the the read out the b uh primitive",
    "start": "955839",
    "end": "961199"
  },
  {
    "text": "cool so we also have another uh interesting vulnerability here is that",
    "start": "961199",
    "end": "966639"
  },
  {
    "text": "you know uh if we want to have a GPU mapping uh so we have to operate the I",
    "start": "966639",
    "end": "973000"
  },
  {
    "text": "VI so if we want to operate IU on arm 64 architecture then we should operate it",
    "start": "973000",
    "end": "979759"
  },
  {
    "text": "on in an arm 64 for sure however there is a bridge API where we can tell divide",
    "start": "979759",
    "end": "986360"
  },
  {
    "text": "dver that hey we are actually on mips so the device driver the GP driver will",
    "start": "986360",
    "end": "992560"
  },
  {
    "text": "install the page table in mi W first and then later in initialize the page tables",
    "start": "992560",
    "end": "997880"
  },
  {
    "text": "in arm 6 we later so as a result because we have a new architecture called arms",
    "start": "997880",
    "end": "1004120"
  },
  {
    "text": "the page tables are corrupted and once us Space Program call and map Cisco you can immediately see all kinds of",
    "start": "1004120",
    "end": "1010480"
  },
  {
    "text": "interesting data because page tables are corrupted okay um well so let's take a",
    "start": "1010480",
    "end": "1016759"
  },
  {
    "text": "look at the CPU side so C site um you can allocate bunch of virtual pages and",
    "start": "1016759",
    "end": "1022959"
  },
  {
    "text": "map to the physical pages so in general user space program has to reserve our P",
    "start": "1022959",
    "end": "1028600"
  },
  {
    "text": "handle telling the the divice driver like hey I want M like bun I want to have a bunch of physical Pages for",
    "start": "1028600",
    "end": "1034600"
  },
  {
    "text": "future use and then you can pass the PM to M map so the device driver will map",
    "start": "1034600",
    "end": "1040079"
  },
  {
    "text": "the uh vir Pages for you and there and and the device driver also has something",
    "start": "1040079",
    "end": "1045520"
  },
  {
    "text": "called iron for checking the number of memory map P for security purposes we will talk about later so for example if",
    "start": "1045520",
    "end": "1052880"
  },
  {
    "text": "we have two virtual Pages mapped to the same physical Pages then I count is equals to three because one by default",
    "start": "1052880",
    "end": "1059760"
  },
  {
    "text": "okay we also had to cover another concept here called pin memory so pin memory is use for data transfers from",
    "start": "1059760",
    "end": "1067080"
  },
  {
    "text": "the device to the host and according to my understanding that device D May preallocate some physical memory for uh",
    "start": "1067080",
    "end": "1073400"
  },
  {
    "text": "avoiding cost in data transfer so uh the part device dev has",
    "start": "1073400",
    "end": "1079440"
  },
  {
    "text": "Bridge API where you can U pay the physical memory Reserve by the PMR so",
    "start": "1079440",
    "end": "1084880"
  },
  {
    "text": "once you do that all the fysal memory are consider as pin memory for data transfer and there's a global State here",
    "start": "1084880",
    "end": "1090760"
  },
  {
    "text": "be on pin is set as foral for security purposes you may also has uh you may",
    "start": "1090760",
    "end": "1096280"
  },
  {
    "text": "also call another Bridge API to unpin the physical Pages you pinned um so these physical pages will be moved to a",
    "start": "1096280",
    "end": "1102600"
  },
  {
    "text": "glob C for King up later and then Global status being on pin will be updated as true so you know Let's see we allocate",
    "start": "1102600",
    "end": "1110000"
  },
  {
    "text": "page ABC and then we un pain page ABC so page ABC will be inserted to Global list",
    "start": "1110000",
    "end": "1117280"
  },
  {
    "text": "so how does these Pages get free it turns out that power device register",
    "start": "1117280",
    "end": "1122640"
  },
  {
    "text": "means kind of shrinker so shrinker is and internal C rains so when memory is",
    "start": "1122640",
    "end": "1129159"
  },
  {
    "text": "tied uh the scan object cack will be invoked to free all the pages in The glob list okay so let's say if we",
    "start": "1129159",
    "end": "1137240"
  },
  {
    "text": "allocate page a BC and we C UNP ABC then we have Global",
    "start": "1137240",
    "end": "1142320"
  },
  {
    "text": "list ABC right so however we can UNP the same page again so the global list will",
    "start": "1142320",
    "end": "1147960"
  },
  {
    "text": "be ABC ABC and as result we will have a page dou fre issue so if you remember",
    "start": "1147960",
    "end": "1154760"
  },
  {
    "text": "like a few slides before we have a global State here called be on pain so this is for preventing any double free",
    "start": "1154760",
    "end": "1161000"
  },
  {
    "text": "on physical pages but why it doesn't work so it turns out that PV sech is not",
    "start": "1161000",
    "end": "1166799"
  },
  {
    "text": "enable in production it is only enabled when code static and N Checker is",
    "start": "1166799",
    "end": "1171840"
  },
  {
    "text": "enabled so if someone tries to check if my code secure with static code and N",
    "start": "1171840",
    "end": "1177120"
  },
  {
    "text": "Checker the Asser will be enabled but in production it does nothing so this is",
    "start": "1177120",
    "end": "1183039"
  },
  {
    "text": "what cv22 2122 is about and if we visit",
    "start": "1183039",
    "end": "1189159"
  },
  {
    "text": "the existing Security checks um if phook pages are mapped it to somewhere else",
    "start": "1189159",
    "end": "1194720"
  },
  {
    "text": "like you know we have I count about one so the physical pages not allowed to be on pain so let me explain this uh if we",
    "start": "1194720",
    "end": "1202440"
  },
  {
    "text": "call the FL function here first all we create PMI handle and we um create CPU",
    "start": "1202440",
    "end": "1208600"
  },
  {
    "text": "virtual Pages by m map we cannot unpin the memory because if we can do so then",
    "start": "1208600",
    "end": "1214720"
  },
  {
    "text": "what happens here is that virtual pages will ma to physical pages that will be free later by L con shrinker so that's",
    "start": "1214720",
    "end": "1221480"
  },
  {
    "text": "why the I account here to prevent such things happen however there's a sub of",
    "start": "1221480",
    "end": "1226960"
  },
  {
    "text": "logic B here to backass security check if we create pin first and then unpin the memory uh Second and it will succeed",
    "start": "1226960",
    "end": "1235039"
  },
  {
    "text": "because at this time we didn't map any memory so these fys pages are already put into the global list for free later",
    "start": "1235039",
    "end": "1242039"
  },
  {
    "text": "and then we can c a map to map this to map the uh to get a bunch of virtual pages so what happens here is that we",
    "start": "1242039",
    "end": "1248720"
  },
  {
    "text": "will have a bunch of virtual Pages mapped to the physical pages that will be free by lens con shrinker so um we",
    "start": "1248720",
    "end": "1256400"
  },
  {
    "text": "can effectively trigger lens con shrinker by push enough enough memory pressure to L kernel by doing this again",
    "start": "1256400",
    "end": "1263480"
  },
  {
    "text": "again so we will have a bunch of virtual Pages map to the Faceook pages that will be free later so this is what the CV",
    "start": "1263480",
    "end": "1270600"
  },
  {
    "text": "2021 3985 is about it was discovered in late February so it's a very uh set",
    "start": "1270600",
    "end": "1277279"
  },
  {
    "text": "logic bug to bypass security check but user space program can read and write op fre physical pages and I personally call",
    "start": "1277279",
    "end": "1284880"
  },
  {
    "text": "it as power rout okay so um that's type a routine but there's one more issue",
    "start": "1284880",
    "end": "1291120"
  },
  {
    "text": "here is that some devices don't allow you to map on GPU device especially if",
    "start": "1291120",
    "end": "1297200"
  },
  {
    "text": "you have device with higher versions of uh ddk okay so who has a privilege to map",
    "start": "1297200",
    "end": "1304360"
  },
  {
    "text": "of GPU device if you check on the SX policy here uh you can see there will be",
    "start": "1304360",
    "end": "1310000"
  },
  {
    "text": "a bunch of users are able to map on the GPU devices um and if us Space Program",
    "start": "1310000",
    "end": "1317159"
  },
  {
    "text": "are really not allowed to on GPU device how does the open C API works because",
    "start": "1317159",
    "end": "1323120"
  },
  {
    "text": "the the svog apis will return a CPU virtual address allocated from the GPU",
    "start": "1323120",
    "end": "1329600"
  },
  {
    "text": "driver so what I did in past is to uh take a look at the openc libraries OB",
    "start": "1329600",
    "end": "1335480"
  },
  {
    "text": "Library um is actually implemented by a St vendor Library so if you uh if you",
    "start": "1335480",
    "end": "1340720"
  },
  {
    "text": "have a medch device you can see the powerr and medch vand library for implementing all the openc apis and and",
    "start": "1340720",
    "end": "1348760"
  },
  {
    "text": "by reversing these vendor apis I basically had two finding so the first finding here is that the the US space",
    "start": "1348760",
    "end": "1355760"
  },
  {
    "text": "vendor library has more rigorous Security check than the C model and second uh the vendor Library will talk",
    "start": "1355760",
    "end": "1362320"
  },
  {
    "text": "to the higher privileg backhand services to unmap uh GPU driver and get the uh",
    "start": "1362320",
    "end": "1368760"
  },
  {
    "text": "virtual P virtual page address back so here is the bypass of the SM Linux here",
    "start": "1368760",
    "end": "1374279"
  },
  {
    "text": "so we have chart process here call the openc API anog and child process here is",
    "start": "1374279",
    "end": "1380200"
  },
  {
    "text": "PES by parent so when the child process tries to create PMR because parent",
    "start": "1380200",
    "end": "1385400"
  },
  {
    "text": "process is able to intercept all the Cal by Petri so we",
    "start": "1385400",
    "end": "1390760"
  },
  {
    "text": "can so we can ask uh so parent process to hijack the control flow of the child",
    "start": "1390760",
    "end": "1396720"
  },
  {
    "text": "process to cause onp PMR immediately after PMR is created and then child",
    "start": "1396720",
    "end": "1402120"
  },
  {
    "text": "process will use this vendor library to unmap uh GPU drivers and get a CPU of or",
    "start": "1402120",
    "end": "1407679"
  },
  {
    "text": "address back and in this way we can effectively backpass as Linux and Trigger the uh",
    "start": "1407679",
    "end": "1413840"
  },
  {
    "text": "probability so the final part here is about uh how to R your device similar to device by D pipe V you may also have a",
    "start": "1413840",
    "end": "1422240"
  },
  {
    "text": "chance to load C modules uh but human mind power is something much more powerful because it is p physical page",
    "start": "1422240",
    "end": "1430240"
  },
  {
    "text": "is free so there will be lots of method to rad a device by power Ro vulnerabilities you can CW page tables",
    "start": "1430240",
    "end": "1436919"
  },
  {
    "text": "you can um CW binary RS you can attack know in a memory corruption ways or traditional ways so I'm going to talk",
    "start": "1436919",
    "end": "1444760"
  },
  {
    "text": "about transitional ways so first of all uh the first thing I will do is just sploot of CH process with different",
    "start": "1444760",
    "end": "1451159"
  },
  {
    "text": "names so because we can read a right opy new um fre pH Pages we can find the",
    "start": "1451159",
    "end": "1456679"
  },
  {
    "text": "exact test structures and is CR CR address and then we can find the victim",
    "start": "1456679",
    "end": "1462200"
  },
  {
    "text": "files by F cred overr right the private data for example we can control the private data of Ash so we can use the I",
    "start": "1462200",
    "end": "1470760"
  },
  {
    "text": "code from Ashman to implement an OP re primitive and the next step we are going to do is to D kernel image well uh you",
    "start": "1470760",
    "end": "1478880"
  },
  {
    "text": "know the PMR kernel structure has a field called as annotations which is specified by us space so we can find",
    "start": "1478880",
    "end": "1486640"
  },
  {
    "text": "find the PMR structure where PMR structure contains a kernel data text readon pointers so we can dump a lot of",
    "start": "1486640",
    "end": "1493279"
  },
  {
    "text": "current informations and find where is the possible address of as forcing off",
    "start": "1493279",
    "end": "1499480"
  },
  {
    "text": "and the final part here is to write crash structure so one thing I want to I want to say is that because we are",
    "start": "1499480",
    "end": "1505240"
  },
  {
    "text": "writing a right combin pages so we probably have just Mo CPU cat for a while cool so here is the demo video for",
    "start": "1505240",
    "end": "1512679"
  },
  {
    "text": "routing Ren 9 a device it's one of the most popular device on this planet so uh",
    "start": "1512679",
    "end": "1519360"
  },
  {
    "text": "let's get",
    "start": "1519360",
    "end": "1521760"
  },
  {
    "text": "started so now it's try to create a lot of P structures find the C data pointers",
    "start": "1525799",
    "end": "1531720"
  },
  {
    "text": "and then create a lot of CH process here um to get the credential",
    "start": "1531720",
    "end": "1538559"
  },
  {
    "text": "structure so it may take a while U and now we find the file structure we CRA",
    "start": "1542880",
    "end": "1548360"
  },
  {
    "text": "private data so we can use the Ashman for preal right Primitives uh and then",
    "start": "1548360",
    "end": "1553600"
  },
  {
    "text": "we can Dum a lot of curent informations for finding where the part where the SD links and forcing is and then we can",
    "start": "1553600",
    "end": "1560279"
  },
  {
    "text": "turn off later and then the final step here uh is",
    "start": "1560279",
    "end": "1567840"
  },
  {
    "text": "to get a root process uh so the way how it work here is to you know search the",
    "start": "1567840",
    "end": "1573240"
  },
  {
    "text": "physical memory fix memory again again and try to find our credential file and",
    "start": "1573240",
    "end": "1578320"
  },
  {
    "text": "once we find it we will temper all the important field like u20 so we have a",
    "start": "1578320",
    "end": "1584720"
  },
  {
    "text": "ria uh it might take a while depends on exact memory uh the depend on situation",
    "start": "1584720",
    "end": "1591240"
  },
  {
    "text": "of the physical memories like sometimes you may wait for a while but keep in mind this kind of bability is very",
    "start": "1591240",
    "end": "1597080"
  },
  {
    "text": "stable because you don't have to do like keep spre you don't have to worry about KSL alignment the only thing you have",
    "start": "1597080",
    "end": "1603840"
  },
  {
    "text": "you can do is to search memory again again and find the interesting con structure you want um so basically means",
    "start": "1603840",
    "end": "1611799"
  },
  {
    "text": "if you attack device by this vulnerability vulnerability the device won't crash so in my with a while now we",
    "start": "1611799",
    "end": "1619880"
  },
  {
    "text": "hijack the Qui green structure and we have Ro Shi on redm KN device and we can",
    "start": "1619880",
    "end": "1625799"
  },
  {
    "text": "contr device now thank you and please welcome John for introducing a",
    "start": "1625799",
    "end": "1632020"
  },
  {
    "text": "[Applause] project thanks jingu so the",
    "start": "1632020",
    "end": "1638679"
  },
  {
    "text": "vulnerabilities that jingu and Richard discovered are part of a broad Google wide effort to make the Android",
    "start": "1638679",
    "end": "1643799"
  },
  {
    "text": "ecosystem more secure and this includes strengthening the security of our third party OEM Partners the way that we find",
    "start": "1643799",
    "end": "1651039"
  },
  {
    "text": "informed partners and then publicly disclose these security vulnerabilities all takes place through this program",
    "start": "1651039",
    "end": "1656720"
  },
  {
    "text": "called the Android partner vulnerability initiative or appy for sure so I'm sure",
    "start": "1656720",
    "end": "1661919"
  },
  {
    "text": "you're familiar that Android incorporates security features across the entire industry and we always try to",
    "start": "1661919",
    "end": "1667640"
  },
  {
    "text": "make sure our devices are really safe and secure we also hold developers and device manufacturers to these high",
    "start": "1667640",
    "end": "1673640"
  },
  {
    "text": "standards as well as part of that effort we have a range of existing programs that I'm sure many of you are probably",
    "start": "1673640",
    "end": "1679600"
  },
  {
    "text": "already familiar with one of them being the Google bug buny program and also the Android bug buny program the Android",
    "start": "1679600",
    "end": "1686039"
  },
  {
    "text": "partner vulnerability initiative adds another layer of security for this targeted set of Android oems the way it",
    "start": "1686039",
    "end": "1692399"
  },
  {
    "text": "works is that any Google employee on any team if they find a vulnerability that affects a third party OEM can report",
    "start": "1692399",
    "end": "1698880"
  },
  {
    "text": "their finding through apbi where we then take that vulnerability perform reproduction identify all the effective",
    "start": "1698880",
    "end": "1705279"
  },
  {
    "text": "partner builds and then disclose those builds and issues to the OEM partners that are affected finally we have public",
    "start": "1705279",
    "end": "1711720"
  },
  {
    "text": "disclosure and Patch advisory so I'm not sure many people know about this link but that link on the screen is a link to",
    "start": "1711720",
    "end": "1718519"
  },
  {
    "text": "all of our publicly disclosed issues through this program you should take a look I'm pretty sure not many people know about",
    "start": "1718519",
    "end": "1725480"
  },
  {
    "text": "this so for this specific case of the power VR issues the process was a little bit more complicated uh the problem is",
    "start": "1725480",
    "end": "1732559"
  },
  {
    "text": "that we're not tasked with just disclosing to imagination technologies that owns and manages power VR but",
    "start": "1732559",
    "end": "1738320"
  },
  {
    "text": "there's so many Downstream oems that also utilize these drivers so what we had to do is we had to First disclose to",
    "start": "1738320",
    "end": "1744559"
  },
  {
    "text": "imagination Technologies all the various cves found during this research and ensure that imagination Technologies had",
    "start": "1744559",
    "end": "1750840"
  },
  {
    "text": "the resources they need to issue patches then we went to all the downstream oems and we made sure that they had the",
    "start": "1750840",
    "end": "1756960"
  },
  {
    "text": "patches once they were available and made sure they had the ability to go and Implement patches as well finally we",
    "start": "1756960",
    "end": "1762360"
  },
  {
    "text": "disclose all of these issues on our apy issue tracker that I mentioned earlier the following statement was provided by",
    "start": "1762360",
    "end": "1767840"
  },
  {
    "text": "m ation Technologies and it touches on how they're looking to continue to engage with the appv program to benefit",
    "start": "1767840",
    "end": "1773480"
  },
  {
    "text": "the security of the entire industry in the space I'd like to close this briefing",
    "start": "1773480",
    "end": "1779320"
  },
  {
    "text": "with a few key takeaways for developers and researchers essentially the takeaways for driver developers comes",
    "start": "1779320",
    "end": "1785080"
  },
  {
    "text": "down to two main things the first sanitize user inputs from user mode paying particular attention to sign and",
    "start": "1785080",
    "end": "1791559"
  },
  {
    "text": "unsigned issues and second make sure that you're locking down accessible functionality to the minimum",
    "start": "1791559",
    "end": "1796960"
  },
  {
    "text": "functionality required driver developers can go one step further limit the driver to very clearly",
    "start": "1796960",
    "end": "1802679"
  },
  {
    "text": "understood purpose and make sure that you're incorporating fuzz testing and code review as part of your development life",
    "start": "1802679",
    "end": "1809399"
  },
  {
    "text": "cycle for researchers memory mapping invisibility tends to be a reoccurring theme in this space there's been",
    "start": "1809399",
    "end": "1815880"
  },
  {
    "text": "multiple cves and drivers for various Hardware processing units that have been found over the past couple of years",
    "start": "1815880",
    "end": "1821600"
  },
  {
    "text": "outside of the findings that we've touched on during this talk we've included examples to framar rout Qualcomm and Samsung CB in the resources",
    "start": "1821600",
    "end": "1829080"
  },
  {
    "text": "slide at the end if you really want to learn more the underlying question Still Remains have these power VR issues been",
    "start": "1829080",
    "end": "1835480"
  },
  {
    "text": "found before and not reported it's possible some of the issues that we were discovered were not hard to identify and",
    "start": "1835480",
    "end": "1842159"
  },
  {
    "text": "I can tell you from firsthand experience once shingu found the first Power VR issue the rest of them followed very",
    "start": "1842159",
    "end": "1847960"
  },
  {
    "text": "shortly afterwards ioo fuzzing isn't necessarily simple and there's a link to another black hat talk that happened a",
    "start": "1847960",
    "end": "1854519"
  },
  {
    "text": "couple years ago in the resources slide that talks about fuzzing kernel drivers with interface awareness and really the",
    "start": "1854519",
    "end": "1861080"
  },
  {
    "text": "authors used this method to find other cves in the mediatech cmdq driver these",
    "start": "1861080",
    "end": "1866440"
  },
  {
    "text": "bugs were found using much simpler methods and much simpler approaches if this talk inspires you to go out and",
    "start": "1866440",
    "end": "1872080"
  },
  {
    "text": "find your own type of vulnerabilities I encourage you to keep in mind that you can submit these types of issues to the",
    "start": "1872080",
    "end": "1877200"
  },
  {
    "text": "Android bug bunny program where they're going to be assessed and then evaluated to see if they have underlying impact to",
    "start": "1877200",
    "end": "1882320"
  },
  {
    "text": "the Android devices or ecosystem so with that in closing we wanted to share this list of resources",
    "start": "1882320",
    "end": "1888679"
  },
  {
    "text": "resour Resources with driver developers researchers and the security Community",
    "start": "1888679",
    "end": "1893799"
  },
  {
    "text": "as a whole if you want to dive deeper into this research so I really appreciate all of you coming to our talk today and we look forward to answering",
    "start": "1893799",
    "end": "1900200"
  },
  {
    "text": "your questions thank you [Applause] [Music]",
    "start": "1900200",
    "end": "1908249"
  },
  {
    "text": "[Music]",
    "start": "1912110",
    "end": "1915200"
  }
]