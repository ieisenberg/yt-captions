[
  {
    "text": "you are in Mandalay EF right now getting ready to listen to Matthew Graber speak",
    "start": "320",
    "end": "5560"
  },
  {
    "text": "about abusing Windows management instrumentation to build a persistent asynchronous and Fess back door uh as",
    "start": "5560",
    "end": "12320"
  },
  {
    "text": "usual please make sure that your phones are silenced uh we don't want to hear your ring tones uh this is Matthew's",
    "start": "12320",
    "end": "19320"
  },
  {
    "text": "show so Matthew thank you all",
    "start": "19320",
    "end": "26119"
  },
  {
    "text": "right thanks all right right so I'm sure many",
    "start": "26119",
    "end": "31160"
  },
  {
    "text": "of you are already familiar with wmi otherwise you probably wouldn't be here um wmi is really an amazing technology",
    "start": "31160",
    "end": "38480"
  },
  {
    "text": "super old school been around forever it's really powerful for administrators and consequently it's really powerful",
    "start": "38480",
    "end": "45079"
  },
  {
    "text": "for attackers and also Defenders and I'll touch on on the the defensive side briefly at the end all right but we're",
    "start": "45079",
    "end": "52199"
  },
  {
    "text": "here to talk primarily about offense all right so some things you may not be",
    "start": "52199",
    "end": "57719"
  },
  {
    "text": "aware of attackers are abusing wmi in the wild attacks go back as far as 2010",
    "start": "57719",
    "end": "65080"
  },
  {
    "text": "at least as far as I'm aware of uh those are the going back to 2010 is like the",
    "start": "65080",
    "end": "70159"
  },
  {
    "text": "first publicly documented case of uh malicious wmi in use okay uh some of you",
    "start": "70159",
    "end": "76640"
  },
  {
    "text": "may not be that familiar with wmi in that case I'll be going over some of the basics all right and you may not know",
    "start": "76640",
    "end": "83280"
  },
  {
    "text": "how to prevent and detect such attacks um later on I'll get into some pretty",
    "start": "83280",
    "end": "88799"
  },
  {
    "text": "cool techniques how you use wmi against wmi attacks itself as well as some",
    "start": "88799",
    "end": "94280"
  },
  {
    "text": "additional mitigations all right now um You may only be aware of its malicious",
    "start": "94280",
    "end": "99720"
  },
  {
    "text": "capabilities as described in public reports so I highlight this because um",
    "start": "99720",
    "end": "105159"
  },
  {
    "text": "you know you you only know what what you know so um I I plan on describing some",
    "start": "105159",
    "end": "110719"
  },
  {
    "text": "theoretical attack factors um as well as uh some additional uh wmi attacks that",
    "start": "110719",
    "end": "117119"
  },
  {
    "text": "uh we at uh mandiant and fireye have seen in the wild that you may not be aware of",
    "start": "117119",
    "end": "122640"
  },
  {
    "text": "yet all right with that said I'm a malare reverse engineer at fire I'm on",
    "start": "122640",
    "end": "128720"
  },
  {
    "text": "our fire lab's Advanced reverse engineering team um we've got a really bright group of guys that that we work",
    "start": "128720",
    "end": "135200"
  },
  {
    "text": "with and uh we also just uh released our second Flareon challenge so uh check",
    "start": "135200",
    "end": "140319"
  },
  {
    "text": "that out on uh F flare on.com all right uh I've spoken at various conferences",
    "start": "140319",
    "end": "146519"
  },
  {
    "text": "and uh as you may or may not be aware I am a huge Powershell Fanboy all",
    "start": "146519",
    "end": "154400"
  },
  {
    "text": "right okay so sophisticated attackers are living off the land and I want to",
    "start": "155000",
    "end": "160680"
  },
  {
    "text": "give a shout out to to my buddy Chris Campbell who kind of coined that phrase in this context all right so basically",
    "start": "160680",
    "end": "168319"
  },
  {
    "text": "any tool that's useful to assist admin is going to be extremely useful to an attacker as well right so um I would",
    "start": "168319",
    "end": "176920"
  },
  {
    "text": "like to think that you know that this is probably like a huge security gap for",
    "start": "176920",
    "end": "182040"
  },
  {
    "text": "those security vendors out there who are focusing really heavily on you know",
    "start": "182040",
    "end": "187400"
  },
  {
    "text": "scripts or binaries being dropped to disk this is entirely unnecessary as you'll see wmi is just one means to",
    "start": "187400",
    "end": "194400"
  },
  {
    "text": "execute your malware without dropping anything to dis of course there's Powershell as well which enables you to",
    "start": "194400",
    "end": "200840"
  },
  {
    "text": "execute really any conceivable payload that you would be able to write and see in user mode uh entirely in memory using",
    "start": "200840",
    "end": "209040"
  },
  {
    "text": "Powershell all right now I I I I like to say this a lot",
    "start": "209040",
    "end": "216599"
  },
  {
    "text": "all right if you can dream it all right from like an offensive researchers perspective it's probably already been",
    "start": "216599",
    "end": "222360"
  },
  {
    "text": "done right so I said that the public reports of wmi attacks go back to 2010",
    "start": "222360",
    "end": "228720"
  },
  {
    "text": "right well wmi has been around since like the dawn of time like since uh Windows 98 right so who's to say that",
    "start": "228720",
    "end": "235480"
  },
  {
    "text": "that is the first instance of wmi attacks all right so there's probably",
    "start": "235480",
    "end": "240959"
  },
  {
    "text": "people in this audience people not present here um who you know are already",
    "start": "240959",
    "end": "246519"
  },
  {
    "text": "experts on wmi but uh they're probably not the ones who are speaking at at conferences all",
    "start": "246519",
    "end": "253079"
  },
  {
    "text": "right so little outline here I'm going to cover the basics some of the wmi",
    "start": "253079",
    "end": "258199"
  },
  {
    "text": "utilities so how you go about actually interfacing with this technology um one",
    "start": "258199",
    "end": "263440"
  },
  {
    "text": "of those ways is using uh WM query language wql it's very simple uh SQL",
    "start": "263440",
    "end": "269320"
  },
  {
    "text": "like Syntax for working with this stuff um and then I'll cover wmi Eventing and",
    "start": "269320",
    "end": "274639"
  },
  {
    "text": "remote wmi um these are like what I consider to be the the killer features of wmi all right um I'll briefly go into",
    "start": "274639",
    "end": "284520"
  },
  {
    "text": "uh how wmi has been used by attackers in the past as well as I'll cover some like",
    "start": "284520",
    "end": "290080"
  },
  {
    "text": "theoretical attack vectors that I personally haven't seen used in the wild um I'll also touch upon providers",
    "start": "290080",
    "end": "296840"
  },
  {
    "text": "providers are uh dll DLS or device drivers that really provide wmi all of",
    "start": "296840",
    "end": "302039"
  },
  {
    "text": "its functionality uh under the hood um I'll wrap this up with um like",
    "start": "302039",
    "end": "307960"
  },
  {
    "text": "pure proof of concept W Bei backd door that I developed um all it is is a",
    "start": "307960",
    "end": "313039"
  },
  {
    "text": "Powershell script it's just an installer but it doesn't require that the um that",
    "start": "313039",
    "end": "319080"
  },
  {
    "text": "the target system have Powershell installed on it so you theoretically could install this on a Windows 98",
    "start": "319080",
    "end": "325440"
  },
  {
    "text": "machine and then I'll uh cover uh detection mechanisms and uh attack",
    "start": "325440",
    "end": "330680"
  },
  {
    "text": "mitigations all right the basics so wmi window Windows management",
    "start": "330680",
    "end": "336319"
  },
  {
    "text": "instrumentation it's been around forever like literally since Windows 98 and nt4",
    "start": "336319",
    "end": "342120"
  },
  {
    "text": "all right so from your Windows 10 machine with Powershell on it you could",
    "start": "342120",
    "end": "347759"
  },
  {
    "text": "easily run payloads on a Windows 98 or nt4 system uh the technology",
    "start": "347759",
    "end": "352840"
  },
  {
    "text": "fundamentally has not changed um system administrators have been aware of this",
    "start": "352840",
    "end": "358600"
  },
  {
    "text": "technology forever um I I think it was like just recently that this has really come to the",
    "start": "358600",
    "end": "364120"
  },
  {
    "text": "attention of uh security researchers and pentesters and N red teams all right it",
    "start": "364120",
    "end": "369759"
  },
  {
    "text": "could be used to do some really useful things okay we can read from the registry write to the registry uh",
    "start": "369759",
    "end": "375960"
  },
  {
    "text": "examine the file system drop files read files all right uh you can also execute",
    "start": "375960",
    "end": "382160"
  },
  {
    "text": "commands all right uh this this is used pretty heavily um wmi is used as a",
    "start": "382160",
    "end": "388520"
  },
  {
    "text": "technique to perform lateral movement and code execution uh primarily using the uh win32 process uh",
    "start": "388520",
    "end": "395840"
  },
  {
    "text": "create method and you can also subscribe to events and these events uh persist",
    "start": "395840",
    "end": "401400"
  },
  {
    "text": "across reboots and uh don't drop any files to disk other than uh a single",
    "start": "401400",
    "end": "407440"
  },
  {
    "text": "file which AV would never touch and what is that file it's objects. dat in system32 wbm repository",
    "start": "407440",
    "end": "416120"
  },
  {
    "text": "all right this is the wmi repository where all persistent w Mi objects as well as name space definitions uh class",
    "start": "416120",
    "end": "423520"
  },
  {
    "text": "definitions uh everything is stored in here all right this is a completely undocumented format until tomorrow when",
    "start": "423520",
    "end": "432120"
  },
  {
    "text": "uh we're going to be so myself and my colleagues uh claudo and and Willie um",
    "start": "432120",
    "end": "437319"
  },
  {
    "text": "are going to be releasing a white paper that's going to come out on the the fire ey uh blog um that that covers um how",
    "start": "437319",
    "end": "443960"
  },
  {
    "text": "how to parse all this out and also we're going to be speaking at Defcon about using wmi for defense and performing",
    "start": "443960",
    "end": "449800"
  },
  {
    "text": "forensics on this objects. DAT file all right so uh Willi and claudo did some",
    "start": "449800",
    "end": "455160"
  },
  {
    "text": "really amazing work reversing this stuff and uh their uh forensic parsers are",
    "start": "455160",
    "end": "460360"
  },
  {
    "text": "available online right now so please check those out all right the wmi settings just for your general knowledge",
    "start": "460360",
    "end": "467879"
  },
  {
    "text": "um these are stored in the Microsoft uh wbm registry key um you can also access",
    "start": "467879",
    "end": "474680"
  },
  {
    "text": "them via the win32 wmi setting uh class instance all right so uh this is one of",
    "start": "474680",
    "end": "481720"
  },
  {
    "text": "the things of interest in here is uh the auto recover moths entry so one",
    "start": "481720",
    "end": "488400"
  },
  {
    "text": "previously popular persistence technique was to drop a moth file um onto uh",
    "start": "488400",
    "end": "494840"
  },
  {
    "text": "victim system run moff comp. exi and then that would be consumed and uh and",
    "start": "494840",
    "end": "500360"
  },
  {
    "text": "then you you would have your persistence mechanism so uh MFS are kind of cool um",
    "start": "500360",
    "end": "505720"
  },
  {
    "text": "they're not necessary in my opinion but you can drop moffs if you want to persist your wmi payloads Beyond uh wmi",
    "start": "505720",
    "end": "513760"
  },
  {
    "text": "repository corruption so I don't know why you'd want to do that necessarily uh it does create additional forensic",
    "start": "513760",
    "end": "519440"
  },
  {
    "text": "artifacts but it's something to be aware of that you as a Defender should be looking",
    "start": "519440",
    "end": "524839"
  },
  {
    "text": "at all right so how do we interact with this stuff yay Powershell po shell is",
    "start": "524839",
    "end": "530760"
  },
  {
    "text": "like the best utility out there for interacting with wmi uh this is a",
    "start": "530760",
    "end": "536240"
  },
  {
    "text": "Powershell version 3 window that you're looking at and and what you see here is",
    "start": "536240",
    "end": "541440"
  },
  {
    "text": "uh a grouping of uh both wmi commandlets and Sim commandlets there's not really",
    "start": "541440",
    "end": "546600"
  },
  {
    "text": "too much of a difference uh between the two only the wmi chalets are like the",
    "start": "546600",
    "end": "551680"
  },
  {
    "text": "the Legacy ones so these are present going all the way back to Powershell one uh the Sim commandlets uh were",
    "start": "551680",
    "end": "557680"
  },
  {
    "text": "introduced in version three and above and they do they do the same exact thing",
    "start": "557680",
    "end": "563040"
  },
  {
    "text": "as the wmi commandlets only they talk both protocols which I'll get into briefly so the uh both dcom and winrm",
    "start": "563040",
    "end": "571680"
  },
  {
    "text": "which uh is going to be present on more modern Windows os's all right some additional utilities",
    "start": "571680",
    "end": "577600"
  },
  {
    "text": "you should be aware of uh I'm sure many of you are familiar with whim. exi okay",
    "start": "577600",
    "end": "583040"
  },
  {
    "text": "this is a really powerful utility it does have some limitations uh Powershell in my opinion is always going to be uh",
    "start": "583040",
    "end": "589160"
  },
  {
    "text": "the best way to work with this stuff um there's winrm so if the winrm or so I'm",
    "start": "589160",
    "end": "595720"
  },
  {
    "text": "going to use like the terms winrm and Powershell remoting interchangeably if that service is listening and say like",
    "start": "595720",
    "end": "601680"
  },
  {
    "text": "application white listing for whatever reason like blocks Powershell uh you could run winrm to enumerate um uh wmi",
    "start": "601680",
    "end": "609160"
  },
  {
    "text": "object instances you could execute wmi methods uh it's a pretty powerful",
    "start": "609160",
    "end": "614640"
  },
  {
    "text": "utility if uh that's what you have to fall back to uh wbm test is really cool it's like a really crappy uh like gooey",
    "start": "614640",
    "end": "622399"
  },
  {
    "text": "interface it's it serves as like a like like a test utility um I've run",
    "start": "622399",
    "end": "629600"
  },
  {
    "text": "like in various Assessments in the past I've run into cases where like I couldn't run wii. exe or powershell.exe",
    "start": "629600",
    "end": "635440"
  },
  {
    "text": "so this was a good fallback um you there's pretty much nothing that you",
    "start": "635440",
    "end": "640480"
  },
  {
    "text": "can't do with regards to wmi Via this Tool uh you just have to get over the crappy interface uh there's a bunch of",
    "start": "640480",
    "end": "646680"
  },
  {
    "text": "Linux utilities as well uh wmic will accept any like um any wmi query uh W WM",
    "start": "646680",
    "end": "655800"
  },
  {
    "text": "is basically like a wrapper for the win32 uh process create method you know",
    "start": "655800",
    "end": "661279"
  },
  {
    "text": "for like lateral movement and code execution and then a good buddy of mine uh skip Duck wall uh patch WM so that it",
    "start": "661279",
    "end": "668079"
  },
  {
    "text": "will accept uh ntlm hashes which is pretty cool um there's some additional interfaces as well VB script jscript um",
    "start": "668079",
    "end": "675760"
  },
  {
    "text": "if you're going to uh incorporate this into your code you have some Comm apis as well as some pretty full featured uh",
    "start": "675760",
    "end": "682399"
  },
  {
    "text": "net classes all right so if we're going to interact with this stuff over the",
    "start": "682399",
    "end": "688120"
  },
  {
    "text": "network which is pretty amazing that we can do this because on every system this uh uh the wmi service is already",
    "start": "688120",
    "end": "695399"
  },
  {
    "text": "listening all right so uh the protocol that's been around forever that is still",
    "start": "695399",
    "end": "701040"
  },
  {
    "text": "likely listening on every single one of your systems is dcom all right TCP Port 135 um so Port 135 is used to establish",
    "start": "701040",
    "end": "709680"
  },
  {
    "text": "an initial connection and then uh all subsequent data is passed uh via a",
    "start": "709680",
    "end": "715399"
  },
  {
    "text": "secondary uh TCP port number specified in uh the the range that you see here in",
    "start": "715399",
    "end": "720560"
  },
  {
    "text": "this uh registry key uh you can actually use dcom config or just modify the registry entry directly to have it only",
    "start": "720560",
    "end": "727880"
  },
  {
    "text": "use a single port so that you can maybe make it like a little more firewall friendly all",
    "start": "727880",
    "end": "732959"
  },
  {
    "text": "right so here's an example of me using um I'm I'm calling get wmi object and I",
    "start": "732959",
    "end": "739360"
  },
  {
    "text": "want to enumerate uh processes on this remote system so it's really simple you",
    "start": "739360",
    "end": "746279"
  },
  {
    "text": "just uh provide the the host name or IP address the credential um so like you provide like the domain or the host name",
    "start": "746279",
    "end": "753279"
  },
  {
    "text": "and and the username it'll prompt you for credentials and then you get a nice process",
    "start": "753279",
    "end": "759120"
  },
  {
    "text": "listing all right uh the other protocol the this like modern protocol uh for",
    "start": "759160",
    "end": "764199"
  },
  {
    "text": "like uh it's called Powershell remoting or winrm uh it is a soap based protocol",
    "start": "764199",
    "end": "769480"
  },
  {
    "text": "it's encrypted by default um so like if you were to install like Server 2012 R2",
    "start": "769480",
    "end": "775600"
  },
  {
    "text": "I believe like in server core mode uh this would be the only port listening so uh you would have Port uh 5985 listening",
    "start": "775600",
    "end": "783639"
  },
  {
    "text": "uh there's a really handy Powershell commandlet uh it's called test DWS man it's like a really convenient Port",
    "start": "783639",
    "end": "789839"
  },
  {
    "text": "scanner uh that doesn't require authentication uh so like you could sweep the Enterprise to see what",
    "start": "789839",
    "end": "795279"
  },
  {
    "text": "machines are listening on on this handy protocol uh also you can configure all of the settings uh uh within pshell",
    "start": "795279",
    "end": "803399"
  },
  {
    "text": "using the Ws man uh PS drive so another reason Powershell is really cool is",
    "start": "803399",
    "end": "808880"
  },
  {
    "text": "because of the concept of PS drives right so like you could do an LS on the file system right and you would get what",
    "start": "808880",
    "end": "814360"
  },
  {
    "text": "you expect uh a directory and and file listing Well you can also do an LS on",
    "start": "814360",
    "end": "820000"
  },
  {
    "text": "the registry right so LS hklm colon backlash like that's really cool uh you can also use that to uh look through",
    "start": "820000",
    "end": "828160"
  },
  {
    "text": "like the certificate store so just one of many reasons Powershell is is really",
    "start": "828160",
    "end": "834040"
  },
  {
    "text": "really handy all right Eventing this is that killer feature",
    "start": "834040",
    "end": "839279"
  },
  {
    "text": "that attackers love to take advantage of all right so using wmi we can trigger",
    "start": "839279",
    "end": "845360"
  },
  {
    "text": "off nearly any conceivable event in the operating system and the way that's achieved is in order to register a wmi",
    "start": "845360",
    "end": "854199"
  },
  {
    "text": "event you need three things all right an event filter so this is the action that",
    "start": "854199",
    "end": "860680"
  },
  {
    "text": "you want to trigger off uh off of so this will take the form of a uh wql",
    "start": "860680",
    "end": "866959"
  },
  {
    "text": "query uh the consumer so upon firing that event what are you going to do",
    "start": "866959",
    "end": "872600"
  },
  {
    "text": "right so uh Microsoft provides five standard uh event consumers uh two of",
    "start": "872600",
    "end": "878199"
  },
  {
    "text": "which are very useful for attackers and then you just bind the two of those",
    "start": "878199",
    "end": "883279"
  },
  {
    "text": "together the trigger and then the the payload by using a filter to Consumer",
    "start": "883279",
    "end": "888399"
  },
  {
    "text": "binding all right um there's two ways in which these events can be executed uh",
    "start": "888399",
    "end": "894360"
  },
  {
    "text": "you can run them locally in just a host process um for example examp you can call like register dwmi event to run it",
    "start": "894360",
    "end": "901480"
  },
  {
    "text": "locally in the Powershell process um the real power out of this is when you register a permanent wmi event consumer",
    "start": "901480",
    "end": "907880"
  },
  {
    "text": "um so it process across reboots and it also executes as system all right there's two types of",
    "start": "907880",
    "end": "914120"
  },
  {
    "text": "event classes intrinsic and extrinsic events so I'm listing out all of the",
    "start": "914120",
    "end": "919959"
  },
  {
    "text": "intrinsic events here so um wmi classes are organized hierarchically um by name",
    "start": "919959",
    "end": "926800"
  },
  {
    "text": "spaces so um one of the most popular Nam spaces is root simv V2 and when you're",
    "start": "926800",
    "end": "933839"
  },
  {
    "text": "scripting with wmi this this is the default Nam space that's used so there's some really useful classes in there uh",
    "start": "933839",
    "end": "940000"
  },
  {
    "text": "for both offense and defense So within every one of those classes you have these special uh system classes the",
    "start": "940000",
    "end": "948000"
  },
  {
    "text": "these events these intrinsic events uh and you can be really flexible with how",
    "start": "948000",
    "end": "953279"
  },
  {
    "text": "you create your uh event filters so for example if you wanted to enumerate at",
    "start": "953279",
    "end": "958839"
  },
  {
    "text": "running processes every time a new process is created it creates an instance of a win32 process object so",
    "start": "958839",
    "end": "966360"
  },
  {
    "text": "you might tap into the uh instance creation event and just filter out uh",
    "start": "966360",
    "end": "972720"
  },
  {
    "text": "instances of those win32 process objects um there's some hour I'll be discussing",
    "start": "972720",
    "end": "977920"
  },
  {
    "text": "shortly that both creates and modifies name spaces and it uses this as a C2",
    "start": "977920",
    "end": "983440"
  },
  {
    "text": "Channel there's another attack group that is creating and modifying wmi class",
    "start": "983440",
    "end": "989000"
  },
  {
    "text": "and using that as a pretty cool uh command and control Channel as well um",
    "start": "989000",
    "end": "994399"
  },
  {
    "text": "so in that case you would have uh the class creation event fire so if you were",
    "start": "994399",
    "end": "1000440"
  },
  {
    "text": "registered to to these types of events then you could gain some insights so as a Defender you might be able to uh",
    "start": "1000440",
    "end": "1007560"
  },
  {
    "text": "detect these things as an attacker um you should be mindful that these",
    "start": "1007560",
    "end": "1013680"
  },
  {
    "text": "events are going to trigger upon performing your malicious action all",
    "start": "1013680",
    "end": "1018839"
  },
  {
    "text": "right now there there's these uh specialized events called extrinsic events there aren't that many of them",
    "start": "1018839",
    "end": "1024280"
  },
  {
    "text": "but they're highly performant and you don't have to specify like a polling interval so these events fire",
    "start": "1024280",
    "end": "1030079"
  },
  {
    "text": "immediately upon uh each one of them occurring so there's some pretty interesting events that I've listed here",
    "start": "1030079",
    "end": "1037000"
  },
  {
    "text": "both for attackers and Defenders all right so win32 process start trace this fires immediately upon any process",
    "start": "1037000",
    "end": "1044038"
  },
  {
    "text": "starting so imagine there was some process uh like executable name that you",
    "start": "1044039",
    "end": "1049360"
  },
  {
    "text": "were targeting I don't know like Pro uh proc exp. exi and um upon triggering",
    "start": "1049360",
    "end": "1055200"
  },
  {
    "text": "that like you would just go and and kill that process um you could really get creative with these here uh from a",
    "start": "1055200",
    "end": "1061440"
  },
  {
    "text": "defense perspective imagine using uh triggering off of win32 module load",
    "start": "1061440",
    "end": "1066679"
  },
  {
    "text": "Trace all right this is fired upon um any dll XE uh device driver uh being",
    "start": "1066679",
    "end": "1073799"
  },
  {
    "text": "loaded okay um registry key change event registry value change event uh these",
    "start": "1073799",
    "end": "1079799"
  },
  {
    "text": "should be pretty self-explanatory very powerful all right so w my event filters",
    "start": "1079799",
    "end": "1087440"
  },
  {
    "text": "again I said um the events that you want to trigger off of these all take the form of a wql a Wy query language uh",
    "start": "1087440",
    "end": "1095799"
  },
  {
    "text": "query and so here are two uh examples of using these events um so using an uh",
    "start": "1095799",
    "end": "1103520"
  },
  {
    "text": "intrinsic and extrinsic query all right so um let's look at this first one here",
    "start": "1103520",
    "end": "1109000"
  },
  {
    "text": "this intrinsic query so at a high level what this is going to trigger off of is the creation",
    "start": "1109000",
    "end": "1117039"
  },
  {
    "text": "or modification of a any file that has a doc or doc X extension all right and the",
    "start": "1117039",
    "end": "1125919"
  },
  {
    "text": "way we uh kind of interpret this is uh we're interested in any event that fires",
    "start": "1125919",
    "end": "1132000"
  },
  {
    "text": "that is an instance creation event or an instance modification event of type of",
    "start": "1132000",
    "end": "1137840"
  },
  {
    "text": "Class Type type Sim data file all right so whenever any uh directory or file is created or modified it fires off these",
    "start": "1137840",
    "end": "1145159"
  },
  {
    "text": "events now we have to be a little more abstract in forming our query since we want to capture both creation and",
    "start": "1145159",
    "end": "1151280"
  },
  {
    "text": "modification events and both of those classes derive from the instance operation event so that um that",
    "start": "1151280",
    "end": "1158640"
  },
  {
    "text": "ultimately is what we want to trigger off of um and then once that triggers you can look at the Target instance",
    "start": "1158640",
    "end": "1165240"
  },
  {
    "text": "property and those Target instance properties are going to take the form of that Sim data file so you can just",
    "start": "1165240",
    "end": "1171159"
  },
  {
    "text": "inspect the uh extension field and match it against the file extensions that",
    "start": "1171159",
    "end": "1176440"
  },
  {
    "text": "you're interested in in targeting and here we have to specify a polling interval right so um one caveat with",
    "start": "1176440",
    "end": "1184440"
  },
  {
    "text": "this is say you have a file that's created and deleted within that 30 second interval you're not going to",
    "start": "1184440",
    "end": "1189679"
  },
  {
    "text": "catch it unfortunately all right so an extrinsic query this is a pretty",
    "start": "1189679",
    "end": "1194760"
  },
  {
    "text": "interesting one this will fire immediately upon a volume change event so if you were to look up this object uh",
    "start": "1194760",
    "end": "1202240"
  },
  {
    "text": "in msdn you would see that event type 2 is a removable drive so this would fire",
    "start": "1202240",
    "end": "1208600"
  },
  {
    "text": "upon insertion of removable media all",
    "start": "1208600",
    "end": "1214320"
  },
  {
    "text": "right so once you have the wql query that you form to Target the event that",
    "start": "1214320",
    "end": "1220880"
  },
  {
    "text": "you're interested in triggering you want to do something upon that triggering right so uh the two uh event consumers",
    "start": "1220880",
    "end": "1227919"
  },
  {
    "text": "that attackers are you know very fond of are active script event consumer all right you can embed any uh uh Windows",
    "start": "1227919",
    "end": "1236200"
  },
  {
    "text": "script host language as a payload in this consumer so a Windows script host",
    "start": "1236200",
    "end": "1241240"
  },
  {
    "text": "language would be VB script or jscript all right so you can have those payloads in line and nothing would be present on",
    "start": "1241240",
    "end": "1249400"
  },
  {
    "text": "disk aside from being present in that objects. DAT file the wmi repository you",
    "start": "1249400",
    "end": "1255159"
  },
  {
    "text": "can also execute anything at the command line using the command line event consumer so",
    "start": "1255159",
    "end": "1260799"
  },
  {
    "text": "imagine uh someone inserts removable media and you want to execute some payload right so imagine you could",
    "start": "1260799",
    "end": "1268240"
  },
  {
    "text": "execute say powell. xe- encoded command and then you'd have uh I don't know",
    "start": "1268240",
    "end": "1273360"
  },
  {
    "text": "maybe like a drive infection payload that would drop something of Interest onto that uh onto that USB stick all",
    "start": "1273360",
    "end": "1281120"
  },
  {
    "text": "right uh the other standard vent consumers are going to be of particular interest to Defenders right so we can",
    "start": "1281120",
    "end": "1287640"
  },
  {
    "text": "append a log file create an event log entry send an email all right uh and",
    "start": "1287640",
    "end": "1293880"
  },
  {
    "text": "both of these are present in the simv 2 and default name spaces all right so let's tear into some",
    "start": "1293880",
    "end": "1303039"
  },
  {
    "text": "previous maare that has become public so um the first time I ever heard of wmi",
    "start": "1303039",
    "end": "1309000"
  },
  {
    "text": "like I'm not a I'm not a CIS edman by trade so um I I really had no idea what",
    "start": "1309000",
    "end": "1315279"
  },
  {
    "text": "wmi was until around 2010 when I was was reading up on all the articles about stuck net and this wasn't really",
    "start": "1315279",
    "end": "1322200"
  },
  {
    "text": "mentioned too much but one of the exploits um that Stu net took advantage",
    "start": "1322200",
    "end": "1327600"
  },
  {
    "text": "of or vulnerabilities that stuck net took advantage of was ms10 061 the printer spooler vulnerability um which",
    "start": "1327600",
    "end": "1335000"
  },
  {
    "text": "basically Ena the attacker to write an arbitrary file to the file system so",
    "start": "1335000",
    "end": "1340919"
  },
  {
    "text": "just imagine like if you could drop any file to the file system in order to gain code execution how might you go about",
    "start": "1340919",
    "end": "1348200"
  },
  {
    "text": "doing that so what the attacker did was they dropped one of those moth files which had embedded with it uh within it",
    "start": "1348200",
    "end": "1356400"
  },
  {
    "text": "a permanent Wy event subscription so they dropped it into a very specific directory and then there was basically",
    "start": "1356400",
    "end": "1363600"
  },
  {
    "text": "like a watchdog process that would monitor that directory and if it detected that there was a new moth file",
    "start": "1363600",
    "end": "1368799"
  },
  {
    "text": "present in there it would go ahead and consume it and you would automatically persist and gain code execution uh in",
    "start": "1368799",
    "end": "1375679"
  },
  {
    "text": "the system context so Microsoft fix this exploit primitive so that like that Watchdog process will no longer just",
    "start": "1375679",
    "end": "1382840"
  },
  {
    "text": "happily go consume any mo file present in that directory all right then there was Ghost",
    "start": "1382840",
    "end": "1389960"
  },
  {
    "text": "this was uh commodity maare uh there's a really good write up on this uh that Tren micro did a while back so what this",
    "start": "1389960",
    "end": "1396360"
  },
  {
    "text": "Mal did was it used a wql query to the",
    "start": "1396360",
    "end": "1402279"
  },
  {
    "text": "one that you saw previously that monitored for the creation or modification of any files",
    "start": "1402279",
    "end": "1408440"
  },
  {
    "text": "um only rather instead of targeting a specific extension it targeted a specific directory specifically the uh",
    "start": "1408440",
    "end": "1415279"
  },
  {
    "text": "the recent folder so any new like recent documents it would just uh xfill those",
    "start": "1415279",
    "end": "1420960"
  },
  {
    "text": "via an ActiveX control so like it it basically used like the IE com object to",
    "start": "1420960",
    "end": "1426679"
  },
  {
    "text": "uh upload the contents of those documents to some command and control server all right so the the the payload",
    "start": "1426679",
    "end": "1432200"
  },
  {
    "text": "itself like um that ActiveX control was embedded within uh VB script payload via",
    "start": "1432200",
    "end": "1439080"
  },
  {
    "text": "one of those active script uh event consumer event consumers all right uh and released not",
    "start": "1439080",
    "end": "1447200"
  },
  {
    "text": "too long ago was a really cool tool called wmi shell um so this was the",
    "start": "1447200",
    "end": "1452840"
  },
  {
    "text": "first case where I saw wmi used as like a pure C2 Channel all right so the",
    "start": "1452840",
    "end": "1458440"
  },
  {
    "text": "mechanism by which it used it as a C2 channel was it created wmi name spaces",
    "start": "1458440",
    "end": "1464000"
  },
  {
    "text": "dynamically or modified them uh so what that would allow you to do is like you",
    "start": "1464000",
    "end": "1469840"
  },
  {
    "text": "could just stuff a payload in uh as the name of a wmi name space and then you",
    "start": "1469840",
    "end": "1475520"
  },
  {
    "text": "could do something like call the create method in the win32 process class to",
    "start": "1475520",
    "end": "1481679"
  },
  {
    "text": "consume that data like say Bas 64 decode it and execute like some Powershell",
    "start": "1481679",
    "end": "1487200"
  },
  {
    "text": "command that was embedded within it right um and then what you could also do is take the result of that malicious",
    "start": "1487200",
    "end": "1493440"
  },
  {
    "text": "Powershell command write the output to say like another wmi namespace and then read that back remotely say like using",
    "start": "1493440",
    "end": "1501159"
  },
  {
    "text": "the get wmi object commandlet right so you're using wmi as a pure C2 Channel",
    "start": "1501159",
    "end": "1507600"
  },
  {
    "text": "which is pretty cool all",
    "start": "1507600",
    "end": "1514039"
  },
  {
    "text": "right so wmi is extremely powerful right",
    "start": "1514039",
    "end": "1519320"
  },
  {
    "text": "so but uh from an attacker's perspective like there's really nothing you can't do from like a post exploitation",
    "start": "1519320",
    "end": "1525559"
  },
  {
    "text": "perspective so look at every phas of of an attack and you can accomplish",
    "start": "1525559",
    "end": "1531000"
  },
  {
    "text": "that with wmi given that you have proper credentials to to do so all right so if",
    "start": "1531000",
    "end": "1537279"
  },
  {
    "text": "you were to sorry I will get to reconnaissance briefly um uh so benefits to an attacker",
    "start": "1537279",
    "end": "1545480"
  },
  {
    "text": "is so the service it's running on every single system again going back to like",
    "start": "1545480",
    "end": "1551159"
  },
  {
    "text": "Windows 98 and nt4 all right is running as system every machine has its list uh",
    "start": "1551159",
    "end": "1556799"
  },
  {
    "text": "is listening on like this decom port or like winrm uh unless you've explicitly",
    "start": "1556799",
    "end": "1562600"
  },
  {
    "text": "disabled this service um it is relatively esoteric at",
    "start": "1562600",
    "end": "1567720"
  },
  {
    "text": "this point um hopefully after this talk it it won't be um so Defenders like",
    "start": "1567720",
    "end": "1573360"
  },
  {
    "text": "still aren't really aware of the uh repercussions of attackers uh leveraging",
    "start": "1573360",
    "end": "1578840"
  },
  {
    "text": "wmi all right nothing touches dis unless you want it to the The Only",
    "start": "1578840",
    "end": "1585240"
  },
  {
    "text": "Exception being when you uh register like a permanent wmi event subscription",
    "start": "1585240",
    "end": "1590360"
  },
  {
    "text": "it's only going to be that payload will only be present in objects. dat and AV",
    "start": "1590360",
    "end": "1595640"
  },
  {
    "text": "will not touch that right that I mean it for the same reason that AV would never flag on like ntds.dit right if you",
    "start": "1595640",
    "end": "1603840"
  },
  {
    "text": "stored like some payload in some like uh like active directory property uh a is",
    "start": "1603840",
    "end": "1609520"
  },
  {
    "text": "not going to touch this file all right now if you were to go about",
    "start": "1609520",
    "end": "1616080"
  },
  {
    "text": "performing some reconnaissance as an attacker these are some of the wmi objects that you might be interested in",
    "start": "1616080",
    "end": "1621840"
  },
  {
    "text": "in reality uh I did a scan of uh this Windows 7 machine that I'm presenting",
    "start": "1621840",
    "end": "1627120"
  },
  {
    "text": "from and there's actually uh just under 8,000 wmi classes available to you these",
    "start": "1627120",
    "end": "1634480"
  },
  {
    "text": "these are just some of the highlights uh that I'm presenting here so you can get detailed host OS information using these",
    "start": "1634480",
    "end": "1641960"
  },
  {
    "text": "wmi objects you can perform registry operations read from and write to the registry so like you could use that STD",
    "start": "1641960",
    "end": "1649559"
  },
  {
    "text": "regge proov uh wmi provider say as a persistence mechanism right like you could write um powershell.exe D encoded",
    "start": "1649559",
    "end": "1657240"
  },
  {
    "text": "command and then have like your your Powershell Stager you could write that into the Run key right automatic",
    "start": "1657240",
    "end": "1662960"
  },
  {
    "text": "persistence using wmi you can enumerate processes Services",
    "start": "1662960",
    "end": "1668519"
  },
  {
    "text": "you can start stop Services read the event logs enumerates all of the patches",
    "start": "1668519",
    "end": "1674600"
  },
  {
    "text": "on a system uh enumerates shares create shares delete shares there's very little",
    "start": "1674600",
    "end": "1680600"
  },
  {
    "text": "that you can't do here all right so this is extremely powerful and uh attackers",
    "start": "1680600",
    "end": "1687279"
  },
  {
    "text": "are already kind of aware of this uh I've seen them using uh whim. exi um",
    "start": "1687279",
    "end": "1693480"
  },
  {
    "text": "pretty often so here's like the the Powershell variant of wii. exi for for lateral movement so I'm just calling",
    "start": "1693480",
    "end": "1700039"
  },
  {
    "text": "invoke wmi method um and within the win32 process class there's the static",
    "start": "1700039",
    "end": "1706000"
  },
  {
    "text": "create method all right and this will just go execute uh any any command line program that that you provide it and I'm",
    "start": "1706000",
    "end": "1712480"
  },
  {
    "text": "doing so remotely all right so just imagine replacing notepad.exe",
    "start": "1712480",
    "end": "1718039"
  },
  {
    "text": "with powershell.exe d encoded command uh insert malicious payload",
    "start": "1718039",
    "end": "1725158"
  },
  {
    "text": "here all right here's an example of wmi persistence so recall uh what I said the",
    "start": "1726279",
    "end": "1733600"
  },
  {
    "text": "three requirements were uh in order to persist you need one of those event filters event consumers and the filter",
    "start": "1733600",
    "end": "1740080"
  },
  {
    "text": "to Consumer binding so this is a um this I I found in the wild um in the sea",
    "start": "1740080",
    "end": "1746320"
  },
  {
    "text": "daddy Mau family which is uh our internal family name I I think like the the public name is seuke so there",
    "start": "1746320",
    "end": "1753760"
  },
  {
    "text": "there's some pretty good writeups on this um th this is pretty basic um it's broken down as follows so you have this",
    "start": "1753760",
    "end": "1761000"
  },
  {
    "text": "long query which basically States uh fire this shortly after system startup",
    "start": "1761000",
    "end": "1768640"
  },
  {
    "text": "so it's just going to wait between 200 and 320 seconds um and then it's going",
    "start": "1768640",
    "end": "1773840"
  },
  {
    "text": "to uh it's going to fire the event consumer which is just that uh command",
    "start": "1773840",
    "end": "1779200"
  },
  {
    "text": "line uh command line event consumer which just executes uh in in this fictitious case uh evil. XZ all right so",
    "start": "1779200",
    "end": "1787720"
  },
  {
    "text": "not very sophisticated so that this assumes that another binary was dropped to dis so this isn't super stealthy in",
    "start": "1787720",
    "end": "1795480"
  },
  {
    "text": "my mind um but but it's illustrative of",
    "start": "1795480",
    "end": "1800960"
  },
  {
    "text": "how you might go about like practically using wmi as a persistence mechanism in",
    "start": "1800960",
    "end": "1806519"
  },
  {
    "text": "very few lines of code all",
    "start": "1806519",
    "end": "1811799"
  },
  {
    "text": "right so I didn't realize this until recently when um I was pulled",
    "start": "1811799",
    "end": "1818440"
  },
  {
    "text": "into uh to this this one case that we were investigating and uh we've got some awesome uh incident responders at at",
    "start": "1818440",
    "end": "1824840"
  },
  {
    "text": "ment who had been investigating apt29 so you may be aware that fire ey released a",
    "start": "1824840",
    "end": "1831360"
  },
  {
    "text": "report on the maare family called Hammer toss and we attributed this to apt29 all",
    "start": "1831360",
    "end": "1837120"
  },
  {
    "text": "right what that paper did not discuss was the wmi attack Vector that they used",
    "start": "1837120",
    "end": "1843080"
  },
  {
    "text": "so here's a small example of what apt29 was doing all right they were creating",
    "start": "1843080",
    "end": "1849760"
  },
  {
    "text": "custom wmi classes dynamically and adding properties to those classes and",
    "start": "1849760",
    "end": "1856519"
  },
  {
    "text": "stuffing pay loads in them so really this was very similar to like what the wmi shell tool does only instead of",
    "start": "1856519",
    "end": "1864039"
  },
  {
    "text": "creating and modifying name spaces the attacker was just creating and modifying classes on the",
    "start": "1864039",
    "end": "1870639"
  },
  {
    "text": "fly so I didn't even realize that you could do this uh I thought that you would have to drop a moth file to create",
    "start": "1870639",
    "end": "1877279"
  },
  {
    "text": "these classes dynamically when it turns out you can just use some of these uh really handy um net classes to achieve",
    "start": "1877279",
    "end": "1884840"
  },
  {
    "text": "that for you so this is an example of me doing that locally now the attacker was doing this remotely so uh you can just",
    "start": "1884840",
    "end": "1892480"
  },
  {
    "text": "extend this a little bit to create and modify classes remotely so imagine just",
    "start": "1892480",
    "end": "1897720"
  },
  {
    "text": "stuffing your payload in there um executing a malicious Powershell command saving the output to another class",
    "start": "1897720",
    "end": "1903799"
  },
  {
    "text": "property and then reading that back using wmi as a pure C2",
    "start": "1903799",
    "end": "1909480"
  },
  {
    "text": "Channel all right and with that so as I said before uh w sh was using",
    "start": "1909480",
    "end": "1917880"
  },
  {
    "text": "those name spaces apt29 were using uh dynamically created classes um you could",
    "start": "1917880",
    "end": "1925840"
  },
  {
    "text": "also conceivably use the registry as a means of like staging your xfill so",
    "start": "1925840",
    "end": "1931000"
  },
  {
    "text": "using that uh STD regge proov provider like you can just write arbitrary data",
    "start": "1931000",
    "end": "1936880"
  },
  {
    "text": "to any registry uh key uh key and value that you create and then you can execute",
    "start": "1936880",
    "end": "1943000"
  },
  {
    "text": "that embedded payload uh say write the result of that command to another",
    "start": "1943000",
    "end": "1948279"
  },
  {
    "text": "registry value and then read that back remotely so these were the so uh attackers and researchers had",
    "start": "1948279",
    "end": "1956559"
  },
  {
    "text": "already demonstrated the the name space and class creation um I just kind of thought of like maybe using the registry",
    "start": "1956559",
    "end": "1964039"
  },
  {
    "text": "I'm sure there's other means of like pushing and pulling arbitrary data using wmi as well if you think of any clever",
    "start": "1964039",
    "end": "1971440"
  },
  {
    "text": "uses of uh wmi as a C2 Channel let me know I would be curious to know",
    "start": "1971440",
    "end": "1978760"
  },
  {
    "text": "all right so um I'm going to demonstrate an example here of",
    "start": "1978760",
    "end": "1983880"
  },
  {
    "text": "using uh wmi to push a payload onto uh onto a victim system in this case we're",
    "start": "1983880",
    "end": "1990799"
  },
  {
    "text": "going to plant some uh some sensitive evidence on on our victim here so in the",
    "start": "1990799",
    "end": "1996840"
  },
  {
    "text": "first block I'm just specifying the file name locally on my system that I want to drop onto the remote machine okay so I'm",
    "start": "1996840",
    "end": "2003960"
  },
  {
    "text": "going to read it in as BL array uh convert it to a basic 64 string and then I'm going to set up my remote wmi",
    "start": "2003960",
    "end": "2011679"
  },
  {
    "text": "connection and what I'm going to do after that is create the win32 evil",
    "start": "2011679",
    "end": "2017720"
  },
  {
    "text": "class class and create uh an evil property that is attached to that class",
    "start": "2017720",
    "end": "2025679"
  },
  {
    "text": "and then I'm going to stuff the base 64 encoded content of the evidence that I want to plant on the victim machine into",
    "start": "2025679",
    "end": "2032080"
  },
  {
    "text": "that property okay so technically the contents of the file are present on that",
    "start": "2032080",
    "end": "2038039"
  },
  {
    "text": "system but they're only present in uh they're only present base 64 encoded",
    "start": "2038039",
    "end": "2044159"
  },
  {
    "text": "within objects. dat right the wmi repository so if we want to actually do",
    "start": "2044159",
    "end": "2050720"
  },
  {
    "text": "something with that data that's stuffed in there we might do something like this so we're going to execute some",
    "start": "2050720",
    "end": "2057960"
  },
  {
    "text": "Powershell on the remote system and we're going to read directly from the",
    "start": "2057960",
    "end": "2063440"
  },
  {
    "text": "win32 evil class. evil property property which has that base 64 encoded uh",
    "start": "2063440",
    "end": "2070280"
  },
  {
    "text": "evidence uh and then we'll drop it to uh C fighterjet specs. PNG you know",
    "start": "2070280",
    "end": "2076480"
  },
  {
    "text": "whatever um so the way we go about executing that is by calling the win32",
    "start": "2076480",
    "end": "2082760"
  },
  {
    "text": "process create method that uh you should all be familiar with by now",
    "start": "2082760",
    "end": "2088320"
  },
  {
    "text": "okay and then uh you can also remotely confirm that the file was dropped by",
    "start": "2088320",
    "end": "2093720"
  },
  {
    "text": "calling get wmi object uh to to see if there's an instance of the Sim data file",
    "start": "2093720",
    "end": "2101359"
  },
  {
    "text": "uh present on that system that has that exact file",
    "start": "2101359",
    "end": "2106040"
  },
  {
    "text": "name all right so in the previous example we just dropped a file to this",
    "start": "2107400",
    "end": "2113960"
  },
  {
    "text": "so um I I called that like the the push attack now in this case um this is very",
    "start": "2113960",
    "end": "2119720"
  },
  {
    "text": "similar to like what apt29 was doing only they were using custom classes like I used in the previous example uh here",
    "start": "2119720",
    "end": "2127200"
  },
  {
    "text": "I'm just going to use the registry as a means of St uh staging well pushing a",
    "start": "2127200",
    "end": "2132240"
  },
  {
    "text": "payload and then reading the results of that payload back using the registry all",
    "start": "2132240",
    "end": "2137800"
  },
  {
    "text": "right so I provide the credentials to the Target system and I create the uh uh",
    "start": "2137800",
    "end": "2144800"
  },
  {
    "text": "in hkm software evil key that registry key and then uh the uh I'm going to",
    "start": "2144800",
    "end": "2151040"
  },
  {
    "text": "delete the value of the uh uh present in result because I'm going to populate",
    "start": "2151040",
    "end": "2156599"
  },
  {
    "text": "that in a second all right so um just my fictitious payload here is I'm just",
    "start": "2156599",
    "end": "2163000"
  },
  {
    "text": "going to get a process listing uh for for Elsas all right kind of a silly",
    "start": "2163000",
    "end": "2168839"
  },
  {
    "text": "payload but just it's good at demonstrating the the uh the point here",
    "start": "2168839",
    "end": "2173960"
  },
  {
    "text": "so U when you call it get process or anything for that matter in Powershell it returns objects um I really like",
    "start": "2173960",
    "end": "2180319"
  },
  {
    "text": "working with objects so uh I chose to uh preserve my objects here by serializing",
    "start": "2180319",
    "end": "2187560"
  },
  {
    "text": "them using the PS serializer class so that just takes the contents of the object uh converts it to XML and then",
    "start": "2187560",
    "end": "2195240"
  },
  {
    "text": "I'll Bas 64 encode it save it in that registry key pull it back B 64 decode it",
    "start": "2195240",
    "end": "2202359"
  },
  {
    "text": "so I pull it back using that STD regge proov provider um and then so yeah B 64 decode",
    "start": "2202359",
    "end": "2209560"
  },
  {
    "text": "it and then call deriz on it and then I have this nice beautiful Powershell object um that looks as if it had been",
    "start": "2209560",
    "end": "2217160"
  },
  {
    "text": "executed locally only it was um only it was the result of uh that payload",
    "start": "2217160",
    "end": "2224040"
  },
  {
    "text": "running on a remote system U that ultimately like I managed to return this like proper Powershell",
    "start": "2224040",
    "end": "2232640"
  },
  {
    "text": "object all right so uh one other like theoretical",
    "start": "2234160",
    "end": "2241599"
  },
  {
    "text": "attack that you might be able to perform is say um say you want to avoid void",
    "start": "2241599",
    "end": "2247160"
  },
  {
    "text": "calling the 132 process create method uh which is you know susceptible to uh like",
    "start": "2247160",
    "end": "2253880"
  },
  {
    "text": "process and uh command line auditing right because if you're executing like powell. ex- encoded command uh this",
    "start": "2253880",
    "end": "2260280"
  },
  {
    "text": "might be logged and uh and and reported so if you wanted to be like extra",
    "start": "2260280",
    "end": "2265599"
  },
  {
    "text": "stealthy uh conceivably what you could do is create a temp a temporary",
    "start": "2265599",
    "end": "2271480"
  },
  {
    "text": "permanent Wy event subscription so the way you would do that is um um you would",
    "start": "2271480",
    "end": "2277680"
  },
  {
    "text": "create a active script event consumer consisting of your payload um and so",
    "start": "2277680",
    "end": "2284160"
  },
  {
    "text": "normally this would like prist across reboots but then part of your payload would be like the trigger for it would",
    "start": "2284160",
    "end": "2289800"
  },
  {
    "text": "be say like an interval time timer instruction so you push the payload down",
    "start": "2289800",
    "end": "2295160"
  },
  {
    "text": "this timer instruction fires after say 1 minute uh and then part of your payload",
    "start": "2295160",
    "end": "2300720"
  },
  {
    "text": "is so it executes all the malicious stuff first and then it deletes itself so it deletes its Corr responding event",
    "start": "2300720",
    "end": "2307280"
  },
  {
    "text": "filter event consumer and filter to Consumer binding so that's kind of a clean like a little more stealthy method",
    "start": "2307280",
    "end": "2314560"
  },
  {
    "text": "in my opinion of uh getting code execution on a remote system if you know",
    "start": "2314560",
    "end": "2320040"
  },
  {
    "text": "that um say command light auditing maybe present so the only thing that a Defender might see would be the",
    "start": "2320040",
    "end": "2326560"
  },
  {
    "text": "execution of scr cons. xi- uh embedding",
    "start": "2326560",
    "end": "2332319"
  },
  {
    "text": "so uh from an attacker's perspective it's a little bit more stealthy because you wouldn't see something like in the",
    "start": "2332319",
    "end": "2337960"
  },
  {
    "text": "previous cases where I was calling po. exi and executing uh some um like PL",
    "start": "2337960",
    "end": "2344280"
  },
  {
    "text": "text command you wouldn't see any of this and then if you were to perform offline wmi forensics later on this",
    "start": "2344280",
    "end": "2351520"
  },
  {
    "text": "payload wouldn't be present in objects. dat all right so I've talked about Mo",
    "start": "2351520",
    "end": "2360920"
  },
  {
    "text": "files a little bit but the reason I don't expand upon them really is that I",
    "start": "2360920",
    "end": "2366640"
  },
  {
    "text": "I don't feel that they're necessary from an attacker's perspective I think they just add unnecessary artifacts that",
    "start": "2366640",
    "end": "2374079"
  },
  {
    "text": "would end up getting you caught really uh the only advantage in my opinion and",
    "start": "2374079",
    "end": "2380040"
  },
  {
    "text": "and please tell me if I'm wrong later on the only Advantage from an attacker's perspective is that um these things will",
    "start": "2380040",
    "end": "2386960"
  },
  {
    "text": "persist if you specify the pragma auto recover in your ma file uh they'll be",
    "start": "2386960",
    "end": "2393560"
  },
  {
    "text": "consumed again like after uh wmi corrup coruption which probably isn't going to happen anyway so moving on all right",
    "start": "2393560",
    "end": "2402680"
  },
  {
    "text": "briefly wmi providers these um are kind of like the back end to wmi so these",
    "start": "2402680",
    "end": "2408520"
  },
  {
    "text": "provide the wmi subsystem with everything they need to provide the objects that you're interested in right",
    "start": "2408520",
    "end": "2414880"
  },
  {
    "text": "so take win32 process if you're enumerating all processes there's some",
    "start": "2414880",
    "end": "2420400"
  },
  {
    "text": "code on the system that has to enumerate running processes and then parse them",
    "start": "2420400",
    "end": "2426960"
  },
  {
    "text": "parse out that data and present it to you in such a manner that um that you can read it say like in Powershell or",
    "start": "2426960",
    "end": "2433720"
  },
  {
    "text": "wii. exy properly so that's what these providers do uh most of them are",
    "start": "2433720",
    "end": "2439079"
  },
  {
    "text": "registered in the registry using um so each um each provider has a respective",
    "start": "2439079",
    "end": "2446160"
  },
  {
    "text": "like 132 provider class instance and one of the properties is a goid so if you just take that guid and then look it up",
    "start": "2446160",
    "end": "2452720"
  },
  {
    "text": "in the registry there would be a dll um and that's the actual code that backs that provider uh you can also have",
    "start": "2452720",
    "end": "2459160"
  },
  {
    "text": "kernel drivers uh act as providers as well and those are all stored in the root wmi Nam",
    "start": "2459160",
    "end": "2465319"
  },
  {
    "text": "space all right so what might one of these providers look like well there are",
    "start": "2465319",
    "end": "2470480"
  },
  {
    "text": "some legitimate uh providers from third parties one of them being well",
    "start": "2470480",
    "end": "2476920"
  },
  {
    "text": "legitimate is uh you know kind of a subjective term here um on on my Lenovo",
    "start": "2476920",
    "end": "2483359"
  },
  {
    "text": "ThinkPad laptop I have installed this um this device driver uh wmi provider that",
    "start": "2483359",
    "end": "2491480"
  },
  {
    "text": "so you can use it to remotely get like bio settings and remotely set bio",
    "start": "2491480",
    "end": "2497680"
  },
  {
    "text": "settings so sure that might be legitimate",
    "start": "2497680",
    "end": "2503400"
  },
  {
    "text": "um now so um I was talking with uh with my colleagues uh Willie and claudo and",
    "start": "2503400",
    "end": "2509440"
  },
  {
    "text": "Willie brought up a while ago um just that you know theoretically like why not",
    "start": "2509440",
    "end": "2515079"
  },
  {
    "text": "just create a malicious wmi provider right cuz then you could maybe um create some like interesting custom like wmi",
    "start": "2515079",
    "end": "2522000"
  },
  {
    "text": "objects Implement your own methods right so like the win32 process create method",
    "start": "2522000",
    "end": "2528160"
  },
  {
    "text": "is really nice for attackers why don't why why can't we extend that right so I reached out to some buddies on Twitter",
    "start": "2528160",
    "end": "2535119"
  },
  {
    "text": "and uh Casey Smith and and Jared ainson These Guys these guys are awesome so",
    "start": "2535119",
    "end": "2540240"
  },
  {
    "text": "they banged out some proof of concept actual like legitimate malicious wmi providers like very night when when I",
    "start": "2540240",
    "end": "2547920"
  },
  {
    "text": "gave them all of these uh these these requirements so the first one that Casey did was he created a Shell Code Runner",
    "start": "2547920",
    "end": "2555880"
  },
  {
    "text": "implemented as a w provider so if you were to take this Wy provider dll drop",
    "start": "2555880",
    "end": "2562079"
  },
  {
    "text": "it onto the victim system install it with installutil.exe then you've got a",
    "start": "2562079",
    "end": "2567640"
  },
  {
    "text": "means of executing Shell Code either locally or remotely uh onto that victim machine um",
    "start": "2567640",
    "end": "2575760"
  },
  {
    "text": "and that Shell Code runs in in the system context pretty cool um Jared uh",
    "start": "2575760",
    "end": "2583040"
  },
  {
    "text": "what he um what he wanted to do was enumerate all Active network connections",
    "start": "2583040",
    "end": "2588960"
  },
  {
    "text": "because in Windows 7 and Below you don't get any built-in classes that allow you to enumerate this stuff um so he did",
    "start": "2588960",
    "end": "2596400"
  },
  {
    "text": "that and he also allowed uh you to execute arbitrary power shell in the system context all right so I wanted to",
    "start": "2596400",
    "end": "2604200"
  },
  {
    "text": "take some of these uh like theoretical taxs and extend them a little bit uh into the form of a pure wmi backd door",
    "start": "2604200",
    "end": "2610839"
  },
  {
    "text": "so you can get this online now um all it requires is a Powershell installer doesn't require that Powershell be",
    "start": "2610839",
    "end": "2616359"
  },
  {
    "text": "present on the system all right um so yeah again Powershell is not required",
    "start": "2616359",
    "end": "2621839"
  },
  {
    "text": "and it installs uh several permanent wmi events all right so it does a few things uh you can Implement your triggers so",
    "start": "2621839",
    "end": "2628839"
  },
  {
    "text": "you might want to fire off at a regular interval at a certain date time you might want to Target a certain process",
    "start": "2628839",
    "end": "2635040"
  },
  {
    "text": "name new or modified files um interactive log on or drive insertion",
    "start": "2635040",
    "end": "2641319"
  },
  {
    "text": "all right and then you bind that together with a respective action so you could say um combine the uh file",
    "start": "2641319",
    "end": "2650720"
  },
  {
    "text": "creation trigger with the file upload action okay or drive insertion trigger",
    "start": "2650720",
    "end": "2657520"
  },
  {
    "text": "with infect Drive action and then you register those together with the uh registered wmi",
    "start": "2657520",
    "end": "2663920"
  },
  {
    "text": "backdoor uh command all right so here is a brief example of the generic back door",
    "start": "2663920",
    "end": "2670319"
  },
  {
    "text": "that I implemented uh in this code so what I'm doing here is I'm queuing up a",
    "start": "2670319",
    "end": "2675520"
  },
  {
    "text": "few commands all right this is just a uh VB script um like file dropper so I'll",
    "start": "2675520",
    "end": "2682119"
  },
  {
    "text": "cue that up in my back door next I'm going to cue up a uh Powershell file dropper and uh instead of just executing",
    "start": "2682119",
    "end": "2690200"
  },
  {
    "text": "like VB script directly I'm going to save that into a Wy Class Property all",
    "start": "2690200",
    "end": "2695839"
  },
  {
    "text": "right all right and then I'll create uh I'll queue up another command to execute something at the command line uh in this",
    "start": "2695839",
    "end": "2702960"
  },
  {
    "text": "case being po. exi uh- command and then what the payload is going to do is pull",
    "start": "2702960",
    "end": "2708680"
  },
  {
    "text": "that down from the wmi class Bas 64 decode it and execute",
    "start": "2708680",
    "end": "2715400"
  },
  {
    "text": "it all right there's a little bit more of this video but in the interest of time I want",
    "start": "2715400",
    "end": "2720960"
  },
  {
    "text": "to move on to the next example the file uploader so I have my C2 server",
    "start": "2720960",
    "end": "2726000"
  },
  {
    "text": "listening all right on the right side and then on the left side I will uh",
    "start": "2726000",
    "end": "2731440"
  },
  {
    "text": "install my file uploader and um so whenever any file is created or modified",
    "start": "2731440",
    "end": "2738000"
  },
  {
    "text": "it's going to upload those contents um to the command and control server so I",
    "start": "2738000",
    "end": "2743119"
  },
  {
    "text": "provide all the code for this wmi backd door freely online um I'm not providing",
    "start": "2743119",
    "end": "2748359"
  },
  {
    "text": "the uh C2 server itself though all right um I don't have much",
    "start": "2748359",
    "end": "2755000"
  },
  {
    "text": "time left um so I want to maybe try to get away with this live demo here the the drive infection",
    "start": "2755000",
    "end": "2761280"
  },
  {
    "text": "payload all right so I'm going to take this here copy it into my",
    "start": "2761280",
    "end": "2767680"
  },
  {
    "text": "victim all right and just to prove to you that nothing is on this USB",
    "start": "2767680",
    "end": "2775078"
  },
  {
    "text": "stick let's hope it pops up",
    "start": "2778599",
    "end": "2782760"
  },
  {
    "text": "here",
    "start": "2784800",
    "end": "2787800"
  },
  {
    "text": "all right sorry not going to deal with this now I guess demo",
    "start": "2793640",
    "end": "2799280"
  },
  {
    "text": "fail all right so what it would have done if uh if my VM did recognize it is",
    "start": "2799280",
    "end": "2804760"
  },
  {
    "text": "immediately upon insertion it would have dropped my file uh in this case as you'll see in the code it just drops the",
    "start": "2804760",
    "end": "2811079"
  },
  {
    "text": "EI car signature which uh is supposed to flag antivirus immediately",
    "start": "2811079",
    "end": "2816359"
  },
  {
    "text": "I'm not really doing anything too subversive again this is just a proof of concept that I wanted to demonstrate um",
    "start": "2816359",
    "end": "2823000"
  },
  {
    "text": "another thing that I was going to show is the process killer where um I I would be targeting a process Explorer and then",
    "start": "2823000",
    "end": "2830240"
  },
  {
    "text": "anytime that opens um the payload would would just automatically kill that all right so uh real real briefly",
    "start": "2830240",
    "end": "2838280"
  },
  {
    "text": "some uh some mitigations you can enumerate wmi persistence remotely all",
    "start": "2838280",
    "end": "2843720"
  },
  {
    "text": "right using Powershell a great example there are some existing utilities out there Auto runs and Kanza are great for",
    "start": "2843720",
    "end": "2850880"
  },
  {
    "text": "detecting this stuff after the fact um and I'm going to be discussing",
    "start": "2850880",
    "end": "2856240"
  },
  {
    "text": "this in much more depth uh at Defcon on Saturday with my colleagues so wmi is",
    "start": "2856240",
    "end": "2862559"
  },
  {
    "text": "actually a really awesome agentless host IDs all right so there's a ton of attack",
    "start": "2862559",
    "end": "2867680"
  },
  {
    "text": "or actions that would take place that would fire off um these uh wmi events",
    "start": "2867680",
    "end": "2874680"
  },
  {
    "text": "and so if you just subscribe SC cribe to those events then there's all kinds of uh",
    "start": "2874680",
    "end": "2880319"
  },
  {
    "text": "things that you might be able to detect for example if an attacker creates uh",
    "start": "2880319",
    "end": "2886640"
  },
  {
    "text": "like persistence uh via the registry or the start menu there's a really handy uh",
    "start": "2886640",
    "end": "2892200"
  },
  {
    "text": "wmi object uh 132 startup command uh an instance of that as created so you could",
    "start": "2892200",
    "end": "2898359"
  },
  {
    "text": "tap into that and detect attack or persistence or registry or start menu persistence using just that mechanism",
    "start": "2898359",
    "end": "2905280"
  },
  {
    "text": "you could also use this to detect uh whenever permanent wmi event subscriptions are created right so you",
    "start": "2905280",
    "end": "2912400"
  },
  {
    "text": "have a permanent wmy event subscription that detects permanent wmy event subscriptions you can get really",
    "start": "2912400",
    "end": "2918240"
  },
  {
    "text": "creative here all right finally some some mitigations are you can just outright disable this service if you",
    "start": "2918240",
    "end": "2924440"
  },
  {
    "text": "don't need to access it remotely uh you can apply firewall rules to say uh block those decom ports there are some great",
    "start": "2924440",
    "end": "2932000"
  },
  {
    "text": "uh pretty detailed event log entries um and then as I said you can have preventative permanent wmi event",
    "start": "2932000",
    "end": "2939480"
  },
  {
    "text": "subscriptions uh lastly you can also apply akles to all of the wmi name",
    "start": "2939480",
    "end": "2945720"
  },
  {
    "text": "spaces so you could prevent like um for example the win32 process uh create",
    "start": "2945720",
    "end": "2951839"
  },
  {
    "text": "method from being uh executed by applying AAL properly all right just",
    "start": "2951839",
    "end": "2957640"
  },
  {
    "text": "quick shout out to my buddies uh will Schroeder and Justin Warner who helped me out and came up with some pretty",
    "start": "2957640",
    "end": "2963119"
  },
  {
    "text": "creative uh event filters um to my awesome co-workers who reversed the entire format and really opened up the",
    "start": "2963119",
    "end": "2970839"
  },
  {
    "text": "field of wmi forensics because there was no forensics capability prior to uh",
    "start": "2970839",
    "end": "2977119"
  },
  {
    "text": "today at bsides when we uh presented the the defensive and forensic side all",
    "start": "2977119",
    "end": "2982160"
  },
  {
    "text": "right and lastly to all Defenders who are taking wmi seriously or hope to take wmi seriously after after this",
    "start": "2982160",
    "end": "2989880"
  },
  {
    "text": "talk all right I don't have time for questions uh butk thank you very much um",
    "start": "2989880",
    "end": "2996480"
  },
  {
    "text": "I I'll be just outside the door if if any have have any questions so thank you",
    "start": "2996480",
    "end": "3002559"
  }
]