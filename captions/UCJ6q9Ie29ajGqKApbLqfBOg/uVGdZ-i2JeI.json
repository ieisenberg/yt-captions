[
  {
    "text": "hello and thank you for coming to new techniques for Split Second DNS rebinding where today we're going to",
    "start": "2720",
    "end": "8400"
  },
  {
    "text": "look at both how achievable DNS rebinding attacks against web applications can be as well as some new",
    "start": "8400",
    "end": "13880"
  },
  {
    "text": "techniques to achieve fast DNS rebinding against both Safari and chromium based",
    "start": "13880",
    "end": "18920"
  },
  {
    "text": "browsers um but before we jump into that hi I'm Daniel I work as a researcher at",
    "start": "18920",
    "end": "24039"
  },
  {
    "text": "Intruder we are a SAS based vulnerability management platform um I'm mostly interested in scenarios where",
    "start": "24039",
    "end": "30039"
  },
  {
    "text": "don't have source code and I've got some blogs there Intruders blog where most of my research lives Now personal blog and",
    "start": "30039",
    "end": "37360"
  },
  {
    "text": "website formally known as Twitter SLX up there as well so today we're going to start off",
    "start": "37360",
    "end": "44800"
  },
  {
    "text": "with a fairly simple bug that led to the inspiration for this project um and specifically my incomplete fix",
    "start": "44800",
    "end": "50840"
  },
  {
    "text": "suggestion led to this project we'll then run through some basics of DNS rebinding and how we can use that to",
    "start": "50840",
    "end": "57600"
  },
  {
    "text": "exploit my incomplete fix um and then we'll look at some sort of more Advanced Techniques why they kind of fall short",
    "start": "57600",
    "end": "64080"
  },
  {
    "text": "at times um and I'll introduce new techniques and tools for attacking both Safari and chromium based",
    "start": "64080",
    "end": "70439"
  },
  {
    "text": "browsers so as I said this all started with a simpler bug um and it started with a bug in my own company's product I",
    "start": "70439",
    "end": "77400"
  },
  {
    "text": "was doing some security testing and one of the things that's quite interesting is if a customer adds a Target and we",
    "start": "77400",
    "end": "83119"
  },
  {
    "text": "see a web server on it we will show them a screenshot of that web server now",
    "start": "83119",
    "end": "88479"
  },
  {
    "text": "through a bit of testing I noticed that are screenshot workers which are responsible for taking these screenshots",
    "start": "88479",
    "end": "94200"
  },
  {
    "text": "there's two interesting things about them the first is that they follow HTTP redirects so if they try to screenshot",
    "start": "94200",
    "end": "100720"
  },
  {
    "text": "AC me.org and that redirects to example.com you'll end up with a screenshot of example.com and the second",
    "start": "100720",
    "end": "107479"
  },
  {
    "text": "thing which is quite worrying um and is now fixed of course um is that they can access the ec2 metadata service now for",
    "start": "107479",
    "end": "114360"
  },
  {
    "text": "those of you less familiar with AWS this service is available to all ec2 instances which are aw s's servers",
    "start": "114360",
    "end": "121000"
  },
  {
    "text": "essentially and they provide some useful info to the instance and that can often include AWS credentials or roles",
    "start": "121000",
    "end": "126799"
  },
  {
    "text": "available to the instance so you may already see where this bug is going um here's what's",
    "start": "126799",
    "end": "133360"
  },
  {
    "text": "happened the attacker starts by adding attacker.com as a Target this is a web server under their control um that",
    "start": "133360",
    "end": "140560"
  },
  {
    "text": "Target then in our portal sees there a web server on there and it tells the screenshot worker hey can you get me a",
    "start": "140560",
    "end": "145720"
  },
  {
    "text": "screenshot of HTTP attacker.com the screenshot worker reaches out to the attacker's web server at attacker.com",
    "start": "145720",
    "end": "151840"
  },
  {
    "text": "that then redirects to the metadata service so that IP address is always used for the metadata service and that's",
    "start": "151840",
    "end": "157879"
  },
  {
    "text": "the base path of the API the screenshot worker then loads the metadata service",
    "start": "157879",
    "end": "164080"
  },
  {
    "text": "and takes a screenshot of it sends it back to the portal and then the attacker can see the screenshot of the metadata",
    "start": "164080",
    "end": "169680"
  },
  {
    "text": "service so through this way you can basically browse the or you could essentially browse the metadata Service",
    "start": "169680",
    "end": "175800"
  },
  {
    "text": "as though you were the screenshot worker um so that top euro is what I used in that last slide that sort of confirms",
    "start": "175800",
    "end": "182599"
  },
  {
    "text": "access to the service but doesn't contain anything sensitive in itself um if you go to that middle URL there",
    "start": "182599",
    "end": "188400"
  },
  {
    "text": "you'll see all the roles available to the ec2 instance um and in our case there was one Ro available to it and if",
    "start": "188400",
    "end": "194319"
  },
  {
    "text": "you put that rle name into that final URL you'll get temporary credentials out from the AWS metadata service so",
    "start": "194319",
    "end": "201239"
  },
  {
    "text": "obviously heav heavily redacted um even though they've expired this is a screenshot that I got out by going",
    "start": "201239",
    "end": "207159"
  },
  {
    "text": "through that path so obviously I've got all the big wigs in slack in a channel um and I",
    "start": "207159",
    "end": "214080"
  },
  {
    "text": "suggested some fixes for the long term which we've now implemented I said we need Network level restrictions the",
    "start": "214080",
    "end": "220400"
  },
  {
    "text": "screenshotting tools shouldn't be able to access the metadata service or anything else internal um but in the short term I suggested imds V2 so this",
    "start": "220400",
    "end": "228200"
  },
  {
    "text": "is version two of this metadata service and it includes some um protections to stop attacks like this specifically to",
    "start": "228200",
    "end": "234840"
  },
  {
    "text": "request any endpoint on that service you need to provide a token in a header and to get that token you need to make a put",
    "start": "234840",
    "end": "240480"
  },
  {
    "text": "request to a specific endpoint on the metadata service with a specific header set now I was working with HTTP",
    "start": "240480",
    "end": "247319"
  },
  {
    "text": "redirects here I can't get them to make put requests I can't add headers to those redirects um I can't use",
    "start": "247319",
    "end": "252720"
  },
  {
    "text": "JavaScript because the same origin policy will block me from just reaching out so we should all be good right um",
    "start": "252720",
    "end": "259359"
  },
  {
    "text": "this is what I thought I logged off pretty late at night I head of devops was hard at work overnight thinking hey",
    "start": "259359",
    "end": "266199"
  },
  {
    "text": "everything's fine um and then as I was lying in bed suddenly I realized I had",
    "start": "266199",
    "end": "271560"
  },
  {
    "text": "missed something um something I've never used before but DNS rebinding can get around this so we're going to be focusing on",
    "start": "271560",
    "end": "279360"
  },
  {
    "text": "DNS rebinding in browsers um and it's quite important to make sure we all understand the same origin policy so",
    "start": "279360",
    "end": "285840"
  },
  {
    "text": "what I've got up on the screen here um is a URL and I've split it into different parts of the URL um and the",
    "start": "285840",
    "end": "292320"
  },
  {
    "text": "three we care about are those first three so the scheme the domain and the port and together those form the origin",
    "start": "292320",
    "end": "299360"
  },
  {
    "text": "um so the origin here for example is HTTP app. example.com 880 um and this is a really key thing",
    "start": "299360",
    "end": "305800"
  },
  {
    "text": "for browsers um essentially any two pages if they have the same origin have",
    "start": "305800",
    "end": "311280"
  },
  {
    "text": "readwrite access to each other in s of the simplified version and if I have a page loaded under An Origin I can also",
    "start": "311280",
    "end": "317919"
  },
  {
    "text": "request any resource from the server under that same origin but if app. example.com 880 wants to try access say",
    "start": "317919",
    "end": "324280"
  },
  {
    "text": "mail.google.com the browser will say no because the origin is different",
    "start": "324280",
    "end": "330800"
  },
  {
    "text": "so for DNS rebinding what we're trying to do and especially in the scenarios we're looking at today is to read",
    "start": "330800",
    "end": "337000"
  },
  {
    "text": "sensitive data from a Target web server um we're just going to look at reading data today um although writing will be",
    "start": "337000",
    "end": "342319"
  },
  {
    "text": "very possible with these attacks um or writing to the loaded page that is and",
    "start": "342319",
    "end": "347720"
  },
  {
    "text": "our Target web server we're going to say it has sensitive data atlest metadata so that's the path um that matches the AWS",
    "start": "347720",
    "end": "355039"
  },
  {
    "text": "metadata service and there's two requirements for it so the first is that it needs to to serve content over plain",
    "start": "355039",
    "end": "360800"
  },
  {
    "text": "HTTP if https is in use this attack won't work um and it also doesn't check",
    "start": "360800",
    "end": "366720"
  },
  {
    "text": "the host header so what this means is if I load up the web server using the domain evil.com if that resolves the IP",
    "start": "366720",
    "end": "373039"
  },
  {
    "text": "of the server evil.com will end up in the host header um and it's important that the target web server doesn't",
    "start": "373039",
    "end": "379000"
  },
  {
    "text": "change its response or block the request because of that now to exploit this the attack is",
    "start": "379000",
    "end": "384919"
  },
  {
    "text": "going to spin up a web server it needs to also serve content over playing HTTP and on the same port as the target web",
    "start": "384919",
    "end": "391280"
  },
  {
    "text": "server and it serves the attacker page to um perform the steps of the attack and we also need a DNS server so in this",
    "start": "391280",
    "end": "397960"
  },
  {
    "text": "case it's going to be the DNS server for evil.com in my examples and what this is going to do is the first time you do a",
    "start": "397960",
    "end": "403960"
  },
  {
    "text": "lookup of evil.com it's going to give you the IP address of the attacker's web server on the public internet and then",
    "start": "403960",
    "end": "409479"
  },
  {
    "text": "the next time you do a look up of evil.com it will instead return the IP address of our Target web server which",
    "start": "409479",
    "end": "414720"
  },
  {
    "text": "is typically on the local network so let's have a look at what this looks like don't worry we are",
    "start": "414720",
    "end": "420960"
  },
  {
    "text": "zooming in so we've got the target web server on the left the attacker web server and the attacker DNS server on the right and the user is loading up",
    "start": "420960",
    "end": "428000"
  },
  {
    "text": "HTTP evil.com in their browser so this triggers a DNS lookout for evil.com the",
    "start": "428000",
    "end": "433720"
  },
  {
    "text": "DNS server says Hey the IP address is the one of the attacker's web server so 1.2.3.4 and therefore the browser then",
    "start": "433720",
    "end": "442000"
  },
  {
    "text": "sends the next request to the attacker's web server um this Returns the attacker page and this page is going to include",
    "start": "442000",
    "end": "448680"
  },
  {
    "text": "JavaScript to repeatedly try and request that latest SL metadata path now it's",
    "start": "448680",
    "end": "453919"
  },
  {
    "text": "not on the attackers web server so that's obviously going to fail and we'll get a 404 after enough time the um browser's",
    "start": "453919",
    "end": "462280"
  },
  {
    "text": "cach DNS browser caches that DNS response for evo.com but after enough time that cash entry is going to expire",
    "start": "462280",
    "end": "469199"
  },
  {
    "text": "and the browser is going to have to do another look up for evo.com and this time the attackers DNS server says that",
    "start": "469199",
    "end": "475240"
  },
  {
    "text": "the IP address is the one of the target web server so the JavaScript still trying to request that URL and it ends",
    "start": "475240",
    "end": "483159"
  },
  {
    "text": "up reaching out to the Target web server so in this case it's basically the metadata service and it gets the response and importantly it's requested",
    "start": "483159",
    "end": "490280"
  },
  {
    "text": "a page under the same origin as the JavaScript is running so it can read the response and exfiltrate it out to the",
    "start": "490280",
    "end": "496720"
  },
  {
    "text": "attacker server so swinging back to me hacking my own company um we also use zap workers",
    "start": "496720",
    "end": "504560"
  },
  {
    "text": "to run zap scans for customers when we want to scan their web apps and these uh",
    "start": "504560",
    "end": "510000"
  },
  {
    "text": "these run headless Firefox so rather than a user loading up a page we now have an automated browser loading up a",
    "start": "510000",
    "end": "515800"
  },
  {
    "text": "page and that's what we're trying to Target and at the time they could also access the ec2 Metadate service again",
    "start": "515800",
    "end": "522800"
  },
  {
    "text": "this has been fixed and so these two metadata service",
    "start": "522800",
    "end": "528080"
  },
  {
    "text": "is our Target web server here you might recognize those bullet points from an earlier slide it meets all the",
    "start": "528080",
    "end": "533360"
  },
  {
    "text": "requirements of our Target web server so we can Target it with DNS rebinding and spin up a DNS server",
    "start": "533360",
    "end": "540720"
  },
  {
    "text": "sounded a bit painful fortunately Tavis ormandy has a rebinder service that you can just go and generate a domain and it",
    "start": "540720",
    "end": "548240"
  },
  {
    "text": "will alternate the IP address it resolves to on successive lookups um so you'll notice that these lookups change",
    "start": "548240",
    "end": "554720"
  },
  {
    "text": "they're probably taken about a minute apart you'll always be dealing with some sort of intermediate cache so if you do",
    "start": "554720",
    "end": "560040"
  },
  {
    "text": "them one after the other um whatever resolver you're using by default will likely give you the same IP address um",
    "start": "560040",
    "end": "566880"
  },
  {
    "text": "for about a minute at least so attacking our portal this diagram",
    "start": "566880",
    "end": "572720"
  },
  {
    "text": "hopefully looks quite familiar I told the zap worker to scan my domain it did a DNS lookup and it got the IP address",
    "start": "572720",
    "end": "579959"
  },
  {
    "text": "of my web server from my web server I returned a page to try and repeatedly",
    "start": "579959",
    "end": "585640"
  },
  {
    "text": "requests latest metadata so that API base path now I kept the worker busy so",
    "start": "585640",
    "end": "591959"
  },
  {
    "text": "it's trying to spider websites in Firefox so I just gave it a website with loads of dummy links to keep it clicking around for the maximum time that we",
    "start": "591959",
    "end": "598480"
  },
  {
    "text": "allow so as it was clicking around its DNS um cast response expired so it has",
    "start": "598480",
    "end": "604880"
  },
  {
    "text": "to another DNS lookup the rebinder service helpfully gives it the IP address of the metadata service so the",
    "start": "604880",
    "end": "611160"
  },
  {
    "text": "next request goes to the metadata service here on the left and we get the response we can read it in JavaScript",
    "start": "611160",
    "end": "618000"
  },
  {
    "text": "and in theory we can just send it off back to our web server we have it in a JavaScript variable um in practice there",
    "start": "618000",
    "end": "625399"
  },
  {
    "text": "was one slight issue we're doing this all through zap and zap is really aggressive Rive at blocking out of scope",
    "start": "625399",
    "end": "631040"
  },
  {
    "text": "requests so sending it back to my web server via IP address will be out of scope and I can't do that um and",
    "start": "631040",
    "end": "638120"
  },
  {
    "text": "remember the domain now points to the metadata service so I can't just send it back to that domain um it also blocks",
    "start": "638120",
    "end": "644680"
  },
  {
    "text": "the DNS lookups when you try to request something out of scope so you can't just exfiltrate over DNS fortunately we show",
    "start": "644680",
    "end": "651639"
  },
  {
    "text": "a list of scanned URLs to customers so I can just include the encoded credentials in a",
    "start": "651639",
    "end": "657720"
  },
  {
    "text": "URL and when I look at our scaned URLs you'll see they show up here um there's",
    "start": "657720",
    "end": "663000"
  },
  {
    "text": "a few different stages to get the attack working I've done here but the important one is that last line which shows the",
    "start": "663000",
    "end": "668560"
  },
  {
    "text": "base 64 encoded credentials and if we decode them we get the response with AWS",
    "start": "668560",
    "end": "673920"
  },
  {
    "text": "credentials that we' expect from the API obviously again heavily redacted",
    "start": "673920",
    "end": "679120"
  },
  {
    "text": "sorry um so how bad was this just briefly um the credentials had extremely",
    "start": "679120",
    "end": "685399"
  },
  {
    "text": "limited permissions our devops team had been through an exercise of locking them down as as possible already and I spoke",
    "start": "685399",
    "end": "691600"
  },
  {
    "text": "to them about what else you'd be able to reach with other HTTP services and it was very limited um and also we looked",
    "start": "691600",
    "end": "697920"
  },
  {
    "text": "at the logs no exploitation activity which is great um we deployed imds V2",
    "start": "697920",
    "end": "703120"
  },
  {
    "text": "really fast and the network level restrictions also rolled out very fast prioritizing that zap worker um and it",
    "start": "703120",
    "end": "708959"
  },
  {
    "text": "was a nice win for defense and depth sometimes you dump out AWS credentials from a web app and it's bad but I think",
    "start": "708959",
    "end": "715040"
  },
  {
    "text": "this kind of highlights the importance of making sure you lock the permissions on those down",
    "start": "715040",
    "end": "720959"
  },
  {
    "text": "so we've been looking at a fairly sort of traditional or simple technique just waiting for that DNS cache to expire um",
    "start": "720959",
    "end": "727399"
  },
  {
    "text": "and this is obviously quite slow so when I was attacking our portal it took 10 20 minutes for Firefox to um do another DNS",
    "start": "727399",
    "end": "734880"
  },
  {
    "text": "lookup or that DS look up to hit the DNS server at least now if you're thinking",
    "start": "734880",
    "end": "739920"
  },
  {
    "text": "about just the browser's cache you can flush it and what that means is requesting um pages on a lot of",
    "start": "739920",
    "end": "745519"
  },
  {
    "text": "different domains so the browser does loads of DNS lookups fills up its cash and starts discarding old entries before",
    "start": "745519",
    "end": "751279"
  },
  {
    "text": "it otherwise would with some testing that will get you down to the order of about 10 seconds before another DNS look",
    "start": "751279",
    "end": "757399"
  },
  {
    "text": "up happens and therefore your attack can run but that's if you only have to care about the browser cache unfortunately",
    "start": "757399",
    "end": "763920"
  },
  {
    "text": "intermediate caches on resolvers the browser is using are going to be an issue for example if you spin up an ec2",
    "start": "763920",
    "end": "770399"
  },
  {
    "text": "instance with a buntu you'll find that it takes about 5 to 10 minutes um for a new DNS Lookout to be performed um even",
    "start": "770399",
    "end": "777800"
  },
  {
    "text": "if you're just doing color from the command line and this is because system D resolve on iunu will run as the default resolver and it caches entries",
    "start": "777800",
    "end": "785079"
  },
  {
    "text": "for a minimum of 5 minutes whatever the TTL on the responses um and on a VPN that I've used I've seen a 30 minute",
    "start": "785079",
    "end": "791680"
  },
  {
    "text": "minimum cache time so if you're targeting a web app you often can't get it to load a page for 5 minutes and you",
    "start": "791680",
    "end": "797680"
  },
  {
    "text": "might not be able to get a user to load a page for that long either if you're trying to Target them so what if instead",
    "start": "797680",
    "end": "804399"
  },
  {
    "text": "of waiting for two lookups we just return both a records in the same response",
    "start": "804399",
    "end": "810839"
  },
  {
    "text": "so let's look at how that goes again again user loads up HTTP evil.com in their browser we get a DNS look up and",
    "start": "810839",
    "end": "817399"
  },
  {
    "text": "we return both our public IP address and the private Target web service IP address so we're switching to Local Host",
    "start": "817399",
    "end": "823519"
  },
  {
    "text": "as the private IP address now um so this is a key part this will only work if the",
    "start": "823519",
    "end": "830199"
  },
  {
    "text": "browser happens to reach out to the attacker's web server first we need it to request our page so that we can get",
    "start": "830199",
    "end": "835560"
  },
  {
    "text": "some JavaScript loaded in their browser and we can repeatedly try to request the file with sensitive information so we're",
    "start": "835560",
    "end": "841920"
  },
  {
    "text": "going to use secret. Tex from now on in these examples now when we get that request",
    "start": "841920",
    "end": "847079"
  },
  {
    "text": "for the file to our web server we reset the connection and the browser knows that it can't really use the IP address",
    "start": "847079",
    "end": "852880"
  },
  {
    "text": "anymore the web server is unreliable so hopefully it falls back to the Target web server as the only other",
    "start": "852880",
    "end": "858519"
  },
  {
    "text": "IP address it knows for that domain and it gets a secret. text file as before this is all under the same origin so the",
    "start": "858519",
    "end": "865040"
  },
  {
    "text": "JavaScript that sent that request can read the response and send it back out to server So in theory this works great but",
    "start": "865040",
    "end": "873720"
  },
  {
    "text": "that issue of having to load from the public web server first is a bit of a problem unfortunately while I was doing",
    "start": "873720",
    "end": "879279"
  },
  {
    "text": "testing I consistently got browsers loading from the private IP address first um and this broke the attack it's",
    "start": "879279",
    "end": "886800"
  },
  {
    "text": "not intended as a security measure as far as I understand and one of the Chrome developers even confirmed this",
    "start": "886800",
    "end": "891959"
  },
  {
    "text": "for me when I Tred to report something I'll show later on to them but it's really effective at stopping this",
    "start": "891959",
    "end": "897839"
  },
  {
    "text": "technique so so we're left with this problem we need to find a way to get browsers to load from the public IP",
    "start": "897839",
    "end": "903680"
  },
  {
    "text": "address first and then trigger them to switch to accessing the private IP address and how can we force this now",
    "start": "903680",
    "end": "910199"
  },
  {
    "text": "with many things the answer lies if just open up wies shark and have a look and",
    "start": "910199",
    "end": "915600"
  },
  {
    "text": "you'll get a nice clue here so what I did opened up wi shark tried to load ww. example.com and you'll see I got two DNS",
    "start": "915600",
    "end": "923279"
  },
  {
    "text": "lookups so we've had the a query that we've been talking about so far but also there's a quad a query for an ipv 6",
    "start": "923279",
    "end": "929199"
  },
  {
    "text": "address rather than ipv4 address and this provides the key to the techniques I'm going to show you now um for",
    "start": "929199",
    "end": "935199"
  },
  {
    "text": "attacking both Safari and chromium based browsers so let's start with Safari as",
    "start": "935199",
    "end": "940880"
  },
  {
    "text": "I've said when you do a load a website in Safari you'll send both a and quad a",
    "start": "940880",
    "end": "945920"
  },
  {
    "text": "queries for ipv4 and IPv6 addresses and Safari prioritizes the private address",
    "start": "945920",
    "end": "950959"
  },
  {
    "text": "over the public one when it has two addresses to pick from now the interesting a behavior in Safari that we",
    "start": "950959",
    "end": "957199"
  },
  {
    "text": "can exploit is that it doesn't wait for all DNS responses to come back as soon as it has one DNS response back it",
    "start": "957199",
    "end": "963920"
  },
  {
    "text": "starts sending requests to try and load the page as fast as possible so this gives us everything we need to exploit",
    "start": "963920",
    "end": "970920"
  },
  {
    "text": "Safari so we start off we get the user to load Safari to intrudes our domain in",
    "start": "970920",
    "end": "977519"
  },
  {
    "text": "their browser and this triggers both a and quad a queries for that domain we respond with only the quad a query and",
    "start": "977519",
    "end": "984920"
  },
  {
    "text": "we don't send the a response yet so we give it the um public IP pv6 address of our web",
    "start": "984920",
    "end": "990720"
  },
  {
    "text": "server from there Safari doesn't care that it's only got one response for two queries it loads up the page from the",
    "start": "990720",
    "end": "997319"
  },
  {
    "text": "web server as before that page tries to request the secret file and at this point it's going to get",
    "start": "997319",
    "end": "1004199"
  },
  {
    "text": "no response from our server it's going to get a 404 um and this is when we return the a response so the next time",
    "start": "1004199",
    "end": "1011160"
  },
  {
    "text": "that the JavaScript tries to request that secret page Safari has two IP addresses to pick from it consistently",
    "start": "1011160",
    "end": "1017680"
  },
  {
    "text": "prioritizes the private address which is our Target web server so the request goes to our Target web server we get the",
    "start": "1017680",
    "end": "1023680"
  },
  {
    "text": "response back it's all under the same origin we can read it with JavaScript and we can send it out to our web",
    "start": "1023680",
    "end": "1029240"
  },
  {
    "text": "server so this is the scary part where I try to demo this to you um please pray",
    "start": "1029240",
    "end": "1034520"
  },
  {
    "text": "for me um so what we've got here and you can",
    "start": "1034520",
    "end": "1040120"
  },
  {
    "text": "see it um text size good yeah nice um so in the top left um we have a tool I've",
    "start": "1040120",
    "end": "1047280"
  },
  {
    "text": "written to basically access a DNS server and delay responses there's a few Flags",
    "start": "1047280",
    "end": "1052520"
  },
  {
    "text": "there but importantly I've told it to give a quad a response of colon colon 1 so access Local Host an a response of",
    "start": "1052520",
    "end": "1060280"
  },
  {
    "text": "the ipv4 address on my web server and to delay the quad a response by 300 milliseconds you might notice this is",
    "start": "1060280",
    "end": "1066640"
  },
  {
    "text": "the other way around the demo I just showed where I delayed the quad a or I delayed the a response rather than the quad a the VPN I'm using has weird",
    "start": "1066640",
    "end": "1074080"
  },
  {
    "text": "Behavior which means it only acts this way around off this VPN I've never seen this anywhere else it works fine either",
    "start": "1074080",
    "end": "1080520"
  },
  {
    "text": "way um so let's start that DNS server up um we're also going to serve from our web server um the small exploit script",
    "start": "1080520",
    "end": "1087600"
  },
  {
    "text": "to do what I discussed and what we've got here on at the bottom is a python",
    "start": "1087600",
    "end": "1093559"
  },
  {
    "text": "server we're going to generate a random um flag into a file and then have it running on Local Host over python so as",
    "start": "1093559",
    "end": "1101480"
  },
  {
    "text": "you can see we've got a flag in a file running on Local Host now so hopefully",
    "start": "1101480",
    "end": "1107360"
  },
  {
    "text": "if I now load up the domain this is a bookmark for safari. intrudes it's a domain we",
    "start": "1107360",
    "end": "1112720"
  },
  {
    "text": "run we instantly get well not instantly 300 millisecond delay we get the private",
    "start": "1112720",
    "end": "1118679"
  },
  {
    "text": "flag from The Local web server shown in an alert box and I'm showing you an alert box here but you can obviously",
    "start": "1118679",
    "end": "1124039"
  },
  {
    "text": "just post it back off to your web server um now 300 milliseconds I've picked to",
    "start": "1124039",
    "end": "1130159"
  },
  {
    "text": "try and keep this reliable on my VPN on this network in practice I found that 100 milliseconds typically works really",
    "start": "1130159",
    "end": "1136640"
  },
  {
    "text": "well and it's about the sweet spot for going as fast as as possible but you can obviously just slow it down to keep",
    "start": "1136640",
    "end": "1141840"
  },
  {
    "text": "everything a bit more reliable um so obviously I'm not leaving you to write your own DNS server it was",
    "start": "1141840",
    "end": "1148400"
  },
  {
    "text": "painful if you look at the output code it will seem very simple but it took a lot of staring at wi shark and wondering",
    "start": "1148400",
    "end": "1154600"
  },
  {
    "text": "why my responses weren't accepted so I've written this for you um it's available on GitHub I'll make it public",
    "start": "1154600",
    "end": "1160159"
  },
  {
    "text": "after the talk um and all the instructions and everything you need should be in the read me and the exploit",
    "start": "1160159",
    "end": "1166200"
  },
  {
    "text": "code is included in there as well for that little demo that I just showed let's continue we've looked at Safari so",
    "start": "1166200",
    "end": "1172559"
  },
  {
    "text": "let's look at Chrome um and I'm saying Chrome here but it actually applies to any chromium based browser including",
    "start": "1172559",
    "end": "1178400"
  },
  {
    "text": "Edge so like Safari Chrome will send a and quad a queries it prioritizes",
    "start": "1178400",
    "end": "1184679"
  },
  {
    "text": "private over public addresses and interestingly it prioritizes IPv6 over",
    "start": "1184679",
    "end": "1190000"
  },
  {
    "text": "ipv4 now it cares more about prioritizing IPv6 which means that if we",
    "start": "1190000",
    "end": "1195400"
  },
  {
    "text": "have a public IPv6 address that will be prioritized for a private ipv4 address",
    "start": "1195400",
    "end": "1201039"
  },
  {
    "text": "and as soon as it sees the web server reset the connection it will fall back to any other address it has for the",
    "start": "1201039",
    "end": "1207840"
  },
  {
    "text": "domain so this gives us enough for a plan and this plan doesn't work I'll",
    "start": "1207840",
    "end": "1212880"
  },
  {
    "text": "tell you why in a second but we'll improve it and fix it so we load up our domain in Chrome we get a and quad a",
    "start": "1212880",
    "end": "1220720"
  },
  {
    "text": "queries we respond with an a record for our Target web server and a quad a record for the attacker's web server on",
    "start": "1220720",
    "end": "1227400"
  },
  {
    "text": "the public internet Chrome prioritizes the public IPv6 address of the target of the attacker",
    "start": "1227400",
    "end": "1233960"
  },
  {
    "text": "web server sorry we return a page which tries to repeatedly request our secret",
    "start": "1233960",
    "end": "1239120"
  },
  {
    "text": "file and from there when we receive that request we reset the connection so Chrome now knows that it can't really",
    "start": "1239120",
    "end": "1245440"
  },
  {
    "text": "reach out to the attacker's web server reliably so it's going to try the other IP address it has for this domain which",
    "start": "1245440",
    "end": "1251360"
  },
  {
    "text": "is the target web server so it resends that request for the secret file to the Target web server and we get the",
    "start": "1251360",
    "end": "1257360"
  },
  {
    "text": "response back this was made by JavaScript under the same origin so in theory we can just read that response",
    "start": "1257360",
    "end": "1264000"
  },
  {
    "text": "and send it off to our web server and I thought I cracked it I implemented this",
    "start": "1264000",
    "end": "1269080"
  },
  {
    "text": "and ran it and I got an error um and it's a weird error if you look at this",
    "start": "1269080",
    "end": "1275480"
  },
  {
    "text": "it's telling me from a page under the origin HTTP HTTP chrome. r. intrudes I",
    "start": "1275480",
    "end": "1282039"
  },
  {
    "text": "can't access a file under the same origin because the cross origin resource sharing policy is in effect and that's",
    "start": "1282039",
    "end": "1289320"
  },
  {
    "text": "quite confusing the key in that second part which uh talks about PNA",
    "start": "1289320",
    "end": "1294520"
  },
  {
    "text": "restrictions these are private network access this is a specification for trying to segregate public and private",
    "start": "1294520",
    "end": "1300520"
  },
  {
    "text": "networks and it's partially implemented in Chrome and it extends cause which is why we got the cause error in there um",
    "start": "1300520",
    "end": "1307039"
  },
  {
    "text": "so that is still weird and confusing but it does make some sense now this means that our page",
    "start": "1307039",
    "end": "1314080"
  },
  {
    "text": "loaded from the public internet on the attacker's web server can't make requests to the local network work including our Target web server we try",
    "start": "1314080",
    "end": "1321840"
  },
  {
    "text": "to do it with a fetch request um using the JavaScript apis and the PNA restrictions are applied to fetch",
    "start": "1321840",
    "end": "1328120"
  },
  {
    "text": "they're not applied to iframes though so we can actually get around this so we're going to start as before",
    "start": "1328120",
    "end": "1335120"
  },
  {
    "text": "we load up um our page in Chrome we get a and quad a queries we give an a",
    "start": "1335120",
    "end": "1341039"
  },
  {
    "text": "response for the Target web server a qu a response for the public IP address of the attackers web",
    "start": "1341039",
    "end": "1346760"
  },
  {
    "text": "server the Chrome loads the page and our page tries to repeatedly request the secret file now from here that page also",
    "start": "1346760",
    "end": "1355840"
  },
  {
    "text": "has an iframe in it and we tried to set the source of that iframe to that same page that we have loaded so HTTP chrome.",
    "start": "1355840",
    "end": "1363080"
  },
  {
    "text": "intrudes um I've redacted it here for Simplicity we do some checks to make sure that has actually loaded from the",
    "start": "1363080",
    "end": "1368679"
  },
  {
    "text": "local network and not from the attacker web server if those checks fail we just reload the page until it",
    "start": "1368679",
    "end": "1375039"
  },
  {
    "text": "works and assuming that's happened we're then going to move on to line eight here",
    "start": "1375039",
    "end": "1380640"
  },
  {
    "text": "the inject script function so before we get to that though just a recap and make clear where we are we've now continued",
    "start": "1380640",
    "end": "1388279"
  },
  {
    "text": "because Chrome saw the reset when we set the iframe or um URL to this HTTP Chrome",
    "start": "1388279",
    "end": "1394520"
  },
  {
    "text": "a in truds that got loaded from the target web server on the local network so we now have our top page here",
    "start": "1394520",
    "end": "1401799"
  },
  {
    "text": "in blue with the origin HTTP chrome. r. intrudes and that's loaded from the",
    "start": "1401799",
    "end": "1407200"
  },
  {
    "text": "public internet the as web server and in that page we have an iframe under the same origin loaded from the local",
    "start": "1407200",
    "end": "1414159"
  },
  {
    "text": "network so our top page cannot make request the local network because it's from the public internet and it's loaded",
    "start": "1414159",
    "end": "1419520"
  },
  {
    "text": "over HTTP the iframe can though because it was loaded from Local Host and",
    "start": "1419520",
    "end": "1424600"
  },
  {
    "text": "importantly these are the same origin so the top page can inject any content into that iframe including scripts so let's",
    "start": "1424600",
    "end": "1433360"
  },
  {
    "text": "see what that looks like we have this inject script function starting on line one it gets the doc doent of the if",
    "start": "1433360",
    "end": "1439120"
  },
  {
    "text": "frame it creates a new script tag and it puts that script in to the if frame now",
    "start": "1439120",
    "end": "1444159"
  },
  {
    "text": "the content of that script is this inject Funk so that it will get cooled whenever this script is injected into",
    "start": "1444159",
    "end": "1449840"
  },
  {
    "text": "the iframe and that inject Funk fetches our secret file it converts a respons to",
    "start": "1449840",
    "end": "1454919"
  },
  {
    "text": "text and in this case it just shows it in an alert box you can just post it back off to your server or excal trate",
    "start": "1454919",
    "end": "1460760"
  },
  {
    "text": "it however you want it's in a JavaScript variable so to go through what this",
    "start": "1460760",
    "end": "1465840"
  },
  {
    "text": "looks like in full we now from we have that page loaded from the local network in the iframe we inject script into the",
    "start": "1465840",
    "end": "1473279"
  },
  {
    "text": "iframe that script requests our secret file and then we post this back off to",
    "start": "1473279",
    "end": "1478919"
  },
  {
    "text": "our web server now it's demo number two so",
    "start": "1478919",
    "end": "1484440"
  },
  {
    "text": "hopefully this doesn't break on me um rather than just trying to demo the um demo finding a file from",
    "start": "1484440",
    "end": "1492120"
  },
  {
    "text": "a local web server I thought it'd be more fun to attack an actual tool that's fairly commonly used um so we're going",
    "start": "1492120",
    "end": "1497720"
  },
  {
    "text": "to attack go witness here now going witness is a screenshotting tool it drives headless Chrome to take",
    "start": "1497720",
    "end": "1503679"
  },
  {
    "text": "screenshots and I've got it running on an ec2 which has IPv6 access to the internet so let's start with setting up",
    "start": "1503679",
    "end": "1511120"
  },
  {
    "text": "the attack in this page on the top left I have my rebind server running so this",
    "start": "1511120",
    "end": "1516640"
  },
  {
    "text": "is a tool that I'll release and I'll talk about more in a second it just serves static files until it receives a",
    "start": "1516640",
    "end": "1522120"
  },
  {
    "text": "request the SL block endpoint at which point it just shuts down um it's a very inelegant way of resetting the",
    "start": "1522120",
    "end": "1527799"
  },
  {
    "text": "connection but it works um and down below we have the DNS",
    "start": "1527799",
    "end": "1533360"
  },
  {
    "text": "server running as well I'm using the DNS delay server again but I'm not got I've not got a delay in there that's just for",
    "start": "1533360",
    "end": "1539240"
  },
  {
    "text": "Simplicity of setup so we've told it to return um the IPv6 address of our web",
    "start": "1539240",
    "end": "1546039"
  },
  {
    "text": "server on the public internet and for a responses return the ipv4 address of the metadata service so let's get both those",
    "start": "1546039",
    "end": "1553559"
  },
  {
    "text": "running one more thing we have is we are posting off data to our web server so",
    "start": "1553559",
    "end": "1559720"
  },
  {
    "text": "I've just got a little web server here set up to receive that data and decode it from Bas 64 when it's sent off so",
    "start": "1559720",
    "end": "1566840"
  },
  {
    "text": "this should all be good to go and now if I run this command from go witness to take a screenshot of my website",
    "start": "1566840",
    "end": "1574279"
  },
  {
    "text": "hopefully we get some AWS credentials out and this did work just before the talk so we'll see how it goes um and I",
    "start": "1574279",
    "end": "1582480"
  },
  {
    "text": "realized I run the wrong command there there we go something always has to go wrong there there we go um so we try to",
    "start": "1582480",
    "end": "1590960"
  },
  {
    "text": "take a screenshot of one of the domains on all intrudes which will point to our web server we get a big response back",
    "start": "1590960",
    "end": "1596679"
  },
  {
    "text": "with loads of Bas 64 but if we look at that there's actually AWS credentials when they're decoded so we've grabbed",
    "start": "1596679",
    "end": "1602799"
  },
  {
    "text": "those from the metadata service when go witness Tred to take a screenshot and posted them off to ourselves um and",
    "start": "1602799",
    "end": "1609000"
  },
  {
    "text": "because I have just shown AWS credentials in front of blackout audience I'm just going to tear that",
    "start": "1609000",
    "end": "1615919"
  },
  {
    "text": "down um those credentials locked out as well you should not be able to do much with them um now because my sections",
    "start": "1615919",
    "end": "1622279"
  },
  {
    "text": "have got out of order in a way that I do not understand please bear with me one",
    "start": "1622279",
    "end": "1627640"
  },
  {
    "text": "second while I find the final section perfect um so that rebind server",
    "start": "1627640",
    "end": "1634120"
  },
  {
    "text": "is released on GitHub as well um all the instructions you need will be in the readme and everything there and also",
    "start": "1634120",
    "end": "1640399"
  },
  {
    "text": "there are two posts on Intruders research blog detailing everything I'm talking about today and those will link",
    "start": "1640399",
    "end": "1645760"
  },
  {
    "text": "to that as well so just to kind of wrap up now what are the limitations of this well you",
    "start": "1645760",
    "end": "1652440"
  },
  {
    "text": "have the traditional DNS rebinding limitations um specifically the target web server has to ignore the host header",
    "start": "1652440",
    "end": "1658600"
  },
  {
    "text": "you need to be able to have anything in there or anything sort of printable in there as an actual domain and it has to",
    "start": "1658600",
    "end": "1663720"
  },
  {
    "text": "use plain HTTP um https will break this and for attacking Chrome and Safari we",
    "start": "1663720",
    "end": "1669960"
  },
  {
    "text": "also have that requirement the IPv6 access to the internet is required if you don't have that the quad a lookup",
    "start": "1669960",
    "end": "1676120"
  },
  {
    "text": "won't even be performed so there's not really much scope for other trickery there with trying to return solve six to",
    "start": "1676120",
    "end": "1681399"
  },
  {
    "text": "four responses for example now if you're driving ahead this browser please ask yourself a couple of",
    "start": "1681399",
    "end": "1687480"
  },
  {
    "text": "questions does it need to load arbitary websites supplied by users can you restrict that to https the answers to",
    "start": "1687480",
    "end": "1693720"
  },
  {
    "text": "those questions might be yes and no that's fine um and obviously bear in mind if you're trying to restrict what's",
    "start": "1693720",
    "end": "1698840"
  },
  {
    "text": "loaded Pages might redirect they might embed content to make sure you're considering everything but the most",
    "start": "1698840",
    "end": "1705080"
  },
  {
    "text": "important point is that last one does the browser need access to internal Network Services such as the metadata",
    "start": "1705080",
    "end": "1711480"
  },
  {
    "text": "service or anything else on the private network of the server the answer is probably no um and if it does it",
    "start": "1711480",
    "end": "1718360"
  },
  {
    "text": "probably needs very specific access that you can limit so for example that's Intruder we keep our tools now in Docker",
    "start": "1718360",
    "end": "1724360"
  },
  {
    "text": "containers on our workers and we limit the access of those Docker containers so the east2 instances themselves can still",
    "start": "1724360",
    "end": "1730919"
  },
  {
    "text": "access the metadata service but the tools that we run that take user data have really locked down network access",
    "start": "1730919",
    "end": "1740000"
  },
  {
    "text": "also where to next um I have presented a fairly simple look at some DNS a fairly",
    "start": "1740000",
    "end": "1746799"
  },
  {
    "text": "simple DNS functionality in here I haven't sent any weird responses I haven't used anything particularly",
    "start": "1746799",
    "end": "1752399"
  },
  {
    "text": "exotic in DNS I think there's probably more areas to explore same for private",
    "start": "1752399",
    "end": "1757519"
  },
  {
    "text": "network access I presented a fairly simple bypass I think it was about the second thing I tried I think there's a",
    "start": "1757519",
    "end": "1762960"
  },
  {
    "text": "lot more out there currently it's not fully implemented um it's under the way the Chrome team are on it but I think",
    "start": "1762960",
    "end": "1769480"
  },
  {
    "text": "there's more areas to try and bypass private network access with um and I should say that bypass I did report to",
    "start": "1769480",
    "end": "1776080"
  },
  {
    "text": "the Chrome team and they told me it's not a bug and it's fine because they're still implementing um but at some point",
    "start": "1776080",
    "end": "1781399"
  },
  {
    "text": "if you find a bypass it will be a bug and hopefully they'll give you some money also notable emission from this",
    "start": "1781399",
    "end": "1786840"
  },
  {
    "text": "talk Firefox it wasn't really my focus my main concern is actually targeting",
    "start": "1786840",
    "end": "1792159"
  },
  {
    "text": "web apps and despite us driving headless Firefox most web apps are driving headless Chrome so that's I put the most",
    "start": "1792159",
    "end": "1798679"
  },
  {
    "text": "effort in so when a quick look at Firefox didn't find anything I sort of moved on but I think there's potentially",
    "start": "1798679",
    "end": "1805000"
  },
  {
    "text": "some behavior in Firefox you can exploit there now if you're going to take away",
    "start": "1805000",
    "end": "1810679"
  },
  {
    "text": "anything from this talk these are the things I want you to look at so firstly DNS rebinding attacks are achievable",
    "start": "1810679",
    "end": "1816960"
  },
  {
    "text": "I've hopefully shown you that the attack I presented at the start I think is perfectly doable in a Time limited",
    "start": "1816960",
    "end": "1822159"
  },
  {
    "text": "scenario such as a penetration test you don't need to syn loads of time into them you can get them working simply",
    "start": "1822159",
    "end": "1828880"
  },
  {
    "text": "you also now have some new tools and techniques to help you get them working faster hopefully and also very reliably",
    "start": "1828880",
    "end": "1835240"
  },
  {
    "text": "and also there are areas of future research I think there's a lot to come here so please have a",
    "start": "1835240",
    "end": "1841559"
  },
  {
    "text": "look there are some references some further reading there but finally uh",
    "start": "1841559",
    "end": "1846880"
  },
  {
    "text": "with more time than I was expecting for questions so hopefully you have some I just like to say thank you um please go",
    "start": "1846880",
    "end": "1852080"
  },
  {
    "text": "look at our research blog it has everything I've talked about here um I also have a personal research blog",
    "start": "1852080",
    "end": "1858240"
  },
  {
    "text": "website formerly known as Twitter SLX my company has one I have one I tweet about my research and not much else there and",
    "start": "1858240",
    "end": "1866039"
  },
  {
    "text": "any questions and then the slides are out of order there of course so thank",
    "start": "1866039",
    "end": "1874300"
  },
  {
    "text": "[Applause] you",
    "start": "1874300",
    "end": "1881360"
  }
]