[
  {
    "text": "thank you",
    "start": "2720",
    "end": "3680"
  },
  {
    "text": "amilio uh hi everyone so uh this is",
    "start": "3680",
    "end": "7080"
  },
  {
    "text": "Joint work with Steven Shea of Overland",
    "start": "7080",
    "end": "9480"
  },
  {
    "text": "college and hobab shasham of UT Austin",
    "start": "9480",
    "end": "12960"
  },
  {
    "text": "in this talk I'll be showing you one",
    "start": "12960",
    "end": "14839"
  },
  {
    "text": "possible way that a decoder",
    "start": "14839",
    "end": "16560"
  },
  {
    "text": "vulnerability can take you from playing",
    "start": "16560",
    "end": "18359"
  },
  {
    "text": "a video to getting a",
    "start": "18359",
    "end": "20800"
  },
  {
    "text": "crash so who is this talk for and why",
    "start": "20800",
    "end": "24359"
  },
  {
    "text": "this talk is first for red teamers that",
    "start": "24359",
    "end": "26240"
  },
  {
    "text": "are looking for a new attack surface to",
    "start": "26240",
    "end": "28679"
  },
  {
    "text": "explore along onside them this is",
    "start": "28679",
    "end": "30880"
  },
  {
    "text": "relevant to Blue teams as they identify",
    "start": "30880",
    "end": "32758"
  },
  {
    "text": "their threat models similarly policy",
    "start": "32759",
    "end": "35600"
  },
  {
    "text": "makers May care as they assess the risk",
    "start": "35600",
    "end": "37680"
  },
  {
    "text": "to their respective",
    "start": "37680",
    "end": "39360"
  },
  {
    "text": "institutions and this is also relevant",
    "start": "39360",
    "end": "41440"
  },
  {
    "text": "to developers that work with compressed",
    "start": "41440",
    "end": "43520"
  },
  {
    "text": "videos in fact this talk is for anyone",
    "start": "43520",
    "end": "46480"
  },
  {
    "text": "that plays arbitrary videos for example",
    "start": "46480",
    "end": "49600"
  },
  {
    "text": "I am someone who plays arbitrary videos",
    "start": "49600",
    "end": "51760"
  },
  {
    "text": "and who am I my my name is Willie",
    "start": "51760",
    "end": "53960"
  },
  {
    "text": "Vasquez and I go by wve I'm a PhD",
    "start": "53960",
    "end": "56559"
  },
  {
    "text": "student at UT Austin I do research in",
    "start": "56559",
    "end": "59480"
  },
  {
    "text": "systems security cryptography and cyber",
    "start": "59480",
    "end": "61519"
  },
  {
    "text": "laon policy and I was previously at MIT",
    "start": "61519",
    "end": "63920"
  },
  {
    "text": "and BBN and you can check out my website",
    "start": "63920",
    "end": "66640"
  },
  {
    "text": "there to see the kind of Adventures I",
    "start": "66640",
    "end": "68159"
  },
  {
    "text": "get into so going back to arbitrary",
    "start": "68159",
    "end": "71680"
  },
  {
    "text": "videos arbitrary videos from untrusted",
    "start": "71680",
    "end": "74360"
  },
  {
    "text": "sources are everywhere as you scroll the",
    "start": "74360",
    "end": "77000"
  },
  {
    "text": "web videos from websites or ads May",
    "start": "77000",
    "end": "79360"
  },
  {
    "text": "automatically start playing even more",
    "start": "79360",
    "end": "81880"
  },
  {
    "text": "concerning strangers can send you videos",
    "start": "81880",
    "end": "84079"
  },
  {
    "text": "through messaging apps which your device",
    "start": "84079",
    "end": "86640"
  },
  {
    "text": "processes so why is this exposure to",
    "start": "86640",
    "end": "88960"
  },
  {
    "text": "videos from untrusted source is an issue",
    "start": "88960",
    "end": "91960"
  },
  {
    "text": "this is because processing arbitrary",
    "start": "91960",
    "end": "93799"
  },
  {
    "text": "videos is dangerous as an example",
    "start": "93799",
    "end": "96840"
  },
  {
    "text": "messaging apps will produce a thumbnail",
    "start": "96840",
    "end": "98720"
  },
  {
    "text": "for the notification which can enable",
    "start": "98720",
    "end": "100640"
  },
  {
    "text": "zero-click attacks meaning you may not",
    "start": "100640",
    "end": "102680"
  },
  {
    "text": "realize you've been hacked user",
    "start": "102680",
    "end": "105040"
  },
  {
    "text": "applications the kernel and dedicated",
    "start": "105040",
    "end": "107280"
  },
  {
    "text": "Hardware each parse different parts of",
    "start": "107280",
    "end": "109079"
  },
  {
    "text": "the video providing a deep attack",
    "start": "109079",
    "end": "111280"
  },
  {
    "text": "surface and existing defenses rarely",
    "start": "111280",
    "end": "114079"
  },
  {
    "text": "focus on video decoding issues at the",
    "start": "114079",
    "end": "116079"
  },
  {
    "text": "kernel or Hardware",
    "start": "116079",
    "end": "117960"
  },
  {
    "text": "level the danger partly comes from the",
    "start": "117960",
    "end": "120479"
  },
  {
    "text": "fact that videos are compressed with",
    "start": "120479",
    "end": "122240"
  },
  {
    "text": "complex algorithms called codec of which",
    "start": "122240",
    "end": "125680"
  },
  {
    "text": "h264 is the most universally supported",
    "start": "125680",
    "end": "128200"
  },
  {
    "text": "codec with practically all devices",
    "start": "128200",
    "end": "130800"
  },
  {
    "text": "having h264 decode",
    "start": "130800",
    "end": "133160"
  },
  {
    "text": "support this ubiquity and complexity",
    "start": "133160",
    "end": "136319"
  },
  {
    "text": "leads to a vast and underexplored attack",
    "start": "136319",
    "end": "139640"
  },
  {
    "text": "surface to explore this attack surface",
    "start": "139640",
    "end": "142319"
  },
  {
    "text": "we introduce h26 Forge a tool that",
    "start": "142319",
    "end": "145680"
  },
  {
    "text": "produces specially crafted videos to",
    "start": "145680",
    "end": "147800"
  },
  {
    "text": "test h264 decoders for w",
    "start": "147800",
    "end": "150440"
  },
  {
    "text": "abilities so that once vulnerabilities",
    "start": "150440",
    "end": "152640"
  },
  {
    "text": "are found they can be",
    "start": "152640",
    "end": "155400"
  },
  {
    "text": "extinguished with h26 Forge we found and",
    "start": "155400",
    "end": "158480"
  },
  {
    "text": "reported issues in applications kernel",
    "start": "158480",
    "end": "161519"
  },
  {
    "text": "drivers and",
    "start": "161519",
    "end": "163599"
  },
  {
    "text": "Hardware given all this in this talk",
    "start": "163599",
    "end": "166599"
  },
  {
    "text": "I'll first show the complexity of video",
    "start": "166599",
    "end": "168440"
  },
  {
    "text": "decoding and demonstrate the decoder",
    "start": "168440",
    "end": "170360"
  },
  {
    "text": "attack surface especially how it relates",
    "start": "170360",
    "end": "172440"
  },
  {
    "text": "to h264 encoded",
    "start": "172440",
    "end": "174239"
  },
  {
    "text": "videos then I'll introduce our new tool",
    "start": "174239",
    "end": "176640"
  },
  {
    "text": "called h26 Forge a toolkit to produce",
    "start": "176640",
    "end": "179159"
  },
  {
    "text": "specially crafted videos to find",
    "start": "179159",
    "end": "180879"
  },
  {
    "text": "vulnerabilities in video decoders and",
    "start": "180879",
    "end": "182680"
  },
  {
    "text": "investigate their exploitability",
    "start": "182680",
    "end": "184519"
  },
  {
    "text": "finally I'll show you how we used h26",
    "start": "184519",
    "end": "187120"
  },
  {
    "text": "Forge to find and investigate serious",
    "start": "187120",
    "end": "189280"
  },
  {
    "text": "vulnerabilities in the iOS kernel",
    "start": "189280",
    "end": "191360"
  },
  {
    "text": "because if even Apple can have these",
    "start": "191360",
    "end": "192879"
  },
  {
    "text": "issues others can as",
    "start": "192879",
    "end": "195120"
  },
  {
    "text": "well before starting I want to share",
    "start": "195120",
    "end": "197560"
  },
  {
    "text": "that h26 Forge is currently available if",
    "start": "197560",
    "end": "199840"
  },
  {
    "text": "you want to start playing with it during",
    "start": "199840",
    "end": "201000"
  },
  {
    "text": "this talk if you don't feel comfortable",
    "start": "201000",
    "end": "203200"
  },
  {
    "text": "scanning a QR code from the black hat",
    "start": "203200",
    "end": "204840"
  },
  {
    "text": "stage it's totally fine understand you",
    "start": "204840",
    "end": "207519"
  },
  {
    "text": "can type in that URL and check out our",
    "start": "207519",
    "end": "209239"
  },
  {
    "text": "tool",
    "start": "209239",
    "end": "211760"
  },
  {
    "text": "okay let's start now by looking at the",
    "start": "211879",
    "end": "213799"
  },
  {
    "text": "video attack",
    "start": "213799",
    "end": "215680"
  },
  {
    "text": "surface the threat model that we're",
    "start": "215680",
    "end": "217599"
  },
  {
    "text": "working under is an adversary crafting a",
    "start": "217599",
    "end": "220000"
  },
  {
    "text": "malicious video and getting the video to",
    "start": "220000",
    "end": "222040"
  },
  {
    "text": "play on a victim device this could be",
    "start": "222040",
    "end": "224480"
  },
  {
    "text": "accomplished either via putting the",
    "start": "224480",
    "end": "226040"
  },
  {
    "text": "video up on a website and having the",
    "start": "226040",
    "end": "227840"
  },
  {
    "text": "user play the video or have the system",
    "start": "227840",
    "end": "229760"
  },
  {
    "text": "generate a thumbnail or alternatively by",
    "start": "229760",
    "end": "232519"
  },
  {
    "text": "sending the video to a victim directly",
    "start": "232519",
    "end": "234280"
  },
  {
    "text": "through a messaging",
    "start": "234280",
    "end": "235799"
  },
  {
    "text": "app once the video arrives at the victim",
    "start": "235799",
    "end": "238680"
  },
  {
    "text": "often in a container form such as MP4",
    "start": "238680",
    "end": "241400"
  },
  {
    "text": "the video decoding pipeline starts with",
    "start": "241400",
    "end": "243360"
  },
  {
    "text": "a user application parsing the MP4",
    "start": "243360",
    "end": "245879"
  },
  {
    "text": "metadata the user application then",
    "start": "245879",
    "end": "248280"
  },
  {
    "text": "forwards the encoded bitstream to a",
    "start": "248280",
    "end": "250280"
  },
  {
    "text": "kernel driver which will parse a portion",
    "start": "250280",
    "end": "252360"
  },
  {
    "text": "of it to prepare dedicated hardware for",
    "start": "252360",
    "end": "255079"
  },
  {
    "text": "decoding this dedicated Hardware",
    "start": "255079",
    "end": "257560"
  },
  {
    "text": "receives the rest of the encoded",
    "start": "257560",
    "end": "258639"
  },
  {
    "text": "bitstream and produces the individual",
    "start": "258639",
    "end": "260720"
  },
  {
    "text": "frames that we",
    "start": "260720",
    "end": "262120"
  },
  {
    "text": "see the reason that we have this",
    "start": "262120",
    "end": "264280"
  },
  {
    "text": "dedicated Hardware is because decoding",
    "start": "264280",
    "end": "266479"
  },
  {
    "text": "is a comput computationally heavy",
    "start": "266479",
    "end": "268759"
  },
  {
    "text": "process so this this Hardware ensures",
    "start": "268759",
    "end": "270840"
  },
  {
    "text": "Smooth video",
    "start": "270840",
    "end": "272160"
  },
  {
    "text": "playback in fact in the course of this",
    "start": "272160",
    "end": "274520"
  },
  {
    "text": "work we identified over 25 different",
    "start": "274520",
    "end": "277039"
  },
  {
    "text": "providers of h264 Hardware video",
    "start": "277039",
    "end": "279280"
  },
  {
    "text": "decoders These are built into the system",
    "start": "279280",
    "end": "281440"
  },
  {
    "text": "on chip and GPU that your device uses",
    "start": "281440",
    "end": "283759"
  },
  {
    "text": "and it's not always easy to identify",
    "start": "283759",
    "end": "285440"
  },
  {
    "text": "which decoder it's",
    "start": "285440",
    "end": "287039"
  },
  {
    "text": "using and each Hardware video decoder",
    "start": "287039",
    "end": "289840"
  },
  {
    "text": "has its own kernel driver associated",
    "start": "289840",
    "end": "291919"
  },
  {
    "text": "with to associated with it to control",
    "start": "291919",
    "end": "294680"
  },
  {
    "text": "it so what each decoder kernel driver",
    "start": "294680",
    "end": "297400"
  },
  {
    "text": "does is it takes untrusted input",
    "start": "297400",
    "end": "300240"
  },
  {
    "text": "from the",
    "start": "300240",
    "end": "301440"
  },
  {
    "text": "internet parses part of the video in the",
    "start": "301440",
    "end": "304520"
  },
  {
    "text": "kernel and finally sends the rest to",
    "start": "304520",
    "end": "306960"
  },
  {
    "text": "Hardware to produce frames surely",
    "start": "306960",
    "end": "309600"
  },
  {
    "text": "nothing can go wrong",
    "start": "309600",
    "end": "311680"
  },
  {
    "text": "here well let me tell you about the",
    "start": "311680",
    "end": "313680"
  },
  {
    "text": "Apple mobile video decoder and what R",
    "start": "313680",
    "end": "316039"
  },
  {
    "text": "what went wrong Apple has had two mobile",
    "start": "316039",
    "end": "318720"
  },
  {
    "text": "Hardware video decoders that we're aware",
    "start": "318720",
    "end": "320440"
  },
  {
    "text": "of the first is the apple d5500 found in",
    "start": "320440",
    "end": "324120"
  },
  {
    "text": "devices with up to a11 S so's it is",
    "start": "324120",
    "end": "326880"
  },
  {
    "text": "built by imagination Technologies and",
    "start": "326880",
    "end": "328880"
  },
  {
    "text": "has its own kernel driver the apple",
    "start": "328880",
    "end": "331400"
  },
  {
    "text": "d5500 kex or kernel extension associated",
    "start": "331400",
    "end": "334319"
  },
  {
    "text": "with it the second is Apple's own video",
    "start": "334319",
    "end": "337400"
  },
  {
    "text": "decoder called Apple avd which was",
    "start": "337400",
    "end": "339440"
  },
  {
    "text": "introduced in a12 s so's and M1 Max and",
    "start": "339440",
    "end": "342400"
  },
  {
    "text": "also with its own kernel driver and even",
    "start": "342400",
    "end": "344919"
  },
  {
    "text": "though they both the code h264 videos",
    "start": "344919",
    "end": "347479"
  },
  {
    "text": "after staring at both for a long time in",
    "start": "347479",
    "end": "349039"
  },
  {
    "text": "gidra we found that they don't share a",
    "start": "349039",
    "end": "350600"
  },
  {
    "text": "lot of",
    "start": "350600",
    "end": "351800"
  },
  {
    "text": "code so what can go wrong with these",
    "start": "351800",
    "end": "354639"
  },
  {
    "text": "devices we can get a kernel panic or in",
    "start": "354639",
    "end": "357560"
  },
  {
    "text": "other words a path to privilege",
    "start": "357560",
    "end": "359160"
  },
  {
    "text": "escalation on Apple",
    "start": "359160",
    "end": "361080"
  },
  {
    "text": "devices during this research we",
    "start": "361080",
    "end": "363440"
  },
  {
    "text": "identified three parsing vulnerabilities",
    "start": "363440",
    "end": "365319"
  },
  {
    "text": "in the apple d5500 video decoding",
    "start": "365319",
    "end": "367599"
  },
  {
    "text": "pipeline one of which we show to be zero",
    "start": "367599",
    "end": "370199"
  },
  {
    "text": "click and two to be triggerable via",
    "start": "370199",
    "end": "372960"
  },
  {
    "text": "thumbnailing while working on h26 Forge",
    "start": "372960",
    "end": "375720"
  },
  {
    "text": "we were also gifted with an amazing case",
    "start": "375720",
    "end": "377639"
  },
  {
    "text": "study about an in the wild vulnerability",
    "start": "377639",
    "end": "379960"
  },
  {
    "text": "exploiting Apple ABD and while the root",
    "start": "379960",
    "end": "382400"
  },
  {
    "text": "cause analysis was identified it was not",
    "start": "382400",
    "end": "384479"
  },
  {
    "text": "known how it was exploited because there",
    "start": "384479",
    "end": "386199"
  },
  {
    "text": "was no sample",
    "start": "386199",
    "end": "387560"
  },
  {
    "text": "available so in this research we",
    "start": "387560",
    "end": "389639"
  },
  {
    "text": "demonstrated an exploitation path to get",
    "start": "389639",
    "end": "391880"
  },
  {
    "text": "a heap overflow for this talk though",
    "start": "391880",
    "end": "394800"
  },
  {
    "text": "I'll just be describing cve 2022 32939 a",
    "start": "394800",
    "end": "398720"
  },
  {
    "text": "controlled kernel heat write that is",
    "start": "398720",
    "end": "400199"
  },
  {
    "text": "triggerable via thumbnailing and we",
    "start": "400199",
    "end": "402360"
  },
  {
    "text": "defer to the paper for now for details",
    "start": "402360",
    "end": "404160"
  },
  {
    "text": "on how we exploited Apple",
    "start": "404160",
    "end": "406800"
  },
  {
    "text": "avd before we dive into what exactly",
    "start": "406800",
    "end": "409199"
  },
  {
    "text": "went wrong and how to exploit this",
    "start": "409199",
    "end": "410720"
  },
  {
    "text": "vulnerability let me tell you a bit",
    "start": "410720",
    "end": "412319"
  },
  {
    "text": "about the h264 codc",
    "start": "412319",
    "end": "414319"
  },
  {
    "text": "itself h264 or the advanced video Codec",
    "start": "414319",
    "end": "418080"
  },
  {
    "text": "was standardized in 2003 by the itu and",
    "start": "418080",
    "end": "420879"
  },
  {
    "text": "the moving and the moving picture",
    "start": "420879",
    "end": "422520"
  },
  {
    "text": "experts group or EG because of this it",
    "start": "422520",
    "end": "425879"
  },
  {
    "text": "has two names h264 and ABC but we just",
    "start": "425879",
    "end": "428840"
  },
  {
    "text": "stick to h264 in this talk and the spec",
    "start": "428840",
    "end": "431759"
  },
  {
    "text": "itself is over 800 Pages how to",
    "start": "431759",
    "end": "434440"
  },
  {
    "text": "describing how to decode video or go",
    "start": "434440",
    "end": "436520"
  },
  {
    "text": "from a compressed bitstream to the",
    "start": "436520",
    "end": "438039"
  },
  {
    "text": "frames that we see and we chose to study",
    "start": "438039",
    "end": "440879"
  },
  {
    "text": "h264 because it's supported on",
    "start": "440879",
    "end": "442840"
  },
  {
    "text": "practically all modern",
    "start": "442840",
    "end": "445319"
  },
  {
    "text": "devices so now I'll discuss how the",
    "start": "445319",
    "end": "447319"
  },
  {
    "text": "bitstream representation of the h264",
    "start": "447319",
    "end": "449319"
  },
  {
    "text": "code codic works this is background info",
    "start": "449319",
    "end": "451680"
  },
  {
    "text": "for understanding the vulnerabilities",
    "start": "451680",
    "end": "453160"
  },
  {
    "text": "that we discovered and analyzed if you",
    "start": "453160",
    "end": "455000"
  },
  {
    "text": "get lost don't worry I'll be doing a",
    "start": "455000",
    "end": "456759"
  },
  {
    "text": "review when we get to the",
    "start": "456759",
    "end": "457560"
  },
  {
    "text": "vulnerabilities part so as I mentioned",
    "start": "457560",
    "end": "460240"
  },
  {
    "text": "before videos arrive in a container",
    "start": "460240",
    "end": "462319"
  },
  {
    "text": "format such as MP4 to extract the",
    "start": "462319",
    "end": "465039"
  },
  {
    "text": "encoded video we can run an FFM command",
    "start": "465039",
    "end": "467560"
  },
  {
    "text": "like this and once we have the encoded",
    "start": "467560",
    "end": "469840"
  },
  {
    "text": "video now we can begin to identify some",
    "start": "469840",
    "end": "473159"
  },
  {
    "text": "patterns first let's uh we see the",
    "start": "473159",
    "end": "476159"
  },
  {
    "text": "sequence of zeros followed by a one",
    "start": "476159",
    "end": "478520"
  },
  {
    "text": "these are called start Cod codes and",
    "start": "478520",
    "end": "480080"
  },
  {
    "text": "what they do is identify the beginning",
    "start": "480080",
    "end": "481879"
  },
  {
    "text": "of an h264 sequence these sequences are",
    "start": "481879",
    "end": "485440"
  },
  {
    "text": "called Network abstraction layer units",
    "start": "485440",
    "end": "487639"
  },
  {
    "text": "or",
    "start": "487639",
    "end": "488319"
  },
  {
    "text": "nowu so now let me rearrange this bit",
    "start": "488319",
    "end": "490680"
  },
  {
    "text": "string to begin by start code and here",
    "start": "490680",
    "end": "493960"
  },
  {
    "text": "the first bite of each now is its",
    "start": "493960",
    "end": "497199"
  },
  {
    "text": "header and the last five bits of the",
    "start": "497199",
    "end": "500080"
  },
  {
    "text": "header specify the now",
    "start": "500080",
    "end": "502479"
  },
  {
    "text": "type so now I'll get rid of the start",
    "start": "502479",
    "end": "504479"
  },
  {
    "text": "codes and we're just looking at the",
    "start": "504479",
    "end": "505759"
  },
  {
    "text": "types and the only thing that um the key",
    "start": "505759",
    "end": "509240"
  },
  {
    "text": "thing to to remember here is that uh",
    "start": "509240",
    "end": "512360"
  },
  {
    "text": "type seven and eight these are called",
    "start": "512360",
    "end": "514080"
  },
  {
    "text": "parameter sets and they're used to set",
    "start": "514080",
    "end": "516039"
  },
  {
    "text": "up the decoder and five and one are",
    "start": "516039",
    "end": "518839"
  },
  {
    "text": "slices which are the actual compressed",
    "start": "518839",
    "end": "520680"
  },
  {
    "text": "video",
    "start": "520680",
    "end": "522120"
  },
  {
    "text": "frames looking at the rest of the nowu",
    "start": "522120",
    "end": "524920"
  },
  {
    "text": "these contain what are called syntax",
    "start": "524920",
    "end": "527839"
  },
  {
    "text": "elements so the syntax elements are the",
    "start": "527839",
    "end": "530480"
  },
  {
    "text": "language of h264 and what are what",
    "start": "530480",
    "end": "532920"
  },
  {
    "text": "actually get parsed out of the",
    "start": "532920",
    "end": "534560"
  },
  {
    "text": "bitstream this is a screenshot of the",
    "start": "534560",
    "end": "536760"
  },
  {
    "text": "h264 spec showing how the bitstream",
    "start": "536760",
    "end": "539079"
  },
  {
    "text": "should be par for picture parameter sets",
    "start": "539079",
    "end": "541800"
  },
  {
    "text": "the pseudo code is read from top to",
    "start": "541800",
    "end": "543480"
  },
  {
    "text": "bottom and it also details the bitstream",
    "start": "543480",
    "end": "545839"
  },
  {
    "text": "representation for each value and each",
    "start": "545839",
    "end": "548160"
  },
  {
    "text": "bed bolded item is a syntax",
    "start": "548160",
    "end": "550880"
  },
  {
    "text": "element now each syntax element has what",
    "start": "550880",
    "end": "553720"
  },
  {
    "text": "it's called a semantics associated with",
    "start": "553720",
    "end": "556000"
  },
  {
    "text": "it the semantics specify how the syntax",
    "start": "556000",
    "end": "559160"
  },
  {
    "text": "element is to be used by the decoder and",
    "start": "559160",
    "end": "561360"
  },
  {
    "text": "also the expected range that the syntax",
    "start": "561360",
    "end": "563560"
  },
  {
    "text": "element should take on in this case we",
    "start": "563560",
    "end": "566079"
  },
  {
    "text": "see that num slice groups minus one has",
    "start": "566079",
    "end": "568279"
  },
  {
    "text": "its expected range pointing to another",
    "start": "568279",
    "end": "570200"
  },
  {
    "text": "part of the 800 page",
    "start": "570200",
    "end": "572640"
  },
  {
    "text": "spec so now not only is the value that",
    "start": "572640",
    "end": "575399"
  },
  {
    "text": "each syntax element is used to uh used",
    "start": "575399",
    "end": "577839"
  },
  {
    "text": "to recover frames but it's also used to",
    "start": "577839",
    "end": "580320"
  },
  {
    "text": "continue decoding the bitstream here we",
    "start": "580320",
    "end": "582800"
  },
  {
    "text": "see that a nonzero num slice groups",
    "start": "582800",
    "end": "584800"
  },
  {
    "text": "minus one leads to a different parsing",
    "start": "584800",
    "end": "586800"
  },
  {
    "text": "condition of the",
    "start": "586800",
    "end": "588440"
  },
  {
    "text": "bitstream so in order to properly and",
    "start": "588440",
    "end": "591040"
  },
  {
    "text": "robustly decode a video a decoder must",
    "start": "591040",
    "end": "593720"
  },
  {
    "text": "Implement both syntax and semantic",
    "start": "593720",
    "end": "596839"
  },
  {
    "text": "checking this means that the decoder",
    "start": "596839",
    "end": "598880"
  },
  {
    "text": "needs to update the syntax element",
    "start": "598880",
    "end": "600800"
  },
  {
    "text": "pseudo code with a check for the maximum",
    "start": "600800",
    "end": "603440"
  },
  {
    "text": "possible value that it could take",
    "start": "603440",
    "end": "605279"
  },
  {
    "text": "on so how can we check if decoders",
    "start": "605279",
    "end": "607720"
  },
  {
    "text": "implement semantic checks or not what we",
    "start": "607720",
    "end": "610279"
  },
  {
    "text": "could do is try to modify the bitstream",
    "start": "610279",
    "end": "612160"
  },
  {
    "text": "directly and see what happens I'll show",
    "start": "612160",
    "end": "613920"
  },
  {
    "text": "you an",
    "start": "613920",
    "end": "615640"
  },
  {
    "text": "example to show you the fragility of the",
    "start": "615640",
    "end": "617800"
  },
  {
    "text": "bitstream representation the this is the",
    "start": "617800",
    "end": "620120"
  },
  {
    "text": "opening sequence from last year's black",
    "start": "620120",
    "end": "621920"
  },
  {
    "text": "cat talks found on YouTube and here is a",
    "start": "621920",
    "end": "624360"
  },
  {
    "text": "portion of its bitstream and we take",
    "start": "624360",
    "end": "626480"
  },
  {
    "text": "this 33 and just increment it to 34 just",
    "start": "626480",
    "end": "629640"
  },
  {
    "text": "flip a couple bits and whenever we play",
    "start": "629640",
    "end": "631839"
  },
  {
    "text": "the video we see that we get this",
    "start": "631839",
    "end": "634480"
  },
  {
    "text": "completely different output this like",
    "start": "634480",
    "end": "636880"
  },
  {
    "text": "red or you can still see the shape there",
    "start": "636880",
    "end": "639800"
  },
  {
    "text": "but the it's flipping a couple bits",
    "start": "639800",
    "end": "642760"
  },
  {
    "text": "leads to this unpredictable output and",
    "start": "642760",
    "end": "645600"
  },
  {
    "text": "if we increment it to",
    "start": "645600",
    "end": "647399"
  },
  {
    "text": "35 now we see this like green blue uh",
    "start": "647399",
    "end": "651079"
  },
  {
    "text": "color scheme so from a security",
    "start": "651079",
    "end": "654560"
  },
  {
    "text": "perspective if we want to test out the",
    "start": "654560",
    "end": "656720"
  },
  {
    "text": "syntax element values we'd like it to be",
    "start": "656720",
    "end": "659560"
  },
  {
    "text": "syntactically correct meaning that the",
    "start": "659560",
    "end": "661519"
  },
  {
    "text": "bitstream is correctly read but",
    "start": "661519",
    "end": "663600"
  },
  {
    "text": "semantically non-compliant meaning the",
    "start": "663600",
    "end": "665800"
  },
  {
    "text": "syntax elements are out of",
    "start": "665800",
    "end": "667560"
  },
  {
    "text": "bounds also want to point out here that",
    "start": "667560",
    "end": "669720"
  },
  {
    "text": "for the rest of this talk every time you",
    "start": "669720",
    "end": "671240"
  },
  {
    "text": "see a box with a pink dashed line that",
    "start": "671240",
    "end": "673440"
  },
  {
    "text": "is a screenshot from the spec referring",
    "start": "673440",
    "end": "675160"
  },
  {
    "text": "to syntax elements and blue dotted",
    "start": "675160",
    "end": "677320"
  },
  {
    "text": "refers to the",
    "start": "677320",
    "end": "679320"
  },
  {
    "text": "semantics so we're not actually the",
    "start": "679320",
    "end": "681639"
  },
  {
    "text": "first to have identified issues in h264",
    "start": "681639",
    "end": "684519"
  },
  {
    "text": "decoders Don enfeld in this Frack",
    "start": "684519",
    "end": "686760"
  },
  {
    "text": "article describes a vulnerability in",
    "start": "686760",
    "end": "688399"
  },
  {
    "text": "h264 decoding of the apple",
    "start": "688399",
    "end": "691200"
  },
  {
    "text": "d5500 and black hat 2019 gong presented",
    "start": "691200",
    "end": "694560"
  },
  {
    "text": "on issues found in qualcomm's Hardware",
    "start": "694560",
    "end": "696279"
  },
  {
    "text": "video decoder last fall Terra conov and",
    "start": "696279",
    "end": "699360"
  },
  {
    "text": "labunets presented a deep dive on",
    "start": "699360",
    "end": "701120"
  },
  {
    "text": "hexacon at hexagon on Apple ABD and",
    "start": "701120",
    "end": "704200"
  },
  {
    "text": "Natalie sanovich of Google Project zero",
    "start": "704200",
    "end": "706399"
  },
  {
    "text": "has found many issues in apple",
    "start": "706399",
    "end": "708600"
  },
  {
    "text": "avd a particular interest is cve 2022",
    "start": "708600",
    "end": "712880"
  },
  {
    "text": "22675 an apple in the wild OD day that",
    "start": "712880",
    "end": "715399"
  },
  {
    "text": "was analyzed by little Lio and binary",
    "start": "715399",
    "end": "717519"
  },
  {
    "text": "boy as well as Natalie sanovich",
    "start": "717519",
    "end": "719959"
  },
  {
    "text": " so this cve is an in the wild",
    "start": "719959",
    "end": "723920"
  },
  {
    "text": "Apple kernel OD and while the threat",
    "start": "723920",
    "end": "727079"
  },
  {
    "text": "actor actor information was not shared",
    "start": "727079",
    "end": "729760"
  },
  {
    "text": "it is believed to be part of an exploit",
    "start": "729760",
    "end": "731399"
  },
  {
    "text": "chain on Mac OS with an Intel graphics",
    "start": "731399",
    "end": "733720"
  },
  {
    "text": "driver information leak and because it",
    "start": "733720",
    "end": "736279"
  },
  {
    "text": "impacts Apple AV it also impacts",
    "start": "736279",
    "end": "740000"
  },
  {
    "text": "iOS the root cause analysis performed by",
    "start": "740000",
    "end": "742760"
  },
  {
    "text": "Natalie sanovich found that the CBP",
    "start": "742760",
    "end": "745360"
  },
  {
    "text": "count minus one syntax element was",
    "start": "745360",
    "end": "747399"
  },
  {
    "text": "missing a bounce check",
    "start": "747399",
    "end": "749720"
  },
  {
    "text": "this syntax element is used as a loop",
    "start": "749720",
    "end": "751680"
  },
  {
    "text": "bound to write values into a fixed siiz",
    "start": "751680",
    "end": "754360"
  },
  {
    "text": "array which lives on the Kernel Heap and",
    "start": "754360",
    "end": "757160"
  },
  {
    "text": "according to the spec the CBP count",
    "start": "757160",
    "end": "759360"
  },
  {
    "text": "minus one should be in the range of 0 to",
    "start": "759360",
    "end": "761680"
  },
  {
    "text": "31 so the size of each array in apple",
    "start": "761680",
    "end": "763959"
  },
  {
    "text": "ABD was",
    "start": "763959",
    "end": "765480"
  },
  {
    "text": "32 so because we know that the cve was",
    "start": "765480",
    "end": "768199"
  },
  {
    "text": "exploited in the wild there must be some",
    "start": "768199",
    "end": "770720"
  },
  {
    "text": "way for this to this Heap overflow to",
    "start": "770720",
    "end": "773680"
  },
  {
    "text": "lead to a",
    "start": "773680",
    "end": "775000"
  },
  {
    "text": "crash so our expectation is that we just",
    "start": "775000",
    "end": "777760"
  },
  {
    "text": "set CBB count minus one to its maximum",
    "start": "777760",
    "end": "780040"
  },
  {
    "text": "possible value and get a crash the real",
    "start": "780040",
    "end": "783399"
  },
  {
    "text": "reality is that this was quite painful",
    "start": "783399",
    "end": "785680"
  },
  {
    "text": "as little Lilo and Natalie sanovich",
    "start": "785680",
    "end": "787480"
  },
  {
    "text": "discussing this thread this is because",
    "start": "787480",
    "end": "790160"
  },
  {
    "text": "there are no good tools available here",
    "start": "790160",
    "end": "792440"
  },
  {
    "text": "Natalie sanovich describes that she had",
    "start": "792440",
    "end": "794880"
  },
  {
    "text": "to forg the file bit by bit and that it",
    "start": "794880",
    "end": "797480"
  },
  {
    "text": "was",
    "start": "797480",
    "end": "798880"
  },
  {
    "text": "terrible there are two key challenges",
    "start": "798880",
    "end": "801079"
  },
  {
    "text": "faced when trying to modify syntax",
    "start": "801079",
    "end": "802760"
  },
  {
    "text": "Elements by hand the first is the",
    "start": "802760",
    "end": "805199"
  },
  {
    "text": "variable bit length",
    "start": "805199",
    "end": "806880"
  },
  {
    "text": "representation so let's look at setting",
    "start": "806880",
    "end": "808880"
  },
  {
    "text": "that single CBB count minus one value",
    "start": "808880",
    "end": "811760"
  },
  {
    "text": "here are some possible out of bound",
    "start": "811760",
    "end": "813240"
  },
  {
    "text": "outof bound values that it could take on",
    "start": "813240",
    "end": "815360"
  },
  {
    "text": "alongside its binary representation and",
    "start": "815360",
    "end": "817800"
  },
  {
    "text": "we can see that the because the encoding",
    "start": "817800",
    "end": "820120"
  },
  {
    "text": "is always an odd number of bits it's not",
    "start": "820120",
    "end": "822279"
  },
  {
    "text": "enough to just pop this in a hex editor",
    "start": "822279",
    "end": "824320"
  },
  {
    "text": "easily and begin inserting some",
    "start": "824320",
    "end": "826320"
  },
  {
    "text": "bits furthermore incrementing the values",
    "start": "826320",
    "end": "829480"
  },
  {
    "text": "means that we need to adjust the bit",
    "start": "829480",
    "end": "830920"
  },
  {
    "text": "stream for dependent syntax",
    "start": "830920",
    "end": "833240"
  },
  {
    "text": "elements so we observe that doing this",
    "start": "833240",
    "end": "835839"
  },
  {
    "text": "by hand at scale is infeasible and argue",
    "start": "835839",
    "end": "838639"
  },
  {
    "text": "that a of tooling is holding back",
    "start": "838639",
    "end": "840440"
  },
  {
    "text": "Security",
    "start": "840440",
    "end": "842199"
  },
  {
    "text": "Professionals before showcasing how we",
    "start": "842199",
    "end": "844360"
  },
  {
    "text": "overcome these challenges let me just",
    "start": "844360",
    "end": "846040"
  },
  {
    "text": "summarize what we've",
    "start": "846040",
    "end": "847279"
  },
  {
    "text": "seen first is that video decoding",
    "start": "847279",
    "end": "849959"
  },
  {
    "text": "including thumbnailing is done in kernel",
    "start": "849959",
    "end": "852000"
  },
  {
    "text": "drivers and dedicated Hardware second is",
    "start": "852000",
    "end": "855279"
  },
  {
    "text": "that h264 bitstreams are divided into",
    "start": "855279",
    "end": "857560"
  },
  {
    "text": "Network abstraction layer units or now",
    "start": "857560",
    "end": "859639"
  },
  {
    "text": "use third is that syntax elements have",
    "start": "859639",
    "end": "862519"
  },
  {
    "text": "Associated semantics but those semantics",
    "start": "862519",
    "end": "864800"
  },
  {
    "text": "are not always",
    "start": "864800",
    "end": "866240"
  },
  {
    "text": "enforced and finally we showed that Mo",
    "start": "866240",
    "end": "868720"
  },
  {
    "text": "mod flying syntax elements is currently",
    "start": "868720",
    "end": "870720"
  },
  {
    "text": "a challenging",
    "start": "870720",
    "end": "872399"
  },
  {
    "text": "process so now I'll introduce h26 Forge",
    "start": "872399",
    "end": "875839"
  },
  {
    "text": "a toolkit to help researchers creat",
    "start": "875839",
    "end": "878000"
  },
  {
    "text": "specially crafted h264",
    "start": "878000",
    "end": "880320"
  },
  {
    "text": "videos with h264 we can programmatically",
    "start": "880320",
    "end": "883720"
  },
  {
    "text": "edit h264 syntax elements with Python",
    "start": "883720",
    "end": "886199"
  },
  {
    "text": "scripts so previously creating the CBB",
    "start": "886199",
    "end": "889120"
  },
  {
    "text": "count minus one video was a pain now",
    "start": "889120",
    "end": "891399"
  },
  {
    "text": "it's just a few lines of",
    "start": "891399",
    "end": "893040"
  },
  {
    "text": "python here we set it to its maximum",
    "start": "893040",
    "end": "895519"
  },
  {
    "text": "possible value and update the dependent",
    "start": "895519",
    "end": "897720"
  },
  {
    "text": "syntax element arrays",
    "start": "897720",
    "end": "900399"
  },
  {
    "text": "looking at h26 Forge overall it is a",
    "start": "900399",
    "end": "902720"
  },
  {
    "text": "toolkit to manipulate h264 syntax",
    "start": "902720",
    "end": "905199"
  },
  {
    "text": "elements it's written in over 30,000",
    "start": "905199",
    "end": "907639"
  },
  {
    "text": "lines of rust and took 3 years to",
    "start": "907639",
    "end": "911560"
  },
  {
    "text": "develop and so what it does is abstract",
    "start": "911560",
    "end": "914480"
  },
  {
    "text": "out the bitstream representation so that",
    "start": "914480",
    "end": "916839"
  },
  {
    "text": "you don't have to worry about individual",
    "start": "916839",
    "end": "918480"
  },
  {
    "text": "bits that are set it will parse the",
    "start": "918480",
    "end": "920720"
  },
  {
    "text": "encoded bitstream and maintain the",
    "start": "920720",
    "end": "922600"
  },
  {
    "text": "syntax elements in",
    "start": "922600",
    "end": "924079"
  },
  {
    "text": "memory at which point we can",
    "start": "924079",
    "end": "926519"
  },
  {
    "text": "programmatically modify them with Python",
    "start": "926519",
    "end": "928560"
  },
  {
    "text": "scripts",
    "start": "928560",
    "end": "929720"
  },
  {
    "text": "called video transforms as shown",
    "start": "929720",
    "end": "932079"
  },
  {
    "text": "previously and in fact we can ignore an",
    "start": "932079",
    "end": "934680"
  },
  {
    "text": "input and instead Generate random inputs",
    "start": "934680",
    "end": "937319"
  },
  {
    "text": "with syntax elements sampled from a",
    "start": "937319",
    "end": "939240"
  },
  {
    "text": "provided",
    "start": "939240",
    "end": "940399"
  },
  {
    "text": "range h26 Forge can then output the",
    "start": "940399",
    "end": "943399"
  },
  {
    "text": "encoded bitstream directly or as part of",
    "start": "943399",
    "end": "945639"
  },
  {
    "text": "an mp4",
    "start": "945639",
    "end": "947319"
  },
  {
    "text": "container so looking at the CBP count",
    "start": "947319",
    "end": "949880"
  },
  {
    "text": "minus one and its dependent syntax",
    "start": "949880",
    "end": "951680"
  },
  {
    "text": "elements we can just pass in the range",
    "start": "951680",
    "end": "953800"
  },
  {
    "text": "for it that we want in order to generate",
    "start": "953800",
    "end": "955440"
  },
  {
    "text": "videos that are out of bounds and then",
    "start": "955440",
    "end": "957680"
  },
  {
    "text": "we can also",
    "start": "957680",
    "end": "959680"
  },
  {
    "text": "uh create videos with fun looking frames",
    "start": "959680",
    "end": "961920"
  },
  {
    "text": "such as this",
    "start": "961920",
    "end": "963680"
  },
  {
    "text": "one using h26 for's video generation",
    "start": "963680",
    "end": "966800"
  },
  {
    "text": "capabilities we were able to find",
    "start": "966800",
    "end": "968639"
  },
  {
    "text": "vulnerabilities in video players kernel",
    "start": "968639",
    "end": "970600"
  },
  {
    "text": "extensions and Hardware here we see a",
    "start": "970600",
    "end": "973519"
  },
  {
    "text": "Firefox outof bounds read vulnerability",
    "start": "973519",
    "end": "975680"
  },
  {
    "text": "that is visible from the recovered",
    "start": "975680",
    "end": "977040"
  },
  {
    "text": "frames and a hardware information leak",
    "start": "977040",
    "end": "979319"
  },
  {
    "text": "that we discovered while the details for",
    "start": "979319",
    "end": "981839"
  },
  {
    "text": "each of these are in the paper I only",
    "start": "981839",
    "end": "983800"
  },
  {
    "text": "have enough time to tell you about",
    "start": "983800",
    "end": "986160"
  },
  {
    "text": "one let's now dive into cve 20 22 32939",
    "start": "986160",
    "end": "990720"
  },
  {
    "text": "an iOS kernel heater vulnerability",
    "start": "990720",
    "end": "993279"
  },
  {
    "text": "discovered with h26 for's video",
    "start": "993279",
    "end": "995880"
  },
  {
    "text": "generation we Ed three key Tools in this",
    "start": "995880",
    "end": "998279"
  },
  {
    "text": "analysis first kedro was used for static",
    "start": "998279",
    "end": "1001000"
  },
  {
    "text": "analysis of the kernel video decoder",
    "start": "1001000",
    "end": "1003319"
  },
  {
    "text": "corellium was used for kernel debugging",
    "start": "1003319",
    "end": "1005199"
  },
  {
    "text": "and testing on different iOS versions",
    "start": "1005199",
    "end": "1007759"
  },
  {
    "text": "and finally of course proof of concept",
    "start": "1007759",
    "end": "1009600"
  },
  {
    "text": "videos were generated with h26",
    "start": "1009600",
    "end": "1012399"
  },
  {
    "text": "Forge so this vulnerability is one of",
    "start": "1012399",
    "end": "1014600"
  },
  {
    "text": "the three we found in the Apple d5500",
    "start": "1014600",
    "end": "1016959"
  },
  {
    "text": "gex",
    "start": "1016959",
    "end": "1019560"
  },
  {
    "text": "and what this vulnerability is is a heap",
    "start": "1019560",
    "end": "1021839"
  },
  {
    "text": "overflow from a missing bounce check",
    "start": "1021839",
    "end": "1023839"
  },
  {
    "text": "from emulation prevention bite handling",
    "start": "1023839",
    "end": "1025918"
  },
  {
    "text": "which I will explain in just a bit it",
    "start": "1025919",
    "end": "1028520"
  },
  {
    "text": "was found with h26 for's video",
    "start": "1028520",
    "end": "1030319"
  },
  {
    "text": "generation capabilities and what we did",
    "start": "1030319",
    "end": "1032880"
  },
  {
    "text": "is just generate batches of 100 videos",
    "start": "1032880",
    "end": "1035199"
  },
  {
    "text": "transfer them onto the device and just",
    "start": "1035199",
    "end": "1037120"
  },
  {
    "text": "saw what happened and we found that",
    "start": "1037120",
    "end": "1038918"
  },
  {
    "text": "device crashed and",
    "start": "1038919",
    "end": "1041079"
  },
  {
    "text": "rebooted this Heap overflow allows for",
    "start": "1041079",
    "end": "1043760"
  },
  {
    "text": "an iOS kernel controlled heat right",
    "start": "1043760",
    "end": "1045720"
  },
  {
    "text": "vulnerability though to properly exploit",
    "start": "1045720",
    "end": "1048000"
  },
  {
    "text": "it we need to it with an information",
    "start": "1048000",
    "end": "1050120"
  },
  {
    "text": "leak and this issue is triggerable from",
    "start": "1050120",
    "end": "1052679"
  },
  {
    "text": "video thumbnailing which is a zero click",
    "start": "1052679",
    "end": "1054720"
  },
  {
    "text": "attack surface and it was patched in",
    "start": "1054720",
    "end": "1056760"
  },
  {
    "text": "these iOS and iPad OS",
    "start": "1056760",
    "end": "1059640"
  },
  {
    "text": "versions so going back to emulation",
    "start": "1059640",
    "end": "1062320"
  },
  {
    "text": "prevention",
    "start": "1062320",
    "end": "1063320"
  },
  {
    "text": "bites recall that the h264 bitstream is",
    "start": "1063320",
    "end": "1066480"
  },
  {
    "text": "split into nus with star code and so an",
    "start": "1066480",
    "end": "1069960"
  },
  {
    "text": "issue is what if this sequence shows up",
    "start": "1069960",
    "end": "1072240"
  },
  {
    "text": "inside of a",
    "start": "1072240",
    "end": "1073640"
  },
  {
    "text": "nowu the solution is to use emulation",
    "start": "1073640",
    "end": "1076360"
  },
  {
    "text": "prevention bytes and what this is is",
    "start": "1076360",
    "end": "1078880"
  },
  {
    "text": "just inserting an escape character into",
    "start": "1078880",
    "end": "1080600"
  },
  {
    "text": "the Stream So now the sequence of zeros",
    "start": "1080600",
    "end": "1083640"
  },
  {
    "text": "uh before followed by a one become it",
    "start": "1083640",
    "end": "1087280"
  },
  {
    "text": "now gets escaped with a three right",
    "start": "1087280",
    "end": "1089640"
  },
  {
    "text": "there and you do this for a certain set",
    "start": "1089640",
    "end": "1092159"
  },
  {
    "text": "of patterns found in the",
    "start": "1092159",
    "end": "1093960"
  },
  {
    "text": "bitstream later on once the nowu are",
    "start": "1093960",
    "end": "1096799"
  },
  {
    "text": "organized by start code the epbs are",
    "start": "1096799",
    "end": "1099280"
  },
  {
    "text": "removed and you can parse the video",
    "start": "1099280",
    "end": "1101679"
  },
  {
    "text": "correctly so now let's look to see how",
    "start": "1101679",
    "end": "1104320"
  },
  {
    "text": "the Apple d5500 CeX handles epbs here we",
    "start": "1104320",
    "end": "1108120"
  },
  {
    "text": "have a now that has many epbs that must",
    "start": "1108120",
    "end": "1110039"
  },
  {
    "text": "be removed in order to parse the",
    "start": "1110039",
    "end": "1111559"
  },
  {
    "text": "bitstream",
    "start": "1111559",
    "end": "1112880"
  },
  {
    "text": "correctly for some reason that we're not",
    "start": "1112880",
    "end": "1115000"
  },
  {
    "text": "entirely sure",
    "start": "1115000",
    "end": "1116159"
  },
  {
    "text": "of uh the bitstream parser Heap object",
    "start": "1116159",
    "end": "1119200"
  },
  {
    "text": "keeps track of the bit offset it sees",
    "start": "1119200",
    "end": "1121240"
  },
  {
    "text": "each EVP in a un array of 256 elements",
    "start": "1121240",
    "end": "1125159"
  },
  {
    "text": "and maintains the count of epbs that it",
    "start": "1125159",
    "end": "1127080"
  },
  {
    "text": "has seen immediately after at",
    "start": "1127080",
    "end": "1129840"
  },
  {
    "text": "memories so as the decoder is scanning",
    "start": "1129840",
    "end": "1132960"
  },
  {
    "text": "the incoming stream four bytes at a time",
    "start": "1132960",
    "end": "1136200"
  },
  {
    "text": "once it finds an EPB it jots down the",
    "start": "1136200",
    "end": "1139159"
  },
  {
    "text": "bit offset it found it at and increments",
    "start": "1139159",
    "end": "1141600"
  },
  {
    "text": "the count one thing that I want to point",
    "start": "1141600",
    "end": "1144000"
  },
  {
    "text": "out here is that the epb's variable this",
    "start": "1144000",
    "end": "1147039"
  },
  {
    "text": "this count also serves as an index to",
    "start": "1147039",
    "end": "1149159"
  },
  {
    "text": "the array which will become important in",
    "start": "1149159",
    "end": "1150799"
  },
  {
    "text": "a",
    "start": "1150799",
    "end": "1152520"
  },
  {
    "text": "bit so it removes it from the bitstream",
    "start": "1152520",
    "end": "1156159"
  },
  {
    "text": "and it uh increments the count so now",
    "start": "1156159",
    "end": "1159400"
  },
  {
    "text": "let's look to see what happens at the",
    "start": "1159400",
    "end": "1160840"
  },
  {
    "text": "256th",
    "start": "1160840",
    "end": "1163799"
  },
  {
    "text": "EPV it's bit position B will be stored",
    "start": "1164320",
    "end": "1168120"
  },
  {
    "text": "and the count SL pointer will be",
    "start": "1168120",
    "end": "1170760"
  },
  {
    "text": "incremented and it'll be removed but",
    "start": "1170760",
    "end": "1173559"
  },
  {
    "text": "there's no balance check going on so now",
    "start": "1173559",
    "end": "1176240"
  },
  {
    "text": "the count is pointing to",
    "start": "1176240",
    "end": "1178440"
  },
  {
    "text": "itself so what will happen at the 257",
    "start": "1178440",
    "end": "1182799"
  },
  {
    "text": "EPV its bit Position will be calculated",
    "start": "1182799",
    "end": "1186000"
  },
  {
    "text": "and it will overwrite our count with a",
    "start": "1186000",
    "end": "1187679"
  },
  {
    "text": "bit",
    "start": "1187679",
    "end": "1188559"
  },
  {
    "text": "offset so now our index is pointing",
    "start": "1188559",
    "end": "1190799"
  },
  {
    "text": "somewhere off into",
    "start": "1190799",
    "end": "1192280"
  },
  {
    "text": "memory the EPB is removed and all would",
    "start": "1192280",
    "end": "1195000"
  },
  {
    "text": "be okay if we stop now but we're not",
    "start": "1195000",
    "end": "1197440"
  },
  {
    "text": "done now we have the 258th EPB at",
    "start": "1197440",
    "end": "1200880"
  },
  {
    "text": "position q and its position bit position",
    "start": "1200880",
    "end": "1203600"
  },
  {
    "text": "is calculated using the overwritten",
    "start": "1203600",
    "end": "1205440"
  },
  {
    "text": "value and it's stored at the overwritten",
    "start": "1205440",
    "end": "1207760"
  },
  {
    "text": "index index at this point it's game",
    "start": "1207760",
    "end": "1211000"
  },
  {
    "text": "over boom we have a",
    "start": "1211000",
    "end": "1214559"
  },
  {
    "text": "panic so for generating a POC video the",
    "start": "1214559",
    "end": "1217840"
  },
  {
    "text": "Apple d5500 kex needs a valid long nowu",
    "start": "1217840",
    "end": "1221440"
  },
  {
    "text": "with at least 258 epvs because if it",
    "start": "1221440",
    "end": "1224360"
  },
  {
    "text": "detects any decoding errors then it will",
    "start": "1224360",
    "end": "1226280"
  },
  {
    "text": "stop early and not fill up the EPV",
    "start": "1226280",
    "end": "1228240"
  },
  {
    "text": "buffer",
    "start": "1228240",
    "end": "1229960"
  },
  {
    "text": "in order to generate this video we found",
    "start": "1229960",
    "end": "1231840"
  },
  {
    "text": "a Target in the parameter set parsing",
    "start": "1231840",
    "end": "1234080"
  },
  {
    "text": "that can generate large s 32-bit values",
    "start": "1234080",
    "end": "1236760"
  },
  {
    "text": "such that their encoding would generate",
    "start": "1236760",
    "end": "1238120"
  },
  {
    "text": "tons of emulation prevention",
    "start": "1238120",
    "end": "1240000"
  },
  {
    "text": "bytes here's the video transform use",
    "start": "1240000",
    "end": "1242640"
  },
  {
    "text": "that will set each uh offset for ref",
    "start": "1242640",
    "end": "1245240"
  },
  {
    "text": "frame to a large negative value and",
    "start": "1245240",
    "end": "1247480"
  },
  {
    "text": "generate 514 epbs so let me show you now",
    "start": "1247480",
    "end": "1251039"
  },
  {
    "text": "how to generate this",
    "start": "1251039",
    "end": "1253280"
  },
  {
    "text": "video here again is the transform that I",
    "start": "1253280",
    "end": "1255679"
  },
  {
    "text": "just showed you that will trigger our",
    "start": "1255679",
    "end": "1257440"
  },
  {
    "text": "vulnerability it's it sets the offset",
    "start": "1257440",
    "end": "1259559"
  },
  {
    "text": "for reframe and generates 514",
    "start": "1259559",
    "end": "1262600"
  },
  {
    "text": "epbs and looking at our input we see",
    "start": "1262600",
    "end": "1266240"
  },
  {
    "text": "that it's pretty small and there are no",
    "start": "1266240",
    "end": "1268280"
  },
  {
    "text": "epbs we run h26 Forge and it to generate",
    "start": "1268280",
    "end": "1273279"
  },
  {
    "text": "the video and we can see that it",
    "start": "1273279",
    "end": "1274799"
  },
  {
    "text": "provides us the value that we'll get",
    "start": "1274799",
    "end": "1276120"
  },
  {
    "text": "ridden at a particular",
    "start": "1276120",
    "end": "1277960"
  },
  {
    "text": "index and now looking at our our output",
    "start": "1277960",
    "end": "1281200"
  },
  {
    "text": "we see there are a bunch of epbs",
    "start": "1281200",
    "end": "1284919"
  },
  {
    "text": "everywhere so here I'm showing you a",
    "start": "1286520",
    "end": "1288880"
  },
  {
    "text": "physical iPhone SE with iOS",
    "start": "1288880",
    "end": "1293000"
  },
  {
    "text": "13.3 now I'm opening the files app which",
    "start": "1293960",
    "end": "1296840"
  },
  {
    "text": "will generate a thumbnail for any videos",
    "start": "1296840",
    "end": "1298799"
  },
  {
    "text": "in the",
    "start": "1298799",
    "end": "1299799"
  },
  {
    "text": "folder and now I will transfer the video",
    "start": "1299799",
    "end": "1302440"
  },
  {
    "text": "that we just generated with iTunes once",
    "start": "1302440",
    "end": "1304840"
  },
  {
    "text": "it arrives we see that iTunes got",
    "start": "1304840",
    "end": "1306799"
  },
  {
    "text": "disconnected from the phone which just",
    "start": "1306799",
    "end": "1308240"
  },
  {
    "text": "went all black and we now see the Apple",
    "start": "1308240",
    "end": "1311080"
  },
  {
    "text": "start logo indicating a phone reboot due",
    "start": "1311080",
    "end": "1313200"
  },
  {
    "text": "to a",
    "start": "1313200",
    "end": "1315480"
  },
  {
    "text": "panic so let's summarize now what we've",
    "start": "1316720",
    "end": "1319080"
  },
  {
    "text": "seen with the",
    "start": "1319080",
    "end": "1320600"
  },
  {
    "text": "cve the root cause was a missing balance",
    "start": "1320600",
    "end": "1323679"
  },
  {
    "text": "check for writing into the EPB array",
    "start": "1323679",
    "end": "1326200"
  },
  {
    "text": "this was fixed by just adding a balance",
    "start": "1326200",
    "end": "1327760"
  },
  {
    "text": "check for the",
    "start": "1327760",
    "end": "1328880"
  },
  {
    "text": "count the location of the 257th EPB lets",
    "start": "1328880",
    "end": "1332640"
  },
  {
    "text": "us control where we write and the",
    "start": "1332640",
    "end": "1335080"
  },
  {
    "text": "location of the 258 EPB lets us control",
    "start": "1335080",
    "end": "1338480"
  },
  {
    "text": "what we write though to bitstream",
    "start": "1338480",
    "end": "1340960"
  },
  {
    "text": "restrictions we're limited to small",
    "start": "1340960",
    "end": "1342960"
  },
  {
    "text": "32bit values but if we don't get a crash",
    "start": "1342960",
    "end": "1346480"
  },
  {
    "text": "then each subsequent EPB after the 58",
    "start": "1346480",
    "end": "1349559"
  },
  {
    "text": "will allow for a continuous",
    "start": "1349559",
    "end": "1351720"
  },
  {
    "text": "override in order to exploit this",
    "start": "1351720",
    "end": "1353720"
  },
  {
    "text": "vulnerability for say a privilege",
    "start": "1353720",
    "end": "1355360"
  },
  {
    "text": "escalation you need a validly encoded",
    "start": "1355360",
    "end": "1358039"
  },
  {
    "text": "bitstream uh at least 258 epbs and an",
    "start": "1358039",
    "end": "1361480"
  },
  {
    "text": "information leak vulnerability to know",
    "start": "1361480",
    "end": "1363520"
  },
  {
    "text": "what to Target and note that I didn't",
    "start": "1363520",
    "end": "1365480"
  },
  {
    "text": "describe here how one would get an info",
    "start": "1365480",
    "end": "1367559"
  },
  {
    "text": "leak though once you have a Target you",
    "start": "1367559",
    "end": "1370240"
  },
  {
    "text": "can use h264 to tailor the location of",
    "start": "1370240",
    "end": "1373279"
  },
  {
    "text": "EB's 257 and",
    "start": "1373279",
    "end": "1376640"
  },
  {
    "text": "258 so now to",
    "start": "1376720",
    "end": "1379600"
  },
  {
    "text": "conclude I showed you that the decoder",
    "start": "1379600",
    "end": "1382320"
  },
  {
    "text": "uh complexity is significant and that",
    "start": "1382320",
    "end": "1384240"
  },
  {
    "text": "video decoding attack surface is",
    "start": "1384240",
    "end": "1386080"
  },
  {
    "text": "difficult to",
    "start": "1386080",
    "end": "1386960"
  },
  {
    "text": "explore in looking at the codc threat",
    "start": "1386960",
    "end": "1389240"
  },
  {
    "text": "landscape there are some risks and",
    "start": "1389240",
    "end": "1391200"
  },
  {
    "text": "concerns the first that as noted with",
    "start": "1391200",
    "end": "1394480"
  },
  {
    "text": "the in the wild Apple AV bug there are",
    "start": "1394480",
    "end": "1397240"
  },
  {
    "text": "actors out there abusing this attack",
    "start": "1397240",
    "end": "1398919"
  },
  {
    "text": "Vector that may have tools like h26",
    "start": "1398919",
    "end": "1401159"
  },
  {
    "text": "Forge",
    "start": "1401159",
    "end": "1402279"
  },
  {
    "text": "already second is that defenses are",
    "start": "1402279",
    "end": "1404520"
  },
  {
    "text": "sparse at the codic level while there",
    "start": "1404520",
    "end": "1406679"
  },
  {
    "text": "has been much work done to protect video",
    "start": "1406679",
    "end": "1408600"
  },
  {
    "text": "container parsing after the 2015 Android",
    "start": "1408600",
    "end": "1411039"
  },
  {
    "text": "stage fright vulnerabilities much of the",
    "start": "1411039",
    "end": "1413000"
  },
  {
    "text": "codec parsing happens out at lower",
    "start": "1413000",
    "end": "1414919"
  },
  {
    "text": "levels which are still vulnerable as an",
    "start": "1414919",
    "end": "1417600"
  },
  {
    "text": "individual you can try to disable",
    "start": "1417600",
    "end": "1419520"
  },
  {
    "text": "automatic video thumbnailing or autop",
    "start": "1419520",
    "end": "1421279"
  },
  {
    "text": "playing on the web as well as disabling",
    "start": "1421279",
    "end": "1423320"
  },
  {
    "text": "videos that come from individuals you do",
    "start": "1423320",
    "end": "1425039"
  },
  {
    "text": "not know but not all is forsaken there",
    "start": "1425039",
    "end": "1428440"
  },
  {
    "text": "are some positive directions as well the",
    "start": "1428440",
    "end": "1431080"
  },
  {
    "text": "first is the stateless video decoder",
    "start": "1431080",
    "end": "1432880"
  },
  {
    "text": "initiative by the video for Linux folks",
    "start": "1432880",
    "end": "1435200"
  },
  {
    "text": "which aims to remove syntax element",
    "start": "1435200",
    "end": "1436960"
  },
  {
    "text": "parsing from the Linux kernel",
    "start": "1436960",
    "end": "1439760"
  },
  {
    "text": "and second is that we're getting per",
    "start": "1439760",
    "end": "1441279"
  },
  {
    "text": "more performant software decoding",
    "start": "1441279",
    "end": "1443120"
  },
  {
    "text": "meaning that vulnerabilities can be",
    "start": "1443120",
    "end": "1444640"
  },
  {
    "text": "isolated with sandboxing techn",
    "start": "1444640",
    "end": "1446559"
  },
  {
    "text": "Technologies like RL",
    "start": "1446559",
    "end": "1449679"
  },
  {
    "text": "box I also shared how we found some",
    "start": "1449679",
    "end": "1452159"
  },
  {
    "text": "serious iOS kernel vulnerabilities and",
    "start": "1452159",
    "end": "1454200"
  },
  {
    "text": "described the one that provided a a",
    "start": "1454200",
    "end": "1455960"
  },
  {
    "text": "controlled Colonel hebr capability I",
    "start": "1455960",
    "end": "1459400"
  },
  {
    "text": "only presented a parser bug that caused",
    "start": "1459400",
    "end": "1461080"
  },
  {
    "text": "a memory corruption but we found some",
    "start": "1461080",
    "end": "1462880"
  },
  {
    "text": "other issues as well such as device",
    "start": "1462880",
    "end": "1465120"
  },
  {
    "text": "denial of service from undefined States",
    "start": "1465120",
    "end": "1467799"
  },
  {
    "text": "or information leakage vulnerabilities",
    "start": "1467799",
    "end": "1469840"
  },
  {
    "text": "such as from a browser Graphics",
    "start": "1469840",
    "end": "1471440"
  },
  {
    "text": "processing library and some of these",
    "start": "1471440",
    "end": "1473600"
  },
  {
    "text": "issues were zero",
    "start": "1473600",
    "end": "1475840"
  },
  {
    "text": "clickable to solve and finally to solve",
    "start": "1475840",
    "end": "1478399"
  },
  {
    "text": "these challenges I introduced h26 Forge",
    "start": "1478399",
    "end": "1480960"
  },
  {
    "text": "so the key takeaway is that special",
    "start": "1480960",
    "end": "1482799"
  },
  {
    "text": "tools like h26 Forge can help make sense",
    "start": "1482799",
    "end": "1485320"
  },
  {
    "text": "of the complexity of encoded video and",
    "start": "1485320",
    "end": "1487399"
  },
  {
    "text": "to discover vulnerabilities in this",
    "start": "1487399",
    "end": "1489039"
  },
  {
    "text": "underexplored attack",
    "start": "1489039",
    "end": "1490880"
  },
  {
    "text": "surface going forward we' like to see",
    "start": "1490880",
    "end": "1493600"
  },
  {
    "text": "more codecs evaluated in a similar",
    "start": "1493600",
    "end": "1495720"
  },
  {
    "text": "fashion we started with h264 of its",
    "start": "1495720",
    "end": "1498760"
  },
  {
    "text": "ubiquity but there are many other codecs",
    "start": "1498760",
    "end": "1501159"
  },
  {
    "text": "with dedicated Hardware that could",
    "start": "1501159",
    "end": "1502600"
  },
  {
    "text": "suffer from similar",
    "start": "1502600",
    "end": "1504159"
  },
  {
    "text": "issues while we have focused on user",
    "start": "1504159",
    "end": "1506440"
  },
  {
    "text": "devices there is server infrastructure",
    "start": "1506440",
    "end": "1508600"
  },
  {
    "text": "that does operations like video",
    "start": "1508600",
    "end": "1510039"
  },
  {
    "text": "transcoding that may also suffer from",
    "start": "1510039",
    "end": "1512000"
  },
  {
    "text": "these types of issues and building off",
    "start": "1512000",
    "end": "1514600"
  },
  {
    "text": "this work we can all h26 Forge A New",
    "start": "1514600",
    "end": "1517159"
  },
  {
    "text": "Path forward to secure video",
    "start": "1517159",
    "end": "1519880"
  },
  {
    "text": "infrastructure some potential directions",
    "start": "1519880",
    "end": "1522559"
  },
  {
    "text": "include pushing for user available",
    "start": "1522559",
    "end": "1524919"
  },
  {
    "text": "system on chip bombs akin to the s bomb",
    "start": "1524919",
    "end": "1527120"
  },
  {
    "text": "effort so that users can identify the",
    "start": "1527120",
    "end": "1529360"
  },
  {
    "text": "potential Hardware",
    "start": "1529360",
    "end": "1530760"
  },
  {
    "text": "risks integrating tools like h26 Forge",
    "start": "1530760",
    "end": "1534039"
  },
  {
    "text": "into their into your own secure software",
    "start": "1534039",
    "end": "1536039"
  },
  {
    "text": "development cycle to test projects that",
    "start": "1536039",
    "end": "1538039"
  },
  {
    "text": "work with codex early on and building",
    "start": "1538039",
    "end": "1540919"
  },
  {
    "text": "more memory safe video decoders",
    "start": "1540919",
    "end": "1542840"
  },
  {
    "text": "potentially at to h264 just 30,000 lines",
    "start": "1542840",
    "end": "1545840"
  },
  {
    "text": "of",
    "start": "1545840",
    "end": "1546760"
  },
  {
    "text": "rust so to finish up the attack surface",
    "start": "1546760",
    "end": "1549799"
  },
  {
    "text": "of video decoders is underexplored by",
    "start": "1549799",
    "end": "1551679"
  },
  {
    "text": "security researchers tools like h26",
    "start": "1551679",
    "end": "1554080"
  },
  {
    "text": "Forge help unlock this space hack the",
    "start": "1554080",
    "end": "1556320"
  },
  {
    "text": "planet our code and paper are available",
    "start": "1556320",
    "end": "1558760"
  },
  {
    "text": "and and and I will now take any",
    "start": "1558760",
    "end": "1560640"
  },
  {
    "text": "questions here or in the WAP room thank",
    "start": "1560640",
    "end": "1563500"
  },
  {
    "text": "[Applause]",
    "start": "1563500",
    "end": "1573809"
  },
  {
    "text": "you hey um thank you for the great talk",
    "start": "1577000",
    "end": "1580080"
  },
  {
    "text": "I was just curious so uh you were",
    "start": "1580080",
    "end": "1582640"
  },
  {
    "text": "talking about some vulnerabilities that",
    "start": "1582640",
    "end": "1584520"
  },
  {
    "text": "you have discovered or yeah",
    "start": "1584520",
    "end": "1586320"
  },
  {
    "text": "vulnerabilities that you have or bugs",
    "start": "1586320",
    "end": "1587760"
  },
  {
    "text": "that you have covered in the I believe",
    "start": "1587760",
    "end": "1589799"
  },
  {
    "text": "the difference between the codec",
    "start": "1589799",
    "end": "1591320"
  },
  {
    "text": "specification and the codec",
    "start": "1591320",
    "end": "1593240"
  },
  {
    "text": "implementation but uh is it also",
    "start": "1593240",
    "end": "1595640"
  },
  {
    "text": "possible that the codec itself could",
    "start": "1595640",
    "end": "1597480"
  },
  {
    "text": "have a bug or a vulnerability I mean you",
    "start": "1597480",
    "end": "1599919"
  },
  {
    "text": "said that it the it's 800 pages long",
    "start": "1599919",
    "end": "1603200"
  },
  {
    "text": "right the manual so it's possible that",
    "start": "1603200",
    "end": "1606159"
  },
  {
    "text": "there could be something has there been",
    "start": "1606159",
    "end": "1607760"
  },
  {
    "text": "any uh any previous vulnerability found",
    "start": "1607760",
    "end": "1610919"
  },
  {
    "text": "in the H 264 itself that's a good",
    "start": "1610919",
    "end": "1615080"
  },
  {
    "text": "question uh we didn't have a chance to",
    "start": "1615080",
    "end": "1617559"
  },
  {
    "text": "look at all 800 pages so it's there's",
    "start": "1617559",
    "end": "1619600"
  },
  {
    "text": "it's possible that the spec may have",
    "start": "1619600",
    "end": "1621559"
  },
  {
    "text": "some inconsistencies and potential",
    "start": "1621559",
    "end": "1623840"
  },
  {
    "text": "issues embedded in itself thank",
    "start": "1623840",
    "end": "1628600"
  },
  {
    "text": "you all right cool thanks everyone",
    "start": "1632320",
    "end": "1636240"
  },
  {
    "text": "[Applause]",
    "start": "1636240",
    "end": "1641619"
  }
]