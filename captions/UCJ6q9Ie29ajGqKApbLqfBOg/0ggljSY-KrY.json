[
  {
    "text": "uh welcome to black hat uh you are currently in the upper layers track we're here to hear about the Google",
    "start": "240",
    "end": "6640"
  },
  {
    "text": "native client from Chris Ral thank you thank",
    "start": "6640",
    "end": "14799"
  },
  {
    "text": "you okay um so obviously the title of my talk is Google native client uh analysis",
    "start": "15600",
    "end": "22240"
  },
  {
    "text": "of a secure browser plugin sandbox and if you can't tell I tried to fit as many possible buzzwords into that title as I",
    "start": "22240",
    "end": "28800"
  },
  {
    "text": "could um just a little bit about me uh my name is Chris Ralph I'm the founder",
    "start": "28800",
    "end": "34079"
  },
  {
    "text": "of leaf security research I'm a black hat Review Board member and past speaker I spoke here in 2009 and then again last",
    "start": "34079",
    "end": "41719"
  },
  {
    "text": "year um always love speaking here as a really good crowd really good attendees um you can find me on Twitter my Twitter",
    "start": "41719",
    "end": "48079"
  },
  {
    "text": "handle is just uh Chris Rolf um my email address is chris. Rolf gmail.com and my",
    "start": "48079",
    "end": "53680"
  },
  {
    "text": "website feel free to contact me after the talk if you have questions or you just want to say hi um before founding",
    "start": "53680",
    "end": "60359"
  },
  {
    "text": "Leaf Sr I worked for Modis Security in New York um before that I did some other Enterprise security stuff and before",
    "start": "60359",
    "end": "66439"
  },
  {
    "text": "that I I worked for DOD for a little bit um so just some background on on",
    "start": "66439",
    "end": "71520"
  },
  {
    "text": "me um a few words on why I decided to look at Google native client um it's",
    "start": "71520",
    "end": "77040"
  },
  {
    "text": "pretty obvious that browsers are the the new platform for applications uh this has been true for a long time um mostly",
    "start": "77040",
    "end": "83560"
  },
  {
    "text": "because of portability right no matter what operating system you run you have a browser um they all use the same standard protocols HTT",
    "start": "83560",
    "end": "90600"
  },
  {
    "text": "um so really it's it's a standardization thing so a lot of new applications are being pushed whether in web app form or",
    "start": "90600",
    "end": "96040"
  },
  {
    "text": "plugins or whatever um this is definitely definitely true and will be true going forward um secondly sandboxes",
    "start": "96040",
    "end": "103479"
  },
  {
    "text": "are definitely the future of uh of application security um I'm pretty certain that uh within 5 years time um",
    "start": "103479",
    "end": "111399"
  },
  {
    "text": "every new major thick client that's released uh whether it be browser or otherwise one of the first security",
    "start": "111399",
    "end": "116799"
  },
  {
    "text": "questions that we're going to be asking is what does its sandbox model look like um what does the broker process look",
    "start": "116799",
    "end": "121840"
  },
  {
    "text": "like you know how does it handle um how does it handle Privileges and uh and handling uh tasks from unprivileged",
    "start": "121840",
    "end": "129000"
  },
  {
    "text": "processes so sandboxes were something I was really really interested in and Google native client um brings some new",
    "start": "129000",
    "end": "136040"
  },
  {
    "text": "things to the table in terms of sandbox technology um and I'm going to obviously talk about all of that today um and of",
    "start": "136040",
    "end": "143440"
  },
  {
    "text": "course last breaking easy targets is really boring right like we can all just uh throw long strings of A's with some",
    "start": "143440",
    "end": "149920"
  },
  {
    "text": "fuzzer at some Target that no one's actually looked at before but that's just boring because you know it's going to fall over uh with Native client I was",
    "start": "149920",
    "end": "157080"
  },
  {
    "text": "really a challenge for me um because it's written by very very smart people and it was designed to be secure from",
    "start": "157080",
    "end": "162879"
  },
  {
    "text": "the ground up right it actually is a security technology it's a Sandbox and right now sandboxes are you know as",
    "start": "162879",
    "end": "168800"
  },
  {
    "text": "tough as it gets as far as um countermeasures and defenses so uh from the very beginning of Google native",
    "start": "168800",
    "end": "174480"
  },
  {
    "text": "client it intrigued me to you know try and find vulnerabilities to you know break out of the inner sandbox or um you",
    "start": "174480",
    "end": "179599"
  },
  {
    "text": "know find ways that uh they didn't anticipate um sandboxing untrusted",
    "start": "179599",
    "end": "185319"
  },
  {
    "text": "code um so for those of you who aren't actually familiar with Google native client I'll kind of give you a quick",
    "start": "185319",
    "end": "190519"
  },
  {
    "text": "rundown uh I'm sure everyone here in this room has run a browser plugin at some point um usually it's an NP API",
    "start": "190519",
    "end": "198640"
  },
  {
    "text": "Plugin or it's an ActiveX plug-in in Internet Explorer um and the problem with those two technologies is that uh",
    "start": "198640",
    "end": "205840"
  },
  {
    "text": "they put Security in the hands of users right you get a up that says do you want",
    "start": "205840",
    "end": "211200"
  },
  {
    "text": "to run this this browser plugin and you're basically asking a user to decide",
    "start": "211200",
    "end": "216400"
  },
  {
    "text": "whether a plugin is malicious or not right and that's just ridiculous uh and we've all sort of suffered the consequences of that uh since its",
    "start": "216400",
    "end": "222680"
  },
  {
    "text": "Inception uh Google native client takes a different approach and it says all plugins are malicious we're going to",
    "start": "222680",
    "end": "228159"
  },
  {
    "text": "treat every single one of them as malicious they're all going to live in a sandbox regardless of where they come from uh and we're going to vet each one",
    "start": "228159",
    "end": "233480"
  },
  {
    "text": "of them before we load them um so you know it takes a much different approach",
    "start": "233480",
    "end": "239280"
  },
  {
    "text": "than and P API or ActiveX uh in the case of those two technologies your browser plugins have complete access to whatever",
    "start": "239280",
    "end": "246319"
  },
  {
    "text": "your browser has access to uh there was this misconception a while ago that npapi was more secure than ActiveX uh",
    "start": "246319",
    "end": "252400"
  },
  {
    "text": "it's it's kind of a joke um there's actually some more things you can do with ActiveX to lock it down then NP API",
    "start": "252400",
    "end": "257680"
  },
  {
    "text": "but at the end of the day if you allow the plugin to run it has complete access to your machine and your system uh and that's ridiculous you know like why",
    "start": "257680",
    "end": "263960"
  },
  {
    "text": "should um just some game you pull off the internet have access to your entire hard drive right it shouldn't be that",
    "start": "263960",
    "end": "269759"
  },
  {
    "text": "way uh that that plugin should be sandboxed and that's what Native client tries to do um a lot of security people",
    "start": "269759",
    "end": "276199"
  },
  {
    "text": "don't even know that uh Native client is Now in Chrome by default since version 14 uh but there are some restrictions",
    "start": "276199",
    "end": "282039"
  },
  {
    "text": "there you can only load native client modules that were downloaded from the Chrome web store you can't just download",
    "start": "282039",
    "end": "287080"
  },
  {
    "text": "them from anywhere uh and while that's the case today that's not always going to be the",
    "start": "287080",
    "end": "292199"
  },
  {
    "text": "case um the architecture behind native client is really really complex and large and I'm going to talk about each",
    "start": "292199",
    "end": "297240"
  },
  {
    "text": "one of these individual components today um but just a quick runtime rundown there's a modified compiler tool chain",
    "start": "297240",
    "end": "303360"
  },
  {
    "text": "to produce them you can't just use GCC you can't just use lvms clang to produce nexi modules uh and nexi modules are",
    "start": "303360",
    "end": "310160"
  },
  {
    "text": "untrusted native client plugins um so you need to use the plugin you need to",
    "start": "310160",
    "end": "315720"
  },
  {
    "text": "use the compiler that comes with the SDK uh there's a secure elf loader for actually loading the nexe modules into",
    "start": "315720",
    "end": "321199"
  },
  {
    "text": "into memory um it doesn't use the the regular loader that's found in in your operating system kernel there's a",
    "start": "321199",
    "end": "327479"
  },
  {
    "text": "disassembler and code validator if anyone here is written disassembler for any architecture you know how difficult that is uh there's a service runtime",
    "start": "327479",
    "end": "333720"
  },
  {
    "text": "that sort of facilitates uh the native client module at runtime and handling requests that it makes um there's the",
    "start": "333720",
    "end": "339400"
  },
  {
    "text": "inner and outer sandbox and this is two really important ones that I want to talk about um when I say outer sandbox I",
    "start": "339400",
    "end": "345160"
  },
  {
    "text": "mean the sandbox provided by Chrome um and even though the outer sandbox plays",
    "start": "345160",
    "end": "350479"
  },
  {
    "text": "a pretty vital role in keeping native client modules nexy modules um contained",
    "start": "350479",
    "end": "355840"
  },
  {
    "text": "uh it's sort of out of scope for this talk um so anytime I say outer sand box just assume that you know just know that",
    "start": "355840",
    "end": "361280"
  },
  {
    "text": "I'm talking about the sandbox that's provided by Chrome uh today when I say inner sandbox I'm talking about the",
    "start": "361280",
    "end": "367560"
  },
  {
    "text": "second sandbox that's actually provided by native client um then there's srpc and IMC which are two different",
    "start": "367560",
    "end": "373720"
  },
  {
    "text": "protocols uh that native client uses to you know move data back and forth between the untrusted modules and the",
    "start": "373720",
    "end": "379520"
  },
  {
    "text": "Chrome browser uh and then there's ppapi which is also known as pepper uh which",
    "start": "379520",
    "end": "384560"
  },
  {
    "text": "is the actual plugin implementation found in the Chrome browser uh and again I'm going to talk about each one of these comp components but just to give",
    "start": "384560",
    "end": "390319"
  },
  {
    "text": "you a snapshot of how large and complex the native client architecture is um and I'm going to try and try and go through",
    "start": "390319",
    "end": "396800"
  },
  {
    "text": "these in a logical fashion but um I kind of have to jump around just just by the very nature of the the",
    "start": "396800",
    "end": "402560"
  },
  {
    "text": "software um I have this diagram and I'm going to have this architecture diagram and I'm going to bring it up before each",
    "start": "402560",
    "end": "408599"
  },
  {
    "text": "section right because I don't expect anyone to remember what this looks like uh because it is pretty it's pretty large um but up here in the top right",
    "start": "408599",
    "end": "415520"
  },
  {
    "text": "you have the sandbox renderer process right this is where webkit lives this is where the V8 JavaScript engine lives",
    "start": "415520",
    "end": "420840"
  },
  {
    "text": "this is where the pepper implementation lives um and then down the bottom left you have the sandbox secure loader",
    "start": "420840",
    "end": "427039"
  },
  {
    "text": "service runtime that's where uh the untrusted nexi modules live uh and then in the top left you have the Chrome",
    "start": "427039",
    "end": "432360"
  },
  {
    "text": "broker process which is like the um sort of more privileged process that handles privileged requests from unprivileged uh",
    "start": "432360",
    "end": "439759"
  },
  {
    "text": "components so again I'm going to keep bringing this up and every time I bring it up uh the section I'm going to be talking about is going to be highlighted",
    "start": "439759",
    "end": "445960"
  },
  {
    "text": "in Red so to make it a little less confusing um another very important point is levels of trust right uh it",
    "start": "445960",
    "end": "452919"
  },
  {
    "text": "really depends on what context we're talking about um when we're talking from the outer sandbox and we're inside the",
    "start": "452919",
    "end": "458479"
  },
  {
    "text": "outer sandbox the Chrome broker is the only trusted component uh the Chrome renderer process is not a trusted",
    "start": "458479",
    "end": "465360"
  },
  {
    "text": "component it's untrusted the knal service runtime is considered untrusted uh the nexi modules are certainly",
    "start": "465360",
    "end": "471039"
  },
  {
    "text": "considered untrusted because they come from arbitrary sources or will in the future uh when we're talking in the",
    "start": "471039",
    "end": "476360"
  },
  {
    "text": "context of the inner sandbox the Chrome broker of course is still trusted but now the Chrome renderer process is also",
    "start": "476360",
    "end": "482080"
  },
  {
    "text": "considered trusted the nackle service runtime is now considered trusted and the untrusted nexi models are of course",
    "start": "482080",
    "end": "487759"
  },
  {
    "text": "still untrusted so um just to kind of put this into context make it a little bit more sense if you're able to go from",
    "start": "487759",
    "end": "494720"
  },
  {
    "text": "an untrusted nexi module into the Chrome renderer process you've actually um",
    "start": "494720",
    "end": "500240"
  },
  {
    "text": "completed a privilege escalation because you've left the inner sandbox and now you're in the outer sandbox so that's why we consider uh the Chrome renderer",
    "start": "500240",
    "end": "506919"
  },
  {
    "text": "process trusted uh when we're talking the context of the inner sandbox uh I know that gets a little confusing but",
    "start": "506919",
    "end": "512919"
  },
  {
    "text": "just remember obviously the inner sandbox is within the outer sandbox um okay so I'm just going to",
    "start": "512919",
    "end": "518640"
  },
  {
    "text": "jump right into the the architecture uh the pepper API which also is PP API",
    "start": "518640",
    "end": "523680"
  },
  {
    "text": "those two terms are interchangeable uh and that lives up here in the top right uh Chrome uh renderer process which of",
    "start": "523680",
    "end": "529959"
  },
  {
    "text": "course lives in the outer sandbox and it lives alongside webkit which handles HTML parsing it lives alongside the V8",
    "start": "529959",
    "end": "536160"
  },
  {
    "text": "JavaScript engine um so pepper replaces npapi um",
    "start": "536160",
    "end": "541440"
  },
  {
    "text": "npapi still exists in Chrome but npapi is you know was designed for browsers that were written 10 years ago",
    "start": "541440",
    "end": "547839"
  },
  {
    "text": "essentially I don't know about any of you but my browser looks nothing like it did 10 years ago it's entirely different",
    "start": "547839",
    "end": "553480"
  },
  {
    "text": "so npapi is kind of aging and I think um you know Google took the initiative to come up with this new standard called",
    "start": "553480",
    "end": "558920"
  },
  {
    "text": "pepper um so there's new apis for things like audio and 3D and input devices and",
    "start": "558920",
    "end": "564079"
  },
  {
    "text": "there's privilege interfaces for things like file.io and in a properly uh sandboxed web browser",
    "start": "564079",
    "end": "569839"
  },
  {
    "text": "um a privileged interface like file.io wouldn't be handled by the browser itself right it'd be passed off to a",
    "start": "569839",
    "end": "576160"
  },
  {
    "text": "privilege component like the Chrome broker uh broker process to go and then open that file and then send things over",
    "start": "576160",
    "end": "581519"
  },
  {
    "text": "some um some channel uh another one of the major differences between pepper and npapi is",
    "start": "581519",
    "end": "588360"
  },
  {
    "text": "that pepper is no longer scriptable via JavaScript the way npapi was if anyone here is familiar with NP API or if you",
    "start": "588360",
    "end": "594720"
  },
  {
    "text": "ever um written a Plugin or scripted it there was this thing called NP runtime and you could buy JavaScript calls to",
    "start": "594720",
    "end": "601320"
  },
  {
    "text": "npapi C++ calls and essentially just call them from any website um that's gone now so there's no more NP runtime",
    "start": "601320",
    "end": "608399"
  },
  {
    "text": "in ppapi they're not scriptable the same way uh and that makes kind of a that's kind of a big difference between the two",
    "start": "608399",
    "end": "613839"
  },
  {
    "text": "um kind of reduces a lot of the attack surface that existed on npapi plugins um another thing that's a big",
    "start": "613839",
    "end": "620760"
  },
  {
    "text": "difference between pepper and npapi is that outof process plugins are Now supported by default um this was",
    "start": "620760",
    "end": "626880"
  },
  {
    "text": "something that npapi kind of strapped on a few years later because um you know you had browsers and they had plugins",
    "start": "626880",
    "end": "632720"
  },
  {
    "text": "like flash for example uh and when flash would crash the browser would go down with it and I think browser makers you",
    "start": "632720",
    "end": "638440"
  },
  {
    "text": "know were like well that's not really we can't do anything about it it's not our code uh so we'll just kind of bolt on this outof process npapi thing and now",
    "start": "638440",
    "end": "645360"
  },
  {
    "text": "the plugins when they crash they're out of process so it doesn't matter um so now pepper supports that um just by",
    "start": "645360",
    "end": "651079"
  },
  {
    "text": "default by the standard um so when we talk pepper",
    "start": "651079",
    "end": "657279"
  },
  {
    "text": "plugins there's trusted pepper plugins and there's untrusted pepper plugins trusted pepper plugins live inside this",
    "start": "657279",
    "end": "664519"
  },
  {
    "text": "uh the Chrome renderer process or they live inside another Chrome process that's equally as sandboxed um two good",
    "start": "664519",
    "end": "670480"
  },
  {
    "text": "examples of this is the native client plugin itself is a pepper plugin that lives within the Chrome renderer process",
    "start": "670480",
    "end": "676959"
  },
  {
    "text": "and a good example of an outof process pepper plugin is the Adobe uh pepper flash uh which was just released I think",
    "start": "676959",
    "end": "683560"
  },
  {
    "text": "just a few weeks ago uh and that sort of just talks to Chrome over Chrome's IPC layer um but lives out of",
    "start": "683560",
    "end": "689920"
  },
  {
    "text": "process but within the outer sandbox of course untrusted pepper plugins are",
    "start": "689920",
    "end": "696880"
  },
  {
    "text": "native client modules or known as uh nexi modules and they communicate with the Chrome renderer process and the",
    "start": "696880",
    "end": "702959"
  },
  {
    "text": "pepper implementation using a proxy and I'm going to talk about that proxy a little bit uh because that's one of the",
    "start": "702959",
    "end": "709240"
  },
  {
    "text": "really uh important points when we talk about Native client attack surface um so",
    "start": "709240",
    "end": "714600"
  },
  {
    "text": "this brings us to the actual native client plugin itself right I'm trying to uh stack these uh compon components um",
    "start": "714600",
    "end": "720000"
  },
  {
    "text": "architecturally you know but logically um so you know we have the pepper implementation and the native client",
    "start": "720000",
    "end": "725200"
  },
  {
    "text": "plugin is a pepper plugin so sort of Builds on top of of of the pepper implementation itself uh and the native",
    "start": "725200",
    "end": "731320"
  },
  {
    "text": "client plugin lives up here in the right hand side with the sandboxed renderer process again alongside webkit and V8 uh",
    "start": "731320",
    "end": "738160"
  },
  {
    "text": "and the pepper implementation itself so it's in process um it's just a regular dll",
    "start": "738160",
    "end": "743959"
  },
  {
    "text": "there's nothing special about it right it just gets loaded in like any other dll uh and works like any other pepper plugin wood almost like any other npapi",
    "start": "743959",
    "end": "751279"
  },
  {
    "text": "plug-in wood right it's just a regular dll that's compiled and sucked in by the the Chrome browser um and you can invoke",
    "start": "751279",
    "end": "757360"
  },
  {
    "text": "it via this HTML tag so we have this uh HTML embed tag and we have regular parameters here stuff we're all used to",
    "start": "757360",
    "end": "763800"
  },
  {
    "text": "like name uh ID with uh and then we have Source uh and if you look at source",
    "start": "763800",
    "end": "769600"
  },
  {
    "text": "equals here you'll see Hello world. nmf uh nmf stands for nackle manifest file",
    "start": "769600",
    "end": "776279"
  },
  {
    "text": "uh and what the knle Manifest file is is basically describing to the Chrome browser um what components are required",
    "start": "776279",
    "end": "782639"
  },
  {
    "text": "for this native client module to run and where they can be found uh and it's just basically a few lines of Json you can",
    "start": "782639",
    "end": "787959"
  },
  {
    "text": "see here I kind of condensed it for the slide um but you see files is like this",
    "start": "787959",
    "end": "793320"
  },
  {
    "text": "one of the object names to begin with and then you see libgcc S.S so1 that's one of the shared objects that this nexi",
    "start": "793320",
    "end": "800240"
  },
  {
    "text": "module needs to run uh and then there's the architecture it was compiled for x86 32bit and then there's the URL that you",
    "start": "800240",
    "end": "807279"
  },
  {
    "text": "can find that shared object at uh and again you just go down the list there's main. nexi and then some other",
    "start": "807279",
    "end": "812680"
  },
  {
    "text": "shared objects that it needs to run uh and this plug uh the native client plugin parses this Json with a third",
    "start": "812680",
    "end": "818399"
  },
  {
    "text": "party Library called Json CPP within the Chrome renderer process uh it's actually",
    "start": "818399",
    "end": "823440"
  },
  {
    "text": "really simple um there's not much to this uh you can't really describe too much of the Native client module other than what you need to run so it's one of",
    "start": "823440",
    "end": "829680"
  },
  {
    "text": "the uh smaller parts of the trusted code base um so what's going to happen now is",
    "start": "829680",
    "end": "835040"
  },
  {
    "text": "the native client plugin is going to look at those URLs and it's going to see where that nexi module can be downloaded",
    "start": "835040",
    "end": "840480"
  },
  {
    "text": "from uh and it's going to use the pepper interfaces to go and download it and it's going to use URL loader uh and the",
    "start": "840480",
    "end": "846000"
  },
  {
    "text": "file iio interfaces what it's going to do is say hey Pepper uh here's this plugin I need you to go uh download it",
    "start": "846000",
    "end": "851560"
  },
  {
    "text": "for me and either put it on the dis or put it in this memory buffer and give me a handle to the memory buffer and I'll",
    "start": "851560",
    "end": "857079"
  },
  {
    "text": "go and do whatever I want with",
    "start": "857079",
    "end": "860240"
  },
  {
    "text": "it so uh the native client plugin obviously has to expose itself to the Dom a little bit in order to be",
    "start": "862959",
    "end": "869199"
  },
  {
    "text": "instantiated and controlled from JavaScript and you know sort of alert the user to what's going on but obviously I just mentioned a few minutes",
    "start": "869199",
    "end": "875000"
  },
  {
    "text": "ago that it's not really scriptable anymore the way npapi plugins are so uh this surface has been like greatly",
    "start": "875000",
    "end": "881000"
  },
  {
    "text": "greatly reduced uh you basically just have a few um properties with basic Getters and Setters um there's three",
    "start": "881000",
    "end": "887639"
  },
  {
    "text": "here ready State last error and exit status it's basically just for informing the user via JavaScript whether a native",
    "start": "887639",
    "end": "893720"
  },
  {
    "text": "client module loaded or crashed or you know what status it is um at that time",
    "start": "893720",
    "end": "899480"
  },
  {
    "text": "and then you have this function called post message uh post message is sort of the most important part of how um PPI",
    "start": "899480",
    "end": "907320"
  },
  {
    "text": "plugins communicate um with uh with JavaScript post message basically just",
    "start": "907320",
    "end": "913320"
  },
  {
    "text": "takes uh an opaque blob of data and sends it down um so for a nexi module to be able",
    "start": "913320",
    "end": "919959"
  },
  {
    "text": "to talk to uh to JavaScript it needs to implement a few interfaces uh one of",
    "start": "919959",
    "end": "925199"
  },
  {
    "text": "those interfaces is PP instance handle message and it needs that to be receive messages from JavaScript and then of",
    "start": "925199",
    "end": "930880"
  },
  {
    "text": "course it wants to send messages to JavaScript it has to implement this thing this interface ppb messaging post",
    "start": "930880",
    "end": "936120"
  },
  {
    "text": "message um and in JavaScript the way this works is you basically just set an event handler on your your post message",
    "start": "936120",
    "end": "942480"
  },
  {
    "text": "handle uh and anytime data gets received on that interface it's just going to call one of your JavaScript uh functions",
    "start": "942480",
    "end": "949040"
  },
  {
    "text": "that you you supplied it when you set up that event call back and you're going to have some data and again the cool thing",
    "start": "949040",
    "end": "954440"
  },
  {
    "text": "about post message is that there's no format to that data um if you can make it binary you can make it asky it can",
    "start": "954440",
    "end": "960639"
  },
  {
    "text": "look like whatever you want it's up to the application developer to sort of Define what those structures look like",
    "start": "960639",
    "end": "965880"
  },
  {
    "text": "so there's no more um saying hey my plug-in has these five methods and if you want to do these five things you",
    "start": "965880",
    "end": "971319"
  },
  {
    "text": "call these five methods um so we just sort of like change that that um we",
    "start": "971319",
    "end": "977079"
  },
  {
    "text": "change the way that looks right so now it's all goes through post message and it's up to you on the back end to sort of decide what that looks",
    "start": "977079",
    "end": "984199"
  },
  {
    "text": "like um so now let a native client module um you know OB not the native client plug-in has a native client",
    "start": "984199",
    "end": "990680"
  },
  {
    "text": "module downloaded and nexi downloaded it has to ask the brok broker process to start the service runtime uh and the",
    "start": "990680",
    "end": "997399"
  },
  {
    "text": "service runtime and I'm going to talk about this a little bit uh but this what the service runtime does is sort of uh encapsulates the untrusted nexi module",
    "start": "997399",
    "end": "1004639"
  },
  {
    "text": "and make sure that it can escape um so once the service runtime process has been started by the Chrome broker",
    "start": "1004639",
    "end": "1010680"
  },
  {
    "text": "process um they're going to the native client plugin and the Chrome broker process uh I'm sorry and the uh Chrome",
    "start": "1010680",
    "end": "1017279"
  },
  {
    "text": "service runtime process are we're going to establish an administrative srpc Channel um and basically this channel is",
    "start": "1017279",
    "end": "1022480"
  },
  {
    "text": "used to say you know this is the nexi module I want you to load uh these are the srpc channels I want you to set up",
    "start": "1022480",
    "end": "1028480"
  },
  {
    "text": "so once that's set up uh there's going to be some individual srpc channels set up between the untrusted nexi module and",
    "start": "1028480",
    "end": "1034678"
  },
  {
    "text": "the native client plugin and that's where it kind of gets interesting right because the untrusted nexi module can",
    "start": "1034679",
    "end": "1039798"
  },
  {
    "text": "talk over those interfaces oh and I should also mention",
    "start": "1039799",
    "end": "1045319"
  },
  {
    "text": "that the um the service runtime that gets started by the broker process also lives within the chrome outer",
    "start": "1045319",
    "end": "1052080"
  },
  {
    "text": "sandbox so I mentioned the the pepper proxy right that's how the Nate untrusted nexi modules actually",
    "start": "1052080",
    "end": "1058160"
  },
  {
    "text": "communicate with um with trusted components so that can actually do useful things and the pepper proxy is",
    "start": "1058160",
    "end": "1063960"
  },
  {
    "text": "actually implemented by native client up here in the top right sandbox renderer process and again it lives alongside V8",
    "start": "1063960",
    "end": "1070919"
  },
  {
    "text": "and webkit and PP API um this is sort of um one of the main things that the native client plugin um implements that",
    "start": "1070919",
    "end": "1078120"
  },
  {
    "text": "makes makes it um necessary um so if a native client module a nexi module is completely",
    "start": "1078120",
    "end": "1084880"
  },
  {
    "text": "sandboxed and it can't do anything useful then what use is it you know to a user how can they actually use it to do anything well it needs to be able to",
    "start": "1084880",
    "end": "1091440"
  },
  {
    "text": "talk to privileged interfaces and those privileged interfaces all live in the Chrome browser itself so we need to",
    "start": "1091440",
    "end": "1097760"
  },
  {
    "text": "facilitate communication between untrusted nexi modules that live in one process uh and privilege components like",
    "start": "1097760",
    "end": "1104000"
  },
  {
    "text": "PP API that live in another process um so that the pepper proxy is the bridge",
    "start": "1104000",
    "end": "1110600"
  },
  {
    "text": "that sort of implements that and it's really really important to the attack surface of native client because that's",
    "start": "1110600",
    "end": "1115640"
  },
  {
    "text": "where all the untrusted data um that you you can't vet beforehand because it came down from a website that's where all the",
    "start": "1115640",
    "end": "1121400"
  },
  {
    "text": "untrusted data is going to go over and you know be received by trusted components um so the pepper proxy has",
    "start": "1121400",
    "end": "1128320"
  },
  {
    "text": "these web IDL files and IDL stands for uh interface descriptor description language uh and those files basically",
    "start": "1128320",
    "end": "1134679"
  },
  {
    "text": "just describe the interfaces um the arguments those interfaces take the return values that you know that they",
    "start": "1134679",
    "end": "1140159"
  },
  {
    "text": "return uh and a lot of the pepper code is actually just autogenerated with Python scripts that suck in these IDL",
    "start": "1140159",
    "end": "1146200"
  },
  {
    "text": "files and just produce C++ code uh and to make things more confusing both sides",
    "start": "1146200",
    "end": "1151919"
  },
  {
    "text": "of the pepper proxy both the untrusted side and the trusted side can both act as both client and server so there's a",
    "start": "1151919",
    "end": "1158280"
  },
  {
    "text": "lot of shared code between those two components um on one side the untrusted",
    "start": "1158280",
    "end": "1163600"
  },
  {
    "text": "side it doesn't really matter so much because you're executing code in a place that you can already execute code but",
    "start": "1163600",
    "end": "1170000"
  },
  {
    "text": "obviously we're interested in um interfaces that are implemented on The Trusted side you know the area we want",
    "start": "1170000",
    "end": "1175280"
  },
  {
    "text": "to start executing code in um if you're ever brave enough to actually check out the native client source code and I",
    "start": "1175280",
    "end": "1181320"
  },
  {
    "text": "encourage you to um there's a simple rule to help you differentiate between the different interfaces because it's",
    "start": "1181320",
    "end": "1187039"
  },
  {
    "text": "all in one place because all the code is a lot of the code is shared so any interfaces that are prefixed with PPP",
    "start": "1187039",
    "end": "1193280"
  },
  {
    "text": "are on the untrusted side right PPP is that last P stands for plugin right so it's all imp implemented on the",
    "start": "1193280",
    "end": "1198679"
  },
  {
    "text": "untrusted nexi side uh all interfaces that are prefixed with ppb are implemented on The Trusted browser",
    "start": "1198679",
    "end": "1206640"
  },
  {
    "text": "side obviously B standing for browser um so the pepper proxy protocol",
    "start": "1206640",
    "end": "1213120"
  },
  {
    "text": "stack is kind of interesting um and because I'm terrible at explaining this I I made a pretty picture um so up top",
    "start": "1213120",
    "end": "1219760"
  },
  {
    "text": "there we have the trusted Chrome renderer and the native client plug-in lives inside of it uh the native client plugin implements the pepper proxy and",
    "start": "1219760",
    "end": "1226640"
  },
  {
    "text": "then of course the pepper proxy talks over the srpc and IMC protocols uh and I'm going to get into those but those",
    "start": "1226640",
    "end": "1232679"
  },
  {
    "text": "sort of just go down through the operating system and come back up the untrusted side of the stack um through",
    "start": "1232679",
    "end": "1238080"
  },
  {
    "text": "IMC through srpc through the pepper proxy on the untrusted side and then finally through the service runtime and",
    "start": "1238080",
    "end": "1243600"
  },
  {
    "text": "the untrusted nexc module uh and the data that gets pushed over those is serialized as this data structure called",
    "start": "1243600",
    "end": "1250520"
  },
  {
    "text": "ppv um PP varar is really really simple it's basically just uh two very simple structures uh you have PP VAR type which",
    "start": "1250520",
    "end": "1258280"
  },
  {
    "text": "is just like a c an that specifies the type of ppv right the Basic Value I'm",
    "start": "1258280",
    "end": "1263880"
  },
  {
    "text": "sorry the basic type uh and then you have ppar value which is a union uh and that Union contains like an integer a",
    "start": "1263880",
    "end": "1270440"
  },
  {
    "text": "car a double uh and or a bu and a uh and",
    "start": "1270440",
    "end": "1275720"
  },
  {
    "text": "then you just package those two up as a ppar structure uh and you can lots of different interfaces take one of these",
    "start": "1275720",
    "end": "1281600"
  },
  {
    "text": "structures they take two of these structures as arguments uh it just depends on the interface uh so those get serialized up by srpc automatically uh",
    "start": "1281600",
    "end": "1289039"
  },
  {
    "text": "and sent over the wire I just say sent over the operating system because it's all local um I know no one can read this",
    "start": "1289039",
    "end": "1295880"
  },
  {
    "text": "because I can't even read this but um I've made a graphic here so if you download the slides later this will be",
    "start": "1295880",
    "end": "1301120"
  },
  {
    "text": "helpful I promise um but essentially this is an end to-end call of how an untrusted nexi module makes a call",
    "start": "1301120",
    "end": "1308200"
  },
  {
    "text": "through the pepper proxy up through the trusted side um I can actually read this better on that screen um so you have the",
    "start": "1308200",
    "end": "1315039"
  },
  {
    "text": "untrusted nexi module down the bottom uh and you call get browser interface uh and you pass it this constant ppb again",
    "start": "1315039",
    "end": "1321960"
  },
  {
    "text": "that interface is implemented on The Trusted side uh Graphics 2D interface right so you want to call some method on",
    "start": "1321960",
    "end": "1327919"
  },
  {
    "text": "the remote Graphics uh the remote Graphics 2D interface um you have iFace",
    "start": "1327919",
    "end": "1333440"
  },
  {
    "text": "which is the variable we assigned it to and then we call create and we just pass it some data um thank",
    "start": "1333440",
    "end": "1340960"
  },
  {
    "text": "you cool uh and that's going to go over this uh trampoline springboard this is area code here and I'm going to explain",
    "start": "1340960",
    "end": "1347039"
  },
  {
    "text": "that in a little bit goes down through a native client CIS call and now here we're in the trusted service runtime uh",
    "start": "1347039",
    "end": "1353039"
  },
  {
    "text": "and then again now we go out over srpc and IMC through the operating system up through the trusted side of the Chrome",
    "start": "1353039",
    "end": "1358919"
  },
  {
    "text": "renderer process uh where it's received by this function here ppb Graphics 2D create dispatcher this is one of the",
    "start": "1358919",
    "end": "1365520"
  },
  {
    "text": "functions that's autogenerated via those IDL files right they're really really simple functions they just say this is",
    "start": "1365520",
    "end": "1372240"
  },
  {
    "text": "the interface these are the arguments it takes these are the argument types this is a return value you can really easily generate code for that uh and then pass",
    "start": "1372240",
    "end": "1378919"
  },
  {
    "text": "it off to the proper implementation uh then it goes down here through uh deserialize to where we",
    "start": "1378919",
    "end": "1384559"
  },
  {
    "text": "deserialize that ppv um you can as you can imagine that's a ripe area for vulnerabilities uh and then down here",
    "start": "1384559",
    "end": "1390760"
  },
  {
    "text": "through this PP API thunk which decides um you know what PP API interface am I",
    "start": "1390760",
    "end": "1396120"
  },
  {
    "text": "going to pass this off to um to actually have whatever the native client module requested done you",
    "start": "1396120",
    "end": "1402679"
  },
  {
    "text": "know uh and then up here through PP API itself",
    "start": "1402679",
    "end": "1409880"
  },
  {
    "text": "I promise if you ever look at Native client source code you will come back to this graphic it means nothing now but I promise you'll come back to",
    "start": "1411320",
    "end": "1418559"
  },
  {
    "text": "it uh the pepper proxy is also responsible for being sort of this glue layer between srpc right this low-level",
    "start": "1418559",
    "end": "1426640"
  },
  {
    "text": "protocol and the actual pepper implementation itself so um you have a",
    "start": "1426640",
    "end": "1431679"
  },
  {
    "text": "scenario let's say you have a scenario where having an untrusted nexi module uh and it wants to let's say uh use Audio",
    "start": "1431679",
    "end": "1437679"
  },
  {
    "text": "for example it wants to fill up an audio buffer with you know raw audio bits well that could take a while so it calls this",
    "start": "1437679",
    "end": "1444799"
  },
  {
    "text": "interface this audio interface and it says hey here's this buffer fill it up with audio data I know it's going to",
    "start": "1444799",
    "end": "1449840"
  },
  {
    "text": "take you a while so whenever you're done just call this call back uh and then it returns well obviously we have to track",
    "start": "1449840",
    "end": "1456559"
  },
  {
    "text": "some data uh when that happens we have to remember um what srpc channel that call came in on so that when we're",
    "start": "1456559",
    "end": "1463080"
  },
  {
    "text": "finished when ppapi is finished uh you know crunching the numbers for that audio it can then call the untrusted",
    "start": "1463080",
    "end": "1469399"
  },
  {
    "text": "Nixie module on that srpc channel so you can imagine um there can be some confusion here uh and I did find some",
    "start": "1469399",
    "end": "1475360"
  },
  {
    "text": "vulnerabilities here I'll talk about um towards the end uh but a few things about callbacks uh they're always bound",
    "start": "1475360",
    "end": "1480760"
  },
  {
    "text": "to one specific srpc Channel if there ever is confusion there it's a terrible vulnerability uh and of course callbacks",
    "start": "1480760",
    "end": "1486840"
  },
  {
    "text": "can only be invoked on the main thread uh and the main thread being the main thread um in the untrusted nexi module",
    "start": "1486840",
    "end": "1492799"
  },
  {
    "text": "and the reason for that is um again you could have confusion where um one thread sets a call back and another thread",
    "start": "1492799",
    "end": "1499600"
  },
  {
    "text": "receives it and that could certainly be um an area of",
    "start": "1499600",
    "end": "1505080"
  },
  {
    "text": "vulnerability um one thing to note is that the pepper proxy is absolutely not a security boundary it does very little",
    "start": "1505080",
    "end": "1511159"
  },
  {
    "text": "validation of data whatsoever uh there's a few instances where it'll check like length values of some buffer but in the",
    "start": "1511159",
    "end": "1516760"
  },
  {
    "text": "end it doesn't really know anything about the data it just knows that it has some data it has to pass it off to a",
    "start": "1516760",
    "end": "1523240"
  },
  {
    "text": "specified interface and it has to deserialize that data so all it is is a go between untrusted nexi modules and",
    "start": "1523240",
    "end": "1530480"
  },
  {
    "text": "The Trusted ppapi implementation okay so this is sort of",
    "start": "1530480",
    "end": "1536320"
  },
  {
    "text": "the I guess interesting part of the talk um the actual native client bits itself",
    "start": "1536320",
    "end": "1541840"
  },
  {
    "text": "not so much uh the native client plug-in Chrome side but the actual service runtime side where the untrusted nexi",
    "start": "1541840",
    "end": "1548120"
  },
  {
    "text": "modules run um the native client tool chain",
    "start": "1548120",
    "end": "1553200"
  },
  {
    "text": "doesn't necessarily belong in this graphic but I felt that I would I would add it here the knal tool chain produces",
    "start": "1553200",
    "end": "1558960"
  },
  {
    "text": "the untrusted nexi modules that are going to live down here in the bottom left in this service runtime process uh",
    "start": "1558960",
    "end": "1564640"
  },
  {
    "text": "and again like I said in the beginning you have to use the uh Native client SDK in order to produce untrusted nexi",
    "start": "1564640",
    "end": "1571480"
  },
  {
    "text": "modules uh you can't use GCC you can't use uh llvm uh and the naal SDK ships",
    "start": "1571480",
    "end": "1577159"
  },
  {
    "text": "with a modified GCC tool chain for producing native client models exactly to their exact",
    "start": "1577159",
    "end": "1583520"
  },
  {
    "text": "specifications uh and the current SDK can produce nexi modules for 32-bit x86",
    "start": "1583520",
    "end": "1589320"
  },
  {
    "text": "uh and x86 64 uh arm is coming and I have a slide for that sort of at the end but in the",
    "start": "1589320",
    "end": "1594919"
  },
  {
    "text": "current SDK can only produce uh nexi modules for these two architectures every nexi module is",
    "start": "1594919",
    "end": "1602039"
  },
  {
    "text": "compiled as compiled and linked as an elf and elf stands for executable linkable format um if you're familiar",
    "start": "1602039",
    "end": "1608840"
  },
  {
    "text": "with elf at all um all the familiar like typical structures that you see in an elf binary are there the elf header the",
    "start": "1608840",
    "end": "1615240"
  },
  {
    "text": "program headers the dynamic segment all the relocation entri symbols it's all there it looks like a regular elf module",
    "start": "1615240",
    "end": "1623760"
  },
  {
    "text": "um Google was really smart when they did this in my opinion um they could have",
    "start": "1623760",
    "end": "1629760"
  },
  {
    "text": "produced a proprietary uh bik code uh and had some machine you know virtual",
    "start": "1629760",
    "end": "1635080"
  },
  {
    "text": "machine like dvic or something like that uh but they chose to just take to create native client modules as eles uh and",
    "start": "1635080",
    "end": "1641600"
  },
  {
    "text": "because of that you can use all your standard tools on nexi modules you can use readelf which is found in every",
    "start": "1641600",
    "end": "1646880"
  },
  {
    "text": "single Linux distribution you can find uh you can use ID Pro to disassemble any",
    "start": "1646880",
    "end": "1652360"
  },
  {
    "text": "NEX any nexi modules all those standard tools just work right out of the box um the knle toolchain why do you",
    "start": "1652360",
    "end": "1659600"
  },
  {
    "text": "have to use the knle toolchain uh one of the most important reasons is that there's a few blacklisted I shouldn't",
    "start": "1659600",
    "end": "1665559"
  },
  {
    "text": "say a few there's a lot of blacklisted instructions that just are not allowed to exist in Native client modules um",
    "start": "1665559",
    "end": "1671200"
  },
  {
    "text": "they'll be thrown out at runtime so they'll never be emitted by the SDK um that's sort of required by the inner",
    "start": "1671200",
    "end": "1677080"
  },
  {
    "text": "sandbox and then the other big one is actually how code looks in the untrusted nexi module um all code has to be",
    "start": "1677080",
    "end": "1684200"
  },
  {
    "text": "aligned to 32 bytes uh and I have some assembler code up here uh you can kind of see if you look at the very first",
    "start": "1684200",
    "end": "1689559"
  },
  {
    "text": "address here hex one0 ac0 is 32 by align right so that's the start of this",
    "start": "1689559",
    "end": "1695799"
  },
  {
    "text": "function uh if we look down like six instructions we see two two branches uh one's a conditional Branch uh and one is",
    "start": "1695799",
    "end": "1702600"
  },
  {
    "text": "a branch that will always be taken and then after that you see some knops and those knops will continue until the next",
    "start": "1702600",
    "end": "1707880"
  },
  {
    "text": "uh 32 by aligned uh chunk of code um so this is how um this is how we change",
    "start": "1707880",
    "end": "1714760"
  },
  {
    "text": "execution this is how we move between functions um it always has to be 32 by line and we're always going to use a",
    "start": "1714760",
    "end": "1719919"
  },
  {
    "text": "branch instruction or a call instruction that can be vetted uh and I'll talk about how they're vetted in a minute um of course",
    "start": "1719919",
    "end": "1726440"
  },
  {
    "text": "no instructions May straddle that 32 by boundary uh if they do that would mean you could hide instructions within",
    "start": "1726440",
    "end": "1732720"
  },
  {
    "text": "within that boundary and that would be terrible that would allow you to escape the inner sandbox because on x86 you can",
    "start": "1732720",
    "end": "1738159"
  },
  {
    "text": "jump into the middle of an instruction uh and and start executing code um so a",
    "start": "1738159",
    "end": "1743480"
  },
  {
    "text": "good example of a blacklisted instruction and why it's blacklisted is actually the return instruction uh there",
    "start": "1743480",
    "end": "1748640"
  },
  {
    "text": "will be no there's no return instructions in Native client modules uh and the reason for that is you can",
    "start": "1748640",
    "end": "1753720"
  },
  {
    "text": "imagine a scenario where you have two nexi threads uh and one is busy doing something in a function uh and the other",
    "start": "1753720",
    "end": "1760679"
  },
  {
    "text": "nexi thread decides to you know on purpose trash the stack of the first thread uh when the first thread is done",
    "start": "1760679",
    "end": "1767799"
  },
  {
    "text": "doing whatever it was doing it's going to pop its return address off the stack and return to it uh well that return",
    "start": "1767799",
    "end": "1773799"
  },
  {
    "text": "address could be into the middle of another instruction and that's not allowed a native client every",
    "start": "1773799",
    "end": "1779039"
  },
  {
    "text": "instruction that will ever be executed by a native client module will actually be validated by the service runtime",
    "start": "1779039",
    "end": "1785159"
  },
  {
    "text": "validator uh and I'll talk about how that's actually done in a minute here um",
    "start": "1785159",
    "end": "1790279"
  },
  {
    "text": "but if obviously we need to change States between functions um that's manually done right so we're just using",
    "start": "1790279",
    "end": "1796200"
  },
  {
    "text": "uh jumps and pushes and pop as opposed to return um so Branch instructions always",
    "start": "1796200",
    "end": "1802679"
  },
  {
    "text": "have to be properly aligned to validated code so if you have uh a jump to an",
    "start": "1802679",
    "end": "1808159"
  },
  {
    "text": "absolute address uh the service runtime is going to make sure that that address",
    "start": "1808159",
    "end": "1813399"
  },
  {
    "text": "is always 32 by line uh and the knal tool chain will make sure that any jumps that are ever emitted into a nexi binary",
    "start": "1813399",
    "end": "1820279"
  },
  {
    "text": "uh are always will always uh land in a 32 by aligned address uh and this sort of prev",
    "start": "1820279",
    "end": "1827559"
  },
  {
    "text": "attacks where you have a vulnerable nexi module and you overwrite some function pointer um you know normally you'd be",
    "start": "1827559",
    "end": "1833360"
  },
  {
    "text": "able to take control of that um you know through maybe like a use after free vulnerability where you take control of a function pointer and then you call",
    "start": "1833360",
    "end": "1839200"
  },
  {
    "text": "that uh that register that that overwritten value lives in um so if you look down the bottom I have some some",
    "start": "1839200",
    "end": "1845080"
  },
  {
    "text": "more assembler um we have a register eax you know at runtime we don't know what's",
    "start": "1845080",
    "end": "1850120"
  },
  {
    "text": "an eax it could be anything uh in this case it's 1 57a hex um we're going to do",
    "start": "1850120",
    "end": "1857000"
  },
  {
    "text": "a logical and there and just make sure that it's 32 by Aline by using this this constant um so no matter what value is",
    "start": "1857000",
    "end": "1863159"
  },
  {
    "text": "in eax at runtime we know that it's 32 by aligned and we know that this module",
    "start": "1863159",
    "end": "1868679"
  },
  {
    "text": "wouldn't even be running right now if we hadn't validated all the code that started at 32 by aligned",
    "start": "1868679",
    "end": "1874960"
  },
  {
    "text": "chunks um so the neckl tool chain in summary is sort of responsible for ensuring that all the elf structures in",
    "start": "1874960",
    "end": "1881399"
  },
  {
    "text": "the nexi binary are properly formatted and they all look sane and only safe instructions are emitted uh it's going",
    "start": "1881399",
    "end": "1887559"
  },
  {
    "text": "to also make sure that all Branch instructions are properly aligned otherwise they'll be thrown out at runtime when the service runtime goes to",
    "start": "1887559",
    "end": "1893279"
  },
  {
    "text": "execute the binary uh but obviously an attacker can always modify an dexi",
    "start": "1893279",
    "end": "1898880"
  },
  {
    "text": "binary after the SDK has produced it right uh so that's where the service run time comes in uh and the service runtime",
    "start": "1898880",
    "end": "1905519"
  },
  {
    "text": "lives down here in the bottom left in the sandboxed uh service runtime process um you can see uh above surface runtime",
    "start": "1905519",
    "end": "1913840"
  },
  {
    "text": "it says trusted and then below that it says springboard and then trampoline and then untrusted and nexi um that's",
    "start": "1913840",
    "end": "1920399"
  },
  {
    "text": "because they all live in the same process the untrusted nexi module lives in the same process as The Trusted",
    "start": "1920399",
    "end": "1925480"
  },
  {
    "text": "service runtime um and that's really the only way to enforce the inner sandbox um and",
    "start": "1925480",
    "end": "1931559"
  },
  {
    "text": "just to reiterate what I said earlier the service runtime is a standalone process that's launched by the Chrome broker once the native client plugin has",
    "start": "1931559",
    "end": "1938840"
  },
  {
    "text": "downloaded an XE module they share a virtual address space the service runtime memory is trusted the nexi",
    "start": "1938840",
    "end": "1945480"
  },
  {
    "text": "module memory is untrusted the separation between those two components is the inner sandbox and the only way to enforce the inner sandbox is have them",
    "start": "1945480",
    "end": "1952440"
  },
  {
    "text": "both in the same virtual address space okay um so the elf loader actually",
    "start": "1952440",
    "end": "1960519"
  },
  {
    "text": "also lives in the service runtime right um Native clients not going to use the",
    "start": "1960519",
    "end": "1965799"
  },
  {
    "text": "elf loader that lives in your operating system say if you're using Linux or something like that um it has its own elf loader and what it's going to do is",
    "start": "1965799",
    "end": "1972039"
  },
  {
    "text": "go through each one of the elf segments found in the nexi binary and it's going to make sure that all of those uh things",
    "start": "1972039",
    "end": "1977120"
  },
  {
    "text": "found in the various elf structures look same uh it's going to make sure that all the uh length values match up all the",
    "start": "1977120",
    "end": "1983000"
  },
  {
    "text": "count values of you know how many structures are found within the segment matchup um it's going to enforce that",
    "start": "1983000",
    "end": "1989360"
  },
  {
    "text": "there's only one executable segment um there's not you can only have one right and it's going to enforce that the text",
    "start": "1989360",
    "end": "1995360"
  },
  {
    "text": "lives within that segment uh it's going to make sure that all load addresses look San that you're not trying to load something um where it shouldn't be",
    "start": "1995360",
    "end": "2002600"
  },
  {
    "text": "loaded because native client will sort of force you to one area of memory so that it can make room for The Trusted",
    "start": "2002600",
    "end": "2009799"
  },
  {
    "text": "code um the instruction validator also lives in the service runtime uh and with the instruction validator does is make",
    "start": "2009960",
    "end": "2016279"
  },
  {
    "text": "sure that no one fiddled with the nexi binary after the SDK produced it uh",
    "start": "2016279",
    "end": "2021919"
  },
  {
    "text": "again you know if the SDK can always produce instructions that are 32 by aligned but someone can an attacker can",
    "start": "2021919",
    "end": "2027360"
  },
  {
    "text": "mess with that after the fact um so what it's going to do is it's going to take the trusted entry point out of the elf",
    "start": "2027360",
    "end": "2032960"
  },
  {
    "text": "header and it's going to start disassembly and instruction validation from that address right that's a trusted",
    "start": "2032960",
    "end": "2038320"
  },
  {
    "text": "address um and it's going to exit of course on any blacklisted instruction uh blacklisted instructions include things",
    "start": "2038320",
    "end": "2044080"
  },
  {
    "text": "that are going to modify the segment registers on 32-bit Intel because those are sort of very important for the inner",
    "start": "2044080",
    "end": "2049240"
  },
  {
    "text": "sandbox design uh it's going to exit on things like CIS enter um Native client modules can't make direct CIS calls on",
    "start": "2049240",
    "end": "2055800"
  },
  {
    "text": "their own they have to go through the service runtime um various prefix bites on Branch instructions that would allow",
    "start": "2055800",
    "end": "2061520"
  },
  {
    "text": "it to sort of ignore the segment registers and jump into trusted memory um",
    "start": "2061520",
    "end": "2067440"
  },
  {
    "text": "it only performs static analysis on the code right it doesn't do any runtime validation of the code it assumes that",
    "start": "2067440",
    "end": "2072720"
  },
  {
    "text": "after its static analysis everything is good to go uh and that the module conforms to the rules that the native",
    "start": "2072720",
    "end": "2078800"
  },
  {
    "text": "client uh service runtime uh requires um again I had this example",
    "start": "2078800",
    "end": "2084040"
  },
  {
    "text": "before but I bring it up again now because now we're now we're in runtime we're about to run this binary um you",
    "start": "2084040",
    "end": "2089440"
  },
  {
    "text": "know again we don't know what's an eax but it doesn't matter because we're going to do this and instruction we're",
    "start": "2089440",
    "end": "2094638"
  },
  {
    "text": "going to make sure that whatever is in eax is 32 by aligned and remember we've made sure that all Branch targets are 32",
    "start": "2094639",
    "end": "2102520"
  },
  {
    "text": "by aligned so we know everywhere that we're going to be executing code we've validated that those instructions are",
    "start": "2102520",
    "end": "2108200"
  },
  {
    "text": "are okay and can't be used to escape the inner sandbox um the KNL SDK also contains a",
    "start": "2108200",
    "end": "2116640"
  },
  {
    "text": "standalone code validator and I have an example of that up here uh after you've compiled your",
    "start": "2116640",
    "end": "2123839"
  },
  {
    "text": "nexi module you can just run this um so what I did was I took a a hello world binary that comes with the SDK and I",
    "start": "2123839",
    "end": "2130920"
  },
  {
    "text": "modified it just to contain a basic x86 return instruction and then I manually ran the code validator on it and you can",
    "start": "2130920",
    "end": "2137560"
  },
  {
    "text": "see that it's loading each one of the elf segments uh checking their sizes and whatnot uh and then it sees and then the",
    "start": "2137560",
    "end": "2143359"
  },
  {
    "text": "validator picks up on the executable segment and starts disassembling instructions uh and it comes across my",
    "start": "2143359",
    "end": "2148839"
  },
  {
    "text": "return instruction and obviously I've put that in bold uh red font it says return instruction not allowed legal",
    "start": "2148839",
    "end": "2154599"
  },
  {
    "text": "instruction uh and then it's going to keep going through and try and load the various different elf segments but at the end the result is this binary is not",
    "start": "2154599",
    "end": "2161119"
  },
  {
    "text": "trusted it contains an instruction that might allow this nexi module to break out of the inner sandbox so we're not",
    "start": "2161119",
    "end": "2166800"
  },
  {
    "text": "going to run it um so you can you can just run this on your binaries without having to load them in Chrome just to",
    "start": "2166800",
    "end": "2172480"
  },
  {
    "text": "see the various different instructions that are banned and um the inner sandbox I keep saying",
    "start": "2172480",
    "end": "2178480"
  },
  {
    "text": "the inner sandbox but I haven't really explained how it's enforced um the inner sandbox is essential to the security",
    "start": "2178480",
    "end": "2185319"
  },
  {
    "text": "module uh the security uh that's created by native clamp um it sort of keeps untrusted nexi modules",
    "start": "2185319",
    "end": "2192240"
  },
  {
    "text": "from having complete random just complete arbitrary access to the service runtime memory and the service runtime",
    "start": "2192240",
    "end": "2198280"
  },
  {
    "text": "is a trusted component um on x86 it's actually really simple and it's done really well it uses",
    "start": "2198280",
    "end": "2203560"
  },
  {
    "text": "the memory segmentation module it use uh model it uses um you know various segment registers to keep code uh",
    "start": "2203560",
    "end": "2210200"
  },
  {
    "text": "constrained within a certain area of memory um and I'm not going to go into depth on x64 and arm but really quickly",
    "start": "2210200",
    "end": "2216520"
  },
  {
    "text": "uh on x64 all move and Branch instructions are subject to alignment and there's guard pages to keep uh keep",
    "start": "2216520",
    "end": "2223160"
  },
  {
    "text": "rights from happening where they shouldn't be happening and on arm it's very similar um I'm not convinced of the",
    "start": "2223160",
    "end": "2230319"
  },
  {
    "text": "security of the inner sandbox on arm and x64 yet um but the x86 module uh model",
    "start": "2230319",
    "end": "2235680"
  },
  {
    "text": "is pretty pretty well vetted at this point and of course uh when we transfer between uh untrusted and trusted code we",
    "start": "2235680",
    "end": "2242880"
  },
  {
    "text": "need to store States right we need to store uh register States and those are all going to be stored in trusted TLS",
    "start": "2242880",
    "end": "2247960"
  },
  {
    "text": "segments um that are stored uh in this trusted service runtime memory um so on x86 we're going to use",
    "start": "2247960",
    "end": "2256160"
  },
  {
    "text": "various different segment registers to sort of keep um untrusted code in check and keep it within a segment of memory",
    "start": "2256160",
    "end": "2262319"
  },
  {
    "text": "that we know um will never be processed by trusted code uh and we use uh",
    "start": "2262319",
    "end": "2267480"
  },
  {
    "text": "familiar x86 segment registers for that uh CS for code DS for data and GS For",
    "start": "2267480",
    "end": "2272560"
  },
  {
    "text": "Thread local storage which is actually pretty similar to uh how operating systems do use use them uh not all",
    "start": "2272560",
    "end": "2277760"
  },
  {
    "text": "operating systems use them but some do uh and then of course SS and Fs are all set to uh the value of what DS is set to",
    "start": "2277760",
    "end": "2285400"
  },
  {
    "text": "um when we need to transfer when we need to um switch between untrusted to",
    "start": "2285400",
    "end": "2290640"
  },
  {
    "text": "trusted code uh we need to use trusted instructions to do that uh and that's done through two things uh springboards",
    "start": "2290640",
    "end": "2297599"
  },
  {
    "text": "which enable a context switch from trusted to untrusted and we have trampolines which enable a context",
    "start": "2297599",
    "end": "2303640"
  },
  {
    "text": "switch from untrusted to trusted uh and each of them is going to contain privileged instructions just by their",
    "start": "2303640",
    "end": "2308760"
  },
  {
    "text": "very nature right um in order to change those segment registers we need trusted instructions to do it so at runtime",
    "start": "2308760",
    "end": "2315040"
  },
  {
    "text": "these chunks of code get mapped in automatically by the service runtime um so you might be thinking well",
    "start": "2315040",
    "end": "2321200"
  },
  {
    "text": "why can't I just return to those trusted instructions once uh I'm in the once I'm my untrusted module is running uh the",
    "start": "2321200",
    "end": "2328319"
  },
  {
    "text": "reason you can't do that with the trusted springboard is because the very first instruction in The Trusted",
    "start": "2328319",
    "end": "2333560"
  },
  {
    "text": "springboard is a halt instruction and that's because because the trusted springboard is only meant to be executed",
    "start": "2333560",
    "end": "2339400"
  },
  {
    "text": "from the service runtime um and you can only call code within the trusted springboard at a 32 by aligned address",
    "start": "2339400",
    "end": "2346680"
  },
  {
    "text": "so no matter uh what you do if you try and call The Trusted springboard from untrusted code you won't be able to",
    "start": "2346680",
    "end": "2352280"
  },
  {
    "text": "You'll hit that halt instruction and the process will stop uh because it's only meant to be invoked from the actual trusted service runtime uh",
    "start": "2352280",
    "end": "2361240"
  },
  {
    "text": "code uh the service runtime also enforces that no new memory allocations can be marked as executable at time uh",
    "start": "2361240",
    "end": "2367400"
  },
  {
    "text": "it also enforces that um only validated code Pages have executable permissions right there's only one segment of memory",
    "start": "2367400",
    "end": "2373760"
  },
  {
    "text": "that can be executable and that has to be a segment of memory that was validated by the instruction",
    "start": "2373760",
    "end": "2379839"
  },
  {
    "text": "validator um so an NEX module like I mentioned earlier it can't make normal CIS calls it has to go through uh it has",
    "start": "2380160",
    "end": "2386200"
  },
  {
    "text": "to go through the service runtime uh and it does this through this thing called nackal CIS calls which goes through the trampoline and the springboard",
    "start": "2386200",
    "end": "2391880"
  },
  {
    "text": "interfaces uh and there's basic CIS calls for things like map m m unmap uh stat exit uh and then there's CIS calls",
    "start": "2391880",
    "end": "2398960"
  },
  {
    "text": "to do things like srpc and IMC and low-level protocol stuff um the service runtime sort of",
    "start": "2398960",
    "end": "2405440"
  },
  {
    "text": "implements IMC and IMC is like a very low-level protocol uh and it uses uh two different CIS calls to set those up IMC",
    "start": "2405440",
    "end": "2412160"
  },
  {
    "text": "make bound sock bound sock and IMC socket pair uh and these ride on top of",
    "start": "2412160",
    "end": "2417480"
  },
  {
    "text": "operating system supplied interfaces like Unix sockets and named pipes and shared memory uh just depends on the",
    "start": "2417480",
    "end": "2422880"
  },
  {
    "text": "platform which one it's going to use it doesn't really matter to you as a nexi module developer uh it does matter to you as an exploit",
    "start": "2422880",
    "end": "2428920"
  },
  {
    "text": "developer uh and of course IMC is way too low level to be used by a native client um module author uh so there's",
    "start": "2428920",
    "end": "2436079"
  },
  {
    "text": "srpc which rides on top of IMC um srpc is a little bit higher level higher",
    "start": "2436079",
    "end": "2443000"
  },
  {
    "text": "layer than IMC and it's going to serialize all the data I mentioned earlier like ppvs um srpc endpoints are invoked VI a",
    "start": "2443000",
    "end": "2450920"
  },
  {
    "text": "really simple uh method here I have a little chunk of code right here it says uh knal srpc invoked by signature and",
    "start": "2450920",
    "end": "2457400"
  },
  {
    "text": "the first parameter you pass it is the srpc channel you're communicating on uh and then just a string that describes",
    "start": "2457400",
    "end": "2463359"
  },
  {
    "text": "the interface you want to call uh and the two arguments that you want to pass it in their types uh and again although",
    "start": "2463359",
    "end": "2468800"
  },
  {
    "text": "srpc is a higher level than IMC it's not meant to be invoked",
    "start": "2468800",
    "end": "2474599"
  },
  {
    "text": "directly um so before I get into attack surface stuff I just want to mention portable Knack which is sort of like",
    "start": "2474599",
    "end": "2481000"
  },
  {
    "text": "where a native client is going but isn't quite there yet um and this is where a native client will be found on arm uh so",
    "start": "2481000",
    "end": "2488160"
  },
  {
    "text": "basically what the plan for Pinnacle is um is that you it will have an llvm",
    "start": "2488160",
    "end": "2493400"
  },
  {
    "text": "runtime and it'll take down an intermediate representation off the internet instead of an XE module and",
    "start": "2493400",
    "end": "2499240"
  },
  {
    "text": "it'll use llvm's ahead of time compiler and turn that into a nexi module containing native arm code uh the inner",
    "start": "2499240",
    "end": "2505640"
  },
  {
    "text": "sandbox will remain the same the pepper proxy will remain the same but it will bring 32-bit arm support I do think you",
    "start": "2505640",
    "end": "2511079"
  },
  {
    "text": "can go download a a Dev um release of that now okay okay so this brings me to",
    "start": "2511079",
    "end": "2517359"
  },
  {
    "text": "the part of the talk I think people are actually here for except for the people that are leaving um so native client uh",
    "start": "2517359",
    "end": "2525680"
  },
  {
    "text": "I have this Golden Rule up here uh and I'm just going to read it for btim uh if a knle module can execute instructions",
    "start": "2525680",
    "end": "2531200"
  },
  {
    "text": "that were not validated by the service runtime then the security provided by native client is broken this is",
    "start": "2531200",
    "end": "2536520"
  },
  {
    "text": "absolutely uh always the case that's why the instruction validator is so strict if any instructions get executed that",
    "start": "2536520",
    "end": "2542880"
  },
  {
    "text": "don't match those rules it's broken you know any anything is game um on chrome outer sandbox escapes uh",
    "start": "2542880",
    "end": "2550599"
  },
  {
    "text": "they require a certain number of of prerequisites uh one is like vulnerabilities in the broker process right of course you can escape the outer",
    "start": "2550599",
    "end": "2556640"
  },
  {
    "text": "sandbox then because you're you found vulnerabilities in a privilege component uh and then there's like no or weekly sandbox components like the GPU process",
    "start": "2556640",
    "end": "2563800"
  },
  {
    "text": "or like a plugin uh like the old flash plugin was in Chrome uh and then there's kernel vulnerabilities things that the",
    "start": "2563800",
    "end": "2569119"
  },
  {
    "text": "sandbox can actually protect against at all right these are the things you need to be able to break out of the Chrome at or sandbox uh but we can't really go",
    "start": "2569119",
    "end": "2575960"
  },
  {
    "text": "after after those things as an untrusted nexi module and that's because we're inside the inner sandbox uh and the",
    "start": "2575960",
    "end": "2581599"
  },
  {
    "text": "inner sandbox as I've shown um has a lot of restrictions around the different things that you can do you can't",
    "start": "2581599",
    "end": "2586800"
  },
  {
    "text": "actually talk directly to the broker process uh you can't make direct CIS direct CIS calls to the colonel um and",
    "start": "2586800",
    "end": "2593280"
  },
  {
    "text": "there's instruction validation so you can't just break out of the inner sandbox by changing a segment register uh so we have to sort of go after the",
    "start": "2593280",
    "end": "2598920"
  },
  {
    "text": "things that are native client specific if we want to break out of uh the security that native client",
    "start": "2598920",
    "end": "2604839"
  },
  {
    "text": "provides uh dat client definitely raises the bar for exploitation uh in this in this regard uh but again you need",
    "start": "2604839",
    "end": "2611359"
  },
  {
    "text": "trusted components to be able to do anything useful uh and those trusted components are where we're going to find",
    "start": "2611359",
    "end": "2617400"
  },
  {
    "text": "useful attack surface to go after uh just like I said earlier",
    "start": "2617400",
    "end": "2622760"
  },
  {
    "text": "vulnerable nexi modules aren't an issue right like why would you exploit a vulnerability in a in a native client",
    "start": "2622760",
    "end": "2627800"
  },
  {
    "text": "module and a nexi module when you can just run your own nexi module there's really no point right and it does",
    "start": "2627800",
    "end": "2633640"
  },
  {
    "text": "validation of uh you know like registers and everything make sure that even if you could exploit a use that for free and an XI module it wouldn't matter",
    "start": "2633640",
    "end": "2640319"
  },
  {
    "text": "because you'd only be able to return to trusted code so what we need to do is",
    "start": "2640319",
    "end": "2645920"
  },
  {
    "text": "take uh a nexi module and find vulnerabilities in the Chrome renderer and then go after them with that nexi",
    "start": "2645920",
    "end": "2652559"
  },
  {
    "text": "module uh there's a few different things that we can go after uh of course the inner sandbox uh the elf loader elf is",
    "start": "2652559",
    "end": "2659160"
  },
  {
    "text": "notoriously hard to parse uh the instruction validator disassembler uh the knal CIS call implementations we can",
    "start": "2659160",
    "end": "2665280"
  },
  {
    "text": "always go after um you know things they do lowlevel things like IMC right uh we always hear",
    "start": "2665280",
    "end": "2670559"
  },
  {
    "text": "about CIS call implementation vulnerabilities like the Linux Cur right there's a least a few a year uh the knal",
    "start": "2670559",
    "end": "2676200"
  },
  {
    "text": "CIS calls are no different right uh they take untrusted data from the the untrusted side uh and they process it in",
    "start": "2676200",
    "end": "2682280"
  },
  {
    "text": "trusted memory so this is all different attack surface we find in the inner sandbox uh I don't believe anyone has",
    "start": "2682280",
    "end": "2687839"
  },
  {
    "text": "found a vulnerability in the secure L floater yet and I think that's because Google has fuzzed the crap out of it um",
    "start": "2687839",
    "end": "2694040"
  },
  {
    "text": "then of course there's the native client PP API plug in itself uh which implements things like IMC and srpc um",
    "start": "2694040",
    "end": "2700960"
  },
  {
    "text": "two very lowle protocols right there's going to be low-l binary packet processing parsing code there uh so",
    "start": "2700960",
    "end": "2706880"
  },
  {
    "text": "that's definitely worthwhile attack surface uh then there's the JavaScript Dom interfaces uh there's really that's",
    "start": "2706880",
    "end": "2712760"
  },
  {
    "text": "light like I mentioned earlier but of course it's still considered a TX surface as small as it may be uh there's",
    "start": "2712760",
    "end": "2718520"
  },
  {
    "text": "the Json parser that's found in the native client plugin there's the pepper proxy interfaces both server and client",
    "start": "2718520",
    "end": "2725680"
  },
  {
    "text": "uh you know they're reached via untrusted code uh there's the GPU uh if anyone's familiar with the ponum contest",
    "start": "2725680",
    "end": "2731520"
  },
  {
    "text": "that happened earlier this year is a guy named pupy who exploited an integer overflow in the GPU process and that",
    "start": "2731520",
    "end": "2738359"
  },
  {
    "text": "integer overflow was reached was reached via an untrusted nexi module um because",
    "start": "2738359",
    "end": "2743599"
  },
  {
    "text": "nexi modules have sort of a lower level um access to GPU command buffers than you would get via",
    "start": "2743599",
    "end": "2750359"
  },
  {
    "text": "JavaScript um so I want to talk about some of the vulnerabilities that were actually found in Native clients so far",
    "start": "2750359",
    "end": "2755480"
  },
  {
    "text": "uh the very first one was found by a friend of mine Alex Alex rad uh and this was really early this was in 2008 when",
    "start": "2755480",
    "end": "2761599"
  },
  {
    "text": "native client was just still a research project um and of course we're familiar",
    "start": "2761599",
    "end": "2766640"
  },
  {
    "text": "with this code pattern up here um we're just doing this and operation on the value of this register and we make sure",
    "start": "2766640",
    "end": "2772559"
  },
  {
    "text": "that whatever's in edx is properly 32 by aligned uh the problem is that this call",
    "start": "2772559",
    "end": "2777599"
  },
  {
    "text": "instruction actually references calls what that address in edx references",
    "start": "2777599",
    "end": "2782760"
  },
  {
    "text": "right so this is a really simple sandbox breakout but again this was back when native client was um was very much still",
    "start": "2782760",
    "end": "2788240"
  },
  {
    "text": "a research project uh then there was the 2009 uh Native client security contest that was",
    "start": "2788240",
    "end": "2794720"
  },
  {
    "text": "held by Google um it didn't really nothing came out of it that",
    "start": "2794720",
    "end": "2799920"
  },
  {
    "text": "significantly like really broke the inner sandbox design and said that this thing is just isn't going to fly at all they're mostly implementation bugs that",
    "start": "2799920",
    "end": "2806040"
  },
  {
    "text": "could just be fixed you know by changing a few lines of C++ um I participated in",
    "start": "2806040",
    "end": "2811160"
  },
  {
    "text": "the contest uh I got beat very very badly by uh Mark Dow and Ben Hawks two",
    "start": "2811160",
    "end": "2816400"
  },
  {
    "text": "very very talented guys uh but I did come in second place with two colleagues of mine and there were a bunch of other",
    "start": "2816400",
    "end": "2821480"
  },
  {
    "text": "good entries uh some of these vulnerabilities don't really matter anymore right because the architecture changed so much since 2009 uh but some",
    "start": "2821480",
    "end": "2828440"
  },
  {
    "text": "of them are still relevant to Native client uh and we can learn something from them uh some of my favorite ones uh",
    "start": "2828440",
    "end": "2834880"
  },
  {
    "text": "was the E Flags Direction flag modification on 32-bit Intel you have this status register called e Flags uh",
    "start": "2834880",
    "end": "2841240"
  },
  {
    "text": "and there's a bit in there that's like a direction flag which is going to like determine you know which way in memory data is written and untrusted code could",
    "start": "2841240",
    "end": "2847880"
  },
  {
    "text": "flip that bit and then call a knal CIS call and just like automatically trigger a buffer overflow that was a really cool",
    "start": "2847880",
    "end": "2853960"
  },
  {
    "text": "vulnerability uh and then I think uh Mark out found an excellent vulnerability where you could just unmap validated code and map in unvalidated",
    "start": "2853960",
    "end": "2860400"
  },
  {
    "text": "code uh that was pretty embarrassing for for Native client but obviously that's been fixed uh was a vulnerability I",
    "start": "2860400",
    "end": "2866800"
  },
  {
    "text": "found uh an uninitialized V table uh a lot of native clients implemented in C",
    "start": "2866800",
    "end": "2872160"
  },
  {
    "text": "uh and when I found that when Google writes C they write it like it's C++ so they have all these manual vtes that",
    "start": "2872160",
    "end": "2878240"
  },
  {
    "text": "they pass around with these structures and they say whenever you're using this structure uh call functions from this V",
    "start": "2878240",
    "end": "2883760"
  },
  {
    "text": "table instead of you know whatever the regular F open is call the F open found in this V table uh and through an",
    "start": "2883760",
    "end": "2890640"
  },
  {
    "text": "integer overflow resulted in some uninitialized V table and arbitrary code execution",
    "start": "2890640",
    "end": "2896480"
  },
  {
    "text": "another one was this double delete operator uh which was sort of found which was found in the npapi runtime",
    "start": "2896480",
    "end": "2901800"
  },
  {
    "text": "this was sort of confusion between who is responsible for freeing the C++ object uh was it the npapi backend code",
    "start": "2901800",
    "end": "2907800"
  },
  {
    "text": "or was it the native client code uh and although native client no longer uses npapi you can still find the same types",
    "start": "2907800",
    "end": "2914160"
  },
  {
    "text": "of issues with PP API um so yeah even though the architecture has changed significantly",
    "start": "2914160",
    "end": "2920200"
  },
  {
    "text": "since 2009 uh npapi is gone and Pepper's replaced it uh the 2009 security contest",
    "start": "2920200",
    "end": "2925760"
  },
  {
    "text": "really provided a good look at the future of native client vulnerabilities uh there probably weren't going to be that many inner sandbox breakouts it was",
    "start": "2925760",
    "end": "2932760"
  },
  {
    "text": "probably going to be more um vulnerabilities in like stuff like the pepper proxy that handle untrusted",
    "start": "2932760",
    "end": "2938680"
  },
  {
    "text": "data and that's very much held true true to this day uh Google themselves have found some",
    "start": "2938680",
    "end": "2944480"
  },
  {
    "text": "pretty cool vulnerabilities in Native client and they've published them um one of the cool ones here on win64 was this",
    "start": "2944480",
    "end": "2950960"
  },
  {
    "text": "uh when an exception happened this function would get triggered user exception dispatcher the problem is that",
    "start": "2950960",
    "end": "2956240"
  },
  {
    "text": "uh this function would get triggered in ntdll and ntdll wasn't aware of the untrusted stack and the untrusted",
    "start": "2956240",
    "end": "2961680"
  },
  {
    "text": "address space so it end up just trashing memory trusted memory uh whenever exception was was triggered um there was",
    "start": "2961680",
    "end": "2968200"
  },
  {
    "text": "a few minor ones like this uh trampoline address space leak an nexi module could read the untrusted trampoline code in",
    "start": "2968200",
    "end": "2975000"
  },
  {
    "text": "memory and pull out a trusted address and know where things were mapped in The Trusted address space uh some minor",
    "start": "2975000",
    "end": "2980640"
  },
  {
    "text": "stuff like address bace leaks via JavaScript uh and then this brings me to",
    "start": "2980640",
    "end": "2985760"
  },
  {
    "text": "I'm I'm almost running low on time here but uh uh a source code audit that I did for Google last June they were nice",
    "start": "2985760",
    "end": "2990880"
  },
  {
    "text": "enough to let me talk about it um I imp I audited the pepper proxy I guess",
    "start": "2990880",
    "end": "2996280"
  },
  {
    "text": "they're done um it was just me uh for 3 weeks staring at C++ code um and it was",
    "start": "2996280",
    "end": "3002400"
  },
  {
    "text": "just a manual source code a it and I found 10 unique security vulnerabilities um a lot of them were around uh un",
    "start": "3002400",
    "end": "3008400"
  },
  {
    "text": "serializing untrusted data uh one of the cool ones I found was this ppb URL loader open uh which basically used Kors",
    "start": "3008400",
    "end": "3016000"
  },
  {
    "text": "and Coors is cross origin resource sharing uh any anytime one the website wants to make request to another site",
    "start": "3016000",
    "end": "3021960"
  },
  {
    "text": "you know via JavaScript in your browser needs to make this request uh and because this was um",
    "start": "3021960",
    "end": "3028319"
  },
  {
    "text": "oh um because this interface is called through C++ you could just inject an arbitrary carriage return and Line Feed",
    "start": "3028319",
    "end": "3035240"
  },
  {
    "text": "uh and inject some random headers uh another cool vulnerability uh that I found was this ppb audio create uh use",
    "start": "3035240",
    "end": "3041799"
  },
  {
    "text": "after free and this goes back to that uh really complex glue code that sort of uh",
    "start": "3041799",
    "end": "3047160"
  },
  {
    "text": "binds the pepper proxy and srpc uh I found that um what you could do is uh",
    "start": "3047160",
    "end": "3053280"
  },
  {
    "text": "trigger um like the audio interface again for example to fill up some buffer and then you know trigger a call back",
    "start": "3053280",
    "end": "3059680"
  },
  {
    "text": "when it was done uh but while it was busy doing whatever it was doing the nexy module would invalidate that srpc",
    "start": "3059680",
    "end": "3065319"
  },
  {
    "text": "channel uh and then when the pepper implementation was done it would go to then call the stale srpc Channel pointer",
    "start": "3065319",
    "end": "3072079"
  },
  {
    "text": "and you'd get an exploitable use after free uh and the proof of concept for this bug was great I just I just added",
    "start": "3072079",
    "end": "3077440"
  },
  {
    "text": "like a call to exit after I called that um after I called that function and it instantly sad tabbed",
    "start": "3077440",
    "end": "3083799"
  },
  {
    "text": "Chrome um a lot of other run-of-the-mill vulnerabilities uh integer overflows that led to memory Corruption of you",
    "start": "3083799",
    "end": "3090400"
  },
  {
    "text": "know different sorts in shared memory um one I believe was shared memory with a broker process never really investigated",
    "start": "3090400",
    "end": "3096119"
  },
  {
    "text": "that much but I think that could have been a a Sandbox Escape All In All bunch of uh cool",
    "start": "3096119",
    "end": "3101880"
  },
  {
    "text": "vulnerabilities that led to Heap overflows and information leaks um various different uh exploitable",
    "start": "3101880",
    "end": "3107880"
  },
  {
    "text": "conditions uh all found through a source code audit uh length calculations turned out to be really difficult uh in the",
    "start": "3107880",
    "end": "3114200"
  },
  {
    "text": "pepper proxy do due to all the serialized data a lot of it's been fixed now um a lot of confusion over whether",
    "start": "3114200",
    "end": "3120680"
  },
  {
    "text": "the pepper proxy was responsible for validating a length um variable or whether the ppapi implementation was",
    "start": "3120680",
    "end": "3127000"
  },
  {
    "text": "responsible for validating it um and then moving on uh Google",
    "start": "3127000",
    "end": "3132880"
  },
  {
    "text": "actually hired me and Modano I did a joint project with Modano uh this past January to develop a fuzzer for the",
    "start": "3132880",
    "end": "3139119"
  },
  {
    "text": "pepper proxy um and this was a cool project I did with uh Cody broches who spoke last night actually um Google",
    "start": "3139119",
    "end": "3145599"
  },
  {
    "text": "deployed this fuzzer on their their fuzzing farm and I believe they're going to make this code uh open after black",
    "start": "3145599",
    "end": "3151000"
  },
  {
    "text": "hat um it was very simple it's just the nexy module that I wrote in C++ uh it had a bunch of various different utility",
    "start": "3151000",
    "end": "3157040"
  },
  {
    "text": "functions for generating random data uh and calling lots of different interfaces you know just setting up basic native",
    "start": "3157040",
    "end": "3162359"
  },
  {
    "text": "client NEX module stuff uh and then we had uh we had a bunch of Python scripts",
    "start": "3162359",
    "end": "3169359"
  },
  {
    "text": "that took in these IDL files from the Chrome web source and these python libraries that the Chrome developers",
    "start": "3169359",
    "end": "3174520"
  },
  {
    "text": "wrote that sort of created um an abstract synt uh syntax tree from those idls and we basically just spit out C++",
    "start": "3174520",
    "end": "3181480"
  },
  {
    "text": "code into the nexi module template uh to automatically fuzz native client so all you do is you just basically move this",
    "start": "3181480",
    "end": "3187240"
  },
  {
    "text": "fuzzer into the new SDK version uh do python generate. py uh and you have um",
    "start": "3187240",
    "end": "3192799"
  },
  {
    "text": "an instant fuzzer for all the new interfaces that were added since the last version of the SDK uh turns out",
    "start": "3192799",
    "end": "3198160"
  },
  {
    "text": "there's a lot of problems trying to fuzz from a native client module uh one you can't log to disk because the only way",
    "start": "3198160",
    "end": "3204640"
  },
  {
    "text": "to log to dis is to call interfaces that you're currently fuzzing right you can't just open up a file because you're in a very",
    "start": "3204640",
    "end": "3210680"
  },
  {
    "text": "strict sandbox uh another one was you need a a constant source of random data",
    "start": "3210680",
    "end": "3216000"
  },
  {
    "text": "you can't just open Dev view random if you're running on Linux uh so we basically cheated there and made a call up to JavaScript and in Chrome you can",
    "start": "3216000",
    "end": "3222680"
  },
  {
    "text": "call um like window. crypto gen random and get a bunch of random bits uh we do",
    "start": "3222680",
    "end": "3227839"
  },
  {
    "text": "that as much as we can but again that goes over an interface and the proxy that we're currently fuzzing uh so you",
    "start": "3227839",
    "end": "3233799"
  },
  {
    "text": "know we had some kind of some hard challenges there where we ended up just dumping log data to STD out and just",
    "start": "3233799",
    "end": "3239079"
  },
  {
    "text": "parsing it with various different scripts um so the exploitation of of",
    "start": "3239079",
    "end": "3245000"
  },
  {
    "text": "knack is is kind of difficult there's a few different scenarios you can imagine um even if you got uh arbitrary code",
    "start": "3245000",
    "end": "3252880"
  },
  {
    "text": "execution in the outer sandbox you're still in the outer sandbox sure you've defeated the inner sandbox but now you're still in another sandbox um it's",
    "start": "3252880",
    "end": "3260640"
  },
  {
    "text": "not equivalent to a webkit or V8 bug I've seen people talk about this on Twitter saying that you know well what does a nexi module give me I could just",
    "start": "3260640",
    "end": "3267240"
  },
  {
    "text": "get a web kit bug and exploit that yeah that that's true but a nexi module gives you access to lots and lots of",
    "start": "3267240",
    "end": "3272799"
  },
  {
    "text": "interfaces that you simply can't reach from JavaScript um so there's a lot more attack surface because of",
    "start": "3272799",
    "end": "3279480"
  },
  {
    "text": "it um so sort of conclusion slide here uh Native client trying to solve a very difficult problem uh the next time you",
    "start": "3279480",
    "end": "3285960"
  },
  {
    "text": "hear anyone comparing it to npapi or active X just yell at them because it's",
    "start": "3285960",
    "end": "3291160"
  },
  {
    "text": "not even close to the same thing um Native clients Research into software fault isolation and sandboxing is",
    "start": "3291160",
    "end": "3298040"
  },
  {
    "text": "absolutely going to influence sandboxes going forward uh I wouldn't be surprised if 2 3 years from now uh sandboxes that",
    "start": "3298040",
    "end": "3304319"
  },
  {
    "text": "are out there uh have bits and pieces of native clients inner sandbox in them I wouldn't be surprised to see this on",
    "start": "3304319",
    "end": "3309640"
  },
  {
    "text": "Android in the next few years um uh I sort of like a crazy idea but I would love to see the dvic VM scrapped for the",
    "start": "3309640",
    "end": "3316240"
  },
  {
    "text": "inner sandbox that's provided by native client um and I think would greatly improve Android's uh security posture uh",
    "start": "3316240",
    "end": "3323240"
  },
  {
    "text": "and of course for the uh paranoid Among Us I always recommend that you run Google uh I'm sorry you run Chrome's",
    "start": "3323240",
    "end": "3329480"
  },
  {
    "text": "click to playay for all plugins including native client so that's the end does anyone",
    "start": "3329480",
    "end": "3335200"
  },
  {
    "text": "have any questions questions use the microphone I guess y hi um I saw earlier in your",
    "start": "3335200",
    "end": "3344039"
  },
  {
    "text": "presentation that uh you had these list of trusted and untrusted modules what are you attributing to the trust what",
    "start": "3344039",
    "end": "3350440"
  },
  {
    "text": "are you applying to The Trusted modules why do you trust them um so it all",
    "start": "3350440",
    "end": "3355799"
  },
  {
    "text": "depends on the where what sandbox they run in right so two two components that run in the inner sandbox anything in the",
    "start": "3355799",
    "end": "3363160"
  },
  {
    "text": "outer sandbox is considered trusted because to be able to execute code in the outer sandbox you basically need to",
    "start": "3363160",
    "end": "3369599"
  },
  {
    "text": "elevate your privileges right because the inner sandbox untrusted code is within the inner sandbox so really just",
    "start": "3369599",
    "end": "3375039"
  },
  {
    "text": "depends on the context that you're that you're looking at sure but why are you trusting the broker is there are they doing IV on the code like Integrity",
    "start": "3375039",
    "end": "3382599"
  },
  {
    "text": "verification or what are they doing to trust that code so the reason that the Chrome broker process is trusted is",
    "start": "3382599",
    "end": "3389200"
  },
  {
    "text": "because you can't directly interact with it right JavaScript can only directly interact with the Chrome renderer",
    "start": "3389200",
    "end": "3394760"
  },
  {
    "text": "process uh and anytime it needs to access a privileged resource it's going to go out of channel to the broker",
    "start": "3394760",
    "end": "3400039"
  },
  {
    "text": "process and ask it to do it on its behalf so it's just sort of like a separation of privileges there and that's just like Google Chrome's model",
    "start": "3400039",
    "end": "3406880"
  },
  {
    "text": "okay so if the if the binary was modified it probably wouldn't know right if the if the broker was modified it",
    "start": "3406880",
    "end": "3412680"
  },
  {
    "text": "probably just run modified right sure okay good thanks so uh you mentioned the uh GP",
    "start": "3412680",
    "end": "3421119"
  },
  {
    "text": "related thing uh during the sandboxing so my question is what's uh El thinking",
    "start": "3421119",
    "end": "3426440"
  },
  {
    "text": "for GPU security and is possible we can sandbox the GPO code thanks I believe",
    "start": "3426440",
    "end": "3433039"
  },
  {
    "text": "the question was is it possible if you can like sandbox GPU code and the GPU GPU bug I brought up um I'm not a GPU",
    "start": "3433039",
    "end": "3439440"
  },
  {
    "text": "expert um but it has to talk directly to uh drivers to like Graphics drivers so I",
    "start": "3439440",
    "end": "3444960"
  },
  {
    "text": "think that's why the GPU process runs with elevated privileges um I would really just refer you to the Chrome",
    "start": "3444960",
    "end": "3450599"
  },
  {
    "text": "documentation on the GPU process I I'm really not an expert in that space But I imagine that's why it has elevated",
    "start": "3450599",
    "end": "3458119"
  },
  {
    "text": "privileges do the two sides of the inner sandbox share a Malik um",
    "start": "3459839",
    "end": "3466240"
  },
  {
    "text": "so no they don't share a Malik right um the untrusted code has its own like Lipsy in untrusted memory and that sort",
    "start": "3466240",
    "end": "3473400"
  },
  {
    "text": "of just gets shipped with the SD okay and validated as well as the nexi module so if you were to call Malik you know",
    "start": "3473400",
    "end": "3478760"
  },
  {
    "text": "the untrusted module has its own stack its own Heap it's own everything is that",
    "start": "3478760",
    "end": "3485720"
  },
  {
    "text": "it okay thank you uh for coming to my talk",
    "start": "3486039",
    "end": "3493359"
  }
]