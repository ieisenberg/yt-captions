[
  {
    "text": "welcome to web application firewalls um analysis and detection log",
    "start": "80",
    "end": "5200"
  },
  {
    "text": "of detection logic with Vladimir Ivanov before we begin a few brief notes um",
    "start": "5200",
    "end": "10400"
  },
  {
    "text": "stop by the business Hall located at Bayside AB uh Black Cat Arsenal is in",
    "start": "10400",
    "end": "16039"
  },
  {
    "text": "the Palm fire level three uh and the Arsenal reception is going to be at 5:00",
    "start": "16039",
    "end": "21359"
  },
  {
    "text": "p.m. today uh if you have not picked any merchandise or t-shirts or books today",
    "start": "21359",
    "end": "26400"
  },
  {
    "text": "is the last day um you can stop by the black hat bookstore um and you can visit the Ki Linux uh lab",
    "start": "26400",
    "end": "33440"
  },
  {
    "text": "in Mandalay Bay a um U thank you for putting your phun in silence mode uh we",
    "start": "33440",
    "end": "39800"
  },
  {
    "text": "appreciate that and um please I give a warm welcome to Vladimir ianov thank",
    "start": "39800",
    "end": "46760"
  },
  {
    "text": "you check check um hello everyone thank you for joining the",
    "start": "49000",
    "end": "55878"
  },
  {
    "text": "session right my name is vadir ranov and in my presentation I will be talking",
    "start": "56199",
    "end": "61800"
  },
  {
    "text": "about new old methods which help me to teack replication firewalls um I will be discussing new",
    "start": "61800",
    "end": "67799"
  },
  {
    "text": "ways to implement own security approaches uh in finding security vulnerabilities I will be also releasing",
    "start": "67799",
    "end": "74080"
  },
  {
    "text": "some tools chit shits and recommendations but before get we get",
    "start": "74080",
    "end": "79119"
  },
  {
    "text": "started a little disclaimer um most of the attacks and breaches I will be",
    "start": "79119",
    "end": "84280"
  },
  {
    "text": "discussing are zero days so um due to the nature of the B passes and due to",
    "start": "84280",
    "end": "90320"
  },
  {
    "text": "the amount of affected rules they cannot be fixed in a shorter time um and as far",
    "start": "90320",
    "end": "95600"
  },
  {
    "text": "as I know some security teams have also have already patched their issues some",
    "start": "95600",
    "end": "101399"
  },
  {
    "text": "of them are working on the fix but um some uh flaws will not be fixed forever",
    "start": "101399",
    "end": "109640"
  },
  {
    "text": "uh so this presentation is aimed to bring attention to the design of detection",
    "start": "109640",
    "end": "116079"
  },
  {
    "text": "logic of web application fbls so the schedule for for 5 minutes is as follows",
    "start": "116079",
    "end": "122320"
  },
  {
    "text": "um we will be first discussing motivation and aims for detection logic researches from a high perspective and",
    "start": "122320",
    "end": "129119"
  },
  {
    "text": "we'll go pretty fast through the history of wolves and uh understanding how web application",
    "start": "129119",
    "end": "136640"
  },
  {
    "text": "firewalls work after that I will be describing three ways to attack web",
    "start": "136640",
    "end": "142519"
  },
  {
    "text": "application firewalls as you can see on the slide but one is something I call method of finding syntax based bypasses",
    "start": "142519",
    "end": "149560"
  },
  {
    "text": "in which I'm going to present a tool which consist with finding uh with finding flaws in regular",
    "start": "149560",
    "end": "157239"
  },
  {
    "text": "expression deduction logic um moving forward I will highlight",
    "start": "157239",
    "end": "162440"
  },
  {
    "text": "the method of finding logical bypasses and finally uh we'll go through the method",
    "start": "162440",
    "end": "168440"
  },
  {
    "text": "of finding unexpected by prologic bypasses you will get the idea what's that in my session",
    "start": "168440",
    "end": "175800"
  },
  {
    "text": "so let's get started by inspecting the standoff between the attackers and",
    "start": "175800",
    "end": "181159"
  },
  {
    "text": "Defenders when the typical attacker faces the web application which is protected by the web application",
    "start": "181159",
    "end": "187280"
  },
  {
    "text": "firewall he's doomed to try all possible evasion methods that he knows he has",
    "start": "187280",
    "end": "192760"
  },
  {
    "text": "ever read in blog posts or ever watched in YouTube to evade the filter uh that",
    "start": "192760",
    "end": "199640"
  },
  {
    "text": "said encoding payload upper casing lowering uh strengths inputting",
    "start": "199640",
    "end": "205440"
  },
  {
    "text": "characters in a various type of Pilots um Etc so in the like case if a bypass",
    "start": "205440",
    "end": "211519"
  },
  {
    "text": "is found he doesn't face the need to dig to the root cause of the problem and to",
    "start": "211519",
    "end": "217760"
  },
  {
    "text": "reported to the vendor um well on the other side Defenders very rarely analyze logs of",
    "start": "217760",
    "end": "224560"
  },
  {
    "text": "the application or application 5all um and hence they're helping attackers to",
    "start": "224560",
    "end": "230720"
  },
  {
    "text": "achieve the goal and so the attack will go undetected the irony behind this",
    "start": "230720",
    "end": "235920"
  },
  {
    "text": "Global standoff is that usually there is a single person person or likely group",
    "start": "235920",
    "end": "241720"
  },
  {
    "text": "of security uh Engineers who maintain those rules both sides rely on",
    "start": "241720",
    "end": "249200"
  },
  {
    "text": "so at the fact that it is very hard to maintain the rule set which another person has created um because they they",
    "start": "249200",
    "end": "258000"
  },
  {
    "text": "are maintained for years and you can not always correctly identify the intent of the first person who's written the first",
    "start": "258000",
    "end": "264520"
  },
  {
    "text": "rule before you uh all right so let's take a look at",
    "start": "264520",
    "end": "270680"
  },
  {
    "text": "the typical uh HTTP walk for example when the web application fiall is passed",
    "start": "270680",
    "end": "276280"
  },
  {
    "text": "between the application and the real world you can see five stages here and from the security perspective um four of",
    "start": "276280",
    "end": "283400"
  },
  {
    "text": "the stages are um are very well researched and they are common between",
    "start": "283400",
    "end": "289120"
  },
  {
    "text": "various implementations of application F but the only stage that differs is stage number four application of detection",
    "start": "289120",
    "end": "295360"
  },
  {
    "text": "logic here um so we're going to analyze that you can",
    "start": "295360",
    "end": "302960"
  },
  {
    "text": "see um some blue bubbles here these are types of detection logic currently",
    "start": "302960",
    "end": "308720"
  },
  {
    "text": "implemented in latest open source replication FS um so there are five types over there and also the names of",
    "start": "308720",
    "end": "315800"
  },
  {
    "text": "the application F Vols which are using that um you can see that the regular",
    "start": "315800",
    "end": "321000"
  },
  {
    "text": "expression based detection logic is the most popular implemented um type and I can find two",
    "start": "321000",
    "end": "328120"
  },
  {
    "text": "reasons behind that the first one is that is historical I mean the very first",
    "start": "328120",
    "end": "333440"
  },
  {
    "text": "application F was based on the on regular Expressions it was back in 1997 I think um another reason is that",
    "start": "333440",
    "end": "340919"
  },
  {
    "text": "regular expression are simply to understand so the mental Simplicity um human human beings like understand this",
    "start": "340919",
    "end": "350639"
  },
  {
    "text": "syntax right so um since the since the over overwhelming majority of",
    "start": "350639",
    "end": "357639"
  },
  {
    "text": "application firewalls uh use their expression detection logic I'm going to analyze that in first two",
    "start": "357639",
    "end": "363960"
  },
  {
    "text": "parts uh of my talk so anyone of you has ever written at least say um 10 regular",
    "start": "363960",
    "end": "370880"
  },
  {
    "text": "expressions in their life anyone or all right um someone uh so I",
    "start": "370880",
    "end": "379440"
  },
  {
    "text": "would just be skipping this quite uh this slide quite fast well regular expression is a sequence of chars that",
    "start": "379440",
    "end": "385520"
  },
  {
    "text": "Define a search pattern this is a quote from Wikipedia um and this simply means that there is a string defined of",
    "start": "385520",
    "end": "394120"
  },
  {
    "text": "different V cards and syntax which attempts to find the substring in the source text uh this is the very simple",
    "start": "394120",
    "end": "400720"
  },
  {
    "text": "example from one of ovas cor rule sets rules um which attempts to First for uh",
    "start": "400720",
    "end": "406919"
  },
  {
    "text": "attempts to search for HTML injections uh uh you can try to divide this whole",
    "start": "406919",
    "end": "412840"
  },
  {
    "text": "regular expression into three small blocks first one makes the all of the rest of regular expression case",
    "start": "412840",
    "end": "418560"
  },
  {
    "text": "insensitive second one searches for the open Breen script and third one is",
    "start": "418560",
    "end": "423840"
  },
  {
    "text": "anything after that um all",
    "start": "423840",
    "end": "429160"
  },
  {
    "text": "right uh so six open source web application FS of my personal top were",
    "start": "429160",
    "end": "437240"
  },
  {
    "text": "uh chosen as the main source of the research so I have just simply collected uh all those rules from all those",
    "start": "437240",
    "end": "443479"
  },
  {
    "text": "application Firs download downloaded that on my laptop and here we have more",
    "start": "443479",
    "end": "449599"
  },
  {
    "text": "than 500 regular Expressions uh as you can simply see there are almost",
    "start": "449599",
    "end": "454680"
  },
  {
    "text": "85 I'm sorry 85% of of regular Expressions which protect the user and",
    "start": "454680",
    "end": "460199"
  },
  {
    "text": "the server from SQL and cross script in taxs um just to give you an idea about",
    "start": "460199",
    "end": "467360"
  },
  {
    "text": "the research the results are as follows I have uh using all the tools I'll be",
    "start": "467360",
    "end": "472440"
  },
  {
    "text": "releasing I have found uh much more than 300 potential bypasses by potential here",
    "start": "472440",
    "end": "479039"
  },
  {
    "text": "I mean that is it is computationally hard to generate and to verify the",
    "start": "479039",
    "end": "484520"
  },
  {
    "text": "bypass for each rule so you can sometimes have to verify the bypass",
    "start": "484520",
    "end": "490639"
  },
  {
    "text": "manually all right so due to my personal practice I believe that some of the",
    "start": "493120",
    "end": "499680"
  },
  {
    "text": "inspected rules may have security flaws which which were caused by the syntax by",
    "start": "499680",
    "end": "505000"
  },
  {
    "text": "the covered syntax of regular expressions and they're inacurate and insecure use so um the main challenge",
    "start": "505000",
    "end": "512719"
  },
  {
    "text": "about finding flaws and regular Expressions here was the fact that um",
    "start": "512719",
    "end": "518919"
  },
  {
    "text": "the vely study by security Community web application firewalls which I me which which I mentioned at the previous slide",
    "start": "518919",
    "end": "525399"
  },
  {
    "text": "um with high security standards I believe that they don't have any flaws because they in open source on geop more",
    "start": "525399",
    "end": "532399"
  },
  {
    "text": "than 10 years um and so in order to find all possible and impossible mistakes T",
    "start": "532399",
    "end": "540000"
  },
  {
    "text": "that probably were in this rule set I had to um I had to find all the typical",
    "start": "540000",
    "end": "549120"
  },
  {
    "text": "problems that regular expression have and invent all the problems that I cannot face but I think they're are",
    "start": "549120",
    "end": "556519"
  },
  {
    "text": "there all right can I ask you dear audience uh to play the fast game which",
    "start": "556519",
    "end": "562440"
  },
  {
    "text": "is called what's wrong with regular expression um well actually there is a",
    "start": "562440",
    "end": "567519"
  },
  {
    "text": "regular expression which attempts to find attack p load in the get parameter a and if in case there is no attack p",
    "start": "567519",
    "end": "574839"
  },
  {
    "text": "load found it executes some very important function so can I ask you to",
    "start": "574839",
    "end": "580000"
  },
  {
    "text": "find three ways to bypass the struggle expression and so and execute a tech p",
    "start": "580000",
    "end": "587800"
  },
  {
    "text": "in the function can you name three of",
    "start": "587800",
    "end": "592120"
  },
  {
    "text": "them sorry uh yeah yes right so one one of",
    "start": "594240",
    "end": "600120"
  },
  {
    "text": "this um wrongs with the expression is that uh there is a quantifier one to three uh the the number of repetitions",
    "start": "600120",
    "end": "607680"
  },
  {
    "text": "in one to three so you can supply four this the string consisting of four attack Bel um attack Bel Bel belad um",
    "start": "607680",
    "end": "616480"
  },
  {
    "text": "things so yeah do know another one",
    "start": "616480",
    "end": "622760"
  },
  {
    "text": "sorry oh yeah right so yeah another one is uh I think I have it here oh all",
    "start": "623360",
    "end": "628760"
  },
  {
    "text": "right there that was a hint right the first one is that regular expression doesn't use doesn't use the case uh",
    "start": "628760",
    "end": "634839"
  },
  {
    "text": "modifier I and you can bypass the string by lower casing upper casing uh some of",
    "start": "634839",
    "end": "640360"
  },
  {
    "text": "the characters and the the obvious one here is to to use the modify another one",
    "start": "640360",
    "end": "646560"
  },
  {
    "text": "is uh some someone told that is to use white spaces before and after the regular expression in most syntaxes like",
    "start": "646560",
    "end": "654320"
  },
  {
    "text": "HTML or SQL the Y spaces don't break the syntax so you can bypass the regular expression and still execute the",
    "start": "654320",
    "end": "660800"
  },
  {
    "text": "malicious attack payload so the wrong here is not to use the symbol of the start and the end of the stream this",
    "start": "660800",
    "end": "667040"
  },
  {
    "text": "pretty of us and yeah and the the one which is which was already said is that uh the use of of repetitions is not very",
    "start": "667040",
    "end": "675839"
  },
  {
    "text": "good you have to verify manually whether that is better or not um another example",
    "start": "675839",
    "end": "683560"
  },
  {
    "text": "here um was found during my uh during observation of overp U",
    "start": "683560",
    "end": "693040"
  },
  {
    "text": "overp text and during my personal experience while reading the code so this first issue here is vable to attack",
    "start": "693040",
    "end": "700959"
  },
  {
    "text": "called Ros so regular regular expression denal of service the bad thing here is that attacker can construct the string",
    "start": "700959",
    "end": "707880"
  },
  {
    "text": "consist consisting of say 10 or 20 or more A's and I mean the letter a",
    "start": "707880",
    "end": "715040"
  },
  {
    "text": "and uh making the parts of regular expression",
    "start": "715040",
    "end": "720399"
  },
  {
    "text": "to calculate uh to apply this string to the regular expression uh a lot of times",
    "start": "720399",
    "end": "725920"
  },
  {
    "text": "I mean 2 power n so if you supply the strength of T that's 2 power 10 um that",
    "start": "725920",
    "end": "733399"
  },
  {
    "text": "can sometimes make uh the the uh the part of the regular expression to to",
    "start": "733399",
    "end": "740040"
  },
  {
    "text": "fail or to execute for a lot of time uh another another flaw or",
    "start": "740040",
    "end": "746079"
  },
  {
    "text": "particular wrong here is the use of uh of wild card s which is the whes",
    "start": "746079",
    "end": "751839"
  },
  {
    "text": "space and uh all of the new line symbols uh is the use of the modifier plus so",
    "start": "751839",
    "end": "759120"
  },
  {
    "text": "that basically means that you can bypass the regular expression by supplying zero spaces I mean a Cod B would bypass that",
    "start": "759120",
    "end": "764680"
  },
  {
    "text": "so you should work you should watch for repetition symbols another thing here is",
    "start": "764680",
    "end": "770320"
  },
  {
    "text": "blacklisting wild cards in a set is not also um a nice thing is you can bypass",
    "start": "770320",
    "end": "776560"
  },
  {
    "text": "the wild card you can bypass the Blacklist by using alternative symbols",
    "start": "776560",
    "end": "782760"
  },
  {
    "text": "uh so the new line character back sln um has an alternative of back SLR and this",
    "start": "782760",
    "end": "789560"
  },
  {
    "text": "can bypass the Blacklist right moving forward um",
    "start": "789560",
    "end": "795760"
  },
  {
    "text": "during while reading uh the documentations I thought that people can",
    "start": "795760",
    "end": "801399"
  },
  {
    "text": "make typos um for example while specifying the diapazone A to Z you can",
    "start": "801399",
    "end": "808160"
  },
  {
    "text": "basically um occasionally uppercase the letter A making this diapason not not",
    "start": "808160",
    "end": "816199"
  },
  {
    "text": "only from a to A to Z lower case A to Z upper case but that this diapazone also",
    "start": "816199",
    "end": "821800"
  },
  {
    "text": "includes six additional symbols such as opening bracket closing bracket back tick uh back slash I think another one",
    "start": "821800",
    "end": "829120"
  },
  {
    "text": "so this is not something the developer may want to allow in user input right um another example another issue",
    "start": "829120",
    "end": "836800"
  },
  {
    "text": "here is the wrong usage of Po six char classes uh in this example the Char",
    "start": "836800",
    "end": "841839"
  },
  {
    "text": "class was not uh followed and has not uh the starting colon here and this is not",
    "start": "841839",
    "end": "848560"
  },
  {
    "text": "the the PO charity class right now but it is simply the set of four charties",
    "start": "848560",
    "end": "854680"
  },
  {
    "text": "diig GT um next wrong which could be potentially faced while developing",
    "start": "854680",
    "end": "860519"
  },
  {
    "text": "regular expression is wrong usage of operators um you can developer can",
    "start": "860519",
    "end": "866800"
  },
  {
    "text": "occasionally uh put a wi space before after the logical or or he can supply",
    "start": "866800",
    "end": "874040"
  },
  {
    "text": "double operator doubling operator which can change the logic of regular expression and the last issue which I'm",
    "start": "874040",
    "end": "881199"
  },
  {
    "text": "going to describe is the usage of back slash with the Char after that for example back/ 11 here depending on the",
    "start": "881199",
    "end": "888079"
  },
  {
    "text": "context of the regular expression depending on the parer can be pared in several ways I mean that could be 11th",
    "start": "888079",
    "end": "895199"
  },
  {
    "text": "backlink back/ 11 or that could be uh the tabulation symbol I think that is",
    "start": "895199",
    "end": "902800"
  },
  {
    "text": "octal 0 X9 um back/ e is rarely used",
    "start": "902800",
    "end": "907959"
  },
  {
    "text": "Wild Card which is not actually documented in in very places and back SL",
    "start": "907959",
    "end": "914360"
  },
  {
    "text": "Q is simply a symbol Q with a with a backslash it's just simply escaping the symbol so you can not while watching the",
    "start": "914360",
    "end": "921360"
  },
  {
    "text": "reg expression you cannot say 100% what is that so you should",
    "start": "921360",
    "end": "926920"
  },
  {
    "text": "OverWatch all this um all this issues manually um all right so",
    "start": "926920",
    "end": "934600"
  },
  {
    "text": "when I was uh collecting all these potential bypasses and when the number",
    "start": "934600",
    "end": "939639"
  },
  {
    "text": "of uh the wrongs overgrow I think 20 or 25 I decided to collect them into the",
    "start": "939639",
    "end": "944759"
  },
  {
    "text": "table with detailed description uh examples and examples of bypasses and uh",
    "start": "944759",
    "end": "950880"
  },
  {
    "text": "that actually actually resulted uh in a in a",
    "start": "950880",
    "end": "957199"
  },
  {
    "text": "table which is open source on G c um I I will show you the link after this slide",
    "start": "957199",
    "end": "963079"
  },
  {
    "text": "and since I wanted to hack all the regular Expressions ah had on my laptop remember the web application file was",
    "start": "963079",
    "end": "969480"
  },
  {
    "text": "500 regular Expressions I coded a tool which can assist with static analysis of the code uh with as low low positives as",
    "start": "969480",
    "end": "978519"
  },
  {
    "text": "it could be um so here it is here is the link to the geub reg expression security",
    "start": "978519",
    "end": "983720"
  },
  {
    "text": "chit this is the table if someone of you who doesn't see all those small letters",
    "start": "983720",
    "end": "990920"
  },
  {
    "text": "I think you can just visit the link and download it um right and may I bring",
    "start": "990920",
    "end": "996600"
  },
  {
    "text": "your attention to your audience that if your day-to-day job is not connected to web application firewalls you may be",
    "start": "996600",
    "end": "1002639"
  },
  {
    "text": "still interested in that because not only wolves use regular expression for",
    "start": "1002639",
    "end": "1008199"
  },
  {
    "text": "for security protection but this is also used from the very high level cross side",
    "start": "1008199",
    "end": "1014040"
  },
  {
    "text": "scripting uh uh Auditors I mean filters in Internet Explorer for example down to",
    "start": "1014040",
    "end": "1020600"
  },
  {
    "text": "JavaScript functions on the front end down to um backend uh",
    "start": "1020600",
    "end": "1026240"
  },
  {
    "text": "code so um yeah I I just give quick demo",
    "start": "1026240",
    "end": "1031880"
  },
  {
    "text": "about the The Tool uh with example how you can use",
    "start": "1031880",
    "end": "1038760"
  },
  {
    "text": "that uh to find security fors here I just uh G clone the GitHub which I was",
    "start": "1038760",
    "end": "1046038"
  },
  {
    "text": "presenting um all right so this is a script written on PHP come on uh right",
    "start": "1046039",
    "end": "1054280"
  },
  {
    "text": "so it says that I should specify the file here and I already have",
    "start": "1054280",
    "end": "1062200"
  },
  {
    "text": "some uh some examples of of regular",
    "start": "1062200",
    "end": "1068160"
  },
  {
    "text": "regular Expressions here um right so let's take call rule set 2",
    "start": "1068160",
    "end": "1076159"
  },
  {
    "text": "dsql uh and use it as an input right Works done output file saved",
    "start": "1076159",
    "end": "1083799"
  },
  {
    "text": "here uh so it basically inputs Tes file as an input and it produc it produces an",
    "start": "1083799",
    "end": "1090520"
  },
  {
    "text": "output uh HTML file highlighting all the all the problems regular expression have",
    "start": "1090520",
    "end": "1096840"
  },
  {
    "text": "right can you see that um yeah so uh line one regular",
    "start": "1096840",
    "end": "1103559"
  },
  {
    "text": "expression from core rule set regular expression should avoid using mag characters for stand uh for the start",
    "start": "1103559",
    "end": "1109600"
  },
  {
    "text": "and the end of the string and this is highlight here um Regular expression is possibly vulnerable to Ros you should",
    "start": "1109600",
    "end": "1115480"
  },
  {
    "text": "verify that manually um right number set a group should be carefully used uh let",
    "start": "1115480",
    "end": "1122440"
  },
  {
    "text": "me show you another one uh this big regular expression is used for preventing from SQL injection attacks as",
    "start": "1122440",
    "end": "1128679"
  },
  {
    "text": "you can see here uh here from between the keywords from and where the regular",
    "start": "1128679",
    "end": "1135280"
  },
  {
    "text": "expression is attempts to find at least one between one and I'm sure if you can see",
    "start": "1135280",
    "end": "1141679"
  },
  {
    "text": "that between between one and 100 symbols but in case you specify more than 100",
    "start": "1141679",
    "end": "1147480"
  },
  {
    "text": "you can basically bypass uh this this not not the whole but this part of the",
    "start": "1147480",
    "end": "1152559"
  },
  {
    "text": "regular expression so um let's it um I know you all came here to watch how big",
    "start": "1152559",
    "end": "1157960"
  },
  {
    "text": "names in security are bypassed so um this is the rule from mode security call",
    "start": "1157960",
    "end": "1164400"
  },
  {
    "text": "rule set the latest version three race candidate um and",
    "start": "1164400",
    "end": "1169760"
  },
  {
    "text": "if someone tells me told told me before my research that I would bypass m",
    "start": "1169760",
    "end": "1175120"
  },
  {
    "text": "security with so with so easy in in a so easy way uh I wouldn't believe him",
    "start": "1175120",
    "end": "1181200"
  },
  {
    "text": "because uh there is mod security orc which has the scrip in verifying and",
    "start": "1181200",
    "end": "1186320"
  },
  {
    "text": "testing the user input um so you may specify HTTP uh colon double slashes AP",
    "start": "1186320",
    "end": "1193880"
  },
  {
    "text": "AP address and you will find the remot file inclusion in TCT here but when you uh upper case any of the symbols say t",
    "start": "1193880",
    "end": "1201600"
  },
  {
    "text": "it will not find an attack um so this is as simply as using um is understanding",
    "start": "1201600",
    "end": "1207520"
  },
  {
    "text": "that regular expression should have case mod uh case modifier I and it um well",
    "start": "1207520",
    "end": "1214480"
  },
  {
    "text": "commod of has um uh has some of uh rules which are uh",
    "start": "1214480",
    "end": "1222039"
  },
  {
    "text": "compatible with Mod security wolf and they're developing their own rule set um",
    "start": "1222039",
    "end": "1227120"
  },
  {
    "text": "and they simply take the call rule set for m security of or or as the basis and",
    "start": "1227120",
    "end": "1232600"
  },
  {
    "text": "it modified it slightly as you can see there um I'm sure if you can see that I'm sure they have a laser right um the",
    "start": "1232600",
    "end": "1240760"
  },
  {
    "text": "logic of the regular expression here was changed because of the additional back backs slash here and this regular",
    "start": "1240760",
    "end": "1248000"
  },
  {
    "text": "expression is not is not now searching for the onher events such on error on",
    "start": "1248000",
    "end": "1254000"
  },
  {
    "text": "load on Mouse over whatever but is now searching for the for for the opening",
    "start": "1254000",
    "end": "1259640"
  },
  {
    "text": "bracket a toz opening bracket a toz because of the because the logic of the regular expression has changed uh so",
    "start": "1259640",
    "end": "1266440"
  },
  {
    "text": "this blocks the the simple string which doesn't mean anything but doesn't block",
    "start": "1266440",
    "end": "1271480"
  },
  {
    "text": "the attack now um all right quick defense wol also thinks that attackers",
    "start": "1271480",
    "end": "1277240"
  },
  {
    "text": "are lazy enough not to include too much spaces between the keywords un select for in this uh in this example uh so I",
    "start": "1277240",
    "end": "1285799"
  },
  {
    "text": "mean this this is isue can not be found using",
    "start": "1285799",
    "end": "1290880"
  },
  {
    "text": "blackb analysis because I cannot imagine an attacker inputting like uh 99 spaces",
    "start": "1290880",
    "end": "1298320"
  },
  {
    "text": "100 spaces 101 pass um yeah so you can only find that during manual uh during",
    "start": "1298320",
    "end": "1305200"
  },
  {
    "text": "static analysis of the rules and this is the example which I found in one of the bu bounties while I was uh inspecting",
    "start": "1305200",
    "end": "1312880"
  },
  {
    "text": "the HTML code of the of the web page I found the following JavaScript function",
    "start": "1312880",
    "end": "1318279"
  },
  {
    "text": "which is which part of those is vulnerable to regular expression D of service and since you can",
    "start": "1318279",
    "end": "1325320"
  },
  {
    "text": "supply uh the email into this function uh so it will evaluate for a long of time you can simply attack any user and",
    "start": "1325320",
    "end": "1332799"
  },
  {
    "text": "when I tried the attack the to to face myself uh my browser simply crashed and",
    "start": "1332799",
    "end": "1338799"
  },
  {
    "text": "the tabs were gone because of the uh den of service and I thought what if uh I",
    "start": "1338799",
    "end": "1344520"
  },
  {
    "text": "would Supply the same email into the backend uh because developers don't do",
    "start": "1344520",
    "end": "1350559"
  },
  {
    "text": "not usually trust the user input data from the the JavaScript and they usually try to verify everything coming to the",
    "start": "1350559",
    "end": "1357360"
  },
  {
    "text": "back end using maybe same regular expression so I thought what if back end",
    "start": "1357360",
    "end": "1362679"
  },
  {
    "text": "is also vulnerable for the regular expression down of service um and I posted the same email and yeah it was so",
    "start": "1362679",
    "end": "1371080"
  },
  {
    "text": "I have occasionally then service the website through through the regular expression here um it's also nice",
    "start": "1371080",
    "end": "1379520"
  },
  {
    "text": "um right now I'm going to uh present you uh the regular expression which is used",
    "start": "1379520",
    "end": "1385720"
  },
  {
    "text": "in uh all versions I think of Internet Explorer family I mean the beginning",
    "start": "1385720",
    "end": "1391600"
  },
  {
    "text": "from age uh beginning from Internet Explorer 8 I think until the age uh 12 or 13 Here regular expression uh looks",
    "start": "1391600",
    "end": "1399520"
  },
  {
    "text": "pretty nice but I think you can spot the the floor here can you",
    "start": "1399520",
    "end": "1408960"
  },
  {
    "text": "um all right I'll be talking about that uh so this has uh this attempts to",
    "start": "1409279",
    "end": "1416080"
  },
  {
    "text": "search for the word in followed by any symbol one or more time because the plus",
    "start": "1416080",
    "end": "1421240"
  },
  {
    "text": "is one or more uh followed by the opening bracket anything after the closing bracket so if you will supply",
    "start": "1421240",
    "end": "1427000"
  },
  {
    "text": "the string which marches sping uh open and closing brackets will be substituted with a hashtag sign and the the tech",
    "start": "1427000",
    "end": "1433559"
  },
  {
    "text": "will not happen uh the filter will will block that but as far as We Know now",
    "start": "1433559",
    "end": "1439480"
  },
  {
    "text": "repetition in symbols using Plus in repetitions instead of as which means",
    "start": "1439480",
    "end": "1444520"
  },
  {
    "text": "zero or more is not good idea so if you will supply zero spaces or zero chares",
    "start": "1444520",
    "end": "1450520"
  },
  {
    "text": "between the word in and the opening bracket uh it will result a byass as simple as",
    "start": "1450520",
    "end": "1456080"
  },
  {
    "text": "that so uh this works in uh age 12 or 13 I think so this is the screen of the",
    "start": "1456080",
    "end": "1463120"
  },
  {
    "text": "latest um of the latest filter uh of the browser yeah and this is one of this is",
    "start": "1463120",
    "end": "1470200"
  },
  {
    "text": "actually my favorite uh my favorite floor which I found in M secur first",
    "start": "1470200",
    "end": "1476640"
  },
  {
    "text": "then I found the same error in PHP ideas I found the same error in the previous version of m security version 2 can you",
    "start": "1476640",
    "end": "1483200"
  },
  {
    "text": "spot the mistake here I think you",
    "start": "1483200",
    "end": "1487398"
  },
  {
    "text": "can yeah there is a wide space after the word not uh this struggle expression is",
    "start": "1488240",
    "end": "1493520"
  },
  {
    "text": "simply searching for between white space one or more time character and white",
    "start": "1493520",
    "end": "1499000"
  },
  {
    "text": "space one more Char not white space the second white space and the charer so it",
    "start": "1499000",
    "end": "1504679"
  },
  {
    "text": "simply attempts to find two white spaces between the n and the Char and could be simply bypassed with these in one white",
    "start": "1504679",
    "end": "1510080"
  },
  {
    "text": "space well when I went to dig the root cause um I found the page on the geub",
    "start": "1510080",
    "end": "1515840"
  },
  {
    "text": "reference into 2008 actually eight years ago uh and I found the initial Comet",
    "start": "1515840",
    "end": "1520919"
  },
  {
    "text": "which changed the logic of the of the regular expression and there was a white space included",
    "start": "1520919",
    "end": "1527159"
  },
  {
    "text": "here uh um and I have evidence that after since the rule writers those times",
    "start": "1527159",
    "end": "1534000"
  },
  {
    "text": "were not very Wen experts in all the kinds of attacks they copy pasted or",
    "start": "1534000",
    "end": "1540399"
  },
  {
    "text": "inherited the rules from each other and input into their W uh as soon as found",
    "start": "1540399",
    "end": "1545559"
  },
  {
    "text": "the same issue I mean the not the white space into phps most secure version two most SEC version three uh and some of",
    "start": "1545559",
    "end": "1551880"
  },
  {
    "text": "the other w i can name um can you imagine how many wolves else developing",
    "start": "1551880",
    "end": "1557640"
  },
  {
    "text": "after 20 10 have copy pasted the rules from all those big names I mean what secur and PHP",
    "start": "1557640",
    "end": "1563760"
  },
  {
    "text": "IDs um so yeah that's that's pretty interesting think I I think um right",
    "start": "1563760",
    "end": "1572000"
  },
  {
    "text": "what's next you can tell me Vladimir all right you can you can you can try to find flaws and regular Expressions uh I",
    "start": "1572000",
    "end": "1578960"
  },
  {
    "text": "mean they can be a lot of but what can you do with them uh well well I can answer that you can identify V vendor",
    "start": "1578960",
    "end": "1585679"
  },
  {
    "text": "and version using signature vulnerabilities uh so this is simply it's supplying not two white spaces",
    "start": "1585679",
    "end": "1591679"
  },
  {
    "text": "character see whether the B blocked and not white space not one space Char see where it is not blocked so you can",
    "start": "1591679",
    "end": "1597880"
  },
  {
    "text": "identify the family um after that you can reveal bypasses depending on a situation say you have SQ injection",
    "start": "1597880",
    "end": "1604520"
  },
  {
    "text": "where this particular payload uh and you have the bypass for the particular payload but this is not very likely",
    "start": "1604520",
    "end": "1611120"
  },
  {
    "text": "right and the the most interesting thing is you can try to craft the string which",
    "start": "1611120",
    "end": "1616520"
  },
  {
    "text": "bypasses all rules of all all regular expressions of the current rule set so I'm just going to show you how to bypass",
    "start": "1616520",
    "end": "1623399"
  },
  {
    "text": "the m security Lotus version 3 so given the simple given the simple injection into",
    "start": "1623399",
    "end": "1629840"
  },
  {
    "text": "the string parameter ID here um you can craft the following um the following",
    "start": "1629840",
    "end": "1635880"
  },
  {
    "text": "text or the string uh and it bypasses all rules based on regular expressions",
    "start": "1635880",
    "end": "1641159"
  },
  {
    "text": "of mul version VI I mean the latest version uh but the mode security uses",
    "start": "1641159",
    "end": "1646799"
  },
  {
    "text": "lib injection for detection of um es injection attacks and that",
    "start": "1646799",
    "end": "1652240"
  },
  {
    "text": "Library detects this attack here well that is good enough but not not enough",
    "start": "1652240",
    "end": "1658159"
  },
  {
    "text": "so we're going to dig deeper and find the universal bypass right all right I",
    "start": "1658159",
    "end": "1663279"
  },
  {
    "text": "would just be I would just go through that pretty fast the method two of loog",
    "start": "1663279",
    "end": "1668360"
  },
  {
    "text": "finding logical bypasses during manual manual review analysis is has been here",
    "start": "1668360",
    "end": "1673720"
  },
  {
    "text": "for ages um so I was just skipping that pretty fast just to mention in the",
    "start": "1673720",
    "end": "1679360"
  },
  {
    "text": "contribution well The Blacklist is always a fail because",
    "start": "1679360",
    "end": "1685399"
  },
  {
    "text": "um as far as researchers go they can identify new vulnerabilties new",
    "start": "1685399",
    "end": "1691240"
  },
  {
    "text": "vulnerabilities W creators didn't think of so this is the screenshot from the",
    "start": "1691240",
    "end": "1696320"
  },
  {
    "text": "elastic search I think one of the latest versions um and it is vulnerable to HTP response splitting due to due to usage",
    "start": "1696320",
    "end": "1703159"
  },
  {
    "text": "of the Native web server um yeah and uh so the",
    "start": "1703159",
    "end": "1708760"
  },
  {
    "text": "the vulnerability here uh a second the vulnerability exists because after the",
    "start": "1708760",
    "end": "1715200"
  },
  {
    "text": "new after the new line symbol you have to input either the white space or the tabulation and uh so the heater is a bit",
    "start": "1715200",
    "end": "1723519"
  },
  {
    "text": "modified but this is not an issue for Internet Explorer where you can you you",
    "start": "1723519",
    "end": "1728840"
  },
  {
    "text": "can adjust that HTP response and execute any code after that and if mod Security",
    "start": "1728840",
    "end": "1734399"
  },
  {
    "text": "will be protecting uh the elastic search uh front end or I mean the API it will",
    "start": "1734399",
    "end": "1740440"
  },
  {
    "text": "not detect the attack here because it is searching for new line symbol followed by any of the heroes and it is not",
    "start": "1740440",
    "end": "1746519"
  },
  {
    "text": "searching for the white space or or a tabulation uh there are you can find",
    "start": "1746519",
    "end": "1753679"
  },
  {
    "text": "lots of bypasses uh while bypassing um The Blacklist so this is not anything",
    "start": "1753679",
    "end": "1759679"
  },
  {
    "text": "you um yeah also wanted to emphasize that researchers succeed and Ma ahed I'm",
    "start": "1759679",
    "end": "1766679"
  },
  {
    "text": "not sure if he's here listen to me well he has um he had the vi paper saying",
    "start": "1766679",
    "end": "1772519"
  },
  {
    "text": "that there is some udfa bypassing Internet Explorer uh of the older versions seven or eight or nine I think",
    "start": "1772519",
    "end": "1780000"
  },
  {
    "text": "and the mod security wrote The Following Rule and you can bypass that also while doing a bit more research after the",
    "start": "1780000",
    "end": "1786720"
  },
  {
    "text": "research yeah and you all know like like Blacklist fail all right yeah um method",
    "start": "1786720",
    "end": "1793880"
  },
  {
    "text": "three unexpected by Primal logic bypass by that method I mean",
    "start": "1793880",
    "end": "1799440"
  },
  {
    "text": "finding um finding such logic which finding such types of uh injections",
    "start": "1799440",
    "end": "1807120"
  },
  {
    "text": "which did not exist in the brain of the rule writer or the maker of detection",
    "start": "1807120",
    "end": "1813039"
  },
  {
    "text": "logic um the way how you're going to do that is of course fuzzing I'm not I'm",
    "start": "1813039",
    "end": "1818960"
  },
  {
    "text": "not inventing here anything new but right you can write EXs fer you can uh",
    "start": "1818960",
    "end": "1824039"
  },
  {
    "text": "you can make a lot of virtual machines on your or whatever it is uh you can uh",
    "start": "1824039",
    "end": "1831159"
  },
  {
    "text": "use all the browser emulating websites where you can test your P out payload in",
    "start": "1831159",
    "end": "1836919"
  },
  {
    "text": "the web browser um you can try to insert various symbols into different types of",
    "start": "1836919",
    "end": "1843240"
  },
  {
    "text": "the payload you can run various tests you can collect all the data from from",
    "start": "1843240",
    "end": "1848760"
  },
  {
    "text": "the research you can collect uh the user agents to after to par the all and to",
    "start": "1848760",
    "end": "1854240"
  },
  {
    "text": "find which symbols are allowed in which user input which browser um well the I'm",
    "start": "1854240",
    "end": "1861279"
  },
  {
    "text": "not like discovering America here also but I can show that it can be pretty fast and you can discover new attacks",
    "start": "1861279",
    "end": "1868679"
  },
  {
    "text": "that may be could not detected by any application firewall for example the Microsoft in Explorer version 9 allows",
    "start": "1868679",
    "end": "1875840"
  },
  {
    "text": "Nob symbol in any types of the payload I mean you can write it any times you want",
    "start": "1875840",
    "end": "1880960"
  },
  {
    "text": "in in everywhere I mean in the middle of the starting uh of the tag name for",
    "start": "1880960",
    "end": "1886600"
  },
  {
    "text": "example and that could could go undetected in the modc version too which is by default can be downloaded from the",
    "start": "1886600",
    "end": "1892919"
  },
  {
    "text": "modc repository all right here but lib injection back to that lib injection is",
    "start": "1892919",
    "end": "1900159"
  },
  {
    "text": "the library which was first presented oh I'm not sure about first but which was presented here on blackhead um four",
    "start": "1900159",
    "end": "1906360"
  },
  {
    "text": "years ago I believe by Nick and the approach behind that is that it converts",
    "start": "1906360",
    "end": "1913000"
  },
  {
    "text": "any input string into the sequence of tokens um of length five",
    "start": "1913000",
    "end": "1918559"
  },
  {
    "text": "uh so it does convert all the string parameters into a string token un",
    "start": "1918559",
    "end": "1923600"
  },
  {
    "text": "keywords like Union or select into the uh key key toins of U and S um and after",
    "start": "1923600",
    "end": "1931039"
  },
  {
    "text": "that when the string is converted uh the library is able to identify whether it",
    "start": "1931039",
    "end": "1936240"
  },
  {
    "text": "is the malicious SQL payload or not how is it doing that I mean how do you blacklist all",
    "start": "1936240",
    "end": "1942000"
  },
  {
    "text": "those all those tokens um well Nick has uh has collected all various types of",
    "start": "1942000",
    "end": "1949399"
  },
  {
    "text": "escal injection attempts from vulnerability scanners publish reports forums um some close GES uh and so one",
    "start": "1949399",
    "end": "1959159"
  },
  {
    "text": "when I accessed the GitHub of lib injection last time I mean a b about a week ago uh there were almost 9,000",
    "start": "1959159",
    "end": "1967799"
  },
  {
    "text": "blacklisted tokens which are deemed as isq injection if you input uh the string",
    "start": "1967799",
    "end": "1974519"
  },
  {
    "text": "into the lib injection um how how you are going to discover all of those",
    "start": "1974519",
    "end": "1981639"
  },
  {
    "text": "unusual syntax which going to work on the SQL backand and which will not be",
    "start": "1981639",
    "end": "1987519"
  },
  {
    "text": "which will not be detected by the library um well it's pretty simple you can fuz it um yeah it just receives this",
    "start": "1987519",
    "end": "1994279"
  },
  {
    "text": "SQL queries input is going to f it using various libraries myql and Native library of MySQL you can use um the SQ",
    "start": "1994279",
    "end": "2002240"
  },
  {
    "text": "API do from um I believe this commercial library but it can be used for some time",
    "start": "2002240",
    "end": "2008600"
  },
  {
    "text": "um and you should record all the queries except synx errors to identify whether",
    "start": "2008600",
    "end": "2015960"
  },
  {
    "text": "the payload your fing is working or not um yeah and I can say that's that's",
    "start": "2015960",
    "end": "2021480"
  },
  {
    "text": "pretty pretty fast on my virtual machine uh which was running just one",
    "start": "2021480",
    "end": "2028200"
  },
  {
    "text": "core of processor of the CPU and about one um uh gigabyte of",
    "start": "2028200",
    "end": "2034240"
  },
  {
    "text": "the uh of the memory uh the speed was about 9,000 ques per second uh but my",
    "start": "2034240",
    "end": "2041360"
  },
  {
    "text": "scale can go up faster up to 1 million or or more um so this is the example of",
    "start": "2041360",
    "end": "2048079"
  },
  {
    "text": "the fuzzing binary which is uh so the",
    "start": "2048079",
    "end": "2053158"
  },
  {
    "text": "first screenshot measures the time of the executive of this binary and I'm",
    "start": "2053159",
    "end": "2058480"
  },
  {
    "text": "input it in uh and I'm using select XXX from something as input uh and it is f",
    "start": "2058480",
    "end": "2064800"
  },
  {
    "text": "in three characters between select between the keyword select and the and one so it has worked about 40 seconds or",
    "start": "2064800",
    "end": "2072679"
  },
  {
    "text": "30 38 it could be much faster anyway and here in this 38 seconds I have found 13",
    "start": "2072679",
    "end": "2081240"
  },
  {
    "text": "total unique vectors which are bypasses for lib injection you can see some of the some of the examples of this vectors",
    "start": "2081240",
    "end": "2088000"
  },
  {
    "text": "here and the lib in lib injection token which is uh in the left column uh so all",
    "start": "2088000",
    "end": "2095679"
  },
  {
    "text": "these examples about proces for lib injection uh let's construct so after we",
    "start": "2095679",
    "end": "2102000"
  },
  {
    "text": "have all the theory after we have all the examples let's let's construct such",
    "start": "2102000",
    "end": "2109640"
  },
  {
    "text": "tokens that can bypass it uh as you can see uh let's choose the token breaker",
    "start": "2109640",
    "end": "2115839"
  },
  {
    "text": "this one um as as a token breaker for the tokenizer uh so when the select",
    "start": "2115839",
    "end": "2122680"
  },
  {
    "text": "select one from test is blocked you can use the token breaker to to go attack",
    "start": "2122680",
    "end": "2128720"
  },
  {
    "text": "and detected so um that means that using the everything",
    "start": "2128720",
    "end": "2134760"
  },
  {
    "text": "after the token breaker can can can be written without any detection for example you can use Auto band load file",
    "start": "2134760",
    "end": "2141720"
  },
  {
    "text": "function or anything you like and you also can use your simple Union based SQL",
    "start": "2141720",
    "end": "2148480"
  },
  {
    "text": "injection in in uh if you have the token breaker here it said Union select token",
    "start": "2148480",
    "end": "2154000"
  },
  {
    "text": "breaker after that password uh credit card number cvd from users",
    "start": "2154000",
    "end": "2160720"
  },
  {
    "text": "database un know select everything off that that could be that that going to be undetected here yeah and the biggest",
    "start": "2160720",
    "end": "2168720"
  },
  {
    "text": "contribution I believe is um is as a result of this work is the table of the",
    "start": "2168720",
    "end": "2176960"
  },
  {
    "text": "of the results uh here I have uh used this here",
    "start": "2176960",
    "end": "2182319"
  },
  {
    "text": "have I have several runs of of the of the C++ FASA on several backends say MyQ",
    "start": "2182319",
    "end": "2188800"
  },
  {
    "text": "mq on this slide um and I have pass some injection points uh some minus one",
    "start": "2188800",
    "end": "2196280"
  },
  {
    "text": "Union you have um allowed symbols shown in the table select one you have number",
    "start": "2196280",
    "end": "2202240"
  },
  {
    "text": "of allowed symbols which you can use and when another time when you face the web application firewall and you believe",
    "start": "2202240",
    "end": "2208839"
  },
  {
    "text": "that you can bypass it but you don't want to to to write your own F you",
    "start": "2208839",
    "end": "2214359"
  },
  {
    "text": "didn't want to waste time on finding that or maybe if you the rule writer you want to uh you want",
    "start": "2214359",
    "end": "2221200"
  },
  {
    "text": "to understand which symbols are allowed in which injection point you can use this table to to maintain your",
    "start": "2221200",
    "end": "2228839"
  },
  {
    "text": "rules um all right so I'm pretty close to the end uh I'm just wanted to once",
    "start": "2228839",
    "end": "2235800"
  },
  {
    "text": "again repeat the the contribution here um the in the first method show that",
    "start": "2235800",
    "end": "2242359"
  },
  {
    "text": "regular expression security cheat sheet is possible to write and now it is live you can",
    "start": "2242359",
    "end": "2248160"
  },
  {
    "text": "I uh and I I have also qu it the static analysis tool um which you can run",
    "start": "2248160",
    "end": "2254119"
  },
  {
    "text": "through through your regular Expressions uh Blacklist Improvement and this fer classifi tables please access my GitHub",
    "start": "2254119",
    "end": "2261040"
  },
  {
    "text": "to download that all and as a part of future work I encourage everyone interested in in that kind of research",
    "start": "2261040",
    "end": "2268160"
  },
  {
    "text": "and that parts of it to contact me to evaluate new techniques and improve all",
    "start": "2268160",
    "end": "2274440"
  },
  {
    "text": "the all the tools we have uh well regular expression security chat is",
    "start": "2274440",
    "end": "2282040"
  },
  {
    "text": "is is is needs to be constantly updated because um well I didn't do this on my",
    "start": "2282040",
    "end": "2288920"
  },
  {
    "text": "only own I involved several um colleagues of mine uh to do that but I",
    "start": "2288920",
    "end": "2295280"
  },
  {
    "text": "mean two or three people canot cover all possible uh all possible evion techniques all possible",
    "start": "2295280",
    "end": "2302400"
  },
  {
    "text": "flaws of reg expression so I really appreciate if you will contact me and we're going to",
    "start": "2302400",
    "end": "2308119"
  },
  {
    "text": "make a new poll request and um and constantly update that um well the",
    "start": "2308119",
    "end": "2315079"
  },
  {
    "text": "regular Dynamic analysis tool is also a really important thing because using",
    "start": "2315079",
    "end": "2321079"
  },
  {
    "text": "static analysis tool simply watching at the source cord of uh of your um as your Source cord is not enough to",
    "start": "2321079",
    "end": "2329839"
  },
  {
    "text": "find all possible mistakes and you can not understand what is what what the part of synx you on so um I going to do",
    "start": "2329839",
    "end": "2337480"
  },
  {
    "text": "do that also in the future time uh the third thing is clever fuzing uh that",
    "start": "2337480",
    "end": "2343599"
  },
  {
    "text": "said what I mean by clever uh is not using only one input into into one",
    "start": "2343599",
    "end": "2350280"
  },
  {
    "text": "injection but also using several inputs to find constructions which are not very obvious to detect and to to find out uh",
    "start": "2350280",
    "end": "2357359"
  },
  {
    "text": "this can help to discover uh un usual syntax of uh databases to to pwn the web",
    "start": "2357359",
    "end": "2365000"
  },
  {
    "text": "application five walls um I mean F such as select um I don't know one comma",
    "start": "2365000",
    "end": "2371960"
  },
  {
    "text": "function opening bracket something inside it um comma closing brackets",
    "start": "2371960",
    "end": "2377599"
  },
  {
    "text": "something like that um yeah and scale it because my scale allows one up to 1 million queries I mean things go can go",
    "start": "2377599",
    "end": "2384560"
  },
  {
    "text": "really fast and um you can find lots of interesting",
    "start": "2384560",
    "end": "2390079"
  },
  {
    "text": "things here all right so thank you all all of those people mentioned on the",
    "start": "2390079",
    "end": "2395240"
  },
  {
    "text": "slide thank you to your audience for listening for that presentation on once again thank you",
    "start": "2395240",
    "end": "2402960"
  }
]