[
  {
    "text": "good morning welcome to breaking encrypted databases generic attacks and",
    "start": "0",
    "end": "5100"
  },
  {
    "text": "range queries in lagune GHI with Marie Sarah Allah showed each a before you",
    "start": "5100",
    "end": "11010"
  },
  {
    "text": "begin a few brief notes stop by the business hall located in Mandalay Bay",
    "start": "11010",
    "end": "16340"
  },
  {
    "text": "Oceanside and shoreline ballrooms on level 2 the blackhat arsenal is in the",
    "start": "16340",
    "end": "22020"
  },
  {
    "text": "business hall on level 2 lunch is in Bayside a B from 1:00 to 2:30",
    "start": "22020",
    "end": "27869"
  },
  {
    "text": "don't forget the merchandise store is on level 2 and session recordings from s ok",
    "start": "27869",
    "end": "33329"
  },
  {
    "text": "they have a desk on every level thank you for putting your phone on vibrate it",
    "start": "33329",
    "end": "38700"
  },
  {
    "text": "makes it easier for the rest of us so ignore the ringing while you wait for your voicemail to pick it up please use",
    "start": "38700",
    "end": "44460"
  },
  {
    "text": "the microphone and the aisles for any questions following the talk and with that let us welcome our speaker thank",
    "start": "44460",
    "end": "54510"
  },
  {
    "text": "you so first a little bit about me",
    "start": "54510",
    "end": "60809"
  },
  {
    "text": "my background is in mathematics and I'm a researcher in cryptography I studied math at the University of",
    "start": "60809",
    "end": "66360"
  },
  {
    "text": "Waterloo in Canada then went on to do a PhD at Royal Holloway in the UK I'm now working as a security consultant with",
    "start": "66360",
    "end": "72689"
  },
  {
    "text": "NCC group cryptography services in New York my PhD thesis is about building and",
    "start": "72689",
    "end": "78240"
  },
  {
    "text": "breaking encrypted search schemes for numeric data and that's what I'm going to talk to you about today two attacks",
    "start": "78240",
    "end": "84150"
  },
  {
    "text": "on my colleagues and I developed and analyzed during my PhD studies the",
    "start": "84150",
    "end": "90390"
  },
  {
    "text": "motivation for my research is data breaches thousands if not millions of organizations store our sensitive",
    "start": "90390",
    "end": "97170"
  },
  {
    "text": "information whether that's medical financial or personal here's a selection",
    "start": "97170",
    "end": "102180"
  },
  {
    "text": "of data breaches and the number of Records compromised from just this year data breaches have become so common that",
    "start": "102180",
    "end": "108479"
  },
  {
    "text": "there are now services like have I been poned that will check if your email or user ID appeared in the latest leak I",
    "start": "108479",
    "end": "116030"
  },
  {
    "text": "like thinking about whether we could use cryptography to make these leaks less harmful while keeping whatever",
    "start": "116030",
    "end": "121890"
  },
  {
    "text": "functionality is needed on the stored data the reasons it was stored in the first place for example is there a way",
    "start": "121890",
    "end": "127710"
  },
  {
    "text": "to encrypt medical records so that policymakers can still efficiently query the data to look for trends and make",
    "start": "127710",
    "end": "133050"
  },
  {
    "text": "this but someone who runs off with the disk on which it's stored gets nothing but useless encrypted data or maybe a",
    "start": "133050",
    "end": "139799"
  },
  {
    "text": "curious data center employee doesn't get access to the data even though their sysadmin on the database server I'm",
    "start": "139799",
    "end": "146189"
  },
  {
    "text": "interested in both creating and attacking these special cryptographic techniques but of course since this is",
    "start": "146189",
    "end": "151439"
  },
  {
    "text": "blackhat I'll focus on the attacks today I'll tell you how leakage from encrypted databases can be exploited by an",
    "start": "151439",
    "end": "158159"
  },
  {
    "text": "adversary I'm going to introduce these",
    "start": "158159",
    "end": "164400"
  },
  {
    "text": "encrypted database attacks by telling you about them through a lens you might be more familiar with side-channel attacks these are attacks that exploit",
    "start": "164400",
    "end": "171989"
  },
  {
    "text": "vulnerabilities in the implementations of algorithms or protocols not the designs of the algorithms or protocols",
    "start": "171989",
    "end": "178290"
  },
  {
    "text": "themselves for example if two parties are communicating a side-channel could be the voice of their the voice in which",
    "start": "178290",
    "end": "186389"
  },
  {
    "text": "they're talking the identities of the two parties how long the message is or",
    "start": "186389",
    "end": "191970"
  },
  {
    "text": "the volume of the conversation or when it happens and of course if these two",
    "start": "191970",
    "end": "198750"
  },
  {
    "text": "parties are machines there are many other side channels like power consumption electromagnetic radiation",
    "start": "198750",
    "end": "204359"
  },
  {
    "text": "memory usage CPU usage cache solutions and so on what's leaked through these",
    "start": "204359",
    "end": "209729"
  },
  {
    "text": "side channels can reveal information about the actual message contents or if cryptography is involved something about",
    "start": "209729",
    "end": "215790"
  },
  {
    "text": "the secret key so for example there have been side channel attacks on keystroke",
    "start": "215790",
    "end": "222120"
  },
  {
    "text": "recovery from timing information in interactive SSH mode there's been video",
    "start": "222120",
    "end": "227459"
  },
  {
    "text": "stream identification based solely on traffic burst analysis of an encrypted video stream and a classic cryptographic",
    "start": "227459",
    "end": "234569"
  },
  {
    "text": "side channel you can use error messages about whether or not a ciphertext decrypts to have correct padding or not",
    "start": "234569",
    "end": "241379"
  },
  {
    "text": "to actually decrypt that ciphertext what we think about as side channel attacks",
    "start": "241379",
    "end": "247919"
  },
  {
    "text": "actually have a lot in common with attacks on encrypted databases they're all about exploiting leakage or",
    "start": "247919",
    "end": "253229"
  },
  {
    "text": "unintentional information leaks from communication between two parties and",
    "start": "253229",
    "end": "259409"
  },
  {
    "text": "encrypt a database attacks the two parties are at client who queries its data to retrieve particular records or",
    "start": "259409",
    "end": "265409"
  },
  {
    "text": "rows based on their value and a database server who's hosting the data this briefing is about new kinds of",
    "start": "265409",
    "end": "275550"
  },
  {
    "text": "side-channel attacks that can break database encryption they exploit leakage from numeric range queries like which records have values",
    "start": "275550",
    "end": "282419"
  },
  {
    "text": "between 1 and 5 between the client and database server these attacks exploit",
    "start": "282419",
    "end": "289770"
  },
  {
    "text": "what we call access pattern leakage or which rows in the database match the query and volume leakage which is how",
    "start": "289770",
    "end": "296400"
  },
  {
    "text": "many rows match the query the attacks use this leakage to break encryption even if everything in the database is",
    "start": "296400",
    "end": "303000"
  },
  {
    "text": "encrypted an adversary can figure out if the plaintext can figure out the plaintext if these side channels exist",
    "start": "303000",
    "end": "309650"
  },
  {
    "text": "so I'll start with an overview of existing approaches to securing out source databases that allow range",
    "start": "309650",
    "end": "315030"
  },
  {
    "text": "queries these will cover different scenarios like trusting the database server but not the network or trusting",
    "start": "315030",
    "end": "321330"
  },
  {
    "text": "the database server but being worried about the risk of disk threat disk theft or not trusting the database server then",
    "start": "321330",
    "end": "329610"
  },
  {
    "text": "we'll get to the attacks I'll explain how exploiting this leakage can lead to breaking encryption in the databases",
    "start": "329610",
    "end": "335210"
  },
  {
    "text": "finally I'll share what I think are important points for practitioners to consider when evaluating such schemes",
    "start": "335210",
    "end": "341039"
  },
  {
    "text": "for their organizations here again is",
    "start": "341039",
    "end": "347490"
  },
  {
    "text": "our basic architecture we have a client on the left and a database server on the right the server storing a database",
    "start": "347490",
    "end": "355500"
  },
  {
    "text": "which you can picture as just a table with two columns the first column is the primary key which is unique for all rows",
    "start": "355500",
    "end": "362010"
  },
  {
    "text": "here we just assume it's sequential for simplicity the second column is the value a number between 1 and n which is",
    "start": "362010",
    "end": "369599"
  },
  {
    "text": "the attribute that the client is going to select rows on for example in a medical database ID could be some kind",
    "start": "369599",
    "end": "375840"
  },
  {
    "text": "of anonymized patient identifier and value could be the patient's age for instance the table could have more",
    "start": "375840",
    "end": "381960"
  },
  {
    "text": "columns but for this setting we assume the client always queries records based on just this one and the type of queries",
    "start": "381960",
    "end": "391199"
  },
  {
    "text": "the client makes is range queries it always retrieves records based on whether their value falls in some",
    "start": "391199",
    "end": "397139"
  },
  {
    "text": "continuous numeric range like 1 through 5 if you're familiar with sequel this",
    "start": "397139",
    "end": "403460"
  },
  {
    "text": "would be a query of the form select star from table where value between x and y the two end points of the range but the",
    "start": "403460",
    "end": "411590"
  },
  {
    "text": "particular query language or database engine isn't important as long as two things hold first the client always",
    "start": "411590",
    "end": "417710"
  },
  {
    "text": "makes range queries over some finite set of values which we can assume is the integers from 1 to N and second that the",
    "start": "417710",
    "end": "424310"
  },
  {
    "text": "database server always correctly returns the IDS of rows whose values fall in",
    "start": "424310",
    "end": "429440"
  },
  {
    "text": "that range securing data is all about",
    "start": "429440",
    "end": "435140"
  },
  {
    "text": "understanding the threat model historically protecting queries and results from a network eavesdropper was",
    "start": "435140",
    "end": "440750"
  },
  {
    "text": "the first step the client and server can protect their communications by encrypting them we know how to do this",
    "start": "440750",
    "end": "447320"
  },
  {
    "text": "we have TLS the client and server can use that for authentication and negotiating a session key to encrypt the",
    "start": "447320",
    "end": "453260"
  },
  {
    "text": "queries and responses so anyone who sees the packets doesn't know what the query was or which records in the database",
    "start": "453260",
    "end": "458930"
  },
  {
    "text": "matched it but of course encrypting data on the wire doesn't protect against everything",
    "start": "458930",
    "end": "464480"
  },
  {
    "text": "as people began to outsource their data to the cloud or Big Data Centers they had to update their threat models to",
    "start": "464480",
    "end": "470990"
  },
  {
    "text": "account for the risk of disks theft which as we saw before actually still happens in real world encryption at the",
    "start": "470990",
    "end": "479960"
  },
  {
    "text": "file system level or column level addresses this issue suppose the client wants to query its data usually the",
    "start": "479960",
    "end": "485780"
  },
  {
    "text": "process goes like this it uses TLS to encrypt its query and sends it to the server the server decrypt it consults",
    "start": "485780",
    "end": "492530"
  },
  {
    "text": "its search index and fetches the relevant encrypted pages from disk it decrypts them in memory processes the",
    "start": "492530",
    "end": "498770"
  },
  {
    "text": "results re-encrypt them and sends them back to the client whatever is on disk stays encrypted the entire time so even",
    "start": "498770",
    "end": "505760"
  },
  {
    "text": "if someone breaks in and grabs the hard drive they won't see unencrypted data pretty",
    "start": "505760",
    "end": "512300"
  },
  {
    "text": "much all major database vendors offer some variant of this usually called transparent data encryption or native",
    "start": "512300",
    "end": "517880"
  },
  {
    "text": "encryption these solutions usually don't have any noticeable effect on performance the server can still index",
    "start": "517880",
    "end": "523789"
  },
  {
    "text": "the plaintext data so range queries can be answered efficiently some of these solutions also offer more granular field",
    "start": "523790",
    "end": "530060"
  },
  {
    "text": "level encryption like format preserving encryption or tokenization but the data encryption he is usually still managed by the",
    "start": "530060",
    "end": "536900"
  },
  {
    "text": "server in a key store attached to the server hopefully not on the same disk as the data itself but even if the data",
    "start": "536900",
    "end": "545330"
  },
  {
    "text": "encryption key isn't stored on the same disk as the data it's often accessible to curious database administrators sis",
    "start": "545330",
    "end": "551600"
  },
  {
    "text": "admin's or anyone who gained such permissions to prevent a full database server system compromise from revealing",
    "start": "551600",
    "end": "557630"
  },
  {
    "text": "this stored data it needs to be encrypted by the client itself or via proxy before it even gets to the server",
    "start": "557630",
    "end": "565750"
  },
  {
    "text": "but if the data stays encrypted the whole time how can it possibly be queried to me this is the problem with",
    "start": "565750",
    "end": "572030"
  },
  {
    "text": "the most interesting solutions not only because they ensure the database doesn't see raw unencrypted data but because",
    "start": "572030",
    "end": "577850"
  },
  {
    "text": "there are some really cool techniques that allow efficiently retrieving that data in industry these solutions are",
    "start": "577850",
    "end": "583340"
  },
  {
    "text": "usually called client-side field level encryption instead of being in a key store attached to the database server",
    "start": "583340",
    "end": "589220"
  },
  {
    "text": "the data encryption keys are entirely controlled by the client such solutions",
    "start": "589220",
    "end": "595820"
  },
  {
    "text": "are offered for instance by Microsoft and they're always encrypted products which offers field level encryption in",
    "start": "595820",
    "end": "600980"
  },
  {
    "text": "client-side drivers or MongoDB is upcoming for point to release also companies like cipher cloud offer",
    "start": "600980",
    "end": "606830"
  },
  {
    "text": "encryption proxies usually these client-side encryption solutions offer",
    "start": "606830",
    "end": "613760"
  },
  {
    "text": "only two types of encryption deterministic and randomized let's take a closer look at these two types and",
    "start": "613760",
    "end": "620030"
  },
  {
    "text": "then a third type called order preserving encryption as we'll see one of these leaks repetition in the plain",
    "start": "620030",
    "end": "626180"
  },
  {
    "text": "texts and makes range queries possible but inefficient one of them is secure but doesn't support range queries at all",
    "start": "626180",
    "end": "633020"
  },
  {
    "text": "and one leaks order but makes range queries as efficient as on plain text so",
    "start": "633020",
    "end": "640330"
  },
  {
    "text": "deterministic encryption is probably the most widely used way to support queries on encrypted data since it leaks",
    "start": "640330",
    "end": "647120"
  },
  {
    "text": "equality but it doesn't offer much more functionality than that only exact matches with deterministic encryption",
    "start": "647120",
    "end": "653660"
  },
  {
    "text": "any repeated plaintext values show up as repeated ciphertext values in this",
    "start": "653660",
    "end": "658880"
  },
  {
    "text": "example each row that had a value of 0 will have the exact same ciphertext",
    "start": "658880",
    "end": "664900"
  },
  {
    "text": "this makes range queries possible instead of requesting all rep with values between zero and three the",
    "start": "664900",
    "end": "671019"
  },
  {
    "text": "client can request all records whose values are in the set of encryptions of zero or one or two or three",
    "start": "671019",
    "end": "676859"
  },
  {
    "text": "although range queries are possible the fact remains that any repetitions in the plaintext will show up in the ciphertext",
    "start": "676859",
    "end": "683019"
  },
  {
    "text": "and this can be exploited when combined with just a little information about what the distribution of values actually",
    "start": "683019",
    "end": "689350"
  },
  {
    "text": "is these attacks were evaluated on medical data sets by Naveed Perot and Wright and many others after with",
    "start": "689350",
    "end": "699970"
  },
  {
    "text": "randomized encryption the server can't index the data or group values using randomized encryption would make all",
    "start": "699970",
    "end": "705939"
  },
  {
    "text": "encryptions of zero different but then the server would have no way to select all of the records with value 0 order",
    "start": "705939",
    "end": "714459"
  },
  {
    "text": "preserving encryption is another method of encrypting numeric data which does exactly what it sounds like if the",
    "start": "714459",
    "end": "720040"
  },
  {
    "text": "plaintext a is less than the plaintext B then the ciphertext for a will be less than the ciphertext for B this allows",
    "start": "720040",
    "end": "726220"
  },
  {
    "text": "range queries and sorting over the cipher texts if the client encrypts",
    "start": "726220",
    "end": "731439"
  },
  {
    "text": "values with ope before sending them to the server the server can still index the data just as if it was clear text",
    "start": "731439",
    "end": "738449"
  },
  {
    "text": "unencrypted but it doesn't learn the exact values when the client wants to perform a range query all it has to do",
    "start": "738449",
    "end": "745239"
  },
  {
    "text": "is encrypt the endpoints of that range so for example a query for records with values between 0 and 15 would become a",
    "start": "745239",
    "end": "751569"
  },
  {
    "text": "range query for cipher text between say 84 and 23:07 unfortunately it was proven",
    "start": "751569",
    "end": "759819"
  },
  {
    "text": "that even an ideal order preserving encryption scheme the one that behaves like any old random order preserving",
    "start": "759819",
    "end": "766209"
  },
  {
    "text": "function has to leak a lot more than just the order of to plain texts in",
    "start": "766209",
    "end": "771279"
  },
  {
    "text": "particular about half of the plaintext bits leaked and therefore this doesn't",
    "start": "771279",
    "end": "776709"
  },
  {
    "text": "offer much security especially when the scheme is deterministic and additionally leaks which values are repeated this motivated",
    "start": "776709",
    "end": "784389"
  },
  {
    "text": "new schemes that sacrifice a little bit less security while still allowing range queries and sorting these include",
    "start": "784389",
    "end": "793839"
  },
  {
    "text": "techniques like order revealing encryption which is just a generalization of order preserving encryption instead of directly looking",
    "start": "793839",
    "end": "800259"
  },
  {
    "text": "at the cipher text to compare them you need to compute a function over each pair of cipher texts to know which one",
    "start": "800259",
    "end": "805720"
  },
  {
    "text": "is smaller and there are other schemes that do more complicated things like build search index that the server can",
    "start": "805720",
    "end": "811690"
  },
  {
    "text": "traverse itself destroying nodes along the way as it goes these schemes leak a lot less than ope but they still leak",
    "start": "811690",
    "end": "818920"
  },
  {
    "text": "something now suppose you combine all of",
    "start": "818920",
    "end": "823930"
  },
  {
    "text": "these types of encryption you encrypt the queries and responses between the client and server you encrypt data at",
    "start": "823930",
    "end": "829660"
  },
  {
    "text": "the page level and you have the client encrypt everything before even sending it to the server what could still leak to the adversary",
    "start": "829660",
    "end": "836650"
  },
  {
    "text": "via side channels well the server needs to know which records match the query in",
    "start": "836650",
    "end": "843580"
  },
  {
    "text": "order to return the correct results so the identifier of the records that match the query in other words the access",
    "start": "843580",
    "end": "851890"
  },
  {
    "text": "pattern can leech seconds even though the client surfer traffic is encrypted",
    "start": "851890",
    "end": "857220"
  },
  {
    "text": "there's no hiding its length so the number of records that matched each query can also leave we call this volume",
    "start": "857220",
    "end": "864490"
  },
  {
    "text": "leakage the key point is that regardless",
    "start": "864490",
    "end": "870279"
  },
  {
    "text": "of which fancy encryption or combination of types of encryption is used practically all schemes leak which",
    "start": "870279",
    "end": "877750"
  },
  {
    "text": "records match the query or how many records matched it how exactly this leaks can vary it could be from some one",
    "start": "877750",
    "end": "884560"
  },
  {
    "text": "man in the middling the responses from the database to the client it could be getting access to logs for undos and",
    "start": "884560",
    "end": "890709"
  },
  {
    "text": "redos or query profiling on the server or it could be from an adversary just observing traffic volume for an in-depth",
    "start": "890709",
    "end": "899529"
  },
  {
    "text": "look at where such leakage can arise in the exam in the case of a my sequel server I recommend my colleagues paper",
    "start": "899529",
    "end": "905230"
  },
  {
    "text": "why your encrypted database is not secure it's an important question to extract this leakage and exactly how to",
    "start": "905230",
    "end": "913089"
  },
  {
    "text": "do it but it's orthogonal to what I'll present today I'm gonna focus on what we can learn once we have this leakage in",
    "start": "913089",
    "end": "921100"
  },
  {
    "text": "this first part we saw various ways to secure a database encrypting the connections between the client and",
    "start": "921100",
    "end": "927250"
  },
  {
    "text": "server protects against eavesdroppers server-side file system level encryption mitigates disks EFT and client-side",
    "start": "927250",
    "end": "934360"
  },
  {
    "text": "encryption of data can data entirely inaccessible even to the",
    "start": "934360",
    "end": "939519"
  },
  {
    "text": "database admin but even when all of",
    "start": "939519",
    "end": "949360"
  },
  {
    "text": "these protections are used some information still leaks now we come to",
    "start": "949360",
    "end": "955029"
  },
  {
    "text": "attacks on leakage from range queries on an encrypted database as you recall",
    "start": "955029",
    "end": "961689"
  },
  {
    "text": "here's the model the client makes a range query whose endpoints are hidden sends it to the server the server finds",
    "start": "961689",
    "end": "967839"
  },
  {
    "text": "the matching rows and then sends back the matching row IDs to the client somehow some way the adversary learns",
    "start": "967839",
    "end": "974860"
  },
  {
    "text": "what those row IDs are it learns which records match the query so what can it",
    "start": "974860",
    "end": "980920"
  },
  {
    "text": "do s-- about values in the database range queries have some pretty important",
    "start": "980920",
    "end": "987339"
  },
  {
    "text": "properties let's look at an example consider this database with ten records suppose the first range query matches",
    "start": "987339",
    "end": "994360"
  },
  {
    "text": "records two three five and ten and then",
    "start": "994360",
    "end": "1000509"
  },
  {
    "text": "there's a second range query and the adversary learns it matched rows 1 2 4 5 & 8 the adversary has actually already",
    "start": "1000509",
    "end": "1007439"
  },
  {
    "text": "learned something range queries are continuous intervals since records 2 & 5",
    "start": "1007439",
    "end": "1012629"
  },
  {
    "text": "were matched by both queries their values must be between the values of records 3 & 10 on one side and 1 4 & 8",
    "start": "1012629",
    "end": "1019410"
  },
  {
    "text": "on the other side let's take a closer look the adversary knows there are 10",
    "start": "1019410",
    "end": "1024808"
  },
  {
    "text": "records after observing two queries it can split the records into four sets based on whether they matched either",
    "start": "1024809",
    "end": "1031230"
  },
  {
    "text": "query 1 or 2 or both or neither since each query has a corresponding range of",
    "start": "1031230",
    "end": "1037288"
  },
  {
    "text": "values and the intersection of two ranges is also a continuous range we can actually order 3 of the sets of records",
    "start": "1037289",
    "end": "1044010"
  },
  {
    "text": "like this the adversary can deduce that records 3 & 10 have values less than",
    "start": "1044010",
    "end": "1049080"
  },
  {
    "text": "records 2 & 5 which have values less than records 1 4 & 8 it hasn't learned",
    "start": "1049080",
    "end": "1054210"
  },
  {
    "text": "anything about records 6 9 6 7 & 9 yet one way to use this is for example",
    "start": "1054210",
    "end": "1061110"
  },
  {
    "text": "suppose the adversary happens to learn through some other side channel the value of record - then",
    "start": "1061110",
    "end": "1066600"
  },
  {
    "text": "and learned some bits of information about the values of Records 1 3 4 8 and 10 as the adversary observes more",
    "start": "1066600",
    "end": "1073919"
  },
  {
    "text": "queries they can keep performing these set intersections to group together the records and sort them by value but",
    "start": "1073919",
    "end": "1080340"
  },
  {
    "text": "there's an easier way there's already a data structure we can use to encode the information in Access pattern leakage",
    "start": "1080340",
    "end": "1087000"
  },
  {
    "text": "it's called a PQ tree and it was discovered nearly 45 years ago the idea of using a PQ tree to order records in a",
    "start": "1087000",
    "end": "1093870"
  },
  {
    "text": "database isn't new but it was never used to actually reconstruct the values like we're doing a PQ tree has two types of",
    "start": "1093870",
    "end": "1101400"
  },
  {
    "text": "notes P nodes and Q notes its purpose is to encode a set of orderings on some",
    "start": "1101400",
    "end": "1108030"
  },
  {
    "text": "base set here 1 2 & 3 the children of P",
    "start": "1108030",
    "end": "1113159"
  },
  {
    "text": "nodes can be reordered in any way for example if a P node has 3 children than",
    "start": "1113159",
    "end": "1118350"
  },
  {
    "text": "there are 3 factorial or 6 possible orderings of its children the children",
    "start": "1118350",
    "end": "1125159"
  },
  {
    "text": "of a Q node on the other hand can only be reflected there are only two possible orderings of its children we're going to",
    "start": "1125159",
    "end": "1132450"
  },
  {
    "text": "use PQ trees to keep track of what are the possible orderings of the records based on the access pattern linkage once",
    "start": "1132450",
    "end": "1139620"
  },
  {
    "text": "we have them in as many groups as there are possible values we'll have worked out the exact value of every row in the",
    "start": "1139620",
    "end": "1146220"
  },
  {
    "text": "database going back to the example with",
    "start": "1146220",
    "end": "1152010"
  },
  {
    "text": "10 records we'd start with a single P node with 10 children all orderings are possible since we haven't observed any",
    "start": "1152010",
    "end": "1158460"
  },
  {
    "text": "access pattern linkage after seeing the first query we essentially need to",
    "start": "1158460",
    "end": "1164190"
  },
  {
    "text": "rearrange the items in the PQ tree so that the records that matched it are next to each other so the tree gets a",
    "start": "1164190",
    "end": "1171990"
  },
  {
    "text": "new child P node with the four records that matched as its children after the",
    "start": "1171990",
    "end": "1179700"
  },
  {
    "text": "second query we again need to rearrange the leaves so that the ones matching the query are next to each other now things",
    "start": "1179700",
    "end": "1187679"
  },
  {
    "text": "go get more interesting a Q node appears it has three children one for one for",
    "start": "1187679",
    "end": "1193110"
  },
  {
    "text": "each group of records that match only the first query one for the group of records that matched both the first and",
    "start": "1193110",
    "end": "1198900"
  },
  {
    "text": "second query and one for those that matched only the second query the three records that haven't matched any queries our children",
    "start": "1198900",
    "end": "1205500"
  },
  {
    "text": "of the root P node as we see more queries we can keep reducing the number",
    "start": "1205500",
    "end": "1212160"
  },
  {
    "text": "of orderings in the PQ tree using the access pattern leakage the procedure",
    "start": "1212160",
    "end": "1217560"
  },
  {
    "text": "procedure to do this is a bit tedious with lots of cases so I won't present the details what's happening again is",
    "start": "1217560",
    "end": "1224670"
  },
  {
    "text": "that we need to rearrange the nodes of the PQ tree so that whatever leaves matched are continuous and all of the",
    "start": "1224670",
    "end": "1232260"
  },
  {
    "text": "orderings encoded in this tree they're next to each other after a while with",
    "start": "1232260",
    "end": "1239670"
  },
  {
    "text": "enough different queries we end up with a PQ tree that has a Q node at the root what this means is that we figured out",
    "start": "1239670",
    "end": "1247020"
  },
  {
    "text": "the order of all the records from smallest to largest or largest to smallest the Q nodes children are groups",
    "start": "1247020",
    "end": "1253740"
  },
  {
    "text": "of records with the same value if two records have the same value then they have to match exactly the same set of",
    "start": "1253740",
    "end": "1259140"
  },
  {
    "text": "queries there can't be a range query that matches one of these records but not the other and now we actually have",
    "start": "1259140",
    "end": "1265440"
  },
  {
    "text": "enough information to determine the value of every record the first group is",
    "start": "1265440",
    "end": "1270450"
  },
  {
    "text": "record with value 1 the second group is records with value 2 and so on the",
    "start": "1270450",
    "end": "1277080"
  },
  {
    "text": "adversary can completely reconstruct all values in the database now you might be",
    "start": "1277080",
    "end": "1282300"
  },
  {
    "text": "wondering how many queries does the adversary need to see to get the leakage of to get this far clearly if it sees",
    "start": "1282300",
    "end": "1289410"
  },
  {
    "text": "likud from only one query repeated over and over and over again the attack isn't gonna succeed to analyze how many",
    "start": "1289410",
    "end": "1295230"
  },
  {
    "text": "queries are necessary we need to assume that the queries the adversary sees are",
    "start": "1295230",
    "end": "1300450"
  },
  {
    "text": "sampled from some fixed distribution say the uniform distribution every range is just as likely as every other range then",
    "start": "1300450",
    "end": "1308850"
  },
  {
    "text": "we can apply some powerful results from statistical learning theory to say that with high probability after some number",
    "start": "1308850",
    "end": "1314490"
  },
  {
    "text": "of queries the attack will succeed specifically if the rows if the values",
    "start": "1314490",
    "end": "1320370"
  },
  {
    "text": "in each rows can have one of n possible values in other words if our goal is to get a PQ tree consisting of one Q node",
    "start": "1320370",
    "end": "1327420"
  },
  {
    "text": "with n children then the number of required queries is about n log M",
    "start": "1327420",
    "end": "1332690"
  },
  {
    "text": "so if there are a hundred possible values then after about five hundred queries the attack will succeed so for",
    "start": "1332690",
    "end": "1338720"
  },
  {
    "text": "instance if we're doing this attack on a database of patient ages it would take about this many if queries are chosen",
    "start": "1338720",
    "end": "1344510"
  },
  {
    "text": "uniformly at random to determine every patient's age now if you were paying",
    "start": "1344510",
    "end": "1349880"
  },
  {
    "text": "close attention you might have noticed that this approach relies on there being at least one record with every value",
    "start": "1349880",
    "end": "1355640"
  },
  {
    "text": "from 1 to n but we can actually adopt the analysis to count how many queries",
    "start": "1355640",
    "end": "1361550"
  },
  {
    "text": "are required if all we want to do is get sorted groups of records whose values are close enough",
    "start": "1361550",
    "end": "1366890"
  },
  {
    "text": "this applies when there isn't at least one record with each of the values from 1 to n for this kind of approximate",
    "start": "1366890",
    "end": "1374180"
  },
  {
    "text": "reconstruction the number of required queries no longer depends on n it depends only on how close you want the",
    "start": "1374180",
    "end": "1380450"
  },
  {
    "text": "values to be relative to n which to me seems a bit magical for example to group",
    "start": "1380450",
    "end": "1385670"
  },
  {
    "text": "together records whose values are at most 5% apart you need only 60 or so queries regardless of whether that 5% is",
    "start": "1385670",
    "end": "1392810"
  },
  {
    "text": "of N equals 50 or N equals 500 or n equals 5,000 this attack showed how",
    "start": "1392810",
    "end": "1400460"
  },
  {
    "text": "access pattern leakage is sufficient to order all records and group them by value from which we can deduce the value",
    "start": "1400460",
    "end": "1406430"
  },
  {
    "text": "of every single row in the database by passing the encryption it uses a PQ tree",
    "start": "1406430",
    "end": "1411560"
  },
  {
    "text": "to encode the leakage along the way even without the leakage from sufficiently many queries to exactly determine the",
    "start": "1411560",
    "end": "1417980"
  },
  {
    "text": "values it's possible to approximately recover the values and if you want more",
    "start": "1417980",
    "end": "1423080"
  },
  {
    "text": "details have a look at my paper access pattern is pretty significant leakage",
    "start": "1423080",
    "end": "1429290"
  },
  {
    "text": "and in your threat model maybe it doesn't leak to the adversary volume leakage on the other hands can be",
    "start": "1429290",
    "end": "1434870"
  },
  {
    "text": "observed more easily you don't need to be a persistent adversary whose compromised a database server to know",
    "start": "1434870",
    "end": "1440150"
  },
  {
    "text": "how many records match the query even a network adversary could have access to",
    "start": "1440150",
    "end": "1445850"
  },
  {
    "text": "this side channel just by monitoring network traffic but of course the number",
    "start": "1445850",
    "end": "1451250"
  },
  {
    "text": "of records matching each quarry could leak in some other way in server side log files for instance there are plenty",
    "start": "1451250",
    "end": "1457940"
  },
  {
    "text": "of settings where an adversary can't see access pattern leakage but it can see volume leakage suppose that somehow",
    "start": "1457940",
    "end": "1466520"
  },
  {
    "text": "some way the adversary learns how many records match every possible range query",
    "start": "1466520",
    "end": "1471620"
  },
  {
    "text": "it has the entire set of possible query volumes it doesn't know which query",
    "start": "1471620",
    "end": "1476960"
  },
  {
    "text": "corresponds to which volume it just sees the volumes it's going to use these volumes to determine exactly how many",
    "start": "1476960",
    "end": "1483740"
  },
  {
    "text": "records there are with each value in the database if the query distribution can be modeled it's possible to figure out",
    "start": "1483740",
    "end": "1489950"
  },
  {
    "text": "again how many queries a network adversary would need to observe before it gets all volumes I'll say more about",
    "start": "1489950",
    "end": "1495590"
  },
  {
    "text": "that later so whether it's by observing",
    "start": "1495590",
    "end": "1502160"
  },
  {
    "text": "queries or finding some valuable log file on the server the adversary learns the set of all possible query volumes",
    "start": "1502160",
    "end": "1508510"
  },
  {
    "text": "let R be the maximum observed volume this has to be the volume of the entire",
    "start": "1508510",
    "end": "1513710"
  },
  {
    "text": "range 1 through n also the number of rows in the database the idea of our",
    "start": "1513710",
    "end": "1520160"
  },
  {
    "text": "attack is to identify what we call elementary volumes among the set of all volumes elementary volumes are the",
    "start": "1520160",
    "end": "1527480"
  },
  {
    "text": "volumes of elementary ranges which are the ranges from 1 to 1 1 to 2 1 2 3 and",
    "start": "1527480",
    "end": "1532610"
  },
  {
    "text": "so on up to 1 to n if we can identify which volumes correspond to the",
    "start": "1532610",
    "end": "1539720"
  },
  {
    "text": "elementary queries then we can deduce exactly how many records have each value",
    "start": "1539720",
    "end": "1544900"
  },
  {
    "text": "just subtract the volume of the case elementary query from the k plus first elementary query and you get the number",
    "start": "1544900",
    "end": "1551570"
  },
  {
    "text": "of records with value k plus 1 the attack succeeds if we identify the set",
    "start": "1551570",
    "end": "1557690"
  },
  {
    "text": "of elementary volumes so this is now our goal elementary volumes and ranges have",
    "start": "1557690",
    "end": "1564890"
  },
  {
    "text": "some pretty special properties first every elementary range has a complimentary query such that the sum of",
    "start": "1564890",
    "end": "1573170"
  },
  {
    "text": "their volumes is exactly our the total number of rows in the database this is",
    "start": "1573170",
    "end": "1578990"
  },
  {
    "text": "because any elementary range 1 through I there exists the query 1 plus I through",
    "start": "1578990",
    "end": "1586520"
  },
  {
    "text": "n and their volumes have to add up to R so every elementary range is are",
    "start": "1586520",
    "end": "1592630"
  },
  {
    "text": "complemented we can send second any possible range with any two endpoints",
    "start": "1592630",
    "end": "1599330"
  },
  {
    "text": "either is an elementary range or is a difference of elementary ranges if the",
    "start": "1599330",
    "end": "1605299"
  },
  {
    "text": "left endpoint is one it's an elementary range by definition if not we can write it as the difference of two elementary",
    "start": "1605299",
    "end": "1611360"
  },
  {
    "text": "ranges like you see on the screen and the third property is that the",
    "start": "1611360",
    "end": "1617210"
  },
  {
    "text": "difference of any two elementary ranges is also a range so the difference of any",
    "start": "1617210",
    "end": "1623570"
  },
  {
    "text": "two elementary volumes also has to be an observed volume we're going to build a",
    "start": "1623570",
    "end": "1634640"
  },
  {
    "text": "graph to identify these elementary volumes using the three properties along the way first",
    "start": "1634640",
    "end": "1641270"
  },
  {
    "text": "the nodes of the graph are all of the observed volumes next we'll draw an edge",
    "start": "1641270",
    "end": "1651140"
  },
  {
    "text": "between any two nodes if the difference of their volumes was also an observed volume in this example there's no edge",
    "start": "1651140",
    "end": "1657530"
  },
  {
    "text": "between 12 and 8 because their difference four was not an observed volume the crucial observation is that",
    "start": "1657530",
    "end": "1665210"
  },
  {
    "text": "in this graph there will be a sub graph of the elementary volumes their nodes in",
    "start": "1665210",
    "end": "1672110"
  },
  {
    "text": "this graph will form a clique which is a sub set of nodes that are all directly",
    "start": "1672110",
    "end": "1677780"
  },
  {
    "text": "connected to one another this is a maximally connected sub set of nodes and",
    "start": "1677780",
    "end": "1682910"
  },
  {
    "text": "this is because of property 3 the difference of any two elementary ranges is also arranged so there must be edges",
    "start": "1682910",
    "end": "1690440"
  },
  {
    "text": "between every pair of elementary volumes further the volumes generated by that",
    "start": "1690440",
    "end": "1697850"
  },
  {
    "text": "clique the volumes of the nodes themselves and the differences of volumes which we can assign to the edges",
    "start": "1697850",
    "end": "1703130"
  },
  {
    "text": "have to generate the entire set of all volumes this is because of the second property every range either is an",
    "start": "1703130",
    "end": "1710120"
  },
  {
    "text": "elementary range or is a difference of two elementary ranges so using these",
    "start": "1710120",
    "end": "1715640"
  },
  {
    "text": "properties of range queries we build a graph using the observed volumes the properties mean that if we find it click",
    "start": "1715640",
    "end": "1722030"
  },
  {
    "text": "and it generates all volumes we've identified the elementary volumes from which we can reconstruct all element",
    "start": "1722030",
    "end": "1728720"
  },
  {
    "text": "counts in the database so all we have to do is find a clique in this graph and we're done",
    "start": "1728720",
    "end": "1733910"
  },
  {
    "text": "but in general if you remember some graph theory this is a pretty hard problem however we can use some tricks",
    "start": "1733910",
    "end": "1739460"
  },
  {
    "text": "to find a clique efficiently in most cases our reconstruction algorithm has",
    "start": "1739460",
    "end": "1745640"
  },
  {
    "text": "two phases pre-processing and more traditional clique finding which isn't always needed so I won't talk about it",
    "start": "1745640",
    "end": "1751670"
  },
  {
    "text": "much specifically in the first phase",
    "start": "1751670",
    "end": "1756880"
  },
  {
    "text": "pre-processing what we'll do is grow a set of necessary elementary volumes and",
    "start": "1756880",
    "end": "1762850"
  },
  {
    "text": "shrink a set of candidate elementary volumes until they're the same set in which case we've identified the set of",
    "start": "1762850",
    "end": "1769490"
  },
  {
    "text": "elementary volumes will do this by alternating reducing the set of candidate volumes and augmenting the set",
    "start": "1769490",
    "end": "1776300"
  },
  {
    "text": "of necessary volumes so let's do an example here's our starting graph each",
    "start": "1776300",
    "end": "1781700"
  },
  {
    "text": "volume gets a node and there's an edge between two nodes if the difference of their volumes was also an observed",
    "start": "1781700",
    "end": "1786740"
  },
  {
    "text": "volume to start all the nodes are candidate elementary volumes in green",
    "start": "1786740",
    "end": "1792040"
  },
  {
    "text": "now first we'll reduce the set of candidates using property 1 any node",
    "start": "1792040",
    "end": "1797150"
  },
  {
    "text": "that doesn't have an our complimentary volume is out of a candidate set so for",
    "start": "1797150",
    "end": "1802790"
  },
  {
    "text": "example volume 5 has no complement because there was no arranged quarry with volume 15 so 5 is out of the set of",
    "start": "1802790",
    "end": "1811100"
  },
  {
    "text": "candidate elementary volumes next we can",
    "start": "1811100",
    "end": "1819290"
  },
  {
    "text": "build up the set of necessary elementary volumes by adding the smallest and largest complementary volumes the",
    "start": "1819290",
    "end": "1826340"
  },
  {
    "text": "largest must be the total number of records are the volume of the range 1 through n an elementary range by",
    "start": "1826340",
    "end": "1832940"
  },
  {
    "text": "definition and because of properties of elementary ranges the smallest complimented volume must also be an",
    "start": "1832940",
    "end": "1839270"
  },
  {
    "text": "elementary volume then we go back to pruning the candidate set we can remove",
    "start": "1839270",
    "end": "1844940"
  },
  {
    "text": "all nodes that aren't adjacent to all necessary elementary volumes in orange since we're looking for a clique and",
    "start": "1844940",
    "end": "1851450"
  },
  {
    "text": "every node is adjacent to every other node in a clique so maybe you can see",
    "start": "1851450",
    "end": "1857480"
  },
  {
    "text": "the clique now but we'll do one more step if we go back to augmenting the set",
    "start": "1857480",
    "end": "1862850"
  },
  {
    "text": "of necessary volumes v was an observed volume and it in only one way in the current graph as",
    "start": "1862850",
    "end": "1869660"
  },
  {
    "text": "the difference between the volumes 12 and 17 an edge between two candidate",
    "start": "1869660",
    "end": "1875390"
  },
  {
    "text": "volumes that aren't yet necessary since every volume is either an elementary",
    "start": "1875390",
    "end": "1882380"
  },
  {
    "text": "volume or the difference of two elementary volumes and we observed volume five this means 12 and 17 must be",
    "start": "1882380",
    "end": "1890360"
  },
  {
    "text": "elementary volumes and now we're done",
    "start": "1890360",
    "end": "1899720"
  },
  {
    "text": "all nodes are necessary and we can see that these four nodes generate the entire set of observed volumes so to",
    "start": "1899720",
    "end": "1913130"
  },
  {
    "text": "exploit volume leakage we first built a graph using all of the observed volumes we use properties of range queries to",
    "start": "1913130",
    "end": "1920420"
  },
  {
    "text": "identify the special elementary volumes which form a clique then we use the",
    "start": "1920420",
    "end": "1925790"
  },
  {
    "text": "elementary volumes to directly reconstruct all counts in the database",
    "start": "1925790",
    "end": "1931600"
  },
  {
    "text": "with only volume leakage it's impossible to know whether we've recovered element counts from smallest to largest or",
    "start": "1931600",
    "end": "1937580"
  },
  {
    "text": "largest to smallest if the element counts were mirrored we'd still see the exact same set of volumes so what we've",
    "start": "1937580",
    "end": "1944360"
  },
  {
    "text": "constructed is actually the counts of all elements in a database up to reflection one last thing I said I'd",
    "start": "1944360",
    "end": "1953660"
  },
  {
    "text": "come back to how many range queries do we need to observe to get the complete set of all range volumes to analyze this",
    "start": "1953660",
    "end": "1961640"
  },
  {
    "text": "we need to model the query distribution somehow so suppose all ranges are equally likely then we can apply what's",
    "start": "1961640",
    "end": "1970010"
  },
  {
    "text": "called a coupon collector bound in general this tells you if you have a bunch of things and you pick one at a",
    "start": "1970010",
    "end": "1976250"
  },
  {
    "text": "time blindly at random then put it back it tells you how many times you'll need",
    "start": "1976250",
    "end": "1981920"
  },
  {
    "text": "to repeat this until you've chosen each of those things at least once here it applies with the things being",
    "start": "1981920",
    "end": "1988850"
  },
  {
    "text": "all the possible range queries so using this coupon collector bound we can say",
    "start": "1988850",
    "end": "1994670"
  },
  {
    "text": "that if queries are drawn uniformly at random the number of queries until the",
    "start": "1994670",
    "end": "1999920"
  },
  {
    "text": "adversary seen all volumes is about n squared log n if you're interested in more details",
    "start": "1999920",
    "end": "2008980"
  },
  {
    "text": "about volume attacks and some extensions to them like if a records value is",
    "start": "2008980",
    "end": "2014619"
  },
  {
    "text": "updated how to recover that value or if a record is inserted how to recover its",
    "start": "2014619",
    "end": "2019989"
  },
  {
    "text": "value have a look at my paper leaking",
    "start": "2019989",
    "end": "2025330"
  },
  {
    "text": "access pattern and volume of query results can be devastating and lead to bypassing database encryption regardless",
    "start": "2025330",
    "end": "2031149"
  },
  {
    "text": "of what type of encryption is used so what can be done I'm not a risk management expert I can't tell you which",
    "start": "2031149",
    "end": "2037690"
  },
  {
    "text": "threat model is right for you but I can suggest what to keep in mind when evaluating a solution so here are some",
    "start": "2037690",
    "end": "2044019"
  },
  {
    "text": "recommendations for practitioners from my point of view the point of view of a cryptographer I suggest analyzing leakage from two",
    "start": "2044019",
    "end": "2053349"
  },
  {
    "text": "angles first making a comprehensive list of all types of leakage that could occur",
    "start": "2053349",
    "end": "2058868"
  },
  {
    "text": "in your solution and seconds looking at specific points or operations and thinking about what type of leakage",
    "start": "2058869",
    "end": "2065169"
  },
  {
    "text": "could arise there leakage can arise from properties related to values queries and",
    "start": "2065169",
    "end": "2071530"
  },
  {
    "text": "responses besides leaking the actual values themselves the records can leak the ordering of values existence of",
    "start": "2071530",
    "end": "2078460"
  },
  {
    "text": "certain specific values a number of distinct values the distance between values whether values are repeated and",
    "start": "2078460",
    "end": "2084280"
  },
  {
    "text": "so on the repetition allows frequency analysis attacks an adversary that",
    "start": "2084280",
    "end": "2089290"
  },
  {
    "text": "already knows a little bit about the distribution of values can infer a lot about specific values if their",
    "start": "2089290",
    "end": "2095950"
  },
  {
    "text": "frequencies are leaked queries can leak information about the endpoints when a",
    "start": "2095950",
    "end": "2103390"
  },
  {
    "text": "query is repeated the width of the range when one range is a subset of another",
    "start": "2103390",
    "end": "2108609"
  },
  {
    "text": "range and so on besides leaking which rows matched or how many rows matched",
    "start": "2108609",
    "end": "2115119"
  },
  {
    "text": "answers to queries can also leak for example when two sets of matching records are the same or which records",
    "start": "2115119",
    "end": "2122319"
  },
  {
    "text": "match the most queries or so on for a pretty comprehensive list of the types of leakage I refer you to Kamara Dollaz",
    "start": "2122319",
    "end": "2128890"
  },
  {
    "text": "paper structured encryption and leakage suppression",
    "start": "2128890",
    "end": "2133470"
  },
  {
    "text": "next I suggest you think about what points in the implementation all these kinds of leakage could arise for example",
    "start": "2135810",
    "end": "2142540"
  },
  {
    "text": "it could be when you do an initial upload of rows in the database it could be during this bulk upload or a",
    "start": "2142540",
    "end": "2148000"
  },
  {
    "text": "single insert later on it could be when you make a single query or when you make",
    "start": "2148000",
    "end": "2153820"
  },
  {
    "text": "a batch of queries or when you're profiling the queries it could also be",
    "start": "2153820",
    "end": "2161320"
  },
  {
    "text": "when performing some maintenance operations like backups key rotation or updating the search index you can do a",
    "start": "2161320",
    "end": "2168460"
  },
  {
    "text": "kind of differential analysis what changes in the adversaries view when two things are not the same there's no magic",
    "start": "2168460",
    "end": "2179230"
  },
  {
    "text": "solution when it comes to side-channel leakage you're going to have to make some trade-offs in your encrypted database solutions so in addition to",
    "start": "2179230",
    "end": "2186070"
  },
  {
    "text": "considering what could leak and where you can think about which of the following techniques for mitigating",
    "start": "2186070",
    "end": "2191109"
  },
  {
    "text": "leakage would be accessible you could restrict the type or granularity of",
    "start": "2191109",
    "end": "2197200"
  },
  {
    "text": "queries for example for range queries you could force the endpoints of the range to always be multiples of five or",
    "start": "2197200",
    "end": "2203470"
  },
  {
    "text": "ten you could add dummy records to your database if you're using a solution that",
    "start": "2203470",
    "end": "2209740"
  },
  {
    "text": "leaks frequency information this could help hide frequency information making all values appear equally likely you can",
    "start": "2209740",
    "end": "2220540"
  },
  {
    "text": "also make dummy queries if you leak some information about the distribution of queries you can smooth this out by",
    "start": "2220540",
    "end": "2227140"
  },
  {
    "text": "adding dummy queries and of course you can also trust Hardware on the server",
    "start": "2227140",
    "end": "2233940"
  },
  {
    "text": "now what you'll be trading for more security could be things like incomplete query results so you get almost all",
    "start": "2233940",
    "end": "2240760"
  },
  {
    "text": "records in the range you requested or it could be just probabilistically correct results with either false positives or",
    "start": "2240760",
    "end": "2248020"
  },
  {
    "text": "false negatives and a common trade-off is sacrificing efficiency when querying",
    "start": "2248020",
    "end": "2254440"
  },
  {
    "text": "the data so maybe a range query takes multiple rounds of interaction with the server or maybe there's some",
    "start": "2254440",
    "end": "2260950"
  },
  {
    "text": "post-processing of results necessary on the client side or maybe this means that",
    "start": "2260950",
    "end": "2267579"
  },
  {
    "text": "on the server you can't do any compression of values or duplication of data or you can't batch queries",
    "start": "2267579",
    "end": "2275309"
  },
  {
    "text": "different trade offs can be acceptable in different situations all right we've",
    "start": "2275309",
    "end": "2282339"
  },
  {
    "text": "made it to the end this briefing was about new kinds of side channel attacks that can break database encryption for",
    "start": "2282339",
    "end": "2288249"
  },
  {
    "text": "numeric data the two kinds of leakage we considered access pattern leakage and",
    "start": "2288249",
    "end": "2294579"
  },
  {
    "text": "volume leakage can arise from say an adversary who's compromised the database server or just a network eavesdropper an",
    "start": "2294579",
    "end": "2302979"
  },
  {
    "text": "adversary can use access pattern leakage along with the PQ tree to figure out the value of every record in the database",
    "start": "2302979",
    "end": "2308709"
  },
  {
    "text": "either exactly or approximately bypassing any encryption using volume",
    "start": "2308709",
    "end": "2316209"
  },
  {
    "text": "leakage an adversary can create and prune a graph to identify these special elementary volumes which in turn will",
    "start": "2316209",
    "end": "2323859"
  },
  {
    "text": "lead to completely determining how many records have each value these attacks",
    "start": "2323859",
    "end": "2330279"
  },
  {
    "text": "apply to any kind of scheme supporting numeric range queries that have these site channels there's no simple way to",
    "start": "2330279",
    "end": "2336640"
  },
  {
    "text": "eliminate this leakage and all threat models nor our access pattern leakage and volume leakage the only kinds of",
    "start": "2336640",
    "end": "2342309"
  },
  {
    "text": "harmful leakage but there do exist some countermeasures like adding dummy records making dummy queries or",
    "start": "2342309",
    "end": "2347979"
  },
  {
    "text": "increasing the amount of client-side post-processing of query results at the",
    "start": "2347979",
    "end": "2353949"
  },
  {
    "text": "beginning I suggested thinking of encrypted database attacks a side-channel attacks and we can learn",
    "start": "2353949",
    "end": "2359170"
  },
  {
    "text": "something from there the black and baakir padding Oracle attack which was from 1998 is still regularly found in",
    "start": "2359170",
    "end": "2365559"
  },
  {
    "text": "the wild today if we don't take sides and attacks on encrypted databases seriously now I think they could be with",
    "start": "2365559",
    "end": "2372130"
  },
  {
    "text": "us for decades so it's worth it to analyze what we can learn from side-channel leakage thank you I'm happy",
    "start": "2372130",
    "end": "2378039"
  },
  {
    "text": "to take any questions",
    "start": "2378039",
    "end": "2380699"
  },
  {
    "text": "[Applause] [Music]",
    "start": "2384900",
    "end": "2391309"
  },
  {
    "text": "hello thank you very much that was really interesting and fascinating and",
    "start": "2391309",
    "end": "2397829"
  },
  {
    "text": "if your answer is going to be I should read your paper that's fine but I didn't",
    "start": "2397829",
    "end": "2404130"
  },
  {
    "text": "get how in your example you could see that note 5 did not have an R complement",
    "start": "2404130",
    "end": "2414349"
  },
  {
    "text": "okay so we had the entire set of query volumes we we assumed that our set of",
    "start": "2414500",
    "end": "2422130"
  },
  {
    "text": "observed query volumes is complete for every possible range query and we had that the maximum of those volumes was 20",
    "start": "2422130",
    "end": "2429960"
  },
  {
    "text": "I think if I remember correctly the total number of records so 20 is the value of the range 1 through N and there",
    "start": "2429960",
    "end": "2439109"
  },
  {
    "text": "was a query with volume 5 we don't know which range but there was no query with volume 15 so there was no our complement",
    "start": "2439109",
    "end": "2447720"
  },
  {
    "text": "as we say in that way does that answer your question about how we could see whether thank you very much yes I think",
    "start": "2447720",
    "end": "2453569"
  },
  {
    "text": "thank you for your question",
    "start": "2453569",
    "end": "2456529"
  },
  {
    "text": "yeah I'm in the center thank you blinded by the light",
    "start": "2459240",
    "end": "2465329"
  },
  {
    "text": "how did you find the peak you tree data structure research yeah in I mean I'm",
    "start": "2465329",
    "end": "2472559"
  },
  {
    "text": "always curious how people go about doing this and hot and what type of research did you do to get it one of my",
    "start": "2472559",
    "end": "2478589"
  },
  {
    "text": "colleagues found it in this instance I don't know if he uses some special",
    "start": "2478589",
    "end": "2484259"
  },
  {
    "text": "academic search engine or just spend hours and hours looking at old theoretical computer science papers I'm",
    "start": "2484259",
    "end": "2490500"
  },
  {
    "text": "not sure that's a good question probably lots of googling of different query",
    "start": "2490500",
    "end": "2495599"
  },
  {
    "text": "terms Thanks",
    "start": "2495599",
    "end": "2500359"
  },
  {
    "text": "I'm over yeah you're looking at me doctor thanks very much this really interesting talk I'm blown away I'm",
    "start": "2501990",
    "end": "2508650"
  },
  {
    "text": "mostly interested in the protective aspect and you totally lost me near the",
    "start": "2508650",
    "end": "2514230"
  },
  {
    "text": "end when you talked about using dummy queries as a mitigation strategy is the",
    "start": "2514230",
    "end": "2520470"
  },
  {
    "text": "idea just that we're going to flood extra legitimate queries from the",
    "start": "2520470",
    "end": "2526500"
  },
  {
    "text": "clients so that the observer has to observe more transactions before they",
    "start": "2526500",
    "end": "2531690"
  },
  {
    "text": "can build their model or are you talking about somehow returning illogical like",
    "start": "2531690",
    "end": "2537630"
  },
  {
    "text": "disjoint ranges to stymie the building of their model that's a very good",
    "start": "2537630",
    "end": "2543990"
  },
  {
    "text": "question how can making dummy queries help with these kinds of leakage so for access pattern leakage and volume",
    "start": "2543990",
    "end": "2550200"
  },
  {
    "text": "leakage I don't think they actually help mitigate any any vulnerabilities there but there are other attacks that work",
    "start": "2550200",
    "end": "2557970"
  },
  {
    "text": "using the distribution of ranges so it assumes that the queried ranges have",
    "start": "2557970",
    "end": "2564510"
  },
  {
    "text": "some distribution and using say the distribution of volumes how many times",
    "start": "2564510",
    "end": "2570630"
  },
  {
    "text": "you saw on average a query with a certain volume you can use that to",
    "start": "2570630",
    "end": "2576410"
  },
  {
    "text": "attack volume leakage so for the attacks I presented it's not a countermeasure",
    "start": "2576410",
    "end": "2582480"
  },
  {
    "text": "because we're not we don't care about the distribution of queries but there are other attacks I can point you to one",
    "start": "2582480",
    "end": "2589680"
  },
  {
    "text": "paper by culeros at all where they use the distribution of queries to attack",
    "start": "2589680",
    "end": "2595680"
  },
  {
    "text": "volumes great question very much thank you one more question toner great",
    "start": "2595680",
    "end": "2602190"
  },
  {
    "text": "presentation by the way um one question I had is this when you're doing these modeling of analyzing all these numbers",
    "start": "2602190",
    "end": "2609330"
  },
  {
    "text": "and so forth did you take into consideration eventual consistency versus strong consistency in the",
    "start": "2609330",
    "end": "2615390"
  },
  {
    "text": "databases and how that might have an impact on those volume numbers that you're trying to extract no I didn't I'm",
    "start": "2615390",
    "end": "2622710"
  },
  {
    "text": "actually not familiar with those types of consistency and how they would affect our attack but that sounds like an",
    "start": "2622710",
    "end": "2629190"
  },
  {
    "text": "interesting real problem to consider thank you for your question",
    "start": "2629190",
    "end": "2636710"
  },
  {
    "text": "thank you [Applause]",
    "start": "2639720",
    "end": "2644950"
  }
]