[
  {
    "start": "0",
    "end": "38000"
  },
  {
    "text": "are we okay to start yes we start okay well so hello everyone my name is",
    "start": "40",
    "end": "6919"
  },
  {
    "text": "Francisco Falcon and this talk is called exploiting Adobe Flash player in the era",
    "start": "6919",
    "end": "13000"
  },
  {
    "text": "of control flow guard so first the mandatory",
    "start": "13000",
    "end": "18160"
  },
  {
    "text": "introduction my name is Francisco I am an exploit writer for core security I am",
    "start": "18160",
    "end": "24279"
  },
  {
    "text": "from Argentina and I'm interested in stuff such as vulnerability research",
    "start": "24279",
    "end": "30480"
  },
  {
    "text": "exploitation reverse engineering and that kind of stuff so this is the agenda for this",
    "start": "30480",
    "end": "38040"
  },
  {
    "start": "38000",
    "end": "38000"
  },
  {
    "text": "talk we'll start with a little overview of Contra flow guard then we'll see a",
    "start": "38040",
    "end": "44000"
  },
  {
    "text": "quick overview of the CBE 2015 0311 which was a use after free",
    "start": "44000",
    "end": "51840"
  },
  {
    "text": "vulnerability affecting Flash Player which was the starting point for This research then we'll move on to see how",
    "start": "51840",
    "end": "59719"
  },
  {
    "text": "to to leverage the sh in time compiler of Flash in order to bypass the CFG",
    "start": "59719",
    "end": "65040"
  },
  {
    "text": "mitigation and also we'll see how Adobe has hardened the shtin compiler of Flash",
    "start": "65040",
    "end": "71520"
  },
  {
    "text": "the second part of the talk is about data only attacks and we are going to see to see three Daya only attacks",
    "start": "71520",
    "end": "78720"
  },
  {
    "text": "against Flash Player they are how to gain unauthorized access to the camera",
    "start": "78720",
    "end": "84159"
  },
  {
    "text": "and the microphone of the user how to gain unauthorized access to the local file system of the user and finally how",
    "start": "84159",
    "end": "90799"
  },
  {
    "text": "to execute orbitary code without using Shell Code nor R and we'll have demos",
    "start": "90799",
    "end": "97000"
  },
  {
    "text": "live demos of every of these three data only attacks so let's start with a quick",
    "start": "97000",
    "end": "104360"
  },
  {
    "text": "overview of control flow guard control flow guard is one of the latest",
    "start": "104360",
    "end": "109560"
  },
  {
    "start": "106000",
    "end": "106000"
  },
  {
    "text": "exploitation mitigations implemented by Microsoft and this mitigation focuses on",
    "start": "109560",
    "end": "115640"
  },
  {
    "text": "making harder to exploit memory corruption vulnerabilities specific specifically those cases in which the",
    "start": "115640",
    "end": "122360"
  },
  {
    "text": "attacker is able to gain code execution by providing a function pointer that is later called through an indirect call",
    "start": "122360",
    "end": "130280"
  },
  {
    "text": "that is typically the case of memory corruption vulnerabilities allowing the attacker to override the function",
    "start": "130280",
    "end": "136840"
  },
  {
    "text": "pointer or use after free vulnerabilities in which the attacker can craft a be table for a free object",
    "start": "136840",
    "end": "146000"
  },
  {
    "text": "that kind of vulnerabilities so what the does control flow guard do well control",
    "start": "146000",
    "end": "152959"
  },
  {
    "text": "flow Guard works by checking that the target address of an indirect call is",
    "start": "152959",
    "end": "158480"
  },
  {
    "text": "one of the addresses identified as valid at compile time and this mitigation",
    "start": "158480",
    "end": "164879"
  },
  {
    "text": "needs support from both the compiler and the operating system from the compiler",
    "start": "164879",
    "end": "170400"
  },
  {
    "text": "side it is supported by the latest Visual Studio ver version that is Visual",
    "start": "170400",
    "end": "175760"
  },
  {
    "text": "Studio 2015 and on the operating system side it is supported by Windows 8.1 update 3",
    "start": "175760",
    "end": "183799"
  },
  {
    "text": "which was released one year ago in November 2014 and also on Windows 10 since it's",
    "start": "183799",
    "end": "191159"
  },
  {
    "text": "tech technical preview so one interesting thing about",
    "start": "191159",
    "end": "196760"
  },
  {
    "text": "the Flash player plug-in for Internet Explorer is that starting from Windows 8",
    "start": "196760",
    "end": "202680"
  },
  {
    "text": "and including Windows 8.1 and Windows 10 this flash player plugin for Internet",
    "start": "202680",
    "end": "208959"
  },
  {
    "text": "Explorer is now part of the operating system it's integrated into windows and",
    "start": "208959",
    "end": "214040"
  },
  {
    "text": "Microsoft Is providing the security patches for it and this integrated version of flash",
    "start": "214040",
    "end": "220879"
  },
  {
    "text": "is being compiled using the latest Visual Studio compiler which is CFG",
    "start": "220879",
    "end": "226439"
  },
  {
    "text": "aware and if you really want to know about the internals of this mitigation I",
    "start": "226439",
    "end": "231680"
  },
  {
    "text": "can recommend you these two papers the first one is called Windows 10 control flow guard internals by researcher MJ",
    "start": "231680",
    "end": "238799"
  },
  {
    "text": "0011 which was presented at the power of community conference last year and also",
    "start": "238799",
    "end": "245920"
  },
  {
    "text": "exploring control flow guard in Windows 10 by Shak Tang from turn",
    "start": "245920",
    "end": "252840"
  },
  {
    "text": "micro so cont flow guard protects indirect calls by putting a call to",
    "start": "252840",
    "end": "259919"
  },
  {
    "text": "validation function before indirect calls and this is a a screen capture",
    "start": "259919",
    "end": "266919"
  },
  {
    "text": "from Ida Pro showing that in the Flash Player binary for Windows",
    "start": "266919",
    "end": "272680"
  },
  {
    "text": "8.1 contraflow guard is protecting more than 29,000 indirect",
    "start": "272680",
    "end": "280280"
  },
  {
    "text": "costs so let's move on to a little overview of this CBE",
    "start": "280280",
    "end": "287080"
  },
  {
    "text": "201531 vulnerability which was a use after free vulnerability affecting Flash",
    "start": "287080",
    "end": "292400"
  },
  {
    "text": "Player and this bag was find was found exploited in the wild in January this",
    "start": "292400",
    "end": "298600"
  },
  {
    "text": "year and this was the starting point for This research this vulnerability is a",
    "start": "298600",
    "end": "304880"
  },
  {
    "start": "300000",
    "end": "300000"
  },
  {
    "text": "textbook used after free affecting Flash the vulnerable function is called uncompress via C variant this",
    "start": "304880",
    "end": "313240"
  },
  {
    "text": "vulnerability happens when the compressing a byar containing corrupted",
    "start": "313240",
    "end": "318600"
  },
  {
    "text": "C data this buggy function will free a buffer while keeping a reference while",
    "start": "318600",
    "end": "325720"
  },
  {
    "text": "it's possible to keep a reference to it in the domain memory Global property which is a property of action",
    "start": "325720",
    "end": "332840"
  },
  {
    "text": "script so the exploitation plan is the regular one for a use of the free",
    "start": "332840",
    "end": "339120"
  },
  {
    "text": "vulnerability once the once the free has happened we need to fill that memory",
    "start": "339120",
    "end": "344960"
  },
  {
    "text": "hole with some other object and the typical way in Flash was to allocate a",
    "start": "344960",
    "end": "352000"
  },
  {
    "text": "vector object in that memory hole so the domain the domain memory Global property",
    "start": "352000",
    "end": "358319"
  },
  {
    "text": "is supposed to point point to an array of bytes but instead now it's pointing",
    "start": "358319",
    "end": "364000"
  },
  {
    "text": "to a vector object that we managed to put in that memory",
    "start": "364000",
    "end": "369280"
  },
  {
    "text": "hole so let's see this in a graphical way this is the normal state of the",
    "start": "369280",
    "end": "375919"
  },
  {
    "text": "domain memory property pointing to a plain array of bytes but after the use of the free",
    "start": "375919",
    "end": "384039"
  },
  {
    "text": "after the free has happened domain memory can still reference that buffer",
    "start": "384039",
    "end": "389360"
  },
  {
    "text": "and we managed to occupy that memory hole with the vector object so we are",
    "start": "389360",
    "end": "395199"
  },
  {
    "text": "occupying that memory hole with the vector object which contains the element of the vectors but also the metadata of",
    "start": "395199",
    "end": "402280"
  },
  {
    "text": "the vector and that contains a pointer to the table and also the length of the",
    "start": "402280",
    "end": "408000"
  },
  {
    "text": "vector and this Vector object was really useful for exploitation purposes because",
    "start": "408000",
    "end": "414479"
  },
  {
    "text": "we can corrupt this length field and if we overwrite with a really high value",
    "start": "414479",
    "end": "421000"
  },
  {
    "text": "like FF FF FF FF we can gain orbitary read and write",
    "start": "421000",
    "end": "426120"
  },
  {
    "text": "memory uh access to the whole memory process process memory sorry so what was",
    "start": "426120",
    "end": "432919"
  },
  {
    "text": "the exploitation approach before the existence of contol for guard for example on Windows 7 well the first",
    "start": "432919",
    "end": "441080"
  },
  {
    "text": "exploitation step was to overwrite the length of the vector in order to gain",
    "start": "441080",
    "end": "446240"
  },
  {
    "text": "orbitary read and write memory access the second step is to overwrite the the",
    "start": "446240",
    "end": "452039"
  },
  {
    "text": "B table of the vector field with the address of our R chain and finally we",
    "start": "452039",
    "end": "457720"
  },
  {
    "text": "need to call a virtual method on that corrupted Vector object in order to start our",
    "start": "457720",
    "end": "463919"
  },
  {
    "text": "rchain so what's different when we have control floward enabled for example on",
    "start": "463919",
    "end": "470000"
  },
  {
    "text": "Windows 8.1 update 3 well the difference is in the last step when calling a",
    "start": "470000",
    "end": "476919"
  },
  {
    "text": "virtual method of the corrupted object for example example the two string method in that case control flow guard",
    "start": "476919",
    "end": "483759"
  },
  {
    "text": "will detect that we are trying to hijack the normal execution flow when we are",
    "start": "483759",
    "end": "488919"
  },
  {
    "text": "trying to call our first Rob Gadget because it is not marked as a valid",
    "start": "488919",
    "end": "494599"
  },
  {
    "text": "address so application will detect this security failure and exit immediately",
    "start": "494599",
    "end": "499960"
  },
  {
    "text": "before we can get code execution at the binary level this is",
    "start": "499960",
    "end": "505720"
  },
  {
    "text": "the part of the code where we can gain code execution in version of Flash without CFG it the references the V",
    "start": "505720",
    "end": "514279"
  },
  {
    "text": "table of the object then it grabs the second function pointer from the B table",
    "start": "514279",
    "end": "519599"
  },
  {
    "text": "and then it calls it at that call edx instruction which is an indirect call",
    "start": "519599",
    "end": "526399"
  },
  {
    "text": "and there is where we start our rchain for example on Windows",
    "start": "526399",
    "end": "531600"
  },
  {
    "text": "7 this is the very same part of the code with CFG enabled highlighted in yellow",
    "start": "531600",
    "end": "538279"
  },
  {
    "text": "you can see a call to the the guard check I call fptr pointer that is a",
    "start": "538279",
    "end": "544000"
  },
  {
    "text": "pointer to the CFG validation function so as you can see before doing the",
    "start": "544000",
    "end": "549920"
  },
  {
    "text": "indirect call in this case it is a call ESI instruction it calls the validation",
    "start": "549920",
    "end": "556839"
  },
  {
    "text": "function that one will detect that we are trying to execute an invalid address",
    "start": "556839",
    "end": "562839"
  },
  {
    "text": "so it will terminate immediately when contraflow guard detects a call to an invalid address it",
    "start": "562839",
    "end": "569920"
  },
  {
    "start": "566000",
    "end": "566000"
  },
  {
    "text": "will execute that Interruption 29 which means that the OS has found a security",
    "start": "569920",
    "end": "575600"
  },
  {
    "text": "failure so execution stops immediately so let's see a few",
    "start": "575600",
    "end": "582800"
  },
  {
    "text": "approaches on how we can try to bypass this contol flow guard",
    "start": "582800",
    "end": "587959"
  },
  {
    "text": "mitigation oh this is just a note for the rest of the talk uh I'm probably",
    "start": "587959",
    "end": "594040"
  },
  {
    "text": "talking a lot about read and write memory Primitives in this case I I explained before I gained these",
    "start": "594040",
    "end": "600959"
  },
  {
    "text": "Primitives by overwriting the length of a vector but you probably could use any",
    "start": "600959",
    "end": "606959"
  },
  {
    "text": "other memory Primitives you need as long as you obtain",
    "start": "606959",
    "end": "612000"
  },
  {
    "start": "612000",
    "end": "612000"
  },
  {
    "text": "them so this is a short list of ideas on how to approach zfg this is not",
    "start": "612000",
    "end": "618079"
  },
  {
    "text": "comprehensive at all because there are a lot more ideas these are a few thing I tried when trying to exploit this one",
    "start": "618079",
    "end": "625399"
  },
  {
    "text": "idea is to overwrite a return address on the stock because return addresses are not protected by zfg however I wasn't",
    "start": "625399",
    "end": "634839"
  },
  {
    "text": "able to determine the address of the thread stack from my starting point so",
    "start": "634839",
    "end": "639959"
  },
  {
    "text": "that idea didn't work for me another idea is to take advantage of another",
    "start": "639959",
    "end": "645639"
  },
  {
    "text": "module loaded in the same process which may be compiled with no zfg support but",
    "start": "645639",
    "end": "652320"
  },
  {
    "text": "this is not the case of Internet Explorer because every module is compiled using CFG",
    "start": "652320",
    "end": "659560"
  },
  {
    "text": "another approach may be to find indirect calls which for some reason were not",
    "start": "659560",
    "end": "665200"
  },
  {
    "text": "protected by contol flow guard let's focus on this third idea ideally we need an indirect call",
    "start": "665200",
    "end": "674360"
  },
  {
    "text": "which is not protected by CFG that we can call in a",
    "start": "674360",
    "end": "679399"
  },
  {
    "text": "straightforward way and even better if at the time the indirect call is execute",
    "start": "679399",
    "end": "685480"
  },
  {
    "text": "we have a CPU register pointing to our data so it's easier for us to be both",
    "start": "685480",
    "end": "691480"
  },
  {
    "text": "the stock and start our R chain so as I said before when",
    "start": "691480",
    "end": "697920"
  },
  {
    "text": "describing control flow guard contol flow guard protects indirect calls that",
    "start": "697920",
    "end": "703200"
  },
  {
    "text": "could be identified at compile time so the question here is are there any",
    "start": "703200",
    "end": "709000"
  },
  {
    "text": "indirect calls in Flash Player which are not protected sorry which are not generated at run time at compile time",
    "start": "709000",
    "end": "716800"
  },
  {
    "text": "sorry and the answer is yes there are so here it comes the justing time",
    "start": "716800",
    "end": "723279"
  },
  {
    "start": "720000",
    "end": "720000"
  },
  {
    "text": "compiler of flash to the rescue the code generated by the shtin time compiler",
    "start": "723279",
    "end": "728399"
  },
  {
    "text": "flash does contain indirect calls and since this code is generated at run time",
    "start": "728399",
    "end": "735199"
  },
  {
    "text": "it is not protected by contol for guard so just as a historical note the",
    "start": "735199",
    "end": "742279"
  },
  {
    "text": "justtin compiler flash has been proved useful for exploitation purposes in the past in order to bypass mitigations for",
    "start": "742279",
    "end": "749800"
  },
  {
    "text": "example you can take a look at these two papers this one the first one is called pointer inference and just in time",
    "start": "749800",
    "end": "756279"
  },
  {
    "text": "spraying by Dion blakis and the second one by Fermin CNA which is called flash",
    "start": "756279",
    "end": "762399"
  },
  {
    "text": "flash just in time spraying in folic gadets so let's see how to leverage the",
    "start": "762399",
    "end": "769720"
  },
  {
    "start": "766000",
    "end": "766000"
  },
  {
    "text": "sh inside compiler Flash in order to bypass Contra flow Guard from our action script code we can",
    "start": "769720",
    "end": "777320"
  },
  {
    "text": "create a b containing our R chain and if we take a look at the",
    "start": "777320",
    "end": "782959"
  },
  {
    "text": "internal representation of this V right object we can see that at offset 8 we",
    "start": "782959",
    "end": "788720"
  },
  {
    "text": "have a pointer to a b table object and the name of these classes are taken from",
    "start": "788720",
    "end": "794560"
  },
  {
    "text": "the ABM plus source code which is uh an open source release of the action script",
    "start": "794560",
    "end": "801000"
  },
  {
    "text": "virtual machine it is available on G Hub so if you are working on flash you you",
    "start": "801000",
    "end": "807399"
  },
  {
    "text": "might find it useful so at offset eight of our byar we have a",
    "start": "807399",
    "end": "812839"
  },
  {
    "text": "pointer to a b table object let's follow it and here we have the vable object",
    "start": "812839",
    "end": "819279"
  },
  {
    "text": "which contains a lot of pointers to objects of type method Ember and let's focus on the method M",
    "start": "819279",
    "end": "827440"
  },
  {
    "text": "object whose address is stored at offset Ox D4 of the",
    "start": "827440",
    "end": "833759"
  },
  {
    "text": "B object who's calling",
    "start": "833759",
    "end": "839639"
  },
  {
    "text": "[Laughter] so this is the meth of M object whose",
    "start": "840420",
    "end": "846759"
  },
  {
    "text": "address is stored at offset ox4 of theit table not",
    "start": "846759",
    "end": "853079"
  },
  {
    "text": "again so the second DW of this method that's it thank you so the second",
    "start": "853079",
    "end": "861600"
  },
  {
    "text": "DW of this method M object is a function pointer that is the second one whose",
    "start": "861600",
    "end": "868519"
  },
  {
    "text": "value is 61 c0 a70 and this function pointer is really",
    "start": "868519",
    "end": "874399"
  },
  {
    "text": "interesting because it's called through an unguarded indirect call from code",
    "start": "874399",
    "end": "880000"
  },
  {
    "text": "generated by the shtin time compiler flash look this piece of code is code",
    "start": "880000",
    "end": "887160"
  },
  {
    "text": "generated at runtime by the sh time compiler so it's located somewhere on on the hip first we can see here the",
    "start": "887160",
    "end": "895160"
  },
  {
    "text": "comments it grabs the address of the B right object then it references the",
    "start": "895160",
    "end": "900360"
  },
  {
    "text": "address of the B table object from offset 8 then it grabs the method M",
    "start": "900360",
    "end": "905519"
  },
  {
    "text": "object from offset D4 of theit table and then it grabs the function pointer",
    "start": "905519",
    "end": "911720"
  },
  {
    "text": "located at offset four of the method M object and finally it calls it through",
    "start": "911720",
    "end": "917160"
  },
  {
    "text": "that indirect call which is the call eax instruction so it's calling a function",
    "start": "917160",
    "end": "922839"
  },
  {
    "text": "pointer with an indirect call and there's no Contra flow guard here and",
    "start": "922839",
    "end": "929240"
  },
  {
    "text": "even better this code can be easily triggered by calling the two string method on our by AR object containing",
    "start": "929240",
    "end": "937399"
  },
  {
    "text": "our R chain so so far we know how to trigger",
    "start": "937399",
    "end": "943519"
  },
  {
    "text": "in a straightforward way an indirect call which is not protected by CFG what we need to do is to put a",
    "start": "943519",
    "end": "951399"
  },
  {
    "text": "pointer to a fake method M object at offset Ox D4 of the B table object and",
    "start": "951399",
    "end": "957920"
  },
  {
    "text": "as an additional benefit at the time that call eax instruction is execute we have the",
    "start": "957920",
    "end": "965959"
  },
  {
    "text": "ECX pointer pointing to our data so pivoting the stack is really easy from",
    "start": "965959",
    "end": "972040"
  },
  {
    "text": "there let's explain this in a graphical way which should be easier there we have",
    "start": "972040",
    "end": "977920"
  },
  {
    "text": "our bite array object this is its internal representation it contains a",
    "start": "977920",
    "end": "983319"
  },
  {
    "text": "pointer to a buffer object which in turn contains a pointer to the actual data of",
    "start": "983319",
    "end": "988920"
  },
  {
    "text": "of the array but we'll focus on the right side of the screen at offset eight",
    "start": "988920",
    "end": "995680"
  },
  {
    "text": "of the white array we we can see a pointer to the vable object and at",
    "start": "995680",
    "end": "1001160"
  },
  {
    "text": "offset D4 there's a pointer to the method M object right there and",
    "start": "1001160",
    "end": "1006880"
  },
  {
    "text": "highlighted in red you can see the function pointer that is called through the unprotected indirect call so by",
    "start": "1006880",
    "end": "1014759"
  },
  {
    "text": "using our read and WR Primitives the idea is to modify that",
    "start": "1014759",
    "end": "1020040"
  },
  {
    "text": "and overwrite that pointer at offset D4 of the B table so it looks like",
    "start": "1020040",
    "end": "1027360"
  },
  {
    "text": "this you can see that now at B table plus o xd4 we have a pointer to our R",
    "start": "1027360",
    "end": "1035319"
  },
  {
    "text": "chain so our R chain will be interpreted as that method and object so when we",
    "start": "1035319",
    "end": "1042199"
  },
  {
    "text": "call TW string on this Modified by we'll get an unprojected call to the",
    "start": "1042199",
    "end": "1049160"
  },
  {
    "text": "second DW of our R chain so implementing this idea from",
    "start": "1049160",
    "end": "1056520"
  },
  {
    "text": "action script looks like this first assuming that we have read and write Primitives first we need to determine",
    "start": "1056520",
    "end": "1063720"
  },
  {
    "text": "the address of the BJ object that is by calculating the address of byde Plus 8",
    "start": "1063720",
    "end": "1069600"
  },
  {
    "text": "and the target address for the override will be the address of B table plus",
    "start": "1069600",
    "end": "1075600"
  },
  {
    "text": "D4 and then we just need to overwrite that address with the address of a",
    "start": "1075600",
    "end": "1081640"
  },
  {
    "text": "rchain just as an implementation note you can see that I'm storing the address of the rchain shifted three times to the",
    "start": "1081640",
    "end": "1088880"
  },
  {
    "text": "right and that is because address of rchain is a variable of type unaged in",
    "start": "1088880",
    "end": "1094799"
  },
  {
    "text": "which internally is represented as shifted three times to the left so I'm",
    "start": "1094799",
    "end": "1101799"
  },
  {
    "text": "this way I'm storing it the way I need it so finally we need to call the two",
    "start": "1101799",
    "end": "1107760"
  },
  {
    "text": "string method on on the corrupted by right object this is as simple as this",
    "start": "1107760",
    "end": "1113120"
  },
  {
    "text": "and this way we start our R chain and we bypass control flow guard so you may be",
    "start": "1113120",
    "end": "1120360"
  },
  {
    "start": "1117000",
    "end": "1117000"
  },
  {
    "text": "asking what's the current status of this technique well Adobe killed it in Flash",
    "start": "1120360",
    "end": "1127440"
  },
  {
    "text": "version 180.0 do1 194 which was published in",
    "start": "1127440",
    "end": "1133360"
  },
  {
    "text": "June this year and as a side note Google has hardened the vector object in July",
    "start": "1133360",
    "end": "1140000"
  },
  {
    "text": "this year with additional improvements in August this year so if you're looking",
    "start": "1140000",
    "end": "1146120"
  },
  {
    "text": "to obtain read and write Primitives you may need to find another way because the",
    "start": "1146120",
    "end": "1151480"
  },
  {
    "text": "vector technique will not work anymore probably so as I said Adobe killed this",
    "start": "1151480",
    "end": "1160400"
  },
  {
    "text": "CFG bypass technique let's see how they did it this patch I told you about H",
    "start": "1160400",
    "end": "1169799"
  },
  {
    "text": "hardening of flash released on June Jun this year contains two main hardening",
    "start": "1169799",
    "end": "1176200"
  },
  {
    "text": "measures for the shin time compiler Flash the first one is when shtin time",
    "start": "1176200",
    "end": "1181600"
  },
  {
    "text": "code is the source of an indirect call and the second one is when shastin time",
    "start": "1181600",
    "end": "1187400"
  },
  {
    "text": "code is the destination of indirect calls our bypass technique is killed the",
    "start": "1187400",
    "end": "1193960"
  },
  {
    "text": "first way that is when sh in time code contains an indirect calls now what they",
    "start": "1193960",
    "end": "1199400"
  },
  {
    "text": "are doing is to emit a call to the CFG validation function before indirect",
    "start": "1199400",
    "end": "1205360"
  },
  {
    "text": "calls in the code generated at run time in the second case they are using new",
    "start": "1205360",
    "end": "1211520"
  },
  {
    "text": "memory management Flags which are page targets invalid and Page targets update",
    "start": "1211520",
    "end": "1217039"
  },
  {
    "text": "and new memory memory management functions like set process valid call targets which is a new Windows 10",
    "start": "1217039",
    "end": "1224919"
  },
  {
    "text": "API so regarding the first part that is is protecting when the shus in time code",
    "start": "1224919",
    "end": "1231520"
  },
  {
    "text": "is the source of an indirect call this is what they are doing they there are no",
    "start": "1231520",
    "end": "1236679"
  },
  {
    "text": "more unguarded indirect calls in shtin time code this is what they are doing to",
    "start": "1236679",
    "end": "1241960"
  },
  {
    "text": "kill this technique as you can see there's an indirect call there at the",
    "start": "1241960",
    "end": "1247400"
  },
  {
    "text": "call eax instruction however you can note here",
    "start": "1247400",
    "end": "1253280"
  },
  {
    "text": "highl in red now there's a call to the CFG validation function so the technique",
    "start": "1253280",
    "end": "1259960"
  },
  {
    "text": "is now dead so let's see the other part that is",
    "start": "1259960",
    "end": "1265600"
  },
  {
    "text": "when when sorry uh when Justus in time code is the destination of indirect",
    "start": "1265600",
    "end": "1272799"
  },
  {
    "text": "calls so if you take a look at this article called memory protection",
    "start": "1272799",
    "end": "1278120"
  },
  {
    "start": "1274000",
    "end": "1274000"
  },
  {
    "text": "constant in msdn you can see that when you call virtual alloc in order to",
    "start": "1278120",
    "end": "1285039"
  },
  {
    "text": "allocate a new me memory region with execute permission all locations within that memory region",
    "start": "1285039",
    "end": "1292120"
  },
  {
    "text": "will be marked as valid call targets for CFG and in a similar way if you call",
    "start": "1292120",
    "end": "1298480"
  },
  {
    "text": "virtual protect in order to change the permissions of a memory region to page execute permissions and that means page",
    "start": "1298480",
    "end": "1305760"
  },
  {
    "text": "execute read page execute read write page execute read uh right copy I I",
    "start": "1305760",
    "end": "1312919"
  },
  {
    "text": "don't remember the exact name every location within that memory region will",
    "start": "1312919",
    "end": "1318080"
  },
  {
    "text": "be marked as valid call Target for CFG why is this well this is the C the",
    "start": "1318080",
    "end": "1326760"
  },
  {
    "text": "code of Shas in time compilers which are not aware of CFG first usually the shin",
    "start": "1326760",
    "end": "1333400"
  },
  {
    "text": "time compiler will start by allocating a new memory region with read and write",
    "start": "1333400",
    "end": "1339200"
  },
  {
    "text": "permissions then the sh insign compiler will emit new code and write that code",
    "start": "1339200",
    "end": "1344760"
  },
  {
    "text": "to the new memory region then it will give the new newly generated code",
    "start": "1344760",
    "end": "1349840"
  },
  {
    "text": "execute and read permissions so now it's ready to call that newly generated",
    "start": "1349840",
    "end": "1356520"
  },
  {
    "text": "code but let's see what is Flash Player doing regarding just in time sorry",
    "start": "1356799",
    "end": "1363919"
  },
  {
    "text": "regarding contol flow guard in Windows 10 for example where they have additional protections well Windows 10",
    "start": "1363919",
    "end": "1370400"
  },
  {
    "text": "introduced two new memory protection constants for virtual aloc and virtual",
    "start": "1370400",
    "end": "1375600"
  },
  {
    "text": "protect and these constants are page targets invalid and Page targets no update and they value is the same",
    "start": "1375600",
    "end": "1383360"
  },
  {
    "text": "because they do almost the same right so page targets invalid is",
    "start": "1383360",
    "end": "1390520"
  },
  {
    "text": "supposed to be used with virtual aloc it should be combined with execute",
    "start": "1390520",
    "end": "1395760"
  },
  {
    "text": "protections and using this flag will Mark all the locations in the new memory",
    "start": "1395760",
    "end": "1402080"
  },
  {
    "text": "region as invalid targets for CFG on the other hand page targets no",
    "start": "1402080",
    "end": "1409279"
  },
  {
    "text": "update should be used with virtual protect and it should be combined with execute permissions this flag will",
    "start": "1409279",
    "end": "1416919"
  },
  {
    "text": "indicate that the counterflow guing information should not be changed when",
    "start": "1416919",
    "end": "1422200"
  },
  {
    "text": "assigning the new memory protections they are also using this new",
    "start": "1422200",
    "end": "1428640"
  },
  {
    "text": "memory management function which is set process valid call Targets this function",
    "start": "1428640",
    "end": "1433799"
  },
  {
    "text": "is new in Windows 10 and remember that at the the first part of the talk I said",
    "start": "1433799",
    "end": "1440279"
  },
  {
    "text": "that contol flow guard protects indirect calls which could be identified at compile time well this new windows",
    "start": "1440279",
    "end": "1448679"
  },
  {
    "text": "function allows to provide new control flow guard information at runtime that",
    "start": "1448679",
    "end": "1455360"
  },
  {
    "text": "is by calling this function you can provide CFC information with a list of",
    "start": "1455360",
    "end": "1461640"
  },
  {
    "text": "new valid or invalid call targets so this is like ideal to use with just in",
    "start": "1461640",
    "end": "1468679"
  },
  {
    "text": "time compilers which are generating new code and maybe removing them them so",
    "start": "1468679",
    "end": "1474159"
  },
  {
    "text": "they need to mark them as invalid so what the shtin sign compiler of flash",
    "start": "1474159",
    "end": "1481159"
  },
  {
    "text": "is doing now for example on Windows 10 I'm taking advantage of these new memory protection constants and memory",
    "start": "1481159",
    "end": "1487799"
  },
  {
    "text": "management function looks like this first the sh insign compiler starts by",
    "start": "1487799",
    "end": "1493559"
  },
  {
    "text": "allocating a new memory region with read and write permissions by using read and",
    "start": "1493559",
    "end": "1498799"
  },
  {
    "text": "write permissions every location in that memory region is in is an invalid Target",
    "start": "1498799",
    "end": "1505640"
  },
  {
    "text": "for CFG then the sh the shtin time compiler will generate new code and runtime and write it to the memory",
    "start": "1505640",
    "end": "1513520"
  },
  {
    "text": "region and here it comes the difference the shtin time compiler will",
    "start": "1513520",
    "end": "1518640"
  },
  {
    "text": "call virtual proect with execute and read permissions but also using the new",
    "start": "1518640",
    "end": "1524480"
  },
  {
    "text": "flag that is Page targets no update highlighted in thre this way they are",
    "start": "1524480",
    "end": "1530600"
  },
  {
    "text": "giving the whole memory region execute and read permissions but by using this new flag they are avoiding that every",
    "start": "1530600",
    "end": "1537720"
  },
  {
    "text": "location in that memory region is marked as valid so instead they are using the",
    "start": "1537720",
    "end": "1543919"
  },
  {
    "text": "new memory management function that is set process valid call targets so they are marking as valid Target for CFG just",
    "start": "1543919",
    "end": "1552600"
  },
  {
    "text": "the address of the new le generated function so that is they are using a",
    "start": "1552600",
    "end": "1557840"
  },
  {
    "text": "good ularity so the new code is only marked as valid not the whole memory",
    "start": "1557840",
    "end": "1564320"
  },
  {
    "text": "region so that looks really good",
    "start": "1564320",
    "end": "1569840"
  },
  {
    "text": "so that's how Adobe has managed to kill the technique and also protect against",
    "start": "1569840",
    "end": "1577480"
  },
  {
    "text": "future attacks that is by elbing the the fact that virtual Al and virtual protect",
    "start": "1577480",
    "end": "1584399"
  },
  {
    "text": "Mark every location as valid when giving it executable",
    "start": "1584399",
    "end": "1589919"
  },
  {
    "text": "permissions so the second part of the talk is about alternative",
    "start": "1589919",
    "end": "1595919"
  },
  {
    "text": "payloads so the question here is what if hij shacking the execution",
    "start": "1595919",
    "end": "1601880"
  },
  {
    "text": "flow of a program becomes really really hard because of mitigations such as",
    "start": "1601880",
    "end": "1607399"
  },
  {
    "text": "Contra flow guard well we still have data only",
    "start": "1607399",
    "end": "1616120"
  },
  {
    "text": "attacks here we are ruling out gaining code execution by injecting Shell Code",
    "start": "1616120",
    "end": "1622360"
  },
  {
    "text": "or using rub instead we are focusing on hacking the program by modifying its",
    "start": "1622360",
    "end": "1628399"
  },
  {
    "text": "data that is by modifying its internal state if you are interested in this type",
    "start": "1628399",
    "end": "1635919"
  },
  {
    "start": "1633000",
    "end": "1633000"
  },
  {
    "text": "of data only attacks you can take a look at this related work the all of them are",
    "start": "1635919",
    "end": "1642600"
  },
  {
    "text": "previous presentations from black hat including easy local Windows Cel exploitation by Cesar Cudo right ones",
    "start": "1642600",
    "end": "1650799"
  },
  {
    "text": "pound anywhere also known as the vital Point strike by researcher Tom keeper",
    "start": "1650799",
    "end": "1656720"
  },
  {
    "text": "and data only pounding Windows kernel 8.1 by Nikita",
    "start": "1656720",
    "end": "1663960"
  },
  {
    "text": "tarakanov so the data only attacks we are going to discuss in this section are",
    "start": "1663960",
    "end": "1670200"
  },
  {
    "text": "three first how to gain unauthorized access to the camera and the microphone",
    "start": "1670200",
    "end": "1675279"
  },
  {
    "text": "of the user also how to escalate the Privileges",
    "start": "1675279",
    "end": "1680960"
  },
  {
    "text": "of our flash file that is escalating from the restricted remote sandbox to",
    "start": "1680960",
    "end": "1686399"
  },
  {
    "text": "the privileged local trusted sandbox in order to gain unauthorized access to the local file system of the user and the",
    "start": "1686399",
    "end": "1694159"
  },
  {
    "text": "third attack will be how to execute arbitrary commands without injecting Shell Code nor using",
    "start": "1694159",
    "end": "1701760"
  },
  {
    "text": "R so flash player holds an object which I have called the security settings",
    "start": "1701760",
    "end": "1708519"
  },
  {
    "start": "1702000",
    "end": "1702000"
  },
  {
    "text": "object I don't know what's the real name and this object is somewhere on the hip",
    "start": "1708519",
    "end": "1714600"
  },
  {
    "text": "this object contains some interesting fields for example at offset 4 it",
    "start": "1714600",
    "end": "1719760"
  },
  {
    "text": "contains a DW indicating the current sandbox and at offset ox49 it contains a",
    "start": "1719760",
    "end": "1726799"
  },
  {
    "text": "single bite indicating if the camera is activated or not that is if the user has",
    "start": "1726799",
    "end": "1732640"
  },
  {
    "text": "granted access to the camera or not this object is somewhere on the hip",
    "start": "1732640",
    "end": "1738279"
  },
  {
    "text": "but fortunately we can obtain its address by following a chain of pointers",
    "start": "1738279",
    "end": "1744519"
  },
  {
    "text": "using the address of a shaded object which is an action script object as the",
    "start": "1744519",
    "end": "1749640"
  },
  {
    "text": "starting point so let's see how to locate this hity settings object in memory the first",
    "start": "1749640",
    "end": "1757519"
  },
  {
    "text": "step from our action script code is create is to create a shaded",
    "start": "1757519",
    "end": "1762720"
  },
  {
    "text": "object which is an action script object and by using our R primitive let's",
    "start": "1762720",
    "end": "1768679"
  },
  {
    "text": "assume that we have one we need to leak the address of this shaded",
    "start": "1768679",
    "end": "1774760"
  },
  {
    "text": "object and the second step is using the address of this shaded object as the",
    "start": "1774760",
    "end": "1782120"
  },
  {
    "text": "starting point we need to follow a chain of pointers that is the address of shaded objects then with the reference",
    "start": "1782120",
    "end": "1789399"
  },
  {
    "text": "the pointer of offet 18 then 0 C then 9 C and there we have the address of our",
    "start": "1789399",
    "end": "1796799"
  },
  {
    "text": "security settings but note that you have if you're trying to Port this to maybe a",
    "start": "1796799",
    "end": "1803200"
  },
  {
    "text": "different version of flash or different operating system that is Windows 8.1 versus Windows 10 or different",
    "start": "1803200",
    "end": "1809919"
  },
  {
    "text": "architecture that is 32bits versus 64bits you may need to check that if",
    "start": "1809919",
    "end": "1817159"
  },
  {
    "text": "these offsets remain the same I'm not sure maybe they chain they change across",
    "start": "1817159",
    "end": "1822919"
  },
  {
    "text": "different versions of of flash so you may need to do some reverse engineering",
    "start": "1822919",
    "end": "1829960"
  },
  {
    "text": "so so far we know how to locate these security settings object in memory let's",
    "start": "1830240",
    "end": "1836880"
  },
  {
    "text": "see how we can abuse it in order to gain unauthorized access to the camera and the microphone of the",
    "start": "1836880",
    "end": "1843679"
  },
  {
    "text": "user so when a flash file tries to access your camera or your microphone",
    "start": "1843679",
    "end": "1849679"
  },
  {
    "start": "1844000",
    "end": "1844000"
  },
  {
    "text": "flash will show you this security dialogue here flash is warning you that",
    "start": "1849679",
    "end": "1856399"
  },
  {
    "text": "this site is requesting camera access and that a malicious flash file could",
    "start": "1856399",
    "end": "1862480"
  },
  {
    "text": "attempt to record you so it's up to you if you decide to click on Allo or deny",
    "start": "1862480",
    "end": "1868360"
  },
  {
    "text": "but as long as you don't click on the allo button the camera remains not",
    "start": "1868360",
    "end": "1875880"
  },
  {
    "text": "activated so our goal here in this data only attack will be to turn on the",
    "start": "1875880",
    "end": "1881480"
  },
  {
    "text": "camera without user interaction that is when the user sees that and doesn't",
    "start": "1881480",
    "end": "1886519"
  },
  {
    "text": "click on any button they camera will still turn on so taking a look at the documentation",
    "start": "1886519",
    "end": "1894440"
  },
  {
    "text": "of the camera class from the action script documentation we can see that the camera class contains a property called",
    "start": "1894440",
    "end": "1901760"
  },
  {
    "text": "muted this is a Boolean value indicating whether the user has denied or allowed",
    "start": "1901760",
    "end": "1907799"
  },
  {
    "text": "access to the camera if we search The Flash binary for",
    "start": "1907799",
    "end": "1913000"
  },
  {
    "text": "the camera. muted string which is there there's the camera. muted string and",
    "start": "1913000",
    "end": "1920240"
  },
  {
    "text": "here we have camera do unmuted string and before that there's a call highlighted yellow which is called to a",
    "start": "1920240",
    "end": "1927480"
  },
  {
    "text": "function that I have called is camera muted and this function will just check",
    "start": "1927480",
    "end": "1932760"
  },
  {
    "text": "the value of the bite at offset ox49 of the security settings",
    "start": "1932760",
    "end": "1938240"
  },
  {
    "text": "object so the steps to activate the camera without user authorization are as simple",
    "start": "1938240",
    "end": "1945799"
  },
  {
    "text": "as this first we need need to find the security settings object in memory and",
    "start": "1945799",
    "end": "1951440"
  },
  {
    "text": "then we need to set the bite at offset ox49 of this security settings to one",
    "start": "1951440",
    "end": "1958320"
  },
  {
    "text": "and activating the camera will also Grant access to the",
    "start": "1958320",
    "end": "1963720"
  },
  {
    "text": "microphone so implementing this idea from action script code looks like this",
    "start": "1963919",
    "end": "1971240"
  },
  {
    "text": "here again we are assuming that we have a read and write primitive the read",
    "start": "1971240",
    "end": "1976720"
  },
  {
    "text": "primitive should be orbitary so we can read from orbitary addresses and the",
    "start": "1976720",
    "end": "1982880"
  },
  {
    "text": "right primitive is May it should it may be not so powerful as long as we can",
    "start": "1982880",
    "end": "1989080"
  },
  {
    "text": "change a value from zero to one it should",
    "start": "1989080",
    "end": "1993519"
  },
  {
    "text": "work first we need to obtain the address",
    "start": "1996960",
    "end": "2002039"
  },
  {
    "text": "of a shaded object then we need to follow the the a chain of pointers that",
    "start": "2002039",
    "end": "2009200"
  },
  {
    "text": "is starting from the Shaded object we read the pointer at offset 18 then the",
    "start": "2009200",
    "end": "2014760"
  },
  {
    "text": "pointer at offset c0 C then the points are at offset 9 C and then there we have",
    "start": "2014760",
    "end": "2021200"
  },
  {
    "text": "the Shaded object sorry the security settings object finally we just need to set the bite at offset 49 to one by",
    "start": "2021200",
    "end": "2029120"
  },
  {
    "text": "using our right primitive so once we have done this we",
    "start": "2029120",
    "end": "2036760"
  },
  {
    "text": "are ready to start capturing frames from the camera and we may upload it to our",
    "start": "2036760",
    "end": "2042760"
  },
  {
    "text": "server for example this is just standard action script code to access the camera",
    "start": "2042760",
    "end": "2050599"
  },
  {
    "text": "uh this is there's nothing special here it's it it just here takes a frames from",
    "start": "2050599",
    "end": "2056599"
  },
  {
    "text": "the camera and it will use the URL request class in order to upload the",
    "start": "2056599",
    "end": "2061800"
  },
  {
    "text": "captures to a remote server so let's go with the first",
    "start": "2061800",
    "end": "2069720"
  },
  {
    "text": "demo here we have a Windows 8.1 update 3",
    "start": "2069720",
    "end": "2076200"
  },
  {
    "text": "virtual machine with Internet Explorer 11 and",
    "start": "2076200",
    "end": "2082358"
  },
  {
    "text": "this Windows 8 machine is running a vulnerable version of Flash in fact it",
    "start": "2082359",
    "end": "2088040"
  },
  {
    "text": "is vulnerable to the to the CBE 20150311 I told you at the beginning of",
    "start": "2088040",
    "end": "2094200"
  },
  {
    "text": "the talk so you usually",
    "start": "2094200",
    "end": "2099440"
  },
  {
    "text": "when when you try to when a flash file tries to access the camera you'll see",
    "start": "2099440",
    "end": "2105440"
  },
  {
    "text": "something like this this is just a a test Flash application I did to test",
    "start": "2105440",
    "end": "2111160"
  },
  {
    "text": "that there's a camera available so you usually see this and as",
    "start": "2111160",
    "end": "2117920"
  },
  {
    "text": "long as you don't click on Allo the flash file is not able to access the webcam which I have here",
    "start": "2117920",
    "end": "2125680"
  },
  {
    "text": "right so I'll show you a live demonstration of",
    "start": "2125680",
    "end": "2131079"
  },
  {
    "text": "this technique to gain unauthorized access to the camera this is a Showcase of my HTML",
    "start": "2131079",
    "end": "2141079"
  },
  {
    "text": "skills pretty nice right so I click on this webcam demo link and it will show",
    "start": "2141079",
    "end": "2149520"
  },
  {
    "text": "the the normal screen of the camera uh I I won't click on the io",
    "start": "2149520",
    "end": "2156319"
  },
  {
    "text": "button and anyways the camera will activate so I click here so I putting my",
    "start": "2156319",
    "end": "2163359"
  },
  {
    "text": "hands here as you can see nothing is clicking anything and now here it",
    "start": "2163359",
    "end": "2170119"
  },
  {
    "text": "is so now you even the the d security",
    "start": "2170240",
    "end": "2176000"
  },
  {
    "text": "dialogue is there but the the flash file has access to the camera so right now it",
    "start": "2176000",
    "end": "2182000"
  },
  {
    "text": "could be capturing frames and sending them anywhere",
    "start": "2182000",
    "end": "2187599"
  },
  {
    "text": "so let's move on to the second data only attack this is how to escalate our",
    "start": "2190160",
    "end": "2198160"
  },
  {
    "text": "privileges from the remote restricted soundbox to the privileged local trusted",
    "start": "2198160",
    "end": "2205800"
  },
  {
    "text": "soundbox flash uh Flash Player loads different flash files into different",
    "start": "2205800",
    "end": "2211440"
  },
  {
    "start": "2206000",
    "end": "2206000"
  },
  {
    "text": "sboxes according to their origin there are four different sandboxes the the L",
    "start": "2211440",
    "end": "2217680"
  },
  {
    "text": "privileged is called the remote sandbox these and flash files loaded",
    "start": "2217680",
    "end": "2223440"
  },
  {
    "text": "into a web browser are loaded into this remote sandbox which is the less privileged one then we have two",
    "start": "2223440",
    "end": "2231000"
  },
  {
    "text": "intermediate sandboxes which are called local with Network and local with file system local with network means that the",
    "start": "2231000",
    "end": "2238800"
  },
  {
    "text": "file is loaded from a local resource and it has access to the network but it",
    "start": "2238800",
    "end": "2245800"
  },
  {
    "text": "won't have access to the local f system this is like this be because if a",
    "start": "2245800",
    "end": "2251240"
  },
  {
    "text": "malicious flash file has both access to the network and to the file system it",
    "start": "2251240",
    "end": "2257000"
  },
  {
    "text": "could try to steal our files and upload them to a remote server in the same way",
    "start": "2257000",
    "end": "2263040"
  },
  {
    "text": "there's the local with file system soundbox in which flash files have access to the local f file system but",
    "start": "2263040",
    "end": "2269640"
  },
  {
    "text": "they cannot create network connections and on top of that we have the local trusted sandbox which is the",
    "start": "2269640",
    "end": "2276920"
  },
  {
    "text": "most the more privileged one flash files loaded here have access to both the",
    "start": "2276920",
    "end": "2283000"
  },
  {
    "text": "network and the file system so our goal here is to move from the remote sandbox",
    "start": "2283000",
    "end": "2289200"
  },
  {
    "text": "where flash where our flash file is loaded all the way up to the local trusted",
    "start": "2289200",
    "end": "2296040"
  },
  {
    "text": "sandbox so the current sandbox in which our flash file is loaded can be queried",
    "start": "2296040",
    "end": "2302359"
  },
  {
    "text": "from action script by accessing the sandbox type property of the security CL",
    "start": "2302359",
    "end": "2308839"
  },
  {
    "text": "if we search the The Flash binary for the names of these sandboxes that is",
    "start": "2308839",
    "end": "2315160"
  },
  {
    "text": "local trusted local with network Etc we can find that those names are referenced",
    "start": "2315160",
    "end": "2320960"
  },
  {
    "text": "here I'm not sure if you can see it but the names are referenced here it says",
    "start": "2320960",
    "end": "2326000"
  },
  {
    "text": "local trusted local with network local with file and highlighted in yellow we can",
    "start": "2326000",
    "end": "2333079"
  },
  {
    "text": "see that this code is reading the sandbox type field from the offset four",
    "start": "2333079",
    "end": "2338440"
  },
  {
    "text": "of the security settings object so this field can contain four",
    "start": "2338440",
    "end": "2345000"
  },
  {
    "text": "different values meaning for different soundbox types zero means remote one is",
    "start": "2345000",
    "end": "2351440"
  },
  {
    "text": "local with file system two is local with network and three is local trusted so",
    "start": "2351440",
    "end": "2358440"
  },
  {
    "text": "our goal here is to overwrite this dword located at offset four of the security",
    "start": "2358440",
    "end": "2364079"
  },
  {
    "text": "settings objects with a value number three right so moving from The Limited remote",
    "start": "2364079",
    "end": "2372839"
  },
  {
    "text": "sandbox to the privileged local sandbox is as simple as this first we need to",
    "start": "2372839",
    "end": "2379319"
  },
  {
    "text": "locate the security settings object in memory and I explained how to do that by",
    "start": "2379319",
    "end": "2384440"
  },
  {
    "text": "following a chain of pointers using a shared object at the as their sorry as the starting point and then we just need",
    "start": "2384440",
    "end": "2391960"
  },
  {
    "text": "to use a right memory corruption primitive in order to set the dword at",
    "start": "2391960",
    "end": "2397400"
  },
  {
    "text": "offset four of the security settings to Value",
    "start": "2397400",
    "end": "2402720"
  },
  {
    "text": "three so implementing this idea in order to escalate our privileges from action",
    "start": "2402880",
    "end": "2409839"
  },
  {
    "text": "script goes like this first we obtain the address of our shaded object object",
    "start": "2409839",
    "end": "2416200"
  },
  {
    "text": "by using our red primitive then we follow the chain of pointers that is the",
    "start": "2416200",
    "end": "2421440"
  },
  {
    "text": "pointers out of set 18 then 0c then 9C and finally we use our right",
    "start": "2421440",
    "end": "2428640"
  },
  {
    "text": "primitive in order to overwrite the dword at offset four of the security",
    "start": "2428640",
    "end": "2434640"
  },
  {
    "text": "settings object with a three this way we are escalating our privileges to the",
    "start": "2434640",
    "end": "2440920"
  },
  {
    "text": "local trusted sandbox so escalating to the local trusted sandbox means that our",
    "start": "2440920",
    "end": "2446920"
  },
  {
    "text": "flash file now has access to both the local file system and to the network so",
    "start": "2446920",
    "end": "2452880"
  },
  {
    "text": "we can steal files and upload them to our server",
    "start": "2452880",
    "end": "2459240"
  },
  {
    "text": "so once we have overwritten the sandbox type that is at that step we just can",
    "start": "2459359",
    "end": "2467160"
  },
  {
    "text": "start reading orbitary files from the local F system of the user here I'm",
    "start": "2467160",
    "end": "2472800"
  },
  {
    "text": "trying to a file called secret do dox from the documents folder and in order",
    "start": "2472800",
    "end": "2480160"
  },
  {
    "text": "to do that I'm using the file protocol as you can see at the top together with",
    "start": "2480160",
    "end": "2485839"
  },
  {
    "text": "the URL loader class this way once we get the contents of the file we are",
    "start": "2485839",
    "end": "2491960"
  },
  {
    "text": "ready to upload them to to our server and this is just standard action script",
    "start": "2491960",
    "end": "2497599"
  },
  {
    "text": "code to send data to a server by using the URL request",
    "start": "2497599",
    "end": "2503520"
  },
  {
    "text": "class so let's go with the second demo in this",
    "start": "2503520",
    "end": "2510480"
  },
  {
    "text": "case I'll try to cre the contents of this flag file which is located on the",
    "start": "2510480",
    "end": "2518400"
  },
  {
    "text": "desktop it has this text hello everyone at blackhead Europe 2015 let's change it",
    "start": "2518400",
    "end": "2524920"
  },
  {
    "text": "for something El say say say a phrase or a word annoying phone annoying phone an",
    "start": "2524920",
    "end": "2534200"
  },
  {
    "text": "phone right",
    "start": "2534200",
    "end": "2539119"
  },
  {
    "text": "so this is the sandbox demo it will",
    "start": "2542880",
    "end": "2548200"
  },
  {
    "text": "create specially crafted flash file which will overwrite the soundbox type",
    "start": "2548200",
    "end": "2553640"
  },
  {
    "text": "of the security settings object in order to escalate privileges to the local trusted sandbox and read the contents of",
    "start": "2553640",
    "end": "2561200"
  },
  {
    "text": "that of that file in the desktop so I click on",
    "start": "2561200",
    "end": "2567000"
  },
  {
    "text": "it so there it is annoying",
    "start": "2569520",
    "end": "2575800"
  },
  {
    "text": "phone so once I have read the contents of the file I can do whatever I want for",
    "start": "2575800",
    "end": "2581839"
  },
  {
    "text": "example upload it to a remote server or whatever in order to exfiltrate orbitary",
    "start": "2581839",
    "end": "2589720"
  },
  {
    "text": "files so the third data only attack is about how to execute arbitrary commands",
    "start": "2593319",
    "end": "2600520"
  },
  {
    "text": "without using Shell Code nor drop so as I said at the beginning of the",
    "start": "2600520",
    "end": "2607480"
  },
  {
    "start": "2603000",
    "end": "2603000"
  },
  {
    "text": "talk contraflow guard checks that the target of an indirect call is one of the",
    "start": "2607480",
    "end": "2613000"
  },
  {
    "text": "addresses identified as valid and it is possible to abuse legitimate or safe",
    "start": "2613000",
    "end": "2620359"
  },
  {
    "text": "locations to do something useful from an attacker's perspective for example you",
    "start": "2620359",
    "end": "2625640"
  },
  {
    "text": "we can abuse it in order to execute commands without resorting to use Shell Code or R and let me say that uh there",
    "start": "2625640",
    "end": "2634680"
  },
  {
    "text": "was an overlapping in the discovery of this technique with researcher juki Chen",
    "start": "2634680",
    "end": "2640520"
  },
  {
    "text": "with which presented here yesterday and he presented this technique first at the",
    "start": "2640520",
    "end": "2645839"
  },
  {
    "text": "ciscon 2015 conference so cudos to him so one of those functions identified",
    "start": "2645839",
    "end": "2655520"
  },
  {
    "text": "as valid during compilation time is the wixc function which belongs to the caral",
    "start": "2655520",
    "end": "2661079"
  },
  {
    "text": "32 D nothing will stop us from replacing theit table of an object with a fake V",
    "start": "2661079",
    "end": "2668240"
  },
  {
    "text": "table containing a pointer to the Windex function because this function is totally legitimate for indirect calls so",
    "start": "2668240",
    "end": "2676599"
  },
  {
    "text": "if we are able to either control or overwrite the first argument that is",
    "start": "2676599",
    "end": "2682680"
  },
  {
    "text": "passed to the virtual method being invoked we can craft a call to wixc with",
    "start": "2682680",
    "end": "2688240"
  },
  {
    "text": "an orbitary string as its parameter",
    "start": "2688240",
    "end": "2694280"
  },
  {
    "text": "so I you should be able to implement this in a lot of ways but I'll tell you",
    "start": "2694280",
    "end": "2699839"
  },
  {
    "text": "about the particular implementation I did of this technique I found out that",
    "start": "2699839",
    "end": "2707200"
  },
  {
    "text": "when calling the two string method on a vector object the second function",
    "start": "2707200",
    "end": "2712559"
  },
  {
    "text": "pointer of its B table is called and it receives the DW stored at offset eight",
    "start": "2712559",
    "end": "2719079"
  },
  {
    "text": "of the vector as its first argument so by using a right primitive we could try",
    "start": "2719079",
    "end": "2726000"
  },
  {
    "text": "to overwrite the memory pointed by Vector Plus 8 with a string of the",
    "start": "2726000",
    "end": "2731839"
  },
  {
    "text": "command we want to execute for example Cal for demonstration purposes",
    "start": "2731839",
    "end": "2737760"
  },
  {
    "text": "right also by using a read primitive we can calculate the address of the wixc",
    "start": "2737760",
    "end": "2743599"
  },
  {
    "text": "function and we need to store it as the second function pointer of our fake V",
    "start": "2743599",
    "end": "2750160"
  },
  {
    "text": "table so then we need to use again our right primitive in order to replace the",
    "start": "2750160",
    "end": "2756520"
  },
  {
    "text": "V pointer of the vector with the address of our F table which contains the",
    "start": "2756520",
    "end": "2762119"
  },
  {
    "text": "address of wxc as its second function pointer and finally we need to invoke",
    "start": "2762119",
    "end": "2768119"
  },
  {
    "text": "the two string method on this corrupted Vector object in order to craft equal to",
    "start": "2768119",
    "end": "2774440"
  },
  {
    "text": "wixc receiving the Cal string as its argument and this way we are executing",
    "start": "2774440",
    "end": "2781240"
  },
  {
    "text": "code without injecting Shell Code nor using drop",
    "start": "2781240",
    "end": "2787480"
  },
  {
    "text": "so let's explain this exploitation idea in a graphical way again here we have a",
    "start": "2787640",
    "end": "2793839"
  },
  {
    "text": "vector object which contains the elements of the vector at the bottom and also the vector",
    "start": "2793839",
    "end": "2800040"
  },
  {
    "text": "metadata in the metadata we can find at offset 8 a pointer pointing somewhere on",
    "start": "2800040",
    "end": "2806400"
  },
  {
    "text": "the hip and actually I don't know what's there in that memory I know that it's",
    "start": "2806400",
    "end": "2811559"
  },
  {
    "text": "pointer somewhere on the hip and I want to overwrite that memory there",
    "start": "2811559",
    "end": "2817559"
  },
  {
    "text": "with the C string which is what I want to execute also there's a pointer to a",
    "start": "2817559",
    "end": "2824680"
  },
  {
    "text": "table and this is the original betable of the vector and the second function",
    "start": "2824680",
    "end": "2830319"
  },
  {
    "text": "pointer highlighted in red is the one being invoked when we call to a string on this Vector object so the",
    "start": "2830319",
    "end": "2838079"
  },
  {
    "text": "exploitation idea is to create this state by using",
    "start": "2838079",
    "end": "2845640"
  },
  {
    "start": "2840000",
    "end": "2840000"
  },
  {
    "text": "our right primitive we are writing the string we want to execute that is C plus",
    "start": "2845640",
    "end": "2851160"
  },
  {
    "text": "the terminating null and also we are overwriting the vable pointer so now it",
    "start": "2851160",
    "end": "2857359"
  },
  {
    "text": "points to our fake B table and our fake B table at offset 4 that is its second",
    "start": "2857359",
    "end": "2863079"
  },
  {
    "text": "element contains the address of the wixc function so after corrupting the vector",
    "start": "2863079",
    "end": "2869880"
  },
  {
    "text": "object this way when we call to a string on this Vector object that will result",
    "start": "2869880",
    "end": "2875480"
  },
  {
    "text": "in equal to when EXC with Cal as its",
    "start": "2875480",
    "end": "2880559"
  },
  {
    "text": "argument so let's go with a live demonstration of this last",
    "start": "2880559",
    "end": "2889000"
  },
  {
    "text": "attack so here we have the last one of course I'll try to execute a calculator",
    "start": "2892480",
    "end": "2900440"
  },
  {
    "text": "so I'll click on it and if everything goes well we can see see a lot of",
    "start": "2900440",
    "end": "2907760"
  },
  {
    "text": "calculators because one is not",
    "start": "2907760",
    "end": "2911640"
  },
  {
    "text": "enough okay I'll kill all of them because it's going to kill my",
    "start": "2912880",
    "end": "2919640"
  },
  {
    "text": "machine so conclusions control flow guard is a nice",
    "start": "2929920",
    "end": "2937000"
  },
  {
    "text": "exploitation mitigation which does raise the cost of exploiting memory corruption",
    "start": "2937000",
    "end": "2942799"
  },
  {
    "text": "vulnerabilities instead of sh starting a r chain now we need to spend time and",
    "start": "2942799",
    "end": "2950559"
  },
  {
    "text": "effort in trying to bypass it that is before control for guard once we gained",
    "start": "2950559",
    "end": "2957160"
  },
  {
    "text": "code execution that is one we can once we can hijack the normal execution flow we just needed to modify the execution",
    "start": "2957160",
    "end": "2965480"
  },
  {
    "text": "flow in order to start our first Rob Gadget and now it stops us so we need to",
    "start": "2965480",
    "end": "2971559"
  },
  {
    "text": "spend additional effort and additional time in order to First bypass CFG and",
    "start": "2971559",
    "end": "2977040"
  },
  {
    "text": "then trying to do something also I think that just ins",
    "start": "2977040",
    "end": "2982359"
  },
  {
    "text": "sign compilers are likely to undermine the effectiveness of contraflow guard in other software unless uh people puts",
    "start": "2982359",
    "end": "2990799"
  },
  {
    "text": "special effort into hardening them that is into protecting the code generated at",
    "start": "2990799",
    "end": "2995880"
  },
  {
    "text": "run time because Vis Visual Studio that is the compiler does a great work at",
    "start": "2995880",
    "end": "3001839"
  },
  {
    "text": "identifying valid targets valid Cod targets however on code generated at R",
    "start": "3001839",
    "end": "3008240"
  },
  {
    "text": "time it's a bit different the developer needs to use the new memory management",
    "start": "3008240",
    "end": "3013920"
  },
  {
    "text": "flags and the new memory management functions so I think that adobe with",
    "start": "3013920",
    "end": "3020240"
  },
  {
    "text": "Internet Explorer did it well that is they are properly protecting now the Shan compiler but any other software",
    "start": "3020240",
    "end": "3027960"
  },
  {
    "text": "embedding for example JavaScript engines which contain just insign compilers or",
    "start": "3027960",
    "end": "3033359"
  },
  {
    "text": "Java or whatever contains just in time uh they may end up undermining the",
    "start": "3033359",
    "end": "3039799"
  },
  {
    "text": "effectiveness of the CFG if they are not specially protected and finally data only attacks",
    "start": "3039799",
    "end": "3046960"
  },
  {
    "text": "are really hard to detect or prevent here we are not injecting Shell Code we",
    "start": "3046960",
    "end": "3052440"
  },
  {
    "text": "are not doing Drop we are just modifying maybe single bides or dwords that is the",
    "start": "3052440",
    "end": "3058559"
  },
  {
    "text": "internal state of the program in order to obtain some advantage and I think",
    "start": "3058559",
    "end": "3064680"
  },
  {
    "text": "that we may see an increase in this kind of data only attacks as modifying the",
    "start": "3064680",
    "end": "3070319"
  },
  {
    "text": "normal execution flow of programs becomes harder and harder due to mitigations like cont flow guard for",
    "start": "3070319",
    "end": "3078040"
  },
  {
    "text": "example so that's it thank you very much for attending this presentation so do you",
    "start": "3078040",
    "end": "3085160"
  },
  {
    "start": "3081000",
    "end": "3081000"
  },
  {
    "text": "have any questions",
    "start": "3085160",
    "end": "3088558"
  },
  {
    "text": "yes the address you could have also",
    "start": "3094760",
    "end": "3100319"
  },
  {
    "text": "Function",
    "start": "3100319",
    "end": "3103319"
  },
  {
    "text": "One um first for the first part of equation",
    "start": "3105720",
    "end": "3112040"
  },
  {
    "text": "yes first I need to some way determine the address of wixc for example I",
    "start": "3112040",
    "end": "3118000"
  },
  {
    "text": "already had a read primitive so it was really straightforward once we once I",
    "start": "3118000",
    "end": "3124200"
  },
  {
    "text": "was able to leak a pointer belonging to Kel 32 I was able to calculate its",
    "start": "3124200",
    "end": "3130640"
  },
  {
    "text": "address and the second part of the question",
    "start": "3130640",
    "end": "3135040"
  },
  {
    "text": "was set process valid call",
    "start": "3135880",
    "end": "3140119"
  },
  {
    "text": "targets uh I think I think it it should be possible to do it if you are able to",
    "start": "3145040",
    "end": "3150760"
  },
  {
    "text": "to preparate the arguments for this new function which are five that is it's a little bit harder than wixc which has",
    "start": "3150760",
    "end": "3158079"
  },
  {
    "text": "takes one but I think that it should work if you are able to craft a call to",
    "start": "3158079",
    "end": "3163359"
  },
  {
    "text": "a valid function it should work I think",
    "start": "3163359",
    "end": "3170160"
  },
  {
    "text": "yes how do others",
    "start": "3170160",
    "end": "3174640"
  },
  {
    "text": "sorry could you repeat please that FL well you",
    "start": "3176960",
    "end": "3183920"
  },
  {
    "text": "ATS Javas uh no I didn't but I'm pretty sure",
    "start": "3183920",
    "end": "3190040"
  },
  {
    "text": "that unless they are doing something like in a proactive way maybe they are",
    "start": "3190040",
    "end": "3195920"
  },
  {
    "text": "not properly protecting the code generated at the run time Al even this is pretty new uh flash",
    "start": "3195920",
    "end": "3205559"
  },
  {
    "text": "started H hardening the sh in time compiler just in June this year and so I I think that",
    "start": "3205559",
    "end": "3213200"
  },
  {
    "text": "other sh in time compilers may be unprotected I guess and there are not",
    "start": "3213200",
    "end": "3219079"
  },
  {
    "text": "just uh web browsers for example uh I don't know mongod DB uh has flash H",
    "start": "3219079",
    "end": "3226200"
  },
  {
    "text": "sorry has JavaScript engine so maybe that's not even protected and I don't",
    "start": "3226200",
    "end": "3232520"
  },
  {
    "text": "know how many applications are using just in time compilers I guess a",
    "start": "3232520",
    "end": "3238559"
  },
  {
    "text": "lot so any other questions don't be shy",
    "start": "3239040",
    "end": "3245119"
  },
  {
    "text": "yes theg",
    "start": "3245119",
    "end": "3248599"
  },
  {
    "text": "challenge so the question is after mitigation do you have now an effective or in the future how",
    "start": "3251520",
    "end": "3260880"
  },
  {
    "text": "challeng um the vector technique was like the standard uh way to obtain read",
    "start": "3261119",
    "end": "3268520"
  },
  {
    "text": "and WR Primitives so you now nowadays you need to it's like a challenge you",
    "start": "3268520",
    "end": "3274720"
  },
  {
    "text": "need to find another way to to get your read and WR Primitives I don't know",
    "start": "3274720",
    "end": "3280520"
  },
  {
    "text": "what's the the the the current technique to to obtain read R Primitives it",
    "start": "3280520",
    "end": "3287920"
  },
  {
    "text": "probably should be doable but I don't know how to do it right now",
    "start": "3287920",
    "end": "3294760"
  },
  {
    "text": "yes maybe it's becoming more challenging at least they are patching the the easier ways that is overwriting the",
    "start": "3297119",
    "end": "3303319"
  },
  {
    "text": "length of a vector type so you can index anything in the memory was like trivial",
    "start": "3303319",
    "end": "3309480"
  },
  {
    "text": "so I think they are going the the right way that is at least they are hardening",
    "start": "3309480",
    "end": "3314680"
  },
  {
    "text": "the easier ways probably with enough work you should be able to obtain new",
    "start": "3314680",
    "end": "3320359"
  },
  {
    "text": "memory Primitives but I think they are going the right way that is hardening",
    "start": "3320359",
    "end": "3325400"
  },
  {
    "text": "the the easiest once and as I said before probably you don't need a an",
    "start": "3325400",
    "end": "3332200"
  },
  {
    "text": "orbitary right primitive even having a restricted one one for example increment",
    "start": "3332200",
    "end": "3338000"
  },
  {
    "text": "by one a memory address may work for you or something like that for example",
    "start": "3338000",
    "end": "3343440"
  },
  {
    "text": "turning a zero into a one may be enough to turn on a Boolean value so the",
    "start": "3343440",
    "end": "3348960"
  },
  {
    "text": "program behaves different so I think that you need a powerful read primitive",
    "start": "3348960",
    "end": "3354640"
  },
  {
    "text": "and the right primitive may be a less bit",
    "start": "3354640",
    "end": "3360280"
  },
  {
    "text": "powerful any other question yes do you think lot of these attacks could be eliminated by implementing a separated",
    "start": "3361520",
    "end": "3369240"
  },
  {
    "text": "Heap that you are only allowed to allocate same or type of",
    "start": "3369240",
    "end": "3375079"
  },
  {
    "text": "object uh are you asking if it's possible to protect against this TPS in",
    "start": "3375079",
    "end": "3381760"
  },
  {
    "text": "order to protect against data own attacks um well in general because then you wouldn't necessarily have that same",
    "start": "3381760",
    "end": "3389039"
  },
  {
    "text": "read and right with you if you had isolated for a different type of",
    "start": "3389039",
    "end": "3395359"
  },
  {
    "text": "object um regarding the regarding that I think that they",
    "start": "3395359",
    "end": "3403799"
  },
  {
    "text": "protecting against data only is I don't know if it's possible I don't want to say it's impossible but it's really hard",
    "start": "3403799",
    "end": "3411520"
  },
  {
    "text": "there's always something that can be triggered uh sorry that can be overwritten and the the behavior of the",
    "start": "3411520",
    "end": "3418559"
  },
  {
    "text": "program will be different my guess is that using isolated hips would not change",
    "start": "3418559",
    "end": "3426960"
  },
  {
    "text": "that but that's where I think I'm not really sure there's always something",
    "start": "3426960",
    "end": "3433319"
  },
  {
    "text": "that eventually you can modify in order to modify the behavior of the",
    "start": "3433319",
    "end": "3440920"
  },
  {
    "text": "program any other question",
    "start": "3442079",
    "end": "3446599"
  },
  {
    "text": "anyone well thank you very much for attending",
    "start": "3452480",
    "end": "3457760"
  },
  {
    "text": "[Applause]",
    "start": "3458380",
    "end": "3463659"
  }
]