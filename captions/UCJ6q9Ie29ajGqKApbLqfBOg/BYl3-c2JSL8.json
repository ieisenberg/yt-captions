[
  {
    "text": "hello uh my name is nanel Rubin and uh",
    "start": "760",
    "end": "4359"
  },
  {
    "text": "today we will talk about",
    "start": "4359",
    "end": "6560"
  },
  {
    "text": "Pearl last year I've presented a talk",
    "start": "6560",
    "end": "9480"
  },
  {
    "text": "named The Pearl Jam at 31 C3 in Hamburg",
    "start": "9480",
    "end": "13839"
  },
  {
    "text": "in that talk I've pointed out several",
    "start": "13839",
    "end": "16720"
  },
  {
    "text": "nonintuitive",
    "start": "16720",
    "end": "18160"
  },
  {
    "text": "features of the Pearl language and how",
    "start": "18160",
    "end": "21400"
  },
  {
    "text": "an attacker could exploit",
    "start": "21400",
    "end": "23560"
  },
  {
    "text": "them",
    "start": "23560",
    "end": "25199"
  },
  {
    "text": "unfortunately rather rather than fixing",
    "start": "25199",
    "end": "27760"
  },
  {
    "text": "the issues the Pearl Comm decided to",
    "start": "27760",
    "end": "31000"
  },
  {
    "text": "reject my talk so it was clear I had to",
    "start": "31000",
    "end": "35640"
  },
  {
    "text": "give another",
    "start": "35640",
    "end": "36760"
  },
  {
    "text": "talk this is why I'm proud to present",
    "start": "36760",
    "end": "40399"
  },
  {
    "text": "Pearl gem 2 the camel strikes",
    "start": "40399",
    "end": "44360"
  },
  {
    "text": "back all right so you may ask",
    "start": "44360",
    "end": "49000"
  },
  {
    "text": "yourselves why should anyone even talk",
    "start": "49000",
    "end": "51879"
  },
  {
    "text": "about Pearl isn't dead already well",
    "start": "51879",
    "end": "55760"
  },
  {
    "text": "surprisingly Pearl is still the top",
    "start": "55760",
    "end": "58559"
  },
  {
    "text": "ninth language being used today mainly",
    "start": "58559",
    "end": "62800"
  },
  {
    "text": "because your legacy systems use it some",
    "start": "62800",
    "end": "66520"
  },
  {
    "text": "of which are even accessible through the",
    "start": "66520",
    "end": "69560"
  },
  {
    "text": "internet now let me ask you a question",
    "start": "69560",
    "end": "73280"
  },
  {
    "text": "have you read this",
    "start": "73280",
    "end": "75159"
  },
  {
    "text": "book well obviously not because this",
    "start": "75159",
    "end": "78080"
  },
  {
    "text": "book cover is just a joke but it is",
    "start": "78080",
    "end": "81119"
  },
  {
    "text": "common knowledge that Pearl code is",
    "start": "81119",
    "end": "84200"
  },
  {
    "text": "quite difficult to read and when code is",
    "start": "84200",
    "end": "87320"
  },
  {
    "text": "this hard to maintain vulnerability",
    "start": "87320",
    "end": "89880"
  },
  {
    "text": "abilities are just waiting to be",
    "start": "89880",
    "end": "93200"
  },
  {
    "text": "exploited so in the previous talk the",
    "start": "93200",
    "end": "95920"
  },
  {
    "text": "one I gave at CCC I explained how pearls",
    "start": "95920",
    "end": "100079"
  },
  {
    "text": "lists are actually Expressions used in",
    "start": "100079",
    "end": "103439"
  },
  {
    "text": "many confusing ways I also showed CGI",
    "start": "103439",
    "end": "107560"
  },
  {
    "text": "parameter can create lists using regular",
    "start": "107560",
    "end": "110399"
  },
  {
    "text": "user input but most",
    "start": "110399",
    "end": "113560"
  },
  {
    "text": "importantly I showed that when the two",
    "start": "113560",
    "end": "116479"
  },
  {
    "text": "combine problems happen",
    "start": "116479",
    "end": "121159"
  },
  {
    "text": "now the real interesting part is how the",
    "start": "121159",
    "end": "123640"
  },
  {
    "text": "Pearl monks responded to that",
    "start": "123640",
    "end": "127759"
  },
  {
    "text": "talk now the main discussion took place",
    "start": "127759",
    "end": "130759"
  },
  {
    "text": "in a pearl monks Forum thread that began",
    "start": "130759",
    "end": "133280"
  },
  {
    "text": "with the claim sad news from Germany a",
    "start": "133280",
    "end": "137440"
  },
  {
    "text": "bit dramatic but okay after a long",
    "start": "137440",
    "end": "141599"
  },
  {
    "text": "discussion they came to the unavoidable",
    "start": "141599",
    "end": "145120"
  },
  {
    "text": "conclusion that the talk was in fact a",
    "start": "145120",
    "end": "148879"
  },
  {
    "text": "polemic",
    "start": "148879",
    "end": "150440"
  },
  {
    "text": "and they should all just piss on it",
    "start": "150440",
    "end": "153280"
  },
  {
    "text": "wink later they realized I'm just a",
    "start": "153280",
    "end": "156560"
  },
  {
    "text": "script Kitty preaching to other script",
    "start": "156560",
    "end": "158760"
  },
  {
    "text": "kitties and not just any script kitties",
    "start": "158760",
    "end": "161599"
  },
  {
    "text": "in their eyes the entire audience was",
    "start": "161599",
    "end": "165680"
  },
  {
    "text": "heterogenous group of chaotic punks who",
    "start": "165680",
    "end": "168840"
  },
  {
    "text": "love to see themselves in the hacker",
    "start": "168840",
    "end": "170760"
  },
  {
    "text": "image of Hollywood",
    "start": "170760",
    "end": "172599"
  },
  {
    "text": "media kind of",
    "start": "172599",
    "end": "174840"
  },
  {
    "text": "Hardcore so as the discussion continued",
    "start": "174840",
    "end": "178239"
  },
  {
    "text": "it just got more and and more ridiculous",
    "start": "178239",
    "end": "181599"
  },
  {
    "text": "as they even went as far as criticizing",
    "start": "181599",
    "end": "184799"
  },
  {
    "text": "the crude use of propaganda in the Cel",
    "start": "184799",
    "end": "189680"
  },
  {
    "text": "images at that point I started realizing",
    "start": "189680",
    "end": "193760"
  },
  {
    "text": "the Pearl Community didn't like my",
    "start": "193760",
    "end": "196080"
  },
  {
    "text": "talk the unfortunate part is that they",
    "start": "196080",
    "end": "199400"
  },
  {
    "text": "completely ignored all the valid",
    "start": "199400",
    "end": "201319"
  },
  {
    "text": "technical points because of some Chels",
    "start": "201319",
    "end": "204280"
  },
  {
    "text": "and funny images using many lame excuses",
    "start": "204280",
    "end": "208799"
  },
  {
    "text": "two of these lame excuses has been",
    "start": "208799",
    "end": "211599"
  },
  {
    "text": "repeated over and over again the first",
    "start": "211599",
    "end": "216560"
  },
  {
    "text": "excuse was that I should read the manual",
    "start": "216560",
    "end": "219760"
  },
  {
    "text": "which is weird because I thought I was",
    "start": "219760",
    "end": "222120"
  },
  {
    "text": "the only one who did and the second is",
    "start": "222120",
    "end": "225280"
  },
  {
    "text": "that I was talking about old Pearl and",
    "start": "225280",
    "end": "228000"
  },
  {
    "text": "not the new modern",
    "start": "228000",
    "end": "230959"
  },
  {
    "text": "Pearl keep these points in mind as I'll",
    "start": "230959",
    "end": "233959"
  },
  {
    "text": "break them later in the",
    "start": "233959",
    "end": "235599"
  },
  {
    "text": "presentation but enough with the intro",
    "start": "235599",
    "end": "238439"
  },
  {
    "text": "let's dive into the new new",
    "start": "238439",
    "end": "241560"
  },
  {
    "text": "Madness now Pearl is Wick typed meaning",
    "start": "241560",
    "end": "245560"
  },
  {
    "text": "it allows declaring variables without",
    "start": "245560",
    "end": "247959"
  },
  {
    "text": "specifying their data types of course",
    "start": "247959",
    "end": "251000"
  },
  {
    "text": "this functionality exists in many",
    "start": "251000",
    "end": "253159"
  },
  {
    "text": "Dynamic languages and is completely fine",
    "start": "253159",
    "end": "256000"
  },
  {
    "text": "and very",
    "start": "256000",
    "end": "258120"
  },
  {
    "text": "convenient but as usual Pearl took it to",
    "start": "258120",
    "end": "262840"
  },
  {
    "text": "a whole different",
    "start": "262840",
    "end": "264960"
  },
  {
    "text": "level Pearl went as far as removing data",
    "start": "264960",
    "end": "268000"
  },
  {
    "text": "types declarations from function",
    "start": "268000",
    "end": "270800"
  },
  {
    "text": "arguments you can see in this pseudo",
    "start": "270800",
    "end": "273199"
  },
  {
    "text": "code I'm just receiving two different",
    "start": "273199",
    "end": "275759"
  },
  {
    "text": "arguments without knowing what type they",
    "start": "275759",
    "end": "278880"
  },
  {
    "text": "are let me be clear about",
    "start": "278880",
    "end": "281960"
  },
  {
    "text": "that you don't get to choose whether you",
    "start": "281960",
    "end": "285080"
  },
  {
    "text": "want to specify argument data types or",
    "start": "285080",
    "end": "287639"
  },
  {
    "text": "not you can't specify what data types",
    "start": "287639",
    "end": "291479"
  },
  {
    "text": "you're expecting to get so even if I've",
    "start": "291479",
    "end": "294280"
  },
  {
    "text": "built a function that only works with",
    "start": "294280",
    "end": "297720"
  },
  {
    "text": "strings I have no way way of forcing",
    "start": "297720",
    "end": "300440"
  },
  {
    "text": "that at the function",
    "start": "300440",
    "end": "302400"
  },
  {
    "text": "declaration now that is",
    "start": "302400",
    "end": "306240"
  },
  {
    "text": "annoying the real kicker is how this",
    "start": "306240",
    "end": "309360"
  },
  {
    "text": "feature is used apparently it is very",
    "start": "309360",
    "end": "314120"
  },
  {
    "text": "common to write two completely different",
    "start": "314120",
    "end": "316960"
  },
  {
    "text": "blocks of code one that handle scalar",
    "start": "316960",
    "end": "319880"
  },
  {
    "text": "types like strings or ins and one that",
    "start": "319880",
    "end": "323120"
  },
  {
    "text": "handle non-scalar types like arrays or",
    "start": "323120",
    "end": "327080"
  },
  {
    "text": "hashes let me repeat that writing",
    "start": "327080",
    "end": "330720"
  },
  {
    "text": "multiple code for multiple data types in",
    "start": "330720",
    "end": "334720"
  },
  {
    "text": "one function is a pearl",
    "start": "334720",
    "end": "338479"
  },
  {
    "text": "standard and that is just sad you",
    "start": "338479",
    "end": "342800"
  },
  {
    "text": "shouldn't write redundant code because",
    "start": "342800",
    "end": "345680"
  },
  {
    "text": "the language Lakes the capability of",
    "start": "345680",
    "end": "347680"
  },
  {
    "text": "letting you decide which cases you don't",
    "start": "347680",
    "end": "350120"
  },
  {
    "text": "want to",
    "start": "350120",
    "end": "351479"
  },
  {
    "text": "handle by the way Pyon doesn't let you",
    "start": "351479",
    "end": "354440"
  },
  {
    "text": "declare your function arguments data",
    "start": "354440",
    "end": "356400"
  },
  {
    "text": "types too but unlike Pearl write in",
    "start": "356400",
    "end": "360000"
  },
  {
    "text": "redundant code to cover that up is",
    "start": "360000",
    "end": "363280"
  },
  {
    "text": "definitely not the standard Anyway said",
    "start": "363280",
    "end": "368199"
  },
  {
    "text": "as this may be this Pearl convention is",
    "start": "368199",
    "end": "371840"
  },
  {
    "text": "not dangerous the dangerous part begins",
    "start": "371840",
    "end": "375599"
  },
  {
    "text": "when hashes and arrays are considered as",
    "start": "375599",
    "end": "378639"
  },
  {
    "text": "secure data types mainly because they",
    "start": "378639",
    "end": "382160"
  },
  {
    "text": "cannot be created by user",
    "start": "382160",
    "end": "384440"
  },
  {
    "text": "input this results in this kind of code",
    "start": "384440",
    "end": "388360"
  },
  {
    "text": "where if the function argument is a hash",
    "start": "388360",
    "end": "391840"
  },
  {
    "text": "for example it is used unescaped in",
    "start": "391840",
    "end": "395360"
  },
  {
    "text": "dangerous",
    "start": "395360",
    "end": "396960"
  },
  {
    "text": "functions hashes specifically are",
    "start": "396960",
    "end": "399960"
  },
  {
    "text": "considered so secure that even if you",
    "start": "399960",
    "end": "403360"
  },
  {
    "text": "use taint mode which is some kind of",
    "start": "403360",
    "end": "405319"
  },
  {
    "text": "safe mode for p applications hash keys",
    "start": "405319",
    "end": "408560"
  },
  {
    "text": "are not tainted meaning they can be used",
    "start": "408560",
    "end": "411759"
  },
  {
    "text": "in dangerous functions without any",
    "start": "411759",
    "end": "414440"
  },
  {
    "text": "validation as opposed to any other data",
    "start": "414440",
    "end": "418199"
  },
  {
    "text": "type now this code appears a lot in",
    "start": "418199",
    "end": "422520"
  },
  {
    "text": "Pearl code and apart from the many bugs",
    "start": "422520",
    "end": "425440"
  },
  {
    "text": "this method can cause it also makes your",
    "start": "425440",
    "end": "428280"
  },
  {
    "text": "code",
    "start": "428280",
    "end": "430759"
  },
  {
    "text": "exploitable so we know function",
    "start": "430759",
    "end": "432919"
  },
  {
    "text": "arguments are of unknown data type and",
    "start": "432919",
    "end": "436319"
  },
  {
    "text": "we know developers treat hashes and",
    "start": "436319",
    "end": "438840"
  },
  {
    "text": "arrays as secure data types inserting",
    "start": "438840",
    "end": "441960"
  },
  {
    "text": "their values into dangerous functions",
    "start": "441960",
    "end": "445440"
  },
  {
    "text": "unescaped but this practices isn't",
    "start": "445440",
    "end": "448199"
  },
  {
    "text": "something that was created long time ago",
    "start": "448199",
    "end": "450759"
  },
  {
    "text": "and found only on redundant code because",
    "start": "450759",
    "end": "453919"
  },
  {
    "text": "of how the language is built it's",
    "start": "453919",
    "end": "456240"
  },
  {
    "text": "supposedly restriction type of",
    "start": "456240",
    "end": "459400"
  },
  {
    "text": "developing even now it is the natural",
    "start": "459400",
    "end": "462520"
  },
  {
    "text": "way to code when you're using Pearl so",
    "start": "462520",
    "end": "465840"
  },
  {
    "text": "even if you learn Pearl today which I'm",
    "start": "465840",
    "end": "468520"
  },
  {
    "text": "really hoping you won't you'll probably",
    "start": "468520",
    "end": "471240"
  },
  {
    "text": "use this kind of coding",
    "start": "471240",
    "end": "474599"
  },
  {
    "text": "standards but for now all we know is",
    "start": "474599",
    "end": "478039"
  },
  {
    "text": "that if we'll somehow managed to create",
    "start": "478039",
    "end": "481120"
  },
  {
    "text": "these secure data types with our user",
    "start": "481120",
    "end": "484919"
  },
  {
    "text": "input we could exploit the code so the",
    "start": "484919",
    "end": "489319"
  },
  {
    "text": "only question remaining",
    "start": "489319",
    "end": "491360"
  },
  {
    "text": "is what are we going to",
    "start": "491360",
    "end": "495080"
  },
  {
    "text": "exploit",
    "start": "495080",
    "end": "496759"
  },
  {
    "text": "Billa like every other peil project",
    "start": "496759",
    "end": "499599"
  },
  {
    "text": "Billa is heavily using functions that",
    "start": "499599",
    "end": "502879"
  },
  {
    "text": "treat scaler and nonscalar argument",
    "start": "502879",
    "end": "505680"
  },
  {
    "text": "types very differently and this is one",
    "start": "505680",
    "end": "508800"
  },
  {
    "text": "of them the load from DB function is",
    "start": "508800",
    "end": "511560"
  },
  {
    "text": "responsible for extracting object",
    "start": "511560",
    "end": "513560"
  },
  {
    "text": "specific data out of the",
    "start": "513560",
    "end": "516640"
  },
  {
    "text": "database like I just said it treats",
    "start": "516640",
    "end": "519640"
  },
  {
    "text": "scalers and in this case hashes very",
    "start": "519640",
    "end": "524240"
  },
  {
    "text": "differently if the function argument is",
    "start": "524240",
    "end": "526720"
  },
  {
    "text": "a hash it takes one of its values and",
    "start": "526720",
    "end": "530519"
  },
  {
    "text": "insert it s is UN escaped into an SQL",
    "start": "530519",
    "end": "535360"
  },
  {
    "text": "statement again because hashes are",
    "start": "535360",
    "end": "538480"
  },
  {
    "text": "considered secure",
    "start": "538480",
    "end": "540000"
  },
  {
    "text": "so there's no point of escaping them on",
    "start": "540000",
    "end": "543160"
  },
  {
    "text": "the other hand if the argument is a",
    "start": "543160",
    "end": "545720"
  },
  {
    "text": "scalar it converted into an integer and",
    "start": "545720",
    "end": "549040"
  },
  {
    "text": "only then use it in an SQL statement",
    "start": "549040",
    "end": "551959"
  },
  {
    "text": "because scalar values are not secure so",
    "start": "551959",
    "end": "555560"
  },
  {
    "text": "you have to escape",
    "start": "555560",
    "end": "557000"
  },
  {
    "text": "them this means that if we we could",
    "start": "557000",
    "end": "560040"
  },
  {
    "text": "control the function argument entirely",
    "start": "560040",
    "end": "563000"
  },
  {
    "text": "including its data type we could control",
    "start": "563000",
    "end": "566320"
  },
  {
    "text": "the SQL query effectively exploiting an",
    "start": "566320",
    "end": "570480"
  },
  {
    "text": "SQL injection attack by inserting a hash",
    "start": "570480",
    "end": "574160"
  },
  {
    "text": "containing that specific",
    "start": "574160",
    "end": "576680"
  },
  {
    "text": "value",
    "start": "576680",
    "end": "578279"
  },
  {
    "text": "but CGI input doesn't allow hashes right",
    "start": "578279",
    "end": "584120"
  },
  {
    "text": "the whole Pearl security module is built",
    "start": "584120",
    "end": "588519"
  },
  {
    "text": "on that",
    "start": "588519",
    "end": "590079"
  },
  {
    "text": "assumption the problem is that like us",
    "start": "590079",
    "end": "594480"
  },
  {
    "text": "developers are assuming CGI",
    "start": "594480",
    "end": "597640"
  },
  {
    "text": "input is the only input method available",
    "start": "597640",
    "end": "602920"
  },
  {
    "text": "CGI but CGI isn't the only way to go",
    "start": "602920",
    "end": "606720"
  },
  {
    "text": "Billa developers miss the fact that",
    "start": "606720",
    "end": "609760"
  },
  {
    "text": "their own system is also featuring an",
    "start": "609760",
    "end": "613800"
  },
  {
    "text": "XML RPC and a Json RPC both supporting",
    "start": "613800",
    "end": "618560"
  },
  {
    "text": "input of non-scalar data types like AR",
    "start": "618560",
    "end": "622560"
  },
  {
    "text": "arrays and",
    "start": "622560",
    "end": "624320"
  },
  {
    "text": "hashes so if we'll use one of these rpcs",
    "start": "624320",
    "end": "628120"
  },
  {
    "text": "sending our input parameter with a",
    "start": "628120",
    "end": "630240"
  },
  {
    "text": "malicious hash instead of just a regular",
    "start": "630240",
    "end": "633720"
  },
  {
    "text": "numeric parameter we will be able to",
    "start": "633720",
    "end": "636079"
  },
  {
    "text": "exploit the SQL",
    "start": "636079",
    "end": "638639"
  },
  {
    "text": "injection",
    "start": "638639",
    "end": "640160"
  },
  {
    "text": "so if we'll send this regular request",
    "start": "640160",
    "end": "643320"
  },
  {
    "text": "using the Json RPC interface the number",
    "start": "643320",
    "end": "646399"
  },
  {
    "text": "one will be used as the IDE of a bug to",
    "start": "646399",
    "end": "649680"
  },
  {
    "text": "extract but if we'll send this request",
    "start": "649680",
    "end": "653760"
  },
  {
    "text": "where instead of an integer will supply",
    "start": "653760",
    "end": "656440"
  },
  {
    "text": "a hash then suddenly we will be able to",
    "start": "656440",
    "end": "660040"
  },
  {
    "text": "inject any scale we'd like into that",
    "start": "660040",
    "end": "661839"
  },
  {
    "text": "statement effectively compromising the",
    "start": "661839",
    "end": "665000"
  },
  {
    "text": "entire database and as we know when when",
    "start": "665000",
    "end": "669160"
  },
  {
    "text": "a Billa database is",
    "start": "669160",
    "end": "671000"
  },
  {
    "text": "hacked news stories are popping all over",
    "start": "671000",
    "end": "673720"
  },
  {
    "text": "the world so when you look at this",
    "start": "673720",
    "end": "677480"
  },
  {
    "text": "request you realize that this is not a",
    "start": "677480",
    "end": "681560"
  },
  {
    "text": "sophisticated",
    "start": "681560",
    "end": "682800"
  },
  {
    "text": "vulnerability all I did was just change",
    "start": "682800",
    "end": "686880"
  },
  {
    "text": "the input data type and that's it the",
    "start": "686880",
    "end": "691079"
  },
  {
    "text": "system is compromised it was so heavily",
    "start": "691079",
    "end": "695240"
  },
  {
    "text": "built on the assumption that hashes are",
    "start": "695240",
    "end": "699360"
  },
  {
    "text": "secure that it offered me almost",
    "start": "699360",
    "end": "701800"
  },
  {
    "text": "unlimited access security wise once I",
    "start": "701800",
    "end": "704920"
  },
  {
    "text": "created it the funny thing about it is",
    "start": "704920",
    "end": "708800"
  },
  {
    "text": "that although it is so simple this",
    "start": "708800",
    "end": "712320"
  },
  {
    "text": "attack has existed for over five years",
    "start": "712320",
    "end": "717720"
  },
  {
    "text": "now so we now proved this unknown",
    "start": "718240",
    "end": "722399"
  },
  {
    "text": "argument type feature is a huge source",
    "start": "722399",
    "end": "727320"
  },
  {
    "text": "for",
    "start": "727320",
    "end": "728440"
  },
  {
    "text": "problems and we also know writing",
    "start": "728440",
    "end": "731200"
  },
  {
    "text": "different code to handle different data",
    "start": "731200",
    "end": "733240"
  },
  {
    "text": "types just causes a lot of false",
    "start": "733240",
    "end": "736639"
  },
  {
    "text": "assumptions but most importantly",
    "start": "736639",
    "end": "739160"
  },
  {
    "text": "treating non-scalar data types such as",
    "start": "739160",
    "end": "741800"
  },
  {
    "text": "hashes as secure just because they",
    "start": "741800",
    "end": "744279"
  },
  {
    "text": "supposedly can be created by the user is",
    "start": "744279",
    "end": "747839"
  },
  {
    "text": "very very bad just ask",
    "start": "747839",
    "end": "751760"
  },
  {
    "text": "Billa but the shocking part really is",
    "start": "751760",
    "end": "754800"
  },
  {
    "text": "that again this is the Pearl standard",
    "start": "754800",
    "end": "758639"
  },
  {
    "text": "you are not expected to use it you have",
    "start": "758639",
    "end": "761360"
  },
  {
    "text": "to as you don't have any other choice",
    "start": "761360",
    "end": "764839"
  },
  {
    "text": "this security mass is a fundamental part",
    "start": "764839",
    "end": "768320"
  },
  {
    "text": "of the",
    "start": "768320",
    "end": "770639"
  },
  {
    "text": "language but the problem is that",
    "start": "770639",
    "end": "773519"
  },
  {
    "text": "creating non-scalar data types is",
    "start": "773519",
    "end": "776120"
  },
  {
    "text": "impossible in some cases well we can't",
    "start": "776120",
    "end": "779240"
  },
  {
    "text": "rely that some kind of RPC will exist in",
    "start": "779240",
    "end": "782040"
  },
  {
    "text": "the code and support different data",
    "start": "782040",
    "end": "784720"
  },
  {
    "text": "types and we can create data types using",
    "start": "784720",
    "end": "787720"
  },
  {
    "text": "regular user",
    "start": "787720",
    "end": "789519"
  },
  {
    "text": "input",
    "start": "789519",
    "end": "791320"
  },
  {
    "text": "right well let's have a look at how the",
    "start": "791320",
    "end": "795160"
  },
  {
    "text": "three most popular CGI modules handle",
    "start": "795160",
    "end": "798480"
  },
  {
    "text": "different kind of",
    "start": "798480",
    "end": "799920"
  },
  {
    "text": "input first we'll take the most trivial",
    "start": "799920",
    "end": "802760"
  },
  {
    "text": "scenario a single valued parameter which",
    "start": "802760",
    "end": "805760"
  },
  {
    "text": "in this example the full parameter is",
    "start": "805760",
    "end": "807959"
  },
  {
    "text": "assigned the string bar",
    "start": "807959",
    "end": "810480"
  },
  {
    "text": "in this case a scalar is created on all",
    "start": "810480",
    "end": "813120"
  },
  {
    "text": "three modules which is which doesn't",
    "start": "813120",
    "end": "815720"
  },
  {
    "text": "really help us but is pretty much what",
    "start": "815720",
    "end": "818480"
  },
  {
    "text": "we've",
    "start": "818480",
    "end": "820240"
  },
  {
    "text": "expected but what happens if instead of",
    "start": "820240",
    "end": "823120"
  },
  {
    "text": "sending a single valued parameter we'll",
    "start": "823120",
    "end": "826000"
  },
  {
    "text": "send a multi-valued parameter like in",
    "start": "826000",
    "end": "829760"
  },
  {
    "text": "this request where the F parameter is",
    "start": "829760",
    "end": "832000"
  },
  {
    "text": "now assigned to",
    "start": "832000",
    "end": "834160"
  },
  {
    "text": "Strings now things are starting to get",
    "start": "834160",
    "end": "837759"
  },
  {
    "text": "complicated on cgpm a list is created",
    "start": "837759",
    "end": "842639"
  },
  {
    "text": "which is very useful for us but not what",
    "start": "842639",
    "end": "844639"
  },
  {
    "text": "we're after let's have a look at what",
    "start": "844639",
    "end": "848120"
  },
  {
    "text": "the new Pearl modules are Crea we'll see",
    "start": "848120",
    "end": "852120"
  },
  {
    "text": "that both of them are returning arrays",
    "start": "852120",
    "end": "855480"
  },
  {
    "text": "containing our values arrays what I",
    "start": "855480",
    "end": "859839"
  },
  {
    "text": "thought you can't create this kind of",
    "start": "859839",
    "end": "862160"
  },
  {
    "text": "data types with regular user input after",
    "start": "862160",
    "end": "865040"
  },
  {
    "text": "all they're considered",
    "start": "865040",
    "end": "866630"
  },
  {
    "text": "[Music]",
    "start": "866630",
    "end": "868040"
  },
  {
    "text": "safe but let's continue what happens if",
    "start": "868040",
    "end": "871160"
  },
  {
    "text": "instead of sending a regular value we'll",
    "start": "871160",
    "end": "873759"
  },
  {
    "text": "try and upload a",
    "start": "873759",
    "end": "876360"
  },
  {
    "text": "file now things are really getting out",
    "start": "876360",
    "end": "880120"
  },
  {
    "text": "of hand because cgpm now returns a file",
    "start": "880120",
    "end": "884000"
  },
  {
    "text": "descriptor and Catalyst modicious",
    "start": "884000",
    "end": "886839"
  },
  {
    "text": "returns a",
    "start": "886839",
    "end": "888279"
  },
  {
    "text": "hash",
    "start": "888279",
    "end": "890120"
  },
  {
    "text": "what we just exploited the most popular",
    "start": "890120",
    "end": "894360"
  },
  {
    "text": "P project in the world because they",
    "start": "894360",
    "end": "897440"
  },
  {
    "text": "assumed hashes can can't be created by",
    "start": "897440",
    "end": "899959"
  },
  {
    "text": "the user and now we're finding out that",
    "start": "899959",
    "end": "903600"
  },
  {
    "text": "not only we can create",
    "start": "903600",
    "end": "905680"
  },
  {
    "text": "hashes it's a",
    "start": "905680",
    "end": "909079"
  },
  {
    "text": "feature let's send a multi file upload",
    "start": "909639",
    "end": "913199"
  },
  {
    "text": "request watch closely because this is is",
    "start": "913199",
    "end": "916920"
  },
  {
    "text": "where it gets",
    "start": "916920",
    "end": "918600"
  },
  {
    "text": "ridiculous now cgpm returns a list of ID",
    "start": "918600",
    "end": "923120"
  },
  {
    "text": "scriptors Catalyst returns a list of",
    "start": "923120",
    "end": "925720"
  },
  {
    "text": "hashes and modul return an array of",
    "start": "925720",
    "end": "928519"
  },
  {
    "text": "objects",
    "start": "928519",
    "end": "930319"
  },
  {
    "text": "what almost any Pearl Project in the",
    "start": "930319",
    "end": "934360"
  },
  {
    "text": "world uses one of these modules for",
    "start": "934360",
    "end": "937639"
  },
  {
    "text": "Parson CGI input just think how many",
    "start": "937639",
    "end": "941720"
  },
  {
    "text": "developers assumed the exact same thing",
    "start": "941720",
    "end": "944959"
  },
  {
    "text": "Billa assumed and treated hashes and",
    "start": "944959",
    "end": "947680"
  },
  {
    "text": "arrays as secure data",
    "start": "947680",
    "end": "949920"
  },
  {
    "text": "types so if you're using cgpm instead of",
    "start": "949920",
    "end": "953560"
  },
  {
    "text": "the expected scalar value you could be",
    "start": "953560",
    "end": "955959"
  },
  {
    "text": "getting a list at file descriptor or a",
    "start": "955959",
    "end": "959120"
  },
  {
    "text": "list of F descriptors and if you're",
    "start": "959120",
    "end": "961199"
  },
  {
    "text": "using Catalyst you could receive a",
    "start": "961199",
    "end": "963160"
  },
  {
    "text": "scalar an array Ash or a list which",
    "start": "963160",
    "end": "966279"
  },
  {
    "text": "basically means any data",
    "start": "966279",
    "end": "969560"
  },
  {
    "text": "type",
    "start": "969560",
    "end": "971360"
  },
  {
    "text": "so expecting your function arguments to",
    "start": "971360",
    "end": "975399"
  },
  {
    "text": "be of a specific data type is",
    "start": "975399",
    "end": "978519"
  },
  {
    "text": "false expecting hashes and arrays to be",
    "start": "978519",
    "end": "982440"
  },
  {
    "text": "secure is also",
    "start": "982440",
    "end": "985480"
  },
  {
    "text": "false and expecting scalar only user",
    "start": "985480",
    "end": "990440"
  },
  {
    "text": "input is a major",
    "start": "990440",
    "end": "992839"
  },
  {
    "text": "false and to be honest it seems that in",
    "start": "992839",
    "end": "997079"
  },
  {
    "text": "Pearl expecting is false you just can't",
    "start": "997079",
    "end": "1001959"
  },
  {
    "text": "expect anything even the most basic of",
    "start": "1001959",
    "end": "1005440"
  },
  {
    "text": "things such as what data type your",
    "start": "1005440",
    "end": "1007759"
  },
  {
    "text": "variable is made of you just don't",
    "start": "1007759",
    "end": "1011079"
  },
  {
    "text": "know but I felt all of these points will",
    "start": "1011079",
    "end": "1015160"
  },
  {
    "text": "go unnoticed without an extreme EX",
    "start": "1015160",
    "end": "1019040"
  },
  {
    "text": "example of Pearl's",
    "start": "1019040",
    "end": "1021519"
  },
  {
    "text": "absurdity so I found an extreme example",
    "start": "1021519",
    "end": "1025839"
  },
  {
    "text": "one that will clearly show the",
    "start": "1025839",
    "end": "1028760"
  },
  {
    "text": "ridiculous nature of the language and",
    "start": "1028760",
    "end": "1031839"
  },
  {
    "text": "this is",
    "start": "1031839",
    "end": "1032640"
  },
  {
    "text": "it all this code does is print and",
    "start": "1032640",
    "end": "1037160"
  },
  {
    "text": "uploaded files content and to show you",
    "start": "1037160",
    "end": "1041240"
  },
  {
    "text": "how basic and simple it is I'll explain",
    "start": "1041240",
    "end": "1044678"
  },
  {
    "text": "each line the first line just creates a",
    "start": "1044679",
    "end": "1047959"
  },
  {
    "text": "new C Giant",
    "start": "1047959",
    "end": "1049360"
  },
  {
    "text": "so we could get the file from the user",
    "start": "1049360",
    "end": "1051840"
  },
  {
    "text": "the second line checks if a file has",
    "start": "1051840",
    "end": "1054760"
  },
  {
    "text": "been uploaded in the file parameter the",
    "start": "1054760",
    "end": "1057919"
  },
  {
    "text": "third line gets the file descriptor from",
    "start": "1057919",
    "end": "1060320"
  },
  {
    "text": "the CGI module and the fourth line just",
    "start": "1060320",
    "end": "1062880"
  },
  {
    "text": "Loops through the file lines printing",
    "start": "1062880",
    "end": "1065120"
  },
  {
    "text": "them at line number",
    "start": "1065120",
    "end": "1066840"
  },
  {
    "text": "five again all this code does is get a",
    "start": "1066840",
    "end": "1071480"
  },
  {
    "text": "file and print it that's it a user has",
    "start": "1071480",
    "end": "1075760"
  },
  {
    "text": "uploaded a file to the server and the",
    "start": "1075760",
    "end": "1078360"
  },
  {
    "text": "server is just returning its content",
    "start": "1078360",
    "end": "1080880"
  },
  {
    "text": "it's not saving it anywhere it's not",
    "start": "1080880",
    "end": "1083360"
  },
  {
    "text": "moving it anywhere it just prints it",
    "start": "1083360",
    "end": "1086919"
  },
  {
    "text": "content there should be absolutely",
    "start": "1086919",
    "end": "1090360"
  },
  {
    "text": "nothing dangerous in this code it",
    "start": "1090360",
    "end": "1093200"
  },
  {
    "text": "contains literally five",
    "start": "1093200",
    "end": "1095520"
  },
  {
    "text": "lines yet it's demo",
    "start": "1095520",
    "end": "1099000"
  },
  {
    "text": "time so for the demo let me just",
    "start": "1099000",
    "end": "1101880"
  },
  {
    "text": "duplicate my screen right",
    "start": "1101880",
    "end": "1104520"
  },
  {
    "text": "here",
    "start": "1104520",
    "end": "1106880"
  },
  {
    "text": "great I know you can see that text trust",
    "start": "1106880",
    "end": "1110320"
  },
  {
    "text": "me it's not needed all you need to see",
    "start": "1110320",
    "end": "1114000"
  },
  {
    "text": "is that I have two different requests",
    "start": "1114000",
    "end": "1116039"
  },
  {
    "text": "here I have a simple request or normal",
    "start": "1116039",
    "end": "1119039"
  },
  {
    "text": "request and I have a malicious request",
    "start": "1119039",
    "end": "1121760"
  },
  {
    "text": "when I send my normal request to the",
    "start": "1121760",
    "end": "1123720"
  },
  {
    "text": "server nothing really happens the server",
    "start": "1123720",
    "end": "1126600"
  },
  {
    "text": "just prints my uploaded file",
    "start": "1126600",
    "end": "1129520"
  },
  {
    "text": "content but when I but when I send my",
    "start": "1129520",
    "end": "1133000"
  },
  {
    "text": "malicious request watch closely",
    "start": "1133000",
    "end": "1138200"
  },
  {
    "text": "what was that shall we say it",
    "start": "1140080",
    "end": "1142360"
  },
  {
    "text": "again no a see this",
    "start": "1142360",
    "end": "1146720"
  },
  {
    "text": "screen",
    "start": "1146720",
    "end": "1148360"
  },
  {
    "text": "so right now you are probably asking",
    "start": "1148360",
    "end": "1153799"
  },
  {
    "text": "yourself hold",
    "start": "1153799",
    "end": "1156880"
  },
  {
    "text": "on what did I just see was that a",
    "start": "1156880",
    "end": "1161480"
  },
  {
    "text": "terminal screen and the answer is yes",
    "start": "1161480",
    "end": "1166480"
  },
  {
    "text": "specifically the IP config command out",
    "start": "1166480",
    "end": "1168720"
  },
  {
    "text": "output or in other words these five",
    "start": "1168720",
    "end": "1171840"
  },
  {
    "text": "lines contained a remote code execution",
    "start": "1171840",
    "end": "1176280"
  },
  {
    "text": "vulnerability so now that you saw the",
    "start": "1176280",
    "end": "1178320"
  },
  {
    "text": "magic happens I think it's time for some",
    "start": "1178320",
    "end": "1181679"
  },
  {
    "text": "explanations the first line responsible",
    "start": "1181679",
    "end": "1184679"
  },
  {
    "text": "for checking if a file has been uploaded",
    "start": "1184679",
    "end": "1186960"
  },
  {
    "text": "in the file",
    "start": "1186960",
    "end": "1188200"
  },
  {
    "text": "parameter doesn't exactly do as it says",
    "start": "1188200",
    "end": "1191960"
  },
  {
    "text": "instead of checking if the file",
    "start": "1191960",
    "end": "1193600"
  },
  {
    "text": "parameter is an uploaded file it checks",
    "start": "1193600",
    "end": "1197159"
  },
  {
    "text": "if one of its values is a file",
    "start": "1197159",
    "end": "1200880"
  },
  {
    "text": "descriptor let me clarify that instead",
    "start": "1200880",
    "end": "1204280"
  },
  {
    "text": "of checking if the parameter is only a",
    "start": "1204280",
    "end": "1206679"
  },
  {
    "text": "file it checks if the parameter is also",
    "start": "1206679",
    "end": "1209880"
  },
  {
    "text": "a file meaning that uploading a file and",
    "start": "1209880",
    "end": "1214679"
  },
  {
    "text": "assigning another scalar value to the",
    "start": "1214679",
    "end": "1217280"
  },
  {
    "text": "same parameter will still work and",
    "start": "1217280",
    "end": "1221000"
  },
  {
    "text": "bypass the",
    "start": "1221000",
    "end": "1222200"
  },
  {
    "text": "check",
    "start": "1222200",
    "end": "1225200"
  },
  {
    "text": "what so now we can assign the file",
    "start": "1225400",
    "end": "1228720"
  },
  {
    "text": "parameter both a regular file and a",
    "start": "1228720",
    "end": "1232200"
  },
  {
    "text": "scalar value but what happens when we",
    "start": "1232200",
    "end": "1235000"
  },
  {
    "text": "try to get the file parameter value well",
    "start": "1235000",
    "end": "1238400"
  },
  {
    "text": "in a regular request it will return the",
    "start": "1238400",
    "end": "1240440"
  },
  {
    "text": "uploaded file descriptor but now that",
    "start": "1240440",
    "end": "1243080"
  },
  {
    "text": "we're adding another value to that",
    "start": "1243080",
    "end": "1245760"
  },
  {
    "text": "parameter param returns a list",
    "start": "1245760",
    "end": "1249120"
  },
  {
    "text": "containing all the values we sent the",
    "start": "1249120",
    "end": "1251960"
  },
  {
    "text": "file we've uploaded and our scalar",
    "start": "1251960",
    "end": "1256440"
  },
  {
    "text": "value but the f",
    "start": "1256440",
    "end": "1259120"
  },
  {
    "text": "variable can't contain two values right",
    "start": "1259120",
    "end": "1263919"
  },
  {
    "text": "so instead of converting The Returned",
    "start": "1263919",
    "end": "1266960"
  },
  {
    "text": "list into an",
    "start": "1266960",
    "end": "1269440"
  },
  {
    "text": "array Pearl only uses the first element",
    "start": "1269440",
    "end": "1273159"
  },
  {
    "text": "of that list so if we'll send our scalar",
    "start": "1273159",
    "end": "1277520"
  },
  {
    "text": "value before we send our file the file",
    "start": "1277520",
    "end": "1281480"
  },
  {
    "text": "variable will be assigned our scalar",
    "start": "1281480",
    "end": "1284200"
  },
  {
    "text": "value instead the uploaded file",
    "start": "1284200",
    "end": "1287400"
  },
  {
    "text": "descriptor",
    "start": "1287400",
    "end": "1289200"
  },
  {
    "text": "which means that now file is a regular",
    "start": "1289200",
    "end": "1292240"
  },
  {
    "text": "string not a file",
    "start": "1292240",
    "end": "1295039"
  },
  {
    "text": "descriptor but what happens to this",
    "start": "1295039",
    "end": "1297960"
  },
  {
    "text": "operator when we use a string instead of",
    "start": "1297960",
    "end": "1300520"
  },
  {
    "text": "a file",
    "start": "1300520",
    "end": "1301559"
  },
  {
    "text": "descriptor basically using a different",
    "start": "1301559",
    "end": "1304240"
  },
  {
    "text": "data type well obviously the bracket",
    "start": "1304240",
    "end": "1307240"
  },
  {
    "text": "operator doesn't work with strings of",
    "start": "1307240",
    "end": "1309240"
  },
  {
    "text": "course why should it work with string it",
    "start": "1309240",
    "end": "1310880"
  },
  {
    "text": "works with file descriptors read it",
    "start": "1310880",
    "end": "1312679"
  },
  {
    "text": "reads files not",
    "start": "1312679",
    "end": "1314760"
  },
  {
    "text": "strings that appears",
    "start": "1314760",
    "end": "1317120"
  },
  {
    "text": "true unless yes that string is",
    "start": "1317120",
    "end": "1320880"
  },
  {
    "text": "arv and in that case the bracket",
    "start": "1320880",
    "end": "1323919"
  },
  {
    "text": "operator Loops through the script",
    "start": "1323919",
    "end": "1326400"
  },
  {
    "text": "arguments which in CGI comes directly",
    "start": "1326400",
    "end": "1328919"
  },
  {
    "text": "from the quer string instead of command",
    "start": "1328919",
    "end": "1331159"
  },
  {
    "text": "line and it treats them as file paths",
    "start": "1331159",
    "end": "1335080"
  },
  {
    "text": "inserting each one into an open",
    "start": "1335080",
    "end": "1337880"
  },
  {
    "text": "call",
    "start": "1337880",
    "end": "1340880"
  },
  {
    "text": "what how does that make any sense at at",
    "start": "1341080",
    "end": "1345279"
  },
  {
    "text": "any given point in",
    "start": "1345279",
    "end": "1347240"
  },
  {
    "text": "time all all of this basically means",
    "start": "1347240",
    "end": "1350960"
  },
  {
    "text": "that now instead of displaying our own",
    "start": "1350960",
    "end": "1353880"
  },
  {
    "text": "uploaded file content we can display the",
    "start": "1353880",
    "end": "1356720"
  },
  {
    "text": "content of any file on the",
    "start": "1356720",
    "end": "1359919"
  },
  {
    "text": "server but that's not the end as we",
    "start": "1359919",
    "end": "1362720"
  },
  {
    "text": "haven't executed code yet to execute",
    "start": "1362720",
    "end": "1365760"
  },
  {
    "text": "code we have to look at the open",
    "start": "1365760",
    "end": "1367919"
  },
  {
    "text": "function again this is the function",
    "start": "1367919",
    "end": "1370159"
  },
  {
    "text": "being called with the RV values as file",
    "start": "1370159",
    "end": "1374039"
  },
  {
    "text": "paths open is responsible for opening a",
    "start": "1374039",
    "end": "1377679"
  },
  {
    "text": "file descript to a given",
    "start": "1377679",
    "end": "1381039"
  },
  {
    "text": "file",
    "start": "1381039",
    "end": "1382559"
  },
  {
    "text": "unless a pipe character is added to the",
    "start": "1382559",
    "end": "1385640"
  },
  {
    "text": "end of the string and in that case",
    "start": "1385640",
    "end": "1388320"
  },
  {
    "text": "instead of just opening the file open",
    "start": "1388320",
    "end": "1390679"
  },
  {
    "text": "will now execute it basically acting as",
    "start": "1390679",
    "end": "1394159"
  },
  {
    "text": "a regular",
    "start": "1394159",
    "end": "1396200"
  },
  {
    "text": "exol so when we send our exploit",
    "start": "1396200",
    "end": "1399200"
  },
  {
    "text": "containing the regular uploaded file our",
    "start": "1399200",
    "end": "1402120"
  },
  {
    "text": "AR the malicious scalar value and the IP",
    "start": "1402120",
    "end": "1405480"
  },
  {
    "text": "config command followed by a pipe this",
    "start": "1405480",
    "end": "1408600"
  },
  {
    "text": "this is what we receive a proper remote",
    "start": "1408600",
    "end": "1412080"
  },
  {
    "text": "command",
    "start": "1412080",
    "end": "1413320"
  },
  {
    "text": "execution",
    "start": "1413320",
    "end": "1416320"
  },
  {
    "text": "what but I'm not done yet truth be told",
    "start": "1417360",
    "end": "1422200"
  },
  {
    "text": "I didn't try that",
    "start": "1422200",
    "end": "1424279"
  },
  {
    "text": "code remember that Pearl monx told me",
    "start": "1424279",
    "end": "1427360"
  },
  {
    "text": "that I should read the",
    "start": "1427360",
    "end": "1429200"
  },
  {
    "text": "manual well guess where that code came",
    "start": "1429200",
    "end": "1432559"
  },
  {
    "text": "from the official CGI",
    "start": "1432559",
    "end": "1436520"
  },
  {
    "text": "documentation just think",
    "start": "1436520",
    "end": "1439279"
  },
  {
    "text": "how many people have used this piece of",
    "start": "1439279",
    "end": "1442360"
  },
  {
    "text": "code for their",
    "start": "1442360",
    "end": "1445200"
  },
  {
    "text": "website but I'm not blaming cgpm",
    "start": "1445200",
    "end": "1449360"
  },
  {
    "text": "developers nor am I blaming developers",
    "start": "1449360",
    "end": "1452240"
  },
  {
    "text": "who copied from cgpm",
    "start": "1452240",
    "end": "1454480"
  },
  {
    "text": "examples how could anyone have known",
    "start": "1454480",
    "end": "1459039"
  },
  {
    "text": "that this code could be exploited that",
    "start": "1459039",
    "end": "1461120"
  },
  {
    "text": "way there are no exit calls the file is",
    "start": "1461120",
    "end": "1465480"
  },
  {
    "text": "not saved anywhere",
    "start": "1465480",
    "end": "1468600"
  },
  {
    "text": "heck the only function we're calling is",
    "start": "1468600",
    "end": "1472799"
  },
  {
    "text": "print the sole responsible for this mess",
    "start": "1472799",
    "end": "1478720"
  },
  {
    "text": "is the Pearl language Pearl is the one",
    "start": "1478720",
    "end": "1482600"
  },
  {
    "text": "silently expanding lists Pearl is the",
    "start": "1482600",
    "end": "1485600"
  },
  {
    "text": "one mixing up your data types Pearl is",
    "start": "1485600",
    "end": "1488600"
  },
  {
    "text": "the one executing user input with no",
    "start": "1488600",
    "end": "1491880"
  },
  {
    "text": "exac calls Pearl is the problem not it's",
    "start": "1491880",
    "end": "1497840"
  },
  {
    "text": "developer",
    "start": "1497840",
    "end": "1499960"
  },
  {
    "text": "but while a minority of the Pearl",
    "start": "1499960",
    "end": "1502159"
  },
  {
    "text": "Community took my criticism and tried to",
    "start": "1502159",
    "end": "1504799"
  },
  {
    "text": "suggest some improvements most Pearl",
    "start": "1504799",
    "end": "1507679"
  },
  {
    "text": "monks thought otherwise in a detailed",
    "start": "1507679",
    "end": "1511480"
  },
  {
    "text": "blog post published in the official",
    "start": "1511480",
    "end": "1514080"
  },
  {
    "text": "Pearl blog Joel Berger wrote his",
    "start": "1514080",
    "end": "1517640"
  },
  {
    "text": "response for this",
    "start": "1517640",
    "end": "1519440"
  },
  {
    "text": "presentation according to him Billa",
    "start": "1519440",
    "end": "1522919"
  },
  {
    "text": "developers simply write crappy",
    "start": "1522919",
    "end": "1525960"
  },
  {
    "text": "code vulnerabilities in module",
    "start": "1525960",
    "end": "1528679"
  },
  {
    "text": "documentation are kind of",
    "start": "1528679",
    "end": "1531559"
  },
  {
    "text": "bad and in general it seems that again",
    "start": "1531559",
    "end": "1535559"
  },
  {
    "text": "the Pearl Community decided to ignore",
    "start": "1535559",
    "end": "1538440"
  },
  {
    "text": "the obvious pitfalls in the language and",
    "start": "1538440",
    "end": "1541240"
  },
  {
    "text": "just claim that if you fall in one it's",
    "start": "1541240",
    "end": "1544919"
  },
  {
    "text": "your",
    "start": "1544919",
    "end": "1546120"
  },
  {
    "text": "fault so while Pearl is still used at",
    "start": "1546120",
    "end": "1549679"
  },
  {
    "text": "least to some extents in websites such",
    "start": "1549679",
    "end": "1551840"
  },
  {
    "text": "as IMDb Craiglist and even",
    "start": "1551840",
    "end": "1555760"
  },
  {
    "text": "Amazon it's community blindly reject any",
    "start": "1555760",
    "end": "1561480"
  },
  {
    "text": "kind of external",
    "start": "1561480",
    "end": "1563480"
  },
  {
    "text": "criticism and that is the really sad",
    "start": "1563480",
    "end": "1567159"
  },
  {
    "text": "thing here how can the language",
    "start": "1567159",
    "end": "1572640"
  },
  {
    "text": "improve if the community can't accept",
    "start": "1573520",
    "end": "1576919"
  },
  {
    "text": "any external criticism how can anything",
    "start": "1576919",
    "end": "1580520"
  },
  {
    "text": "improve in these",
    "start": "1580520",
    "end": "1581880"
  },
  {
    "text": "circumstances how can you trust this",
    "start": "1581880",
    "end": "1585480"
  },
  {
    "text": "language for your applications knowing",
    "start": "1585480",
    "end": "1589159"
  },
  {
    "text": "that even after Larry wall the creator",
    "start": "1589159",
    "end": "1593240"
  },
  {
    "text": "of pearl claimed that he wants Pearl six",
    "start": "1593240",
    "end": "1596480"
  },
  {
    "text": "to keep what works fix what doesn't and",
    "start": "1596480",
    "end": "1599799"
  },
  {
    "text": "add what's missing his own Community",
    "start": "1599799",
    "end": "1604600"
  },
  {
    "text": "declines doing just",
    "start": "1604600",
    "end": "1607200"
  },
  {
    "text": "that so",
    "start": "1607200",
    "end": "1609279"
  },
  {
    "text": "sadly until this language is",
    "start": "1609279",
    "end": "1612840"
  },
  {
    "text": "fixed the only thing you can do is stop",
    "start": "1612840",
    "end": "1619559"
  },
  {
    "text": "using",
    "start": "1619559",
    "end": "1621640"
  },
  {
    "text": "Pearl at least in a CGI",
    "start": "1621640",
    "end": "1624559"
  },
  {
    "text": "environment thank you",
    "start": "1624559",
    "end": "1626830"
  },
  {
    "text": "[Applause]",
    "start": "1626830",
    "end": "1634240"
  }
]