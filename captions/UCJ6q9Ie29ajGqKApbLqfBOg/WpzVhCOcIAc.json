[
  {
    "text": "hello everyone uh my name's John yolman and my talk today is a defender's",
    "start": "2340",
    "end": "7500"
  },
  {
    "text": "perspective on Windows memory scanning with a particular focus on the protection fluctuation of Asian",
    "start": "7500",
    "end": "13080"
  },
  {
    "text": "approaches uh which were introduced by gargoyle in 2017 and how to find the footprints of such uh hidden Shell Code",
    "start": "13080",
    "end": "20699"
  },
  {
    "text": "there will be three tools released after this talk unfortunately no live demos",
    "start": "20699",
    "end": "26939"
  },
  {
    "text": "today I'm feeling a little bit under the weather and I'm not going to risk it",
    "start": "26939",
    "end": "32160"
  },
  {
    "text": "uh so a quick little who am I uh I'm a security research engineer at elastic",
    "start": "32160",
    "end": "37440"
  },
  {
    "text": "this means I get to work on their EDR product if you want to know why EDR is in quotes then check out my opinion piece taxonomy",
    "start": "37440",
    "end": "44460"
  },
  {
    "text": "of endpoint security bypasses that was published today because within our EDR product I work on",
    "start": "44460",
    "end": "50399"
  },
  {
    "text": "what I consider to be EDR Epp and AV features and I think it's sometimes helpful for us to call out the specific",
    "start": "50399",
    "end": "56879"
  },
  {
    "text": "class of feature that we're talking about I also write more technical blogs for the elastic security Labs such as get",
    "start": "56879",
    "end": "64260"
  },
  {
    "text": "injected thread which was finding some Anonymous memory thread start addresses",
    "start": "64260",
    "end": "69720"
  },
  {
    "text": "prior to elastic I worked for the Australian signals director for about 15 years",
    "start": "69720",
    "end": "75920"
  },
  {
    "text": "so today I'm going to uh run through a little bit of background",
    "start": "76100",
    "end": "81240"
  },
  {
    "text": "um try and explain why it is that security products scan memory at all and then just a little bit of a recap of uh",
    "start": "81240",
    "end": "88500"
  },
  {
    "text": "what the current uh state of the art is in both memory scanning and in memory of scaling evasion and then finally walk",
    "start": "88500",
    "end": "96060"
  },
  {
    "text": "through the meat of this talk which is uh two new approaches um to detection one which I think is is",
    "start": "96060",
    "end": "103140"
  },
  {
    "text": "a bit more novel and one which is a little bit more uh self-evident but I haven't seen it published before and",
    "start": "103140",
    "end": "109439"
  },
  {
    "text": "then finally I'm going to talk through a more a way of hunting for for these kinds of",
    "start": "109439",
    "end": "115619"
  },
  {
    "text": "uh new evasion approaches um that hopefully will mean that these things can't won't stay hidden for long",
    "start": "115619",
    "end": "124100"
  },
  {
    "text": "so I do security products scan memory so Microsoft's used the release of 64-bit",
    "start": "124799",
    "end": "132000"
  },
  {
    "text": "Windows to really make some critical security improvements around the kernel",
    "start": "132000",
    "end": "137160"
  },
  {
    "text": "they really hardened it by bringing in things like driver signing enforcement and Patch guard and since then it's",
    "start": "137160",
    "end": "143520"
  },
  {
    "text": "behind have been enhanced with the virtualization-based security uh the journey for Microsoft really",
    "start": "143520",
    "end": "148560"
  },
  {
    "text": "started with Windows Vista but it wasn't until Windows 10 that these features really achieved that market saturation",
    "start": "148560",
    "end": "155459"
  },
  {
    "text": "um so uh it's indisputable that all of these have had a really strong positive impact on Windows security",
    "start": "155459",
    "end": "163200"
  },
  {
    "text": "but there's always a but so they have with hindsight",
    "start": "163200",
    "end": "168860"
  },
  {
    "text": "inadvertently made private user mode executable memory and indefensible boundary",
    "start": "168860",
    "end": "175260"
  },
  {
    "text": "so I like to think of this uh in the 32-bit days I was a bouncer for a",
    "start": "175260",
    "end": "181080"
  },
  {
    "text": "nightclub I used to put on my security jacket and I could walk around the club and I could kick anyone out I could",
    "start": "181080",
    "end": "187379"
  },
  {
    "text": "check anyone and it was really great um I was I was running around in the kernel but unfortunately those security",
    "start": "187379",
    "end": "193440"
  },
  {
    "text": "jackets that that Microsoft handed out to me to say that I was a really all-powerful um they would just hand",
    "start": "193440",
    "end": "199500"
  },
  {
    "text": "them out to anyone and so Microsoft's like no we can't have these kernel root kits we've got to stop handing out the",
    "start": "199500",
    "end": "205620"
  },
  {
    "text": "security jackets to anyone now we're really going to start doing that so unfortunately they now make it much",
    "start": "205620",
    "end": "213540"
  },
  {
    "text": "harder to get that security jacket but they've also said to the security products hey you can stand at the front",
    "start": "213540",
    "end": "220680"
  },
  {
    "text": "entrance to the venue and you can check the IDS as they're coming in",
    "start": "220680",
    "end": "226200"
  },
  {
    "text": "um but you can't stand at the side door and you can't be at the bar and check",
    "start": "226200",
    "end": "232140"
  },
  {
    "text": "the ID actually as you're serving the drinks and you're allowed to turn and look",
    "start": "232140",
    "end": "238260"
  },
  {
    "text": "behind you occasionally but you've also got to like you can't be permanently facing that way so",
    "start": "238260",
    "end": "244140"
  },
  {
    "text": "um to put in more technical terms for each load Library call when somebody wants to to load a dll or some",
    "start": "244140",
    "end": "250980"
  },
  {
    "text": "executable code we get a kernel callback that's an inline opportunity for prevention",
    "start": "250980",
    "end": "258079"
  },
  {
    "text": "but when some private executable memory is allocated or the memory is marked",
    "start": "258180",
    "end": "264840"
  },
  {
    "text": "with virtual protectors being executable security products do not",
    "start": "264840",
    "end": "270360"
  },
  {
    "text": "we do not get to check the credentials of that memory so this security boundary for private",
    "start": "270360",
    "end": "277020"
  },
  {
    "text": "Equity memory it cannot be reasonably retrofitted by any security product",
    "start": "277020",
    "end": "282180"
  },
  {
    "text": "so kernel hooks not supported for good reasons we want to keep the root kits out of the kernel",
    "start": "282180",
    "end": "287759"
  },
  {
    "text": "user mode hooks really really prevalent most products do it not all but most",
    "start": "287759",
    "end": "293460"
  },
  {
    "text": "um I would argue that given that most security products are already doing it maybe any security sorry any performance concerns on on hooking are a little bit",
    "start": "293460",
    "end": "300060"
  },
  {
    "text": "moot um but as most of us know user mode hooks",
    "start": "300060",
    "end": "305220"
  },
  {
    "text": "it's kind of like when you're in the kernel and we both are wearing the security jacket user mode hooks you",
    "start": "305220",
    "end": "310259"
  },
  {
    "text": "can't defend against code running at the same privilege as you so use mode hooks",
    "start": "310259",
    "end": "315720"
  },
  {
    "text": "um they can't defend against user mode code they can defend against exploitation and trying to prevent that",
    "start": "315720",
    "end": "322139"
  },
  {
    "text": "but um but once you've actually got that execution they can't defend",
    "start": "322139",
    "end": "328320"
  },
  {
    "text": "um so we can do hypervisor Shadow hooks these are technically possible but Microsoft has effectively claimed",
    "start": "328320",
    "end": "336180"
  },
  {
    "text": "the kernel hypervisor so they're incompatible with with VBS and we don't want to have to give customers that",
    "start": "336180",
    "end": "341400"
  },
  {
    "text": "choice between all this great stuff that Microsoft is doing with the hypervisor and hardening and a security product",
    "start": "341400",
    "end": "347400"
  },
  {
    "text": "that doesn't give you all that great stuff but gives you a few different things so um there is arbitrary code guard and I got",
    "start": "347400",
    "end": "354539"
  },
  {
    "text": "really excited when that feature came out and most of you probably never never heard of it because theoretically it's",
    "start": "354539",
    "end": "361080"
  },
  {
    "text": "extremely extremely powerful you turn on arbitrary code guard for a process you can't change any executable memory you",
    "start": "361080",
    "end": "367560"
  },
  {
    "text": "can't load any new private memory um but because of how powerful it is its",
    "start": "367560",
    "end": "374160"
  },
  {
    "text": "applicability is so limited that no one uses it in practice in fact with the retirement of the Legacy Microsoft Edge",
    "start": "374160",
    "end": "380600"
  },
  {
    "text": "I'm not aware of anyone who uses arbitraco guard it's just too coarse",
    "start": "380600",
    "end": "386100"
  },
  {
    "text": "grains in in in what in what it does so what are we left with memory scanning",
    "start": "386100",
    "end": "392100"
  },
  {
    "text": "so it's not perfect but it is still a useful defense in depth approach to try",
    "start": "392100",
    "end": "397740"
  },
  {
    "text": "and find um though that malware that has kind of slipped through the cracks and has",
    "start": "397740",
    "end": "402960"
  },
  {
    "text": "managed to get execution [Music] uh to understand the current state of",
    "start": "402960",
    "end": "409560"
  },
  {
    "text": "the art in memory scanning I like to point out like the big three open source projects if you understand what these three projects are doing then you kind",
    "start": "409560",
    "end": "415620"
  },
  {
    "text": "of got a good idea of what most of the security products are doing so on one",
    "start": "415620",
    "end": "421380"
  },
  {
    "text": "side you've got Yara which is really good at writing signatures on memory contents and finding those known bad",
    "start": "421380",
    "end": "428520"
  },
  {
    "text": "things at the other end you've got Moneta and it's really good at doing",
    "start": "428520",
    "end": "434160"
  },
  {
    "text": "analysis on just the memory metadata and finding those anomalous regions of hey you shouldn't have these couple of flags",
    "start": "434160",
    "end": "440639"
  },
  {
    "text": "at the same time as you've got these couple of flags that looks bad and then in the middle you've kind of got puc which kind of uh does a bit of a hybrid",
    "start": "440639",
    "end": "447900"
  },
  {
    "text": "approach it's got some content heuristics and it looks really more closely at the image manager data anomalies and if you can get past those",
    "start": "447900",
    "end": "453720"
  },
  {
    "text": "three things um then you're probably going to get past most uh endpoint security products",
    "start": "453720",
    "end": "462020"
  },
  {
    "text": "um so just on evasion so I mentioned it",
    "start": "462660",
    "end": "469139"
  },
  {
    "text": "earlier gargle is really kind of the key the linchpin of the current um current uh state of the art of",
    "start": "469139",
    "end": "476819"
  },
  {
    "text": "evasion and Josh lostpizino in 2017 published a really beautiful blog",
    "start": "476819",
    "end": "482460"
  },
  {
    "text": "um and did some great artwork for it and he pointed out this this really key uh",
    "start": "482460",
    "end": "487919"
  },
  {
    "text": "concept which that most of us in order to reduce the computational burden of",
    "start": "487919",
    "end": "493080"
  },
  {
    "text": "what we're doing we can't afford to scan all the memory that there is there's so much memory especially on 64-bit address",
    "start": "493080",
    "end": "499800"
  },
  {
    "text": "spaces so you can't afford to scan anything you've got to kind of really focus um on what you're doing and he said most",
    "start": "499800",
    "end": "506039"
  },
  {
    "text": "most of these products they're only going to scan the xq or code pages so he's like well this is great so what I'm",
    "start": "506039",
    "end": "511500"
  },
  {
    "text": "going to do is I'm going to spend most of my time Turtle down head in",
    "start": "511500",
    "end": "516539"
  },
  {
    "text": "um or turn into a stone gargoyle so you can't find me and then I'm only going to kind of jump up and do my little thing",
    "start": "516539",
    "end": "522360"
  },
  {
    "text": "and then and then jump back down where you can't find me so if you spend 99.9 percent of the time being non-executable",
    "start": "522360",
    "end": "528839"
  },
  {
    "text": "it's really really hard for that memory scanner to find you I think Joshua was actually only half",
    "start": "528839",
    "end": "533880"
  },
  {
    "text": "right so scanning on Instagram memory absolutely it's computationally expensive",
    "start": "533880",
    "end": "540180"
  },
  {
    "text": "but it's also extremely false positive prone I'm pretty sure if I grabbed all of your laptops and scanned the memory I",
    "start": "540180",
    "end": "546779"
  },
  {
    "text": "would get a huge number of false positives like your security tools your disassemblers your hex editors your",
    "start": "546779",
    "end": "553560"
  },
  {
    "text": "browsers when they're open to blog posts with threat intelligence and even with a more broader audience of of people who",
    "start": "553560",
    "end": "560220"
  },
  {
    "text": "are not Security Professionals you're still going to find all these false positives in what is actually otherwise",
    "start": "560220",
    "end": "565440"
  },
  {
    "text": "very benign memory regions so I don't think that scanning of memory region is ever going to be an option even with all",
    "start": "565440",
    "end": "571500"
  },
  {
    "text": "of this great hey look we can do offload some of the processing to our GPU and make it really faster I don't think",
    "start": "571500",
    "end": "578100"
  },
  {
    "text": "you're ever going to be able to scan the whole address space because it's just you've got that false positive problem it's just going to be too large so we",
    "start": "578100",
    "end": "583620"
  },
  {
    "text": "really do need to optimize on just those executable regions",
    "start": "583620",
    "end": "589080"
  },
  {
    "text": "so the Crux of gargoyle then is these periodic virtual protect calls and",
    "start": "589080",
    "end": "594660"
  },
  {
    "text": "specifically that what it does is when you virtual protect memory you remove all references to that region having",
    "start": "594660",
    "end": "602459"
  },
  {
    "text": "ever been executable from the virtual address to scripture tree maintained by",
    "start": "602459",
    "end": "608700"
  },
  {
    "text": "the kernel memory manager so the vad tree Only Stores two values one what was the original allocation",
    "start": "608700",
    "end": "615720"
  },
  {
    "text": "protection and two what is the current protection",
    "start": "615720",
    "end": "621240"
  },
  {
    "text": "in between that it stores no information [Music]",
    "start": "621240",
    "end": "628440"
  },
  {
    "text": "uh so a quick recap on where we are with all the evasion techniques",
    "start": "628440",
    "end": "633600"
  },
  {
    "text": "um so obviously there was there was gargoyle we mentioned earlier but its way of May of triggering its its way of",
    "start": "633600",
    "end": "639540"
  },
  {
    "text": "sort of waking up was via an APC timer and then it used a nice little rock chain",
    "start": "639540",
    "end": "644839"
  },
  {
    "text": "to uh then sort of bootstrap the execution and and get itself all ready",
    "start": "644839",
    "end": "650459"
  },
  {
    "text": "to go again uh then we had Cobalt Stripes obfuscate and sleep it was more just encrypting",
    "start": "650459",
    "end": "656760"
  },
  {
    "text": "the memory so um and then had kind of a little bit of a post-leep stub so he still had a thread your thread when it got",
    "start": "656760",
    "end": "663720"
  },
  {
    "text": "um woken up uh that was your way of triggering and then it just had a little stub of short code that was still waiting there uh and then we had foliage",
    "start": "663720",
    "end": "670980"
  },
  {
    "text": "come along it was kind of doing both encryption and this memory State fluctuation still using APC timers but",
    "start": "670980",
    "end": "677220"
  },
  {
    "text": "instead of using a rope chain that you've got to calculate for each OS it used it a context a thread context where",
    "start": "677220",
    "end": "684660"
  },
  {
    "text": "you wanted to put execution back to and this lovely function called NT continue which basically says hey take that",
    "start": "684660",
    "end": "689760"
  },
  {
    "text": "thread context to make it my context kind of like set thread context for me um shortcut fluctuation came along uh",
    "start": "689760",
    "end": "696360"
  },
  {
    "text": "moved things up a little bit see still got this memory protection fluctuation um but instead of after the Sleep",
    "start": "696360",
    "end": "701940"
  },
  {
    "text": "um it would trigger an exception and then the exception handle would get you running uh deep sleep came along and",
    "start": "701940",
    "end": "707579"
  },
  {
    "text": "said hey well let's still do the membrane protection fluctuation but we're going to do after post-sleep we're going to go back to using Rock chains",
    "start": "707579",
    "end": "713700"
  },
  {
    "text": "and then Eco came along and said hey we're still doing all that great fluctuation stuff but we're going to use this new thing called a timer Q which is",
    "start": "713700",
    "end": "718860"
  },
  {
    "text": "different to an APC timer and that's going to bypass some detections and it's still using that kind of that context manipulation kind of approach",
    "start": "718860",
    "end": "726120"
  },
  {
    "text": "and then obviously my favorite down the bottom the oldies is still the best scheduled tasks if you're not running at",
    "start": "726120",
    "end": "733140"
  },
  {
    "text": "all then there's nothing to scan but it's kind of outside the scope of this talk um but uh",
    "start": "733140",
    "end": "740220"
  },
  {
    "text": "sometimes uh yeah the classics are the best so for a more detailed overview I highly",
    "start": "740220",
    "end": "745800"
  },
  {
    "text": "recommend Carl Avery's Defcon 30 talk on avoiding memory scanners customizing",
    "start": "745800",
    "end": "750959"
  },
  {
    "text": "malware to evade Yara piece even more and the more it's pretty much my Neta and as he demonstrated the evasion",
    "start": "750959",
    "end": "757980"
  },
  {
    "text": "approaches they work no hits on all of those things if you pull all the little",
    "start": "757980",
    "end": "763019"
  },
  {
    "text": "techniques together [Music] um so just trying to put those techniques",
    "start": "763019",
    "end": "769019"
  },
  {
    "text": "in a slightly different format so you can see what's going on so each of the approaches is effectively",
    "start": "769019",
    "end": "775320"
  },
  {
    "text": "a variant of gargle's memory protection fluctuation they all have that with the",
    "start": "775320",
    "end": "781079"
  },
  {
    "text": "exception of cobalt strike but in order to avoid the fluctuation with Cobalt strike what they had to do",
    "start": "781079",
    "end": "788339"
  },
  {
    "text": "was Mark the region as read write execute always so you've always got that suspicious region so then you've got",
    "start": "788339",
    "end": "794160"
  },
  {
    "text": "this different class of problem then you're looking for executable memory that is actually doesn't look like code",
    "start": "794160",
    "end": "799440"
  },
  {
    "text": "at all it looks like it's an encrypted blob so that's kind of slightly to the side for this talk",
    "start": "799440",
    "end": "804839"
  },
  {
    "text": "um but how do we detect all these the rest of these gargoyle Style evasions",
    "start": "804839",
    "end": "812000"
  },
  {
    "text": "so there are some Niche memory scanners and each of them can detect a specific",
    "start": "812100",
    "end": "818399"
  },
  {
    "text": "variant because of the trigger or the bootstrap and as each one has come out our",
    "start": "818399",
    "end": "825540"
  },
  {
    "text": "offensive researchers have quickly published Alternatives and said hey you need to work harder because we've got",
    "start": "825540",
    "end": "831720"
  },
  {
    "text": "further variance ready in the back pocket for when you detect this next one",
    "start": "831720",
    "end": "836899"
  },
  {
    "text": "so how do we detect this class of techniques more generally when we know that they've got they're going to keep",
    "start": "837060",
    "end": "842880"
  },
  {
    "text": "finding new triggers they're going to find keep finding new ways of bootstrapping their code well virtual protect is the choke point",
    "start": "842880",
    "end": "849899"
  },
  {
    "text": "it's the it's the thing that takes you out of the bad tree",
    "start": "849899",
    "end": "855260"
  },
  {
    "text": "so under the hood virtual protect is effectively just the NT protects virtual",
    "start": "855839",
    "end": "861899"
  },
  {
    "text": "memory syscall and for these we have this wonderful Microsoft Windows threat intelligence protect VM",
    "start": "861899",
    "end": "868680"
  },
  {
    "text": "etw events that come from the kernel and they include both the protection mask and the last protection mask so we've",
    "start": "868680",
    "end": "875760"
  },
  {
    "text": "got this reliable way to monitor these calls that isn't reliant on user mode",
    "start": "875760",
    "end": "880860"
  },
  {
    "text": "hooks now technically speaking these events are only available in security products",
    "start": "880860",
    "end": "886100"
  },
  {
    "text": "quick little call out to Pat Hogan's sea lighter TI project it was the first project that really made these events",
    "start": "886100",
    "end": "893160"
  },
  {
    "text": "accessible to sort of security researchers that didn't have the blessing of an EDR company to",
    "start": "893160",
    "end": "899040"
  },
  {
    "text": "actually be able to register with Microsoft for these it used a now patched PPL exploit to do so but if like",
    "start": "899040",
    "end": "906839"
  },
  {
    "text": "my tool you just accidentally bring your own vulnerable driver then you too can",
    "start": "906839",
    "end": "912240"
  },
  {
    "text": "see these events so we have the events um but what is anomalous",
    "start": "912240",
    "end": "919620"
  },
  {
    "text": "so firstly there's always the caller the caller is always good so etw events can",
    "start": "919620",
    "end": "924899"
  },
  {
    "text": "optionally include call Stacks and you can inspect these for anomalies you can look for Rob uh you can look for",
    "start": "924899",
    "end": "930720"
  },
  {
    "text": "indirect calls you look can look for calls that are sort of originating from either uh unsigned or untrusted code",
    "start": "930720",
    "end": "938120"
  },
  {
    "text": "but such enrichments are currently they're quite fragile because they're reliant on the user mode stack that is",
    "start": "938120",
    "end": "944880"
  },
  {
    "text": "being passed by the adversary to the colonel",
    "start": "944880",
    "end": "950180"
  },
  {
    "text": "so and this is currently susceptible to tampering there's a few different approaches out there",
    "start": "950180",
    "end": "955760"
  },
  {
    "text": "I'll leave that as for you to work out yourself",
    "start": "955760",
    "end": "961220"
  },
  {
    "text": "but as modern CPUs Hardware comes more available Microsoft will have the",
    "start": "961220",
    "end": "967920"
  },
  {
    "text": "opportunity to harden these by instead of using the users supplied call stack they will be able to use",
    "start": "967920",
    "end": "976139"
  },
  {
    "text": "um the the the the the CPUs stored um set Shadow stack to generate these etw",
    "start": "976139",
    "end": "981660"
  },
  {
    "text": "things and so once we've got the newer cpls CPUs out there I think it's ET uh",
    "start": "981660",
    "end": "986760"
  },
  {
    "text": "sorry Intel's 11th generation and later sort of equivalent um then we'll be able to use that",
    "start": "986760",
    "end": "992220"
  },
  {
    "text": "Hardware to give us the core Stacks um check out my colleague in the front rows blog on uh truth in the Shadows on",
    "start": "992220",
    "end": "1000440"
  },
  {
    "text": "how we can do these to get more accurate call Stacks and hopefully then some of this course tax spoofing will go away once again it's going to have a long",
    "start": "1000440",
    "end": "1006500"
  },
  {
    "text": "tail we've got to wait for the hardware so while we have the long tail what can we do",
    "start": "1006500",
    "end": "1012560"
  },
  {
    "text": "um so this is that a mutable code page principle that I talked about earlier so your code Pages once they are written",
    "start": "1012560",
    "end": "1020060"
  },
  {
    "text": "they should never change that is the the the life cycle of the",
    "start": "1020060",
    "end": "1025640"
  },
  {
    "text": "memory protection progression for a code page should only ever be from read write",
    "start": "1025640",
    "end": "1031220"
  },
  {
    "text": "to read only and executable both jit compilers as well as aot compilers they",
    "start": "1031220",
    "end": "1036558"
  },
  {
    "text": "only compile once so we can simply generate an alert",
    "start": "1036559",
    "end": "1042678"
  },
  {
    "text": "whenever expert or memory is changed from non-executable um",
    "start": "1042679",
    "end": "1048640"
  },
  {
    "text": "actual memory is changed to non-executable um but like always this is going to",
    "start": "1049000",
    "end": "1054679"
  },
  {
    "text": "produce some false positives that we're going to need to deal with some jet engines unfortunately like to",
    "start": "1054679",
    "end": "1060020"
  },
  {
    "text": "uh reuse memory allocations memory is not really expensive anymore",
    "start": "1060020",
    "end": "1065780"
  },
  {
    "text": "and it's easy to reserve but anyway some older jet engines like to reuse memory allocations so and to be thorough we",
    "start": "1065780",
    "end": "1072440"
  },
  {
    "text": "should also try and cover those little cases where um executive memory fluctuates from non-writable to writable but there's",
    "start": "1072440",
    "end": "1080120"
  },
  {
    "text": "also going to be like a smattering of API hooking to account for so somebody might hook",
    "start": "1080120",
    "end": "1086080"
  },
  {
    "text": "either legitimate dll code or maybe even their hooking down in the byteco layer",
    "start": "1086080",
    "end": "1092539"
  },
  {
    "text": "they might be hooking some.net code um so we're going to have to account for those",
    "start": "1092539",
    "end": "1098980"
  },
  {
    "text": "but API hooking should only happen once fluctuation is going executable",
    "start": "1099020",
    "end": "1106100"
  },
  {
    "text": "non-executable executable non-executable executable non-executable API hooking goes oh non-executable",
    "start": "1106100",
    "end": "1112780"
  },
  {
    "text": "executable non-executable stops so if you rule out anything that",
    "start": "1112780",
    "end": "1119480"
  },
  {
    "text": "fluctuates less than once you get rid of most of the false positives and suddenly you've got quite a strong low false",
    "start": "1119480",
    "end": "1127280"
  },
  {
    "text": "positive way of detecting this kind of thing um and so that's a little screenshot of",
    "start": "1127280",
    "end": "1133820"
  },
  {
    "text": "the tool so it's showing both the events that we usually wouldn't alert on in Gray and so this stuff happening and I I",
    "start": "1133820",
    "end": "1140780"
  },
  {
    "text": "liked that Java popped up in my screenshot wasn't planned but just popped up in there to let you know there is some normal stuff happening",
    "start": "1140780",
    "end": "1148100"
  },
  {
    "text": "um but uh I think it was Eco in this case it was tick-tocking back and forth",
    "start": "1148100",
    "end": "1153260"
  },
  {
    "text": "quickly showed up there's fluctuation way too many calls back and forth Happening Here",
    "start": "1153260",
    "end": "1158600"
  },
  {
    "text": "so in order to do this we're going to need to have to maintain like I said earlier the kernel doesn't maintain that",
    "start": "1158600",
    "end": "1163880"
  },
  {
    "text": "list of things that have been previously executable we're going to need to maintain it ourselves so we just need to maintain that small list in turn we",
    "start": "1163880",
    "end": "1169220"
  },
  {
    "text": "build a state to know hey how many times has this region changed and as soon as it hits a threshold and maybe if you're",
    "start": "1169220",
    "end": "1174679"
  },
  {
    "text": "paranoid you don't set it one maybe sit at three and then suddenly like hey this is fluctuating",
    "start": "1174679",
    "end": "1181000"
  },
  {
    "text": "[Music] but maybe the kernel does store some of",
    "start": "1181720",
    "end": "1188840"
  },
  {
    "text": "this information um so Gabe declined to come up and",
    "start": "1188840",
    "end": "1193940"
  },
  {
    "text": "co-present with me he ended up coming anyway and spoke yesterday and he's sitting in the front row",
    "start": "1193940",
    "end": "1200480"
  },
  {
    "text": "um so he made an interesting discovery and he noticed that the control flow",
    "start": "1200480",
    "end": "1206059"
  },
  {
    "text": "guard bitmap entries for executable memory once they are set",
    "start": "1206059",
    "end": "1212539"
  },
  {
    "text": "they persist beyond the lifetime of how long that memory is executable",
    "start": "1212539",
    "end": "1218000"
  },
  {
    "text": "so Gabe and I sat down uh we planned a week only took us a couple of days to see what we could do with this",
    "start": "1218000",
    "end": "1225380"
  },
  {
    "text": "so a quick recap on control flowguard so what it is is it's time efficient",
    "start": "1225380",
    "end": "1231380"
  },
  {
    "text": "lookup of valid indirect call targets there's one bitmap per process and each",
    "start": "1231380",
    "end": "1237559"
  },
  {
    "text": "two bits corresponds to 16 virtual addresses quick little gigging out here",
    "start": "1237559",
    "end": "1242660"
  },
  {
    "text": "that's not a mistake um I can do maths it's not one bit to eight virtual addresses it's 2 to 16. because the",
    "start": "1242660",
    "end": "1249080"
  },
  {
    "text": "Microsoft Engineers they did something really really quite amazing and they they happen to know that most compilers",
    "start": "1249080",
    "end": "1255620"
  },
  {
    "text": "output code on 16 byte aligned boundaries and the reason for this is most CPUs load cache lines in 16 byte",
    "start": "1255620",
    "end": "1263240"
  },
  {
    "text": "aligned boundaries so when you jump to a new execution Point into a new function you want as many instructions to be hot",
    "start": "1263240",
    "end": "1270200"
  },
  {
    "text": "in the cache as possible so most compilers output functions on 16 byte",
    "start": "1270200",
    "end": "1275539"
  },
  {
    "text": "aligned boundaries so what they roughly did it's a little bit more there's actually four states but what they roughly did was said one bit is for that",
    "start": "1275539",
    "end": "1282740"
  },
  {
    "text": "16 byte aligned address and the second bit is for the other 15. um and this basically gave them an eight",
    "start": "1282740",
    "end": "1289700"
  },
  {
    "text": "times uh Stronger protection um against accidental gadgets",
    "start": "1289700",
    "end": "1295159"
  },
  {
    "text": "um without having to make their bitmap eight times the size because you might have noticed the bitmap here on 64-bit",
    "start": "1295159",
    "end": "1301460"
  },
  {
    "text": "is two terabytes and that seems huge and scary Until you realize it's pretty much",
    "start": "1301460",
    "end": "1306559"
  },
  {
    "text": "empty and it's not taking up any physical memory at all almost so that's because most of it is just",
    "start": "1306559",
    "end": "1313460"
  },
  {
    "text": "reserved reserved memory this address space is reserved you only actually have to commit when there is some executable",
    "start": "1313460",
    "end": "1319220"
  },
  {
    "text": "Pages most exputable Pages they're associated with shared dlls well if the",
    "start": "1319220",
    "end": "1324500"
  },
  {
    "text": "dlls can be shared so can see if the control flow guide bitmap pages so that's all share that's not contributing",
    "start": "1324500",
    "end": "1329840"
  },
  {
    "text": "to your working set it's only when you have jit memory that private X Google memory that you are actually creating",
    "start": "1329840",
    "end": "1335059"
  },
  {
    "text": "some additional pages in The bitmap so PE files they bring their own bitmap but Microsoft",
    "start": "1335059",
    "end": "1342559"
  },
  {
    "text": "um they don't want to break things so for backwards compatibility for good reasons they wanted to have a very",
    "start": "1342559",
    "end": "1348679"
  },
  {
    "text": "permissive backwards compatible approach and so the memory manager just marks everything is executable for those jet",
    "start": "1348679",
    "end": "1354020"
  },
  {
    "text": "regions so it's designed so that no code change is required you just need to compile",
    "start": "1354020",
    "end": "1359059"
  },
  {
    "text": "with a CFG a broad compiler uh so in the second tool we then utilize",
    "start": "1359059",
    "end": "1366740"
  },
  {
    "text": "that observation from Gabe that the CFG bitmap is not updated when non-image memory is toggled and we can then find",
    "start": "1366740",
    "end": "1373520"
  },
  {
    "text": "any addresses that have been executed during the lifetime of a process we Define the the",
    "start": "1373520",
    "end": "1380120"
  },
  {
    "text": "um the safety bitmap it's not documented where it lives but it's quite easy once you've got execution to know where it is",
    "start": "1380120",
    "end": "1385820"
  },
  {
    "text": "once again it's an exploit protection it's not protecting against code that's already running and then we can search",
    "start": "1385820",
    "end": "1391760"
  },
  {
    "text": "the CFG pages to find any pages that have all the bits set and like I said it's very sparse it's very quick in fact",
    "start": "1391760",
    "end": "1397940"
  },
  {
    "text": "if you want to try and find all of the executable memory in the process don't walk the bad tree if you walk the CFG",
    "start": "1397940",
    "end": "1403580"
  },
  {
    "text": "bitmap and see if CFG enable process you can make a lot less sys calls just to work out where all the executable",
    "start": "1403580",
    "end": "1408740"
  },
  {
    "text": "regions are um unfortunately",
    "start": "1408740",
    "end": "1413840"
  },
  {
    "text": "so anyway so this worked beautifully protection fluctuation stands out boom boom boom red lights there's an example",
    "start": "1413840",
    "end": "1421520"
  },
  {
    "text": "of shocker fluctuation the region stands out um the unfortunate bit is false positives",
    "start": "1421520",
    "end": "1428600"
  },
  {
    "text": "as always so the safety bitmap is also not updated when memory is freed some jit compilers so.net you've got an",
    "start": "1428600",
    "end": "1435500"
  },
  {
    "text": "assembly loaded eventually it'll be like oh no unloaded release that memory so the memory is back into the General Pool",
    "start": "1435500",
    "end": "1441559"
  },
  {
    "text": "and then if somebody else accidentally allocates that memory then you're going to get these these false positives you",
    "start": "1441559",
    "end": "1447440"
  },
  {
    "text": "can kind of mostly work out where they are because the allocations don't match up with the regions and a few other bits",
    "start": "1447440",
    "end": "1453020"
  },
  {
    "text": "and pieces but it does mean that if you're in the right process like a.net one you can probably craft a memory",
    "start": "1453020",
    "end": "1459380"
  },
  {
    "text": "region if you're very tricky that looks similar to this there is a stricter opt-in version that",
    "start": "1459380",
    "end": "1465140"
  },
  {
    "text": "I wrote after writing some pithy comments about Microsoft should have made a opt-in version I'm like oh they did",
    "start": "1465140",
    "end": "1471400"
  },
  {
    "text": "where you can allocate memory with something called page targets invalid and in that case your jit compiler",
    "start": "1471400",
    "end": "1476780"
  },
  {
    "text": "allocates all zeros uh so the the kernel memory management portal zeros in the control flow guide bitmap and then you",
    "start": "1476780",
    "end": "1483260"
  },
  {
    "text": "can toggle the ones that you need to toggle afterwards nobody except chakra does that and chakra is pretty rare now",
    "start": "1483260",
    "end": "1490340"
  },
  {
    "text": "um so I could modify my code to try and account for that and find anything and",
    "start": "1490340",
    "end": "1495620"
  },
  {
    "text": "then just deal with sort of higher false positives but it's much easier just to modify for anyone using that flag and if you're not chakra then just saying hey",
    "start": "1495620",
    "end": "1502880"
  },
  {
    "text": "um that's that's that's pretty weird um so are there still a version",
    "start": "1502880",
    "end": "1508159"
  },
  {
    "text": "opportunities absolutely um as I said earlier this is a defense in-depth measure it's never going to",
    "start": "1508159",
    "end": "1513440"
  },
  {
    "text": "actually be a security boundary um uh so though personally I think that",
    "start": "1513440",
    "end": "1519740"
  },
  {
    "text": "the current set of of Asian things they're actually really quite noisy um the fluctuations are so many calls",
    "start": "1519740",
    "end": "1525919"
  },
  {
    "text": "for virtual protector going back and forth and then you've got all these footprints that are starting to appear in the control flow guard bitmap if",
    "start": "1525919",
    "end": "1531620"
  },
  {
    "text": "you're in the right process um potentially you could jump to a new allocation every time and so then you",
    "start": "1531620",
    "end": "1537380"
  },
  {
    "text": "kind of look like just new jit code every time but then you're really starting to build up a bit of heavy weight in that control flow guide bitmap",
    "start": "1537380",
    "end": "1542960"
  },
  {
    "text": "so we could probably set some thresholds there as well um uh there might be a few occasional rare",
    "start": "1542960",
    "end": "1549919"
  },
  {
    "text": "processes where the kind of behaviors that I'm describing are very common but once again most people those those",
    "start": "1549919",
    "end": "1556340"
  },
  {
    "text": "processes aren't going to be on every system and certainly not in the core Windows processes where people like to hide you're not going to find these kind",
    "start": "1556340",
    "end": "1563720"
  },
  {
    "text": "of behaviors in service host you might find it in some.net somewhere maybe uh to me I would just go with a less is",
    "start": "1563720",
    "end": "1570260"
  },
  {
    "text": "more approach um so I would still encrypt all my data Pages because",
    "start": "1570260",
    "end": "1575299"
  },
  {
    "text": "um uh malware analysts they love to write signatures on strings and on data",
    "start": "1575299",
    "end": "1580820"
  },
  {
    "text": "because code compilers can output different code day to day um whereas well compiler updates they",
    "start": "1580820",
    "end": "1587360"
  },
  {
    "text": "should be deterministic whereas the strings that really requires the the author of the code to change it so it's",
    "start": "1587360",
    "end": "1593840"
  },
  {
    "text": "much stronger to write on the strings so if you encrypt your strings and just leave your your code Pages unencrypted",
    "start": "1593840",
    "end": "1599000"
  },
  {
    "text": "then you're not going to jump out to any of these techniques and for your code just obfuscate it once against all the",
    "start": "1599000",
    "end": "1605059"
  },
  {
    "text": "current signatures that you're aware of this is effectively what we do already for sort of the the AV scanning on the files line disk the only difference is",
    "start": "1605059",
    "end": "1611659"
  },
  {
    "text": "for the files on disk most people use in-memory packet type approaches which is what we've said doesn't work so",
    "start": "1611659",
    "end": "1617539"
  },
  {
    "text": "you're going to have to use more sort of binary rewriting approaches um so just that little little bit of a step up in the complexity but still you",
    "start": "1617539",
    "end": "1624860"
  },
  {
    "text": "should be able to tweak your code to bypass the current set of just at a point in time",
    "start": "1624860",
    "end": "1630700"
  },
  {
    "text": "so finally we've talked about two detecting detection approaches",
    "start": "1632779",
    "end": "1638960"
  },
  {
    "text": "this last one is more of a hunting approach it's an approach to termitory collection",
    "start": "1638960",
    "end": "1644240"
  },
  {
    "text": "that without prior knowledge you should still have flagged that the evasion as a",
    "start": "1644240",
    "end": "1649279"
  },
  {
    "text": "new Behavior having occurred in acquiring investigation this is because when you're in a process",
    "start": "1649279",
    "end": "1654580"
  },
  {
    "text": "even if you hide your shell code perfectly you've got to do something you're there for a purpose and and when",
    "start": "1654580",
    "end": "1661279"
  },
  {
    "text": "you're running at some point you're going to make some ciscals so the only way to truly hide is to only",
    "start": "1661279",
    "end": "1667460"
  },
  {
    "text": "ever make ciscals that are the same as what the host process was doing but if you're only doing the same as what the host process will you're not",
    "start": "1667460",
    "end": "1673820"
  },
  {
    "text": "really malware you're just legitimate probably a remote access tool that's being used",
    "start": "1673820",
    "end": "1679880"
  },
  {
    "text": "legitimately but we won't talk about how people love to use those at the moment um so how are we going to find this this",
    "start": "1679880",
    "end": "1687140"
  },
  {
    "text": "abnormal at scale when a process suddenly starts doing something that's not meant to be doing so most of the academic papers they love",
    "start": "1687140",
    "end": "1694400"
  },
  {
    "text": "to do Dynamic malware detonation using full Cisco traces in this heavily instrumented sandbox environment you get",
    "start": "1694400",
    "end": "1701539"
  },
  {
    "text": "thousands and thousands and thousands of events think procmon but even more um",
    "start": "1701539",
    "end": "1706820"
  },
  {
    "text": "way too verbose for production use across your entire fleet so then you've",
    "start": "1706820",
    "end": "1712100"
  },
  {
    "text": "got the other end of the scale which is what most EDR Solutions currently focus on um and is absolutely what what the first",
    "start": "1712100",
    "end": "1718460"
  },
  {
    "text": "thing you should do which is to find the highly suspicious ciscoils and only generate Telemetry for those",
    "start": "1718460",
    "end": "1725000"
  },
  {
    "text": "but I think there's something in the middle some way that we can take that large",
    "start": "1725000",
    "end": "1730700"
  },
  {
    "text": "amount of telemetry and still provide just enough for people to know what's going on",
    "start": "1730700",
    "end": "1736100"
  },
  {
    "text": "instead of sending thousands of events or hundreds of interesting events can we just send tens of behaviors",
    "start": "1736100",
    "end": "1744520"
  },
  {
    "text": "um so you're probably all familiar with like the import table of uh of a p file",
    "start": "1744860",
    "end": "1750500"
  },
  {
    "text": "of a binary and it basically gives you a good overview of what's going on um about that process just just what",
    "start": "1750500",
    "end": "1756559"
  },
  {
    "text": "apis is it calling well at runtime we can construct something very similar we",
    "start": "1756559",
    "end": "1761960"
  },
  {
    "text": "can look at all the ciscals they're making and say hey here's a table of all the ciscals that they've made but we can keep a little bit more than",
    "start": "1761960",
    "end": "1768020"
  },
  {
    "text": "just the name of the function so we can discard any High cardinality events",
    "start": "1768020",
    "end": "1773120"
  },
  {
    "text": "um so for virtual protected earlier rather than saying hey this is the specific address that they did at this particular time we can just keep",
    "start": "1773120",
    "end": "1780799"
  },
  {
    "text": "um uh whether it was uh mem image or mem private and for size well size changes",
    "start": "1780799",
    "end": "1786799"
  },
  {
    "text": "so much just throw that out entirely throw away all of those bits um and and just keep",
    "start": "1786799",
    "end": "1792559"
  },
  {
    "text": "um this is a little bit similar to what Kappa was doing with stake analysis without finding specific call sites with specific set of parameters to say hey",
    "start": "1792559",
    "end": "1800120"
  },
  {
    "text": "um this is what's happening but Kappa and import table and impash they're all uh weak against",
    "start": "1800120",
    "end": "1807080"
  },
  {
    "text": "um uh get proc address because get proc address you can just say hey I'm dynamically going to resolve this",
    "start": "1807080",
    "end": "1814340"
  },
  {
    "text": "um and I am unfortunately out of time so I might uh wrap it up",
    "start": "1814340",
    "end": "1819500"
  },
  {
    "text": "um the tool is out there have a look um I don't write guise but somehow I did",
    "start": "1819500",
    "end": "1827360"
  },
  {
    "text": "um I will just quickly talk about what we did today um memory scanning useful layer of",
    "start": "1827360",
    "end": "1834080"
  },
  {
    "text": "Defense cut and mouse game of cyber security offensive security researchers they've helped us find the gaps and",
    "start": "1834080",
    "end": "1840200"
  },
  {
    "text": "we've improved it I think there's a few good ways that I've talked about how we can either detect it or one try and",
    "start": "1840200",
    "end": "1846080"
  },
  {
    "text": "detect these anomalies at scale but detection is not equal to prevention so the Microsoft's current architecture",
    "start": "1846080",
    "end": "1852860"
  },
  {
    "text": "doesn't provide us with what we need to sufficient opportunities to stop these",
    "start": "1852860",
    "end": "1858260"
  },
  {
    "text": "in-memory threats and I think we're at the there's enough in the wild in-memory threats happening that we need something",
    "start": "1858260",
    "end": "1864020"
  },
  {
    "text": "better um that it meets that threshold for servicing now",
    "start": "1864020",
    "end": "1869179"
  },
  {
    "text": "um in the meantime security vendors we're going to do our best um such that while these threats might be able to run they're not going to be",
    "start": "1869179",
    "end": "1875360"
  },
  {
    "text": "able to hide for too long um any questions uh that's where the",
    "start": "1875360",
    "end": "1881059"
  },
  {
    "text": "three tools will be released on my GitHub eventually and various references",
    "start": "1881059",
    "end": "1886340"
  },
  {
    "text": "for all of the tools and evasions and bits of the OS that I",
    "start": "1886340",
    "end": "1891500"
  },
  {
    "text": "talked about today slides will come up on the blackout site tomorrow grab me in the hallway we're out of time",
    "start": "1891500",
    "end": "1897679"
  },
  {
    "text": "for questions thank you [Applause]",
    "start": "1897679",
    "end": "1904210"
  }
]