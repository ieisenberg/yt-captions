[
  {
    "text": "good morning everyone i'm Sat Tak Koshi from the University of Tokyo and this is",
    "start": "2960",
    "end": "9280"
  },
  {
    "text": "Manami Mori from Tokyo Metropolitan University today uh we'd like to talk",
    "start": "9280",
    "end": "16160"
  },
  {
    "text": "about ML injection attack on confidential volumes our contributors are Takai from AISD and Takahashiroaga",
    "start": "16160",
    "end": "24480"
  },
  {
    "text": "from the University of Tokyo in this talk uh we'd like to point out that ML",
    "start": "24480",
    "end": "30560"
  },
  {
    "text": "is a serious security risk for confidential BMs that has been overlooked until",
    "start": "30560",
    "end": "36440"
  },
  {
    "text": "now this is the outline of our presentation first we will introduce",
    "start": "36440",
    "end": "41920"
  },
  {
    "text": "what a confidential BIM is bim stands for ber machine next we will explain",
    "start": "41920",
    "end": "48239"
  },
  {
    "text": "what AML is aml stand for HPI machine language then we will talk about the ML",
    "start": "48239",
    "end": "55120"
  },
  {
    "text": "injection attack that we proposed we will explain this attack with case studies from Linux and Windows after",
    "start": "55120",
    "end": "62960"
  },
  {
    "text": "that we will discuss how to avoid this attack with mitigation strategies these",
    "start": "62960",
    "end": "69040"
  },
  {
    "text": "strategies are aimed at users vendors and the community finally we will go",
    "start": "69040",
    "end": "74880"
  },
  {
    "text": "over the key takeaway from this presentation uh let's begin by talking about what a",
    "start": "74880",
    "end": "82320"
  },
  {
    "text": "confidential BM is today quad vendors offer virtual",
    "start": "82320",
    "end": "87840"
  },
  {
    "text": "machines or BMS to users as a service for example Amazon provide EC2 Google",
    "start": "87840",
    "end": "94159"
  },
  {
    "text": "provide compute engine and Microsoft provide Azure in traditional virtual",
    "start": "94159",
    "end": "99520"
  },
  {
    "text": "machines users had to completely trust quad vendors this is because once users",
    "start": "99520",
    "end": "105840"
  },
  {
    "text": "upload their data to virtual machines quad vendors have full access to the",
    "start": "105840",
    "end": "110920"
  },
  {
    "text": "data even if the data is encrypted before upload quad user cloud vendor can",
    "start": "110920",
    "end": "116799"
  },
  {
    "text": "access the decrypted data in memory during processing this makes users worry",
    "start": "116799",
    "end": "122560"
  },
  {
    "text": "about the safety of their sensitive data to solve this issue several code vendors",
    "start": "122560",
    "end": "129759"
  },
  {
    "text": "have recently introduced a technology called a confidential boo or shm a",
    "start": "129759",
    "end": "135680"
  },
  {
    "text": "confidential boo uses harder based mechanism to protect sensitive data in virtual machines from cloud vendors this",
    "start": "135680",
    "end": "143680"
  },
  {
    "text": "means that user don't have to trust cloud vendors when handling sensitive data in confidential volumes this",
    "start": "143680",
    "end": "150959"
  },
  {
    "text": "protection is provided through CPU based encryption and artistation we will",
    "start": "150959",
    "end": "156160"
  },
  {
    "text": "explain each of these technique in the next slide first in confidential volumes the",
    "start": "156160",
    "end": "163120"
  },
  {
    "text": "CPU encrypts the memory data of virtual machines the encryption keys are stored",
    "start": "163120",
    "end": "168480"
  },
  {
    "text": "inside the CPU so vendors cannot access the keys the CPU automatically encrypts",
    "start": "168480",
    "end": "175360"
  },
  {
    "text": "and decrypt memory data during read and write operations this allows existing",
    "start": "175360",
    "end": "181120"
  },
  {
    "text": "operating system to run on confidential VMs without any modification as a result users can",
    "start": "181120",
    "end": "188640"
  },
  {
    "text": "securely handle their sensitive data in confidential BMs with without worrying about crowd vendors accessing",
    "start": "188640",
    "end": "196959"
  },
  {
    "text": "it however even if the memory is encrypted user data could still be",
    "start": "197640",
    "end": "203200"
  },
  {
    "text": "leaked if a backer is installed in the confidential boo to avoid this users",
    "start": "203200",
    "end": "209200"
  },
  {
    "text": "need to perform art testation on confidential BIMs artistation is a",
    "start": "209200",
    "end": "214239"
  },
  {
    "text": "process that verify the contents of confidential BMs when a confidential BM boots the CPU checks memory contents and",
    "start": "214239",
    "end": "222239"
  },
  {
    "text": "generates an attestation report by checking this report users can confirm",
    "start": "222239",
    "end": "227599"
  },
  {
    "text": "that the O kernel and the farmer running in the confidential BM are",
    "start": "227599",
    "end": "233280"
  },
  {
    "text": "legitimate here uh we are going to review the thread model of confidential",
    "start": "233720",
    "end": "239560"
  },
  {
    "text": "BMS in confidential BMS crowd benders are assumed to be untrusted instead we trust CPU benders",
    "start": "239560",
    "end": "247760"
  },
  {
    "text": "to make sure that the encryption and attestation are done for sure this trust",
    "start": "247760",
    "end": "253200"
  },
  {
    "text": "allows users to securely handle their sensitive data in untrusted crowd environment",
    "start": "253200",
    "end": "259120"
  },
  {
    "text": "in this presentation we will base our discussion on this threat model where crowd vendors are",
    "start": "259120",
    "end": "266479"
  },
  {
    "text": "untrusted confidential boo have already been commercialized and are provided by",
    "start": "267160",
    "end": "272800"
  },
  {
    "text": "several major crowd vendors for example Amazon and Google provide Linux- based",
    "start": "272800",
    "end": "278160"
  },
  {
    "text": "confidential BM instances while Microsoft offers Windows-based confidential BMs the two major CPU",
    "start": "278160",
    "end": "284960"
  },
  {
    "text": "vendor also support confidential BMS and the CPU with MD SCB SNP and Intel TDX",
    "start": "284960",
    "end": "291919"
  },
  {
    "text": "are widely available so far we have talked about",
    "start": "291919",
    "end": "297520"
  },
  {
    "text": "confidential BIMs next before going into the detail of our attack method we will",
    "start": "297520",
    "end": "303680"
  },
  {
    "text": "give an overview of AML the key topic of this presentation",
    "start": "303680",
    "end": "309720"
  },
  {
    "text": "ml stand for HPI machine language and HCPI stand for advanced configuration",
    "start": "310320",
    "end": "316800"
  },
  {
    "text": "and power interface hpi is a standard for configuring configuring and",
    "start": "316800",
    "end": "322320"
  },
  {
    "text": "controlling computers ml is bite code defined by HPI and is used to control hardware it is",
    "start": "322320",
    "end": "330320"
  },
  {
    "text": "executed by an interpreter in the Osano the reason why this kind of executable",
    "start": "330320",
    "end": "335919"
  },
  {
    "text": "code is necessary is that harder control like power management need specific",
    "start": "335919",
    "end": "341199"
  },
  {
    "text": "action in a special sequence ml code is stored in the data structure called the",
    "start": "341199",
    "end": "346880"
  },
  {
    "text": "HPI table in the farmer when the system start up the OCL read the AML code into",
    "start": "346880",
    "end": "353039"
  },
  {
    "text": "memory and execute it here we will show you an example of",
    "start": "353039",
    "end": "359360"
  },
  {
    "text": "AML this screenshot shows ML code related to CPU power management on a",
    "start": "359360",
    "end": "365039"
  },
  {
    "text": "specific machine as shown in the red frame ML ML code can perform conditional branching",
    "start": "365039",
    "end": "372000"
  },
  {
    "text": "using if statement and access memory through variables with variables ML can",
    "start": "372000",
    "end": "377840"
  },
  {
    "text": "write to any specified physical memory in this way ML has the same",
    "start": "377840",
    "end": "383440"
  },
  {
    "text": "expressive power as standard programming languages an attack using AML was",
    "start": "383440",
    "end": "391280"
  },
  {
    "text": "proposed at Brackat Europa in 2006 it was called the HPI rootkit the HPI",
    "start": "391280",
    "end": "398319"
  },
  {
    "text": "rootkit is written in AML and stored in the fresh room when it is loading into",
    "start": "398319",
    "end": "404080"
  },
  {
    "text": "memory it works as a rootkit but the fresh room is installed in the physical",
    "start": "404080",
    "end": "409919"
  },
  {
    "text": "machine and software access is protected by a signature because of this this kind",
    "start": "409919",
    "end": "415360"
  },
  {
    "text": "of attack is not easy to do",
    "start": "415360",
    "end": "419719"
  },
  {
    "text": "with confidential volumes ML is provided by the quad vendor this means the quad",
    "start": "420560",
    "end": "426000"
  },
  {
    "text": "vendor can modify the ML at any time ml is used to configure and control the",
    "start": "426000",
    "end": "432160"
  },
  {
    "text": "budget machine so it's closely linked to the bot machine because of this ML can",
    "start": "432160",
    "end": "438080"
  },
  {
    "text": "be specific to the cloud vendor in fact some crowd vendors use custom AML for",
    "start": "438080",
    "end": "443680"
  },
  {
    "text": "their confidential volumes as I said the ML for virtual machine is",
    "start": "443680",
    "end": "450400"
  },
  {
    "text": "provided by the cloud vendor with the traditional virtual machines users trust the cloud vendors and therefore trust",
    "start": "450400",
    "end": "457039"
  },
  {
    "text": "the vendor ML as well but with confidential bins the threat model",
    "start": "457039",
    "end": "462479"
  },
  {
    "text": "assumes that users do not trust the cloud vendor this means user also cannot",
    "start": "462479",
    "end": "468080"
  },
  {
    "text": "trust the vendor farmer in this case like HTPA rootkit the crowd",
    "start": "468080",
    "end": "473919"
  },
  {
    "text": "vendor could install a rootkit in the ML to avoid such attacks user must always",
    "start": "473919",
    "end": "479840"
  },
  {
    "text": "verify ML through PVM attestation by checking the shimmist stationation report users can find out",
    "start": "479840",
    "end": "486800"
  },
  {
    "text": "if the crowd vendor has loaded non-registate ML now that we've explained the",
    "start": "486800",
    "end": "494160"
  },
  {
    "text": "confidential VM and ML let's move on to our proposal the ML injection",
    "start": "494160",
    "end": "499639"
  },
  {
    "text": "attack in our attack we inject AML into the confidential BM without affecting",
    "start": "499639",
    "end": "506759"
  },
  {
    "text": "attestation the key idea is to use the runtime interface to send AML to the",
    "start": "506759",
    "end": "512560"
  },
  {
    "text": "virtual machine after it has booted ml embedded in the firmware is checked during attestation of the confidential",
    "start": "512560",
    "end": "519479"
  },
  {
    "text": "BM however ML injected after the BM has booted is not included in this",
    "start": "519479",
    "end": "525600"
  },
  {
    "text": "attestation that's right this injected AML cannot be detected by",
    "start": "525600",
    "end": "532360"
  },
  {
    "text": "attestation this means that the cloud vendor can inject AML into the confidential BM without the user",
    "start": "532360",
    "end": "538760"
  },
  {
    "text": "noticing this runtime interface is designed for communication between the",
    "start": "538760",
    "end": "543839"
  },
  {
    "text": "firmware and the host to pass configuration information at runtime in traditional virtual machines this",
    "start": "543839",
    "end": "550720"
  },
  {
    "text": "interface is useful for improving management flexibility but in confidential volumes it becomes",
    "start": "550720",
    "end": "557600"
  },
  {
    "text": "sub back door for injecting ML with a detection this problem comes from a",
    "start": "557600",
    "end": "562720"
  },
  {
    "text": "design mismatch caused by the difference in thread models between traditional BMS and confidential",
    "start": "562720",
    "end": "569720"
  },
  {
    "text": "volumes ml injection attack exploit this design mismatch with ML injection crowd",
    "start": "569720",
    "end": "575920"
  },
  {
    "text": "vendor can inject a ML code into a user's confidential BM without being detected this ML code is interpreted by",
    "start": "575920",
    "end": "584279"
  },
  {
    "text": "Oscan allowing it to perform various actions so what can vendors actually do",
    "start": "584279",
    "end": "590959"
  },
  {
    "text": "with ML code as we explained earlier ML code can",
    "start": "590959",
    "end": "597279"
  },
  {
    "text": "access the memory inside the confidential boo however it was unclear what specific attacks can be carried out",
    "start": "597279",
    "end": "604640"
  },
  {
    "text": "using ML injection in this demonstration we will show that arbitrary code execution is possible in",
    "start": "604640",
    "end": "612320"
  },
  {
    "text": "both Linux and Windows guest through MML injection this ability for crowd vendors",
    "start": "612320",
    "end": "618000"
  },
  {
    "text": "to execute arbitrary code in confidential boo is a serious security issue that contradict the threat",
    "start": "618000",
    "end": "626120"
  },
  {
    "text": "model additionally virtual machines and host can communicate easily this means",
    "start": "626120",
    "end": "631920"
  },
  {
    "text": "crowd vendor could easily take full control of confidential boos by interacting with the code running inside",
    "start": "631920",
    "end": "637640"
  },
  {
    "text": "them therefore we can say that an MA injection attack is highly critical from here we will introduce",
    "start": "637640",
    "end": "645600"
  },
  {
    "text": "case studies for Linux and Windows one by one now Manami will present the Linux",
    "start": "645600",
    "end": "650640"
  },
  {
    "text": "case study",
    "start": "650640",
    "end": "653880"
  },
  {
    "text": "now I will talk about a case study of AML injection attack on Linux and in",
    "start": "656160",
    "end": "662560"
  },
  {
    "text": "this experiment we use a local computer to share the role of a crowd",
    "start": "662560",
    "end": "668279"
  },
  {
    "text": "vendor now first let's look at ML injection in Linux in the Linux case we",
    "start": "668279",
    "end": "674880"
  },
  {
    "text": "use Q MU as the host of BEL machine monitor and OBMF as a firmware running",
    "start": "674880",
    "end": "681600"
  },
  {
    "text": "inside the confidential VM qmu and OBMF are widely used to run Linux guests on",
    "start": "681600",
    "end": "689120"
  },
  {
    "text": "battle machines and so the OMF firmware was customized by OMD specifically for the",
    "start": "689120",
    "end": "697200"
  },
  {
    "text": "confidential VMs and QMU has a runtime interface called the QMU firmware",
    "start": "697200",
    "end": "704320"
  },
  {
    "text": "configuration device or FWCFG for short this interface is used to provide",
    "start": "704320",
    "end": "711519"
  },
  {
    "text": "various configuration data to the budget machine it can also send HPI information",
    "start": "711519",
    "end": "718079"
  },
  {
    "text": "from the host to the OVM firmware at one time as a result cloud vendor can inject",
    "start": "718079",
    "end": "724800"
  },
  {
    "text": "arbitrary ML code into the OM firmware through the FWCG",
    "start": "724800",
    "end": "732360"
  },
  {
    "text": "interface next let's talk about how an AML injection attack is carried out on",
    "start": "732360",
    "end": "738639"
  },
  {
    "text": "Linux the injected ML code is passed from the firmware to the Linux kernel",
    "start": "738639",
    "end": "745440"
  },
  {
    "text": "the Linux kernel then interprets the ML code at the startup uh we created ML",
    "start": "745440",
    "end": "752079"
  },
  {
    "text": "code that rewrites the initial RAM disk of Linux this armor disc contains the",
    "start": "752079",
    "end": "758000"
  },
  {
    "text": "init script which runs at startup so modifying this script",
    "start": "758000",
    "end": "764000"
  },
  {
    "text": "arbitary script can be executed with a root privilege after the Linux kernel starts our ML code changes the init",
    "start": "764000",
    "end": "772000"
  },
  {
    "text": "script to open root shell and it redirect the standard IO to B serial",
    "start": "772000",
    "end": "778240"
  },
  {
    "text": "port TTY1 so through this B serial port crowd",
    "start": "778240",
    "end": "784079"
  },
  {
    "text": "vendor can access the root shell in the confidential BM the root shell is just",
    "start": "784079",
    "end": "789680"
  },
  {
    "text": "one example of how easily powerful privilege can be obtained by modifying",
    "start": "789680",
    "end": "795440"
  },
  {
    "text": "canel memory arbitary code can be executed without user",
    "start": "795440",
    "end": "801000"
  },
  {
    "text": "noticing this is part of AML code we inject it it calculates the memory",
    "start": "801000",
    "end": "806720"
  },
  {
    "text": "location of the init script and overwrite it character by character and this code uh in the red box is writing",
    "start": "806720",
    "end": "815040"
  },
  {
    "text": "uh change root and shell launcher cell and direct to TTY s1 and this modifies",
    "start": "815040",
    "end": "823120"
  },
  {
    "text": "the init script to launch a root shell this is a video of our demonstration so",
    "start": "823120",
    "end": "830160"
  },
  {
    "text": "we use the QMU command to run a confidential VM with a option to inject",
    "start": "830160",
    "end": "836079"
  },
  {
    "text": "our malicious CML via firmware configuration so now let's start boot CM",
    "start": "836079",
    "end": "843839"
  },
  {
    "text": "and this now booting",
    "start": "843839",
    "end": "847880"
  },
  {
    "text": "after booted and we used to sn get guest command to get to the attestation report",
    "start": "850720",
    "end": "857680"
  },
  {
    "text": "of this CVM from the CPU so we confirm the hash value of the",
    "start": "857680",
    "end": "865120"
  },
  {
    "text": "attest attestation report and compared it with expected value this is the",
    "start": "865120",
    "end": "871839"
  },
  {
    "text": "attestation report from the",
    "start": "871839",
    "end": "875440"
  },
  {
    "text": "CPU and this expected value since they are matched the attestation is",
    "start": "877160",
    "end": "883320"
  },
  {
    "text": "successful but so as you can see the cloud vendor",
    "start": "883320",
    "end": "889120"
  },
  {
    "text": "can access the root shell in the confidential VM through the B serial port DTY S1 this is back door so we",
    "start": "889120",
    "end": "896959"
  },
  {
    "text": "successfully created a back door for the CVM so we can see any file in the",
    "start": "896959",
    "end": "902959"
  },
  {
    "text": "confidential",
    "start": "902959",
    "end": "905600"
  },
  {
    "text": "VM next let's move on to the Windows case study we investigated Windows CVM on",
    "start": "913800",
    "end": "921839"
  },
  {
    "text": "Microsoft Azure since the source code for Microsoft Azure firmware is not",
    "start": "921839",
    "end": "927199"
  },
  {
    "text": "publicly available we got the firmware binary from an Azure instance and we engineered",
    "start": "927199",
    "end": "933600"
  },
  {
    "text": "it through this analysis we found that the Azure firmware has two undocumented",
    "start": "933600",
    "end": "939040"
  },
  {
    "text": "runtime interfaces that can inject AML code from the host one uses legacy port",
    "start": "939040",
    "end": "945279"
  },
  {
    "text": "IO and the other uses data structure in memory both interfaces can send HCPI",
    "start": "945279",
    "end": "951600"
  },
  {
    "text": "information including ML code to the bot machine the injected ML code is loaded",
    "start": "951600",
    "end": "960480"
  },
  {
    "text": "and executed by the Windows kernel just like in Linux but Windows has a security",
    "start": "960480",
    "end": "966240"
  },
  {
    "text": "mechanism to protect the kernel from MAS ML this mechanism was introduced to stop",
    "start": "966240",
    "end": "971920"
  },
  {
    "text": "attacks like the HPI rootkit it blocks writing to regular memory areas that aren't IIO regions but we",
    "start": "971920",
    "end": "980320"
  },
  {
    "text": "found a way to bypass this security mechanism we used the memory area called the UEFI runtime service this area has",
    "start": "980320",
    "end": "988399"
  },
  {
    "text": "firmware code called by OS operating systems this area is rewritable as this",
    "start": "988399",
    "end": "994160"
  },
  {
    "text": "is in memory but it isn't protected by the Windows kernel by reverting the UFI",
    "start": "994160",
    "end": "999759"
  },
  {
    "text": "runtime service code with AML we were able to execute arbitary code when the Windows kernel is",
    "start": "999759",
    "end": "1007240"
  },
  {
    "text": "booting this is the actual AML code we used in the Windows demonstration in the",
    "start": "1007240",
    "end": "1012880"
  },
  {
    "text": "red box above we apply a patch to the UF runtime service and insert a jump",
    "start": "1012880",
    "end": "1018440"
  },
  {
    "text": "instruction this jump instruction runs our code shows in the red box below",
    "start": "1018440",
    "end": "1025038"
  },
  {
    "text": "inside the Windows kernel before showing the attack demonstration",
    "start": "1025039",
    "end": "1030319"
  },
  {
    "text": "we'd like to give you a few notes first this demonstration is a simulation on Microsoft Azure instance since we don't",
    "start": "1030319",
    "end": "1037600"
  },
  {
    "text": "have the access to the Azure host we use the debug window debugging function to simulate the injection of IML through",
    "start": "1037600",
    "end": "1044678"
  },
  {
    "text": "firmware we also disabled secure boot to use this debugging function however this",
    "start": "1044679",
    "end": "1050960"
  },
  {
    "text": "was only required for debugging and we did not modify any programs in the firmware boot order or Windows",
    "start": "1050960",
    "end": "1058600"
  },
  {
    "text": "kernel additionally we have separately confirmed that on a local machine it is",
    "start": "1058600",
    "end": "1064400"
  },
  {
    "text": "possible to inject AML through this undocumented interface from a Windows host to Azure firmware that said we will",
    "start": "1064400",
    "end": "1072000"
  },
  {
    "text": "omit this part of this demonstration to focus on what can be achieved in an",
    "start": "1072000",
    "end": "1077200"
  },
  {
    "text": "actual Azure environment",
    "start": "1077200",
    "end": "1080880"
  },
  {
    "text": "now you see a Windows CVM on Azure through a remote desktop window and",
    "start": "1086000",
    "end": "1094080"
  },
  {
    "text": "uh this is a startup folder of SHM and it's empty now",
    "start": "1096360",
    "end": "1103400"
  },
  {
    "text": "next we use a debugging future of Windows to pass our HCPI table this",
    "start": "1105000",
    "end": "1111360"
  },
  {
    "text": "simulate an ML injection attack then we reboot the",
    "start": "1111360",
    "end": "1117320"
  },
  {
    "text": "SHM now we have to wait some time before the sh boot up",
    "start": "1117320",
    "end": "1125159"
  },
  {
    "text": "now we have the shm booted and uh yes uh botch file running in the shm",
    "start": "1129919",
    "end": "1138320"
  },
  {
    "text": "this is done via conical execution by our IML and",
    "start": "1138320",
    "end": "1144960"
  },
  {
    "text": "uh this is the startup folder of shu now we have a batch file in it and this is",
    "start": "1148039",
    "end": "1154480"
  },
  {
    "text": "created from the kernel by our IML",
    "start": "1154480",
    "end": "1160080"
  },
  {
    "text": "here we will go over the detail of the Azure environment used in the Windows",
    "start": "1160600",
    "end": "1166280"
  },
  {
    "text": "demo specifically we will explain how we discover the undocumented interfaces and",
    "start": "1166280",
    "end": "1171600"
  },
  {
    "text": "whether they can be exploited oh sorry for Azure instances the farmer",
    "start": "1171600",
    "end": "1179679"
  },
  {
    "text": "binary and source code are not publicly available so we developed a method to dump the firmware from the Azure",
    "start": "1179679",
    "end": "1185919"
  },
  {
    "text": "instance first we started a Windows Shibuym on Azure with a Cano debugger",
    "start": "1185919",
    "end": "1193799"
  },
  {
    "text": "enabled next we used the Cano debugger to pause the Shibuym finally we scan the entire",
    "start": "1193799",
    "end": "1201600"
  },
  {
    "text": "Shibuyu memory to locate the magic value expected in the farmer header using this",
    "start": "1201600",
    "end": "1207360"
  },
  {
    "text": "procedure we successfully located and dumped the farmer image of the Azure instance",
    "start": "1207360",
    "end": "1214720"
  },
  {
    "text": "when we looked at the dumped farmer image we found two undocumented interface that can inject AML one is",
    "start": "1214720",
    "end": "1221919"
  },
  {
    "text": "called the PCAT B helper and is part of the HAPI platform module the other is",
    "start": "1221919",
    "end": "1229039"
  },
  {
    "text": "called the UEFI config bro and is part of the platform PI module here is the",
    "start": "1229039",
    "end": "1235440"
  },
  {
    "text": "decompile call for these interfaces in the PCIT BISH helper interface it first",
    "start": "1235440",
    "end": "1241600"
  },
  {
    "text": "uses an in instruction to get the size of HTPI table then it uses an out",
    "start": "1241600",
    "end": "1247120"
  },
  {
    "text": "instruction to read the HTPI table data in the UFI config bro interface it",
    "start": "1247120",
    "end": "1253120"
  },
  {
    "text": "leaves a structure stored at the spec memory address and get the HPI table data from it this undocumented interface",
    "start": "1253120",
    "end": "1261120"
  },
  {
    "text": "can be dangerous factors for ML injection because users don't know they exist",
    "start": "1261120",
    "end": "1268440"
  },
  {
    "text": "that said is this interface really exploitable we reported this",
    "start": "1268480",
    "end": "1274080"
  },
  {
    "text": "undocumented interface issue to the vendor and their response was that Azure",
    "start": "1274080",
    "end": "1279200"
  },
  {
    "text": "host cannot inject a ML into Shivm they explained that this is because the",
    "start": "1279200",
    "end": "1285760"
  },
  {
    "text": "current Azure architecture include a component called parvisor the parvisor",
    "start": "1285760",
    "end": "1290880"
  },
  {
    "text": "exists between the host and the firmware to protect this interface it is isolated",
    "start": "1290880",
    "end": "1296559"
  },
  {
    "text": "from both the interface and the host by feature called bger trust level orl in",
    "start": "1296559",
    "end": "1303240"
  },
  {
    "text": "hyperboy if parvisor is working correctly this undocumented interface may not be",
    "start": "1303240",
    "end": "1309320"
  },
  {
    "text": "exploitable but can we really trust this",
    "start": "1309320",
    "end": "1314600"
  },
  {
    "text": "parvisor the parvisor used in Azure is called the host compatible layer or hl",
    "start": "1314600",
    "end": "1321200"
  },
  {
    "text": "hf currently used in Azure is proprietary and its binary and source code is not publicly available as a",
    "start": "1321200",
    "end": "1328640"
  },
  {
    "text": "result users cannot verify that the parvisor can verify the parvisor at all",
    "start": "1328640",
    "end": "1334240"
  },
  {
    "text": "and must free trust the vendors for its operation additionally the source code",
    "start": "1334240",
    "end": "1340400"
  },
  {
    "text": "for Azure firmware is also not publicly available making it impossible to fully verify its waste machine",
    "start": "1340400",
    "end": "1347840"
  },
  {
    "text": "as I said in the confidential whim thread model cloud vendor are untrusted",
    "start": "1347840",
    "end": "1353760"
  },
  {
    "text": "however in Azure users are required to trust both the firmware and the parvisor",
    "start": "1353760",
    "end": "1358799"
  },
  {
    "text": "provided by the vendor it bas it violates this threat model so the",
    "start": "1358799",
    "end": "1364480"
  },
  {
    "text": "current azure setup does not align with the original intent of confidential bims",
    "start": "1364480",
    "end": "1371280"
  },
  {
    "text": "very recently Microsoft released a parvisor called open edge share as open",
    "start": "1371280",
    "end": "1376360"
  },
  {
    "text": "source open H share is based on a hypervisor called open BMM written in",
    "start": "1376360",
    "end": "1382159"
  },
  {
    "text": "Rust and focuses on providing parvis functionality it learns as a user mode",
    "start": "1382159",
    "end": "1387919"
  },
  {
    "text": "program on open reinux kernel additionally the farmer we dumped",
    "start": "1387919",
    "end": "1394320"
  },
  {
    "text": "and reus engineer has been open sourced under the name MSVM if open edge share used is used as",
    "start": "1394320",
    "end": "1402480"
  },
  {
    "text": "a parvisor user will likely be able to attest to the parvisor since its source",
    "start": "1402480",
    "end": "1407840"
  },
  {
    "text": "code is publicly available however open shell is not yet being used in the",
    "start": "1407840",
    "end": "1413600"
  },
  {
    "text": "current aure environment and its attestability remains a future",
    "start": "1413600",
    "end": "1419360"
  },
  {
    "text": "challenge from here we will propose three mitigation strategies for the MA",
    "start": "1419960",
    "end": "1425120"
  },
  {
    "text": "injection attack first users can mitigate AML injection",
    "start": "1425120",
    "end": "1431360"
  },
  {
    "text": "attack by performing measured boot with the B TPM AML injected at one time is",
    "start": "1431360",
    "end": "1437919"
  },
  {
    "text": "not included in the attestation of the confidential boo therefore user needs",
    "start": "1437919",
    "end": "1443039"
  },
  {
    "text": "separately to attest the injected AML this can be done by including the",
    "start": "1443039",
    "end": "1448400"
  },
  {
    "text": "injected AML in the measurement using a budget TPM to do this properly users",
    "start": "1448400",
    "end": "1454880"
  },
  {
    "text": "need to do three things use farmers support TPM based ML attestation use a",
    "start": "1454880",
    "end": "1461200"
  },
  {
    "text": "sec securely protected budget of TPM and verify the TPM code generated during the",
    "start": "1461200",
    "end": "1466799"
  },
  {
    "text": "measured boot without these steps users cannot rule out the possibility that the",
    "start": "1466799",
    "end": "1472240"
  },
  {
    "text": "crowd vendor might secretly execute a call through an M injection",
    "start": "1472240",
    "end": "1477720"
  },
  {
    "text": "attack we reported this issue to MD in May this year in response Emily notified",
    "start": "1477720",
    "end": "1484400"
  },
  {
    "text": "affected partners and published a public security brief on December 9th this",
    "start": "1484400",
    "end": "1490000"
  },
  {
    "text": "brief recommend the use of BTPM to include all HCPI tables in measured boot",
    "start": "1490000",
    "end": "1496240"
  },
  {
    "text": "which matches our suggestion however it is important to note that the measured boot feature is",
    "start": "1496240",
    "end": "1503200"
  },
  {
    "text": "still in the in the previous stage and has not yet been incorporated into the",
    "start": "1503200",
    "end": "1508720"
  },
  {
    "text": "upstream software packages secondary to address issues like the",
    "start": "1508720",
    "end": "1515279"
  },
  {
    "text": "Azure case crowd vendor should ensure that everything is attestable since crowd vendor are considered untrusted",
    "start": "1515279",
    "end": "1522720"
  },
  {
    "text": "users need to be able to attest to all the code worded into the confidential VM",
    "start": "1522720",
    "end": "1528799"
  },
  {
    "text": "to make this possible crowd vendors must first release the actual binaries into",
    "start": "1528799",
    "end": "1533840"
  },
  {
    "text": "the confidential volumes even if users can check the attestation report they",
    "start": "1533840",
    "end": "1539200"
  },
  {
    "text": "cannot verify it without knowing which binary it correspond to additionally the source code used to",
    "start": "1539200",
    "end": "1547440"
  },
  {
    "text": "generate that binary should also be made available without the source code third parties cannot verify how the binary",
    "start": "1547440",
    "end": "1554760"
  },
  {
    "text": "works this include the binary and source code of the firmware and parvisor",
    "start": "1554760",
    "end": "1561360"
  },
  {
    "text": "we reported the issue of the able injection attack to Microsoft in July this year however as we mentioned",
    "start": "1561360",
    "end": "1569279"
  },
  {
    "text": "earlier Microsoft says that it is prevented by the provider when we asked",
    "start": "1569279",
    "end": "1574640"
  },
  {
    "text": "how crowd users could verify that they responded that the H share is developed",
    "start": "1574640",
    "end": "1579840"
  },
  {
    "text": "by Microsoft and as such CVM users do need to press a level of trust in",
    "start": "1579840",
    "end": "1585039"
  },
  {
    "text": "Microsoft as the quad operator they also acknowledged that the current Azure",
    "start": "1585039",
    "end": "1590080"
  },
  {
    "text": "parvisor binaries and source code are not publicly available although they recently",
    "start": "1590080",
    "end": "1595760"
  },
  {
    "text": "released the open HCL source code the parvisor used in Azure is still HCL and",
    "start": "1595760",
    "end": "1601520"
  },
  {
    "text": "not H open HCL and its binary is not available therefore Azure instances",
    "start": "1601520",
    "end": "1608320"
  },
  {
    "text": "remain unverifiable unverifiable by users",
    "start": "1608320",
    "end": "1613799"
  },
  {
    "text": "the final mitigation is to improve the security of ML itself even if ML can be",
    "start": "1613919",
    "end": "1619840"
  },
  {
    "text": "attested verifying the security is not simple unlike soft open source software",
    "start": "1619840",
    "end": "1626720"
  },
  {
    "text": "ML and HPI tables are used to manage the configuration of the virtual machine",
    "start": "1626720",
    "end": "1632480"
  },
  {
    "text": "this configuration can vary depending on the virtual machine and the vendor providing it",
    "start": "1632480",
    "end": "1638320"
  },
  {
    "text": "additionally the content of AML can change by modifying the virtual machines",
    "start": "1638320",
    "end": "1643559"
  },
  {
    "text": "configuration uh because of this it is difficult for third party to verify the security of",
    "start": "1643559",
    "end": "1650840"
  },
  {
    "text": "AML future ways for improving ML security include enhancing the ML",
    "start": "1650840",
    "end": "1656720"
  },
  {
    "text": "interpreter and improving ML verification for interpreter enhancement",
    "start": "1656720",
    "end": "1662159"
  },
  {
    "text": "Windows has introduced a basic sandbox as a counter measure against HPI rootkit however our attack which",
    "start": "1662159",
    "end": "1669679"
  },
  {
    "text": "exploits the UF random service can bypass this sandbox in the future more",
    "start": "1669679",
    "end": "1675600"
  },
  {
    "text": "fine grain and robust sandbox will be necessary for verification possible ways",
    "start": "1675600",
    "end": "1681440"
  },
  {
    "text": "include huistic analysis of HPI tables and AML as well as comprehensive formal",
    "start": "1681440",
    "end": "1687559"
  },
  {
    "text": "verification however these approaches can be implemented in short term so the",
    "start": "1687559",
    "end": "1693200"
  },
  {
    "text": "long-term effort will be required to study and develop effective counter",
    "start": "1693200",
    "end": "1699159"
  },
  {
    "text": "measures finally uh let's go over the key takeaway for each of the three stakeholders in the confidential",
    "start": "1699159",
    "end": "1706600"
  },
  {
    "text": "bims for crowd users we strongly recommend always performing measured boot with BTPM for confidential BM",
    "start": "1706600",
    "end": "1714480"
  },
  {
    "text": "without this you cannot avoid the risk of arbitrary code execution by the crowd vendors for crowd vendors we recommend",
    "start": "1714480",
    "end": "1722159"
  },
  {
    "text": "you to make everything used in confidential BMs adjustable this will help build a much trustworthy CBM",
    "start": "1722159",
    "end": "1728720"
  },
  {
    "text": "environment for users to achieve this both binaries and reproducible source",
    "start": "1728720",
    "end": "1734320"
  },
  {
    "text": "code for the software loaded into the confidential BIM must be provided for the community we recommend",
    "start": "1734320",
    "end": "1741840"
  },
  {
    "text": "you to recognize that improving AML security is a long-term challenge that requires sustained effort that's all",
    "start": "1741840",
    "end": "1749120"
  },
  {
    "text": "from us thank you for listening and we are happy to take any questions [Applause]",
    "start": "1749120",
    "end": "1761679"
  },
  {
    "text": "oh",
    "start": "1774000",
    "end": "1777000"
  },
  {
    "text": "that's cool",
    "start": "1781760",
    "end": "1785159"
  },
  {
    "text": "linux confidential ACPIL does it still exeute the ACP",
    "start": "1787840",
    "end": "1797440"
  },
  {
    "text": "so yes that that's right so AC Linux case should",
    "start": "1797440",
    "end": "1803720"
  },
  {
    "text": "booting Linux case on confidential VM without HPI table is one of the",
    "start": "1803720",
    "end": "1810640"
  },
  {
    "text": "mitigation but uh HPI has a very uh important data to",
    "start": "1810640",
    "end": "1816440"
  },
  {
    "text": "boot and uh and hardware information so for compet compatible problems uh it is",
    "start": "1816440",
    "end": "1825039"
  },
  {
    "text": "difficult to uh dissolve it so we must uh think the alternative",
    "start": "1825039",
    "end": "1832679"
  },
  {
    "text": "uh solution of ACPI table so this is not uh",
    "start": "1832679",
    "end": "1838919"
  },
  {
    "text": "easy way so I think thank you",
    "start": "1838919",
    "end": "1847158"
  },
  {
    "text": "try on Oh thank you did you try any of these attacks on uh EC2s uh running the",
    "start": "1852200",
    "end": "1861840"
  },
  {
    "text": "firecracker VM uh in other words on the on Amazon's uh what's it called i forget",
    "start": "1861840",
    "end": "1868640"
  },
  {
    "text": "their basically their new generation hardware that's sort of custom made well",
    "start": "1868640",
    "end": "1874520"
  },
  {
    "text": "uh my understanding My understanding is that uh did we the",
    "start": "1874520",
    "end": "1883799"
  },
  {
    "text": "uh my understanding that I you asking about",
    "start": "1884679",
    "end": "1890880"
  },
  {
    "text": "the well but specifically the uh nitro hardware and",
    "start": "1892039",
    "end": "1899840"
  },
  {
    "text": "the um the firecracker VMs which is now about a third of the full fleet yeah uh",
    "start": "1899840",
    "end": "1907519"
  },
  {
    "text": "we have examined EC2 instances but not for",
    "start": "1907519",
    "end": "1913720"
  },
  {
    "text": "Thank you for thank you for listening our presentation and uh and you don't",
    "start": "1942240",
    "end": "1947600"
  },
  {
    "text": "have any question other than uh okay okay okay is okay thank you",
    "start": "1947600",
    "end": "1954799"
  },
  {
    "text": "thank [Applause]",
    "start": "1954799",
    "end": "1958769"
  }
]