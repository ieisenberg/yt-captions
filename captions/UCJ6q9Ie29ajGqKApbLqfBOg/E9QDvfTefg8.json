[
  {
    "text": "hi wow that's loud hi I'm David mayor of the ISS exp Force research and",
    "start": "30880",
    "end": "35920"
  },
  {
    "text": "development team and you might remember me from other such fake public serves announcements as help my EIP is out of",
    "start": "35920",
    "end": "42640"
  },
  {
    "text": "control and the heaping you and interspective but today I decided to take the X Force cape and utility belt",
    "start": "42640",
    "end": "48559"
  },
  {
    "text": "off and come here to talk to you about a very important issue NX",
    "start": "48559",
    "end": "53600"
  },
  {
    "text": "so if if you don't know what NX is it basically stands for no execute and it's a generic way to do buffer overflow",
    "start": "53600",
    "end": "59600"
  },
  {
    "text": "protection I'm uh I'm treating this as a as if it were a blind date because I think that's",
    "start": "59600",
    "end": "66680"
  },
  {
    "text": "the most awkward situation when you get to know someone and uh that's kind of how I feel about this uh this",
    "start": "66680",
    "end": "72960"
  },
  {
    "text": "subject start from the beginning what is the problem everybody everybody here should know what Buffalo overlow is uh",
    "start": "72960",
    "end": "79360"
  },
  {
    "text": "why why it's important they're used heavily in exploits worms um Everybody",
    "start": "79360",
    "end": "85320"
  },
  {
    "text": "basically is starting to know you know what what an exploit is even you know non-technical people my parents for",
    "start": "85320",
    "end": "90600"
  },
  {
    "text": "instance know what a uh a buffer overflow is and the the the the CRI the",
    "start": "90600",
    "end": "95920"
  },
  {
    "text": "terms root and own are becoming more used in you know Common vernacular uh everybody now knows of",
    "start": "95920",
    "end": "102040"
  },
  {
    "text": "course about Microsoft super Tuesday as well I mean the uh the releasing of security patches has become you know",
    "start": "102040",
    "end": "107799"
  },
  {
    "text": "part of a common culture uh it's getting more important uh computer security is",
    "start": "107799",
    "end": "113680"
  },
  {
    "text": "no longer a movie subplot it affects people where it's most noticeable the wallet and as you've noticed uh I in the",
    "start": "113680",
    "end": "120159"
  },
  {
    "text": "last couple years there been more and more talks about worms costing people money uh people losing credit card",
    "start": "120159",
    "end": "125479"
  },
  {
    "text": "numbers information like that so computer security becoming more and more and more important for instance the worm",
    "start": "125479",
    "end": "130720"
  },
  {
    "text": "stop ATM machine from working everybody remembers that from the Blaster exploit was anybody here affected by that I was",
    "start": "130720",
    "end": "136400"
  },
  {
    "text": "I couldn't get money out of an ATM that was great um worms cost up to $50 billion",
    "start": "136400",
    "end": "143319"
  },
  {
    "text": "you know somewhere somebody has got to be really proud of that that a worm they wrote is costing somebody $50 billion of",
    "start": "143319",
    "end": "149519"
  },
  {
    "text": "course you that's not a concrete number but uh it's still reported and this is a generic buffer",
    "start": "149519",
    "end": "155840"
  },
  {
    "text": "overflow I thought for the people in the audience that didn't has never seen a buffer overflow this is the most generic",
    "start": "155840",
    "end": "161040"
  },
  {
    "text": "buffer overflow I could come up with it's a snippet of C code you take in uh",
    "start": "161040",
    "end": "166360"
  },
  {
    "text": "the command line arguments you pass the uh the first command line argument directly to a function named Bob Bob",
    "start": "166360",
    "end": "172319"
  },
  {
    "text": "will then s a copy the that argument directly into a uh character arrray uh",
    "start": "172319",
    "end": "177680"
  },
  {
    "text": "uh size of five uh and then print copy done and leave see",
    "start": "177680",
    "end": "182760"
  },
  {
    "text": "the problem with this is if you uh if you send in more what happens if you send in more than five bites uh bad",
    "start": "182760",
    "end": "188400"
  },
  {
    "text": "things happen things get overwritten and then the party starts and this is one of the reasons um a lot of work has been",
    "start": "188400",
    "end": "195000"
  },
  {
    "text": "done lately to mitigate uh the coding errors that cause things like that but there this problems be tackled from",
    "start": "195000",
    "end": "201560"
  },
  {
    "text": "another angle as well which is a hardware based uh one of the reasons this happens is a hardware allows it to",
    "start": "201560",
    "end": "207640"
  },
  {
    "text": "happen what about buffer overflows are strange",
    "start": "207640",
    "end": "212959"
  },
  {
    "text": "well where the code is being executed from is very strange normally write uh readable and executable memory uh sorry",
    "start": "212959",
    "end": "218879"
  },
  {
    "text": "rable executable memory you don't want to execute code from there uh the fact the code is being executed from there",
    "start": "218879",
    "end": "224760"
  },
  {
    "text": "it's kind of strange the fact that the return address changes for a stack Overflow in the middle of a uh middle of",
    "start": "224760",
    "end": "231000"
  },
  {
    "text": "a function C that's kind of strange uh you know suddenly you're calling strange function calls that this program",
    "start": "231000",
    "end": "236480"
  },
  {
    "text": "generally does not need uh basically there's executable code on C or Heap there there's a minor exception with",
    "start": "236480",
    "end": "241959"
  },
  {
    "text": "that dynamically generated code like Java will uh will run from uh generally run from Heap space or um Packers",
    "start": "241959",
    "end": "250360"
  },
  {
    "text": "copyright protection stuff will do that as well um but uh these things are all",
    "start": "250360",
    "end": "255760"
  },
  {
    "text": "kind of strange and these are things that uh Hardware makers feel that they can help you mitigate uh so that that that that has a",
    "start": "255760",
    "end": "263240"
  },
  {
    "text": "problem that raises a question is buffer overflows a hardware software problem um Hardware",
    "start": "263240",
    "end": "270840"
  },
  {
    "text": "a lot of this has to do with the hardware what is NX NX is a bit in the",
    "start": "270840",
    "end": "276320"
  },
  {
    "text": "page table certain micro processors it's the last bit in the page table and if it's set to zero the uh the memory is",
    "start": "276320",
    "end": "283080"
  },
  {
    "text": "executable if it's set to one it's not the page sh must be in um pae format the",
    "start": "283080",
    "end": "289000"
  },
  {
    "text": "ability to set read write execute page permissions has been around since the 386 chip it's just been uh never used",
    "start": "289000",
    "end": "296160"
  },
  {
    "text": "basically they've had the ability to stop executable memory uh to stop this problem since the three uh that 386 but",
    "start": "296160",
    "end": "302720"
  },
  {
    "text": "nobody's really been paying attention to to those flags uh by setting pages that contain no executable code to not",
    "start": "302720",
    "end": "309320"
  },
  {
    "text": "executable code injection exploit like stack or heat based overflows can be stopped intel Call is their own version of this XD all right so it's it's",
    "start": "309320",
    "end": "316560"
  },
  {
    "text": "identical to what AMD is doing except for the name you got to love how you know different vendors have to have different names for stuff they just you",
    "start": "316560",
    "end": "322840"
  },
  {
    "text": "know can't call it the same thing like the MX and 3D now from you know a couple years ago same same thing uh you may see",
    "start": "322840",
    "end": "330240"
  },
  {
    "text": "that NX is referred to as EVP or an enhanced virus protection in AMD",
    "start": "330240",
    "end": "336400"
  },
  {
    "text": "docs uh where where can we get uh no execute support well basically right now",
    "start": "336400",
    "end": "341560"
  },
  {
    "text": "you have to use one of the AMD Athlon or opteron chips or one of the Intel uh J series chips is no execute the Magic",
    "start": "341560",
    "end": "349360"
  },
  {
    "text": "Bullet no exe uh no execute is a stand is not a standard loone solution it requires Opera system support and that",
    "start": "349360",
    "end": "356960"
  },
  {
    "text": "should uh that should make my phone ring um that that should uh that that should",
    "start": "356960",
    "end": "362720"
  },
  {
    "text": "give you a cluee right there it's not the solid solution people think it is uh what happens when stuff tries to get",
    "start": "362720",
    "end": "368520"
  },
  {
    "text": "executed or the CPU would just be already an exception it's up to the operating system to handle that exception uh is it evadable or otherwise",
    "start": "368520",
    "end": "375120"
  },
  {
    "text": "beable I sure hope so otherwise this uh this talk would't be very interesting uh what isn't the noq",
    "start": "375120",
    "end": "383199"
  },
  {
    "text": "technology although it's called EVP it really doesn't deal with viruses just the exploitation vector and a lot of",
    "start": "383199",
    "end": "388840"
  },
  {
    "text": "people have conf a lot of people have talked about this viruses generally don't exploit buffer overflows to uh to",
    "start": "388840",
    "end": "394680"
  },
  {
    "text": "spread worms more likely do that uh viruses generally you know are parasitic and they'll attach in other ways but uh",
    "start": "394680",
    "end": "402319"
  },
  {
    "text": "the EVP stuff really doesn't do much for viruses I guess it's just a marketing term because more people know what",
    "start": "402319",
    "end": "407360"
  },
  {
    "text": "viruses are uh this technology is designed to detect and defeat buff overflows if you're attacked does",
    "start": "407360",
    "end": "413360"
  },
  {
    "text": "something other than cold injection there's a great chance it will still work for instance one of the best ways to gain unauthorized access to machine",
    "start": "413360",
    "end": "419199"
  },
  {
    "text": "right now is via uh like a web app security hole and uh this actually does absolutely",
    "start": "419199",
    "end": "425240"
  },
  {
    "text": "nothing to mitigate that this only handles memory corruption exploits um there's a lot more attacks",
    "start": "425240",
    "end": "431319"
  },
  {
    "text": "than buffer overflows in the world and in fact there's other things like uh format string attacks that that that",
    "start": "431319",
    "end": "436400"
  },
  {
    "text": "still work quite well uh this is not a widescale Deployable solution um yeah",
    "start": "436400",
    "end": "442120"
  },
  {
    "text": "there are many problems with it thejust and time compiler on some copyrighted protection schemes will break if you if",
    "start": "442120",
    "end": "447879"
  },
  {
    "text": "you use this it's not that comprehensive uh more there's basically the biggest",
    "start": "447879",
    "end": "454080"
  },
  {
    "text": "problem with most security tools is lack of coverage and this is no different the code coverage on this is not very",
    "start": "454080",
    "end": "460479"
  },
  {
    "text": "good uh what might you confuse with NX technology one of the reasons I want to do this talk is um a lot of",
    "start": "460479",
    "end": "467759"
  },
  {
    "text": "people uh looked at the press that NX got last year and they didn't quite understand what it was they didn't quite",
    "start": "467759",
    "end": "473599"
  },
  {
    "text": "know what was going on and even uh me as as a researcher had some some troubles actually deciphering what exactly NX",
    "start": "473599",
    "end": "480840"
  },
  {
    "text": "does because NX gets rolled into other things like depth from Microsoft the data execution protection stuff so it uh",
    "start": "480840",
    "end": "487560"
  },
  {
    "text": "I thought it would be interesting to talk about what it really isn't non-executable stack it sounds very similar but these are mostly seen on R",
    "start": "487560",
    "end": "493280"
  },
  {
    "text": "ships that have their own versions of a no execute bit most frequently associated with the set no EXA user",
    "start": "493280",
    "end": "498599"
  },
  {
    "text": "stack argument found in SE system file and Lis uh it's not an API hooker a lot of people Target uh generic buffer",
    "start": "498599",
    "end": "505400"
  },
  {
    "text": "overflow Solutions as uh an API hooker basically what those do that they overwrite like a function prol with the",
    "start": "505400",
    "end": "511440"
  },
  {
    "text": "jump into a static analysis engine that would then determine if the uh if the call is malicious or not and take effect",
    "start": "511440",
    "end": "519240"
  },
  {
    "text": "on that and it's Al this also reallying a a heap or stack Canary those are stack values that are put at certain locations",
    "start": "519240",
    "end": "525720"
  },
  {
    "text": "and uh in Stacker heat and then check at periodic time to make sure they haven't changed or been",
    "start": "525720",
    "end": "532120"
  },
  {
    "text": "overwritten um if all these methods of defeating buffer technologies have flaws",
    "start": "532120",
    "end": "537240"
  },
  {
    "text": "what makes no execute technology so much better uh nothing it it has flaws just like uh all generic b flow prevention",
    "start": "537240",
    "end": "544320"
  },
  {
    "text": "systems uh surely everybody can't get it wrong what's the problem well the problem is no execut technology is just",
    "start": "544320",
    "end": "550640"
  },
  {
    "text": "like all these other Technologies ver the cuts they they uh they just are",
    "start": "550640",
    "end": "556320"
  },
  {
    "text": "trying to Band-Aid a problem when they should actually be trying to fix the the initial",
    "start": "556320",
    "end": "561680"
  },
  {
    "text": "problem um for instance if you wanted to stop this car from crossing a bridge now",
    "start": "561680",
    "end": "567279"
  },
  {
    "text": "is a bad time to stop start working on it uh and that that that's my problem with the buffer most buffer overflow",
    "start": "567279",
    "end": "573079"
  },
  {
    "text": "protection programs if by the time you start trying to stop a buffer overflow is to stop the Shell Code from executing",
    "start": "573079",
    "end": "579600"
  },
  {
    "text": "you've already lost the shell code's you know you can find different methods to execute the Shell",
    "start": "579600",
    "end": "585200"
  },
  {
    "text": "Code um pages and Page tables and pte Page",
    "start": "585200",
    "end": "591120"
  },
  {
    "text": "table entries what is a page fixed amount of virtual memory can be segmented and used for memory allocations purposes it's one of the",
    "start": "591120",
    "end": "596880"
  },
  {
    "text": "smallest uh chunks basically of memory on the uh xa6 chips uh there can be large and small pages on xa6 chips the",
    "start": "596880",
    "end": "604440"
  },
  {
    "text": "small page is 4K and the large large page is around two Megs building blocks for all system memories know it since",
    "start": "604440",
    "end": "610720"
  },
  {
    "text": "it's the smallest block that Hardware protection can be applied to it's a perfect place to implement no execute protection pages are either in a",
    "start": "610720",
    "end": "616680"
  },
  {
    "text": "committed reserved free state um virtual outlock and virtual outlock ex are functions used to do commit and reserves",
    "start": "616680",
    "end": "623279"
  },
  {
    "text": "manually uh Pages can be locked into memory and Pages can be shared between the processes",
    "start": "623279",
    "end": "629519"
  },
  {
    "text": "uh virtual memory layout for a process is stored in page tables uh these are normally only modifiable by the kernel",
    "start": "629519",
    "end": "635000"
  },
  {
    "text": "to keep a process from changing its own layout during onetime used for the transition of virtual memory into physical memory what is a page table",
    "start": "635000",
    "end": "642720"
  },
  {
    "text": "entry this would actually contains a virtual uh to physical page mapping memory each viral address has one",
    "start": "642720",
    "end": "649279"
  },
  {
    "text": "there's there's a lot more to do with pages but that's pretty much what you need to know uh for this",
    "start": "649279",
    "end": "654480"
  },
  {
    "text": "talk um so how does this relate to NX and what NX uh",
    "start": "654480",
    "end": "660279"
  },
  {
    "text": "does uh well normal normal sa6 pte are too small it's one of the reasons why",
    "start": "660279",
    "end": "665320"
  },
  {
    "text": "the hardware based NX stuff isn't available in anything but 6 uh 64bit chips uh the 32 bit chips don't have a a",
    "start": "665320",
    "end": "672079"
  },
  {
    "text": "pce table entry long enough to support the the extra bit uh that's why um you",
    "start": "672079",
    "end": "678880"
  },
  {
    "text": "can use it uh in 32-bit mode with something called uh pae which is the physical address extension which",
    "start": "678880",
    "end": "684200"
  },
  {
    "text": "basically takes the virtual memory lookups from a double layer to a triple layer lookup which uh gives them the ability to have a much larger page table",
    "start": "684200",
    "end": "691320"
  },
  {
    "text": "when the code attempts to execute a page Mark no execute the CPU raises an exception um the eror code of basically",
    "start": "691320",
    "end": "698279"
  },
  {
    "text": "how this is handled is dependent on the operating system uh what happens after the exception is raised always dependent",
    "start": "698279",
    "end": "705120"
  },
  {
    "text": "uh the CPU does not enforce no execute rule directly which uh which is kind of lame how does operating system decide",
    "start": "705120",
    "end": "712360"
  },
  {
    "text": "what what is code was data to properly the loader anybody know what the loader is it does what it's uh named it load",
    "start": "712360",
    "end": "719240"
  },
  {
    "text": "loads things into memory it's a binary loader um there's a there's a problem though is if the loader doesn't set the",
    "start": "719240",
    "end": "726279"
  },
  {
    "text": "uh the execute um permissions properly you really have no protection",
    "start": "726279",
    "end": "733199"
  },
  {
    "text": "um I have to digress for a second everybody sees the results exactly what is a loader and how do you care like it",
    "start": "733199",
    "end": "740240"
  },
  {
    "text": "impli it loads things it takes a binary and creates basically an executable process on Windows more than one image",
    "start": "740240",
    "end": "745800"
  },
  {
    "text": "type is supported in fact on Windows you can execute os2 files that's kind of interesting posic files wi6 files MS DOS",
    "start": "745800",
    "end": "752680"
  },
  {
    "text": "Comm and bat files uh the loader has a specific image run for each one of these binaries so basically when you try to",
    "start": "752680",
    "end": "758399"
  },
  {
    "text": "run an application it's going to look at uh what type of application is to load the appropriate program to take care of",
    "start": "758399",
    "end": "764160"
  },
  {
    "text": "it uh it starts a great process and before we go into that uh",
    "start": "764160",
    "end": "770480"
  },
  {
    "text": "while going through a lot of uh a lot of a lot of uh NT OS krn code in Ida I",
    "start": "770480",
    "end": "777600"
  },
  {
    "text": "found that this I could actually find this on the internet anywhere and these function prefixes were were pretty",
    "start": "777600",
    "end": "783120"
  },
  {
    "text": "useful for me so basically uh this is a list of all the all the internal functions or all the functions I found",
    "start": "783120",
    "end": "788320"
  },
  {
    "text": "basically and what uh what they mean",
    "start": "788320",
    "end": "793399"
  },
  {
    "text": "um uh the the ones that I mostly care about the mm and Mi memory management memory",
    "start": "793399",
    "end": "799079"
  },
  {
    "text": "internal um so basically this is how the flow of uh the flow of the loader it",
    "start": "799079",
    "end": "804399"
  },
  {
    "text": "call create process is called that calls create process a which in turn calls create process internal Ed which then",
    "start": "804399",
    "end": "809920"
  },
  {
    "text": "calls n open file which will open the binary and read it in then you call n create section which will actually",
    "start": "809920",
    "end": "815920"
  },
  {
    "text": "create the uh the section memory uh en create section will in turn call MM create section and it will it will call",
    "start": "815920",
    "end": "822959"
  },
  {
    "text": "a couple other functions uh Mi find section will be called then Mi insert section object will be called then Mi",
    "start": "822959",
    "end": "828040"
  },
  {
    "text": "create image file map will be called and one of the last things Mi create image file map will do is a call called Mi get",
    "start": "828040",
    "end": "834880"
  },
  {
    "text": "image uh protection and that's what actually decides what the uh the",
    "start": "834880",
    "end": "840680"
  },
  {
    "text": "permissions will be set on the uh on the new process so this means that if you're not using a stand if you're not using a",
    "start": "840680",
    "end": "846959"
  },
  {
    "text": "stander Windows lower to loow your your binary then you're not really getting the protection of",
    "start": "846959",
    "end": "852639"
  },
  {
    "text": "NX the initial permissions are not set on the page correctly NX is useless in Windows since a processor does not",
    "start": "852639",
    "end": "858639"
  },
  {
    "text": "actually enforce NX all the time executing code cannot be loaded properly uh it basically you buffer",
    "start": "858639",
    "end": "864360"
  },
  {
    "text": "overflows so um one of the examples of this I I'd love to do a a demo but the",
    "start": "864360",
    "end": "870279"
  },
  {
    "text": "machine I was using got shipped here and uh it actually died in transit uh so we",
    "start": "870279",
    "end": "876079"
  },
  {
    "text": "we can't actually do that but I have pictures Windows has a a sigin install um I installed Windows I install sigin",
    "start": "876079",
    "end": "882160"
  },
  {
    "text": "on windows with Service Pack 2 a depth with is the Microsoft data execution protection was enabled uh for all",
    "start": "882160",
    "end": "888480"
  },
  {
    "text": "programs uh was the thing to note is this is a 32-bit version of Windows XP on a uh 64-bit chip um this is kind of",
    "start": "888480",
    "end": "897240"
  },
  {
    "text": "what it looks like when you're setting it up uh this is the actual code that I ran it",
    "start": "897240",
    "end": "902560"
  },
  {
    "text": "was it was pretty much a generic example I showed you earlier um and it will it will stop it",
    "start": "902560",
    "end": "908639"
  },
  {
    "text": "the the funny thing is if you run the same code basically in sigin uh sigin",
    "start": "908639",
    "end": "913839"
  },
  {
    "text": "won't catch it um and that's because the when bash when sigin process loads the",
    "start": "913839",
    "end": "920000"
  },
  {
    "text": "program to run it does it differently than the way Windows does it so you're not getting the same index",
    "start": "920000",
    "end": "926920"
  },
  {
    "text": "protection different loader pages aren't marked corre uh correctly and there different Memory Match up being applied",
    "start": "926920",
    "end": "933480"
  },
  {
    "text": "uh no execute technology isn't extended to everything currently on Windows the default settings for Depp which is the",
    "start": "933480",
    "end": "939120"
  },
  {
    "text": "Microsoft implementation of it by default don't cover all programs just essential Windows Services uh this",
    "start": "939120",
    "end": "945959"
  },
  {
    "text": "really gives you a false sense of security a lot of people I talk to want to buy 64-bit chips just because they'll never have another buffer overflow",
    "start": "945959",
    "end": "952040"
  },
  {
    "text": "problem again and that's just not true exportation uh has to have OS support to work it can be selectively enabled",
    "start": "952040",
    "end": "959600"
  },
  {
    "text": "disabled um and if you want you can use a a process called virtual protect for Windows to check uh individual um to",
    "start": "959600",
    "end": "967240"
  },
  {
    "text": "change individual protection uh depth in depth depth is",
    "start": "967240",
    "end": "973279"
  },
  {
    "text": "more than just uh M impation of it uh it it has two two forms which is hardware",
    "start": "973279",
    "end": "978560"
  },
  {
    "text": "and software enforcement it can be uh a bit confusing as to what uh when you are",
    "start": "978560",
    "end": "983600"
  },
  {
    "text": "and are not protected many features uh that that uh have Hardware protection",
    "start": "983600",
    "end": "988720"
  },
  {
    "text": "and and say what the OS is running with you basically have to have pae you have to have a no no execute enbl chip you",
    "start": "988720",
    "end": "994079"
  },
  {
    "text": "have to set basically a correct flag into boot options there's a lot of different things you have to do before you're actually",
    "start": "994079",
    "end": "999480"
  },
  {
    "text": "protected uh Hardware en Force dep um this is this is basically we're mostly",
    "start": "999480",
    "end": "1004639"
  },
  {
    "text": "discussing it requires no execute enable on the ship a protection enforcement is done on a per virtual page uh process it",
    "start": "1004639",
    "end": "1011680"
  },
  {
    "text": "protects both 32bit and 64-bit versions of the OS if the correct chip is used 32-bit versions of the OS require pae",
    "start": "1011680",
    "end": "1018399"
  },
  {
    "text": "enabled uh protection is configurable via control panel and boot inii options uh software dep only uh attempts",
    "start": "1018399",
    "end": "1026000"
  },
  {
    "text": "to detect uh buffer overflows it attempts to take basically stupid SE tricks it uses a thing called safy uh SE",
    "start": "1026000",
    "end": "1034360"
  },
  {
    "text": "which is a destructed exception Handler stuff uh before any exceptions run uh safe uh safe SE tries to make sure that",
    "start": "1034360",
    "end": "1040438"
  },
  {
    "text": "the exception Handler is valid U make sure it does that by trying to make sure it's not in u u it says not in",
    "start": "1040439",
    "end": "1046880"
  },
  {
    "text": "executable memory but it's not actually in writable memory uh it's processor independent a lot of",
    "start": "1046880",
    "end": "1052039"
  },
  {
    "text": "popular explo use uh SE tricks to get execution however a lot",
    "start": "1052039",
    "end": "1057320"
  },
  {
    "text": "don't uh boot ini I you basically have to have these are options you can pass and boot ini I to set the different",
    "start": "1057320",
    "end": "1063480"
  },
  {
    "text": "options uh optin means that uh cover system binary is only in programs that use specifically defined opt out uh",
    "start": "1063480",
    "end": "1071240"
  },
  {
    "text": "enable for all processes except for the ones to Define always on covers everything always off turn stuff off",
    "start": "1071240",
    "end": "1077240"
  },
  {
    "text": "completely uh Microsoft maintains a list of software that uh depth breaks it breaks",
    "start": "1077240",
    "end": "1083679"
  },
  {
    "text": "Java most copyright protection tools a lot of games uh basically there's an application capaity toolkit called",
    "start": "1083679",
    "end": "1089400"
  },
  {
    "text": "disable LX that you can use to test um there's also uh problems with device drivers a",
    "start": "1089400",
    "end": "1095799"
  },
  {
    "text": "lot of device drivers will break when you use this because a lot of device drivers use a lot of uh stack to execute code and you can't do that anymore",
    "start": "1095799",
    "end": "1105158"
  },
  {
    "text": "um so uh why is NX bad uh brand new for first time ever released new OD day uh",
    "start": "1105679",
    "end": "1111760"
  },
  {
    "text": "exploitation technique this is awesome return to lip C has anyone ever",
    "start": "1111760",
    "end": "1117000"
  },
  {
    "text": "seen it no okay it's great I'm just kidding um but return to",
    "start": "1117000",
    "end": "1123559"
  },
  {
    "text": "lipy is one thing uh because right now there's not too many things that will do address address randomization of dlls on",
    "start": "1123559",
    "end": "1130159"
  },
  {
    "text": "Windows uh returning to LIC still works it's pretty old it's the best Target of return to lib C attack is virtual",
    "start": "1130159",
    "end": "1136360"
  },
  {
    "text": "protect at that point you can change the permissions on enti High block of memory than continueous normal uh chaining",
    "start": "1136360",
    "end": "1142600"
  },
  {
    "text": "return return to lipy attacks uh will work it's complex it's tedious it's prone to failure it's not very portable",
    "start": "1142600",
    "end": "1149880"
  },
  {
    "text": "uh return to lipy uh has a lot of problems I don't particularly like it and the biggest problem is it doesn't",
    "start": "1149880",
    "end": "1155400"
  },
  {
    "text": "help with Heap overflows and most of the things that I exploit these days are are Heap overflows um this is where I would do",
    "start": "1155400",
    "end": "1162480"
  },
  {
    "text": "the DMO basically you build a a fake stack frame and you do a return to Virtual protect which is going to change",
    "start": "1162480",
    "end": "1169280"
  },
  {
    "text": "all the permissions on the on the page to uh writeable and executable and then we add a",
    "start": "1169280",
    "end": "1174840"
  },
  {
    "text": "user uh what is the difference um memory protection change well basically this is the new stuff what you",
    "start": "1175320",
    "end": "1183320"
  },
  {
    "text": "can do there's a there's a couple of different problems with this for instance is anybody familiar with copy on right what a copy on right is all",
    "start": "1183320",
    "end": "1190360"
  },
  {
    "text": "right well basically DLS are shared amongst all processes until there there's a reason why it should have a",
    "start": "1190360",
    "end": "1195880"
  },
  {
    "text": "localized copy and once once uh has its own localized copy the initial setup uh",
    "start": "1195880",
    "end": "1202159"
  },
  {
    "text": "protection on it is no longer uh valid and everything's back to writable and executable uh that's that's kind of",
    "start": "1202159",
    "end": "1209360"
  },
  {
    "text": "funny that that that's one of the ways uh I was going planning on exploring a heat based overflow for",
    "start": "1209360",
    "end": "1215159"
  },
  {
    "text": "you say again yes it",
    "start": "1215159",
    "end": "1222039"
  },
  {
    "text": "should um the the other way are a lot of loader stuff uh we already talked about",
    "start": "1222039",
    "end": "1229039"
  },
  {
    "text": "uh it is a great most of this actually isn't all that great without the demos but uh the lader stuff is another great",
    "start": "1229039",
    "end": "1235799"
  },
  {
    "text": "way you can execute uh code arbitrarily without uh without much problems as long",
    "start": "1235799",
    "end": "1241320"
  },
  {
    "text": "as it's not loaded by the wiim 32 loader um writing code to find the",
    "start": "1241320",
    "end": "1247240"
  },
  {
    "text": "differences basically what what you want to do is you want to take a look at what the P what a process memory map look like beforehand and afterwards you can",
    "start": "1247240",
    "end": "1253960"
  },
  {
    "text": "use uh virtual query to do that virtual query is a uh function call it's a Windows function call Will basically",
    "start": "1253960",
    "end": "1260320"
  },
  {
    "text": "query a pro memory space uh and and return um values to it uh basically an",
    "start": "1260320",
    "end": "1267159"
  },
  {
    "text": "MBI structure which is memory basic information this is like a really quick snippet of code that I wrote basically",
    "start": "1267159",
    "end": "1272440"
  },
  {
    "text": "to find all the uh ex permissions uh all the pages in memory with executable",
    "start": "1272440",
    "end": "1279600"
  },
  {
    "text": "permissions uh the return values you're interested in are defined in when in t.h it's basically 0x it's basically goes uh",
    "start": "1279600",
    "end": "1285919"
  },
  {
    "text": "the ideal value is 0x4 z that's read WR EX there are any pages are still writable and executable can inject code to that",
    "start": "1285919",
    "end": "1292960"
  },
  {
    "text": "address and execute my example does 4K check uh up to uh basically kernel",
    "start": "1292960",
    "end": "1299880"
  },
  {
    "text": "space this is where you would uh you'd see the uh the ex the demo does anybody",
    "start": "1300720",
    "end": "1305919"
  },
  {
    "text": "have a question about that",
    "start": "1305919",
    "end": "1311200"
  },
  {
    "text": "nobody uh the demo would show actually a program that was uh uh that I wrote that",
    "start": "1311200",
    "end": "1318000"
  },
  {
    "text": "had a generic heat based overflow in it uh I i' exploit that and get a shell on",
    "start": "1318000",
    "end": "1324080"
  },
  {
    "text": "the machine uh even with NX enabled uh the problem the problem that's being",
    "start": "1324080",
    "end": "1329440"
  },
  {
    "text": "exploited in that case is the the the the dll uh I'm going to inject code into",
    "start": "1329440",
    "end": "1334760"
  },
  {
    "text": "a d space and when I do a c basically when the copy on right is done the annex",
    "start": "1334760",
    "end": "1341400"
  },
  {
    "text": "permissions are no longer preserved so I can then execute anything it",
    "start": "1341400",
    "end": "1346520"
  },
  {
    "text": "will there's an easier way to view all of the uh memory permissions uh there's a program I use called PRC view that",
    "start": "1346720",
    "end": "1352640"
  },
  {
    "text": "lets you look at all of them this is basically what it looks like as you can see most uh most of the memory space in",
    "start": "1352640",
    "end": "1359880"
  },
  {
    "text": "this process is read write only uh down at the bottom you'll see a lot of execute right",
    "start": "1359880",
    "end": "1367000"
  },
  {
    "text": "copies um code coverage heat tricks this is what I was just talking about timing and execution paths there's",
    "start": "1367960",
    "end": "1376278"
  },
  {
    "text": "uh there's more we can talk about that later this is the fake server",
    "start": "1376919",
    "end": "1383440"
  },
  {
    "text": "demo uh Linux supports um NX uh they've supported since June 2004",
    "start": "1384400",
    "end": "1392840"
  },
  {
    "text": "uh support was written by England molar you may remember him from such as as his uh 01 scheduler his wor on raid and",
    "start": "1392840",
    "end": "1399919"
  },
  {
    "text": "wacky uh Colonel stuff like colel drivers uh chronal drivers that are F FTP and HTP",
    "start": "1399919",
    "end": "1405600"
  },
  {
    "text": "servers um case of Windows links has prerequisites that you must have coverage for before the support will be",
    "start": "1405600",
    "end": "1411720"
  },
  {
    "text": "active uh they have a problem with coverage as well uh basically if stuff gets paged",
    "start": "1411720",
    "end": "1417559"
  },
  {
    "text": "out and paged back in with Cas scan BD flush you're going to have problems with the NX stuff what's need to make uh",
    "start": "1417559",
    "end": "1423480"
  },
  {
    "text": "Linux doing no executable dance you need a CPU that supports uh anx Vance pte you",
    "start": "1423480",
    "end": "1429000"
  },
  {
    "text": "also need uh to compile it with PTU gnu stack guard this allows you to to Mark",
    "start": "1429000",
    "end": "1434240"
  },
  {
    "text": "uh Stacks as nonexecutable uh basically you can use read elf to take a look can see if you uh if you're actually not uh",
    "start": "1434240",
    "end": "1442159"
  },
  {
    "text": "if you're actually protected uh if you covered you will see message in your boot up NX execute",
    "start": "1442159",
    "end": "1448440"
  },
  {
    "text": "disable protection active uh no ex support can be disabled by passing no no execute equal off via",
    "start": "1448440",
    "end": "1455440"
  },
  {
    "text": "the command line This protection is included in most popular distributions us Land versus criel Space",
    "start": "1455440",
    "end": "1461840"
  },
  {
    "text": "the NX protection provides uh user L support criminal space overflows are also protected against U many open sour",
    "start": "1461840",
    "end": "1468600"
  },
  {
    "text": "tools are not follow not known to follow standard very well in homegrown or custom build apps uh Stacks have to",
    "start": "1468600",
    "end": "1473640"
  },
  {
    "text": "manually be marked as non-executable things are dynamically generated runtime will cause serious problems once again",
    "start": "1473640",
    "end": "1479320"
  },
  {
    "text": "just like Java uh once again uh this is where I do a uh stack Bas overflow one",
    "start": "1479320",
    "end": "1486360"
  },
  {
    "text": "of the funny things about uh 64-bit chips is everything's r instead of e so it's rip Rax RBX it's kind of",
    "start": "1486360",
    "end": "1494840"
  },
  {
    "text": "funny um the pro um and you basically at this point would",
    "start": "1494840",
    "end": "1500880"
  },
  {
    "text": "run through the same thing uh you'd use a a function call to walk the entire memory map of a process and check what",
    "start": "1500880",
    "end": "1506120"
  },
  {
    "text": "is and what is not marked as uh not non-executable return to Li C attacks uh still work on Linux however Linux has a",
    "start": "1506120",
    "end": "1513000"
  },
  {
    "text": "lot of uh address randomization stuff in the libraries so depending on the distribution this is a lot less",
    "start": "1513000",
    "end": "1519679"
  },
  {
    "text": "effective uh what is actually done when the kernal catches something bad will it do a print K and then it will try to",
    "start": "1519679",
    "end": "1524919"
  },
  {
    "text": "allow or we'll try to decide if it should allow or disallow uh where do the page permissions get set same place just",
    "start": "1524919",
    "end": "1530640"
  },
  {
    "text": "like Windows in the load basically in the loader when it gets loaded uh how does this affect the heat",
    "start": "1530640",
    "end": "1537200"
  },
  {
    "text": "um basically the it's",
    "start": "1537200",
    "end": "1541600"
  },
  {
    "text": "uh heat based overflows are kind of funny uh stack based overflows require basically that once you overflow a stack",
    "start": "1542360",
    "end": "1548440"
  },
  {
    "text": "you overwrite the return address with the address of something that uh will",
    "start": "1548440",
    "end": "1553799"
  },
  {
    "text": "basically correspond to something that will give you execution example is after you do a after you do a stack Bas",
    "start": "1553799",
    "end": "1559320"
  },
  {
    "text": "overflow you want to make EIP return to something generally I guess it would have would translate to a jump ESP which",
    "start": "1559320",
    "end": "1566039"
  },
  {
    "text": "would be ff4 and op codes so once it turn once it returns to lib C and you",
    "start": "1566039",
    "end": "1571679"
  },
  {
    "text": "hit ff4 which is Jump P it will immedately jump to the stack start executing your code Heap overflows are a",
    "start": "1571679",
    "end": "1576960"
  },
  {
    "text": "little bit different Heap overflows um will give you the ability to do an arbitrary overwrite basically",
    "start": "1576960",
    "end": "1583880"
  },
  {
    "text": "anywhere of four bytes so Heap overflows uh NX won't stop a heap overflow from",
    "start": "1583880",
    "end": "1589559"
  },
  {
    "text": "happening what it tries to do is stop you from executing code with it if you if you intend to do something with a",
    "start": "1589559",
    "end": "1595039"
  },
  {
    "text": "heap overflow like overwrite the U ID of a currently running process or something like that uh NX really isn't going to",
    "start": "1595039",
    "end": "1600600"
  },
  {
    "text": "help you much um do referencing n pointers are kind of funny because it will cause an exception first and if you",
    "start": "1600600",
    "end": "1607320"
  },
  {
    "text": "have an exception race uh strange things can happen in the Linux",
    "start": "1607320",
    "end": "1612679"
  },
  {
    "text": "kernel and this is where I would do the demo of owning Linux I I I was thinking about this a lot",
    "start": "1612840",
    "end": "1620158"
  },
  {
    "text": "um things that uh criminal developers don't think about but security researchers do for instance uh races for",
    "start": "1620640",
    "end": "1628000"
  },
  {
    "text": "interrupts are one of those but once again uh I have to apologize because the",
    "start": "1628000",
    "end": "1633159"
  },
  {
    "text": "demos aren't working today but we're going to be releasing a white paper with all this information in it after the show and it will have uh more detailed",
    "start": "1633159",
    "end": "1639399"
  },
  {
    "text": "examples of all this um it's not the end it's not the",
    "start": "1639399",
    "end": "1645559"
  },
  {
    "text": "end all be all security solution U major compatibility is isues with existing code uh you got code coverage problems",
    "start": "1645559",
    "end": "1651440"
  },
  {
    "text": "uh alternate flows of data so basically andex will work if you do something a certain way and if you do something a different way it won't work it only",
    "start": "1651440",
    "end": "1658200"
  },
  {
    "text": "helps with memory corruption bugs for instance a format string bug where you want to change your uid won't help you at all with that uh Heap overflow where",
    "start": "1658200",
    "end": "1665360"
  },
  {
    "text": "you want to do a uh like a generic override of something uh like a 32 value it won't help you with that at all uh it",
    "start": "1665360",
    "end": "1672200"
  },
  {
    "text": "should not replace any current security tools but it's a nice addition problems very complex the great example I I give",
    "start": "1672200",
    "end": "1678320"
  },
  {
    "text": "to people when they try to talk about lighting generic buff for overflow Solutions is airport metal detectors and fingernail clippers why do airport metal",
    "start": "1678320",
    "end": "1685120"
  },
  {
    "text": "detectors uh trigger on fingernail clippers well of course they made of metal but they're not really that malicious so why why why do you care um",
    "start": "1685120",
    "end": "1693120"
  },
  {
    "text": "false positives are a big thing a patch on top of a Band-Aid outside of a bandage wrapped around a cast is not",
    "start": "1693120",
    "end": "1698200"
  },
  {
    "text": "really a great way to fix a problem they're they're just layering layering layering instead of uh starting from",
    "start": "1698200",
    "end": "1703360"
  },
  {
    "text": "scratch backward compatibility is a big issue uh can you blame anyone for for NX",
    "start": "1703360",
    "end": "1708519"
  },
  {
    "text": "not living up to the hype um it's less about programming errors and more about architecture",
    "start": "1708519",
    "end": "1714640"
  },
  {
    "text": "decisions uh there's not been a a major redesign of the the the processor architecture you use for 20 years and",
    "start": "1714640",
    "end": "1721000"
  },
  {
    "text": "there probably won't be for uh quite some time example shown are not the only ways to avoid the protection adopt a",
    "start": "1721000",
    "end": "1726720"
  },
  {
    "text": "layered approach and don't count on a single security solution for instance NX plus liy randomization plus API hooking",
    "start": "1726720",
    "end": "1732880"
  },
  {
    "text": "plus host Bas IPS Plus network based IPS at that point I feel pretty comfortable that somebody can't come from",
    "start": "1732880",
    "end": "1739559"
  },
  {
    "text": "easily um more research into trusted OS models you have to sandbox everything and whatever the future may bring I sure",
    "start": "1739559",
    "end": "1746200"
  },
  {
    "text": "you uh we're going to keep picking it apart not at that silver and it was uh",
    "start": "1746200",
    "end": "1752600"
  },
  {
    "text": "it was really short um because my my demos were designed to take up a a fair",
    "start": "1752600",
    "end": "1758679"
  },
  {
    "text": "amount of time what uh one of the interesting things are how actually this",
    "start": "1758679",
    "end": "1764200"
  },
  {
    "text": "stuff gets evaluated by the processor how processor internals there's been a lot of discussion at this conference",
    "start": "1764200",
    "end": "1769679"
  },
  {
    "text": "about proprietary information being released first public information and things like that one of the things that people uh really should take a look at",
    "start": "1769679",
    "end": "1776720"
  },
  {
    "text": "is how this page table enforcement is being done and how it gets uh gets randomly uh how it will get randomly",
    "start": "1776720",
    "end": "1783519"
  },
  {
    "text": "enforced for instance there's some conditions where for performance reasons you don't always want to do a check on",
    "start": "1783519",
    "end": "1789000"
  },
  {
    "text": "the page table entry for uh s permissions things will run slower and in a business where you have two major",
    "start": "1789000",
    "end": "1794200"
  },
  {
    "text": "companies competing for uh speed you know the slowest one is going to lose it doesn't matter if it's less secure it",
    "start": "1794200",
    "end": "1799440"
  },
  {
    "text": "just matters if it's slower so that's that's an interesting thing to take a look in the future are there any",
    "start": "1799440",
    "end": "1807000"
  },
  {
    "text": "questions Dan kisy how would you how would you redesign",
    "start": "1807519",
    "end": "1812559"
  },
  {
    "text": "NX well I would redesign NX uh n NX is",
    "start": "1812559",
    "end": "1817880"
  },
  {
    "text": "uh is basically a Band-Aid for a problem I would redesign the memory architecture",
    "start": "1817880",
    "end": "1823320"
  },
  {
    "text": "uh as a whole to better improve separation of segmentation data and",
    "start": "1823320",
    "end": "1828880"
  },
  {
    "text": "memory between writable memory U between executable code and data and things like that uh basically I I think you have to",
    "start": "1828880",
    "end": "1835840"
  },
  {
    "text": "go back to the drawing board on on some of this stuff which for instance like the tianium did a lot of that but nobody",
    "start": "1835840",
    "end": "1841399"
  },
  {
    "text": "really adopted it so you think itanium is fundamentally more secure",
    "start": "1841399",
    "end": "1848360"
  },
  {
    "text": "arure I uh I love Intel next question",
    "start": "1852000",
    "end": "1859760"
  },
  {
    "text": "speaking",
    "start": "1859760",
    "end": "1862240"
  },
  {
    "text": "of it's funny did anybody uh see any interesting presentations yesterday well what one of the things",
    "start": "1870240",
    "end": "1877039"
  },
  {
    "text": "that were interesting about the presentations yesterday are uh what you should talk about versus what you know",
    "start": "1877039",
    "end": "1882159"
  },
  {
    "text": "about ver for frary information and uh not that I I don't love everybody I",
    "start": "1882159",
    "end": "1888000"
  },
  {
    "text": "think that everyone would love that information but if you start dumping how you know certain chips do certain things",
    "start": "1888000",
    "end": "1893600"
  },
  {
    "text": "people might get angry about that so uh I would say that fundamentally uh from a developer",
    "start": "1893600",
    "end": "1901080"
  },
  {
    "text": "standpoint XD the Intel solution and NX the AMD solution are almost virtually",
    "start": "1901080",
    "end": "1906919"
  },
  {
    "text": "identical uh the differences get into more more micr code",
    "start": "1906919",
    "end": "1913398"
  },
  {
    "text": "issues yes sir so um",
    "start": "1914960",
    "end": "1919840"
  },
  {
    "text": "it's currently not uh basically uh in order to have Hardware enforced uh",
    "start": "1929679",
    "end": "1934960"
  },
  {
    "text": "buffer protection uh currently right now you can't do it unless I'm mistaken AMD and",
    "start": "1934960",
    "end": "1940240"
  },
  {
    "text": "Intel are both releasing chips soon that will do it on the straight 32 blit platform but you have to have pae",
    "start": "1940240",
    "end": "1946320"
  },
  {
    "text": "enabled to do that basically to make the page table entries wider so you can have more information in them uh I think",
    "start": "1946320",
    "end": "1952760"
  },
  {
    "text": "that's coming soon I I uh I'm getting a guy shaking his head who I feel uh knows",
    "start": "1952760",
    "end": "1958960"
  },
  {
    "text": "about it so yeah it will be coming soon but right now it's not available on 32-bit",
    "start": "1958960",
    "end": "1964960"
  },
  {
    "text": "chips well it's a it's a switch that you basically sits in an operating system",
    "start": "1968279",
    "end": "1973320"
  },
  {
    "text": "that will Define how the virtual memory lookups are done and right now it's done on a a two- layer approach uh PA",
    "start": "1973320",
    "end": "1980919"
  },
  {
    "text": "basically will add an extra layer of lookup so you can have more information in uh a greater page table",
    "start": "1980919",
    "end": "1988360"
  },
  {
    "text": "size yes sir yes sir",
    "start": "1996559",
    "end": "2004360"
  },
  {
    "text": "is it that I think that it's drastic simply because uh backward compatibility is the",
    "start": "2009440",
    "end": "2016000"
  },
  {
    "text": "biggest issue I mean if you look at the itanium versus the opteron I mean I think the itanium was a far superior",
    "start": "2016000",
    "end": "2021880"
  },
  {
    "text": "chip but everybody seems to love the opteron more and why is that because the backward compatibility uh ability in the",
    "start": "2021880",
    "end": "2028480"
  },
  {
    "text": "opon far outweighs the uh the performance ability in the itanium so I",
    "start": "2028480",
    "end": "2034440"
  },
  {
    "text": "would do it if if I had a magic switch today and I were like to if if I were like the CEO of Intel uh I would try I",
    "start": "2034440",
    "end": "2041000"
  },
  {
    "text": "would try desperately to uh to to to legislate some sort of change like that but in reality no one's going to adopt",
    "start": "2041000",
    "end": "2047880"
  },
  {
    "text": "it they they love PW compatibility nobody wants to hear that the 10,000 line custom apps they have all over the",
    "start": "2047880",
    "end": "2054200"
  },
  {
    "text": "place in their businesses so they have to be Rewritten so I don't think it's going to happen but I I would uh I would",
    "start": "2054200",
    "end": "2060520"
  },
  {
    "text": "Advocate fling Von Newman Mr Kaminsky again how does the",
    "start": "2060520",
    "end": "2066320"
  },
  {
    "text": "software based de work uh software based St uh works on both 32",
    "start": "2066320",
    "end": "2071480"
  },
  {
    "text": "and 64-bit uh versions of chips basically all it does is uses something called uh sa safe safe structure",
    "start": "2071480",
    "end": "2079280"
  },
  {
    "text": "exception handling to make sure that when uh when an exception happens and",
    "start": "2079280",
    "end": "2084679"
  },
  {
    "text": "code's going to get run it make sure that code is actually uh a legitimate Inception Handler and not uh for",
    "start": "2084679",
    "end": "2091079"
  },
  {
    "text": "instance an overwrite uh from a hacker by it does that by checking the the permissions on the page that uh it's in",
    "start": "2091079",
    "end": "2097720"
  },
  {
    "text": "and where actually it's located as an attack is sofware based relevant",
    "start": "2097720",
    "end": "2103839"
  },
  {
    "text": "no no uh it's only relevant if you like uh SE tricks and I don't really ever do",
    "start": "2103839",
    "end": "2110320"
  },
  {
    "text": "those so it's never really slowed me",
    "start": "2110320",
    "end": "2113680"
  },
  {
    "text": "down any other questions what about I mean I know this is a different subject do you consider d reasing a more",
    "start": "2115520",
    "end": "2122640"
  },
  {
    "text": "realistic mechanism for avoiding it's funny you mention that yes I do",
    "start": "2122640",
    "end": "2128599"
  },
  {
    "text": "uh I think the NX is uh not a great solution but I think that it uh it's a",
    "start": "2128599",
    "end": "2134079"
  },
  {
    "text": "step in the right direction I think if you were to combine it with a form of uh D rebasing at every load then the uh the",
    "start": "2134079",
    "end": "2142680"
  },
  {
    "text": "potential uh exploit vectors are mostly all gone except for the fact you can still do arbitrary override with no",
    "start": "2142680",
    "end": "2150079"
  },
  {
    "text": "problems do you think Sig should patch their loader anywh I think they already have actually I think the uh the version",
    "start": "2151560",
    "end": "2158480"
  },
  {
    "text": "that was tested on was released in October of last year",
    "start": "2158480",
    "end": "2163920"
  },
  {
    "text": "um I think that since then the the loaders become more Annex aware I",
    "start": "2163920",
    "end": "2169480"
  },
  {
    "text": "haven't had a chance to check that before the show but that uh that does seem that's one a whole us right now on our paper we don't want to say that",
    "start": "2169480",
    "end": "2175400"
  },
  {
    "text": "sigwin is not doing something and the the point of that wasn't to show that sigwin uh has a problem it was It was",
    "start": "2175400",
    "end": "2182280"
  },
  {
    "text": "supposed to demonstrate that anything other than 132 loaded that doesn't adhere to their standards has a problem",
    "start": "2182280",
    "end": "2187839"
  },
  {
    "text": "how many nonstandard loaders are there tons for instance Ida has one sof ice",
    "start": "2187839",
    "end": "2193920"
  },
  {
    "text": "has one almost every debugger in the world has one I mean nuse like if launch",
    "start": "2193920",
    "end": "2200319"
  },
  {
    "text": "something as of compress are they going to have broken loading uh well they have",
    "start": "2200319",
    "end": "2206839"
  },
  {
    "text": "broken loading to begin with uh I mean the loader is very loose about what what it will allow to execute so most by by",
    "start": "2206839",
    "end": "2216000"
  },
  {
    "text": "by the generic terms everything that pack is is broken when it's",
    "start": "2216000",
    "end": "2221078"
  },
  {
    "text": "loading any other questions Mr Ki are you sure any other",
    "start": "2222480",
    "end": "2229280"
  },
  {
    "text": "questions all right uh thank you for [Applause]",
    "start": "2229280",
    "end": "2238579"
  },
  {
    "text": "coming",
    "start": "2246520",
    "end": "2249520"
  },
  {
    "text": "e",
    "start": "2276440",
    "end": "2279440"
  },
  {
    "text": "e",
    "start": "2306440",
    "end": "2309440"
  },
  {
    "text": "e",
    "start": "2336440",
    "end": "2339440"
  },
  {
    "text": "e e",
    "start": "2366359",
    "end": "2370359"
  }
]