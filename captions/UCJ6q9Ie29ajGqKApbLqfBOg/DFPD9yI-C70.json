[
  {
    "start": "0",
    "end": "480000"
  },
  {
    "text": "before we get started if everybody could please raise your hand either hand works all right come on let's go all right so",
    "start": "210",
    "end": "7700"
  },
  {
    "text": "anyone who didn't follow the seeding instructions please lower your hand all",
    "start": "7700",
    "end": "12900"
  },
  {
    "text": "right all right still looking pretty even I would say between people who know",
    "start": "12900",
    "end": "18090"
  },
  {
    "text": "web and people who know native so that means as we go through this yeah put your hands down please we'll probably give a little bit of",
    "start": "18090",
    "end": "25260"
  },
  {
    "text": "remedial education on both sides of the house just so people who only know web aren't lost when we're talking about see",
    "start": "25260",
    "end": "30300"
  },
  {
    "text": "stuff people will only know see aren't lost when they're talking about web stuff so I apologize if any of this is review for you all right so I'm Justin",
    "start": "30300",
    "end": "38129"
  },
  {
    "text": "this is Tyler we're here to talk about web assembly so our talk today is not",
    "start": "38129",
    "end": "49469"
  },
  {
    "text": "about how to like break out of the browser and web assembly or use web",
    "start": "49469",
    "end": "54600"
  },
  {
    "text": "assembly type bugs to end up exploiting things in the browser that talk was Natalie's talk and if you're interested",
    "start": "54600",
    "end": "59760"
  },
  {
    "text": "in that you should go see it three hours ago it was a really great talk and maybe",
    "start": "59760",
    "end": "65010"
  },
  {
    "text": "you can catch the recording of it later but we're only going to talk about the application security side of that so if",
    "start": "65010",
    "end": "70380"
  },
  {
    "text": "you are a web developer who is trying to implement some new web assembly things",
    "start": "70380",
    "end": "76619"
  },
  {
    "text": "into your existing web site what kinds of security problems could you cause and you need to worry about as an attacker",
    "start": "76619",
    "end": "83100"
  },
  {
    "text": "when you're looking at a web page that includes web assembly what can we use that for from an attack perspective so",
    "start": "83100",
    "end": "89700"
  },
  {
    "text": "that's what we're looking at in this talk so in order to do that we have to talk about how web assembly works and",
    "start": "89700",
    "end": "95460"
  },
  {
    "text": "some other kind of introductory tooling stuff so you can understand later on when we go into the different exploits",
    "start": "95460",
    "end": "100920"
  },
  {
    "text": "what's actually happening under the hood so if you saw a Natalie's talk this morning that part will be review but",
    "start": "100920",
    "end": "106229"
  },
  {
    "text": "then the other stuff should be pretty fresh at the same time so in short what",
    "start": "106229",
    "end": "116490"
  },
  {
    "text": "wasum does is it allows you to take code written something else we're gonna only talk about C code here but you could do",
    "start": "116490",
    "end": "122460"
  },
  {
    "text": "anything compile it and then take that binary and run it in your browser what",
    "start": "122460",
    "end": "128190"
  },
  {
    "text": "that gives you for one you didn't have to rewrite that code in JavaScript and two it's much faster than new",
    "start": "128190",
    "end": "133760"
  },
  {
    "text": "the same thing in JavaScript so you can see here web assembly on the Left getting 30 frames per second at face recognition JavaScript on the right",
    "start": "133760",
    "end": "140810"
  },
  {
    "text": "getting 2 frames per second so much faster there's a lot of different things",
    "start": "140810",
    "end": "146299"
  },
  {
    "text": "that it's being used for right now I'm only going to highlight a couple of these right now the archive.org has this",
    "start": "146299",
    "end": "153890"
  },
  {
    "text": "really cool thing where you can go play old console games and old arcade games on their web page they do this by they",
    "start": "153890",
    "end": "161209"
  },
  {
    "text": "didn't like a rewrite and assembler or re-implement the games in JavaScript instead they used web assembly to",
    "start": "161209",
    "end": "168170"
  },
  {
    "text": "compile an existing emulator that already knew how to emulate those games throw a little bit of wrapper code around it probably more than a little",
    "start": "168170",
    "end": "174440"
  },
  {
    "text": "bit to handle the display and control some such and then they can run all these games that already had previous",
    "start": "174440",
    "end": "180409"
  },
  {
    "text": "emulators other thing here that's going to be interesting to this audience is there already been scene crypto miners",
    "start": "180409",
    "end": "187069"
  },
  {
    "text": "in the wild that have been using webassembly because it's much faster so you can mine more coins webassembly",
    "start": "187069",
    "end": "195379"
  },
  {
    "text": "isn't just about the web though there's lots of really crazy things that are kind of up and coming everything on this",
    "start": "195379",
    "end": "200419"
  },
  {
    "text": "is kind of very early stages or experimental but it's important that you",
    "start": "200419",
    "end": "205430"
  },
  {
    "text": "know that there's a lot more that's going to be happening soon so brow 6 is",
    "start": "205430",
    "end": "211180"
  },
  {
    "text": "essentially implementing all of classics in web assembly so if you had a Linux",
    "start": "211180",
    "end": "218389"
  },
  {
    "text": "program you would be able to run it in web assembly and have all the things like files and stuff work in the browser",
    "start": "218389",
    "end": "223449"
  },
  {
    "text": "jeaious Linux takes that one step further and actually emulates an entire operating system in the browser so if",
    "start": "223449",
    "end": "228949"
  },
  {
    "text": "you want to run a copy of a recent Linux or something like Windows 2000 you can run it in your browser and it runs all",
    "start": "228949",
    "end": "235760"
  },
  {
    "text": "with wasm runtime j/s going in a different direction is a microkernel so",
    "start": "235760",
    "end": "242750"
  },
  {
    "text": "the idea is instead of running a whole OS somewhere you would just run this thing and all it has in it is node and",
    "start": "242750",
    "end": "248379"
  },
  {
    "text": "wasm so then you know you can drop the whole OS and just concentrate on running stuff but that also means that it's all",
    "start": "248379",
    "end": "254269"
  },
  {
    "text": "running and ring zero right because it's all its own curl nebula is very similar",
    "start": "254269",
    "end": "259609"
  },
  {
    "text": "except without the node so we're just going to run wasm straight-up ring zero as its own kernel",
    "start": "259609",
    "end": "265080"
  },
  {
    "text": "service is very interesting so instead of trying to start a new OS they're",
    "start": "265080",
    "end": "270550"
  },
  {
    "text": "going to allow you to run web assembly things that hook into your Linux kernel so then you can directly access memory",
    "start": "270550",
    "end": "277600"
  },
  {
    "text": "and stuff in there that's very fast sounds like a great idea mmm crane lift is actually going in Reverse",
    "start": "277600",
    "end": "284110"
  },
  {
    "text": "so you can take a Wazz 'im program the compiled binary and then turn around and turn it into a real machine binary that",
    "start": "284110",
    "end": "289690"
  },
  {
    "text": "would run on like x86 or arm and lastly in probably the most useful of all of",
    "start": "289690",
    "end": "297460"
  },
  {
    "text": "these is V wasm so aetherium is a cryptocurrency that has its own language",
    "start": "297460",
    "end": "304060"
  },
  {
    "text": "and so the idea is that you can compile things with this language and then they run on the blockchain with all the stuff",
    "start": "304060",
    "end": "309310"
  },
  {
    "text": "it's pretty interesting except that solidity is terrible and the EVM is terrible so they're working on switching",
    "start": "309310",
    "end": "315820"
  },
  {
    "text": "it to running wasm instead so then you can write your your smart contracts in whatever language you want and then they",
    "start": "315820",
    "end": "322180"
  },
  {
    "text": "run in wasm on the blockchain cool stuff so any of you who have been around",
    "start": "322180",
    "end": "330210"
  },
  {
    "text": "computing since about 2001 or so may remember that we used to claim that like",
    "start": "330210",
    "end": "337120"
  },
  {
    "text": "there's these cool things called Java applets and they're sandbox and they run in the virtual machine and they run in",
    "start": "337120",
    "end": "342190"
  },
  {
    "text": "your browser you can write them one so you can run them anywhere and you can put them in other things besides",
    "start": "342190",
    "end": "347200"
  },
  {
    "text": "browsers like this is all the stuff that a Java applet claimed to do 20 years ago and now we're doing it again I really",
    "start": "347200",
    "end": "354040"
  },
  {
    "text": "wonder if there was an folks knew that they were reimplemented stuff or if they are surprised that this is actually",
    "start": "354040",
    "end": "360190"
  },
  {
    "text": "happening all right onto what web assembly actually is it really probably should have been called something else",
    "start": "360190",
    "end": "365229"
  },
  {
    "text": "like web bytecode or something there's a virtual machine so don't think about",
    "start": "365229",
    "end": "370900"
  },
  {
    "text": "like VMware more like a JVM so a special purpose machine that doesn't really",
    "start": "370900",
    "end": "377410"
  },
  {
    "text": "exist but we're gonna emulate that machine and it has a very specific set of instructions it's a very small set",
    "start": "377410",
    "end": "382870"
  },
  {
    "text": "and then there's a binary format that's the instructions for this machine are in",
    "start": "382870",
    "end": "389790"
  },
  {
    "text": "and we have compilers that can compile it can target that new virtual machine",
    "start": "389940",
    "end": "395050"
  },
  {
    "text": "so then you can have code that was written in other things and compile it to webassembly where it",
    "start": "395050",
    "end": "401110"
  },
  {
    "text": "will run way faster than javascript it's already in pretty much every browser",
    "start": "401110",
    "end": "407770"
  },
  {
    "text": "that people use on a regular basis but as we talked about earlier there's no reason we can't take wisdom and put it",
    "start": "407770",
    "end": "414430"
  },
  {
    "text": "in other things as well let's talk a little bit about the mechanics of wasm so we have instructions they live in",
    "start": "414430",
    "end": "422860"
  },
  {
    "text": "their own spot these are the machine code essentially for wasm and the",
    "start": "422860",
    "end": "429280"
  },
  {
    "text": "machine that runs wasm doesn't have any registers so instead of registers we have the stack you don't think of the C",
    "start": "429280",
    "end": "435460"
  },
  {
    "text": "stack that's totally separate and has to happen later this is the stack within web assembly and it replaces registers",
    "start": "435460",
    "end": "440890"
  },
  {
    "text": "so the idea is that every operation will push or pop its values to from the stack",
    "start": "440890",
    "end": "448590"
  },
  {
    "text": "here's a very simple example so first line it module means this is a program",
    "start": "448590",
    "end": "455320"
  },
  {
    "text": "and the next line line - we are declaring a function called add we give",
    "start": "455320",
    "end": "461590"
  },
  {
    "text": "it two parameters x and y and we're saying it's going to return a value all those are 32-bit in the line three we",
    "start": "461590",
    "end": "470710"
  },
  {
    "text": "say get local X what that does is take the value of X and push it onto the stack get local Y push it onto the stack and then I 32 ad is gonna pop two values",
    "start": "470710",
    "end": "478660"
  },
  {
    "text": "from the stack because add pop you know add takes two operands and then push back the the value of that addition onto",
    "start": "478660",
    "end": "485770"
  },
  {
    "start": "480000",
    "end": "616000"
  },
  {
    "text": "the stack and the last line here is export what that means is that this add function will now be available to",
    "start": "485770",
    "end": "492280"
  },
  {
    "text": "whatever it is that's embedding your your wasm system so in most cases your",
    "start": "492280",
    "end": "497500"
  },
  {
    "text": "browser or JavaScript and web assembly",
    "start": "497500",
    "end": "508960"
  },
  {
    "text": "doesn't have access to your computer's memory it has its own memory that gets emulated this is called linear memory",
    "start": "508960",
    "end": "515020"
  },
  {
    "text": "it's just in its it's hosting could implement this however it wants but from web assemblies point of view it's an",
    "start": "515020",
    "end": "521440"
  },
  {
    "text": "array of bytes integers whatever you want and it can put things in there and",
    "start": "521440",
    "end": "527380"
  },
  {
    "text": "take them out in random access that's all I can do with it",
    "start": "527380",
    "end": "532200"
  },
  {
    "text": "there's no way that you can see the real address that something's living in from the webassembly side you just know about",
    "start": "535030",
    "end": "541700"
  },
  {
    "text": "the the values that are there in their indexes in that array everything in",
    "start": "541700",
    "end": "548570"
  },
  {
    "text": "there is untight so the other piece of",
    "start": "548570",
    "end": "555140"
  },
  {
    "text": "the puzzle here there's a few things that maybe will become clear if you're",
    "start": "555140",
    "end": "560780"
  },
  {
    "text": "well into the sea world for starters since webassembly runs in its own space",
    "start": "560780",
    "end": "566720"
  },
  {
    "text": "so it's not like say x86 and arm where your instructions are interleaved with",
    "start": "566720",
    "end": "573230"
  },
  {
    "text": "your data in the means in the machines memory instead as a separate Bank of",
    "start": "573230",
    "end": "578240"
  },
  {
    "text": "memory for instructions and a separate Bank of memory for memory of reading data so there's no way that we can have",
    "start": "578240",
    "end": "584420"
  },
  {
    "text": "like a pointer that goes to an instruction but we write C programs like",
    "start": "584420",
    "end": "590570"
  },
  {
    "text": "that all the time and so we need a way to implement that in webassembly they didn't made this thing called a function table so all a function table is is you",
    "start": "590570",
    "end": "598820"
  },
  {
    "text": "can declare hey I'm gonna want an indirect call to a function somewhere and then that goes in the table the",
    "start": "598820",
    "end": "605780"
  },
  {
    "text": "table just has numerical indexes and then later on you can say okay I want to jump to function number decide to set",
    "start": "605780",
    "end": "612020"
  },
  {
    "text": "run time and then later it goes look set up and does that let's take a look at that in code and if you can't read this",
    "start": "612020",
    "end": "617810"
  },
  {
    "start": "616000",
    "end": "719000"
  },
  {
    "text": "in the back I'm gonna walk through it not necessarily you don't need to really",
    "start": "617810",
    "end": "623240"
  },
  {
    "text": "understand this to get to the rest of our talk but it is important so again we have a module we're going to declare a",
    "start": "623240",
    "end": "629900"
  },
  {
    "text": "type of type function with a result so what we've done here is we've said we're",
    "start": "629900",
    "end": "636290"
  },
  {
    "text": "going to have function pointers and they are going to return and answer they're not gonna have any other parameters then",
    "start": "636290",
    "end": "643130"
  },
  {
    "text": "we're going to make this table table to any function says we're gonna make a table that has size two and an element F",
    "start": "643130",
    "end": "649400"
  },
  {
    "text": "1 and F 2 on line four says we're going to add two new entries to this table",
    "start": "649400",
    "end": "655910"
  },
  {
    "text": "they're called F 1 and F 2 on line 6 we're going to declare what F 1 actually",
    "start": "655910",
    "end": "662420"
  },
  {
    "text": "is and note that it has the same signature that we talked about before it turns an end that's all it does in this",
    "start": "662420",
    "end": "667570"
  },
  {
    "text": "case we're just returning a number same with f2 here we're gonna actually call",
    "start": "667570",
    "end": "674020"
  },
  {
    "text": "something so this is a function we are taking one parameter and returning one",
    "start": "674020",
    "end": "679330"
  },
  {
    "text": "thing and in here we're gonna say get local I so get the value of the parameter pushes on the stack and then",
    "start": "679330",
    "end": "686020"
  },
  {
    "text": "call indirect some type so now calling direct is gonna pop the thing off the",
    "start": "686020",
    "end": "691600"
  },
  {
    "text": "stack that we just pushed which is the value in the parameter and then it's going to go look up in the function",
    "start": "691600",
    "end": "697630"
  },
  {
    "text": "table where which function is that and then go and actually call it so just",
    "start": "697630",
    "end": "705760"
  },
  {
    "text": "another way to show that so when you use calling direct it's gonna pull something off the stack go look up the add the",
    "start": "705760",
    "end": "712480"
  },
  {
    "text": "value in the stack of the function table the function table knows the address of the actual thing that's going to call and that's what makes the call so",
    "start": "712480",
    "end": "721810"
  },
  {
    "start": "719000",
    "end": "793000"
  },
  {
    "text": "everything we've talked about before this has just been about wazzing we haven't talked about the browser at all so we need to talk a little bit about",
    "start": "721810",
    "end": "727750"
  },
  {
    "text": "what weighs amines while it's living in the browser wasm can't talk to the dom",
    "start": "727750",
    "end": "732940"
  },
  {
    "text": "plasm can't read your memory it can't write to the screen it can't do anything on its own can't it's totally sandbox",
    "start": "732940",
    "end": "739180"
  },
  {
    "text": "off from all that stuff if you want wasm to do anything other than spin your cpu you have to declare some imports or some",
    "start": "739180",
    "end": "745630"
  },
  {
    "text": "exports you can the most obvious example this is functions so we declared export",
    "start": "745630",
    "end": "751780"
  },
  {
    "text": "for the add function and then that meant that javascript could call that add function and it would run the wasm and then return the value back to javascript",
    "start": "751780",
    "end": "757840"
  },
  {
    "text": "you can also import an export the memory",
    "start": "757840",
    "end": "763680"
  },
  {
    "text": "javascript is able to to look at the linear memory and you can also share",
    "start": "763680",
    "end": "770410"
  },
  {
    "text": "that Leonard linear memory across multiple running instances of wasm if you want to and the tables can also be",
    "start": "770410",
    "end": "775870"
  },
  {
    "text": "shared across multiple instances of Azzam if you want to this means that you can do things like kind of a",
    "start": "775870",
    "end": "782020"
  },
  {
    "text": "multi-threading thing where you've got a web worker running something and another web worker running another thing they can share memory if you need to they can",
    "start": "782020",
    "end": "788590"
  },
  {
    "text": "share libraries if you need to by by sharing a function table so on in script",
    "start": "788590",
    "end": "794530"
  },
  {
    "start": "793000",
    "end": "886000"
  },
  {
    "text": "in is I guess a tool chain or an SDK and it's point is to create waves and",
    "start": "794530",
    "end": "799930"
  },
  {
    "text": "binaries for you out of other things and we're going to talk about C and C++ it's",
    "start": "799930",
    "end": "805120"
  },
  {
    "text": "built on LLVM and clang it includes all your expected built in c libraries and",
    "start": "805120",
    "end": "812920"
  },
  {
    "text": "it also makes it really easy to integrate your wasm that you've just produced into a webpage by automatically",
    "start": "812920",
    "end": "819040"
  },
  {
    "text": "generating javascript and HTML for you that will handle the glue code that",
    "start": "819040",
    "end": "824290"
  },
  {
    "text": "helps the the two pieces communicate there's a whole bunch of other things in",
    "start": "824290",
    "end": "829900"
  },
  {
    "text": "this script and ads as well but the only things that we're going to talk about",
    "start": "829900",
    "end": "834970"
  },
  {
    "text": "here are these two things called EMA SM and in script and run script those are",
    "start": "834970",
    "end": "840100"
  },
  {
    "text": "both two different ways they're slightly different but the idea is that you can use those to run arbitrary JavaScript",
    "start": "840100",
    "end": "846190"
  },
  {
    "text": "from inside wasm that's going to be really important later for some of the tricks we're going to do if you want to",
    "start": "846190",
    "end": "851950"
  },
  {
    "text": "know more about in scripting Azzam since Natalie's talk is over and you can't go see that anymore you can go read the",
    "start": "851950",
    "end": "858130"
  },
  {
    "text": "spec you could also this PDF here is does a really good job of like if you're",
    "start": "858130",
    "end": "864670"
  },
  {
    "text": "a reverser and you want to know like the nuts and bolts of how the binary format works it does a great job of running through what a webassembly binary looks",
    "start": "864670",
    "end": "871480"
  },
  {
    "text": "like and how it all works I wish I had that PDF before we started doing this research so we're gonna talk",
    "start": "871480",
    "end": "879400"
  },
  {
    "text": "about old exploits and I have a lot of choice vintage well-tested memes to go along with these slides so we think that",
    "start": "879400",
    "end": "888970"
  },
  {
    "start": "886000",
    "end": "1068000"
  },
  {
    "text": "a format string attack will work just fine for the web people who don't know see I have to cover what a formatting attack is so there are a family of",
    "start": "888970",
    "end": "898030"
  },
  {
    "text": "functions in C that take a format specifier where you can say okay I'm gonna have some values of some variables",
    "start": "898030",
    "end": "904390"
  },
  {
    "text": "that go into the string and then the values get filled in at runtime the way that it works if the user can control",
    "start": "904390",
    "end": "911200"
  },
  {
    "text": "this format specifier then the user could add in extra lookups for variables",
    "start": "911200",
    "end": "916810"
  },
  {
    "text": "that didn't actually exist and because C loves to let you shoot yourself in the foot it just starts popping new things",
    "start": "916810",
    "end": "922300"
  },
  {
    "text": "off the stack and putting them in the string there's also a way to write things to things because they added this percent and that lets you write so",
    "start": "922300",
    "end": "928870"
  },
  {
    "text": "essentially what it means is if there's a user that can put in that can taint the value of the",
    "start": "928870",
    "end": "935440"
  },
  {
    "text": "format screen specifier then they can arbitrarily read an arbitrarily right for the most part go back one we don't",
    "start": "935440",
    "end": "946490"
  },
  {
    "text": "have a POC for this yet so you can tell me to get out later but we think that this will work integer overflows",
    "start": "946490",
    "end": "956680"
  },
  {
    "text": "overflows are present in a lot of languages but for people who haven't heard of them if you have an integer it",
    "start": "956680",
    "end": "961970"
  },
  {
    "text": "has a maximum value in any any programming language so if you do an",
    "start": "961970",
    "end": "967610"
  },
  {
    "text": "operation that would cause the value stored in that integer to be higher than what the maximum value was supposed to",
    "start": "967610",
    "end": "973610"
  },
  {
    "text": "be then it rolls around to the back again so if it's a signed type then you you end up the negative numbers if it's",
    "start": "973610",
    "end": "980030"
  },
  {
    "text": "unsigned and you end up in a low value this is important for one because you",
    "start": "980030",
    "end": "986720"
  },
  {
    "text": "might be if this was a value that was like your bank account you can flip it over or you know withdraw something that",
    "start": "986720",
    "end": "991820"
  },
  {
    "text": "you shouldn't been able to do things like that but also it's a gateway sometimes to buffer overflow exploits because you can change the expected",
    "start": "991820",
    "end": "998330"
  },
  {
    "text": "value of how long an array was supposed to be before it gets created things like that so just in this deplane sea world",
    "start": "998330",
    "end": "1005230"
  },
  {
    "text": "wasm isn't doing anything to defend you against these so if you just have a straight-up c integer overflow it's still going to",
    "start": "1005230",
    "end": "1011770"
  },
  {
    "text": "work fine the interesting part here is that now we're throwing in wasm and javascript into the mix and they all",
    "start": "1011770",
    "end": "1018280"
  },
  {
    "text": "have their own integer types with their own maximum values and everyone's different so I'm not going to list off",
    "start": "1018280",
    "end": "1023350"
  },
  {
    "text": "all the different types and see there's a ton while some have in 32 and 64 float 32 and vote 64 javascript has two the 53",
    "start": "1023350",
    "end": "1032890"
  },
  {
    "text": "minus one so what that means is if we're sending a value from JavaScript to wasm",
    "start": "1032890",
    "end": "1039370"
  },
  {
    "text": "the Weizmann value was declared as a 32-bit value but the JavaScript that we send is say two to the forty then what",
    "start": "1039370",
    "end": "1048220"
  },
  {
    "text": "we've just sent in already overflowed before we even started the C and so then you know there's going to be a problem",
    "start": "1048220",
    "end": "1053620"
  },
  {
    "text": "there we had a demo of this but it was boring so we didn't put it in you could also overflow in the other",
    "start": "1053620",
    "end": "1058750"
  },
  {
    "text": "direction so if the the wasum was too big for what we returned back to Java",
    "start": "1058750",
    "end": "1065190"
  },
  {
    "text": "then you could have the same problem once it gets back to the JavaScript but for overflows so again for people who",
    "start": "1065190",
    "end": "1073580"
  },
  {
    "start": "1068000",
    "end": "1265000"
  },
  {
    "text": "are web people a buffer overflow happens because C doesn't check the bounds of",
    "start": "1073580",
    "end": "1079320"
  },
  {
    "text": "memory when you have an array and so if you tell it to write more things than there is space in the array it just",
    "start": "1079320",
    "end": "1084390"
  },
  {
    "text": "keeps writing through into other things in memory this still happens perfectly fine in wisdom you're not writing in",
    "start": "1084390",
    "end": "1089970"
  },
  {
    "text": "kind of regular memory you're overriding things in that linear memory so whatever was in there we can continue to overwrite the kind of simple case for",
    "start": "1089970",
    "end": "1100170"
  },
  {
    "text": "this is if there's a value of memory that you wanted to change because it means something important in the context of the application so there's something",
    "start": "1100170",
    "end": "1106290"
  },
  {
    "text": "like a privilege level your account balance or whatever if we can find a way to overflow into those then we can change those values which is useful the",
    "start": "1106290",
    "end": "1113160"
  },
  {
    "text": "other thing that these normally are used for in C is to run arbitrary code now",
    "start": "1113160",
    "end": "1119160"
  },
  {
    "text": "running arbitrary code and lazarum is much harder because we don't have these function pointers and return pointers",
    "start": "1119160",
    "end": "1125220"
  },
  {
    "text": "and all these other things that we can try to override and then put our code furthermore we can only do this in linear memory which is never executable",
    "start": "1125220",
    "end": "1131190"
  },
  {
    "text": "so we can't like write some executable code and then jump to it so we need some",
    "start": "1131190",
    "end": "1136380"
  },
  {
    "text": "other things to do we'll talk about that later if you try to go past the bounds of linear memory like in to something",
    "start": "1136380",
    "end": "1142230"
  },
  {
    "text": "else that the browser would have it's supposed to give an error I think Natalie's talk talked about a",
    "start": "1142230",
    "end": "1147630"
  },
  {
    "text": "few cases where that wasn't actually the case in a browser implementation but from a generalized perspective it's",
    "start": "1147630",
    "end": "1153180"
  },
  {
    "text": "supposed to work fine with all that being said there are still some",
    "start": "1153180",
    "end": "1158880"
  },
  {
    "text": "interesting things we can do with buffer overflows that get us some interesting kinds of code execution we'll talk about that in a minute okay I have a pretty",
    "start": "1158880",
    "end": "1168390"
  },
  {
    "text": "simple demo here which is an end of the most basic type of buffer overflow so",
    "start": "1168390",
    "end": "1174270"
  },
  {
    "text": "here on line 6 we're using this a.m. underscore J s which we talked about earlier and this is allowing us to",
    "start": "1174270",
    "end": "1179940"
  },
  {
    "text": "actually define JavaScript inside of our native code so here you can see that",
    "start": "1179940",
    "end": "1185370"
  },
  {
    "text": "we're we're creating a function called overflow alert and we're saying that it's void it takes no parameters and",
    "start": "1185370",
    "end": "1190980"
  },
  {
    "text": "that it just creates an alert box that says overflow and then here in our main function we've got two buffers one is",
    "start": "1190980",
    "end": "1197730"
  },
  {
    "text": "ABC one is once three and then here we've got a string copy when we're putting way too many bees into this bought one and then if",
    "start": "1197730",
    "end": "1206960"
  },
  {
    "text": "then we're going to check the value of both zero so if both zero is ABC then",
    "start": "1206960",
    "end": "1214220"
  },
  {
    "text": "this string compare is going to return zero and nothing is going to happen if there is an overflow and it's not ABC",
    "start": "1214220",
    "end": "1220910"
  },
  {
    "text": "anymore then the string a pair is going to return some value and if it does then we're gonna get this overflow alert box",
    "start": "1220910",
    "end": "1226550"
  },
  {
    "text": "so if we see the overflow alert box that notifies us that there was an overflow so I can go into my virtual machine and",
    "start": "1226550",
    "end": "1236950"
  },
  {
    "text": "our gonna use em script ins e/m run which allows us to just sort of like it's kind of for like testing code you",
    "start": "1236950",
    "end": "1244310"
  },
  {
    "text": "can it's a basic web server kind of a thing and we can just run our boss zero dot HTML file which we compiled with um",
    "start": "1244310",
    "end": "1250880"
  },
  {
    "text": "script in and see if we get our alert box and we got it overflow",
    "start": "1250880",
    "end": "1260860"
  },
  {
    "start": "1265000",
    "end": "1334000"
  },
  {
    "text": "all right so there are way too many different types of bugs and see for us",
    "start": "1265639",
    "end": "1270720"
  },
  {
    "text": "to cover all of them we'll just briefly cover the rest of the existing sea bugs and kind of give us give you our take on",
    "start": "1270720",
    "end": "1276899"
  },
  {
    "text": "whether we think they're gonna be useful or not from an attackers perspective so talk to race conditions that stuff",
    "start": "1276899",
    "end": "1282750"
  },
  {
    "text": "should all be just as before with the caveat that threading is not very mature",
    "start": "1282750",
    "end": "1288059"
  },
  {
    "text": "in wasum yet same story with timing inside channels we think that heat based",
    "start": "1288059",
    "end": "1294090"
  },
  {
    "text": "arbitrary writes will also work in the context of linear memory we don't have a PSC for that either things that won't",
    "start": "1294090",
    "end": "1300450"
  },
  {
    "text": "work are your classic buffer overflow where you jump back to the code you put in things like rock won't work because",
    "start": "1300450",
    "end": "1306120"
  },
  {
    "text": "we can't arbitrarily jump to places in memory and as it's supposed to work you",
    "start": "1306120",
    "end": "1311820"
  },
  {
    "text": "shouldn't be getting any information from the browser for example when you declare your memory it's supposed to be",
    "start": "1311820",
    "end": "1317850"
  },
  {
    "text": "all zeroed out when it gets to Assam so you can't expect to you know lead on initialize memory and get something interesting there onto the new exploits",
    "start": "1317850",
    "end": "1326460"
  },
  {
    "text": "and Tyler assures me that all the memes we have here are really fresh and everyone in the 15 to 25 demographic",
    "start": "1326460",
    "end": "1331679"
  },
  {
    "text": "will get it off to XSS so let's talk",
    "start": "1331679",
    "end": "1341909"
  },
  {
    "start": "1334000",
    "end": "1646000"
  },
  {
    "text": "about XSS for a minute since we gave the all the web people that remedial see stuff we have to do the other way to XSS",
    "start": "1341909",
    "end": "1347730"
  },
  {
    "text": "means that we're running arbitrary JavaScript in the content in the context of a webpage now if you're not that",
    "start": "1347730",
    "end": "1354299"
  },
  {
    "text": "familiar with web stuff you might think oh big deal I made a pop-up or old big deal I can steal a session token' those",
    "start": "1354299",
    "end": "1360240"
  },
  {
    "text": "things are things you can do but what XSS really means you can do is you can control everything that that user could",
    "start": "1360240",
    "end": "1366000"
  },
  {
    "text": "have done and a lot of things that maybe they didn't even know they could do in the context of that website where you",
    "start": "1366000",
    "end": "1371039"
  },
  {
    "text": "got XSS so if it's a bank and I get XSS I could use all the functions to transfer money out if it's a social",
    "start": "1371039",
    "end": "1379740"
  },
  {
    "text": "media account and I get XSS I could post social media stuff on your behalf I could change your password etc etc so",
    "start": "1379740",
    "end": "1385139"
  },
  {
    "text": "XSS is a real thing and in the webassembly world that's actually even more important because the javascript",
    "start": "1385139",
    "end": "1393570"
  },
  {
    "text": "has the ability to read the linear memory that it's allocated",
    "start": "1393570",
    "end": "1398790"
  },
  {
    "text": "it has the ability to start and stop as Amit has the ability to modify wasm code I don't think you can modify it when",
    "start": "1398790",
    "end": "1405180"
  },
  {
    "text": "it's running but you could stop it and then restart it with your new modified version so you should never consider",
    "start": "1405180",
    "end": "1411270"
  },
  {
    "text": "that code that's running in wasum is somehow protected from the browser if someone has XSS they'll be able to do",
    "start": "1411270",
    "end": "1417330"
  },
  {
    "text": "anything they want to the one that's running in addition to anything they want to the rest of that site No let's",
    "start": "1417330",
    "end": "1423630"
  },
  {
    "text": "go back so now that we know what XSS is let's come back to what it means to do buffer overflow here so if there is an",
    "start": "1423630",
    "end": "1431370"
  },
  {
    "text": "array that is written to the Dom and we",
    "start": "1431370",
    "end": "1437100"
  },
  {
    "text": "have an overflow somewhere and we can overflow the value that would have been written to the Dom then we have xs/s",
    "start": "1437100",
    "end": "1443420"
  },
  {
    "text": "pretty much all there is to it we used to be our first demo of this stopped",
    "start": "1443420",
    "end": "1448710"
  },
  {
    "text": "working like halfway through our research and we were really worried but it was because we were overflowing a literal which normally is really hard to",
    "start": "1448710",
    "end": "1455040"
  },
  {
    "text": "do and they moved we're literals go in an updated version of the script and I",
    "start": "1455040",
    "end": "1460590"
  },
  {
    "text": "think to go below us in the stack and so we couldn't overflow it because we can over only overflow up other interesting",
    "start": "1460590",
    "end": "1469560"
  },
  {
    "text": "thing here is that your typical way to find XSS is to look for reflection so I",
    "start": "1469560",
    "end": "1474750"
  },
  {
    "text": "put in an input in some webpage and then I look to see if that gets reflected that same input that I put in comes out",
    "start": "1474750",
    "end": "1481140"
  },
  {
    "text": "somewhere else and then I can try to see if I can manipulate that to run JavaScript we can do XSS without any",
    "start": "1481140",
    "end": "1487230"
  },
  {
    "text": "reflection here because we're actually putting in a value somewhere over here using it to overflow something that",
    "start": "1487230",
    "end": "1492510"
  },
  {
    "text": "shouldn't have been over shouldn't have been writable by the user and then that's what actually causes the XSS okay",
    "start": "1492510",
    "end": "1500550"
  },
  {
    "text": "so I have another another example here for how we can use this buffer overflow the XSS concepts so for this for this",
    "start": "1500550",
    "end": "1509910"
  },
  {
    "text": "example we have this ba function which the extern keyword is going to let us",
    "start": "1509910",
    "end": "1515490"
  },
  {
    "text": "call it from JavaScript and this function is going to take two parameters it's gonna take p1 and p2 both of which",
    "start": "1515490",
    "end": "1521130"
  },
  {
    "text": "are just character pointers your character is and we've got two character arrays both 1 and both 2 both of which",
    "start": "1521130",
    "end": "1527310"
  },
  {
    "text": "are 16 bytes long and then we've got to unsafe string copies from p1 at the path",
    "start": "1527310",
    "end": "1532320"
  },
  {
    "text": "1 ptoo in the bath - and then here we're using this EMAS em again where basically",
    "start": "1532320",
    "end": "1537509"
  },
  {
    "text": "we're just getting this element by ID we're getting an element called SS X and we're setting the innerhtml to this pointer stringify function the",
    "start": "1537509",
    "end": "1545369"
  },
  {
    "text": "pointer stringify is going to take like an index into linear memory and it's",
    "start": "1545369",
    "end": "1552059"
  },
  {
    "text": "basically going to turn that into a string and it takes these two parameters 0 1 1 which are defined here which is",
    "start": "1552059",
    "end": "1557580"
  },
  {
    "text": "both 1 and the length of both 1 so essentially what we're doing is we're taking p1 copying it to both 1 and then",
    "start": "1557580",
    "end": "1564149"
  },
  {
    "text": "we're taking pop one and we're printing that directly to the dom and here in my",
    "start": "1564149",
    "end": "1570090"
  },
  {
    "text": "example page yeah so here's what the the",
    "start": "1570090",
    "end": "1576119"
  },
  {
    "text": "code is gonna look like from the JavaScript side of things and the reason why this can be especially dangerous",
    "start": "1576119",
    "end": "1581460"
  },
  {
    "text": "this you are calling our Bob function and here we've got a static string which we're passing in as p1 and some",
    "start": "1581460",
    "end": "1587580"
  },
  {
    "text": "user-defined string as p2 and a developer is thinking to themselves I'm putting a static string in here it's",
    "start": "1587580",
    "end": "1592919"
  },
  {
    "text": "totally safe I don't have to do any kind of encoding I don't have to do any kind of sanitization I wrote that string I",
    "start": "1592919",
    "end": "1598200"
  },
  {
    "text": "know what it's going to be but because there's an overflow in the code we can take this string with user input so we",
    "start": "1598200",
    "end": "1604799"
  },
  {
    "text": "can see here when we smash our like button we see our static string is written to the Dom we can put in a",
    "start": "1604799",
    "end": "1610200"
  },
  {
    "text": "couple of days and nothing happens we can put in the cup of Morris and we can see that now we're actually starting to",
    "start": "1610200",
    "end": "1616590"
  },
  {
    "text": "write user input over to the Dom and now we can go to the end of our thing and we can try to make some kind of a XSS",
    "start": "1616590",
    "end": "1623369"
  },
  {
    "text": "payload see if I can do this right without messing up",
    "start": "1623369",
    "end": "1628340"
  },
  {
    "text": "and we got Xbox all right so that's kind",
    "start": "1638110",
    "end": "1650710"
  },
  {
    "text": "of basic still cool but not that technically interesting we know we can overflow values the reason we went over",
    "start": "1650710",
    "end": "1657610"
  },
  {
    "text": "a bunch of details about how function pointers work is because we can do some",
    "start": "1657610",
    "end": "1663880"
  },
  {
    "text": "interesting things there too so we know that function pointers in Wazza mark really pointers they're integers to this",
    "start": "1663880",
    "end": "1670929"
  },
  {
    "text": "table that does the lookup and we know that when we use the calling direct",
    "start": "1670929",
    "end": "1677440"
  },
  {
    "text": "stuff to execute a function pointer the that's going to pull it a variable get",
    "start": "1677440",
    "end": "1684940"
  },
  {
    "text": "the value go look up from the table what to call and then call it now we've just shown you that we can modify what's in a",
    "start": "1684940",
    "end": "1692200"
  },
  {
    "text": "variable view and overflow so you should be able to guess what comes next in",
    "start": "1692200",
    "end": "1699730"
  },
  {
    "text": "scripting when it adds things that you're using it puts them in the function table so if you used in script",
    "start": "1699730",
    "end": "1706179"
  },
  {
    "text": "and run script in your program for some benign purpose it's going to be in that table so we can call it dynamically as",
    "start": "1706179",
    "end": "1712600"
  },
  {
    "text": "well it has a signature it returns nothing and it takes that's supposed to",
    "start": "1712600",
    "end": "1720130"
  },
  {
    "text": "be Const car but keep in mind that this is wasum and wasum only has four types",
    "start": "1720130",
    "end": "1726429"
  },
  {
    "text": "so really that's integer so and then when it takes whatever string is pointed",
    "start": "1726429",
    "end": "1733090"
  },
  {
    "text": "to by that and executes it so if we can find a way to pass whatever we want to this function then we win we",
    "start": "1733090",
    "end": "1739330"
  },
  {
    "text": "get XSS again in order for this to work there's a few things that have to hold",
    "start": "1739330",
    "end": "1745679"
  },
  {
    "text": "so it has to be used in script and run script has to be already in the program that we're wanting to to attack that",
    "start": "1745679",
    "end": "1753309"
  },
  {
    "text": "means it's in the function table there has to be a function pointer somewhere else in the program that has the same",
    "start": "1753309",
    "end": "1759279"
  },
  {
    "text": "signature as on script and run script so returns nothing takes one in parameter and we have to be able to somehow",
    "start": "1759279",
    "end": "1767559"
  },
  {
    "text": "overwrite that function pointer we're gonna show you about for overflow any other trick you've got that can arbitrary arbitrarily rewrite",
    "start": "1767559",
    "end": "1774220"
  },
  {
    "text": "some value will work okay so here we",
    "start": "1774220",
    "end": "1779410"
  },
  {
    "text": "have another example of yeah it's a good meme right we have another example for",
    "start": "1779410",
    "end": "1785980"
  },
  {
    "text": "our overflow this look okay yeah this looks pretty good okay so the the",
    "start": "1785980",
    "end": "1791580"
  },
  {
    "text": "scenario here is we've got some kind of a file processor which is going to take",
    "start": "1791580",
    "end": "1796780"
  },
  {
    "text": "a file and it's going to run some kind of a processing algorithm on it so we have this file processor struct and the",
    "start": "1796780",
    "end": "1803500"
  },
  {
    "text": "struct is going to have a character array of 64 bytes and that's gonna represent the file that we're uploading",
    "start": "1803500",
    "end": "1808960"
  },
  {
    "text": "it's got a file length and then it's got a function pointer for the processing algorithm because you know say there's a",
    "start": "1808960",
    "end": "1814539"
  },
  {
    "text": "couple of different processing algorithms that we might want to try to run and so this is going to let you dynamically choose between which",
    "start": "1814539",
    "end": "1819970"
  },
  {
    "text": "processing algorithm you want here we have our trigger function which is just going to call the processing algorithm",
    "start": "1819970",
    "end": "1826179"
  },
  {
    "text": "and it's going to pass the file to it so it's just gonna call that function pointer and here we have our machine",
    "start": "1826179",
    "end": "1831669"
  },
  {
    "text": "learning blockchain processing algorithm the next iteration is going to be IOT it's a pretty cool start if you guys",
    "start": "1831669",
    "end": "1837130"
  },
  {
    "text": "should check it out yeah and so here in our in our function that we're exporting",
    "start": "1837130",
    "end": "1842620"
  },
  {
    "text": "the overflow we're declaring a file processor we're setting the algorithm to",
    "start": "1842620",
    "end": "1848830"
  },
  {
    "text": "our machine learning blockchain algorithm and then here we're doing a mem copy from the payload which is just",
    "start": "1848830",
    "end": "1855400"
  },
  {
    "text": "the parameter to this function into the file and then as you can see we're mem copying 88 bytes",
    "start": "1855400",
    "end": "1861460"
  },
  {
    "text": "whereas the file is only 64 bytes so this is a pretty classic buffer overflow and then here this is important we have",
    "start": "1861460",
    "end": "1867220"
  },
  {
    "text": "in script and run scripts which is in this case it's just saying that oh there's some kind of a log which is",
    "start": "1867220",
    "end": "1873130"
  },
  {
    "text": "saying congratulations you uploaded the file correctly but this has to be in here because this is putting it in the",
    "start": "1873130",
    "end": "1879159"
  },
  {
    "text": "function table and then finally we're just going to call our trigger on the function pointer so we have a payload",
    "start": "1879159",
    "end": "1887289"
  },
  {
    "text": "which we're going to this is the file that we're going to upload so we're going to have alert XSS and then we're",
    "start": "1887289",
    "end": "1894280"
  },
  {
    "text": "gonna be filling in some some spaces just to fill out the rest of the 64 bytes and then here we're filling out",
    "start": "1894280",
    "end": "1899710"
  },
  {
    "text": "the rest of the struct we're filling out four which is going to be the file length we're filling out this is the integer",
    "start": "1899710",
    "end": "1905050"
  },
  {
    "text": "five now as Justin may have mentioned earlier the file the the indexes in the",
    "start": "1905050",
    "end": "1912760"
  },
  {
    "text": "function table are constants not just across execution all right but across compliation so I've compiled this on",
    "start": "1912760",
    "end": "1920500"
  },
  {
    "text": "three different machines and every time the index of em script and run script is index five so five is the index of M",
    "start": "1920500",
    "end": "1926830"
  },
  {
    "text": "script and run scripts and so hopefully the our function pointer over right instead of calling the machine learning",
    "start": "1926830",
    "end": "1932650"
  },
  {
    "text": "algorithm that we wanted it's going to call it scooped and run script and it's going to pass a load to it so here we",
    "start": "1932650",
    "end": "1938950"
  },
  {
    "text": "have another example where we can choose our file and that one cross your fingers",
    "start": "1938950",
    "end": "1947440"
  },
  {
    "text": "for the demo gods and we got excess blocks so more details about this",
    "start": "1947440",
    "end": "1962730"
  },
  {
    "text": "there's no reason we have to go for the xs/s here we could instead have used this to call some other function that",
    "start": "1962730",
    "end": "1968950"
  },
  {
    "text": "was important with values that we wanted so if there was a function to change my password or something like that we could",
    "start": "1968950",
    "end": "1975100"
  },
  {
    "text": "call that and then give it the values we wanted to then do what we wanted it to do we can do this to anything that is in",
    "start": "1975100",
    "end": "1984790"
  },
  {
    "text": "the function table and is you know has the right signature that is something we",
    "start": "1984790",
    "end": "1991180"
  },
  {
    "text": "can overflow to so jonathan foot if you're in here raise your hand",
    "start": "1991180",
    "end": "1997170"
  },
  {
    "text": "no okay so he made a blog post he works for fastly that talks about some very",
    "start": "1997170",
    "end": "2002940"
  },
  {
    "text": "similar techniques he was doing instead of using buffer overflows to make his overrides he was doing it via like type",
    "start": "2002940",
    "end": "2009030"
  },
  {
    "text": "confusion or deserialization type bugs but it's the same endpoint so he's using",
    "start": "2009030",
    "end": "2014610"
  },
  {
    "text": "those kinds of tricks to end up with a function pointer that calls something he",
    "start": "2014610",
    "end": "2020040"
  },
  {
    "text": "wanted to call instead of what the program was originally gonna call looked like he was doing it about the same time as we were so I know that all you see",
    "start": "2020040",
    "end": "2028800"
  },
  {
    "text": "people don't care about XSS even though I tried to explain how important it is so we had to give you some RC here right",
    "start": "2028800",
    "end": "2034890"
  },
  {
    "text": "so if the server is running node and you do the exact same thing we just showed you",
    "start": "2034890",
    "end": "2041470"
  },
  {
    "text": "then what is XSS mean and node it means RCE so we should be able to run whatever we",
    "start": "2041470",
    "end": "2049158"
  },
  {
    "text": "want on the server if we have the same policy in place alright last example",
    "start": "2049159",
    "end": "2056618"
  },
  {
    "text": "it's the exact same file processing that we have before only now this the the",
    "start": "2056619",
    "end": "2063138"
  },
  {
    "text": "payload is slightly different instead of an XSS payload now requiring we're requiring a child process and we're",
    "start": "2063139",
    "end": "2068388"
  },
  {
    "text": "going to be executing some application of our choice and the rest of it is identical so we're gonna go over to my",
    "start": "2068389",
    "end": "2074750"
  },
  {
    "text": "virtual machine here see you got this",
    "start": "2074750",
    "end": "2080179"
  },
  {
    "text": "one this one and we're gonna just run our",
    "start": "2080179",
    "end": "2086240"
  },
  {
    "text": "node server go back over here hopefully this is still the same IP address",
    "start": "2086240",
    "end": "2094690"
  },
  {
    "text": "nope let me try and come in together there we go okay so here's a file upload",
    "start": "2096579",
    "end": "2103430"
  },
  {
    "text": "so we're gonna choose a file but now we're we're not just running this locally in the browser we're loading",
    "start": "2103430",
    "end": "2108740"
  },
  {
    "text": "this to node and nodes going to run it upload a file and demo gods we're not",
    "start": "2108740",
    "end": "2118220"
  },
  {
    "text": "kind to us gonna try this one more time if this is work I have a recording of it working this one",
    "start": "2118220",
    "end": "2133839"
  },
  {
    "text": "yeah all right so now you guys have seen",
    "start": "2135100",
    "end": "2146920"
  },
  {
    "start": "2144000",
    "end": "2276000"
  },
  {
    "text": "some cool bugs let's talk about what we can do about it so one thing we can think about is are there things that in",
    "start": "2146920",
    "end": "2153310"
  },
  {
    "text": "script and could add to make everything more safe so there are things that are",
    "start": "2153310",
    "end": "2158500"
  },
  {
    "text": "kind of out of their scope so for example it's not doesn't really make sense for them to look at things like NX",
    "start": "2158500",
    "end": "2163570"
  },
  {
    "text": "and stack Canaries and things like that even though those are valid see mitigations they don't really apply in the Western world because the code and",
    "start": "2163570",
    "end": "2170560"
  },
  {
    "text": "the data are already not interleaved some protections they could add something like address space",
    "start": "2170560",
    "end": "2177340"
  },
  {
    "text": "randomization so when we put things in the function table the order that they",
    "start": "2177340",
    "end": "2185200"
  },
  {
    "text": "are in there is determined at compile time which is bad from its curve perspective because it means that your exploit will always work except when it",
    "start": "2185200",
    "end": "2192070"
  },
  {
    "text": "doesn't like but it should always work so there is no reason they couldn't make",
    "start": "2192070",
    "end": "2197110"
  },
  {
    "text": "it so those values there was a much larger set of values to choose from and they are randomly determined at runtime then you wouldn't be as easily able to",
    "start": "2197110",
    "end": "2204880"
  },
  {
    "text": "mess with function pointers in the way that we're showing it would be nice to also have some library hardening I don't",
    "start": "2204880",
    "end": "2211000"
  },
  {
    "text": "know that anyone uses percent and in format strings anymore it looked like the heap implementation that's being",
    "start": "2211000",
    "end": "2216790"
  },
  {
    "text": "used is kind of an older heap that doesn't have a lot of keep mitigations",
    "start": "2216790",
    "end": "2223480"
  },
  {
    "text": "in place so there's some improvements that could be made in inscripted things that work really well",
    "start": "2223480",
    "end": "2228990"
  },
  {
    "text": "control flow integrity so if you're not familiar with control flow integrity there's a switch you can I think it's",
    "start": "2228990",
    "end": "2234700"
  },
  {
    "text": "clang or LLVM not sure where it happens but you can turn it on in there at compile time and what's going to happen",
    "start": "2234700",
    "end": "2240250"
  },
  {
    "text": "is it kind of generates a mapping of all of the possible flow States between different functions in the program so",
    "start": "2240250",
    "end": "2247360"
  },
  {
    "text": "these are all the things that could ever happen and then if at runtime you are",
    "start": "2247360",
    "end": "2253660"
  },
  {
    "text": "off the map it just crashes so if you turn that on our function pointer tricks won't work anymore",
    "start": "2253660",
    "end": "2261070"
  },
  {
    "text": "[Music] the other thing that's effective here already is the way that wasm works to",
    "start": "2261070",
    "end": "2268240"
  },
  {
    "text": "not allow us to jump into arbitrary things it means that there's no way to do something like Rob the best we can do is",
    "start": "2268240",
    "end": "2273460"
  },
  {
    "text": "call individual functions one at a time so we spent a lot of time researching",
    "start": "2273460",
    "end": "2278470"
  },
  {
    "start": "2276000",
    "end": "2311000"
  },
  {
    "text": "this and then found that buried on the security page of the web assembly design",
    "start": "2278470",
    "end": "2283540"
  },
  {
    "text": "specification in the third paragraph in the fourth section like they talked about oh and by the way we probably",
    "start": "2283540",
    "end": "2289450"
  },
  {
    "text": "didn't protect against this and this and this and this of this almost everything we just talked about in this talk the",
    "start": "2289450",
    "end": "2295090"
  },
  {
    "text": "web assembly people did talk about and say yeah we probably didn't defend against these it would be nice if they made this much more obvious instead of a",
    "start": "2295090",
    "end": "2301690"
  },
  {
    "text": "buried paragraph that's so long and wordy like a nice bulleted list of you still need to fix all of these kinds of",
    "start": "2301690",
    "end": "2307810"
  },
  {
    "text": "C issues this is so I'd love to see them fix that if you're an application",
    "start": "2307810",
    "end": "2314050"
  },
  {
    "start": "2311000",
    "end": "2386000"
  },
  {
    "text": "developer and you want to try to make your code safe the first step if you cannot use in script in run script you",
    "start": "2314050",
    "end": "2320380"
  },
  {
    "text": "will be much better off if you have to use it you have to use it but just like",
    "start": "2320380",
    "end": "2325510"
  },
  {
    "text": "any language where you have something that's like eval like you want to avoid that if at all possible even if as we've",
    "start": "2325510",
    "end": "2333580"
  },
  {
    "text": "shown even if you don't have a user tainted way to get into it if there's an overflow we can still call it if you",
    "start": "2333580",
    "end": "2338710"
  },
  {
    "text": "don't use it in your code we can't call it and so then it's not useful as attackers the optimizer so sometimes",
    "start": "2338710",
    "end": "2347200"
  },
  {
    "text": "when we would do things they wouldn't work and why did my demo stop working oh we compiled it with the optimizer turned",
    "start": "2347200",
    "end": "2353200"
  },
  {
    "text": "on which changed the way everything worked in in some cases it removes functions or in lines number I don't",
    "start": "2353200",
    "end": "2358930"
  },
  {
    "text": "even know what's going on but there's a lot of times when we turn the optimizer on all the way some of our stuff doesn't work anymore so turn on the optimizer",
    "start": "2358930",
    "end": "2365920"
  },
  {
    "text": "it's not on by default but use it when you compile control flow integrity we talked about how that works there's a",
    "start": "2365920",
    "end": "2371920"
  },
  {
    "text": "performance penalty when you turn that on but depending on what you're doing maybe you can handle that maybe you can't but at the end of the day even if",
    "start": "2371920",
    "end": "2377950"
  },
  {
    "text": "you do all those things there's still plenty of sea bugs that are going to work just fine on your web assembly code so you still have to fix those things as",
    "start": "2377950",
    "end": "2385650"
  },
  {
    "text": "an attacker if you find one of these and you want to do something interesting we'll look forward script and run script",
    "start": "2385650",
    "end": "2391690"
  },
  {
    "text": "cuz that's where you're gonna have the most fun if you don't see that you can",
    "start": "2391690",
    "end": "2397660"
  },
  {
    "text": "use overflows you can use other things that allow you to write arbitrarily to over right values and in the function",
    "start": "2397660",
    "end": "2403990"
  },
  {
    "text": "pointers cases you can overwrite interesting things there if you get XSS you can turn back around and modify what",
    "start": "2403990",
    "end": "2410170"
  },
  {
    "text": "the wagons gonna be and even if there's no XSS because they didn't use encrypt",
    "start": "2410170",
    "end": "2415390"
  },
  {
    "text": "and run script for example then you should still be able to modify things in memory that are useful to you and then",
    "start": "2415390",
    "end": "2421180"
  },
  {
    "text": "if you're talking about node then all these tricks turn into RCE we have a",
    "start": "2421180",
    "end": "2428200"
  },
  {
    "text": "whitepaper security chasman Azzam went in my Brian Tyler Jeff and myself",
    "start": "2428200",
    "end": "2434280"
  },
  {
    "text": "blackhat site has kind of the version 0.9 we have a couple more things we want",
    "start": "2434280",
    "end": "2439839"
  },
  {
    "text": "to finish and when we do we'll put that on the NCC website so I'm Justin this is",
    "start": "2439839",
    "end": "2446560"
  },
  {
    "text": "Tyler thank you for coming if you",
    "start": "2446560",
    "end": "2455560"
  },
  {
    "text": "enjoyed our talk please fill out the survey if you didn't employ enjoy a talk please don't fill out survey our speaker",
    "start": "2455560",
    "end": "2464680"
  },
  {
    "text": "liaison has told us that we don't have to go to the Rapp room because it's lunchtime so we can just take questions here until we're done questions yes yeah",
    "start": "2464680",
    "end": "2476260"
  },
  {
    "text": "sure so if I wanted to debug an x86",
    "start": "2476260",
    "end": "2481960"
  },
  {
    "text": "program I'd use like all of your eider or something but would I use for web assembly there's actually really good",
    "start": "2481960",
    "end": "2488109"
  },
  {
    "text": "debugger support in browsers now so both Chrome and Firefox if you go into developer mode sorry repeat the question",
    "start": "2488109",
    "end": "2494800"
  },
  {
    "text": "you wanted to know how to debug this stuff if you go into developer mode you can actually see all of the web assembly",
    "start": "2494800",
    "end": "2499839"
  },
  {
    "text": "instructions in S format which is what we were showing a mess and you can like",
    "start": "2499839",
    "end": "2506470"
  },
  {
    "text": "step through you can set breakpoints all that stuff in chrome you can actually see the values that are on the stack at any given time it's pretty cool works",
    "start": "2506470",
    "end": "2512530"
  },
  {
    "text": "really well thank you yeah what would you want people implementing other",
    "start": "2512530",
    "end": "2518740"
  },
  {
    "text": "programming languages on top of web assembly to know or do you think of that I could only hear half of that a little",
    "start": "2518740",
    "end": "2524950"
  },
  {
    "text": "louder sorry what would you want other people implementing other programming languages than C on top of web is holy",
    "start": "2524950",
    "end": "2532030"
  },
  {
    "text": "what would you want them to know or include okay so if your if your language is already",
    "start": "2532030",
    "end": "2537130"
  },
  {
    "text": "memory safe then we've like a lot of the things that we talked about aren't really going to apply you need to think",
    "start": "2537130",
    "end": "2543490"
  },
  {
    "text": "about all the existing known vulnerabilities in the language that you have in its kind of base form and then",
    "start": "2543490",
    "end": "2548830"
  },
  {
    "text": "for each one just think about how does this apply to the architecture of web assembly is there something about web",
    "start": "2548830",
    "end": "2554800"
  },
  {
    "text": "assembly that makes these vulnerabilities not work anymore is there something that makes them more prevalent because of whatever is going",
    "start": "2554800",
    "end": "2560740"
  },
  {
    "text": "on I think things like the serialization will probably still be an issue I don't know if there's something as a language",
    "start": "2560740",
    "end": "2566170"
  },
  {
    "text": "developer you can do about that but it'll be interesting to think about it's not something I've thought about yet Thanks Thanks yeah I I'm totally missed",
    "start": "2566170",
    "end": "2574930"
  },
  {
    "text": "during your demo when you're uploading the file are you just reading the file contents into that proper yeah we were",
    "start": "2574930",
    "end": "2580990"
  },
  {
    "text": "copying the file contents what they do it into a string yeah after we're done",
    "start": "2580990",
    "end": "2586990"
  },
  {
    "text": "up here if you want to see the code we can just show you thank you hi great",
    "start": "2586990",
    "end": "2594130"
  },
  {
    "text": "talk maybe I missed it though a little louder no maybe I missed it yeah but what",
    "start": "2594130",
    "end": "2600070"
  },
  {
    "text": "happens when you go pass the local variables like what do you overwrite an in your memory or can you can you even",
    "start": "2600070",
    "end": "2606880"
  },
  {
    "text": "do that so the locals can be overwritten I think I can't remember how well it",
    "start": "2606880",
    "end": "2614410"
  },
  {
    "text": "depends on the compiler so each one is gonna be a little bit different in how they implement the various like data",
    "start": "2614410",
    "end": "2619810"
  },
  {
    "text": "structures and stuff and see but there are other things like outside of your local variables that could be potential",
    "start": "2619810",
    "end": "2625330"
  },
  {
    "text": "targets depending on the the compiler yeah so like we mentioned we earlier we",
    "start": "2625330",
    "end": "2631060"
  },
  {
    "text": "were able to overwrite literals which normally like in other languages usually you can't do that because there's somewhere else right but because of the",
    "start": "2631060",
    "end": "2637570"
  },
  {
    "text": "way they was laid out at that time it was working because we could go find it now it doesn't work so a good place for",
    "start": "2637570",
    "end": "2643960"
  },
  {
    "text": "you to start would be to look at that PDF that we linked because that lays out they have the entire file format as it",
    "start": "2643960",
    "end": "2650650"
  },
  {
    "text": "exists currently and like where the different sections are and how they work so that would be a good place to think",
    "start": "2650650",
    "end": "2656020"
  },
  {
    "text": "about that but at the end of the day a lot of that stuff is only in the web",
    "start": "2656020",
    "end": "2663010"
  },
  {
    "text": "assembly instructions section and so you can't get to it from linear memory because lean",
    "start": "2663010",
    "end": "2668250"
  },
  {
    "text": "memory is the only thing we could overflow so I wish I had a better answer for you but the answer is one it depends",
    "start": "2668250",
    "end": "2674100"
  },
  {
    "text": "- it's probably gonna change and three there could still be interesting things",
    "start": "2674100",
    "end": "2679500"
  },
  {
    "text": "like that we don't know yet right so does that also mean that there's a point in having some kind of stack Qunari",
    "start": "2679500",
    "end": "2685680"
  },
  {
    "text": "equivalent potentially as in you know you would want to have boundaries between your various linear memory",
    "start": "2685680",
    "end": "2693380"
  },
  {
    "text": "pieces or sections yeah maybe I don't know how hard that would be for them to",
    "start": "2693380",
    "end": "2698940"
  },
  {
    "text": "do but yeah there's maybe you also have to keep in mind that we're doing web assemblies supposed to be really general",
    "start": "2698940",
    "end": "2704370"
  },
  {
    "text": "and so maybe something we do for that works well and see but then it's gonna make it harder for them to do things about the languages so thanks all right",
    "start": "2704370",
    "end": "2715380"
  },
  {
    "text": "no other questions thanks sweet thanks guys appreciate it [Applause] [Music]",
    "start": "2715380",
    "end": "2722159"
  }
]