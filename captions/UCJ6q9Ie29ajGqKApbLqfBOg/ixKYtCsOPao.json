[
  {
    "text": "[Music]",
    "start": "1130",
    "end": "13840"
  },
  {
    "text": "hello everyone welcome to our talk my name is jerome from 360 alpha lab today",
    "start": "13840",
    "end": "20000"
  },
  {
    "text": "my colleague lee crusoe and i are going to talk about a research on bug hunting in chrome",
    "start": "20000",
    "end": "27119"
  },
  {
    "text": "first let me give a brief introduction to our team 360 offer left many focuses",
    "start": "27680",
    "end": "33040"
  },
  {
    "text": "on mobile security including trust zoom kernel applications like browser and so",
    "start": "33040",
    "end": "38480"
  },
  {
    "text": "on we have reported more than 300 bucks to top vendors including three exploited",
    "start": "38480",
    "end": "44960"
  },
  {
    "text": "chains of android devices and won the highest reward of google vrp program",
    "start": "44960",
    "end": "51120"
  },
  {
    "text": "our team also successfully found many targets in pantone and tm4 cup contests",
    "start": "51120",
    "end": "58760"
  },
  {
    "text": "so bug hunting is the main content of our work as a security researcher it is always a",
    "start": "58960",
    "end": "65198"
  },
  {
    "text": "good idea to learn from the old box and try to find more considering the complexity of the code",
    "start": "65199",
    "end": "71920"
  },
  {
    "text": "base there is a high probability that bugs shared with similar code patterns may",
    "start": "71920",
    "end": "78000"
  },
  {
    "text": "exist in many places throughout the code base found similar abilities based on a new",
    "start": "78000",
    "end": "86000"
  },
  {
    "text": "one this is called variant analysis it can be performed by either menu",
    "start": "86000",
    "end": "91759"
  },
  {
    "text": "called audit automated analysis tools or just writing your own further seated",
    "start": "91759",
    "end": "97119"
  },
  {
    "text": "with the poke but to find the new box effectively",
    "start": "97119",
    "end": "102320"
  },
  {
    "text": "we need to understand the root cause of the original bug sum up above pattern from it and make sure this pattern is",
    "start": "102320",
    "end": "109680"
  },
  {
    "text": "good enough for describing other similar bugs however this is sometimes not an easy",
    "start": "109680",
    "end": "116240"
  },
  {
    "text": "task because not all bugs can be abstracted briefly and the way how you",
    "start": "116240",
    "end": "121759"
  },
  {
    "text": "mutate the pattern may affect the results greatly",
    "start": "121759",
    "end": "127040"
  },
  {
    "text": "for example suppose we found an out of bounds bug caused by a just memory copy",
    "start": "127040",
    "end": "133360"
  },
  {
    "text": "we can perform some data flow analysis on these parameters to other memory copy",
    "start": "133360",
    "end": "138400"
  },
  {
    "text": "calls or we can consider other function calls like memory memory set",
    "start": "138400",
    "end": "144560"
  },
  {
    "text": "and search the whole code base depending on the choices our results are definitely different",
    "start": "144560",
    "end": "152239"
  },
  {
    "text": "in this talk we take chrome as an example to present how to discover new",
    "start": "152800",
    "end": "157840"
  },
  {
    "text": "bugs based on historical vulnerabilities chrome uses a",
    "start": "157840",
    "end": "163360"
  },
  {
    "text": "multi-process architecture which isolates different process from each other with sandbox",
    "start": "163360",
    "end": "169680"
  },
  {
    "text": "we are focusing on the code runs in browser process which means is on sandbox",
    "start": "169680",
    "end": "175519"
  },
  {
    "text": "and we are going to use code qr to help us locate potentially potential bugs quickly",
    "start": "175519",
    "end": "181599"
  },
  {
    "text": "called ql is a grid analysis tool which compiles code to a snapshot database",
    "start": "181599",
    "end": "187920"
  },
  {
    "text": "and can run queries against it for program analysis at last we will share the exploit",
    "start": "187920",
    "end": "195360"
  },
  {
    "text": "exploitation strategy of one of the box we found to escape the chrome sandbox",
    "start": "195360",
    "end": "202480"
  },
  {
    "text": "let's start with the common bug pattern in the chrome render from host lifetime issues",
    "start": "202800",
    "end": "209280"
  },
  {
    "text": "so what is a render from host it is an object",
    "start": "209280",
    "end": "215360"
  },
  {
    "text": "lives in the browser process which represents a frame in the render process",
    "start": "215360",
    "end": "220720"
  },
  {
    "text": "it provides a communication contact with the frame in the render process usually",
    "start": "220720",
    "end": "226560"
  },
  {
    "text": "we can delete a render from host object by just closing the underlying iframe",
    "start": "226560",
    "end": "234000"
  },
  {
    "text": "many services in chrome need to access render from host there are two common ways to do it",
    "start": "235599",
    "end": "241599"
  },
  {
    "text": "one is to storing a global id and using from id",
    "start": "241599",
    "end": "246720"
  },
  {
    "text": "functions to retrieve it back when you need when you need to use it and the other way is holding a row pointer to",
    "start": "246720",
    "end": "253920"
  },
  {
    "text": "random host as a class member variable this means that the developer should",
    "start": "253920",
    "end": "259759"
  },
  {
    "text": "take responsibility to observe the lifetime of random from host and clean",
    "start": "259759",
    "end": "264960"
  },
  {
    "text": "up the row pointer when the renderer host is going away so if a service can autolive the render",
    "start": "264960",
    "end": "272080"
  },
  {
    "text": "from host and still tries to access the render post object after its destruction",
    "start": "272080",
    "end": "278720"
  },
  {
    "text": "is it causes a user for bug and can be exported to escape the chrome sandbox",
    "start": "278720",
    "end": "286880"
  },
  {
    "text": "a representative example of this pattern is the issue submitted by serial theory",
    "start": "287680",
    "end": "294720"
  },
  {
    "text": "which were the newsletter free in installed application provider implement",
    "start": "294720",
    "end": "300160"
  },
  {
    "text": "implements this class implements a module interface named installed app provider which",
    "start": "300160",
    "end": "307600"
  },
  {
    "text": "provides installed app information related to the arranging of the requesting page",
    "start": "307600",
    "end": "313919"
  },
  {
    "text": "we can see that it holds a row pointer to the random from host objects",
    "start": "313919",
    "end": "320320"
  },
  {
    "text": "this instance is created by a static function named create and its lifetime",
    "start": "320800",
    "end": "326880"
  },
  {
    "text": "responded to the lifetime of the module receiver through make safe own receiver function",
    "start": "326880",
    "end": "333919"
  },
  {
    "text": "so the implementation will not be deleted as long as the reserve stays",
    "start": "333919",
    "end": "339360"
  },
  {
    "text": "connected quite a lot chrome module concepts here but this code can be described in a",
    "start": "339360",
    "end": "346160"
  },
  {
    "text": "simpler way there is no relationship between the lifetime of random frame host and",
    "start": "346160",
    "end": "352160"
  },
  {
    "text": "install the app provider implementation if we delete the rfh and invoke any",
    "start": "352160",
    "end": "359600"
  },
  {
    "text": "method which could access it the use of a free work in this case function filter installed",
    "start": "359600",
    "end": "367120"
  },
  {
    "text": "apps would do the trick there are many other no similar issues",
    "start": "367120",
    "end": "373199"
  },
  {
    "text": "many other known similar issues so we are wondering whether there are still such kind of box exists in chrome",
    "start": "373199",
    "end": "379840"
  },
  {
    "text": "codebase this bug pattern can be described in one",
    "start": "379840",
    "end": "386400"
  },
  {
    "text": "sentence any class storing random host as a room pointer in a member variable could be",
    "start": "386400",
    "end": "392840"
  },
  {
    "text": "vulnerable so as a simple graph command throughout the code base can get the",
    "start": "392840",
    "end": "398319"
  },
  {
    "text": "corresponding results however this description is too broad to",
    "start": "398319",
    "end": "403440"
  },
  {
    "text": "reduce false positives to an acceptable range so we need to add more specific",
    "start": "403440",
    "end": "409520"
  },
  {
    "text": "constraints according to the bug fixing a class can",
    "start": "409520",
    "end": "416240"
  },
  {
    "text": "get notified of various page events from web contents by inheriting web content",
    "start": "416240",
    "end": "422639"
  },
  {
    "text": "observer class including when a render phone host is going to be deleted this gives a chance",
    "start": "422639",
    "end": "430400"
  },
  {
    "text": "to clean up the pointer to render from host and prevent user free from happily",
    "start": "430400",
    "end": "438080"
  },
  {
    "text": "the fixing also indicates a way to improve the description we can filter",
    "start": "438319",
    "end": "444000"
  },
  {
    "text": "out the class which is a subclass to web contents observer and",
    "start": "444000",
    "end": "449120"
  },
  {
    "text": "implements the random frame deleted method similarly a subclass of frames or space",
    "start": "449120",
    "end": "455280"
  },
  {
    "text": "can also be include excluded because the class in creating frame",
    "start": "455280",
    "end": "460639"
  },
  {
    "text": "service space will be destroyed when the random from host is deleted",
    "start": "460639",
    "end": "467120"
  },
  {
    "text": "so taking together we can write a code qr query for instance that meets the",
    "start": "469520",
    "end": "474720"
  },
  {
    "text": "following conditions first it store render from host as a room",
    "start": "474720",
    "end": "480720"
  },
  {
    "text": "pointer in a member variable and the second is not a subclass of frame service space",
    "start": "480720",
    "end": "488639"
  },
  {
    "text": "thirdly it's not a subclass of web content observer or the render frame",
    "start": "488639",
    "end": "494400"
  },
  {
    "text": "deleted method is not implemented",
    "start": "494400",
    "end": "498800"
  },
  {
    "text": "it's not hard to write a code qr query to search this here is the key part of the query",
    "start": "501120",
    "end": "507599"
  },
  {
    "text": "first it finds a field which is a room pointer to render from host",
    "start": "507599",
    "end": "513120"
  },
  {
    "text": "then it says the class is not a subclass of frame service space and not a subclass of web contents",
    "start": "513120",
    "end": "520800"
  },
  {
    "text": "observer or the random render frame deleted method is not implemented",
    "start": "520800",
    "end": "527920"
  },
  {
    "text": "executing this query against a custom built criminal snapshots gives us",
    "start": "530000",
    "end": "536000"
  },
  {
    "text": "29 results we find one true positive after digging deeper through the results",
    "start": "536000",
    "end": "542560"
  },
  {
    "text": "this is very similar to the case i introduced before and we submitted the vulnerability in",
    "start": "542560",
    "end": "549360"
  },
  {
    "text": "this issue but unfortunately got duplicated which was reported one month",
    "start": "549360",
    "end": "554560"
  },
  {
    "text": "earlier",
    "start": "554560",
    "end": "556959"
  },
  {
    "text": "as we can see running from host lifetime issue is a very common pattern that keeps happening in the chrome codebase",
    "start": "561519",
    "end": "568560"
  },
  {
    "text": "and because this its cause is not complicated this type of availability will not exist for too",
    "start": "568560",
    "end": "575600"
  },
  {
    "text": "long now i'm going to hand it over to licorso and he will introduce a more complex",
    "start": "575600",
    "end": "581920"
  },
  {
    "text": "spark pattern in chrome well as after all i will show the next",
    "start": "581920",
    "end": "587120"
  },
  {
    "text": "pattern that i will written issues the firmware's lifetime issue is a very common pattern but because its course is",
    "start": "587120",
    "end": "594640"
  },
  {
    "text": "not complicated this type of availability will not exist for too long and searching only based on infinity",
    "start": "594640",
    "end": "601600"
  },
  {
    "text": "availability patterns without any mutation may not effect it",
    "start": "601600",
    "end": "607279"
  },
  {
    "text": "the way how to mutate the pattern is important next i will describe how we started from",
    "start": "607279",
    "end": "613040"
  },
  {
    "text": "a basic availability pattern to do mutate and finally found 14",
    "start": "613040",
    "end": "618160"
  },
  {
    "text": "vulnerabilities and got five cvs i think two vulnerabilities discovered",
    "start": "618160",
    "end": "624000"
  },
  {
    "text": "by other people as example and first let's look at cve 2020 skills",
    "start": "624000",
    "end": "629920"
  },
  {
    "text": "for six one in the course there is a possible path that transport complete will call",
    "start": "629920",
    "end": "636959"
  },
  {
    "text": "console building block which has the side effect of deleting this and the next branch",
    "start": "636959",
    "end": "643440"
  },
  {
    "text": "if blobs this is by the fpc could also be reached however since this is deleted the member",
    "start": "643440",
    "end": "651600"
  },
  {
    "text": "variable by this message callback is also freed and that's the uif triggered",
    "start": "651600",
    "end": "657600"
  },
  {
    "text": "as the next case the network process will send readable data to channel through websocket",
    "start": "657600",
    "end": "663200"
  },
  {
    "text": "channels and frame but in single frame file channel could be called if some checks falls in that case the",
    "start": "663200",
    "end": "670240"
  },
  {
    "text": "websocket instance will be deleted by doing erase from a std set which opens eight",
    "start": "670240",
    "end": "676800"
  },
  {
    "text": "same as the progress bar after retaining from the send frame call the subsequent code continues to be executed and the uf",
    "start": "676800",
    "end": "684959"
  },
  {
    "text": "will be triggered when accessing the member variable variable",
    "start": "684959",
    "end": "690800"
  },
  {
    "text": "from these cases it can be seen that the root cause of this block pattern is during the code execution of a class",
    "start": "690800",
    "end": "697440"
  },
  {
    "text": "instance calling another function which could cause the descriptor of this instance when returning to the context",
    "start": "697440",
    "end": "704000"
  },
  {
    "text": "of the destruct distance to continue execution the user free will occur if any",
    "start": "704000",
    "end": "709839"
  },
  {
    "text": "member variable or member function has axis we can write a query of this pattern",
    "start": "709839",
    "end": "716000"
  },
  {
    "text": "with good care and the key part of the query is as follows the managing map tab class and the range",
    "start": "716000",
    "end": "722800"
  },
  {
    "text": "function are important from qr libraries published by mmo the management map type class is used to",
    "start": "722800",
    "end": "730320"
  },
  {
    "text": "different management tabs such as a set or a map and the reach function determines the",
    "start": "730320",
    "end": "737040"
  },
  {
    "text": "readability or functions including the callback functions",
    "start": "737040",
    "end": "742639"
  },
  {
    "text": "of the screen we found several problems of this pattern take cve 2021 to 1115 as",
    "start": "742959",
    "end": "750800"
  },
  {
    "text": "an example password protect request is used to check whether a familiar login from a",
    "start": "750800",
    "end": "758240"
  },
  {
    "text": "password reuse event is safe or not the member function or at least checkdown",
    "start": "758240",
    "end": "763360"
  },
  {
    "text": "will call fail fail request proto when server if condition matched",
    "start": "763360",
    "end": "770639"
  },
  {
    "text": "and you messed up field request proto as some opinion requests will be sent through send requests but if the",
    "start": "770639",
    "end": "777440"
  },
  {
    "text": "serialized information is flash server to screen will fall so the request will be finished",
    "start": "777440",
    "end": "783279"
  },
  {
    "text": "immediately this will erase the request instance from std site named pending requests",
    "start": "783279",
    "end": "790240"
  },
  {
    "text": "and then the user free will be triggered when the finish in on whitelist check it out it's cody",
    "start": "790240",
    "end": "799120"
  },
  {
    "text": "so all queries seem to be effective but how to mutate the pattern to make them more efficient",
    "start": "799200",
    "end": "804720"
  },
  {
    "text": "based on the analyze or results will not say we notice that releasing objects is",
    "start": "804720",
    "end": "810720"
  },
  {
    "text": "more a some unexpected conditional branches in is point to be variable",
    "start": "810720",
    "end": "817040"
  },
  {
    "text": "and besides deleting the voice test during execution we try to focus on",
    "start": "817040",
    "end": "822240"
  },
  {
    "text": "lifetime management of the object referenced by a smart pointer so we propose such variant",
    "start": "822240",
    "end": "829360"
  },
  {
    "text": "considering a smart pointer as the unicorn pointer x is real pointer to the managed object is",
    "start": "829360",
    "end": "836800"
  },
  {
    "text": "written in context for subsequent uses and the x itself",
    "start": "836800",
    "end": "842399"
  },
  {
    "text": "will be moved as a parameter to a function in the function f unc if the",
    "start": "842399",
    "end": "848000"
  },
  {
    "text": "check condition is not matched it returns early before the ownership of x is transferred to the new owner",
    "start": "848000",
    "end": "855600"
  },
  {
    "text": "this will cause the smart pointer x to no longer be held by any owner resulting",
    "start": "855600",
    "end": "861920"
  },
  {
    "text": "in an unexpected implant seat release the ut3 will be triggered when the",
    "start": "861920",
    "end": "868880"
  },
  {
    "text": "reserved row pointer is used later a new query is required to search for",
    "start": "868880",
    "end": "875600"
  },
  {
    "text": "this kind of pattern so key parts are as follows",
    "start": "875600",
    "end": "881120"
  },
  {
    "text": "here we use dominance to determine the relationship between the return node and the mode node in the control flow graph",
    "start": "881120",
    "end": "888000"
  },
  {
    "text": "to ensure that the pointer has not been moved to a new owner at the time all",
    "start": "888000",
    "end": "893199"
  },
  {
    "text": "written we also found several problems with this pattern",
    "start": "893199",
    "end": "898480"
  },
  {
    "text": "here we take a bag as an example the ownership or older web content will be passed to this page handle",
    "start": "898480",
    "end": "905839"
  },
  {
    "text": "then this page handle will be mode to maybe start deterioration as a parameter",
    "start": "905839",
    "end": "911680"
  },
  {
    "text": "at this time if the check falls it will return immediately so speech handle will be destroyed at this time all the web",
    "start": "911680",
    "end": "918639"
  },
  {
    "text": "contents becomes a download pointer and the user free will be triggered when accessing it",
    "start": "918639",
    "end": "926000"
  },
  {
    "text": "there are many search results for this pattern but the return conditions or most results is how to be met",
    "start": "926000",
    "end": "932959"
  },
  {
    "text": "we want to maintain the pattern more specifically",
    "start": "932959",
    "end": "938000"
  },
  {
    "text": "when editing the query results of every return we found that student pixel code",
    "start": "938000",
    "end": "943440"
  },
  {
    "text": "this is a ps4 code exist in the drag and drop ui component",
    "start": "943440",
    "end": "948480"
  },
  {
    "text": "continue drag is a member function or temp stripe type drive contacts implement is called drag which is used",
    "start": "948480",
    "end": "956639"
  },
  {
    "text": "to execute the user's drug behavior according to the everything pattern",
    "start": "956639",
    "end": "962639"
  },
  {
    "text": "everybody can destroy type drag contacts implements during drag a uf will be",
    "start": "962639",
    "end": "969199"
  },
  {
    "text": "triggered when accessing the member variable drive controller we will look for opportunity to destroy",
    "start": "969199",
    "end": "975680"
  },
  {
    "text": "type drag contacts implement in function drag we found that",
    "start": "975680",
    "end": "981440"
  },
  {
    "text": "drag will inventory called ramuloob which will run a nested messy group as",
    "start": "981440",
    "end": "986800"
  },
  {
    "text": "follows so what is the nesting master group developer",
    "start": "986800",
    "end": "993040"
  },
  {
    "text": "we are a new master loop to process system and application task then to is",
    "start": "993040",
    "end": "998639"
  },
  {
    "text": "delegate associated with the current threat this blocks subsequent",
    "start": "998639",
    "end": "1004399"
  },
  {
    "text": "code execution until the x condition is met the quick lure is responsible",
    "start": "1004399",
    "end": "1012800"
  },
  {
    "text": "to close the loop when the accident condition is triggered and restore the outer context",
    "start": "1012800",
    "end": "1019199"
  },
  {
    "text": "therefore if we could destroy some instances in the new message loop after",
    "start": "1019199",
    "end": "1024558"
  },
  {
    "text": "we exit the new loop and back to the blocking context a uf will be triggered",
    "start": "1024559",
    "end": "1029760"
  },
  {
    "text": "when the destroyed instance gets accessed take the code of dragon drop as example",
    "start": "1029760",
    "end": "1037038"
  },
  {
    "text": "type strap type drive contacts implement could be destroyed during the message loop after the loop access",
    "start": "1037039",
    "end": "1044160"
  },
  {
    "text": "in continue drag the code after drag will continue to be equipped",
    "start": "1044160",
    "end": "1049679"
  },
  {
    "text": "the uf will be triggered when accessing its member variable drive controller so we got cve 2020",
    "start": "1049679",
    "end": "1057120"
  },
  {
    "text": "1604 finally we found a ufo box about the",
    "start": "1057120",
    "end": "1064320"
  },
  {
    "text": "news x11 clipboard where the code did not check correctly",
    "start": "1064320",
    "end": "1069840"
  },
  {
    "text": "when using the netstate nicely loop as well as to uf users related to the",
    "start": "1069840",
    "end": "1075679"
  },
  {
    "text": "message box under service or users in the ozone clipboard",
    "start": "1075679",
    "end": "1081360"
  },
  {
    "text": "which are as same as the x11 clipboard and google changed the clipboard apis to",
    "start": "1081360",
    "end": "1088240"
  },
  {
    "text": "be a sony more send markers ins and or using the nasalizing groups",
    "start": "1088240",
    "end": "1095679"
  },
  {
    "text": "take one of the x11 clipboard box as an example when crown password manager can",
    "start": "1096640",
    "end": "1102880"
  },
  {
    "text": "listen to the passive event it will call ready text and red text will return a",
    "start": "1102880",
    "end": "1108400"
  },
  {
    "text": "regular uh let's say my loop if chrome password manager current are destroyed",
    "start": "1108400",
    "end": "1113440"
  },
  {
    "text": "the uif will be triggered when accessing its member variable was on passcode",
    "start": "1113440",
    "end": "1118720"
  },
  {
    "text": "code after the next messy loop excite",
    "start": "1118720",
    "end": "1124720"
  },
  {
    "text": "well that story or everything issue no i will handle the presentation over",
    "start": "1125120",
    "end": "1130640"
  },
  {
    "text": "too long thanks thank you lee crystal according to this box an unusual bug",
    "start": "1130640",
    "end": "1137679"
  },
  {
    "text": "pattern like round loop can often open up a new attack surface with more vulnerabilities",
    "start": "1137679",
    "end": "1143679"
  },
  {
    "text": "next i'd like to share how we discovered another unusual pattern weak ptr",
    "start": "1143679",
    "end": "1148840"
  },
  {
    "text": "optimization and show how to exploit one of the reloads to escape the chrome sandbox",
    "start": "1148840",
    "end": "1156320"
  },
  {
    "text": "weak pointers are useful when an object needs to be accessed only if it exists",
    "start": "1157600",
    "end": "1163600"
  },
  {
    "text": "and the managed object may be deleted at any time by someone else",
    "start": "1163600",
    "end": "1169120"
  },
  {
    "text": "chrome implements its own version of weak pointers named weak ptr",
    "start": "1169120",
    "end": "1174799"
  },
  {
    "text": "and it is widely used in the code base the weak ptr class holds a weak",
    "start": "1174799",
    "end": "1180960"
  },
  {
    "text": "reference to an object that has no effect on its lifetime",
    "start": "1180960",
    "end": "1186480"
  },
  {
    "text": "a null test of this class is necessary before any use to ensure the underlying",
    "start": "1186480",
    "end": "1191760"
  },
  {
    "text": "object is still alive here is a simple example",
    "start": "1191760",
    "end": "1197440"
  },
  {
    "text": "validate the pointer first before calling a method",
    "start": "1197440",
    "end": "1202480"
  },
  {
    "text": "so what if we do not follow the rule and invoke the method directly without any",
    "start": "1204480",
    "end": "1209520"
  },
  {
    "text": "not test after the object was deleted the implementation of weak ptr may",
    "start": "1209520",
    "end": "1216080"
  },
  {
    "text": "answer this question weak ptr class overloads the class member axis operator to act like a",
    "start": "1216080",
    "end": "1223360"
  },
  {
    "text": "normal pointer for convenience if the underlying object is not valid it",
    "start": "1223360",
    "end": "1229600"
  },
  {
    "text": "will return non-pointer instead of the rule point therefore invoking the method",
    "start": "1229600",
    "end": "1236000"
  },
  {
    "text": "on an invalid with pdr object would only result in non-pointed reference which is",
    "start": "1236000",
    "end": "1242559"
  },
  {
    "text": "regarded as non-exploitable however this is not the truth when we",
    "start": "1242559",
    "end": "1248320"
  },
  {
    "text": "ran a test on kernel built with easy we found a code area in which wikipedia",
    "start": "1248320",
    "end": "1254880"
  },
  {
    "text": "are being used commented out the noun test code recompiled criminal and",
    "start": "1254880",
    "end": "1260960"
  },
  {
    "text": "trigger the corresponding code instead of a non-pointed reference crash",
    "start": "1260960",
    "end": "1266000"
  },
  {
    "text": "we got a use of the free and valid address to make things simpler these example",
    "start": "1266000",
    "end": "1272640"
  },
  {
    "text": "codes can show what happens the class full gas in our pointer to bar",
    "start": "1272640",
    "end": "1278880"
  },
  {
    "text": "and the get method would return the room pointer if is valid",
    "start": "1278880",
    "end": "1283919"
  },
  {
    "text": "is true but in the main function that is valid or set false so the get",
    "start": "1283919",
    "end": "1290799"
  },
  {
    "text": "method should return null and the virtual function call on our pointer",
    "start": "1290799",
    "end": "1295840"
  },
  {
    "text": "should crash the process this is what happens if we compile the code without any compile optimization",
    "start": "1295840",
    "end": "1303760"
  },
  {
    "text": "however if we add an additional o3 command the crash disappeared",
    "start": "1303760",
    "end": "1311919"
  },
  {
    "text": "the reason why weak ptr did not work as expected is that the llvm compiler",
    "start": "1312640",
    "end": "1319039"
  },
  {
    "text": "optimized out the branch which get method would return non-pointer as a result",
    "start": "1319039",
    "end": "1325200"
  },
  {
    "text": "more specifically the compiler recognized that there was a non-pointed",
    "start": "1325200",
    "end": "1330559"
  },
  {
    "text": "reference which belongs to undefined behaviors and choose to remove",
    "start": "1330559",
    "end": "1336000"
  },
  {
    "text": "related code unfortunately this optimization strategy could convert a non-point dereference",
    "start": "1336000",
    "end": "1343120"
  },
  {
    "text": "trash to an exploitable use after free bug",
    "start": "1343120",
    "end": "1348640"
  },
  {
    "text": "considering that weak ptr is widely used situation accessing the underlying",
    "start": "1350159",
    "end": "1355919"
  },
  {
    "text": "object without no test is likely to exist in many places",
    "start": "1355919",
    "end": "1361280"
  },
  {
    "text": "in a function body a weak ptr could be a class member variable",
    "start": "1361280",
    "end": "1366480"
  },
  {
    "text": "a function parameter or a stack elegant variable and the underlying object could be",
    "start": "1366480",
    "end": "1373200"
  },
  {
    "text": "accessed through pointer dereference operator or member access operator",
    "start": "1373200",
    "end": "1378640"
  },
  {
    "text": "it is not a good idea to take all of these points into one query so we can",
    "start": "1378640",
    "end": "1384080"
  },
  {
    "text": "search the pattern that occurs in most situations supposing the weak ptr is a class member",
    "start": "1384080",
    "end": "1391360"
  },
  {
    "text": "variable and it is accessed through the member access operator",
    "start": "1391360",
    "end": "1397600"
  },
  {
    "text": "so about the code qr part we first find this find the function",
    "start": "1397919",
    "end": "1403280"
  },
  {
    "text": "called invoked on the wikipedia object we match the type name and find all axes",
    "start": "1403280",
    "end": "1412559"
  },
  {
    "text": "and the next step we want to ensure that there is no null test before accessing",
    "start": "1414559",
    "end": "1420400"
  },
  {
    "text": "with pdr so the code says that there are not exist any if statement",
    "start": "1420400",
    "end": "1427120"
  },
  {
    "text": "which is related with pdr",
    "start": "1427120",
    "end": "1431480"
  },
  {
    "text": "the query gives about 363 results in our testing but many of",
    "start": "1432880",
    "end": "1439440"
  },
  {
    "text": "them are duplications of the same class we got three cbd numbers after a quick",
    "start": "1439440",
    "end": "1445760"
  },
  {
    "text": "analysis and successfully exploited one of them to escape chrome sandbox in 10th",
    "start": "1445760",
    "end": "1451440"
  },
  {
    "text": "cup last year and again i'm going to hand it over to liquor so for the exploitation part",
    "start": "1451440",
    "end": "1460159"
  },
  {
    "text": "okay sex rule i will show the last section about how to explore one of the weak",
    "start": "1460159",
    "end": "1465279"
  },
  {
    "text": "pointer back to escape the chrome sandbox in the tm4 conf 1020",
    "start": "1465279",
    "end": "1472320"
  },
  {
    "text": "first it's about some payroll knowledges unlike mojo rtc which security",
    "start": "1472320",
    "end": "1477840"
  },
  {
    "text": "researchers have been paying attention to in recent years the vulnerability we discovered existing latest ipc",
    "start": "1477840",
    "end": "1485760"
  },
  {
    "text": "in legislative each render process has a single axis channel implementation go",
    "start": "1485760",
    "end": "1491200"
  },
  {
    "text": "between themselves and the browser process and this is used to send legacy fc",
    "start": "1491200",
    "end": "1497440"
  },
  {
    "text": "messages between the processes there are two fundamental tabs or let's",
    "start": "1497440",
    "end": "1502720"
  },
  {
    "text": "say i've seen messages control messages defined via ipc message control micro",
    "start": "1502720",
    "end": "1508880"
  },
  {
    "text": "and rotate messages different via fc message rooted micros we now focus on the control messages",
    "start": "1508880",
    "end": "1516960"
  },
  {
    "text": "as figure should control messages generally go between the run design and the broad side",
    "start": "1516960",
    "end": "1522880"
  },
  {
    "text": "implementation cost all these classes implement exit center",
    "start": "1522880",
    "end": "1529760"
  },
  {
    "text": "and thus have a sender method for sending a control message to their",
    "start": "1529760",
    "end": "1534880"
  },
  {
    "text": "remote counterparts and they implement i've seen listeners to receive incoming control messages",
    "start": "1534880",
    "end": "1541440"
  },
  {
    "text": "where our message received the bug we used its availability in",
    "start": "1541440",
    "end": "1546720"
  },
  {
    "text": "browser side implementation so we can trigger it by sending some run side legacy fc requests",
    "start": "1546720",
    "end": "1554320"
  },
  {
    "text": "and another plural knowledge is about pp api within uh we need a sender to send the",
    "start": "1554400",
    "end": "1561279"
  },
  {
    "text": "fc message but it is very intricate to create and initialize our",
    "start": "1561279",
    "end": "1567760"
  },
  {
    "text": "connection to render rce therefore we leaked rpp instance id and use the ppp",
    "start": "1567760",
    "end": "1574080"
  },
  {
    "text": "song structure to send ipc call using the existing connection",
    "start": "1574080",
    "end": "1581200"
  },
  {
    "text": "the structure of ub sound is shown in finger there are global variables in",
    "start": "1581200",
    "end": "1586320"
  },
  {
    "text": "render process holding the address of the functions we can specify a connection to send the",
    "start": "1586320",
    "end": "1593919"
  },
  {
    "text": "ic message by passing in a pvp instance id to these functions and",
    "start": "1593919",
    "end": "1601120"
  },
  {
    "text": "the business id is only a global map we also",
    "start": "1601120",
    "end": "1606159"
  },
  {
    "text": "can link its value putting it together we could flexibly called the legacy ipc for subsequent",
    "start": "1606159",
    "end": "1613360"
  },
  {
    "text": "exploit and about back fire is very competent in",
    "start": "1613360",
    "end": "1619039"
  },
  {
    "text": "chrome sandbox equal abilities a member variable capable pointer or a smart pointer and the row pointer is not",
    "start": "1619039",
    "end": "1626159"
  },
  {
    "text": "cleaned up after the smart pointer is destroyed the draw printer becomes a downloading",
    "start": "1626159",
    "end": "1631600"
  },
  {
    "text": "pointer and the variability will be triggered when the pointer gets excised",
    "start": "1631600",
    "end": "1637039"
  },
  {
    "text": "the root cause of this part is similar but kind of different the victim pointer leading to user-free in this block is",
    "start": "1637039",
    "end": "1644559"
  },
  {
    "text": "worked as a voice pointer let's first take a look at the passive",
    "start": "1644559",
    "end": "1649679"
  },
  {
    "text": "pass or this pointer the target smart pointer stores in map",
    "start": "1649679",
    "end": "1656080"
  },
  {
    "text": "resources and its row pointer could be think about wrapped as a",
    "start": "1656080",
    "end": "1662399"
  },
  {
    "text": "weak pointer as the member variable or paper fail reference host class another class",
    "start": "1662399",
    "end": "1669760"
  },
  {
    "text": "for our io host can open this wave pointer and capability a member variable",
    "start": "1669760",
    "end": "1675600"
  },
  {
    "text": "named facetime host after tweaking the course reference of",
    "start": "1675600",
    "end": "1681360"
  },
  {
    "text": "the map resources we found that the key of the map could be passing",
    "start": "1681360",
    "end": "1687200"
  },
  {
    "text": "from the right side therefore if your party duplicate pp resources to previously store the",
    "start": "1687200",
    "end": "1695440"
  },
  {
    "text": "ticket smart pointer will be destroyed however it's real printer which is",
    "start": "1695440",
    "end": "1700480"
  },
  {
    "text": "wrapped as a waypointer is still stored in fair system host",
    "start": "1700480",
    "end": "1705520"
  },
  {
    "text": "the user 3 will be triggered when it gets used but the type of system post is wake",
    "start": "1705520",
    "end": "1712000"
  },
  {
    "text": "pointer which means the raw pointer will be checked whether it is valid",
    "start": "1712000",
    "end": "1717279"
  },
  {
    "text": "before use however due to the compiler's optimization or undefined behavior",
    "start": "1717279",
    "end": "1723120"
  },
  {
    "text": "mentioned before the check did not detect effect",
    "start": "1723120",
    "end": "1728240"
  },
  {
    "text": "and about the exploit after tracing the cross reference of system host we found that the function",
    "start": "1729039",
    "end": "1736559"
  },
  {
    "text": "create file system operation is the final vertical which we want to use",
    "start": "1736559",
    "end": "1742799"
  },
  {
    "text": "we at first want to spray blob to replace the fluid object with a buffer containing",
    "start": "1743520",
    "end": "1749760"
  },
  {
    "text": "completely controlled bytes but due to the visual table call is more in-depth",
    "start": "1749760",
    "end": "1755600"
  },
  {
    "text": "we now need to construct the structure to meet the constraints on this path",
    "start": "1755600",
    "end": "1761919"
  },
  {
    "text": "and hijack the control flow on windows if a library is loaded in multiple processes",
    "start": "1761919",
    "end": "1768640"
  },
  {
    "text": "it will be at the same basis based address so the library loaded in the render",
    "start": "1768640",
    "end": "1775200"
  },
  {
    "text": "process will be loaded at unknown address in the browser process",
    "start": "1775200",
    "end": "1780559"
  },
  {
    "text": "therefore we not only need to leak the hype address to achieve our",
    "start": "1780559",
    "end": "1785760"
  },
  {
    "text": "exploit at the beginning we try to use chat buffers as my grant",
    "start": "1785760",
    "end": "1792799"
  },
  {
    "text": "he used the shared buffers between the render and the browser process to do have screening",
    "start": "1792799",
    "end": "1798880"
  },
  {
    "text": "to predict the hyper address but it need to spread around 4 tb or copies of the",
    "start": "1798880",
    "end": "1805360"
  },
  {
    "text": "page and after he proposed this exploit the chrome team has set the limit on how",
    "start": "1805360",
    "end": "1812000"
  },
  {
    "text": "shared memory can be mapped in one process to 32 gb",
    "start": "1812000",
    "end": "1817679"
  },
  {
    "text": "so maybe we need another way so we found our compass that we are",
    "start": "1817679",
    "end": "1824320"
  },
  {
    "text": "seeing the contents of our format member variable or fair system host to the",
    "start": "1824320",
    "end": "1829679"
  },
  {
    "text": "render and we found our class ssl error handler",
    "start": "1829679",
    "end": "1835039"
  },
  {
    "text": "which has the same size as first system host and has a higher address at the",
    "start": "1835039",
    "end": "1840720"
  },
  {
    "text": "outset we can send we finally destroy the resource hosts host by using rust condition",
    "start": "1840720",
    "end": "1847440"
  },
  {
    "text": "after meeting the constraints and before seeding the reply",
    "start": "1847440",
    "end": "1852720"
  },
  {
    "text": "and replace the free space with ssl error handler",
    "start": "1852720",
    "end": "1857919"
  },
  {
    "text": "so we send for hairbase or hyperdrives to the render process and",
    "start": "1857919",
    "end": "1864080"
  },
  {
    "text": "change the code by rendering rce to receive the me the run side",
    "start": "1864080",
    "end": "1869200"
  },
  {
    "text": "at this point we have the hair four pads on the hyperdress",
    "start": "1869200",
    "end": "1874880"
  },
  {
    "text": "so we can predict the hyperdrives by screening around 8 gb data through the",
    "start": "1874880",
    "end": "1880000"
  },
  {
    "text": "way macaroons use it's little than 32 gb",
    "start": "1880000",
    "end": "1885919"
  },
  {
    "text": "and we will use the user3 to do the vertical to power to the stack to the spreading data",
    "start": "1885919",
    "end": "1893600"
  },
  {
    "text": "and finally achieve arbitrary code execution through iop",
    "start": "1893600",
    "end": "1900880"
  },
  {
    "text": "okay that's all about the exploitation to escape the chrome sandboxing in team full cup 2020 now let's watch our simple",
    "start": "1900960",
    "end": "1909279"
  },
  {
    "text": "demo video",
    "start": "1909279",
    "end": "1912600"
  },
  {
    "text": "so",
    "start": "1925279",
    "end": "1928279"
  },
  {
    "text": "ah",
    "start": "1944799",
    "end": "1947799"
  },
  {
    "text": "okay that's all and about the conclusion in this presentation we first briefly",
    "start": "1954240",
    "end": "1959919"
  },
  {
    "text": "introduced the background or chrome multi-process architecture and its interprocess communication system will",
    "start": "1959919",
    "end": "1966799"
  },
  {
    "text": "describe the significance of where it analyzed and how it works with good ql",
    "start": "1966799",
    "end": "1972640"
  },
  {
    "text": "after that we review some classical bugs and introduce how to generate more",
    "start": "1972640",
    "end": "1978000"
  },
  {
    "text": "abstract and complex vulnerability patterns and the locating potential bugs quickly",
    "start": "1978000",
    "end": "1984880"
  },
  {
    "text": "also when analyzing the vulnerability pattern mutation we introduced three patterns from the",
    "start": "1984880",
    "end": "1990480"
  },
  {
    "text": "shadow to the deeper about run frame holes are written and weak pointer optimization",
    "start": "1990480",
    "end": "1997919"
  },
  {
    "text": "at last we take a box that we used to escape the crop sandbox in temple cup",
    "start": "1997919",
    "end": "2003279"
  },
  {
    "text": "2020 as an example to introduce how we do the exploit",
    "start": "2003279",
    "end": "2008640"
  },
  {
    "text": "okay that's all thank you all for listening and is there any question",
    "start": "2009120",
    "end": "2015480"
  }
]