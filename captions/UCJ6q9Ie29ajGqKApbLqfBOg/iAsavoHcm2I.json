[
  {
    "text": "[Music] uh hi everyone thank you for coming I'm really really excited to be here it's my",
    "start": "0",
    "end": "5560"
  },
  {
    "text": "first blackout so I'm really excited uh I'm Steve I'm a security researcher at",
    "start": "5560",
    "end": "11440"
  },
  {
    "text": "at Akamai um I joined originally as a threet hunter and then I moved on to the security research team and before",
    "start": "11440",
    "end": "18720"
  },
  {
    "text": "joining Akamai I used to do uh inst respon and forensics mainly on Windows machines now over the past year and a",
    "start": "18720",
    "end": "25920"
  },
  {
    "text": "half or so our team's been mainly focused on msrpc and it's mostly been offensive research like bypassing",
    "start": "25920",
    "end": "32520"
  },
  {
    "text": "security mechanisms uh or vulnerability research uh and we even present our",
    "start": "32520",
    "end": "38480"
  },
  {
    "text": "fightings at last year's Defcon and hexagon and this talk is a continuation of This research but focusing on the",
    "start": "38480",
    "end": "45039"
  },
  {
    "text": "defensive aspect of things so what we're going to discuss today is first we'll see how msrpc behaves and works and then",
    "start": "45039",
    "end": "53719"
  },
  {
    "text": "we'll do the same with etw because we will be using etw uh to detect msrpc",
    "start": "53719",
    "end": "59239"
  },
  {
    "text": "based attacks and lastly because I don't want to limit our discussion to just detections we'll",
    "start": "59239",
    "end": "64960"
  },
  {
    "text": "see how we can supplement def fence with another buil-in mechanism in Windows called uh the RPC filters which are part",
    "start": "64960",
    "end": "70240"
  },
  {
    "text": "of the Windows Firewall but first what is RPC RPC",
    "start": "70240",
    "end": "75600"
  },
  {
    "text": "stands for remote procedure calls it's a sort of interprocess communication method uh to allow programs to expose",
    "start": "75600",
    "end": "82040"
  },
  {
    "text": "capabilities uh forever programs um in this talk we'll focus on msrpc which is",
    "start": "82040",
    "end": "88360"
  },
  {
    "text": "Microsoft implementation of RPC which is an integral part of the Windows operating system and it's been around",
    "start": "88360",
    "end": "94680"
  },
  {
    "text": "since the '90s and you might be asking me if it's been around since the ' 90s is it still relevant um why don't you",
    "start": "94680",
    "end": "101000"
  },
  {
    "text": "focus on cloud or Ai and to that I would like to show this network map um here on",
    "start": "101000",
    "end": "108040"
  },
  {
    "text": "the screen it's a network map of a real life network not any test environment and it's filtered to show only one port",
    "start": "108040",
    "end": "115560"
  },
  {
    "text": "portion of msrpc traffic so it's the endpoint mapper of of RPC and we'll",
    "start": "115560",
    "end": "121320"
  },
  {
    "text": "discuss exactly what that is in a bit and so it's a small fraction of RPC and it's everywhere in the network so yeah",
    "start": "121320",
    "end": "127799"
  },
  {
    "text": "RPC is still relevant and not only that RPC is also very relevant to network",
    "start": "127799",
    "end": "132879"
  },
  {
    "text": "attacks um taken here is a miter attack metrix and highlighted in purple are all",
    "start": "132879",
    "end": "139280"
  },
  {
    "text": "the places where msrpc takes part now I know it's not really that legible on the screen um but to give some examples we",
    "start": "139280",
    "end": "146879"
  },
  {
    "text": "have DC sync for credential lapping and PS exac and wmi as an example for",
    "start": "146879",
    "end": "152200"
  },
  {
    "text": "lateral movement attempts and if we go into the realm vulnerabilities we have ptit poam or zero gon which are also",
    "start": "152200",
    "end": "158800"
  },
  {
    "text": "carried by msrpc and if we don't want to discuss something theoretical like just attack techniques uh if we take a look",
    "start": "158800",
    "end": "165440"
  },
  {
    "text": "at almost any Ransom report uh that at least those that I've seen most of",
    "start": "165440",
    "end": "171080"
  },
  {
    "text": "Ransom actors have either used or have the capability for PSX which is by",
    "start": "171080",
    "end": "177239"
  },
  {
    "text": "communicating with uh the service manager for lateral movement so it's very relevant for ongoing attacks and",
    "start": "177239",
    "end": "183959"
  },
  {
    "text": "current attacks as well and not only that RPC is harder to",
    "start": "183959",
    "end": "189159"
  },
  {
    "text": "detect because we have another later layer of encapsulation that will need to peel before we can get to the actual",
    "start": "189159",
    "end": "195200"
  },
  {
    "text": "data that is being or the operations that are being requested and the packet inspection is usually expensive uh res",
    "start": "195200",
    "end": "203080"
  },
  {
    "text": "and TimeWise so most Network defense tools have mostly network connection met",
    "start": "203080",
    "end": "208200"
  },
  {
    "text": "metadata so we're missing that uh information also most RPC servers which",
    "start": "208200",
    "end": "214680"
  },
  {
    "text": "are programs that expose RPC capability are usually running as SBC hosts or",
    "start": "214680",
    "end": "220519"
  },
  {
    "text": "protected processes so we have we'll have some difficulty matching RPC",
    "start": "220519",
    "end": "225720"
  },
  {
    "text": "traffic um to uh Network traffic to process information and lastly even if we wanted",
    "start": "225720",
    "end": "232519"
  },
  {
    "text": "to create a network uh defense rules RP traffic usually occurs over ephemeral ports in TCP or uh over MB so creating",
    "start": "232519",
    "end": "241280"
  },
  {
    "text": "fire rules in vents might be a bit problematic and even if we wanted to",
    "start": "241280",
    "end": "246400"
  },
  {
    "text": "have defense there aren't that many defensive options we have the RPC filters in the Windows Firewall which",
    "start": "246400",
    "end": "252120"
  },
  {
    "text": "we'll discuss at the last part of the stock and there have been already some atw based monitors for RPC just like we",
    "start": "252120",
    "end": "259160"
  },
  {
    "text": "discussed in this talk um but they're mostly anual security researchers and don't really focus on the network aspect",
    "start": "259160",
    "end": "265320"
  },
  {
    "text": "of things uh the strongest option is in my opinion is the RPC firewall which was actually presented at blackhead I think",
    "start": "265320",
    "end": "272160"
  },
  {
    "text": "two years ago um but it's a third party tool it relies on process injection and",
    "start": "272160",
    "end": "277600"
  },
  {
    "text": "hooks to have the heral capability so there's a threade of th between security and uh build-in",
    "start": "277600",
    "end": "285080"
  },
  {
    "text": "stuff um so how can we take this image or this data that we have about an RPC",
    "start": "285080",
    "end": "291320"
  },
  {
    "text": "connection which doesn't tell us tells us a lot this is by the way PS exec and turn it into something more informative",
    "start": "291320",
    "end": "298520"
  },
  {
    "text": "that we can actually use to to understand what is being requested well stay tuned first we have to understand",
    "start": "298520",
    "end": "304199"
  },
  {
    "text": "how RPC Works um so if I do my job correctly by the end of this section you'll understand the following",
    "start": "304199",
    "end": "310120"
  },
  {
    "text": "terminology which will will be relevant for later use we have the interface the",
    "start": "310120",
    "end": "315199"
  },
  {
    "text": "IDL transport endpoint and sorry and binding um first RPC Works in a client",
    "start": "315199",
    "end": "323039"
  },
  {
    "text": "and server model a server exposes functionality that the client can then call how does the client know which",
    "start": "323039",
    "end": "329759"
  },
  {
    "text": "functionality server exposes for that we have the IDL interface definition language uh it's a text based file that",
    "start": "329759",
    "end": "336880"
  },
  {
    "text": "describes the server uh RPC interface and inside we have a unique identifier",
    "start": "336880",
    "end": "341960"
  },
  {
    "text": "uid that identifies that specific RPC server and then we have the server",
    "start": "341960",
    "end": "347160"
  },
  {
    "text": "definition with its name and all the functions it exposes and any data types it needs how does that get into the",
    "start": "347160",
    "end": "354039"
  },
  {
    "text": "binary uh for that Microsoft provided us with midl which is an exit that we can use to compile compile the IG file into",
    "start": "354039",
    "end": "361639"
  },
  {
    "text": "C uh code and header files which can then be compiled into the",
    "start": "361639",
    "end": "368120"
  },
  {
    "text": "binary uh but for traffic to pass it has to have some sort of transport and connection for that we have the end",
    "start": "368400",
    "end": "374599"
  },
  {
    "text": "points which are what we connect to um with RPC traffic and endpoints vary",
    "start": "374599",
    "end": "381120"
  },
  {
    "text": "according to the transport that is being used the most common ones are TCP as a transport and the name pipe and then SMB",
    "start": "381120",
    "end": "388319"
  },
  {
    "text": "as transport and then the end points are a port and a pipe name but there are also other um transport types available",
    "start": "388319",
    "end": "396960"
  },
  {
    "text": "here is the most common one there are around 14 defined most of them obsolete already so those are the uh more modern",
    "start": "396960",
    "end": "404759"
  },
  {
    "text": "runs endpoints can also be either well-known or dynamic in the case of a well-known endpoint well it's known in",
    "start": "404759",
    "end": "411240"
  },
  {
    "text": "advance so both the client and server can immediately start communicating but with Dynamic endpoints the server",
    "start": "411240",
    "end": "417080"
  },
  {
    "text": "receives its uh the endpoint itself from the endpoint mapper and for the client to know that endpoint it first has to",
    "start": "417080",
    "end": "423479"
  },
  {
    "text": "communicate with the endpoint mapper using the well-known endpoint TCP Port 135 and then it will uh receive the",
    "start": "423479",
    "end": "431039"
  },
  {
    "text": "endpoint for the server and can communicate with it this commun this communication with the point mapper is",
    "start": "431039",
    "end": "436120"
  },
  {
    "text": "what we've seen in the network map uh at the start of the stock lastly we have The Binding which",
    "start": "436120",
    "end": "442840"
  },
  {
    "text": "is the session between the client and the server sorry for practical purposes",
    "start": "442840",
    "end": "448400"
  },
  {
    "text": "that's a handle and both the client and the server can manipulate um The Binding",
    "start": "448400",
    "end": "453800"
  },
  {
    "text": "or session parameters using designated functions that work on that handle for example authentication is carried that",
    "start": "453800",
    "end": "460599"
  },
  {
    "text": "way if we zoom into uh what exactly is being passed during RPC call well the",
    "start": "460599",
    "end": "465879"
  },
  {
    "text": "client calls the function as normally but it's not implemented on it instead it goes into a rer function called ndr",
    "start": "465879",
    "end": "472680"
  },
  {
    "text": "client call which is implemented and exported by the RPC runtime the RPC runtime uh is implemented in RPC rt4 dll",
    "start": "472680",
    "end": "481120"
  },
  {
    "text": "and it's loaded into each and every process that uses RPC whether it's a client or a server on the client side",
    "start": "481120",
    "end": "487960"
  },
  {
    "text": "it's responsible for Maring parameters that is taking uh all the function arguments and making them Network safe",
    "start": "487960",
    "end": "494800"
  },
  {
    "text": "connecting and resolving to the endpoint on the server binding offending if it needs to and passing all the data on the",
    "start": "494800",
    "end": "501080"
  },
  {
    "text": "server side the RP listens on the end points accepts all the data and Marshal parameters performs any necessary access",
    "start": "501080",
    "end": "507960"
  },
  {
    "text": "checks and eventually class control to the Ser function once the function returns uh the whole process is made the",
    "start": "507960",
    "end": "514159"
  },
  {
    "text": "other way around to get all the data back to the client and if we zoom in into a bit more",
    "start": "514159",
    "end": "520880"
  },
  {
    "text": "into what is being passed to ndr client call we can see that actually in no point in time that the function name as",
    "start": "520880",
    "end": "527040"
  },
  {
    "text": "a string is being passed not to Ender CL and not on the network instead what is",
    "start": "527040",
    "end": "533800"
  },
  {
    "text": "passed is something called an opam which is an integer that represents that function and why is that relevant",
    "start": "533800",
    "end": "539800"
  },
  {
    "text": "because in all our later interactions with RPC we will have OPN nums and not function names so we need a way to map",
    "start": "539800",
    "end": "545640"
  },
  {
    "text": "them in order to understand what is being requested normally it's very likely for us it's very simple uh",
    "start": "545640",
    "end": "552360"
  },
  {
    "text": "usually the opam is documented as part of the interface definition or it's usually by the order of appearance of",
    "start": "552360",
    "end": "558680"
  },
  {
    "text": "functions inside IDL file so it's not really a hurdle that we need to",
    "start": "558680",
    "end": "564480"
  },
  {
    "text": "pass that's it for how our PC looks and behaves so let's recap before moving on",
    "start": "564480",
    "end": "571160"
  },
  {
    "text": "we have the RPC interface which describes the functionality that the server exposes and it's represented by a",
    "start": "571160",
    "end": "577680"
  },
  {
    "text": "uid then we have the transport which is the communication medium that uh passes",
    "start": "577680",
    "end": "583079"
  },
  {
    "text": "all the data and it's represented by protocal sequence like TCP or name pipes",
    "start": "583079",
    "end": "588320"
  },
  {
    "text": "then we have the name point the end point Sorry which is the destination we connect to um and it its type depends on",
    "start": "588320",
    "end": "594800"
  },
  {
    "text": "the transport so we have a port for TCP or UDP or a pipe name for name p pipes",
    "start": "594800",
    "end": "600000"
  },
  {
    "text": "and lastly we have The Binding which is the session between the client and the server and it's represented by a",
    "start": "600000",
    "end": "606320"
  },
  {
    "text": "handle with that we can move on to how to seeing how we can look into what has",
    "start": "606320",
    "end": "612000"
  },
  {
    "text": "been requested with",
    "start": "612000",
    "end": "615160"
  },
  {
    "text": "RPC okay but for that we will use the ew which are event rating for Windows which",
    "start": "617680",
    "end": "624160"
  },
  {
    "text": "is a built-in login inflation mechanism in the Windows operating system it works in a sort of provider and consumer model",
    "start": "624160",
    "end": "631200"
  },
  {
    "text": "so providers processes that want to generate events Define a schema that",
    "start": "631200",
    "end": "636480"
  },
  {
    "text": "clients can then uh so consumers that's how it called can then know how to par",
    "start": "636480",
    "end": "641880"
  },
  {
    "text": "the events and both Proprietors and consumers have to register with atw in",
    "start": "641880",
    "end": "647120"
  },
  {
    "text": "system itself which is implemented in the kernel the US mod logic that is",
    "start": "647120",
    "end": "652560"
  },
  {
    "text": "available for the processes is actually implemented in antd with some pointers in advapi DL so the flow of etw is very",
    "start": "652560",
    "end": "662519"
  },
  {
    "text": "simple uh first the application process that wants to be a provider registers with the kernel thew and it provides",
    "start": "662519",
    "end": "670360"
  },
  {
    "text": "another uid that will identify it the kernel returns a handle that it can then",
    "start": "670360",
    "end": "675800"
  },
  {
    "text": "use on subsequent calls to identify itself for example when writing events but because there are no consumers",
    "start": "675800",
    "end": "682639"
  },
  {
    "text": "registers at the moment uh events are being discarded because there's no one to send them to so they're sent to the",
    "start": "682639",
    "end": "688600"
  },
  {
    "text": "void um but hoping the kernel boundary each and every time just to have the event",
    "start": "688600",
    "end": "693959"
  },
  {
    "text": "data discarded is very wasteful uh resource and resource wise uh so instead",
    "start": "693959",
    "end": "700839"
  },
  {
    "text": "what we can do the provider can actually provide a call back to the kernel to be notified on the state that it should run",
    "start": "700839",
    "end": "708000"
  },
  {
    "text": "in so that way the kernel can notify the provider if there are any consumers",
    "start": "708000",
    "end": "713120"
  },
  {
    "text": "available and if there aren't any it will it can just uh sorry skip event uh",
    "start": "713120",
    "end": "719079"
  },
  {
    "text": "writing to the Kel and this is how the callbacks look like um we can see that the second",
    "start": "719079",
    "end": "724839"
  },
  {
    "text": "parameter is is enabled which tells us um if it's enabled so if we go back to",
    "start": "724839",
    "end": "731040"
  },
  {
    "text": "our flow um we in the instead of writing events to the kernel the process first",
    "start": "731040",
    "end": "736160"
  },
  {
    "text": "checks if it is enabled and if it write events and it skips doing writing them if there are non consumers once the",
    "start": "736160",
    "end": "741920"
  },
  {
    "text": "consumer registers with the kernel by en calling enabled qu with the same uid the",
    "start": "741920",
    "end": "747079"
  },
  {
    "text": "provider used then the knows how to route events and they are being passed correctly in our case we will be using",
    "start": "747079",
    "end": "754360"
  },
  {
    "text": "the RPC atw provider which is implemented as part of the RPC runtime now I said that the RPC runtime is",
    "start": "754360",
    "end": "760920"
  },
  {
    "text": "loaded into each and every process that uses RPC so is there like an issue with",
    "start": "760920",
    "end": "766680"
  },
  {
    "text": "having multiple processor right to the same provider no because everything is handled by the Kel so uh it's Works",
    "start": "766680",
    "end": "773639"
  },
  {
    "text": "flawlessly there are 13 different events in the etw provider but we'll focus only on two of them them that have the same",
    "start": "773639",
    "end": "779760"
  },
  {
    "text": "schema which are the client and server call start um the call stop is also interesting an event to look at but it",
    "start": "779760",
    "end": "787360"
  },
  {
    "text": "only has one field which is the status of the call which doesn't really help with detecting attacks uh so we'll focus",
    "start": "787360",
    "end": "793760"
  },
  {
    "text": "on the call start that's the scem of the event if we take a look at the first at the first part of it we can see that we",
    "start": "793760",
    "end": "800000"
  },
  {
    "text": "have basically all we need we have the interface uad and the proam which is the opam which identify which operation is",
    "start": "800000",
    "end": "806680"
  },
  {
    "text": "being requested and then we have the product the network address and the endpoint to identify where is it coming",
    "start": "806680",
    "end": "812360"
  },
  {
    "text": "from so basically we have all the fields that we want for a connecting flows with",
    "start": "812360",
    "end": "817600"
  },
  {
    "text": "RPC operations we also have some useful other atw headers fields that are",
    "start": "817600",
    "end": "823760"
  },
  {
    "text": "available to anyw event so we have the activity ID which is another U ID that",
    "start": "823760",
    "end": "829360"
  },
  {
    "text": "can be used to track event chains so for example on the same rple we will have an event for call start call stop and maybe",
    "start": "829360",
    "end": "836920"
  },
  {
    "text": "an error as long as they're all part of the same RPC call they should have the same activity ID which can we can then",
    "start": "836920",
    "end": "843360"
  },
  {
    "text": "use to correlate them we also have the process ID of the process that generated the event so for example the SBC host",
    "start": "843360",
    "end": "849880"
  },
  {
    "text": "that created that runs the RPC server uh and we also have the time stamp and the",
    "start": "849880",
    "end": "855399"
  },
  {
    "text": "time stamp is very important because because everything is routed through the kernel uh there should be some time lag",
    "start": "855399",
    "end": "860920"
  },
  {
    "text": "between when the event is generated versus when the event is actually consumed therefore we don't want to rely",
    "start": "860920",
    "end": "866759"
  },
  {
    "text": "on the time we receive the event instead want to rely on the time it is generated and in the time",
    "start": "866759",
    "end": "874040"
  },
  {
    "text": "stamp so now that we've seen all the fields that we have can we actually move on to attack",
    "start": "874040",
    "end": "880199"
  },
  {
    "text": "detection and the answer to that is no because if we take a look at the RPC runtime and this is the decompilation of",
    "start": "880199",
    "end": "887240"
  },
  {
    "text": "the function that um handles a server calls we can see that it actually",
    "start": "887240",
    "end": "892360"
  },
  {
    "text": "doesn't really send the the network address and it sets a null value instead so we're missing that crucial piece of",
    "start": "892360",
    "end": "897959"
  },
  {
    "text": "information to mat Network and operation and I don't really want to",
    "start": "897959",
    "end": "903160"
  },
  {
    "text": "focus on client events because since we're looking for malicious traffic we have to assume that the client is",
    "start": "903160",
    "end": "909440"
  },
  {
    "text": "somehow under the attacker's control so the attackers can either temper with ADW events or even disable them all together",
    "start": "909440",
    "end": "916880"
  },
  {
    "text": "uh or they can just use the local client as a proxy um and sorry and tnal Order",
    "start": "916880",
    "end": "923279"
  },
  {
    "text": "traffic through it uh they can also just generate RPC without going through the Opera System since RPC is just a network",
    "start": "923279",
    "end": "930440"
  },
  {
    "text": "protocol for example impacket very uh what is going on",
    "start": "930440",
    "end": "937240"
  },
  {
    "text": "here my laptop just decided to do a lot of stuff uh sorry um where were",
    "start": "937759",
    "end": "946319"
  },
  {
    "text": "we we were here um so the the client can even uh",
    "start": "946319",
    "end": "954240"
  },
  {
    "text": "sorry the attackers can just generate RPC traffic without going through the operating system for example impact back at a common and very used library in",
    "start": "954240",
    "end": "961800"
  },
  {
    "text": "Python does exactly that it implements RPC without using the operating system and because of all of that I don't want",
    "start": "961800",
    "end": "967399"
  },
  {
    "text": "to learn time calls and I chose to focus on server events so what can we do with server events how can we bridge that",
    "start": "967399",
    "end": "974399"
  },
  {
    "text": "missing data well we can use etw again um both the uh etw providers of TCP and",
    "start": "974399",
    "end": "981480"
  },
  {
    "text": "SB the most common um RPC transports have very useful providers so we can",
    "start": "981480",
    "end": "987720"
  },
  {
    "text": "match the end point from the RPC event with the endpoint on the uh Network",
    "start": "987720",
    "end": "993639"
  },
  {
    "text": "provider so it will be a port on the TCP side and the pipe name on the SMB side",
    "start": "993639",
    "end": "999759"
  },
  {
    "text": "with TCP it's pretty simple the TCP provider has an event called accept listener complete when the TCP session",
    "start": "999759",
    "end": "1006319"
  },
  {
    "text": "is established after the handshake and there we have the adverse fields which hold both the IP and the port of whether",
    "start": "1006319",
    "end": "1013440"
  },
  {
    "text": "the client or the source or or destination uh so if we take the port from this event and match it with the",
    "start": "1013440",
    "end": "1019880"
  },
  {
    "text": "end point which should be a port on the RPC event will have that matching between Network and",
    "start": "1019880",
    "end": "1025558"
  },
  {
    "text": "operation with SMB it's a bit more complicated because in with SMB um there",
    "start": "1025559",
    "end": "1031918"
  },
  {
    "text": "are there could be multiple file requests or any request on the same S&P session so we'll have two events to",
    "start": "1031919",
    "end": "1037839"
  },
  {
    "text": "track first we have the event for connection except start which signals that the session has been established",
    "start": "1037839",
    "end": "1044199"
  },
  {
    "text": "and it's been routed and there we have the address of the client then we should",
    "start": "1044199",
    "end": "1049480"
  },
  {
    "text": "see the event for SMB request file request where we'll have the file name",
    "start": "1049480",
    "end": "1055559"
  },
  {
    "text": "which should be the pipe name if we want to match endpoint to file name to address we have to keep track of the",
    "start": "1055559",
    "end": "1062520"
  },
  {
    "text": "connection gu ID which identifies that session and it might be a bit not that",
    "start": "1062520",
    "end": "1067559"
  },
  {
    "text": "clear with just arrows and boxes so let's take a look at this chronologically if we uh let's consider",
    "start": "1067559",
    "end": "1074039"
  },
  {
    "text": "an RPC call that is being trans uh that it trans is SMB the first etw event that",
    "start": "1074039",
    "end": "1079960"
  },
  {
    "text": "we'll see is from the SMB provider and it's for the SMB accept start and there",
    "start": "1079960",
    "end": "1085360"
  },
  {
    "text": "will have the IP and the connection guid if we wait for a bit we'll also see an event again from the SMB provider with",
    "start": "1085360",
    "end": "1092440"
  },
  {
    "text": "the file request which should hold the connection guad and the pipe name that is being requested and lastly we will",
    "start": "1092440",
    "end": "1099080"
  },
  {
    "text": "have an event from the RPC provider uh which will hold the pipe and the opam",
    "start": "1099080",
    "end": "1104960"
  },
  {
    "text": "and the interface which is what we want so if we keep track of all this data and then backtrack once we get the RPC",
    "start": "1104960",
    "end": "1111360"
  },
  {
    "text": "request we can match IP and pipe to the opam interface which is exactly what we",
    "start": "1111360",
    "end": "1116559"
  },
  {
    "text": "want for a matching RPC to network network flows and I implemented exactly that and",
    "start": "1116559",
    "end": "1124679"
  },
  {
    "text": "I call the tool RPC visibility it's a python script that uses pyro phas to interact with all those providers and it",
    "start": "1124679",
    "end": "1131039"
  },
  {
    "text": "sends all the results to n forj for easy visualization and querying but it could be easily sended to any other database",
    "start": "1131039",
    "end": "1137720"
  },
  {
    "text": "uh if you want to integrate for with a SIM for example and I'm going to upload it to our GitHub uh after the",
    "start": "1137720",
    "end": "1144559"
  },
  {
    "text": "stock so um with this we can actually move on to attack",
    "start": "1144559",
    "end": "1150679"
  },
  {
    "text": "detection first let's start with PSX because I really like PSX um PSX is both",
    "start": "1154480",
    "end": "1161320"
  },
  {
    "text": "a general ATT Tac technique name and a this internal tools that gave it its name how it works is it basically copies",
    "start": "1161320",
    "end": "1167600"
  },
  {
    "text": "a binary for a service to the remote machines admin share and then communicates with the service manager uh",
    "start": "1167600",
    "end": "1174159"
  },
  {
    "text": "using RPC the msmr interface to run a service from that binary H to sorry to",
    "start": "1174159",
    "end": "1180440"
  },
  {
    "text": "create a service to that for that binary and then run it therefore achieving remote code execution so if we go back",
    "start": "1180440",
    "end": "1187280"
  },
  {
    "text": "if we go to our demo environment um we have here a domain controller which are",
    "start": "1187280",
    "end": "1192640"
  },
  {
    "text": "which will run our RPC ability Solution on and then we'll also have our victim",
    "start": "1192640",
    "end": "1200080"
  },
  {
    "text": "uh now we can just run PS exac and there's nothing complicated here it just",
    "start": "1200080",
    "end": "1205120"
  },
  {
    "text": "authenticate connect communicates with the RPC and then tell tells it to R to launch a message box so behind the",
    "start": "1205120",
    "end": "1211640"
  },
  {
    "text": "scenes it's going to connect to the machine H copy the binary and then communicate with the service manager to",
    "start": "1211640",
    "end": "1218600"
  },
  {
    "text": "launch that binary and we can see here that our hack worked and we have our message box uh and we also detected a",
    "start": "1218600",
    "end": "1226440"
  },
  {
    "text": "new source which is hopefully a bit more um similar to what attackers will do IRL",
    "start": "1226440",
    "end": "1233640"
  },
  {
    "text": "so there's no RPC visibility on my leptop which did the attack um so if we move on to our",
    "start": "1233640",
    "end": "1240480"
  },
  {
    "text": "database which is what is actually interesting and one Runner uh query we",
    "start": "1240480",
    "end": "1246440"
  },
  {
    "text": "can see that actually there's a lot of traffic uh going on over RPC from just",
    "start": "1246440",
    "end": "1251760"
  },
  {
    "text": "that sorry single command of bsx so we have a lot of stuff here from the SCM",
    "start": "1251760",
    "end": "1258159"
  },
  {
    "text": "our interface and then also some log on information that is going on to the domain controller sorry you can't see it",
    "start": "1258159",
    "end": "1263840"
  },
  {
    "text": "here um we want to focus on the service manager so we can limit our query to",
    "start": "1263840",
    "end": "1269880"
  },
  {
    "text": "that interface either by name or by its ID uid and but we also have a lot of",
    "start": "1269880",
    "end": "1276799"
  },
  {
    "text": "traffic here and how can we in a normal operation how can we distinguish between",
    "start": "1276799",
    "end": "1281880"
  },
  {
    "text": "something that is okay and something that is not okay sorry something that is not okay we can just limit our query to",
    "start": "1281880",
    "end": "1288520"
  },
  {
    "text": "um create service and then we'll have a single detection which is what we want",
    "start": "1288520",
    "end": "1294600"
  },
  {
    "text": "and the reason I want to focus on specifically our create is to reduce the",
    "start": "1294600",
    "end": "1299880"
  },
  {
    "text": "rate of false positives um in normal Network environments and this is something that I discovered when I was threat hunting",
    "start": "1299880",
    "end": "1306400"
  },
  {
    "text": "because I tried to detect PSX without RPC visibility um there are watch doogs",
    "start": "1306400",
    "end": "1311679"
  },
  {
    "text": "and monitoring services that well monitor services and it's very uh common",
    "start": "1311679",
    "end": "1317880"
  },
  {
    "text": "for for them to actually communicate with the service manager themselves to get the status about the uh to get sorry",
    "start": "1317880",
    "end": "1325120"
  },
  {
    "text": "information about the status of services and launch them if if necessary so it's a lot more common to see uh query",
    "start": "1325120",
    "end": "1331760"
  },
  {
    "text": "service info or um r or run service versus versus create service that's why",
    "start": "1331760",
    "end": "1338279"
  },
  {
    "text": "I want to focus our detection on that to reduce the rate of false positives because create a new service creation is",
    "start": "1338279",
    "end": "1344720"
  },
  {
    "text": "a lot more uh a lot less common sorry and we can do the same technique to",
    "start": "1344720",
    "end": "1350520"
  },
  {
    "text": "other attacks as well so if you take a look at DC sync which is a credential",
    "start": "1350520",
    "end": "1355799"
  },
  {
    "text": "dumping attack where you connect to a domain controller pretending to be a domain controller and you ask to",
    "start": "1355799",
    "end": "1361159"
  },
  {
    "text": "replicate the credential database it uses the the directory replication RPC interface and specifically a function",
    "start": "1361159",
    "end": "1367600"
  },
  {
    "text": "called DRS get NC changes now on normal operations or",
    "start": "1367600",
    "end": "1373120"
  },
  {
    "text": "sorry any networks you'll have a lot of traffic going on to domain controller even on the directed application service",
    "start": "1373120",
    "end": "1380400"
  },
  {
    "text": "but get n changes is a lot more rare and should only also happen between domain controllers",
    "start": "1380400",
    "end": "1386919"
  },
  {
    "text": "basically therefore if we limit our this uh query to just that function we should",
    "start": "1386919",
    "end": "1393400"
  },
  {
    "text": "have a much better detection method and move moving on we have ppam",
    "start": "1393400",
    "end": "1398679"
  },
  {
    "text": "which is an authentication cerion attack basically you communicate with the encrypted file system service and tell",
    "start": "1398679",
    "end": "1406400"
  },
  {
    "text": "it to uh open a file or create it and the vulnerability was that some of the",
    "start": "1406400",
    "end": "1412640"
  },
  {
    "text": "functions in the EFS did not handle uncs correctly so if provided the UN cpf it",
    "start": "1412640",
    "end": "1418080"
  },
  {
    "text": "triggered an outbound connection SMB connection with authentication data which attackers can then relay for the",
    "start": "1418080",
    "end": "1424320"
  },
  {
    "text": "next stage of their attack so if we limit our query to just the vulnerable function which are open file raw and",
    "start": "1424320",
    "end": "1431000"
  },
  {
    "text": "encrypt file we should have some sort of detection but this wouldn't work in any environment that actively uses e f s",
    "start": "1431000",
    "end": "1438520"
  },
  {
    "text": "because everyone is open files right um so instead what we can do is because",
    "start": "1438520",
    "end": "1444679"
  },
  {
    "text": "we're already listening to SM the SMB provider with service with sorry with",
    "start": "1444679",
    "end": "1449960"
  },
  {
    "text": "file requests if we combine the detection for an outbound connection with a uncf because we have the file",
    "start": "1449960",
    "end": "1457000"
  },
  {
    "text": "name and that follows immediately after an EFS request we can limit our our",
    "start": "1457000",
    "end": "1462440"
  },
  {
    "text": "detections to something a bit more specific and reduce the rate of false positives even if EFS is used it",
    "start": "1462440",
    "end": "1468200"
  },
  {
    "text": "regularly in the network uh moving on we have the task scheduler which is very similar to PSX",
    "start": "1468200",
    "end": "1475399"
  },
  {
    "text": "so but instead of communicating with the service manager we're communicating with the task scheduler and while uh Services usually",
    "start": "1475399",
    "end": "1482760"
  },
  {
    "text": "have to they have to follow a certain uh interface for being a service uh task",
    "start": "1482760",
    "end": "1489159"
  },
  {
    "text": "has no such thing so they you can even just launch CMD directly without having",
    "start": "1489159",
    "end": "1494200"
  },
  {
    "text": "to copy a binary um so in this case we also Focus on detecting uh register task",
    "start": "1494200",
    "end": "1500840"
  },
  {
    "text": "for the same reasons we focus on create service with PSX because that should be a lot rarer than just querying task",
    "start": "1500840",
    "end": "1507520"
  },
  {
    "text": "status or launching it and lastly I want to discuss wmi",
    "start": "1507520",
    "end": "1512919"
  },
  {
    "text": "because wmi is a bit of a odd job it stands for Windows management instrumentation and it is a way for to",
    "start": "1512919",
    "end": "1519000"
  },
  {
    "text": "monitor or control some parameters of the operating system um and the reason why wmi is",
    "start": "1519000",
    "end": "1525440"
  },
  {
    "text": "weird is because it's not implemented over RPC directly instead it's implemented over dcom distributed com",
    "start": "1525440",
    "end": "1531919"
  },
  {
    "text": "which is a way for it's another form of interpress communication where you can expose class-like",
    "start": "1531919",
    "end": "1538279"
  },
  {
    "text": "objects uh and methods that way uh so we have here another layer of encapsulation",
    "start": "1538279",
    "end": "1544440"
  },
  {
    "text": "because we have wmi over dcom over RPC and we won't be able to easily tell",
    "start": "1544440",
    "end": "1550559"
  },
  {
    "text": "which operation is been requested luckily for us with wmi specifically it",
    "start": "1550559",
    "end": "1555919"
  },
  {
    "text": "actually has its own unique interface names and Y U IDs so they're a bit different from the common dcom um",
    "start": "1555919",
    "end": "1564279"
  },
  {
    "text": "interfaces and we can just distinguish in that way so what I did and it's a ristic based approach uh I took a look",
    "start": "1564279",
    "end": "1572000"
  },
  {
    "text": "into what I'm seeing with RPC visibility on a malicious request that launches a",
    "start": "1572000",
    "end": "1577120"
  },
  {
    "text": "remote process versus a more legitimate request that gets the status of processes and we can see here that we",
    "start": "1577120",
    "end": "1584559"
  },
  {
    "text": "have a difference between the Ops that are being requested and also in some of the interfaces being act accessed so if",
    "start": "1584559",
    "end": "1591640"
  },
  {
    "text": "we compare on the malicious side which is on the left we have process call create it launches a normal process and",
    "start": "1591640",
    "end": "1598279"
  },
  {
    "text": "we don't have the enumeration interfaces on the right side from the normal",
    "start": "1598279",
    "end": "1603399"
  },
  {
    "text": "quering and we also have the op up for exit method versus exit query so it's",
    "start": "1603399",
    "end": "1609159"
  },
  {
    "text": "youris built on top of ristics but it should have some give us some sort of information that we can work with uh to",
    "start": "1609159",
    "end": "1616159"
  },
  {
    "text": "somehow determine what w my request is being H made and also how malicious that",
    "start": "1616159",
    "end": "1624080"
  },
  {
    "text": "is uh which leads me to actually the end of this talk about RPC visibility not",
    "start": "1624080",
    "end": "1629640"
  },
  {
    "text": "the whole talk just this section um and it Throwbacks so we can't handle deom",
    "start": "1629640",
    "end": "1635520"
  },
  {
    "text": "that's a drawback obviously um or we can't handle deom with any certy that's more accurate and",
    "start": "1635520",
    "end": "1642840"
  },
  {
    "text": "we're also only a metad database detection because we can see into which parameters are being passed into each",
    "start": "1642840",
    "end": "1648559"
  },
  {
    "text": "operation uh so we have to have some sort of context and like a baseline of",
    "start": "1648559",
    "end": "1653679"
  },
  {
    "text": "what is going on in the network to be able to differentiate bad and good flows",
    "start": "1653679",
    "end": "1658960"
  },
  {
    "text": "but that's most thre handing technique so it's not a deal breaker in my opinion",
    "start": "1658960",
    "end": "1665679"
  },
  {
    "text": "and lastly what might be a deal breaker for some is that we don't have any way of locking with RPC visibility because",
    "start": "1665679",
    "end": "1671679"
  },
  {
    "text": "etw is only a logging event a loging mechanism we have only visibility so what can we do to actually",
    "start": "1671679",
    "end": "1679480"
  },
  {
    "text": "respond to events and have some sort of mitigations for that I'd like to introduce the RPC filters which is a",
    "start": "1679480",
    "end": "1686200"
  },
  {
    "text": "filter mechanism that is part of the Windows Firewall and it is exposed and",
    "start": "1686200",
    "end": "1691279"
  },
  {
    "text": "can be interacted with with either net sage like in the example on the screen or via W Windows API and I know people",
    "start": "1691279",
    "end": "1699120"
  },
  {
    "text": "like to dunk on Windows Vista but it's been around since then and the way we can interact with",
    "start": "1699120",
    "end": "1705279"
  },
  {
    "text": "rpcs it can actually provide us different stages of the RPC connection",
    "start": "1705279",
    "end": "1710440"
  },
  {
    "text": "to to filter on and it's represented by something called layers in the jargon of the firewall so we have",
    "start": "1710440",
    "end": "1719640"
  },
  {
    "text": "layers for different parts of the connection like connections to the actual interface is the RPC M which I",
    "start": "1719640",
    "end": "1725720"
  },
  {
    "text": "guess stands for us mode uh layer but we also have layers for the connection to the endpoint mapper or even the",
    "start": "1725720",
    "end": "1731880"
  },
  {
    "text": "registration of new end points which is pretty cool in my opinion and if we go",
    "start": "1731880",
    "end": "1737440"
  },
  {
    "text": "go back to my example from the previous previous slide you can say defined a a a",
    "start": "1737440",
    "end": "1742880"
  },
  {
    "text": "filter rule on the US mode layer so for connections to an RPC interface and the",
    "start": "1742880",
    "end": "1748519"
  },
  {
    "text": "condition is a uad which in this case is actually the uad of PS exic oh sorry of",
    "start": "1748519",
    "end": "1754679"
  },
  {
    "text": "scmr uh the service manager so this is actually an anti PS exic",
    "start": "1754679",
    "end": "1760159"
  },
  {
    "text": "rule um in terms of what we can filter on with the RPC filters uh we have all",
    "start": "1760159",
    "end": "1766120"
  },
  {
    "text": "the general r p uh firewall the connection that you can like source and",
    "start": "1766120",
    "end": "1771519"
  },
  {
    "text": "stps the end points like the port the name pipe but you also have some stuff that is more unique to RPC like the",
    "start": "1771519",
    "end": "1778559"
  },
  {
    "text": "interface uad or even the usual token that is being requested um what we don't have which",
    "start": "1778559",
    "end": "1784880"
  },
  {
    "text": "sucks is the opam op the opam isn't part of the fil that we can filter on so it",
    "start": "1784880",
    "end": "1790600"
  },
  {
    "text": "does reduce the grity that is available for the RPC filters um actually RPC filters the",
    "start": "1790600",
    "end": "1796559"
  },
  {
    "text": "first thing that we dove into as a team uh when we started with RPC and we have a full list and we",
    "start": "1796559",
    "end": "1802919"
  },
  {
    "text": "have block post about RPC filters but we also have a full list of the fields and our notes about them in our GitHub",
    "start": "1802919",
    "end": "1808399"
  },
  {
    "text": "they're also documented in msdn but without any data about",
    "start": "1808399",
    "end": "1813799"
  },
  {
    "text": "them um so what can we do with RPC I have a few strategies in mind which I I'd like to share here and they're all",
    "start": "1813799",
    "end": "1820640"
  },
  {
    "text": "based on having the visibility into what is going on with uh RPC on the network",
    "start": "1820640",
    "end": "1826240"
  },
  {
    "text": "uh so for example we can block any unused RPC interface so if we have for",
    "start": "1826240",
    "end": "1831519"
  },
  {
    "text": "example if for example scmr if no one is using uhr on the network why should we",
    "start": "1831519",
    "end": "1838279"
  },
  {
    "text": "leave it open for attackers to then utilize um we can even just create an exception maybe for any monitoring",
    "start": "1838279",
    "end": "1844679"
  },
  {
    "text": "services that we need and block the rest um but if that is too scary and might",
    "start": "1844679",
    "end": "1849919"
  },
  {
    "text": "hinder any potential Network operability we can maybe use the RPC filters as a sort of um emergency anti lateral",
    "start": "1849919",
    "end": "1857519"
  },
  {
    "text": "movement technique H button sorry so once we detect an attack via RPC filters any or any other um detection tool also",
    "start": "1857519",
    "end": "1866399"
  },
  {
    "text": "spec attack we can just somehow we need to have the ability to deploy RPC filter rules we can just deploy them all",
    "start": "1866399",
    "end": "1872720"
  },
  {
    "text": "together and just block latal movement until we resolve the issue if even that is too scary and I",
    "start": "1872720",
    "end": "1879279"
  },
  {
    "text": "agree that could be scary um maybe we can just use the RPC filters to restrict compromise users using the user token",
    "start": "1879279",
    "end": "1886720"
  },
  {
    "text": "Field in in the uh fil filter rule uh which is probably a safer approach but",
    "start": "1886720",
    "end": "1893720"
  },
  {
    "text": "again we need the ability to deploy rules immediately um and that's just what I",
    "start": "1893720",
    "end": "1899760"
  },
  {
    "text": "came up with I'm no longer doing any Active network defense I'm just a researcher so I'm sure the people in this room who are doing Network defense",
    "start": "1899760",
    "end": "1906360"
  },
  {
    "text": "on The Blue Team side um will can have a better idea of how to integrate RPC",
    "start": "1906360",
    "end": "1911519"
  },
  {
    "text": "filters and RPC visibility into their existing playbooks to have better detections",
    "start": "1911519",
    "end": "1917840"
  },
  {
    "text": "um and that's it basically uh we covered everything so let's just summarize um",
    "start": "1917840",
    "end": "1924320"
  },
  {
    "text": "the RPC ew provider we've seen how it works how it behaves we've seen howc",
    "start": "1924320",
    "end": "1930399"
  },
  {
    "text": "looks like and we have a treasure T of information at our fingertips that we can just tap into to understand what is",
    "start": "1930399",
    "end": "1936159"
  },
  {
    "text": "being requested on the network via RPC that is not usually available for us and",
    "start": "1936159",
    "end": "1941880"
  },
  {
    "text": "we can use this information to try and detect potentially malicious activities uh for lateral movement attempts uh like",
    "start": "1941880",
    "end": "1949039"
  },
  {
    "text": "we've seen with PSX scmr um dcnc and all the",
    "start": "1949039",
    "end": "1954720"
  },
  {
    "text": "rest and we can also once we detect an attack we can respond to incidents using",
    "start": "1954720",
    "end": "1959880"
  },
  {
    "text": "RPC filters which are also built into the windows uh operating system or use",
    "start": "1959880",
    "end": "1965000"
  },
  {
    "text": "them to even mitigate the risk uh in advance from beforehand",
    "start": "1965000",
    "end": "1970320"
  },
  {
    "text": "um that's it basically thank you everyone for listening uh if you have",
    "start": "1970320",
    "end": "1976039"
  },
  {
    "text": "any",
    "start": "1976039",
    "end": "1979039"
  },
  {
    "text": "thank you if there are any questions uh the mics are here um so on your last",
    "start": "1982799",
    "end": "1988360"
  },
  {
    "text": "slide you had uh one preventative controls about blocking unused RPC services and uh doing an attack a an",
    "start": "1988360",
    "end": "1995760"
  },
  {
    "text": "attack blocking based on an attack um that basically means that you would have to block and you have to have",
    "start": "1995760",
    "end": "2003000"
  },
  {
    "text": "essentially what is more or less an application layer firewall for our PC and from what I was seeing you would",
    "start": "2003000",
    "end": "2009760"
  },
  {
    "text": "have to do that hook it into the service layer rather than doing it at the network interface because some of the",
    "start": "2009760",
    "end": "2015080"
  },
  {
    "text": "stuff can be executed within the the system environment right uh I'm not sure",
    "start": "2015080",
    "end": "2020360"
  },
  {
    "text": "I followed your question Z can you rephrase it somehow um basically I'm thinking that you that in order to put",
    "start": "2020360",
    "end": "2026480"
  },
  {
    "text": "your preventative measure you'd have to hook the RPC service rather than dealing with it at the network level um yes and",
    "start": "2026480",
    "end": "2033840"
  },
  {
    "text": "no that's what actually the RPC firewall is doing which I I Rec I mentioned at the start of the slide like sorry I that",
    "start": "2033840",
    "end": "2040159"
  },
  {
    "text": "there's already th exist that was introduced a couple Vis going black at",
    "start": "2040159",
    "end": "2046279"
  },
  {
    "text": "Europe um but with RPC filters uh what I meant is that we can use it as an alal",
    "start": "2046279",
    "end": "2052320"
  },
  {
    "text": "movement button so the RPC filters you deploy them across the network on all the machines you need to have the",
    "start": "2052320",
    "end": "2057398"
  },
  {
    "text": "capability to deploy it time out to all the machines in your network and then they just work on the firewall uh level",
    "start": "2057399",
    "end": "2063398"
  },
  {
    "text": "so it's not meant to block any sort of RPC being used inside a single machine",
    "start": "2063399",
    "end": "2068919"
  },
  {
    "text": "that's not that's not the focus of of this stock we're only F we're mostly focusing on lateral movement and",
    "start": "2068919",
    "end": "2074480"
  },
  {
    "text": "propagation inside the network that's why uh we have this visibility tool and that's why we have the RPC filters as",
    "start": "2074480",
    "end": "2080760"
  },
  {
    "text": "part of the firewall all right thanks",
    "start": "2080760",
    "end": "2085118"
  },
  {
    "text": "sure okay um thank you everyone [Applause]",
    "start": "2093399",
    "end": "2101769"
  }
]