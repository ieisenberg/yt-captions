[
  {
    "text": "you're in hacking serverless runtimes profiling lambda asher and more if this is not the talk you intended to see",
    "start": "0",
    "end": "6540"
  },
  {
    "text": "please leave I'm Andrew Krug I'm a security engineer for Mozilla I primarily do cloud",
    "start": "6540",
    "end": "13500"
  },
  {
    "text": "security and Identity and Access Management and I am presenting today from Firefox nightly the best browser in",
    "start": "13500",
    "end": "19710"
  },
  {
    "text": "the world I also started an open-source project here at blackhat last year called threat response that is doing an",
    "start": "19710",
    "end": "27210"
  },
  {
    "text": "arsenal talk tomorrow so if you want to come and see me talk about less read or less purple things don't miss that I'm",
    "start": "27210",
    "end": "33960"
  },
  {
    "text": "in the the main theater over there my name is Graham Jones I'm a software",
    "start": "33960",
    "end": "39120"
  },
  {
    "text": "developer up at legit script in Portland and I mostly do data warehousing and analytics and also I've got some",
    "start": "39120",
    "end": "44760"
  },
  {
    "text": "background in lamda which we use some for some of our internal applications so you may be here wondering what exactly",
    "start": "44760",
    "end": "51629"
  },
  {
    "text": "is a server --less as a good friend of mine says when he often doesn't know what something is in a nutshell",
    "start": "51629",
    "end": "58140"
  },
  {
    "text": "serverless is your ability as a developer to write code hand that to a vendor there's some sort of sandbox",
    "start": "58140",
    "end": "64710"
  },
  {
    "text": "execution environment and then you basically only have to worry about consuming the net result of that",
    "start": "64710",
    "end": "70650"
  },
  {
    "text": "operation so these run times that are at the heart of serverless functions are",
    "start": "70650",
    "end": "76500"
  },
  {
    "text": "largely what we would consider to be ephemeral we hope that the environment",
    "start": "76500",
    "end": "81930"
  },
  {
    "text": "kind of goes away at the end of the compute and that all that's left is the output data at the end so why would you",
    "start": "81930",
    "end": "89280"
  },
  {
    "text": "consider using service saw at all over your regular brick-and-mortar systems in your data center or ec2 the advantages",
    "start": "89280",
    "end": "97320"
  },
  {
    "text": "are pretty broad the first and foremost of which is parallel parallelism just",
    "start": "97320",
    "end": "103409"
  },
  {
    "text": "basically infinite scale-out ish one of the the more compelling features doing",
    "start": "103409",
    "end": "109020"
  },
  {
    "text": "patterns like fan-out pattern is easy but there's some other tangibles like automatic event based triggers for other",
    "start": "109020",
    "end": "115140"
  },
  {
    "text": "things that might happen in the cloud there's a number of great security features h.a by default enforced",
    "start": "115140",
    "end": "121469"
  },
  {
    "text": "architecture and little to no management so if you're a startup or you're a big company you get to collapse all your",
    "start": "121469",
    "end": "127290"
  },
  {
    "text": "operations in theory so another way that I like to put that is that",
    "start": "127290",
    "end": "132900"
  },
  {
    "text": "servus compute is hope right we hope so many things about circle sena and don't",
    "start": "132900",
    "end": "138629"
  },
  {
    "text": "get me wrong I love service compute I use it for a ton of stuff in my day job but as a consumer of this I have all",
    "start": "138629",
    "end": "146190"
  },
  {
    "text": "these hopes I hope that my code executes securely I hope that other people can't",
    "start": "146190",
    "end": "151349"
  },
  {
    "text": "tamper with the execution of that code I hope that the vendor is patching the operating system running those",
    "start": "151349",
    "end": "157319"
  },
  {
    "text": "environments and I hope that that code hasn't been somehow modified in transit",
    "start": "157319",
    "end": "162569"
  },
  {
    "text": "to the sandbox bottom line I hope that this is somehow more secure than",
    "start": "162569",
    "end": "168329"
  },
  {
    "text": "actually running my own servers because I'm pretty good at running my own servers right I hope what will you learn",
    "start": "168329",
    "end": "176579"
  },
  {
    "text": "in this talk today the three takeaways that blackhat asks us to give to you hopefully you will take away how",
    "start": "176579",
    "end": "182430"
  },
  {
    "text": "different vendors implement their sandbox at a very high level we're going to talk about the isolation technology",
    "start": "182430",
    "end": "188069"
  },
  {
    "text": "or lack thereof we're to talk about attack patterns and techniques for light persistence in",
    "start": "188069",
    "end": "193620"
  },
  {
    "text": "these environments and we're going to talk about how to build your own test tools to hack the sandbox how do you do",
    "start": "193620",
    "end": "199139"
  },
  {
    "text": "a little bit of digging around and figure out how these things really work on the inside this is the quote unquote",
    "start": "199139",
    "end": "204930"
  },
  {
    "text": "hacking part hacker spirit of this talk I also like it I would like you to take",
    "start": "204930",
    "end": "211290"
  },
  {
    "text": "away whether you should embrace this technology or avoid it altogether as a",
    "start": "211290",
    "end": "216419"
  },
  {
    "text": "consumer as like kind of the bottom line what you won't learn in this talk I love",
    "start": "216419",
    "end": "221819"
  },
  {
    "text": "it when people do this you won't learn kernel level exploits because I didn't make any of those if I did I'd probably be rich and not talking at blackhat",
    "start": "221819",
    "end": "230720"
  },
  {
    "text": "container escape to the hypervisor I won't do this if I had a hypervisor",
    "start": "230720",
    "end": "235980"
  },
  {
    "text": "escape again I do own an island or something you're gonna see some Python",
    "start": "235980",
    "end": "242190"
  },
  {
    "text": "in this talk that's important I love Python you're gonna also see some node.js I love that less and you're",
    "start": "242190",
    "end": "247500"
  },
  {
    "text": "gonna see some i.m policy Docs a quick favor though most of the things that I'm",
    "start": "247500",
    "end": "253319"
  },
  {
    "text": "going to talk about are related to some initial vulnerability that was",
    "start": "253319",
    "end": "258449"
  },
  {
    "text": "introduced either through Mis configuration or a little piece of bad code and we really want to look at when",
    "start": "258449",
    "end": "263520"
  },
  {
    "text": "somebody kind of like gives you that foothold in the dough or what happens next and how bad does that get in different vendors",
    "start": "263520",
    "end": "269820"
  },
  {
    "text": "environments because bad code is bad code it doesn't mean it's necessarily the vendors fault it's just that we want",
    "start": "269820",
    "end": "275850"
  },
  {
    "text": "to know what the pivoting potential is and lateral movement potential with",
    "start": "275850",
    "end": "280889"
  },
  {
    "text": "memes like this cycling around the internet we all know that bad code does like make it into production and it",
    "start": "280889",
    "end": "286110"
  },
  {
    "text": "makes all our lives hard which is why we're here so this is where service can be dangerous right in some sets of",
    "start": "286110",
    "end": "292860"
  },
  {
    "text": "circumstances I love that one so who even sells the server list thing almost",
    "start": "292860",
    "end": "298680"
  },
  {
    "text": "everybody Amazon was kind of the first player to bring it to market but GCP Microsoft Azure they have offerings in",
    "start": "298680",
    "end": "306810"
  },
  {
    "text": "the space there's a great open project in IBM bluemix called open Wisc that I have great hope for and we looked at a",
    "start": "306810",
    "end": "314160"
  },
  {
    "text": "little sandbox as well called off Serie Web tasks so what do people even use a",
    "start": "314160",
    "end": "319500"
  },
  {
    "text": "service thing for it's relatively new probably nothing critical right so the",
    "start": "319500",
    "end": "324690"
  },
  {
    "text": "answer is is that we have this whole show morges board of apps and they really range from low risk to high risk",
    "start": "324690",
    "end": "330210"
  },
  {
    "text": "apps you have people using servlets for chatbots and on the more high risk in you have them using them for identity",
    "start": "330210",
    "end": "336600"
  },
  {
    "text": "providers and things at the very heart of our infrastructure so it's really anything and everything my boss sent me",
    "start": "336600",
    "end": "344729"
  },
  {
    "text": "this tweet while I was making this slide deck that apparently somebody has made an engine even that you can use to run",
    "start": "344729",
    "end": "350430"
  },
  {
    "text": "docker containers inside of Amazon lambda functions this was my reaction",
    "start": "350430",
    "end": "360050"
  },
  {
    "text": "why would you want to do this it seems like a really great way to totally giveaway every feature that's afforded",
    "start": "360240",
    "end": "366759"
  },
  {
    "text": "to you from a security perspective by lambda right so let's just count the layers of abstraction there it's a",
    "start": "366759",
    "end": "373120"
  },
  {
    "text": "container running in a sandbox running in a sandbox container running in a virtual machine on a computer in the",
    "start": "373120",
    "end": "380440"
  },
  {
    "text": "cloud let's count them that's one two three four five six layers of abstraction between you and the thing you actually have to protect that is so",
    "start": "380440",
    "end": "389349"
  },
  {
    "text": "different from when I first started this when I had a fleet of NetWare servers that look like that sometimes they",
    "start": "389349",
    "end": "395319"
  },
  {
    "text": "turned off and on again it was great the point is though that people will really do anything and everything with",
    "start": "395319",
    "end": "401050"
  },
  {
    "text": "technology if they can if they want to do it they'll find a way and so we need to learn more so for these sandbox",
    "start": "401050",
    "end": "408969"
  },
  {
    "text": "providers now we're going to talk about what are some of the attack surfaces that we're gonna cover in this talk and",
    "start": "408969",
    "end": "414729"
  },
  {
    "text": "the main systems that we're gonna cover is at code so when the code is at rest and at the execution time of that code",
    "start": "414729",
    "end": "421210"
  },
  {
    "text": "so this first one at code this can be if you have access to the github repo you gain some of this sort of source access",
    "start": "421210",
    "end": "427900"
  },
  {
    "text": "or it could be something like a subdomain takeover that lets you hijack the deployment pipeline just some point",
    "start": "427900",
    "end": "433569"
  },
  {
    "text": "at which you can change the actual code before it even gets deployed if you have this level of access the second step is",
    "start": "433569",
    "end": "439810"
  },
  {
    "text": "probably not as important to you because you don't need to worry about an exploit you can just put whatever you want right in there but we'll come back to this so",
    "start": "439810",
    "end": "445990"
  },
  {
    "text": "keep this one in the back of your head the second method and the one we're going to talk about most is exploits",
    "start": "445990",
    "end": "452680"
  },
  {
    "text": "that are at the run timer at the execution this can be these are all sorts of classic things things like SQL",
    "start": "452680",
    "end": "458560"
  },
  {
    "text": "injection getting able to run arbitrary code or string concatenation exploits",
    "start": "458560",
    "end": "463930"
  },
  {
    "text": "and then once this happens within the run time what are some of the pivots that you're able to do based on the",
    "start": "463930",
    "end": "469569"
  },
  {
    "text": "permissions of that serverless function so now you're saying so what right we've",
    "start": "469569",
    "end": "475000"
  },
  {
    "text": "all heard of these attack types but the difference is that the pivoting",
    "start": "475000",
    "end": "480819"
  },
  {
    "text": "potentials from these within your service system architecture can be different than what it was on your traditional server and we're primarily",
    "start": "480819",
    "end": "487899"
  },
  {
    "text": "concerned with persistence and data exfiltration because these things are really different in the sir architecture so to do this we're gonna",
    "start": "487899",
    "end": "496310"
  },
  {
    "text": "come back to some of those things that Andrew touched on about what we believe is true about serverless first sandbox",
    "start": "496310",
    "end": "502400"
  },
  {
    "text": "should be thrown away at the end of execution and this comes back to it ideally if this happened every time it",
    "start": "502400",
    "end": "509270"
  },
  {
    "text": "make persistence really hard because there would be no persistence from execution to execution this is not",
    "start": "509270",
    "end": "514580"
  },
  {
    "text": "always true and we're going to go into some of the ways that sandbox is not being thrown away can lead to further",
    "start": "514580",
    "end": "519830"
  },
  {
    "text": "exploits secondarily sandbox it should have minimum execution times and",
    "start": "519830",
    "end": "525200"
  },
  {
    "text": "although you can set these yourself down to whatever default you feel is reasonable if you don't set these",
    "start": "525200",
    "end": "531620"
  },
  {
    "text": "correctly your sandbox if it starts running someone else's code can run far",
    "start": "531620",
    "end": "537110"
  },
  {
    "text": "over up to perhaps even five minutes which is the default in some of the cloud providers and five minutes it",
    "start": "537110",
    "end": "543170"
  },
  {
    "text": "turns out when someone else's code is running on your system for five minutes you can do a lot in five minutes so",
    "start": "543170",
    "end": "550540"
  },
  {
    "text": "we're gonna cover a couple pieces of terminology for those of you who are less familiar with server lists let us touch on persistence so the first term",
    "start": "550540",
    "end": "557990"
  },
  {
    "text": "is a cold start and this is after I've set up my cyrillus function and I call it for the first time this is loading",
    "start": "557990",
    "end": "565010"
  },
  {
    "text": "all the code off disk instantiating in the container setting the environment up loading any background code that only",
    "start": "565010",
    "end": "570620"
  },
  {
    "text": "gets loaded once all those startup costs that have to go the first time and there is a performance penalty that's paid for",
    "start": "570620",
    "end": "575839"
  },
  {
    "text": "this so this is a cold start as opposed to a warm start so to get around these",
    "start": "575839",
    "end": "581300"
  },
  {
    "text": "performance issues most service providers allow a function that has recently been called when called again",
    "start": "581300",
    "end": "587180"
  },
  {
    "text": "to reuse much of that initial infrastructure potentially you could wind up with the same container there",
    "start": "587180",
    "end": "592850"
  },
  {
    "text": "could be coding your runtime that's still loaded and there could even be files on your ram disk that are still there from an entirely previous",
    "start": "592850",
    "end": "598850"
  },
  {
    "text": "execution which opens the door for many of the persistence attacks so the first",
    "start": "598850",
    "end": "605690"
  },
  {
    "text": "person to discuss these type of attacks was rich Jones he's also the creator of a serverless framework called the Zappa",
    "start": "605690",
    "end": "612260"
  },
  {
    "text": "framework he presented at CCC last winter this talk called gone in 60",
    "start": "612260",
    "end": "617270"
  },
  {
    "text": "milliseconds we cannot dive as deep as he did into AWS but if you want to go and see kind of in a worst-case scenario",
    "start": "617270",
    "end": "624470"
  },
  {
    "text": "if you blow I am missions a little more open than the defaults what can theoretically happen",
    "start": "624470",
    "end": "629950"
  },
  {
    "text": "this is a really great talk so these environments have outer and inner attack",
    "start": "629950",
    "end": "635170"
  },
  {
    "text": "surfaces right so they have ideally the hardened hardened outside and the",
    "start": "635170",
    "end": "640480"
  },
  {
    "text": "chocolaty Center so to speak and the outside is API gateway in Amazon as your",
    "start": "640480",
    "end": "647260"
  },
  {
    "text": "functions and other vendors have similar analogs to that where it's a mapping of",
    "start": "647260",
    "end": "653170"
  },
  {
    "text": "rest methods to service execution so that inner surface is really in the AWS",
    "start": "653170",
    "end": "659350"
  },
  {
    "text": "case the lambda function or an azure 'z case the web function and that's where",
    "start": "659350",
    "end": "664630"
  },
  {
    "text": "our code actually executes and if there's some human error or a lack of skills in auditing I am that's where you",
    "start": "664630",
    "end": "670480"
  },
  {
    "text": "have these potential pivots to other services because you do have the same lateral movement ability that you have",
    "start": "670480",
    "end": "675550"
  },
  {
    "text": "inside of any cloud so if you're scanning for this from the outside there are some indicators that you might be",
    "start": "675550",
    "end": "681610"
  },
  {
    "text": "hitting service functions and I'm borrowing a little bit from rich here this is directly from his talk almost",
    "start": "681610",
    "end": "688260"
  },
  {
    "text": "there are some headers that Amazon sends out like cloud front cache headers and",
    "start": "688260",
    "end": "693520"
  },
  {
    "text": "things that aren't a smoking gun really that you are talking to a lambda function but they're a good indicator",
    "start": "693520",
    "end": "699070"
  },
  {
    "text": "that you might be in the case of web tasks web tasks actually is that right",
    "start": "699070",
    "end": "704110"
  },
  {
    "text": "out in the open you definitely know that it's web tasks and azure azor just says it's is because it's Microsoft and",
    "start": "704110",
    "end": "711040"
  },
  {
    "text": "everything is just I asked probably somewhere so you really don't know that that's an azure function from the header",
    "start": "711040",
    "end": "717150"
  },
  {
    "text": "you could also just search github like anything really and there is a lot of framework frameworks that are becoming",
    "start": "717150",
    "end": "723490"
  },
  {
    "text": "increasingly popular the aptly-named serverless framework has a config file called serverless dot yml and you can",
    "start": "723490",
    "end": "729730"
  },
  {
    "text": "see it has a very high number of hits over 13,000 so we have serverless apps",
    "start": "729730",
    "end": "735940"
  },
  {
    "text": "lok located what do we do with them now in order to attack these environments we",
    "start": "735940",
    "end": "741880"
  },
  {
    "text": "really have to understand what's possible inside the containers themselves so our starting point",
    "start": "741880",
    "end": "748840"
  },
  {
    "text": "like any good attackers was to go to the vendors documentation and this is what we found",
    "start": "748840",
    "end": "755340"
  },
  {
    "text": "nobody really writes about how they construct these things the most transparent vendor is Ozzy ro",
    "start": "755340",
    "end": "761980"
  },
  {
    "text": "they actually have an open reference guide but nobody's really good about saying how they build security and",
    "start": "761980",
    "end": "769510"
  },
  {
    "text": "allocation around these environments inside of their cloud largely because it's it's probably proprietary trade",
    "start": "769510",
    "end": "774640"
  },
  {
    "text": "secret kind of information but it's just not super public and if it is it's very obscure so I'll ask you if you have a",
    "start": "774640",
    "end": "782829"
  },
  {
    "text": "problem with using a tech stack that you can't audit really how it works on the inside so we did a lot of digging around",
    "start": "782829",
    "end": "790209"
  },
  {
    "text": "we were inspired by this project by a researcher by the name of Eric Hammond",
    "start": "790209",
    "end": "795399"
  },
  {
    "text": "he wrote a tool called lam - several years ago that was more of a web shell wrapper that just ran os-level shell out",
    "start": "795399",
    "end": "803019"
  },
  {
    "text": "commands to kind of dig around the lam - runtime he published some of the very very early work around figuring out what",
    "start": "803019",
    "end": "808779"
  },
  {
    "text": "goes on inside of a lambda function so we did like some very similar stuff and we evolved that until we had 14 or so",
    "start": "808779",
    "end": "817470"
  },
  {
    "text": "core tests that we would do with these os shell out commands to figure out what",
    "start": "817470",
    "end": "823269"
  },
  {
    "text": "hardware was it running what was the kernel what Python packages were available etc etc where could we write",
    "start": "823269",
    "end": "828670"
  },
  {
    "text": "and we'll talk more about this towards the end but we have this great big rich profile now of information on these",
    "start": "828670",
    "end": "835899"
  },
  {
    "text": "environments and we looked for common things like is this an operating system or is this something totally proprietary",
    "start": "835899",
    "end": "842440"
  },
  {
    "text": "that just implements a custom version of the language runtime can we read and",
    "start": "842440",
    "end": "847990"
  },
  {
    "text": "write everywhere can we poison the code once it's in the environment can we get in set environment variables are the",
    "start": "847990",
    "end": "854079"
  },
  {
    "text": "cloud permissions too permissive too tight or just right what about internet access do I have",
    "start": "854079",
    "end": "860380"
  },
  {
    "text": "aggressed versus egress and ingress can I pop a shell on these things what even are they so this is a little bit like",
    "start": "860380",
    "end": "867519"
  },
  {
    "text": "playing operation right because you want to do this without the cloud provider revoking access to your accounts so we",
    "start": "867519",
    "end": "872800"
  },
  {
    "text": "definitely got in touch with all the cloud providers and join their bug bounty programs and all that good stuff so we didn't touch the sides but if",
    "start": "872800",
    "end": "878620"
  },
  {
    "text": "you're going to do this do notify providers we explored lambda Azure",
    "start": "878620",
    "end": "884649"
  },
  {
    "text": "functions and osteo web tasks like I mentioned so two big box vendors one small very purpose-built sandbox so",
    "start": "884649",
    "end": "892420"
  },
  {
    "text": "let's talk about Lamb first lambda was kind of first-to-market with this it's been around a while so we",
    "start": "892420",
    "end": "898150"
  },
  {
    "text": "know quite a bit about it from work that other people have done we know it's some kind of containers nobody says it's",
    "start": "898150",
    "end": "903700"
  },
  {
    "text": "necessarily docker but we know it's containers at least that it runs on a Red Hat six derivative Amazon Linux it's",
    "start": "903700",
    "end": "910960"
  },
  {
    "text": "a read-only file system code gets injected into /var run tasks it runs as",
    "start": "910960",
    "end": "916750"
  },
  {
    "text": "a non root user all great things single I am role accessible to the sandbox in",
    "start": "916750",
    "end": "921850"
  },
  {
    "text": "terms of pivoting in the cloud reverse shell is probably not possible at least nobody's done it yet that I've seen and",
    "start": "921850",
    "end": "927640"
  },
  {
    "text": "we do have Internet egress and I put in parens in some cases because you can deploy these without any access to the",
    "start": "927640",
    "end": "934720"
  },
  {
    "text": "Internet so we wanted to know if we can steal credentials from these",
    "start": "934720",
    "end": "939760"
  },
  {
    "text": "environments and when we do how bad is it where can we persist code if we do manage to get remote code execution how",
    "start": "939760",
    "end": "946810"
  },
  {
    "text": "long can we do that for is it really persistence or is it like ephemeral persistence can we get lambda to do",
    "start": "946810",
    "end": "952450"
  },
  {
    "text": "things other than execute code in the language that we prefer to use so if I say I am running Java can I execute node",
    "start": "952450",
    "end": "959860"
  },
  {
    "text": "or Python or Perl and how frequently does the OS and runtime get patch Python",
    "start": "959860",
    "end": "965350"
  },
  {
    "text": "modules node modules etc so I have some sample output here that I'll show you",
    "start": "965350",
    "end": "970660"
  },
  {
    "text": "from our profiler this is more just to illustrate for your brain what the output is so it's it's JSON structure of",
    "start": "970660",
    "end": "980200"
  },
  {
    "text": "all of these checks you can run this in your own environment will open source the code for this at the end of the day",
    "start": "980200",
    "end": "986260"
  },
  {
    "text": "but you can see we really collect quite a lot of information about each runtime and we log and store that so from this",
    "start": "986260",
    "end": "997540"
  },
  {
    "text": "profile we know that lambdas container structure looks a lot like this it's got API gateway which has an event",
    "start": "997540",
    "end": "1002730"
  },
  {
    "text": "trigger to a copy of the code that gets loaded into the container on that cold",
    "start": "1002730",
    "end": "1007800"
  },
  {
    "text": "start from the bootstrap and from there pretty much everything in the file systems read-only except for slash temp",
    "start": "1007800",
    "end": "1013470"
  },
  {
    "text": "which is mapped to a ram disk and slash temp is going to be different size depending on how much memory you've",
    "start": "1013470",
    "end": "1018810"
  },
  {
    "text": "allocated to your lambda function in addition to that you have a few credentials you have basically session",
    "start": "1018810",
    "end": "1024839"
  },
  {
    "text": "token' style credentials for the I am nothing super groundbreaking there so",
    "start": "1024839",
    "end": "1031290"
  },
  {
    "text": "what's your strategy given these limits you have very very small attack surface right so as a malware author a pen",
    "start": "1031290",
    "end": "1038699"
  },
  {
    "text": "tester you can kind of be laser-focused on how you're going to attack this environment cuz you can really only attack it one way right",
    "start": "1038700",
    "end": "1045449"
  },
  {
    "text": "your initial payload probably needs to be as small as possible because it needs to pass API gateway you need a persistent slash temp which could be",
    "start": "1045450",
    "end": "1051780"
  },
  {
    "text": "very small and then you need to assess lateral movement very fast and exfil your results to somewhere else in other",
    "start": "1051780",
    "end": "1058830"
  },
  {
    "text": "words your attack needs to be bigger on the inside there's some Doctor Who fans",
    "start": "1058830",
    "end": "1065190"
  },
  {
    "text": "in the audience Python minification helps with this so there's a great project called pieman",
    "start": "1065190",
    "end": "1071760"
  },
  {
    "text": "afire that you can use to take any set of Python code and I like to write most things in Python and you can shrink it",
    "start": "1071760",
    "end": "1079020"
  },
  {
    "text": "down and even compress it so that it's this really tiny paste able blob so I",
    "start": "1079020",
    "end": "1084870"
  },
  {
    "text": "wrote some reconnaissance code that I used in some some of the research that I did which is linked to in our white",
    "start": "1084870",
    "end": "1091350"
  },
  {
    "text": "paper where we just try and figure out what can we do in the I am role that we're in can we create cloud watch log",
    "start": "1091350",
    "end": "1097230"
  },
  {
    "text": "groups can we attach en eyes can we do a B and C in the Amazon environment so really it's kind of like brooding out",
    "start": "1097230",
    "end": "1103260"
  },
  {
    "text": "permissions by simply attempting boedo calls and then returning exceptions if we can't so what that looks like if you",
    "start": "1103260",
    "end": "1110490"
  },
  {
    "text": "take a bunch of them and you minify them is this so there's another great script",
    "start": "1110490",
    "end": "1115950"
  },
  {
    "text": "called one-liner Iser that will turn anything into Python one-liner which is also super great for making malware for",
    "start": "1115950",
    "end": "1122730"
  },
  {
    "text": "serverless environments because you can just squash it down in the most complex set of Python lambdas that you've ever",
    "start": "1122730",
    "end": "1129090"
  },
  {
    "text": "seen so we decided to be a great idea to take these techniques and then create",
    "start": "1129090",
    "end": "1137130"
  },
  {
    "text": "for you some demo apps that have some vulnerabilities in them so you can really see what an attack like this",
    "start": "1137130",
    "end": "1143820"
  },
  {
    "text": "looks like from both the ir perspective and the red team perspective so i built",
    "start": "1143820",
    "end": "1149400"
  },
  {
    "text": "a slack bot built-in service framework for lambda it takes a github webhook on",
    "start": "1149400",
    "end": "1154440"
  },
  {
    "text": "commit it notifies a slack channel that there was a commit and it has a code injection in it",
    "start": "1154440",
    "end": "1160290"
  },
  {
    "text": "through a basic string escape so the normal behavior of it looks something like this the bad behavior looks",
    "start": "1160290",
    "end": "1166170"
  },
  {
    "text": "something like this and I have a little video demo I'm not gonna do it live because you would be waiting forever for",
    "start": "1166170",
    "end": "1173160"
  },
  {
    "text": "me to paste all the tokens I need out of slack but I promise I recorded this right before the stock so it totally",
    "start": "1173160",
    "end": "1178530"
  },
  {
    "text": "works right now so you can escalate out of that and you'll see that in the video and I'll kind of speak to it here in",
    "start": "1178530",
    "end": "1184740"
  },
  {
    "text": "just a second so the attack surface though notably becomes very large with",
    "start": "1184740",
    "end": "1190440"
  },
  {
    "text": "bad I am permissions and the issue is here in lambda are not lambdas defaults",
    "start": "1190440",
    "end": "1196200"
  },
  {
    "text": "because lambdas defaults are very good the issues here are the defaults that are being introduced by popular service",
    "start": "1196200",
    "end": "1201810"
  },
  {
    "text": "frameworks a lot of these frameworks are brand new and they're just coming to maturity and they tend to blow the IM",
    "start": "1201810",
    "end": "1207780"
  },
  {
    "text": "permissions wide open to start and there's a footnote somewhere in a guide that says go back and harden this",
    "start": "1207780",
    "end": "1213300"
  },
  {
    "text": "yourself because we don't do I am permissions super well yet so this is a snippet out of the default i.m policy",
    "start": "1213300",
    "end": "1220080"
  },
  {
    "text": "for Zappa you see it has a lot of star stars in there which if you do AWS stuff you know is bad because you can interact",
    "start": "1220080",
    "end": "1227190"
  },
  {
    "text": "with a ton of resources so the IM struggle here is very very real my boss",
    "start": "1227190",
    "end": "1232980"
  },
  {
    "text": "likes to say i am is the killer feature and the killer feature so detection can",
    "start": "1232980",
    "end": "1239610"
  },
  {
    "text": "also be hard here so we have a lot of mature stuff for detecting attacks like this on prem we don't necessarily have",
    "start": "1239610",
    "end": "1245490"
  },
  {
    "text": "as many of the same kind of facilities in the cloud with regard to service you really only have cloud watch logs so one",
    "start": "1245490",
    "end": "1251370"
  },
  {
    "text": "of the pieces of advice that the AWS security team likes to give out is don't leave your DeLorean in the garage if you",
    "start": "1251370",
    "end": "1257610"
  },
  {
    "text": "want to go back in time so if you're authoring these apps build mature log pipelines into them because that's really the only way you're going to get",
    "start": "1257610",
    "end": "1264060"
  },
  {
    "text": "anomaly detection and cloud watch logs in the case of AWS is that so I have",
    "start": "1264060",
    "end": "1270630"
  },
  {
    "text": "this bad slack bot demo which I'll just go ahead and kick off here and so we're",
    "start": "1270630",
    "end": "1277710"
  },
  {
    "text": "just having a casual chat here in the threat response slack channel and I'm",
    "start": "1277710",
    "end": "1284520"
  },
  {
    "text": "working on a Austin scible feature for a feature that I call bad repo that creates this initial web hook out that",
    "start": "1284520",
    "end": "1291360"
  },
  {
    "text": "notifies slack that there's been a commit and people are lazy so you can ask it",
    "start": "1291360",
    "end": "1296870"
  },
  {
    "text": "for changelog so you can ask it for readme files and it'll just return those to the slack channels so you don't have to go to github to look at those and so",
    "start": "1296870",
    "end": "1303260"
  },
  {
    "text": "there's a code injection here and where you put the file name where if you just take a semicolon in there because of a",
    "start": "1303260",
    "end": "1310549"
  },
  {
    "text": "string concatenation vulnerability you can get arbitrary code injection into this container and it will return you",
    "start": "1310549",
    "end": "1315980"
  },
  {
    "text": "the output so here it is returning the actual change log which I put in Star",
    "start": "1315980",
    "end": "1320990"
  },
  {
    "text": "Wars ASCII content you know for amusement and that's gonna go round and",
    "start": "1320990",
    "end": "1326750"
  },
  {
    "text": "round in there for a little while I'm just validating here that the change log is actually as it's supposed to be",
    "start": "1326750",
    "end": "1332240"
  },
  {
    "text": "so this is normal behavior for the app there's the Star Wars ASCII text",
    "start": "1332240",
    "end": "1339020"
  },
  {
    "text": "there's the vulnerability itself it's an OSP open instead of a python file read",
    "start": "1339020",
    "end": "1344530"
  },
  {
    "text": "which we all know is bad but somehow they still make it in sometimes code",
    "start": "1344530",
    "end": "1349910"
  },
  {
    "text": "reviews are important so there it is a nice and large awesomesauce string escape so now we",
    "start": "1349910",
    "end": "1356600"
  },
  {
    "text": "come in here and we play replace our change log with just an LS to make sure everything's working great I get back",
    "start": "1356600",
    "end": "1364250"
  },
  {
    "text": "like LS output so I can do a more cool stuff now right you can do ID am i",
    "start": "1364250",
    "end": "1370850"
  },
  {
    "text": "running as root no I'm running in lambda which runs this sbx user super cool it's great so now I'm gonna get the",
    "start": "1370850",
    "end": "1380059"
  },
  {
    "text": "environment back which contains all the juicy stuff in terms of session token' security tokens and stuff before we get",
    "start": "1380059",
    "end": "1386630"
  },
  {
    "text": "super excited these are already dead here they are in my boat Oh Pro file and",
    "start": "1386630",
    "end": "1392840"
  },
  {
    "text": "so now that I have it in my boat Oh profile I'm interested you know can I do s3 stuff not with this profile so",
    "start": "1392840",
    "end": "1401090"
  },
  {
    "text": "because this is the default Amazon lambda sandbox so Who am I get caller",
    "start": "1401090",
    "end": "1406850"
  },
  {
    "text": "identity and you can see it returns that it's the poor webhook lambda role so",
    "start": "1406850",
    "end": "1412850"
  },
  {
    "text": "there's a great script in the AWS poem repository that we'll just go through and it will brood out what you can do in",
    "start": "1412850",
    "end": "1419390"
  },
  {
    "text": "Amazon using describe statements and this is like one of the really the only way is to figure out what permissions",
    "start": "1419390",
    "end": "1425179"
  },
  {
    "text": "you have from the outside as an the downside is this super super noisy right and it takes kind of a long time",
    "start": "1425179",
    "end": "1431409"
  },
  {
    "text": "to run but I managed to make it through a whole run with this session token'",
    "start": "1431409",
    "end": "1436620"
  },
  {
    "text": "again this particular role that I'm working with a super lockdown but this is where all the goodies would be and so",
    "start": "1436620",
    "end": "1444100"
  },
  {
    "text": "the last thing I'm going to do before I go and try something else is I'm gonna run get session token' to see if I can",
    "start": "1444100",
    "end": "1449350"
  },
  {
    "text": "shred more tokens so I can keep not working in lambda for longer and the answer is no so now I'm gonna try",
    "start": "1449350",
    "end": "1456640"
  },
  {
    "text": "running an another arbitrary Python command because if I have one Python process why not have two and apparently",
    "start": "1456640",
    "end": "1463570"
  },
  {
    "text": "I can so that's also awesome and interesting and so we know from our",
    "start": "1463570",
    "end": "1470230"
  },
  {
    "text": "profile output that lambda has boto by default so we can really do any",
    "start": "1470230",
    "end": "1475779"
  },
  {
    "text": "exploration of the AWS account that we want using boto calls and this is where that one line Python stuff really comes",
    "start": "1475779",
    "end": "1483640"
  },
  {
    "text": "into play you see here I ran get caller identity inside the sandbox using only a",
    "start": "1483640",
    "end": "1489549"
  },
  {
    "text": "one-line boto call so you can explore inside and outside the lambda sandbox",
    "start": "1489549",
    "end": "1495549"
  },
  {
    "text": "using these one-liners so what does that",
    "start": "1495549",
    "end": "1501250"
  },
  {
    "text": "look like from an ir defender perspective it looks really really weird right so if we look at the cloud watch",
    "start": "1501250",
    "end": "1507580"
  },
  {
    "text": "logs there's some things in here that you will see that are are totally stand",
    "start": "1507580",
    "end": "1512890"
  },
  {
    "text": "out as far as this is non normal behavior it's about as non normal as this right we have anomalous execution",
    "start": "1512890",
    "end": "1519970"
  },
  {
    "text": "times high error rates cloud trail high denials for the lambda role so it's as",
    "start": "1519970",
    "end": "1525880"
  },
  {
    "text": "detectable as this moon balloon from last year cloud trail also outputs",
    "start": "1525880",
    "end": "1532299"
  },
  {
    "text": "denials a lot of people don't actually know this about cloud trail that it logs successes and denies and you can",
    "start": "1532299",
    "end": "1538480"
  },
  {
    "text": "actually consume those denies in a cloud watch event pipeline and you can programmatically take access on those so",
    "start": "1538480",
    "end": "1544360"
  },
  {
    "text": "kind of the TLDR here is that it's only really as bad as the IAM policy that's attached to the function and your you",
    "start": "1544360",
    "end": "1552970"
  },
  {
    "text": "can auto IR this so your mean time to respond is about 7 to 10 minutes because you can only IR it when they Cloud trail",
    "start": "1552970",
    "end": "1560260"
  },
  {
    "text": "log rolls over - cloud watch events but 7 to 10 minutes is still probably better than a human",
    "start": "1560260",
    "end": "1566549"
  },
  {
    "text": "so now Graham's gonna dive into Azure functions so when Andrew and I started",
    "start": "1566549",
    "end": "1573490"
  },
  {
    "text": "looking into these we are both very much familiar with the AWS ecosystem and not as much with the Azure ecosystem and as",
    "start": "1573490",
    "end": "1580539"
  },
  {
    "text": "that may be the case for many of you a lot of what we wanted to dig into here was the differences in the Azure ecosystem and how the permission models",
    "start": "1580539",
    "end": "1587380"
  },
  {
    "text": "are different so for Azure shockingly it runs on Windows and then the big",
    "start": "1587380",
    "end": "1593590"
  },
  {
    "text": "difference is that it has sets of functions group within apps and so unlike lambda where a function is",
    "start": "1593590",
    "end": "1598960"
  },
  {
    "text": "basically just you know a little container that gets spun up and then spun down an app is basically a whole",
    "start": "1598960",
    "end": "1605129"
  },
  {
    "text": "deployed Windows server somewhere that's going to be running iis and has all your",
    "start": "1605129",
    "end": "1610299"
  },
  {
    "text": "functions sitting on the file system this file system is largely writable it does have Internet egress it doesn't",
    "start": "1610299",
    "end": "1616809"
  },
  {
    "text": "have a root user and then like I said earlier all the functions within the app do share the same system and the same",
    "start": "1616809",
    "end": "1623980"
  },
  {
    "text": "permissions the app root is on the D Drive and D home the C Drive where all",
    "start": "1623980",
    "end": "1629169"
  },
  {
    "text": "the system components live is immutable but the D is writable and then the code",
    "start": "1629169",
    "end": "1634240"
  },
  {
    "text": "is injected into the site dub-dub-dub root and then the function name and we also have some secrets stored on the",
    "start": "1634240",
    "end": "1640570"
  },
  {
    "text": "drive that we'll get to later and they are encrypted but with some shared keys so the reason that you would group",
    "start": "1640570",
    "end": "1646840"
  },
  {
    "text": "functions within an app before I go into the problems with that is that in terms of a metrics or resource management",
    "start": "1646840",
    "end": "1652299"
  },
  {
    "text": "perspective apps and APIs is one group of resources so if you want to manage a",
    "start": "1652299",
    "end": "1659500"
  },
  {
    "text": "set of things as one group a lot of times it can make sense from that perspective to put it in an app so we",
    "start": "1659500",
    "end": "1666309"
  },
  {
    "text": "wanted to know the same general questions as lambda but instead of pivots through I am we wanted to know",
    "start": "1666309",
    "end": "1672850"
  },
  {
    "text": "what one function can do to another that are within the same app and so before we",
    "start": "1672850",
    "end": "1677950"
  },
  {
    "text": "dive into that just a couple other tidbits we didn't have WMI access and if you call get event log list you can see",
    "start": "1677950",
    "end": "1684940"
  },
  {
    "text": "the list of logs but it's very tantalizing because you can't actually get any of the events so it is moderately locked down from these",
    "start": "1684940",
    "end": "1691059"
  },
  {
    "text": "functions for digging around we start the same profiler system but many of the",
    "start": "1691059",
    "end": "1696409"
  },
  {
    "text": "same profiler components didn't work because they were POSIX specific fortunately because it's a less",
    "start": "1696409",
    "end": "1701570"
  },
  {
    "text": "ephemeral system there's actually just this Windows machine running it means that it's easier to work with for",
    "start": "1701570",
    "end": "1707059"
  },
  {
    "text": "digging around you don't have to go in and script all these Python shell calls there's a project kudo UI that actually",
    "start": "1707059",
    "end": "1713899"
  },
  {
    "text": "gives you command access you can also use powershell for anyone who is a PowerShell fan and you can just wander",
    "start": "1713899",
    "end": "1719629"
  },
  {
    "text": "around the system poke around see what you can write to see what you can't and it did make investigating around initially much",
    "start": "1719629",
    "end": "1725659"
  },
  {
    "text": "easier so for the vulnerable app here",
    "start": "1725659",
    "end": "1730759"
  },
  {
    "text": "I'm going to show you what's really possible if you manage to break open one function within an app and what it can",
    "start": "1730759",
    "end": "1736909"
  },
  {
    "text": "do for the other function so the concept is going to be that we have a credit card batcher the idea being that you use",
    "start": "1736909",
    "end": "1743179"
  },
  {
    "text": "your credit card multiple times it sums it up and then it bills you once at the end of the month to save on credit card charges all these functions for this",
    "start": "1743179",
    "end": "1750649"
  },
  {
    "text": "whole app ecosystem are going to be in one application so the exploit that we're going to use",
    "start": "1750649",
    "end": "1756799"
  },
  {
    "text": "is it's all in node and so we pass some JSON to it that gets eval and we're",
    "start": "1756799",
    "end": "1762139"
  },
  {
    "text": "going to use the fact that in node you get passed a context object originally",
    "start": "1762139",
    "end": "1767179"
  },
  {
    "text": "with a callback to say when you're done because of the node callback structure what happens instead in this arbitrary",
    "start": "1767179",
    "end": "1775099"
  },
  {
    "text": "code execution is that you can trigger that done early and thus return whatever",
    "start": "1775099",
    "end": "1781399"
  },
  {
    "text": "data you want and not have to worry about exfiltrating your data all the way through the rest of the control flow of the program this is a indicator of",
    "start": "1781399",
    "end": "1789559"
  },
  {
    "text": "compromise in the logging though logs are still important as you can see that you have this error here we're done has",
    "start": "1789559",
    "end": "1795950"
  },
  {
    "text": "already been called and this means that you called done as part of your exploit",
    "start": "1795950",
    "end": "1802099"
  },
  {
    "text": "the program kept running in the background and then it reached its intended end and called done again so",
    "start": "1802099",
    "end": "1807289"
  },
  {
    "text": "this is a sign that something's wrong with your control flow whether by your doing or maybe someone else is doing so",
    "start": "1807289",
    "end": "1814549"
  },
  {
    "text": "this is the basic layout of the application first we're going to show the intended use of the API then we're",
    "start": "1814549",
    "end": "1819619"
  },
  {
    "text": "going to demonstrate how the vulnerability of one function we can change the API keys for other functions",
    "start": "1819619",
    "end": "1826070"
  },
  {
    "text": "giving us access to we can change the ways that other functions are triggered bringing",
    "start": "1826070",
    "end": "1831440"
  },
  {
    "text": "functions that were not previously accessible via API to then being able to be called through API endpoints and we",
    "start": "1831440",
    "end": "1837920"
  },
  {
    "text": "can even change the source code of other functions within the same app so I have",
    "start": "1837920",
    "end": "1843440"
  },
  {
    "text": "a series of a schema demos here so this",
    "start": "1843440",
    "end": "1851060"
  },
  {
    "text": "first one is just going to be the basic use of the app so it's going to be",
    "start": "1851060",
    "end": "1856910"
  },
  {
    "text": "through curl basically in everything I'm going to have a JSON file which is going to be the code the contents of my post I",
    "start": "1856910",
    "end": "1864770"
  },
  {
    "text": "have a config file which is just there so that we don't spam up with the URL and my API key and has some headers so",
    "start": "1864770",
    "end": "1873320"
  },
  {
    "text": "you can see with this initial one I do my curl I send in the right data I use",
    "start": "1873320",
    "end": "1878930"
  },
  {
    "text": "my credentials and then I get back the charges that I've made on my credit card pretty straightforward for the second",
    "start": "1878930",
    "end": "1887540"
  },
  {
    "text": "piece I'm gonna show how with this print return JSON so this is this is not some",
    "start": "1887540",
    "end": "1894860"
  },
  {
    "text": "JSON but this is actually JavaScript that then gets evaluated so this is a pretty contrived vulnerability but",
    "start": "1894860",
    "end": "1901130"
  },
  {
    "text": "sometimes the node vulner drun time has vulnerabilities that just happened recently there's a talk on JSON parser",
    "start": "1901130",
    "end": "1907550"
  },
  {
    "text": "vulnerabilities here could be all sorts of things so with this arbitrary JavaScript that",
    "start": "1907550",
    "end": "1912620"
  },
  {
    "text": "we have at the beginning you can see we're able to populate the context object with whatever we want to return",
    "start": "1912620",
    "end": "1918020"
  },
  {
    "text": "and call context done and then the rest of the program just gets ignored and we get our custom text returned here and",
    "start": "1918020",
    "end": "1928990"
  },
  {
    "text": "then this is also going to be generating one of those warning log statements that I touched on earlier so after that we've",
    "start": "1928990",
    "end": "1935060"
  },
  {
    "text": "shown that our vulnerability works we can proceed to list functions and list functions is a very similar thing it",
    "start": "1935060",
    "end": "1942140"
  },
  {
    "text": "turns out that these files here are all metadata for the functions showing how they're going to be called what some",
    "start": "1942140",
    "end": "1948620"
  },
  {
    "text": "other attributes are and so if we're basically just doing an LS on the file system and we can see all sorts of",
    "start": "1948620",
    "end": "1954470"
  },
  {
    "text": "things here so public vol here is what we're calling into but there are some other things that might be interesting",
    "start": "1954470",
    "end": "1959990"
  },
  {
    "text": "told you probably has a lot of information that's interesting and then building",
    "start": "1959990",
    "end": "1965049"
  },
  {
    "text": "sounds promising so we'll get to that eventually we'll try total no auth first so we do our",
    "start": "1965049",
    "end": "1971090"
  },
  {
    "text": "curl send in no data and we try to hit that endpoint and we get nothing back this is empty this is because total no",
    "start": "1971090",
    "end": "1978289"
  },
  {
    "text": "auth uses a different API key because even within the same app you can set different API keys required for each",
    "start": "1978289",
    "end": "1984740"
  },
  {
    "text": "function however that doesn't need to stop us because these keys are all",
    "start": "1984740",
    "end": "1990230"
  },
  {
    "text": "stored encrypted on disk but they're all encrypted against the same key from function to function so I can actually",
    "start": "1990230",
    "end": "1995929"
  },
  {
    "text": "in this snippet of JavaScript just take my key and copy it the key that I have",
    "start": "1995929",
    "end": "2003369"
  },
  {
    "text": "for the function I've already accessed and copy it over the file for the one that we don't have access to so we call",
    "start": "2003369",
    "end": "2010690"
  },
  {
    "text": "this curl that works successfully and then using the exact same curl statement",
    "start": "2010690",
    "end": "2016179"
  },
  {
    "text": "as before I'm able to call it and then I see all these card IDs for everyone I",
    "start": "2016179",
    "end": "2021820"
  },
  {
    "text": "now have access to this function so",
    "start": "2021820",
    "end": "2028619"
  },
  {
    "text": "that's great getting to see all sorts of things but now we want to get at some stuff that really wasn't accessible via",
    "start": "2028619",
    "end": "2035230"
  },
  {
    "text": "the API at all not for anyone so we're gonna see how we go about digging into billing so the billing info here at this",
    "start": "2035230",
    "end": "2042879"
  },
  {
    "text": "first snippet you can see we're just reading the file this function JSON file",
    "start": "2042879",
    "end": "2049740"
  },
  {
    "text": "which is similar to what we listed earlier when we said what are the list of functions within this application and",
    "start": "2049740",
    "end": "2055329"
  },
  {
    "text": "for those of you who are familiar with cron you can see that this JSON contains a cron line here's our monthly schedule",
    "start": "2055329",
    "end": "2062470"
  },
  {
    "text": "and so that's it's a monthly billing function it'll just run at the beginning of every month which is pretty",
    "start": "2062470",
    "end": "2068710"
  },
  {
    "text": "reasonable it's like what we'd expect but since we want to change billing and we don't want to wait till the end of",
    "start": "2068710",
    "end": "2074108"
  },
  {
    "text": "the month to see if our exploit worked or see if they've deployed sense or any number of things that could happen we",
    "start": "2074109",
    "end": "2079720"
  },
  {
    "text": "want to change it to be able to be called through the API and so just like we could change the permissions we can",
    "start": "2079720",
    "end": "2085569"
  },
  {
    "text": "actually with this next snippet right",
    "start": "2085569",
    "end": "2091800"
  },
  {
    "text": "take our configuration file for our vulnerable endpoint that we're writing",
    "start": "2091800",
    "end": "2097620"
  },
  {
    "text": "to that says hook this up to the HTTP endpoint take a post request so on and so forth and just copy that over the",
    "start": "2097620",
    "end": "2104310"
  },
  {
    "text": "billing thus changing the billing for being activated by a cron monthly to being activated whenever we decide to",
    "start": "2104310",
    "end": "2109710"
  },
  {
    "text": "hit the API endpoint so you can see in this next snippet we change the billing to be an API endpoint then we do the",
    "start": "2109710",
    "end": "2116490"
  },
  {
    "text": "same operation we did earlier where we give it our known API key and then you can see we can post a billing and so",
    "start": "2116490",
    "end": "2124050"
  },
  {
    "text": "this gives us the summed up prices for our card will be billed 30 dollars and 98 cents and then someone else's card so",
    "start": "2124050",
    "end": "2133140"
  },
  {
    "text": "that's great now we know how much we're gonna be billed but we don't really want",
    "start": "2133140",
    "end": "2138300"
  },
  {
    "text": "to be billed at all and so we can even look at the source of other files we can",
    "start": "2138300",
    "end": "2144480"
  },
  {
    "text": "start by just traversing filesystem going into that directory and dumping",
    "start": "2144480",
    "end": "2149880"
  },
  {
    "text": "that source out and so at this point not only can we go on to our next exploit",
    "start": "2149880",
    "end": "2156000"
  },
  {
    "text": "but also you can see that in here there are some database credentials because",
    "start": "2156000",
    "end": "2161160"
  },
  {
    "text": "they didn't use an environment for there's a server endpoint it wasn't parameterised out all sorts of",
    "start": "2161160",
    "end": "2166680"
  },
  {
    "text": "juicy things that are in source code that you might think was never intended to be publicly accessed so after we see",
    "start": "2166680",
    "end": "2173070"
  },
  {
    "text": "the source we can find the portion in it where the charges are summed up and then",
    "start": "2173070",
    "end": "2179270"
  },
  {
    "text": "actually with this next snippet we're just gonna do a regex replace and say go",
    "start": "2179270",
    "end": "2185910"
  },
  {
    "text": "through this file whenever we sum up the all the credit-card numbers instead take",
    "start": "2185910",
    "end": "2192780"
  },
  {
    "text": "our charge our number and just set it to one and so we have full access to the",
    "start": "2192780",
    "end": "2198690"
  },
  {
    "text": "filesystem we can just write this file in so we curl this in to patch the billing code and that's done and then",
    "start": "2198690",
    "end": "2206160"
  },
  {
    "text": "you can see when we call the billing code again we only have one dollar on our credit card so just the",
    "start": "2206160",
    "end": "2212460"
  },
  {
    "text": "vulnerability in this one function let us change the source code the access type and access key of all the other",
    "start": "2212460",
    "end": "2218910"
  },
  {
    "text": "functions within this app so having separate API keys is great but",
    "start": "2218910",
    "end": "2227630"
  },
  {
    "text": "it clearly didn't prevent this kind of scenario you need to be aware that if someone does gain access to one function",
    "start": "2227630",
    "end": "2232970"
  },
  {
    "text": "within your application you have access to all of the functions essentially and be aware the choices that you're making",
    "start": "2232970",
    "end": "2238430"
  },
  {
    "text": "by putting these functions within the same application next we're gonna talk",
    "start": "2238430",
    "end": "2248450"
  },
  {
    "text": "on web tasks provides auth0 the smallest provider that we covered web tasks is",
    "start": "2248450",
    "end": "2254300"
  },
  {
    "text": "open source we love open source this is great they've even got their github here they run docker containers on core OS",
    "start": "2254300",
    "end": "2261339"
  },
  {
    "text": "they allegedly run nodejs only which is unlike many of the other providers where",
    "start": "2261339",
    "end": "2267320"
  },
  {
    "text": "you have Python or PowerShell or Java or all sorts of other things they have no restriction on egress and people use",
    "start": "2267320",
    "end": "2274520"
  },
  {
    "text": "them for all sorts of things including the osteo rule engine and you can have a",
    "start": "2274520",
    "end": "2279619"
  },
  {
    "text": "public tenant out in the cloud or depending on your plan with them you can have a private tenancy - so there are",
    "start": "2279619",
    "end": "2285260"
  },
  {
    "text": "different options for how this can be hosted so at first when we discovered this we thought well it's no js' only",
    "start": "2285260",
    "end": "2292280"
  },
  {
    "text": "all our profilers written in Python we don't want to have to do the whole thing again so we were sad right it was sad",
    "start": "2292280",
    "end": "2300530"
  },
  {
    "text": "but we dug around a little and we found that by requiring child process and calling exec you can basically shell out",
    "start": "2300530",
    "end": "2307490"
  },
  {
    "text": "and run shell commands so a friend of ours wrote this cool little web shell",
    "start": "2307490",
    "end": "2313210"
  },
  {
    "text": "which might be hard to see but basically it just lets you put in arbitrary commands you can see here's an LS and",
    "start": "2313210",
    "end": "2319780"
  },
  {
    "text": "you get the output of the LS you get some file system dumps right here so this is great for us because we didn't",
    "start": "2319780",
    "end": "2326180"
  },
  {
    "text": "have to write any node J s anymore because if you shell out and call Python",
    "start": "2326180",
    "end": "2332030"
  },
  {
    "text": "you can see that Python 279 is also on those boxes so we got to explore around",
    "start": "2332030",
    "end": "2339440"
  },
  {
    "text": "a little run our profiler and we even found some other cool stuff like back-channel dot sock which we'll touch",
    "start": "2339440",
    "end": "2345740"
  },
  {
    "text": "on a little later so we have this forked process demo which is going to be live",
    "start": "2345740",
    "end": "2352430"
  },
  {
    "text": "and it's worked two times out of three so basically what we're gonna do is",
    "start": "2352430",
    "end": "2360160"
  },
  {
    "text": "we're gonna open this first link and this is going to have we're so we're",
    "start": "2360160",
    "end": "2365710"
  },
  {
    "text": "running Python we shelled out and just called Python with no arguments so it's waiting for input from standard in and this is running now and what we're going",
    "start": "2365710",
    "end": "2373390"
  },
  {
    "text": "to demonstrate is by opening up another link and running PS aux we can actually",
    "start": "2373390",
    "end": "2379660"
  },
  {
    "text": "demonstrate that we hit the same container and you can see here our",
    "start": "2379660",
    "end": "2387970"
  },
  {
    "text": "Python is running so with these two entirely separate ephemeral containers",
    "start": "2387970",
    "end": "2393369"
  },
  {
    "text": "we're actually hitting the same container and have overlap between the functionality so in off cero we learned",
    "start": "2393369",
    "end": "2402820"
  },
  {
    "text": "that fork processes do hang the container which is what's allowing us to do this demonstration and hit the same container multiple times back channel",
    "start": "2402820",
    "end": "2409839"
  },
  {
    "text": "dot sock is not anything too crazy it's a socket that hits a rest endpoint which is probably for credential exchanges you",
    "start": "2409839",
    "end": "2416290"
  },
  {
    "text": "can't escape the sandbox to the container as demonstrated by all our ability to call Python or shell commands",
    "start": "2416290",
    "end": "2422619"
  },
  {
    "text": "or whatever else is on that Linux installation and the sandbox system is Debian based with a little anomaly",
    "start": "2422619",
    "end": "2427930"
  },
  {
    "text": "detection and some extra monitoring thrown in so the last thing that I want",
    "start": "2427930",
    "end": "2433990"
  },
  {
    "text": "to talk about is something that's not quite done so we have three things to give you today two things that are open",
    "start": "2433990",
    "end": "2439720"
  },
  {
    "text": "source available at the end of this talk the first of which is the serverless profiling engine that we wrote to do",
    "start": "2439720",
    "end": "2444940"
  },
  {
    "text": "this it works in any POSIX environment those vulnerable apps are gonna be",
    "start": "2444940",
    "end": "2450190"
  },
  {
    "text": "available today so if you want to take those home and deploy those in Azure AWS and poke at them you totally can for",
    "start": "2450190",
    "end": "2455589"
  },
  {
    "text": "anomaly detection the the serverless sandbox profiler serverless showdown",
    "start": "2455589",
    "end": "2464109"
  },
  {
    "text": "does everything that our profiler does it just gathers that for you in the form of an api that collects that data in",
    "start": "2464109",
    "end": "2470920"
  },
  {
    "text": "dynamo database and then allows you to score that on a security scorecard using a rule engine so this is really",
    "start": "2470920",
    "end": "2478329"
  },
  {
    "text": "important because it allows us as consumers to take any vendor and stick a",
    "start": "2478329",
    "end": "2483540"
  },
  {
    "text": "little bit of code in their code sandbox and say let it tell you when the",
    "start": "2483540",
    "end": "2488859"
  },
  {
    "text": "environment changes let it tell you how often they patch it and it really allows us to keep the vendors honest about",
    "start": "2488859",
    "end": "2495609"
  },
  {
    "text": "what's going on inside these sand boxes and so this is an example of what a",
    "start": "2495609",
    "end": "2500799"
  },
  {
    "text": "scorecard would look like at Mozilla we love observatories we have the tls observatory web observatory and so I",
    "start": "2500799",
    "end": "2506650"
  },
  {
    "text": "made this in this period of that I'm calling it serverless observatory the code for it is available today and it",
    "start": "2506650",
    "end": "2512410"
  },
  {
    "text": "will be available later this year as a SAS offering totally free you can sign up for it on our mailing list at threat",
    "start": "2512410",
    "end": "2519339"
  },
  {
    "text": "response cloud this is the final slide that really tells this story about how",
    "start": "2519339",
    "end": "2525339"
  },
  {
    "text": "all these security features stack up you can see that a lot of the vendors have really similar security features none of",
    "start": "2525339",
    "end": "2531579"
  },
  {
    "text": "them restrict language that's executing most of them do have read-only file",
    "start": "2531579",
    "end": "2536589"
  },
  {
    "text": "systems to some degree in some places all of them patch frequently none of them have immutable environment",
    "start": "2536589",
    "end": "2542079"
  },
  {
    "text": "variables etc you can read more about this in the white paper if we could ask the vendors for something what would it",
    "start": "2542079",
    "end": "2547420"
  },
  {
    "text": "be out of all this what would we ask the vendor space we would ask them for any",
    "start": "2547420",
    "end": "2552700"
  },
  {
    "text": "control that requires out of sandbox levels of access right so we can all think of some additional controls that",
    "start": "2552700",
    "end": "2558849"
  },
  {
    "text": "we might like so we might like the ability to do native code signing and code signing validation I want something",
    "start": "2558849",
    "end": "2565809"
  },
  {
    "text": "killed if it's not in - in signed right I want a mutable environment VARs or a config store that guarantees",
    "start": "2565809",
    "end": "2571599"
  },
  {
    "text": "immutability I want the ability to choose cold-start in favor of security",
    "start": "2571599",
    "end": "2576789"
  },
  {
    "text": "instead of performance I want the ability to kill any process that's not in the language the runtime specifies",
    "start": "2576789",
    "end": "2583660"
  },
  {
    "text": "wouldn't that be cool and I want more transparency in the patch cycle and the so-called trade secrets because we all",
    "start": "2583660",
    "end": "2589660"
  },
  {
    "text": "know that transparency is almost always better for security so should you use",
    "start": "2589660",
    "end": "2594789"
  },
  {
    "text": "service probably it's still probably better than most of the stuff that",
    "start": "2594789",
    "end": "2599950"
  },
  {
    "text": "people will do on-premise but really you have to put that against the risk profiles for your application the",
    "start": "2599950",
    "end": "2606039"
  },
  {
    "text": "security advantages are actually quite good and there's not a much attack surface they're event-driven security",
    "start": "2606039",
    "end": "2612640"
  },
  {
    "text": "gives you a lot of additional anomaly detection and auto IR capability specifically with some of these",
    "start": "2612640",
    "end": "2617829"
  },
  {
    "text": "facilities in Amazon that I absolutely love and I'll leave you with one quote then I'll take questions and this quote",
    "start": "2617829",
    "end": "2624340"
  },
  {
    "text": "I stole from a Microsoft presentation modern security does not resemble high walls or strong doors but rather bells",
    "start": "2624340",
    "end": "2631480"
  },
  {
    "text": "on strings that ring each time an attacker moves forward and I think that's a really great quote that",
    "start": "2631480",
    "end": "2637840"
  },
  {
    "text": "represents modern OPSEC so thanks to all these people who contribute to our",
    "start": "2637840",
    "end": "2643869"
  },
  {
    "text": "awesome project last year we had four contributors and now we have 16 so that's our shout out to those folks",
    "start": "2643869",
    "end": "2649660"
  },
  {
    "text": "thanks to the vendors for being super awesome in working with us and giving us access to the team's without you know a",
    "start": "2649660",
    "end": "2656619"
  },
  {
    "text": "pile of paperwork and I'll take questions now [Applause]",
    "start": "2656619",
    "end": "2671400"
  },
  {
    "text": "any questions lovely thanks for coming",
    "start": "2671400",
    "end": "2679540"
  },
  {
    "text": "oh there is a question was this long yes on did you do any work with pre-compiled",
    "start": "2679540",
    "end": "2689380"
  },
  {
    "text": "code in Azure functions all this was all script we didn't do anything that wasn't",
    "start": "2689380",
    "end": "2697420"
  },
  {
    "text": "Python or PowerShell we had hopes to do c-sharp at the outset of the project but",
    "start": "2697420",
    "end": "2703690"
  },
  {
    "text": "our expert c-sharp developer dropped off we'd still like to we did also do that",
    "start": "2703690",
    "end": "2709900"
  },
  {
    "text": "in lambda we showed that you could upload a binary persist that in temp and then call that from your interpreter",
    "start": "2709900",
    "end": "2716380"
  },
  {
    "text": "were you able to write to host JSON or function JSON and yeah you were so",
    "start": "2716380",
    "end": "2725860"
  },
  {
    "text": "arbitrary code execution at that point yes thanks yeah we're also available",
    "start": "2725860",
    "end": "2731080"
  },
  {
    "text": "after this if anybody wants to chat quick one when you were talking about",
    "start": "2731080",
    "end": "2736870"
  },
  {
    "text": "visibility with lambda it occurred to me I don't know if this is possible but I",
    "start": "2736870",
    "end": "2742150"
  },
  {
    "text": "wonder if you looked understanding is that lambda functions run on a V PC by default and I'm wondering if you can",
    "start": "2742150",
    "end": "2748180"
  },
  {
    "text": "enable net flows within that V PC to get more visibility to what's happening so the question was can you get V PC flow",
    "start": "2748180",
    "end": "2755500"
  },
  {
    "text": "logs from the default V PC that lambda functions are associated with the answer is no for the default one that only",
    "start": "2755500",
    "end": "2761710"
  },
  {
    "text": "allows Internet egress but if you do custom V PC and you deploy an Internet gateway yes you can get V PC flow logs",
    "start": "2761710",
    "end": "2767950"
  },
  {
    "text": "and you can use your standard anomaly detection grow pipeline have you seen",
    "start": "2767950",
    "end": "2774280"
  },
  {
    "text": "these exploits in the wild or is this all stuff you've dreamed up in your evil genius laboratory so I can't really",
    "start": "2774280",
    "end": "2782380"
  },
  {
    "text": "speak to incidents that I work on but I can tell you that people are exploiting",
    "start": "2782380",
    "end": "2787840"
  },
  {
    "text": "serverless functions in the wild especially in the open source space where it's really easy to see where the",
    "start": "2787840",
    "end": "2795190"
  },
  {
    "text": "vulnerabilities are in the code so yeah it definitely does happen I don't have",
    "start": "2795190",
    "end": "2800380"
  },
  {
    "text": "any data on how frequent with all the work hello can you hear me",
    "start": "2800380",
    "end": "2806440"
  },
  {
    "text": "with all the work that you did with AWS to get all the start up cold starts warm starts all the event data and the lack",
    "start": "2806440",
    "end": "2813340"
  },
  {
    "text": "of data that you would get in transparency from the other vendors would you be able to give them feedback loops to help strengthen some of the",
    "start": "2813340",
    "end": "2819460"
  },
  {
    "text": "visibility on those the question if I had to summarize was was the net result",
    "start": "2819460",
    "end": "2825310"
  },
  {
    "text": "of the project a better conversation with these vendors about transparency does that summarize it yeah they're",
    "start": "2825310",
    "end": "2832720"
  },
  {
    "text": "they're definitely asking us at this point what we as consumers would like them to add to their products and so",
    "start": "2832720",
    "end": "2838720"
  },
  {
    "text": "we're talking about patch management feeds or risk scores for warmness on several levels right now with all the",
    "start": "2838720",
    "end": "2845920"
  },
  {
    "text": "vendors that we worked with so great thanks we were thank you",
    "start": "2845920",
    "end": "2852210"
  },
  {
    "text": "[Applause]",
    "start": "2854260",
    "end": "2860119"
  }
]