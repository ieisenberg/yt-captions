[
  {
    "start": "0",
    "end": "56000"
  },
  {
    "text": "hello everyone um sorry I might be somewhat slippy I just got up so um if there are",
    "start": "320",
    "end": "6879"
  },
  {
    "text": "any mistakes um that I make while I'm speaking please excuse",
    "start": "6879",
    "end": "12759"
  },
  {
    "text": "them so I have to give a parential advisory before I give this talk because",
    "start": "12759",
    "end": "18000"
  },
  {
    "text": "I don't want people to spend their youth on trying to find them um this is a very",
    "start": "18000",
    "end": "24439"
  },
  {
    "text": "sparse class of class of bugs um you will take a very long time",
    "start": "24439",
    "end": "31679"
  },
  {
    "text": "finding explodable variants of these at least that's my current impression however this is also research",
    "start": "31679",
    "end": "39040"
  },
  {
    "text": "in progress so it might be that some of you have beautiful ideas for how to do these things better and then this may",
    "start": "39040",
    "end": "46520"
  },
  {
    "text": "change I don't think however that the number of bugs here will increase dramatically this is not like use after",
    "start": "46520",
    "end": "53239"
  },
  {
    "text": "Freez and error that we're talking about here so let me give you an outline of",
    "start": "53239",
    "end": "58600"
  },
  {
    "start": "56000",
    "end": "56000"
  },
  {
    "text": "the talk I'll start with a motivation um then I'll talk about",
    "start": "58600",
    "end": "63840"
  },
  {
    "text": "historical bugs in lip gcpt GMP and open S lsbn um in the abstract of the talk um I",
    "start": "63840",
    "end": "72159"
  },
  {
    "text": "mentioned that I would talk about lipom Crypt or lipom maath as well I looked into that for a very long time there's",
    "start": "72159",
    "end": "79320"
  },
  {
    "text": "uh one known bug in the last 10 years and I haven't been able to find any other bugs in there that are um",
    "start": "79320",
    "end": "87520"
  },
  {
    "text": "exploitable so I have dropped that from from here um and instead replace this",
    "start": "87520",
    "end": "92920"
  },
  {
    "text": "with the G gcp which was not in the abstract but which is also widely",
    "start": "92920",
    "end": "98720"
  },
  {
    "text": "used I will talk about a recent recent as in patch in January of this year buck",
    "start": "98720",
    "end": "105320"
  },
  {
    "text": "in open SSL as a case study to motivate uh the general uh class of bugs and to",
    "start": "105320",
    "end": "111640"
  },
  {
    "text": "also um give an example of a very common Buck pattern um I have chosen this",
    "start": "111640",
    "end": "117119"
  },
  {
    "text": "particular Buck because it's recent but also uh because it is easier to understand",
    "start": "117119",
    "end": "123200"
  },
  {
    "text": "than others I will talk about property based bug hunting uh this is an expression I",
    "start": "123200",
    "end": "129479"
  },
  {
    "text": "made up myself um you'll see what it is later I wish there was a better expression for it and I will talk about",
    "start": "129479",
    "end": "136800"
  },
  {
    "text": "using verification tools to find bugs and then we'll come to the",
    "start": "136800",
    "end": "142239"
  },
  {
    "text": "conclusions so the motivation obviously is or maybe it's to break crypto the",
    "start": "142239",
    "end": "147800"
  },
  {
    "start": "143000",
    "end": "143000"
  },
  {
    "text": "other motivation could be that you want to make uh crypto libraries better and prove that they're correct at the moment",
    "start": "147800",
    "end": "154800"
  },
  {
    "text": "my motivation is to pray crypto so um what motivated me to look into this",
    "start": "154800",
    "end": "162879"
  },
  {
    "text": "was um there was a paper by um biam Kam and Shamir a couple of years ago that",
    "start": "162879",
    "end": "169480"
  },
  {
    "text": "looked into uh bug attacks so these are basically um problems in Hardware based",
    "start": "169480",
    "end": "178599"
  },
  {
    "text": "arithmetic that lead to miscalculations and um so this is a very",
    "start": "178599",
    "end": "184159"
  },
  {
    "text": "very similar issue um but the problem with this paper was that uh all the examples that are",
    "start": "184159",
    "end": "193120"
  },
  {
    "text": "given in the paper are hypothetical so the the only bug that is mentioned that is not hypothetical is int ative bug but",
    "start": "193120",
    "end": "200799"
  },
  {
    "text": "that doesn't apply to uh the the examples that they",
    "start": "200799",
    "end": "206319"
  },
  {
    "text": "give um so bug attacks are related to fault",
    "start": "206319",
    "end": "211400"
  },
  {
    "text": "attacks which are basically if you have like a hardware implementation of cryptography you can try to induce",
    "start": "211400",
    "end": "217920"
  },
  {
    "text": "faults um in the computation by um various um outside sources for instance",
    "start": "217920",
    "end": "224040"
  },
  {
    "text": "using heat or using spikes in the voltage um but bug attacks basically use",
    "start": "224040",
    "end": "231680"
  },
  {
    "text": "fault use um use input triggers to trigger faulty computations so what that",
    "start": "231680",
    "end": "237480"
  },
  {
    "text": "means is there are certain inputs for which the hardware implementation is",
    "start": "237480",
    "end": "243239"
  },
  {
    "text": "incorrect and gives incorrect output",
    "start": "243239",
    "end": "249159"
  },
  {
    "text": "so I decided to work the other way around and look at the bugs that have",
    "start": "249159",
    "end": "255920"
  },
  {
    "text": "been found and patched in big Nom libraries in the last",
    "start": "255920",
    "end": "261000"
  },
  {
    "text": "decade and see to see what you can do with them and whether they would be",
    "start": "261000",
    "end": "267479"
  },
  {
    "text": "exploitable and as I mentioned before uh the I mean I've thought about this for a",
    "start": "267479",
    "end": "273280"
  },
  {
    "text": "while but like the the B and square bug that was um basically in the advisory in",
    "start": "273280",
    "end": "280400"
  },
  {
    "text": "January this year was a trigger for me to look into that again and look into it again more",
    "start": "280400",
    "end": "286880"
  },
  {
    "text": "seriously the other thing is and this is like an open problem at the moment uh",
    "start": "286880",
    "end": "292400"
  },
  {
    "text": "bug attacks have only been investigated for the leakage of private Keys however",
    "start": "292400",
    "end": "298520"
  },
  {
    "text": "you can use both bug attacks and um bignum vulnerabilities also to create",
    "start": "298520",
    "end": "304880"
  },
  {
    "text": "signature verification bypasses and um an easy uh homework for you oh sorry and",
    "start": "304880",
    "end": "313039"
  },
  {
    "text": "an easy example for you is um look at DSA and um think about what happens if",
    "start": "313039",
    "end": "321039"
  },
  {
    "text": "the modular inverse uh routine is incorrect and it magically returns zero",
    "start": "321039",
    "end": "326360"
  },
  {
    "text": "for one of the two inputs S1 or S2",
    "start": "326360",
    "end": "331638"
  },
  {
    "text": "um in that case you have a very easy signature verification bypass and actually it is given the current state",
    "start": "331800",
    "end": "337919"
  },
  {
    "text": "of bignum implementations it's not unlikely that these bugs exist I tried looking for them but um as we'll see",
    "start": "337919",
    "end": "345400"
  },
  {
    "text": "later the tools currently are not in shape yet to prove that they do not",
    "start": "345400",
    "end": "350600"
  },
  {
    "start": "350000",
    "end": "350000"
  },
  {
    "text": "exist at least for the uh the wildely used implementations so what is a bigum",
    "start": "350600",
    "end": "357319"
  },
  {
    "text": "implementation I mean maybe you just came in here and you don't even know uh what the guy in front here is talking about so big implementations are",
    "start": "357319",
    "end": "364680"
  },
  {
    "text": "fundamental ingredients for real world asymmetric crypto I'm trying to be specific here because I mean there are",
    "start": "364680",
    "end": "372360"
  },
  {
    "text": "are um are Lattis based algorithms as well there are um signature algorithms",
    "start": "372360",
    "end": "379639"
  },
  {
    "text": "that are pation hash functions they don't need them so there there are asymmetric algorithms that do not use",
    "start": "379639",
    "end": "385639"
  },
  {
    "text": "big Nom implementations but most of the widely used crypto so RSA DSA most of",
    "start": "385639",
    "end": "393680"
  },
  {
    "text": "ecdsa um that is out there is based on um Computing with large",
    "start": "393680",
    "end": "402479"
  },
  {
    "text": "numbers so um what an implementation for computing with large",
    "start": "402479",
    "end": "409319"
  },
  {
    "text": "numbers has to provide is um operations on the integers or in rings modulo",
    "start": "409319",
    "end": "416280"
  },
  {
    "text": "integers or in Prime fields for addition multiplication um subtraction Division",
    "start": "416280",
    "end": "424120"
  },
  {
    "text": "and exponentiation and things like gcd and and others the list can go on and on",
    "start": "424120",
    "end": "430520"
  },
  {
    "text": "here so for crypto you want um to have the above um usually in either a prime",
    "start": "430520",
    "end": "437039"
  },
  {
    "text": "field or in a residue class ring so",
    "start": "437039",
    "end": "442160"
  },
  {
    "text": "sometimes um you have specialized implementations for instance for big nums of a fixed size so like special",
    "start": "442160",
    "end": "449720"
  },
  {
    "text": "implementations 4,24 bit or 248 bit or sometimes even 512 like if it's a little",
    "start": "449720",
    "end": "455599"
  },
  {
    "text": "bit old school are common then you have assembly implementations highly specialized assembly implementations so",
    "start": "455599",
    "end": "461800"
  },
  {
    "text": "you have people like they try to squeeze the last 1% out of this processor that",
    "start": "461800",
    "end": "467199"
  },
  {
    "text": "now supports avx2 um and for guarding against side Channel",
    "start": "467199",
    "end": "474560"
  },
  {
    "text": "attacks you also need um constant time implementations so these introduce",
    "start": "474560",
    "end": "480080"
  },
  {
    "text": "additional complexity um so usually like the naive way to implement things uh",
    "start": "480080",
    "end": "487080"
  },
  {
    "text": "will lead to implementations that are not constant time so that means that you have conditionals in the code that will",
    "start": "487080",
    "end": "494240"
  },
  {
    "text": "cause your code to run for instance uh with a different um timing for a routine",
    "start": "494240",
    "end": "499759"
  },
  {
    "text": "that can be used as a type Channel or the more recently people have been using um cash timing side channels or have",
    "start": "499759",
    "end": "506440"
  },
  {
    "text": "tried to evict cach lines and they have been recent attacks against um the",
    "start": "506440",
    "end": "512518"
  },
  {
    "text": "predominant crypto implementations for that but these like these mitigations",
    "start": "512519",
    "end": "519440"
  },
  {
    "text": "that you put in there make the code more complex and they introduce a more um",
    "start": "519440",
    "end": "526240"
  },
  {
    "text": "more opportunities for an attacker to um make use of bugs in the basic",
    "start": "526240",
    "end": "532320"
  },
  {
    "text": "functionality and also like in the in the basically in the the more complex algorithms",
    "start": "532320",
    "end": "540000"
  },
  {
    "start": "539000",
    "end": "539000"
  },
  {
    "text": "so what are widely used implementations so obviously op ssl's",
    "start": "540000",
    "end": "545279"
  },
  {
    "text": "bignum is probably the most widely used one then we have lip gcpt which is a",
    "start": "545279",
    "end": "550560"
  },
  {
    "text": "fork of GMP a very early Fork that is used in C CG and CS then we",
    "start": "550560",
    "end": "557959"
  },
  {
    "text": "have GMP which most people don't realize that it's a problem um if it has bugs but",
    "start": "557959",
    "end": "565560"
  },
  {
    "text": "that is exposed in a lot of So like um there are a lot of scripting languages",
    "start": "565560",
    "end": "571320"
  },
  {
    "text": "that have bindings um for GMP and people actually write like homegrown crypto",
    "start": "571320",
    "end": "577640"
  },
  {
    "text": "using those bindings and um there's lipom maath which is um used",
    "start": "577640",
    "end": "585720"
  },
  {
    "text": "in the embedded world because of its um very um permissive license so it's in",
    "start": "585720",
    "end": "592720"
  },
  {
    "text": "the public domain um so it is used by by drop bear for instance which is an S",
    "start": "592720",
    "end": "598920"
  },
  {
    "text": "server by Min TLS which is uh on a lot of embedded stuff and it's in WPA",
    "start": "598920",
    "end": "605920"
  },
  {
    "text": "supplicant um then we have embed TLS um which wasn't really on my radar",
    "start": "605920",
    "end": "612640"
  },
  {
    "text": "until I realized that it's actually polar SSL so what happened there is that um polar SL was bought by arm",
    "start": "612640",
    "end": "620800"
  },
  {
    "text": "recently and um since then um more optimized implementations for um arm",
    "start": "620800",
    "end": "627519"
  },
  {
    "text": "chip sets are going into that Library as well well then we have uh the Java the",
    "start": "627519",
    "end": "633839"
  },
  {
    "text": "canonical Java um big integer implementation that has changed a couple of times in the last um decade but it's",
    "start": "633839",
    "end": "642320"
  },
  {
    "text": "it's pretty stable now um so originally when Java was",
    "start": "642320",
    "end": "647440"
  },
  {
    "text": "written This was um like native code as well that was uh exposed through jni and",
    "start": "647440",
    "end": "653160"
  },
  {
    "text": "then they um transformed that into um a a pure Java implementation um so part of that is in",
    "start": "653160",
    "end": "659680"
  },
  {
    "text": "mutable big integer the other is in in big integer then we have closed Source implementation there is um in Microsoft",
    "start": "659680",
    "end": "667120"
  },
  {
    "text": "oros you have beep Primitives DOD if you ever try to figure out where the hell um",
    "start": "667120",
    "end": "672639"
  },
  {
    "text": "all that computation um for your um uh",
    "start": "672639",
    "end": "677720"
  },
  {
    "text": "for your is um SL handshake is going on that's where you have to look there are",
    "start": "677720",
    "end": "683920"
  },
  {
    "text": "apparently heaps of other ones um like heap of other um big num implementations but this is the the only one I found",
    "start": "683920",
    "end": "690519"
  },
  {
    "text": "that is related to crypto um that that um I care about on OSX there's lip core",
    "start": "690519",
    "end": "699839"
  },
  {
    "text": "crypto DL dip sorry and this is both on oh sorry on OSX on and iOS so this is",
    "start": "699839",
    "end": "708120"
  },
  {
    "text": "both on OSX and iOS and um that is an interesting one to",
    "start": "708120",
    "end": "714279"
  },
  {
    "text": "look at as well um very easy to read um in assembly so it's it's not really that",
    "start": "714279",
    "end": "721320"
  },
  {
    "text": "optimized um and for embeded devices there are many many others that are homegrown um and they are great they're",
    "start": "721320",
    "end": "730760"
  },
  {
    "text": "very fertile ground for finding bugs in big num implantations as",
    "start": "730760",
    "end": "736320"
  },
  {
    "text": "well okay so um let's have uh because I mentioned",
    "start": "736320",
    "end": "741519"
  },
  {
    "text": "that there exist bindings for GMP um so you'll have um the Ruby big nums are",
    "start": "741519",
    "end": "748519"
  },
  {
    "text": "basically um GMP underneath you have uh for python the P crypto package um which",
    "start": "748519",
    "end": "756560"
  },
  {
    "text": "is one of the more popular ones that binds GMP underneath and then like many",
    "start": "756560",
    "end": "762000"
  },
  {
    "text": "people like to home roll uh crypto and they use gimpy in hll the integer type is uh the",
    "start": "762000",
    "end": "769240"
  },
  {
    "text": "the the standard integer type is um integer GMP which is so you can swap out",
    "start": "769240",
    "end": "775480"
  },
  {
    "text": "the um the individual implementations in Hass but almost everyone uses um the the integer GMP there's an integer simple as",
    "start": "775480",
    "end": "782040"
  },
  {
    "text": "well which is um pure hcll from what I remember but um that this is the default",
    "start": "782040",
    "end": "787360"
  },
  {
    "text": "one and know camel the Z Earth package is um the um default for um for",
    "start": "787360",
    "end": "797240"
  },
  {
    "text": "arithmetic these days for for big arithmetic okay so let's have a look at um the CV and for",
    "start": "797240",
    "end": "805279"
  },
  {
    "start": "801000",
    "end": "801000"
  },
  {
    "text": "that we need to understand first how how to square how number numers and we have to go back to high school to um to see",
    "start": "805279",
    "end": "813839"
  },
  {
    "text": "what's what's going on there so um why do big Nom implementations have dedicated routines for um for squaring",
    "start": "813839",
    "end": "822399"
  },
  {
    "text": "instead of um just using the multiplication routine because they can do that slightly more efficient um",
    "start": "822399",
    "end": "829160"
  },
  {
    "text": "depending on the number of of Limbs in the so limbs is the number of R so limbs is if I say lymphs that's words so",
    "start": "829160",
    "end": "835399"
  },
  {
    "text": "lymphs is the the terminology that is used in bignum libraries for the individual words in a big n num so um",
    "start": "835399",
    "end": "843600"
  },
  {
    "text": "let's say we have a um big n num that just consists of of two limbs A and B so",
    "start": "843600",
    "end": "850639"
  },
  {
    "text": "a is the the high order Limb and B is the low order Limb and the word width on",
    "start": "850639",
    "end": "856680"
  },
  {
    "text": "this architecture that we're on is ndth so um if we go back to high school",
    "start": "856680",
    "end": "864279"
  },
  {
    "text": "and we just um split these into two like so we um say table we look at the high",
    "start": "864279",
    "end": "870160"
  },
  {
    "text": "order and the low order part um individually then we can um basically save one of the terms because um we can",
    "start": "870160",
    "end": "878959"
  },
  {
    "text": "square um the the higher um um limp",
    "start": "878959",
    "end": "884720"
  },
  {
    "text": "individually and we can uh we can square the lower Lim individually and then we can just um multiply a times B and shift",
    "start": "884720",
    "end": "894160"
  },
  {
    "text": "that one upwards and so we have three um",
    "start": "894160",
    "end": "900399"
  },
  {
    "text": "multiplications I mean the shifting is for free basically um compared to the multiplication we have three multiplications here instead of um",
    "start": "900399",
    "end": "909279"
  },
  {
    "text": "four um and I mean there there are many other optimizations that you can do for for big nums but this is just like we're",
    "start": "909279",
    "end": "915839"
  },
  {
    "text": "just trying to to get to the basics here and that's why why this is a a very nice bug as well so um when you look at the",
    "start": "915839",
    "end": "924759"
  },
  {
    "text": "diff like where this where they where the bug this particular bug in BN Square",
    "start": "924759",
    "end": "930399"
  },
  {
    "text": "happened um this is the um so the the the bug happens in assembly",
    "start": "930399",
    "end": "936759"
  },
  {
    "text": "implementations but before they wrote the assembly um they had a c implementation that is equivalent and I",
    "start": "936759",
    "end": "944279"
  },
  {
    "text": "probably easier to to show this with the with a c implementation here because it's the same bug so what happens is",
    "start": "944279",
    "end": "952079"
  },
  {
    "text": "like you see here it it um squares the the the high and the low um um limp and",
    "start": "952079",
    "end": "960279"
  },
  {
    "text": "this this macro is supposed to basically compute two times so the middle term of what we saw in the last slide right so",
    "start": "960279",
    "end": "967360"
  },
  {
    "text": "this um 2 * 2 the n * a * B um we have a",
    "start": "967360",
    "end": "974040"
  },
  {
    "text": "macro for that that does the multiplication and the addition to a three Lim",
    "start": "974040",
    "end": "979720"
  },
  {
    "text": "word now um maybe you can tell me where the bug is the bug is here so what",
    "start": "979720",
    "end": "987360"
  },
  {
    "text": "happens is that when they try to um uh",
    "start": "987360",
    "end": "992519"
  },
  {
    "text": "to do the um Carry propagation they do the carry propagation in the wrong way",
    "start": "992519",
    "end": "998440"
  },
  {
    "text": "and they drop the carry here basically what happens I mean you could also say that you have you have an integer",
    "start": "998440",
    "end": "1004079"
  },
  {
    "text": "overflow here um so they they have this temporary variable",
    "start": "1004079",
    "end": "1010720"
  },
  {
    "text": "that they um that they double but they just ignore that the temporary variable",
    "start": "1010720",
    "end": "1015759"
  },
  {
    "text": "might be larger than 2 the N minus one",
    "start": "1015759",
    "end": "1020839"
  },
  {
    "text": "and um this is a very subtle bug that was",
    "start": "1021600",
    "end": "1027839"
  },
  {
    "text": "present in the open SL code base for 10 years and it's the same U mistake that",
    "start": "1027839",
    "end": "1034760"
  },
  {
    "text": "was made both in the myips and in the X 8664 assembly",
    "start": "1034760",
    "end": "1041600"
  },
  {
    "text": "implementation um however the trigger probability for this so the the fact",
    "start": "1041600",
    "end": "1048160"
  },
  {
    "text": "like the the the probability that you will hit this with a random input is low",
    "start": "1048160",
    "end": "1053200"
  },
  {
    "text": "so you will only hit this with 2 to- 64 or 2 to Theus",
    "start": "1053200",
    "end": "1059039"
  },
  {
    "text": "128 for a random input right so that's the I mean you might also try to hit it",
    "start": "1059039",
    "end": "1064640"
  },
  {
    "text": "and then it's like you depending on the algorithm you can do that so open ssls impact assessment of",
    "start": "1064640",
    "end": "1072520"
  },
  {
    "start": "1069000",
    "end": "1069000"
  },
  {
    "text": "this bug the probability of this is low and most on most platforms RS a folds a",
    "start": "1072520",
    "end": "1079280"
  },
  {
    "text": "different code path and hence RSA operations are not affected at all for um platforms where you build opl",
    "start": "1079280",
    "end": "1090400"
  },
  {
    "text": "without assembly support for instance if you have mips and you build it without um um so sorry so yeah so sorry um um",
    "start": "1090400",
    "end": "1099919"
  },
  {
    "text": "you can also hit the bug if you turn off assembly support and um and are on a 64-bit platform and in",
    "start": "1099919",
    "end": "1108520"
  },
  {
    "text": "that case um their argument is that pre-existing counter measures that they have in the code base uh will thwart the",
    "start": "1108520",
    "end": "1114679"
  },
  {
    "text": "attack for RSA because they have RSA blinding and um RSA blinding means that",
    "start": "1114679",
    "end": "1119799"
  },
  {
    "text": "uh you really have like a a basically um a random number because I mean either",
    "start": "1119799",
    "end": "1125520"
  },
  {
    "text": "you can guess the the blinding Factor already and then you have a different problem or you cannot um um make the the",
    "start": "1125520",
    "end": "1133640"
  },
  {
    "text": "input such that it triggers The Bu um with a higher probability than 2 to the minus POS either your BL blinding",
    "start": "1133640",
    "end": "1139679"
  },
  {
    "text": "routine is broken or um the uh the bug um is not hitable",
    "start": "1139679",
    "end": "1147919"
  },
  {
    "text": "for you so um the third argument that they make so they go through the",
    "start": "1147919",
    "end": "1153000"
  },
  {
    "text": "different code paths that they have an openl I did the same thing um",
    "start": "1153000",
    "end": "1159000"
  },
  {
    "text": "unfortunately um they are right in most regards um static ecda they say is",
    "start": "1159000",
    "end": "1165960"
  },
  {
    "text": "theoretically affected so um in the current so in the version that was fixed opl",
    "start": "1165960",
    "end": "1171880"
  },
  {
    "text": "1.01 k um that is the version that is fixed and J is the version the previous",
    "start": "1171880",
    "end": "1177600"
  },
  {
    "text": "that had the bug still so um the argument is that",
    "start": "1177600",
    "end": "1183760"
  },
  {
    "text": "um they it's only uh the only effect of this would be in the uh Point validation",
    "start": "1183760",
    "end": "1191080"
  },
  {
    "text": "routine so the point validation routine for tic curves uses the B and square routine through various other um",
    "start": "1191080",
    "end": "1198280"
  },
  {
    "text": "routines and um hence you can construct a a a point that is not on the curve and",
    "start": "1198280",
    "end": "1203880"
  },
  {
    "text": "that's a bad thing because you might be able to construct a curve uh a point that is of low order and then you can do",
    "start": "1203880",
    "end": "1210600"
  },
  {
    "text": "all kind of attacks but it's not known how to construct these um off point uh curves at the",
    "start": "1210600",
    "end": "1216880"
  },
  {
    "text": "moment um and all other things um are theoretically affected but there's not",
    "start": "1216880",
    "end": "1223200"
  },
  {
    "text": "not no exploit known however the counterargument to this is that the",
    "start": "1223200",
    "end": "1229200"
  },
  {
    "start": "1225000",
    "end": "1225000"
  },
  {
    "text": "um impact assessment is only correct as long as you use the op SL SL crypto routines with op",
    "start": "1229200",
    "end": "1235960"
  },
  {
    "text": "slbn and moreover it's only correct for 101 J but incorrect for instance for",
    "start": "1235960",
    "end": "1241919"
  },
  {
    "text": "101e that was released in 2013 because they didn't have the um optimized",
    "start": "1241919",
    "end": "1248600"
  },
  {
    "text": "implementations at the point so they they now have um optimized implementations for otic curve",
    "start": "1248600",
    "end": "1255799"
  },
  {
    "text": "cryptography that do not use the BN square and anymore and back then they still used that and hence they have a",
    "start": "1255799",
    "end": "1262919"
  },
  {
    "text": "different code path um and in that case um I'm I'm pretty",
    "start": "1262919",
    "end": "1271919"
  },
  {
    "text": "sure I tried to skip the elliptic curve uh part of the talk because I was told that might be too technical for here but",
    "start": "1271919",
    "end": "1279200"
  },
  {
    "text": "uh this will be in the white paper um there is a related attack that most",
    "start": "1279200",
    "end": "1285159"
  },
  {
    "text": "likely carries over to this and as I mentioned before it's not",
    "start": "1285159",
    "end": "1291520"
  },
  {
    "text": "correct when you use um op slbn routines with third party crypto for instance if",
    "start": "1291520",
    "end": "1296720"
  },
  {
    "text": "you look at Android they use um opl underneath for the Java math Bic",
    "start": "1296720",
    "end": "1301960"
  },
  {
    "text": "integer and um they have a spongy castle with which is a bouncy castle of fork on",
    "start": "1301960",
    "end": "1308159"
  },
  {
    "text": "top of that and in that case the arguments here are invalid as",
    "start": "1308159",
    "end": "1313520"
  },
  {
    "text": "well okay so that was open SSL and we're trying to gather I I'm trying to go",
    "start": "1313520",
    "end": "1319080"
  },
  {
    "text": "through the different imputations first to gather some bug so that we can see what the common theme will be and I have",
    "start": "1319080",
    "end": "1324559"
  },
  {
    "text": "to look at what how much time I spent already okay so",
    "start": "1324559",
    "end": "1330679"
  },
  {
    "text": "um the second um implementation that we look at is GMP",
    "start": "1330679",
    "end": "1337440"
  },
  {
    "text": "and this is an older one from 2012 that has the interesting bugs",
    "start": "1337440",
    "end": "1342840"
  },
  {
    "text": "fixes so there are three different kinds here um I we don't care too much about the power PC stuff but it's interesting",
    "start": "1342840",
    "end": "1349799"
  },
  {
    "text": "but it's like a it's a niche by these days um the first bug is again uh something",
    "start": "1349799",
    "end": "1358000"
  },
  {
    "text": "in the um in like multiplication related um it just says two bugs in the",
    "start": "1358000",
    "end": "1364799"
  },
  {
    "text": "multiplication code that cause an incorrect computation with extreme low probability without further assessment",
    "start": "1364799",
    "end": "1370400"
  },
  {
    "text": "and two bucks in gcd um which with a likelihood that is infly small which is a very interesting",
    "start": "1370400",
    "end": "1377720"
  },
  {
    "text": "wording for um um for something where you have like",
    "start": "1377720",
    "end": "1383039"
  },
  {
    "text": "where you calculate withc concrete numbers um so um as I mentioned before um",
    "start": "1383039",
    "end": "1390799"
  },
  {
    "start": "1385000",
    "end": "1385000"
  },
  {
    "text": "they're not just optimizations that you can do um in terms of like um uh like",
    "start": "1390799",
    "end": "1397120"
  },
  {
    "text": "targeting Hardware features but you can also do like algorithme um um improvements so uh GMP uses um",
    "start": "1397120",
    "end": "1407640"
  },
  {
    "text": "different algorithms for different big num sizes and the reason for that is that um",
    "start": "1407640",
    "end": "1412960"
  },
  {
    "text": "for larger numbers there are algorithms that are ASM totically faster so that",
    "start": "1412960",
    "end": "1418720"
  },
  {
    "text": "means that um for instance instead of like an o n Square algorithm you have um",
    "start": "1418720",
    "end": "1425360"
  },
  {
    "text": "for instance shagas which is asically o n * log n and um the the the bug here is",
    "start": "1425360",
    "end": "1433520"
  },
  {
    "text": "in one of the the middle tier ones it's in the so-call Tom Cook um algorithm and",
    "start": "1433520",
    "end": "1439279"
  },
  {
    "text": "this is uh um oh this is Theta n to the 1 Point 465 in terms of complexity so",
    "start": "1439279",
    "end": "1447799"
  },
  {
    "text": "the constant here is much larger that's why they have like a cut off point um only after only after you have like um",
    "start": "1447799",
    "end": "1454720"
  },
  {
    "text": "big Eng that are bigger than uh yeah for the core to Duo that's 1,400 something",
    "start": "1454720",
    "end": "1460200"
  },
  {
    "text": "bits only then this will be um this will be uh this algorithm will be used and um",
    "start": "1460200",
    "end": "1468919"
  },
  {
    "text": "this algorithm is slightly more complicated um than um the the one that that we saw in",
    "start": "1468919",
    "end": "1476440"
  },
  {
    "text": "the open SL buug and slightly more complicated is than under under um",
    "start": "1476440",
    "end": "1481799"
  },
  {
    "text": "understatement here so it uses basically polinomial multiplication interpolation and the bugs basically happen in the",
    "start": "1481799",
    "end": "1489520"
  },
  {
    "text": "interpolation fa phase and the trigger basically H happens in one of the um uh",
    "start": "1489520",
    "end": "1496399"
  },
  {
    "text": "the one of the inputs to the um to the interpolation algorithm and the patch um",
    "start": "1496399",
    "end": "1504080"
  },
  {
    "start": "1501000",
    "end": "1501000"
  },
  {
    "text": "if we like just like ignore all of the other things is these These are the um in both cases",
    "start": "1504080",
    "end": "1512279"
  },
  {
    "text": "these are these are the things that are patched in the interpolation routine and when you look at the um at the",
    "start": "1512279",
    "end": "1520960"
  },
  {
    "text": "functions that you used here so this um MPN decrement macro is actually an assembly instruction um on 86 and what",
    "start": "1520960",
    "end": "1529440"
  },
  {
    "text": "it basically just does is it um it does a subtraction without any carrier",
    "start": "1529440",
    "end": "1536279"
  },
  {
    "text": "without any borrow because it's um and the fix is to not use this um Carry",
    "start": "1536279",
    "end": "1544360"
  },
  {
    "text": "lless macro but to use the proper uh big num routine the MPN sub and so again we",
    "start": "1544360",
    "end": "1551480"
  },
  {
    "text": "see it's Caris propagation so they operated on a single limb instead of a whole um big",
    "start": "1551480",
    "end": "1560120"
  },
  {
    "text": "n and it turns out that this is a very very common pattern um so um it's not",
    "start": "1560120",
    "end": "1566520"
  },
  {
    "start": "1561000",
    "end": "1561000"
  },
  {
    "text": "just in in in in openl and in GMP but it's Al also been observed in in uh at 2",
    "start": "1566520",
    "end": "1575120"
  },
  {
    "text": "25 519 implementation so there's um this is like a curve that was",
    "start": "1575120",
    "end": "1581559"
  },
  {
    "text": "um um proposed by Dan Bernstein and um",
    "start": "1581559",
    "end": "1587320"
  },
  {
    "text": "there's a library called knle it's not just like the Google knle but this is a same name different Library that's the",
    "start": "1587320",
    "end": "1592720"
  },
  {
    "text": "crypto Library um which uses this curve and um this had at some point also a very",
    "start": "1592720",
    "end": "1601559"
  },
  {
    "text": "similar um Carry buug and the same one um appeared in treat knle and there",
    "start": "1601559",
    "end": "1606840"
  },
  {
    "text": "there are blog posts about both of these and uh what I mentioned before um the",
    "start": "1606840",
    "end": "1613080"
  },
  {
    "text": "the BN Square in the older op SSL implementations um",
    "start": "1613080",
    "end": "1619880"
  },
  {
    "text": "that's one example of um an exploit that you",
    "start": "1619880",
    "end": "1625559"
  },
  {
    "text": "can do against an X against a big against sorry against a",
    "start": "1625559",
    "end": "1631399"
  },
  {
    "text": "um against an arithmetic implementation so because like if I've been talking about big numbers now but like you could",
    "start": "1631399",
    "end": "1637399"
  },
  {
    "text": "be more General as well you can say okay well there's like big numbers but there also like there other types of",
    "start": "1637399",
    "end": "1643840"
  },
  {
    "text": "arithmetic so in principle um what you do analytic curve they're group you have group operations so that's arithmetic as",
    "start": "1643840",
    "end": "1650279"
  },
  {
    "text": "well so some some people talk about arithmetic there as well so um and this is something that uh was in open SSL I",
    "start": "1650279",
    "end": "1658799"
  },
  {
    "text": "think 0.97 um I'm not sure about",
    "start": "1658799",
    "end": "1665120"
  },
  {
    "text": "the the the suffix I think it was y um so this was in",
    "start": "1665120",
    "end": "1671480"
  },
  {
    "text": "2011 um there was a bug there was a bug report a couple of years prior by",
    "start": "1671480",
    "end": "1677600"
  },
  {
    "text": "someone um from from rud and Schwartz and nobody had expected that this would be",
    "start": "1677600",
    "end": "1683399"
  },
  {
    "text": "exploitable and then there were a couple of um people um from Academia who looked",
    "start": "1683399",
    "end": "1689279"
  },
  {
    "text": "at it in 2011 and um they found a way to exploit that and um this basically is",
    "start": "1689279",
    "end": "1695600"
  },
  {
    "text": "the first instance of a um of a software",
    "start": "1695600",
    "end": "1701200"
  },
  {
    "text": "bug in an arithmetic implementation um that I'm aware of that was uh turned",
    "start": "1701200",
    "end": "1706399"
  },
  {
    "text": "into an actual exploit that was in this case able to recover the uh the private",
    "start": "1706399",
    "end": "1713360"
  },
  {
    "text": "uh key for an for an static ecdh exchange so this is somewhat limiting",
    "start": "1713360",
    "end": "1720480"
  },
  {
    "text": "because like static ecdh exchange means that you use the same key over and over",
    "start": "1720480",
    "end": "1726039"
  },
  {
    "text": "with different participants or different runs of the protocol so like if for instance you wouldn't something I very",
    "start": "1726039",
    "end": "1733120"
  },
  {
    "text": "much care about and one of the reasons why I looked at these bugs is because um",
    "start": "1733120",
    "end": "1738159"
  },
  {
    "text": "open SSH uses openl underneath and um that was additional motivation because I",
    "start": "1738159",
    "end": "1744559"
  },
  {
    "text": "want to see like what parts can I reach but for instance like this would not be exportable uh for open SSH because they",
    "start": "1744559",
    "end": "1750640"
  },
  {
    "text": "don't use um a static ecdh they use a different key they generate a different",
    "start": "1750640",
    "end": "1756399"
  },
  {
    "text": "point point each time okay so now we've talked about the",
    "start": "1756399",
    "end": "1762519"
  },
  {
    "start": "1759000",
    "end": "1759000"
  },
  {
    "text": "carus propagation bugs now we want to talk about uh another",
    "start": "1762519",
    "end": "1769200"
  },
  {
    "text": "I think this is the unique slow snowflake at the at least I haven't seen like the carry Mis propagation bug is",
    "start": "1769200",
    "end": "1774440"
  },
  {
    "text": "like a bug class right so there's like many of these but this is like this got me scratching my head for a while um so",
    "start": "1774440",
    "end": "1782399"
  },
  {
    "text": "there's this commit like in in May 2014 by Vana Co who's the author of lip gcpt",
    "start": "1782399",
    "end": "1789799"
  },
  {
    "text": "and CG uh where he says like fix a subtle box setting SPS bits with MP MPI",
    "start": "1789799",
    "end": "1796200"
  },
  {
    "text": "set bit and this is also a bug that was for in",
    "start": "1796200",
    "end": "1802080"
  },
  {
    "text": "in in in the library for a long time and apparently they had uh been been uh it",
    "start": "1802080",
    "end": "1808279"
  },
  {
    "text": "had been triggered a number of times and uh it was not realized that this was the underlying bug so they what you called",
    "start": "1808279",
    "end": "1815799"
  },
  {
    "text": "heisen Bugs so um apparently there were some things that were not properly debugged",
    "start": "1815799",
    "end": "1821600"
  },
  {
    "text": "here and um the the um reasoning for that that he gives is that it is only um",
    "start": "1821600",
    "end": "1830519"
  },
  {
    "text": "triggered in one six due to different memory allocation patterns which does not really make sense to me because um",
    "start": "1830519",
    "end": "1837360"
  },
  {
    "text": "the allocator that they use is the system allocator so it is more likely that they maybe using a different um",
    "start": "1837360",
    "end": "1844080"
  },
  {
    "text": "version of gipc or maybe he he went to a different uh architecture there anyway",
    "start": "1844080",
    "end": "1851159"
  },
  {
    "text": "um the so the the if you read the commit log uh and",
    "start": "1851159",
    "end": "1856960"
  },
  {
    "text": "you look at the code it's a little bit hard to believe what's going on there so um they they have a",
    "start": "1856960",
    "end": "1864200"
  },
  {
    "text": "routine for setting bits in a in a in in a in a big num word and they allocate",
    "start": "1864200",
    "end": "1872039"
  },
  {
    "text": "the big num at some point but they don't clear all the bits under certain",
    "start": "1872039",
    "end": "1877320"
  },
  {
    "text": "circumstances so what that means is that um you end up you can end",
    "start": "1877320",
    "end": "1884279"
  },
  {
    "text": "up leaking data from un initialized regions of of memory using that bug but",
    "start": "1884279",
    "end": "1889880"
  },
  {
    "text": "you can also Force bits to values using heat primitive so that's like",
    "start": "1889880",
    "end": "1895000"
  },
  {
    "text": "predominantly in the multi- threaded environment case so this would be more like if somebody used Apache with g s",
    "start": "1895000",
    "end": "1901760"
  },
  {
    "text": "than like if somebody used like open S so used um new PG in a male client but",
    "start": "1901760",
    "end": "1908720"
  },
  {
    "text": "the exact impact there depends on the allocator and this is still not completely",
    "start": "1908720",
    "end": "1915720"
  },
  {
    "text": "understood by me so because they claim this bug has an effect on the library",
    "start": "1915720",
    "end": "1921080"
  },
  {
    "text": "and I the only way I I see how this could have an effect on Library the only way way where I see this routine being",
    "start": "1921080",
    "end": "1928120"
  },
  {
    "text": "used is in the D DSA um generation for",
    "start": "1928120",
    "end": "1933399"
  },
  {
    "text": "the value K which is a very very sensitive area like this is something you totally don't want to screw",
    "start": "1933399",
    "end": "1939720"
  },
  {
    "text": "up and the the the the comment there is even more interesting because they say",
    "start": "1939720",
    "end": "1945039"
  },
  {
    "text": "make sure that we have the requested number of bits this code looks a little bit funny but it's easy to understand if",
    "start": "1945039",
    "end": "1950919"
  },
  {
    "text": "you consider that MPI set High bit clears all higher bits which is not the case so like whoever put that in there",
    "start": "1950919",
    "end": "1956799"
  },
  {
    "text": "um I don't know um and then they just like they set it and they clear it again to to make sure it has the right size um",
    "start": "1956799",
    "end": "1964639"
  },
  {
    "text": "but to me it looks unexploitable because um it has the right size because they",
    "start": "1964639",
    "end": "1970600"
  },
  {
    "text": "what what comes in here is like a random number that is of the right size already I don't see how this can happen so more",
    "start": "1970600",
    "end": "1977600"
  },
  {
    "text": "I are needed here I don't like there is like the claim is that this has been",
    "start": "1977600",
    "end": "1982880"
  },
  {
    "text": "observed in practice and this this bug has been triggered that but besides this there's only the the Prime generation",
    "start": "1982880",
    "end": "1988799"
  },
  {
    "text": "routine and there it's it's not I don't see how they can how that would happen this is the only place at the moment",
    "start": "1988799",
    "end": "1994120"
  },
  {
    "text": "where you see that um this this could have an impact okay um but this is like a a a",
    "start": "1994120",
    "end": "2003039"
  },
  {
    "text": "unique unique snowflake I haven't seen that that kind of thing um in other",
    "start": "2003039",
    "end": "2008080"
  },
  {
    "text": "implementations but if you have that that's very interesting bug um now apparently I have mixed up",
    "start": "2008080",
    "end": "2015039"
  },
  {
    "text": "the order of slides so I have to um put that before um so we've talked about",
    "start": "2015039",
    "end": "2022600"
  },
  {
    "text": "these bugs and um uh how they have been randomly found",
    "start": "2022600",
    "end": "2028600"
  },
  {
    "text": "by other people now we'll talk about like uh whether they're maybe more um systematic approaches to finding them",
    "start": "2028600",
    "end": "2035679"
  },
  {
    "text": "and one approach that you can use is UNC restrained symbolic execution so that's something that was proposed by ramas and",
    "start": "2035679",
    "end": "2042840"
  },
  {
    "text": "Anglo so D um Ang is one of the uh the",
    "start": "2042840",
    "end": "2048040"
  },
  {
    "text": "more um well-known or I think the the the most well-known um people for for",
    "start": "2048040",
    "end": "2054079"
  },
  {
    "text": "this type of work in the um academic community and um basically uh what they",
    "start": "2054079",
    "end": "2062158"
  },
  {
    "text": "proposed in this paper from 2011 was that you can use um symbolic execution",
    "start": "2062159",
    "end": "2069520"
  },
  {
    "text": "so okay well let me start again given that you have different implementations of the same um routine or the same",
    "start": "2069520",
    "end": "2077079"
  },
  {
    "text": "operation you can use um symbolic execution to prove that they're either",
    "start": "2077079",
    "end": "2082679"
  },
  {
    "text": "equivalent so then they all have the same bug or they are all",
    "start": "2082679",
    "end": "2089638"
  },
  {
    "text": "corrected and in equ equivalence on the other hand if your if your uh symbolic",
    "start": "2089720",
    "end": "2095560"
  },
  {
    "text": "execution engine um shows that you have an INE equivalence you automatically get",
    "start": "2095560",
    "end": "2102040"
  },
  {
    "text": "a test case for triggering the behavior you still have to figure out which one is the the the Inc incorrect",
    "start": "2102040",
    "end": "2108079"
  },
  {
    "text": "implementation but in case of big nums I mean that's a little bit that's that's easy right we know how to calculate that we've been doing that for a couple",
    "start": "2108079",
    "end": "2114240"
  },
  {
    "text": "thousand years numbers weren't so long but like this is like we can figure out which one is the right and which one is",
    "start": "2114240",
    "end": "2119480"
  },
  {
    "text": "the incorrect algorithm um so the the tool that they built is not publicly",
    "start": "2119480",
    "end": "2125000"
  },
  {
    "text": "available but for for our needs the approach is easily reproducible",
    "start": "2125000",
    "end": "2130079"
  },
  {
    "text": "using CLE so CLE is an open source symbolic execution engine and that can be used um for this obviously you're not",
    "start": "2130079",
    "end": "2137440"
  },
  {
    "text": "going to like not you're not going to like compile um all of open SL then just you know run uh CLE against say that",
    "start": "2137440",
    "end": "2145839"
  },
  {
    "text": "modex sorry mod modex you will you will have to need like individual functions that you run it",
    "start": "2145839",
    "end": "2152760"
  },
  {
    "text": "on and um what you then do is you take different bigum out",
    "start": "2152760",
    "end": "2158160"
  },
  {
    "text": "algorithms with different bigam algorithm and match them against each other but you can also take different implementations just have to make sure",
    "start": "2158160",
    "end": "2164480"
  },
  {
    "text": "that you write basically routines that um um use canonical representations in",
    "start": "2164480",
    "end": "2171000"
  },
  {
    "text": "memory so otherwise you you can't compare obviously um but there are some",
    "start": "2171000",
    "end": "2176680"
  },
  {
    "start": "2175000",
    "end": "2175000"
  },
  {
    "text": "challenges so um as I said like a lot of um uh these um more widely used",
    "start": "2176680",
    "end": "2184880"
  },
  {
    "text": "implementations use assembly code and that ass code if you want to do that needs to be accurately lifted to lvm so",
    "start": "2184880",
    "end": "2191560"
  },
  {
    "text": "because like CLE is based on symbolically executing lvm code so um in another project um we we",
    "start": "2191560",
    "end": "2200560"
  },
  {
    "text": "use such a tool SES which is a company based other San Francisco has built something for that trail of bits out of",
    "start": "2200560",
    "end": "2207119"
  },
  {
    "text": "New York have um also built something for for x86 to do that that they release publicly so that's",
    "start": "2207119",
    "end": "2213680"
  },
  {
    "text": "Maxa and leres has a multiarch lifter that works for for different",
    "start": "2213680",
    "end": "2219160"
  },
  {
    "text": "architectures but um one thing that you have to bear in mind there is that the",
    "start": "2219160",
    "end": "2224400"
  },
  {
    "text": "lifter will need um support for instruction extension as well and um this has to be like it has to be",
    "start": "2224400",
    "end": "2230960"
  },
  {
    "text": "accurate support so I mean if you screw up there then you either find bugs that are non-existent or you uh you miss a",
    "start": "2230960",
    "end": "2237880"
  },
  {
    "text": "lot of bugs and um so have to go because I miss mix up",
    "start": "2237880",
    "end": "2245920"
  },
  {
    "start": "2244000",
    "end": "2244000"
  },
  {
    "text": "the order of slides here um the other option that appeared while I was um like",
    "start": "2245920",
    "end": "2252359"
  },
  {
    "text": "after I had submitted my talk is um there's a company uh out of",
    "start": "2252359",
    "end": "2259560"
  },
  {
    "text": "um I'm actually forgot which part of the US is gwa so gwa is basically a a",
    "start": "2259560",
    "end": "2265079"
  },
  {
    "text": "company that has been doing contract research and development for the NSA and",
    "start": "2265079",
    "end": "2270240"
  },
  {
    "text": "they developed the um the gerain specific language cryptool a couple of years ago for specifying um",
    "start": "2270240",
    "end": "2278200"
  },
  {
    "text": "um cryptographic algorithms and then um proving correctness and um the uh go",
    "start": "2278200",
    "end": "2285640"
  },
  {
    "text": "galoa software analysis workbench is a very interesting thing that that appeared uh I think like three months",
    "start": "2285640",
    "end": "2291280"
  },
  {
    "text": "ago or so and this is a tool that allows program analysis on lvm bit code and Java B code and it allows cross language",
    "start": "2291280",
    "end": "2297839"
  },
  {
    "text": "equivalence proofs as well so you can either have like um implementations um in say um in C or C++ that you compile",
    "start": "2297839",
    "end": "2306119"
  },
  {
    "text": "down to lvm or you can have like Java bite code or you can mix and match and",
    "start": "2306119",
    "end": "2312440"
  },
  {
    "text": "try to show that they equivalent and this also leverages symbolic execution and um they use um something called um",
    "start": "2312440",
    "end": "2321200"
  },
  {
    "text": "smt based verification which is a hill package and that supports different smt solers and you can figure out which one",
    "start": "2321200",
    "end": "2327720"
  },
  {
    "text": "is best for this um in my um in my chest it looked like these three was was",
    "start": "2327720",
    "end": "2332760"
  },
  {
    "text": "winning here uh for for bignum um the the the the code base is",
    "start": "2332760",
    "end": "2338800"
  },
  {
    "text": "somewhat Alpha quality um so for instance it can only handle integer arguments in the lvm",
    "start": "2338800",
    "end": "2345599"
  },
  {
    "text": "functions but I mean it just means that you have to tweak the code before you try to to uh to prove correctness or",
    "start": "2345599",
    "end": "2352280"
  },
  {
    "text": "find bugs and the code is available in GitHub and free for non-commercial use",
    "start": "2352280",
    "end": "2357599"
  },
  {
    "text": "for commercial use you have to contact them and yeah I found the timing of that",
    "start": "2357599",
    "end": "2362800"
  },
  {
    "text": "interesting um it it looks to me like that there there are people who are also very interested in in having correct",
    "start": "2362800",
    "end": "2369440"
  },
  {
    "text": "implementations of crypto um but the more surprising thing to me",
    "start": "2369440",
    "end": "2377839"
  },
  {
    "start": "2375000",
    "end": "2375000"
  },
  {
    "text": "was that something uh something else Works um namely",
    "start": "2377839",
    "end": "2384280"
  },
  {
    "text": "um unfortunate name I call it property based bug hunting um it's it's a",
    "start": "2384280",
    "end": "2391000"
  },
  {
    "text": "versional fuzzing um so assume that you",
    "start": "2391000",
    "end": "2396240"
  },
  {
    "text": "uh want to to find bugs with a fuzzer and I I when I when I when I thought",
    "start": "2396240",
    "end": "2401560"
  },
  {
    "text": "about this like this this will never work but I should try it so you have ations axum um for um arithmetic",
    "start": "2401560",
    "end": "2409440"
  },
  {
    "text": "operations that you can check for example you have the axum in a prime",
    "start": "2409440",
    "end": "2414960"
  },
  {
    "text": "field that if you take the inverse of a number and then you take the inverse again and it's not the input is not zero",
    "start": "2414960",
    "end": "2421119"
  },
  {
    "text": "then it should be the same number or have two functions like that's this is",
    "start": "2421119",
    "end": "2426680"
  },
  {
    "text": "the case that we're talk talking about for the um the square routine and the multiplication routine and if you take",
    "start": "2426680",
    "end": "2433720"
  },
  {
    "text": "the square um okay I there's a mistake on the slide",
    "start": "2433720",
    "end": "2439480"
  },
  {
    "text": "so if you give the a comma a to a to the function G um then that should be equivalent to",
    "start": "2439480",
    "end": "2447040"
  },
  {
    "text": "um um giving the argument um a to the function f completely screw that up",
    "start": "2447040",
    "end": "2452800"
  },
  {
    "text": "sorry about that and now how do you randomly check for many inputs it's fast",
    "start": "2452800",
    "end": "2458119"
  },
  {
    "text": "we'll just fuzz it and what you do is like you cause crashes on in equivalence and it turns out that AFL",
    "start": "2458119",
    "end": "2466480"
  },
  {
    "start": "2465000",
    "end": "2465000"
  },
  {
    "text": "fuzz is able to find the BN Square bug with this little bit of code um in like",
    "start": "2466480",
    "end": "2473680"
  },
  {
    "text": "less than than hour on one Zeon and um yeah I'm as I said like I I",
    "start": "2473680",
    "end": "2480640"
  },
  {
    "text": "I only talk about old days but uh you can try this with with different other properties and other big n libraries and",
    "start": "2480640",
    "end": "2487440"
  },
  {
    "text": "you you'll maybe find something as well so conclusions um big Nom",
    "start": "2487440",
    "end": "2494040"
  },
  {
    "start": "2490000",
    "end": "2490000"
  },
  {
    "text": "vulnerabilities are real and they can bite you I think the medium-term goal that we should have um is that we want",
    "start": "2494040",
    "end": "2501880"
  },
  {
    "text": "to have formal verification for the arithmetic um underlying cryptographic Primitives and for that like optimized",
    "start": "2501880",
    "end": "2509319"
  },
  {
    "text": "assembly is like a real significant H so I think we should just do away with that I mean if we want to formally verify",
    "start": "2509319",
    "end": "2514960"
  },
  {
    "text": "something I just skip the assembly um I Al also I mean there are there are",
    "start": "2514960",
    "end": "2520880"
  },
  {
    "text": "like these great instruction set models for x86 and arm and you theoretically you can do that I mean it's not worth it",
    "start": "2520880",
    "end": "2527240"
  },
  {
    "text": "like the couple of percent that you need that you get there also the that's a more interesting problem like um if you",
    "start": "2527240",
    "end": "2533720"
  },
  {
    "text": "have countermeasures for satal attacks that incre that increases the complexity so then the question becomes like um so",
    "start": "2533720",
    "end": "2541160"
  },
  {
    "text": "assume that you're at a stage where you say okay well either I'm going to prove correctness or I have side CH resistance",
    "start": "2541160",
    "end": "2546280"
  },
  {
    "text": "that maybe a call that you have to make individually on on depending on the application and",
    "start": "2546280",
    "end": "2553760"
  },
  {
    "text": "um my takea away from all this is that lipom Crypt and lipom math are very very",
    "start": "2553760",
    "end": "2559440"
  },
  {
    "text": "nice to read the the only 10 the only bug that was found in the 10 last 10 years there that's uh publicly",
    "start": "2559440",
    "end": "2566960"
  },
  {
    "text": "documented is one in the Prime generation routine so they they screwed up uh instead of like doing Mill rubing",
    "start": "2566960",
    "end": "2575240"
  },
  {
    "text": "a number of times they only did it once and the interesting I laugh when I saw the commit lock so this bug was Found by",
    "start": "2575240",
    "end": "2580880"
  },
  {
    "text": "Mark cerus um the the the the found of mon of mon gox so yeah that's it this is",
    "start": "2580880",
    "end": "2589720"
  },
  {
    "start": "2588000",
    "end": "2588000"
  },
  {
    "text": "the bibliography um I hope the nobody fell asleep during the talk um and if there",
    "start": "2589720",
    "end": "2597040"
  },
  {
    "text": "are any questions feel free to ask so",
    "start": "2597040",
    "end": "2605640"
  },
  {
    "text": "you mostly focusing on",
    "start": "2606119",
    "end": "2611559"
  },
  {
    "text": "of",
    "start": "2611559",
    "end": "2614559"
  },
  {
    "text": "change no I did",
    "start": "2624480",
    "end": "2628119"
  },
  {
    "text": "not yeah no I didn't no I I I tried to like I I I wanted to look at the ones",
    "start": "2633319",
    "end": "2638920"
  },
  {
    "text": "that are like really widely spread that have like that and that are that have",
    "start": "2638920",
    "end": "2644400"
  },
  {
    "text": "been around for a long period of time and in my experience like um so um full disclosure like when I was",
    "start": "2644400",
    "end": "2652319"
  },
  {
    "text": "in university um I also wrote like my own big Nom implementation and I had students that wrote big Nom",
    "start": "2652319",
    "end": "2659000"
  },
  {
    "text": "implementations in a course that I was um that I was an assistant for and like",
    "start": "2659000",
    "end": "2664720"
  },
  {
    "text": "care propagation is a just like like every second student would make that mistake and I would not be surprised not",
    "start": "2664720",
    "end": "2671760"
  },
  {
    "text": "at all if like every second uh like JavaScript impementation had some some some variation of that the",
    "start": "2671760",
    "end": "2679960"
  },
  {
    "text": "best uh no so I mean um I how many JavaScript implementations do are like",
    "start": "2681960",
    "end": "2687760"
  },
  {
    "text": "RSA blinding any so this the second question is like",
    "start": "2687760",
    "end": "2694520"
  },
  {
    "text": "what's the usual like what's the word withth for JavaScript so I mean these they only become really hard to hit",
    "start": "2694520",
    "end": "2699839"
  },
  {
    "text": "because um you have um a um you have the",
    "start": "2699839",
    "end": "2705720"
  },
  {
    "text": "the the low I I didn't go into the the the failed research so there's a lot of failed research for this as well Nam",
    "start": "2705720",
    "end": "2712400"
  },
  {
    "text": "like how to explored this and what did not work um but that was mostly failed",
    "start": "2712400",
    "end": "2717640"
  },
  {
    "text": "research because I concentrated on these particular implementations and um it it's much more likely to succeed in in",
    "start": "2717640",
    "end": "2724480"
  },
  {
    "text": "other cases and this is also that something that this document in the white paper I I can't go into that in this talk however because it would be",
    "start": "2724480",
    "end": "2731880"
  },
  {
    "text": "multiple hours then uh",
    "start": "2731880",
    "end": "2738760"
  },
  {
    "text": "maybe I can I can really talk about that but maybe it was not so failed research there as",
    "start": "2738760",
    "end": "2745000"
  },
  {
    "text": "well that's not in the paper",
    "start": "2745000",
    "end": "2748800"
  },
  {
    "text": "either to detect",
    "start": "2751359",
    "end": "2757119"
  },
  {
    "text": "um this is not related to The Talk however um or are you talking about",
    "start": "2762920",
    "end": "2768800"
  },
  {
    "text": "like yeah okay yeah yes yes that's correct um no but that that would mean that I would that that would require",
    "start": "2768800",
    "end": "2775359"
  },
  {
    "text": "accurate modeling of the allocator as well and I have I have not done that no um you using the symbolic execution I",
    "start": "2775359",
    "end": "2783720"
  },
  {
    "text": "was using the symbolic execution tool basically to compare different implementations and um that that only",
    "start": "2783720",
    "end": "2790319"
  },
  {
    "text": "that did not work so well so it only works well if your routines are really small so if you try to basically compare",
    "start": "2790319",
    "end": "2795839"
  },
  {
    "text": "the BN Square against a um the b mle in",
    "start": "2795839",
    "end": "2801040"
  },
  {
    "text": "open SSL and even if you have a low number of of Limbs like if you try that with three limbs it it did not work for",
    "start": "2801040",
    "end": "2807119"
  },
  {
    "text": "me so that was why I surprised that it worked like with straight up fuzzing soing it for Check Yes okay um yeah I",
    "start": "2807119",
    "end": "2816040"
  },
  {
    "text": "know and it would be much more interesting if I could do the memory modeling as well but I think we're not quite there yet with the at least with",
    "start": "2816040",
    "end": "2822599"
  },
  {
    "text": "the with the tools that we have publicly available at the moment I I think you just answered my",
    "start": "2822599",
    "end": "2828920"
  },
  {
    "text": "question my question was with the symbolic execution wouldn't that lead to a state explosion that because my what I",
    "start": "2828920",
    "end": "2837200"
  },
  {
    "text": "think I know about symbolic execution is that it rarely Works in practice on real well software because there are so many",
    "start": "2837200",
    "end": "2843480"
  },
  {
    "text": "states and but you just said it didn't work for BN Square function like yeah",
    "start": "2843480",
    "end": "2849559"
  },
  {
    "text": "but it like it it it can work for other though it did like it did show that other things were equivalent um but um",
    "start": "2849559",
    "end": "2857280"
  },
  {
    "text": "like did you find bugs with it no okay so that's the the uh the sad",
    "start": "2857280",
    "end": "2865799"
  },
  {
    "text": "part you had the two",
    "start": "2867079",
    "end": "2872319"
  },
  {
    "text": "of see is there a small number of a that you're fing against or you actually have",
    "start": "2875480",
    "end": "2881119"
  },
  {
    "text": "a relativ large number of I have a small number of aims but I have a large number",
    "start": "2881119",
    "end": "2886960"
  },
  {
    "text": "of properties so these were just examples so um they are the the easiest one uh to",
    "start": "2886960",
    "end": "2895240"
  },
  {
    "text": "show in I talk any more",
    "start": "2895240",
    "end": "2902079"
  },
  {
    "text": "questions but I mean you can you can with the properties you can really go wild I",
    "start": "2902079",
    "end": "2909280"
  },
  {
    "text": "mean she just like you want to have invariance of some kind as",
    "start": "2909280",
    "end": "2914640"
  },
  {
    "text": "well more questions any",
    "start": "2918079",
    "end": "2924000"
  },
  {
    "text": "hackling okay um",
    "start": "2924599",
    "end": "2930000"
  },
  {
    "text": "okay yes okay okay it's correct",
    "start": "2931640",
    "end": "2938078"
  },
  {
    "text": "[Applause]",
    "start": "2940200",
    "end": "2942440"
  }
]