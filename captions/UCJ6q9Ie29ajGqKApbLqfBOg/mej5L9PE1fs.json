[
  {
    "text": "this talk is invoked ossification for finn-style dose level command Optus",
    "start": "0",
    "end": "5850"
  },
  {
    "text": "keishon i'm a huge coffee fan so hence the other beautiful latte art there so",
    "start": "5850",
    "end": "12389"
  },
  {
    "text": "my name is Daniel Bohannon I am a senior applied security researcher with Mandi at fire I prior to that I was an",
    "start": "12389",
    "end": "18359"
  },
  {
    "text": "incident response consultant with with mandiant this is my twitter handle and personal blog some projects that i've",
    "start": "18359",
    "end": "24180"
  },
  {
    "text": "created over the past several years centered around obfuscation include the invoke obfuscation and invoke cradle",
    "start": "24180",
    "end": "29490"
  },
  {
    "text": "craft or powershell office keishon frameworks i'm also co-authored with lis homes from microsoft the rivo",
    "start": "29490",
    "end": "34710"
  },
  {
    "text": "confiscation detection framework and then today I just made it public and get",
    "start": "34710",
    "end": "39719"
  },
  {
    "text": "how about two minutes ago I'll be releasing invoke da sophistication and we'll be doing a demo and release at the",
    "start": "39719",
    "end": "45420"
  },
  {
    "text": "end of this talk so welcome and thank you so much for being here a brief disclaimer all the information",
    "start": "45420",
    "end": "52020"
  },
  {
    "text": "I'm using none of it is indicative of any particular client of fire I most of what I'm talking about is things that",
    "start": "52020",
    "end": "57719"
  },
  {
    "text": "we've never seen in the wild but just kind of an overall disclaimer so what",
    "start": "57719",
    "end": "63030"
  },
  {
    "text": "we're gonna look at today it's first taking a high-level look at the state of obfuscation today across a couple different languages and then we're going",
    "start": "63030",
    "end": "69270"
  },
  {
    "text": "to look at three case studies that propelled of actual interesting attack groups in the wild using some really",
    "start": "69270",
    "end": "75210"
  },
  {
    "text": "creative obfuscation techniques that led me into this research then we're going to look at some different ways to",
    "start": "75210",
    "end": "80580"
  },
  {
    "text": "obfuscate legitimate binary names well then look at a category of what I like to call insertion obfuscation characters",
    "start": "80580",
    "end": "87360"
  },
  {
    "text": "that are effective in many different binaries in the command-line arguments I mean then we're going to combine all of",
    "start": "87360",
    "end": "92400"
  },
  {
    "text": "those things and look at ways that we can encode entire payloads all in command XE and they'll end with a public",
    "start": "92400",
    "end": "99509"
  },
  {
    "text": "release of Mo Kio sophistication and a demo and then talk about detecting DA sophistication because in my current",
    "start": "99509",
    "end": "104610"
  },
  {
    "text": "role at far I is I'm actually doing this research so I can build detection z' for this kind of activity and use it to find",
    "start": "104610",
    "end": "112079"
  },
  {
    "text": "attackers all around the world so I'm kind of taking this offensive approach ultimately for the defense of good so",
    "start": "112079",
    "end": "119430"
  },
  {
    "text": "that we can better understand the capabilities of things like command exe so that we can better detect this kind",
    "start": "119430",
    "end": "124799"
  },
  {
    "text": "of obfuscation so a state of obfuscation from a right team perspective attackers",
    "start": "124799",
    "end": "130920"
  },
  {
    "text": "office gate because it's a really effective way to evade Richard detection x' and if you if",
    "start": "130920",
    "end": "136680"
  },
  {
    "text": "you look around there's obfuscation frameworks that exist for almost any scripting language you can think of I'm even though I may be a little biased I",
    "start": "136680",
    "end": "142800"
  },
  {
    "text": "don't really see this slowing down anytime soon because it's just too effective for a blue team perspective",
    "start": "142800",
    "end": "148280"
  },
  {
    "text": "this is there's actually been some improvements over the past several years we've gotten better visibility through",
    "start": "148280",
    "end": "153780"
  },
  {
    "text": "things like microsoft's anti-malware scan interface some older technologies like event tracing for windows that have",
    "start": "153780",
    "end": "159780"
  },
  {
    "text": "kind of been rediscovered in the security community in the past few years just basically different ways that we're getting additional visibility into",
    "start": "159780",
    "end": "166200"
  },
  {
    "text": "what's actually running on an endpoint there's also a signature list detection approaches using data science techniques",
    "start": "166200",
    "end": "172489"
  },
  {
    "text": "but as always there's room for improvement because attackers are also",
    "start": "172489",
    "end": "177840"
  },
  {
    "text": "innovating and they're responding to these increased defensive visibilities in a couple different ways one is they",
    "start": "177840",
    "end": "184830"
  },
  {
    "text": "may just choose softer targets you know this additional visibility is great but how many clients actually are on a high",
    "start": "184830",
    "end": "190319"
  },
  {
    "text": "enough level of an operating system and actually enable this stuff not many or attackers will just turn off those the",
    "start": "190319",
    "end": "198060"
  },
  {
    "text": "capabilities that provide us as defenders with more visibility or electricity's languages that don't offer",
    "start": "198060",
    "end": "203340"
  },
  {
    "text": "this deep kind of inspection and logging capabilities so this talk has nothing to",
    "start": "203340",
    "end": "212579"
  },
  {
    "text": "do with PowerShell they all my all my research in the past this has to do with PowerShell office cajon but we're gonna",
    "start": "212579",
    "end": "217620"
  },
  {
    "text": "look entirely at command exe and from a defensive perspective most of the detection is I've seen based on command",
    "start": "217620",
    "end": "224609"
  },
  {
    "text": "exe are primarily focused on looking for command exe with certain arguments so",
    "start": "224609",
    "end": "229680"
  },
  {
    "text": "it's looking for process execution events some other things that people will do is look for parent/child process relationships so for example when were",
    "start": "229680",
    "end": "235920"
  },
  {
    "text": "launching command XE is a bit more interesting than say Explorer launching command XE and then one last one that I",
    "start": "235920",
    "end": "242190"
  },
  {
    "text": "don't see a whole lot of but is looking for command exe as the source of action so command XE setting a registry run key",
    "start": "242190",
    "end": "248400"
  },
  {
    "text": "or creating a file or modifying a host file stuff like that however command XE is used so frequently",
    "start": "248400",
    "end": "253980"
  },
  {
    "text": "that most of the time it's legitimate and so it's it's a huge noise problem of figuring out when is it used",
    "start": "253980",
    "end": "259380"
  },
  {
    "text": "maliciously so you may ask why build an entire framework just for command X",
    "start": "259380",
    "end": "264690"
  },
  {
    "text": "office keishon it seems kind of I don't know maybe even some would say lame because I mean with PowerShell it's",
    "start": "264690",
    "end": "270330"
  },
  {
    "text": "so powerful you can do all this crazy stuff but how flexible is command X you really and and what can you really do",
    "start": "270330",
    "end": "276180"
  },
  {
    "text": "with it well the reason I got started down this path is but again in my day to day job I",
    "start": "276180",
    "end": "282030"
  },
  {
    "text": "get to see some really awesome attackers all over the world and the implications of their actions and so it's really",
    "start": "282030",
    "end": "288030"
  },
  {
    "text": "fascinating to learn from these attackers so this guy Nick Carr he's actually my manager I mean we",
    "start": "288030",
    "end": "293190"
  },
  {
    "text": "co-authored this blog post back in June outlining three different attack groups that we saw using some really cool but",
    "start": "293190",
    "end": "299220"
  },
  {
    "text": "it's really small office keishon techniques on the command line so I'm just gonna walk briefly through these",
    "start": "299220",
    "end": "304650"
  },
  {
    "text": "three case studies the first one is a financial group that we call fin eight and they use some interesting techniques",
    "start": "304650",
    "end": "310830"
  },
  {
    "text": "using this is a basically decoded from a macro but they use environment process",
    "start": "310830",
    "end": "315870"
  },
  {
    "text": "level environment variables they echoed the command into PowerShell a standard input and there's some pretty cool",
    "start": "315870",
    "end": "322020"
  },
  {
    "text": "tricks there to basically keep the real core contents of the command off of any process execution command-line arguments",
    "start": "322020",
    "end": "329060"
  },
  {
    "text": "the next group is apt 32 also known as ocean Lotus and so we've seen them use a",
    "start": "329060",
    "end": "335490"
  },
  {
    "text": "lot of des living off the land tools pretty quickly after they've been you know tweeted out by Casey Smith or other",
    "start": "335490",
    "end": "340890"
  },
  {
    "text": "people on Twitter and so they'd like to use read serve a lot register of 32 with",
    "start": "340890",
    "end": "345900"
  },
  {
    "text": "the sckraab J DLL and so we saw them first using carrots to break up that /ai HTTP argument but then they started to",
    "start": "345900",
    "end": "352320"
  },
  {
    "text": "use double quotes and I'm actually said for about a year that double quotes are one of the most underestimated",
    "start": "352320",
    "end": "358400"
  },
  {
    "text": "obfuscation characters for tons of command line binaries and we just don't",
    "start": "358400",
    "end": "363780"
  },
  {
    "text": "see people using it that much but it's so much better than the carrot for a lot of different reasons which we'll talk about in the next section now the last",
    "start": "363780",
    "end": "371460"
  },
  {
    "text": "group fin 75032 and fin seven are vying for first place in my heart for having",
    "start": "371460",
    "end": "377610"
  },
  {
    "text": "the coolest obfuscation techniques ever and right now fin sevens in the lead just barely because of this one example",
    "start": "377610",
    "end": "383010"
  },
  {
    "text": "so we saw fin seven switch from using docks to using RTF files and they have some really cool obfuscation in this",
    "start": "383010",
    "end": "389250"
  },
  {
    "text": "example they dropped a link file which is this command and it's actually echoing out the javascript file and as you can see they do some pretty",
    "start": "389250",
    "end": "394980"
  },
  {
    "text": "interesting JavaScript obfuscation with concatenation for that word da plication and then also",
    "start": "394980",
    "end": "400230"
  },
  {
    "text": "the way they form the string eval using concatenation and conversion of ascii values but those two red boxes there",
    "start": "400230",
    "end": "407420"
  },
  {
    "text": "this made no sense to me why this worked because I guess I kind of prided myself",
    "start": "407420",
    "end": "412740"
  },
  {
    "text": "and trying to find all the different office characters that you can use however you'll see that they have in this w script command they have these",
    "start": "412740",
    "end": "419430"
  },
  {
    "text": "two @ signs and it made no sense because I tried running that on the command line and I was getting errors so I had to dig",
    "start": "419430",
    "end": "426660"
  },
  {
    "text": "in and see what was going on here so let's take a step back this whole command is basically command X e we are",
    "start": "426660",
    "end": "432780"
  },
  {
    "text": "using a process level environment variable X and I say we I mean this example from fin 7 they're basically",
    "start": "432780",
    "end": "438960"
  },
  {
    "text": "setting the W script command and then the end they're echoing the contents of that variable X into command exe and a",
    "start": "438960",
    "end": "446010"
  },
  {
    "text": "fascinating part is they put in these garbage delimiters these @ signs those two right there but they have a very",
    "start": "446010",
    "end": "452580"
  },
  {
    "text": "special syntax at the end to remove that character if you'll notice % x % what",
    "start": "452580",
    "end": "458010"
  },
  {
    "text": "they do is they create some additional space after that variable and they put that syntax in right there and so what",
    "start": "458010",
    "end": "465810"
  },
  {
    "text": "that says is it's actually a string replacement character or functionality where it says take the string which is",
    "start": "465810",
    "end": "471570"
  },
  {
    "text": "just the @ sign and replace it with anything that's to the right of the equal sign which in this case is nothing",
    "start": "471570",
    "end": "476790"
  },
  {
    "text": "so it's just saying in memory remove the @ signs from this command before we pass",
    "start": "476790",
    "end": "481800"
  },
  {
    "text": "it on to command exe now this is some next-level finesse in my opinion I've never seen this used and it blew my mind",
    "start": "481800",
    "end": "489300"
  },
  {
    "text": "that command I actually had this really cool string substitution capability that made something that appeared on the command line actually be able to change",
    "start": "489300",
    "end": "496140"
  },
  {
    "text": "and memory before was executed which the this single-handedly propelled me that",
    "start": "496140",
    "end": "501450"
  },
  {
    "text": "weekend to go home and write this little POC on my github called out fin coded command I mean it does just this you can",
    "start": "501450",
    "end": "507810"
  },
  {
    "text": "basically type in substrings and it will go through and do that replacement and use the string substitution functionality",
    "start": "507810",
    "end": "513270"
  },
  {
    "text": "now this POC is total garbage in light of what we're going to talk about today but the the core technique was just so",
    "start": "513270",
    "end": "519930"
  },
  {
    "text": "cool that after I released that tool I kind of step back and said I wonder I wonder if there's more here I wonder if",
    "start": "519930",
    "end": "525030"
  },
  {
    "text": "this is actually worth a significant investment of time and energy to research what else you can do with command XE because I don't I don't",
    "start": "525030",
    "end": "532800"
  },
  {
    "text": "really I'm impressed when seven pulls out these cool techniques but I kind of wish I'd known about it before right and so what other",
    "start": "532800",
    "end": "538660"
  },
  {
    "text": "techniques is that group or other groups using that maybe we as defenders should know about so the implications of this",
    "start": "538660",
    "end": "545950"
  },
  {
    "text": "research for any defenders in the house in particular this has this has impact",
    "start": "545950",
    "end": "551500"
  },
  {
    "text": "for both dynamic detections as well as static detection the greater impact is obviously on static detection but",
    "start": "551500",
    "end": "556899"
  },
  {
    "text": "there's a lot of impact on dynamic detection because some people say well I don't care office station you have in",
    "start": "556899",
    "end": "561910"
  },
  {
    "text": "command exe I'll catch the child process and I'll kind of touch on that point in a little bit as hopefully convince you",
    "start": "561910",
    "end": "567760"
  },
  {
    "text": "that you should still care about this obfuscation I'm also it leads to wasted time and see if piece submissions so I actually",
    "start": "567760",
    "end": "573339"
  },
  {
    "text": "wasted an hour trying to submit the CFP to black hat because CloudFlare kept batting it back and apparently they",
    "start": "573339",
    "end": "579220"
  },
  {
    "text": "didn't like the fact that I had cmd.exe in the abstract so if you actually look at the website you'll see it's CMD",
    "start": "579220",
    "end": "584860"
  },
  {
    "text": "square brackets dot XE and that's still there because that's what it took to get around CloudFlare was funny that I",
    "start": "584860",
    "end": "591310"
  },
  {
    "text": "wasted so much time on that but you live you learn so basically to sum up the",
    "start": "591310",
    "end": "597490"
  },
  {
    "text": "intro we're gonna take a simple command any arbitrary command you have when you put it in in evoke no sophistication you",
    "start": "597490",
    "end": "603250"
  },
  {
    "text": "can add layer upon layer upon layer to get something like that and it will",
    "start": "603250",
    "end": "608589"
  },
  {
    "text": "still run perfectly fine so hang on tight we're gonna move really fast there's a lot of content the slides will",
    "start": "608589",
    "end": "614709"
  },
  {
    "text": "be available after this talk there's also a 37 page white paper or something like that that goes into great detail",
    "start": "614709",
    "end": "620020"
  },
  {
    "text": "into all this content so if you don't like the sound of my voice you can just read that white paper and get the same",
    "start": "620020",
    "end": "625540"
  },
  {
    "text": "information but we're gonna go really fast what we're gonna do is we're going to stack a lot of building blocks up to",
    "start": "625540",
    "end": "631540"
  },
  {
    "text": "form this final payload office keishon that hopefully you'll find very interesting whether you're a red teamer",
    "start": "631540",
    "end": "636910"
  },
  {
    "text": "or blue Timur so let's dive right in now again I said a lot of defenders will",
    "start": "636910",
    "end": "642760"
  },
  {
    "text": "look for things like they'll write detection is like if the process name is cmd.exe and the arguments contain this",
    "start": "642760",
    "end": "649839"
  },
  {
    "text": "string or that string then flag this as malicious or something like that so two things I'm not talking about here a lot",
    "start": "649839",
    "end": "655930"
  },
  {
    "text": "of attackers will just rename binaries before they run them and that would break a simple detection that's assuming the binaries going to be called cmd.exe",
    "start": "655930",
    "end": "661930"
  },
  {
    "text": "I'm not talking about that there's also a lot of cmd.exe kind of substitutes something",
    "start": "661930",
    "end": "667520"
  },
  {
    "text": "like for files XE pca lua etc and my good friend oddvar mo actually has a",
    "start": "667520",
    "end": "673010"
  },
  {
    "text": "nice gist with a lot of these kind of binaries that can do other things for additional code launching what I'm",
    "start": "673010",
    "end": "680270"
  },
  {
    "text": "talking about though is the syntactic obfuscation of the legitimate binary name so one thing we can do is use",
    "start": "680270",
    "end": "687200"
  },
  {
    "text": "environment variable substring and coding so if we want to produce the string CMD we can take substrings of",
    "start": "687200",
    "end": "693710"
  },
  {
    "text": "known environment variables to produce that string CMD in the bottom example you can also see we do the same thing",
    "start": "693710",
    "end": "699350"
  },
  {
    "text": "with powershell so the first two are at P and O with these sub strings for program data and we have W in plain text",
    "start": "699350",
    "end": "705530"
  },
  {
    "text": "so now this is great for evading static detection 'z however it's resolved in memory so you'll actually not see this",
    "start": "705530",
    "end": "712190"
  },
  {
    "text": "syntax if you copy and paste this into a command prompt so this led me to try to",
    "start": "712190",
    "end": "717470"
  },
  {
    "text": "figure out is there a way I can still produce and execute the string CMD or PowerShell in a way that it doesn't",
    "start": "717470",
    "end": "723050"
  },
  {
    "text": "resolve on the command line and the way that I found to do that is using three different internal commands set a sews",
    "start": "723050",
    "end": "729320"
  },
  {
    "text": "and F type so set and I say these are internal commands because it doesn't produce a separate binary execution so",
    "start": "729320",
    "end": "735350"
  },
  {
    "text": "set will show you all the environment variables and values associate F type are closely related a so shows the",
    "start": "735350",
    "end": "741470"
  },
  {
    "text": "association between a file extension and then kind of The Associated name of what that file extension is and then F type",
    "start": "741470",
    "end": "748550"
  },
  {
    "text": "basically Maps that extension Association name to the actual binary",
    "start": "748550",
    "end": "753800"
  },
  {
    "text": "and arguments that you want to run it now why did I choose these well because",
    "start": "753800",
    "end": "759350"
  },
  {
    "text": "for each of these in the standard output you can find the strings command or PowerShell so let's just use set as an",
    "start": "759350",
    "end": "765950"
  },
  {
    "text": "example if we do set in find string on PowerShell we'll see we get two variables back we get the path",
    "start": "765950",
    "end": "771320"
  },
  {
    "text": "environment variable and we also get the PS module path environment variable so as an attacker you may want to choose",
    "start": "771320",
    "end": "777680"
  },
  {
    "text": "the one that's going to be more consistent across endpoints so the path variable is gonna change a lot probably but PS module path would probably be a",
    "start": "777680",
    "end": "784010"
  },
  {
    "text": "bit more consistent so to just focus on PS module path we can just choose we can say PS module path or in this case I",
    "start": "784010",
    "end": "790760"
  },
  {
    "text": "just decided to choose a substring PSM this is case sensitive and here's a screenshot from the invoked ossification",
    "start": "790760",
    "end": "797510"
  },
  {
    "text": "code of just a lot of the different sub strings you can use to return just that PS MA path so we've returned the PS module",
    "start": "797510",
    "end": "804170"
  },
  {
    "text": "path value and what we want to do is we have to see the string PowerShell is listed twice here now we want to find",
    "start": "804170",
    "end": "809420"
  },
  {
    "text": "the delimiter x' on either side of those powershell instances so we can kind of lift out those powershell strings so in",
    "start": "809420",
    "end": "815689"
  },
  {
    "text": "this case the lower case s and the backslash r the delimiter is on either side of the string PowerShell now if we",
    "start": "815689",
    "end": "822290"
  },
  {
    "text": "delimit on these characters there's actually a lot of lowercase esses and a lot of back slashes so the 4 it breaks",
    "start": "822290",
    "end": "828050"
  },
  {
    "text": "it up into 13 pieces and the 4th and the 11th pieces are our string powershell now the way we execute this in a command",
    "start": "828050",
    "end": "835790"
  },
  {
    "text": "prompt is we can use the for loop now the reason we use a for loop here is so that we can run the sub command we have",
    "start": "835790",
    "end": "840829"
  },
  {
    "text": "our set fine string PSM we then set our delimiter to s backslash and in this case we want to choose the 4th token and",
    "start": "840829",
    "end": "847579"
  },
  {
    "text": "then at the end we basically for our du action we just say just invoke that value and when you do that you'll see it",
    "start": "847579",
    "end": "855050"
  },
  {
    "text": "produces a string powershell in the interactive prompt and execute it so that we now drop into a PowerShell shell",
    "start": "855050",
    "end": "862120"
  },
  {
    "text": "so again this is allowing us and you can do the same thing with command and in",
    "start": "862120",
    "end": "867709"
  },
  {
    "text": "all the values here are randomized in the tool so there's a lot of options that can come out of it but the whole point is is that I ever want a reference",
    "start": "867709",
    "end": "874370"
  },
  {
    "text": "CMD or powershell in a command prompt i can do that without CMD or powershell ever showing up in that process",
    "start": "874370",
    "end": "880490"
  },
  {
    "text": "execution now if I'm executing command or PowerShell and obviously the child process is going to run and that will be",
    "start": "880490",
    "end": "886370"
  },
  {
    "text": "in plain text but there's things we can do about that character insertion",
    "start": "886370",
    "end": "891829"
  },
  {
    "text": "obfuscation is the next the next technique so the caret escape character",
    "start": "891829",
    "end": "897500"
  },
  {
    "text": "is the most common office keishon character that we see for command XE and you can basically use it to escape",
    "start": "897500",
    "end": "903139"
  },
  {
    "text": "characters that have no escapable meaning and in that case the escape characters still show up in process execution arguments whether you're",
    "start": "903139",
    "end": "909170"
  },
  {
    "text": "pulling from the event logs or you have some kind of real-time mechanism to pool that process execution however the caret character is kind of",
    "start": "909170",
    "end": "916250"
  },
  {
    "text": "suffer from what I call a half-life which is if you have three levels of processes then you have to you have to",
    "start": "916250",
    "end": "921350"
  },
  {
    "text": "basically escape the escapes three different levels if you wanted to persist all the way into the child process the other problem is that",
    "start": "921350",
    "end": "928220"
  },
  {
    "text": "certain the binaries let's say your third child process down is register of 32 well that actually doesn't play nice",
    "start": "928220",
    "end": "933829"
  },
  {
    "text": "with carrots it doesn't know what to do that because it has no meaning for register so actually get an error so there's only certain levels that you can",
    "start": "933829",
    "end": "940160"
  },
  {
    "text": "persist those carrots down into what's the better office keishon character is",
    "start": "940160",
    "end": "945560"
  },
  {
    "text": "double quotes and we already talked about how apt 32 use this and plenty of other people have used this in the past six months but it still not use as much",
    "start": "945560",
    "end": "952850"
  },
  {
    "text": "as I think it probably should be because a single you have to make sure they're evenly paired but basically there's",
    "start": "952850",
    "end": "958400"
  },
  {
    "text": "double quotes will persist even a hundred child processes down without the need to add layers of escaping and they",
    "start": "958400",
    "end": "964460"
  },
  {
    "text": "can also persist in the binaries that probably shouldn't allow those double quotes to be there but they're still there in the command-line arguments",
    "start": "964460",
    "end": "970460"
  },
  {
    "text": "which is really cool encapsulating parentheses so we actually in investigating some newscaster activity",
    "start": "970460",
    "end": "977150"
  },
  {
    "text": "we saw parentheses used I don't really think they were using it for obfuscation purposes but it was the first time I'd",
    "start": "977150",
    "end": "983150"
  },
  {
    "text": "seen that you can actually encapsulate sub commands in command XE with parentheses and the a use case once that",
    "start": "983150",
    "end": "990470"
  },
  {
    "text": "may be important is if you're if detection czar written looking for like things like ampersand ampersand and then",
    "start": "990470",
    "end": "996050"
  },
  {
    "text": "nothing but whitespace and then the next command you can actually insert parentheses there to break that up this",
    "start": "996050",
    "end": "1002140"
  },
  {
    "text": "next one leading in trailing special characters this one blew my mind actually came across this in a fuzzer that I wrote just testing out a bunch of",
    "start": "1002140",
    "end": "1008050"
  },
  {
    "text": "crazy characters anywhere where you have a whitespace that's used as a delimiter you can replace that whitespace with a",
    "start": "1008050",
    "end": "1013570"
  },
  {
    "text": "comma or a semicolon this gets crazy real quick but it's a really cool",
    "start": "1013570",
    "end": "1021090"
  },
  {
    "text": "feature I guess of command exe so now think through any detection you'd write we were looking for whitespace in almost",
    "start": "1021090",
    "end": "1026980"
  },
  {
    "text": "every single instance that whitespace could actually be a comma or semicolon pretty crazy and then we already talked",
    "start": "1026980",
    "end": "1032860"
  },
  {
    "text": "about standard input argument hiding where you echoed the command into command exe a lot of binaries will",
    "start": "1032860",
    "end": "1037990"
  },
  {
    "text": "support standard input some additional things this is actually from an older blog post that I found that's only for",
    "start": "1037990",
    "end": "1043660"
  },
  {
    "text": "static detection evasion for batch files you can just interspersed non-existent",
    "start": "1043660",
    "end": "1048880"
  },
  {
    "text": "environment variables and it'll just remove it you can't do this on the command line but for batch files you can",
    "start": "1048880",
    "end": "1054760"
  },
  {
    "text": "do that you can use custom environment variables or existing environment variables that we saw earlier so when I",
    "start": "1054760",
    "end": "1062200"
  },
  {
    "text": "released out fin coded command POC I included some of these environment variable options for command",
    "start": "1062200",
    "end": "1068800"
  },
  {
    "text": "or powershell and within about 30 minutes or so this guy jonathan tweeted",
    "start": "1068800",
    "end": "1074050"
  },
  {
    "text": "back and he basically had this entire command with all these encoded things apparently it set some registry key for",
    "start": "1074050",
    "end": "1079450"
  },
  {
    "text": "persistence and a lot of people ran it and then got mad at me and I was like I didn't write this like what are you doing copy and pasting code off the",
    "start": "1079450",
    "end": "1084790"
  },
  {
    "text": "internet but it just goes to show that you can encode full payloads just using environment variables substrings and",
    "start": "1084790",
    "end": "1090100"
  },
  {
    "text": "that's one of the options in the tool so this is actually once I started looking",
    "start": "1090100",
    "end": "1096610"
  },
  {
    "text": "into this and started searching across public and private file repositories this actually is a pretty common technique that's gone back for several",
    "start": "1096610",
    "end": "1102640"
  },
  {
    "text": "years this is an example of devour malware uploaded a virus total in 2012",
    "start": "1102640",
    "end": "1107920"
  },
  {
    "text": "that some of the sections use these encoded command or the environment",
    "start": "1107920",
    "end": "1113140"
  },
  {
    "text": "variable substring and coding a second in the wild example was produced by a really cool tool a very tiny tool called",
    "start": "1113140",
    "end": "1119890"
  },
  {
    "text": "j/s batch obfuscator that that a guy put up to github about two years ago where",
    "start": "1119890",
    "end": "1125860"
  },
  {
    "text": "they basically take they set a custom dictionary into a custom environment variable and then the rest of the",
    "start": "1125860",
    "end": "1131020"
  },
  {
    "text": "payload is substrings of that custom environment variable and there's the the decoded portion there I realize this is",
    "start": "1131020",
    "end": "1136960"
  },
  {
    "text": "small but again these examples are all in the white paper as well and there's a hashes so you can go look them up and check about yourself the last one is",
    "start": "1136960",
    "end": "1143770"
  },
  {
    "text": "really cool I don't know if there's any iron Tiger fans in the house but this tool is called batch encryption and it's",
    "start": "1143770",
    "end": "1149740"
  },
  {
    "text": "freaking awesome basically is a combination of known and custom environment variables so they basically",
    "start": "1149740",
    "end": "1155710"
  },
  {
    "text": "set a custom environment variable which they call the name of the variable is just a single quote and then they use known environment variable substrings to",
    "start": "1155710",
    "end": "1162850"
  },
  {
    "text": "basically set that dictionary and then they use substrings of that single quote variable to produce the rest of the",
    "start": "1162850",
    "end": "1168730"
  },
  {
    "text": "payload and these are pretty tricky because it's actually it's not just encoding there's actually it's a subset",
    "start": "1168730",
    "end": "1174220"
  },
  {
    "text": "of a larger payload which is why it's called batch encryption and there's a lot a big write-up and this actually",
    "start": "1174220",
    "end": "1179530"
  },
  {
    "text": "this document here you should definitely check that out there's some really interesting stuff going on in this phishing document so I don't spoil",
    "start": "1179530",
    "end": "1185740"
  },
  {
    "text": "anything but a lot of informations in the white paper and I just I show that to say that these aren't some of these",
    "start": "1185740",
    "end": "1192040"
  },
  {
    "text": "things aren't new techniques right they've been used in the wild before but it's just a matter of applying these and stacking these together in new ways to",
    "start": "1192040",
    "end": "1197920"
  },
  {
    "text": "produce command-line option that we just haven't seen for so with all that in mind let's start",
    "start": "1197920",
    "end": "1204930"
  },
  {
    "text": "to stack all these together so let's take this command for instance this is two pieces the first is the command deck",
    "start": "1204930",
    "end": "1211620"
  },
  {
    "text": "see kind of the setup and then you have the rest of the command in this case we're just running that stat and doing a fine string on listening ports now I use",
    "start": "1211620",
    "end": "1220950"
  },
  {
    "text": "this as an example command because if a defender ever sees something like this sitting in like a registry or service or",
    "start": "1220950",
    "end": "1227100"
  },
  {
    "text": "something there should be red flags all over the place because tools like Metasploit and other frameworks will use this comm spec slash be /c start be",
    "start": "1227100",
    "end": "1234360"
  },
  {
    "text": "mends syntax but I wanted to use this as a starting point to show that there are ways that we can even obfuscate this",
    "start": "1234360",
    "end": "1239970"
  },
  {
    "text": "that might bypass a lot of defenders detection so calm spec is the",
    "start": "1239970",
    "end": "1245100"
  },
  {
    "text": "environment is the path or is the variable that points to the full path to command by exe it's 27 characters long",
    "start": "1245100",
    "end": "1251480"
  },
  {
    "text": "now two ways that we can obfuscate this as an environment variable is through substring and substitution so we can do",
    "start": "1251480",
    "end": "1258840"
  },
  {
    "text": "something like this and instead of just calling cons back we can say start from the zero index and just go on from there",
    "start": "1258840",
    "end": "1264270"
  },
  {
    "text": "start from the 0th index and go on 27 characters we can use negative indexing to start and also we don't have to stick",
    "start": "1264270",
    "end": "1270960"
  },
  {
    "text": "to the length of the actual value we can use any value larger than that and get the same results so these all produce",
    "start": "1270960",
    "end": "1276840"
  },
  {
    "text": "the exact same value so defenders looking for a percent concept % aren't",
    "start": "1276840",
    "end": "1281940"
  },
  {
    "text": "gonna find any of those stuff for a variable substitution we can do that same string substitution that we saw in",
    "start": "1281940",
    "end": "1287610"
  },
  {
    "text": "7 doing and we can use characters that actually appear like saying let's change back slashes the forward slashes which",
    "start": "1287610",
    "end": "1293370"
  },
  {
    "text": "is still valid or you can use characters or strains that just don't exist and it just produces the exact same value in",
    "start": "1293370",
    "end": "1299160"
  },
  {
    "text": "addition for string substitution if you start it with an asterisk like these bottom two examples it says let me find",
    "start": "1299160",
    "end": "1304230"
  },
  {
    "text": "the first instance of system32 slash and replace that and everything leading up",
    "start": "1304230",
    "end": "1309780"
  },
  {
    "text": "to it with whatever's on the right side of the equal sign so let's just choose two of these examples and keep office",
    "start": "1309780",
    "end": "1315690"
  },
  {
    "text": "getting them further so if we keep going we can randomize the case of the environment variable that doesn't matter we can add whitespace and another thing",
    "start": "1315690",
    "end": "1324990"
  },
  {
    "text": "that we can do is for integers we can explicitly sign those integers so we'll",
    "start": "1324990",
    "end": "1331230"
  },
  {
    "text": "go to the bottom option and use that now context is crucial here you can't just copy and paste this into",
    "start": "1331230",
    "end": "1336570"
  },
  {
    "text": "a service or run key or whatever because for this special syntax for comes back with a substring or substitution the",
    "start": "1336570",
    "end": "1343350"
  },
  {
    "text": "command XE is the the context that knows how to process that you know the reason that percent compact percent works is",
    "start": "1343350",
    "end": "1349800"
  },
  {
    "text": "because it's literally like a find in replaced when you put it in like a registry run key or service so you this",
    "start": "1349800",
    "end": "1354930"
  },
  {
    "text": "would work if you dropped it in command that exit or something like W script shell but you have to check the context first now we can apply all these same",
    "start": "1354930",
    "end": "1363090"
  },
  {
    "text": "building blocks to the rest of this command in terms of randomizing the case we can remove a lot of white space so",
    "start": "1363090",
    "end": "1369270"
  },
  {
    "text": "all of these arguments up into the last argument you can actually remove every single bit of white space now what's",
    "start": "1369270",
    "end": "1375300"
  },
  {
    "text": "interesting here is that you'll see the end of our comm spec variable we have no white space between command XE and /b",
    "start": "1375300",
    "end": "1382200"
  },
  {
    "text": "but the operating system inserts one white space for us so here's an interesting example where if we have a",
    "start": "1382200",
    "end": "1388440"
  },
  {
    "text": "static detection looking for command exit E and then slash if we're looking for static data sources well it will",
    "start": "1388440",
    "end": "1394560"
  },
  {
    "text": "match but we'll never see that happen on the command line whether you're again looking in the event logs or pulling that through some",
    "start": "1394560",
    "end": "1400230"
  },
  {
    "text": "other agent or mechanism to pull those process arguments also they'll just you",
    "start": "1400230",
    "end": "1405750"
  },
  {
    "text": "know netstat ano you can always just swap the order of those keep going so we",
    "start": "1405750",
    "end": "1410820"
  },
  {
    "text": "can remove white space we can add white space anywhere where there's white space we can replace it as a delimiter with",
    "start": "1410820",
    "end": "1416820"
  },
  {
    "text": "the comma or semicolons with a lot of them if you want to you you can also add different layers of escape carrots and",
    "start": "1416820",
    "end": "1424350"
  },
  {
    "text": "if we look at the process execution for this from the bottom up we'll see that",
    "start": "1424350",
    "end": "1429600"
  },
  {
    "text": "we have this interesting intermediate process here and if you'll notice this portion that's highlighted blue we're",
    "start": "1429600",
    "end": "1434850"
  },
  {
    "text": "gonna talk about this later in the detection setting but just just remember this command that XE space space /s",
    "start": "1434850",
    "end": "1440430"
  },
  {
    "text": "space /d space slash C no space double quote space and then the rest of the",
    "start": "1440430",
    "end": "1446460"
  },
  {
    "text": "command it's a really fascinating artifact but what I notice here if I'm trying to evade detection z' is the",
    "start": "1446460",
    "end": "1452250"
  },
  {
    "text": "final processes netstat and fine string don't contain any of these option characters why is that it doesn't",
    "start": "1452250",
    "end": "1458370"
  },
  {
    "text": "contain the comma doesn't contain the semicolon doesn't contain the caret but what will work is the double quote double quotes awesome",
    "start": "1458370",
    "end": "1466020"
  },
  {
    "text": "so if we have evenly paired in this case adjacent double quotes it",
    "start": "1466020",
    "end": "1471360"
  },
  {
    "text": "will persist all the way into the child processes so invoke not sophistication",
    "start": "1471360",
    "end": "1478560"
  },
  {
    "text": "will allow you as your input command to have any of these carrots any of these double quotes into your input command",
    "start": "1478560",
    "end": "1484020"
  },
  {
    "text": "and it will maintain that through all the extra layers of obfuscation so it'll still execute in that way but in",
    "start": "1484020",
    "end": "1489360"
  },
  {
    "text": "addition for all the encapsulating obfuscation you could optionally add additional quotes and carrots and commas",
    "start": "1489360",
    "end": "1496080"
  },
  {
    "text": "and semicolons and all that stuff and this is actually a really challenging thing for me because when it came to the",
    "start": "1496080",
    "end": "1501540"
  },
  {
    "text": "powershell obfuscation I could use the tokenizer to basically look at a full command and be able to say this is a string this is an argument this is a",
    "start": "1501540",
    "end": "1507930"
  },
  {
    "text": "member but there's nothing like that for command XE so I call this slide my world's tiniest violin slide because I'm",
    "start": "1507930",
    "end": "1514470"
  },
  {
    "text": "kind of looking for sympathy but not really because as Lee Holmes has said several times you make your bed you must",
    "start": "1514470",
    "end": "1519870"
  },
  {
    "text": "lay in it so well yeah it was a really interesting problem to try to solve in this tool so Noor I said earlier that",
    "start": "1519870",
    "end": "1527610"
  },
  {
    "text": "this research has the implications for both static and dynamic detection so a",
    "start": "1527610",
    "end": "1532740"
  },
  {
    "text": "lot of defenders may look at all this examples so far and say well I don't care how much you office gate command",
    "start": "1532740",
    "end": "1537930"
  },
  {
    "text": "exe I'll still see you running net stat so what's the big deal well the big deal is I still want to",
    "start": "1537930",
    "end": "1544320"
  },
  {
    "text": "find this stuff statically before it even runs but there's actually a lot of things that hackers can do on commands",
    "start": "1544320",
    "end": "1551540"
  },
  {
    "text": "Dexys command line that never spawn a child process so what if we had a way to completely office Kate these arguments",
    "start": "1551540",
    "end": "1558330"
  },
  {
    "text": "but they could still form this functionality attackers can do a lot of reconnaissance and listing files reading file contents maybe they want to sync",
    "start": "1558330",
    "end": "1565080"
  },
  {
    "text": "whole your cloud security vendor by echoing some stuff into the host file there's a lot of stuff that they can do",
    "start": "1565080",
    "end": "1570270"
  },
  {
    "text": "so it is really important to think about detecting this obfuscation and if nothing else being able to detect",
    "start": "1570270",
    "end": "1575880"
  },
  {
    "text": "obfuscation means you don't really have to care about trying to detect intent if obfuscation is happening it immediately",
    "start": "1575880",
    "end": "1582000"
  },
  {
    "text": "becomes interesting to me and I want to know I want to unwrap it and see what's going on here so there are four main",
    "start": "1582000",
    "end": "1590070"
  },
  {
    "text": "overarching payload efficient techniques that I assembled in this research and",
    "start": "1590070",
    "end": "1595410"
  },
  {
    "text": "we're gonna look at those right now the first one is concatenation this seemed like the most obvious place to start",
    "start": "1595410",
    "end": "1602060"
  },
  {
    "text": "um so we have our same netstat command in fun fact instead of tack ano you can",
    "start": "1602060",
    "end": "1607770"
  },
  {
    "text": "actually use a forward slash so as a little bonus when you're writing detection Zoar when you're writing payloads anywhere where you see us a",
    "start": "1607770",
    "end": "1614640"
  },
  {
    "text": "dash or a forward slash try swapping them for W script no logo instead of a",
    "start": "1614640",
    "end": "1619680"
  },
  {
    "text": "slash you can use a dash for power shells not Nani encoded you can use dashes or you can use slashes in lieu of",
    "start": "1619680",
    "end": "1625650"
  },
  {
    "text": "dashes for red serve you can swap it back as well a bonus of the bonus is",
    "start": "1625650",
    "end": "1630870"
  },
  {
    "text": "that in a lot of URLs you can also use backward slashes instead of forward slashes and depending on the binary like",
    "start": "1630870",
    "end": "1637770"
  },
  {
    "text": "with PowerShell you can actually use forward and backward side by side so",
    "start": "1637770",
    "end": "1643580"
  },
  {
    "text": "this make compliments and reg X's that you have in some detection x' but again like this is totally possible so",
    "start": "1643580",
    "end": "1648630"
  },
  {
    "text": "attackers can do this and if we have rigid detections only looking for forward slashes or dashes then we might",
    "start": "1648630",
    "end": "1653670"
  },
  {
    "text": "completely miss this activity based off of a single character so back to the",
    "start": "1653670",
    "end": "1658890"
  },
  {
    "text": "concatenation what we're going to do is we're going to take our netstat command we're gonna set it in an environment variable we'll just call it comm and",
    "start": "1658890",
    "end": "1664230"
  },
  {
    "text": "let's just echo the contents of comm just to make sure that it actually maintains a value now if we just echo %",
    "start": "1664230",
    "end": "1670050"
  },
  {
    "text": "comm % it doesn't give us the value it just shows the variable name that's because we need to actually expand this",
    "start": "1670050",
    "end": "1675720"
  },
  {
    "text": "variable value in the current session now two ways we can do that one is we can actually just create a child process",
    "start": "1675720",
    "end": "1682020"
  },
  {
    "text": "and then the child process will know how to expand that variable or we can use",
    "start": "1682020",
    "end": "1687030"
  },
  {
    "text": "another internal command which is the call command now this command is incredible it allows us to automatically",
    "start": "1687030",
    "end": "1694050"
  },
  {
    "text": "expand in the current session without creating a child process and as you can see if we replace that instead of the",
    "start": "1694050",
    "end": "1700290"
  },
  {
    "text": "echo if we call comm it successfully expands netstat and runs it so let's",
    "start": "1700290",
    "end": "1706290"
  },
  {
    "text": "keep going how about instead of setting our netstat command into one environment variable we set it into 3 comma 1 comma 2 and comm 3",
    "start": "1706290",
    "end": "1712590"
  },
  {
    "text": "and then we call the concatenation of comma 1 2 & 3 now at the bottom here I have some screenshots from a system on",
    "start": "1712590",
    "end": "1719070"
  },
  {
    "text": "Eid one process execution logs and if I notice here actually put out a blog post earlier this week called test your D for",
    "start": "1719070",
    "end": "1727050"
  },
  {
    "text": "Tools system on Edition there's actually an escaping bug in system on where it will for any single % instance it",
    "start": "1727050",
    "end": "1732870"
  },
  {
    "text": "doesn't properly escape it and so there's more information in the blog but basically it will produce two",
    "start": "1732870",
    "end": "1739070"
  },
  {
    "text": "percents instead of one so if you system on as a data source you definitely want to check your detection is written against that because it is actually",
    "start": "1739070",
    "end": "1745400"
  },
  {
    "text": "producing incorrect data for percent characters that you wouldn't be seeing if you're looking at say that the",
    "start": "1745400",
    "end": "1752060"
  },
  {
    "text": "officially supported forty six eighty eight process at creation event but",
    "start": "1752060",
    "end": "1758960"
  },
  {
    "text": "anyways for our command we can also reorder the initial setting of the command as long as we reassemble it in",
    "start": "1758960",
    "end": "1764360"
  },
  {
    "text": "the correct order and then we can also take that reassembly and set it in yet another environment variable let's call",
    "start": "1764360",
    "end": "1770390"
  },
  {
    "text": "it final and then just call the final variable now an invoked Association there are five kind of final ways you",
    "start": "1770390",
    "end": "1776840"
  },
  {
    "text": "can invoke the code the first one which is the default is just using call it's great you don't have to create a",
    "start": "1776840",
    "end": "1782180"
  },
  {
    "text": "additional child process in the only cases in which you can't really use call as if you have things like pipes or",
    "start": "1782180",
    "end": "1787940"
  },
  {
    "text": "different characters that need escaping because it calls expanding it and in that case it'll automatically the tool",
    "start": "1787940",
    "end": "1793460"
  },
  {
    "text": "automatically reroute you to have a child process which is options two and three you can just say command",
    "start": "1793460",
    "end": "1798910"
  },
  {
    "text": "environment variable or you can echo the environment variable into command through standard input and options four",
    "start": "1798910",
    "end": "1804980"
  },
  {
    "text": "and five are the same as two and three but they just handle PowerShell so basically if you want your command to be",
    "start": "1804980",
    "end": "1810020"
  },
  {
    "text": "echoed or piped in PowerShell um then invoked ossification will handle that additional layer of PowerShell",
    "start": "1810020",
    "end": "1815570"
  },
  {
    "text": "obfuscation in command exe so obfuscation and it's a nightmare to explain but again if you're a final",
    "start": "1815570",
    "end": "1821900"
  },
  {
    "text": "payload is PowerShell then the the tool handles that as well and with all these",
    "start": "1821900",
    "end": "1827870"
  },
  {
    "text": "four big payload encoding techniques we can still add all the different option building blocks we've talked about so",
    "start": "1827870",
    "end": "1833990"
  },
  {
    "text": "far so we can randomize the case remove whitespace add whitespace commas and",
    "start": "1833990",
    "end": "1839870"
  },
  {
    "text": "semicolons ton of carrots and evenly paired parentheses and when we run this",
    "start": "1839870",
    "end": "1846680"
  },
  {
    "text": "we'll see it produces the d office gated child process of netstat ano but again",
    "start": "1846680",
    "end": "1851720"
  },
  {
    "text": "we could add double quotes as long as they're evenly paired and it will find its way all the way to net stats",
    "start": "1851720",
    "end": "1856880"
  },
  {
    "text": "arguments and office get it there now this is a really important thing because let's say you have a command that has",
    "start": "1856880",
    "end": "1862850"
  },
  {
    "text": "legitimately has double quotes but they're not paired side-by-side or let's say we want to office eight net stat",
    "start": "1862850",
    "end": "1868250"
  },
  {
    "text": "with double quotes on either side of the e this is actually a huge problem and if we try to do that in our command here it",
    "start": "1868250",
    "end": "1874580"
  },
  {
    "text": "won't work because there's there's literally no way to escape double quotes you know on the command line for command",
    "start": "1874580",
    "end": "1879650"
  },
  {
    "text": "exe so the the adjacent double quotes is almost like concatenating the overall",
    "start": "1879650",
    "end": "1885470"
  },
  {
    "text": "arguments together but those two quotes kind of stay in the arguments so I kind of came up with a four-step solution to",
    "start": "1885470",
    "end": "1891590"
  },
  {
    "text": "this the first one is anywhere where we have unpaired or non adjacent double quotes like up here I change it to paired I",
    "start": "1891590",
    "end": "1899950"
  },
  {
    "text": "then create an environment variable that stores quote quote then for the final",
    "start": "1899950",
    "end": "1907520"
  },
  {
    "text": "variable here I create space after that and I'm going to use the string or character substitution and I want to say",
    "start": "1907520",
    "end": "1913730"
  },
  {
    "text": "let me find every instance of quote quote and I want to replace it with a single quote but the problem is is I",
    "start": "1913730",
    "end": "1918799"
  },
  {
    "text": "can't put a single quote right there because it'll now be unpaired so what I'm gonna do is I'm gonna take a substring of that quotes variable and",
    "start": "1918799",
    "end": "1925370"
  },
  {
    "text": "say give me one character out of this variable which is a double quote so that way in the command line all of our",
    "start": "1925370",
    "end": "1930980"
  },
  {
    "text": "quotes are paired but in memory it will read it as a single quote now the problem here are the percent signs",
    "start": "1930980",
    "end": "1937010"
  },
  {
    "text": "because these percents are talking about the quotes environment variable but that's inside of the final environment",
    "start": "1937010",
    "end": "1942740"
  },
  {
    "text": "variable so I had to figure out okay is there a way that we can expand an environment variable without using",
    "start": "1942740",
    "end": "1948919"
  },
  {
    "text": "percent signs now if you're running Vista or later you can use this Vista flag and with the Vista flag you can",
    "start": "1948919",
    "end": "1955909"
  },
  {
    "text": "actually use exclamation points instead of percents so now we don't have percents competing for each other we",
    "start": "1955909",
    "end": "1962270"
  },
  {
    "text": "have variables being expanded inside of variables and you can see we run it and",
    "start": "1962270",
    "end": "1967520"
  },
  {
    "text": "it produces our netstat command with the non adjacent double quotes now I have to admit this is actually the past couple",
    "start": "1967520",
    "end": "1973429"
  },
  {
    "text": "slides are kind of troll slides in the sense that the vista flag doesn't exist there's no documentation for it if you",
    "start": "1973429",
    "end": "1978890"
  },
  {
    "text": "look at commands help menu what you'll see is that there is however this V : on which says it enables delayed",
    "start": "1978890",
    "end": "1984679"
  },
  {
    "text": "environment variable expansion but what I found because I like to poke at things is that V on works V : o works v : works",
    "start": "1984679",
    "end": "1992929"
  },
  {
    "text": "v works and V followed by literally almost anything else works as long as",
    "start": "1992929",
    "end": "1998210"
  },
  {
    "text": "it's not V : off there's a few other exceptions there basically you can use slash v4 for this",
    "start": "1998210",
    "end": "2005480"
  },
  {
    "text": "another thing we can do is we can obfuscate the environment variable names and invoked ossification will",
    "start": "2005480",
    "end": "2010710"
  },
  {
    "text": "automatically choose random alphanumeric names but there's also additional flag so you can say maybe only use special",
    "start": "2010710",
    "end": "2016679"
  },
  {
    "text": "characters for the variable names that works or we can use different amounts of whitespace followed by a single non",
    "start": "2016679",
    "end": "2022200"
  },
  {
    "text": "whitespace character that also works so make it stop dude you call yourself a",
    "start": "2022200",
    "end": "2028650"
  },
  {
    "text": "defender why are you doing this you're making our job so difficult well for",
    "start": "2028650",
    "end": "2033990"
  },
  {
    "text": "concatenation actually I'm not the first to do this we see this used quite a bit in a lot of even crappy malware but the",
    "start": "2033990",
    "end": "2041159"
  },
  {
    "text": "tip usually the obfuscation is just limited to the string powershell or something like that so here we have in",
    "start": "2041159",
    "end": "2047370"
  },
  {
    "text": "catenation of the string powershell some samples will add a couple carrots and then have these just garbage values and",
    "start": "2047370",
    "end": "2053520"
  },
  {
    "text": "variables that aren't even called here's another one with a lot of carrots and actually have powershell concatenated in",
    "start": "2053520",
    "end": "2059158"
  },
  {
    "text": "the blue variables and then they set that into the green DQ variable before they call that at the end and you can",
    "start": "2059159",
    "end": "2064290"
  },
  {
    "text": "see they actually use the /v up here the shorthand notation for that V on so",
    "start": "2064290",
    "end": "2070080"
  },
  {
    "text": "that's concatenation again we've seen attackers using this just for office gating like the string powershell but we",
    "start": "2070080",
    "end": "2075690"
  },
  {
    "text": "have never seen them use it for an entire command the next three in the last three that we're gonna talk about we've never seen in the wild now when i",
    "start": "2075690",
    "end": "2082408"
  },
  {
    "text": "say i've never seen it in the wild why should that mean anything well for the past nine months of this research i've been searching for these techniques in",
    "start": "2082409",
    "end": "2088080"
  },
  {
    "text": "public file repositories private repositories sandbox execution reports and running it as detection to cross",
    "start": "2088080",
    "end": "2093510"
  },
  {
    "text": "over ten million endpoints in organizations all around the world and i've never seen any of these techniques used so hopefully you'll find this",
    "start": "2093510",
    "end": "2100349"
  },
  {
    "text": "interesting for coding the for loop is an incredible creature in command XE",
    "start": "2100349",
    "end": "2107070"
  },
  {
    "text": "it's the coolest thing so if you look at commands help menu you find a lot of good stuff just and help menus it's",
    "start": "2107070",
    "end": "2112650"
  },
  {
    "text": "pretty awesome for this variable expansion at the end it says the virus and tax expands variables blah blah blah which is quite a different thing when",
    "start": "2112650",
    "end": "2119550"
  },
  {
    "text": "inside of a for loop that is an understatement it is a crazily different thing inside of a for loop so let's take our netstat",
    "start": "2119550",
    "end": "2127589"
  },
  {
    "text": "command make sure we add our v for variable expansion another fun fact",
    "start": "2127589",
    "end": "2134190"
  },
  {
    "text": "so /c I see we see that everywhere right and maybe as a defender since we know that some attackers will rename binaries",
    "start": "2134190",
    "end": "2140160"
  },
  {
    "text": "maybe instead of looking for a process name command XE I'll look for /c is kind of my anchor to say this is probably",
    "start": "2140160",
    "end": "2145740"
  },
  {
    "text": "command XE well the only problem with that is again if you look at the help",
    "start": "2145740",
    "end": "2151410"
  },
  {
    "text": "menu for compatibility reasons /r is the same as /c I've never seen /r use but",
    "start": "2151410",
    "end": "2160530"
  },
  {
    "text": "literally we can replace /c with /r and that totally works isn't that crazy so for /v + /c + /r the",
    "start": "2160530",
    "end": "2169530"
  },
  {
    "text": "way I remember that when I'm building detection for kind of my anchor hooks is I just remember CRV the CNR are the",
    "start": "2169530",
    "end": "2175410"
  },
  {
    "text": "arguments v is variable expansion but that's crazy right I've never seen /r it's a coolest thing to me it'll random",
    "start": "2175410",
    "end": "2181770"
  },
  {
    "text": "with choose between /z + /r in the tool whenever you generate a payload another fun fact is remember how we were able to",
    "start": "2181770",
    "end": "2188190"
  },
  {
    "text": "remove all that white space before all of the arguments before the final argument well this is actually what I",
    "start": "2188190",
    "end": "2193200"
  },
  {
    "text": "like to call a troll portunity or a troll opportunity because you can put almost anything you want in that space",
    "start": "2193200",
    "end": "2198570"
  },
  {
    "text": "and it's completely ignored so you like attackers can actually put fun messages",
    "start": "2198570",
    "end": "2204510"
  },
  {
    "text": "in there if they want like they know that they're ruining our days in some ways and wasting our time a lot of things but they could be pleasant they",
    "start": "2204510",
    "end": "2209579"
  },
  {
    "text": "could still put fun messages in there for us right another way you could mess around maybe and try to fool an analyst",
    "start": "2209579",
    "end": "2215040"
  },
  {
    "text": "is say command /c echo path now who here thinks this will echo the path variable",
    "start": "2215040",
    "end": "2220790"
  },
  {
    "text": "no hands perfect it won't because backslash c actually is not the same as",
    "start": "2220790",
    "end": "2225900"
  },
  {
    "text": "/c now the actual command is down here it's the actual /c or r and netstat so",
    "start": "2225900",
    "end": "2235290"
  },
  {
    "text": "now when we run this nothing runs except for that final netstat command so if you're an analyst scrolling through a",
    "start": "2235290",
    "end": "2240660"
  },
  {
    "text": "lot of logs you made us see that echo path and be fooled by the backslash c so",
    "start": "2240660",
    "end": "2247020"
  },
  {
    "text": "let's go back to our command net stat I know we're going to take all the unique variables for this command and set it",
    "start": "2247020",
    "end": "2252180"
  },
  {
    "text": "into this environment variable called unique where they may create a for loop and I've broken out the indexes for this",
    "start": "2252180",
    "end": "2259470"
  },
  {
    "text": "unique variable and we're basically going to spell out net stat so net is 0th index for the in E is 1 and we'll",
    "start": "2259470",
    "end": "2266579"
  },
  {
    "text": "keep going until we form all the indexes for now staff in our unique environment variable we're then going to end it with an end",
    "start": "2266579",
    "end": "2273569"
  },
  {
    "text": "of index delimiter which can be any number it can be I actually almost anything I've chosen to use a number greater than the last index or the",
    "start": "2273569",
    "end": "2280829"
  },
  {
    "text": "highest index so then for each loop we're going to go through and we're going to take that index substring of",
    "start": "2280829",
    "end": "2287369"
  },
  {
    "text": "the unique environment variable and we're going to append it onto the final environment variable in memory in that",
    "start": "2287369",
    "end": "2293460"
  },
  {
    "text": "loop and every time we're going to evaluate it with this if to say hey if this index is 1337 if it's this",
    "start": "2293460",
    "end": "2300839"
  },
  {
    "text": "delimiter at the very end then just go ahead and call and invoke the contents of final now notice here I'm using equal",
    "start": "2300839",
    "end": "2307890"
  },
  {
    "text": "equal which is actually a literal string comparison of the string 1 3 3 7 but you can also use the compare op operators",
    "start": "2307890",
    "end": "2314490"
  },
  {
    "text": "equal greater than equal greater than etc and again all this is randomized in the tool it'll give you a random one",
    "start": "2314490",
    "end": "2319710"
  },
  {
    "text": "every time and handle any additional quotes or things you need like that so as you can see we run this and in the",
    "start": "2319710",
    "end": "2326039"
  },
  {
    "text": "interactive session as standard output will see each iteration of the for loop but none of this hits the command-line and then we can see a successfully runs",
    "start": "2326039",
    "end": "2332670"
  },
  {
    "text": "netstat other things that we can do if we want to increase kind of the the",
    "start": "2332670",
    "end": "2338130"
  },
  {
    "text": "obfuscation level on the tool is we can start to input just garbage characters into that unique variable and we just",
    "start": "2338130",
    "end": "2344220"
  },
  {
    "text": "have to update the index values and as with all the other things we've talked about we can add all these building",
    "start": "2344220",
    "end": "2350549"
  },
  {
    "text": "blocks on top so randomize casing removing white space adding whitespace commas and semicolons ton of carrots",
    "start": "2350549",
    "end": "2357150"
  },
  {
    "text": "parentheses and explicit signing for any integers as a defender Hoffman should",
    "start": "2357150",
    "end": "2362490"
  },
  {
    "text": "you see positive signing of integers probably never actually I've never seen it used legitimate Lee also if you have",
    "start": "2362490",
    "end": "2368549"
  },
  {
    "text": "a zero you can sign it with a minus or a plus so who actually signs a zero that's",
    "start": "2368549",
    "end": "2373799"
  },
  {
    "text": "a really weird thing right so as I'm going through this research I'm kind of taking note of what are the weird things about this I should probably never see",
    "start": "2373799",
    "end": "2379200"
  },
  {
    "text": "and then let me actually test that and see if there are any false positives in the field this is another troll",
    "start": "2379200",
    "end": "2385109"
  },
  {
    "text": "opportunity is in the tool if you want you can actually put a custom message to",
    "start": "2385109",
    "end": "2390240"
  },
  {
    "text": "be the unique environment variable and then any characters that are still missing from your input command it also pin those on to the end right here so",
    "start": "2390240",
    "end": "2397470"
  },
  {
    "text": "again as attackers you can send nice messages to us if you'd like when you're doing your campaigns or whatever and so",
    "start": "2397470",
    "end": "2402650"
  },
  {
    "text": "kind of tried to make that easier to do to brighten a d4 analyst day so we've",
    "start": "2402650",
    "end": "2408530"
  },
  {
    "text": "talked about concatenation we've talked about for coding with a for loop reversal is the third one it's very similar to for coding but we're going to",
    "start": "2408530",
    "end": "2415520"
  },
  {
    "text": "introduce this /l flag for the for loop which instead of having to specify every single index we just give it a start",
    "start": "2415520",
    "end": "2421400"
  },
  {
    "text": "value of 11 an in value of 0 and the increment or decrement or in this case is negative one so iterate through 11 to",
    "start": "2421400",
    "end": "2428930"
  },
  {
    "text": "0 one by one and if we increase the obfuscation level we can again add a",
    "start": "2428930",
    "end": "2434240"
  },
  {
    "text": "bunch of evenly distributed characters into that reverse environment variable",
    "start": "2434240",
    "end": "2439420"
  },
  {
    "text": "and in this case since we're decrementing backwards in addition to equal instead of the greater than and",
    "start": "2439420",
    "end": "2445940"
  },
  {
    "text": "greater than equal we can use less than or less than equal as well and again all this is handled in the tool now you may",
    "start": "2445940",
    "end": "2453110"
  },
  {
    "text": "be wondering for for coding and reversal why for the spinal command are we doing a substring of that final command well",
    "start": "2453110",
    "end": "2458480"
  },
  {
    "text": "the reason is because we haven't set the value of final before we hit this for loop the very first instance is",
    "start": "2458480",
    "end": "2463940"
  },
  {
    "text": "literally setting the string exclamation point variable name exclamation point so the options that the tool produces",
    "start": "2463940",
    "end": "2471320"
  },
  {
    "text": "say let's just do a negative index of the length of the input command so netstat I know is 12 characters long",
    "start": "2471320",
    "end": "2476620"
  },
  {
    "text": "instead of a negative index we could do a positive index of the variable name plus the exclamation points or we can",
    "start": "2476620",
    "end": "2483350"
  },
  {
    "text": "also do is use the string substitution with this asterisk and say find the first instance of variable name",
    "start": "2483350",
    "end": "2488840"
  },
  {
    "text": "exclamation point and replace that and all the characters leading up to that with nothing and just remove that the",
    "start": "2488840",
    "end": "2497030"
  },
  {
    "text": "last option is fin coding and as you remember I said that with fin 7 these are the first attackers we saw using",
    "start": "2497030",
    "end": "2502220"
  },
  {
    "text": "this string substitution functionality and command X Eve and so fin coding here",
    "start": "2502220",
    "end": "2508940"
  },
  {
    "text": "we basically say is we have our command and let's say we want to replace every t character with a Z so we replace that in",
    "start": "2508940",
    "end": "2515120"
  },
  {
    "text": "that initial instantiation and then we have to do a substitution so let's set that command variable and let's swap",
    "start": "2515120",
    "end": "2522290"
  },
  {
    "text": "back the Z's with T's and we're going to set that into the sub 1 and then instead of calling command we're going to call",
    "start": "2522290",
    "end": "2528740"
  },
  {
    "text": "sub 1 and now in memory it swapped those characters around and when we're invoking is that the obfuscated command",
    "start": "2528740",
    "end": "2534260"
  },
  {
    "text": "we can add another layer and save swap all the A's with a character 7 and then let's add an additional",
    "start": "2534260",
    "end": "2540390"
  },
  {
    "text": "substitution in memory swapping the sevens back to A's let's add one third layer just for fun we're gonna swap ends",
    "start": "2540390",
    "end": "2546810"
  },
  {
    "text": "with question marks and in memory swap question marks back to in now on the top",
    "start": "2546810",
    "end": "2551910"
  },
  {
    "text": "is the fin coding example on the bottom is the out fin coded command from the POC tool that I released like seven or",
    "start": "2551910",
    "end": "2557760"
  },
  {
    "text": "eight months ago now at the time I didn't know about this variable expansion so I couldn't use exclamation points for variables I had to use",
    "start": "2557760",
    "end": "2563580"
  },
  {
    "text": "percents and because of that the only way I knew how to expand variables at the time was to create a child process",
    "start": "2563580",
    "end": "2569190"
  },
  {
    "text": "so for every single one of these substitutions there's a new child process so your process tree is like command command command command command",
    "start": "2569190",
    "end": "2574740"
  },
  {
    "text": "it's like super noisy it's really lame in comparison to this to the new fin coding but multiple command implications",
    "start": "2574740",
    "end": "2583230"
  },
  {
    "text": "and because of the multiple command indications I have to escape all the ampersands for concatenating these commands one layer of escaping two",
    "start": "2583230",
    "end": "2590070"
  },
  {
    "text": "layers of escaping three layers of escaping it gets real ugly real fast so that's the advantage of the newer fin",
    "start": "2590070",
    "end": "2596070"
  },
  {
    "text": "coding is it does all this in a single process and with variable because it uses the variable expansion you don't",
    "start": "2596070",
    "end": "2602010"
  },
  {
    "text": "have to do any child processes so I'm",
    "start": "2602010",
    "end": "2607020"
  },
  {
    "text": "now going to do a demo of the tool for the first time well the first time in",
    "start": "2607020",
    "end": "2612780"
  },
  {
    "text": "public I've I've spent a lot of time on this tool so now the first time I'm running it so please do not use this tool for evil and if you are affiliated",
    "start": "2612780",
    "end": "2619830"
  },
  {
    "text": "with fin 7 or fin or apt 32 please don't use this tool at all even though I know you probably will but I just pushed this",
    "start": "2619830",
    "end": "2625470"
  },
  {
    "text": "like three minutes before I started it's live on my github and if you've used any",
    "start": "2625470",
    "end": "2631920"
  },
  {
    "text": "of the powershell obfuscation tools you'll know that i'm a huge fan of animated ascii art for the very beginning so here it is just echoing out",
    "start": "2631920",
    "end": "2638460"
  },
  {
    "text": "of command and going through several different layers of obfuscation all color-coded of course in the menu is",
    "start": "2638460",
    "end": "2644400"
  },
  {
    "text": "very similar to the other tools basically anything in yellow you can type and that'll take you to a new thing so we have tutorial want to help menu in",
    "start": "2644400",
    "end": "2650609"
  },
  {
    "text": "this case we'll just type the tutorial and we'll see it shows us how to set the command or the command path you can also",
    "start": "2650609",
    "end": "2655920"
  },
  {
    "text": "set the final binary to be command or powershell or just nothing by default and the main options are here binary",
    "start": "2655920",
    "end": "2661740"
  },
  {
    "text": "encoding and payload so the first one binary this is a way that we can produce obfuscated versions to produce a string",
    "start": "2661740",
    "end": "2667170"
  },
  {
    "text": "CMD or powershell and we have three files of like low medium high for obfuscation and the higher ones will",
    "start": "2667170",
    "end": "2674040"
  },
  {
    "text": "actually produce that for loop syntax and as you can see it runs PowerShell just fine and it resolves a string",
    "start": "2674040",
    "end": "2679170"
  },
  {
    "text": "PowerShell in memory not on the command line so binaries for getting office gated",
    "start": "2679170",
    "end": "2684450"
  },
  {
    "text": "binaries encoding is where you can take any command and encode it with environment variable substrings so in",
    "start": "2684450",
    "end": "2690000"
  },
  {
    "text": "this case we actually to set a command will just do ping 888 and you can type show at any point and see what you've",
    "start": "2690000",
    "end": "2696150"
  },
  {
    "text": "set and what commands you've run so if we just do one for the basic obfuscation it odors off escape maybe one or two",
    "start": "2696150",
    "end": "2701340"
  },
  {
    "text": "characters a certain percentage with environment variable sub strings or we can do full-blown off the station there",
    "start": "2701340",
    "end": "2707160"
  },
  {
    "text": "and it will add whitespace and do a bunch of other random stuff and as you can see the ping command still runs but the real core of this tool is in the",
    "start": "2707160",
    "end": "2714150"
  },
  {
    "text": "payload section and you'll see the four payload that we talked about concatenation reversal for coding so in",
    "start": "2714150",
    "end": "2719580"
  },
  {
    "text": "this case I'm just going to copy and paste this PowerShell command and I'm setting the final binary to PowerShell so it knows to handle the PowerShell",
    "start": "2719580",
    "end": "2725850"
  },
  {
    "text": "layer of escaping on top of command I run show you can see we have our command set final binaries PowerShell we're good",
    "start": "2725850",
    "end": "2731820"
  },
  {
    "text": "to go so let's jump into the concat menu well let's do one for the basic obfuscation there it is there we can",
    "start": "2731820",
    "end": "2738420"
  },
  {
    "text": "copy it out paste it into command so you can see the command works and if we go back and add the intents obfuscation",
    "start": "2738420",
    "end": "2744120"
  },
  {
    "text": "option number three it'll be a bit crazier yeah a little bit crazier so we",
    "start": "2744120",
    "end": "2750300"
  },
  {
    "text": "can just copy that the clipboard paste it in and as you can see it runs the command just fine so that was concatenation now let's go",
    "start": "2750300",
    "end": "2756690"
  },
  {
    "text": "back and let's do one more let's look at for coding and let's just go straight for the intensification and see what it produces there again something pretty",
    "start": "2756690",
    "end": "2763710"
  },
  {
    "text": "crazy paste that in you can see it runs perfectly fine now as kind of the finale",
    "start": "2763710",
    "end": "2770610"
  },
  {
    "text": "here what I decided to do is go through all of my office station framework so I created a PowerShell command hosted up",
    "start": "2770610",
    "end": "2775740"
  },
  {
    "text": "my bitly link I ran it through invoke cradle crafter to produce an obfuscated cradle and PowerShell which I then ran through invoke obfuscation to office get",
    "start": "2775740",
    "end": "2782130"
  },
  {
    "text": "is syntactically in PowerShell which I then ran into invoked ossification to produce this gargantuan command and when I paste this in my VM",
    "start": "2782130",
    "end": "2789150"
  },
  {
    "text": "was getting hammered so it's really slow but when you do this not interactively it happens just in a split second but as",
    "start": "2789150",
    "end": "2794610"
  },
  {
    "text": "you can see in standard output it's going through every single for loop to basically reassemble this command index",
    "start": "2794610",
    "end": "2799800"
  },
  {
    "text": "by index character by character and at the end when it finally comes back together and runs doesn't want this took a really",
    "start": "2799800",
    "end": "2806579"
  },
  {
    "text": "long time when it finally comes back and runs it works so the one important thing",
    "start": "2806579",
    "end": "2828000"
  },
  {
    "text": "that kind of specify is that with with the powershell obfuscation tools or for invoke obfuscation you can add layer upon layer upon layer with da",
    "start": "2828000",
    "end": "2834930"
  },
  {
    "text": "sophistication it's not really built that way all the layers are built in for each invocation so the tool will allow",
    "start": "2834930",
    "end": "2841049"
  },
  {
    "text": "you to try to rap in multiple layers of obfuscation but it's gonna throw a huge warranty and be like this will probably",
    "start": "2841049",
    "end": "2846059"
  },
  {
    "text": "not work so don't bet your lunch money on this working because of the way that it's relying on environment variables that state is maintained through all the",
    "start": "2846059",
    "end": "2852299"
  },
  {
    "text": "child processes so it gets really complicated and for me I wasn't setting out to create some obfuscation tool that",
    "start": "2852299",
    "end": "2857339"
  },
  {
    "text": "you could wrap in a hundred layers because that's awful to decode I just put it I basically took it as far as I",
    "start": "2857339",
    "end": "2862589"
  },
  {
    "text": "could go and as far as what made sense to basically enumerate all these options because for me I created this tool",
    "start": "2862589",
    "end": "2868710"
  },
  {
    "text": "actually as a fuzzer and what do i mean by that well when it comes to actually detecting this stuff",
    "start": "2868710",
    "end": "2874020"
  },
  {
    "text": "the reason that that my company will let me spend all this time of research is because I was doing it to detect things",
    "start": "2874020",
    "end": "2879720"
  },
  {
    "text": "we've never seen before so when it comes to detecting this stuff please check out a white paper there's a ton more detail",
    "start": "2879720",
    "end": "2886020"
  },
  {
    "text": "there the approach one of the approaches that I took and there's a couple other teams also working on this and some really cool ways I can't quite auke bout",
    "start": "2886020",
    "end": "2892920"
  },
  {
    "text": "right now but basically in building all this I tried to say what are all the building blocks necessary to do all this",
    "start": "2892920",
    "end": "2898529"
  },
  {
    "text": "stuff right like a lot of these relied on the for loop or the call internal command or stuff like that so so some of",
    "start": "2898529",
    "end": "2905220"
  },
  {
    "text": "the things I did was look just for crazy argument links right which is gonna be a lot of false positives depending on your",
    "start": "2905220",
    "end": "2911010"
  },
  {
    "text": "environment also looking for high frequency of some of these insertion obfuscation characters like the quotes carrot stuff like that I then also took",
    "start": "2911010",
    "end": "2918359"
  },
  {
    "text": "an approach of looking for these these core internal commands that I needed and looked for like the call command being",
    "start": "2918359",
    "end": "2923760"
  },
  {
    "text": "broken up by carrots like that's really suspicious or looking for the set command immediately preceded by or",
    "start": "2923760",
    "end": "2929730"
  },
  {
    "text": "followed by the comma or semicolon delimiter characters I'm also looking",
    "start": "2929730",
    "end": "2934829"
  },
  {
    "text": "for anytime if I ever see someone using that /r like I'm gonna know about it because I've never seen it used before I've",
    "start": "2934829",
    "end": "2940349"
  },
  {
    "text": "looked a lot for it so that that's kind of interesting right also for the variable substring stuff I've only seen",
    "start": "2940349",
    "end": "2945450"
  },
  {
    "text": "a few applications that actually use this on the command-line legitimately and so this is a really good indicator also another thing member I told you",
    "start": "2945450",
    "end": "2953520"
  },
  {
    "text": "earlier there's this command that was highlighted below and I said this is really interesting the SDC with the weird white spaces and stuff this is an",
    "start": "2953520",
    "end": "2960059"
  },
  {
    "text": "artifact of operating system where if you're executing a sub command if you're piping content into a binary then it",
    "start": "2960059",
    "end": "2967530"
  },
  {
    "text": "will actually produce an additional command XE invocation with these arguments with the command and what's",
    "start": "2967530",
    "end": "2973829"
  },
  {
    "text": "fascinating here so again if we run this command that is this office gated way of producing the string PowerShell this sub",
    "start": "2973829",
    "end": "2979200"
  },
  {
    "text": "command will produce an entirely new execution just for that set fine string um and then since we actually are",
    "start": "2979200",
    "end": "2984359"
  },
  {
    "text": "echoing this content into the binary fine string XE that produces an additional execution right so just",
    "start": "2984359",
    "end": "2991109"
  },
  {
    "text": "trying to detect the static arguments when you actually execute this there are a lot of child processes that happen under the hood the coolest part is that",
    "start": "2991109",
    "end": "2997829"
  },
  {
    "text": "if this initial command maybe if we renamed command XE to like benign XE and executed this these sub commands would",
    "start": "2997829",
    "end": "3005630"
  },
  {
    "text": "still be command XE so they don't look at the name of the binary that you're running as which was really fascinating",
    "start": "3005630",
    "end": "3011450"
  },
  {
    "text": "to me so I suffer as a defender from FOMO but for me it's more about the fear",
    "start": "3011450",
    "end": "3018530"
  },
  {
    "text": "of missing obfuscation I love obfuscation I love researching it I love finding people using it but I am",
    "start": "3018530",
    "end": "3025549"
  },
  {
    "text": "always trying to figure out what am I missing what else is there because I want to find it and one of the things I did with",
    "start": "3025549",
    "end": "3031160"
  },
  {
    "text": "this project is I've released the full test harness that I use to build every detection for this kind of obfuscation",
    "start": "3031160",
    "end": "3039109"
  },
  {
    "text": "now I've built test harnesses for all of my other tools to basically enumerate thousands of the samples to kind of",
    "start": "3039109",
    "end": "3044660"
  },
  {
    "text": "check do I detect all of these but my code is always really bad and I never released it but for this I really wanted",
    "start": "3044660",
    "end": "3049880"
  },
  {
    "text": "to release the test harness as well so as defenders you can use this from day one right out of the box I mean so this",
    "start": "3049880",
    "end": "3056270"
  },
  {
    "text": "function invoke DOS test harness will basically go through and it will randomize all the options and produce",
    "start": "3056270",
    "end": "3062750"
  },
  {
    "text": "thousands of samples if you want and it will check any input commands I have just a few basic ones to get people",
    "start": "3062750",
    "end": "3068240"
  },
  {
    "text": "started do you basically put in these Reg X's in the name of what it's looking for and basically run a thousand samples let's see maybe I",
    "start": "3068240",
    "end": "3073939"
  },
  {
    "text": "detected 800 of these samples and then you look at the 200 you didn't detect and be like what about this evaded my",
    "start": "3073939",
    "end": "3079189"
  },
  {
    "text": "detection x' what additional protections can I write to catch this I mean it was tremendously helpful for coming up with",
    "start": "3079189",
    "end": "3085519"
  },
  {
    "text": "detection x' for all this stuff and if you don't want to run this tool them also i've also released over 4000",
    "start": "3085519",
    "end": "3091099"
  },
  {
    "text": "samples of obfuscated commands either just in text files or also in event log EBT X Files and I included sis Mon and",
    "start": "3091099",
    "end": "3097999"
  },
  {
    "text": "security event logs I ID 46 88 and again a reason why you may want to use the",
    "start": "3097999",
    "end": "3103160"
  },
  {
    "text": "event logs is that it actually contains the execution of all 4,000 commands so you can see all the weird sub command",
    "start": "3103160",
    "end": "3108979"
  },
  {
    "text": "child processes and stuff like that one more thing I'll mention is that for every single one of these functions in",
    "start": "3108979",
    "end": "3115669"
  },
  {
    "text": "the PowerShell project there are over 20 different arguments that you can specify so you can do things like say yes I",
    "start": "3115669",
    "end": "3122569"
  },
  {
    "text": "think I want to add random whitespace and I think I 70 percent of the time if there's an opportunity to add whitespace",
    "start": "3122569",
    "end": "3128509"
  },
  {
    "text": "I want to take the opportunity and then for each one of those opportunities that I want to take I want to randomly select between 3 and 15 whitespace characters",
    "start": "3128509",
    "end": "3135709"
  },
  {
    "text": "like you can specify all that stuff so when you're using the interactive tool you're going to get a subset of the",
    "start": "3135709",
    "end": "3140989"
  },
  {
    "text": "capabilities of the daw sophistication but if you use the test harness that's",
    "start": "3140989",
    "end": "3146059"
  },
  {
    "text": "relying on the underlying functions and every single invocation it's randomizing every single variable every single",
    "start": "3146059",
    "end": "3151400"
  },
  {
    "text": "arguments you're going to get a crazier swath of obfuscation syntax there so I",
    "start": "3151400",
    "end": "3156559"
  },
  {
    "text": "definitely recommend you checking that out so the key takeaways here attackers are continuing to office gate and be",
    "start": "3156559",
    "end": "3163369"
  },
  {
    "text": "more creative in their obfuscation commanda XE supports significant obfuscation that we've never seen before",
    "start": "3163369",
    "end": "3169369"
  },
  {
    "text": "in the wild but I imagine that potentially after today we might see an uptick in it and we use defenders have",
    "start": "3169369",
    "end": "3175759"
  },
  {
    "text": "to match the levels of attacker creativity with defense of creativity and how we go about detecting this obfuscation and hopefully this research",
    "start": "3175759",
    "end": "3183349"
  },
  {
    "text": "will help because in the end I spent over a thousand hours on all of this and so hopefully you can take that from from",
    "start": "3183349",
    "end": "3189319"
  },
  {
    "text": "here from day one and start to extract value out of it for defensive purposes or for written consent Red Team purposes",
    "start": "3189319",
    "end": "3198109"
  },
  {
    "text": "I just want to give a huge thanks and shout out to the team at the advanced practices scheme at far I",
    "start": "3198109",
    "end": "3203700"
  },
  {
    "text": "specifically Nick car Matthew Dunwoody and with Noah and all the people I get to work with it really make detecting",
    "start": "3203700",
    "end": "3209650"
  },
  {
    "text": "and catching attackers just insanely fun every single day and so I want to say a huge thank you to them and a really",
    "start": "3209650",
    "end": "3215410"
  },
  {
    "text": "sincere thank you to my wife because she really supports me and adding again a thousand hours of research and coding",
    "start": "3215410",
    "end": "3220690"
  },
  {
    "text": "late at night isn't the most fun thing for her to watch me do and so I just want to say a big thanks to her for",
    "start": "3220690",
    "end": "3226840"
  },
  {
    "text": "supporting me in doing that and so with that the code is live on github I'm the white paper is hosted on the blackhat",
    "start": "3226840",
    "end": "3233410"
  },
  {
    "text": "site today as well as the far I site here's my Twitter and blog and I just want to say thank you very much for",
    "start": "3233410",
    "end": "3238840"
  },
  {
    "text": "coming and this has really been an honor to speak here so thank you [Applause]",
    "start": "3238840",
    "end": "3245939"
  },
  {
    "text": "and does anyone have any questions and I'll be around all day also if you want to catch me in the hall but anyone brave",
    "start": "3247270",
    "end": "3252920"
  },
  {
    "text": "enough to ask a question in the hall here awesome well thank you again please",
    "start": "3252920",
    "end": "3260330"
  },
  {
    "text": "catch me and say hello I'd love to meet you and thank you again",
    "start": "3260330",
    "end": "3265330"
  }
]