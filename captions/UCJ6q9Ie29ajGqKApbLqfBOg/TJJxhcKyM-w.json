[
  {
    "text": "foreign",
    "start": "1979",
    "end": "4159"
  },
  {
    "text": "ER closing the case of half double and Beyond I'm Andreas kogler and with me is yunusinga today we're gonna talk about a",
    "start": "11900",
    "end": "19560"
  },
  {
    "text": "problem row Hammer that exists since 2014 and in this almost 10 years",
    "start": "19560",
    "end": "25560"
  },
  {
    "text": "numerous exploits have been built and overall there are countless mitigations proposed currently there are mitigations",
    "start": "25560",
    "end": "31859"
  },
  {
    "text": "in place in your modern memory but we show that they are ineffective and we",
    "start": "31859",
    "end": "37920"
  },
  {
    "text": "think and we think that we can build something fundamentally better and we will show you today so we brought a",
    "start": "37920",
    "end": "44160"
  },
  {
    "text": "research question with us and we think that it would be amazing if we could transparently correct arbitrary data",
    "start": "44160",
    "end": "51660"
  },
  {
    "text": "flips from rohem attacks or general data Integrity um in memory if the operating system is",
    "start": "51660",
    "end": "58440"
  },
  {
    "text": "in use and to start off we first will introduce the problem a bit more so the",
    "start": "58440",
    "end": "63719"
  },
  {
    "text": "problem we have is raw Hammer row Hammer acts on dynamic dynamic random access memory or short DRM as we know it",
    "start": "63719",
    "end": "71220"
  },
  {
    "text": "theorem is large cheap and energy efficient so we want a lot of theorem in",
    "start": "71220",
    "end": "76740"
  },
  {
    "text": "all our devices this is why we use dram and it works the following way it's built every bit is stored in a Cell",
    "start": "76740",
    "end": "84000"
  },
  {
    "text": "that's built from one transistor and one capacitor and the keyword here is the capacitor capacitors lose charge over",
    "start": "84000",
    "end": "91860"
  },
  {
    "text": "time so we need a frequent refresh interval to reapply the charge to capacitor Story and there's also like",
    "start": "91860",
    "end": "99240"
  },
  {
    "text": "another constraint for the drum the drum is usually organized in rows so if we speak today",
    "start": "99240",
    "end": "105960"
  },
  {
    "text": "about the attacks or in general we've always focus on rows this is basically a unit of these cells in a drum",
    "start": "105960",
    "end": "114180"
  },
  {
    "text": "now let's talk about row Hammer rohama is the hardware fault inside the drum",
    "start": "114180",
    "end": "120119"
  },
  {
    "text": "where frequent accesses to ghiram rows can flip bits in neighboring rows you can see here the code on the right it's",
    "start": "120119",
    "end": "126600"
  },
  {
    "text": "accessing two pointers across the one and the grass to two these map to the",
    "start": "126600",
    "end": "131720"
  },
  {
    "text": "memory as you can see it on the left to these rows and if we now access these aggressors a lot in this loop after some",
    "start": "131720",
    "end": "139260"
  },
  {
    "text": "time bits in the victim Row in between will flip so as we see here that's only the code",
    "start": "139260",
    "end": "146640"
  },
  {
    "text": "required to produce flips in your memory so this problem gets even worse when we",
    "start": "146640",
    "end": "153180"
  },
  {
    "text": "consider new and new generations that has the reason because um we want to increase the density of",
    "start": "153180",
    "end": "158520"
  },
  {
    "text": "memory because obviously your devices get smaller and smaller but you want to have more and more storage on your device",
    "start": "158520",
    "end": "165439"
  },
  {
    "text": "and this Ro Hammer enables many attacks and many counter meshes have been proposed and we will talk about the",
    "start": "165900",
    "end": "172019"
  },
  {
    "text": "countermeasures today so so there's not only one variant of raw Hammer the one",
    "start": "172019",
    "end": "177599"
  },
  {
    "text": "we have shown you is the classic double-sided grammar where we have like one aggressor above the victim data we",
    "start": "177599",
    "end": "182640"
  },
  {
    "text": "want to Target and one aggressive below the data we Target and there's also a variant where we move one aggressor to a",
    "start": "182640",
    "end": "189000"
  },
  {
    "text": "different position this is this one single-sided hammering where only we need only one neighbor and then finally",
    "start": "189000",
    "end": "194640"
  },
  {
    "text": "we have a more complex variant where we just have one aggressor so we can already see that we have some spatial",
    "start": "194640",
    "end": "200760"
  },
  {
    "text": "requirements from an attacker's point of view to actually Mount the attack on the drum",
    "start": "200760",
    "end": "206400"
  },
  {
    "text": "let's talk about mitigations so the mitigations usually focus on some",
    "start": "206400",
    "end": "211560"
  },
  {
    "text": "characteristics and I will start off with the first characteristics the Assumption I have is basically that",
    "start": "211560",
    "end": "216720"
  },
  {
    "text": "these raw Hammer flips are infrequent so we could just use ECC then VCC memory",
    "start": "216720",
    "end": "222060"
  },
  {
    "text": "right yes that's a good keyword we can now use error correcting codes so you might have heard of what it is heard",
    "start": "222060",
    "end": "227879"
  },
  {
    "text": "about it we can basically build in the hardware additional Hardware written density to basically correct and detect",
    "start": "227879",
    "end": "234299"
  },
  {
    "text": "a few flips and this is with this we can basically catch a low number of lips in",
    "start": "234299",
    "end": "239940"
  },
  {
    "text": "our memory on every axis we perform another thing we could do because we need this sporadic Refreshers",
    "start": "239940",
    "end": "246840"
  },
  {
    "text": "to refresh the cells in our dram it can just increase this refresh rate so growham is not quick enough to charge",
    "start": "246840",
    "end": "254159"
  },
  {
    "text": "deplete the charges of the cell so we simply increase the refresh rate and we won't see any flips anymore",
    "start": "254159",
    "end": "261419"
  },
  {
    "text": "and also a good point here is that the attack we showed in the beginning where we have X alternating accesses to this",
    "start": "261419",
    "end": "266880"
  },
  {
    "text": "far at the regressors and we introduce the flip in the victim we need to perform that within one refresh interval",
    "start": "266880",
    "end": "272940"
  },
  {
    "text": "if our tactics longer than a refresh interval the data will be refreshed again in the capacitor and we won't see",
    "start": "272940",
    "end": "278580"
  },
  {
    "text": "any flips so from attackers point of view we have to optimize the time it takes in order to induce a flip and this",
    "start": "278580",
    "end": "285000"
  },
  {
    "text": "is usually 64 milliseconds it's the standard refresh interval for Dram",
    "start": "285000",
    "end": "290759"
  },
  {
    "text": "the second characteristic is that attacks are deductible usually we can use performance",
    "start": "290759",
    "end": "296340"
  },
  {
    "text": "monitoring counters to look at the cache behavior of our CPU because we got a lot",
    "start": "296340",
    "end": "302160"
  },
  {
    "text": "of cash misses if you do row Hammer because you always have to go to the dram we don't want to do any data from",
    "start": "302160",
    "end": "307560"
  },
  {
    "text": "the CPU caches so we see a lot of cache measures we can deduct this and if we detect something like an",
    "start": "307560",
    "end": "314780"
  },
  {
    "text": "application or a process that has so much cache misses we can then proactively act on that and probably",
    "start": "314780",
    "end": "321180"
  },
  {
    "text": "stop the execution of the program the third characteristic we will focus on is like you've seen in the patterns",
    "start": "321180",
    "end": "327060"
  },
  {
    "text": "we have to have this neighboring constraints so one characteristic here is that we say is flips only manifest in",
    "start": "327060",
    "end": "333780"
  },
  {
    "text": "the neighboring roles and with that we can basically um classify or build a few uh",
    "start": "333780",
    "end": "340620"
  },
  {
    "text": "mitigations the first one is guard rows you can use every second row in our drum for other",
    "start": "340620",
    "end": "346500"
  },
  {
    "text": "data for example there is work that uses this for intricity protected swap space so you effectively reduce the memory of",
    "start": "346500",
    "end": "353759"
  },
  {
    "text": "your real dram and have more swap space but then you're protected because you cannot Hammer the victim here",
    "start": "353759",
    "end": "361259"
  },
  {
    "text": "hammers he will flip guard Rose after some time",
    "start": "361259",
    "end": "366720"
  },
  {
    "text": "but the victim is protected a different idea is the targeted row refresh as we talked about the refresh",
    "start": "366720",
    "end": "373199"
  },
  {
    "text": "window is important and now we can place additional Refreshers on the victim if we see that the victim is getting",
    "start": "373199",
    "end": "379440"
  },
  {
    "text": "basically hammered so if we see here the access is too aggressor after some point we count the axises and after some",
    "start": "379440",
    "end": "386160"
  },
  {
    "text": "threshold is reached we will issue a refresh to the victim and prevent any data flips on the victim roll this TR is",
    "start": "386160",
    "end": "393060"
  },
  {
    "text": "actually part of the lpdr4x standards so probably every phone you use and every smaller handheld device uses this memory",
    "start": "393060",
    "end": "400740"
  },
  {
    "text": "that has this active role mitigation built in okay so if we have now talked",
    "start": "400740",
    "end": "406380"
  },
  {
    "text": "about the characteristics so if everything would be fine we will not give this talk so let's start the cat and mouse game about the raw hammer",
    "start": "406380",
    "end": "412199"
  },
  {
    "text": "mitigations and Terror attacks because there's some problem with Rohana mitigations",
    "start": "412199",
    "end": "418620"
  },
  {
    "text": "so let's talk about it so the first assumption where we say that frips are infrequent that I can simply build ECC",
    "start": "418620",
    "end": "425220"
  },
  {
    "text": "into it and catch raw Hammer that's sadly simply not true modern devices are",
    "start": "425220",
    "end": "430319"
  },
  {
    "text": "so badly vulnerable to Raw Hammer that there are just so many bit flips that ECC is not enough ECC can at most detect",
    "start": "430319",
    "end": "437400"
  },
  {
    "text": "four bit flips it can only correct one bit flip that's simply not enough sadly what about the second",
    "start": "437400",
    "end": "443759"
  },
  {
    "text": "characteristic that we can detect them with performance counters so me as an attack here I can just monitor my system behavior and see if I have cache mates",
    "start": "443759",
    "end": "450300"
  },
  {
    "text": "and go to memory cannot then proactively do something let's for example report the attack into an sjx enclave as Jacks",
    "start": "450300",
    "end": "457080"
  },
  {
    "text": "enclaves are completely protected from the other system and there are no performance counters updated and we actually did this in one work",
    "start": "457080",
    "end": "464099"
  },
  {
    "text": "so other characteristics 2 is not that good for against raw hammock for Roman",
    "start": "464099",
    "end": "469199"
  },
  {
    "text": "for rawhima countermeasures but what's the final one the distance one hammering we have seen that all these patterns the",
    "start": "469199",
    "end": "474960"
  },
  {
    "text": "induced flips with a distance one so trr and also the guard Pages they should be fine right",
    "start": "474960",
    "end": "480060"
  },
  {
    "text": "so that's a big problem with trr it's that it's a mitigation built in hardware",
    "start": "480060",
    "end": "485340"
  },
  {
    "text": "and it has to count the excesses to rows and there's just not an infinite number infinite number of counters in the",
    "start": "485340",
    "end": "491340"
  },
  {
    "text": "hardware so if you do really complex success patterns where you do multiple attacks at the same time you just exceed",
    "start": "491340",
    "end": "498300"
  },
  {
    "text": "the counters and TR doesn't work anymore okay so similar to Resource exhaustion yes okay so but I'm still this sounds",
    "start": "498300",
    "end": "506400"
  },
  {
    "text": "like an implementation problem so if I have a limited amount of counters I still can make a better TR implementation and fix it so I brought",
    "start": "506400",
    "end": "513240"
  },
  {
    "text": "to you a question can we build the perfect trr in order to fix that raw Hammer problem",
    "start": "513240",
    "end": "518339"
  },
  {
    "text": "no sorry not I present to you the half double effect",
    "start": "518339",
    "end": "524279"
  },
  {
    "text": "so this effect is a bit more convoluted so we have to start off back again so we",
    "start": "524279",
    "end": "529380"
  },
  {
    "text": "go back again to distance one hammering so with distance one hammering we have seen this attack pattern where we",
    "start": "529380",
    "end": "534839"
  },
  {
    "text": "interchange these aggressor axises and we Simply Now measured how long it takes an amount of excesses to induce a flip",
    "start": "534839",
    "end": "542399"
  },
  {
    "text": "into the victim role and we can see with 20K accesses we get the victim to flip this takes around 1.2 milliseconds and",
    "start": "542399",
    "end": "549240"
  },
  {
    "text": "if you remember that's within the refresh interval of the dram however we have an active defense against that",
    "start": "549240",
    "end": "555600"
  },
  {
    "text": "that's trr so we are protected against that then we have distance to row Hammer",
    "start": "555600",
    "end": "562200"
  },
  {
    "text": "where you where we Hammer one row further out if you do this we see the first flip",
    "start": "562200",
    "end": "567360"
  },
  {
    "text": "after 4 million hammers this takes 270 milliseconds so that's a lot longer than",
    "start": "567360",
    "end": "572700"
  },
  {
    "text": "the standard refresh interval so it's not possible to use distance to row Hammer to hammer on commodity devices",
    "start": "572700",
    "end": "580260"
  },
  {
    "text": "yeah and the half double effect is now basically the combination of these two we have a lot of a lot of with many",
    "start": "580260",
    "end": "587820"
  },
  {
    "text": "accesses with resistance to aggressors combined with only a few of the distance one aggressors and if we perform this",
    "start": "587820",
    "end": "595200"
  },
  {
    "text": "pattern we have to trickle tunable parameter here that we can basically change the rate between those two but if",
    "start": "595200",
    "end": "600899"
  },
  {
    "text": "we perform this we can induce a flip within 20 milliseconds of hammering and that fits into refresh interval",
    "start": "600899",
    "end": "608160"
  },
  {
    "text": "and the problem now is we don't we have to be a bit more precise what the role",
    "start": "608160",
    "end": "613620"
  },
  {
    "text": "TR plays here so yes let's take this example so an",
    "start": "613620",
    "end": "619800"
  },
  {
    "text": "attacker is hammering again and it the attacker only hammers the far aggressors here after some time TR wants to predict this",
    "start": "619800",
    "end": "627300"
  },
  {
    "text": "new aggressors because here are things they are attacked by row hammer and here R does",
    "start": "627300",
    "end": "632580"
  },
  {
    "text": "accesses to the near aggressors and it's only really a really small amount of near aggressive excesses but these are",
    "start": "632580",
    "end": "639000"
  },
  {
    "text": "enough to somehow transport the rohuma effect to the victim row and flip a bit",
    "start": "639000",
    "end": "644519"
  },
  {
    "text": "so here are the mitigation is actually helping us hammer and the best thing is or the worst thing the more refreshes",
    "start": "644519",
    "end": "651899"
  },
  {
    "text": "trr does the better it tries to protect our system the more bit flips we see so",
    "start": "651899",
    "end": "657240"
  },
  {
    "text": "we turned here are completely around so this means by now that we have basically in our chips we have an active",
    "start": "657240",
    "end": "663300"
  },
  {
    "text": "TR which have active TR in there the half double effect is actually um there and also we try to find",
    "start": "663300",
    "end": "670560"
  },
  {
    "text": "commodity devices which use which are affected by this effect and we build an end-to-end exploit to show to",
    "start": "670560",
    "end": "676440"
  },
  {
    "text": "demonstrate that this is actual problem and for that we focused on a Chromebook device which basically our Target is",
    "start": "676440",
    "end": "683279"
  },
  {
    "text": "these um physical um physical frame number specific page frame problemas which are located in",
    "start": "683279",
    "end": "688320"
  },
  {
    "text": "page tables yes and we defined four challenges that every Rohan exploit has",
    "start": "688320",
    "end": "694680"
  },
  {
    "text": "to solve and we found novel solutions for each of them the first one is every Rohan exploit needs contiguous memory",
    "start": "694680",
    "end": "701160"
  },
  {
    "text": "because we need a mapping from virtual memory to a physical memory which we usually don't know if you have a",
    "start": "701160",
    "end": "706620"
  },
  {
    "text": "continuous mapping this helps a lot think about the patterns where we have to place the rows at the specific order",
    "start": "706620",
    "end": "711899"
  },
  {
    "text": "in order to build those patterns we need to know where the location where the rows are located in memory",
    "start": "711899",
    "end": "717480"
  },
  {
    "text": "then we do an alternative to memory templating the device we have here is protected by trr and ECC this makes rohe",
    "start": "717480",
    "end": "725640"
  },
  {
    "text": "Hammer bit flips a bit unpredictable so we skip the templating process altogether",
    "start": "725640",
    "end": "731660"
  },
  {
    "text": "then we do memory massaging to put page tables where they should be",
    "start": "731700",
    "end": "737160"
  },
  {
    "text": "to put them in the victim rows to hammer them and then finally we do bit flip verification where we verify that the",
    "start": "737160",
    "end": "743880"
  },
  {
    "text": "hammer is the bit flips we introduced with row Hammer actually well it's and Do Not Crash our process and we will go",
    "start": "743880",
    "end": "749760"
  },
  {
    "text": "into detail for the fourth challenge the fourth one is a bit more interesting because if we flip a bit by accident so",
    "start": "749760",
    "end": "756420"
  },
  {
    "text": "as an access point of view if we flip a bit which we should not flip we have the possibility to crash a complete system this doesn't bring the attacker anything",
    "start": "756420",
    "end": "762899"
  },
  {
    "text": "except for the narrow service so we need a way to verify that we can basically safely access that memory location we",
    "start": "762899",
    "end": "769980"
  },
  {
    "text": "just hammered and we combine this with transient execution so basically we found that these Corruptions which the",
    "start": "769980",
    "end": "776940"
  },
  {
    "text": "operating system detects and then shuts down the system are not performed if you perform it transiently so we can start a",
    "start": "776940",
    "end": "783959"
  },
  {
    "text": "speculation window then perform the memory access and if the speculation window succeeds we know that also the",
    "start": "783959",
    "end": "790019"
  },
  {
    "text": "X's without speculation will succeed and we can access that memory location we just have targeted",
    "start": "790019",
    "end": "796579"
  },
  {
    "text": "yeah this makes our group exploit really robust and this makes it possible to",
    "start": "796579",
    "end": "803459"
  },
  {
    "text": "exploit the device in under one hour we are able to get full read and write",
    "start": "803459",
    "end": "808680"
  },
  {
    "text": "access to the whole physical memory of our Chromebook device and from there we can read and write",
    "start": "808680",
    "end": "814260"
  },
  {
    "text": "kernel memory induce our own codes and do whatever we want basically so with this figure we",
    "start": "814260",
    "end": "819540"
  },
  {
    "text": "show that we can also paralyze a lot of the steps in this end-to-end exploit and we will now focus a bit on the longest",
    "start": "819540",
    "end": "825540"
  },
  {
    "text": "part of the C2 that's basically the hammering process so it takes on average 23 minutes across multiple devices to",
    "start": "825540",
    "end": "832139"
  },
  {
    "text": "get a flip and we will now demonstrate that with um foreign",
    "start": "832139",
    "end": "838760"
  },
  {
    "text": "we are sshing into one of the Chromebook devices we have at home in Austria because someone forget to bring them",
    "start": "844740",
    "end": "851820"
  },
  {
    "text": "but we hope the connection is stable and Andreas is now starting the program",
    "start": "851820",
    "end": "859079"
  },
  {
    "text": "that does the flipping so here we get our physically contiguous memory to know where which virtual",
    "start": "859079",
    "end": "865860"
  },
  {
    "text": "addresses we have to access to access the rows in the drum we need to hammer",
    "start": "865860",
    "end": "871200"
  },
  {
    "text": "and now it's hammering so now we usually make the big gamble if we see a flip before we start stop looking at the",
    "start": "871200",
    "end": "877560"
  },
  {
    "text": "terminal and so this is a real thing this happens by chance there's a chance we see bit flips",
    "start": "877560",
    "end": "884399"
  },
  {
    "text": "in the next minute we hope so so also like are the commodity devices",
    "start": "884399",
    "end": "889500"
  },
  {
    "text": "and here's the first flip so yeah so this is a real problem and with that I",
    "start": "889500",
    "end": "895800"
  },
  {
    "text": "hope I have convinced you that this is actually the case for modern devices and we have to be a bit more specific so",
    "start": "895800",
    "end": "902040"
  },
  {
    "text": "we're just searching now for oval flips so we're now hammering with this pattern we showed you where we have like only",
    "start": "902040",
    "end": "907260"
  },
  {
    "text": "accessing this file grasses since the near aggressor accesses so these closes are actually performed by the hardware",
    "start": "907260",
    "end": "912300"
  },
  {
    "text": "so an attacker only accesses those systems two Hammers and um",
    "start": "912300",
    "end": "917760"
  },
  {
    "text": "yeah and also the point is that this is our most affected Chromebook so this is",
    "start": "917760",
    "end": "923760"
  },
  {
    "text": "so there are multiple devices and an average it takes 22 minutes this one is a bit more affected by half dollar than",
    "start": "923760",
    "end": "929579"
  },
  {
    "text": "other devices yeah and also like to be searching for any flips for an attack to work we need",
    "start": "929579",
    "end": "935760"
  },
  {
    "text": "a precise flip yes this is why we see so many bit flips now and then real Attack it will take a bit longer but yeah so",
    "start": "935760",
    "end": "942540"
  },
  {
    "text": "this is a real problem this is a bad problem this device should be protected it uses ECC and trr",
    "start": "942540",
    "end": "948600"
  },
  {
    "text": "can we do something better",
    "start": "948600",
    "end": "951800"
  },
  {
    "text": "so by now I hope we have convinced you that the current state of the art of mitigations with these underlying",
    "start": "956519",
    "end": "962519"
  },
  {
    "text": "assumptions is simply not true we have seen that some of these assumptions can easily be broken and even the most",
    "start": "962519",
    "end": "967560"
  },
  {
    "text": "obvious and convincing assumption that you can only induce spit flips into distance one is by now broken so overall",
    "start": "967560",
    "end": "973800"
  },
  {
    "text": "we have all these mitigations seen in the past and now we want to finally rethink for him and mitigations",
    "start": "973800",
    "end": "979860"
  },
  {
    "text": "we want to have a general approach to take the Integrity protection where we don't have any assumptions on how",
    "start": "979860",
    "end": "986339"
  },
  {
    "text": "rowheimer Works what the characteristics of row Hammer are where the pit trips even come from it can also be cosmic",
    "start": "986339",
    "end": "992579"
  },
  {
    "text": "rays or whatever we just protect data integrity",
    "start": "992579",
    "end": "997339"
  },
  {
    "text": "and we do this by using a message authentication code for all the data that we store with the data and compute",
    "start": "998160",
    "end": "1004940"
  },
  {
    "text": "and compare to detect data Integrity failures so we've talked a lot about this ECC so the error correcting codes",
    "start": "1004940",
    "end": "1010880"
  },
  {
    "text": "and now we'll make a similar approach we replace ECC but with something different with the Mac yes so but this is easily",
    "start": "1010880",
    "end": "1019040"
  },
  {
    "text": "done so we can easily replace we have the Space Center we can easily swap those two out but it comes one big problem with a Mac we can now suddenly",
    "start": "1019040",
    "end": "1025459"
  },
  {
    "text": "detect all those bit flips by design a cryptographic Mac is there to see",
    "start": "1025459",
    "end": "1030980"
  },
  {
    "text": "um so changes in the data and the Mac if the max don't match the data has changed",
    "start": "1030980",
    "end": "1036140"
  },
  {
    "text": "however Max are not designed to correct the data again so we have to be a bit more complex the correction gets made",
    "start": "1036140",
    "end": "1043339"
  },
  {
    "text": "complex than in error correcting code yes so we can only do a best effort correction we cannot",
    "start": "1043339",
    "end": "1049880"
  },
  {
    "text": "uh we cannot prove that we can correct any number of bit flips but it's still enough because if we just detect all the",
    "start": "1049880",
    "end": "1057380"
  },
  {
    "text": "attacks if we just detect every bit flip in the worst case we degrade all row him attacks to denial of service so even if",
    "start": "1057380",
    "end": "1063620"
  },
  {
    "text": "we are not kind of correct the bit flip in the worst case the device has to reboot or we have to shut down some",
    "start": "1063620",
    "end": "1070039"
  },
  {
    "text": "processes but the analog service is the worst thing an attacker can do so that",
    "start": "1070039",
    "end": "1075320"
  },
  {
    "text": "looks super theoretical how does it look like okay I prepared a small animation here this",
    "start": "1075320",
    "end": "1081740"
  },
  {
    "text": "is the dram this is where your data is stored and this is also where row Hammer destroys your data and here we have the",
    "start": "1081740",
    "end": "1087919"
  },
  {
    "text": "memory controller and it has a small Hardware a change to compute the Mac for",
    "start": "1087919",
    "end": "1093919"
  },
  {
    "text": "every data that is stored on the dram okay but now you use the DCC chip right",
    "start": "1093919",
    "end": "1100160"
  },
  {
    "text": "from yes then we use this Mac and we actually use ECC memory so we have the",
    "start": "1100160",
    "end": "1105260"
  },
  {
    "text": "same Army overhead as every server or something like that and we can even drop in replace",
    "start": "1105260",
    "end": "1112000"
  },
  {
    "text": "different modules so we work with normal ECC different modules and on this additional chip of the ECC",
    "start": "1112000",
    "end": "1118640"
  },
  {
    "text": "Dura module we store our integral information that's the mac and a few parody bits okay so now we know the Mac",
    "start": "1118640",
    "end": "1126200"
  },
  {
    "text": "we know that we have the data and we have a Mac so I assume on a read we now compute the Mac again and check if it",
    "start": "1126200",
    "end": "1132380"
  },
  {
    "text": "changed exactly and I read we just do exactly that if the max are the same we",
    "start": "1132380",
    "end": "1138559"
  },
  {
    "text": "know the data is fine if they are not the same we can correct the single bit flipping Hardware",
    "start": "1138559",
    "end": "1144860"
  },
  {
    "text": "and this is okay for most of the use cases so we're just correcting one flip",
    "start": "1144860",
    "end": "1150919"
  },
  {
    "text": "yes that's not much that's not much that's enough for a lot of cases where",
    "start": "1150919",
    "end": "1156260"
  },
  {
    "text": "system is not under attack a single bit flip can happen if a system is under attack we throw hammer and the ram is",
    "start": "1156260",
    "end": "1162080"
  },
  {
    "text": "really bad more bit flips can happen and this is where we bring software in",
    "start": "1162080",
    "end": "1167299"
  },
  {
    "text": "we have a new corruption exception that's handled by a new exception Handler in the operating system",
    "start": "1167299",
    "end": "1172700"
  },
  {
    "text": "everything in software and this uses correction as a search I will come to this in a second",
    "start": "1172700",
    "end": "1178460"
  },
  {
    "text": "to correct the data and we have three new CPU instructions that this",
    "start": "1178460",
    "end": "1183740"
  },
  {
    "text": "correction as a search uses okay that's a cool idea to bring software in there because suddenly we have not only the",
    "start": "1183740",
    "end": "1190400"
  },
  {
    "text": "data in the Mac we also get the context of the data and that's super important",
    "start": "1190400",
    "end": "1195440"
  },
  {
    "text": "because the operating system knows best at which location which date is located think of if this page is actually",
    "start": "1195440",
    "end": "1201380"
  },
  {
    "text": "located on disk we don't even need to correct it because it's just a copy of the disk data we can drop the corrupted",
    "start": "1201380",
    "end": "1207559"
  },
  {
    "text": "data and reload it from the disk we suddenly get a lot of new opportunities to recover data except for correcting",
    "start": "1207559",
    "end": "1214039"
  },
  {
    "text": "the actual flip yeah that's really nice there's one small problem",
    "start": "1214039",
    "end": "1219919"
  },
  {
    "text": "this operating system and the exception handling everything that software that's in the dram so if I know a super smart",
    "start": "1219919",
    "end": "1226640"
  },
  {
    "text": "attacker I would just Target another software with raw Hammer so if they're doing something like this",
    "start": "1226640",
    "end": "1232340"
  },
  {
    "text": "yes so the software is also located in memory so I can now induce flips in the",
    "start": "1232340",
    "end": "1238039"
  },
  {
    "text": "exception Handler that should handle flips to prevent this we added a small secure memory to the CPU it's only four",
    "start": "1238039",
    "end": "1245000"
  },
  {
    "text": "pages large that's nothing compared to all the CPU caches we have in modern CPUs so area overhead is not a problem",
    "start": "1245000",
    "end": "1251000"
  },
  {
    "text": "here and we had our exception Handler in this small cqs RAM on a CPU die it's not",
    "start": "1251000",
    "end": "1256520"
  },
  {
    "text": "affected by raw hammer and we are pretty much so that memory is actually different technology than the DRM we",
    "start": "1256520",
    "end": "1262220"
  },
  {
    "text": "want to protect exactly so Jason or him are there okay okay that looks like an",
    "start": "1262220",
    "end": "1267440"
  },
  {
    "text": "interesting concept but now we do a Mac computation on each memory axis in memory right that must be super slow",
    "start": "1267440",
    "end": "1275000"
  },
  {
    "text": "it's not so we use this Mac design we use a pmec construction where we do most",
    "start": "1275000",
    "end": "1281860"
  },
  {
    "text": "compute 4 data blocks in parallel and we use the karma block Cipher which is",
    "start": "1281860",
    "end": "1287900"
  },
  {
    "text": "developed by Qualcomm and used in almost all arm CPUs for pointer authentication",
    "start": "1287900",
    "end": "1293480"
  },
  {
    "text": "so it's already in use in CPUs right now and it's really low latency so we can compute the Mac of 256 bits data in only",
    "start": "1293480",
    "end": "1302080"
  },
  {
    "text": "5.13 nanoseconds and you have a if you have a bigger data World 512 bits we can",
    "start": "1302080",
    "end": "1308299"
  },
  {
    "text": "compute the Mac in 6.6 nanoseconds compared to the average 100 nanoseconds",
    "start": "1308299",
    "end": "1313400"
  },
  {
    "text": "a duramaxis takes that's just a small additional overhead okay I'm getting more convinced but how",
    "start": "1313400",
    "end": "1320480"
  },
  {
    "text": "does this correction in a software sense actually work so now we have this exception and you handle that exception right yes so we have this exception it",
    "start": "1320480",
    "end": "1328280"
  },
  {
    "text": "looks a bit like a page full Handler from the outside we get the physical address from where this bit flip",
    "start": "1328280",
    "end": "1334340"
  },
  {
    "text": "happened where the corruption is and the CO2 register and then we have three new instructions the first one write the",
    "start": "1334340",
    "end": "1341360"
  },
  {
    "text": "physical address that's a good question because you cannot trust page tables at this point page tables are a really good",
    "start": "1341360",
    "end": "1347900"
  },
  {
    "text": "Target for Rohana attacks as we've seen in the explored so if you would have a virtual address we need the page tables",
    "start": "1347900",
    "end": "1353419"
  },
  {
    "text": "to resolve to the physical address and therefore we directly get the physical address",
    "start": "1353419",
    "end": "1358460"
  },
  {
    "text": "and then we have a load instruction that loads this corrupted data into a CPU register",
    "start": "1358460",
    "end": "1364640"
  },
  {
    "text": "using the physical address then we have instruction to compute the Mac so we are not doing the Mac",
    "start": "1364640",
    "end": "1371000"
  },
  {
    "text": "computation itself in software that would be too slow so we do their Mac computation on Hardware",
    "start": "1371000",
    "end": "1376640"
  },
  {
    "text": "and then we have instruction to write the data back into the memory if it is corrected okay so",
    "start": "1376640",
    "end": "1382820"
  },
  {
    "text": "there's only three instructions we have to add to the instruction set in order to perform the correction yes but but still we're going back to the error",
    "start": "1382820",
    "end": "1389000"
  },
  {
    "text": "correcting code case we're now using a Mac a Mac can not correct bit flips that's true",
    "start": "1389000",
    "end": "1394580"
  },
  {
    "text": "so this is why we do only a best effort correction the only thing we can really do is boot",
    "start": "1394580",
    "end": "1400820"
  },
  {
    "text": "for search with approximatic quality so both for search means we flip one bit we compute the Mac We compare it we flip",
    "start": "1400820",
    "end": "1407299"
  },
  {
    "text": "the next bit we compute the Mac We compare it until we flip the correct bits the max match and we are happy we",
    "start": "1407299",
    "end": "1413299"
  },
  {
    "text": "know that we corrected the data the problem is that the Macs are also in",
    "start": "1413299",
    "end": "1419480"
  },
  {
    "text": "the dram and if an attacker hammers the dram also bits in the Mac could change",
    "start": "1419480",
    "end": "1425000"
  },
  {
    "text": "so what we allow to help Miss we allow a small number of bit flips even in the Mac to be different so here we see that",
    "start": "1425000",
    "end": "1433159"
  },
  {
    "text": "we have the same data but one bit in the Mac changed we still say okay we're pretty confident that our data is",
    "start": "1433159",
    "end": "1439640"
  },
  {
    "text": "correct more on this in a second and then we use some parity bits to",
    "start": "1439640",
    "end": "1445520"
  },
  {
    "text": "shrink the search space so we actually get a quite good performance with our boot for search so with the approximate",
    "start": "1445520",
    "end": "1452900"
  },
  {
    "text": "equality basically we we say that it's unlikely that the two Max are similar enough right exactly the chance the two",
    "start": "1452900",
    "end": "1459320"
  },
  {
    "text": "Max is similar if the data is similar at the same time is extremely low and this protects us here",
    "start": "1459320",
    "end": "1465559"
  },
  {
    "text": "okay okay we're getting there do you have any numbers so how how fast is software brute forcing that sounds like",
    "start": "1465559",
    "end": "1471500"
  },
  {
    "text": "a terrible idea to brute force and make it does but it's not that bad so here we have this graph on the left the bar you",
    "start": "1471500",
    "end": "1478700"
  },
  {
    "text": "can see ECC memory this is just the it's a bar because we use the numbers for",
    "start": "1478700",
    "end": "1483799"
  },
  {
    "text": "many different CPUs ECC correction takes a different amount of time from a few nanoseconds to up to 10 milliseconds",
    "start": "1483799",
    "end": "1490580"
  },
  {
    "text": "and then the Green Dot is how fast our single bit correction in Hardware is",
    "start": "1490580",
    "end": "1496400"
  },
  {
    "text": "and then the blue line is the correction in software first there's a huge overhead because of the exception and",
    "start": "1496400",
    "end": "1501860"
  },
  {
    "text": "everything these are these 200 200 microseconds and then the overhead from",
    "start": "1501860",
    "end": "1506900"
  },
  {
    "text": "The Brute Force search itself takes over but you can still correct up to five bit",
    "start": "1506900",
    "end": "1512480"
  },
  {
    "text": "flips in under seconds and under second and eight bit flips in our almost reasonable time of a few hours if the",
    "start": "1512480",
    "end": "1519559"
  },
  {
    "text": "data is really important maybe a few hours is still a valid trade-off",
    "start": "1519559",
    "end": "1525200"
  },
  {
    "text": "okay um the video we also have more evaluation based on the game 5 Hardware simulator",
    "start": "1525200",
    "end": "1531380"
  },
  {
    "text": "so we implemented CSI rohama in hm 5 we",
    "start": "1531380",
    "end": "1536840"
  },
  {
    "text": "implemented the Mac computation we implemented all the CPU instructions and then we also modified the Linux kernel",
    "start": "1536840",
    "end": "1542419"
  },
  {
    "text": "to include the exception Handler and do the Brute Force search and everything so",
    "start": "1542419",
    "end": "1547880"
  },
  {
    "text": "there's actually like a real prototype of that simulated right because they can't build Hardware we cannot change the CPU Hardware sadly but there is a",
    "start": "1547880",
    "end": "1554539"
  },
  {
    "text": "real prototype in software that does everything and we evaluated the correct",
    "start": "1554539",
    "end": "1559940"
  },
  {
    "text": "functionality with this so we just simulated bit flips in hm5 in HTML5 memory and it was able to detect them",
    "start": "1559940",
    "end": "1567140"
  },
  {
    "text": "and to correct them and then the system kept running even with bit flips in the kernel and everything",
    "start": "1567140",
    "end": "1573140"
  },
  {
    "text": "and we also use this to evaluate the performance overheads for a system that's not under attack we just added",
    "start": "1573140",
    "end": "1579080"
  },
  {
    "text": "the latency for every Mac computation to every memory access to the dram and we use this performance or to do to get the",
    "start": "1579080",
    "end": "1586880"
  },
  {
    "text": "performance overhead which you can see here so in a graph you see around on a mean overhead of two percent which is",
    "start": "1586880",
    "end": "1593179"
  },
  {
    "text": "five percent one percent sorry and we have a worst case of four percent",
    "start": "1593179",
    "end": "1598279"
  },
  {
    "text": "overhead so if you think about it it's a back in impact on the performance however with that we have seen we can",
    "start": "1598279",
    "end": "1605240"
  },
  {
    "text": "basically fix all raw Hammer type data corruption we can fix normal data corruption or like um the cosmic rays",
    "start": "1605240",
    "end": "1611779"
  },
  {
    "text": "you mentioned from yes from different sources we will just detect any number of bit flips",
    "start": "1611779",
    "end": "1617240"
  },
  {
    "text": "for a worst case overhead of four percent still there's one part still missing and that's the approximate",
    "start": "1617240",
    "end": "1622940"
  },
  {
    "text": "equality we maybe we have some crypto people in the crowd and if you're talking about we have Max and something",
    "start": "1622940",
    "end": "1628039"
  },
  {
    "text": "we don't care about a few bits that sounds dangerous it does so we of course have alerted the security of this whole",
    "start": "1628039",
    "end": "1634340"
  },
  {
    "text": "approach because doing stuff with Max is always about probability that things things can go",
    "start": "1634340",
    "end": "1640760"
  },
  {
    "text": "wrong and things will go wrong after some time it just depends on how long this time is first in the approximate equality",
    "start": "1640760",
    "end": "1648940"
  },
  {
    "text": "if you have for example five data bit flips then we need p",
    "start": "1649039",
    "end": "1655460"
  },
  {
    "text": "um different Mac computations to check all the possibilities for which we can",
    "start": "1655460",
    "end": "1661640"
  },
  {
    "text": "have for five data bit flips so during the push first search we have to flip five bits and all the different",
    "start": "1661640",
    "end": "1666860"
  },
  {
    "text": "possibilities are p and then we take log 2 of P at the same time we allow D3 bits in the",
    "start": "1666860",
    "end": "1674779"
  },
  {
    "text": "Mac to be different so that's the approximate equality that's the proximate equality three bits can be",
    "start": "1674779",
    "end": "1680539"
  },
  {
    "text": "different this decreases the strength of our Mac from 56 bits that's our make length to only 41.2 bits so by only",
    "start": "1680539",
    "end": "1688400"
  },
  {
    "text": "allowing three bits to be different this decreases the Mac strength by a lot but the 41.2 is still a lot larger than 26",
    "start": "1688400",
    "end": "1696080"
  },
  {
    "text": "and therefore this is still secure so the chance of finding a second pre-match instead of the real correction is still",
    "start": "1696080",
    "end": "1701840"
  },
  {
    "text": "really low and the further we go up with data bit flips we search we have to go down with the number of",
    "start": "1701840",
    "end": "1709159"
  },
  {
    "text": "bit flips that are different we are in the Mac so if you have eight the bit",
    "start": "1709159",
    "end": "1715100"
  },
  {
    "text": "flips we cannot allow any bits in the Mac to be different otherwise the chance of finding a second free image instead",
    "start": "1715100",
    "end": "1720320"
  },
  {
    "text": "of the real data would be quite High we also also looked at the silent data",
    "start": "1720320",
    "end": "1726740"
  },
  {
    "text": "corruption rate for a system that's not under attack so we took data from different works that looked at bit flips",
    "start": "1726740",
    "end": "1734299"
  },
  {
    "text": "happening in huge server farms and how how often this happens and we computed that if we use this natural data of",
    "start": "1734299",
    "end": "1740779"
  },
  {
    "text": "bitflix happening the chance that the silent data corruption happens which means that one bit flip",
    "start": "1740779",
    "end": "1747260"
  },
  {
    "text": "changes the data in a way that it is actually a second pre-image of the original data and the max are the same",
    "start": "1747260",
    "end": "1752659"
  },
  {
    "text": "happens once per 10 to the power of 9 billion years so that's quite secure",
    "start": "1752659",
    "end": "1759980"
  },
  {
    "text": "will take some time yes yes and if a system is under attack if throw hammer and this row Hammer is attacker is",
    "start": "1759980",
    "end": "1766520"
  },
  {
    "text": "really fortunate the attacker is able to flip bits every 128 milliseconds for a",
    "start": "1766520",
    "end": "1773840"
  },
  {
    "text": "full year so this is way way worse than the Chromebook you just saw it's like 10 flips per second for a full year",
    "start": "1773840",
    "end": "1780080"
  },
  {
    "text": "straight then the attacker has a chance to find a second pre-match",
    "start": "1780080",
    "end": "1785480"
  },
  {
    "text": "um with the chance of 10 to the power of minus four percent so still really low",
    "start": "1785480",
    "end": "1791840"
  },
  {
    "text": "and also this attack is not really realistic that has so many bit flips so let's go back to Chromebook case again",
    "start": "1791840",
    "end": "1797779"
  },
  {
    "text": "so basically what we saw if we do it for one year straight through we would have seen I",
    "start": "1797779",
    "end": "1802820"
  },
  {
    "text": "don't know millions of flips on a Chromebook yes okay okay so we mentioned that we have",
    "start": "1802820",
    "end": "1809360"
  },
  {
    "text": "software in the the big advantage of this approach is the software but we also wanted to take a look on how easy",
    "start": "1809360",
    "end": "1815419"
  },
  {
    "text": "would such an approach be to apply on a wider scale and if you think about it it's a software Hardware co-design so we",
    "start": "1815419",
    "end": "1821659"
  },
  {
    "text": "have software changes which are usually easy to deploy and also we have Hardware changes which take some time to get",
    "start": "1821659",
    "end": "1827299"
  },
  {
    "text": "adapted to but if you now think about like virtualized environments like server Farms like AWS or something like",
    "start": "1827299",
    "end": "1833240"
  },
  {
    "text": "that we can basically use a virtualized environment in order to transparently",
    "start": "1833240",
    "end": "1838279"
  },
  {
    "text": "protect our guests now against data corruption basically we just perform the approach which has talked about on the",
    "start": "1838279",
    "end": "1844520"
  },
  {
    "text": "host system and if a guest accesses data and the corruption exception is raised we just catch it in the host system the",
    "start": "1844520",
    "end": "1851779"
  },
  {
    "text": "host and transparently corrects Brute Force searches the correct value and then each restarts the guests after the",
    "start": "1851779",
    "end": "1858919"
  },
  {
    "text": "corrections of after the corruption is fixed so we have guest support is only",
    "start": "1858919",
    "end": "1864260"
  },
  {
    "text": "optional we don't need it if a guest supports you it would support CSI raw Hammer then it could also do",
    "start": "1864260",
    "end": "1870020"
  },
  {
    "text": "Advanced correction mechanisms like Reloading Data from disk and stuff like that but this makes upgrading relatively",
    "start": "1870020",
    "end": "1876500"
  },
  {
    "text": "easily so if the hardware changes are there then a server Farm could easily",
    "start": "1876500",
    "end": "1881600"
  },
  {
    "text": "upgrade all the systems to CS arohama by just upgrading the hosts and the virtual machines can run as is which is quite",
    "start": "1881600",
    "end": "1888919"
  },
  {
    "text": "neat so let's talk about about a few possibilities we have so we have seen",
    "start": "1888919",
    "end": "1894260"
  },
  {
    "text": "that we have now basically the problem to find a correct value for a given Mac and we can simply think about it get a",
    "start": "1894260",
    "end": "1900860"
  },
  {
    "text": "bit created so we could offer basically like data corruption correction as a service so you give me your corrupted",
    "start": "1900860",
    "end": "1906740"
  },
  {
    "text": "data and I give you back the original data that matches the Mac sounds reasonable we could also do",
    "start": "1906740",
    "end": "1912799"
  },
  {
    "text": "something like correction by GPT software opens up so many possibilities so you can just ask ask.bd find the",
    "start": "1912799",
    "end": "1920779"
  },
  {
    "text": "error in test message you probably already found it so let it test the following hash this",
    "start": "1920779",
    "end": "1926000"
  },
  {
    "text": "should be the hash of the correct message and chatgpt answers the",
    "start": "1926000",
    "end": "1931100"
  },
  {
    "text": "following this is not really possible because a hash function is a one-way function",
    "start": "1931100",
    "end": "1936159"
  },
  {
    "text": "therefore it's not possible blah blah blah I mean that sounds quite reasonable",
    "start": "1936159",
    "end": "1941600"
  },
  {
    "text": "but yeah so I asked it if it can Brute Force the answer for me and that's certainly",
    "start": "1941600",
    "end": "1948080"
  },
  {
    "text": "not possible I mean maybe we need a new version of this you forgot to you maybe it does the",
    "start": "1948080",
    "end": "1953659"
  },
  {
    "text": "problem so no no back to topic so if you really think about it if you have like a server",
    "start": "1953659",
    "end": "1959539"
  },
  {
    "text": "farm with big scale we could for example deploy an fgba is on accelerator that's dedicated for the specific task of",
    "start": "1959539",
    "end": "1966500"
  },
  {
    "text": "finding finding the correct value for the corruption and we could forget like",
    "start": "1966500",
    "end": "1971899"
  },
  {
    "text": "a half a million Karma blocks on the device and largely scale up the performance of this correction finding",
    "start": "1971899",
    "end": "1977600"
  },
  {
    "text": "so it would no longer take five hours on a standard CPU but only 40 seconds for an 8-bit data flip in a single data",
    "start": "1977600",
    "end": "1984980"
  },
  {
    "text": "world and if you go back again to the Chromebook case there we see not so many flips in a data world we see a lot of",
    "start": "1984980",
    "end": "1991279"
  },
  {
    "text": "flips but not like many in the same data world so there we already gain a lot you're thinking that okay we are going",
    "start": "1991279",
    "end": "1997279"
  },
  {
    "text": "from a hardware deduction to software and now back to Hardware acceleration that doesn't",
    "start": "1997279",
    "end": "2003279"
  },
  {
    "text": "really make sense but it does because we don't need this Hardware acceleration in every computer in our server farm for",
    "start": "2003279",
    "end": "2009399"
  },
  {
    "text": "example if a server Farm has only a few correction nodes this is enough because 8-bit flips don't happen all the time",
    "start": "2009399",
    "end": "2016000"
  },
  {
    "text": "they have maybe for one system that's under attack or for another system once per year so we just have a huge server",
    "start": "2016000",
    "end": "2022539"
  },
  {
    "text": "Farm we have one data correction node that has some Hardware accelerated correctors specialized data",
    "start": "2022539",
    "end": "2029500"
  },
  {
    "text": "correction notes exactly this is all stuff that's possible because we can do things in software",
    "start": "2029500",
    "end": "2035980"
  },
  {
    "text": "and also if we go back to the examples we mentioned now we have finally like the context for the data stored in",
    "start": "2035980",
    "end": "2041620"
  },
  {
    "text": "memory and with that and the kernel and the operating system probably knows best we can now basically protect things where we know where to",
    "start": "2041620",
    "end": "2049060"
  },
  {
    "text": "reconstruct the data from so think of Kernel code if we know that we have a flip on that position in the kernel we",
    "start": "2049060",
    "end": "2055000"
  },
  {
    "text": "know probably the function which it belongs to and usually columns don't do cheat code or something like that so we",
    "start": "2055000",
    "end": "2060280"
  },
  {
    "text": "can simply reload the code from somewhere else we know that code also for page tables the one thing we",
    "start": "2060280",
    "end": "2065440"
  },
  {
    "text": "targeted in the exploits we cannot use the the operating systems representation",
    "start": "2065440",
    "end": "2071020"
  },
  {
    "text": "of page tables to reconstruct the page table simply after we've seen that there's a flip",
    "start": "2071020",
    "end": "2076300"
  },
  {
    "text": "or other structures like for example the task struct there are many values in there we know which ranges these values",
    "start": "2076300",
    "end": "2083260"
  },
  {
    "text": "can have we know which are valid values so when we do a boot for search for structs where we know the data or how",
    "start": "2083260",
    "end": "2090520"
  },
  {
    "text": "the data should look like we can extremely improve the Brute Force search because it's not the Brute Force search",
    "start": "2090520",
    "end": "2095858"
  },
  {
    "text": "over the whole data but only values that are valid for this task struct let's say user ID can be at most 65",
    "start": "2095859",
    "end": "2104800"
  },
  {
    "text": "000. yes and then we know we only have to search this range if we know there is",
    "start": "2104800",
    "end": "2109960"
  },
  {
    "text": "a bit flip also there might be data structures where flips are irrelevant if you have a flip in a JPEG for example or",
    "start": "2109960",
    "end": "2115660"
  },
  {
    "text": "pH of a JP not for B and G you might not even care about it so if you know context to the data you're actually",
    "start": "2115660",
    "end": "2121420"
  },
  {
    "text": "protecting it makes Much More Much things more flexible in the same sense and the biggest example we could have is",
    "start": "2121420",
    "end": "2127300"
  },
  {
    "text": "think of a page if we have like four four kilobytes of memory and we know that we can reload the data from the",
    "start": "2127300",
    "end": "2133000"
  },
  {
    "text": "disk we can basically correct 32k bit flips in the worst case or in the best",
    "start": "2133000",
    "end": "2138040"
  },
  {
    "text": "case with a single reload of a page that's way more than the eight flips we can correct as a search because now we",
    "start": "2138040",
    "end": "2143440"
  },
  {
    "text": "have the context we know how to get the data back and also like there are a lot of optimizations we could use if we",
    "start": "2143440",
    "end": "2149680"
  },
  {
    "text": "mentioned that so like this program mitigation or this data corruption mitigation in general to beyond that",
    "start": "2149680",
    "end": "2155200"
  },
  {
    "text": "scope we're currently yes the same thing because the main performance impact of CSR rohama is caused by doing the Mac",
    "start": "2155200",
    "end": "2161200"
  },
  {
    "text": "computation on every memory read and every memory writes we always have to compute the Mac",
    "start": "2161200",
    "end": "2166540"
  },
  {
    "text": "but the Mac will be true 99.999 of the time the Mac will be correct and the",
    "start": "2166540",
    "end": "2172599"
  },
  {
    "text": "data will be fine so we could simply transiently execute with unverified data while the Mac is checked we already do",
    "start": "2172599",
    "end": "2180339"
  },
  {
    "text": "transcend execution but yeah there's a whole track about Trends and execution attacks and how they go wrong are you",
    "start": "2180339",
    "end": "2186040"
  },
  {
    "text": "sure you want to do that I just say it really shortly here there is work",
    "start": "2186040",
    "end": "2191260"
  },
  {
    "text": "that tells us that this can be made secure we didn't evaluate it fully but we say it is possible to do this and",
    "start": "2191260",
    "end": "2198160"
  },
  {
    "text": "then we would have CSL Ro Hammer with no performance impact",
    "start": "2198160",
    "end": "2203400"
  },
  {
    "text": "that sounds great so with that we already come to the conclusion and I",
    "start": "2203440",
    "end": "2208480"
  },
  {
    "text": "hope we have convinced you that mitigations for Roar Hammer with assumptions on characteristics of roheimer can go wrong are they are going",
    "start": "2208480",
    "end": "2215920"
  },
  {
    "text": "wrong that we have basically we ran through a list and yeah if you bring software to the",
    "start": "2215920",
    "end": "2222640"
  },
  {
    "text": "error correction and process we have so much more flexibility to do things we can do the Brute Force approach to try",
    "start": "2222640",
    "end": "2228520"
  },
  {
    "text": "to find the correct data to the Mac we can reload the data from disk or I don't know from a network outside the",
    "start": "2228520",
    "end": "2234520"
  },
  {
    "text": "correction yes we can do so many things if you are interested in this stuff all",
    "start": "2234520",
    "end": "2241420"
  },
  {
    "text": "our code is open source so the exploit is the half double you can look at the exploit code and all the hardware",
    "start": "2241420",
    "end": "2248500"
  },
  {
    "text": "simulation and modified Linux kernel and everything for CSL Hammer it's open source and you can run it yourself and",
    "start": "2248500",
    "end": "2255220"
  },
  {
    "text": "experiment with it and also for the exploit code there's also like like we heard in the keynote it's more like how to find if you're",
    "start": "2255220",
    "end": "2261640"
  },
  {
    "text": "affected we also have like tools to find out if you're affected or not yes you can simply run yeah",
    "start": "2261640",
    "end": "2268119"
  },
  {
    "text": "if you're interested in more details read our papers there is a lot more stuff going on that's interesting",
    "start": "2268119",
    "end": "2275560"
  },
  {
    "text": "and with this thank you very much and we have two minutes for questions so if someone",
    "start": "2275560",
    "end": "2281320"
  },
  {
    "text": "has a question there's a microphone in the middle actually we have seven",
    "start": "2281320",
    "end": "2286800"
  },
  {
    "text": "equals 240. what no we have seven minutes for questions oh we have seven minutes great",
    "start": "2287140",
    "end": "2294000"
  },
  {
    "text": "so if there are any so thank you [Applause]",
    "start": "2294000",
    "end": "2300390"
  },
  {
    "text": "[Music]",
    "start": "2300390",
    "end": "2303500"
  },
  {
    "text": "[Music]",
    "start": "2307350",
    "end": "2310449"
  }
]