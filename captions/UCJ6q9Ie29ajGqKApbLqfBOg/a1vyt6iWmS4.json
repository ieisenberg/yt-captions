[
  {
    "text": "[Music]",
    "start": "1130",
    "end": "14240"
  },
  {
    "text": "hello everyone welcome to our talk my name is jin long from 360 alpha lab",
    "start": "14240",
    "end": "19680"
  },
  {
    "text": "today my colleague joe pong and i are going to share and support chain to remotely root modern android devices",
    "start": "19680",
    "end": "26000"
  },
  {
    "text": "with only two vulnerabilities this work is also contributed by han hong li and monsanto we are all security",
    "start": "26000",
    "end": "33520"
  },
  {
    "text": "researchers at 360 alpha lab our team mainly focuses on mobile security including trust zone kernel",
    "start": "33520",
    "end": "41360"
  },
  {
    "text": "applications like browser and so on we have reported more than 400 vulnerabilities to top vendors and won",
    "start": "41360",
    "end": "48960"
  },
  {
    "text": "the highest reward of the asr program in 2017 and google apr in 2019",
    "start": "48960",
    "end": "57039"
  },
  {
    "text": "we also successfully planned many targets in poncho on and tm4 contests",
    "start": "57039",
    "end": "64160"
  },
  {
    "text": "this talk many consists of four parts a brief review of the remote attack",
    "start": "64720",
    "end": "70560"
  },
  {
    "text": "surface of android devices followed by the overview of our exploit chain",
    "start": "70560",
    "end": "76159"
  },
  {
    "text": "then we will detail the root cause of this vulnerabilities and share the export strategy",
    "start": "76159",
    "end": "81840"
  },
  {
    "text": "at last we will present a demo of remotely rooting a pixel 4.",
    "start": "81840",
    "end": "88080"
  },
  {
    "text": "so let's get started for mobile device there are usually two types of entry points for known for",
    "start": "88080",
    "end": "94799"
  },
  {
    "text": "non-physical attacks technologies such as bluetooth nfc and",
    "start": "94799",
    "end": "100479"
  },
  {
    "text": "baseband allow mobile for remote communications so attackers can send malicious traffic",
    "start": "100479",
    "end": "106640"
  },
  {
    "text": "to the connected device this kind of tech often doesn't need",
    "start": "106640",
    "end": "111680"
  },
  {
    "text": "user interaction but is more limited in range as compared to the attack over the",
    "start": "111680",
    "end": "117280"
  },
  {
    "text": "internet technologies such as mailing instant",
    "start": "117280",
    "end": "122560"
  },
  {
    "text": "messaging and web browsers can be targeted over the internet and have a larger test service on their",
    "start": "122560",
    "end": "129520"
  },
  {
    "text": "own as they often must deal with executing applications logic rendering of web",
    "start": "129520",
    "end": "135680"
  },
  {
    "text": "pages and other online protocols a typical remote solution is to use the",
    "start": "135680",
    "end": "142239"
  },
  {
    "text": "browser as the entry point to obtain code execution capabilities in the",
    "start": "142239",
    "end": "147599"
  },
  {
    "text": "render process since this process is highly sandboxed attackers need to change other box for",
    "start": "147599",
    "end": "154720"
  },
  {
    "text": "escaping the sandbox and elevating privileged to system user or root",
    "start": "154720",
    "end": "161840"
  },
  {
    "text": "since the last time our team discovered the tv zone explorer chain to achieve one click remote route on pixel 3",
    "start": "161840",
    "end": "168959"
  },
  {
    "text": "we once again said afterwards this goal targeting new pixel devices with latest",
    "start": "168959",
    "end": "174000"
  },
  {
    "text": "updates we named the new explorer chain man code",
    "start": "174000",
    "end": "179360"
  },
  {
    "text": "and reported to google in july 2020 so why mangkhut",
    "start": "179360",
    "end": "184959"
  },
  {
    "text": "in september 2018 a typhon named mangkhut formed on the pacific ocean",
    "start": "184959",
    "end": "190800"
  },
  {
    "text": "at about the same time a powerful vulnerability was introduced into the angel kernel which we used in this",
    "start": "190800",
    "end": "198239"
  },
  {
    "text": "exploit chain to escalate from the highly sandbox process to root",
    "start": "198239",
    "end": "204159"
  },
  {
    "text": "while the typhoon monkeys caused extensive damage in the real world the vulnerability may show its",
    "start": "204159",
    "end": "210560"
  },
  {
    "text": "destructive power in cyberspace the exploit chain only consists of two",
    "start": "210560",
    "end": "218080"
  },
  {
    "text": "bugs a type confusion bug in chrome and a kernel box which can be leveraged",
    "start": "218080",
    "end": "223680"
  },
  {
    "text": "to ask to escalate from the highly sandbox process to root",
    "start": "223680",
    "end": "229040"
  },
  {
    "text": "this chain affects a wide range of devices running multiple versions of android system",
    "start": "229040",
    "end": "235120"
  },
  {
    "text": "and it is the first reported exploit chain to remotely rooting pixel 4",
    "start": "235120",
    "end": "240480"
  },
  {
    "text": "and acknowledge it in google vrp annual report",
    "start": "240480",
    "end": "246480"
  },
  {
    "text": "so here is the first step rce in chrome render process",
    "start": "247040",
    "end": "253200"
  },
  {
    "text": "this bug exists in the promised or settled building function of chrome's vh",
    "start": "253760",
    "end": "259440"
  },
  {
    "text": "javascript engine let's take a look at the function first it accepts an iterable object as",
    "start": "259440",
    "end": "266800"
  },
  {
    "text": "parameter in which each member is a promise the function returns a promise",
    "start": "266800",
    "end": "272560"
  },
  {
    "text": "immediately and the output promise is fulfilled with the jazz array only after",
    "start": "272560",
    "end": "278960"
  },
  {
    "text": "all the giving promises have settled the array contains objects that each",
    "start": "278960",
    "end": "284479"
  },
  {
    "text": "describes the outcome of each input promise",
    "start": "284479",
    "end": "289680"
  },
  {
    "text": "here is an example the input contains two promises one is fulfilled with value one and the",
    "start": "289759",
    "end": "297440"
  },
  {
    "text": "other is rejected with arrow two promise all settled returns a new",
    "start": "297440",
    "end": "302800"
  },
  {
    "text": "promise as its output and we call the then method on it",
    "start": "302800",
    "end": "308400"
  },
  {
    "text": "since all input promises have settled we get the result array in a callback",
    "start": "308400",
    "end": "314320"
  },
  {
    "text": "the result array contains two objects adding the stereo and index one",
    "start": "314320",
    "end": "320560"
  },
  {
    "text": "describing the output of input vertices",
    "start": "320560",
    "end": "325800"
  },
  {
    "text": "from the perspective of code implementation way h needs to manage a result.js array",
    "start": "326400",
    "end": "334160"
  },
  {
    "text": "and analog some space for storing the outcome for example when the first",
    "start": "334160",
    "end": "339360"
  },
  {
    "text": "moment is fulfilled v8 stores the result in the fixed array adding that zero",
    "start": "339360",
    "end": "345759"
  },
  {
    "text": "more importantly user could get the adjust array only after all the giving promises have settled which means if",
    "start": "345759",
    "end": "353600"
  },
  {
    "text": "there is any promise stays in pending state where it would not return the jazz",
    "start": "353600",
    "end": "358639"
  },
  {
    "text": "great to user so how does v8 know all promises are",
    "start": "358639",
    "end": "364880"
  },
  {
    "text": "settled this requires a cross-context variable named remaining nms count",
    "start": "364880",
    "end": "372000"
  },
  {
    "text": "it is initialized with the number of input promises and is decreased by 1",
    "start": "372000",
    "end": "378639"
  },
  {
    "text": "when the promise is settled when it becomes 0 v8 would return the",
    "start": "378639",
    "end": "384319"
  },
  {
    "text": "resultant rate according to the specification a promise",
    "start": "384319",
    "end": "391840"
  },
  {
    "text": "is said to be settled if it is either fulfilled or rejected",
    "start": "391840",
    "end": "396880"
  },
  {
    "text": "so either resolve animate function or reject element function will get call",
    "start": "396880",
    "end": "402240"
  },
  {
    "text": "depending on the promise is fulfilled or rejected and both of them were eventually called",
    "start": "402240",
    "end": "408560"
  },
  {
    "text": "promise or resolve elements closure function this is way well where it stores the",
    "start": "408560",
    "end": "415919"
  },
  {
    "text": "promise outcome to a resultant rate and counts down the number of remaining pending promises",
    "start": "415919",
    "end": "423840"
  },
  {
    "text": "this function is implemented using torque language whose syntax looks like",
    "start": "425840",
    "end": "432240"
  },
  {
    "text": "typescript we can see that it reads remaining ms count from the function context slot",
    "start": "432240",
    "end": "438400"
  },
  {
    "text": "first and subtract 1 and save it back to the context",
    "start": "438400",
    "end": "444240"
  },
  {
    "text": "when remaining anim's count becomes to 0 the function will return an array of",
    "start": "444240",
    "end": "449520"
  },
  {
    "text": "objects as a result normally add the resolve element",
    "start": "449520",
    "end": "456319"
  },
  {
    "text": "function where reject animate function should only be called once at most",
    "start": "456319",
    "end": "461360"
  },
  {
    "text": "which means turning a pending promise into a full field or rejected state but what if we could call them both",
    "start": "461360",
    "end": "469280"
  },
  {
    "text": "the remaining enemies count would be decreased by 2 and it would become to 0 when only half",
    "start": "469280",
    "end": "476319"
  },
  {
    "text": "of input promises are settled as a result user will get the result",
    "start": "476319",
    "end": "481919"
  },
  {
    "text": "array at an earlier time here is a profile concept about how to",
    "start": "481919",
    "end": "489599"
  },
  {
    "text": "get these two functions we call the promise or settled function on our",
    "start": "489599",
    "end": "494960"
  },
  {
    "text": "custom divide class where it would call the resolve method to get next promise",
    "start": "494960",
    "end": "501360"
  },
  {
    "text": "and try to call the dam method defined on the next premise we can see that",
    "start": "501360",
    "end": "507199"
  },
  {
    "text": "resolve anime function and reject enemy function are passed as parameters",
    "start": "507199",
    "end": "513360"
  },
  {
    "text": "that's how we get these two functions and we can call any of them whenever we want",
    "start": "513360",
    "end": "520240"
  },
  {
    "text": "so this may result in type confusion if the attacker gets the dot array and",
    "start": "520240",
    "end": "525920"
  },
  {
    "text": "there are actually still something performances needs to process vas believes that the backing store is",
    "start": "525920",
    "end": "533600"
  },
  {
    "text": "always a fixed array while we can change it to a number dictionary",
    "start": "533600",
    "end": "538800"
  },
  {
    "text": "suppose the first promise is settled then v8 tries to write the result to a",
    "start": "538800",
    "end": "544320"
  },
  {
    "text": "fixed array at index 0. actually grew up the metadata field of a",
    "start": "544320",
    "end": "550800"
  },
  {
    "text": "number dictionary the approach to achieve out-of-bounds",
    "start": "550800",
    "end": "557440"
  },
  {
    "text": "right seems very straightforward at first bounce when it stores a value to the result",
    "start": "557440",
    "end": "563600"
  },
  {
    "text": "array it first checks whether the index is in bounds of the array",
    "start": "563600",
    "end": "569279"
  },
  {
    "text": "if the index is smaller than the array length way it just stores the value is",
    "start": "569279",
    "end": "574720"
  },
  {
    "text": "back in store with type confusion even though the array length could be a large number",
    "start": "574720",
    "end": "581519"
  },
  {
    "text": "which can be which can bypass the inbox check the size of number dictionary may be",
    "start": "581519",
    "end": "587200"
  },
  {
    "text": "small thus and other bonds right could be triggered at line eight",
    "start": "587200",
    "end": "594240"
  },
  {
    "text": "unfortunately this would only crash the process because there is another outbound check when torque compiler",
    "start": "595600",
    "end": "603120"
  },
  {
    "text": "generates code like that so we want to figure out another way another constraint is that we cannot",
    "start": "603120",
    "end": "610800"
  },
  {
    "text": "control the content of data to be writing precisely it is always an address of a js object which describes",
    "start": "610800",
    "end": "618720"
  },
  {
    "text": "the outcome of the settled promise",
    "start": "618720",
    "end": "622879"
  },
  {
    "text": "since the output points white is not working so what else is valuable to",
    "start": "624640",
    "end": "629839"
  },
  {
    "text": "overwrite inside the number dictionary the capacity field indicates the maximum",
    "start": "629839",
    "end": "636560"
  },
  {
    "text": "number of entries the dictionary can have which seems to be a good target",
    "start": "636560",
    "end": "642560"
  },
  {
    "text": "by overwriting these fields with the address of a js object which is usually",
    "start": "642560",
    "end": "648399"
  },
  {
    "text": "a relatively large number we can trigger out of bounds axis through the victim array",
    "start": "648399",
    "end": "655200"
  },
  {
    "text": "however this offset of autobahn out of bounds axis is",
    "start": "655200",
    "end": "660480"
  },
  {
    "text": "not predictable because of the way of way to read or write a dictionary",
    "start": "660480",
    "end": "667920"
  },
  {
    "text": "after more research we choose to corrupt a max number key field which converts the type confusion block",
    "start": "668720",
    "end": "675760"
  },
  {
    "text": "to another out of bounds read problem",
    "start": "675760",
    "end": "680160"
  },
  {
    "text": "max number key indicates the maximum valid index of number dictionary and",
    "start": "681360",
    "end": "686880"
  },
  {
    "text": "more importantly its least significant bit indicates whether there is special",
    "start": "686880",
    "end": "692480"
  },
  {
    "text": "elements in the array such as accessors for example if we define a gather at",
    "start": "692480",
    "end": "699200"
  },
  {
    "text": "index 0 the array is treated as a special array because it will trigger",
    "start": "699200",
    "end": "704959"
  },
  {
    "text": "user-defined codes while accessing the element",
    "start": "704959",
    "end": "709600"
  },
  {
    "text": "if the bit is set to 1 it means the number dictionary has no special element",
    "start": "710079",
    "end": "716079"
  },
  {
    "text": "but by exploring the type confusion bug we can corrupt these fields with the address of a js object",
    "start": "716079",
    "end": "723279"
  },
  {
    "text": "and the least significant bit of any hip object addressed in v8",
    "start": "723279",
    "end": "728639"
  },
  {
    "text": "is exactly one so taken together we can make the special array not that special",
    "start": "728639",
    "end": "737200"
  },
  {
    "text": "so the next step is to find a place where we can use our special array to",
    "start": "738240",
    "end": "743839"
  },
  {
    "text": "gain more powerful ability in this case the array prototype concat",
    "start": "743839",
    "end": "749120"
  },
  {
    "text": "api would do the trick in iterate animate function it calls has",
    "start": "749120",
    "end": "755360"
  },
  {
    "text": "only simple elements to check whether there is there are accessors on the receiver's elements",
    "start": "755360",
    "end": "762560"
  },
  {
    "text": "as described before our special array could bypass the chip this check so that",
    "start": "762560",
    "end": "768399"
  },
  {
    "text": "get element would be called in the first pass however there are in fact accessors",
    "start": "768399",
    "end": "774399"
  },
  {
    "text": "defined on it which we can call back to our user-defined javascript codes",
    "start": "774399",
    "end": "782079"
  },
  {
    "text": "and out of pawns read would be triggered if the array length has been changed to a smaller value while the iteration",
    "start": "782079",
    "end": "789120"
  },
  {
    "text": "continues so we have successfully converted the type confusion bar to another out of",
    "start": "789120",
    "end": "795600"
  },
  {
    "text": "bounds read block and the rest of work is not hard",
    "start": "795600",
    "end": "802639"
  },
  {
    "text": "to achieve code execution from this oob read condition so i'm going to give a",
    "start": "802639",
    "end": "808320"
  },
  {
    "text": "brief introduction here first we can link the address of a revolver's back in store and second fake",
    "start": "808320",
    "end": "816320"
  },
  {
    "text": "a double jazz array in this red buffer then trigger the out of bounds read",
    "start": "816320",
    "end": "822480"
  },
  {
    "text": "again to review the reference of the vague array in javascript holes first use the fake array to modify a",
    "start": "822480",
    "end": "830160"
  },
  {
    "text": "victim a revolver's memory layout for object for actually read and write",
    "start": "830160",
    "end": "836320"
  },
  {
    "text": "and next step is to write shellcode to a web assembly called arl",
    "start": "836320",
    "end": "841600"
  },
  {
    "text": "and finally calls the webassembly function to execute shellcode",
    "start": "841600",
    "end": "847839"
  },
  {
    "text": "now we can compromise the current render process and i'll hand it over to joepong",
    "start": "848800",
    "end": "854160"
  },
  {
    "text": "to show you how to escape the sandbox to root privilege",
    "start": "854160",
    "end": "859360"
  },
  {
    "text": "thanks jerome next i will share with you how to escape from sandballs to root with the bender bark with font",
    "start": "859360",
    "end": "866800"
  },
  {
    "text": "first i will introduce why bender was choosing as a research target and seeing",
    "start": "866800",
    "end": "872240"
  },
  {
    "text": "the cost of debug after we finally bark in order to verify the usability we first exploit it in a",
    "start": "872240",
    "end": "879920"
  },
  {
    "text": "trusted app environment this part will be introduced in the third part after proving the utility of the bark",
    "start": "879920",
    "end": "887600"
  },
  {
    "text": "we further complete the privileged escalation in the sandboxing environment",
    "start": "887600",
    "end": "892959"
  },
  {
    "text": "this part is also one of the most interesting things today finally i will show you a demonstration",
    "start": "892959",
    "end": "901760"
  },
  {
    "text": "in the team in zong exploration we used three vulnerabilities two of which were used to elevate",
    "start": "901760",
    "end": "908320"
  },
  {
    "text": "permissions from sandbox to route this year we set out again and try to use",
    "start": "908320",
    "end": "914000"
  },
  {
    "text": "only one bug to achieve this an android system vendor is one few",
    "start": "914000",
    "end": "920720"
  },
  {
    "text": "drivers and it can be accessed inside the sandbox so its vulnerability can be directly used",
    "start": "920720",
    "end": "927600"
  },
  {
    "text": "for sandbox escape this time we look to the vulnerability mining",
    "start": "927600",
    "end": "934079"
  },
  {
    "text": "target on bender in fact the bender mulch has always been",
    "start": "934079",
    "end": "939839"
  },
  {
    "text": "a hot topic for security researchers since the water job vulnerability has",
    "start": "939839",
    "end": "945199"
  },
  {
    "text": "found multiple parks have been found in band driver for",
    "start": "945199",
    "end": "951279"
  },
  {
    "text": "example project zero team fund one in 2019 and the blue first stack team found",
    "start": "951279",
    "end": "957920"
  },
  {
    "text": "one in 2020 statistics shows that there is a barg for every 1000 and to my",
    "start": "957920",
    "end": "966240"
  },
  {
    "text": "son and 500 lines of code and it's been the same file to those less than 6000 lines of code",
    "start": "966240",
    "end": "974079"
  },
  {
    "text": "so we have to think about one question is there still such serious security",
    "start": "974079",
    "end": "979920"
  },
  {
    "text": "park of course the answer is yes and that's why we're here today",
    "start": "979920",
    "end": "987680"
  },
  {
    "text": "the band rules is like a new canadian warhead and the brothers are saying you'd like a launch pad",
    "start": "987680",
    "end": "992959"
  },
  {
    "text": "the compilation of these two will become an incontinental nuclear",
    "start": "992959",
    "end": "998480"
  },
  {
    "text": "power next i will introduce in detail how to use a",
    "start": "998480",
    "end": "1004160"
  },
  {
    "text": "band of vulnerability to achieve stable kernel archery read and write and",
    "start": "1004160",
    "end": "1010240"
  },
  {
    "text": "finally get rooted in the sandbox a complete vendor communication process",
    "start": "1010240",
    "end": "1017040"
  },
  {
    "text": "has a total of four steps first the clients send the bc transaction to the",
    "start": "1017040",
    "end": "1022079"
  },
  {
    "text": "kernel and the kernel forward the request to a server using the server reply bc reply to the",
    "start": "1022079",
    "end": "1029839"
  },
  {
    "text": "kernel after processing and forward it to the client and after process",
    "start": "1029839",
    "end": "1038678"
  },
  {
    "text": "one point we want to pay attention to is that uh when sending the band object",
    "start": "1038959",
    "end": "1044959"
  },
  {
    "text": "a better load object in the kernel will be created the better work it contains well insert",
    "start": "1044959",
    "end": "1050640"
  },
  {
    "text": "into the strategy linkedin list and the reference to abandon note will",
    "start": "1050640",
    "end": "1055679"
  },
  {
    "text": "also be inserted into the proper waves by node tree of target process",
    "start": "1055679",
    "end": "1061760"
  },
  {
    "text": "normally clinic can process bandwidth load time work by spending threaded raid",
    "start": "1061760",
    "end": "1067200"
  },
  {
    "text": "function however there is another way to process bandwork",
    "start": "1067200",
    "end": "1072400"
  },
  {
    "text": "which is by sending vendors throughout the data command to trigger the battery network",
    "start": "1072400",
    "end": "1079120"
  },
  {
    "text": "but this function has a risk problem after w is removed from machine",
    "start": "1079360",
    "end": "1084960"
  },
  {
    "text": "there is a low load protection anymore so there is a risk window before",
    "start": "1084960",
    "end": "1090320"
  },
  {
    "text": "accessing download type if the bandwagon finished between this window",
    "start": "1090320",
    "end": "1096160"
  },
  {
    "text": "it will cause uaf problem then we take a look at when brand work as",
    "start": "1096160",
    "end": "1103280"
  },
  {
    "text": "afraid before then radius work from this picture",
    "start": "1103280",
    "end": "1108480"
  },
  {
    "text": "we can see after the server receives and processes the banner object it will send",
    "start": "1108480",
    "end": "1114240"
  },
  {
    "text": "bc buffer free command to the kernel after receiving this command the kernel",
    "start": "1114240",
    "end": "1120240"
  },
  {
    "text": "will find the corresponding better load according to a banner wave and decrease the reference counter",
    "start": "1120240",
    "end": "1128000"
  },
  {
    "text": "if it is down to zero the banner load will be reduced if the rate succeeds",
    "start": "1128000",
    "end": "1135520"
  },
  {
    "text": "a well-caused standard load to be reduced before accessing w time",
    "start": "1135520",
    "end": "1140880"
  },
  {
    "text": "so how can we exploit this uaf vulnerability the key point of the uam vulnerability",
    "start": "1140880",
    "end": "1148320"
  },
  {
    "text": "is used in the band radius function there are two branches that can",
    "start": "1148320",
    "end": "1153360"
  },
  {
    "text": "configure the keyboard operation so this uaf problem can be converted into",
    "start": "1153360",
    "end": "1159600"
  },
  {
    "text": "the double free problem if we can control the w type",
    "start": "1159600",
    "end": "1165840"
  },
  {
    "text": "what we can do with adobe 3 which high check frame is to allocate a specific memory and write any content into it",
    "start": "1166559",
    "end": "1174400"
  },
  {
    "text": "that's interesting we can use it to modify the swapper to achieve qsma attack",
    "start": "1174400",
    "end": "1181360"
  },
  {
    "text": "next i will introduce the details about this process there are four steps to complete this",
    "start": "1181360",
    "end": "1188000"
  },
  {
    "text": "thing for a uef problem the first step of course is",
    "start": "1188000",
    "end": "1193600"
  },
  {
    "text": "using step unit hipsters to modify the content of a freight buffer",
    "start": "1193600",
    "end": "1198880"
  },
  {
    "text": "because we want to launch customer attack kernel-based adjustment is needed also",
    "start": "1198880",
    "end": "1206000"
  },
  {
    "text": "and then we'll talk about how to hijack brain boost and achieve customer attack",
    "start": "1206000",
    "end": "1212000"
  },
  {
    "text": "it's not easy to do heavy spray as shown in the december code from unlocked to use there are only a",
    "start": "1212000",
    "end": "1218720"
  },
  {
    "text": "few instructions to execute so the wrist windows",
    "start": "1218720",
    "end": "1224159"
  },
  {
    "text": "was very narrow thus it's very difficult to change w type by doing hand spray",
    "start": "1224159",
    "end": "1230799"
  },
  {
    "text": "this is a similar problem we have encountered when exploiting water job",
    "start": "1230799",
    "end": "1236000"
  },
  {
    "text": "vulnerability similarly there are only a few instructions",
    "start": "1236000",
    "end": "1242159"
  },
  {
    "text": "between unload and use the race window is also very short",
    "start": "1242159",
    "end": "1247440"
  },
  {
    "text": "so what increase the success rate of risk throw analysis",
    "start": "1247440",
    "end": "1253840"
  },
  {
    "text": "we found that the wake up q function is used in the mutax unlock operation let's have a look at this function",
    "start": "1253840",
    "end": "1262640"
  },
  {
    "text": "we can see wake up q eventually course try to wake up to wake up other threat",
    "start": "1262640",
    "end": "1269440"
  },
  {
    "text": "which means the mutex unlock operation will actively give up the cpu",
    "start": "1269440",
    "end": "1274720"
  },
  {
    "text": "therefore we can bind buildable strat into one cpu and then use",
    "start": "1274720",
    "end": "1280559"
  },
  {
    "text": "um mutex lock to wake up other race threat",
    "start": "1280559",
    "end": "1286320"
  },
  {
    "text": "by this method you get nearly 100 success rate",
    "start": "1286320",
    "end": "1291760"
  },
  {
    "text": "but same method can be uh cannot be used here because spin knock is used in van",
    "start": "1291760",
    "end": "1296960"
  },
  {
    "text": "der rien at queen workhead and when spin-off is reduced it will not wake up other spread that is to say",
    "start": "1296960",
    "end": "1305679"
  },
  {
    "text": "it will not actively give up cpu actually there are two main ways to",
    "start": "1305679",
    "end": "1312559"
  },
  {
    "text": "improve the success rate of history the first one in old school method just",
    "start": "1312559",
    "end": "1318320"
  },
  {
    "text": "spend a cpu and increase number of half spring thread under preference scheduling",
    "start": "1318320",
    "end": "1324960"
  },
  {
    "text": "you can always spend a chance in a race window a second one is special",
    "start": "1324960",
    "end": "1331520"
  },
  {
    "text": "increase the number of band objects can also increase possibility because better radius work unsealed in",
    "start": "1331520",
    "end": "1337919"
  },
  {
    "text": "loop assessment work more band objects means more chance to",
    "start": "1337919",
    "end": "1343120"
  },
  {
    "text": "create wristing and another advantage is that spray figure will enter default branch and it",
    "start": "1343120",
    "end": "1350240"
  },
  {
    "text": "won't result in any system of luminances",
    "start": "1350240",
    "end": "1354799"
  },
  {
    "text": "as for the heav spray method we use send the message and once the history is completed",
    "start": "1355440",
    "end": "1361919"
  },
  {
    "text": "a key free operation with an offset of 8 will be triggered and if we release the slab or copied by",
    "start": "1361919",
    "end": "1368960"
  },
  {
    "text": "send message we can build a double phase scene after solving these three problems",
    "start": "1368960",
    "end": "1376320"
  },
  {
    "text": "our next target is to need kernel address let's take a look at the method of",
    "start": "1376320",
    "end": "1381360"
  },
  {
    "text": "converting the double phase first when double type is tempered with transaction completed by h3",
    "start": "1381360",
    "end": "1388559"
  },
  {
    "text": "operation of k3w will be triggered and the offset of bandwagon invented load is",
    "start": "1388559",
    "end": "1394720"
  },
  {
    "text": "8. so a double free with a certain offset will be formed",
    "start": "1394720",
    "end": "1400880"
  },
  {
    "text": "this page shows the whole process of converting the uaf bar into the double free product",
    "start": "1401679",
    "end": "1407120"
  },
  {
    "text": "the first step is to use send the message to do the hip spray if it raises",
    "start": "1407120",
    "end": "1413120"
  },
  {
    "text": "succeed a plus eight will be treated as a heap and radius",
    "start": "1413120",
    "end": "1418480"
  },
  {
    "text": "first after calling received message they will be released therefore a and a",
    "start": "1418480",
    "end": "1424320"
  },
  {
    "text": "plus h exceeds uh unfriend news at the same time",
    "start": "1424320",
    "end": "1429679"
  },
  {
    "text": "and there is overlap on memory area name let's have a look at the second",
    "start": "1429679",
    "end": "1436000"
  },
  {
    "text": "file structure sigfi is a common structure type of virtual file system in linux",
    "start": "1436000",
    "end": "1442480"
  },
  {
    "text": "multiple files in product directory is managed as sacrifice for some spanish software like product",
    "start": "1442480",
    "end": "1449200"
  },
  {
    "text": "cpu info op field is a global structure address which can be used to nix kernel-based",
    "start": "1449200",
    "end": "1455919"
  },
  {
    "text": "address so how to detect the how to mix the op",
    "start": "1455919",
    "end": "1461360"
  },
  {
    "text": "pointer there are many five steps the first step of course is to trigger",
    "start": "1461360",
    "end": "1467039"
  },
  {
    "text": "the mark and name we need to concoct a plus eight with banner load",
    "start": "1467039",
    "end": "1472400"
  },
  {
    "text": "and then we call the same message to reduce aid now we can occupy a with signifier",
    "start": "1472400",
    "end": "1480720"
  },
  {
    "text": "and core band thread rate to rate pdr out which is the op field of",
    "start": "1480720",
    "end": "1486720"
  },
  {
    "text": "the circuit file the following content is relatively simple",
    "start": "1486720",
    "end": "1493679"
  },
  {
    "text": "similar to the unique kernel address british hijacking can be roughly divided",
    "start": "1493919",
    "end": "1499120"
  },
  {
    "text": "into six steps first step is to spray withstand message after the",
    "start": "1499120",
    "end": "1505360"
  },
  {
    "text": "bug is triggered a plus 8 will be released and then we call receiving message to range a",
    "start": "1505360",
    "end": "1511840"
  },
  {
    "text": "currently both a and a plus 8 is only finished the next steps are very interesting",
    "start": "1511840",
    "end": "1520240"
  },
  {
    "text": "they will reallocate a back by sending message and red x into it",
    "start": "1520559",
    "end": "1526480"
  },
  {
    "text": "now francis freddie's head is a plus 8 then we call the master gate",
    "start": "1526480",
    "end": "1532240"
  },
  {
    "text": "and get a plus 8 back now fringe the head x is x send a message again",
    "start": "1532240",
    "end": "1539520"
  },
  {
    "text": "we can write any content into the address x now the next step is to",
    "start": "1539520",
    "end": "1546880"
  },
  {
    "text": "launch customer attack there are first things we need to pay attention to",
    "start": "1546880",
    "end": "1553440"
  },
  {
    "text": "kernel code segment physical start address is a20840 and ksma attack's basic map",
    "start": "1553440",
    "end": "1560320"
  },
  {
    "text": "inside is one gigabyte so fake page table yields address 870 and",
    "start": "1560320",
    "end": "1566159"
  },
  {
    "text": "offset 840 is needed when raid will write kernel code",
    "start": "1566159",
    "end": "1572320"
  },
  {
    "text": "after each round of attempts it is necessary to check whether the page table has been successfully modified",
    "start": "1572320",
    "end": "1580240"
  },
  {
    "text": "constantly writing explored in c we use that zhang and long jump to process exception",
    "start": "1580240",
    "end": "1586559"
  },
  {
    "text": "if an exception is triggered any means swapper has been hasn't been modified yet",
    "start": "1586559",
    "end": "1593840"
  },
  {
    "text": "according to the previously shared gamma we successfully completed the local",
    "start": "1594559",
    "end": "1601279"
  },
  {
    "text": "privilege escalation as proven usability of this vulnerability",
    "start": "1601279",
    "end": "1607440"
  },
  {
    "text": "they tried to complete the probability escalation sandbox to take further use",
    "start": "1607440",
    "end": "1613200"
  },
  {
    "text": "of this power of this vulnerability there is no doubt that there are many",
    "start": "1613200",
    "end": "1619440"
  },
  {
    "text": "restriction restrictions in the sandbox the first one is limited syscore which",
    "start": "1619440",
    "end": "1625200"
  },
  {
    "text": "means we can't ban cpu anymore also buy any devices access is strictly",
    "start": "1625200",
    "end": "1631919"
  },
  {
    "text": "restricted not to mention writing files any chrome sandbox enables its own vpnf",
    "start": "1631919",
    "end": "1638320"
  },
  {
    "text": "rules the number one is that chrome is 32 bits and by kernel in 64 bits",
    "start": "1638320",
    "end": "1645840"
  },
  {
    "text": "it has two effect the first is that it will cause its qualcomm patch ability",
    "start": "1645840",
    "end": "1651440"
  },
  {
    "text": "problem a second is that ksma attack is not work",
    "start": "1651440",
    "end": "1658480"
  },
  {
    "text": "therefore when we try to pull the local scale material sandbox we encounter two silver challenges",
    "start": "1659440",
    "end": "1666480"
  },
  {
    "text": "the first one is load bending cpu so triggering the bark will be very",
    "start": "1666480",
    "end": "1671840"
  },
  {
    "text": "difficult the second one is no ksma it means we have to find a total new",
    "start": "1671840",
    "end": "1678080"
  },
  {
    "text": "solution which no one has used before but luckily send message still can be",
    "start": "1678080",
    "end": "1683440"
  },
  {
    "text": "used to do hip spray",
    "start": "1683440",
    "end": "1687120"
  },
  {
    "text": "these two limitations forces us to find a new solution which is very challenging",
    "start": "1688480",
    "end": "1694080"
  },
  {
    "text": "but interesting we decided to solve the first problem first",
    "start": "1694080",
    "end": "1699520"
  },
  {
    "text": "corresponding to hype feng shui we want to introduce a new concept called cpu functioning",
    "start": "1699520",
    "end": "1705679"
  },
  {
    "text": "i think there are two factors that determine the success rate of race",
    "start": "1705679",
    "end": "1710720"
  },
  {
    "text": "the first one is time slice it's a lot harder to understand that reducing time slice",
    "start": "1710720",
    "end": "1717760"
  },
  {
    "text": "can increase the possibility to switch cpu in the risk window",
    "start": "1717760",
    "end": "1723600"
  },
  {
    "text": "otherwise increase with schedule time can increase the possibility to let code block in",
    "start": "1723600",
    "end": "1729840"
  },
  {
    "text": "different threads execute in a specific sequence",
    "start": "1729840",
    "end": "1734720"
  },
  {
    "text": "based on these two factors we found some key method of cpu functionality",
    "start": "1735120",
    "end": "1740720"
  },
  {
    "text": "the first one is creating multiple padding straps to increase cpu node",
    "start": "1740720",
    "end": "1746640"
  },
  {
    "text": "penny thread does nothing but makes cpu very busy the second one is to adjust",
    "start": "1746640",
    "end": "1753039"
  },
  {
    "text": "thread priority to influence surround time slice and with schedule time",
    "start": "1753039",
    "end": "1760480"
  },
  {
    "text": "the last trick is to get currently long cpu is radiant from prostate file rather",
    "start": "1760480",
    "end": "1766640"
  },
  {
    "text": "than the gas cpu this is also helpful for us to do heavy",
    "start": "1766640",
    "end": "1771679"
  },
  {
    "text": "functioning after solving the first challenge",
    "start": "1771679",
    "end": "1778159"
  },
  {
    "text": "we start to solve the second one before looking for a new solution we",
    "start": "1778159",
    "end": "1783760"
  },
  {
    "text": "decided to we decided uh take a new look at historical exploit",
    "start": "1783760",
    "end": "1789279"
  },
  {
    "text": "examples that have stable auction reading and writing",
    "start": "1789279",
    "end": "1795120"
  },
  {
    "text": "and looking for some inspiration from these two methods we found",
    "start": "1795120",
    "end": "1801600"
  },
  {
    "text": "something interesting that is controlling the pointer to get after read",
    "start": "1801600",
    "end": "1806960"
  },
  {
    "text": "and write let's keep going the common elements of this two message",
    "start": "1806960",
    "end": "1812640"
  },
  {
    "text": "is memory issue but that's why in one testing it has two elements we just mentioned",
    "start": "1812640",
    "end": "1821520"
  },
  {
    "text": "through the analysis of these cases we found two interesting basic elements",
    "start": "1821520",
    "end": "1827279"
  },
  {
    "text": "the first one is memory share which means to use the shared data to achieve",
    "start": "1827279",
    "end": "1832320"
  },
  {
    "text": "arbitrary read and write for example if structure a and structure b overlapped",
    "start": "1832320",
    "end": "1839679"
  },
  {
    "text": "and we can use pointer instruct b to read or write then we can control pdr",
    "start": "1839679",
    "end": "1846480"
  },
  {
    "text": "the pointer through structure to get after read or write",
    "start": "1846480",
    "end": "1854399"
  },
  {
    "text": "different from the first element the second element does not focus on",
    "start": "1854399",
    "end": "1859679"
  },
  {
    "text": "how to control the pointer but to combine the code logic to achieve stable object rate in write",
    "start": "1859679",
    "end": "1868240"
  },
  {
    "text": "this dominates two elements we found several structures after they cooperated with each other it",
    "start": "1868240",
    "end": "1875039"
  },
  {
    "text": "would like the filtering of chemical reaction bursting out here's power immediately",
    "start": "1875039",
    "end": "1881440"
  },
  {
    "text": "first let's have a let us have a look at a h-map interface",
    "start": "1881440",
    "end": "1888158"
  },
  {
    "text": "this structure is saved as a pointer to file private data again their functioning of the astronaut",
    "start": "1888480",
    "end": "1895360"
  },
  {
    "text": "interface can raise a section of memory from a kernel if a private port",
    "start": "1895360",
    "end": "1901200"
  },
  {
    "text": "if the private data pointer can be tampered with it can read content from any kernel",
    "start": "1901200",
    "end": "1907200"
  },
  {
    "text": "address similarly you can use the set product mask function to modify the content",
    "start": "1907200",
    "end": "1913919"
  },
  {
    "text": "of specified address but due to the limitation of code itself",
    "start": "1913919",
    "end": "1921120"
  },
  {
    "text": "the most practical usage is to write zero",
    "start": "1921120",
    "end": "1926159"
  },
  {
    "text": "and with the help of set name function after write after writing can also",
    "start": "1927840",
    "end": "1934080"
  },
  {
    "text": "achieve to some extent now let's take a look at simplify",
    "start": "1934080",
    "end": "1939760"
  },
  {
    "text": "the first element of six fire and structure is the box pointer the data can be rated from box pointer",
    "start": "1939760",
    "end": "1946000"
  },
  {
    "text": "to the user mode by calling the second rate of operation once the buff pointer is temporary it",
    "start": "1946000",
    "end": "1953279"
  },
  {
    "text": "means we can reading data from any address writing the more interesting because the",
    "start": "1953279",
    "end": "1960000"
  },
  {
    "text": "confirm is only circle bar with controllable content and is not subject to permission control",
    "start": "1960000",
    "end": "1966880"
  },
  {
    "text": "the way to modify its content is to modify the threading corresponding operations in the kernel",
    "start": "1966880",
    "end": "1972720"
  },
  {
    "text": "is divided into two steps the first is to save thread name",
    "start": "1972720",
    "end": "1978000"
  },
  {
    "text": "to the task com when a user tries to read content from com the kernel will call the construct",
    "start": "1978000",
    "end": "1985279"
  },
  {
    "text": "function to write content of column into the memory 25 second firebox",
    "start": "1985279",
    "end": "1992399"
  },
  {
    "text": "throw circuit print if the buff pointer can be temporary at",
    "start": "1992399",
    "end": "1997919"
  },
  {
    "text": "this time the actual address right is achieved",
    "start": "1997919",
    "end": "2003679"
  },
  {
    "text": "if item cannot achieve up to rate or write but it can be used to repeatedly",
    "start": "2003679",
    "end": "2009200"
  },
  {
    "text": "write up three eight byte data to the kernel fixed memory which is",
    "start": "2009200",
    "end": "2014559"
  },
  {
    "text": "very useful i have already introduced three",
    "start": "2014559",
    "end": "2020559"
  },
  {
    "text": "structures and the related functions that can be used to achieve actually read and write so how to",
    "start": "2020559",
    "end": "2027840"
  },
  {
    "text": "achieve this target at first what we think of is to use ashman",
    "start": "2027840",
    "end": "2034080"
  },
  {
    "text": "and the powerpoint shows we first need to modify predator 1",
    "start": "2034080",
    "end": "2039120"
  },
  {
    "text": "and which makes us be able to modify the private data too then we can use",
    "start": "2039120",
    "end": "2044960"
  },
  {
    "text": "fire to to raise or write tattoo memory however the conditions that need to be met are",
    "start": "2044960",
    "end": "2051839"
  },
  {
    "text": "two nicks and one right it's difficult to meet right so",
    "start": "2051839",
    "end": "2057358"
  },
  {
    "text": "is there a better solution combining the characteristics of this",
    "start": "2057359",
    "end": "2062960"
  },
  {
    "text": "solution of this vulnerability we finally found in a most perfect",
    "start": "2062960",
    "end": "2068158"
  },
  {
    "text": "solution first of all size of these two structures is exactly",
    "start": "2068159",
    "end": "2073240"
  },
  {
    "text": "128 so it can be allocated on the same page",
    "start": "2073240",
    "end": "2078800"
  },
  {
    "text": "because there is an eighth part of that when a vulnerability is triggered",
    "start": "2078800",
    "end": "2083839"
  },
  {
    "text": "if you can make this two structures a digestion when you allocate them",
    "start": "2083839",
    "end": "2089520"
  },
  {
    "text": "you can make data field of import item overlap with above field of circuit fire",
    "start": "2089520",
    "end": "2096000"
  },
  {
    "text": "once setup is completed stable arbitrary read and write can",
    "start": "2096000",
    "end": "2101520"
  },
  {
    "text": "can be completed without any leak or right condition",
    "start": "2101520",
    "end": "2107040"
  },
  {
    "text": "it's either of the plan is determined only a few steps are needed first step",
    "start": "2107760",
    "end": "2113119"
  },
  {
    "text": "is to prepare some holes before circumference will behave functionally",
    "start": "2113119",
    "end": "2118400"
  },
  {
    "text": "the same step is to fill this holes with bender load but here is a little trouble",
    "start": "2118400",
    "end": "2124640"
  },
  {
    "text": "aopa structure is allocated before sacrifice and it cannot be deallocated",
    "start": "2124640",
    "end": "2130000"
  },
  {
    "text": "separately the solution is to control the allocation order",
    "start": "2130000",
    "end": "2136320"
  },
  {
    "text": "through continuous testing we found that eventually can help us accomplish this task will",
    "start": "2136320",
    "end": "2144480"
  },
  {
    "text": "it has several characteristics first it can be accessed by in the sandbox",
    "start": "2144480",
    "end": "2150640"
  },
  {
    "text": "and closing event d will immediately be allocated to this lab",
    "start": "2150640",
    "end": "2156960"
  },
  {
    "text": "control a controlling closing sequence of umd so that slab allocation can be",
    "start": "2157680",
    "end": "2162800"
  },
  {
    "text": "carried out in a specific order as shown in powerpoint",
    "start": "2162800",
    "end": "2168640"
  },
  {
    "text": "we firstly close the event of d3 and the enclosed event event of d1",
    "start": "2168640",
    "end": "2174960"
  },
  {
    "text": "and then the order of the hit blocks in the freighters will be invented fd1 then event of d3",
    "start": "2174960",
    "end": "2181359"
  },
  {
    "text": "in fact this corresponds to the allocation order",
    "start": "2181359",
    "end": "2186839"
  },
  {
    "text": "now after the preparations we go to create the exec bar and the",
    "start": "2189920",
    "end": "2195760"
  },
  {
    "text": "structure corresponding to the op field can separate from the second file at this point",
    "start": "2195760",
    "end": "2201839"
  },
  {
    "text": "just close event of d2 again to leave the hole before circuit bar",
    "start": "2201839",
    "end": "2208000"
  },
  {
    "text": "now we can fill the holes with bender loads next step is trigger k3 say plus 8 and",
    "start": "2208000",
    "end": "2215040"
  },
  {
    "text": "allocate the save class 8 back for the import item",
    "start": "2215040",
    "end": "2220078"
  },
  {
    "text": "now we have the ability to rate and write at any address but we still need to",
    "start": "2220560",
    "end": "2227040"
  },
  {
    "text": "make the kernel address before we can continue however it is very interesting that we only need",
    "start": "2227040",
    "end": "2232800"
  },
  {
    "text": "to replace the input item with vendor load it's not difficult to find that",
    "start": "2232800",
    "end": "2238560"
  },
  {
    "text": "the last failed event load is doubly linked list which points itself",
    "start": "2238560",
    "end": "2245119"
  },
  {
    "text": "when initialized so when we overwrite the buff pointer with the pre-pointer content after the banner",
    "start": "2245119",
    "end": "2252480"
  },
  {
    "text": "load can be leaked you already the last step is to close the sdnix and",
    "start": "2252480",
    "end": "2258800"
  },
  {
    "text": "set the uiid to zero but it's not enough yet when writing exploit",
    "start": "2258800",
    "end": "2265280"
  },
  {
    "text": "we failed to reverse a shell after closing scenarios and there is no way to",
    "start": "2265280",
    "end": "2270560"
  },
  {
    "text": "bypass bpf directly so when we disable ppf",
    "start": "2270560",
    "end": "2276640"
  },
  {
    "text": "so we have to disable the ppf setting filter to long won't work",
    "start": "2277520",
    "end": "2282960"
  },
  {
    "text": "we have to set in the filter uh to the financing element to turn off the ppf",
    "start": "2282960",
    "end": "2291119"
  },
  {
    "text": "finally i would like to point out some shortcomings of this schema",
    "start": "2292480",
    "end": "2298400"
  },
  {
    "text": "difficult for the size of sucfar band and load ipo item structures",
    "start": "2298400",
    "end": "2303760"
  },
  {
    "text": "are exactly 128 but these structures may differ in different system versions",
    "start": "2303760",
    "end": "2311280"
  },
  {
    "text": "the size and of the structure change the current plane may fail",
    "start": "2311280",
    "end": "2316960"
  },
  {
    "text": "the second point is that we still need to adapt this as linux enforcing",
    "start": "2316960",
    "end": "2322240"
  },
  {
    "text": "so could it be done automatically with the ability of after read and write",
    "start": "2322240",
    "end": "2329119"
  },
  {
    "text": "i'd like to do this question for you finally let me show you a demonstration",
    "start": "2329119",
    "end": "2335440"
  },
  {
    "text": "we have recorded",
    "start": "2335440",
    "end": "2339160"
  },
  {
    "text": "at first we will check the chrome and the android version",
    "start": "2342400",
    "end": "2350000"
  },
  {
    "text": "after check is done we will use the chrome browser to access an attacker",
    "start": "2352079",
    "end": "2358240"
  },
  {
    "text": "and attack page as you can see we reversed a shell",
    "start": "2358240",
    "end": "2367040"
  },
  {
    "text": "and this is a root show now we use this shirt to install an app and start it",
    "start": "2367040",
    "end": "2375640"
  },
  {
    "text": "first we need to download from internet and call a pm installed to install the app",
    "start": "2386560",
    "end": "2394160"
  },
  {
    "text": "and use the am command to start the activity",
    "start": "2394160",
    "end": "2399800"
  },
  {
    "text": "let's take us a few seconds",
    "start": "2410160",
    "end": "2415079"
  },
  {
    "text": "as you can see app is installed and started okay thank you any questions",
    "start": "2425599",
    "end": "2434760"
  }
]