[
  {
    "text": "thanks for uh coming to check out our talk Close Encounters of the advanced persistent",
    "start": "2600",
    "end": "8840"
  },
  {
    "text": "kind leveraging rud kits for post exploitation uh we'll have some uh",
    "start": "8840",
    "end": "14440"
  },
  {
    "text": "introductory slides to explain a bit more uh about rootkits and then",
    "start": "14440",
    "end": "20359"
  },
  {
    "text": "specifically about the one we've been uh developing for our",
    "start": "20359",
    "end": "26480"
  },
  {
    "text": "team uh you can see some information about us um we both work at UH ibmx",
    "start": "26480",
    "end": "32680"
  },
  {
    "text": "Force's adversary Services team doing uh red teaming or research and development",
    "start": "32680",
    "end": "39600"
  },
  {
    "text": "in function of red teaming engagements for our clients so we just have some",
    "start": "39600",
    "end": "46079"
  },
  {
    "text": "introduction slides to frame this discussion a little bit and talk about",
    "start": "46079",
    "end": "51239"
  },
  {
    "text": "um rootkits that use uh vulnerable drivers uh specifically as part of their",
    "start": "51239",
    "end": "58920"
  },
  {
    "text": "workflow so if you look at uh these um two",
    "start": "58920",
    "end": "64760"
  },
  {
    "text": "categories right old money and new money as I like to call them you have uh thread actors uh that are state",
    "start": "64760",
    "end": "73119"
  },
  {
    "text": "sponsored uh like turla equation Lazarus and so forth uh and the new money",
    "start": "73119",
    "end": "79880"
  },
  {
    "text": "they're uh ransomware groups right that's where all the money is these days uh in",
    "start": "79880",
    "end": "85320"
  },
  {
    "text": "ransomware uh and both of these groups uh have documented cases of using uh",
    "start": "85320",
    "end": "92880"
  },
  {
    "text": "vulnerable drivers for post exploitation uh however uh the main difference between",
    "start": "92880",
    "end": "99799"
  },
  {
    "text": "these is that of course state sponsored actors are bringing much more uh",
    "start": "99799",
    "end": "104920"
  },
  {
    "text": "Advanced and capable uh tools uh to endpoint uh compared to ransomware",
    "start": "104920",
    "end": "112040"
  },
  {
    "text": "actors right uh but one thing to keep in mind about this is that uh state sponsored actors are",
    "start": "112040",
    "end": "119600"
  },
  {
    "text": "obious obvously doing this for a much longer time I think for example turla has documented cases going back to 2012",
    "start": "119600",
    "end": "128840"
  },
  {
    "text": "whereas ransomware actors we're maybe talking 2017 uh or later right so that doesn't",
    "start": "128840",
    "end": "137959"
  },
  {
    "text": "necessarily forecast like good things if we look forward like five years or six",
    "start": "137959",
    "end": "143200"
  },
  {
    "text": "years so once we've decided on using a vulnerable drivers for our rootkit uh",
    "start": "143200",
    "end": "151360"
  },
  {
    "text": "the question is like how can you get uh those drivers loaded on",
    "start": "151360",
    "end": "156560"
  },
  {
    "text": "endpoint and there's a few different ways to do that uh like if we look at uh",
    "start": "156560",
    "end": "161879"
  },
  {
    "text": "project zero Trends we can see in the wild OD day uh use is just up uh year by",
    "start": "161879",
    "end": "168840"
  },
  {
    "text": "year it's not going down uh or leveling off uh so that that would be a way to",
    "start": "168840",
    "end": "175080"
  },
  {
    "text": "get your rootkit loaded right with a zero day uh and just two things about uh",
    "start": "175080",
    "end": "181840"
  },
  {
    "text": "about this graph uh a lot of these bugs are either because a new attack surface",
    "start": "181840",
    "end": "188760"
  },
  {
    "text": "is discovered and so a lot of researchers pile on uh and then a bunch",
    "start": "188760",
    "end": "194840"
  },
  {
    "text": "of zero days drop out at at the end of that uh or a vendor patches a vulnerability but fails to do",
    "start": "194840",
    "end": "201959"
  },
  {
    "text": "appropriate variant uh analysis and so same story researchers find those",
    "start": "201959",
    "end": "208720"
  },
  {
    "text": "related uh bugs uh right a good example of this is over the last two years we've",
    "start": "208720",
    "end": "214480"
  },
  {
    "text": "had uh many bugs uh for uh related to clfs on Windows for privilege escalation",
    "start": "214480",
    "end": "221400"
  },
  {
    "text": "like 10 or something like that not the actual number I don't know 12",
    "start": "221400",
    "end": "227280"
  },
  {
    "text": "maybe uh so if you don't have a zero day uh what about n day uh to load your your",
    "start": "227760",
    "end": "233879"
  },
  {
    "text": "vulnerable driver uh and then what we need to think about is like what's the average patch time uh four",
    "start": "233879",
    "end": "240200"
  },
  {
    "text": "vulnerabilities and you can see like in the bottom right you have 16 days for",
    "start": "240200",
    "end": "246079"
  },
  {
    "text": "high and critical and 151 days for medium and low uh now this is average",
    "start": "246079",
    "end": "252879"
  },
  {
    "text": "right so in your corporate environment probably like your finance department they have automatic updates turned on so",
    "start": "252879",
    "end": "260199"
  },
  {
    "text": "they have uh No Lack time but you also have systems that run like business",
    "start": "260199",
    "end": "265520"
  },
  {
    "text": "critical applications which probably have more La time so there's a lot of Varian and you can",
    "start": "265520",
    "end": "271560"
  },
  {
    "text": "see uh common reasons that people report that there is a lag uh in patch time on",
    "start": "271560",
    "end": "278160"
  },
  {
    "text": "the slides right right and so here we we",
    "start": "278160",
    "end": "283320"
  },
  {
    "text": "have an example of an end uh that uh Valentina and I exploited earlier this",
    "start": "283320",
    "end": "288680"
  },
  {
    "text": "year in the uh ancillary function driver or afd and because of um insufficiently",
    "start": "288680",
    "end": "296759"
  },
  {
    "text": "checking um data uh user apply data it was possible to write uh a semic",
    "start": "296759",
    "end": "304440"
  },
  {
    "text": "controlled value to a kernel address and it was relatively easy to turn that",
    "start": "304440",
    "end": "309520"
  },
  {
    "text": "primitive into a fully functioning exploit and the the reason I bring this up here is because it took us only TW 24",
    "start": "309520",
    "end": "317560"
  },
  {
    "text": "hours to uh diff uh the patch find the vulnerability and write the exploit so",
    "start": "317560",
    "end": "325120"
  },
  {
    "text": "at that point you're well within this 16-day average p time for for end days",
    "start": "325120",
    "end": "332880"
  },
  {
    "text": "right okay so what if you don't have o day you don't have end day then you can start to think about uh admin to Kernel",
    "start": "332880",
    "end": "340440"
  },
  {
    "text": "right uh and usually people are very dismissive of that uh and uh of course",
    "start": "340440",
    "end": "346199"
  },
  {
    "text": "Microsoft doesn't consider admin to Kernel Security boundary but I think",
    "start": "346199",
    "end": "351240"
  },
  {
    "text": "this is a mistake right um personally just my opinion uh that this is a",
    "start": "351240",
    "end": "357880"
  },
  {
    "text": "mistake because as we know like hom users are running in the context of a user that has admin access uh and in a",
    "start": "357880",
    "end": "365199"
  },
  {
    "text": "corporate environment we can see uh something like this here where an attacker breaches the active directory",
    "start": "365199",
    "end": "372680"
  },
  {
    "text": "uh environment at some point right and then later in the attack life cycle they elevate their privileges uh in ad and",
    "start": "372680",
    "end": "380639"
  },
  {
    "text": "this is an if right not when this is going to happen something that I can see",
    "start": "380639",
    "end": "386960"
  },
  {
    "text": "from the work we do on our team uh right and then at that point the attacker can",
    "start": "386960",
    "end": "393639"
  },
  {
    "text": "access other machines in ad as admin that they've never touched before",
    "start": "393639",
    "end": "399759"
  },
  {
    "text": "enabling things like lateral movement using uh root kits or persistence again",
    "start": "399759",
    "end": "405599"
  },
  {
    "text": "using rootkits in memory like on Long running",
    "start": "405599",
    "end": "410240"
  },
  {
    "text": "servers okay so you may Wonder like what's the reason to actually operate uh",
    "start": "410680",
    "end": "417160"
  },
  {
    "text": "in kernel space um versus user space and there's just",
    "start": "417160",
    "end": "422199"
  },
  {
    "text": "some simple reasons that I highlight here right like some mitigations only exist in userland so you don't have to",
    "start": "422199",
    "end": "430319"
  },
  {
    "text": "deal with them uh if you're operating in the kernel uh and as we know like EDR",
    "start": "430319",
    "end": "436199"
  },
  {
    "text": "has become hyp specialized uh I think if you ask any people who are doing red teaming work",
    "start": "436199",
    "end": "442560"
  },
  {
    "text": "here at the conference they'll tell you that over the last few years these capabilities of the EDR products have",
    "start": "442560",
    "end": "448960"
  },
  {
    "text": "increased by quite a lot uh but this specialization hasn't extended uh into",
    "start": "448960",
    "end": "454639"
  },
  {
    "text": "kernel or not to the same degree uh and then if we do a cost analysis you know",
    "start": "454639",
    "end": "462000"
  },
  {
    "text": "whatever like in billable hours uh if a capability survives longer in the kernel",
    "start": "462000",
    "end": "469400"
  },
  {
    "text": "than in userland then it makes sense to invest uh in that uh and finally like",
    "start": "469400",
    "end": "475680"
  },
  {
    "text": "the kernel is complex and undocumented uh in in in many ways uh and so writing",
    "start": "475680",
    "end": "482520"
  },
  {
    "text": "detections uh could be difficult or they might be brittle or they might incur uh",
    "start": "482520",
    "end": "488360"
  },
  {
    "text": "unacceptable performance costs right okay so here we can see our",
    "start": "488360",
    "end": "497360"
  },
  {
    "text": "fancy uh full chain life cycle diagram but it's pretty easy like",
    "start": "497360",
    "end": "504000"
  },
  {
    "text": "do you have admin uh do you have OD or endday then you can load your uh your driver um and then blind OS and EDR",
    "start": "504000",
    "end": "512880"
  },
  {
    "text": "Telemetry uh if you don't then you you go next right you're not at the stage to",
    "start": "512880",
    "end": "517919"
  },
  {
    "text": "use that capability uh there just some things to think about since we're using signed vulnerable drivers we need to",
    "start": "517919",
    "end": "524440"
  },
  {
    "text": "make sure that um our driver is not part of some block list or isn't signatured",
    "start": "524440",
    "end": "531320"
  },
  {
    "text": "by vendors uh and additionally if the endpoint has uh some security mitigation",
    "start": "531320",
    "end": "539360"
  },
  {
    "text": "enabled like virtualization based security we need to think about if some",
    "start": "539360",
    "end": "544839"
  },
  {
    "text": "of the capabilities in our rootkit can't be used at that point but we'll talk about that",
    "start": "544839",
    "end": "551000"
  },
  {
    "text": "later okay and then we can see just like the core features uh of",
    "start": "551000",
    "end": "557200"
  },
  {
    "text": "the rootkit we obviously don't have time to go into all of these but we'll touch on a number of these during the rest of",
    "start": "557200",
    "end": "562760"
  },
  {
    "text": "the talk so there's uh Telemetry uh manipulation uh to decrease",
    "start": "562760",
    "end": "569800"
  },
  {
    "text": "signal uh there are more General capabilities uh like manipulating user",
    "start": "569800",
    "end": "575320"
  },
  {
    "text": "land processes patching data structures and stuff and then uh modules which are",
    "start": "575320",
    "end": "580360"
  },
  {
    "text": "generally driver based uh which can do a variety of things like interact",
    "start": "580360",
    "end": "587600"
  },
  {
    "text": "with uh with um the file system or with Hardware devices or on the network",
    "start": "587600",
    "end": "594000"
  },
  {
    "text": "St okay and then we'll get into the trade craft",
    "start": "594000",
    "end": "600640"
  },
  {
    "text": "yes so the first thing I want to talk about is just uh callbacks and etw and so AV and EDR products need Telemetry",
    "start": "600640",
    "end": "609920"
  },
  {
    "text": "right uh to do some magic heris uh and",
    "start": "609920",
    "end": "615560"
  },
  {
    "text": "surface alerts now over time Microsoft has narrowed uh the ability for",
    "start": "615560",
    "end": "621360"
  },
  {
    "text": "thirdparty vendors to do like crazy stuff in the kernel right patch guard is",
    "start": "621360",
    "end": "627000"
  },
  {
    "text": "a good example of that so to prevent vendors from hooking everything or or what have you uh but of course they",
    "start": "627000",
    "end": "633640"
  },
  {
    "text": "provide built-in mechanisms to allow these vendors to get",
    "start": "633640",
    "end": "639839"
  },
  {
    "text": "uh data that they need to surface those alerts like callback and",
    "start": "639839",
    "end": "646320"
  },
  {
    "text": "etw yeah just one note about obsc here um it's always better to reduce or",
    "start": "646320",
    "end": "653079"
  },
  {
    "text": "suddenly manipulate Telemetry than to eliminate it just because that may create signal as well",
    "start": "653079",
    "end": "659800"
  },
  {
    "text": "uh then here for uh callbacks you have your usual suspects image process thread",
    "start": "659800",
    "end": "665000"
  },
  {
    "text": "registry and object like the object one uh specifically might be a bit confusing",
    "start": "665000",
    "end": "670639"
  },
  {
    "text": "but that uh is related to process and thread Pro process thread and",
    "start": "670639",
    "end": "676760"
  },
  {
    "text": "desktop related handle activity where you can receive a call back a pre and",
    "start": "676760",
    "end": "683040"
  },
  {
    "text": "post uh activity uh here uh we see how we could leak these",
    "start": "683040",
    "end": "690200"
  },
  {
    "text": "but generally you leak um public symbol from the kernel module which you can do",
    "start": "690200",
    "end": "696000"
  },
  {
    "text": "like in userland uh and then using a kslr leak you can find where that exists",
    "start": "696000",
    "end": "701920"
  },
  {
    "text": "uh in memory uh and then do some pattern scanning to find the lists of these call",
    "start": "701920",
    "end": "707560"
  },
  {
    "text": "backs you can see an example here uh for process notification routines where we",
    "start": "707560",
    "end": "713519"
  },
  {
    "text": "get an array of pointers for these call backs and then we can you know manipulate that array to to remove uh",
    "start": "713519",
    "end": "720760"
  },
  {
    "text": "one from the list or as you can see these callbacks call some functions so",
    "start": "720760",
    "end": "725920"
  },
  {
    "text": "you could rewrite that function in memory uh then uh kernel",
    "start": "725920",
    "end": "735120"
  },
  {
    "text": "etw um so here we do something similar uh we scan the kernal image uh on",
    "start": "735600",
    "end": "744880"
  },
  {
    "text": "disk uh to find instances where calls happen to etw register and we we can do",
    "start": "744880",
    "end": "751720"
  },
  {
    "text": "that that's not like a technical problem once we have those relative offsets we",
    "start": "751720",
    "end": "756800"
  },
  {
    "text": "can again use um kslr leak to find out where those calls happen in live kernel",
    "start": "756800",
    "end": "762880"
  },
  {
    "text": "memory and then by analyzing the arguments of those calls we can find out",
    "start": "762880",
    "end": "768560"
  },
  {
    "text": "where those uh registration structures exist uh in kernel memory right and those are the green boxes etw reg entry",
    "start": "768560",
    "end": "777320"
  },
  {
    "text": "those are basically big structures that have nested substructures as well uh",
    "start": "777320",
    "end": "782560"
  },
  {
    "text": "like etw guid entry and Trace enable info so if we look again here here you",
    "start": "782560",
    "end": "789560"
  },
  {
    "text": "can see an example of uh our rootkit dumping you know this data for uh",
    "start": "789560",
    "end": "795279"
  },
  {
    "text": "Microsoft Windows thread intelligence or etti as people usually call that uh and",
    "start": "795279",
    "end": "801399"
  },
  {
    "text": "we can see that we can overwrite like the registration entry so to null that",
    "start": "801399",
    "end": "806880"
  },
  {
    "text": "out or the guid entry uh but the better technique uh here I think is to",
    "start": "806880",
    "end": "812959"
  },
  {
    "text": "manipulate this Trace enable info uh structure since we can modify how that",
    "start": "812959",
    "end": "821000"
  },
  {
    "text": "provider works right like we can set is Ena to zero to turn it off or we can reduce the level from FF uh to something",
    "start": "821000",
    "end": "829240"
  },
  {
    "text": "less so less events are captured or change the keywords so that we",
    "start": "829240",
    "end": "834800"
  },
  {
    "text": "selectively neuter some of the events that are being recorded",
    "start": "834800",
    "end": "840560"
  },
  {
    "text": "okay and then remember we had these three scenarios about loading your uh",
    "start": "840560",
    "end": "846040"
  },
  {
    "text": "rootkit and so here we have a demo where uh we're using a a zero day thanks to my",
    "start": "846040",
    "end": "852519"
  },
  {
    "text": "wonderful colleague Valentino uh to elevate privileges load our rootkit and",
    "start": "852519",
    "end": "858639"
  },
  {
    "text": "do this uh etw manipulation so here we're on Windows 11 22 H2 fully up to",
    "start": "858639",
    "end": "866800"
  },
  {
    "text": "date I mean patches were in installed like on the 14th I",
    "start": "866800",
    "end": "873160"
  },
  {
    "text": "guess okay we just check that we're running in a low Integrity context or medium Integrity",
    "start": "876320",
    "end": "883880"
  },
  {
    "text": "context then we exploit our zero day and load our signed vulnerable driver into",
    "start": "884120",
    "end": "889639"
  },
  {
    "text": "memory and then at that point we can leverage the capabilities of our rootkit",
    "start": "889639",
    "end": "895320"
  },
  {
    "text": "here for example we enumerate the etw providers and then uh just for demonstration",
    "start": "895320",
    "end": "902639"
  },
  {
    "text": "purposes I'm just overwriting the last one here in the list to set is enabled uh to one so I can",
    "start": "902639",
    "end": "911320"
  },
  {
    "text": "turn it on if I want uh",
    "start": "911320",
    "end": "916560"
  },
  {
    "text": "and I'm setting the keywords to some arbitrary value in this case just a",
    "start": "916759",
    "end": "921800"
  },
  {
    "text": "bunch of A's just to show you that we can overwrite that in memory all right good I'll hand it over",
    "start": "921800",
    "end": "929639"
  },
  {
    "text": "now to",
    "start": "929639",
    "end": "932160"
  },
  {
    "text": "Valentina uh so just a quick note about our disclosure policy um so our lawyers",
    "start": "936680",
    "end": "943000"
  },
  {
    "text": "don't get mad at us uh we demoed loading our rootkit with a zero day which I",
    "start": "943000",
    "end": "948079"
  },
  {
    "text": "would uh love to talk about but it's not patched yet um and in any case this talk is more focused on um post exploitation",
    "start": "948079",
    "end": "955839"
  },
  {
    "text": "techniques um and we don't have time uh but but as soon as it's patched uh there'll be a follow-up blog post of",
    "start": "955839",
    "end": "963759"
  },
  {
    "text": "course um continuing on with tradecraft um there are many types of robust",
    "start": "964040",
    "end": "969360"
  },
  {
    "text": "methods uh to detect key loggers uh probably most or all types of key",
    "start": "969360",
    "end": "976360"
  },
  {
    "text": "loggers that are publicly known um the first type of key loggers are user mode key loggers that kind of come in two",
    "start": "976360",
    "end": "982920"
  },
  {
    "text": "different forms um so the first type is um uh native hooking key loggers um",
    "start": "982920",
    "end": "991920"
  },
  {
    "text": "installing lowlevel keyboard hooks um and these can be easily detected by just enumerating where there are hooks on",
    "start": "991920",
    "end": "999160"
  },
  {
    "text": "keystrokes um and the second type is polling key loggers and uh they get",
    "start": "999160",
    "end": "1004199"
  },
  {
    "text": "keystroke information by making repeated calls to NT functions uh like G get a and Key State",
    "start": "1004199",
    "end": "1011639"
  },
  {
    "text": "uh which can be detected by monitoring um which processes are making those um",
    "start": "1011639",
    "end": "1017480"
  },
  {
    "text": "system calls um and detecting those calls can be done in a variety of ways um it can be done",
    "start": "1017480",
    "end": "1024438"
  },
  {
    "text": "by function hooking etw tracing call stack unwinding and I'm sure there's",
    "start": "1024439",
    "end": "1030400"
  },
  {
    "text": "more um and in kernel mode you usually see keyboard filter drivers um keyboard",
    "start": "1030400",
    "end": "1037959"
  },
  {
    "text": "filter drivers will create a device and attach uh the device to the actual",
    "start": "1037959",
    "end": "1043199"
  },
  {
    "text": "physical keyboard device um and it will receive uh keystrokes via her uh when",
    "start": "1043199",
    "end": "1049720"
  },
  {
    "text": "the real keyboard device does uh these are also easy to detect because all you have to do is enumerate um what keyboard",
    "start": "1049720",
    "end": "1058280"
  },
  {
    "text": "devices there are and if there are devices attached to them um and hiding",
    "start": "1058280",
    "end": "1063960"
  },
  {
    "text": "the driver is becomes a little bit more difficult because uh the driver is now part of a um a driver stack um receiving",
    "start": "1063960",
    "end": "1073000"
  },
  {
    "text": "these keystrokes so just simply uh unlinking it and hiding it in different",
    "start": "1073000",
    "end": "1078159"
  },
  {
    "text": "ways does disrupt",
    "start": "1078159",
    "end": "1081600"
  },
  {
    "text": "functionality um so let's think about a better way uh that's much harder to detect uh I came across this method uh",
    "start": "1085280",
    "end": "1093400"
  },
  {
    "text": "while investigating ways to make the most stealthy key logger um and I started by reverse engineering that get",
    "start": "1093400",
    "end": "1100200"
  },
  {
    "text": "async to keystate function uh which is what polling user M user mode uh key key",
    "start": "1100200",
    "end": "1107159"
  },
  {
    "text": "loggers will do uh they'll query it to obtain key States",
    "start": "1107159",
    "end": "1112280"
  },
  {
    "text": "it's pretty short simple function uh the uh this compilations on the screen all",
    "start": "1112280",
    "end": "1118080"
  },
  {
    "text": "it does is query this uh a couple of global uh keystroke tables um the main",
    "start": "1118080",
    "end": "1124000"
  },
  {
    "text": "one is called GF async keystate and it Returns the results to the caller um",
    "start": "1124000",
    "end": "1129840"
  },
  {
    "text": "you'll also notice that there's an etw Trace point there um which goes back to",
    "start": "1129840",
    "end": "1134919"
  },
  {
    "text": "my previous point about detecting collars um one of the major ways malware evades EDR is by uh foregoing calls to",
    "start": "1134919",
    "end": "1143679"
  },
  {
    "text": "the like higher level API calls from Colonel colel 32 or user 32 um that are",
    "start": "1143679",
    "end": "1151080"
  },
  {
    "text": "usually hooked or monitored more than the lower level NT system calls directly",
    "start": "1151080",
    "end": "1156120"
  },
  {
    "text": "uh but still you can't really avoid evade being detected if you're calling those functions because there's etw",
    "start": "1156120",
    "end": "1162120"
  },
  {
    "text": "Trace points um unless you of course employ the technique that my uh colleague spoke",
    "start": "1162120",
    "end": "1168880"
  },
  {
    "text": "about earlier about um blinding etw",
    "start": "1168880",
    "end": "1174120"
  },
  {
    "text": "callbacks uh so we can implement this key logger uh without calling into that",
    "start": "1175159",
    "end": "1180280"
  },
  {
    "text": "API by reading the global kernel keystroke table directly and key logging",
    "start": "1180280",
    "end": "1185760"
  },
  {
    "text": "in this way is actually super easy uh it's much more simpler uh than writing a key a keystroke filter driver for",
    "start": "1185760",
    "end": "1193520"
  },
  {
    "text": "example uh all that's necessary is to locate the pointer to This Global table",
    "start": "1193520",
    "end": "1198559"
  },
  {
    "text": "um in Windows 10 and earlier it's exported in the driver wind 32k base uh",
    "start": "1198559",
    "end": "1204960"
  },
  {
    "text": "on Windows 11 it moved uh and it's not exported but it's also pretty straightforward to find the address as",
    "start": "1204960",
    "end": "1212360"
  },
  {
    "text": "well um so all that's really necessary at this point is to map the physical page of the global keystroke table um",
    "start": "1212360",
    "end": "1220159"
  },
  {
    "text": "array to a user mode virtual address and you can pull that user mode uh that user",
    "start": "1220159",
    "end": "1226360"
  },
  {
    "text": "mode memory in ring three uh just like you would your run-of-the-mill uh user",
    "start": "1226360",
    "end": "1231880"
  },
  {
    "text": "mode key logger uh except you don't need to make those repeated system calls over and over so not only can you avoid",
    "start": "1231880",
    "end": "1238559"
  },
  {
    "text": "detection uh by not making those system calls you're also uh very efficient for",
    "start": "1238559",
    "end": "1243799"
  },
  {
    "text": "performance because you're avoiding all of those con contact switches calling into the kernel that can um be costly",
    "start": "1243799",
    "end": "1251880"
  },
  {
    "text": "and you have to do it every single time you want to query the state of a keystroke so um it's not very",
    "start": "1251880",
    "end": "1260520"
  },
  {
    "text": "efficient um so another capability that we have implemented is feature flag",
    "start": "1262120",
    "end": "1267159"
  },
  {
    "text": "manipulation uh feature flags are a component of Windows that toggle various",
    "start": "1267159",
    "end": "1272200"
  },
  {
    "text": "functionalities and also experiments uh there are a lot of undocumented feature Flags to uh toggle functionalities some",
    "start": "1272200",
    "end": "1280120"
  },
  {
    "text": "includ examples include tabs and file explorer um the wind 32k driver in Rust",
    "start": "1280120",
    "end": "1287240"
  },
  {
    "text": "is uh toggleable by a feature flag as recently announced by Dave Weston at uh",
    "start": "1287240",
    "end": "1292799"
  },
  {
    "text": "blue had um and they can also toggle patches for vulnerabilities um in recent",
    "start": "1292799",
    "end": "1298760"
  },
  {
    "text": "windows Insider preview editions there's a feature flag for um the ability to",
    "start": "1298760",
    "end": "1303799"
  },
  {
    "text": "leak kernel addresses via the NT query system information apis um and there's",
    "start": "1303799",
    "end": "1309640"
  },
  {
    "text": "there they are used for a lot of different things within Windows um so as",
    "start": "1309640",
    "end": "1314679"
  },
  {
    "text": "you can see a future flag can influence a wide variety of system anal application behavior um and manipulating",
    "start": "1314679",
    "end": "1321000"
  },
  {
    "text": "their State uh is pretty useful for post exploitation",
    "start": "1321000",
    "end": "1326320"
  },
  {
    "text": "purposes here's an example of a feature flag implementation uh this one is for a",
    "start": "1330039",
    "end": "1335320"
  },
  {
    "text": "patch for a recent remote code execution vulnerability in",
    "start": "1335320",
    "end": "1340840"
  },
  {
    "text": "msmq um Q messaging system uh the vulnerability was uh dubbed Q jumper you",
    "start": "1340840",
    "end": "1347679"
  },
  {
    "text": "can see here that the code queries the state of the feature whether it's enabled or not and if it's enabled uh",
    "start": "1347679",
    "end": "1355720"
  },
  {
    "text": "the patched saved code path will be executed but if it's disabled the",
    "start": "1355720",
    "end": "1361799"
  },
  {
    "text": "vulnerable old code path will be executed and this is just one example of",
    "start": "1361799",
    "end": "1367159"
  },
  {
    "text": "an application querying and using feature Flags to Mo to significantly mod",
    "start": "1367159",
    "end": "1373039"
  },
  {
    "text": "modify their runtime Behavior uh you might be familiar with",
    "start": "1373039",
    "end": "1379240"
  },
  {
    "text": "some tools that enable you to do feature flag manipulation from user space some",
    "start": "1379240",
    "end": "1384480"
  },
  {
    "text": "examples are Vive or Mach 2 internally these uh these tools call when API",
    "start": "1384480",
    "end": "1389919"
  },
  {
    "text": "functions some undocumented some not to change the feature flag configurations however there are",
    "start": "1389919",
    "end": "1396640"
  },
  {
    "text": "limitations you still need to have elevated access um and even with elevated access it's still not permitted",
    "start": "1396640",
    "end": "1403760"
  },
  {
    "text": "to change certain types of features uh which include security features or image",
    "start": "1403760",
    "end": "1408880"
  },
  {
    "text": "override features uh during run time but by modifying the configuration State uh",
    "start": "1408880",
    "end": "1416480"
  },
  {
    "text": "in kernel memory we can totally bypass those restrictions and toggle on and off",
    "start": "1416480",
    "end": "1421880"
  },
  {
    "text": "those features as we",
    "start": "1421880",
    "end": "1425000"
  },
  {
    "text": "please um so the actual technique to do this uh there's a global kernel object",
    "start": "1427279",
    "end": "1432840"
  },
  {
    "text": "named cmf system manager that stores handles to sections and virtual address",
    "start": "1432840",
    "end": "1439400"
  },
  {
    "text": "mappings um that are tables to the feature flag configurations uh so we can",
    "start": "1439400",
    "end": "1445360"
  },
  {
    "text": "change their state by directly overwriting uh the tables in memory uh",
    "start": "1445360",
    "end": "1451600"
  },
  {
    "text": "currently we don't have operational use case for this capability but if you use your imagination there are many things",
    "start": "1451600",
    "end": "1459080"
  },
  {
    "text": "uh this where this can potentially be useful for post exploitation red teaming",
    "start": "1459080",
    "end": "1464840"
  },
  {
    "text": "uh some possibilities include open leaving open back doors in vulnerabilities which might be useful",
    "start": "1464840",
    "end": "1471679"
  },
  {
    "text": "for um uh persisting as low privilege and then exploiting or",
    "start": "1471679",
    "end": "1477559"
  },
  {
    "text": "misattribution obus skating attribution revealing more attack surfaces",
    "start": "1477559",
    "end": "1483120"
  },
  {
    "text": "collecting your stopping Telemetry or much more um with feature flag use",
    "start": "1483120",
    "end": "1489080"
  },
  {
    "text": "that's been growing a lot in the last recent years but in particular the last",
    "start": "1489080",
    "end": "1495520"
  },
  {
    "text": "four months I would say uh we probably be begin to see and discover um a lot of",
    "start": "1495520",
    "end": "1502720"
  },
  {
    "text": "post exploitation uses for feature flag",
    "start": "1502720",
    "end": "1507760"
  },
  {
    "text": "manipulation another benefit of operating in the kernel is that we have compl complete control over networking",
    "start": "1509840",
    "end": "1516600"
  },
  {
    "text": "this gives us the ability to filter drop intercept or manipulate what goes in and",
    "start": "1516600",
    "end": "1522000"
  },
  {
    "text": "out of the network uh when divert is a great example of an open source driver that off off offers robust and easy to",
    "start": "1522000",
    "end": "1529399"
  },
  {
    "text": "use Network filtering capabilities uh you can filter based on IP port process",
    "start": "1529399",
    "end": "1536360"
  },
  {
    "text": "um and more uh and this has a number of operational use cases such as dropping",
    "start": "1536360",
    "end": "1541600"
  },
  {
    "text": "intercepting or manipulating EDR Telemetry traffic uh relaying such as SB",
    "start": "1541600",
    "end": "1547640"
  },
  {
    "text": "relaying uh or covert persistence just a few examples um and you might be",
    "start": "1547640",
    "end": "1554200"
  },
  {
    "text": "wondering about driver payloads in general so for example when divert is a sign driver uh so there's no issues",
    "start": "1554200",
    "end": "1561679"
  },
  {
    "text": "loading it but you might be wondering about um what if your driver's not",
    "start": "1561679",
    "end": "1567279"
  },
  {
    "text": "signed uh so those method um there are some options including patching um con",
    "start": "1567279",
    "end": "1574399"
  },
  {
    "text": "uh code Integrity um or uh uh loading your driver in",
    "start": "1574399",
    "end": "1580559"
  },
  {
    "text": "memory and those methods are blocked by certain mitigations if you have them",
    "start": "1580559",
    "end": "1585840"
  },
  {
    "text": "turned on um another thing is is that you don't necessarily need to load a driver to do",
    "start": "1585840",
    "end": "1593480"
  },
  {
    "text": "these direct kernel object manipulation techniques um if you have a vulnerab a",
    "start": "1593480",
    "end": "1599440"
  },
  {
    "text": "kernel vulnerability that gives you read write access to the kernel then you",
    "start": "1599440",
    "end": "1604840"
  },
  {
    "text": "don't actually need kernel code execution to begin with to do them",
    "start": "1604840",
    "end": "1611039"
  },
  {
    "text": "um uh also you can also sign the driver legitimately if you have a certificate",
    "start": "1611039",
    "end": "1616559"
  },
  {
    "text": "or use a leak or expired certificate so windows currently suffers from a",
    "start": "1616559",
    "end": "1621960"
  },
  {
    "text": "vulnerability um that considers expired certificates from before 2015 is valid",
    "start": "1621960",
    "end": "1627520"
  },
  {
    "text": "so you can use those sign use those to sign a driver as long as the certificate hasn't been",
    "start": "1627520",
    "end": "1634320"
  },
  {
    "text": "revoked um so here's a demo of us doing a network filtering",
    "start": "1637520",
    "end": "1643120"
  },
  {
    "text": "manipulation um here you can see that uh connection is being being established uh",
    "start": "1643120",
    "end": "1649360"
  },
  {
    "text": "with a particular IP address um this is before loading our driver or uh loading",
    "start": "1649360",
    "end": "1657399"
  },
  {
    "text": "a a networking filtering tool um this is just demonstrating the or engine of the",
    "start": "1657399",
    "end": "1663399"
  },
  {
    "text": "IP address which is uh from crowd strike as we can tell from the",
    "start": "1663399",
    "end": "1668640"
  },
  {
    "text": "certificate and now we're going to uh load our networking manipulation model",
    "start": "1668640",
    "end": "1675640"
  },
  {
    "text": "uh module and to give it the rule to drop all crowd strike",
    "start": "1675640",
    "end": "1682480"
  },
  {
    "text": "traffic and so now that after this has been executed uh nothing from crowd",
    "start": "1684039",
    "end": "1689399"
  },
  {
    "text": "strike can get in or out so crowd strike does not uh get endpoint",
    "start": "1689399",
    "end": "1695880"
  },
  {
    "text": "Telemetry um as my colleague stated earlier um it's more beneficial to",
    "start": "1695880",
    "end": "1703279"
  },
  {
    "text": "intercept uh and manipulate Telemetry data",
    "start": "1703279",
    "end": "1708519"
  },
  {
    "text": "versus just blocking it all together because that also can generate an alert but that is also possible using um this",
    "start": "1708519",
    "end": "1718320"
  },
  {
    "text": "method uh so lastly for techniques a variety of user land manipulation can be done with a kernel rot kit of course um",
    "start": "1721240",
    "end": "1729679"
  },
  {
    "text": "the this includes handle duplication changing the protections on a process and shell cone injection into a user Ted",
    "start": "1729679",
    "end": "1736720"
  },
  {
    "text": "process um and this manipulation can do be done in various ways uh we don't have time to",
    "start": "1736720",
    "end": "1742720"
  },
  {
    "text": "cover all of them but it's straightforward if you have the ability to execute kernel code uh you can just",
    "start": "1742720",
    "end": "1748880"
  },
  {
    "text": "mirror what the windows os does",
    "start": "1748880",
    "end": "1753480"
  },
  {
    "text": "legitimately and so this is a nice Segway into the next topic which is",
    "start": "1754399",
    "end": "1759559"
  },
  {
    "text": "virtualization based security I'm sure at some point in this talk you might have had had the thought that well okay",
    "start": "1759559",
    "end": "1767399"
  },
  {
    "text": "what about these these mitigations uh virtualization and Hardware mitigations",
    "start": "1767399",
    "end": "1772720"
  },
  {
    "text": "that Windows has been working hard at implementing in in the recent years uh surely that will block all or most of",
    "start": "1772720",
    "end": "1780039"
  },
  {
    "text": "the techniques that we've discussed today uh so let's talk about it first let's uh talk about what",
    "start": "1780039",
    "end": "1787440"
  },
  {
    "text": "virtualization based security is uh virtualization based security consists of a set of mitigations that use",
    "start": "1787440",
    "end": "1794159"
  },
  {
    "text": "hardware virtualization and the windows hypervisor to create an isolated environment that becomes the root of",
    "start": "1794159",
    "end": "1800559"
  },
  {
    "text": "trust it assumes that the kernel can be compromised uh it is specifically intended to weaken kernel exploits and",
    "start": "1800559",
    "end": "1808000"
  },
  {
    "text": "rootkits um and the most relevant of those medications it doesn't include all of them um it's just a group of",
    "start": "1808000",
    "end": "1813720"
  },
  {
    "text": "medications but the ones that I chose to discuss below are kernel data protection",
    "start": "1813720",
    "end": "1818799"
  },
  {
    "text": "hypervisor protected code integrity hbci and Hyper guard which is like the",
    "start": "1818799",
    "end": "1824360"
  },
  {
    "text": "original patch guard but using the secure hyper",
    "start": "1824360",
    "end": "1829240"
  },
  {
    "text": "er uh so with all of these virtualization based mitigations how are",
    "start": "1829919",
    "end": "1835080"
  },
  {
    "text": "we actually restricted um in actual absolute terms we can still do the",
    "start": "1835080",
    "end": "1841080"
  },
  {
    "text": "majority of dcom data only techniques since many kernel structures aren't",
    "start": "1841080",
    "end": "1846240"
  },
  {
    "text": "protected by patchu guard or kernel data production um where we're really",
    "start": "1846240",
    "end": "1851399"
  },
  {
    "text": "actually restricted is in loading drivers or unsigned kernel code with HCI",
    "start": "1851399",
    "end": "1856919"
  },
  {
    "text": "and enabled you can't load onside drivers and even drivers that are legitimate and signed if they have site",
    "start": "1856919",
    "end": "1864360"
  },
  {
    "text": "self-modifying code uh like sections with read write execute permissions uh it will not be",
    "start": "1864360",
    "end": "1872159"
  },
  {
    "text": "permitted to be loaded even if it's legitimately signed um however we do still have kernel code reuse techniques",
    "start": "1872159",
    "end": "1880159"
  },
  {
    "text": "uh so we can call arbitrary code kernel functions and even register kernel callbacks uh which will all cover",
    "start": "1880159",
    "end": "1887799"
  },
  {
    "text": "shortly really the ultimate restriction is that we can't load on sign drivers or",
    "start": "1887799",
    "end": "1894480"
  },
  {
    "text": "call a continuous chunk of Kernel code um but we can still execute code in the",
    "start": "1894480",
    "end": "1901158"
  },
  {
    "text": "kernel um so here's a couple of powerful techniques to bypass kernel Co execution",
    "start": "1904159",
    "end": "1909679"
  },
  {
    "text": "restrictions imposed by VBS uh the first is thread contacts manipulation where",
    "start": "1909679",
    "end": "1915960"
  },
  {
    "text": "the thread contacts uh return address if you make the the thread alertable then",
    "start": "1915960",
    "end": "1921720"
  },
  {
    "text": "you can change the address where it will resume execution and you can pick an",
    "start": "1921720",
    "end": "1926799"
  },
  {
    "text": "arbitrary kernel function for that uh the next one which is AR arguably more",
    "start": "1926799",
    "end": "1932679"
  },
  {
    "text": "powerful right now is called page swapping or page",
    "start": "1932679",
    "end": "1937960"
  },
  {
    "text": "remapping um the page swapping technique relies on the fact that kernel data",
    "start": "1939200",
    "end": "1944559"
  },
  {
    "text": "protection does not protect how vir ual addresses uh how the virtual address",
    "start": "1944559",
    "end": "1950039"
  },
  {
    "text": "that Maps a protected page is translated any protected region can be remapped uh",
    "start": "1950039",
    "end": "1956039"
  },
  {
    "text": "so it's possible to modify a page table so that the virtual address to some",
    "start": "1956039",
    "end": "1961200"
  },
  {
    "text": "protected data will point to a physical page that is not protected and then right to the protected virtual address",
    "start": "1961200",
    "end": "1967760"
  },
  {
    "text": "afterwards um a cool implementation of this technique was recently published um in a blog post by researcher Wang",
    "start": "1967760",
    "end": "1975840"
  },
  {
    "text": "Akia um where he modifies a service dispatch table which holds pointers to",
    "start": "1975840",
    "end": "1981360"
  },
  {
    "text": "system call functions um and this is really useful because um parameters are",
    "start": "1981360",
    "end": "1987360"
  },
  {
    "text": "all controllable from user space and since Windows doesn't have smap supervisor memory access protection you",
    "start": "1987360",
    "end": "1994639"
  },
  {
    "text": "can pass in user mode pointers that were only intended uh to functions that were only intended to process kernel mode",
    "start": "1994639",
    "end": "2002360"
  },
  {
    "text": "pointers um so this allows us to easily call any kernel function we want there's no need to load a driver and therefore",
    "start": "2002360",
    "end": "2009639"
  },
  {
    "text": "HCI is never actually an issue uh the only imit limitation that is that you",
    "start": "2009639",
    "end": "2015279"
  },
  {
    "text": "can't do chain calls so calling one kernel function into another but that's a a limitation that can be easily um",
    "start": "2015279",
    "end": "2023399"
  },
  {
    "text": "dealt with and another thing uh about the ssdt page REM mapping technique is",
    "start": "2023399",
    "end": "2030360"
  },
  {
    "text": "that you can do it for only the process context of your currently controlled process so um",
    "start": "2030360",
    "end": "2037600"
  },
  {
    "text": "patch guard does not detect that because they monitor that uh virtual address in",
    "start": "2037600",
    "end": "2044200"
  },
  {
    "text": "the system process there are some Hardware",
    "start": "2044200",
    "end": "2050040"
  },
  {
    "text": "mitigations that can block some of the taxs that I talked about uh but they require having specific hardware for",
    "start": "2050040",
    "end": "2056320"
  },
  {
    "text": "example kernel code enforcement technology is basically like uh control Flor flow Integrity for the kernel uh",
    "start": "2056320",
    "end": "2063599"
  },
  {
    "text": "and that will kill R attacks such as the thread contact manipulation technique and then there's also Intel VT rep uh",
    "start": "2063599",
    "end": "2071398"
  },
  {
    "text": "that's supported by uh 12th generation Intel CPUs um which will block the page",
    "start": "2071399",
    "end": "2077320"
  },
  {
    "text": "swapping technique that I just talked about um however this one is not even implemented by Windows um from what I'm",
    "start": "2077320",
    "end": "2084560"
  },
  {
    "text": "told they're working on it but it requires non-trivial design changes and",
    "start": "2084560",
    "end": "2090200"
  },
  {
    "text": "so ultimately actually all of the techniques that we've presented today are still possible even with all of the",
    "start": "2090200",
    "end": "2096440"
  },
  {
    "text": "virtual ization based security M mitigations and supported Hardware mitigations uh this should be at least",
    "start": "2096440",
    "end": "2102760"
  },
  {
    "text": "somewhat distressing to you if you were a Defender um so what can Defenders do uh",
    "start": "2102760",
    "end": "2110359"
  },
  {
    "text": "our recommendation is taking advantage of all available protections mitigations virtualization based in Hardware but",
    "start": "2110359",
    "end": "2117079"
  },
  {
    "text": "setting that up is not a userfriendly experience uh we recommend constructing",
    "start": "2117079",
    "end": "2123640"
  },
  {
    "text": "a pol a policy with WD wizard the Windows Defender application control",
    "start": "2123640",
    "end": "2128800"
  },
  {
    "text": "wizard um and also outline some steps to make sure that you're enabling all the virtualization based security",
    "start": "2128800",
    "end": "2135640"
  },
  {
    "text": "mitigations that you can and here's a list of toggles we gra",
    "start": "2135640",
    "end": "2143000"
  },
  {
    "text": "recommend when constructing a policy um if you're interested you can download the slides tomorrow and take a",
    "start": "2143000",
    "end": "2149760"
  },
  {
    "text": "look um and that that's all we got uh we'll take questions",
    "start": "2149760",
    "end": "2155560"
  },
  {
    "text": "now [Applause]",
    "start": "2155800",
    "end": "2166229"
  },
  {
    "text": "all",
    "start": "2167359",
    "end": "2169559"
  },
  {
    "text": "right hello excuse me I want to ask questions so regarding you uh you're",
    "start": "2181440",
    "end": "2187599"
  },
  {
    "text": "mentioning about brocking the Tes of the EDR so do you find I'm sorry I can't really hear you",
    "start": "2187599",
    "end": "2195040"
  },
  {
    "text": "that well yeah hello is that better uh I I think so keep going yeah I'm just",
    "start": "2195040",
    "end": "2201040"
  },
  {
    "text": "trying to ask about um regarding to your P to um blocking the TCH for for the Ed",
    "start": "2201040",
    "end": "2206720"
  },
  {
    "text": "Solutions so are you doing it on the DN uh ndis driver or you're doing it with",
    "start": "2206720",
    "end": "2212400"
  },
  {
    "text": "the uh W uh FP so uh what do you want to I didn't",
    "start": "2212400",
    "end": "2220880"
  },
  {
    "text": "hear the the blocking the EDR trometry like the network filtering oh uh for",
    "start": "2220880",
    "end": "2227400"
  },
  {
    "text": "Network filtering yes yeah we're using uh wind divert what's what is the",
    "start": "2227400",
    "end": "2232560"
  },
  {
    "text": "question exactly or so in Wind diver we can Define either uh based on process or",
    "start": "2232560",
    "end": "2241640"
  },
  {
    "text": "source and destination I see I see yeah I thought you was trying to do the um the yourself so that was I was asking",
    "start": "2241640",
    "end": "2248440"
  },
  {
    "text": "the question oh yeah thank you yeah yeah",
    "start": "2248440",
    "end": "2253040"
  },
  {
    "text": "okay no more question uh we will also be around here",
    "start": "2255359",
    "end": "2260400"
  },
  {
    "text": "at the stage if people want to come up and ask some questions because I think we're the last uh session of the day",
    "start": "2260400",
    "end": "2266640"
  },
  {
    "text": "yeah so you can just come up to the stage I think it might be a little bit easier to hear it as well if you have",
    "start": "2266640",
    "end": "2274240"
  },
  {
    "text": "questions okay all",
    "start": "2274240",
    "end": "2279160"
  },
  {
    "text": "right",
    "start": "2281400",
    "end": "2284400"
  }
]