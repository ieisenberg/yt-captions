[
  {
    "start": "0",
    "end": "19000"
  },
  {
    "text": "[Music]",
    "start": "860",
    "end": "10160"
  },
  {
    "text": "thank you everyone for attending our talk about ksdb an account takeover vulnerability with in azure most popular",
    "start": "10160",
    "end": "16240"
  },
  {
    "text": "database solution cosmos db so just a quick huawei before we begin",
    "start": "16240",
    "end": "22000"
  },
  {
    "start": "19000",
    "end": "19000"
  },
  {
    "text": "my name is sagi and here with me is neil hey we are both security researchers from wiz research team and our team",
    "start": "22000",
    "end": "28720"
  },
  {
    "text": "vision is to uncover new attack vectors in the cloud we also presented in the last blackhead",
    "start": "28720",
    "end": "34079"
  },
  {
    "text": "and defcon events and these are the talks that we gave our team does most list cloud security",
    "start": "34079",
    "end": "39600"
  },
  {
    "text": "research and we publish our findings on our blog here are some of our most recent publications",
    "start": "39600",
    "end": "46399"
  },
  {
    "text": "note that we are also planning to disclose more vulnerabilities soon so stay tuned",
    "start": "47920",
    "end": "54320"
  },
  {
    "text": "okay so in august 2021 we reported microsoft across account vulnerability that was found in azure cosmos db",
    "start": "54480",
    "end": "61520"
  },
  {
    "text": "exploiting this vulnerability effectively effectively allows any attacker to fully compromise cosmos db",
    "start": "61520",
    "end": "67680"
  },
  {
    "text": "databases of other customers this vulnerability got a lot of attention and today for the very first",
    "start": "67680",
    "end": "74240"
  },
  {
    "text": "time we are going to reveal all of the technical information behind this vulnerability including how we even",
    "start": "74240",
    "end": "79920"
  },
  {
    "text": "manage to get access to some azure internal infrastructure",
    "start": "79920",
    "end": "85040"
  },
  {
    "text": "before we dive into the technical details let's go over the agenda for today",
    "start": "85119",
    "end": "90240"
  },
  {
    "text": "we will first talk about what is cosmos db and why we decided to research it specifically",
    "start": "90240",
    "end": "95520"
  },
  {
    "text": "we will then walk you through the technical details of the first two bug that we found in this service and then",
    "start": "95520",
    "end": "100640"
  },
  {
    "text": "we will uncover some new information about an azure internal component called the wire server",
    "start": "100640",
    "end": "107040"
  },
  {
    "text": "with this new knowledge in mind we'll discuss the technical details of the third bug and how we chained all of the",
    "start": "107040",
    "end": "112399"
  },
  {
    "text": "bugs together for a full account takeover vulnerability we will then show you a demonstration of",
    "start": "112399",
    "end": "118880"
  },
  {
    "text": "the full exploit from unauthenticated attacker to a full database compromise",
    "start": "118880",
    "end": "125360"
  },
  {
    "text": "we will finish with a summary regarding everything that we've learned during this research",
    "start": "125439",
    "end": "130479"
  },
  {
    "text": "hopefully by the end of this talk you will have a better understanding of azure architecture in general and cosmos",
    "start": "130479",
    "end": "136080"
  },
  {
    "text": "db specifically you will also understand how we exploited multiple flaws in this architecture and share them together for",
    "start": "136080",
    "end": "143120"
  },
  {
    "text": "an account takeover vulnerability let's talk about what is cosmos db and",
    "start": "143120",
    "end": "148879"
  },
  {
    "start": "147000",
    "end": "147000"
  },
  {
    "text": "our motivation for this research for those of you who don't who are not familiar with cosmos db it is a managed",
    "start": "148879",
    "end": "155440"
  },
  {
    "text": "database solution offered by azure this means that if you are an azure customer and you need a database for",
    "start": "155440",
    "end": "161120"
  },
  {
    "text": "your application you will most likely use cosmos db turns out that this service is very",
    "start": "161120",
    "end": "166879"
  },
  {
    "text": "popular among azure customers let's have a look on this screenshot taken from microsoft website and you can",
    "start": "166879",
    "end": "172800"
  },
  {
    "text": "see there are some very big names that are using cosmos db being a popular database solution this",
    "start": "172800",
    "end": "179519"
  },
  {
    "text": "makes cosmos debate the holy grail for attackers everything an attacker wants for an organization is usually stored in a",
    "start": "179519",
    "end": "185840"
  },
  {
    "text": "database and for this reason we thought that if we will find a vulnerability in that service it will have a lot of",
    "start": "185840",
    "end": "191680"
  },
  {
    "text": "impact but if we are being completely honest we didn't even intend to find the",
    "start": "191680",
    "end": "197120"
  },
  {
    "text": "vulnerability in cosmos db we were actually looking for common misconfigurations that customers can",
    "start": "197120",
    "end": "202480"
  },
  {
    "text": "make when they set up the cosmos tv account but you know one thing led to another",
    "start": "202480",
    "end": "207599"
  },
  {
    "text": "and here we are so as i mentioned before at this point",
    "start": "207599",
    "end": "214480"
  },
  {
    "start": "210000",
    "end": "210000"
  },
  {
    "text": "we are not looking for er for vulnerabilities we are simply scanning the features that this service has to offer to see what",
    "start": "214480",
    "end": "221200"
  },
  {
    "text": "can be misconfigured then we notice that cosmos db comes bundled with another product called",
    "start": "221200",
    "end": "227360"
  },
  {
    "text": "jupiter notebook for those of you who don't know what jupiter notebook is it looks something like this",
    "start": "227360",
    "end": "234239"
  },
  {
    "text": "in short jupyter notebook is a web application that lets you represent your data in cool ways using code",
    "start": "234239",
    "end": "240480"
  },
  {
    "text": "cosmos db users use these jupyter notebooks to view and analyze their data",
    "start": "240480",
    "end": "245840"
  },
  {
    "text": "because we were already familiar with jupyter notebook we knew that it lets its user execute arbitrary code in",
    "start": "245840",
    "end": "251680"
  },
  {
    "text": "different programming languages this raised multiple questions for us like who owns this machine is this",
    "start": "251680",
    "end": "258000"
  },
  {
    "text": "machine shared across users and what resources can it access",
    "start": "258000",
    "end": "263600"
  },
  {
    "text": "so let's talk about the first bug that we found we started digging into the jupiter",
    "start": "263919",
    "end": "269840"
  },
  {
    "start": "267000",
    "end": "267000"
  },
  {
    "text": "notebook feature and we quickly found out that we are running inside the docker container using a low privileged",
    "start": "269840",
    "end": "275040"
  },
  {
    "text": "user named cosmos user you can see in that picture that this user has the uid of 9000 and gid of 9000",
    "start": "275040",
    "end": "283840"
  },
  {
    "text": "the service even offers an embedded web terminal which is much more convenient but we're still running as this",
    "start": "284000",
    "end": "289520"
  },
  {
    "text": "unprivileged user cosmos user unfortunately this user does not have wood privileges it is not in the sodor's",
    "start": "289520",
    "end": "296400"
  },
  {
    "text": "group so we only performed some basic recon using this user but there were still a lot of things that we wanted to",
    "start": "296400",
    "end": "302160"
  },
  {
    "text": "access but couldn't then we wondered how hard would it be to root this",
    "start": "302160",
    "end": "307440"
  },
  {
    "text": "machine after clicking on enough what buttons in the web interface we found a way to",
    "start": "307440",
    "end": "313199"
  },
  {
    "text": "escalate our privileges to our surprise any code that runs in the sisa and decision programming",
    "start": "313199",
    "end": "319360"
  },
  {
    "text": "language is actually executed with good privileges this happens because behind the scenes",
    "start": "319360",
    "end": "325360"
  },
  {
    "text": "every programming language has its own host process and for some unknown reason the host process for decision",
    "start": "325360",
    "end": "331520"
  },
  {
    "text": "programming language specifically is actually running without privileges",
    "start": "331520",
    "end": "337039"
  },
  {
    "text": "this means that all we had to do in order to elevate our privileges to root is to execute these five lines of codes",
    "start": "337039",
    "end": "343199"
  },
  {
    "text": "in the city of notebook and we get root so let's quickly view a demo video of",
    "start": "343199",
    "end": "349759"
  },
  {
    "text": "how we exploited this misconfiguration to obtain root privileges what you can now see on screen is me",
    "start": "349759",
    "end": "356160"
  },
  {
    "text": "opening the embedded web terminal and issuing the id command to verify that i'm running as cosmos user",
    "start": "356160",
    "end": "362000"
  },
  {
    "text": "we will also view the content of the atc password file to verify that our malicious entry is not deleted",
    "start": "362000",
    "end": "368880"
  },
  {
    "text": "now i execute the same id command but this time using the python 3 notebook",
    "start": "368880",
    "end": "374000"
  },
  {
    "text": "and you can see that we are still running as the cosmos user now all i have to do in order to elevate",
    "start": "374000",
    "end": "380960"
  },
  {
    "text": "my privileges is actually to switch the programming language from python free to seashell",
    "start": "380960",
    "end": "388400"
  },
  {
    "text": "any code that will run this in decision of notebook will actually be executed with good privileges so our local",
    "start": "388400",
    "end": "394960"
  },
  {
    "text": "privilege escalation payload edits the atc password file and the panel entry there for the root number 2 user which",
    "start": "394960",
    "end": "401840"
  },
  {
    "text": "will have the uid of 0 and gid of 0 effectively granting us good privileges",
    "start": "401840",
    "end": "409800"
  },
  {
    "text": "finally what we have to do is to actually switch user to the root number to user in order to achieve our word",
    "start": "412639",
    "end": "418720"
  },
  {
    "text": "privileges and as you can see once we finish doing that we have wood",
    "start": "418720",
    "end": "425440"
  },
  {
    "text": "okay so we are now done with bag number one let's continue to the next one",
    "start": "426000",
    "end": "431680"
  },
  {
    "start": "431000",
    "end": "431000"
  },
  {
    "text": "so we now have root privileges on the machine let's try to answer some of our unanswered questions from earlier by",
    "start": "431759",
    "end": "437840"
  },
  {
    "text": "performing a more extensive recon we issued the iptables command to view local firewall rules in order to see",
    "start": "437840",
    "end": "444479"
  },
  {
    "text": "which network resources we can access and which we shouldn't you can see there that there are a",
    "start": "444479",
    "end": "450240"
  },
  {
    "text": "couple of interesting rules here so let's talk about them",
    "start": "450240",
    "end": "454880"
  },
  {
    "text": "first there's this tool that prevents us from accessing the metadata service also known as imds",
    "start": "455440",
    "end": "461680"
  },
  {
    "text": "the mds is a service that you can query using http to view metadata information regarding your vm instance",
    "start": "461680",
    "end": "468720"
  },
  {
    "text": "for some reason the developers of the service do not want us to access it",
    "start": "468720",
    "end": "474400"
  },
  {
    "text": "there's also this rule that prevents us from accessing the 10.0016 subnet and at",
    "start": "474560",
    "end": "480319"
  },
  {
    "text": "this point we do not know what this summit is the only thing that we know about it is that this is a summary of internal ip",
    "start": "480319",
    "end": "486639"
  },
  {
    "text": "addresses and that we shouldn't be able to access it finally there is this rule that prevents",
    "start": "486639",
    "end": "493599"
  },
  {
    "text": "us from accessing this ip address once again we are not familiar with this ip address and we don't know what is",
    "start": "493599",
    "end": "499440"
  },
  {
    "text": "purpose and why we shouldn't be able to access it but the good thing is that we are",
    "start": "499440",
    "end": "504960"
  },
  {
    "text": "actually running with root privileges and these are local firewall rules that were configured using ib tables",
    "start": "504960",
    "end": "510960"
  },
  {
    "text": "this means that there is nothing that prevents us from removing these rules",
    "start": "510960",
    "end": "516159"
  },
  {
    "text": "as you can see in this picture we simply issued the iptables-f command to remove the local firewall rules",
    "start": "516320",
    "end": "523039"
  },
  {
    "text": "these rules were not meant to protect from an attacker without access a safer approach would be to enforce the",
    "start": "523039",
    "end": "528800"
  },
  {
    "text": "source outside of the container as an attacker this makes me excited we",
    "start": "528800",
    "end": "535360"
  },
  {
    "text": "just removed the one thing that prevented us from accessing this network resources and we know for a fact that",
    "start": "535360",
    "end": "540959"
  },
  {
    "text": "the developer of this feature explicitly tried to prevent us from accessing it",
    "start": "540959",
    "end": "546720"
  },
  {
    "start": "546000",
    "end": "546000"
  },
  {
    "text": "so we remove the local firewalls this means that we can now access the mds",
    "start": "546720",
    "end": "552399"
  },
  {
    "text": "given we are not supposed to access it the only reasonable thing is to try and see why",
    "start": "552399",
    "end": "558720"
  },
  {
    "text": "you can now see on screen dancer that we got from the mds and there are a couple of interesting things here",
    "start": "559040",
    "end": "565600"
  },
  {
    "text": "the first thing is that our azure environment is set to azure public cloud and our subscription id is",
    "start": "565600",
    "end": "571760"
  },
  {
    "text": "not a subscription id that we own this may indicate that we are running in some sort of a shared environment and",
    "start": "571760",
    "end": "577440"
  },
  {
    "text": "that we are not the one paying for this virtual machine another interesting thing here is that",
    "start": "577440",
    "end": "583600"
  },
  {
    "text": "our voice type is set to windows this is strange we are obviously running linux command in the linux terminal why",
    "start": "583600",
    "end": "590000"
  },
  {
    "text": "is it set to windows after exploring our environment a bit more we concluded that we are actually",
    "start": "590000",
    "end": "595920"
  },
  {
    "text": "growing our host machine metadata service and not a metadata service of our container",
    "start": "595920",
    "end": "602480"
  },
  {
    "text": "the last thing that you cannot see in this picture is that according to the mds we also have an ip address in the",
    "start": "602959",
    "end": "609320"
  },
  {
    "text": "10.0016 subnet just to remind you this is the same subnet that we are not supposed to",
    "start": "609320",
    "end": "615120"
  },
  {
    "text": "access according to the firewalls ok let's do a quick recap about",
    "start": "615120",
    "end": "621680"
  },
  {
    "text": "everything that we achieved so far we set up a jupiter notebook container for our cosmos db account and we",
    "start": "621680",
    "end": "627839"
  },
  {
    "text": "escalated our privilege there from cosmos user to root the next thing that we did was a",
    "start": "627839",
    "end": "633360"
  },
  {
    "text": "basic recon we found out that we can remove the local firewall rules and therefore gained unrestricted network access",
    "start": "633360",
    "end": "640079"
  },
  {
    "text": "inside our environment after that we query the metadata service",
    "start": "640079",
    "end": "645920"
  },
  {
    "text": "and found out that we are not the one hosting this virtual machine and it is probably hosted by azure perhaps in a",
    "start": "645920",
    "end": "652160"
  },
  {
    "text": "shared environment i will now hand it over to nir to continue explaining about our recon",
    "start": "652160",
    "end": "657519"
  },
  {
    "text": "efforts thank you sagi let's continue the network recon",
    "start": "657519",
    "end": "663360"
  },
  {
    "start": "660000",
    "end": "660000"
  },
  {
    "text": "if we'll have another look at the machine ip table rules there's that mysterious ip address",
    "start": "663360",
    "end": "668800"
  },
  {
    "text": "what is this ip address when we search these ipads on google we found this msdn article according to",
    "start": "668800",
    "end": "675920"
  },
  {
    "text": "this article this is a virtual ip address that exists on every azure virtual machine",
    "start": "675920",
    "end": "681360"
  },
  {
    "text": "and it has a name the wire server what does the microsoft recommendation",
    "start": "681360",
    "end": "687920"
  },
  {
    "text": "say about this mysterious endpoint called the wild server first we know it's a server that is",
    "start": "687920",
    "end": "693040"
  },
  {
    "text": "accessible in http and that this server manages the extensions of every azure virtual machine",
    "start": "693040",
    "end": "699440"
  },
  {
    "text": "extensions are just software applications that azure manages they can be first first party software like",
    "start": "699440",
    "end": "705040"
  },
  {
    "text": "azure's logo analytics agent or third-party software that has azure supports for example data though",
    "start": "705040",
    "end": "711839"
  },
  {
    "text": "when a customer chooses to install an extension via joe the wire server instructs the virtual",
    "start": "711839",
    "end": "717680"
  },
  {
    "text": "machines agent to install the extension supplying the appropriate configuration that configuration may even include",
    "start": "717680",
    "end": "724240"
  },
  {
    "text": "sensitive information and any extension information that we can extract from the wire server will",
    "start": "724240",
    "end": "729600"
  },
  {
    "text": "help us to better understand the underlying virtual machine and the environment we are running in",
    "start": "729600",
    "end": "735200"
  },
  {
    "text": "but after looking at all the documentation that microsoft has to offer about the wire server what is most",
    "start": "735200",
    "end": "741440"
  },
  {
    "text": "evident is that this server has little to no documentation but there's a silver lining the wire",
    "start": "741440",
    "end": "748000"
  },
  {
    "text": "server has two clients designed to install and configure extensions based on the information fetched from this",
    "start": "748000",
    "end": "753760"
  },
  {
    "text": "server the linux and windows virtual machine agents that come pre-installed",
    "start": "753760",
    "end": "758800"
  },
  {
    "text": "on all azure virtual machines the linux agent also known as the wa",
    "start": "758800",
    "end": "764399"
  },
  {
    "text": "agent or the wa linux agent is an open source project hosted on github",
    "start": "764399",
    "end": "770160"
  },
  {
    "text": "maybe by reading the source code of the linux agent we'll be able to learn something about the wire server's functionalities",
    "start": "770160",
    "end": "776639"
  },
  {
    "text": "it's also worth mentioning that some of our research regarding the wire server is based on the work of another security",
    "start": "776639",
    "end": "781920"
  },
  {
    "text": "researcher paul litvak from intizel paul already already did some high quality research on this topic and",
    "start": "781920",
    "end": "788160"
  },
  {
    "text": "detailed it in a great blog post to recap you can think about the wire server as the backend of the wa agent",
    "start": "788160",
    "end": "794800"
  },
  {
    "text": "the azure linux virtual machine agent it is used to supply any information that the agent needs to function properly",
    "start": "794800",
    "end": "801200"
  },
  {
    "text": "with that in mind let's examine how the wa agent gets its extension information from the well",
    "start": "801200",
    "end": "806880"
  },
  {
    "text": "server the first thing the agent needs to do",
    "start": "806880",
    "end": "812240"
  },
  {
    "text": "before fetching any configurations let alone the extension configuration is to download the machine's goal state",
    "start": "812240",
    "end": "819120"
  },
  {
    "text": "the goal set is among other things a phone book of endpoints responsible for different",
    "start": "819120",
    "end": "824320"
  },
  {
    "text": "kind of information it contains a list of endpoints that the engine needs to contact to fetch",
    "start": "824320",
    "end": "829360"
  },
  {
    "text": "different configuration settings note that you can download any azure virtual machine goal state by executing",
    "start": "829360",
    "end": "835279"
  },
  {
    "text": "the following crl command using this command you can retrieve all",
    "start": "835279",
    "end": "840639"
  },
  {
    "text": "your configuration endpoints specific for your virtual machine",
    "start": "840639",
    "end": "846000"
  },
  {
    "text": "and here you can see the goal state we fetched executing the corl command on our own linux virtual machine we set up",
    "start": "846320",
    "end": "851680"
  },
  {
    "text": "for testing here you can see that it contains a bunch of different urls but the url we",
    "start": "851680",
    "end": "857279"
  },
  {
    "text": "care about is the extension configuration url which holds all the information about the virtual machine",
    "start": "857279",
    "end": "862720"
  },
  {
    "text": "extensions we were initially forbidden from accessing the well server because of the",
    "start": "862720",
    "end": "867839"
  },
  {
    "text": "local firewall rules but now we can start fetching information let's try to get the information of the",
    "start": "867839",
    "end": "873199"
  },
  {
    "text": "underlying machines extension by executing the same crl command on the jupyter node container",
    "start": "873199",
    "end": "880079"
  },
  {
    "text": "and get the underlying machine virtual machine goal state including its extension configuration",
    "start": "880079",
    "end": "885360"
  },
  {
    "text": "url now after getting back our extension configuration url let's try to access it",
    "start": "885360",
    "end": "891760"
  },
  {
    "text": "as well",
    "start": "891760",
    "end": "894920"
  },
  {
    "start": "898000",
    "end": "898000"
  },
  {
    "text": "now we can fetch extension information from the extension configuration endpoint here is an example of the extension",
    "start": "898320",
    "end": "904160"
  },
  {
    "text": "configuration from a linux based virtual machine in this case the linux diagnostic extension",
    "start": "904160",
    "end": "912360"
  },
  {
    "text": "the extension configuration section has two main parts there's the public settings section",
    "start": "912399",
    "end": "917760"
  },
  {
    "text": "which is now highlighted in red that contains public data without any sensitive information",
    "start": "917760",
    "end": "924399"
  },
  {
    "text": "and there's the protected settings section which is usually encrypted and therefore we suspect that it might contain",
    "start": "924399",
    "end": "930880"
  },
  {
    "text": "sensitive information this is the linux diagnostic base64",
    "start": "930880",
    "end": "936000"
  },
  {
    "text": "encoded encrypted protected settings now with that in mind let's examine the",
    "start": "936000",
    "end": "942560"
  },
  {
    "text": "jupiter notebook extensions remember that although we are running inside of a linux environment the",
    "start": "942560",
    "end": "949440"
  },
  {
    "text": "extension information we are putting from the wire server is of the host windows virtual machine and here you can",
    "start": "949440",
    "end": "954880"
  },
  {
    "text": "see that our host virtual machine has the dsms for windows extension which also has a protected settings",
    "start": "954880",
    "end": "960800"
  },
  {
    "text": "section and as i stated before the protected settings are encrypted and we",
    "start": "960800",
    "end": "966000"
  },
  {
    "text": "suspect it might contain some sensitive information so we decided to try and decrypt it",
    "start": "966000",
    "end": "972480"
  },
  {
    "text": "let's see how the agent itself declares the protected secting section",
    "start": "972480",
    "end": "978160"
  },
  {
    "start": "978000",
    "end": "978000"
  },
  {
    "text": "where does the agent get the decryption key from well similar to the extension configuration endpoint there is a",
    "start": "978959",
    "end": "984639"
  },
  {
    "text": "certificate endpoint for retrieving both encryption and decryption keys this endpoint also can be found in the",
    "start": "984639",
    "end": "990880"
  },
  {
    "text": "machine's gold state we fetched earlier these certificates are the golden key",
    "start": "990880",
    "end": "996720"
  },
  {
    "text": "used to decrypt all sensitive protected settings making them inherently sensitive information",
    "start": "996720",
    "end": "1003199"
  },
  {
    "text": "you wouldn't transfer them in unencrypted communication right the way the agent protects these secrets",
    "start": "1003199",
    "end": "1009920"
  },
  {
    "text": "while still using http is by encrypting them using a self-signed certificate it",
    "start": "1009920",
    "end": "1015120"
  },
  {
    "text": "generates and supplies the certificate is not validated by the server meaning we can generate our own",
    "start": "1015120",
    "end": "1021519"
  },
  {
    "text": "self-signed certificate and retrieve the encryption keys from the certificate endpoint we can do that without relying on the",
    "start": "1021519",
    "end": "1028480"
  },
  {
    "text": "certificates that the agent initially generated the self-signed certificate is supplied",
    "start": "1028480",
    "end": "1033678"
  },
  {
    "text": "in the xms guest agent public x 509 cert which is a mouthful of a header",
    "start": "1033679",
    "end": "1040319"
  },
  {
    "text": "and here's the crl comment with that notorious saddle that can be used in order to retrieve the keys required for",
    "start": "1040319",
    "end": "1045918"
  },
  {
    "text": "deception from the certificate endpoint here's the response we get back from the",
    "start": "1045919",
    "end": "1051440"
  },
  {
    "text": "wealth server in our test linux machine and now let's execute the same crl command on the chrosdb jupyter notebook",
    "start": "1051440",
    "end": "1058400"
  },
  {
    "text": "container and here's a response but wait there is a subtle difference",
    "start": "1058400",
    "end": "1064000"
  },
  {
    "text": "can you spot it the format is different",
    "start": "1064000",
    "end": "1069120"
  },
  {
    "text": "on our test linux virtual machine we got back an encrypted pk cs7 blob which we",
    "start": "1069120",
    "end": "1074160"
  },
  {
    "text": "decrypted using a handful of open ssl commands but executing the same open ssl",
    "start": "1074160",
    "end": "1079360"
  },
  {
    "text": "commands on the certificate's bond package format got us nothing so what is the certificate's bond",
    "start": "1079360",
    "end": "1084799"
  },
  {
    "text": "package format anyways the first thing we did researching the certificates bond",
    "start": "1084799",
    "end": "1090640"
  },
  {
    "start": "1087000",
    "end": "1087000"
  },
  {
    "text": "package format is to consult google which didn't have any answers and then we thought",
    "start": "1090640",
    "end": "1097200"
  },
  {
    "text": "maybe somewhat microsoft will have the answer so we consulted bing we did that any answer idle",
    "start": "1097200",
    "end": "1105279"
  },
  {
    "text": "then we thought the wa agent is the client of the wild server it must have",
    "start": "1105520",
    "end": "1110799"
  },
  {
    "text": "some kind of reference to this mysterious format right well wrong",
    "start": "1110799",
    "end": "1115919"
  },
  {
    "text": "zero references then we remembered that according to the metadata service even though we are",
    "start": "1115919",
    "end": "1121520"
  },
  {
    "text": "running inside the linux container a host virtual machine is a windows virtual machine",
    "start": "1121520",
    "end": "1127440"
  },
  {
    "text": "meaning all the responses from the web server are meant to be treated by the windows agent not the linux one",
    "start": "1127440",
    "end": "1134080"
  },
  {
    "text": "unlike the wa agent the windows virtual machine agent also known as the windows azure guest agent is not open source but",
    "start": "1134080",
    "end": "1141520"
  },
  {
    "text": "fortunately this agent is written in c sharp meaning it can be decompiled something that resembles source code",
    "start": "1141520",
    "end": "1147760"
  },
  {
    "text": "fairly easily this can be done using a variety of the compilers we chose il spy",
    "start": "1147760",
    "end": "1154240"
  },
  {
    "text": "and finally here is the first reference we've seen to the certificate's bond package format",
    "start": "1154240",
    "end": "1159679"
  },
  {
    "text": "along with its handling code shown on screen is a small script we",
    "start": "1159679",
    "end": "1166160"
  },
  {
    "text": "wrote to mimic the agent's certificates one package decoding now after decoding and decrypting the",
    "start": "1166160",
    "end": "1172480"
  },
  {
    "text": "certificates upon package we expect to get two keys a private key and a publicly used to encrypt and decrypt the",
    "start": "1172480",
    "end": "1179039"
  },
  {
    "text": "protected settings we can imagine our reaction when in reality we got back 25 certificates and",
    "start": "1179039",
    "end": "1185520"
  },
  {
    "text": "their corresponding private keys some with very intriguing names keep in mind these three as we'll encounter them",
    "start": "1185520",
    "end": "1191600"
  },
  {
    "text": "later on on our journey it is also worth mentioning that one of the certificates and private key we got",
    "start": "1191600",
    "end": "1198240"
  },
  {
    "text": "is for the astrix notebook cosmos azure com domain this alone already lets us to intercept",
    "start": "1198240",
    "end": "1204480"
  },
  {
    "text": "encrypted ssl traffic of customers jupiter notebooks this is a signed certificate by",
    "start": "1204480",
    "end": "1209919"
  },
  {
    "text": "microsoft that we have the private key for after the wire server simply dumped it on us",
    "start": "1209919",
    "end": "1215280"
  },
  {
    "text": "at this point we now are under something",
    "start": "1215280",
    "end": "1219720"
  },
  {
    "text": "so we got a bunch of certificates that we probably shouldn't have which made us wonder",
    "start": "1221280",
    "end": "1226880"
  },
  {
    "text": "what's the legitimate purpose for these certificates so we chose to have another look at the",
    "start": "1226880",
    "end": "1231919"
  },
  {
    "text": "extension configuration we pulled back from the from the wire server",
    "start": "1231919",
    "end": "1236960"
  },
  {
    "text": "shown on screen is one of the entries of the extension configuration settings we got from the wire server specifically",
    "start": "1236960",
    "end": "1243200"
  },
  {
    "text": "the service public node extension which had some interesting information in its public settings",
    "start": "1243200",
    "end": "1248960"
  },
  {
    "text": "as you can see there is an entry called cluster endpoint which contains some kind of url and there is another entry",
    "start": "1248960",
    "end": "1255120"
  },
  {
    "text": "that matches the certificate that we happen to have the fabric quest us1 certificate",
    "start": "1255120",
    "end": "1261200"
  },
  {
    "text": "after accessing the cluster endpoint via google home an authentication pump popped up requesting for an",
    "start": "1261200",
    "end": "1266720"
  },
  {
    "text": "authentication certificate our best bet was to supply the certificate mentioned in the extension",
    "start": "1266720",
    "end": "1271919"
  },
  {
    "text": "configuration the fab request us1 certificate we obtained from the wild server",
    "start": "1271919",
    "end": "1277039"
  },
  {
    "text": "at this point we had our fingers crossed and bam what we got back is a huge xml file",
    "start": "1277039",
    "end": "1283039"
  },
  {
    "text": "containing a bunch of cluster information let's highlight some interesting points first there is another reference to the",
    "start": "1283039",
    "end": "1289679"
  },
  {
    "text": "fabric west us-1 certificate which made us believe that this certificate does have some kind of significance in the",
    "start": "1289679",
    "end": "1296559"
  },
  {
    "text": "context of our cluster and there is a reference to an https port at port 9 port number",
    "start": "1296559",
    "end": "1302840"
  },
  {
    "text": "19080. and another reference to that strange keyword service public",
    "start": "1302840",
    "end": "1308559"
  },
  {
    "text": "what is service fabric at this point we had no idea what",
    "start": "1308559",
    "end": "1313760"
  },
  {
    "text": "service fabric actually is so we googled it then we encountered this msdn article as",
    "start": "1313760",
    "end": "1319520"
  },
  {
    "text": "you can see according to msdn service fabric is a container orchestration solution",
    "start": "1319520",
    "end": "1324720"
  },
  {
    "text": "but from this point until the end of our research we treated it as kubernetes",
    "start": "1324720",
    "end": "1329760"
  },
  {
    "text": "although this is not not the perfect comparison it was good enough for our purposes",
    "start": "1329760",
    "end": "1336000"
  },
  {
    "text": "the manifest files mentioned sport 19080 which according to documentation is a service fabric management port",
    "start": "1336000",
    "end": "1344000"
  },
  {
    "text": "the manifest phase also mentions a few ip addresses in the 10.0.0.0 16 subnet",
    "start": "1344000",
    "end": "1351520"
  },
  {
    "text": "and according to the instance metadata service we've accessed earlier our machine is inside the 10.0.0 subnet",
    "start": "1351679",
    "end": "1359200"
  },
  {
    "text": "and after flushing diaper rules we can access other endpoints inside of our subnet a post can show that some of the",
    "start": "1359200",
    "end": "1365360"
  },
  {
    "text": "endpoints in our subnet are listening on port 19080 the service fabric management port",
    "start": "1365360",
    "end": "1370640"
  },
  {
    "text": "we can use the service public linux command line tool sfc tl and try to connect to the management port the",
    "start": "1370640",
    "end": "1376960"
  },
  {
    "text": "authentication process requires a certificate and there seems to be that one certificate that seems to have all the",
    "start": "1376960",
    "end": "1382559"
  },
  {
    "text": "answers the fabric questions west us-1 certificate so let's try it here the two commands used to authenticate and list",
    "start": "1382559",
    "end": "1389360"
  },
  {
    "text": "all the application instances in our cluster we issued the last command and wondered",
    "start": "1389360",
    "end": "1395120"
  },
  {
    "text": "will it work well it worked",
    "start": "1395120",
    "end": "1400559"
  },
  {
    "text": "the application list command yielded more than 500 cosmos db instances in our original cluster and for each instance",
    "start": "1400559",
    "end": "1406960"
  },
  {
    "start": "1401000",
    "end": "1401000"
  },
  {
    "text": "we received a bunch of encrypted authentication tokens but as i said all these authentication",
    "start": "1406960",
    "end": "1412799"
  },
  {
    "text": "tokens are encrypted they are useless for us no endpoint will receive my encrypted authentication token",
    "start": "1412799",
    "end": "1418799"
  },
  {
    "text": "but wait to this point we only used a fraction of the certificates we obtained from the wire server",
    "start": "1418799",
    "end": "1424960"
  },
  {
    "text": "so maybe one of these certificates are the one used to include the authentication tokens after brute forcing the certificates we",
    "start": "1424960",
    "end": "1431760"
  },
  {
    "text": "felt dumb now knowing that the encryption certificate had a pretty indicative name the fabric secrets was the one",
    "start": "1431760",
    "end": "1437679"
  },
  {
    "text": "certificate used to include all customer authentication tokens in our cluster just one certificate to include all cost",
    "start": "1437679",
    "end": "1444880"
  },
  {
    "text": "tenant sensitive authentication tokens decrypting the cosmos db account key",
    "start": "1444880",
    "end": "1449919"
  },
  {
    "text": "resulted in us gaining the primary key for all cosmos db accounts in our cluster this primary key is equivalent to the",
    "start": "1449919",
    "end": "1456720"
  },
  {
    "text": "root password to the database allowing full access and manipulation of the victim's data i will now i will now hand",
    "start": "1456720",
    "end": "1463440"
  },
  {
    "text": "over the presentation to sagi to demonstrate you the complete exploit chain",
    "start": "1463440",
    "end": "1469120"
  },
  {
    "text": "thank you nim unfortunately we cannot show you a live demo of the exploit because this vulnerability is now patched but luckily",
    "start": "1469120",
    "end": "1476640"
  },
  {
    "text": "we're smart enough in order to record one in advance so let's view it so as you can see the screen is now",
    "start": "1476640",
    "end": "1482720"
  },
  {
    "text": "splitted into two parts the right part is our research account which will which we will perform the",
    "start": "1482720",
    "end": "1488320"
  },
  {
    "text": "attack from and the left part is the target cosmos db account that we want to take over",
    "start": "1488320",
    "end": "1495120"
  },
  {
    "text": "as you can see the two accounts do not belong into the same organization and we will also inspect the access control",
    "start": "1496000",
    "end": "1502000"
  },
  {
    "text": "rules to make sure that the research account does not have any special privileges over the target",
    "start": "1502000",
    "end": "1508159"
  },
  {
    "text": "account the next thing that we'll do is to set",
    "start": "1508159",
    "end": "1513919"
  },
  {
    "text": "up a jupyter notebook container and jailbreak it",
    "start": "1513919",
    "end": "1518480"
  },
  {
    "text": "so as we are still as well already running with wood privileges all we have to do is to flush the ip table holes by",
    "start": "1520320",
    "end": "1526640"
  },
  {
    "text": "issuing the iptables-f command after flashing the iptable rules we can",
    "start": "1526640",
    "end": "1533200"
  },
  {
    "text": "now execute our exploit script now you can see that our exploit scripts requires the",
    "start": "1533200",
    "end": "1539360"
  },
  {
    "text": "name of the account that we want to take over as a parameter i want to emphasize that this is not a",
    "start": "1539360",
    "end": "1544960"
  },
  {
    "text": "requirement by the vulnerability this is actually just a precaution that we took while developing this exploit to make",
    "start": "1544960",
    "end": "1551360"
  },
  {
    "text": "sure that we do not access any data that is not our own even by mistake",
    "start": "1551360",
    "end": "1557840"
  },
  {
    "text": "after executing the exploit script you can see that it dumped on us the plaintext version of the cosmos db",
    "start": "1560400",
    "end": "1566320"
  },
  {
    "text": "account key and if we compare it to the to the primary key that you can find in",
    "start": "1566320",
    "end": "1571600"
  },
  {
    "text": "the term in the management panel you can see that they are identical",
    "start": "1571600",
    "end": "1577520"
  },
  {
    "text": "so let's quickly recap everything that happens behind the scene in this video first we set up a jupyter notebook",
    "start": "1578480",
    "end": "1584480"
  },
  {
    "start": "1579000",
    "end": "1579000"
  },
  {
    "text": "container for cosmos db account then we obtain root privileges inside",
    "start": "1584480",
    "end": "1589679"
  },
  {
    "text": "the notebook container and jailbreak it to be able to access network resources",
    "start": "1589679",
    "end": "1594799"
  },
  {
    "text": "then we query the wire server for certificates and the clock and extract them cluster manifest from the extension",
    "start": "1594799",
    "end": "1600880"
  },
  {
    "text": "from the extension config then we use the certificates from the",
    "start": "1600880",
    "end": "1606720"
  },
  {
    "text": "wire server to connect to connect to our local service fabric cluster and dump the encrypted credentials of all cosmos",
    "start": "1606720",
    "end": "1612960"
  },
  {
    "text": "db accounts in that cluster finally we decrypt the secrets using another certificate we obtained from the",
    "start": "1612960",
    "end": "1619440"
  },
  {
    "text": "wire server the fabric secret certificate you would think that will be done by now",
    "start": "1619440",
    "end": "1626080"
  },
  {
    "text": "but we didn't stop here we only used the fraction of the information that we obtained from the wire server let's see what else we can",
    "start": "1626080",
    "end": "1632720"
  },
  {
    "text": "find let's have another look at the extension config and the cluster manifest",
    "start": "1632720",
    "end": "1638240"
  },
  {
    "text": "this is a snippet from the cluster manifest and as you can see we have a couple of connection strings here for",
    "start": "1638240",
    "end": "1643520"
  },
  {
    "text": "some azure storage accounts but unfortunately these connection strings still require a",
    "start": "1643520",
    "end": "1649039"
  },
  {
    "text": "key luckily these keys can be found in the protected settings section of the",
    "start": "1649039",
    "end": "1654559"
  },
  {
    "text": "extension in the extension config and these are the commands that we use in order to decrypt the protected",
    "start": "1654559",
    "end": "1660000"
  },
  {
    "text": "settings and as you can see this is the plaintext key",
    "start": "1660000",
    "end": "1665840"
  },
  {
    "text": "so we now have four connection strings to different azure storage accounts and these are the accounts",
    "start": "1666720",
    "end": "1673600"
  },
  {
    "text": "it is only reasonable to try and explore them using azure storage explorer",
    "start": "1673600",
    "end": "1679360"
  },
  {
    "text": "this is what the azure storage explorer interface looks like when you connect using our connection strings",
    "start": "1679520",
    "end": "1687039"
  },
  {
    "text": "generally this bucket contained hundreds of gigabytes of data in them but the most interesting thing that we found was",
    "start": "1690720",
    "end": "1697520"
  },
  {
    "text": "a log file that indicated that the ip addresses in the 10.0.06 subnet may have",
    "start": "1697520",
    "end": "1702799"
  },
  {
    "text": "an external interface a public ip address that can be accessed from the internet",
    "start": "1702799",
    "end": "1708080"
  },
  {
    "text": "we thought this might be reasonable perhaps microsoft had the reasons for it but in any case",
    "start": "1708080",
    "end": "1714799"
  },
  {
    "text": "this ip address must be allowed listed right i mean there should be absolutely no",
    "start": "1714799",
    "end": "1720240"
  },
  {
    "text": "reason at all that we will be able to access it from our office right",
    "start": "1720240",
    "end": "1725520"
  },
  {
    "text": "well wrong turns out that we were able to access to this ip address from our office over the",
    "start": "1725520",
    "end": "1732159"
  },
  {
    "text": "internet and view the control panel of the underlying service fabric this is what it looks like",
    "start": "1732159",
    "end": "1739840"
  },
  {
    "text": "just to make sure we all understand this is some internal azure infrastructure that we can access from the internet",
    "start": "1741679",
    "end": "1749440"
  },
  {
    "text": "at this point we were thinking this can be the only end point that is accessible from the internet there must be more",
    "start": "1749440",
    "end": "1755200"
  },
  {
    "text": "endpoints like this so we decided to scan the internet for the service fabric management ports and",
    "start": "1755200",
    "end": "1760720"
  },
  {
    "text": "see how many endpoints will let us authenticate using our master key certificate the fabric.west us-1",
    "start": "1760720",
    "end": "1766559"
  },
  {
    "text": "certificate we managed to successfully authenticate to over 100 service fabrics from our",
    "start": "1766559",
    "end": "1773760"
  },
  {
    "text": "office over the internet even though we use this fabric.west us-1 certificate turns out that it can be",
    "start": "1773760",
    "end": "1780399"
  },
  {
    "text": "used to authenticate to many other regions and services here's a sample of the service fabrics",
    "start": "1780399",
    "end": "1786720"
  },
  {
    "text": "that we successfully authenticated to over the internet at this point we suspect that service",
    "start": "1786720",
    "end": "1792720"
  },
  {
    "text": "fabric is a core component inside azure and is used to do a lot of things behind the scenes",
    "start": "1792720",
    "end": "1798640"
  },
  {
    "text": "i will now hand it over back to nir to summarize our findings",
    "start": "1798640",
    "end": "1803520"
  },
  {
    "text": "thank you sagi let's talk about what we found and what is the impact we managed to retrieve multiple secrets",
    "start": "1804320",
    "end": "1810640"
  },
  {
    "text": "that allows us to access and manipulate customer data in multiple access vectors",
    "start": "1810640",
    "end": "1816159"
  },
  {
    "text": "the first secret is the cosmos db count key which after decryption is identical to the primary key of the cosmos db",
    "start": "1816159",
    "end": "1822240"
  },
  {
    "text": "account as you can see this is the key from our exploit output which is identical to the primary key found in",
    "start": "1822240",
    "end": "1828640"
  },
  {
    "text": "the management panel this key is equivalent to the root password for the data for the database",
    "start": "1828640",
    "end": "1835440"
  },
  {
    "text": "another authentication token that we have is the notebook auth token this token can be used in order to execute",
    "start": "1835440",
    "end": "1841279"
  },
  {
    "text": "arbitrary code inside the jupyter notebook container after executing code there we can use this access to extract",
    "start": "1841279",
    "end": "1847760"
  },
  {
    "text": "the database secrets in this picture you can see how we executed the id command in our container",
    "start": "1847760",
    "end": "1853679"
  },
  {
    "text": "using that token the last token that we'll talk about is",
    "start": "1853679",
    "end": "1859919"
  },
  {
    "text": "the notebook storage account key this token can be used in order to manipulate the content of existing saved notebooks",
    "start": "1859919",
    "end": "1866159"
  },
  {
    "text": "potentially making the victim execute malicious queries on their database without even knowing",
    "start": "1866159",
    "end": "1873039"
  },
  {
    "text": "we confirmed that all of these tokens can be used to access the databases of thousands of visual customers including",
    "start": "1873440",
    "end": "1879440"
  },
  {
    "text": "numerous fortune 5000 companies along the way we also obtained a microsoft sign certificate that can be",
    "start": "1879440",
    "end": "1886399"
  },
  {
    "text": "used to intercept ssl traffic to the notebook service and we also retrieve connection sticks",
    "start": "1886399",
    "end": "1892159"
  },
  {
    "text": "to the azure storage account that reveal metadata regarding customers environments",
    "start": "1892159",
    "end": "1898240"
  },
  {
    "text": "overall we believe that we proved in high degree of control over the entire service especially when this access can",
    "start": "1899200",
    "end": "1905120"
  },
  {
    "text": "be maintained without accessing the vulnerable environment but instead from the internet",
    "start": "1905120",
    "end": "1911919"
  },
  {
    "text": "let's talk about the disclosure timeline and our work with microsoft on august 9 we first managed to exploit the",
    "start": "1911919",
    "end": "1918080"
  },
  {
    "start": "1912000",
    "end": "1912000"
  },
  {
    "text": "vulnerability and three days later we already sent the advisory to microsoft we understood that",
    "start": "1918080",
    "end": "1924240"
  },
  {
    "text": "this is a very severe vulnerability and we wanted to let microsoft know as soon as possible",
    "start": "1924240",
    "end": "1929760"
  },
  {
    "text": "two days later we noticed that microsoft has mitigated the issue the way microsoft chose to address this",
    "start": "1929760",
    "end": "1935279"
  },
  {
    "text": "issue is by removing the jupiter notebook feature altogether",
    "start": "1935279",
    "end": "1940320"
  },
  {
    "text": "this is an extremely fast patch only 48 hours after a report the feature was disabled to all cosmos db account",
    "start": "1941039",
    "end": "1948000"
  },
  {
    "text": "customers on august 16th we first held back from microsoft confirming our findings",
    "start": "1948000",
    "end": "1954320"
  },
  {
    "text": "on the same day we started seeing that some of the credentials we obtained during the research are starting to be",
    "start": "1954320",
    "end": "1959519"
  },
  {
    "text": "evoked and the next day microsoft awarded us with the maximum bounty available for",
    "start": "1959519",
    "end": "1964799"
  },
  {
    "text": "azure forty thousand dollars which you plan to donate this is the fastest bountiful ever seen from microsoft only",
    "start": "1964799",
    "end": "1971760"
  },
  {
    "text": "five days after our initial report which was on a friday on august 23rd we had a great teams",
    "start": "1971760",
    "end": "1978559"
  },
  {
    "text": "meeting with the microsoft team where we discussed their mitigations and they confirmed to us that there are several",
    "start": "1978559",
    "end": "1984000"
  },
  {
    "text": "thousands of customers that are impacted by this vulnerability and three days later microsoft sent an",
    "start": "1984000",
    "end": "1990159"
  },
  {
    "text": "email notifications to customers the b customers that had the jupiter notebook feature they enabled during a research",
    "start": "1990159",
    "end": "1996000"
  },
  {
    "text": "period but we think that microsoft should have emailed all potentially impacted",
    "start": "1996000",
    "end": "2001600"
  },
  {
    "text": "customers although that this vulnerability is now paged you can never be sure that this",
    "start": "2001600",
    "end": "2007679"
  },
  {
    "text": "vulnerability wasn't exploited prior to our engagement so here's the field dr of our entire",
    "start": "2007679",
    "end": "2014320"
  },
  {
    "start": "2012000",
    "end": "2012000"
  },
  {
    "text": "engagement before we finish we jailbreak the notebook container that comes bundled in with",
    "start": "2014320",
    "end": "2021120"
  },
  {
    "text": "with our cosmos db instance by exploiting bag number one and bag number two",
    "start": "2021120",
    "end": "2026799"
  },
  {
    "text": "then we contacted the host machine wire server and got back 25 private keys which only used which we only used a",
    "start": "2026799",
    "end": "2033519"
  },
  {
    "text": "small portion of we used a couple of these private keys to connect to our original service",
    "start": "2033519",
    "end": "2038640"
  },
  {
    "text": "fabric control panel and listed the cosmos db instances in the clusters including the credentials",
    "start": "2038640",
    "end": "2045440"
  },
  {
    "text": "then we proceed to use the same certificates to connect to other cosmos related service fabrics management",
    "start": "2045440",
    "end": "2051280"
  },
  {
    "text": "panels over the internet after a week of research we had to stop our engagement and reported everything",
    "start": "2051280",
    "end": "2058000"
  },
  {
    "text": "that we found to microsoft all in all we think that this is as",
    "start": "2058000",
    "end": "2064480"
  },
  {
    "text": "close as it gets to a service takeover so yeah this is the story of chaosdb the",
    "start": "2064480",
    "end": "2071679"
  },
  {
    "text": "vulnerability that allowed us to hack the databases of thousands of visual customers",
    "start": "2071679",
    "end": "2076800"
  },
  {
    "text": "thank you [Music]",
    "start": "2076800",
    "end": "2088309"
  },
  {
    "text": "you",
    "start": "2088800",
    "end": "2090879"
  }
]