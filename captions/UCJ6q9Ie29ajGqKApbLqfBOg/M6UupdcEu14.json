[
  {
    "text": "do",
    "start": "6080",
    "end": "9080"
  },
  {
    "text": "all right uh hey everybody um my name is cameron hotchkiss i'm here",
    "start": "37440",
    "end": "43440"
  },
  {
    "text": "from hex90.org and i will be presenting blind sql injection automation",
    "start": "43440",
    "end": "48559"
  },
  {
    "text": "techniques going to focus mainly on the exploitation of blind sql injection holes",
    "start": "48559",
    "end": "53600"
  },
  {
    "text": "so thank you for coming now start off fairly easy fairly simplistic i will step it up a little",
    "start": "53600",
    "end": "58960"
  },
  {
    "text": "bit as we go along but start off what is sql injection and basically sql injection comes down to one thing it's",
    "start": "58960",
    "end": "65920"
  },
  {
    "text": "client supplied data it's passed to an application and there's no appropriate data validation going on",
    "start": "65920",
    "end": "71520"
  },
  {
    "text": "to make sure that it's kosher data so when this is passed in it goes on to be",
    "start": "71520",
    "end": "77759"
  },
  {
    "text": "processed as commands by the database i'm sure everybody's familiar with this ever yeah so",
    "start": "77759",
    "end": "84960"
  },
  {
    "text": "sql injection is frequently used to do various things such as performing operations on the database which is a",
    "start": "84960",
    "end": "91439"
  },
  {
    "text": "vague nebulous sentence and but then you can bypass authentication mechanisms uh read",
    "start": "91439",
    "end": "97840"
  },
  {
    "text": "information that probably wouldn't be available to regular user possibly confidential corporate information",
    "start": "97840",
    "end": "103920"
  },
  {
    "text": "and write information such as new user accounts into the database",
    "start": "103920",
    "end": "109280"
  },
  {
    "text": "now there's three general forms sql injection will take",
    "start": "111200",
    "end": "116479"
  },
  {
    "text": "um as they they're used as a text to read information this is what we're going to focus on for the remainder of this talk",
    "start": "116479",
    "end": "122719"
  },
  {
    "text": "pulling confidential corporate information confidential information we're not supposed to be",
    "start": "122719",
    "end": "128160"
  },
  {
    "text": "getting at from the database the web application we're attacking these three methods would take up take on redirection and",
    "start": "128160",
    "end": "134720"
  },
  {
    "text": "reshaping a query now what i mean by that is you've got control over the server you",
    "start": "134720",
    "end": "141280"
  },
  {
    "text": "can start dumping information into the web application and it's presented in a nice readable format easy for you to use",
    "start": "141280",
    "end": "147760"
  },
  {
    "text": "and process takes a bit of effort if you don't know what the schema",
    "start": "147760",
    "end": "153680"
  },
  {
    "text": "is but usually you can end up pulling that out having that spit out and displayed to you and go on from there but this isn't always possible with",
    "start": "153680",
    "end": "160239"
  },
  {
    "text": "every web application you'd encounter second main method would be error message based now error message base is",
    "start": "160239",
    "end": "166560"
  },
  {
    "text": "the one most people are familiar with and do frequently and this results in",
    "start": "166560",
    "end": "172640"
  },
  {
    "text": "usually a sql server based attack where you",
    "start": "172640",
    "end": "178160"
  },
  {
    "text": "hijack and you the you send bogus sql into the query and it'll display an",
    "start": "178160",
    "end": "183920"
  },
  {
    "text": "error message very verbose very easy to read very helpful for the developer helpful for the attacker to pull",
    "start": "183920",
    "end": "189840"
  },
  {
    "text": "information out and then you can start pulling out the design of the query that goes to the database design of the schema and then",
    "start": "189840",
    "end": "196319"
  },
  {
    "text": "the actual information the third one the one we're going to be focusing on is blind injection",
    "start": "196319",
    "end": "202959"
  },
  {
    "text": "now there's a couple different methods that are referred to as blind injection",
    "start": "203040",
    "end": "208480"
  },
  {
    "text": "so i'll just go over what i'm talking about when i say blind injection and usually it results in forming queries",
    "start": "208480",
    "end": "216239"
  },
  {
    "text": "and not getting much intelli intelligible information from the web server",
    "start": "216239",
    "end": "221519"
  },
  {
    "text": "but you still are getting information at a very slow rate it's boolean values yes or no but there's information still",
    "start": "221519",
    "end": "227760"
  },
  {
    "text": "coming out all you have to be able to do is interpret the html pages regardless of what they're displaying",
    "start": "227760",
    "end": "233599"
  },
  {
    "text": "they might not tell you something immediately but they are still telling you information and every form of sql injection can",
    "start": "233599",
    "end": "239439"
  },
  {
    "text": "result in a significant data leakage data loss and then move on to data modification",
    "start": "239439",
    "end": "244720"
  },
  {
    "text": "attacks no form of sql injection is less dangerous than any other some take",
    "start": "244720",
    "end": "251200"
  },
  {
    "text": "longer than others notably blind sql injection but with a blind sql injection we know that we can ask yes or no",
    "start": "251200",
    "end": "257359"
  },
  {
    "text": "questions we're basically playing a game of 20 questions with the web server i'm sure everybody played 20 questions when",
    "start": "257359",
    "end": "263199"
  },
  {
    "text": "they were four years old and they moved on to stop playing it because it was boring",
    "start": "263199",
    "end": "268320"
  },
  {
    "text": "but um why would we focus on blind sql injections blind sql injections probably as common",
    "start": "268320",
    "end": "275199"
  },
  {
    "text": "as any other form of injection but for the most part from a developer standpoint somebody who's aware of sql",
    "start": "275199",
    "end": "282080"
  },
  {
    "text": "injections they're most likely going to be aware of the other forms of sql injection and say oh if i block all the",
    "start": "282080",
    "end": "288479"
  },
  {
    "text": "error pages then i should be fine i should be safer we don't like to admit this but that's",
    "start": "288479",
    "end": "294720"
  },
  {
    "text": "what the cut rate developers out there doing they shouldn't be doing it but they tend to not know any better and it's a false",
    "start": "294720",
    "end": "300720"
  },
  {
    "text": "sense of security on the host system the other reason to focus on blind",
    "start": "300720",
    "end": "305840"
  },
  {
    "text": "injections if we're looking at automating something is that it's going to require a larger investment in time to execute a manual",
    "start": "305840",
    "end": "312479"
  },
  {
    "text": "penetration against how many people in the room have performed a blind sql injection by hand before",
    "start": "312479",
    "end": "319919"
  },
  {
    "text": "how many of those people have carried it all the way through to fully attack the pull real information from the web server same people",
    "start": "319919",
    "end": "326800"
  },
  {
    "text": "okay it's a bit more than i thought there'd be but we'll i'll ask you again at the end",
    "start": "326800",
    "end": "332960"
  },
  {
    "text": "now the benefits of an automated tool said earlier we're playing a game of 20 questions",
    "start": "334880",
    "end": "341120"
  },
  {
    "text": "and we know we can ask as many as we want we're not limited to 20 obviously but there's",
    "start": "341120",
    "end": "346960"
  },
  {
    "text": "no reason to stop at 20 we could just keep asking and asking asking as long as the web server is there it's going to keep answering our yes no questions",
    "start": "346960",
    "end": "354479"
  },
  {
    "text": "but to find the first letter of the username the username is benign it doesn't really do anything for us other than let us",
    "start": "354479",
    "end": "359919"
  },
  {
    "text": "know if they're really bad in running his essay to find the first letter of the username",
    "start": "359919",
    "end": "364960"
  },
  {
    "text": "it's going to take seven requests if we perform a binary search just for the first letter then if we",
    "start": "364960",
    "end": "370960"
  },
  {
    "text": "want to find the full username assume that it's eight letters long it's going to be 56 requests just back and forth to",
    "start": "370960",
    "end": "377280"
  },
  {
    "text": "the web server just asking yes or no questions performing a binary search but how do we know it was eight",
    "start": "377280",
    "end": "383280"
  },
  {
    "text": "we had to find out the length of the username and that's another six request just to find the length so",
    "start": "383280",
    "end": "388319"
  },
  {
    "text": "we're already at 62 requests to the web server send it back wait for network latency hope you didn't type it",
    "start": "388319",
    "end": "394639"
  },
  {
    "text": "wrong comes back interpret the yes or no keep on wash rinse repeat you're doing",
    "start": "394639",
    "end": "399919"
  },
  {
    "text": "this kind of painful it's already starting to add up we'll just assume that it takes about 10",
    "start": "399919",
    "end": "405199"
  },
  {
    "text": "seconds to type this into your web browser network latency comes back",
    "start": "405199",
    "end": "410400"
  },
  {
    "text": "so each request taking 10 seconds and assuming you're not making any mistakes when you're doing these",
    "start": "410400",
    "end": "415919"
  },
  {
    "text": "the 8 character username that we were looking for is taking over 10 minutes now so",
    "start": "415919",
    "end": "421440"
  },
  {
    "text": "yeah as i said earlier the username really doesn't give us that much we're going to want to move on to find the schema or the contents of the database",
    "start": "421440",
    "end": "428319"
  },
  {
    "text": "and that's going to take a lot more than the 62 requests",
    "start": "428319",
    "end": "433840"
  },
  {
    "text": "if we want a non-trivial penetration we're going to want table names we're going to want column names",
    "start": "433840",
    "end": "441440"
  },
  {
    "text": "and we're going to want the actual data that's stored in the database so instead of taking 10 minutes this is",
    "start": "441440",
    "end": "447120"
  },
  {
    "text": "going to very very quickly add up to be hours days weeks months all depending on the size",
    "start": "447120",
    "end": "453520"
  },
  {
    "text": "of the database and i don't know about you guys but i'm sure there's better stuff i'd want to be doing than sitting at my keyboard",
    "start": "453520",
    "end": "461120"
  },
  {
    "text": "entering it in yes no page moving on it's a bit tedious",
    "start": "461120",
    "end": "468960"
  },
  {
    "text": "now it might sound simple to write a tool that would automate this uh just crank one out a few shell",
    "start": "469599",
    "end": "476479"
  },
  {
    "text": "scripts in netcat but if we want a more comprehensive tool a tool that",
    "start": "476479",
    "end": "482160"
  },
  {
    "text": "works on more than just one singular web application that we don't have to come back we don't have to keep messing with",
    "start": "482160",
    "end": "488319"
  },
  {
    "text": "we don't have to keep rewriting every single time it's going to be substantially more complex",
    "start": "488319",
    "end": "495280"
  },
  {
    "text": "now i'd like to show you a sample web application we wrote to do testing with",
    "start": "496479",
    "end": "502160"
  },
  {
    "text": "it's uh an online bicycle store it's pretty ugly web application and if it was a real web",
    "start": "502160",
    "end": "507440"
  },
  {
    "text": "application they'd probably go out of business really quickly but it has the basic elements of what a",
    "start": "507440",
    "end": "513120"
  },
  {
    "text": "web application would have you'd have the title you'd have a banner you'd have a random menu on the side",
    "start": "513120",
    "end": "519680"
  },
  {
    "text": "and this is a catalog we're looking at here the person who brought it up was looking",
    "start": "519680",
    "end": "524880"
  },
  {
    "text": "at bikes they're looking at a schwinn bike and the schwinn bikes 30 that's another reason they might go out of",
    "start": "524880",
    "end": "530480"
  },
  {
    "text": "business shortly but it's generally like there'd be more stuff that's going into a web page but",
    "start": "530480",
    "end": "537200"
  },
  {
    "text": "this is a just a quick example of what it would look like so as you can i don't know if you can",
    "start": "537200",
    "end": "543040"
  },
  {
    "text": "see that but in the address bar the product id is two so mess around with that that might be",
    "start": "543040",
    "end": "549680"
  },
  {
    "text": "our injectable area so we've made one slight modification we just appended and one equals one into",
    "start": "549680",
    "end": "557040"
  },
  {
    "text": "after the numerical two and we get the same page back realistically if there was input",
    "start": "557040",
    "end": "562640"
  },
  {
    "text": "validation going on if it was safely going to the database it shouldn't be returning any information on this but",
    "start": "562640",
    "end": "568800"
  },
  {
    "text": "since it is going to the database it's returning the same page because one is still equal to one it's always going to return true and it's returning the id",
    "start": "568800",
    "end": "576160"
  },
  {
    "text": "number two we're assuming if we move on",
    "start": "576160",
    "end": "581440"
  },
  {
    "text": "modify it a bit more put n one equals zero last time i checked one wasn't equal to",
    "start": "581440",
    "end": "586560"
  },
  {
    "text": "zero so fairly safe to assume that's going to be a false page and it does come back that way comes back with no rows found",
    "start": "586560",
    "end": "592800"
  },
  {
    "text": "indicating we've got a blind sql injection that we can now play with there might be an error based here but",
    "start": "592800",
    "end": "598160"
  },
  {
    "text": "we were looking for blind and we know we can work with it we'll always have a true page we'll",
    "start": "598160",
    "end": "603920"
  },
  {
    "text": "always have a false page if we're performing this form of blind sql injection",
    "start": "603920",
    "end": "609279"
  },
  {
    "text": "now i mentioned earlier that to find the username it would take seven requests and then 56 requests",
    "start": "612480",
    "end": "619680"
  },
  {
    "text": "and basically what we do when we're doing that because i'm going to be referring to this later is",
    "start": "619680",
    "end": "626079"
  },
  {
    "text": "everything can pretty much be broken down into integers when you're pulling it out of the database if it's text convert it to ascii or",
    "start": "626079",
    "end": "632800"
  },
  {
    "text": "convert it to unicode you somehow convert it to a number that you can pull down if it's an actual integer you can",
    "start": "632800",
    "end": "638079"
  },
  {
    "text": "pull it move it to a number if it's some other data format convert it to ascii then convert it to",
    "start": "638079",
    "end": "644560"
  },
  {
    "text": "the integer you're dealing with there but we can always pull down integers from the database so we select a range",
    "start": "644560",
    "end": "651360"
  },
  {
    "text": "usually start with zero if we don't have an upper level or a lower level we can basically just move along asking yes or",
    "start": "651360",
    "end": "657760"
  },
  {
    "text": "no questions to the web application go up exponentially so is it greater than zero is it greater than two is it",
    "start": "657760",
    "end": "664320"
  },
  {
    "text": "greater than four greater than eight just keep going until we hit an upper limit and we now know that it's in",
    "start": "664320",
    "end": "670079"
  },
  {
    "text": "between that number and the previous number that we went to because we knew it was greater than 16 but it's less than 32",
    "start": "670079",
    "end": "677680"
  },
  {
    "text": "and from there you can just start binary going going down splitting it in half until you narrow in the exact number",
    "start": "677680",
    "end": "683680"
  },
  {
    "text": "just by asking is it greater than this number greater than this number comes out fairly easily",
    "start": "683680",
    "end": "689200"
  },
  {
    "text": "so this method can be repeated to pretty much pull all the information very",
    "start": "689200",
    "end": "695440"
  },
  {
    "text": "slowly but it can still come out of the database and this is how we're going to be performing the blind sql injections",
    "start": "695440",
    "end": "702920"
  },
  {
    "text": "now the main problem that we deal with though when we're automating a blind sql injection",
    "start": "708240",
    "end": "714399"
  },
  {
    "text": "is we know now how we can pull all the information out just find the number",
    "start": "714399",
    "end": "719920"
  },
  {
    "text": "that associated with the data we're trying to figure it out and we know that if there's a true page we know there's a",
    "start": "719920",
    "end": "725279"
  },
  {
    "text": "false page it's always going to return one of those unless the server decided to die on us",
    "start": "725279",
    "end": "731200"
  },
  {
    "text": "but we know that we can recognize a true page versus a false page on the bike",
    "start": "731200",
    "end": "736399"
  },
  {
    "text": "shop example it would have that ugly green table and it would have the price and would have the bike name and if it",
    "start": "736399",
    "end": "742480"
  },
  {
    "text": "was a false page it would have the no rows found pretty easiest for us to see but as people we always take pattern",
    "start": "742480",
    "end": "748800"
  },
  {
    "text": "recognition for granted so natural reaction was can't we just do",
    "start": "748800",
    "end": "753920"
  },
  {
    "text": "string comparison i've got because that's what the web page basically comes down to being very long string we have",
    "start": "753920",
    "end": "759440"
  },
  {
    "text": "this we have known true we have a known false compare it to the known true and known false but the problem is we can't",
    "start": "759440",
    "end": "765279"
  },
  {
    "text": "really do that because the whole point of a web application the reason companies are rolling out web applications is they",
    "start": "765279",
    "end": "771519"
  },
  {
    "text": "want dynamic content and it would be pretty naive to assume that the only dynamic content in the web",
    "start": "771519",
    "end": "778320"
  },
  {
    "text": "application is the actual information that we're pulling out there might be random other",
    "start": "778320",
    "end": "783519"
  },
  {
    "text": "stuff coming into the webpage either times rotating banner ads possibly",
    "start": "783519",
    "end": "790079"
  },
  {
    "text": "email this page to a friend that one pops up fairly frequently in web applications because they want everybody",
    "start": "790079",
    "end": "795200"
  },
  {
    "text": "to advertise their site but that's just a hyperlink and it's going to change every time we make a request which is",
    "start": "795200",
    "end": "801680"
  },
  {
    "text": "the url where we're requesting so obviously that's going to cut through a problem if we're just doing string comparisons",
    "start": "801680",
    "end": "807760"
  },
  {
    "text": "string comparisons do work fairly well when you're doing an error based injection tool but for blind it just doesn't work very",
    "start": "807760",
    "end": "814480"
  },
  {
    "text": "well so take another look at the bob's bike shop",
    "start": "814480",
    "end": "821279"
  },
  {
    "text": "example this was the false page that we saw earlier it's the exact same page but if",
    "start": "821279",
    "end": "828079"
  },
  {
    "text": "you look right above the no rows found that's the time every single second we do an injection",
    "start": "828079",
    "end": "834880"
  },
  {
    "text": "that's going to change slightly and it'll throw off the string comparison and if you look underneath it it's",
    "start": "834880",
    "end": "840480"
  },
  {
    "text": "telling you which page you asked for not going to happen very frequently unless it's something where to refer this page to a friend or book this bookmark list",
    "start": "840480",
    "end": "847279"
  },
  {
    "text": "for later and that's going to be changing every single time we do something because at the very end we can see that it's added the end one equals",
    "start": "847279",
    "end": "854000"
  },
  {
    "text": "zero",
    "start": "854000",
    "end": "857000"
  },
  {
    "text": "so first possible solution that we that we went through several solutions when we were trying to write",
    "start": "861680",
    "end": "867760"
  },
  {
    "text": "the tool because this is all based around a tool that we wrote and the first solution we thought of doing was just a keyword search",
    "start": "867760",
    "end": "875199"
  },
  {
    "text": "but the problem with this is that every time you do a test against a different web application there's always going to",
    "start": "875199",
    "end": "881760"
  },
  {
    "text": "be different keywords it could be based on a dictionary and automatically detect it but then depending on what",
    "start": "881760",
    "end": "887600"
  },
  {
    "text": "information you're pulling through the web application depending on what's being displayed it could get thrown off",
    "start": "887600",
    "end": "893680"
  },
  {
    "text": "it's really not a successful way to do this because every time you're gonna have to rewrite the tool or reconfigure the tool",
    "start": "893680",
    "end": "901120"
  },
  {
    "text": "and there's better ways to go about it we want to minimize the amount of interaction the users have when they're",
    "start": "901120",
    "end": "907040"
  },
  {
    "text": "working with the tool so second possible solution might be an md5",
    "start": "907040",
    "end": "912480"
  },
  {
    "text": "sump a lot of people they immediately see this they're like i'll just take an md5 sum of the web page",
    "start": "912480",
    "end": "918160"
  },
  {
    "text": "and just use that in memory and compare the md5 of the true page versus the md5 of the false page to the md5 of the",
    "start": "918160",
    "end": "924399"
  },
  {
    "text": "unknown page but the way md5 works the reason md5 is",
    "start": "924399",
    "end": "929440"
  },
  {
    "text": "used it's a message digest and it's not just md5 it's any cryptographic digest hash",
    "start": "929440",
    "end": "935600"
  },
  {
    "text": "is it's designed for small inputs small changes in the input",
    "start": "935600",
    "end": "941920"
  },
  {
    "text": "to create very very large changes in the output because if somebody changes one word in your message you want to know",
    "start": "941920",
    "end": "947279"
  },
  {
    "text": "immediately that it's changed slightly and it's going to just completely change the entire md5 sum if just one",
    "start": "947279",
    "end": "954800"
  },
  {
    "text": "character change this is an example of that took the home page for google it's not a",
    "start": "954800",
    "end": "960880"
  },
  {
    "text": "very complex page everybody's familiar with it and i just basically took the",
    "start": "960880",
    "end": "966839"
  },
  {
    "text": "index.html saved it took the md5 sum of it and that's the blue lines you can see there on the graph",
    "start": "966839",
    "end": "973120"
  },
  {
    "text": "then i went to the title block changed the word google to google it's just one letter increased the ascii",
    "start": "973120",
    "end": "978880"
  },
  {
    "text": "value by one and it throws the entire graph off it's not close it's not even",
    "start": "978880",
    "end": "984160"
  },
  {
    "text": "near being close and you can't tell what part of the met the html file changed that was just by one letter and",
    "start": "984160",
    "end": "990959"
  },
  {
    "text": "we're worried about random stuff changing regularly so md5 not going to",
    "start": "990959",
    "end": "996480"
  },
  {
    "text": "be the way we want to proceed with this so if you're thinking about using that if",
    "start": "996480",
    "end": "1002240"
  },
  {
    "text": "you want to write a similar tool it's not going to handle the change as well and it might work on some web",
    "start": "1002240",
    "end": "1008000"
  },
  {
    "text": "applications where there's less dynamic content but it won't be comprehensive there's",
    "start": "1008000",
    "end": "1013120"
  },
  {
    "text": "going to be other web applications out there that will have the dynamic content md5 is",
    "start": "1013120",
    "end": "1019600"
  },
  {
    "text": "actually worse than a string comparison because at least when it's a string comparison you can tell at what point they stopped being the same",
    "start": "1019600",
    "end": "1027600"
  },
  {
    "text": "so talking with one of my friends figuring out how we're going to do this",
    "start": "1028480",
    "end": "1034079"
  },
  {
    "text": "and he said why not just use a text different engine i'm sure most of you have used a text",
    "start": "1034079",
    "end": "1039520"
  },
  {
    "text": "different engine of some kind before either diff or even microsoft word it'll highlight",
    "start": "1039520",
    "end": "1046640"
  },
  {
    "text": "the changes in documents highlight informational changes this word was changed to this word this",
    "start": "1046640",
    "end": "1052559"
  },
  {
    "text": "paragraph was moved down three lines but it's a there's a lot of work that goes",
    "start": "1052559",
    "end": "1058320"
  },
  {
    "text": "into doing one of these and there's a lot of information that we don't care about because when it comes",
    "start": "1058320",
    "end": "1064320"
  },
  {
    "text": "down to it it's a yes or no that's the only real answers we care about so",
    "start": "1064320",
    "end": "1069679"
  },
  {
    "text": "there's going to be a lot of effort work wasted while riding the text difference engine",
    "start": "1069679",
    "end": "1074720"
  },
  {
    "text": "and we're just going to throw that away in the end so it doesn't really do us any good to work through it",
    "start": "1074720",
    "end": "1081840"
  },
  {
    "text": "so fourth possible solution there's a lot of different things you could do",
    "start": "1083679",
    "end": "1088799"
  },
  {
    "text": "probably wouldn't want to do the fourth possible one is to represent the text represent the html",
    "start": "1088799",
    "end": "1096559"
  },
  {
    "text": "the same way a browser would as entities in a tree data structure and then you after you've created the",
    "start": "1096559",
    "end": "1102799"
  },
  {
    "text": "html tree you go through and you look for differences in the shape of the trees",
    "start": "1102799",
    "end": "1109039"
  },
  {
    "text": "if different entities are there if it comes down and then there's a table with one cell if it's a true page and then",
    "start": "1109039",
    "end": "1115520"
  },
  {
    "text": "there's no table all of a sudden the tree structure is going to completely change and you would be able to identify",
    "start": "1115520",
    "end": "1120799"
  },
  {
    "text": "the true page versus the false page",
    "start": "1120799",
    "end": "1124399"
  },
  {
    "text": "but the problem with that is that if only non-markup data is changing",
    "start": "1127039",
    "end": "1133039"
  },
  {
    "text": "and that's most likely possible then there's going to be no way to proceed with the automation if the tree",
    "start": "1133039",
    "end": "1138960"
  },
  {
    "text": "structures are the same then it looks the same to the parser",
    "start": "1138960",
    "end": "1144000"
  },
  {
    "text": "at which point you'd have to start comparing the actual text of the",
    "start": "1144000",
    "end": "1149039"
  },
  {
    "text": "entities in the tree and it's gonna you're gonna have to move on to work on a slightly different way to do it",
    "start": "1149039",
    "end": "1154559"
  },
  {
    "text": "and it's easier in practice to implement an xhtml parser",
    "start": "1154559",
    "end": "1159760"
  },
  {
    "text": "than a realistic html parser there's a lot of really really bad coders out there who write really really",
    "start": "1159760",
    "end": "1166720"
  },
  {
    "text": "bad html and like this isn't a new thing this is like 1994 people started writing really",
    "start": "1166720",
    "end": "1172559"
  },
  {
    "text": "bad html and they're still doing it and when it comes down to this it's going to",
    "start": "1172559",
    "end": "1178320"
  },
  {
    "text": "make dealing with this representing it as a tree very complex and you have to start dealing with",
    "start": "1178320",
    "end": "1186160"
  },
  {
    "text": "bugs because you're designing code that's taking advantage of bugs out there so it's fairly safe to assume that their",
    "start": "1186160",
    "end": "1192480"
  },
  {
    "text": "html code is going to be as bad as their back-end code",
    "start": "1192480",
    "end": "1197120"
  },
  {
    "text": "so i'm through showing you stuff we decided not to do and gonna get on to the actual",
    "start": "1198240",
    "end": "1205039"
  },
  {
    "text": "method we're using and what that is is a linear representation of ascii sums",
    "start": "1205039",
    "end": "1211919"
  },
  {
    "text": "what i mean when i say that is you basically look at the html file as a",
    "start": "1211919",
    "end": "1217280"
  },
  {
    "text": "list it's a sequence of elements delimited by carriage returns",
    "start": "1217280",
    "end": "1223200"
  },
  {
    "text": "which is the same way we look at it and you take each line of text in the html",
    "start": "1223200",
    "end": "1228320"
  },
  {
    "text": "file take the ascii value of each character sum it up and that way for each line you",
    "start": "1228320",
    "end": "1234000"
  },
  {
    "text": "get a single unique number and well unique to that line i guess but",
    "start": "1234000",
    "end": "1240240"
  },
  {
    "text": "it's just a single array of numbers that form up a signature and if",
    "start": "1240240",
    "end": "1247280"
  },
  {
    "text": "you look at the graph you can see that unlike the md5 which is this is the same two pages that i showed",
    "start": "1247280",
    "end": "1253679"
  },
  {
    "text": "you for the md5 google and hugo and a small input variation is going to be a small output variation you probably",
    "start": "1253679",
    "end": "1261200"
  },
  {
    "text": "can't see it on that gra that page there because i can't see it on this laptop here uh but the only thing that changed was",
    "start": "1261200",
    "end": "1268799"
  },
  {
    "text": "number two where it changed by one line so something that was small and insignificant to the actual",
    "start": "1268799",
    "end": "1275440"
  },
  {
    "text": "page doesn't show up very well it gets hidden amongst the rest of the details which is what we're looking for because",
    "start": "1275440",
    "end": "1281520"
  },
  {
    "text": "we're trying to focus less on small changes and focus on the important",
    "start": "1281520",
    "end": "1286880"
  },
  {
    "text": "changes on the page so",
    "start": "1286880",
    "end": "1293840"
  },
  {
    "text": "since we found a method that we're going to use move on with this ascii sum signatures we need a way to",
    "start": "1293840",
    "end": "1300720"
  },
  {
    "text": "compare the signatures of the true pages to compare the signatures of the false pages and once we have that get the",
    "start": "1300720",
    "end": "1307520"
  },
  {
    "text": "signatures of the unknown pages and be able to cast it as a true or false",
    "start": "1307520",
    "end": "1312799"
  },
  {
    "text": "so to do this we're going to need base cases it's uh fairly straightforward we just have to get a set of truths and a",
    "start": "1312799",
    "end": "1319919"
  },
  {
    "text": "set of falses and so that we can make later comparisons but we already know what a",
    "start": "1319919",
    "end": "1325520"
  },
  {
    "text": "true page should look like and a false page should look like at this point because when we've identified the injection we've identified what look a",
    "start": "1325520",
    "end": "1332240"
  },
  {
    "text": "true looks like in a false looks like and so if we have a tool that's taking place",
    "start": "1332240",
    "end": "1337600"
  },
  {
    "text": "after the injection has been detected we can just use simple base cases one is",
    "start": "1337600",
    "end": "1343440"
  },
  {
    "text": "always equal to one one is never equal to zero so you have the urls down there where you",
    "start": "1343440",
    "end": "1349600"
  },
  {
    "text": "do something similar to that where the you just simply append are always true find out what that page looks like",
    "start": "1349600",
    "end": "1355600"
  },
  {
    "text": "append and always false you know what that page looks like and you've got a set of base cases to work with you could",
    "start": "1355600",
    "end": "1360720"
  },
  {
    "text": "use different base cases these ones are just fairly simple to work with so",
    "start": "1360720",
    "end": "1367280"
  },
  {
    "text": "if you remember back near the beginning showed you bob's bike shop showed you the true page in the false",
    "start": "1367280",
    "end": "1374080"
  },
  {
    "text": "page this is the signature set for the true page and the false page the true ones in",
    "start": "1374080",
    "end": "1379760"
  },
  {
    "text": "blue and you can see how it spikes up there and that would be where it was giving you the ugly green table with the",
    "start": "1379760",
    "end": "1386240"
  },
  {
    "text": "schwinn bike information the price and then it comes down and finishes off the page but for the page that had no rows",
    "start": "1386240",
    "end": "1393679"
  },
  {
    "text": "found it simply goes up a bit less and then finishes off the page you can see how",
    "start": "1393679",
    "end": "1399039"
  },
  {
    "text": "the page the how the page endings are the same just sort of offset but the page",
    "start": "1399039",
    "end": "1404320"
  },
  {
    "text": "signatures are different enough that we wouldn't confuse them",
    "start": "1404320",
    "end": "1409039"
  },
  {
    "text": "now just in case you're wondering bob's bike shop is admittedly",
    "start": "1414880",
    "end": "1420159"
  },
  {
    "text": "complex and this is a more realistic signature set this was taken off of a",
    "start": "1420159",
    "end": "1426400"
  },
  {
    "text": "exploitable commercial web app out there i don't remember which site it is so don't bother asking at the end",
    "start": "1426400",
    "end": "1432799"
  },
  {
    "text": "but this is just a small subset of the actual signature that would be available for our",
    "start": "1432799",
    "end": "1440880"
  },
  {
    "text": "real live commercial web application and as you can see there are still differences there's a lot of noise going on but this",
    "start": "1440880",
    "end": "1448159"
  },
  {
    "text": "is the one part where they would change enough that you could be able to differentiate a false page",
    "start": "1448159",
    "end": "1453919"
  },
  {
    "text": "from a true page",
    "start": "1453919",
    "end": "1457399"
  },
  {
    "text": "so now that we've figured out what a true page looks like we figured out what a false page looks like",
    "start": "1461679",
    "end": "1468320"
  },
  {
    "text": "because we want to find the trues and the falses to get the integers we need to figure out how we're going to compare the true pages and compare the",
    "start": "1468320",
    "end": "1475520"
  },
  {
    "text": "false pages because minor changes in the textbook content",
    "start": "1475520",
    "end": "1480880"
  },
  {
    "text": "minor changes in the actual html that comes down the wire they're going to be small changes in the",
    "start": "1480880",
    "end": "1486720"
  },
  {
    "text": "output but the problem is they are still changes in the output we can't do a straight comparison with them",
    "start": "1486720",
    "end": "1492559"
  },
  {
    "text": "so why not let use a tolerance we saw both of those examples there was a point",
    "start": "1492559",
    "end": "1498799"
  },
  {
    "text": "where they were substantially different from each other so if we allow for very very small changes like the",
    "start": "1498799",
    "end": "1505200"
  },
  {
    "text": "if it changed by one ascii value that's going to be such a small change allow for a small percentage change and then",
    "start": "1505200",
    "end": "1511360"
  },
  {
    "text": "we can easily work that in and still hopefully with the two different signatures be different enough that we",
    "start": "1511360",
    "end": "1516400"
  },
  {
    "text": "can move on with the comparisons so you just take the absolute value of the known versus the unknown over the",
    "start": "1516400",
    "end": "1522799"
  },
  {
    "text": "known and you that gives you the percentage that you're going to deal with and you use that for comparisons if",
    "start": "1522799",
    "end": "1528799"
  },
  {
    "text": "that works out then you register that as equals otherwise say it's not equals and you've hit a",
    "start": "1528799",
    "end": "1535120"
  },
  {
    "text": "page miss",
    "start": "1535120",
    "end": "1537600"
  },
  {
    "text": "so the bob's bike shop example i showed you earlier uh hopefully you can see the",
    "start": "1540840",
    "end": "1546240"
  },
  {
    "text": "tolerance bars there you can see as it starts off they're almost identical so",
    "start": "1546240",
    "end": "1552159"
  },
  {
    "text": "there's where it should be the same it's falling into the small tolerance band that's",
    "start": "1552159",
    "end": "1557279"
  },
  {
    "text": "what you work with and once they start to substantially diverge they diverge enough that their the",
    "start": "1557279",
    "end": "1563840"
  },
  {
    "text": "tolerance band doesn't really allow for the two different signatures to get",
    "start": "1563840",
    "end": "1570480"
  },
  {
    "text": "confused with each other now what i'm showing here on this graph is a tolerance band of about 10",
    "start": "1570480",
    "end": "1576559"
  },
  {
    "text": "i believe in a realistic example like that really noisy example i showed you",
    "start": "1576559",
    "end": "1582640"
  },
  {
    "text": "of a real signature set you're not going to want to use much more than a .01 tolerance band otherwise we've had some",
    "start": "1582640",
    "end": "1589919"
  },
  {
    "text": "bad experience with uh false positives and false negatives so you're going to want a very small tolerance if you're",
    "start": "1589919",
    "end": "1595760"
  },
  {
    "text": "going to be using a tolerance altogether",
    "start": "1595760",
    "end": "1599799"
  },
  {
    "text": "but nothing's perfect so there are problems with the tolerance band comparison if that's all you're",
    "start": "1602720",
    "end": "1608159"
  },
  {
    "text": "going to be doing it'll work most of the time but there's a lot of unnecessary comparisons",
    "start": "1608159",
    "end": "1614880"
  },
  {
    "text": "going on if you look at this page it's not until section 10 or line 10 on our signature set that",
    "start": "1614880",
    "end": "1622320"
  },
  {
    "text": "they start to diverge and for every single web app every single page hit we get back that's 10",
    "start": "1622320",
    "end": "1627760"
  },
  {
    "text": "comparisons we don't need to be doing and we're going to be doing a lot of them so it seems like a bit of a waste of time",
    "start": "1627760",
    "end": "1634880"
  },
  {
    "text": "but it also doesn't take advantage of known garbage data stuff that like as",
    "start": "1634880",
    "end": "1640559"
  },
  {
    "text": "people looking at the web page we'd be able to just discard say it doesn't matter to us we don't care",
    "start": "1640559",
    "end": "1645760"
  },
  {
    "text": "this has nothing to do with our injection yet the computer is just going to keep comparing it so",
    "start": "1645760",
    "end": "1651760"
  },
  {
    "text": "why not find a way to get around that",
    "start": "1651760",
    "end": "1655840"
  },
  {
    "text": "so this is where we implement a subtractive filter what we can do is we can identify sums",
    "start": "1657440",
    "end": "1664159"
  },
  {
    "text": "the actual values in the signature and look at conflicting base cases look at a",
    "start": "1664159",
    "end": "1671360"
  },
  {
    "text": "true signature look at a false signature and if the values are the same in the true signature as they are in the false",
    "start": "1671360",
    "end": "1677039"
  },
  {
    "text": "signature why bother to why bother to even look at them later they're if they're the true in the",
    "start": "1677039",
    "end": "1682880"
  },
  {
    "text": "beginning if they're equal then they have nothing to do with our injection so cancel them out",
    "start": "1682880",
    "end": "1688559"
  },
  {
    "text": "from bob's bike shop we've already canceled out half of the comparisons we were doing because they had nothing to do with our",
    "start": "1688559",
    "end": "1694799"
  },
  {
    "text": "actual injection and what this also helps us with is something that's going to change",
    "start": "1694799",
    "end": "1700399"
  },
  {
    "text": "dynamically unrelated to our actual injection but it changes slowly enough that when we gathered the base cases",
    "start": "1700399",
    "end": "1707200"
  },
  {
    "text": "they were the same well they're not going to be compared in the future because they were already identified as not being relevant to the",
    "start": "1707200",
    "end": "1713840"
  },
  {
    "text": "compare relevant to the injection that we were trying to exploit",
    "start": "1713840",
    "end": "1718720"
  },
  {
    "text": "but why stop there we added a second filter to it",
    "start": "1720720",
    "end": "1726559"
  },
  {
    "text": "because the subtractor work the subtractive filter is good for pulling out",
    "start": "1726559",
    "end": "1732159"
  },
  {
    "text": "information that we don't care about but there's still going to be junk data that slips through where they're not equal to",
    "start": "1732159",
    "end": "1737200"
  },
  {
    "text": "each other because if it's changing quickly then we'll won't be able to we won't get that",
    "start": "1737200",
    "end": "1742640"
  },
  {
    "text": "equivalent between the two if between the one equals one the one equals zero they've",
    "start": "1742640",
    "end": "1747840"
  },
  {
    "text": "already changed then it's going to be not be caught by the",
    "start": "1747840",
    "end": "1753360"
  },
  {
    "text": "subtractive filter even though it has nothing to do with the comparisons we're dealing with so this is where we implement an adaptive",
    "start": "1753360",
    "end": "1760159"
  },
  {
    "text": "filter that can remove the junk data that throws off our results the only thing here is that it's going to require",
    "start": "1760159",
    "end": "1766640"
  },
  {
    "text": "more than one of each kind of base case before when we started you'd have a single one equals one for the true a one",
    "start": "1766640",
    "end": "1772320"
  },
  {
    "text": "equals zero for the false now you're going to want to gather a bit more of that but it's not that big",
    "start": "1772320",
    "end": "1778720"
  },
  {
    "text": "of a deal because when we're actually exploiting a blind sql injection we're going to be firing off hundreds and",
    "start": "1778720",
    "end": "1784240"
  },
  {
    "text": "thousands of requests so an extra five it's not that big a deal so here's two samples that should be",
    "start": "1784240",
    "end": "1791200"
  },
  {
    "text": "identical we're asking the database is one equal to one yes true so it's going to return a true",
    "start": "1791200",
    "end": "1797919"
  },
  {
    "text": "page then we ask the database as two equal to two once again it's true so if it's saying",
    "start": "1797919",
    "end": "1804159"
  },
  {
    "text": "true to both of them they should end up being the same page in theory",
    "start": "1804159",
    "end": "1809200"
  },
  {
    "text": "but we find that there's two more elements in the signature that have changed for since this is bob's bike shop we",
    "start": "1809200",
    "end": "1815120"
  },
  {
    "text": "know that it's probably most likely the time at the top that's going to change every section second and probably the",
    "start": "1815120",
    "end": "1822559"
  },
  {
    "text": "line with the address being returned to us because we've asked one equal one and that's in",
    "start": "1822559",
    "end": "1827760"
  },
  {
    "text": "the address we've asked two equals two and so it's a different address even though it's the same end result so we",
    "start": "1827760",
    "end": "1834480"
  },
  {
    "text": "can filter that out and all of a sudden this junk data that would throw off our results is no longer",
    "start": "1834480",
    "end": "1841440"
  },
  {
    "text": "an issue",
    "start": "1841440",
    "end": "1843919"
  },
  {
    "text": "so the benefits of using an adaptive filter like this is the tolerance",
    "start": "1848080",
    "end": "1854880"
  },
  {
    "text": "we're not really sure if we even need it at this point uh you can hold keep using it if you",
    "start": "1854880",
    "end": "1860000"
  },
  {
    "text": "feel that it's going to be helpful because there's stuff that the filters are going to miss but you can always just re-implement the filters if both of",
    "start": "1860000",
    "end": "1867200"
  },
  {
    "text": "them fail and that gives you a bit more that cuts down on your false positives",
    "start": "1867200",
    "end": "1872720"
  },
  {
    "text": "cuts down on your false negatives because if it's gone through the subtractive",
    "start": "1872720",
    "end": "1877760"
  },
  {
    "text": "filter it's gone through the adaptive filter and it doesn't match either then maybe you need to reevaluate what your",
    "start": "1877760",
    "end": "1884320"
  },
  {
    "text": "subtractive and adaptive filters actually are regather your base cases because maybe a substantial part of the change took place let's say if you were",
    "start": "1884320",
    "end": "1891760"
  },
  {
    "text": "sql injecting slash dot every 15 minutes you're going to get a post then a duplicate in half an hour and it's going",
    "start": "1891760",
    "end": "1897840"
  },
  {
    "text": "to change the actual contents of the page so but it's not going to be fast you'd want to reevaluate everything so",
    "start": "1897840",
    "end": "1903200"
  },
  {
    "text": "you'd build that into the tool but this will allow us to remove anything that's we can immediately tell",
    "start": "1903200",
    "end": "1910320"
  },
  {
    "text": "is unrelated to the actual injection we're performing",
    "start": "1910320",
    "end": "1914399"
  },
  {
    "text": "so i mentioned we wrote a tool uh hex 90 we wrote a tool we called school",
    "start": "1917760",
    "end": "1925120"
  },
  {
    "text": "and it was sort of where all the research uh that i'm sort of talking about took place",
    "start": "1925120",
    "end": "1931360"
  },
  {
    "text": "so everything i've mentioned is was basically the growing pains of writing the tool",
    "start": "1931360",
    "end": "1936720"
  },
  {
    "text": "i wrote it in c-sharp and i wrote it in linux which is kind of weird for some",
    "start": "1936720",
    "end": "1942000"
  },
  {
    "text": "people but there's a linux version and there's a windows version of it",
    "start": "1942000",
    "end": "1947039"
  },
  {
    "text": "if you are interested in running the linux version i'd recommend running mono 1.0 or later it was a bit buggy until",
    "start": "1947039",
    "end": "1953279"
  },
  {
    "text": "the 1.0 came out but both of them seem to work fairly well and it's free for non-commercial use now",
    "start": "1953279",
    "end": "1960000"
  },
  {
    "text": "before i get the booze and the beatings it's free for blackhead attendees as well so everybody in this room everybody",
    "start": "1960000",
    "end": "1966720"
  },
  {
    "text": "at the conference gets a free copy of squeal to run and do whatever they want with",
    "start": "1966720",
    "end": "1973200"
  },
  {
    "text": "and so one of the benefits of it is that it's going to export all the data all of the",
    "start": "1973200",
    "end": "1979840"
  },
  {
    "text": "formats related to squeal are xml very easy to read very simplistic because i don't want things",
    "start": "1979840",
    "end": "1986399"
  },
  {
    "text": "too complex that i get confused and you can easily format it using xsl or whatever you want for presentation to",
    "start": "1986399",
    "end": "1993519"
  },
  {
    "text": "clients or bosses here's an example of the data",
    "start": "1993519",
    "end": "2001279"
  },
  {
    "text": "this squeal uses it's and this is for uh the actual blind injection that i was",
    "start": "2001279",
    "end": "2008159"
  },
  {
    "text": "describing earlier what it will do is it will sit you'll have to initialize your base cases every time you use it but",
    "start": "2008159",
    "end": "2014480"
  },
  {
    "text": "it'll save the results from the base cases and the signatures so you only have to initialize once and it should",
    "start": "2014480",
    "end": "2020480"
  },
  {
    "text": "save all the information that's relevant to the actual injection so we'll jump over to it",
    "start": "2020480",
    "end": "2027760"
  },
  {
    "text": "and give you guys a brief run through of how it works what it looks like if you feel",
    "start": "2027760",
    "end": "2032880"
  },
  {
    "text": "like playing with it later i've already loaded it up because it's it's faster than doing it by hand but it",
    "start": "2032880",
    "end": "2039679"
  },
  {
    "text": "still takes time to run this is a web application running on the local",
    "start": "2039679",
    "end": "2045600"
  },
  {
    "text": "host and so you just specify the address right about here",
    "start": "2045600",
    "end": "2051200"
  },
  {
    "text": "i specify that you want to get request you have the option of commenting out the end of the query in case there's",
    "start": "2051200",
    "end": "2056398"
  },
  {
    "text": "extra junk there that's going to mess you up you can use a http proxy if you feel like doing this anonymously but",
    "start": "2056399",
    "end": "2063520"
  },
  {
    "text": "everybody's here is legitimate so we'd never want to use anonymously",
    "start": "2063520",
    "end": "2068398"
  },
  {
    "text": "then you all you simply do is add each of the form parameters in the box down here identify whether or not it's",
    "start": "2068720",
    "end": "2075280"
  },
  {
    "text": "injectable usually you'd have the one injectable parameter if you have multiple injectable",
    "start": "2075280",
    "end": "2081118"
  },
  {
    "text": "parameters it'll just take advantage of the first one that you enter in and you also have the option of adding",
    "start": "2081119",
    "end": "2087440"
  },
  {
    "text": "http headers if you need that to help you authenticate to the web application",
    "start": "2087440",
    "end": "2092800"
  },
  {
    "text": "once you've entered all the information here simply hit the initialize injection button right here and this gathers your",
    "start": "2092800",
    "end": "2098480"
  },
  {
    "text": "base cases for you once you've done that",
    "start": "2098480",
    "end": "2103920"
  },
  {
    "text": "you can do fun things like retrieve the username it's fairly quick the web app",
    "start": "2103920",
    "end": "2109760"
  },
  {
    "text": "we're running is running his essay which is fun and i've already gone through and gathered",
    "start": "2109760",
    "end": "2115760"
  },
  {
    "text": "the table names we've got a users sales rep product customers",
    "start": "2115760",
    "end": "2121200"
  },
  {
    "text": "tables in the database that we can play with",
    "start": "2121200",
    "end": "2125040"
  },
  {
    "text": "what you would normally do is this would the tables would start off being empty you'd load the table",
    "start": "2126640",
    "end": "2131680"
  },
  {
    "text": "information it would gather all the tables the ids which is how sql server",
    "start": "2131680",
    "end": "2137040"
  },
  {
    "text": "recognizes the tables in the database the number of records available to the tables and then once you've got the",
    "start": "2137040",
    "end": "2142640"
  },
  {
    "text": "table information you can gather all the fields the column names and so this will give you the column",
    "start": "2142640",
    "end": "2148880"
  },
  {
    "text": "name as well as the data type that it stores the information as which can be broken down as an integer",
    "start": "2148880",
    "end": "2154480"
  },
  {
    "text": "as well so once you've got all this information you get to the fun part",
    "start": "2154480",
    "end": "2161200"
  },
  {
    "text": "right here this is the downloading records downloading the real core of the information in the database",
    "start": "2161200",
    "end": "2167760"
  },
  {
    "text": "um now would that be the the database the web application to the database",
    "start": "2180400",
    "end": "2187000"
  },
  {
    "text": "what this one actually does is it just grabs the system underscore user",
    "start": "2198480",
    "end": "2203520"
  },
  {
    "text": "in the so it's just sort of a pre a canned uh set of queries that would do that i",
    "start": "2203520",
    "end": "2209119"
  },
  {
    "text": "don't know if that would return the ntlm password you know",
    "start": "2209119",
    "end": "2215320"
  },
  {
    "text": "yeah it does like it it all the only point of entry is the web application for this tool",
    "start": "2220960",
    "end": "2229000"
  },
  {
    "text": "pardon okay i'll get to you right after we finish",
    "start": "2229440",
    "end": "2235280"
  },
  {
    "text": "this basically though once we do this we can start downloading",
    "start": "2235280",
    "end": "2240480"
  },
  {
    "text": "the records create the data file that we're going to use",
    "start": "2240480",
    "end": "2245839"
  },
  {
    "text": "save it and we're going to want the credit card number i'm going to want the name",
    "start": "2248640",
    "end": "2255119"
  },
  {
    "text": "going gonna go have fun drink it tonight and start it running now it's gonna take",
    "start": "2255119",
    "end": "2261119"
  },
  {
    "text": "a while so i'll get back to the slides and then we'll come back to it in a couple slides and hopefully it'll be",
    "start": "2261119",
    "end": "2266240"
  },
  {
    "text": "done so",
    "start": "2266240",
    "end": "2271440"
  },
  {
    "text": "gathering the table information i've talked about you saw the table of information was already loaded into squeal but this is basically the",
    "start": "2271440",
    "end": "2278079"
  },
  {
    "text": "methodology as to how the tool goes about doing this it's just a couple canned stored",
    "start": "2278079",
    "end": "2283839"
  },
  {
    "text": "procedures or not stored procedures canned sql syntax that the tool will append to",
    "start": "2283839",
    "end": "2290240"
  },
  {
    "text": "all of the queries um so it starts off goes by getting the id number for every",
    "start": "2290240",
    "end": "2296800"
  },
  {
    "text": "table from the sysobjects table so all you do is start off by finding out how many tables",
    "start": "2296800",
    "end": "2302800"
  },
  {
    "text": "are in the database once you found out how many tables are in the database you find out the ids starting with the",
    "start": "2302800",
    "end": "2310079"
  },
  {
    "text": "smallest id available move up to the largest one available and just cycles through that anything in the bold there",
    "start": "2310079",
    "end": "2316720"
  },
  {
    "text": "is the value that's going to be changing as we're doing these integer searches as i mentioned earlier because",
    "start": "2316720",
    "end": "2322640"
  },
  {
    "text": "we can pretty much since we're breaking these down into integers just increase the search value exponentially then cut it down and it",
    "start": "2322640",
    "end": "2328960"
  },
  {
    "text": "pops right out for the second one you'd increase the search value up and down from the and you'd cycle through each",
    "start": "2328960",
    "end": "2334880"
  },
  {
    "text": "table id in the list now once we've got the id numbers of",
    "start": "2334880",
    "end": "2340240"
  },
  {
    "text": "every table we can go on to get the table's human recognizable name let's start off by finding the length of",
    "start": "2340240",
    "end": "2346240"
  },
  {
    "text": "the name it's the same way we do the length of the username where you just grab the length cycle up",
    "start": "2346240",
    "end": "2353599"
  },
  {
    "text": "cycle down zero in on a number and once we've got the length of the",
    "start": "2353599",
    "end": "2358880"
  },
  {
    "text": "name we know how many iterations we're going to have to do go through and find the ascii value for each character",
    "start": "2358880",
    "end": "2366320"
  },
  {
    "text": "in the name goes up goes down finishes pulls the information",
    "start": "2366320",
    "end": "2372400"
  },
  {
    "text": "for the fields it's fairly similar similar to the tables",
    "start": "2372880",
    "end": "2378240"
  },
  {
    "text": "start off by getting the count of each of the fields",
    "start": "2378800",
    "end": "2383920"
  },
  {
    "text": "or columns in the database then once you've got for each table you",
    "start": "2383920",
    "end": "2389599"
  },
  {
    "text": "because you have the ids to work off of this way you don't have to mess around with textual names which might mean",
    "start": "2389599",
    "end": "2395040"
  },
  {
    "text": "you'd have to either use the char function or apostrophes which you want to avoid so you go by the numerical type",
    "start": "2395040",
    "end": "2402079"
  },
  {
    "text": "table id once you've got the table id you go in the column ids one note if you are writing a tool like",
    "start": "2402079",
    "end": "2409119"
  },
  {
    "text": "this don't use a 32-bit integer for the table ids because they're pretty big",
    "start": "2409119",
    "end": "2415680"
  },
  {
    "text": "had to deal with that one once and so once you've got that the column id is the for sql server which is pretty",
    "start": "2415680",
    "end": "2422400"
  },
  {
    "text": "squeal only works with sql server at the moment just in case anybody's going to be asking this later most of the research was done off of sql",
    "start": "2422400",
    "end": "2428800"
  },
  {
    "text": "server although it could be adapted to work with oracle or other databases where you have access to assist objects",
    "start": "2428800",
    "end": "2434560"
  },
  {
    "text": "tables or similar tables so you've got the column id cycle",
    "start": "2434560",
    "end": "2440480"
  },
  {
    "text": "up cycle down it's going to start it's going to be a lot smaller because it's just the sequence number of the column in the",
    "start": "2440480",
    "end": "2446480"
  },
  {
    "text": "table so once you've found the id go through same as the table get the length of the",
    "start": "2446480",
    "end": "2452480"
  },
  {
    "text": "name once you've got the length in the name find each character's ascii value move on from there",
    "start": "2452480",
    "end": "2459839"
  },
  {
    "text": "the only real difference when we're pulling out the column information is the fact that a column information is",
    "start": "2460800",
    "end": "2467440"
  },
  {
    "text": "going to have include the data type which is what we're going to need later if we're starting to pull out real",
    "start": "2467440",
    "end": "2473119"
  },
  {
    "text": "information from the database because we want to know how we're going to go about pulling it out so what you would simply do is in sql server you figure out the",
    "start": "2473119",
    "end": "2480400"
  },
  {
    "text": "data type and you can convert the data type to an integer because that's how sql server represents it internally",
    "start": "2480400",
    "end": "2488079"
  },
  {
    "text": "this is a chart this is in the slides that should be on the cd it should be in your printed manu printed black hat",
    "start": "2488160",
    "end": "2493359"
  },
  {
    "text": "proceedings as well so just the chart of the numerical values for",
    "start": "2493359",
    "end": "2499359"
  },
  {
    "text": "the sql server or msdes data types",
    "start": "2499359",
    "end": "2504880"
  },
  {
    "text": "save you guys a bit of time if you want to look it up later",
    "start": "2505200",
    "end": "2509838"
  },
  {
    "text": "so let's see if this is done looks like it's done so we can go",
    "start": "2513200",
    "end": "2519760"
  },
  {
    "text": "here load up the xml file in internet explorer and",
    "start": "2519760",
    "end": "2528720"
  },
  {
    "text": "hopefully you guys can see that can everybody see that should it get bigger bigger",
    "start": "2528720",
    "end": "2535440"
  },
  {
    "text": "heard somebody laugh so i think somebody could read it okay can you read that",
    "start": "2535440",
    "end": "2540480"
  },
  {
    "text": "hopefully what that is is this is the xml output of the columns that have and the data",
    "start": "2540480",
    "end": "2546800"
  },
  {
    "text": "that's been pulled from the database as you can see i was unfortunately one of the victims that bought a bike from bob",
    "start": "2546800",
    "end": "2552640"
  },
  {
    "text": "but i'm not alone uh mr johnny long jeff moss dave litchfield and robert",
    "start": "2552640",
    "end": "2558079"
  },
  {
    "text": "morris all the credit card information so it's not really their credit card",
    "start": "2558079",
    "end": "2564240"
  },
  {
    "text": "information but it basically it'll pull the information out you and it'll save",
    "start": "2564240",
    "end": "2571280"
  },
  {
    "text": "the primary key value in case that's not one of the fields that you wanted there",
    "start": "2571280",
    "end": "2576319"
  },
  {
    "text": "and store that if you want to work with it later in case you're curious of how it worked because it's going to need the primary",
    "start": "2576319",
    "end": "2581839"
  },
  {
    "text": "key as it pulls the information out and then it'll just store it in this xml file once again it's fairly easy to format",
    "start": "2581839",
    "end": "2588640"
  },
  {
    "text": "easy for presentation if you're doing a pen test and you want to run it on a client you just",
    "start": "2588640",
    "end": "2594319"
  },
  {
    "text": "format it out print out a big binder of their database and they'll love you forever",
    "start": "2594319",
    "end": "2600079"
  },
  {
    "text": "dba will so",
    "start": "2601680",
    "end": "2606720"
  },
  {
    "text": "to do all of the queries that it would take to have pulled out that information pull out the",
    "start": "2606720",
    "end": "2612720"
  },
  {
    "text": "table schema information that was already there as well as the username which was really only two characters so it's not that much but all of that was",
    "start": "2612720",
    "end": "2620160"
  },
  {
    "text": "going to take over 2700 http requests so if you use the 10",
    "start": "2620160",
    "end": "2626640"
  },
  {
    "text": "second rule that we talked about earlier which is fairly realistic if you're doing this by hand it's going to have",
    "start": "2626640",
    "end": "2631680"
  },
  {
    "text": "taken over seven and a half hours to do this by hand so this is where i repeat the question",
    "start": "2631680",
    "end": "2637680"
  },
  {
    "text": "who out there in the audience has done this by hand before",
    "start": "2637680",
    "end": "2642240"
  },
  {
    "text": "all right bit less but yeah it's brutal if you're doing this by hand it's painful it's tedious",
    "start": "2643520",
    "end": "2649599"
  },
  {
    "text": "so using a tool like this makes a little bit more sense whether it's this tool or another tool or one you write yourself",
    "start": "2649599",
    "end": "2655599"
  },
  {
    "text": "you're not going to want to do this by hand so and it can be automated so why not",
    "start": "2655599",
    "end": "2660720"
  },
  {
    "text": "and what i pulled out that was four entries in a database that's not that",
    "start": "2660720",
    "end": "2666079"
  },
  {
    "text": "much especially it's a small demo database with a very very small schema so if you want the entire contents if",
    "start": "2666079",
    "end": "2673599"
  },
  {
    "text": "you're being greedy you want everything available for a real production web server real production web application",
    "start": "2673599",
    "end": "2679920"
  },
  {
    "text": "including stuff that probably shouldn't be available to the web application but for some reason is",
    "start": "2679920",
    "end": "2684960"
  },
  {
    "text": "then it's going to take it's going to be a lot larger in the amount of queries it's going to ask for it's going to take",
    "start": "2684960",
    "end": "2690240"
  },
  {
    "text": "a lot longer to run than seven and a half hours and that's non-stop you had to be there typing it in all day",
    "start": "2690240",
    "end": "2696800"
  },
  {
    "text": "hoping to die getting more coffee but you didn't have time because you're still there typing",
    "start": "2696800",
    "end": "2702839"
  },
  {
    "text": "brutal so wrote the tool works for the most part",
    "start": "2702839",
    "end": "2709599"
  },
  {
    "text": "is still not perfect nothing really is here but there's are some shortcomings either by",
    "start": "2709599",
    "end": "2716160"
  },
  {
    "text": "choice by design or by my inaptitude and so the first one this may or may not",
    "start": "2716160",
    "end": "2722480"
  },
  {
    "text": "be a shortcoming depending on your view on it user agents hard coded i don't allow",
    "start": "2722480",
    "end": "2727680"
  },
  {
    "text": "anybody to change that through any of the interfaces in it you could probably reverse engineer it and rewrite it it's in.net",
    "start": "2727680",
    "end": "2734400"
  },
  {
    "text": "so it's not that bad but for the most part if anybody wants to",
    "start": "2734400",
    "end": "2739760"
  },
  {
    "text": "download the tool and just run it and start being a badass out there then you could block the user agent from ever",
    "start": "2739760",
    "end": "2746079"
  },
  {
    "text": "hitting the web app hopefully and that'll take out probably 80 of the people who don't know what they're doing",
    "start": "2746079",
    "end": "2751839"
  },
  {
    "text": "and second problem with a tool like this is it's noisy",
    "start": "2751839",
    "end": "2758800"
  },
  {
    "text": "i told mentioned earlier that's 7 500 requests going against the web server that are most likely logged so the log",
    "start": "2758800",
    "end": "2766400"
  },
  {
    "text": "files grow really really quickly and if you're hitting a very large database there's a real possibility that you",
    "start": "2766400",
    "end": "2772319"
  },
  {
    "text": "might fill up the hard drive with the weblog requests before you actually pull",
    "start": "2772319",
    "end": "2777440"
  },
  {
    "text": "all the information down because for every bit that we get",
    "start": "2777440",
    "end": "2782880"
  },
  {
    "text": "you're adding an extra 25 bytes to their server maybe more and just fills up fills up and it's fairly obvious if",
    "start": "2782880",
    "end": "2789760"
  },
  {
    "text": "anybody looks at the logs it's just like and one equals one and one equals zero and two equals one two equals zero and",
    "start": "2789760",
    "end": "2795599"
  },
  {
    "text": "then it just goes on to these extreme sql statements in the get string if it's a post it's just gonna be the same page",
    "start": "2795599",
    "end": "2800960"
  },
  {
    "text": "and the guy will just think he's really popular but",
    "start": "2800960",
    "end": "2805280"
  },
  {
    "text": "another valid thing that could throw the way squeal does it with the ascii sums that method that method's not",
    "start": "2808560",
    "end": "2815599"
  },
  {
    "text": "perfect either the sums could be easily poisoned uh with random seeds that throw in",
    "start": "2815599",
    "end": "2822000"
  },
  {
    "text": "extra carriage returns because it's carriage return delimited if you saw sawmills shock or samuels",
    "start": "2822000",
    "end": "2827520"
  },
  {
    "text": "talk yesterday he one of the features was inserting random",
    "start": "2827520",
    "end": "2833520"
  },
  {
    "text": "data into there and if that happens and throws off the carriage return count",
    "start": "2833520",
    "end": "2839280"
  },
  {
    "text": "then it may confuse the adaptive filter so that's one possibility for throwing",
    "start": "2839280",
    "end": "2846400"
  },
  {
    "text": "off a tool like this although might not throw off other tools to deal with it differently and the other thing",
    "start": "2846400",
    "end": "2853359"
  },
  {
    "text": "with this is it doesn't really lower the bar i've talked about automating blind sql injection but i've talked about",
    "start": "2853359",
    "end": "2858880"
  },
  {
    "text": "automating the exploitation of it so you still have to be able to find the blind sql injection hole it's not that hard",
    "start": "2858880",
    "end": "2864880"
  },
  {
    "text": "but some people still aren't that skilled so they won't get much out of this app",
    "start": "2864880",
    "end": "2871200"
  },
  {
    "text": "and the final thing that might mess it up is",
    "start": "2871200",
    "end": "2876480"
  },
  {
    "text": "if the html has no carriage returns",
    "start": "2876480",
    "end": "2880720"
  },
  {
    "text": "this comes back to the problem i mentioned earlier with bad",
    "start": "2882640",
    "end": "2887920"
  },
  {
    "text": "coders out there people who aren't anal retentive with their designs",
    "start": "2887920",
    "end": "2893040"
  },
  {
    "text": "and the html gets outputted and it's just one very very very long string so if you were opening it up in notepad or",
    "start": "2893040",
    "end": "2900400"
  },
  {
    "text": "vi or whatever it just goes on forever and you shake your fist at the guy and hope he dies but",
    "start": "2900400",
    "end": "2906800"
  },
  {
    "text": "it's out there and so if there's no carriage returns which is how this delimits it then",
    "start": "2906800",
    "end": "2912000"
  },
  {
    "text": "it's just going to be one value in the signature and chances are it's going to get thrown off",
    "start": "2912000",
    "end": "2917520"
  },
  {
    "text": "by the adaptive filter because it'll say oh these pages are changing every time so get rid of that one element and now",
    "start": "2917520",
    "end": "2924240"
  },
  {
    "text": "you've got a zero element signature for the true and a zero element signature for the false and that doesn't work out",
    "start": "2924240",
    "end": "2929280"
  },
  {
    "text": "very well there's we thought about working with a forced",
    "start": "2929280",
    "end": "2935280"
  },
  {
    "text": "carriage return but the problem with that",
    "start": "2935280",
    "end": "2941119"
  },
  {
    "text": "is it still throws off the data you have to assume okay i'm going to",
    "start": "2941119",
    "end": "2946800"
  },
  {
    "text": "throw insert carriage returns if the line exceeds 160 characters or",
    "start": "2946800",
    "end": "2954079"
  },
  {
    "text": "excuse me it exceeds 300 characters but you know somebody out there is going to make a 400 character line that's",
    "start": "2954079",
    "end": "2960079"
  },
  {
    "text": "supposed to be there and it'll just mess up your tool as it tries to go through and it'll start shifting uh if you",
    "start": "2960079",
    "end": "2967280"
  },
  {
    "text": "remember the graphic the tail end of it was always the same and it should keep the same shape but",
    "start": "2967280",
    "end": "2973599"
  },
  {
    "text": "all of a sudden now it's been thrown off and depending on where the dynamic content is if that's the line that",
    "start": "2973599",
    "end": "2978720"
  },
  {
    "text": "you're forcing the carriage returns in it'll mess up whatever tool that assumes this if you really want to deal with the",
    "start": "2978720",
    "end": "2986240"
  },
  {
    "text": "no carriage returns you probably want to going to want to go back to the tree parser that i mentioned earlier it's",
    "start": "2986240",
    "end": "2992640"
  },
  {
    "text": "going to be a lot more work to probably implement that way but then you're dealing with these guys so",
    "start": "2992640",
    "end": "3000559"
  },
  {
    "text": "there could be a second stage attack if the uh ascii signatures isn't working for you",
    "start": "3000559",
    "end": "3007519"
  },
  {
    "text": "so in conclusion the it's this isn't limited to blind sql",
    "start": "3007680",
    "end": "3014480"
  },
  {
    "text": "injection but and it's not limited to this form of blind sql injection other now when i say",
    "start": "3014480",
    "end": "3020720"
  },
  {
    "text": "other forms there's everybody has their own view on what this term actually means because i've talked to a couple",
    "start": "3020720",
    "end": "3026319"
  },
  {
    "text": "people and they're like oh you do this and this and it's like oh no because that's not what i'm meant but so there's",
    "start": "3026319",
    "end": "3032240"
  },
  {
    "text": "different ways to do it there's uh there was a white paper written about reverse engineering the actual query that was",
    "start": "3032240",
    "end": "3038400"
  },
  {
    "text": "going to the database um if you decide you want to know what is included in the query that's going to the database then",
    "start": "3038400",
    "end": "3045920"
  },
  {
    "text": "you would use that to do almost error-based but not quite error-based because it would give you",
    "start": "3045920",
    "end": "3051920"
  },
  {
    "text": "the nice clean air it's like an error has occurred and blah blah blah system administrator notified whatever",
    "start": "3051920",
    "end": "3057440"
  },
  {
    "text": "and so you get that or you get the right result that you that's like the picture of the bike",
    "start": "3057440",
    "end": "3062960"
  },
  {
    "text": "and so that's still a yes or no question you just basically mentally wrap a different question is a",
    "start": "3062960",
    "end": "3068880"
  },
  {
    "text": "wrapper question around it saying is this syntax valid and then you insert something and if you get the bike yeah",
    "start": "3068880",
    "end": "3075200"
  },
  {
    "text": "if you don't get if you get the pretty error message then it's a no and you can simply move on from there",
    "start": "3075200",
    "end": "3082079"
  },
  {
    "text": "in mind if you ever want to do something with web application profiling md5 is",
    "start": "3082079",
    "end": "3087520"
  },
  {
    "text": "not going to be the right way to do this it's going to trip up as you hit dynamic content and there is a push for",
    "start": "3087520",
    "end": "3095040"
  },
  {
    "text": "web applications to become more dynamic that's how the web application developers maintain their job and",
    "start": "3095040",
    "end": "3101359"
  },
  {
    "text": "justify their existence i'm one of them so it's okay",
    "start": "3101359",
    "end": "3107359"
  },
  {
    "text": "and the same techniques could probably be used uh for anything else that could be",
    "start": "3107359",
    "end": "3114640"
  },
  {
    "text": "done with blind as long as there's two web pages um i haven't done a lot of work with it",
    "start": "3114640",
    "end": "3120240"
  },
  {
    "text": "so if anybody else wants to work with it feel free the xpath or ldap injections could probably be automated that way",
    "start": "3120240",
    "end": "3127839"
  },
  {
    "text": "and the big thing has nothing to do with my talk but it has to do with sql injection this drives me nuts is that",
    "start": "3127839",
    "end": "3134400"
  },
  {
    "text": "not enough people are still doing this using parameterized code in an appropriate fashion to call stored",
    "start": "3134400",
    "end": "3140400"
  },
  {
    "text": "procedures if you don't want to use start procedures so be it make sure you're using the parameterized code",
    "start": "3140400",
    "end": "3146559"
  },
  {
    "text": "appropriately if you're not using a language that supports this switch languages or find a better way to do",
    "start": "3146559",
    "end": "3152559"
  },
  {
    "text": "this there's a lot of lazy programmers out there and whether or not you're a developer you might know a developer and",
    "start": "3152559",
    "end": "3157920"
  },
  {
    "text": "if they don't do this slap them hit them throw stuff until they start doing this because it's really bad and there's been",
    "start": "3157920",
    "end": "3165040"
  },
  {
    "text": "mechanisms for doing this properly for a while now and it's there's really no excuse for people to not be doing this",
    "start": "3165040",
    "end": "3172000"
  },
  {
    "text": "so i've included three main white papers that i used during the research so if anybody wasn't",
    "start": "3172000",
    "end": "3178079"
  },
  {
    "text": "too up to date on sql injection or blind sql injection i'd really recommend reading",
    "start": "3178079",
    "end": "3183680"
  },
  {
    "text": "these um first two are from ngs on mainly focused on error-based sql",
    "start": "3183680",
    "end": "3190000"
  },
  {
    "text": "injection fairly verbose very well written and the",
    "start": "3190000",
    "end": "3195200"
  },
  {
    "text": "third one is from spy dynamics uh on blind sql injection and this is an",
    "start": "3195200",
    "end": "3200400"
  },
  {
    "text": "extremely good paper uh if you're still not sure what the hell i was talking about for the past hour",
    "start": "3200400",
    "end": "3208079"
  },
  {
    "text": "this out and basically it's those techniques automated and or and then",
    "start": "3208079",
    "end": "3213520"
  },
  {
    "text": "you'll be like oh yeah now i see what he's talking about so uh this tool isn't available yet it",
    "start": "3213520",
    "end": "3220559"
  },
  {
    "text": "should be up on the web on monday but you guys should all have it on the conference cd both the windows and the",
    "start": "3220559",
    "end": "3226319"
  },
  {
    "text": "linux versions should be included on the cd and opening up for questions now",
    "start": "3226319",
    "end": "3231680"
  },
  {
    "text": "yes",
    "start": "3231680",
    "end": "3234680"
  },
  {
    "text": "overall yes they'll be shorter but there's always a chance that where they wouldn't be if it's a like",
    "start": "3249760",
    "end": "3256480"
  },
  {
    "text": "uh the question was uh sorry the question was uh for there's an easier way to do it",
    "start": "3256480",
    "end": "3264079"
  },
  {
    "text": "yeah but uh that that would mean in general an error page is going to be",
    "start": "3264079",
    "end": "3270240"
  },
  {
    "text": "shorter than a true page but the thing is that that's not always",
    "start": "3270240",
    "end": "3277359"
  },
  {
    "text": "the case so if you're dealing with something like for the most part you'd probably get 70",
    "start": "3277359",
    "end": "3283200"
  },
  {
    "text": "80 on something like that but then there's still going to be situations and when you're not dealing with an error",
    "start": "3283200",
    "end": "3288800"
  },
  {
    "text": "page when it's uh the page thinks it's returning what",
    "start": "3288800",
    "end": "3293839"
  },
  {
    "text": "it should be returning but now it's just returning an empty value so it's going to be it's going to be a little bit",
    "start": "3293839",
    "end": "3299359"
  },
  {
    "text": "shorter but it might not be substantially shorter or if it's",
    "start": "3299359",
    "end": "3304640"
  },
  {
    "text": "realized that all of a sudden it's like oh no records were returned it writes you a paragraph uh or like copy of war on war and peace",
    "start": "3304640",
    "end": "3312160"
  },
  {
    "text": "deciding to tell you everything you could do to talk to the system administrator to find out why your account's been suspended or whatever so",
    "start": "3312160",
    "end": "3321839"
  },
  {
    "text": "yes um for the most part i don't believe it",
    "start": "3331319",
    "end": "3336400"
  },
  {
    "text": "does any encoding uh directly on it the only type of filtering or like intelligence",
    "start": "3336400",
    "end": "3342079"
  },
  {
    "text": "and far's encoding goes is uh for the the question was",
    "start": "3342079",
    "end": "3347119"
  },
  {
    "text": "sorry keep doing this the question was is there any type of encoding that goes in the tool",
    "start": "3347119",
    "end": "3352799"
  },
  {
    "text": "to allow for filtering of or to prevent filtering of data by the web application",
    "start": "3352799",
    "end": "3358319"
  },
  {
    "text": "and the answer is basically is no other than the fact that it avoids avoids using",
    "start": "3358319",
    "end": "3364000"
  },
  {
    "text": "apostrophes wherever possible by using the char keyword but it wouldn't be that hard to create signatures based off of",
    "start": "3364000",
    "end": "3371359"
  },
  {
    "text": "it to for an ids or something like that to just oh look squeal's being run shut it",
    "start": "3371359",
    "end": "3376480"
  },
  {
    "text": "down don't trust this guy",
    "start": "3376480",
    "end": "3379599"
  },
  {
    "text": "yeah oh it it supports proxies no problem so if you want to do that to do the encoding then by all means that",
    "start": "3382000",
    "end": "3387359"
  },
  {
    "text": "would be a good way to do it yep probably more successful than if i'd coded it anyways",
    "start": "3387359",
    "end": "3392640"
  },
  {
    "text": "so yes",
    "start": "3392640",
    "end": "3396240"
  },
  {
    "text": "uh pardon hey yes",
    "start": "3401359",
    "end": "3407680"
  },
  {
    "text": "um right now it's just sql uh server but the plan is to start working on oracle",
    "start": "3413839",
    "end": "3419760"
  },
  {
    "text": "next now that we've got the sql version running and we're going to try and set it up so that it'll actually work on a",
    "start": "3419760",
    "end": "3426400"
  },
  {
    "text": "plugin based interface so if we mess it up somebody else wants to write it then that'll be an option too but uh oracle's",
    "start": "3426400",
    "end": "3433119"
  },
  {
    "text": "next in line for uh building up the quarries and stuff like that i'm not sure what's gonna happen after",
    "start": "3433119",
    "end": "3438880"
  },
  {
    "text": "that one but we've already started talking about developing for an oracle tool as well",
    "start": "3438880",
    "end": "3444960"
  },
  {
    "text": "any yes",
    "start": "3444960",
    "end": "3447838"
  },
  {
    "text": "um in theory not it wouldn't be that hard the tool doesn't support anything like that but it could easily be you could",
    "start": "3467119",
    "end": "3474319"
  },
  {
    "text": "instead instead of delimiting by because basically it's a split statement in there so it's just split by",
    "start": "3474319",
    "end": "3480960"
  },
  {
    "text": "uh carriage returns instead of commas or whatever so you could say delimit it by",
    "start": "3480960",
    "end": "3486240"
  },
  {
    "text": "slash brs uh and add that in so it doesn't support it but i could work on it",
    "start": "3486240",
    "end": "3491920"
  },
  {
    "text": "and get it yeah no it's a good idea it's a very good idea is there any other",
    "start": "3491920",
    "end": "3499280"
  },
  {
    "text": "questions all right well thank you everybody",
    "start": "3500839",
    "end": "3506599"
  },
  {
    "text": "you",
    "start": "3572960",
    "end": "3575040"
  }
]