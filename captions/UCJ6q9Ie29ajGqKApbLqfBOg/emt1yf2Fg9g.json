[
  {
    "start": "0",
    "end": "115000"
  },
  {
    "text": "all right thank you so yeah for the next 47 minutes I'll be talking about",
    "start": "30",
    "end": "5060"
  },
  {
    "text": "just-in-time compilers for JavaScript mainly how they work and what kind of",
    "start": "5060",
    "end": "11190"
  },
  {
    "text": "box you can find there we'll start with let me turn this on yeah we'll start with a short overview",
    "start": "11190",
    "end": "19220"
  },
  {
    "text": "how the JavaScript engine look like yes these are kind of the main components",
    "start": "19220",
    "end": "24359"
  },
  {
    "text": "you'll need to make a JavaScript engine first we have the parser that basically",
    "start": "24359",
    "end": "30359"
  },
  {
    "text": "takes your JavaScript code as textual representation and converted to byte",
    "start": "30359",
    "end": "36120"
  },
  {
    "text": "code usually that custom byte code for the engine so that kind of a bytecode compiler if you watch next",
    "start": "36120",
    "end": "42870"
  },
  {
    "text": "we have an interpreter and or a JIT compiler which basically consumes this",
    "start": "42870",
    "end": "48480"
  },
  {
    "text": "bytecode and some are executed right so the interpreter interpreter can just",
    "start": "48480",
    "end": "53750"
  },
  {
    "text": "execute the code directly the JIT compiler first converted to machine code then runs your machine code so while",
    "start": "53750",
    "end": "61440"
  },
  {
    "text": "this code runs it interacts with what I call the runtime which essentially defined various data structures like",
    "start": "61440",
    "end": "68159"
  },
  {
    "text": "values objects and so on and it provides a bunch of building functions objects",
    "start": "68159",
    "end": "74250"
  },
  {
    "text": "etc and finally we have the garbage collector so JavaScript is garbage",
    "start": "74250",
    "end": "79290"
  },
  {
    "text": "collected language meaning the programmer doesn't need to take care of free memory so the garbage collector",
    "start": "79290",
    "end": "84930"
  },
  {
    "text": "does that so with that here's what we'll talk about today we'll start with some introduction or some background on the",
    "start": "84930",
    "end": "92400"
  },
  {
    "text": "runtime how it works mainly we'll talk about JavaScript values and objects then",
    "start": "92400",
    "end": "97950"
  },
  {
    "text": "we'll talk about gee compiler internodes how they work how they convert JavaScript to machine code then we'll",
    "start": "97950",
    "end": "103829"
  },
  {
    "text": "talk about a text surface what kind of parts you can find there and how to exploit them a bit and finally we'll",
    "start": "103829",
    "end": "110220"
  },
  {
    "text": "talk about one specific bug in WebKit which I use for counter on this year all",
    "start": "110220",
    "end": "116130"
  },
  {
    "start": "115000",
    "end": "266000"
  },
  {
    "text": "right start with the runtime and actually start with JavaScript values so",
    "start": "116130",
    "end": "122000"
  },
  {
    "text": "javascript is what is called the dynamically typed language that means that for example variables or properties",
    "start": "122000",
    "end": "129179"
  },
  {
    "text": "they can essentially change type so if you look at these concepts here you'll see this variable a its first a number 10",
    "start": "129179",
    "end": "135989"
  },
  {
    "text": "it's a string at an object that's all fine for the engine that means that it",
    "start": "135989",
    "end": "141450"
  },
  {
    "text": "has to store type information together with this value information and then the",
    "start": "141450",
    "end": "147420"
  },
  {
    "text": "challenge here is to do this efficiently and usually the solution ends up being some clever hex that managed to store",
    "start": "147420",
    "end": "155400"
  },
  {
    "text": "both type and value information in eight bytes there's two of those favored hex",
    "start": "155400",
    "end": "160799"
  },
  {
    "text": "basically one is called non boxing and there's this pointer tagging for this talk we'll talk about pointer tagging",
    "start": "160799",
    "end": "167160"
  },
  {
    "text": "just because it's a bit simpler actually we will use the schema from v8 chromium",
    "start": "167160",
    "end": "173790"
  },
  {
    "text": "engine so in v8 JavaScript is basically and an 8 byte number or 8 byte value",
    "start": "173790",
    "end": "180959"
  },
  {
    "text": "assuming 64-bit architecture now if the least significant bit if that",
    "start": "180959",
    "end": "187019"
  },
  {
    "text": "is cleared if that is 0 then this thing is a number or a small integer they call it so that's what you see on the left",
    "start": "187019",
    "end": "193920"
  },
  {
    "text": "here you see that these significant bit is 0 and then the halo 2 32 bit payload",
    "start": "193920",
    "end": "200760"
  },
  {
    "text": "is stored in the upper 32 bits so this value if you see that in an engine in v8",
    "start": "200760",
    "end": "205819"
  },
  {
    "text": "represents the number hex 42 on the other hand if the least significant bit",
    "start": "205819",
    "end": "212220"
  },
  {
    "text": "of that is set then you have a pointer and that's pointing to some object and then at that location there will be more",
    "start": "212220",
    "end": "218790"
  },
  {
    "text": "type information so you can see here on the right side that where you have some one bit set so it's pointing to some",
    "start": "218790",
    "end": "224760"
  },
  {
    "text": "kind of object all right so speaking of objects that's the next data structure",
    "start": "224760",
    "end": "230310"
  },
  {
    "text": "we'll look at so the question here is how to represent objects efficiently for us an object is basically just kind of a",
    "start": "230310",
    "end": "237329"
  },
  {
    "text": "collection of key value pairs key is being strings and various being JavaScript values so if you wanted to",
    "start": "237329",
    "end": "245519"
  },
  {
    "text": "store that maybe the first thing it could come up with this just make a hash map that map's strings to values yeah",
    "start": "245519",
    "end": "253139"
  },
  {
    "text": "that's quite simple but it's not what happens so in reality and of the major",
    "start": "253139",
    "end": "258180"
  },
  {
    "text": "engines right now what they do is essentially they separate property name information from value information and",
    "start": "258180",
    "end": "266099"
  },
  {
    "text": "then they have this object that I'll just call shape for this talk this shape object essentially",
    "start": "266099",
    "end": "272310"
  },
  {
    "text": "swords the property names so let's look at that again this is the object we want",
    "start": "272310",
    "end": "277320"
  },
  {
    "text": "to represent so X&Y properties and instead of you know having this object",
    "start": "277320",
    "end": "282960"
  },
  {
    "text": "store with hash map mapping strings to values instead we have the object which",
    "start": "282960",
    "end": "289200"
  },
  {
    "text": "points to its shape so that's a separate object now this shape essentially Maps",
    "start": "289200",
    "end": "294320"
  },
  {
    "text": "property names to integers and these integers they are being used as indices",
    "start": "294320",
    "end": "300120"
  },
  {
    "text": "and to basically a dynamically dynamically size array of pages associated with every object okay so",
    "start": "300120",
    "end": "307590"
  },
  {
    "text": "let's say you wanted to look up the property X on this object what you would do is first go to the shape then you",
    "start": "307590",
    "end": "314490"
  },
  {
    "text": "could see that property X distorted slot 0 then you go back to the object go to the slots array and then",
    "start": "314490",
    "end": "320520"
  },
  {
    "text": "you find the value 41 so that's how it works so you're probably wondering why why are",
    "start": "320520",
    "end": "327060"
  },
  {
    "text": "they doing that what the benefit here let me show you an example so again we have the same object X&Y",
    "start": "327060",
    "end": "332760"
  },
  {
    "text": "properties now if we create another object that similar in the sense that it",
    "start": "332760",
    "end": "338370"
  },
  {
    "text": "also has X&Y properties now suddenly those two object they are able to share",
    "start": "338370",
    "end": "343919"
  },
  {
    "text": "the same shape so there's no redundancy essentially right so that's the main",
    "start": "343919",
    "end": "349500"
  },
  {
    "text": "benefit here that these shapes they can be shared so this they can use to conserve memory basically yeah and they",
    "start": "349500",
    "end": "357060"
  },
  {
    "text": "are shared between similar objects essentially so the next question is well what happens if you change one of those",
    "start": "357060",
    "end": "363570"
  },
  {
    "text": "objects so for example here if you add a third property to the first object now",
    "start": "363570",
    "end": "370520"
  },
  {
    "text": "those two objects they can't really share the same set shares this shape anymore because the second object",
    "start": "370520",
    "end": "377130"
  },
  {
    "text": "doesn't have this property so in this case well we have to separate those shapes again now there's two one has three property",
    "start": "377130",
    "end": "383880"
  },
  {
    "text": "if the other has two the one important property here is that shapes are",
    "start": "383880",
    "end": "389970"
  },
  {
    "text": "essentially immutable that's following from the from the fact that they are shared yeah so then next thing if we",
    "start": "389970",
    "end": "399060"
  },
  {
    "text": "were to add this third property also to the second then again they can share the shape there's some clever mechanisms that make",
    "start": "399060",
    "end": "406610"
  },
  {
    "text": "this work efficiently but this is essentially how it works what what happens so yeah if you look at any",
    "start": "406610",
    "end": "414950"
  },
  {
    "text": "optimator for engines right now and see if how they implement objects what you",
    "start": "414950",
    "end": "420050"
  },
  {
    "text": "would find is essentially that all of them have reference to this shape object and that's called differently in all",
    "start": "420050",
    "end": "425990"
  },
  {
    "text": "engines so in Firefox it's actually - it's called shape and the group object in v8",
    "start": "425990",
    "end": "431540"
  },
  {
    "text": "it's called map in WebKit it's called structure and an edge it's called type but they all do the same thing they are",
    "start": "431540",
    "end": "437750"
  },
  {
    "text": "shared and immutable that's the two important properties and they fully describe the object they tell you which",
    "start": "437750",
    "end": "444230"
  },
  {
    "text": "properties it has where they are stored what prototype it has etc then you have",
    "start": "444230",
    "end": "450350"
  },
  {
    "text": "these property slots and usually you have a few property slots stored in line so a fixed number of in line property",
    "start": "450350",
    "end": "456290"
  },
  {
    "text": "slots and then you have an out of line yeah appointed to an out of line",
    "start": "456290",
    "end": "461750"
  },
  {
    "text": "property slots area that's dynamically sized where our properties are stored",
    "start": "461750",
    "end": "467120"
  },
  {
    "text": "that don't fit in the inline slots so then the other thing you have is usually",
    "start": "467120",
    "end": "472640"
  },
  {
    "text": "a buffer for element storage that's just due to the fact that in JavaScript you",
    "start": "472640",
    "end": "478160"
  },
  {
    "text": "can kind of use every object as an area so they also have this having a storage essentially and then you might have",
    "start": "478160",
    "end": "485060"
  },
  {
    "text": "additional type specific fields so for example if you have a regular expression object or a typed array object you would",
    "start": "485060",
    "end": "492050"
  },
  {
    "text": "have more data fields in these objects but these are the main ones the first vote for all right so the next thing",
    "start": "492050",
    "end": "501080"
  },
  {
    "start": "498000",
    "end": "624000"
  },
  {
    "text": "we'll talk about is my TD JIT compilers how they work for JavaScript so we do kind of a 10 to 15 minutes tutorial on",
    "start": "501080",
    "end": "507200"
  },
  {
    "text": "how to compile JavaScript but first let's start with some motivation why do",
    "start": "507200",
    "end": "512479"
  },
  {
    "text": "we want charge it compilers we all already have those interpreters which",
    "start": "512479",
    "end": "517520"
  },
  {
    "text": "can just run our code so what's the benefit of just-in-time compilers well it's probably quite obvious its code",
    "start": "517520",
    "end": "524570"
  },
  {
    "text": "speed if you have this optimizing JIT compiler it's probably running much faster than interpreting your code",
    "start": "524570",
    "end": "531940"
  },
  {
    "text": "however there's some drawbacks also so one is that the the startup time of an",
    "start": "531940",
    "end": "539610"
  },
  {
    "text": "interpreter is probably much lower so it can just start executing the code immediately after the bytecode compiler",
    "start": "539610",
    "end": "545670"
  },
  {
    "text": "finishes vs JIT compiler it has to do this expensive optimization etc so it",
    "start": "545670",
    "end": "551730"
  },
  {
    "text": "takes a lot longer to to start executing code kind of the same with memory the",
    "start": "551730",
    "end": "557610"
  },
  {
    "text": "the interpreters probably using left memory then the JIT compiler as such",
    "start": "557610",
    "end": "564900"
  },
  {
    "text": "what what all the major engines engines do right now is a half essentially a",
    "start": "564900",
    "end": "570120"
  },
  {
    "text": "multi tier architecture where they start running code in the interpreter then",
    "start": "570120",
    "end": "576000"
  },
  {
    "text": "they monitor how many times the function has been called and at some point they determine okay this function has been",
    "start": "576000",
    "end": "581310"
  },
  {
    "text": "called a lot of times it's probably worth optimizing that then they put that through their JIT compiler produces",
    "start": "581310",
    "end": "587700"
  },
  {
    "text": "optimized code and once that's done they switch to the machine code so this is how it works all right so let's talk",
    "start": "587700",
    "end": "594840"
  },
  {
    "text": "about how to compile JavaScript here's the small function javascript functions just adding two arguments together yeah",
    "start": "594840",
    "end": "602460"
  },
  {
    "text": "how would you compare this to machine code this seems hard right it mainly",
    "start": "602460",
    "end": "608310"
  },
  {
    "text": "seems hard because we have no idea about types of the parameters so a and B they",
    "start": "608310",
    "end": "613740"
  },
  {
    "text": "could be numbers but they could also be strings they could be objects whatever we don't really know and this makes",
    "start": "613740",
    "end": "619950"
  },
  {
    "text": "makes it hard to produce machine code here so the the plus operating in JavaScript it's quite complex if you",
    "start": "619950",
    "end": "626370"
  },
  {
    "start": "624000",
    "end": "735000"
  },
  {
    "text": "look at the specification this is the pseudocode for adding something in",
    "start": "626370",
    "end": "631680"
  },
  {
    "text": "javascript right and all these blue functions are essentially subroutine so it's really complicated and you wouldn't",
    "start": "631680",
    "end": "637590"
  },
  {
    "text": "want to omit this as machine code all the time so that's okay another example",
    "start": "637590",
    "end": "642720"
  },
  {
    "text": "here's another function that just fetches a property from from an object",
    "start": "642720",
    "end": "648830"
  },
  {
    "text": "again this seems hard to make machine code for this same reason we don't know",
    "start": "648830",
    "end": "654630"
  },
  {
    "text": "the type of oh and in particularly we don't know its shape so we have no idea where this property's been stored could",
    "start": "654630",
    "end": "661080"
  },
  {
    "text": "be anywhere so what it means is essentially that the main major challenge here of JIT",
    "start": "661080",
    "end": "667800"
  },
  {
    "text": "compiling these languages the using type information right so that will be this song so let's just assume",
    "start": "667800",
    "end": "674249"
  },
  {
    "text": "that for some reason we we had type information so maybe we had kind of a JavaScript dialect that the strictly",
    "start": "674249",
    "end": "681569"
  },
  {
    "text": "typed and it tells us that a NPR Smiths are these small integers in the 8th can",
    "start": "681569",
    "end": "686850"
  },
  {
    "text": "we produce machine code now turns out we can it's that's quite easy actually we know the in-memory representation of",
    "start": "686850",
    "end": "693720"
  },
  {
    "text": "Smith's it's just tag pointers again we can just add them together in this representation right so there's machine",
    "start": "693720",
    "end": "700589"
  },
  {
    "text": "instruction you can use to add registers so that's quite easy there's one catch",
    "start": "700589",
    "end": "706100"
  },
  {
    "text": "because in JavaScript there's no integer overflow essentially so the engine here",
    "start": "706100",
    "end": "711899"
  },
  {
    "text": "has to do what is called a bailout if this addition overflows what it has to",
    "start": "711899",
    "end": "717540"
  },
  {
    "text": "do is essentially go back to the interpreter so that the bailout it bails out to the interpreter and that",
    "start": "717540",
    "end": "723869"
  },
  {
    "text": "interpreter what it would do in this case is convert the arguments to double it and then do double addition right but",
    "start": "723869",
    "end": "731279"
  },
  {
    "text": "this bailout mechanism is quite important we will see it a few more times right so obviously what we don't",
    "start": "731279",
    "end": "738389"
  },
  {
    "start": "735000",
    "end": "778000"
  },
  {
    "text": "have strictly typed language so we don't have type information what we have is or",
    "start": "738389",
    "end": "743669"
  },
  {
    "text": "what we can have is type information from previous executions so remember I said that right now when you run",
    "start": "743669",
    "end": "750869"
  },
  {
    "text": "JavaScript in an engine it first runs it in the interpreter and only after some time it goes to the JIT compiler so by",
    "start": "750869",
    "end": "757199"
  },
  {
    "text": "the time we want to compile we do have type information from previous run so we can just keep track of all the types we",
    "start": "757199",
    "end": "763589"
  },
  {
    "text": "see for every variable so how does this help us well what we can do is speculate",
    "start": "763589",
    "end": "769429"
  },
  {
    "text": "then in the future we will see the same types and this is really the main main",
    "start": "769429",
    "end": "774600"
  },
  {
    "text": "trick here and this is where the name speculative JIT comes from so its look at an example again here's our add",
    "start": "774600",
    "end": "780509"
  },
  {
    "start": "778000",
    "end": "799000"
  },
  {
    "text": "function and let's say we we keep track of it while it runs in the interpreter and this is what we see it's always",
    "start": "780509",
    "end": "786959"
  },
  {
    "text": "being called with smiths as arguments okay so at this point when we compile we",
    "start": "786959",
    "end": "792929"
  },
  {
    "text": "speculate Ted also in the future we will see sneeze as arguments for this",
    "start": "792929",
    "end": "798569"
  },
  {
    "text": "function so how does this help us right so now we have we we have type speculations for all",
    "start": "798569",
    "end": "804779"
  },
  {
    "start": "799000",
    "end": "853000"
  },
  {
    "text": "variables what can we do now the trick is to use so-called speculation guards",
    "start": "804779",
    "end": "810750"
  },
  {
    "text": "and these are just kind of small pieces of machine code they ensure that our",
    "start": "810750",
    "end": "817410"
  },
  {
    "text": "speculation still holds at runtime so there they are they come in different flavors here's two of them on the right",
    "start": "817410",
    "end": "824250"
  },
  {
    "text": "side you see a semi guard so that just makes sure that some variables is me as",
    "start": "824250",
    "end": "829800"
  },
  {
    "text": "we expected so it's checking this least significant bit here and if not it plays out again bailout mechanism on the left",
    "start": "829800",
    "end": "837120"
  },
  {
    "text": "side you see a shape guard which makes sure that some object has the expected shape what it does is just fetch the",
    "start": "837120",
    "end": "844949"
  },
  {
    "text": "shape pointer from the object compared to constant and this works because shapes are shared and immutable so",
    "start": "844949",
    "end": "850230"
  },
  {
    "text": "that's why they are yeah how this works so it's not good an example again here's",
    "start": "850230",
    "end": "857100"
  },
  {
    "start": "853000",
    "end": "897000"
  },
  {
    "text": "the other function the function that fetches a property let's say we speculated all will always be an object",
    "start": "857100",
    "end": "863250"
  },
  {
    "text": "of a specific shape and then this is what we could generate as machine code so first we have to make sure that",
    "start": "863250",
    "end": "869640"
  },
  {
    "text": "always notice me so we need to have the inverse me guard that makes sure it's an object again checking the least",
    "start": "869640",
    "end": "875610"
  },
  {
    "text": "significant bit then we have shape card that makes sure we have the expected shape and then at that point if both of",
    "start": "875610",
    "end": "882779"
  },
  {
    "text": "these cards run through we have type information we know the shape of this object and we can just directly load",
    "start": "882779",
    "end": "889140"
  },
  {
    "text": "this property from the object so in this case maybe property B is stored in an inline slot so we can just dereference",
    "start": "889140",
    "end": "895589"
  },
  {
    "text": "the pointer basically yeah what that means is that essentially this speculation guard they give us type",
    "start": "895589",
    "end": "901949"
  },
  {
    "start": "897000",
    "end": "985000"
  },
  {
    "text": "information back so that's the main trick for dealing with missing type information so let's look at kind of a",
    "start": "901949",
    "end": "908940"
  },
  {
    "text": "typical JIT compiler pipeline this is what you would see a few yeah where'd you go through the code basically so",
    "start": "908940",
    "end": "915269"
  },
  {
    "text": "always right now it always starts from byte code plus value profiles that's not",
    "start": "915269",
    "end": "920790"
  },
  {
    "text": "necessarily like that so we ate used to see the the abstract syntax tree in its",
    "start": "920790",
    "end": "926310"
  },
  {
    "text": "JIT compiler but right now our engines say they start from the byte code then",
    "start": "926310",
    "end": "931620"
  },
  {
    "text": "they convert this byte code to their own custom intermediate language which they do we can",
    "start": "931620",
    "end": "936750"
  },
  {
    "text": "while the bytecode isn't really there for optimizing so they converted to a different form that's better suited for",
    "start": "936750",
    "end": "942420"
  },
  {
    "text": "optimizing the code later on then they do this typing or specializing where",
    "start": "942420",
    "end": "947490"
  },
  {
    "text": "they apply those right where they look at those value profiles to the type speculations insert type cards and then",
    "start": "947490",
    "end": "954870"
  },
  {
    "text": "they end up with this graph or usually graph based intermediate language plus runtime guards and at this point we",
    "start": "954870",
    "end": "961140"
  },
  {
    "text": "basically have type information afterward it kind of looks like a classic compiler for like C++ or Java",
    "start": "961140",
    "end": "968160"
  },
  {
    "text": "maybe so they run a bunch of optimizers to produce better faster code they end",
    "start": "968160",
    "end": "974370"
  },
  {
    "text": "up with this optimized intermediate language then they have to lower that to machine code so that's called lowering",
    "start": "974370",
    "end": "979380"
  },
  {
    "text": "selecting machine instructions allocating registers and so on and then we end up with machine code so let's sum",
    "start": "979380",
    "end": "987990"
  },
  {
    "start": "985000",
    "end": "1060000"
  },
  {
    "text": "this up what we've seen is that major challenge of JIT compilers is missing type information solution is to first",
    "start": "987990",
    "end": "995070"
  },
  {
    "text": "observe runtime behavior keep track of types then speculate that we will see",
    "start": "995070",
    "end": "1000230"
  },
  {
    "text": "the same types in the future gaagh these speculations with these runtime cards and then basically optimize and emit",
    "start": "1000230",
    "end": "1007730"
  },
  {
    "text": "machine code if you want to take a look at this there's a really cool tool from eh developers it's called turbo lighter",
    "start": "1007730",
    "end": "1014510"
  },
  {
    "text": "what it does is basically render their intermediate graph based language in a",
    "start": "1014510",
    "end": "1020330"
  },
  {
    "text": "nice web base UI so that's what I did here I just kind of compiled this",
    "start": "1020330",
    "end": "1025670"
  },
  {
    "text": "function foo in v8 took a look at this graph and what you see here is essentially data flow graph so parameter",
    "start": "1025670",
    "end": "1032720"
  },
  {
    "text": "one that's oh it flows into a check heap object no that's making sure that it's me if it is then it plays out next it",
    "start": "1032720",
    "end": "1041270"
  },
  {
    "text": "flows into this check maps node so that's making sure it's having the expected shapes or remember shape is",
    "start": "1041270",
    "end": "1047510"
  },
  {
    "text": "called map in v8 and after these two checks it knows the exact type of the",
    "start": "1047510",
    "end": "1053090"
  },
  {
    "text": "parameter so it can just load this field from upset 24 in this case right so yeah",
    "start": "1053090",
    "end": "1062000"
  },
  {
    "start": "1060000",
    "end": "1155000"
  },
  {
    "text": "now we have kind of a basic idea of how these compilers work so let's talk about a tank surface",
    "start": "1062000",
    "end": "1068700"
  },
  {
    "text": "so here I made this is my list of kind of bug categories that I want to talk about in this talk the list is sorted",
    "start": "1068700",
    "end": "1076059"
  },
  {
    "text": "from basically classic bugs that don't really have anything to do with JIT compilers to very specific box that you",
    "start": "1076059",
    "end": "1082780"
  },
  {
    "text": "can only find there right so the first one is memory corruption in the compiler that's kind of obvious because these",
    "start": "1082780",
    "end": "1089740"
  },
  {
    "text": "compilers are written in C or C++ actually so they can have all these standard box right overflows you dr.",
    "start": "1089740",
    "end": "1095830"
  },
  {
    "text": "trees etc so it's really not specific to JIT compilers at all and we actually won't talk about them any further the",
    "start": "1095830",
    "end": "1103630"
  },
  {
    "text": "next two categories here are bugs in the lowering phase where it converts to machine code so we'll talk about that a",
    "start": "1103630",
    "end": "1109780"
  },
  {
    "text": "bit if there's time at the end I can show some example a box of mine for for these two categories if not then you can",
    "start": "1109780",
    "end": "1117100"
  },
  {
    "text": "find them on the slides afterwards so then the biggest part at the biggest",
    "start": "1117100",
    "end": "1122920"
  },
  {
    "text": "categories that I want to talk about it's incorrect optimizations so we'll spend a lot of time there and then at",
    "start": "1122920",
    "end": "1128679"
  },
  {
    "text": "the end I'll talk about everything that I didn't talk about because not enough time just very briefly yeah you can also",
    "start": "1128679",
    "end": "1136090"
  },
  {
    "text": "divide this like this so basically the memory corruption box they would create",
    "start": "1136090",
    "end": "1141400"
  },
  {
    "text": "a compile time right because the compiler itself has a memory corruption bug versus all the others they only",
    "start": "1141400",
    "end": "1148780"
  },
  {
    "text": "crash at run time while they they produce for the conditions at runtime right so they're a bit more interesting",
    "start": "1148780",
    "end": "1154630"
  },
  {
    "text": "I think so let's start with the first one that's the slow path handlers so if",
    "start": "1154630",
    "end": "1160900"
  },
  {
    "start": "1155000",
    "end": "1236000"
  },
  {
    "text": "you look at basically this lower ring code where they convert from their own intermediate language to machine code it",
    "start": "1160900",
    "end": "1168520"
  },
  {
    "text": "usually looks like like this where they just have one function for every operation or every instruction in the",
    "start": "1168520",
    "end": "1175000"
  },
  {
    "text": "intermediate language and this function is responsible for turning that operation into machine code so here's",
    "start": "1175000",
    "end": "1180820"
  },
  {
    "text": "one one example yeah what it might look like usually then",
    "start": "1180820",
    "end": "1187000"
  },
  {
    "text": "there's a few different cases so there's one case or a few cases where they know",
    "start": "1187000",
    "end": "1195190"
  },
  {
    "text": "the type information and the type information is so that they can specialize essentially so it's kind of the Fastpass so let's",
    "start": "1195190",
    "end": "1201809"
  },
  {
    "text": "he wanted to compile an addition operation and you knew that your your incoming arguments are always Smith so",
    "start": "1201809",
    "end": "1209729"
  },
  {
    "text": "in that case you can just submit machine code as we saw it but then there's the other case where maybe all you know that",
    "start": "1209729",
    "end": "1215850"
  },
  {
    "text": "the argument could be an object or could be a string or whatever and in that case you don't really want to omit this whole",
    "start": "1215850",
    "end": "1223350"
  },
  {
    "text": "pseudocode that we looked at right that was kind of a big list so what you would do is just kind of emit a call to a",
    "start": "1223350",
    "end": "1229499"
  },
  {
    "text": "runtime function to a C++ function that then implements this big plus operation",
    "start": "1229499",
    "end": "1234690"
  },
  {
    "text": "here right so the takeaway here is essentially that this function that's being called this low pass operation XYZ",
    "start": "1234690",
    "end": "1241559"
  },
  {
    "start": "1236000",
    "end": "1351000"
  },
  {
    "text": "in this code here that's just kind of a built-in function like all the other buildings in this engine that's a",
    "start": "1241559",
    "end": "1247710"
  },
  {
    "text": "function that's implementing in C++ it takes JavaScript they use does something return to JavaScript value so you can",
    "start": "1247710",
    "end": "1254820"
  },
  {
    "text": "just audit it like all those kind of classic JavaScript engine bugs right so",
    "start": "1254820",
    "end": "1261389"
  },
  {
    "text": "then let's look at the other paths here let's say we can specialize because we know that the arguments are maybe quite",
    "start": "1261389",
    "end": "1268679"
  },
  {
    "text": "favorable they are only always integers maybe so in this case this is this is",
    "start": "1268679",
    "end": "1274529"
  },
  {
    "text": "somewhat what you would see in these these engines in the code what they do",
    "start": "1274529",
    "end": "1279840"
  },
  {
    "text": "is usually kind of allocate a register maybe for the results then emits a machine code to perform the operation in",
    "start": "1279840",
    "end": "1286289"
  },
  {
    "text": "this case like an integer multiplication yeah jump if overflow in this case is also",
    "start": "1286289",
    "end": "1292379"
  },
  {
    "text": "required and then they set the result right so yeah it's really just a code",
    "start": "1292379",
    "end": "1297419"
  },
  {
    "text": "generator that emits machine code so yeah what could it what could go wrong",
    "start": "1297419",
    "end": "1303479"
  },
  {
    "text": "with this what what could happen essentially this isn't too different from the previous one right so the",
    "start": "1303479",
    "end": "1309299"
  },
  {
    "text": "previous example though it was C++ code that's doing something now this is C++",
    "start": "1309299",
    "end": "1314429"
  },
  {
    "text": "code that produces machine code that then does something right so you could essentially have all the same box in",
    "start": "1314429",
    "end": "1320789"
  },
  {
    "text": "this and in code like this one thing that happened a few times is missing",
    "start": "1320789",
    "end": "1326309"
  },
  {
    "text": "integer overflow checks right so this is always a problem you can do the same",
    "start": "1326309",
    "end": "1331619"
  },
  {
    "text": "bugs with this kind of code there's some other stuff so for example you see here it has to do register a location that might be tricky so they're",
    "start": "1331619",
    "end": "1339660"
  },
  {
    "text": "in some box with register allocation here that you wouldn't have in the C++ code but really it's it's yeah kind of",
    "start": "1339660",
    "end": "1346950"
  },
  {
    "text": "to the same kind of JavaScript engine box that you will find elsewhere so",
    "start": "1346950",
    "end": "1353010"
  },
  {
    "start": "1351000",
    "end": "1390000"
  },
  {
    "text": "let's now talk about optimization so this is the biggest chapter that I want to talk about incorrect optimizations so",
    "start": "1353010",
    "end": "1359280"
  },
  {
    "text": "what is an optimization first it's basically a transformation of code that is not required for correctness but",
    "start": "1359280",
    "end": "1366150"
  },
  {
    "text": "improved speed right so here's a simple example we have this function here circumference computes circumference of",
    "start": "1366150",
    "end": "1372960"
  },
  {
    "text": "a circle and in this case a compiler could notice that this expression 2 times pi is actually constant so it",
    "start": "1372960",
    "end": "1380520"
  },
  {
    "text": "could just pre compute that at compile time and yeah insert that constant here and save a multiplication at runtime so",
    "start": "1380520",
    "end": "1387240"
  },
  {
    "text": "that's called constant folding it's very basic optimization and there's a bunch of others should look at those compilers",
    "start": "1387240",
    "end": "1393390"
  },
  {
    "start": "1390000",
    "end": "1415000"
  },
  {
    "text": "a huge list of optimizations they do some of them are quite complex quite dangerous of that goes wrong that",
    "start": "1393390",
    "end": "1399660"
  },
  {
    "text": "usually results in pretty nice bugs and you will talk about two of those so the",
    "start": "1399660",
    "end": "1405660"
  },
  {
    "text": "first one is parts check elimination right it sounds pretty dangerous already so that's yeah it is turns out the other three diamonds the",
    "start": "1405660",
    "end": "1412860"
  },
  {
    "text": "elimination that we'll talk about later so let's talk about bounds checking first here's some code what what it does",
    "start": "1412860",
    "end": "1421080"
  },
  {
    "start": "1415000",
    "end": "1425000"
  },
  {
    "text": "is just a function that you give an index it fetches 13x from an area from a global array if you compile that in",
    "start": "1421080",
    "end": "1429180"
  },
  {
    "start": "1425000",
    "end": "1454000"
  },
  {
    "text": "bieed and you again look at this code graph here this is what you would see again the data flow graphs or has this",
    "start": "1429180",
    "end": "1434820"
  },
  {
    "text": "parameter one the index it flows into this check bounced node and this makes sure that I is between zero and 4095",
    "start": "1434820",
    "end": "1442470"
  },
  {
    "text": "if it's not again bailout dimittis then okay that's inbound so we can just index",
    "start": "1442470",
    "end": "1448320"
  },
  {
    "text": "into this array so that's our good and we need to check here because I could be yeah arbitrarily large so let's say I",
    "start": "1448320",
    "end": "1456330"
  },
  {
    "text": "added another statement here in this case what I'm doing is just ending the",
    "start": "1456330",
    "end": "1461670"
  },
  {
    "text": "index was hex ffff and in this case the boss check isn't really required right",
    "start": "1461670",
    "end": "1466980"
  },
  {
    "text": "because the output of this and operation must be between zero and hex FFF so this is the",
    "start": "1466980",
    "end": "1476500"
  },
  {
    "start": "1473000",
    "end": "1505000"
  },
  {
    "text": "goal of elimination essentially figure out what our checks are redundant or aren't required the idea is to perform",
    "start": "1476500",
    "end": "1484450"
  },
  {
    "text": "what is called range analysis so essentially track all the possible value ranges of integers in the in the",
    "start": "1484450",
    "end": "1490780"
  },
  {
    "text": "intermediate code and then if it can prove that an index will always be in bound so it knows the range of the index",
    "start": "1490780",
    "end": "1497290"
  },
  {
    "text": "it knows the range of the array length so if the biggest index is always left in the least area length and it can",
    "start": "1497290",
    "end": "1504850"
  },
  {
    "text": "eliminate the powers check so we can kind of see that here again the Scout",
    "start": "1504850",
    "end": "1510010"
  },
  {
    "start": "1505000",
    "end": "1519000"
  },
  {
    "text": "craft for the speed of code so what you see is that parameter one it floats into",
    "start": "1510010",
    "end": "1516040"
  },
  {
    "text": "this bitwise N and the compiler at this point it figured out that the output of",
    "start": "1516040",
    "end": "1521890"
  },
  {
    "start": "1519000",
    "end": "1540000"
  },
  {
    "text": "this speed wise and must always be between zero and 4095 so later when it",
    "start": "1521890",
    "end": "1527860"
  },
  {
    "text": "lowers this code to machine code it realizes that the check bounced no that's actually not required because the",
    "start": "1527860",
    "end": "1533590"
  },
  {
    "text": "input is already in that range so we'll just eliminate the bounce check at that",
    "start": "1533590",
    "end": "1538600"
  },
  {
    "text": "point basically all right so what could go wrong with this well quite a few",
    "start": "1538600",
    "end": "1544720"
  },
  {
    "start": "1540000",
    "end": "1608000"
  },
  {
    "text": "things basically every time you have kind of a discrepancy between the value",
    "start": "1544720",
    "end": "1550360"
  },
  {
    "text": "range is computed by the compiler and the actual value range that's a buck for this pulse check elimination",
    "start": "1550360",
    "end": "1556600"
  },
  {
    "text": "so why would that happen there's a few reasons one is due to integer related problems so integers are hard yeah we",
    "start": "1556600",
    "end": "1564760"
  },
  {
    "text": "kind of all know this or there's sinus issues there's overflow problems and this range analysis is here has track",
    "start": "1564760",
    "end": "1570910"
  },
  {
    "text": "integers has to really do a lot of on integers so it might run into any of",
    "start": "1570910",
    "end": "1576370"
  },
  {
    "text": "these standard integer related problems the other source of Parts is essentially",
    "start": "1576370",
    "end": "1581470"
  },
  {
    "text": "incorrect emulation of this compiler intermediate language so remember the previous slide where I had this bitwise",
    "start": "1581470",
    "end": "1587950"
  },
  {
    "text": "and the compiler essentially had to emulate this bitwise and to figure out that the result would always be between",
    "start": "1587950",
    "end": "1594340"
  },
  {
    "text": "0 and 4095 no bid wise and it's simple that's quite easy to emulate but there's a few others",
    "start": "1594340",
    "end": "1600950"
  },
  {
    "text": "it might be a bit more tricky and that's a really cool bug I like from a good friend of mine Stefan found NVH and",
    "start": "1600950",
    "end": "1608270"
  },
  {
    "start": "1608000",
    "end": "1659000"
  },
  {
    "text": "that's what we look at now so there's this function called string dot last index off you can call on a string what",
    "start": "1608270",
    "end": "1614809"
  },
  {
    "text": "it does is to give it a search failure and it tells you the last index where is this search value occurs in the string",
    "start": "1614809",
    "end": "1621590"
  },
  {
    "text": "so you might be searching for character or whatever now the v8 engine it put what it try to",
    "start": "1621590",
    "end": "1627559"
  },
  {
    "text": "do is essentially inline this this call to this function and it would try to",
    "start": "1627559",
    "end": "1633370"
  },
  {
    "text": "predict the the output value of that call so lastly next off what it can",
    "start": "1633370",
    "end": "1639440"
  },
  {
    "text": "return is essentially negative 1 in case this search value isn't found or it",
    "start": "1639440",
    "end": "1644450"
  },
  {
    "text": "gives you an index so what they saw they said well the the return value of this call it must be an integer between",
    "start": "1644450",
    "end": "1651049"
  },
  {
    "text": "negative 1 and the maximum length of the string minus 1 right because it's an",
    "start": "1651049",
    "end": "1656360"
  },
  {
    "text": "index so it's left and must be less than the links or so they thought because if",
    "start": "1656360",
    "end": "1661910"
  },
  {
    "text": "you look at the documentation there's this one sentence that said that an empty string search value will match at",
    "start": "1661910",
    "end": "1668780"
  },
  {
    "text": "any index between 0 and the length of the string so you can see that here in this code snippet there's the string of",
    "start": "1668780",
    "end": "1675799"
  },
  {
    "text": "thanks for if I search for the last index of the string empty string it actually gives me 4 right what it means",
    "start": "1675799",
    "end": "1683120"
  },
  {
    "text": "is that this range of this type or code here that determined try to determine",
    "start": "1683120",
    "end": "1688880"
  },
  {
    "text": "the output range is off by one so actually this call can also return string not max links so how can you",
    "start": "1688880",
    "end": "1696260"
  },
  {
    "start": "1695000",
    "end": "1753000"
  },
  {
    "text": "exploit this this is essentially the pseudocode that you would need so you",
    "start": "1696260",
    "end": "1701960"
  },
  {
    "text": "start with this string of maximum lengths in this function that's being compiled then you do last in makes off",
    "start": "1701960",
    "end": "1708500"
  },
  {
    "text": "with an empty string at that point the compiler syncs the output will be between negative 1 and the maximum",
    "start": "1708500",
    "end": "1714380"
  },
  {
    "text": "length minus 1 but it can actually be between negative 1 and maximum lengths so then you add one just to get rid of",
    "start": "1714380",
    "end": "1720260"
  },
  {
    "text": "the negative 1 so again the compiler sings is between 0 and max lines it can actually be between 0 and makes things",
    "start": "1720260",
    "end": "1726740"
  },
  {
    "text": "plus 1 then you use it for an index into an array of this max Ling's plus one science at",
    "start": "1726740",
    "end": "1733299"
  },
  {
    "text": "that point the compiler sings well okay the index is always in balance I",
    "start": "1733299",
    "end": "1738850"
  },
  {
    "text": "can just eliminate the bounce check reality we get out of bounds access and if you play around with it you can",
    "start": "1738850",
    "end": "1744669"
  },
  {
    "text": "basically get arbitrary out-of-bounds access so if you interested I encourage you to just read the report by Stefan it",
    "start": "1744669",
    "end": "1751150"
  },
  {
    "text": "contains a full RC exploit for this packet there's a few more example where this have happened so there's some",
    "start": "1751150",
    "end": "1757330"
  },
  {
    "start": "1753000",
    "end": "1771000"
  },
  {
    "text": "Firefox box from a few years ago there's true blog post by GDI about similar bugs",
    "start": "1757330",
    "end": "1763780"
  },
  {
    "text": "and then project also found some of those alright so let's talk about the",
    "start": "1763780",
    "end": "1769330"
  },
  {
    "text": "other optimization this is redundancy elimination first question is well what is redundancy in this case so let's say",
    "start": "1769330",
    "end": "1775990"
  },
  {
    "start": "1771000",
    "end": "1795000"
  },
  {
    "text": "we have this function that's fetching two properties adding them together if",
    "start": "1775990",
    "end": "1781480"
  },
  {
    "text": "she compiled it's just like in with the schema we've seen you might end up with code like this where it first does the",
    "start": "1781480",
    "end": "1787330"
  },
  {
    "text": "swee guard and the shaped are then fetch it's the first property and then it again does its me guard shape guard",
    "start": "1787330",
    "end": "1793690"
  },
  {
    "text": "fetches the second property well in this case obviously the second set of guards is redundant right there's no way the",
    "start": "1793690",
    "end": "1801159"
  },
  {
    "text": "shape can change or the think enter into an integer in between so in this case",
    "start": "1801159",
    "end": "1806650"
  },
  {
    "text": "what we want is this code right the second set of cards removed so how would",
    "start": "1806650",
    "end": "1812320"
  },
  {
    "start": "1811000",
    "end": "1832000"
  },
  {
    "text": "you do this essentially the idea is to determine duplicate cards on the same control flow pass and then just keep the",
    "start": "1812320",
    "end": "1819070"
  },
  {
    "text": "first one sounds quite simple it's actually tricky because you also need to",
    "start": "1819070",
    "end": "1824860"
  },
  {
    "text": "keep track of side effects so what is a side effect well essentially calling arbitrary JavaScript is a side effect so",
    "start": "1824860",
    "end": "1833200"
  },
  {
    "start": "1832000",
    "end": "1884000"
  },
  {
    "text": "let's look at this function here this is essentially the previous one just now I'm doing a function calling between",
    "start": "1833200",
    "end": "1838630"
  },
  {
    "text": "calling some JavaScript let's say we did our redundancy elimination and this is what we came up with first set of cards",
    "start": "1838630",
    "end": "1846309"
  },
  {
    "text": "then the call to this argument function here and then no more guards and directly the property fetch is this",
    "start": "1846309",
    "end": "1853630"
  },
  {
    "text": "correct well here's one case where it's not let's say our callback what it does is delete the property B in this case",
    "start": "1853630",
    "end": "1861790"
  },
  {
    "text": "it's the same has changed right as a result of a side effect so so this axis here",
    "start": "1861790",
    "end": "1867400"
  },
  {
    "text": "it cannot be safe we remove this property be this this can't be good so in this case we have to keep the",
    "start": "1867400",
    "end": "1874360"
  },
  {
    "text": "shape guard essentially the second so that's what you have to do if if you realize there's a side that's a",
    "start": "1874360",
    "end": "1880210"
  },
  {
    "text": "potential side effect here you have to keep the following shape guards right so",
    "start": "1880210",
    "end": "1885820"
  },
  {
    "start": "1884000",
    "end": "1911000"
  },
  {
    "text": "this requires the engine to essentially be able to precisely model our side effects of all the operations in it",
    "start": "1885820",
    "end": "1893110"
  },
  {
    "text": "intermediate language and this is hard so javascript is full of these callbacks they're",
    "start": "1893110",
    "end": "1898300"
  },
  {
    "text": "everywhere they've been a big source of parts or for for the last years essentially and they continue to be yeah",
    "start": "1898300",
    "end": "1904900"
  },
  {
    "text": "it stores the parts in this case here so it's not about exploitation how could",
    "start": "1904900",
    "end": "1910750"
  },
  {
    "text": "you exploit a bug like this for that we need to talk a bit about arrays in",
    "start": "1910750",
    "end": "1916180"
  },
  {
    "start": "1911000",
    "end": "1964000"
  },
  {
    "text": "JavaScript so let's just do this very quickly here so areas are kind of commonly used data structures so the",
    "start": "1916180",
    "end": "1922300"
  },
  {
    "text": "engine tries to optimize for them let's say we have an area that only stores doubles like in this case here in that",
    "start": "1922300",
    "end": "1929950"
  },
  {
    "text": "case the engine would realize okay this is only storing doubles so it would try to store these dis values as actual",
    "start": "1929950",
    "end": "1937990"
  },
  {
    "text": "doubles and not as JavaScript pages which are a bit more expensive because they use more memory so if you look at",
    "start": "1937990",
    "end": "1944140"
  },
  {
    "text": "the backing storage of this area in a debugger maybe you would see that it just stores through our doubles and this",
    "start": "1944140",
    "end": "1950170"
  },
  {
    "text": "information is also stored in the shape so here for this array the shape tells",
    "start": "1950170",
    "end": "1955450"
  },
  {
    "text": "us that it's storing unboxed doubles so that brings up the question well what happens if we store something that's not",
    "start": "1955450",
    "end": "1962080"
  },
  {
    "text": "a double in such an area and well what happens so first before that we all only",
    "start": "1962080",
    "end": "1968200"
  },
  {
    "start": "1964000",
    "end": "2002000"
  },
  {
    "text": "have these unboxed tablets in our banking storage now we put an object there so now the engine has to go ahead",
    "start": "1968200",
    "end": "1973240"
  },
  {
    "text": "and basically convert all these tablets to JavaScript values and then insert this this object here so if you look at",
    "start": "1973240",
    "end": "1980770"
  },
  {
    "text": "maybe the the last elementary in this area you would see it's pointing somewhere and that somewhere if you look",
    "start": "1980770",
    "end": "1987790"
  },
  {
    "text": "there you will find this tablet value again so yeah you can already tell why the engine tries to optimize because",
    "start": "1987790",
    "end": "1993670"
  },
  {
    "text": "JavaScript values and if it's torrid em as JavaScript values it will take three times as much",
    "start": "1993670",
    "end": "1998840"
  },
  {
    "text": "memory as if it's towards an unboxed but okay so how can we use this to exploit",
    "start": "1998840",
    "end": "2005020"
  },
  {
    "start": "2002000",
    "end": "2077000"
  },
  {
    "text": "these redundancy problems so this is kind of the pseudocode for such a bug",
    "start": "2005020",
    "end": "2010600"
  },
  {
    "text": "where you have an unexpected call back somewhere in between your your dude code",
    "start": "2010600",
    "end": "2016540"
  },
  {
    "text": "that you're compiling and then essentially the exploit looks like this so you first optimize your function to",
    "start": "2016540",
    "end": "2022150"
  },
  {
    "text": "work on areas with unbox doubles so in this case is this for loop here to",
    "start": "2022150",
    "end": "2027340"
  },
  {
    "text": "always calling it with an unlockable array then you call it again and this time in this call they could transition",
    "start": "2027340",
    "end": "2032950"
  },
  {
    "text": "the area to now store objects and then if the function with this callback",
    "start": "2032950",
    "end": "2037960"
  },
  {
    "text": "returns the JIT code essentially it's the things that the array is storing unbox doubles but it's now storing",
    "start": "2037960",
    "end": "2044410"
  },
  {
    "text": "pointers so in this case what it would do is basically fetch this this pointer treated that treated as a double and",
    "start": "2044410",
    "end": "2050679"
  },
  {
    "text": "give it back to you so you would get this weird-looking double which is essentially the address of this object",
    "start": "2050679",
    "end": "2055870"
  },
  {
    "text": "in memory so that's an info leak so we get a type confusion that's basically what we achieve here this part we've",
    "start": "2055870",
    "end": "2064600"
  },
  {
    "text": "seen it a few times again VD is written a blog post about it project here also found some box and",
    "start": "2064600",
    "end": "2070000"
  },
  {
    "text": "then there's this my CD from WebKit which I used for pendulum and that's what we'll talk about no right so this",
    "start": "2070000",
    "end": "2078820"
  },
  {
    "start": "2077000",
    "end": "2129000"
  },
  {
    "text": "was a JavaScript code the WebKit engine they also using a graph based in treated",
    "start": "2078820",
    "end": "2084340"
  },
  {
    "text": "language they also do this precise modeling of side effects because they want to be redundancy elimination in",
    "start": "2084340",
    "end": "2090159"
  },
  {
    "text": "their case there's this class called abstract interpreter which is responsible for doing just that it's",
    "start": "2090160",
    "end": "2096520"
  },
  {
    "text": "tracking all kinds of read Riots to stack heap and so on and it's making sure yeah it's tracking essentially side",
    "start": "2096520",
    "end": "2103480"
  },
  {
    "text": "of things right if you look at this abstract interpreter it's essentially a",
    "start": "2103480",
    "end": "2108700"
  },
  {
    "text": "huge switch case statement that for every operation in the intermediate language knows what side effects it's",
    "start": "2108700",
    "end": "2115660"
  },
  {
    "text": "have it has in case it has side effects like a call instruction it's calling",
    "start": "2115660",
    "end": "2121120"
  },
  {
    "text": "this clobber world function which basically says that while this has side effects",
    "start": "2121120",
    "end": "2126250"
  },
  {
    "text": "throw away all type information and keep following shape darts right so if we look for some other code",
    "start": "2126250",
    "end": "2133400"
  },
  {
    "start": "2129000",
    "end": "2211000"
  },
  {
    "text": "here there's one operation that's called create this what it does is basically",
    "start": "2133400",
    "end": "2138440"
  },
  {
    "text": "during construction it allocates the objects that's being constructed and if",
    "start": "2138440",
    "end": "2144560"
  },
  {
    "text": "you look at this code in the abstract interpreter here you can tell it it doesn't call a clobber world so it's",
    "start": "2144560",
    "end": "2149990"
  },
  {
    "text": "assuming that this operation is in fact side effect for you right well it turns",
    "start": "2149990",
    "end": "2155150"
  },
  {
    "text": "out it's not and that's exactly the bug I exploited so create this it can",
    "start": "2155150",
    "end": "2161450"
  },
  {
    "text": "actually call JavaScript the reason is very JavaScript specific essentially",
    "start": "2161450",
    "end": "2166610"
  },
  {
    "text": "when you construct an object the engine has to fetch the property from the constructor and fetching a property in",
    "start": "2166610",
    "end": "2173180"
  },
  {
    "text": "JavaScript that's something that you can intercept for example with the properties of proxies just kind of a",
    "start": "2173180",
    "end": "2178690"
  },
  {
    "text": "tool that you have in JavaScript to intercept all these standard operations on objects so here's kind of my pseudo",
    "start": "2178690",
    "end": "2185540"
  },
  {
    "text": "code you have to this function C which is the constructor then I put a proxy around it that intercepts property loads",
    "start": "2185540",
    "end": "2191840"
  },
  {
    "text": "and then I'm calling it as a constructor now it's creating this this object that",
    "start": "2191840",
    "end": "2198050"
  },
  {
    "text": "it's constructing and at that point it's running arbitrary JavaScript because I'm intercepting property loads so that's",
    "start": "2198050",
    "end": "2204680"
  },
  {
    "text": "really the unexpected callback in our example so let's look at what happens now this is the function we want to",
    "start": "2204680",
    "end": "2212540"
  },
  {
    "start": "2211000",
    "end": "2232000"
  },
  {
    "text": "optimize the first thing it does is this graph building phase yeah this is how it",
    "start": "2212540",
    "end": "2219020"
  },
  {
    "text": "would look like in the their intermediate language first to create this operation then shape card or it's",
    "start": "2219020",
    "end": "2224510"
  },
  {
    "text": "actually called structure check in JavaScript core because yes shapes are called structures then it's loading the",
    "start": "2224510",
    "end": "2231350"
  },
  {
    "text": "element and storing it on the object next thing it does something called check hoisting which is an optimization",
    "start": "2231350",
    "end": "2237710"
  },
  {
    "start": "2232000",
    "end": "2254000"
  },
  {
    "text": "where it tries to move these structure checks as far up as it can so it's actually duplicating the structures",
    "start": "2237710",
    "end": "2243440"
  },
  {
    "text": "check and putting it at first thing in the function and then it's doing redundancy elimination and at this point",
    "start": "2243440",
    "end": "2249080"
  },
  {
    "text": "it's removing the second structure check because it's assuming that creates is a side-effect free so what we end up with",
    "start": "2249080",
    "end": "2256670"
  },
  {
    "text": "is this operation which can have side effects it can call JavaScript and then",
    "start": "2256670",
    "end": "2261770"
  },
  {
    "text": "there's an unguarded access to this area essentially and this is exactly the condition we can exploit so for this we",
    "start": "2261770",
    "end": "2270510"
  },
  {
    "text": "can just view it the same trick that I showed previously with the array confusion stuff and confuse doubles and",
    "start": "2270510",
    "end": "2276600"
  },
  {
    "text": "JavaScript menus from there we get these two primitives address often fake object that I already used two years ago for",
    "start": "2276600",
    "end": "2283170"
  },
  {
    "text": "for another exploit basically you can read up later you interested here and from there it's really easy or just to",
    "start": "2283170",
    "end": "2290070"
  },
  {
    "text": "be really easy it's basically take a type array as you get arbitrary right that way and then you can just run shell",
    "start": "2290070",
    "end": "2296730"
  },
  {
    "text": "code basically yeah so this is kind of",
    "start": "2296730",
    "end": "2302250"
  },
  {
    "text": "the proof of concept for this book it's a bit more complicated so I'm not gonna go through all of this code right now if",
    "start": "2302250",
    "end": "2310200"
  },
  {
    "text": "you ran this on the vulnerable version it would crashes for one for one for one for one because there's this weird",
    "start": "2310200",
    "end": "2316350"
  },
  {
    "text": "double value that you have at the bottom here if you're interested I will push my",
    "start": "2316350",
    "end": "2322080"
  },
  {
    "text": "commented exploit to get up so you can take a look and we'll do a demo right so",
    "start": "2322080",
    "end": "2329730"
  },
  {
    "start": "2328000",
    "end": "2363000"
  },
  {
    "text": "what you will now see that basically my full count your own chain so it has the web PRC which gets this code executes in",
    "start": "2329730",
    "end": "2336780"
  },
  {
    "text": "the renderer and that's according this part but only this one so this one is quite powerful it allows us to bypass",
    "start": "2336780",
    "end": "2342630"
  },
  {
    "text": "our mitigations and then there's two more boxes one one logic Park in Mac OS",
    "start": "2342630",
    "end": "2347970"
  },
  {
    "text": "that gets me out of the sandbox and then there's another logic park that I used to escalate from user to root and then",
    "start": "2347970",
    "end": "2354810"
  },
  {
    "text": "root to Karl because that's kind of a additional security boundary and Mac OS I guess right so let's see this in",
    "start": "2354810",
    "end": "2361920"
  },
  {
    "text": "action so there's the calculator popping up mandatory calculator and here we can",
    "start": "2361920",
    "end": "2369090"
  },
  {
    "start": "2367000",
    "end": "2397000"
  },
  {
    "text": "see this is K X Ted so it's showing the list of loaded kernel modules and this",
    "start": "2369090",
    "end": "2374100"
  },
  {
    "text": "is my own kernel module that I loaded into the counter without a developer",
    "start": "2374100",
    "end": "2379410"
  },
  {
    "text": "certificate so it's not not signed in anyway right so this is the full chain gives us goes from browsing to web page",
    "start": "2379410",
    "end": "2386970"
  },
  {
    "text": "to kernel code execution kind of yeah just a few seconds and it's super",
    "start": "2386970",
    "end": "2392580"
  },
  {
    "text": "reliable because it's basically just logic box the whole way all right so that brings us to the end",
    "start": "2392580",
    "end": "2400620"
  },
  {
    "start": "2397000",
    "end": "2553000"
  },
  {
    "text": "obviously we haven't covered everything so there's a lot more to these compilers",
    "start": "2400620",
    "end": "2406110"
  },
  {
    "text": "there's this planar mechanism which I only touched on it's quite complex actually to just at some point in the",
    "start": "2406110",
    "end": "2414190"
  },
  {
    "text": "function go back to the interpreter and continue executing code there so there is some potential for box there there's",
    "start": "2414190",
    "end": "2421660"
  },
  {
    "text": "some other mechanisms like on stack replacement where basically the engine can also switch to the JIT code while",
    "start": "2421660",
    "end": "2430810"
  },
  {
    "text": "running the function so let's say you have a function that has a while loop that's running very long at some point",
    "start": "2430810",
    "end": "2436240"
  },
  {
    "text": "the JIT compiler could compile this the whole fashion and then just switch to the JIT code from one loop iteration to",
    "start": "2436240",
    "end": "2444010"
  },
  {
    "text": "the next so they're faulted quite a complex mechanism there's register allocation which we haven't talked about",
    "start": "2444010",
    "end": "2449200"
  },
  {
    "text": "at all also in nine caches inline caches is essentially kind of a something in",
    "start": "2449200",
    "end": "2455560"
  },
  {
    "text": "between the interpreter and the speculative and optimizing it but I have",
    "start": "2455560",
    "end": "2462100"
  },
  {
    "text": "some references on the next slide if you have two or next slides where you can read up if you're interested and of",
    "start": "2462100",
    "end": "2469750"
  },
  {
    "text": "course all of these are quite complex there's potential for box there so enjoy finding them I guess cool that brings us",
    "start": "2469750",
    "end": "2478000"
  },
  {
    "text": "to the end so here's my summary what have you seen essentially we saw the type speculation and runtime guards make",
    "start": "2478000",
    "end": "2484720"
  },
  {
    "text": "up for missing type information due to dynamic typing we've seen a lot of complex mechanisms lots of optimizations",
    "start": "2484720",
    "end": "2492900"
  },
  {
    "text": "potential for bugs right very complex code bases we've also seen very powerful",
    "start": "2492900",
    "end": "2499690"
  },
  {
    "text": "bugs so it's it's not uncommon that one bug is really enough to bypass all",
    "start": "2499690",
    "end": "2505330"
  },
  {
    "text": "mitigations in in a super reliable manner and super quickly and the whole",
    "start": "2505330",
    "end": "2512200"
  },
  {
    "text": "thing is also again kind of this performance versus security trade-off right now the engines they all go for",
    "start": "2512200",
    "end": "2518980"
  },
  {
    "text": "performance right they want to do these very complex optimization to produce as",
    "start": "2518980",
    "end": "2524410"
  },
  {
    "text": "fast code as possible which results in complex code potentially for security bugs right so",
    "start": "2524410",
    "end": "2530900"
  },
  {
    "text": "nothing really new and as I said there's some further reference is just a list of",
    "start": "2530900",
    "end": "2536690"
  },
  {
    "text": "kind of interesting articles the site will be published so you can take a look",
    "start": "2536690",
    "end": "2542119"
  },
  {
    "text": "now and with that Thanks thanks for listening [Applause]",
    "start": "2542119",
    "end": "2549099"
  },
  {
    "text": "[Music] [Applause]",
    "start": "2549580",
    "end": "2555439"
  }
]