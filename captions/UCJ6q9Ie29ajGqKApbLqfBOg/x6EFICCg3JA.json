[
  {
    "text": "w",
    "start": "28960",
    "end": "31960"
  },
  {
    "text": "get started here uh it's about that time so I'm G to introduce myself my name is",
    "start": "38680",
    "end": "43920"
  },
  {
    "text": "Todd mcdermid uh this is Eric brand wine uh we both work for uunet and uh let me",
    "start": "43920",
    "end": "50079"
  },
  {
    "text": "discuss a little bit of the background of the problem um we work for units of medium to large sized ISP and uh we have",
    "start": "50079",
    "end": "57840"
  },
  {
    "text": "lots of hosts out in the field and we were starting to notice occasionally uh",
    "start": "57840",
    "end": "62879"
  },
  {
    "text": "kernel mod root kits popping up on a few of them and this is problematic uh for reasons that we'll go into but we need",
    "start": "62879",
    "end": "69320"
  },
  {
    "text": "decided that uh we had to work on this problem and get something figured out so first we're going to go into uh what",
    "start": "69320",
    "end": "75960"
  },
  {
    "text": "kernel mod rootkits are and how they work a little bit and then we're going to go into what we did about",
    "start": "75960",
    "end": "83000"
  },
  {
    "text": "it uh so we've got some background information here um but we'd like to go through it quickly uh we're aiming for",
    "start": "83400",
    "end": "89960"
  },
  {
    "text": "Jeff's 20% alienation Mark and uh we'd like to get to the meat of this um just",
    "start": "89960",
    "end": "95799"
  },
  {
    "text": "a couple bullets on what a kernel module is and does the uh two important things to note here are one the kernel module",
    "start": "95799",
    "end": "102200"
  },
  {
    "text": "is the operating system it becomes part of the OS there are no permissions barriers no auth authorization barriers",
    "start": "102200",
    "end": "108920"
  },
  {
    "text": "uh it's running in the memory space of the kernel uh the other important thing is that kernel modules get loaded real",
    "start": "108920",
    "end": "114719"
  },
  {
    "text": "time without any hiccup whatsoever in system Services uh that means there could possibly be absolutely no",
    "start": "114719",
    "end": "121079"
  },
  {
    "text": "notification whatsoever to a systems administrator even if they're",
    "start": "121079",
    "end": "126360"
  },
  {
    "text": "watching uh I'm just going to also point out that um we have a default permit on any questions so unless we explicitly",
    "start": "127360",
    "end": "133480"
  },
  {
    "text": "deny you uh please feel free to speak up anytime uh so problem with uh security",
    "start": "133480",
    "end": "140680"
  },
  {
    "text": "is no one runs authorization on the colel the colel is what runs authorization on userland processes but",
    "start": "140680",
    "end": "146160"
  },
  {
    "text": "if the colonel says to do something the hardware does it I mean that's as low as you get um the first publicly uh available",
    "start": "146160",
    "end": "153560"
  },
  {
    "text": "reference that we saw to rootkit Colonel mods was in Frack 55 um 50- five and uh I'm sure they were",
    "start": "153560",
    "end": "162239"
  },
  {
    "text": "out there before then but they weren't as widely known um and detection of them is pretty impossible with standard",
    "start": "162239",
    "end": "169200"
  },
  {
    "text": "userland tools you basically either have to hope that the rootkit author made a mistake somewhere or didn't cover",
    "start": "169200",
    "end": "175560"
  },
  {
    "text": "something um and it doesn't help if you load it in trusted binaries off CD D because the system calls themselves are",
    "start": "175560",
    "end": "182000"
  },
  {
    "text": "lying to you and so just replacing your PS binary is not going to help evil kernel mods will lie about their",
    "start": "182000",
    "end": "189840"
  },
  {
    "text": "existence so um as black hat tools move into the kernel white hat tools have to go there too uh in order to have any",
    "start": "189840",
    "end": "196879"
  },
  {
    "text": "hope of detecting these things um there are a few tools that do exist that attempt to deal with the kernel mod",
    "start": "196879",
    "end": "203200"
  },
  {
    "text": "problem uh Kat does some cool stuff um but unfortunately it runs in user land",
    "start": "203200",
    "end": "209000"
  },
  {
    "text": "largely and it can be fooled and we'll show how you can do that um Carbonite is a good one loads into the kernel and",
    "start": "209000",
    "end": "215560"
  },
  {
    "text": "takes a snapshot um Lion find basically capitalizes on mistakes that the kernel",
    "start": "215560",
    "end": "220720"
  },
  {
    "text": "mod authors made um so by and large there are not a lot of Kernel mod rootkit detection tools out",
    "start": "220720",
    "end": "228080"
  },
  {
    "text": "there uh so if you're programming in the kernel as you are with kernel modules um",
    "start": "228080",
    "end": "233120"
  },
  {
    "text": "you're working in kernel mode user mode is the good old Unix we know and love you've got memory mapping virtual memory",
    "start": "233120",
    "end": "239920"
  },
  {
    "text": "um you can't waste the system um because the kernel protects you from it um",
    "start": "239920",
    "end": "245599"
  },
  {
    "text": "everything is nice in kernel mode it's a lot like working on a much older system um you can have direct access to the",
    "start": "245599",
    "end": "252200"
  },
  {
    "text": "hardware you can bypass the memory mapping Hardware you can change memory Maps um you can directly touch things",
    "start": "252200",
    "end": "259120"
  },
  {
    "text": "and completely waste the system um the primary entry point for a kernel mode is",
    "start": "259120",
    "end": "264759"
  },
  {
    "text": "system calls that's how userland processes request services from the system um and that makes them an",
    "start": "264759",
    "end": "271000"
  },
  {
    "text": "excellent checko for monitoring the kernel and kernel user interaction um",
    "start": "271000",
    "end": "276039"
  },
  {
    "text": "under Linux the srace tool CIS its trust uh just prints out system calls as they're made uh arguments return values",
    "start": "276039",
    "end": "283320"
  },
  {
    "text": "interprets them as best it can and it's a wonderful tool even if you're not working in the kernel but for us it was",
    "start": "283320",
    "end": "289080"
  },
  {
    "text": "invaluable um it is uh worth it to note that system calls are not the only entry point into the kernel uh signals",
    "start": "289080",
    "end": "295560"
  },
  {
    "text": "Hardware interrupts other things but system calls are the primary way that user processes enter the",
    "start": "295560",
    "end": "302560"
  },
  {
    "text": "kernel so we're going to talk about how kernel mod rootkits work uh and actually",
    "start": "302560",
    "end": "307800"
  },
  {
    "text": "how fnord Works largely as well um when a CIS call is made uh basically the",
    "start": "307800",
    "end": "313600"
  },
  {
    "text": "address of that the the number associated with that system call is loaded into a register on Intel hardware",
    "start": "313600",
    "end": "318880"
  },
  {
    "text": "and an interrupt is made and basically the kernel will go and it will look up uh that number in a table the CIS call",
    "start": "318880",
    "end": "326160"
  },
  {
    "text": "table and it will jump to the memory location in that table and it will execute that function which is usually",
    "start": "326160",
    "end": "333600"
  },
  {
    "text": "in a healthy kernel uh the open system call cisor open um these entries can be",
    "start": "333600",
    "end": "339600"
  },
  {
    "text": "replaced though it's not actually checking uh the location of the symbol what the symbol maps to it's going to",
    "start": "339600",
    "end": "346360"
  },
  {
    "text": "what's in the table uh and if so if you replace that with some module code of your own hacked uncore open",
    "start": "346360",
    "end": "352600"
  },
  {
    "text": "hypothetically you can jump to that location hacked open can modify return values it can modify arguments uh and",
    "start": "352600",
    "end": "359720"
  },
  {
    "text": "then well it'll usually call the original open call at some point so you don't have to re-implement the entire",
    "start": "359720",
    "end": "365039"
  },
  {
    "text": "open system call yourself um but it'll basically screw with what's going",
    "start": "365039",
    "end": "370479"
  },
  {
    "text": "through and the user land process has no way of knowing what's really happening here all it says is oh great Colonel I",
    "start": "370479",
    "end": "377240"
  },
  {
    "text": "wish to open this file please give me an FD back and you'll get it or you won't",
    "start": "377240",
    "end": "382520"
  },
  {
    "text": "and it'll return an eror code and you don't know what happened behind the scenes how many uh functions it had to",
    "start": "382520",
    "end": "388400"
  },
  {
    "text": "jump through to get there so this is a diagram of what system call",
    "start": "388400",
    "end": "394599"
  },
  {
    "text": "wrapping and the stack looks like the uh dotted yellow line is the user uh space kernel space um barrier and in reality",
    "start": "394599",
    "end": "402720"
  },
  {
    "text": "the two stacks aren't actually joined like that but conceptually this is how it works uh the user makes a system call",
    "start": "402720",
    "end": "409479"
  },
  {
    "text": "um the kernel jumps into that system call you can see the arguments passed from the user to the system call some uh",
    "start": "409479",
    "end": "415280"
  },
  {
    "text": "work is done by the system call and a return value is passed back to the user um if the system call is a blocking",
    "start": "415280",
    "end": "421120"
  },
  {
    "text": "system call um the process goes to sleep and the system call is still left on the",
    "start": "421120",
    "end": "426240"
  },
  {
    "text": "stack uh lower left diagram is uh what it looks like when a single module has been loaded that wraps that system call",
    "start": "426240",
    "end": "433680"
  },
  {
    "text": "uh the colonel has no idea it's there the system call has no idea it's there the user has no idea it's there the user",
    "start": "433680",
    "end": "439080"
  },
  {
    "text": "makes the system call the colel jumps to the address um that the module is specified in the table the module has a",
    "start": "439080",
    "end": "445879"
  },
  {
    "text": "chance to alter the arguments um and then generally call the system call the system call does whatever processing it",
    "start": "445879",
    "end": "452120"
  },
  {
    "text": "would normally do but then it returns back to the module the module then has a crack at the return value before",
    "start": "452120",
    "end": "457520"
  },
  {
    "text": "returning to user space um of course not all modules have to wrap system calls",
    "start": "457520",
    "end": "463360"
  },
  {
    "text": "not all system call wrappers have to call the original system call but here with Nord we're interested in",
    "start": "463360",
    "end": "468840"
  },
  {
    "text": "obfuscation not in actually doing work so we leave all the actual work to the kernel the original uh one other thing",
    "start": "468840",
    "end": "475199"
  },
  {
    "text": "to note about this diagram is if a process makes a blocking system call It Go goes to sleep in the system call if",
    "start": "475199",
    "end": "481440"
  },
  {
    "text": "the module later gets unloaded when the system call tries to return to the module the invalid memory",
    "start": "481440",
    "end": "487800"
  },
  {
    "text": "address or Worse the something else has been loaded in that space you jump to an arbitrary memory location uh generally",
    "start": "487800",
    "end": "494159"
  },
  {
    "text": "the process Wast itself if you're not lucky the uh machine waste itself um and",
    "start": "494159",
    "end": "499400"
  },
  {
    "text": "you may see that here because we haven't fixed that uh the proper way to handle it is to increment the module use count",
    "start": "499400",
    "end": "505360"
  },
  {
    "text": "every time you block within one of your system calls um and then refuse to the module if it's in use um just for ease",
    "start": "505360",
    "end": "512440"
  },
  {
    "text": "of demoing we have commented that out so any processes exploding are likely caused by that um the right diagram",
    "start": "512440",
    "end": "519959"
  },
  {
    "text": "shows what happens when a second module has been um loaded and wraps the same system call uh they're called in lifo",
    "start": "519959",
    "end": "527120"
  },
  {
    "text": "order uh in this case module one has no idea of module 2's existence module 2 isn't necessarily aware that when it",
    "start": "527120",
    "end": "533720"
  },
  {
    "text": "calls down to module one it isn't calling into the actual kernel um and you can see that each module gets a crack at the argument on the way down",
    "start": "533720",
    "end": "540240"
  },
  {
    "text": "and the return values on the way up so uh what's out there right now what",
    "start": "540240",
    "end": "546079"
  },
  {
    "text": "is published and publicly available um adore is a fairly popular Colonel mod and one that we're going to abuse in our",
    "start": "546079",
    "end": "553040"
  },
  {
    "text": "presentation um version of it that we looked at hides files based off of owner uid there's a special owner uid and if",
    "start": "553040",
    "end": "559000"
  },
  {
    "text": "you try and open a file with that uid in there it fails and says there's no such file um KMOD was presented last year by",
    "start": "559000",
    "end": "566519"
  },
  {
    "text": "job deas at this very conference excellent presentation um it's a Solaris based kernel mod we started off uh with",
    "start": "566519",
    "end": "574360"
  },
  {
    "text": "uh a Solaris based kernel mod ourselves uh we had issues with 64-bit kernels uh his kernel mod that we got also does as",
    "start": "574360",
    "end": "581720"
  },
  {
    "text": "well we think we've got the problem figured out but we were spending so much time having fun with Linux that we couldn't go back and check it um if you",
    "start": "581720",
    "end": "588839"
  },
  {
    "text": "want to get into Linux kernel mods uh there's a paper on packet storm uh that's a tutorial on Linux Lo loadable",
    "start": "588839",
    "end": "595240"
  },
  {
    "text": "kernel mods and there's a ton of different loadable kernel mods included in that paper uh that do a lot of",
    "start": "595240",
    "end": "600600"
  },
  {
    "text": "different things uh and that's a good place to look if you want to learn about that kind of stuff uh so we've got this",
    "start": "600600",
    "end": "606720"
  },
  {
    "text": "thing called fnord uh what are we trying to do with it it provides something akin to trip wire for the kernel uh we are",
    "start": "606720",
    "end": "614640"
  },
  {
    "text": "not trying to guarantee that your kernel is doing what you think it's doing um working within the the constraints that",
    "start": "614640",
    "end": "621279"
  },
  {
    "text": "we have and the framework that Linux or Solaris presents to you um if it's not impossible it's a a very very difficult",
    "start": "621279",
    "end": "628240"
  },
  {
    "text": "problem um and we've got a a large team of cranky systems administrators and if",
    "start": "628240",
    "end": "633800"
  },
  {
    "text": "we start messing with our systems and making them work in new and interesting ways uh they're going to come down on us",
    "start": "633800",
    "end": "639079"
  },
  {
    "text": "so the machine still has to look like it did it just has to work a little bit different um so we attempt to guarantee",
    "start": "639079",
    "end": "646920"
  },
  {
    "text": "notification of a kernel Integrity breach uh not prevent the kernel Integrity breach",
    "start": "646920",
    "end": "654200"
  },
  {
    "text": "um we're here we're presenting it's obvious that this thing exists and that we're working on it um and when this",
    "start": "654200",
    "end": "660680"
  },
  {
    "text": "does get rolled out on our Network um all of server Ops is going to be aware of it all of network security is going to be aware of it we have to assume that",
    "start": "660680",
    "end": "667120"
  },
  {
    "text": "people that are attacking our machines are aware of it as well uh kernel module based root kits tend to hide below the",
    "start": "667120",
    "end": "673120"
  },
  {
    "text": "low water line um you know as long as the administrator doesn't look for them you know they don't raise their heads above water and uh the attacker is Happy",
    "start": "673120",
    "end": "681440"
  },
  {
    "text": "um people are attacking you unit they're doing so for a reason they know that fnord is there they're going to be actively looking for it so we have to",
    "start": "681440",
    "end": "688160"
  },
  {
    "text": "hide fnord itself very well uh not just from people that could trip over it but from people that are actively looking",
    "start": "688160",
    "end": "694120"
  },
  {
    "text": "for it uh so that means that wherever possible we've avoided security through obscurity um we've patched all of the",
    "start": "694120",
    "end": "700560"
  },
  {
    "text": "holes that we could find next most of the holes that we could find there's always another hole yes um while we were",
    "start": "700560",
    "end": "707760"
  },
  {
    "text": "in there implementing all of the stealth for fnord um it was very easy to extend that to providing stealth for other",
    "start": "707760",
    "end": "714440"
  },
  {
    "text": "traditional userland tools as well as other kernel tools uh so we have flexible configurable stealth for others",
    "start": "714440",
    "end": "721360"
  },
  {
    "text": "um in addition uh fnord can be uh administrated live um and to prevent",
    "start": "721360",
    "end": "727200"
  },
  {
    "text": "anyone poking around in the system from noticing you doing this uh the administration oford can be hidden as",
    "start": "727200",
    "end": "733240"
  },
  {
    "text": "well not yet uh while we were in there messing around with the colel uh we provide a lot of uh silent alarms and",
    "start": "733240",
    "end": "739440"
  },
  {
    "text": "logging um fnord has a separate logging Channel That's not based on system logging uh and of course it's hidden by",
    "start": "739440",
    "end": "746279"
  },
  {
    "text": "fnord attackers can't see it they can't disable it don't even know that we've caught them um and in addition for our",
    "start": "746279",
    "end": "753079"
  },
  {
    "text": "uses as a general system Integrity Checker uh this would be ideal for a",
    "start": "753079",
    "end": "758160"
  },
  {
    "text": "Honeypot um as we'll go into later a full root compromise of the Box does not",
    "start": "758160",
    "end": "763320"
  },
  {
    "text": "mean a full compromise of the Box there's still things that a root user can't",
    "start": "763320",
    "end": "768720"
  },
  {
    "text": "do so what were our uh objectives I mean how how did we differ from uh kod root",
    "start": "768720",
    "end": "775399"
  },
  {
    "text": "kits that are out there uh today uh we wanted to deploy this on every box or as",
    "start": "775399",
    "end": "780760"
  },
  {
    "text": "many as we could so it's got to be uh it's got to everything's got to be scalable we've got to log in a scalable",
    "start": "780760",
    "end": "787639"
  },
  {
    "text": "fashion we've got to be administrable in a scalable fashion uh and we've got to have no operational impact which means",
    "start": "787639",
    "end": "794279"
  },
  {
    "text": "that if the choice comes down to uh security or it works the box has to work",
    "start": "794279",
    "end": "801279"
  },
  {
    "text": "um I'm sorry but um the routers can't go down and they've got to stay up and uh",
    "start": "801279",
    "end": "806360"
  },
  {
    "text": "we'd rather have a functional broken into Network which is a horrible horrible thing to say um we wanted to",
    "start": "806360",
    "end": "812600"
  },
  {
    "text": "separate Security Administration from systems Administration a lot of people have root we have a lot of systems",
    "start": "812600",
    "end": "817760"
  },
  {
    "text": "administrators uh and we don't want them to have full control over the Box we wanted there to be something back",
    "start": "817760",
    "end": "823399"
  },
  {
    "text": "something further that uh we could basically use and check to make sure",
    "start": "823399",
    "end": "828920"
  },
  {
    "text": "that the box was still being healthy and that no one was abusing their root privileges uh we wanted it to be able to",
    "start": "828920",
    "end": "834959"
  },
  {
    "text": "be administrated while still in stealth mode a lot of the early kod rout kits uh you had to take them out of stealth mode",
    "start": "834959",
    "end": "840639"
  },
  {
    "text": "change your configuration files whatever and then turn them back on uh we wanted to avoid that uh and we also didn't want",
    "start": "840639",
    "end": "846519"
  },
  {
    "text": "to have to have special tools available on the system to administer it so we didn't want to have to depend on non-standard dioctyl or things like that",
    "start": "846519",
    "end": "853120"
  },
  {
    "text": "where you'd have to have the compiled binary in there to actually talk to the",
    "start": "853120",
    "end": "858880"
  },
  {
    "text": "module uh so this is a list of features that fnord provides us um and I'm going",
    "start": "858880",
    "end": "864560"
  },
  {
    "text": "to go into each of them in uh much greater detail this is uh just a preview of things to come um that next",
    "start": "864560",
    "end": "872279"
  },
  {
    "text": "slide so you have to deal with Nord you have to be able to uh ask it what it's",
    "start": "872279",
    "end": "877800"
  },
  {
    "text": "doing right now you have to be able to uh reconfigure it um and all of this",
    "start": "877800",
    "end": "883199"
  },
  {
    "text": "while it's live while it's uh installed on the box actively hiding things actively doing its job uh and to provide",
    "start": "883199",
    "end": "890079"
  },
  {
    "text": "this we uh have a a pseudo character special device that fnord can register",
    "start": "890079",
    "end": "895160"
  },
  {
    "text": "um on the VFS and this allows for interaction with with users um it's a",
    "start": "895160",
    "end": "900839"
  },
  {
    "text": "lot like dialing a remote system you type in human readable commands you get back human readable output um it's very",
    "start": "900839",
    "end": "906920"
  },
  {
    "text": "simple to work with and my favorite fnord Administration command is CAD uh it's guaranteed to be",
    "start": "906920",
    "end": "913240"
  },
  {
    "text": "there um in using this interface you can specify files processes network",
    "start": "913240",
    "end": "918800"
  },
  {
    "text": "connections modules device drivers uh Etc to hide or show configure the",
    "start": "918800",
    "end": "924160"
  },
  {
    "text": "logging um and also query the module as to what it's currently doing",
    "start": "924160",
    "end": "930600"
  },
  {
    "text": "so the uh character special device is nice it provides a lot of flexibility a lot of convenience but there's a limited",
    "start": "932279",
    "end": "938839"
  },
  {
    "text": "number of character major numbers uh 256 in our case um it would be very easy if",
    "start": "938839",
    "end": "944440"
  },
  {
    "text": "the module had the interface registered all the time to detect this even if you removed it from proc devices uh you can",
    "start": "944440",
    "end": "951000"
  },
  {
    "text": "look in proc devices anything that's registered is clean load a module that Loops across all the other car major",
    "start": "951000",
    "end": "956160"
  },
  {
    "text": "numbers if you can register on any of them they're they clean too if you can't register on anything clearly something",
    "start": "956160",
    "end": "961759"
  },
  {
    "text": "is wrong it is there so we dynamically register and unregister the interface",
    "start": "961759",
    "end": "967680"
  },
  {
    "text": "based on userland actions um we'll explain leite in a couple slides but if a leite process makes a character",
    "start": "967680",
    "end": "974560"
  },
  {
    "text": "special node um and the name of the node matches the SE Dev string that's just a pound Define in our module in our module",
    "start": "974560",
    "end": "981160"
  },
  {
    "text": "that we're demoing it happens to be SP pipe um If it creates a car special node with the name SP pipe and that makes",
    "start": "981160",
    "end": "988600"
  },
  {
    "text": "node succeeds um it registers on the major number that that node was created with",
    "start": "988600",
    "end": "995000"
  },
  {
    "text": "the minor number is ignored if Elite process removes that node the module automatically unregisters the interface",
    "start": "995000",
    "end": "1002959"
  },
  {
    "text": "um sounds a bit confusing but the bottom line is if you make a node to talk to fnord fnord will be there when you",
    "start": "1002959",
    "end": "1008600"
  },
  {
    "text": "remove the node fnord is no longer there um",
    "start": "1008600",
    "end": "1014079"
  },
  {
    "text": "so so fn's not there but I make myself lead fnord is there",
    "start": "1017480",
    "end": "1026438"
  },
  {
    "text": "um and I picked 42 because I happen to know it's not registered at the moment and it's a good number",
    "start": "1028360",
    "end": "1036720"
  },
  {
    "text": "um if I could type it would have worked okay",
    "start": "1036760",
    "end": "1044720"
  },
  {
    "text": "so you can see on 42 SP pipe is registered this is a non-lead ordinary",
    "start": "1047079",
    "end": "1052160"
  },
  {
    "text": "root shell um and you can see on 42 there's no",
    "start": "1052160",
    "end": "1058640"
  },
  {
    "text": "entry so now the non-lead root shell could still detect it at this moment by",
    "start": "1058640",
    "end": "1064280"
  },
  {
    "text": "registering all the attempting to register all uh device numbers right now",
    "start": "1064280",
    "end": "1070000"
  },
  {
    "text": "uh which is why it isn't always there it's only we only put it there when you're administering it okay so uh for",
    "start": "1070000",
    "end": "1077400"
  },
  {
    "text": "example So currently the module is hiding the fnord module if you wanted to hide other",
    "start": "1077400",
    "end": "1083760"
  },
  {
    "text": "modules type in a command here um we've got a file log",
    "start": "1083760",
    "end": "1091520"
  },
  {
    "text": "uh now the module's hiding log if you type LS it's there in the ordinary shell",
    "start": "1095799",
    "end": "1100919"
  },
  {
    "text": "it's gone um let's clean up after",
    "start": "1100919",
    "end": "1106639"
  },
  {
    "text": "ourselves and it's back and then if we uh have to",
    "start": "1107320",
    "end": "1114360"
  },
  {
    "text": "make it not use remove the",
    "start": "1114360",
    "end": "1119480"
  },
  {
    "text": "node and it's gone we are going to go into the details of exactly how this is done in a few moments we're just",
    "start": "1119960",
    "end": "1126000"
  },
  {
    "text": "demonstrating the interface and showing what it can do um and so at the moment",
    "start": "1126000",
    "end": "1132000"
  },
  {
    "text": "there's no Trace within the device tree or the file system that exists even though it was there a moment ago",
    "start": "1132000",
    "end": "1140320"
  },
  {
    "text": "so this is great for users this is great for configuring the module this is great for Security Administration um but we",
    "start": "1140960",
    "end": "1147960"
  },
  {
    "text": "have thousands of deployed hosts that we have to watch continuously and touching each machine on a continual basis is is",
    "start": "1147960",
    "end": "1155400"
  },
  {
    "text": "not possible it doesn't scale so we have to be able to gather information from the module without touching",
    "start": "1155400",
    "end": "1161640"
  },
  {
    "text": "it so we provide a logging Channel parallel to the standard kernel log and",
    "start": "1161640",
    "end": "1167440"
  },
  {
    "text": "this logging Channel uh is very similar to The Standard kernel log we provide s print K rather",
    "start": "1167440",
    "end": "1172679"
  },
  {
    "text": "than print K to the kernel um unfortunately if you export it beyond the module for use by other modules it's",
    "start": "1172679",
    "end": "1178039"
  },
  {
    "text": "visible in the symbol table so we don't export it and then we provide um proc SK",
    "start": "1178039",
    "end": "1183640"
  },
  {
    "text": "message rather than proc K message to user space and of course this whole thing is hidden by fnord so if",
    "start": "1183640",
    "end": "1192320"
  },
  {
    "text": "we you can see here these are the output messages it's got a 16 K ring buffer um",
    "start": "1194400",
    "end": "1199799"
  },
  {
    "text": "and I hadn't read from it yet so um these are all of the um things that have",
    "start": "1199799",
    "end": "1205039"
  },
  {
    "text": "been logged since I've been in there and you can see if",
    "start": "1205039",
    "end": "1210320"
  },
  {
    "text": "I recreate it you module logs that it uh registered it um if uh",
    "start": "1211360",
    "end": "1219240"
  },
  {
    "text": "we remove it it unregisters it and uh using this it's possible to obtain",
    "start": "1219240",
    "end": "1225000"
  },
  {
    "text": "status from the module without actually being on the box normally there would be a modified uh oh is",
    "start": "1225000",
    "end": "1232679"
  },
  {
    "text": "it no it isn't oh normally there' be a modified CIS log D on uh listening to",
    "start": "1232679",
    "end": "1239600"
  },
  {
    "text": "proc SK message uh oh I'm sorry it is it is I told you",
    "start": "1239600",
    "end": "1245240"
  },
  {
    "text": "go um the intention of this if you look the beginning of every line is tagged with a a number in Brackets that's the",
    "start": "1245240",
    "end": "1252600"
  },
  {
    "text": "uh log level um this is identical to Pro K message",
    "start": "1252600",
    "end": "1258000"
  },
  {
    "text": "and operation and the idea would be that you'd hack uh klogd and CIS log D so that klogd read from uh proc SK message",
    "start": "1258000",
    "end": "1265919"
  },
  {
    "text": "um logged to a non-standard CIS logd and the CIS logd would read a hidden config file and loged to a security related log",
    "start": "1265919",
    "end": "1272400"
  },
  {
    "text": "server uh we haven't written that yet but we did get the module working and any changes to the module configuration",
    "start": "1272400",
    "end": "1280880"
  },
  {
    "text": "are logged out this for audit purposes so if someone does hijack the module um",
    "start": "1280880",
    "end": "1286960"
  },
  {
    "text": "at least we still have something so we've shown you a little bit about uh",
    "start": "1286960",
    "end": "1292520"
  },
  {
    "text": "leite processes you've noticed that one of these processes is not like the other the bottom process can basically see everything and the top process can see",
    "start": "1292520",
    "end": "1298760"
  },
  {
    "text": "nothing um and that's because uh one of them has an environment variable that the other one does not uh that's called",
    "start": "1298760",
    "end": "1305960"
  },
  {
    "text": "delete VAR uh and if you actually do an n on the bottom",
    "start": "1305960",
    "end": "1312320"
  },
  {
    "text": "one you'll see that we've got Le varar equals uh the Le string which is basically a password uh and we store the",
    "start": "1312320",
    "end": "1318400"
  },
  {
    "text": "md5 hash of that in the module and so every time we make a system call where information could be hidden and we've",
    "start": "1318400",
    "end": "1324279"
  },
  {
    "text": "got to decide whether or not to show it we check to see if that environment variable exists on that process and if",
    "start": "1324279",
    "end": "1329840"
  },
  {
    "text": "it exists we hash the string that it's equal to and if the hash matches the hash that we've got stored in the module",
    "start": "1329840",
    "end": "1335320"
  },
  {
    "text": "we let it see it um so all the hidden files are visible to the leete process",
    "start": "1335320",
    "end": "1340520"
  },
  {
    "text": "uh we don't modify any file contents uh for the leap process you notice that proc modules was uh was modified and",
    "start": "1340520",
    "end": "1348480"
  },
  {
    "text": "only leap processes uh can cause registration or deregistration of the admin interface um we hashed it so that",
    "start": "1348480",
    "end": "1356039"
  },
  {
    "text": "you can't recover it from it now you've noticed that we've got this uh sitting",
    "start": "1356039",
    "end": "1361320"
  },
  {
    "text": "in clear text in the environment uh variable and that would be a problem uh so we do take care of",
    "start": "1361320",
    "end": "1367360"
  },
  {
    "text": "that so here it is in the leite shell and you can see it's present in the environment um 528 is the process for",
    "start": "1367360",
    "end": "1374880"
  },
  {
    "text": "The Bash running in the lower window if you do it here here I guarantee you it's not there uh null terminated records are",
    "start": "1374880",
    "end": "1381799"
  },
  {
    "text": "are good for computers but not for humans but we can have grep tell us",
    "start": "1381799",
    "end": "1388799"
  },
  {
    "text": "that it indeed is missing and you can see that the module is watching us and it knows when we open up environment",
    "start": "1388799",
    "end": "1396919"
  },
  {
    "text": "files so um we want to hide things we we want to hide things like trip wire we want to hide things our scripts uh we",
    "start": "1397279",
    "end": "1404600"
  },
  {
    "text": "want to hide our spe specialized CIS logd um so we want to hide hide files uh",
    "start": "1404600",
    "end": "1410320"
  },
  {
    "text": "by and large um we hide them based off of Devi node uh as opposed to Strings uh",
    "start": "1410320",
    "end": "1415640"
  },
  {
    "text": "we do that to avoid string collisions a lot of kod rootkits use a special magic string and if the file contains that",
    "start": "1415640",
    "end": "1422039"
  },
  {
    "text": "magic string um then it is hidden um this causes a problem uh of you",
    "start": "1422039",
    "end": "1429240"
  },
  {
    "text": "generally put all your special files into a special little directory and we would didn't want to get locked down to that directory we wanted to be able to",
    "start": "1429240",
    "end": "1435799"
  },
  {
    "text": "hide files anywhere on the system um um we wanted to be able to hide files with any name and we didn't want there to be",
    "start": "1435799",
    "end": "1441360"
  },
  {
    "text": "any chance of collisions we didn't want an admin to accidentally create a file with uh the same name as our hidden",
    "start": "1441360",
    "end": "1447279"
  },
  {
    "text": "string and then go wait a second why am I not seeing the file I just created there um so what we do is a ridge stat",
    "start": "1447279",
    "end": "1455440"
  },
  {
    "text": "is called on each file access attempt uh which is the original stat call and it deres um the dev iode pair from there",
    "start": "1455440",
    "end": "1463240"
  },
  {
    "text": "and from that determines whether or not there's a linked list uh that stores all the currently hidden files and stores",
    "start": "1463240",
    "end": "1470559"
  },
  {
    "text": "their Dev iode Pairs and so it compares the dev iode pairs if it matches that file is supposed to be hidden and if the",
    "start": "1470559",
    "end": "1475960"
  },
  {
    "text": "process is not leite it shouldn't see it um we do have a problem with raw disk access you could open up the raw disk",
    "start": "1475960",
    "end": "1481960"
  },
  {
    "text": "device and read from there and determine the entire contents of the file system that way a lot of the files that we hide",
    "start": "1481960",
    "end": "1487000"
  },
  {
    "text": "in proc uh and there is no corresponding raw disk device uh and we do log",
    "start": "1487000",
    "end": "1492279"
  },
  {
    "text": "attempts to open raw disk devices um kind of we went with the BSD secure",
    "start": "1492279",
    "end": "1497440"
  },
  {
    "text": "level methodology you know if you open Dev km that's bad if you open raw dis devices that's bad um but we don't stop",
    "start": "1497440",
    "end": "1504720"
  },
  {
    "text": "it because we don't want people to know that we're there we want people to think that everything is okay and hunky dory but we log the fact that oh look",
    "start": "1504720",
    "end": "1511399"
  },
  {
    "text": "someone's looking maybe they saw us by now yours or mine um so that gets rid of",
    "start": "1511399",
    "end": "1520120"
  },
  {
    "text": "uh actually touching files but you can also list directories so we also wrapped uh get DN get directory entries um",
    "start": "1520120",
    "end": "1528360"
  },
  {
    "text": "we have to stat the Derpy that's passed into get DN to get a a device type but",
    "start": "1528360",
    "end": "1533760"
  },
  {
    "text": "once we've got that get DN gives us iodes for free um and then we just alter the return value we call the system get",
    "start": "1533760",
    "end": "1540919"
  },
  {
    "text": "DN and then alter the return value taking out all of the entries we don't want to be there um and then all CIS",
    "start": "1540919",
    "end": "1547559"
  },
  {
    "text": "calls that take car start path were wrapped to return no entry if the file is supposed to be hidden uh this includes things like swap on and I mean",
    "start": "1547559",
    "end": "1555279"
  },
  {
    "text": "things that you would never think of um but we wanted there to be no little Edge that you could peel back um actually at",
    "start": "1555279",
    "end": "1561559"
  },
  {
    "text": "one point I'd forgotten to uh wrap unlink so you could try unlinking files and if the unlink succeeded you knew",
    "start": "1561559",
    "end": "1567679"
  },
  {
    "text": "there was something there but you'd never get it it was already gone um that's since been fixed uh another",
    "start": "1567679",
    "end": "1573360"
  },
  {
    "text": "problem that we've got is um for example link and a couple of other CIS calls take Carstar path Carstar destination",
    "start": "1573360",
    "end": "1580880"
  },
  {
    "text": "and what do you do for the the Carstar destination no entry is a nonsensical",
    "start": "1580880",
    "end": "1586399"
  },
  {
    "text": "return value for the destination of of course there's no entry you're trying to create it um the only advice we have is",
    "start": "1586399",
    "end": "1593880"
  },
  {
    "text": "don't try and hide things with really obvious names um the only way to work around that is to to catch the overwrite",
    "start": "1593880",
    "end": "1600960"
  },
  {
    "text": "um you know dynamically offn name it within the kernel update all of your config files update everything else and",
    "start": "1600960",
    "end": "1606399"
  },
  {
    "text": "it's more code and more trouble than we were willing to go into because things are uh hid based",
    "start": "1606399",
    "end": "1612480"
  },
  {
    "text": "hidden based on a device inode it's very easy to hide things in uh hide processes",
    "start": "1612480",
    "end": "1618200"
  },
  {
    "text": "uh under Linux it's easy to calculate the inode number for proc PID uh given",
    "start": "1618200",
    "end": "1623360"
  },
  {
    "text": "PID left shift at 16 at three um",
    "start": "1623360",
    "end": "1629480"
  },
  {
    "text": "so uh process 509 is the tail-f barlog messages in the lower left",
    "start": "1630880",
    "end": "1637880"
  },
  {
    "text": "window so we can repeat that it's still there",
    "start": "1644120",
    "end": "1650960"
  },
  {
    "text": "however it's gone it's no longer visible to the non- Le shell uh you can note",
    "start": "1652760",
    "end": "1658799"
  },
  {
    "text": "that uh proc SK message noted that every single environment file on the dis on the system was opened it's because it",
    "start": "1658799",
    "end": "1664919"
  },
  {
    "text": "was a ps- ea I was querying every single process for all of its information um",
    "start": "1664919",
    "end": "1670279"
  },
  {
    "text": "it's also logged at level six and you could throw level six to the bit bucket and just pay attention to the uh the",
    "start": "1670279",
    "end": "1675799"
  },
  {
    "text": "important messages um",
    "start": "1675799",
    "end": "1679518"
  },
  {
    "text": "and there it is should also uh point out last year uh job deas mentioned that uh",
    "start": "1685919",
    "end": "1692720"
  },
  {
    "text": "one of the problems that you had with file hiding if you really wanted to do it right was uh if you catted the directory it's in there we do do a file",
    "start": "1692720",
    "end": "1699720"
  },
  {
    "text": "content alteration uh so we could catch that but under Linux we don't have to because if you try and read from a",
    "start": "1699720",
    "end": "1704880"
  },
  {
    "text": "directory in Linux it returns an error so yay so I just said that we uh alter file",
    "start": "1704880",
    "end": "1711960"
  },
  {
    "text": "contents um how do we we basically have several lists of uh files that we might",
    "start": "1711960",
    "end": "1717399"
  },
  {
    "text": "want to mess with um we'll get into those lists in a moment but we've got several lists that we all want to mess",
    "start": "1717399",
    "end": "1722960"
  },
  {
    "text": "with in certain ways and so if those files are opened um it checks every time",
    "start": "1722960",
    "end": "1728320"
  },
  {
    "text": "a file's open to see if it's on one of these special lists and if it is on one of these special lists uh we store the",
    "start": "1728320",
    "end": "1733799"
  },
  {
    "text": "process ID and the FD uh of what that file is and so every time uh we read",
    "start": "1733799",
    "end": "1740279"
  },
  {
    "text": "that from that process in that PID we can go around and mess with it um we",
    "start": "1740279",
    "end": "1745559"
  },
  {
    "text": "also wrap clothes so that it removes them from the lists and we wrap lseek so that uh when you lseek to that it gives",
    "start": "1745559",
    "end": "1752720"
  },
  {
    "text": "you an appropriate offset within the newly altered file um that's not an easy",
    "start": "1752720",
    "end": "1757880"
  },
  {
    "text": "problem and it does get a little bit uh processor intensive um another problem that we have is fork and dupe will",
    "start": "1757880",
    "end": "1764200"
  },
  {
    "text": "change the pit FD pair Fork will change the pit obviously uh and Fork is a real bear to wrap so we",
    "start": "1764200",
    "end": "1772200"
  },
  {
    "text": "haven't done that yet and dup will change the FD and we just haven't gotten around to wrapping that yet uh so that's all the bookkeeping",
    "start": "1772200",
    "end": "1779240"
  },
  {
    "text": "involved but the actual work of altering the contents of a file is done in read",
    "start": "1779240",
    "end": "1784320"
  },
  {
    "text": "um for each file descriptor that we're interested in uh we have a data structure that includes a 4K buffer um",
    "start": "1784320",
    "end": "1791679"
  },
  {
    "text": "we chose 4K because it happens to make the data structure a little bit less than a page which is real convenient in the kernel um but the first time read is",
    "start": "1791679",
    "end": "1799440"
  },
  {
    "text": "called this buffer is filled the modification function is called on it and this can shorten lengthen or alter",
    "start": "1799440",
    "end": "1805600"
  },
  {
    "text": "the contents of the buffer um possibly two of the above um and then the user request is",
    "start": "1805600",
    "end": "1812720"
  },
  {
    "text": "satisfied from this buffer uh if the user request is smaller than the valid data left in the buffer we save the",
    "start": "1812720",
    "end": "1818159"
  },
  {
    "text": "buffer for the next time they read uh if it's not enough to satisfy the user request we repeat the whole thing over",
    "start": "1818159",
    "end": "1824000"
  },
  {
    "text": "and over again and we use a sliding buffer window that'll go into in a second to catch all interesting records",
    "start": "1824000",
    "end": "1829720"
  },
  {
    "text": "even when they fall on Buffer boundaries um the current lseek implementation",
    "start": "1829720",
    "end": "1836799"
  },
  {
    "text": "whenever you seek seeks uh starts at the beginning of the file reads sequentially",
    "start": "1836799",
    "end": "1841880"
  },
  {
    "text": "through the entire file doing this over and over and over again until it gets to an effective offset that you've",
    "start": "1841880",
    "end": "1847320"
  },
  {
    "text": "specified um this is not horrendous for short files but for large long files the",
    "start": "1847320",
    "end": "1852880"
  },
  {
    "text": "whole purpose in using lseek is to jump over the beginning and we've just negated that um it's really a a tough",
    "start": "1852880",
    "end": "1859799"
  },
  {
    "text": "difficult problem and probably shouldn't be implemented at the system call level it probably belongs in the file system",
    "start": "1859799",
    "end": "1866159"
  },
  {
    "text": "if anywhere um it's just unpleasant so this is a a diagram of how",
    "start": "1866159",
    "end": "1873000"
  },
  {
    "text": "the sliding read buffer Works um on the initial call to read a buffer is read in",
    "start": "1873000",
    "end": "1878559"
  },
  {
    "text": "4,000 bytes the modification function is called and there are different lists of file descriptors to be modified and",
    "start": "1878559",
    "end": "1884720"
  },
  {
    "text": "there are different modification functions um we'll go into that and in this case a short chunk has been lopped",
    "start": "1884720",
    "end": "1889880"
  },
  {
    "text": "off the end of the buffer the buffer has gotten short or a record has been removed uh the user request the blue",
    "start": "1889880",
    "end": "1895519"
  },
  {
    "text": "chunk is satisfied from that buffer and there's still some amount of valid data left in the buffer so that's stored in",
    "start": "1895519",
    "end": "1901600"
  },
  {
    "text": "our module until the next time eventually the buffer is going to be down to a th000 bytes of valid",
    "start": "1901600",
    "end": "1907679"
  },
  {
    "text": "information we shift that information to the beginning of the buffer refill the buffer off of disc uh that's the green",
    "start": "1907679",
    "end": "1914120"
  },
  {
    "text": "chunk there recall the modification function um once again another record is lopped",
    "start": "1914120",
    "end": "1919679"
  },
  {
    "text": "off and then repeat the whole cycle starting to return data back to the user uh 4,000 and 1,000 are arbitrary numbers",
    "start": "1919679",
    "end": "1926440"
  },
  {
    "text": "uh in our case 1,000 bytes was guaranteed to catch all of the interesting records that we cared about um and 4K as I said happened to fit page",
    "start": "1926440",
    "end": "1933639"
  },
  {
    "text": "size those could be tuned as necessary",
    "start": "1933639",
    "end": "1941320"
  },
  {
    "text": "yep so uh what files exactly do we alter what is in our default file modification",
    "start": "1941320",
    "end": "1947399"
  },
  {
    "text": "list um we modify proc modules so that if you read from proc modules uh you will miss seeing our module uh we modify",
    "start": "1947399",
    "end": "1955120"
  },
  {
    "text": "procet UDP and procet TCP so that uh connections uh to given hosts on the",
    "start": "1955120",
    "end": "1961559"
  },
  {
    "text": "remote end uh will not be seen if you open those uh we modify proc devices so",
    "start": "1961559",
    "end": "1967240"
  },
  {
    "text": "that you don't see our special device and we modify proc pit Environ so that if you're not Le you can't see the lead",
    "start": "1967240",
    "end": "1972720"
  },
  {
    "text": "string you can't see the existence of the lead string much less what the value of the password is uh we also modified",
    "start": "1972720",
    "end": "1978240"
  },
  {
    "text": "Dev K we modify it slightly differently uh because instead of removing records from there we're replacing values uh we",
    "start": "1978240",
    "end": "1985399"
  },
  {
    "text": "do that so that K stat can't see the changes that we've made to the system call table um and we also note that",
    "start": "1985399",
    "end": "1991799"
  },
  {
    "text": "someone opened Dev cm in that case uh we tried to hide uh the system call table",
    "start": "1991799",
    "end": "1997880"
  },
  {
    "text": "differently we found some interesting bugs about that um but we'll go into that in a second yes",
    "start": "1997880",
    "end": "2004559"
  },
  {
    "text": "question that",
    "start": "2004559",
    "end": "2008960"
  },
  {
    "text": "the problem was was that if uh we were just looking for record the original implementation we were looking for a",
    "start": "2010799",
    "end": "2016600"
  },
  {
    "text": "special record like the Le string equals uh whatever uh and so we were matching to see if we had uh something Le string",
    "start": "2016600",
    "end": "2023760"
  },
  {
    "text": "equals whatever in our buffer we'd remove that from our buffer well if you read one bite at a time if we're just",
    "start": "2023760",
    "end": "2029399"
  },
  {
    "text": "looking at the user buffer then we're going to look at L well that not necessarily as part of lead string so we",
    "start": "2029399",
    "end": "2034519"
  },
  {
    "text": "wouldn't do anything with it e e whatever and they would get it back one bit at a time and so you could get an",
    "start": "2034519",
    "end": "2039720"
  },
  {
    "text": "unmodified file by just reading it one bite at a time so we implemented the internal buffer so that we could look at",
    "start": "2039720",
    "end": "2045519"
  },
  {
    "text": "the whole thing figure out if it was part of what we wanted to remove and then just return back what you wanted",
    "start": "2045519",
    "end": "2052158"
  },
  {
    "text": "and we have caught modules in the wild that failed to catch that yes another",
    "start": "2052159",
    "end": "2059399"
  },
  {
    "text": "question every time you lseek we throw out the entire buffer that we've got and we read it all in from the start um so",
    "start": "2062560",
    "end": "2069240"
  },
  {
    "text": "that's an interesting timing attack you'll be able I mean it's going to take a lot longer than a normal lseek would",
    "start": "2069240",
    "end": "2074280"
  },
  {
    "text": "but it will still return our modified file you won't be able to get around it that way um we don't handle negative",
    "start": "2074280",
    "end": "2082679"
  },
  {
    "text": "offsets that is offsets from the end of the file well um really in order to do that you'd have to run the modification",
    "start": "2082679",
    "end": "2089800"
  },
  {
    "text": "function across the entire file figure out what the modified length of the file is and then start working backwards and",
    "start": "2089800",
    "end": "2096158"
  },
  {
    "text": "because things slide off the left side of the buffer and disappear um if you're",
    "start": "2096159",
    "end": "2101320"
  },
  {
    "text": "uh less than or if you're more than 4K from the end of the file you'd have to go back and start from the beginning and",
    "start": "2101320",
    "end": "2106480"
  },
  {
    "text": "seek all the way up to where you want it to be um it's really unpleasant there's there's not a lot you",
    "start": "2106480",
    "end": "2113200"
  },
  {
    "text": "can do about it all right do you want a demo file alteration or um I just did oh",
    "start": "2113200",
    "end": "2118520"
  },
  {
    "text": "okay um so uh if we look in uh proc modules I",
    "start": "2118520",
    "end": "2125280"
  },
  {
    "text": "just did this but I'll speak through it um this is a pretty stripped down Linux box there are no modules loaded by",
    "start": "2125280",
    "end": "2130839"
  },
  {
    "text": "default so that's proper output but in the leite",
    "start": "2130839",
    "end": "2135960"
  },
  {
    "text": "Shell fnord is loaded taking up about 60k of Kernel space and the uh use count",
    "start": "2138000",
    "end": "2143160"
  },
  {
    "text": "is currently one because I'm reading from its device",
    "start": "2143160",
    "end": "2148319"
  },
  {
    "text": "um also if you look um SP pipe is registered on car major 42 and",
    "start": "2149040",
    "end": "2158800"
  },
  {
    "text": "it's not there for the non-l shell doesn't exist of course if the non-l shell loaded a module that attempted to",
    "start": "2159079",
    "end": "2164280"
  },
  {
    "text": "register or something on car major 42 they'd get a very weird error message back and that would be the start of us",
    "start": "2164280",
    "end": "2170119"
  },
  {
    "text": "being uncovered which is why we don't leave it registered all the time um another thing that we did with",
    "start": "2170119",
    "end": "2176240"
  },
  {
    "text": "is we messed around with query module a good chunk um if you query module for uh",
    "start": "2176240",
    "end": "2181680"
  },
  {
    "text": "the list of modules in the system uh you won't get back our module unless you're Elite um and originally uh the way that",
    "start": "2181680",
    "end": "2188640"
  },
  {
    "text": "we fooled Kat was that we kept a separate system call table in memory",
    "start": "2188640",
    "end": "2193920"
  },
  {
    "text": "that was our good system call table so that whenever you asked for um because Kat uh gets the the uh the location of",
    "start": "2193920",
    "end": "2202960"
  },
  {
    "text": "the CIS call table by uh through the query module system call and so we'd return a false location uh for that",
    "start": "2202960",
    "end": "2209960"
  },
  {
    "text": "system call or for the cisal table and that fooled case stat but unfortunately uh it fooled other modules as well",
    "start": "2209960",
    "end": "2216240"
  },
  {
    "text": "because apparently ins mod gets the location of the CIS call table that way as well and so if you loaded a module on",
    "start": "2216240",
    "end": "2221880"
  },
  {
    "text": "top of our module uh it would look like it was loaded because if you looked at the system call table it was there but",
    "start": "2221880",
    "end": "2227800"
  },
  {
    "text": "it never actually got called because the system call table that it had loaded itself into was not the system call table that um system calls were getting",
    "start": "2227800",
    "end": "2235119"
  },
  {
    "text": "called from so um that broke so now what we do is we return the real location of",
    "start": "2235119",
    "end": "2241599"
  },
  {
    "text": "the system call table but when you read from Dev K we'll return false locations for what's in the system call table um",
    "start": "2241599",
    "end": "2248960"
  },
  {
    "text": "and that's good uh okay do you want to do the module thing do I want to do with",
    "start": "2248960",
    "end": "2254920"
  },
  {
    "text": "what Cy module for LS mod or",
    "start": "2254920",
    "end": "2261000"
  },
  {
    "text": "no so basically um what we can do is uh has everyone used Cas stat anyone used",
    "start": "2261000",
    "end": "2267359"
  },
  {
    "text": "Cas stat no one has ever used Kat okay uh basically it's a uh cool tool by",
    "start": "2267359",
    "end": "2272960"
  },
  {
    "text": "ca.org um which basically goes through and it will compare the system call table um entries with",
    "start": "2272960",
    "end": "2280960"
  },
  {
    "text": "the cisor open for example uh locations so it'll actually look at the location",
    "start": "2280960",
    "end": "2286960"
  },
  {
    "text": "of the system call and if the location of the system call does not match what's in the system call table it prints out a little warning that something's not",
    "start": "2286960",
    "end": "2293920"
  },
  {
    "text": "right on your system um okay I just unloaded fnord and you can see the rmed process seg faed just like I said it",
    "start": "2293920",
    "end": "2300400"
  },
  {
    "text": "would it's because we wrapped the system call that's used to remove modules and um didn't bother to fix that um that can",
    "start": "2300400",
    "end": "2307560"
  },
  {
    "text": "be fixed we just haven't anyway oops and you lost the shell too yeah okay",
    "start": "2307560",
    "end": "2313800"
  },
  {
    "text": "anything that executes a blocking system call while the module is loaded has uh has",
    "start": "2313800",
    "end": "2319960"
  },
  {
    "text": "issues so now what we're going to do is we're going to show you um what case stat looks like normally and that's a",
    "start": "2322520",
    "end": "2328280"
  },
  {
    "text": "healthy case stat um there is one system call that does not match it has not matched on any Linux box that I've ever",
    "start": "2328280",
    "end": "2335000"
  },
  {
    "text": "been on so either red hat has some serious issues or uh it's just that way",
    "start": "2335000",
    "end": "2340400"
  },
  {
    "text": "by default we haven't gone into the source to figure out why that is um but if we load another kernel module say adore for",
    "start": "2340400",
    "end": "2347800"
  },
  {
    "text": "example and then run case stat and GP for warn you'll see that the system calls that adore wraps uh K stat picks",
    "start": "2347800",
    "end": "2354000"
  },
  {
    "text": "it up and that's a good way to detect uh loadable kernel modules on your system but uh it can be fooled because it's",
    "start": "2354000",
    "end": "2360760"
  },
  {
    "text": "coming from userland uh and since it's becoming coming from userland we can lie to it essentially when asks to read Dev",
    "start": "2360760",
    "end": "2367520"
  },
  {
    "text": "Kem so we remove the door we load fnord in and we run case",
    "start": "2367520",
    "end": "2375240"
  },
  {
    "text": "stat this is from the Le shell so it's not going to lie and you can see uh we",
    "start": "2376400",
    "end": "2382079"
  },
  {
    "text": "have a lot of warnings because that's really that's everything that we've wrapped right there but if we run it from the non- Le shell it looks normal",
    "start": "2382079",
    "end": "2389160"
  },
  {
    "text": "it looks totally natural now if you load a door on top of",
    "start": "2389160",
    "end": "2394880"
  },
  {
    "text": "our kernel module um uh and then run case stat we do update the table as it's",
    "start": "2394880",
    "end": "2400079"
  },
  {
    "text": "supposed to look uh so that you will actually see that U the system call tables get U modified and our module",
    "start": "2400079",
    "end": "2407040"
  },
  {
    "text": "will log also the fact um that that got uh loaded we'll get into that in a couple",
    "start": "2407040",
    "end": "2414160"
  },
  {
    "text": "slides any questions to this point okay so um another little feature that",
    "start": "2415000",
    "end": "2422440"
  },
  {
    "text": "we have uh is we have append only files and append only files um are on the",
    "start": "2422440",
    "end": "2428160"
  },
  {
    "text": "special file list and uh open is also wrapped such that if you open it uh read",
    "start": "2428160",
    "end": "2434560"
  },
  {
    "text": "nothing happens that's normal and natural if you open it right only or read write without the append and you're not lead uh it will trigger an alarm via",
    "start": "2434560",
    "end": "2442839"
  },
  {
    "text": "SK message uh and we'll save off an unaltered version of the log file and we'll hide it and then it will proceed",
    "start": "2442839",
    "end": "2449520"
  },
  {
    "text": "normally and you can play with the file to your leisure so if we had a hypothetical log file um",
    "start": "2449520",
    "end": "2457680"
  },
  {
    "text": "that is first second third fourth you know really boring log file there if you want to append to it um wait that's not",
    "start": "2457680",
    "end": "2466760"
  },
  {
    "text": "append if you want to pend to it nothing will happen because log files are supposed to be appended",
    "start": "2466760",
    "end": "2472880"
  },
  {
    "text": "to okay but and oops now you overwrote",
    "start": "2472880",
    "end": "2478040"
  },
  {
    "text": "it yes I",
    "start": "2478040",
    "end": "2480839"
  },
  {
    "text": "did um what is The Fad command uh it is uh",
    "start": "2485240",
    "end": "2493720"
  },
  {
    "text": "Echo it's adadad file file yeah so now this file is protected and",
    "start": "2493720",
    "end": "2500480"
  },
  {
    "text": "if you append to it nothing will happen to it except the uh right will happen in a normal",
    "start": "2500480",
    "end": "2506480"
  },
  {
    "text": "way and if you cat it it'll look normal on both sides but uh if you try and modify it",
    "start": "2506480",
    "end": "2514440"
  },
  {
    "text": "delete that incriminating third line",
    "start": "2514440",
    "end": "2518240"
  },
  {
    "text": "it'll look like it worked and it's still there and everything is fine but we've logged the the fact that you've changed",
    "start": "2519839",
    "end": "2526079"
  },
  {
    "text": "it and we've also um saved off a unmodified copy which is going to be",
    "start": "2526079",
    "end": "2531440"
  },
  {
    "text": "log. three in this particular case and that's automatically added to the hidden uh files list um there's some",
    "start": "2531440",
    "end": "2538400"
  },
  {
    "text": "interesting uh things that we have to work around with log uh rotation with this which we haven't totally figured",
    "start": "2538400",
    "end": "2545559"
  },
  {
    "text": "out yet but but uh we feel that this is a pretty cool capability that we've we're going to be able to somehow",
    "start": "2545559",
    "end": "2551760"
  },
  {
    "text": "yes yeah",
    "start": "2556359",
    "end": "2563800"
  },
  {
    "text": "M we will notice them",
    "start": "2566359",
    "end": "2572480"
  },
  {
    "text": "uhuh yes and if we're going to let him  after pretty much anything he wants",
    "start": "2572480",
    "end": "2579280"
  },
  {
    "text": "he is the colonel at that point and if he's aware of our existence he could go on a little seek and destroy mission and",
    "start": "2579280",
    "end": "2584640"
  },
  {
    "text": "find all our sections of code and parse what we're doing and Hunt us down and kill us and we are toast",
    "start": "2584640",
    "end": "2590839"
  },
  {
    "text": "um and he could notice the hidden files and he he can do anything he wants if you let someone execute kernel mode code",
    "start": "2590839",
    "end": "2596880"
  },
  {
    "text": "on your machine you're screwed and that's a decision that you've got to make if you're going for stealth are you",
    "start": "2596880",
    "end": "2602599"
  },
  {
    "text": "going to let him do things or are you going to um uh forbid him from doing things and alert him to the fact that",
    "start": "2602599",
    "end": "2609119"
  },
  {
    "text": "you are forbidding him from doing that um the real solution would be a virtual machine um and that's a lot of money",
    "start": "2609119",
    "end": "2617160"
  },
  {
    "text": "that we don't have we would really like a SP2 to run thousands of Linux boxes on but um so we would catch the the the",
    "start": "2617160",
    "end": "2624720"
  },
  {
    "text": "breach of Colonel Integrity hopefully we would notice that he was doing things on our systems we would be alerted um he",
    "start": "2624720",
    "end": "2631359"
  },
  {
    "text": "may be able to you know hide some of his traces but this is completely his hidden",
    "start": "2631359",
    "end": "2636640"
  },
  {
    "text": "I mean there's no trace of it you can't see that the log file is still there you can't see that your records haven't been deleted you know your SSH connection",
    "start": "2636640",
    "end": "2643200"
  },
  {
    "text": "attempts are still in a file somewhere on the file system that we can analyze later and",
    "start": "2643200",
    "end": "2650078"
  },
  {
    "text": "remember but he has to find out that they're there to be changed in the first he needs to know that the that the open",
    "start": "2650480",
    "end": "2656079"
  },
  {
    "text": "call has been wrapped so he would have to know that fnord has been loaded onto the machine to know what to change in the kernel to allow him to see those",
    "start": "2656079",
    "end": "2664240"
  },
  {
    "text": "files he could do anything that he wants once he's in the kernel if he's aware of what the Kel really looks like at that",
    "start": "2664240",
    "end": "2670680"
  },
  {
    "text": "point yes and the colonel itself I mean if he wanted to to take this to The Logical extreme he could go through as",
    "start": "2670680",
    "end": "2677200"
  },
  {
    "text": "the colonel and you know poke at every bite and see what's in every bite and",
    "start": "2677200",
    "end": "2682359"
  },
  {
    "text": "analyze exactly what's happening in that machine and determine that we've been loaded that way because we cannot hide kernel data structures from the kernel",
    "start": "2682359",
    "end": "2689400"
  },
  {
    "text": "it's a Memory D reference it's not a function call anymore there's no there there's no hook to to wrap um remember",
    "start": "2689400",
    "end": "2695599"
  },
  {
    "text": "our constraint we've got a large deployed network of Solaris machines unfortunately this isn't Solaris um and",
    "start": "2695599",
    "end": "2702359"
  },
  {
    "text": "we've got to keep them working exactly the way they work today with no operational impact um if we screw",
    "start": "2702359",
    "end": "2707760"
  },
  {
    "text": "something up server Ops is going to come down on us like a load of bricks and we we just can't afford that right so we've",
    "start": "2707760",
    "end": "2713960"
  },
  {
    "text": "we know that he's there we can send the ambulances running and hopefully he won't be able to disassemble our colonel in the time it takes us to get",
    "start": "2713960",
    "end": "2720720"
  },
  {
    "text": "there so but by and large we're catching 95% of the people out there I'm pretty",
    "start": "2720720",
    "end": "2727319"
  },
  {
    "text": "sure with",
    "start": "2727319",
    "end": "2729720"
  },
  {
    "text": "this no um that's oh very difficult um",
    "start": "2733400",
    "end": "2739880"
  },
  {
    "text": "do you I I I guess if you wanted to you would hide it if you wanted to you could do some accounting and figure out that",
    "start": "2739880",
    "end": "2746079"
  },
  {
    "text": "you know your hidden files of Saved off log copies are you know so many blocks",
    "start": "2746079",
    "end": "2751280"
  },
  {
    "text": "and you know alter the accounting that DF would return uh du is more difficult",
    "start": "2751280",
    "end": "2757280"
  },
  {
    "text": "um actually no we would fix du because they're hidden it wouldn't stat them it wouldn't be in the directory entry du is taken care of DF would require some",
    "start": "2757280",
    "end": "2764160"
  },
  {
    "text": "bookkeeping um it doesn't matter when your partition fills your partition fills and no amount of bookkeeping is",
    "start": "2764160",
    "end": "2771240"
  },
  {
    "text": "going to make more space",
    "start": "2771240",
    "end": "2775000"
  },
  {
    "text": "um that's true D DF would would catch that hopefully your logs are not the",
    "start": "2777040",
    "end": "2782400"
  },
  {
    "text": "majority of your disc and the change is relatively minor most of our deployed systems have enough churn in their dis",
    "start": "2782400",
    "end": "2788760"
  },
  {
    "text": "that you know a couple K byte log file coming or going is below the the the noise level",
    "start": "2788760",
    "end": "2796720"
  },
  {
    "text": "yes uh star gets expanded by the shell the shell does it get DN on dot uh get",
    "start": "2797680",
    "end": "2803200"
  },
  {
    "text": "DN says that file isn't there it's still there now if they rmar cd. Dot and try",
    "start": "2803200",
    "end": "2809000"
  },
  {
    "text": "and remove the directory it's going to tell you the directory isn't empty because the uh reference count of the",
    "start": "2809000",
    "end": "2814319"
  },
  {
    "text": "directory I note is going to be too high um there's not a lot you can do about that either however someone that",
    "start": "2814319",
    "end": "2820640"
  },
  {
    "text": "attempts to remove our log um it's going to cause all sorts of things to scream we could actually instead of saving the",
    "start": "2820640",
    "end": "2827720"
  },
  {
    "text": "file in the current directory where it is we could copy it to a different directory and save our unaltered copy",
    "start": "2827720",
    "end": "2833359"
  },
  {
    "text": "there but we don't Implement that right now but that's something we could",
    "start": "2833359",
    "end": "2838520"
  },
  {
    "text": "do some other if if we ran Fisk and um no because Fisk would be ideally running",
    "start": "2844720",
    "end": "2852440"
  },
  {
    "text": "his lead um you know I hadn't thought of that and I haven't tried it um but I was",
    "start": "2852440",
    "end": "2859280"
  },
  {
    "text": "intending to sacrifice this laptop after the conference so maybe later today I will",
    "start": "2859280",
    "end": "2866640"
  },
  {
    "text": "yes doesn't work doesn't work you're still going to rely on some system called open or Stat or something and it",
    "start": "2866640",
    "end": "2875160"
  },
  {
    "text": "it's going to fail size of Colonel memory it's a link list",
    "start": "2875160",
    "end": "2882400"
  },
  {
    "text": "we just keep adding to it you you'll notice longer and longer times right you're still talking",
    "start": "2882400",
    "end": "2889559"
  },
  {
    "text": "milliseconds at at extreme cases um because this logs I mean every time a",
    "start": "2889559",
    "end": "2895200"
  },
  {
    "text": "log file is open for editing it'll log and that should never happen um and",
    "start": "2895200",
    "end": "2901160"
  },
  {
    "text": "hopefully you know before months have passed and the dis is filled up one of us would take a look at the machine uh",
    "start": "2901160",
    "end": "2907000"
  },
  {
    "text": "this is for you know Frontline defense you know notification and preserving forensics",
    "start": "2907000",
    "end": "2913400"
  },
  {
    "text": "evidence not for long-term guaranteed okay and uh that final bullet",
    "start": "2913400",
    "end": "2920319"
  },
  {
    "text": "there is important I mean someone logs into one of our machines um you know ext2fs can do appendonly files well",
    "start": "2920319",
    "end": "2927079"
  },
  {
    "text": "that's ext2fs only it doesn't work on Solaris ufs and it says no like uh oh something's wrong you know I can't get",
    "start": "2927079",
    "end": "2933319"
  },
  {
    "text": "rid of my log messages and they clear off the machine uh here they edit the log file I mean",
    "start": "2933319",
    "end": "2939839"
  },
  {
    "text": "attackers are likely not going to be on Console you know they're across some internet link from some country far away",
    "start": "2939839",
    "end": "2945200"
  },
  {
    "text": "they don't have exact timing information they edit the log file they remove their connection attempts whatever else they",
    "start": "2945200",
    "end": "2950480"
  },
  {
    "text": "want to do they hit save it saves I mean they're they're none the wiser they don't know that anything has happened",
    "start": "2950480",
    "end": "2956680"
  },
  {
    "text": "they believe that they've successfully covered their traces and we still have all of the log",
    "start": "2956680",
    "end": "2962599"
  },
  {
    "text": "entries for your um up here we provide uh slpr slsk",
    "start": "2964520",
    "end": "2972160"
  },
  {
    "text": "message it's parallel to uh proc K message uh our module logs out of that",
    "start": "2972160",
    "end": "2977319"
  },
  {
    "text": "there's an S printk uh function that the module has access to um writes logs into",
    "start": "2977319",
    "end": "2982400"
  },
  {
    "text": "a ring buffer and you can just read from it the goal is to hack klogd and CIS",
    "start": "2982400",
    "end": "2987680"
  },
  {
    "text": "logd so that it reads from there and lo reads A a private hidden CIS log.com",
    "start": "2987680",
    "end": "2992960"
  },
  {
    "text": "file and then logs to a security log server obviously at the far end you're going to have to have Swatch or something",
    "start": "2992960",
    "end": "2998960"
  },
  {
    "text": "watching and you know parsing out the noise and um looking for the interesting",
    "start": "2998960",
    "end": "3004640"
  },
  {
    "text": "messages uh some things have some noise in them but uh system calls being",
    "start": "3004640",
    "end": "3009680"
  },
  {
    "text": "wrapped log files being edited things like that should never ever ever happen on a deployed Unix system and any",
    "start": "3009680",
    "end": "3016760"
  },
  {
    "text": "occurrence of them is almost guaranteed to be uh positive false positive rate is very",
    "start": "3016760",
    "end": "3023599"
  },
  {
    "text": "low cool um so what we can do with this um we can",
    "start": "3023599",
    "end": "3030520"
  },
  {
    "text": "hide uh traditional security tools if you want to run trip wire on the box uh fnord watches the kernel for you fnord",
    "start": "3030520",
    "end": "3036240"
  },
  {
    "text": "is not a user space security tool tripwire is though and you could run it",
    "start": "3036240",
    "end": "3041640"
  },
  {
    "text": "you could run it on the box it runs as lead um it has access to the entire dis including its config files its log files",
    "start": "3041640",
    "end": "3048079"
  },
  {
    "text": "its database but an attacker comes onto the box and they start poking around there's absolutely no evidence that trip",
    "start": "3048079",
    "end": "3054000"
  },
  {
    "text": "wire is installed on the system uh likewise with a host-based firewall or a host-based IDs um and similarly",
    "start": "3054000",
    "end": "3062079"
  },
  {
    "text": "with honeypop monitoring scripts um you know you're watching your system binaries you're watching what's happening um doesn't matter if you get",
    "start": "3062079",
    "end": "3070280"
  },
  {
    "text": "rud on the box you still can't delete the log files you still can't um delete traces that you were there um we we've",
    "start": "3070280",
    "end": "3078119"
  },
  {
    "text": "put barriers on Route it's not a large box that we've secured but it's it's",
    "start": "3078119",
    "end": "3084119"
  },
  {
    "text": "there so so the real reason where we started with all this was kernel Integrity we wanted to monitor uh the",
    "start": "3084119",
    "end": "3090480"
  },
  {
    "text": "CIS call table uh table and basically make sure that no one had loaded kernel modules on us and so uh the meat and",
    "start": "3090480",
    "end": "3098480"
  },
  {
    "text": "potatoes of why we did this is uh we wanted to look at this now kernel data structures can't be modified for an in",
    "start": "3098480",
    "end": "3104440"
  },
  {
    "text": "kernel viewer uh and we can compare CIS call table entries to exported kernal",
    "start": "3104440",
    "end": "3109559"
  },
  {
    "text": "symbols and that will catch already uh installed kod rootkits um that can be",
    "start": "3109559",
    "end": "3115720"
  },
  {
    "text": "extended to other data structures processes uh and some such we think the",
    "start": "3115720",
    "end": "3121559"
  },
  {
    "text": "system call table gives us the biggest bang for the buck uh that's the the",
    "start": "3121559",
    "end": "3127000"
  },
  {
    "text": "structure that everybody seems to want to go after and so that's the one that we monitor right now uh but we would like to extend it to to other future",
    "start": "3127000",
    "end": "3135720"
  },
  {
    "text": "ones so we check CIS call table uh and make sure that it is all is good uh we",
    "start": "3136000",
    "end": "3142359"
  },
  {
    "text": "wrap all the system calls that we can and whenever install module or delete module is run uh after it comes back we",
    "start": "3142359",
    "end": "3150359"
  },
  {
    "text": "check to see uh the system call table uh entries right then and uh compare them",
    "start": "3150359",
    "end": "3156359"
  },
  {
    "text": "with exported kernel symbols in addition if someone manages to load a kernel module uh not via uh install module or",
    "start": "3156359",
    "end": "3163640"
  },
  {
    "text": "delete module we have a timer that's checking uh every second and all",
    "start": "3163640",
    "end": "3169119"
  },
  {
    "text": "discrepancies will alarm um we had some problems wrapping the following uh system calls uh",
    "start": "3169119",
    "end": "3175920"
  },
  {
    "text": "for Fairly hairy reasons but we do check every entry in the CIS call table all 256 not just the 191 that are news so",
    "start": "3175920",
    "end": "3184559"
  },
  {
    "text": "and it would be really really hard to write a root kit with just those three system calls so we're not horrendously",
    "start": "3184559",
    "end": "3190119"
  },
  {
    "text": "worried but we check them out um",
    "start": "3190119",
    "end": "3194599"
  },
  {
    "text": "so we've got fnord loaded it Returns the expected uh",
    "start": "3197400",
    "end": "3204680"
  },
  {
    "text": "information the non- Le shell is clean the Le shell has snored uh if we ins mod a",
    "start": "3204680",
    "end": "3212079"
  },
  {
    "text": "door you can see it has logged the fact that all of the system calls that ad door wraps are indeed wrapped and",
    "start": "3212079",
    "end": "3219880"
  },
  {
    "text": "working with our the system has to work the way it used to work this is also visible in user space if you rerun case",
    "start": "3219880",
    "end": "3226280"
  },
  {
    "text": "stat in the elite shell you get fairly garbage output because you've got the union of the adore and the fnord system",
    "start": "3226280",
    "end": "3233240"
  },
  {
    "text": "calls wrapped if you bother to check the addresses they will match up with new addresses but we've we've mapped we",
    "start": "3233240",
    "end": "3238400"
  },
  {
    "text": "we've logged the fact that a change has occurred out to the remote system call um syis log server and the name of the",
    "start": "3238400",
    "end": "3244680"
  },
  {
    "text": "module uh one other thing that we keep meaning to implement but haven't is uh saving a copy of all modules that get",
    "start": "3244680",
    "end": "3250240"
  },
  {
    "text": "loaded in some hidden directory so that you know later on when uh we have to investigate them you know the fact that",
    "start": "3250240",
    "end": "3256440"
  },
  {
    "text": "they removed the module from the file system after they loaded it is no longer a problem it's more of a Honeypot ideal",
    "start": "3256440",
    "end": "3263119"
  },
  {
    "text": "oops wrong window so we remove a door and you can see it's",
    "start": "3263119",
    "end": "3268640"
  },
  {
    "text": "logged the fact that all of those system calls have been unwrapped now that's what we did um now things",
    "start": "3268640",
    "end": "3278599"
  },
  {
    "text": "that we could do against this uh how could we get around because we've been thinking of ideas of you know okay our",
    "start": "3278599",
    "end": "3284880"
  },
  {
    "text": "module is interesting but it's not bulletproof um things you could do that",
    "start": "3284880",
    "end": "3290359"
  },
  {
    "text": "would really screw with us is you could rename the exported symbol uh table exported symbol symb before the initial",
    "start": "3290359",
    "end": "3296200"
  },
  {
    "text": "checks are run so you load in hacked open and then you actually change the symbol name so that hacked open is",
    "start": "3296200",
    "end": "3301520"
  },
  {
    "text": "actually cisor open um so when we check to see if ha if what we're pointing to",
    "start": "3301520",
    "end": "3307000"
  },
  {
    "text": "in the CIS call table is CIS underscore open yeah we are and you rename CIS underscore open to something else that",
    "start": "3307000",
    "end": "3312240"
  },
  {
    "text": "would really mess with us um so we haven't seen any of that yet maybe now that we're out there we",
    "start": "3312240",
    "end": "3318319"
  },
  {
    "text": "will um if you wanted to you could unwrap the system calls before each time that we check them and then rewrap them",
    "start": "3318319",
    "end": "3325119"
  },
  {
    "text": "after we check them uh that would basically require you knowing when we're checking them so you could check the",
    "start": "3325119",
    "end": "3330920"
  },
  {
    "text": "timer you could install a kernel module in such a way so that uh after it",
    "start": "3330920",
    "end": "3337480"
  },
  {
    "text": "installed itself because we check immediately upon Return of the install module call it goes through and uh sets",
    "start": "3337480",
    "end": "3345079"
  },
  {
    "text": "itself so that you know a millisecond after it returns it rewraps all the system calls and then unwraps rewraps",
    "start": "3345079",
    "end": "3350799"
  },
  {
    "text": "every time the timer's called uh that would be kind of a hairy module to write uh their probably easier ways to attack",
    "start": "3350799",
    "end": "3356200"
  },
  {
    "text": "us and it's not SMP compliant no it would not be S&P compliant uh you could spoof the location of the CIS call table",
    "start": "3356200",
    "end": "3362799"
  },
  {
    "text": "like we did the first time that we tried uh such that uh when we were looking uh at the system call table what we're",
    "start": "3362799",
    "end": "3369359"
  },
  {
    "text": "looking at is not where the system calls are actually going uh to get their addresses um so that's basically",
    "start": "3369359",
    "end": "3376280"
  },
  {
    "text": "changing one value in the kernel and not changing the other um so it's still kind",
    "start": "3376280",
    "end": "3381720"
  },
  {
    "text": "of an arms race if you get into the kernel before we do there are ways that you can prevent yourself from being detected by us um and as long as we're",
    "start": "3381720",
    "end": "3389599"
  },
  {
    "text": "allowing attackers to execute kernel mode code you're going to have that kind of these are pretty involved attacks",
    "start": "3389599",
    "end": "3397640"
  },
  {
    "text": "they're not trivial they're not out there now um but it is one of the disadvantages of having a soft permissive module um the advantage is",
    "start": "3397640",
    "end": "3404799"
  },
  {
    "text": "obviously you get great intelligence and they don't know you're there necessarily and your systems administrators don't kill you and your systems administrators",
    "start": "3404799",
    "end": "3411000"
  },
  {
    "text": "do not kill you and uh bear in mind that our constraint was a large network of",
    "start": "3411000",
    "end": "3416280"
  },
  {
    "text": "deployed systems the idea was that fnord would be added to the build so before these machines ever touch the network",
    "start": "3416280",
    "end": "3422559"
  },
  {
    "text": "before there was ever a chance of compromise barring corrupt employees and all that other happy stuff uh fnord",
    "start": "3422559",
    "end": "3428359"
  },
  {
    "text": "would already be there watching so we would be the first we would have the advantage it's our box and we would guarantee that we were already installed",
    "start": "3428359",
    "end": "3435640"
  },
  {
    "text": "before there was a chance um so just to",
    "start": "3435640",
    "end": "3442760"
  },
  {
    "text": "yes will detect itself it will detect the fact that fnord just got loaded on top of me",
    "start": "3443799",
    "end": "3450079"
  },
  {
    "text": "and yeah fnord qualifies as a colel mod rot kid as far as sort is concerned it it will log itself the fact that it got",
    "start": "3450079",
    "end": "3456720"
  },
  {
    "text": "logged on on top of itself",
    "start": "3456720",
    "end": "3460680"
  },
  {
    "text": "yes yeah um we should check followup I mean",
    "start": "3473799",
    "end": "3480520"
  },
  {
    "text": "writing to Dev km is a big deal and that should be a big alarm that goes off huge",
    "start": "3480520",
    "end": "3489280"
  },
  {
    "text": "um really things right to devk M directly in",
    "start": "3494520",
    "end": "3499720"
  },
  {
    "text": "Solaris okay well if it's not a regular tool we",
    "start": "3503720",
    "end": "3511200"
  },
  {
    "text": "could try and pass by Fiat please do not run these tools on our systems because we'll come down hard on your ass um",
    "start": "3511200",
    "end": "3517920"
  },
  {
    "text": "that's really annoying if you allow users to write into Dev km you're kind of bending over for them U",
    "start": "3517920",
    "end": "3527559"
  },
  {
    "text": "now well everyone knows some of how it works but you don't have details you don't have a hex stump you don't have a",
    "start": "3531599",
    "end": "3537480"
  },
  {
    "text": "copy of the module itself certainly not the source code um we we don't think",
    "start": "3537480",
    "end": "3542880"
  },
  {
    "text": "that any of these ideas are truly revolutionary this is the evolution of the kernel module this is the next step",
    "start": "3542880",
    "end": "3548480"
  },
  {
    "text": "in in the chain but I'm sure that someone out there has thought of these things and we would rather that the",
    "start": "3548480",
    "end": "3554079"
  },
  {
    "text": "security community be thinking with us than one day I log onto a box and it explodes in my face um if someone had",
    "start": "3554079",
    "end": "3562280"
  },
  {
    "text": "excellent or perfect knowledge of our module um they could get in there they could um alter km they could disable our",
    "start": "3562280",
    "end": "3568880"
  },
  {
    "text": "module uh but we would get that one critical log message out the vast majority of attackers we would have",
    "start": "3568880",
    "end": "3574920"
  },
  {
    "text": "excellent information on them but hopefully all of them we would at least have some sign there would be some",
    "start": "3574920",
    "end": "3581000"
  },
  {
    "text": "notification um I hate to say it but it happens and I've seen it happen at uh our company I've seen it happen other",
    "start": "3581000",
    "end": "3587640"
  },
  {
    "text": "places boxes get owned no one is watching them no one is monitoring them",
    "start": "3587640",
    "end": "3592799"
  },
  {
    "text": "um I mean I've been alerted to compromise someone called me because their lab Network segment was saturated turns out that it was a we site and you",
    "start": "3592799",
    "end": "3599480"
  },
  {
    "text": "know everyone and their brother was downloading MP3s off it that is not how you should find out that your system is",
    "start": "3599480",
    "end": "3605400"
  },
  {
    "text": "compromised um there were actually traces on one box that hackers had been pushing each other off the Box you know",
    "start": "3605400",
    "end": "3612039"
  },
  {
    "text": "someone broke it patched the hole they came in through someone else came in through another hole it's like no it's my box that that shouldn't be happening",
    "start": "3612039",
    "end": "3618720"
  },
  {
    "text": "on our systems and it's not just ours it's everyone's um so we're trying to",
    "start": "3618720",
    "end": "3624319"
  },
  {
    "text": "guar that as soon as they gain access we're notified can shift services to standby boxes take this one out of",
    "start": "3624319",
    "end": "3630599"
  },
  {
    "text": "service and start trying to figure out how they got in and and guarantee that they don't do any further damage I would",
    "start": "3630599",
    "end": "3636920"
  },
  {
    "text": "not recommend that you install classified material or anything like that on a box that's running fnord I mean that would is is a totally",
    "start": "3636920",
    "end": "3643599"
  },
  {
    "text": "inappropriate application of it because it is soft but it's it it's a step above",
    "start": "3643599",
    "end": "3649480"
  },
  {
    "text": "Honeypot u i mean it's it's a really kickass Honeypot and it's something that can be deployed widely so that all your",
    "start": "3649480",
    "end": "3654680"
  },
  {
    "text": "systems become honeypots to a certain",
    "start": "3654680",
    "end": "3658200"
  },
  {
    "text": "extent no that was that's an excellent thing to start doing um uh we could md5",
    "start": "3674760",
    "end": "3681160"
  },
  {
    "text": "selected areas of memory or or something similar um that's a really good idea",
    "start": "3681160",
    "end": "3686400"
  },
  {
    "text": "start however um right and there there's also that",
    "start": "3686400",
    "end": "3692240"
  },
  {
    "text": "paper unloading modules into non-m modular kernels and that really scared us um the bottom line is they all",
    "start": "3692240",
    "end": "3699039"
  },
  {
    "text": "require something that trips one of our alarms um if you're going to alter the kernel either you have access to the Box",
    "start": "3699039",
    "end": "3705280"
  },
  {
    "text": "before we do which violates our constraints or you've written to Dev km which violates are",
    "start": "3705280",
    "end": "3711599"
  },
  {
    "text": "logging so once again we we we don't try and fix everything we just try and let someone know that something's a",
    "start": "3711599",
    "end": "3719119"
  },
  {
    "text": "eyy yes how do you fix",
    "start": "3719119",
    "end": "3724318"
  },
  {
    "text": "the well I don't know this because we haven't tested it yet but um supposedly there are two different system call",
    "start": "3725079",
    "end": "3731920"
  },
  {
    "text": "tables in Solaris one for 32-bit and one for 64-bit and I think our basic problem was we were writing to the wrong system",
    "start": "3731920",
    "end": "3738039"
  },
  {
    "text": "call table there I might be totally wrong because I really didn't spend any time on it at all cuz we were working on",
    "start": "3738039",
    "end": "3743760"
  },
  {
    "text": "the Linux version but I'm thinking",
    "start": "3743760",
    "end": "3747880"
  },
  {
    "text": "that okay right but those are provided for user processes to select which one they wish to call um there are not uh",
    "start": "3753520",
    "end": "3761760"
  },
  {
    "text": "you know there's open and open 64 but there's not a corresponding 64 version for every single system call and the",
    "start": "3761760",
    "end": "3767839"
  },
  {
    "text": "colonel does provide 32 and 64-bit versions for both of them as well as a 32-bit shared Linker and a 64-bit Linker",
    "start": "3767839",
    "end": "3776279"
  },
  {
    "text": "um lib C libm everything has to be duplicated and it's a nest of worms we",
    "start": "3776279",
    "end": "3782960"
  },
  {
    "text": "spent a fair amount of time reading kernel source and that's a lot easier to do in Linux than it is in Solaris so",
    "start": "3782960",
    "end": "3789039"
  },
  {
    "text": "that's why the Linux version is here today um are we not quite not quite um",
    "start": "3789039",
    "end": "3797920"
  },
  {
    "text": "one possible application of fnord is uh incident response uh forensics you throw",
    "start": "3797920",
    "end": "3803880"
  },
  {
    "text": "it at a machine in an unknown State and it could do basically what K stat does but from",
    "start": "3803880",
    "end": "3809039"
  },
  {
    "text": "within the kernel so you avoid the system call layer um obviously if you mess around within the kernel enough uh",
    "start": "3809039",
    "end": "3816400"
  },
  {
    "text": "you can lie to even kernel modules as uh we have started to do um but it does",
    "start": "3816400",
    "end": "3822799"
  },
  {
    "text": "catch uh uh the great majority of existing kernel modules in fact all of them that we're aware of um and it's uh",
    "start": "3822799",
    "end": "3830000"
  },
  {
    "text": "probably about an hour's worth of coding based on what we've got so far but it isn't quite implemented yet um it does a",
    "start": "3830000",
    "end": "3835680"
  },
  {
    "text": "fairly good job of protecting the system from future kernel module based rootkits and uh if you get to the system in the",
    "start": "3835680",
    "end": "3841839"
  },
  {
    "text": "beginning the future is all of time there is no window vulnerability um hides itself virtually Without a Trace",
    "start": "3841839",
    "end": "3848559"
  },
  {
    "text": "uh we think we've plugged all the holes in the file system layer and most of the standard OS Services uh certainly made",
    "start": "3848559",
    "end": "3854640"
  },
  {
    "text": "it much more difficult than uh than most so where would we oh I'm sorry long",
    "start": "3854640",
    "end": "3862400"
  },
  {
    "text": "slide we uh mess with most of the kernel tables already and we'd like to extend it more so you can uh hide device",
    "start": "3862400",
    "end": "3869640"
  },
  {
    "text": "registrations processes network connections um files um ideally anything",
    "start": "3869640",
    "end": "3876400"
  },
  {
    "text": "uh that the colonel keeps State on uh hidden showed them dynamically as well as quered as to what's currently hidden",
    "start": "3876400",
    "end": "3882400"
  },
  {
    "text": "um we provide logging that attackers are not aware of and cannot detect from on the box ideally um and this uh lulls",
    "start": "3882400",
    "end": "3889799"
  },
  {
    "text": "them into a false sense of security and gives us uh added notification we protect our log files silently and that",
    "start": "3889799",
    "end": "3896279"
  },
  {
    "text": "ties in with the bullet above and uh can be administrated absolutely without",
    "start": "3896279",
    "end": "3901720"
  },
  {
    "text": "special tools you don't need to uh for example adore compiles Ava and you need",
    "start": "3901720",
    "end": "3907119"
  },
  {
    "text": "that executable of Ava to administrate that version of AD door um and it changes with each compile um you don't",
    "start": "3907119",
    "end": "3914640"
  },
  {
    "text": "need to compile something that uses weird ictal you don't need to to include anything standard system binaries uh",
    "start": "3914640",
    "end": "3920880"
  },
  {
    "text": "will allow you to do anything that this module can do so now where would we like to go with",
    "start": "3920880",
    "end": "3927359"
  },
  {
    "text": "this in the future um couple things we'd like to add uh we should add the uh system system call mding to verify the",
    "start": "3927359",
    "end": "3935000"
  },
  {
    "text": "Integrity of the system calls themselves uh we would like to uh mangle the stack in such a way so that TCP dump itself",
    "start": "3935000",
    "end": "3941720"
  },
  {
    "text": "could not see the outgoing traffic uh that it's sending to the CIS log the secure CIS log server um we would like",
    "start": "3941720",
    "end": "3948760"
  },
  {
    "text": "to add uh or create a loose Source routing kernel module so that it basically uh the box for given IP",
    "start": "3948760",
    "end": "3955559"
  },
  {
    "text": "addresses will insert itself as the midpoint of a loose Source route conversation that really has very little",
    "start": "3955559",
    "end": "3961079"
  },
  {
    "text": "to do with the kernel Integrity but it's a really cool idea uh that we would like our bosses to OK us to work on so um we",
    "start": "3961079",
    "end": "3968799"
  },
  {
    "text": "would like to verify more uh kernel structures and we'd like to Port it to Solaris that's",
    "start": "3968799",
    "end": "3974880"
  },
  {
    "text": "nice I love Windows um also with the loose Source routing uh for honeypotting",
    "start": "3974880",
    "end": "3980319"
  },
  {
    "text": "if you loose Source route all traffic uh validly you know you enable loose Source routing on uh your Honeypot box and some",
    "start": "3980319",
    "end": "3987960"
  },
  {
    "text": "other box in your network you can effectively set up a a sniffer um you loose thr rout everything through uh",
    "start": "3987960",
    "end": "3994680"
  },
  {
    "text": "some other box on your network hopefully not on the same segment uh and that way you have a a crack at all traffic before",
    "start": "3994680",
    "end": "4001039"
  },
  {
    "text": "the source route is uh incremented to the next hop and hopefully the remote host would honor the loose Source route",
    "start": "4001039",
    "end": "4007480"
  },
  {
    "text": "obviously there are some problems with that and it's a lot easier to plug in a sniffer but it's a neat",
    "start": "4007480",
    "end": "4013000"
  },
  {
    "text": "idea",
    "start": "4013000",
    "end": "4016000"
  },
  {
    "text": "hello all right apparently charging your battery",
    "start": "4020119",
    "end": "4025200"
  },
  {
    "text": "fully is a bad idea excellent",
    "start": "4025200",
    "end": "4030279"
  },
  {
    "text": "um so we're here we've got this kernel module that means we've done a fair amount of uh kernel programming and uh",
    "start": "4030279",
    "end": "4036760"
  },
  {
    "text": "the bottom line is Kernel Pro mode programming sucks uh you have no debugger you get to read all sorts of",
    "start": "4036760",
    "end": "4042960"
  },
  {
    "text": "esoteric hexit stack traces um it's really horrendous and if you do decide to get into konel mode programming the",
    "start": "4042960",
    "end": "4050440"
  },
  {
    "text": "the best piece of advice I can give you is get a machine that reboots an F6 quickly um I it happens all the time um",
    "start": "4050440",
    "end": "4058720"
  },
  {
    "text": "sometimes the Box explodes violently uh the screen goes black and you see the BIOS messages you don't even get a",
    "start": "4058720",
    "end": "4064200"
  },
  {
    "text": "chance to read what's on the screen it it's just gone um but we figured we'd share some of the stumbling blocks we ran into um",
    "start": "4064200",
    "end": "4071799"
  },
  {
    "text": "while we were going through this um um kernel mode is quite limited to provide the maximum amount of possible memory to",
    "start": "4071799",
    "end": "4079119"
  },
  {
    "text": "user mode processes so the kernel stack is fairly short um and we actually",
    "start": "4079119",
    "end": "4084520"
  },
  {
    "text": "overflowed it we allocated uh several large automatic variables on the stack and in this case large is Page size 4K",
    "start": "4084520",
    "end": "4092599"
  },
  {
    "text": "um and it was at three or four pages on the stack uh we crashed it into the Heap and the Box rebooted spectacularly it",
    "start": "4092599",
    "end": "4099920"
  },
  {
    "text": "was amazingly painful to debug because each of the functions worked perfectly individually but if you happen to call them in the",
    "start": "4099920",
    "end": "4105719"
  },
  {
    "text": "wrong order Boom the Box disappeared that took quite a while good rule of",
    "start": "4105719",
    "end": "4111600"
  },
  {
    "text": "thumb is automatic variables are bad Malik what you can K Malik and get free",
    "start": "4111600",
    "end": "4116920"
  },
  {
    "text": "page and right Read All About It um we do a lot of accounting based on process",
    "start": "4116920",
    "end": "4122000"
  },
  {
    "text": "ID uh process IDs get recycled through the life of the system and it'd be a shame for me to hide a Flor",
    "start": "4122000",
    "end": "4128040"
  },
  {
    "text": "administrative process um and then you know weeks later some user uh starts up a shell and the shell can't see itself",
    "start": "4128040",
    "end": "4135040"
  },
  {
    "text": "because it happens to have used the same process ID uh so we wrapped underscore exit which is how process is you know",
    "start": "4135040",
    "end": "4142080"
  },
  {
    "text": "commit suicide unfortunately it is possible for a process to exit without going through underscore exit in the",
    "start": "4142080",
    "end": "4148040"
  },
  {
    "text": "Linux kernel there's a function do underscore exit which actually does the work of tearing down a process and",
    "start": "4148040",
    "end": "4153440"
  },
  {
    "text": "returning its resources to the system uh and in particular signals circumvent",
    "start": "4153440",
    "end": "4158798"
  },
  {
    "text": "underscore exit and processes get killed by signals all the time uh do uncore exit it is not exported we didn't want",
    "start": "4158799",
    "end": "4165120"
  },
  {
    "text": "to re-implement it uh and it can't be overwritten because it's not in the symbol table um possibilities are either",
    "start": "4165120",
    "end": "4171480"
  },
  {
    "text": "to watch fork and see when um um process IDs are recycled that's",
    "start": "4171480",
    "end": "4177159"
  },
  {
    "text": "the The Lazy version you wait until you have to replace them um or you could watch weight PID and wait for a parent",
    "start": "4177159",
    "end": "4183440"
  },
  {
    "text": "to reap status on a child and check to see if the status the pit of the child matches one of your um uh interesting",
    "start": "4183440",
    "end": "4192318"
  },
  {
    "text": "processes another uh interesting issue that we had early on in development was uh rewrapping uh system calls and",
    "start": "4192319",
    "end": "4199239"
  },
  {
    "text": "overwriting our exported symbols uh because we were exporting our symbols at that point so we would load fnord or Rod",
    "start": "4199239",
    "end": "4207000"
  },
  {
    "text": "it was at that point uh and then we load rap mod on top of that and it would have an ridore open CIS uh uh CIS call entry",
    "start": "4207000",
    "end": "4216000"
  },
  {
    "text": "basically was a symbol and so the first one would wrap an arid uncore open would be the value of arid underscore open and",
    "start": "4216000",
    "end": "4222880"
  },
  {
    "text": "the second one would load and a ridore open would be the value of the first uh module uh hacked underscore open and so",
    "start": "4222880",
    "end": "4230159"
  },
  {
    "text": "the second module will call the first module which would call itself again and again and again until we ran out of Kernel stack and the Box died um so",
    "start": "4230159",
    "end": "4237840"
  },
  {
    "text": "generally you probably shouldn't be exporting symbols anyway if you want to be stealthy um but that was something that we hit",
    "start": "4237840",
    "end": "4244480"
  },
  {
    "text": "early um I'm going about to unload fnord but I just like to point out if you look in the uh Vlog messages uh other than",
    "start": "4244480",
    "end": "4251760"
  },
  {
    "text": "the processes that exploded because they were doing blocking CIS calls uh there was absolutely no trace of fnord inv VAR",
    "start": "4251760",
    "end": "4257239"
  },
  {
    "text": "log messages and uh I believe I'm logging star. star at the moment um but",
    "start": "4257239",
    "end": "4262640"
  },
  {
    "text": "either way there are no system logging indications that fnord",
    "start": "4262640",
    "end": "4268320"
  },
  {
    "text": "exists of course and RM mod blows up again so",
    "start": "4269920",
    "end": "4276679"
  },
  {
    "text": "we've got a clean box um so the way system calls get called you put the",
    "start": "4276679",
    "end": "4282080"
  },
  {
    "text": "system call number that you want in a register you call interrupt 80 it turns out that estrace uh triggers off",
    "start": "4282080",
    "end": "4288880"
  },
  {
    "text": "interrupt 80 so interrupt 80 gets called estrace looks at what's on the stack and prints out a line for the user um this",
    "start": "4288880",
    "end": "4297040"
  },
  {
    "text": "normally works quite well however if you make system calls from within the kernel uh a lot of the documents tell you that",
    "start": "4297040",
    "end": "4303360"
  },
  {
    "text": "you should use the underscore CIS call wrapper so you type underscore CIS call 2 to generate a system called that takes",
    "start": "4303360",
    "end": "4309000"
  },
  {
    "text": "two arguments and you pass it all the goo and it returns something that you can call that will'll call this CIS call",
    "start": "4309000",
    "end": "4315360"
  },
  {
    "text": "it actually generates the Assembly Language glue code that you need to call interrupt 0 with the register setup",
    "start": "4315360",
    "end": "4320760"
  },
  {
    "text": "correctly this triggers interrup 0 again and generates an extra s trce line uh",
    "start": "4320760",
    "end": "4327120"
  },
  {
    "text": "the best way to do this if you want to uh keep stealth up is just get the address of the system call you're",
    "start": "4327120",
    "end": "4332880"
  },
  {
    "text": "interested from ideally from the CIS call table um before it's modified and",
    "start": "4332880",
    "end": "4338400"
  },
  {
    "text": "just call that directly as a function pointer um that will work it'll work fine and there won't be any oddness so",
    "start": "4338400",
    "end": "4345440"
  },
  {
    "text": "if we in mod just call rap.",
    "start": "4345440",
    "end": "4349800"
  },
  {
    "text": "O so we're just going to cat log and worked fine uh CIS call wrap. is stupid",
    "start": "4354080",
    "end": "4361440"
  },
  {
    "text": "it just uh wraps open and stats everything that's passed to it but it stats it via the CIS call wrapper and so",
    "start": "4361440",
    "end": "4367560"
  },
  {
    "text": "it's actually calling int 80 from within the kernel and you can see it's logging itself in CIS log and it's telling you",
    "start": "4367560",
    "end": "4373080"
  },
  {
    "text": "you know Dev iode pairs for everything that it opens however if we look at the trace file every time open is",
    "start": "4373080",
    "end": "4380000"
  },
  {
    "text": "called you get this spous enosis function. implemented line and that",
    "start": "4380000",
    "end": "4385480"
  },
  {
    "text": "happens every time a system call is made using int 80 from within a system call that's executing on behalf of a user",
    "start": "4385480",
    "end": "4392239"
  },
  {
    "text": "process you get it every time it is consistent you can see it happens on the uh ld.so docash which succeeded um and",
    "start": "4392239",
    "end": "4402360"
  },
  {
    "text": "if you scroll on long enough you can see when we open the log file we're interested it happens again um there's",
    "start": "4402360",
    "end": "4409520"
  },
  {
    "text": "nothing wrong here there's nothing bad happening but if you're going for stealth this is bad this is a a dead",
    "start": "4409520",
    "end": "4416159"
  },
  {
    "text": "giveaway that that something is wrong so don't do",
    "start": "4416159",
    "end": "4422000"
  },
  {
    "text": "it me can take this one okay uh reading in the kernel buffers is a classic",
    "start": "4425280",
    "end": "4430480"
  },
  {
    "text": "problem uh but it bit us anyway basically uh when you try and read uh",
    "start": "4430480",
    "end": "4435960"
  },
  {
    "text": "into a kernel buffer um it the the read system call itself believes that you're",
    "start": "4435960",
    "end": "4441960"
  },
  {
    "text": "still executing on behalf of the user process and so it will interpret the uh pointer that you give it to the buffer",
    "start": "4441960",
    "end": "4447679"
  },
  {
    "text": "as a user land pointer uh unless you change your memory map uh and so it'll write it to some random part in user",
    "start": "4447679",
    "end": "4454440"
  },
  {
    "text": "probably corrupting the user process and not giving you what you wanted in your kernel land buffer um so make sure that",
    "start": "4454440",
    "end": "4459800"
  },
  {
    "text": "you change your memory map so that you're actually pointing at uh kernel space before you call the read system call to",
    "start": "4459800",
    "end": "4465760"
  },
  {
    "text": "try to read into a kernel buffer and uh it's probably almost unreadable but in the lower right window there there are",
    "start": "4465760",
    "end": "4471400"
  },
  {
    "text": "the two macros that we used to accomplish this um you basically save off um the old data segment um the value",
    "start": "4471400",
    "end": "4479639"
  },
  {
    "text": "of the data segment register scroll it up a little just hit return a few times get it higher",
    "start": "4479639",
    "end": "4487239"
  },
  {
    "text": "um and then um set the new one for kernel space and then",
    "start": "4488120",
    "end": "4494280"
  },
  {
    "text": "uh when you uh end your your km so just wrap anything that you want to operate",
    "start": "4494280",
    "end": "4499400"
  },
  {
    "text": "in kernel space with begin km and end km Works beautifully simply makes",
    "start": "4499400",
    "end": "4505639"
  },
  {
    "text": "sense uh we would be remiss if we did not mention that uh this is not a perfect approach to Kernel Integrity",
    "start": "4505639",
    "end": "4511679"
  },
  {
    "text": "it's the best one we could think of given the constraints that we had but there are other people that are out there that have been working on the same problem uh BSD secure levels is a good",
    "start": "4511679",
    "end": "4520280"
  },
  {
    "text": "uh way it prohibits rights to Dev km prohibits reading uh raw dis devices uh",
    "start": "4520280",
    "end": "4526080"
  },
  {
    "text": "after the secure level hits one you can't load new modules um there are a lot of modules that after they get",
    "start": "4526080",
    "end": "4531480"
  },
  {
    "text": "loaded any new modules that get loaded in after it have to be cryptographically signed um Linux secure module interface",
    "start": "4531480",
    "end": "4538040"
  },
  {
    "text": "is currently under development it's going to be a set of hooks that go into the Linux kernel which you can load",
    "start": "4538040",
    "end": "4543239"
  },
  {
    "text": "arbitrary mods in and one of those things that those mods could do is they could do cryptographic signature",
    "start": "4543239",
    "end": "4548719"
  },
  {
    "text": "checking they could uh disallow any new modules so it's not really an approach in and of itself is it is um a a set of",
    "start": "4548719",
    "end": "4556080"
  },
  {
    "text": "hooks for you putting in what kind of approach you want uh and it's a pretty interesting uh development um but most",
    "start": "4556080",
    "end": "4562920"
  },
  {
    "text": "of them are hard solutions they forbid tampering with the kernel Thou shalt not",
    "start": "4562920",
    "end": "4568719"
  },
  {
    "text": "and so you instantly know that they are installed you know that you're you can't tamper with the kernel at all um so a",
    "start": "4568719",
    "end": "4574679"
  },
  {
    "text": "soft approach while it opens you up gives you um stealth I mean it gives",
    "start": "4574679",
    "end": "4579800"
  },
  {
    "text": "you flexibility and it gives you uh capability to Vel intelligence that you wouldn't have gotten",
    "start": "4579800",
    "end": "4586880"
  },
  {
    "text": "otherwise that's all we've got uh so O'Reilly has given us this nice",
    "start": "4586920",
    "end": "4593239"
  },
  {
    "text": "t-shirt that we're supposed to give to someone so bring on the",
    "start": "4594520",
    "end": "4600320"
  },
  {
    "text": "questions Cricut chirping yes unfortunately our bosses are this",
    "start": "4602040",
    "end": "4610400"
  },
  {
    "text": "module while it is excellent can easily be turned into into a root kit uh and",
    "start": "4610400",
    "end": "4615800"
  },
  {
    "text": "our superiors are somewhat worried about the legal liability of potentially releasing root kable code upon the world",
    "start": "4615800",
    "end": "4622120"
  },
  {
    "text": "so while we are more than happy to talk with you about uh approaches and if you get stuck on bugs you know helping you",
    "start": "4622120",
    "end": "4628320"
  },
  {
    "text": "with that we can't actually give you code um but we can talk we can help you implement uh all kinds of interesting",
    "start": "4628320",
    "end": "4636560"
  },
  {
    "text": "things the module itself is not available and the module itself still has a couple of rough edges and I",
    "start": "4636560",
    "end": "4642320"
  },
  {
    "text": "wouldn't recommend for anyone there there may be some organizational things that we can work out that we'll have to",
    "start": "4642320",
    "end": "4647600"
  },
  {
    "text": "go through our legal department and yeah what do we recommend for",
    "start": "4647600",
    "end": "4655198"
  },
  {
    "text": "what um there's a couple of references in the presentation and uh hire a couple",
    "start": "4661400",
    "end": "4666560"
  },
  {
    "text": "of good security programmers way in the",
    "start": "4666560",
    "end": "4672000"
  },
  {
    "text": "back",
    "start": "4672000",
    "end": "4675000"
  },
  {
    "text": "every time we open a file or yeah we are every time we look at a",
    "start": "4678920",
    "end": "4684360"
  },
  {
    "text": "car no no not a file descriptor whenever we look at a Carstar path we call Stat",
    "start": "4690560",
    "end": "4696040"
  },
  {
    "text": "to get the dev I",
    "start": "4696040",
    "end": "4699159"
  },
  {
    "text": "Noe",
    "start": "4701920",
    "end": "4704920"
  },
  {
    "text": "um yeah you could delve into the you you could delve into the file system um and",
    "start": "4707400",
    "end": "4713080"
  },
  {
    "text": "and circumvent some of it uh system calls under Linux are pretty lightweight and um we didn't want to delve too low",
    "start": "4713080",
    "end": "4721679"
  },
  {
    "text": "into the kernel um calling stat is portable just about any Unix system will do it for you um if they change the",
    "start": "4721679",
    "end": "4728760"
  },
  {
    "text": "ext2fs implementation the function that we rely on is different calling uh conventions or something and all of a",
    "start": "4728760",
    "end": "4735040"
  },
  {
    "text": "sudden our module doesn't work anymore whereas stats been there it's going to be there it's going to keep being",
    "start": "4735040",
    "end": "4740639"
  },
  {
    "text": "there",
    "start": "4740639",
    "end": "4743639"
  },
  {
    "text": "yes I'm",
    "start": "4746000",
    "end": "4749199"
  },
  {
    "text": "sorry yeah yeah we hide the entry in",
    "start": "4751400",
    "end": "4756080"
  },
  {
    "text": "SL h k stat minus P Yes actually uh we have",
    "start": "4756520",
    "end": "4763480"
  },
  {
    "text": "not screwed with that part of Dev km yet so k-p would detect it at this",
    "start": "4763480",
    "end": "4769120"
  },
  {
    "text": "point",
    "start": "4769120",
    "end": "4772120"
  },
  {
    "text": "H I'm sorry I'm sorry I couldn't hear you come on",
    "start": "4780920",
    "end": "4786440"
  },
  {
    "text": "down uh",
    "start": "4788400",
    "end": "4794840"
  },
  {
    "text": "yes yes and that would be the next step the the question was does k-p detect uh",
    "start": "4796000",
    "end": "4801120"
  },
  {
    "text": "hidden processes the answer is right now yes it would um however we mess with Dev",
    "start": "4801120",
    "end": "4806600"
  },
  {
    "text": "km on k-s could we extend that idea to mess with k-p and the answer is",
    "start": "4806600",
    "end": "4812120"
  },
  {
    "text": "absolutely yes we could uh and that would be an excellent way to do it and that's probably the way we would implement it we just we're actively",
    "start": "4812120",
    "end": "4818679"
  },
  {
    "text": "looking into things like that I mean we've got the whole framework in place and now it's easy to duplicate and",
    "start": "4818679",
    "end": "4824400"
  },
  {
    "text": "cookie cutter things and um you know extend that to other colel data",
    "start": "4824400",
    "end": "4829760"
  },
  {
    "text": "structures still under development",
    "start": "4829760",
    "end": "4833760"
  },
  {
    "text": "yes um that passed my mind um in part I implemented this because I was",
    "start": "4837520",
    "end": "4844080"
  },
  {
    "text": "lazy um while all UDP packets are eventually",
    "start": "4844080",
    "end": "4849920"
  },
  {
    "text": "emitted by the kernel it kind of bothers me to have the kernel generating Network traffic directly um this relies on",
    "start": "4849920",
    "end": "4857480"
  },
  {
    "text": "standard userland uh facilities that people are familiar with I mean you just have a magic slpr node and you get log",
    "start": "4857480",
    "end": "4866120"
  },
  {
    "text": "messages on it and then from there you can do whatever you want with it if you want to throw it into a hidden file on the local dis because it's your laptop",
    "start": "4866120",
    "end": "4872800"
  },
  {
    "text": "and you travel uh you can do that if you want to point kog D addit and sis log it out to a remote host that's great if you",
    "start": "4872800",
    "end": "4880040"
  },
  {
    "text": "have uh an abhor for Solaris Cy log d as some of us do and you decide that NG Cy",
    "start": "4880040",
    "end": "4886960"
  },
  {
    "text": "log is the way to go you can point this at NG Cy log and um you know use different CIS log clients or something",
    "start": "4886960",
    "end": "4893679"
  },
  {
    "text": "else entirely um one of the things that uh",
    "start": "4893679",
    "end": "4898920"
  },
  {
    "text": "has been kicked around occasionally is using radius um for authentication and accounting on our machines and um if",
    "start": "4898920",
    "end": "4905960"
  },
  {
    "text": "that ever did come to fruition we could just point a radius accounting demon at this file and it would log through our",
    "start": "4905960",
    "end": "4912440"
  },
  {
    "text": "trip AA system",
    "start": "4912440",
    "end": "4917960"
  },
  {
    "text": "yes uh no that that's a dead giveaway um we we don't mess with the file system at",
    "start": "4931480",
    "end": "4937960"
  },
  {
    "text": "that level and for that reason and the lseek problem and all of that it's probably better to implement such um",
    "start": "4937960",
    "end": "4944880"
  },
  {
    "text": "file mangling in the file system layer uh however all of our uh files that we currently mess with",
    "start": "4944880",
    "end": "4952239"
  },
  {
    "text": "are in slpr slpr isn't a file system it's it's a reflection of Kernel data",
    "start": "4952239",
    "end": "4957480"
  },
  {
    "text": "structures or Dev um and the way slpr works is you register a proc node and",
    "start": "4957480",
    "end": "4965639"
  },
  {
    "text": "you specify there's an array of function pointers and you specify when the user opens this run this function when the",
    "start": "4965639",
    "end": "4971400"
  },
  {
    "text": "user reads from it run this function when the user writes to it run this function and um the size is reported is",
    "start": "4971400",
    "end": "4977880"
  },
  {
    "text": "zero so there's no check on it there's no way you can verify so it's a problem it's a hard",
    "start": "4977880",
    "end": "4984719"
  },
  {
    "text": "problem and luckily it's a problem we didn't have to",
    "start": "4984719",
    "end": "4988600"
  },
  {
    "text": "address",
    "start": "4989760",
    "end": "4992760"
  },
  {
    "text": "yes no the Le password password is if we ever were to distribute fnord we would",
    "start": "5000840",
    "end": "5006280"
  },
  {
    "text": "not distribute Elite password with it I mean we have a little function that generates",
    "start": "5006280",
    "end": "5012920"
  },
  {
    "text": "it uh no you would you would be leak to your module I would be leak to my module",
    "start": "5015960",
    "end": "5023400"
  },
  {
    "text": "and we would have a little war right actually you would have collisions because there can only be one proc SK",
    "start": "5023400",
    "end": "5029960"
  },
  {
    "text": "message so the second module that got loaded would fail to register the proc message um but each module could",
    "start": "5029960",
    "end": "5037000"
  },
  {
    "text": "separately hide different devices hide different files and to a user process",
    "start": "5037000",
    "end": "5042239"
  },
  {
    "text": "the the union of the two configurations is what would be visible right uh that that would be most unpleasant and a lot",
    "start": "5042239",
    "end": "5048199"
  },
  {
    "text": "of fun",
    "start": "5048199",
    "end": "5053159"
  },
  {
    "text": "yes um in in this scenario the second fnord qualifies as an ordinary plane Jane",
    "start": "5061360",
    "end": "5068040"
  },
  {
    "text": "Colonel mod rout kid as far as the first one is concerned it it would start screaming about system calls being",
    "start": "5068040",
    "end": "5073159"
  },
  {
    "text": "wrapped and addresses changing and people doing bad things and you know the",
    "start": "5073159",
    "end": "5079119"
  },
  {
    "text": "uh the systems administrators who are watching the the first one the valid one would see odd things",
    "start": "5079119",
    "end": "5085520"
  },
  {
    "text": "happening anyone else anyone well thank you all for",
    "start": "5088080",
    "end": "5095080"
  },
  {
    "text": "coming",
    "start": "5121280",
    "end": "5124280"
  }
]