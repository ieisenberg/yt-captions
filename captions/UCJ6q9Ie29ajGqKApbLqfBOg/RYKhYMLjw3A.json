[
  {
    "text": "[Music]",
    "start": "3010",
    "end": "9539"
  },
  {
    "text": "[Music]",
    "start": "18430",
    "end": "42719"
  },
  {
    "text": "a sink I think I have more bugs um presented um in the slides than the proceedings but uh you should be able to",
    "start": "78240",
    "end": "84600"
  },
  {
    "text": "follow it with the proceedings as well um so my presentation for today Colonel auditing and exploitation",
    "start": "84600",
    "end": "90920"
  },
  {
    "text": "um so there are three parts to this presentation um at the end of each part",
    "start": "90920",
    "end": "97680"
  },
  {
    "text": "will be questions and whatnot um the first part is colel auditing research um",
    "start": "97680",
    "end": "102720"
  },
  {
    "text": "the second part just a sample of exploitable bugs um and the third part will be um the exploitation of uh",
    "start": "102720",
    "end": "109520"
  },
  {
    "text": "various bugs um like I said uh questions at the end of each section but jump in",
    "start": "109520",
    "end": "115399"
  },
  {
    "text": "you know if you've got any questions uh in any part so so part one is colel",
    "start": "115399",
    "end": "121119"
  },
  {
    "text": "auditing research uh just an overview of uh the auditing work that I've done in the past",
    "start": "121119",
    "end": "127320"
  },
  {
    "text": "uh was uh this particular audit U manual audit um of the open source Kels um the",
    "start": "127320",
    "end": "135879"
  },
  {
    "text": "open source kernels in question being FreeBSD netbsd openbsd and Linux and the reason for these was uh primarily just",
    "start": "135879",
    "end": "143400"
  },
  {
    "text": "availability um you can download the sources so why not audit them um and the",
    "start": "143400",
    "end": "148800"
  },
  {
    "text": "auditing was for about months uh it was part-time uh not a full-time audit like",
    "start": "148800",
    "end": "154680"
  },
  {
    "text": "didn't spend all my day auditing Cod but when I had free time go ahead and audit some so it was July to September last",
    "start": "154680",
    "end": "160280"
  },
  {
    "text": "year um it seems you know slightly outdated I suppose but it's not really a lot of these uh a lot of things still",
    "start": "160280",
    "end": "167319"
  },
  {
    "text": "apply um there's even some zero day which I presented a couple months ago which still uh never got fixed uh lot of",
    "start": "167319",
    "end": "174640"
  },
  {
    "text": "interesting things to talk about um just to give a time frame of uh the auditing",
    "start": "174640",
    "end": "180560"
  },
  {
    "text": "that I did on each operating system uh netbsd was about bit under a week",
    "start": "180560",
    "end": "186560"
  },
  {
    "text": "FreeBSD also a bit under a week open BSD not too long and Linux was pretty much",
    "start": "186560",
    "end": "191680"
  },
  {
    "text": "the rest of my free time and the reason for this was um I use Linux a lot so I don't know I suppose I was a bit biased",
    "start": "191680",
    "end": "197480"
  },
  {
    "text": "and wanted to audit it more um so what PRI work has there been done on uh",
    "start": "197480",
    "end": "203120"
  },
  {
    "text": "Colonel Source in terms of auditing and vulnerabilities um Dawson angler um in",
    "start": "203120",
    "end": "208959"
  },
  {
    "text": "the past couple years has released some great papers uh with automated bug checking um like um the Stanford bug",
    "start": "208959",
    "end": "216439"
  },
  {
    "text": "Checker uh which it's commonly referred to uh the automated bug discovery that",
    "start": "216439",
    "end": "221840"
  },
  {
    "text": "dwson Eng worked on um it's been run against very so Source kernels and they'",
    "start": "221840",
    "end": "227400"
  },
  {
    "text": "found a large number of bugs actually um through automated",
    "start": "227400",
    "end": "232360"
  },
  {
    "text": "means just I was just getting some weird uh okay so uh the DS England's work um",
    "start": "232560",
    "end": "241040"
  },
  {
    "text": "found a lot of concurrency issues and synchronization issues so we're looking at things like uh double locks double",
    "start": "241040",
    "end": "246319"
  },
  {
    "text": "unlocks uh found a lot of those uh also did a lot of things on double frees as",
    "start": "246319",
    "end": "251360"
  },
  {
    "text": "well um found a lot of those um did find some barer over plays but um in my",
    "start": "251360",
    "end": "257079"
  },
  {
    "text": "opinion um the the most bugs that came out of the the sford bug Checker were in relation to concurrency um some all some",
    "start": "257079",
    "end": "265280"
  },
  {
    "text": "other PRI work as well is the Linux kernel auditing project it's got a question mark at the at the end of that",
    "start": "265280",
    "end": "270400"
  },
  {
    "text": "because you know as far as I can see um the Linux Colonel auditing project or lcap um really really didn't do anything",
    "start": "270400",
    "end": "277560"
  },
  {
    "text": "um I I don't see that you know it's you know the the Linux kernel has been really audited um I think lcap released",
    "start": "277560",
    "end": "284639"
  },
  {
    "text": "maybe two advisories um and the mailing list is about three you know not so many",
    "start": "284639",
    "end": "290360"
  },
  {
    "text": "comments and most of them seem to be saying you know let's audit the colel you know there isn't actually auditing",
    "start": "290360",
    "end": "295600"
  },
  {
    "text": "there it's just let's audit the Kel um so that's that's a bit that's a bit unusual I think um just some some notes",
    "start": "295600",
    "end": "302880"
  },
  {
    "text": "for the presentation um when I'm talking about bugs I'm I'm just really referring to vulnerabilities and security bugs um",
    "start": "302880",
    "end": "310280"
  },
  {
    "text": "I like the word bug for I don't want to say vulnerability for every single bug um so unless I say otherwise every bug",
    "start": "310280",
    "end": "317160"
  },
  {
    "text": "is in relation to security um after after three months uh at least 100 maybe",
    "start": "317160",
    "end": "324319"
  },
  {
    "text": "um up to 150 um bugs were patched um in various kernels across all colel um still a lot",
    "start": "324319",
    "end": "331759"
  },
  {
    "text": "of bugs in there um but you know see how it goes so one of the things I wanted to",
    "start": "331759",
    "end": "338039"
  },
  {
    "text": "talk about is you know there seems to be a lot of you know myths about you know the Kel and stuff it's um and you know",
    "start": "338039",
    "end": "345080"
  },
  {
    "text": "I've talked about this like colel security mythology um you know it seems that people think that kernels are",
    "start": "345080",
    "end": "350759"
  },
  {
    "text": "written by Security Experts and and programming guides and there are great programmers you know working on these kernels like there's no doubt about us",
    "start": "350759",
    "end": "357560"
  },
  {
    "text": "but we're looking at tens of millions of WS of code um you know the followup to to this to",
    "start": "357560",
    "end": "364000"
  },
  {
    "text": "this myth is you know therefore you know Colonels don't have simplistic security bugs you know they don't have security",
    "start": "364000",
    "end": "369240"
  },
  {
    "text": "bugs and if they do have security bugs they're just you know they're not simplistic um and I'll try to show like",
    "start": "369240",
    "end": "374720"
  },
  {
    "text": "evidence to that that contradicts you know these myths as as we go on uh",
    "start": "374720",
    "end": "379759"
  },
  {
    "text": "another myth which is just a follow up on the first one is that you know basically rewrited the first one that Colonels don't have you know simplistic",
    "start": "379759",
    "end": "386680"
  },
  {
    "text": "security bugs therefore you know only Security Experts programming gues can find them you know maybe you see",
    "start": "386680",
    "end": "392120"
  },
  {
    "text": "something in you know an advisory that says not even any advisories to be honest um you know something that says",
    "start": "392120",
    "end": "398400"
  },
  {
    "text": "you know you have to do this in a certain condition if you know all these things apply at once maybe you know it",
    "start": "398400",
    "end": "403960"
  },
  {
    "text": "will be vulnerable and it seems not to be the case there a lot of simple ways to exploit um",
    "start": "403960",
    "end": "409400"
  },
  {
    "text": "Colonels another myth this is the third and final myth that I'm going to talk about is you know if Colonels are buggy",
    "start": "409400",
    "end": "415919"
  },
  {
    "text": "they must be you know so difficult to exploit and you know therefore um you know exploitation is probably just",
    "start": "415919",
    "end": "422000"
  },
  {
    "text": "theoretical you know maybe you can do this and maybe it's possible but you know so many conditions are required to",
    "start": "422000",
    "end": "429360"
  },
  {
    "text": "to cause you know um exploitation and for me that doesn't seem to be the case from from from my experience um so I'm",
    "start": "429360",
    "end": "436720"
  },
  {
    "text": "basically putting forward some conjectures um at the start of the auditing um project let's say um you",
    "start": "436720",
    "end": "442479"
  },
  {
    "text": "know kernel code it's not special it's just another program a really big program but just another program um it's",
    "start": "442479",
    "end": "449080"
  },
  {
    "text": "written in a language with known problems it's you know all the open source cels are written in C um and C",
    "start": "449080",
    "end": "454720"
  },
  {
    "text": "has known problems that time and time again you're going to see you know buffer overflows um you're going to see integer overflows you're going to see a",
    "start": "454720",
    "end": "460840"
  },
  {
    "text": "lot of problems um if we look at kernel programmers too they're just people um",
    "start": "460840",
    "end": "466199"
  },
  {
    "text": "and sometimes they do make mistakes um you know it's it's sort of it's hard to say to someone you know 10 million lines",
    "start": "466199",
    "end": "473039"
  },
  {
    "text": "in a in a colonel are you sure 100% that you know that you didn't just o skip something or Overlook something while",
    "start": "473039",
    "end": "479039"
  },
  {
    "text": "writing it so the way I went about auditing um was that I'd only audit for simple classes",
    "start": "479039",
    "end": "485319"
  },
  {
    "text": "of bugs I wasn't looking for you know incredibly complicated attacks um if we",
    "start": "485319",
    "end": "491159"
  },
  {
    "text": "look back like in the past uh month or so two months I think um there was a",
    "start": "491159",
    "end": "496360"
  },
  {
    "text": "paper that was released about um hashing Collision attacks if we could um send",
    "start": "496360",
    "end": "502560"
  },
  {
    "text": "for example Linux if we could send a certain sequence of packets um these will all you know when they're hashed they'll all Collide and essentially um",
    "start": "502560",
    "end": "509759"
  },
  {
    "text": "um the complexity of a search would you know break down into a link list uh you",
    "start": "509759",
    "end": "515000"
  },
  {
    "text": "know a link list search in linear time and you know this was like you know this was an an attack here um you know I'm",
    "start": "515000",
    "end": "521440"
  },
  {
    "text": "not looking for such complicated attacks um looking for simple attacks that you know easy easy to find easy to gret for",
    "start": "521440",
    "end": "529000"
  },
  {
    "text": "um and incidentally with the hashing um uh collisions a while ago actually solid",
    "start": "529000",
    "end": "535360"
  },
  {
    "text": "designer um in one of the earlier fracks uh also talked about hashing collisions",
    "start": "535360",
    "end": "541360"
  },
  {
    "text": "um you know very briefly um but talked about um when writing scan log D um that",
    "start": "541360",
    "end": "546959"
  },
  {
    "text": "one possible attack on it and attack on all ids's was that if you construct certain sequences of you know of packets",
    "start": "546959",
    "end": "552760"
  },
  {
    "text": "or data then you'd have these hashing collisions and the complexity you know would would get really bad you know the",
    "start": "552760",
    "end": "559720"
  },
  {
    "text": "everything would be a worst case scenario um the the paper release in the past few months was was really good and",
    "start": "559720",
    "end": "565279"
  },
  {
    "text": "really um strong mathematically but but again I'm not going for attacks um as",
    "start": "565279",
    "end": "572160"
  },
  {
    "text": "with most audit buyers um you know as you start to audit you start to you know",
    "start": "572160",
    "end": "577360"
  },
  {
    "text": "see patterns or start to see you know classes of bugs that lead on to other bugs um and you start to generalize of",
    "start": "577360",
    "end": "583360"
  },
  {
    "text": "what might be another attack um or a class of attack um so if you look at",
    "start": "583360",
    "end": "588680"
  },
  {
    "text": "just um um some of the experience that um was attained I suppose um system you",
    "start": "588680",
    "end": "593959"
  },
  {
    "text": "know system calls and simple entry points the this is really what we you know what I'm grapping for you know",
    "start": "593959",
    "end": "599399"
  },
  {
    "text": "looking for entry points in the kernel which are easily controlled by userland System calls it you know the obvious one",
    "start": "599399",
    "end": "604680"
  },
  {
    "text": "um and in some ways possibly they're overused by people that um that are looking to audit the kernel",
    "start": "604680",
    "end": "612880"
  },
  {
    "text": "um um if we look at device drivers as well um basically um you know these are",
    "start": "614040",
    "end": "620640"
  },
  {
    "text": "by Design simple entry points into the kernel device drivers for Unix um you know everything is a file easy access to",
    "start": "620640",
    "end": "627160"
  },
  {
    "text": "the hardware through a file and some people I suppose would argue that you know you know the one of the downfalls",
    "start": "627160",
    "end": "633560"
  },
  {
    "text": "of Unix and you know um was I iacl are just so general purpose that you know",
    "start": "633560",
    "end": "639040"
  },
  {
    "text": "Swiss army knife they do everything under the sun um and it seems that you knowls tend to be a big problem um in",
    "start": "639040",
    "end": "647440"
  },
  {
    "text": "terms of the number of bugs um when implemented in device drivers device drivers in my opinion seem to be the",
    "start": "647440",
    "end": "652519"
  },
  {
    "text": "most buggy parts of the colel core kernel code seems pretty good um but the number of device drivers out there that",
    "start": "652519",
    "end": "659000"
  },
  {
    "text": "have are just amazing it's um so immediate results um since",
    "start": "659000",
    "end": "664800"
  },
  {
    "text": "started auditing um first bug uh found within hours um and this was free for",
    "start": "664800",
    "end": "671000"
  },
  {
    "text": "all the operating systems that um were audited um and it's arguable that uh the first bug is often the hardest to find",
    "start": "671000",
    "end": "678519"
  },
  {
    "text": "um but also uh must be taken into account that it was a targeted you know targeted Auto I was looking for specific",
    "start": "678519",
    "end": "685920"
  },
  {
    "text": "you know bugs I wasn't just starting at admit. C and and working downwards um so",
    "start": "685920",
    "end": "692600"
  },
  {
    "text": "some observations um there does seem to be uh you know daring degrees of uh",
    "start": "692600",
    "end": "697760"
  },
  {
    "text": "quality code quality and hence security bugs uh again core curle code seems to be pretty well written um device writers",
    "start": "697760",
    "end": "705040"
  },
  {
    "text": "um anyone can really submit in an device driver for a particular piece of Hardware um and you know you can't",
    "start": "705040",
    "end": "710959"
  },
  {
    "text": "really guarantee that U it seem it seems to be a lot of bugs on the device drivers um okay here's an interesting",
    "start": "710959",
    "end": "717800"
  },
  {
    "text": "thing um bugs you know they seem to exhibit this this um uh this sign of propagation in in the",
    "start": "717800",
    "end": "725160"
  },
  {
    "text": "sense that uh if you have a bit of source and um it becomes the reference source everyone uses this source as the",
    "start": "725160",
    "end": "730959"
  },
  {
    "text": "base source to how to write something and this reference source has a bug in it um this bug now seems to just you",
    "start": "730959",
    "end": "736839"
  },
  {
    "text": "know Verge into other parts of the sources um and clustering also it's um",
    "start": "736839",
    "end": "743240"
  },
  {
    "text": "in the sense that it seems that once you find uh bugs in a particular area of the source um more bugs are close to that",
    "start": "743240",
    "end": "749800"
  },
  {
    "text": "area um and this is really like um just supporting uh the work of dorson egler",
    "start": "749800",
    "end": "755839"
  },
  {
    "text": "and automated bug checking um and that's why put the aster there because there's another slide shortly after um there are",
    "start": "755839",
    "end": "764360"
  },
  {
    "text": "identical bugs in all platforms some of the some of the code is uh basically the same in every platform and some of the",
    "start": "764360",
    "end": "770000"
  },
  {
    "text": "bugs are exactly the same um and I I should have slides to show this as well",
    "start": "770000",
    "end": "775079"
  },
  {
    "text": "I do have some bias in my auditing of course um because manual auditing is inherently biased you know maybe I",
    "start": "775079",
    "end": "781720"
  },
  {
    "text": "believe that you know the core kernel code is secure that's why I'm not finding any bugs there maybe I think it's just device drivers um that a buggy",
    "start": "781720",
    "end": "788240"
  },
  {
    "text": "and you know it's a self-fulfilling prophecy I can't you know definitively say um you know that this is true I can",
    "start": "788240",
    "end": "793519"
  },
  {
    "text": "just show evidence to to support you know what I'm trying to put forward um dwson engler's work on the other hand is",
    "start": "793519",
    "end": "799959"
  },
  {
    "text": "automated um and avoids the bias of manual auditing um so here are some",
    "start": "799959",
    "end": "806320"
  },
  {
    "text": "observations uh this is going back back to the there are there are the same bugs",
    "start": "806320",
    "end": "811639"
  },
  {
    "text": "in all platforms um so what we have here is netbsd and open BSD um and I should",
    "start": "811639",
    "end": "818839"
  },
  {
    "text": "actually say that um I haven't included enough information here to actually to",
    "start": "818839",
    "end": "824279"
  },
  {
    "text": "to show people that this is exploited one it was actually um Norman uh over there came up to me earlier today and uh",
    "start": "824279",
    "end": "831040"
  },
  {
    "text": "and said where is where is the V here um so if we look at uh start and num start",
    "start": "831040",
    "end": "837040"
  },
  {
    "text": "and num are both uh signed uh integers um so the basic idea is that we make",
    "start": "837040",
    "end": "843120"
  },
  {
    "text": "start plus n um a value that wraps around into the negatives um later on",
    "start": "843120",
    "end": "850600"
  },
  {
    "text": "after this code we have a buffer overflow um that uses uh the result of a",
    "start": "850600",
    "end": "856199"
  },
  {
    "text": "you know num start um it's a bad a bad example because I don't show the buff overflow here um but integer overflows",
    "start": "856199",
    "end": "862639"
  },
  {
    "text": "you know pretty much everywhere um and we've got plenty more to show um so I'll show some evidence in",
    "start": "862639",
    "end": "868519"
  },
  {
    "text": "just cont to the colel that I presented um colel aren't written by gods they are written by people extremely talented",
    "start": "868519",
    "end": "875120"
  },
  {
    "text": "people um in in many cases but you know still people um initial bugs are found in all hours um found in hours by by in",
    "start": "875120",
    "end": "882680"
  },
  {
    "text": "all cels um there should be in all Colonels I suppose um bugs were found in large",
    "start": "882680",
    "end": "889079"
  },
  {
    "text": "quantities um 10 to 30 per day was um open BC was only you know a couple days",
    "start": "889079",
    "end": "894680"
  },
  {
    "text": "of auditing and there were you know you a reasonable amount of bugs were found in that um like for netbsd and some if",
    "start": "894680",
    "end": "901000"
  },
  {
    "text": "you do go looking for for bugs on the you will find them um uh 2 2.6 uh test",
    "start": "901000",
    "end": "908040"
  },
  {
    "text": "um kernels I do believe um do have some um some quite you know similar bugs to the 2.4 kernels and the 2.2 kernels um",
    "start": "908040",
    "end": "916120"
  },
  {
    "text": "there a lot of bugs that are still out there um now here's something interesting um in some parts of the code",
    "start": "916120",
    "end": "922279"
  },
  {
    "text": "we saw inline documentation uh that state of the code was Secure and in fact",
    "start": "922279",
    "end": "927560"
  },
  {
    "text": "um you know often wasn't I'll just show this um I don't think you have this in the proceedings but it's a pretty it's a",
    "start": "927560",
    "end": "934199"
  },
  {
    "text": "pretty funny comment um so basically this guy has written a device driver um",
    "start": "934199",
    "end": "939360"
  },
  {
    "text": "I think it's in the video for Linux code um so basically it says first things first um make sure we don't copy more",
    "start": "939360",
    "end": "946880"
  },
  {
    "text": "than we had even if the application wants more and then he states that would be a big security embarrassment and then",
    "start": "946880",
    "end": "952600"
  },
  {
    "text": "the very next line he's got an integer overflow um okay so it's two lines later",
    "start": "952600",
    "end": "961920"
  },
  {
    "text": "um it's exploitable with a copy to user um and we can copy um pretty much",
    "start": "961920",
    "end": "967720"
  },
  {
    "text": "arbitrary kernel memory back into user land um count is under our control um in",
    "start": "967720",
    "end": "973880"
  },
  {
    "text": "this example um likewise um we have partial control over Secore index um and",
    "start": "973880",
    "end": "981040"
  },
  {
    "text": "then in our copy to user providing we make count large enough and we get a wrap around in the first uh comparison",
    "start": "981040",
    "end": "987800"
  },
  {
    "text": "um we can copy a very very large amount of memory copy it to userland um yeah so",
    "start": "987800",
    "end": "994800"
  },
  {
    "text": "Linux 2.2.6 has a has another funny comment um this comment says this routine does error checking to make sure",
    "start": "994800",
    "end": "1002000"
  },
  {
    "text": "that all memory accesses are within bounds um and in fact we there's actually multiple problems with this",
    "start": "1002000",
    "end": "1008160"
  },
  {
    "text": "code um buff size is a signed integer um so initially we just have to make buff",
    "start": "1008160",
    "end": "1014160"
  },
  {
    "text": "size negative uh uh get user rent on the top if you guys can see that um actually",
    "start": "1014160",
    "end": "1021240"
  },
  {
    "text": "copies uh from userland um a value into buff Sid so we control buff sides and we can make it a",
    "start": "1021240",
    "end": "1027918"
  },
  {
    "text": "negative um pass the next test um in the K we have um energ overflows anyway um",
    "start": "1027919",
    "end": "1035000"
  },
  {
    "text": "and then down below we have um a buff overflow so multiple problems with this even though the comment is you know to",
    "start": "1035000",
    "end": "1041959"
  },
  {
    "text": "make sure that all memory access is within within bounds um so I just want to okay I want",
    "start": "1041959",
    "end": "1048558"
  },
  {
    "text": "to show evidence in contradiction to that you know there aren't any simple uh curtle bugs um you know almost never you",
    "start": "1048559",
    "end": "1055880"
  },
  {
    "text": "know was I required to do like intensive Cod tracking um grepping for bugs grepping for likely places to exploit um",
    "start": "1055880",
    "end": "1062840"
  },
  {
    "text": "you know found a lot of found a lot of things um very close to it you know grp for a you know copy to user copy from",
    "start": "1062840",
    "end": "1069520"
  },
  {
    "text": "user copy and copy out you know right above there look for something that you know might be buggy and and hence",
    "start": "1069520",
    "end": "1075080"
  },
  {
    "text": "probably exploitable um and in some cases no input validation at all um even",
    "start": "1075080",
    "end": "1081200"
  },
  {
    "text": "inline doation shows thator code you know exists in many places um so this is",
    "start": "1081200",
    "end": "1088400"
  },
  {
    "text": "uh ibcs 2or stat. c um basically uh we're doing a copy out at the bottom uh",
    "start": "1088400",
    "end": "1095440"
  },
  {
    "text": "this is a this actually this code applies to all all the open source Kels it's similar pretty much in every one uh",
    "start": "1095440",
    "end": "1103520"
  },
  {
    "text": "we do a copy out with of Len bites and Len has just no input validation at all",
    "start": "1103520",
    "end": "1109600"
  },
  {
    "text": "you can put anything you want for in and copy arbitrary memory back to user space",
    "start": "1109600",
    "end": "1115919"
  },
  {
    "text": "um we have a another case where um this looks like to be netbsd or open bstd um",
    "start": "1115919",
    "end": "1122679"
  },
  {
    "text": "some of the driver share bugs and I should have I should have put which OS they really all apply to but it's net",
    "start": "1122679",
    "end": "1129440"
  },
  {
    "text": "BSD open BSD here um if we look at count we do a copy out with count um count",
    "start": "1129440",
    "end": "1136520"
  },
  {
    "text": "comes this copy out is called basically from ictl um there's no input validation on",
    "start": "1136520",
    "end": "1142600"
  },
  {
    "text": "count at all we can copy arbitrary memory again um we do have to be on the console which uh you know that's uh it's",
    "start": "1142600",
    "end": "1150720"
  },
  {
    "text": "not too bad at that point but essentially there's just no no input validation um this is a good bug in",
    "start": "1150720",
    "end": "1158240"
  },
  {
    "text": "Linux it's actually well a bad bug I suppose um I actually released this bug",
    "start": "1158240",
    "end": "1163320"
  },
  {
    "text": "and an exploit for it um a few months ago at roxco um it's it's never been fix",
    "start": "1163320",
    "end": "1169039"
  },
  {
    "text": "sense it's never been fixed um we have XXX untested",
    "start": "1169039",
    "end": "1174799"
  },
  {
    "text": "um we have um and basically uh the code below cannot possibly work the arguments",
    "start": "1174799",
    "end": "1181000"
  },
  {
    "text": "are wrong um it should Panic the colonel if this code ever gets called um I",
    "start": "1181000",
    "end": "1186360"
  },
  {
    "text": "suppose it's okay just before I you know it sounds like I'm really bagging the colonels here um but in general they you",
    "start": "1186360",
    "end": "1193600"
  },
  {
    "text": "know they're pretty they're pretty good I think and you know vendor once was excellent um so many bugs were fixed um",
    "start": "1193600",
    "end": "1200559"
  },
  {
    "text": "and really if we think that other code doesn't have problems um you know very naive as well um so it's I'm showing",
    "start": "1200559",
    "end": "1207799"
  },
  {
    "text": "some examples here that you know there are you know such simple bugs um as there are you know in many you know much",
    "start": "1207799",
    "end": "1214200"
  },
  {
    "text": "software out there um so I just I just wanted to say that before before going",
    "start": "1214200",
    "end": "1219640"
  },
  {
    "text": "too much into into bagging you know any kernels because I I do think the open sources are pretty good um so some more",
    "start": "1219640",
    "end": "1227919"
  },
  {
    "text": "evidence in contad to the kernel mythology um you know if kernels a",
    "start": "1227919",
    "end": "1233240"
  },
  {
    "text": "buggy they they are sometimes reasonably simple to exploit um to read arbitrary",
    "start": "1233240",
    "end": "1239679"
  },
  {
    "text": "memory from uh the procfs using the procfs actually um in Linux 2.2 and 2",
    "start": "1239679",
    "end": "1245200"
  },
  {
    "text": "early 2.4 well most of the 2.4s actually um 38 lines of c and it's 100% reliable",
    "start": "1245200",
    "end": "1251720"
  },
  {
    "text": "um likewise for FreeBSD accept uh system call which an advisory was released last year um 37 lines of c and 100% reliable",
    "start": "1251720",
    "end": "1259480"
  },
  {
    "text": "also um incidentally um the Linux people do have the exploit for the procfs code",
    "start": "1259480",
    "end": "1264880"
  },
  {
    "text": "um I did send it to them um and I also did send the freeb people the um accept",
    "start": "1264880",
    "end": "1271240"
  },
  {
    "text": "um exploit as well and I'll actually show the accept um exploit later on in the exploitation part",
    "start": "1271240",
    "end": "1278200"
  },
  {
    "text": "um okay stack overflows um in Linux for example they don't require any offsets",
    "start": "1278200",
    "end": "1283840"
  },
  {
    "text": "uh colel stack Overflow does not require offsets um you know it's pretty Rel you",
    "start": "1283840",
    "end": "1289039"
  },
  {
    "text": "know uh I'll show some Shell Code later on and the only assumption is that the return address that we're uh that we're",
    "start": "1289039",
    "end": "1295120"
  },
  {
    "text": "writing overwriting on the stack is word align and that's a pretty good assumption GCC will word align um return",
    "start": "1295120",
    "end": "1301520"
  },
  {
    "text": "addresses um we control user L completely we control all offsets in usand and addresses in usand pretty much",
    "start": "1301520",
    "end": "1307840"
  },
  {
    "text": "so you know there isn't anything to Brute Force you know very reliable um so",
    "start": "1307840",
    "end": "1313760"
  },
  {
    "text": "attack vectors um you know it's back to if there's more code running and more code accessible um you're probably going",
    "start": "1313760",
    "end": "1320520"
  },
  {
    "text": "to be you you're going to have more exposure um so okay don't run you know",
    "start": "1320520",
    "end": "1328200"
  },
  {
    "text": "bloated generic kernels uh recompile your kernel don't you know don't compile uh support for any hardware you're not",
    "start": "1328200",
    "end": "1334039"
  },
  {
    "text": "using um if you have device you know you know compatibility with a you know a",
    "start": "1334039",
    "end": "1339120"
  },
  {
    "text": "million devices possibly one of those devices might be the software for it might be exploitable um and it's all",
    "start": "1339120",
    "end": "1346279"
  },
  {
    "text": "back to that you know entry three points that user L can control you know these are vectors of exploitation um so I've",
    "start": "1346279",
    "end": "1353360"
  },
  {
    "text": "got some examples device drivers system calls file systems uh for example with file systems uh with the proc FS bugs uh",
    "start": "1353360",
    "end": "1360919"
  },
  {
    "text": "that were in Linux um if you seek to something like um if you open a file in uh the Pro File system that's you know",
    "start": "1360919",
    "end": "1367000"
  },
  {
    "text": "that's readable and many files are you could do something like seek to around 4 gig just below 32 bits this is for um",
    "start": "1367000",
    "end": "1373960"
  },
  {
    "text": "i386 specifically for 32 bits but it's quite generic um and then if you say read for example uh something uh with",
    "start": "1373960",
    "end": "1381559"
  },
  {
    "text": "account that when added to the file pointer will cause an integer overflow and at that point many things are become",
    "start": "1381559",
    "end": "1388039"
  },
  {
    "text": "explo one turns out that um such an attack was uh um quite generic against a number of files in the procs for",
    "start": "1388039",
    "end": "1395600"
  },
  {
    "text": "lin um the vendor response um vendor response was really excellent to be honest",
    "start": "1395600",
    "end": "1401880"
  },
  {
    "text": "um um all contact points responded extremely fast um yeah theor did respond",
    "start": "1401880",
    "end": "1409520"
  },
  {
    "text": "in under three minutes um I sent an email um with about a list of 10 to 15",
    "start": "1409520",
    "end": "1414799"
  },
  {
    "text": "bugs um I turned around to having a conversation turned back uh and received",
    "start": "1414799",
    "end": "1420400"
  },
  {
    "text": "an email from uh uh from Theo uh with responses to uh to those buds um Alan",
    "start": "1420400",
    "end": "1426360"
  },
  {
    "text": "Cox I think I put in the proceedings two hours I do have copies of of you know of all these emails and and massive lists",
    "start": "1426360",
    "end": "1432880"
  },
  {
    "text": "of um you know bugs that were sending alen Cox was you know extremely good responded back um you in a couple hours",
    "start": "1432880",
    "end": "1440880"
  },
  {
    "text": "um with statuses on all these bugs initially I sent um a list of bugs for 2.2.6 Cel and the current at the time",
    "start": "1440880",
    "end": "1447960"
  },
  {
    "text": "was something like 2.4.8 I think um so alen Cox could go through all these bugs in 2.2.6 say um",
    "start": "1447960",
    "end": "1455960"
  },
  {
    "text": "yes this has been fixed at this point in time you know this one looks you know this one is valid this one doesn't look valid um you know did include a few",
    "start": "1455960",
    "end": "1462600"
  },
  {
    "text": "false positives with my um with my auditing um and I thought that was a fantastic response by only Cox um um so",
    "start": "1462600",
    "end": "1469960"
  },
  {
    "text": "even replied that solid designer had fixed some get so op and set so op bugs back in you know back in early later 2.2",
    "start": "1469960",
    "end": "1476600"
  },
  {
    "text": "actually um you know from from a year or two ago um so that was exceptionally",
    "start": "1476600",
    "end": "1482399"
  },
  {
    "text": "good I thought um I am a bit biased though because uh you know I really do",
    "start": "1482399",
    "end": "1487480"
  },
  {
    "text": "believe in open source I do think the vendor response was extremely good in this case but know I am a bit biased and",
    "start": "1487480",
    "end": "1492760"
  },
  {
    "text": "I suppose it's arguable that um you know I wasn't I was emailing uh developers",
    "start": "1492760",
    "end": "1497960"
  },
  {
    "text": "directly not going through any um super official contact points um and you know",
    "start": "1497960",
    "end": "1503760"
  },
  {
    "text": "they responded back immediately um discussing code okay A bit more bias um you know",
    "start": "1503760",
    "end": "1511039"
  },
  {
    "text": "bad bad joke but you know a lot of hacks in the Linux kernel yeah okay it was a bad joke",
    "start": "1511039",
    "end": "1517640"
  },
  {
    "text": "okay so there's 106 106 uh references to the word hack in in the credit section",
    "start": "1517640",
    "end": "1523919"
  },
  {
    "text": "um but uh you know they they like to use this um this this ter hacks on on this",
    "start": "1523919",
    "end": "1529279"
  },
  {
    "text": "part of the code hacks on that part of the code so it's pretty funny though um",
    "start": "1529279",
    "end": "1535080"
  },
  {
    "text": "just to talk about Linux a bit more Alan Cox was the first person I contacted um he remained personally involved and",
    "start": "1535080",
    "end": "1541799"
  },
  {
    "text": "really responsible you know for the entire duration um sending a lot of stuff and would you know always respond",
    "start": "1541799",
    "end": "1547640"
  },
  {
    "text": "you know immediately um you know would always be you know up for to argue over bugs and say I you know I I don't think",
    "start": "1547640",
    "end": "1554279"
  },
  {
    "text": "that's exploitable you know I don't think you know that's valid um and you know you know many times we like you",
    "start": "1554279",
    "end": "1559840"
  },
  {
    "text": "know totally right just you know ignore that um and alen Cox did patch the",
    "start": "1559840",
    "end": "1565520"
  },
  {
    "text": "majority of uh software he did attribute me uh with some small uh with patches in the change logs um you know for things",
    "start": "1565520",
    "end": "1572440"
  },
  {
    "text": "like uh one or two line changes just uh doing U uh checks on various signs or",
    "start": "1572440",
    "end": "1578600"
  },
  {
    "text": "various overflows would attribute me to that but um ultimately he did uh do all the uh um pushes back into the",
    "start": "1578600",
    "end": "1585559"
  },
  {
    "text": "mainstream Cur and actual writing of the code there Sol it is ER was responsible for the 2.2 kernels um he got involved a",
    "start": "1585559",
    "end": "1592279"
  },
  {
    "text": "bit bit later on after initial contact with alen Cox um so actual solid designer was",
    "start": "1592279",
    "end": "1597919"
  },
  {
    "text": "responsible um for their 2.2 uh kernel release uh the later one um that came",
    "start": "1597919",
    "end": "1604000"
  },
  {
    "text": "out I think um last year I can't remember the month but um after like x x",
    "start": "1604000",
    "end": "1610480"
  },
  {
    "text": "you know about a year or something of not releasing 2.2 um solid designer did backp put pretty much all the 2.4 bugs",
    "start": "1610480",
    "end": "1616240"
  },
  {
    "text": "and everything that was applicable introduced other fixes as well Dave Miller also helped out later on um did",
    "start": "1616240",
    "end": "1623080"
  },
  {
    "text": "uh initially worked primarily on the spark stuff um does most of The Spar stuff and and Outlet code as well um it",
    "start": "1623080",
    "end": "1629919"
  },
  {
    "text": "also helped generically as well um in a number of things so in my opinion I",
    "start": "1629919",
    "end": "1635200"
  },
  {
    "text": "think Linux was successful um red had actually released an advisory uh last",
    "start": "1635200",
    "end": "1641240"
  },
  {
    "text": "last year um and they you know they're actually mentioning the dmca and saying",
    "start": "1641240",
    "end": "1646360"
  },
  {
    "text": "things like well we can't really say vulnerabilities were fixed and we can't show you the code because of dmca and if",
    "start": "1646360",
    "end": "1652039"
  },
  {
    "text": "you go to this you know website which is outside the US and you can see the patches that went in um but ultimately I",
    "start": "1652039",
    "end": "1659039"
  },
  {
    "text": "do think red had um and pretty much all the Linux vends now um yeah have been totally successful they do regularly",
    "start": "1659039",
    "end": "1664760"
  },
  {
    "text": "release kernel advisories now um and in my opinion that was probably attributed to the to the work we did uh last year",
    "start": "1664760",
    "end": "1672399"
  },
  {
    "text": "um um ironically the the the Linux audit was probably the most complete um",
    "start": "1672399",
    "end": "1678880"
  },
  {
    "text": "um there was code in there that you know obviously had never been looked at before and you know it's ironic considering that you know the Linux Cal",
    "start": "1678880",
    "end": "1684399"
  },
  {
    "text": "auditing project was there but it does seem to have been the most complete even even even if just for sheer number of",
    "start": "1684399",
    "end": "1690080"
  },
  {
    "text": "lines that we looked at or gried at least um FreeBSD has a more formalized",
    "start": "1690080",
    "end": "1695480"
  },
  {
    "text": "uh process uh with uh patching software and uh security problems uh as a",
    "start": "1695480",
    "end": "1701720"
  },
  {
    "text": "security officer contact Point uh dialogue slightly longer to establish uh it's very effective uh once you know",
    "start": "1701720",
    "end": "1707720"
  },
  {
    "text": "once up and running um I'm talking about address standardization issues here in this slide um and what I'm referring to",
    "start": "1707720",
    "end": "1714679"
  },
  {
    "text": "here is that there was one particular bit of code um with the except um uh",
    "start": "1714679",
    "end": "1720200"
  },
  {
    "text": "over overflow and that basically the from length in the except system core um",
    "start": "1720200",
    "end": "1726279"
  },
  {
    "text": "was sock address um sock lore te and basically this was a uh a signed value",
    "start": "1726279",
    "end": "1733279"
  },
  {
    "text": "in the kernel um and really why would it be signed uh you know this was a you",
    "start": "1733279",
    "end": "1738360"
  },
  {
    "text": "considerable issue um they did change it to be unsign Linux with the get soop and set soop um kept their soore T soop lore",
    "start": "1738360",
    "end": "1747279"
  },
  {
    "text": "T sorry um as a sign and you know that's in my opinion um you know just making",
    "start": "1747279",
    "end": "1754600"
  },
  {
    "text": "things unsigned um when they have to you know when they when they are going to be unsigned solves a lot of issues um you",
    "start": "1754600",
    "end": "1761120"
  },
  {
    "text": "know it's unfortunate but you know it seems to be the case a lot of a lot of sign problems you know in a lot of code",
    "start": "1761120",
    "end": "1767039"
  },
  {
    "text": "um so making things sign you know is is actually useful um was FreeBSD a success",
    "start": "1767039",
    "end": "1772960"
  },
  {
    "text": "in terms of you know auditing I I don't know um nothing really changed with FreeBSD um they did release an advisory",
    "start": "1772960",
    "end": "1779960"
  },
  {
    "text": "uh for the the accept thing um and at the time I was working this fil assessment company um coworker came up",
    "start": "1779960",
    "end": "1786640"
  },
  {
    "text": "to me and said you know I'm here to I'm going to implement your vulnerability today I'm like you know what are you talking about what vulnerability you",
    "start": "1786640",
    "end": "1792919"
  },
  {
    "text": "talking about here and he's like um FreeBSD have released an advisory like oh okay um so that was that was pretty",
    "start": "1792919",
    "end": "1799600"
  },
  {
    "text": "unusual I thought I I didn't ask them to to release anything there but you know they did release it U which was you know",
    "start": "1799600",
    "end": "1805519"
  },
  {
    "text": "I think pretty good of FreeBSD um the reason for this Square on my slide is because this is open office",
    "start": "1805519",
    "end": "1813559"
  },
  {
    "text": "and it's a powerport import and the smiley face didn't didn't go across because it doesn't have the",
    "start": "1813559",
    "end": "1819279"
  },
  {
    "text": "fun um okay so netbsd uh the dialogue with them was wasn't lengthy but you know all issues were resolved um you",
    "start": "1819279",
    "end": "1826000"
  },
  {
    "text": "know after a small waiting period I was actually I sent them a list of uh list of bugs and was watching the change logs",
    "start": "1826000",
    "end": "1831120"
  },
  {
    "text": "to see you know how long it would take before they said yeah yeah we we we'll we'll put them in we'll fix all this and",
    "start": "1831120",
    "end": "1836320"
  },
  {
    "text": "I was just watching the change logs to see pretty much how many days it would take in it seemed that what happened was um you know one of the developers uh did",
    "start": "1836320",
    "end": "1843799"
  },
  {
    "text": "a bit of like personal QA then um you know ran it on his own box waited you",
    "start": "1843799",
    "end": "1848840"
  },
  {
    "text": "know bit under a week and then pushed it into like the unstable development version of the the mainline kernel and",
    "start": "1848840",
    "end": "1855159"
  },
  {
    "text": "that that seemed pretty good um the patches surprising enough there was some shared problems in the drivers between",
    "start": "1855159",
    "end": "1860440"
  },
  {
    "text": "netbsd and openbsd which isn't really surprising if we consider that um openbsd was initially a thought from",
    "start": "1860440",
    "end": "1867279"
  },
  {
    "text": "netbsd some of the drivers uh do share you know there are there are Shar bugs there um but the uh patches just",
    "start": "1867279",
    "end": "1873440"
  },
  {
    "text": "propagated you know very quickly from netbsd to openbsd um looking at the change logs for openbsd change logs from",
    "start": "1873440",
    "end": "1880840"
  },
  {
    "text": "netbsd um so openbsd um the you know probably",
    "start": "1880840",
    "end": "1886960"
  },
  {
    "text": "the quickest response um you know documented history I've never seen you know three minutes um to",
    "start": "1886960",
    "end": "1892720"
  },
  {
    "text": "you know to respond to these things um an open BC select advisory was released",
    "start": "1892720",
    "end": "1898880"
  },
  {
    "text": "um shortly after that actually um and I didn't actually audit or you know report",
    "start": "1898880",
    "end": "1904720"
  },
  {
    "text": "uh a select overflow um I did pass it a little bit but I wasn't like only",
    "start": "1904720",
    "end": "1910919"
  },
  {
    "text": "looking for simple bugs here um and I didn't want to follow the macro um so but it seems that like the",
    "start": "1910919",
    "end": "1917240"
  },
  {
    "text": "open BSC started you know doing you know auditing after that because Neils Pros uh released um an advisory for it you",
    "start": "1917240",
    "end": "1923919"
  },
  {
    "text": "know bit after that time that I sent them a list of Cs there um so this is sort of interesting",
    "start": "1923919",
    "end": "1930240"
  },
  {
    "text": "and I suppose it's a small a small go at at openbsd uh so if we look at the ibcs",
    "start": "1930240",
    "end": "1938000"
  },
  {
    "text": "code which I showed before which had no bounds checking U no um sanity cheing",
    "start": "1938000",
    "end": "1943600"
  },
  {
    "text": "input validation at all um it's actually regarded as a a possible integer over flow um so I'm not exactly sure um you",
    "start": "1943600",
    "end": "1952200"
  },
  {
    "text": "know where that comes in there's also another interesting some other interesting change logs um when they talk about um you know uh possible",
    "start": "1952200",
    "end": "1959440"
  },
  {
    "text": "integer overflow some of these are okay but have been changed for consistency um and you know they're all",
    "start": "1959440",
    "end": "1967480"
  },
  {
    "text": "exploitable um so the ibcs 2or stat. C code um Linux has fixed it openbsd has",
    "start": "1968240",
    "end": "1975360"
  },
  {
    "text": "fixed it netbsd have fixed it FreeBSD have not fixed it um I don't know why um",
    "start": "1975360",
    "end": "1980720"
  },
  {
    "text": "I really didn't you know push after sort of I didn't really push hard for that um",
    "start": "1980720",
    "end": "1985919"
  },
  {
    "text": "and it's it's still there's no input validation at all though um so today where are we in colel security um",
    "start": "1985919",
    "end": "1992399"
  },
  {
    "text": "auditing always results in vulnerabilities um it it always does um",
    "start": "1992399",
    "end": "1998200"
  },
  {
    "text": "and auditing insecurity you know really should be an ongoing process you can't just say that um you know audited once",
    "start": "1998200",
    "end": "2004279"
  },
  {
    "text": "hence you know secure indefinitely uh you really do have to ordered it you know on an ongoing basis um and there's",
    "start": "2004279",
    "end": "2012000"
  },
  {
    "text": "certainly you know a lot more bugs than I'll describe today and you know many ways of exploting a c all that you know",
    "start": "2012000",
    "end": "2017480"
  },
  {
    "text": "that I will describe today as well but you know this is just the tip of the iceberg in my opinion um so uh about four months ago",
    "start": "2017480",
    "end": "2026399"
  },
  {
    "text": "um released uh you know most of the you know the technical results lots of bugs lots of patches uh and I release uh some",
    "start": "2026399",
    "end": "2035360"
  },
  {
    "text": "an exploit for the cough binary for current Linux at the time and current Linux today also uh released",
    "start": "2035360",
    "end": "2044120"
  },
  {
    "text": "uh also showed the uh Ivy uh the stat. C code which just had a couple slides ago",
    "start": "2044120",
    "end": "2051158"
  },
  {
    "text": "um but you know they're still present today in in all you know in the colonels talked about um so you know it's a bit",
    "start": "2051159",
    "end": "2057839"
  },
  {
    "text": "of a bit of a question there you know does anyone read you know conference material besides us if you're not at the conference will it get fixed um so that",
    "start": "2057839",
    "end": "2067240"
  },
  {
    "text": "sort of is is the conclusion of my first part uh the first part of my presentation are there any",
    "start": "2067240",
    "end": "2073638"
  },
  {
    "text": "questions Y no uh that's a it's a really good",
    "start": "2073639",
    "end": "2079960"
  },
  {
    "text": "question um so um Dave asked me if uh",
    "start": "2079960",
    "end": "2085000"
  },
  {
    "text": "the the cough binary loader is default um on Linux no it is not default a lot",
    "start": "2085000",
    "end": "2090118"
  },
  {
    "text": "of the stuff that I'm presenting isn't default um like if we look at um there",
    "start": "2090119",
    "end": "2095800"
  },
  {
    "text": "are bugs in like uh like the fler has some ing overflows but um I have not",
    "start": "2095800",
    "end": "2101480"
  },
  {
    "text": "exploited or you know exploited anything um to any great extent and there are some problems that seem theoretical that",
    "start": "2101480",
    "end": "2108359"
  },
  {
    "text": "that should seek further investigation to see how they'll go um the a do out loader um has some integ overflows as",
    "start": "2108359",
    "end": "2115200"
  },
  {
    "text": "well that had actually a bug fixed in it uh last year as well um with you could",
    "start": "2115200",
    "end": "2121960"
  },
  {
    "text": "Escape our limits um due to various energ overflows there the a. out code actually has so many overflows but most",
    "start": "2121960",
    "end": "2129000"
  },
  {
    "text": "of them are just you know overflows and they don't do anything um I think like",
    "start": "2129000",
    "end": "2134440"
  },
  {
    "text": "um I've only looked at the Linux code for the the shell script passing like basically um when you uh try to um when",
    "start": "2134440",
    "end": "2142960"
  },
  {
    "text": "the colonel looks at a binary or shell script and it tries to pass the hash bag",
    "start": "2142960",
    "end": "2148320"
  },
  {
    "text": "um it actually does a lot of work because there's like there's wies space or a tabs um and it has to fit some",
    "start": "2148320",
    "end": "2153680"
  },
  {
    "text": "certain requirement before it can execute this shell script so I think maybe um in other in other systems it",
    "start": "2153680",
    "end": "2159880"
  },
  {
    "text": "might be exploited because you know it's it's always a bit scary when you know there's passing involved of you know of",
    "start": "2159880",
    "end": "2165319"
  },
  {
    "text": "weird stuff in the kernel okay so the next part of my",
    "start": "2165319",
    "end": "2172560"
  },
  {
    "text": "presentation is just a a sample of exploitable colel bugs um so I've got",
    "start": "2172560",
    "end": "2178680"
  },
  {
    "text": "actually um more on my slides than I do on the proceedings um but you know",
    "start": "2178680",
    "end": "2183920"
  },
  {
    "text": "there's some interesting ones in here um this was one that you know showed earlier um and this also isn't um by",
    "start": "2183920",
    "end": "2190800"
  },
  {
    "text": "defaultly open BSD it has nde user ldt um so it I talked about this a bit",
    "start": "2190800",
    "end": "2197920"
  },
  {
    "text": "before and I should have included more and it's the worst um presented bug that I've got here since it doesn't show all",
    "start": "2197920",
    "end": "2203480"
  },
  {
    "text": "the um the features that make it exploitable um start plus num can",
    "start": "2203480",
    "end": "2208599"
  },
  {
    "text": "overflow to get um sign conversion um so we can actually make that a negative UST",
    "start": "2208599",
    "end": "2213680"
  },
  {
    "text": "start plus uh plus n becomes a negative value which will be less than 81 to and later on in the code there will be a",
    "start": "2213680",
    "end": "2219720"
  },
  {
    "text": "buff R flow there um this one is this one is a a good um integer overflow",
    "start": "2219720",
    "end": "2226400"
  },
  {
    "text": "because this this one has occurred in a lot of drivers in openbsd and nbsd so we make a check um at the top can everyone",
    "start": "2226400",
    "end": "2233800"
  },
  {
    "text": "see that okay I'll seem so um we make a check",
    "start": "2233800",
    "end": "2239680"
  },
  {
    "text": "that you know if count if it's zero or um index is greater than or equal to 256 then you know we return but you know",
    "start": "2239680",
    "end": "2247520"
  },
  {
    "text": "index plus count um count is basically any large value at this point any number",
    "start": "2247520",
    "end": "2253079"
  },
  {
    "text": "not zero um so we can make count you know something like uint Max and make index one um make it one and then we'll",
    "start": "2253079",
    "end": "2259960"
  },
  {
    "text": "get an in overflow um at the highlighted line um later on we'll have a copy out",
    "start": "2259960",
    "end": "2266960"
  },
  {
    "text": "using count um which is our large value um and then we'll have",
    "start": "2266960",
    "end": "2272200"
  },
  {
    "text": "a um a memory disclosure um for the driver uh for the con general actually",
    "start": "2272200",
    "end": "2279040"
  },
  {
    "text": "um another one here um this one this one has another image overflow and it's it's",
    "start": "2279040",
    "end": "2284680"
  },
  {
    "text": "a good inage overflow because it shows like a common a common class of bugs that um people are you know allocating",
    "start": "2284680",
    "end": "2290800"
  },
  {
    "text": "memory using one expression and then later on they'll do a copy you know copy a buffer using another expression and it",
    "start": "2290800",
    "end": "2296319"
  },
  {
    "text": "seems that you know it always causes problems when people are using two different Expressions know when they want to do the same thing you know in",
    "start": "2296319",
    "end": "2302880"
  },
  {
    "text": "the first case we can get an integer overflow and produce a small value in the second case we can um we can use a",
    "start": "2302880",
    "end": "2309119"
  },
  {
    "text": "large you know we get a large value um it that this always causes problems in all code um as soon as you have like",
    "start": "2309119",
    "end": "2315920"
  },
  {
    "text": "checks using one expression and copies using another um you know it's a very likely place of uh",
    "start": "2315920",
    "end": "2323720"
  },
  {
    "text": "compromise um this one here we have a sign problem um we take the minimum",
    "start": "2323720",
    "end": "2329720"
  },
  {
    "text": "value of a cisal argument um and another value um and it turns out that length is",
    "start": "2329720",
    "end": "2337240"
  },
  {
    "text": "a is assigned value so we can make length um a negative and it will turn out to be the minimum um so we'll have a",
    "start": "2337240",
    "end": "2343960"
  },
  {
    "text": "negative value which turns into a large positive value uh in the buffer copy um",
    "start": "2343960",
    "end": "2349040"
  },
  {
    "text": "it will have another buffer overflow copying memory back into usan um this one here is",
    "start": "2349040",
    "end": "2355839"
  },
  {
    "text": "um is good in the sense because uh we have count time we have a times B um and",
    "start": "2355839",
    "end": "2363760"
  },
  {
    "text": "this we can get an into overflow to occur make it a small value and and then later on we'll do an iteration using one",
    "start": "2363760",
    "end": "2369560"
  },
  {
    "text": "of those values um which can considerably be very large um and in our first case we'll have a very small",
    "start": "2369560",
    "end": "2375520"
  },
  {
    "text": "result so we have you know inconsistencies in in in what they think is",
    "start": "2375520",
    "end": "2380599"
  },
  {
    "text": "happening the actual the bug here occurs of course um in in the loop itself since",
    "start": "2380599",
    "end": "2386079"
  },
  {
    "text": "uh count can be a very large and count times size of block info we can be you know can become an ing overflow there um",
    "start": "2386079",
    "end": "2392280"
  },
  {
    "text": "if we control uh count uh which we do alone might have",
    "start": "2392280",
    "end": "2399200"
  },
  {
    "text": "I think I've skipped some of that code there um okay so like a lot of these bugs I was uh just slightly modified",
    "start": "2399200",
    "end": "2406640"
  },
  {
    "text": "versions of uh um uh sources that I sent developers directly um but it's been",
    "start": "2406640",
    "end": "2412599"
  },
  {
    "text": "modified for for presentation today um this one again is uh very much",
    "start": "2412599",
    "end": "2419599"
  },
  {
    "text": "like the last one we have a CIS argument called Dev which is a sign integer um and then down below we have a comparison",
    "start": "2419599",
    "end": "2425880"
  },
  {
    "text": "that says um if this value of you know this value Dev is greater than you know host name Len um you know then bad",
    "start": "2425880",
    "end": "2433560"
  },
  {
    "text": "things happen but if we make you know Dev a negative value um then we can pass that check no problems and when we go to",
    "start": "2433560",
    "end": "2439640"
  },
  {
    "text": "the copy out just below it uh we have a very large value um copied um buff",
    "start": "2439640",
    "end": "2445960"
  },
  {
    "text": "overflow again I should also include that host name Len is a signed value here um there are problems if you do",
    "start": "2445960",
    "end": "2453000"
  },
  {
    "text": "things like comparing uh signed and unsigned because you'll have like sign conversion um if you compare a sign",
    "start": "2453000",
    "end": "2460680"
  },
  {
    "text": "value and an unsigned value and they're both of the same rank like a sign in and an unsign in um better example a sign in",
    "start": "2460680",
    "end": "2468200"
  },
  {
    "text": "and a size of um what what happens uh in GCC at least um and this apparently is",
    "start": "2468200",
    "end": "2474359"
  },
  {
    "text": "part of the specs um is that the sign value will be converted to unsigned um",
    "start": "2474359",
    "end": "2479720"
  },
  {
    "text": "so in some cases that saves code in some cases it breaks code um the specs are pretty are pretty ambiguous at this",
    "start": "2479720",
    "end": "2486160"
  },
  {
    "text": "point they say that of return size T and size T is just some unsigned you know an",
    "start": "2486160",
    "end": "2491720"
  },
  {
    "text": "unsigned integral of unsigned integral type doesn't say if it's a short or a long um or or what it is so you know",
    "start": "2491720",
    "end": "2498560"
  },
  {
    "text": "it's it's an ambigu ambiguity of the specs here in my opinion um because if you do something like compare a short a",
    "start": "2498560",
    "end": "2505920"
  },
  {
    "text": "long sign with an just an unsign in then you won't have the sign conversion um so",
    "start": "2505920",
    "end": "2512640"
  },
  {
    "text": "it's it's it's a bit ambiguous in my opinion and does cause problems I hav't haven't talked about that too much here",
    "start": "2512640",
    "end": "2518760"
  },
  {
    "text": "so it's it's not really you know necessary for the rest of the presentation um if we look at this code",
    "start": "2518760",
    "end": "2525000"
  },
  {
    "text": "here um we have uh Power right file which is part of a device driver um",
    "start": "2525000",
    "end": "2531040"
  },
  {
    "text": "presumably U presumably you have to be a super user to do this uh since typically",
    "start": "2531040",
    "end": "2536520"
  },
  {
    "text": "you would have a file permissions um stopping arbitrary users from um from writing to to such a configuration file",
    "start": "2536520",
    "end": "2543160"
  },
  {
    "text": "or so forth um but if we look at if count is less than or equal to Z",
    "start": "2543160",
    "end": "2548319"
  },
  {
    "text": "um actual the less than zero is quite redundant since count is unsigned to",
    "start": "2548319",
    "end": "2553920"
  },
  {
    "text": "begin with so it will never be less than zero um GCC will just uh not include",
    "start": "2553920",
    "end": "2559480"
  },
  {
    "text": "this part of the code um in the code generation doesn't want about it either so it's you know silently delete stuff",
    "start": "2559480",
    "end": "2565960"
  },
  {
    "text": "which which is you know quite fine but it's would be nice to have a warning or something um so basically for this one",
    "start": "2565960",
    "end": "2572599"
  },
  {
    "text": "if we make um count um of size U Max um when we have count plus one we'll get an",
    "start": "2572599",
    "end": "2578599"
  },
  {
    "text": "in overflow and we'll allocate zero bytes um and in the kernel we will actually get a successful result it will",
    "start": "2578599",
    "end": "2585160"
  },
  {
    "text": "uh return something um and then we go to copy from user count being a VI in Max",
    "start": "2585160",
    "end": "2590640"
  },
  {
    "text": "size we'll be about overflow there um it's probably going to panic the kernel there but again it's only for super user",
    "start": "2590640",
    "end": "2597359"
  },
  {
    "text": "um but it it's a good example of of some of the bugs that that are seen",
    "start": "2597359",
    "end": "2603480"
  },
  {
    "text": "um okay I think I'm running really really going really slow I well not",
    "start": "2603480",
    "end": "2608720"
  },
  {
    "text": "really slow but I'm running really long here um than okay um so uh if we look at um",
    "start": "2608720",
    "end": "2617760"
  },
  {
    "text": "this this one here um this is an interesting bug because it's uh it",
    "start": "2617760",
    "end": "2624559"
  },
  {
    "text": "affects much of Linux 2.2 2.4 um so we have in off equals and we cast uh the",
    "start": "2624559",
    "end": "2631319"
  },
  {
    "text": "offset um and we have a comment next to it saying avoid useless 64-bit arithmetic um",
    "start": "2631319",
    "end": "2637559"
  },
  {
    "text": "now this is this is a problem that I was mentioning earlier when we have a 32-bit file pointer um and we seek to just",
    "start": "2637559",
    "end": "2643400"
  },
  {
    "text": "around you know just around 4 gig uh and then we try to read something that will cause an integer overflow so when we",
    "start": "2643400",
    "end": "2649839"
  },
  {
    "text": "have off plus count here um the offset we can control by an lseek and the count we can control by just a read um so in",
    "start": "2649839",
    "end": "2657559"
  },
  {
    "text": "this case we will get an integer overflowing off plus count um and essentially um uh do a copy to user down",
    "start": "2657559",
    "end": "2665800"
  },
  {
    "text": "below uh with uh with really account that's under our control",
    "start": "2665800",
    "end": "2671079"
  },
  {
    "text": "um so if they if they had actually um deleted that line that said avoid",
    "start": "2671079",
    "end": "2676160"
  },
  {
    "text": "useless 64bit arithmetic um they would have been safer um but not entirely safe because I think in the next example",
    "start": "2676160",
    "end": "2683280"
  },
  {
    "text": "actually no I will just go back um if we you know on 64-bit",
    "start": "2683280",
    "end": "2689200"
  },
  {
    "text": "architectures count can also be 64bit size T can be 64-bit so if we have um",
    "start": "2689200",
    "end": "2695680"
  },
  {
    "text": "the offset uh the f position the fall off set is 64bit and on a 64-bit architecture size TS a 64bit we can once",
    "start": "2695680",
    "end": "2703240"
  },
  {
    "text": "again get an integer overflow so um you really do need to add um you know a",
    "start": "2703240",
    "end": "2709559"
  },
  {
    "text": "check to say is there an energ overflow here as opposed to just keeping everything a 64bit um and different",
    "start": "2709559",
    "end": "2715240"
  },
  {
    "text": "architectures that will be exploitable um in this code here I won't talk about this one for too much um",
    "start": "2715240",
    "end": "2722280"
  },
  {
    "text": "without going through the details basically we have um we call a function",
    "start": "2722280",
    "end": "2727520"
  },
  {
    "text": "um using uh count initially as an unsigned and then in the function that we're calling it sign converts it to a",
    "start": "2727520",
    "end": "2733359"
  },
  {
    "text": "sign value and at this point uh we can take a minimum again and use this",
    "start": "2733359",
    "end": "2738440"
  },
  {
    "text": "negative value to you know to go back to the original function and cause a buffer overflow again um this one is another",
    "start": "2738440",
    "end": "2746800"
  },
  {
    "text": "proc FS bug um and we have um off T um for offset um",
    "start": "2746800",
    "end": "2755240"
  },
  {
    "text": "which again is the same problem as before um the problem here um there are a couple of problems but uh for starters",
    "start": "2755240",
    "end": "2762400"
  },
  {
    "text": "uh they should have used L off T um so it's actually you know an integer overflow plus a prototyping problem here",
    "start": "2762400",
    "end": "2769160"
  },
  {
    "text": "as well um we have the uh the get sock opt code that I was talking about earlier um",
    "start": "2769160",
    "end": "2775680"
  },
  {
    "text": "and basically this is a sign problem again we're taking a minimum um of a value that we control which is our sock",
    "start": "2775680",
    "end": "2781280"
  },
  {
    "text": "length uh sock option length um and we copy to user this one is a disclosure",
    "start": "2781280",
    "end": "2787520"
  },
  {
    "text": "bug also um this one I'm just going to go through these a bit like not so in depth",
    "start": "2787520",
    "end": "2794160"
  },
  {
    "text": "um but you know if afterwards uh you know it just seems that I'm running really long so I'm just going to try to",
    "start": "2794160",
    "end": "2800960"
  },
  {
    "text": "get through as quickly as possible um this one you have to be super user um but the thing with this one um if you",
    "start": "2800960",
    "end": "2808119"
  },
  {
    "text": "make length if you write zero bytes um Z minus one will be you know you in Max um",
    "start": "2808119",
    "end": "2815240"
  },
  {
    "text": "and you'll do a copy from user um with a you know with u in Max here so we have a check to say that if length is greater",
    "start": "2815240",
    "end": "2821599"
  },
  {
    "text": "than line size then there's a problem but we don't actually check the case that when length is zero and it's not normal to you know to write zero bytes",
    "start": "2821599",
    "end": "2828920"
  },
  {
    "text": "but it's it's quite legitimate um this one is basically a sign problem again we have short length",
    "start": "2828920",
    "end": "2835319"
  },
  {
    "text": "it should be unsh length um we have a check uh Rio command. length is it greater than page size",
    "start": "2835319",
    "end": "2842640"
  },
  {
    "text": "um and if we make length a negative um we we end up passing that check and",
    "start": "2842640",
    "end": "2848040"
  },
  {
    "text": "causing a buffer to flow down below um this one is uh just considered",
    "start": "2848040",
    "end": "2854040"
  },
  {
    "text": "really you know quite bad code for for most people because they're allocating um about 1K you know on the sack in the",
    "start": "2854040",
    "end": "2860000"
  },
  {
    "text": "kernel which is considered you know don't allocate you know such large buffers you know on a kernel sack you don't have a lot of room on a kernel",
    "start": "2860000",
    "end": "2866280"
  },
  {
    "text": "sack for Linux i386 you have um 8K um so you don't want to allocate you know a k",
    "start": "2866280",
    "end": "2873480"
  },
  {
    "text": "just haphazardly um K Mal would have been better but um if we make Len a negative value um we can essentially",
    "start": "2873480",
    "end": "2880960"
  },
  {
    "text": "cause the buffer overflow again um this one uh another energ overflow um again",
    "start": "2880960",
    "end": "2887240"
  },
  {
    "text": "because we're using we're allocating using one one expression and then we're copying using another",
    "start": "2887240",
    "end": "2892880"
  },
  {
    "text": "expression um this one I I think I've got three examples from this one particular file um this one is what I",
    "start": "2892880",
    "end": "2899760"
  },
  {
    "text": "was talking about earlier in in a on a 64-bit architecture um even though we have a p is 64-bit um if we add",
    "start": "2899760",
    "end": "2907480"
  },
  {
    "text": "you know another 64-bit value to it we will have an integer overflow um so on",
    "start": "2907480",
    "end": "2912880"
  },
  {
    "text": "64-bit architectures exploitable on 32bit not exploitable okay so um just going to",
    "start": "2912880",
    "end": "2920000"
  },
  {
    "text": "pause for audience participation are there any questions at this point yeah",
    "start": "2920000",
    "end": "2926640"
  },
  {
    "text": "okay um he just asked me a question when doing a copy from user um the return",
    "start": "2939839",
    "end": "2945319"
  },
  {
    "text": "value um on this call um what will happen if you can't copy uh that number",
    "start": "2945319",
    "end": "2950720"
  },
  {
    "text": "of bytes due to problems such as um um you know you have page permission",
    "start": "2950720",
    "end": "2956240"
  },
  {
    "text": "problems or it turns out to be so large that you know what will happen um I'm actually at the very next part I'm going",
    "start": "2956240",
    "end": "2962160"
  },
  {
    "text": "to talk about um exploitation um it's a good question and um I've tried to avoid",
    "start": "2962160",
    "end": "2968559"
  },
  {
    "text": "um the copy from user um exploitation the the bugs particularly for that in",
    "start": "2968559",
    "end": "2974319"
  },
  {
    "text": "the sense of um arbitrary um you know really large buffers um for Linux you you know you'll get some um some strange",
    "start": "2974319",
    "end": "2981040"
  },
  {
    "text": "issues uh you know when doing coffee so I'll just go through the next um the next part of the presentation which is",
    "start": "2981040",
    "end": "2986920"
  },
  {
    "text": "all about exploitation and we can come to come back to that or after the presentation",
    "start": "2986920",
    "end": "2992440"
  },
  {
    "text": "okay okay so part three is crial exploitation okay um um I'm just I",
    "start": "2992440",
    "end": "2998720"
  },
  {
    "text": "really do have to to um you know running extremely extremely long I suppose um",
    "start": "2998720",
    "end": "3005280"
  },
  {
    "text": "okay so what exploit classes do we have that's available um in the Cod we can have arbitrary code execution which",
    "start": "3005280",
    "end": "3011760"
  },
  {
    "text": "obviously is is the one that we're really after um and these you know can have you know um uses such as you know",
    "start": "3011760",
    "end": "3018160"
  },
  {
    "text": "obviously privilege escalation but you know seemingly better uses such as escaping kernel sandboxing um security",
    "start": "3018160",
    "end": "3024319"
  },
  {
    "text": "enhanced Linux user mode Linux um if we are running in the curdle um you know we",
    "start": "3024319",
    "end": "3029359"
  },
  {
    "text": "we can you know escalate our privilege beyond what we have you know beyond just a userland perspective um so we can",
    "start": "3029359",
    "end": "3035680"
  },
  {
    "text": "avoid a lot of uh you know kernel sandboxing um some other things of interest is like um digital Rights",
    "start": "3035680",
    "end": "3041760"
  },
  {
    "text": "Management um say for example that we have a colonel that is signed at you know one particular version that only",
    "start": "3041760",
    "end": "3048000"
  },
  {
    "text": "does one particular thing which is um uh play a video play an MP3 um but doesn't",
    "start": "3048000",
    "end": "3053920"
  },
  {
    "text": "allow you to uh access from user land or copy it or do anything like this um even",
    "start": "3053920",
    "end": "3059040"
  },
  {
    "text": "though we you know we've signed this you know this version of the konel or version of this kernel dis whatever we want to call it um if this software has",
    "start": "3059040",
    "end": "3067200"
  },
  {
    "text": "these hidden features such as being exploitable um then you know certainly we can escape the DRM implemented at",
    "start": "3067200",
    "end": "3072960"
  },
  {
    "text": "that level um we're looking at the kernel as our trusted base here so if we exploit the kernel then having a signed",
    "start": "3072960",
    "end": "3079000"
  },
  {
    "text": "kernel or a sign userland okay maybe trusted path exe execution in usand will help you but",
    "start": "3079000",
    "end": "3085480"
  },
  {
    "text": "ultimately um you know it can break a lot of diing things um we have another",
    "start": "3085480",
    "end": "3091400"
  },
  {
    "text": "another class of bugs such as information disclosure um we can read kernel memory um example here is a",
    "start": "3091400",
    "end": "3096720"
  },
  {
    "text": "FreeBSD except exploit um and we might want to read things like SSH private Keys um root passwords um uh maybe we",
    "start": "3096720",
    "end": "3104839"
  },
  {
    "text": "won't have so much luck with that SSH private Keys uh certainly probably more",
    "start": "3104839",
    "end": "3109960"
  },
  {
    "text": "plausible um there has been prior work um done in colel exploitation um and even though I just have this one slide",
    "start": "3109960",
    "end": "3115880"
  },
  {
    "text": "for prior work is actually there there's been other other work as well which unfortunately um you know I don't",
    "start": "3115880",
    "end": "3121400"
  },
  {
    "text": "mention um so if we look at the last Frack we have smashing H sa for fund and profit um by Noir um and that was an",
    "start": "3121400",
    "end": "3128280"
  },
  {
    "text": "implementation of an exploit from uh openbsd um the select overflow there um",
    "start": "3128280",
    "end": "3134240"
  },
  {
    "text": "there's also been some other stuff done for solarus um also frd I think as well",
    "start": "3134240",
    "end": "3139319"
  },
  {
    "text": "the Linux exective stuff of course um uh the Linux um El loader from uh while go",
    "start": "3139319",
    "end": "3146880"
  },
  {
    "text": "with the overflows and the program headers um but you know I think the problem is that people are seeing these",
    "start": "3146880",
    "end": "3152599"
  },
  {
    "text": "as one-offs you know oneoff bugs and there's actually a lot of bugs there there you know 10 you know we're looking",
    "start": "3152599",
    "end": "3158359"
  },
  {
    "text": "at millions and millions of lines of code that no one's really audited you know it's it's pretty open ground there",
    "start": "3158359",
    "end": "3164599"
  },
  {
    "text": "um and look at kernel implementation all the major open source kernels are written in C uh as I said before language pit Falls are Centric not",
    "start": "3164599",
    "end": "3171760"
  },
  {
    "text": "kernel user land Centric so in my opinion if you know if you're going to audit something um if you're going to",
    "start": "3171760",
    "end": "3177079"
  },
  {
    "text": "order code you shouldn't say well I shouldn't order the kernel because it's the kernel um it's you know it's the same language here it's just a big",
    "start": "3177079",
    "end": "3183200"
  },
  {
    "text": "program ordered it like a US land program um and there is no need to",
    "start": "3183200",
    "end": "3188480"
  },
  {
    "text": "understand you know in-depth kernel algorithms know implementation is the target of attack here we're not looking",
    "start": "3188480",
    "end": "3193640"
  },
  {
    "text": "to exploit you know weird um you know algorithms or you know weird uh conditions that occur when you know a",
    "start": "3193640",
    "end": "3199640"
  },
  {
    "text": "million things happen at WISE we're just trying to find language implementation attacks such as buffer overflows in",
    "start": "3199640",
    "end": "3204880"
  },
  {
    "text": "overflows and so forth um um C language has um you know well-known pitfalls um",
    "start": "3204880",
    "end": "3210240"
  },
  {
    "text": "an interesting thing though see um that isn't present in like other languages um",
    "start": "3210240",
    "end": "3215520"
  },
  {
    "text": "in some languages that it has undefined behavior in certain States like if we look at Java um probably a bad example",
    "start": "3215520",
    "end": "3222319"
  },
  {
    "text": "here but um know everything is you know even error States you know are defined they're defined as being you know an",
    "start": "3222319",
    "end": "3228359"
  },
  {
    "text": "error State not an undefined State um so when you have a you know a buffer overflow the rais and ex is an error not",
    "start": "3228359",
    "end": "3234599"
  },
  {
    "text": "an undefined State because in C you know undefined generally means exploitable um you know it's it's it's the classic",
    "start": "3234599",
    "end": "3241440"
  },
  {
    "text": "problems um you know error handling hard or difficult um an interesting thing is",
    "start": "3241440",
    "end": "3246559"
  },
  {
    "text": "um when we when we stop programming in assembler um what happened to the carry flag um when we do addition um the carry",
    "start": "3246559",
    "end": "3253040"
  },
  {
    "text": "flag is is very very useful um we you can't really check in a high level language um you know did we have an you",
    "start": "3253040",
    "end": "3259240"
  },
  {
    "text": "know did we have a carry event like you know why why don't we have that um it",
    "start": "3259240",
    "end": "3264559"
  },
  {
    "text": "would be nice in my opinion um um we don't have exception handlings um you",
    "start": "3264559",
    "end": "3270200"
  },
  {
    "text": "know in arithmetic um an interesting thing is things like a lot of system",
    "start": "3270200",
    "end": "3275440"
  },
  {
    "text": "calls and lip C calls you they they're both if we look at Malo for example um",
    "start": "3275440",
    "end": "3281000"
  },
  {
    "text": "Malo returns null on on failure um null is generally zero but zero is a valid",
    "start": "3281000",
    "end": "3286119"
  },
  {
    "text": "virtual memory address um there's you can map something that's you know zero um there's no reason why you can't if",
    "start": "3286119",
    "end": "3291760"
  },
  {
    "text": "you look at lseek you can lseek to U Max um and it just it we should return the",
    "start": "3291760",
    "end": "3297559"
  },
  {
    "text": "uh the file pointer the position um position of the file pointer on success and it does but it returns negative one",
    "start": "3297559",
    "end": "3304400"
  },
  {
    "text": "indicating success so you you can't actually you can't actually tell at this point and this is at a kernel level um",
    "start": "3304400",
    "end": "3311640"
  },
  {
    "text": "you know it's not at lib C setting error no the colel will return you know reserves these reserves these negative",
    "start": "3311640",
    "end": "3318400"
  },
  {
    "text": "values as errors so if you else see you know to 4 gig it'll do it in the in the",
    "start": "3318400",
    "end": "3323559"
  },
  {
    "text": "in the actual code itself the fs code itself but when it returns back to user land you know it does return negative",
    "start": "3323559",
    "end": "3329160"
  },
  {
    "text": "one and you know libc checking error no the system P itself you can't you know",
    "start": "3329160",
    "end": "3334200"
  },
  {
    "text": "you can't do anything at this point you know in my opinion like it wouldn't be such a bad idea to have era no you know",
    "start": "3334200",
    "end": "3339799"
  },
  {
    "text": "totally in the you know control by the colonel itself um and have thread specific thread specific data or or so",
    "start": "3339799",
    "end": "3346400"
  },
  {
    "text": "forth um that gets set by the colonel and this would you know an out of band error condition um it's unlikely to",
    "start": "3346400",
    "end": "3352400"
  },
  {
    "text": "happen but it's a bit of a wish list um from what I've seen um integer problems",
    "start": "3352400",
    "end": "3358960"
  },
  {
    "text": "are just you know they're everywhere in all seod you know um they they really do a care lot um you know",
    "start": "3358960",
    "end": "3366400"
  },
  {
    "text": "if if you look at a lot of source you will see the same problems time and time again um in EN overflows are very very",
    "start": "3366400",
    "end": "3373319"
  },
  {
    "text": "common um even things for like you know checking you know checking error conditions it seems you know so simple",
    "start": "3373319",
    "end": "3379720"
  },
  {
    "text": "um but you know how many people check for you know out of memory condition out of memory conditions um it's quoted like",
    "start": "3379720",
    "end": "3385799"
  },
  {
    "text": "that the Linux kernel has no memory leaks um and this is true you know in the in the you know the average case but",
    "start": "3385799",
    "end": "3392119"
  },
  {
    "text": "you know there's certainly memory leaks in unusual conditions um and almost all code has memory leaks in unusual",
    "start": "3392119",
    "end": "3398119"
  },
  {
    "text": "conditions if it doesn't you know some code will do you know if uh an xmail loock and if it's you know an allocation",
    "start": "3398119",
    "end": "3404480"
  },
  {
    "text": "failure it will exit completely but if something needs to keep on running know pretty much all code you know all",
    "start": "3404480",
    "end": "3409799"
  },
  {
    "text": "sizable code you know will have memory leaks in weird conditions uh simply cleaning up you know the the allocations",
    "start": "3409799",
    "end": "3415440"
  },
  {
    "text": "that occur beforehand and um you know tends to be problematic um so what interfaces do we",
    "start": "3415440",
    "end": "3422200"
  },
  {
    "text": "want to Target when we are looking to exploit something in the kernel um kernel buffer copies uh very good place",
    "start": "3422200",
    "end": "3428480"
  },
  {
    "text": "uh this actually dwon Engler did a a lot of uh uh the automated bug checking was",
    "start": "3428480",
    "end": "3434799"
  },
  {
    "text": "very much a bottomup auditing technique where he did look for colel buffer copies and then uh actually I apologize",
    "start": "3434799",
    "end": "3442480"
  },
  {
    "text": "um he looked U at he did a down approach um from",
    "start": "3442480",
    "end": "3448039"
  },
  {
    "text": "various entry points into the colel um and then once reaching a colel buffer copy uh tried to establish if uh certain",
    "start": "3448039",
    "end": "3456720"
  },
  {
    "text": "you know certain things could occur at that point so if we look at a colel colonel",
    "start": "3456720",
    "end": "3462000"
  },
  {
    "text": "buffer copying uh kernel and user space can can really be divided into two conceptual segments uh user land and",
    "start": "3462000",
    "end": "3467559"
  },
  {
    "text": "kernel kernel land so um default i386 Linux we're looking at 3 gig for the",
    "start": "3467559",
    "end": "3472680"
  },
  {
    "text": "kernel and uh sorry 3 gig for user line and uh one gig for the kernel um and we",
    "start": "3472680",
    "end": "3478240"
  },
  {
    "text": "really need validation um of our sources and destinations uh so what I mean by",
    "start": "3478240",
    "end": "3484000"
  },
  {
    "text": "that is you know the code itself will check to say that you're not copying something uh from",
    "start": "3484000",
    "end": "3490440"
  },
  {
    "text": "uh from let's say the kernel land to the kernel land itself or user land back in you know you have to actually copy from",
    "start": "3490440",
    "end": "3496720"
  },
  {
    "text": "user has to copy it should copy it from user land to Kernel L um and there are segmentation checks on this to make sure",
    "start": "3496720",
    "end": "3502720"
  },
  {
    "text": "this is the case there were also uh when we say for example example we're writing to userland copying a kernel buffer to a",
    "start": "3502720",
    "end": "3510000"
  },
  {
    "text": "userland buffer we need to make sure that the userland uh buffer know is addressable um you know is the page",
    "start": "3510000",
    "end": "3516039"
  },
  {
    "text": "present does you know uh does the page have permissions to allow it to write there um and incorrect input validation",
    "start": "3516039",
    "end": "3522720"
  },
  {
    "text": "on these things uh you know can lead to Kernel compromises and really like um",
    "start": "3522720",
    "end": "3528200"
  },
  {
    "text": "you know input validation you know around buffer copying code is the target of exploitation um that is present in",
    "start": "3528200",
    "end": "3534760"
  },
  {
    "text": "pretty much all kernels okay so I'm going to talk about kernel",
    "start": "3534760",
    "end": "3540160"
  },
  {
    "text": "buffers here kernel to user space copies uh what can that provide us from an attacker point of view um it can allow",
    "start": "3540160",
    "end": "3545359"
  },
  {
    "text": "kernel memory disclosure um so I presented a lot of examples earlier that if we copy um something from the kernel",
    "start": "3545359",
    "end": "3553079"
  },
  {
    "text": "to user land but we don't bound that length we can actually you know read arbitrary uh Kel memory um and this is",
    "start": "3553079",
    "end": "3560880"
  },
  {
    "text": "true because of uh the case that partial copies of Kernel memory and memory uh so",
    "start": "3560880",
    "end": "3566880"
  },
  {
    "text": "if you copy a buffer from kernel land to userland and you give it a very large",
    "start": "3566880",
    "end": "3571920"
  },
  {
    "text": "link say you Max um you don't actually have to have uint Max addressable memory",
    "start": "3571920",
    "end": "3577240"
  },
  {
    "text": "user space you can have one page 20 Pages or so forth uh page permissions and a page fault will cause uh the copy",
    "start": "3577240",
    "end": "3585119"
  },
  {
    "text": "to abort early but you will have copied that kernel memory to what you have",
    "start": "3585119",
    "end": "3591720"
  },
  {
    "text": "available um and that's because verification of page permission you know they're not really done prior",
    "start": "3591720",
    "end": "3598000"
  },
  {
    "text": "to the copy um in Linux verify area um Can validate that you're copy to",
    "start": "3598000",
    "end": "3604359"
  },
  {
    "text": "somewhere um that exists but it's mostly deprecated because it's better to use the mmu um the memory management handle",
    "start": "3604359",
    "end": "3611680"
  },
  {
    "text": "that directly it it will page fault uh when it tries to write somewhere that it",
    "start": "3611680",
    "end": "3617400"
  },
  {
    "text": "shouldn't so in effect you can copy um large amounts of curle memory to",
    "start": "3617400",
    "end": "3623240"
  },
  {
    "text": "userland memory um even if you don't have 4 gig of memory free um and an",
    "start": "3623240",
    "end": "3628559"
  },
  {
    "text": "example here is that I've got the accept system call",
    "start": "3628559",
    "end": "3634000"
  },
  {
    "text": "down below and the from length is actually a negative value that I've given it here uh the from address is",
    "start": "3634000",
    "end": "3642720"
  },
  {
    "text": "actually a buffer um that is about one gig um that's AIT that's a bit large I",
    "start": "3642720",
    "end": "3648319"
  },
  {
    "text": "must admit um I put it uh in the BSS because you don't really want to maloc",
    "start": "3648319",
    "end": "3654480"
  },
  {
    "text": "one gig or put one gig on the stack um so the BSS is a reasonable place um you",
    "start": "3654480",
    "end": "3659920"
  },
  {
    "text": "don't actually need to page in anything or so forth um actually it will try to",
    "start": "3659920",
    "end": "3666440"
  },
  {
    "text": "copy two gig of memory to the buffer but it will only fill one gig of memory um",
    "start": "3666440",
    "end": "3672079"
  },
  {
    "text": "it will page Vault uh after copying one gig return back to accept and should",
    "start": "3672079",
    "end": "3677799"
  },
  {
    "text": "actually return an error um but at this point we will have copied about one gig",
    "start": "3677799",
    "end": "3684359"
  },
  {
    "text": "of Kernel memory okay so looking at kernel buffers now uh",
    "start": "3684359",
    "end": "3690559"
  },
  {
    "text": "again um there are some optimizations that we can do let's check the to uh there are some optimizations that we can",
    "start": "3690559",
    "end": "3696240"
  },
  {
    "text": "do uh we don't always have to check segments so we don't always have to check uh that the SE the segments you",
    "start": "3696240",
    "end": "3703000"
  },
  {
    "text": "know the kernel space you know the kernel land is in the kernel land user land in user land what we can do is uh",
    "start": "3703000",
    "end": "3708280"
  },
  {
    "text": "do a verify area initially on a on a buffer and then we can put whites directly into that buffer um",
    "start": "3708280",
    "end": "3716799"
  },
  {
    "text": "without you know any segmentation checks um if this if the assumptions that we make are incorrect it's probably",
    "start": "3716799",
    "end": "3722839"
  },
  {
    "text": "exploitable again um we have some classic exploitation here basically we're",
    "start": "3722839",
    "end": "3729920"
  },
  {
    "text": "creating a back door we're going to set up a basically little Curel module that",
    "start": "3729920",
    "end": "3734960"
  },
  {
    "text": "does a set u ID zero um in a system call we execute the system call um and we get",
    "start": "3734960",
    "end": "3740240"
  },
  {
    "text": "a uid we get uid zero and privilege escalation um if we can copy you know",
    "start": "3740240",
    "end": "3746319"
  },
  {
    "text": "this this kernel Shell Code um will run this Shell Code in kernel context uh we",
    "start": "3746319",
    "end": "3752279"
  },
  {
    "text": "can you know essentially uh exploit the kernel vience method what do we do when",
    "start": "3752279",
    "end": "3757599"
  },
  {
    "text": "we want to exploit something we want to escalate our Privileges and we also want kernel continuation we want the kernel to",
    "start": "3757599",
    "end": "3763760"
  },
  {
    "text": "continue running without crashing privilege escalation um typically by manipulation of the task task structure",
    "start": "3763760",
    "end": "3770680"
  },
  {
    "text": "uh process control block so we want to change our uid our G to zero to the root um class IC back door um I don't talk",
    "start": "3770680",
    "end": "3778000"
  },
  {
    "text": "about escaping jails or CH rout environments which is another thing that is very useful um with arbitrary kernel",
    "start": "3778000",
    "end": "3784760"
  },
  {
    "text": "code execution um konel continuation um if we look at noir's exploit from Frack",
    "start": "3784760",
    "end": "3790480"
  },
  {
    "text": "60 um went to a lot of work to uh return back into the konel at a specific address um a specific address that would",
    "start": "3790480",
    "end": "3798200"
  },
  {
    "text": "you know let the Kel continue running um without crashing and in my opinion this was you know not not the most optimal",
    "start": "3798200",
    "end": "3805359"
  },
  {
    "text": "way of doing things um it requires you know a lot of knowledge of of what's already there requires offsets and",
    "start": "3805359",
    "end": "3810400"
  },
  {
    "text": "addresses um you know essentially you know it seems to be an overly complex method and there are methods that we can",
    "start": "3810400",
    "end": "3816720"
  },
  {
    "text": "use that avoid this problem completely um if we look at Linux 2.4 and kernel",
    "start": "3816720",
    "end": "3822000"
  },
  {
    "text": "Stacks here uh every process uh pretty much gets an 8K um 8K kernel stack um",
    "start": "3822000",
    "end": "3828880"
  },
  {
    "text": "for i386 Linux at the top of this kernel stack uh we have our um task structure",
    "start": "3828880",
    "end": "3834520"
  },
  {
    "text": "which is our process control block containing information about the process that's running um contains information",
    "start": "3834520",
    "end": "3840799"
  },
  {
    "text": "such as our uid G and so forth It's you know very essential um the task",
    "start": "3840799",
    "end": "3846520"
  },
  {
    "text": "structure the current task structure is relative to our stack pointer um so we",
    "start": "3846520",
    "end": "3853400"
  },
  {
    "text": "can actually once we're running in the kernel uh we can look at our stack pointer and we can get our task structure immediately um and we do that",
    "start": "3853400",
    "end": "3861160"
  },
  {
    "text": "by masking off the lower bits and this will give us the top of the stack in",
    "start": "3861160",
    "end": "3867039"
  },
  {
    "text": "State um okay the the next thing I want to talk about is rep from CIS basically",
    "start": "3867039",
    "end": "3872799"
  },
  {
    "text": "return from CIS if we look at new exploit again um returns back into the kernel and the konel eventually calls",
    "start": "3872799",
    "end": "3879200"
  },
  {
    "text": "you know return from CIS or so forth um but why don't we just call that ourselves why don't we Implement that ourselves um so if you look at uh Linux",
    "start": "3879200",
    "end": "3886680"
  },
  {
    "text": "again um it implements you know returning to userland uh with an IR um the code itself is in entry. s um very",
    "start": "3886680",
    "end": "3894720"
  },
  {
    "text": "small amount of code um and that will essentially return us from a kernel context into a user L context uh where",
    "start": "3894720",
    "end": "3900960"
  },
  {
    "text": "we return back in user L totally under our control we control the program counter uh that we return to userland um",
    "start": "3900960",
    "end": "3907480"
  },
  {
    "text": "so you know we don't really want the system call that we're exploiting you know to to continue working and you know",
    "start": "3907480",
    "end": "3913000"
  },
  {
    "text": "to Rite something to a device or something like this we want it just to return back to userland um give us a",
    "start": "3913000",
    "end": "3918039"
  },
  {
    "text": "shell maybe that's u80 and have the you know the curdle run like normal so",
    "start": "3918039",
    "end": "3925799"
  },
  {
    "text": "that's basically what I'm saying in this slide",
    "start": "3925799",
    "end": "3930559"
  },
  {
    "text": "um sorry um going to look at uh the exploitation of Bin format C.C a bit",
    "start": "3931599",
    "end": "3938079"
  },
  {
    "text": "more um basically it's an arbitrary copy from user space um from disk um which is",
    "start": "3938079",
    "end": "3944200"
  },
  {
    "text": "under our control we can just write a binary um and copies it to really anywhere in c space it's under our",
    "start": "3944200",
    "end": "3949480"
  },
  {
    "text": "control um so all we all we do for this is create a binary um that will will",
    "start": "3949480",
    "end": "3956599"
  },
  {
    "text": "execute a shell running as a super user and we'll do that by doing our back to we'll copy we'll copy our um our back door",
    "start": "3956599",
    "end": "3964760"
  },
  {
    "text": "into into the kernel start doing a set your ID Z and then we'll return back into user land do an exact ve and now",
    "start": "3964760",
    "end": "3970640"
  },
  {
    "text": "we'll have a shell uh running his rout um the code here I've talked about a bit",
    "start": "3970640",
    "end": "3976480"
  },
  {
    "text": "earlier as well um the arguments are completely wrong um and now I'll go back",
    "start": "3976480",
    "end": "3981880"
  },
  {
    "text": "to Colonel stack smashing again um like okay the important things want to get across in the exploitation part",
    "start": "3981880",
    "end": "3988880"
  },
  {
    "text": "um we have um the colel shell C does not have to live in the konel kernel Shell",
    "start": "3988880",
    "end": "3994160"
  },
  {
    "text": "Code can live in user space um in user land running you know in the kernel context uh so if we put our kernel Shell",
    "start": "3994160",
    "end": "4002599"
  },
  {
    "text": "Code that does things like set uid z um that escapes a CH rout escapes a jail um",
    "start": "4002599",
    "end": "4008240"
  },
  {
    "text": "so long as the kernel is you know in our user land segment um running you know in",
    "start": "4008240",
    "end": "4014079"
  },
  {
    "text": "the kernel context we essentially have a you know the kernel running um so we don't need to know addresses within the",
    "start": "4014079",
    "end": "4019880"
  },
  {
    "text": "kernel we can point it directly back to user space and control it all from user space that's pretty much the reason why",
    "start": "4019880",
    "end": "4025760"
  },
  {
    "text": "we don't need addresses uh we control user space completely we can control all addresses in user space pretty much um",
    "start": "4025760",
    "end": "4031799"
  },
  {
    "text": "we can M map code to anywhere we want um we can return uh if we overwrite the",
    "start": "4031799",
    "end": "4037000"
  },
  {
    "text": "return address um in a kernel stack to point to our user land code we essentially have a kernel stack Overflow",
    "start": "4037000",
    "end": "4043880"
  },
  {
    "text": "uh where we control you know the the address um the address of this at this point back in our you know controlled",
    "start": "4043880",
    "end": "4050599"
  },
  {
    "text": "userland environment running in kernel context we can escalate privileges to ass set uid Z by looking at our our",
    "start": "4050599",
    "end": "4057400"
  },
  {
    "text": "kernel stack uh looking at our task structure changing the uid to zero changing the GID to zero and then at",
    "start": "4057400",
    "end": "4063480"
  },
  {
    "text": "that point we'll just return back to user land context um again user land totally under our control um and we can",
    "start": "4063480",
    "end": "4069880"
  },
  {
    "text": "just return to another part of our um userland program that doesn't except ve",
    "start": "4069880",
    "end": "4075119"
  },
  {
    "text": "that now is running a shell with uid z um okay so this essentially is Kernel",
    "start": "4075119",
    "end": "4082839"
  },
  {
    "text": "Shell Code um without uh using offsets or addresses um it requires the address",
    "start": "4082839",
    "end": "4089279"
  },
  {
    "text": "of our uh our kernel our Shell Code in the sense that",
    "start": "4089279",
    "end": "4095080"
  },
  {
    "text": "um um what where we want user land to return where we want the kernel to return to user land so Shell Code in",
    "start": "4095080",
    "end": "4101238"
  },
  {
    "text": "this example would do something like execute a shell running as uid z um um but this is essentially isn't um the top",
    "start": "4101239",
    "end": "4109480"
  },
  {
    "text": "of the the top of the code here just grabs the current Tas structure um and then uh from this we override our uid",
    "start": "4109480",
    "end": "4117199"
  },
  {
    "text": "and GID with zero um and then after that we just return back into user um that essentially uh is is our Shell Code",
    "start": "4117199",
    "end": "4125159"
  },
  {
    "text": "there okay I think I think I sort of screwed up the last bit of this presentation it sort of sounded a bit",
    "start": "4125159",
    "end": "4131318"
  },
  {
    "text": "you know a bit obscure but hopefully hopefully um people will get something out of it I hope um okay so one other",
    "start": "4131319",
    "end": "4140199"
  },
  {
    "text": "thing about colel stack mashing sometimes it's not possible to overwrite the return address completely um say for",
    "start": "4140199",
    "end": "4147318"
  },
  {
    "text": "example we have a stack Overflow in the kernel uh and we can only overwrite the least significant bite or the most",
    "start": "4147319",
    "end": "4153278"
  },
  {
    "text": "significant bite of the return address um if we control the most significant bite uh we'll essentially return um",
    "start": "4153279",
    "end": "4161880"
  },
  {
    "text": "probably back into somewhere that we can control we can map um you a lot of things we can map code anywhere in New",
    "start": "4161880",
    "end": "4168480"
  },
  {
    "text": "Zealand we can for i386 Linux anywhere below zero XC you know 00 you know",
    "start": "4168480",
    "end": "4175318"
  },
  {
    "text": "00000000 anywhere below that so all we want to do is return somewhere into an",
    "start": "4175319",
    "end": "4181080"
  },
  {
    "text": "area that we can control um if we control the least significant B of",
    "start": "4181080",
    "end": "4186159"
  },
  {
    "text": "return address maybe we can get it to return to another instruction it's already in the kernel that trampol lands",
    "start": "4186159",
    "end": "4192199"
  },
  {
    "text": "to somewhere in US land again um like this is very likely actually it",
    "start": "4192199",
    "end": "4199040"
  },
  {
    "text": "seems that you know can we find an instruction that trampolines back into userland um remember that all we're",
    "start": "4199040",
    "end": "4204320"
  },
  {
    "text": "looking for is a jump a call something that can get us you know into three gig of accessible memory U that's all we",
    "start": "4204320",
    "end": "4210880"
  },
  {
    "text": "want and at that point we can execute we can execute code running is",
    "start": "4210880",
    "end": "4216199"
  },
  {
    "text": "in the Cal context okay um okay I think I've been",
    "start": "4216199",
    "end": "4221280"
  },
  {
    "text": "really confusing in that last part but so what to work um should be done",
    "start": "4221280",
    "end": "4226960"
  },
  {
    "text": "here um I haven't actually written uh exploitation for SE Enix or uml um to",
    "start": "4226960",
    "end": "4232600"
  },
  {
    "text": "escape the sandboxing I think that's something um that I really do need to do um okay there are a lot of he um heat",
    "start": "4232600",
    "end": "4241080"
  },
  {
    "text": "bugs uh with kernel memory allocators I uh I think this is uh more future work can be on this you know buffer overflows",
    "start": "4241080",
    "end": "4247280"
  },
  {
    "text": "double frees and so forth um something that I wanted to talk about I suppose uh remote exploits um I've not actually",
    "start": "4247280",
    "end": "4255679"
  },
  {
    "text": "seen any remote exploits in the in the stuff that I've audited I have seen some bugs in things like uh the coda",
    "start": "4255679",
    "end": "4261840"
  },
  {
    "text": "distributed file system for Linux um and certainly there have been bugs in the past for the IP fragmentation code in",
    "start": "4261840",
    "end": "4268679"
  },
  {
    "text": "most kernels um if I had to take a guess of of where we would have bugs um and I I do believe that there are bugs in a uh",
    "start": "4268679",
    "end": "4275640"
  },
  {
    "text": "the tcpip stacks that are remotely exploitable um IP fragmentation code um",
    "start": "4275640",
    "end": "4281440"
  },
  {
    "text": "the current Linux I do believe has a a bug in the fragmentation code I was",
    "start": "4281440",
    "end": "4286560"
  },
  {
    "text": "looking at this a couple weeks ago and it seems um which is I have no idea why",
    "start": "4286560",
    "end": "4292159"
  },
  {
    "text": "um when you have Linux believes that when you have overlapping fragments it",
    "start": "4292159",
    "end": "4297199"
  },
  {
    "text": "should actually try to fix them um and that's a really bad idea in my opinion um so when you have two fragments uh and",
    "start": "4297199",
    "end": "4305480"
  },
  {
    "text": "the first fragment overlaps the second fragment completely um it will delete the second fragment and it will say okay",
    "start": "4305480",
    "end": "4312199"
  },
  {
    "text": "the first fragment is authorative uh ignore the second fragment however if the first fragment not only",
    "start": "4312199",
    "end": "4318000"
  },
  {
    "text": "overlaps the next fragment but also the one after that Linux will say okay delete the second fragment but leave the",
    "start": "4318000",
    "end": "4324560"
  },
  {
    "text": "third one and the first one there so you'll end up with um two fragments that are overlapping um and at that point it",
    "start": "4324560",
    "end": "4332440"
  },
  {
    "text": "will go to the reassembly code and I'm not quite sure what happens at that point I haven't looked into that um and",
    "start": "4332440",
    "end": "4337520"
  },
  {
    "text": "it's something that I should do in the future um I think the IP options code also is um certainly a great place to",
    "start": "4337520",
    "end": "4344679"
  },
  {
    "text": "look for both TCP options code as well um at one point there was a bug posted to the Linux Kel",
    "start": "4344679",
    "end": "4351480"
  },
  {
    "text": "mailing list uh with an IP options bug and basically instead of filling the",
    "start": "4351480",
    "end": "4356639"
  },
  {
    "text": "padding um of the IP options with uh end of option it would actually just",
    "start": "4356639",
    "end": "4362639"
  },
  {
    "text": "overwrite this single bite with you know it would overwrite this single bite and just ignore everything else and after",
    "start": "4362639",
    "end": "4368159"
  },
  {
    "text": "that there was a bit of a a rumor you know about you know is there a bug in the IP options code um a bit of talk on",
    "start": "4368159",
    "end": "4374080"
  },
  {
    "text": "full disclosure and so forth um I think maybe this was related to someone reading the Linux kernel mailing",
    "start": "4374080",
    "end": "4379520"
  },
  {
    "text": "list and saying maybe there's other bugs as well um the IP options code is like",
    "start": "4379520",
    "end": "4384880"
  },
  {
    "text": "is quite hairy um I think maybe there might be things to do uh for example if",
    "start": "4384880",
    "end": "4390040"
  },
  {
    "text": "you um have options and fragmentation together so you might be able to have a",
    "start": "4390040",
    "end": "4396159"
  },
  {
    "text": "an IP uh packet and fragment it and fragment the options um so that your",
    "start": "4396159",
    "end": "4402280"
  },
  {
    "text": "options might overwrite um some adjacent bites with their shouldn't there might be also some bugs locally with the",
    "start": "4402280",
    "end": "4407960"
  },
  {
    "text": "options passing code uh the options creation code sorry um and also probably",
    "start": "4407960",
    "end": "4413040"
  },
  {
    "text": "another place to look for bugs is Kernel interfacing um the interface within the network layer um it's you know it's a",
    "start": "4413040",
    "end": "4419600"
  },
  {
    "text": "good class of you know everyone generally has interfacing problems uh when you have a lot of developers",
    "start": "4419600",
    "end": "4425040"
  },
  {
    "text": "working on something so that's probably another place to look for bugs as well um if it was if there were actually um",
    "start": "4425040",
    "end": "4432000"
  },
  {
    "text": "things like overflows remotely uh one possible way of uh exploitation uh would",
    "start": "4432000",
    "end": "4438040"
  },
  {
    "text": "be simply to push um shell cat into a user land process uh that's all the",
    "start": "4438040",
    "end": "4443880"
  },
  {
    "text": "colel would do um there's probably you know a million ways to do this but it seems like a very very safe way create",
    "start": "4443880",
    "end": "4450400"
  },
  {
    "text": "some shelf code that talks and does a connect back um and all the Kel does is find a process that's already running",
    "start": "4450400",
    "end": "4456320"
  },
  {
    "text": "running as a super user push the Shell Code into that process and when the process uh continues running it will",
    "start": "4456320",
    "end": "4462960"
  },
  {
    "text": "fork and it'll connect back in US so that seems to be a possible way of uh doing a remote exploitation for that",
    "start": "4462960",
    "end": "4469639"
  },
  {
    "text": "which seems quite reliable as well you don't really need to uh do any networking code within the kernel and",
    "start": "4469639",
    "end": "4476239"
  },
  {
    "text": "just use regular user line code to do that okay um so that's pretty much it um",
    "start": "4476239",
    "end": "4482920"
  },
  {
    "text": "are there any questions okay um I hope everyone uh",
    "start": "4482920",
    "end": "4490600"
  },
  {
    "text": "enjoyed the presentation um and if you want to talk to me afterwards uh feel free thank",
    "start": "4490600",
    "end": "4496050"
  },
  {
    "text": "[Applause]",
    "start": "4496050",
    "end": "4505089"
  },
  {
    "text": "you",
    "start": "4523960",
    "end": "4526960"
  },
  {
    "text": "e",
    "start": "4553920",
    "end": "4556920"
  },
  {
    "text": "e",
    "start": "4583920",
    "end": "4586920"
  },
  {
    "text": "e",
    "start": "4613840",
    "end": "4616840"
  },
  {
    "text": "e",
    "start": "4643840",
    "end": "4646840"
  },
  {
    "text": "e",
    "start": "4673840",
    "end": "4676840"
  },
  {
    "text": "e",
    "start": "4703760",
    "end": "4706760"
  },
  {
    "text": "e",
    "start": "4733719",
    "end": "4736719"
  },
  {
    "text": "e",
    "start": "4763719",
    "end": "4766719"
  },
  {
    "text": "e",
    "start": "4793639",
    "end": "4796639"
  },
  {
    "text": "e",
    "start": "4823639",
    "end": "4826639"
  },
  {
    "text": "e",
    "start": "4853639",
    "end": "4856639"
  },
  {
    "text": "e",
    "start": "4883560",
    "end": "4886560"
  },
  {
    "text": "e",
    "start": "4913520",
    "end": "4916520"
  },
  {
    "text": "e",
    "start": "4943520",
    "end": "4946520"
  },
  {
    "text": "e",
    "start": "4973440",
    "end": "4976440"
  },
  {
    "text": "e",
    "start": "5003440",
    "end": "5006440"
  },
  {
    "text": "e e",
    "start": "5033440",
    "end": "5037440"
  },
  {
    "text": "e",
    "start": "5123320",
    "end": "5126320"
  },
  {
    "text": "e",
    "start": "5153239",
    "end": "5156239"
  },
  {
    "text": "e",
    "start": "5183239",
    "end": "5186239"
  },
  {
    "text": "e",
    "start": "5213239",
    "end": "5216239"
  },
  {
    "text": "e",
    "start": "5243119",
    "end": "5246119"
  },
  {
    "text": "e",
    "start": "5273119",
    "end": "5276119"
  },
  {
    "text": "e",
    "start": "5303119",
    "end": "5306119"
  },
  {
    "text": "e",
    "start": "5333040",
    "end": "5336040"
  },
  {
    "text": "e",
    "start": "5363040",
    "end": "5366040"
  },
  {
    "text": "e",
    "start": "5393040",
    "end": "5396040"
  },
  {
    "text": "e",
    "start": "5422960",
    "end": "5425960"
  },
  {
    "text": "e",
    "start": "5452920",
    "end": "5455920"
  },
  {
    "text": "e",
    "start": "5482920",
    "end": "5485920"
  },
  {
    "text": "e",
    "start": "5512840",
    "end": "5515840"
  },
  {
    "text": "e",
    "start": "5542840",
    "end": "5545840"
  },
  {
    "text": "e",
    "start": "5572840",
    "end": "5575840"
  },
  {
    "text": "e",
    "start": "5602760",
    "end": "5605760"
  },
  {
    "text": "e",
    "start": "5632719",
    "end": "5635719"
  },
  {
    "text": "e",
    "start": "5662719",
    "end": "5665719"
  },
  {
    "text": "e",
    "start": "5692639",
    "end": "5695639"
  },
  {
    "text": "e",
    "start": "5722639",
    "end": "5725639"
  },
  {
    "text": "e",
    "start": "5752639",
    "end": "5755639"
  },
  {
    "text": "e",
    "start": "5782560",
    "end": "5785560"
  },
  {
    "text": "e",
    "start": "5812520",
    "end": "5815520"
  },
  {
    "text": "e",
    "start": "5842520",
    "end": "5845520"
  },
  {
    "text": "e",
    "start": "5872440",
    "end": "5875440"
  },
  {
    "text": "e",
    "start": "5902440",
    "end": "5905440"
  },
  {
    "text": "e",
    "start": "5932440",
    "end": "5935440"
  },
  {
    "text": "e",
    "start": "5962360",
    "end": "5965360"
  },
  {
    "text": "e",
    "start": "5992320",
    "end": "5995320"
  },
  {
    "text": "e",
    "start": "6022320",
    "end": "6025320"
  },
  {
    "text": "e",
    "start": "6052239",
    "end": "6055239"
  },
  {
    "text": "e",
    "start": "6082239",
    "end": "6085239"
  },
  {
    "text": "e",
    "start": "6112239",
    "end": "6115239"
  },
  {
    "text": "e",
    "start": "6142159",
    "end": "6145159"
  },
  {
    "text": "e",
    "start": "6172119",
    "end": "6175119"
  },
  {
    "text": "e",
    "start": "6202119",
    "end": "6205119"
  },
  {
    "text": "e",
    "start": "6232040",
    "end": "6235040"
  },
  {
    "text": "e",
    "start": "6262040",
    "end": "6265040"
  },
  {
    "text": "e",
    "start": "6292040",
    "end": "6295040"
  },
  {
    "text": "e",
    "start": "6321960",
    "end": "6324960"
  },
  {
    "text": "e",
    "start": "6351920",
    "end": "6354920"
  },
  {
    "text": "e",
    "start": "6381920",
    "end": "6384920"
  },
  {
    "text": "e",
    "start": "6411840",
    "end": "6414840"
  },
  {
    "text": "e",
    "start": "6441840",
    "end": "6444840"
  },
  {
    "text": "e",
    "start": "6471840",
    "end": "6474840"
  },
  {
    "text": "e",
    "start": "6501760",
    "end": "6504760"
  },
  {
    "text": "e",
    "start": "6531719",
    "end": "6534719"
  },
  {
    "text": "e",
    "start": "6561719",
    "end": "6564719"
  },
  {
    "text": "e",
    "start": "6591639",
    "end": "6594639"
  },
  {
    "text": "e",
    "start": "6621639",
    "end": "6624639"
  },
  {
    "text": "e",
    "start": "6651639",
    "end": "6654639"
  },
  {
    "text": "e",
    "start": "6681560",
    "end": "6684560"
  },
  {
    "text": "e",
    "start": "6711520",
    "end": "6714520"
  },
  {
    "text": "e",
    "start": "6741520",
    "end": "6744520"
  },
  {
    "text": "e",
    "start": "6771440",
    "end": "6774440"
  },
  {
    "text": "e",
    "start": "6801440",
    "end": "6804440"
  },
  {
    "text": "e",
    "start": "6831440",
    "end": "6834440"
  },
  {
    "text": "e",
    "start": "6861360",
    "end": "6864360"
  },
  {
    "text": "e",
    "start": "6891320",
    "end": "6894320"
  },
  {
    "text": "e",
    "start": "6921320",
    "end": "6924320"
  },
  {
    "text": "e",
    "start": "6951239",
    "end": "6954239"
  },
  {
    "text": "e",
    "start": "6981239",
    "end": "6984239"
  },
  {
    "text": "e",
    "start": "7011239",
    "end": "7014239"
  },
  {
    "text": "e",
    "start": "7041159",
    "end": "7044159"
  },
  {
    "text": "e",
    "start": "7071119",
    "end": "7074119"
  },
  {
    "text": "e",
    "start": "7101119",
    "end": "7104119"
  },
  {
    "text": "e",
    "start": "7131040",
    "end": "7134040"
  },
  {
    "text": "e",
    "start": "7161040",
    "end": "7164040"
  },
  {
    "text": "e",
    "start": "7191040",
    "end": "7194040"
  },
  {
    "text": "e",
    "start": "7220960",
    "end": "7223960"
  },
  {
    "text": "e",
    "start": "7250920",
    "end": "7253920"
  },
  {
    "text": "e",
    "start": "7280920",
    "end": "7283920"
  },
  {
    "text": "e for",
    "start": "7310840",
    "end": "7314880"
  }
]