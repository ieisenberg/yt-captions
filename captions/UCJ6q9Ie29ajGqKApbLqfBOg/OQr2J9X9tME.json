[
  {
    "text": "[Music]",
    "start": "4270",
    "end": "14090"
  },
  {
    "text": "hello everyone my name is tamim park and i'm a phd student at uc irvine today i'm",
    "start": "15040",
    "end": "20960"
  },
  {
    "text": "going to talk about nodejune locking down javascript engines this is a joint work of uc irvine and ku",
    "start": "20960",
    "end": "28840"
  },
  {
    "text": "ruben today we cannot live without internet so web browsers are now essential parts of",
    "start": "28840",
    "end": "36160"
  },
  {
    "text": "our daily lives many of you might open a web browser first as soon as your computers are on",
    "start": "36160",
    "end": "43440"
  },
  {
    "text": "one of the biggest innovations in web browser is javascript which provides rich",
    "start": "43440",
    "end": "48960"
  },
  {
    "text": "interaction between web pages and web browser so people can enjoy the dynamic web environment",
    "start": "48960",
    "end": "56079"
  },
  {
    "text": "as you can see most of the modern web browsers have javascript edges embedded",
    "start": "56079",
    "end": "62480"
  },
  {
    "text": "however the problem of the javascript engines is that they are usually written in unsaved",
    "start": "62640",
    "end": "68080"
  },
  {
    "text": "languages such as c or c plus plus so they might contain vulnerabilities also javascript engine",
    "start": "68080",
    "end": "76479"
  },
  {
    "text": "automatically runs any script embedded in a web page therefore it is easy for the attacker to",
    "start": "76479",
    "end": "83119"
  },
  {
    "text": "inject his script and trigger the vulnerability to exploit victims machine",
    "start": "83119",
    "end": "90320"
  },
  {
    "text": "javascript engines continue to evolve and the size becomes larger and larger as you can see in the",
    "start": "90799",
    "end": "97280"
  },
  {
    "text": "in this graph the code lines of v8 now become more than more than a million",
    "start": "97280",
    "end": "104399"
  },
  {
    "text": "accordingly every year more than hundreds of the vulnerabilities in javascript engines",
    "start": "104399",
    "end": "109439"
  },
  {
    "text": "are reported so javascript exploitation is now real threat one of the famous javascript",
    "start": "109439",
    "end": "118000"
  },
  {
    "text": "engine exploitation is g-spring attack in this attack an attacker encodes",
    "start": "118000",
    "end": "124640"
  },
  {
    "text": "malicious code in the huge number of constant in script look at this example they are definitely",
    "start": "124640",
    "end": "131440"
  },
  {
    "text": "benign consecutive xor operations so there is no problem in generating",
    "start": "131440",
    "end": "137920"
  },
  {
    "text": "corresponding digit code within the sandbox however an article can trigger a",
    "start": "137920",
    "end": "143920"
  },
  {
    "text": "vulnerability and change the program counter to the middle of the door's constant",
    "start": "143920",
    "end": "149280"
  },
  {
    "text": "then the semantic of the cursor turning to what attacker wants to execute in this way an attacker can",
    "start": "149280",
    "end": "155680"
  },
  {
    "text": "inject any malicious code within the sandbox",
    "start": "155680",
    "end": "160560"
  },
  {
    "text": "there are more advanced attacks on javascript engines especially utilizing vertice thread",
    "start": "160800",
    "end": "166319"
  },
  {
    "text": "capability look at this slide during the g compilation",
    "start": "166319",
    "end": "172160"
  },
  {
    "text": "g compilers first generate the intermediate representation which is gir at that time an attack",
    "start": "172160",
    "end": "179440"
  },
  {
    "text": "response on new thread and still a cpu cycle to overwrite gir",
    "start": "179440",
    "end": "185280"
  },
  {
    "text": "then the gd code transformed from the corrupted gir eventually contains attacker's code",
    "start": "185280",
    "end": "192400"
  },
  {
    "text": "or by using the similar technique an article can inject his code directly onto the gd region when it",
    "start": "192400",
    "end": "199599"
  },
  {
    "text": "becomes writable so people suggested several differences",
    "start": "199599",
    "end": "205680"
  },
  {
    "text": "mostly isolating jig components through separate process or trusted execution",
    "start": "205680",
    "end": "211440"
  },
  {
    "text": "environment however the basic execution unit of the javascript engine",
    "start": "211440",
    "end": "216959"
  },
  {
    "text": "is the interpreter but previous work is all about jit and there had been no attacks and of",
    "start": "216959",
    "end": "222720"
  },
  {
    "text": "course no defenses on the interpreter so here's our contribution our first",
    "start": "222720",
    "end": "230159"
  },
  {
    "text": "goal is to discover new attack vector which is bytecode interpret attack",
    "start": "230159",
    "end": "235760"
  },
  {
    "text": "our attack corrupts the bytecode interpreter and escape from the sandbox so that an",
    "start": "235760",
    "end": "241200"
  },
  {
    "text": "attacker can execute arbitrary system calls the second goal is proposed defense",
    "start": "241200",
    "end": "247519"
  },
  {
    "text": "mechanisms to protect javascript engines our defense techniques pursue a comprehensive",
    "start": "247519",
    "end": "253680"
  },
  {
    "text": "defense so that it defeats not only the bytecode into print attack but also prior g-code injection and",
    "start": "253680",
    "end": "260000"
  },
  {
    "text": "code-reached attacks which means protecting entire script engines",
    "start": "260000",
    "end": "266560"
  },
  {
    "text": "before going to talk about our attacks and defenses i will go over how interpreter executes",
    "start": "267040",
    "end": "273680"
  },
  {
    "text": "look at this slide when script is about to be executed it is compiled by by code compiler which",
    "start": "273680",
    "end": "281199"
  },
  {
    "text": "generates my code object tables and javascript object",
    "start": "281199",
    "end": "286320"
  },
  {
    "text": "bytecode is a stream of the bytecode instructions which which are executed by the interpreter",
    "start": "286320",
    "end": "292000"
  },
  {
    "text": "one by one by code instructions are pretty much similar with machine instructions",
    "start": "292000",
    "end": "297600"
  },
  {
    "text": "in that it has opcode and operand however instead of specifying data",
    "start": "297600",
    "end": "304320"
  },
  {
    "text": "directly on the operand it is used to specify an index of an object table and each",
    "start": "304320",
    "end": "310639"
  },
  {
    "text": "entry of the object table points to javascript object where actual data are stored",
    "start": "310639",
    "end": "317919"
  },
  {
    "text": "here our attack aims to utilize the function called routine to run arbitrary system calls we have several",
    "start": "322080",
    "end": "329680"
  },
  {
    "text": "attack strategies but in this talk i will show one attack example which",
    "start": "329680",
    "end": "334960"
  },
  {
    "text": "corrupts javascript object here's our thread model there is at",
    "start": "334960",
    "end": "341759"
  },
  {
    "text": "least one memory corruption vulnerability inside of the script engine that gives an attacker an arbitrary read",
    "start": "341759",
    "end": "348800"
  },
  {
    "text": "and write capability and we assume that code injection defense is deployed so",
    "start": "348800",
    "end": "355280"
  },
  {
    "text": "memory regions should be either writable or executable lastly",
    "start": "355280",
    "end": "360639"
  },
  {
    "text": "our stream model has lightweight code reuse defense which includes aslr and core screen cfi",
    "start": "360639",
    "end": "369520"
  },
  {
    "text": "this is a simple attack script calling of b9 function 4 and the function full course cosign",
    "start": "370960",
    "end": "377759"
  },
  {
    "text": "function when this screen is compiled corresponding by code",
    "start": "377759",
    "end": "382800"
  },
  {
    "text": "object table and data object are generated here calling the cosign function is",
    "start": "382800",
    "end": "389280"
  },
  {
    "text": "achieved by an indirect function core where the function pointer is fetched from the load function by",
    "start": "389280",
    "end": "395759"
  },
  {
    "text": "code instructions and also arguments are fetched in the same way",
    "start": "395759",
    "end": "401120"
  },
  {
    "text": "and this indirect function core gets the address of the context object as the first argument",
    "start": "401120",
    "end": "410319"
  },
  {
    "text": "here we're gonna add code to trigger a vulnerability which gives an attacker an arbitrary",
    "start": "412000",
    "end": "418000"
  },
  {
    "text": "read and write capability so attacker can now rely on arbitrarily",
    "start": "418000",
    "end": "423280"
  },
  {
    "text": "with the capability to find the data to corrupt here let's say by code bar one object",
    "start": "423280",
    "end": "429759"
  },
  {
    "text": "and context object we use a heap layout inference technique which first leaks an address of an",
    "start": "429759",
    "end": "436720"
  },
  {
    "text": "arbitrary object and follow the pointers in the object to find the other object",
    "start": "436720",
    "end": "442319"
  },
  {
    "text": "we repeat this process recursively until we get to the target data",
    "start": "442319",
    "end": "447680"
  },
  {
    "text": "after finding them the article utilized arbitrary write capability to corrupt",
    "start": "447680",
    "end": "453039"
  },
  {
    "text": "them first it cropped by codes so that the operand of the load function instruction",
    "start": "453039",
    "end": "459039"
  },
  {
    "text": "points to bar one object then it corrupts the barbell object",
    "start": "459039",
    "end": "464400"
  },
  {
    "text": "so it contains the of it contains the system the address of the system function",
    "start": "464400",
    "end": "472240"
  },
  {
    "text": "finally it corrupts the context object so that it contains a share command",
    "start": "472240",
    "end": "478960"
  },
  {
    "text": "so when this script calls the function full it will execute the system function with",
    "start": "478960",
    "end": "485199"
  },
  {
    "text": "the share command",
    "start": "485199",
    "end": "488080"
  },
  {
    "text": "so in order to protect the script engines from the previous by code interpreter attack",
    "start": "490240",
    "end": "496240"
  },
  {
    "text": "we propose no digital a new defense mechanism",
    "start": "496240",
    "end": "501840"
  },
  {
    "text": "the goal of the knowledge is protect all the data there are targets of our by could",
    "start": "501919",
    "end": "506960"
  },
  {
    "text": "interpret attack and other existing attacks so we consider by code object tables javascript object",
    "start": "506960",
    "end": "515039"
  },
  {
    "text": "gtir and gdt code in order to do this we enforce a",
    "start": "515039",
    "end": "521440"
  },
  {
    "text": "fine-grained memory access control over orders data which means we try to minimize the permission of",
    "start": "521440",
    "end": "528080"
  },
  {
    "text": "each data as small as possible however of course memory permission controls inevitably",
    "start": "528080",
    "end": "534560"
  },
  {
    "text": "comes with significant overhead so we decided to use intel memory",
    "start": "534560",
    "end": "541760"
  },
  {
    "text": "protection kit to solve this problem intel mpk is a new hardware",
    "start": "541760",
    "end": "547440"
  },
  {
    "text": "feature to control the protection of the memory chunk in an efficient way it doesn't need to change the permission",
    "start": "547440",
    "end": "554160"
  },
  {
    "text": "bit in page tables so it's very fast look at this slide",
    "start": "554160",
    "end": "559519"
  },
  {
    "text": "each memory chunk is assigned up to 15 kinds of specific mpk keys with associated",
    "start": "559519",
    "end": "566000"
  },
  {
    "text": "permission changing permission is achieved by simply changing",
    "start": "566000",
    "end": "571680"
  },
  {
    "text": "a permission bit of the specific key at pkru register and then every chunk with the specific",
    "start": "571680",
    "end": "578640"
  },
  {
    "text": "key is affected also mpk supports execute only memory",
    "start": "578640",
    "end": "584560"
  },
  {
    "text": "which a protect does not support finally mpk is red local so",
    "start": "584560",
    "end": "591600"
  },
  {
    "text": "every thread has a different view of memory permission of the same chunk of the memory",
    "start": "591600",
    "end": "598240"
  },
  {
    "text": "we are going to apply those nice properties of the apk to memory protection policy",
    "start": "599040",
    "end": "604480"
  },
  {
    "text": "in the script engines this is the latest policy where by code",
    "start": "604480",
    "end": "610720"
  },
  {
    "text": "object tables javascript object and gtir are all time writeable which means they",
    "start": "610720",
    "end": "616959"
  },
  {
    "text": "are always open to be corrupted gd code is readable and executable which",
    "start": "616959",
    "end": "623519"
  },
  {
    "text": "allows the attacker to learn about rp gadgets for attacks such as giraffe jericho's becomes",
    "start": "623519",
    "end": "630480"
  },
  {
    "text": "temporarily writable when it is emitted to memory and like we",
    "start": "630480",
    "end": "635519"
  },
  {
    "text": "discussed earlier an attacker can inject his code by utilizing race condition so",
    "start": "635519",
    "end": "643600"
  },
  {
    "text": "in our new situ we minimize memory permission as small as possible",
    "start": "643600",
    "end": "648959"
  },
  {
    "text": "now by code object table javascript object and ir are all time readable and",
    "start": "648959",
    "end": "655920"
  },
  {
    "text": "gd code is executed only on top of that we separate the memory",
    "start": "655920",
    "end": "661519"
  },
  {
    "text": "chunks into different kinds and assign different apk keys to manage them",
    "start": "661519",
    "end": "667200"
  },
  {
    "text": "individually for example when there is an instruction to write on",
    "start": "667200",
    "end": "672320"
  },
  {
    "text": "object tables we only open a right window of object table for this instruction so",
    "start": "672320",
    "end": "678240"
  },
  {
    "text": "that other kinds of data are not not affected moreover attacker no longer utilize",
    "start": "678240",
    "end": "685200"
  },
  {
    "text": "erase condition because the right window is independent from articles thread",
    "start": "685200",
    "end": "691600"
  },
  {
    "text": "but there are challenges we need to solve here it is required to open right windows for",
    "start": "691600",
    "end": "697680"
  },
  {
    "text": "all legal right instructions to those data and finding all of them is challenging",
    "start": "697680",
    "end": "702959"
  },
  {
    "text": "and implementing protection changes is also not trivial",
    "start": "702959",
    "end": "708720"
  },
  {
    "text": "then let's start by the easiest one we found that by code object cable gir",
    "start": "708880",
    "end": "715519"
  },
  {
    "text": "and gdt quote need to be writable only during the compilation so we manually find the right",
    "start": "715519",
    "end": "722160"
  },
  {
    "text": "instructions to those data and implement protection changes before and after the",
    "start": "722160",
    "end": "727680"
  },
  {
    "text": "instructions however we found that it is not trivial to make the gd code",
    "start": "727680",
    "end": "734000"
  },
  {
    "text": "execute only because gd code is mixture of motion instructions",
    "start": "734000",
    "end": "739120"
  },
  {
    "text": "and readable data such as jump tables and large so we separate the digit code into",
    "start": "739120",
    "end": "746720"
  },
  {
    "text": "machine instruction part and data part and assign different apk keys to them so now we can make the",
    "start": "746720",
    "end": "753760"
  },
  {
    "text": "machine instruction execute only and data section read-only",
    "start": "753760",
    "end": "760000"
  },
  {
    "text": "now we get to the most difficult one javascript object there are so many javascript objects and",
    "start": "761680",
    "end": "768320"
  },
  {
    "text": "also so many right instructions to them so it's impossible to find them and",
    "start": "768320",
    "end": "773600"
  },
  {
    "text": "instrument our protection changes manually therefore we need a automatic solution to find",
    "start": "773600",
    "end": "780639"
  },
  {
    "text": "those instructions so that it can be generally applied to any javascript engines",
    "start": "780639",
    "end": "786880"
  },
  {
    "text": "we can rely on steady analysis such as point to analysis but they are found to be conservative",
    "start": "786880",
    "end": "794320"
  },
  {
    "text": "so it is not suitable for our fine-grained enforcement that's why we decided to rely on dynamic",
    "start": "794320",
    "end": "801040"
  },
  {
    "text": "analysis the goal of our dynamic analysis is to",
    "start": "801040",
    "end": "806880"
  },
  {
    "text": "automatically find all the locations of right instructions involved in javascript object so",
    "start": "806880",
    "end": "814880"
  },
  {
    "text": "we instrument the code for every write instructions using lfvm and check this properly",
    "start": "814880",
    "end": "822320"
  },
  {
    "text": "after the instrumentation we run script engines with well chosen input set while making",
    "start": "822320",
    "end": "828800"
  },
  {
    "text": "javascript object read only with an apk key when a writing instruction tries to",
    "start": "828800",
    "end": "835600"
  },
  {
    "text": "write on an object it will cause signal segmentation fort because it's read-only then",
    "start": "835600",
    "end": "842880"
  },
  {
    "text": "our custom signal handler checks whether it's because of the mpk violation if it is",
    "start": "842880",
    "end": "850079"
  },
  {
    "text": "it changes the permission of the object as writable and return to our instrument code",
    "start": "850079",
    "end": "856399"
  },
  {
    "text": "our instrument could then check whether the permission becomes writable which indicates that the right",
    "start": "856399",
    "end": "862560"
  },
  {
    "text": "instruction above touches the javascript object then it reports the associated location",
    "start": "862560",
    "end": "869519"
  },
  {
    "text": "and makes the data object read only for the rest of the analysis",
    "start": "869519",
    "end": "875839"
  },
  {
    "text": "after finding all those locations from our dynamic analysis we use levm again to enforce permission",
    "start": "876959",
    "end": "884800"
  },
  {
    "text": "changes at the start and at the end of the function so that we open a right window for the entire function",
    "start": "884800",
    "end": "892560"
  },
  {
    "text": "we also did a little bit optimization for some cases where an instrument function is called",
    "start": "892560",
    "end": "898320"
  },
  {
    "text": "in a loop in this case we hoist the procession changes out of the loop in this way our dynamic",
    "start": "898320",
    "end": "906160"
  },
  {
    "text": "analysis automatically finds and instruments all the right instructions",
    "start": "906160",
    "end": "913279"
  },
  {
    "text": "in order to find all of the functions involved functions involved in javascript object",
    "start": "913279",
    "end": "919920"
  },
  {
    "text": "it is best if our input set guarantees fully covers but it's impossible so we studied script",
    "start": "919920",
    "end": "927839"
  },
  {
    "text": "engine and found that those functions have common knowledges and we can categorize them into four",
    "start": "927839",
    "end": "934240"
  },
  {
    "text": "accessor functions those accessor functions work as gateways to write on",
    "start": "934240",
    "end": "940079"
  },
  {
    "text": "data object and extensively shared by other components therefore we only need to find those",
    "start": "940079",
    "end": "947120"
  },
  {
    "text": "excessive functions and we believe that the extensive test cases on every kind of data object we",
    "start": "947120",
    "end": "954399"
  },
  {
    "text": "cover them that's why we decided to use javascript test switch which satisfy our requirement and we're",
    "start": "954399",
    "end": "961839"
  },
  {
    "text": "going to show that our assumption is correct in our coverage analysis",
    "start": "961839",
    "end": "968639"
  },
  {
    "text": "in our coverage analysis we picked one thickness of for test switch as our",
    "start": "968639",
    "end": "975120"
  },
  {
    "text": "input set for dynamic analysis and implemented logic ju then we read this note to",
    "start": "975120",
    "end": "982720"
  },
  {
    "text": "enable the javascript engine with the first test switch and we found that all test",
    "start": "982720",
    "end": "988800"
  },
  {
    "text": "order test cases are passed with without any errors so our analysis implies that even a",
    "start": "988800",
    "end": "996480"
  },
  {
    "text": "small set of the test switch is enough to find the or accessor functions",
    "start": "996480",
    "end": "1002959"
  },
  {
    "text": "we also evaluate whether our defense can defeat our bytecode interpret attack called",
    "start": "1004079",
    "end": "1009759"
  },
  {
    "text": "injection attack and other kinds of code reuse attacks",
    "start": "1009759",
    "end": "1014959"
  },
  {
    "text": "in our bytecode interpreter text we need to corrupt one of the data among bytecode object tables and",
    "start": "1015920",
    "end": "1022880"
  },
  {
    "text": "javascript object however logistics makes them or read-only so attacker cannot",
    "start": "1022880",
    "end": "1030079"
  },
  {
    "text": "manipulate them anymore g-code injection attacks are also not",
    "start": "1030079",
    "end": "1036839"
  },
  {
    "text": "available g ir and gd code should be writeable for the g compilation unit",
    "start": "1036839",
    "end": "1042798"
  },
  {
    "text": "but it's not for a ticker thread where gir is read-only and cheated code is",
    "start": "1042799",
    "end": "1049200"
  },
  {
    "text": "executed only this is because of the independent view of of the thread for the protection",
    "start": "1049200",
    "end": "1056400"
  },
  {
    "text": "of each memory chunk so attacker cannot overwrite it anymore",
    "start": "1056400",
    "end": "1062960"
  },
  {
    "text": "our defense is also effective in advance that could reuse attacks such as g-raw g-rob basically tries to harvest",
    "start": "1064240",
    "end": "1073600"
  },
  {
    "text": "rpg cuts at runtime by traversing code pages but after enforcing reading code pages",
    "start": "1073600",
    "end": "1081200"
  },
  {
    "text": "are not available which disallows harvesting rp gadgets",
    "start": "1081200",
    "end": "1087279"
  },
  {
    "text": "logistics can be combined with a constant lining to effectively defeat the g-spring attacks",
    "start": "1088320",
    "end": "1094799"
  },
  {
    "text": "constant blinding is a good technique to defend against just brain attacks with large",
    "start": "1094799",
    "end": "1100559"
  },
  {
    "text": "constant but not effective with small constant because of the overhead",
    "start": "1100559",
    "end": "1106240"
  },
  {
    "text": "in order to exploit the small constant this spring attack should be combined with rp style attacks",
    "start": "1106240",
    "end": "1113039"
  },
  {
    "text": "but our node is invalidated because no digit does not follow harvesting rp gadgets which is already",
    "start": "1113039",
    "end": "1120559"
  },
  {
    "text": "described in previous slides",
    "start": "1120559",
    "end": "1124399"
  },
  {
    "text": "this is the performance evaluation of node.js we tested our knowledge on spider-monkey",
    "start": "1125600",
    "end": "1132559"
  },
  {
    "text": "which is one of the famous javascript engines and we use the long spider benchmarks",
    "start": "1132559",
    "end": "1138720"
  },
  {
    "text": "which are a longer version of the standard benchmarks available in webcam",
    "start": "1138720",
    "end": "1143760"
  },
  {
    "text": "the reason that we use those benchmarks is that the original benchmarks are too microscopic to catch the",
    "start": "1143760",
    "end": "1150080"
  },
  {
    "text": "overhead caused by our enforcement we re-ran those benchmarks on industrial",
    "start": "1150080",
    "end": "1156559"
  },
  {
    "text": "machine under ubuntu 841",
    "start": "1156559",
    "end": "1160399"
  },
  {
    "text": "here's the result the x-axis is benchmarks and y-axis is left y-axis is overhead",
    "start": "1162000",
    "end": "1169840"
  },
  {
    "text": "induced and the blue bar is our notice without optimization and",
    "start": "1169840",
    "end": "1176080"
  },
  {
    "text": "orange bar is losing to with the hoist optimization as you can see",
    "start": "1176080",
    "end": "1183919"
  },
  {
    "text": "the average operator of our defense is five percent but it is reduced to three percent with",
    "start": "1184080",
    "end": "1190640"
  },
  {
    "text": "our waste optimization our optimization actually widens right",
    "start": "1190640",
    "end": "1196000"
  },
  {
    "text": "window but it's negligible you can check more details about this issue in our paper",
    "start": "1196000",
    "end": "1204240"
  },
  {
    "text": "okay i have to conclude my talk we showed an instance of by code",
    "start": "1205440",
    "end": "1210640"
  },
  {
    "text": "interpreter attack which corrupts interpreter execution to run arbitrary share commands",
    "start": "1210640",
    "end": "1216400"
  },
  {
    "text": "so we proposed a notion enforcing fine-grained memory access control",
    "start": "1216400",
    "end": "1221919"
  },
  {
    "text": "through intel mpk and we showed that our defense successfully",
    "start": "1221919",
    "end": "1227280"
  },
  {
    "text": "stopped code reuse and called injection attack and also the bytecode interpreter can we",
    "start": "1227280",
    "end": "1233520"
  },
  {
    "text": "developed without incurring much overhead",
    "start": "1233520",
    "end": "1238399"
  },
  {
    "text": "and this is the end of my talk thank you for your attention and i'm happy to answer any questions",
    "start": "1239120",
    "end": "1249840"
  },
  {
    "text": "uh okay it's is this the question section now yeah",
    "start": "1250960",
    "end": "1258240"
  },
  {
    "text": "i think my project is really slow so now i can see yes some questions",
    "start": "1258240",
    "end": "1265360"
  },
  {
    "text": "okay yeah okay yeah let's see the yeah i can see the first question is",
    "start": "1265440",
    "end": "1273440"
  },
  {
    "text": "the evolve percent overhead what was the measuring again uh",
    "start": "1273440",
    "end": "1280080"
  },
  {
    "text": "yeah just so s axis is the benchmark itself and the y-axis is the overhead which means that we have",
    "start": "1280080",
    "end": "1287120"
  },
  {
    "text": "kind of a baseline which is the running javascript without our protection and then we run the",
    "start": "1287120",
    "end": "1294240"
  },
  {
    "text": "javascript with our protection and this the overhead in ahead is how how many percentages",
    "start": "1294240",
    "end": "1301440"
  },
  {
    "text": "increase from baseline to our protection version also",
    "start": "1301440",
    "end": "1307760"
  },
  {
    "text": "the second one is uh the question is i think you touched based on this",
    "start": "1307760",
    "end": "1314640"
  },
  {
    "text": "already but did you say traditional sast testing is not as effective for",
    "start": "1314640",
    "end": "1321280"
  },
  {
    "text": "this can you clarify more some details about",
    "start": "1321280",
    "end": "1326559"
  },
  {
    "text": "this question so i couldn't understand that",
    "start": "1326559",
    "end": "1333840"
  },
  {
    "text": "so you mean the sas is a static analysis uh if it's correct and the real yeah",
    "start": "1353919",
    "end": "1361840"
  },
  {
    "text": "as i told in the talk earlier the static analysis is kind of conservative so",
    "start": "1361840",
    "end": "1367840"
  },
  {
    "text": "it's fine it can there's no first positive but we the aesthetic analysis also",
    "start": "1367840",
    "end": "1374080"
  },
  {
    "text": "consider other huge number of objects there that that don't need to be protected so",
    "start": "1374080",
    "end": "1382640"
  },
  {
    "text": "that means we are going to yeah widen the attack windows so attacker has more high probability to",
    "start": "1382640",
    "end": "1389919"
  },
  {
    "text": "to write on that object because that object most of the objects are becomes",
    "start": "1389919",
    "end": "1396320"
  },
  {
    "text": "writable most of the time it's going to be more than 50 percent of the time of the execution i think",
    "start": "1396320",
    "end": "1403840"
  },
  {
    "text": "so",
    "start": "1403840",
    "end": "1406080"
  },
  {
    "text": "uh dumbbell sticker just presentation how many percentage increase from baseline to",
    "start": "1409440",
    "end": "1415120"
  },
  {
    "text": "protective version i think yeah i already answered this question",
    "start": "1415120",
    "end": "1422159"
  },
  {
    "text": "and also",
    "start": "1422159",
    "end": "1425200"
  },
  {
    "text": "yeah yeah i would i think i already answered the question",
    "start": "1429679",
    "end": "1434960"
  },
  {
    "text": "about why the static analysis is not good for my work so",
    "start": "1434960",
    "end": "1444559"
  },
  {
    "text": "so we can just do some kind of the value set analysis which is that we can just imagine how",
    "start": "1444559",
    "end": "1451760"
  },
  {
    "text": "the memory structures looks like for each code section and we are yeah say this memory section",
    "start": "1451760",
    "end": "1460240"
  },
  {
    "text": "it should be uh should be protected because it might contain the our core",
    "start": "1460240",
    "end": "1466799"
  },
  {
    "text": "data but uh it might not contain our code data and",
    "start": "1466799",
    "end": "1472000"
  },
  {
    "text": "this there are so many cases that cover this kind of situation so yeah it is they have",
    "start": "1472000",
    "end": "1478400"
  },
  {
    "text": "fine-grained uh baseline oh yeah kind of yeah",
    "start": "1478400",
    "end": "1486720"
  },
  {
    "text": "the posts are kind of built not a second bill second yeah i don't remember yeah",
    "start": "1486720",
    "end": "1493520"
  },
  {
    "text": "something like that around nanosecond yeah i think",
    "start": "1494320",
    "end": "1501840"
  },
  {
    "text": "i'm sorry that my project is really slow so i can see the question very late so i thought that there's almost no",
    "start": "1508240",
    "end": "1514960"
  },
  {
    "text": "questions at all",
    "start": "1514960",
    "end": "1517840"
  },
  {
    "text": "so and in addition so i use the benchmark which is the longest long spider that is the longer than uh",
    "start": "1523360",
    "end": "1531520"
  },
  {
    "text": "the standard benchmark and this actually the standard benchmark each benchmark finishes within just",
    "start": "1531520",
    "end": "1538480"
  },
  {
    "text": "within around the one second sometimes don't know around some millisecond but longer",
    "start": "1538480",
    "end": "1545039"
  },
  {
    "text": "spider is around 100 times more yeah more than that and and but there's no",
    "start": "1545039",
    "end": "1552559"
  },
  {
    "text": "difference in what kind of things are test tested so yeah",
    "start": "1552559",
    "end": "1559120"
  },
  {
    "text": "uh losing just not browser plugin uh in my talk i already told you that i",
    "start": "1563360",
    "end": "1570080"
  },
  {
    "text": "just modify an instrument and update the javascript engine codes",
    "start": "1570080",
    "end": "1575600"
  },
  {
    "text": "by just manually just engineering javascript engine or using element",
    "start": "1575600",
    "end": "1581600"
  },
  {
    "text": "instrumentation tools to automatically insert some unnecessary codes in",
    "start": "1581600",
    "end": "1587679"
  },
  {
    "text": "it so if someone wants to use nojitsu they have to build the",
    "start": "1587679",
    "end": "1595039"
  },
  {
    "text": "javascript engine with with elevator instrumentation paths that i made",
    "start": "1595039",
    "end": "1600400"
  },
  {
    "text": "and also that they have to have those two version of uh versions to",
    "start": "1600400",
    "end": "1606320"
  },
  {
    "text": "enable the javascript engine that i implemented so i i also",
    "start": "1606320",
    "end": "1612000"
  },
  {
    "text": "think that uh after polishing my code i would yeah publish my",
    "start": "1612000",
    "end": "1619760"
  },
  {
    "text": "the let's enable the javascript engine to to the public",
    "start": "1619760",
    "end": "1627840"
  },
  {
    "text": "okay so",
    "start": "1638840",
    "end": "1645039"
  },
  {
    "text": "i think until now i answer the question and there's a some time that i can",
    "start": "1647679",
    "end": "1656240"
  },
  {
    "text": "uh talk with some missing point and actually the dynamic analysis",
    "start": "1656240",
    "end": "1663120"
  },
  {
    "text": "doesn't catch every cases there are kind of two corner cases and one is for the garbage",
    "start": "1663120",
    "end": "1668880"
  },
  {
    "text": "collection and the other is for kind of generating multiple copies of the function in the garbage",
    "start": "1668880",
    "end": "1676320"
  },
  {
    "text": "collection cases dynamic analysis cannot catch because the behavior of the garbage collection",
    "start": "1676320",
    "end": "1682080"
  },
  {
    "text": "is kind of random so what i did is that we just look at the garbage the code section for garbage collection",
    "start": "1682080",
    "end": "1689440"
  },
  {
    "text": "and if the garbage collection tries to write some object value we just",
    "start": "1689440",
    "end": "1694840"
  },
  {
    "text": "conservatively to open the right windows for them and also compilers sometimes",
    "start": "1694840",
    "end": "1701600"
  },
  {
    "text": "generate a certain uh multiple function for yeah or specific function especially",
    "start": "1701600",
    "end": "1708000"
  },
  {
    "text": "when they have some kind of template yeah argument and then so our dynamic",
    "start": "1708000",
    "end": "1713360"
  },
  {
    "text": "analysis will just catch some of them but not all of them so we just find these cases and",
    "start": "1713360",
    "end": "1720080"
  },
  {
    "text": "instrument our protection changes for all copies of the dos function and",
    "start": "1720080",
    "end": "1727520"
  },
  {
    "text": "thank you for the comments i really appreciate it you guys like my work so",
    "start": "1731760",
    "end": "1739039"
  },
  {
    "text": "also what should i tell you there's something that i need to clarify oh also uh i just we",
    "start": "1739039",
    "end": "1747200"
  },
  {
    "text": "just assigned the key to specific uh data uh data domain but",
    "start": "1747200",
    "end": "1754159"
  },
  {
    "text": "we separate the object into two kinds the one kind is just primitive object the",
    "start": "1754159",
    "end": "1760240"
  },
  {
    "text": "other kind is uh kind of kind of the crucial object the reason is that",
    "start": "1760240",
    "end": "1768559"
  },
  {
    "text": "attacker just tried to exploit some or usually they it's exploited some kind",
    "start": "1768559",
    "end": "1774640"
  },
  {
    "text": "of proper buffer to override really critical data so",
    "start": "1774640",
    "end": "1780159"
  },
  {
    "text": "objective which contains the array should be separate from the object from object which contains the critical data",
    "start": "1780159",
    "end": "1786960"
  },
  {
    "text": "so we separate the object into two domain and actually the npk provides 16",
    "start": "1786960",
    "end": "1793600"
  },
  {
    "text": "domains and we only use six domains so if we want to make our defense more",
    "start": "1793600",
    "end": "1800399"
  },
  {
    "text": "more more fine-grained we can just separate the other data also so there's a possible way",
    "start": "1800399",
    "end": "1808399"
  },
  {
    "text": "there are a lot of possible ways to yeah improve the security of the current",
    "start": "1808399",
    "end": "1813679"
  },
  {
    "text": "version of the new system okay",
    "start": "1813679",
    "end": "1824240"
  },
  {
    "text": "so uh i'm looking at",
    "start": "1824240",
    "end": "1827919"
  },
  {
    "text": "questions",
    "start": "1834840",
    "end": "1837840"
  },
  {
    "text": "yeah we can we can do that here",
    "start": "1861360",
    "end": "1865840"
  },
  {
    "text": "okay yeah cool so i think there are there's there's no",
    "start": "1877440",
    "end": "1884320"
  },
  {
    "text": "question anymore so yeah thank you for just attending my talk and i really appreciate it and",
    "start": "1884320",
    "end": "1892159"
  },
  {
    "text": "enjoy this blackhead thoughts thanks",
    "start": "1892159",
    "end": "1898960"
  }
]