[
  {
    "start": "0",
    "end": "56000"
  },
  {
    "text": "all right good afternoon everyone um we're going to get started with over theedge silently owning Windows 10's",
    "start": "80",
    "end": "6480"
  },
  {
    "text": "secure browser with Eric Bossman please remember to silence your cell phones",
    "start": "6480",
    "end": "11559"
  },
  {
    "text": "let's welcome",
    "start": "11559",
    "end": "14080"
  },
  {
    "text": "Eric hello everyone um I'm Eric and I'm going to be presenting work I've done at",
    "start": "19080",
    "end": "24800"
  },
  {
    "text": "the uh as PhD student at the fusac group uh at the fu in",
    "start": "24800",
    "end": "33240"
  },
  {
    "text": "Amsterdam let's turn on my um uh first a warning uh this uh",
    "start": "34239",
    "end": "41280"
  },
  {
    "text": "presentation will be fairly technical so uh you may encounter some pointers um",
    "start": "41280",
    "end": "47600"
  },
  {
    "text": "I've tried to make it as uh as easy to understand as possible without sacrificing the technical",
    "start": "47600",
    "end": "55719"
  },
  {
    "text": "content I'm going to present U um an attack uh where we will uh use Emory",
    "start": "55719",
    "end": "62399"
  },
  {
    "start": "56000",
    "end": "144000"
  },
  {
    "text": "duplication as a software side Channel and combine this with rammer a hardware bug in order to uh create own uh",
    "start": "62399",
    "end": "70880"
  },
  {
    "text": "Microsoft Edge without the use of any software books um if you want to know a bit more",
    "start": "70880",
    "end": "78560"
  },
  {
    "text": "we also have a paper um uh called dup s makina uh so if I've left out details",
    "start": "78560",
    "end": "85840"
  },
  {
    "text": "you might be able to look them up in uh in the paper",
    "start": "85840",
    "end": "91040"
  },
  {
    "text": "so what are we going to do in short uh um we will use duplication um to as a",
    "start": "91040",
    "end": "99280"
  },
  {
    "text": "side channel to leak uh both Heap and uh code pointers so we will leak uh a heap",
    "start": "99280",
    "end": "105520"
  },
  {
    "text": "address of a JavaScript array with contents we control and we will leak um um a code",
    "start": "105520",
    "end": "112399"
  },
  {
    "text": "pointer into U Microsoft edges",
    "start": "112399",
    "end": "117600"
  },
  {
    "text": "um Microsoft edges uh a JavaScript library and this will be enough for us to craft a fake",
    "start": "117600",
    "end": "125079"
  },
  {
    "text": "object but then we don't yeah the object will still be in our uh in the data so",
    "start": "125079",
    "end": "131800"
  },
  {
    "text": "we don't have a reference to it so we will use rammer to create a reference to this object and this will enable us to",
    "start": "131800",
    "end": "138440"
  },
  {
    "text": "get an arbitrary read write primitive uh uh from",
    "start": "138440",
    "end": "143760"
  },
  {
    "text": "there so um uh we for this attack we make use of memory duplication memory",
    "start": "143760",
    "end": "150360"
  },
  {
    "start": "144000",
    "end": "261000"
  },
  {
    "text": "duplication is a method of reducing the memory footprint of a system uh it has",
    "start": "150360",
    "end": "157519"
  },
  {
    "text": "been introduced uh uh first in virtualization environments um but uh but uh starting",
    "start": "157519",
    "end": "166159"
  },
  {
    "text": "with Windows uh 8.1 it uh it it was",
    "start": "166159",
    "end": "171400"
  },
  {
    "text": "enabled by default uh uh in the operating system as",
    "start": "171400",
    "end": "178319"
  },
  {
    "text": "well um um so how does it work so say you have",
    "start": "178319",
    "end": "185200"
  },
  {
    "text": "uh so in this case uh the left side uh contains um uh yeah is a a figure of the physical",
    "start": "185200",
    "end": "194040"
  },
  {
    "text": "memory of the system in the right side you have the virtual memory of two processes so say both processes have the",
    "start": "194040",
    "end": "201599"
  },
  {
    "text": "same um have the same image uh of the monolisa in their address space um the",
    "start": "201599",
    "end": "209760"
  },
  {
    "text": "the Opera thinking system or the hypervisor uh can do a sweep and detect",
    "start": "209760",
    "end": "214959"
  },
  {
    "text": "that that uh detect that that that the both processes have the the same page",
    "start": "214959",
    "end": "221159"
  },
  {
    "text": "contents in their uh in their address space and it can uh uh Point both um it",
    "start": "221159",
    "end": "229400"
  },
  {
    "text": "can point both um virtual addresses to the same",
    "start": "229400",
    "end": "234439"
  },
  {
    "text": "address and then free up the the the memory that was used by the second copy",
    "start": "234439",
    "end": "239840"
  },
  {
    "text": "of course um now we have a problem if uh if process a tries to write to uh uh the",
    "start": "239840",
    "end": "247159"
  },
  {
    "text": "data uh it will also change in process B that's why the operating system Mark",
    "start": "247159",
    "end": "252640"
  },
  {
    "text": "those as uh those pages as copy on right um but this opens um um yeah this",
    "start": "252640",
    "end": "260519"
  },
  {
    "text": "enables to do another thing so so the the main problem with this is that uh um",
    "start": "260519",
    "end": "268040"
  },
  {
    "start": "261000",
    "end": "344000"
  },
  {
    "text": "unlike uh other methods of of reusing the same data in other space like fork",
    "start": "268040",
    "end": "274400"
  },
  {
    "text": "or file backed uh memory Maps um the duplicated content doesn't have to have",
    "start": "274400",
    "end": "280120"
  },
  {
    "text": "the same origin so uh and and this opens the way",
    "start": "280120",
    "end": "285199"
  },
  {
    "text": "to for an attacker to use D duplication as a side Channel attack so how does",
    "start": "285199",
    "end": "290600"
  },
  {
    "text": "this work so if a if a an attacker wants to know whether uh",
    "start": "290600",
    "end": "296520"
  },
  {
    "text": "something a certain memory page is PR somewhere else in the system uh techer",
    "start": "296520",
    "end": "302080"
  },
  {
    "text": "can simply write uh replicate this page wait for a a possible",
    "start": "302080",
    "end": "308199"
  },
  {
    "text": "duplication and then um and then write to it so if it's not been duplicated",
    "start": "308199",
    "end": "314280"
  },
  {
    "text": "it's not copi it's not uh marked copy on right and the right will just happen very quickly if it's marked copy on",
    "start": "314280",
    "end": "321840"
  },
  {
    "text": "right uh the all kinds of things will happen um uh and most importantly the",
    "start": "321840",
    "end": "328960"
  },
  {
    "text": "the page has to be copied and the page tables have to be updated and uh in",
    "start": "328960",
    "end": "334360"
  },
  {
    "text": "short this takes way longer and this uh this can be detected from",
    "start": "334360",
    "end": "340639"
  },
  {
    "text": "JavaScript um um so um what this gives us is a one",
    "start": "340639",
    "end": "347720"
  },
  {
    "start": "344000",
    "end": "599000"
  },
  {
    "text": "bit side Channel um uh and and the fun thing is because",
    "start": "347720",
    "end": "352960"
  },
  {
    "text": "these pages are D duplicated from all over the system we can cross uh security yeah we can leak uh",
    "start": "352960",
    "end": "361039"
  },
  {
    "text": "information across security boundaries and attacker replicates a page Waits a bit and then uh and then uh sees if it",
    "start": "361039",
    "end": "369280"
  },
  {
    "text": "has been duplicated so it could be in a different virtual machine in the case of a hyper fiser",
    "start": "369280",
    "end": "374360"
  },
  {
    "text": "environment um but um uh but and in Windows it could be across",
    "start": "374360",
    "end": "380960"
  },
  {
    "text": "processes um in our case we will use this um to leak information from within",
    "start": "380960",
    "end": "386400"
  },
  {
    "text": "the process but uh but we will leak the information from within the JavaScript runtime so we and we will leak",
    "start": "386400",
    "end": "393680"
  },
  {
    "text": "information which is not available from the runtime um but first we wanted to uh",
    "start": "393680",
    "end": "401759"
  },
  {
    "text": "yeah uh see what what what else we could do with this so the most OB an obvious",
    "start": "401759",
    "end": "407800"
  },
  {
    "text": "candidate is to use a c-r channel so in this case we have uh Google Chrome and",
    "start": "407800",
    "end": "413599"
  },
  {
    "text": "Microsoft Edge as two browsers and we leak a short message uh from one uh",
    "start": "413599",
    "end": "419400"
  },
  {
    "text": "process to another through the D duplication side Channel um another",
    "start": "419400",
    "end": "424759"
  },
  {
    "text": "thing uh we can do is uh so this is a an",
    "start": "424759",
    "end": "430039"
  },
  {
    "text": "um yeah so here the two processes cooperate but we could also do this uh for processes which do not cooperate for",
    "start": "430039",
    "end": "437720"
  },
  {
    "text": "example we could detect uh what kind of software was running so when we first",
    "start": "437720",
    "end": "443160"
  },
  {
    "text": "started this we thought well uh maybe we can uh find code Pages uh just",
    "start": "443160",
    "end": "449840"
  },
  {
    "text": "uh find any uh executable you get could get your hands off um uh",
    "start": "449840",
    "end": "457759"
  },
  {
    "text": "um and then uh uh pick some code pages from these executables load them in your",
    "start": "457759",
    "end": "464759"
  },
  {
    "text": "browser and see which ones get duplicated so turns out to be a bit more difficult so this is a memory dump of",
    "start": "464759",
    "end": "471639"
  },
  {
    "text": "wordpad and then we restarted wordpad uh windows so that aslr is all different",
    "start": "471639",
    "end": "477960"
  },
  {
    "text": "and uh so these are two um two measurements where WordPress",
    "start": "477960",
    "end": "484120"
  },
  {
    "text": "wasn't running so we see some the duplication of pages which are probably always in the",
    "start": "484120",
    "end": "489879"
  },
  {
    "text": "system and then uh when WordPress is running we do see some extra pages uh",
    "start": "489879",
    "end": "496440"
  },
  {
    "text": "being D duplicated um but it wasn't uh as good",
    "start": "496440",
    "end": "501720"
  },
  {
    "text": "as we would expect it to be we expected the code pages to be really clear and",
    "start": "501720",
    "end": "506919"
  },
  {
    "text": "visible so it turns out that uh file backed contents are not D duplicated so",
    "start": "506919",
    "end": "512518"
  },
  {
    "text": "uh it's a bit more difficult for us to identify code so you can probably still",
    "start": "512519",
    "end": "517719"
  },
  {
    "text": "do it um uh just manually go through uh a memory dump and see which pages are",
    "start": "517719",
    "end": "525279"
  },
  {
    "text": "not file backed but always replicated in the same way but it's not as clear but",
    "start": "525279",
    "end": "531480"
  },
  {
    "text": "you you could still possibly do stuff like uh uh detecting uh someone running",
    "start": "531480",
    "end": "537920"
  },
  {
    "text": "uh uh yeah someone could possibly still use it to say detect that you're uh",
    "start": "537920",
    "end": "543279"
  },
  {
    "text": "running your obviously uh legally obtained a copy of Ida Pro for example",
    "start": "543279",
    "end": "550040"
  },
  {
    "text": "uh uh um so so uh so but uh so we",
    "start": "550040",
    "end": "556600"
  },
  {
    "text": "thought well uh what about uh P executable so we took Skype and uh Skype",
    "start": "556600",
    "end": "564040"
  },
  {
    "text": "is a well-known executable which unpacks itself so so these are captures from",
    "start": "564040",
    "end": "569880"
  },
  {
    "text": "when scype is not running and these are captures from when scype is running so it's clearly uh visible that there's",
    "start": "569880",
    "end": "577519"
  },
  {
    "text": "lots of uh Pages getting the duplicated um so uh viruses or malware",
    "start": "577519",
    "end": "586560"
  },
  {
    "text": "us usually also uses U uh a packer so it could be it",
    "start": "586560",
    "end": "593040"
  },
  {
    "text": "possibly the case that that you could have a virus scanner from within the browser uh",
    "start": "593040",
    "end": "599680"
  },
  {
    "start": "599000",
    "end": "699000"
  },
  {
    "text": "um so but for exploit in Edge we we need a bit more so from uh up until now we",
    "start": "599680",
    "end": "607839"
  },
  {
    "text": "have just have a single bit uh exploit which can can leak whether a complete",
    "start": "607839",
    "end": "614560"
  },
  {
    "text": "page is present in memory but that's not enough for uh uh to to leak aslr in",
    "start": "614560",
    "end": "620959"
  },
  {
    "text": "general so we need to find something better so we want to see if we can leak",
    "start": "620959",
    "end": "628320"
  },
  {
    "text": "arbitrary dat like a a pointer or a password and in this case this we we",
    "start": "628320",
    "end": "634440"
  },
  {
    "text": "need aslr pointer so the first problem is that the thing we want to leak is is",
    "start": "634440",
    "end": "640160"
  },
  {
    "text": "not as big as a page so we we need kind of need a way to to take the secret we",
    "start": "640160",
    "end": "647079"
  },
  {
    "text": "want so an ASR pointer and then create make make the",
    "start": "647079",
    "end": "654000"
  },
  {
    "text": "um make the system create a page which uh with cont contains all known data",
    "start": "654000",
    "end": "660279"
  },
  {
    "text": "except for the secret so uh this might uh uh might sound difficult but say you",
    "start": "660279",
    "end": "666680"
  },
  {
    "text": "want to leak something from a different process you might be able to do IO with this process cented data and then uh an",
    "start": "666680",
    "end": "674079"
  },
  {
    "text": "application developer won't think about well I can probably not uh yeah uh uh so",
    "start": "674079",
    "end": "682079"
  },
  {
    "text": "the fact that you can create a uh a page in memory is not part of the",
    "start": "682079",
    "end": "688240"
  },
  {
    "text": "threat model of the application designer and shouldn't be if you ask me so you might be able to create a",
    "start": "688240",
    "end": "695240"
  },
  {
    "text": "page which only depend on your secret that you want to leak uh the second",
    "start": "695240",
    "end": "700519"
  },
  {
    "start": "699000",
    "end": "792000"
  },
  {
    "text": "problem is that the entropy of the secret might be too big so you need to for every possibility you need to create",
    "start": "700519",
    "end": "706440"
  },
  {
    "text": "a page which is 400 bytes big um so and",
    "start": "706440",
    "end": "711839"
  },
  {
    "text": "then uh with with the amount of bits in of entropy you need the the size",
    "start": "711839",
    "end": "718519"
  },
  {
    "text": "requirements go up exponentially so um so so what if you want to leak more than",
    "start": "718519",
    "end": "725480"
  },
  {
    "text": "uh uh uh yeah a high entropy secret so",
    "start": "725480",
    "end": "730959"
  },
  {
    "text": "you need a way to kind of uh uh only leak part of the secret at a time so we",
    "start": "730959",
    "end": "738880"
  },
  {
    "text": "have two Primitives one is the alignment Primitives where we try to uh push the",
    "start": "738880",
    "end": "744360"
  },
  {
    "text": "secret just uh on the boundary of two pages such that one page",
    "start": "744360",
    "end": "749680"
  },
  {
    "text": "uh contains only part of the secret and the rest is filled with n data so we can",
    "start": "749680",
    "end": "755440"
  },
  {
    "text": "uh yeah leak part part of the secret uh at once uh we have a second primitive",
    "start": "755440",
    "end": "761880"
  },
  {
    "text": "where we uh overwrite part of the secret say you have a page somewhere and then the aslr pointed somewhere and then the",
    "start": "761880",
    "end": "770079"
  },
  {
    "text": "the the allocated memory gets freed and then you get a new uh allocation with a",
    "start": "770079",
    "end": "776760"
  },
  {
    "text": "buffer that you where you can push data you can push data up until a certain",
    "start": "776760",
    "end": "781880"
  },
  {
    "text": "point and then wait for D duplication uh push data up until a certain point where you overwrite part of the",
    "start": "781880",
    "end": "788600"
  },
  {
    "text": "secret uh so that's our second primitive uh in our case we will use the",
    "start": "788600",
    "end": "794040"
  },
  {
    "text": "first primitive the alignment primitive to leak a pointer to uh um uh the",
    "start": "794040",
    "end": "800440"
  },
  {
    "text": "JavaScript library in uh Edge so Ed jit",
    "start": "800440",
    "end": "806079"
  },
  {
    "text": "compiler uh uh compiles um a native code um and and the function",
    "start": "806079",
    "end": "814399"
  },
  {
    "text": "epilog of this uh native code contains all known data except for a code address",
    "start": "814399",
    "end": "820399"
  },
  {
    "text": "so uh what we do is we create lots of functions which are just big enough to",
    "start": "820399",
    "end": "828560"
  },
  {
    "text": "span uh just over one page and then because jit uh Microsoft Edge randomizes",
    "start": "828560",
    "end": "836639"
  },
  {
    "text": "the creation of um the randomiz IES the size of the functions um uh we just",
    "start": "836639",
    "end": "843279"
  },
  {
    "text": "spray it with a number of functions and then some of those will uh have a code",
    "start": "843279",
    "end": "848480"
  },
  {
    "text": "address which spend multiple uh yeah will will the code address will spend multiple pages and",
    "start": "848480",
    "end": "855360"
  },
  {
    "text": "this way we can uh leak the uh the secret in two steps so first we leak the",
    "start": "855360",
    "end": "861480"
  },
  {
    "text": "most significant random bits and then when we know this we can",
    "start": "861480",
    "end": "866920"
  },
  {
    "text": "uh probe for the the the the lower uh the least significant random bits in the",
    "start": "866920",
    "end": "872519"
  },
  {
    "text": "second stage so now uh we have used this to uh get a pointer to",
    "start": "872519",
    "end": "879920"
  },
  {
    "text": "uh to the JavaScript library so for on the second uh so but we still need to",
    "start": "879920",
    "end": "886279"
  },
  {
    "text": "get a heat pointer so and there's a problem um we we're not able to use the",
    "start": "886279",
    "end": "891920"
  },
  {
    "text": "first two Primitives to get the heit pointer uh yeah leak hit pointer we",
    "start": "891920",
    "end": "897560"
  },
  {
    "text": "couldn't use alignment which is kind of unusual because pointers are usually four or8 by a line",
    "start": "897560",
    "end": "903839"
  },
  {
    "text": "so they won't span a page and we didn't find the Primitive where we partially",
    "start": "903839",
    "end": "909399"
  },
  {
    "text": "could partially overwrite a pointer so what we had to find something else um um it's um also the the the",
    "start": "909399",
    "end": "919560"
  },
  {
    "text": "entropy of a hit pointer kind of has has uh yeah is uh bigger than",
    "start": "919560",
    "end": "927199"
  },
  {
    "text": "um uh the co code pointers so so the advertised aslr is 24 bits but in",
    "start": "927199",
    "end": "934440"
  },
  {
    "text": "reality there is all kinds of uh non-determinism uh that that uh increase",
    "start": "934440",
    "end": "941319"
  },
  {
    "text": "the randomness to say 36 bits maybe a bit less but uh so we we need to we",
    "start": "941319",
    "end": "948000"
  },
  {
    "text": "needed to uh to find uh a better way because um so given that the you have 24",
    "start": "948000",
    "end": "957319"
  },
  {
    "text": "bits of entropy so it's two to the 24th pages so two to 24 times 4K p uh uh by",
    "start": "957319",
    "end": "966240"
  },
  {
    "text": "Pages you you need 64 GB so that's already uh not uh not useful and if you",
    "start": "966240",
    "end": "974360"
  },
  {
    "text": "account for 36 bits of entropy you need 256 uh terabytes which is of course",
    "start": "974360",
    "end": "981160"
  },
  {
    "text": "entirely uh feasible and then you to account for noise you also need some",
    "start": "981160",
    "end": "986519"
  },
  {
    "text": "redundancy so you need to multiply it with some amount of redundant",
    "start": "986519",
    "end": "992360"
  },
  {
    "text": "uh redundant uh probes um yeah so it's clear this is not",
    "start": "992360",
    "end": "999639"
  },
  {
    "text": "possible so what we first did was to employ a second uh side channel uh we",
    "start": "999639",
    "end": "1005240"
  },
  {
    "text": "use the side channel for the allocation a timing side channel for allocating",
    "start": "1005240",
    "end": "1010880"
  },
  {
    "text": "objects so um in Java if you uh in JavaScript in Edge if you allocate small",
    "start": "1010880",
    "end": "1018040"
  },
  {
    "text": "objects uh you get a an array uh an object and point which points to a",
    "start": "1018040",
    "end": "1024720"
  },
  {
    "text": "buffer uh with actual data and for small arrays those are allocated together",
    "start": "1024720",
    "end": "1030480"
  },
  {
    "text": "probably for performance reasons um so these objects are then uh",
    "start": "1030480",
    "end": "1036400"
  },
  {
    "text": "yeah so we we we actually interested in the in the data part of the uh of the",
    "start": "1036400",
    "end": "1044160"
  },
  {
    "text": "object but because they're allocated together we can calculate it from a reference to the object itself",
    "start": "1044160",
    "end": "1050400"
  },
  {
    "start": "1049000",
    "end": "1164000"
  },
  {
    "text": "so these objects are allocated in uh in in slap in a slap using a slab",
    "start": "1050600",
    "end": "1056840"
  },
  {
    "text": "allocator uh uh every every uh pool is 16k in size but uh uh every megabyte",
    "start": "1056840",
    "end": "1065400"
  },
  {
    "text": "there's a new virtual Alec call which allocates an extra megabytes and uh",
    "start": "1065400",
    "end": "1071280"
  },
  {
    "text": "which gives us a timing side channel on the first allocated call um this the",
    "start": "1071280",
    "end": "1077480"
  },
  {
    "text": "first allocated object and this object happens to be at the 1 megab boundary so there we get our uh we reduce our",
    "start": "1077480",
    "end": "1085080"
  },
  {
    "text": "entropy so this is a figure of uh uh the timing it takes for it to allocate",
    "start": "1085080",
    "end": "1090559"
  },
  {
    "text": "objects so from left to right from top to bottom uh so um and we can see a lot",
    "start": "1090559",
    "end": "1099039"
  },
  {
    "text": "of noise but we also can see a clear signal so the clear signal are are the",
    "start": "1099039",
    "end": "1105000"
  },
  {
    "text": "so every 5,000 uh uh 4 40 allocations there is a there's a",
    "start": "1105000",
    "end": "1113400"
  },
  {
    "text": "allocation which takes longer than average and we we cross correlate these",
    "start": "1113400",
    "end": "1120200"
  },
  {
    "text": "so we find change of uh uh of uh we find",
    "start": "1120200",
    "end": "1125919"
  },
  {
    "text": "chains of these uh so we conclude that that those are potential 1 Megabyte",
    "start": "1125919",
    "end": "1131440"
  },
  {
    "text": "aligned objects so sometimes there's a garbage collection phase and uh it",
    "start": "1131440",
    "end": "1136480"
  },
  {
    "text": "shifts a bit but then we can see okay there's there's another correlation here um there could also be um uh some",
    "start": "1136480",
    "end": "1145120"
  },
  {
    "text": "related uh delays so here we have in the same location uh um we we see another",
    "start": "1145120",
    "end": "1153520"
  },
  {
    "text": "signal so we don't know why this happens but we just included in our list of",
    "start": "1153520",
    "end": "1158840"
  },
  {
    "text": "potentially 1 Megabyte aligned objects and that's for us that's no problem in our",
    "start": "1158840",
    "end": "1164480"
  },
  {
    "text": "attack so what we have now is we have reduced the the entropy to 20",
    "start": "1164480",
    "end": "1170159"
  },
  {
    "text": "bits so that would mean four gigabytes of memory which is still too much 4 gbes",
    "start": "1170159",
    "end": "1177240"
  },
  {
    "text": "times the redundance she you want so we need to find find uh another uh solution",
    "start": "1177240",
    "end": "1183000"
  },
  {
    "text": "to this so uh to to to solve this we uh use um",
    "start": "1183000",
    "end": "1189360"
  },
  {
    "text": "we make use of the same intuition as the birthday problem uh uh uh also called",
    "start": "1189360",
    "end": "1196240"
  },
  {
    "text": "the birthday Paradox and this says that uh in a surprisingly small group of",
    "start": "1196240",
    "end": "1201840"
  },
  {
    "text": "people the chances of uh of of two uh people having the same birthday uh gets",
    "start": "1201840",
    "end": "1208840"
  },
  {
    "text": "very high and the intuition behind this is that you don't compare just one person with uh the one person's birthday",
    "start": "1208840",
    "end": "1216320"
  },
  {
    "text": "with the other people's birthday but you're actually uh comb uh comparing",
    "start": "1216320",
    "end": "1221440"
  },
  {
    "text": "everybody's birthday with everybody's birthday and this is actually uh when you think of it exactly uh",
    "start": "1221440",
    "end": "1228760"
  },
  {
    "text": "what the D duplication mechanism uh is doing it's it's a machine that's a weird",
    "start": "1228760",
    "end": "1234880"
  },
  {
    "text": "machine that um that that uh uh that finds copies uh uh finds uh finds",
    "start": "1234880",
    "end": "1243720"
  },
  {
    "text": "identical copies and combines them so uh yeah so this uh this fits pretty well so",
    "start": "1243720",
    "end": "1251000"
  },
  {
    "text": "we can um if we have multiple secrets that we want to know we can create those",
    "start": "1251000",
    "end": "1256919"
  },
  {
    "text": "in the other space and then uh we we create create uh probes that",
    "start": "1256919",
    "end": "1264760"
  },
  {
    "text": "uh of secrets that might be in other space and then once there's a a cross",
    "start": "1264760",
    "end": "1270520"
  },
  {
    "text": "correlation uh the operating system will merge them and we can detect this so how",
    "start": "1270520",
    "end": "1276520"
  },
  {
    "start": "1276000",
    "end": "1589000"
  },
  {
    "text": "does this work in practice uh we have our list of 1 Megabyte aligned objects or potentially one megabyte aligned",
    "start": "1276520",
    "end": "1283799"
  },
  {
    "text": "object and then we take an array and we create uh references to these objects",
    "start": "1283799",
    "end": "1289960"
  },
  {
    "text": "which happen to be pointers so we we now have",
    "start": "1289960",
    "end": "1296120"
  },
  {
    "text": "pages with with secrets in them so uh and yeah so these Pages encode the",
    "start": "1296120",
    "end": "1302600"
  },
  {
    "text": "secret that we want to leak on the other hand we use a typed array which uh in",
    "start": "1302600",
    "end": "1308440"
  },
  {
    "text": "JavaScript allows us to control the memory completely uh uh to fill that array with",
    "start": "1308440",
    "end": "1317039"
  },
  {
    "text": "Pages which uh look like the same array pages but they have",
    "start": "1317039",
    "end": "1324400"
  },
  {
    "text": "um with addresses of guest objects so these objects uh and then we use we",
    "start": "1324400",
    "end": "1331000"
  },
  {
    "text": "don't use one megabyte aligned objects but larger uh objects 128 megabyte",
    "start": "1331000",
    "end": "1336880"
  },
  {
    "text": "aligned objects and then we use and for and then we use uh we cover the entire address",
    "start": "1336880",
    "end": "1344080"
  },
  {
    "text": "space with this uh uh so so we have",
    "start": "1344080",
    "end": "1349240"
  },
  {
    "text": "Pages which um yeah cover the entire address space so we kind of now have",
    "start": "1349240",
    "end": "1354679"
  },
  {
    "text": "created a divide and conquer strategy so on one end we have closely uh uh we have",
    "start": "1354679",
    "end": "1361159"
  },
  {
    "text": "allocation which are close together uh which um uh with real addresses and then uh uh",
    "start": "1361159",
    "end": "1370440"
  },
  {
    "text": "guesses uh which spend the entire ad space so we kind of have a uh we don't",
    "start": "1370440",
    "end": "1375600"
  },
  {
    "text": "need uh uh o n uh memory uh uh space",
    "start": "1375600",
    "end": "1381480"
  },
  {
    "text": "complexity but we we we can take the square root of",
    "start": "1381480",
    "end": "1386679"
  },
  {
    "text": "this so we when we have this it gets duplicated and we can test and we find",
    "start": "1386679",
    "end": "1391880"
  },
  {
    "text": "one of our objects which is enough for exploit so we have one object for which we know the",
    "start": "1391880",
    "end": "1398679"
  },
  {
    "text": "address so uh now we have um yeah leaked heip and code pointers now we can create",
    "start": "1398679",
    "end": "1405440"
  },
  {
    "text": "a fake object uh uh and then we'll use re rammer to uh uh to flip a bit and",
    "start": "1405440",
    "end": "1415159"
  },
  {
    "text": "create a reference to this object so the object we we've chosen to create is a uh",
    "start": "1415159",
    "end": "1421279"
  },
  {
    "text": "a typed array which allows us to basically manipulate uh uh any uh code",
    "start": "1421279",
    "end": "1429000"
  },
  {
    "text": "any uh writable code in the address space read and reads uh",
    "start": "1429000",
    "end": "1436679"
  },
  {
    "text": "data um so what we do is we create this fake object in an array for which we know the",
    "start": "1436679",
    "end": "1444600"
  },
  {
    "text": "address and then we use row Hammer to um to flip a bit in a reference to another",
    "start": "1444600",
    "end": "1452559"
  },
  {
    "text": "array uh to create a a reference to the uh object that we want and if we have",
    "start": "1452559",
    "end": "1460279"
  },
  {
    "text": "that then we we're basically there so we use uh row Hammer uh for the",
    "start": "1460279",
    "end": "1469080"
  },
  {
    "text": "uh um we we use a hardware vulnerability called rammer um to uh to to get this",
    "start": "1469080",
    "end": "1478640"
  },
  {
    "text": "bit flip so in in uh for rammer uh yeah",
    "start": "1478640",
    "end": "1484520"
  },
  {
    "text": "um the observation is that if you read a memory address uh repeatedly",
    "start": "1484520",
    "end": "1492600"
  },
  {
    "text": "um um um the so so memory is",
    "start": "1492600",
    "end": "1500159"
  },
  {
    "text": "um divided in rows and if you uh read the row repeatedly um uh if if you cause",
    "start": "1500159",
    "end": "1508600"
  },
  {
    "text": "the hardware to read a row repeatedly neighboring rows will uh will uh leak",
    "start": "1508600",
    "end": "1514240"
  },
  {
    "text": "charge at a higher rate than normal and if you're lucky as an attacker uh bits",
    "start": "1514240",
    "end": "1520880"
  },
  {
    "text": "will flip in neighboring rows um so we we are using this to uh",
    "start": "1520880",
    "end": "1528360"
  },
  {
    "text": "hammer uh uh arrays of references to objects and where we if we find one",
    "start": "1528360",
    "end": "1535840"
  },
  {
    "text": "where a bit flips uh we can flip a bit a reference to the right",
    "start": "1535840",
    "end": "1542600"
  },
  {
    "text": "array uh we can flip a pointer to a fake",
    "start": "1542600",
    "end": "1547760"
  },
  {
    "text": "object uh in our paper we also describe a second version where we flip a bit in a double value which uh which allows us",
    "start": "1547760",
    "end": "1556279"
  },
  {
    "text": "to uh create a change a double value into a",
    "start": "1556279",
    "end": "1561840"
  },
  {
    "text": "pointer um and combining those two we uh we we can use 23 bits out of 64 every 64",
    "start": "1561840",
    "end": "1572919"
  },
  {
    "text": "bits in memory um to create a an exploit uh U to",
    "start": "1572919",
    "end": "1578520"
  },
  {
    "text": "exploit uh so that which means rough 31 in Three uh memory bit flips will yield",
    "start": "1578520",
    "end": "1585840"
  },
  {
    "text": "uh uh a valid exploit so uh there have been uh lots of",
    "start": "1585840",
    "end": "1592720"
  },
  {
    "text": "software well there have been some um some attempts to mitigate rammer in",
    "start": "1592720",
    "end": "1599080"
  },
  {
    "text": "software but it's a a pretty hard problem uh so uh memory luckily me",
    "start": "1599080",
    "end": "1605440"
  },
  {
    "text": "mitigating memory dup duplication is a bit easier so we suggest just to disable",
    "start": "1605440",
    "end": "1611640"
  },
  {
    "text": "memory D duplication and uh this is uh also what Microsoft have have done uh uh",
    "start": "1611640",
    "end": "1620000"
  },
  {
    "text": "in their latest update um although you won't see it when you try it so but we",
    "start": "1620000",
    "end": "1628000"
  },
  {
    "text": "don't notice any the duplications anymore so um the takeaways are um",
    "start": "1628000",
    "end": "1636039"
  },
  {
    "text": "memory D duplication is a is a way more powerful uh side Channel than previously",
    "start": "1636039",
    "end": "1642120"
  },
  {
    "text": "thought um if you optimize uh uh for um",
    "start": "1642120",
    "end": "1649360"
  },
  {
    "text": "uh try to optimize uh memory uh memory",
    "start": "1649360",
    "end": "1655200"
  },
  {
    "text": "usage both by by uh shrinking the the memory technology uh in Hardware as uh",
    "start": "1655200",
    "end": "1663200"
  },
  {
    "text": "trying to reduce its usage in software it might come at a price um and finally",
    "start": "1663200",
    "end": "1669679"
  },
  {
    "text": "uh even without uh bugs in your browser you might still be uh owned uh uh",
    "start": "1669679",
    "end": "1679519"
  },
  {
    "text": "uh yeah in this case using D duplication and row Hammer um if you want more uh",
    "start": "1680039",
    "end": "1685799"
  },
  {
    "text": "know more about this we have a website on this project uh we also have uh other",
    "start": "1685799",
    "end": "1691679"
  },
  {
    "text": "projects which might be interesting to you also on uh uh um mobile mobile",
    "start": "1691679",
    "end": "1698760"
  },
  {
    "text": "security and uh uh Cloud security uh and now uh I'll show a demo",
    "start": "1698760",
    "end": "1707640"
  },
  {
    "start": "1707000",
    "end": "1949000"
  },
  {
    "text": "um so in Windows the duplication happens every 15 minutes so it's a uh it's a",
    "start": "1707640",
    "end": "1713519"
  },
  {
    "text": "recorded demo so because it might take a bit long um so here we have started uh",
    "start": "1713519",
    "end": "1721360"
  },
  {
    "text": "um the uh uh D",
    "start": "1721360",
    "end": "1728440"
  },
  {
    "text": "duplication uh it's now doing a sweep so we have uh created p uh Pages which will",
    "start": "1728440",
    "end": "1735240"
  },
  {
    "text": "allow us to uh detect heat pointers and code pointers so I'll",
    "start": "1735240",
    "end": "1741080"
  },
  {
    "text": "skip until the first page here uh you can you can see uh it has found uh",
    "start": "1741080",
    "end": "1750880"
  },
  {
    "text": "actually two heat pointers and this is oh this is a bit",
    "start": "1750880",
    "end": "1757000"
  },
  {
    "text": "annoying uh yeah so um it it it has found actually uh uh code addresses U so",
    "start": "1757000",
    "end": "1766600"
  },
  {
    "text": "actually this is a mask which is applied so it's actually this these two won't",
    "start": "1766600",
    "end": "1773360"
  },
  {
    "text": "don't uh these two signals don't detect anything else than that are uh Pages",
    "start": "1773360",
    "end": "1780120"
  },
  {
    "text": "which uh which don't contain any secrets but starting from here uh we found the first",
    "start": "1780120",
    "end": "1787840"
  },
  {
    "text": "bite and the second bite in the first phase then we go",
    "start": "1787840",
    "end": "1794880"
  },
  {
    "text": "further doing the the the the second D duplication cycle we have found the",
    "start": "1794880",
    "end": "1800720"
  },
  {
    "text": "complete address after that we we do we start a rammer attack for which we first have to",
    "start": "1800720",
    "end": "1807640"
  },
  {
    "text": "uh find cash eviction sets and then uh this also",
    "start": "1807640",
    "end": "1816679"
  },
  {
    "text": "no I'll just let it run um it's maybe good to to show um so this attack will",
    "start": "1817320",
    "end": "1825279"
  },
  {
    "text": "um work pretty fast but that's because uh for for the capture we reduced the um",
    "start": "1825279",
    "end": "1833200"
  },
  {
    "text": "we we reduced the uh the refresh rate of the memory modules uh to to quickly give",
    "start": "1833200",
    "end": "1840799"
  },
  {
    "text": "us a uh uh bit flips but uh we have now also uh we're also we also have uh can",
    "start": "1840799",
    "end": "1849679"
  },
  {
    "text": "now create bit flips using the native uh Native refresh",
    "start": "1849679",
    "end": "1855000"
  },
  {
    "text": "rate okay now it has found all the cash sets actually it missed a few but it's",
    "start": "1855000",
    "end": "1862480"
  },
  {
    "text": "uh it's still okay so now it uh I think it yeah in a few moments it will find a",
    "start": "1862480",
    "end": "1869639"
  },
  {
    "text": "bit flip and it will be a bit flip but which uh has the correct um so now it's",
    "start": "1869639",
    "end": "1877840"
  },
  {
    "text": "stopped so I think it's now hammering and",
    "start": "1877840",
    "end": "1883440"
  },
  {
    "text": "then um when it's done uh so here actually",
    "start": "1883760",
    "end": "1889600"
  },
  {
    "text": "the the error uh the the me lock message wasn't updated but here it found the bit",
    "start": "1889600",
    "end": "1895039"
  },
  {
    "text": "flip in this case uh we can change a double into a pointer value and then uh",
    "start": "1895039",
    "end": "1901519"
  },
  {
    "text": "uh we do our hammering and the end result is an array buffer object which",
    "start": "1901519",
    "end": "1906639"
  },
  {
    "text": "points to another array buffer object so we can basically change where the one",
    "start": "1906639",
    "end": "1912120"
  },
  {
    "text": "array buffer object points using another array buffer and then we basically say okay",
    "start": "1912120",
    "end": "1918000"
  },
  {
    "text": "I want to read this piece of memory or I want to rewrite this piece of memory and",
    "start": "1918000",
    "end": "1923200"
  },
  {
    "text": "uh that allows us to uh get control over the process so that was the demo",
    "start": "1923200",
    "end": "1930440"
  },
  {
    "text": "so any",
    "start": "1930440",
    "end": "1933720"
  },
  {
    "text": "questions okay thank",
    "start": "1940799",
    "end": "1944440"
  },
  {
    "text": "you",
    "start": "1946080",
    "end": "1949080"
  }
]