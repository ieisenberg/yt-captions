[
  {
    "text": "so the topic that I'm going to present today is called uh automating Linux malware analysis using lemon sandbox as",
    "start": "120",
    "end": "5359"
  },
  {
    "text": "the name says the focus would be on the Linux malware and analyzing the Linux malware so before I move on let me",
    "start": "5359",
    "end": "10719"
  },
  {
    "text": "introduce myself my name is monaa I work with uh Cisco's incident Response Team uh where I focus on threat intelligence",
    "start": "10719",
    "end": "17000"
  },
  {
    "text": "and investigation of advanced cyber attacks basically we focus on the AP investigations and research on the AP attacks so my fields of Interest are",
    "start": "17000",
    "end": "23599"
  },
  {
    "text": "reverse engineering malware analysis and memory forensics I'm also a member of a security research Community called",
    "start": "23599",
    "end": "28720"
  },
  {
    "text": "security exploded okay so and this is this is where you can follow me so this is the Twitter and my blog where you can",
    "start": "28720",
    "end": "34239"
  },
  {
    "text": "follow me and this is an email account in case you you don't have enough time for questions you can feel free to send me an email I would be happy to answer",
    "start": "34239",
    "end": "40360"
  },
  {
    "text": "your questions so this is the this is what we're going to this is what I'm going to cover today so we're going to talk about",
    "start": "40360",
    "end": "46840"
  },
  {
    "text": "what is malware so probably you already know what malware is so then I'm going to talk about what malware analysis is why malware analysis is essential and",
    "start": "46840",
    "end": "53680"
  },
  {
    "text": "then I'm going to talk about three different types of analysis uh and then I'll show you how to how how these three",
    "start": "53680",
    "end": "59079"
  },
  {
    "text": "types of analysis can be automated using a tool called Limon and and then I'm going to uh demonstrate three uh three",
    "start": "59079",
    "end": "65560"
  },
  {
    "text": "I'm going to show you three video demos of real real world Linux malware samples uh uh so the the the till till the demo",
    "start": "65560",
    "end": "76200"
  },
  {
    "text": "uh I'll be I'll be covering uh I I'll take like 20 minutes till the demo and",
    "start": "76200",
    "end": "81320"
  },
  {
    "text": "after that around 35 to 40 minutes uh I'm going to show you the analysis of the of of those malware",
    "start": "81320",
    "end": "86759"
  },
  {
    "text": "samples okay so what is malware I'm going to quickly schim or this uh this slide so what is Mal the code that is",
    "start": "86759",
    "end": "93640"
  },
  {
    "text": "malicious uh uh uh it can get into your system without your consent so it can come in Via spear fishing email or it",
    "start": "93640",
    "end": "100000"
  },
  {
    "text": "can come in while watering attack or driveby downloads so what they do they normally disrupt your computer operation",
    "start": "100000",
    "end": "106439"
  },
  {
    "text": "they steal sensitive information from your system uh they can allow attackers access to the system like in case of AP",
    "start": "106439",
    "end": "111520"
  },
  {
    "text": "malwares uh the AP actors use red programs which is remote access tro which allow attackers access to the",
    "start": "111520",
    "end": "116960"
  },
  {
    "text": "system after which they can they can hop into other systems and then find the data of interest and xfil the data out",
    "start": "116960",
    "end": "122600"
  },
  {
    "text": "of the network and it can spy on system so these are some of the things that the Mal Mal does okay so what is malware analysis",
    "start": "122600",
    "end": "129800"
  },
  {
    "text": "and why malware analysis so malware analysis to put it in simple terms it's the study of the malware Behavior so it's basically to understand the",
    "start": "129800",
    "end": "135879"
  },
  {
    "text": "characteristics of the malware how to detect and eliminate it so why malware analysis basically to answer a lot of questions so when an organization is",
    "start": "135879",
    "end": "142200"
  },
  {
    "text": "infected with malware you want to answer questions like how did it get into a system uh is it spreading to other",
    "start": "142200",
    "end": "147280"
  },
  {
    "text": "systems how long it's been there who is behind us uh uh uh and those kind of stuff so in",
    "start": "147280",
    "end": "152959"
  },
  {
    "text": "order to answer questions the malware analysis helps and also you want to understand the functionality of the malware and the nature and the purpose",
    "start": "152959",
    "end": "158120"
  },
  {
    "text": "of the malware you want to understand if a malware is an HTP bot is it taking commands from an IRC channel is it is it",
    "start": "158120",
    "end": "163959"
  },
  {
    "text": "logging key strokes is it stealing sensitive information and so on so that's where malware analysis helps and also from an incident response",
    "start": "163959",
    "end": "169560"
  },
  {
    "text": "perspective you want to determine the network and the host base indicators you want to determine indicate you want to determine if a malware is connecting to",
    "start": "169560",
    "end": "175080"
  },
  {
    "text": "a command and control server what command and control server it is connecting to uh or is it taking commands and doing something or is it",
    "start": "175080",
    "end": "180760"
  },
  {
    "text": "downloading additional components or is it uh doing a lateral movement or exfiltrating data out of the network so",
    "start": "180760",
    "end": "186319"
  },
  {
    "text": "that's where the malware analysis helps and also you might also want to determine the host base indicators you want to see if a malware is logging a",
    "start": "186319",
    "end": "192280"
  },
  {
    "text": "keystrokes where is it logging is it logging to a file or is it creating additional process is it creating newex and so on these are some of the things",
    "start": "192280",
    "end": "198560"
  },
  {
    "text": "uh um uh to answer these questions the Mal analysis helps and also after you",
    "start": "198560",
    "end": "204080"
  },
  {
    "text": "determine the network network indicators and the host base indicators we call it the indicators of compromise you can add this to your security Dev to determine",
    "start": "204080",
    "end": "210680"
  },
  {
    "text": "additional infections okay so why focus on Linux Linux Linux Linux Mal analysis because",
    "start": "210680",
    "end": "217760"
  },
  {
    "text": "Linux is growing in its popularity and also uh there lot of lot of uh devices",
    "start": "217760",
    "end": "222959"
  },
  {
    "text": "use Linux the servers that serve the web content use Linux the mainframe computers the super computers use Linux",
    "start": "222959",
    "end": "228040"
  },
  {
    "text": "and also Linux runs on embeded systems the smartphones the Android runs on Linux kernel uh and also if you look up",
    "start": "228040",
    "end": "234000"
  },
  {
    "text": "Wikipedia you'll see that mission critical systems like the uh the they use Linux in the robotic PR robotics in",
    "start": "234000",
    "end": "240400"
  },
  {
    "text": "Mars R and also again if you look at Wikipedia you'll see that there are like the top 500 superc computers in the",
    "start": "240400",
    "end": "246159"
  },
  {
    "text": "world run some flavor of Linux so and also these days uh Linux is growing its popularity in the desktop market so",
    "start": "246159",
    "end": "252959"
  },
  {
    "text": "making it making it Target for uh malware attacks so which means from an incident response perspective we need",
    "start": "252959",
    "end": "258320"
  },
  {
    "text": "tools to uh uh analyze and investigate such malware attacks so now coming to the types of",
    "start": "258320",
    "end": "265000"
  },
  {
    "text": "malware analysis if you if you read any articles or the books they talk about two types of analysis I'm going to cover the third type of analysis as well so",
    "start": "265000",
    "end": "272000"
  },
  {
    "text": "there are three types of analysis the static analysis Dynamic analysis and memory analysis static analysis is where",
    "start": "272000",
    "end": "277160"
  },
  {
    "text": "you're going to analyze the malware sample without actually executing it so you're trying to determine the characteristics of the malware without",
    "start": "277160",
    "end": "282280"
  },
  {
    "text": "even executing and in case of dynamic analysis what you're doing is you're executing the malware in a virtualized environment monitoring its activity to",
    "start": "282280",
    "end": "288400"
  },
  {
    "text": "see what it's doing uh and then in memory analysis once you execute the sample you take the memory image of the",
    "start": "288400",
    "end": "295120"
  },
  {
    "text": "infected system and you analyze for forensic artifacts so these type these three types of analysis gives different perspective this would give a",
    "start": "295120",
    "end": "301240"
  },
  {
    "text": "perspective before execution and this this would give a p Dynamic analysis would give the perspective during",
    "start": "301240",
    "end": "306520"
  },
  {
    "text": "execution and memory memory analysis will give you the postmortem or the forensic",
    "start": "306520",
    "end": "312320"
  },
  {
    "text": "perspective so these are some of the steps that you might want to do in static analysis uh determine the file",
    "start": "312320",
    "end": "317840"
  },
  {
    "text": "type the reason why you want to determine the file type is because uh it it tells you the architecture the file",
    "start": "317840",
    "end": "322919"
  },
  {
    "text": "is targeted towards for example if a file type is a p file you know the target is Windows or if a file type is a l file you know it's a Unix based system",
    "start": "322919",
    "end": "330199"
  },
  {
    "text": "and also you might also want to determine the cryptographic hash like the md5 hash or the Sha one or the Sha 256 hash so that you can fingerprint",
    "start": "330199",
    "end": "336639"
  },
  {
    "text": "your malware so the reason is let's say when you execute a malware the malare might drop additional components by",
    "start": "336639",
    "end": "341919"
  },
  {
    "text": "fingerprinting your malware and you can calculate the md5 hash of the drop component to see if it is the same same",
    "start": "341919",
    "end": "347560"
  },
  {
    "text": "component it it dropped or it is it's a different component if it's the same component you know it's the same malware if it's a different one you know that",
    "start": "347560",
    "end": "353280"
  },
  {
    "text": "you have few more samples to analyze and also another use of cryptographic hash is like to look up services like wirus",
    "start": "353280",
    "end": "358880"
  },
  {
    "text": "total you might want want to use cryptographic has to look up virus total to see how many AV vendors are detecting",
    "start": "358880",
    "end": "364600"
  },
  {
    "text": "this or what what what what is a malware you're dealing with and remember we are still in the static analysis where we are not even executing the sample by",
    "start": "364600",
    "end": "371240"
  },
  {
    "text": "trying to determine the characteristics of the malware and also another use of cryptographic hashes like do a Google uh",
    "start": "371240",
    "end": "376800"
  },
  {
    "text": "Google search or a search on the search engine to see if anybody has already uh",
    "start": "376800",
    "end": "381840"
  },
  {
    "text": "uh already analyzed this sample and has a blog post on it so these are some of the uses of cryptographic hash and also",
    "start": "381840",
    "end": "387240"
  },
  {
    "text": "you might want to extract the strings from the malware because strings can uh contain very interesting information",
    "start": "387240",
    "end": "392400"
  },
  {
    "text": "like it could have references to uh IP address domain names the URLs the file names so which might give an indication",
    "start": "392400",
    "end": "398800"
  },
  {
    "text": "of what the capability of the malware is so and also you might want to determine the cap file ausc if a file is upated",
    "start": "398800",
    "end": "404919"
  },
  {
    "text": "that haers use aerations like the Packers or the crypters to to th your analysis or to th your reverse",
    "start": "404919",
    "end": "410960"
  },
  {
    "text": "engineering uh reverse engineering so you might want to determine if a if a malare is suff fiscated with Packers and",
    "start": "410960",
    "end": "416720"
  },
  {
    "text": "crypters and also submitting to the AV scanner like I said so you might want to submit your hash to I scanner to see",
    "start": "416720",
    "end": "422000"
  },
  {
    "text": "what Mal what malware you're dealing with and also fuzzy hash in comparison now this fuzzy hash is different from",
    "start": "422000",
    "end": "427039"
  },
  {
    "text": "the cryptographic hash now cryptographic hash doesn't tell you how tell you that the samples are identical whereas in",
    "start": "427039",
    "end": "434240"
  },
  {
    "text": "fuzzy hash let's say for example there two samples of the same malar variance there are like one or two bytes that are different but the cryptographic hash for",
    "start": "434240",
    "end": "441199"
  },
  {
    "text": "these two samples would be completely different but in case a fuzzy hash what happens is it will tell you how identical this whether these samples are",
    "start": "441199",
    "end": "447879"
  },
  {
    "text": "identical it will tell you the percentage similarity so that you get an idea these two samples belong to the same malware variance or from a bigger",
    "start": "447879",
    "end": "454960"
  },
  {
    "text": "perspective they belong to the same attacker group okay and then you might also want to determine the elf",
    "start": "454960",
    "end": "460919"
  },
  {
    "text": "characteristics which will give the metadata of the of the elf file and also symbols and sections can give you some",
    "start": "460919",
    "end": "466080"
  },
  {
    "text": "interesting information symbols can uh give you references to the interesting function name now you if you if you see",
    "start": "466080",
    "end": "471759"
  },
  {
    "text": "a function name like flooder you know that probably that you're dealing with a Dos malware and sections can tell you if",
    "start": "471759",
    "end": "477639"
  },
  {
    "text": "a uh if there is any discrepan see in the in the L file so for example some if you use Packers like upx it will remove",
    "start": "477639",
    "end": "483919"
  },
  {
    "text": "the section header completely so by looking at the section if you if you don't see any sections in a l file you it's suspicious okay and also you might",
    "start": "483919",
    "end": "491120"
  },
  {
    "text": "want to dis disassemble the sample to uh to understand the capabilities of the malware so in Dynamic analysis like I",
    "start": "491120",
    "end": "496919"
  },
  {
    "text": "said you'll be executing and monitoring its activity so you want to execute while you're executing you you might you",
    "start": "496919",
    "end": "502360"
  },
  {
    "text": "might want to monitor its file system activity how it's interacting with the file system is it creating additional process is it connecting to the network",
    "start": "502360",
    "end": "509080"
  },
  {
    "text": "so this are these are some of the things that you'll be determining you'll be determining using Dynamic analysis you might also want to do system called",
    "start": "509080",
    "end": "515000"
  },
  {
    "text": "tracing to see all the things that malare is doing and next is once you execute the",
    "start": "515000",
    "end": "521200"
  },
  {
    "text": "sample you take the memory image you analyze the memory image for forensic artifacts so it can give you very interesting information when I show you",
    "start": "521200",
    "end": "527680"
  },
  {
    "text": "the demo it'll be clear but these are some of the information that you can find uh you can you can determine the list of running process on the system",
    "start": "527680",
    "end": "534000"
  },
  {
    "text": "you can determine the list of network connections the shared shared objects the kernel modules loaded by the uh the",
    "start": "534000",
    "end": "539440"
  },
  {
    "text": "Cel modules loaded the code injection the hooking and so on so when I show you the demo it will be clear so uh now we talked about uh uh",
    "start": "539440",
    "end": "547880"
  },
  {
    "text": "static Dynamic and memory analysis so what I did was uh I I wrote a tool to automate the static Dynamic and memory",
    "start": "547880",
    "end": "553800"
  },
  {
    "text": "analysis which I call it Limon so it's a Sandbox for analyzing Linux malware it developed as a research project because",
    "start": "553800",
    "end": "559120"
  },
  {
    "text": "I I I was learn uh I I was good at Windows malware analysis but I wanted to learn Linux smaller analysis so and I I",
    "start": "559120",
    "end": "565279"
  },
  {
    "text": "look for some of the sandbox for Linux I couldn't find anything that did what I wanted to do so I wrote my own sandbox",
    "start": "565279",
    "end": "571680"
  },
  {
    "text": "uh to automated it's written in Python and it uses various open source tools to perform the static Dynamic and memory",
    "start": "571680",
    "end": "578000"
  },
  {
    "text": "analysis so this is the working of libon so what it does is it takes the malware sample as input so then it does static",
    "start": "578000",
    "end": "585240"
  },
  {
    "text": "analysis that is analyzing without executing it then it transfers the malware to the virtualized environment",
    "start": "585240",
    "end": "591399"
  },
  {
    "text": "executes it uh monitors its activity then it takes the memory image and does",
    "start": "591399",
    "end": "596519"
  },
  {
    "text": "memory analysis and stores the reports uh stores it a report file so these are some of the tools that",
    "start": "596519",
    "end": "603279"
  },
  {
    "text": "are used by Limon it uses Yara Yara python for Packer detection so you can write your if you know Yara you can",
    "start": "603279",
    "end": "608920"
  },
  {
    "text": "write your own signatures for Packers or you can write signatures for determine the capability of the malware to do that it uses Yara Python and it uses virus",
    "start": "608920",
    "end": "615959"
  },
  {
    "text": "total public API to submit the to search the hash on virus total to see how many AV vendors are detecting it and for",
    "start": "615959",
    "end": "621959"
  },
  {
    "text": "fuzzy hash it uses SSD and uh it uses strings utility to extract the unic code and the aski strings from the from the",
    "start": "621959",
    "end": "628360"
  },
  {
    "text": "from the malware and then it uses ldd to display all the shared objects that the malware relies on and then it uses redel",
    "start": "628360",
    "end": "636880"
  },
  {
    "text": "for displaying the elf elf characteristics the metadata of the elf file I Sim basically to simulate all the",
    "start": "636880",
    "end": "642320"
  },
  {
    "text": "services so this is this is useful while uh let's say if a malware is trying to download a file from xyz.com a.exe from",
    "start": "642320",
    "end": "649399"
  },
  {
    "text": "xyz.com first thing it has to do is to resolve the domain right so but at the same time let's say you don't want to",
    "start": "649399",
    "end": "654760"
  },
  {
    "text": "allow the malware to connect to the actual command and control server what you do is you fake services like DNS HTP",
    "start": "654760",
    "end": "660480"
  },
  {
    "text": "SMTP and all those services so that you can give fake response to the malware that way you can determine the uh what",
    "start": "660480",
    "end": "665680"
  },
  {
    "text": "what the malware is doing while it's running and then it uses TCP dump for capturing the packet and volatility",
    "start": "665680",
    "end": "671760"
  },
  {
    "text": "memory memory forensic framework for doing the memory forensics and Sr and CIS dig for basically doing the dynamic",
    "start": "671760",
    "end": "678000"
  },
  {
    "text": "analysis so while it's executing it traces the system calls to see what what what the malare is doing and these are the supported file",
    "start": "678000",
    "end": "685200"
  },
  {
    "text": "times so uh if you know Linux so it need not be always y file uh uh that is",
    "start": "685200",
    "end": "692160"
  },
  {
    "text": "malicious it can come as a pearl Pearl script it can come as a the malware can come as a PHP dropper it can come as a",
    "start": "692160",
    "end": "697920"
  },
  {
    "text": "python script so basically these are some of the supported file types and there is also support for the loadable kernel modules let's say you want to",
    "start": "697920",
    "end": "703760"
  },
  {
    "text": "analyze the kernel objects so you can do that and these are some of the general",
    "start": "703760",
    "end": "709800"
  },
  {
    "text": "features of lemon so it can run in the sandbox mode meaning like I said it simulates all the services when it's",
    "start": "709800",
    "end": "715560"
  },
  {
    "text": "running in the sandbox mode the idea is not to allow the malware to connect to the actual command and control server but try but try try to determine as much",
    "start": "715560",
    "end": "722200"
  },
  {
    "text": "as uh uh uh try to determine what the malware does just by simulating the services and it can run in the internet",
    "start": "722200",
    "end": "728040"
  },
  {
    "text": "mode sometimes you might want to allow the malware to connect to the actual command and control server let's say for example if a malware is downloading additional component you might want to",
    "start": "728040",
    "end": "734720"
  },
  {
    "text": "allow it to connect to the actual command and control server to see what it uh what it does after downloading the sample so that's why uh that's why the",
    "start": "734720",
    "end": "742240"
  },
  {
    "text": "internet mode and like I said if it's if you're running in sandbox mode it simulates all the services and it also",
    "start": "742240",
    "end": "748079"
  },
  {
    "text": "has an option to run for a specified time so let's say if a malware sleeps for like 60 seconds you might want to",
    "start": "748079",
    "end": "753360"
  },
  {
    "text": "run it for like 120 seconds to determine its Behavior so that's where this uh time time option is helps and also it",
    "start": "753360",
    "end": "760560"
  },
  {
    "text": "captures the desktop screenshot and reports on the malware behavior these are some of the static analysis features that we talked about",
    "start": "760560",
    "end": "766440"
  },
  {
    "text": "so it determines the file type file size md5 hash fuzzy hash and also one more thing it does is uh it it it once it",
    "start": "766440",
    "end": "773680"
  },
  {
    "text": "determines the fuzzy hash it compares the fuzzy hash of the sample with the with the fuzzy hash of the previously",
    "start": "773680",
    "end": "778839"
  },
  {
    "text": "sub samples it keeps a master list so the idea is so that when you submit a sample it Compares with that list and tells you if there is a percentage",
    "start": "778839",
    "end": "784880"
  },
  {
    "text": "similarity that way you can know that uh this malware sample is is a variant of",
    "start": "784880",
    "end": "790000"
  },
  {
    "text": "the previously uh analyzed samples and also displays the elf characteristics extract strings uh",
    "start": "790000",
    "end": "796800"
  },
  {
    "text": "determine the Packers using G rules uh and also it determines capabilities like the IRC capabilities and other",
    "start": "796800",
    "end": "803320"
  },
  {
    "text": "capabilities using Gara rules and these are some of the things that we already talked about so in Dynamic analysis",
    "start": "803320",
    "end": "809760"
  },
  {
    "text": "it gives you different options so basically to do Dynamic analysis it relies on two tools yesr and CIS dig",
    "start": "809760",
    "end": "816440"
  },
  {
    "text": "this or that sray or sis dig uh in s while when if you are running through",
    "start": "816440",
    "end": "821959"
  },
  {
    "text": "sray there are two options one is filtered C trays and unfiltered call Tray the default option is filtered call",
    "start": "821959",
    "end": "827839"
  },
  {
    "text": "Tray using uh using EST tray so the reason is because it it only monitors the specific system calls which is",
    "start": "827839",
    "end": "834279"
  },
  {
    "text": "commonly used by the malwares the idea is so that it's less noisy so you don't have to look at like th lines of uh uh",
    "start": "834279",
    "end": "841199"
  },
  {
    "text": "data to to determine what the malware is doing and but let's say you want",
    "start": "841199",
    "end": "846240"
  },
  {
    "text": "unfiltered uh call Trace you want a more verbus results uh you can choose that option which is unfiltered call Trace",
    "start": "846240",
    "end": "853279"
  },
  {
    "text": "which which runs through CISD and it monitors all the all the system calls and then the same same same options",
    "start": "853279",
    "end": "858880"
  },
  {
    "text": "using CISD you can use filtered system monitoring to monitor only specific calls or you can use unfiltered system",
    "start": "858880",
    "end": "864680"
  },
  {
    "text": "monitoring to monitor uh all the all the system calls and again once it does it displays the",
    "start": "864680",
    "end": "870680"
  },
  {
    "text": "DNS summary uh shows the TCP conversation it stores the packet captures and other artifacts for later",
    "start": "870680",
    "end": "876040"
  },
  {
    "text": "analysis when I show the demo again it'll be clear so and one and memory analysis these are some of the memory",
    "start": "876040",
    "end": "881800"
  },
  {
    "text": "analysis features there are lot of features the Limon relies on volatility Advanced memory for forensic framework",
    "start": "881800",
    "end": "886920"
  },
  {
    "text": "so basically I've used almost all the all the plugins of volatility so basically it offers lot of capabilities",
    "start": "886920",
    "end": "892279"
  },
  {
    "text": "now uh this is useful if you're dealing with malware which are which are root",
    "start": "892279",
    "end": "897480"
  },
  {
    "text": "kits or when you're dealing with root kits or malwares that has stealth capabilities so uh basically it allows",
    "start": "897480",
    "end": "903320"
  },
  {
    "text": "you to do it allows you to list the process list process with arguments display network connections uh uh shows",
    "start": "903320",
    "end": "910000"
  },
  {
    "text": "hidden hidden kernel modules hidden sh hidden shared libraries code injection hooking different types of hooking and",
    "start": "910000",
    "end": "915360"
  },
  {
    "text": "so on so basically there are lot of things here so just to show you that uh how uh",
    "start": "915360",
    "end": "921720"
  },
  {
    "text": "how how Limon works and also to show you the character how Linux malware works so I have a demo so the first demo is the",
    "start": "921720",
    "end": "928000"
  },
  {
    "text": "analysis of a Linux malware called tsunami so which is a Dos malware let me bring up the video demo and show you the",
    "start": "928000",
    "end": "934680"
  },
  {
    "text": "stuff okay okay",
    "start": "934680",
    "end": "941199"
  },
  {
    "text": "so so these are the options in lemon as you can see here it supports various",
    "start": "941199",
    "end": "946399"
  },
  {
    "text": "file types Pearl python PHP shell and stuff like that and also this iPhone C like I said the default option is to use",
    "start": "946399",
    "end": "953199"
  },
  {
    "text": "the filtered call Tray using CISD in case you want unfiltered call Tray you can use this option here iph",
    "start": "953199",
    "end": "959519"
  },
  {
    "text": "and iPhone e using CISD and iPhone capital E again using CISD both filtered and unfiltered system monitoring and",
    "start": "959519",
    "end": "965800"
  },
  {
    "text": "also with iPhone M option you can uh tell Limon to perform memory memory analysis and also with iPhone uh with",
    "start": "965800",
    "end": "972639"
  },
  {
    "text": "capital Y it is a verbus memory analysis because there are some plugins in volatility which are slow which detects",
    "start": "972639",
    "end": "978279"
  },
  {
    "text": "hooking hooking capabilities so you can use iph hem but it'll take some time to run okay just to show you",
    "start": "978279",
    "end": "987079"
  },
  {
    "text": "what I'm doing right now is uh I'm I'm I'm giving this malware sample to lemon",
    "start": "992680",
    "end": "997880"
  },
  {
    "text": "and I asking it to run for 40 seconds and also asking it to do memory analysis here so you when I play the video you",
    "start": "997880",
    "end": "1004319"
  },
  {
    "text": "will see a lot of things happening on the screen so what what lemon is doing is it's going to do the static analysis it's going to pop up the VM uh so and",
    "start": "1004319",
    "end": "1011399"
  },
  {
    "text": "transfers the file to the VM executes the malware sample in the VM monitor its activities and then suspends the VM and",
    "start": "1011399",
    "end": "1017120"
  },
  {
    "text": "takes the memory image and does memory analysis and once the same thing that you see in the screen is also reported",
    "start": "1017120",
    "end": "1022199"
  },
  {
    "text": "back in a report file so uh you can ignore what's happening on the screen we we look at the same thing in the reports",
    "start": "1022199",
    "end": "1028000"
  },
  {
    "text": "file so you see that as you can see here it started doing the static analysis and",
    "start": "1028000",
    "end": "1034120"
  },
  {
    "text": "you'll see that when I play the video it popped up the VM okay and also it is simulating all the services like I said",
    "start": "1034120",
    "end": "1041120"
  },
  {
    "text": "uh because we are running in the sandbox mode it is simulating all the services like DNS IRC uh all those services so",
    "start": "1041120",
    "end": "1047558"
  },
  {
    "text": "that it can give fake response to the malware okay and you see",
    "start": "1047559",
    "end": "1055480"
  },
  {
    "text": "the now it is execute executing the file for 40 seconds after executing the file",
    "start": "1055480",
    "end": "1061840"
  },
  {
    "text": "for 40 seconds it is also running the monitoring tools you'll see that uh it will suspend the",
    "start": "1061840",
    "end": "1068840"
  },
  {
    "text": "VM as you can see it suspended the VM now suspending the VM creates a memory image which is the infected memory image",
    "start": "1069039",
    "end": "1075720"
  },
  {
    "text": "of the infected machine now it takes the memory image and",
    "start": "1075720",
    "end": "1080840"
  },
  {
    "text": "uh does memory analysis using volatility Advanced memory fenic framew framework",
    "start": "1081080",
    "end": "1086280"
  },
  {
    "text": "so once it is done it stores the results in this directory so let's go to the directory and see what we can find so",
    "start": "1086280",
    "end": "1092159"
  },
  {
    "text": "this is the report file it stores in a text file and also you see that it stored other artifacts like the packet",
    "start": "1092159",
    "end": "1097480"
  },
  {
    "text": "capture so let's look at the report file",
    "start": "1097480",
    "end": "1101440"
  },
  {
    "text": "first so these are the static analysis results okay as you can can see here the file",
    "start": "1103000",
    "end": "1109760"
  },
  {
    "text": "type is a 32-bit uh elf ex uh elf elf executable file so you know that Target",
    "start": "1109760",
    "end": "1115880"
  },
  {
    "text": "is Linux okay also you see that it it is dynamically linked meaning it it relies",
    "start": "1115880",
    "end": "1121280"
  },
  {
    "text": "on some of the shared libraries and also it is not stried meaning the symbols are not stried which",
    "start": "1121280",
    "end": "1127679"
  },
  {
    "text": "means looking at the symbol table can give you references to some interesting function names and the variable names",
    "start": "1127679",
    "end": "1132720"
  },
  {
    "text": "okay so we'll see that in some time also you see that it calculated the file size MD",
    "start": "1132720",
    "end": "1138919"
  },
  {
    "text": "and the and the fuzzy hash here the SSD hash and also it determine the elf elf",
    "start": "1138919",
    "end": "1145240"
  },
  {
    "text": "characteristics here and you also see",
    "start": "1145240",
    "end": "1153480"
  },
  {
    "text": "that it did an SSD comparison and you see that there is 100% match with a file",
    "start": "1153480",
    "end": "1159720"
  },
  {
    "text": "that was previously submitted to Limon so which means this is the same sample that was analyzed before okay",
    "start": "1159720",
    "end": "1168320"
  },
  {
    "text": "and then you can see that it it has it has extracted the strings the strings are stored in a separate file which we'll see in some time so it is stored",
    "start": "1169039",
    "end": "1175440"
  },
  {
    "text": "in a separate text file strings aski and strings Unicode okay we'll come to that",
    "start": "1175440",
    "end": "1180600"
  },
  {
    "text": "and also you see that it tried to determine the Packers it's not packed and also it uses Yara rules to determine",
    "start": "1180600",
    "end": "1186039"
  },
  {
    "text": "the capabilities of the malware in this case I had written signatures to determine if it has got high RC capability it hit that signature it",
    "start": "1186039",
    "end": "1192480"
  },
  {
    "text": "looks like we are dealing with an IRC bot but we again need to confirm that uh in the dynamic analysis",
    "start": "1192480",
    "end": "1199159"
  },
  {
    "text": "okay so also you see that the virus total results here uh shows that we are",
    "start": "1199159",
    "end": "1204559"
  },
  {
    "text": "dealing with a sample called we are dealing with a malware sample called tsunami",
    "start": "1204559",
    "end": "1211520"
  },
  {
    "text": "okay and also it's displaying the dependencies the the program header the section",
    "start": "1213080",
    "end": "1219240"
  },
  {
    "text": "header and the symbol information here if you remember the symbols were not stripped so let's look at the symbols",
    "start": "1219240",
    "end": "1225200"
  },
  {
    "text": "and see if we can find anything interesting here you see here it has references to",
    "start": "1225200",
    "end": "1230640"
  },
  {
    "text": "symbols like connect all the connect receive",
    "start": "1230640",
    "end": "1237880"
  },
  {
    "text": "listen socket so this tells you",
    "start": "1237880",
    "end": "1242720"
  },
  {
    "text": "that this tells you that the malware has some kind of network capability because it has uh it has references to network",
    "start": "1243640",
    "end": "1250039"
  },
  {
    "text": "network related system calls okay also you see there is references to",
    "start": "1250039",
    "end": "1257440"
  },
  {
    "text": "objects like flooders now if you if you see this probably we",
    "start": "1257440",
    "end": "1262640"
  },
  {
    "text": "are dealing with a Dos malware right so and then you see that there are",
    "start": "1262640",
    "end": "1268440"
  },
  {
    "text": "references to functions like get spoofers probably it has some kind of spoofing",
    "start": "1268440",
    "end": "1273720"
  },
  {
    "text": "capabilities okay so now that was static analysis results let's look at the dynamic analysis results and see what",
    "start": "1276520",
    "end": "1281600"
  },
  {
    "text": "the Mal does as you can see here",
    "start": "1281600",
    "end": "1289080"
  },
  {
    "text": "the malware sample the the the one which I submitted was executed successfully and the the process ID is",
    "start": "1289080",
    "end": "1295720"
  },
  {
    "text": "2673 okay and you see that",
    "start": "1295720",
    "end": "1301919"
  },
  {
    "text": "here the malware once executed it calls a clone system call to create a child process whose process ID is now",
    "start": "1301919",
    "end": "1309559"
  },
  {
    "text": "2674 okay so now you know that once executed the malware creates a child process and",
    "start": "1309559",
    "end": "1316200"
  },
  {
    "text": "then you see that the child process actually is trying to open a file which",
    "start": "1316200",
    "end": "1321799"
  },
  {
    "text": "doesn't exist on the sandbox which is this file user SL dwords so looking at the name of the file it looks like it's",
    "start": "1321799",
    "end": "1327799"
  },
  {
    "text": "kind of it's some kind of dictionary file that it will use for password cracking functionality okay so now we know that once executed the malware",
    "start": "1327799",
    "end": "1333640"
  },
  {
    "text": "creates a child process and this child process is trying to read a file which looks like a dictionary file which will which has some kind of uh password",
    "start": "1333640",
    "end": "1339960"
  },
  {
    "text": "cracking functionality so once that is done you see that it creates a socket so",
    "start": "1339960",
    "end": "1346039"
  },
  {
    "text": "whose file descriptor is three here and once it creates a socket you can see",
    "start": "1346039",
    "end": "1352000"
  },
  {
    "text": "that it is connecting to that socket and uh it",
    "start": "1352000",
    "end": "1357080"
  },
  {
    "text": "is it is connect it is going to connect to this IP address here so which is the command and control server IP address",
    "start": "1357080",
    "end": "1363120"
  },
  {
    "text": "that is 80. 24354 131 and this is the port that it will",
    "start": "1363120",
    "end": "1368960"
  },
  {
    "text": "connect on so that is 5566 okay and once it connects you see",
    "start": "1368960",
    "end": "1375400"
  },
  {
    "text": "that it is writing to the socket and looking at the content you see that it's it looks like some kind of IRC IRC",
    "start": "1375400",
    "end": "1380760"
  },
  {
    "text": "content so if you remember the Yara rule hit on a IRC IRC signature so this uh",
    "start": "1380760",
    "end": "1386360"
  },
  {
    "text": "this looks like it is an IRC bot okay so this is the TCP conversations this",
    "start": "1386360",
    "end": "1393159"
  },
  {
    "text": "was this is the TCP conversation CAU during the execution of the sample you see that it indeed actually it this this",
    "start": "1393159",
    "end": "1399960"
  },
  {
    "text": "is the infected machine where I executed the sample and it indeed connected to this command and control server and you",
    "start": "1399960",
    "end": "1405039"
  },
  {
    "text": "see it is connecting on Port 5566 the same thing that we determined in Dynamic analysis now what I'm doing is",
    "start": "1405039",
    "end": "1412520"
  },
  {
    "text": "the Limon also stores the packet capture of the session so I'm opening the packet capture to show",
    "start": "1412520",
    "end": "1417640"
  },
  {
    "text": "you show the pack so you see that here it is it is connecting to that IP",
    "start": "1417640",
    "end": "1424760"
  },
  {
    "text": "address on Port 5566 and you see the packet uh if you look at the TCP stream you see that it's an IRC uh it's IRC",
    "start": "1424760",
    "end": "1431480"
  },
  {
    "text": "communication so this is an IRC bot what it does is it connects to the IRC Channel it takes command from the",
    "start": "1431480",
    "end": "1436600"
  },
  {
    "text": "attacker and and based on the command it will perform action action based on the command",
    "start": "1436600",
    "end": "1442639"
  },
  {
    "text": "received so next what I'm showing you is uh if you remember the strings were extracted and stored in a uh separate",
    "start": "1444640",
    "end": "1451039"
  },
  {
    "text": "file let me show you the strings as you can see there are references to the system calls here and",
    "start": "1451039",
    "end": "1458840"
  },
  {
    "text": "also extracting the string shows that there is a reference to the command and control server here because this malware",
    "start": "1458840",
    "end": "1464799"
  },
  {
    "text": "is not off fiscated extracting the strings is enough to uh can can give you some very interesting information in",
    "start": "1464799",
    "end": "1470840"
  },
  {
    "text": "this case it has references to to this IP address where it connected if you remember we saw that while we did the",
    "start": "1470840",
    "end": "1476399"
  },
  {
    "text": "dynamic analysis it has references to this command and control server IP address and also it has references to",
    "start": "1476399",
    "end": "1483760"
  },
  {
    "text": "that if you remember the dictionary file that it was uh trying to read it has references to the dictionary file and",
    "start": "1483760",
    "end": "1489120"
  },
  {
    "text": "also you see that it has references to the IRC and the hdp related commands that the malare",
    "start": "1489120",
    "end": "1495159"
  },
  {
    "text": "takes okay",
    "start": "1495159",
    "end": "1499159"
  },
  {
    "text": "also you see references to Strings like wrong password password correct so uh if",
    "start": "1500960",
    "end": "1506720"
  },
  {
    "text": "you remember it was trying to read a dictionary file and you see there is strings like wrong password uh uh",
    "start": "1506720",
    "end": "1512520"
  },
  {
    "text": "password correct so which is which which which confirms that probably the malware has some kind of password cracking",
    "start": "1512520",
    "end": "1518440"
  },
  {
    "text": "capability and also you see these are all the commands that it receives from the attacker and also there are some",
    "start": "1518440",
    "end": "1524159"
  },
  {
    "text": "descriptions of these commands like you see that this is an advanced thin flutter there is this advanc in flooder",
    "start": "1524159",
    "end": "1529320"
  },
  {
    "text": "UDP flooder it has like different capabilities here kills the client downloads a file of the web and save it",
    "start": "1529320",
    "end": "1534840"
  },
  {
    "text": "onto the disk so as you can see there are a lot of capabilities of this particular malware",
    "start": "1534840",
    "end": "1540000"
  },
  {
    "text": "here just by extracting the strings we are able to determine lot of lot of things here also you see strings like spoofs",
    "start": "1540000",
    "end": "1548679"
  },
  {
    "text": "etc etc kill all so now going back to the results and",
    "start": "1548679",
    "end": "1554080"
  },
  {
    "text": "let's look at the memory analysis results so in this case the memory analysis result won't give anything different because the malware is not",
    "start": "1554080",
    "end": "1559360"
  },
  {
    "text": "stealth but just to show you that but this memory analysis can give you a postmart perspective this is after infection okay so let's looking at the",
    "start": "1559360",
    "end": "1566440"
  },
  {
    "text": "memory analysis results I'm listing the process using the volti PS list plugin so you see",
    "start": "1566440",
    "end": "1572760"
  },
  {
    "text": "that the process is actually executing on the system that is the the the sample",
    "start": "1572760",
    "end": "1578000"
  },
  {
    "text": "that we executed you see that it is executing with the process ID 2674 and also looking at the process",
    "start": "1578000",
    "end": "1585960"
  },
  {
    "text": "tree also shows that the process is actually execute uh is running on the",
    "start": "1585960",
    "end": "1592080"
  },
  {
    "text": "system and displaying the network connections shows that again this is",
    "start": "1592080",
    "end": "1599080"
  },
  {
    "text": "this is in the this is from the memory so we are we are dumping the memory and extracting these artifacts from the memory okay so as you can see here there",
    "start": "1599080",
    "end": "1606840"
  },
  {
    "text": "is a communication to the command and control server on Port 5566 but it also shows you which process",
    "start": "1606840",
    "end": "1613240"
  },
  {
    "text": "was doing the communication as you can see here it is the process that the the file that we executed",
    "start": "1613240",
    "end": "1620240"
  },
  {
    "text": "okay so that's that's the end of the first demo so the idea of this demo is to show you how Limon works and this was",
    "start": "1623480",
    "end": "1628600"
  },
  {
    "text": "a simple malware sample so what I'll do is let",
    "start": "1628600",
    "end": "1633200"
  },
  {
    "text": "me okay so the next demo is uh is of a malware sample called Mayhem so the idea",
    "start": "1639760",
    "end": "1647279"
  },
  {
    "text": "is to show you that it's not always elf file okay so this is a PHP dropper so",
    "start": "1647279",
    "end": "1652320"
  },
  {
    "text": "let me show you how to analyze this PHP dropper using Limon and let's try to understand what the malare",
    "start": "1652320",
    "end": "1658799"
  },
  {
    "text": "does oops as you can see that's the option",
    "start": "1664200",
    "end": "1671159"
  },
  {
    "text": "Limon option so what I'm saying is I'm telling lmon that with iPhone Zed option that this is a PHP script so that it can",
    "start": "1671159",
    "end": "1677880"
  },
  {
    "text": "run run it with the PHP interpreter and then monitor its activity so I'm I'm giving this PHP script here which is",
    "start": "1677880",
    "end": "1684519"
  },
  {
    "text": "may. PHP and I'm asking it to run",
    "start": "1684519",
    "end": "1689840"
  },
  {
    "text": "for 25 seconds and I'm also asking it to do the memory memory analysis now once I",
    "start": "1689840",
    "end": "1695480"
  },
  {
    "text": "once I play the video you'll see that it started doing the static analysis",
    "start": "1695480",
    "end": "1702440"
  },
  {
    "text": "and then it will pop up the VM uh transfer this file to the VM run it with",
    "start": "1702440",
    "end": "1708159"
  },
  {
    "text": "the PHP interpreter monitor its activity suspends the VM take the memory image and does the",
    "start": "1708159",
    "end": "1714399"
  },
  {
    "text": "analysis as you can see here uh once it finished analysis it stores the reports",
    "start": "1717080",
    "end": "1723320"
  },
  {
    "text": "in this in this directory again let's go to the reports directory and see what it",
    "start": "1723320",
    "end": "1729320"
  },
  {
    "text": "does this is the static analysis results as you can see the file type here is a PHP script",
    "start": "1730799",
    "end": "1738559"
  },
  {
    "text": "and you see that the uh the virus total has very less detections so there are like one or two AV vendors are detecting",
    "start": "1740559",
    "end": "1746360"
  },
  {
    "text": "this as malicious and let's look at the dynamic analysis",
    "start": "1746360",
    "end": "1751600"
  },
  {
    "text": "results uh if you see here uh the file was successfully",
    "start": "1751600",
    "end": "1758320"
  },
  {
    "text": "executed using the PHP interpreter okay so with the pro 2675 so after this P after it executes",
    "start": "1758320",
    "end": "1766120"
  },
  {
    "text": "the PHP What's Happening Here is this this PHP is trying to kill all",
    "start": "1766120",
    "end": "1771600"
  },
  {
    "text": "instances of a host process so host is a legitimate process on a Linux Linux machine it is trying to kill all instance of host process first and",
    "start": "1771600",
    "end": "1779440"
  },
  {
    "text": "then another interesting thing that it does is basically it is trying to create a shared object which is root c.so so uh",
    "start": "1779440",
    "end": "1788640"
  },
  {
    "text": "it is it is trying to create a cash uh shared object and writing writing the elf content to it so basically what it's",
    "start": "1788640",
    "end": "1793960"
  },
  {
    "text": "doing is it's dropping a cach uh dropping a shared object shared object is equalent to DLS on Windows okay so so",
    "start": "1793960",
    "end": "1801159"
  },
  {
    "text": "basically it is dropping a shared object and then another thing it does",
    "start": "1801159",
    "end": "1808880"
  },
  {
    "text": "is it writes a shell script it creates a shell script which is 1.",
    "start": "1808880",
    "end": "1815519"
  },
  {
    "text": "s and then writes this content into the shell script it's not executed yet it is just writing this content into the shell",
    "start": "1815519",
    "end": "1821080"
  },
  {
    "text": "script so so far what it did was once you executed once you ran it through the PHP interpreter it dropped a shared",
    "start": "1821080",
    "end": "1827480"
  },
  {
    "text": "object it created a shell script it is writing this content to the shell script so what this content is that it is",
    "start": "1827480",
    "end": "1833399"
  },
  {
    "text": "checking if the c.so is present if it is present kill all instances of the host",
    "start": "1833399",
    "end": "1839279"
  },
  {
    "text": "process and also using the export export command it is setting a environment variable you see here export and also",
    "start": "1839279",
    "end": "1846360"
  },
  {
    "text": "this is interesting here it is setting an environment variable called Lore preload so lore preload is an",
    "start": "1846360",
    "end": "1853320"
  },
  {
    "text": "environment variable whose value is is the path to the shared object okay so in",
    "start": "1853320",
    "end": "1859000"
  },
  {
    "text": "this case the shared object is the one which the malware dropped I'll come to that and then once it sets that",
    "start": "1859000",
    "end": "1865760"
  },
  {
    "text": "environment variable what it is doing is it is running the host process here so basically it's invokes the host process",
    "start": "1865760",
    "end": "1872399"
  },
  {
    "text": "and then it is unsetting the environment variable so what exactly is happening here is that like I said LD preload is",
    "start": "1872399",
    "end": "1878880"
  },
  {
    "text": "an environment variable whose value is the part to the shared object so by doing this this technique is called LD",
    "start": "1878880",
    "end": "1883960"
  },
  {
    "text": "preload technique so what the malware is doing is by adding this uh this this path to the shared object",
    "start": "1883960",
    "end": "1890320"
  },
  {
    "text": "to the LD preload variable so whenever a host whenever a process gets created that is in this case the host process",
    "start": "1890320",
    "end": "1896799"
  },
  {
    "text": "what happens is the cast. eso is the first shared object to get loaded okay",
    "start": "1896799",
    "end": "1902440"
  },
  {
    "text": "so in this case what the malare is doing is it is implementing an exit function",
    "start": "1902440",
    "end": "1907480"
  },
  {
    "text": "inside the c.so exit is a legitimate function basically so which is also implemented",
    "start": "1907480",
    "end": "1912880"
  },
  {
    "text": "in the standard Library so in this case it's implementing a malicious exit function so what happens when the host",
    "start": "1912880",
    "end": "1918880"
  },
  {
    "text": "process is invoked it displays the help option and it exits which means it has to call the exit function so in this",
    "start": "1918880",
    "end": "1924519"
  },
  {
    "text": "case as a as a result of this LD preload technique what it's doing is it's calling the exit function which is implemented in this malicious shared",
    "start": "1924519",
    "end": "1931559"
  },
  {
    "text": "object which the malware dropped rather than the actual exit function in the standard library now once it as a result",
    "start": "1931559",
    "end": "1938200"
  },
  {
    "text": "of that the control is redirected to the exit function which is implemented in the c.so now this exit function is a malicious function so it will do all its",
    "start": "1938200",
    "end": "1945039"
  },
  {
    "text": "malicious activity and then call the actual exit function in the St uh standard library that way the",
    "start": "1945039",
    "end": "1950519"
  },
  {
    "text": "application won't know uh uh it it won't know that anything anything went wrong",
    "start": "1950519",
    "end": "1957000"
  },
  {
    "text": "so in this case what exit function the malicious exit function is doing is it is actually collecting the system in",
    "start": "1957000",
    "end": "1962519"
  },
  {
    "text": "when when the host process calls exit it calls into the exit exit in the c.so file this is the malicious function what",
    "start": "1962519",
    "end": "1969559"
  },
  {
    "text": "it's doing it is collecting the system information sending it to the attacker and then calling the actual exit function in the standard Library so",
    "start": "1969559",
    "end": "1976240"
  },
  {
    "text": "basically by using the ald LD preload technique uh the Mal uh the malare made the legitimate process which is the host",
    "start": "1976240",
    "end": "1982360"
  },
  {
    "text": "process to call a malicious exit function and then does it malicious activity so when you're doing live for and six you'll see that the host process",
    "start": "1982360",
    "end": "1988840"
  },
  {
    "text": "is doing the malicious activity but it the reason why host process is doing the malicious activity is due to uh due to",
    "start": "1988840",
    "end": "1995080"
  },
  {
    "text": "this LD preload technique because of which it got the c.so Got Loaded into the address space of host",
    "start": "1995080",
    "end": "2001519"
  },
  {
    "text": "process okay so so this is the content that it wrote to the shell script",
    "start": "2001519",
    "end": "2006760"
  },
  {
    "text": "okay so next what it is doing",
    "start": "2006760",
    "end": "2010799"
  },
  {
    "text": "is it is oops so this is how it is executing that",
    "start": "2013679",
    "end": "2020399"
  },
  {
    "text": "shell script so so far you know that it dropped the shared object it dropped the shell script it wrote that content into",
    "start": "2020399",
    "end": "2025919"
  },
  {
    "text": "the shell script and this is how it is executing the shell script it is executing the shell script using the at command it is saying execute this file",
    "start": "2025919",
    "end": "2032799"
  },
  {
    "text": "now so basically what happens is now the shell script executes as a result of shell script getting executed all those",
    "start": "2032799",
    "end": "2038399"
  },
  {
    "text": "LD preload attack attack starts",
    "start": "2038399",
    "end": "2042360"
  },
  {
    "text": "happening so then you see that this is the network activity you see that as a",
    "start": "2045200",
    "end": "2051638"
  },
  {
    "text": "result of calling the malicious exit function it makes a DNS query to this",
    "start": "2051639",
    "end": "2056839"
  },
  {
    "text": "domain here so HT HP change.com which is the command and control server which",
    "start": "2056839",
    "end": "2061878"
  },
  {
    "text": "resolves to this IP address here once it resolves the IP address",
    "start": "2061879",
    "end": "2068158"
  },
  {
    "text": "you see that it is connecting to that IP address on Port 80 so it looks like it's it's doing an HTTP",
    "start": "2068159",
    "end": "2074000"
  },
  {
    "text": "communication so let's look at the packet capture you see that it is making a DNS",
    "start": "2074000",
    "end": "2080079"
  },
  {
    "text": "query to that domain hthp change.com which again resol to that IP address and",
    "start": "2080079",
    "end": "2086040"
  },
  {
    "text": "there's a port communication on Port",
    "start": "2086040",
    "end": "2089879"
  },
  {
    "text": "0 this is the pattern with which it is communicating as you can see here it is communicating to The Domain and this is",
    "start": "2091399",
    "end": "2097280"
  },
  {
    "text": "the is making a post request it's l/ tor. PHP and also notice the hardcoded",
    "start": "2097280",
    "end": "2103280"
  },
  {
    "text": "pragma here so this is a hardcoded pragma that is 1337 so which you can use it as an indicator to detect this",
    "start": "2103280",
    "end": "2109440"
  },
  {
    "text": "malware sample and also you see that it is sending a comma separated values here R comma something if you see here this",
    "start": "2109440",
    "end": "2116520"
  },
  {
    "text": "is it is sending the system information to the attacker here okay so just to",
    "start": "2116520",
    "end": "2122400"
  },
  {
    "text": "show you if it's not visible so it's saying the user is root l subun to",
    "start": "2122400",
    "end": "2128280"
  },
  {
    "text": "whatever whatever the architecture of the Linux okay so this is this is the",
    "start": "2128280",
    "end": "2133440"
  },
  {
    "text": "first communication of the malware so once it's uh once it infects the system it it talks to the command and control",
    "start": "2133440",
    "end": "2138880"
  },
  {
    "text": "server and sends this information this is to let the attacker know that the the the shared object was successfully loaded later the attacker can interact",
    "start": "2138880",
    "end": "2145560"
  },
  {
    "text": "with the malware then and then issue various other",
    "start": "2145560",
    "end": "2150119"
  },
  {
    "text": "commands going back to the memory analysis results so if the LD preload technique worked if you remember the",
    "start": "2155880",
    "end": "2162319"
  },
  {
    "text": "host process has to be running right because it it because it in the cell",
    "start": "2162319",
    "end": "2167480"
  },
  {
    "text": "script it invoke the host process so listing the process from the memory you see that the host process is actually",
    "start": "2167480",
    "end": "2174400"
  },
  {
    "text": "running here on the system right with the process ID",
    "start": "2174400",
    "end": "2179680"
  },
  {
    "text": "2690 and also extracting the environment variables from the",
    "start": "2179680",
    "end": "2186240"
  },
  {
    "text": "memory so these are the environment variables of the host process which is 2690 you see that the LD preload",
    "start": "2186240",
    "end": "2194359"
  },
  {
    "text": "variable is actually set here here and the value of that",
    "start": "2194359",
    "end": "2199640"
  },
  {
    "text": "variable is the path to that Shar object that the malware dropped okay if you",
    "start": "2199640",
    "end": "2206119"
  },
  {
    "text": "remember this is memory analysis okay we are extracting the memory and doing the analysis that's one thing so if if the",
    "start": "2206119",
    "end": "2214119"
  },
  {
    "text": "LD preload worked properly then the host process should have should load this c.so file right so listing the libraries",
    "start": "2214119",
    "end": "2223359"
  },
  {
    "text": "the the shared objects loaded by the host you see that it LO loads all other shared objects also you'll see",
    "start": "2223359",
    "end": "2229680"
  },
  {
    "text": "that it loaded the uh c.so file here the host process here which is",
    "start": "2229680",
    "end": "2237560"
  },
  {
    "text": "the 2690 loaded this c.so so the reason it loaded is because of that LD preload technique because the malware added that",
    "start": "2237560",
    "end": "2244800"
  },
  {
    "text": "uh uh the part to the shared object in in the the LD preload variable as a result of that this shared object got",
    "start": "2244800",
    "end": "2253040"
  },
  {
    "text": "preloaded which is a malicious shared object so now what I'm doing is uh Limon",
    "start": "2253040",
    "end": "2258760"
  },
  {
    "text": "actually does static analysis Dynamic analysis and memory analysis as a result of that it suspends the VM so which means there is a memory image uh there",
    "start": "2258760",
    "end": "2266520"
  },
  {
    "text": "is a memory image of the infected machine so I'm going to take that memory image of the infected machine here I'm just going to show you",
    "start": "2266520",
    "end": "2274200"
  },
  {
    "text": "that I'm going to do a little bit of memory for and6 here uh to show uh so what I'm going to do is I'm going to",
    "start": "2274200",
    "end": "2279680"
  },
  {
    "text": "dump that c.so which was loaded by the host process and show you that it is malicious so what I'm doing is I'm using",
    "start": "2279680",
    "end": "2286400"
  },
  {
    "text": "volatility framework to do the memory for6 uh I'm using the library dump",
    "start": "2286400",
    "end": "2292040"
  },
  {
    "text": "plugin so using which you can dump the shared object from the memory I'm telling it to dump from the process ID",
    "start": "2292040",
    "end": "2298160"
  },
  {
    "text": "26 90 which is the host process I'm telling dump dump this shared object",
    "start": "2298160",
    "end": "2303839"
  },
  {
    "text": "that is loaded into the address space of host do host process and I'm giving it the Base address where this shared",
    "start": "2303839",
    "end": "2309200"
  },
  {
    "text": "object is loaded here in this case here and I'm asking it to dump to this",
    "start": "2309200",
    "end": "2315680"
  },
  {
    "text": "directory called dump so now what happens is that it dumps the c.so from",
    "start": "2315680",
    "end": "2321359"
  },
  {
    "text": "the address space of host process okay so which is",
    "start": "2321359",
    "end": "2327240"
  },
  {
    "text": "this now just to show you that running the file command you see that it is actually L 64bit shared object so shared",
    "start": "2327240",
    "end": "2334200"
  },
  {
    "text": "object is the shared Library okay so",
    "start": "2334200",
    "end": "2339359"
  },
  {
    "text": "then I'm extracting the strings from that shared object to see what uh to see",
    "start": "2339359",
    "end": "2344560"
  },
  {
    "text": "if you can find any interesting strings there extracting the strings you see that there is reference to that this",
    "start": "2344560",
    "end": "2353400"
  },
  {
    "text": "string here which is the command and control server which we saw in the packet capture if you remember if you",
    "start": "2353400",
    "end": "2358920"
  },
  {
    "text": "remember we dumped this c.so from the memory of the uh memory of the host process and we are looking at the",
    "start": "2358920",
    "end": "2364000"
  },
  {
    "text": "strings and you see that the strings show reference to the command and control server IP address and the pattern that we saw in the packet",
    "start": "2364000",
    "end": "2369920"
  },
  {
    "text": "capture so that confirms that it is not the host process that is doing the malicious activity it is uh as a result",
    "start": "2369920",
    "end": "2376000"
  },
  {
    "text": "of the LD preload preload technique this Shar object Got Loaded which is the Malicia Shar object this is where all",
    "start": "2376000",
    "end": "2382119"
  },
  {
    "text": "these functions are implemented and also you see this comma",
    "start": "2382119",
    "end": "2387680"
  },
  {
    "text": "separated values if you if you remember that R comma something the format string this gets populated during the runtime",
    "start": "2387680",
    "end": "2393760"
  },
  {
    "text": "which is which is where which is how it is sending the system information to the attacker and also you",
    "start": "2393760",
    "end": "2399960"
  },
  {
    "text": "see uh references to uh pragma here uh",
    "start": "2399960",
    "end": "2406160"
  },
  {
    "text": "1337 if you remember this was a hardcoded pragma",
    "start": "2406160",
    "end": "2411599"
  },
  {
    "text": "okay and also you see references to this so this is if you remember if you see",
    "start": "2413440",
    "end": "2419400"
  },
  {
    "text": "this user B un name so this is how it is collecting the system information when the malicious exit function get called",
    "start": "2419400",
    "end": "2425280"
  },
  {
    "text": "this is how it is running this command to get the system information and then sending it to the",
    "start": "2425280",
    "end": "2431200"
  },
  {
    "text": "attacker okay also one more thing that I want to show you is just to show you that the dump component is actually",
    "start": "2434040",
    "end": "2440440"
  },
  {
    "text": "malicious so what I'm going to do is I'm going to submit that gas doso that was dumped from the memory and submit it to",
    "start": "2440440",
    "end": "2446000"
  },
  {
    "text": "virus total uh to show you that it is malicious so once I submit to virus",
    "start": "2446000",
    "end": "2452599"
  },
  {
    "text": "total you see that uh",
    "start": "2453280",
    "end": "2458520"
  },
  {
    "text": "there are eight detections eight out of 55 avenders detect this as malicious and you see that it's it's detected as Linux",
    "start": "2460800",
    "end": "2467880"
  },
  {
    "text": "back door right just to show you that this is the c.so that we dumped from the host",
    "start": "2467880",
    "end": "2473920"
  },
  {
    "text": "process as you can see this confirms that that is malicious and now now you have a now you were able to dump it from",
    "start": "2473920",
    "end": "2480520"
  },
  {
    "text": "the memory now you have a sample that you can uh uh R run it you can you can reverse engineer it or you can run it in",
    "start": "2480520",
    "end": "2486640"
  },
  {
    "text": "a sandbox or you can uh run a AV scan against it or Yara signatures against it",
    "start": "2486640",
    "end": "2491720"
  },
  {
    "text": "so that's a thing and then",
    "start": "2491720",
    "end": "2497400"
  },
  {
    "text": "so that's about the second demo again uh the idea of this demo is to show again the capability of Limon and also to show",
    "start": "2497400",
    "end": "2503720"
  },
  {
    "text": "you that it's not always yelf file it can come as different files like Pearl it can be a pearl dropper it can be a",
    "start": "2503720",
    "end": "2509079"
  },
  {
    "text": "PHP dropper or it can be a it can come as a python script",
    "start": "2509079",
    "end": "2515079"
  },
  {
    "text": "the third demo uh is of a rootkit sample so this is slightly Advanced so just wanted to cover it so it won't take much",
    "start": "2523160",
    "end": "2529640"
  },
  {
    "text": "time so this is a rootkit called suu rootkit so this is a this is not a uh real real life malware this is a proof",
    "start": "2529640",
    "end": "2536400"
  },
  {
    "text": "of concept rootkit so this is publicly available so what you can do is you can compile compile it to a kernel object",
    "start": "2536400",
    "end": "2541720"
  },
  {
    "text": "and then you can run it so but it uses a lot of stealth techniques okay so uh so",
    "start": "2541720",
    "end": "2547400"
  },
  {
    "text": "that should give an idea of the stealth techniques of the root kits that are used in the wild okay so let's Analyze",
    "start": "2547400",
    "end": "2552599"
  },
  {
    "text": "This root kit using lmon and see what we can find so this is a good proof of concept",
    "start": "2552599",
    "end": "2559960"
  },
  {
    "text": "root kits to understand how the Linux root kits work so it does a lot of hooking uh it hides a lot of",
    "start": "2559960",
    "end": "2566119"
  },
  {
    "text": "things the third demo is so what",
    "start": "2566119",
    "end": "2573040"
  },
  {
    "text": "I'm what I'm telling lemon is I'm telling that with iph K I'm telling that this is a",
    "start": "2573040",
    "end": "2579160"
  },
  {
    "text": "loadable kernel module so that's the KO with the with a KO",
    "start": "2579160",
    "end": "2584599"
  },
  {
    "text": "extension so I've compiled this uh it's it's a c code the suu rootkit is a su code you can compile it on your uh on",
    "start": "2584599",
    "end": "2591079"
  },
  {
    "text": "your kernel and then Analyze This malware so that's what I'm doing here so su. Koo is the malicious module",
    "start": "2591079",
    "end": "2599520"
  },
  {
    "text": "here so what I'm what I'm telling is I'm telling it to load this kernel module on the system",
    "start": "2599520",
    "end": "2608720"
  },
  {
    "text": "and uh analyze it for 30 seconds and also do uh memory analysis so as you",
    "start": "2608720",
    "end": "2614240"
  },
  {
    "text": "know it will perform the static analysis uh it'll pop up the VM transfer",
    "start": "2614240",
    "end": "2619800"
  },
  {
    "text": "the file exe uh load load the Kel module on the system and then it suspends the VM",
    "start": "2619800",
    "end": "2626640"
  },
  {
    "text": "and it does memory memory analysis using volatility Advan memory fening",
    "start": "2626640",
    "end": "2633078"
  },
  {
    "text": "framework and then stores the uh results in this directory here okay so let's go",
    "start": "2635599",
    "end": "2641680"
  },
  {
    "text": "to the results",
    "start": "2641680",
    "end": "2644280"
  },
  {
    "text": "directory this is the static analysis as you can see this is the l64 relocatable file",
    "start": "2650680",
    "end": "2660160"
  },
  {
    "text": "oops also looking at the symbol information you see that it has references to uh files like key logger",
    "start": "2661520",
    "end": "2668200"
  },
  {
    "text": "doc so probably it has some kind of key logging capabilities",
    "start": "2668200",
    "end": "2675440"
  },
  {
    "text": "and also you see uh references to functions like hide TCP Port so probably it it hides some",
    "start": "2677960",
    "end": "2684760"
  },
  {
    "text": "kind it hides the TCP connections okay or it might do the hooking and make the",
    "start": "2684760",
    "end": "2690000"
  },
  {
    "text": "legitimate function point to this function",
    "start": "2690000",
    "end": "2694319"
  },
  {
    "text": "you see that there are uh there are reference to object like hook symbols probably it's going to hook the",
    "start": "2697880",
    "end": "2704279"
  },
  {
    "text": "symbols let's look at the D there's nothing much in the dynamic analysis uh but just to show you that",
    "start": "2706119",
    "end": "2713960"
  },
  {
    "text": "uh it the the Limon used ins mod so if you if you know ins mod ins mod is the",
    "start": "2713960",
    "end": "2719880"
  },
  {
    "text": "it's it comes with it it is present in Linux so you can use in mod to load a kernel module so it use iness mod to",
    "start": "2719880",
    "end": "2726400"
  },
  {
    "text": "load the suu kernel module okay as you can see it was successfully",
    "start": "2726400",
    "end": "2732319"
  },
  {
    "text": "loaded and then let's look at the memory analysis results so this is where memory analysis integrating memory analysis into your sandbox helps because when",
    "start": "2732319",
    "end": "2738920"
  },
  {
    "text": "you're dealing with root kits uh and stealth malwares the memory for and6 can help you understand the capabilities of",
    "start": "2738920",
    "end": "2743960"
  },
  {
    "text": "the malware okay so what what I'm showing here is the",
    "start": "2743960",
    "end": "2750720"
  },
  {
    "text": "kernel list of Kernel modules so this is the same output that you'll see when you execute LS mod command in the inside",
    "start": "2750720",
    "end": "2757200"
  },
  {
    "text": "inside Linux so if you look at the kernel modules you'll see that the suu kernel module is not present in the module list so the reason is because",
    "start": "2757200",
    "end": "2764400"
  },
  {
    "text": "Linux keeps track of active modules as a link list so in this case the suu r kit",
    "start": "2764400",
    "end": "2769520"
  },
  {
    "text": "was unlink itself from the list to hide itself so if you're running life forensic tools like LS mod this is what",
    "start": "2769520",
    "end": "2776160"
  },
  {
    "text": "you will see you will not see the presence of the suur suu kernel module",
    "start": "2776160",
    "end": "2781200"
  },
  {
    "text": "here okay also",
    "start": "2781200",
    "end": "2787200"
  },
  {
    "text": "Linux also keeps track of the uh active modules basically in two two places one is proc modules uh which LS mod relies",
    "start": "2787200",
    "end": "2796000"
  },
  {
    "text": "on and there is also a file system called CFS file system uh inside CFS file system there is a uh there is a",
    "start": "2796000",
    "end": "2802760"
  },
  {
    "text": "directory created for each active module which contains information about the name of the name of the kernel module uh",
    "start": "2802760",
    "end": "2808559"
  },
  {
    "text": "the sections and so on so what you can do is if you want to if you want to detect a hidden kernel module you can",
    "start": "2808559",
    "end": "2814680"
  },
  {
    "text": "compare the list from the module list with the list from the CFS and look for discrepancy in this case what happened",
    "start": "2814680",
    "end": "2822240"
  },
  {
    "text": "is it UNL itself from the module list it also hide itself from the CFS list",
    "start": "2822240",
    "end": "2829520"
  },
  {
    "text": "okay so there is another method by which you can detect hidden hidden modules so",
    "start": "2829520",
    "end": "2835440"
  },
  {
    "text": "volatility uses uh volatility you volatility has a plugin what it does is",
    "start": "2835440",
    "end": "2841240"
  },
  {
    "text": "it it it it it find it extracts the kernel module from the memory okay so",
    "start": "2841240",
    "end": "2847520"
  },
  {
    "text": "and then it Compares with the module list and the CFS list and reports if there is any discrepancy in this case it",
    "start": "2847520",
    "end": "2853400"
  },
  {
    "text": "uses carving basically so in this case you see that after carving you see that it found a driver which is not present",
    "start": "2853400",
    "end": "2860839"
  },
  {
    "text": "in the module list and the CFS list so which means this this kernel module is hidden from the module list and it also",
    "start": "2860839",
    "end": "2866760"
  },
  {
    "text": "is hidden from the uh CFS uh file system okay but volatility was able to DET",
    "start": "2866760",
    "end": "2873000"
  },
  {
    "text": "determine this using the carving technique so this confirms that the driver once installed will hide itself",
    "start": "2873000",
    "end": "2880400"
  },
  {
    "text": "from the live forensic tools just to show you that again I'm",
    "start": "2880400",
    "end": "2886640"
  },
  {
    "text": "showing the Kel modu show you that the suu module is not present in the module list and in the CFS",
    "start": "2886640",
    "end": "2892400"
  },
  {
    "text": "list also another thing that the module did did was it set up the keyboard",
    "start": "2892400",
    "end": "2898559"
  },
  {
    "text": "notifiers okay so Linux enables you to receive a call back notification",
    "start": "2898559",
    "end": "2903920"
  },
  {
    "text": "whenever a key is pressed okay so this is basically for legitimate purpose like hotkey hotkey implementations but the",
    "start": "2903920",
    "end": "2910720"
  },
  {
    "text": "malware can also make use of this feature so in this case the suu root kit installed the install the kernel module",
    "start": "2910720",
    "end": "2917200"
  },
  {
    "text": "and it set the keyboard notifiers okay so that whenever a key is pressed a call back function is called within the uh",
    "start": "2917200",
    "end": "2924319"
  },
  {
    "text": "suus kernel module now this function can read all your keystrokes and it can log it to a file or send it over the network",
    "start": "2924319",
    "end": "2931119"
  },
  {
    "text": "that way it can steal all your keystrokes uh by setting up the keyboard notifiers that's exactly what it's doing",
    "start": "2931119",
    "end": "2936880"
  },
  {
    "text": "this is the address where the call back function is so now you know that the suu root kit can steal uh the your key",
    "start": "2936880",
    "end": "2943520"
  },
  {
    "text": "strokes and again when you if you reverse engineer the function you probably get an idea what the root kit is doing in this case suu is basically",
    "start": "2943520",
    "end": "2950000"
  },
  {
    "text": "writing to the kernel buffer and then writing it to the file okay so in reality a rootkit can",
    "start": "2950000",
    "end": "2956359"
  },
  {
    "text": "use this technique to steal your keystrokes and they can send it to over the network also another thing the rootkit",
    "start": "2956359",
    "end": "2963079"
  },
  {
    "text": "is doing is inline kernel hooks so the inline kernel hooks is a technique where uh the",
    "start": "2963079",
    "end": "2970400"
  },
  {
    "text": "malware can uh can modifies several several instructions in the function so",
    "start": "2970400",
    "end": "2976200"
  },
  {
    "text": "basically uh uh using jump call or R instructions so the idea is to redirect",
    "start": "2976200",
    "end": "2982160"
  },
  {
    "text": "the control flow to a function in the malicious in the malicious module so",
    "start": "2982160",
    "end": "2987280"
  },
  {
    "text": "that way if any application that is reling relaying on the system call would go to the malicious function which can",
    "start": "2987280",
    "end": "2993839"
  },
  {
    "text": "then add uh Delete modify or inter accept uh uh any data related to that",
    "start": "2993839",
    "end": "2999440"
  },
  {
    "text": "system call in this case what it is doing is you see that it",
    "start": "2999440",
    "end": "3005520"
  },
  {
    "text": "is hooking the read director read direct readd function of the proc file system",
    "start": "3005520",
    "end": "3011280"
  },
  {
    "text": "now if you know the the kernel exports lot of interesting information to the user land through the proc file system",
    "start": "3011280",
    "end": "3017200"
  },
  {
    "text": "like you have process related information in the proc file system the proc the pro proc SL there is a per",
    "start": "3017200",
    "end": "3022640"
  },
  {
    "text": "process directory for each process in the proc file system there is modules information in the proc file system and there is Network related information in",
    "start": "3022640",
    "end": "3028920"
  },
  {
    "text": "the proc file system so basically the and the tools like PS netstat ysoft they",
    "start": "3028920",
    "end": "3034680"
  },
  {
    "text": "all rely on reading these directories so which means they have to call this read read read read Dr system call by hooking",
    "start": "3034680",
    "end": "3042839"
  },
  {
    "text": "the system call what the malware is doing is whenever these tools like PS netstat calls read their function this",
    "start": "3042839",
    "end": "3050079"
  },
  {
    "text": "is being redirected to a malicious function here which is here jump there is a jump to this function now this",
    "start": "3050079",
    "end": "3055799"
  },
  {
    "text": "malicious function can intercept and modify any data it wants for example let's say if you're running a PS tool it is reading a",
    "start": "3055799",
    "end": "3062000"
  },
  {
    "text": "directory which is getting transferred here and the written value of the PS again comes to this function here now",
    "start": "3062000",
    "end": "3068079"
  },
  {
    "text": "this guy can delete any process that he wants to delete and return the results back to the PS process now the PS will",
    "start": "3068079",
    "end": "3074839"
  },
  {
    "text": "show all the process except the rootkit process uh because because of this hooking so that way it can hide the",
    "start": "3074839",
    "end": "3080799"
  },
  {
    "text": "network activity as well so the hooking hooking the read there of proc function it can hide from VAR tools like the PS",
    "start": "3080799",
    "end": "3087520"
  },
  {
    "text": "like I said PS LS mod uh netstat and so on so it can hide lot of information and this is where the uh",
    "start": "3087520",
    "end": "3095119"
  },
  {
    "text": "hooking function",
    "start": "3095119",
    "end": "3097920"
  },
  {
    "text": "is also another thing you see here",
    "start": "3102240",
    "end": "3106640"
  },
  {
    "text": "is here it also hooks the TCP uh",
    "start": "3108119",
    "end": "3113240"
  },
  {
    "text": "operation sequence sequence operation uh handlers now it is hooking this show function so basically the kernel",
    "start": "3113240",
    "end": "3120000"
  },
  {
    "text": "actually exports the data to the user land like I said right so it uses sequence operations sequence operation",
    "start": "3120000",
    "end": "3126400"
  },
  {
    "text": "handlers to do that so by hooking this sequence operation handlers like the show in this case it is responsible for",
    "start": "3126400",
    "end": "3132960"
  },
  {
    "text": "for showing the information of a record like the network connection by hooking this show information and redirecting to the malicious function the malware can",
    "start": "3132960",
    "end": "3139520"
  },
  {
    "text": "hide the network connections from the life forensic tools okay so the malware when you're running netstat it will show",
    "start": "3139520",
    "end": "3144920"
  },
  {
    "text": "all the network connections except the ones that the rootkit wants to hide",
    "start": "3144920",
    "end": "3151839"
  },
  {
    "text": "right so with this I've concluded demo as as you can see uh there are different",
    "start": "3153760",
    "end": "3158799"
  },
  {
    "text": "types of malwares each malware has different capabilities so we looked at three different types of malwares but",
    "start": "3158799",
    "end": "3164240"
  },
  {
    "text": "like like I said integrating memory analysis into your sandbox is helpful to get an idea of what the malware is doing",
    "start": "3164240",
    "end": "3169559"
  },
  {
    "text": "post infection okay so let's go back to the slides here",
    "start": "3169559",
    "end": "3176240"
  },
  {
    "text": "okay so I've almost come to the end of the presentation so uh so this is the",
    "start": "3178440",
    "end": "3185480"
  },
  {
    "text": "key key key takeaways from the presentation like I said the Linux is growing in its popularity so many",
    "start": "3185480",
    "end": "3190640"
  },
  {
    "text": "devices are using Linux and also because of its open source nature there are a lot of devices that are using Linux making it Target for malware attacks so",
    "start": "3190640",
    "end": "3197880"
  },
  {
    "text": "which means from an incident response perspective and from a security research perspective we we need tools to analyze",
    "start": "3197880",
    "end": "3203400"
  },
  {
    "text": "Linux malware uh uh Linux malware right so",
    "start": "3203400",
    "end": "3209119"
  },
  {
    "text": "uh so these are the some of the references so once the slide is on the uh black ad site you can go through that",
    "start": "3209119",
    "end": "3215480"
  },
  {
    "text": "so uh with that I've uh I come to the end of the presentations and I can take any",
    "start": "3215480",
    "end": "3221240"
  },
  {
    "text": "questions if you have no questions yeah does Leon have any",
    "start": "3221240",
    "end": "3228720"
  },
  {
    "text": "capabilities to avoid uh no so uh so in that case you might want to reverse",
    "start": "3228720",
    "end": "3234880"
  },
  {
    "text": "engineer and probably I'm I might work on that in future but uh you might want to reverse engineer the sample try to",
    "start": "3234880",
    "end": "3241680"
  },
  {
    "text": "understand uh how it is detecting the sample and probably patch it or reverse the condition and then run through it or",
    "start": "3241680",
    "end": "3247480"
  },
  {
    "text": "the easiest would be run it in a physical machine again yeah so so any",
    "start": "3247480",
    "end": "3252559"
  },
  {
    "text": "other questions",
    "start": "3252559",
    "end": "3256640"
  },
  {
    "text": "yes you don't have",
    "start": "3258000",
    "end": "3261680"
  },
  {
    "text": "exion oh it it relies on the magic header the L file has this magic header right the file utility relies on that",
    "start": "3263079",
    "end": "3269640"
  },
  {
    "text": "magic header so if you if you see the L file it starts with/ 7f EF the first",
    "start": "3269640",
    "end": "3275440"
  },
  {
    "text": "four bytes is that of a l file and then comes the uh whether it's uh the file is a 64-bit file or a 30 32bit file then",
    "start": "3275440",
    "end": "3283040"
  },
  {
    "text": "then the next bite tells you whether it's a little Indian format or a big Indian format so there is this like 7",
    "start": "3283040",
    "end": "3288440"
  },
  {
    "text": "byte of L file header it it recognizes like in case of the Windows executable there's this p uh the MZ header the same",
    "start": "3288440",
    "end": "3296079"
  },
  {
    "text": "way Linux file also has this magic header that can be used to recognize the file type of the system irrespective of",
    "start": "3296079",
    "end": "3303160"
  },
  {
    "text": "the extension does make sense okay so any",
    "start": "3303160",
    "end": "3309400"
  },
  {
    "text": "other questions okay so if there are no questions then uh I would before I",
    "start": "3309400",
    "end": "3314960"
  },
  {
    "text": "conclude I just want to tell you that uh so the Limon is Avail will be available on the blackhead site and also if you",
    "start": "3314960",
    "end": "3321680"
  },
  {
    "text": "it's it's open source like I said so it's it's it's under g g GPL version 3 license okay so if you want to you if",
    "start": "3321680",
    "end": "3329039"
  },
  {
    "text": "you want to use Linux uh you can use Linux it's open source it'll be available on the blacket site also one",
    "start": "3329039",
    "end": "3334359"
  },
  {
    "text": "more thing that I want to do is once I go back to make a setup documentation so what I'll do is once I make a setup",
    "start": "3334359",
    "end": "3339400"
  },
  {
    "text": "documentation uh I will be posting on this blog site so that uh so that uh you",
    "start": "3339400",
    "end": "3344760"
  },
  {
    "text": "can you can you can set up that environment and use Limon to analyze Linux malware and also if you have any",
    "start": "3344760",
    "end": "3350359"
  },
  {
    "text": "feedbacks or questions feel free to send me an email or uh the the email that I",
    "start": "3350359",
    "end": "3355599"
  },
  {
    "text": "mentioned at the start of the presentation uh use Limon and let me know if you have any uh any feedbacks or",
    "start": "3355599",
    "end": "3362920"
  },
  {
    "text": "if you want to write your own plugins feel free to write it and please share it with the community uh I hope you like",
    "start": "3362920",
    "end": "3368280"
  },
  {
    "text": "the presentation with this I conclude my presentation have a nice day guys",
    "start": "3368280",
    "end": "3373960"
  },
  {
    "text": "[Applause]",
    "start": "3374010",
    "end": "3378099"
  }
]