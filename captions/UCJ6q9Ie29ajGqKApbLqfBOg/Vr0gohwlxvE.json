[
  {
    "text": "[Music] foreign",
    "start": "1730",
    "end": "6720"
  },
  {
    "text": "everyone I can't believe how many people actually made out of bed by 10 a.m at black hat watch Us open a door you could",
    "start": "7880",
    "end": "14639"
  },
  {
    "text": "do that yourselves thanks for coming today and our talk is called perimeter breached hacking access control system",
    "start": "14639",
    "end": "20760"
  },
  {
    "text": "it represents uh a lot more months than we'd like to admit of research on on this Target and we're happy to be able",
    "start": "20760",
    "end": "28080"
  },
  {
    "text": "to share with you today before we get started quick who am I my name is Steve pavolney I'm head of",
    "start": "28080",
    "end": "33600"
  },
  {
    "text": "advanced vet research and principal engineer at trellix and my Twitter handle is there if you want to connect",
    "start": "33600",
    "end": "38760"
  },
  {
    "text": "afterwards or have questions now as a manager on the team everybody thinks all I do is Excel spreadsheets which is",
    "start": "38760",
    "end": "44520"
  },
  {
    "text": "generally true but I do have some core technical interests as well and some of those are vulnerability root cause",
    "start": "44520",
    "end": "49920"
  },
  {
    "text": "analysis reversing exploitation and with Sam this is my first chance to do some",
    "start": "49920",
    "end": "55140"
  },
  {
    "text": "Hardware hacking so fun fun chance to learn yeah and my name is Sam Quinn I'm a senior security researcher at trellix",
    "start": "55140",
    "end": "60780"
  },
  {
    "text": "and I could have summed up all of my interests in just hacking in general but I really do like exploitation Hardware",
    "start": "60780",
    "end": "67680"
  },
  {
    "text": "hacking embedded systems like iot devices and of course OS fundamentals and Sam and I",
    "start": "67680",
    "end": "74159"
  },
  {
    "text": "have interests outside of the lab so when we're not finding uh crashes in the lab uh we're out mountain biking and",
    "start": "74159",
    "end": "79619"
  },
  {
    "text": "crashes are finding us so that's legitimate photos that are Gifts of both of us",
    "start": "79619",
    "end": "84900"
  },
  {
    "text": "um yeah we're obviously experts at that as well all right I'll levity aside let's get right into the target here and",
    "start": "84900",
    "end": "91860"
  },
  {
    "text": "we're talking today about the hid Mercury axis control panel specifically this is the Lanell 4420 which is an oem",
    "start": "91860",
    "end": "98939"
  },
  {
    "text": "vendor of the hid mercurus Mercury Access Controller I'm going to talk a little bit about the who the what the",
    "start": "98939",
    "end": "105900"
  },
  {
    "text": "why the how of this project and before I do that I want to set the stage a little bit for how this device is typically",
    "start": "105900",
    "end": "112200"
  },
  {
    "text": "used so this red panel or controller is actually what you see in the on the door",
    "start": "112200",
    "end": "117899"
  },
  {
    "text": "behind the door in the typical setup that's going to usually be in a in a server Closet in this case though it's",
    "start": "117899",
    "end": "123840"
  },
  {
    "text": "often deployed on a local network very rarely would we see this at the perimeter uh not behind a firewall or",
    "start": "123840",
    "end": "129720"
  },
  {
    "text": "Internet exposed certainly possible but much more likely on a local network here and this controller is used to manage up",
    "start": "129720",
    "end": "136140"
  },
  {
    "text": "to 64 doors or badges that can be Daisy chained as well to support essentially an infinite number now for lennell",
    "start": "136140",
    "end": "143340"
  },
  {
    "text": "there's a management server or local server called the on guard which is responsible for doing all of the badge",
    "start": "143340",
    "end": "149220"
  },
  {
    "text": "provisioning access control all of the door related functions and the controller itself is kind of just a dumb",
    "start": "149220",
    "end": "155459"
  },
  {
    "text": "device that processes those commands and opens and closes relays now why are we looking at Access Control",
    "start": "155459",
    "end": "161580"
  },
  {
    "text": "well we got interested in this of course because critical infrastructure and Industrial Control Systems have been",
    "start": "161580",
    "end": "167940"
  },
  {
    "text": "widely targeted especially over the last five to ten years increasingly so more",
    "start": "167940",
    "end": "173099"
  },
  {
    "text": "so I would say the access control area is one of those that's been heavily under audited by the research community",
    "start": "173099",
    "end": "178800"
  },
  {
    "text": "and so it really caught our attention one of the other things that really caught our attention when we first",
    "start": "178800",
    "end": "184140"
  },
  {
    "text": "started looking at this device was some marketing by Lanell that said that this was certified for use in government",
    "start": "184140",
    "end": "190379"
  },
  {
    "text": "facilities now we found out throughout the process of talking with carrier and Lanell that this is actually intended to",
    "start": "190379",
    "end": "197099"
  },
  {
    "text": "be a physical security certification but regardless it inspired us to do the research because it says it was approved",
    "start": "197099",
    "end": "204659"
  },
  {
    "text": "following rigorous security vulnerability and interoperability testing okay so we had a little finger",
    "start": "204659",
    "end": "209879"
  },
  {
    "text": "licking moment there and that's what inspired all of this so that's kind of the why though what",
    "start": "209879",
    "end": "215280"
  },
  {
    "text": "and this is the spoiler alert we've already disclosed these and these are all fully patched so comfortable to share these we have eight",
    "start": "215280",
    "end": "221640"
  },
  {
    "text": "vulnerabilities that we submitted for disclosure four of which are true zero day vulnerabilities and unauthenticated",
    "start": "221640",
    "end": "228540"
  },
  {
    "text": "remote code execution we're going to focus on just three of them today given the time constraints we have at Black",
    "start": "228540",
    "end": "234120"
  },
  {
    "text": "Cat and we'll have a little bit more detail in our Defcon talk as well if you want to join us",
    "start": "234120",
    "end": "239459"
  },
  {
    "text": "all right so that brings us to the who who's affected by these well when we did this project originally on the Lanell",
    "start": "239459",
    "end": "245879"
  },
  {
    "text": "4420 board we kind of had thought that that was the extent of impacted panels",
    "start": "245879",
    "end": "251220"
  },
  {
    "text": "well we found out later through talking to Carrie or Lanell and Mercury was that there was eight additional panels that",
    "start": "251220",
    "end": "257699"
  },
  {
    "text": "were also vulnerable to these same issues bringing us to a total of nine effective panels and more so over 20 OEM",
    "start": "257699",
    "end": "264360"
  },
  {
    "text": "vendors which put a sticker on the hid Mercury boards were affected by all vulnerabilities so this represents",
    "start": "264360",
    "end": "270600"
  },
  {
    "text": "millions of controllers at tens of thousands of sites worldwide and really the vast majority of Fortune 100",
    "start": "270600",
    "end": "277080"
  },
  {
    "text": "companies so the install base is pretty significant here and finally these are",
    "start": "277080",
    "end": "282120"
  },
  {
    "text": "now added to the or the 4420 was added to the government's APL or approved product list meaning there's no",
    "start": "282120",
    "end": "288180"
  },
  {
    "text": "additional security certifications that they need to put these in a sensitive or protected facility",
    "start": "288180",
    "end": "294060"
  },
  {
    "text": "the way that we approach this project is we didn't want to just get up here and dump CDs on you guys that's that's kind",
    "start": "294060",
    "end": "299639"
  },
  {
    "text": "of an old story we're going to do that but not just that we're also going to talk about the kind of a choose your",
    "start": "299639",
    "end": "304800"
  },
  {
    "text": "opponent Venture style where we say you know at various decision points in this process what did we decide to do and",
    "start": "304800",
    "end": "310380"
  },
  {
    "text": "what was the logic or rationale behind it now uh we actually presented part of this research at Hardware Hardware i o a",
    "start": "310380",
    "end": "317160"
  },
  {
    "text": "couple months ago but we spent a lot more of our Focus there talking on the hardware analysis Hardware hacking to",
    "start": "317160",
    "end": "322680"
  },
  {
    "text": "get us to the point where we had a root shell on the device so for today's purposes both black hat and Defcon will",
    "start": "322680",
    "end": "328500"
  },
  {
    "text": "be starting with a root shell and there's no vulnerabilities to get to this point there was a lot of work and",
    "start": "328500",
    "end": "333600"
  },
  {
    "text": "Hardware analysis to get a root shell but the vulnerabilities really were only possible to find from this point of",
    "start": "333600",
    "end": "338759"
  },
  {
    "text": "analysis on let's start by looking at some of the standard operations on this control panel as you might imagine one of the",
    "start": "338759",
    "end": "346320"
  },
  {
    "text": "first things we do is scan the open network ports and we found just three open ports here the web server which",
    "start": "346320",
    "end": "351960"
  },
  {
    "text": "runs 80 and SSL 443 and also Port 3001 which is used as the on guard Management",
    "start": "351960",
    "end": "358380"
  },
  {
    "text": "Port so that's that LSM the local security manager that manages the device now we didn't have that set at set up at",
    "start": "358380",
    "end": "364979"
  },
  {
    "text": "the time because we bought our first board off of eBay and so we really didn't have anything to do with that port at the time",
    "start": "364979",
    "end": "370620"
  },
  {
    "text": "when the web server spins up you're greeted with a typical admin you know password login this is where typical",
    "start": "370620",
    "end": "376259"
  },
  {
    "text": "session management is done and done properly for in many places hint hint",
    "start": "376259",
    "end": "381419"
  },
  {
    "text": "um but this is where we we track section cookies and and you know we we are able to authenticate to the device",
    "start": "381419",
    "end": "387000"
  },
  {
    "text": "when you log in you're greeted with some of these Diagnostics and configuration tabs what you might notice from the web",
    "start": "387000",
    "end": "393180"
  },
  {
    "text": "server is very little to none of this has anything to do with access control or doors or badges this is all device",
    "start": "393180",
    "end": "399780"
  },
  {
    "text": "configuration contents nonetheless it became one of the most interesting places for us to look especially at the",
    "start": "399780",
    "end": "405840"
  },
  {
    "text": "network setting tabs and we'll we'll go into a lot more detail on why we chose that in just a moment here",
    "start": "405840",
    "end": "412080"
  },
  {
    "text": "so that brings us to our first choose your opponent Adventure which was our objective at this point was pretty clear-cut we wanted to find a zero day",
    "start": "412080",
    "end": "419280"
  },
  {
    "text": "rce vulnerability and ideally have it be unauthenticated so that we could do network-based attacks without having to",
    "start": "419280",
    "end": "425699"
  },
  {
    "text": "log in three different areas we could have investigated NOS vulnerability where we're looking for proprietary code or",
    "start": "425699",
    "end": "432539"
  },
  {
    "text": "applications libraries and files from the vendors Keys credentials crypto all that kind of stuff we kind of opted to",
    "start": "432539",
    "end": "439259"
  },
  {
    "text": "go for more of a web-based and network-based approach where we're looking for things like a command injection because we have access to the",
    "start": "439259",
    "end": "445620"
  },
  {
    "text": "web server of course and that can be a really great place to start analysis on the network phone side we'd be typically",
    "start": "445620",
    "end": "452220"
  },
  {
    "text": "looking at the network stack itself probably for an end day in some of the third party libraries or the stack but",
    "start": "452220",
    "end": "458759"
  },
  {
    "text": "we ended up going with the web-based vulnerability one of the key areas for uh for",
    "start": "458759",
    "end": "464639"
  },
  {
    "text": "web-based attacks includes command injections and this was our ideal candidate because if you look at one of",
    "start": "464639",
    "end": "470639"
  },
  {
    "text": "the startup processes on the on the controller itself there's a DHCP scriptlet that's run as root here which",
    "start": "470639",
    "end": "477060"
  },
  {
    "text": "processes the hostname with a dash H switch for the controller itself in this case it's called controller one and we",
    "start": "477060",
    "end": "483960"
  },
  {
    "text": "can see that that controller is actually taken from the hostname file on the device so if we can command inject into",
    "start": "483960",
    "end": "489660"
  },
  {
    "text": "the hostname which of course we're going to show you the ability to do we might be able to actually execute code here",
    "start": "489660",
    "end": "496440"
  },
  {
    "text": "so let's talk about some of the character restrictions on the network page and that's what we're on the network settings page if you look at",
    "start": "496440",
    "end": "502319"
  },
  {
    "text": "where the controller is uh the host name is set which in this case is called controller one we have some character",
    "start": "502319",
    "end": "508020"
  },
  {
    "text": "restrictions on the client side which are alphanumeric characters and period and hyphen when we look at the actual",
    "start": "508020",
    "end": "514380"
  },
  {
    "text": "JavaScript that's responsible for processing that the string match does absolutely match up to that we see",
    "start": "514380",
    "end": "519719"
  },
  {
    "text": "alphanumeric and dash and Dot characters as being the only ones allowed well as",
    "start": "519719",
    "end": "525000"
  },
  {
    "text": "we all know client-side is not typically the only thing that's being checked there's also server side checks here and",
    "start": "525000",
    "end": "530160"
  },
  {
    "text": "we see this function called xss string test or the cross-site scripting string test now they do look for a number of",
    "start": "530160",
    "end": "536040"
  },
  {
    "text": "cross-site scripting characters in here and this is an additional character filter list but not just for xss there's",
    "start": "536040",
    "end": "541980"
  },
  {
    "text": "also some interesting command injection restrictions here we'd like to be able to use the forward slash character for",
    "start": "541980",
    "end": "547200"
  },
  {
    "text": "paths we'd like to be able to use the semicolon for uh for command injection but what you might notice in here is",
    "start": "547200",
    "end": "553200"
  },
  {
    "text": "that they aren't checking for things like the sigil the dollar sign or parentheses and I'll come back to that",
    "start": "553200",
    "end": "558779"
  },
  {
    "text": "in just a moment here the final thing that is being parsed here is a function called parse forms data where there's a",
    "start": "558779",
    "end": "564779"
  },
  {
    "text": "string tokenizer function that's actually splitting the hostname string anytime it sees an equals or white space",
    "start": "564779",
    "end": "570420"
  },
  {
    "text": "single white space character now white space characters are super useful when you're using command injection so to get",
    "start": "570420",
    "end": "576180"
  },
  {
    "text": "around that we use that dollar sign and parentheses to do command injection instead of a semicolon and we replace",
    "start": "576180",
    "end": "582480"
  },
  {
    "text": "the single white spaces with tab characters or backslash T here and that worked perfectly well because Linux will",
    "start": "582480",
    "end": "588360"
  },
  {
    "text": "interpret any white space any white space characters as well as the others",
    "start": "588360",
    "end": "594600"
  },
  {
    "text": "before we go into the command injection and kind of show you that part of it live and we're going to break up the attack into kind of live sections on",
    "start": "594600",
    "end": "600600"
  },
  {
    "text": "stage here because that makes it easier to get massive epic failures uh let's talk about the way that authentication",
    "start": "600600",
    "end": "606480"
  },
  {
    "text": "is handled for gits and posts to the web server get requests are handled pretty typically here you get a session ID by",
    "start": "606480",
    "end": "612839"
  },
  {
    "text": "calling get session ID function and then you compare that session ID to the session ID that's taken from the cookie",
    "start": "612839",
    "end": "618600"
  },
  {
    "text": "value that all makes sense and if that check validates you're good to go now",
    "start": "618600",
    "end": "623760"
  },
  {
    "text": "what's a little bit strange is the way that post requests are being handled and the way that posts are done starts out the same way get session ID from a",
    "start": "623760",
    "end": "630720"
  },
  {
    "text": "cookie but as you might see that's never compared to anything so it's just checking that any session idea exists",
    "start": "630720",
    "end": "636120"
  },
  {
    "text": "and you'll see in our Command injection we use 1337 1337 as our session ID you",
    "start": "636120",
    "end": "641640"
  },
  {
    "text": "can use anything you want here and any post request data will succeed unauthenticated",
    "start": "641640",
    "end": "646800"
  },
  {
    "text": "all right so Sam's going to start us off by loading up a live demo here where we show you a little bit more of the",
    "start": "646800",
    "end": "652680"
  },
  {
    "text": "command injection how that works the auth bypass and we're going to hack this incrementally as we show you here",
    "start": "652680",
    "end": "659279"
  },
  {
    "text": "way too small oh there we go so I'll first of all start off with our Command and control",
    "start": "659279",
    "end": "665940"
  },
  {
    "text": "server this is to bypass not having to type our whole every script that we want to run into that hostname so this will",
    "start": "665940",
    "end": "673019"
  },
  {
    "text": "eventually give out some more commands for us to run we'll come back to this in just a little bit though",
    "start": "673019",
    "end": "679380"
  },
  {
    "text": "um so then next we'll start off by actually doing the command ejection so I will first go ahead and Cat that out for",
    "start": "679380",
    "end": "686459"
  },
  {
    "text": "you um it's a simple bash script and since we're using Curl we're not using any of",
    "start": "686459",
    "end": "691740"
  },
  {
    "text": "the JavaScript that Steve showed to do any of the character restrictions and it looks kind of confusing we'll dive into",
    "start": "691740",
    "end": "696899"
  },
  {
    "text": "it a little bit more in a bit but the most important thing that I want to point out here is that the session ID is",
    "start": "696899",
    "end": "703079"
  },
  {
    "text": "a Boga session ID so this is unauthenticated here and we'll go ahead and run that",
    "start": "703079",
    "end": "709820"
  },
  {
    "text": "all right and so that has Ran So now if we go ahead and pull up the web server",
    "start": "712320",
    "end": "718320"
  },
  {
    "text": "and log in",
    "start": "718320",
    "end": "721640"
  },
  {
    "text": "use the password manager but I can't here we go log in and go to that Network",
    "start": "723959",
    "end": "730860"
  },
  {
    "text": "page where the host name is shown it did indeed get all of those you know",
    "start": "730860",
    "end": "737459"
  },
  {
    "text": "restricted characters applied and our host name is now a valid command",
    "start": "737459",
    "end": "742560"
  },
  {
    "text": "ejection however as Steve mentioned it does only run at boot so we'll kind of go back into our slides here and kind of",
    "start": "742560",
    "end": "748800"
  },
  {
    "text": "cover how we kind of use this still to put it uh you know exploit the system",
    "start": "748800",
    "end": "754980"
  },
  {
    "text": "so the first thing as Steve mentioned that what's highlighted in red here is not a space it's indeed a tab which",
    "start": "754980",
    "end": "761640"
  },
  {
    "text": "works perfectly fine for the Linux interpreter and as he also mentioned we are running this at boot up through the",
    "start": "761640",
    "end": "768540"
  },
  {
    "text": "DHCP call this is how the Linux controller of the device gets an IP address for the first time and most",
    "start": "768540",
    "end": "774959"
  },
  {
    "text": "importantly we want it's happening through the hostname as you mentioned but this is the command we actually want",
    "start": "774959",
    "end": "781139"
  },
  {
    "text": "to run this reaches out to that python listener that we set up our C2 servers",
    "start": "781139",
    "end": "786180"
  },
  {
    "text": "where we can run arbitrary commands through that and not have to worry about the restricted characters however this",
    "start": "786180",
    "end": "793680"
  },
  {
    "text": "this command injection is a blocking call so of course we don't have an IP address at this point to actually call",
    "start": "793680",
    "end": "799680"
  },
  {
    "text": "this so we actually Nest another DHCP call inside of the original where we're",
    "start": "799680",
    "end": "804959"
  },
  {
    "text": "actually injecting into so this way we actually have networking setup and that W get can actually take place",
    "start": "804959",
    "end": "811440"
  },
  {
    "text": "and this was our first CV that we filed and it is an unauthenticated command ejection the only thing dropping it from",
    "start": "811440",
    "end": "817800"
  },
  {
    "text": "a 10.0 CVSs is that it needs to actually have that reboot to actually trigger so",
    "start": "817800",
    "end": "823920"
  },
  {
    "text": "it doesn't trigger on uh command like we would hoped but that is still a great",
    "start": "823920",
    "end": "829320"
  },
  {
    "text": "cve and we continued our research where we now wanted to actually we really wanted to find a reboot primitive to",
    "start": "829320",
    "end": "836100"
  },
  {
    "text": "actually have that command injection take place so the first thing we looked at was trying to find an unauthenticated",
    "start": "836100",
    "end": "842160"
  },
  {
    "text": "reboot through the web server however there was a reboot like when you click",
    "start": "842160",
    "end": "847800"
  },
  {
    "text": "apply settings it did indeed reboot the device however that was checking the cookies correctly so that wasn't a valid",
    "start": "847800",
    "end": "855120"
  },
  {
    "text": "way to reboot the device we did kind of look into dossing the system there is a",
    "start": "855120",
    "end": "860940"
  },
  {
    "text": "watchdog timer that if any process hangs for too long it will reboot the device this did work about after an hour of",
    "start": "860940",
    "end": "867779"
  },
  {
    "text": "sending thousands and thousands of uh get requests to the device however pretty noisy and slow and kind of not as",
    "start": "867779",
    "end": "874260"
  },
  {
    "text": "cool as we hoped so we continued to look for a way to actually crash the device",
    "start": "874260",
    "end": "879540"
  },
  {
    "text": "and if we can cause a segmentation fault on the on the controller it would actually reboot the device itself so our",
    "start": "879540",
    "end": "887160"
  },
  {
    "text": "next goal was to actually try to find memory corruption vulnerabilities and to do that we wanted to actually",
    "start": "887160",
    "end": "893639"
  },
  {
    "text": "identify you know if it does seg Fault to make sure that it does reboot and the",
    "start": "893639",
    "end": "899100"
  },
  {
    "text": "controller itself has a custom core dump Handler every time any application that dumps its core will run this the script",
    "start": "899100",
    "end": "906480"
  },
  {
    "text": "and it looks pretty standard from this view but if we actually look into that",
    "start": "906480",
    "end": "912240"
  },
  {
    "text": "script it does a bunch of stuff for debugging but the last line of it I don't know if you can see it it says",
    "start": "912240",
    "end": "917579"
  },
  {
    "text": "reboot so this is exactly what we're looking for and all of the web pages are CGI bin files which are compiled and if",
    "start": "917579",
    "end": "924600"
  },
  {
    "text": "you can cause any of those to crash we do indeed dump core run this script and get that reboot that we're looking for",
    "start": "924600",
    "end": "931920"
  },
  {
    "text": "so to improve our odds of trying to find memory corruption vulnerabilities and because all of the web servers are our",
    "start": "931920",
    "end": "938220"
  },
  {
    "text": "websites are running CGI bin files we started to actually create little automation scripts to actually improve",
    "start": "938220",
    "end": "945240"
  },
  {
    "text": "our odds of finding these kind of dangerous functions that are typical for",
    "start": "945240",
    "end": "950639"
  },
  {
    "text": "uh memory corruption vulnerabilities we wrote an Ida python script to search for these but most importantly before any",
    "start": "950639",
    "end": "957240"
  },
  {
    "text": "cookie check took place this way that we could um you know improve our odds of",
    "start": "957240",
    "end": "962279"
  },
  {
    "text": "actually hitting one of these dangerous functions before any cookie check took place and it would be unauthenticated",
    "start": "962279",
    "end": "969240"
  },
  {
    "text": "so you can see that a few of these did indeed have some of these dangerous functions but looking at them statically",
    "start": "969240",
    "end": "975180"
  },
  {
    "text": "all of them did have you know static size Fields were programmed correctly um nothing we could do really there",
    "start": "975180",
    "end": "981000"
  },
  {
    "text": "except for on the next page here we actually did find one in the advanced uh",
    "start": "981000",
    "end": "986220"
  },
  {
    "text": "Network CGI bin file where there were a couple calls to stir copy where we",
    "start": "986220",
    "end": "991680"
  },
  {
    "text": "controlled both inputs and outputs and that's always a good sign for memory corruption so we did look at that",
    "start": "991680",
    "end": "997800"
  },
  {
    "text": "statically and kind of identified that from this script here but we wanted to test it out and it's never good to use",
    "start": "997800",
    "end": "1006980"
  },
  {
    "text": "your only board that you have and try things live because you could corrupt the machine and you know so we actually",
    "start": "1006980",
    "end": "1013699"
  },
  {
    "text": "set up a arm cumu VM full system VM and",
    "start": "1013699",
    "end": "1018920"
  },
  {
    "text": "took the actual Flash images of the device in ch rooted into them and kind of created a poor man's uh emulator and",
    "start": "1018920",
    "end": "1027079"
  },
  {
    "text": "then eventually we used it for fuzzing but before we get dive into that now that the system has that CH root",
    "start": "1027079",
    "end": "1034339"
  },
  {
    "text": "environment and all of the library files and whatnot are in the right place we can actually just run these CGI bin",
    "start": "1034339",
    "end": "1039500"
  },
  {
    "text": "files as normal and you can see here highlighted this is a joke we're sending the post data of hack yourself into this",
    "start": "1039500",
    "end": "1046520"
  },
  {
    "text": "Advanced Network cgibin file and of course it actually does respond with valid HTML and this is how the CGI bin",
    "start": "1046520",
    "end": "1053540"
  },
  {
    "text": "files take post parameters but to actually fuzz it and try to figure out a way to you know see if we missed",
    "start": "1053540",
    "end": "1060380"
  },
  {
    "text": "anything through our python automation we wanted to actually use a mutator and to do this we use the simplest mutator I",
    "start": "1060380",
    "end": "1066860"
  },
  {
    "text": "know of it's redanza it's pretty great you send in data into the radamza through standard in and it mutates the",
    "start": "1066860",
    "end": "1073760"
  },
  {
    "text": "data and comes out differently and that's great for trying to fuzz this",
    "start": "1073760",
    "end": "1079820"
  },
  {
    "text": "exact target what we did is we took the valid post parameters for advanced Network CGI passed it into radamza and",
    "start": "1079820",
    "end": "1087200"
  },
  {
    "text": "as you can see all it did is change the last octet of a DNS server or DNS server",
    "start": "1087200",
    "end": "1092480"
  },
  {
    "text": "to negative one so it it does it different things every single time and this one was a pretty good test in my",
    "start": "1092480",
    "end": "1098120"
  },
  {
    "text": "opinion but running this manually that's not very it wouldn't be very efficient",
    "start": "1098120",
    "end": "1103520"
  },
  {
    "text": "that's for sure so this is the coolest fuzzer that I've written so far it's uh",
    "start": "1103520",
    "end": "1108919"
  },
  {
    "text": "like 15 lines of code and it's just a bash script where it takes that post",
    "start": "1108919",
    "end": "1114740"
  },
  {
    "text": "parameters passes it into rodamza to be mutated and then just sends the mutated",
    "start": "1114740",
    "end": "1121100"
  },
  {
    "text": "data directly into the CGI bin files that we're we're trying to look at and if it the CGI bin files always return a",
    "start": "1121100",
    "end": "1128179"
  },
  {
    "text": "zero if it ran successfully so if anything isn't successful return value we actually spin it up in GDB and then",
    "start": "1128179",
    "end": "1135500"
  },
  {
    "text": "run a back trace on it with the same test case so as you can see in this example here this was indeed a crash in",
    "start": "1135500",
    "end": "1144140"
  },
  {
    "text": "a countster radamza decided to make it much longer and added a bunch of random characters and you can see in the bottom",
    "start": "1144140",
    "end": "1151280"
  },
  {
    "text": "since we rerun it in GDB you can see that it crashed in stir copy and it gave you a full back trace of the system so",
    "start": "1151280",
    "end": "1157760"
  },
  {
    "text": "pretty simple simple to set up and honestly a pretty fun fuzzer and however",
    "start": "1157760",
    "end": "1162980"
  },
  {
    "text": "all of that automation work didn't find any more vulnerabilities than we found statically but uh it was still a good",
    "start": "1162980",
    "end": "1169220"
  },
  {
    "text": "sidebar this was a second cve that we filed for",
    "start": "1169220",
    "end": "1174559"
  },
  {
    "text": "this talk and it was an unauthenticated denial of service because we it was only an out of bounds read for that",
    "start": "1174559",
    "end": "1180260"
  },
  {
    "text": "segmentation fault we couldn't use it to exploit the device however we were able to use this to cause the segmentation",
    "start": "1180260",
    "end": "1186200"
  },
  {
    "text": "fault to reboot it so a denial of service there and then now that we have kind of the",
    "start": "1186200",
    "end": "1192260"
  },
  {
    "text": "chain of these two vulnerabilities together we can indeed actually kind of exploit the device and I'll have Steve",
    "start": "1192260",
    "end": "1198559"
  },
  {
    "text": "kind of walk us through the next steps so now we're at a point where we have a fully working exploit chain we have a",
    "start": "1198559",
    "end": "1204620"
  },
  {
    "text": "command injection that runs at reboot and we have a way to force reboot through that segmentation fault core dump Handler so this was a great point",
    "start": "1204620",
    "end": "1211100"
  },
  {
    "text": "for us to actually update to the latest firmware because we bought our first device off of eBay we didn't really have",
    "start": "1211100",
    "end": "1216980"
  },
  {
    "text": "the ability to do this so we put heavy quotes around social engineering here really what we did is we called up a",
    "start": "1216980",
    "end": "1222799"
  },
  {
    "text": "third-party installer in our Portland area called convergent and they do a lot of installs for uh for Lanell and you",
    "start": "1222799",
    "end": "1229760"
  },
  {
    "text": "know we we may have done a little Cloak and Dagger in terms of what our intentions were at this point but they",
    "start": "1229760",
    "end": "1234799"
  },
  {
    "text": "came out and built us a couple iterations of this this Behemoth you see on stage here so that gave us the",
    "start": "1234799",
    "end": "1240260"
  },
  {
    "text": "ability to integrate the on guard management server for the first time we built out a fully functional demo unit",
    "start": "1240260",
    "end": "1245600"
  },
  {
    "text": "with the controller and card reader this is wired exactly as it would be in any facility with the exception that",
    "start": "1245600",
    "end": "1251299"
  },
  {
    "text": "typically the controller is going to be in a supply closet or a server closet more importantly they gave us some",
    "start": "1251299",
    "end": "1257480"
  },
  {
    "text": "Advanced Training on the normal operations of this device and how to use the management server provision Badges",
    "start": "1257480",
    "end": "1263120"
  },
  {
    "text": "and access control and the most important thing is we finally had the ability to update the latest version of",
    "start": "1263120",
    "end": "1269539"
  },
  {
    "text": "firmware not only that but because we had a separate Standalone server for onguard we had a copy of the firmware on",
    "start": "1269539",
    "end": "1275660"
  },
  {
    "text": "the local file system the legitimate firmware that we could use to play with all right so this brought to a success",
    "start": "1275660",
    "end": "1282320"
  },
  {
    "text": "and failure Road here on the one hand we had you know we'll start with our failure we had our seg fault handling",
    "start": "1282320",
    "end": "1287660"
  },
  {
    "text": "that rebooted on any system binary before that gave us our stir copy forced reboot well afterward after this update",
    "start": "1287660",
    "end": "1294559"
  },
  {
    "text": "Sig fault was only Sig field only caused a reboot of the device with the two main",
    "start": "1294559",
    "end": "1299600"
  },
  {
    "text": "system binaries and so we lost that unauthenticated dos on the latest version of firmware at the time and",
    "start": "1299600",
    "end": "1305840"
  },
  {
    "text": "these are the two system binaries that actually do still reboot however the more important thing is that our Command",
    "start": "1305840",
    "end": "1310940"
  },
  {
    "text": "injection vulnerabilities survived this update it was not patched out or discovered and we knew that we for sure",
    "start": "1310940",
    "end": "1316159"
  },
  {
    "text": "could find a way to cause this device to to reboot that brought us to choose opponent Venture number three where now that our",
    "start": "1316159",
    "end": "1322820"
  },
  {
    "text": "dos was dead we had to either we had to find a new method of achieving that unauthenticated rce there's a few",
    "start": "1322820",
    "end": "1328640"
  },
  {
    "text": "different options here one would be to find a new Standalone vulnerability kind of a a zero or one click uh you know to",
    "start": "1328640",
    "end": "1335299"
  },
  {
    "text": "rule them all we could find a reboot primitive or a new reboot primitive or or crash that we could actually chain to",
    "start": "1335299",
    "end": "1342260"
  },
  {
    "text": "replace our our broken chain here or we could have moved forward and prepared our quote-unquote malware or door",
    "start": "1342260",
    "end": "1347600"
  },
  {
    "text": "exploit because we know at some point the door is going to go down or be rebooted and our Command injection will",
    "start": "1347600",
    "end": "1352640"
  },
  {
    "text": "get triggered obviously we're we're uh we're way too lazy for that we're not not going to wait for it to reboot by",
    "start": "1352640",
    "end": "1358340"
  },
  {
    "text": "itself we had some new toys to play with with this firmware update and one of the things that was added in the update was",
    "start": "1358340",
    "end": "1364640"
  },
  {
    "text": "this Diagnostics menu in the web server which had a firmware upload option that firmware upload option clearly states",
    "start": "1364640",
    "end": "1371179"
  },
  {
    "text": "that it'll reboot the board if you upload the firmware so now we at least have an authenticated way to reboot the",
    "start": "1371179",
    "end": "1376700"
  },
  {
    "text": "device but that's not good enough all right so I'm going to give another little live demo here and we're going to",
    "start": "1376700",
    "end": "1382520"
  },
  {
    "text": "show you guys um how we actually get around this",
    "start": "1382520",
    "end": "1387580"
  },
  {
    "text": "it's already up down there okay all right so we're back to the uh the panel here",
    "start": "1387980",
    "end": "1394640"
  },
  {
    "text": "and what I'm going to do is you can see the developer settings on the right side and I'm going to actually log out real",
    "start": "1394640",
    "end": "1401299"
  },
  {
    "text": "quickly",
    "start": "1401299",
    "end": "1403539"
  },
  {
    "text": "I'm going to log back in to show you how the session cookies are handled here",
    "start": "1406340",
    "end": "1411639"
  },
  {
    "text": "all right so if you look on the right you'll see the network requests going through and we'll see the session ID is",
    "start": "1416000",
    "end": "1421400"
  },
  {
    "text": "appended on to the end of the banner and menu and welcome page the new page that was added was this Diagnostics menu and",
    "start": "1421400",
    "end": "1428360"
  },
  {
    "text": "when I clicked on that what you'll see is the diagnostic CGI with the session ID is added to it and that is done",
    "start": "1428360",
    "end": "1434720"
  },
  {
    "text": "appropriately and we're going to talk we're going to we're going to right click on this and we're going to copy it and just make sure that that is working",
    "start": "1434720",
    "end": "1441200"
  },
  {
    "text": "as intended from logged out but before we do that I want to just show one thing as I clicked on that Diagnostics menu",
    "start": "1441200",
    "end": "1447740"
  },
  {
    "text": "there was another CGI file loaded view firmwareupdate.cgi and if you have sharp",
    "start": "1447740",
    "end": "1452780"
  },
  {
    "text": "eyes you probably realize that there's no session ID on that okay so let's go ahead and log out",
    "start": "1452780",
    "end": "1458900"
  },
  {
    "text": "and we'll go ahead and paste into here the full request that we had for the",
    "start": "1458900",
    "end": "1464720"
  },
  {
    "text": "Diagnostics menu and obviously the session cookie is invalid so it gives us this timeout and it no longer works",
    "start": "1464720",
    "end": "1470780"
  },
  {
    "text": "however if we remember that CGI page that we had just gone to and we go to it directly from a logged",
    "start": "1470780",
    "end": "1476900"
  },
  {
    "text": "out session because there's no session ID checking whatsoever we can go to this page completely unauthenticated",
    "start": "1476900",
    "end": "1482299"
  },
  {
    "text": "bypassing all logins no session cookie whatsoever and now we can upload files directly so this is obviously a major",
    "start": "1482299",
    "end": "1488840"
  },
  {
    "text": "flaw and it is part of the vulnerability reported here what I'm going to do is I'm going to actually choose a file here",
    "start": "1488840",
    "end": "1496640"
  },
  {
    "text": "and I'm going to start it up uploading and what you're going to hear is this is going to cause a crash I'm going to explain to you as it loads here what's",
    "start": "1496640",
    "end": "1503179"
  },
  {
    "text": "happening if you have sharp ears you probably hear the device the door beep and reboot because that's what we're",
    "start": "1503179",
    "end": "1508220"
  },
  {
    "text": "trying to get it to do so I'll go ahead and load the file and then we'll go back to slides and uh and resume talking about what we just did",
    "start": "1508220",
    "end": "1515379"
  },
  {
    "text": "okay all right so we now have the ability to control file on input unauthenticated",
    "start": "1519440",
    "end": "1525500"
  },
  {
    "text": "and some of the areas that we might be interested in looking at there the door just rebooted probably heard it up front",
    "start": "1525500",
    "end": "1531220"
  },
  {
    "text": "some of the areas that we're looking at are our user controlled input here we could look at the file contents itself",
    "start": "1531220",
    "end": "1536900"
  },
  {
    "text": "we could look at things like the parsing of the file name or even some of the sizes these are typical user controlled",
    "start": "1536900",
    "end": "1542240"
  },
  {
    "text": "input Fields now when we look back at that Diagnostics or firmware update page one of the first things that Sam and I",
    "start": "1542240",
    "end": "1548539"
  },
  {
    "text": "tried was just creating an empty file in this case we call it fubar.txt it has nothing in it we go ahead and try to",
    "start": "1548539",
    "end": "1554419"
  },
  {
    "text": "install it and sure enough it takes it tries to install it and it ends up erroring out one of the things that it",
    "start": "1554419",
    "end": "1559880"
  },
  {
    "text": "says in the error message is this invalid signature size now that clued us into that there was probably some",
    "start": "1559880",
    "end": "1565340"
  },
  {
    "text": "signature being checked for the file and we decided to look at the legitimate firmware file to see what was happening",
    "start": "1565340",
    "end": "1570860"
  },
  {
    "text": "now it's an encrypted file we pulled it directly off that on guard server and so for the most part it's pretty",
    "start": "1570860",
    "end": "1576559"
  },
  {
    "text": "uninteresting until you get to the last hex 158 bytes which probably looks familiar to many of you this is a base64",
    "start": "1576559",
    "end": "1583700"
  },
  {
    "text": "encoded blob that represents the file signature but more importantly the last three bytes are an ASCII representation",
    "start": "1583700",
    "end": "1590240"
  },
  {
    "text": "of that signature size 158 so we knew that it was parsing this not dynamically bite by bite but taking a user",
    "start": "1590240",
    "end": "1596960"
  },
  {
    "text": "controlled value that's a great place to look further at the code and see if it's being handled correctly",
    "start": "1596960",
    "end": "1602480"
  },
  {
    "text": "first thing I'll draw your attention to in that firmware size check here is a is a Malik of a hex 190 byte so a static",
    "start": "1602480",
    "end": "1608840"
  },
  {
    "text": "sized Malik here and of course then the file is open for reading the firmware file so far so good the next thing that",
    "start": "1608840",
    "end": "1616460"
  },
  {
    "text": "happens is a file seek or an f-seq where it'll go to the end of the file minus three bytes and as you imagine it's",
    "start": "1616460",
    "end": "1622520"
  },
  {
    "text": "taking those three bytes as the ASCII size value of the signature size and it'll read those three bytes in using",
    "start": "1622520",
    "end": "1628580"
  },
  {
    "text": "the F read function then it does a stir to L or string to Long conversion to take that 158 or",
    "start": "1628580",
    "end": "1635240"
  },
  {
    "text": "whatever is specified and convert it to a long and as you guessed it that's used as one of the arguments to the F read",
    "start": "1635240",
    "end": "1641900"
  },
  {
    "text": "function here so this is where the actual Heap overflow will happen this is uh this is where we can overflow that",
    "start": "1641900",
    "end": "1647179"
  },
  {
    "text": "static sized malloc buffer and just a few instructions later in the file close function is where we'll actually see the",
    "start": "1647179",
    "end": "1653720"
  },
  {
    "text": "crash happen so we spent a lot of time doing like Rob Gadgets in the emulator we got a full",
    "start": "1653720",
    "end": "1660679"
  },
  {
    "text": "single wrap Gadget working to be able to get full code execution in our emulator but when we transferred it back to",
    "start": "1660679",
    "end": "1666559"
  },
  {
    "text": "Hardware we just ran out of time to get it working we had we had process threading issues we had a heat",
    "start": "1666559",
    "end": "1673039"
  },
  {
    "text": "manipulation problems so we got this working in the emulator we never ended up getting working on the device Hardware but we're hackers we're lazy we",
    "start": "1673039",
    "end": "1680360"
  },
  {
    "text": "just used it for the seg fault reboot and chained it with a command injection either way we are going to talk about that wrap",
    "start": "1680360",
    "end": "1686120"
  },
  {
    "text": "stuff at Defcon if you want to come that'll be really the only thing that's different for that talk but we're going to explore that in the extra five",
    "start": "1686120",
    "end": "1691460"
  },
  {
    "text": "minutes we have so to understand this Heap overflow essentially we've made a fake copy of the firmware just a random empty file",
    "start": "1691460",
    "end": "1698299"
  },
  {
    "text": "and we filled it with a unique and predictable pattern if you think of your metasploid pattern create or pattern",
    "start": "1698299",
    "end": "1703640"
  },
  {
    "text": "generate that's what we're doing here to find the the different offsets that we can control now this is an encrypted",
    "start": "1703640",
    "end": "1709039"
  },
  {
    "text": "file so it does require The Salted underscore underscore encryption header it does check that and of course we",
    "start": "1709039",
    "end": "1715400"
  },
  {
    "text": "changed the file signature size from 158 to anything over 190 we chose 999 here",
    "start": "1715400",
    "end": "1720620"
  },
  {
    "text": "as an arbitrarily large value then we've set a break point before what we perceived would be the controlled",
    "start": "1720620",
    "end": "1726740"
  },
  {
    "text": "execution in that F close function and what I want to draw your attention to is this Branch instruction so BLX is an",
    "start": "1726740",
    "end": "1733340"
  },
  {
    "text": "unconditional branch in arm which will Branch to the R3 register why is that important well as you can see from the",
    "start": "1733340",
    "end": "1739340"
  },
  {
    "text": "registers printed out here we control with our pattern data registers r0 R1 R3",
    "start": "1739340",
    "end": "1745279"
  },
  {
    "text": "and R6 and R4 we control the pointer to our pattern data and that'll be really",
    "start": "1745279",
    "end": "1751640"
  },
  {
    "text": "important when we talk about Rob later again we're not going to waste the time on that right now but just a little bit of understanding we ended up using this",
    "start": "1751640",
    "end": "1758059"
  },
  {
    "text": "just for the segmentation fault and the forced reboot and that's what you heard when the door rebooted this ultimately",
    "start": "1758059",
    "end": "1764059"
  },
  {
    "text": "was filed as our highest CVSs score of a 10.0 it is an unauthenticated full",
    "start": "1764059",
    "end": "1769100"
  },
  {
    "text": "remote code execution on the device all right so Sam's going to take us home just by talking about the exploitation",
    "start": "1769100",
    "end": "1776120"
  },
  {
    "text": "of this device how we turn these three vulnerabilities into something that actually impacts the physical hardware",
    "start": "1776120",
    "end": "1781159"
  },
  {
    "text": "and again air quotes on malware right we don't write and release malware this is a proof of concept malware's a kind of",
    "start": "1781159",
    "end": "1788120"
  },
  {
    "text": "an aggressive term there but this is just to demonstrate that we can actually control the doors functions and yeah and",
    "start": "1788120",
    "end": "1793279"
  },
  {
    "text": "this was our last you know choose your opponent Venture where we could have gone around about this malware in two",
    "start": "1793279",
    "end": "1798980"
  },
  {
    "text": "different ways probably most people that were actually trying to extract money would go the ransomware way you know",
    "start": "1798980",
    "end": "1806960"
  },
  {
    "text": "demand money or Bitcoin to have access to your doors again that's pretty lame we ended up going with the Ghost in the",
    "start": "1806960",
    "end": "1813320"
  },
  {
    "text": "Shell James Bond approach to gain you know secret hidden access to a facility and that's ended up what we and we did",
    "start": "1813320",
    "end": "1820220"
  },
  {
    "text": "on this device but to do that we still had to actually control the physical locks and we'll have to dive into how",
    "start": "1820220",
    "end": "1826820"
  },
  {
    "text": "the locks on these doors are actually handled and they're through the use of relays as you see here highlighted in",
    "start": "1826820",
    "end": "1833480"
  },
  {
    "text": "red these are actually the relays which are just electrical switches when voltage is applied it either unlocks the",
    "start": "1833480",
    "end": "1839659"
  },
  {
    "text": "switch or locks it and those are directly connected to the locks themselves through these output pins",
    "start": "1839659",
    "end": "1845059"
  },
  {
    "text": "to actually find how the software controls these relays it was as simple as actually searching through the main",
    "start": "1845059",
    "end": "1851120"
  },
  {
    "text": "system binary for relay and you can see that there is a individual function for on and off for",
    "start": "1851120",
    "end": "1857059"
  },
  {
    "text": "each of these relays so to look at how they actually handle the unlocking of",
    "start": "1857059",
    "end": "1862580"
  },
  {
    "text": "those relays you can look into them and it's even more simple where it's actually just an eye optical call with a",
    "start": "1862580",
    "end": "1868640"
  },
  {
    "text": "file descriptor to the gpio pins that handle these relays parameter to either unlock or close and",
    "start": "1868640",
    "end": "1875120"
  },
  {
    "text": "a zero indexed rate of which which relay to actually control so to create our",
    "start": "1875120",
    "end": "1881240"
  },
  {
    "text": "malware we just took that exact code that pseudocode added it to a C file and",
    "start": "1881240",
    "end": "1887120"
  },
  {
    "text": "then cross-compiled it for arm and we ran it on the device however you can see",
    "start": "1887120",
    "end": "1892520"
  },
  {
    "text": "that there's a while loop here this is our brute force hackie method to actually keep the door unlocked when we",
    "start": "1892520",
    "end": "1898940"
  },
  {
    "text": "first tried this ioctal call it would just instantly instantly re-lock and",
    "start": "1898940",
    "end": "1904460"
  },
  {
    "text": "that was probably because there's some monitoring going on on the system where uh you know it wants to keep the door",
    "start": "1904460",
    "end": "1909500"
  },
  {
    "text": "locked and we want to keep it open so calling it every millisecond actually seem to work pretty good to take",
    "start": "1909500",
    "end": "1915320"
  },
  {
    "text": "precedence over any other monitoring processes so to kind of summarize what we've been doing up here on stage live hacking this",
    "start": "1915320",
    "end": "1922940"
  },
  {
    "text": "device and then kind of show you a sneak preview of what we're going to do we first started off by having that command",
    "start": "1922940",
    "end": "1929419"
  },
  {
    "text": "ejection in the host name however if you remember it only Triggers on reboot so we had to upload that fake firmware",
    "start": "1929419",
    "end": "1937640"
  },
  {
    "text": "update file to cause a segmentation fault and cause a reboot then the command injection does indeed",
    "start": "1937640",
    "end": "1945140"
  },
  {
    "text": "run on Startup and will connect to our C2 server which is our laptop for this case it could have been any machine and",
    "start": "1945140",
    "end": "1951620"
  },
  {
    "text": "download more scripts that we'll use for further exploitation then it does indeed open a listener on",
    "start": "1951620",
    "end": "1959059"
  },
  {
    "text": "the device which now will connect to to the reverse shell and then of course open the entire the door and uh",
    "start": "1959059",
    "end": "1967820"
  },
  {
    "text": "this is what we hope to look like after you know before you do it real quick before you do it yeah so before we",
    "start": "1967820",
    "end": "1973460"
  },
  {
    "text": "attempt to demo Gods with our final demo um we are going to put up a QR code at",
    "start": "1973460",
    "end": "1978559"
  },
  {
    "text": "the end here for Q a we have a quick filming we have to do afterwards so if you have questions we won't be doing them live but you can come find us after",
    "start": "1978559",
    "end": "1984919"
  },
  {
    "text": "or you can scan the QR code here if you want to ask any questions directly go ahead and take your chance now to do",
    "start": "1984919",
    "end": "1990500"
  },
  {
    "text": "that while you're doing that I want to give a quick thanks before we show our final demo here to carrier to John and",
    "start": "1990500",
    "end": "1996260"
  },
  {
    "text": "Josh Cario did an awesome job uh facilitating the disclosure with us to Mercury and making sure that these are",
    "start": "1996260",
    "end": "2002679"
  },
  {
    "text": "all patched timely so thank you guys really appreciate the the hard work there and the vendor responsibility all",
    "start": "2002679",
    "end": "2008620"
  },
  {
    "text": "right so let's go ahead and see if we can epically fail on stage Sam all right okay",
    "start": "2008620",
    "end": "2013720"
  },
  {
    "text": "QR code's gone um here we go so we'll first of all go",
    "start": "2013720",
    "end": "2018940"
  },
  {
    "text": "ahead and connect to that reverse shell on the device we're using socat here because it's a little nicer than netcat",
    "start": "2018940",
    "end": "2024700"
  },
  {
    "text": "and as you can see we do actually now have a root shell and if I type",
    "start": "2024700",
    "end": "2032700"
  },
  {
    "text": "who am I you can see we do have a root access to the device and obviously Steve",
    "start": "2033460",
    "end": "2038740"
  },
  {
    "text": "can't get in so we'll run our super Elite Open Door hack",
    "start": "2038740",
    "end": "2043919"
  },
  {
    "text": "and as you can hear the relay is triggered and we can now successfully walk through the door",
    "start": "2043919",
    "end": "2049980"
  },
  {
    "text": "[Applause]",
    "start": "2049980",
    "end": "2057960"
  },
  {
    "text": "like I said 40 minutes to watch Us open a door so yeah thank you everyone for coming uh please connect with us on",
    "start": "2057960",
    "end": "2064419"
  },
  {
    "text": "social media LinkedIn Twitter afterwards if you have questions stick around we'll be around out in the hallway because",
    "start": "2064419",
    "end": "2070179"
  },
  {
    "text": "there's another session coming up and thank you everyone so much for your time thank you [Applause]",
    "start": "2070179",
    "end": "2075940"
  },
  {
    "text": "[Music] foreign",
    "start": "2075940",
    "end": "2080378"
  },
  {
    "text": "[Music]",
    "start": "2082889",
    "end": "2085999"
  }
]