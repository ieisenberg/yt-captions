[
  {
    "start": "0",
    "end": "33000"
  },
  {
    "text": "this session is abusing performance optimization weaknesses to bypass aslr",
    "start": "240",
    "end": "5720"
  },
  {
    "text": "and your your speaker is yongyong",
    "start": "5720",
    "end": "11000"
  },
  {
    "text": "Lee thank you for the introduction Ricky and um my name is bang Le and um I'm",
    "start": "16080",
    "end": "21800"
  },
  {
    "text": "from Georgia Tech and we have bunch of the collaborators y Jin J T Chong",
    "start": "21800",
    "end": "30119"
  },
  {
    "text": "Tes Kim and W Le so here is a um some sort of the",
    "start": "30119",
    "end": "36160"
  },
  {
    "start": "33000",
    "end": "33000"
  },
  {
    "text": "system attack trans so we always want to inject the code and execute it so so",
    "start": "36160",
    "end": "42520"
  },
  {
    "text": "that sort of the code can be located in the stack or that sort of the code can be located in the Hep and you can simply",
    "start": "42520",
    "end": "48079"
  },
  {
    "text": "jump into that sort of the code but the um the game has been changing a bit",
    "start": "48079",
    "end": "53520"
  },
  {
    "text": "after having some sort of the um production techniques like um",
    "start": "53520",
    "end": "59120"
  },
  {
    "text": "nonexecutable stack or as nonexecutable stack so after doing this so executing",
    "start": "59120",
    "end": "67280"
  },
  {
    "text": "um existing callede out of original program order so you can do the at return return to lipy or uh you can also",
    "start": "67280",
    "end": "73360"
  },
  {
    "text": "jump into the gadget people usually call it autop but in general to launch the all this sort of the different attacks",
    "start": "73360",
    "end": "80280"
  },
  {
    "text": "the attacker needs to know the address of the stack or he objects or code Gadget so you need to bypass ASA anyway",
    "start": "80280",
    "end": "87880"
  },
  {
    "text": "to do some tax so this is the ASL add space layout",
    "start": "87880",
    "end": "94960"
  },
  {
    "text": "randomization so this is actually implemented um to introduce diversity into the M layout of computer systems",
    "start": "94960",
    "end": "102520"
  },
  {
    "text": "and hoping that this can defit the many easily replicated attacks like simple um",
    "start": "102520",
    "end": "107719"
  },
  {
    "text": "return to stack or something like that so here's the briefly history so",
    "start": "107719",
    "end": "113360"
  },
  {
    "start": "111000",
    "end": "111000"
  },
  {
    "text": "aslr is not really adopted at once because implementing ASR itself um",
    "start": "113360",
    "end": "118640"
  },
  {
    "text": "involves the um um the Computing powers and um so that's why so there is some",
    "start": "118640",
    "end": "125399"
  },
  {
    "text": "history so first the de randomization has been introduced first and then there is a px Pro and then L Corner mainstream",
    "start": "125399",
    "end": "132840"
  },
  {
    "text": "eventually up um um up get the um this as implementation in 2005 and after that",
    "start": "132840",
    "end": "141239"
  },
  {
    "text": "Microsoft Vista and also mega X real Park implemented and also after that we also",
    "start": "141239",
    "end": "147800"
  },
  {
    "text": "have bunch of the um mobile devices like iPhone or Android and these mobile",
    "start": "147800",
    "end": "153000"
  },
  {
    "text": "devices also started to implement the",
    "start": "153000",
    "end": "157040"
  },
  {
    "start": "157000",
    "end": "157000"
  },
  {
    "text": "a so to byass a set out um we usually did the um some um there was generally",
    "start": "158519",
    "end": "166560"
  },
  {
    "text": "two different approaches to bypass dat set the first one is about the um we can take the advantage of the non-randomized",
    "start": "166560",
    "end": "172560"
  },
  {
    "text": "data structures like there was like executable compiled with thepi flag",
    "start": "172560",
    "end": "178560"
  },
  {
    "text": "which means that it is just the um not really supporting the aslr for this specific modu so yes there's because",
    "start": "178560",
    "end": "186080"
  },
  {
    "text": "there's no aslr you can it is using the fixed address so the other one is about the virtual AOG or view of the file and",
    "start": "186080",
    "end": "193920"
  },
  {
    "text": "if you get um since there was some implementation issues on Microsoft Windows so this sort of the stuff were",
    "start": "193920",
    "end": "201319"
  },
  {
    "text": "not really randomized so yeah if you know the address of this guys so that address is always always static so you",
    "start": "201319",
    "end": "208680"
  },
  {
    "text": "can take the advantage of it and also there was another data structure called um shared user data and that was also",
    "start": "208680",
    "end": "214599"
  },
  {
    "text": "located in this fixed step fixed address so to what I mean by here is that the um if the data structure or if some sort of",
    "start": "214599",
    "end": "221560"
  },
  {
    "text": "defunction is not really randomized then you can just use that address so the other um sort of the tack",
    "start": "221560",
    "end": "228840"
  },
  {
    "text": "is abusing the low entropy so um so because you can so especially on the web",
    "start": "228840",
    "end": "234959"
  },
  {
    "text": "browsers or if it is using jit then you canplay a lot of the your code on the",
    "start": "234959",
    "end": "240200"
  },
  {
    "text": "memory so if you I think you are familiar with the Hep spray so you can just dump it out a lot of the code then",
    "start": "240200",
    "end": "246239"
  },
  {
    "text": "hoping that you can um your um over overwritten address can point to this",
    "start": "246239",
    "end": "252519"
  },
  {
    "text": "hip spray so this is pretty popular and working pretty well and also there is g j spring and J spring has some different",
    "start": "252519",
    "end": "258400"
  },
  {
    "text": "issues like um you need to bypass um constant folding or constant bliding constant blinding but um um it used to",
    "start": "258400",
    "end": "265880"
  },
  {
    "text": "be working and also um if this server is only using the fork",
    "start": "265880",
    "end": "272759"
  },
  {
    "text": "only So like um if you're getting another another connections and then if you're simply doing the fork then the",
    "start": "272759",
    "end": "278400"
  },
  {
    "text": "address space is always the same for that specific session or for any future sessions then you can take the advantage",
    "start": "278400",
    "end": "284919"
  },
  {
    "text": "of it so we're going to talk a little bit more about uh this for con servers in the Android part but um um let me go",
    "start": "284919",
    "end": "292160"
  },
  {
    "text": "over so the other sort of the way to bypass as is that you can exploit the a",
    "start": "292160",
    "end": "298560"
  },
  {
    "text": "lot of um some forties like if you can um exploit um this sort of the vities",
    "start": "298560",
    "end": "305919"
  },
  {
    "text": "like type confusions or he overflow use fre initial overflow format string or",
    "start": "305919",
    "end": "312520"
  },
  {
    "text": "uninitialized mem read then there is a high chances that you can actually get the some of the memory footprint and",
    "start": "312520",
    "end": "319000"
  },
  {
    "text": "that memory footprint usually have the the address like virtual function pointers and usually if you have a",
    "start": "319000",
    "end": "324319"
  },
  {
    "text": "virtual function pointer or a function pointer then you can get the whole module address",
    "start": "324319",
    "end": "331639"
  },
  {
    "text": "but today we're going to talk about something different this is not really about um taking advantage of the",
    "start": "333759",
    "end": "339080"
  },
  {
    "text": "non-randomized data structure but um not really about um exploiting certain vulnerability but we're going to talk",
    "start": "339080",
    "end": "345440"
  },
  {
    "text": "about something performance oriented designs that were all with",
    "start": "345440",
    "end": "351440"
  },
  {
    "text": "ASL so first so this talk has two different parts so first part I'm going to talk about some script languages and",
    "start": "351440",
    "end": "358199"
  },
  {
    "text": "how it is Implement H table and how we can infer or read the key so that we can",
    "start": "358199",
    "end": "364120"
  },
  {
    "text": "get the address and second part is about Android gigot so let me start with the first",
    "start": "364120",
    "end": "371639"
  },
  {
    "text": "part so before I actually talk about this um the script languages first let",
    "start": "371639",
    "end": "378039"
  },
  {
    "text": "me introduce the hash table so hash table essenti essentially map the keys to the values it's a pretty simple I",
    "start": "378039",
    "end": "384840"
  },
  {
    "text": "simply I I actually stole the picture from Wikipedia and I hope this can really help though it looks really a bit",
    "start": "384840",
    "end": "393160"
  },
  {
    "text": "confusing and um k a hash it to the um to find the prop proper focus and this",
    "start": "393160",
    "end": "398800"
  },
  {
    "text": "is actually the key point of the design uh H table designs so this computation can be done like this so if you have a",
    "start": "398800",
    "end": "407280"
  },
  {
    "text": "key and given the key you compute the hash and then just take the mod on aray",
    "start": "407280",
    "end": "413759"
  },
  {
    "text": "size this is the reason why it is doing the mode operation on the AR size is just because um HT most of the hge",
    "start": "413759",
    "end": "421240"
  },
  {
    "text": "tables are implemented with the underlying array table and you want to make sure that the um that bucket index",
    "start": "421240",
    "end": "427800"
  },
  {
    "text": "doesn't go beyond the size of theay it's very very simple but here's",
    "start": "427800",
    "end": "434720"
  },
  {
    "text": "some problem so um because the array size is pretty limited there has to be",
    "start": "434720",
    "end": "440240"
  },
  {
    "text": "always collisions so what this Collision means is that the um um let's say uh",
    "start": "440240",
    "end": "446560"
  },
  {
    "text": "from this when you're Computing this bucket index and even even if the key is different so that bucket index can be",
    "start": "446560",
    "end": "453319"
  },
  {
    "text": "the same because the already size is always limited so people usually call um open",
    "start": "453319",
    "end": "459720"
  },
  {
    "text": "addressing so people usually use open addressing to find the next available buckets so there are three different",
    "start": "459720",
    "end": "465840"
  },
  {
    "text": "generally three different techniques first one is linear proving and linear proving means that the um when you're um",
    "start": "465840",
    "end": "471800"
  },
  {
    "text": "searching the next available bucket you simply do the linear fion like just do the M plus one just search the next",
    "start": "471800",
    "end": "478400"
  },
  {
    "text": "bucket and quadratic proving is that the um uh when you're searching the next bucket at the first time you try one and",
    "start": "478400",
    "end": "485520"
  },
  {
    "text": "then you try two and then four eight something like that and double hashing hashing is that instead of using the",
    "start": "485520",
    "end": "492120"
  },
  {
    "text": "single hash function to find the next bucket um you can also use the double Hing so that you can make this searching",
    "start": "492120",
    "end": "498400"
  },
  {
    "text": "order more unique or more um",
    "start": "498400",
    "end": "505080"
  },
  {
    "start": "505000",
    "end": "505000"
  },
  {
    "text": "different so um this is I talked about the H table but um you may wonder how it",
    "start": "506080",
    "end": "511840"
  },
  {
    "text": "is related to the aslr so let me talk about the uniled hch table so if you um",
    "start": "511840",
    "end": "517320"
  },
  {
    "text": "we have a lot of the languages like JavaScript Java python Ruby and all",
    "start": "517320",
    "end": "522518"
  },
  {
    "text": "these different languages also implement the H tables no python call the H table",
    "start": "522519",
    "end": "527760"
  },
  {
    "text": "as a dictionary but um the underlying implementation is pretty much the same to the hge table and um sometimes they",
    "start": "527760",
    "end": "534760"
  },
  {
    "text": "use memory addresses as a key for some certain object",
    "start": "534760",
    "end": "540000"
  },
  {
    "text": "so you may wonder what this means so what is this memory addresses as a key so um so when you're implementing",
    "start": "540000",
    "end": "549079"
  },
  {
    "text": "this H tables for General whole obac in the dynamic languages and you may want",
    "start": "549079",
    "end": "554800"
  },
  {
    "text": "to gu some unique identifier for some object so you can because if you're",
    "start": "554800",
    "end": "560560"
  },
  {
    "text": "simply using the memory addresses as a key for this sort of the object then you can really it can the implementation can",
    "start": "560560",
    "end": "567560"
  },
  {
    "text": "be really fast and also it is very very easy to implement because you can simply do the um um stady casting or",
    "start": "567560",
    "end": "574959"
  },
  {
    "text": "reinterpret casting in the C plus so absolutely this can be implemented in",
    "start": "574959",
    "end": "580200"
  },
  {
    "text": "some other different way so first one is that you can also use the random numbers every time you encounter some certain",
    "start": "580200",
    "end": "586920"
  },
  {
    "text": "object and if you want to assign the unique identifier then you can just call them crypto function that so that you",
    "start": "586920",
    "end": "594000"
  },
  {
    "text": "can get your random numbers but this is not really obvious sometimes but um because this is this key spaces I mean",
    "start": "594000",
    "end": "601440"
  },
  {
    "text": "this key spaces is like sometimes 2 to the 16 or 2 to the 32 and it is possible",
    "start": "601440",
    "end": "606600"
  },
  {
    "text": "that there can be Collision there can be the Collision even if it is the um crypto hedge functions I mean crypto",
    "start": "606600",
    "end": "613240"
  },
  {
    "text": "random numbers and yes so that is always problem and if you're using the static",
    "start": "613240",
    "end": "620160"
  },
  {
    "text": "counters So like um when you're assigning the unique identifier for the first object you simply assign zero and",
    "start": "620160",
    "end": "626560"
  },
  {
    "text": "the next time you assign one 2 three yeah yeah you can absolutely do that but um if you want to do this then you need",
    "start": "626560",
    "end": "633079"
  },
  {
    "text": "to consider the thread safe because this is multi threading program so you never know that the counters are actually um",
    "start": "633079",
    "end": "640600"
  },
  {
    "text": "this is one of the counter value is used um for different object so",
    "start": "640600",
    "end": "647440"
  },
  {
    "text": "yeah so so so as I mentioned the key can be used as memory addresses so the",
    "start": "647480",
    "end": "654600"
  },
  {
    "text": "question is can you actually read the key but an answer is if the language",
    "start": "654600",
    "end": "660240"
  },
  {
    "text": "allows yes so if you're famili familiar with the python so you can simply create",
    "start": "660240",
    "end": "665440"
  },
  {
    "text": "the general object with this x equals object and if you get the um ID of this",
    "start": "665440",
    "end": "671399"
  },
  {
    "text": "object or get trying to get the hash of this object then it is simply returning",
    "start": "671399",
    "end": "677240"
  },
  {
    "text": "the like most of the address bit so it's not really surprising so I think this is",
    "start": "677240",
    "end": "682959"
  },
  {
    "text": "actually intended design for the python so it because if you're running the",
    "start": "682959",
    "end": "688040"
  },
  {
    "text": "script languages then yeah then you can do almost everything so it doesn't really matter whether you know the",
    "start": "688040",
    "end": "693399"
  },
  {
    "text": "address or not but um let me tackle this a little bit more about the um how this",
    "start": "693399",
    "end": "698959"
  },
  {
    "text": "can be a possible problems",
    "start": "698959",
    "end": "705040"
  },
  {
    "start": "703000",
    "end": "703000"
  },
  {
    "text": "so so yes usual running scripts from the shell means you have everything so you can do like in Python case you can",
    "start": "705040",
    "end": "711920"
  },
  {
    "text": "import the OS and then called like OS the system and then you can put whatever you want then you don't even need a a",
    "start": "711920",
    "end": "719320"
  },
  {
    "text": "share code so you can do whatever you want but did here's the question what if",
    "start": "719320",
    "end": "724480"
  },
  {
    "text": "it is actually running in the restricted environments so like sandbox environments are really popular and",
    "start": "724480",
    "end": "731200"
  },
  {
    "text": "right now many script languages have sandbox like exchanges especially for clouds so um if you um look around the",
    "start": "731200",
    "end": "739959"
  },
  {
    "text": "the the that Cloud app engines or whatever then sometimes they have the",
    "start": "739959",
    "end": "745040"
  },
  {
    "text": "python or Ruby shells and um many of them are actually implementing inhouse J",
    "start": "745040",
    "end": "751959"
  },
  {
    "text": "or um sandboxing so they get rid of most of the system functions and also they restrict the theice system accesses so I",
    "start": "751959",
    "end": "760199"
  },
  {
    "text": "would say it is not really supposed to suppose that you can get the address but",
    "start": "760199",
    "end": "766279"
  },
  {
    "text": "um right now many of their implementations are not really considering it um you can possibly or um",
    "start": "766279",
    "end": "774160"
  },
  {
    "text": "we actually checked the some of them and they are actually returning the address and because this sort of the hip",
    "start": "774160",
    "end": "780959"
  },
  {
    "text": "addresses are pretty kind of unique for platform and you can sometimes tell",
    "start": "780959",
    "end": "786399"
  },
  {
    "text": "which oping system it is running maybe this even this information itself is not really useful I mean there um getting to",
    "start": "786399",
    "end": "793519"
  },
  {
    "text": "know the platform but um yes it's that address information can be also used for",
    "start": "793519",
    "end": "799920"
  },
  {
    "text": "some sort of the um OS fingerprinting yeah so the other",
    "start": "799920",
    "end": "806440"
  },
  {
    "text": "question is that the um yeah maybe the language it doesn't really allow to directly read the key then how can you",
    "start": "806440",
    "end": "814120"
  },
  {
    "text": "read it the answer is partially we can see read it uh via um timing of",
    "start": "814120",
    "end": "821839"
  },
  {
    "text": "text so here's the whole table that we actually built and we actually went to the um different languages so in the",
    "start": "821839",
    "end": "829040"
  },
  {
    "start": "822000",
    "end": "822000"
  },
  {
    "text": "python cases and the python Ruby Julia and Julia is like um dedicated languages for especially for the cloud",
    "start": "829040",
    "end": "836000"
  },
  {
    "text": "environment and all these three cases we were able to read the key directly",
    "start": "836000",
    "end": "841839"
  },
  {
    "text": "because there is interfaces so we can get the address but PHP is really bit",
    "start": "841839",
    "end": "847320"
  },
  {
    "text": "different although you have interfaces to read the key but um the the key that",
    "start": "847320",
    "end": "854519"
  },
  {
    "text": "you actually read is not really the memory address so we're going to talk a little bit more about this because this",
    "start": "854519",
    "end": "861240"
  },
  {
    "text": "phps implementation is pretty unique and interesting and Java's case Java so",
    "start": "861240",
    "end": "867639"
  },
  {
    "text": "there is two different um vir machine strally one is Java virtual machine and the other one is DVM in Android and um",
    "start": "867639",
    "end": "874759"
  },
  {
    "text": "Java Java VM cases you can read the key but that is not actually the the memory",
    "start": "874759",
    "end": "879880"
  },
  {
    "text": "address it is um just random value but the interesting thing is that we actually went to the the the source code",
    "start": "879880",
    "end": "885959"
  },
  {
    "text": "implementation of the jbm and what we found is that um they have some different options in the compile options",
    "start": "885959",
    "end": "892759"
  },
  {
    "text": "and if you specify some specific compile options then you can choose to um use",
    "start": "892759",
    "end": "898560"
  },
  {
    "text": "the key um uh to use memory addresses as a key but I don't know whether why this is not",
    "start": "898560",
    "end": "904440"
  },
  {
    "text": "the default um the compile options right now on jbm but um um there is a um D Cod",
    "start": "904440",
    "end": "913240"
  },
  {
    "text": "bat that which is exactly doing this and dvm's cases so yeah can you read the key",
    "start": "913240",
    "end": "920040"
  },
  {
    "text": "yes and um it is also the address in DM's case and JavaScript case so if you",
    "start": "920040",
    "end": "927000"
  },
  {
    "text": "um think about the um um javascripts you cannot really read",
    "start": "927000",
    "end": "932519"
  },
  {
    "text": "the key of the hash so we need to we need some way to infert the key and for",
    "start": "932519",
    "end": "939160"
  },
  {
    "text": "this weit and va8 cases so weit is used for Safari and va8 is used for Chrome",
    "start": "939160",
    "end": "945319"
  },
  {
    "text": "and W's case we can infert a key and we can also and that infert key is also the",
    "start": "945319",
    "end": "950959"
  },
  {
    "text": "memory address and VA cases although you can infert the key um we were not um so",
    "start": "950959",
    "end": "957519"
  },
  {
    "text": "that key was not Dem memory address it was just still the random",
    "start": "957519",
    "end": "962839"
  },
  {
    "start": "963000",
    "end": "963000"
  },
  {
    "text": "value so here's how we read for different implementations so python cases you can just create the object and",
    "start": "963079",
    "end": "970319"
  },
  {
    "text": "you can call the I built-in ID functions or hash functions and Rubik cases is also pretty much the same you create the",
    "start": "970319",
    "end": "977480"
  },
  {
    "text": "object and get the ID of the object yes the ID is actually the address and Java",
    "start": "977480",
    "end": "983360"
  },
  {
    "text": "cases so you create the object and if you and and you if you call the hash",
    "start": "983360",
    "end": "988920"
  },
  {
    "text": "code function then you can get the address so so you may say that the Java",
    "start": "988920",
    "end": "995839"
  },
  {
    "text": "uh especially for the D VM because you can run the native code so getting the memory address information from the by",
    "start": "995839",
    "end": "1003199"
  },
  {
    "text": "running the Java may not be that interesting or something but um in the",
    "start": "1003199",
    "end": "1008839"
  },
  {
    "text": "future it is possible that DM Java also employs um DVM also employes the native client model which is that DM process is",
    "start": "1008839",
    "end": "1016079"
  },
  {
    "text": "running the different process from the actual dbm so it is possible because in these cases",
    "start": "1016079",
    "end": "1021639"
  },
  {
    "text": "they um rely on the different add spaces so um it is possible that this address",
    "start": "1021639",
    "end": "1027558"
  },
  {
    "text": "information from the DVM side can be useful and need the Julian cases so you can create the type object and then get",
    "start": "1027559",
    "end": "1034600"
  },
  {
    "text": "the idea of the object and then and it as the",
    "start": "1034600",
    "end": "1039438"
  },
  {
    "text": "address so um for the wus cases it gets little bit complicated so what we did is",
    "start": "1039640",
    "end": "1046558"
  },
  {
    "text": "that Yeah we actually took the advantage of the name object so this name object",
    "start": "1046559",
    "end": "1052120"
  },
  {
    "text": "is adding a unique private properties to any object and this was the new experimental features for es6 soal",
    "start": "1052120",
    "end": "1060559"
  },
  {
    "text": "Harmony and so because the specification says this object has to be unique um so",
    "start": "1060559",
    "end": "1068640"
  },
  {
    "text": "they were using the memory addresses this is a simple impementation",
    "start": "1068640",
    "end": "1075159"
  },
  {
    "text": "I mean this is cath that how that name object is actually implemented and if",
    "start": "1075159",
    "end": "1080440"
  },
  {
    "text": "you look at this part it is simply doing the um casting static casting and reinterpret casting on the this object",
    "start": "1080440",
    "end": "1088360"
  },
  {
    "text": "um on the this this pointer and this pointer is actually that name object and",
    "start": "1088360",
    "end": "1094200"
  },
  {
    "text": "then you can get the hash so how do we actually infert the",
    "start": "1094200",
    "end": "1100960"
  },
  {
    "start": "1098000",
    "end": "1098000"
  },
  {
    "text": "key because we cannot directly read the key so how do we infert so there is some requirements to actually infert the key",
    "start": "1100960",
    "end": "1107520"
  },
  {
    "text": "and the first one is that the Collision resolution should follow a certain order the second one is that the hash",
    "start": "1107520",
    "end": "1113760"
  },
  {
    "text": "algorithm must be deterministic and third one is that hash tables must be",
    "start": "1113760",
    "end": "1120919"
  },
  {
    "text": "controllable and this is all possible in wus cases so because um Collision reg um",
    "start": "1120919",
    "end": "1126840"
  },
  {
    "text": "because it is using double hashing and double hashing is actually the deterministic and also there so this",
    "start": "1126840",
    "end": "1133440"
  },
  {
    "text": "hash algorithm is deterministic and also how to control the table",
    "start": "1133440",
    "end": "1139720"
  },
  {
    "text": "because um instead of using the name object we can also put the number or some other object like string then you",
    "start": "1139720",
    "end": "1146320"
  },
  {
    "text": "we can always get the um hash um the key the the mapping between the key and the",
    "start": "1146320",
    "end": "1152440"
  },
  {
    "text": "hash so the problem becomes something like this so you have one single hash",
    "start": "1152440",
    "end": "1157520"
  },
  {
    "text": "table object and you're going to pull out um you're going to dump a lot of the object like dumble object or string",
    "start": "1157520",
    "end": "1163159"
  },
  {
    "text": "object or name object but here the catch here is that the um um for this number",
    "start": "1163159",
    "end": "1170000"
  },
  {
    "text": "object or string object you know the keys and hashes but for this name object um you",
    "start": "1170000",
    "end": "1177320"
  },
  {
    "text": "don't know the keys and you don't know the hash either and you cannot really read the key as",
    "start": "1177320",
    "end": "1183240"
  },
  {
    "text": "well so the the whole question becomes the DM how do we actually read the key and hashes for this name",
    "start": "1183240",
    "end": "1192440"
  },
  {
    "start": "1193000",
    "end": "1193000"
  },
  {
    "text": "object so we need to understand the to actually in for this we need to understand how they function is working",
    "start": "1193600",
    "end": "1200000"
  },
  {
    "text": "I I mean this how this Collision resolution is working so because double hatching is kind of a little bit",
    "start": "1200000",
    "end": "1205919"
  },
  {
    "text": "complicated let me take the example from the linear proving linear proving as I tell I told you is that when you're are",
    "start": "1205919",
    "end": "1212080"
  },
  {
    "text": "finding the next bucket you simply do the um plus one you simply try right",
    "start": "1212080",
    "end": "1217200"
  },
  {
    "text": "next bucket so in linear proving if that is a collision it is simply try the next",
    "start": "1217200",
    "end": "1223360"
  },
  {
    "text": "block next slot so given the key K and I if it is I trer then what it is doing is",
    "start": "1223360",
    "end": "1229760"
  },
  {
    "text": "that hashd k um this is hashd Hash onto the key K and then plus I so it's just",
    "start": "1229760",
    "end": "1236200"
  },
  {
    "text": "plus one and then you mount on the table",
    "start": "1236200",
    "end": "1241120"
  },
  {
    "text": "size so let's say you want to insert so let's say there is um the H table with the",
    "start": "1241520",
    "end": "1249720"
  },
  {
    "text": "size eight and then you want to insert this number object by the way if for",
    "start": "1249720",
    "end": "1255799"
  },
  {
    "text": "let's let me simply assume that the um the the key and the hash for the number object are still the same like if you",
    "start": "1255799",
    "end": "1261880"
  },
  {
    "text": "put the one then the hash will be still one so if you do this then the um if you",
    "start": "1261880",
    "end": "1269559"
  },
  {
    "text": "take the mode eight then the bucket index will be one so this bucket index",
    "start": "1269559",
    "end": "1275240"
  },
  {
    "text": "number one will be filled up and if you try next if you try to insert this",
    "start": "1275240",
    "end": "1280480"
  },
  {
    "text": "number nine then it will compute the same and it will be still the number one",
    "start": "1280480",
    "end": "1286640"
  },
  {
    "text": "right so what this do is that it's going to try number the bucket number one first and then because it is filled up",
    "start": "1286640",
    "end": "1294039"
  },
  {
    "text": "already so it will uh fit up bucket number",
    "start": "1294039",
    "end": "1300158"
  },
  {
    "text": "two and then if you again try to insert number 17 object and then if you take the mod",
    "start": "1300520",
    "end": "1308320"
  },
  {
    "text": "eight then the dis still the number is one so it will be it will fit up um",
    "start": "1308320",
    "end": "1314000"
  },
  {
    "text": "bucket number three so the how we actually going to",
    "start": "1314000",
    "end": "1319840"
  },
  {
    "text": "attack this St we actually finding the searching the timing differences so let me assume that the table is filled up",
    "start": "1319840",
    "end": "1326600"
  },
  {
    "text": "already except the bucket number zero so what we can do is doing some",
    "start": "1326600",
    "end": "1332400"
  },
  {
    "text": "binary testing so because the time differ search or because the search search",
    "start": "1332400",
    "end": "1339159"
  },
  {
    "text": "order is deterministic so that is always worst case and best cases and worst cases means that you're going to spend",
    "start": "1339159",
    "end": "1345240"
  },
  {
    "text": "more time to search the to search the empty bucket and if it is best cases it will simply return the result so there",
    "start": "1345240",
    "end": "1351360"
  },
  {
    "text": "will be less computation time so let me show you this number one this cases so",
    "start": "1351360",
    "end": "1356919"
  },
  {
    "text": "let's say bucket number zero is not filled up and if you try to insert",
    "start": "1356919",
    "end": "1363159"
  },
  {
    "text": "number one object then the bucket index will be one and then number one first so",
    "start": "1363159",
    "end": "1368240"
  },
  {
    "text": "you will try here and then you will try two here again and then you will try",
    "start": "1368240",
    "end": "1373360"
  },
  {
    "text": "three again and then again and then finally you will find the zero is empty then you will fill up bucket zero so",
    "start": "1373360",
    "end": "1379919"
  },
  {
    "text": "it's going to take a lot of time but if you try to insert the number zero here",
    "start": "1379919",
    "end": "1386000"
  },
  {
    "text": "then the bucket index is simply zero at the first time so you can simply fill up",
    "start": "1386000",
    "end": "1391360"
  },
  {
    "text": "the the bucket index zero so it's going to be pretty",
    "start": "1391360",
    "end": "1396240"
  },
  {
    "text": "fast yeah so if you catch this timing differences you can run something about",
    "start": "1400360",
    "end": "1406360"
  },
  {
    "text": "the hash or the key and if you this is so because this is some sort of the binary testing every time you succeed to",
    "start": "1406360",
    "end": "1413760"
  },
  {
    "text": "catch these timing differences you can run a one bit information at a time and",
    "start": "1413760",
    "end": "1420240"
  },
  {
    "text": "the question is that um is this really doable in JavaScript so JavaScript is running on top of um browsers and then",
    "start": "1420240",
    "end": "1428400"
  },
  {
    "text": "there is um JavaScript engines and then it is also possible that there is of jit engine so there is I mean so this",
    "start": "1428400",
    "end": "1435440"
  },
  {
    "text": "language is too high level and and under the JavaScript there a lot of things are",
    "start": "1435440",
    "end": "1441039"
  },
  {
    "text": "going on that we don't really understand so we never know and especially for the JavaScript and even the timer is",
    "start": "1441039",
    "end": "1447960"
  },
  {
    "text": "milliseconds this is not really microsc or nanc so it is really the granularity",
    "start": "1447960",
    "end": "1453559"
  },
  {
    "text": "is not really good but we can simply overcome this uh challenge by repeating",
    "start": "1453559",
    "end": "1458720"
  },
  {
    "text": "the this steps like thousand times then we can get some the reasonable granularity for timers and it is so the",
    "start": "1458720",
    "end": "1467159"
  },
  {
    "text": "table size can be really big so we don't really find the the proper buckets but",
    "start": "1467159",
    "end": "1472799"
  },
  {
    "text": "um if we try again and again and again then we can finally succeed it so it is all about the calibration to",
    "start": "1472799",
    "end": "1480640"
  },
  {
    "text": "to to get the right timer so to to further a better attack",
    "start": "1480640",
    "end": "1488039"
  },
  {
    "text": "this so we try to find the wi key so Wiki key is a key that the second hash",
    "start": "1488039",
    "end": "1493440"
  },
  {
    "text": "function in the double hash returns a small integer numbers so because this",
    "start": "1493440",
    "end": "1498760"
  },
  {
    "text": "linear proving cases is going to be pretty simple but for this um double cases um because this um mapping between",
    "start": "1498760",
    "end": "1506720"
  },
  {
    "text": "the key and hash are a little bit complicated so we want to avoid the fuzziness of this double hashing so",
    "start": "1506720",
    "end": "1512600"
  },
  {
    "text": "that's why uh we try to find the wi key which actually Returns the small integer numbers and we haven't really Pro proved",
    "start": "1512600",
    "end": "1519399"
  },
  {
    "text": "this mathematically but um this key can be found with the high probabilities if you try like thousand times you can",
    "start": "1519399",
    "end": "1525919"
  },
  {
    "text": "always find it so what we did is that repeat this simply creating name object again and",
    "start": "1525919",
    "end": "1533120"
  },
  {
    "text": "again and again until we actually find the wiki",
    "start": "1533120",
    "end": "1537520"
  },
  {
    "text": "key so we implemented this um as a prototype and because wet has the um",
    "start": "1538480",
    "end": "1545320"
  },
  {
    "text": "different hashy function implementations like string hash or something and so we ported that the C++ implementation to",
    "start": "1545320",
    "end": "1552279"
  },
  {
    "text": "the JavaScript because our tag is written in JavaScript and we also preil the inversion table so us",
    "start": "1552279",
    "end": "1558840"
  },
  {
    "text": "if you use the simple hash functions so um you do the M hash from b",
    "start": "1558840",
    "end": "1564720"
  },
  {
    "text": "um oh I think I flip this along yeah so this this is the hash",
    "start": "1564720",
    "end": "1572120"
  },
  {
    "text": "function inverse to the bucket and then it will return to the string and number so usually hash function is taking the",
    "start": "1572120",
    "end": "1577880"
  },
  {
    "text": "string or number then it will return the bucket so we U built up the um the the pr a pre-build inversion table so that",
    "start": "1577880",
    "end": "1584440"
  },
  {
    "text": "we can further um the optimize our computation in the JavaScript so we are currently looking",
    "start": "1584440",
    "end": "1591159"
  },
  {
    "text": "the 12 bit and it is also POS theoretically it is possible up to L 23",
    "start": "1591159",
    "end": "1597200"
  },
  {
    "text": "bits so because we don't really have the nice mathematical properties to find the wiki key so um so if this table size is",
    "start": "1597200",
    "end": "1604880"
  },
  {
    "text": "too big then we cannot really find a wi key and sometimes we cannot really verify that this is actually Wiki key or",
    "start": "1604880",
    "end": "1612720"
  },
  {
    "text": "not yeah so what so to actually show how this attack is working uh we inserted",
    "start": "1613640",
    "end": "1619399"
  },
  {
    "text": "one additional line so you can see the this WTF L always and then printing out the address",
    "start": "1619399",
    "end": "1627440"
  },
  {
    "text": "so you can see this hash is actually the address so yeah let me show you the",
    "start": "1627440",
    "end": "1635360"
  },
  {
    "start": "1632000",
    "end": "1632000"
  },
  {
    "text": "demo so let me first Lear the",
    "start": "1636279",
    "end": "1640520"
  },
  {
    "text": "Safar oh yeah so let me visit the that leing",
    "start": "1646200",
    "end": "1653039"
  },
  {
    "text": "page so the the top graph shows that DM",
    "start": "1655320",
    "end": "1661360"
  },
  {
    "text": "calibration so x axis on this graph is the chain length I mean the number of",
    "start": "1662880",
    "end": "1668600"
  },
  {
    "text": "the collisions and the Y AIS shows the time so what this actually shows is that",
    "start": "1668600",
    "end": "1674360"
  },
  {
    "text": "we can actually catch the timing differences if there is um small number of the collisions then the the the searching",
    "start": "1674360",
    "end": "1682159"
  },
  {
    "text": "time is pretty small I mean it is pretty fast and if there is a whole lot of the collisions in the hash table searching",
    "start": "1682159",
    "end": "1689320"
  },
  {
    "text": "then the searching time is pretty long so if we succeed this",
    "start": "1689320",
    "end": "1696399"
  },
  {
    "text": "calibration we finally try to infert the key oh I think I need to click yes okay",
    "start": "1696399",
    "end": "1703799"
  },
  {
    "text": "okay so this shows the how this sued so in this cases um please forget about",
    "start": "1703799",
    "end": "1710480"
  },
  {
    "text": "this region but um this x axis is actually bucket index so starting from zero or starting from zero to bucket",
    "start": "1710480",
    "end": "1718360"
  },
  {
    "text": "index to to the 12 in this case it is 12 bit so what this means that the um we",
    "start": "1718360",
    "end": "1723799"
  },
  {
    "text": "first um filled up whole tables like 2 to 12 it is not actually whole table we",
    "start": "1723799",
    "end": "1729679"
  },
  {
    "text": "only filled up the half because the um the H table implementation if you fill up the the more than half of the table",
    "start": "1729679",
    "end": "1736320"
  },
  {
    "text": "then it will automatically increase the the undering table size so we only U filled up the heal but anyway what you",
    "start": "1736320",
    "end": "1743600"
  },
  {
    "text": "say you can simply think that the um the the table is fill fully filled up and then what we did is that we um removed",
    "start": "1743600",
    "end": "1751600"
  },
  {
    "text": "one of the slot only a single slot like what it says is that if I um remove the",
    "start": "1751600",
    "end": "1757840"
  },
  {
    "text": "bucket number zero then it will the the searching time will be something like this and if I remove the bucket number",
    "start": "1757840",
    "end": "1764080"
  },
  {
    "text": "one then the searching number will something like this and if I remove if if I remove this bucket then the",
    "start": "1764080",
    "end": "1770519"
  },
  {
    "text": "searching time is will be something like this so what this essentially means that the um using this wi key if you try to",
    "start": "1770519",
    "end": "1777159"
  },
  {
    "text": "search it and if it is taking the minimum time then it is possible and",
    "start": "1777159",
    "end": "1782240"
  },
  {
    "text": "there is high chances that the um this bucket index is exactly the first um",
    "start": "1782240",
    "end": "1788559"
  },
  {
    "text": "return return value of the hash function from that bucket searching algorithms so let me run this algorithm again so that",
    "start": "1788559",
    "end": "1796080"
  },
  {
    "text": "um how this actually putting out so because this the computation takes time and also sometimes it can fail so",
    "start": "1796080",
    "end": "1803600"
  },
  {
    "text": "you can you will say that um Al this sued at the first time so you can see the value 450 so this is LSB of the a",
    "start": "1803600",
    "end": "1811880"
  },
  {
    "text": "space and if I go back here is for 45 so it is like 100% um this is like because",
    "start": "1811880",
    "end": "1819519"
  },
  {
    "text": "the the the number of the bits are pretty small so it is like 100% attack it's pretty",
    "start": "1819519",
    "end": "1825519"
  },
  {
    "text": "reliable and let me show you how this also fails because I spent a lot of time",
    "start": "1825519",
    "end": "1830880"
  },
  {
    "text": "to make this",
    "start": "1830880",
    "end": "1833600"
  },
  {
    "text": "work yeah so it is trying and sometimes it is failing that oh this case is always succeed okay let me just show you",
    "start": "1837519",
    "end": "1845880"
  },
  {
    "text": "yes so the attack work is working something like this and um",
    "start": "1845880",
    "end": "1855320"
  },
  {
    "text": "and we reported this vity to Wi it and it is patched and there is also L work so if",
    "start": "1858799",
    "end": "1865519"
  },
  {
    "text": "you um follow up there HH table attacks and this is most of the attacks were",
    "start": "1865519",
    "end": "1871039"
  },
  {
    "text": "about the DS attacks like the hash function algorithms are deterministic so you know the how the the the how the HH",
    "start": "1871039",
    "end": "1878639"
  },
  {
    "text": "table was filled up and you can always trigger the worst cases so if you can always trigger the worst cases it is it",
    "start": "1878639",
    "end": "1886200"
  },
  {
    "text": "can be it it is directly turn into turned into the DS text and also in the",
    "start": "1886200",
    "end": "1892720"
  },
  {
    "text": "Firefox side and there is similar text on H tables as",
    "start": "1892720",
    "end": "1899039"
  },
  {
    "start": "1899000",
    "end": "1899000"
  },
  {
    "text": "well so so how we actually stop this tack so the first problem of first cause",
    "start": "1899360",
    "end": "1907840"
  },
  {
    "text": "of this attack is that the um the hash function is always deterministic for controllable object and controllable",
    "start": "1907840",
    "end": "1914600"
  },
  {
    "text": "object means a string object or number object yeah so you can think that",
    "start": "1914600",
    "end": "1921639"
  },
  {
    "text": "um yeah why not we always need deterministic hashing for this because it must be fast so like if you um if you",
    "start": "1921639",
    "end": "1928880"
  },
  {
    "text": "have used some simple hash functions like integer hash and that is always deterministic if you give the same key",
    "start": "1928880",
    "end": "1935000"
  },
  {
    "text": "the return value must be always the same but um sometime this is not really good",
    "start": "1935000",
    "end": "1941039"
  },
  {
    "text": "or secure so uh people crypto people have thought about them how to actually",
    "start": "1941039",
    "end": "1946519"
  },
  {
    "text": "implement the universal hashing so univers hashing means that the um every time you to um you load up the",
    "start": "1946519",
    "end": "1953039"
  },
  {
    "text": "application or you start up the application then the there is some seing value then that seing value um makes the",
    "start": "1953039",
    "end": "1960360"
  },
  {
    "text": "hashy hash mapping whole different from the uh from the previous",
    "start": "1960360",
    "end": "1966600"
  },
  {
    "text": "one so the other colum measure can be that um you can simply not using the",
    "start": "1967120",
    "end": "1974320"
  },
  {
    "text": "addresses so the first one is that uh you can simply use use random values so instead of using the memory addresses",
    "start": "1974320",
    "end": "1980840"
  },
  {
    "text": "absolutely you can use the random addresses but it is not really this is pretty low chances but still it is",
    "start": "1980840",
    "end": "1987639"
  },
  {
    "text": "possible that there can be the Collision because the add um the space of the key is not really big like the cryptos like",
    "start": "1987639",
    "end": "1994639"
  },
  {
    "text": "crypto is talking about like 2 to the uh 128 or 2 to 256 but here we're talking",
    "start": "1994639",
    "end": "2001200"
  },
  {
    "text": "about 2 to 32 to 2016 so xual masking can be also the",
    "start": "2001200",
    "end": "2007320"
  },
  {
    "text": "solution so this is actually the design choice of PHP and um but the problem is that um",
    "start": "2007320",
    "end": "2014200"
  },
  {
    "text": "there can be the two time pass let me show you the example code of the",
    "start": "2014200",
    "end": "2020679"
  },
  {
    "text": "PHP so this is how PHP is Computing the",
    "start": "2020679",
    "end": "2025880"
  },
  {
    "text": "hash for certain object so this routine shows that how you um initializing the random masking",
    "start": "2025880",
    "end": "2033919"
  },
  {
    "text": "so it is simply getting the some random value from the um from some random",
    "start": "2033919",
    "end": "2040440"
  },
  {
    "text": "generator and then once you get this masking value then at the next time you",
    "start": "2040440",
    "end": "2046080"
  },
  {
    "text": "simply do the um simple XR onto the same key and if you know",
    "start": "2046080",
    "end": "2053200"
  },
  {
    "text": "about this onetime PAAD and one time pad um only guaranteed the security that the",
    "start": "2053200",
    "end": "2059800"
  },
  {
    "text": "um the key is sorry never reused so that is the whole um Assumption of the",
    "start": "2059800",
    "end": "2065480"
  },
  {
    "text": "onetime path and if you break that um break that assumption then you never",
    "start": "2065480",
    "end": "2071760"
  },
  {
    "text": "know the security of this hash functions or using the one time pad or two time",
    "start": "2071760",
    "end": "2076878"
  },
  {
    "text": "PAAD and so two time PAAD means that if you use the same key for this xra masking or xual operations then you",
    "start": "2076879",
    "end": "2084158"
  },
  {
    "text": "cannot really um guarantee the security of this guy so what this guy is essentially doing is that the um um",
    "start": "2084159",
    "end": "2092679"
  },
  {
    "text": "reusing this masking value all over all over again and again so um the simple",
    "start": "2092679",
    "end": "2098640"
  },
  {
    "text": "attack on this can be that um you just get the two different values then masking it and then and then xort",
    "start": "2098640",
    "end": "2105960"
  },
  {
    "text": "together then you can get rid of the Mask value masking value because it is",
    "start": "2105960",
    "end": "2112000"
  },
  {
    "text": "XR and if you XR the same value then the random Factor will be",
    "start": "2112000",
    "end": "2119119"
  },
  {
    "text": "gone so um let me switch the gear to the Android part",
    "start": "2120440",
    "end": "2127560"
  },
  {
    "start": "2127000",
    "end": "2127000"
  },
  {
    "text": "so Android ASL is about the um um so people may wonder why ASL on Android",
    "start": "2128119",
    "end": "2136720"
  },
  {
    "text": "because Android applications are written in Java so is there any system attacks",
    "start": "2136720",
    "end": "2142560"
  },
  {
    "text": "but right now the trend is that um a lot of apps are written with the native code",
    "start": "2142560",
    "end": "2148200"
  },
  {
    "text": "and it and Android team also want to prevent the exploitation from that native code",
    "start": "2148200",
    "end": "2155119"
  },
  {
    "text": "and it is adopted in commentary as I mentioned before ASL increased the",
    "start": "2155119",
    "end": "2161000"
  },
  {
    "text": "overhead performance overheads so in the especially for the early Android devices",
    "start": "2161000",
    "end": "2167200"
  },
  {
    "text": "which has small uh memory and limited computing power CPU so that was",
    "start": "2167200",
    "end": "2172760"
  },
  {
    "text": "performance concern so um and then if you and then to implement",
    "start": "2172760",
    "end": "2178640"
  },
  {
    "text": "as you need to enable the p position independent executable but if you turn on this P that is load latencies and",
    "start": "2178640",
    "end": "2186160"
  },
  {
    "text": "also there can be the memory open has and finally Android 4.1 um set to",
    "start": "2186160",
    "end": "2191760"
  },
  {
    "text": "implement the um full ASL enforcements so let me see the um how",
    "start": "2191760",
    "end": "2198359"
  },
  {
    "text": "this ASL enforcements is actually implemented in the Android uh with the um and it is related to the performance",
    "start": "2198359",
    "end": "2205560"
  },
  {
    "text": "prior prioritize the design so Android is essentially the",
    "start": "2205560",
    "end": "2212359"
  },
  {
    "start": "2208000",
    "end": "2208000"
  },
  {
    "text": "multi-ray architectur so Android applications Lo on top of the WM dbm and",
    "start": "2212359",
    "end": "2218119"
  },
  {
    "text": "then when it is running the application it also lows up a lot different runtime libraries and because um if you simply",
    "start": "2218119",
    "end": "2225920"
  },
  {
    "text": "do this sort of the steps like on top of you every time you execute the application you initialize the dbm and",
    "start": "2225920",
    "end": "2233800"
  },
  {
    "text": "then you initialize the Android runtime library and then R application it's going to take a lot of time so you",
    "start": "2233800",
    "end": "2240760"
  },
  {
    "text": "really want to avoid doing this so what Android team comes up with",
    "start": "2240760",
    "end": "2246720"
  },
  {
    "start": "2244000",
    "end": "2244000"
  },
  {
    "text": "that is called gigot and gigot is the pro process creation model so here's the",
    "start": "2246720",
    "end": "2253280"
  },
  {
    "text": "gigot process with the template process or hosting apps so in this gigo process",
    "start": "2253280",
    "end": "2258680"
  },
  {
    "text": "you have the already initialized D BM and also you have already initialized",
    "start": "2258680",
    "end": "2264200"
  },
  {
    "text": "Android longtime library and then every time you want to create the application you simply do the",
    "start": "2264200",
    "end": "2272480"
  },
  {
    "text": "folk then you will have two different instances though it is identical",
    "start": "2272480",
    "end": "2279440"
  },
  {
    "text": "then you execute the application on top of it and then if you want to create another application then forit again and",
    "start": "2280240",
    "end": "2287680"
  },
  {
    "text": "then execute the application again so this is going to be really fast so first for is Fast And even if it is identical",
    "start": "2287680",
    "end": "2296160"
  },
  {
    "text": "that is copy on right so every time you change some different step changes",
    "start": "2296160",
    "end": "2301720"
  },
  {
    "text": "something in D VM changes something even in identical part so that will be automatically deduced",
    "start": "2301720",
    "end": "2309440"
  },
  {
    "text": "but the problem is that because this are doing simply folk they share the memory",
    "start": "2313560",
    "end": "2318760"
  },
  {
    "text": "addresses so if you think that the um if you really do the um reinitialization again and again then the because of the",
    "start": "2318760",
    "end": "2325800"
  },
  {
    "text": "aslr and P the memory addresses for these modules will be always different",
    "start": "2325800",
    "end": "2331760"
  },
  {
    "text": "but because this guy is simply do simply doing Fork so the memory addresses are always the same for these",
    "start": "2331760",
    "end": "2340400"
  },
  {
    "start": "2340000",
    "end": "2340000"
  },
  {
    "text": "modules so let me talk a little bit more about the how this is working in",
    "start": "2340400",
    "end": "2345520"
  },
  {
    "text": "internal so that is gigot so gigot is something like demon in um in Android",
    "start": "2345520",
    "end": "2351640"
  },
  {
    "text": "and am is activity manager so first am request to jod um",
    "start": "2351640",
    "end": "2359520"
  },
  {
    "text": "the if the if the user like if the user click the icon on the Android then that",
    "start": "2359520",
    "end": "2365359"
  },
  {
    "text": "so that to to create the app application then am is sending the request to the g",
    "start": "2365359",
    "end": "2371240"
  },
  {
    "text": "code uh saying that the user wants to create a new",
    "start": "2371240",
    "end": "2376599"
  },
  {
    "text": "application and then gigo is forked and then so let's say this is the",
    "start": "2376640",
    "end": "2383920"
  },
  {
    "text": "browser and then you load load up the browser by specializing it so specializing means that you you load the",
    "start": "2383920",
    "end": "2390400"
  },
  {
    "text": "specific application but because this is foring",
    "start": "2390400",
    "end": "2395520"
  },
  {
    "text": "so every single um modul out are just the same and this were all the Shar",
    "start": "2395520",
    "end": "2404280"
  },
  {
    "text": "liaries so all application have the same memory layouts if we are relying on the G",
    "start": "2404359",
    "end": "2411520"
  },
  {
    "text": "code and we say this weakens the Android aslr",
    "start": "2412079",
    "end": "2418359"
  },
  {
    "start": "2418000",
    "end": "2418000"
  },
  {
    "text": "security so before we talk about the how this can be attacked uh we got to think",
    "start": "2418720",
    "end": "2424160"
  },
  {
    "text": "about the um what's really the harder or challenges to to build up the fully",
    "start": "2424160",
    "end": "2429280"
  },
  {
    "text": "working exploit so if you want to make up the fully working exploit so in the",
    "start": "2429280",
    "end": "2434319"
  },
  {
    "text": "current settings where in current hard models you need to exploit the information first and next step is that",
    "start": "2434319",
    "end": "2441640"
  },
  {
    "text": "you I'm given the ASR information from the information and you further exploit a",
    "start": "2441640",
    "end": "2447160"
  },
  {
    "text": "control flow H So like um um use fre or heo full something like that and these",
    "start": "2447160",
    "end": "2454760"
  },
  {
    "text": "two different attacks should be achieved in the same application if it is",
    "start": "2454760",
    "end": "2461359"
  },
  {
    "text": "ideal but because um add information is shared across different applications so",
    "start": "2462040",
    "end": "2468319"
  },
  {
    "text": "we can do follows the first attack as remote coordinated attacks so what we're",
    "start": "2468319",
    "end": "2474440"
  },
  {
    "text": "going to do is that um we're going to merge up two different bilities so we're going to attack the the information in",
    "start": "2474440",
    "end": "2481079"
  },
  {
    "text": "the Chrome and then we um attack the the F control flow hij vity in the VLC that",
    "start": "2481079",
    "end": "2487560"
  },
  {
    "text": "is Media Player and then if we do merge up then the um the ASR information from",
    "start": "2487560",
    "end": "2494359"
  },
  {
    "text": "the Chrome side is still valid for VC site in VC site so yes we can reduce def",
    "start": "2494359",
    "end": "2502760"
  },
  {
    "text": "nativ searching spaces in this case and we can also do the local toyen attacks",
    "start": "2502760",
    "end": "2508240"
  },
  {
    "text": "so if the user simply installs some simple application then this simpl application can always um void out the",
    "start": "2508240",
    "end": "2516079"
  },
  {
    "text": "as set because it can simply run the native code and that native code can um",
    "start": "2516079",
    "end": "2522000"
  },
  {
    "text": "discover whole memory layouts and then send it over so here's the the the how the",
    "start": "2522000",
    "end": "2529160"
  },
  {
    "start": "2526000",
    "end": "2526000"
  },
  {
    "text": "remote coordinator tack is actually working so in this diagram um we assume",
    "start": "2529160",
    "end": "2534440"
  },
  {
    "text": "that um the victim is running the Chrome and the attacker is running the web server and further assum that um the the",
    "start": "2534440",
    "end": "2543480"
  },
  {
    "text": "victim visited attackers web server then attackers server is going to serve the malicious JavaScript file and this",
    "start": "2543480",
    "end": "2550680"
  },
  {
    "text": "malicious Javascript file going to exploit the information",
    "start": "2550680",
    "end": "2555838"
  },
  {
    "text": "re and after that and using the same Javascript file um we're going to send",
    "start": "2556480",
    "end": "2562720"
  },
  {
    "text": "the memory layout information send back the memory layout information to the attacker web",
    "start": "2562720",
    "end": "2568480"
  },
  {
    "text": "server and then using the in URI intent from the JavaScript this is simply open",
    "start": "2568480",
    "end": "2574280"
  },
  {
    "text": "um open function in JavaScript and if you specify um Target URI with the um",
    "start": "2574280",
    "end": "2580119"
  },
  {
    "text": "specific application applications um intent registered intent then you can",
    "start": "2580119",
    "end": "2588200"
  },
  {
    "text": "automatically um launch the VSC player with the um specific file um specific",
    "start": "2588200",
    "end": "2595880"
  },
  {
    "text": "URL so what this V play is going to do is that um once it gets the UR intent it",
    "start": "2595880",
    "end": "2601520"
  },
  {
    "text": "will automatically try contact the AER server and then start to download the",
    "start": "2601520",
    "end": "2606559"
  },
  {
    "text": "video file and inside of the video file because we already know the ASR information we um build up the the ROP",
    "start": "2606559",
    "end": "2615559"
  },
  {
    "text": "Gadget um with this already known ASR",
    "start": "2615559",
    "end": "2621280"
  },
  {
    "text": "information so local tent attack is that",
    "start": "2622480",
    "end": "2627800"
  },
  {
    "start": "2623000",
    "end": "2623000"
  },
  {
    "text": "um we are assuming that DMD user is instro theit permission the TR apps so",
    "start": "2627800",
    "end": "2633440"
  },
  {
    "text": "this is going to ask almost no permissions and then this is going to scan the whole memory spaces using the",
    "start": "2633440",
    "end": "2640400"
  },
  {
    "text": "native code and then layout information can be further exported like using some",
    "start": "2640400",
    "end": "2645920"
  },
  {
    "text": "URI u u intent and you can also then you can send it back send to some other",
    "start": "2645920",
    "end": "2651880"
  },
  {
    "text": "application or simply uh if you have Network permission then you can send it back to some other remote",
    "start": "2651880",
    "end": "2658440"
  },
  {
    "text": "servers and once this Trent app is installed then ASL can be simply",
    "start": "2658440",
    "end": "2663480"
  },
  {
    "text": "bypassed because you can you already got the whole information and that whole information is going to",
    "start": "2663480",
    "end": "2669960"
  },
  {
    "text": "be valid for um as long as the device is reboot",
    "start": "2669960",
    "end": "2677240"
  },
  {
    "text": "it so um we actually load up the paper about how we can actually stop this and",
    "start": "2677359",
    "end": "2684040"
  },
  {
    "text": "which is published in the ITP security and privacy and please take a look if you have a",
    "start": "2684040",
    "end": "2690800"
  },
  {
    "start": "2691000",
    "end": "2691000"
  },
  {
    "text": "chance and these are the references and thank you very much for your attention and I'm happy to take any",
    "start": "2691200",
    "end": "2698000"
  },
  {
    "text": "questions [Applause]",
    "start": "2698000",
    "end": "2707239"
  }
]