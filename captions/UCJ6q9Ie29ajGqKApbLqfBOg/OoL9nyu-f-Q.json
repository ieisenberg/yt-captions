[
  {
    "text": "hello everyone welcome to Islander e a√≠ and welcome to the most secure browser",
    "start": "0",
    "end": "5100"
  },
  {
    "text": "pronin Pony Chrome in 2016 to 2019 with gunman leo",
    "start": "5100",
    "end": "10920"
  },
  {
    "text": "before we begin I've got a few notes if you'll stop by the business hall located in Mandalay Bay Oceanside and shoreline",
    "start": "10920",
    "end": "17340"
  },
  {
    "text": "level 2 that's where the Welcome Reception will be at 5:30 and it's also where the blackhat arsenal is being",
    "start": "17340",
    "end": "22980"
  },
  {
    "text": "hosted the Pony Awards tonight are in Lagoon JKL at 18:30 lunch is in Bayside",
    "start": "22980",
    "end": "30840"
  },
  {
    "text": "a B and from 1205 to 1:30 if you'd do me a favor and do what they said a second",
    "start": "30840",
    "end": "37590"
  },
  {
    "text": "ago and silence your phones for me that would be great and other than that let's get a great round of applause and get this talk started this is coming from",
    "start": "37590",
    "end": "56640"
  },
  {
    "text": "Hansen a keen lab to give you the talk the most secure browser honing Chrome from 2016 to 2019 you have probably",
    "start": "56640",
    "end": "66030"
  },
  {
    "text": "noticed that there should be two speakers here but only one this is because my partner Jen cannot come",
    "start": "66030",
    "end": "72689"
  },
  {
    "text": "because of the visa so but don't worry I will have him share his part and we are",
    "start": "72689",
    "end": "78450"
  },
  {
    "text": "both security researchers at Hanson a chem lab and we have participated in Porto on for several times and have won",
    "start": "78450",
    "end": "85290"
  },
  {
    "text": "three months of course and I'll pretend dentition is in four parts let's go to",
    "start": "85290",
    "end": "91560"
  },
  {
    "text": "the first part the eg set now let's step",
    "start": "91560",
    "end": "97560"
  },
  {
    "text": "method in the terminal set is short for semantic equivalent transform Jung came",
    "start": "97560",
    "end": "103680"
  },
  {
    "text": "up with the idea in the late 2016 and added into his father it's easy to use",
    "start": "103680",
    "end": "109979"
  },
  {
    "text": "we fit it with just good files and it gives us new jobs to the files before we",
    "start": "109979",
    "end": "115710"
  },
  {
    "text": "go into details of set let's see the state of the art nowadays when we talk",
    "start": "115710",
    "end": "121409"
  },
  {
    "text": "about broth exploitations the JavaScript engine has been more and more active target more and more people began their",
    "start": "121409",
    "end": "128250"
  },
  {
    "text": "research in this field and publicize their findings such as papers and toes this year only they are fuzzy Liana",
    "start": "128250",
    "end": "135120"
  },
  {
    "text": "Kodiak you missed both are missing fools so what is father there are many answers",
    "start": "135120",
    "end": "141480"
  },
  {
    "text": "here are two of them on the one hand the father is an IO process it consumes the",
    "start": "141480",
    "end": "146640"
  },
  {
    "text": "input and gives output on the other hand the father can be viewed as a searching process we are hunting for crashes",
    "start": "146640",
    "end": "153150"
  },
  {
    "text": "aren't we different wheels bring different questions one of the most important questions that why there is no",
    "start": "153150",
    "end": "159780"
  },
  {
    "text": "mutation based the father looks like this it receives just crew the fire and",
    "start": "159780",
    "end": "167310"
  },
  {
    "text": "transform it into the abstract syntax tree then it stops notation on the ast",
    "start": "167310",
    "end": "172950"
  },
  {
    "text": "and finally to transform the mutated ast into GS again of course it will also",
    "start": "172950",
    "end": "178620"
  },
  {
    "text": "implement the buildings including the beauties objects and beauty beauty methods the cheese is the creation of",
    "start": "178620",
    "end": "185970"
  },
  {
    "text": "the scopes the records the variable and the type information if a variable is a function we are also interested in its",
    "start": "185970",
    "end": "192840"
  },
  {
    "text": "signature when compute comes to mutation there are different strategies crossed",
    "start": "192840",
    "end": "198480"
  },
  {
    "text": "over like the sprites face in the AFL also it can do add delete replace and",
    "start": "198480",
    "end": "204030"
  },
  {
    "text": "the other modifications back to the question where there is no paper or toast like this my answer is that the",
    "start": "204030",
    "end": "211500"
  },
  {
    "text": "idea is so instinctive that nobody thinks either deserve to mention in public like what I am doing now but",
    "start": "211500",
    "end": "217980"
  },
  {
    "text": "actually it is very effective and this is the first part he found the mvh which",
    "start": "217980",
    "end": "223950"
  },
  {
    "text": "is exploitable it's a typical redeafination bug it redefines the s",
    "start": "223950",
    "end": "229250"
  },
  {
    "text": "concatenate above symbol and breaks up the assumption of v8 he found a bug but it doesn't belong to",
    "start": "229250",
    "end": "235980"
  },
  {
    "text": "him someone else report to Google and you may notice the question mark in the",
    "start": "235980",
    "end": "241769"
  },
  {
    "text": "title but actually the bug is very good to exploit the total exploit which pops",
    "start": "241769",
    "end": "247139"
  },
  {
    "text": "up a calculator is no more than 13 lines if you are interested in the garbage",
    "start": "247139",
    "end": "252810"
  },
  {
    "text": "collection of v8 this bug is a good startup and so Park creation is the most",
    "start": "252810",
    "end": "258570"
  },
  {
    "text": "annoying it also reminds me of another bug that is we used it to Paul H",
    "start": "258570",
    "end": "265229"
  },
  {
    "text": "processor in point 1 mm sixteen is also a redefinition bug we found it by fuzzy but the bug is too",
    "start": "265229",
    "end": "272060"
  },
  {
    "text": "easy to audit and that's why we were so nervous we're lucky chair took on edge before us this bad experience tries to",
    "start": "272060",
    "end": "280069"
  },
  {
    "text": "think how to avoid a collision looking at a piece of code I am lost in thought",
    "start": "280069",
    "end": "285919"
  },
  {
    "text": "what should we expect from this seed Epoque like this or this",
    "start": "285919",
    "end": "291560"
  },
  {
    "text": "my answer is no imagine that our seed is here and a POC is here but I don't",
    "start": "291560",
    "end": "300500"
  },
  {
    "text": "expect that I can find it because the search headspace is too large we must be",
    "start": "300500",
    "end": "305750"
  },
  {
    "text": "a lucky oh sorry",
    "start": "305750",
    "end": "308800"
  },
  {
    "text": "we must be a lucky dog if we find it and how about this looks good and there are",
    "start": "311949",
    "end": "319520"
  },
  {
    "text": "still two stars in the searching space it can be smaller and there are even no",
    "start": "319520",
    "end": "324860"
  },
  {
    "text": "stars but don't worry we should believe that there are many hidden stars in the picture and this is what set us in the",
    "start": "324860",
    "end": "332539"
  },
  {
    "text": "picture they are so close to each other that you cannot hear from them set tries",
    "start": "332539",
    "end": "338120"
  },
  {
    "text": "to find the pot very similar to the seed and we found CVE 2016 51 98 from this",
    "start": "338120",
    "end": "346069"
  },
  {
    "text": "seed we used it to come from a mobile point 1 2016 let's see what's a deal",
    "start": "346069",
    "end": "352129"
  },
  {
    "text": "with the seed it erupted the assignment statement with the function clack collaboration declaration of course we",
    "start": "352129",
    "end": "360169"
  },
  {
    "text": "must quote at the original position because JavaScript doesn't implement dynamic scope and we use check hatch in",
    "start": "360169",
    "end": "368029"
  },
  {
    "text": "case it introduces new arrows here in fact the check hatch is very important",
    "start": "368029",
    "end": "373129"
  },
  {
    "text": "it stopped the compiler to inline the small new small function and we inserted",
    "start": "373129",
    "end": "379250"
  },
  {
    "text": "an empty loop in general empty loop can speed up the optimization and we repeat",
    "start": "379250",
    "end": "385279"
  },
  {
    "text": "into the check hash statement because we either changed something about handling",
    "start": "385279",
    "end": "390680"
  },
  {
    "text": "the recursion we rewrote the park in the form of for loop and that is my job",
    "start": "390680",
    "end": "398319"
  },
  {
    "text": "that's how side mutate secede the new files are very similar to the original",
    "start": "399220",
    "end": "404330"
  },
  {
    "text": "seed but they have different CFG and D F G and we expect compiler will generate",
    "start": "404330",
    "end": "409820"
  },
  {
    "text": "different JIT codes the list is far from being complete but it shows some very",
    "start": "409820",
    "end": "416210"
  },
  {
    "text": "useful transform with transformations we also labor issue with stars most us",
    "start": "416210",
    "end": "421430"
  },
  {
    "text": "means more effective at least you know of other luminous reps statements with",
    "start": "421430",
    "end": "427940"
  },
  {
    "text": "loop structures such as for in a while we have seen function eyes empty loop",
    "start": "427940",
    "end": "433280"
  },
  {
    "text": "and repeating or last example said also inserts some statements which triggers",
    "start": "433280",
    "end": "438530"
  },
  {
    "text": "garbage collection Keynesian eyes includes jump and compare such as if",
    "start": "438530",
    "end": "443570"
  },
  {
    "text": "statements take function eyes as an example what can we do with this",
    "start": "443570",
    "end": "448850"
  },
  {
    "text": "assignment statement there are at least seven kinds of transformations besides",
    "start": "448850",
    "end": "454880"
  },
  {
    "text": "each function can be both global or local so there must be much informations we can take it's like the isomers",
    "start": "454880",
    "end": "462280"
  },
  {
    "text": "isomers they have the the same elements but different structures and their characteristics are totally different",
    "start": "462280",
    "end": "468860"
  },
  {
    "text": "and here's a story from him in the first-person narrative perspective ever",
    "start": "468860",
    "end": "475340"
  },
  {
    "text": "disabled all the other faces but only enabled the sad face Iran defies the three nights on my post of his pro and",
    "start": "475340",
    "end": "482630"
  },
  {
    "text": "every morning I opened the door and took a peep at the screen and in the third day I found a crash detection at that",
    "start": "482630",
    "end": "489680"
  },
  {
    "text": "moment I was quite confident that the crash must be good and are likely to be exploitable all the transformations of",
    "start": "489680",
    "end": "497810"
  },
  {
    "text": "set also have the smart version when we know the context for example if there is",
    "start": "497810",
    "end": "503180"
  },
  {
    "text": "a number or array we can use the number or the length of the array as the loop times in the for loop statement we just",
    "start": "503180",
    "end": "511550"
  },
  {
    "text": "uncomment the lines so that said can Co work without all other faces and set",
    "start": "511550",
    "end": "517849"
  },
  {
    "text": "them can take the advantage of the information collected in the early phase",
    "start": "517849",
    "end": "523960"
  },
  {
    "text": "there are some results from our fathers you may notice that the keyword for is",
    "start": "524200",
    "end": "530209"
  },
  {
    "text": "we're and that's what we expect from set the last one is the bug we used in March",
    "start": "530209",
    "end": "535939"
  },
  {
    "text": "this year and we found it in early 2018 we ever found a bug which had existed",
    "start": "535939",
    "end": "543110"
  },
  {
    "text": "for more than four years and we used it to post a fairy in 2017 the difference",
    "start": "543110",
    "end": "548149"
  },
  {
    "text": "between the city and the park is only a four loop that is amazing and as",
    "start": "548149",
    "end": "555079"
  },
  {
    "text": "everyone knows exploitation is another key point in planning contests so in this section we will share some",
    "start": "555079",
    "end": "561559"
  },
  {
    "text": "interesting cases and odd exploitation technique here is the first case we want",
    "start": "561559",
    "end": "567470"
  },
  {
    "text": "to share this is the park of CVE 2017 50 53 which is used in Cointreau 2017 this",
    "start": "567470",
    "end": "575089"
  },
  {
    "text": "is a very typical redefinition bug and it gives us the out-of-bounds access capability however not like the other",
    "start": "575089",
    "end": "582019"
  },
  {
    "text": "arrays functions index often includes can only return a boolean value or an integer so there is no auto bond right",
    "start": "582019",
    "end": "589519"
  },
  {
    "text": "and we cannot get a pointer from this out of concrete and it's worth mentioning that in May this year Steven",
    "start": "589519",
    "end": "597019"
  },
  {
    "text": "from Google posted a technical article and project zeros blog about exploiting a similar bug in GOG in the blog Steven",
    "start": "597019",
    "end": "605540"
  },
  {
    "text": "introduced a way for leaking the array buffer back in store suggests so I'm not going to talk more about it but there's",
    "start": "605540",
    "end": "612139"
  },
  {
    "text": "the difference between two bugs in this redefinition bug we can set the arrest length to zero and its elemental ray",
    "start": "612139",
    "end": "619459"
  },
  {
    "text": "will point to the amplification which means we can leak the pointers located",
    "start": "619459",
    "end": "624679"
  },
  {
    "text": "in pre-allocated outer space in 2017 there is a code space pointer in the old",
    "start": "624679",
    "end": "631220"
  },
  {
    "text": "space so we can lick it after we got the address of the code space we can put our",
    "start": "631220",
    "end": "637999"
  },
  {
    "text": "share code which is constructed by double value in giaggi on the old tunnel code space this is",
    "start": "637999",
    "end": "644540"
  },
  {
    "text": "also known as Jackie's burry so the only thing we need is to control the PC",
    "start": "644540",
    "end": "649639"
  },
  {
    "text": "register to jump to our share code also similar to Stephens approach we use the",
    "start": "649639",
    "end": "656059"
  },
  {
    "text": "string compare for next step there are several stream types in v8 for external",
    "start": "656059",
    "end": "661129"
  },
  {
    "text": "string in a holder pointer which points to another training other components for example the WTF stream in blink and the",
    "start": "661129",
    "end": "669390"
  },
  {
    "text": "stream in other components always use virtual function code for the comparison during the index of search so if we can",
    "start": "669390",
    "end": "677220"
  },
  {
    "text": "fake an external stream and a controller virtual table we will have the PC control and here's the layout of the fix",
    "start": "677220",
    "end": "685590"
  },
  {
    "text": "external stream that happy information of the stream is stored in the tag field so we need to carefully construct the",
    "start": "685590",
    "end": "692370"
  },
  {
    "text": "map and the external pointer points to the fixed virtual table while the",
    "start": "692370",
    "end": "697710"
  },
  {
    "text": "comparison function is at the 5th index of the virtual table and after carefully",
    "start": "697710",
    "end": "703410"
  },
  {
    "text": "constructing a stream we put the address of the fix external string on create heap and use the auto found compared",
    "start": "703410",
    "end": "710940"
  },
  {
    "text": "with the virtual function call and a jump to our share code so that is the first case",
    "start": "710940",
    "end": "716280"
  },
  {
    "text": "we want to share before the next case",
    "start": "716280",
    "end": "721320"
  },
  {
    "text": "let's go back to mobile point 1 2016 and this is my first exploit I'm just crypt they are to optimize the",
    "start": "721320",
    "end": "728880"
  },
  {
    "text": "function and in check function the optimized code would write the number directly to the property in a few",
    "start": "728880",
    "end": "735390"
  },
  {
    "text": "assembly however we have already reset the global variable m in sitio our",
    "start": "735390",
    "end": "741180"
  },
  {
    "text": "function so it will lead to out of bounds right empty fixed array in this",
    "start": "741180",
    "end": "747330"
  },
  {
    "text": "but we proved that the out-of-bounds access our empty fixed array can lead to arbitrary adjust read and write and if",
    "start": "747330",
    "end": "754320"
  },
  {
    "text": "you are interested in the exploitation you can find my talk on classic West 2017 here I really want to recommend",
    "start": "754320",
    "end": "762540"
  },
  {
    "text": "that the properties I really want to recommend the properties for exploitation and min is a challenge in",
    "start": "762540",
    "end": "769740"
  },
  {
    "text": "series if you have which is produced by cell oh it's not a difficult change but",
    "start": "769740",
    "end": "775170"
  },
  {
    "text": "I found that almost all public exploits take advantage of confusion of the table",
    "start": "775170",
    "end": "780780"
  },
  {
    "text": "array and the elements array except for seller himself hello to the took advantage of the",
    "start": "780780",
    "end": "787170"
  },
  {
    "text": "mismatch between the script array under the properties and I think it is more convenient because it doesn't need to",
    "start": "787170",
    "end": "793740"
  },
  {
    "text": "fake object this approach this approach depends on",
    "start": "793740",
    "end": "799160"
  },
  {
    "text": "the wrong information in descriptor array which is stored in map so the map",
    "start": "799160",
    "end": "804530"
  },
  {
    "text": "up of the object must stay valid but sometimes the situation is more difficult this is one of my Park which",
    "start": "804530",
    "end": "813170"
  },
  {
    "text": "can achieve code execution in v8 in one of the older version of v8 this bucket",
    "start": "813170",
    "end": "818990"
  },
  {
    "text": "writes undefined to map and the property field so it will destroy the map of the object and in such case we cannot use",
    "start": "818990",
    "end": "826760"
  },
  {
    "text": "the traditional ways to exploit it this",
    "start": "826760",
    "end": "831770"
  },
  {
    "text": "is the standard by bug 4.1 2017 this is also a low quality but like the previous",
    "start": "831770",
    "end": "837410"
  },
  {
    "text": "one because of the time I'm not going to introduce the details of this part and in summary this bug has the",
    "start": "837410",
    "end": "843830"
  },
  {
    "text": "out-of-bounds pop on the newly allocated hash table and the offset of pop",
    "start": "843830",
    "end": "849020"
  },
  {
    "text": "operation depends on the high four paths of the pointer which obviously cannot be predicted or controlled so it is more",
    "start": "849020",
    "end": "856550"
  },
  {
    "text": "like an uncontrollable use of the free rather than the out of bounds really to",
    "start": "856550",
    "end": "862790"
  },
  {
    "text": "exploit these low quality bugs we put forward the JIT fragment in mobile point or 2016 let's take a look at the",
    "start": "862790",
    "end": "870440"
  },
  {
    "text": "assembly code first you take out the hard coding adjusts from the global",
    "start": "870440",
    "end": "877910"
  },
  {
    "text": "variable s and then you take out the property array of the global object net",
    "start": "877910",
    "end": "885650"
  },
  {
    "text": "it directly write the number to the first property of the property array and",
    "start": "885650",
    "end": "891100"
  },
  {
    "text": "finally it returns undefined we can find that there is no map check in this",
    "start": "891100",
    "end": "897830"
  },
  {
    "text": "optimizer function in general in general there is no always there is always sorry",
    "start": "897830",
    "end": "904840"
  },
  {
    "text": "in general there is always no map check on the global variable but if you modify",
    "start": "904840",
    "end": "911360"
  },
  {
    "text": "this global variable v8 will notify the optimize the function to be optimized",
    "start": "911360",
    "end": "916780"
  },
  {
    "text": "but think about this question what if we modify the global object by mistake or",
    "start": "916780",
    "end": "923570"
  },
  {
    "text": "in other words if we can use memory corruption to modify the global object we were the function by out",
    "start": "923570",
    "end": "930379"
  },
  {
    "text": "the answer is no so we put forward a template for the of this approach first",
    "start": "930379",
    "end": "936689"
  },
  {
    "text": "we prepare the global object and its properties and then we prepare the check function to write on its properties and",
    "start": "936689",
    "end": "942779"
  },
  {
    "text": "optimize it after that we triggered our bug to corrupt the global object s and finally",
    "start": "942779",
    "end": "951149"
  },
  {
    "text": "we check the optimize the function again and write it directly on the corrupted object and take the second bug as an",
    "start": "951149",
    "end": "959939"
  },
  {
    "text": "example as I said just now the out of bounds read always access on the freedom",
    "start": "959939",
    "end": "965069"
  },
  {
    "text": "memory so we first prepare so many set objects live on v8 heap because the out",
    "start": "965069",
    "end": "971879"
  },
  {
    "text": "of bounds read is uncontrollable so we have to achieve the bug locally and we use instance of to check the return",
    "start": "971879",
    "end": "978329"
  },
  {
    "text": "pointer instance of it's very safe which can avoid a segmentation fault during the loop if we found a pointer which",
    "start": "978329",
    "end": "985289"
  },
  {
    "text": "points to a set object we save it in the global variable and then we prepare the",
    "start": "985289",
    "end": "992369"
  },
  {
    "text": "properties and we optimize the function on the global variable and actually the",
    "start": "992369",
    "end": "998699"
  },
  {
    "text": "set object is released so after we see so many now objects it will be overwritten by now",
    "start": "998699",
    "end": "1004819"
  },
  {
    "text": "and finally we figure they optimize the function again it will directly write",
    "start": "1004819",
    "end": "1010639"
  },
  {
    "text": "the prepared value to now and the following step is as the same as the out of context s are empty fixed array this",
    "start": "1010639",
    "end": "1018379"
  },
  {
    "text": "is just an example that ticket advantages of the elimination in optimize the function to exploit the low",
    "start": "1018379",
    "end": "1024168"
  },
  {
    "text": "quality bugs I believe you can find more of it and",
    "start": "1024169",
    "end": "1029288"
  },
  {
    "text": "now let's go to the third part the chrome sandbox that passed since 2016 we",
    "start": "1029289",
    "end": "1035899"
  },
  {
    "text": "have successfully pon chrome three times in different ways the first time is mobile point one 2016 we use the logical",
    "start": "1035899",
    "end": "1042949"
  },
  {
    "text": "bug in renderer to start the webview in privileged app and then we attacked the",
    "start": "1042949",
    "end": "1048259"
  },
  {
    "text": "webview again to obtain a code execution with high privilege in recent years",
    "start": "1048259",
    "end": "1054620"
  },
  {
    "text": "kernel is a very popular text service in process and box type has however do to",
    "start": "1054620",
    "end": "1059809"
  },
  {
    "text": "win 3-2 key lockdown it is very difficult to attack colonel inside the chrome sandbox in 2017 we found that CFS is a good",
    "start": "1059809",
    "end": "1069140"
  },
  {
    "text": "attack surface which can be accessed in Chrome and we success successfully got",
    "start": "1069140",
    "end": "1074299"
  },
  {
    "text": "system at that time unfortunately this",
    "start": "1074299",
    "end": "1079340"
  },
  {
    "text": "attack surface is killed in grass redstone 3 by the sandbox token the",
    "start": "1079340",
    "end": "1085580"
  },
  {
    "text": "third time is much this year we use the use of the free part in indexdb to web has chrome sandbox and this is the main",
    "start": "1085580",
    "end": "1091970"
  },
  {
    "text": "carry in researching a pc attack is very popular this year at the end of last",
    "start": "1091970",
    "end": "1097159"
  },
  {
    "text": "year neither one is impressive publicly said that we attack against a PC after that",
    "start": "1097159",
    "end": "1102169"
  },
  {
    "text": "Matt grant from project zero of the posterior blog about HTC bugs we have learned a lot from their career sharings",
    "start": "1102169",
    "end": "1108289"
  },
  {
    "text": "so I want to thank them here before we go deep into the bug we need to know",
    "start": "1108289",
    "end": "1114289"
  },
  {
    "text": "more about indexdb here's the example of using the activity in JavaScript first",
    "start": "1114289",
    "end": "1120590"
  },
  {
    "text": "we can open database with the given DB name and the version the function will",
    "start": "1120590",
    "end": "1125720"
  },
  {
    "text": "return our request and then we can bind some callbacks to the request if the",
    "start": "1125720",
    "end": "1131090"
  },
  {
    "text": "database is successfully open it will be sent back through the operator needy the callback and we can obtain the database",
    "start": "1131090",
    "end": "1138260"
  },
  {
    "text": "object from the event argument after that we can create an object store and index on the database we can also use",
    "start": "1138260",
    "end": "1145640"
  },
  {
    "text": "deleted database to delete the index DB database because we already have",
    "start": "1145640",
    "end": "1153860"
  },
  {
    "text": "colleagues coaching in renderer we can directly call a PC functions in native way there are three abuse interfaces",
    "start": "1153860",
    "end": "1161630"
  },
  {
    "text": "religious related to index DB and we will focus on the first one which is",
    "start": "1161630",
    "end": "1167000"
  },
  {
    "text": "related to our vulnerability there are 6 GC functions defined in a DB factual",
    "start": "1167000",
    "end": "1174140"
  },
  {
    "text": "interface we can easily construct our",
    "start": "1174140",
    "end": "1180140"
  },
  {
    "text": "POC in a PC course firstly we call open on DB 1 which we",
    "start": "1180140",
    "end": "1185809"
  },
  {
    "text": "will first initialize the database in the browser side after the database is completely opened we call an accessory",
    "start": "1185809",
    "end": "1193220"
  },
  {
    "text": "IPC functions inside the callback of the first open it should be noted that not like",
    "start": "1193220",
    "end": "1199650"
  },
  {
    "text": "the first call the last three operations must be performed together and these",
    "start": "1199650",
    "end": "1204900"
  },
  {
    "text": "operations are all as asynchronous so each operation cannot be completely",
    "start": "1204900",
    "end": "1210180"
  },
  {
    "text": "executed a DB factor is responsible for",
    "start": "1210180",
    "end": "1217710"
  },
  {
    "text": "managing in the X DB database and there is a database map in index DB factory",
    "start": "1217710",
    "end": "1224460"
  },
  {
    "text": "which holds a role pointer to index DB database notice that role point is very",
    "start": "1224460",
    "end": "1229590"
  },
  {
    "text": "dangerous in C++ because there is no any protection on a row pointer after the",
    "start": "1229590",
    "end": "1236400"
  },
  {
    "text": "deleted database with the fourth course flag the raw pointer in the database map should be removed however there is an",
    "start": "1236400",
    "end": "1245640"
  },
  {
    "text": "active open request when we try to first close the database the open request will be performed during the first course and",
    "start": "1245640",
    "end": "1252090"
  },
  {
    "text": "it will create a new connection we can take a look at the code if we coordinated with the fourth close flag",
    "start": "1252090",
    "end": "1258960"
  },
  {
    "text": "it will first close it immediately and during the first course the connections",
    "start": "1258960",
    "end": "1266250"
  },
  {
    "text": "to the database are iterated and a fourth closed however if there is a pending connection waiting to open the",
    "start": "1266250",
    "end": "1272790"
  },
  {
    "text": "request would execute once all the other connections were destroyed and the create a new connection as a result the",
    "start": "1272790",
    "end": "1279810"
  },
  {
    "text": "connect the connections and the active request is not empty so the to debug",
    "start": "1279810",
    "end": "1285720"
  },
  {
    "text": "checks failed most seriously it will prevent the database being removed from",
    "start": "1285720",
    "end": "1291660"
  },
  {
    "text": "the database map and finally we use about transactions for database to",
    "start": "1291660",
    "end": "1298170"
  },
  {
    "text": "remove to remove all transactions it will release the database since or references to the database are cleared",
    "start": "1298170",
    "end": "1304980"
  },
  {
    "text": "so the row pointer in database map points to a freedom memory now we have a",
    "start": "1304980",
    "end": "1311640"
  },
  {
    "text": "row pointer that has been released then we need to find out where it is being",
    "start": "1311640",
    "end": "1316770"
  },
  {
    "text": "used after some auditing ion we understood more about open and a deleted database",
    "start": "1316770",
    "end": "1323750"
  },
  {
    "text": "these two functions are very similar tick open as an example when we start",
    "start": "1324290",
    "end": "1329550"
  },
  {
    "text": "opening database you know we were first search in database in map according to the DB",
    "start": "1329550",
    "end": "1334739"
  },
  {
    "text": "name and its origin if fun it will directly return the database pointer in",
    "start": "1334739",
    "end": "1340019"
  },
  {
    "text": "in the database map to perform the following operations in other words we",
    "start": "1340019",
    "end": "1345330"
  },
  {
    "text": "can do open and the delete operation on a free database to exploit Chrome on",
    "start": "1345330",
    "end": "1352409"
  },
  {
    "text": "Windows we need to learn some basic knowledge before we start writing our exploit firstly there is no control flow",
    "start": "1352409",
    "end": "1358200"
  },
  {
    "text": "guard in chrome process on Windows certainly the library adjusts in every process on Windows has seams so we can",
    "start": "1358200",
    "end": "1364979"
  },
  {
    "text": "obtain the library address from the compromised renderer process certainly there are many virtual function calls in",
    "start": "1364979",
    "end": "1371669"
  },
  {
    "text": "C++ implementation so it is easy to control PC raddest the only thing we",
    "start": "1371669",
    "end": "1376889"
  },
  {
    "text": "need is a hip adjust to put our Rob King on so we need to leak leak hip adjust",
    "start": "1376889",
    "end": "1382679"
  },
  {
    "text": "first we also noticed that if we successfully opened a database it will",
    "start": "1382679",
    "end": "1388649"
  },
  {
    "text": "return some information such as a DB name and object store names and the opposed object of paste gene structure",
    "start": "1388649",
    "end": "1395820"
  },
  {
    "text": "and we all know that string is very good for info leak so until now everything looks fine let's take a look at the code",
    "start": "1395820",
    "end": "1403369"
  },
  {
    "text": "the connection open connection and the deleted database are very similar when",
    "start": "1403369",
    "end": "1408599"
  },
  {
    "text": "we call open or delete the database they won't do it immediately instead the",
    "start": "1408599",
    "end": "1413849"
  },
  {
    "text": "first create we first create a new request and then they pass the new",
    "start": "1413849",
    "end": "1419489"
  },
  {
    "text": "requested to a panel request the function in a panel request the newly",
    "start": "1419489",
    "end": "1427049"
  },
  {
    "text": "created connection request is pushed to pending requests which is a circular queue and if there is no active request",
    "start": "1427049",
    "end": "1435539"
  },
  {
    "text": "it will process the request secured immediately in process request secured",
    "start": "1435539",
    "end": "1442679"
  },
  {
    "text": "it takes out the first request of the queue and then called virtual function perform on the request in the perform",
    "start": "1442679",
    "end": "1452759"
  },
  {
    "text": "function we can see that if we can successfully open the database you know will send back to connect a connection",
    "start": "1452759",
    "end": "1458729"
  },
  {
    "text": "and the DBS metadata via unsuccess go back besides metadata is a member",
    "start": "1458729",
    "end": "1464169"
  },
  {
    "text": "object of structure tab index DB database metadata which includes a basis gene obviously we can easily control the",
    "start": "1464169",
    "end": "1472090"
  },
  {
    "text": "stream seems info leak is not difficult to us and after carefully constructing",
    "start": "1472090",
    "end": "1477940"
  },
  {
    "text": "the fake in the activity data base as successfully reached the unsuccess callback but then I got the sorry but",
    "start": "1477940",
    "end": "1487539"
  },
  {
    "text": "there got a second machine fault after some debugging I found out the reason",
    "start": "1487539",
    "end": "1493739"
  },
  {
    "text": "this is because there is also an STD map in metadata which is implemented as red",
    "start": "1493739",
    "end": "1500409"
  },
  {
    "text": "black G in C++ during the Quebec construction it has to copy construct",
    "start": "1500409",
    "end": "1506649"
  },
  {
    "text": "the index DB database method data structure which needs to iterate the STD",
    "start": "1506649",
    "end": "1512320"
  },
  {
    "text": "map the end of the RPG traversal we appointed to the object itself and",
    "start": "1512320",
    "end": "1518470"
  },
  {
    "text": "represent the end this means we have taught we have to know the the address",
    "start": "1518470",
    "end": "1523869"
  },
  {
    "text": "of metadata itself to enter the traversal but we don't know anything about the HIPAA Jess so we have no",
    "start": "1523869",
    "end": "1531909"
  },
  {
    "text": "choice but to find other ways to continue our exploitation let's go back",
    "start": "1531909",
    "end": "1537429"
  },
  {
    "text": "to a panel request the actual request is a member of index of DB database which",
    "start": "1537429",
    "end": "1545350"
  },
  {
    "text": "is fully controlled and if it is non zero the function will return directly",
    "start": "1545350",
    "end": "1550379"
  },
  {
    "text": "so that we can avoid a segmentation fault in process requests the queue now",
    "start": "1550379",
    "end": "1557470"
  },
  {
    "text": "let's stop the boring code analysis and to see the results in the debugger first we construct office with exploit we",
    "start": "1557470",
    "end": "1564970"
  },
  {
    "text": "prepared an array buffer incest hex 148 which is in the same set class as the",
    "start": "1564970",
    "end": "1571600"
  },
  {
    "text": "index DB database and we set the active request to 101 then we use blob to do",
    "start": "1571600",
    "end": "1578259"
  },
  {
    "text": "hips Prix it is worth mentioning that blob is the most popular object for",
    "start": "1578259",
    "end": "1584259"
  },
  {
    "text": "springing chrome and finally we coordinated database need need to add",
    "start": "1584259",
    "end": "1589629"
  },
  {
    "text": "one more thing here delete database is is the same as in the XD we in open since we won't pro process the requested",
    "start": "1589629",
    "end": "1597070"
  },
  {
    "text": "kill in debugger we set a breakpoint at the",
    "start": "1597070",
    "end": "1603760"
  },
  {
    "text": "deleted database function and notice that the RDI register represents the",
    "start": "1603760",
    "end": "1609100"
  },
  {
    "text": "first parameter in Linux which points to our magic number 1 1 1 and this means we",
    "start": "1609100",
    "end": "1614950"
  },
  {
    "text": "have already controlled the index DB database and here's the memory of index",
    "start": "1614950",
    "end": "1621160"
  },
  {
    "text": "DB database before the deletion and then we continue the execution and received a",
    "start": "1621160",
    "end": "1626890"
  },
  {
    "text": "gift we surprising you find that after the deleted database there is a keeper",
    "start": "1626890",
    "end": "1632770"
  },
  {
    "text": "pointer on the object and everything goes well so what is the key pointer",
    "start": "1632770",
    "end": "1637960"
  },
  {
    "text": "here let's go back to a pen request again remember that penny requests is a",
    "start": "1637960",
    "end": "1645400"
  },
  {
    "text": "member of a skew structure if we leave everything 0 it will automatically in",
    "start": "1645400",
    "end": "1650920"
  },
  {
    "text": "need during the first push operation it will first allocate a container buffer for storing its elements and then store",
    "start": "1650920",
    "end": "1658900"
  },
  {
    "text": "the container pointer to itself so we must as thank you for this gift and",
    "start": "1658900",
    "end": "1665350"
  },
  {
    "text": "remember that the object is not only an index DB database but also a blob so we",
    "start": "1665350",
    "end": "1671020"
  },
  {
    "text": "can easily read the the keeper pointer from the blob now we got the he purges",
    "start": "1671020",
    "end": "1677650"
  },
  {
    "text": "the following step is almost a copy from net and new class this exploit so thank them again and I will skip this part",
    "start": "1677650",
    "end": "1684670"
  },
  {
    "text": "quickly there is a virtual call in to delete and we can easily control the",
    "start": "1684670",
    "end": "1690310"
  },
  {
    "text": "virtual table they exploited change is shown in this diagram first we cheated",
    "start": "1690310",
    "end": "1695830"
  },
  {
    "text": "about to release the index DB database they whisper a blob three blobs to fill",
    "start": "1695830",
    "end": "1701230"
  },
  {
    "text": "the hole after that we caught a little database and a liquid HIPAA pointer from the blob and next we freed the leaked",
    "start": "1701230",
    "end": "1708730"
  },
  {
    "text": "blob and refill the hole with new content then we spray so many pitch heaps which includes our blob chain and",
    "start": "1708730",
    "end": "1716620"
  },
  {
    "text": "finally we trigger the virtual function call and a start Rob actually there are",
    "start": "1716620",
    "end": "1722110"
  },
  {
    "text": "some obstacles in the in the exploitation for example chrome uses kisima lock for skip management and in",
    "start": "1722110",
    "end": "1729460"
  },
  {
    "text": "all bug the index TV is in the IDB threat well the blob",
    "start": "1729460",
    "end": "1734770"
  },
  {
    "text": "allocation is in the arrow threat and actually it is very difficult to feel the whole from different strata cache",
    "start": "1734770",
    "end": "1742110"
  },
  {
    "text": "unfortunately because of the time I cannot share more about the details of TC Malik and if you are interested we",
    "start": "1742110",
    "end": "1747850"
  },
  {
    "text": "can discuss after the talk since the exploit on Windows is not",
    "start": "1747850",
    "end": "1753700"
  },
  {
    "text": "fresh and not very difficult so it prepared more for my audience in",
    "start": "1753700",
    "end": "1758800"
  },
  {
    "text": "addition to v8 and the index TV vulnerabilities we also report to the three Chrome OS bugs for ponen so we",
    "start": "1758800",
    "end": "1765370"
  },
  {
    "text": "need to exploit chrome sandbox on Chrome OS which is much more difficult challenge the first thing I need to say",
    "start": "1765370",
    "end": "1773380"
  },
  {
    "text": "is that chrome and Chrome OS is very similar to it on Linux because Chrome OS",
    "start": "1773380",
    "end": "1778810"
  },
  {
    "text": "is actually a Linux kernel-based operating system so the following exploit and the demo is actually on",
    "start": "1778810",
    "end": "1785800"
  },
  {
    "text": "Linux but the approach is FEMA on Chrome OS to the best of our knowledge it might",
    "start": "1785800",
    "end": "1791500"
  },
  {
    "text": "be the first public exploit after the C after the CF is deployed on Chrome so",
    "start": "1791500",
    "end": "1799510"
  },
  {
    "text": "now so let's check the difference the biggest difficulty on Chrome OS and",
    "start": "1799510",
    "end": "1805000"
  },
  {
    "text": "Linux is the clone control flow integrity which protects or in indirect",
    "start": "1805000",
    "end": "1810430"
  },
  {
    "text": "costs so we cannot attack the virtual function anymore besides the binary and the library",
    "start": "1810430",
    "end": "1816430"
  },
  {
    "text": "adjusts in main process is different from the renderer process so we have no binary and the library adjust this time",
    "start": "1816430",
    "end": "1822630"
  },
  {
    "text": "in history we cannot find any purpose methods on clone control flow integrity",
    "start": "1822630",
    "end": "1830020"
  },
  {
    "text": "except stack based corruption however stack based attack is also very",
    "start": "1830020",
    "end": "1835900"
  },
  {
    "text": "difficult in chrome first we need to know the strategist and the binaries adjust and even worse chrome uses thread",
    "start": "1835900",
    "end": "1843640"
  },
  {
    "text": "pool for handling IPC messages so we might attack thread stack which is a little bit random besides it also",
    "start": "1843640",
    "end": "1851260"
  },
  {
    "text": "requires high demand arbitrary address the right capabilities in summary this seems to be an impossible task for me",
    "start": "1851260",
    "end": "1859980"
  },
  {
    "text": "but don't forget that chrome is a huge system we can easily tamper with lots of",
    "start": "1859980",
    "end": "1865570"
  },
  {
    "text": "through memory corruption not only the traditional PC control so don't be",
    "start": "1865570",
    "end": "1871509"
  },
  {
    "text": "chapped by rules just a free your imagination there are more than 100",
    "start": "1871509",
    "end": "1877779"
  },
  {
    "text": "flags in Chrome and some of them are interesting when I was reading the Chrome's documentation I found that the",
    "start": "1877779",
    "end": "1884379"
  },
  {
    "text": "renderer command prefix might be the one I needed to think more about it let's",
    "start": "1884379",
    "end": "1890080"
  },
  {
    "text": "check how a renderer process start each",
    "start": "1890080",
    "end": "1895570"
  },
  {
    "text": "rendering process corresponds to a run render process host in process ID responsible for the management of the",
    "start": "1895570",
    "end": "1902859"
  },
  {
    "text": "process during the initialized initialization it first gets the value",
    "start": "1902859",
    "end": "1909340"
  },
  {
    "text": "of rendered command prefix from browser command line and then it prepares the",
    "start": "1909340",
    "end": "1916539"
  },
  {
    "text": "renderer command prefix value to the command line variable finally if you use",
    "start": "1916539",
    "end": "1922479"
  },
  {
    "text": "the variable to launch the child process this means if we can if we are able to",
    "start": "1922479",
    "end": "1928450"
  },
  {
    "text": "control the value of renderer command prefix we will control the command line of the child process and launch anything",
    "start": "1928450",
    "end": "1936279"
  },
  {
    "text": "we want and here's the example start chrome with the renderer command prefix",
    "start": "1936279",
    "end": "1942190"
  },
  {
    "text": "flag the value will be pretend prepended to chow the process command line as we",
    "start": "1942190",
    "end": "1951580"
  },
  {
    "text": "said when the command command prefix is stored in browser command line so the",
    "start": "1951580",
    "end": "1957129"
  },
  {
    "text": "next question is that what is the browser command line after little research we found that it is from a",
    "start": "1957129",
    "end": "1963639"
  },
  {
    "text": "static function which returns a global pointer and all command lines are saved",
    "start": "1963639",
    "end": "1968950"
  },
  {
    "text": "in the switches of the globe of arrival",
    "start": "1968950",
    "end": "1973979"
  },
  {
    "text": "so for command line injection we only needed two things the first one is a",
    "start": "1974940",
    "end": "1980919"
  },
  {
    "text": "binary adjust because the global pointer is located in the BSS segment and",
    "start": "1980919",
    "end": "1985989"
  },
  {
    "text": "secondly we need an 8 bytes write to hijack the pointer the machine seems",
    "start": "1985989",
    "end": "1991539"
  },
  {
    "text": "much easier but until now we only have a he purges no more leak and no right so I",
    "start": "1991539",
    "end": "1998409"
  },
  {
    "text": "want more luckily bisque U is more valuable than we expected",
    "start": "1998409",
    "end": "2004450"
  },
  {
    "text": "his name's miss implement some basic structures some of them are very similar",
    "start": "2004450",
    "end": "2009550"
  },
  {
    "text": "to STD but a little bit different miss Q is an example it is like STD kill but use the circular",
    "start": "2009550",
    "end": "2016690"
  },
  {
    "text": "D Q instead of the cure for its container-based miss Q is a 4.0 size structure the",
    "start": "2016690",
    "end": "2023350"
  },
  {
    "text": "layout is as follows the first field of with Q is a container pointer which",
    "start": "2023350",
    "end": "2030100"
  },
  {
    "text": "points to the elements array and the second field is the size of the",
    "start": "2030100",
    "end": "2035590"
  },
  {
    "text": "container ray the third field is the front index of a cure and the the",
    "start": "2035590",
    "end": "2041410"
  },
  {
    "text": "lasting field is the real index of the cure remember that we can append a",
    "start": "2041410",
    "end": "2048220"
  },
  {
    "text": "request for any x with no side effect so we can play with the q of really and",
    "start": "2048220",
    "end": "2053440"
  },
  {
    "text": "there are two different situations if",
    "start": "2053440",
    "end": "2060570"
  },
  {
    "text": "the queue is not full it will push the new request to the container since we",
    "start": "2060570",
    "end": "2066490"
  },
  {
    "text": "can fully control the container pointer we can write the new requester pointer to any urges and if the size is equal to",
    "start": "2066490",
    "end": "2075460"
  },
  {
    "text": "the length we were expanded as storage automatically in detail it will increase",
    "start": "2075460",
    "end": "2081040"
  },
  {
    "text": "the storage by 1/4 which needed to reallocate the buffer it first allocates",
    "start": "2081040",
    "end": "2086560"
  },
  {
    "text": "a new buffer then move the previous memory to the new buffer finally it frees the previous buffer pointer",
    "start": "2086560",
    "end": "2094139"
  },
  {
    "text": "similarly the previous point is controllable so we got the Archery's adjust 3 but be careful of the memory",
    "start": "2094140",
    "end": "2103690"
  },
  {
    "text": "move it will clear the memory according to the given size so before free we have",
    "start": "2103690",
    "end": "2109060"
  },
  {
    "text": "to guarantee that the buffer size is larger than the queue size and we have to thank you again then let's see how to",
    "start": "2109060",
    "end": "2120040"
  },
  {
    "text": "take advantage of the archer free every time we call it a database the length of",
    "start": "2120040",
    "end": "2126340"
  },
  {
    "text": "the pending requests increases by 1 so here we first increase in",
    "start": "2126340",
    "end": "2131850"
  },
  {
    "text": "Chris the length of the queue 234 here's the memory of Penny request of the first",
    "start": "2131850",
    "end": "2138240"
  },
  {
    "text": "division and after we delete database third times the length of the queue goes",
    "start": "2138240",
    "end": "2145260"
  },
  {
    "text": "to three and the fourth division we are cheek area log the size increases by 1/4",
    "start": "2145260",
    "end": "2152850"
  },
  {
    "text": "and and previous buffer is cleared after 34 divisions the size of the queue goes",
    "start": "2152850",
    "end": "2160260"
  },
  {
    "text": "to 42 which is hacked 150 parts remember",
    "start": "2160260",
    "end": "2165420"
  },
  {
    "text": "that the size of blob and the index DB database are both 148 so they are all in",
    "start": "2165420",
    "end": "2171450"
  },
  {
    "text": "the same size class in kisima lock which actually consumed 160 bytes in memory",
    "start": "2171450",
    "end": "2179420"
  },
  {
    "text": "since we have already read a thousand of blobs with in the same size the",
    "start": "2179420",
    "end": "2184920"
  },
  {
    "text": "container buffer will have high probability of being surrounded by the blocks",
    "start": "2184920",
    "end": "2191390"
  },
  {
    "text": "next we'll read the address of the container buffer from the blob that will rival leakages should be the value of",
    "start": "2192590",
    "end": "2199380"
  },
  {
    "text": "container pointer and then we subtract",
    "start": "2199380",
    "end": "2205080"
  },
  {
    "text": "the leakage as from the size of the structure and this is very important as",
    "start": "2205080",
    "end": "2211350"
  },
  {
    "text": "I said the container is surrounded by the blobs so the new point is very likely to point to a blob so here's a",
    "start": "2211350",
    "end": "2224250"
  },
  {
    "text": "diagram the leak the leakage has points to a blob that we sprayed then we use",
    "start": "2224250",
    "end": "2229980"
  },
  {
    "text": "the archery free to release the leak yes and the blob is read and then we",
    "start": "2229980",
    "end": "2239220"
  },
  {
    "text": "immediately open a new database with a different name thanks to thread cache",
    "start": "2239220",
    "end": "2245670"
  },
  {
    "text": "the newly created database can reuse that the space just released very stable so now there is a database pointing to",
    "start": "2245670",
    "end": "2253140"
  },
  {
    "text": "the same place as the blob the handles",
    "start": "2253140",
    "end": "2258780"
  },
  {
    "text": "of the blob imports size are still valid so we can also use the proper to read the content of the new database",
    "start": "2258780",
    "end": "2267050"
  },
  {
    "text": "from the vtable of indexeddb database we got the binary edges the last remaining",
    "start": "2267279",
    "end": "2279109"
  },
  {
    "text": "problem is the eight bytes right we cannot fully Nick and control the index",
    "start": "2279109",
    "end": "2284359"
  },
  {
    "text": "DB database so we can try more RPC calls in our DB database interface according",
    "start": "2284359",
    "end": "2292309"
  },
  {
    "text": "to the FEC name we choose two candidates rename objects store and the rename",
    "start": "2292309",
    "end": "2297709"
  },
  {
    "text": "index remember that object stores are",
    "start": "2297709",
    "end": "2303140"
  },
  {
    "text": "stored in an STD map which is a member of metadata while indexes are studying",
    "start": "2303140",
    "end": "2309410"
  },
  {
    "text": "an STD map which is a member of object store just as the name implies the two",
    "start": "2309410",
    "end": "2316279"
  },
  {
    "text": "FEC costs can modify the name of object store and index let's take a look at the",
    "start": "2316279",
    "end": "2323059"
  },
  {
    "text": "rename object store first before renaming it will check if the current",
    "start": "2323059",
    "end": "2328219"
  },
  {
    "text": "name is the same as the one it saved previously and I found it and I found it",
    "start": "2328219",
    "end": "2333769"
  },
  {
    "text": "is a little bit difficult to bypass this check so I turned to the next one there",
    "start": "2333769",
    "end": "2339380"
  },
  {
    "text": "are also many checks rename index but fortunately they are not very difficult",
    "start": "2339380",
    "end": "2344390"
  },
  {
    "text": "to bypass besides we can find that the comment is interesting it is to do",
    "start": "2344390",
    "end": "2350119"
  },
  {
    "text": "comment to add the same check as new rename object store eventually we can",
    "start": "2350119",
    "end": "2357680"
  },
  {
    "text": "modify the name at first I thought I could do arbitrary address right through the strings character array but I found",
    "start": "2357680",
    "end": "2364729"
  },
  {
    "text": "out that rename was Dumba's to remove we should cost the original character array to be freed and then replaced with a new",
    "start": "2364729",
    "end": "2371749"
  },
  {
    "text": "one let's take a look at this stream there are two different forms of stream if the string length is greater than 24",
    "start": "2371749",
    "end": "2378680"
  },
  {
    "text": "bytes it will use an external buffer to store its data and as t remove will",
    "start": "2378680",
    "end": "2385249"
  },
  {
    "text": "freed the external buffer and are replaced by a new one well if the string",
    "start": "2385249",
    "end": "2391489"
  },
  {
    "text": "length is less than 24 bytes it will inline the data and in this situation",
    "start": "2391489",
    "end": "2399680"
  },
  {
    "text": "even with SD move it will see if we will rest on the control the data through the original place remember that we only",
    "start": "2399680",
    "end": "2406820"
  },
  {
    "text": "need eight pads right so it is enough for us to can show the pointer of the command line",
    "start": "2406820",
    "end": "2413410"
  },
  {
    "text": "that's the diagram of the objects notice that everything in the graph is",
    "start": "2415750",
    "end": "2421370"
  },
  {
    "text": "controlled by us and we can modify the index name through a PC because",
    "start": "2421370",
    "end": "2428630"
  },
  {
    "text": "everything is in control we can set the index metadata to the address of global",
    "start": "2428630",
    "end": "2435020"
  },
  {
    "text": "command line pointer which is in BSS segment at the beginning the pointer",
    "start": "2435020",
    "end": "2441470"
  },
  {
    "text": "points to the original command line which we cannot control and then we use",
    "start": "2441470",
    "end": "2447250"
  },
  {
    "text": "rename index to change the pointer and point to our fixed command line object",
    "start": "2447250",
    "end": "2455200"
  },
  {
    "text": "so now we can control the command line of the browser and here is the version",
    "start": "2455440",
    "end": "2461630"
  },
  {
    "text": "in JavaScript and surprisingly I found I was able to put everything in one blob",
    "start": "2461630",
    "end": "2466750"
  },
  {
    "text": "actually there are more obstacles and difficulties during the exploitation but",
    "start": "2466750",
    "end": "2472250"
  },
  {
    "text": "because of the time I cannot share them all so at the end of our talk let's see",
    "start": "2472250",
    "end": "2478250"
  },
  {
    "text": "the demo here is official official build",
    "start": "2478250",
    "end": "2491240"
  },
  {
    "text": "of Chrome and then we visit our website the first part is v8 exploit and it will",
    "start": "2491240",
    "end": "2498440"
  },
  {
    "text": "be very quick and the v8 exploit will patch the renderer process so that we",
    "start": "2498440",
    "end": "2505940"
  },
  {
    "text": "can call the IPC functions directly and remember that we have to spray thousand",
    "start": "2505940",
    "end": "2511550"
  },
  {
    "text": "of drops so it might take some time and",
    "start": "2511550",
    "end": "2519430"
  },
  {
    "text": "in the in the last stage we open a new render process by the a frame in browser",
    "start": "2519430",
    "end": "2526760"
  },
  {
    "text": "and let's check the task list",
    "start": "2526760",
    "end": "2532570"
  },
  {
    "text": "now we can see that we successfully prepared our command to the child",
    "start": "2538750",
    "end": "2546710"
  },
  {
    "text": "process of Chrome and it will download the batch script from our server and",
    "start": "2546710",
    "end": "2552020"
  },
  {
    "text": "execute it so that is all for my",
    "start": "2552020",
    "end": "2559100"
  },
  {
    "text": "presentation thank you for your attention [Applause]",
    "start": "2559100",
    "end": "2567699"
  }
]