[
  {
    "start": "0",
    "end": "116000"
  },
  {
    "text": "good morning everyone um welcome to demystifying the secure Enclave processor um in Lagoon K couple notes",
    "start": "80",
    "end": "7399"
  },
  {
    "text": "before we get started the business Hall is in Bayside AB black hat Arsenal is on",
    "start": "7399",
    "end": "12480"
  },
  {
    "text": "the palm foyer on level three and the reception will be at 5:00 pm. tonight",
    "start": "12480",
    "end": "17560"
  },
  {
    "text": "visit the Ki Linux lab in Mandalay Bay a and uh thanks for putting your phones on vibrate during the presentation so we'd",
    "start": "17560",
    "end": "24439"
  },
  {
    "text": "like to welcome David Wong tarj man and Matthew Sonic thank",
    "start": "24439",
    "end": "31800"
  },
  {
    "text": "you thank you okay can you hear me um so yeah welcome to demystifying your",
    "start": "31800",
    "end": "38079"
  },
  {
    "text": "enclave processor so there's three of us up here I'm Matthew snck uh we have",
    "start": "38079",
    "end": "43760"
  },
  {
    "text": "David W and T man these two work at aouth I used to work with them now I'm",
    "start": "43760",
    "end": "49160"
  },
  {
    "text": "at offel so a little bit of an introduction few years ago Apple released their first",
    "start": "49160",
    "end": "56440"
  },
  {
    "text": "64-bit phone the Apple 5S or the iPhone 5S had a bunch of new technologies one",
    "start": "56440",
    "end": "61800"
  },
  {
    "text": "of which we're talking about today is secure Enclave processor has a lot of cool interesting crypto stuff and some",
    "start": "61800",
    "end": "68759"
  },
  {
    "text": "other things so effectively it is a core",
    "start": "68759",
    "end": "74080"
  },
  {
    "text": "within the sock that performs different secure operations completely separate",
    "start": "74080",
    "end": "79320"
  },
  {
    "text": "from the main AP uh big one touch ID and interesting thing as well is it has a",
    "start": "79320",
    "end": "87079"
  },
  {
    "text": "full stack of os op apps so on so there's not too much public",
    "start": "87079",
    "end": "95200"
  },
  {
    "text": "information outside of Apple's security guide as well as our favorites Apple's",
    "start": "95200",
    "end": "101640"
  },
  {
    "text": "patents if you want to learn everything or as much as you can read those patents",
    "start": "101640",
    "end": "106719"
  },
  {
    "text": "that's where we learned a lot and we but still left a lot of questions a few of",
    "start": "106719",
    "end": "112000"
  },
  {
    "text": "them are listed but we're going to try to go through some of those so basic",
    "start": "112000",
    "end": "117320"
  },
  {
    "start": "116000",
    "end": "116000"
  },
  {
    "text": "outline you can see up there a big one is don't leave early because we actually",
    "start": "117320",
    "end": "123000"
  },
  {
    "text": "go through the security stuff at the end so okay let's talk a little bit about",
    "start": "123000",
    "end": "128959"
  },
  {
    "text": "the hardware Design This is personally my favorite so Apple set has a dedicated",
    "start": "128959",
    "end": "136879"
  },
  {
    "start": "133000",
    "end": "133000"
  },
  {
    "text": "core it's called the king fisher core it's a armv7a and what's interesting is it's",
    "start": "136879",
    "end": "144440"
  },
  {
    "text": "completely segregated from the rest of the the sock so if you own a own the p",
    "start": "144440",
    "end": "150200"
  },
  {
    "text": "on el3 still does not give you any access to setep itself you know it",
    "start": "150200",
    "end": "155400"
  },
  {
    "text": "appears to be running at like 3 to 400 MHz um but another cool thing is there's",
    "start": "155400",
    "end": "161319"
  },
  {
    "text": "a bunch of other uh armv7 cores on the sock and those are not protected and",
    "start": "161319",
    "end": "168040"
  },
  {
    "text": "they're very similar to the actual sep core that make a great place to do research and notice some changes between",
    "start": "168040",
    "end": "175599"
  },
  {
    "text": "the different stock versions A7 through A9 seems like the newer one ones are more resistant to",
    "start": "175599",
    "end": "181840"
  },
  {
    "text": "attacks so SE itself has a bunch of dedicated portions so it has its own",
    "start": "181840",
    "end": "188480"
  },
  {
    "text": "like crypto engine its own fusing you know random number generator GID and uid",
    "start": "188480",
    "end": "194400"
  },
  {
    "text": "keys those are completely separate from anything that's going on on the AP it",
    "start": "194400",
    "end": "199560"
  },
  {
    "text": "also has a bunch of dedicated IO that runs from the sock you know set part of",
    "start": "199560",
    "end": "207080"
  },
  {
    "text": "the sock off it to the rest of the board your iPhone board so external",
    "start": "207080",
    "end": "212400"
  },
  {
    "text": "peripherals can talk to it without going through AP at all now while it does have dedicated",
    "start": "212400",
    "end": "219599"
  },
  {
    "text": "items it does share a fair amount with the AP big one is the power manager",
    "start": "219599",
    "end": "226000"
  },
  {
    "text": "which to me is really interesting because the security fuse settings are located in the power manager and there's",
    "start": "226000",
    "end": "232439"
  },
  {
    "text": "other neat things in there as well shares a memory controller that can be",
    "start": "232439",
    "end": "238760"
  },
  {
    "text": "poked at from AP uh PL so effectively the whole clocking of the chip uh which again can",
    "start": "238760",
    "end": "247040"
  },
  {
    "text": "be played with from AP and has a shared secure mailbox some piece of Hardware",
    "start": "247040",
    "end": "253040"
  },
  {
    "text": "that actually allows the two chips to or two cores to communicate and finally shares external",
    "start": "253040",
    "end": "259120"
  },
  {
    "start": "259000",
    "end": "259000"
  },
  {
    "text": "RAM so let's talk a little bit about the physical memory so it's got a dedicated",
    "start": "259120",
    "end": "264199"
  },
  {
    "text": "boot ROM like completely separate from AP just like its own computer uh it's boot ROM lives at the address listed",
    "start": "264199",
    "end": "272000"
  },
  {
    "text": "also has Dynamic inline encrypted as memory which is really cool so if a",
    "start": "272000",
    "end": "281440"
  },
  {
    "text": "attacker tries to do an off sock or off uh sock attack with the memory it's",
    "start": "281440",
    "end": "288520"
  },
  {
    "text": "still encrypted I've never seen this before on a production sock it's a really really neat and finally it has a",
    "start": "288520",
    "end": "296039"
  },
  {
    "text": "filter around this set core that protects it from standard attacks from",
    "start": "296039",
    "end": "302720"
  },
  {
    "text": "AP and only sep has this the other uh",
    "start": "302720",
    "end": "308160"
  },
  {
    "text": "king fisher cores on the device do not so let's talk a little bit about this filter so effectively you have this like",
    "start": "308160",
    "end": "316919"
  },
  {
    "start": "311000",
    "end": "311000"
  },
  {
    "text": "wrapper around all of the important bits so inside of it is the core the gpio run",
    "start": "316919",
    "end": "323880"
  },
  {
    "text": "into this then it has mailbox um a few other things but what's interesting is",
    "start": "323880",
    "end": "330319"
  },
  {
    "text": "it's a one-way filter so anything coming into it has to go through the mailbox",
    "start": "330319",
    "end": "335840"
  },
  {
    "text": "but anything going out or controlled via the seep core can read all of physical",
    "start": "335840",
    "end": "341000"
  },
  {
    "text": "memory so if you're inside a sep you have full control of the device but if you're outside of set you have to",
    "start": "341000",
    "end": "348400"
  },
  {
    "text": "through physical design go through this mailbox and on to that I'm going to hand",
    "start": "348400",
    "end": "354280"
  },
  {
    "text": "over to David to do boot process so the boot process of SE",
    "start": "354280",
    "end": "359560"
  },
  {
    "text": "actually happens in several stages the first stage is actually initiated by the AP uh the step is processor is initially",
    "start": "359560",
    "end": "366240"
  },
  {
    "text": "held at reset it's essentially stopped and the AP boot ROM is responsible for uh for starting the step uh however this",
    "start": "366240",
    "end": "372759"
  },
  {
    "text": "process is irreversible the AP doesn't have access to restart the seep or to stop it so the seep actually uses 4",
    "start": "372759",
    "end": "380919"
  },
  {
    "text": "kilobytes of static Ram that appears to be inaccessible by the ap of course is",
    "start": "380919",
    "end": "386720"
  },
  {
    "text": "and also it's on the chip so there's less vulnerable to physical attacks uh",
    "start": "386720",
    "end": "392240"
  },
  {
    "text": "the problem with this amount of RAM is very small but it's also enough to help it bootstrap into a next phase it's so",
    "start": "392240",
    "end": "398599"
  },
  {
    "text": "small that the sep can't even put its page tables in Ram initially as to hardcode its page tables in ROM and the",
    "start": "398599",
    "end": "405720"
  },
  {
    "text": "reason it needs page tables at all is because it uses large physical address extension because um ssep itself is a",
    "start": "405720",
    "end": "412720"
  },
  {
    "text": "32-bit cross processor and it must address 64-bit address physical address space so after it's set up those two",
    "start": "412720",
    "end": "419160"
  },
  {
    "text": "things um it starts a message Loop and I'm going to go over the details of how",
    "start": "419160",
    "end": "424280"
  },
  {
    "text": "the sa and AP communicate with each other uh in future slides but suffice it to say that in this initial low",
    "start": "424280",
    "end": "430160"
  },
  {
    "text": "capability State not a lot of uh it doesn't have a lot of capabilities it can only generate nonsense and get",
    "start": "430160",
    "end": "436440"
  },
  {
    "text": "permission from this from the AP to continue to boot why does it need",
    "start": "436440",
    "end": "441599"
  },
  {
    "start": "440000",
    "end": "440000"
  },
  {
    "text": "permission from the AP to continue to boot well it needs to set up a protected area of well it needs to more more than",
    "start": "441599",
    "end": "448639"
  },
  {
    "text": "4 Kobes of ram so it needs to have access to the external RAM that it shares with the AP and um it also that",
    "start": "448639",
    "end": "456800"
  },
  {
    "text": "Ram also needs to be prepr protected from AP tampering with it and that that protection is actually partially",
    "start": "456800",
    "end": "462800"
  },
  {
    "text": "configured by the AP so the AP is allowed to configure two regions uh one is T called tz0 probably trust Zone zero",
    "start": "462800",
    "end": "470360"
  },
  {
    "text": "one is called tz1 and tz0 is for the seps use and tz1 is for uh the ap's",
    "start": "470360",
    "end": "476479"
  },
  {
    "text": "hypervisor use which is involved in kernel patch protection um so SE can access T tz0 but the AP",
    "start": "476479",
    "end": "484039"
  },
  {
    "text": "running in normal mode cannot access tz0 nor running in hypervisor mode can access tz0 and tz1 the step can't access",
    "start": "484039",
    "end": "491080"
  },
  {
    "text": "tz1 and only the AP in hypervisor mode can access tz1 so the set must wait for",
    "start": "491080",
    "end": "496720"
  },
  {
    "text": "the AP to to donate a portion of this memory to it before it can actually continue the boot so this is a diagram",
    "start": "496720",
    "end": "504199"
  },
  {
    "text": "of how that boot flows it's of course there sort of a complicated dance between the and set because they're both",
    "start": "504199",
    "end": "510759"
  },
  {
    "text": "responsible for parts of this configuration um so after what's",
    "start": "510759",
    "end": "517039"
  },
  {
    "start": "514000",
    "end": "514000"
  },
  {
    "text": "interesting about this configuration is that even though iboot is the is the person is the one responsible for",
    "start": "517039",
    "end": "523360"
  },
  {
    "text": "configuring tz0 and tz1 uh the per sending the AP doesn't actually send permission for the uh SE to continue to",
    "start": "523360",
    "end": "531080"
  },
  {
    "text": "boot until after until after the kernel completely starts up so there's an",
    "start": "531080",
    "end": "536399"
  },
  {
    "text": "interesting division there uh so there there's a portion of time where the sep boot ROM is vulnerable to attack from",
    "start": "536399",
    "end": "542839"
  },
  {
    "text": "the iOS kernel um so sep doesn't take ap's word for it that tz0 is locked um",
    "start": "542839",
    "end": "549399"
  },
  {
    "text": "once tz0 is locked it's impossible to change the size and location of it so",
    "start": "549399",
    "end": "554640"
  },
  {
    "text": "first it checks have checks if tz0 is locked from the hardware registers that it shares with with the AP and then it",
    "start": "554640",
    "end": "561760"
  },
  {
    "text": "reads the size and address of tz0 before continuing so what happens after tz0 is",
    "start": "561760",
    "end": "568519"
  },
  {
    "start": "567000",
    "end": "567000"
  },
  {
    "text": "configured in has its own has its own area of memory um well actually now it's",
    "start": "568519",
    "end": "574000"
  },
  {
    "text": "protected against uh attacks from inside the iOS device but what about someone",
    "start": "574000",
    "end": "579320"
  },
  {
    "text": "with physical access and apple tries to mitigate that with memory encryption so there's a separate memory encryption",
    "start": "579320",
    "end": "585720"
  },
  {
    "text": "Hardware that's attached to a SE and it appears to support these modes but they actually use as 256 XX um supports two",
    "start": "585720",
    "end": "593360"
  },
  {
    "text": "channels and and how it works is pretty cool you don't have to actually do anything special in software you can",
    "start": "593360",
    "end": "599440"
  },
  {
    "text": "just have the have the seep core and software read uh read uh memory from a",
    "start": "599440",
    "end": "605959"
  },
  {
    "text": "certain address range and you'll get get it back in plain text even though on the physically on the external RAM it's",
    "start": "605959",
    "end": "612200"
  },
  {
    "text": "actually encrypted and when you write you write in plain text and and it gets transparently encrypted and it's",
    "start": "612200",
    "end": "617839"
  },
  {
    "text": "actually encrypted on the physical memory so how are these keys for memory encryption generated well to summarize",
    "start": "617839",
    "end": "625920"
  },
  {
    "start": "620000",
    "end": "620000"
  },
  {
    "text": "to summarize uh a random number generate that is generated boot is Tangled or encrypted with a device a unique key to",
    "start": "625920",
    "end": "633760"
  },
  {
    "text": "the device so after all this is set set up seep can finally move itself into the",
    "start": "633760",
    "end": "640440"
  },
  {
    "start": "635000",
    "end": "635000"
  },
  {
    "text": "encrypted memory that it has set up so it reinitializes itself reinitializes the page tables and clears the BSS and",
    "start": "640440",
    "end": "647399"
  },
  {
    "text": "so on and it begins a new message loop with no shared code between it and the low initial low capability",
    "start": "647399",
    "end": "653880"
  },
  {
    "text": "bootstrap so afterwards it actually retrieves certain information from the AP to continue to boot on older iOS",
    "start": "653880",
    "end": "661519"
  },
  {
    "text": "devices um they actually have an anti-replay token that's stored on ap's nand that AP stand sends over but in any",
    "start": "661519",
    "end": "668720"
  },
  {
    "text": "in all cases so far the sep uh actually receives its firmware per boot from the AP so people talk about sometimes talked",
    "start": "668720",
    "end": "676200"
  },
  {
    "text": "about online about updating the sep firmware there's really no conception of that because in actual reality the sep",
    "start": "676200",
    "end": "682880"
  },
  {
    "text": "gets this firmware aresh from the AP on every boot and now Matt will talk a little bit about how that set firmware",
    "start": "682880",
    "end": "688839"
  },
  {
    "text": "is loaded thanks David uh so yeah we will",
    "start": "688839",
    "end": "695240"
  },
  {
    "text": "talk uh try to move the slide talk a little bit about how the actual firmware",
    "start": "695240",
    "end": "700920"
  },
  {
    "text": "is loaded from AP to the SE core and we'll talk about the actual format so on",
    "start": "700920",
    "end": "708519"
  },
  {
    "text": "64-bit devices Apple introduced What's called the image 4 format it's different",
    "start": "708519",
    "end": "714399"
  },
  {
    "text": "from the proprietary of image 3 in that it's pretty much just asn1 dur coding uh",
    "start": "714399",
    "end": "722880"
  },
  {
    "text": "you know it's also very similar to what's happening on ap's I booot or boot ROM and a couple other places uh and can",
    "start": "722880",
    "end": "730600"
  },
  {
    "text": "be parsed pretty much with any standard uh asn1 parser so in it there are",
    "start": "730600",
    "end": "737639"
  },
  {
    "text": "typically two to three major pieces there's the payload itself which is the big encrypted step firmware blob there's",
    "start": "737639",
    "end": "745199"
  },
  {
    "text": "a restore uh portion which just has a couple basic information on restore and",
    "start": "745199",
    "end": "751440"
  },
  {
    "text": "there's the Manifest aka the AP ticket now for set that is effectively the",
    "start": "751440",
    "end": "757760"
  },
  {
    "text": "Alpha and the Omega of configuration and",
    "start": "757760",
    "end": "763399"
  },
  {
    "text": "security okay so let's talk a little bit more about the Manifest AKA AP ticket so",
    "start": "763720",
    "end": "769680"
  },
  {
    "start": "764000",
    "end": "764000"
  },
  {
    "text": "effectively it has a bunch of information about your device you know your ECI ID your you know actual chip ID",
    "start": "769680",
    "end": "778240"
  },
  {
    "text": "things like that to only allow it to run on your specific device so you can't take one firmware and run it on another",
    "start": "778240",
    "end": "785040"
  },
  {
    "text": "but some interesting things we found it has some settings that can be changed",
    "start": "785040",
    "end": "790240"
  },
  {
    "text": "they actually Chang the configuration of the OS as well as the hardware couple of",
    "start": "790240",
    "end": "796360"
  },
  {
    "text": "those were the demote security and demote production",
    "start": "796360",
    "end": "802120"
  },
  {
    "text": "Flags so let's talk a little bit about actually how this works how do we",
    "start": "802399",
    "end": "808279"
  },
  {
    "start": "803000",
    "end": "803000"
  },
  {
    "text": "reverse something that is not visible well let's try to find some code reuse",
    "start": "808279",
    "end": "815040"
  },
  {
    "text": "well we can't necessarily see it we can get an idea of how it works by looking at other areas that actually use image 4",
    "start": "815040",
    "end": "822000"
  },
  {
    "text": "parsing so let's start in the most accessible place that's close to se",
    "start": "822000",
    "end": "827639"
  },
  {
    "text": "iboot well there's not symbols in iboot but we did find one string image four",
    "start": "827639",
    "end": "833600"
  },
  {
    "text": "image 4 decode copy manifest hash and one strings all you need",
    "start": "833600",
    "end": "839720"
  },
  {
    "text": "so now that we know of this image for decode string where else can we find it Well inside of the sepo itself which is",
    "start": "839720",
    "end": "847560"
  },
  {
    "text": "used to send firmware is this symbol as well as a bunch of others effectively",
    "start": "847560",
    "end": "853040"
  },
  {
    "text": "it's a full userland image for parser that gave us a lot of information and",
    "start": "853040",
    "end": "859279"
  },
  {
    "text": "combined with some you know fun Googling found that this is based on the lib dur",
    "start": "859279",
    "end": "866000"
  },
  {
    "text": "sn1 parser that Apple actually released is open source so got a bunch of fun",
    "start": "866000",
    "end": "872079"
  },
  {
    "text": "information from that and in addition the RSA portion the pki is done by core",
    "start": "872079",
    "end": "878480"
  },
  {
    "text": "crypto which while not fully open source is reviewable so now we have a pretty good",
    "start": "878480",
    "end": "884279"
  },
  {
    "text": "idea of what the actual image 4 parser is doing so let's talk about how the flow",
    "start": "884279",
    "end": "891240"
  },
  {
    "start": "888000",
    "end": "888000"
  },
  {
    "text": "works so originally AP sends the firmware over to sep then it initializes",
    "start": "891240",
    "end": "898000"
  },
  {
    "text": "the decoders so has your payload manifest things like that just kind of",
    "start": "898000",
    "end": "903839"
  },
  {
    "text": "reads through those verifies the digest the certificates make sure it's actually signed correctly the root of trust of it",
    "start": "903839",
    "end": "911399"
  },
  {
    "text": "all is actually in the boot ROM so that certificate's not changing then after",
    "start": "911399",
    "end": "917160"
  },
  {
    "text": "that it goes through verifies all the different properties in the Manifest make sure that the ecid matches things",
    "start": "917160",
    "end": "923560"
  },
  {
    "text": "like that and finally if all items pass it executes the uh forw",
    "start": "923560",
    "end": "930399"
  },
  {
    "text": "itself so this is just a basic overview as you can see just gets sent from AP to",
    "start": "930399",
    "end": "936639"
  },
  {
    "text": "se goes through each stage of verification once all the basics are validated goes down to validate the",
    "start": "936639",
    "end": "943360"
  },
  {
    "text": "certificate and finally the properties against the hardware what's interesting on this is it reads the fuses of the",
    "start": "943360",
    "end": "950040"
  },
  {
    "text": "different security fuses to verify what settings are allowed in the Manifest so",
    "start": "950040",
    "end": "956079"
  },
  {
    "text": "that's kind of a intro and what's going be coming up later on that we will pass",
    "start": "956079",
    "end": "961480"
  },
  {
    "text": "it over to tar or David for the communications right so um I'm going to",
    "start": "961480",
    "end": "968880"
  },
  {
    "text": "talk a little bit about how AP and sep communicate with each other and basically this is done by a piece of",
    "start": "968880",
    "end": "974240"
  },
  {
    "text": "shared hardware between them called a secure mailbox and it has a inbox and outbox register and even though uh they",
    "start": "974240",
    "end": "981519"
  },
  {
    "text": "share it's looks a little bit like shared memory it actually behaves more like a fifo so how it works is that when",
    "start": "981519",
    "end": "988240"
  },
  {
    "text": "the wants to send a message it'll write to the inbox register of the mailbox and this generates an interrupt on the sep",
    "start": "988240",
    "end": "994839"
  },
  {
    "text": "side and the sep is waiting for that interrupt and when it gets it it will read the inbox register of the mailbox",
    "start": "994839",
    "end": "1000079"
  },
  {
    "text": "and get the message uh when the step wants to send a reply it will write a message to the outbox register which",
    "start": "1000079",
    "end": "1006360"
  },
  {
    "text": "will generate a corresponding interrupt on the AP side and the AP can will then be signal to read uh the the message",
    "start": "1006360",
    "end": "1014120"
  },
  {
    "text": "from the outbox register so uh this is a chart that's very very much like a chart",
    "start": "1014120",
    "end": "1019480"
  },
  {
    "start": "1016000",
    "end": "1016000"
  },
  {
    "text": "on one of Apple's patents and it just illustrates that the mailbox mechanism and the uh and the filtering mechanism",
    "start": "1019480",
    "end": "1026438"
  },
  {
    "text": "seem tightly interwoven especially since you know when the AP tries to read an",
    "start": "1026439",
    "end": "1031558"
  },
  {
    "text": "address that's not the outbox register um it the the filter responds to it",
    "start": "1031559",
    "end": "1037319"
  },
  {
    "text": "responds to it with what Apple calls Nona which in practice is just all",
    "start": "1037319",
    "end": "1042360"
  },
  {
    "text": "zeros so this is the actual format of a message um since the Inbox and outbox",
    "start": "1042360",
    "end": "1047438"
  },
  {
    "start": "1043000",
    "end": "1043000"
  },
  {
    "text": "registers are only both 8 bytes in size each message is only8 bytes in size and",
    "start": "1047439",
    "end": "1052440"
  },
  {
    "text": "depending on the endpoint of the message the destination endpoint of the message uh they can have different formats but",
    "start": "1052440",
    "end": "1058679"
  },
  {
    "text": "there's only one constant in the formats and that the first bite must be the inpoint index or inpoint number uh but a",
    "start": "1058679",
    "end": "1064799"
  },
  {
    "text": "lot of them are have this format that's on the screen right now and this is because uh a lot the purpose of a lot of",
    "start": "1064799",
    "end": "1071640"
  },
  {
    "text": "these endpoints are to serve as um a remote procedure call servers so because the AP usually wants the St to do",
    "start": "1071640",
    "end": "1077799"
  },
  {
    "text": "something so there's a field called tag that identifies a session ID and op code that identifies what the AP wants the SE",
    "start": "1077799",
    "end": "1084880"
  },
  {
    "text": "to do and there's a 4 by data payload at the end so a lot of this functionality",
    "start": "1084880",
    "end": "1091919"
  },
  {
    "text": "communication functionality is implemented on the AP side in the kernel uh by this kernel extension called Apple",
    "start": "1091919",
    "end": "1097640"
  },
  {
    "text": "SE manager um and it provides a generic framework for drivers to communicate with sep and it labels different drivers",
    "start": "1097640",
    "end": "1104600"
  },
  {
    "text": "to register Seth end points and um it also has its own endpoint and one of the most most important endpoints is the",
    "start": "1104600",
    "end": "1111600"
  },
  {
    "text": "control endpoint and this is a list of some of the endpoints that are there as you can see uh the Apple set manager",
    "start": "1111600",
    "end": "1118120"
  },
  {
    "start": "1113000",
    "end": "1113000"
  },
  {
    "text": "kernel extension is responsible for a lot of them but there's also other drivers like the U key store as like the",
    "start": "1118120",
    "end": "1125559"
  },
  {
    "text": "apple key uh key store which uh manages passcodes and so on that uses this",
    "start": "1125559",
    "end": "1131200"
  },
  {
    "text": "functionality and then you have some other endpoints like the stuff for the fingerprint sensor and secure",
    "start": "1131200",
    "end": "1137320"
  },
  {
    "text": "element um so control endpoint as I said it",
    "start": "1137320",
    "end": "1142799"
  },
  {
    "start": "1139000",
    "end": "1139000"
  },
  {
    "text": "handles control requests issued to the SE and it's used to uh set up request and reply out of line buffers which I",
    "start": "1142799",
    "end": "1149760"
  },
  {
    "text": "will talk about in the next slide it also has some other functionality and",
    "start": "1149760",
    "end": "1155520"
  },
  {
    "text": "like generating reading and validating nonces and also you can sort of mess",
    "start": "1155520",
    "end": "1160799"
  },
  {
    "text": "with it with seut tool which is included on production devices so if you have a jailbroken phone you can play with the",
    "start": "1160799",
    "end": "1166240"
  },
  {
    "text": "control endpoint um so here are some of the op codes that the control endpoint supports as you can",
    "start": "1166240",
    "end": "1173200"
  },
  {
    "start": "1169000",
    "end": "1169000"
  },
  {
    "text": "see it can um you can set up addresses and sizes for these out ofline buffers",
    "start": "1173200",
    "end": "1178880"
  },
  {
    "text": "so what are out of line buffers uh they're an important part of communicating uh communication between",
    "start": "1178880",
    "end": "1185320"
  },
  {
    "text": "the AP and sep this is because if your if your message size is only restricted to eight bytes then to send uh for",
    "start": "1185320",
    "end": "1192400"
  },
  {
    "text": "example even the SE firmware will take a long time so because the sep can actually access any any any um anywhere",
    "start": "1192400",
    "end": "1200320"
  },
  {
    "text": "in the uh ap's memory except for the uh memory in tz1 um the sep can just",
    "start": "1200320",
    "end": "1205880"
  },
  {
    "text": "directly read and write uh information uh to that memory so the out ofline",
    "start": "1205880",
    "end": "1212159"
  },
  {
    "text": "buffers allows the AP to give to assign certain buffers for the sep to do that",
    "start": "1212159",
    "end": "1217320"
  },
  {
    "text": "so the control endpoint is used to assign the request and reply buffers to",
    "start": "1217320",
    "end": "1222720"
  },
  {
    "text": "to any endpoint and this is done during endpoint registration so uh the this is",
    "start": "1222720",
    "end": "1228320"
  },
  {
    "start": "1224000",
    "end": "1224000"
  },
  {
    "text": "a diagram of how that flow works if there's an out ofline buffer required for a particular endpoint then the",
    "start": "1228320",
    "end": "1235120"
  },
  {
    "text": "colonel will allocate some physical memory and register that physical memory address uh by sending it over the uh ep0",
    "start": "1235120",
    "end": "1242760"
  },
  {
    "text": "for the send buffer and then also for the receive buffer so with this I with this RPC",
    "start": "1242760",
    "end": "1250720"
  },
  {
    "text": "mechanism a lot of the drivers that used to be exclusively in the iOS kernel have now been moved to the sep and um the",
    "start": "1250720",
    "end": "1258320"
  },
  {
    "text": "drivers themselves you know what used to be apple key store is now renamed Apple SE key store what used to be apple",
    "start": "1258320",
    "end": "1263960"
  },
  {
    "text": "credential manager is now named Apple SE credential manager and these these uh K",
    "start": "1263960",
    "end": "1270120"
  },
  {
    "text": "extensions are merely stubs that just call into the corresponding application in the SE using that um that uh",
    "start": "1270120",
    "end": "1278400"
  },
  {
    "text": "communication mechanism and now tarj will talk a little bit about the details of how seos",
    "start": "1278400",
    "end": "1285960"
  },
  {
    "text": "works all right thank you David um so yeah um seos uh seos is actually an",
    "start": "1287039",
    "end": "1294880"
  },
  {
    "text": "entirely self-contain operating system it's based on L4 which is the micr kernel so micro kernel is basically just",
    "start": "1294880",
    "end": "1301400"
  },
  {
    "text": "a very small kernel with a very small set of interfaces where the large major portion of the operating system is uh",
    "start": "1301400",
    "end": "1308039"
  },
  {
    "text": "implemented in user mode uh it was introduced in '93 uh a lot of the micro Kernels at the",
    "start": "1308039",
    "end": "1314679"
  },
  {
    "text": "time were pretty slow in terms of IPC and ipc's super important in micr kernels so L4 was uh sort of a milestone",
    "start": "1314679",
    "end": "1323400"
  },
  {
    "text": "at the time because it improved the the performance uh considerably uh since its",
    "start": "1323400",
    "end": "1329440"
  },
  {
    "text": "introduction there's been a lot of uh different implementations and variants",
    "start": "1329440",
    "end": "1334480"
  },
  {
    "text": "uh notably L4 embedded which was targeted for embedded devices uh so sepo",
    "start": "1334480",
    "end": "1339919"
  },
  {
    "text": "as is actually based on L4 embedded it has uh a lot of custom modifications",
    "start": "1339919",
    "end": "1345120"
  },
  {
    "text": "made by Apple uh in including it own drivers its own Services uh applications",
    "start": "1345120",
    "end": "1351679"
  },
  {
    "text": "uh it's also all these applications are combin uh compiled as Maco binaries um",
    "start": "1351679",
    "end": "1358039"
  },
  {
    "text": "and the kernel itself like I said only provides a small set of interfaces like a small set of system calls so the major",
    "start": "1358039",
    "end": "1364720"
  },
  {
    "text": "part of the operating system is implemented in these driver services and applications so this is an overview of",
    "start": "1364720",
    "end": "1371600"
  },
  {
    "start": "1369000",
    "end": "1369000"
  },
  {
    "text": "the sepo as architecture where on the top you can see all the applications uh the layer below has has",
    "start": "1371600",
    "end": "1378159"
  },
  {
    "text": "the core seos components with the drivers the services uh the the libraries Frameworks",
    "start": "1378159",
    "end": "1385080"
  },
  {
    "text": "uh also there's a there's a special task a root task called seos which has a",
    "start": "1385080",
    "end": "1390960"
  },
  {
    "text": "bootp server we'll go more into detail on all of these uh below it you have the",
    "start": "1390960",
    "end": "1396360"
  },
  {
    "text": "embedded runtime which is a library that it uses to interface with the kernel uh the kernel itself and the",
    "start": "1396360",
    "end": "1404000"
  },
  {
    "text": "hardware so the kernel basically just initializes the system uh uh brings it",
    "start": "1404000",
    "end": "1410039"
  },
  {
    "start": "1405000",
    "end": "1405000"
  },
  {
    "text": "up to a state where it becomes usable so this this includes like setting up the page table uh the kernel interface page",
    "start": "1410039",
    "end": "1416960"
  },
  {
    "text": "uh starting the timer starting the scheduler and the scheduler the kernel scheduler actually starts the initial",
    "start": "1416960",
    "end": "1422840"
  },
  {
    "text": "task the root task uh The L4 kernel also provides a very small set of system",
    "start": "1422840",
    "end": "1428360"
  },
  {
    "text": "calls um about 20 uh and these system calls are then used by the uh the root",
    "start": "1428360",
    "end": "1434520"
  },
  {
    "text": "task to create more sophisticated services like uh having a sort of a memory management system uh a way to do",
    "start": "1434520",
    "end": "1442320"
  },
  {
    "text": "do more complic complex things so if you're familiar with L4 uh these are a",
    "start": "1442320",
    "end": "1449200"
  },
  {
    "start": "1444000",
    "end": "1444000"
  },
  {
    "text": "lot of uh these system calls are very familiar uh so most of the system calls and sapos are actually the same you'll",
    "start": "1449200",
    "end": "1455880"
  },
  {
    "text": "see on on any L4 uh implementation um so these are you know",
    "start": "1455880",
    "end": "1461640"
  },
  {
    "text": "just a few um because it's like because a lot of these system calls are are powerful",
    "start": "1461640",
    "end": "1468799"
  },
  {
    "start": "1463000",
    "end": "1463000"
  },
  {
    "text": "uh uh we have lare has this concept known as preg system calls so only only",
    "start": "1468799",
    "end": "1475520"
  },
  {
    "text": "the root task in in seos the most privileged task can invoke these system",
    "start": "1475520",
    "end": "1480840"
  },
  {
    "text": "calls and this is determined by each individual system call by by checking the space address of the caller so when",
    "start": "1480840",
    "end": "1487559"
  },
  {
    "text": "you invoke a system call uh it may check it may call this is privilege space function in order to check the the",
    "start": "1487559",
    "end": "1494640"
  },
  {
    "text": "privilege and an example of this is shown here so this is The L4 space control system call uh from from The",
    "start": "1494640",
    "end": "1501880"
  },
  {
    "text": "darbat Source uh where it then checks if the caller is actually privileged so you",
    "start": "1501880",
    "end": "1507279"
  },
  {
    "text": "can't just as any application you can't just go ahead and call these you will need to do IPC to the uh the the the the",
    "start": "1507279",
    "end": "1515360"
  },
  {
    "text": "root task the seos task to be able to uh invoke the functionality you",
    "start": "1515360",
    "end": "1521320"
  },
  {
    "start": "1521000",
    "end": "1521000"
  },
  {
    "text": "need so sepos the root task is well it's kind a bit confusing because it's called",
    "start": "1521320",
    "end": "1527279"
  },
  {
    "text": "the same name but it's actually an initial process on boot and it can basically call any privileged system",
    "start": "1527279",
    "end": "1533200"
  },
  {
    "text": "call uh its job is just to start all the applications and then it also maintains",
    "start": "1533200",
    "end": "1539440"
  },
  {
    "text": "a con context structure for each task so it basically has information about the",
    "start": "1539440",
    "end": "1544559"
  },
  {
    "text": "virtual address space of all the applications their privilege level their threads Etc uh and once it's done this",
    "start": "1544559",
    "end": "1551880"
  },
  {
    "text": "it also invokes a bootstrap server so the bootstrap server provides all the services applications rely on",
    "start": "1551880",
    "end": "1559640"
  },
  {
    "text": "um so this is a chart just um illustrating the app initialization",
    "start": "1559640",
    "end": "1565000"
  },
  {
    "start": "1560000",
    "end": "1560000"
  },
  {
    "text": "process so the first in the first step it basically reads the application list from the SE fmer and each entry in this",
    "start": "1565000",
    "end": "1572000"
  },
  {
    "text": "list has information about you know how it's supposed to load so it goes through",
    "start": "1572000",
    "end": "1577120"
  },
  {
    "text": "the the step of creating a an address bace for the process it parses the headers of the Maco binary and then",
    "start": "1577120",
    "end": "1584679"
  },
  {
    "text": "loads the segments and finally it starts the thread for for for the the main",
    "start": "1584679",
    "end": "1590200"
  },
  {
    "text": "thread uh once it's done this it actually also computes the CRC of all",
    "start": "1590200",
    "end": "1595279"
  },
  {
    "text": "the all the loaded images in memory and then checks that against a CRC that's been",
    "start": "1595279",
    "end": "1601000"
  },
  {
    "text": "pre-computed uh and then if it that if that's okay then it continues to boot if not it will it will",
    "start": "1601000",
    "end": "1608279"
  },
  {
    "start": "1608000",
    "end": "1608000"
  },
  {
    "text": "fail so the application list briefly just contains a a a a list of all the",
    "start": "1608279",
    "end": "1614120"
  },
  {
    "text": "applications you know with the the virtual Base address the the module name size entry points Etc and it's located",
    "start": "1614120",
    "end": "1620720"
  },
  {
    "text": "at a fixed offset in the uh sep fare so it actually looks like this um so this",
    "start": "1620720",
    "end": "1627279"
  },
  {
    "text": "is like the raw data uh and as you can see it has names on the right sep OS sep",
    "start": "1627279",
    "end": "1633360"
  },
  {
    "text": "drivers SE services and then offsets uh where it's supposed to find us in in the",
    "start": "1633360",
    "end": "1640080"
  },
  {
    "text": "firmware so the bootstrap server is probably the most important piece in in",
    "start": "1640720",
    "end": "1646840"
  },
  {
    "start": "1641000",
    "end": "1641000"
  },
  {
    "text": "in seos it implements all the core functionality it provides uh number of tables uh with",
    "start": "1646840",
    "end": "1653919"
  },
  {
    "text": "methods supporting like system thread object management uh when I say object I",
    "start": "1653919",
    "end": "1659240"
  },
  {
    "text": "mean memory manage management so you create an object and then you map that object into the memory of the",
    "start": "1659240",
    "end": "1664480"
  },
  {
    "text": "application and that basically sets up a virtual memory mapping uh in order to communicate with the bootstap server you",
    "start": "1664480",
    "end": "1671600"
  },
  {
    "text": "use the embedded run time to call this ER RPC bootstrap server function and",
    "start": "1671600",
    "end": "1677200"
  },
  {
    "text": "that basically just gives you a handle back or a thread ID to the bootstrap server so then you're able to invoke",
    "start": "1677200",
    "end": "1683799"
  },
  {
    "text": "functions uh so for instance uh in order to create a thread so a thread create",
    "start": "1683799",
    "end": "1688880"
  },
  {
    "text": "system call is privileged so you would then call the bootstrap server in order to do that for you and it will give you",
    "start": "1688880",
    "end": "1694760"
  },
  {
    "text": "a new thread um since the bootstrap server",
    "start": "1694760",
    "end": "1700200"
  },
  {
    "text": "also implements exports a lot of different methods it also has the concept of privileged methods so only a",
    "start": "1700200",
    "end": "1708039"
  },
  {
    "text": "certain set of application can invoke these methods um examples of privileged methods are the ability to cry",
    "start": "1708039",
    "end": "1715000"
  },
  {
    "text": "information about for instance objects processes mappings Etc um and they have",
    "start": "1715000",
    "end": "1721200"
  },
  {
    "text": "a kind of interesting way of of deter of of um determining whether a process is",
    "start": "1721200",
    "end": "1726799"
  },
  {
    "text": "privileged actually if it the first four letters are uppercase then the process",
    "start": "1726799",
    "end": "1731919"
  },
  {
    "text": "is considered a privileged process so it's kind of interesting uh and in order",
    "start": "1731919",
    "end": "1737720"
  },
  {
    "text": "to check that they have a function called procast privilege so each individual function for instance this",
    "start": "1737720",
    "end": "1744320"
  },
  {
    "text": "function uh which supplies you with ACL info um will will call this function in",
    "start": "1744320",
    "end": "1751080"
  },
  {
    "text": "order to determine if the caller is privileged the cender of the the RPC request is",
    "start": "1751080",
    "end": "1758039"
  },
  {
    "text": "privileged um some functions also are very powerful so they are essentially",
    "start": "1758120",
    "end": "1764720"
  },
  {
    "text": "some functions allow you to map arbitrary phys physical memory uh so in these cases processes are assigned or",
    "start": "1764720",
    "end": "1772600"
  },
  {
    "text": "applications are assigned specific entitlements uh and and this is done by",
    "start": "1772600",
    "end": "1778000"
  },
  {
    "text": "checking a table whenever a process is launched uh so examples of this is the",
    "start": "1778000",
    "end": "1784279"
  },
  {
    "text": "SE object seos object create Fizz function and also the remap function which allows you to remap a physical uh",
    "start": "1784279",
    "end": "1792080"
  },
  {
    "text": "a virtual to physical uh mapping so this is um just a a pseud",
    "start": "1792080",
    "end": "1800080"
  },
  {
    "start": "1796000",
    "end": "1796000"
  },
  {
    "text": "code representation of the procreate function in the root task so basically",
    "start": "1800080",
    "end": "1805279"
  },
  {
    "text": "when it does the the create it will use the name it g you give it and check",
    "start": "1805279",
    "end": "1810360"
  },
  {
    "text": "against the database or a table and if it's in this table it will assign these",
    "start": "1810360",
    "end": "1815679"
  },
  {
    "text": "entitlements to that running application so in this case there are three",
    "start": "1815679",
    "end": "1820760"
  },
  {
    "text": "different uh entries ex SE the art R RTM and theb and they they're assigned",
    "start": "1820760",
    "end": "1828919"
  },
  {
    "text": "different values like two and six uh so this is basically sep drivers AR manager",
    "start": "1828919",
    "end": "1835200"
  },
  {
    "text": "IND debug um and the ements are the map",
    "start": "1835200",
    "end": "1840640"
  },
  {
    "text": "Fizz entitlement G basically gives you the ability to map physical memory and the map sap entitlement basically gives",
    "start": "1840640",
    "end": "1846960"
  },
  {
    "text": "you the ability to map a certain portion of sap memory uh besides um the bootst server",
    "start": "1846960",
    "end": "1855600"
  },
  {
    "text": "we also have drivers so all the dri drivers are hosted in their own application so all drivers are uh",
    "start": "1855600",
    "end": "1862039"
  },
  {
    "text": "implemented entirely in user mode uh you can do lowlevel driver operations",
    "start": "1862039",
    "end": "1867159"
  },
  {
    "text": "because the drivers map iio registers into the application address space uh",
    "start": "1867159",
    "end": "1872960"
  },
  {
    "text": "and applications like SE applications can in interact with these drivers through the driver API so the driver API",
    "start": "1872960",
    "end": "1880440"
  },
  {
    "start": "1880000",
    "end": "1880000"
  },
  {
    "text": "basically just interacts over RPC with the the sep driver process it doesn't talk immediately with the SE driver's",
    "start": "1880440",
    "end": "1887679"
  },
  {
    "text": "process because it doesn't have a handle instead it will look up the sepd service",
    "start": "1887679",
    "end": "1892720"
  },
  {
    "text": "with seos task and get a handle back and then he can do a driver lookup and get a a thread handle to the the actual driver",
    "start": "1892720",
    "end": "1899880"
  },
  {
    "text": "he wants um so the perhaps the most",
    "start": "1899880",
    "end": "1905039"
  },
  {
    "text": "important driver in seos is the akf driver uh presumably the Apple",
    "start": "1905039",
    "end": "1910159"
  },
  {
    "text": "Kingfisher driver and it manages the APAP endpoints uh it also handles the",
    "start": "1910159",
    "end": "1916279"
  },
  {
    "text": "control request so when David talked about out of line buffers and sending those buffer addresses to ep0 uh this is",
    "start": "1916279",
    "end": "1924240"
  },
  {
    "text": "actually what sets up that on the sep side uh sep applications can also register their own endpoints uh so they",
    "start": "1924240",
    "end": "1931559"
  },
  {
    "text": "can do that at run time as well um besides drivers there's also sep",
    "start": "1931559",
    "end": "1937360"
  },
  {
    "text": "services so sep Services is basically just leveraging the functionality of drivers and implementing their own set",
    "start": "1937360",
    "end": "1944559"
  },
  {
    "text": "of interfaces so called a service so this is like another way of exposing",
    "start": "1944559",
    "end": "1950480"
  },
  {
    "text": "more General things to Applications so examples of this are listed here the key generation service the anti replace",
    "start": "1950480",
    "end": "1956559"
  },
  {
    "text": "service Etc uh these can also be interacted with uh uh their own API so",
    "start": "1956559",
    "end": "1962840"
  },
  {
    "text": "you have a service lookup API a service call Api and it works pretty much the same way as the drivers uh where you",
    "start": "1962840",
    "end": "1970159"
  },
  {
    "start": "1965000",
    "end": "1965000"
  },
  {
    "text": "talk to seos get a handle to the service Services application and then you call",
    "start": "1970159",
    "end": "1975360"
  },
  {
    "text": "Se service lookup in order to get get the service you want and subsequently use service",
    "start": "1975360",
    "end": "1981440"
  },
  {
    "start": "1981000",
    "end": "1981000"
  },
  {
    "text": "call um finally all the applications you know they're primarily designed to",
    "start": "1981440",
    "end": "1986960"
  },
  {
    "text": "support the kernel extensions that run in iOS or perform specific operations on",
    "start": "1986960",
    "end": "1992120"
  },
  {
    "text": "behalf of those kernel extensions uh some applications are only are also only",
    "start": "1992120",
    "end": "1998360"
  },
  {
    "text": "specific to se uh a certain class of devices for instance you know uh Apple",
    "start": "1998360",
    "end": "2004120"
  },
  {
    "text": "pay uh and you saw the the bug application earlier so that's not",
    "start": "2004120",
    "end": "2010120"
  },
  {
    "text": "actually on production devices uh We've not seen that so some are exclusive to",
    "start": "2010120",
    "end": "2015760"
  },
  {
    "text": "for instance development builds so that was just like a a",
    "start": "2015760",
    "end": "2021760"
  },
  {
    "text": "introduction to seos and now we'll move on to the the more interesting part which is like how what what is the tax",
    "start": "2021760",
    "end": "2029039"
  },
  {
    "text": "surface of sepos so in terms of software it mostly comprises the methods that uh",
    "start": "2029039",
    "end": "2035840"
  },
  {
    "text": "uh we use to communicate from AP to se uh so the methods uh so these method",
    "start": "2035840",
    "end": "2041240"
  },
  {
    "text": "basically boil down to the mailbox and the shared request and reply buffers uh",
    "start": "2041240",
    "end": "2046440"
  },
  {
    "text": "in order to carry out attacks we need to we sort of assume we have colal privileges in iOS because we need to be",
    "start": "2046440",
    "end": "2053118"
  },
  {
    "text": "able to write arbitrary messages to the message to the secure",
    "start": "2053119",
    "end": "2058320"
  },
  {
    "start": "2058000",
    "end": "2058000"
  },
  {
    "text": "mailbox so every every endpoint in a in sep OS the akf endpoints is actually",
    "start": "2058320",
    "end": "2064440"
  },
  {
    "text": "considered a Target because all these endpoints uh they handle the messages we send uh so this includes all the drivers",
    "start": "2064440",
    "end": "2071358"
  },
  {
    "text": "all the applications um it does not require a corresponding driver to Reg be",
    "start": "2071359",
    "end": "2077200"
  },
  {
    "text": "registered in iOS because we can just write directly to the mailbox so we we",
    "start": "2077200",
    "end": "2082480"
  },
  {
    "text": "basically are just interested in which which akf endpoints are registered and these are the register endpoints so it's",
    "start": "2082480",
    "end": "2090720"
  },
  {
    "text": "about eight uh we have the control endpoint but we also have a lot of other endpoints and this this table also uh",
    "start": "2090720",
    "end": "2098760"
  },
  {
    "text": "shows which of the endpoints actually makes use of the OU ofline buffers so which endpoints will parse data out of",
    "start": "2098760",
    "end": "2105400"
  },
  {
    "text": "line um presumably complex Blobs of",
    "start": "2105400",
    "end": "2110720"
  },
  {
    "text": "information uh so this is just an example of an endpoint Handler so this is the SE biometric message Handler uh",
    "start": "2110720",
    "end": "2118320"
  },
  {
    "start": "2111000",
    "end": "2111000"
  },
  {
    "text": "and as you can see it's it's very complex it has a huge switch uh",
    "start": "2118320",
    "end": "2123760"
  },
  {
    "text": "statement uh with supporting a lot of up codes",
    "start": "2123760",
    "end": "2128800"
  },
  {
    "text": "so assuming we have a vulnerability for instance in one of these handlers you know how much effort do we need to spend",
    "start": "2129560",
    "end": "2136119"
  },
  {
    "text": "to exploit a separability uh so we this is basically just a standard uh way of thinking when",
    "start": "2136119",
    "end": "2143480"
  },
  {
    "text": "you exploit vulnerabilities you know it's determined by several factors the randomization of the process address",
    "start": "2143480",
    "end": "2148920"
  },
  {
    "text": "space uh any allocator Heap hardening any exploit mitigations present if you know stack cookies Etc um so the add add",
    "start": "2148920",
    "end": "2157000"
  },
  {
    "text": "based layout oap application is very static like there's no image based",
    "start": "2157000",
    "end": "2162319"
  },
  {
    "text": "randomization at all uh every application is typically based at uh",
    "start": "2162319",
    "end": "2167440"
  },
  {
    "text": "1,000 or 8,000 hex depending on whether it had as a page zero segments uh and",
    "start": "2167440",
    "end": "2172920"
  },
  {
    "text": "Page Ser segments are actually ignored by the loader so there's really no null page protection but then again you can't",
    "start": "2172920",
    "end": "2179319"
  },
  {
    "text": "really map to null page unless you have control the roof task so it's not a big deal but it's still interesting um",
    "start": "2179319",
    "end": "2188720"
  },
  {
    "text": "I think this crashed machine crushed no it's not",
    "start": "2189000",
    "end": "2198160"
  },
  {
    "text": "responding it's just working a lot oh there we go it's loading the",
    "start": "2198160",
    "end": "2204680"
  },
  {
    "start": "2202000",
    "end": "2202000"
  },
  {
    "text": "image all right so uh in terms of Stack Corruptions um we we're interested in",
    "start": "2204680",
    "end": "2211760"
  },
  {
    "text": "how the stacks are allocated and where they're put so the main thread all the the the SE applications use an embedded",
    "start": "2211760",
    "end": "2220000"
  },
  {
    "text": "an image embedded stack so this actually means that stack is in the data segment so if you have a stack recursion",
    "start": "2220000",
    "end": "2227200"
  },
  {
    "text": "vulnerability or stack buff base buffer overun you you essentially end up corrupting adjacent data",
    "start": "2227200",
    "end": "2235240"
  },
  {
    "text": "um that said additional threads will not have their Stacks in a data segment",
    "start": "2235240",
    "end": "2240400"
  },
  {
    "text": "they'll have their Stacks allocated at runtime using objects uh and objects are",
    "start": "2240400",
    "end": "2245640"
  },
  {
    "text": "actually uh padded so they're they're they're uh they're gaps between them",
    "start": "2245640",
    "end": "2251760"
  },
  {
    "text": "with empty like they're not out there's empty space between them so that will trigger a a seg fault so essentially",
    "start": "2251760",
    "end": "2258920"
  },
  {
    "text": "these Stacks have guard Pages uh but yeah um Step applications they have",
    "start": "2258920",
    "end": "2265720"
  },
  {
    "text": "stack cookies uh but obviously when you fix the value to GD the stack cookie is",
    "start": "2265720",
    "end": "2272200"
  },
  {
    "text": "not very um robust uh stack addresses",
    "start": "2272200",
    "end": "2277680"
  },
  {
    "text": "are in most cases known because as we saw here the main thread stack is inside",
    "start": "2277680",
    "end": "2283839"
  },
  {
    "text": "the image of the loaded application and the loaded application does not have randomization so you immediately know",
    "start": "2283839",
    "end": "2290640"
  },
  {
    "text": "the address of the main thread stack and so and furthermore the addresses of the other thread Stacks are also very",
    "start": "2290640",
    "end": "2297079"
  },
  {
    "text": "trivial to compute because their the memory layout is very",
    "start": "2297079",
    "end": "2302319"
  },
  {
    "start": "2302000",
    "end": "2302000"
  },
  {
    "text": "predictable uh in terms of Heap Corruptions we are interested in you know how applications allocate memory",
    "start": "2302319",
    "end": "2309160"
  },
  {
    "text": "how they dynamically uh allocate memory um and the runtime allocator in SE",
    "start": "2309160",
    "end": "2314319"
  },
  {
    "text": "applications is a k&r implementation so whenever you call malok it uses this",
    "start": "2314319",
    "end": "2319599"
  },
  {
    "text": "implementation uh this is a very simple allocator it just has a single free list where ordered by size uh and the header",
    "start": "2319599",
    "end": "2326760"
  },
  {
    "text": "has just a pointer to the next free element and the block size um the size",
    "start": "2326760",
    "end": "2332640"
  },
  {
    "text": "of the seep is actually determined on on when you start the application so it calls this Mal init function uh this",
    "start": "2332640",
    "end": "2340760"
  },
  {
    "text": "this Heap is actually non-expandable so you just give it a parameter describing the size of the Heap and then that's",
    "start": "2340760",
    "end": "2347200"
  },
  {
    "text": "your HEAP for the entire lifetime of the application uh this is just showing you",
    "start": "2347200",
    "end": "2353000"
  },
  {
    "text": "the free lists um so it's a very basic allocator um where you have used data",
    "start": "2353000",
    "end": "2359040"
  },
  {
    "text": "free data and when it's in use it still has this uh this",
    "start": "2359040",
    "end": "2364560"
  },
  {
    "text": "metadata so of of course there's no protection of Heap metadata here uh the",
    "start": "2364560",
    "end": "2369760"
  },
  {
    "text": "free list pointers then you can easily overwrite them in order to corrupt arbitary memory you can override the",
    "start": "2369760",
    "end": "2376119"
  },
  {
    "text": "block size the extend the corruption or an existing Heap corruption um more",
    "start": "2376119",
    "end": "2381240"
  },
  {
    "text": "moreover like the Malo area that are assigned to these applications are also in the data segment so every every Mal",
    "start": "2381240",
    "end": "2389319"
  },
  {
    "text": "is at a predictable address uh also the allocations are made in predictable orders so it's very easy to predict uh",
    "start": "2389319",
    "end": "2396200"
  },
  {
    "text": "where they're allocated uh finally um sepo actually does something a lot of L4",
    "start": "2396200",
    "end": "2402880"
  },
  {
    "text": "implementation does not support xn and pxn so it actually whenever a page is",
    "start": "2402880",
    "end": "2409359"
  },
  {
    "text": "not explicitly marked as executable it sets these bits in the page table entries it also sets the non-secure bit",
    "start": "2409359",
    "end": "2416400"
  },
  {
    "text": "for all pages outside the SE memory region so so this is a a mitigation summary of",
    "start": "2416400",
    "end": "2422800"
  },
  {
    "start": "2420000",
    "end": "2420000"
  },
  {
    "text": "seos um you know some in some regards it does it does offer some protection but",
    "start": "2422800",
    "end": "2428359"
  },
  {
    "text": "in most cases like address based layout randomization uh Heap metadata you know stack cookies it it does not really um",
    "start": "2428359",
    "end": "2437800"
  },
  {
    "text": "uh meet up with the the modern operating system Trends we see today so um uh Matthew will talk a bit",
    "start": "2437800",
    "end": "2446880"
  },
  {
    "text": "more about the attack Service uh in the on the hard okay yeah",
    "start": "2446880",
    "end": "2454440"
  },
  {
    "text": "so uh let's talk a little bit about attacking boot ROM you know boot ROM is",
    "start": "2455319",
    "end": "2462440"
  },
  {
    "text": "pretty interesting place but it does not have a huge attack surface there's pretty much two major spots one you have",
    "start": "2462440",
    "end": "2470680"
  },
  {
    "text": "the image for parser so you've got like standard memory corruption as well as potential logic flaws the other is",
    "start": "2470680",
    "end": "2478119"
  },
  {
    "text": "purely Hardware based attacks or some sort of combination of the two so boot",
    "start": "2478119",
    "end": "2483960"
  },
  {
    "text": "ROM itself doesn't really have very much on anti-exploit mitigations you know it's a boot ROM but it does have some",
    "start": "2483960",
    "end": "2490359"
  },
  {
    "text": "basic stuff so it's got a basic stack card um only issue though is one decent",
    "start": "2490359",
    "end": "2496079"
  },
  {
    "text": "bug and it's game over so let's talk a little bit more about attacking the image 4 parser now",
    "start": "2496079",
    "end": "2504119"
  },
  {
    "start": "2499000",
    "end": "2499000"
  },
  {
    "text": "asn1 is a really really hard thing to do right there's been multiple vones across",
    "start": "2504119",
    "end": "2509400"
  },
  {
    "text": "pretty much all of the ASN one par some pretty big ones lately now on the other",
    "start": "2509400",
    "end": "2515000"
  },
  {
    "text": "hand lib durs self as you can see is written it was designed with a very",
    "start": "2515000",
    "end": "2521680"
  },
  {
    "text": "simple methodology doesn't do copies doesn't do malic it just decodes so it's",
    "start": "2521680",
    "end": "2528240"
  },
  {
    "text": "actually really strong and props to that though all of the code around it may not",
    "start": "2528240",
    "end": "2534720"
  },
  {
    "text": "necessarily be as strong recommend do some auditing on that so the next part",
    "start": "2534720",
    "end": "2541240"
  },
  {
    "start": "2539000",
    "end": "2539000"
  },
  {
    "text": "let's talk about directly attacking Hardware you know there's a few ways in you know one you have all these",
    "start": "2541240",
    "end": "2547839"
  },
  {
    "text": "peripheral lines going to off stock you know chips so you know spy ITC art those",
    "start": "2547839",
    "end": "2555240"
  },
  {
    "text": "all have receivers that could potentially be exploited not only in boot ROM but also in the uh SE OS itself",
    "start": "2555240",
    "end": "2564400"
  },
  {
    "text": "you know you could do standard side Channel and differential power analysis if you have TR Keys uh my recommendation",
    "start": "2564400",
    "end": "2571359"
  },
  {
    "text": "if you're going to try that stick to the A7 the newer ones seem to be uh Stronger against those then finally more advanced",
    "start": "2571359",
    "end": "2579920"
  },
  {
    "text": "glitching attacks you know standard clock voltage as well as",
    "start": "2579920",
    "end": "2585440"
  },
  {
    "text": "others um so we'll talk a little bit about attacking the ram itself so while",
    "start": "2585440",
    "end": "2591280"
  },
  {
    "text": "it is encrypted the ram is not verified so if you do try doing different say",
    "start": "2591280",
    "end": "2597800"
  },
  {
    "text": "physical attacks or even something like a rammer attack uh you can you know flip",
    "start": "2597800",
    "end": "2603119"
  },
  {
    "text": "bits and RAM so that can potentially uh affect the performance or affect how the",
    "start": "2603119",
    "end": "2608559"
  },
  {
    "text": "device is running another portion is that the random part of the key",
    "start": "2608559",
    "end": "2614400"
  },
  {
    "text": "generation is actually temporarily stored in unencrypted Ram so if you're able to control that you can effectively",
    "start": "2614400",
    "end": "2621040"
  },
  {
    "text": "control how the key is generated so finally let's get a little bit more advanced if you do want to do some",
    "start": "2621040",
    "end": "2627920"
  },
  {
    "text": "interesting things you could potentially attack the fuse array itself it's one of the most invasive vectors potentially",
    "start": "2627920",
    "end": "2634880"
  },
  {
    "text": "depending on where you go um requires a lot of patience and if you're like me you're going to break a",
    "start": "2634880",
    "end": "2640040"
  },
  {
    "text": "hell of a lot of devices now you know some Advanced people probably have like nice laser setups those are expensive",
    "start": "2640040",
    "end": "2647079"
  },
  {
    "text": "hard to use you know if you are going after this the two major things I would",
    "start": "2647079",
    "end": "2652599"
  },
  {
    "text": "recommend is looking at the production mode and the security mode so why",
    "start": "2652599",
    "end": "2657960"
  },
  {
    "text": "exactly would you want to go after that JTAG so how would we necessarily",
    "start": "2657960",
    "end": "2664520"
  },
  {
    "start": "2660000",
    "end": "2660000"
  },
  {
    "text": "get to JTAG well you could say get a really big socket",
    "start": "2664520",
    "end": "2671319"
  },
  {
    "text": "and start hitting the fuse array how would we do that well there's a really",
    "start": "2671319",
    "end": "2676920"
  },
  {
    "text": "interesting pin that can be found called the fuse Source pin not 100% sure of the reason for it but seems to run right",
    "start": "2676920",
    "end": "2684280"
  },
  {
    "text": "into the fuse array though if you're trying this you wouldn't need to deal with like the CRC on the fuses as well",
    "start": "2684280",
    "end": "2692200"
  },
  {
    "text": "as this like thing called fuse ceiling now if you want to go a little bit easier attack the image for",
    "start": "2692200",
    "end": "2699200"
  },
  {
    "text": "parser now my question for the Apple people here what exactly do DC and Dro",
    "start": "2699200",
    "end": "2706839"
  },
  {
    "text": "do and on to the conclusion so sep itself SE OS was",
    "start": "2706839",
    "end": "2714839"
  },
  {
    "start": "2711000",
    "end": "2711000"
  },
  {
    "text": "designed with security in mind it's definitely very obvious they've got like mailbox interface privilege separation",
    "start": "2714839",
    "end": "2722240"
  },
  {
    "text": "now the OS itself was designed with some lacks of or lacking",
    "start": "2722240",
    "end": "2729680"
  },
  {
    "text": "some basic anti-exploit mitigations things that you know most os's have had for a long time you know no memory",
    "start": "2729680",
    "end": "2735520"
  },
  {
    "text": "layout no you know static sack guards things like that and the actual",
    "start": "2735520",
    "end": "2740920"
  },
  {
    "text": "applications in there have a pretty big attack surface so while the overall",
    "start": "2740920",
    "end": "2746920"
  },
  {
    "text": "attack surface is small these applications present some interesting targets especially the secure bio that",
    "start": "2746920",
    "end": "2753280"
  },
  {
    "text": "we showed earlier finally more on the hardware side now the actual Hardware itself is a",
    "start": "2753280",
    "end": "2760280"
  },
  {
    "text": "light years ahead of any of the competitors I've never seen something so",
    "start": "2760280",
    "end": "2766480"
  },
  {
    "text": "so Advanced it's like the hardware filter inline encrypted RAM and generally a really small attack surface",
    "start": "2766480",
    "end": "2773480"
  },
  {
    "text": "so I've got to give props to the Apple Hardware team you know they did an awesome job and they really should talk",
    "start": "2773480",
    "end": "2779640"
  },
  {
    "text": "more about it because that's like some of the coolest stuff I've ever seen now",
    "start": "2779640",
    "end": "2785200"
  },
  {
    "text": "while they did do a really good job there are some weaknesses probably due to cost and battery life but uh the",
    "start": "2785200",
    "end": "2792880"
  },
  {
    "text": "weaknesses are it does have a shared PLL and shared power manager considering the",
    "start": "2792880",
    "end": "2798079"
  },
  {
    "text": "security fusing is in the power manager may not be the best thing to share you know they have this interesting fuse",
    "start": "2798079",
    "end": "2804599"
  },
  {
    "text": "Source pin running on the sock probably should re-evaluate that and finally the",
    "start": "2804599",
    "end": "2810079"
  },
  {
    "text": "demotion functionality does seem kind of dangerous why exactly does JTAG over",
    "start": "2810079",
    "end": "2816280"
  },
  {
    "text": "lightning even exists and in the end want to address",
    "start": "2816280",
    "end": "2822240"
  },
  {
    "text": "one thing before saying things the white elephant in the room how exactly did we",
    "start": "2822240",
    "end": "2827359"
  },
  {
    "text": "get in well good to ask us next time we talk so and thank you to Ryan Malone",
    "start": "2827359",
    "end": "2835680"
  },
  {
    "text": "Daniel borka and our Anonymous reviewers and we have some bonus slides",
    "start": "2835680",
    "end": "2841559"
  },
  {
    "text": "but those will just be in uh uh slides online so and we're done oh and thank",
    "start": "2841559",
    "end": "2847240"
  },
  {
    "text": "you for the to the Apple team for a really interesting",
    "start": "2847240",
    "end": "2851280"
  },
  {
    "text": "Target",
    "start": "2857480",
    "end": "2860480"
  }
]