[
  {
    "start": "0",
    "end": "50000"
  },
  {
    "text": "good morning welcome to nonce disrespecting adversaries practical",
    "start": "0",
    "end": "5609"
  },
  {
    "text": "forgery attacks on GCM and TCL's in the South Seas IG room with speakers sean",
    "start": "5609",
    "end": "13019"
  },
  {
    "text": "devlin hannah burke and aaron zelner before we begin a few brief notes stop",
    "start": "13019",
    "end": "19680"
  },
  {
    "text": "by the business hall located in Bayside a B during the day and for the Welcome Reception",
    "start": "19680",
    "end": "24689"
  },
  {
    "text": "from 5:30 to 7:00 o'clock tonight the blackhat Arsenal is on the palm foyer on",
    "start": "24689",
    "end": "30269"
  },
  {
    "text": "level 3 join us for a pony Awards in Mandalay Bay B CD at 6:30 p.m.",
    "start": "30269",
    "end": "37760"
  },
  {
    "text": "thanks for putting your phone on vibrate it makes it easier for the rest of us to ignore the ringing while you wait for",
    "start": "37760",
    "end": "44250"
  },
  {
    "text": "your voice to be able to pick it up like that we thank you and welcome our speakers",
    "start": "44250",
    "end": "50239"
  },
  {
    "start": "50000",
    "end": "110000"
  },
  {
    "text": "hi guys I'm Sean yeah",
    "start": "50989",
    "end": "57230"
  },
  {
    "text": "said he get started I'm gonna load up our slide deck I don't have it with me unfortunately but I have a pretty good",
    "start": "57230",
    "end": "63149"
  },
  {
    "text": "idea about how we can actually get it here so we can get started I",
    "start": "63149",
    "end": "69710"
  },
  {
    "text": "gotta say there's about a 20% chance this will work so ok it worked",
    "start": "73280",
    "end": "79759"
  },
  {
    "text": "ok ok so what actually happened there is a we targeted a vulnerable domain and",
    "start": "79759",
    "end": "85680"
  },
  {
    "text": "actually injected our entire slide deck into it and we're just going to run the talk this way so",
    "start": "85680",
    "end": "92180"
  },
  {
    "text": "[Applause] so with that I'll turn it over to uh",
    "start": "98350",
    "end": "104410"
  },
  {
    "text": "yeah I can't scream",
    "start": "104410",
    "end": "109050"
  },
  {
    "start": "110000",
    "end": "140000"
  },
  {
    "text": "yeah okay so we want to talk about TLS encryption and especially the symmetric",
    "start": "111720",
    "end": "119320"
  },
  {
    "text": "part of TLS encryption so very roughly how the TLS protocol works is that first",
    "start": "119320",
    "end": "124660"
  },
  {
    "text": "we have some kind of key exchange and then we get a shared key between the client and the server and then we use",
    "start": "124660",
    "end": "132760"
  },
  {
    "text": "some symmetric encryption and authentication and this second part is the one where you want to look at today",
    "start": "132760",
    "end": "139960"
  },
  {
    "text": "there were historically three ways to do this symmetric encryption one is using",
    "start": "139960",
    "end": "146530"
  },
  {
    "start": "140000",
    "end": "235000"
  },
  {
    "text": "the CBC mode in combination with H Mac one is rc4 and one is 3 cm and there's a",
    "start": "146530",
    "end": "152890"
  },
  {
    "text": "new one chapter xx and poly 1305 but this has only been standardized a couple",
    "start": "152890",
    "end": "158530"
  },
  {
    "text": "of weeks ago so that's not widely available yet and",
    "start": "158530",
    "end": "164190"
  },
  {
    "text": "the CBC based modes had a number of attacks in the past years there was",
    "start": "164190",
    "end": "169989"
  },
  {
    "text": "already in 2002 the first version of a padding Oracle and then many more",
    "start": "169989",
    "end": "175330"
  },
  {
    "text": "attacks that were similar and this is going on until this year we",
    "start": "175330",
    "end": "181900"
  },
  {
    "text": "had new attacks on these modes and there are basically two design problems in these CBC modes",
    "start": "181900",
    "end": "189520"
  },
  {
    "text": "one is that they are using a so called implicit initialization vector which has",
    "start": "189520",
    "end": "194739"
  },
  {
    "text": "been changed into es 1.1 but for a long time most people didn't used here as 1.1",
    "start": "194739",
    "end": "202110"
  },
  {
    "text": "then in the very old SSL version 3 the content of the padding was undefined",
    "start": "202110",
    "end": "207280"
  },
  {
    "text": "which enabled the poodle attack and our TLS verbs use something that's called",
    "start": "207280",
    "end": "213430"
  },
  {
    "text": "Mac then encrypt or more precisely Mac then pet and encrypt and this allowed the text because if an attacker can",
    "start": "213430",
    "end": "220150"
  },
  {
    "text": "detect whether the padding is wrong or whether the Mac is wrong that allows them to decrypt parts of the content and",
    "start": "220150",
    "end": "227320"
  },
  {
    "text": "there's an extension to change that to encrypt-then-mac but that's not really used in the large",
    "start": "227320",
    "end": "234020"
  },
  {
    "text": "and I like to show this this quote from the",
    "start": "234020",
    "end": "239510"
  },
  {
    "start": "235000",
    "end": "300000"
  },
  {
    "text": "TLS 1.2 standard because it already kind of predicts the attacks that later",
    "start": "239510",
    "end": "245090"
  },
  {
    "text": "happened so it says there's this leaves a small tiny side-channel but it is not believed to",
    "start": "245090",
    "end": "252170"
  },
  {
    "text": "be large enough to be exploitable and it turned out it was exploitable that was the lucky 13 attack which really was",
    "start": "252170",
    "end": "259700"
  },
  {
    "text": "kind of a big mess so there was last year an attack where the",
    "start": "259700",
    "end": "265160"
  },
  {
    "text": "Amazon had their own TLS implementation and they tried to fix this and it turned",
    "start": "265160",
    "end": "270290"
  },
  {
    "text": "out the fix didn't really work and there are a number of implementations to just say we won't fix this because the fix is",
    "start": "270290",
    "end": "276740"
  },
  {
    "text": "so bothersome we're dressed ignore it and try to move to the new cipher modes and open SSL which was one of our",
    "start": "276740",
    "end": "285350"
  },
  {
    "text": "co-authors who found this you're right so no offski that with the fix for lucky 13 up messes I'll introduce another",
    "start": "285350",
    "end": "292070"
  },
  {
    "text": "padding Oracle so this also if you see motes while you can implement them in a secure way it's very difficult and",
    "start": "292070",
    "end": "299390"
  },
  {
    "text": "therefore we kind of want to get rid of them and then there's one alternative rc4 where like after lucky 13 a lot of",
    "start": "299390",
    "end": "308630"
  },
  {
    "start": "300000",
    "end": "345000"
  },
  {
    "text": "people switch to RC 4 but this has weaknesses as well so RC 4",
    "start": "308630",
    "end": "313850"
  },
  {
    "text": "is a stream cipher and the problem there is that it has certain biases that for certain parts of the key stream it's",
    "start": "313850",
    "end": "320450"
  },
  {
    "text": "more likely that it's a one than a zero and this can be attacked it has been known for a long time but in 2013 there",
    "start": "320450",
    "end": "328970"
  },
  {
    "text": "was the first practical attack on RC 4 in TLS and since then there have been many improvements of these attacks so RC",
    "start": "328970",
    "end": "335840"
  },
  {
    "text": "4 also isn't a good alternative and there's also no an RFC saying that you",
    "start": "335840",
    "end": "341389"
  },
  {
    "text": "should just never use rc4 anymore so this leaves us with GCM",
    "start": "341389",
    "end": "348190"
  },
  {
    "start": "345000",
    "end": "425000"
  },
  {
    "text": "GCM stands for guy walk counter mode and this user used with AES it is",
    "start": "348190",
    "end": "354110"
  },
  {
    "text": "theoretically possible to use it with other ciphers but basically nobody does that and it's only available until s 1.2",
    "start": "354110",
    "end": "362360"
  },
  {
    "text": "which turned out to be like when attacks were found a lot of software didn't",
    "start": "362360",
    "end": "368720"
  },
  {
    "text": "support TLS 1.2 yet but it's generally I think it consensus",
    "start": "368720",
    "end": "374659"
  },
  {
    "text": "today in the cryptographic community that this is the only mode that's really safe and here's a quote from Adam",
    "start": "374659",
    "end": "381379"
  },
  {
    "text": "Langley from Google where he clearly states that that like all the other modes are kind of cryptographic key",
    "start": "381379",
    "end": "387409"
  },
  {
    "text": "problem so yeah we thought we should have a closer look at GCM because if that's",
    "start": "387409",
    "end": "394310"
  },
  {
    "text": "everyone's moving to GCM so how secure is that so GCM is the most entertaining",
    "start": "394310",
    "end": "400580"
  },
  {
    "text": "encryption mode which the basic idea behind that is that there were a lot of",
    "start": "400580",
    "end": "407229"
  },
  {
    "text": "vulnerabilities when people try to combine encryption and authentication so",
    "start": "407229",
    "end": "412250"
  },
  {
    "text": "the idea is to have one mode that does just both things combined standardized and that's called an authenticated",
    "start": "412250",
    "end": "418849"
  },
  {
    "text": "encryption mode or more precisely indicated encrypt with additional data",
    "start": "418849",
    "end": "424719"
  },
  {
    "start": "425000",
    "end": "475000"
  },
  {
    "text": "yeah but it turns out GCM is not very popular",
    "start": "425919",
    "end": "431060"
  },
  {
    "text": "among cryptographers so I have a number of quotes here where newest Fergusson commented on the GCM standard do not use",
    "start": "431060",
    "end": "438169"
  },
  {
    "text": "PCM so you're using one of the other modes we then there there was a paper from",
    "start": "438169",
    "end": "445400"
  },
  {
    "text": "Amelia Kasper and Peter Schneider who they wrote a timing safe implementation of GCM and concluded that most other",
    "start": "445400",
    "end": "451969"
  },
  {
    "text": "implementations are not timing safe atom language says that yeah it so",
    "start": "451969",
    "end": "458690"
  },
  {
    "text": "easily leads to timing side channels he doesn't want to use it so",
    "start": "458690",
    "end": "465339"
  },
  {
    "text": "yeah bottom line is everybody uses PCM but it seems nobody really likes it",
    "start": "465460",
    "end": "472659"
  },
  {
    "text": "yeah so and I wondered why that's the case and then I found this quote also",
    "start": "472659",
    "end": "480740"
  },
  {
    "start": "475000",
    "end": "610000"
  },
  {
    "text": "from Adam Langley where he is specifically commented on GCM in TLS races that there's a potential problem",
    "start": "480740",
    "end": "488479"
  },
  {
    "text": "that with the so called nonce value so he's at best an 8 byte value that",
    "start": "488479",
    "end": "496120"
  },
  {
    "text": "basically the implementation has to change and to choose and the only safe",
    "start": "496120",
    "end": "502350"
  },
  {
    "text": "way to do that is to use a counter and there may be implementations that choose",
    "start": "502350",
    "end": "507540"
  },
  {
    "text": "the set random or do something else that may not be secure and Adam Langley's",
    "start": "507540",
    "end": "513780"
  },
  {
    "text": "camp TLX atop 200,000 and didn't find any implementations doing that so what",
    "start": "513780",
    "end": "520919"
  },
  {
    "text": "we did then is like we scanned the whole internet for this",
    "start": "520920",
    "end": "526070"
  },
  {
    "text": "yeah so what if you here so GCM needs a nonce",
    "start": "528770",
    "end": "534180"
  },
  {
    "text": "value which stands for number used once and",
    "start": "534180",
    "end": "539240"
  },
  {
    "text": "that is a requirement for the security of the algorithm so if one uses the same",
    "start": "539240",
    "end": "544770"
  },
  {
    "text": "knowns where you try it then it's no longer in months and then you have",
    "start": "544770",
    "end": "550200"
  },
  {
    "text": "attacks and the nonce value until s is 8 bytes large and I said earlier it's safe",
    "start": "550200",
    "end": "558930"
  },
  {
    "text": "to use a counter so you could just say we use a zero and for next encryption we use one and the true and so on",
    "start": "558930",
    "end": "566780"
  },
  {
    "text": "if you use it a random value then it's not so clear whether that's secure so of",
    "start": "566780",
    "end": "573420"
  },
  {
    "text": "course if it's random it can randomly generate the same value again if you try to calculate how lucky that",
    "start": "573420",
    "end": "580770"
  },
  {
    "text": "is then you need several gigabytes of data or even terabytes of data till this",
    "start": "580770",
    "end": "585900"
  },
  {
    "text": "becomes an issue but even though it's not idea like you don't want this risk",
    "start": "585900",
    "end": "591540"
  },
  {
    "text": "even for connections using several gigabytes so we ended up saying okay if the nonce",
    "start": "591540",
    "end": "598470"
  },
  {
    "text": "value gets just repeated that's clearly a security vulnerability if the nonce value is chosen at random we say okay",
    "start": "598470",
    "end": "605520"
  },
  {
    "text": "that's still kind of a low-risk security vulnerability",
    "start": "605520",
    "end": "611090"
  },
  {
    "start": "610000",
    "end": "665000"
  },
  {
    "text": "and this is what the TLS specification says about this non-value so it tells",
    "start": "612320",
    "end": "619410"
  },
  {
    "text": "the implementer of Els library each value of the nonce must be distinct for",
    "start": "619410",
    "end": "625080"
  },
  {
    "text": "each invocation of the encryption but it doesn't really tell how to do that so",
    "start": "625080",
    "end": "631260"
  },
  {
    "text": "what I told you that just use the counter and that's secure that's not written down in the spec and it's not",
    "start": "631260",
    "end": "637990"
  },
  {
    "text": "written down that randomly you might be risky it says however that you may use the sequence number from the TLS record",
    "start": "637990",
    "end": "646649"
  },
  {
    "text": "which is a reasonable recommendation and it's kind of unclear why they didn't say",
    "start": "646649",
    "end": "652060"
  },
  {
    "text": "this is simply a must because then these issues wouldn't happen and then you could just skip sending the nonce",
    "start": "652060",
    "end": "657940"
  },
  {
    "text": "because then the TLS record number the implementation already knows",
    "start": "657940",
    "end": "664709"
  },
  {
    "start": "665000",
    "end": "695000"
  },
  {
    "text": "so yeah so we scan the internet for this issue we wrote a little patch to open",
    "start": "666330",
    "end": "673420"
  },
  {
    "text": "SSL that it would then it would write there it would print the nonce value of",
    "start": "673420",
    "end": "679750"
  },
  {
    "text": "a connection and we found a a bit less than 200 hosts that had a repeating",
    "start": "679750",
    "end": "686350"
  },
  {
    "text": "non-stressed by doing ten connections and we found around",
    "start": "686350",
    "end": "692100"
  },
  {
    "text": "70,000 hosts with a random nonce and yeah then the next drop was trying",
    "start": "692100",
    "end": "700600"
  },
  {
    "start": "695000",
    "end": "790000"
  },
  {
    "text": "to track down which devices are responsible for this so we had a bunch of information that we could look at we",
    "start": "700600",
    "end": "706750"
  },
  {
    "text": "had the certificate information we had the website and we could look at the",
    "start": "706750",
    "end": "711940"
  },
  {
    "text": "HTTP server header a problem with that is that quite often you see a server",
    "start": "711940",
    "end": "717250"
  },
  {
    "text": "header but it's not really the device you're talking to because there may be a server and there's a load balancer in",
    "start": "717250",
    "end": "722829"
  },
  {
    "text": "front of it and the load balancer is doing the TLS termination and you have no way of knowing which kind of device",
    "start": "722829",
    "end": "729550"
  },
  {
    "text": "that is and trying to contact people saying hey your website has a security",
    "start": "729550",
    "end": "735250"
  },
  {
    "text": "issue that my experience hardly works so people just and don't answer you means",
    "start": "735250",
    "end": "740290"
  },
  {
    "text": "if you tell them about security issues so what we ended up doing is trying to find like vulnerable hosts where we kind",
    "start": "740290",
    "end": "747310"
  },
  {
    "text": "of knew someone who may know someone at this company and thereby we were able to track down a few of them",
    "start": "747310",
    "end": "755310"
  },
  {
    "text": "so then for the random looking values a lot of them seem to come from check",
    "start": "755520",
    "end": "762400"
  },
  {
    "text": "point based on their server header but it turns out these values were not really random so a checkpoint then told",
    "start": "762400",
    "end": "769770"
  },
  {
    "text": "us that they are using a linear feedback shift register which also goes through",
    "start": "769770",
    "end": "775500"
  },
  {
    "text": "the whole space of the 64-bit months so it's equally secure as a counter but",
    "start": "775500",
    "end": "780690"
  },
  {
    "text": "this was a bit surprising and it was also then we had to adapt our scanning tools that they would like not they they",
    "start": "780690",
    "end": "788130"
  },
  {
    "text": "would filter out these areas our values then for the public advances that are",
    "start": "788130",
    "end": "796680"
  },
  {
    "start": "790000",
    "end": "830000"
  },
  {
    "text": "the severe security vulnerability we were able to identify two vendors one",
    "start": "796680",
    "end": "802279"
  },
  {
    "text": "devices from radware which use a chip from cavion and they have received an",
    "start": "802279",
    "end": "809700"
  },
  {
    "text": "update now and there are several pages from Visa Europe we didn't answer our",
    "start": "809700",
    "end": "816209"
  },
  {
    "text": "initial emails but then as Technica wrote about it and then they contacted us",
    "start": "816209",
    "end": "822500"
  },
  {
    "text": "but we have not disclosed the vendor yet because we're still kind of in process with them -",
    "start": "822500",
    "end": "828320"
  },
  {
    "text": "for the disclosure process [Music] yeah and the devices with random nonces",
    "start": "828320",
    "end": "836070"
  },
  {
    "start": "830000",
    "end": "860000"
  },
  {
    "text": "a lot of them came from a 10 and some of them were IBM Lotus Domino and",
    "start": "836070",
    "end": "841950"
  },
  {
    "text": "both miners published updates so yeah if you have one of these you probably want to install an app tip date and also a",
    "start": "841950",
    "end": "849630"
  },
  {
    "text": "lot of them came from a company called sign for it's from China and they seem to produce like cheap DSL routers and",
    "start": "849630",
    "end": "857339"
  },
  {
    "text": "things like that but we got no response from them",
    "start": "857339",
    "end": "862190"
  },
  {
    "start": "860000",
    "end": "880000"
  },
  {
    "text": "but based on the data we see we're pretty convinced that there are more",
    "start": "863329",
    "end": "868440"
  },
  {
    "text": "devices out there that have this vulnerability so we recommend if if you're doing",
    "start": "868440",
    "end": "874790"
  },
  {
    "text": "testing of TLS devices or if you're a pen tester that you kind of have this on",
    "start": "874790",
    "end": "880079"
  },
  {
    "start": "880000",
    "end": "990000"
  },
  {
    "text": "your radar and go god for this yeah",
    "start": "880079",
    "end": "885200"
  },
  {
    "text": "and this was something that that I spend a bit of time trying to understand",
    "start": "885200",
    "end": "891240"
  },
  {
    "text": "what's going on here this was a scene with the Radwell device but also with",
    "start": "891240",
    "end": "896490"
  },
  {
    "text": "another device were I had a phone call that the owners of this device and they told me a vendor name but I wasn't",
    "start": "896490",
    "end": "902470"
  },
  {
    "text": "really sure if that was a reliable information and we're seeing here that there are two values and they look like",
    "start": "902470",
    "end": "908950"
  },
  {
    "text": "an initialized memory and I got the information that this may be",
    "start": "908950",
    "end": "914470"
  },
  {
    "text": "an open SSL 101 J and I looked into that code and",
    "start": "914470",
    "end": "920440"
  },
  {
    "text": "found okay or this non so what open SSL does is it",
    "start": "920440",
    "end": "927010"
  },
  {
    "text": "uses a counter but it starts with the random value and this code here",
    "start": "927010",
    "end": "933390"
  },
  {
    "text": "is not checking whether the random very random number generator is failing so",
    "start": "933390",
    "end": "939400"
  },
  {
    "text": "what I assume that's happening here is that they use maybe some kind of hardware",
    "start": "939400",
    "end": "946330"
  },
  {
    "text": "random number generator that sometimes produces failures and then returns an error and open SSL is not properly",
    "start": "946330",
    "end": "952720"
  },
  {
    "text": "checking for this this has been fixed earlier last year but open SSL back then",
    "start": "952720",
    "end": "959230"
  },
  {
    "text": "did not consider it as a security issue and if I if I'm changed this code to",
    "start": "959230",
    "end": "966250"
  },
  {
    "text": "return this error then I could see a similar behavior but",
    "start": "966250",
    "end": "971950"
  },
  {
    "text": "not the same behavior I saw it's sending out these two identical monsters which look very similar to the values we had",
    "start": "971950",
    "end": "978970"
  },
  {
    "text": "on the slide before but then the connection terminated due to some kind of error so",
    "start": "978970",
    "end": "984030"
  },
  {
    "text": "it's not entirely sure what's going on there but there we kind of try to track down why that was the case",
    "start": "984030",
    "end": "991890"
  },
  {
    "start": "990000",
    "end": "1055000"
  },
  {
    "text": "okay and now I turn on what was shown for the attack description yeah so so",
    "start": "991890",
    "end": "998860"
  },
  {
    "text": "we've been hearing a lot about GCM how it requires a nonce a unique nonce for",
    "start": "998860",
    "end": "1004380"
  },
  {
    "text": "safe usage so we're gonna dig a little bit into why that is so during the the",
    "start": "1004380",
    "end": "1009720"
  },
  {
    "text": "new standardization process of GCM they requested comments from you know a",
    "start": "1009720",
    "end": "1015210"
  },
  {
    "text": "bunch of different cryptographers we saw some comments from Niels Ferguson earlier basically saying don't use GCM",
    "start": "1015210",
    "end": "1020960"
  },
  {
    "text": "another set of comments came from Antoine Joo and he basically",
    "start": "1020960",
    "end": "1028550"
  },
  {
    "text": "showed how a in the case of non-serious under GCM it's a catastrophic failure that allows",
    "start": "1028820",
    "end": "1036220"
  },
  {
    "text": "the attacker to forge messages arbitrarily and since the encryption component of GCM is",
    "start": "1036220",
    "end": "1043649"
  },
  {
    "text": "you know just a stream cipher mode essentially the attacker can",
    "start": "1043649",
    "end": "1049260"
  },
  {
    "text": "modify messages with high granularity so we're gonna dig into a little bit of",
    "start": "1049260",
    "end": "1056289"
  },
  {
    "start": "1055000",
    "end": "1080000"
  },
  {
    "text": "the specifics here so a little bit of background on GCM",
    "start": "1056289",
    "end": "1063299"
  },
  {
    "text": "as tena was saying earlier GCM is a mode that's basically parama tries via block",
    "start": "1063299",
    "end": "1069610"
  },
  {
    "text": "ciphers so most people use AES and the users inputs to",
    "start": "1069610",
    "end": "1076230"
  },
  {
    "text": "to an instance of GCM is basically going to be K this encryption key",
    "start": "1076230",
    "end": "1083639"
  },
  {
    "text": "now of interest to us is a derived value H H is going to be basically the",
    "start": "1083789",
    "end": "1091570"
  },
  {
    "text": "authentication sub key that is going to be used to protect messages from forgeries now H is not a user input H is",
    "start": "1091570",
    "end": "1099159"
  },
  {
    "text": "a derived value that we get by basically using our encryption encryption key to",
    "start": "1099159",
    "end": "1105090"
  },
  {
    "text": "encrypt a block of zeros under the block cipher so just keep in mind that H is",
    "start": "1105090",
    "end": "1110260"
  },
  {
    "text": "gonna be our target that's where we're trying to get back and then at the per encryption level the users",
    "start": "1110260",
    "end": "1117130"
  },
  {
    "text": "other input is going to be this nots we need to remember that's a value that we want never to repeat",
    "start": "1117130",
    "end": "1123600"
  },
  {
    "start": "1120000",
    "end": "1185000"
  },
  {
    "text": "so GCM authentication how does that work well the high-level view is basically",
    "start": "1124169",
    "end": "1131850"
  },
  {
    "text": "actually so if you could actually look at an implementation of GCM what you're actually going to see is a bunch of you",
    "start": "1132480",
    "end": "1139299"
  },
  {
    "text": "know XOR operations and table lookups and stuff like that but what's going on",
    "start": "1139299",
    "end": "1144309"
  },
  {
    "text": "at the high level conceptually is we're gonna sort of format our message as a polynomial which",
    "start": "1144309",
    "end": "1150130"
  },
  {
    "text": "I'll get into a little bit how that works in a second here we're going to",
    "start": "1150130",
    "end": "1157019"
  },
  {
    "text": "sort of mask the polynomial with a derived value from the nonce this is",
    "start": "1157019",
    "end": "1163600"
  },
  {
    "text": "basically gonna be a product of the our encryption key and depor encryption nonce so the same way we got H by",
    "start": "1163600",
    "end": "1169900"
  },
  {
    "text": "encrypting a block of zeros we're gonna get this mask by encrypting the nonce essentially so once we have this polynomial we're",
    "start": "1169900",
    "end": "1177039"
  },
  {
    "text": "gonna you know plug in H and then we're gonna evaluate it and the output is gonna be our authentication tag",
    "start": "1177039",
    "end": "1185039"
  },
  {
    "start": "1185000",
    "end": "1240000"
  },
  {
    "text": "so that's kind of the high-level view of the algorithm the high-level attackers view is gonna take",
    "start": "1185039",
    "end": "1192039"
  },
  {
    "text": "advantage of this polynomial structure so what we're gonna do is we're gonna try to tweak that polynomial",
    "start": "1192039",
    "end": "1198240"
  },
  {
    "text": "so we can find a polynomial polynomial that has h as a root then we're gonna",
    "start": "1198240",
    "end": "1203679"
  },
  {
    "text": "factor that polynomial which you know fortunately we have very efficient algorithms for factoring polynomials in",
    "start": "1203679",
    "end": "1210309"
  },
  {
    "text": "the domain that we're working in here and once we factor it we'll have the roots",
    "start": "1210309",
    "end": "1216700"
  },
  {
    "text": "of the polynomial and H is guaranteed to be one of those roots typically the",
    "start": "1216700",
    "end": "1223140"
  },
  {
    "text": "the number of roots is going to be a pretty short it's it's somewhat berries",
    "start": "1223140",
    "end": "1230169"
  },
  {
    "text": "with message length if you have a very long message you could have a lot of roots but a lot of the messages we're gonna be",
    "start": "1230169",
    "end": "1235750"
  },
  {
    "text": "dealing with they're gonna be pretty short and so we're gonna expect only to find a few most of the time",
    "start": "1235750",
    "end": "1241289"
  },
  {
    "start": "1240000",
    "end": "1420000"
  },
  {
    "text": "okay so let's get a little bit lower level here so for concreteness let's just consider a",
    "start": "1241289",
    "end": "1248590"
  },
  {
    "text": "message that has no additional authenticated data recall that GCM is an AE ad mode so you can",
    "start": "1248590",
    "end": "1256450"
  },
  {
    "text": "authenticate additional data past the plaintext and/or the cipher text rather",
    "start": "1256450",
    "end": "1262110"
  },
  {
    "text": "so we'll consider our message that has no authenticated data and one block of ciphertext so if we were to",
    "start": "1262110",
    "end": "1270419"
  },
  {
    "text": "format that as a polynomial as I was saying earlier so basically our one block of ciphertext that's going to be C",
    "start": "1270419",
    "end": "1277750"
  },
  {
    "text": "sub 1 there that's going to be the coefficient of x squared",
    "start": "1277750",
    "end": "1283350"
  },
  {
    "text": "next to that we have this coefficient L and that's going to",
    "start": "1283890",
    "end": "1290620"
  },
  {
    "text": "be basically just another 128-bit block that encodes the message length so that's going to encode both",
    "start": "1290620",
    "end": "1297100"
  },
  {
    "text": "the length of the ciphertext and the the authenticated data and then the",
    "start": "1297100",
    "end": "1302570"
  },
  {
    "text": "constant-coefficient we're gonna get just by that non strived value that we're gonna use to mask the polynomial",
    "start": "1302570",
    "end": "1308270"
  },
  {
    "text": "so recall that that's just going to be the encryption of the nonce I got that highlighted in red there to emphasize",
    "start": "1308270",
    "end": "1315350"
  },
  {
    "text": "the fact that this is a secret value so the attacker doesn't know what the mask is that's going to be important uh in a",
    "start": "1315350",
    "end": "1322100"
  },
  {
    "text": "little bit here and so once we have this polynomial we just",
    "start": "1322100",
    "end": "1328130"
  },
  {
    "text": "plug in H and so we have f of H equals T and that's gonna be your authentication tag so the receiver is gonna repeat the",
    "start": "1328130",
    "end": "1336740"
  },
  {
    "text": "same process compare what he gets with the tag the sender gives him and if they match",
    "start": "1336740",
    "end": "1344120"
  },
  {
    "text": "then it's gonna be an authentic message okay so",
    "start": "1344120",
    "end": "1349510"
  },
  {
    "text": "the attacker is gonna use some algebra to kind of fiddle with this polynomial and get to a place that's a little bit more",
    "start": "1349510",
    "end": "1357020"
  },
  {
    "text": "advantageous so the attacker you know can see messages on the wire so",
    "start": "1357020",
    "end": "1363400"
  },
  {
    "text": "most of the values we're gonna be working with here public the ciphertext is public the length of the message is",
    "start": "1363400",
    "end": "1369590"
  },
  {
    "text": "going to be public obviously and the authentication tag is gonna be public so the the attacker can pull",
    "start": "1369590",
    "end": "1375590"
  },
  {
    "text": "these things off the wire the mask is still gonna be secret but everything else we have so we're going",
    "start": "1375590",
    "end": "1381830"
  },
  {
    "text": "to take our polynomial F and we're gonna tweak it a little bit by subtracting the authentication tag now what that's going",
    "start": "1381830",
    "end": "1388100"
  },
  {
    "text": "to give us recall that we had f of H equals T so our new polynomial F prime",
    "start": "1388100",
    "end": "1395690"
  },
  {
    "text": "of H since we've subtracted T is going to be zero so what that means is that H",
    "start": "1395690",
    "end": "1401059"
  },
  {
    "text": "is going to be a root of F prime and recall that we have efficient algorithms",
    "start": "1401059",
    "end": "1406400"
  },
  {
    "text": "for finding the roots of a polynomial now the problem here is that the attacker doesn't know F prime",
    "start": "1406400",
    "end": "1414100"
  },
  {
    "text": "conceptually we know that there you know what it looks like but we don't actually know what this mask value is",
    "start": "1414100",
    "end": "1420640"
  },
  {
    "start": "1420000",
    "end": "1485000"
  },
  {
    "text": "so this is where a nonce reuse is going to come in so suppose we have two different messages encrypted under the",
    "start": "1420640",
    "end": "1427070"
  },
  {
    "text": "same nonce here so I've got those listed as f sub 1 Prime and F sub 2 Prime",
    "start": "1427070",
    "end": "1433160"
  },
  {
    "text": "so there we're gonna you know stick with our example of one black messages so we",
    "start": "1433160",
    "end": "1438980"
  },
  {
    "text": "have one block of ciphertext there and then the length values and then two different",
    "start": "1438980",
    "end": "1445880"
  },
  {
    "text": "authentication tags but the key thing to recognize here is",
    "start": "1445880",
    "end": "1451190"
  },
  {
    "text": "that the per encryption mask that we generate",
    "start": "1451190",
    "end": "1456800"
  },
  {
    "text": "with the key and the nonce is going to be the same in both polynomials so what we can do then is we can use",
    "start": "1456800",
    "end": "1462830"
  },
  {
    "text": "these two we can combine them together basically subtract one from the other",
    "start": "1462830",
    "end": "1468280"
  },
  {
    "text": "to eliminate that term entirely and what we're left with is going to be a this",
    "start": "1468280",
    "end": "1473960"
  },
  {
    "text": "new polynomial I've called G here at the bottom and you know as you can see the the mask",
    "start": "1473960",
    "end": "1480890"
  },
  {
    "text": "value has been kind of erased and now we are left with like a fully known polynomial",
    "start": "1480890",
    "end": "1487510"
  },
  {
    "start": "1485000",
    "end": "1510000"
  },
  {
    "text": "and since you know both of the polynomials we started with head H has a",
    "start": "1488050",
    "end": "1493820"
  },
  {
    "text": "root our new polynomial G also has h as a root so now we have a fully known polynomial and it has h as a root and we",
    "start": "1493820",
    "end": "1501410"
  },
  {
    "text": "can just simply factor this to get a list of candidates for the authentication key",
    "start": "1501410",
    "end": "1508270"
  },
  {
    "text": "so the question is how to how to apply this in the tls setting",
    "start": "1509650",
    "end": "1514720"
  },
  {
    "start": "1510000",
    "end": "1665000"
  },
  {
    "text": "so we basically went with the model of",
    "start": "1514720",
    "end": "1520240"
  },
  {
    "text": "going after contents injection basically against the client side so that's what we saw at the beginning of this talk",
    "start": "1520240",
    "end": "1526430"
  },
  {
    "text": "when we basically man-in-the-middle of ourselves to inject this slide deck into a vulnerable domain",
    "start": "1526430",
    "end": "1534430"
  },
  {
    "text": "so basically the outline for our attack is first of all the user is gonna visit",
    "start": "1534430",
    "end": "1539690"
  },
  {
    "text": "some an attacker controlled content this might be",
    "start": "1539690",
    "end": "1544870"
  },
  {
    "text": "you know for example the the attacker might inject malicious content into an",
    "start": "1544870",
    "end": "1550760"
  },
  {
    "text": "unauthenticated page that the user is visiting so once the user is at that attacker",
    "start": "1550760",
    "end": "1557840"
  },
  {
    "text": "controlled content the attackers basically going to use javascript and they're going to initiate a TLS connection with the vulnerable server",
    "start": "1557840",
    "end": "1564440"
  },
  {
    "text": "and basically start pulling and [Music] you know monitoring the traffic that",
    "start": "1564440",
    "end": "1570440"
  },
  {
    "text": "comes back so the attacker is gonna be basically watching all the encrypted TLS records that come back they're gonna",
    "start": "1570440",
    "end": "1576500"
  },
  {
    "text": "collect the responses and they're gonna you know basically build a dictionary by nonce so recall as Hannah was saying in",
    "start": "1576500",
    "end": "1582740"
  },
  {
    "text": "TLS we kind of had this this eight byte nonce that is again a public value and",
    "start": "1582740",
    "end": "1588830"
  },
  {
    "text": "transmitted over the wire and so the attacker is basicly just gonna collect these along with the messages",
    "start": "1588830",
    "end": "1595130"
  },
  {
    "text": "that they go with and what they're gonna be doing is looking for a collision and notch's nonces and",
    "start": "1595130",
    "end": "1601790"
  },
  {
    "text": "so when the server repeats a nonce the attacker is basically just going to execute choose attack that we just",
    "start": "1601790",
    "end": "1608840"
  },
  {
    "text": "discussed and there that's going to give them a shortlist of candidates for the authentication key",
    "start": "1608840",
    "end": "1614200"
  },
  {
    "text": "now in this step it's important to note that as I was",
    "start": "1614200",
    "end": "1619700"
  },
  {
    "text": "saying earlier you might get more than one candidate back in some of the vulnerable hosts that we",
    "start": "1619700",
    "end": "1626360"
  },
  {
    "text": "saw this turned out not to be a big problem because you know they went to repeating the same",
    "start": "1626360",
    "end": "1632720"
  },
  {
    "text": "nonce over and over again so what we could do is you know just wait for the next message repeat the attack again and",
    "start": "1632720",
    "end": "1638650"
  },
  {
    "text": "eventually we're gonna whittle down our list of candidates to just one",
    "start": "1638650",
    "end": "1644140"
  },
  {
    "text": "at that point when we when we have the authentication key we're going to use the attacker is gonna use his controlled",
    "start": "1644140",
    "end": "1649250"
  },
  {
    "text": "content to redirect the user to a known resource so that might just be a static",
    "start": "1649250",
    "end": "1655250"
  },
  {
    "text": "webpage or even something like CSS or JavaScript that's served from the target",
    "start": "1655250",
    "end": "1661790"
  },
  {
    "text": "domain and what the attacker is gonna do when he",
    "start": "1661790",
    "end": "1667790"
  },
  {
    "start": "1665000",
    "end": "1695000"
  },
  {
    "text": "sees the response for that coming back is he's going to tamper with a message and replace it with one of his choosing",
    "start": "1667790",
    "end": "1675640"
  },
  {
    "text": "so recall that GCM uses a stream cipher for the encryption component basically",
    "start": "1675640",
    "end": "1682270"
  },
  {
    "text": "so this allows him to tamper with very high precision basically on a byte by byte basis so as",
    "start": "1682270",
    "end": "1689330"
  },
  {
    "text": "long as the attacker knows what the message is he can replace it with any message that he wants essentially",
    "start": "1689330",
    "end": "1696910"
  },
  {
    "text": "so this is kind of showing uh",
    "start": "1697870",
    "end": "1703090"
  },
  {
    "text": "I'm not sure if that's to use let me zoom in a bit here so this is basically",
    "start": "1703090",
    "end": "1709129"
  },
  {
    "text": "the the known resource we requested from this vulnerable domain so actually this",
    "start": "1709129",
    "end": "1715249"
  },
  {
    "text": "don't mean that we targeted basically just redirects everything to a different domain it's it's kind of a not",
    "start": "1715249",
    "end": "1723320"
  },
  {
    "text": "really in use anymore it seems like so so basically the response that we get back is gonna be a 301 moved permanently and it has",
    "start": "1723320",
    "end": "1730179"
  },
  {
    "text": "you know unknown piece of HTML so in theory we could replace that entire",
    "start": "1730179",
    "end": "1736629"
  },
  {
    "text": "message but there are some parts that are kind of variable so there's the you know the date and the expires timestamp",
    "start": "1736629",
    "end": "1742869"
  },
  {
    "text": "it'd be a little bit tough to to be certain that we're replacing those correctly so we chose to go with a more",
    "start": "1742869",
    "end": "1749539"
  },
  {
    "text": "surgical approach where we basically are gonna change the the HTTP HTTP response",
    "start": "1749539",
    "end": "1756919"
  },
  {
    "text": "from 301 to 200 okay and we're gonna kind of mess with the the next few",
    "start": "1756919",
    "end": "1763879"
  },
  {
    "text": "headers just to make sure that we don't just to make sure it's a valid HTTP response and then we",
    "start": "1763879",
    "end": "1769599"
  },
  {
    "text": "replace the body of the the response with a block of HTML that's basically",
    "start": "1769599",
    "end": "1774739"
  },
  {
    "text": "gonna load our slides from a domain we control",
    "start": "1774739",
    "end": "1780729"
  },
  {
    "start": "1780000",
    "end": "1805000"
  },
  {
    "text": "so I'd like to show that process one more",
    "start": "1782830",
    "end": "1788029"
  },
  {
    "text": "time we can kind of talk through it a little bit",
    "start": "1788029",
    "end": "1793159"
  },
  {
    "text": "more okay so this is basically a video of the",
    "start": "1793159",
    "end": "1800059"
  },
  {
    "text": "same kind of attack here we're gonna be attacking the same domain",
    "start": "1800059",
    "end": "1804580"
  },
  {
    "start": "1805000",
    "end": "1880000"
  },
  {
    "text": "so you can see here the first couple of messages that come up it says found",
    "start": "1805450",
    "end": "1811129"
  },
  {
    "text": "nonce you know we have a random looking value and then found nonce we have this block of zeros so what's happening here",
    "start": "1811129",
    "end": "1817070"
  },
  {
    "text": "is we're basically just reporting on the responses that are coming back we're saying these are the nonces that we found here and we're gonna be looking",
    "start": "1817070",
    "end": "1824179"
  },
  {
    "text": "for a collision and so when we get the next message you can see that we we got the same nonce again we got another",
    "start": "1824179",
    "end": "1830179"
  },
  {
    "text": "block of zeros and so that gives us a collision we go ahead and run the factoring attack to",
    "start": "1830179",
    "end": "1836560"
  },
  {
    "text": "recover some candidates for the key you can see in this case that we actually have three candidates so you know we're",
    "start": "1836560",
    "end": "1842590"
  },
  {
    "text": "not sure what to do exactly at this point so we're just gonna wait and collect another message then we get that next message",
    "start": "1842590",
    "end": "1850350"
  },
  {
    "text": "it's again gonna be a block of zeros and so we again perform the attack and then that's going to give us some more",
    "start": "1850350",
    "end": "1856600"
  },
  {
    "text": "candidates but we can just take the intersection of the first set in the second set and",
    "start": "1856600",
    "end": "1862710"
  },
  {
    "text": "with very high probability they're just going to be one remaining so at this point we have",
    "start": "1862710",
    "end": "1868500"
  },
  {
    "text": "you know one candidate for the key left and that's going to be the correct value so we're going to go ahead and inject",
    "start": "1868500",
    "end": "1874690"
  },
  {
    "text": "and we you know put this little chip in there",
    "start": "1874690",
    "end": "1879270"
  },
  {
    "start": "1880000",
    "end": "2020000"
  },
  {
    "text": "yeah so that that's basically our attack on TOS",
    "start": "1884760",
    "end": "1890160"
  },
  {
    "text": "so looking forward to the future there are a couple there are a couple sort of",
    "start": "1890160",
    "end": "1898180"
  },
  {
    "text": "bigger trends that are going to be mitigations against this kind of problem one is at the protocol level in TLS so",
    "start": "1898180",
    "end": "1905430"
  },
  {
    "text": "recently hannah was saying a the a new AE ad ChaCha 20 Pali 1305",
    "start": "1905430",
    "end": "1915150"
  },
  {
    "text": "has gone through the you know the draft process and is being adopted now so",
    "start": "1915150",
    "end": "1921300"
  },
  {
    "text": "cha-cha Pali instead of this explicit nonce construction uses the same thing",
    "start": "1921300",
    "end": "1927910"
  },
  {
    "text": "that TLS 1.3 is going to be using the future which is instead of transmitting the non server the wire",
    "start": "1927910",
    "end": "1933480"
  },
  {
    "text": "it's kind of baked in to use the sequence number of each record so",
    "start": "1933480",
    "end": "1940800"
  },
  {
    "text": "any any implementation that doesn't conform to that will just will simply be inoperable",
    "start": "1940800",
    "end": "1947080"
  },
  {
    "text": "so it'll it'll fail it'll it'll fail to work and it will have to be fixed and it won't leave room for this kind of",
    "start": "1947080",
    "end": "1953790"
  },
  {
    "text": "implementation error the second kind of trend is more at the",
    "start": "1953790",
    "end": "1959380"
  },
  {
    "text": "algorithm level and here we see there there have been some moves to define some modes that are resilient against",
    "start": "1959380",
    "end": "1966190"
  },
  {
    "text": "this kind of this kind of error in the first place so you have constructions that",
    "start": "1966190",
    "end": "1972840"
  },
  {
    "text": "generate synthetic initialization vectors or nonces",
    "start": "1972840",
    "end": "1978330"
  },
  {
    "text": "you know based on the message itself and so you you can't really get into a",
    "start": "1978330",
    "end": "1983350"
  },
  {
    "text": "situation where repeating the same nonce leads to this",
    "start": "1983350",
    "end": "1988690"
  },
  {
    "text": "kind of problem the drawback to that kind of scheme is that it requires you to pre-process the",
    "start": "1988690",
    "end": "1995379"
  },
  {
    "text": "entire message before you can proceed so you know GCM is in contrast to that is",
    "start": "1995379",
    "end": "2001460"
  },
  {
    "text": "what cryptographers would call an online mode where you can process the message",
    "start": "2001460",
    "end": "2006690"
  },
  {
    "text": "as it comes to you without necessarily knowing how long it is and kind of you know stream the cypher text out to the",
    "start": "2006690",
    "end": "2013740"
  },
  {
    "text": "user then do you want to wrap things up okay",
    "start": "2013740",
    "end": "2022049"
  },
  {
    "start": "2020000",
    "end": "2155000"
  },
  {
    "text": "yeah so some conclusion from that so TLS 1.2 I think it's really an example for a",
    "start": "2022049",
    "end": "2029419"
  },
  {
    "text": "specification that you don't want to have because it's telling an implementer that okay you need a nonce here but it",
    "start": "2029419",
    "end": "2036570"
  },
  {
    "text": "doesn't give any good guidance on how to do that and I think we need more robust specs here we're okay in many cases we",
    "start": "2036570",
    "end": "2044159"
  },
  {
    "text": "can just avoid these situations by a stronger set in TLS 1.3 the nonce will",
    "start": "2044159",
    "end": "2049560"
  },
  {
    "text": "be an implicit value so you cannot do that wrong or else your implementation",
    "start": "2049560",
    "end": "2054628"
  },
  {
    "text": "will just not work but even if you have a situation like this then you should at",
    "start": "2054629",
    "end": "2061349"
  },
  {
    "text": "least give very explicit guidance on how to do this and in this situation the guidance would just have been okay I'll",
    "start": "2061349",
    "end": "2067589"
  },
  {
    "text": "just use a counter you must use the counter and everything else is invalid and",
    "start": "2067589",
    "end": "2073490"
  },
  {
    "text": "kind of the bigger picture here is that I I have to saying that whatever you can",
    "start": "2073490",
    "end": "2081480"
  },
  {
    "text": "get wrong until s someone will get wrong so we have seen implementations yeah we",
    "start": "2081480",
    "end": "2086550"
  },
  {
    "text": "have seen implementation that don't check for the padding which enable the poodle attack even in versions that were",
    "start": "2086550",
    "end": "2092099"
  },
  {
    "text": "not really vulnerable to it we have seen implementations that are safe to check the Mac and we have seen also things",
    "start": "2092099",
    "end": "2097980"
  },
  {
    "text": "like implementations that would check the padding but only some bytes of it and not all bytes of it so and what",
    "start": "2097980",
    "end": "2107539"
  },
  {
    "text": "we're really lacking right now are good test tools so what I would like to see is that I have a tool that I can run",
    "start": "2107539",
    "end": "2113420"
  },
  {
    "text": "against the server and it will test all kinds of things that are possible to test on",
    "start": "2113420",
    "end": "2118660"
  },
  {
    "text": "from an outside view without looking into the code and there I mean the the",
    "start": "2118660",
    "end": "2124489"
  },
  {
    "text": "most popular thing right now is the SSL labs test but it is not as conclusive as",
    "start": "2124489",
    "end": "2130400"
  },
  {
    "text": "one would like it to be and there are some work done on tools there's what I find very promising is a tool code here",
    "start": "2130400",
    "end": "2136009"
  },
  {
    "text": "as father which is from Hobart Korea from wet hat and he's also working on",
    "start": "2136009",
    "end": "2141410"
  },
  {
    "text": "integrating a test for the nonce issue right now so that will probably soon support that but yeah that's really",
    "start": "2141410",
    "end": "2148460"
  },
  {
    "text": "something that I'd like to see in the future that we have to have much better testing tools",
    "start": "2148460",
    "end": "2154838"
  },
  {
    "start": "2155000",
    "end": "2210000"
  },
  {
    "text": "yeah and thanks for listening and [Music] [Applause]",
    "start": "2155470",
    "end": "2165840"
  },
  {
    "text": "we have a github repo where we we have published a proof of concept code and",
    "start": "2166090",
    "end": "2171400"
  },
  {
    "text": "also have links to our research paper and like all kinds of stuff that's related to this also to the advisories",
    "start": "2171400",
    "end": "2178060"
  },
  {
    "text": "from the vendors when there's an update and we will update this if we learn about more vendors and",
    "start": "2178060",
    "end": "2184230"
  },
  {
    "text": "then also we now have an online test for this issue which is a bit rough I hacked",
    "start": "2184230",
    "end": "2190450"
  },
  {
    "text": "it together yesterday so if it doesn't work reliably then please forgive that",
    "start": "2190450",
    "end": "2196000"
  },
  {
    "text": "and I will try to make it better but you can just type in a host name there and",
    "start": "2196000",
    "end": "2201400"
  },
  {
    "text": "it will tell you what nonce values you get and tell you if that's okay so yeah",
    "start": "2201400",
    "end": "2207670"
  },
  {
    "text": "do you have questions please speak into the mic so it's in the",
    "start": "2207670",
    "end": "2214030"
  },
  {
    "start": "2210000",
    "end": "2280000"
  },
  {
    "text": "recording thank you very impressive work one good",
    "start": "2214030",
    "end": "2219430"
  },
  {
    "text": "question the key that you try to recover is that this session key so it's",
    "start": "2219430",
    "end": "2225099"
  },
  {
    "text": "actually the the sequence number of the TLS record so TLS itself has a notion of",
    "start": "2225099",
    "end": "2231690"
  },
  {
    "text": "it's basically like like a you know each record you ship out has a",
    "start": "2231690",
    "end": "2237250"
  },
  {
    "text": "unique sequence number with it and it's actually already part of the authenticated data in each message so it's it's something that both sides of",
    "start": "2237250",
    "end": "2244570"
  },
  {
    "text": "the connection are already keeping track of so it makes sense to use it as a similar to",
    "start": "2244570",
    "end": "2249640"
  },
  {
    "text": "a TCP sequence but and within the a TLS section itself yeah yeah yeah so TLS has a kind of sequence number for the TLS",
    "start": "2249640",
    "end": "2256839"
  },
  {
    "text": "records but they are not using exactly the record number but putting some mask on it but it's a value derived from the",
    "start": "2256839",
    "end": "2263020"
  },
  {
    "text": "sequence number god so there's no need for an explicit nonce to be sent exactly and they could have done that I mean the",
    "start": "2263020",
    "end": "2268930"
  },
  {
    "text": "TLS 1.2 spec says that you can do that and if they would have just said you must do that then this wouldn't have",
    "start": "2268930",
    "end": "2275410"
  },
  {
    "text": "happened understood thank you have you looked in to see if any IPSec",
    "start": "2275410",
    "end": "2283330"
  },
  {
    "text": "vendors are doing the GCM correctly is your tool and second is your tip is your tool is pastila specific but could that",
    "start": "2283330",
    "end": "2290380"
  },
  {
    "text": "be ported over to IPSec fairly easily so so the scanner or the it takes so the",
    "start": "2290380",
    "end": "2296200"
  },
  {
    "text": "scan tool is TLS specific the the attack proof-of-concept is kind",
    "start": "2296200",
    "end": "2301640"
  },
  {
    "text": "of split up into a part that is specific and one that's attacking the lower level so that could be adapted okay",
    "start": "2301640",
    "end": "2309760"
  },
  {
    "text": "agree annex not looked at IPSec specifically thanks very much that was excellent so you had mentioned that in",
    "start": "2309760",
    "end": "2315590"
  },
  {
    "text": "TLS one three there's a design level of mitigation for the nonce misuse problem there my question is if you were",
    "start": "2315590",
    "end": "2321710"
  },
  {
    "text": "designing a new protocol to use GCM or some other AE ad and you solve just this",
    "start": "2321710",
    "end": "2327890"
  },
  {
    "text": "one problem with GCM you make sure you don't have this one non triage problem is that all there is wrong with GCM or",
    "start": "2327890",
    "end": "2333740"
  },
  {
    "text": "are there other things you have to watch out for in GCM",
    "start": "2333740",
    "end": "2338380"
  },
  {
    "text": "yeah so there's actually uh there's actually a lot of problems with GCM as",
    "start": "2339550",
    "end": "2344990"
  },
  {
    "start": "2340000",
    "end": "2495000"
  },
  {
    "text": "as Hanna was saying from those quotes earlier a few people just said GCM is extremely fragile don't use GCM",
    "start": "2344990",
    "end": "2352600"
  },
  {
    "text": "so yeah a few different failure modes so I think Hanna mentioned its software",
    "start": "2353170",
    "end": "2359990"
  },
  {
    "text": "implementations are highly susceptible to cache timing attacks there was a quote from Niels Ferguson in",
    "start": "2359990",
    "end": "2366290"
  },
  {
    "text": "there that basically said do not use GCM and kind of what he was alluding to there was an attack he developed also",
    "start": "2366290",
    "end": "2372830"
  },
  {
    "text": "during the NIST's kind of request for comments basically which is basically targeting you should",
    "start": "2372830",
    "end": "2380360"
  },
  {
    "text": "use of GCM with a truncated authentication tag so a lot of times people maybe not a lot of",
    "start": "2380360",
    "end": "2387890"
  },
  {
    "text": "times but sometimes people will want to basically truncate the authentication tag you know to save bandwidth",
    "start": "2387890",
    "end": "2395290"
  },
  {
    "text": "so in GCM the authentication tag is a 128-bit value so you can see where someone you know if they're doing like",
    "start": "2395290",
    "end": "2403160"
  },
  {
    "text": "encrypted voice or something like that where they're sending tons of small messages they might want to save some bandwidth by using a small",
    "start": "2403160",
    "end": "2409630"
  },
  {
    "text": "authentication tag you know figuring that you know it's not really going to matter if the attacker is able to forge",
    "start": "2409630",
    "end": "2416210"
  },
  {
    "text": "you know the odd message here and there as long as most of them are okay in GCM",
    "start": "2416210",
    "end": "2421880"
  },
  {
    "text": "this turns out to be a huge problem because when you use a truncated tag",
    "start": "2421880",
    "end": "2427390"
  },
  {
    "text": "you know not only are you you know reducing your security level the amount you attics effect but the attacker can",
    "start": "2427390",
    "end": "2433640"
  },
  {
    "text": "also reduce it even further based on the size of the message and every time he's successful in forging a message he's",
    "start": "2433640",
    "end": "2440870"
  },
  {
    "text": "gonna learn a little bit of information about the authentication key and after a few successful forgeries he's going to",
    "start": "2440870",
    "end": "2447620"
  },
  {
    "text": "be able to recover it entirely you know similar to what we saw here",
    "start": "2447620",
    "end": "2452440"
  },
  {
    "text": "yeah there there are other failure modes it's a it is a you know as they said a",
    "start": "2453640",
    "end": "2460190"
  },
  {
    "text": "fragile construction but what I mean the thing what most people seem to be",
    "start": "2460190",
    "end": "2465260"
  },
  {
    "text": "worried about at least side-channel attacks and I think it's just that most people right now to use this",
    "start": "2465260",
    "end": "2471080"
  },
  {
    "text": "implementation from Amelia Kasper and Peter Java which has been I think well reviewed",
    "start": "2471080",
    "end": "2476800"
  },
  {
    "text": "and the modern Intel CPUs have an instruction for doing this -",
    "start": "2476800",
    "end": "2482770"
  },
  {
    "text": "which also should be section a safe so that kind of mitigated because",
    "start": "2482770",
    "end": "2488000"
  },
  {
    "text": "everyone's using the safe code base or using the cpu instruction",
    "start": "2488000",
    "end": "2494109"
  },
  {
    "start": "2495000",
    "end": "2710000"
  },
  {
    "text": "you considered whether there was a problem with the supposedly there are some some weak keys in theater and GCM",
    "start": "2500620",
    "end": "2509240"
  },
  {
    "text": "where if you choose a particular session key then that could result in an H with a with a small order yeah so what you're",
    "start": "2509240",
    "end": "2518600"
  },
  {
    "text": "alluding to there is basically I didn't go into this in too much detail on the talk but the the setting where we're",
    "start": "2518600",
    "end": "2525380"
  },
  {
    "text": "evaluating that polynomial is a what's known as a Galois field and this",
    "start": "2525380",
    "end": "2530900"
  },
  {
    "text": "particular one has a size of 2 to the 128th in a field like this it's possible for",
    "start": "2530900",
    "end": "2538400"
  },
  {
    "text": "some elements to generate what are called small subgroups",
    "start": "2538400",
    "end": "2544730"
  },
  {
    "text": "which is to say that you know they'll only generate a few values if you multiply them by",
    "start": "2544730",
    "end": "2551210"
  },
  {
    "text": "themselves like a over and over again this can be a problem in GCM if you have",
    "start": "2551210",
    "end": "2557960"
  },
  {
    "text": "an extremely weak e you know you might be able to swap different blocks you know of particular",
    "start": "2557960",
    "end": "2563770"
  },
  {
    "text": "coefficients in the polynomial I think as far as I know that this",
    "start": "2563770",
    "end": "2570380"
  },
  {
    "text": "doesn't seem like a very practical problem to me and I could",
    "start": "2570380",
    "end": "2576890"
  },
  {
    "text": "be wrong about that but I think you need to like I think the",
    "start": "2576890",
    "end": "2582980"
  },
  {
    "text": "chances of extremely weak keys are very low and especially because in TLS the the size of each record is is capped to",
    "start": "2582980",
    "end": "2590510"
  },
  {
    "text": "like a pretty small amount so I think it's probably not going to be a big",
    "start": "2590510",
    "end": "2595850"
  },
  {
    "text": "issue for TLS or similar protocols",
    "start": "2595850",
    "end": "2601450"
  },
  {
    "text": "so the key that you derive that can be used to authenticate",
    "start": "2602980",
    "end": "2610090"
  },
  {
    "text": "arbitrary ciphertext how do you replace that with",
    "start": "2610090",
    "end": "2616090"
  },
  {
    "text": "with your own because you don't know the session key with which that Sai projects was the",
    "start": "2616090",
    "end": "2622010"
  },
  {
    "text": "appropriate so sorry it's if you have the authentication key",
    "start": "2622010",
    "end": "2630500"
  },
  {
    "text": "then the rest of the staff is like a stream cipher and then you can lay if",
    "start": "2630500",
    "end": "2635570"
  },
  {
    "text": "you have known known plaintext basically which is the website then you can XOR values on it and then we authenticate it",
    "start": "2635570",
    "end": "2643900"
  },
  {
    "text": "you have to know in advance what the website is sending you and your website",
    "start": "2643900",
    "end": "2648980"
  },
  {
    "text": "is public oh yeah they're common yeah so it's also worth noting you could go the",
    "start": "2648980",
    "end": "2656090"
  },
  {
    "text": "other way like if so our goal was to inject content by replacing a known plaintext if you were interested in some",
    "start": "2656090",
    "end": "2662900"
  },
  {
    "text": "secret plaintext and you had some kind of error Oracle you could flip it to random you know send them onto the",
    "start": "2662900",
    "end": "2669650"
  },
  {
    "text": "receiver and see what comes back in an effort to try and divulge some of that plaintext though that would",
    "start": "2669650",
    "end": "2675650"
  },
  {
    "text": "probably not be well I don't know I don't know if that'd be good for TLS but",
    "start": "2675650",
    "end": "2680750"
  },
  {
    "text": "but there's also another issue that we haven't covered in our research that if you have two blocks with the same month",
    "start": "2680750",
    "end": "2687500"
  },
  {
    "text": "you can XOR them and get the X oaring of the to plaintext so if you have one known plaintext you can use that to",
    "start": "2687500",
    "end": "2694790"
  },
  {
    "text": "decrypt one ciphertext that that's a basic issue of stream cyphers",
    "start": "2694790",
    "end": "2700420"
  },
  {
    "text": "that if you use the same key twice then the ex oaring of the ciphertext is the x-raying of the plaintext",
    "start": "2700420",
    "end": "2707760"
  },
  {
    "text": "thank you for speaking with us with these with these",
    "start": "2709500",
    "end": "2715380"
  },
  {
    "start": "2710000",
    "end": "2960000"
  },
  {
    "text": "avenues of attack in mind what can what can we bring to hardware vendors to push",
    "start": "2715380",
    "end": "2722980"
  },
  {
    "text": "them to implement safer mechanisms in hardware such as the way",
    "start": "2722980",
    "end": "2730230"
  },
  {
    "text": "Intel has added has added cryptographic support it in its",
    "start": "2730230",
    "end": "2736810"
  },
  {
    "text": "processors what do we need to bring to them to get them to do it right and to understand the importance to hardware to",
    "start": "2736810",
    "end": "2744579"
  },
  {
    "text": "Hardware enable doing it the right way so we don't have to keep screwing up in",
    "start": "2744579",
    "end": "2750070"
  },
  {
    "text": "different libraries and different operating platforms so one thing as I said I would really",
    "start": "2750070",
    "end": "2757510"
  },
  {
    "text": "like to see this test tool where I could tell a hardware vendor please does your device if you're I run this test tool",
    "start": "2757510",
    "end": "2764440"
  },
  {
    "text": "against your device does it show any errors and if yes why don't you fix them and I mean yeah the other thing is and",
    "start": "2764440",
    "end": "2772150"
  },
  {
    "text": "the question is if you want to fix GCM in a way that you have side-channel safe",
    "start": "2772150",
    "end": "2777160"
  },
  {
    "text": "and hardware instructions or if you just want to move on to other ciphers that",
    "start": "2777160",
    "end": "2783000"
  },
  {
    "text": "you could also ask them that what they should support chapter 20",
    "start": "2783000",
    "end": "2788940"
  },
  {
    "text": "did you investigate what the failure mode in the implementations that were",
    "start": "2791190",
    "end": "2796720"
  },
  {
    "text": "repeating nonces was this just because they mem set that nonce to one two three four was it a randomness failure were",
    "start": "2796720",
    "end": "2801849"
  },
  {
    "text": "they always using zero and if so did your scanning methodology for",
    "start": "2801849",
    "end": "2807220"
  },
  {
    "text": "identifying that host that we're repeating nonces account for the fact that",
    "start": "2807220",
    "end": "2812339"
  },
  {
    "text": "you may need different approaches to detect different failure modes for",
    "start": "2812339",
    "end": "2817420"
  },
  {
    "text": "example you might need a lot more requests for a randomness failure versus immense at so we didn't find any burner but",
    "start": "2817420",
    "end": "2825730"
  },
  {
    "text": "implementation where we had access to the code so or even access to the software",
    "start": "2825730",
    "end": "2832690"
  },
  {
    "text": "so we could not look deeper into this I mean I said with this OpenSSL thing",
    "start": "2832690",
    "end": "2838660"
  },
  {
    "text": "we're kind of the assumption that this might be the cause but for the attack it doesn't make a big",
    "start": "2838660",
    "end": "2845349"
  },
  {
    "text": "difference because you're just looking for a duplicate nonce and that's like almost the same approach but",
    "start": "2845349",
    "end": "2852089"
  },
  {
    "text": "but the ones like the example we were attacking here that was just sending a random value and then just all this is",
    "start": "2852089",
    "end": "2858730"
  },
  {
    "text": "zero so yeah but I don't know what the flaw in the",
    "start": "2858730",
    "end": "2864849"
  },
  {
    "text": "code here is because I don't have access to the software",
    "start": "2864849",
    "end": "2869430"
  },
  {
    "text": "I've had a slide where you take the server's ciphertext you XOR the server's",
    "start": "2873510",
    "end": "2879430"
  },
  {
    "text": "plaintext and then you XOR it again with your your plaintext are there any limitations on the length of the",
    "start": "2879430",
    "end": "2886750"
  },
  {
    "text": "plaintext that you want to to inject your men in the middle attack yeah",
    "start": "2886750",
    "end": "2891819"
  },
  {
    "text": "that's a great question actually so I said earlier that basically we can replace a known resource with an",
    "start": "2891819",
    "end": "2899559"
  },
  {
    "text": "arbitrary message of our choosing but that's not quite true because we're in some sense limited to the",
    "start": "2899559",
    "end": "2906910"
  },
  {
    "text": "length of the message we're replacing because you know we need to get the we basically use our knowledge of that",
    "start": "2906910",
    "end": "2912430"
  },
  {
    "text": "plaintext to recover the key stream and make our new cipher text so while we could extend past the end of that",
    "start": "2912430",
    "end": "2918760"
  },
  {
    "text": "message we would kind of be taking shots in the dark at that point and it's probably not gonna be advantageous",
    "start": "2918760",
    "end": "2925599"
  },
  {
    "text": "for us as the attacker so that's actually why we went the route",
    "start": "2925599",
    "end": "2931240"
  },
  {
    "text": "we did which was basically just injecting a small amount of HTML that loaded more from elsewhere but in the",
    "start": "2931240",
    "end": "2937900"
  },
  {
    "text": "web setting that's not really an issue because as soon as you can inject your own JavaScript code you you have one you",
    "start": "2937900",
    "end": "2943390"
  },
  {
    "text": "can do whatever you want okay",
    "start": "2943390",
    "end": "2946500"
  },
  {
    "text": "okay I guess if there are no more questions",
    "start": "2950260",
    "end": "2954700"
  },
  {
    "text": "[Applause]",
    "start": "2956360",
    "end": "2962789"
  }
]