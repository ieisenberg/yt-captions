[
  {
    "text": "hello everyone our topic here today is attacking mpus of multiple",
    "start": "4040",
    "end": "9800"
  },
  {
    "text": "platforms first please let me introduce ourselves uh we are from B security lab x team my name is y and I mainly focus",
    "start": "9800",
    "end": "17680"
  },
  {
    "text": "on banner and lowlevel system security uh L here is a very experienced security",
    "start": "17680",
    "end": "23119"
  },
  {
    "text": "researcher focus on Android system he has found hundreds of security vulnerabilities of different vendors and",
    "start": "23119",
    "end": "29679"
  },
  {
    "text": "he show us the coom mpu exploitation in this",
    "start": "29679",
    "end": "34680"
  },
  {
    "text": "talk uh here are the agenda of this talk uh we are first talk about some basic concept of neuron Network and mpu and",
    "start": "34680",
    "end": "41760"
  },
  {
    "text": "then we will detailed focus on Samsung xnos Apple silicon and cocom snap dragon mpu uh including their inations box and",
    "start": "41760",
    "end": "51440"
  },
  {
    "text": "exploitation okay so uh what's mpu and why we need it well before we dive deeper let me",
    "start": "51440",
    "end": "58199"
  },
  {
    "text": "introduce a bit about new network to simplify it is a data processing process with multiple algorithm layers",
    "start": "58199",
    "end": "65360"
  },
  {
    "text": "it can find patterns from the row input data like image or sound data and generate result such as uh image",
    "start": "65360",
    "end": "72920"
  },
  {
    "text": "classification or recognition it has been used in lots of areas such as face ID or self-driving",
    "start": "72920",
    "end": "80280"
  },
  {
    "text": "car uh the convolution neuron Network AKA CNN is the most used in new network",
    "start": "80280",
    "end": "86439"
  },
  {
    "text": "uh especially in the image processing area to understand let's first think about what an image looks like in",
    "start": "86439",
    "end": "92479"
  },
  {
    "text": "computer's whe uh for instance is this image of letter X human can find it X",
    "start": "92479",
    "end": "98159"
  },
  {
    "text": "immediately but in computer's whe it's just all numbers pixels with RGB value",
    "start": "98159",
    "end": "103320"
  },
  {
    "text": "so how can we teach computer learn the image and things may be more complex in",
    "start": "103320",
    "end": "108520"
  },
  {
    "text": "the real situation for example if the image spin a little in compar whe these two image are totally",
    "start": "108520",
    "end": "115560"
  },
  {
    "text": "different and to solve the problem C emerged uh first last thing when human",
    "start": "115560",
    "end": "120719"
  },
  {
    "text": "look at the cat picture for example our human brain will recognize there's a cat's face cat paw and cat tail and our",
    "start": "120719",
    "end": "127560"
  },
  {
    "text": "brain combine all these features and we know it's a cat uh since idea is pretty similar uh",
    "start": "127560",
    "end": "134480"
  },
  {
    "text": "it use a specific image pattern called filters to do the feature detection for",
    "start": "134480",
    "end": "139959"
  },
  {
    "text": "example here the filter represent the upper left part of the letter X and we",
    "start": "139959",
    "end": "145200"
  },
  {
    "text": "can multiply each element of the filter by the corresponding element of the image r",
    "start": "145200",
    "end": "150480"
  },
  {
    "text": "and sum up these products and we will get a weight result which represents the",
    "start": "150480",
    "end": "155519"
  },
  {
    "text": "similarity between the filter and the image region and the blue field as we can see",
    "start": "155519",
    "end": "161000"
  },
  {
    "text": "uh the weight is calculate is only one so it's less similar with the filter uh with this idea we can continue",
    "start": "161000",
    "end": "168040"
  },
  {
    "text": "Slide the filter and calculate every weight result uh for each input image",
    "start": "168040",
    "end": "173280"
  },
  {
    "text": "regions uh just like our human eyes SC through a cat picture trying to find uh",
    "start": "173280",
    "end": "178400"
  },
  {
    "text": "which part is most likely to be the cat phas and we will get an output feature map this information will be used for",
    "start": "178400",
    "end": "185840"
  },
  {
    "text": "the finel precising and this operation in see is called",
    "start": "185840",
    "end": "191239"
  },
  {
    "text": "convolution in fact there will be multiple filters to represent different features and finally we will get a",
    "start": "191239",
    "end": "196920"
  },
  {
    "text": "multiple output feature map uh which will be will be the input data for the next",
    "start": "196920",
    "end": "202480"
  },
  {
    "text": "layer in the r in operation besides convolution there are some other",
    "start": "202480",
    "end": "207760"
  },
  {
    "text": "algorithms such as activation or pooling we are not discuss more about these algorithm here just remind they",
    "start": "207760",
    "end": "214439"
  },
  {
    "text": "all do lots of paralyzed computation for the feature learning and to do the prediction uh a",
    "start": "214439",
    "end": "221519"
  },
  {
    "text": "neuron Network need to be trained first simply put the training process is like a loop to change parameters of every",
    "start": "221519",
    "end": "228760"
  },
  {
    "text": "equations in CN and find the most suitable parameters that feed the data s side best the final output of training",
    "start": "228760",
    "end": "236480"
  },
  {
    "text": "is a modile uh we can use this modile to do prediction or",
    "start": "236480",
    "end": "241840"
  },
  {
    "text": "inference so as we can see convolution need Hardware to handle the massive",
    "start": "241840",
    "end": "246879"
  },
  {
    "text": "computation and this competion can be paralyzed so CPU is not good at parallel Computing because the limitation of the",
    "start": "246879",
    "end": "253640"
  },
  {
    "text": "core numbers GPU is a matter choice but is very power consuming and not designed",
    "start": "253640",
    "end": "259320"
  },
  {
    "text": "specifically for the machine learning so we need new processors uh to",
    "start": "259320",
    "end": "264600"
  },
  {
    "text": "meet the requirements uh in the AI processor area besides GPU or fpga ASC",
    "start": "264600",
    "end": "270360"
  },
  {
    "text": "chip is the most used solution such as Intel's vpu Google's TPU they may have",
    "start": "270360",
    "end": "276000"
  },
  {
    "text": "different names because their Hardware implementation is different but in this talk I will use mpu the neuron processor",
    "start": "276000",
    "end": "282199"
  },
  {
    "text": "unit to identify all these as chip sets uh here is a brief architecture for",
    "start": "282199",
    "end": "288440"
  },
  {
    "text": "the C Chrome DL mpu it's a very typical mpu design uh the blue fields are srams",
    "start": "288440",
    "end": "294840"
  },
  {
    "text": "uh the main for saving the input output and weight data they all communicate kit with main Ram through dma and it has one",
    "start": "294840",
    "end": "302960"
  },
  {
    "text": "control processor and three nfuse for doing the paralyzed computation it also",
    "start": "302960",
    "end": "308120"
  },
  {
    "text": "has a unique instruction set called D it's asmd so one instruction can",
    "start": "308120",
    "end": "313320"
  },
  {
    "text": "complete the processing of a group of neurons there are also kind of there is",
    "start": "313320",
    "end": "319080"
  },
  {
    "text": "also a kind of mpu for Edge devices uh these chips only do inference not for training so it need pre pre-trained",
    "start": "319080",
    "end": "326479"
  },
  {
    "text": "motor fil and the always has lower power consumption consider there on the mobile devices we are mainly focus on this",
    "start": "326479",
    "end": "333160"
  },
  {
    "text": "triip in this stock so as we say to do the prediction we need prr modile and the vendors",
    "start": "333160",
    "end": "339759"
  },
  {
    "text": "always have their own modile format such as Samsung inis modile or ccom DLC",
    "start": "339759",
    "end": "345240"
  },
  {
    "text": "modile they're all vendor designed so there there may be some fail parsing",
    "start": "345240",
    "end": "350400"
  },
  {
    "text": "issues uh in their random library and MP driver and MP firmware are also big",
    "start": "350400",
    "end": "355800"
  },
  {
    "text": "attack surface okay now let's take a look at Samsung xos",
    "start": "355800",
    "end": "361680"
  },
  {
    "text": "mpu uh here is an overview of AOS 9820 uh it has a one control processor and",
    "start": "361680",
    "end": "368120"
  },
  {
    "text": "two M cores for doing the parallel computation the input feature map first will be divided into multiple parts and",
    "start": "368120",
    "end": "375000"
  },
  {
    "text": "delivered to the Mac R layer the Mac here means multiply accumulate uh this du Mac unit will finish the multiply and",
    "start": "375000",
    "end": "382599"
  },
  {
    "text": "ending computation the control processor here is a 32-bit armm processor running a RTO",
    "start": "382599",
    "end": "390880"
  },
  {
    "text": "system by Samsung which has a complete subsystem design and we'll talk more about",
    "start": "390880",
    "end": "396880"
  },
  {
    "text": "later the testing device here is Samsung Galaxy a54 and A51 MP devices know is",
    "start": "396880",
    "end": "403560"
  },
  {
    "text": "vertex 10 in devest folder uh the device is accessible from UST AP according to its a Linux policy",
    "start": "403560",
    "end": "411759"
  },
  {
    "text": "so we can open and send control within the AP context uh for Galaxy phones these",
    "start": "411759",
    "end": "418160"
  },
  {
    "text": "operations are all wrapped by in framework uh such as camera service using this uh framework ad to talk to",
    "start": "418160",
    "end": "425120"
  },
  {
    "text": "the m driver from kernel wheel MP device is a",
    "start": "425120",
    "end": "431240"
  },
  {
    "text": "typical platform device in device probing stage system will allocate fi dma space for initializing dma is direct",
    "start": "431240",
    "end": "439240"
  },
  {
    "text": "memory memory access which means the dma controller Hardware will transfer data between the kernel and and RAM between",
    "start": "439240",
    "end": "446639"
  },
  {
    "text": "the device and RAM directly without using CPU and after allocate the DMS space in Ram",
    "start": "446639",
    "end": "452919"
  },
  {
    "text": "its physical address will be saved in scy list structure for later configure the I mmu page",
    "start": "452919",
    "end": "460160"
  },
  {
    "text": "table I mmu is a hardware for translating the virtual address of IO device to the main Ram's physical device",
    "start": "460160",
    "end": "467400"
  },
  {
    "text": "and IO device virtual address is called iova when a dma request happen the IU",
    "start": "467400",
    "end": "473919"
  },
  {
    "text": "Hardware will automatically finish the address translation based on the page table that we create here",
    "start": "473919",
    "end": "480240"
  },
  {
    "text": "iov value is gotten from device free source fil AKA DTS it sa the iov size",
    "start": "480240",
    "end": "486360"
  },
  {
    "text": "and name of different i m space and the whole address mapping is",
    "start": "486360",
    "end": "491960"
  },
  {
    "text": "like following the red line iare is for non DM space uh which are mly devises I",
    "start": "491960",
    "end": "497919"
  },
  {
    "text": "map space for controlling the hardware Uh current will map this a map space to Virtual address for later use during the",
    "start": "497919",
    "end": "504599"
  },
  {
    "text": "probing stage the last the last stay space is for BM buffer uh they are mainly",
    "start": "504599",
    "end": "511280"
  },
  {
    "text": "responsible for communications between kernel and mpu besides the device also",
    "start": "511280",
    "end": "516479"
  },
  {
    "text": "has other DM space which for dynamically allocation uh the related address",
    "start": "516479",
    "end": "521760"
  },
  {
    "text": "information is also saved in DTS file okay the previous process we talk",
    "start": "521760",
    "end": "528519"
  },
  {
    "text": "about are all finished during the Android system booing period now let's take a look at the device opening",
    "start": "528519",
    "end": "535040"
  },
  {
    "text": "process when user open the vertex 10 device KW first load MP firmware image",
    "start": "535040",
    "end": "540560"
  },
  {
    "text": "to the dma buffer the firmware image is located in three possible locations or",
    "start": "540560",
    "end": "545760"
  },
  {
    "text": "dumped from Android Boo b image curent will try to load firor from either one",
    "start": "545760",
    "end": "550880"
  },
  {
    "text": "of these paths and the IM and the image is now encrypted or signatured so we are",
    "start": "550880",
    "end": "556399"
  },
  {
    "text": "able to run our modified program on the MP core such as hook functions or print debug",
    "start": "556399",
    "end": "562720"
  },
  {
    "text": "message and after loading the mpu firware Kel will power on the mpu control processor and mpu will begin",
    "start": "562720",
    "end": "570079"
  },
  {
    "text": "execute the firmare rtos another thing K will do is to start",
    "start": "570079",
    "end": "576519"
  },
  {
    "text": "a kernal task to handle the data transfer between kernel and mpu the work tasks will include all the mpu request",
    "start": "576519",
    "end": "583880"
  },
  {
    "text": "and serialize them on the ring buffer okay now let's have a brief summary well device proving stage uh",
    "start": "583880",
    "end": "591279"
  },
  {
    "text": "system will allocate D buffer finish IU configuration and create the address mapping when device open the system will",
    "start": "591279",
    "end": "598760"
  },
  {
    "text": "load firmware to the dma buffer first and Power on the mpu control processor",
    "start": "598760",
    "end": "603880"
  },
  {
    "text": "and kernel side will start a worker task to handle the data transfer between kernel and",
    "start": "603880",
    "end": "610240"
  },
  {
    "text": "mpu the data transfer is managed through the dma so what data is on the dma",
    "start": "610240",
    "end": "615480"
  },
  {
    "text": "buffer actually in fact after loading the firmware image to the dma buffer konel",
    "start": "615480",
    "end": "622200"
  },
  {
    "text": "will set up a mailbox structure the mailbox contains two parts mailbox header and a ring",
    "start": "622200",
    "end": "628040"
  },
  {
    "text": "buffer mailbox header mainly contains a read right pointer points to the rim buffer uh which represents the current",
    "start": "628040",
    "end": "634959"
  },
  {
    "text": "location of the data to be pared there are four R buffers for",
    "start": "634959",
    "end": "640320"
  },
  {
    "text": "handling the different request and they all have different length colel will first set their read",
    "start": "640320",
    "end": "647160"
  },
  {
    "text": "and right pointers to zero later when the host want to send a request uh the",
    "start": "647160",
    "end": "652200"
  },
  {
    "text": "right pointer will be updated and MP firmware will know that there is a new request from Colonel by reading the that",
    "start": "652200",
    "end": "659120"
  },
  {
    "text": "repter later will MP finish request handling firmware side will update the",
    "start": "659120",
    "end": "664160"
  },
  {
    "text": "rep pointer and notify kernel the request is already finished when user space send the MP",
    "start": "664160",
    "end": "671240"
  },
  {
    "text": "request through control uh the driver will generate a request structure and put it into a global request management",
    "start": "671240",
    "end": "678040"
  },
  {
    "text": "list which is for includ all the requests from different",
    "start": "678040",
    "end": "683079"
  },
  {
    "text": "tasks uh the kernel worker task which we talked about earlier will serialize them on the ring buffer",
    "start": "683079",
    "end": "690279"
  },
  {
    "text": "a request on rim buffer will be converted to structure message and structure command structure message",
    "start": "690279",
    "end": "695959"
  },
  {
    "text": "represents a major functionality of this mpu request such as command load or command process and the structure",
    "start": "695959",
    "end": "703120"
  },
  {
    "text": "command contains the request m p iova for fir two",
    "start": "703120",
    "end": "708839"
  },
  {
    "text": "poers later k will copy these message and command structures to the rim buffer",
    "start": "708839",
    "end": "713880"
  },
  {
    "text": "and update the r pointer on the mailbox header at this point a sending request action is done again know that these",
    "start": "713880",
    "end": "721079"
  },
  {
    "text": "data are all on DM Shard buffer so they are both visible by kernel and",
    "start": "721079",
    "end": "727560"
  },
  {
    "text": "mpu uh the request data format is like following uh not that the data space as",
    "start": "728360",
    "end": "733600"
  },
  {
    "text": "is allocated through I or DM buff hips so it's not on the rim bu or the default",
    "start": "733600",
    "end": "739279"
  },
  {
    "text": "DM spaces when this when the request is command load the request payload is",
    "start": "739279",
    "end": "745040"
  },
  {
    "text": "always beg with a structure called NCP Hider",
    "start": "745040",
    "end": "750120"
  },
  {
    "text": "um the ncv header stores the pointer to the memory vector and address Vector",
    "start": "750120",
    "end": "755160"
  },
  {
    "text": "array memory Vector contains some basic attributes of feature map such as its type its weight or height and it also",
    "start": "755160",
    "end": "763560"
  },
  {
    "text": "saves an index value points to the related address Vector address Vector",
    "start": "763560",
    "end": "768639"
  },
  {
    "text": "contains an aov address point to the feature Maps data frame if it's command process request",
    "start": "768639",
    "end": "776360"
  },
  {
    "text": "the command payload will start directly with address Vector array and it's m",
    "start": "776360",
    "end": "781600"
  },
  {
    "text": "addr fi uh save the I buffers iova which stores the feature Maps data",
    "start": "781600",
    "end": "788639"
  },
  {
    "text": "frame okay to sum up uh kernel and MP transfer data through the mailbox on the",
    "start": "788639",
    "end": "794800"
  },
  {
    "text": "D buffer a cur worker task will include all these all the mCP request and ser",
    "start": "794800",
    "end": "800440"
  },
  {
    "text": "them on the mailbox R buffer then update the read or red pointer to notify the other side there's a new request or",
    "start": "800440",
    "end": "807600"
  },
  {
    "text": "response uh the real request payload is on DM buffer created by I it is a shared",
    "start": "807600",
    "end": "813560"
  },
  {
    "text": "buffer both between by user space kernel and firmware now let's have a brief overview",
    "start": "813560",
    "end": "821040"
  },
  {
    "text": "of the firmware side like we said earlier the firmware image is saved in the Android fil system and will be",
    "start": "821040",
    "end": "827079"
  },
  {
    "text": "loaded to the DM Shar buffer while opening MW device the processor is a",
    "start": "827079",
    "end": "832160"
  },
  {
    "text": "32bit arm V some core and the rdos system running on it so with no more mod",
    "start": "832160",
    "end": "837680"
  },
  {
    "text": "than OS mitigation when firmare build up uh it will first in some subsystems such as Heap events",
    "start": "837680",
    "end": "845360"
  },
  {
    "text": "then it will start F native tasks to handle the request from the mailbox for example the task mailbox low priority",
    "start": "845360",
    "end": "852560"
  },
  {
    "text": "function mainly for handling the data on this uh first h2f which means host to",
    "start": "852560",
    "end": "858480"
  },
  {
    "text": "frame of firmware Rim buffer array and this function will Loop to",
    "start": "858480",
    "end": "865199"
  },
  {
    "text": "check the rep priner on the mailbox header once the rep once the reped red",
    "start": "865199",
    "end": "870440"
  },
  {
    "text": "printer has been update uh the firmare know that there's a new request from the colonel side later it will call",
    "start": "870440",
    "end": "877440"
  },
  {
    "text": "different Handler according to the command field of the structure message oh",
    "start": "877440",
    "end": "884320"
  },
  {
    "text": "sorry and after processing the request payload F firware will update the reinter in the mailbox header and to",
    "start": "884320",
    "end": "891040"
  },
  {
    "text": "tell konel that it has finished they handle the request and this is a whole cycle of request",
    "start": "891040",
    "end": "897680"
  },
  {
    "text": "processing now let's look at some new issues of xendos mpu this vulnerability is in the",
    "start": "897680",
    "end": "904279"
  },
  {
    "text": "world exploited with calling two different L control of npu The KES format can be freed twice and this is a",
    "start": "904279",
    "end": "911959"
  },
  {
    "text": "very stable double free so no reasing needed so it's very",
    "start": "911959",
    "end": "917399"
  },
  {
    "text": "exploitable the patch is to just set the pointer to null to avoid this double",
    "start": "918440",
    "end": "924680"
  },
  {
    "text": "free this C is a time of check time of use SP you the M driver uh like we said",
    "start": "924920",
    "end": "930600"
  },
  {
    "text": "earlier the I buff is created in user space to store the request payload and",
    "start": "930600",
    "end": "936279"
  },
  {
    "text": "this buffer is shared by both user space kernel and M firmware when kernel Malo",
    "start": "936279",
    "end": "941399"
  },
  {
    "text": "the hip space first time the size is get from the shared buffer first and the wrench has been checked",
    "start": "941399",
    "end": "947800"
  },
  {
    "text": "correctly but the kernel will get the address Vector index again from the DM",
    "start": "947800",
    "end": "953120"
  },
  {
    "text": "buffer causing the double fetch to trigger The Bu we can create a thread to change this value to a very big number",
    "start": "953120",
    "end": "960079"
  },
  {
    "text": "and it will cause a heap out of one R issue later the patch is to get the index from",
    "start": "960079",
    "end": "967279"
  },
  {
    "text": "DM buffer only one time and and more run check to prevent the out of",
    "start": "967279",
    "end": "972680"
  },
  {
    "text": "bound and this SV is in mpu firmware this function parsing nit is mainly for",
    "start": "972680",
    "end": "980000"
  },
  {
    "text": "parsing the NCP header and the related memory vector and the address Vector array but all these inner fi such as",
    "start": "980000",
    "end": "987160"
  },
  {
    "text": "memory Vector offset the address Vector offset doesn't have any run check so it",
    "start": "987160",
    "end": "992839"
  },
  {
    "text": "will cause multiple outof bound access issues the patch is to add multiple uh",
    "start": "992839",
    "end": "999800"
  },
  {
    "text": "multiple run check to prevent the outof bound access now kernel side and the fir side both have R",
    "start": "999800",
    "end": "1007240"
  },
  {
    "text": "check but there's a there's a problem with this patch let's compare the r check code",
    "start": "1007240",
    "end": "1013199"
  },
  {
    "text": "from the kernel and firmware the firmware only make sure that offset at count Plus sio should be in the correct",
    "start": "1013199",
    "end": "1020319"
  },
  {
    "text": "range but it doesn't check the address Vector index uh the kernel driver does",
    "start": "1020319",
    "end": "1025798"
  },
  {
    "text": "the address Vector index is the index for finding the address vector and we know that this is on DM",
    "start": "1025799",
    "end": "1033918"
  },
  {
    "text": "buffer shared by user space kernel and firmware so we get in time of check and time of use Spock the check of address",
    "start": "1033919",
    "end": "1041480"
  },
  {
    "text": "Vector index happens in driver side but the use is in the firmware which like the r",
    "start": "1041480",
    "end": "1047400"
  },
  {
    "text": "check um to trigger the bug we can start a stride in user space change this address",
    "start": "1047400",
    "end": "1054480"
  },
  {
    "text": "Vector index to a much bigger value uh the race window is after colel driver's",
    "start": "1054480",
    "end": "1059520"
  },
  {
    "text": "check but before firmer use and finally this time of check T of use bu will cause out of bound access issue in",
    "start": "1059520",
    "end": "1066080"
  },
  {
    "text": "firmware and crash the phone so how can we exploit it uh as we",
    "start": "1066080",
    "end": "1073200"
  },
  {
    "text": "can see few lines after the book uh the local varial 14 and 15 are all user",
    "start": "1073200",
    "end": "1078720"
  },
  {
    "text": "controllable which is calculate by the V height and straight saving the memory",
    "start": "1078720",
    "end": "1084280"
  },
  {
    "text": "Vector which all we control so here we get an arbitary address right",
    "start": "1084280",
    "end": "1090000"
  },
  {
    "text": "primitive to use this arbitary right we can change the native task Handler to",
    "start": "1090000",
    "end": "1095559"
  },
  {
    "text": "our shod address uh task Handler array is saved",
    "start": "1095559",
    "end": "1100720"
  },
  {
    "text": "on firmer Hep hip area to know what the address is uh we can modify firmware to",
    "start": "1100720",
    "end": "1106400"
  },
  {
    "text": "hook the maloc function uh like the picture shows because there is no Integrity protection for the firmare",
    "start": "1106400",
    "end": "1113600"
  },
  {
    "text": "image yet and it will print the mic resting the",
    "start": "1113600",
    "end": "1119240"
  },
  {
    "text": "message we can put our sh code on the M hip space since all heaps are mapped",
    "start": "1119559",
    "end": "1126200"
  },
  {
    "text": "executable also all sh codes are hardcoded because there is no SLR on the",
    "start": "1126200",
    "end": "1132080"
  },
  {
    "text": "firware so we don't need any inic uh the firmware uh the sh code I use is just a print Holo from hello from",
    "start": "1132080",
    "end": "1139559"
  },
  {
    "text": "M strain in the K debug message uh and here's the exploit",
    "start": "1139559",
    "end": "1146240"
  },
  {
    "text": "demo the device is Galaxy A51 the ad show here is D message and grab the to",
    "start": "1146240",
    "end": "1152960"
  },
  {
    "text": "weit the sh code strain as a s l policy we talked about earlier this exploit can be finished",
    "start": "1152960",
    "end": "1159600"
  },
  {
    "text": "with a normal AP so here's a strange already showed",
    "start": "1159600",
    "end": "1165000"
  },
  {
    "text": "and finally we run our sh code in the M processor",
    "start": "1165000",
    "end": "1170240"
  },
  {
    "text": "um as I reverse more there's more bugs with the same bug pattern uh this bug is",
    "start": "1170799",
    "end": "1176120"
  },
  {
    "text": "galaxy54 firware also in the par in function the body offset will be got",
    "start": "1176120",
    "end": "1182360"
  },
  {
    "text": "from DM buffer twice so it's also a time of check time of use",
    "start": "1182360",
    "end": "1187559"
  },
  {
    "text": "issue since I only audit few functions I think there should be more bugs to be fun with this bug",
    "start": "1187559",
    "end": "1195240"
  },
  {
    "text": "pattern uh okay now let's take a look at the Apple neuron engine",
    "start": "1196520",
    "end": "1202000"
  },
  {
    "text": "AKA there are some excellent work before uh such as attacking Apple's neuron",
    "start": "1202000",
    "end": "1207159"
  },
  {
    "text": "engine by Simo 36 and apple neuro engine interal by visual uh I strongly",
    "start": "1207159",
    "end": "1212480"
  },
  {
    "text": "recommend you read this if you want to look into this area uh to simplify the any architecture the pre-rain modile",
    "start": "1212480",
    "end": "1219400"
  },
  {
    "text": "will be converted to a hwx Meco format model file by corl framework then the",
    "start": "1219400",
    "end": "1225919"
  },
  {
    "text": "privilege process and a use this file to create a NE program uh later apite can",
    "start": "1225919",
    "end": "1233080"
  },
  {
    "text": "send request to npu with this program handle this section I'll mainly talk about some new issues of the N before",
    "start": "1233080",
    "end": "1240960"
  },
  {
    "text": "and the box I found by the patch analysis this is in in inal extension",
    "start": "1240960",
    "end": "1248320"
  },
  {
    "text": "function f index to WID doesn't check the index range which may cause out of bound access the argument index and",
    "start": "1248320",
    "end": "1255679"
  },
  {
    "text": "offsets are read directly from multiple section of the model file which is user",
    "start": "1255679",
    "end": "1260760"
  },
  {
    "text": "controllable the patch here is adding run check for the index this bug is an intergal overflow",
    "start": "1260760",
    "end": "1268400"
  },
  {
    "text": "in inernal extension uh the argument A2 and A4 uh are all user controllable uh the",
    "start": "1268400",
    "end": "1275960"
  },
  {
    "text": "intergal flow issue will cause a calculate result which klock here to a",
    "start": "1275960",
    "end": "1281559"
  },
  {
    "text": "very small number uh later the if check here only check whether the kog is",
    "start": "1281559",
    "end": "1287159"
  },
  {
    "text": "smaller than the maxim range but then check with the smallest Range so here is is a almost arbitrary address right",
    "start": "1287159",
    "end": "1294159"
  },
  {
    "text": "vulnerability to any address prior than the MK section and this bug is a little similar",
    "start": "1294159",
    "end": "1301360"
  },
  {
    "text": "with the previous Samsung bug uh the kernel driver get op opon twice from the",
    "start": "1301360",
    "end": "1306799"
  },
  {
    "text": "share buffer so with some reason we can trigger this double Fetch and causing a",
    "start": "1306799",
    "end": "1311840"
  },
  {
    "text": "auto bond issue the patch is also similar to Samsung uh which get the value from the shraer only one",
    "start": "1311840",
    "end": "1320039"
  },
  {
    "text": "time uh this Auto R bu is in Program stand request function the rot CA is",
    "start": "1320360",
    "end": "1327200"
  },
  {
    "text": "that the function even doesn't check the total intermediate buffers count which is user controllable and it will lead to",
    "start": "1327200",
    "end": "1334039"
  },
  {
    "text": "out bound right issue later uh I found this bug with the patch analysis uh the structure has changed to",
    "start": "1334039",
    "end": "1341080"
  },
  {
    "text": "a new format uh which input and output share the same array which total Max",
    "start": "1341080",
    "end": "1346480"
  },
  {
    "text": "should be 255 surface ID but the range check even doesn't change so the total",
    "start": "1346480",
    "end": "1352520"
  },
  {
    "text": "input buffer and total output buffer ad May bigger than 255 so here is an outbound access issue",
    "start": "1352520",
    "end": "1359440"
  },
  {
    "text": "which may cause T confusion later uh so as we can see there are lots",
    "start": "1359440",
    "end": "1366080"
  },
  {
    "text": "of bugs in the paring logic of the multiple section of the model file in fact I was going to talk about more bugs",
    "start": "1366080",
    "end": "1372400"
  },
  {
    "text": "I found by the patch analysis but other bugs are still not fixed yet so I can talk more about",
    "start": "1372400",
    "end": "1379279"
  },
  {
    "text": "them okay now please welcome my colleague L to talk about the snap dragon and PB and its exploitation thank",
    "start": "1379279",
    "end": "1385880"
  },
  {
    "text": "you okay uh hello everyone uh so let's start",
    "start": "1385880",
    "end": "1394320"
  },
  {
    "text": "getting to the Qualcomm Snapdragon Pew driver by opening the file uh dv/ MSM",
    "start": "1394320",
    "end": "1403000"
  },
  {
    "text": "mpu we can interact with mpu driver and the mpu driver provides many IO control",
    "start": "1403000",
    "end": "1409320"
  },
  {
    "text": "commands for user space apps to use untrusted apps can also access these iio",
    "start": "1409320",
    "end": "1415440"
  },
  {
    "text": "control commands on some devices here we will focus on two IO control commands which are mpu load",
    "start": "1415440",
    "end": "1422919"
  },
  {
    "text": "Network V2 and MP unload Network the MP load Network V2 is used to load a neural",
    "start": "1422919",
    "end": "1430480"
  },
  {
    "text": "network model onto the mpu and mpu unload network is used to unload a new",
    "start": "1430480",
    "end": "1438159"
  },
  {
    "text": "Network model both of them uh use MP Network command object to interact with",
    "start": "1438159",
    "end": "1445000"
  },
  {
    "text": "MP firware first of all let's have a look",
    "start": "1445000",
    "end": "1450919"
  },
  {
    "text": "at how the command mpu load Network V2",
    "start": "1450919",
    "end": "1456399"
  },
  {
    "text": "works at first it will allocate a mpu network",
    "start": "1457600",
    "end": "1463240"
  },
  {
    "text": "object and then it will allocate a mpu network command object by calling the",
    "start": "1463240",
    "end": "1469399"
  },
  {
    "text": "function mpu allock Network command the mpu network uh command object is called",
    "start": "1469399",
    "end": "1476600"
  },
  {
    "text": "a load command and we can say it's allocated from a dedicated km",
    "start": "1476600",
    "end": "1484480"
  },
  {
    "text": "catch after that the load command will be cued into the command list of the mpu",
    "start": "1486159",
    "end": "1493799"
  },
  {
    "text": "network and the function mpu send Network command will be called to send",
    "start": "1493799",
    "end": "1499320"
  },
  {
    "text": "the load command to M firware for executing after that the driver will",
    "start": "1499320",
    "end": "1505600"
  },
  {
    "text": "wait for the load command to be completed when the MW firware completes",
    "start": "1505600",
    "end": "1512240"
  },
  {
    "text": "the load command it will wake up the driver's",
    "start": "1512240",
    "end": "1517279"
  },
  {
    "text": "side since the load command has been completed it will be Deed from the uh",
    "start": "1517279",
    "end": "1523559"
  },
  {
    "text": "command list of the M Network object by in the function mpu DQ Network",
    "start": "1523559",
    "end": "1531880"
  },
  {
    "text": "command after the DQ operation the load command will be released by Kap catch",
    "start": "1531919",
    "end": "1538640"
  },
  {
    "text": "free and if the S Bar field of it is valid the S buff will also be released",
    "start": "1538640",
    "end": "1545840"
  },
  {
    "text": "by km catch fre after all these steps the command mpu low Network V2 is",
    "start": "1545840",
    "end": "1555320"
  },
  {
    "text": "completed and so let's have a look at at how the command mpu unload network works",
    "start": "1555320",
    "end": "1561399"
  },
  {
    "text": "actually the workflow of it is almost the same as the command mpu load Network",
    "start": "1561399",
    "end": "1567240"
  },
  {
    "text": "V2 first they we'll find the mpu network object index by the uh Network handle",
    "start": "1567240",
    "end": "1573840"
  },
  {
    "text": "passed from user space and then a mpu network command",
    "start": "1573840",
    "end": "1579279"
  },
  {
    "text": "object called unload command is allocated this unload command object is",
    "start": "1579279",
    "end": "1585960"
  },
  {
    "text": "also queued into the uh command list of current mpu Network",
    "start": "1585960",
    "end": "1592480"
  },
  {
    "text": "object after that a driver will send unload command to mpu formare and wait",
    "start": "1592480",
    "end": "1598640"
  },
  {
    "text": "for completion of it when mpu formare completes the unload command it will Rec",
    "start": "1598640",
    "end": "1603960"
  },
  {
    "text": "up the driver side so now uh the unload command has",
    "start": "1603960",
    "end": "1609399"
  },
  {
    "text": "been completed it will DEQ from the command list of the mpu",
    "start": "1609399",
    "end": "1615559"
  },
  {
    "text": "network and after the DQ operation the unload command will be",
    "start": "1615559",
    "end": "1621360"
  },
  {
    "text": "released uh in addition to the releasing of unload command object there is",
    "start": "1621360",
    "end": "1626440"
  },
  {
    "text": "another important operation for MP onload Network which is a free network",
    "start": "1626440",
    "end": "1632679"
  },
  {
    "text": "in the free network all the mpu network command objects in the command list will",
    "start": "1632679",
    "end": "1638760"
  },
  {
    "text": "be deed and released we need we need to note this because it's the key point for",
    "start": "1638760",
    "end": "1644480"
  },
  {
    "text": "us to understand the vulnerability later uh now let's talk about the Box we found",
    "start": "1644480",
    "end": "1652039"
  },
  {
    "text": "recently uh here is a question we need to think about if we try to unload a",
    "start": "1652039",
    "end": "1657679"
  },
  {
    "text": "network con con currently what would happen first let's say how to unload a",
    "start": "1657679",
    "end": "1664799"
  },
  {
    "text": "network in a single task actually this is just the workflow of the command mpu unload Network as we can see task a will",
    "start": "1664799",
    "end": "1673600"
  },
  {
    "text": "acquire the new TX loog and allocate the onload command one and que it into",
    "start": "1673600",
    "end": "1679679"
  },
  {
    "text": "command list of the network and then it will drop the M Tex lock and wait for",
    "start": "1679679",
    "end": "1685159"
  },
  {
    "text": "complete completion of uh the unload command one when it's down it will",
    "start": "1685159",
    "end": "1691440"
  },
  {
    "text": "acquire the new text lock again to DQ and release the unload command",
    "start": "1691440",
    "end": "1696519"
  },
  {
    "text": "one and uh it will call a free network to release all the network command",
    "start": "1696519",
    "end": "1702440"
  },
  {
    "text": "objects in the command list but if there is a uh task B which",
    "start": "1702440",
    "end": "1708960"
  },
  {
    "text": "is trying to load the same network at the same time something strange will",
    "start": "1708960",
    "end": "1714200"
  },
  {
    "text": "happen as you can say if task B acquires the M TX log right after task a drops it",
    "start": "1714200",
    "end": "1721120"
  },
  {
    "text": "it will trigger the function free network here uh as we have mentioned the free",
    "start": "1721120",
    "end": "1728279"
  },
  {
    "text": "free network will release all Network command in the command list so the",
    "start": "1728279",
    "end": "1734399"
  },
  {
    "text": "unload command one object will get released here after this when task a try",
    "start": "1734399",
    "end": "1740480"
  },
  {
    "text": "to use the unload command one it will trigger the uef or double free issue so",
    "start": "1740480",
    "end": "1746600"
  },
  {
    "text": "this is this is the root cause of the bug and with this bug we can get at at",
    "start": "1746600",
    "end": "1753679"
  },
  {
    "text": "least at least three different Primitives including the list delete primitive upur free primitive and double",
    "start": "1753679",
    "end": "1762640"
  },
  {
    "text": "free primitive actually the app tree free primitive attracts us more",
    "start": "1762640",
    "end": "1768000"
  },
  {
    "text": "and we start to think about how to exploit with it besides the powerful Primitives The",
    "start": "1768000",
    "end": "1775039"
  },
  {
    "text": "Bu also provides a large enough time window for us to perform the perform the",
    "start": "1775039",
    "end": "1781880"
  },
  {
    "text": "attack however there are some limitations when exploiting first uh M",
    "start": "1781880",
    "end": "1787240"
  },
  {
    "text": "Network command object is allocated from a dedicated km catch so we need to think",
    "start": "1787240",
    "end": "1792440"
  },
  {
    "text": "about how to occupy the released M Network command object at at beginning",
    "start": "1792440",
    "end": "1797720"
  },
  {
    "text": "our first attempt was to occupy it with the mpu network command object itself",
    "start": "1797720",
    "end": "1804039"
  },
  {
    "text": "but sadly we didn't find any exploitable exploitable rins so we decided to",
    "start": "1804039",
    "end": "1810320"
  },
  {
    "text": "perform a a perform cross catch attack unfortunately we found it's hard",
    "start": "1810320",
    "end": "1816519"
  },
  {
    "text": "to discard the uh Network command catch slab by manipulating the mpu network",
    "start": "1816519",
    "end": "1822679"
  },
  {
    "text": "command objects because uh every mpu Network command object gets allocated",
    "start": "1822679",
    "end": "1828799"
  },
  {
    "text": "and then released immediately well lucky for us because of",
    "start": "1828799",
    "end": "1834399"
  },
  {
    "text": "uh slab Morin uh mpu Network command object is sharing the same K patch km",
    "start": "1834399",
    "end": "1840480"
  },
  {
    "text": "catch with other K objects we can manage to finish the uh slab discard by",
    "start": "1840480",
    "end": "1846720"
  },
  {
    "text": "manipulating other Kel objects what's more uh the size of mpu",
    "start": "1846720",
    "end": "1854039"
  },
  {
    "text": "network command object is4 four byes which is",
    "start": "1854039",
    "end": "1859399"
  },
  {
    "text": "misaligned so if we try to occupy the released mpu Network command object with",
    "start": "1859399",
    "end": "1865279"
  },
  {
    "text": "some common struct objects um there is a really big chance that illegal memory",
    "start": "1865279",
    "end": "1871639"
  },
  {
    "text": "access would happen when these three perameters gets get",
    "start": "1871639",
    "end": "1878440"
  },
  {
    "text": "executed but we try to occupy the released mpu Network command object with",
    "start": "1878440",
    "end": "1883919"
  },
  {
    "text": "Aras Things become simple as you can see here no matter where the released MP",
    "start": "1883919",
    "end": "1889919"
  },
  {
    "text": "Network command object locates in the Aras lab the content in the released mpu",
    "start": "1889919",
    "end": "1895600"
  },
  {
    "text": "Network command object can always be the same we tried some AR objects it turned",
    "start": "1895600",
    "end": "1901519"
  },
  {
    "text": "out that the file array is a really perfect victim uh first of all corrupting the",
    "start": "1901519",
    "end": "1909200"
  },
  {
    "text": "first 16 bytes of fire object had has no side effect which is really important",
    "start": "1909200",
    "end": "1915480"
  },
  {
    "text": "because the list delay operation would corrupt the first 16 bytes of the fire object and every",
    "start": "1915480",
    "end": "1923360"
  },
  {
    "text": "element of fire rate can be set to a valid fire pointer or zero individually",
    "start": "1923360",
    "end": "1929760"
  },
  {
    "text": "which is really convenient and what's more corrupting any element in file",
    "start": "1929760",
    "end": "1934840"
  },
  {
    "text": "array won't cause Panic right away unless you access a corresponding file",
    "start": "1934840",
    "end": "1941919"
  },
  {
    "text": "object uh it would be like this this if we manag to occupy the released m",
    "start": "1941919",
    "end": "1947240"
  },
  {
    "text": "Network Commander with the file array as you can see here if we set the",
    "start": "1947240",
    "end": "1954279"
  },
  {
    "text": "disar field of mpu network network command object uh to a fire object",
    "start": "1954279",
    "end": "1959720"
  },
  {
    "text": "pointer we will get a fire UF issue here yes that's correct f uef is a very",
    "start": "1959720",
    "end": "1968039"
  },
  {
    "text": "popular kind of vulnerability in recent years and so many re researchers has",
    "start": "1968039",
    "end": "1973639"
  },
  {
    "text": "disclosed and exploited such vulnerabilities uh actually me and Y had",
    "start": "1973639",
    "end": "1979200"
  },
  {
    "text": "also come up with a new method to exploit FF in this year the method is",
    "start": "1979200",
    "end": "1985159"
  },
  {
    "text": "called Dirty page table I wrote a really detailed blogs about how we use dirty",
    "start": "1985159",
    "end": "1991039"
  },
  {
    "text": "page page table to exploit H based vulnerabilities including the",
    "start": "1991039",
    "end": "1998360"
  },
  {
    "text": "FF and this time uh let's use dir page table directly to exploit this F UF bu",
    "start": "1998360",
    "end": "2005519"
  },
  {
    "text": "here here are only explain explain some key ideas of how D pable exploits the FF",
    "start": "2005519",
    "end": "2013840"
  },
  {
    "text": "uh first it would be like this if we occupy the victim file object with the",
    "start": "2013840",
    "end": "2019519"
  },
  {
    "text": "users user page tables as you can see the F count of victim file object is",
    "start": "2019519",
    "end": "2026480"
  },
  {
    "text": "collided with the victim pte second we can perform the increment",
    "start": "2026480",
    "end": "2033600"
  },
  {
    "text": "primitive of file UF by calling the system is called D but col is called d",
    "start": "2033600",
    "end": "2039720"
  },
  {
    "text": "uh page size times we can manage to add Ox 1000 to the victim pte this can be",
    "start": "2039720",
    "end": "2046960"
  },
  {
    "text": "powerful because we can manage to read or write another page physical page",
    "start": "2046960",
    "end": "2052480"
  },
  {
    "text": "which is in accessible before uh through the user viral",
    "start": "2052480",
    "end": "2058158"
  },
  {
    "text": "address so uh what if the physical page we happens to be the one which pip pipe",
    "start": "2058159",
    "end": "2064638"
  },
  {
    "text": "buffer lies in yes we just controlled the pipe buffer by manipulating the",
    "start": "2064639",
    "end": "2070839"
  },
  {
    "text": "content of the pipe buffer we can get arbitary address uh read writing you",
    "start": "2070839",
    "end": "2078240"
  },
  {
    "text": "know easily",
    "start": "2078240",
    "end": "2083520"
  },
  {
    "text": "uh here is a demo of rooting the Samsung s20 device with the bug because the",
    "start": "2083520",
    "end": "2091520"
  },
  {
    "text": "because of the sensing nox I'm using the ABC overwriting technique to bypass the",
    "start": "2091520",
    "end": "2097160"
  },
  {
    "text": "as Linux and using the uh user mode hel technique to spawn a reverse Road",
    "start": "2097160",
    "end": "2104240"
  },
  {
    "text": "shell",
    "start": "2125800",
    "end": "2128800"
  },
  {
    "text": "okay uh that's a",
    "start": "2133760",
    "end": "2137320"
  },
  {
    "text": "demo okay the conclusion I think there are still many time of check or double",
    "start": "2143920",
    "end": "2149400"
  },
  {
    "text": "fetch box in the M device to be found and Patch analysis is a very useful way",
    "start": "2149400",
    "end": "2154560"
  },
  {
    "text": "to find new books and I think Android venders should correctly enhance the a Linux policy to restrict resource access",
    "start": "2154560",
    "end": "2162520"
  },
  {
    "text": "for the future work I think uh firware side can be reversed more since they are really lack of review and the mod fi",
    "start": "2162520",
    "end": "2169560"
  },
  {
    "text": "parsing and the lower level Hardware implementation may also be a big attack",
    "start": "2169560",
    "end": "2176480"
  },
  {
    "text": "surface here are good some res source that we refer uh if you're interested in this area I strongly recommend you read",
    "start": "2176480",
    "end": "2183319"
  },
  {
    "text": "them and that's all for our talk thank you very much",
    "start": "2183319",
    "end": "2188720"
  }
]