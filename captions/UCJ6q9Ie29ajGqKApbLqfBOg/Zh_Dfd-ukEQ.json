[
  {
    "text": "[Music]",
    "start": "4180",
    "end": "17720"
  },
  {
    "text": "so this talk is about demigod a new tool that allows you to analyze kernel rookies",
    "start": "18080",
    "end": "23279"
  },
  {
    "text": "in shockwave emulators so this project was done by a team of",
    "start": "23279",
    "end": "29359"
  },
  {
    "text": "three people my name is whitney quinn i'm working in nan yang technological university of singapore i",
    "start": "29359",
    "end": "36719"
  },
  {
    "text": "have many interests that include operating system virtualization and binary",
    "start": "36719",
    "end": "43840"
  },
  {
    "text": "and i'm the founder and maintainer of few open source reversing frameworks like capstone disassembler",
    "start": "43840",
    "end": "50480"
  },
  {
    "text": "unicorn emulator and keystone assembler the next team member is win hong kong",
    "start": "50480",
    "end": "57280"
  },
  {
    "text": "he's a researcher at retail cyber security he has some interest in fasting and",
    "start": "57280",
    "end": "62640"
  },
  {
    "text": "exploitation the last team member is domington he's a",
    "start": "62640",
    "end": "69760"
  },
  {
    "text": "security researcher of science tech and he has interest in fasting and exploits",
    "start": "69760",
    "end": "75680"
  },
  {
    "text": "don is a member of a ctf team named baby phd",
    "start": "75680",
    "end": "80799"
  },
  {
    "text": "and he made some presentation at blackhead usa asia d2 and xcon",
    "start": "80799",
    "end": "88320"
  },
  {
    "text": "so in this talk we will look into the background and we present the motivation of this",
    "start": "88400",
    "end": "96079"
  },
  {
    "text": "demigod works and after that we introduce how we design how we implemented demigod and",
    "start": "96079",
    "end": "103680"
  },
  {
    "text": "how demigod can emulate kernel rootkits for different platforms which is windows",
    "start": "103680",
    "end": "109920"
  },
  {
    "text": "mac os and linux we have few demos in our talks and finally",
    "start": "109920",
    "end": "116960"
  },
  {
    "text": "we introduce some more exciting applications that you can build on top of this framework",
    "start": "116960",
    "end": "124640"
  },
  {
    "text": "okay first we look at the background and motivation of demigod okay gonna look it we know that computer",
    "start": "125439",
    "end": "132319"
  },
  {
    "text": "system consists of two main areas with different privileges",
    "start": "132319",
    "end": "137520"
  },
  {
    "text": "first one is user lan which is ring3 in x86 the second one is os content which is",
    "start": "137520",
    "end": "143440"
  },
  {
    "text": "green 0. so canon function at the lowest level is a system",
    "start": "143440",
    "end": "149599"
  },
  {
    "text": "which has a full control on the whole system and the malware running inside the kernel is called kernel root case",
    "start": "149599",
    "end": "157040"
  },
  {
    "text": "and because conor rooked function at the same level with the kernel it has a full power so it can defeat all",
    "start": "157040",
    "end": "164160"
  },
  {
    "text": "the monitoring and defensive mechanism in the system kernel rookies are very",
    "start": "164160",
    "end": "169599"
  },
  {
    "text": "hard to detect and kill because it can have many chicks to eat vegetation or you can even queue or fool any",
    "start": "169599",
    "end": "178840"
  },
  {
    "text": "anti-malware tones so when",
    "start": "178840",
    "end": "184560"
  },
  {
    "text": "people build the kernel rookies they try to make it highly compatible easy to build and easy to maintain so",
    "start": "184560",
    "end": "191360"
  },
  {
    "text": "that's why most kernel rookies come in the form of kernel maroons or kernel drivers",
    "start": "191360",
    "end": "196800"
  },
  {
    "text": "which is doses files on windows dot qx files on mac os or dot ko file on",
    "start": "196800",
    "end": "203280"
  },
  {
    "text": "linux ok so we want to analyze control quiz",
    "start": "203280",
    "end": "208720"
  },
  {
    "text": "which is not easy at all we set a target that we want to analyze",
    "start": "208720",
    "end": "215840"
  },
  {
    "text": "kernel rookie coming to some forms binary forms which is which means we need to analyze",
    "start": "215840",
    "end": "223200"
  },
  {
    "text": "the sys files or text files or ko files depending on the platforms",
    "start": "223200",
    "end": "229280"
  },
  {
    "text": "so there are two ways to analyze current rookies coming in the form of kernel",
    "start": "229280",
    "end": "234879"
  },
  {
    "text": "drivers first way is that we can use dynamic analysis",
    "start": "234879",
    "end": "240319"
  },
  {
    "text": "techniques but this way is pretty troubling nowadays to analyze kernel",
    "start": "240319",
    "end": "248480"
  },
  {
    "text": "root kit using dynamic analysis techniques we",
    "start": "248480",
    "end": "253680"
  },
  {
    "text": "need two machines which can be a physical machine or virtual machines so we run one rootkit on one machine and",
    "start": "253680",
    "end": "261759"
  },
  {
    "text": "we run our analysis tune on another machine and also on the on the second machine",
    "start": "261759",
    "end": "268479"
  },
  {
    "text": "you can run some debugger connect to the machine that running rookies the problem",
    "start": "268479",
    "end": "274240"
  },
  {
    "text": "with this solution is that when you analyze the kernel kit the kernel rootkit can crash a machine",
    "start": "274240",
    "end": "282960"
  },
  {
    "text": "and because konoroki functions as a very low level in the system we have very low visibility on the",
    "start": "282960",
    "end": "291120"
  },
  {
    "text": "activities of the kernel rookies and finally most of the analysis stones for malware",
    "start": "291120",
    "end": "298479"
  },
  {
    "text": "are built for easterland but not for the kernel goodnight good so in fact we have very few tools that",
    "start": "298479",
    "end": "305600"
  },
  {
    "text": "can analyze kernel rookies nowadays the second approach is starting analysis",
    "start": "305600",
    "end": "311039"
  },
  {
    "text": "which is that you put your kernel rookie files into some analysis tools like idi pro",
    "start": "311039",
    "end": "317759"
  },
  {
    "text": "or binary ninja or whatever however amazing can locate in static",
    "start": "317759",
    "end": "324720"
  },
  {
    "text": "analysis while assist is also very short on some",
    "start": "324720",
    "end": "330080"
  },
  {
    "text": "first upon kernel rookie can be packed and in that case an assistant starting assistant cannot",
    "start": "330080",
    "end": "336880"
  },
  {
    "text": "recognize them and actually kernel rookie function depends on the",
    "start": "336880",
    "end": "343120"
  },
  {
    "text": "kernel settings and most of the time kernel drivers do not have the settings",
    "start": "343120",
    "end": "349199"
  },
  {
    "text": "so static analysis stones cannot decode and",
    "start": "349199",
    "end": "354560"
  },
  {
    "text": "recognize the kernel rookie very well and in fact we tried many",
    "start": "354560",
    "end": "361280"
  },
  {
    "text": "many static assistant on kernel rookies and most of them have",
    "start": "361280",
    "end": "367360"
  },
  {
    "text": "many issues with missing api recognizing wrongly the kernel structure and",
    "start": "367360",
    "end": "373039"
  },
  {
    "text": "so on so we think that we need a better tools",
    "start": "373039",
    "end": "378319"
  },
  {
    "text": "for kernel rookies what if we can analyze",
    "start": "378319",
    "end": "384080"
  },
  {
    "text": "kernel rootkit from userland in that case we do not have kernel",
    "start": "384080",
    "end": "391360"
  },
  {
    "text": "we do not have a machine class issue anymore we do not need to set up separate machine",
    "start": "391360",
    "end": "396479"
  },
  {
    "text": "for analyzing kernel rookies because because everything is in ring tree",
    "start": "396479",
    "end": "401840"
  },
  {
    "text": "and we do not have much risk with current level malware",
    "start": "401840",
    "end": "407280"
  },
  {
    "text": "and if everything is in ring tree you have very good visibility in the current",
    "start": "407280",
    "end": "412400"
  },
  {
    "text": "activities in the into the activities of kernel rookies and we can reuse many existing tones",
    "start": "412400",
    "end": "418479"
  },
  {
    "text": "to analyze kernel requests in ringtree",
    "start": "418479",
    "end": "423840"
  },
  {
    "text": "we also want to analyze gun requests in cross platform and close architecture way sometimes first of all",
    "start": "424240",
    "end": "431440"
  },
  {
    "text": "it would be very nice if you can analyze windows kernel rookies on linux and",
    "start": "431440",
    "end": "436639"
  },
  {
    "text": "vice versa we can analyze a linux kernel kit on windows that would",
    "start": "436639",
    "end": "441919"
  },
  {
    "text": "be even better and we also want to analyze the first",
    "start": "441919",
    "end": "447919"
  },
  {
    "text": "point i am gonna rookies on acoustic machine and if you can do that which is very",
    "start": "447919",
    "end": "454720"
  },
  {
    "text": "nice and finally a better tune for kernel requests would allow",
    "start": "454720",
    "end": "460720"
  },
  {
    "text": "us to view more and better advanced analysis tune",
    "start": "460720",
    "end": "468479"
  },
  {
    "text": "and would be nice if we can build our",
    "start": "468479",
    "end": "473840"
  },
  {
    "text": "next advanced analysis tool in high level language like python",
    "start": "475360",
    "end": "482560"
  },
  {
    "text": "so we consider many approach and we choose emulator approach",
    "start": "483199",
    "end": "490479"
  },
  {
    "text": "so the idea is that we want to emulate a west kernel software so we can run",
    "start": "490479",
    "end": "497360"
  },
  {
    "text": "kernel drivers kernel rookies in emulator mode in the emulators and because emulator",
    "start": "497360",
    "end": "503919"
  },
  {
    "text": "run in ring tree so if we can emulate the kernel rookies",
    "start": "503919",
    "end": "508960"
  },
  {
    "text": "inside the emulator we do not have colon we do not have a machine class anymore",
    "start": "508960",
    "end": "515200"
  },
  {
    "text": "we don't have issue with setting up separate machine or virtual machine to analyze kernel rookies",
    "start": "515200",
    "end": "521039"
  },
  {
    "text": "and we don't have reach with the analyzing kernel rookies because we emulate everything in",
    "start": "521039",
    "end": "528000"
  },
  {
    "text": "in the safety sandbox and we can reuse many existing tools",
    "start": "528000",
    "end": "534160"
  },
  {
    "text": "if you can analyze kernel rookies inside emulators you have excellent visibility",
    "start": "534160",
    "end": "540000"
  },
  {
    "text": "because you can see on the execution code and you can instrument at virus level",
    "start": "540000",
    "end": "548959"
  },
  {
    "text": "finally if you can use some close platform and cross architecture emulator then you can do cross platform",
    "start": "548959",
    "end": "555839"
  },
  {
    "text": "architecture analysis on the kernel rookies and in the case if the emulator is used",
    "start": "555839",
    "end": "561440"
  },
  {
    "text": "in like higher level language like python then you can easily build our own tones",
    "start": "561440",
    "end": "568560"
  },
  {
    "text": "to analyze many kernel rookies easily and quickly",
    "start": "568560",
    "end": "573600"
  },
  {
    "text": "okay in the next session we introduce how how we design and how we implemented demigod",
    "start": "574959",
    "end": "582399"
  },
  {
    "text": "so let's look at an existing emulator which is very close to",
    "start": "583120",
    "end": "588480"
  },
  {
    "text": "what we are looking for we are talking about chilling emulator",
    "start": "588480",
    "end": "593600"
  },
  {
    "text": "which is open source emulator it support multiple operating system so chilling can emulate",
    "start": "593600",
    "end": "600959"
  },
  {
    "text": "windows macos linux it supports multiple cpu architectures",
    "start": "600959",
    "end": "606240"
  },
  {
    "text": "so it can handle binary code from x statistic m m64 and mips",
    "start": "606240",
    "end": "613760"
  },
  {
    "text": "it's between python open source and it allows you to instrument perform",
    "start": "613760",
    "end": "619200"
  },
  {
    "text": "instrumentation at virus levels at basic block at injection level",
    "start": "619200",
    "end": "626000"
  },
  {
    "text": "you can also instrument memory accent and so on",
    "start": "626000",
    "end": "630560"
  },
  {
    "text": "chilling has one very good debugger viewing which is compatible",
    "start": "631120",
    "end": "639200"
  },
  {
    "text": "with gdp docker so you can connect many",
    "start": "639200",
    "end": "644880"
  },
  {
    "text": "debugger to the emulator to debug uh emulate the code running inside and",
    "start": "644880",
    "end": "651040"
  },
  {
    "text": "inside shielding however the issue with chilling is that",
    "start": "651040",
    "end": "656160"
  },
  {
    "text": "we want to emulate kernel rookies but chilling is not built",
    "start": "656160",
    "end": "661519"
  },
  {
    "text": "to handle current code at all it can only emulate easily encode",
    "start": "661519",
    "end": "667760"
  },
  {
    "text": "so because the loader for conor maroon is very different from the loader",
    "start": "667760",
    "end": "673279"
  },
  {
    "text": "for user lan binaries chilling cannot handle content drivers",
    "start": "673279",
    "end": "678480"
  },
  {
    "text": "at all chilling is not made to emulate kernel components",
    "start": "678480",
    "end": "684560"
  },
  {
    "text": "kernel apis and the scheme of chilling is quite different it's",
    "start": "684560",
    "end": "689839"
  },
  {
    "text": "built to run the easterland code from beginning to end but kernel module function differently",
    "start": "689839",
    "end": "697680"
  },
  {
    "text": "we need to load the colon module into the emulator first and let it initialize and after that",
    "start": "697680",
    "end": "705279"
  },
  {
    "text": "depending on the user input gonna rootkit will run different code",
    "start": "705279",
    "end": "712000"
  },
  {
    "text": "part depend on the depending on the input so it's the scheme of",
    "start": "712000",
    "end": "717200"
  },
  {
    "text": "emulating the kernel uh driver is quite different zone from the emulating the user encode",
    "start": "717200",
    "end": "724560"
  },
  {
    "text": "so the idea is that we fork chilling emitter and we build demigod on",
    "start": "725279",
    "end": "731040"
  },
  {
    "text": "top of chilling because of that we can reuse many",
    "start": "731040",
    "end": "736560"
  },
  {
    "text": "existing nice features of shielding so we can reuse a lot of chilling with",
    "start": "736720",
    "end": "742560"
  },
  {
    "text": "lithium modification you can reuse simple relocation you can",
    "start": "742560",
    "end": "747920"
  },
  {
    "text": "reuse imported function functionalities inside the chilling loaders but you had",
    "start": "747920",
    "end": "754959"
  },
  {
    "text": "you need to view many of our own tones because chilean do not have those",
    "start": "754959",
    "end": "762399"
  },
  {
    "text": "features first of all we need to emulate the kernel components our shell",
    "start": "762399",
    "end": "767680"
  },
  {
    "text": "demi god also need to emulate current apis by hooking and emulating the emulate on",
    "start": "767680",
    "end": "774560"
  },
  {
    "text": "the current api semantics and",
    "start": "774560",
    "end": "780320"
  },
  {
    "text": "we also had to do our own instrumentation for the colon",
    "start": "780639",
    "end": "789279"
  },
  {
    "text": "rookies to work we need to hook and emulate system kernel api",
    "start": "789839",
    "end": "795120"
  },
  {
    "text": "and for debugging this is good because you can reuse the",
    "start": "795120",
    "end": "801360"
  },
  {
    "text": "existing zdb server between inside chilling so then you got can independence gdp server",
    "start": "801360",
    "end": "809360"
  },
  {
    "text": "when you emulate the kernel rookies so we can debug the kernel rookies running inside the",
    "start": "809360",
    "end": "815360"
  },
  {
    "text": "chilling so here i want to emphasize one thing",
    "start": "815360",
    "end": "822079"
  },
  {
    "text": "that makes demigods different from the chilling the easterline core is typically only one phase emulation",
    "start": "822079",
    "end": "829600"
  },
  {
    "text": "zit is what shielding does but for demigod we need to emulate the kernel rookies in two phase",
    "start": "829600",
    "end": "837440"
  },
  {
    "text": "first we need to load the kernel driver first and after that the kernel the kernel",
    "start": "837440",
    "end": "844000"
  },
  {
    "text": "drivers are going to locate start inside the demo emulator",
    "start": "844000",
    "end": "849040"
  },
  {
    "text": "and wait for the request from users from the users",
    "start": "849040",
    "end": "855040"
  },
  {
    "text": "so we have to emulate the driver and keys for that we need to locate ng to emulate",
    "start": "855040",
    "end": "861920"
  },
  {
    "text": "so for windows we need to locate the driver ng inside the doses files for mac os we need to locate",
    "start": "861920",
    "end": "868720"
  },
  {
    "text": "real main shipboard inside the dotx file for linux.kl files you need to locate",
    "start": "868720",
    "end": "876000"
  },
  {
    "text": "model in it so after that we can start emulation from the library entry",
    "start": "876000",
    "end": "882480"
  },
  {
    "text": "but reading during the this phase we need to",
    "start": "882480",
    "end": "887839"
  },
  {
    "text": "monitor and extract on the code path that we can see when the kernel rookie",
    "start": "887839",
    "end": "895680"
  },
  {
    "text": "was initialized so first of all you want to check out the the rootkit system cost",
    "start": "895680",
    "end": "902160"
  },
  {
    "text": "because rokit can override some system code in inside the system we need to retrieve",
    "start": "902160",
    "end": "907760"
  },
  {
    "text": "the i o control convex and many other contacts that depend on the platforms",
    "start": "907760",
    "end": "914160"
  },
  {
    "text": "and the next phase the second phase that once we get on the",
    "start": "914800",
    "end": "920000"
  },
  {
    "text": "going back on the code path that we want to explore we",
    "start": "920000",
    "end": "926160"
  },
  {
    "text": "try to emulate the",
    "start": "926160",
    "end": "931199"
  },
  {
    "text": "code path that users choose to explore so as this phase",
    "start": "931920",
    "end": "939360"
  },
  {
    "text": "user can decide which code path",
    "start": "939360",
    "end": "944320"
  },
  {
    "text": "they want to emulate and",
    "start": "944880",
    "end": "949920"
  },
  {
    "text": "by doing that they choose input and send input to the z-score part and the record can",
    "start": "950160",
    "end": "958160"
  },
  {
    "text": "emulate the cisco part with this input coming from users",
    "start": "958160",
    "end": "964240"
  },
  {
    "text": "so building typical is very challenging because emulate kernel is very tough they have so many",
    "start": "965040",
    "end": "970399"
  },
  {
    "text": "complex completed shockwave components inside the inside the kernel but we choose to limit our",
    "start": "970399",
    "end": "977360"
  },
  {
    "text": "implementation we only emulate enough to make root kit works",
    "start": "977360",
    "end": "984320"
  },
  {
    "text": "and building lotter for color river is also very hard because it's quite different from from",
    "start": "985199",
    "end": "991440"
  },
  {
    "text": "chilling what shilling does and how to analyze initialized",
    "start": "991440",
    "end": "998639"
  },
  {
    "text": "driver is also not easy not trivial and during the driver initialization we",
    "start": "998639",
    "end": "1006160"
  },
  {
    "text": "need to extract the code bus to be emulated and after that how to trigger the code",
    "start": "1006160",
    "end": "1011759"
  },
  {
    "text": "part with properly formatted input from users is also another task we need to consider",
    "start": "1011759",
    "end": "1020160"
  },
  {
    "text": "so in the next section we i hand over to mr quang who will introduce how we implement the",
    "start": "1020399",
    "end": "1028160"
  },
  {
    "text": "implemented windows emulator for windows kernel rookies hello",
    "start": "1028160",
    "end": "1035520"
  },
  {
    "text": "my name is juan today i will introduce about the bigger framework i use demigod to",
    "start": "1035520",
    "end": "1043120"
  },
  {
    "text": "emulate window driver there are many things in windows kernel that we should conserve",
    "start": "1043120",
    "end": "1049440"
  },
  {
    "text": "the more important thing is antioxidant so far is known as chrono image of",
    "start": "1049440",
    "end": "1056320"
  },
  {
    "text": "microsoft window window cannot contain many components such as",
    "start": "1056320",
    "end": "1061840"
  },
  {
    "text": "tech manager memory manager and scheduler to emulate windows driver we have to",
    "start": "1061840",
    "end": "1068400"
  },
  {
    "text": "understand kernel structures kernel api functions and right code to copy",
    "start": "1068400",
    "end": "1074720"
  },
  {
    "text": "or mimic the behaviors of window kernel i load driver module into emulator and",
    "start": "1074720",
    "end": "1081600"
  },
  {
    "text": "start emulating from the entry point i also in human memory asset",
    "start": "1081600",
    "end": "1089200"
  },
  {
    "text": "and code execution by using helping technique after",
    "start": "1089200",
    "end": "1094760"
  },
  {
    "text": "initialization is complete i use io control code to communicate",
    "start": "1094760",
    "end": "1100559"
  },
  {
    "text": "with driver every driver is a p5",
    "start": "1100559",
    "end": "1106880"
  },
  {
    "text": "as a subsystem field optional header er 1 so that i have to read the header",
    "start": "1106880",
    "end": "1114799"
  },
  {
    "text": "file session then write them into memory of emulator i also load dependent library result",
    "start": "1114799",
    "end": "1122720"
  },
  {
    "text": "in part and read table after that i check the location table to relocate",
    "start": "1122720",
    "end": "1128400"
  },
  {
    "text": "every address the second step is setting up cpu contact",
    "start": "1128400",
    "end": "1134320"
  },
  {
    "text": "we should set up stack pointer with pi to stack location",
    "start": "1134320",
    "end": "1140480"
  },
  {
    "text": "i p point to entry point and control register some driver",
    "start": "1140640",
    "end": "1147520"
  },
  {
    "text": "will not work if cr4s register and clf register are not set the third step",
    "start": "1147520",
    "end": "1156799"
  },
  {
    "text": "is industrializing some important structures such as",
    "start": "1156799",
    "end": "1162400"
  },
  {
    "text": "variable object e process and the last one i prepared for driver",
    "start": "1162400",
    "end": "1168480"
  },
  {
    "text": "engine the first this is the first driver contact",
    "start": "1168480",
    "end": "1173520"
  },
  {
    "text": "and is due to initialize the driver",
    "start": "1173520",
    "end": "1179039"
  },
  {
    "text": "now i will introduce some internal structure",
    "start": "1179039",
    "end": "1184320"
  },
  {
    "text": "the first one is driver object represents the emit of loaded driver i",
    "start": "1184320",
    "end": "1192160"
  },
  {
    "text": "initialize some things such as ties side rib name and major function field",
    "start": "1192160",
    "end": "1200080"
  },
  {
    "text": "e process represents a process object there are many",
    "start": "1200080",
    "end": "1206240"
  },
  {
    "text": "hidden fields and just a look at a memory reason for this structure",
    "start": "1206240",
    "end": "1212799"
  },
  {
    "text": "k user say data either that data structure is between user mode and kernel mode",
    "start": "1213200",
    "end": "1221360"
  },
  {
    "text": "component irp structure represent",
    "start": "1221360",
    "end": "1227039"
  },
  {
    "text": "an io request packet io stack location is an energy",
    "start": "1227039",
    "end": "1233919"
  },
  {
    "text": "in io stack and associated with hrp",
    "start": "1233919",
    "end": "1240000"
  },
  {
    "text": "mdl either structures associated memory data storage",
    "start": "1240000",
    "end": "1248240"
  },
  {
    "text": "driver entry is the first function that you'll do in this client driver defense electron",
    "start": "1248240",
    "end": "1255840"
  },
  {
    "text": "at energy point the first argument is the pointer to a driver object",
    "start": "1255840",
    "end": "1263600"
  },
  {
    "text": "structure and the second one is a pointer to unicode string structure",
    "start": "1263600",
    "end": "1269760"
  },
  {
    "text": "that specifies a path to drive a parameter key in registry i also",
    "start": "1269760",
    "end": "1277200"
  },
  {
    "text": "write some hook api to mimic window api",
    "start": "1277200",
    "end": "1284320"
  },
  {
    "text": "i implement hook function to emulate api and make everything work for example",
    "start": "1285840",
    "end": "1292880"
  },
  {
    "text": "i will create device will create a fake object in memory of emulator to zpram device object",
    "start": "1292880",
    "end": "1300080"
  },
  {
    "text": "i will complete the quest do nothing but lock on the parameter some memory",
    "start": "1300080",
    "end": "1307280"
  },
  {
    "text": "management concerns such as a location egg free boom works similar as malloc",
    "start": "1307280",
    "end": "1314080"
  },
  {
    "text": "and free",
    "start": "1314080",
    "end": "1319840"
  },
  {
    "text": "after everything is ready user's pay program can communicate with driver via io control code or",
    "start": "1320080",
    "end": "1328400"
  },
  {
    "text": "refi and wi-fi a great structure irp i o stack location in",
    "start": "1328400",
    "end": "1335919"
  },
  {
    "text": "memory emulator i find a structure with appropriate",
    "start": "1335919",
    "end": "1341440"
  },
  {
    "text": "data setup i will mess for combat function and i start emulating from the beginning",
    "start": "1341440",
    "end": "1347840"
  },
  {
    "text": "function when everything is complete i did my written value and written data by",
    "start": "1347840",
    "end": "1354240"
  },
  {
    "text": "reading irp structure from emulate from emulator memory",
    "start": "1354240",
    "end": "1361840"
  },
  {
    "text": "there are three methods to communicate with driver the first method is buffer io so i",
    "start": "1362400",
    "end": "1368480"
  },
  {
    "text": "create a large enough buffer in the side and right of z buffer to irb",
    "start": "1368480",
    "end": "1374000"
  },
  {
    "text": "system buffer the second method is direct io i create a buffer to store data",
    "start": "1374000",
    "end": "1381520"
  },
  {
    "text": "and create a mdl structure for this",
    "start": "1381520",
    "end": "1386840"
  },
  {
    "text": "buffer and the last one neither i o i just set use a buffer fill",
    "start": "1386840",
    "end": "1394880"
  },
  {
    "text": "a 5 rp structure part 2 card drive of this buffer",
    "start": "1394880",
    "end": "1402000"
  },
  {
    "text": "i also pray to tone for reversal the first tone is a tune to attack candle mode packer",
    "start": "1402000",
    "end": "1410400"
  },
  {
    "text": "and the second one is a tool to have when working with io control code",
    "start": "1410400",
    "end": "1417280"
  },
  {
    "text": "now we want some demonstration the first demo i will debug",
    "start": "1417280",
    "end": "1424240"
  },
  {
    "text": "a window driver",
    "start": "1424240",
    "end": "1431840"
  },
  {
    "text": "you see here i am i enable debug mode by adding the following line",
    "start": "1444480",
    "end": "1452158"
  },
  {
    "text": "and now i start to emulate driver",
    "start": "1453440",
    "end": "1459840"
  },
  {
    "text": "there are driver objects registry ebola set and user data upgrade",
    "start": "1466960",
    "end": "1476960"
  },
  {
    "text": "when everything is on driver is ready i use idi bro",
    "start": "1483600",
    "end": "1490960"
  },
  {
    "text": "to connect to the partner 999",
    "start": "1490960",
    "end": "1496960"
  },
  {
    "text": "and after that i can use idea debugger to try every instruction",
    "start": "1498720",
    "end": "1515840"
  },
  {
    "text": "and you can see this driver bring to consol hello",
    "start": "1563760",
    "end": "1572880"
  },
  {
    "text": "and then the second demonstration i want to",
    "start": "1582480",
    "end": "1589919"
  },
  {
    "text": "introduce about my",
    "start": "1589919",
    "end": "1596158"
  },
  {
    "text": "it wife sality mangua",
    "start": "1597600",
    "end": "1601760"
  },
  {
    "text": "you know sality is a polymorphic 5 factor",
    "start": "1608960",
    "end": "1614159"
  },
  {
    "text": "it communicates over a peer-to-peer network to form a botnet sanity",
    "start": "1614960",
    "end": "1623039"
  },
  {
    "text": "use a rootkit to block connection and kill antiv root process",
    "start": "1623039",
    "end": "1632158"
  },
  {
    "text": "i found a sample from verototo and i will debug block it from",
    "start": "1633360",
    "end": "1640720"
  },
  {
    "text": "saturday my way",
    "start": "1640720",
    "end": "1655840"
  },
  {
    "text": "i have searched and found a variable variant of website for beruto",
    "start": "1680080",
    "end": "1686720"
  },
  {
    "text": "there are 64 and then the detective 5.",
    "start": "1686720",
    "end": "1697840"
  },
  {
    "text": "at first i have to extract the main module from sanity so they use",
    "start": "1700320",
    "end": "1708640"
  },
  {
    "text": "a simple tool to a checkpoint kit and load the kit into memory",
    "start": "1708640",
    "end": "1715360"
  },
  {
    "text": "this is user mode module is a dynamic link library and i name it",
    "start": "1718640",
    "end": "1724399"
  },
  {
    "text": "sality dot bin i use led",
    "start": "1724399",
    "end": "1729440"
  },
  {
    "text": "extractor this is a script that i wrote from another research",
    "start": "1729440",
    "end": "1735679"
  },
  {
    "text": "after damage of the url i am packed by using up",
    "start": "1737120",
    "end": "1745919"
  },
  {
    "text": "nz",
    "start": "1750840",
    "end": "1753840"
  },
  {
    "text": "so",
    "start": "1778840",
    "end": "1781840"
  },
  {
    "text": "and then unlock this module into emulator",
    "start": "1806960",
    "end": "1823840"
  },
  {
    "text": "and now you can see society sq inside emulator",
    "start": "1842480",
    "end": "1848000"
  },
  {
    "text": "there are many there are too many interesting emulator speed will spend",
    "start": "1848399",
    "end": "1856159"
  },
  {
    "text": "much time to execute",
    "start": "1856159",
    "end": "1865840"
  },
  {
    "text": "now you see this is a sality my manufacturer service",
    "start": "1901360",
    "end": "1909360"
  },
  {
    "text": "here is name and we have a service name and",
    "start": "1910480",
    "end": "1916720"
  },
  {
    "text": "the binary part",
    "start": "1916720",
    "end": "1921840"
  },
  {
    "text": "this blocky product of sighting i will use idi pro debugger",
    "start": "1922960",
    "end": "1929519"
  },
  {
    "text": "to connect and debug it",
    "start": "1929519",
    "end": "1935840"
  },
  {
    "text": "i can step every injustice",
    "start": "1955840",
    "end": "1963840"
  },
  {
    "text": "so demand will communicate with driver by using wi-fi function",
    "start": "1964000",
    "end": "1977840"
  },
  {
    "text": "and the rocket had to thread the first track in block",
    "start": "2004720",
    "end": "2011120"
  },
  {
    "text": "on av all antivirus relay connection and the second one use",
    "start": "2011120",
    "end": "2017679"
  },
  {
    "text": "to clear process i will separate by us this thread to",
    "start": "2017679",
    "end": "2024320"
  },
  {
    "text": "debug player",
    "start": "2024320",
    "end": "2033840"
  },
  {
    "text": "so i think will find anti-terminate process",
    "start": "2058320",
    "end": "2065760"
  },
  {
    "text": "from user mode by using service decrypt table",
    "start": "2065760",
    "end": "2072079"
  },
  {
    "text": "and send an array of advanced to karnaugh mode token module",
    "start": "2072079",
    "end": "2089838"
  },
  {
    "text": "so",
    "start": "2100839",
    "end": "2103839"
  },
  {
    "text": "here you see solitary q apple process with the number",
    "start": "2182079",
    "end": "2188799"
  },
  {
    "text": "with our pid number",
    "start": "2190000",
    "end": "2193680"
  },
  {
    "text": "so my demonstration and next mr don will talk about how they become",
    "start": "2197839",
    "end": "2205119"
  },
  {
    "text": "work on map or essay thank you hello",
    "start": "2205119",
    "end": "2210480"
  },
  {
    "text": "i'm don and i'm gonna talk about the mechanism of a demigod for mac os so the macos kernel",
    "start": "2210480",
    "end": "2218880"
  },
  {
    "text": "is officially known as xnu and it is a hybrid kernel which combined",
    "start": "2218880",
    "end": "2225440"
  },
  {
    "text": "from much kernel and bsd kernel it also brings the format a much old",
    "start": "2225440",
    "end": "2232640"
  },
  {
    "text": "executable file the kernel exposes its interface",
    "start": "2232640",
    "end": "2238000"
  },
  {
    "text": "as known as kpi to let the user use its functionality and all of them",
    "start": "2238000",
    "end": "2245119"
  },
  {
    "text": "implement inside the kernel code like other os macos needs",
    "start": "2245119",
    "end": "2251920"
  },
  {
    "text": "drivers to control devices they are called as",
    "start": "2251920",
    "end": "2257839"
  },
  {
    "text": "kernel extension or kegs the kernel extension is a bundle of files and kernel",
    "start": "2258320",
    "end": "2265839"
  },
  {
    "text": "load it from external space some interesting information",
    "start": "2265839",
    "end": "2271599"
  },
  {
    "text": "can be got from info dot plist inside bundle",
    "start": "2271599",
    "end": "2277680"
  },
  {
    "text": "our goal is to emulate own code part from uncle part of a rootkit in the case",
    "start": "2277680",
    "end": "2286800"
  },
  {
    "text": "so in order to emulate driver i decide to load both kernel and kernel extension together",
    "start": "2286800",
    "end": "2294960"
  },
  {
    "text": "because the kernel is also much older executable binary as well as the main component of",
    "start": "2294960",
    "end": "2301359"
  },
  {
    "text": "the kx so i can load all of the 764 to emulator engine",
    "start": "2301359",
    "end": "2308160"
  },
  {
    "text": "now i have implemented code of all kpis from the kernel besides like a normal",
    "start": "2308160",
    "end": "2315680"
  },
  {
    "text": "application i have to resolve local symbols and some other dynamic symbols of the",
    "start": "2315680",
    "end": "2322079"
  },
  {
    "text": "kicks however the kernel release is kpis through some dependencies so it is",
    "start": "2322079",
    "end": "2329760"
  },
  {
    "text": "necessary to create a jump code as a kind of indirection calling",
    "start": "2329760",
    "end": "2336400"
  },
  {
    "text": "next a driver will run from its initial function and this",
    "start": "2336640",
    "end": "2343599"
  },
  {
    "text": "entry address can be extracted from binary symbol for iokit driver is that method and for",
    "start": "2343599",
    "end": "2351280"
  },
  {
    "text": "xenric driver is a is a address store in real men symbol",
    "start": "2351280",
    "end": "2358400"
  },
  {
    "text": "before emulating driver i should initialize kernel environment i set up mac",
    "start": "2358880",
    "end": "2365599"
  },
  {
    "text": "policy list by allocating new object in emulator engine and fill that address",
    "start": "2365599",
    "end": "2372240"
  },
  {
    "text": "in the target on kernel space the same thing i will do for own proc symbol on kernel space",
    "start": "2372240",
    "end": "2380000"
  },
  {
    "text": "i also create some vinod and credential then i run emulation for",
    "start": "2380000",
    "end": "2386880"
  },
  {
    "text": "pre-process such as attack pro or k-mode info",
    "start": "2386880",
    "end": "2393280"
  },
  {
    "text": "finally i can go into the entry of driver",
    "start": "2393280",
    "end": "2397838"
  },
  {
    "text": "speaking about the instrumentation i map on kpis which was export",
    "start": "2398480",
    "end": "2404560"
  },
  {
    "text": "from kernel to user-defined methods it helps to simplify some features",
    "start": "2404560",
    "end": "2411920"
  },
  {
    "text": "or we can pass through it and use native function on the other hand i can i also hook",
    "start": "2411920",
    "end": "2418640"
  },
  {
    "text": "kpis to disable multi-thread functionality and for some unrelated to horse",
    "start": "2418640",
    "end": "2426160"
  },
  {
    "text": "environment function i give driver a chance to interact with a real machine",
    "start": "2426160",
    "end": "2433359"
  },
  {
    "text": "for example get attribute list box is a function to retrieve every entries in the",
    "start": "2433359",
    "end": "2439680"
  },
  {
    "text": "directory so i just scan all the files and photos in directory and pack them using vfs",
    "start": "2439680",
    "end": "2447359"
  },
  {
    "text": "attribute pack function from the kernel about the cisco emulation i just",
    "start": "2447359",
    "end": "2454640"
  },
  {
    "text": "find the system symbol on load kernel space assign arguments to register",
    "start": "2454640",
    "end": "2461680"
  },
  {
    "text": "and run the entry address some cases we want to call a native kpi",
    "start": "2461680",
    "end": "2470400"
  },
  {
    "text": "from a hook kpi normally we have to save the current state and run another emulator",
    "start": "2470400",
    "end": "2478480"
  },
  {
    "text": "but it may screw up when in some complicated situations",
    "start": "2478480",
    "end": "2483680"
  },
  {
    "text": "so i construct a junk code and push its address to stack",
    "start": "2483680",
    "end": "2490319"
  },
  {
    "text": "as a safe rip junk code has three main missions",
    "start": "2490319",
    "end": "2496720"
  },
  {
    "text": "prepare arguments to register or stack clear stack after cooling",
    "start": "2496720",
    "end": "2502240"
  },
  {
    "text": "and jump to native kpi directly",
    "start": "2502240",
    "end": "2508880"
  },
  {
    "text": "under the kernel there are many events and contacts need to be emulated so i",
    "start": "2508880",
    "end": "2515680"
  },
  {
    "text": "build an event management system to listen a result a resistor request",
    "start": "2515680",
    "end": "2521599"
  },
  {
    "text": "from driver and emulate the interaction from user so this will make mac os",
    "start": "2521599",
    "end": "2528720"
  },
  {
    "text": "from asynchronous system to synchronous system i use ems for 60 ctrl",
    "start": "2528720",
    "end": "2537200"
  },
  {
    "text": "event nke event some network filter mac",
    "start": "2537200",
    "end": "2544480"
  },
  {
    "text": "precis converts and chaotic features so in order to show",
    "start": "2544480",
    "end": "2551920"
  },
  {
    "text": "how our tool works i will use demi god to analyze one of the famous rookies on",
    "start": "2551920",
    "end": "2558079"
  },
  {
    "text": "macos rublin it was released full disclosure in 2012.",
    "start": "2558079",
    "end": "2566720"
  },
  {
    "text": "it can give root through a running process hi-fi or folder etc",
    "start": "2566720",
    "end": "2574319"
  },
  {
    "text": "also it can it couldn't run on modern kernel due to some reason",
    "start": "2574480",
    "end": "2582000"
  },
  {
    "text": "such as memory arrangement kpi change read-only cisco table so to upgrade this",
    "start": "2582000",
    "end": "2589680"
  },
  {
    "text": "rookie i use safe rip from initial function and step back to find",
    "start": "2589680",
    "end": "2596640"
  },
  {
    "text": "the kernel base then i scan all the memories to find the",
    "start": "2596640",
    "end": "2602160"
  },
  {
    "text": "sequence of cisco handle to determine the cisco table",
    "start": "2602160",
    "end": "2607760"
  },
  {
    "text": "moreover i modified the cr0 resistor to override entries in",
    "start": "2607760",
    "end": "2614880"
  },
  {
    "text": "cisco table so here is the demo for running rookie",
    "start": "2614880",
    "end": "2621359"
  },
  {
    "text": "on the real machine",
    "start": "2621359",
    "end": "2624400"
  },
  {
    "text": "first i load the driver and run an agent on user space",
    "start": "2627200",
    "end": "2634800"
  },
  {
    "text": "from this ui i can command the rublin easily",
    "start": "2634800",
    "end": "2640240"
  },
  {
    "text": "like a high up running process",
    "start": "2643680",
    "end": "2649838"
  },
  {
    "text": "or hi-fi in current directory",
    "start": "2664240",
    "end": "2677839"
  },
  {
    "text": "uh even remote code execution through an icmp packet",
    "start": "2687760",
    "end": "2694319"
  },
  {
    "text": "here i will start the calculator",
    "start": "2697359",
    "end": "2701359"
  },
  {
    "text": "application",
    "start": "2702839",
    "end": "2705839"
  },
  {
    "text": "to emulate rublin i load it and run its initial function then it will",
    "start": "2728880",
    "end": "2735119"
  },
  {
    "text": "automatically register some contacts to my ems i also build some default objects like a",
    "start": "2735119",
    "end": "2742400"
  },
  {
    "text": "network cctl arguments and fake processes",
    "start": "2742400",
    "end": "2748400"
  },
  {
    "text": "here is the demo",
    "start": "2749599",
    "end": "2761839"
  },
  {
    "text": "now user can pass his input to some rootkit features",
    "start": "2770720",
    "end": "2776720"
  },
  {
    "text": "like grand route permission to a",
    "start": "2776720",
    "end": "2781838"
  },
  {
    "text": "process",
    "start": "2786839",
    "end": "2789839"
  },
  {
    "text": "hi a process",
    "start": "2793440",
    "end": "2803838"
  },
  {
    "text": "hi fi whose name is to do and con ios application",
    "start": "2808640",
    "end": "2817838"
  },
  {
    "text": "then i can trigger the back door through pin command",
    "start": "2839599",
    "end": "2845839"
  },
  {
    "text": "especially i can we can also debug this rookie by enabling gdb",
    "start": "2859280",
    "end": "2865839"
  },
  {
    "text": "feature of demigod this video will demonstrate the debugger",
    "start": "2865839",
    "end": "2874960"
  },
  {
    "text": "first i will disassemble all the instructions that rukit has went through to get the",
    "start": "2879280",
    "end": "2885920"
  },
  {
    "text": "address i want to set breakpoint",
    "start": "2885920",
    "end": "2889680"
  },
  {
    "text": "then i start the gdb server",
    "start": "2893440",
    "end": "2900400"
  },
  {
    "text": "and connect to it from gdb client",
    "start": "2900400",
    "end": "2905440"
  },
  {
    "text": "now i can step in step step",
    "start": "2912640",
    "end": "2918640"
  },
  {
    "text": "set a breakpoint",
    "start": "2919760",
    "end": "2922720"
  },
  {
    "text": "continue",
    "start": "2927359",
    "end": "2929838"
  },
  {
    "text": "settle fire breakpoint",
    "start": "2936559",
    "end": "2943839"
  },
  {
    "text": "continue",
    "start": "2946319",
    "end": "2948800"
  },
  {
    "text": "dumb resistor",
    "start": "2951920",
    "end": "2957838"
  },
  {
    "text": "and next mr queen win show how demigod works on lineups",
    "start": "2986160",
    "end": "2993680"
  },
  {
    "text": "okay so in this session i introduced how democrat",
    "start": "2994960",
    "end": "3000720"
  },
  {
    "text": "support linux kernel so we can analyze the kernel linux",
    "start": "3000800",
    "end": "3005920"
  },
  {
    "text": "kernel rookies inside demigod so linux is",
    "start": "3005920",
    "end": "3011119"
  },
  {
    "text": "linux kernel is actually a very complicated system with many subsystem but for them",
    "start": "3011119",
    "end": "3017680"
  },
  {
    "text": "we got we only look got some relevant subsystem",
    "start": "3017680",
    "end": "3024839"
  },
  {
    "text": "that are enough to make kernel rocket works the first one is system calls",
    "start": "3024839",
    "end": "3030319"
  },
  {
    "text": "because a cisco system can play very important roles to provide services and",
    "start": "3030319",
    "end": "3037760"
  },
  {
    "text": "many gunner rookies would override the system code to provide is their own functionalities",
    "start": "3037760",
    "end": "3045359"
  },
  {
    "text": "and we also care about the io io control system code because the kernel gonna get",
    "start": "3045359",
    "end": "3053119"
  },
  {
    "text": "routine can provide some functionality to the user land via this system code and also",
    "start": "3053119",
    "end": "3061280"
  },
  {
    "text": "some other convex that can indirectly trigger by the insulin that we also need",
    "start": "3061280",
    "end": "3067520"
  },
  {
    "text": "to emulate their first upon life high operations and because kernan rooted in linux",
    "start": "3067520",
    "end": "3075680"
  },
  {
    "text": "is built in us linux kernel module in dot ko format so we need to",
    "start": "3075680",
    "end": "3084400"
  },
  {
    "text": "support the dot key format which is er format but a bit different from the user lab",
    "start": "3084400",
    "end": "3090400"
  },
  {
    "text": "so the goal is that we try to emulate kernel toolkit in dot kl files",
    "start": "3090400",
    "end": "3098640"
  },
  {
    "text": "so for the loader of demigod for the dot ko files we need to view our own lotter which is",
    "start": "3099359",
    "end": "3106559"
  },
  {
    "text": "quite different from the lord of chilling so we need to pass on the section of ef files and map the",
    "start": "3106559",
    "end": "3113440"
  },
  {
    "text": "innovation into the emulator memory and demigod also need to",
    "start": "3113440",
    "end": "3118640"
  },
  {
    "text": "resolve on the external apis so we can provide our own implementation in the emulator",
    "start": "3118640",
    "end": "3125440"
  },
  {
    "text": "and finally we need to relocate the external function and simple data the next",
    "start": "3125440",
    "end": "3133200"
  },
  {
    "text": "thing demigod had to do is that you need to set up the cpu context so the kernel kit can function properly",
    "start": "3133200",
    "end": "3141440"
  },
  {
    "text": "and one object is that we need to set up gs segment for current tasks because many kernel rookies try to",
    "start": "3141440",
    "end": "3148720"
  },
  {
    "text": "access to the current task they need gs segment for this",
    "start": "3148720",
    "end": "3155119"
  },
  {
    "text": "we also need to initialize system system containment of linux kernel so",
    "start": "3155520",
    "end": "3162800"
  },
  {
    "text": "the kernel rookie can accept can read can drive to the system containment",
    "start": "3162800",
    "end": "3168880"
  },
  {
    "text": "so for this part we have to write the rest of our own system called implementation into",
    "start": "3168880",
    "end": "3174559"
  },
  {
    "text": "the system containment and we have to hook the system cost so when the rootkit",
    "start": "3174559",
    "end": "3181920"
  },
  {
    "text": "access to the system code we can execute our own system system call implementation",
    "start": "3181920",
    "end": "3189200"
  },
  {
    "text": "finally for the loader we have to locate the initialize function of the dot ko",
    "start": "3189200",
    "end": "3195520"
  },
  {
    "text": "file which is an init module symbol",
    "start": "3195520",
    "end": "3199520"
  },
  {
    "text": "to support linux kernel rookies we had to we had to emulate many linux structures",
    "start": "3201839",
    "end": "3209440"
  },
  {
    "text": "like dust chuck for the insulin task file operation because the root can",
    "start": "3209440",
    "end": "3216319"
  },
  {
    "text": "modify the vibration so it can trigger the contact to the",
    "start": "3216319",
    "end": "3222240"
  },
  {
    "text": "vibration like read right open and close we have to support the module structures",
    "start": "3222240",
    "end": "3229280"
  },
  {
    "text": "because the kernel rookie can access to the list of modules inside the system and",
    "start": "3229280",
    "end": "3236480"
  },
  {
    "text": "modify something like version they try to hide some kernel modules so they have to",
    "start": "3236480",
    "end": "3243040"
  },
  {
    "text": "read and write to the list of the modules and we have to support support ratio the few",
    "start": "3243040",
    "end": "3249760"
  },
  {
    "text": "other structures we have to support like user name space so the kernel kit can modify the user",
    "start": "3249760",
    "end": "3256880"
  },
  {
    "text": "credential we have to support file structures because gonorrhood can modify the file",
    "start": "3256880",
    "end": "3263839"
  },
  {
    "text": "structure and some other structures like linux direct so",
    "start": "3263839",
    "end": "3270800"
  },
  {
    "text": "this is necessary because some kind we can try to modify and hide some directories",
    "start": "3271760",
    "end": "3279839"
  },
  {
    "text": "okay so we didn't have to emulate the",
    "start": "3280000",
    "end": "3285280"
  },
  {
    "text": "dot ko file initialization and because when the kernel rookie when when the",
    "start": "3285280",
    "end": "3292240"
  },
  {
    "text": "hacker loads the gonna rookie into the system they can specify some",
    "start": "3292240",
    "end": "3299359"
  },
  {
    "text": "optional arguments so for the demigod to work properly",
    "start": "3299359",
    "end": "3306240"
  },
  {
    "text": "we have to do the same thing so you also need to support option arguments for the dot ko files",
    "start": "3306240",
    "end": "3316000"
  },
  {
    "text": "and uh okay assist phase user need to specify the input for the init module",
    "start": "3318079",
    "end": "3325440"
  },
  {
    "text": "engine and after that the mega can start to emulate from the init module",
    "start": "3325440",
    "end": "3332160"
  },
  {
    "text": "symbols okay we have to hook many looks good apis for the route it works properly",
    "start": "3332839",
    "end": "3340160"
  },
  {
    "text": "and here i list some of the most important apis inside linux gone",
    "start": "3340160",
    "end": "3346960"
  },
  {
    "text": "there is some api for",
    "start": "3346960",
    "end": "3349838"
  },
  {
    "text": "function generation for memory access for memory",
    "start": "3352000",
    "end": "3359280"
  },
  {
    "text": "management heap memory management for device management and some system cons we have to hope and",
    "start": "3359280",
    "end": "3366720"
  },
  {
    "text": "we need to emulate some system system connection",
    "start": "3366720",
    "end": "3371599"
  },
  {
    "text": "okay once we can extract on the code part we care about doing the current rootkit",
    "start": "3372880",
    "end": "3380160"
  },
  {
    "text": "init phase we can emulate them so first of all you can during the init",
    "start": "3380160",
    "end": "3387040"
  },
  {
    "text": "phase demigod can extract the system code because gunnery can",
    "start": "3387040",
    "end": "3392240"
  },
  {
    "text": "can override some system code so we can you need to get get them out and also we need to get all the code",
    "start": "3392240",
    "end": "3398000"
  },
  {
    "text": "bikes that can be registered by the kernel rookies",
    "start": "3398000",
    "end": "3404799"
  },
  {
    "text": "and after that we need to trigger all the copa the code path that user want to",
    "start": "3404799",
    "end": "3412240"
  },
  {
    "text": "emulate so as this phase user child user can decide the input arguments",
    "start": "3412240",
    "end": "3419200"
  },
  {
    "text": "for the code part that they decide to emulate",
    "start": "3419200",
    "end": "3425200"
  },
  {
    "text": "and yeah here i list some of the most popular code path that kernel",
    "start": "3426640",
    "end": "3433040"
  },
  {
    "text": "can can",
    "start": "3433040",
    "end": "3438319"
  },
  {
    "text": "can set up and use a need to specify the input for on those codepaths",
    "start": "3439200",
    "end": "3446880"
  },
  {
    "text": "if you want to imagine okay next i have a written demo for",
    "start": "3446880",
    "end": "3454799"
  },
  {
    "text": "linux so you can see how we can use demigod to analyze a kernel kit in linux and",
    "start": "3454799",
    "end": "3463920"
  },
  {
    "text": "in this case we looked at the kernel rookie name mohammed and this one is a very typical kind of",
    "start": "3464160",
    "end": "3471599"
  },
  {
    "text": "rookie with a many typical behaviors",
    "start": "3471599",
    "end": "3476799"
  },
  {
    "text": "first of all mohammed rookit can child to high current modules it can hide files",
    "start": "3476799",
    "end": "3483200"
  },
  {
    "text": "it can hide network posts it can grant good access to current process",
    "start": "3483200",
    "end": "3489200"
  },
  {
    "text": "and this rookie actually overrides many system cons and it can also interface with userland",
    "start": "3489200",
    "end": "3495839"
  },
  {
    "text": "via some using some customized files in slash pro",
    "start": "3495839",
    "end": "3501440"
  },
  {
    "text": "file system and actually you can find a source code of this kernel rootkit on",
    "start": "3501440",
    "end": "3507200"
  },
  {
    "text": "github so in this demo we try to emulate this control kit",
    "start": "3507200",
    "end": "3513520"
  },
  {
    "text": "and to do that demigod will load the rookit into the memory",
    "start": "3513520",
    "end": "3519040"
  },
  {
    "text": "initialize it and we try to extract the new system cone",
    "start": "3519040",
    "end": "3528240"
  },
  {
    "text": "made by the rookit for the right system code and in the demo we emulate",
    "start": "3528240",
    "end": "3534880"
  },
  {
    "text": "the this right system conjecture with some selected input and we chase",
    "start": "3534880",
    "end": "3542480"
  },
  {
    "text": "all the activities of the this rocket with a typical idea",
    "start": "3542480",
    "end": "3550000"
  },
  {
    "text": "so here i have the video demo",
    "start": "3550160",
    "end": "3555838"
  },
  {
    "text": "okay so here you can see that",
    "start": "3557119",
    "end": "3564640"
  },
  {
    "text": "i have a gonna look it in the file name rookie.ko",
    "start": "3565280",
    "end": "3572799"
  },
  {
    "text": "is going to emulate this rootkit.ko files",
    "start": "3574160",
    "end": "3579599"
  },
  {
    "text": "so you can see that on the screen you have two windows the console",
    "start": "3579599",
    "end": "3585280"
  },
  {
    "text": "on the left side in which demigod will emulate the kernel rookie",
    "start": "3585280",
    "end": "3590799"
  },
  {
    "text": "on the right side you run idi pro and ida pro will",
    "start": "3590799",
    "end": "3598000"
  },
  {
    "text": "be used as a debugger and we connect this debugger to the kernel rootkit running on the left side",
    "start": "3598000",
    "end": "3604960"
  },
  {
    "text": "on the console",
    "start": "3604960",
    "end": "3614640"
  },
  {
    "text": "okay so here you can see that on the left side when i run the corner look it in the in the migor emulator the group will",
    "start": "3614640",
    "end": "3622160"
  },
  {
    "text": "stop and it open the gdb interface at the localhost address at the port",
    "start": "3622160",
    "end": "3628920"
  },
  {
    "text": "99999 and we is going to wait for the debugger",
    "start": "3628920",
    "end": "3634000"
  },
  {
    "text": "to connect to so we run the idi pro debugger on the",
    "start": "3634000",
    "end": "3640079"
  },
  {
    "text": "right side and we set up the rdap row to connect to localhost at the port 9999",
    "start": "3640079",
    "end": "3648480"
  },
  {
    "text": "okay see here you can see that i try to attach idi pro to the gdb difficult inside the emulator on the",
    "start": "3654640",
    "end": "3661839"
  },
  {
    "text": "left side",
    "start": "3661839",
    "end": "3671839"
  },
  {
    "text": "okay you can see here that once we connect the debugger idi pro in set we put a breakpoint as a",
    "start": "3673359",
    "end": "3681760"
  },
  {
    "text": "initialized function of the kernel rookie and you can see that in the idi pro",
    "start": "3681760",
    "end": "3688400"
  },
  {
    "text": "window you can see the code of the debugger this is the code of the rootkit",
    "start": "3688400",
    "end": "3693839"
  },
  {
    "text": "so now i insert a break bar on the first injection which is the cone injection",
    "start": "3693839",
    "end": "3700000"
  },
  {
    "text": "and you can see that we can use a debugger like normal uh uh debugging session with the user",
    "start": "3700000",
    "end": "3706640"
  },
  {
    "text": "encode but you can see that you can debug kernel code",
    "start": "3706640",
    "end": "3713599"
  },
  {
    "text": "so here on the right side i do some single step and on the left side you see",
    "start": "3713599",
    "end": "3721039"
  },
  {
    "text": "that the colon actually runs and you can compare the left side the right side scissors",
    "start": "3721039",
    "end": "3726559"
  },
  {
    "text": "actually exactly the same thing the same injection get executed but you can see the",
    "start": "3726559",
    "end": "3734000"
  },
  {
    "text": "difference is that on the right side at this arrest",
    "start": "3734000",
    "end": "3739599"
  },
  {
    "text": "in the in the idea pro you can only see the cool some unknown function but on the left",
    "start": "3739599",
    "end": "3745760"
  },
  {
    "text": "side because we actually emulate the kernel grid you can see that this code actually is a",
    "start": "3745760",
    "end": "3752160"
  },
  {
    "text": "is a principle function and as this place actually the kernel rookie",
    "start": "3752160",
    "end": "3759520"
  },
  {
    "text": "print out a message which is modern starting",
    "start": "3759520",
    "end": "3768480"
  },
  {
    "text": "so you can see that on the right side idea pro doesn't seem much better on the left side because we actually emulate the kernel is you",
    "start": "3768480",
    "end": "3774240"
  },
  {
    "text": "can see a lot more information",
    "start": "3774240",
    "end": "3777599"
  },
  {
    "text": "okay so i continue to sink and step inside the debacle so you can",
    "start": "3779359",
    "end": "3787200"
  },
  {
    "text": "you can see how the conduit kit",
    "start": "3787599",
    "end": "3792480"
  },
  {
    "text": "executes",
    "start": "3794839",
    "end": "3797839"
  },
  {
    "text": "yeah you see here on the right side idea bro doesn't see much but on the left side we see many more information",
    "start": "3812400",
    "end": "3818079"
  },
  {
    "text": "live for sure when you see here that you can see here see on the left side that based on some",
    "start": "3818079",
    "end": "3823520"
  },
  {
    "text": "messages you can see the rookie already initialized some probe",
    "start": "3823520",
    "end": "3829280"
  },
  {
    "text": "some pro file system",
    "start": "3829280",
    "end": "3834319"
  },
  {
    "text": "okay here you can see that the initial life phase of the rookie is already done",
    "start": "3834319",
    "end": "3840880"
  },
  {
    "text": "and idea pro doesn't see much but demigod can see that this rookie modified three now four",
    "start": "3840880",
    "end": "3847839"
  },
  {
    "text": "system cons read right open and close",
    "start": "3847839",
    "end": "3852880"
  },
  {
    "text": "so the next phase that we decide that we want to explore the right system code made by",
    "start": "3852880",
    "end": "3859039"
  },
  {
    "text": "the rookit to see what this one does so we just continue to change in the",
    "start": "3859039",
    "end": "3867039"
  },
  {
    "text": "debugger",
    "start": "3867039",
    "end": "3869520"
  },
  {
    "text": "so on the left side actually that the for the the mirror to work we specify some",
    "start": "3872079",
    "end": "3877920"
  },
  {
    "text": "special input for the right system call and here you can see that",
    "start": "3877920",
    "end": "3884319"
  },
  {
    "text": "on the left side you can see that the rookie already made the current process root",
    "start": "3884319",
    "end": "3891838"
  },
  {
    "text": "and after right after this right system call",
    "start": "3893119",
    "end": "3898799"
  },
  {
    "text": "finish the current process become good that's what this rookie does okay",
    "start": "3898799",
    "end": "3908640"
  },
  {
    "text": "that's how the rootkit works and you can see that very clearly inside",
    "start": "3908640",
    "end": "3914559"
  },
  {
    "text": "the demo okay so actually you can see that the",
    "start": "3914559",
    "end": "3920559"
  },
  {
    "text": "mega can emulate the current rookies but more than that you",
    "start": "3920559",
    "end": "3925599"
  },
  {
    "text": "can view many more applications on the demigod framework",
    "start": "3925599",
    "end": "3931520"
  },
  {
    "text": "so you can debug kernel rookies in tree like what i already show you can",
    "start": "3931680",
    "end": "3937839"
  },
  {
    "text": "build auto unpacked for conan code so in that we can chase code",
    "start": "3937839",
    "end": "3944160"
  },
  {
    "text": "inside the kernel rookit today to detect the time the code is unpacked then we dump and you can auto view",
    "start": "3944160",
    "end": "3950799"
  },
  {
    "text": "rebuild the binaries you can view i o control analyzer",
    "start": "3950799",
    "end": "3956319"
  },
  {
    "text": "so we can automat automatically discover on the i o control code with different",
    "start": "3956319",
    "end": "3963520"
  },
  {
    "text": "input and you can exchange the code bicep i o control code you can also use auto summarize rookie",
    "start": "3963520",
    "end": "3971039"
  },
  {
    "text": "behavior to produce high level reports so",
    "start": "3971039",
    "end": "3977200"
  },
  {
    "text": "this idea is that you can view uh you can automatically discover",
    "start": "3977200",
    "end": "3983520"
  },
  {
    "text": "different rootkit paths with different random inputs and after that we can",
    "start": "3983520",
    "end": "3991039"
  },
  {
    "text": "build a summarized report for all the behaviors we can see",
    "start": "3991039",
    "end": "3996319"
  },
  {
    "text": "when the rookie execute with different input on",
    "start": "3996319",
    "end": "4002960"
  },
  {
    "text": "different code paths and the idea is that it's quite easy to",
    "start": "4002960",
    "end": "4008400"
  },
  {
    "text": "do that because they've got enabled save execution on checkpoints you can take snapshot and",
    "start": "4008400",
    "end": "4014079"
  },
  {
    "text": "reverse and there are many many other exciting ideas that i waiting for",
    "start": "4014079",
    "end": "4020640"
  },
  {
    "text": "you to explore so regretting the status and future",
    "start": "4020640",
    "end": "4026480"
  },
  {
    "text": "works for demigod the mover now already supported windows macos",
    "start": "4026480",
    "end": "4031599"
  },
  {
    "text": "and linux kernel rookies but there's still a lot more work in the future we still need to test and",
    "start": "4031599",
    "end": "4037839"
  },
  {
    "text": "to improve the regard to support more rookies so you need to handle more content apis",
    "start": "4037839",
    "end": "4043599"
  },
  {
    "text": "more system calls more content subsystem and maybe you can",
    "start": "4043599",
    "end": "4051359"
  },
  {
    "text": "look forward to supporting more platforms besides windows macos and linuxconon like ios or android",
    "start": "4051359",
    "end": "4059839"
  },
  {
    "text": "and we plan to merge demigod into the chilling emulator very soon",
    "start": "4059839",
    "end": "4066640"
  },
  {
    "text": "okay here come my conclusion the because it's a framework to emulate the kernel rookies",
    "start": "4067200",
    "end": "4072720"
  },
  {
    "text": "so you can analyze ring zero code from ring tree in safety box of the emulators so you can monitor you can",
    "start": "4072720",
    "end": "4080079"
  },
  {
    "text": "chase you can debug and create you can do on cap dynamic and assist with uh demi god",
    "start": "4080079",
    "end": "4086240"
  },
  {
    "text": "demigod was built on top of the excellent chilling emulators so we support multi-platforms",
    "start": "4086240",
    "end": "4092960"
  },
  {
    "text": "multi-architectures demogorgon enable advanced binary analysis",
    "start": "4092960",
    "end": "4098238"
  },
  {
    "text": "on top of the kernel code and they allow you to use python language to build your",
    "start": "4098239",
    "end": "4104480"
  },
  {
    "text": "analysis students and it supports many kind of instrumentation so you can",
    "start": "4104480",
    "end": "4110960"
  },
  {
    "text": "easily uh analyze the content rookies running inside them code",
    "start": "4110960",
    "end": "4116318"
  },
  {
    "text": "so we plan to release the full source code of demigod",
    "start": "4116319",
    "end": "4121600"
  },
  {
    "text": "variation and we plan to merge demigod into the chilling emulator very soon",
    "start": "4121600",
    "end": "4132880"
  },
  {
    "text": "okay now q a session",
    "start": "4132880",
    "end": "4138318"
  }
]