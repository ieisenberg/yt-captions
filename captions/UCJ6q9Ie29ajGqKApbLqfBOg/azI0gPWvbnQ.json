[
  {
    "text": "this is second breakfast implicit and",
    "start": "2840",
    "end": "4839"
  },
  {
    "text": "mutation-based serialization",
    "start": "4839",
    "end": "6080"
  },
  {
    "text": "vulnerabilities",
    "start": "6080",
    "end": "7400"
  },
  {
    "text": "in.net I'm Jonathan Burch I hack office",
    "start": "7400",
    "end": "10280"
  },
  {
    "text": "from Microsoft if you'd like to talk to",
    "start": "10280",
    "end": "12200"
  },
  {
    "text": "me about this presentation or anything",
    "start": "12200",
    "end": "13920"
  },
  {
    "text": "else security related please contact me",
    "start": "13920",
    "end": "15639"
  },
  {
    "text": "on",
    "start": "15639",
    "end": "16600"
  },
  {
    "text": "mastedon in this talk I'm going to talk",
    "start": "16600",
    "end": "18880"
  },
  {
    "text": "about various remote code execution",
    "start": "18880",
    "end": "20600"
  },
  {
    "text": "vulnerabilities I found in net nosql",
    "start": "20600",
    "end": "22519"
  },
  {
    "text": "engines I'll describe what I'm calling a",
    "start": "22519",
    "end": "24560"
  },
  {
    "text": "mutation-based serialization",
    "start": "24560",
    "end": "26160"
  },
  {
    "text": "vulnerability I'll tell you some ways",
    "start": "26160",
    "end": "28000"
  },
  {
    "text": "you can bypass serialization binders and",
    "start": "28000",
    "end": "30039"
  },
  {
    "text": "I'll talk about how to defend against",
    "start": "30039",
    "end": "31439"
  },
  {
    "text": "all of that so what got me started on",
    "start": "31439",
    "end": "34960"
  },
  {
    "text": "the research that led to this talk was",
    "start": "34960",
    "end": "36680"
  },
  {
    "text": "last fall I saw an article on a certain",
    "start": "36680",
    "end": "38800"
  },
  {
    "text": "orange-colored website about light DB",
    "start": "38800",
    "end": "40719"
  },
  {
    "text": "which is a net nosql driver and because",
    "start": "40719",
    "end": "43320"
  },
  {
    "text": "this is apparently the sort of thing I",
    "start": "43320",
    "end": "44559"
  },
  {
    "text": "do for fun now I decided to do a",
    "start": "44559",
    "end": "46680"
  },
  {
    "text": "security code review of their repo when",
    "start": "46680",
    "end": "49039"
  },
  {
    "text": "I did that I saw this code and what",
    "start": "49039",
    "end": "51480"
  },
  {
    "text": "jumped out to me in this code was",
    "start": "51480",
    "end": "53320"
  },
  {
    "text": "specifically this line this call to type",
    "start": "53320",
    "end": "55719"
  },
  {
    "text": "get type that's being passed a string",
    "start": "55719",
    "end": "57960"
  },
  {
    "text": "now to me that's a really bad sign",
    "start": "57960",
    "end": "60640"
  },
  {
    "text": "but why is that a bad sign so type get",
    "start": "60640",
    "end": "63719"
  },
  {
    "text": "type in net is used to convert a string",
    "start": "63719",
    "end": "66840"
  },
  {
    "text": "that's the name of a type into an actual",
    "start": "66840",
    "end": "69280"
  },
  {
    "text": "net type object and usually if you're",
    "start": "69280",
    "end": "71600"
  },
  {
    "text": "doing that what you're doing is you're",
    "start": "71600",
    "end": "73720"
  },
  {
    "text": "taking some user provided string and",
    "start": "73720",
    "end": "75479"
  },
  {
    "text": "you're letting that string decide what",
    "start": "75479",
    "end": "77280"
  },
  {
    "text": "type your application is going to made",
    "start": "77280",
    "end": "78680"
  },
  {
    "text": "what type of object so you're probably",
    "start": "78680",
    "end": "80759"
  },
  {
    "text": "doing some sort of marshalling like",
    "start": "80759",
    "end": "82159"
  },
  {
    "text": "you're writing your own custom",
    "start": "82159",
    "end": "83759"
  },
  {
    "text": "serializer or you're doing something",
    "start": "83759",
    "end": "86040"
  },
  {
    "text": "sketchy with reflection invokes and in",
    "start": "86040",
    "end": "88280"
  },
  {
    "text": "general all of this is a bad idea all",
    "start": "88280",
    "end": "89960"
  },
  {
    "text": "this is about on par with writing your",
    "start": "89960",
    "end": "91439"
  },
  {
    "text": "own cryp your own cryptography",
    "start": "91439",
    "end": "94079"
  },
  {
    "text": "algorithms or something like that and",
    "start": "94079",
    "end": "96040"
  },
  {
    "text": "what it means is if someone malicious",
    "start": "96040",
    "end": "97880"
  },
  {
    "text": "comes along they're sending you bad",
    "start": "97880",
    "end": "99520"
  },
  {
    "text": "types which means they're sending you",
    "start": "99520",
    "end": "100680"
  },
  {
    "text": "bad code and you're having a bad time so",
    "start": "100680",
    "end": "103439"
  },
  {
    "text": "what is light DB doing with this light",
    "start": "103439",
    "end": "105560"
  },
  {
    "text": "DB is a nosql engine and the way you end",
    "start": "105560",
    "end": "108439"
  },
  {
    "text": "up using it with net is your application",
    "start": "108439",
    "end": "110719"
  },
  {
    "text": "says to light DB I just want to store",
    "start": "110719",
    "end": "112200"
  },
  {
    "text": "this object with this key and light DB",
    "start": "112200",
    "end": "115399"
  },
  {
    "text": "takes that object and it serializes it",
    "start": "115399",
    "end": "117920"
  },
  {
    "text": "with a serializer they called bon mapper",
    "start": "117920",
    "end": "119680"
  },
  {
    "text": "in into a b stream which it stores in a",
    "start": "119680",
    "end": "121640"
  },
  {
    "text": "file later on when you want to get that",
    "start": "121640",
    "end": "123759"
  },
  {
    "text": "object back from the database it's going",
    "start": "123759",
    "end": "126200"
  },
  {
    "text": "to take that b again and deserialize it",
    "start": "126200",
    "end": "129119"
  },
  {
    "text": "with Bon mapper back into an object for",
    "start": "129119",
    "end": "130879"
  },
  {
    "text": "you so B is just a binary encoding of",
    "start": "130879",
    "end": "134080"
  },
  {
    "text": "Json so you can look at it as Json and",
    "start": "134080",
    "end": "136920"
  },
  {
    "text": "if you look at the light DB files decode",
    "start": "136920",
    "end": "139239"
  },
  {
    "text": "the beon in the Json it looks sort of",
    "start": "139239",
    "end": "140840"
  },
  {
    "text": "like this and if you look at this Json",
    "start": "140840",
    "end": "143920"
  },
  {
    "text": "there's this underscore type key in it",
    "start": "143920",
    "end": "147160"
  },
  {
    "text": "and then there's just the name of a DOT",
    "start": "147160",
    "end": "148760"
  },
  {
    "text": "inet type and so what's happening here",
    "start": "148760",
    "end": "151640"
  },
  {
    "text": "is when light DB is converting that bent",
    "start": "151640",
    "end": "154280"
  },
  {
    "text": "back into ad adap net object it's",
    "start": "154280",
    "end": "157160"
  },
  {
    "text": "calling tight get type on that type",
    "start": "157160",
    "end": "159760"
  },
  {
    "text": "string and that's how it's making it",
    "start": "159760",
    "end": "162159"
  },
  {
    "text": "back into an object so the stream is",
    "start": "162159",
    "end": "164080"
  },
  {
    "text": "telling it what types to make and that",
    "start": "164080",
    "end": "166000"
  },
  {
    "text": "means this is just a polymorphic",
    "start": "166000",
    "end": "167879"
  },
  {
    "text": "serializer and that means you have all",
    "start": "167879",
    "end": "169879"
  },
  {
    "text": "the problems you have with polymorphic",
    "start": "169879",
    "end": "171680"
  },
  {
    "text": "serializers but well what are those so",
    "start": "171680",
    "end": "174640"
  },
  {
    "text": "I'll give a little background now on net",
    "start": "174640",
    "end": "176280"
  },
  {
    "text": "serialization",
    "start": "176280",
    "end": "177560"
  },
  {
    "text": "vulnerabilities in general the way net",
    "start": "177560",
    "end": "180640"
  },
  {
    "text": "serialization vulnerabilities happen is",
    "start": "180640",
    "end": "182640"
  },
  {
    "text": "you've got self-describing data you've",
    "start": "182640",
    "end": "184959"
  },
  {
    "text": "got some box of data that's telling you",
    "start": "184959",
    "end": "188000"
  },
  {
    "text": "what type it wants to be so in this case",
    "start": "188000",
    "end": "190080"
  },
  {
    "text": "you've got a box it says it's a cat when",
    "start": "190080",
    "end": "192400"
  },
  {
    "text": "you deserialize that your serializer",
    "start": "192400",
    "end": "193959"
  },
  {
    "text": "says well it says it's a cat I should",
    "start": "193959",
    "end": "195400"
  },
  {
    "text": "make a cat object you get a cat and the",
    "start": "195400",
    "end": "198120"
  },
  {
    "text": "problem is if someone malicious comes",
    "start": "198120",
    "end": "199959"
  },
  {
    "text": "along and gives you a box that's labeled",
    "start": "199959",
    "end": "201959"
  },
  {
    "text": "pain well then your serializer says well",
    "start": "201959",
    "end": "204319"
  },
  {
    "text": "I guess I should make some pain and",
    "start": "204319",
    "end": "206159"
  },
  {
    "text": "you're having a bad time if you want a",
    "start": "206159",
    "end": "208959"
  },
  {
    "text": "little bit more information on this sort",
    "start": "208959",
    "end": "211000"
  },
  {
    "text": "of lowlevel issues with daet calization",
    "start": "211000",
    "end": "213200"
  },
  {
    "text": "I suggest looking at the Friday the 13th",
    "start": "213200",
    "end": "215480"
  },
  {
    "text": "Json talks from black hat 17 but in",
    "start": "215480",
    "end": "218879"
  },
  {
    "text": "general the problem here is that if",
    "start": "218879",
    "end": "221120"
  },
  {
    "text": "anyone can tell you what types you're",
    "start": "221120",
    "end": "222319"
  },
  {
    "text": "going to make there's types where if you",
    "start": "222319",
    "end": "224360"
  },
  {
    "text": "create them and set their properties",
    "start": "224360",
    "end": "225720"
  },
  {
    "text": "they have side effects that maybe",
    "start": "225720",
    "end": "227080"
  },
  {
    "text": "further an exploit they're going to do",
    "start": "227080",
    "end": "229159"
  },
  {
    "text": "things that you maybe don't want your",
    "start": "229159",
    "end": "230200"
  },
  {
    "text": "application to do those are called",
    "start": "230200",
    "end": "232519"
  },
  {
    "text": "gadgets and here's a couple of examples",
    "start": "232519",
    "end": "235640"
  },
  {
    "text": "so assembly installer is a type in. net",
    "start": "235640",
    "end": "237799"
  },
  {
    "text": "where if you said it's Path property it",
    "start": "237799",
    "end": "239799"
  },
  {
    "text": "just calls load library on that path so",
    "start": "239799",
    "end": "242480"
  },
  {
    "text": "if you've been able to put a malicious",
    "start": "242480",
    "end": "243760"
  },
  {
    "text": "dll somewhere that the application can",
    "start": "243760",
    "end": "245799"
  },
  {
    "text": "see you've got code injection also it's",
    "start": "245799",
    "end": "249040"
  },
  {
    "text": "worth noting that assembly installer if",
    "start": "249040",
    "end": "250480"
  },
  {
    "text": "you give it an HTTP URL will make a",
    "start": "250480",
    "end": "252519"
  },
  {
    "text": "request and download that dll it won't",
    "start": "252519",
    "end": "254519"
  },
  {
    "text": "load it but you can still use this to",
    "start": "254519",
    "end": "256239"
  },
  {
    "text": "get a ping back which is sometimes",
    "start": "256239",
    "end": "257479"
  },
  {
    "text": "useful there's also object data provider",
    "start": "257479",
    "end": "259759"
  },
  {
    "text": "which is sort of the classic net",
    "start": "259759",
    "end": "261280"
  },
  {
    "text": "serialization Gadget it's got properties",
    "start": "261280",
    "end": "263360"
  },
  {
    "text": "on it that if you set those properties",
    "start": "263360",
    "end": "265320"
  },
  {
    "text": "you can call any static method on any",
    "start": "265320",
    "end": "267040"
  },
  {
    "text": "type with whatever string and integer",
    "start": "267040",
    "end": "268440"
  },
  {
    "text": "parameters you want and people usually",
    "start": "268440",
    "end": "270680"
  },
  {
    "text": "use this to call process. start just to",
    "start": "270680",
    "end": "272440"
  },
  {
    "text": "Pivot to Shell",
    "start": "272440",
    "end": "274320"
  },
  {
    "text": "injection so okay that's how net",
    "start": "274320",
    "end": "276919"
  },
  {
    "text": "serialization vulnerabilities work now",
    "start": "276919",
    "end": "278479"
  },
  {
    "text": "I'm going to go back to light DB and",
    "start": "278479",
    "end": "280360"
  },
  {
    "text": "what I'm calling an implicit implicit",
    "start": "280360",
    "end": "282280"
  },
  {
    "text": "serialization vulnerability so here's an",
    "start": "282280",
    "end": "284759"
  },
  {
    "text": "rce payload for light DB so here's some",
    "start": "284759",
    "end": "287560"
  },
  {
    "text": "Json and if you look at this Json it's",
    "start": "287560",
    "end": "289880"
  },
  {
    "text": "got that underscore type key again which",
    "start": "289880",
    "end": "291720"
  },
  {
    "text": "is the data telling you what type it",
    "start": "291720",
    "end": "293080"
  },
  {
    "text": "wants to be in this case it's going to",
    "start": "293080",
    "end": "294919"
  },
  {
    "text": "be an object data provider that's that",
    "start": "294919",
    "end": "296560"
  },
  {
    "text": "Gadget that lets you call any static",
    "start": "296560",
    "end": "298400"
  },
  {
    "text": "method this is called in process. start",
    "start": "298400",
    "end": "301080"
  },
  {
    "text": "is going to launch Cal sort of standard",
    "start": "301080",
    "end": "303199"
  },
  {
    "text": "exploit thing to do and all I'm going to",
    "start": "303199",
    "end": "305680"
  },
  {
    "text": "do with this Json here is convert it",
    "start": "305680",
    "end": "307960"
  },
  {
    "text": "into Bon and then deserialize it with",
    "start": "307960",
    "end": "310160"
  },
  {
    "text": "light DB's Bon mapper and that's enough",
    "start": "310160",
    "end": "311759"
  },
  {
    "text": "to run the code and launch",
    "start": "311759",
    "end": "313479"
  },
  {
    "text": "Kelk now it's worth noting here that",
    "start": "313479",
    "end": "315880"
  },
  {
    "text": "when you use B mapper to deserialize a",
    "start": "315880",
    "end": "317800"
  },
  {
    "text": "stream you tell it what hype you expect",
    "start": "317800",
    "end": "320120"
  },
  {
    "text": "and it doesn't matter light DB will go",
    "start": "320120",
    "end": "323120"
  },
  {
    "text": "and make a type of whatever the data",
    "start": "323120",
    "end": "325800"
  },
  {
    "text": "says it should be set its properties and",
    "start": "325800",
    "end": "327759"
  },
  {
    "text": "it'll try to do a cast afterwards",
    "start": "327759",
    "end": "329199"
  },
  {
    "text": "that'll fail but it doesn't matter",
    "start": "329199",
    "end": "330800"
  },
  {
    "text": "because the exploit has already run at",
    "start": "330800",
    "end": "332120"
  },
  {
    "text": "that",
    "start": "332120",
    "end": "333080"
  },
  {
    "text": "point",
    "start": "333080",
    "end": "335560"
  },
  {
    "text": "so if you remember how light DB works it",
    "start": "335560",
    "end": "339039"
  },
  {
    "text": "uses Bon mapper to read its own storage",
    "start": "339039",
    "end": "341800"
  },
  {
    "text": "so I showed you that putting bad data",
    "start": "341800",
    "end": "343319"
  },
  {
    "text": "into Bon mapper gives you rce which",
    "start": "343319",
    "end": "345600"
  },
  {
    "text": "means that anything that puts bad data",
    "start": "345600",
    "end": "347000"
  },
  {
    "text": "in that database file also gives you",
    "start": "347000",
    "end": "349199"
  },
  {
    "text": "rce and the client using light TB",
    "start": "349199",
    "end": "352080"
  },
  {
    "text": "probably doesn't know what's using a",
    "start": "352080",
    "end": "353400"
  },
  {
    "text": "serializer at all the client just says",
    "start": "353400",
    "end": "355360"
  },
  {
    "text": "to light DB store this object or give me",
    "start": "355360",
    "end": "357319"
  },
  {
    "text": "the object at that index so this is sort",
    "start": "357319",
    "end": "359319"
  },
  {
    "text": "of an implicit serialization",
    "start": "359319",
    "end": "360639"
  },
  {
    "text": "vulnerability the client's not using a",
    "start": "360639",
    "end": "362680"
  },
  {
    "text": "serializer directly it's using a library",
    "start": "362680",
    "end": "364800"
  },
  {
    "text": "that uses a serializer that it probably",
    "start": "364800",
    "end": "366479"
  },
  {
    "text": "doesn't know about but that makes that",
    "start": "366479",
    "end": "368360"
  },
  {
    "text": "client vulnerable in lots of ways one of",
    "start": "368360",
    "end": "370880"
  },
  {
    "text": "them is if you just give it a bad",
    "start": "370880",
    "end": "372400"
  },
  {
    "text": "database file so light DB stores its",
    "start": "372400",
    "end": "374880"
  },
  {
    "text": "database in a local file if you go and",
    "start": "374880",
    "end": "377000"
  },
  {
    "text": "look there's lots of applications out",
    "start": "377000",
    "end": "378639"
  },
  {
    "text": "there that use light TB just to store",
    "start": "378639",
    "end": "380680"
  },
  {
    "text": "documents or game saves so anyone who",
    "start": "380680",
    "end": "384160"
  },
  {
    "text": "gives you a malicious file that's read",
    "start": "384160",
    "end": "385680"
  },
  {
    "text": "with light DB gets",
    "start": "385680",
    "end": "387599"
  },
  {
    "text": "rce light DB is also a nosql engine it",
    "start": "387599",
    "end": "390599"
  },
  {
    "text": "has queries if you can get query",
    "start": "390599",
    "end": "392960"
  },
  {
    "text": "injection against it you can put",
    "start": "392960",
    "end": "395080"
  },
  {
    "text": "malicious data into the database and",
    "start": "395080",
    "end": "397080"
  },
  {
    "text": "when that data is red you get rce and",
    "start": "397080",
    "end": "400160"
  },
  {
    "text": "there's one other method I found to get",
    "start": "400160",
    "end": "401560"
  },
  {
    "text": "rce against light DB that I will come",
    "start": "401560",
    "end": "403160"
  },
  {
    "text": "back",
    "start": "403160",
    "end": "404199"
  },
  {
    "text": "to so what do you do when you find a",
    "start": "404199",
    "end": "407080"
  },
  {
    "text": "remote code execution vulnerability and",
    "start": "407080",
    "end": "408720"
  },
  {
    "text": "in open source Library well you go look",
    "start": "408720",
    "end": "410919"
  },
  {
    "text": "at all the other similar libraries and",
    "start": "410919",
    "end": "412440"
  },
  {
    "text": "find the same vulnerability so here's",
    "start": "412440",
    "end": "414680"
  },
  {
    "text": "the same vulnerability in mongodb so",
    "start": "414680",
    "end": "417960"
  },
  {
    "text": "here we have again some Json",
    "start": "417960",
    "end": "420440"
  },
  {
    "text": "here's that Jason telling you what type",
    "start": "420440",
    "end": "421960"
  },
  {
    "text": "it wants to be mongodb uses thisor t as",
    "start": "421960",
    "end": "424759"
  },
  {
    "text": "this type specifier again as an object",
    "start": "424759",
    "end": "426840"
  },
  {
    "text": "data",
    "start": "426840",
    "end": "427759"
  },
  {
    "text": "provider it's going to call Process",
    "start": "427759",
    "end": "429759"
  },
  {
    "text": "start to launch Cal and once again all",
    "start": "429759",
    "end": "431840"
  },
  {
    "text": "we're going to do is convert that Json",
    "start": "431840",
    "end": "433840"
  },
  {
    "text": "into B and deserialize it with mongodb's",
    "start": "433840",
    "end": "437160"
  },
  {
    "text": "balizer now it's important to note here",
    "start": "437160",
    "end": "439680"
  },
  {
    "text": "that the type that you pass to the",
    "start": "439680",
    "end": "441160"
  },
  {
    "text": "dilize here does matter mongodb before",
    "start": "441160",
    "end": "444400"
  },
  {
    "text": "it creates the object will check that",
    "start": "444400",
    "end": "445879"
  },
  {
    "text": "it's assignable to the type that you're",
    "start": "445879",
    "end": "447520"
  },
  {
    "text": "expecting and if it's not it won't",
    "start": "447520",
    "end": "449080"
  },
  {
    "text": "create it that means to exploit this",
    "start": "449080",
    "end": "451319"
  },
  {
    "text": "you've got to have something in the",
    "start": "451319",
    "end": "452639"
  },
  {
    "text": "expected object graph that's open-ended",
    "start": "452639",
    "end": "454400"
  },
  {
    "text": "either a member of type object or an",
    "start": "454400",
    "end": "456960"
  },
  {
    "text": "interface type because in general",
    "start": "456960",
    "end": "459160"
  },
  {
    "text": "there's a serialization gap that you can",
    "start": "459160",
    "end": "461280"
  },
  {
    "text": "force into pretty much any interface",
    "start": "461280",
    "end": "463280"
  },
  {
    "text": "interface type that exists so because",
    "start": "463280",
    "end": "465800"
  },
  {
    "text": "mongodb again is using B serializer to",
    "start": "465800",
    "end": "469120"
  },
  {
    "text": "read its own database you have the same",
    "start": "469120",
    "end": "471520"
  },
  {
    "text": "implicit serialization vulnerabilities",
    "start": "471520",
    "end": "474000"
  },
  {
    "text": "any attacker who can write malicious",
    "start": "474000",
    "end": "475800"
  },
  {
    "text": "data to the database that you're going",
    "start": "475800",
    "end": "476960"
  },
  {
    "text": "to read can potentially get rce if",
    "start": "476960",
    "end": "479159"
  },
  {
    "text": "you're you're also reading something",
    "start": "479159",
    "end": "480199"
  },
  {
    "text": "open-ended from the database now it's",
    "start": "480199",
    "end": "482639"
  },
  {
    "text": "important to note that I was only able",
    "start": "482639",
    "end": "483960"
  },
  {
    "text": "to exploit this for the net driver I",
    "start": "483960",
    "end": "486759"
  },
  {
    "text": "don't know for sure that the Java and",
    "start": "486759",
    "end": "488560"
  },
  {
    "text": "python drivers are safe I looked at them",
    "start": "488560",
    "end": "490039"
  },
  {
    "text": "a little bit and couldn't find an",
    "start": "490039",
    "end": "491159"
  },
  {
    "text": "exploit but if you want to take a look",
    "start": "491159",
    "end": "493080"
  },
  {
    "text": "at it that might be",
    "start": "493080",
    "end": "494800"
  },
  {
    "text": "worthwhile so that's two nosql engines",
    "start": "494800",
    "end": "497639"
  },
  {
    "text": "that I looked at and here's a third so",
    "start": "497639",
    "end": "500879"
  },
  {
    "text": "here's an rce payload for Raven DB again",
    "start": "500879",
    "end": "504440"
  },
  {
    "text": "you've got some Json it's telling you",
    "start": "504440",
    "end": "505919"
  },
  {
    "text": "what type it wants to be with in this",
    "start": "505919",
    "end": "507680"
  },
  {
    "text": "case dollar type as the type specifier",
    "start": "507680",
    "end": "510720"
  },
  {
    "text": "it's going to make a Windows identity",
    "start": "510720",
    "end": "512360"
  },
  {
    "text": "object Windows identity is a json.net",
    "start": "512360",
    "end": "515279"
  },
  {
    "text": "serialization gadget I suggest looking",
    "start": "515279",
    "end": "517240"
  },
  {
    "text": "it up on Yo serial but in general it's",
    "start": "517240",
    "end": "519399"
  },
  {
    "text": "going to let you pivot to a binary",
    "start": "519399",
    "end": "520719"
  },
  {
    "text": "format or payload which then you get rce",
    "start": "520719",
    "end": "524560"
  },
  {
    "text": "with and what we're going to do with",
    "start": "524560",
    "end": "526600"
  },
  {
    "text": "this Json is we're just going to make a",
    "start": "526600",
    "end": "528040"
  },
  {
    "text": "put request to the database",
    "start": "528040",
    "end": "530519"
  },
  {
    "text": "server and just sort it directly in the",
    "start": "530519",
    "end": "533120"
  },
  {
    "text": "database that way Raven DB allows",
    "start": "533120",
    "end": "534920"
  },
  {
    "text": "reading and writing the database both as",
    "start": "534920",
    "end": "536680"
  },
  {
    "text": "Json and as objects so if you write the",
    "start": "536680",
    "end": "539720"
  },
  {
    "text": "Jason to the database that's malicious",
    "start": "539720",
    "end": "541240"
  },
  {
    "text": "and then read it as an object that's",
    "start": "541240",
    "end": "544279"
  },
  {
    "text": "rce and in this case again we've got a",
    "start": "544279",
    "end": "547320"
  },
  {
    "text": "bad serializer being used to read the",
    "start": "547320",
    "end": "548920"
  },
  {
    "text": "storage in this case it's json.net with",
    "start": "548920",
    "end": "550480"
  },
  {
    "text": "unsafe settings So Raven DB also has",
    "start": "550480",
    "end": "553399"
  },
  {
    "text": "implicit serialization",
    "start": "553399",
    "end": "555200"
  },
  {
    "text": "issues if you can write malicious data",
    "start": "555200",
    "end": "557760"
  },
  {
    "text": "to the database that someone reads",
    "start": "557760",
    "end": "559320"
  },
  {
    "text": "that's exploitable if you can do query",
    "start": "559320",
    "end": "561880"
  },
  {
    "text": "injection against the database and get",
    "start": "561880",
    "end": "563600"
  },
  {
    "text": "malicious data in there it's exploitable",
    "start": "563600",
    "end": "566000"
  },
  {
    "text": "and that special attack I mentioned that",
    "start": "566000",
    "end": "567360"
  },
  {
    "text": "works against light DB works here too",
    "start": "567360",
    "end": "569720"
  },
  {
    "text": "although like mongod DB Raven DB has a",
    "start": "569720",
    "end": "572040"
  },
  {
    "text": "good assignability check so your Expo",
    "start": "572040",
    "end": "574279"
  },
  {
    "text": "has to somehow fit into the expected",
    "start": "574279",
    "end": "576120"
  },
  {
    "text": "object graph so okay that's three nosql",
    "start": "576120",
    "end": "579240"
  },
  {
    "text": "database engines but nosql is used in",
    "start": "579240",
    "end": "581000"
  },
  {
    "text": "other ways too so here's an RC exploit",
    "start": "581000",
    "end": "584000"
  },
  {
    "text": "against survey stock. RIS service stack.",
    "start": "584000",
    "end": "586720"
  },
  {
    "text": "RIS is a nosql interface for a redis",
    "start": "586720",
    "end": "589600"
  },
  {
    "text": "cache and here again we've got some Json",
    "start": "589600",
    "end": "592760"
  },
  {
    "text": "it's telling you what type it wants to",
    "start": "592760",
    "end": "594120"
  },
  {
    "text": "be it's an assembly installer here so",
    "start": "594120",
    "end": "596640"
  },
  {
    "text": "when we set this path it's going to call",
    "start": "596640",
    "end": "598800"
  },
  {
    "text": "load library on that path we'll just say",
    "start": "598800",
    "end": "600240"
  },
  {
    "text": "there's a malicious DL you've planted",
    "start": "600240",
    "end": "602000"
  },
  {
    "text": "there and what you're going to do to",
    "start": "602000",
    "end": "603760"
  },
  {
    "text": "exploit service act. Rus is you're going",
    "start": "603760",
    "end": "605959"
  },
  {
    "text": "to write the Json to the database as a",
    "start": "605959",
    "end": "608880"
  },
  {
    "text": "string and then read it back as an",
    "start": "608880",
    "end": "611279"
  },
  {
    "text": "object and that's sufficient to get rce",
    "start": "611279",
    "end": "613720"
  },
  {
    "text": "with it so if you can inject into the",
    "start": "613720",
    "end": "615839"
  },
  {
    "text": "cache and then get it read as an object",
    "start": "615839",
    "end": "617440"
  },
  {
    "text": "you've got",
    "start": "617440",
    "end": "618399"
  },
  {
    "text": "rce and once again the type that you're",
    "start": "618399",
    "end": "621160"
  },
  {
    "text": "expecting when you read from the cache",
    "start": "621160",
    "end": "622800"
  },
  {
    "text": "matters here there's again a robust",
    "start": "622800",
    "end": "624680"
  },
  {
    "text": "assignability check so you have to again",
    "start": "624680",
    "end": "626959"
  },
  {
    "text": "have something open-ended in the",
    "start": "626959",
    "end": "628279"
  },
  {
    "text": "expected object graph",
    "start": "628279",
    "end": "630120"
  },
  {
    "text": "this still gives you implicit",
    "start": "630120",
    "end": "631839"
  },
  {
    "text": "serialization issues so if you can write",
    "start": "631839",
    "end": "635639"
  },
  {
    "text": "to the cache and then it gets readed",
    "start": "635639",
    "end": "637320"
  },
  {
    "text": "later you've probably got rce and that",
    "start": "637320",
    "end": "640200"
  },
  {
    "text": "extra pattern I mentioned for light DB",
    "start": "640200",
    "end": "641839"
  },
  {
    "text": "and Raven DB also works for service do.",
    "start": "641839",
    "end": "643880"
  },
  {
    "text": "rdus and now I'll get into that extra",
    "start": "643880",
    "end": "646079"
  },
  {
    "text": "pattern a bit so there was one other",
    "start": "646079",
    "end": "647680"
  },
  {
    "text": "nosql engine I looked at that I had a",
    "start": "647680",
    "end": "649360"
  },
  {
    "text": "lot more trouble with and that was",
    "start": "649360",
    "end": "651040"
  },
  {
    "text": "Martin DB so Martin DB is a",
    "start": "651040",
    "end": "654560"
  },
  {
    "text": "nosql interface for postgress and like",
    "start": "654560",
    "end": "658079"
  },
  {
    "text": "Raven DB it used json.net with unsafe",
    "start": "658079",
    "end": "660279"
  },
  {
    "text": "settings to read its own storage but it",
    "start": "660279",
    "end": "662399"
  },
  {
    "text": "doesn't just let you write Json to the",
    "start": "662399",
    "end": "664200"
  },
  {
    "text": "database instead you have to write",
    "start": "664200",
    "end": "666440"
  },
  {
    "text": "objects to the database or read them and",
    "start": "666440",
    "end": "668519"
  },
  {
    "text": "when I was trying to exploit this I",
    "start": "668519",
    "end": "669959"
  },
  {
    "text": "couldn't find a way that it would let me",
    "start": "669959",
    "end": "671399"
  },
  {
    "text": "do it put an exploit Gadget in there it",
    "start": "671399",
    "end": "673800"
  },
  {
    "text": "would always choke somehow when I tried",
    "start": "673800",
    "end": "675399"
  },
  {
    "text": "to and then I discovered a different way",
    "start": "675399",
    "end": "677560"
  },
  {
    "text": "to attack it and that leads into what",
    "start": "677560",
    "end": "679920"
  },
  {
    "text": "I'm calling a serialization mutation",
    "start": "679920",
    "end": "681760"
  },
  {
    "text": "attack so here's an rce attack against",
    "start": "681760",
    "end": "684920"
  },
  {
    "text": "Martin DB what I'm going to do here is",
    "start": "684920",
    "end": "687279"
  },
  {
    "text": "I'm going to create a dictionary string",
    "start": "687279",
    "end": "688639"
  },
  {
    "text": "string",
    "start": "688639",
    "end": "690399"
  },
  {
    "text": "and then I'm going to put two entries in",
    "start": "690399",
    "end": "691800"
  },
  {
    "text": "it the first one the key is named dollar",
    "start": "691800",
    "end": "693800"
  },
  {
    "text": "type and the value is going to be in",
    "start": "693800",
    "end": "696440"
  },
  {
    "text": "this case a type name for the workflow",
    "start": "696440",
    "end": "698680"
  },
  {
    "text": "designer. net type that's again a",
    "start": "698680",
    "end": "701279"
  },
  {
    "text": "json.net serialization gadget look it up",
    "start": "701279",
    "end": "703160"
  },
  {
    "text": "on why so serial but it lets you do an",
    "start": "703160",
    "end": "705040"
  },
  {
    "text": "arbitrary zaml read and then I'm going",
    "start": "705040",
    "end": "707360"
  },
  {
    "text": "to put that zaml in the second entry so",
    "start": "707360",
    "end": "709760"
  },
  {
    "text": "I'm setting another property on it which",
    "start": "709760",
    "end": "711600"
  },
  {
    "text": "is going to be the zaml that's going to",
    "start": "711600",
    "end": "712760"
  },
  {
    "text": "launch Cel and then what we do is we",
    "start": "712760",
    "end": "715800"
  },
  {
    "text": "write it to the database and then later",
    "start": "715800",
    "end": "717399"
  },
  {
    "text": "read it from the database and that gets",
    "start": "717399",
    "end": "718839"
  },
  {
    "text": "us rce that's all you've got to do is",
    "start": "718839",
    "end": "721000"
  },
  {
    "text": "just write that dictionary to the",
    "start": "721000",
    "end": "722399"
  },
  {
    "text": "database and then read it back and",
    "start": "722399",
    "end": "724600"
  },
  {
    "text": "that's a little bit weird why does that",
    "start": "724600",
    "end": "726079"
  },
  {
    "text": "work well Mar DB uses json.net for its",
    "start": "726079",
    "end": "729079"
  },
  {
    "text": "serialization so this vulnerability",
    "start": "729079",
    "end": "730880"
  },
  {
    "text": "actually comes from json.net let's look",
    "start": "730880",
    "end": "733040"
  },
  {
    "text": "at how it works there say you're just",
    "start": "733040",
    "end": "735920"
  },
  {
    "text": "just serializing a dictionary of string",
    "start": "735920",
    "end": "738000"
  },
  {
    "text": "to string in json.net and you've got",
    "start": "738000",
    "end": "740800"
  },
  {
    "text": "this fruit key and this pair value well",
    "start": "740800",
    "end": "743320"
  },
  {
    "text": "json.net just uses the keys in your",
    "start": "743320",
    "end": "745160"
  },
  {
    "text": "dictionary directly for the Json it",
    "start": "745160",
    "end": "746839"
  },
  {
    "text": "produces so you end up with Json that",
    "start": "746839",
    "end": "748959"
  },
  {
    "text": "also has a key with fruit and a value",
    "start": "748959",
    "end": "750760"
  },
  {
    "text": "named pair now if you compare that to",
    "start": "750760",
    "end": "753839"
  },
  {
    "text": "what a serialization exploit payload",
    "start": "753839",
    "end": "755560"
  },
  {
    "text": "looks like for json.net like this one",
    "start": "755560",
    "end": "757920"
  },
  {
    "text": "you've got that dollar type which is the",
    "start": "757920",
    "end": "759440"
  },
  {
    "text": "type specifier and then you've got the",
    "start": "759440",
    "end": "761880"
  },
  {
    "text": "type name you want to use in this case",
    "start": "761880",
    "end": "763279"
  },
  {
    "text": "assembly installer and then you set some",
    "start": "763279",
    "end": "764639"
  },
  {
    "text": "properties and you've got rce and the",
    "start": "764639",
    "end": "767399"
  },
  {
    "text": "key trick here with this is that that",
    "start": "767399",
    "end": "770000"
  },
  {
    "text": "dollar type key isn't special nothing",
    "start": "770000",
    "end": "772000"
  },
  {
    "text": "prevents you from putting dollar type in",
    "start": "772000",
    "end": "773600"
  },
  {
    "text": "a string string dictionary as a key and",
    "start": "773600",
    "end": "776399"
  },
  {
    "text": "also it turns out json.net doesn't take",
    "start": "776399",
    "end": "778240"
  },
  {
    "text": "it out if you serialize that dictionary",
    "start": "778240",
    "end": "780320"
  },
  {
    "text": "so if you serialize that dictionary",
    "start": "780320",
    "end": "781720"
  },
  {
    "text": "dollar type goes into the Json it",
    "start": "781720",
    "end": "783320"
  },
  {
    "text": "produces and then when that gets",
    "start": "783320",
    "end": "784959"
  },
  {
    "text": "deserialized later that's the type of",
    "start": "784959",
    "end": "786800"
  },
  {
    "text": "object that's going to become so with",
    "start": "786800",
    "end": "788680"
  },
  {
    "text": "json.net you can just serialize a",
    "start": "788680",
    "end": "790760"
  },
  {
    "text": "dictionary string string say well",
    "start": "790760",
    "end": "792880"
  },
  {
    "text": "there's a key named dollar type put a",
    "start": "792880",
    "end": "794480"
  },
  {
    "text": "type name in there and when it gets",
    "start": "794480",
    "end": "796480"
  },
  {
    "text": "serialized and then deserialized",
    "start": "796480",
    "end": "798000"
  },
  {
    "text": "unsafely it mutates into something else",
    "start": "798000",
    "end": "799920"
  },
  {
    "text": "and you can get rce out of it this works",
    "start": "799920",
    "end": "802360"
  },
  {
    "text": "with a lot of other key value storage",
    "start": "802360",
    "end": "804360"
  },
  {
    "text": "types like hash table J object expand",
    "start": "804360",
    "end": "806600"
  },
  {
    "text": "object a bunch of others that are less",
    "start": "806600",
    "end": "808399"
  },
  {
    "text": "common",
    "start": "808399",
    "end": "810600"
  },
  {
    "text": "and this sort of attack enables a lot of",
    "start": "810600",
    "end": "813639"
  },
  {
    "text": "attack patterns that were previously",
    "start": "813639",
    "end": "815399"
  },
  {
    "text": "believed to not be possible so say",
    "start": "815399",
    "end": "818160"
  },
  {
    "text": "you've got a website where you can enter",
    "start": "818160",
    "end": "819639"
  },
  {
    "text": "some key value data this is a screenshot",
    "start": "819639",
    "end": "821399"
  },
  {
    "text": "from a certain website that lets you",
    "start": "821399",
    "end": "823079"
  },
  {
    "text": "enter key value data that was not",
    "start": "823079",
    "end": "824720"
  },
  {
    "text": "exploitable with this attack but you can",
    "start": "824720",
    "end": "827440"
  },
  {
    "text": "enter some key value data into a web",
    "start": "827440",
    "end": "829040"
  },
  {
    "text": "form somewhere you do a form post on a",
    "start": "829040",
    "end": "831920"
  },
  {
    "text": "web front end somewhere it becomes a",
    "start": "831920",
    "end": "833160"
  },
  {
    "text": "dictionary or a hash table and let's say",
    "start": "833160",
    "end": "835680"
  },
  {
    "text": "at some later time that dictionary or",
    "start": "835680",
    "end": "837279"
  },
  {
    "text": "hash table gets ser ized to a cache or a",
    "start": "837279",
    "end": "840440"
  },
  {
    "text": "database and at some point later on it",
    "start": "840440",
    "end": "842680"
  },
  {
    "text": "gets deserialized from that cache or",
    "start": "842680",
    "end": "844279"
  },
  {
    "text": "database well if you're using an unsafe",
    "start": "844279",
    "end": "847079"
  },
  {
    "text": "serializer or a serializer with unsafe",
    "start": "847079",
    "end": "849199"
  },
  {
    "text": "settings you can put key value",
    "start": "849199",
    "end": "850600"
  },
  {
    "text": "information in there so that when that",
    "start": "850600",
    "end": "852759"
  },
  {
    "text": "serialization happens the object that",
    "start": "852759",
    "end": "854560"
  },
  {
    "text": "comes out of the cache is something else",
    "start": "854560",
    "end": "857079"
  },
  {
    "text": "it's mutated into some sort of exploit",
    "start": "857079",
    "end": "858920"
  },
  {
    "text": "Gadget and this means that you can",
    "start": "858920",
    "end": "860639"
  },
  {
    "text": "attack serialization even though you're",
    "start": "860639",
    "end": "862120"
  },
  {
    "text": "never touching the serialized data you",
    "start": "862120",
    "end": "863680"
  },
  {
    "text": "may not even know for sure that",
    "start": "863680",
    "end": "864839"
  },
  {
    "text": "serialization happens you can do this",
    "start": "864839",
    "end": "866519"
  },
  {
    "text": "just",
    "start": "866519",
    "end": "867680"
  },
  {
    "text": "blindly and this is that extra attack",
    "start": "867680",
    "end": "871040"
  },
  {
    "text": "pattern I was mentioning for those no",
    "start": "871040",
    "end": "872320"
  },
  {
    "text": "SQL engines earlier so here's a mutation",
    "start": "872320",
    "end": "875720"
  },
  {
    "text": "to hack against light DB I'm going to",
    "start": "875720",
    "end": "877839"
  },
  {
    "text": "make a dictionary of string string I'm",
    "start": "877839",
    "end": "880320"
  },
  {
    "text": "going to put a couple entries in it",
    "start": "880320",
    "end": "881920"
  },
  {
    "text": "one's got a key of underscore type it's",
    "start": "881920",
    "end": "883800"
  },
  {
    "text": "going to be an assembly installer and",
    "start": "883800",
    "end": "885600"
  },
  {
    "text": "I'm going to set the Path property on it",
    "start": "885600",
    "end": "887320"
  },
  {
    "text": "just by setting another key value pair",
    "start": "887320",
    "end": "888800"
  },
  {
    "text": "in the dictionary and for light DB if",
    "start": "888800",
    "end": "891279"
  },
  {
    "text": "you just stick that in a database and",
    "start": "891279",
    "end": "892880"
  },
  {
    "text": "then read it back it's rce remember",
    "start": "892880",
    "end": "895519"
  },
  {
    "text": "light DB didn't use to check",
    "start": "895519",
    "end": "896759"
  },
  {
    "text": "assignability in 5012 so it didn't",
    "start": "896759",
    "end": "899440"
  },
  {
    "text": "matter where this was in a data",
    "start": "899440",
    "end": "900639"
  },
  {
    "text": "structure it didn't matter what it was",
    "start": "900639",
    "end": "902440"
  },
  {
    "text": "expecting if you controlled a couple key",
    "start": "902440",
    "end": "904360"
  },
  {
    "text": "value pairs in a dictionary that would",
    "start": "904360",
    "end": "905800"
  },
  {
    "text": "get written to the database and read",
    "start": "905800",
    "end": "907399"
  },
  {
    "text": "back that was enough for rce this is",
    "start": "907399",
    "end": "910639"
  },
  {
    "text": "kind of a ridiculous bug honestly like",
    "start": "910639",
    "end": "912920"
  },
  {
    "text": "this was really easy to exploit for a",
    "start": "912920",
    "end": "914360"
  },
  {
    "text": "lot of",
    "start": "914360",
    "end": "916639"
  },
  {
    "text": "applications and it turns out a lot of",
    "start": "917199",
    "end": "919680"
  },
  {
    "text": "net sterilizers have this issue so",
    "start": "919680",
    "end": "922639"
  },
  {
    "text": "here's a table of all the ones I know of",
    "start": "922639",
    "end": "924040"
  },
  {
    "text": "they're all Json and Bon serializers",
    "start": "924040",
    "end": "926360"
  },
  {
    "text": "there's different conditions on these",
    "start": "926360",
    "end": "928279"
  },
  {
    "text": "that make them harder or easier to",
    "start": "928279",
    "end": "930399"
  },
  {
    "text": "exploit it's worth noting I couldn't",
    "start": "930399",
    "end": "932160"
  },
  {
    "text": "make this work with mongodb I won't",
    "start": "932160",
    "end": "933759"
  },
  {
    "text": "promise you can't do it but I couldn't",
    "start": "933759",
    "end": "935440"
  },
  {
    "text": "do",
    "start": "935440",
    "end": "936920"
  },
  {
    "text": "it and this is kind of a tricky exploit",
    "start": "936920",
    "end": "940639"
  },
  {
    "text": "for a lot of serializers you can",
    "start": "940639",
    "end": "942920"
  },
  {
    "text": "sometimes pull this off if everything",
    "start": "942920",
    "end": "944360"
  },
  {
    "text": "lines upright like for json.net you have",
    "start": "944360",
    "end": "947240"
  },
  {
    "text": "to have unsafe serialization settings",
    "start": "947240",
    "end": "949199"
  },
  {
    "text": "like a bad type name handling value you",
    "start": "949199",
    "end": "951720"
  },
  {
    "text": "have to be serializing things in such a",
    "start": "951720",
    "end": "953720"
  },
  {
    "text": "way that json.net doesn't double up the",
    "start": "953720",
    "end": "955600"
  },
  {
    "text": "type specifier you really just need to",
    "start": "955600",
    "end": "957880"
  },
  {
    "text": "experiment without to figure it out and",
    "start": "957880",
    "end": "961440"
  },
  {
    "text": "you have to have that like pattern of",
    "start": "961440",
    "end": "963160"
  },
  {
    "text": "serializing and the Der serializing",
    "start": "963160",
    "end": "964680"
  },
  {
    "text": "somewhere but for some serializers this",
    "start": "964680",
    "end": "966319"
  },
  {
    "text": "is really easy so if you're using",
    "start": "966319",
    "end": "968319"
  },
  {
    "text": "JavaScript serializer with a simple type",
    "start": "968319",
    "end": "970040"
  },
  {
    "text": "resolver for example it will just make",
    "start": "970040",
    "end": "971920"
  },
  {
    "text": "it work it doesn't matter if you control",
    "start": "971920",
    "end": "973759"
  },
  {
    "text": "the first key value pair it doesn't",
    "start": "973759",
    "end": "975279"
  },
  {
    "text": "matter what types were expected it will",
    "start": "975279",
    "end": "977319"
  },
  {
    "text": "go out of its way to make this attack",
    "start": "977319",
    "end": "978959"
  },
  {
    "text": "work so some cases are hard to exploit",
    "start": "978959",
    "end": "982199"
  },
  {
    "text": "some are really",
    "start": "982199",
    "end": "983480"
  },
  {
    "text": "easy you can defend against these",
    "start": "983480",
    "end": "985560"
  },
  {
    "text": "attacks and the best way to do that is",
    "start": "985560",
    "end": "987480"
  },
  {
    "text": "to not use a polymorphic serializer",
    "start": "987480",
    "end": "989519"
  },
  {
    "text": "don't use a serializer where the data",
    "start": "989519",
    "end": "990880"
  },
  {
    "text": "gets to tell you what type you're going",
    "start": "990880",
    "end": "992240"
  },
  {
    "text": "to make from it Json serializer in net",
    "start": "992240",
    "end": "995319"
  },
  {
    "text": "is actually pretty good for this you can",
    "start": "995319",
    "end": "997519"
  },
  {
    "text": "also use a serialization binder because",
    "start": "997519",
    "end": "999319"
  },
  {
    "text": "when that mutation happens the binder",
    "start": "999319",
    "end": "1001399"
  },
  {
    "text": "will still get asked about the type",
    "start": "1001399",
    "end": "1002759"
  },
  {
    "text": "that's being created even though it's",
    "start": "1002759",
    "end": "1004040"
  },
  {
    "text": "not the type that you serialize in the",
    "start": "1004040",
    "end": "1005480"
  },
  {
    "text": "first place but I'm now going to tell",
    "start": "1005480",
    "end": "1007480"
  },
  {
    "text": "you how to bypass serialization",
    "start": "1007480",
    "end": "1008759"
  },
  {
    "text": "binderies so grain of salt there so how",
    "start": "1008759",
    "end": "1011959"
  },
  {
    "text": "to bypass serialization binders so if",
    "start": "1011959",
    "end": "1014959"
  },
  {
    "text": "you're using a serialization binder for",
    "start": "1014959",
    "end": "1016560"
  },
  {
    "text": "security purposes what you're usually",
    "start": "1016560",
    "end": "1018240"
  },
  {
    "text": "doing is using it as a sort of filter",
    "start": "1018240",
    "end": "1020680"
  },
  {
    "text": "you're saying okay my data is telling me",
    "start": "1020680",
    "end": "1023079"
  },
  {
    "text": "to make some types but I only want to",
    "start": "1023079",
    "end": "1024760"
  },
  {
    "text": "make a certain set of types these are",
    "start": "1024760",
    "end": "1026000"
  },
  {
    "text": "the ones I expect so I'm going to have",
    "start": "1026000",
    "end": "1027918"
  },
  {
    "text": "an allow list that says well if it's one",
    "start": "1027919",
    "end": "1029600"
  },
  {
    "text": "of these types I expect I'll make it",
    "start": "1029600",
    "end": "1031079"
  },
  {
    "text": "otherwise I'll throw an exception if",
    "start": "1031079",
    "end": "1032880"
  },
  {
    "text": "you're doing it like I just described",
    "start": "1032880",
    "end": "1034438"
  },
  {
    "text": "right there it works pretty solidly",
    "start": "1034439",
    "end": "1036720"
  },
  {
    "text": "that'll keep you from making that pain",
    "start": "1036720",
    "end": "1038600"
  },
  {
    "text": "or those exploit gadgets that I've been",
    "start": "1038600",
    "end": "1041038"
  },
  {
    "text": "talking about and so if you're doing it",
    "start": "1041039",
    "end": "1043120"
  },
  {
    "text": "right it looks about like this this is a",
    "start": "1043120",
    "end": "1045160"
  },
  {
    "text": "good serialization binder this is just a",
    "start": "1045160",
    "end": "1046880"
  },
  {
    "text": "strict allow list of of assemblies and",
    "start": "1046880",
    "end": "1050039"
  },
  {
    "text": "types together and you want to do a",
    "start": "1050039",
    "end": "1052280"
  },
  {
    "text": "string string match and throw an",
    "start": "1052280",
    "end": "1053880"
  },
  {
    "text": "exception if it's not something you",
    "start": "1053880",
    "end": "1055039"
  },
  {
    "text": "expect and if you do it like that it",
    "start": "1055039",
    "end": "1057120"
  },
  {
    "text": "works okay I don't know what way to",
    "start": "1057120",
    "end": "1058520"
  },
  {
    "text": "bypass it but that's often not what",
    "start": "1058520",
    "end": "1060559"
  },
  {
    "text": "people do instead a lot of times what",
    "start": "1060559",
    "end": "1062400"
  },
  {
    "text": "you see is something more like this this",
    "start": "1062400",
    "end": "1064559"
  },
  {
    "text": "serialization binder is saying",
    "start": "1064559",
    "end": "1065720"
  },
  {
    "text": "essentially well there's an assembly",
    "start": "1065720",
    "end": "1067280"
  },
  {
    "text": "I've made I know it doesn't have bad",
    "start": "1067280",
    "end": "1069280"
  },
  {
    "text": "types in it I want to be able to",
    "start": "1069280",
    "end": "1070400"
  },
  {
    "text": "serialize everything in it so we'll just",
    "start": "1070400",
    "end": "1072600"
  },
  {
    "text": "say if it comes from my trusted assembly",
    "start": "1072600",
    "end": "1074760"
  },
  {
    "text": "it's okay and I'll just call type get",
    "start": "1074760",
    "end": "1076799"
  },
  {
    "text": "type to actually get the type once I",
    "start": "1076799",
    "end": "1078640"
  },
  {
    "text": "know it's from my assembly and the",
    "start": "1078640",
    "end": "1081080"
  },
  {
    "text": "problem is what if your trusted assembly",
    "start": "1081080",
    "end": "1083080"
  },
  {
    "text": "has a type like this so this is a type",
    "start": "1083080",
    "end": "1086840"
  },
  {
    "text": "it's initialized list we're going to",
    "start": "1086840",
    "end": "1088480"
  },
  {
    "text": "invent here which just inherit from the",
    "start": "1088480",
    "end": "1091000"
  },
  {
    "text": "generic list typ in.net and has an extra",
    "start": "1091000",
    "end": "1093640"
  },
  {
    "text": "property this looks pretty harmless but",
    "start": "1093640",
    "end": "1096360"
  },
  {
    "text": "if this is in your trusted assembly well",
    "start": "1096360",
    "end": "1098360"
  },
  {
    "text": "you've got rce because you can bypass",
    "start": "1098360",
    "end": "1100320"
  },
  {
    "text": "that binder and the trick for that is",
    "start": "1100320",
    "end": "1102520"
  },
  {
    "text": "you can make a payload like this so this",
    "start": "1102520",
    "end": "1105080"
  },
  {
    "text": "is the payload for that initialized list",
    "start": "1105080",
    "end": "1107520"
  },
  {
    "text": "again and the dollar type parameter on",
    "start": "1107520",
    "end": "1110080"
  },
  {
    "text": "this says we're just making an",
    "start": "1110080",
    "end": "1111400"
  },
  {
    "text": "initialized list and that's the only",
    "start": "1111400",
    "end": "1112760"
  },
  {
    "text": "thing your binder gets asked about and",
    "start": "1112760",
    "end": "1114640"
  },
  {
    "text": "that initialized list type comes from",
    "start": "1114640",
    "end": "1116039"
  },
  {
    "text": "your assembly so that works the type",
    "start": "1116039",
    "end": "1118400"
  },
  {
    "text": "inside of the template for that generic",
    "start": "1118400",
    "end": "1120559"
  },
  {
    "text": "is assembly installer that's a",
    "start": "1120559",
    "end": "1122159"
  },
  {
    "text": "serialization gadget but your",
    "start": "1122159",
    "end": "1124559"
  },
  {
    "text": "serialization binder won't get asked",
    "start": "1124559",
    "end": "1126280"
  },
  {
    "text": "about that if you don't specify it and",
    "start": "1126280",
    "end": "1128200"
  },
  {
    "text": "the serializer can still figure out it",
    "start": "1128200",
    "end": "1129760"
  },
  {
    "text": "needs to make one of those when it",
    "start": "1129760",
    "end": "1131559"
  },
  {
    "text": "deserializes this values section it'll",
    "start": "1131559",
    "end": "1134679"
  },
  {
    "text": "make this anyway it won't ask your",
    "start": "1134679",
    "end": "1136280"
  },
  {
    "text": "binder about it so that'll bypass your",
    "start": "1136280",
    "end": "1138080"
  },
  {
    "text": "binder B ER so you shouldn't make a",
    "start": "1138080",
    "end": "1140360"
  },
  {
    "text": "serialization binder that just allow",
    "start": "1140360",
    "end": "1141919"
  },
  {
    "text": "lists",
    "start": "1141919",
    "end": "1143280"
  },
  {
    "text": "assemblies another trick you can use to",
    "start": "1143280",
    "end": "1145559"
  },
  {
    "text": "bypass serialization binders is what I'm",
    "start": "1145559",
    "end": "1147039"
  },
  {
    "text": "calling contagion so I was just",
    "start": "1147039",
    "end": "1148840"
  },
  {
    "text": "explaining that only the types directly",
    "start": "1148840",
    "end": "1151240"
  },
  {
    "text": "specified by that type specifier go to",
    "start": "1151240",
    "end": "1153360"
  },
  {
    "text": "the binder but generally when you're",
    "start": "1153360",
    "end": "1155600"
  },
  {
    "text": "serializing or deserializing types",
    "start": "1155600",
    "end": "1157000"
  },
  {
    "text": "there's a lot of properties in there",
    "start": "1157000",
    "end": "1158120"
  },
  {
    "text": "that have their own types and you can",
    "start": "1158120",
    "end": "1160480"
  },
  {
    "text": "specify them in the payload but you",
    "start": "1160480",
    "end": "1161760"
  },
  {
    "text": "don't have to and if you don't the",
    "start": "1161760",
    "end": "1163520"
  },
  {
    "text": "sterilizer will figure it out for the",
    "start": "1163520",
    "end": "1165240"
  },
  {
    "text": "most part during distalization so if",
    "start": "1165240",
    "end": "1167720"
  },
  {
    "text": "there's some serialization Gadget out",
    "start": "1167720",
    "end": "1169440"
  },
  {
    "text": "there and it's a member of some other",
    "start": "1169440",
    "end": "1171240"
  },
  {
    "text": "type you can actually get to that Gadget",
    "start": "1171240",
    "end": "1173280"
  },
  {
    "text": "just by serializing that other type and",
    "start": "1173280",
    "end": "1175919"
  },
  {
    "text": "setting that member property of it and",
    "start": "1175919",
    "end": "1178480"
  },
  {
    "text": "that chains so if you've got a gadget",
    "start": "1178480",
    "end": "1181240"
  },
  {
    "text": "that's a member of a member of a member",
    "start": "1181240",
    "end": "1183200"
  },
  {
    "text": "of a member of some type you can get to",
    "start": "1183200",
    "end": "1185200"
  },
  {
    "text": "it that way too so here's a specific",
    "start": "1185200",
    "end": "1187919"
  },
  {
    "text": "example the windows identity type I used",
    "start": "1187919",
    "end": "1190159"
  },
  {
    "text": "earlier it's a serialization rce gadget",
    "start": "1190159",
    "end": "1192400"
  },
  {
    "text": "for json.net and let's say you've got a",
    "start": "1192400",
    "end": "1194440"
  },
  {
    "text": "serialization binder where you're just",
    "start": "1194440",
    "end": "1195720"
  },
  {
    "text": "block listing that type you're saying",
    "start": "1195720",
    "end": "1197120"
  },
  {
    "text": "we're not going to allow that well",
    "start": "1197120",
    "end": "1198799"
  },
  {
    "text": "there's other types you can use to get",
    "start": "1198799",
    "end": "1200280"
  },
  {
    "text": "to that type anyway in particular",
    "start": "1200280",
    "end": "1202840"
  },
  {
    "text": "there's this Windows authentication",
    "start": "1202840",
    "end": "1204280"
  },
  {
    "text": "event ARS type which has a Constructor",
    "start": "1204280",
    "end": "1207559"
  },
  {
    "text": "argument called identity which has the",
    "start": "1207559",
    "end": "1209400"
  },
  {
    "text": "type Windows identity so what you can do",
    "start": "1209400",
    "end": "1212039"
  },
  {
    "text": "is you can serialize that authentication",
    "start": "1212039",
    "end": "1213919"
  },
  {
    "text": "event args type and the only type your",
    "start": "1213919",
    "end": "1216400"
  },
  {
    "text": "binder gets asked about is that but when",
    "start": "1216400",
    "end": "1219640"
  },
  {
    "text": "that identity argument gets deserialized",
    "start": "1219640",
    "end": "1222960"
  },
  {
    "text": "well json.net will still go ahead and",
    "start": "1222960",
    "end": "1225159"
  },
  {
    "text": "make a Windows identity object you can",
    "start": "1225159",
    "end": "1227240"
  },
  {
    "text": "set its properties there but your binder",
    "start": "1227240",
    "end": "1229159"
  },
  {
    "text": "doesn't get",
    "start": "1229159",
    "end": "1230720"
  },
  {
    "text": "asked so this is another way you can",
    "start": "1230720",
    "end": "1232679"
  },
  {
    "text": "bypass sterilization binders okay so",
    "start": "1232679",
    "end": "1235440"
  },
  {
    "text": "that's a lot of problems what have this",
    "start": "1235440",
    "end": "1236720"
  },
  {
    "text": "has been fixed so I talked to all of the",
    "start": "1236720",
    "end": "1239600"
  },
  {
    "text": "vendors for all of those nosql engines",
    "start": "1239600",
    "end": "1242600"
  },
  {
    "text": "mostly last year in January and February",
    "start": "1242600",
    "end": "1244720"
  },
  {
    "text": "this year and everyone but Martin DB has",
    "start": "1244720",
    "end": "1247240"
  },
  {
    "text": "made a fix the fix and mongod DB is",
    "start": "1247240",
    "end": "1249840"
  },
  {
    "text": "pretty solid they added a strict allow",
    "start": "1249840",
    "end": "1251400"
  },
  {
    "text": "list for the types that can be created",
    "start": "1251400",
    "end": "1253240"
  },
  {
    "text": "during der sterilization I haven't found",
    "start": "1253240",
    "end": "1255280"
  },
  {
    "text": "a way to bypass it everybody else that",
    "start": "1255280",
    "end": "1257480"
  },
  {
    "text": "made a fix pretty pretty much just added",
    "start": "1257480",
    "end": "1258799"
  },
  {
    "text": "a block list and added an assignability",
    "start": "1258799",
    "end": "1260919"
  },
  {
    "text": "check and I just showed you that block",
    "start": "1260919",
    "end": "1262880"
  },
  {
    "text": "lists really don't work and in fact I",
    "start": "1262880",
    "end": "1265440"
  },
  {
    "text": "can bypass all of those other fixes and",
    "start": "1265440",
    "end": "1267120"
  },
  {
    "text": "I've told all these vendors hey I can",
    "start": "1267120",
    "end": "1268600"
  },
  {
    "text": "bypass your fix and they're not fixing",
    "start": "1268600",
    "end": "1270240"
  },
  {
    "text": "it further so all those other nosql",
    "start": "1270240",
    "end": "1272760"
  },
  {
    "text": "engines you can still get rce against if",
    "start": "1272760",
    "end": "1274760"
  },
  {
    "text": "you can write untrusted data to the",
    "start": "1274760",
    "end": "1276279"
  },
  {
    "text": "database that somehow gets read later",
    "start": "1276279",
    "end": "1278960"
  },
  {
    "text": "now as far as the mutation attacks so",
    "start": "1278960",
    "end": "1281840"
  },
  {
    "text": "json.net has mutation and they're not",
    "start": "1281840",
    "end": "1283520"
  },
  {
    "text": "going to fix it I talked to James Newton",
    "start": "1283520",
    "end": "1285400"
  },
  {
    "text": "King about it he said that's what it's",
    "start": "1285400",
    "end": "1287159"
  },
  {
    "text": "supposed to do more or less and so",
    "start": "1287159",
    "end": "1289559"
  },
  {
    "text": "there's not going to be any changes",
    "start": "1289559",
    "end": "1290720"
  },
  {
    "text": "there if you're using json.net you need",
    "start": "1290720",
    "end": "1292440"
  },
  {
    "text": "to worry about mutation similarly",
    "start": "1292440",
    "end": "1294760"
  },
  {
    "text": "JavaScript serializer Inn net will not",
    "start": "1294760",
    "end": "1297039"
  },
  {
    "text": "be fixed the net folks told me",
    "start": "1297039",
    "end": "1299279"
  },
  {
    "text": "essentially don't use JavaScript",
    "start": "1299279",
    "end": "1301120"
  },
  {
    "text": "serializer we tell people not to use it",
    "start": "1301120",
    "end": "1303520"
  },
  {
    "text": "also don't use Simple type resolver we",
    "start": "1303520",
    "end": "1305559"
  },
  {
    "text": "tell people not to use it so there's no",
    "start": "1305559",
    "end": "1307240"
  },
  {
    "text": "fixes that are going to be made there",
    "start": "1307240",
    "end": "1309279"
  },
  {
    "text": "either okay so that's a lot of stuff",
    "start": "1309279",
    "end": "1311880"
  },
  {
    "text": "that's kind of problematic what are some",
    "start": "1311880",
    "end": "1313360"
  },
  {
    "text": "best practices to defend against all of",
    "start": "1313360",
    "end": "1315520"
  },
  {
    "text": "this so don't make don't use polymorphic",
    "start": "1315520",
    "end": "1319440"
  },
  {
    "text": "serializers don't use a serializer where",
    "start": "1319440",
    "end": "1322000"
  },
  {
    "text": "the data gets to tell you what type it's",
    "start": "1322000",
    "end": "1323320"
  },
  {
    "text": "going to be don't call type get type in",
    "start": "1323320",
    "end": "1326559"
  },
  {
    "text": "Java don't call class. for name don't",
    "start": "1326559",
    "end": "1329039"
  },
  {
    "text": "use type resolvers that sort of do this",
    "start": "1329039",
    "end": "1331000"
  },
  {
    "text": "sort of thing for you in general there's",
    "start": "1331000",
    "end": "1333240"
  },
  {
    "text": "lots of patterns where you're",
    "start": "1333240",
    "end": "1334640"
  },
  {
    "text": "accidentally making a serializer just",
    "start": "1334640",
    "end": "1336640"
  },
  {
    "text": "try to stay away from all of them and",
    "start": "1336640",
    "end": "1338640"
  },
  {
    "text": "remember that because of mutation",
    "start": "1338640",
    "end": "1340279"
  },
  {
    "text": "attacks you can't use an unsafe",
    "start": "1340279",
    "end": "1341880"
  },
  {
    "text": "serializer even on the back end where",
    "start": "1341880",
    "end": "1343279"
  },
  {
    "text": "nobody can see it because a lot of times",
    "start": "1343279",
    "end": "1345039"
  },
  {
    "text": "it can still be attacked you can even",
    "start": "1345039",
    "end": "1346760"
  },
  {
    "text": "attack like deep object copying",
    "start": "1346760",
    "end": "1349120"
  },
  {
    "text": "sometimes with",
    "start": "1349120",
    "end": "1350559"
  },
  {
    "text": "mutation and still get rce even though",
    "start": "1350559",
    "end": "1353039"
  },
  {
    "text": "no one knows the serialization is",
    "start": "1353039",
    "end": "1354400"
  },
  {
    "text": "happening necessarily unless they're",
    "start": "1354400",
    "end": "1355600"
  },
  {
    "text": "doing sort of blind injection",
    "start": "1355600",
    "end": "1357760"
  },
  {
    "text": "attacks and this one kind of hurts but",
    "start": "1357760",
    "end": "1360679"
  },
  {
    "text": "don't read untrusted data from no SQL",
    "start": "1360679",
    "end": "1362679"
  },
  {
    "text": "mongodb is probably okay but most net",
    "start": "1362679",
    "end": "1365960"
  },
  {
    "text": "nosql engines you can still get rce if",
    "start": "1365960",
    "end": "1368279"
  },
  {
    "text": "you can write bad data to the database",
    "start": "1368279",
    "end": "1370640"
  },
  {
    "text": "and then someone later reads",
    "start": "1370640",
    "end": "1372480"
  },
  {
    "text": "it this pattern is probably there for",
    "start": "1372480",
    "end": "1375200"
  },
  {
    "text": "lots of nosql engines that aren't in net",
    "start": "1375200",
    "end": "1377400"
  },
  {
    "text": "also in general anything that's got the",
    "start": "1377400",
    "end": "1379480"
  },
  {
    "text": "property where you can just give it an",
    "start": "1379480",
    "end": "1381200"
  },
  {
    "text": "object to store and then later get it",
    "start": "1381200",
    "end": "1382799"
  },
  {
    "text": "back there's going to be a serializer",
    "start": "1382799",
    "end": "1384640"
  },
  {
    "text": "there and if that can be any type at all",
    "start": "1384640",
    "end": "1387039"
  },
  {
    "text": "it's going to be a polymorphic",
    "start": "1387039",
    "end": "1388120"
  },
  {
    "text": "sterilizer and you probably have the",
    "start": "1388120",
    "end": "1389520"
  },
  {
    "text": "same vulnerability if someone wants a",
    "start": "1389520",
    "end": "1391520"
  },
  {
    "text": "good security research project look at",
    "start": "1391520",
    "end": "1393120"
  },
  {
    "text": "this in Java or python or whatever other",
    "start": "1393120",
    "end": "1395520"
  },
  {
    "text": "framework you want to I didn't",
    "start": "1395520",
    "end": "1398320"
  },
  {
    "text": "really and don't use serialization",
    "start": "1398320",
    "end": "1401200"
  },
  {
    "text": "binders like if you do it just right it",
    "start": "1401200",
    "end": "1403440"
  },
  {
    "text": "can work but I've seen this done wrong",
    "start": "1403440",
    "end": "1405919"
  },
  {
    "text": "so many times that anymore I don't think",
    "start": "1405919",
    "end": "1407960"
  },
  {
    "text": "people can generally write a good one",
    "start": "1407960",
    "end": "1409760"
  },
  {
    "text": "you're better off trying to actually",
    "start": "1409760",
    "end": "1411720"
  },
  {
    "text": "architect your application so that you",
    "start": "1411720",
    "end": "1413159"
  },
  {
    "text": "never need a serialization binder in the",
    "start": "1413159",
    "end": "1414760"
  },
  {
    "text": "first",
    "start": "1414760",
    "end": "1415720"
  },
  {
    "text": "place takeaways from this reading",
    "start": "1415720",
    "end": "1418559"
  },
  {
    "text": "untrusted data from no SQL is probably a",
    "start": "1418559",
    "end": "1421400"
  },
  {
    "text": "vulnerability because mutation attacks",
    "start": "1421400",
    "end": "1423559"
  },
  {
    "text": "are a thing you can't use unsafe",
    "start": "1423559",
    "end": "1425600"
  },
  {
    "text": "serialization even in cases where the",
    "start": "1425600",
    "end": "1427600"
  },
  {
    "text": "serialized data can't be modified that",
    "start": "1427600",
    "end": "1430279"
  },
  {
    "text": "includes not just serialization that",
    "start": "1430279",
    "end": "1431679"
  },
  {
    "text": "happens only on the back end but like",
    "start": "1431679",
    "end": "1433279"
  },
  {
    "text": "putting an hmac on the data doesn't",
    "start": "1433279",
    "end": "1434760"
  },
  {
    "text": "prevent mutation attacks either and",
    "start": "1434760",
    "end": "1437240"
  },
  {
    "text": "serialization binders are usually",
    "start": "1437240",
    "end": "1438880"
  },
  {
    "text": "vulnerable to",
    "start": "1438880",
    "end": "1441039"
  },
  {
    "text": "bypass and that is my talk I'll be in",
    "start": "1441039",
    "end": "1444480"
  },
  {
    "text": "the wp room after this also and the",
    "start": "1444480",
    "end": "1446600"
  },
  {
    "text": "Meetup Lounge from 500 to 5:30 this",
    "start": "1446600",
    "end": "1448120"
  },
  {
    "text": "evening but I have a little time for",
    "start": "1448120",
    "end": "1449720"
  },
  {
    "text": "questions now if anyone has",
    "start": "1449720",
    "end": "1452960"
  },
  {
    "text": "one",
    "start": "1453640",
    "end": "1456640"
  }
]