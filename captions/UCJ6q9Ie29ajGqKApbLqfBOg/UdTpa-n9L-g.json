[
  {
    "start": "0",
    "end": "60000"
  },
  {
    "text": "good morning you're in Jasmine and this session is denial-of-service with a",
    "start": "30",
    "end": "5430"
  },
  {
    "text": "fistful of packets exploiting algorithmic complexity vulnerabilities by Nathan Hockey and David Renard II but",
    "start": "5430",
    "end": "12990"
  },
  {
    "text": "first we have a few announcements the black hat Arsenal is in the business hall in level two there's a mimosa event",
    "start": "12990",
    "end": "19350"
  },
  {
    "text": "at 11:50 and an ice cream social at 3:20 in the business hall lunch is in Bayside",
    "start": "19350",
    "end": "25289"
  },
  {
    "text": "a B from 1:00 to 2:30 and don't forget the merchandise store on level two and",
    "start": "25289",
    "end": "30929"
  },
  {
    "text": "session recordings from sock they have a desk on every level please silence your",
    "start": "30929",
    "end": "36930"
  },
  {
    "text": "phones and without further delay please welcome Nathan hockey and Dave Bernardi",
    "start": "36930",
    "end": "43520"
  },
  {
    "text": "thanks for that introduction good morning everybody thank you for coming my name is David Renard II joined by my",
    "start": "45890",
    "end": "51360"
  },
  {
    "text": "colleague Nathan hockey and we're gonna talk to you guys today I got about algorithmic complexity vulnerabilities",
    "start": "51360",
    "end": "56640"
  },
  {
    "text": "and how you too can cause denial service with only a fistful of packets so Nathan",
    "start": "56640",
    "end": "62219"
  },
  {
    "start": "60000",
    "end": "524000"
  },
  {
    "text": "and I are both security researchers at a company called two six labs we work in vulnerability research cyber security",
    "start": "62219",
    "end": "68310"
  },
  {
    "text": "and I know you guys are really here because Nathan's bio mentioned he's a broomball national champion but please",
    "start": "68310",
    "end": "74189"
  },
  {
    "text": "hold any broomball related questions until after the talk okay so what are we gonna talk about today so I'm gonna",
    "start": "74189",
    "end": "80580"
  },
  {
    "text": "start off with a recap of what algorithmic complexity vulnerabilities are how they present themselves some",
    "start": "80580",
    "end": "85950"
  },
  {
    "text": "historical examples and then we're gonna launch into three new algorithmic complexity vulnerabilities that Nathan",
    "start": "85950",
    "end": "91259"
  },
  {
    "text": "and I discovered over the past year and then we're gonna wrap up with some defense and mitigation techniques and",
    "start": "91259",
    "end": "96750"
  },
  {
    "text": "we're going to introduce a ce soit which is an open source tool we help contribute to that we'll be presenting at Arsenal",
    "start": "96750",
    "end": "102479"
  },
  {
    "text": "shortly after this okay so what's an algorithmic complexity vulnerability so we're talking about is",
    "start": "102479",
    "end": "109200"
  },
  {
    "text": "a resource exhaustion attack resulting in denial of service the cause for this is you have some back-end algorithm",
    "start": "109200",
    "end": "115470"
  },
  {
    "text": "that's processing some user input and it has unacceptable worst-case performance and that worst-case performance could",
    "start": "115470",
    "end": "121770"
  },
  {
    "text": "mean a couple of things you could exhaust CPU resources which we call an AC time attack or you could exhaust some",
    "start": "121770",
    "end": "128550"
  },
  {
    "text": "space resource either disk space or RAM which we call an AC space attack just to give you an idea this is kind of",
    "start": "128550",
    "end": "135840"
  },
  {
    "text": "a toy example you could imagine some server somewhere they implement insertion sort on user submitted input",
    "start": "135840",
    "end": "142350"
  },
  {
    "text": "and they might do this because they think our users are really nice and they usually submit sorted data and in the",
    "start": "142350",
    "end": "149820"
  },
  {
    "text": "sorted case insertion sort takes a linear amount of time so it's relatively efficient they wouldn't be considering",
    "start": "149820",
    "end": "155310"
  },
  {
    "text": "that an attacker might submit a reverse sorted list which would have quadratic time and could cause denial of service",
    "start": "155310",
    "end": "161340"
  },
  {
    "text": "and this is kind of like a silly toy example there are way better sorting algorithms but this gives you the kind of idea of what Nathan and I were",
    "start": "161340",
    "end": "168150"
  },
  {
    "text": "hunting so we're trying to find these corner case inputs that generate the worst case performance for some back-end",
    "start": "168150",
    "end": "173610"
  },
  {
    "text": "algorithm and I'll note here that a lot of the ways that we typically use for exploring input space like fuzzing don't",
    "start": "173610",
    "end": "179700"
  },
  {
    "text": "necessarily find these kinds of inputs so I want to give a little bit of",
    "start": "179700",
    "end": "186270"
  },
  {
    "text": "motivation for why we're talking about this because I think algorithmic complexity vulnerabilities have been around as long as people have been",
    "start": "186270",
    "end": "191970"
  },
  {
    "text": "implementing algorithms but we feel that there's kind of a gap and awareness that's affecting the community and it's",
    "start": "191970",
    "end": "198840"
  },
  {
    "text": "it's sort of at all different stages so you have application designers who maybe aren't considering the risks of",
    "start": "198840",
    "end": "204810"
  },
  {
    "text": "algorithmic complexity vulnerabilities when designing applications developers and pen testers not incorporating",
    "start": "204810",
    "end": "211320"
  },
  {
    "text": "algorithmic complexity vulnerabilities like known vulnerabilities into their test Suites and then vulnerability",
    "start": "211320",
    "end": "217050"
  },
  {
    "text": "researchers we've noticed this problem where vulnerabilities are discovered and",
    "start": "217050",
    "end": "222600"
  },
  {
    "text": "because of the CVE cycle and sort of how vulnerabilities are talked about they're not tied to like new applications so we",
    "start": "222600",
    "end": "229440"
  },
  {
    "text": "see the same vulnerabilities come up again and again and again and so Nathan",
    "start": "229440",
    "end": "234510"
  },
  {
    "text": "and I come at this from a little bit of a unique perspective we spent the past three years working on this research",
    "start": "234510",
    "end": "239640"
  },
  {
    "text": "program called DARPA stack and part of the point of that program was to hunt for algorithmic complexity",
    "start": "239640",
    "end": "246030"
  },
  {
    "text": "vulnerabilities so DARPA would make these kind of challenge problems where they would give us a program and they'd",
    "start": "246030",
    "end": "252030"
  },
  {
    "text": "asked very pointed questions is this question is this program vulnerable and what would you need to exploit it so we",
    "start": "252030",
    "end": "259590"
  },
  {
    "text": "spent three years working on these toy programs and that program wrapped up earlier this year and",
    "start": "259590",
    "end": "266530"
  },
  {
    "text": "we were curious you know how how hard is it to find these things in the wild just",
    "start": "266530",
    "end": "271810"
  },
  {
    "text": "to make sure we're all on the same page here when you mentioned denial of service a lot of people initially think Oh DDoS like that's denial of service",
    "start": "271810",
    "end": "279220"
  },
  {
    "text": "and I just want to contrast how AC vulnerabilities sort of work compared to",
    "start": "279220",
    "end": "284470"
  },
  {
    "text": "distributed denial of service so in DDoS you have some botnet and basically you have a bunch of bots",
    "start": "284470",
    "end": "290170"
  },
  {
    "text": "they're communicating with the server and you get denial of service because you have so many BOTS trying to connect",
    "start": "290170",
    "end": "295210"
  },
  {
    "text": "so the effort that you're putting into this attack is sort of reflected on the server giving you the denial service",
    "start": "295210",
    "end": "300250"
  },
  {
    "text": "effect and this is expensive you need you know a large botnet to do this in",
    "start": "300250",
    "end": "305560"
  },
  {
    "text": "contrast an AC vulnerability typically is a relatively compact payload like a",
    "start": "305560",
    "end": "311170"
  },
  {
    "text": "fistful of packets submitted by a single user and you get the same you know denial of service effect on the server",
    "start": "311170",
    "end": "317110"
  },
  {
    "text": "so easy vulnerabilities are much cheaper than DDoS additionally they can be a",
    "start": "317110",
    "end": "322840"
  },
  {
    "text": "little quieter than DDoS algorithmic complexity vulnerabilities are a design problem they come out of intended",
    "start": "322840",
    "end": "329320"
  },
  {
    "text": "functionality right that's how the program was implemented so they don't present themselves the same way that other denial service effects present",
    "start": "329320",
    "end": "336010"
  },
  {
    "text": "themselves you're not necessarily gonna get tons of error messages or excessive",
    "start": "336010",
    "end": "341530"
  },
  {
    "text": "logging or unusual traffic it's a regular user interacting with your service and this can make some",
    "start": "341530",
    "end": "348370"
  },
  {
    "text": "algorithmic complexity attacks kind of insidious you could have a payload that is designed to cause denial of service",
    "start": "348370",
    "end": "354970"
  },
  {
    "text": "for two minutes or five minutes and then once the algorithm completes processing it the normal functionality resumes so",
    "start": "354970",
    "end": "362800"
  },
  {
    "text": "we've seen even security researchers ignore symptoms of denial service or algorithmic complexity attacks and think",
    "start": "362800",
    "end": "369190"
  },
  {
    "text": "that they're just some sort of anomaly right you just turn off the server turn it back on and everything is fine this",
    "start": "369190",
    "end": "375820"
  },
  {
    "text": "isn't something new again this has been around for a long time I just want to highlight there's some talks in recent",
    "start": "375820",
    "end": "381010"
  },
  {
    "text": "years that you maybe have seen that highlight algorithmic complexity vulnerabilities so in 2011 klinken valda",
    "start": "381010",
    "end": "387780"
  },
  {
    "text": "discovered that a bunch of hash table implementations we're using linked lists",
    "start": "387780",
    "end": "392800"
  },
  {
    "text": "to resolve hash collisions this is a bad idea because it's really easy to create collisions so you can basically submit a",
    "start": "392800",
    "end": "399780"
  },
  {
    "text": "bunch of HTTP parameters for example that all collide and cause that linked list to grow more recently in 2016",
    "start": "399780",
    "end": "407940"
  },
  {
    "text": "Cara Maria gave a talk here at blackhat about decompression bombs so a decompression bomb is a natural",
    "start": "407940",
    "end": "414390"
  },
  {
    "text": "corollary to having very efficient decompression algorithms so if you have an efficient decompression algorithm",
    "start": "414390",
    "end": "419760"
  },
  {
    "text": "then you're gonna have some small input that decompresses to some huge size causing like a space effect also in 2016",
    "start": "419760",
    "end": "427620"
  },
  {
    "text": "Eric Davidson gave a talk about revisiting regular expression denial-of-service let's let's let's dig",
    "start": "427620",
    "end": "433080"
  },
  {
    "text": "into redox real quick so to explain what's going on there so in redose you",
    "start": "433080",
    "end": "438240"
  },
  {
    "text": "have some regular expression and you want to parse some candidate string and a typical way of representing your",
    "start": "438240",
    "end": "445290"
  },
  {
    "text": "regular expression is through some finite automata so in this case we have an NFA that's generated by that regular",
    "start": "445290",
    "end": "450990"
  },
  {
    "text": "expression in red and you'll notice that there's some ambiguity in that NFA so",
    "start": "450990",
    "end": "456290"
  },
  {
    "text": "there are multiple outgoing arrows that represent the same character so when the Santa Fe parses that candidate string a",
    "start": "456290",
    "end": "463380"
  },
  {
    "text": "AAA B it's going to pick some path through this NFA when it hits that B",
    "start": "463380",
    "end": "468990"
  },
  {
    "text": "it's a non matching string and it's gonna say oh wait a minute I maybe took a bad path so it'll go back it will",
    "start": "468990",
    "end": "477240"
  },
  {
    "text": "revisit all those potential paths and I'll end up traversing all 16 of them this could be a big problem if you have",
    "start": "477240",
    "end": "483060"
  },
  {
    "text": "Moraes in that string and you can get denial-of-service that way and this has been known for like a decade at this",
    "start": "483060",
    "end": "489840"
  },
  {
    "text": "point so you'd assume that we've got this pretty well handled not so much so",
    "start": "489840",
    "end": "495840"
  },
  {
    "text": "in just one month ago CloudFlare went down on the East Coast for about half an hour because of a redose issue and then",
    "start": "495840",
    "end": "503940"
  },
  {
    "text": "three years ago Stack Exchange went down because of this regular expression that tries to parse out white space from",
    "start": "503940",
    "end": "510030"
  },
  {
    "text": "entries some of the various user figured this out and basically submitted a post to cause denial of service and in a",
    "start": "510030",
    "end": "516990"
  },
  {
    "text": "minor miracle they were able to recover in half an hour without being able to Google the symptoms on Stack Overflow",
    "start": "516990",
    "end": "523400"
  },
  {
    "text": "okay so I just want to give you guys a little bit of a like a some background",
    "start": "523670",
    "end": "528990"
  },
  {
    "start": "524000",
    "end": "829000"
  },
  {
    "text": "in sort of how we were approaching some of these problems in stack so one thing",
    "start": "528990",
    "end": "534330"
  },
  {
    "text": "that we were trying to do is we were trying to find common algorithmic complexity vulnerabilities for standard",
    "start": "534330",
    "end": "539370"
  },
  {
    "text": "file formats so we were hunting for like decompression bombs etc and in doing so we started looking at PDFs you know file",
    "start": "539370",
    "end": "546990"
  },
  {
    "text": "format that we all use and we ended up discovering something kind of interesting there which is a time attack",
    "start": "546990",
    "end": "554160"
  },
  {
    "text": "against PDF parsers so imagine you're trying to parse the content of some PDF you're trying to extract the content we",
    "start": "554160",
    "end": "561240"
  },
  {
    "text": "have a way of constructing PDFs where you get a time attack against that parser without going over a certain",
    "start": "561240",
    "end": "568410"
  },
  {
    "text": "memory ceiling so this isn't quite a decompression bomb right the ID the name decompression bomb signifies this",
    "start": "568410",
    "end": "575520"
  },
  {
    "text": "explosion of data so that's not what's happening here you have this time effect while using a sort of relatively small",
    "start": "575520",
    "end": "581550"
  },
  {
    "text": "amount of data so bomb is maybe not the right word we decided napalm was more appropriate it's sort of this long burning fire",
    "start": "581550",
    "end": "588870"
  },
  {
    "text": "right it's going to keep consuming that CPU resource without ever using the the",
    "start": "588870",
    "end": "594300"
  },
  {
    "text": "memory or consuming too much memory so we approached this starting with a",
    "start": "594300",
    "end": "600090"
  },
  {
    "text": "traditional decompression bomb so dgr Stevens wrote a blog post in 2008 about",
    "start": "600090",
    "end": "605520"
  },
  {
    "text": "these PDF stream objects which are in the PDF specification and he noted that",
    "start": "605520",
    "end": "611160"
  },
  {
    "text": "these can be used to construct a traditional decompression bomb within PDF basically how that works PDF stream objects are pretty simple you",
    "start": "611160",
    "end": "618450"
  },
  {
    "text": "have some data in blue and then you have a set of filters in red that operate in",
    "start": "618450",
    "end": "623520"
  },
  {
    "text": "sequence on that data so the output of your first filter goes into your second filter so on and so forth and when",
    "start": "623520",
    "end": "629850"
  },
  {
    "text": "Stevens noted is that within the PDF spec one of the defined filters is flate decode fleet decode is a decompression",
    "start": "629850",
    "end": "636060"
  },
  {
    "text": "algorithm it's companion for deflate which is used in PNG zip Jesus Tom and",
    "start": "636060",
    "end": "642000"
  },
  {
    "text": "compression algorithm so it makes sense for them to have chosen to include this just for for decoding some random data",
    "start": "642000",
    "end": "647660"
  },
  {
    "text": "but of course you have this efficient decompression algorithm now so you can make a decompression bomb moreover",
    "start": "647660",
    "end": "655610"
  },
  {
    "text": "Stevens noted that because you can stack these filters one after another you can actually get like a nested decompression",
    "start": "655610",
    "end": "661430"
  },
  {
    "text": "bomb because Slayton deflate or block-based so you actually end up getting a magnified effect if you",
    "start": "661430",
    "end": "666589"
  },
  {
    "text": "compress a blow entropy input multiple times so we implemented this bomb in",
    "start": "666589",
    "end": "673310"
  },
  {
    "text": "fact I think we're the first people to actually implement this bomb so he describes how this bomb would work in",
    "start": "673310",
    "end": "678950"
  },
  {
    "text": "his blog post but we could not find a POC anywhere on the Internet which of",
    "start": "678950",
    "end": "684170"
  },
  {
    "text": "course meant that every PDF parser that we looked at was vulnerable to this bomb but we noticed a couple of things what",
    "start": "684170",
    "end": "690680"
  },
  {
    "text": "we were looking at it so the first is that when you do this decompression that",
    "start": "690680",
    "end": "695690"
  },
  {
    "text": "that decompression causes a small time effect it's going to take a couple of seconds to decompress that data the",
    "start": "695690",
    "end": "702769"
  },
  {
    "text": "other thing we noticed was that in the PDF spec you can put as many of these PDF stream objects into a single page as",
    "start": "702769",
    "end": "708680"
  },
  {
    "text": "you'd like there's no constraints on how many PDF stream objects you can put there and in",
    "start": "708680",
    "end": "714260"
  },
  {
    "text": "fact you can pass them by reference so you just like put a little pointer to where your PDF stream object is and",
    "start": "714260",
    "end": "719300"
  },
  {
    "text": "it'll load another PDF stream object so our idea was maybe there's a way for us",
    "start": "719300",
    "end": "726230"
  },
  {
    "text": "to put a bunch of kind of small decompression bombs into a single PDF have them loaded one after another and",
    "start": "726230",
    "end": "732800"
  },
  {
    "text": "cause some sustained time effect right have have each one of those bombs take a little bit of time and then sort of have",
    "start": "732800",
    "end": "739070"
  },
  {
    "text": "a bunch of them cumulatively cause a large time effect so how can we",
    "start": "739070",
    "end": "744170"
  },
  {
    "text": "translate this AC space attack into an AC time attack there's a little bit of a problem here the problem is that when",
    "start": "744170",
    "end": "751339"
  },
  {
    "text": "you're loading those those decompression bombs in a single page typically you're",
    "start": "751339",
    "end": "757519"
  },
  {
    "text": "gonna you want to display the whole page right so if you're loading each compression bomb into a single page then",
    "start": "757519",
    "end": "764089"
  },
  {
    "text": "eventually you're going to have a cumulative build-up of the the memory and eventually you're gonna run out of",
    "start": "764089",
    "end": "769370"
  },
  {
    "text": "memory on that process so our idea was let's see if we can't find a way to free",
    "start": "769370",
    "end": "775250"
  },
  {
    "text": "up that memory if we could somehow free up the memory used by each of those decompression bombs then we could have a",
    "start": "775250",
    "end": "780860"
  },
  {
    "text": "graph kind of like the one displayed here where your deflating causing this or sorry your",
    "start": "780860",
    "end": "786890"
  },
  {
    "text": "fleeting causing this this growth in the the memory but also a time effect but",
    "start": "786890",
    "end": "792800"
  },
  {
    "text": "then you free up the memory and so in you're able to repeat this process over and over again and get a sustained time effect against the server so we're going",
    "start": "792800",
    "end": "800270"
  },
  {
    "text": "to go back and we're going to look at more of the filters available in the PDF stream specification you might think",
    "start": "800270",
    "end": "807350"
  },
  {
    "text": "like okay is there just like a deflate decode like an opposite where you can compress the the data back down and you",
    "start": "807350",
    "end": "814490"
  },
  {
    "text": "can't there's no like inverse set of filters but there are some filters that will shrink the data that you give it so",
    "start": "814490",
    "end": "821300"
  },
  {
    "text": "this is a pretty sensible filter it's called ascii hex decode and what it does is it takes pairs of valid hex",
    "start": "821300",
    "end": "826910"
  },
  {
    "text": "characters and converts them into their ASCII equivalent so here I've got some ASCII or some hex characters converted",
    "start": "826910",
    "end": "833630"
  },
  {
    "start": "829000",
    "end": "891000"
  },
  {
    "text": "to the word smoky and so our idea is we want to use fleet decode to grow some",
    "start": "833630",
    "end": "840710"
  },
  {
    "text": "you know decompression bomb that's gonna take a lot of time but then if at the end of that process we run a bunch of",
    "start": "840710",
    "end": "847130"
  },
  {
    "text": "ascii hex decode filters we can shrink the size of that stored data because each time you run ascii hex decode",
    "start": "847130",
    "end": "853460"
  },
  {
    "text": "you're reducing the size of the data by a factor of two right two bytes give you one byte of output the problem with this",
    "start": "853460",
    "end": "860810"
  },
  {
    "text": "is that you need valid hex characters to hand to ASCII hex key code right if you",
    "start": "860810",
    "end": "866510"
  },
  {
    "text": "don't do that then the parser will throw an error so we're looking for some kind",
    "start": "866510",
    "end": "871670"
  },
  {
    "text": "of like almost fixed point behavior where we pass it hex characters we run ascii hex decode decoded as ascii and",
    "start": "871670",
    "end": "878510"
  },
  {
    "text": "get back valid hex characters this might seem like kind of a challenging problem it's like you know how do you sort of",
    "start": "878510",
    "end": "885800"
  },
  {
    "text": "think through these cycles but it actually is pretty easy once you learn this one weird trick it turns out that",
    "start": "885800",
    "end": "892880"
  },
  {
    "text": "in the ascii encoding through total coincidence the character 3 has hex encoding 3 3 which means if you start",
    "start": "892880",
    "end": "901339"
  },
  {
    "text": "with a string of all fries you're on ascii hex decode on it you're going to get back a string of all threes again up",
    "start": "901339",
    "end": "907100"
  },
  {
    "text": "half the length so if you start with a string let's say a wanker factor power of 2",
    "start": "907100",
    "end": "913030"
  },
  {
    "text": "and you can eventually reduce the size to a single bite so this is what one of",
    "start": "913030",
    "end": "918190"
  },
  {
    "text": "these little little fires looks like you've got your data and you've got a set of filters you're starting by using",
    "start": "918190",
    "end": "924580"
  },
  {
    "text": "fleet decode to grow that decompression bomb and then you're running ascii hex decode to shrink the size of the data",
    "start": "924580",
    "end": "931860"
  },
  {
    "text": "it's cut off here you can see there are six ascii hex key codes and the set of filters so that would reduce it by a",
    "start": "931860",
    "end": "938020"
  },
  {
    "text": "factor of two to the six and you know if you add another one it'll keep reducing it so this gives us a recipe for",
    "start": "938020",
    "end": "946000"
  },
  {
    "text": "creating PDF napalm so you start by guessing whatever the RAM limitations are of the system you're attacking and",
    "start": "946000",
    "end": "952000"
  },
  {
    "text": "you don't have to have a type down just guess something reasonable you may be a gigabyte 500 Meg's something like that",
    "start": "952000",
    "end": "957750"
  },
  {
    "text": "you then deflate a bunch of threes and then you encode that into a PDF stream",
    "start": "957750",
    "end": "964360"
  },
  {
    "text": "object with Fleet decode filters to unpack it and then ascii hex decode filters to crush down the memory you",
    "start": "964360",
    "end": "971680"
  },
  {
    "text": "then take those PDF stream objects and you fill a PDF page with references to that PDF stream object and that's going",
    "start": "971680",
    "end": "977560"
  },
  {
    "text": "to give you that sort of sawtooth graph we saw earlier right it's going to take some time during those flight decodes",
    "start": "977560",
    "end": "983050"
  },
  {
    "text": "and then in the ascii hex decodes it's going to free up all that memory that you're using so let's take a look at a",
    "start": "983050",
    "end": "989320"
  },
  {
    "start": "988000",
    "end": "1114000"
  },
  {
    "text": "demo here whoops okay so on the on your",
    "start": "989320",
    "end": "995080"
  },
  {
    "text": "left we've got a simple java program this is written using high text which is",
    "start": "995080",
    "end": "1001110"
  },
  {
    "text": "a java PDF parsing library i'm not picking on eye text here again this is a",
    "start": "1001110",
    "end": "1006270"
  },
  {
    "text": "problem in the PDF specification itself it's not a implementation bug and basically what we're doing here is we're",
    "start": "1006270",
    "end": "1012960"
  },
  {
    "text": "just extracting the first page of this PDF and we're just trying to get the",
    "start": "1012960",
    "end": "1018030"
  },
  {
    "text": "contents of that first page and I've got some timing information here that we're going to look at so so I don't script",
    "start": "1018030",
    "end": "1026790"
  },
  {
    "text": "commands first we're going to run this program on basically the skeleton of a",
    "start": "1026790",
    "end": "1033360"
  },
  {
    "text": "PDF this just has all the necessary headers that you'd want on a PDF if there's nothing in it okay it takes 16",
    "start": "1033360",
    "end": "1039510"
  },
  {
    "text": "milliseconds so it's pretty fast let's take a look at DD R Stephens traditional decompression box so this is",
    "start": "1039510",
    "end": "1045900"
  },
  {
    "text": "the effect okay it's going to take a few",
    "start": "1045900",
    "end": "1051170"
  },
  {
    "text": "seconds here and you'll notice that this is a pretty small file okay so we eventually got an out of memory error so",
    "start": "1051170",
    "end": "1058220"
  },
  {
    "text": "this file was only like 1,800 bytes they're pretty small and we were getting",
    "start": "1058220",
    "end": "1065570"
  },
  {
    "text": "the JVM two gigs of PEEP space so this is really small I don't know if you guys mess around",
    "start": "1065570",
    "end": "1070910"
  },
  {
    "text": "with PDFs at all but they're big like typically megabytes hundreds of kilobytes in size so you could easily",
    "start": "1070910",
    "end": "1076850"
  },
  {
    "text": "hide this in an existing PDF and no one would notice from the size difference so that's your traditional decompression",
    "start": "1076850",
    "end": "1083300"
  },
  {
    "text": "balm and now let's look at our bomb our napalm here okay so it's again",
    "start": "1083300",
    "end": "1090440"
  },
  {
    "text": "relatively small under five K and as soon as this updates you'll see we've hit 100% CPU utilization this will stay",
    "start": "1090440",
    "end": "1099440"
  },
  {
    "text": "at 100% for the next ten minutes and like I mentioned earlier these are",
    "start": "1099440",
    "end": "1104930"
  },
  {
    "text": "configurable you could easily extend the effect at a small cost to the size of this bomb okay so what's the impact here",
    "start": "1104930",
    "end": "1117160"
  },
  {
    "start": "1114000",
    "end": "1229000"
  },
  {
    "text": "so we looked at a bunch of spec compliant implementations and I want to I want to reiterate this this is a",
    "start": "1117160",
    "end": "1123440"
  },
  {
    "text": "problem in the PDF specification itself right the PDF specification says you have these PF stream objects you have",
    "start": "1123440",
    "end": "1129230"
  },
  {
    "text": "these filters you should respect them it's not that interesting - cause denial service to your local PDF",
    "start": "1129230",
    "end": "1136190"
  },
  {
    "text": "you know Adobe Acrobat or something you just close it and go on with your day it's a bigger deal if you're trying to",
    "start": "1136190",
    "end": "1141860"
  },
  {
    "text": "parse PDF server-side so why am i why might you do that why might you accept the PDF from a user we looked at a",
    "start": "1141860",
    "end": "1149270"
  },
  {
    "text": "couple of different OCR applications so one use case is you have an accounting",
    "start": "1149270",
    "end": "1155660"
  },
  {
    "text": "software and you want to allow your clients to submit receipts and you're going to use OCR to pull off line items",
    "start": "1155660",
    "end": "1161780"
  },
  {
    "text": "from those receipts so we actually identified several applications that do this and they're all vulnerable to this",
    "start": "1161780",
    "end": "1167390"
  },
  {
    "text": "attack so we contacted these vendors went through responsible disclosure and",
    "start": "1167390",
    "end": "1173390"
  },
  {
    "text": "we came up with a handful of mitigation techniques so the first thing that you can do is DV",
    "start": "1173390",
    "end": "1179450"
  },
  {
    "text": "from the PDF spec and Institute some input sanitization so specifically for our attack if you disallow repeated",
    "start": "1179450",
    "end": "1185809"
  },
  {
    "text": "filters then you can't attack it you could also limit the number of PF",
    "start": "1185809",
    "end": "1191269"
  },
  {
    "text": "stream objects in a given PDF page there's no reason to have a hundred or two hundred or a thousand but this might",
    "start": "1191269",
    "end": "1198529"
  },
  {
    "text": "not cover all the potential ways you know that you can generate this kind of effect so really the safest thing to do",
    "start": "1198529",
    "end": "1204740"
  },
  {
    "text": "is since too hard resource controls especially for some server-side application you don't want a PDF that",
    "start": "1204740",
    "end": "1210470"
  },
  {
    "text": "takes you ten gigabytes of memory to load you also don't want a PDF that takes you ten minutes to load so if you",
    "start": "1210470",
    "end": "1216080"
  },
  {
    "text": "just you know I set hard caps on runtime and memory then you can avoid some of these problems okay we're gonna see",
    "start": "1216080",
    "end": "1222529"
  },
  {
    "text": "these themes sort of come up again and again in the other vulnerabilities which Nathan will talk about now thank you",
    "start": "1222529",
    "end": "1233929"
  },
  {
    "start": "1229000",
    "end": "1411000"
  },
  {
    "text": "David the next vulnerability I have to share with you today is an unauthenticated",
    "start": "1233929",
    "end": "1239529"
  },
  {
    "text": "vulnerability in open source Linux VNC servers and unlike the AC time effect",
    "start": "1239529",
    "end": "1246380"
  },
  {
    "text": "which we just saw we're gonna be generating an AC space effect this time make sure we're talking about the same",
    "start": "1246380",
    "end": "1252769"
  },
  {
    "text": "thing you know what is a VNC server all you need to know is you remotely access the computer get a graphical view and",
    "start": "1252769",
    "end": "1259630"
  },
  {
    "text": "for Windows users it's like RDP a common use case would be if your system",
    "start": "1259630",
    "end": "1265789"
  },
  {
    "text": "administrator and you want to access all of the computers in your network make",
    "start": "1265789",
    "end": "1272210"
  },
  {
    "text": "changes from the comfort of your own desk so let me set the scene for you",
    "start": "1272210",
    "end": "1277460"
  },
  {
    "text": "sitting at my desk and working on a project and my VM is out of memory this",
    "start": "1277460",
    "end": "1283970"
  },
  {
    "text": "is weird it's you know 32 gigabyte hard drive and I'm not doing anything particularly memory intensive so I go",
    "start": "1283970",
    "end": "1291440"
  },
  {
    "text": "and check it out and there's one file it's a VNC log file and it's 30 gigabytes large like why is this file so",
    "start": "1291440",
    "end": "1299539"
  },
  {
    "text": "large but one thing I could do is just delete it and get on with my work but I",
    "start": "1299539",
    "end": "1307130"
  },
  {
    "text": "was thinking about algorithmic complexity vulnerabilities and looking at it and like this just didn't",
    "start": "1307130",
    "end": "1312640"
  },
  {
    "text": "right so I took a look at the file and saw something like this near it near the",
    "start": "1312640",
    "end": "1318580"
  },
  {
    "text": "top and you can see here that there are these lines printing other clients and",
    "start": "1318580",
    "end": "1324030"
  },
  {
    "text": "each one has an additional IP address in it it said AHA this is an algorithmic",
    "start": "1324030",
    "end": "1330010"
  },
  {
    "text": "complexity vulnerability I can make the space on this file grow quite large and",
    "start": "1330010",
    "end": "1336660"
  },
  {
    "text": "the idea for this was to just add additional connections and make each of",
    "start": "1336660",
    "end": "1342640"
  },
  {
    "text": "these lines longer and longer so to investigate this we went into the code",
    "start": "1342640",
    "end": "1347980"
  },
  {
    "text": "and found this chunk found this because you can see the other clients line being",
    "start": "1347980",
    "end": "1354010"
  },
  {
    "text": "logged here and this chunk of code is called every time there's a new",
    "start": "1354010",
    "end": "1359560"
  },
  {
    "text": "connection to the VNC server and sure enough there's this for loop here which is printing the IP address of every",
    "start": "1359560",
    "end": "1366490"
  },
  {
    "text": "connected client so there's no limit here it's not going to stop after 10 or 20 there's no limit so pretty simple",
    "start": "1366490",
    "end": "1375730"
  },
  {
    "text": "recipe for growing the disk space here we can create multiple TCP connections",
    "start": "1375730",
    "end": "1380890"
  },
  {
    "text": "to the server we're gonna keep those connections open because if you allow one to close then the number of",
    "start": "1380890",
    "end": "1387220"
  },
  {
    "text": "connected clients goes down and you don't get the same growth in the file but as long as you keep these",
    "start": "1387220",
    "end": "1393370"
  },
  {
    "text": "connections open each one is gonna add a longer line to the log file and you",
    "start": "1393370",
    "end": "1398560"
  },
  {
    "text": "might say you know each one's only 11 or 12 bytes larger for the IP address but",
    "start": "1398560",
    "end": "1404140"
  },
  {
    "text": "if you do this enough times you're getting a quadratic effect given the number of connections so let's take a",
    "start": "1404140",
    "end": "1412270"
  },
  {
    "start": "1411000",
    "end": "1521000"
  },
  {
    "text": "look at how this works to get you oriented on the left side you've got a",
    "start": "1412270",
    "end": "1419140"
  },
  {
    "text": "black screen that's showing the log file for a VNC server that I've got up the",
    "start": "1419140",
    "end": "1424750"
  },
  {
    "text": "red is showing the current size of the server in bytes and we've got the CPU showing in the bottom right so first",
    "start": "1424750",
    "end": "1432160"
  },
  {
    "text": "thing I'm gonna do is just connect to this VNC server and notice I have to",
    "start": "1432160",
    "end": "1438790"
  },
  {
    "text": "input a password here but once I do that I can connect to this VNC server and you",
    "start": "1438790",
    "end": "1445750"
  },
  {
    "text": "should see some vlogs showing up here on the bottom so now what I'm gonna do is make some",
    "start": "1445750",
    "end": "1452500"
  },
  {
    "text": "netcat connections to this so 20 times I'm just gonna connect to localhost in",
    "start": "1452500",
    "end": "1458200"
  },
  {
    "text": "5901 which is where this is running and sleep a second so that you can see what's happening on the logs so very",
    "start": "1458200",
    "end": "1466480"
  },
  {
    "text": "similar effect to what we saw before these other client lines getting longer and longer we've already got you know 7k",
    "start": "1466480",
    "end": "1474160"
  },
  {
    "text": "and growing of input so once this finishes though you know that was only 20 let's do this many more times and see",
    "start": "1474160",
    "end": "1482050"
  },
  {
    "text": "how large we can make this file so I'm gonna remove the statement the law sleep",
    "start": "1482050",
    "end": "1487990"
  },
  {
    "text": "statements are not here all day and do this 800 times you can see as as we saw",
    "start": "1487990",
    "end": "1497830"
  },
  {
    "text": "from the code that there's no limit on this just each time it's printing a whole bunch of IP addresses in a big",
    "start": "1497830",
    "end": "1503530"
  },
  {
    "text": "block and we're now up near 4 megabytes of input the logical question next would",
    "start": "1503530",
    "end": "1512320"
  },
  {
    "text": "be you know can I do this 8,000 times and you would think maybe you can but in",
    "start": "1512320",
    "end": "1518650"
  },
  {
    "text": "fact you can't the reason for that is a kind of bonus vulnerability that we",
    "start": "1518650",
    "end": "1524890"
  },
  {
    "start": "1521000",
    "end": "1662000"
  },
  {
    "text": "found when looking at this and this one's not really an AC vulnerability it's it causes a similar AC effect but",
    "start": "1524890",
    "end": "1532810"
  },
  {
    "text": "this one's more of a bug but it causes infinite logging and denial of service",
    "start": "1532810",
    "end": "1538300"
  },
  {
    "text": "to the VNC server so here's some definitely not vulnerable code that's",
    "start": "1538300",
    "end": "1544750"
  },
  {
    "text": "getting called each time you have a new connection to the VNC server and some",
    "start": "1544750",
    "end": "1550570"
  },
  {
    "text": "things to highlight here are that there's this sock it's the accept call is returning a file descriptor and if",
    "start": "1550570",
    "end": "1558370"
  },
  {
    "text": "this were for some reason to fail you would print a logging message to the log file so I said it's not vulnerable but",
    "start": "1558370",
    "end": "1566920"
  },
  {
    "text": "but maybe it is so what happens if we run out of these file descriptors as",
    "start": "1566920",
    "end": "1572050"
  },
  {
    "text": "we're giving one out every time there's a new connection well the answer for except if you look in the man pages so",
    "start": "1572050",
    "end": "1578980"
  },
  {
    "text": "I'll give you an file error now if you get an e/m file error we were just returning from that",
    "start": "1578980",
    "end": "1585139"
  },
  {
    "text": "function but there's still this new connection out there that needs to be processed",
    "start": "1585139",
    "end": "1590720"
  },
  {
    "text": "we haven't fulfilled that requirement yet and if you have a new connection",
    "start": "1590720",
    "end": "1596029"
  },
  {
    "text": "waiting to be processed well what do you do well you call that same chunk of code so it's like hey there's a new",
    "start": "1596029",
    "end": "1601519"
  },
  {
    "text": "connection and then like you realize oh no there's too many open files but like hey there's a new connection I need to",
    "start": "1601519",
    "end": "1607610"
  },
  {
    "text": "process that's still out there and so on and so on this doesn't really stop so the recipe",
    "start": "1607610",
    "end": "1615350"
  },
  {
    "text": "for exploiting this disk space and time is the same steps as before we're gonna create the two connections you know the",
    "start": "1615350",
    "end": "1622700"
  },
  {
    "text": "TCP connections keep them open we're gonna repeat this until we're out of file descriptors and for our testing",
    "start": "1622700",
    "end": "1629600"
  },
  {
    "text": "that was around 1024 if you're you limit is higher than that for some reason you",
    "start": "1629600",
    "end": "1635029"
  },
  {
    "text": "actually hit a different error condition that we're not going to talk about but assuming assuming 1024 your next",
    "start": "1635029",
    "end": "1642500"
  },
  {
    "text": "connection attempt triggers an infinite loop that I was talking about and I want",
    "start": "1642500",
    "end": "1647750"
  },
  {
    "text": "to highlight here that this isn't like the previous case where we were sending one connection and getting one line to",
    "start": "1647750",
    "end": "1654380"
  },
  {
    "text": "the log file it's one connection and getting infinitely many lines to this log file or at least until you're out of",
    "start": "1654380",
    "end": "1660799"
  },
  {
    "text": "disk space now let's go back to our demo we've sent about 800 connections I'm",
    "start": "1660799",
    "end": "1669830"
  },
  {
    "text": "gonna send 250 more just to get us over that 1024 limit and we were at you know",
    "start": "1669830",
    "end": "1678830"
  },
  {
    "text": "4 megabytes we should see here there there you go this infinite logging of as",
    "start": "1678830",
    "end": "1685220"
  },
  {
    "text": "fast as it can printing out these log messages the CPU is now up near a",
    "start": "1685220",
    "end": "1690260"
  },
  {
    "text": "hundred percent over a hundred percent and we're growing this log file at you",
    "start": "1690260",
    "end": "1697789"
  },
  {
    "text": "know a megabyte every few seconds sort of as fast as this computer can can process them and if we go back to our",
    "start": "1697789",
    "end": "1705440"
  },
  {
    "text": "VNC server and try to connect we'll",
    "start": "1705440",
    "end": "1710450"
  },
  {
    "text": "confirm that we have indeed achieve denial of service there's you can't get additional",
    "start": "1710450",
    "end": "1716220"
  },
  {
    "text": "connections to this VNC server so what",
    "start": "1716220",
    "end": "1723720"
  },
  {
    "start": "1722000",
    "end": "1830000"
  },
  {
    "text": "are the impacts if you were watching really closely you might have noticed that these log files that were printing",
    "start": "1723720",
    "end": "1729810"
  },
  {
    "text": "out we're not the ones that were shown in in the code there and that's because I was showing you a demo from tight VNC",
    "start": "1729810",
    "end": "1737580"
  },
  {
    "text": "but code from turbo VNC and what we found was that there the VNC servers",
    "start": "1737580",
    "end": "1742890"
  },
  {
    "text": "kind of legacy servers that are out there all played some giant game of telephone somewhere down the line and",
    "start": "1742890",
    "end": "1749010"
  },
  {
    "text": "shared these chunks of code with each other and so this vulnerability persists",
    "start": "1749010",
    "end": "1755940"
  },
  {
    "text": "across multiple VNC servers that we looked at another thing I want to",
    "start": "1755940",
    "end": "1761160"
  },
  {
    "text": "highlight is that you know we saw that my VNC server had a password and I never needed that any kind of credentials for",
    "start": "1761160",
    "end": "1767820"
  },
  {
    "text": "this VNC server just the ability to connect to it so I was sending you know a thousand you know a handful of fistful",
    "start": "1767820",
    "end": "1775560"
  },
  {
    "text": "of three-way handshakes and achieving denial of service so we went through the",
    "start": "1775560",
    "end": "1783030"
  },
  {
    "text": "responsible disclosure process with these VNC servers and some of the solutions we came up with were first an",
    "start": "1783030",
    "end": "1791430"
  },
  {
    "text": "algorithmic change so just not logging the list of other clients and the reason",
    "start": "1791430",
    "end": "1797160"
  },
  {
    "text": "for this was that we had enough information from other things in the log you know when clients were connecting",
    "start": "1797160",
    "end": "1803760"
  },
  {
    "text": "and when they were disconnecting to recreate this list of other clients if we ever really needed it without",
    "start": "1803760",
    "end": "1809340"
  },
  {
    "text": "printing out 800 IP addresses at one time the other thing you can do is an",
    "start": "1809340",
    "end": "1815880"
  },
  {
    "text": "input sanitization effort limiting the maximum number of client connections",
    "start": "1815880",
    "end": "1820950"
  },
  {
    "text": "that are allowed to your VNC server at one time so you probably don't need a thousand people accessing the VNC server",
    "start": "1820950",
    "end": "1827820"
  },
  {
    "text": "at the same time so let's jump ahead now",
    "start": "1827820",
    "end": "1832920"
  },
  {
    "start": "1830000",
    "end": "2277000"
  },
  {
    "text": "to the final vulnerability we're going to talk about and this is an unauthenticated denial of service in",
    "start": "1832920",
    "end": "1838730"
  },
  {
    "text": "Dropbox is password strength estimation tool called Xia cvbl it's the bottom six letters on the",
    "start": "1838730",
    "end": "1845340"
  },
  {
    "text": "keyboard [Music] so what is this tool it's designed to",
    "start": "1845340",
    "end": "1850379"
  },
  {
    "text": "replace some of the archaic password policies that we use now that are like you need a capital letter and a",
    "start": "1850379",
    "end": "1856620"
  },
  {
    "text": "lowercase letter and a number and some special character so we've known for a",
    "start": "1856620",
    "end": "1861899"
  },
  {
    "text": "long time that we can still create and people do create really weak passwords using these policies like abc123",
    "start": "1861899",
    "end": "1869629"
  },
  {
    "text": "exclamation point fits all the parameters not very strong so what zxe",
    "start": "1869629",
    "end": "1876179"
  },
  {
    "text": "VPN threads to do is create a measure of how difficult it's going to be for an",
    "start": "1876179",
    "end": "1881879"
  },
  {
    "text": "attacker to actually guess your password and one of one of the things they decided at attacker was going to do was",
    "start": "1881879",
    "end": "1888720"
  },
  {
    "text": "have a list of all of these commonly used weak passwords and go through those among other techniques so any password",
    "start": "1888720",
    "end": "1897690"
  },
  {
    "text": "that's commonly used is already feral as rated week by this service let's take a",
    "start": "1897690",
    "end": "1904769"
  },
  {
    "text": "look at how it works let's say I have my name up here and a common password and",
    "start": "1904769",
    "end": "1910980"
  },
  {
    "text": "today's date and I put those together as a password this tool is gonna parse all",
    "start": "1910980",
    "end": "1916710"
  },
  {
    "text": "three of them and break it up into these three chunks and then we're gonna analyze how these work and give a score",
    "start": "1916710",
    "end": "1924120"
  },
  {
    "text": "for each of these three independently so you'll notice that the first one is",
    "start": "1924120",
    "end": "1929309"
  },
  {
    "text": "recognized as a male name password belongs to the dictionary called passwords which is a list of common",
    "start": "1929309",
    "end": "1935279"
  },
  {
    "text": "passwords and then the third part is represented is recognized as a date you",
    "start": "1935279",
    "end": "1941159"
  },
  {
    "text": "know eight-eight 2019 and each one of these gets a score and to get a total",
    "start": "1941159",
    "end": "1947039"
  },
  {
    "text": "score for your password you combine these and we're making a conservative assumption here that the the attacker",
    "start": "1947039",
    "end": "1953580"
  },
  {
    "text": "knows the exact structure of your password but not the exact contents and so that's how you can combine these",
    "start": "1953580",
    "end": "1959759"
  },
  {
    "text": "three scores to get one score for how strong your password is one thing I want",
    "start": "1959759",
    "end": "1965759"
  },
  {
    "text": "to highlight here is that I put an @ symbol in my name but it was still somehow recognized as Nathan so let's",
    "start": "1965759",
    "end": "1973649"
  },
  {
    "text": "take a look at how that worked how they took the @ sign and turned it to an a so",
    "start": "1973649",
    "end": "1979470"
  },
  {
    "text": "this meat substitution algorithm let's take the example of password I've used an outside-in a zero and KITT in",
    "start": "1979470",
    "end": "1986980"
  },
  {
    "text": "place of a a no the Dropbox tool is going to go and look at it it's table",
    "start": "1986980",
    "end": "1993250"
  },
  {
    "text": "predefined table of leet characters and finds the @ sign and the zero and find",
    "start": "1993250",
    "end": "1999429"
  },
  {
    "text": "that those are replaced by a Ana and it'll make that replacement so we're back to the word password and that's",
    "start": "1999429",
    "end": "2005730"
  },
  {
    "text": "when it's gonna do the dictionary lookup to find whether this word is in this list of dictionaries password will be in",
    "start": "2005730",
    "end": "2014309"
  },
  {
    "text": "the common list and worried that this is not very strong another thing that",
    "start": "2014309",
    "end": "2019980"
  },
  {
    "text": "happens is that password it's not just looking for the word password this is a quadratic time algorithm looking at",
    "start": "2019980",
    "end": "2026460"
  },
  {
    "text": "every single substring of your password in case you had two words put together",
    "start": "2026460",
    "end": "2032820"
  },
  {
    "text": "or something like that let's look at a second example blackhat but I've used a",
    "start": "2032820",
    "end": "2039720"
  },
  {
    "text": "vertical bar in the outside again the vertical bar is special because it can be replaced by an i or an L",
    "start": "2039720",
    "end": "2047149"
  },
  {
    "text": "according to dropboxes tables of characters so we need to look at both of",
    "start": "2047149",
    "end": "2053490"
  },
  {
    "text": "these possibilities in or to determine the strength of our password so in the first case we get the AK hat this is not",
    "start": "2053490",
    "end": "2061320"
  },
  {
    "text": "a real word and so it's not as bad as password doesn't show up in any of the",
    "start": "2061320",
    "end": "2068220"
  },
  {
    "text": "dictionaries but then we look at replacing the vertical bar with an L and",
    "start": "2068220",
    "end": "2074000"
  },
  {
    "text": "we get black hat instead and that is in the list of common passwords so to stop",
    "start": "2074000",
    "end": "2079679"
  },
  {
    "text": "using black hat as a password you guys that that got some bad rating and we",
    "start": "2079679",
    "end": "2087810"
  },
  {
    "text": "take the two scores we take the worst of these two scores and determine that",
    "start": "2087810",
    "end": "2092970"
  },
  {
    "text": "black hat is not very strong so notice how we had to do kind of twice the work",
    "start": "2092970",
    "end": "2098820"
  },
  {
    "text": "here in order to figure out how strong our password was and there are actually",
    "start": "2098820",
    "end": "2104250"
  },
  {
    "text": "three of these characters that are ambiguous there's the vertical bar the one in the seven so we asked ourselves",
    "start": "2104250",
    "end": "2111359"
  },
  {
    "text": "what happens if you put all three of these together in fact you don't get twice the work now",
    "start": "2111359",
    "end": "2117049"
  },
  {
    "text": "you get eight times the work so you have to look at all possibilities for the",
    "start": "2117049",
    "end": "2123049"
  },
  {
    "text": "different replacements for each of these three characters so for each of these",
    "start": "2123049",
    "end": "2128390"
  },
  {
    "text": "eight possibilities now we make the replacements we get eight different words we put these eight words through",
    "start": "2128390",
    "end": "2135859"
  },
  {
    "text": "the dictionary match this again a quadratic time algorithm looking out the substrings of every single one and then we find",
    "start": "2135859",
    "end": "2145099"
  },
  {
    "text": "that lollipop is in there which is not strong so it's only one of those eight is weak but together you know we take",
    "start": "2145099",
    "end": "2152329"
  },
  {
    "text": "the weakest of those so we've done eight times the effort now from what we would",
    "start": "2152329",
    "end": "2160130"
  },
  {
    "text": "normally do so we ask ourselves you know what's the worst that can happen here",
    "start": "2160130",
    "end": "2165170"
  },
  {
    "text": "putting together some of these things the first thing is that I've said a few times now it's a quadratic algorithm",
    "start": "2165170",
    "end": "2171499"
  },
  {
    "text": "we're looking at this every single substring of the password so we're just gonna make our password as long as",
    "start": "2171499",
    "end": "2177229"
  },
  {
    "text": "possible then we have these three special characters which have multiple",
    "start": "2177229",
    "end": "2182599"
  },
  {
    "text": "possible substitutions so we're going to use all three of those and finally we'll",
    "start": "2182599",
    "end": "2190910"
  },
  {
    "text": "now have eight replacement tables and we're gonna make all eight of those replacement tables as large as possible",
    "start": "2190910",
    "end": "2196609"
  },
  {
    "text": "by putting in every other lead character and when you put all three of these requirements together you end up with a",
    "start": "2196609",
    "end": "2204529"
  },
  {
    "text": "password that looks something like this",
    "start": "2204529",
    "end": "2207880"
  },
  {
    "text": "Dropbox asked a similar question of what's the worst that can happen but",
    "start": "2210969",
    "end": "2216349"
  },
  {
    "text": "they really looked at what the average case was because they took a list of",
    "start": "2216349",
    "end": "2222170"
  },
  {
    "text": "common passwords like 30,000 of them and ran their tool against each of those",
    "start": "2222170",
    "end": "2227959"
  },
  {
    "text": "passwords and found the worst case to be about a hundred milliseconds and they recommended because they knew that",
    "start": "2227959",
    "end": "2233989"
  },
  {
    "text": "making longer passwords would make it run longer to cut off the password out of a hundred characters but there's",
    "start": "2233989",
    "end": "2240589"
  },
  {
    "text": "nothing in their library that actually enforces that so when we ran our",
    "start": "2240589",
    "end": "2245839"
  },
  {
    "text": "worst-case password we found that this actually took almost six seconds in in",
    "start": "2245839",
    "end": "2251450"
  },
  {
    "text": "the 100 character case 24 seconds for twice that many characters and for a",
    "start": "2251450",
    "end": "2257530"
  },
  {
    "text": "1000 character password it took over 22 minutes now there's no reason that we",
    "start": "2257530",
    "end": "2265820"
  },
  {
    "text": "had to stop at 1000 characters other what other than we got kind of bored running this you know and waiting for",
    "start": "2265820",
    "end": "2273070"
  },
  {
    "text": "quite long amounts of time let's talk",
    "start": "2273070",
    "end": "2278180"
  },
  {
    "start": "2277000",
    "end": "2376000"
  },
  {
    "text": "about the impact a little bit that was initially written this tool in CoffeeScript but because it is a really",
    "start": "2278180",
    "end": "2284300"
  },
  {
    "text": "good tool and it's the only one that does this sort of measurement it's been adopted by a lot of different",
    "start": "2284300",
    "end": "2289790"
  },
  {
    "text": "programming languages and implemented in many different programming languages and",
    "start": "2289790",
    "end": "2295090"
  },
  {
    "text": "you'll notice here that some of these programming languages unlike CoffeeScript are made to be run",
    "start": "2295090",
    "end": "2301460"
  },
  {
    "text": "server-side not client-side this also",
    "start": "2301460",
    "end": "2306500"
  },
  {
    "text": "shows up in a number of enterprise software so Dropbox is one and we also",
    "start": "2306500",
    "end": "2312260"
  },
  {
    "text": "went through the responsible disclosure process with stripe and JetBrains so some big-name companies who are using",
    "start": "2312260",
    "end": "2318530"
  },
  {
    "text": "this and they're using it on their user signup page what this means is that you",
    "start": "2318530",
    "end": "2324560"
  },
  {
    "text": "can go to a user signup page and put in a password without having any credentials for that server and if",
    "start": "2324560",
    "end": "2332840"
  },
  {
    "text": "you're running this server-side then that will get sent to the server and they'll measure how strong your password",
    "start": "2332840",
    "end": "2338240"
  },
  {
    "text": "is if they're not doing any other kind of mitigations then the this will run on",
    "start": "2338240",
    "end": "2344270"
  },
  {
    "text": "their server for 22 minutes or however long it takes on their servers and one",
    "start": "2344270",
    "end": "2351740"
  },
  {
    "text": "of the reasons you might do this server-side is because if you actually want to make sure that your users are",
    "start": "2351740",
    "end": "2357620"
  },
  {
    "text": "giving you strong passwords then you want to verify at server-side because",
    "start": "2357620",
    "end": "2363140"
  },
  {
    "text": "someone could get around things client-side it can warn you that you don't have a strong password but you",
    "start": "2363140",
    "end": "2368570"
  },
  {
    "text": "could submit it anyway so that's why you might check server-side whether or not they've given you a strong password so",
    "start": "2368570",
    "end": "2377510"
  },
  {
    "start": "2376000",
    "end": "2504000"
  },
  {
    "text": "we have a demo for this what I have here is a docker container",
    "start": "2377510",
    "end": "2382670"
  },
  {
    "text": "not attacking any live version of JEP rains right now but we have JetBrains in a docker container locally we have the",
    "start": "2382670",
    "end": "2389540"
  },
  {
    "text": "CPU here and this is the user signup page so again I have no credentials on",
    "start": "2389540",
    "end": "2394730"
  },
  {
    "text": "Jefferies but I'm gonna sign up as a user here and without putting in any",
    "start": "2394730",
    "end": "2401330"
  },
  {
    "text": "other identifying information and I don't have to submit a full completed application I can just copy this",
    "start": "2401330",
    "end": "2408560"
  },
  {
    "text": "password before I paste it in I'll just point out you know how quickly you get a",
    "start": "2408560",
    "end": "2414080"
  },
  {
    "text": "response for fare strong if I'm just typing in some small password so it's",
    "start": "2414080",
    "end": "2419660"
  },
  {
    "text": "generally very responsive and has limited impact on the CPU but now if I",
    "start": "2419660",
    "end": "2425720"
  },
  {
    "text": "paste in this password we'll see the CPU go up and notice how we don't have any",
    "start": "2425720",
    "end": "2431720"
  },
  {
    "text": "kind of review of how strong this password is and this effect will last",
    "start": "2431720",
    "end": "2437900"
  },
  {
    "text": "for quite a while because we've used the 1000 characters the other thing I'm",
    "start": "2437900",
    "end": "2444020"
  },
  {
    "text": "gonna do here is add some extra characters to resubmit this password a few times and then we'll see what",
    "start": "2444020",
    "end": "2451070"
  },
  {
    "text": "happens to another user in a different tab so just add some more characters add",
    "start": "2451070",
    "end": "2458410"
  },
  {
    "text": "to the load here and then I've got you know a valid user who is trying to sign",
    "start": "2458410",
    "end": "2464120"
  },
  {
    "text": "in at the same time and they can put in their password and they're now not",
    "start": "2464120",
    "end": "2470120"
  },
  {
    "text": "getting any feedback on how strong that password is they might not recognize",
    "start": "2470120",
    "end": "2476900"
  },
  {
    "text": "this and can you know put in the second password and try and register but good",
    "start": "2476900",
    "end": "2482480"
  },
  {
    "text": "luck to them as this servers going to be working very hard on processing my malicious password for quite a long time",
    "start": "2482480",
    "end": "2489100"
  },
  {
    "text": "the same effect would be would happen if you were trying to log in and already had credentials and we're trying to log",
    "start": "2489100",
    "end": "2495620"
  },
  {
    "text": "in as a legitimate user",
    "start": "2495620",
    "end": "2499270"
  },
  {
    "start": "2504000",
    "end": "2587000"
  },
  {
    "text": "so some of the things you can do I mentioned that Dropbox recommends you know cutting off the input at a hundred",
    "start": "2505760",
    "end": "2513359"
  },
  {
    "text": "bytes you could set some threshold using input sanitization to say if you've",
    "start": "2513359",
    "end": "2518609"
  },
  {
    "text": "given me a long password I'm just gonna evaluate the first part of it but that",
    "start": "2518609",
    "end": "2524490"
  },
  {
    "text": "may not be enough because we saw even with a hundred characters that this could take up to six seconds and so 100",
    "start": "2524490",
    "end": "2532710"
  },
  {
    "text": "millisecond if you're expecting a hundred milliseconds something 60 times that may not be acceptable for your",
    "start": "2532710",
    "end": "2538770"
  },
  {
    "text": "servers if you're getting a lot of these requests that can have a high cost",
    "start": "2538770",
    "end": "2543859"
  },
  {
    "text": "another thing you can do is have better algorithms so this dictionary match",
    "start": "2543859",
    "end": "2549059"
  },
  {
    "text": "looks at every single substring of the password I don't think it needs to",
    "start": "2549059",
    "end": "2554240"
  },
  {
    "text": "you're not gonna find a dictionary match on the first 999 characters of the",
    "start": "2554240",
    "end": "2559349"
  },
  {
    "text": "password if you don't have anything in your dictionary that's 999 characters large so you can probably have some",
    "start": "2559349",
    "end": "2565920"
  },
  {
    "text": "better algorithms that improve this algorithm and it may still be quadratic time but here we've seen you know when",
    "start": "2565920",
    "end": "2573480"
  },
  {
    "text": "we added the character tables that you know where the the coefficients here are",
    "start": "2573480",
    "end": "2582000"
  },
  {
    "text": "important it's not just the Big O runtime that we care about so to wrap up",
    "start": "2582000",
    "end": "2589200"
  },
  {
    "start": "2587000",
    "end": "2628000"
  },
  {
    "text": "here what are some things that we can do there there have been some common themes throughout this so one of them is",
    "start": "2589200",
    "end": "2595200"
  },
  {
    "text": "selecting better algorithms ones that shorten the number the coefficient in",
    "start": "2595200",
    "end": "2601559"
  },
  {
    "text": "your algorithm or the Big O runtime when you're designing and selecting these",
    "start": "2601559",
    "end": "2606779"
  },
  {
    "text": "algorithms don't just think about the average case and the same goes for testing them think about what's the",
    "start": "2606779",
    "end": "2612809"
  },
  {
    "text": "worst that can happen here you know think about designing for the worst case and if there's a worse case that you",
    "start": "2612809",
    "end": "2618839"
  },
  {
    "text": "don't like consider input sanitization if it's not a valid input that you want",
    "start": "2618839",
    "end": "2624750"
  },
  {
    "text": "your users to be giving you so David and",
    "start": "2624750",
    "end": "2630450"
  },
  {
    "start": "2628000",
    "end": "2700000"
  },
  {
    "text": "I are co-authors of a tool along with a couple of our co-workers and we'll be presenting this tool at Arsenal",
    "start": "2630450",
    "end": "2636839"
  },
  {
    "text": "right after this at 11:30 what it does is allows us to generate worst-case",
    "start": "2636839",
    "end": "2642390"
  },
  {
    "text": "inputs to some of these common algorithms that we know are used in a lot of applications so will generate the",
    "start": "2642390",
    "end": "2649079"
  },
  {
    "text": "worst case inputs given some requirements and you'll be able to",
    "start": "2649079",
    "end": "2654660"
  },
  {
    "text": "generate those worst case inputs that hit these corner cases and generate bad outcomes another tool is reduce",
    "start": "2654660",
    "end": "2662969"
  },
  {
    "text": "identification so David talked about regular expression denial of service and",
    "start": "2662969",
    "end": "2668339"
  },
  {
    "text": "we have a tool that'll take a regular expression and tell you whether or not it's vulnerable to some catastrophic",
    "start": "2668339",
    "end": "2674910"
  },
  {
    "text": "backtracking and we're also releasing pocs for the two vulnerabilities we",
    "start": "2674910",
    "end": "2682440"
  },
  {
    "text": "talked about the PDF and the password checking vulnerabilities those are part",
    "start": "2682440",
    "end": "2687989"
  },
  {
    "text": "built into a CSV which is life now at this github link so again we'll be at",
    "start": "2687989",
    "end": "2693779"
  },
  {
    "text": "Arsenal at 11:30 at Station three couple of our coworkers will be presenting there and we encourage you to check it",
    "start": "2693779",
    "end": "2699390"
  },
  {
    "text": "out so finally as a member the audience what can you do well for pen testers you",
    "start": "2699390",
    "end": "2706380"
  },
  {
    "start": "2700000",
    "end": "2789000"
  },
  {
    "text": "can incorporate AC vulnerabilities into your testing we hope that a cease point",
    "start": "2706380",
    "end": "2711719"
  },
  {
    "text": "will help with that but also coming up with your own test Suites and really making AC Security a habit for",
    "start": "2711719",
    "end": "2719609"
  },
  {
    "text": "developers developing with the worst case inputs in mind so ask yourself what",
    "start": "2719609",
    "end": "2726599"
  },
  {
    "text": "is the worst that can happen we think you know if you ask that question up front and not later on you know if you",
    "start": "2726599",
    "end": "2734219"
  },
  {
    "text": "if you don't ask that question up front you may not like the answer later on and finally for researchers you know",
    "start": "2734219",
    "end": "2740700"
  },
  {
    "text": "granted David and I had the years of experience on Stack looking at these types of vulnerabilities but one of the",
    "start": "2740700",
    "end": "2748349"
  },
  {
    "text": "things that really surprised us was when we looked at these particular targets it was a matter of you know days not months",
    "start": "2748349",
    "end": "2755910"
  },
  {
    "text": "or years that we were looking at these particular targets and found these vulnerabilities that leads us to believe",
    "start": "2755910",
    "end": "2762509"
  },
  {
    "text": "that these are really prevalent in other software and so one of you out there may",
    "start": "2762509",
    "end": "2767640"
  },
  {
    "text": "be the next one to find one we hope this talk helped you know some of the warning",
    "start": "2767640",
    "end": "2773520"
  },
  {
    "text": "signs of a sieve ulnar abilities and be able to identify them better and recognize them for what they are and",
    "start": "2773520",
    "end": "2780620"
  },
  {
    "text": "when you do find one and see something say something you know tell other people",
    "start": "2780620",
    "end": "2785730"
  },
  {
    "text": "about it so we can get better as a community so thanks for your attention",
    "start": "2785730",
    "end": "2791460"
  },
  {
    "start": "2789000",
    "end": "2816000"
  },
  {
    "text": "we have a blog page up or we'll be posting some more information about these vulnerabilities and AC",
    "start": "2791460",
    "end": "2797640"
  },
  {
    "text": "vulnerabilities in general there's our contact information and again we'll be at Arsenal at 11:30 in the business hall",
    "start": "2797640",
    "end": "2804270"
  },
  {
    "text": "we hope you'll join us there and we've got a few minutes for questions from the aisle mics if anyone has any no thank",
    "start": "2804270",
    "end": "2812820"
  },
  {
    "text": "you [Music] [Applause]",
    "start": "2812820",
    "end": "2818630"
  }
]