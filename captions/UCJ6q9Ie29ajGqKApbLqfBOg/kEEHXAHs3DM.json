[
  {
    "text": "this session is creating a spider goat using transactional memory support for security by and this will be your",
    "start": "30",
    "end": "6450"
  },
  {
    "text": "speakers are and I'm probably going to say this wrong despite the fact you've corrected me twice now eager boutique",
    "start": "6450",
    "end": "14929"
  },
  {
    "text": "Thank You Ricky okay hello everyone and thanks for",
    "start": "15320",
    "end": "22470"
  },
  {
    "text": "making it to the last session of the day we have a very good hour in front of us",
    "start": "22470",
    "end": "28920"
  },
  {
    "text": "and it's the last hour at blackhat and after we are done we will be able to",
    "start": "28920",
    "end": "35760"
  },
  {
    "text": "relax and enjoy ourselves and had even more beer and think of going to day of",
    "start": "35760",
    "end": "41579"
  },
  {
    "text": "corn and all that exciting stuff but I hoping to excite you here today with",
    "start": "41579",
    "end": "48350"
  },
  {
    "text": "some interesting research that we've been doing as recommends and my name is",
    "start": "48350",
    "end": "55170"
  },
  {
    "text": "eager and I have two co-authors for that research Alexandre mom Alex is on his",
    "start": "55170",
    "end": "63480"
  },
  {
    "text": "way from the airport so I'll take all the brunt and deliver the speech he",
    "start": "63480",
    "end": "69390"
  },
  {
    "text": "might show up a moment in time but this work is joint and I am presenting it so",
    "start": "69390",
    "end": "76020"
  },
  {
    "text": "the first thing I ought to do is actually explain the title the title",
    "start": "76020",
    "end": "81049"
  },
  {
    "text": "it's weird but then again if you saw a",
    "start": "81049",
    "end": "87000"
  },
  {
    "text": "more boring version of it without any genetically engineered animals just",
    "start": "87000",
    "end": "93930"
  },
  {
    "text": "plain using transactional memory support for security it wouldn't be as interesting potentially and why are we",
    "start": "93930",
    "end": "105540"
  },
  {
    "text": "talking about genetically engineered animals anyway we took some technology",
    "start": "105540",
    "end": "112110"
  },
  {
    "text": "available in contemporary CPUs stuff",
    "start": "112110",
    "end": "117240"
  },
  {
    "text": "related to performance improvements mainly and applied that to security it's",
    "start": "117240",
    "end": "123360"
  },
  {
    "text": "not something that is often possible or that can normally be done so it's a bit",
    "start": "123360",
    "end": "129929"
  },
  {
    "text": "of an unusual animal and it has its clerks which we'll be",
    "start": "129929",
    "end": "136220"
  },
  {
    "text": "discussing in some detail later and that's why we were trying to come up",
    "start": "136220",
    "end": "143750"
  },
  {
    "text": "with a good name for it and the first sort of a genetically-engineered animal",
    "start": "143750",
    "end": "150280"
  },
  {
    "text": "that we had was a spider pig",
    "start": "150280",
    "end": "156350"
  },
  {
    "text": "can I ask you by the show of hands to show who knows what a spider pig is one",
    "start": "156350",
    "end": "166370"
  },
  {
    "text": "two three or about half of the audience okay so let me for those who haven't",
    "start": "166370",
    "end": "172460"
  },
  {
    "text": "seen a spider pig before show you a famous cartoon from Fox instance movie",
    "start": "172460",
    "end": "179440"
  },
  {
    "text": "that explains to you what a spy the pig is because tracks got on the same line",
    "start": "179440",
    "end": "194690"
  },
  {
    "text": "spider pig spider pig does whatever a spider pig choice okay and he swing from",
    "start": "194690",
    "end": "201890"
  },
  {
    "text": "a web no we can't he's a pig look he's",
    "start": "201890",
    "end": "207230"
  },
  {
    "text": "aspire to pee okay that was a YouTube video of that part of the movie and so",
    "start": "207230",
    "end": "215720"
  },
  {
    "text": "now we all know what is pi the pig is but spider pig is actually not something",
    "start": "215720",
    "end": "222340"
  },
  {
    "text": "used for security and we were thinking what other animals are good animals that",
    "start": "222340",
    "end": "229670"
  },
  {
    "text": "are often used in security and such an animal with a goat I'm not sure if all",
    "start": "229670",
    "end": "237320"
  },
  {
    "text": "of you know what a goat program is of goat process it's a concept of very",
    "start": "237320",
    "end": "245270"
  },
  {
    "text": "primitive honeypot essentially you take something and you leave it to its own",
    "start": "245270",
    "end": "250580"
  },
  {
    "text": "devices usually some predator chases that animal like a wolf in this picture",
    "start": "250580",
    "end": "257030"
  },
  {
    "text": "it attacks the goat and then you know that animal is a predator and that's how",
    "start": "257030",
    "end": "262610"
  },
  {
    "text": "we often applied gold programs God file you leave",
    "start": "262610",
    "end": "268030"
  },
  {
    "text": "it in the system if it changes something must have attacked it so that's the",
    "start": "268030",
    "end": "273310"
  },
  {
    "text": "security concept imported in a go we",
    "start": "273310",
    "end": "278979"
  },
  {
    "text": "combine these terms by the pig and sacrificial goat and came up with",
    "start": "278979",
    "end": "286750"
  },
  {
    "text": "despite the gold so that's what we are going to talk about and I have some visual aids here",
    "start": "286750",
    "end": "293259"
  },
  {
    "text": "corns like a good goat hold and we'll be",
    "start": "293259",
    "end": "299919"
  },
  {
    "text": "using it in our future explanations so",
    "start": "299919",
    "end": "305259"
  },
  {
    "text": "here we are our agenda today is to discuss monitoring memory monitoring memory is important because when you",
    "start": "305259",
    "end": "313300"
  },
  {
    "text": "want to know if something is making unauthorized modifications to kernel",
    "start": "313300",
    "end": "321069"
  },
  {
    "text": "system tables or system dispatch tables",
    "start": "321069",
    "end": "327940"
  },
  {
    "text": "it's all usually done with some nefarious purpose so you need to know",
    "start": "327940",
    "end": "333610"
  },
  {
    "text": "what changes in memory why and full memory access controls are not really",
    "start": "333610",
    "end": "339909"
  },
  {
    "text": "something that we currently have so hold monitoring tools for memory and",
    "start": "339909",
    "end": "346180"
  },
  {
    "text": "technologies suitable for that a potentially very useful for security and",
    "start": "346180",
    "end": "351190"
  },
  {
    "text": "we'll see what's available right now then we will talk about transactional",
    "start": "351190",
    "end": "356710"
  },
  {
    "text": "synchronization problem if you don't know about that not to worry I'll explain it to you in",
    "start": "356710",
    "end": "362680"
  },
  {
    "text": "simple terms and then we'll discuss what the solutions are for transactional",
    "start": "362680",
    "end": "369779"
  },
  {
    "text": "synchronization hardware solutions these hardware solutions we would want to",
    "start": "369779",
    "end": "376630"
  },
  {
    "text": "apply for security which is something that normally not done and that is what",
    "start": "376630",
    "end": "384130"
  },
  {
    "text": "that was the purpose of our research I'll show you a demo of how an",
    "start": "384130",
    "end": "390520"
  },
  {
    "text": "authorized memory changes get detected by using transactional",
    "start": "390520",
    "end": "396990"
  },
  {
    "text": "hardware support and we discussed potential applications of these technologies and what are the advantages",
    "start": "396990",
    "end": "403350"
  },
  {
    "text": "of using it and also disadvantages of using it and then we'll compare all the",
    "start": "403350",
    "end": "409830"
  },
  {
    "text": "memory approaches standard ones and the new one sort of in a table one to one",
    "start": "409830",
    "end": "415139"
  },
  {
    "text": "and see what the strengths and weaknesses of each one is so the",
    "start": "415139",
    "end": "423780"
  },
  {
    "text": "simplest way of monitoring memory for changes is just running it type memory",
    "start": "423780",
    "end": "430200"
  },
  {
    "text": "checking hope you keep reading whatever you're interested in and comparing what it should be the problem is that if some",
    "start": "430200",
    "end": "439970"
  },
  {
    "text": "malicious code tries to modify these areas of memory or page the checking",
    "start": "439970",
    "end": "447660"
  },
  {
    "text": "loop itself you may not even have time to react and that type of software",
    "start": "447660",
    "end": "453030"
  },
  {
    "text": "protection will be fairly easily defeated it's also very CPU intensive so",
    "start": "453030",
    "end": "458330"
  },
  {
    "text": "pretty expensive from the point of view of consuming CPU cycles and battery and",
    "start": "458330",
    "end": "463590"
  },
  {
    "text": "laptops all the drawbacks associated with it there is another method which",
    "start": "463590",
    "end": "470490"
  },
  {
    "text": "can be used from the hypervisor mode and if you're in control of memory page tables you can declare some of the",
    "start": "470490",
    "end": "479280"
  },
  {
    "text": "memory pages as read-only and then any attempt to write to these pages would",
    "start": "479280",
    "end": "484340"
  },
  {
    "text": "naturally create a page fault and that exception can be caught and you can",
    "start": "484340",
    "end": "490710"
  },
  {
    "text": "check what part of the page that you label as read-only what modified but to",
    "start": "490710",
    "end": "499020"
  },
  {
    "text": "be able to revert the changes or make comparisons you need a full copy of the page so if you protect many you would",
    "start": "499020",
    "end": "505289"
  },
  {
    "text": "end up having an exact copy of what you are protecting somewhere else which doubles the memory requirement and",
    "start": "505289",
    "end": "512610"
  },
  {
    "text": "that's expensive and also the disadvantage of code is that you have to apply these jets from the hypervisor or",
    "start": "512610",
    "end": "519990"
  },
  {
    "text": "from the operating system who are in control of page tables or extended page tables another disadvantage of",
    "start": "519990",
    "end": "529649"
  },
  {
    "text": "technology is that the granularity one page is four kilobytes and that's a",
    "start": "529649",
    "end": "534689"
  },
  {
    "text": "pretty large blob of data if if you know that something modified for kilobytes is",
    "start": "534689",
    "end": "540240"
  },
  {
    "text": "still hard to go inside and check what exactly was changed in this particular page so that's the Arsenal that we have",
    "start": "540240",
    "end": "548040"
  },
  {
    "text": "now and by the end of my talk I'm hoping to show you one more tool that you would",
    "start": "548040",
    "end": "553529"
  },
  {
    "text": "have at your disposal to constantly monitor for memory changes and there are",
    "start": "553529",
    "end": "561240"
  },
  {
    "text": "some clear advantages in doing so wire transactional support so let me explain",
    "start": "561240",
    "end": "570449"
  },
  {
    "text": "to you how that Hardware technology came about and what the transactional synchronization problem is in the first",
    "start": "570449",
    "end": "577350"
  },
  {
    "text": "place it actually came from the area of databases basically when several",
    "start": "577350",
    "end": "590240"
  },
  {
    "text": "programs or computers read want to modify the same area of memory the same",
    "start": "591019",
    "end": "597139"
  },
  {
    "text": "record in a database they may create a conflict if both write to the same",
    "start": "597139",
    "end": "603569"
  },
  {
    "text": "location this access has to be arbitrated and that's how it looks in",
    "start": "603569",
    "end": "612809"
  },
  {
    "text": "database this scenario is very very often happening in this example if we",
    "start": "612809",
    "end": "619889"
  },
  {
    "text": "have one user Alice and she has a thousand dollars in your account and two",
    "start": "619889",
    "end": "627689"
  },
  {
    "text": "database threads want to add $100 and",
    "start": "627689",
    "end": "633360"
  },
  {
    "text": "another $50 to the same account depending on when they read the original amount increase it and write it back",
    "start": "633360",
    "end": "640490"
  },
  {
    "text": "depending on the order of these events you may actually end up having very",
    "start": "640490",
    "end": "645600"
  },
  {
    "text": "different outcomes of that operation and",
    "start": "645600",
    "end": "650540"
  },
  {
    "text": "in total you would potentially have three outcomes only one of those is correct to solve that problem typically",
    "start": "651679",
    "end": "662490"
  },
  {
    "text": "software using locks so basically if one piece of software wants to modify an area of",
    "start": "662490",
    "end": "669870"
  },
  {
    "text": "memory they put a lock on it it's like a semaphore it can be red or green and",
    "start": "669870",
    "end": "677870"
  },
  {
    "text": "other threads weight which is extremely bad for multi-core CPUs because other",
    "start": "677870",
    "end": "684269"
  },
  {
    "text": "course essentially stall and wait for the first code to complete the operation that's waste of hardware if you will and",
    "start": "684269",
    "end": "694800"
  },
  {
    "text": "the origin of this problem why is in the fact that if two separate programs are",
    "start": "694800",
    "end": "700800"
  },
  {
    "text": "two separate threads right to the same location in memory a read write conflict can occur and arbitrating this conflict",
    "start": "700800",
    "end": "708690"
  },
  {
    "text": "is the root of the problem let me",
    "start": "708690",
    "end": "715860"
  },
  {
    "text": "explain to you how typically books are used in software as I said Ellis let's",
    "start": "715860",
    "end": "722160"
  },
  {
    "text": "imagine has thousand dollars in her account then the thread comes about which wants to add a hundred dollars",
    "start": "722160",
    "end": "730339"
  },
  {
    "text": "transaction transfer from Bob and that transaction should add a hundred so to",
    "start": "730339",
    "end": "737579"
  },
  {
    "text": "make it safe that thread puts a red log onto that memory cell so that all other",
    "start": "737579",
    "end": "745140"
  },
  {
    "text": "processes in the system would wait then the transaction is complete 100 is aided",
    "start": "745140",
    "end": "751560"
  },
  {
    "text": "Alice ends up with $100 more than she had and at this point the log can be",
    "start": "751560",
    "end": "760890"
  },
  {
    "text": "released and it's again a green light another transaction which potentially",
    "start": "760890",
    "end": "765990"
  },
  {
    "text": "was waiting for the lock checks it's green and Carol wants to add $50 it",
    "start": "765990",
    "end": "776430"
  },
  {
    "text": "again locks that particular memory area that red semaphore deforms the",
    "start": "776430",
    "end": "785820"
  },
  {
    "text": "transaction now the amount of money in Alice's account is correct because it",
    "start": "785820",
    "end": "793319"
  },
  {
    "text": "occurred in exactly the right steps and there was no interference unsynchronized region right and then it",
    "start": "793319",
    "end": "802550"
  },
  {
    "text": "can be released for all other transactions which we are potentially waiting whether they were running",
    "start": "802550",
    "end": "808480"
  },
  {
    "text": "waiting or not that situation is bad for",
    "start": "808480",
    "end": "814240"
  },
  {
    "text": "multi-core CPUs and that's why hardware",
    "start": "814240",
    "end": "820420"
  },
  {
    "text": "manufacturers were looking for a solution to this problem the transistors",
    "start": "820420",
    "end": "827960"
  },
  {
    "text": "get smaller the cpus get more powerful and you want to run them at full speed",
    "start": "827960",
    "end": "833690"
  },
  {
    "text": "and waiting for a software lock to be released to perform computation and",
    "start": "833690",
    "end": "840710"
  },
  {
    "text": "addition it's just not effective use of hardware so the idea was you let that",
    "start": "840710",
    "end": "847220"
  },
  {
    "text": "Hardware run and you let it make mistakes and if a mistake happens the",
    "start": "847220",
    "end": "856460"
  },
  {
    "text": "hardware should only be able to detect it and then the software kicks in and",
    "start": "856460",
    "end": "862940"
  },
  {
    "text": "fixes a hardware mistake did you get that so the idea of transactional memory",
    "start": "862940",
    "end": "871190"
  },
  {
    "text": "is that you let Hardware around and make mistakes",
    "start": "871190",
    "end": "876250"
  },
  {
    "text": "there is a hilarious explanation of that technology in use any exposed from one",
    "start": "876250",
    "end": "884720"
  },
  {
    "text": "of the Microsoft guys Mickens is his name and he was writing there that as",
    "start": "884720",
    "end": "892250"
  },
  {
    "text": "hard way is getting smaller and smaller you just allow the computations to go",
    "start": "892250",
    "end": "900710"
  },
  {
    "text": "ahead and if they produce an error Yuri executes them and she also writes",
    "start": "900710",
    "end": "909880"
  },
  {
    "text": "modern software barely works when the cadre is correct or relying on software",
    "start": "909880",
    "end": "915740"
  },
  {
    "text": "to correct hardware errors is like asking at zero to prevent Mechagodzilla",
    "start": "915740",
    "end": "921350"
  },
  {
    "text": "from terrorizing Japan in the same block",
    "start": "921350",
    "end": "926660"
  },
  {
    "text": "there is another statement from the same person and to be honest it has",
    "start": "926660",
    "end": "934100"
  },
  {
    "text": "absolutely nothing to do with our topic and transactional memory and using it",
    "start": "934100",
    "end": "939140"
  },
  {
    "text": "for security but I wanted to pull it any way because it's one of my favorites",
    "start": "939140",
    "end": "944180"
  },
  {
    "text": "it says that if CPU utilization on a computer goes above four percent the",
    "start": "944180",
    "end": "950360"
  },
  {
    "text": "computer either has the virus or the user made the disastrous decision to run job I thoroughly recommend you reading",
    "start": "950360",
    "end": "959540"
  },
  {
    "text": "the entire blog post because it's just a lot of fun but the main idea is letting",
    "start": "959540",
    "end": "971990"
  },
  {
    "text": "Hardware to execute and trap if an error like real read write conflict occurs and",
    "start": "971990",
    "end": "981100"
  },
  {
    "text": "the realization that it would actually speed up computations and some modeling was obviously made was achieved several",
    "start": "981100",
    "end": "990440"
  },
  {
    "text": "years ago and the first Hardware with this capability came from IBM in Blue",
    "start": "990440",
    "end": "995750"
  },
  {
    "text": "Gene computer in 2011 then they released the mainframe in 2012 that is it wealth",
    "start": "995750",
    "end": "1003450"
  },
  {
    "text": "and in tow released the fourth generation CPU called hospital in summer",
    "start": "1003450",
    "end": "1011770"
  },
  {
    "text": "2013 and that is what we have been experimenting with IBM also released",
    "start": "1011770",
    "end": "1018040"
  },
  {
    "text": "power rate CPU just a little more than a month ago in June and all these CPUs",
    "start": "1018040",
    "end": "1025780"
  },
  {
    "text": "have transactional support so separate threads can start writing to the same location and there are mechanisms to",
    "start": "1025780",
    "end": "1033699"
  },
  {
    "text": "resolve these problems if there is actually a conflict into production or",
    "start": "1033700",
    "end": "1040510"
  },
  {
    "text": "synchronization extensions it's called int'l tsx is basically an optimization",
    "start": "1040510",
    "end": "1045970"
  },
  {
    "text": "which is focused on resolving threats conflict and it comes in two kinds there",
    "start": "1045970",
    "end": "1052030"
  },
  {
    "text": "are two methods of introducing in it into software hardware",
    "start": "1052030",
    "end": "1057650"
  },
  {
    "text": "a local Asian or Asian e and another is",
    "start": "1057650",
    "end": "1062870"
  },
  {
    "text": "restricted transactional memory rpm they achieve the same goal but through slightly different level of",
    "start": "1062870",
    "end": "1069260"
  },
  {
    "text": "compatibility HOA is more easier to put into your program but it doesn't give",
    "start": "1069260",
    "end": "1075410"
  },
  {
    "text": "you full flexibility rpm gives you full flexibility but you have to make more changes to the software to perform your",
    "start": "1075410",
    "end": "1084490"
  },
  {
    "text": "transactions and detect conflicts between threat so in local Asian mode",
    "start": "1084490",
    "end": "1091310"
  },
  {
    "text": "there are two new instructions X square and X release these two and they",
    "start": "1091310",
    "end": "1097790"
  },
  {
    "text": "actually not instructions their prefixes so all CPUs just skip them they don't",
    "start": "1097790",
    "end": "1103670"
  },
  {
    "text": "understand these prefixes they're new to them and that provides full hundred-percent backward compatibility",
    "start": "1103670",
    "end": "1110750"
  },
  {
    "text": "with all the CPUs in RTM mode there are new instructions they have separate new",
    "start": "1110750",
    "end": "1119360"
  },
  {
    "text": "commands and executing them on any CPU that doesn't support them would create",
    "start": "1119360",
    "end": "1125090"
  },
  {
    "text": "an illegal instruction so before doing that so before executing X begin and X",
    "start": "1125090",
    "end": "1131570"
  },
  {
    "text": "and these new instructions or transactional support you have to check that the CPU supports it and CPU IETF is",
    "start": "1131570",
    "end": "1141260"
  },
  {
    "text": "written in the bottom line on this slide and by interrogating the CPU capability",
    "start": "1141260",
    "end": "1147950"
  },
  {
    "text": "you can learn whether it supports restricted transactional memory or not and there are a couple of auxiliary",
    "start": "1147950",
    "end": "1153320"
  },
  {
    "text": "instructions X tester X abort to facilitate sort of the plumbing related",
    "start": "1153320",
    "end": "1158960"
  },
  {
    "text": "to transactional memory so let me show",
    "start": "1158960",
    "end": "1165200"
  },
  {
    "text": "you how the code looks like when you write software with lost that's a",
    "start": "1165200",
    "end": "1172670"
  },
  {
    "text": "standard usual way of doing it you have a lock in this variable you read it if",
    "start": "1172670",
    "end": "1181880"
  },
  {
    "text": "it's a key you just go and add your hundred dollars it's safe to do so if",
    "start": "1181880",
    "end": "1187790"
  },
  {
    "text": "it's not a key you keep reading spinning in this small loop and once the",
    "start": "1187790",
    "end": "1195250"
  },
  {
    "text": "lock is released you return try to obtain in again and once you obtain the",
    "start": "1195250",
    "end": "1200380"
  },
  {
    "text": "lock you safely add $100 simple so in",
    "start": "1200380",
    "end": "1206820"
  },
  {
    "text": "Hardware lo collision mode all you have to do is just add one simple prefix",
    "start": "1206820",
    "end": "1212890"
  },
  {
    "text": "which is ex acquire what it tells CPU to do is to go to do this transaction don't",
    "start": "1212890",
    "end": "1220870"
  },
  {
    "text": "really care about the value in this mutex value the law but if somebody else",
    "start": "1220870",
    "end": "1229870"
  },
  {
    "text": "writes to the same memory that your transaction which starts with this X",
    "start": "1229870",
    "end": "1235809"
  },
  {
    "text": "acquire and goes all the way until you use X release if something writes to the",
    "start": "1235809",
    "end": "1243490"
  },
  {
    "text": "same location CPU would come back to that point and do the same thing again",
    "start": "1243490",
    "end": "1249909"
  },
  {
    "text": "but only without that transactional mode essentially it reverts to the previous",
    "start": "1249909",
    "end": "1257049"
  },
  {
    "text": "behavior of the train once in many cases that actually produces hell of a",
    "start": "1257049",
    "end": "1262690"
  },
  {
    "text": "performance improvement but in restricting transactional mode you can",
    "start": "1262690",
    "end": "1267700"
  },
  {
    "text": "do a lot more you write a whole new routine which speculatively adds a",
    "start": "1267700",
    "end": "1274120"
  },
  {
    "text": "hundred dollars and if that writing created a conflict which is called an",
    "start": "1274120",
    "end": "1281770"
  },
  {
    "text": "abort and the boat location is specified in the first instruction X begin and abort abort instruction",
    "start": "1281770",
    "end": "1290320"
  },
  {
    "text": "about is the offset of that routine and",
    "start": "1290320",
    "end": "1295830"
  },
  {
    "text": "it handles the conflict and it has full software flexibility it can retry that",
    "start": "1295830",
    "end": "1302620"
  },
  {
    "text": "transaction several times as many times as it likes if it fails it can go and",
    "start": "1302620",
    "end": "1310630"
  },
  {
    "text": "repeat that transaction in the standard mode just like this but in many cases",
    "start": "1310630",
    "end": "1316360"
  },
  {
    "text": "it'll succeed so that's fine you can read about more",
    "start": "1316360",
    "end": "1321460"
  },
  {
    "text": "about that more there is nothing new to it giving you the background about transactional memory in Wikipedia and",
    "start": "1321460",
    "end": "1329149"
  },
  {
    "text": "there are many references there if transactional memory approach is",
    "start": "1329149",
    "end": "1336230"
  },
  {
    "text": "successful what happens is that instead of cascading and locking the same memory",
    "start": "1336230",
    "end": "1344269"
  },
  {
    "text": "area between different threads so that thread was waiting for the first to",
    "start": "1344269",
    "end": "1349490"
  },
  {
    "text": "complete then the third was what waiting for the previous two it executed",
    "start": "1349490",
    "end": "1355159"
  },
  {
    "text": "sequentially with transactional method you can execute them in parallel and in",
    "start": "1355159",
    "end": "1361279"
  },
  {
    "text": "most cases the conflict wouldn't really occur the threads write very quickly so",
    "start": "1361279",
    "end": "1366710"
  },
  {
    "text": "if they complete the right brief the the next transaction wouldn't actually",
    "start": "1366710",
    "end": "1372110"
  },
  {
    "text": "create a read write conflict it would just get the new updated data the most",
    "start": "1372110",
    "end": "1381769"
  },
  {
    "text": "common question about into TSX is so what is that technology is it",
    "start": "1381769",
    "end": "1387980"
  },
  {
    "text": "related to virtualization or maybe it's some variation of peach protection",
    "start": "1387980",
    "end": "1395929"
  },
  {
    "text": "technology and I wanted to state up front that int'l TSX is not related to",
    "start": "1395929",
    "end": "1403909"
  },
  {
    "text": "virtualization at all it has nothing to do with page tables it's a completely",
    "start": "1403909",
    "end": "1409070"
  },
  {
    "text": "new functionality in the CPU and it",
    "start": "1409070",
    "end": "1414470"
  },
  {
    "text": "actually piggy backs on how the CPU processes accesses to memory through",
    "start": "1414470",
    "end": "1422269"
  },
  {
    "text": "cache so the granularity of these accesses is the cache line 64 bytes and",
    "start": "1422269",
    "end": "1429009"
  },
  {
    "text": "transactional memory can detect conflicts within cache lines but it",
    "start": "1429009",
    "end": "1434090"
  },
  {
    "text": "cannot detect with better granularity so inside 64 bytes what exactly was the",
    "start": "1434090",
    "end": "1443679"
  },
  {
    "text": "conflict place is not visible to the program",
    "start": "1443679",
    "end": "1450590"
  },
  {
    "text": "transactional memory support in the processor has its own dedicated memory",
    "start": "1450590",
    "end": "1455690"
  },
  {
    "text": "to store a table which excesses have occurred and it uses",
    "start": "1455690",
    "end": "1461180"
  },
  {
    "text": "existing cache coherency protocols to detect conflict because its existing",
    "start": "1461180",
    "end": "1470090"
  },
  {
    "text": "cache systems it works between different CPU cores it works with different hyper",
    "start": "1470090",
    "end": "1478550"
  },
  {
    "text": "threads in the same core and what actually happens if a thread is",
    "start": "1478550",
    "end": "1486470"
  },
  {
    "text": "executing as a transaction and writes to a place in memory before that thread",
    "start": "1486470",
    "end": "1492110"
  },
  {
    "text": "completes a transaction which is denoted with X and instruction that write is not",
    "start": "1492110",
    "end": "1501050"
  },
  {
    "text": "visible to the rest of the system which means essentially the CPU is executing",
    "start": "1501050",
    "end": "1508720"
  },
  {
    "text": "these memory writes as a sandbox with a",
    "start": "1508720",
    "end": "1516500"
  },
  {
    "text": "sandbox we can do quite a lot of interesting security things in normal",
    "start": "1516500",
    "end": "1524090"
  },
  {
    "text": "mode we require programmers to mock transactions in source code and they",
    "start": "1524090",
    "end": "1530270"
  },
  {
    "text": "need to resolve a conflict if two threads conflicted by one doing read",
    "start": "1530270",
    "end": "1538070"
  },
  {
    "text": "another doing right or both doing right to the same location the problem has to resolve that problem like people saw in",
    "start": "1538070",
    "end": "1546140"
  },
  {
    "text": "the example in the worst case one has to revert to the standard locking mechanism",
    "start": "1546140",
    "end": "1553490"
  },
  {
    "text": "and the method to resolve that conflict",
    "start": "1553490",
    "end": "1559930"
  },
  {
    "text": "is by specifying the abort routine the offset in the eggs begin parameter which",
    "start": "1559930",
    "end": "1568550"
  },
  {
    "text": "gives you the place of the code which looks at the results of the conflict and",
    "start": "1568550",
    "end": "1574970"
  },
  {
    "text": "it can resolve the transaction conflict the programmer is rerun the transaction",
    "start": "1574970",
    "end": "1583220"
  },
  {
    "text": "several times and in the end if nothing else works software locks will so let me show you",
    "start": "1583220",
    "end": "1593660"
  },
  {
    "text": "what the typical enthalpy or sex use is on this slide we have two threads the",
    "start": "1593660",
    "end": "1600770"
  },
  {
    "text": "first one and the second one they execute in parallel and there is a piece",
    "start": "1600770",
    "end": "1605809"
  },
  {
    "text": "of memory in the middle between them and we want to detect when this read to that",
    "start": "1605809",
    "end": "1614809"
  },
  {
    "text": "cache line B occurs while that write to the same cache line be in memory already",
    "start": "1614809",
    "end": "1624880"
  },
  {
    "text": "perform the modification so I'll need my",
    "start": "1624880",
    "end": "1629900"
  },
  {
    "text": "visual aid in this case both transactions have X abort parameter one",
    "start": "1629900",
    "end": "1637760"
  },
  {
    "text": "specifies the bot handle of for this thread another specifies the bot handler",
    "start": "1637760",
    "end": "1643040"
  },
  {
    "text": "for this thread so we have two so let's",
    "start": "1643040",
    "end": "1649669"
  },
  {
    "text": "execute these threads and parallel they perform both reads of the same location",
    "start": "1649669",
    "end": "1655340"
  },
  {
    "text": "they both read there is no conflict then",
    "start": "1655340",
    "end": "1660440"
  },
  {
    "text": "the next operation comes again they read from another cache line balls reads no",
    "start": "1660440",
    "end": "1668390"
  },
  {
    "text": "conflict but both transactions actually remember which memory locations were",
    "start": "1668390",
    "end": "1673820"
  },
  {
    "text": "accessed read or written in turn on the next step second thread performs the",
    "start": "1673820",
    "end": "1680929"
  },
  {
    "text": "right but a different cache line that we are looking at on the next step again",
    "start": "1680929",
    "end": "1689890"
  },
  {
    "text": "one is performing a write the location which is never accessed by the first so",
    "start": "1689890",
    "end": "1696919"
  },
  {
    "text": "no conflict neither now nor later at",
    "start": "1696919",
    "end": "1702380"
  },
  {
    "text": "this point the second thread reads from",
    "start": "1702380",
    "end": "1707780"
  },
  {
    "text": "the same location which is about to be modified by the first thread and on the",
    "start": "1707780",
    "end": "1714890"
  },
  {
    "text": "next step the right occurs and that creates a",
    "start": "1714890",
    "end": "1721460"
  },
  {
    "text": "conflict because this memory location was previously read by a different threat so at this point immediately the",
    "start": "1721460",
    "end": "1730040"
  },
  {
    "text": "CPU in Hardware generates a CPU abort all the memory changes that were done by",
    "start": "1730040",
    "end": "1736730"
  },
  {
    "text": "the second threat always write two",
    "start": "1736730",
    "end": "1741910"
  },
  {
    "text": "locations D&C are riveted and they were",
    "start": "1741910",
    "end": "1747140"
  },
  {
    "text": "not visible to other threads in the first place and the abort held my",
    "start": "1747140",
    "end": "1753050"
  },
  {
    "text": "associated with that threat which is control so that offset to this is",
    "start": "1753050",
    "end": "1759350"
  },
  {
    "text": "control that is typically how TSX is working in standard mode so can we use",
    "start": "1759350",
    "end": "1767870"
  },
  {
    "text": "transactional memory support for security it was implemented to make",
    "start": "1767870",
    "end": "1774970"
  },
  {
    "text": "database software more performant and with all due respect to programmers of",
    "start": "1774970",
    "end": "1780380"
  },
  {
    "text": "database software the million-dollar question is whether that technology can",
    "start": "1780380",
    "end": "1785480"
  },
  {
    "text": "actually be used for something more burning like security so let's have a",
    "start": "1785480",
    "end": "1793550"
  },
  {
    "text": "look at that we do a very similar script",
    "start": "1793550",
    "end": "1799160"
  },
  {
    "text": "with the only difference that now we",
    "start": "1799160",
    "end": "1804170"
  },
  {
    "text": "want to protect these two memory locations and be so 2 cache lines we you",
    "start": "1804170",
    "end": "1809750"
  },
  {
    "text": "see that spider goat in here protecting them balls and that's the memory regions",
    "start": "1809750",
    "end": "1816290"
  },
  {
    "text": "that we want to monitor so our thread",
    "start": "1816290",
    "end": "1821650"
  },
  {
    "text": "the first one security assistance thread is constantly reading from these",
    "start": "1821650",
    "end": "1827780"
  },
  {
    "text": "locations and what you can notice is that that thread doesn't have X begin",
    "start": "1827780",
    "end": "1834640"
  },
  {
    "text": "instruction so it's not executing as a transaction but that asymmetry in tsx",
    "start": "1834640",
    "end": "1841460"
  },
  {
    "text": "implementation is allowed and if there is a conflict read write conflict",
    "start": "1841460",
    "end": "1846490"
  },
  {
    "text": "between n is red and this transaction then an abort would happen so with the",
    "start": "1846490",
    "end": "1858570"
  },
  {
    "text": "help of the video aid we have now one transaction is executing with abort here",
    "start": "1858570",
    "end": "1866190"
  },
  {
    "text": "and another without an abort so let's run through that both threads",
    "start": "1866190",
    "end": "1873870"
  },
  {
    "text": "do a read even though it's from the same cache line doesn't matter to read the",
    "start": "1873870",
    "end": "1881159"
  },
  {
    "text": "Securities read is only doing reads mind you it will never do any right so it's only interested in creating artificially",
    "start": "1881159",
    "end": "1888149"
  },
  {
    "text": "a conflict with what we consider potentially malicious rather suspected",
    "start": "1888149",
    "end": "1894299"
  },
  {
    "text": "threat and that suspected thread that's",
    "start": "1894299",
    "end": "1899970"
  },
  {
    "text": "right to a different cache line called deep in this slide than to see and then",
    "start": "1899970",
    "end": "1909720"
  },
  {
    "text": "to be be is what we want to protect so at that point we see that this cache",
    "start": "1909720",
    "end": "1917429"
  },
  {
    "text": "line is not read at that point and any",
    "start": "1917429",
    "end": "1922980"
  },
  {
    "text": "subsequent access to that memory cell or cache line with the security thread to",
    "start": "1922980",
    "end": "1931889"
  },
  {
    "text": "the same location will create an abort so it instantly created by the CPU all",
    "start": "1931889",
    "end": "1940169"
  },
  {
    "text": "the memory changes that we're done by sorry robot",
    "start": "1940169",
    "end": "1948138"
  },
  {
    "text": "let me roll it back yeah that's where I",
    "start": "1952870",
    "end": "1958460"
  },
  {
    "text": "should be so at this at this point and what happens all the memory",
    "start": "1958460",
    "end": "1964010"
  },
  {
    "text": "modifications which were performed by the suspected thread are related and the",
    "start": "1964010",
    "end": "1969440"
  },
  {
    "text": "control is transferred to the opposite you find in this X begin about offset",
    "start": "1969440",
    "end": "1978080"
  },
  {
    "text": "two now of course you would probably ask a question how does eggs begin ended up in",
    "start": "1978080",
    "end": "1985160"
  },
  {
    "text": "a suspected thread normally it's not an easy thing to do and if it's malware for",
    "start": "1985160",
    "end": "1993500"
  },
  {
    "text": "instance doing some modification to the kernel memory you have to get a",
    "start": "1993500",
    "end": "1999740"
  },
  {
    "text": "suspicion and inject that let's begin to do the memory reversal but you have you",
    "start": "1999740",
    "end": "2010300"
  },
  {
    "text": "can execute the same transaction in a slightly different way if you don't",
    "start": "2010300",
    "end": "2015910"
  },
  {
    "text": "inject X beginning to a suspected thread you can still detect changes that it's",
    "start": "2015910",
    "end": "2022450"
  },
  {
    "text": "doing to what you protect only without memory reversal and that's done again",
    "start": "2022450",
    "end": "2028570"
  },
  {
    "text": "with asymmetrical launching of",
    "start": "2028570",
    "end": "2034110"
  },
  {
    "text": "transactions you have security thread defined as a transaction and the",
    "start": "2034110",
    "end": "2041980"
  },
  {
    "text": "suspected thread now does not have X begin so that means when an abort will happen",
    "start": "2041980",
    "end": "2048639"
  },
  {
    "text": "that thread would execute it's about routine and this about routine as it's",
    "start": "2048640",
    "end": "2057669"
  },
  {
    "text": "not doing any right will have nothing to revert in memory so we have a visual aid",
    "start": "2057669",
    "end": "2065530"
  },
  {
    "text": "in a completely different situation we have X begin in one thread and now it's",
    "start": "2065530",
    "end": "2073510"
  },
  {
    "text": "begin in another Merola because you do only reads in this thread",
    "start": "2073510",
    "end": "2082750"
  },
  {
    "text": "you can do it once they are placed in the transactional buffer and the fact",
    "start": "2082750",
    "end": "2090800"
  },
  {
    "text": "that these wines have been read is remembered and once the first write",
    "start": "2090800",
    "end": "2096280"
  },
  {
    "text": "occurs and abort would happen so that",
    "start": "2096280",
    "end": "2103610"
  },
  {
    "text": "first security threat can just spin here without actually repeating the reading",
    "start": "2103610",
    "end": "2108830"
  },
  {
    "text": "and as soon as suspected thread rights",
    "start": "2108830",
    "end": "2114170"
  },
  {
    "text": "to that particular cache line we get an abort only in this case there is no",
    "start": "2114170",
    "end": "2120710"
  },
  {
    "text": "memory reversal so by putting X begin in",
    "start": "2120710",
    "end": "2128660"
  },
  {
    "text": "either security thread or into suspected thread so doing X begin either this way",
    "start": "2128660",
    "end": "2135830"
  },
  {
    "text": "or that way we can control when the memory reversal on the right dump is a",
    "start": "2135830",
    "end": "2143270"
  },
  {
    "text": "suspected thread is done or not so let",
    "start": "2143270",
    "end": "2149480"
  },
  {
    "text": "me show you now a live demo of how that technology works in a mental this TSX",
    "start": "2149480",
    "end": "2155900"
  },
  {
    "text": "capable notebook and I have to drag all that big rinoa professional laptop all",
    "start": "2155900",
    "end": "2161960"
  },
  {
    "text": "the way from England instead of my usual Ultrabook and it's a heavy beast but it",
    "start": "2161960",
    "end": "2170060"
  },
  {
    "text": "does have the latest CPU and it does support ESX if you maybe want to play",
    "start": "2170060",
    "end": "2176930"
  },
  {
    "text": "with TSX at some point you have to be very careful about selecting the hardware specification because not every",
    "start": "2176930",
    "end": "2184160"
  },
  {
    "text": "laptop released after 2013 will actually have it enabled so the CPU can execute",
    "start": "2184160",
    "end": "2195950"
  },
  {
    "text": "million instructions in just a fraction of a second so the diamo is artificially",
    "start": "2195950",
    "end": "2200990"
  },
  {
    "text": "delayed each and every memory read and write has asleep for like one fifth of a",
    "start": "2200990",
    "end": "2208640"
  },
  {
    "text": "second for you to be able to see something and I'll show you two systems",
    "start": "2208640",
    "end": "2215720"
  },
  {
    "text": "in total one program one legacy and one whereas tsx support it wouldn't fit",
    "start": "2215720",
    "end": "2222079"
  },
  {
    "text": "completed on the screen so I'll show you it in some sort of a window there will",
    "start": "2222079",
    "end": "2229400"
  },
  {
    "text": "be control buttons one is called run save code another run malicious code and",
    "start": "2229400",
    "end": "2236359"
  },
  {
    "text": "another turn on ESX protection so let me do that right now I turn to my desktop",
    "start": "2236359",
    "end": "2245029"
  },
  {
    "text": "and I have a problem here called ESX demo exit here it is on the left side",
    "start": "2245029",
    "end": "2255079"
  },
  {
    "text": "it's a part of a program which is not using tsx in any way shape or form and",
    "start": "2255079",
    "end": "2262309"
  },
  {
    "text": "what it does it has the code area the",
    "start": "2262309",
    "end": "2267529"
  },
  {
    "text": "data area and the area we want to protect by system called table as an example there is a message area at the",
    "start": "2267529",
    "end": "2275059"
  },
  {
    "text": "bottom and you can basically do only two things run safe code or execute",
    "start": "2275059",
    "end": "2280099"
  },
  {
    "text": "malicious code so let me press running",
    "start": "2280099",
    "end": "2286279"
  },
  {
    "text": "the safe code so say thread is executing and it's reading from code area and data",
    "start": "2286279",
    "end": "2295729"
  },
  {
    "text": "area pretty much randomly now it's",
    "start": "2295729",
    "end": "2301429"
  },
  {
    "text": "finished now I run malicious code malicious code is running and writing",
    "start": "2301429",
    "end": "2308390"
  },
  {
    "text": "some date into memory and now it wrote",
    "start": "2308390",
    "end": "2313969"
  },
  {
    "text": "into the system called table message window shows that system call table have",
    "start": "2313969",
    "end": "2322729"
  },
  {
    "text": "been corrupted by the malicious code and malicious thread is finished now it's all done in software you just call piece",
    "start": "2322729",
    "end": "2331640"
  },
  {
    "text": "of software which is writing to our imaginary system called table it's not a real one it's just a blob of memory so",
    "start": "2331640",
    "end": "2341479"
  },
  {
    "text": "that malicious thread wrote to that particular part and we call it malicious so let me switch it to the right side",
    "start": "2341479",
    "end": "2349130"
  },
  {
    "text": "where we have part of a demo which is using TSX support at the beginning of this piece",
    "start": "2349130",
    "end": "2356560"
  },
  {
    "text": "of the program it checks that the CPU is TSX capable and it shows that in the",
    "start": "2356560",
    "end": "2362619"
  },
  {
    "text": "message window so now I will just start",
    "start": "2362619",
    "end": "2368640"
  },
  {
    "text": "the protection path that big blue button",
    "start": "2368640",
    "end": "2377820"
  },
  {
    "text": "starts a security thread and it starts reading from the protected area which is the system called table and it's",
    "start": "2377820",
    "end": "2385599"
  },
  {
    "text": "monitoring it reading and reading it does nothing else it doesn't actually",
    "start": "2385599",
    "end": "2391270"
  },
  {
    "text": "read and compare with what it should be just take and now I press malicious code",
    "start": "2391270",
    "end": "2402810"
  },
  {
    "text": "malicious code that executing writes to some places in the code area and now it",
    "start": "2403859",
    "end": "2411640"
  },
  {
    "text": "wrote to one location in the protected system area now the conflict will occur",
    "start": "2411640",
    "end": "2418390"
  },
  {
    "text": "when our blue thread reaches that point when it reads from the written weication",
    "start": "2418390",
    "end": "2425099"
  },
  {
    "text": "you can see that here in the message window we had on the board and that",
    "start": "2425099",
    "end": "2431560"
  },
  {
    "text": "abroad showed that the read write conflict has been detected and the memory change was actually related back",
    "start": "2431560",
    "end": "2438280"
  },
  {
    "text": "to what it was before so that's the demo it really runs on a real TSX",
    "start": "2438280",
    "end": "2450900"
  },
  {
    "text": "okay and what could be the potential applications of this technology",
    "start": "2464569",
    "end": "2470609"
  },
  {
    "text": "the first idea that comes to mind is using it in the kernel and the operating",
    "start": "2470609",
    "end": "2479339"
  },
  {
    "text": "system like EMM an OS vendors to protect kernel or can you call the kernel data",
    "start": "2479339",
    "end": "2487109"
  },
  {
    "text": "and page God can potentially use it to perform self protection if something is",
    "start": "2487109",
    "end": "2497220"
  },
  {
    "text": "suspected you can start monitoring that suspicious code so inject eggs begin",
    "start": "2497220",
    "end": "2502670"
  },
  {
    "text": "execute an awkward routine if your suspicion is confirmed that the suspected thread actually did write to",
    "start": "2502670",
    "end": "2509130"
  },
  {
    "text": "the location that you are monitoring and you can apply it to protecting any",
    "start": "2509130",
    "end": "2514410"
  },
  {
    "text": "critical code the data exists in called table but anything really outside of",
    "start": "2514410",
    "end": "2522029"
  },
  {
    "text": "these areas it can be used by any independent software vendors for",
    "start": "2522029",
    "end": "2527450"
  },
  {
    "text": "software protection and you begin can protect your data or your code from",
    "start": "2527450",
    "end": "2533329"
  },
  {
    "text": "modification fetching and I mean in",
    "start": "2533329",
    "end": "2538589"
  },
  {
    "text": "memory it definitely raises the bar for the attackers because if your software",
    "start": "2538589",
    "end": "2544109"
  },
  {
    "text": "is doing self checking and self protection why itsx the attackers would have to figure out",
    "start": "2544109",
    "end": "2549839"
  },
  {
    "text": "what is going on because it's something that normal attacker wouldn't expect that hardware supported exception or",
    "start": "2549839",
    "end": "2560880"
  },
  {
    "text": "abort happens if modification occurs in a particular place that was protected",
    "start": "2560880",
    "end": "2567059"
  },
  {
    "text": "wire tsx the advantages of this",
    "start": "2567059",
    "end": "2572339"
  },
  {
    "text": "technology is that essentially it creates a very short-lived hardware",
    "start": "2572339",
    "end": "2577380"
  },
  {
    "text": "supported sandbox and you define the shape and size of that sandbox your",
    "start": "2577380",
    "end": "2584549"
  },
  {
    "text": "security is read when it starts reading from memory it can actually create a sparse pattern or contiguous block of",
    "start": "2584549",
    "end": "2591569"
  },
  {
    "text": "memory and by keeping reading from it it'll define what is",
    "start": "2591569",
    "end": "2596800"
  },
  {
    "text": "protected and as soon as some suspected threat writes into any of the self cache",
    "start": "2596800",
    "end": "2602800"
  },
  {
    "text": "lines hardware supported abort or happen",
    "start": "2602800",
    "end": "2608410"
  },
  {
    "text": "the granularity of protecting memory is 64 bytes which is way way better than",
    "start": "2608410",
    "end": "2613900"
  },
  {
    "text": "page tables 64 bytes versus 4 kilobytes and what probably most important is that",
    "start": "2613900",
    "end": "2622180"
  },
  {
    "text": "it's instant reaction of hardware if any",
    "start": "2622180",
    "end": "2629260"
  },
  {
    "text": "malicious thread wants to write the particular location like modify security",
    "start": "2629260",
    "end": "2635140"
  },
  {
    "text": "software for example that is running self protection it will not have any",
    "start": "2635140",
    "end": "2640300"
  },
  {
    "text": "time to do so because the reaction is instant there is no chance to explore",
    "start": "2640300",
    "end": "2646480"
  },
  {
    "text": "any type of race condition and modify",
    "start": "2646480",
    "end": "2652080"
  },
  {
    "text": "security software while that's read is suspended or inactive the abort will",
    "start": "2652110",
    "end": "2661450"
  },
  {
    "text": "happen instantly and can be reacted to instantly and if you correctly put eggs",
    "start": "2661450",
    "end": "2670570"
  },
  {
    "text": "begin in the suspected software you can also revert the changes or rather the",
    "start": "2670570",
    "end": "2677440"
  },
  {
    "text": "CPU would do the changes liberating for you so is it all nice and shiny not",
    "start": "2677440",
    "end": "2687490"
  },
  {
    "text": "quite because there are some challenges with this approach and when we were experimenting with it in a real",
    "start": "2687490",
    "end": "2692500"
  },
  {
    "text": "operating system what we noticed is that the operating system is creating a fair",
    "start": "2692500",
    "end": "2698500"
  },
  {
    "text": "amount of noise transactions they are supposed to be fairly shot that was",
    "start": "2698500",
    "end": "2704250"
  },
  {
    "text": "basically the design requirement for supporting this optimization in database",
    "start": "2704250",
    "end": "2710950"
  },
  {
    "text": "software and you can run thousands of instructions or several thousands of",
    "start": "2710950",
    "end": "2717190"
  },
  {
    "text": "instructions that is very quick but in operating systems there are interrupts",
    "start": "2717190",
    "end": "2723970"
  },
  {
    "text": "there are context switches and every single one of them completely terminates the transaction",
    "start": "2723970",
    "end": "2731700"
  },
  {
    "text": "that is by design the transactions are all aborted if an interrupt a context",
    "start": "2731700",
    "end": "2738059"
  },
  {
    "text": "switch occurs and in the pot handler you can actually determine the reason for for that board unfortunately that noise",
    "start": "2738059",
    "end": "2746700"
  },
  {
    "text": "in the operating system is fairly significant and timer interrupt switches",
    "start": "2746700",
    "end": "2752339"
  },
  {
    "text": "between different processes are frequent so to perform effective protection by up",
    "start": "2752339",
    "end": "2762530"
  },
  {
    "text": "tsx your thread should be finish wad and",
    "start": "2762530",
    "end": "2767930"
  },
  {
    "text": "while they're executing you should be able to start another thread which is",
    "start": "2767930",
    "end": "2775260"
  },
  {
    "text": "also shot and if it's interrupted it can create another one but it's a little",
    "start": "2775260",
    "end": "2782160"
  },
  {
    "text": "trickier than sort of the type of protection provided by page tables for example if you want to do memory",
    "start": "2782160",
    "end": "2790530"
  },
  {
    "text": "reversal you would need to inject X begin into a thread that you suspect that is not normally easy and you would",
    "start": "2790530",
    "end": "2799559"
  },
  {
    "text": "probably require hypervisor support to do it injection into other processes so",
    "start": "2799559",
    "end": "2806510"
  },
  {
    "text": "memory reversal is not an easy thing to do and obviously if malware is operating",
    "start": "2806510",
    "end": "2813150"
  },
  {
    "text": "in kernel or in hypervisor and already infected the system you are fighting",
    "start": "2813150",
    "end": "2819089"
  },
  {
    "text": "against it the transactional support wouldn't give you any immediate advantage because any kernel software",
    "start": "2819089",
    "end": "2827880"
  },
  {
    "text": "can disable transactions stop any software that is executing security",
    "start": "2827880",
    "end": "2835220"
  },
  {
    "text": "threat and another problem with transactional system is that each CPU",
    "start": "2835220",
    "end": "2841920"
  },
  {
    "text": "each CPU core has its own dedicated transactional memory so it keeps track",
    "start": "2841920",
    "end": "2847770"
  },
  {
    "text": "of what was written and what was read so that it can match it while coherency",
    "start": "2847770",
    "end": "2853740"
  },
  {
    "text": "protocols with all other cores and detect conflict but that capacity is limited all hospital CP",
    "start": "2853740",
    "end": "2860640"
  },
  {
    "text": "use currently it's 32 kilobytes and maybe slightly more than that but if you",
    "start": "2860640",
    "end": "2867990"
  },
  {
    "text": "know what you are doing you can fairly easily exhaust these buffers and cause",
    "start": "2867990",
    "end": "2874380"
  },
  {
    "text": "your nail of service by priming just bogus transactions and that would create",
    "start": "2874380",
    "end": "2879750"
  },
  {
    "text": "capacity upwards which you can also determine when an abort happens the",
    "start": "2879750",
    "end": "2885269"
  },
  {
    "text": "reason was it memory read write conflict or a capacity of water attacks on cash",
    "start": "2885269",
    "end": "2892920"
  },
  {
    "text": "an exhausting cash well known and they all apply to transactional buffers as",
    "start": "2892920",
    "end": "2904710"
  },
  {
    "text": "well they piggybacking on cash so if we",
    "start": "2904710",
    "end": "2909869"
  },
  {
    "text": "write a table which is comparing tight memory reading group page based",
    "start": "2909869",
    "end": "2918589"
  },
  {
    "text": "protection and transactional memory type of support and evaluate these memory",
    "start": "2918589",
    "end": "2926700"
  },
  {
    "text": "monitoring technologies on several different levels we can see that the",
    "start": "2926700",
    "end": "2933960"
  },
  {
    "text": "title loop runs in software while page tables and tsx actually have Hardware",
    "start": "2933960",
    "end": "2940349"
  },
  {
    "text": "support the granularity of tight loop is very good you can get down to one byte",
    "start": "2940349",
    "end": "2947940"
  },
  {
    "text": "or even check bits in it page tables are pretty bad with 4 kilobyte granularity",
    "start": "2947940",
    "end": "2954470"
  },
  {
    "text": "transactional support gives you 64 bytes which is sort of something in the middle and that is much better than 4 kilobyte",
    "start": "2954470",
    "end": "2962569"
  },
  {
    "text": "to run these the type memory loop can run anywhere hypervisor operating system",
    "start": "2962569",
    "end": "2970380"
  },
  {
    "text": "in user mode page based stuff can only be written in hypervisor or the",
    "start": "2970380",
    "end": "2976769"
  },
  {
    "text": "operating system and but transactional system can be used anywhere you can use",
    "start": "2976769",
    "end": "2983609"
  },
  {
    "text": "it from user mode and in fact it's a cpu capability here which would",
    "start": "2983609",
    "end": "2989809"
  },
  {
    "text": "work in real mode in 16-bit CPU mode it really doesn't care and that's a nice",
    "start": "2989809",
    "end": "2999740"
  },
  {
    "text": "feature because in user mode any software can perform self checking you",
    "start": "2999740",
    "end": "3005170"
  },
  {
    "text": "run to thread one checks another through transactional support if CPU is capable and that provides additional software",
    "start": "3005170",
    "end": "3011309"
  },
  {
    "text": "protection the speed of operating these",
    "start": "3011309",
    "end": "3016660"
  },
  {
    "text": "methods it's very slow in tight memory loop and even if you read the same pipe",
    "start": "3016660",
    "end": "3023880"
  },
  {
    "text": "constantly it still may not be quick enough if malware disables the checking",
    "start": "3023880",
    "end": "3031180"
  },
  {
    "text": "thread in page based exceptions you",
    "start": "3031180",
    "end": "3039460"
  },
  {
    "text": "still have to read the page analyse what",
    "start": "3039460",
    "end": "3044740"
  },
  {
    "text": "was inside modified so it's sort of medium type of speed because you have to do some software checks on top of",
    "start": "3044740",
    "end": "3051069"
  },
  {
    "text": "hardware supported page exceptions and with transactions it's sort of in the",
    "start": "3051069",
    "end": "3056740"
  },
  {
    "text": "middle but it's faster than the pages with transactional memory unfortunately",
    "start": "3056740",
    "end": "3064990"
  },
  {
    "text": "you cannot cover a lot of memory you may be able to extend it to several megabytes of memory but the more you",
    "start": "3064990",
    "end": "3073240"
  },
  {
    "text": "cover the more often you will see abort related to capacity because well more",
    "start": "3073240",
    "end": "3080170"
  },
  {
    "text": "writes would fall into that area so the buffers related to transactional",
    "start": "3080170",
    "end": "3087359"
  },
  {
    "text": "monitoring could be exceeded quicker and",
    "start": "3087359",
    "end": "3091920"
  },
  {
    "text": "probably the biggest problem with transactional support is that it's",
    "start": "3093660",
    "end": "3098950"
  },
  {
    "text": "short-lived you cannot just let it run and hope that in ten minutes it'll",
    "start": "3098950",
    "end": "3106210"
  },
  {
    "text": "create you a hardware abort on the memory that you're monitoring it's very",
    "start": "3106210",
    "end": "3112059"
  },
  {
    "text": "shortly it was designed this way",
    "start": "3112059",
    "end": "3115950"
  },
  {
    "text": "and as conclusions what showed you is a",
    "start": "3118130",
    "end": "3123349"
  },
  {
    "text": "bunch of methods that use transactional memory for things that it was never",
    "start": "3123349",
    "end": "3130759"
  },
  {
    "text": "designed to do so it's a new tool in your arsenal as security practitioners",
    "start": "3130759",
    "end": "3136640"
  },
  {
    "text": "and that would allow you to be from software self-protection modify",
    "start": "3136640",
    "end": "3145239"
  },
  {
    "text": "operating system sort of resilience like page guard for example and it's a fairly",
    "start": "3146319",
    "end": "3154549"
  },
  {
    "text": "unusual and normal security method because it was not designed for that and nobody before thought of using it for",
    "start": "3154549",
    "end": "3161329"
  },
  {
    "text": "security because it was not done for",
    "start": "3161329",
    "end": "3166369"
  },
  {
    "text": "security the whole technology is a bit quirky when you start using it you will",
    "start": "3166369",
    "end": "3172039"
  },
  {
    "text": "find that these operating system cost aborts noise type from interrupts and",
    "start": "3172039",
    "end": "3179569"
  },
  {
    "text": "context switches are actually fairly unpleasant if you want to monitor for a",
    "start": "3179569",
    "end": "3185599"
  },
  {
    "text": "long time but for software protection it's fine normally because if you have a threat to",
    "start": "3185599",
    "end": "3191180"
  },
  {
    "text": "protect you know its lifetime you could spawn another one and do the cells checking in between and that is a",
    "start": "3191180",
    "end": "3200809"
  },
  {
    "text": "result of our genetic engineering we have a fairly strange beast spider goat",
    "start": "3200809",
    "end": "3208069"
  },
  {
    "text": "which is based on hardware capability but it's helpful for security and",
    "start": "3208069",
    "end": "3214630"
  },
  {
    "text": "helpful for software protection the research on this stuff is ongoing and we",
    "start": "3214630",
    "end": "3222499"
  },
  {
    "text": "are experimenting with it a little bit more and if you find something interesting we would be very interested",
    "start": "3222499",
    "end": "3231109"
  },
  {
    "text": "in sharing it with the rest of the security community and that concludes",
    "start": "3231109",
    "end": "3236319"
  },
  {
    "text": "what I had to say so if you have any questions I'd be very happy to answer",
    "start": "3236319",
    "end": "3243039"
  },
  {
    "text": "this one question over there for the",
    "start": "3243039",
    "end": "3248539"
  },
  {
    "text": "memory protection for K you you get I'm saying that one has to check all the",
    "start": "3248539",
    "end": "3253690"
  },
  {
    "text": "4k all the 4k is that what you said well if you mark a page as read only and the",
    "start": "3253690",
    "end": "3266770"
  },
  {
    "text": "right is performed into that page then you have to analyze where exactly that",
    "start": "3266770",
    "end": "3273100"
  },
  {
    "text": "right was going and another way is to",
    "start": "3273100",
    "end": "3284190"
  },
  {
    "text": "let me rephrase your question so I don't see a problem with 4k I mean you get an",
    "start": "3288510",
    "end": "3294490"
  },
  {
    "text": "exception you know exactly where it the right happened just immediately you know and if you want to know what you simply",
    "start": "3294490",
    "end": "3301750"
  },
  {
    "text": "decode the instruction and you figure out what is being written and so on okay",
    "start": "3301750",
    "end": "3306790"
  },
  {
    "text": "I mean it's it's not expensive well the expensive bit comes from",
    "start": "3306790",
    "end": "3314190"
  },
  {
    "text": "reverting the change because if you want to put the data that was there before",
    "start": "3314190",
    "end": "3321340"
  },
  {
    "text": "you have to keep the whole four kilobyte page somewhere else yeah I don't do that",
    "start": "3321340",
    "end": "3328120"
  },
  {
    "text": "I get I put it read-only somebody wants to write if I want to allow the right I let it right if I don't want to allow it",
    "start": "3328120",
    "end": "3334900"
  },
  {
    "text": "to write I simply don't it won't even write because it's the read-only so I",
    "start": "3334900",
    "end": "3340420"
  },
  {
    "text": "don't have to save anything well the situation will be different if you allow",
    "start": "3340420",
    "end": "3346480"
  },
  {
    "text": "the right and then you analyze what happened after Brian if a lot of the rides and I won't have exception if it's",
    "start": "3346480",
    "end": "3353560"
  },
  {
    "text": "spatially read writes and I won't even have this guarded page anymore okay",
    "start": "3353560",
    "end": "3360730"
  },
  {
    "text": "let's dig deep into that after the talk and come over and let's talk about it",
    "start": "3360730",
    "end": "3366610"
  },
  {
    "text": "and about the 64 bit 64 byte what does",
    "start": "3366610",
    "end": "3372730"
  },
  {
    "text": "it mean exactly like once I read from a certain location that means it will be",
    "start": "3372730",
    "end": "3379450"
  },
  {
    "text": "round to 64 bytes and then this whole area around the 60",
    "start": "3379450",
    "end": "3385060"
  },
  {
    "text": "or by it would be protected or can I like say protect one piece here one one piece two megabytes further how does it",
    "start": "3385060",
    "end": "3393550"
  },
  {
    "text": "work well it works based on cache lines so 64 byte granularity any read of a",
    "start": "3393550",
    "end": "3400150"
  },
  {
    "text": "bite from a 64 byte area would mark the entire cache line as accessed and if you",
    "start": "3400150",
    "end": "3407440"
  },
  {
    "text": "are at the end of this 64 byte area and do a multipied right it will overflow",
    "start": "3407440",
    "end": "3414250"
  },
  {
    "text": "into the next one and mark 2 cache lines get it answer your question yeah and one",
    "start": "3414250",
    "end": "3421450"
  },
  {
    "text": "last question what prevents the attacker the first thing he does calling X end and then does whatever he wants to do he",
    "start": "3421450",
    "end": "3430240"
  },
  {
    "text": "will just kill your securities read immediately so if he wants to touch sensitive areas colex and do whatever",
    "start": "3430240",
    "end": "3439000"
  },
  {
    "text": "you want and well in principle the attacker can but to be able to issue X",
    "start": "3439000",
    "end": "3446950"
  },
  {
    "text": "and they first need to determine where the CPU is actually RTM capable so run",
    "start": "3446950",
    "end": "3452260"
  },
  {
    "text": "cpu 80 and if you have a supervisor running in hypervisor you can intercept",
    "start": "3452260",
    "end": "3460150"
  },
  {
    "text": "CPU AE and detect that the particular process is interested specifically in",
    "start": "3460150",
    "end": "3465430"
  },
  {
    "text": "our TM capabilities and treat it in some special way but yeah you're quite right",
    "start": "3465430",
    "end": "3472180"
  },
  {
    "text": "actually without X and it can also be from X test which checks whether the",
    "start": "3472180",
    "end": "3477640"
  },
  {
    "text": "transaction is in progress and then behave differently so in that regard",
    "start": "3477640",
    "end": "3482650"
  },
  {
    "text": "it's not really very different from where we are now in analyzing behavioral power yeah so in that case for software",
    "start": "3482650",
    "end": "3489010"
  },
  {
    "text": "protection it's not going to be useful at all simply check if the access is",
    "start": "3489010",
    "end": "3494500"
  },
  {
    "text": "available remember it somewhere you want to touch areas as a hacker just call X",
    "start": "3494500",
    "end": "3499600"
  },
  {
    "text": "and and and you're done with this so it kills completely the software protection vector it's not completely useless",
    "start": "3499600",
    "end": "3506710"
  },
  {
    "text": "because if you have a scenario for example when you suspect some piece of code to be shellcode but you're not sure",
    "start": "3506710",
    "end": "3513750"
  },
  {
    "text": "then you can mark some areas that you suspect these",
    "start": "3513750",
    "end": "3518880"
  },
  {
    "text": "piece of shellcode might be writing to and keep monitoring them if the right",
    "start": "3518880",
    "end": "3524369"
  },
  {
    "text": "does happen then you know that particular shellcode was actually real",
    "start": "3524369",
    "end": "3530519"
  },
  {
    "text": "shellcode and not just your false suspicion okay and last question so now",
    "start": "3530519",
    "end": "3537299"
  },
  {
    "text": "I have to have a thread that is continuously reading and reading and reading right so that also consumes power well",
    "start": "3537299",
    "end": "3545910"
  },
  {
    "text": "in the second flight that I showed when you make a security thread a transaction",
    "start": "3545910",
    "end": "3552660"
  },
  {
    "text": "like one of those two you don't have to keep reading you can read just twice and",
    "start": "3552660",
    "end": "3559829"
  },
  {
    "text": "then do something useful unfortunately in transaction mode you cannot do much of useful stuff because",
    "start": "3559829",
    "end": "3565650"
  },
  {
    "text": "practically any operating system API would abort on transaction because the",
    "start": "3565650",
    "end": "3570839"
  },
  {
    "text": "dope was this or that type of context switch eventually and unit CPU pause",
    "start": "3570839",
    "end": "3578400"
  },
  {
    "text": "command causes an abort so you are limited to what you can do inside the",
    "start": "3578400",
    "end": "3585900"
  },
  {
    "text": "transaction without actually aborting it but still some computations possible in",
    "start": "3585900",
    "end": "3592230"
  },
  {
    "text": "the case of when you do while want yeah",
    "start": "3592230",
    "end": "3597799"
  },
  {
    "text": "thank you",
    "start": "3599900",
    "end": "3602960"
  }
]