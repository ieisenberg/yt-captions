[
  {
    "start": "0",
    "end": "32000"
  },
  {
    "text": "[Music]",
    "start": "1130",
    "end": "14639"
  },
  {
    "text": "hello this is certified pre-owned abusing active directory certificate services my name is will schroeder i am",
    "start": "14639",
    "end": "21199"
  },
  {
    "text": "harmjoy on twitter i'm lee christensen tiffkin on twitter and we are both technical architects at spectreops",
    "start": "21199",
    "end": "30199"
  },
  {
    "text": "so what we're going to cover today it's all about active directory certificate services there's a lot of",
    "start": "30480",
    "end": "35520"
  },
  {
    "start": "32000",
    "end": "82000"
  },
  {
    "text": "information here that we're going to try to condense as best we can so we're going to hit some necessary background on what active directory",
    "start": "35520",
    "end": "41840"
  },
  {
    "text": "certificate services is templates how these things interact some interesting settings for that",
    "start": "41840",
    "end": "47600"
  },
  {
    "text": "some account persistence from the user and machine context so ways to steal people's credentials as well as ways to",
    "start": "47600",
    "end": "54399"
  },
  {
    "text": "persist on systems for long periods of time kind of some cool l sas less",
    "start": "54399",
    "end": "60079"
  },
  {
    "text": "credential theft then we're going to cover domain escalation so eight different misconfiguration scenarios",
    "start": "60079",
    "end": "65439"
  },
  {
    "text": "that can result in domain unelevated users elevating in a domain to domain",
    "start": "65439",
    "end": "71280"
  },
  {
    "text": "administrator or equivalent rights then we're going to finish off with some persistence with golden certificates so",
    "start": "71280",
    "end": "78240"
  },
  {
    "text": "forging certificates that can't be revoked so active directory certificate services",
    "start": "78240",
    "end": "86400"
  },
  {
    "start": "82000",
    "end": "142000"
  },
  {
    "text": "adcs is a server role that functions as microsoft's public key infrastructure",
    "start": "86400",
    "end": "91439"
  },
  {
    "text": "implementation so pki why would someone do this internally well it's used by organizations for things like smart",
    "start": "91439",
    "end": "97119"
  },
  {
    "text": "cards for internal ssl certificates code signing a large number of different things",
    "start": "97119",
    "end": "102240"
  },
  {
    "text": "there's also different tie-ins with like azure and things like that as well a ca",
    "start": "102240",
    "end": "107680"
  },
  {
    "text": "doesn't have to be a server separate from a dc it can be but it doesn't have to be and this is a really complex and not",
    "start": "107680",
    "end": "114640"
  },
  {
    "text": "properly understood system so we started diving in about five months ago and this",
    "start": "114640",
    "end": "120479"
  },
  {
    "text": "you know the results of all that research is this presentation so at a high level clients will send",
    "start": "120479",
    "end": "126159"
  },
  {
    "text": "what's known as a certificate signing request a csr to an enterprise certificate authority a ca which signs",
    "start": "126159",
    "end": "132560"
  },
  {
    "text": "the issued certificates using the private key associated with the ca cert",
    "start": "132560",
    "end": "137840"
  },
  {
    "text": "we'll walk through this graphically as well so an enterprise certificate authority",
    "start": "137840",
    "end": "145200"
  },
  {
    "start": "142000",
    "end": "192000"
  },
  {
    "text": "generates a self-signed certificate that's then included into the nt off certificates object in the domain",
    "start": "145200",
    "end": "152160"
  },
  {
    "text": "this is what's displayed here through a tool called certify which we'll cover as we're releasing this with the presentation as well",
    "start": "152160",
    "end": "158160"
  },
  {
    "text": "so these are certificates that enable authentication for active directory essentially and it doesn't have to just",
    "start": "158160",
    "end": "164160"
  },
  {
    "text": "be the root ca we see here the dcca there at the bottom that is the root ca",
    "start": "164160",
    "end": "169680"
  },
  {
    "text": "at the top the caca that is a subordinate certificate authority so both of these",
    "start": "169680",
    "end": "175680"
  },
  {
    "text": "the private key associated with these certificates can be used to sign certificates that can then allow",
    "start": "175680",
    "end": "182239"
  },
  {
    "text": "authentication the domain so this object this nt auth certificates abbreviated to nt auth often is the root of domain",
    "start": "182239",
    "end": "189120"
  },
  {
    "text": "based certificate authentication so certificate enrollment so",
    "start": "189120",
    "end": "196480"
  },
  {
    "start": "192000",
    "end": "301000"
  },
  {
    "text": "how do you actually go about obtaining a certificate with adcs well underneath the very first thing",
    "start": "196480",
    "end": "203120"
  },
  {
    "text": "that a client needs to do is generate their own public slash private key pair",
    "start": "203120",
    "end": "208319"
  },
  {
    "text": "and then once they have that they will generate a csr or a certificate signing",
    "start": "208319",
    "end": "213519"
  },
  {
    "text": "request and what this is is it's basically just like a message and inside that message it contains some",
    "start": "213519",
    "end": "219280"
  },
  {
    "text": "information about the certificate that they want to request so this includes like what it's",
    "start": "219280",
    "end": "224480"
  },
  {
    "text": "used for so for example like code signing or tls or whatever it includes info about the subject of",
    "start": "224480",
    "end": "231920"
  },
  {
    "text": "the or whoever is requesting the certificate and also it contains a field",
    "start": "231920",
    "end": "237360"
  },
  {
    "text": "containing uh the template and we'll talk a little bit about what that is in a sec so this message gets sent sent to",
    "start": "237360",
    "end": "244319"
  },
  {
    "text": "the ca the ca looks at the certificate the csr the certificate signing request",
    "start": "244319",
    "end": "249840"
  },
  {
    "text": "and it looks at that template that's specified the template is basically a blueprint of",
    "start": "249840",
    "end": "256000"
  },
  {
    "text": "settings that the certificate is going to have once it's",
    "start": "256000",
    "end": "261359"
  },
  {
    "text": "issued and assuming that what the ca is going to do is it's going to take a look at the csr it's going to compare it to",
    "start": "261359",
    "end": "268160"
  },
  {
    "text": "what's in the template assuming everything is allowed so is this user actually allowed to",
    "start": "268160",
    "end": "274560"
  },
  {
    "text": "obtain a certificate for what they're asking the search the ca will then sign a",
    "start": "274560",
    "end": "280320"
  },
  {
    "text": "certificate using its private key and then return it back to the client and so",
    "start": "280320",
    "end": "286880"
  },
  {
    "text": "then the client's going to take that certificate it has and it could put in the windows certificate store that's where most",
    "start": "286880",
    "end": "293280"
  },
  {
    "text": "certificates will be found but you know at that point the client can do whatever it would like with the",
    "start": "293280",
    "end": "298479"
  },
  {
    "text": "certificate so a little bit more about certificate",
    "start": "298479",
    "end": "304479"
  },
  {
    "start": "301000",
    "end": "378000"
  },
  {
    "text": "templates uh so certificate templates are ad objects and",
    "start": "304479",
    "end": "309600"
  },
  {
    "text": "what they do is they're blueprints of settings uh that for a certificate so there's a",
    "start": "309600",
    "end": "316400"
  },
  {
    "text": "bunch of different settings that certificates can have such as like the lifetime uh what it's used for uh who's",
    "start": "316400",
    "end": "322880"
  },
  {
    "text": "actually allowed to request those certificates so there's a bunch of different kinds of settings",
    "start": "322880",
    "end": "328080"
  },
  {
    "text": "here on the right are is one specific setting that you want to be aware of which is called application",
    "start": "328080",
    "end": "334240"
  },
  {
    "text": "policies otherwise known as enhanced key usages but this basically is defining what",
    "start": "334240",
    "end": "341199"
  },
  {
    "text": "the certificate can be used for so here you can see a few different eku's so",
    "start": "341199",
    "end": "346400"
  },
  {
    "text": "they enhance key usages down at the bottom there's one for client authentication one for code",
    "start": "346400",
    "end": "351840"
  },
  {
    "text": "signing one for smart card logon so this is what the cert can actually be used for underneath",
    "start": "351840",
    "end": "358000"
  },
  {
    "text": "and something important there is like this is certain eku's permit domain",
    "start": "358000",
    "end": "363919"
  },
  {
    "text": "authentication so here you can see client authentication and smart card log on either one of those eku's if present",
    "start": "363919",
    "end": "370720"
  },
  {
    "text": "in a certificate means that that certificate can then be used to authenticate to active directory",
    "start": "370720",
    "end": "378560"
  },
  {
    "start": "378000",
    "end": "479000"
  },
  {
    "text": "so when that authentication takes place something that's useful to to know about is",
    "start": "379120",
    "end": "385280"
  },
  {
    "text": "subject alternative names so when you're off when you off with a certificate to ad",
    "start": "385280",
    "end": "393440"
  },
  {
    "text": "basically what a san a subject alternative name allows uh assert to do",
    "start": "393440",
    "end": "398479"
  },
  {
    "text": "is it bind a different identity to it and so this is a generic sounds are",
    "start": "398479",
    "end": "403919"
  },
  {
    "text": "generically a a different way that you can bind multiple identities to one cert this is commonly used in things like tls",
    "start": "403919",
    "end": "410479"
  },
  {
    "text": "certificates where you may have a single web server that's serving content for several different domains so you'll have",
    "start": "410479",
    "end": "417360"
  },
  {
    "text": "one cert but in the san there's going to be a an entry for each one of those domains but in the case of domain",
    "start": "417360",
    "end": "423680"
  },
  {
    "text": "authentication the san is used to specify the who you are going to log on as with the",
    "start": "423680",
    "end": "430560"
  },
  {
    "text": "certificate or who the certificate is valid for so that can become dangerous yes that can be very dangerous um",
    "start": "430560",
    "end": "437680"
  },
  {
    "text": "because if i an attacker can manipulate that field or specify that",
    "start": "437680",
    "end": "442880"
  },
  {
    "text": "field then you know i potentially could specify you know i want to be a da or something so we'll talk a little bit",
    "start": "442880",
    "end": "448800"
  },
  {
    "text": "more about that later but ultimately the important thing here is whatever's in the sand",
    "start": "448800",
    "end": "454720"
  },
  {
    "text": "uh ultimately ends up getting mapped to a user account in ad during authentication",
    "start": "454720",
    "end": "460560"
  },
  {
    "text": "that's kind of what you're seeing here is you can see a subject down in the bottom left harmjoy but in the subject alternative",
    "start": "460560",
    "end": "466560"
  },
  {
    "text": "name there is a separate user called administrator and so ultimately ad is going to log on as",
    "start": "466560",
    "end": "473280"
  },
  {
    "text": "the administrator user when authentication occurs",
    "start": "473280",
    "end": "479639"
  },
  {
    "start": "479000",
    "end": "622000"
  },
  {
    "text": "um when we've when before doing this research uh",
    "start": "481199",
    "end": "486400"
  },
  {
    "text": "my understanding of certificates was a in regard to active directory is they were mostly dealt with",
    "start": "486400",
    "end": "492800"
  },
  {
    "text": "smart cards this is not true certificates are used all over the place",
    "start": "492800",
    "end": "499120"
  },
  {
    "text": "and particularly in the context of domain authentication you do not need a smart card in order to",
    "start": "499120",
    "end": "505759"
  },
  {
    "text": "authenticate to aed with a certificate in particular so rubius and kikio have",
    "start": "505759",
    "end": "511520"
  },
  {
    "text": "implementations to authenticate to aed using assert um rubius",
    "start": "511520",
    "end": "517919"
  },
  {
    "text": "obtained this capability what was it like it was last year from c-cob or ethical chaos on twitter did an awesome",
    "start": "517919",
    "end": "524240"
  },
  {
    "text": "awesome pull request to rubios to allow pk init usage so the ability to authenticate to active directory and get",
    "start": "524240",
    "end": "530480"
  },
  {
    "text": "a ticket granting ticket using a certificate so this was the missing piece for us",
    "start": "530480",
    "end": "535920"
  },
  {
    "text": "this is we didn't know it at the time but this really kind of enabled a lot of the offensive applications that we're",
    "start": "535920",
    "end": "541680"
  },
  {
    "text": "going to talk about because if it wasn't for this we would have to try to use a virtual smart card to do some stuff on",
    "start": "541680",
    "end": "547120"
  },
  {
    "text": "hosts or pivot things in which some people have done some research in the past on it just gets much more difficult",
    "start": "547120",
    "end": "552640"
  },
  {
    "text": "being able to use this a c-sharp compact tool kit over like a command and control channel with the",
    "start": "552640",
    "end": "558640"
  },
  {
    "text": "ability to do this really flexible pcan at authentication with certificates is",
    "start": "558640",
    "end": "563760"
  },
  {
    "text": "awesome and it can become really really powerful which we'll show yeah and so that's what you're seeing down at the bottom this is rubius this kerberos",
    "start": "563760",
    "end": "571600"
  },
  {
    "text": "attack tool it's authenticating to active directory using a certificate file so in this case",
    "start": "571600",
    "end": "576959"
  },
  {
    "text": "the certificate is that dot pfx file and here you can see we're requesting a",
    "start": "576959",
    "end": "582560"
  },
  {
    "text": "kerberos tgt with rubius and down at the bottom it's outputting it so this rubius is will authenticate",
    "start": "582560",
    "end": "590399"
  },
  {
    "text": "using kerberos in addition to kerberos you can also authenticate with a certificate using s-channel which is the",
    "start": "590399",
    "end": "597120"
  },
  {
    "text": "secure the the ssp that backs like tls and so uh the most commonly enabled uh",
    "start": "597120",
    "end": "605839"
  },
  {
    "text": "protocol that supports um that supports tls client authentication",
    "start": "605839",
    "end": "611680"
  },
  {
    "text": "i'd say is ldap s and so for example you can authenticate to active directory",
    "start": "611680",
    "end": "618399"
  },
  {
    "text": "over the ldap protocol using a certificate so",
    "start": "618399",
    "end": "623839"
  },
  {
    "text": "that's all the background now we're all experts in adcs that was five months of understanding trying to cram into ten",
    "start": "623839",
    "end": "629120"
  },
  {
    "text": "minutes now we're going to get into some of the attacks we are just focusing on offense here in this presentation we'll",
    "start": "629120",
    "end": "634959"
  },
  {
    "text": "talk about some more material at the end from the defensive standpoint or where you can find it but the first thing we're going to talk about is account",
    "start": "634959",
    "end": "640800"
  },
  {
    "text": "persistence so long-term credential theft without touching lsas for both users and computers",
    "start": "640800",
    "end": "649440"
  },
  {
    "start": "649000",
    "end": "746000"
  },
  {
    "text": "so we kind of split this into passive and active theft and then user and computer theft and there's different",
    "start": "649839",
    "end": "655440"
  },
  {
    "text": "applications for each so for passive certificate thefts the way we view this is if there is an adcs",
    "start": "655440",
    "end": "662959"
  },
  {
    "text": "environment already installed and hooked up to active directory it's often used there's a reason that it was put there",
    "start": "662959",
    "end": "669360"
  },
  {
    "text": "so very very often we see that users or machines will have client authentication certificates or some",
    "start": "669360",
    "end": "675279"
  },
  {
    "text": "other types of certificates on a host so if these certificates they have they have a",
    "start": "675279",
    "end": "681120"
  },
  {
    "text": "private key associated with them if the private key is not protected by hardware",
    "start": "681120",
    "end": "686880"
  },
  {
    "text": "so if it is not protected specifically by like a tpm hsm in some cases or smart card it's",
    "start": "686880",
    "end": "692720"
  },
  {
    "text": "more common if it's not protected by hardware then it's protected using dp api the data protection application api",
    "start": "692720",
    "end": "700320"
  },
  {
    "text": "so it's stored on the host in a way that you can recover it if you're executing code in that user or machine's context",
    "start": "700320",
    "end": "706640"
  },
  {
    "text": "so maybe cats and sharp d ppi can steal these certificates and private keys there's also like was it cert stealer",
    "start": "706640",
    "end": "712880"
  },
  {
    "text": "from the wover that came out recently this is a screenshot of using sharp deep api to recover the private key for a",
    "start": "712880",
    "end": "719440"
  },
  {
    "text": "user context i'm not going to get into all the different ways you can abuse stuff with dp api there's lots of documentation",
    "start": "719440",
    "end": "725440"
  },
  {
    "text": "on sharp dp api and the readme as well as with the memocat stuff but just showing that if the cert is already on",
    "start": "725440",
    "end": "731120"
  },
  {
    "text": "the host there are ways that you can steal it and then reuse it for say auth an advantage to this too is it can d it",
    "start": "731120",
    "end": "737120"
  },
  {
    "text": "can also export um exportable certificates so certificates",
    "start": "737120",
    "end": "743279"
  },
  {
    "text": "can be marked as non-exportable and this will allow you to get those certificates as well now the more interesting thing to us is",
    "start": "743279",
    "end": "749279"
  },
  {
    "start": "746000",
    "end": "823000"
  },
  {
    "text": "active certificate theft so users or machines can enroll in any template that they have enroll permissions for again",
    "start": "749279",
    "end": "756240"
  },
  {
    "text": "we're glossing over a chunk of stuff here but suffice to say there's a couple of default templates specifically the",
    "start": "756240",
    "end": "761920"
  },
  {
    "text": "user and machine templates that allow domain users and domain computers to enroll you know prospectively and these",
    "start": "761920",
    "end": "769120"
  },
  {
    "text": "templates allow for domain authentication they have the client authentication eku in them so if i'm in a user's context i can just",
    "start": "769120",
    "end": "776320"
  },
  {
    "text": "actively enroll in this template and get assert for it because we want that template that has 80 auth because",
    "start": "776320",
    "end": "782800"
  },
  {
    "text": "to abuse it for a user we can use like rubius to get a user's tgt and also get their ntlm their plaintext and tlm we'll",
    "start": "782800",
    "end": "790000"
  },
  {
    "text": "talk about that in a few slides but from a computer context it lets us compromise the computer through a",
    "start": "790000",
    "end": "796000"
  },
  {
    "text": "resource base concerning delegation or just s for u2 self which which basically means that we now",
    "start": "796000",
    "end": "802079"
  },
  {
    "text": "have persistent access to this computer we can off as that computer account yeah with us as a certificate with a",
    "start": "802079",
    "end": "807839"
  },
  {
    "text": "certificate so we can enroll in these through either dcom using a a tool called certify which we'll talk about",
    "start": "807839",
    "end": "814000"
  },
  {
    "text": "that we're releasing with this talk through rpc as well as the adcs web enrollment",
    "start": "814000",
    "end": "819360"
  },
  {
    "text": "endpoints which we're going to talk about in a few slides in one of the next sections so this is what certify looks like",
    "start": "819360",
    "end": "825760"
  },
  {
    "start": "823000",
    "end": "867000"
  },
  {
    "text": "there's a lot of abuses for a lot of things that certifie can use to find and abuse these misconfigurations it's a",
    "start": "825760",
    "end": "832320"
  },
  {
    "text": "it's a c-sharp toolkit that again we're releasing with this talk um here in this case we're requesting a",
    "start": "832320",
    "end": "837839"
  },
  {
    "text": "certificate for the user template using our current context and we're specifying the certificate authority",
    "start": "837839",
    "end": "843519"
  },
  {
    "text": "so after this we now have a pem blob that we can transpose or transform to a",
    "start": "843519",
    "end": "849920"
  },
  {
    "text": "pfx that can then be used with rubius so running this in a non-elevated user context lets us steal",
    "start": "849920",
    "end": "857199"
  },
  {
    "text": "this user's credentials essentially or you know it lets us authenticate as that user for a long period of time and we'll",
    "start": "857199",
    "end": "862720"
  },
  {
    "text": "talk about timelines here in a second so we think this is pretty cool from an offensive tradecraft standpoint because",
    "start": "862720",
    "end": "868639"
  },
  {
    "start": "867000",
    "end": "1011000"
  },
  {
    "text": "some of the advantages are it doesn't touch lsas so everyone's worried about like different ways to like mini dump or",
    "start": "868639",
    "end": "874880"
  },
  {
    "text": "rip memory out of ls because people want credentials in order to reauthenticate to somebody if we're talking about the",
    "start": "874880",
    "end": "881440"
  },
  {
    "text": "end goal of being able to authenticate as that person on that machine in the domain this gives us an alternative that",
    "start": "881440",
    "end": "886880"
  },
  {
    "text": "doesn't touch elsas at all and it doesn't even need elevation for user contacts we do have to be elevated",
    "start": "886880",
    "end": "892880"
  },
  {
    "text": "for a machine context because you can imagine if you could just request a machine cert non-elevated that would be an instant you know proves and that",
    "start": "892880",
    "end": "899760"
  },
  {
    "text": "would you know have to be patched so you do have to be elevated to request a computer cert but again you don't have",
    "start": "899760",
    "end": "905360"
  },
  {
    "text": "to touch lsas and that's an alternative machine persistence method",
    "start": "905360",
    "end": "910480"
  },
  {
    "text": "there's also very few detection methods because this is a new technique we think",
    "start": "910480",
    "end": "915680"
  },
  {
    "text": "there's some stuff kind of written about it a little bit but you know we're hoping to popularize it to a degree and get more defenses in place we talk about",
    "start": "915680",
    "end": "922320"
  },
  {
    "text": "a large chunk of detection and prevention methods in a white paper um that we'll talk about the end of the talk",
    "start": "922320",
    "end": "928560"
  },
  {
    "text": "so it's lee is a fan of saying like everything is stealthy until somebody is looking for it so right now nobody's looking for",
    "start": "928560",
    "end": "934639"
  },
  {
    "text": "this so it's probably going to get by uh things much better especially versus like ripping stuff out of lsas but you",
    "start": "934639",
    "end": "940800"
  },
  {
    "text": "know it's definitely detectable and people write if they you collect the correct telemetry and actually write",
    "start": "940800",
    "end": "947120"
  },
  {
    "text": "detections for it but also it's separate credential material from passwords it works even if",
    "start": "947120",
    "end": "952160"
  },
  {
    "text": "account changes his password because the search still valid and has a long lifetime so by default the user and",
    "start": "952160",
    "end": "958160"
  },
  {
    "text": "machine templates issue certificates valid for one year but this can actually be",
    "start": "958160",
    "end": "963920"
  },
  {
    "text": "you know increased like we've seen certificates for three or four years or five years so if someone had actively",
    "start": "963920",
    "end": "969680"
  },
  {
    "text": "maliciously enrolled for a user or system and one of those templates they could come back years later and still",
    "start": "969680",
    "end": "975040"
  },
  {
    "text": "authenticate and this is crucial for incident responders to understand twos because i've seen",
    "start": "975040",
    "end": "980800"
  },
  {
    "text": "certificate tradecraft or certificate adcs processes absent",
    "start": "980800",
    "end": "986240"
  },
  {
    "text": "from most incident response like playbooks and so if an account gets compromised or a computer gets",
    "start": "986240",
    "end": "991360"
  },
  {
    "text": "compromised for you know five minutes an attacker could obtain certificates that could maybe work for up to a year even",
    "start": "991360",
    "end": "998880"
  },
  {
    "text": "across you know machine wipes or if the account's password is reset so",
    "start": "998880",
    "end": "1004240"
  },
  {
    "text": "uh this is very awesome from an attacker perspective all right now domain escalation",
    "start": "1004240",
    "end": "1012000"
  },
  {
    "start": "1011000",
    "end": "1115000"
  },
  {
    "text": "so we talked a little bit about templates uh remember templates are those blueprints of settings uh that define",
    "start": "1012000",
    "end": "1019040"
  },
  {
    "text": "you know when you uh like characteristics of the certificates and when you there's a set of",
    "start": "1019040",
    "end": "1026480"
  },
  {
    "text": "settings uh on these templates that may enable uh privilege escalation in a",
    "start": "1026480",
    "end": "1032720"
  },
  {
    "text": "domain but some general requirements in order to abuse these are first you know",
    "start": "1032720",
    "end": "1039038"
  },
  {
    "text": "a low privileged user has to be able to request a certificate so a low privileged user has to be able",
    "start": "1039039",
    "end": "1045600"
  },
  {
    "text": "has to have enrollment rights in order to obtain a certificate uh or request a certificate in the first place",
    "start": "1045600",
    "end": "1053360"
  },
  {
    "text": "how this is defined is in order to enroll in a certificate template the template needs to grant the user access",
    "start": "1053360",
    "end": "1060160"
  },
  {
    "text": "and that act that access is defined on the certificate template",
    "start": "1060160",
    "end": "1065760"
  },
  {
    "text": "object and so there's a security descriptor on that object that grants enrollment rights",
    "start": "1065760",
    "end": "1072559"
  },
  {
    "text": "in addition another setting on certificate templates is a setting called manager approval and this is a",
    "start": "1072720",
    "end": "1079679"
  },
  {
    "text": "setting it's a protection that can be enabled that basically says you know i can request a certificate but before the",
    "start": "1079679",
    "end": "1086080"
  },
  {
    "text": "ca is going to issue it to me uh a another person needs to come in and review it and then approve it and so we",
    "start": "1086080",
    "end": "1094480"
  },
  {
    "text": "in order for instant domain escalation to occur we do not want that to be enabled um in addition there's another",
    "start": "1094480",
    "end": "1102559"
  },
  {
    "text": "thing that we don't really have a lot of time to go into but it has to do with enrollment agents and um",
    "start": "1102559",
    "end": "1108480"
  },
  {
    "text": "and it's called authorized signatures and basically it's another protection yeah another protection",
    "start": "1108480",
    "end": "1115520"
  },
  {
    "start": "1115000",
    "end": "1202000"
  },
  {
    "text": "so uh the i'd say the most widely known or the",
    "start": "1116240",
    "end": "1122080"
  },
  {
    "text": "misconfiguration that we've seen most most widely is uh one where an attacker can specify an",
    "start": "1122080",
    "end": "1129600"
  },
  {
    "text": "arbitrary sam in the certificate so remember the sand specifies who",
    "start": "1129600",
    "end": "1134720"
  },
  {
    "text": "the certificate is 4 in active directory so when you log on it's ad will look at the",
    "start": "1134720",
    "end": "1140480"
  },
  {
    "text": "san so if i an attacker can specify the sam i can become basically anybody",
    "start": "1140480",
    "end": "1146880"
  },
  {
    "text": "the certificate also needs to enable domain authentication so it needs an eku",
    "start": "1146880",
    "end": "1152320"
  },
  {
    "text": "for a client authentication smart card authentication sub ca any purpose any of those",
    "start": "1152320",
    "end": "1159600"
  },
  {
    "text": "in addition uh the when you request that then the ca needs to actually sign and",
    "start": "1159600",
    "end": "1166000"
  },
  {
    "text": "issue a certificate back processing the attacker's supplied san so there's certain settings that need to",
    "start": "1166000",
    "end": "1171760"
  },
  {
    "text": "be enabled in order for the ca to process the user-supplied sam",
    "start": "1171760",
    "end": "1179600"
  },
  {
    "text": "and if all those conditions are met then an attacker can be can become any account in the domain and",
    "start": "1179600",
    "end": "1187200"
  },
  {
    "text": "so that's what you're kind of seeing right there is you know the attacker is that low privileged user but the",
    "start": "1187200",
    "end": "1192640"
  },
  {
    "text": "attacker could specify an alternate subject alternative name and in this case it's the it administrator down",
    "start": "1192640",
    "end": "1198640"
  },
  {
    "text": "there at the bottom and we'll show a demo of that here in a second so there's eight escalation scenarios",
    "start": "1198640",
    "end": "1204240"
  },
  {
    "start": "1202000",
    "end": "1273000"
  },
  {
    "text": "we've covered we're not going to go into depth on all of them we're going to hit one of the more interesting ones in depth here in a second but the first one",
    "start": "1204240",
    "end": "1211280"
  },
  {
    "text": "we actually broke these out we numbered them we numbered all the attacks because there were so many of them from a tradecraft standpoint and we actually",
    "start": "1211280",
    "end": "1217280"
  },
  {
    "text": "linked these to all the prevention and detection stuff but the first one that we're going to demo you have to have those general requirements an eku that",
    "start": "1217280",
    "end": "1223919"
  },
  {
    "text": "allows authentication like lee mentioned and the specific flag called enrollee supply subject this allows you to",
    "start": "1223919",
    "end": "1229520"
  },
  {
    "text": "specify an alternative san or a subject alternative name we'll demo that one here in a second",
    "start": "1229520",
    "end": "1234799"
  },
  {
    "text": "escalation 2 general requirements then the any purpose or no eku for sub ca while this doesn't allow immediate",
    "start": "1234799",
    "end": "1241280"
  },
  {
    "text": "domain compromise as far as we know you can create new certificates with any eku and arbitrary certificate values so this",
    "start": "1241280",
    "end": "1248080"
  },
  {
    "text": "can potentially have implications for things like saml adfs ipsec things like that",
    "start": "1248080",
    "end": "1253360"
  },
  {
    "text": "this is an open area of research that we're continuing to look into escalation 3 this one's definitely more",
    "start": "1253360",
    "end": "1258640"
  },
  {
    "text": "complicated but uh you need the general requirements and no enrollment agent restrictions and you have to have the",
    "start": "1258640",
    "end": "1263919"
  },
  {
    "text": "certificate request agent eku and basically this means that you can use this cert to request",
    "start": "1263919",
    "end": "1269200"
  },
  {
    "text": "another cert on behalf of somebody else so there's things called these specific rights that need to apply to the",
    "start": "1269200",
    "end": "1275200"
  },
  {
    "start": "1273000",
    "end": "1357000"
  },
  {
    "text": "secondary template this is really complicated we break all this out in the white paper um and blog post to a",
    "start": "1275200",
    "end": "1280320"
  },
  {
    "text": "certain degree but these these situations are abusable even if they sound complex so the first demo we're gonna show",
    "start": "1280320",
    "end": "1286880"
  },
  {
    "text": "certify finding vulnerable certificate templates which is fine vulnerable",
    "start": "1286880",
    "end": "1292320"
  },
  {
    "text": "we see okay we have the enrollee supply subject there's no issuance requirements those protections we can authenticate to",
    "start": "1292320",
    "end": "1297600"
  },
  {
    "text": "active directory with client auth and any user can enroll in the enrollment rights so we're going to enroll in this",
    "start": "1297600",
    "end": "1303600"
  },
  {
    "text": "template and supply an alternative name of administrator even though we're running as low priv",
    "start": "1303600",
    "end": "1309120"
  },
  {
    "text": "it's going to go through it's going to issue the cert to us we're going to get this pen blob with that alt name that we requested",
    "start": "1309120",
    "end": "1316400"
  },
  {
    "text": "so we're going to take this private key and certificate and transform it to a pfx which is the format needed by rubius",
    "start": "1316400",
    "end": "1323039"
  },
  {
    "text": "we can do this with openssl we do password protect the resulting cert because we don't just want to leave",
    "start": "1323039",
    "end": "1328559"
  },
  {
    "text": "it around for anyone to use here we're using the super secure password password i'm showing here that i cannot access",
    "start": "1328559",
    "end": "1335440"
  },
  {
    "text": "the domain controller's file system i'm going to use the cert that can off as administrator to get a tgt",
    "start": "1335440",
    "end": "1341440"
  },
  {
    "text": "i'm going to ptt it to apply it to my current session it's imported pknit let me authenticate as administrator who is",
    "start": "1341440",
    "end": "1347840"
  },
  {
    "text": "a da and then i can access the file system great so that's a common scenario that",
    "start": "1347840",
    "end": "1354400"
  },
  {
    "text": "we have seen in the real world yes we've exploited this on several occasions now so a few more of the escalation",
    "start": "1354400",
    "end": "1360320"
  },
  {
    "text": "scenarios isolation four is vulnerable certificate template access control so if you have edit rights over a template",
    "start": "1360320",
    "end": "1366320"
  },
  {
    "text": "you can edit those vulnerable settings and basically fixate some of the additional you know escalation one through three",
    "start": "1366320",
    "end": "1372480"
  },
  {
    "text": "discussion five vulnerable pki object access control so like other objects in active directory that affect pki the",
    "start": "1372480",
    "end": "1378400"
  },
  {
    "text": "different containers and like all the different little weird inner work things like stuff like that nt certificates object if you can edit that then you",
    "start": "1378400",
    "end": "1385120"
  },
  {
    "text": "know you can add whatever cert you want yeah you can add a rogue search advocate escalation 6 is interesting there's a",
    "start": "1385120",
    "end": "1390799"
  },
  {
    "text": "flag that can be set in a ca called edit if attribute subject alternative name this allows certificate sign-in requests",
    "start": "1390799",
    "end": "1397120"
  },
  {
    "text": "for any template to specify a subject alternative name so if this flag is set on a ca then any template that allows",
    "start": "1397120",
    "end": "1404240"
  },
  {
    "text": "domain authentication that doesn't have manager approval or issuance requirements you can abuse and this is a",
    "start": "1404240",
    "end": "1410400"
  },
  {
    "text": "registry setting that we've seen a lot of vendor documentation recommend enabling it in order for the product to",
    "start": "1410400",
    "end": "1416400"
  },
  {
    "text": "work it's like an it just works type thing yeah but it's extremely and microsoft says this is dangerous this isn't like brand new information yeah",
    "start": "1416400",
    "end": "1423919"
  },
  {
    "text": "um and seven is vulnerable ca access control so the certificate authority itself has access control um",
    "start": "1423919",
    "end": "1429760"
  },
  {
    "text": "specifically the managed ca permission can be used to like fixate or like you know flip that",
    "start": "1429760",
    "end": "1435120"
  },
  {
    "text": "registry bit for escalation six now the really interesting one yeah so uh escalation eight is ntlm",
    "start": "1435120",
    "end": "1442880"
  },
  {
    "start": "1437000",
    "end": "1578000"
  },
  {
    "text": "relay to the hd the adcs http enrollment endpoints so",
    "start": "1442880",
    "end": "1449120"
  },
  {
    "text": "when you install active directory certificate services there are some optional roles that you can enable that",
    "start": "1449120",
    "end": "1454400"
  },
  {
    "text": "allow you to request a certificate using web-based technologies so by default the only one the only protocols",
    "start": "1454400",
    "end": "1461600"
  },
  {
    "text": "that are supported are dcom and rpc but you can add these extra server roles and you can use http in order to request",
    "start": "1461600",
    "end": "1469279"
  },
  {
    "text": "certificates uh the interesting thing here is all of those http endpoints are vulnerable to",
    "start": "1469279",
    "end": "1475279"
  },
  {
    "text": "ntlm relay so that means you know for us as attackers that's great because we can",
    "start": "1475279",
    "end": "1480559"
  },
  {
    "text": "impersonate people while uh accessing them the implication here is that if there is",
    "start": "1480559",
    "end": "1486799"
  },
  {
    "text": "a user enrollable uh template in adcs so basically if i can",
    "start": "1486799",
    "end": "1494480"
  },
  {
    "text": "there's a template that allows me to enroll and obtain a you know a certificate that allows for for domain",
    "start": "1494480",
    "end": "1501360"
  },
  {
    "text": "authentication then i can you know obtain a certificate as the victim user and it extends my",
    "start": "1501360",
    "end": "1509200"
  },
  {
    "text": "ntlm relay window so one of the problems or one of the i'd say restrictions with",
    "start": "1509200",
    "end": "1514720"
  },
  {
    "text": "ntlm relay is they're somewhat short-lived and so this allows me to kind of expand the window of",
    "start": "1514720",
    "end": "1520960"
  },
  {
    "text": "impersonation so i can immediately relay that to adcs obtain a certificate as the",
    "start": "1520960",
    "end": "1527039"
  },
  {
    "text": "victim user and now i can log on as that user for you know up to a year using that certificate so that's one",
    "start": "1527039",
    "end": "1533679"
  },
  {
    "text": "really cool like awesome benefit of abusing this an additional one is",
    "start": "1533679",
    "end": "1540080"
  },
  {
    "text": "we can combine this with the printer bug to impersonate any computer in the",
    "start": "1540080",
    "end": "1546400"
  },
  {
    "text": "network that has spooler enabled so what is the printer bug the printer bug is a a",
    "start": "1546400",
    "end": "1551840"
  },
  {
    "text": "little feature i found a few years back and what it does is it allows me to",
    "start": "1551840",
    "end": "1557520"
  },
  {
    "text": "cause any machine to authenticate to me if spooler is running on that machine so i",
    "start": "1557520",
    "end": "1563440"
  },
  {
    "text": "can basically say hey you know hey server over there please authenticate to me and this is great for",
    "start": "1563440",
    "end": "1570240"
  },
  {
    "text": "ntlm relay scenarios because i can say hey server please authenticate to me and then when it does that i can use ntlm",
    "start": "1570240",
    "end": "1577039"
  },
  {
    "text": "relay to pass it on and impersonate that user to to different services so in this",
    "start": "1577039",
    "end": "1582880"
  },
  {
    "start": "1578000",
    "end": "1774000"
  },
  {
    "text": "case i can relay it to the http endpoints and then impersonate that computer and we'll show a demo of it",
    "start": "1582880",
    "end": "1588799"
  },
  {
    "text": "here yes so here i'm just showing that i'm i'm an attacker i'm a low prived attacker i",
    "start": "1588799",
    "end": "1595200"
  },
  {
    "text": "have a windows and a linux machine so my first step is i'm going to create a certificate request",
    "start": "1595200",
    "end": "1602000"
  },
  {
    "text": "i'm doing this in a very manual way so using openssl creating the csr",
    "start": "1602000",
    "end": "1607679"
  },
  {
    "text": "and now i'm going to kind of prep this csr for the attack i'm going to uri",
    "start": "1607679",
    "end": "1612960"
  },
  {
    "text": "encode it because we're interacting with the http endpoints so i'm going to ur encode that",
    "start": "1612960",
    "end": "1619840"
  },
  {
    "text": "certificate request and now i'm going to prepare the actual curl command that i'm",
    "start": "1619840",
    "end": "1625200"
  },
  {
    "text": "going to use to request a certificate and so that's the command i'm actually going to run",
    "start": "1625200",
    "end": "1630400"
  },
  {
    "text": "and now i'm going to get that command ready to run but not execute it yet",
    "start": "1630400",
    "end": "1636159"
  },
  {
    "text": "first i'm going to start up ntlm relay the ntlm relay x and in its",
    "start": "1636159",
    "end": "1642480"
  },
  {
    "text": "sucks mode and so that's going to start up uh right now and now i'm going to coerce a domain",
    "start": "1642480",
    "end": "1648799"
  },
  {
    "text": "controller to authenticate to my attacker machine here uh where i have ntlm relay running so",
    "start": "1648799",
    "end": "1655120"
  },
  {
    "text": "i'm going to trigger that now that runs now i'm going to issue my request and it's going to",
    "start": "1655120",
    "end": "1660720"
  },
  {
    "text": "use the relay to request a certificate as that domain controller so we got one we got an id",
    "start": "1660720",
    "end": "1667840"
  },
  {
    "text": "there so now we need to download that certificate that's associated with that id",
    "start": "1667840",
    "end": "1673679"
  },
  {
    "text": "so we're going to trigger the ntlm relay again here so that we can authenticate and download",
    "start": "1673679",
    "end": "1679200"
  },
  {
    "text": "the certificate so that's what we're doing we're going to trigger coerce the authentication now we are downloading it",
    "start": "1679200",
    "end": "1685520"
  },
  {
    "text": "and we have downloaded it to a file a dot server file there we can see that",
    "start": "1685520",
    "end": "1690720"
  },
  {
    "text": "it is down it is on disk now so now we are going to convert that",
    "start": "1690720",
    "end": "1697200"
  },
  {
    "text": "to a form that we can actually use so again we're going to use openssl and convert that and the private key to",
    "start": "1697200",
    "end": "1704399"
  },
  {
    "text": "a p to a pfx so that we can use it with rubius so",
    "start": "1704399",
    "end": "1709840"
  },
  {
    "text": "we're going to add a password to it the password here is asdf super secure so now we have a pfx file",
    "start": "1709840",
    "end": "1717840"
  },
  {
    "text": "now we're going to transfer that to the compromise windows machine where we have root where we can actually",
    "start": "1717840",
    "end": "1724000"
  },
  {
    "text": "use it so uh we're gonna go ahead and copy it and then authenticate using it um so",
    "start": "1724000",
    "end": "1731440"
  },
  {
    "text": "first step copy it from our attacker machine to locally and now we're gonna use rubius to",
    "start": "1731440",
    "end": "1737679"
  },
  {
    "text": "request a tgt and a service ticket for ldap so",
    "start": "1737679",
    "end": "1744320"
  },
  {
    "text": "rubius gets a tgt now we're getting the service ticket now we're going to list the tickets and we can see",
    "start": "1744320",
    "end": "1750640"
  },
  {
    "text": "that we authenticated as that corp dc the domain controller and now we have a",
    "start": "1750640",
    "end": "1755840"
  },
  {
    "text": "service ticket to the other domain controller um and so now we can do things like dc sync",
    "start": "1755840",
    "end": "1762640"
  },
  {
    "text": "and using memicats you know we were able to authenticate successfully and you can",
    "start": "1762640",
    "end": "1767840"
  },
  {
    "text": "see we were able to dump the curb ggt account",
    "start": "1767840",
    "end": "1772080"
  },
  {
    "start": "1774000",
    "end": "1796000"
  },
  {
    "text": "so we ended up reporting this to microsoft because we we feel like this is a default configuration and we feel",
    "start": "1776799",
    "end": "1782559"
  },
  {
    "text": "like it should be fixed but um ultimately they said you know it's not a valid finding so you know great for us",
    "start": "1782559",
    "end": "1789679"
  },
  {
    "text": "yep so last little bit last few minutes some domain persistence with golden certificates",
    "start": "1789679",
    "end": "1797679"
  },
  {
    "text": "so uh basically all lcas they have a private key on them and this private key is used to sign",
    "start": "1797679",
    "end": "1804159"
  },
  {
    "text": "certificates and so the basic idea behind this is you know if we can obtain that certificate uh then we can create",
    "start": "1804159",
    "end": "1812000"
  },
  {
    "text": "our we can forge our own certificates and so if that private key isn't protected by a tpm or an hsm um",
    "start": "1812000",
    "end": "1820240"
  },
  {
    "text": "then it's if it's not then it's going to be protected by dp api which means we can extract it and so",
    "start": "1820240",
    "end": "1827200"
  },
  {
    "text": "if we can extract it and that certificate is in the nt auth certificates object then that means we",
    "start": "1827200",
    "end": "1834559"
  },
  {
    "text": "can forge new certificates that are valid for domain authentication so we can create new certificates for",
    "start": "1834559",
    "end": "1841520"
  },
  {
    "text": "any user that we can then use to off the ad something here too is these these",
    "start": "1841520",
    "end": "1846880"
  },
  {
    "text": "certificates can't be revoked they weren't legitimately issued by the ca so they aren't actually logged in the ca's",
    "start": "1846880",
    "end": "1853440"
  },
  {
    "text": "certificate database so you can't actually go and revoke them there because that's the in order to revoke it",
    "start": "1853440",
    "end": "1859360"
  },
  {
    "text": "has to be in the database and so and these will last as long as the ca certificate is valid which by default is",
    "start": "1859360",
    "end": "1866720"
  },
  {
    "text": "five years yeah so obligatory meme yeah to channel benjamin delpy",
    "start": "1866720",
    "end": "1873200"
  },
  {
    "start": "1873000",
    "end": "2000000"
  },
  {
    "text": "um one last little thing to mix in here and we'll show a demo but the ms pkca so the pknet microsoft",
    "start": "1873200",
    "end": "1880559"
  },
  {
    "text": "documentation for backwards compatibility reasons a legitimate certificate can be used to",
    "start": "1880559",
    "end": "1885679"
  },
  {
    "text": "retrieve and associate a user or computer's ntlm hash so you imagine if you're authenticating with assert but",
    "start": "1885679",
    "end": "1891600"
  },
  {
    "text": "you know some old device doesn't support this type of stuff they had to have a backwards compatible way that you could then get that ntlm hash",
    "start": "1891600",
    "end": "1898320"
  },
  {
    "text": "so this is part of the protocol is first publicly or offensively detailed by benjamin delpy it has recently",
    "start": "1898320",
    "end": "1904080"
  },
  {
    "text": "integrated into rubios by ethical chaos and exploit ph so charlie and siri",
    "start": "1904080",
    "end": "1910399"
  },
  {
    "text": "if we combine this with golden certificates we have an alternative way to obtain ntlm credentials for any",
    "start": "1910399",
    "end": "1916000"
  },
  {
    "text": "active user or computer meaning this is kind of like an alternative to dc sync even though it operates very differently",
    "start": "1916000",
    "end": "1922320"
  },
  {
    "text": "i'll show full run through with this so we're running code on the ca server and we're going to",
    "start": "1922320",
    "end": "1928080"
  },
  {
    "text": "steal the ca's private key using chip dp api using sharp dp api so",
    "start": "1928080",
    "end": "1933440"
  },
  {
    "text": "we see here we see the extracted cert on the left i'm going through and you see the thumb prints match so this is the",
    "start": "1933440",
    "end": "1939519"
  },
  {
    "text": "ca's private key you can see the issuer and the subject are the same so this is you know",
    "start": "1939519",
    "end": "1944640"
  },
  {
    "text": "that's the ca's private key so then we're going to use a tool called forge cert which we're releasing with that private key to forge a certificate",
    "start": "1944640",
    "end": "1951760"
  },
  {
    "text": "for the administrator at the shire.local so we see that thumbprint begins with e46",
    "start": "1951760",
    "end": "1958399"
  },
  {
    "text": "we forge this new cert now we're running as that low priv user we can access the dc's file system but",
    "start": "1958399",
    "end": "1964159"
  },
  {
    "text": "we're going to use that forged certificate with the new rubios 2.0 code base to get",
    "start": "1964159",
    "end": "1969519"
  },
  {
    "text": "a tgt also with the git credentials we can get the administrators ntlm using some user to user stuff",
    "start": "1969519",
    "end": "1976480"
  },
  {
    "text": "now we have access to the file system on the dc now on the dc side we see that no",
    "start": "1976480",
    "end": "1983279"
  },
  {
    "text": "certificate was issued so there's enough we can't revoke it because there's nothing issued there and the only event",
    "start": "1983279",
    "end": "1988880"
  },
  {
    "text": "logs from the you know kerberos side is we see that certificate legitimately was",
    "start": "1988880",
    "end": "1994240"
  },
  {
    "text": "used to authenticate as administrator with that same thumb print so i think that's pretty cool very",
    "start": "1994240",
    "end": "2000399"
  },
  {
    "start": "2000000",
    "end": "2092000"
  },
  {
    "text": "awesome for domain persistence and credential so as a quick summary",
    "start": "2000399",
    "end": "2005679"
  },
  {
    "text": "active directory certificate services has a lot of abuse potential you know there's trade craft from you know stealing",
    "start": "2005679",
    "end": "2012480"
  },
  {
    "text": "certificates doing active enrollments all these domain escalation scenarios domain persistence there's a huge amount",
    "start": "2012480",
    "end": "2018240"
  },
  {
    "text": "of tradecraft here the ones we like tend to focus on that we think are really interesting are",
    "start": "2018240",
    "end": "2023440"
  },
  {
    "text": "especially that active like kind of enrollment for el saslis credential theft but also the domain escalation",
    "start": "2023440",
    "end": "2028799"
  },
  {
    "text": "stuff just so many different things we have a 140 page white paper that has",
    "start": "2028799",
    "end": "2034320"
  },
  {
    "text": "complete details about this it includes extensive defensive information and additional architectural considerations",
    "start": "2034320",
    "end": "2040640"
  },
  {
    "text": "you know this is a you know kind of a short and sweet presentation to hit the main points there's so much information",
    "start": "2040640",
    "end": "2045919"
  },
  {
    "text": "here the bitly link has a link to the white paper it's also on the spec drops website",
    "start": "2045919",
    "end": "2051760"
  },
  {
    "text": "we'll also be releasing our the tools that we've talked about here so certify and forge cert",
    "start": "2051760",
    "end": "2056960"
  },
  {
    "text": "they're going to be live in our ghost pack github repo along with a defensive tool that we've",
    "start": "2056960",
    "end": "2063440"
  },
  {
    "text": "previously released called pspki audit and so we'd love for you know feedback on any",
    "start": "2063440",
    "end": "2069358"
  },
  {
    "text": "of these tools and looking forward to other people using them yep there's quick acknowledgements there's a",
    "start": "2069359",
    "end": "2075118"
  },
  {
    "text": "lot of previous work that was done in this area we detail all of it in the white paper as well as the blog post",
    "start": "2075119",
    "end": "2080320"
  },
  {
    "text": "also shout out to sarah for the pknet related rubios editions and special thanks to mark camach for collaborating",
    "start": "2080320",
    "end": "2086079"
  },
  {
    "text": "with us on parts of this work is really awesome to work with so questions",
    "start": "2086079",
    "end": "2093240"
  }
]