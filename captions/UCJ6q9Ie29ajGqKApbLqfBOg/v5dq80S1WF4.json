[
  {
    "text": "hello and welcome everybody to my talk about RC gadgets of prototype pollution",
    "start": "2340",
    "end": "7560"
  },
  {
    "text": "vulnerabilities my name is Mikhail sherbakov I'm a PhD",
    "start": "7560",
    "end": "12719"
  },
  {
    "text": "student in language-based security and group at kth Sweden I'm passionate about",
    "start": "12719",
    "end": "19020"
  },
  {
    "text": "scalable static code analysis for vulnerability detection in real world applications over the past few years I",
    "start": "19020",
    "end": "27660"
  },
  {
    "text": "am dedicated a lot of time to analysis JavaScript a security researcher I definitely love",
    "start": "27660",
    "end": "35460"
  },
  {
    "text": "JavaScript this talk is based on the joint work",
    "start": "35460",
    "end": "41160"
  },
  {
    "text": "with Mozart balio and Chris staple in this paper we study prototype pollution",
    "start": "41160",
    "end": "47460"
  },
  {
    "text": "vulnerabilities we implemented analysis tool to detect prototype pollution and",
    "start": "47460",
    "end": "53340"
  },
  {
    "text": "their gadgets and we will present this part and the",
    "start": "53340",
    "end": "58980"
  },
  {
    "text": "methodologies that we used at the using security conference in August this year today I am going to focus on the results",
    "start": "58980",
    "end": "67640"
  },
  {
    "text": "and detected gadgets that we used for RC exploit generation",
    "start": "67640",
    "end": "75380"
  },
  {
    "text": "uh during this and the following research we found uh and reported more",
    "start": "75420",
    "end": "82619"
  },
  {
    "text": "than 10 RCs the in the most popular open source applications such as kibana or kechat",
    "start": "82619",
    "end": "89700"
  },
  {
    "text": "per server uh all right today we are waiting for a",
    "start": "89700",
    "end": "95640"
  },
  {
    "text": "journey from prototype pollution and production to real exploits mitigations",
    "start": "95640",
    "end": "101579"
  },
  {
    "text": "and Back Again I'm going to start my explanation with a",
    "start": "101579",
    "end": "108740"
  },
  {
    "text": "prototype-based language features that help us to understand a nature of",
    "start": "108740",
    "end": "115020"
  },
  {
    "text": "prototype pollution in JavaScript The Inheritance is",
    "start": "115020",
    "end": "120060"
  },
  {
    "text": "implemented by looking up the required property in the object chain",
    "start": "120060",
    "end": "126060"
  },
  {
    "text": "let's see the simple example when we create a new object or one",
    "start": "126060",
    "end": "133220"
  },
  {
    "text": "uh JavaScript runtime allocates an object that has a reference to another",
    "start": "133220",
    "end": "138840"
  },
  {
    "text": "object let's call it object prototype it's not exactly a memory layout that we",
    "start": "138840",
    "end": "144660"
  },
  {
    "text": "have it's just a model it's enough for understanding how it works",
    "start": "144660",
    "end": "149700"
  },
  {
    "text": "the object prototype has default implementation of some functions for all",
    "start": "149700",
    "end": "155879"
  },
  {
    "text": "objects for example to string if you want to extend the list of the",
    "start": "155879",
    "end": "164280"
  },
  {
    "text": "well-defined properties we can modify protea by this assignment now the object prototype is extended",
    "start": "164280",
    "end": "172140"
  },
  {
    "text": "with the property X and the value 42. things get more interesting when we",
    "start": "172140",
    "end": "180300"
  },
  {
    "text": "create some object in principle unrelated from the object",
    "start": "180300",
    "end": "185640"
  },
  {
    "text": "or one this is object Auto in this example this",
    "start": "185640",
    "end": "190739"
  },
  {
    "text": "object shares the same prototype with object o1 when we create when the runtime executes",
    "start": "190739",
    "end": "198420"
  },
  {
    "text": "the last line of the code eight lookups for the property X",
    "start": "198420",
    "end": "203819"
  },
  {
    "text": "in this case we get the value 42 in the console output",
    "start": "203819",
    "end": "210060"
  },
  {
    "text": "okay it's it's how The Inheritance works but it still does not look dangerous",
    "start": "210060",
    "end": "217080"
  },
  {
    "text": "right because only developers Define property names in the code",
    "start": "217080",
    "end": "224640"
  },
  {
    "text": "let's see this example here we have an entry point function",
    "start": "224640",
    "end": "230099"
  },
  {
    "text": "that has three arguments we assume that attacker can control all three arguments",
    "start": "230099",
    "end": "237900"
  },
  {
    "text": "first we create a empty object and this one object option",
    "start": "237900",
    "end": "245959"
  },
  {
    "text": "that has a prototype object prototype as we saw before",
    "start": "245959",
    "end": "253040"
  },
  {
    "text": "uh iterates the property specified by argument one wire break it",
    "start": "253040",
    "end": "261359"
  },
  {
    "text": "notations of the property accessor it allows the attacker to store object",
    "start": "261359",
    "end": "267060"
  },
  {
    "text": "prototype reference to the P variable",
    "start": "267060",
    "end": "272240"
  },
  {
    "text": "um on the next line of the code we have property assignment wire bracket",
    "start": "272580",
    "end": "281220"
  },
  {
    "text": "notation as well and the attacker can add new property in the",
    "start": "281220",
    "end": "290340"
  },
  {
    "text": "object prototype by argument 2 and value from the argument 3.",
    "start": "290340",
    "end": "297540"
  },
  {
    "text": "so and to get a property shell in the object prototype with some value",
    "start": "297540",
    "end": "303860"
  },
  {
    "text": "calc for example um",
    "start": "303860",
    "end": "310160"
  },
  {
    "text": "okay why this pattern well this pattern is dangerous in JavaScript and how we can",
    "start": "310259",
    "end": "317759"
  },
  {
    "text": "exploit such Behavior suppose we have a helper function that",
    "start": "317759",
    "end": "326759"
  },
  {
    "text": "executes a new process you can see that the function takes",
    "start": "326759",
    "end": "331860"
  },
  {
    "text": "literals and attacker cannot manipulate by these arguments of the function",
    "start": "331860",
    "end": "339060"
  },
  {
    "text": "in the first line of the function we read the property shell from the options",
    "start": "339060",
    "end": "344400"
  },
  {
    "text": "that we get from the argument if it's undefined we take default value it's",
    "start": "344400",
    "end": "350340"
  },
  {
    "text": "very common pattern in JavaScript okay",
    "start": "350340",
    "end": "356000"
  },
  {
    "text": "if we run exact helper at some moment after entry point execution when we",
    "start": "356240",
    "end": "363900"
  },
  {
    "text": "already pollute the property shell option shell option dot shells Returns",
    "start": "363900",
    "end": "370320"
  },
  {
    "text": "the value that we stored in the object prototype keyconk and in this case we",
    "start": "370320",
    "end": "378240"
  },
  {
    "text": "will propagate this value that attacker controlled value to exact function and",
    "start": "378240",
    "end": "384840"
  },
  {
    "text": "the function actually call execute executes a calculator uh instead of",
    "start": "384840",
    "end": "392780"
  },
  {
    "text": "Ls command like developer expected",
    "start": "392780",
    "end": "398400"
  },
  {
    "text": "such Primitives we call it a gadget and prototype pollution vulnerability it's",
    "start": "398400",
    "end": "403740"
  },
  {
    "text": "what we will discuss today and we will focus on the gadgets let's look on the real case we run or",
    "start": "403740",
    "end": "411319"
  },
  {
    "text": "prototype pollution detection tool chain against the most popular node.js application and try to achieve RC",
    "start": "411319",
    "end": "419520"
  },
  {
    "text": "what is the most popular node.js application",
    "start": "419520",
    "end": "424819"
  },
  {
    "text": "it's npm CLI because every installation of a node installed by default and you have a lot",
    "start": "425460",
    "end": "432479"
  },
  {
    "text": "in PMC line installation and GitHub also includes npmcli in all bug Bounty",
    "start": "432479",
    "end": "438720"
  },
  {
    "text": "program and we focus it on arbitrary comment execution attack",
    "start": "438720",
    "end": "444500"
  },
  {
    "text": "vulnerabilities by or analysis you can refer to the paper for any details of",
    "start": "445580",
    "end": "452099"
  },
  {
    "text": "this part we will focus on the gadget today uh in npmcli I found the code that run",
    "start": "452099",
    "end": "458880"
  },
  {
    "text": "git command by spam function call and makes options for this call",
    "start": "458880",
    "end": "467580"
  },
  {
    "text": "Now by this makeups function it means",
    "start": "467580",
    "end": "474479"
  },
  {
    "text": "um so and uh I noticed at that Ops the",
    "start": "474479",
    "end": "480780"
  },
  {
    "text": "argument has a prototype and nth is is not defined in the default configuration",
    "start": "480780",
    "end": "488360"
  },
  {
    "text": "it means that we can and in the object prototype and get all",
    "start": "488360",
    "end": "496319"
  },
  {
    "text": "environment variables that can be passed to the git",
    "start": "496319",
    "end": "501740"
  },
  {
    "text": "executable file by spawn function execution I also noticed that that GitHub sorry",
    "start": "501740",
    "end": "511319"
  },
  {
    "text": "that git command line support git",
    "start": "511319",
    "end": "516800"
  },
  {
    "text": "SSH Common environment variable that",
    "start": "516800",
    "end": "521959"
  },
  {
    "text": "here were some comments that executed when the git clone or push Repository",
    "start": "521959",
    "end": "529620"
  },
  {
    "text": "nice it looks like arbitrary comment execution because if we can pollute this",
    "start": "529620",
    "end": "535200"
  },
  {
    "text": "environment variable in nth we can execute arbitrary script that we set in",
    "start": "535200",
    "end": "542700"
  },
  {
    "text": "there is a git SSH command and that's actually how this attack works we can",
    "start": "542700",
    "end": "548160"
  },
  {
    "text": "prepare some malicious package that has a configuration file with",
    "start": "548160",
    "end": "554700"
  },
  {
    "text": "displayload and when the victim tried to install this package it gets a remote",
    "start": "554700",
    "end": "561899"
  },
  {
    "text": "code execution and executional calculator in this example",
    "start": "561899",
    "end": "567560"
  },
  {
    "text": "good uh some tips that helps",
    "start": "568019",
    "end": "574279"
  },
  {
    "text": "help you to find similar gadgets so first of all I would recommend to use",
    "start": "574279",
    "end": "581760"
  },
  {
    "text": "combined static and dynamic analysis for static analysis you just can grab by",
    "start": "581760",
    "end": "587040"
  },
  {
    "text": "child process by gray apps and grab or write more complex query by code Queen",
    "start": "587040",
    "end": "593480"
  },
  {
    "text": "usually you can get 10 15 cases that you need to review manually so I guess it's",
    "start": "593480",
    "end": "600060"
  },
  {
    "text": "okay for dynamic analysis I would recommend to use citrace and approach",
    "start": "600060",
    "end": "605279"
  },
  {
    "text": "mom utilities that's monitor Cisco's in Linux and windows operation systems and",
    "start": "605279",
    "end": "612480"
  },
  {
    "text": "show you what the child process is executed from your target application",
    "start": "612480",
    "end": "619980"
  },
  {
    "text": "okay now we want more power what if node.js",
    "start": "619980",
    "end": "626640"
  },
  {
    "text": "implementation has such gadgets uh",
    "start": "626640",
    "end": "634160"
  },
  {
    "text": "and this is implementation of node.js spawn function",
    "start": "635160",
    "end": "642000"
  },
  {
    "text": "you can see how we use the options if option is undefined it means that the",
    "start": "642000",
    "end": "648420"
  },
  {
    "text": "developer does not pass any object in the options we assign to the options",
    "start": "648420",
    "end": "655160"
  },
  {
    "text": "object with prototype it means any property and this is empty",
    "start": "655160",
    "end": "661800"
  },
  {
    "text": "object any property from the options can be polluted by a prototype pollution",
    "start": "661800",
    "end": "667260"
  },
  {
    "text": "vulnerability so what the options what the properties we have and the options what they could expect to see",
    "start": "667260",
    "end": "673680"
  },
  {
    "text": "this is a list and I highlight more interesting ones",
    "start": "673680",
    "end": "679200"
  },
  {
    "text": "uh it's nth that we already saw how it works in the previous example you can",
    "start": "679200",
    "end": "684600"
  },
  {
    "text": "add any environment variables this is uh input inputted as to the Io if you run",
    "start": "684600",
    "end": "692040"
  },
  {
    "text": "some comment in interactive mode you can provide the input attacker control at",
    "start": "692040",
    "end": "697500"
  },
  {
    "text": "input for the command and we found how to exploit it",
    "start": "697500",
    "end": "703260"
  },
  {
    "text": "and prepare uh poke of concept for this property and this is shell",
    "start": "703260",
    "end": "709700"
  },
  {
    "text": "most interesting one I guess it can be string and it defines what the",
    "start": "709700",
    "end": "715920"
  },
  {
    "text": "executable file should be started so we can control executable file we can",
    "start": "715920",
    "end": "722160"
  },
  {
    "text": "control environment variable but we can control arguments how we can get remote code execution by",
    "start": "722160",
    "end": "730019"
  },
  {
    "text": "this way let's see on this gadget that's implemented uh biceps shell property so you can see",
    "start": "730019",
    "end": "738360"
  },
  {
    "text": "that we call spawn function sponsync function with pink and arguments that's",
    "start": "738360",
    "end": "743760"
  },
  {
    "text": "literal and attacker cannot control it but we can still can get remote code",
    "start": "743760",
    "end": "749279"
  },
  {
    "text": "execution by prototype pollution if we pollute the Shell with a pass to node",
    "start": "749279",
    "end": "754640"
  },
  {
    "text": "that's for sure you have on the computer on the mission that execute node.js",
    "start": "754640",
    "end": "760800"
  },
  {
    "text": "application uh and add not Ops environment that's",
    "start": "760800",
    "end": "765899"
  },
  {
    "text": "interpreted like environment variable with ex expect break argument and it",
    "start": "765899",
    "end": "772920"
  },
  {
    "text": "says node to break execution on the first instruction and",
    "start": "772920",
    "end": "779940"
  },
  {
    "text": "um and waiting for debugger remote debugger",
    "start": "779940",
    "end": "785040"
  },
  {
    "text": "session one problem here we don't any JavaScript",
    "start": "785040",
    "end": "791459"
  },
  {
    "text": "code we actually can connect to the debugger remotely to this node process",
    "start": "791459",
    "end": "797240"
  },
  {
    "text": "but when we try to execute any comment this fashionist terminates",
    "start": "797240",
    "end": "803160"
  },
  {
    "text": "because this node.js instance try to interpret um",
    "start": "803160",
    "end": "808639"
  },
  {
    "text": "evaluate some first commands some first JavaScript code but we don't have it we",
    "start": "808639",
    "end": "814860"
  },
  {
    "text": "have a uninstallized not fully initialize it nodes instance",
    "start": "814860",
    "end": "822420"
  },
  {
    "text": "I found a way how we can modify the breaker to make a Shell by this way this",
    "start": "822420",
    "end": "830339"
  },
  {
    "text": "is a simplified code that describes the main idea if we use uh internal inspect",
    "start": "830339",
    "end": "835639"
  },
  {
    "text": "client.js code that implemented the buyer we can set up a few callbacks",
    "start": "835639",
    "end": "841380"
  },
  {
    "text": "first callback it's a runtime overlaid callback and this callback added some",
    "start": "841380",
    "end": "848160"
  },
  {
    "text": "code some JavaScript code in the Target process we add debugger call event when",
    "start": "848160",
    "end": "855839"
  },
  {
    "text": "the process exit it means when the process throws the first exception it",
    "start": "855839",
    "end": "861480"
  },
  {
    "text": "executed this Handler and execute debugger command that emulate the new",
    "start": "861480",
    "end": "867360"
  },
  {
    "text": "breakpoint and then next this breakpoint we get second callback",
    "start": "867360",
    "end": "875540"
  },
  {
    "text": "loaded all models initialized it and we can manipulate",
    "start": "878300",
    "end": "883800"
  },
  {
    "text": "this environment and run in some shell way remotely just execute any processes",
    "start": "883800",
    "end": "891600"
  },
  {
    "text": "from this callback okay it how this shell works",
    "start": "891600",
    "end": "897440"
  },
  {
    "text": "great let's find more RC gadgets and",
    "start": "898380",
    "end": "903660"
  },
  {
    "text": "node.js first of all I should mention that we we",
    "start": "903660",
    "end": "911820"
  },
  {
    "text": "were not the first uh who discovers a gadget in node.js",
    "start": "911820",
    "end": "920180"
  },
  {
    "text": "Kowski described this blog post unfortunately I read it after I detected",
    "start": "921320",
    "end": "928199"
  },
  {
    "text": "my first Gadget but so I found new way to exploit it that I demonstrated for",
    "start": "928199",
    "end": "933300"
  },
  {
    "text": "you uh Hugh also provide a gadget that use environment",
    "start": "933300",
    "end": "938940"
  },
  {
    "text": "variable for the node object and implemented um remote remote uh River cell",
    "start": "938940",
    "end": "947100"
  },
  {
    "text": "another cell and you can find these nice blog posts for details of this",
    "start": "947100",
    "end": "952139"
  },
  {
    "text": "implementation I also want to see about this sentence he gave the idea",
    "start": "952139",
    "end": "958860"
  },
  {
    "text": "it would be better if we found more functions like require",
    "start": "958860",
    "end": "965240"
  },
  {
    "text": "that could be exploitable okay challenge is accepted",
    "start": "965240",
    "end": "972600"
  },
  {
    "text": "let's see on the required gadgets that we actually found uh",
    "start": "972600",
    "end": "978540"
  },
  {
    "text": "it's a little bit weird behavior in node.js but when we have a requirement",
    "start": "978540",
    "end": "984899"
  },
  {
    "text": "for the model that has packages Json without main property you can pollute",
    "start": "984899",
    "end": "992880"
  },
  {
    "text": "property to the path to the some js file that's will execute it",
    "start": "992880",
    "end": "999800"
  },
  {
    "text": "when you call require so why it works like this if we say on",
    "start": "999800",
    "end": "1005720"
  },
  {
    "text": "the code of the loader in the node.js you can see that it parse packages on",
    "start": "1005720",
    "end": "1011420"
  },
  {
    "text": "file and use this parse.main access property expression that should",
    "start": "1011420",
    "end": "1018199"
  },
  {
    "text": "return the main and actually if main is not defined it try to do look up to the",
    "start": "1018199",
    "end": "1025000"
  },
  {
    "text": "object prototype to reach this property it's what we actually abuse in this way",
    "start": "1025000",
    "end": "1031938"
  },
  {
    "text": "uh but it's not it's not um remote code execution right because we",
    "start": "1031939",
    "end": "1038298"
  },
  {
    "text": "need to have this file on the local Target Mission so it's required some kind of",
    "start": "1038299",
    "end": "1045400"
  },
  {
    "text": "unrestricted file plot or another vulnerability what we can do",
    "start": "1045400",
    "end": "1051140"
  },
  {
    "text": "let's make a cocktail of the gadgets if we can find a file that's around",
    "start": "1051140",
    "end": "1057860"
  },
  {
    "text": "child process in any child process that can be abused by the previous Gadget",
    "start": "1057860",
    "end": "1065200"
  },
  {
    "text": "and we have still we have required uh that's uh can load this file with child",
    "start": "1065200",
    "end": "1073039"
  },
  {
    "text": "process we can get remote code execution and we are lucky that this file exists",
    "start": "1073039",
    "end": "1078799"
  },
  {
    "text": "in the default implementation it's npm.js it's actually run node.js",
    "start": "1078799",
    "end": "1085340"
  },
  {
    "text": "instance and we need to pollute one more property not options as I shown before",
    "start": "1085340",
    "end": "1091640"
  },
  {
    "text": "in my first example of them",
    "start": "1091640",
    "end": "1095260"
  },
  {
    "text": "and we will get remote code execution by this way so some exploits development tips the",
    "start": "1099200",
    "end": "1107299"
  },
  {
    "text": "main problem and I should mention that also import function also can be abused",
    "start": "1107299",
    "end": "1113360"
  },
  {
    "text": "by the same same Gadget so the main issue of requiring to import",
    "start": "1113360",
    "end": "1118700"
  },
  {
    "text": "Gadget exploitation is caching offloaded models if the law if the model",
    "start": "1118700",
    "end": "1125720"
  },
  {
    "text": "is loaded once uh they put it in the cache and you cannot reload them so it",
    "start": "1125720",
    "end": "1132200"
  },
  {
    "text": "means you need to find some models that does not load yet and has not been",
    "start": "1132200",
    "end": "1137960"
  },
  {
    "text": "loaded and uh package.json does not have a main property so it's not a large",
    "start": "1137960",
    "end": "1145280"
  },
  {
    "text": "attack surface but it's possible to find so first of all I would recommend to",
    "start": "1145280",
    "end": "1151460"
  },
  {
    "text": "combine static and dynamic analysis again so first very simple things that you can apply",
    "start": "1151460",
    "end": "1158059"
  },
  {
    "text": "it's Define a property in the object prototype or your target applications",
    "start": "1158059",
    "end": "1164240"
  },
  {
    "text": "that you analyze and to add the main property and for in the getter add some",
    "start": "1164240",
    "end": "1170740"
  },
  {
    "text": "console log if you see these messages in the log most likely the required",
    "start": "1170740",
    "end": "1176480"
  },
  {
    "text": "function try to load sorry try to load a model",
    "start": "1176480",
    "end": "1184120"
  },
  {
    "text": "and read your main property",
    "start": "1185740",
    "end": "1191919"
  },
  {
    "text": "um another way how you can find some is this require a function in the code",
    "start": "1192140",
    "end": "1200120"
  },
  {
    "text": "you need to run a script that you numerate all packages without main property after that you can connect to",
    "start": "1200120",
    "end": "1206660"
  },
  {
    "text": "the analyzer debugger and set breakpoint on the Prototype pollution vulnerabilities and dump all loaded",
    "start": "1206660",
    "end": "1212840"
  },
  {
    "text": "modulus filter out loaded model is from the first list of all models without Main",
    "start": "1212840",
    "end": "1219260"
  },
  {
    "text": "and give you a models that you can try to load to find how it loaded in The",
    "start": "1219260",
    "end": "1224539"
  },
  {
    "text": "Code by this way I found this example of the triggering of this gadget",
    "start": "1224539",
    "end": "1232460"
  },
  {
    "text": "in the real application you can see that we have a look environment a local level",
    "start": "1232460",
    "end": "1237679"
  },
  {
    "text": "variable in the environment variables and it allows in the debug mode to",
    "start": "1237679",
    "end": "1243320"
  },
  {
    "text": "require some package that does not contain the main so in usual in the",
    "start": "1243320",
    "end": "1249140"
  },
  {
    "text": "normal execution you don't load it but you also can pollute low level and achieve this code and triggers a gadget",
    "start": "1249140",
    "end": "1255980"
  },
  {
    "text": "in the end ok",
    "start": "1255980",
    "end": "1261080"
  },
  {
    "text": "we are in the middle of our journey the node.js team start to mitigate",
    "start": "1261080",
    "end": "1267440"
  },
  {
    "text": "gadgets remember the implementation of child",
    "start": "1267440",
    "end": "1274400"
  },
  {
    "text": "process the fix is obvious just use the object",
    "start": "1274400",
    "end": "1279919"
  },
  {
    "text": "without prototype for options by default like this",
    "start": "1279919",
    "end": "1286460"
  },
  {
    "text": "so you cannot anymore to control properties when the attacker does not",
    "start": "1286460",
    "end": "1293659"
  },
  {
    "text": "pass any any value in the options but let's see on this part",
    "start": "1293659",
    "end": "1299299"
  },
  {
    "text": "in this case we still can control environment variables because process",
    "start": "1299299",
    "end": "1305059"
  },
  {
    "text": "and process.n it's a reference to the object that has",
    "start": "1305059",
    "end": "1311720"
  },
  {
    "text": "a object prototypes in the Prototype chain so it can be still abused and the",
    "start": "1311720",
    "end": "1318500"
  },
  {
    "text": "um gadgets that I show this debugger style it shell still works",
    "start": "1318500",
    "end": "1327320"
  },
  {
    "text": "uh what about the code from the npmc live sample",
    "start": "1327400",
    "end": "1332840"
  },
  {
    "text": "this mitigation does not cover such cases",
    "start": "1332840",
    "end": "1338559"
  },
  {
    "text": "we still can um if the user create all the objects that",
    "start": "1339020",
    "end": "1346159"
  },
  {
    "text": "that he passed in uh options we still can abuse uh the properties of these",
    "start": "1346159",
    "end": "1354740"
  },
  {
    "text": "options and also for the environmental variable and for the all nested objects if we",
    "start": "1354740",
    "end": "1361640"
  },
  {
    "text": "have it okay so this uh pattern is still exploitable",
    "start": "1361640",
    "end": "1367820"
  },
  {
    "text": "what about require implementation it's also fixed now",
    "start": "1367820",
    "end": "1373240"
  },
  {
    "text": "the fix they change it the code that read the properties from",
    "start": "1373240",
    "end": "1379700"
  },
  {
    "text": "the package Json by filter on properties function as you can understand from the",
    "start": "1379700",
    "end": "1385220"
  },
  {
    "text": "name of the function it reads only properties from the own object not from",
    "start": "1385220",
    "end": "1390740"
  },
  {
    "text": "the object prototype okay but we found another variation of",
    "start": "1390740",
    "end": "1396740"
  },
  {
    "text": "this gadget uh if we have a required this path to",
    "start": "1396740",
    "end": "1403580"
  },
  {
    "text": "the folder that does not contains package Json the same Gadget works",
    "start": "1403580",
    "end": "1410419"
  },
  {
    "text": "uh answer why it's so on this slide I will give you chance after the",
    "start": "1410419",
    "end": "1416360"
  },
  {
    "text": "presentation to find that I pretty sure that you enjoyed um",
    "start": "1416360",
    "end": "1422179"
  },
  {
    "text": "so and we also found the new Gadget in the",
    "start": "1422179",
    "end": "1427940"
  },
  {
    "text": "import function this is even more dangerous because you need to control",
    "start": "1427940",
    "end": "1433640"
  },
  {
    "text": "only one property Source you can provide the JavaScript code that executed uh if",
    "start": "1433640",
    "end": "1442280"
  },
  {
    "text": "you have a import call with some path to the file",
    "start": "1442280",
    "end": "1449200"
  },
  {
    "text": "so um now we see that",
    "start": "1449720",
    "end": "1455799"
  },
  {
    "text": "node.js team do some work to mitigate this gadget it covered common cases and",
    "start": "1455799",
    "end": "1463760"
  },
  {
    "text": "I guess very soon they fix it most of that or mitigated most of that it would",
    "start": "1463760",
    "end": "1470179"
  },
  {
    "text": "be very hard to uh exploit a gadget in node.js",
    "start": "1470179",
    "end": "1476600"
  },
  {
    "text": "but we have uh more interesting targets",
    "start": "1476600",
    "end": "1482659"
  },
  {
    "text": "for God's detection what about Gadget in third party npm packages",
    "start": "1482659",
    "end": "1491200"
  },
  {
    "text": "we continue of research or research of Gadget",
    "start": "1491860",
    "end": "1500179"
  },
  {
    "text": "detection and not just standard library and also in the third party packages for",
    "start": "1500179",
    "end": "1505520"
  },
  {
    "text": "not just standard Library we use paint trekking analysis in parched node.js and",
    "start": "1505520",
    "end": "1511760"
  },
  {
    "text": "I guess we will publish some results very soon and for third-party packages",
    "start": "1511760",
    "end": "1520480"
  },
  {
    "text": "implements Dynamic analysis tool on top of grand VM and travel instrumentation",
    "start": "1523779",
    "end": "1530240"
  },
  {
    "text": "from work to analyze the npm packages",
    "start": "1530240",
    "end": "1535900"
  },
  {
    "text": "the current analysis detects RC Gadget",
    "start": "1535900",
    "end": "1541159"
  },
  {
    "text": "in npm packages such as official or mongodb client",
    "start": "1541159",
    "end": "1547600"
  },
  {
    "text": "some library for um converting images and sending emails so",
    "start": "1547600",
    "end": "1556220"
  },
  {
    "text": "we already have some results and this direction looks very promising I will",
    "start": "1556220",
    "end": "1562640"
  },
  {
    "text": "show you example of the one Gadget uh first one in official mongodb client the",
    "start": "1562640",
    "end": "1569059"
  },
  {
    "text": "gadget is pretty simple but uh exploitation techniques technique that I",
    "start": "1569059",
    "end": "1574340"
  },
  {
    "text": "use very interesting this gadget we use uh to exploit uh per",
    "start": "1574340",
    "end": "1580700"
  },
  {
    "text": "server and Rocket chat applications a per server it's a server side",
    "start": "1580700",
    "end": "1588380"
  },
  {
    "text": "applications that provide you a rest API and Source the data in some storage in",
    "start": "1588380",
    "end": "1595400"
  },
  {
    "text": "mongodb by default so and it use JavaScript",
    "start": "1595400",
    "end": "1603679"
  },
  {
    "text": "mongodb client with JS bson package this package serialize and",
    "start": "1604539",
    "end": "1612200"
  },
  {
    "text": "deserialize the data from Json format to Binary format for mongodb",
    "start": "1612200",
    "end": "1618880"
  },
  {
    "text": "so we found prototype pollution vulnerability in part server itself",
    "start": "1618880",
    "end": "1625340"
  },
  {
    "text": "and we found Gadget in this Library the gadget is pretty simple it could evolve",
    "start": "1625340",
    "end": "1632600"
  },
  {
    "text": "function for function string this function string can be loaded from the mongodb and it's possible to store it in",
    "start": "1632600",
    "end": "1639559"
  },
  {
    "text": "the mongodb in some special type and load it later by per server application the problem",
    "start": "1639559",
    "end": "1646880"
  },
  {
    "text": "that these evolve function does not um executed and the default configuration",
    "start": "1646880",
    "end": "1653900"
  },
  {
    "text": "because you need to add eval function true in the config file to enable this",
    "start": "1653900",
    "end": "1659419"
  },
  {
    "text": "feature it's disabled by by by default but we can use prototype pollution to",
    "start": "1659419",
    "end": "1665360"
  },
  {
    "text": "enable it is this idea of the exploitation uh okay so the intuitive way how to",
    "start": "1665360",
    "end": "1672140"
  },
  {
    "text": "exploit it the attacker sends the first package that should trigger uh prototype",
    "start": "1672140",
    "end": "1679279"
  },
  {
    "text": "pollution vulnerability so it's achievable prototype pollution code trigger prototype pollution we had",
    "start": "1679279",
    "end": "1686799"
  },
  {
    "text": "required property in the object prototype and the attackers send the second package that should trigger a",
    "start": "1686799",
    "end": "1692779"
  },
  {
    "text": "gadget RC Gadget but mongodb throw exception when you try to serialize the",
    "start": "1692779",
    "end": "1699140"
  },
  {
    "text": "data because we added some additional properties in the object prototypes and sometimes it breaks some features and",
    "start": "1699140",
    "end": "1707299"
  },
  {
    "text": "the code doesn't expect it and throw exception so it looks like an",
    "start": "1707299",
    "end": "1712460"
  },
  {
    "text": "exploitable case because we cannot trigger RC Gadget but we can use some",
    "start": "1712460",
    "end": "1719480"
  },
  {
    "text": "kind of race condition technique let's see you what happens if the attacker",
    "start": "1719480",
    "end": "1725659"
  },
  {
    "text": "sent the RC trigger Gadget package first",
    "start": "1725659",
    "end": "1731539"
  },
  {
    "text": "and we can make [Music] um and we we can say the mongodb to",
    "start": "1731539",
    "end": "1738140"
  },
  {
    "text": "evaluated a long time for example uh we can use uh search by regex that cannot",
    "start": "1738140",
    "end": "1745279"
  },
  {
    "text": "be indexed and mongodb uh much this request",
    "start": "1745279",
    "end": "1752020"
  },
  {
    "text": "for each document one by one in it takes some time at the same moment attackers send",
    "start": "1752020",
    "end": "1758960"
  },
  {
    "text": "prototype pollution uh triggered request um",
    "start": "1758960",
    "end": "1764960"
  },
  {
    "text": "and it achieved productive pollution vulnerability trigger it and after that Monga stops",
    "start": "1764960",
    "end": "1772279"
  },
  {
    "text": "handling of this package and the result deserialized in RC and we get remote",
    "start": "1772279",
    "end": "1778940"
  },
  {
    "text": "code execution this is techniques that you use uh few times in the real",
    "start": "1778940",
    "end": "1784520"
  },
  {
    "text": "application you could you could be skeptic about",
    "start": "1784520",
    "end": "1789580"
  },
  {
    "text": "this that it works in the real scenario but I even try to execute it on the",
    "start": "1789580",
    "end": "1796700"
  },
  {
    "text": "different servers servers in the different data centers and you still",
    "start": "1796700",
    "end": "1803000"
  },
  {
    "text": "have the Gap that enough to do this race condition Two Rivers uh sending the",
    "start": "1803000",
    "end": "1810380"
  },
  {
    "text": "package and or reverse order of handling that so it works pretty well",
    "start": "1810380",
    "end": "1818260"
  },
  {
    "text": "um so how is the exploitation looks like we need to you know write some shell",
    "start": "1818299",
    "end": "1824000"
  },
  {
    "text": "script that actually send these two requests",
    "start": "1824000",
    "end": "1831440"
  },
  {
    "text": "and first of all we add in the mongodb",
    "start": "1831440",
    "end": "1836480"
  },
  {
    "text": "by the same apis that provide parse server many documents like a 1 000",
    "start": "1836480",
    "end": "1843260"
  },
  {
    "text": "documents and we use some kind of regex that makes RC uh trigger it request",
    "start": "1843260",
    "end": "1853240"
  },
  {
    "text": "executable for for some time for a few seconds and we execute this uh script",
    "start": "1853240",
    "end": "1860240"
  },
  {
    "text": "and you can see that we run a calculator on the target motion",
    "start": "1860240",
    "end": "1865399"
  },
  {
    "text": "so and in the log you can see that get request that should trigger the RC",
    "start": "1865399",
    "end": "1872539"
  },
  {
    "text": "Gadget executed for two seconds it's a lot for the remote for a race",
    "start": "1872539",
    "end": "1879380"
  },
  {
    "text": "condition uh you even can use a race condition",
    "start": "1879380",
    "end": "1884960"
  },
  {
    "text": "technique if you have a gap to 100 milliseconds I guess uh it's a",
    "start": "1884960",
    "end": "1891200"
  },
  {
    "text": "little bit another technique you can send a lot requests that trigger RC",
    "start": "1891200",
    "end": "1896240"
  },
  {
    "text": "Gadget and one prototype pollution trigger request in the middle of this set in this case many requests that",
    "start": "1896240",
    "end": "1902840"
  },
  {
    "text": "should trigger a RC Gadget returns return mirror but it's okay but most",
    "start": "1902840",
    "end": "1908960"
  },
  {
    "text": "likely one request will be in the gobs is 100 millisecond Gap after triggering",
    "start": "1908960",
    "end": "1915799"
  },
  {
    "text": "prototype pollution vulnerabilities I use these technical science a real scenario it works through the network",
    "start": "1915799",
    "end": "1922960"
  },
  {
    "text": "so not for 100 cases but we with very very good probability",
    "start": "1922960",
    "end": "1930440"
  },
  {
    "text": "um of the attack so also you can see some",
    "start": "1930440",
    "end": "1936260"
  },
  {
    "text": "errors during the exploitation of prototype pollution vulnerability for example it can be type error",
    "start": "1936260",
    "end": "1943240"
  },
  {
    "text": "uh like cannot read property blah blah blah off undefine it it means when you",
    "start": "1943240",
    "end": "1949580"
  },
  {
    "text": "pollute some property change execution flow and the code try to read some",
    "start": "1949580",
    "end": "1955820"
  },
  {
    "text": "unexpected property so what you can do if you see such error you can try to",
    "start": "1955820",
    "end": "1963380"
  },
  {
    "text": "um add this property another example you can just pollute this property also it",
    "start": "1963380",
    "end": "1969140"
  },
  {
    "text": "can be ordered from the original uh object prototype so you also can see",
    "start": "1969140",
    "end": "1977299"
  },
  {
    "text": "uh infinite recursion in the payload if you add objects with the Prototype as a",
    "start": "1977299",
    "end": "1983600"
  },
  {
    "text": "value so you can do it like this just set Newlands a prototor and the fluent",
    "start": "1983600",
    "end": "1989679"
  },
  {
    "text": "get it works I guess we now see that prototype",
    "start": "1989679",
    "end": "1996260"
  },
  {
    "text": "pollution on the server side give us great power as we know with great power",
    "start": "1996260",
    "end": "2003100"
  },
  {
    "text": "comes great responsibility let's discuss how to live business knowledge and care how we can improve",
    "start": "2003100",
    "end": "2010240"
  },
  {
    "text": "this broken world my main point about defense is that we",
    "start": "2010240",
    "end": "2015880"
  },
  {
    "text": "should pay as much attention to mitigating prototype pollution gadgets",
    "start": "2015880",
    "end": "2021039"
  },
  {
    "text": "as we do for Arab gadgets for example science prototype pollution is currently",
    "start": "2021039",
    "end": "2027760"
  },
  {
    "text": "not fixed on the JavaScript language level it's important to take proactive",
    "start": "2027760",
    "end": "2036600"
  },
  {
    "text": "measurements to reduce the attack surface to mitigate the gadgets",
    "start": "2036600",
    "end": "2042519"
  },
  {
    "text": "so I would recommend follow the best practices to reuse the risk of the",
    "start": "2042519",
    "end": "2047980"
  },
  {
    "text": "attack in your web application you can consider the option to use known",
    "start": "2047980",
    "end": "2053980"
  },
  {
    "text": "prototype of all new objects objects that you create by object create now for",
    "start": "2053980",
    "end": "2060820"
  },
  {
    "text": "example or use map or set to store Key values pair and unique values so usually",
    "start": "2060820",
    "end": "2069158"
  },
  {
    "text": "it's okay so just yeah you need to know about this way",
    "start": "2069159",
    "end": "2074618"
  },
  {
    "text": "ah however there are cases where we receive",
    "start": "2074619",
    "end": "2079658"
  },
  {
    "text": "a object from the external source code and we",
    "start": "2079659",
    "end": "2084700"
  },
  {
    "text": "cannot control its creation for this case so we need to copy only on properties of",
    "start": "2084700",
    "end": "2093220"
  },
  {
    "text": "this object to the object without prototype and so this is a good example that can",
    "start": "2093220",
    "end": "2101140"
  },
  {
    "text": "implement it and in this case we can",
    "start": "2101140",
    "end": "2107080"
  },
  {
    "text": "can mitigate the gadget if you have it in the own code because we cannot do",
    "start": "2107820",
    "end": "2113740"
  },
  {
    "text": "this lookup to the object prototype we have a copy only control that expected",
    "start": "2113740",
    "end": "2119020"
  },
  {
    "text": "properties in the object with output that happened to use it instead of the original one",
    "start": "2119020",
    "end": "2126240"
  },
  {
    "text": "some reference that I want to [Music] recommend to take a look",
    "start": "2126579",
    "end": "2135280"
  },
  {
    "text": "it's our paper Silent Spring prototype pollution leads to remote code the",
    "start": "2135280",
    "end": "2140859"
  },
  {
    "text": "execution and node.js the first link is a link for the paper and all artifacts",
    "start": "2140859",
    "end": "2146619"
  },
  {
    "text": "and second link is the link to the collection of the gadget I released it",
    "start": "2146619",
    "end": "2151900"
  },
  {
    "text": "one hour before one hour ago and you can find all",
    "start": "2151900",
    "end": "2157060"
  },
  {
    "text": "gadgets that we discussed today and we will update this wrapper we will continue research in this direction and",
    "start": "2157060",
    "end": "2163119"
  },
  {
    "text": "I also want to implement um won't Implement automatical checks for",
    "start": "2163119",
    "end": "2169359"
  },
  {
    "text": "the guards because we already see that it's fixed in the sound version it's good to know what the versions node.js",
    "start": "2169359",
    "end": "2176520"
  },
  {
    "text": "has already fixed the gadget which one can be exploited and this part",
    "start": "2176520",
    "end": "2184619"
  },
  {
    "text": "this automatic checks I want to add these in the representation",
    "start": "2184619",
    "end": "2190119"
  },
  {
    "text": "uh if you're interested in the Black Box analysis because we talked today about source code analysis when you have a",
    "start": "2190119",
    "end": "2196960"
  },
  {
    "text": "source code of the target applications that you analyze you can run it you can review the code you can run static",
    "start": "2196960",
    "end": "2202780"
  },
  {
    "text": "analysis but if you're interested in the Box techniques I highly recommend to read blog posts and watch a video by",
    "start": "2202780",
    "end": "2211060"
  },
  {
    "text": "Garrett Hayes that's excellent presentation and he",
    "start": "2211060",
    "end": "2217480"
  },
  {
    "text": "discovered many tricks how we can explore it and how we can detect prototype pollution server-side",
    "start": "2217480",
    "end": "2224380"
  },
  {
    "text": "proto-day pollution vulnerabilities in Black Box technique",
    "start": "2224380",
    "end": "2229599"
  },
  {
    "text": "I also recommend to take a look on the Prototype pollution mitigation proposal it's in the stage one it's nice idea how",
    "start": "2229599",
    "end": "2238300"
  },
  {
    "text": "we can um how we can fix how we can mitigate prototype pollution uh at all on the",
    "start": "2238300",
    "end": "2246760"
  },
  {
    "text": "language level so you can ask it question contribute to",
    "start": "2246760",
    "end": "2252220"
  },
  {
    "text": "this proposal maybe you can find some contract sample that doesn't cover it now it's a good time to to do this work",
    "start": "2252220",
    "end": "2259660"
  },
  {
    "text": "because yeah maybe they can fix for the pollution at all and also these two black blog posts that",
    "start": "2259660",
    "end": "2267640"
  },
  {
    "text": "I mentioned during the uh presentation today",
    "start": "2267640",
    "end": "2272920"
  },
  {
    "text": "so you also can take a look um here a key",
    "start": "2272920",
    "end": "2278400"
  },
  {
    "text": "takeaways from this talk that I would like to emphasize prototype pollution leads to remote code execution I mean",
    "start": "2278400",
    "end": "2286300"
  },
  {
    "text": "we made sure about this and it's getting easier to achieve by",
    "start": "2286300",
    "end": "2291940"
  },
  {
    "text": "Universal gadgets and node.js and such a research part libraries",
    "start": "2291940",
    "end": "2300220"
  },
  {
    "text": "I showed how to combine combine prototype pollution with race condition technique but we also can combine it",
    "start": "2300220",
    "end": "2307000"
  },
  {
    "text": "with another vulnerabilities it looks like a very promising direction for the research and we just open and do a",
    "start": "2307000",
    "end": "2314140"
  },
  {
    "text": "little and so maybe it give you some ideas",
    "start": "2314140",
    "end": "2320099"
  },
  {
    "text": "I guess developers should not only focus on mitigation prototype pollution vulnerabilities in their code and also",
    "start": "2320320",
    "end": "2328180"
  },
  {
    "text": "pay attention on Gadget mitigations",
    "start": "2328180",
    "end": "2332338"
  },
  {
    "text": "so uh this is uh all the time that we",
    "start": "2333400",
    "end": "2338500"
  },
  {
    "text": "have for today if you have additional question please",
    "start": "2338500",
    "end": "2343720"
  },
  {
    "text": "contact me on Twitter and I'm available for discussion after the presentation",
    "start": "2343720",
    "end": "2350020"
  },
  {
    "text": "uh you also can follow me on the Twitter and I will publish uh postal updates",
    "start": "2350020",
    "end": "2357339"
  },
  {
    "text": "about our research that we do",
    "start": "2357339",
    "end": "2362760"
  },
  {
    "text": "um NCM thank you for your attention and I will open for the discussion",
    "start": "2363579",
    "end": "2370380"
  }
]