[
  {
    "text": "[Music]",
    "start": "1130",
    "end": "14000"
  },
  {
    "text": "hello and thank you for watching our",
    "start": "14000",
    "end": "15759"
  },
  {
    "text": "presentation",
    "start": "15759",
    "end": "17119"
  },
  {
    "text": "in this talk we're going to be",
    "start": "17119",
    "end": "18560"
  },
  {
    "text": "discussing the tracing infrastructure of",
    "start": "18560",
    "end": "20960"
  },
  {
    "text": "the linux kernel",
    "start": "20960",
    "end": "22480"
  },
  {
    "text": "you'll see some of the legitimate uses",
    "start": "22480",
    "end": "24560"
  },
  {
    "text": "of this infrastructure but then we'll",
    "start": "24560",
    "end": "26560"
  },
  {
    "text": "also spend a lot of time looking at the",
    "start": "26560",
    "end": "28880"
  },
  {
    "text": "abuses that malware and malicious users",
    "start": "28880",
    "end": "31760"
  },
  {
    "text": "can",
    "start": "31760",
    "end": "32800"
  },
  {
    "text": "get out of this infrastructure and then",
    "start": "32800",
    "end": "35200"
  },
  {
    "text": "we'll also look at new memory forensics",
    "start": "35200",
    "end": "37440"
  },
  {
    "text": "techniques that we developed that allow",
    "start": "37440",
    "end": "39680"
  },
  {
    "text": "for deep inspection of the",
    "start": "39680",
    "end": "41760"
  },
  {
    "text": "infrastructure and all of its different",
    "start": "41760",
    "end": "43520"
  },
  {
    "text": "components and the reason for this is",
    "start": "43520",
    "end": "46559"
  },
  {
    "text": "memory forensics plays a vital role in",
    "start": "46559",
    "end": "48559"
  },
  {
    "text": "modern investigations but current",
    "start": "48559",
    "end": "50879"
  },
  {
    "text": "techniques are essentially blind to this",
    "start": "50879",
    "end": "53120"
  },
  {
    "text": "infrastructure so if you have malware",
    "start": "53120",
    "end": "55520"
  },
  {
    "text": "abusing it then there's no direct way to",
    "start": "55520",
    "end": "58160"
  },
  {
    "text": "get it and in some cases you'd have to",
    "start": "58160",
    "end": "60000"
  },
  {
    "text": "be pretty lucky to be able to find it at",
    "start": "60000",
    "end": "62079"
  },
  {
    "text": "all",
    "start": "62079",
    "end": "62960"
  },
  {
    "text": "if this type of malware had infected",
    "start": "62960",
    "end": "65119"
  },
  {
    "text": "your system",
    "start": "65119",
    "end": "67680"
  },
  {
    "text": "and what we're seeing on this slide is a",
    "start": "68080",
    "end": "70159"
  },
  {
    "text": "very high level look at this tracing",
    "start": "70159",
    "end": "72799"
  },
  {
    "text": "infrastructure and all of the parts of",
    "start": "72799",
    "end": "75280"
  },
  {
    "text": "the operating system that are exposed to",
    "start": "75280",
    "end": "77439"
  },
  {
    "text": "it this is a famous picture because it",
    "start": "77439",
    "end": "79759"
  },
  {
    "text": "comes from the ebpf documentation",
    "start": "79759",
    "end": "82640"
  },
  {
    "text": "it comes from brennan gregg's website",
    "start": "82640",
    "end": "84560"
  },
  {
    "text": "he's done a ton of work with ebpf and",
    "start": "84560",
    "end": "86960"
  },
  {
    "text": "also wrote the book on it and so if you",
    "start": "86960",
    "end": "89920"
  },
  {
    "text": "look inside the rectangle you can see",
    "start": "89920",
    "end": "91920"
  },
  {
    "text": "all of these places of the kernel you",
    "start": "91920",
    "end": "94400"
  },
  {
    "text": "have the memory manager the process",
    "start": "94400",
    "end": "96079"
  },
  {
    "text": "scheduler the entire networking stack",
    "start": "96079",
    "end": "98560"
  },
  {
    "text": "all the components of the file system as",
    "start": "98560",
    "end": "100640"
  },
  {
    "text": "well as dealing with the actual data on",
    "start": "100640",
    "end": "102960"
  },
  {
    "text": "the disk",
    "start": "102960",
    "end": "104000"
  },
  {
    "text": "you can interface with the system call",
    "start": "104000",
    "end": "106240"
  },
  {
    "text": "table and all of the functions and then",
    "start": "106240",
    "end": "108799"
  },
  {
    "text": "through this",
    "start": "108799",
    "end": "110479"
  },
  {
    "text": "and then through this api you can also",
    "start": "110479",
    "end": "113280"
  },
  {
    "text": "inspect running applications as well as",
    "start": "113280",
    "end": "115600"
  },
  {
    "text": "data that they're generating",
    "start": "115600",
    "end": "118479"
  },
  {
    "text": "and this is the high level view as i",
    "start": "118479",
    "end": "120719"
  },
  {
    "text": "said we'll see that the subsystems under",
    "start": "120719",
    "end": "123520"
  },
  {
    "text": "the infrastructure and the ones that",
    "start": "123520",
    "end": "125280"
  },
  {
    "text": "ebpf relies on",
    "start": "125280",
    "end": "127200"
  },
  {
    "text": "are not just limited to these you can",
    "start": "127200",
    "end": "128959"
  },
  {
    "text": "hook the entire operating system modify",
    "start": "128959",
    "end": "131280"
  },
  {
    "text": "how the operating system works so",
    "start": "131280",
    "end": "133840"
  },
  {
    "text": "through this kernel infrastructure",
    "start": "133840",
    "end": "135680"
  },
  {
    "text": "there's really an unlimited set of power",
    "start": "135680",
    "end": "138239"
  },
  {
    "text": "that both legitimate tools can get if",
    "start": "138239",
    "end": "140239"
  },
  {
    "text": "they want to monitor system activity as",
    "start": "140239",
    "end": "142319"
  },
  {
    "text": "well as that same unlimited set of power",
    "start": "142319",
    "end": "144560"
  },
  {
    "text": "for malware",
    "start": "144560",
    "end": "146160"
  },
  {
    "text": "if you've never used ebpf or you've",
    "start": "146160",
    "end": "148400"
  },
  {
    "text": "never seen the output of the utilities",
    "start": "148400",
    "end": "150080"
  },
  {
    "text": "or interacted with it yourself i would",
    "start": "150080",
    "end": "152080"
  },
  {
    "text": "definitely recommend the toolset that",
    "start": "152080",
    "end": "153840"
  },
  {
    "text": "you're seeing described on the slide",
    "start": "153840",
    "end": "155519"
  },
  {
    "text": "here this is part of the bpf trace suite",
    "start": "155519",
    "end": "158319"
  },
  {
    "text": "of tools they're all open source",
    "start": "158319",
    "end": "160560"
  },
  {
    "text": "they're available on github you can also",
    "start": "160560",
    "end": "162640"
  },
  {
    "text": "install them very easily on really any",
    "start": "162640",
    "end": "164800"
  },
  {
    "text": "linux distribution but as you see",
    "start": "164800",
    "end": "166959"
  },
  {
    "text": "there's separate tools to examine each",
    "start": "166959",
    "end": "168879"
  },
  {
    "text": "part of this stack so if you want to see",
    "start": "168879",
    "end": "170879"
  },
  {
    "text": "what it looks like to monitor certain",
    "start": "170879",
    "end": "172319"
  },
  {
    "text": "parts of the network stack or the",
    "start": "172319",
    "end": "173680"
  },
  {
    "text": "scheduler system call table whatever it",
    "start": "173680",
    "end": "176000"
  },
  {
    "text": "might be",
    "start": "176000",
    "end": "176959"
  },
  {
    "text": "before you deep dive jump into the",
    "start": "176959",
    "end": "178879"
  },
  {
    "text": "forensics aspects i would spend some",
    "start": "178879",
    "end": "180959"
  },
  {
    "text": "time with some of these tools to get an",
    "start": "180959",
    "end": "182560"
  },
  {
    "text": "idea of what's really happening on the",
    "start": "182560",
    "end": "185040"
  },
  {
    "text": "system",
    "start": "185040",
    "end": "187120"
  },
  {
    "text": "what you're seeing on this slide is some",
    "start": "187120",
    "end": "189040"
  },
  {
    "text": "example output from those utilities that",
    "start": "189040",
    "end": "191280"
  },
  {
    "text": "are part of bpf trace",
    "start": "191280",
    "end": "193760"
  },
  {
    "text": "on the top left you see open snoop this",
    "start": "193760",
    "end": "196080"
  },
  {
    "text": "is going to tell you every process",
    "start": "196080",
    "end": "198080"
  },
  {
    "text": "that's running and when it accesses a",
    "start": "198080",
    "end": "199920"
  },
  {
    "text": "file it's going to give you the full",
    "start": "199920",
    "end": "201680"
  },
  {
    "text": "path to that file",
    "start": "201680",
    "end": "203200"
  },
  {
    "text": "in the top right you see bash read line",
    "start": "203200",
    "end": "205440"
  },
  {
    "text": "this is going to",
    "start": "205440",
    "end": "207040"
  },
  {
    "text": "inspect every bash process that runs on",
    "start": "207040",
    "end": "209280"
  },
  {
    "text": "a system and tell you all of the",
    "start": "209280",
    "end": "210799"
  },
  {
    "text": "commands that were typed in",
    "start": "210799",
    "end": "212720"
  },
  {
    "text": "in the bottom left you see exec snoop",
    "start": "212720",
    "end": "215120"
  },
  {
    "text": "this is going to monitor the system call",
    "start": "215120",
    "end": "217360"
  },
  {
    "text": "table for all of the system calls to",
    "start": "217360",
    "end": "219840"
  },
  {
    "text": "execute processes and then for each",
    "start": "219840",
    "end": "222080"
  },
  {
    "text": "process it's going to give you the name",
    "start": "222080",
    "end": "223680"
  },
  {
    "text": "as well as all of the command line",
    "start": "223680",
    "end": "225280"
  },
  {
    "text": "arguments",
    "start": "225280",
    "end": "226480"
  },
  {
    "text": "and then if you look at the bottom right",
    "start": "226480",
    "end": "228319"
  },
  {
    "text": "you see the entire source code to",
    "start": "228319",
    "end": "231000"
  },
  {
    "text": "execsnoop.bt",
    "start": "231000",
    "end": "232640"
  },
  {
    "text": "and what this is doing in its begin",
    "start": "232640",
    "end": "234560"
  },
  {
    "text": "function it's printing out the headers",
    "start": "234560",
    "end": "236640"
  },
  {
    "text": "and then within the function that it",
    "start": "236640",
    "end": "239599"
  },
  {
    "text": "registers its trace point which uh we'll",
    "start": "239599",
    "end": "241519"
  },
  {
    "text": "talk about those more later but in this",
    "start": "241519",
    "end": "243120"
  },
  {
    "text": "case it's a trace point to monitor the",
    "start": "243120",
    "end": "244959"
  },
  {
    "text": "system call table and it wants to",
    "start": "244959",
    "end": "247200"
  },
  {
    "text": "monitor any function that is part of",
    "start": "247200",
    "end": "249599"
  },
  {
    "text": "executing a program",
    "start": "249599",
    "end": "251439"
  },
  {
    "text": "and then you can see in the source code",
    "start": "251439",
    "end": "253040"
  },
  {
    "text": "for that function it's going to print",
    "start": "253040",
    "end": "255120"
  },
  {
    "text": "out the time the program was running the",
    "start": "255120",
    "end": "257359"
  },
  {
    "text": "pid and then also all of the command",
    "start": "257359",
    "end": "259600"
  },
  {
    "text": "line arguments like we saw on the left",
    "start": "259600",
    "end": "263440"
  },
  {
    "text": "to get a bpf program running there's a",
    "start": "263440",
    "end": "265840"
  },
  {
    "text": "few steps",
    "start": "265840",
    "end": "267199"
  },
  {
    "text": "one is you can either write in the bpf",
    "start": "267199",
    "end": "269759"
  },
  {
    "text": "trace sort of wrapper language like you",
    "start": "269759",
    "end": "271680"
  },
  {
    "text": "saw in the last slide obviously that's",
    "start": "271680",
    "end": "273759"
  },
  {
    "text": "very powerful but it doesn't expose",
    "start": "273759",
    "end": "275759"
  },
  {
    "text": "absolutely everything if you want to",
    "start": "275759",
    "end": "277680"
  },
  {
    "text": "deal with ebpf at the raw level then",
    "start": "277680",
    "end": "280320"
  },
  {
    "text": "you're going to write in c and call the",
    "start": "280320",
    "end": "282320"
  },
  {
    "text": "apis and so on whichever route you",
    "start": "282320",
    "end": "284800"
  },
  {
    "text": "choose you're eventually going to need",
    "start": "284800",
    "end": "286080"
  },
  {
    "text": "to compile that code and generate the",
    "start": "286080",
    "end": "288240"
  },
  {
    "text": "bpf bytecode this is what's actually",
    "start": "288240",
    "end": "290639"
  },
  {
    "text": "sent to the kernel to run",
    "start": "290639",
    "end": "292800"
  },
  {
    "text": "before the kernel allows it to run it",
    "start": "292800",
    "end": "295040"
  },
  {
    "text": "needs to pass through the verifier this",
    "start": "295040",
    "end": "297360"
  },
  {
    "text": "is going to make sure that the code does",
    "start": "297360",
    "end": "299280"
  },
  {
    "text": "not perform any operations it shouldn't",
    "start": "299280",
    "end": "301680"
  },
  {
    "text": "or try to read memory it shouldn't and",
    "start": "301680",
    "end": "303280"
  },
  {
    "text": "so on and it's only if that verifier",
    "start": "303280",
    "end": "306160"
  },
  {
    "text": "accepts the code is it allowed to run",
    "start": "306160",
    "end": "309120"
  },
  {
    "text": "if code does pass the verifier then it's",
    "start": "309120",
    "end": "311440"
  },
  {
    "text": "going to be sent to the full bpf engine",
    "start": "311440",
    "end": "314000"
  },
  {
    "text": "this is going to evaluate that code",
    "start": "314000",
    "end": "316320"
  },
  {
    "text": "execute that code gather whatever data",
    "start": "316320",
    "end": "318800"
  },
  {
    "text": "is trying to gather",
    "start": "318800",
    "end": "320160"
  },
  {
    "text": "and it can do a lot inside the engine",
    "start": "320160",
    "end": "322240"
  },
  {
    "text": "itself but then for many of the features",
    "start": "322240",
    "end": "324800"
  },
  {
    "text": "especially the ones we're interested in",
    "start": "324800",
    "end": "326639"
  },
  {
    "text": "it has to rely on other subsystems to do",
    "start": "326639",
    "end": "329360"
  },
  {
    "text": "the work",
    "start": "329360",
    "end": "330320"
  },
  {
    "text": "these are subsystems that existed before",
    "start": "330320",
    "end": "332639"
  },
  {
    "text": "ebpf was a thing or before it became so",
    "start": "332639",
    "end": "335199"
  },
  {
    "text": "popular",
    "start": "335199",
    "end": "336240"
  },
  {
    "text": "and they provide capabilities for",
    "start": "336240",
    "end": "338960"
  },
  {
    "text": "hooking kernel functions and other",
    "start": "338960",
    "end": "340639"
  },
  {
    "text": "specific things and so again bpf doesn't",
    "start": "340639",
    "end": "343680"
  },
  {
    "text": "want to reinvent the wheel and it just",
    "start": "343680",
    "end": "345440"
  },
  {
    "text": "relies on them",
    "start": "345440",
    "end": "346880"
  },
  {
    "text": "what this means for us as forensics",
    "start": "346880",
    "end": "348960"
  },
  {
    "text": "analysts is",
    "start": "348960",
    "end": "350320"
  },
  {
    "text": "it's not just enough to examine the bpf",
    "start": "350320",
    "end": "353120"
  },
  {
    "text": "subsystem itself but we also need to",
    "start": "353120",
    "end": "355840"
  },
  {
    "text": "have memory forensics techniques that",
    "start": "355840",
    "end": "358080"
  },
  {
    "text": "can examine all the other subsystems as",
    "start": "358080",
    "end": "360560"
  },
  {
    "text": "well so the k probes the trace points",
    "start": "360560",
    "end": "362479"
  },
  {
    "text": "and so on that way we can get a complete",
    "start": "362479",
    "end": "365039"
  },
  {
    "text": "picture of what was going on at this is",
    "start": "365039",
    "end": "368319"
  },
  {
    "text": "that way we can get a complete picture",
    "start": "368319",
    "end": "370080"
  },
  {
    "text": "of what was going on on the system and",
    "start": "370080",
    "end": "372080"
  },
  {
    "text": "we can make sure that we're doing",
    "start": "372080",
    "end": "373360"
  },
  {
    "text": "thorough investigations",
    "start": "373360",
    "end": "376638"
  },
  {
    "text": "because of how powerful ebpf is and the",
    "start": "378319",
    "end": "381199"
  },
  {
    "text": "capabilities that it gives to system",
    "start": "381199",
    "end": "382800"
  },
  {
    "text": "administrators and developers and just",
    "start": "382800",
    "end": "385199"
  },
  {
    "text": "anyone who wants to monitor a system or",
    "start": "385199",
    "end": "387039"
  },
  {
    "text": "troubleshoot a system",
    "start": "387039",
    "end": "388639"
  },
  {
    "text": "it sees wide wide use in production this",
    "start": "388639",
    "end": "391360"
  },
  {
    "text": "is especially true of companies that",
    "start": "391360",
    "end": "394000"
  },
  {
    "text": "heavily work in the cloud obviously",
    "start": "394000",
    "end": "396000"
  },
  {
    "text": "heavily work with linux systems and",
    "start": "396000",
    "end": "398319"
  },
  {
    "text": "there's also a lot of really cool public",
    "start": "398319",
    "end": "400560"
  },
  {
    "text": "documentation",
    "start": "400560",
    "end": "401919"
  },
  {
    "text": "and talks that these companies have",
    "start": "401919",
    "end": "403680"
  },
  {
    "text": "given that explain what they're doing",
    "start": "403680",
    "end": "405520"
  },
  {
    "text": "with ebpf so if you want to learn more",
    "start": "405520",
    "end": "407680"
  },
  {
    "text": "about ebpf see how it really looks in",
    "start": "407680",
    "end": "409680"
  },
  {
    "text": "production i would highly recommend",
    "start": "409680",
    "end": "411599"
  },
  {
    "text": "following the resources at this link for",
    "start": "411599",
    "end": "414160"
  },
  {
    "text": "netflix google and facebook i've linked",
    "start": "414160",
    "end": "416240"
  },
  {
    "text": "to some of their most in thorough and",
    "start": "416240",
    "end": "418400"
  },
  {
    "text": "in-depth uh documentation that they have",
    "start": "418400",
    "end": "421120"
  },
  {
    "text": "for how they use ebpf and then i would",
    "start": "421120",
    "end": "423520"
  },
  {
    "text": "also highly recommend checking out the",
    "start": "423520",
    "end": "425360"
  },
  {
    "text": "talks from the ebpf summit last year all",
    "start": "425360",
    "end": "428720"
  },
  {
    "text": "these other companies spoke there the",
    "start": "428720",
    "end": "430720"
  },
  {
    "text": "talks are not long they're like 5 to 15",
    "start": "430720",
    "end": "432960"
  },
  {
    "text": "minutes each but you have their actual",
    "start": "432960",
    "end": "435039"
  },
  {
    "text": "engineers speaking talking about how",
    "start": "435039",
    "end": "436720"
  },
  {
    "text": "they use it in production and the value",
    "start": "436720",
    "end": "439199"
  },
  {
    "text": "they get from it and so again these",
    "start": "439199",
    "end": "441360"
  },
  {
    "text": "resources are very nice if you want to",
    "start": "441360",
    "end": "443039"
  },
  {
    "text": "see what eppf allows enterprises to do",
    "start": "443039",
    "end": "446479"
  },
  {
    "text": "large companies to do and how you might",
    "start": "446479",
    "end": "448720"
  },
  {
    "text": "encounter it being used in your",
    "start": "448720",
    "end": "450240"
  },
  {
    "text": "investigations",
    "start": "450240",
    "end": "452800"
  },
  {
    "text": "before we wanted to really deep dive",
    "start": "452800",
    "end": "454560"
  },
  {
    "text": "this infrastructure though we first",
    "start": "454560",
    "end": "456080"
  },
  {
    "text": "wanted to see how prevalent it was",
    "start": "456080",
    "end": "457840"
  },
  {
    "text": "across normal distributions we knew that",
    "start": "457840",
    "end": "460560"
  },
  {
    "text": "big companies were relying on it it was",
    "start": "460560",
    "end": "462400"
  },
  {
    "text": "very popular in as i mentioned kind of",
    "start": "462400",
    "end": "464960"
  },
  {
    "text": "tech heavy spaces where there's",
    "start": "464960",
    "end": "466319"
  },
  {
    "text": "developers or cloud specific companies",
    "start": "466319",
    "end": "469120"
  },
  {
    "text": "but we wanted to see if you just spun up",
    "start": "469120",
    "end": "471520"
  },
  {
    "text": "a cloud instance or if you just",
    "start": "471520",
    "end": "473039"
  },
  {
    "text": "installed regular linux distributions in",
    "start": "473039",
    "end": "475039"
  },
  {
    "text": "your corporate environment what were the",
    "start": "475039",
    "end": "477120"
  },
  {
    "text": "odds of you having",
    "start": "477120",
    "end": "478879"
  },
  {
    "text": "these",
    "start": "478879",
    "end": "479919"
  },
  {
    "text": "subsystems enabled that fact that bp",
    "start": "479919",
    "end": "482400"
  },
  {
    "text": "ebpf code could run right away or kernel",
    "start": "482400",
    "end": "485680"
  },
  {
    "text": "modules could call into the subsystems",
    "start": "485680",
    "end": "487759"
  },
  {
    "text": "on their own how many of those default",
    "start": "487759",
    "end": "489919"
  },
  {
    "text": "kernels had this",
    "start": "489919",
    "end": "491440"
  },
  {
    "text": "information just available and the",
    "start": "491440",
    "end": "493120"
  },
  {
    "text": "subsystems available without any",
    "start": "493120",
    "end": "495199"
  },
  {
    "text": "modifications",
    "start": "495199",
    "end": "496720"
  },
  {
    "text": "so to do this we relied on the database",
    "start": "496720",
    "end": "499520"
  },
  {
    "text": "of kernels that engineers at velexity",
    "start": "499520",
    "end": "502160"
  },
  {
    "text": "maintain",
    "start": "502160",
    "end": "503280"
  },
  {
    "text": "these kernels go back years and years",
    "start": "503280",
    "end": "505120"
  },
  {
    "text": "for every major distribution",
    "start": "505120",
    "end": "507360"
  },
  {
    "text": "and it's not just a big folder where all",
    "start": "507360",
    "end": "509440"
  },
  {
    "text": "the kernels are downloaded all of the",
    "start": "509440",
    "end": "511599"
  },
  {
    "text": "metadata is pulled from these kernels",
    "start": "511599",
    "end": "513680"
  },
  {
    "text": "and put into a database there's then a",
    "start": "513680",
    "end": "516240"
  },
  {
    "text": "really nice api built around querying",
    "start": "516240",
    "end": "518399"
  },
  {
    "text": "out the specific metadata",
    "start": "518399",
    "end": "520560"
  },
  {
    "text": "and so what we wanted to use was the",
    "start": "520560",
    "end": "523279"
  },
  {
    "text": "configuration options because as we'll",
    "start": "523279",
    "end": "525200"
  },
  {
    "text": "talk about on the next slide to figure",
    "start": "525200",
    "end": "527360"
  },
  {
    "text": "out if these subsystems and all of this",
    "start": "527360",
    "end": "529360"
  },
  {
    "text": "tracing infrastructure is enabled on a",
    "start": "529360",
    "end": "531680"
  },
  {
    "text": "specific kernel you have to know what",
    "start": "531680",
    "end": "533519"
  },
  {
    "text": "its configuration options are",
    "start": "533519",
    "end": "536080"
  },
  {
    "text": "and at the time of generating these",
    "start": "536080",
    "end": "537760"
  },
  {
    "text": "statistics the database held about",
    "start": "537760",
    "end": "539519"
  },
  {
    "text": "fifteen thousand kernels",
    "start": "539519",
    "end": "541920"
  },
  {
    "text": "so to start we consulted the bpf trace",
    "start": "541920",
    "end": "544640"
  },
  {
    "text": "documentation this list specifically",
    "start": "544640",
    "end": "547120"
  },
  {
    "text": "which kernel configuration options you",
    "start": "547120",
    "end": "549120"
  },
  {
    "text": "need for the features to be present and",
    "start": "549120",
    "end": "551600"
  },
  {
    "text": "it also says that the kernel version has",
    "start": "551600",
    "end": "553519"
  },
  {
    "text": "to be at least 4.9",
    "start": "553519",
    "end": "555519"
  },
  {
    "text": "so the first thing we did was filter to",
    "start": "555519",
    "end": "557360"
  },
  {
    "text": "just the kernels that were at least 4.9",
    "start": "557360",
    "end": "559519"
  },
  {
    "text": "in our set this put us at around 5 400",
    "start": "559519",
    "end": "562560"
  },
  {
    "text": "kernels",
    "start": "562560",
    "end": "563519"
  },
  {
    "text": "we then wrote a script that queried the",
    "start": "563519",
    "end": "565519"
  },
  {
    "text": "api to figure out which kernels had all",
    "start": "565519",
    "end": "568320"
  },
  {
    "text": "of the options present and initially we",
    "start": "568320",
    "end": "570800"
  },
  {
    "text": "saw that about 83 percent of the kernels",
    "start": "570800",
    "end": "573600"
  },
  {
    "text": "had all of the tracing features enabled",
    "start": "573600",
    "end": "575760"
  },
  {
    "text": "but the results were really confusing",
    "start": "575760",
    "end": "577600"
  },
  {
    "text": "because they were across distros and",
    "start": "577600",
    "end": "579600"
  },
  {
    "text": "they seemed",
    "start": "579600",
    "end": "580640"
  },
  {
    "text": "the kernels that didn't have all the",
    "start": "580640",
    "end": "582080"
  },
  {
    "text": "features were across distros and it",
    "start": "582080",
    "end": "583680"
  },
  {
    "text": "seemed very",
    "start": "583680",
    "end": "584880"
  },
  {
    "text": "focused on 4.9 and 4.10 kernels so we",
    "start": "584880",
    "end": "588160"
  },
  {
    "text": "looked at which options were actually",
    "start": "588160",
    "end": "589839"
  },
  {
    "text": "missing from these kernels the ones that",
    "start": "589839",
    "end": "591839"
  },
  {
    "text": "were needed and we saw that for",
    "start": "591839",
    "end": "594000"
  },
  {
    "text": "basically all of them it was the same",
    "start": "594000",
    "end": "595600"
  },
  {
    "text": "two options we then consulted google a",
    "start": "595600",
    "end": "597839"
  },
  {
    "text": "bit and saw that those options weren't",
    "start": "597839",
    "end": "599440"
  },
  {
    "text": "actually added until about 4.11",
    "start": "599440",
    "end": "602399"
  },
  {
    "text": "so that makes sense those options can't",
    "start": "602399",
    "end": "603920"
  },
  {
    "text": "be there in four nine and four ten so we",
    "start": "603920",
    "end": "606560"
  },
  {
    "text": "updated our statistics script with that",
    "start": "606560",
    "end": "608959"
  },
  {
    "text": "workaround and then essentially all",
    "start": "608959",
    "end": "611040"
  },
  {
    "text": "kernels except for the ones that were",
    "start": "611040",
    "end": "612880"
  },
  {
    "text": "this ubuntu kvm variant that you",
    "start": "612880",
    "end": "615200"
  },
  {
    "text": "wouldn't see in production anyway all",
    "start": "615200",
    "end": "616880"
  },
  {
    "text": "the other kernels had all the options",
    "start": "616880",
    "end": "618959"
  },
  {
    "text": "needed for the tracing and for ebpf",
    "start": "618959",
    "end": "621839"
  },
  {
    "text": "and so what this showed is that",
    "start": "621839",
    "end": "623360"
  },
  {
    "text": "essentially any kernel that you're going",
    "start": "623360",
    "end": "625040"
  },
  {
    "text": "to encounter during your investigations",
    "start": "625040",
    "end": "627360"
  },
  {
    "text": "will have these features present which",
    "start": "627360",
    "end": "629040"
  },
  {
    "text": "means they can be abused by malware",
    "start": "629040",
    "end": "633560"
  },
  {
    "text": "so what we're going to do now is walk",
    "start": "633920",
    "end": "635680"
  },
  {
    "text": "you through all of these subsystems",
    "start": "635680",
    "end": "637839"
  },
  {
    "text": "we're going to explain them briefly show",
    "start": "637839",
    "end": "640160"
  },
  {
    "text": "you some code that we use from our proof",
    "start": "640160",
    "end": "642079"
  },
  {
    "text": "of concept for each proof of concept we",
    "start": "642079",
    "end": "644560"
  },
  {
    "text": "infected a virtual machine with it took",
    "start": "644560",
    "end": "647040"
  },
  {
    "text": "so that would give us a memory sample",
    "start": "647040",
    "end": "649040"
  },
  {
    "text": "and then we show on the following slide",
    "start": "649040",
    "end": "651200"
  },
  {
    "text": "the output of the plug-in that we wrote",
    "start": "651200",
    "end": "653040"
  },
  {
    "text": "to detect this behavior if you want all",
    "start": "653040",
    "end": "655440"
  },
  {
    "text": "the details all the kernel internals as",
    "start": "655440",
    "end": "657600"
  },
  {
    "text": "much",
    "start": "657600",
    "end": "658480"
  },
  {
    "text": "technical details we could possibly",
    "start": "658480",
    "end": "660399"
  },
  {
    "text": "explain all of that is in our technical",
    "start": "660399",
    "end": "662640"
  },
  {
    "text": "paper that accompanied our talk so",
    "start": "662640",
    "end": "664640"
  },
  {
    "text": "please read that and then obviously let",
    "start": "664640",
    "end": "666480"
  },
  {
    "text": "us know if you have any questions",
    "start": "666480",
    "end": "668640"
  },
  {
    "text": "for the first subsystem we looked at it",
    "start": "668640",
    "end": "670560"
  },
  {
    "text": "was f trace this is used for tracing",
    "start": "670560",
    "end": "673600"
  },
  {
    "text": "functions as well as events",
    "start": "673600",
    "end": "675680"
  },
  {
    "text": "you can see with our proof of concept we",
    "start": "675680",
    "end": "677680"
  },
  {
    "text": "configured it to hook the sys clone and",
    "start": "677680",
    "end": "680160"
  },
  {
    "text": "the sys exec v system calls and then the",
    "start": "680160",
    "end": "682959"
  },
  {
    "text": "proof of concept is going to set filters",
    "start": "682959",
    "end": "685600"
  },
  {
    "text": "on the addresses of where those function",
    "start": "685600",
    "end": "687760"
  },
  {
    "text": "starts and then it's going to register",
    "start": "687760",
    "end": "690000"
  },
  {
    "text": "the ftrace handlers for them",
    "start": "690000",
    "end": "693839"
  },
  {
    "text": "you can see here this is the output of",
    "start": "694720",
    "end": "696640"
  },
  {
    "text": "our new linux f trace plugin and it",
    "start": "696640",
    "end": "699279"
  },
  {
    "text": "correctly identifies that there are",
    "start": "699279",
    "end": "701279"
  },
  {
    "text": "traces for the exec ve and the clone",
    "start": "701279",
    "end": "703760"
  },
  {
    "text": "system calls and then the plugin also",
    "start": "703760",
    "end": "706399"
  },
  {
    "text": "correctly identifies where those traces",
    "start": "706399",
    "end": "709200"
  },
  {
    "text": "are pointing to or what's the tr the",
    "start": "709200",
    "end": "711600"
  },
  {
    "text": "hooking code that is the f trace hook",
    "start": "711600",
    "end": "714560"
  },
  {
    "text": "kernel module so that's our proof of",
    "start": "714560",
    "end": "716079"
  },
  {
    "text": "concept and then all of the hooks go",
    "start": "716079",
    "end": "718480"
  },
  {
    "text": "through the thunk function which then",
    "start": "718480",
    "end": "720160"
  },
  {
    "text": "redirects them out to the appropriate",
    "start": "720160",
    "end": "722000"
  },
  {
    "text": "handler so again",
    "start": "722000",
    "end": "724639"
  },
  {
    "text": "before this plugin there was no way to",
    "start": "724639",
    "end": "726480"
  },
  {
    "text": "directly detect this through memory",
    "start": "726480",
    "end": "728240"
  },
  {
    "text": "forensics but now by just running the",
    "start": "728240",
    "end": "730079"
  },
  {
    "text": "plugin you can very easily see if any",
    "start": "730079",
    "end": "732720"
  },
  {
    "text": "malware is a is abusing this feature",
    "start": "732720",
    "end": "736959"
  },
  {
    "text": "after that we then looked at the",
    "start": "737279",
    "end": "739120"
  },
  {
    "text": "tracepoint subsystem",
    "start": "739120",
    "end": "740880"
  },
  {
    "text": "this also allows for hooking functions",
    "start": "740880",
    "end": "743120"
  },
  {
    "text": "in the kernel the only limitation is",
    "start": "743120",
    "end": "745600"
  },
  {
    "text": "that you can only use this to hook",
    "start": "745600",
    "end": "747360"
  },
  {
    "text": "functions that define trace points at",
    "start": "747360",
    "end": "749839"
  },
  {
    "text": "compile time but in practice that's not",
    "start": "749839",
    "end": "752480"
  },
  {
    "text": "too much of a limitation all the",
    "start": "752480",
    "end": "754000"
  },
  {
    "text": "functions that seemed interesting and",
    "start": "754000",
    "end": "755680"
  },
  {
    "text": "that malware would hook seem to have",
    "start": "755680",
    "end": "757519"
  },
  {
    "text": "trace points on our test systems all of",
    "start": "757519",
    "end": "760160"
  },
  {
    "text": "them had at least a thousand trace",
    "start": "760160",
    "end": "761760"
  },
  {
    "text": "points defined so",
    "start": "761760",
    "end": "763680"
  },
  {
    "text": "again it has to be a compile time thing",
    "start": "763680",
    "end": "765519"
  },
  {
    "text": "but in practice it's not a huge",
    "start": "765519",
    "end": "767360"
  },
  {
    "text": "limitation you can",
    "start": "767360",
    "end": "769120"
  },
  {
    "text": "find trace points for the functions that",
    "start": "769120",
    "end": "770959"
  },
  {
    "text": "you actually want to hook and that are",
    "start": "770959",
    "end": "772560"
  },
  {
    "text": "actually of interest to you",
    "start": "772560",
    "end": "775680"
  },
  {
    "text": "for our proof of concept we configured",
    "start": "775839",
    "end": "777839"
  },
  {
    "text": "it to hook the paid the mm page free and",
    "start": "777839",
    "end": "781200"
  },
  {
    "text": "mm page alec functions",
    "start": "781200",
    "end": "783440"
  },
  {
    "text": "our callback functions for those so",
    "start": "783440",
    "end": "785680"
  },
  {
    "text": "those are the ones that will get called",
    "start": "785680",
    "end": "787120"
  },
  {
    "text": "every time the hook is activated that",
    "start": "787120",
    "end": "789440"
  },
  {
    "text": "was probe mm page free and then probe mm",
    "start": "789440",
    "end": "792480"
  },
  {
    "text": "page alec",
    "start": "792480",
    "end": "793760"
  },
  {
    "text": "the way the proof of concept works is it",
    "start": "793760",
    "end": "795920"
  },
  {
    "text": "uses the for each kernel trace point",
    "start": "795920",
    "end": "798320"
  },
  {
    "text": "function that's going to call",
    "start": "798320",
    "end": "801360"
  },
  {
    "text": "whichever callback you register for each",
    "start": "801360",
    "end": "803279"
  },
  {
    "text": "tracepoint and allow you to find the",
    "start": "803279",
    "end": "804959"
  },
  {
    "text": "actual address",
    "start": "804959",
    "end": "806320"
  },
  {
    "text": "so the proof of concept will do that for",
    "start": "806320",
    "end": "808320"
  },
  {
    "text": "whichever functions you ask it to in the",
    "start": "808320",
    "end": "810560"
  },
  {
    "text": "interests array",
    "start": "810560",
    "end": "812000"
  },
  {
    "text": "and then once it's found the actual",
    "start": "812000",
    "end": "813600"
  },
  {
    "text": "trace point structures it will attach",
    "start": "813600",
    "end": "817040"
  },
  {
    "text": "it will attach a probe to it so that",
    "start": "817040",
    "end": "819199"
  },
  {
    "text": "your callback is called whenever that",
    "start": "819199",
    "end": "820880"
  },
  {
    "text": "function is called",
    "start": "820880",
    "end": "823839"
  },
  {
    "text": "so this is the output of linux trace",
    "start": "824240",
    "end": "826399"
  },
  {
    "text": "points against rvm where that proof of",
    "start": "826399",
    "end": "828959"
  },
  {
    "text": "concept was active you can see that the",
    "start": "828959",
    "end": "831360"
  },
  {
    "text": "trace points for mm page free and mm",
    "start": "831360",
    "end": "833920"
  },
  {
    "text": "page alec were correctly found",
    "start": "833920",
    "end": "836639"
  },
  {
    "text": "the handlers were also correctly",
    "start": "836639",
    "end": "838720"
  },
  {
    "text": "identified the my module was the name of",
    "start": "838720",
    "end": "841440"
  },
  {
    "text": "the proof of concept module that we",
    "start": "841440",
    "end": "844000"
  },
  {
    "text": "created and then you can see both of our",
    "start": "844000",
    "end": "846160"
  },
  {
    "text": "probe functions were found as the ones",
    "start": "846160",
    "end": "847920"
  },
  {
    "text": "that were handling the callback again",
    "start": "847920",
    "end": "850160"
  },
  {
    "text": "those are going to be called every time",
    "start": "850160",
    "end": "851600"
  },
  {
    "text": "the particular function is called",
    "start": "851600",
    "end": "856120"
  },
  {
    "text": "we next looked at the k-probe interface",
    "start": "856480",
    "end": "859360"
  },
  {
    "text": "this also allows for hooking functions",
    "start": "859360",
    "end": "862160"
  },
  {
    "text": "you can specify the function to be",
    "start": "862160",
    "end": "863920"
  },
  {
    "text": "hooked either as the name of the",
    "start": "863920",
    "end": "865600"
  },
  {
    "text": "function or the address of where it is",
    "start": "865600",
    "end": "868399"
  },
  {
    "text": "for monitoring the function you have",
    "start": "868399",
    "end": "870240"
  },
  {
    "text": "three callbacks you have the pre-handler",
    "start": "870240",
    "end": "872480"
  },
  {
    "text": "which runs before the first instruction",
    "start": "872480",
    "end": "875040"
  },
  {
    "text": "this is really the most useful one",
    "start": "875040",
    "end": "876560"
  },
  {
    "text": "especially if you're going to try to",
    "start": "876560",
    "end": "878560"
  },
  {
    "text": "analyze root kits or if you're writing a",
    "start": "878560",
    "end": "880160"
  },
  {
    "text": "root kit yourself because this runs",
    "start": "880160",
    "end": "882800"
  },
  {
    "text": "before the first instruction",
    "start": "882800",
    "end": "884399"
  },
  {
    "text": "which means that you can look at the",
    "start": "884399",
    "end": "886160"
  },
  {
    "text": "call stack you can also look at the",
    "start": "886160",
    "end": "887920"
  },
  {
    "text": "parameters that were passed in and",
    "start": "887920",
    "end": "890399"
  },
  {
    "text": "really gather everything that you need",
    "start": "890399",
    "end": "892160"
  },
  {
    "text": "about that function call",
    "start": "892160",
    "end": "894000"
  },
  {
    "text": "the post handler runs after the first",
    "start": "894000",
    "end": "896480"
  },
  {
    "text": "instruction runs it's not at the end of",
    "start": "896480",
    "end": "898560"
  },
  {
    "text": "the function so it's a pretty special",
    "start": "898560",
    "end": "901040"
  },
  {
    "text": "case it's useful for debugging and",
    "start": "901040",
    "end": "902480"
  },
  {
    "text": "things but not it really doesn't give a",
    "start": "902480",
    "end": "904399"
  },
  {
    "text": "lot of value to malware and then for the",
    "start": "904399",
    "end": "906639"
  },
  {
    "text": "fault handler this is where if that",
    "start": "906639",
    "end": "909120"
  },
  {
    "text": "first instruction faults your fault",
    "start": "909120",
    "end": "911360"
  },
  {
    "text": "handler gets to run before the regular",
    "start": "911360",
    "end": "913199"
  },
  {
    "text": "operating system takes over",
    "start": "913199",
    "end": "915040"
  },
  {
    "text": "again not extremely useful for malware",
    "start": "915040",
    "end": "917519"
  },
  {
    "text": "but",
    "start": "917519",
    "end": "919360"
  },
  {
    "text": "it is available to code that's",
    "start": "919360",
    "end": "921360"
  },
  {
    "text": "registering a k probe",
    "start": "921360",
    "end": "923199"
  },
  {
    "text": "so as you can see in our proof of",
    "start": "923199",
    "end": "924720"
  },
  {
    "text": "concept we're looking for proxis open we",
    "start": "924720",
    "end": "927120"
  },
  {
    "text": "call register k probe with our filled",
    "start": "927120",
    "end": "929040"
  },
  {
    "text": "out structure",
    "start": "929040",
    "end": "930399"
  },
  {
    "text": "and then this is what the output looks",
    "start": "930399",
    "end": "932079"
  },
  {
    "text": "like in our new plug-in we correctly",
    "start": "932079",
    "end": "934560"
  },
  {
    "text": "identify that proxies open is the",
    "start": "934560",
    "end": "936800"
  },
  {
    "text": "function being traced by the k-probe and",
    "start": "936800",
    "end": "939199"
  },
  {
    "text": "then in this case we're looking at the",
    "start": "939199",
    "end": "940880"
  },
  {
    "text": "pre-handler symbol which is handler pre",
    "start": "940880",
    "end": "943839"
  },
  {
    "text": "the plug-in does print the post and the",
    "start": "943839",
    "end": "945920"
  },
  {
    "text": "fault handlers but again they",
    "start": "945920",
    "end": "948240"
  },
  {
    "text": "not very interesting in this example and",
    "start": "948240",
    "end": "950560"
  },
  {
    "text": "they made the the output way too wide so",
    "start": "950560",
    "end": "952720"
  },
  {
    "text": "i cut them out but if you're doing your",
    "start": "952720",
    "end": "954639"
  },
  {
    "text": "investigation fully you'll see all of",
    "start": "954639",
    "end": "957440"
  },
  {
    "text": "those columns in the plug-in output",
    "start": "957440",
    "end": "961360"
  },
  {
    "text": "the next thing we looked at was this",
    "start": "961920",
    "end": "963440"
  },
  {
    "text": "userland interface decay probe this goes",
    "start": "963440",
    "end": "966240"
  },
  {
    "text": "through the tracing features that get",
    "start": "966240",
    "end": "968079"
  },
  {
    "text": "exposed under sys when you have the",
    "start": "968079",
    "end": "970000"
  },
  {
    "text": "kernel options enabled in this case we",
    "start": "970000",
    "end": "972639"
  },
  {
    "text": "are creating a trace probe for the sys",
    "start": "972639",
    "end": "975199"
  },
  {
    "text": "open function so there's a few things to",
    "start": "975199",
    "end": "977440"
  },
  {
    "text": "look at here one as you can see the name",
    "start": "977440",
    "end": "979759"
  },
  {
    "text": "of our probe is test open the function",
    "start": "979759",
    "end": "982639"
  },
  {
    "text": "being hooked is do sys open which is",
    "start": "982639",
    "end": "985120"
  },
  {
    "text": "part of the control flow that'll be",
    "start": "985120",
    "end": "986880"
  },
  {
    "text": "called anytime the open system call is",
    "start": "986880",
    "end": "989680"
  },
  {
    "text": "made and then we're telling it that we",
    "start": "989680",
    "end": "991920"
  },
  {
    "text": "want the file name printed as a string",
    "start": "991920",
    "end": "994480"
  },
  {
    "text": "you'll see on the next slide how to",
    "start": "994480",
    "end": "995759"
  },
  {
    "text": "figure out which parameters are",
    "start": "995759",
    "end": "997279"
  },
  {
    "text": "available to which tracing events",
    "start": "997279",
    "end": "999759"
  },
  {
    "text": "but for this case we want the file name",
    "start": "999759",
    "end": "1001600"
  },
  {
    "text": "which is the file that's going to be",
    "start": "1001600",
    "end": "1003040"
  },
  {
    "text": "opened",
    "start": "1003040",
    "end": "1004399"
  },
  {
    "text": "we then",
    "start": "1004399",
    "end": "1005440"
  },
  {
    "text": "put that into the kprobe events file",
    "start": "1005440",
    "end": "1008320"
  },
  {
    "text": "on the next line we enable our test open",
    "start": "1008320",
    "end": "1011519"
  },
  {
    "text": "event",
    "start": "1011519",
    "end": "1012560"
  },
  {
    "text": "and then after that we're going to cat a",
    "start": "1012560",
    "end": "1015199"
  },
  {
    "text": "file that doesn't exist we just wanted a",
    "start": "1015199",
    "end": "1017360"
  },
  {
    "text": "unique file name",
    "start": "1017360",
    "end": "1018959"
  },
  {
    "text": "and then if we grab part of that file",
    "start": "1018959",
    "end": "1020720"
  },
  {
    "text": "name against the trace log we see that",
    "start": "1020720",
    "end": "1022880"
  },
  {
    "text": "we've captured our cat command we see",
    "start": "1022880",
    "end": "1025438"
  },
  {
    "text": "the name of the command is cat there's",
    "start": "1025439",
    "end": "1027280"
  },
  {
    "text": "then a dash with the 26136 that's the",
    "start": "1027280",
    "end": "1030160"
  },
  {
    "text": "pit of the process",
    "start": "1030160",
    "end": "1031760"
  },
  {
    "text": "the name of this probe is test open like",
    "start": "1031760",
    "end": "1033918"
  },
  {
    "text": "we said the function is do sys open and",
    "start": "1033919",
    "end": "1036959"
  },
  {
    "text": "then it's telling us the full path to",
    "start": "1036959",
    "end": "1038798"
  },
  {
    "text": "the file name so again it's a really",
    "start": "1038799",
    "end": "1040720"
  },
  {
    "text": "quick way to figure out every file",
    "start": "1040720",
    "end": "1042400"
  },
  {
    "text": "that's being accessed on the machine",
    "start": "1042400",
    "end": "1043839"
  },
  {
    "text": "which program is accessing it and so on",
    "start": "1043839",
    "end": "1046480"
  },
  {
    "text": "and then obviously with all the",
    "start": "1046480",
    "end": "1047678"
  },
  {
    "text": "functions that are available to hook",
    "start": "1047679",
    "end": "1049760"
  },
  {
    "text": "there's really endless possibilities of",
    "start": "1049760",
    "end": "1051679"
  },
  {
    "text": "what you want to monitor",
    "start": "1051679",
    "end": "1054720"
  },
  {
    "text": "to find all of the functions that are",
    "start": "1055120",
    "end": "1057360"
  },
  {
    "text": "available as these event tracing",
    "start": "1057360",
    "end": "1059440"
  },
  {
    "text": "handlers or how ones you can hook",
    "start": "1059440",
    "end": "1062000"
  },
  {
    "text": "you'll want to look for format files",
    "start": "1062000",
    "end": "1063840"
  },
  {
    "text": "under the directory in this case on this",
    "start": "1063840",
    "end": "1066240"
  },
  {
    "text": "test vm there was 1529 of them",
    "start": "1066240",
    "end": "1069440"
  },
  {
    "text": "if you want to see which parameters are",
    "start": "1069440",
    "end": "1071520"
  },
  {
    "text": "available for a particular function then",
    "start": "1071520",
    "end": "1074480"
  },
  {
    "text": "go to the directory for that function",
    "start": "1074480",
    "end": "1077120"
  },
  {
    "text": "and then cat the format file and then in",
    "start": "1077120",
    "end": "1079520"
  },
  {
    "text": "this case you can see we're looking for",
    "start": "1079520",
    "end": "1081200"
  },
  {
    "text": "the sysenter open system call this is",
    "start": "1081200",
    "end": "1084000"
  },
  {
    "text": "the first function that will be called",
    "start": "1084000",
    "end": "1085760"
  },
  {
    "text": "in that chain that eventually ends up at",
    "start": "1085760",
    "end": "1087600"
  },
  {
    "text": "do says open and then you can see",
    "start": "1087600",
    "end": "1089840"
  },
  {
    "text": "towards the bottom that it has a file",
    "start": "1089840",
    "end": "1091679"
  },
  {
    "text": "name parameter you also see that's a",
    "start": "1091679",
    "end": "1094160"
  },
  {
    "text": "cons char which is our construct pointer",
    "start": "1094160",
    "end": "1096559"
  },
  {
    "text": "which is just a string in c so you can",
    "start": "1096559",
    "end": "1098880"
  },
  {
    "text": "treat it as a string and then the kernel",
    "start": "1098880",
    "end": "1100400"
  },
  {
    "text": "will figure it out for you and print it",
    "start": "1100400",
    "end": "1101840"
  },
  {
    "text": "out correctly but again if you want to",
    "start": "1101840",
    "end": "1104000"
  },
  {
    "text": "play with this yourself figure out some",
    "start": "1104000",
    "end": "1105679"
  },
  {
    "text": "interesting functions to trace look at",
    "start": "1105679",
    "end": "1108080"
  },
  {
    "text": "the format files so you can see what's",
    "start": "1108080",
    "end": "1110000"
  },
  {
    "text": "available to you and what you want to",
    "start": "1110000",
    "end": "1111760"
  },
  {
    "text": "log",
    "start": "1111760",
    "end": "1114080"
  },
  {
    "text": "this is the output of running linux",
    "start": "1115200",
    "end": "1117760"
  },
  {
    "text": "kprobes against the sample that had that",
    "start": "1117760",
    "end": "1120160"
  },
  {
    "text": "command line trace event active",
    "start": "1120160",
    "end": "1122480"
  },
  {
    "text": "you can see that it correctly identifies",
    "start": "1122480",
    "end": "1124559"
  },
  {
    "text": "the target symbol as do sis open but the",
    "start": "1124559",
    "end": "1127600"
  },
  {
    "text": "free handler symbol is not so useful it",
    "start": "1127600",
    "end": "1130559"
  },
  {
    "text": "basically just tells us that it's this",
    "start": "1130559",
    "end": "1132000"
  },
  {
    "text": "function in the kernel and the function",
    "start": "1132000",
    "end": "1134080"
  },
  {
    "text": "name is k probe dispatcher",
    "start": "1134080",
    "end": "1136400"
  },
  {
    "text": "obviously the there's no kernel module",
    "start": "1136400",
    "end": "1138080"
  },
  {
    "text": "here it was just registered from user",
    "start": "1138080",
    "end": "1139760"
  },
  {
    "text": "land and the output needs to end up in",
    "start": "1139760",
    "end": "1141760"
  },
  {
    "text": "that trace log file so",
    "start": "1141760",
    "end": "1144240"
  },
  {
    "text": "the kernel is going to handle that so",
    "start": "1144240",
    "end": "1146160"
  },
  {
    "text": "this helps us a little bit we know that",
    "start": "1146160",
    "end": "1148080"
  },
  {
    "text": "there is a trace event registered but we",
    "start": "1148080",
    "end": "1150880"
  },
  {
    "text": "don't actually know the name of it or",
    "start": "1150880",
    "end": "1152160"
  },
  {
    "text": "anything like that all we know is the",
    "start": "1152160",
    "end": "1154000"
  },
  {
    "text": "function name so if we want to get the",
    "start": "1154000",
    "end": "1155919"
  },
  {
    "text": "rest of the information we can run the",
    "start": "1155919",
    "end": "1158080"
  },
  {
    "text": "linux trace events plugin",
    "start": "1158080",
    "end": "1160559"
  },
  {
    "text": "this is a new plugin we developed",
    "start": "1160559",
    "end": "1162400"
  },
  {
    "text": "specifically to handle those user land",
    "start": "1162400",
    "end": "1164960"
  },
  {
    "text": "trace events and being able to find them",
    "start": "1164960",
    "end": "1167840"
  },
  {
    "text": "we can see that our target symbol is the",
    "start": "1167840",
    "end": "1170320"
  },
  {
    "text": "name of the probe which is test open and",
    "start": "1170320",
    "end": "1172559"
  },
  {
    "text": "then we get the format which is the file",
    "start": "1172559",
    "end": "1174640"
  },
  {
    "text": "name you also see that the probe ip is",
    "start": "1174640",
    "end": "1177280"
  },
  {
    "text": "being pulled and part of this format",
    "start": "1177280",
    "end": "1180000"
  },
  {
    "text": "that happened for every test probe that",
    "start": "1180000",
    "end": "1182000"
  },
  {
    "text": "i set so i assume it's just kind of",
    "start": "1182000",
    "end": "1183440"
  },
  {
    "text": "there by default but then after the",
    "start": "1183440",
    "end": "1185760"
  },
  {
    "text": "probe ip you can see what is the part of",
    "start": "1185760",
    "end": "1188480"
  },
  {
    "text": "the format and the parameters that were",
    "start": "1188480",
    "end": "1190320"
  },
  {
    "text": "actually set by the user and then in",
    "start": "1190320",
    "end": "1192480"
  },
  {
    "text": "this case you can see it's the file name",
    "start": "1192480",
    "end": "1194240"
  },
  {
    "text": "being treated as a string as we would",
    "start": "1194240",
    "end": "1196400"
  },
  {
    "text": "expect so these plugins point to us",
    "start": "1196400",
    "end": "1198880"
  },
  {
    "text": "right away that this user land k probe",
    "start": "1198880",
    "end": "1201360"
  },
  {
    "text": "was set",
    "start": "1201360",
    "end": "1203760"
  },
  {
    "text": "the next thing we looked at were k-rep",
    "start": "1204640",
    "end": "1206640"
  },
  {
    "text": "probes and so this makes it where you",
    "start": "1206640",
    "end": "1209360"
  },
  {
    "text": "can hook not only the beginning of a",
    "start": "1209360",
    "end": "1211039"
  },
  {
    "text": "function but also the end and so this is",
    "start": "1211039",
    "end": "1213120"
  },
  {
    "text": "really nice from a profiling standpoint",
    "start": "1213120",
    "end": "1215360"
  },
  {
    "text": "but also it's really nice from a rootkit",
    "start": "1215360",
    "end": "1217520"
  },
  {
    "text": "standpoint",
    "start": "1217520",
    "end": "1218720"
  },
  {
    "text": "because by monitoring the end of the",
    "start": "1218720",
    "end": "1220960"
  },
  {
    "text": "function you can actually change the",
    "start": "1220960",
    "end": "1222400"
  },
  {
    "text": "return value so you can imagine if a",
    "start": "1222400",
    "end": "1224720"
  },
  {
    "text": "rootkit wants to hide the presence of a",
    "start": "1224720",
    "end": "1227120"
  },
  {
    "text": "file on a machine it can hook the open",
    "start": "1227120",
    "end": "1230159"
  },
  {
    "text": "functions that we saw before",
    "start": "1230159",
    "end": "1232240"
  },
  {
    "text": "if the file that's trying to be opened",
    "start": "1232240",
    "end": "1235039"
  },
  {
    "text": "the rootkit wants to hide it from the",
    "start": "1235039",
    "end": "1236559"
  },
  {
    "text": "calling code it can just change the",
    "start": "1236559",
    "end": "1238480"
  },
  {
    "text": "return value at the end to say that the",
    "start": "1238480",
    "end": "1240240"
  },
  {
    "text": "file's not there the calling code will",
    "start": "1240240",
    "end": "1242320"
  },
  {
    "text": "be none the wiser it will have no idea",
    "start": "1242320",
    "end": "1244159"
  },
  {
    "text": "that the rootkit changed that behavior",
    "start": "1244159",
    "end": "1246320"
  },
  {
    "text": "and it will just simply think the file",
    "start": "1246320",
    "end": "1248000"
  },
  {
    "text": "isn't there",
    "start": "1248000",
    "end": "1249360"
  },
  {
    "text": "for our proof of concept you can see on",
    "start": "1249360",
    "end": "1251280"
  },
  {
    "text": "the right we hook the netlink send skb",
    "start": "1251280",
    "end": "1253840"
  },
  {
    "text": "function there's two functions of",
    "start": "1253840",
    "end": "1256320"
  },
  {
    "text": "interest here or two callbacks of",
    "start": "1256320",
    "end": "1257760"
  },
  {
    "text": "interest here as far as the k red probe",
    "start": "1257760",
    "end": "1260320"
  },
  {
    "text": "itself we have the handler member which",
    "start": "1260320",
    "end": "1262880"
  },
  {
    "text": "is going to be called when the function",
    "start": "1262880",
    "end": "1264640"
  },
  {
    "text": "ends and then the entry handler member",
    "start": "1264640",
    "end": "1267039"
  },
  {
    "text": "which will be called when the function",
    "start": "1267039",
    "end": "1268640"
  },
  {
    "text": "begins and so those are we want to track",
    "start": "1268640",
    "end": "1271039"
  },
  {
    "text": "both of those with the plug-in and then",
    "start": "1271039",
    "end": "1273120"
  },
  {
    "text": "you can see in the init function once",
    "start": "1273120",
    "end": "1274720"
  },
  {
    "text": "you have the data structure set up you",
    "start": "1274720",
    "end": "1276400"
  },
  {
    "text": "just call the register kprobe function",
    "start": "1276400",
    "end": "1278640"
  },
  {
    "text": "and then this will be active and that",
    "start": "1278640",
    "end": "1280400"
  },
  {
    "text": "function will be hooked",
    "start": "1280400",
    "end": "1283440"
  },
  {
    "text": "here's the output of running both",
    "start": "1283440",
    "end": "1285280"
  },
  {
    "text": "k-probes and k-rep probes plug-ins",
    "start": "1285280",
    "end": "1287600"
  },
  {
    "text": "against the sample",
    "start": "1287600",
    "end": "1289039"
  },
  {
    "text": "the k pro plugins",
    "start": "1289039",
    "end": "1290799"
  },
  {
    "text": "correctly figures out that the netlinks",
    "start": "1290799",
    "end": "1292880"
  },
  {
    "text": "and skb function is hooked but again it",
    "start": "1292880",
    "end": "1295520"
  },
  {
    "text": "just essentially tells us it's a k red",
    "start": "1295520",
    "end": "1297520"
  },
  {
    "text": "probe so to get the full information you",
    "start": "1297520",
    "end": "1299840"
  },
  {
    "text": "need to run the linux krep probes plugin",
    "start": "1299840",
    "end": "1302640"
  },
  {
    "text": "tells us the function name as well as",
    "start": "1302640",
    "end": "1304559"
  },
  {
    "text": "both the pre-handler and post handler",
    "start": "1304559",
    "end": "1307039"
  },
  {
    "text": "symbols and also which module they come",
    "start": "1307039",
    "end": "1309200"
  },
  {
    "text": "from so at that point you can just",
    "start": "1309200",
    "end": "1310880"
  },
  {
    "text": "simply start your reverse engineering",
    "start": "1310880",
    "end": "1312960"
  },
  {
    "text": "and you know the exact context that",
    "start": "1312960",
    "end": "1314559"
  },
  {
    "text": "you're working",
    "start": "1314559",
    "end": "1317120"
  },
  {
    "text": "and then as i mentioned there is also",
    "start": "1317520",
    "end": "1319440"
  },
  {
    "text": "the ebpf subsystem",
    "start": "1319440",
    "end": "1322080"
  },
  {
    "text": "this again allows programs to be",
    "start": "1322080",
    "end": "1324799"
  },
  {
    "text": "compiled in user space",
    "start": "1324799",
    "end": "1326880"
  },
  {
    "text": "compiled down to that ebpf bytecode and",
    "start": "1326880",
    "end": "1329200"
  },
  {
    "text": "then ran by the kernel and as i talked",
    "start": "1329200",
    "end": "1331679"
  },
  {
    "text": "about a bunch of companies and also",
    "start": "1331679",
    "end": "1334000"
  },
  {
    "text": "systems rely on this what you're looking",
    "start": "1334000",
    "end": "1336400"
  },
  {
    "text": "at for our proof of concept is the",
    "start": "1336400",
    "end": "1338480"
  },
  {
    "text": "source code to exec snoop like we saw",
    "start": "1338480",
    "end": "1340559"
  },
  {
    "text": "before",
    "start": "1340559",
    "end": "1341520"
  },
  {
    "text": "and then we created a memory sample",
    "start": "1341520",
    "end": "1343440"
  },
  {
    "text": "where a machine had exec snoop running",
    "start": "1343440",
    "end": "1345760"
  },
  {
    "text": "and in this case you can see that it",
    "start": "1345760",
    "end": "1347120"
  },
  {
    "text": "reported that the cat command was used",
    "start": "1347120",
    "end": "1349440"
  },
  {
    "text": "to read the password file",
    "start": "1349440",
    "end": "1352879"
  },
  {
    "text": "we can then use a couple plugins to",
    "start": "1352960",
    "end": "1354720"
  },
  {
    "text": "examine this behavior",
    "start": "1354720",
    "end": "1356480"
  },
  {
    "text": "the first one is linux ebpf so this is",
    "start": "1356480",
    "end": "1359200"
  },
  {
    "text": "going to list information on all of the",
    "start": "1359200",
    "end": "1361360"
  },
  {
    "text": "running ebpf programs or all of the",
    "start": "1361360",
    "end": "1363679"
  },
  {
    "text": "active ones",
    "start": "1363679",
    "end": "1364960"
  },
  {
    "text": "you can see for this one it is hooking",
    "start": "1364960",
    "end": "1367679"
  },
  {
    "text": "the sysenter exec ve system call and",
    "start": "1367679",
    "end": "1370640"
  },
  {
    "text": "it's doing this by way of a trace point",
    "start": "1370640",
    "end": "1373120"
  },
  {
    "text": "so we can then run the tracepoint plugin",
    "start": "1373120",
    "end": "1375520"
  },
  {
    "text": "and we see that we have our hook set",
    "start": "1375520",
    "end": "1377440"
  },
  {
    "text": "from the performance subsystem and it's",
    "start": "1377440",
    "end": "1380000"
  },
  {
    "text": "hooked on sysenter which is going to",
    "start": "1380000",
    "end": "1381840"
  },
  {
    "text": "hook the",
    "start": "1381840",
    "end": "1382960"
  },
  {
    "text": "entire system call table so any",
    "start": "1382960",
    "end": "1385520"
  },
  {
    "text": "system call function in there",
    "start": "1385520",
    "end": "1387679"
  },
  {
    "text": "and then if we want to be able to map",
    "start": "1387679",
    "end": "1389200"
  },
  {
    "text": "back an ebpf program to the process that",
    "start": "1389200",
    "end": "1391919"
  },
  {
    "text": "actually loaded it we then wrote another",
    "start": "1391919",
    "end": "1394640"
  },
  {
    "text": "plugin and that is the linux perf events",
    "start": "1394640",
    "end": "1396799"
  },
  {
    "text": "ebpf it's going to match out these",
    "start": "1396799",
    "end": "1399520"
  },
  {
    "text": "performance events",
    "start": "1399520",
    "end": "1401120"
  },
  {
    "text": "filters which is essentially what your",
    "start": "1401120",
    "end": "1402880"
  },
  {
    "text": "that previous program was",
    "start": "1402880",
    "end": "1404880"
  },
  {
    "text": "out to not only the ebpf program but",
    "start": "1404880",
    "end": "1407520"
  },
  {
    "text": "also the process that started it",
    "start": "1407520",
    "end": "1409679"
  },
  {
    "text": "so you can see here if you look in the",
    "start": "1409679",
    "end": "1411760"
  },
  {
    "text": "the green squares the address of the",
    "start": "1411760",
    "end": "1413679"
  },
  {
    "text": "programs is the same but in our perf",
    "start": "1413679",
    "end": "1416159"
  },
  {
    "text": "events plug-in output we see that the",
    "start": "1416159",
    "end": "1418480"
  },
  {
    "text": "program that's responsible for it the",
    "start": "1418480",
    "end": "1420640"
  },
  {
    "text": "actual running program that's",
    "start": "1420640",
    "end": "1422320"
  },
  {
    "text": "responsible for it is bpf traced with",
    "start": "1422320",
    "end": "1424720"
  },
  {
    "text": "pid 1109 so now we have the full context",
    "start": "1424720",
    "end": "1428080"
  },
  {
    "text": "of this ebpf program that's running",
    "start": "1428080",
    "end": "1432399"
  },
  {
    "text": "in conclusion",
    "start": "1433440",
    "end": "1435039"
  },
  {
    "text": "hopefully you saw the value here of just",
    "start": "1435039",
    "end": "1437200"
  },
  {
    "text": "how",
    "start": "1437200",
    "end": "1438720"
  },
  {
    "text": "extremely powerful these tracing",
    "start": "1438720",
    "end": "1441120"
  },
  {
    "text": "subsystems are and the kernel",
    "start": "1441120",
    "end": "1442720"
  },
  {
    "text": "infrastructure that provides them are",
    "start": "1442720",
    "end": "1444720"
  },
  {
    "text": "whether the malware is written as ebpf",
    "start": "1444720",
    "end": "1447279"
  },
  {
    "text": "itself or something that hooks one of",
    "start": "1447279",
    "end": "1448960"
  },
  {
    "text": "the lower subsystems",
    "start": "1448960",
    "end": "1450880"
  },
  {
    "text": "the entire system can be monitored the",
    "start": "1450880",
    "end": "1452799"
  },
  {
    "text": "full behavior of the system can be",
    "start": "1452799",
    "end": "1454320"
  },
  {
    "text": "monitored all through the use of ebpf",
    "start": "1454320",
    "end": "1457200"
  },
  {
    "text": "we were also very excited to see and we",
    "start": "1457200",
    "end": "1459360"
  },
  {
    "text": "realized that our research had some",
    "start": "1459360",
    "end": "1461039"
  },
  {
    "text": "pretty good timing that there's a talk",
    "start": "1461039",
    "end": "1463840"
  },
  {
    "text": "at defcon and also another talk here at",
    "start": "1463840",
    "end": "1466080"
  },
  {
    "text": "black hat about using ebpf for offensive",
    "start": "1466080",
    "end": "1469360"
  },
  {
    "text": "purposes so i put the titles to both of",
    "start": "1469360",
    "end": "1471679"
  },
  {
    "text": "them i would definitely recommend",
    "start": "1471679",
    "end": "1473279"
  },
  {
    "text": "watching both of them the abstract",
    "start": "1473279",
    "end": "1474960"
  },
  {
    "text": "sounded",
    "start": "1474960",
    "end": "1476240"
  },
  {
    "text": "exactly like what our volatility plugins",
    "start": "1476240",
    "end": "1478240"
  },
  {
    "text": "try to look for the abstracts both talk",
    "start": "1478240",
    "end": "1480159"
  },
  {
    "text": "about using eppf to hook the system to",
    "start": "1480159",
    "end": "1482960"
  },
  {
    "text": "implement rootkits and so on",
    "start": "1482960",
    "end": "1484960"
  },
  {
    "text": "which is exactly what our plugins are",
    "start": "1484960",
    "end": "1487200"
  },
  {
    "text": "trying to detect so these seem like",
    "start": "1487200",
    "end": "1489919"
  },
  {
    "text": "really nice complementary talks i'll",
    "start": "1489919",
    "end": "1491679"
  },
  {
    "text": "definitely watch both of them as well",
    "start": "1491679",
    "end": "1493840"
  },
  {
    "text": "i'd also like to give a huge thanks to",
    "start": "1493840",
    "end": "1495919"
  },
  {
    "text": "gus he's one of my co-workers at",
    "start": "1495919",
    "end": "1498159"
  },
  {
    "text": "felixity he gave us a ton of feedback on",
    "start": "1498159",
    "end": "1500640"
  },
  {
    "text": "the slides as well as the technical",
    "start": "1500640",
    "end": "1502159"
  },
  {
    "text": "white paper and he also wrote quite a",
    "start": "1502159",
    "end": "1504480"
  },
  {
    "text": "few of the plugins that you saw here in",
    "start": "1504480",
    "end": "1506080"
  },
  {
    "text": "the slides",
    "start": "1506080",
    "end": "1508400"
  },
  {
    "text": "if you have any questions or comments",
    "start": "1508400",
    "end": "1509919"
  },
  {
    "text": "please reach out to",
    "start": "1509919",
    "end": "1511520"
  },
  {
    "text": "both myself and golden we have our email",
    "start": "1511520",
    "end": "1513919"
  },
  {
    "text": "addresses our twitter handles as well as",
    "start": "1513919",
    "end": "1515840"
  },
  {
    "text": "our websites hopefully enjoy the talk we",
    "start": "1515840",
    "end": "1518799"
  },
  {
    "text": "will also be in person at the conference",
    "start": "1518799",
    "end": "1521760"
  },
  {
    "text": "so if you want to talk there we can or",
    "start": "1521760",
    "end": "1523760"
  },
  {
    "text": "like i said just contact us anyway",
    "start": "1523760",
    "end": "1525520"
  },
  {
    "text": "online we're very easy to find",
    "start": "1525520",
    "end": "1529840"
  }
]