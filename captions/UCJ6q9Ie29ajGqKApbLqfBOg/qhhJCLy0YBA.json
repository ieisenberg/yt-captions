[
  {
    "text": "something [Music]",
    "start": "900",
    "end": "4810"
  },
  {
    "text": "before we start let me quickly show you what this talk will be about so I was playing with chrome and now this weird",
    "start": "7680",
    "end": "15000"
  },
  {
    "text": "thing is happening to my terminal where it prints this calculator every time I",
    "start": "15000",
    "end": "20220"
  },
  {
    "text": "open it and you might guess from the title of this",
    "start": "20220",
    "end": "25740"
  },
  {
    "text": "talk that this is somehow a chrome sandbox Escape in particular in Mojo which we will get to in a second",
    "start": "25740",
    "end": "32160"
  },
  {
    "text": "particularly this is a logic bug there was no memory crafted in the whole of in",
    "start": "32160",
    "end": "37320"
  },
  {
    "text": "the making of this presentation which means if you were hoping for some new elite team spraying techniques now is",
    "start": "37320",
    "end": "42899"
  },
  {
    "text": "your last chance to to change the rooms um I actually have three bucks for you three logic bucks the first one will be",
    "start": "42899",
    "end": "49500"
  },
  {
    "text": "like a nice introduction how module works and hopefully we'll explain the the inner workings and then we will get",
    "start": "49500",
    "end": "55559"
  },
  {
    "text": "to a really painful bug that was just was really hard to exploit um",
    "start": "55559",
    "end": "61020"
  },
  {
    "text": "but before we get to that I need to I need to go over a little bit of background I promise I will make it",
    "start": "61020",
    "end": "66600"
  },
  {
    "text": "quick um so this is what Chrome looks like you have this browser process and you",
    "start": "66600",
    "end": "73439"
  },
  {
    "text": "have a bunch of other processes most of them some red ones the renderers the",
    "start": "73439",
    "end": "79020"
  },
  {
    "text": "renderers are the ones that touch all the untrusted data so whenever you touch some HTML or you run some JavaScript",
    "start": "79020",
    "end": "85740"
  },
  {
    "text": "this will all happen inside of one of these renderer processes which also means that if you have a cool",
    "start": "85740",
    "end": "92640"
  },
  {
    "text": "JavaScript engine bug and get native code execution this is where you will most likely end up and this is one of",
    "start": "92640",
    "end": "98880"
  },
  {
    "text": "the prerequisites for this for this talk since we're talking about sandbox escapes just assume the tech already has",
    "start": "98880",
    "end": "104820"
  },
  {
    "text": "native code execution in one of these renderers and well and then you're obviously in a",
    "start": "104820",
    "end": "110399"
  },
  {
    "text": "sandbox otherwise we wouldn't have to break out of the sandbox right interesting is also that the renderers",
    "start": "110399",
    "end": "115979"
  },
  {
    "text": "themselves are isolated from each other so even if you if you run your exploits on evil.com you serve your expert from",
    "start": "115979",
    "end": "122340"
  },
  {
    "text": "evil.com you won't be able to just read the cookies from google.com or something um because the the process isolation",
    "start": "122340",
    "end": "128819"
  },
  {
    "text": "will still guarantee some some web security physics",
    "start": "128819",
    "end": "134580"
  },
  {
    "text": "since in the sandbox you can't talk to stuff like you can't do raw network connections but as a renderer you want",
    "start": "134580",
    "end": "140819"
  },
  {
    "text": "to fetch some some URLs so for that there's other processes they're called utility processes for example you see",
    "start": "140819",
    "end": "147300"
  },
  {
    "text": "here the network and the GPU process and the network process what does what you think it it's supposed to fetch stuff",
    "start": "147300",
    "end": "153900"
  },
  {
    "text": "from the network so as a renderer you can ask the network process please fetch food.js as a sub resource or something",
    "start": "153900",
    "end": "161220"
  },
  {
    "text": "so when I'm saying you're talking to another process",
    "start": "161220",
    "end": "166860"
  },
  {
    "text": "you need some way to communicate right and this is called an IPC mechanism the IPC mechanism in Chrome is called Mojo",
    "start": "166860",
    "end": "173040"
  },
  {
    "text": "and from the title of the soft this is what we will talk about and this is what we will try to exploit",
    "start": "173040",
    "end": "178920"
  },
  {
    "text": "and you you won't just talk to another process in the end what you want to do is you talk to a certain service or",
    "start": "178920",
    "end": "184319"
  },
  {
    "text": "interface on this process in the case or in the previous example",
    "start": "184319",
    "end": "189480"
  },
  {
    "text": "we want to fetch some JavaScript we will talk we want to load the URL so there's",
    "start": "189480",
    "end": "194760"
  },
  {
    "text": "some UL loader service that we can talk to on the left side you see like stuff like the renderer host is something the",
    "start": "194760",
    "end": "200760"
  },
  {
    "text": "renderer is supposed to but you also see a few things that the render is not supposed to talk to and the GPU host is pretty pretty",
    "start": "200760",
    "end": "206760"
  },
  {
    "text": "obviously only intended for the GPU to talk to there's uh it's not clear from the name not",
    "start": "206760",
    "end": "212940"
  },
  {
    "text": "network service and network contacts are also highly privileged interfaces so there must be some way to prevent you",
    "start": "212940",
    "end": "218760"
  },
  {
    "text": "from talk like allow you to talk to some of them but not all of them in Mojo",
    "start": "218760",
    "end": "225420"
  },
  {
    "text": "these interfaces are backed by something called a port the Pod like a system data structure on",
    "start": "225420",
    "end": "231060"
  },
  {
    "text": "the in the process the port has a name the name is this 128-bit secret value that",
    "start": "231060",
    "end": "237360"
  },
  {
    "text": "is generated randomly um the two processes always connected with",
    "start": "237360",
    "end": "243540"
  },
  {
    "text": "a single message pipe depending on the west on Linux for example this will be a socket pair",
    "start": "243540",
    "end": "249180"
  },
  {
    "text": "and then when you want to talk to a specific port for example the import of the air loader you will send a message",
    "start": "249180",
    "end": "255360"
  },
  {
    "text": "through this single socket pair saying where it says some somewhere inside oh I",
    "start": "255360",
    "end": "260699"
  },
  {
    "text": "want to talk to X where X is the name of the Year loader the processes in in Mojo",
    "start": "260699",
    "end": "265919"
  },
  {
    "text": "called nodes so I might use those words interchangeably from now on",
    "start": "265919",
    "end": "271320"
  },
  {
    "text": "the wire format looks roughly like this where there's two layers of messages the",
    "start": "271320",
    "end": "277440"
  },
  {
    "text": "outer layer is called the Channel messages and this this is the node to node communication so you it's it's like",
    "start": "277440",
    "end": "283560"
  },
  {
    "text": "a network protocol pretty much where you have some metadata you can exchange for example you see broadcast event you can",
    "start": "283560",
    "end": "289800"
  },
  {
    "text": "make it broadcaster and then the inner layer of messages is",
    "start": "289800",
    "end": "296699"
  },
  {
    "text": "used for the port to port communication you see here the event messages with the payloads in blue",
    "start": "296699",
    "end": "302699"
  },
  {
    "text": "and the user message for example is the ones that has the actual payload so when you actually ask for hey please",
    "start": "302699",
    "end": "309440"
  },
  {
    "text": "fetchfood.js it will be in the K user message type and then there's some other metadata",
    "start": "309440",
    "end": "315060"
  },
  {
    "text": "stuff and you can see here all of them have have a port name since it's port to port communication they need to always",
    "start": "315060",
    "end": "321120"
  },
  {
    "text": "specify which Port they um they go to and you might want to know wait don't browsers sometimes have",
    "start": "321120",
    "end": "326940"
  },
  {
    "text": "information League vulnerabilities and you can leak these Port names what happens if you can leak the port",
    "start": "326940",
    "end": "333000"
  },
  {
    "text": "name of some privileged interface how bad can it be well I already did this like two years ago",
    "start": "333000",
    "end": "339180"
  },
  {
    "text": "where some of these actually allow you to break out of the sandbox so maybe we can try to do something similar here",
    "start": "339180",
    "end": "346500"
  },
  {
    "text": "so just to summarize this is the the background we need I think the most important part is if",
    "start": "346500",
    "end": "352740"
  },
  {
    "text": "you leak these Port names that's bad and um try not to do this or try to do this depending on what you try to achieve",
    "start": "352740",
    "end": "360000"
  },
  {
    "text": "so let's jump into the first the first vulnerability so here you have again three three nodes",
    "start": "360000",
    "end": "367320"
  },
  {
    "text": "or three processes the render the browser and the network and the renderer now wants to fetch",
    "start": "367320",
    "end": "374039"
  },
  {
    "text": "food.js but as you can see here they don't have a direct connection with each other yet they don't have a they don't have a",
    "start": "374039",
    "end": "380340"
  },
  {
    "text": "socket pair yet that they share so for this they need there needs to be a mechanism for somehow set up new",
    "start": "380340",
    "end": "386400"
  },
  {
    "text": "connections right and in Mojo there's always this one special note the first node in the network and this is called",
    "start": "386400",
    "end": "392160"
  },
  {
    "text": "the broker node and in in Chrome in particular this broadcast the browser",
    "start": "392160",
    "end": "397199"
  },
  {
    "text": "process so we can this broker has a direct connection to every other node in the network like",
    "start": "397199",
    "end": "402840"
  },
  {
    "text": "this is a prerequisite for everything to work so we can now ask the broker or the browser here to introduce us to the",
    "start": "402840",
    "end": "410160"
  },
  {
    "text": "network network node how does that work just as you expect we send one of these Channel messages",
    "start": "410160",
    "end": "415860"
  },
  {
    "text": "asking for an introduction the broker creates a new socket pair and then it",
    "start": "415860",
    "end": "421620"
  },
  {
    "text": "sends it takes one end each and sends it in both directions with a message called introduce so it introduces the renderer",
    "start": "421620",
    "end": "427919"
  },
  {
    "text": "to the network node and it introduces the network to the renderer they accept these they have a dark",
    "start": "427919",
    "end": "433979"
  },
  {
    "text": "connection and now now the renderer can fetch through.js",
    "start": "433979",
    "end": "439139"
  },
  {
    "text": "and there was a bug in this so assuming we have a second renderer and the second",
    "start": "439139",
    "end": "445800"
  },
  {
    "text": "renderer we have a JavaScript bug we have native code execution there and we somehow want to mess with this protocol",
    "start": "445800",
    "end": "451500"
  },
  {
    "text": "right what can we do well the bug was that",
    "start": "451500",
    "end": "456900"
  },
  {
    "text": "this introduced message when the broker introduces the notes to each other there was a check missing that the introduced",
    "start": "456900",
    "end": "463199"
  },
  {
    "text": "message is only allowed to come from the broker because if you don't if you don't check this then the this our ghost here",
    "start": "463199",
    "end": "469560"
  },
  {
    "text": "can do something like this where it creates its own socket pair it sends one one side to the to the",
    "start": "469560",
    "end": "475979"
  },
  {
    "text": "renderer to the other renderer like it could be google.com renderer saying like here's the network process on the other",
    "start": "475979",
    "end": "481259"
  },
  {
    "text": "side but then it keeps the other end of the connection we do this in both in both directions",
    "start": "481259",
    "end": "488699"
  },
  {
    "text": "and suddenly where this ghost in the Middle where we can intercept all the traffic going between the render and the",
    "start": "488699",
    "end": "495419"
  },
  {
    "text": "network process and you can imagine that that's not great because now if if the renderer wants to fetch food.js we can",
    "start": "495419",
    "end": "501479"
  },
  {
    "text": "just put our own xss payload in there and get like JavaScript execution in the other renderer and I wrote an exploit",
    "start": "501479",
    "end": "508440"
  },
  {
    "text": "for this and it's at least a uxs that's it's possible that they can do more with this but I thought this is this was fun",
    "start": "508440",
    "end": "516200"
  },
  {
    "text": "but in the real world you will actually end up like this where if you get code execution in this renderer you",
    "start": "517080",
    "end": "523200"
  },
  {
    "text": "compromise the renderer the other renderer probably already has a connection to the network node right because it probably has to use the",
    "start": "523200",
    "end": "530160"
  },
  {
    "text": "network at some point so does that mean our attack will not work because when we now try to",
    "start": "530160",
    "end": "535800"
  },
  {
    "text": "introduce the other renderer to the network it will it already has a connection so it will ignore the message",
    "start": "535800",
    "end": "541019"
  },
  {
    "text": "but then Mark run from part 0 had this idea where he's like well can't you just crash the network process because the",
    "start": "541019",
    "end": "547860"
  },
  {
    "text": "browser is so nice and it will just spawn the new network process if you if you crash the old one it will notice and",
    "start": "547860",
    "end": "554040"
  },
  {
    "text": "then respond a new process and it actually took me like one hour or so to find a no pointy reference which is",
    "start": "554040",
    "end": "560880"
  },
  {
    "text": "not memory corruption I'm just crashing it so um so you trigger null pointer reference in",
    "start": "560880",
    "end": "567959"
  },
  {
    "text": "the network process it will go away the browser notices spawns a new one you get",
    "start": "567959",
    "end": "573420"
  },
  {
    "text": "the connection to it quickly before the other one and then you're back in the previous situation where now you can introduce them to each other and get you",
    "start": "573420",
    "end": "579899"
  },
  {
    "text": "exercise so this was fixed with this um with this",
    "start": "579899",
    "end": "585000"
  },
  {
    "text": "patch so on introduce when this introduced message gets received we now check that from node needs to be the",
    "start": "585000",
    "end": "591899"
  },
  {
    "text": "broker name or in this case if from node is not the broken name we drop the connection",
    "start": "591899",
    "end": "597060"
  },
  {
    "text": "that's exactly what you want to do but it will be super useful later we will actually we will actually need this",
    "start": "597060",
    "end": "602940"
  },
  {
    "text": "later so keep it in mind but I've also show it to you again but let's go right to the next block so this",
    "start": "602940",
    "end": "610140"
  },
  {
    "text": "was bug number one back number two is so what happens if you're in Mojo you want",
    "start": "610140",
    "end": "616680"
  },
  {
    "text": "to spawn a new process you're not the broker node you want to spawn a new process and this new process",
    "start": "616680",
    "end": "622680"
  },
  {
    "text": "should also get introduced into the into the network the needs to as we've seen before the broker needs to have a direct connection",
    "start": "622680",
    "end": "628980"
  },
  {
    "text": "to every other node on the network so there needs to be a way to tell the broker about",
    "start": "628980",
    "end": "634200"
  },
  {
    "text": "about new notes and well",
    "start": "634200",
    "end": "639300"
  },
  {
    "text": "this is pretty straightforward the protocol just works as you would expect it to which is we just tell the broker",
    "start": "639300",
    "end": "645240"
  },
  {
    "text": "hey here's a new here's a new node it's called add broker client I think the message type",
    "start": "645240",
    "end": "650399"
  },
  {
    "text": "the broker now needs to create a socket pair this time it will keep one end",
    "start": "650399",
    "end": "655980"
  },
  {
    "text": "send the other one back to the renderer the renderer needs to forward it and then once it accepts this um so now",
    "start": "655980",
    "end": "663540"
  },
  {
    "text": "they have a dark connection so",
    "start": "663540",
    "end": "668940"
  },
  {
    "text": "where could be the bug in this exchange that sounds like very similar to the previous to the previous setup right so",
    "start": "668940",
    "end": "674399"
  },
  {
    "text": "maybe like maybe we can find a variant of the previous bug in this um we're back in our compromise render",
    "start": "674399",
    "end": "681839"
  },
  {
    "text": "and now the the black is actually very similar except it's the exact opposite you remember before there was a check",
    "start": "681839",
    "end": "688200"
  },
  {
    "text": "missing that if a if a message comes in they're supposed to come from the broker node this check was missing that's",
    "start": "688200",
    "end": "694200"
  },
  {
    "text": "actually from the broken node in this case the check is the missing check is the opposite which is this message that",
    "start": "694200",
    "end": "699600"
  },
  {
    "text": "goes usually to the broken node we can send it to other nodes so the other node didn't check that they if they are the",
    "start": "699600",
    "end": "705120"
  },
  {
    "text": "broker when they receive this message which is this add broker client that we just saw so what if we in this scenario",
    "start": "705120",
    "end": "711720"
  },
  {
    "text": "we just tell the renderer hey we just added a new node to the network it's",
    "start": "711720",
    "end": "716760"
  },
  {
    "text": "called it's the network node um the network the the render actually was processing this message created",
    "start": "716760",
    "end": "722519"
  },
  {
    "text": "socket pair keeping one end sending one and back and I think this looks very familiar to you now where we put this in",
    "start": "722519",
    "end": "728519"
  },
  {
    "text": "both directions we again the ghost in the middle and we have your accesses",
    "start": "728519",
    "end": "734519"
  },
  {
    "text": "so so far so good right like I think this should give you a quick overview of the",
    "start": "734519",
    "end": "741480"
  },
  {
    "text": "kind of things we can do with Mojo and how the protocol works but now there was a third bug and the",
    "start": "741480",
    "end": "748140"
  },
  {
    "text": "third bug was not this easy to exploit the third book was I think the most difficult exploit I've written so far in",
    "start": "748140",
    "end": "754079"
  },
  {
    "text": "my life and we will need to use everything we've learned so far and a little bit more",
    "start": "754079",
    "end": "759600"
  },
  {
    "text": "um to actually exploit it so it started out with this thought experiment where it's like okay we can add new notes to",
    "start": "759600",
    "end": "766200"
  },
  {
    "text": "the network so we can tell the broker there's a new node and we can use an existing note",
    "start": "766200",
    "end": "771300"
  },
  {
    "text": "name for example we can tell the broker hey here's the network node the broker will notice in this case of course like",
    "start": "771300",
    "end": "778320"
  },
  {
    "text": "I already have a connection to the network node so this message is invalid and we'll just ignore it but as we've",
    "start": "778320",
    "end": "784680"
  },
  {
    "text": "seen before we can also crash the network process so we crash it it goes away we send this message telling the",
    "start": "784680",
    "end": "791100"
  },
  {
    "text": "broker hey we have a new process it's called the network node and this time the broker will accept it",
    "start": "791100",
    "end": "796440"
  },
  {
    "text": "or the browser process will accept it which seems not very useful at first except",
    "start": "796440",
    "end": "804300"
  },
  {
    "text": "that it actually turned out to be to be a very cool thing to do so we can reuse",
    "start": "804300",
    "end": "809760"
  },
  {
    "text": "the names of previously existing nodes after they went away",
    "start": "809760",
    "end": "815339"
  },
  {
    "text": "um to see why this is useful let's take a quick look at what the browser process is actually doing so",
    "start": "815339",
    "end": "821639"
  },
  {
    "text": "when the network process crashes the socket will get close the browser note sees this it will then look up in some",
    "start": "821639",
    "end": "829560"
  },
  {
    "text": "hashmap like the peer node it will delete the peer node it will see oh in a",
    "start": "829560",
    "end": "834779"
  },
  {
    "text": "different map it has like all the ports pointing this to the sphere it will delete all of these parts as well",
    "start": "834779",
    "end": "840600"
  },
  {
    "text": "and then this is all happening on the Arrow thread of the browser process and then it will process our message",
    "start": "840600",
    "end": "847440"
  },
  {
    "text": "which says oh we are the network process now and allows us to reuse the name but all the ports are gone so it seems kind",
    "start": "847440",
    "end": "854220"
  },
  {
    "text": "of useless except that Chrome is not just a multi-process browser it's also",
    "start": "854220",
    "end": "859320"
  },
  {
    "text": "heavily multi-threaded so what can happen at the same time is that the second thread tries to send the message",
    "start": "859320",
    "end": "865260"
  },
  {
    "text": "to the poor one of the ports on the network network process and what happens there would be like it",
    "start": "865260",
    "end": "873000"
  },
  {
    "text": "takes this port structure from this hash map it will lock it and then read out the node name and this can happen before",
    "start": "873000",
    "end": "879839"
  },
  {
    "text": "we destroy the port right and then the browser process the the i o thread continues destroying the port",
    "start": "879839",
    "end": "886560"
  },
  {
    "text": "allowing us to reuse the note name and if we now go back to thread 2 and thread 2 now tries to send the message to the",
    "start": "886560",
    "end": "892920"
  },
  {
    "text": "node name it just read it will go to the wrong node it will go to us instead of the of the now non-existing node anymore",
    "start": "892920",
    "end": "898920"
  },
  {
    "text": "which means we can leak the message content of any nodes that that has any",
    "start": "898920",
    "end": "904860"
  },
  {
    "text": "any messages that are sent this way which is kind of lame and",
    "start": "904860",
    "end": "910139"
  },
  {
    "text": "um well the race looks very impossible to win so let's try better",
    "start": "910139",
    "end": "916260"
  },
  {
    "text": "and now this is where this patch from from previously comes into play as you remember if this introduced",
    "start": "916260",
    "end": "923040"
  },
  {
    "text": "message comes in and it's not from the broker we drop the connection so what can we do this so what happens",
    "start": "923040",
    "end": "928980"
  },
  {
    "text": "if we as this compromise renderer we ask the network process to introduce us to",
    "start": "928980",
    "end": "934620"
  },
  {
    "text": "the broker like this doesn't make sense but there's again there was a check missing that",
    "start": "934620",
    "end": "940139"
  },
  {
    "text": "this message should only be handled on the broker node um so the network process will actually try",
    "start": "940139",
    "end": "946500"
  },
  {
    "text": "to do this so it creates a socket pair and then sends out the introduction one into us one end to the to the browser",
    "start": "946500",
    "end": "952680"
  },
  {
    "text": "process we have native code execution we can patch the code we can just ignore this patch from before so we just ignore the",
    "start": "952680",
    "end": "958740"
  },
  {
    "text": "message but the browser process now will trigger this code that just the the",
    "start": "958740",
    "end": "964440"
  },
  {
    "text": "code from this patch and drop the connection like it will not kill the process we'll",
    "start": "964440",
    "end": "970440"
  },
  {
    "text": "just drop the connection and now we can reuse the the node name",
    "start": "970440",
    "end": "975480"
  },
  {
    "text": "so what is different from before well the difference is the process still exists we can steal the name we can",
    "start": "975480",
    "end": "981300"
  },
  {
    "text": "reuse the note name of a node of a process that still exists which means if we can find a way to leak",
    "start": "981300",
    "end": "988680"
  },
  {
    "text": "a port name now a port name on the network process we can then start sending messages to it and sending",
    "start": "988680",
    "end": "995160"
  },
  {
    "text": "messages to this port we just need to find a way to leak a port name and as we've seen before some more parts",
    "start": "995160",
    "end": "1001220"
  },
  {
    "text": "of our privilege so this this would be very cool if we can do this to see if this actually works we need to",
    "start": "1001220",
    "end": "1008000"
  },
  {
    "text": "take a look again what happens under the hood so as before once the socket gets closed",
    "start": "1008000",
    "end": "1013220"
  },
  {
    "text": "the browser process will well both processes actually will delete the peer node in the peer structure it will they",
    "start": "1013220",
    "end": "1018620"
  },
  {
    "text": "will close all the ports um part of this means they will run on error handlers",
    "start": "1018620",
    "end": "1024438"
  },
  {
    "text": "for the ports and they are custom depending on what kind of of interface is there one of these interfaces called the child",
    "start": "1024439",
    "end": "1030740"
  },
  {
    "text": "process host so you see like the child processors there's a server side and a client side the server side on the",
    "start": "1030740",
    "end": "1035780"
  },
  {
    "text": "browser process will kill the child when it runs which means it will it will kill the network process",
    "start": "1035780",
    "end": "1041480"
  },
  {
    "text": "in a network process will exit If the child process host runs the owner Handler",
    "start": "1041480",
    "end": "1047720"
  },
  {
    "text": "and then after this happens we can reuse the note name on the left side",
    "start": "1047720",
    "end": "1053000"
  },
  {
    "text": "which means this is not great because once the network process is gone we're back to the previous case where we don't",
    "start": "1053000",
    "end": "1059240"
  },
  {
    "text": "have a cool exploit anymore and we just get this lame primitive of maybe leaking some message content",
    "start": "1059240",
    "end": "1065240"
  },
  {
    "text": "um around this time I was listening to this podcast with how the flake and this resonated with me which is I can't let",
    "start": "1065240",
    "end": "1071960"
  },
  {
    "text": "go of box if I find a bug that I think might be exploitable I spend way too much time to actually making it work",
    "start": "1071960",
    "end": "1077000"
  },
  {
    "text": "this is one of the examples and looking long enough at it I actually had an",
    "start": "1077000",
    "end": "1082580"
  },
  {
    "text": "epiphany epiphany which was well these on error handlers they are not run at",
    "start": "1082580",
    "end": "1087860"
  },
  {
    "text": "this point as I showed you it's a little bit misleading the slides these are actually tasks on the i o thread so they",
    "start": "1087860",
    "end": "1094220"
  },
  {
    "text": "get enqueued as tasks which means they don't actually have to run here but they",
    "start": "1094220",
    "end": "1099260"
  },
  {
    "text": "can run after we reuse the note name if we're fast enough we can we can send our",
    "start": "1099260",
    "end": "1104539"
  },
  {
    "text": "own message to realize the node name quick enough before these on error handles run which means now we have a",
    "start": "1104539",
    "end": "1110179"
  },
  {
    "text": "chance right we can raise the right side to to reuse the note name just before the on-air handle runs and on the left",
    "start": "1110179",
    "end": "1117260"
  },
  {
    "text": "side we will also this node name reviews will happen before the on around end is running free fast enough",
    "start": "1117260",
    "end": "1124700"
  },
  {
    "text": "but even better another thing that was really cool was that when these are on error handlers run one thing they do is",
    "start": "1124700",
    "end": "1131960"
  },
  {
    "text": "they close the port and then they send out the port closed event",
    "start": "1131960",
    "end": "1137179"
  },
  {
    "text": "and this port closed event now goes to us because we were able to reuse if we're fast enough and we can reuse the",
    "start": "1137179",
    "end": "1142700"
  },
  {
    "text": "note name this port closed event goes to us and part of the port closed event needs of course is the port name that",
    "start": "1142700",
    "end": "1148039"
  },
  {
    "text": "was closed which means this is our this old leak that we wanted so this can be some privileged port on the network on",
    "start": "1148039",
    "end": "1154880"
  },
  {
    "text": "the network process and the browser process tells us about it hey we just I just closed this part it tells us by",
    "start": "1154880",
    "end": "1159919"
  },
  {
    "text": "accident and then at some point the support the one error Handler from the child process",
    "start": "1159919",
    "end": "1165080"
  },
  {
    "text": "house will kill the child so we have we actually have time we have we have time from this from the first podcast event",
    "start": "1165080",
    "end": "1171380"
  },
  {
    "text": "which might be privileged for to K Port K which can which is the child process",
    "start": "1171380",
    "end": "1176600"
  },
  {
    "text": "host and at that point it's game over so we have this very tight race window where we leak apart and can use it",
    "start": "1176600",
    "end": "1182000"
  },
  {
    "text": "which is great except that the number of total ports is something like 20 which",
    "start": "1182000",
    "end": "1187160"
  },
  {
    "text": "means we have like the time window of like 10 on error handlers roughly for",
    "start": "1187160",
    "end": "1193160"
  },
  {
    "text": "this um but it seems possible at least but the these two these two big issues right",
    "start": "1193160",
    "end": "1199220"
  },
  {
    "text": "like there's a tight race here and then there's also the tight race that the network process tries to exit we need to",
    "start": "1199220",
    "end": "1204380"
  },
  {
    "text": "we need to win both in order to make this work and at this point I I nearly gave up",
    "start": "1204380",
    "end": "1209600"
  },
  {
    "text": "because I was like okay this seems exploitable but I will probably never make it reliably exploit out of this so",
    "start": "1209600",
    "end": "1216080"
  },
  {
    "text": "um maybe just report that it's exploitable and just imagine the rest right but then I took a break and I",
    "start": "1216080",
    "end": "1223039"
  },
  {
    "text": "watched my favorite movie which is called hackers if you if you haven't watched hackers you should it's the best I will spoil",
    "start": "1223039",
    "end": "1230299"
  },
  {
    "text": "you the story though so in hackers there's this evil guy who steals a bunch of money and then he writes on",
    "start": "1230299",
    "end": "1236179"
  },
  {
    "text": "ransomware and that will sink an oil tanker and he also blames it on this group of hackers and this group of",
    "start": "1236179",
    "end": "1243500"
  },
  {
    "text": "hackers then tries to to prove their innocence and they need to hack into this corporate Network because in one of",
    "start": "1243500",
    "end": "1249559"
  },
  {
    "text": "these machines there's this file that has some evidence of what he was doing the problem now is that this corporate",
    "start": "1249559",
    "end": "1255559"
  },
  {
    "text": "network has this super powerful machine called the Gibson and the Gibson is running like an IDs that will just kill",
    "start": "1255559",
    "end": "1260900"
  },
  {
    "text": "all the reverse cells like they have all these zero days to get code execution on in the corporate network but this this",
    "start": "1260900",
    "end": "1267200"
  },
  {
    "text": "um Gibson will just kill the reverse cells very quickly and this point I was like wait a second this is my problem",
    "start": "1267200",
    "end": "1273200"
  },
  {
    "text": "this is this is my story like I'm also I have this leak and I could use it to get",
    "start": "1273200",
    "end": "1278720"
  },
  {
    "text": "some code execution but like this this broker that will all kill the kill the process too quickly",
    "start": "1278720",
    "end": "1284780"
  },
  {
    "text": "so let's take a look at how they solved it in the movie so there are these two media icons that",
    "start": "1284780",
    "end": "1290720"
  },
  {
    "text": "have a like these hackers with a TV show called razor blade and the hackers they go to them and ask them hey can you help",
    "start": "1290720",
    "end": "1295940"
  },
  {
    "text": "us they send out the stress signal to the world and ask all the hackers in the world to unite and help them like",
    "start": "1295940",
    "end": "1301280"
  },
  {
    "text": "everyone throws their zero days at it gets called decision at the same time and the Gibson will be overloaded and",
    "start": "1301280",
    "end": "1306980"
  },
  {
    "text": "can't quit can't kill all of them quickly enough it buys them enough time to like leak the file and save the world",
    "start": "1306980",
    "end": "1313400"
  },
  {
    "text": "um I was like okay hey we can do this if you remember back number two like I I",
    "start": "1313400",
    "end": "1319100"
  },
  {
    "text": "can't just ask all the hackers in the world to to help but um we can fake this as as you remember",
    "start": "1319100",
    "end": "1325280"
  },
  {
    "text": "from Buck number two there's a mechanism to add new nodes to the network right we can add new processes to the motor",
    "start": "1325280",
    "end": "1330919"
  },
  {
    "text": "Network which means these don't have to be real we can just create our own fake Army of",
    "start": "1330919",
    "end": "1335960"
  },
  {
    "text": "hackers and just connect them to the network process and now well in the movie they they send",
    "start": "1335960",
    "end": "1342919"
  },
  {
    "text": "viruses to buy time but the the virus in our case is called a broadcast request",
    "start": "1342919",
    "end": "1349039"
  },
  {
    "text": "so if we now like just imagine what happens so so there's this other this process now has",
    "start": "1349039",
    "end": "1354080"
  },
  {
    "text": "10 000 connections like I'm using like 10 000 fake notes always a socket pair connecting them to us actually and now",
    "start": "1354080",
    "end": "1360919"
  },
  {
    "text": "we send out a broadcast request so now the network process needs to make 10 000 copies of this broadcast request and",
    "start": "1360919",
    "end": "1367220"
  },
  {
    "text": "send it out on every single file descriptor that it has which takes much longer than us just sending this request",
    "start": "1367220",
    "end": "1372799"
  },
  {
    "text": "right which is perfect this works it it solves a problem so now the network process",
    "start": "1372799",
    "end": "1378980"
  },
  {
    "text": "will never exit like it's just completely blocked dial thread is completely blocked but we still have",
    "start": "1378980",
    "end": "1384260"
  },
  {
    "text": "this tight race between the league and the kill so the Gibson we still have the problem of the Gibson the Gibson is",
    "start": "1384260",
    "end": "1390380"
  },
  {
    "text": "still finding us too fast um which was this right so Port 1 to Port",
    "start": "1390380",
    "end": "1397039"
  },
  {
    "text": "10 like we only have 10 on-air handles so but then though the solution is also",
    "start": "1397039",
    "end": "1402500"
  },
  {
    "text": "pretty straightforward why don't we just make this number very big instead of having 10 on air analysts we make a",
    "start": "1402500",
    "end": "1408500"
  },
  {
    "text": "million on a on air and this and we can do this we can we can just send ports",
    "start": "1408500",
    "end": "1414620"
  },
  {
    "text": "over to them to the broker and tell them they point to the network process",
    "start": "1414620",
    "end": "1420260"
  },
  {
    "text": "the the browser process will accept them um you need to do a small trick they don't have a process them but it doesn't",
    "start": "1420260",
    "end": "1426559"
  },
  {
    "text": "really matter like you can you can send all these like I'm using a Million Parts or so send them over kill the connection",
    "start": "1426559",
    "end": "1432020"
  },
  {
    "text": "and now it needs to go to this million on error handlers and it it gives us",
    "start": "1432020",
    "end": "1437120"
  },
  {
    "text": "plenty of time to use our you know to to use the leaked",
    "start": "1437120",
    "end": "1442520"
  },
  {
    "text": "font name and then send it against the network process all right which means we're done right",
    "start": "1442520",
    "end": "1449840"
  },
  {
    "text": "we solved our problems we just need to find a nice privileged Port name now that we can send messages to accept that",
    "start": "1449840",
    "end": "1458000"
  },
  {
    "text": "how do you send a message to to the i o thread of the network process if we're also dosing the network process right",
    "start": "1458000",
    "end": "1464120"
  },
  {
    "text": "now um uh well can we turn the Dos off and on",
    "start": "1464120",
    "end": "1470120"
  },
  {
    "text": "again maybe something like this where the Dos is running we stop it quickly when once we",
    "start": "1470120",
    "end": "1477260"
  },
  {
    "text": "stop it it will notice the the socket got closed it will destroy all the ports it will",
    "start": "1477260",
    "end": "1482480"
  },
  {
    "text": "enqueue all the on air and let's remember their tasks on dial thread we start the Dos again and these on error",
    "start": "1482480",
    "end": "1488900"
  },
  {
    "text": "tasks at the bottom will never run because the Dos is running again which means at this point we actually have",
    "start": "1488900",
    "end": "1494720"
  },
  {
    "text": "time to inject a smooth message except that",
    "start": "1494720",
    "end": "1499760"
  },
  {
    "text": "processing a message is also a two-step process it first needs to read the",
    "start": "1499760",
    "end": "1504980"
  },
  {
    "text": "message which then enqueues the tasks to actually process the message and this message that we want to send is probably",
    "start": "1504980",
    "end": "1511880"
  },
  {
    "text": "on the earth red which means we need to make it read our spoof message somewhere",
    "start": "1511880",
    "end": "1517100"
  },
  {
    "text": "here during the denial service which turns out is possible we just need",
    "start": "1517100",
    "end": "1522799"
  },
  {
    "text": "to add another trick so",
    "start": "1522799",
    "end": "1528020"
  },
  {
    "text": "okay on the bottom again you have the compromise renderer on the top you have the network process and all these lines",
    "start": "1528020",
    "end": "1534860"
  },
  {
    "text": "between them are like the socket pairs because you remember we created like 10 000 for 10 000 fake nodes so we have",
    "start": "1534860",
    "end": "1541039"
  },
  {
    "text": "like 10 000 socket pairs connecting us to the network process so the original idea was just to put",
    "start": "1541039",
    "end": "1548240"
  },
  {
    "text": "these broadcast requests in just a bunch of them the the i o thread will be busy forever but this doesn't work because",
    "start": "1548240",
    "end": "1554600"
  },
  {
    "text": "then we can't send our message so we need to have a better strategy to actually dos dial thread",
    "start": "1554600",
    "end": "1559820"
  },
  {
    "text": "and then I had an idea which was what if we do something like this we instead of sending these",
    "start": "1559820",
    "end": "1566600"
  },
  {
    "text": "broadcast requests we enqueue lots of small messages that do whatever right",
    "start": "1566600",
    "end": "1571700"
  },
  {
    "text": "like they don't do anything interesting um it doesn't matter what they do",
    "start": "1571700",
    "end": "1576980"
  },
  {
    "text": "under the hood what happens now is that there's some selects is called all these file descriptors it will notice oh wait",
    "start": "1576980",
    "end": "1582919"
  },
  {
    "text": "all these file descriptors are readable let me in cure tasks to read from them right so now there's like 10 000 tasks",
    "start": "1582919",
    "end": "1589340"
  },
  {
    "text": "to actually read from these file descriptors now we before those get handled before",
    "start": "1589340",
    "end": "1594740"
  },
  {
    "text": "those run we add the single broadcast request only on the first file descriptor so now when the task to read from the",
    "start": "1594740",
    "end": "1601159"
  },
  {
    "text": "file scripter runs what it will do is it will read both messages at the same time and then it will process the small",
    "start": "1601159",
    "end": "1607700"
  },
  {
    "text": "message first throw it away and now it comes to a broadcast request part of the broadcast request means it will actually",
    "start": "1607700",
    "end": "1613460"
  },
  {
    "text": "send us back 10 000 messages so we can actually follow the process progress of this broadcast request and when it's",
    "start": "1613460",
    "end": "1620059"
  },
  {
    "text": "somewhere in the middle we just add a second broadcast request on the set on the next file descriptor which is already marked for reading and already",
    "start": "1620059",
    "end": "1626620"
  },
  {
    "text": "there's already a task that we'll read from it next so what happens now is it reads from the next file descriptor",
    "start": "1626620",
    "end": "1633559"
  },
  {
    "text": "and again processes first the small message and reads also our broadcast request and so we can we can keep this",
    "start": "1633559",
    "end": "1640159"
  },
  {
    "text": "broadcast request go this the now service going and going dynamically and just continue adding extra broadcast",
    "start": "1640159",
    "end": "1648020"
  },
  {
    "text": "requests while they're being processed so after a while the browser process",
    "start": "1648020",
    "end": "1654860"
  },
  {
    "text": "will now after like a second or so send us a this leaked as this port name that",
    "start": "1654860",
    "end": "1660380"
  },
  {
    "text": "we're interested in so maybe right now we got this port name so now we can instead of enqueuing a broadcast request",
    "start": "1660380",
    "end": "1666860"
  },
  {
    "text": "we just enqueue a spoof message and the same thing will happen where it will read both message together",
    "start": "1666860",
    "end": "1672799"
  },
  {
    "text": "put our enqueue our our spoof message for processing",
    "start": "1672799",
    "end": "1678260"
  },
  {
    "text": "using our leak port and now all we have to do is stop the denial service which means we just",
    "start": "1678260",
    "end": "1684080"
  },
  {
    "text": "don't encue anything anymore wait until all the all the messages are gone it will now process our smooth message and",
    "start": "1684080",
    "end": "1690919"
  },
  {
    "text": "now we start the general service again which is just put a bunch of broadcast requests back in the on-air handlers will never run but",
    "start": "1690919",
    "end": "1697400"
  },
  {
    "text": "our message will get processed and we succeed right like like this it now",
    "start": "1697400",
    "end": "1703220"
  },
  {
    "text": "we can we have a way to leak the port name send a spoof message it the only thing missing is now we need to have",
    "start": "1703220",
    "end": "1709700"
  },
  {
    "text": "some way like what is a privileged part right like now we need to choose a port we have like 20 ports or so that we can",
    "start": "1709700",
    "end": "1716059"
  },
  {
    "text": "choose from uh that we can send messages to we just need to to choose the right fault",
    "start": "1716059",
    "end": "1721580"
  },
  {
    "text": "or like the right service that is behind the product and then I started looking and I I went through the parts I dumped",
    "start": "1721580",
    "end": "1728360"
  },
  {
    "text": "all the what they are one of them is the child process the child process interface and this one looks very",
    "start": "1728360",
    "end": "1734000"
  },
  {
    "text": "interesting because it allows you to spawn new services so you can actually ask it to to to spawn a new service",
    "start": "1734000",
    "end": "1741500"
  },
  {
    "text": "inside the process inside the network process and a bunch that get that get created on",
    "start": "1741500",
    "end": "1747140"
  },
  {
    "text": "the i o thread we don't want those because the i o thread is under denial of service so we can't actually use them",
    "start": "1747140",
    "end": "1752299"
  },
  {
    "text": "but there's also a bunch of services that will get started on the main thread so we can use any of these we can start",
    "start": "1752299",
    "end": "1758120"
  },
  {
    "text": "any of these and there were a few more so like there's a storage service video capture",
    "start": "1758120",
    "end": "1763279"
  },
  {
    "text": "but the first one called my eye the first one is kind of cool the option worklet service",
    "start": "1763279",
    "end": "1768799"
  },
  {
    "text": "it doesn't sound like it will give your sandbox Escape at first unless you you notice that what what",
    "start": "1768799",
    "end": "1776659"
  },
  {
    "text": "this actually is which is it's a JavaScript engine this auction worker service means it will spawn another",
    "start": "1776659",
    "end": "1782299"
  },
  {
    "text": "instance of V8 like the JavaScript engine inside the network process so it will run without the sandbox and as you",
    "start": "1782299",
    "end": "1788720"
  },
  {
    "text": "remember our prerequisite is that we have a compromised renderer so our render compromise is probably a",
    "start": "1788720",
    "end": "1794539"
  },
  {
    "text": "JavaScript bug already right so if we just use the JavaScript to get codex",
    "start": "1794539",
    "end": "1799580"
  },
  {
    "text": "used in the first place we can then use this JavaScript bug again to now get code execution in the network process",
    "start": "1799580",
    "end": "1805100"
  },
  {
    "text": "and we're done except that this doesn't work because this child process interface is always",
    "start": "1805100",
    "end": "1811880"
  },
  {
    "text": "deleted after the child process host the child process host was the one that kills the network process so in 100 like",
    "start": "1811880",
    "end": "1818419"
  },
  {
    "text": "it's impossible to leak the port name before the while the network process is still alive so this didn't work",
    "start": "1818419",
    "end": "1824480"
  },
  {
    "text": "then Sergey glazanov and Mark run from first zero pointed me to this which is",
    "start": "1824480",
    "end": "1830059"
  },
  {
    "text": "HTTP auth static params so there's this other very privileged",
    "start": "1830059",
    "end": "1836600"
  },
  {
    "text": "interface called the network service in in the network process if you talk to",
    "start": "1836600",
    "end": "1842419"
  },
  {
    "text": "the network service you can create a new network context and with the network context you can create your new URL",
    "start": "1842419",
    "end": "1847880"
  },
  {
    "text": "loader Factory which allows you to let create URL loaders and then make HTTP requests",
    "start": "1847880",
    "end": "1853340"
  },
  {
    "text": "part of the network context config options you can say you have",
    "start": "1853340",
    "end": "1858860"
  },
  {
    "text": "these HP all static powers and there's this GSS API Library name and if you read the comments it has",
    "start": "1858860",
    "end": "1865039"
  },
  {
    "text": "something about cameras so whenever you make an HTTP request and it tries to to initiate some cable stuff that gets this",
    "start": "1865039",
    "end": "1872779"
  },
  {
    "text": "HP auth negotiate header or something it will load this library from disk and",
    "start": "1872779",
    "end": "1879080"
  },
  {
    "text": "execute whatever's inside right so if we create our own network context pointing",
    "start": "1879080",
    "end": "1884299"
  },
  {
    "text": "this to a file that we control on the disk of the user for example in the downloads folder and then make a HTTP",
    "start": "1884299",
    "end": "1890240"
  },
  {
    "text": "request that replies with this HP alt header it will load this library and we get",
    "start": "1890240",
    "end": "1896059"
  },
  {
    "text": "code execution except that this also didn't work like I wrote this exploit I can create this",
    "start": "1896059",
    "end": "1901880"
  },
  {
    "text": "network context I can create an ulo directory I can create the URL loader I make it load send an HTTP",
    "start": "1901880",
    "end": "1908179"
  },
  {
    "text": "request to my web server my web server replies but then the response is never processed",
    "start": "1908179",
    "end": "1913700"
  },
  {
    "text": "they'll never get to this to this code um which I think is because something some of this part is happening on the i",
    "start": "1913700",
    "end": "1919100"
  },
  {
    "text": "o thread since we're dossing narrow thread it's also game over there might be some trick in there but I couldn't",
    "start": "1919100",
    "end": "1924740"
  },
  {
    "text": "figure it out so but there's another config option when you create a network context which is",
    "start": "1924740",
    "end": "1930919"
  },
  {
    "text": "where to store cookies you can store cookies on on disk which is also just a",
    "start": "1930919",
    "end": "1936080"
  },
  {
    "text": "file path saying like oh put the cookies in slash temp slash fool or something which will create the sqlite 3 database",
    "start": "1936080",
    "end": "1942919"
  },
  {
    "text": "file on your disk if you then insert the cookie in there it will put like it will just add it to",
    "start": "1942919",
    "end": "1949580"
  },
  {
    "text": "the sqlite3 database file which means this string that you insert will end up somewhere in the middle of the file",
    "start": "1949580",
    "end": "1955220"
  },
  {
    "text": "so if we can find an interpreter that reads the file from disk ignores a bunch",
    "start": "1955220",
    "end": "1963020"
  },
  {
    "text": "of garbage and executes something from the middle then we're good then this is enough because this is our primitive we",
    "start": "1963020",
    "end": "1969559"
  },
  {
    "text": "can create an arbitrary file with content in the middle control content in the middle and we just need",
    "start": "1969559",
    "end": "1974779"
  },
  {
    "text": "to find something that will execute it and there's something on at least on on Linux and on Windows that you can use in",
    "start": "1974779",
    "end": "1982220"
  },
  {
    "text": "particular on on Linux you can use your shell RC for",
    "start": "1982220",
    "end": "1989539"
  },
  {
    "text": "example in my case I'm using my visual C that you might remember this from the beginning of the talk",
    "start": "1989539",
    "end": "1994580"
  },
  {
    "text": "so on the top I'm running this the exploit which needs to spray ports and make create these fake node names and on",
    "start": "1994580",
    "end": "2000880"
  },
  {
    "text": "the bottom I'm watching my Z shell RC file which says it's ASCII text right",
    "start": "2000880",
    "end": "2006100"
  },
  {
    "text": "now which which it should right but then once the expert is finished it just takes a few seconds you will see that it",
    "start": "2006100",
    "end": "2014140"
  },
  {
    "text": "actually turns into sqlite3 database and then my Z shell",
    "start": "2014140",
    "end": "2020019"
  },
  {
    "text": "if it sees this file it will execute something from the middle and you can actually see here in the beginning it",
    "start": "2020019",
    "end": "2025840"
  },
  {
    "text": "will be like what is this command with all these null bytes it's way too long and it will just skip it and continue",
    "start": "2025840",
    "end": "2031539"
  },
  {
    "text": "and then see the new line print the calculator and um yeah",
    "start": "2031539",
    "end": "2038700"
  },
  {
    "text": "and that's the whole that's the whole exploit like my personal takeaway from",
    "start": "2040659",
    "end": "2047440"
  },
  {
    "text": "from this journey because this took quite a while to do so I need to tell myself it was worth doing it",
    "start": "2047440",
    "end": "2054060"
  },
  {
    "text": "is how important this target specific knowledge can be both for for defense and for offense right from a defensive",
    "start": "2054060",
    "end": "2061060"
  },
  {
    "text": "point of view really understanding this how this protocol worked allowed me to find bugs that you you wouldn't find",
    "start": "2061060",
    "end": "2067000"
  },
  {
    "text": "with the fuzzer right like you you can't encode this error condition in a fuzzer I mean you could but you wouldn't know",
    "start": "2067000",
    "end": "2072940"
  },
  {
    "text": "that you have to do it um but on the other hand these from the offense side it's also super useful",
    "start": "2072940",
    "end": "2078580"
  },
  {
    "text": "these Primitives that are very Target specific can be super useful right like like I would",
    "start": "2078580",
    "end": "2084099"
  },
  {
    "text": "have it would have been possible to exploit this third Park I would have given up if I hadn't known already about our crane can create this fake node so I",
    "start": "2084099",
    "end": "2091480"
  },
  {
    "text": "can send over ports and so on but I think the actual real takeaway is that if you ever get stuck",
    "start": "2091480",
    "end": "2099520"
  },
  {
    "text": "if you ever get stuck uh just take a break watch hackers and well",
    "start": "2099520",
    "end": "2106000"
  },
  {
    "text": "hackers hackers might just have the answers for you thank you",
    "start": "2106000",
    "end": "2111420"
  },
  {
    "text": "we have a few minutes for questions left please go to the microphone if you if",
    "start": "2114880",
    "end": "2120579"
  },
  {
    "text": "you have a question",
    "start": "2120579",
    "end": "2123240"
  },
  {
    "text": "you can also reach me on Twitter or in the Overflow room afterwards",
    "start": "2126339",
    "end": "2132599"
  },
  {
    "text": "thank you [Applause]",
    "start": "2136920",
    "end": "2143579"
  },
  {
    "text": "[Music]",
    "start": "2146350",
    "end": "2149440"
  }
]