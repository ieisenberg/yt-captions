[
  {
    "start": "0",
    "end": "48000"
  },
  {
    "text": "this is Stefan with his talk on iOS Colonel Heap Armageddon let's give it up for",
    "start": "10759",
    "end": "16559"
  },
  {
    "text": "Stefan uh thank you it's okay okay uh so um let's get started I have far too many",
    "start": "20560",
    "end": "28000"
  },
  {
    "text": "slides so uh I hope I'm not too fast um yeah the the title of the talk is iest",
    "start": "28000",
    "end": "36440"
  },
  {
    "text": "Colonel Heap armag Get on um because it's um showing a lot of stuff about the",
    "start": "36440",
    "end": "41640"
  },
  {
    "text": "iOS kernel Heap and some new way or yeah to exploit the I colel",
    "start": "41640",
    "end": "48199"
  },
  {
    "start": "48000",
    "end": "59000"
  },
  {
    "text": "Heap yeah I can skip through that I'm I'm from Germany I'm from cologne and in",
    "start": "48199",
    "end": "53399"
  },
  {
    "text": "the past I did a lot of PHP stuff now I do iOS stuffff and",
    "start": "53399",
    "end": "58680"
  },
  {
    "text": "yeah okay in the beginning a little bit uh a small disclaimer so I might mention",
    "start": "58680",
    "end": "64600"
  },
  {
    "start": "59000",
    "end": "96000"
  },
  {
    "text": "iOS 6 throughout the talk several times um so whatever I say about iOS 6 is uh",
    "start": "64600",
    "end": "71560"
  },
  {
    "text": "well maybe changing tomorrow because iOS 6 is uh in beta and uh because the beta",
    "start": "71560",
    "end": "77240"
  },
  {
    "text": "is only reg uh available to the registered iOS developers I would be on",
    "start": "77240",
    "end": "82360"
  },
  {
    "text": "N if I like talk about iOS 6 but I don't have an iOS Developer account so I",
    "start": "82360",
    "end": "88640"
  },
  {
    "text": "cannot break the NDA so everything I I talk is basically information that was leaked to",
    "start": "88640",
    "end": "95560"
  },
  {
    "start": "96000",
    "end": "133000"
  },
  {
    "text": "me okay so uh why this talk um when when you look at the the past research of the",
    "start": "96200",
    "end": "103240"
  },
  {
    "text": "iOS kernel Heap you will see that uh basically uh it was always similar based",
    "start": "103240",
    "end": "109000"
  },
  {
    "text": "on the work from neemo uh who did this for uh mechos um so in iest it's a lot similar",
    "start": "109000",
    "end": "117000"
  },
  {
    "text": "so there is a kernel Heap Zone allocator uh it comes with Heap meta data uh this",
    "start": "117000",
    "end": "123479"
  },
  {
    "text": "can be exploited and this is one possible way so basically everything that was said before about the iOS",
    "start": "123479",
    "end": "129840"
  },
  {
    "text": "kernel he was exactly summarized like that so I want to talk about something",
    "start": "129840",
    "end": "136000"
  },
  {
    "start": "133000",
    "end": "198000"
  },
  {
    "text": "different so of course in in the beginning I will just wrap up the what's known be beforehand about the iOS kernel",
    "start": "136000",
    "end": "142599"
  },
  {
    "text": "Zone allocator and um but I will talk about other kernel heat managers and",
    "start": "142599",
    "end": "147800"
  },
  {
    "text": "reppers that are existing uh about recent changes in these allocators um about the idea to have",
    "start": "147800",
    "end": "156879"
  },
  {
    "text": "cross Zone attacks uh I will get into this later what what is meant by that",
    "start": "156879",
    "end": "164439"
  },
  {
    "text": "and we know that from like user space Heap exploitation nowadays you don't go",
    "start": "165159",
    "end": "170440"
  },
  {
    "text": "after the Heap meta data you go after the uh application data and so I will talk about some kind of uh kernel",
    "start": "170440",
    "end": "178360"
  },
  {
    "text": "application data that that you can override to get code execution and in the end I will present a generic Heap",
    "start": "178360",
    "end": "185560"
  },
  {
    "text": "massage technique for the iOS kernel Heap well much similar to what you do",
    "start": "185560",
    "end": "190920"
  },
  {
    "text": "with JavaScript and browsers okay let's get into this Zone",
    "start": "190920",
    "end": "196519"
  },
  {
    "text": "allocator quite fast so the idea of the Zone allocator inside the kernel is that",
    "start": "196519",
    "end": "203000"
  },
  {
    "start": "198000",
    "end": "291000"
  },
  {
    "text": "the kernel Heap is uh divided into uh so-called zones and each Zone start with",
    "start": "203000",
    "end": "210000"
  },
  {
    "text": "a first chunk of memory and it's usually like one page but it can also be multiple Pages depends on the definition",
    "start": "210000",
    "end": "217200"
  },
  {
    "text": "of the zone so when you want to see what zones are existing there's a tool called set",
    "start": "217200",
    "end": "224080"
  },
  {
    "text": "print which also works on uh meos and when you uh execute that command it will",
    "start": "224080",
    "end": "231560"
  },
  {
    "text": "show you um yeah all the zones",
    "start": "231560",
    "end": "238680"
  },
  {
    "text": "um yeah and you can see here that there's a lot of information about each Zone first you have the name of the zone",
    "start": "238680",
    "end": "246000"
  },
  {
    "text": "you have the size of the elements in the zone um the current size of all the",
    "start": "246000",
    "end": "251280"
  },
  {
    "text": "memory that is allocated to the Zone uh the maximum size for this Zone yeah the number of elements the number the",
    "start": "251280",
    "end": "259040"
  },
  {
    "text": "maximum number of elements how many of these elements are in use at the moment the allocation size uh this is basically",
    "start": "259040",
    "end": "265639"
  },
  {
    "text": "what I meant uh you see a lot of 4K these are all the zones that have one page uh yeah Zone uh Zone elements and",
    "start": "265639",
    "end": "276039"
  },
  {
    "text": "uh there's some zones that have a they up bigger so every time the Zone has to be increased in size they will allocate",
    "start": "276039",
    "end": "282919"
  },
  {
    "text": "more than one page but the majority of zones are just 4K",
    "start": "282919",
    "end": "290039"
  },
  {
    "text": "zones so here's the first time I mentioned iOS 6 so basically this set",
    "start": "290919",
    "end": "296160"
  },
  {
    "start": "291000",
    "end": "356000"
  },
  {
    "text": "print tool is uh based on some uh ma apis that give all this information to",
    "start": "296160",
    "end": "303280"
  },
  {
    "text": "user space and uh in iOS 6 Apple has closed",
    "start": "303280",
    "end": "308639"
  },
  {
    "text": "these uh apis uh by checking if uh yeah the function PE I can has debugger so",
    "start": "308639",
    "end": "316759"
  },
  {
    "text": "this should be only true on Apple debugging Hardware that most probably exists and on jailbroken devices so on a",
    "start": "316759",
    "end": "324800"
  },
  {
    "text": "on a factory U you shouldn't be able to execute that on a factory device",
    "start": "324800",
    "end": "330639"
  },
  {
    "text": "so therefore it's no longer usable for kernel Heap exploits so in the past this was used because it gives all these",
    "start": "330639",
    "end": "337639"
  },
  {
    "text": "information uh like I go back so it gives you like the elements the current number of elements and so and so on so",
    "start": "337639",
    "end": "344319"
  },
  {
    "text": "it's very nice to know this information if you want to do heat massaging but Apple has closed that",
    "start": "344319",
    "end": "351479"
  },
  {
    "text": "road so now you have to use different techniques okay so that's continue with",
    "start": "351720",
    "end": "359880"
  },
  {
    "text": "the zone allocator so basically we had like allocators this first page and now uh this zone is div divided into memory",
    "start": "359880",
    "end": "366800"
  },
  {
    "text": "blocks of the same size for example we have a Zone where each element is in this case uh 512 bytes in size so uh",
    "start": "366800",
    "end": "377080"
  },
  {
    "text": "each element in inside the zone is uh 512 uh bytes and once this is divided logically",
    "start": "377080",
    "end": "386280"
  },
  {
    "text": "then um the heat manager like uh ensures that it's remembers these blocks and um",
    "start": "386280",
    "end": "392039"
  },
  {
    "text": "the first four bytes of each free Block is a pointer to another free Block so",
    "start": "392039",
    "end": "398280"
  },
  {
    "text": "each time a new uh page is added to the Zone um it will add all these uh new",
    "start": "398280",
    "end": "407199"
  },
  {
    "text": "free blocks to a fre list and it does that in",
    "start": "407199",
    "end": "412840"
  },
  {
    "text": "uh yeah it does that in the opposite direction no it builds the Freel list so",
    "start": "412840",
    "end": "419199"
  },
  {
    "text": "it first puts in the first element and so on and of course therefore the head of the free list at the end is the last",
    "start": "419199",
    "end": "425720"
  },
  {
    "text": "one that was uh inserted and therefore uh the memory is actually used backwards",
    "start": "425720",
    "end": "432400"
  },
  {
    "text": "so the first time you allocate you get like the last element and the next and so on so when you allocate memory it's",
    "start": "432400",
    "end": "438879"
  },
  {
    "text": "not like you allocate something and then the next element would be afterwards it's before in a completely fresh",
    "start": "438879",
    "end": "448120"
  },
  {
    "text": "Zone yeah so uh of course there's this free",
    "start": "448319",
    "end": "454520"
  },
  {
    "text": "list and when memory is allocated uh the allocator looks into the head of the free list that is stored in the zone",
    "start": "454520",
    "end": "461280"
  },
  {
    "text": "structure and this points to a free block and what happens now is it will",
    "start": "461280",
    "end": "467240"
  },
  {
    "text": "take the first 4 byte of this block and um",
    "start": "467240",
    "end": "472639"
  },
  {
    "text": "yeah because that is the pointer to the next element it will take this pointer make this the new head of the free list",
    "start": "472639",
    "end": "478400"
  },
  {
    "text": "and then it will return the free",
    "start": "478400",
    "end": "482039"
  },
  {
    "text": "Block so in case of a buffer overflow uh from one um yeah allocated memory block",
    "start": "485000",
    "end": "493639"
  },
  {
    "text": "into a free memory block you can of course override the uh the the the",
    "start": "493639",
    "end": "499000"
  },
  {
    "text": "pointer to the next element in the free list and therefore you control the uh next pointer that's returned when um no",
    "start": "499000",
    "end": "508479"
  },
  {
    "text": "when this element that is was free when this is returned by The Zone allocator then you overrode the first four bytes",
    "start": "508479",
    "end": "515399"
  },
  {
    "text": "and that means at this point this first four bytes will become the head of the free list so you basically control uh",
    "start": "515399",
    "end": "521719"
  },
  {
    "text": "where the next uh allocation well no what memory block is returned as the next memory block for",
    "start": "521719",
    "end": "527600"
  },
  {
    "text": "the allocation so of course Apple has seen",
    "start": "527600",
    "end": "532959"
  },
  {
    "text": "all this and um now in iOS 6 they have changed this this a little bit",
    "start": "532959",
    "end": "541200"
  },
  {
    "start": "533000",
    "end": "629000"
  },
  {
    "text": "so you must know in the past there were already some debugging code that would like do more checks and uh overwrite all",
    "start": "541560",
    "end": "548560"
  },
  {
    "text": "the memory and uh use some kind of tagging but this was always disabled on on Factory phones and now in the I6",
    "start": "548560",
    "end": "556680"
  },
  {
    "text": "betas it seems to be that there's now A Memory tagging that uh writes a fixed value",
    "start": "556680",
    "end": "565160"
  },
  {
    "text": "after the uh freelist pointer this doesn't stop the exploitation at all it only stops",
    "start": "565160",
    "end": "572440"
  },
  {
    "text": "the exact Vector that were used uh in all the public IO exploits so what was",
    "start": "572440",
    "end": "578680"
  },
  {
    "text": "done in all these public iOS Heap exploit is they would like make the head of the free list some pointer in the",
    "start": "578680",
    "end": "584880"
  },
  {
    "text": "middle of the cisal table and uh then the next allocation would return actually a poter inside the cisal table",
    "start": "584880",
    "end": "591160"
  },
  {
    "text": "and the next when the colonel writes data into this memory block then the cisal table is overwritten and you can",
    "start": "591160",
    "end": "596959"
  },
  {
    "text": "control where the codes execution goes and and of course because um now there's this memory tagging and",
    "start": "596959",
    "end": "604680"
  },
  {
    "text": "you don't have this TCH value somewhere in the CSCO table you cannot return a pointer inside the cisal table anymore",
    "start": "604680",
    "end": "610279"
  },
  {
    "text": "so this just fixes this one path but still a lot of other ways to exploit this are",
    "start": "610279",
    "end": "616760"
  },
  {
    "text": "open Okay so this was all this information well except for the iOS 6 uh",
    "start": "617399",
    "end": "622720"
  },
  {
    "text": "additions so this is the information that is basically public until",
    "start": "622720",
    "end": "627839"
  },
  {
    "text": "today oh well actually everything here is public because I gave this talk before",
    "start": "628040",
    "end": "634040"
  },
  {
    "start": "629000",
    "end": "722000"
  },
  {
    "text": "but uh this is basically that was this was the information that was originally maybe done by Nemo and then ported by me",
    "start": "634040",
    "end": "640440"
  },
  {
    "text": "to iOS and this is was the last year everybody was talking about this is was used by all these public jailbreaks at",
    "start": "640440",
    "end": "647560"
  },
  {
    "text": "the moment so now let's look at the other mappers and",
    "start": "647560",
    "end": "653759"
  },
  {
    "text": "rappers so this is not a complete list but you can see here there's a bunch of",
    "start": "655880",
    "end": "662000"
  },
  {
    "text": "function inside the kernel that get used to allocate memory uh on the right side on the left",
    "start": "662000",
    "end": "668200"
  },
  {
    "text": "side for example you see some operators new and um new array this is because",
    "start": "668200",
    "end": "673760"
  },
  {
    "text": "there's some C++ inside the kernel so but you can see there that this basically use Kern o malog and this in",
    "start": "673760",
    "end": "681680"
  },
  {
    "text": "again uses kog and so on and you can see uh what function inside the kernel calls",
    "start": "681680",
    "end": "687240"
  },
  {
    "text": "another function and in the end most of this ends in kernel memory allocate or",
    "start": "687240",
    "end": "693560"
  },
  {
    "text": "in uh set aloc which itself are they they",
    "start": "693560",
    "end": "701800"
  },
  {
    "text": "interworked themselves so um this is basically uh what you need to know there's like this hery of uh of uh",
    "start": "701800",
    "end": "709079"
  },
  {
    "text": "memory mappers but most of them are just reppers and uh they call other memory",
    "start": "709079",
    "end": "716000"
  },
  {
    "text": "members let's start uh with looking at k",
    "start": "716200",
    "end": "721240"
  },
  {
    "text": "alog k allog is basically uh a repper around either set aloc or km aloc and it",
    "start": "721839",
    "end": "729399"
  },
  {
    "start": "722000",
    "end": "857000"
  },
  {
    "text": "adds no additional Heap meta data so uh it's most probably not interesting uh to look at it for",
    "start": "729399",
    "end": "736560"
  },
  {
    "text": "exploitation purose because there's no extra heat meta data uh the special",
    "start": "736560",
    "end": "741920"
  },
  {
    "text": "thing here is um whenever you use set aloc you need to know um a Zone this",
    "start": "741920",
    "end": "749399"
  },
  {
    "text": "memory block is stored in and because K allows you to um allocate arbitrary",
    "start": "749399",
    "end": "755320"
  },
  {
    "text": "sizes uh the caller has to keep track of uh the allocated size so that it can uh",
    "start": "755320",
    "end": "762560"
  },
  {
    "text": "when it free the element that that the allocator still knows in what zone this uh memory was put in so and the thing is",
    "start": "762560",
    "end": "770320"
  },
  {
    "text": "for small uh memory requests the zone allocator is used and for bigger request",
    "start": "770320",
    "end": "775480"
  },
  {
    "text": "the km alloc is used and uh like I said before kog needs",
    "start": "775480",
    "end": "781120"
  },
  {
    "text": "to determine the zone and basically kog creates a bunch of own zones you can see",
    "start": "781120",
    "end": "787480"
  },
  {
    "text": "these zones with uh uh set print again and this is like an output from",
    "start": "787480",
    "end": "793240"
  },
  {
    "text": "iOS 5 so you can see there's a bunch of zones and uh nowadays uh these zones are",
    "start": "793240",
    "end": "800240"
  },
  {
    "text": "not necessar powers of two in the past there were only powers of two starting",
    "start": "800240",
    "end": "806199"
  },
  {
    "text": "with 16 now there is um they're starting at 8 bytes and have some completely uh",
    "start": "806199",
    "end": "816360"
  },
  {
    "text": "yeah not power of two numbers in there like 48 or 112 88 and so on um well the",
    "start": "816360",
    "end": "823800"
  },
  {
    "text": "IDE I guess the the reason for that is that uh there's a b there's a lot of memory allocated in these intermediate",
    "start": "823800",
    "end": "830440"
  },
  {
    "text": "zones and uh by making the stone size smaller the the element size um you",
    "start": "830440",
    "end": "836199"
  },
  {
    "text": "don't waste so much money uh memory and so there is better for like a mobile device",
    "start": "836199",
    "end": "842160"
  },
  {
    "text": "um yeah as I as I said in in earlier talks uh changing the smallest block to",
    "start": "842160",
    "end": "847279"
  },
  {
    "text": "8 bytes is actually quite useful for some exploit uh exploits",
    "start": "847279",
    "end": "852639"
  },
  {
    "text": "um yeah okay so like I said before there's",
    "start": "852639",
    "end": "860320"
  },
  {
    "start": "857000",
    "end": "962000"
  },
  {
    "text": "kog and there's Carefree for freeing the memory again and there's some kind of",
    "start": "860320",
    "end": "865920"
  },
  {
    "text": "protection in this whole Kree code pass uh because um in the end when it free",
    "start": "865920",
    "end": "872360"
  },
  {
    "text": "memory there's it keeps track of the largest allocated memory blck actually uh the the memory maper below that the",
    "start": "872360",
    "end": "879560"
  },
  {
    "text": "km memory allocate is doing that um so they keep track of the largest allocated",
    "start": "879560",
    "end": "886279"
  },
  {
    "text": "memory block and if you try to freeze something that is larger than this block this is just a knob so it will just",
    "start": "886279",
    "end": "891639"
  },
  {
    "text": "ignore be ignored so this will also not crash it will just be a",
    "start": "891639",
    "end": "897160"
  },
  {
    "text": "knob and uh I think it increases the counter inside the kernel but I don't think anybody cares about this",
    "start": "897160",
    "end": "905240"
  },
  {
    "text": "counter okay uh so kog didn't bring any kind of heat meta data so it didn't it's",
    "start": "906040",
    "end": "911839"
  },
  {
    "text": "just a repper and not not interesting for",
    "start": "911839",
    "end": "915920"
  },
  {
    "text": "exploitation but there's another memory M memory allocator called uncore",
    "start": "917240",
    "end": "922480"
  },
  {
    "text": "Malo and this is again a repper around kog and it add um EX raw Heap metad data",
    "start": "922480",
    "end": "930199"
  },
  {
    "text": "to the uh allocated memory block and this is like um it add a 4 byte header",
    "start": "930199",
    "end": "936120"
  },
  {
    "text": "which contains the size of the block so uh the the collar of um malog",
    "start": "936120",
    "end": "942399"
  },
  {
    "text": "doesn't need to keep track of the allocated size because the allocated size is basically inside the block itself and there's a special specialty",
    "start": "942399",
    "end": "949880"
  },
  {
    "text": "about this function uh unless K allog it doesn't allow you to allocate zero bytes",
    "start": "949880",
    "end": "954920"
  },
  {
    "text": "uh memory blocks so if you if you do a um maloc of of zero bytes it will return",
    "start": "954920",
    "end": "960240"
  },
  {
    "text": "a null pointer uh and you can see that here inside the code for U MOG in iOS 4 and",
    "start": "960240",
    "end": "969759"
  },
  {
    "start": "962000",
    "end": "990000"
  },
  {
    "text": "uh this is just like a slide showing that in iOS 4 there was a possible integer overflow in inside this function",
    "start": "969759",
    "end": "977480"
  },
  {
    "text": "that was silently fixed in iOS 5 and you can also see that uh a request",
    "start": "977480",
    "end": "984000"
  },
  {
    "text": "of n null byes is uh returned is answered with a null pointer",
    "start": "984000",
    "end": "990519"
  },
  {
    "start": "990000",
    "end": "1098000"
  },
  {
    "text": "yeah and as I said before in iOS 5 they now check for uh this buffer overflow uh",
    "start": "990600",
    "end": "996199"
  },
  {
    "text": "this integer overflow that could lead to buff overflows um and now the difference",
    "start": "996199",
    "end": "1001240"
  },
  {
    "text": "is uh basically you can no longer achieve ex code execution through through these kind of attacks so if you",
    "start": "1001240",
    "end": "1008120"
  },
  {
    "text": "can control the argument to malok the SES argument and put something very large inside you can only cause a kernel",
    "start": "1008120",
    "end": "1017360"
  },
  {
    "text": "panic okay so what happens when you overwrite",
    "start": "1017480",
    "end": "1023839"
  },
  {
    "text": "uh data that is uh um allocated by amalog it's um yeah you can only",
    "start": "1023839",
    "end": "1030558"
  },
  {
    "text": "overwrite uh the size field which because it's the only exter metadata and",
    "start": "1030559",
    "end": "1036400"
  },
  {
    "text": "uh this allows you two different things if you write a value in there that is",
    "start": "1036400",
    "end": "1041798"
  },
  {
    "text": "smaller then um when it's returned to the memory you basically leak memory",
    "start": "1041799",
    "end": "1048558"
  },
  {
    "text": "because it will be uh the large buffer will be returned into a Zone that's",
    "start": "1048559",
    "end": "1053679"
  },
  {
    "text": "supposed to have smaller memory elements so there's a lot of memory that leaked in this case and in the other case if",
    "start": "1053679",
    "end": "1060400"
  },
  {
    "text": "you write a bigger value in there then uh the memory memor will return it to the wrong Zone which is uh expecting",
    "start": "1060400",
    "end": "1069000"
  },
  {
    "text": "larger memory blocks than this actually is so this means the next time this fake",
    "start": "1069000",
    "end": "1074039"
  },
  {
    "text": "element in this in this bigger zone is returned and the colonel rides into it it's actually writing into a Zone",
    "start": "1074039",
    "end": "1080559"
  },
  {
    "text": "element that is supposed to be much smaller and then you can like then you have a normal buff",
    "start": "1080559",
    "end": "1087200"
  },
  {
    "text": "overflow okay so as I mentioned before there's this k k OS malog and new and",
    "start": "1089320",
    "end": "1095640"
  },
  {
    "text": "new array and they are very similar like MOG",
    "start": "1095640",
    "end": "1101760"
  },
  {
    "start": "1098000",
    "end": "1167000"
  },
  {
    "text": "especially the can or is malog it's more it's looks a little bit like copy and paste which means there also uh copied",
    "start": "1101760",
    "end": "1109840"
  },
  {
    "text": "the integer overflow and they didn't fix that integer overflow in this position",
    "start": "1109840",
    "end": "1115559"
  },
  {
    "text": "so um if you find a place where you can uh yeah influence the the size argument",
    "start": "1115559",
    "end": "1121360"
  },
  {
    "text": "to K or Malo you can still trigger this uh integer over flow and yeah exploit it",
    "start": "1121360",
    "end": "1126559"
  },
  {
    "text": "possibly I think at the moment uh there is no such call but maybe in the future well I guess tomorrow this Buck is fixed",
    "start": "1126559",
    "end": "1134440"
  },
  {
    "text": "uh anyway so um yeah but asid from that it's very",
    "start": "1134440",
    "end": "1141159"
  },
  {
    "text": "similar to um to Moc and the uh operators new and new array just uh wrap",
    "start": "1141159",
    "end": "1148600"
  },
  {
    "text": "around it ah yeah there's a special case for the new array uh",
    "start": "1148600",
    "end": "1155000"
  },
  {
    "text": "allocator uh because when you try to register an array of zero bytes uh of",
    "start": "1155000",
    "end": "1161559"
  },
  {
    "text": "zero elements then it will return a buffer of one",
    "start": "1161559",
    "end": "1166200"
  },
  {
    "text": "bite okay so the next thing is this uh mcage slap allocator and um that is very",
    "start": "1166919",
    "end": "1173080"
  },
  {
    "start": "1167000",
    "end": "1183000"
  },
  {
    "text": "complicated and doesn't fit into this talk because otherwise I can talk like for hours and um so maybe in the future",
    "start": "1173080",
    "end": "1181919"
  },
  {
    "text": "this is a talk by itself and uh so the last one that was interesting here is this kernel memory",
    "start": "1181919",
    "end": "1188600"
  },
  {
    "start": "1188000",
    "end": "1241000"
  },
  {
    "text": "allocate but when you look at it um I think Apple I think there is a quote",
    "start": "1188600",
    "end": "1194200"
  },
  {
    "text": "from the Apple Source Code it's called The Master entry point for allocating kernel memory and um it all allocates uh a memory in",
    "start": "1194200",
    "end": "1202400"
  },
  {
    "text": "specific memory maps and it always allocates uh whole pages and uh if you",
    "start": "1202400",
    "end": "1208039"
  },
  {
    "text": "request a lot of memory more than one me gigabyte it will fail and just return an",
    "start": "1208039",
    "end": "1213760"
  },
  {
    "text": "all pointer I believe it returns a n pointer and doesn't crash um yeah and it keeps",
    "start": "1213760",
    "end": "1220880"
  },
  {
    "text": "metadata but it keeps that in in a different position than the memory itself so the me the key the meta data",
    "start": "1220880",
    "end": "1226120"
  },
  {
    "text": "is outbound and not inbound so when you overflow some block that was allocated",
    "start": "1226120",
    "end": "1231200"
  },
  {
    "text": "with kernel memory allocate you're not accidentally overwriting the The Meta data so this seems very uninteresting",
    "start": "1231200",
    "end": "1238240"
  },
  {
    "text": "for now okay so the next thing that I was",
    "start": "1238240",
    "end": "1243880"
  },
  {
    "start": "1241000",
    "end": "1330000"
  },
  {
    "text": "interested in is okay we now we know how to exploit the attacks against the Zone",
    "start": "1243880",
    "end": "1249320"
  },
  {
    "text": "allocator but what about for example I have an overflow in a um kog 32 bit by",
    "start": "1249320",
    "end": "1257080"
  },
  {
    "text": "uh Zone what about um another Zone maybe there's",
    "start": "1257080",
    "end": "1262280"
  },
  {
    "text": "something interesting like like a a function table that is stored in a in a Zone that's called a blop and it's also",
    "start": "1262280",
    "end": "1269480"
  },
  {
    "text": "32 bytes so another question is can I like or a different size so question is",
    "start": "1269480",
    "end": "1275120"
  },
  {
    "text": "can I see if these zones are in memory uh right next to each other is a position like uh yeah can I massage the",
    "start": "1275120",
    "end": "1283039"
  },
  {
    "text": "Heap in a way that uh one zone is exactly behind the other and so on so I",
    "start": "1283039",
    "end": "1288760"
  },
  {
    "text": "did some experiments yeah okay that's what I said so I want to see what's the what's the",
    "start": "1288760",
    "end": "1295240"
  },
  {
    "text": "position the relative position of Kernel zones to each other um what's the",
    "start": "1295240",
    "end": "1300760"
  },
  {
    "text": "position of pages inside the same kernel zone so if I have like a full page and I",
    "start": "1300760",
    "end": "1306600"
  },
  {
    "text": "overflow the last block inside a page what will happen will it crash because there's no memory afterwards or can I uh",
    "start": "1306600",
    "end": "1314480"
  },
  {
    "text": "abuse the memory manager in a way so that the next Zone that is ADD add to this uh that next page that added to",
    "start": "1314480",
    "end": "1320520"
  },
  {
    "text": "this zone is basically in memory behind it yeah and what is about can I do a",
    "start": "1320520",
    "end": "1327000"
  },
  {
    "text": "kernel level Heap spray so okay so what I did is I did an",
    "start": "1327000",
    "end": "1332760"
  },
  {
    "start": "1330000",
    "end": "1393000"
  },
  {
    "text": "experiment I patched an iOS kernel to give me directly access to the",
    "start": "1332760",
    "end": "1340200"
  },
  {
    "text": "K aloc function uh no t aloc no K kog to the",
    "start": "1340200",
    "end": "1346480"
  },
  {
    "text": "KOC function and basically from user space I could just call kalloc and it would return the the pointer to user",
    "start": "1346480",
    "end": "1352240"
  },
  {
    "text": "space so I can see what pointers are returned by kalloc easily and what you",
    "start": "1352240",
    "end": "1357600"
  },
  {
    "text": "can see in iOS 5 is that everything that is returned is between these uh values",
    "start": "1357600",
    "end": "1362799"
  },
  {
    "text": "uh eight uh 0 and um and so on and eight f f f f f f f f f uh basically you can",
    "start": "1362799",
    "end": "1371000"
  },
  {
    "text": "like make it even smaller um but let's let it like this and what I wanted to do",
    "start": "1371000",
    "end": "1377039"
  },
  {
    "text": "is I wanted to visualize where in memory are these allocations so I just wrote a simple",
    "start": "1377039",
    "end": "1384320"
  },
  {
    "text": "user space uh tool that would allocate 48 megabytes of Kernel memory and then",
    "start": "1384320",
    "end": "1389440"
  },
  {
    "text": "just visualize where in memory these pages are so in the beginning you don't",
    "start": "1389440",
    "end": "1395120"
  },
  {
    "start": "1393000",
    "end": "1480000"
  },
  {
    "text": "see much after like 100 allocations I think you cannot see it so good there's",
    "start": "1395120",
    "end": "1401240"
  },
  {
    "text": "some in the lower third maybe there are some red dots and all over the place",
    "start": "1401240",
    "end": "1406799"
  },
  {
    "text": "there's some smaller dots but yeah there's b a line okay but now do more allocations",
    "start": "1406799",
    "end": "1414080"
  },
  {
    "text": "you can I don't know if can you see that I yeah because from here it looks",
    "start": "1414080",
    "end": "1419559"
  },
  {
    "text": "like uh you cannot see it because the color is too bad okay so I I would just do more allocations and you can see it",
    "start": "1419559",
    "end": "1425520"
  },
  {
    "text": "gets readed more and more and more and but it's basically all over the",
    "start": "1425520",
    "end": "1432279"
  },
  {
    "text": "place okay",
    "start": "1436880",
    "end": "1442799"
  },
  {
    "text": "so oh no there was the last one okay so you can see uh basically the pages that",
    "start": "1442799",
    "end": "1448360"
  },
  {
    "text": "were returned are completely um distributed over the uh area of course",
    "start": "1448360",
    "end": "1454679"
  },
  {
    "text": "in the beginning there this black box because it's like actually the kernel image and the Heap is behind that um",
    "start": "1454679",
    "end": "1461640"
  },
  {
    "text": "what's interesting here is while it's very random you can see that there are clusters so in the top there's it's very",
    "start": "1461640",
    "end": "1468320"
  },
  {
    "text": "very much red so it seems that why also it seems random um actually there's a",
    "start": "1468320",
    "end": "1474520"
  },
  {
    "text": "high uh probability that the memory is up there so what I did next is I saw okay",
    "start": "1474520",
    "end": "1483919"
  },
  {
    "text": "and now let's try that again try this actually 25 times which is very hard if",
    "start": "1483919",
    "end": "1491840"
  },
  {
    "text": "you uh have to do 25 times in going to DF mode and uh the lime rain exploit and",
    "start": "1491840",
    "end": "1498440"
  },
  {
    "text": "then like boot this patched kernel and so on so that took a while um but in the end I had all these results and now",
    "start": "1498440",
    "end": "1505880"
  },
  {
    "text": "tried to like overlay the results so what I did now is I just uh added all",
    "start": "1505880",
    "end": "1511480"
  },
  {
    "text": "the pixel to each other and divide them by the um yeah 25",
    "start": "1511480",
    "end": "1517080"
  },
  {
    "text": "reboots so you can see here um there's still in average there's still a large",
    "start": "1517080",
    "end": "1524000"
  },
  {
    "text": "cluster in the beginning which is very red so uh the memory is quite often returned up",
    "start": "1524000",
    "end": "1531760"
  },
  {
    "text": "there so the next thing I did was okay now let's check if actually the memory",
    "start": "1532159",
    "end": "1538559"
  },
  {
    "text": "pages that are returned are common so is there one page or is a set of pages that",
    "start": "1538559",
    "end": "1544799"
  },
  {
    "text": "is returned in all 25 reboots and yeah in 25 reboots I found one page that was",
    "start": "1544799",
    "end": "1550720"
  },
  {
    "text": "always allocated problem was then I tried this six 26 time and then it was",
    "start": "1550720",
    "end": "1555880"
  },
  {
    "text": "not allocated so uh basically basically that means",
    "start": "1555880",
    "end": "1561039"
  },
  {
    "text": "um um yeah you cannot have one fixed address that you baby hard Cod and you",
    "start": "1561039",
    "end": "1568520"
  },
  {
    "text": "cannot ensure that uh with a lot of uh um allocated memory that you actually",
    "start": "1568520",
    "end": "1573640"
  },
  {
    "text": "have allocated this this piece of memory so Heap",
    "start": "1573640",
    "end": "1580799"
  },
  {
    "text": "spraying is basically not really feasible however I forgot that to say",
    "start": "1580799",
    "end": "1586679"
  },
  {
    "text": "that on the first slide the problem here is this only or the good thing here is this only applies to the the zones that",
    "start": "1586679",
    "end": "1593399"
  },
  {
    "text": "are single page zone so this only applies to these zones where one page is",
    "start": "1593399",
    "end": "1598799"
  },
  {
    "text": "all added to to the Zone when the me memory run out runs out",
    "start": "1598799",
    "end": "1604320"
  },
  {
    "text": "um memory that's allocated in in in zones where there are multiple pages is",
    "start": "1604320",
    "end": "1609399"
  },
  {
    "text": "um handled differently and it usually are Pointers above c",
    "start": "1609399",
    "end": "1616399"
  },
  {
    "text": "00000000 yeah",
    "start": "1616399",
    "end": "1619600"
  },
  {
    "text": "yeah uh actually uh I so so far I only did these experiments I didn't search",
    "start": "1632320",
    "end": "1637799"
  },
  {
    "text": "for this Randomness so far I didn't find this code by accident or so but uh I",
    "start": "1637799",
    "end": "1643440"
  },
  {
    "text": "didn't explicitly search for this uh okay so what I wanted to say here",
    "start": "1643440",
    "end": "1650799"
  },
  {
    "text": "there's other zones where there are multiple Pages allocated at once um and",
    "start": "1650799",
    "end": "1657760"
  },
  {
    "text": "these zones basically are allocated above C",
    "start": "1657760",
    "end": "1664240"
  },
  {
    "text": "00000000 and um those are actually at sent so if you",
    "start": "1664240",
    "end": "1671159"
  },
  {
    "text": "uh if you choose memory from these zones you can do a a heap spray and actually have predictable addresses",
    "start": "1671159",
    "end": "1679519"
  },
  {
    "text": "okay this is all only true for um iOS 5 so with iOS 6 there's this kernal",
    "start": "1680240",
    "end": "1686360"
  },
  {
    "text": "rlr um I'm not a developer so I didn't test it yet um it might be now different",
    "start": "1686360",
    "end": "1692799"
  },
  {
    "text": "uh so that's you cannot ever rely on on a heap spraying in this",
    "start": "1692799",
    "end": "1698200"
  },
  {
    "text": "case Okay so the result from this is uh you cannot just overflow out of outside",
    "start": "1698960",
    "end": "1704360"
  },
  {
    "text": "of a Zone page because there's a high probability that the memory after this page is actually not allocated so if you",
    "start": "1704360",
    "end": "1710960"
  },
  {
    "text": "overflow at the end of a page then it will just crash so all your attacks must be always",
    "start": "1710960",
    "end": "1717760"
  },
  {
    "text": "in the same page um and then the question",
    "start": "1717760",
    "end": "1724519"
  },
  {
    "start": "1720000",
    "end": "1764000"
  },
  {
    "text": "was yeah when you look at Cross memory allocator attacks like I have one memory block that's allocated with kalloc and",
    "start": "1724519",
    "end": "1730919"
  },
  {
    "text": "the other one is like allocated with curent Os malog or so so the question is uh if I overflow this one memory block",
    "start": "1730919",
    "end": "1737799"
  },
  {
    "text": "from from one allocator can I overflow into the other one and the answer is yes that it's possible because uh uh yeah",
    "start": "1737799",
    "end": "1745120"
  },
  {
    "text": "it's possible for all those allocators that basically in the end all call it set allog allocator like you can",
    "start": "1745120",
    "end": "1751120"
  },
  {
    "text": "overflow memory from new uh so you can override objects from a kog area and so",
    "start": "1751120",
    "end": "1759120"
  },
  {
    "text": "on and that that's what brought me to the next idea so now the question is um",
    "start": "1759200",
    "end": "1765480"
  },
  {
    "start": "1764000",
    "end": "1789000"
  },
  {
    "text": "I don't want to attack Heap um metad data I want to attack Keep application",
    "start": "1765480",
    "end": "1772559"
  },
  {
    "text": "data and so in this case I do a C++ object case study um of course there",
    "start": "1772559",
    "end": "1779559"
  },
  {
    "text": "could be other kinds of things inside the kernel like maybe function tables that you can overwrite but for now I'm",
    "start": "1779559",
    "end": "1785840"
  },
  {
    "text": "just interested in um C++ objects because inside the iOS kernel",
    "start": "1785840",
    "end": "1792039"
  },
  {
    "start": "1789000",
    "end": "1836000"
  },
  {
    "text": "there is this IO kit interface and um",
    "start": "1792039",
    "end": "1797679"
  },
  {
    "text": "there's this lip Kern which supports C++ for kernel drivers and uh yeah I think outside of",
    "start": "1797679",
    "end": "1806559"
  },
  {
    "text": "IO kit it's absolutely not used so everything that's uh C++ inside the",
    "start": "1806559",
    "end": "1811919"
  },
  {
    "text": "kernel is somehow related to iio kit or to the implementation of the C++ thing",
    "start": "1811919",
    "end": "1817559"
  },
  {
    "text": "um and uh the runtime the C++ runtime it comes with so it's not a full runtime",
    "start": "1817559",
    "end": "1822640"
  },
  {
    "text": "it's just like a small runtime um and the the runtime it comes with has comes with a",
    "start": "1822640",
    "end": "1828080"
  },
  {
    "text": "set of Base objects that are below the actual IO kit uh",
    "start": "1828080",
    "end": "1834880"
  },
  {
    "text": "objects so these base objects are uh shown here so you have something called",
    "start": "1835039",
    "end": "1842760"
  },
  {
    "start": "1836000",
    "end": "1879000"
  },
  {
    "text": "Always object and uh nearly all of the objects are basically derived from that",
    "start": "1842760",
    "end": "1849440"
  },
  {
    "text": "and then you have like collections like sets ordered sets dictionaries and Os",
    "start": "1849440",
    "end": "1855240"
  },
  {
    "text": "arrays and you have a bunch of other things like data",
    "start": "1855240",
    "end": "1860880"
  },
  {
    "text": "strings numbers booleans yeah and something called the",
    "start": "1860880",
    "end": "1866320"
  },
  {
    "text": "iterator which is used to iterate over like",
    "start": "1866320",
    "end": "1871600"
  },
  {
    "text": "collections so now when you look at these o objects in memory they will look",
    "start": "1874720",
    "end": "1881600"
  },
  {
    "start": "1879000",
    "end": "1928000"
  },
  {
    "text": "like this um this looks very much like C++ objects in browsers or like in user",
    "start": "1881600",
    "end": "1890440"
  },
  {
    "text": "space um so you have like in the beginning you have like uh the V table",
    "start": "1890440",
    "end": "1895840"
  },
  {
    "text": "pointer and uh in the case of the OS object object you only have uh one",
    "start": "1895840",
    "end": "1902559"
  },
  {
    "text": "property which is the retain coun which is some kind of reference counter and uh",
    "start": "1902559",
    "end": "1907919"
  },
  {
    "text": "the vtable pointer is pointing into the uh I think con segment of the of the",
    "start": "1907919",
    "end": "1914639"
  },
  {
    "text": "kernel and this is basically the list of of uh property uh the list of uh uh",
    "start": "1914639",
    "end": "1920840"
  },
  {
    "text": "methods of this object well the virtual",
    "start": "1920840",
    "end": "1927440"
  },
  {
    "text": "functions okay um so the other thing that's in this object is this retain count which is actually interesting",
    "start": "1927480",
    "end": "1933440"
  },
  {
    "start": "1928000",
    "end": "2042000"
  },
  {
    "text": "because it's not a simple reference counter it's a 32-bit field that is split into two halves um and the lower",
    "start": "1933440",
    "end": "1940559"
  },
  {
    "text": "sixing bits are real reference counter and the upper sing bits are a collection",
    "start": "1940559",
    "end": "1946559"
  },
  {
    "text": "reference counter so um the kind keeps check how often this object is inside a",
    "start": "1946559",
    "end": "1951840"
  },
  {
    "text": "collection and the funny thing here is that the reference counting stops at six",
    "start": "1951840",
    "end": "1958080"
  },
  {
    "text": "uh 65534 and if you have like an object that that has uh has more references or",
    "start": "1958080",
    "end": "1965720"
  },
  {
    "text": "when it tries to create more references we just like ignore the um and not increase them but it will also not",
    "start": "1965720",
    "end": "1971720"
  },
  {
    "text": "decrease them anymore the moment it this number is is hit it's just Frozen so",
    "start": "1971720",
    "end": "1977399"
  },
  {
    "text": "this object cannot be freed anymore so this is very simple if you have a way to create that many references you can leak",
    "start": "1977399",
    "end": "1983440"
  },
  {
    "text": "memory and just easily crash the kernel by just creating a lot of",
    "start": "1983440",
    "end": "1989720"
  },
  {
    "text": "objects because in the end the kernel doesn't have memory anymore excuse me so what's the use of upper 16 bits",
    "start": "1991440",
    "end": "1999039"
  },
  {
    "text": "then is it for optimization um like I said the other 16",
    "start": "1999039",
    "end": "2004720"
  },
  {
    "text": "bits are the reference counter so he what the other the other the other reference counter is used for the upper",
    "start": "2004720",
    "end": "2010760"
  },
  {
    "text": "ones so this is like I said just collects how often this uh um is you is added to",
    "start": "2010760",
    "end": "2019039"
  },
  {
    "text": "collections and I believe it's only used yeah I think it's only used inside the",
    "start": "2019039",
    "end": "2024440"
  },
  {
    "text": "deallocation to see if suddenly the original reference counter drops under",
    "start": "2024440",
    "end": "2029559"
  },
  {
    "text": "this collection reference counter and in this case the kernel panic is thrown I think this the only place where this is",
    "start": "2029559",
    "end": "2034760"
  },
  {
    "text": "actually used inside the kernel so it's basically",
    "start": "2034760",
    "end": "2038960"
  },
  {
    "text": "waste okay now the interesting thing what what happens if you have like this object in memory and you override it so",
    "start": "2041639",
    "end": "2048200"
  },
  {
    "start": "2042000",
    "end": "2111000"
  },
  {
    "text": "because there are only like two things in there so you can only overwrite these two things and um when you look at",
    "start": "2048200",
    "end": "2054118"
  },
  {
    "text": "browser explorers you see they always try to overwrite the vtable pointer and uh you can do that the same",
    "start": "2054119",
    "end": "2060480"
  },
  {
    "text": "in in the iOS kernel you just override the V table pointer and the next time the kernel tries to do anything with",
    "start": "2060480",
    "end": "2066280"
  },
  {
    "text": "this object it will basically use uh the function table you you supplied by",
    "start": "2066280",
    "end": "2072158"
  },
  {
    "text": "overwriting the pointer okay in this case it might be tricky to actually have uh yeah you have",
    "start": "2072159",
    "end": "2078280"
  },
  {
    "text": "to put this function table somewhere in kernal memory and then like uh let it Point uh to it um but of course you can",
    "start": "2078280",
    "end": "2085000"
  },
  {
    "text": "do that with information leaks and all this kind of stuff and the other thing that you can override is like the retain count and um",
    "start": "2085000",
    "end": "2093158"
  },
  {
    "text": "this might allow you to introduce use after free vulnerabilities into the the code and then you can exploit them like",
    "start": "2093159",
    "end": "2099480"
  },
  {
    "text": "normally like uh like let the object be freed get a new memory in the same place",
    "start": "2099480",
    "end": "2104920"
  },
  {
    "text": "and then you again control the V table pointer and and so",
    "start": "2104920",
    "end": "2110119"
  },
  {
    "start": "2111000",
    "end": "2213000"
  },
  {
    "text": "on so let's look at a different object so you have the OS string object and",
    "start": "2111119",
    "end": "2117160"
  },
  {
    "text": "this has uh some more properties so you can do more um for example when you",
    "start": "2117160",
    "end": "2123280"
  },
  {
    "text": "overwrite the flex field you can control if in the end on the ction of the object if the if the kernel tries to free the",
    "start": "2123280",
    "end": "2130520"
  },
  {
    "text": "the string or not so again you can do this uh attacks like returning this into the wrong K",
    "start": "2130520",
    "end": "2138280"
  },
  {
    "text": "Zone and no wait a second so now the next element that you can override is a length and this is basically similar to",
    "start": "2138280",
    "end": "2144200"
  },
  {
    "text": "when you override uh the length field inside maloc block so you can like put it in the wrong klock Zone and therefore",
    "start": "2144200",
    "end": "2151440"
  },
  {
    "text": "it will use either it will be useful for Heap information leaks or uh your um",
    "start": "2151440",
    "end": "2158200"
  },
  {
    "text": "like freeing memory into the wrong zone so that you can maybe trigger a buffer",
    "start": "2158200",
    "end": "2163960"
  },
  {
    "text": "overflow afterwards or sometimes you maybe just want to leak",
    "start": "2163960",
    "end": "2169280"
  },
  {
    "text": "memory for Heap massage",
    "start": "2169280",
    "end": "2174520"
  },
  {
    "text": "um yeah and the next the last thing you can overwrite is the string pointer itself the string pointer is basically",
    "start": "2174920",
    "end": "2182240"
  },
  {
    "text": "uh a value that is allocated with kog and it just contains the the",
    "start": "2182240",
    "end": "2189078"
  },
  {
    "text": "string so of course if you can overwrite this pointer and later read the string",
    "start": "2191000",
    "end": "2196359"
  },
  {
    "text": "um for example Su the registry and the io registry then um uh you can leak",
    "start": "2196359",
    "end": "2202520"
  },
  {
    "text": "colal Heap information or again you can free arbitrary pointers uh the moment",
    "start": "2202520",
    "end": "2207839"
  },
  {
    "text": "this uh string object is",
    "start": "2207839",
    "end": "2213200"
  },
  {
    "start": "2213000",
    "end": "2336000"
  },
  {
    "text": "destroyed the next thing that's interesting is the OS aray uh memory",
    "start": "2213200",
    "end": "2218280"
  },
  {
    "text": "layout and this is a a little bit more complicated so you have like far more",
    "start": "2218280",
    "end": "2223720"
  },
  {
    "text": "properties in this case and one of these properties is the array pointer and the array pointer is also",
    "start": "2223720",
    "end": "2231119"
  },
  {
    "text": "allocated with kalloc and it uh allocates uh capacity times size of",
    "start": "2231119",
    "end": "2238119"
  },
  {
    "text": "white pointer so basically it it allocates a a table um yeah of pointers that all point",
    "start": "2238119",
    "end": "2247680"
  },
  {
    "text": "to either to null if there's nothing in there or to an other",
    "start": "2247680",
    "end": "2253200"
  },
  {
    "text": "object so that means if you uh can overwrite the array pointer or the array",
    "start": "2253200",
    "end": "2258680"
  },
  {
    "text": "itself you can basically make the kernel uh use o objects that are actually fake",
    "start": "2258680",
    "end": "2264040"
  },
  {
    "text": "objects and they are supplied by you and any action the Kel performed on these objects again will result in code",
    "start": "2264040",
    "end": "2270240"
  },
  {
    "text": "execution and if you overwrite all the other fields in there the count the capacity and so on then then again you",
    "start": "2270240",
    "end": "2277119"
  },
  {
    "text": "can do this kind of things like uh um info Leakes because you can like read",
    "start": "2277119",
    "end": "2283280"
  },
  {
    "text": "un analized memory or you can again do these confusing attacks to so that memory is returned into the wrong uh kog",
    "start": "2283280",
    "end": "2290560"
  },
  {
    "text": "Zone and so",
    "start": "2290560",
    "end": "2293119"
  },
  {
    "text": "on yeah there's um also uh two properties called update stamp and um f",
    "start": "2298720",
    "end": "2306119"
  },
  {
    "text": "options and I think they are not really usable so if you overwrite them you don't you",
    "start": "2306119",
    "end": "2312280"
  },
  {
    "text": "don't can leverage that for code",
    "start": "2312280",
    "end": "2315920"
  },
  {
    "text": "execution okay so this is just like a short introduction of how these uh C++",
    "start": "2317440",
    "end": "2323079"
  },
  {
    "text": "object uh look inside the memory and now you should know that by overwriting them you can do like uh execute code inside",
    "start": "2323079",
    "end": "2330280"
  },
  {
    "text": "the kernal like you can also do in",
    "start": "2330280",
    "end": "2333880"
  },
  {
    "text": "browsers okay and now that we know that we can that we have these objects the question",
    "start": "2335520",
    "end": "2341960"
  },
  {
    "start": "2336000",
    "end": "2354000"
  },
  {
    "text": "is can we like um do a kernel Heap",
    "start": "2341960",
    "end": "2347079"
  },
  {
    "text": "massage in a way that's like a little bit more generic and that allows us to override these kind of Kernel",
    "start": "2347079",
    "end": "2354560"
  },
  {
    "start": "2354000",
    "end": "2442000"
  },
  {
    "text": "objects so uh when we look at Heap controlling techniques there are basically two this is Heap spraying",
    "start": "2354560",
    "end": "2361599"
  },
  {
    "text": "which basically is just filling up the kernel Heap with arbitrary uh data",
    "start": "2361599",
    "end": "2367000"
  },
  {
    "text": "and then there's this Heap fanuy or Heap massage Heap setup Heap layout control there's so many uh different groups of",
    "start": "2367000",
    "end": "2374079"
  },
  {
    "text": "people that uh prefer to call it differently um so um in the end it's all",
    "start": "2374079",
    "end": "2381200"
  },
  {
    "text": "the same technique um the idea is we have like an unknown start State and we want to bring the kernel Heap into a",
    "start": "2381200",
    "end": "2387440"
  },
  {
    "text": "known State and doing this by carefully crafting allocations and deallocations and when you look at the",
    "start": "2387440",
    "end": "2394720"
  },
  {
    "text": "public uh exploits that already explored the Heap for iOS uh I think there are only two mine and the one from po 2G um",
    "start": "2394720",
    "end": "2403720"
  },
  {
    "text": "they always lose very vulnerability specific ways to allocate and deallocate so it's not generic at all and my idea",
    "start": "2403720",
    "end": "2411640"
  },
  {
    "text": "was I wanted to have a more generic solution that can be used for all kinds of overflows all not all but many of",
    "start": "2411640",
    "end": "2421200"
  },
  {
    "text": "them okay let's look again Heap spraying means we need something to ate",
    "start": "2421200",
    "end": "2426800"
  },
  {
    "text": "repeatedly we need to be able to allocate attacker Control Data we need to be able to allocate large quantities",
    "start": "2426800",
    "end": "2433720"
  },
  {
    "text": "of data in a row and usually we want to fill the memory with some specific",
    "start": "2433720",
    "end": "2441280"
  },
  {
    "text": "pattern Heap F chya on the other hand is a little bit more complicated uh we want to allocate",
    "start": "2441480",
    "end": "2447480"
  },
  {
    "text": "repeatedly repeatedly to actually close all the memory holds um we want to be",
    "start": "2447480",
    "end": "2453160"
  },
  {
    "text": "able to allocate arbitrary sized memory blocks we want to be able to poke holes",
    "start": "2453160",
    "end": "2458480"
  },
  {
    "text": "into these allocations so that we can control the memory layout and of course we want to fill the memory with",
    "start": "2458480",
    "end": "2465200"
  },
  {
    "text": "interesting data application data so that we when actually trigger the vulnerability and overflow something we",
    "start": "2465200",
    "end": "2471040"
  },
  {
    "text": "want to overflow something or to Heap corrupt something that is basically interesting to",
    "start": "2471040",
    "end": "2477880"
  },
  {
    "text": "corrupt so and when I when I looked at the iOS C I",
    "start": "2477880",
    "end": "2485560"
  },
  {
    "text": "found a very useful function which is called OS unserialized",
    "start": "2485560",
    "end": "2494400"
  },
  {
    "text": "XML so what what is this function this function is a kernel function so user",
    "start": "2494760",
    "end": "2500160"
  },
  {
    "start": "2497000",
    "end": "2605000"
  },
  {
    "text": "space cannot call it directly but uh basically no not all but a lot of IO",
    "start": "2500160",
    "end": "2507319"
  },
  {
    "text": "iate AP API functions will allow the user to submit um like objects in pist",
    "start": "2507319",
    "end": "2515680"
  },
  {
    "text": "format and XML p p format and then the kernel will basically unserialize this XML to",
    "start": "2515680",
    "end": "2524200"
  },
  {
    "text": "create objects for example when you open an IIT driver you can give it a bunch of",
    "start": "2524200",
    "end": "2530160"
  },
  {
    "text": "properties uh it should start with and then it will call this uh this function to like um deserialize the properties",
    "start": "2530160",
    "end": "2538760"
  },
  {
    "text": "but there are like many other things like when you want to to match something you also Supply this and in in many API",
    "start": "2538760",
    "end": "2545640"
  },
  {
    "text": "functions you basically uh are able to pass user control data to or you're",
    "start": "2545640",
    "end": "2550960"
  },
  {
    "text": "supposed to pass user control data to this uh always uniz XML and this is very powerful because it",
    "start": "2550960",
    "end": "2558520"
  },
  {
    "text": "can create a well the data the data types um",
    "start": "2558520",
    "end": "2565640"
  },
  {
    "text": "no the data objects among the the base objects so you can create numbers you can carry Boolean strings data uh",
    "start": "2565640",
    "end": "2574079"
  },
  {
    "text": "dictionaries arrays sets and you can also create references and um yeah it's it's um in",
    "start": "2574079",
    "end": "2582680"
  },
  {
    "text": "pist format so you can see it's XML and you see in this case it's a dictionary",
    "start": "2582680",
    "end": "2588119"
  },
  {
    "text": "with uh three keys inside and uh the first key is is there and there's a",
    "start": "2588119",
    "end": "2594359"
  },
  {
    "text": "string value the second key uh has a Boolean true value and the last key is",
    "start": "2594359",
    "end": "2600200"
  },
  {
    "text": "again string value oh yeah before the talk I removed",
    "start": "2600200",
    "end": "2608079"
  },
  {
    "start": "2605000",
    "end": "2689000"
  },
  {
    "text": "a bunch of slides uh because that would be just too complicated and it's not really uh useful in this case so uh this",
    "start": "2608079",
    "end": "2614920"
  },
  {
    "text": "is a leftover that might be useful or not in this case so the thing is just um",
    "start": "2614920",
    "end": "2621720"
  },
  {
    "text": "the idea here is uh it's a memory size cheat sheet so if you create an OS array in memory the OS array itself is 36",
    "start": "2621720",
    "end": "2629440"
  },
  {
    "text": "bytes in size but because it's allocated through kalloc it's put into uh the kog",
    "start": "2629440",
    "end": "2635119"
  },
  {
    "text": "40 Zone and additionally when you create this OS array um object you will create uh you",
    "start": "2635119",
    "end": "2643280"
  },
  {
    "text": "will allocate more me memory which is capacity Time 4 because inside an array you only have pointers to the objects of",
    "start": "2643280",
    "end": "2650000"
  },
  {
    "text": "the elements because an array is just uh uh numerical index from zero to the end",
    "start": "2650000",
    "end": "2656559"
  },
  {
    "text": "and so you don't need to be keep track of um Keys uh which which is different",
    "start": "2656559",
    "end": "2662000"
  },
  {
    "text": "for all OSD dictionaries there you have the capacity time h because you always have two pointers the",
    "start": "2662000",
    "end": "2668920"
  },
  {
    "text": "first pointer is the key the second pointer is the um",
    "start": "2668920",
    "end": "2673680"
  },
  {
    "text": "value yeah and so on so um this is just like my sheet sheet so when I want to",
    "start": "2674720",
    "end": "2681119"
  },
  {
    "text": "look up uh how should I construct that uh um yeah in what zone these objects",
    "start": "2681119",
    "end": "2686599"
  },
  {
    "text": "will end in the end okay so how is it useful um looking",
    "start": "2686599",
    "end": "2693280"
  },
  {
    "start": "2689000",
    "end": "2707000"
  },
  {
    "text": "let's look back at Heap spraying remember we want to do these four things we want to allocate repeatedly we want",
    "start": "2693280",
    "end": "2699400"
  },
  {
    "text": "to allocate attacker Control Data large quantities and fill it with a specific",
    "start": "2699400",
    "end": "2706839"
  },
  {
    "text": "pattern unfortunately there is no no way to Loop inside uh the pist so if you",
    "start": "2706839",
    "end": "2714119"
  },
  {
    "start": "2707000",
    "end": "2739000"
  },
  {
    "text": "want to allocate large quantities you have to create in this case we use an array we just create an array with many",
    "start": "2714119",
    "end": "2720920"
  },
  {
    "text": "elements so when you pass that to the kernel um it will create first a",
    "start": "2720920",
    "end": "2726559"
  },
  {
    "text": "dictionary then inside the dictionary an array and inside the array will be a lot of",
    "start": "2726559",
    "end": "2733000"
  },
  {
    "text": "strings yeah and um when you look at um I prepared this slide um when you look",
    "start": "2735000",
    "end": "2742000"
  },
  {
    "start": "2739000",
    "end": "2860000"
  },
  {
    "text": "at this this will look like this in memory so you have uh the different K",
    "start": "2742000",
    "end": "2747960"
  },
  {
    "text": "zones and something which I call large because it will just be a very large block that will most probably not even",
    "start": "2747960",
    "end": "2754400"
  },
  {
    "text": "be in your in your normal kog zones well depends on how much memory you want to allocate and then you can see in each",
    "start": "2754400",
    "end": "2761400"
  },
  {
    "text": "Zone which uh what is created inside there and what is at yet sent to each other if like the Heap is cleaned in",
    "start": "2761400",
    "end": "2768079"
  },
  {
    "text": "this case so um yeah you can see that uh it all",
    "start": "2768079",
    "end": "2773480"
  },
  {
    "text": "starts with the O dictionary object which is like 40 40 bytes in size and this points to like uh uh yeah the",
    "start": "2773480",
    "end": "2781480"
  },
  {
    "text": "dictionary key and dictionary value in in in our example we just had like one element in there so it's just like 8",
    "start": "2781480",
    "end": "2787599"
  },
  {
    "text": "bytes so you see it's in a k 8 Zone and this the key pointer points to the",
    "start": "2787599",
    "end": "2792760"
  },
  {
    "text": "actual key and the dictionary value points to an array which is again in the klog 40 this points to the uh array",
    "start": "2792760",
    "end": "2800079"
  },
  {
    "text": "buckets which is like in some large memory block and inside the array",
    "start": "2800079",
    "end": "2805440"
  },
  {
    "text": "pointer in the inside the array buckets there are Pointers to all the oos string objects which are 24 bytes no 20 bytes",
    "start": "2805440",
    "end": "2813480"
  },
  {
    "text": "in size but they end up in the 24 bytes set alog stone and each of these elements points to a string which is",
    "start": "2813480",
    "end": "2820559"
  },
  {
    "text": "like uh I think n bytes long so it doesn't fit in the akog 8 so it was put into into kog 16",
    "start": "2820559",
    "end": "2827760"
  },
  {
    "text": "Zone yeah so you can see by uh like just repeatedly uh ordering the kernel to",
    "start": "2827760",
    "end": "2834720"
  },
  {
    "text": "create objects it a will will created and by doing a very long pist you can",
    "start": "2834720",
    "end": "2840359"
  },
  {
    "text": "create a lot of elements okay so uh so far we can",
    "start": "2840359",
    "end": "2847920"
  },
  {
    "text": "allocate repeatedly and we can allocate large quantities of data so now we want to solve the other",
    "start": "2847920",
    "end": "2856160"
  },
  {
    "text": "things yeah next thing we want to do is to allocate uh attacker Control Data uh",
    "start": "2856520",
    "end": "2861680"
  },
  {
    "start": "2860000",
    "end": "2957000"
  },
  {
    "text": "we already saw yeah we can use strings but the problem with strings is they are not completely attacker controlled",
    "start": "2861680",
    "end": "2867280"
  },
  {
    "text": "because uh strings cannot contain n uh null uh bites so in order to have null",
    "start": "2867280",
    "end": "2872680"
  },
  {
    "text": "bites in your attacker controlled spray you you you need to use a data tag which",
    "start": "2872680",
    "end": "2878040"
  },
  {
    "text": "allows you to create uh like data blobs in memory objects of data blobs and the",
    "start": "2878040",
    "end": "2883559"
  },
  {
    "text": "nice thing here is there are two different ways to specify that you can either encode base 64 or you the Kel",
    "start": "2883559",
    "end": "2890520"
  },
  {
    "text": "also supports a hex format so you can just like do it like this and again I",
    "start": "2890520",
    "end": "2896359"
  },
  {
    "text": "have oh yeah and the nice thing here is when you do the string thing the string the parer actually creates a string um",
    "start": "2896359",
    "end": "2904960"
  },
  {
    "text": "that might interfere with the memory that's allocated in the K zone so you don't",
    "start": "2904960",
    "end": "2910559"
  },
  {
    "text": "have this problem when you lose data because uh data blocks are passed always",
    "start": "2910559",
    "end": "2916599"
  },
  {
    "text": "in chunks of 40 40,000 4,096 bytes so these are most",
    "start": "2916599",
    "end": "2922880"
  },
  {
    "text": "probably not the the exact size that you want to attack it's not in it's it's like in the in the big zone so uh when",
    "start": "2922880",
    "end": "2930920"
  },
  {
    "text": "it like pauses this it will not confuse the rest of the memory",
    "start": "2930920",
    "end": "2937599"
  },
  {
    "text": "okay and this allocation looks like this uh again you have the dictionary which points to uh to the buckets and the",
    "start": "2937640",
    "end": "2944760"
  },
  {
    "text": "bucket contains the the key and the the array and the array in this case contains always data objects and they",
    "start": "2944760",
    "end": "2952240"
  },
  {
    "text": "point to uh arbitary memory buls so this basically means um all four",
    "start": "2952240",
    "end": "2961720"
  },
  {
    "text": "um yeah properties that we need all four things that we need to do for an Heap spray are easily possil with a p list",
    "start": "2961720",
    "end": "2969440"
  },
  {
    "text": "you just have to make a long P list and uh put in the data you want to spray the Heap",
    "start": "2969440",
    "end": "2975400"
  },
  {
    "text": "with so Heap fu is a little bit more complicated so again we want to allocate",
    "start": "2976960",
    "end": "2982799"
  },
  {
    "start": "2977000",
    "end": "3204000"
  },
  {
    "text": "repeatedly but we already know that's easy uh we already know that's easy and",
    "start": "2982799",
    "end": "2989359"
  },
  {
    "text": "uh we don't need to like find a new solution because we have the solution and we also can allocate our AR size",
    "start": "2989359",
    "end": "2996280"
  },
  {
    "text": "memory blocks because we can allocate strings and data and we can make them short and and long but it's only orange",
    "start": "2996280",
    "end": "3003119"
  },
  {
    "text": "here because if I overwrite a string it's most probably not not interesting for me I want to have uh arbitrary sized",
    "start": "3003119",
    "end": "3010280"
  },
  {
    "text": "blocks that contain useful information when I overwrite",
    "start": "3010280",
    "end": "3015558"
  },
  {
    "text": "it okay so how can I fill arbitrary sized memory blocks with actually data",
    "start": "3015960",
    "end": "3021240"
  },
  {
    "text": "when I when I overwrite it it's useful to me and uh like I said before for Strings and",
    "start": "3021240",
    "end": "3027640"
  },
  {
    "text": "data this is actually uh not really useful because they are just strings and data and if if you overwrite them it's",
    "start": "3027640",
    "end": "3033480"
  },
  {
    "text": "maybe useful for information leakage but it's not useful for actually code",
    "start": "3033480",
    "end": "3038920"
  },
  {
    "text": "execution so what I want to do is I want to uh uh allocate arbitary sized block",
    "start": "3038920",
    "end": "3044720"
  },
  {
    "text": "that are filled with in this case pointers to O objects and this is very",
    "start": "3044720",
    "end": "3050760"
  },
  {
    "text": "easy because I can just create arrays with an arbitrary number of elements and",
    "start": "3050760",
    "end": "3056119"
  },
  {
    "text": "each element in inside the array is uh like a pointer to an object and if I",
    "start": "3056119",
    "end": "3061880"
  },
  {
    "text": "manipulate this pointer I can achieve code execution so if I want to allocate",
    "start": "3061880",
    "end": "3067640"
  },
  {
    "text": "like 344 bytes I will just put this size and",
    "start": "3067640",
    "end": "3073799"
  },
  {
    "text": "divide it by four and then I know how many elements I need to put into the array and of course I can do the same",
    "start": "3073799",
    "end": "3080400"
  },
  {
    "text": "attack with dictionaries in this case I have to divide it by eight um",
    "start": "3080400",
    "end": "3086319"
  },
  {
    "text": "yeah and you can see here uh in this case I always fill them with Boolean values because it makes the pist very",
    "start": "3086319",
    "end": "3093079"
  },
  {
    "text": "short and I can create a lot of elements with a very short P list um but in this case I'm only interested",
    "start": "3093079",
    "end": "3100240"
  },
  {
    "text": "to have like these uh array buckets that are in the size that I need them to be",
    "start": "3100240",
    "end": "3105400"
  },
  {
    "text": "again if you look at the uh how this looks in memory is quite it looks quite complicated but what you need to know is",
    "start": "3105400",
    "end": "3111799"
  },
  {
    "text": "just like you have like uh all the memory blocks in the different zones and",
    "start": "3111799",
    "end": "3117040"
  },
  {
    "text": "uh interesting here is that when the kernel creates booleans with always uh unserialized XML it doesn't really",
    "start": "3117040",
    "end": "3123680"
  },
  {
    "text": "create the objects it creates uh references to Global true and false",
    "start": "3123680",
    "end": "3130920"
  },
  {
    "text": "values so in this case um all the booleans that are inserted into these",
    "start": "3130920",
    "end": "3136480"
  },
  {
    "text": "array buckets are actually not using mors memory they are just like using the",
    "start": "3136480",
    "end": "3141640"
  },
  {
    "text": "pointers all that is needed because the pointer points to the uh global object and this just increases and",
    "start": "3141640",
    "end": "3148119"
  },
  {
    "text": "decreases the reference counter and uh yeah so in this case",
    "start": "3148119",
    "end": "3153960"
  },
  {
    "text": "there is no additional memory allocated for the elements inside the array because they are all like Global",
    "start": "3153960",
    "end": "3161640"
  },
  {
    "text": "pointers so and this means we now have uh are able to allocate arbitrary Siz",
    "start": "3164720",
    "end": "3171880"
  },
  {
    "text": "memory blocks and additionally have them filled with stuff if if you overwrite",
    "start": "3171880",
    "end": "3177000"
  },
  {
    "text": "that or manipulate that then we basically are already near code",
    "start": "3177000",
    "end": "3182640"
  },
  {
    "text": "execution so the next thing and the last thing we need is we need to be able to poke holes into this and now you think",
    "start": "3183400",
    "end": "3191720"
  },
  {
    "text": "well okay you just give it objects and it creates these objects but why should",
    "start": "3191720",
    "end": "3197480"
  },
  {
    "text": "it like allow you to poke holes and it actually doesn't allow you to do that",
    "start": "3197480",
    "end": "3202799"
  },
  {
    "text": "just like how it's implemented that it's possible um because when you have a",
    "start": "3202799",
    "end": "3208599"
  },
  {
    "text": "dictionary um you can insert stuff into into this dictionary and give it like keys arbitary keys um and you can see in",
    "start": "3208599",
    "end": "3217079"
  },
  {
    "text": "this in this example I insert a a a a a bbbb cccc DD d d e e and in the end I",
    "start": "3217079",
    "end": "3225559"
  },
  {
    "text": "insert cccc again and what happens now is that uh when it tries to add to the",
    "start": "3225559",
    "end": "3232000"
  },
  {
    "text": "to the dictionary it will see oh there's already with the same key and it will just destroy the old allocated memory",
    "start": "3232000",
    "end": "3240640"
  },
  {
    "text": "and um yeah replace that value in this case again with a with a global pointer",
    "start": "3240640",
    "end": "3246280"
  },
  {
    "text": "to This Global Boolean true so uh that looks like this you have",
    "start": "3246280",
    "end": "3254079"
  },
  {
    "text": "like this dictionary with uh the a very large uh yeah um bucket for each",
    "start": "3254079",
    "end": "3261520"
  },
  {
    "text": "dictionary key and value and they point to the Keys and they point to the data and the data of",
    "start": "3261520",
    "end": "3268760"
  },
  {
    "text": "course points to the data and you can see in the mid in the middle there there's this Set set set",
    "start": "3268760",
    "end": "3275839"
  },
  {
    "text": "and we want to get rid of this set so we just allocate some new value for",
    "start": "3275839",
    "end": "3281359"
  },
  {
    "text": "cccc and then you have uh now instead a pointer to This Global true value and",
    "start": "3281359",
    "end": "3287520"
  },
  {
    "text": "the O data object and the point the data it points to is are freed so this is how",
    "start": "3287520",
    "end": "3293480"
  },
  {
    "text": "you can poke arbitrary sized holes in into uh the",
    "start": "3293480",
    "end": "3298520"
  },
  {
    "text": "allocation and when you combine all that uh of course um you have everything that",
    "start": "3298520",
    "end": "3304760"
  },
  {
    "start": "3299000",
    "end": "3313000"
  },
  {
    "text": "you need to do an act Heap spray or Heap uh fuy yeah and that's basically more or",
    "start": "3304760",
    "end": "3311720"
  },
  {
    "text": "less the end just a last slide for there a special gimmick if you just want to",
    "start": "3311720",
    "end": "3317079"
  },
  {
    "text": "crash the kernel uh then you can just uh use the same function by uh you just",
    "start": "3317079",
    "end": "3323400"
  },
  {
    "text": "create um some objects and then you create references to it and a lot of",
    "start": "3323400",
    "end": "3329200"
  },
  {
    "text": "them and uh this means this memory will never be freed after the io kit API",
    "start": "3329200",
    "end": "3335359"
  },
  {
    "text": "returns and then you call it SE several times until the K runs out of memory and",
    "start": "3335359",
    "end": "3341400"
  },
  {
    "text": "then there you have like a colel crash yeah any",
    "start": "3341400",
    "end": "3348119"
  },
  {
    "start": "3345000",
    "end": "3378000"
  },
  {
    "text": "questions a little bit uh of like advertisement for our book um yeah if",
    "start": "3348119",
    "end": "3355079"
  },
  {
    "text": "want to get into iOS colel exploitation or iOS exploitation you should really look into this",
    "start": "3355079",
    "end": "3360839"
  },
  {
    "text": "book but are there any",
    "start": "3360839",
    "end": "3364559"
  },
  {
    "text": "questions everybody wants to go to",
    "start": "3367599",
    "end": "3371760"
  },
  {
    "text": "lunch",
    "start": "3377720",
    "end": "3380720"
  }
]