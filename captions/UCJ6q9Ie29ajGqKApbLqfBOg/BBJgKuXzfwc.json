[
  {
    "start": "0",
    "end": "62000"
  },
  {
    "text": "thank you welcome to our talk titled kernel-mode threats and practical defenses so first a little bit about us",
    "start": "30",
    "end": "5790"
  },
  {
    "text": "I'm Joe Desmond I'm a senior researcher at endgame I have an interest in offensive security research but my day",
    "start": "5790",
    "end": "11790"
  },
  {
    "text": "job is development of endpoint protections hi I'm Gabe Landau I'm a principal software engineer at endgame I",
    "start": "11790",
    "end": "18020"
  },
  {
    "text": "take apart malware figure out how it works and figure out ways to stop it so",
    "start": "18020",
    "end": "23580"
  },
  {
    "text": "here's our agenda today and our talk is going to focus on kernel-mode threats as they apply to the Windows operating system and it's split into three parts",
    "start": "23580",
    "end": "30510"
  },
  {
    "text": "so in part one we're going to explore sort of the last decade of the cat-and-mouse game between kernel-mode",
    "start": "30510",
    "end": "36300"
  },
  {
    "text": "malware authors and also the OS protections that are designed to mitigate them next we move into part 2",
    "start": "36300",
    "end": "41850"
  },
  {
    "text": "where we're going to dive into our own offensive research or identify gaps in the OS protections and basically",
    "start": "41850",
    "end": "47940"
  },
  {
    "text": "discover that they're not adequate and finally in part 3 we're gonna explore ways to augment these OS defenses and",
    "start": "47940",
    "end": "54809"
  },
  {
    "text": "this is going to be both by leveraging existing publicly available tools along with innovative approaches to closing",
    "start": "54809",
    "end": "61350"
  },
  {
    "text": "gaps so quickly why this talk why kernel-mode research well",
    "start": "61350",
    "end": "67170"
  },
  {
    "start": "62000",
    "end": "94000"
  },
  {
    "text": "kernel-mode threats they're significant because they generally have total control over the affected machine they",
    "start": "67170",
    "end": "72689"
  },
  {
    "text": "can essentially rewrite the rules of the operating system and easily tamper with security software because they run at",
    "start": "72689",
    "end": "78119"
  },
  {
    "text": "the same privilege level apt groups have realized these benefits and are basically actively exploiting them to",
    "start": "78119",
    "end": "84299"
  },
  {
    "text": "stay ahead of defenders so we hope this talk increases the community's exposure and ultimately improve the industry's",
    "start": "84299",
    "end": "91079"
  },
  {
    "text": "defensive posture against these threats so basically the first generation kernel",
    "start": "91079",
    "end": "97950"
  },
  {
    "start": "94000",
    "end": "116000"
  },
  {
    "text": "malware you know roughly about 10 years ago is really when there was true widespread kernel threats came onto the",
    "start": "97950",
    "end": "103530"
  },
  {
    "text": "scene at the time there was basically no defenses baked into Windows to counter these threats so they flourished you",
    "start": "103530",
    "end": "110729"
  },
  {
    "text": "know Russ stock T DSS your access were a few big ones where they had botnets and numbered in the millions they all shared",
    "start": "110729",
    "end": "117810"
  },
  {
    "text": "a similar technique for gaining ring zero code execution which was basically to infect drivers on disk and when those",
    "start": "117810",
    "end": "125159"
  },
  {
    "text": "drivers would would load they would get their kernel code execution they also commonly deployed rootkit style",
    "start": "125159",
    "end": "131970"
  },
  {
    "text": "technologies so you know hiding files network connections registry keys that sort of",
    "start": "131970",
    "end": "137130"
  },
  {
    "text": "thing so in response to this widespread malware Microsoft released two",
    "start": "137130",
    "end": "143220"
  },
  {
    "start": "139000",
    "end": "207000"
  },
  {
    "text": "protections the first was patched guard to directly go after the rootkit techniques that they were using",
    "start": "143220",
    "end": "148500"
  },
  {
    "text": "so basically patch guard will continually scan the system and look for hooks or modifications to kernel data",
    "start": "148500",
    "end": "153630"
  },
  {
    "text": "structures and if anything is detected it will crash the Box patch guard itself is not perfect it can be bypassed",
    "start": "153630",
    "end": "159720"
  },
  {
    "text": "defeated a number of ways but it's continually evolving so that makes it a moving target for adversaries so you",
    "start": "159720",
    "end": "165630"
  },
  {
    "text": "know what they write today might be caught by patch guard tomorrow and the next protection is drivers signature",
    "start": "165630",
    "end": "171209"
  },
  {
    "text": "enforcement so also known as DSC and DSC requires that all drivers have to be",
    "start": "171209",
    "end": "177420"
  },
  {
    "text": "signed by a valid signature before they're allowed to load on the system and this was originally on Windows Vista",
    "start": "177420",
    "end": "182430"
  },
  {
    "text": "and basically it blocks malware that's trying to infect drivers on disks it's breaking the digital signature also",
    "start": "182430",
    "end": "189269"
  },
  {
    "text": "prevents just unsigned malware drivers from being loaded both of these defenses were originally for 64-bit systems and",
    "start": "189269",
    "end": "195600"
  },
  {
    "text": "when they first came out at the scene it just it wasn't a 64-bit operating system market share was very low and became a",
    "start": "195600",
    "end": "201810"
  },
  {
    "text": "lot more important as people started shifting over to 64-bit Windows versions",
    "start": "201810",
    "end": "207859"
  },
  {
    "start": "207000",
    "end": "254000"
  },
  {
    "text": "so in order to evade these tech both driver signature enforcement in some cases patch guard malware authors began",
    "start": "207859",
    "end": "214410"
  },
  {
    "text": "moving to boot kits so basically boot kits tamper really early offering system",
    "start": "214410",
    "end": "220530"
  },
  {
    "text": "boot code such as by modifying the MBR or VBR or any other OS specific bootloader code and basically you know",
    "start": "220530",
    "end": "228690"
  },
  {
    "text": "get code execution before the OS even starts up and there's a number of",
    "start": "228690",
    "end": "233880"
  },
  {
    "text": "different boot kits over the years one of them X Page was notable it actually hooked the system so early on that when",
    "start": "233880",
    "end": "240480"
  },
  {
    "text": "patch guard would first initialize itself it would scan through the changes that have made and basically trust those changes and then if you tried to unhook",
    "start": "240480",
    "end": "247440"
  },
  {
    "text": "it or tamper with the the rootkit then it would crash the box so is this effectively protected by patch guard I thought that was interesting so to",
    "start": "247440",
    "end": "255510"
  },
  {
    "start": "254000",
    "end": "293000"
  },
  {
    "text": "counter boot kit basically the solution was secure boot and with this technology the system firmware itself actually",
    "start": "255510",
    "end": "262049"
  },
  {
    "text": "validates the digital signature of the boot loading code or transferring control and recent",
    "start": "262049",
    "end": "268560"
  },
  {
    "text": "advancements have actually moved this this verification check even earlier such as Intel boot guard there's been a",
    "start": "268560",
    "end": "275250"
  },
  {
    "text": "lot of research recently in basically planting malware in the firmware itself so it's basically you want the the chain",
    "start": "275250",
    "end": "282960"
  },
  {
    "text": "of trust and start as early as possible where now you can even have that that chain of trust go all the way back to the hardware itself and the CPU will",
    "start": "282960",
    "end": "289020"
  },
  {
    "text": "validate the firmware before transferring control so driver signature",
    "start": "289020",
    "end": "295890"
  },
  {
    "text": "enforcement secure boot in patch guard have definitely dramatically reduced the overall volume of the the commodity",
    "start": "295890",
    "end": "302340"
  },
  {
    "text": "kernel-mode threats you know we don't really see botnets numbering the millions of using kernel of malware anymore it really has not stopped the",
    "start": "302340",
    "end": "309720"
  },
  {
    "text": "continuous backdrop of apt level threats that were using Kermode techniques and",
    "start": "309720",
    "end": "315960"
  },
  {
    "text": "one of the really common themes among apt level kernel malware has been to actually install a legitimate sign but",
    "start": "315960",
    "end": "322260"
  },
  {
    "text": "vulnerable driver on the box and then exploiting that in order to gain kernel code execution thereby sidestepping",
    "start": "322260",
    "end": "327990"
  },
  {
    "text": "driver signature enforcement and another technique that's notable is just a steal a digital certificate from a legitimate",
    "start": "327990",
    "end": "333930"
  },
  {
    "text": "company and then just sign your malware with that which you know gets you loaded also makes you look a lot more",
    "start": "333930",
    "end": "339480"
  },
  {
    "text": "legitimate on the endpoint even more advanced nation-state threats such as",
    "start": "339480",
    "end": "345180"
  },
  {
    "start": "341000",
    "end": "407000"
  },
  {
    "text": "Dooku don't even bother with bringing a vulnerable driver they'll actually exploit the kernel directly with a",
    "start": "345180",
    "end": "350490"
  },
  {
    "text": "zero-day so Dooku 2.0 for example exploited a vulnerability in win32 que",
    "start": "350490",
    "end": "356730"
  },
  {
    "text": "Texas it was also notable that it did some kernel hooking of the Kaspersky driver",
    "start": "356730",
    "end": "362310"
  },
  {
    "text": "and basically what this did was allowed them to convince the Kaspersky driver that their use remote injected code was",
    "start": "362310",
    "end": "368400"
  },
  {
    "text": "actually trusted Kaspersky code and this is not really a vulnerability with Kaspersky this is kind of a problem in",
    "start": "368400",
    "end": "374490"
  },
  {
    "text": "the inherent trust that you have once you gain kernel code execution but basically Kaspersky would wait list their process completely wouldn't alert",
    "start": "374490",
    "end": "380940"
  },
  {
    "text": "on anything and will also protect that process from being terminated by the admins or other security software for",
    "start": "380940",
    "end": "387780"
  },
  {
    "text": "actual persistence the dooku 2.0 actors also they they used a malicious sign",
    "start": "387780",
    "end": "393240"
  },
  {
    "text": "driver from a stolen Foxconn certificate basically they would drop that on certain computers on the network that",
    "start": "393240",
    "end": "398940"
  },
  {
    "text": "external access they would connect into that that computer and then route their malicious traffic to internal machines",
    "start": "398940",
    "end": "405120"
  },
  {
    "text": "from their double pulsar is also worth a",
    "start": "405120",
    "end": "410250"
  },
  {
    "start": "407000",
    "end": "462000"
  },
  {
    "text": "strong mention which is basically a lightweight kernel-mode implant that lives only in memory",
    "start": "410250",
    "end": "415320"
  },
  {
    "text": "no reboot persistence it's typically loaded onto a system using a remote ring zero exploit such as eternal blue and",
    "start": "415320",
    "end": "422420"
  },
  {
    "text": "double pulsar allows attackers to basically get stealthy remote access under the system and do network",
    "start": "422420",
    "end": "429330"
  },
  {
    "text": "communications by hooking a function pointer in the SMB one driver and basically at the time patch guard didn't",
    "start": "429330",
    "end": "436080"
  },
  {
    "text": "care about this function pointer wasn't checking it so I was able to evade that and when you actually connect in a",
    "start": "436080",
    "end": "441180"
  },
  {
    "text": "double pulsar the you can give it more kernel code to execute but more typically you can pass in a user mode",
    "start": "441180",
    "end": "447720"
  },
  {
    "text": "module that will then get injected that has a fully featured implant it actually",
    "start": "447720",
    "end": "452790"
  },
  {
    "text": "became pretty widespread after the the code for double pulsar was leaked so it's been picked up by other adversaries",
    "start": "452790",
    "end": "458730"
  },
  {
    "text": "and used for example like in the don't wanna cry attacks to mitigate you know",
    "start": "458730",
    "end": "466620"
  },
  {
    "start": "462000",
    "end": "513000"
  },
  {
    "text": "these more advanced attacks that are exploiting their way into the kernel Microsoft released virtualization based security or VBS and basically with VBS",
    "start": "466620",
    "end": "474000"
  },
  {
    "text": "the kernel itself is no longer considered trusted its sandbox by a hypervisor and there's a number of",
    "start": "474000",
    "end": "479400"
  },
  {
    "text": "technologies built on top of virtualization based security ones hypervisor code integrity and hypervisor",
    "start": "479400",
    "end": "486330"
  },
  {
    "text": "code integrity known as hvc I basically requires all kernel code to be signed and it's enforced by the hypervisor you",
    "start": "486330",
    "end": "493440"
  },
  {
    "text": "can't have read write execute memory HBC I basically stops a number of kernel",
    "start": "493440",
    "end": "499950"
  },
  {
    "text": "mode threats including double pulsar and also things like turtle a driver loader and the other technologies like cred",
    "start": "499950",
    "end": "506820"
  },
  {
    "text": "guard use the hypervisor to protect credentials from the system from tools like me me cats so this chart kind of",
    "start": "506820",
    "end": "515219"
  },
  {
    "text": "summarizes what we've kind of talked about over the last decade we've got the attacker techniques and the",
    "start": "515219",
    "end": "521099"
  },
  {
    "text": "corresponding defenses so in the upper left you know originally malware authors are going nuts there were no defenses",
    "start": "521099",
    "end": "526320"
  },
  {
    "text": "whatsoever just loading their code directly the kernel-mode from their Microsoft released patch guard and Driver",
    "start": "526320",
    "end": "532310"
  },
  {
    "text": "signature enforcement attackers design moved to using boot kits which was then countered with secure boot and then",
    "start": "532310",
    "end": "539380"
  },
  {
    "text": "adversary started using exploitation in order to load their code into in the",
    "start": "539380",
    "end": "544580"
  },
  {
    "text": "kernel and then finally Microsoft released virtualization based security to counter that and just to kind of show",
    "start": "544580",
    "end": "551390"
  },
  {
    "text": "we talked about some of the more important mitigations and protections built in by but there's actually a lot",
    "start": "551390",
    "end": "556940"
  },
  {
    "text": "more that we didn't cover and this just kind of shows that Microsoft this put of a lot of investment in this over the",
    "start": "556940",
    "end": "561950"
  },
  {
    "text": "years increasing investment more recently but one of the problems is the adoption rate you know there's still",
    "start": "561950",
    "end": "568610"
  },
  {
    "text": "tons of systems running Windows 7 so if the the protections are only in the latest and greatest version of Windows",
    "start": "568610",
    "end": "574070"
  },
  {
    "text": "Windows 10 then a lot of people are you're not getting that benefit okay",
    "start": "574070",
    "end": "579710"
  },
  {
    "text": "we're moving on to part two where we're gonna deep dive into our own offensive kernel-mode tradecraft so endgame the",
    "start": "579710",
    "end": "587480"
  },
  {
    "start": "585000",
    "end": "728000"
  },
  {
    "text": "company we work for periodically conducts internal red vs. blue exercises both the test our product and to test",
    "start": "587480",
    "end": "592970"
  },
  {
    "text": "our own skills basically from a red and blue perspective Gabe and I are on the red team and basically were tasked with",
    "start": "592970",
    "end": "599390"
  },
  {
    "text": "emulating adversaries from varying sophistication levels so we want to try to emulate a really noisy you know",
    "start": "599390",
    "end": "604580"
  },
  {
    "text": "commodity actor but we also want to try to emulate the most advanced apts to sort of gauge like where our blue team's",
    "start": "604580",
    "end": "609890"
  },
  {
    "text": "are at and how well they can detect it so as far as the more advanced technique",
    "start": "609890",
    "end": "615200"
  },
  {
    "text": "to we what we had done in the past is to just live sort of fire less techniques in user mode but our blue team was",
    "start": "615200",
    "end": "621950"
  },
  {
    "text": "getting much better at detecting us with these techniques they're basically upping their game so in the last iteration of our red versus blue we",
    "start": "621950",
    "end": "628580"
  },
  {
    "text": "decided to up our game and we looked at doing kernel mode techniques and to try to evade detection and at this point",
    "start": "628580",
    "end": "635600"
  },
  {
    "text": "personally for me I had done kernel mode development in a while so you know I had to start from scratch we might build",
    "start": "635600",
    "end": "640960"
  },
  {
    "text": "environment debugging environment and I just wanted to share if you're new in a",
    "start": "640960",
    "end": "646010"
  },
  {
    "text": "kernel development definitely put time into getting your debugging setup down to the point where you can build a",
    "start": "646010",
    "end": "652610"
  },
  {
    "text": "driver get it loaded into a virtual machine load it in the virtual machine crash crash the Box blue screen the box",
    "start": "652610",
    "end": "658940"
  },
  {
    "text": "whatever and and triage that so you can figure out what went wrong and then iterate on that process so",
    "start": "658940",
    "end": "664529"
  },
  {
    "text": "basically you get really good really quickly at triage and blue screens if you can get that the total time for that",
    "start": "664529",
    "end": "669810"
  },
  {
    "text": "process down to a couple minutes then you can compensate for not really knowing what you're doing like I don't really know what I'm doing I can just",
    "start": "669810",
    "end": "674850"
  },
  {
    "text": "read documentation and sort of try out things crash okay no go back and keep repeating that process sort of brute",
    "start": "674850",
    "end": "680760"
  },
  {
    "text": "force my way through it but one of the the key components that we wanted to use",
    "start": "680760",
    "end": "686070"
  },
  {
    "text": "in our kernel mode implant was going to be turlet driver loader so this is",
    "start": "686070",
    "end": "691800"
  },
  {
    "text": "written by h firefox i github it's freely available and basically it's an",
    "start": "691800",
    "end": "697649"
  },
  {
    "text": "open-source implementation of the the Turla exploit that they use to get code execution and in a nutshell it'll",
    "start": "697649",
    "end": "704430"
  },
  {
    "text": "basically drop a VirtualBox driver installed on the system it'll exploit this VirtualBox driver to execute",
    "start": "704430",
    "end": "710220"
  },
  {
    "text": "shellcode in kernel mode and then the the shellcode will basically memory module style map a driver into kernel",
    "start": "710220",
    "end": "716670"
  },
  {
    "text": "mode without it touching disk so that basically helps us achieve two",
    "start": "716670",
    "end": "721680"
  },
  {
    "text": "objectives we want to live in memory as much as possible and also evade the",
    "start": "721680",
    "end": "727199"
  },
  {
    "text": "driver signature enforcement checks also for our implant design we had some high-level goals so we wanted to be",
    "start": "727199",
    "end": "734730"
  },
  {
    "start": "728000",
    "end": "814000"
  },
  {
    "text": "kernel mode only a lot of the kernel malware that we've talked about",
    "start": "734730",
    "end": "740089"
  },
  {
    "text": "typically use a hybrid where there's some kernel components and there's also some user mode components typically the",
    "start": "740089",
    "end": "746550"
  },
  {
    "text": "kernel mode component will be as lightweight as possible and they'll inject the full payload into user mode but since our blue team was really good",
    "start": "746550",
    "end": "753269"
  },
  {
    "text": "at catching anything injected in user mode that worried us so we didn't want any user mode component we wanted to",
    "start": "753269",
    "end": "759089"
  },
  {
    "text": "implant to be fully kernel mode and that mean we had to figure out how to actually talk to our driver over the",
    "start": "759089",
    "end": "765269"
  },
  {
    "text": "network thankfully Microsoft has a library for actually doing this from kernel mode it's called wind socket",
    "start": "765269",
    "end": "770279"
  },
  {
    "text": "kernel and basically it's really well-documented there's a lot of sample",
    "start": "770279",
    "end": "775620"
  },
  {
    "text": "source code that you can use so we pretty much just you know read through some of documentation and copy pasted huge chunks of their sample code in",
    "start": "775620",
    "end": "782550"
  },
  {
    "text": "order to get kernel mode network sockets up and running really quickly we also wanted it to be trigger oral inbound a",
    "start": "782550",
    "end": "790380"
  },
  {
    "text": "red vs. blue environment doesn't have a whole lot of legitimate activity going on so we thought we would stick out it",
    "start": "790380",
    "end": "796170"
  },
  {
    "text": "like beaconing out we would rather have the implant lie waiting stealthy we can connect in at any time of our choosing",
    "start": "796170",
    "end": "801899"
  },
  {
    "text": "and go interactive and then finally we didn't really care much for features of",
    "start": "801899",
    "end": "807510"
  },
  {
    "text": "the implant you know really basic stuff like file upload download was gonna be perfect for our for our use case now",
    "start": "807510",
    "end": "816199"
  },
  {
    "start": "814000",
    "end": "911000"
  },
  {
    "text": "leveraging Turla driver loader was going to be a problem if we just you know downloaded and ran it as is because",
    "start": "816199",
    "end": "822540"
  },
  {
    "text": "turtle driver loader is just an executable that would run off disk so that was gonna be a big problem for us",
    "start": "822540",
    "end": "827880"
  },
  {
    "text": "you know our blue team's has access to AI malware detection so we were really",
    "start": "827880",
    "end": "833519"
  },
  {
    "text": "worried about dropping any sort of executable to disk so we really wanted to to get that loaded through reusing",
    "start": "833519",
    "end": "840540"
  },
  {
    "text": "vilest techniques that were available you can do this through a number of different scripting libraries like you",
    "start": "840540",
    "end": "846180"
  },
  {
    "text": "can you can map it right in PowerShell that one you know depending on what security software is running could add",
    "start": "846180",
    "end": "852149"
  },
  {
    "text": "visibility into PowerShell at the time squiggly-doo by Casey Smith was sort of like the the new hotness and basically",
    "start": "852149",
    "end": "859079"
  },
  {
    "text": "that was leveraging reg server 32 and you could download what's called a scriptlet that contains JavaScript code",
    "start": "859079",
    "end": "865680"
  },
  {
    "text": "over the network and you could actually get your JavaScript code in memory from there you can use a tool called dotnet",
    "start": "865680",
    "end": "872970"
  },
  {
    "text": "to j/s written by a Google project 0 researcher James for Shaw and you can basically map a full dotnet module into",
    "start": "872970",
    "end": "880410"
  },
  {
    "text": "memory from JavaScript and then once we have dotnet code execution we can pretty much do whatever we have full access to",
    "start": "880410",
    "end": "886290"
  },
  {
    "text": "win32 api we could have exploited the driver from here but we already had the",
    "start": "886290",
    "end": "891600"
  },
  {
    "text": "TDL code in native c code so instead we just used basically memory module techniques for mapping that into memory",
    "start": "891600",
    "end": "897959"
  },
  {
    "text": "so our we had to dot that memory module which were then mapped TDL into memory and then TDA we transfer execution at",
    "start": "897959",
    "end": "905220"
  },
  {
    "text": "TDL which would then exploit the driver and then install our implant into kernel mode memory",
    "start": "905220",
    "end": "911720"
  },
  {
    "text": "another thing we examined was actually keeping the legitimate driver off of disk because technically that was the only thing that was being written we",
    "start": "911750",
    "end": "918990"
  },
  {
    "text": "looked at using web dev for doing this which is one option there was all kind of an interesting system on bug where it",
    "start": "918990",
    "end": "924420"
  },
  {
    "text": "didn't really like the path very much for that it couldn't recover the hashes which thought was interesting",
    "start": "924420",
    "end": "930050"
  },
  {
    "text": "so we talked about wind socket kernel and in the sample code that we had it would open a port on the system this",
    "start": "930120",
    "end": "936190"
  },
  {
    "text": "definitely was not stealthy by opening a port you know you'd have to worry about firewalls and stuff we wanted to do",
    "start": "936190",
    "end": "942550"
  },
  {
    "text": "something better so we kind of reuse the idea that double pulse are ahead of corrupting a function pointer in order",
    "start": "942550",
    "end": "947860"
  },
  {
    "text": "to hook stuff without triggering patch guard but we didn't want to pick the same function we figured now maybe patch guard is you know caught on to that and",
    "start": "947860",
    "end": "954610"
  },
  {
    "text": "might be standing that so we started looking through various other drivers to figure out a good function point or a good hook point and we settled on the",
    "start": "954610",
    "end": "961450"
  },
  {
    "text": "the server net driver and basically this shows the process the server net driver",
    "start": "961450",
    "end": "967030"
  },
  {
    "text": "is responsible for opening port 445 and these are the functions that it goes through in order to actually open up",
    "start": "967030",
    "end": "972340"
  },
  {
    "text": "that socket and on the far right you can see the server net wsk except function",
    "start": "972340",
    "end": "977740"
  },
  {
    "text": "well we actually have an egg hunter that will search for that pointer in memory and we basically hooked that with our",
    "start": "977740",
    "end": "982960"
  },
  {
    "text": "own accept function and when you connect in the box on four four four five we get redirected to our code we can basically",
    "start": "982960",
    "end": "988900"
  },
  {
    "text": "decide at that point hey do we want to hook this connection you use that for implant coms or do we just want to pass",
    "start": "988900",
    "end": "995740"
  },
  {
    "text": "it back to the system silently so that people can still use SMB file-sharing and stuff like that so gonna show a demo",
    "start": "995740",
    "end": "1002880"
  },
  {
    "text": "of this tool it looks good okay so",
    "start": "1002880",
    "end": "1013100"
  },
  {
    "text": "basically when we did this back in you know at our last read verse blue the the",
    "start": "1013730",
    "end": "1018810"
  },
  {
    "text": "current hot trend was using squiggly-doo but we kinda want to refresh this for this talk so a very recent technique by",
    "start": "1018810",
    "end": "1025050"
  },
  {
    "text": "matt Graber and by extension Casey Smith is notice Whibley - and basically the idea is you can",
    "start": "1025050",
    "end": "1031790"
  },
  {
    "text": "execute XSL files which contain embedded JavaScript code and matt graver actually",
    "start": "1031790",
    "end": "1038938"
  },
  {
    "text": "took this a step further by figuring out how to inject it into a legitimate sign VBS script so on the screen you can see",
    "start": "1038939",
    "end": "1044670"
  },
  {
    "text": "you can execute C script with this winter MDBs this is a valid sign driver",
    "start": "1044670",
    "end": "1049890"
  },
  {
    "text": "and then in the same folder you can basically plant this file WSM PTY - XSL",
    "start": "1049890",
    "end": "1057720"
  },
  {
    "text": "which will then get coat start executing your JavaScript it's embedded in there so you know this",
    "start": "1057720",
    "end": "1063790"
  },
  {
    "text": "is kind of a new technique it's released in the last few weeks we wanted to leverage this so basically we execute",
    "start": "1063790",
    "end": "1069820"
  },
  {
    "text": "that it goes to the various stages very quickly in order to map the the code into memory and exploit the driver and",
    "start": "1069820",
    "end": "1076870"
  },
  {
    "text": "then from there we have a Python controller that we can connect in you know we can get some basic system information you can download files from",
    "start": "1076870",
    "end": "1083559"
  },
  {
    "text": "there and just to show the the kernel socket hooking technique you can see",
    "start": "1083559",
    "end": "1089169"
  },
  {
    "text": "we're connected in on four four four five over on the right you can see the pit there paid for its associated with",
    "start": "1089169",
    "end": "1094299"
  },
  {
    "text": "the system process basically the associated with the kernel okay so that",
    "start": "1094299",
    "end": "1103990"
  },
  {
    "start": "1101000",
    "end": "1208000"
  },
  {
    "text": "was really cool you know we we did really well on a red versus blue unfortunately that meant we had a lot of work to do to sort of improve our",
    "start": "1103990",
    "end": "1110820"
  },
  {
    "text": "tradecraft because you know our day job is actually defense of these systems so we're like okay yeah now we got to work",
    "start": "1110820",
    "end": "1117970"
  },
  {
    "text": "on that but when we actually got accepted to this talk we actually wanted to push it even further so I talked",
    "start": "1117970",
    "end": "1123520"
  },
  {
    "text": "about virtualization based security a little bit and virtualization based security combined with hypervisor code",
    "start": "1123520",
    "end": "1130660"
  },
  {
    "text": "integrity like I said earlier will block any unsigned code from executing that includes both you know double pulse are",
    "start": "1130660",
    "end": "1137110"
  },
  {
    "text": "TDL and by extension are implant that we use in our red vs. blue so okay what can",
    "start": "1137110",
    "end": "1143020"
  },
  {
    "text": "we do to actually evade HPC I the latest Microsoft mitigations and get code execution well we started with trying to",
    "start": "1143020",
    "end": "1149620"
  },
  {
    "text": "load our VirtualBox driver and that was a no-go it's completely blocked from loading I think that it's just generally",
    "start": "1149620",
    "end": "1155679"
  },
  {
    "text": "incompatible with HPC I so it's not allowed to load and our first step was",
    "start": "1155679",
    "end": "1160870"
  },
  {
    "text": "gonna be we're gonna have to find a new driver to exploit so at great hat hacker net there are a ton of pocs that this guy Parvez Anwar has you",
    "start": "1160870",
    "end": "1169840"
  },
  {
    "text": "know done some fuzzing or analysis and found vulnerabilities in various drivers of software you've never heard of but",
    "start": "1169840",
    "end": "1175419"
  },
  {
    "text": "that was kind of a good stop for us to shop for various exploits that we could reuse we started off with one",
    "start": "1175419",
    "end": "1181570"
  },
  {
    "text": "vulnerability that it was like a static one byte right to anywhere in kernel mode memory well the problem with that is you have to corrupt some kernel heap",
    "start": "1181570",
    "end": "1188950"
  },
  {
    "text": "memory in order to actually get a full read/write primitive just it would have been a lot of work if",
    "start": "1188950",
    "end": "1194059"
  },
  {
    "text": "you can choose the vulnerability that you're bringing I would just say choose wisely make it easy for yourself it also makes a lot more stable so we found",
    "start": "1194059",
    "end": "1200120"
  },
  {
    "text": "another vulnerability that basically gave us a full read/write primitive right from the driver so we can read and write eight bytes of memory wherever we",
    "start": "1200120",
    "end": "1206660"
  },
  {
    "text": "want in kernel mode so that on its own can be using can be used for data-driven",
    "start": "1206660",
    "end": "1212210"
  },
  {
    "start": "1208000",
    "end": "1341000"
  },
  {
    "text": "attacks so H PCI prevents unsigned code but it does nothing to protect against general kernel tank tampering so",
    "start": "1212210",
    "end": "1219890"
  },
  {
    "text": "basically you can still corrupt key data structures in the kernel and in any drivers that are loaded for example you",
    "start": "1219890",
    "end": "1225890"
  },
  {
    "text": "can modify the import address table of certain drivers on the system just like dooku 2.0 did on the kaspersky driver",
    "start": "1225890",
    "end": "1232600"
  },
  {
    "text": "you can you know knock them out make them do nothing you can disable EDR",
    "start": "1232600",
    "end": "1238640"
  },
  {
    "text": "kernel user communications you can disable security focus kernel etw",
    "start": "1238640",
    "end": "1243710"
  },
  {
    "text": "provider such as Microsoft Windows threat intelligence you can also elevate privileges by",
    "start": "1243710",
    "end": "1249800"
  },
  {
    "text": "modifying tokens or handles from kernel mode and basically a variety of other data corruption attacks so one example",
    "start": "1249800",
    "end": "1257960"
  },
  {
    "text": "of this we actually looked at sis Mon and we were rupiahs you know with what we could tamper with system on just from",
    "start": "1257960",
    "end": "1262970"
  },
  {
    "text": "a data perspective this is nothing against this Mon it's just you know freely available we can download and play with it it's definitely not a",
    "start": "1262970",
    "end": "1268970"
  },
  {
    "text": "system on specific vulnerability but what we did was basically found the the chunk of code that's responsible for",
    "start": "1268970",
    "end": "1275120"
  },
  {
    "text": "sending events from kernel mode to user mode so you can see there's this IOC sq or move next herb function up here and",
    "start": "1275120",
    "end": "1282290"
  },
  {
    "text": "if you replace the pointer in the IAT to basically a return zero Rob gadget then all this code here is gonna get",
    "start": "1282290",
    "end": "1290960"
  },
  {
    "text": "skipped over and this code right here is actually what's responsible for sending the events down to user mode so if you",
    "start": "1290960",
    "end": "1296179"
  },
  {
    "text": "skip this then no more events from system on so you know if you want to be",
    "start": "1296179",
    "end": "1302179"
  },
  {
    "text": "a little more sneaky you could probably selectively drop certain events there's a like a structure that gets passed into this function that actually contains the",
    "start": "1302179",
    "end": "1308270"
  },
  {
    "text": "pit associated with it so you could selectively drop things for your implant but in this example I think it was good",
    "start": "1308270",
    "end": "1313880"
  },
  {
    "text": "enough for our purposes and this is sort of an example of tampering with the etw",
    "start": "1313880",
    "end": "1320000"
  },
  {
    "text": "providers in the kernel so there's this registration handle it's referenced in all the the functions",
    "start": "1320000",
    "end": "1325309"
  },
  {
    "text": "that are responsible for process injection this is the way that you know Microsoft products can monitor for",
    "start": "1325309",
    "end": "1331129"
  },
  {
    "text": "various process injection events well if you modify this handle then you know",
    "start": "1331129",
    "end": "1337249"
  },
  {
    "text": "these functions will basically just fail silently okay so we do data corruption",
    "start": "1337249",
    "end": "1344629"
  },
  {
    "start": "1341000",
    "end": "1413000"
  },
  {
    "text": "attacks that's cool but we really wanted to get kernel code execution and we were clued in by a talk by David Weston who",
    "start": "1344629",
    "end": "1352220"
  },
  {
    "text": "is the Windows offensive security team lead and Windows Device Security Manager he did a talk at blue hat IO and their",
    "start": "1352220",
    "end": "1358820"
  },
  {
    "text": "own red team was working to try to defeat HB CI that's what they do and basically they found that they could",
    "start": "1358820",
    "end": "1365929"
  },
  {
    "text": "use code reuse attacks in order to execute what they wanted in kernel mode and they actually worked on a mitigation where they would try to detect and block",
    "start": "1365929",
    "end": "1373070"
  },
  {
    "text": "code reuse attacks basically Rob from working but at the last minute they found some unknown vulnerability and",
    "start": "1373070",
    "end": "1379309"
  },
  {
    "text": "their implementation and fun wouldn't basically give them the level of security they wanted so instead of",
    "start": "1379309",
    "end": "1384320"
  },
  {
    "text": "shipping you know half-baked feature they cut it out which is good for them but that means there's still this whole available",
    "start": "1384320",
    "end": "1389840"
  },
  {
    "text": "now that people can go after Intel is actually planning on hopefully someday",
    "start": "1389840",
    "end": "1396169"
  },
  {
    "text": "releasing hardware technology to detect Rob in kernel mode there's out their",
    "start": "1396169",
    "end": "1402049"
  },
  {
    "text": "specifications out there about it but there's no chips available today that you can buy that actually have this in there so basically today you can do Rob",
    "start": "1402049",
    "end": "1409369"
  },
  {
    "text": "with everything enabled and you're free to do that but for actually weaponizing",
    "start": "1409369",
    "end": "1414529"
  },
  {
    "start": "1413000",
    "end": "1460000"
  },
  {
    "text": "this we got an idea from it was a keen team presentation from recon in 2015",
    "start": "1414529",
    "end": "1420049"
  },
  {
    "text": "they talked about doing kernel stack hooking so we have this readwrite primitive and we thought oh we can do",
    "start": "1420049",
    "end": "1425389"
  },
  {
    "text": "kernel stack hooking in order to get code execution to while we're running under HPC I and basically the way this",
    "start": "1425389",
    "end": "1431360"
  },
  {
    "text": "works is you create a surrogate thread and put it asleep by basically waiting for a mutex and then you can locate its",
    "start": "1431360",
    "end": "1436730"
  },
  {
    "text": "each read structure basically from there there's a pointer to the the kernel stack associated with that you can scan",
    "start": "1436730",
    "end": "1443179"
  },
  {
    "text": "through the stack and find a function pointer like NT wait for signal object",
    "start": "1443179",
    "end": "1448460"
  },
  {
    "text": "and you basically can overwrite that function pointer with a pivot gadget and use that too after you resumed the",
    "start": "1448460",
    "end": "1455269"
  },
  {
    "text": "thread that'll start executing and then you've diverted the flow of execution so basically what",
    "start": "1455269",
    "end": "1462619"
  },
  {
    "start": "1460000",
    "end": "1536000"
  },
  {
    "text": "this looks like is when you want to call a function we dynamically build a rock chain that's based on the number of",
    "start": "1462619",
    "end": "1468139"
  },
  {
    "text": "arguments in that are for the target function you want to call so we had 10",
    "start": "1468139",
    "end": "1473329"
  },
  {
    "text": "gadgets were required for us to get basically a full end call arguments or",
    "start": "1473329",
    "end": "1478609"
  },
  {
    "text": "an argument function call pardon me and basically what that meant is if you're",
    "start": "1478609",
    "end": "1483859"
  },
  {
    "text": "gonna call a function with one argument will generate one wrap chain if you're calling another function with eight arguments it'll be a little bit",
    "start": "1483859",
    "end": "1489589"
  },
  {
    "text": "different because you got to set up different parameters and stuff on the chain and that's all done on the fly so basically you know it starts off with",
    "start": "1489589",
    "end": "1495859"
  },
  {
    "text": "that pop RSP return gadget and that gets us to our actual wrap chain the first step is we had a few gadgets that we",
    "start": "1495859",
    "end": "1501859"
  },
  {
    "text": "needed to actually restore the data we corrupted on the legitimate stack so we had you know put back the original",
    "start": "1501859",
    "end": "1507829"
  },
  {
    "text": "pointer that we overrode then you have to set up the actual arguments for the function call you want so you got to",
    "start": "1507829",
    "end": "1513289"
  },
  {
    "text": "push things onto the stack you gotta set up things and registers and then you actually call the target function to do",
    "start": "1513289",
    "end": "1519289"
  },
  {
    "text": "whatever you want next you can save the return value and actually save that directly back to user mode and then",
    "start": "1519289",
    "end": "1525379"
  },
  {
    "text": "there was just one register that we basically couldn't dirty through this process r14 which contained the mutex object so",
    "start": "1525379",
    "end": "1531109"
  },
  {
    "text": "we decide to make sure we replace that and then unfit the stack to complete the attack so basically the end effect of",
    "start": "1531109",
    "end": "1539989"
  },
  {
    "start": "1536000",
    "end": "1577000"
  },
  {
    "text": "this is you actually write your kernel mode implant in user mode and each function call that you do is basically",
    "start": "1539989",
    "end": "1546649"
  },
  {
    "text": "an exploitation of the driver so our readwrite primitive so basically this is user mode code for doing like write",
    "start": "1546649",
    "end": "1552739"
  },
  {
    "text": "process memory without you know doing open process or actually calling any syscalls so you know this will this call",
    "start": "1552739",
    "end": "1559789"
  },
  {
    "text": "function you pass in the string of the function you want so PS get current process and then copy",
    "start": "1559789",
    "end": "1565639"
  },
  {
    "text": "virtual memory over the the ones needed for this specific implementation so with this you know you could inject into",
    "start": "1565639",
    "end": "1571819"
  },
  {
    "text": "protected processes you can evade detection by edr and AV etc show a demo",
    "start": "1571819",
    "end": "1579439"
  },
  {
    "start": "1577000",
    "end": "1672000"
  },
  {
    "text": "of this now",
    "start": "1579439",
    "end": "1581949"
  },
  {
    "text": "okay so this is also gonna go pretty quick but basically we run this POC Exe",
    "start": "1586220",
    "end": "1592770"
  },
  {
    "text": "what it's gonna do is it's gonna spawn a new instance of the defender process",
    "start": "1592770",
    "end": "1597809"
  },
  {
    "text": "that has a ppl or a protected process compatible signature so you can actually create a new instance of that that's",
    "start": "1597809",
    "end": "1604590"
  },
  {
    "text": "going to be protected normally you would not be able to access that process unless you had the equivalent level of protection on your process so we're",
    "start": "1604590",
    "end": "1611730"
  },
  {
    "text": "gonna launch that and then what we're gonna do is we're going to use these Roth techniques all while hvc is running",
    "start": "1611730",
    "end": "1617040"
  },
  {
    "text": "so you can see on the bottom hypervisor code integrity is enabled and basically use Rob in order to call a number of",
    "start": "1617040",
    "end": "1623340"
  },
  {
    "text": "functions for giving us access into this process so you know we're basically opening a handle to the process with a",
    "start": "1623340",
    "end": "1629910"
  },
  {
    "text": "from kernel mode and then duplicating that into our POC exe which gives us full access then from there we actually",
    "start": "1629910",
    "end": "1635429"
  },
  {
    "text": "just overrode the entry point with some shell code to pop cmd.exe and you can",
    "start": "1635429",
    "end": "1643170"
  },
  {
    "text": "see here this is the the defender process with CMD as a child and process hacker and if we open this up you can",
    "start": "1643170",
    "end": "1650460"
  },
  {
    "text": "see that the protection is full so you'd normally not have access to this well at kernel level or some other techniques",
    "start": "1650460",
    "end": "1656429"
  },
  {
    "text": "but it's a good demo to show sort of what you can do by bypassing HPC I",
    "start": "1656429",
    "end": "1663110"
  },
  {
    "text": "okay thank you all right so up to this point we've talked about",
    "start": "1670570",
    "end": "1677590"
  },
  {
    "text": "how kernel-mode threats and platform protections have evolved around each other then we talked about some",
    "start": "1677590",
    "end": "1684400"
  },
  {
    "text": "offensive tradecraft that works even with the latest and greatest platform protections in this final section we're",
    "start": "1684400",
    "end": "1690730"
  },
  {
    "text": "going to talk about how defenders can augment windows built-in defenses in order to better guard their enterprises and then finally we're going to cover",
    "start": "1690730",
    "end": "1697300"
  },
  {
    "text": "some aspirational research that we perform to further raise the bar so first and foremost simplest thing you",
    "start": "1697300",
    "end": "1703390"
  },
  {
    "text": "can do is event and hunt on driver loads throughout your organization's there's",
    "start": "1703390",
    "end": "1708730"
  },
  {
    "text": "readily available tools to do this including system on system eternals system sysinternals system on and",
    "start": "1708730",
    "end": "1715600"
  },
  {
    "text": "Windows Defender application control when you put it into audit mode you should be looking for low prevalence and",
    "start": "1715600",
    "end": "1720910"
  },
  {
    "text": "known exploitable drivers it is important to build a baseline if possible as many of you know you have to",
    "start": "1720910",
    "end": "1726430"
  },
  {
    "text": "understand your company's assets and infrastructure before you can begin looking for adversaries the same applies",
    "start": "1726430",
    "end": "1732370"
  },
  {
    "text": "for understanding the exposure of kernel modules throughout your organization defenders should employ hypervisor code",
    "start": "1732370",
    "end": "1739660"
  },
  {
    "text": "integrity policies to block most legacy drivers ideally you should be whitelisting driver publishers but white",
    "start": "1739660",
    "end": "1747940"
  },
  {
    "text": "lists can be very hard to maintain effectively at a minimum you should see if you can mandate whq else signatures",
    "start": "1747940",
    "end": "1754170"
  },
  {
    "text": "which stands for Windows Hardware quality labs to get a whq signature you",
    "start": "1754170",
    "end": "1761470"
  },
  {
    "text": "have to upload your driver to Microsoft which theoretically mitigates the threat of stolen private keys and certificates",
    "start": "1761470",
    "end": "1767170"
  },
  {
    "text": "because attackers can no longer stealthily signed their malware it also eliminates a whole swath of legacy",
    "start": "1767170",
    "end": "1774010"
  },
  {
    "text": "drivers that were developed in the past however WH KL is not a panacea so what",
    "start": "1774010",
    "end": "1780100"
  },
  {
    "text": "you're seeing right here on your screen is the WH QL signature for the driver that we just exploited in the rap demo",
    "start": "1780100",
    "end": "1789270"
  },
  {
    "start": "1788000",
    "end": "1880000"
  },
  {
    "text": "so to further their defenses defenders can supplement code integrity policies with black listing of known exploitable",
    "start": "1789540",
    "end": "1796240"
  },
  {
    "text": "drivers starting with Windows 10 red stone 5 which comes out in October hopefully Microsoft will block many",
    "start": "1796240",
    "end": "1803530"
  },
  {
    "text": "known exploitable drivers by default if hypervisor code integrity is enabled it's great for some",
    "start": "1803530",
    "end": "1809440"
  },
  {
    "text": "users but not everybody has the hardware requirement that's required for HV CI and a lot of enterprises are still on",
    "start": "1809440",
    "end": "1817180"
  },
  {
    "text": "Windows 7 and Windows 8 so to help mitigate these risks the risks of these forever days for the rest",
    "start": "1817180",
    "end": "1823150"
  },
  {
    "text": "of us we're releasing a tool called kernel attack surface reduction or Qasr alongside this talk that will block a",
    "start": "1823150",
    "end": "1831790"
  },
  {
    "text": "list of known exploitable date of drivers these are drivers that you can find on github where you run a tool and",
    "start": "1831790",
    "end": "1837670"
  },
  {
    "text": "pop you pop the kernel within as quickly as you saw that demo so we understand",
    "start": "1837670",
    "end": "1842860"
  },
  {
    "text": "that this is only going to add a roadblock for unsophisticated attackers",
    "start": "1842860",
    "end": "1847890"
  },
  {
    "text": "that are reusing known exploits it's not it doesn't scale blacklisting doesn't scale and it will not stop attackers who",
    "start": "1847890",
    "end": "1856180"
  },
  {
    "text": "know how to find new exploits new font new vulnerabilities and then write exploits for them but we're hoping what",
    "start": "1856180",
    "end": "1861700"
  },
  {
    "text": "least stop script kiddies from rampaging around in your kernels Microsoft is in the process of finalizing their redstone",
    "start": "1861700",
    "end": "1868360"
  },
  {
    "text": "5 driver blacklist when it's complete will we're hoping to incorporate it into a future version of Qasr Oh",
    "start": "1868360",
    "end": "1875860"
  },
  {
    "text": "Qasr will be available on our website and Gabe comm sometime today so looking",
    "start": "1875860",
    "end": "1882250"
  },
  {
    "start": "1880000",
    "end": "1935000"
  },
  {
    "text": "back at our red vs. blue we realized that we needed a better way to hunt in the kernel for threats like double",
    "start": "1882250",
    "end": "1888310"
  },
  {
    "text": "pulsar and our file ass implant traditional forensic style techniques of you know full memory capture and then",
    "start": "1888310",
    "end": "1894100"
  },
  {
    "text": "offline analysis they don't really scale to too large or medium or large enterprises so to address the problem we",
    "start": "1894100",
    "end": "1901510"
  },
  {
    "text": "decided to leverage the same style of collection techniques but instead we would do the analysis on the endpoint so",
    "start": "1901510",
    "end": "1909870"
  },
  {
    "text": "it's similar to what traditionally blackbox rootkit scanners have type have done in the past this means we can",
    "start": "1909870",
    "end": "1915670"
  },
  {
    "text": "complete a scan in milliseconds instead of minutes however several technique I'm",
    "start": "1915670",
    "end": "1922630"
  },
  {
    "text": "sorry there are several techniques available to read physical memory on a Windows machine such as the physical memory device or in the kernel various",
    "start": "1922630",
    "end": "1929740"
  },
  {
    "text": "MDL based api's but our favorite technique is page table remapping",
    "start": "1929740",
    "end": "1935350"
  },
  {
    "start": "1935000",
    "end": "2001000"
  },
  {
    "text": "so processors use page tables to map virtual addresses into physical addresses page table remapping uses the",
    "start": "1935350",
    "end": "1942880"
  },
  {
    "text": "CPUs paging system itself to read arbitrary physical pages it requires",
    "start": "1942880",
    "end": "1948910"
  },
  {
    "text": "very little cooperation from the OS memory manager making it resistant to rootkits that say you hope the virtual",
    "start": "1948910",
    "end": "1954610"
  },
  {
    "text": "memory device a physical memory device the general idea of it is that you",
    "start": "1954610",
    "end": "1960310"
  },
  {
    "text": "allocate a page of memory and then you use search and you find the page table that describes that page of memory and",
    "start": "1960310",
    "end": "1966780"
  },
  {
    "text": "there's a corresponding physical page for every virtual page of memory well if once you know where that page table is if you're in the kernel you",
    "start": "1966780",
    "end": "1972820"
  },
  {
    "text": "have you can just rewrite that page table entry so you rewrite the page table entry to point to a new physical page and then afterwards you flush a CPU",
    "start": "1972820",
    "end": "1980740"
  },
  {
    "text": "cache called the translation lookaside buffer which is just caches the old value of that Pte so once you flush that",
    "start": "1980740",
    "end": "1986290"
  },
  {
    "text": "you can now reread that same virtual address which will be backed by whatever physical address year of your choosing now this technique is extremely fast",
    "start": "1986290",
    "end": "1993760"
  },
  {
    "text": "doesn't require any OSAP eyes and it was our our approach of choice so our goal",
    "start": "1993760",
    "end": "2002970"
  },
  {
    "start": "2001000",
    "end": "2133000"
  },
  {
    "text": "was to generically detect double pulsar as it lay dormant without signatures one option would have been to scan through",
    "start": "2002970",
    "end": "2008940"
  },
  {
    "text": "the kernel pool which is this it's a heap in the kernel it's the pool memory looking for shell code like blobs",
    "start": "2008940",
    "end": "2015240"
  },
  {
    "text": "unfortunately on Windows 7 the entire nan page pool is executable which leaves",
    "start": "2015240",
    "end": "2020580"
  },
  {
    "text": "a large search space and we're worried about false positives so instead we",
    "start": "2020580",
    "end": "2025980"
  },
  {
    "text": "decided to identify the function pointer hook but what would take a step back and",
    "start": "2025980",
    "end": "2031110"
  },
  {
    "text": "say what is a function pointer a function pointer in a PE file because all drivers are PE files is just an",
    "start": "2031110",
    "end": "2036900"
  },
  {
    "text": "absolute address when a driver is built it was compiled and linked it is linked with a preferred load address and all",
    "start": "2036900",
    "end": "2042780"
  },
  {
    "text": "pointers are addresses within that driver so with modern operating systems",
    "start": "2042780",
    "end": "2049560"
  },
  {
    "text": "there's address space layout randomization which means that drivers will never get loaded at the preferred load address so the compensate for this the PE file",
    "start": "2049560",
    "end": "2056580"
  },
  {
    "text": "has something called a relocation directory which is a list of all the locations within that PE file that needs",
    "start": "2056580",
    "end": "2062220"
  },
  {
    "text": "to be adjusted when if a PE gets loaded here instead of its preferred load address here so this relocation",
    "start": "2062220",
    "end": "2068370"
  },
  {
    "text": "directory is basically a list of all the pointers within the driver file so now just by",
    "start": "2068370",
    "end": "2073980"
  },
  {
    "text": "walking the relocation directory we know all the pointers in the file but we're interested in function pointers well so if we now are that list down to pointers",
    "start": "2073980",
    "end": "2081600"
  },
  {
    "text": "to executable regions within that PD file then now we have a list of function pointers",
    "start": "2081600",
    "end": "2086850"
  },
  {
    "text": "so we then qualify that even further and we we say that okay if it was a function",
    "start": "2086850",
    "end": "2094110"
  },
  {
    "text": "pointer on disk but in memory it doesn't even point to anywhere in that driver file but instead points to somewhere",
    "start": "2094110",
    "end": "2100619"
  },
  {
    "text": "else in that is also executable then we consider that a hit so this technique",
    "start": "2100619",
    "end": "2109350"
  },
  {
    "text": "that I just described detects both double pulsar and the socket Handler hook installed by our kernel mode",
    "start": "2109350",
    "end": "2114750"
  },
  {
    "text": "implant we're releasing a tool that in our testing can scan all drivers on a Windows 10 system and under it's like 80",
    "start": "2114750",
    "end": "2121200"
  },
  {
    "text": "milliseconds some like that it's it's really fast we're calling up marta named",
    "start": "2121200",
    "end": "2126450"
  },
  {
    "text": "after marta burg a the first astronomer to discover a double pole star will demo marta alongside another tool in just a",
    "start": "2126450",
    "end": "2132840"
  },
  {
    "text": "minute so on-demand scans are great but we wanted to see if we could take this a step further so we wanted to see if we",
    "start": "2132840",
    "end": "2139710"
  },
  {
    "text": "could catch in real time and potentially stop these types of attacks before they can do damage so having worked on em",
    "start": "2139710",
    "end": "2146850"
  },
  {
    "text": "games hardware assisted control flow integrity product we're familiar with the performance monitoring unit which is",
    "start": "2146850",
    "end": "2152510"
  },
  {
    "text": "present on most cpus and the PMU is a component of the cpu that can be",
    "start": "2152510",
    "end": "2158970"
  },
  {
    "text": "programmed to count occurrences of certain low-level events and you can also program it to generate and",
    "start": "2158970",
    "end": "2164070"
  },
  {
    "text": "interrupt when a certain number of those events has occurred so in this case after some experimentation we settled",
    "start": "2164070",
    "end": "2172290"
  },
  {
    "text": "upon indirect near call branch mispredictions when one of these events",
    "start": "2172290",
    "end": "2178020"
  },
  {
    "text": "occurs we program the PMU to generate an interrupt and now when the interrupt happens our interrupt service routine",
    "start": "2178020",
    "end": "2184140"
  },
  {
    "text": "executes and we have a chance to validate and enforce the policy so to detect unpacked code execution in this",
    "start": "2184140",
    "end": "2190800"
  },
  {
    "text": "case we keep a list of memory ranges that correspond to all the loaded drivers on the system and when the",
    "start": "2190800",
    "end": "2196020"
  },
  {
    "text": "interrupt occurs we validate that the instruction pointer was executing when the interupt fire",
    "start": "2196020",
    "end": "2202530"
  },
  {
    "text": "belongs to one of those valid memory ranges and if it doesn't we consider that to be a policy violation so now I'm",
    "start": "2202530",
    "end": "2210240"
  },
  {
    "start": "2208000",
    "end": "2320000"
  },
  {
    "text": "go to demo a real-time detection of the double pulsar and it's also going to",
    "start": "2210240",
    "end": "2215460"
  },
  {
    "text": "show Marta all right so first thing I'm",
    "start": "2215460",
    "end": "2223710"
  },
  {
    "text": "going to do is I'm going to start the unpack the Tecton then unpack detection driver next time to do a martyr scan and",
    "start": "2223710",
    "end": "2230340"
  },
  {
    "text": "Marta's not going to find anything because we haven't exploited the kernel yet next from a second VM I'm going to",
    "start": "2230340",
    "end": "2237300"
  },
  {
    "text": "launch the eternal blue exploit and in",
    "start": "2237300",
    "end": "2243150"
  },
  {
    "text": "just a second when they exploit succeeds you're gonna see a break into window bug that's our detection driver and it's",
    "start": "2243150",
    "end": "2249090"
  },
  {
    "text": "going to print out the instruction pointer that it detected is unpacked there it is alright so first we're gonna",
    "start": "2249090",
    "end": "2255810"
  },
  {
    "text": "know we're gonna check out that address and we're gonna see it doesn't belong to any driver module in fact it belongs to the halbert's reserved range we're gonna",
    "start": "2255810",
    "end": "2264930"
  },
  {
    "text": "look at the call stack here and we're gonna see that serve net is calling some unpacked code right here serve net dot",
    "start": "2264930",
    "end": "2270930"
  },
  {
    "text": "sis now if we look at the actual instructions of the that are executing",
    "start": "2270930",
    "end": "2277740"
  },
  {
    "text": "we're gonna see here that it is this architecture determination shell code",
    "start": "2277740",
    "end": "2283430"
  },
  {
    "text": "this is this shell code will work on both x86 and x64 it uses some tricks to",
    "start": "2283430",
    "end": "2289770"
  },
  {
    "text": "figure out which architecture it's running on finally we're gonna rerun Marta because we allowed the shell code",
    "start": "2289770",
    "end": "2296190"
  },
  {
    "text": "to execute it successfully installed a hook in to serve that sis and Marta detected it and by the way Mart is",
    "start": "2296190",
    "end": "2301440"
  },
  {
    "text": "actually faster now this was an older version debug build probably ya know we added some optimizations also yeah",
    "start": "2301440",
    "end": "2308760"
  },
  {
    "text": "so that is detection of real time all right here we go as well as demo of",
    "start": "2308760",
    "end": "2318510"
  },
  {
    "text": "Marta all right so there's weaknesses to this proof of concept including the fact",
    "start": "2318510",
    "end": "2324720"
  },
  {
    "start": "2320000",
    "end": "2389000"
  },
  {
    "text": "that patch guard itself uses unpacked code so because they're trying to hinder reverse engineering so while it's fun to",
    "start": "2324720",
    "end": "2331260"
  },
  {
    "text": "catch patch guard this false positive would need to be addressed in a reliable and robust manner it which",
    "start": "2331260",
    "end": "2338829"
  },
  {
    "text": "is difficult given the fact that patch guard is undocumented and subject to change at any time another weakness is",
    "start": "2338829",
    "end": "2345069"
  },
  {
    "text": "that kernel code so if the adversary can execute kernel code and they're aware of the system the first thing they could do",
    "start": "2345069",
    "end": "2351099"
  },
  {
    "text": "is disable the PMU all you need to do is write some MSRs to disable the PMU or they could disable",
    "start": "2351099",
    "end": "2356349"
  },
  {
    "text": "interrupts entirely and finally an attacker could always do data attacks on",
    "start": "2356349",
    "end": "2363640"
  },
  {
    "text": "our driver just like before where we can do I 80 patching things like that because this is just this is a driver",
    "start": "2363640",
    "end": "2369969"
  },
  {
    "text": "this is just software running a ring zero all right so I just want to copper quickly there's some notable work in",
    "start": "2369969",
    "end": "2375699"
  },
  {
    "text": "this space we're running short on time hypervisors that do similar things but instead of using P mu they use",
    "start": "2375699",
    "end": "2381519"
  },
  {
    "text": "hypervisors including memory Menaul mem Pro and sacrificer additional details are available in our slides which will be posted online at",
    "start": "2381519",
    "end": "2387880"
  },
  {
    "text": "the end of the day so earlier we mentioned that Windows the Windows kernel has a gap in coverage against",
    "start": "2387880",
    "end": "2393430"
  },
  {
    "start": "2389000",
    "end": "2397000"
  },
  {
    "text": "rear flow control hijacks Roth attacks so Microsoft canceled return flow guard",
    "start": "2393430",
    "end": "2399489"
  },
  {
    "start": "2397000",
    "end": "2547000"
  },
  {
    "text": "and their current plan to defend against rock requires Intel control flow enhancement technology or CET which to",
    "start": "2399489",
    "end": "2405009"
  },
  {
    "text": "our knowledge doesn't exist on any production processor today when it is released it will only benefit processors",
    "start": "2405009",
    "end": "2410380"
  },
  {
    "text": "that are the systems that are running those processors which was great for the future but it doesn't help anybody today",
    "start": "2410380",
    "end": "2415709"
  },
  {
    "text": "so here we promote a propose a PM you based protection system so we can",
    "start": "2415709",
    "end": "2423449"
  },
  {
    "text": "configure the CPUs last branch recorded mechanism to keep a circular log of all",
    "start": "2423449",
    "end": "2431140"
  },
  {
    "text": "of the return instructions that occur within the kernel we can then generate a control flow policy by scanning all the",
    "start": "2431140",
    "end": "2438519"
  },
  {
    "text": "drivers that are loaded into the kernel performing a linear scan disassembly of those drivers looking for call",
    "start": "2438519",
    "end": "2444640"
  },
  {
    "text": "instructions every call instruction on or under normal control flow the next instruction after that call instruction",
    "start": "2444640",
    "end": "2450819"
  },
  {
    "text": "is the expected return sight you call somewhere else it returns back to the next instruction so we build up a policy",
    "start": "2450819",
    "end": "2457479"
  },
  {
    "text": "for every driver on the system that's a bitmap that just says where the bid is one if that's a legitimate",
    "start": "2457479",
    "end": "2462559"
  },
  {
    "text": "return site and the bid is zero if it's not a legitimate return site and we do this for every driver on the system as the system as we start up we did this is",
    "start": "2462559",
    "end": "2469609"
  },
  {
    "text": "what we're calling a policy as new drivers load into the kernel we update the policy accordingly so generating an",
    "start": "2469609",
    "end": "2477170"
  },
  {
    "text": "interrupt for every return instruction is too costly so instead that we exploit the fact that Rob a return oriented",
    "start": "2477170",
    "end": "2482989"
  },
  {
    "text": "programming tends to generate a lot of branch mispredictions and this is because CPUs the branch predictors in",
    "start": "2482989",
    "end": "2488720"
  },
  {
    "text": "CPUs were not optimized or designed to work well in Rob scenarios so they tend",
    "start": "2488720",
    "end": "2494359"
  },
  {
    "text": "to be there tend to be a lot of branch mispredictions in these scenarios so we can we can program the PMU to only",
    "start": "2494359",
    "end": "2500809"
  },
  {
    "text": "generate interrupts when there are branch mispredictions in the kernel and then finally when one of these interrupts fires we look at that whole",
    "start": "2500809",
    "end": "2507589"
  },
  {
    "text": "circularbuffer of the PM of the lbr the last branch recorded system and we validate that each of those is a valid",
    "start": "2507589",
    "end": "2514039"
  },
  {
    "text": "return site and if one of them is not we consider that to be a policy violation so if you one thing I'd like to say if",
    "start": "2514039",
    "end": "2521900"
  },
  {
    "text": "you don't tune these systems properly they can generate way too many interrupts and they conversely affect",
    "start": "2521900",
    "end": "2527420"
  },
  {
    "text": "system performance with the system tuned as you're gonna see it in an upcoming demo we saw about a 1% reduction in the",
    "start": "2527420",
    "end": "2533839"
  },
  {
    "text": "jet stream browser benchmark while still maintaining a hundred percent detection",
    "start": "2533839",
    "end": "2538880"
  },
  {
    "text": "against our exploit our tests our sample exploit we were using this as a rough approximation of user experience all",
    "start": "2538880",
    "end": "2548420"
  },
  {
    "text": "right so here I'm gonna demo rap exploit",
    "start": "2548420",
    "end": "2557229"
  },
  {
    "text": "this is Windows 10 18:03 hypervisor code",
    "start": "2558729",
    "end": "2566269"
  },
  {
    "text": "integrity is enabled first thing I'm going to do is I'm going to start up our detection driver and it's gonna parse",
    "start": "2566269",
    "end": "2572539"
  },
  {
    "text": "every driver to float it into the kernel generate those policies and build and store them in fast lookup data",
    "start": "2572539",
    "end": "2579349"
  },
  {
    "text": "structures next I'm going to launch an exploit against that wh ql driver that's",
    "start": "2579349",
    "end": "2584779"
  },
  {
    "text": "loaded into the kernel right now and here right here you can see there's a four rap gadgets that this exploits going to use we run the exploit and our",
    "start": "2584779",
    "end": "2594440"
  },
  {
    "text": "detection driver prints out the return destinations and we can see that we",
    "start": "2594440",
    "end": "2601520"
  },
  {
    "text": "catch all four rap gadgets",
    "start": "2601520",
    "end": "2605950"
  },
  {
    "start": "2618000",
    "end": "2755000"
  },
  {
    "text": "so getting into weaknesses and limitations select any other driver this",
    "start": "2619230",
    "end": "2624820"
  },
  {
    "text": "driver is vulnerable to data attacks like IAT patching etc or attacks on our policy bitmaps then just like before the",
    "start": "2624820",
    "end": "2631900"
  },
  {
    "text": "p.m. you can be disabled by an adversary with would bring zero access however both of these issues could be addressed",
    "start": "2631900",
    "end": "2638140"
  },
  {
    "text": "with a hypervisor the hypervisor could create and maintain the policy bitmaps just like they do with control flow",
    "start": "2638140",
    "end": "2643300"
  },
  {
    "text": "guard and they keep those bitmaps read-only to the kernel so they can't be tampered with the hypervisor could also",
    "start": "2643300",
    "end": "2650410"
  },
  {
    "text": "prevent tampering of the MSRs that control the performance miring unit as well as the last branch recorded",
    "start": "2650410",
    "end": "2655600"
  },
  {
    "text": "mechanism to keep them from being tampered with another issue is that in order to perform utley and accurately",
    "start": "2655600",
    "end": "2662109"
  },
  {
    "text": "determine control flow we need both the p mu and the l BR this means that if this system is running inside of a",
    "start": "2662109",
    "end": "2668290"
  },
  {
    "text": "hypervisor the hypervisor needs to make both of those cpu functions available to us this is not currently true on hyper-v",
    "start": "2668290",
    "end": "2675910"
  },
  {
    "text": "or VMware VMware does expose the P mu but not the l BR however the VBS or",
    "start": "2675910",
    "end": "2682390"
  },
  {
    "text": "virtualization based security hypervisor than the newer Windows 10 the numeron dos 10 security feature does make it",
    "start": "2682390",
    "end": "2689680"
  },
  {
    "text": "available so it is available on native hardware if you have h v CI enabled this system does depend on being able to",
    "start": "2689680",
    "end": "2697480"
  },
  {
    "text": "accurately determine valid return sites which means we need to build up that remember I was talking for about the call and it needs to be have the return",
    "start": "2697480",
    "end": "2703810"
  },
  {
    "text": "site immediately afterwards well unfortunately there's two drivers that are loaded into the Windows kernel by default that are off you skated clip",
    "start": "2703810",
    "end": "2710830"
  },
  {
    "text": "SPSS and PE off that sis because their APIs gated they do weird things like",
    "start": "2710830",
    "end": "2717010"
  },
  {
    "text": "push rep and that make it difficult to determine all the legitimate return sites so we have to currently ignore all",
    "start": "2717010",
    "end": "2725320"
  },
  {
    "text": "returns into those drivers which creates a huge gap this could be addressed by Microsoft if they were to have their",
    "start": "2725320",
    "end": "2731380"
  },
  {
    "text": "obfuscating compiler emit a list of valid return sites what's doing its obfuscation and then those return sets",
    "start": "2731380",
    "end": "2738010"
  },
  {
    "text": "could be used for Policy generation so finally I want to give credit to George",
    "start": "2738010",
    "end": "2743230"
  },
  {
    "text": "butcher ski-in a testament to there's nothing new Under the Sun we very recently found out that he invented a",
    "start": "2743230",
    "end": "2750460"
  },
  {
    "text": "similar system clears implemented against Linux so today we",
    "start": "2750460",
    "end": "2758700"
  },
  {
    "start": "2755000",
    "end": "2765000"
  },
  {
    "text": "talked about how Windows kernel security has evolved over time in response to",
    "start": "2758700",
    "end": "2763950"
  },
  {
    "text": "threats we then discovered we discussed some discoveries that we as red teamers",
    "start": "2763950",
    "end": "2769380"
  },
  {
    "start": "2765000",
    "end": "2840000"
  },
  {
    "text": "made and then we put our blue shirts back on and discuss some ways to close",
    "start": "2769380",
    "end": "2774510"
  },
  {
    "text": "these gaps Windows platform security has gotten a lot better in the last decade",
    "start": "2774510",
    "end": "2780390"
  },
  {
    "text": "but there's still big holes that will need to be addressed at some point there's steps you can take though you",
    "start": "2780390",
    "end": "2787020"
  },
  {
    "text": "should be upgrading to Windows 10 you should be enabling your TPMS secure boot hypervisor code integrity implement a",
    "start": "2787020",
    "end": "2795599"
  },
  {
    "text": "code integrity policy that requires extended validation and wh ql signatures if possible go even stricter and",
    "start": "2795599",
    "end": "2803700"
  },
  {
    "text": "implement a whitelist of allowed publishers for your organization use the",
    "start": "2803700",
    "end": "2809670"
  },
  {
    "text": "so assigned code integrity policy because if you don't sign it it can be just replaced by the attackers if they",
    "start": "2809670",
    "end": "2815099"
  },
  {
    "text": "died they might have to reboot the system but whatever and finally monitor",
    "start": "2815099",
    "end": "2820230"
  },
  {
    "text": "and hunt on driver loads throughout your organization how many questions",
    "start": "2820230",
    "end": "2828770"
  },
  {
    "text": "[Applause]",
    "start": "2833000",
    "end": "2836719"
  },
  {
    "text": "[Music] [Applause]",
    "start": "2838780",
    "end": "2842760"
  }
]