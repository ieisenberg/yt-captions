[
  {
    "text": "[Music]",
    "start": "520",
    "end": "19839"
  },
  {
    "text": "I am the manager of security flight.com today I will explain the method of the",
    "start": "39719",
    "end": "47640"
  },
  {
    "text": "promis K node detection which uses the app",
    "start": "47640",
    "end": "52800"
  },
  {
    "text": "packet uh as a hacker when we try out new tools we should always read the",
    "start": "52800",
    "end": "60519"
  },
  {
    "text": "readme.txt file it is because read me file always",
    "start": "60519",
    "end": "66280"
  },
  {
    "text": "contained important information about function of the",
    "start": "66280",
    "end": "72840"
  },
  {
    "text": "tools uh here is a read me file of my",
    "start": "74240",
    "end": "80439"
  },
  {
    "text": "speech as you can see I am not an",
    "start": "80439",
    "end": "85600"
  },
  {
    "text": "English native speaker so when you are listening to my spe you may come to this",
    "start": "85600",
    "end": "94840"
  },
  {
    "text": "situation so my advice is please change your ears to the",
    "start": "96880",
    "end": "105880"
  },
  {
    "text": "promise chos [Applause] mode so you can get all the information",
    "start": "105880",
    "end": "113640"
  },
  {
    "text": "in this",
    "start": "113640",
    "end": "116119"
  },
  {
    "text": "speech agenda uh this is an this is an agenda",
    "start": "118840",
    "end": "124200"
  },
  {
    "text": "of my speech to to understand the mechanism of the promiscous detection I",
    "start": "124200",
    "end": "130399"
  },
  {
    "text": "will begin with explaining some basic Technologies the first one is the",
    "start": "130399",
    "end": "136680"
  },
  {
    "text": "hardware filter which is done by the Nick next I will explain address",
    "start": "136680",
    "end": "144720"
  },
  {
    "text": "resolution protocol this protocol is what we are going to use to detect",
    "start": "144720",
    "end": "152280"
  },
  {
    "text": "promisc and third I will explain filtering with",
    "start": "152280",
    "end": "158400"
  },
  {
    "text": "software here we will discuss what kind of filtering which is done by the",
    "start": "158400",
    "end": "166080"
  },
  {
    "text": "coral promisc is detected by using these three basic",
    "start": "166080",
    "end": "172480"
  },
  {
    "text": "Technologies and at the end I will explain the exception that I",
    "start": "172480",
    "end": "178760"
  },
  {
    "text": "know",
    "start": "178760",
    "end": "181760"
  },
  {
    "text": "Hardware filter everybody knows that our PC",
    "start": "184799",
    "end": "190599"
  },
  {
    "text": "usually does not receive all packet on the network it only filtered and takes",
    "start": "190599",
    "end": "198239"
  },
  {
    "text": "desired packet when the packet reaches the PC by",
    "start": "198239",
    "end": "204239"
  },
  {
    "text": "passing The Nick it is filtered in the nick we call we will call this filter a",
    "start": "204239",
    "end": "211879"
  },
  {
    "text": "hardware filter what this filter does is to check",
    "start": "211879",
    "end": "218360"
  },
  {
    "text": "the hardware address of the packet notice that we are talking about the",
    "start": "218360",
    "end": "224840"
  },
  {
    "text": "hardware address but not the IP address here are some Hardware",
    "start": "224840",
    "end": "233159"
  },
  {
    "text": "filters unicast broadcast multi",
    "start": "233159",
    "end": "240680"
  },
  {
    "text": "cast all multic cast and promise",
    "start": "240680",
    "end": "247200"
  },
  {
    "text": "cars unicast this is a general filter Nick",
    "start": "248879",
    "end": "254680"
  },
  {
    "text": "has a unique Hardware address in six bytes only the packet to the hardware",
    "start": "254680",
    "end": "261160"
  },
  {
    "text": "address of the device can pass for example if the hardware address of the",
    "start": "261160",
    "end": "268600"
  },
  {
    "text": "device is 00 Z one one 2 two 3 three 4 4",
    "start": "268600",
    "end": "273960"
  },
  {
    "text": "55 and if there is a packet with address 0011 22 3 3",
    "start": "273960",
    "end": "281919"
  },
  {
    "text": "4455 is being sent on the network in this case since the address of this",
    "start": "281919",
    "end": "288639"
  },
  {
    "text": "packet and the hardware address of the device are the",
    "start": "288639",
    "end": "293840"
  },
  {
    "text": "same therefore the packet can pass the hardware filter on the other hand if this is a",
    "start": "293840",
    "end": "302320"
  },
  {
    "text": "packet with address 0011 22 33 4401 being sent on the network the",
    "start": "302320",
    "end": "310919"
  },
  {
    "text": "address of this packet is not the same as the hardware",
    "start": "310919",
    "end": "316800"
  },
  {
    "text": "address of the Nick the packet is rejected by the",
    "start": "316800",
    "end": "323039"
  },
  {
    "text": "hardware filter uh broadcast",
    "start": "323039",
    "end": "330479"
  },
  {
    "text": "this filter passes the broadcast packet the hardware broadcast address is FF FF",
    "start": "330479",
    "end": "337800"
  },
  {
    "text": "FF FF FF FF when you send the broadcast packet on",
    "start": "337800",
    "end": "344680"
  },
  {
    "text": "the network the packet will pass the",
    "start": "344680",
    "end": "350319"
  },
  {
    "text": "hardware filter the app request packet usually uses this Hardware broadcast address and",
    "start": "350319",
    "end": "359759"
  },
  {
    "text": "we will discuss it",
    "start": "359759",
    "end": "363240"
  },
  {
    "text": "later multicast in this filter only the",
    "start": "366120",
    "end": "371280"
  },
  {
    "text": "multicast address registered in the multicast list campass the Nick for",
    "start": "371280",
    "end": "377800"
  },
  {
    "text": "example mcast address one and three are registered in the",
    "start": "377800",
    "end": "384520"
  },
  {
    "text": "list ethernet multi address one is 010 00",
    "start": "384520",
    "end": "391319"
  },
  {
    "text": "580000 01 ethernet multicast address three is 01 00 5",
    "start": "391319",
    "end": "401960"
  },
  {
    "text": "003 when the packet with mcast address one is sent on the",
    "start": "403039",
    "end": "409960"
  },
  {
    "text": "network the mcast packet passes the filter it is because multitest address",
    "start": "410840",
    "end": "417280"
  },
  {
    "text": "one is registered in the mcast list",
    "start": "417280",
    "end": "422520"
  },
  {
    "text": "next when the packet with mcast address two is sent on the",
    "start": "422520",
    "end": "429800"
  },
  {
    "text": "network the packet will be rejected by the hardware filter it is because",
    "start": "429800",
    "end": "436599"
  },
  {
    "text": "multicast address two is not registered in the multicast",
    "start": "436599",
    "end": "442680"
  },
  {
    "text": "list all mcast this filter simply passes all the",
    "start": "445360",
    "end": "451639"
  },
  {
    "text": "multicast packets so it does not check the multicast",
    "start": "451639",
    "end": "457120"
  },
  {
    "text": "list then how does Hardware filter Define multitest",
    "start": "457120",
    "end": "463440"
  },
  {
    "text": "packet in the hardware filter the packet where the group bit is set is a",
    "start": "463440",
    "end": "470800"
  },
  {
    "text": "multicast",
    "start": "470800",
    "end": "473560"
  },
  {
    "text": "packet therefore the old M cat filter passes all the packet in which the group",
    "start": "476039",
    "end": "482800"
  },
  {
    "text": "bit is set the group bit is LSB of the first",
    "start": "482800",
    "end": "488120"
  },
  {
    "text": "bite of the hardware address please look at this",
    "start": "488120",
    "end": "493919"
  },
  {
    "text": "figure Hardware address is 0 1 02 03 04",
    "start": "493919",
    "end": "499280"
  },
  {
    "text": "0 five 06 the first bite is 01 when you show it by",
    "start": "499280",
    "end": "507000"
  },
  {
    "text": "binary it is 00 000000",
    "start": "507000",
    "end": "513320"
  },
  {
    "text": "01 the bit on the right Edge is a group bit this is very",
    "start": "513320",
    "end": "520800"
  },
  {
    "text": "important when the all mcast filter is set the packet is with the group bit is",
    "start": "523000",
    "end": "530839"
  },
  {
    "text": "set can pass the filter notice that this filter test only the group bit for",
    "start": "530839",
    "end": "537959"
  },
  {
    "text": "example if there is a packet with address 0 1",
    "start": "537959",
    "end": "544720"
  },
  {
    "text": "000000001 and it's sent on the",
    "start": "545720",
    "end": "550920"
  },
  {
    "text": "network the packet can still pass the hardware filter because the group bit is",
    "start": "553279",
    "end": "560920"
  },
  {
    "text": "on however if the packet of address 02",
    "start": "560920",
    "end": "567680"
  },
  {
    "text": "00000000000000 01 is",
    "start": "567680",
    "end": "572680"
  },
  {
    "text": "sent the packet will be rejected because the group bit is off this is all I want",
    "start": "573600",
    "end": "582000"
  },
  {
    "text": "to say about all mcast",
    "start": "582000",
    "end": "586560"
  },
  {
    "text": "now promise C next is the promise C mode when the",
    "start": "588680",
    "end": "594760"
  },
  {
    "text": "Nick is promiscuous all packets can pass the",
    "start": "594760",
    "end": "600079"
  },
  {
    "text": "filter sun set the Nick to this promiscuous mode in order to receive all",
    "start": "600079",
    "end": "606560"
  },
  {
    "text": "packets so all packets in the cable are received when the Nick is promiscuous",
    "start": "606560",
    "end": "613720"
  },
  {
    "text": "mode the hardware filter does not test the hardware address of the",
    "start": "613720",
    "end": "619760"
  },
  {
    "text": "packet all packet can pass the Nick and now we want to detect all Nicks which",
    "start": "619760",
    "end": "627959"
  },
  {
    "text": "are set this mod",
    "start": "627959",
    "end": "631040"
  },
  {
    "text": "the fourth Hardware filter now I will I will explain the",
    "start": "636360",
    "end": "642160"
  },
  {
    "text": "default Hardware filter that PCS are normally using this is a default",
    "start": "642160",
    "end": "648839"
  },
  {
    "text": "Hardware filter of both windows and",
    "start": "648839",
    "end": "653880"
  },
  {
    "text": "Linux unicast of course packet with the hot",
    "start": "653880",
    "end": "659200"
  },
  {
    "text": "Hardware address are passed broadcast by default all",
    "start": "659200",
    "end": "666680"
  },
  {
    "text": "broadcast packet are received this is required to the address resolution such",
    "start": "666680",
    "end": "674279"
  },
  {
    "text": "as op multicast multicast address one is",
    "start": "674279",
    "end": "680600"
  },
  {
    "text": "passive multicast address one is an address which all hosts should",
    "start": "680600",
    "end": "687760"
  },
  {
    "text": "receive this basic operation is important for promise C",
    "start": "687760",
    "end": "693600"
  },
  {
    "text": "detection next we will discuss the use of our packet which can detect promis",
    "start": "693600",
    "end": "702279"
  },
  {
    "text": "cures op op is address resolution protocol it is explained in",
    "start": "703760",
    "end": "712079"
  },
  {
    "text": "RFC 826 it is a protocol used to search for",
    "start": "712079",
    "end": "718680"
  },
  {
    "text": "hard Hardware address corresponding to an IP address everybody knows up well IP",
    "start": "718680",
    "end": "727279"
  },
  {
    "text": "address is not a hardware address the application cannot send a",
    "start": "727279",
    "end": "734240"
  },
  {
    "text": "packet if it if it knows only the I IP",
    "start": "734240",
    "end": "739839"
  },
  {
    "text": "address it has to search for the hardware address corresponding to the",
    "start": "739839",
    "end": "745600"
  },
  {
    "text": "that IP address this task is done by the app",
    "start": "745600",
    "end": "752519"
  },
  {
    "text": "packet this is a basic flow of app I will not explain the app table today but",
    "start": "753839",
    "end": "762880"
  },
  {
    "text": "only the app packet to send the packet to an IP",
    "start": "762880",
    "end": "768240"
  },
  {
    "text": "address it first need compose an app packet in which contain the requested IP",
    "start": "768240",
    "end": "777079"
  },
  {
    "text": "address the app package then is sent to the broadcast address all noes in the",
    "start": "777079",
    "end": "784519"
  },
  {
    "text": "local net will receive that up packet then the node with the request IP",
    "start": "784519",
    "end": "792320"
  },
  {
    "text": "address will reply along with its own Hardware address thus the hardware",
    "start": "792320",
    "end": "799600"
  },
  {
    "text": "address is resolved from the IP address in the local",
    "start": "799600",
    "end": "805839"
  },
  {
    "text": "net uh this is a format of the app request",
    "start": "807760",
    "end": "814320"
  },
  {
    "text": "packet the format of the app reply packet is similar to this the first",
    "start": "814320",
    "end": "821680"
  },
  {
    "text": "three line are headers of ethernet the first line is destination",
    "start": "821680",
    "end": "829680"
  },
  {
    "text": "address of the ethernet packet this part will be filtered by the",
    "start": "829680",
    "end": "836399"
  },
  {
    "text": "Nick in a normal usage of of op it is broadcasted to FF FF FF FF FF",
    "start": "836399",
    "end": "846440"
  },
  {
    "text": "FF the last line is a request IP address IP address of the target is set",
    "start": "846440",
    "end": "856440"
  },
  {
    "text": "here test one when the app packet requesting a",
    "start": "858120",
    "end": "863399"
  },
  {
    "text": "hardware address is sent to the broadcast address the requested node receive the",
    "start": "863399",
    "end": "871279"
  },
  {
    "text": "packet since it is broadcast address the packet",
    "start": "871279",
    "end": "876480"
  },
  {
    "text": "passes Hardware filter and the node respond and the node",
    "start": "876480",
    "end": "883199"
  },
  {
    "text": "responds by sending the app reply packet this is a flow of basic",
    "start": "883199",
    "end": "890199"
  },
  {
    "text": "app here is our idea of the promise SC detection when we do not set the",
    "start": "890199",
    "end": "898680"
  },
  {
    "text": "broadcast address for example we set the destination address",
    "start": "898680",
    "end": "905560"
  },
  {
    "text": "to be 00000000000000",
    "start": "905560",
    "end": "911680"
  },
  {
    "text": "one if the Nick is in normal",
    "start": "911680",
    "end": "916800"
  },
  {
    "text": "mode the r packet is rejected by Nick",
    "start": "916839",
    "end": "922880"
  },
  {
    "text": "however if the Nick is in promiscuous mode the packet passive",
    "start": "922880",
    "end": "930000"
  },
  {
    "text": "Nick if the the request IP address is corresponding to the IP address of the",
    "start": "930000",
    "end": "936759"
  },
  {
    "text": "node the node respond to the app packet this is what I",
    "start": "936759",
    "end": "943120"
  },
  {
    "text": "S [Music] however the node does not",
    "start": "943120",
    "end": "949079"
  },
  {
    "text": "respond so the promise C node cannot be detected by this",
    "start": "949079",
    "end": "957600"
  },
  {
    "text": "method",
    "start": "957600",
    "end": "960600"
  },
  {
    "text": "consideration of test one why is there no",
    "start": "963120",
    "end": "968240"
  },
  {
    "text": "reply when the Nick is in promiscuous no mode the app request packet surely",
    "start": "968240",
    "end": "975680"
  },
  {
    "text": "passes the Nick the request IP address is also",
    "start": "975680",
    "end": "982440"
  },
  {
    "text": "correct I expected the reply but there was no reply so I think there must be",
    "start": "982440",
    "end": "990839"
  },
  {
    "text": "some kind of filter in the software we call it a software",
    "start": "990839",
    "end": "997680"
  },
  {
    "text": "filter what kind of filter is it is it a multicast filter is it a broadcast",
    "start": "997680",
    "end": "1006720"
  },
  {
    "text": "filter let's look at the Linux carel source",
    "start": "1006720",
    "end": "1012440"
  },
  {
    "text": "code this is a part of the source code of the app module in",
    "start": "1013519",
    "end": "1019399"
  },
  {
    "text": "Linux there are the filter of",
    "start": "1019399",
    "end": "1024120"
  },
  {
    "text": "the",
    "start": "1047400",
    "end": "1050400"
  },
  {
    "text": "in red here if loot back tip or multicast tip",
    "start": "1061960",
    "end": "1071280"
  },
  {
    "text": "then go to out this checks the request IP address if the request IP address",
    "start": "1071280",
    "end": "1078400"
  },
  {
    "text": "address is root back address go to out and if the request IP address is the",
    "start": "1078400",
    "end": "1085200"
  },
  {
    "text": "multicast address like 224 star. star. star then go to out this is not a filter",
    "start": "1085200",
    "end": "1094000"
  },
  {
    "text": "in the hardware",
    "start": "1094000",
    "end": "1097120"
  },
  {
    "text": "address this is a summary of the filter in the app module first it check the",
    "start": "1100600",
    "end": "1107799"
  },
  {
    "text": "following condition if our message is",
    "start": "1107799",
    "end": "1113440"
  },
  {
    "text": "correct if a packet is not other host if",
    "start": "1113440",
    "end": "1118880"
  },
  {
    "text": "a packet is not loop back if the request",
    "start": "1118880",
    "end": "1124039"
  },
  {
    "text": "IP address is not Lo back if the request",
    "start": "1124039",
    "end": "1129559"
  },
  {
    "text": "IP address is not multicast then the app module will",
    "start": "1129559",
    "end": "1135400"
  },
  {
    "text": "respond to the packet of two of the broad cast and",
    "start": "1135400",
    "end": "1140880"
  },
  {
    "text": "multicast this is how the Linux conal Implement",
    "start": "1140880",
    "end": "1147400"
  },
  {
    "text": "op class classification of packet then in in the",
    "start": "1148919",
    "end": "1157039"
  },
  {
    "text": "software what is the 2s packet what is a multicast packet what",
    "start": "1157039",
    "end": "1165120"
  },
  {
    "text": "is a broadcast packet since I want to check the classification of the packet I will",
    "start": "1165120",
    "end": "1172840"
  },
  {
    "text": "check the classification of the ethernet",
    "start": "1172840",
    "end": "1177760"
  },
  {
    "text": "packet this is a part of the source Cod of the ethernet module in",
    "start": "1179159",
    "end": "1186320"
  },
  {
    "text": "Linux the first bit first bit of H disc is tested by the first if line HD is a",
    "start": "1186320",
    "end": "1197200"
  },
  {
    "text": "six byte Hardware destination address in this line LSB of the Prime",
    "start": "1197200",
    "end": "1204480"
  },
  {
    "text": "bite is tested this is the group bit is",
    "start": "1204480",
    "end": "1209520"
  },
  {
    "text": "tested when the group bit is set the corner checks whether HD is a broadcast",
    "start": "1209520",
    "end": "1218200"
  },
  {
    "text": "address if it is a broadcast address the packet is Packet",
    "start": "1218200",
    "end": "1224840"
  },
  {
    "text": "broadcast otherwise the packet is Packet",
    "start": "1224840",
    "end": "1230159"
  },
  {
    "text": "multicast next if the group bit is not set device address of Nick and H dis are",
    "start": "1230159",
    "end": "1240240"
  },
  {
    "text": "compared if they are not the same then it must be packet for other",
    "start": "1240240",
    "end": "1251039"
  },
  {
    "text": "Host this is a flow chart of the classification of the packet",
    "start": "1252440",
    "end": "1260120"
  },
  {
    "text": "there are four kinds of packet used to detect promis",
    "start": "1260440",
    "end": "1266880"
  },
  {
    "text": "cures there are other host to us",
    "start": "1266880",
    "end": "1272440"
  },
  {
    "text": "multicast and broadcast please recall the app",
    "start": "1272440",
    "end": "1279200"
  },
  {
    "text": "module when the app message is correct app will execute its software filter",
    "start": "1280640",
    "end": "1287279"
  },
  {
    "text": "code if Hardware destination address is any of to us multicast or",
    "start": "1287279",
    "end": "1297600"
  },
  {
    "text": "broadcast in a case that certain packet is received first the group bit of the",
    "start": "1298440",
    "end": "1306400"
  },
  {
    "text": "packet is tested if it is true the hardware destination address",
    "start": "1306400",
    "end": "1314840"
  },
  {
    "text": "are compared to the broadcast address of course the broadcast address",
    "start": "1314840",
    "end": "1322120"
  },
  {
    "text": "is FF FF FF FF FF if it is",
    "start": "1322120",
    "end": "1329480"
  },
  {
    "text": "yes the packet is broadcast if it is no the packet is",
    "start": "1329480",
    "end": "1338200"
  },
  {
    "text": "multicast in both cases the app module will",
    "start": "1338200",
    "end": "1344080"
  },
  {
    "text": "respond next in the case that the group bit is",
    "start": "1344080",
    "end": "1349360"
  },
  {
    "text": "not",
    "start": "1349360",
    "end": "1351640"
  },
  {
    "text": "set the hardware destination address are compared with the device address of the",
    "start": "1354679",
    "end": "1361640"
  },
  {
    "text": "Nick if there are a call the packet is a 2s packet if oh sorry uh and the op",
    "start": "1361640",
    "end": "1371520"
  },
  {
    "text": "module will respond to the",
    "start": "1371520",
    "end": "1376640"
  },
  {
    "text": "packet if the hardware destination address is not equal to the device",
    "start": "1376960",
    "end": "1382840"
  },
  {
    "text": "address pocket or other host the app module will not respond to this",
    "start": "1382840",
    "end": "1391520"
  },
  {
    "text": "packet in the case with Linux the promis curse node might be",
    "start": "1394279",
    "end": "1400559"
  },
  {
    "text": "able to be detected by using a packet the packet",
    "start": "1400559",
    "end": "1406480"
  },
  {
    "text": "type the h Hardware filter the software filter and Nick mode were shown in this",
    "start": "1406480",
    "end": "1415480"
  },
  {
    "text": "table the 2s packet passes the hardware filter and",
    "start": "1416320",
    "end": "1422320"
  },
  {
    "text": "the software filter in the normal mode and in promiscuous mode so this packet",
    "start": "1422320",
    "end": "1429559"
  },
  {
    "text": "cannot be used for promisc detection the following line is other",
    "start": "1429559",
    "end": "1436080"
  },
  {
    "text": "host packet when Nick is a normal mode this packet",
    "start": "1436080",
    "end": "1442919"
  },
  {
    "text": "is reject rejected by Hardware filter when Nick is a promiscuous mode",
    "start": "1442919",
    "end": "1451640"
  },
  {
    "text": "this packet passes the hardware filter however it is rejected by the software",
    "start": "1451640",
    "end": "1458760"
  },
  {
    "text": "filter either mode does not have to",
    "start": "1458760",
    "end": "1464039"
  },
  {
    "text": "response therefore these cannot be used for promiscuous",
    "start": "1464039",
    "end": "1471679"
  },
  {
    "text": "detection next we look at the broadcast packet either",
    "start": "1471679",
    "end": "1478559"
  },
  {
    "text": "model also has to respond to the broadcast packet it cannot be used for",
    "start": "1478559",
    "end": "1486440"
  },
  {
    "text": "the promiscuous detection because there is no difference in the",
    "start": "1486440",
    "end": "1492640"
  },
  {
    "text": "result the multicast packet was classified into two types",
    "start": "1492640",
    "end": "1498799"
  },
  {
    "text": "one is an address registered in the multicast list another one is an address",
    "start": "1498799",
    "end": "1505760"
  },
  {
    "text": "not registered in the multicast list the packet having an address",
    "start": "1505760",
    "end": "1512200"
  },
  {
    "text": "registered in the list passes the hardware",
    "start": "1512200",
    "end": "1517679"
  },
  {
    "text": "filter the packet also passive the hardware filter in the promis curse",
    "start": "1518640",
    "end": "1525200"
  },
  {
    "text": "mode because the app module respond to the multicast packet either",
    "start": "1525200",
    "end": "1531880"
  },
  {
    "text": "mode had respond the packet this packet cannot be used for the promiscuous",
    "start": "1531880",
    "end": "1540440"
  },
  {
    "text": "detection next is a multicast packet not registered in the",
    "start": "1540440",
    "end": "1547360"
  },
  {
    "text": "list when the Nick is in normal mode this packet is re rejected by the",
    "start": "1547360",
    "end": "1553760"
  },
  {
    "text": "hardware filter of the Nick so there is no response at",
    "start": "1553760",
    "end": "1559240"
  },
  {
    "text": "all however when the Nick is in promiscuous mode this packet passes",
    "start": "1559240",
    "end": "1566760"
  },
  {
    "text": "Hardware filter and following software filter does not reject this packet either then",
    "start": "1566760",
    "end": "1575279"
  },
  {
    "text": "the app responds to that packet here the result of the normal",
    "start": "1575279",
    "end": "1582039"
  },
  {
    "text": "mode and promiscuous node are different promiscuous",
    "start": "1582039",
    "end": "1588399"
  },
  {
    "text": "can be detected with the up packet which set the multicast address",
    "start": "1588399",
    "end": "1594799"
  },
  {
    "text": "not registered in the list next we try sending a packet where",
    "start": "1594799",
    "end": "1603080"
  },
  {
    "text": "the group bit is set neither the multicast nor the",
    "start": "1603080",
    "end": "1608960"
  },
  {
    "text": "broadcast are included in this packet when the Nick is in normal mode",
    "start": "1608960",
    "end": "1616799"
  },
  {
    "text": "this packet is is rejected by the hardware filter of the Nick when the",
    "start": "1616799",
    "end": "1622360"
  },
  {
    "text": "Nick is in promiscuous mode this packet passes the hardware",
    "start": "1622360",
    "end": "1629960"
  },
  {
    "text": "filter the following filter does not reject this packet",
    "start": "1629960",
    "end": "1635760"
  },
  {
    "text": "either then the op reply returns at this group bit packet the",
    "start": "1635760",
    "end": "1644159"
  },
  {
    "text": "result of the normal mode and promisc mode are different so it can detect",
    "start": "1644159",
    "end": "1652880"
  },
  {
    "text": "promiscuous to highlight it our results this pink Zone can be used to detect",
    "start": "1652880",
    "end": "1660480"
  },
  {
    "text": "promise scills for",
    "start": "1660480",
    "end": "1664240"
  },
  {
    "text": "Linux next is",
    "start": "1676519",
    "end": "1683399"
  },
  {
    "text": "Windows however I'm sorry I don't know the software filter of",
    "start": "1683399",
    "end": "1689720"
  },
  {
    "text": "Windows because I have not seen the S source code however there must be some kind of",
    "start": "1689720",
    "end": "1698760"
  },
  {
    "text": "software filter so in order to understand how it works I performed some",
    "start": "1698760",
    "end": "1706440"
  },
  {
    "text": "test here is how I test the",
    "start": "1706440",
    "end": "1713080"
  },
  {
    "text": "filters I use seven kinds of special Hardware address of to test the software",
    "start": "1713080",
    "end": "1722120"
  },
  {
    "text": "filter the first address is a broadcast this is a usual up",
    "start": "1722120",
    "end": "1728919"
  },
  {
    "text": "packet therefore it is expected that all nod respond up might not run if there is",
    "start": "1728919",
    "end": "1738679"
  },
  {
    "text": "no response in it the second address is fake broadcast",
    "start": "1738679",
    "end": "1746279"
  },
  {
    "text": "with only 31 bits it is broadcast in which only the last one bit is",
    "start": "1746279",
    "end": "1754720"
  },
  {
    "text": "dropped since that one bit is dropped this packet is actually not a broadcast",
    "start": "1754720",
    "end": "1762240"
  },
  {
    "text": "address if the software filter does not completely compare six",
    "start": "1762240",
    "end": "1768399"
  },
  {
    "text": "bytes this packet might be classified into the",
    "start": "1768399",
    "end": "1773640"
  },
  {
    "text": "broadcast the third address is fake broadcast with 16",
    "start": "1773640",
    "end": "1780159"
  },
  {
    "text": "bits it is the same as the broadcast address but only the first 16 bits of",
    "start": "1780159",
    "end": "1786919"
  },
  {
    "text": "the head are set so this packet is also actually not",
    "start": "1786919",
    "end": "1792880"
  },
  {
    "text": "a broadcast if the software filter compared on only one world this packet",
    "start": "1792880",
    "end": "1799799"
  },
  {
    "text": "might be classified into the broadcast the four address is another",
    "start": "1799799",
    "end": "1807760"
  },
  {
    "text": "fake broadcast with eight bits here only one bite of the head is the same as the",
    "start": "1807760",
    "end": "1815640"
  },
  {
    "text": "broadcast if the software filter compared only one bite this packet might",
    "start": "1815640",
    "end": "1822080"
  },
  {
    "text": "be classified into the broadcast the fifth is multicast address",
    "start": "1822080",
    "end": "1829720"
  },
  {
    "text": "zero in general multicast address zero is not used it is an address not",
    "start": "1829720",
    "end": "1838000"
  },
  {
    "text": "registered in the multicast list the hardware filter is supposed to",
    "start": "1838000",
    "end": "1845760"
  },
  {
    "text": "reject this packet however the software filter might classify the packet as a",
    "start": "1845760",
    "end": "1852640"
  },
  {
    "text": "multicast packet the sixth address is multicast",
    "start": "1852640",
    "end": "1859600"
  },
  {
    "text": "address one this packet passes the hardware filter by",
    "start": "1859600",
    "end": "1865200"
  },
  {
    "text": "default it is to test whether the software filter passes a",
    "start": "1865200",
    "end": "1871440"
  },
  {
    "text": "multicast the OS does not respond to the multicast of all the",
    "start": "1871440",
    "end": "1878000"
  },
  {
    "text": "addresses if there is no response in this packet finally it is an address where",
    "start": "1878000",
    "end": "1885559"
  },
  {
    "text": "the group bit us set this packet might be classified into",
    "start": "1885559",
    "end": "1891880"
  },
  {
    "text": "the multicast as in",
    "start": "1891880",
    "end": "1895760"
  },
  {
    "text": "Linux this is a result of test two when the nick of Windows 95 and 98",
    "start": "1899919",
    "end": "1909480"
  },
  {
    "text": "and me were in normal modes seven kind of Hardware address are",
    "start": "1909480",
    "end": "1916159"
  },
  {
    "text": "tested there was a reply in the broadcast and",
    "start": "1916159",
    "end": "1921279"
  },
  {
    "text": "multicast address one the result is the same as we",
    "start": "1921279",
    "end": "1927200"
  },
  {
    "text": "expected next the mode of Nick is switched to",
    "start": "1927200",
    "end": "1933360"
  },
  {
    "text": "promiscuous I was surprised in the promiscuous mode there",
    "start": "1933360",
    "end": "1940960"
  },
  {
    "text": "is a response for the fake broadcast",
    "start": "1940960",
    "end": "1946080"
  },
  {
    "text": "request as a result the windows 9x series might",
    "start": "1946080",
    "end": "1951880"
  },
  {
    "text": "classify broadcast by just checking one bite on the",
    "start": "1951880",
    "end": "1960200"
  },
  {
    "text": "head anyway as a result the promiscuous node of the windows 9x series can be",
    "start": "1960320",
    "end": "1968080"
  },
  {
    "text": "detected by using the r",
    "start": "1968080",
    "end": "1972480"
  },
  {
    "text": "packet when the nick of Windows 2000 is is in normal",
    "start": "1973440",
    "end": "1978919"
  },
  {
    "text": "mode the result is the same as we",
    "start": "1978919",
    "end": "1984120"
  },
  {
    "text": "expected there is a response for broadcast and multicast address one next",
    "start": "1984120",
    "end": "1990799"
  },
  {
    "text": "the mode of the Nick is switched to promis CES the result",
    "start": "1990799",
    "end": "1999279"
  },
  {
    "text": "is there is a response for 31 bits and 16 bits fake broadcast",
    "start": "2000679",
    "end": "2008039"
  },
  {
    "text": "it is no reply for 8bit fake broadcast Windows 2000 might classify",
    "start": "2008039",
    "end": "2015519"
  },
  {
    "text": "the broadcast by one word and the promiscous node of Windows",
    "start": "2015519",
    "end": "2023440"
  },
  {
    "text": "2000 can be detected by using the app packet in our test the result of Windows",
    "start": "2023440",
    "end": "2032679"
  },
  {
    "text": "nt4 is the same as the case of windows",
    "start": "2032679",
    "end": "2038960"
  },
  {
    "text": "2000 the final is Linux I have already explained the",
    "start": "2041720",
    "end": "2047720"
  },
  {
    "text": "result of Linux when Nick of Linux is in",
    "start": "2047720",
    "end": "2053760"
  },
  {
    "text": "promiscuous mode I expected that there was a response in all the",
    "start": "2053760",
    "end": "2061040"
  },
  {
    "text": "addresses where the group bit had been set the group bit in seven kind of",
    "start": "2061040",
    "end": "2067720"
  },
  {
    "text": "address used for this test is set there is a response in broadcast and",
    "start": "2067720",
    "end": "2076760"
  },
  {
    "text": "multicast address one in the normal mode the mode of Nick is switched to",
    "start": "2076760",
    "end": "2083878"
  },
  {
    "text": "promiscuous the result is the same as we",
    "start": "2083879",
    "end": "2090118"
  },
  {
    "text": "expected there is a response for all packets the promiscuous node can be",
    "start": "2090119",
    "end": "2096599"
  },
  {
    "text": "detected detected also for Linux by using the app",
    "start": "2096599",
    "end": "2102838"
  },
  {
    "text": "packet exception exception one this the",
    "start": "2104760",
    "end": "2110079"
  },
  {
    "text": "promiscuous node of Windows and Linux can be detected by using the app packet",
    "start": "2110079",
    "end": "2116560"
  },
  {
    "text": "however there are some exceptions the first problem is old",
    "start": "2116560",
    "end": "2123040"
  },
  {
    "text": "Nick Sam Nick does not support the multicast list for example it is",
    "start": "2123040",
    "end": "2129880"
  },
  {
    "text": "ethernet etherlink 3 it is a Nick which does not support",
    "start": "2129880",
    "end": "2135839"
  },
  {
    "text": "the multicast list by default in all multicast",
    "start": "2135839",
    "end": "2142440"
  },
  {
    "text": "mode in a world all packet where group bit is set are",
    "start": "2142440",
    "end": "2149040"
  },
  {
    "text": "past when these Nick are in normal mode the result become the same response as",
    "start": "2149040",
    "end": "2156160"
  },
  {
    "text": "promis let's buy new",
    "start": "2156160",
    "end": "2162000"
  },
  {
    "text": "Nick if there are some old Nick in your in your local",
    "start": "2162000",
    "end": "2168680"
  },
  {
    "text": "net exception two when leom 3C 905 is used with Linux",
    "start": "2169160",
    "end": "2177599"
  },
  {
    "text": "the default is all multicast the installer of Linux",
    "start": "2177599",
    "end": "2183760"
  },
  {
    "text": "automatically set its driver to 3C 59",
    "start": "2183760",
    "end": "2189079"
  },
  {
    "text": "x.o which is an order driver this driver seems not to support",
    "start": "2189079",
    "end": "2195599"
  },
  {
    "text": "the multicast list consequently the Nick becomes all",
    "start": "2195599",
    "end": "2201839"
  },
  {
    "text": "multicast by default when the newer 3 c905 x.o is",
    "start": "2201839",
    "end": "2210160"
  },
  {
    "text": "used then there is no such",
    "start": "2210160",
    "end": "2214760"
  },
  {
    "text": "problem exception",
    "start": "2215680",
    "end": "2220720"
  },
  {
    "text": "three this is a useful exception the response by the normal",
    "start": "2220720",
    "end": "2226440"
  },
  {
    "text": "mode changes if Windows 2000 dynamically loaded capture Drive is",
    "start": "2226440",
    "end": "2235119"
  },
  {
    "text": "installed it responds to a fake broadcast with 16",
    "start": "2235119",
    "end": "2240920"
  },
  {
    "text": "bits the user who installed winp cap 2 1",
    "start": "2240920",
    "end": "2247400"
  },
  {
    "text": "and SMS system management server can be detected it can be detected that they",
    "start": "2247400",
    "end": "2255280"
  },
  {
    "text": "have been installed even if there they are not",
    "start": "2255280",
    "end": "2260960"
  },
  {
    "text": "started and it respond to a fake broadcast as any as 31 bits when the",
    "start": "2260960",
    "end": "2267520"
  },
  {
    "text": "sun4",
    "start": "2267520",
    "end": "2270280"
  },
  {
    "text": "runs okay demonstration let me give a demonstration wait a",
    "start": "2274119",
    "end": "2282319"
  },
  {
    "text": "moment",
    "start": "2305520",
    "end": "2308520"
  },
  {
    "text": "now three pieces are connected to a local network uh this this one is a my",
    "start": "2326440",
    "end": "2333400"
  },
  {
    "text": "Windows 2000 I will run promise on this machine promis scan is a",
    "start": "2333400",
    "end": "2339480"
  },
  {
    "text": "promiscous detection software I wrot over",
    "start": "2339480",
    "end": "2345000"
  },
  {
    "text": "there the malicious window 2000 and red hot 7 machines then I am going to scan",
    "start": "2345000",
    "end": "2353240"
  },
  {
    "text": "the local network using",
    "start": "2353240",
    "end": "2356680"
  },
  {
    "text": "prison now",
    "start": "2358400",
    "end": "2361640"
  },
  {
    "text": "start here we can see that two nodes are found but none of them is in the",
    "start": "2364160",
    "end": "2372040"
  },
  {
    "text": "promiscuous mode next let me change the marous red",
    "start": "2372040",
    "end": "2379200"
  },
  {
    "text": "hat machine to the promiscuous",
    "start": "2379200",
    "end": "2383400"
  },
  {
    "text": "mode [Music]",
    "start": "2395400",
    "end": "2401289"
  },
  {
    "text": "it is in promiscuous mode now then let me scan the network",
    "start": "2403160",
    "end": "2410920"
  },
  {
    "text": "again it appears that macious red hat respond the fake broadcast",
    "start": "2415280",
    "end": "2423720"
  },
  {
    "text": "packet",
    "start": "2425359",
    "end": "2428359"
  },
  {
    "text": "now let's look at what will happen to the Windows",
    "start": "2436960",
    "end": "2442839"
  },
  {
    "text": "2000 we will Lear a sun sun for",
    "start": "2442839",
    "end": "2448560"
  },
  {
    "text": "here",
    "start": "2455319",
    "end": "2458319"
  },
  {
    "text": "now started then we scan",
    "start": "2473040",
    "end": "2479560"
  },
  {
    "text": "again we can see that mous Windows respond to",
    "start": "2485240",
    "end": "2491880"
  },
  {
    "text": "fake broadcast 16 and 31 so this software detect the promis C",
    "start": "2491880",
    "end": "2501599"
  },
  {
    "text": "node",
    "start": "2515240",
    "end": "2518240"
  },
  {
    "text": "oh test tool you can download the test tool from our site promis can uh www.",
    "start": "2528760",
    "end": "2537920"
  },
  {
    "text": "security friday.com and please report your test result to",
    "start": "2537920",
    "end": "2545160"
  },
  {
    "text": "us the end of presentation oh is there any",
    "start": "2545160",
    "end": "2550640"
  },
  {
    "text": "questions one second one second we need to",
    "start": "2550640",
    "end": "2556040"
  },
  {
    "text": "translate wait translate the questions and",
    "start": "2556040",
    "end": "2560520"
  },
  {
    "text": "answers",
    "start": "2568240",
    "end": "2571240"
  },
  {
    "text": "please uh",
    "start": "2574839",
    "end": "2578160"
  },
  {
    "text": "you have to [Music]",
    "start": "2585520",
    "end": "2592000"
  },
  {
    "text": "sorry test",
    "start": "2592000",
    "end": "2595359"
  },
  {
    "text": "test he he tried a few machines uh but the result is almost same as",
    "start": "2598040",
    "end": "2605079"
  },
  {
    "text": "Linux is there any",
    "start": "2605079",
    "end": "2611000"
  },
  {
    "text": "question of course",
    "start": "2631240",
    "end": "2636770"
  },
  {
    "text": "[Applause]",
    "start": "2636770",
    "end": "2640849"
  },
  {
    "text": "microft",
    "start": "2655160",
    "end": "2658160"
  },
  {
    "text": "microft he think it is useful for",
    "start": "2665000",
    "end": "2673800"
  },
  {
    "text": "everybody ah",
    "start": "2677680",
    "end": "2681480"
  },
  {
    "text": "sorry",
    "start": "2694960",
    "end": "2697960"
  },
  {
    "text": "it is same as a IP address uh IP was uh",
    "start": "2710079",
    "end": "2715119"
  },
  {
    "text": "IP address was not assigned or you just don't",
    "start": "2715119",
    "end": "2720599"
  },
  {
    "text": "know oh",
    "start": "2724319",
    "end": "2727880"
  },
  {
    "text": "this tool scans uh one segment so if the machine in the one segment so it will",
    "start": "2735880",
    "end": "2741680"
  },
  {
    "text": "find",
    "start": "2741680",
    "end": "2744078"
  },
  {
    "text": "it have you tried us IP address",
    "start": "2754880",
    "end": "2760720"
  },
  {
    "text": "local and imp on your",
    "start": "2760720",
    "end": "2765880"
  },
  {
    "text": "results do this1 go blows",
    "start": "2765880",
    "end": "2773040"
  },
  {
    "text": "up",
    "start": "2784800",
    "end": "2787800"
  },
  {
    "text": "first this test doesn't work on",
    "start": "2802200",
    "end": "2805760"
  },
  {
    "text": "solares uh he was not sure but he he tried to test like this a local horse or special he",
    "start": "2811760",
    "end": "2818760"
  },
  {
    "text": "test all of them and the no",
    "start": "2818760",
    "end": "2826799"
  },
  {
    "text": "response second",
    "start": "2827920",
    "end": "2831400"
  },
  {
    "text": "line could you oh that's",
    "start": "2844720",
    "end": "2849160"
  },
  {
    "text": "okay could you speak",
    "start": "2868000",
    "end": "2871640"
  },
  {
    "text": "again",
    "start": "2874720",
    "end": "2877720"
  },
  {
    "text": "against it is not valid for hard",
    "start": "2889440",
    "end": "2894440"
  },
  {
    "text": "Sni [Music]",
    "start": "2897200",
    "end": "2901519"
  },
  {
    "text": "this now uh he's uh still development and the",
    "start": "2904640",
    "end": "2913119"
  },
  {
    "text": "testing so the source code is not available right now m m",
    "start": "2913119",
    "end": "2920440"
  },
  {
    "text": "m",
    "start": "2934599",
    "end": "2937599"
  },
  {
    "text": "my",
    "start": "2951640",
    "end": "2953838"
  },
  {
    "text": "d",
    "start": "2964520",
    "end": "2967520"
  },
  {
    "text": "this tool",
    "start": "2985119",
    "end": "2987760"
  },
  {
    "text": "cannot is there any question please why security Friday not security",
    "start": "2992680",
    "end": "3001079"
  },
  {
    "text": "Saturday oh good question",
    "start": "3001079",
    "end": "3008240"
  },
  {
    "text": "uh and sorry so uh in Japan the number one",
    "start": "3024440",
    "end": "3031599"
  },
  {
    "text": "Scandal magazine is called Focus then we call",
    "start": "3031599",
    "end": "3036640"
  },
  {
    "text": "Friday that's why we called Friday not security Focus not security",
    "start": "3036640",
    "end": "3043680"
  },
  {
    "text": "Focus ah",
    "start": "3045920",
    "end": "3049440"
  },
  {
    "text": "[Music] sorry mistake so that the two famous",
    "start": "3052930",
    "end": "3058440"
  },
  {
    "text": "Scandal magazine in Japan is one is called focus and second one uh I'm sure",
    "start": "3058440",
    "end": "3064520"
  },
  {
    "text": "which is uh more popular focus on the Friday that's why he called uh security",
    "start": "3064520",
    "end": "3074359"
  },
  {
    "text": "Friday is there any",
    "start": "3075440",
    "end": "3079000"
  },
  {
    "text": "question please",
    "start": "3083119",
    "end": "3087359"
  },
  {
    "text": "TX right it's",
    "start": "3104280",
    "end": "3108160"
  },
  {
    "text": "mean um what did happen if you cut off the EET line the TX",
    "start": "3112799",
    "end": "3120559"
  },
  {
    "text": "TX uh so the great hacker will cut the TX line and the",
    "start": "3126200",
    "end": "3133840"
  },
  {
    "text": "[Music] sniffing well thank you very much thank",
    "start": "3133840",
    "end": "3139000"
  },
  {
    "text": "you very [Applause]",
    "start": "3139000",
    "end": "3144280"
  },
  {
    "text": "much",
    "start": "3144280",
    "end": "3147280"
  },
  {
    "text": "e",
    "start": "3533720",
    "end": "3536720"
  }
]