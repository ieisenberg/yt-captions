[
  {
    "text": "Aloha and welcome to my talk nothing but net so my name is Patrick wartle I am",
    "start": "2639",
    "end": "9000"
  },
  {
    "text": "the founder of The Objective C Foundation uh there I work on our free",
    "start": "9000",
    "end": "14080"
  },
  {
    "text": "open source Mac security tools I also author the art of Mac malware books and",
    "start": "14080",
    "end": "19840"
  },
  {
    "text": "organize the obts or objective by the Sea conference okay so what will you learn",
    "start": "19840",
    "end": "27080"
  },
  {
    "text": "today what are we going to talk about what are we going to cover well in a nutshell I'm going to talk to you about",
    "start": "27080",
    "end": "34120"
  },
  {
    "text": "leveraging Mac os's Network Frameworks to huris detect malware directly on the",
    "start": "34120",
    "end": "40760"
  },
  {
    "text": "host and we're going to do this in three or four different steps we're going to start by looking at some mac malware and",
    "start": "40760",
    "end": "47760"
  },
  {
    "text": "see how it interacts with the network because if we're going to write security tools to detect malware we need to have",
    "start": "47760",
    "end": "53120"
  },
  {
    "text": "at least a basic understanding of how such malware will actually interact with the network we're then going to talk",
    "start": "53120",
    "end": "59280"
  },
  {
    "text": "about how to take a snapshot or enumerate the network state for example",
    "start": "59280",
    "end": "64439"
  },
  {
    "text": "open sockets existing connections we're going to talk about the apis the libraries the Frameworks we can utilize",
    "start": "64439",
    "end": "69880"
  },
  {
    "text": "to do this third part we're then going to dive into more comprehensive monitoring talk about the techniques we",
    "start": "69880",
    "end": "76439"
  },
  {
    "text": "can use to develop monitors that are continually well monitoring the network allowing us to observe Network",
    "start": "76439",
    "end": "82920"
  },
  {
    "text": "activities and then finally we're going to talk about detection",
    "start": "82920",
    "end": "88438"
  },
  {
    "text": "the first part of the talk is really about how to observe Network events but this is almost meaningless in a way if",
    "start": "90000",
    "end": "96759"
  },
  {
    "text": "we can't then tie that back to a responsible process and identify it as potentially being malicious because of",
    "start": "96759",
    "end": "102640"
  },
  {
    "text": "course a lot of legitimate software is also going to be accessing the network as well so the idea and this is not some",
    "start": "102640",
    "end": "110240"
  },
  {
    "text": "rocket science is that we are going to attempt to detect Mau generically via",
    "start": "110240",
    "end": "116000"
  },
  {
    "text": "the network and this is based on two again very obvious observations is that a or one malware utilizes the network so",
    "start": "116000",
    "end": "124280"
  },
  {
    "text": "we can see on the slide in a variety of ways reverse shells propagation command control server tasking uploads downloads",
    "start": "124280",
    "end": "132120"
  },
  {
    "text": "file exfiltration etc etc and so since malare often does this if we have the",
    "start": "132120",
    "end": "138080"
  },
  {
    "text": "ability to observe network activity we have now a very powerful detection",
    "start": "138080",
    "end": "143480"
  },
  {
    "text": "fistic to detect even novel or relatively stealthy M now another point I want to make is",
    "start": "143480",
    "end": "150959"
  },
  {
    "text": "differentiating between network based network monitoring and host base so at",
    "start": "150959",
    "end": "156720"
  },
  {
    "text": "the top we can see and I have this cool pointer thing that oh maybe not okay",
    "start": "156720",
    "end": "162560"
  },
  {
    "text": "it's off a little I was so excited to use it there we go networks Network appliances is normally how people do",
    "start": "162560",
    "end": "169080"
  },
  {
    "text": "network monitoring the idea is you plop some Hardware onto your network and Route all traffic through now this",
    "start": "169080",
    "end": "174840"
  },
  {
    "text": "definitely works but requires additional Hardware that Hardware might have security vulnerabilities and most",
    "start": "174840",
    "end": "179920"
  },
  {
    "text": "importantly it's not going to tell you what the responsible process is for example a DNS request that you are",
    "start": "179920",
    "end": "185040"
  },
  {
    "text": "observing so I'm all about host-based network monitoring and that's going to be the focus of the talk today again",
    "start": "185040",
    "end": "190920"
  },
  {
    "text": "there's pros and cons to both but I think there's a ton of Pros for the host-based approach the three main Pros are first",
    "start": "190920",
    "end": "198360"
  },
  {
    "text": "and foremost as I mentioned the ability to identify the responsible process that is accessing the network this is",
    "start": "198360",
    "end": "205040"
  },
  {
    "text": "essential for malware detection two this monitoring and Network capabilities",
    "start": "205040",
    "end": "210560"
  },
  {
    "text": "since it's on the host is also pre- encryption so if you're doing full packet capture you don't have to worry",
    "start": "210560",
    "end": "215879"
  },
  {
    "text": "about SSL certificates and breaking all that you just get the raw data and then as I mentioned step three you don't need",
    "start": "215879",
    "end": "221959"
  },
  {
    "text": "any additional Hardware so in a way it's simpler so why are we talking about host",
    "start": "221959",
    "end": "228920"
  },
  {
    "text": "Bas network monitoring on Mac OS specifically like why why is this a talk well the main reason is it's really not",
    "start": "228920",
    "end": "235239"
  },
  {
    "text": "unfortunately as easy as we would wish so buckle up it's going to be a little",
    "start": "235239",
    "end": "240560"
  },
  {
    "text": "bit of a wild ride but you know makes things interesting so what are some of the problems that we are going to",
    "start": "240560",
    "end": "246760"
  },
  {
    "text": "encounter and I will caveat today the situation is much better but over the last few years as I've been digging into",
    "start": "246760",
    "end": "252959"
  },
  {
    "text": "this and developing a myriad of open- source tools leveraging apples Frameworks I run into uh a ton of",
    "start": "252959",
    "end": "258519"
  },
  {
    "text": "problems so again part of the talk is to show you some of the pain points talk about the Blood Sweat and Tears so that",
    "start": "258519",
    "end": "264800"
  },
  {
    "text": "if you're developing networking monitoring tools you will not be uh you won't C circum to this",
    "start": "264800",
    "end": "270160"
  },
  {
    "text": "so first and foremost uh Apple's networking code especially in the past has has been buggy an example I released",
    "start": "270160",
    "end": "276800"
  },
  {
    "text": "uh Lulu it's an open source firewall we'll talk about and you know it talks to Apple's kernel mode components Lulu",
    "start": "276800",
    "end": "283120"
  },
  {
    "text": "itself is 100% user mode unfortunately I got a lot of bug reports that Lulu was panicking the system and I was like",
    "start": "283120",
    "end": "289440"
  },
  {
    "text": "that's strange because again it's all in user mode well what turned out was that there was a bug in Apple's kernel",
    "start": "289440",
    "end": "296479"
  },
  {
    "text": "components that Lulu was inadvertently triggering but really wasn't my fault like why do I get the bug report uh",
    "start": "296479",
    "end": "303039"
  },
  {
    "text": "downsides of doing open- Source tool development so pass this on to Apple good news it's now fixed but this is",
    "start": "303039",
    "end": "308560"
  },
  {
    "text": "kind of an example of some of the quality of Apple's networking code less than ideal other problems with Apple's code a",
    "start": "308560",
    "end": "315400"
  },
  {
    "text": "lot of the Frameworks we're going to talk about today are private means they're not documented kind of use at your own risk even though they're very",
    "start": "315400",
    "end": "321319"
  },
  {
    "text": "powerful Apple's yet to document them this is very frustrating requires us to do some reverse engineering and then",
    "start": "321319",
    "end": "326800"
  },
  {
    "text": "thirdly documentation is rather lacking a lot lot of times you look up an API or some constant and they'll be like five",
    "start": "326800",
    "end": "333080"
  },
  {
    "text": "Google results and most of those are just header files so again a lot of kind of Blood Sweat and Tears but hopefully",
    "start": "333080",
    "end": "338960"
  },
  {
    "text": "we'll cover all this in the presentation so you uh don't have to deal with that another issue that I ran into was the",
    "start": "338960",
    "end": "345160"
  },
  {
    "text": "fact that Apple rather surreptitiously actually subverted a lot of the network capabilities without telling anybody",
    "start": "345160",
    "end": "351800"
  },
  {
    "text": "this was rude so what happened a few years back is Kernel extensions were the predominant way that we wrote networking",
    "start": "351800",
    "end": "358120"
  },
  {
    "text": "tools firewalls filter monitors etc etc Apple said hey we're trying to move kernel extensions away no third party",
    "start": "358120",
    "end": "366080"
  },
  {
    "text": "kernel extensions so we'll move everything into user mode and give you new user mode Frameworks you can",
    "start": "366080",
    "end": "371960"
  },
  {
    "text": "leverage we're all like okay actually this is great developing kernel code sucks if you screw up you're going to",
    "start": "371960",
    "end": "377199"
  },
  {
    "text": "panic the Box much better to do it in user mode well what Apple didn't tell us",
    "start": "377199",
    "end": "382319"
  },
  {
    "text": "is surreptitiously they created a exclusion list where a handful of system",
    "start": "382319",
    "end": "388680"
  },
  {
    "text": "processes in Damons were actually exempt from being routed through these user mode Network extension Frameworks that",
    "start": "388680",
    "end": "395319"
  },
  {
    "text": "our security network security tools would utilize so this meant that if you wrote a firewall subscribing to Apple's",
    "start": "395319",
    "end": "401720"
  },
  {
    "text": "best practices there was actually traffic that would skip it kind of by Design but again Apple didn't tell",
    "start": "401720",
    "end": "407960"
  },
  {
    "text": "anybody obviously this is a huge problem from a security point of view took me like two minutes to find a way to abuse",
    "start": "407960",
    "end": "414720"
  },
  {
    "text": "one of these legitimate Exempted processes to generate network activity Network traffic on my behalf to talk to",
    "start": "414720",
    "end": "421599"
  },
  {
    "text": "my own command and control server again since these processes were exempt from being filtered through any of security",
    "start": "421599",
    "end": "427960"
  },
  {
    "text": "tools we were essentially blind so made of AR racus Apple got some bad press",
    "start": "427960",
    "end": "433560"
  },
  {
    "text": "which For Better or Worse is the way we get apple to change their course and apple now has removed this exemption",
    "start": "433560",
    "end": "439440"
  },
  {
    "text": "list again this is kind of showing you where there's some Road bumps along the",
    "start": "439440",
    "end": "445000"
  },
  {
    "text": "road okay with that overview out of the way let's now dive into talking about some Mac maare specimens that use the",
    "start": "445000",
    "end": "451599"
  },
  {
    "text": "network again we need to do this so we can kind of get a sense of what we're looking to detect in the first place and",
    "start": "451599",
    "end": "457440"
  },
  {
    "text": "what kind of network activity we might see so first off we have dummy I named",
    "start": "457440",
    "end": "463479"
  },
  {
    "text": "this uh maare sample dummy because it's very simple and straightforward but having been said it's still sufficient",
    "start": "463479",
    "end": "469840"
  },
  {
    "text": "to allow an attacker to completely control a remote system so what dummy does is it persists A bash script and if",
    "start": "469840",
    "end": "477280"
  },
  {
    "text": "we look closely at the bash script we can see it's is just executing some python codes some python commands that",
    "start": "477280",
    "end": "483280"
  },
  {
    "text": "do three things first and foremost it's going to directly connect to a remote command control server it's then going",
    "start": "483280",
    "end": "489639"
  },
  {
    "text": "to redirect standard in out and error to the socket that just was created and then spawn an interactive shell and tie",
    "start": "489639",
    "end": "497560"
  },
  {
    "text": "that to the socket this is a vanilla reverse shell that allows the attacker now to execute commands on his or her",
    "start": "497560",
    "end": "504520"
  },
  {
    "text": "remote system that will be executed on the infected system so again dummy reverse sh",
    "start": "504520",
    "end": "511039"
  },
  {
    "text": "another interesting piece of Mau is IP storm this is interesting for a variety of reasons one of those reasons was it",
    "start": "511039",
    "end": "517518"
  },
  {
    "text": "was originally developed for Linux and then was ported to Mac OS this is a trend we're seeing where adversaries are",
    "start": "517519",
    "end": "524200"
  },
  {
    "text": "realizing there are a ton of Mac systems especially in the Enterprise that are",
    "start": "524200",
    "end": "529519"
  },
  {
    "text": "very juicy targets so the IP storm Mau authors ported it to Mac and deployed it",
    "start": "529519",
    "end": "536120"
  },
  {
    "text": "now IP Storm from the networking point of view does two interesting things first it tries to propagate Itself by",
    "start": "536120",
    "end": "542680"
  },
  {
    "text": "brute forcing into other systems via an SSH attack basically password guessing",
    "start": "542680",
    "end": "548360"
  },
  {
    "text": "so it almost has some wormlike capabilities which again this is an interesting heuristic that perhaps we",
    "start": "548360",
    "end": "553680"
  },
  {
    "text": "can observe on the network once it's successfully accessed hacked in gained",
    "start": "553680",
    "end": "559200"
  },
  {
    "text": "access to a remote system and infected it it also sets up a reverse shell or a remote shell so again this is something",
    "start": "559200",
    "end": "565440"
  },
  {
    "text": "that if we're monitoring network activity on the host we should be able to observe thirdly we have goat goat is a fairly",
    "start": "565440",
    "end": "573640"
  },
  {
    "text": "standard but feature complete backd door for Mac OS on the slides we have some of",
    "start": "573640",
    "end": "579440"
  },
  {
    "text": "its capabilities things like upload download files pretty standard for a back door but again we'll generate some",
    "start": "579440",
    "end": "585279"
  },
  {
    "text": "network activity that we can observe it also though has other capabilities that",
    "start": "585279",
    "end": "590560"
  },
  {
    "text": "we don't see that common in uh Mac mware that allow it to interact with other systems over the network for example it",
    "start": "590560",
    "end": "597600"
  },
  {
    "text": "has the ability to do a port scan so again generating more Network traffic it also has the ability to set up a tunnel",
    "start": "597600",
    "end": "603000"
  },
  {
    "text": "and a proxy so again networking opportunities one interesting thing also",
    "start": "603000",
    "end": "608399"
  },
  {
    "text": "about goat is it takes all its Network streams its multiple streams to the command and control server and bundles",
    "start": "608399",
    "end": "614720"
  },
  {
    "text": "them all into one single connection so it actually multiplexes its connection so again kind of interesting from a",
    "start": "614720",
    "end": "620480"
  },
  {
    "text": "networking point of view we also have supply chain attacks that via network analysis uh might be",
    "start": "620480",
    "end": "628560"
  },
  {
    "text": "the best way to actually detect these and we'll talk a little bit more about the 3cx one but this was interesting",
    "start": "628560",
    "end": "634640"
  },
  {
    "text": "because it targeted a lot of Mac systems and fortunately very successfully and",
    "start": "634640",
    "end": "639680"
  },
  {
    "text": "the reason is the North Korean hackers were able to infect the build server and then syruptitious inject malicious code",
    "start": "639680",
    "end": "646440"
  },
  {
    "text": "into 3x's desktop application they then submitted this application to Apple",
    "start": "646440",
    "end": "653000"
  },
  {
    "text": "Apple naively and inadvertently notorized it which basically meant this application was now approved to to run",
    "start": "653000",
    "end": "659279"
  },
  {
    "text": "on all versions of Mac OS users really to no fault of their own downloaded and",
    "start": "659279",
    "end": "665320"
  },
  {
    "text": "ran this saw it was signed and notorized by Apple inadvertently infecting themselves now how was this detected",
    "start": "665320",
    "end": "672480"
  },
  {
    "text": "well if we pop on the forums we can see that one of the victims basically said hey I observed some strange DNS traffic",
    "start": "672480",
    "end": "679360"
  },
  {
    "text": "or my EDR observed some strange Network traffic uh that I was able to track back to the 3cx application uh and this is",
    "start": "679360",
    "end": "686959"
  },
  {
    "text": "how I was able to uncover the attack so again very powerful right normally 3cx",
    "start": "686959",
    "end": "692560"
  },
  {
    "text": "application should only be talking to three 3cx server it starts talking to some like random Russian IP like that's",
    "start": "692560",
    "end": "699000"
  },
  {
    "text": "a great I great way to perhaps figure out something is a Miss finally briefly want to mention iOS",
    "start": "699000",
    "end": "706720"
  },
  {
    "text": "malware this talk is predominantly about Mac OS but a lot of the network capabilities and Frameworks we use are",
    "start": "706720",
    "end": "712480"
  },
  {
    "text": "also available for iOS but I haven't dug into that iOS more than any other Mau in",
    "start": "712480",
    "end": "717920"
  },
  {
    "text": "my opinion is incredibly difficult to detect because iOS is essentially a blackbox you cannot even run a process",
    "start": "717920",
    "end": "723240"
  },
  {
    "text": "listing on a you know a non- jailbroken iOS device so once malware gets into",
    "start": "723240",
    "end": "728639"
  },
  {
    "text": "that and we all know nation states have zero days to do that remotely infect iOS devices they are going to sit in there",
    "start": "728639",
    "end": "734920"
  },
  {
    "text": "happy and undetected a great recent example is the triangulation attack that",
    "start": "734920",
    "end": "739959"
  },
  {
    "text": "hit kasperski for over four years kaspersky's phones so phones of actual",
    "start": "739959",
    "end": "745480"
  },
  {
    "text": "their employees were infected with a very stealthy amount so this again just drives home the fact that even kasperski",
    "start": "745480",
    "end": "752079"
  },
  {
    "text": "one of the world's best uh M detection companies was unable to detect this",
    "start": "752079",
    "end": "758360"
  },
  {
    "text": "until they noticed some anomalous Network traffic then uncovered the uh",
    "start": "758360",
    "end": "763600"
  },
  {
    "text": "infection so again if you're doing iOS analysis and detection of malware network monitoring is is the best and",
    "start": "763600",
    "end": "769680"
  },
  {
    "text": "you can do some host based network monitoring on iOS so hopefully I've driven home the fact that host Spas",
    "start": "769680",
    "end": "776399"
  },
  {
    "text": "network monitoring is a good idea and there's a lot of now we're now targeting Max that has a network footprint that we",
    "start": "776399",
    "end": "782639"
  },
  {
    "text": "might be able to detect to generically uncover all these infections so now",
    "start": "782639",
    "end": "787880"
  },
  {
    "text": "let's talk about how do we observe network activity in the first place starting with file",
    "start": "787880",
    "end": "794320"
  },
  {
    "text": "descriptors so the idea is pretty straightforward you can do it in about three steps and the idea is on Mac OS",
    "start": "794320",
    "end": "800680"
  },
  {
    "text": "which is kind of BSD like UNC sockets are also file descriptors so this means",
    "start": "800680",
    "end": "807560"
  },
  {
    "text": "if we can find a way for the operating system to give us a list of all the file",
    "start": "807560",
    "end": "812800"
  },
  {
    "text": "descriptors opened by a process any sockets listening sockets network connections etc etc will be in that list",
    "start": "812800",
    "end": "820279"
  },
  {
    "text": "that then we can query so three steps and we'll go through each of these in detail in code now I do want to point",
    "start": "820279",
    "end": "826680"
  },
  {
    "text": "out the code on the slide is maybe more for a reference so if you're going to be coding up some Network Tools grab the",
    "start": "826680",
    "end": "832360"
  },
  {
    "text": "slides afterwards I didn't want to be up here for 45 minutes walking through code so I'm going to jam through some of the",
    "start": "832360",
    "end": "838279"
  },
  {
    "text": "code s examples pretty quick but again I want to give you the idea of how you can approach this so in a nutshell our goal",
    "start": "838279",
    "end": "844839"
  },
  {
    "text": "is again to receive a list of the file extensions so what we're going to do is we're going to invoke the procore PID",
    "start": "844839",
    "end": "851519"
  },
  {
    "text": "info API we give it a PID of the process whose file descriptors we want we first",
    "start": "851519",
    "end": "857560"
  },
  {
    "text": "execute it with nulls so it gives us the size of the buffer we need for those file descriptors after we allocate that",
    "start": "857560",
    "end": "864160"
  },
  {
    "text": "buffer we then execute it again to get the actual list of file descriptors again this is going to include file",
    "start": "864160",
    "end": "870440"
  },
  {
    "text": "descriptors for open files but also sockets so now what we want to do is",
    "start": "870440",
    "end": "876440"
  },
  {
    "text": "iterate through that list throwing out any files and honing in just on sockets",
    "start": "876440",
    "end": "882720"
  },
  {
    "text": "so again code on the slides we basically iterate through that and for any file",
    "start": "882720",
    "end": "887959"
  },
  {
    "text": "descriptors that are sockets we can invoke the procore PID FD info API that",
    "start": "887959",
    "end": "895079"
  },
  {
    "text": "says please give us more information about this specific file descriptor which is a",
    "start": "895079",
    "end": "901480"
  },
  {
    "text": "socket next up we're getting closer we want to filter out everything but",
    "start": "901480",
    "end": "906880"
  },
  {
    "text": "network sockets on Mac OS you have things like Unix sockets which are local IPC mechanisms here we don't care about",
    "start": "906880",
    "end": "913560"
  },
  {
    "text": "them so what we do is we check out the family of the socket and if it's not an afet or afin 6 so ipb4 or ipbc 6 socket",
    "start": "913560",
    "end": "922480"
  },
  {
    "text": "we ignore that so now if we take this code and compile it and run it we run it against something like GitHub desktop we",
    "start": "922480",
    "end": "928440"
  },
  {
    "text": "can see that this application has about 70 file extensions open file descriptors",
    "start": "928440",
    "end": "934240"
  },
  {
    "text": "uh and only a few of those are sockets now we haven't extracted any specific information yet from those sockets but",
    "start": "934240",
    "end": "940800"
  },
  {
    "text": "we've whittel down our list I'm using GitHub desktop as an example and we'll use it in several slides as well for two",
    "start": "940800",
    "end": "947480"
  },
  {
    "text": "reasons one it has a bunch of network connections it's running on my system so it's easy to test but also drives home",
    "start": "947480",
    "end": "953560"
  },
  {
    "text": "the fact that obviously legitimate software is also going to access the network so when we get to the the end of",
    "start": "953560",
    "end": "958959"
  },
  {
    "text": "the talk again we're going to focus on how to differentiate between good and suspicious or unauthorized network",
    "start": "958959",
    "end": "965480"
  },
  {
    "text": "activity but again in order to do that we first have to figure out how to get information about that so now we have",
    "start": "965480",
    "end": "972279"
  },
  {
    "text": "networking sockets let's figure out how to get more information from them and extract that so for UDP sockets it's",
    "start": "972279",
    "end": "979480"
  },
  {
    "text": "pretty easy we have the protocol and then we can get a local Port but because there's they are stateless UDP stateless",
    "start": "979480",
    "end": "986160"
  },
  {
    "text": "protocol we can't get much more information about that TP TCP sockets",
    "start": "986160",
    "end": "991360"
  },
  {
    "text": "though there is a myriad of information again I'm not going to jam through all the code but you can see we can pull out",
    "start": "991360",
    "end": "997319"
  },
  {
    "text": "obviously local information but also the remote end port and Port uh having this",
    "start": "997319",
    "end": "1002959"
  },
  {
    "text": "information is really great in perhaps detecting connections to unauthorized command and control servers etc",
    "start": "1002959",
    "end": "1009920"
  },
  {
    "text": "etc if we compile and execute this no surprise we get a list now of GitHub desktops network connections with all",
    "start": "1009920",
    "end": "1017000"
  },
  {
    "text": "the information we want remote destination family State etc etc awesome",
    "start": "1017000",
    "end": "1024079"
  },
  {
    "text": "we run this against dummy as expected once it's connected out to the attacker command control server if we enumerate",
    "start": "1024079",
    "end": "1031240"
  },
  {
    "text": "the file descriptors for the python instance that's running the back door we see the connection now you might be",
    "start": "1031240",
    "end": "1038520"
  },
  {
    "text": "wondering okay great I see that python is connecting out to uh some server like",
    "start": "1038520",
    "end": "1043640"
  },
  {
    "text": "how do I know that's malicious hold that question we will answer it it's an excellent question",
    "start": "1043640",
    "end": "1049720"
  },
  {
    "text": "now I want to talk about enumerating Network State using the private Network",
    "start": "1049720",
    "end": "1055200"
  },
  {
    "text": "statistic framework and why do I want to talk about this well the approach we just talked about using the proc PID",
    "start": "1055200",
    "end": "1062799"
  },
  {
    "text": "apis is solid but it has a few limitations or rather maybe cons so",
    "start": "1062799",
    "end": "1068679"
  },
  {
    "text": "first and foremost it's process specific so you only get the file descriptors for a specific process yes you could iterate",
    "start": "1068679",
    "end": "1074440"
  },
  {
    "text": "over all processes and get a list for all but that's extra code also then it gives you all the file descriptors you",
    "start": "1074440",
    "end": "1080960"
  },
  {
    "text": "have to whittle down the list of just the sockets and finally you also don't get any network statistics like I want",
    "start": "1080960",
    "end": "1086480"
  },
  {
    "text": "to know how many bytes are being sent up or downloaded for a specific",
    "start": "1086480",
    "end": "1091799"
  },
  {
    "text": "connection Well turns out Mac OS has a tool that does this so if you're on a Mac system and you run netop it will",
    "start": "1091799",
    "end": "1099440"
  },
  {
    "text": "give you a global list of all the network activity a snapshot of who is talking to whom on your system this is",
    "start": "1099440",
    "end": "1106559"
  },
  {
    "text": "global it's only sockets and network connections and it also provides statistics bytes up and down which is",
    "start": "1106559",
    "end": "1112760"
  },
  {
    "text": "very useful for malware detection so unfortunately net toop is",
    "start": "1112760",
    "end": "1118159"
  },
  {
    "text": "closed source which means we have to do some reverse engineering if we look at its dependencies via the oool utility we",
    "start": "1118159",
    "end": "1125919"
  },
  {
    "text": "can see that it is linked against a private framework called Network statistics the well-known security",
    "start": "1125919",
    "end": "1132480"
  },
  {
    "text": "researcher Jonathan Levan actually reverse engineered this framework and wrote a open source tool called net",
    "start": "1132480",
    "end": "1139400"
  },
  {
    "text": "bottom which is well essentially a no a commandline based open- Source implementation of net toop so kudos to",
    "start": "1139400",
    "end": "1147200"
  },
  {
    "text": "him lot of uh credit there so based on Jonathan's work and some further reverse",
    "start": "1147200",
    "end": "1152720"
  },
  {
    "text": "engineering I built a tool called dut which is a UI tool that utilizes the",
    "start": "1152720",
    "end": "1158840"
  },
  {
    "text": "private Network statistics framework to give you all the information about network activity on your system so it",
    "start": "1158840",
    "end": "1165600"
  },
  {
    "text": "organizes this by process which is helpful we can see it identifies the protocol the interface the state of the",
    "start": "1165600",
    "end": "1172919"
  },
  {
    "text": "socket but also statistics about the btes going up and down as I mentioned this is useful for ex for example",
    "start": "1172919",
    "end": "1179159"
  },
  {
    "text": "perhaps to detect if malware is exfiltrating a large amount of data out of your network this tool like all of",
    "start": "1179159",
    "end": "1185320"
  },
  {
    "text": "objective C's tools are free and open source so if you want to dive into the code a little more check it out however",
    "start": "1185320",
    "end": "1192039"
  },
  {
    "text": "we will dive into the core of the code here because it's actually pretty simple",
    "start": "1192039",
    "end": "1197120"
  },
  {
    "text": "again leveraging apis from the private Network statistics framework so how do we get this Global",
    "start": "1197120",
    "end": "1204520"
  },
  {
    "text": "list of network activity using this framework pretty easy we first create an",
    "start": "1204520",
    "end": "1209840"
  },
  {
    "text": "endat manager once we've created that manager we set a call back block that",
    "start": "1209840",
    "end": "1216200"
  },
  {
    "text": "will be invoked in a second then we tell the framework what",
    "start": "1216200",
    "end": "1221559"
  },
  {
    "text": "type of connections and activity we're interested in so here we say both UDP",
    "start": "1221559",
    "end": "1226720"
  },
  {
    "text": "and all TCP we want everything and then what we do is we start a query what this will do is trigger a call into the",
    "start": "1226720",
    "end": "1234679"
  },
  {
    "text": "framework which will then tell the operating system to enumerate all of the network activity and for each connection",
    "start": "1234679",
    "end": "1242000"
  },
  {
    "text": "for each Source that's kind of Apple's parament essentially for a socket event or a networking connection it will call",
    "start": "1242000",
    "end": "1249760"
  },
  {
    "text": "our call back block with a ton of information about the socket if we then Link in the network",
    "start": "1249760",
    "end": "1256240"
  },
  {
    "text": "statistics framework and compile it we can see when we execute this it gives us",
    "start": "1256240",
    "end": "1261799"
  },
  {
    "text": "a ton of information little hard to see that's almost by Design really just want to show you how much information that",
    "start": "1261799",
    "end": "1268520"
  },
  {
    "text": "this private framework will give you for each and every network connection open",
    "start": "1268520",
    "end": "1273679"
  },
  {
    "text": "socket etc etc so this is just from one connection from GitHub network uh GitHub",
    "start": "1273679",
    "end": "1280120"
  },
  {
    "text": "uh desktop sorry uh and we can see yes it has the responsible process but also transmitted bytes and a ton of other",
    "start": "1280120",
    "end": "1286679"
  },
  {
    "text": "information so super useful now the main problem I always",
    "start": "1286679",
    "end": "1291919"
  },
  {
    "text": "like to talk about pros and cons between the two approaches we've talked to about so far is that they are essentially",
    "start": "1291919",
    "end": "1298120"
  },
  {
    "text": "snapshots of the network State yes you can re-execute them to kind of get",
    "start": "1298120",
    "end": "1303400"
  },
  {
    "text": "snapshots over time but an obvious problem is if malware is not actively",
    "start": "1303400",
    "end": "1309240"
  },
  {
    "text": "utilizing the network when you perform your code executes to grab the snapshot",
    "start": "1309240",
    "end": "1314799"
  },
  {
    "text": "it's not going to show up so for example dummy we can see sleeps every 5 seconds if it can't connect so if you run your",
    "start": "1314799",
    "end": "1320640"
  },
  {
    "text": "snapshot while it's sleeping you're not going to see dummy's connection the 3cx payload as we can see the quote on the",
    "start": "1320640",
    "end": "1326840"
  },
  {
    "text": "slide says it sleeps also before connecting out you can imagine other scenarios where malware beacons perhaps",
    "start": "1326840",
    "end": "1333039"
  },
  {
    "text": "once an hour if your snapshot is somewhere between its Beacon interval you're going to miss it so what we now",
    "start": "1333039",
    "end": "1338440"
  },
  {
    "text": "want to do is talk about more comprehensive approaches that provide",
    "start": "1338440",
    "end": "1343480"
  },
  {
    "text": "continual monitoring of the network and we're going to start by building a DNS",
    "start": "1343480",
    "end": "1348559"
  },
  {
    "text": "monitor the idea is that I think we should be able to efficiently detect",
    "start": "1348559",
    "end": "1354120"
  },
  {
    "text": "malware uh by monitoring its DNS resolutions again this is not a brand",
    "start": "1354120",
    "end": "1359840"
  },
  {
    "text": "new idea but a powerful one that I want to show you how we can do that directly on the host so back to the 3cx supply",
    "start": "1359840",
    "end": "1367840"
  },
  {
    "text": "chain attack again this was essentially detected by its network activity so again check for network-based uh",
    "start": "1367840",
    "end": "1375000"
  },
  {
    "text": "detections we can see that obviously you all know how DNS works but when the malare gets on the system it's going to",
    "start": "1375000",
    "end": "1382520"
  },
  {
    "text": "attempt to resolve the domain name of the attacker's command and control server as I mentioned normally 3cx",
    "start": "1382520",
    "end": "1388039"
  },
  {
    "text": "should only be talking to 3cx servers but via the network perhaps we can see it trying to resolve a brand new",
    "start": "1388039",
    "end": "1394200"
  },
  {
    "text": "suspicious domain so the idea is hey can we just monitor DNS requests tie those",
    "start": "1394200",
    "end": "1399840"
  },
  {
    "text": "back to processes and then detect if that's unauthorized or potentially",
    "start": "1399840",
    "end": "1404919"
  },
  {
    "text": "suspicious so if you're going to be doing network monitoring on Mac OS you're going to be using the network",
    "start": "1404919",
    "end": "1410120"
  },
  {
    "text": "extension framework this is a very powerful framework allows you to create user mode network monitoring tools and",
    "start": "1410120",
    "end": "1417600"
  },
  {
    "text": "apple unlike some of its other Frameworks actually documents it reasonably well you can do a host of",
    "start": "1417600",
    "end": "1423559"
  },
  {
    "text": "really impressive things with the network extension framework some of these are listed on the slide we're",
    "start": "1423559",
    "end": "1429080"
  },
  {
    "text": "going to focus on the bottom two which is developing a Content filter for all traffic we'll talk about that next and",
    "start": "1429080",
    "end": "1435480"
  },
  {
    "text": "now what we're talking about how to monitor for DN s traffic there's also a great WWDC video have a watch it",
    "start": "1435480",
    "end": "1442400"
  },
  {
    "text": "explains in detail exactly how to utilize that so to create a DNS monitor",
    "start": "1442400",
    "end": "1448760"
  },
  {
    "text": "what we're going to do is we're going to create a DNS proxy and the idea is that all requests from any application",
    "start": "1448760",
    "end": "1455480"
  },
  {
    "text": "process D on the system is going to be proxied through our Network extension which is also running on the host so",
    "start": "1455480",
    "end": "1461640"
  },
  {
    "text": "we'll be able to see that we're then going to proxy that request out get the response to also see the answer to that",
    "start": "1461640",
    "end": "1467320"
  },
  {
    "text": "request so I was like great I saw this in Apple's documentation looked like it did exactly what I needed Googled it first",
    "start": "1467320",
    "end": "1474480"
  },
  {
    "text": "hit is Apple's documentation second hit someone's being like hey this looks awesome how do we do this which was",
    "start": "1474480",
    "end": "1480080"
  },
  {
    "text": "exactly my idea so I was like yeah well no one really knows there's not a great example like this is obviously doable",
    "start": "1480080",
    "end": "1486480"
  },
  {
    "text": "because Apple has documentation but they don't provide example code so I wanted to build an open- Source DNS monitor as",
    "start": "1486480",
    "end": "1492760"
  },
  {
    "text": "a learning experience but also to illustrate how one would do this for example if you want to build this into your own security",
    "start": "1492760",
    "end": "1498840"
  },
  {
    "text": "products so the tool is very creatively named DNS Monitor and it's a host-based DNS Monitor and also as we'll see",
    "start": "1498840",
    "end": "1505720"
  },
  {
    "text": "blocker for Mac OS it's available objective C's website and on GitHub and",
    "start": "1505720",
    "end": "1511679"
  },
  {
    "text": "you can see when we execute it it does two things first it identifies the responsible process here we're just",
    "start": "1511679",
    "end": "1517840"
  },
  {
    "text": "doing a NS lookup for objective c and then also the DNS packet in this case the query for the domain we need to",
    "start": "1517840",
    "end": "1524159"
  },
  {
    "text": "resolve perfect this is all the information we want so how do we do this well before we can dive into some code",
    "start": "1524159",
    "end": "1531039"
  },
  {
    "text": "we have to talk about some prerequisites because unfortunately there's a lot Apple somewhat understandably says",
    "start": "1531039",
    "end": "1537960"
  },
  {
    "text": "Network extensions are very powerful you can see network traffic so we're going to leverage a bunch of requirements upon",
    "start": "1537960",
    "end": "1543240"
  },
  {
    "text": "you so if you're going to build your own you first need to obtain a entitlement for Apple which may require some begging",
    "start": "1543240",
    "end": "1549760"
  },
  {
    "text": "some sacrifices to Cupertino get on your knees eventually they'll generally aesque and give you the necessary",
    "start": "1549760",
    "end": "1556320"
  },
  {
    "text": "entitlement now when you're building your DNS monitor or network extension uh this will also be true for our content",
    "start": "1556320",
    "end": "1562720"
  },
  {
    "text": "filter which we'll talk about next you have to bundle it up into an application bundle specifically in the contents",
    "start": "1562720",
    "end": "1569000"
  },
  {
    "text": "Library System extension folder so your your application needs to have a certain structure we'll show why and a reason",
    "start": "1569000",
    "end": "1575320"
  },
  {
    "text": "then you Al obviously have to sign and notorized which is pretty standard so I mean this is kind of a pain but way less",
    "start": "1575320",
    "end": "1581840"
  },
  {
    "text": "painful than this so you've developed a network monitor you want your users to",
    "start": "1581840",
    "end": "1587159"
  },
  {
    "text": "install it play around okay what do they have to do they have to click allow to download it",
    "start": "1587159",
    "end": "1592360"
  },
  {
    "text": "they then have to click open to open it even though it's signed notorized and entitled they then have to click open",
    "start": "1592360",
    "end": "1598120"
  },
  {
    "text": "system preferences go into system preferences to approve it which requires them to put in their password and then",
    "start": "1598120",
    "end": "1604799"
  },
  {
    "text": "once it begins capturing Network traffic they have to click allow to that as well so that's 1 2 3 4 five six different",
    "start": "1604799",
    "end": "1612360"
  },
  {
    "text": "amounts of user interaction again for an application that is entitled meaning Apple gave you explicit approval it's",
    "start": "1612360",
    "end": "1619080"
  },
  {
    "text": "signed and notorized so this kind of bugs me and I don't know if you all remember I might be a little older than",
    "start": "1619080",
    "end": "1625080"
  },
  {
    "text": "some of you back in the day Apple made this really snarky commercial uh ragging on Windows Vista",
    "start": "1625080",
    "end": "1631840"
  },
  {
    "text": "because Windows Vista apparently prompted you a lot and well you might",
    "start": "1631840",
    "end": "1637679"
  },
  {
    "text": "not remember it so I wanted to show you the video because I think it's hilarious so again this is an Apple commercial making fun of Vista and we'll draw our",
    "start": "1637679",
    "end": "1644159"
  },
  {
    "text": "own conclusions but it's also a nice break for me talking Mac Mac has issued a salutation cancel or allow allow so",
    "start": "1644159",
    "end": "1651360"
  },
  {
    "text": "one allow you're returning Mac salutation cancel or allow allow Mac is asking a question cancel or",
    "start": "1651360",
    "end": "1658080"
  },
  {
    "text": "allow allow he's part of Vista my new operating system hecs have a lot of security problems so he ask me to",
    "start": "1658080",
    "end": "1664000"
  },
  {
    "text": "authorize pretty much anything I do you pointing out vista's flaws cancel or allow allow I could turn him off but",
    "start": "1664000",
    "end": "1669279"
  },
  {
    "text": "then he wouldn't give me any warnings at all and that would defeat the purpose so you are coming to a sad realization cancel or allow hellow five so how many",
    "start": "1669279",
    "end": "1678440"
  },
  {
    "text": "prompts did Mac take to install the network extension it was six so to me it's kind of hilarious that apple is",
    "start": "1678440",
    "end": "1684919"
  },
  {
    "text": "like ragging on Windows and now has like Fallen to that level so kind of annoying",
    "start": "1684919",
    "end": "1690080"
  },
  {
    "text": "kind of hilarious is what it is so we're not here to brag on Apple too much but I",
    "start": "1690080",
    "end": "1695519"
  },
  {
    "text": "did think that was a valid point to make uh so now let's dive into how we would actually go about creating a network",
    "start": "1695519",
    "end": "1702200"
  },
  {
    "text": "extension which is a type of extension called a system extension so first we're going to talk about how to install or",
    "start": "1702200",
    "end": "1709440"
  },
  {
    "text": "activate a system extension again I'm not going to go through all the code going to talk about some of the concepts",
    "start": "1709440",
    "end": "1714799"
  },
  {
    "text": "so three things you're going to create a request to activate the system extension",
    "start": "1714799",
    "end": "1720360"
  },
  {
    "text": "you're there then going to specify the class that implements various delegates that will be called as part of the",
    "start": "1720360",
    "end": "1725640"
  },
  {
    "text": "system extension act activation process and then you will submit the request that will actually trigger the system",
    "start": "1725640",
    "end": "1732559"
  },
  {
    "text": "extension now in that system extension we want to utilize Network extension logic here monitoring DNS traffic so",
    "start": "1732559",
    "end": "1741440"
  },
  {
    "text": "what we have to do is tell the system that that's what we want to do by implementing a class that inherits from",
    "start": "1741440",
    "end": "1748600"
  },
  {
    "text": "the ne DNS proxy manager class this is a little more involved five steps we load",
    "start": "1748600",
    "end": "1754519"
  },
  {
    "text": "the current preferences for this there might be other filters proxies installed in the stack so we kind of load that",
    "start": "1754519",
    "end": "1760679"
  },
  {
    "text": "first we then set some descriptions initialize and configure it tell it what type of network extension we are again",
    "start": "1760679",
    "end": "1767919"
  },
  {
    "text": "this nns proxy manager we set the enable flag and then we save the preferences",
    "start": "1767919",
    "end": "1773279"
  },
  {
    "text": "which will trigger the network extension to be loaded and activated you can use",
    "start": "1773279",
    "end": "1779320"
  },
  {
    "text": "the system extension control utility this shipped with Mac OS to view loaded extensions and here we can see now our",
    "start": "1779320",
    "end": "1786159"
  },
  {
    "text": "Network extension which is going to proxy DNS traffic is up and loaded behind the scenes Apple has copied this",
    "start": "1786159",
    "end": "1792240"
  },
  {
    "text": "out of your application bundle into the library system extensions folder and loaded it from there",
    "start": "1792240",
    "end": "1799080"
  },
  {
    "text": "now our Network extension is up and running but we actually haven't like done anything yet so the first thing we",
    "start": "1799080",
    "end": "1805679"
  },
  {
    "text": "need to do is call the start system extension mode API Apple says in your network extension call this right away",
    "start": "1805679",
    "end": "1813720"
  },
  {
    "text": "behind the scenes Mac OS will consult the info. pis file which should specify",
    "start": "1813720",
    "end": "1820240"
  },
  {
    "text": "what class in your network extension is going to implement the actual network monitoring logic so for example in this",
    "start": "1820240",
    "end": "1827480"
  },
  {
    "text": "case our n DNS proxy provider so you can see on our slide we've created a class that inherits from that now this class",
    "start": "1827480",
    "end": "1834799"
  },
  {
    "text": "should Implement various required delegate methods these will be automatically called by Mac OS start and",
    "start": "1834799",
    "end": "1840440"
  },
  {
    "text": "stop are pretty self-explanatory they simply allow you to do some initializations and cleanup the handle",
    "start": "1840440",
    "end": "1845840"
  },
  {
    "text": "new flow though as we can see on the slide will be automatically invoked by the operating system anytime a network",
    "start": "1845840",
    "end": "1852880"
  },
  {
    "text": "event occurs in this case since we're monitoring DNS traffic anytime a DNS request occurs so this is great now we",
    "start": "1852880",
    "end": "1859720"
  },
  {
    "text": "can handle that now we have to remember the class is called you know DNS proxy",
    "start": "1859720",
    "end": "1866120"
  },
  {
    "text": "which means we're essentially now proxying DNS traffic which means we have to take some responsibility for handling",
    "start": "1866120",
    "end": "1872720"
  },
  {
    "text": "the flow so what we have to do is six steps we'll talk about the first four",
    "start": "1872720",
    "end": "1877880"
  },
  {
    "text": "here when a DNS request is generated by any application program on the system this is going to invoke our handle with",
    "start": "1877880",
    "end": "1884919"
  },
  {
    "text": "new flow method what we then do is open that flow read the datagrams locally we",
    "start": "1884919",
    "end": "1891320"
  },
  {
    "text": "then connect out to the DNS server and write the datagrams to proxy it on so this is how we proxy the request out to",
    "start": "1891320",
    "end": "1898080"
  },
  {
    "text": "the DNS server obviously in the middle we can examine log block the request we'll get to that in a section SE second",
    "start": "1898080",
    "end": "1904840"
  },
  {
    "text": "on the flip side we are also responsible for handling the DNS response so we have to read from that remote endpoint and",
    "start": "1904840",
    "end": "1912080"
  },
  {
    "text": "then write that back to the local flow which completes the DNS resolution",
    "start": "1912080",
    "end": "1917360"
  },
  {
    "text": "process and the local application is none the wiser and has gotten a response to their DNS",
    "start": "1917360",
    "end": "1923120"
  },
  {
    "text": "request now you might be wondering rightfully so how do we parse these DNS packets I initially thought I was going",
    "start": "1923120",
    "end": "1929360"
  },
  {
    "text": "to have to do this myself bad idea turns out there's a somewhat unknown relatively unknown lib resolve library",
    "start": "1929360",
    "end": "1936760"
  },
  {
    "text": "that does this for us so on the bottom of the slide you can see if we give the",
    "start": "1936760",
    "end": "1942200"
  },
  {
    "text": "DNS parse packet function a raw DNS packet it will parse that packet into a",
    "start": "1942200",
    "end": "1948080"
  },
  {
    "text": "nice structure for us we can then simply print that out or reach in and now pull out individual pieces from that lovely",
    "start": "1948080",
    "end": "1954559"
  },
  {
    "text": "parse DNS packet this is great you don't have to do any DNS parsing yourself now what we haven't talked",
    "start": "1954559",
    "end": "1960799"
  },
  {
    "text": "about is how to identify the responsible process I've said multiple times this is the main benefit of host-based network",
    "start": "1960799",
    "end": "1968399"
  },
  {
    "text": "monitoring so let's talk about how to do that in the context of a network extension turns out it's pretty easy",
    "start": "1968399",
    "end": "1974399"
  },
  {
    "text": "because the flow that is delivered to us for any network activity contains an",
    "start": "1974399",
    "end": "1979799"
  },
  {
    "text": "audit token if you're not familiar with audit tokens they're essentially a secure modern way to uniquely identify a",
    "start": "1979799",
    "end": "1987000"
  },
  {
    "text": "process they're more like secure than pids which could be potentially reused so once we have an audit token which",
    "start": "1987000",
    "end": "1993159"
  },
  {
    "text": "every flow has from that we can extract a pit a path all the information needed to identify the process responsible for",
    "start": "1993159",
    "end": "2000760"
  },
  {
    "text": "in this case the actual DNS request so here's the output from this",
    "start": "2000760",
    "end": "2005840"
  },
  {
    "text": "tool if we compile it all and execute it we can see two main things at the top we can see that it has identified the",
    "start": "2005840",
    "end": "2012639"
  },
  {
    "text": "responsible process the 3cx desktop application and then we also now intercepted the query specifically to",
    "start": "2012639",
    "end": "2019519"
  },
  {
    "text": "the MS storagebox dcom so hooray we're now intercepting DNS requests well we",
    "start": "2019519",
    "end": "2026240"
  },
  {
    "text": "might want to block requests so how do we do that well we can either block the question the query the request or the",
    "start": "2026240",
    "end": "2033480"
  },
  {
    "text": "response the IP address when it comes back so let's first talk about how to block the initial query the question as",
    "start": "2033480",
    "end": "2041840"
  },
  {
    "text": "we can see on the slide when we get the request before it's gone out we can parse it to see what the question is",
    "start": "2041840",
    "end": "2047639"
  },
  {
    "text": "what domain is the application trying to resolve and if it's a domain we don't like for example it's in a block list we",
    "start": "2047639",
    "end": "2053960"
  },
  {
    "text": "can just close the flow if we do this for example here I've told it to block google.com in a block list I then try to",
    "start": "2053960",
    "end": "2061079"
  },
  {
    "text": "resolve google.com we intercept that request and say no we don't want you and the request just times out so we have",
    "start": "2061079",
    "end": "2067480"
  },
  {
    "text": "the ability now to block questions of course we can also block the answer because the answers come back to us via",
    "start": "2067480",
    "end": "2074040"
  },
  {
    "text": "our proxy uh the answers are obviously going to be IP addresses so if you have a list of IP addresses you want to block",
    "start": "2074040",
    "end": "2081240"
  },
  {
    "text": "essentially same thing when that request comes back you just close the flow without writing to the local flow again",
    "start": "2081240",
    "end": "2087320"
  },
  {
    "text": "this will cause the DNS request to Simply time out you can also do other things like write you know uh or send it",
    "start": "2087320",
    "end": "2093560"
  },
  {
    "text": "a custom packet saying you know IP address not found reroute it whatever you want it's a proxy another neat feature of this tool",
    "start": "2093560",
    "end": "2100720"
  },
  {
    "text": "is the ability to dump the DNS cache this is actually one of the main reasons I wanted to write this tool in the first place I just wanted Mac OS to tell me",
    "start": "2100720",
    "end": "2108480"
  },
  {
    "text": "what IP addresses had been resolved from what domains so you can send it a signal and it'll just dump to all the requests",
    "start": "2108480",
    "end": "2115800"
  },
  {
    "text": "and the IP addresses now there's one obvious shortcoming and that is if malware",
    "start": "2115800",
    "end": "2122400"
  },
  {
    "text": "connects directly to a command and control server via an IP address this is not obviously going to generate any",
    "start": "2122400",
    "end": "2127839"
  },
  {
    "text": "network traffic so in the case of dummy we run into this instance it connects to",
    "start": "2127839",
    "end": "2133000"
  },
  {
    "text": "a hard-coded IP address no network traffic our DNS monitor is not going to see anything because there's no DNS",
    "start": "2133000",
    "end": "2138280"
  },
  {
    "text": "traffic so now what we have to do if we want is create a more comprehensive tool",
    "start": "2138280",
    "end": "2143960"
  },
  {
    "text": "that can see all Network traffic and also block or deny based on rules so I",
    "start": "2143960",
    "end": "2150680"
  },
  {
    "text": "briefly want to end by talking about Lulu which is an open source fire while I wrote for Mac OS again source code on",
    "start": "2150680",
    "end": "2156800"
  },
  {
    "text": "The Objective C website and well we all know what firewalls do they basically observe traffic if it's from a trusted",
    "start": "2156800",
    "end": "2163760"
  },
  {
    "text": "application it allows it through if it's from something it doesn't recognize or something the user has said we should",
    "start": "2163760",
    "end": "2169520"
  },
  {
    "text": "block we throw up a prompt or simply block it so the way you implement this",
    "start": "2169520",
    "end": "2176000"
  },
  {
    "text": "is very similar to the DNS monitor again we're going to use a network extension but in this case instead of using the",
    "start": "2176000",
    "end": "2182359"
  },
  {
    "text": "DNS proxy class we're going to use the ne filter data data provider class and",
    "start": "2182359",
    "end": "2187880"
  },
  {
    "text": "as we can see on the slide Apple documents and says that this will allow you to see all Network traffic and then",
    "start": "2187880",
    "end": "2193599"
  },
  {
    "text": "also allow you to make decisions based on this now we'll talk briefly at the end how to classify the traffic to tell",
    "start": "2193599",
    "end": "2201599"
  },
  {
    "text": "the system whether it should be allowed or denied but this basically comes down to examining the responsible process and",
    "start": "2201599",
    "end": "2208480"
  },
  {
    "text": "also uh preferences or characteristics rather of the traffic or we could ask",
    "start": "2208480",
    "end": "2213920"
  },
  {
    "text": "the user so how do we enable able the filter manager exactly the same way as",
    "start": "2213920",
    "end": "2219640"
  },
  {
    "text": "the DNS proxy provider it's also a network extension although there's a few things that are different for example we",
    "start": "2219640",
    "end": "2226160"
  },
  {
    "text": "can customize it a little more to tell the operating system what type of network traffic we want specifically do",
    "start": "2226160",
    "end": "2231680"
  },
  {
    "text": "we want packets or not we don't want to do a full packet capture so we set no but we want to filter monitor all",
    "start": "2231680",
    "end": "2238720"
  },
  {
    "text": "sockets so we say yes to that we then save those preferences again this activates the filter we're often running",
    "start": "2238720",
    "end": "2246920"
  },
  {
    "text": "again we have this handle new flow this is the same delegate method that gets called but in this case it is expected",
    "start": "2246920",
    "end": "2253800"
  },
  {
    "text": "to return a verdict to the operating system that tells the operating system either to allow block or pause the flow",
    "start": "2253800",
    "end": "2262640"
  },
  {
    "text": "now if you want to just passively monitor all Network traffic you could just hardcode your application your network extension to always return",
    "start": "2262640",
    "end": "2271440"
  },
  {
    "text": "allow all right so let's end by talking about how do we now determine if Network",
    "start": "2271440",
    "end": "2277079"
  },
  {
    "text": "traffic is malicious up to this point we've talked about several ways that allowed us to collect this network",
    "start": "2277079",
    "end": "2282720"
  },
  {
    "text": "activity or monitor network connectivity but at the end of the day we want to be able to classify this as legitimate or",
    "start": "2282720",
    "end": "2289720"
  },
  {
    "text": "unauthorized suspicious potentially malicious so there's two main ways to do",
    "start": "2289720",
    "end": "2296280"
  },
  {
    "text": "this one way is via the responsible process which we'll talk about next the other way is by examining the",
    "start": "2296280",
    "end": "2301720"
  },
  {
    "text": "characteristics of the actual network connection this is a well-known topic a well discussed topic there's books on",
    "start": "2301720",
    "end": "2307680"
  },
  {
    "text": "this there's talks about this basically now we have access to the network connection we can come to conclusions",
    "start": "2307680",
    "end": "2315359"
  },
  {
    "text": "for example if there is a listening socket that's bound to an external interface H might want to take a look",
    "start": "2315359",
    "end": "2322240"
  },
  {
    "text": "especially if it's listening on some strange Port um if there is a connection",
    "start": "2322240",
    "end": "2327440"
  },
  {
    "text": "that statistically is weird in the sense that it beacons every hour and exfiltrate a large amount of traffic at",
    "start": "2327440",
    "end": "2333240"
  },
  {
    "text": "midnight every night you might want to take a a look however what we want to dive into is",
    "start": "2333240",
    "end": "2338880"
  },
  {
    "text": "because we're running on the host how to check the responsible process because",
    "start": "2338880",
    "end": "2344240"
  },
  {
    "text": "that example I just gave something beaconing at midnight and sending a large amount of data that could just be",
    "start": "2344240",
    "end": "2349599"
  },
  {
    "text": "your Enterprise backup Solution that's like backing up every night at midnight if you're executing in a network",
    "start": "2349599",
    "end": "2354920"
  },
  {
    "text": "application you might not be able to identify that it's the backup solution but since we're on the host we can see the responsible process so how do we",
    "start": "2354920",
    "end": "2361960"
  },
  {
    "text": "identify the responsible process we already talked about that how do we classify or exam it what characteristics",
    "start": "2361960",
    "end": "2368400"
  },
  {
    "text": "make it potentially suspicious well there's a whole different uh ways you can do that we're",
    "start": "2368400",
    "end": "2373680"
  },
  {
    "text": "briefly going to talk about some ideas that I like we're going to start by talking about how to determine if an",
    "start": "2373680",
    "end": "2380119"
  },
  {
    "text": "item is not notorized and doesn't belong to the operating system the idea is most",
    "start": "2380119",
    "end": "2386520"
  },
  {
    "text": "malare is not notorized there's some exemptions uh the 3cx payload is one",
    "start": "2386520",
    "end": "2391560"
  },
  {
    "text": "example but the vast majority of Mac maare is not going to be notorized so if you see network connection from a non-ed",
    "start": "2391560",
    "end": "2397839"
  },
  {
    "text": "process that's a redish flag especially because the vast majority of legitimate",
    "start": "2397839",
    "end": "2403000"
  },
  {
    "text": "software is going to be notorized so pretty easy once we have a PID or an",
    "start": "2403000",
    "end": "2408440"
  },
  {
    "text": "audit token from a responsible process we can create various requirement",
    "start": "2408440",
    "end": "2414119"
  },
  {
    "text": "queries against it I have some example code from here on the slide we basically",
    "start": "2414119",
    "end": "2419160"
  },
  {
    "text": "can say does it belong to Apple isn't notorized and the operating system will say yes no maybe etc etc I've",
    "start": "2419160",
    "end": "2426000"
  },
  {
    "text": "implemented this in another one of my tools called block block it's not related to network activity but does have the full code how to classify a",
    "start": "2426000",
    "end": "2432960"
  },
  {
    "text": "process if it's notorized or not we also might want to say is it persistently installed on recent",
    "start": "2432960",
    "end": "2439880"
  },
  {
    "text": "versions of Mac OS you can answer this question by looking at the background task management or BTM database this is",
    "start": "2439880",
    "end": "2446920"
  },
  {
    "text": "undocumented but I've released an open source tool that can dump this database here we have the persistence information",
    "start": "2446920",
    "end": "2453160"
  },
  {
    "text": "about dummy we can see that dummy persists as a launch Damon as a script",
    "start": "2453160",
    "end": "2459200"
  },
  {
    "text": "that executes as root that's not signed these are all very suspicious things and",
    "start": "2459200",
    "end": "2464440"
  },
  {
    "text": "speaking as of dummy Remember It ultimately executes python to connect",
    "start": "2464440",
    "end": "2469520"
  },
  {
    "text": "out to spawn a reverse shell and the question was how do we know this instance of python is suspicious or not",
    "start": "2469520",
    "end": "2477000"
  },
  {
    "text": "one great answer is to look at its process hierarchy so once we have the",
    "start": "2477000",
    "end": "2482640"
  },
  {
    "text": "network connection that we want to examine we have an audit token or a PID from that we can look at the process hierarchy in",
    "start": "2482640",
    "end": "2488480"
  },
  {
    "text": "this case we can see that that python in uh instance was executed by bash which",
    "start": "2488480",
    "end": "2493680"
  },
  {
    "text": "was executed by launch D we also as we showed on the last slide have persistence information so now what we",
    "start": "2493680",
    "end": "2500520"
  },
  {
    "text": "have is an instance of python that's running as root that's persistently installed that has an established",
    "start": "2500520",
    "end": "2506880"
  },
  {
    "text": "connection to an unknown IP address those are all red flags and even though python is being used and python itself",
    "start": "2506880",
    "end": "2513440"
  },
  {
    "text": "is not malicious it's been used in a very susp icious way and in that case you probably would want to go you should",
    "start": "2513440",
    "end": "2519200"
  },
  {
    "text": "go take a look look at that closer all right let's wrap this up with some",
    "start": "2519200",
    "end": "2524400"
  },
  {
    "text": "takeaways okay again obviously malware uses the network I've hopefully made the",
    "start": "2524400",
    "end": "2529800"
  },
  {
    "text": "compelling case that we can detect malware pretty consistently and reliably",
    "start": "2529800",
    "end": "2535720"
  },
  {
    "text": "by detecting unauthorized traffic directly on the host leveraging Apple's",
    "start": "2535720",
    "end": "2541800"
  },
  {
    "text": "networking Frameworks now if you're interested in learning more about analysis I've",
    "start": "2541800",
    "end": "2547400"
  },
  {
    "text": "written a book on this topic it's 100% free online so you can pop over tm.org",
    "start": "2547400",
    "end": "2553240"
  },
  {
    "text": "and grab that uh I'm also excited to announce that I'm working on another",
    "start": "2553240",
    "end": "2558640"
  },
  {
    "text": "volume which talks about this exact topic which is programmatically detecting macm in the first place so",
    "start": "2558640",
    "end": "2564960"
  },
  {
    "text": "check that out if you're interested in maare analysis maare detection on Mac OS also more if you enjoy my talks and",
    "start": "2564960",
    "end": "2572720"
  },
  {
    "text": "my ramblings and poking at Apple uh I'm going to be doing doing a tool Arsenal tomorrow at 10:00 a.m. where I'm going",
    "start": "2572720",
    "end": "2578319"
  },
  {
    "text": "to be demonstrating the tools I've talked about today so stop by we can talk about the source code you can see this in action against some of the ma",
    "start": "2578319",
    "end": "2584680"
  },
  {
    "text": "specimens I talked about I'm also going to be doing a book signing with Maria who gave the keynote uh and that will be",
    "start": "2584680",
    "end": "2591839"
  },
  {
    "text": "tomorrow at 12:15 uh so if you want to pick up the book which is awesome get it signed",
    "start": "2591839",
    "end": "2598280"
  },
  {
    "text": "Maria's book is essential as well it's on arm reversing which on Mac OS is now",
    "start": "2598280",
    "end": "2603839"
  },
  {
    "text": "what all binaries are essentially written in uh check that out and then finally tomorrow as well I'm going to be talking about the 3cx supply chain",
    "start": "2603839",
    "end": "2610599"
  },
  {
    "text": "attack which we touched on today the talk tomorrow is going to be diving into analyzing the Mac OS pay payloads so a",
    "start": "2610599",
    "end": "2617359"
  },
  {
    "text": "lot of uh interesting reverse engineering talking about supply chain kind of neat stuff lastly I briefly just",
    "start": "2617359",
    "end": "2624480"
  },
  {
    "text": "want to talk about The Objective C Foundation who uh I founded and and support because I think we're doing a",
    "start": "2624480",
    "end": "2630640"
  },
  {
    "text": "really neat job with some Community focused efforts that I would love for yall to learn more about and perhaps become more involved in so we're a full",
    "start": "2630640",
    "end": "2638160"
  },
  {
    "text": "501c3 nonprofit We organize the obts max security conference we provide College",
    "start": "2638160",
    "end": "2644599"
  },
  {
    "text": "scholarships to College Bound students focusing in Tech careers and we also have a bunch of diversity programs where",
    "start": "2644599",
    "end": "2650440"
  },
  {
    "text": "we're trying to well make Tech a little more diverse so pop over to objective c.org learn about us maybe support us",
    "start": "2650440",
    "end": "2659119"
  },
  {
    "text": "and speaking of I want to end by thanking the amazing companies who support The Objective C foundation",
    "start": "2659119",
    "end": "2665359"
  },
  {
    "text": "without them I wouldn't be up here today uh the obts conference would not be a reality the books the free tools so big",
    "start": "2665359",
    "end": "2672480"
  },
  {
    "text": "thanks to all of them so that is a wrap uh I went over by a few minutes but since this is the last Talk of the day",
    "start": "2672480",
    "end": "2679040"
  },
  {
    "text": "we can still take some questions I will also hang out here for a few minutes uh so if you're don't want to raise your",
    "start": "2679040",
    "end": "2685640"
  },
  {
    "text": "hand you can also come up and chat with me but thank you again so much for attending this talk I really appreciate",
    "start": "2685640",
    "end": "2690680"
  },
  {
    "text": "your time and attention mahalo",
    "start": "2690680",
    "end": "2697960"
  },
  {
    "text": "any questions and if so use the mic so the live stream or recording can pick that up yes just walk up and ask away",
    "start": "2700200",
    "end": "2709400"
  },
  {
    "text": "and make sure it's not too hard yeah I was just wondering um do we have anything that we can use to monitor",
    "start": "2709400",
    "end": "2715599"
  },
  {
    "text": "say encrypted DNS going out of the system usually it looks like it's on Port 443 it looks just like any other",
    "start": "2715599",
    "end": "2721559"
  },
  {
    "text": "TLS traffic great question so the question was how do we monitor encrypted DNS traffic wow that's a great question",
    "start": "2721559",
    "end": "2728400"
  },
  {
    "text": "I'll have to get back to you I don't know off the top of my head it would be interesting to see if um that would be",
    "start": "2728400",
    "end": "2734960"
  },
  {
    "text": "routed through the DNS proxy provider because according to Apple all DNS traffic would go through that yes and I",
    "start": "2734960",
    "end": "2742720"
  },
  {
    "text": "put that in quotes uh Apple is semi- receptive if you provide them feedback like hey it' be great if encrypted DNS",
    "start": "2742720",
    "end": "2750119"
  },
  {
    "text": "traffic is also routed through the DNS proxy otherwise you know adversaries or",
    "start": "2750119",
    "end": "2755480"
  },
  {
    "text": "you know whomever is using encrypted DNS we we would miss I don't know the answer to that be a great thing to test um if",
    "start": "2755480",
    "end": "2762079"
  },
  {
    "text": "you run the DNS Monitor and then make an encrypted DNS query if it shows up it means awesome if not probably means",
    "start": "2762079",
    "end": "2768440"
  },
  {
    "text": "currently we're a little bit out of luck however the network filter extension that Lulu is built on top that sees all",
    "start": "2768440",
    "end": "2775839"
  },
  {
    "text": "Network traffic so you might capture it there and in theory I think that would be before it's encrypted uh again",
    "start": "2775839",
    "end": "2781800"
  },
  {
    "text": "something to look into but excellent question other questions I a question is",
    "start": "2781800",
    "end": "2787000"
  },
  {
    "text": "this I don't think so I can repeat your question so yeah if you're connecting",
    "start": "2787000",
    "end": "2793119"
  },
  {
    "text": "directly without using the system processes to uh like Port 53 of a DNS server does that go through Mac",
    "start": "2793119",
    "end": "2799240"
  },
  {
    "text": "os's services that you're using excellent question so the question is if you're and tell me if I'm getting wrong",
    "start": "2799240",
    "end": "2806040"
  },
  {
    "text": "directly connecting to the DNS requests uh doing it yourself does that still get routed this is another question I do not",
    "start": "2806040",
    "end": "2811960"
  },
  {
    "text": "have the answer for which is great because I think this illustrates that this is a great topic that there's still",
    "start": "2811960",
    "end": "2817160"
  },
  {
    "text": "a lot of unknowns like even myself who has been doing this for uh several years",
    "start": "2817160",
    "end": "2822240"
  },
  {
    "text": "uh you know I I don't have all the answers um and so that would be something great to test you know if Mal",
    "start": "2822240",
    "end": "2827800"
  },
  {
    "text": "makes its own DNS request is this going to get routed through I would hope so uh",
    "start": "2827800",
    "end": "2833119"
  },
  {
    "text": "I'm wondering if Apple basically just takes Port 53 traffic and then proxies it through because",
    "start": "2833119",
    "end": "2840359"
  },
  {
    "text": "um when you intercept the DNS request they give you the responsible process it doesn't come from like their mdns",
    "start": "2840359",
    "end": "2846520"
  },
  {
    "text": "responder which is kind of how system requests are resolved uh so I could see potentially it would be interesting",
    "start": "2846520",
    "end": "2852160"
  },
  {
    "text": "though again something we should be able to test run the DNS monitor make a your own DNS request via raw TCP sockets to a",
    "start": "2852160",
    "end": "2860119"
  },
  {
    "text": "port 53 and see if that get that gets routed through uh if not that would be again something worth noting and a",
    "start": "2860119",
    "end": "2866280"
  },
  {
    "text": "limitation of the DNS proxy which again is maybe a check mark for the more comprehensive uh Network filter uh",
    "start": "2866280",
    "end": "2874559"
  },
  {
    "text": "driver extension which in theory should see all Network traffic um and at that point you can see oh hey this is a a raw",
    "start": "2874559",
    "end": "2881640"
  },
  {
    "text": "DNS request which might be suspicious unto itself so great question any",
    "start": "2881640",
    "end": "2889200"
  },
  {
    "text": "more awesome thank you again so much it was a [Applause]",
    "start": "2890119",
    "end": "2896480"
  },
  {
    "text": "pleasure",
    "start": "2896480",
    "end": "2899480"
  }
]