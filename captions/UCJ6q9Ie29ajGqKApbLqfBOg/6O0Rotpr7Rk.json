[
  {
    "start": "0",
    "end": "55000"
  },
  {
    "text": "[Music]",
    "start": "1130",
    "end": "14690"
  },
  {
    "text": "hello everyone my name is tao yan today we are going to share our research about",
    "start": "16560",
    "end": "21680"
  },
  {
    "text": "how to pump ios and the sql server with the vulnerabilities in microsoft jet database engine",
    "start": "21680",
    "end": "28000"
  },
  {
    "text": "our topic is give me a second injection i shall upon is in the second server the name of this topic is from the",
    "start": "28000",
    "end": "35120"
  },
  {
    "text": "famous greek scientist archimedes he has a famous assertion to demonstrate the",
    "start": "35120",
    "end": "41360"
  },
  {
    "text": "principle of the level give me the pleas to stand i shall move the earth",
    "start": "41360",
    "end": "46399"
  },
  {
    "text": "i will say pawning is and the second server is as difficult as moving the earth we both need a precondition",
    "start": "46399",
    "end": "55840"
  },
  {
    "start": "55000",
    "end": "75000"
  },
  {
    "text": "here's our agenda we'll firstly introduce why we do this research and",
    "start": "56079",
    "end": "61440"
  },
  {
    "text": "then we will introduce what new discoveries we found in ios and sequel server",
    "start": "61440",
    "end": "67119"
  },
  {
    "text": "after that we will show examples to prove our discoveries at last we will",
    "start": "67119",
    "end": "72640"
  },
  {
    "text": "summarize the whole topic who are we we are security researchers",
    "start": "72640",
    "end": "78640"
  },
  {
    "start": "75000",
    "end": "97000"
  },
  {
    "text": "from palo alto networks we have spoken at many different security conferences",
    "start": "78640",
    "end": "84720"
  },
  {
    "text": "black cancer grass blue head recon etc we are also regular top vulnerability",
    "start": "84720",
    "end": "91920"
  },
  {
    "text": "contributors for microsoft adobe apple and so on",
    "start": "91920",
    "end": "97680"
  },
  {
    "start": "97000",
    "end": "123000"
  },
  {
    "text": "let's start from the motivation and background our research started from these three",
    "start": "98799",
    "end": "106159"
  },
  {
    "text": "questions new attack surface in ios and sequel server can we do more with the second injection",
    "start": "106159",
    "end": "112479"
  },
  {
    "text": "who can use microsoft jet database engine we will show how we connect",
    "start": "112479",
    "end": "118000"
  },
  {
    "text": "these three synced unrelated topics together",
    "start": "118000",
    "end": "124159"
  },
  {
    "text": "attack surface in is and the secret server are very limited especially for memory corruption",
    "start": "126000",
    "end": "131760"
  },
  {
    "text": "vulnerabilities you can see in this figure the last memory corruption vulnerability",
    "start": "131760",
    "end": "138400"
  },
  {
    "text": "is appeared in 2009 over 10 years ago",
    "start": "138400",
    "end": "144319"
  },
  {
    "start": "142000",
    "end": "199000"
  },
  {
    "text": "attacking is and the second server directly is much too difficult so what",
    "start": "144640",
    "end": "150480"
  },
  {
    "text": "if we have a circuit injection in advance circuit injection can be used to",
    "start": "150480",
    "end": "156720"
  },
  {
    "text": "execute any intended circuit queries in target database",
    "start": "156720",
    "end": "164720"
  },
  {
    "text": "usually it is used to view data in the database especially in",
    "start": "164720",
    "end": "170480"
  },
  {
    "text": "access for more powerful databases like secure server only if you have high database",
    "start": "170480",
    "end": "177360"
  },
  {
    "text": "privileges in the second injection otherwise you cannot execute shell commands",
    "start": "177360",
    "end": "183760"
  },
  {
    "text": "even more you cannot execute the native code in the public application or database process",
    "start": "183760",
    "end": "192400"
  },
  {
    "text": "but if there is a vulnerability in database engine we could get that capability",
    "start": "192400",
    "end": "199840"
  },
  {
    "text": "it's easy to bring the jet database to the stage firstly it's very old and not well",
    "start": "200480",
    "end": "207840"
  },
  {
    "text": "maintained but still massively used secondly it is native supported on all",
    "start": "207840",
    "end": "214480"
  },
  {
    "text": "windows versions ms jet 4.0 is installed by default on all windows versions",
    "start": "214480",
    "end": "222959"
  },
  {
    "start": "223000",
    "end": "313000"
  },
  {
    "text": "so the next question is who are using jet since there's a vulnerability in jet",
    "start": "225599",
    "end": "232400"
  },
  {
    "text": "database engine it will also be affected the first option is office office supply",
    "start": "232400",
    "end": "238080"
  },
  {
    "text": "and interface to that users to to link an external data database source",
    "start": "238080",
    "end": "245920"
  },
  {
    "text": "but it is not ideal targeted since uh firstly it cannot execute second",
    "start": "245920",
    "end": "252720"
  },
  {
    "text": "queries on the new linked database file",
    "start": "252720",
    "end": "259040"
  },
  {
    "text": "second the protective view mode of office will mitigate the external",
    "start": "259040",
    "end": "266160"
  },
  {
    "text": "link source the other option is double script but it",
    "start": "266160",
    "end": "271199"
  },
  {
    "text": "is not not also a ideal target since it can only crash w",
    "start": "271199",
    "end": "279040"
  },
  {
    "text": "script locally and it did not break the security boundary",
    "start": "279040",
    "end": "285199"
  },
  {
    "text": "what about access and second server since we have known jet in the default",
    "start": "286960",
    "end": "292320"
  },
  {
    "text": "database subsystem used by microsoft access so it is possible to use vulnerabilities in",
    "start": "292320",
    "end": "300320"
  },
  {
    "text": "jet database engine to attack ios and the sql server by executing",
    "start": "300320",
    "end": "306240"
  },
  {
    "text": "any sega queries on remote controllable database the answer is yes",
    "start": "306240",
    "end": "314160"
  },
  {
    "start": "313000",
    "end": "339000"
  },
  {
    "text": "now we come to the main dish we will introduce the new remote remote",
    "start": "314560",
    "end": "320000"
  },
  {
    "text": "attack service on ios and sequel server and this chapter will",
    "start": "320000",
    "end": "325039"
  },
  {
    "text": "detail what the new discovery is how secure",
    "start": "325039",
    "end": "330880"
  },
  {
    "text": "how cell injection connect circle uh is and the second server with jet winner",
    "start": "330880",
    "end": "336880"
  },
  {
    "text": "jet database engine let's see the cross database second",
    "start": "336880",
    "end": "343600"
  },
  {
    "start": "339000",
    "end": "468000"
  },
  {
    "text": "query in xs and second server first in access database",
    "start": "343600",
    "end": "349440"
  },
  {
    "text": "it's very straightforward you just need to put external database before the table",
    "start": "349440",
    "end": "355440"
  },
  {
    "text": "name in second server there are three ways",
    "start": "355440",
    "end": "361280"
  },
  {
    "text": "to do that open data source open your set at link server",
    "start": "361440",
    "end": "366560"
  },
  {
    "text": "in each way you can set",
    "start": "366560",
    "end": "371759"
  },
  {
    "text": "external database to the data source parameter database parameter date src",
    "start": "371759",
    "end": "378000"
  },
  {
    "text": "parameter access",
    "start": "378000",
    "end": "383840"
  },
  {
    "text": "use jet provider by default so it will use",
    "start": "383840",
    "end": "390319"
  },
  {
    "text": "ms yet 4.0 to do the cross database second query",
    "start": "390319",
    "end": "396879"
  },
  {
    "text": "is it possible to use jet to do cross database query in second server the",
    "start": "397120",
    "end": "402319"
  },
  {
    "text": "answer is yes you only need to set the provider with these strings jet 4.0",
    "start": "402319",
    "end": "410080"
  },
  {
    "text": "or sae 12.0 or 6.0 to let second server with",
    "start": "410080",
    "end": "417199"
  },
  {
    "text": "related jet database engine to do the cross database second",
    "start": "417199",
    "end": "424080"
  },
  {
    "text": "query it is very interesting right second server can use jet database engine to do",
    "start": "424080",
    "end": "430880"
  },
  {
    "text": "cross database segger queries assigning the provider with the",
    "start": "430880",
    "end": "437199"
  },
  {
    "text": "uh and using msjet to do cross database query in",
    "start": "437199",
    "end": "442319"
  },
  {
    "text": "access and the sega server is not enough if external database can be on the",
    "start": "442319",
    "end": "447680"
  },
  {
    "text": "remote server that will be a very powerful capability since the attackers can",
    "start": "447680",
    "end": "454240"
  },
  {
    "text": "control the database file remotely in the document",
    "start": "454240",
    "end": "460000"
  },
  {
    "text": "we see both local file system and shared",
    "start": "460000",
    "end": "465039"
  },
  {
    "text": "network folders are supported let's check the code in msjet 4.0",
    "start": "465039",
    "end": "473759"
  },
  {
    "start": "468000",
    "end": "524000"
  },
  {
    "text": "there's a function named error try open database is responsible to parse",
    "start": "473759",
    "end": "480319"
  },
  {
    "text": "external database if we set a unc path and it will",
    "start": "480319",
    "end": "487280"
  },
  {
    "text": "check if it is a foreign database and go to different branches",
    "start": "487360",
    "end": "492960"
  },
  {
    "text": "and you can see msjet 440 module msrd and ms excel",
    "start": "492960",
    "end": "501360"
  },
  {
    "text": "will be called but finally all different code branches will call createfile",
    "start": "501440",
    "end": "508240"
  },
  {
    "text": "to open the external database file similarly in msgs 12.0",
    "start": "508240",
    "end": "517360"
  },
  {
    "text": "it will also creep file to open external database",
    "start": "517360",
    "end": "524560"
  },
  {
    "text": "usually windows use smb to parse unc path in most applications",
    "start": "525760",
    "end": "532160"
  },
  {
    "text": "but there's a hidden feature for createfile with unc pass in ios and the",
    "start": "532160",
    "end": "537519"
  },
  {
    "text": "sql server it both use smb and surprisingly",
    "start": "537519",
    "end": "543519"
  },
  {
    "text": "also use webdv you can see it firstly will connect 445",
    "start": "543519",
    "end": "550880"
  },
  {
    "text": "and 139 part with smb protocol and then if filled and it will",
    "start": "550880",
    "end": "559519"
  },
  {
    "text": "connect h0 part with webdv protocol very interesting right",
    "start": "559519",
    "end": "566720"
  },
  {
    "text": "if we set up a smb server it works on windows 7 fields on",
    "start": "566720",
    "end": "571760"
  },
  {
    "text": "windows 10 we guess there might be some mitigations to mitigate smb",
    "start": "571760",
    "end": "579440"
  },
  {
    "text": "ntlm harsh leak issues if we set up a webdv server",
    "start": "579440",
    "end": "586720"
  },
  {
    "text": "is and the secret server successfully get the external database file",
    "start": "586800",
    "end": "593680"
  },
  {
    "text": "from the remote web dv server it works all on all windows versions",
    "start": "593680",
    "end": "601760"
  },
  {
    "start": "600000",
    "end": "648000"
  },
  {
    "text": "web dv and smb are not our story you can see there's a more feature in ms excel",
    "start": "601760",
    "end": "608560"
  },
  {
    "text": "for zero and you can see there's a",
    "start": "608560",
    "end": "613360"
  },
  {
    "text": "net protocol type function it will check if the input is a ftp protocol if yes it",
    "start": "613920",
    "end": "622079"
  },
  {
    "text": "will call net download to local function to download the remote database file",
    "start": "622079",
    "end": "630079"
  },
  {
    "text": "from the ftp server this function will call apis in windinet",
    "start": "630079",
    "end": "636720"
  },
  {
    "text": "to communicate with the remote ftp server you can see is nsx server",
    "start": "636720",
    "end": "643360"
  },
  {
    "text": "connect 21 part with ftp protocol",
    "start": "643360",
    "end": "648160"
  },
  {
    "text": "after we know access and the sql server support cross database query and external database can be on the remote",
    "start": "649120",
    "end": "656160"
  },
  {
    "text": "web dv server let's see what will happen about cross status query in circuit injection",
    "start": "656160",
    "end": "663200"
  },
  {
    "text": "this is a typical second injection case in access you can see we",
    "start": "663200",
    "end": "668880"
  },
  {
    "text": "in we use id to inject or customize secondary",
    "start": "668880",
    "end": "676320"
  },
  {
    "text": "after the injection both original second query and the injected circuit query will be executed",
    "start": "676320",
    "end": "683519"
  },
  {
    "text": "by asb code",
    "start": "683519",
    "end": "687480"
  },
  {
    "text": "let's see how is and asp deal with the injected second query in is process",
    "start": "688880",
    "end": "697279"
  },
  {
    "text": "the functions in sp real core module may be script msado odbc32 and finally it",
    "start": "697760",
    "end": "704959"
  },
  {
    "text": "will call try open database to open external",
    "start": "704959",
    "end": "710320"
  },
  {
    "text": "database as as we just introduced this function will call craig file",
    "start": "710320",
    "end": "717040"
  },
  {
    "text": "finally this is the typical circuit injection",
    "start": "717040",
    "end": "722959"
  },
  {
    "text": "case in circuit server similarly we also use id to inject",
    "start": "722959",
    "end": "728399"
  },
  {
    "text": "or customize security and both original second query and injected",
    "start": "728399",
    "end": "736240"
  },
  {
    "text": "second query will be executed by asb code",
    "start": "736240",
    "end": "741519"
  },
  {
    "text": "in this case we use open data source as an example and it",
    "start": "741519",
    "end": "749680"
  },
  {
    "text": "said the provider we we the sae 12.0 to let the secret server use",
    "start": "749680",
    "end": "756720"
  },
  {
    "text": "msg at 12.0 to do cross database second query on the",
    "start": "756720",
    "end": "763120"
  },
  {
    "text": "uh remote database file on the webdav server",
    "start": "763120",
    "end": "769519"
  },
  {
    "text": "different with the access case it is a secure server process that deal with the",
    "start": "770399",
    "end": "776320"
  },
  {
    "text": "injected second query if we use jet 4.0 and the provider you can see",
    "start": "776320",
    "end": "783040"
  },
  {
    "text": "sega server will use jet open database function in",
    "start": "783040",
    "end": "788680"
  },
  {
    "text": "msj.40 module to open external database finally it will calculate file",
    "start": "788680",
    "end": "797279"
  },
  {
    "text": "if we use jet 12.0 and the provider you can see circuit",
    "start": "797600",
    "end": "803040"
  },
  {
    "text": "server will use functions in easy core",
    "start": "803040",
    "end": "808399"
  },
  {
    "text": "to open external database finally it will also call createfile as we showed before",
    "start": "808399",
    "end": "815800"
  },
  {
    "start": "815000",
    "end": "869000"
  },
  {
    "text": "let's summarize this new attack surface it grant attackers the ability to",
    "start": "816720",
    "end": "824000"
  },
  {
    "text": "execute any second queries on any attacker controllable database in",
    "start": "824000",
    "end": "829600"
  },
  {
    "text": "ios and the second server based on a second injection it means",
    "start": "829600",
    "end": "835120"
  },
  {
    "text": "vulnerabilities in jet database engine can be used to attack ios and a second server",
    "start": "835120",
    "end": "841680"
  },
  {
    "text": "so we do fuzzing based on the mutations on circuit queries and jet database files",
    "start": "841680",
    "end": "849440"
  },
  {
    "text": "with this strategy we have found around 100 vulnerabilities",
    "start": "849440",
    "end": "856000"
  },
  {
    "text": "it's a huge goal in mind hope you can find your own",
    "start": "856000",
    "end": "861279"
  },
  {
    "text": "vulnerabilities to attack ios and the second server with this method",
    "start": "861279",
    "end": "868360"
  },
  {
    "start": "869000",
    "end": "893000"
  },
  {
    "text": "now we come to introduce three attack scenarios under this new attack surface",
    "start": "872480",
    "end": "878639"
  },
  {
    "text": "in the real world in each scenario we will detail the new attack service impact and the",
    "start": "878639",
    "end": "885519"
  },
  {
    "text": "requirements as well as show the examples of vulnerability details",
    "start": "885519",
    "end": "890720"
  },
  {
    "text": "including the demos first scenario is an access",
    "start": "890720",
    "end": "898880"
  },
  {
    "start": "893000",
    "end": "964000"
  },
  {
    "text": "in this scenario all set up by by default except you have",
    "start": "898880",
    "end": "904480"
  },
  {
    "text": "a second injection and our",
    "start": "904480",
    "end": "909839"
  },
  {
    "text": "jet 4.0 components are vulnerable and you only need one single web request to",
    "start": "909839",
    "end": "916560"
  },
  {
    "text": "cause is u.s inflict or rce with the same privilege",
    "start": "916560",
    "end": "923600"
  },
  {
    "text": "of the is process although you can only use select query",
    "start": "923600",
    "end": "929680"
  },
  {
    "text": "in this scenario but it is good enough to find vulnerabilities",
    "start": "929680",
    "end": "935360"
  },
  {
    "text": "let's see an example you can see only one",
    "start": "935360",
    "end": "940880"
  },
  {
    "text": "select query is injected uh with the second injection and",
    "start": "940880",
    "end": "947920"
  },
  {
    "text": "it will execute the second query on the remote uh external",
    "start": "947920",
    "end": "955920"
  },
  {
    "text": "database on the webdv server and it successfully call caused",
    "start": "955920",
    "end": "961199"
  },
  {
    "text": "the is crash let's analyze this vulnerability briefly",
    "start": "961199",
    "end": "969839"
  },
  {
    "start": "964000",
    "end": "1160000"
  },
  {
    "text": "you can see ex is from the esi plus 34 offset esi is a table mobile object",
    "start": "972480",
    "end": "981199"
  },
  {
    "text": "and a record address set the value at the offset 34 of table",
    "start": "981199",
    "end": "987600"
  },
  {
    "text": "mobile object and if this function return 1",
    "start": "987600",
    "end": "993360"
  },
  {
    "text": "the code will go to the branch of accessing the invalid memory and cause crash",
    "start": "993360",
    "end": "1000560"
  },
  {
    "text": "please keep it in mind we will introduce it later comparing the",
    "start": "1000560",
    "end": "1007360"
  },
  {
    "text": "memory dump of table mode object mover object before and after you can see",
    "start": "1007360",
    "end": "1013199"
  },
  {
    "text": "record address function will",
    "start": "1013199",
    "end": "1018720"
  },
  {
    "text": "set an invalid value at the offset 3 four",
    "start": "1018720",
    "end": "1024959"
  },
  {
    "text": "it's uh you can see here it is",
    "start": "1024959",
    "end": "1030160"
  },
  {
    "text": "an end address of a hip right",
    "start": "1030160",
    "end": "1034319"
  },
  {
    "text": "so record address is responsible to parse record information from the",
    "start": "1037280",
    "end": "1043199"
  },
  {
    "text": "database you can see",
    "start": "1043199",
    "end": "1049519"
  },
  {
    "text": "it is the record information from the database and",
    "start": "1051600",
    "end": "1057120"
  },
  {
    "text": "this field will be parsed to calculate the length",
    "start": "1057120",
    "end": "1064400"
  },
  {
    "text": "but it did not check the equal condition right",
    "start": "1064400",
    "end": "1071200"
  },
  {
    "text": "since the lens is equal a0 after",
    "start": "1071200",
    "end": "1077280"
  },
  {
    "text": "the calculation it did not check so the code will go to here to set the invalid",
    "start": "1077280",
    "end": "1083039"
  },
  {
    "text": "value of the uh 3 4 offset",
    "start": "1083039",
    "end": "1091280"
  },
  {
    "text": "this is not the worst case you can see here 808 4800 will make the",
    "start": "1091440",
    "end": "1099760"
  },
  {
    "text": "this function return one and call the code will go to the",
    "start": "1099760",
    "end": "1106240"
  },
  {
    "text": "invalid memory access code branch and calls crash if",
    "start": "1106240",
    "end": "1112559"
  },
  {
    "text": "the word value is say 0 0 and it will make the function return 3",
    "start": "1112559",
    "end": "1118799"
  },
  {
    "text": "and the code will cause that herald and then no",
    "start": "1118799",
    "end": "1125840"
  },
  {
    "text": "crash happens so you can see only one byte change",
    "start": "1125840",
    "end": "1133039"
  },
  {
    "text": "can cause is crash if c8",
    "start": "1133039",
    "end": "1138080"
  },
  {
    "text": "in original file there's no crash and there's if if it is",
    "start": "1138080",
    "end": "1146320"
  },
  {
    "text": "a 4 8 byte it will cause crash this is the first time you see the power",
    "start": "1146320",
    "end": "1154000"
  },
  {
    "text": "of the database file mutations regarding to the select query nothing special",
    "start": "1154000",
    "end": "1161280"
  },
  {
    "start": "1160000",
    "end": "1207000"
  },
  {
    "text": "so let's see the demo firstly it's a web server address",
    "start": "1161280",
    "end": "1167280"
  },
  {
    "text": "and it's is process we use windy back to attach the is",
    "start": "1167280",
    "end": "1174160"
  },
  {
    "text": "process and then",
    "start": "1174160",
    "end": "1179760"
  },
  {
    "text": "execute this web request",
    "start": "1179760",
    "end": "1186559"
  },
  {
    "text": "and then we can see this is a external database file on the remote web",
    "start": "1186960",
    "end": "1192320"
  },
  {
    "text": "dv server and we execute the query",
    "start": "1192320",
    "end": "1198559"
  },
  {
    "text": "in our browser and okay is crashed",
    "start": "1198559",
    "end": "1205720"
  },
  {
    "start": "1207000",
    "end": "1281000"
  },
  {
    "text": "scenario 2 is and the second server in this scenario",
    "start": "1208240",
    "end": "1214240"
  },
  {
    "text": "there are two cases 32 bit and 6 4 bit in 32 bit",
    "start": "1214240",
    "end": "1222000"
  },
  {
    "text": "second server all jet components are vulnerable in 6 4 bit second server only ac core",
    "start": "1222000",
    "end": "1230640"
  },
  {
    "text": "means the jet 12.0 is a vulnerable",
    "start": "1231039",
    "end": "1237919"
  },
  {
    "text": "in second server or secure queries as a party no restriction",
    "start": "1238080",
    "end": "1243840"
  },
  {
    "text": "about the second query and if the ad hoc is turned on by default",
    "start": "1243840",
    "end": "1253279"
  },
  {
    "text": "if the ad hoc turn on and you don't need any database privilege in the circuit",
    "start": "1253600",
    "end": "1261360"
  },
  {
    "text": "injection public is good enough also you only need one single web",
    "start": "1261360",
    "end": "1266960"
  },
  {
    "text": "request to cause circuit server the u.s",
    "start": "1266960",
    "end": "1272400"
  },
  {
    "text": "infillic or rce with the same privilege of the",
    "start": "1272400",
    "end": "1277840"
  },
  {
    "text": "second server process here is an example you can see we",
    "start": "1278799",
    "end": "1284720"
  },
  {
    "start": "1281000",
    "end": "1313000"
  },
  {
    "text": "injected once query update and we use open data",
    "start": "1284720",
    "end": "1290320"
  },
  {
    "text": "source to let sega server use ms jet",
    "start": "1290320",
    "end": "1295400"
  },
  {
    "text": "12.0 to execute this query on the remote",
    "start": "1295400",
    "end": "1301760"
  },
  {
    "text": "database file on the webdv server and successfully cause",
    "start": "1301760",
    "end": "1308880"
  },
  {
    "text": "the second server process crash",
    "start": "1309039",
    "end": "1314320"
  },
  {
    "start": "1313000",
    "end": "1361000"
  },
  {
    "text": "some information of the this vulnerability you can see edi is an",
    "start": "1316400",
    "end": "1323200"
  },
  {
    "text": "invalid value and it is um",
    "start": "1323200",
    "end": "1328320"
  },
  {
    "text": "it is from this object comparing before after we see",
    "start": "1329840",
    "end": "1335200"
  },
  {
    "text": "the before something happened the",
    "start": "1335200",
    "end": "1340480"
  },
  {
    "text": "this value with the yellow color is valid",
    "start": "1340480",
    "end": "1345679"
  },
  {
    "text": "but something happens this value is overflowed and we can see",
    "start": "1345679",
    "end": "1352960"
  },
  {
    "text": "also 0 become 1b 1b there must something",
    "start": "1352960",
    "end": "1359120"
  },
  {
    "text": "wrong happens let's see further this small piece of code is",
    "start": "1359120",
    "end": "1367280"
  },
  {
    "text": "responsible to update some values in the memory",
    "start": "1367280",
    "end": "1373600"
  },
  {
    "text": "in a loop in each loop it will add the memory value",
    "start": "1373600",
    "end": "1380000"
  },
  {
    "text": "with a fixed value 1b in each",
    "start": "1380000",
    "end": "1385600"
  },
  {
    "text": "the loop count a3e so let's investigate",
    "start": "1385600",
    "end": "1392240"
  },
  {
    "text": "what the correct loop cut you can see here the value the values with yellow color",
    "start": "1392240",
    "end": "1400400"
  },
  {
    "text": "after our investigation it is the column value from the",
    "start": "1400400",
    "end": "1406240"
  },
  {
    "text": "database file and it should be updated but",
    "start": "1406240",
    "end": "1412400"
  },
  {
    "text": "the values with red color there are some",
    "start": "1412400",
    "end": "1417679"
  },
  {
    "text": "memory pointers over there it should not be updated so the cracked",
    "start": "1417679",
    "end": "1425679"
  },
  {
    "text": "lubecon should be the hex 2 8 but actually",
    "start": "1425679",
    "end": "1431520"
  },
  {
    "text": "loop count is 3e so there's auto boundary right happen",
    "start": "1431520",
    "end": "1437600"
  },
  {
    "text": "where the loopcon 3e from is it controllable is there any check let's see",
    "start": "1437600",
    "end": "1445679"
  },
  {
    "text": "no check at all you can see the loopcom 3e",
    "start": "1445679",
    "end": "1452640"
  },
  {
    "text": "is defined in the database file and it is read directly from to this",
    "start": "1452640",
    "end": "1460640"
  },
  {
    "text": "memory structure and the code read the loop country e",
    "start": "1460640",
    "end": "1466880"
  },
  {
    "text": "directly from this memory structure and do the loop",
    "start": "1466880",
    "end": "1473840"
  },
  {
    "text": "so if we set 3e with a bigger value then more content in the memory will be out",
    "start": "1474640",
    "end": "1480720"
  },
  {
    "text": "of boundary overflow so this is the second time you see the",
    "start": "1480720",
    "end": "1487919"
  },
  {
    "text": "power of mutations on the database file this case is more complicated comparing",
    "start": "1487919",
    "end": "1494080"
  },
  {
    "text": "the first one you need to do the mutations in the two positions",
    "start": "1494080",
    "end": "1499679"
  },
  {
    "text": "in the first position you need to set the valid column",
    "start": "1499679",
    "end": "1505760"
  },
  {
    "text": "information here in the second position you you need to set up",
    "start": "1505760",
    "end": "1512559"
  },
  {
    "text": "a value larger than 2 8 to make the overflow",
    "start": "1512559",
    "end": "1519120"
  },
  {
    "text": "regarding to the update nothing special about it",
    "start": "1519200",
    "end": "1524240"
  },
  {
    "text": "just update a second query let's see the demo",
    "start": "1524240",
    "end": "1531600"
  },
  {
    "text": "web server address uh second server process and we",
    "start": "1532960",
    "end": "1538960"
  },
  {
    "text": "use window back to attach the second server process and execute",
    "start": "1538960",
    "end": "1546720"
  },
  {
    "text": "the circuit queries with the circuit injection",
    "start": "1547600",
    "end": "1555559"
  },
  {
    "text": "okay we successfully caused the second server process crash",
    "start": "1566240",
    "end": "1573520"
  },
  {
    "start": "1578000",
    "end": "1665000"
  },
  {
    "text": "the scenario 3 is and a web show usually if you have a web shell you can execute",
    "start": "1581200",
    "end": "1589200"
  },
  {
    "text": "command with a command module in the web shell but but sometimes there are",
    "start": "1589200",
    "end": "1596159"
  },
  {
    "text": "mitigations and restrictions to prevent web shell command module",
    "start": "1596159",
    "end": "1603520"
  },
  {
    "text": "execution in this case native code",
    "start": "1603520",
    "end": "1608720"
  },
  {
    "text": "execution capability is important since it can bypass any",
    "start": "1608720",
    "end": "1614480"
  },
  {
    "text": "restriction or mitigation in the memory",
    "start": "1614480",
    "end": "1620960"
  },
  {
    "text": "so you can use jit vulnerabilities in the web shell to get the",
    "start": "1621039",
    "end": "1626799"
  },
  {
    "text": "native code execution capability in the web shell case all",
    "start": "1626799",
    "end": "1632400"
  },
  {
    "text": "uh jet components are vulnerable and",
    "start": "1632400",
    "end": "1638799"
  },
  {
    "text": "all second queries are supported no restriction",
    "start": "1638799",
    "end": "1643840"
  },
  {
    "text": "for the second query and you can use a database module in the",
    "start": "1643840",
    "end": "1650080"
  },
  {
    "text": "web shell to trigger here is uh an example you can see we set",
    "start": "1650080",
    "end": "1655520"
  },
  {
    "text": "provider and we set we set data source and execute those four segment queries",
    "start": "1655520",
    "end": "1663440"
  },
  {
    "text": "in the web shell one time and then successfully caused the is crash",
    "start": "1663440",
    "end": "1670640"
  },
  {
    "start": "1665000",
    "end": "1708000"
  },
  {
    "text": "pay attention the crash point there here is a core ex [Music]",
    "start": "1670640",
    "end": "1676320"
  },
  {
    "text": "very interesting right it's very close to",
    "start": "1676320",
    "end": "1681440"
  },
  {
    "text": "exploitation and we we can control the e x to uh",
    "start": "1681440",
    "end": "1688480"
  },
  {
    "text": "to to four one zero four and zero and",
    "start": "1688480",
    "end": "1694880"
  },
  {
    "text": "if we pull the hips free and and it will",
    "start": "1695840",
    "end": "1702399"
  },
  {
    "text": "execute um arbitrary code in the is",
    "start": "1702399",
    "end": "1708840"
  },
  {
    "text": "process some uh briefly analysis uh for the",
    "start": "1708840",
    "end": "1715039"
  },
  {
    "text": "vulnerability and you can see ex is from ecx ecs",
    "start": "1715039",
    "end": "1720240"
  },
  {
    "text": "ecx is the page description object and the zero offset",
    "start": "1720240",
    "end": "1725919"
  },
  {
    "text": "of this object is the v table",
    "start": "1725919",
    "end": "1732159"
  },
  {
    "text": "and after something happened you can see the wait table is overflowed by",
    "start": "1732159",
    "end": "1739200"
  },
  {
    "text": "a string this string is exactly same",
    "start": "1739200",
    "end": "1744640"
  },
  {
    "text": "with the screen in the update second query very interesting right",
    "start": "1744640",
    "end": "1751279"
  },
  {
    "start": "1750000",
    "end": "1784000"
  },
  {
    "text": "let's see what happened there's a memory copy over here",
    "start": "1751600",
    "end": "1758799"
  },
  {
    "text": "and eight you the size of source buffer",
    "start": "1758799",
    "end": "1766000"
  },
  {
    "text": "add the copy size you see",
    "start": "1766000",
    "end": "1770640"
  },
  {
    "text": "no check for this size no validation no",
    "start": "1771679",
    "end": "1776799"
  },
  {
    "text": "verification just copy directly it's a very classical vulnerability pattern",
    "start": "1776799",
    "end": "1785120"
  },
  {
    "start": "1784000",
    "end": "1830000"
  },
  {
    "text": "let's see more about the destination address and buffer",
    "start": "1785600",
    "end": "1790640"
  },
  {
    "text": "the destination buffer size is the one zero zero zero but the destination address is from the",
    "start": "1790640",
    "end": "1797039"
  },
  {
    "text": "offset bcc so there are only four three four bytes left but the copy size is",
    "start": "1797039",
    "end": "1803600"
  },
  {
    "text": "four for e from the source buffer so",
    "start": "1803600",
    "end": "1809039"
  },
  {
    "text": "there is overflow happened just right after the",
    "start": "1809039",
    "end": "1814080"
  },
  {
    "text": "destination buffer this is a page description object and we",
    "start": "1814080",
    "end": "1819279"
  },
  {
    "text": "can control any value and just exactly override",
    "start": "1819279",
    "end": "1827440"
  },
  {
    "text": "the page description object so this is the first time you see the",
    "start": "1827440",
    "end": "1835120"
  },
  {
    "start": "1830000",
    "end": "1878000"
  },
  {
    "text": "power of mutations on second queries you can see",
    "start": "1835120",
    "end": "1840559"
  },
  {
    "text": "only one update can cause overflow but those three",
    "start": "1840559",
    "end": "1845600"
  },
  {
    "text": "circuit queries make a successful hip layout to make the",
    "start": "1845600",
    "end": "1852080"
  },
  {
    "text": "page description object right just right after the destination buffer",
    "start": "1852080",
    "end": "1858559"
  },
  {
    "text": "if you want also do a successful hip growing i suggest you",
    "start": "1858559",
    "end": "1866720"
  },
  {
    "text": "execute multiple server queries in one database connection and",
    "start": "1866720",
    "end": "1872080"
  },
  {
    "text": "also try cache is necessary in the web show",
    "start": "1872080",
    "end": "1878840"
  },
  {
    "start": "1878000",
    "end": "1928000"
  },
  {
    "text": "let's see the demo also the target address",
    "start": "1879440",
    "end": "1885200"
  },
  {
    "text": "and the is process same use windy back to attach the is process",
    "start": "1885200",
    "end": "1893679"
  },
  {
    "text": "and execute those four second queries",
    "start": "1893679",
    "end": "1899600"
  },
  {
    "text": "yeah the external database on the web dv server",
    "start": "1905279",
    "end": "1910320"
  },
  {
    "text": "and execute",
    "start": "1910320",
    "end": "1913440"
  },
  {
    "text": "okay is crash at the core ex very interesting",
    "start": "1917679",
    "end": "1925760"
  },
  {
    "start": "1928000",
    "end": "1990000"
  },
  {
    "text": "a short summary for vulnerabilities in three attack scenarios they are very old",
    "start": "1929360",
    "end": "1934799"
  },
  {
    "text": "over 20 years old it worked it works from windows xp to windows 10",
    "start": "1934799",
    "end": "1943120"
  },
  {
    "text": "they are not hard to exploit since there are no or weak mitigations",
    "start": "1943200",
    "end": "1949600"
  },
  {
    "text": "for example no cfg at all in msg at 4.0 components",
    "start": "1949600",
    "end": "1955519"
  },
  {
    "text": "the damage is severe since a successful exploitation can execute any code",
    "start": "1955519",
    "end": "1962799"
  },
  {
    "text": "in ios and the sql server process since is and the second server",
    "start": "1962799",
    "end": "1968720"
  },
  {
    "text": "has sc impersonate privilege capability enabled by default so it's easy to use",
    "start": "1968720",
    "end": "1976159"
  },
  {
    "text": "token kidnapping technique to escalate the privilege to system",
    "start": "1976159",
    "end": "1982080"
  },
  {
    "text": "so it is possible from a second injection to remote system",
    "start": "1982080",
    "end": "1991320"
  },
  {
    "start": "1990000",
    "end": "2063000"
  },
  {
    "text": "let's summarize the whole topic webdv is it a feature of vulnerability",
    "start": "1992480",
    "end": "1998080"
  },
  {
    "text": "it's always controversial actually web dv opens a new world for",
    "start": "1998080",
    "end": "2003760"
  },
  {
    "text": "attackers to remotely attack is in the second server",
    "start": "2003760",
    "end": "2008799"
  },
  {
    "text": "we reported a lot of jet vulnerabilities to attack rs",
    "start": "2008799",
    "end": "2015919"
  },
  {
    "text": "and the second server to microsoft microsoft will patch the vulnerability one by one or patch",
    "start": "2015919",
    "end": "2023039"
  },
  {
    "text": "this web dv feature vlc second backwards compatibility",
    "start": "2023039",
    "end": "2030080"
  },
  {
    "text": "it is very friendly to users but it always brings",
    "start": "2030080",
    "end": "2035440"
  },
  {
    "text": "security issues together third defense and mitigation especially",
    "start": "2035440",
    "end": "2042559"
  },
  {
    "text": "for systems which are no longer supported by microsoft i would say pay more attention to web tv",
    "start": "2042559",
    "end": "2050158"
  },
  {
    "text": "disable outbound web db traffic on your server if you don't need it",
    "start": "2050159",
    "end": "2056320"
  },
  {
    "text": "next time when you see a second injection think more about it",
    "start": "2056320",
    "end": "2063040"
  },
  {
    "start": "2063000",
    "end": "2179000"
  },
  {
    "text": "there's a one more thing uh we want to discuss the security",
    "start": "2063040",
    "end": "2068800"
  },
  {
    "text": "boundary when you report a vulnerability to microsoft they will",
    "start": "2068800",
    "end": "2074079"
  },
  {
    "text": "ask you how and what secret boundary it breaks",
    "start": "2074079",
    "end": "2079599"
  },
  {
    "text": "we reported a lot of jet database vulnerabilities to microsoft",
    "start": "2079599",
    "end": "2085839"
  },
  {
    "text": "in the past several months sometimes microsoft reply",
    "start": "2085839",
    "end": "2091040"
  },
  {
    "text": "not break the security boundary either close the case or keep pending the cases",
    "start": "2091040",
    "end": "2099359"
  },
  {
    "text": "what's the essence of jet vulnerability think about it from our perspective",
    "start": "2099359",
    "end": "2104720"
  },
  {
    "text": "it makes security execution eco native code execution it is a very",
    "start": "2104720",
    "end": "2112160"
  },
  {
    "text": "powerful capability since there are a lot of systems components using jet and allow circuit",
    "start": "2112160",
    "end": "2119280"
  },
  {
    "text": "query execution in today's presentation we combined",
    "start": "2119280",
    "end": "2124720"
  },
  {
    "text": "circuit injection with webdv bringing circuit query execution capability to",
    "start": "2124720",
    "end": "2130240"
  },
  {
    "text": "ios and the sql server it means we can get the native code execution capability",
    "start": "2130240",
    "end": "2135680"
  },
  {
    "text": "in ios and the server server with jet vulnerabilities",
    "start": "2135680",
    "end": "2141280"
  },
  {
    "text": "this is a remote attack surface the security boundary is from second",
    "start": "2141280",
    "end": "2146320"
  },
  {
    "text": "injection to remote system how about the local",
    "start": "2146320",
    "end": "2151839"
  },
  {
    "text": "attack surface think about it we leave a hint here",
    "start": "2151839",
    "end": "2157200"
  },
  {
    "text": "it may become a part of our next blackhead talk",
    "start": "2157200",
    "end": "2162240"
  },
  {
    "text": "before the end we want to thank our colleague jubin",
    "start": "2162240",
    "end": "2168240"
  },
  {
    "text": "that's the end of our presentation",
    "start": "2168560",
    "end": "2173760"
  },
  {
    "text": "thanks for listening",
    "start": "2173760",
    "end": "2177240"
  }
]