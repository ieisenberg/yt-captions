[
  {
    "text": "hello everyone yeah Welcome to our talk so today we'll talk about our paper",
    "start": "2560",
    "end": "7600"
  },
  {
    "text": "faults in our bus so this talk is regarding fault attacks more specifically bus fault attack where we",
    "start": "7600",
    "end": "13639"
  },
  {
    "text": "use this bus fault attack to break the security of armed trust zones so before we start there's a very",
    "start": "13639",
    "end": "19760"
  },
  {
    "text": "brief introduction of ourselves so I am Anan his nsh so we are pH students from the Indian Institute of Technology kakur",
    "start": "19760",
    "end": "26679"
  },
  {
    "text": "India and this work was done in collaboration with professor de mukad from I kakur so here is a brief outline",
    "start": "26679",
    "end": "33320"
  },
  {
    "text": "of our talks so first we'll start with uh a brief history of faults",
    "start": "33320",
    "end": "38680"
  },
  {
    "text": "and literature survey on Falls then we talk about the traditional fault points on EMB systems and S so's and then we uh",
    "start": "38680",
    "end": "46559"
  },
  {
    "text": "present our uh uh proposal there a uh new fault point on S so's then we",
    "start": "46559",
    "end": "52840"
  },
  {
    "text": "discuss about Opti and uh why uh it is relevant with respect to our talk and",
    "start": "52840",
    "end": "58800"
  },
  {
    "text": "then finally we talk about our end to end attack where we demonstrate a complete hijack of the system through",
    "start": "58800",
    "end": "65880"
  },
  {
    "text": "fault attacks finally we'll end our talk with the impact of our research work and also the takeaway from",
    "start": "65880",
    "end": "72960"
  },
  {
    "text": "this so what are faults faults are basically uh system errors where the",
    "start": "72960",
    "end": "78320"
  },
  {
    "text": "adversary actively perturbs either the data or the control flow of the system in order to gain access or information",
    "start": "78320",
    "end": "85640"
  },
  {
    "text": "uh about uh the through the faulty responses so uh why are faults so",
    "start": "85640",
    "end": "91520"
  },
  {
    "text": "catastrophic you know so actually in in digital systems faults do occur although",
    "start": "91520",
    "end": "96720"
  },
  {
    "text": "they are rare and mostly they occur through accidents but they if if they",
    "start": "96720",
    "end": "102520"
  },
  {
    "text": "can be controlled and if they are uh induced uh purposefully then this faults",
    "start": "102520",
    "end": "107640"
  },
  {
    "text": "can cause errors and these errors can be exploited to hijack the system or leak",
    "start": "107640",
    "end": "112920"
  },
  {
    "text": "uh secret information from the system now fault also along with that fault attack some sometimes if combined with",
    "start": "112920",
    "end": "119920"
  },
  {
    "text": "other kinds of attack Primitives like for example side Channel Side Channel information as we'll uh show in in this",
    "start": "119920",
    "end": "126840"
  },
  {
    "text": "U talk that can lead to much stronger attack so the uh the literature on fault",
    "start": "126840",
    "end": "133239"
  },
  {
    "text": "attack is pretty uh uh vast and uh for the last around 25 years there have been",
    "start": "133239",
    "end": "139080"
  },
  {
    "text": "lot of research on fault fault attacks but broadly classifying fault attacks can be actually uh classified into two",
    "start": "139080",
    "end": "145640"
  },
  {
    "text": "subclasses where the fault injection techniques actually concerns it's with on the actual Hardware the way you want",
    "start": "145640",
    "end": "152120"
  },
  {
    "text": "to induce the faults in the hardware and fault exploitation or the fault analysis",
    "start": "152120",
    "end": "157760"
  },
  {
    "text": "which actually after it comes after you actually injected your fault it actually depends on the type of uh uh type of uh",
    "start": "157760",
    "end": "165280"
  },
  {
    "text": "Target that you are trying to uh attack maybe it this could be RSA or AES but",
    "start": "165280",
    "end": "170360"
  },
  {
    "text": "then the analysis technique will depend on the type of Target in this talk we'll mostly focus on fault injection",
    "start": "170360",
    "end": "177680"
  },
  {
    "text": "technique so how do we all the attackers actually do the fults so we gener there",
    "start": "177680",
    "end": "183640"
  },
  {
    "text": "are multiple ways of inducing Falls but in this talk we'll mainly focus on electromagnetic fault injections so we",
    "start": "183640",
    "end": "189360"
  },
  {
    "text": "use the special kind of probes that uh when a current flows along this probe it",
    "start": "189360",
    "end": "196400"
  },
  {
    "text": "creates a magnetic field around itself and if if we uh go back to our elementary physics class from the maxw",
    "start": "196400",
    "end": "202599"
  },
  {
    "text": "left hand rule if there is a magnetic field going on it creates an induced",
    "start": "202599",
    "end": "208599"
  },
  {
    "text": "current right and that induced current if you place this probe uh next to uh",
    "start": "208599",
    "end": "215040"
  },
  {
    "text": "next to an S so or an embered system where the uh some computation is going on it actually uh interferes with the",
    "start": "215040",
    "end": "222920"
  },
  {
    "text": "circuit or the current flowing through the circuit that and that can actually create",
    "start": "222920",
    "end": "228040"
  },
  {
    "text": "faults for example uh if you see that uh for some computation if if there is no",
    "start": "228040",
    "end": "234040"
  },
  {
    "text": "electromagnetic pulse it it creates a non-faulty execution but on uh introduction of this electromagnetic",
    "start": "234040",
    "end": "240439"
  },
  {
    "text": "pulse it might behave Rand it might behave weirdly and it might create bit flips in",
    "start": "240439",
    "end": "246280"
  },
  {
    "text": "it so there are different types of fault models depending on how you want want to",
    "start": "246280",
    "end": "252000"
  },
  {
    "text": "look at it for example if if you look at from the grity that could be single bit fall there could be multiple fi bit",
    "start": "252000",
    "end": "257079"
  },
  {
    "text": "Falls or there could be multiple buys or even the world itself but in the literation also in the fall Community it",
    "start": "257079",
    "end": "264759"
  },
  {
    "text": "was considered that for the entire register 64-bit register it's difficult",
    "start": "264759",
    "end": "270280"
  },
  {
    "text": "to actually have the faults in the to control the entire 64bit registor but in this work we have achieved that entire",
    "start": "270280",
    "end": "276800"
  },
  {
    "text": "64-bit uh register can be actually faulted and then it also depends on how",
    "start": "276800",
    "end": "283440"
  },
  {
    "text": "uh the what type of fault you are inducing uh it could be stuck at zero where a particular bit is either stuck",
    "start": "283440",
    "end": "288720"
  },
  {
    "text": "at zero stuck at one it could be uh some uh random uh bit flips zero goes to one",
    "start": "288720",
    "end": "296320"
  },
  {
    "text": "or or it could be totally random and then it also depends on how that is is able to control it it could be precise",
    "start": "296320",
    "end": "302520"
  },
  {
    "text": "for example if you are using a laser fault laser injection to induce a fault it uh it is more precise and if you're",
    "start": "302520",
    "end": "309400"
  },
  {
    "text": "using something like em probe em em radiation that that does not give that",
    "start": "309400",
    "end": "314720"
  },
  {
    "text": "much precise control over it and then it also depends on the duration of the fault whether the fault stays uh uh",
    "start": "314720",
    "end": "321039"
  },
  {
    "text": "whether the fault refreshes for every session or actually it stays for the entire uh lifetime of of of the",
    "start": "321039",
    "end": "328160"
  },
  {
    "text": "device so what are the traditional fault points uh that we have in literature and",
    "start": "328160",
    "end": "334400"
  },
  {
    "text": "that is commonly considered in the community so if we actually look at s so's and uh look think about the the all",
    "start": "334400",
    "end": "340600"
  },
  {
    "text": "the literature that has been uh available to us there are mainly two",
    "start": "340600",
    "end": "345720"
  },
  {
    "text": "fault attack points one is the processor itself and the other one is the Ram from the processor perspective uh it uh you",
    "start": "345720",
    "end": "352840"
  },
  {
    "text": "can induce faults through external interfaces for example uh uh you can",
    "start": "352840",
    "end": "358400"
  },
  {
    "text": "change the voltage you you can introduce clock glitches which are mostly through the hardware and also from the software",
    "start": "358400",
    "end": "363840"
  },
  {
    "text": "perspective you can actually change the dynamic frequency voltage scaling or the dvfs where you can change the frequency",
    "start": "363840",
    "end": "369240"
  },
  {
    "text": "and the voltage that will lead to race condition inside uh the processor which might lead to uh fals and when you look",
    "start": "369240",
    "end": "376160"
  },
  {
    "text": "at Rams there is a row Hammer where you access the memory very fast that can",
    "start": "376160",
    "end": "381840"
  },
  {
    "text": "induce uh bit flips because of losing charges and then also there are em and uh laser bit Falls which can actually uh",
    "start": "381840",
    "end": "390199"
  },
  {
    "text": "induced flips in the memory however if we look from theoc",
    "start": "390199",
    "end": "395880"
  },
  {
    "text": "perspective you cannot have external interfaces in anoc and also the dvfs",
    "start": "395880",
    "end": "401160"
  },
  {
    "text": "itself is a privilege and if you go into the ram the ram itself uh sometimes protected through multiple checks May",
    "start": "401160",
    "end": "407960"
  },
  {
    "text": "some Er correcting checks and also uh there are uh casings on on top of it which actually requires invasive",
    "start": "407960",
    "end": "414080"
  },
  {
    "text": "depackaging and also sometimes uh uh that depackaging process might actually destroy uh the chip itself so we asked",
    "start": "414080",
    "end": "422039"
  },
  {
    "text": "this question are there any architectural aspects which can be used for fults where there are no known",
    "start": "422039",
    "end": "428599"
  },
  {
    "text": "counter measures already uh employed to answer this question we say yes and we find out a new fault point on",
    "start": "428599",
    "end": "436319"
  },
  {
    "text": "s's which is a system bus so if we look at a very commercially available uh s so",
    "start": "436319",
    "end": "442479"
  },
  {
    "text": "which is Raspberry Pi model 3 so we can see that the system bus is itself is uh",
    "start": "442479",
    "end": "448720"
  },
  {
    "text": "totally uncased and it's exposed basically it is printed in in a PCB and uh and you you can totally observe it",
    "start": "448720",
    "end": "457479"
  },
  {
    "text": "from top of the PCB and why it's important because it is involved in all load and store kinds of instruction",
    "start": "457479",
    "end": "464000"
  },
  {
    "text": "where the both the memory and both the memory address and also the data flows between the processor and the memory all",
    "start": "464000",
    "end": "470840"
  },
  {
    "text": "the time so for so the this is a real life view of our setup where the probe is",
    "start": "470840",
    "end": "479520"
  },
  {
    "text": "attached to the next to the Raspberry Pi board so now let's let us take an example of a load instruction where you",
    "start": "479520",
    "end": "485720"
  },
  {
    "text": "we are loading something from the memory address into the destination register so how does it work basically so first the",
    "start": "485720",
    "end": "491840"
  },
  {
    "text": "processor will send the memory address to the to the dam to the system bu and then the D sends the data in that",
    "start": "491840",
    "end": "499120"
  },
  {
    "text": "particular place into the uh processor itself however if you induce a fault in the system bus at that point so the",
    "start": "499120",
    "end": "506199"
  },
  {
    "text": "original memory original data that is in the memory that uh has got no effect however the data is faulted in transit",
    "start": "506199",
    "end": "513919"
  },
  {
    "text": "so basically you actually induce a fault but there is no trace of the fault but the computation with that faulty data",
    "start": "513919",
    "end": "520680"
  },
  {
    "text": "that itself is affected so uh in this case since we are",
    "start": "520680",
    "end": "527240"
  },
  {
    "text": "uh targeting the system bus there could be two types of faults one is on the data bus where you actually it results",
    "start": "527240",
    "end": "532760"
  },
  {
    "text": "in incorrect data and then there are address bus faults which actually lead to se fall because uh I me because of uh",
    "start": "532760",
    "end": "540279"
  },
  {
    "text": "bit flip changes you uh access some I mean maybe non-existent or maybe",
    "start": "540279",
    "end": "546800"
  },
  {
    "text": "unprivileged locations memory and you get set FS however the important thing to note here is that for 35% of the time",
    "start": "546800",
    "end": "555560"
  },
  {
    "text": "we actually get all zeros in the register for the data fault this is something which was uh not reported in",
    "start": "555560",
    "end": "561360"
  },
  {
    "text": "literature earlier and this was also considered that it is not possible to do it so we call this as a register",
    "start": "561360",
    "end": "567560"
  },
  {
    "text": "sweeping fault model where it cleans the entire value for the load register now the point is it it seems",
    "start": "567560",
    "end": "574240"
  },
  {
    "text": "like a very I mean uh Integrity issue right I mean the the data is not there",
    "start": "574240",
    "end": "579399"
  },
  {
    "text": "but how does that integ Integrity issue lead to a security uh event so this we",
    "start": "579399",
    "end": "584720"
  },
  {
    "text": "show in this case that the register sweeping event actually can lead to an endtoend attack on an open portable",
    "start": "584720",
    "end": "591399"
  },
  {
    "text": "trusted execution environment which in short is called Opti on a arm uh trust",
    "start": "591399",
    "end": "597160"
  },
  {
    "text": "zone now to talk about opt and also move you forward to the the rest of the",
    "start": "597160",
    "end": "602560"
  },
  {
    "text": "presentation and the details of the attack so Nish will take it over from",
    "start": "602560",
    "end": "608079"
  },
  {
    "text": "you um thanks Arin man so uh so so far",
    "start": "608079",
    "end": "613399"
  },
  {
    "text": "we have established that uh apart from processors and memory where is most of",
    "start": "613399",
    "end": "618760"
  },
  {
    "text": "the previous fault attacks focus on you can still find a new architectural",
    "start": "618760",
    "end": "623800"
  },
  {
    "text": "aspect on embedded systems which is the system bus Which is also vulnerable to external def fault attacks and let's",
    "start": "623800",
    "end": "631720"
  },
  {
    "text": "talk about uh one of the most uh interesting implications of the same so op so it's a trusted execution",
    "start": "631720",
    "end": "639120"
  },
  {
    "text": "environment for embedded systems uh that closely follows the global platform API",
    "start": "639120",
    "end": "645279"
  },
  {
    "text": "spec and is being maintained by trust and firmware with a lot of stakeholders",
    "start": "645279",
    "end": "650880"
  },
  {
    "text": "including Google arm lenaro nxp and the rest and just like any trusted execution",
    "start": "650880",
    "end": "657440"
  },
  {
    "text": "environment it splits uh the applications you have into two",
    "start": "657440",
    "end": "662720"
  },
  {
    "text": "worlds the the normal world where most of the applications the kernel recites",
    "start": "662720",
    "end": "667800"
  },
  {
    "text": "and the secure world where the most security critical applications for example uh cryptography uh apis and the",
    "start": "667800",
    "end": "675120"
  },
  {
    "text": "rest would decide so uh the te uh or The Trusted",
    "start": "675120",
    "end": "680480"
  },
  {
    "text": "execution environment would be would have certain features like the memory",
    "start": "680480",
    "end": "685519"
  },
  {
    "text": "storage would be encrypted the peripherals would be securely isolated the Contex switch would be secure just",
    "start": "685519",
    "end": "691760"
  },
  {
    "text": "to make sure that even if the re or the rich execution environment which is the",
    "start": "691760",
    "end": "697120"
  },
  {
    "text": "one to the left to your right uh marked in red even if the re is compromised by",
    "start": "697120",
    "end": "704560"
  },
  {
    "text": "some adversary uh by which I mean even if the adversary gains complete control over the re kernel anything that runs in",
    "start": "704560",
    "end": "712160"
  },
  {
    "text": "the te is still isolated and secure so in some sense the entire idea of trusted",
    "start": "712160",
    "end": "719040"
  },
  {
    "text": "EX execution environments is to give you Security even if the kernel on the re is",
    "start": "719040",
    "end": "725079"
  },
  {
    "text": "compromised and I must mention that anything that runs inside the te uh",
    "start": "725079",
    "end": "730920"
  },
  {
    "text": "is is coded and loaded into the te by the original equipment manufacturer and",
    "start": "730920",
    "end": "738240"
  },
  {
    "text": "there are Integrity checks for the same which make sure that you and I cannot run our own code into the te the te uh",
    "start": "738240",
    "end": "745360"
  },
  {
    "text": "will expose its own apis and the most weaken do is write applications in the",
    "start": "745360",
    "end": "750680"
  },
  {
    "text": "re which will which will interface with those apis and uh perform whatever tasks",
    "start": "750680",
    "end": "756199"
  },
  {
    "text": "are needed so from an adversarial perspective if we are able to load our",
    "start": "756199",
    "end": "762240"
  },
  {
    "text": "own code into the trusted execution environment that amounts in some sense to code execution in the te and breaks",
    "start": "762240",
    "end": "769639"
  },
  {
    "text": "the security guarantees that come along uh uh from the uh trust Zone that we are",
    "start": "769639",
    "end": "776000"
  },
  {
    "text": "working with so let's cont cont ual these goals a little bit more we want the entire",
    "start": "776000",
    "end": "782639"
  },
  {
    "text": "attack to be online which means that we do not want the device to be offline at any point in time the reason being that",
    "start": "782639",
    "end": "789320"
  },
  {
    "text": "in modern um iot networks and the sorts there are SCA systems and other uh",
    "start": "789320",
    "end": "794800"
  },
  {
    "text": "mechanisms in place which make sure the availability of the devices the embedded systems in place so this has certain",
    "start": "794800",
    "end": "802920"
  },
  {
    "text": "implications like for instance we cannot attack the secure boot feature because",
    "start": "802920",
    "end": "808199"
  },
  {
    "text": "doing so would take the device offline and it's a bit harder to do uh in the sense",
    "start": "808199",
    "end": "814079"
  },
  {
    "text": "that prior uh Works have actually uh targeted secure Boot and now uh it's",
    "start": "814079",
    "end": "819519"
  },
  {
    "text": "been like patched against these kind of attacks so instead of going for secure boot we go for the loading of trusted",
    "start": "819519",
    "end": "826639"
  },
  {
    "text": "applications in the te and the second is so when we talk about fault attacks we need to make",
    "start": "826639",
    "end": "834240"
  },
  {
    "text": "certain changes in the physical environment of the embedded device at a certain point in ex execution so we need",
    "start": "834240",
    "end": "840160"
  },
  {
    "text": "to know when that execution is uh coming up so usually what people do is they use some code based triggers that inform",
    "start": "840160",
    "end": "847959"
  },
  {
    "text": "when to inject The Fault in our case this cannot be done because uh the",
    "start": "847959",
    "end": "854360"
  },
  {
    "text": "vulnerabil or the vulnerable position that we want to inject the fault at is deep inside the trusted execution",
    "start": "854360",
    "end": "861000"
  },
  {
    "text": "environment and we cannot inject our own code to trigger the fault injection at that point so we come up with a combined",
    "start": "861000",
    "end": "868040"
  },
  {
    "text": "adversary that I'll talk about in a bit that combines certain passive information with active uh adversary and",
    "start": "868040",
    "end": "875279"
  },
  {
    "text": "then construct a completely non-invasive way of in injecting fults and yeah as I",
    "start": "875279",
    "end": "882040"
  },
  {
    "text": "mentioned the attack must be non-invasive which means that we should not be doing any irreversible damage to",
    "start": "882040",
    "end": "888120"
  },
  {
    "text": "the device like depackaging uh the upper layers of over the processor uh",
    "start": "888120",
    "end": "894279"
  },
  {
    "text": "that uh mainly to evade detection later on and also to uh make sure that the",
    "start": "894279",
    "end": "900000"
  },
  {
    "text": "device is not damaged without uh like Beyond repair and this means that trivial attacks like skipping uh",
    "start": "900000",
    "end": "907399"
  },
  {
    "text": "instructions will not work in our case so that's where the the new fault model",
    "start": "907399",
    "end": "912880"
  },
  {
    "text": "uh which we just spoke about a while back where you can zero out the entire uh value of a register while the system",
    "start": "912880",
    "end": "920240"
  },
  {
    "text": "bus is operational that's where we can use that so this is the abstraction of the U",
    "start": "920240",
    "end": "928240"
  },
  {
    "text": "trusted EX ution environment we are dealing with so execution begins on the",
    "start": "928240",
    "end": "934199"
  },
  {
    "text": "uh exception level zero in the normal world that would be the upper right corner and through a series of system",
    "start": "934199",
    "end": "941120"
  },
  {
    "text": "calls we go down to the very bottom which the secure monitor layer that's the highest privileged layer which",
    "start": "941120",
    "end": "948079"
  },
  {
    "text": "performs a secure context switch to the left side and then through a series of calls we go back again up on the upper",
    "start": "948079",
    "end": "955480"
  },
  {
    "text": "left corner which is where the trusted applications are loaded now in case these trusted applications require some",
    "start": "955480",
    "end": "961959"
  },
  {
    "text": "more uh help from the exception level one on the left for instance some crypto",
    "start": "961959",
    "end": "967279"
  },
  {
    "text": "Library invocation of the sort that's uh denoted by a key here I believe so it",
    "start": "967279",
    "end": "972319"
  },
  {
    "text": "can again uh use those API endpoints to get its operations done and once uh the",
    "start": "972319",
    "end": "977800"
  },
  {
    "text": "tasks uh that the TA needs to do they are over we can follow the same path in reverse and send back data to the normal",
    "start": "977800",
    "end": "985199"
  },
  {
    "text": "World site so that's how the communication between the two worlds work",
    "start": "985199",
    "end": "990880"
  },
  {
    "text": "and this is where we are focusing this is where the attack uh shall be mounted so when a TA is loaded as I mentioned",
    "start": "990880",
    "end": "998120"
  },
  {
    "text": "only the original equipment manufacturer can run its code in The Trusted execution environment so as an Integrity",
    "start": "998120",
    "end": "1005880"
  },
  {
    "text": "check uh is done which is just a signature verification if the binary uh",
    "start": "1005880",
    "end": "1011600"
  },
  {
    "text": "succeeds the verification in that case uh zero exit code is returned otherwise",
    "start": "1011600",
    "end": "1017959"
  },
  {
    "text": "some uh error is raised and uh execution is Abed so let's say if we want to uh like",
    "start": "1017959",
    "end": "1025600"
  },
  {
    "text": "load our own trusted application into the trusted execution environment in that case we we need to somehow do",
    "start": "1025600",
    "end": "1033079"
  },
  {
    "text": "something with this uh signature verification and just like we mentioned",
    "start": "1033079",
    "end": "1038640"
  },
  {
    "text": "some of the other fault attacks like which could help us by skipping this uh",
    "start": "1038640",
    "end": "1044038"
  },
  {
    "text": "verification or uh like polluting the results of the execution mainly are not",
    "start": "1044039",
    "end": "1050360"
  },
  {
    "text": "available in the context of s so's like Raspberry Pi and the sort and uh one",
    "start": "1050360",
    "end": "1056240"
  },
  {
    "text": "thing I want to mention is that the signing key is not stored on the device by the manufacturer so there's no",
    "start": "1056240",
    "end": "1062440"
  },
  {
    "text": "question of stealing those keys and signing our own applications however uh we want to",
    "start": "1062440",
    "end": "1068720"
  },
  {
    "text": "mention that if the signature verification fails in that case the fault model that",
    "start": "1068720",
    "end": "1075840"
  },
  {
    "text": "we just discussed where we F the system bus it itself it could actually be used",
    "start": "1075840",
    "end": "1081039"
  },
  {
    "text": "to convert a nonzero value to zero and thereby bypass uh the Integrity check",
    "start": "1081039",
    "end": "1088880"
  },
  {
    "text": "completely note that this is not an instruction skip we are not skipping the check we are changing a nonzero exit",
    "start": "1088880",
    "end": "1096880"
  },
  {
    "text": "code to zero and by standard Linux convention zero means a success so this is how it looks like we",
    "start": "1096880",
    "end": "1104799"
  },
  {
    "text": "have a aspher RSA verify function that's stores and follow uh following it is a",
    "start": "1104799",
    "end": "1111640"
  },
  {
    "text": "store instruction that stores the exit code to somewhere on the stack and later on this same address is being loaded",
    "start": "1111640",
    "end": "1118440"
  },
  {
    "text": "back into w0 and a compare with Z with an immediate value of zero occurs and if",
    "start": "1118440",
    "end": "1124480"
  },
  {
    "text": "that works fine then uh if if that works fine then the execution proceeds just normal otherwise",
    "start": "1124480",
    "end": "1130679"
  },
  {
    "text": "it abots so we mounted the attack on this",
    "start": "1130679",
    "end": "1138320"
  },
  {
    "text": "particular point in execution and sometimes no effect happens sometimes there's a partial success which means",
    "start": "1138320",
    "end": "1144880"
  },
  {
    "text": "the value did change but not zero but sometimes we did observe the register",
    "start": "1144880",
    "end": "1150120"
  },
  {
    "text": "value w0 to be completely zero or to completely changed to zero and this allows us to mount an end",
    "start": "1150120",
    "end": "1157720"
  },
  {
    "text": "to end attack so basically load the adversarial ta into the trusted",
    "start": "1157720",
    "end": "1163880"
  },
  {
    "text": "execution environment through false and then redirect communication that is meant for other t to the uh to the",
    "start": "1163880",
    "end": "1171559"
  },
  {
    "text": "maliciously low TI that we have and then decrypt that so basically this means",
    "start": "1171559",
    "end": "1177120"
  },
  {
    "text": "that any other TA in the system its communication is it's encrypted communication is now available to the",
    "start": "1177120",
    "end": "1184559"
  },
  {
    "text": "adversary so the first phase as I mentioned that uh we need to",
    "start": "1184559",
    "end": "1191480"
  },
  {
    "text": "understand when exactly to inject the fault and we cannot use any explicit code uh triggers in the optic k",
    "start": "1191480",
    "end": "1199360"
  },
  {
    "text": "to inform fault injection so what we do is we attach a separate uh set of",
    "start": "1199360",
    "end": "1205960"
  },
  {
    "text": "instruments that allow us to observe the power consumption of the embedded system under question and this helps us",
    "start": "1205960",
    "end": "1212559"
  },
  {
    "text": "identify when exactly in execution the RSA signature verification is happening",
    "start": "1212559",
    "end": "1217600"
  },
  {
    "text": "here's a oscilloscope output of the same and this allows us to inform fault",
    "start": "1217600",
    "end": "1224080"
  },
  {
    "text": "injection which is on the right here so to unpack the first signal on the top",
    "start": "1224080",
    "end": "1230240"
  },
  {
    "text": "and the second peak of the first signal is where the instruction execution is happening and the last instruction the",
    "start": "1230240",
    "end": "1238840"
  },
  {
    "text": "sorry the last signal the third signal is the Fault injection basically so you can see the second peak of the first",
    "start": "1238840",
    "end": "1245159"
  },
  {
    "text": "signal is more or less aligned with the last signal that we have and the last signal is the set of pulse strains which",
    "start": "1245159",
    "end": "1254159"
  },
  {
    "text": "actually amount to The Fault injection so what we propose is that if we we use",
    "start": "1254159",
    "end": "1259400"
  },
  {
    "text": "uh par side Channel as on the left then we can use that to inform and align our",
    "start": "1259400",
    "end": "1264880"
  },
  {
    "text": "fault injection with the move instructions or the store or the load instructions in",
    "start": "1264880",
    "end": "1270400"
  },
  {
    "text": "place and this is a schematic of the same so with fault injection we change a",
    "start": "1270400",
    "end": "1275600"
  },
  {
    "text": "non-zero value to zero which is later loaded and compared uh uh for the",
    "start": "1275600",
    "end": "1282720"
  },
  {
    "text": "signature verification to succeed and uh as as evident this fails and loads the",
    "start": "1282720",
    "end": "1288799"
  },
  {
    "text": "malicious ta into the trust Zone as we have and this is the entire combined adversary that we talk of so we use both",
    "start": "1288799",
    "end": "1296400"
  },
  {
    "text": "the par s side Channel analysis plus fault injection to load the TA into the",
    "start": "1296400",
    "end": "1302400"
  },
  {
    "text": "system and this leads to code execution in The Trusted execution environment",
    "start": "1302400",
    "end": "1308120"
  },
  {
    "text": "that we have and amounts in some sense to privilege escalation so uh now we have code",
    "start": "1308120",
    "end": "1316120"
  },
  {
    "text": "execution in The Trusted execution environment we like to use that to compromise the communication that is",
    "start": "1316120",
    "end": "1323159"
  },
  {
    "text": "meant for other T in the system so how do we do that so A Brief on how",
    "start": "1323159",
    "end": "1328919"
  },
  {
    "text": "communication or how execution happens in The Trusted execution environment the",
    "start": "1328919",
    "end": "1334080"
  },
  {
    "text": "insecure world if it wants some help from the secure world for uh like operations like cryptography or the sort",
    "start": "1334080",
    "end": "1341320"
  },
  {
    "text": "it invokes a certain ta which is uniquely identified by a uuid a unique",
    "start": "1341320",
    "end": "1347480"
  },
  {
    "text": "identifier and that ta is loaded into the uh trusted execution environment and",
    "start": "1347480",
    "end": "1352679"
  },
  {
    "text": "performs its task now the API spec uh on which opt",
    "start": "1352679",
    "end": "1359279"
  },
  {
    "text": "and many other uh trusted execution environments for embedded systems are constructed they give the responsibility",
    "start": "1359279",
    "end": "1366440"
  },
  {
    "text": "of choosing The UU IDs or the unique identifiers of the TS to the equipment",
    "start": "1366440",
    "end": "1371600"
  },
  {
    "text": "manufacturer now here is a very important assumption that is in play so",
    "start": "1371600",
    "end": "1376840"
  },
  {
    "text": "recall that in the T in The Trusted execution environment only the OEM or",
    "start": "1376840",
    "end": "1382600"
  },
  {
    "text": "the equipment manufacturer can load their own code so it makes sense that the OEM will choose the identifiers that",
    "start": "1382600",
    "end": "1390400"
  },
  {
    "text": "will not collide with each other or will be unique and as a result the behavior",
    "start": "1390400",
    "end": "1396400"
  },
  {
    "text": "of the system when two t they share their unique identifiers or when the unique identifiers are same that's",
    "start": "1396400",
    "end": "1403720"
  },
  {
    "text": "undefined and in our experiments we found that if this situation indeed",
    "start": "1403720",
    "end": "1409200"
  },
  {
    "text": "arise then a non-persistent trusted application is preferred for execution",
    "start": "1409200",
    "end": "1414919"
  },
  {
    "text": "over a persistent trusted application where persistence is just like a a",
    "start": "1414919",
    "end": "1420400"
  },
  {
    "text": "server client scenario whether uh you shut down or whether you like uh remove",
    "start": "1420400",
    "end": "1426200"
  },
  {
    "text": "the resources that the server has uh after the client closes the session so",
    "start": "1426200",
    "end": "1431360"
  },
  {
    "text": "the persistence is defined in the same sense and this is where we uh chain the",
    "start": "1431360",
    "end": "1436600"
  },
  {
    "text": "two attack vectors so from the the first attack Vector we load a TA into the system make it",
    "start": "1436600",
    "end": "1443720"
  },
  {
    "text": "non-persistent and make its identifier collide with another",
    "start": "1443720",
    "end": "1449000"
  },
  {
    "text": "identifier uh in the system and redirect communication meant for some other ta to",
    "start": "1449000",
    "end": "1454600"
  },
  {
    "text": "our own te but I must remind that this communication even though we have been",
    "start": "1454600",
    "end": "1460640"
  },
  {
    "text": "able to redirect it this communication is still encrypted so now comes the question of decrypting it so there exist",
    "start": "1460640",
    "end": "1468520"
  },
  {
    "text": "third party extensions which do Key Management uh symmetric Key Management",
    "start": "1468520",
    "end": "1474159"
  },
  {
    "text": "which is used to protect this communication um these extensions they",
    "start": "1474159",
    "end": "1479559"
  },
  {
    "text": "do not allow uh adding debuggers or just reading out the key uh they do not allow",
    "start": "1479559",
    "end": "1485520"
  },
  {
    "text": "unauthorized reads to data pages that hold the key and they look something like uh this on the left so whenever uh",
    "start": "1485520",
    "end": "1494000"
  },
  {
    "text": "keys are needed a key transfer request goes to the extension",
    "start": "1494000",
    "end": "1499080"
  },
  {
    "text": "uh the keys are transferred and after the operations a key surrender happens and post that the",
    "start": "1499080",
    "end": "1505000"
  },
  {
    "text": "application can proceed with sending the encrypted and the signed communication to wherever they want",
    "start": "1505000",
    "end": "1511320"
  },
  {
    "text": "to however our observation here is that this does not extend to segmentation",
    "start": "1511320",
    "end": "1518360"
  },
  {
    "text": "fults and uh recall that the attacks that we discussed that sometimes through",
    "start": "1518360",
    "end": "1523919"
  },
  {
    "text": "bus Falls when the address of the memory being accessed is incorrect ly faulted",
    "start": "1523919",
    "end": "1529320"
  },
  {
    "text": "we were able to um handle U 6f signals",
    "start": "1529320",
    "end": "1534799"
  },
  {
    "text": "so it turns out that if this situation does arise before key surrender then in",
    "start": "1534799",
    "end": "1541440"
  },
  {
    "text": "the codoms file that follow we have the entire key uh readout and uh again since",
    "start": "1541440",
    "end": "1549360"
  },
  {
    "text": "uh the communication channel was protected by symmetric Key Management doing this on the normal World side",
    "start": "1549360",
    "end": "1555640"
  },
  {
    "text": "where the adversary has control over the Kel also compromises the keys on the",
    "start": "1555640",
    "end": "1560760"
  },
  {
    "text": "secure World side so a bir eye view of how the entire",
    "start": "1560760",
    "end": "1566640"
  },
  {
    "text": "uh three uh attacks are chained together so assume you have a tier uh machine learning maybe uh that you want to",
    "start": "1566640",
    "end": "1574200"
  },
  {
    "text": "compromise the first step is on the very left where you use the",
    "start": "1574200",
    "end": "1580120"
  },
  {
    "text": "faults to load your own ta into the trusted execution environment and get",
    "start": "1580120",
    "end": "1585520"
  },
  {
    "text": "and gain code execution there the second step in the middle is to make sure that",
    "start": "1585520",
    "end": "1590919"
  },
  {
    "text": "the identifiers for the TA that you have loaded it collides with the identifier",
    "start": "1590919",
    "end": "1596640"
  },
  {
    "text": "of the victim ta that allows redirection of communication and",
    "start": "1596640",
    "end": "1602000"
  },
  {
    "text": "the third step is to induce this uh segmentation faults before key surrender",
    "start": "1602000",
    "end": "1607279"
  },
  {
    "text": "to get the signing keys and the encryption and the decryption keys and",
    "start": "1607279",
    "end": "1612399"
  },
  {
    "text": "from there you can uh simply uh just decrypt communication and if needed resign it also and forward it if needed",
    "start": "1612399",
    "end": "1620240"
  },
  {
    "text": "so that's how the entire uh three attacks chain together and they break",
    "start": "1620240",
    "end": "1625279"
  },
  {
    "text": "the uh security guarantees of Opti uh which transitively follows the global",
    "start": "1625279",
    "end": "1631520"
  },
  {
    "text": "platform API spec so we we found that any any uh applic any trust execution",
    "start": "1631520",
    "end": "1639399"
  },
  {
    "text": "environment that follows the spec is also vulnerable to the same attack so a",
    "start": "1639399",
    "end": "1644559"
  },
  {
    "text": "very quick note on the impact we reached out to lenaro which which maintains Opti right now uh we have a CV here and we",
    "start": "1644559",
    "end": "1652159"
  },
  {
    "text": "also work with them to deploy a countermeasure for the same in the Opti kernel so this is a snap of the counter",
    "start": "1652159",
    "end": "1659480"
  },
  {
    "text": "measure that we jointly developed and I like to draw attention to the last function call here so in some sense it's",
    "start": "1659480",
    "end": "1667120"
  },
  {
    "text": "a fault mitigation set check result not zero so this is uh in response to the",
    "start": "1667120",
    "end": "1674200"
  },
  {
    "text": "fault model that we introduced and the idea is to to maintain some stateful information and",
    "start": "1674200",
    "end": "1681320"
  },
  {
    "text": "check when the error code or the result of some operation is not zero when it",
    "start": "1681320",
    "end": "1687440"
  },
  {
    "text": "shouldn't be zero so that's the exact thing that we were trying to do and a very quick um idea about some",
    "start": "1687440",
    "end": "1695600"
  },
  {
    "text": "other implications of System bus faults specifically in the context of embedded systems we were also able to reenable",
    "start": "1695600",
    "end": "1703200"
  },
  {
    "text": "attacks on AES uh that follow table implementations uh",
    "start": "1703200",
    "end": "1708720"
  },
  {
    "text": "they were in some sense prevented ever since defenses came out against fault attacks on processors and memory and uh",
    "start": "1708720",
    "end": "1716679"
  },
  {
    "text": "we were also able to use the address bus faults uh which was the segmentation fault attack uh the third attack that I",
    "start": "1716679",
    "end": "1723919"
  },
  {
    "text": "just discussed the same attack can also be used to uh break M pqc",
    "start": "1723919",
    "end": "1729720"
  },
  {
    "text": "implementations like kyber and the same so uh pqc implementations like kyber",
    "start": "1729720",
    "end": "1735440"
  },
  {
    "text": "they are the standards as we move to the Post quom world that nist has already standardized and it seems like that",
    "start": "1735440",
    "end": "1742880"
  },
  {
    "text": "although algorithmically everything is fine but when we go to implement the same we Implement all the shares of the",
    "start": "1742880",
    "end": "1750399"
  },
  {
    "text": "secret key in one C++ like structure so one fault will be able to leak all the",
    "start": "1750399",
    "end": "1756960"
  },
  {
    "text": "members of the c or C++ structure and you get all the shares and if you get all the shares you can combine them and",
    "start": "1756960",
    "end": "1763679"
  },
  {
    "text": "leak the key directly so takeaways when designing the system it's not just",
    "start": "1763679",
    "end": "1771000"
  },
  {
    "text": "the system but also the execution environment that comes along with it this is specifically important in the",
    "start": "1771000",
    "end": "1776640"
  },
  {
    "text": "context of embedded systems which are supposed to be secure even without human supervision so that's where physical",
    "start": "1776640",
    "end": "1783120"
  },
  {
    "text": "adversaries come up uh side channels faults and these kind of attack vectors are also there secondly the new fault",
    "start": "1783120",
    "end": "1790960"
  },
  {
    "text": "model that we came up with on System bus so prior to this only uh faults on",
    "start": "1790960",
    "end": "1797519"
  },
  {
    "text": "processors and memories were considered but System bus is also something that we show can be faulted so that's also",
    "start": "1797519",
    "end": "1804320"
  },
  {
    "text": "something that needs to be kept in mind as I mentioned we did it on Opti which is just one implementation of a trusted",
    "start": "1804320",
    "end": "1811880"
  },
  {
    "text": "execution environment spec but what are the implications for other systems that also run on similar embedded devices and",
    "start": "1811880",
    "end": "1820440"
  },
  {
    "text": "thirdly API spec should be or rather we propose to be rethought uh in light of",
    "start": "1820440",
    "end": "1828480"
  },
  {
    "text": "uh adversaries that can do SCA and fi the reason being as I mentioned uh the",
    "start": "1828480",
    "end": "1833760"
  },
  {
    "text": "the reason we could do the second attack was because the API spec was assuming",
    "start": "1833760",
    "end": "1839720"
  },
  {
    "text": "that only the OEM or the equipment manufacturer can load their own code into the trusted execution environment",
    "start": "1839720",
    "end": "1845519"
  },
  {
    "text": "and they left the responsibility of identifier uh Collision onto the O",
    "start": "1845519",
    "end": "1852279"
  },
  {
    "text": "basically but if that assumption is voided because of some attack like this then uh any security",
    "start": "1852279",
    "end": "1858519"
  },
  {
    "text": "that is derived from the assumptions that stands void and I'll end with the uh so this is",
    "start": "1858519",
    "end": "1864320"
  },
  {
    "text": "the setup that we used for this entire work and um the capabilities of this",
    "start": "1864320",
    "end": "1870320"
  },
  {
    "text": "setup they have like side Channel analysis power and both electromagnetic side channels fault attacks fault",
    "start": "1870320",
    "end": "1877080"
  },
  {
    "text": "analysis and to some extent also microarchitectural attack analysis so thank you and um if there",
    "start": "1877080",
    "end": "1885080"
  },
  {
    "text": "are any questions then we can have them and thanks a lot for for listening yeah thank you",
    "start": "1885080",
    "end": "1891919"
  }
]