[
  {
    "text": "hi everyone welcome to our talk i'm Casemir Schultz i'm a principal security researcher over at Hidden Layer and I'm",
    "start": "1920",
    "end": "7440"
  },
  {
    "text": "Tom Boner VP of research at Hidden Layer so yeah we've been investigating",
    "start": "7440",
    "end": "12719"
  },
  {
    "text": "uh machine learning libraries and file formats for past couple of years and you know notice there's a huge problem with",
    "start": "12719",
    "end": "19199"
  },
  {
    "text": "the deserialization of untrusted data um we're going to largely focus on pickle",
    "start": "19199",
    "end": "24960"
  },
  {
    "text": "the more boring format and R which Kaz will cover in a bit the more fun format that I'm sure you're all here to to",
    "start": "24960",
    "end": "30640"
  },
  {
    "text": "learn about uh but you know by no means is this problem limited to these uh these formats at the end of the day um",
    "start": "30640",
    "end": "37600"
  },
  {
    "text": "so why are we talking about pickle again um I'm well aware it's been been done um and perhaps done to death but you know",
    "start": "37600",
    "end": "44960"
  },
  {
    "text": "uh Marco Savvier gave a great talk here about 13 years ago called Sour Pickles um definitely recommend you check that",
    "start": "44960",
    "end": "51600"
  },
  {
    "text": "one out if you haven't before um but you know in the past 13 years we've gone through a few Python versions uh still a",
    "start": "51600",
    "end": "58559"
  },
  {
    "text": "major lack of awareness and a few you know updates to pickle itself later um",
    "start": "58559",
    "end": "64400"
  },
  {
    "text": "you know we still got the big red warning on the pickle page we're still seeing pickle being used to serialize",
    "start": "64400",
    "end": "69920"
  },
  {
    "text": "things like machine learning models um we see it used for IPC we see it used for RPC um over unauthenticated data",
    "start": "69920",
    "end": "77920"
  },
  {
    "text": "channels there's more vulnerabilities than ever um you know we counted 300 or so in the",
    "start": "77920",
    "end": "84080"
  },
  {
    "text": "last year alone um mythic cobalt strike metas-ploit payloads all using Pickle",
    "start": "84080",
    "end": "89680"
  },
  {
    "text": "for Stages i think the most interesting thing and you know why we just wanted to touch on this now was that anti-malware",
    "start": "89680",
    "end": "95840"
  },
  {
    "text": "scanners are starting to get in on the act so um be that commercial or open source scanners um and really we're in a",
    "start": "95840",
    "end": "102640"
  },
  {
    "text": "bit of a cat and mouse game where we're trying to evade some of the scanning solutions with Pickle so that's that's",
    "start": "102640",
    "end": "107759"
  },
  {
    "text": "what we're going to focus on uh for the first half of this talk so quick recap then um you know pickle it's a",
    "start": "107759",
    "end": "114880"
  },
  {
    "text": "stackbased virtual machine uh processes bite code interleaves instructions uh",
    "start": "114880",
    "end": "120240"
  },
  {
    "text": "and data together um very simple as a stack we have a a memo as well that",
    "start": "120240",
    "end": "126000"
  },
  {
    "text": "operates a bit like registers in a in a processor and there are about yeah four instructions that really can lead to",
    "start": "126000",
    "end": "132720"
  },
  {
    "text": "code execution so we got global and stack global that can be used to to pull in a method from a a module or a class",
    "start": "132720",
    "end": "140160"
  },
  {
    "text": "instantiate that'll instantiate a class and reduce that will um essentially call",
    "start": "140160",
    "end": "145440"
  },
  {
    "text": "a method on the stack um so yeah again just part of the recap here we got a",
    "start": "145440",
    "end": "151120"
  },
  {
    "text": "very simple class um and a reduce function uh so the reduce function when we're dumping this using pickle will",
    "start": "151120",
    "end": "158080"
  },
  {
    "text": "return a callable and an argument tupil and the tupil's applied to the uh the callable so in this case the callable is",
    "start": "158080",
    "end": "164640"
  },
  {
    "text": "eval um and we've got a very simple just print pone string and you can insert your payload there so we look at the the",
    "start": "164640",
    "end": "171120"
  },
  {
    "text": "disassembly on the right we can see there's a proto op code at the start so it's pickle protocol version 4 um a",
    "start": "171120",
    "end": "177120"
  },
  {
    "text": "frame up code more on that in a bit and then we push some strings on the stack um so short bin uniode builtins then",
    "start": "177120",
    "end": "184519"
  },
  {
    "text": "eval stack global so at that point it's going to kind of resolve the method from built-ins uh and the the eval function",
    "start": "184519",
    "end": "191920"
  },
  {
    "text": "will be pushed on the stack then we push on our print poned uh so the code we",
    "start": "191920",
    "end": "197519"
  },
  {
    "text": "want to pass to to evalu and finally the reduce function is going to grab the tupil and the function",
    "start": "197519",
    "end": "204159"
  },
  {
    "text": "off the stack and and call a function with the arguments so pretty",
    "start": "204159",
    "end": "209640"
  },
  {
    "text": "simple whilst we've been playing around we noticed a few oddities with the file format itself so um there are some op",
    "start": "209640",
    "end": "215840"
  },
  {
    "text": "codes that aren't required um the protocol version being one of the big ones now in the early days and in the",
    "start": "215840",
    "end": "222080"
  },
  {
    "text": "initial talk that that Marco did uh I believe pickle was largely a sort of textbased",
    "start": "222080",
    "end": "228200"
  },
  {
    "text": "um file format it's now kind of a mixture of of text and binary and in the",
    "start": "228200",
    "end": "234159"
  },
  {
    "text": "newer versions the proto op code is encoded using by 80 followed by the the version so you know if we're using",
    "start": "234159",
    "end": "240720"
  },
  {
    "text": "protocol version 4 we'll see the bytes 8004 at the header of the the file so a",
    "start": "240720",
    "end": "246239"
  },
  {
    "text": "lot of scanners rely on that they they look for this protocol bite when iding uh files or some of them are even worse",
    "start": "246239",
    "end": "252720"
  },
  {
    "text": "than that actually they just look for a pickle file extension so they're even easier to evade um so you know take that",
    "start": "252720",
    "end": "258160"
  },
  {
    "text": "away and certain scanners fail to identify the pickle uh which is a lovely way of sneaking your payload in uh the",
    "start": "258160",
    "end": "264960"
  },
  {
    "text": "frame op code as well um the frame up code is largely there to reduce the number of sort of reads in",
    "start": "264960",
    "end": "271680"
  },
  {
    "text": "the underlying uh pickle subsystem so you can kind of chunk up portions of of pickle up codes and and read them in one",
    "start": "271680",
    "end": "278240"
  },
  {
    "text": "block um I I believe that was the intention of that one um introduced in in version four but again you know not",
    "start": "278240",
    "end": "284960"
  },
  {
    "text": "required and the same with the stop code so all pickles will end with a stop code by 2E and you can totally emit that as",
    "start": "284960",
    "end": "293600"
  },
  {
    "text": "well now again scanners check for this so they'll look for um 0x80 at the start",
    "start": "293600",
    "end": "298880"
  },
  {
    "text": "of the file and 2e at the end um and although if you emit the stopup code",
    "start": "298880",
    "end": "305600"
  },
  {
    "text": "both the the disassembler will will raise an exception you'll get a value error when um when disassembling or the",
    "start": "305600",
    "end": "314000"
  },
  {
    "text": "loader itself will actually raise an end of file error i think the important thing to note is that any payload in the",
    "start": "314000",
    "end": "319840"
  },
  {
    "text": "pickle will still be executed um you know prior to any exception being thrown so again it just makes it a lot harder",
    "start": "319840",
    "end": "326720"
  },
  {
    "text": "for um security solutions to to ID these files so we're looking at ways to bypass um",
    "start": "326720",
    "end": "333680"
  },
  {
    "text": "and a lot of the scanners uh at the moment tend to have a kind of deny list of methods so things like xc eval os",
    "start": "333680",
    "end": "340960"
  },
  {
    "text": "system not allowed to see them in a pickle um so we went looking for um you",
    "start": "340960",
    "end": "346160"
  },
  {
    "text": "know other methods that we could use and one of the interesting ones was actually using pickle itself so we put a pickle",
    "start": "346160",
    "end": "352240"
  },
  {
    "text": "in a pickle um and then use pickle.loads to to load it up",
    "start": "352240",
    "end": "357560"
  },
  {
    "text": "um yeah so you know in in this instance the a lot of the scanners just weren't",
    "start": "357560",
    "end": "363039"
  },
  {
    "text": "checking for this it's a very hard problem um there are you know hundreds of methods throughout the the Python",
    "start": "363039",
    "end": "368479"
  },
  {
    "text": "libraries that we can use for executing code so you're really chasing your own tail if uh if you're trying to make a deny list at the end of the",
    "start": "368479",
    "end": "374919"
  },
  {
    "text": "day after that we looked at implementing sort of a more more pure shell code",
    "start": "374919",
    "end": "380080"
  },
  {
    "text": "loader so like I've seen payloads in the past where people have used uh you know",
    "start": "380080",
    "end": "385680"
  },
  {
    "text": "x to run a python script that would inject shell code into memory but could we do it using a pure pickle um was was",
    "start": "385680",
    "end": "392160"
  },
  {
    "text": "the thinking so you know the plan was to use um cypes to like load library kernel",
    "start": "392160",
    "end": "398080"
  },
  {
    "text": "32.dll virtual alloc process memory create thread very standard sort of injection technique um so what we came",
    "start": "398080",
    "end": "405600"
  },
  {
    "text": "up with here um basically here we defined some shell code it's a very simple uh x64 calc.exe",
    "start": "405600",
    "end": "412960"
  },
  {
    "text": "launcher we got a few helper classes here that just help to provide some of the flags to um uh virtual allec and and",
    "start": "412960",
    "end": "421680"
  },
  {
    "text": "write process memory and then yeah on the right hand side we've got the the main class so this will import kernel",
    "start": "421680",
    "end": "427880"
  },
  {
    "text": "32.dll and then we've got a a class for virtual alloc and the reduce there is going to call into um yeah the cype sort",
    "start": "427880",
    "end": "435520"
  },
  {
    "text": "of virtual alloc function same for process memory so for create thread and when we dump that out um we simply save",
    "start": "435520",
    "end": "441840"
  },
  {
    "text": "it using an array um and we pass each of those classes um into that and yeah you",
    "start": "441840",
    "end": "447360"
  },
  {
    "text": "know at the end of it we load it up and we uh we get a couch.exe just using pure",
    "start": "447360",
    "end": "452639"
  },
  {
    "text": "pure pickle at the end of the day so you know we'd got that far and we",
    "start": "452639",
    "end": "459840"
  },
  {
    "text": "still felt there was a lot more scope for abuse in the pickle format um we",
    "start": "459840",
    "end": "465120"
  },
  {
    "text": "wanted a way to craft pickles that we wouldn't necessarily be able to make by hand um I'd spend a bit of time hacking",
    "start": "465120",
    "end": "472400"
  },
  {
    "text": "away in the hex editor and that was a bit of a um bit of a pain there was some",
    "start": "472400",
    "end": "478319"
  },
  {
    "text": "limitations with that so uh Cass actually created a wonderful disassembler and assembler um so now we",
    "start": "478319",
    "end": "485120"
  },
  {
    "text": "can sort of yeah create highly bespoke payloads um define our own op codes in",
    "start": "485120",
    "end": "490560"
  },
  {
    "text": "in any sequence we want and yeah you know generate sequences of op codes that's just not possible to create using",
    "start": "490560",
    "end": "496160"
  },
  {
    "text": "the standard uh python pickler so as a very simple example here",
    "start": "496160",
    "end": "501759"
  },
  {
    "text": "um yeah we just declare you know instruction um we got a nice uh sort of human readable name so proto 4 or short",
    "start": "501759",
    "end": "508960"
  },
  {
    "text": "bin uni code um and yeah we can start handcrafting pickles now so both of",
    "start": "508960",
    "end": "514800"
  },
  {
    "text": "these are kind of interesting because in a normal pickle if you were to try and use the eval function you",
    "start": "514800",
    "end": "521039"
  },
  {
    "text": "just have built-ins evval on the on the the stack via the short bin uniode strings but here because Python is a",
    "start": "521039",
    "end": "527920"
  },
  {
    "text": "absolutely disgusting language language there are many ways to access the call method for eval so we can do builtins",
    "start": "527920",
    "end": "535560"
  },
  {
    "text": "eval_all for instance or we can not reference it through built-ins we can reference it through underscore main and",
    "start": "535560",
    "end": "542480"
  },
  {
    "text": "then touch builtin so there are many ways to encode um the the sort of uh",
    "start": "542480",
    "end": "548240"
  },
  {
    "text": "module and and method names that would again evade a lot of scanners and their their deny lists at the end of the day",
    "start": "548240",
    "end": "554640"
  },
  {
    "text": "that was sort of the the purpose behind that taking it a step further we can even construct strings on the stack so using",
    "start": "554640",
    "end": "561519"
  },
  {
    "text": "a more benign method like string.join um we can push like exec onto the stack",
    "start": "561519",
    "end": "567200"
  },
  {
    "text": "string.join it together then go and uh resolve it using the the stack global op",
    "start": "567200",
    "end": "572240"
  },
  {
    "text": "code so you know at this point sort of simple",
    "start": "572240",
    "end": "577440"
  },
  {
    "text": "um just sort of signature based solutions that are are just looking for for method names are going to fall short",
    "start": "577440",
    "end": "583040"
  },
  {
    "text": "um you're going to need to start doing things like stack emulation in order to potentially spot",
    "start": "583040",
    "end": "588680"
  },
  {
    "text": "this um not content to leave it there um we got to wondering if it was possible",
    "start": "588680",
    "end": "594399"
  },
  {
    "text": "to pickle code objects now the the standard Python library says you you can't um there is a a third party module",
    "start": "594399",
    "end": "602320"
  },
  {
    "text": "called Dill that allows you to do that um but we yeah we started to wonder if",
    "start": "602320",
    "end": "608160"
  },
  {
    "text": "we could actually achieve it just using the the standard uh standard module itself you you can use do it using",
    "start": "608160",
    "end": "613519"
  },
  {
    "text": "marshall.dump and marshall load um but a lot of security solutions blacklist those",
    "start": "613519",
    "end": "618760"
  },
  {
    "text": "functions um so rather than that we ended up this solution here will basically um",
    "start": "618760",
    "end": "626800"
  },
  {
    "text": "dump a code object um so it's sort of one of the base objects built into",
    "start": "626800",
    "end": "632120"
  },
  {
    "text": "Python um so we're able to store all of the arguments for the constructor for",
    "start": "632120",
    "end": "638160"
  },
  {
    "text": "the code object class and actually get it into a pickle now this was kind of just a bit of a test to prove that we",
    "start": "638160",
    "end": "644000"
  },
  {
    "text": "could do it uh what we actually came up with was using uh the the assembler um",
    "start": "644000",
    "end": "650240"
  },
  {
    "text": "we can define on the outside there's a function type so any any code object we return in order to run it we need to",
    "start": "650240",
    "end": "656640"
  },
  {
    "text": "essentially cast it to a function type but yeah we can build up the code type",
    "start": "656640",
    "end": "661920"
  },
  {
    "text": "um class um using stack global to instantiate that we supply the arguments",
    "start": "661920",
    "end": "667120"
  },
  {
    "text": "and then highlighted in green there is the compiled Python bite code for the",
    "start": "667120",
    "end": "672560"
  },
  {
    "text": "the code we want to run so you could swap that out with any any payload you want um we do need to grab",
    "start": "672560",
    "end": "679000"
  },
  {
    "text": "builtins.global at one point um so that's used um to provide the yeah",
    "start": "679000",
    "end": "687040"
  },
  {
    "text": "basically the global scope functions to uh the function type and then reduce it so that that runs and again you know",
    "start": "687040",
    "end": "692800"
  },
  {
    "text": "these function names we could encode them we could build them up on the stack we could obuscate this way uh way more",
    "start": "692800",
    "end": "698160"
  },
  {
    "text": "but uh we're just trying to keep things fairly fairly clear um so to help you know we're we're",
    "start": "698160",
    "end": "704000"
  },
  {
    "text": "releasing I should have mentioned earlier we're releasing the disassembler and the assembler uh as open source",
    "start": "704000",
    "end": "709279"
  },
  {
    "text": "there'll be some links to that further on in the the slide deck um as part of that project we have got a a function in",
    "start": "709279",
    "end": "716000"
  },
  {
    "text": "there called create generative pickle so just to make it nice and easy you can feed in any function with any payload",
    "start": "716000",
    "end": "721600"
  },
  {
    "text": "you like um and that will go and create the the sort of function uh pickle that we just saw in the previous slide only",
    "start": "721600",
    "end": "728000"
  },
  {
    "text": "caveat is it is Python version specific so um you know if you make something or",
    "start": "728000",
    "end": "733360"
  },
  {
    "text": "or pickle something using Python 3.9 don't be surprised if it breaks when you go targeting a 312 system for instance",
    "start": "733360",
    "end": "742000"
  },
  {
    "text": "and finally then uh just to wrap off pickle before we get into the fun R stuff",
    "start": "742000",
    "end": "747800"
  },
  {
    "text": "um we wondered if it was possible to attack the unpickler itself so like the",
    "start": "747800",
    "end": "753200"
  },
  {
    "text": "loaded unpickler class instance that's actually you know um processing the um",
    "start": "753200",
    "end": "758560"
  },
  {
    "text": "the bite stream um I really wanted to get access to uh the the pickle data",
    "start": "758560",
    "end": "765200"
  },
  {
    "text": "stream it would have been really cool to add op codes to it as u as it was being loaded um but sadly it wasn't possible",
    "start": "765200",
    "end": "771760"
  },
  {
    "text": "um the unpickler only takes a read callback function so there was no write there was no buffer there was no way to",
    "start": "771760",
    "end": "778720"
  },
  {
    "text": "append additional uh op codes to to the pickle itself so we had a really good",
    "start": "778720",
    "end": "784079"
  },
  {
    "text": "look at the class um wondered you know what what could we potentially target in there um and the main thing that stood",
    "start": "784079",
    "end": "790800"
  },
  {
    "text": "out was the op code dispatch table um so after a bit of fiddling around",
    "start": "790800",
    "end": "797440"
  },
  {
    "text": "basically what what we were trying to do was find the unpickler um loaded class so the the sort of self-",
    "start": "797440",
    "end": "804720"
  },
  {
    "text": "reference to the unpickler should be visible through local scope variables um then for a sort of simple",
    "start": "804720",
    "end": "813200"
  },
  {
    "text": "demonstration get one of the op code handlers in this case we'll we'll use load short bin uni code that that loads",
    "start": "813200",
    "end": "819120"
  },
  {
    "text": "the strings onto the stack and see if we can remap it to another uh another op code um and then we can you know for the",
    "start": "819120",
    "end": "826079"
  },
  {
    "text": "rest of the pickle just encode strings using this new op code handler um so yeah basically this is doing what we",
    "start": "826079",
    "end": "832639"
  },
  {
    "text": "just uh described there i appreciate maybe a little small and hard to read but you know we we grab this self",
    "start": "832639",
    "end": "838160"
  },
  {
    "text": "reference to the unpickler class we um via the locals we find the dispatch",
    "start": "838160",
    "end": "843680"
  },
  {
    "text": "table then on the right hand side um at um entry 140 in the table we pull out",
    "start": "843680",
    "end": "850800"
  },
  {
    "text": "the existing load short bin uni code uh method then we patch it back in at an",
    "start": "850800",
    "end": "856320"
  },
  {
    "text": "unused op code so 56 and then later on in here we start using our new short bin",
    "start": "856320",
    "end": "861519"
  },
  {
    "text": "uni code op code so uh in our assembler we just remap that to short bin uni code",
    "start": "861519",
    "end": "866959"
  },
  {
    "text": "bad for one of a better name uh and then we can push built-ins and exec on the stack so again existing security",
    "start": "866959",
    "end": "873199"
  },
  {
    "text": "solutions they're not going to be able to to pause this it breaks the disassembler um and there's a few more",
    "start": "873199",
    "end": "879279"
  },
  {
    "text": "interesting things we can do with that as well so one thing to note with that though is that",
    "start": "879279",
    "end": "884880"
  },
  {
    "text": "um there are actually two unpicklers well picklers and unpicklers in Python um so today if you try and use pickle uh",
    "start": "884880",
    "end": "892959"
  },
  {
    "text": "it'll actually use the C-based implementation um for performance reasons and that previous method doesn't",
    "start": "892959",
    "end": "899760"
  },
  {
    "text": "work for the C-based implementation only for the sort of pythonic um unpickler um so yeah you know we we",
    "start": "899760",
    "end": "909839"
  },
  {
    "text": "can um use it for other libraries things like joblib so joblib will always use a",
    "start": "909839",
    "end": "915279"
  },
  {
    "text": "pythonbased unpickler under the hood so that's a prime target for this kind of attack and you know we don't just have",
    "start": "915279",
    "end": "921600"
  },
  {
    "text": "to use it for um sort of loading up um um strings we can combine this with the",
    "start": "921600",
    "end": "926880"
  },
  {
    "text": "lambda and and function pickling so we can actually just create a new function on the stack and then have a new op code",
    "start": "926880",
    "end": "934000"
  },
  {
    "text": "point into that and then all the new op code um so yeah you know it' be",
    "start": "934000",
    "end": "939639"
  },
  {
    "text": "um quite an interesting way of obiscating pickles at the end of the day so yeah that that's it for me on the the",
    "start": "939639",
    "end": "945839"
  },
  {
    "text": "pickle update I shall hand over to Cass now for the really on our stuff so as you can see from all of the pickle stuff",
    "start": "945839",
    "end": "952399"
  },
  {
    "text": "we did we got pretty far into pickle and uh as most researchers you know normally do uh we got bored of pickle uh we",
    "start": "952399",
    "end": "959759"
  },
  {
    "text": "wanted to see you know what else is there out there so we decided to look into R why did we look into R we decided",
    "start": "959759",
    "end": "966800"
  },
  {
    "text": "to look into R because R is used pretty widely by the data science and statistics communities so that meant any",
    "start": "966800",
    "end": "972800"
  },
  {
    "text": "vulnerability that was found in that would actually be pretty impactful uh just like with pickle a lot of people use pickle especially in machine",
    "start": "972800",
    "end": "979040"
  },
  {
    "text": "learning nowadays with R there's a wide impact we also chose R because the serialization format was using bite code",
    "start": "979040",
    "end": "986399"
  },
  {
    "text": "very similar to pickle so it's a virtual machine and you know we'd love attacking anything that runs code and then finally",
    "start": "986399",
    "end": "992560"
  },
  {
    "text": "R hadn't undergone any security scrutiny at all so there was only one pre-existing CVE in R and that was by",
    "start": "992560",
    "end": "999680"
  },
  {
    "text": "Cisco Talis and for an entire programming language that's you know really not much Um so let's talk about",
    "start": "999680",
    "end": "1007199"
  },
  {
    "text": "the RDS file if you've read our research uh the RDS file so R data serialization",
    "start": "1007199",
    "end": "1012639"
  },
  {
    "text": "file is R's version of pickle and it's a serialization format and it's used for",
    "start": "1012639",
    "end": "1018399"
  },
  {
    "text": "quite a variety of things in R so it's often used for saving cases for saving individual objects uh we can use it for",
    "start": "1018399",
    "end": "1025520"
  },
  {
    "text": "sharing data so let's say I really want to share some data I have with Tom you know I send it over to him and because",
    "start": "1025520",
    "end": "1031280"
  },
  {
    "text": "he didn't listen to my talk yet he's going to load it hopefully um we'll see and then you can also use it for",
    "start": "1031280",
    "end": "1036880"
  },
  {
    "text": "persistence so that means if I want to save my load it up later I can do that and when we look at the two main",
    "start": "1036880",
    "end": "1043760"
  },
  {
    "text": "functions that are used for RDS the save RDS and the read RDS files we can",
    "start": "1043760",
    "end": "1049200"
  },
  {
    "text": "already notice some of R's quirks so what you actually might notice up here is that there's an optional parameter",
    "start": "1049200",
    "end": "1055120"
  },
  {
    "text": "called compress in the save RDS file and that's defaulted to true and uh if you",
    "start": "1055120",
    "end": "1060320"
  },
  {
    "text": "set that to false the RDS won't be compressed however the read RDS file won't be able to read it because the",
    "start": "1060320",
    "end": "1066480"
  },
  {
    "text": "read RDS file can only read compressed data uh so as you can see some oddities already started and as researchers we'd",
    "start": "1066480",
    "end": "1072799"
  },
  {
    "text": "love seeing this when we were first doing just discovery because if there's you know things like that it's probably",
    "start": "1072799",
    "end": "1078320"
  },
  {
    "text": "going to be fairly vulnerable down the road so the quirks and inconsistencies",
    "start": "1078320",
    "end": "1083600"
  },
  {
    "text": "continue a bit uh when we actually go into the RDS file format uh which you can see with their variable and changing",
    "start": "1083600",
    "end": "1090400"
  },
  {
    "text": "numbers up there so the Good all right uh the RDS file has three",
    "start": "1090400",
    "end": "1096640"
  },
  {
    "text": "main difference so just like with pickle the first type is ASKI and that's because when R was first made we had",
    "start": "1096640",
    "end": "1103120"
  },
  {
    "text": "that ASI format so just like pickle and the way that the R interpreter decides",
    "start": "1103120",
    "end": "1109919"
  },
  {
    "text": "what type of file this RDS file is is it tries to read the first two bytes and parse them as a magic header so if it",
    "start": "1109919",
    "end": "1116720"
  },
  {
    "text": "sees binary or XDR magic bytes it will then treat the entire file as if it was the binary or the XDR format however you",
    "start": "1116720",
    "end": "1124240"
  },
  {
    "text": "can see here that there's two or three bytes and that's because there's a lot of components in R from when R was first",
    "start": "1124240",
    "end": "1132400"
  },
  {
    "text": "created so because R was originally created as an ASI format there were often times new line characters at the",
    "start": "1132400",
    "end": "1139520"
  },
  {
    "text": "start of these files so if there's a new line character it will actually try to read one more bite and then see if it's",
    "start": "1139520",
    "end": "1145280"
  },
  {
    "text": "an ASKI format so as you can see a lot more inconsistencies what we then do is",
    "start": "1145280",
    "end": "1150320"
  },
  {
    "text": "once we actually figure out what the format type is we then change what our actual size is that we read so you can",
    "start": "1150320",
    "end": "1157120"
  },
  {
    "text": "see here in the really small text underneath we have that the bite values are done in the either the binary or the",
    "start": "1157120",
    "end": "1163520"
  },
  {
    "text": "XDR format and that's because an integer in either of those is going to be four bytes however the ASKI format is",
    "start": "1163520",
    "end": "1170080"
  },
  {
    "text": "actually 126 bytes because what they do is they just read in 126 bytes do ai and",
    "start": "1170080",
    "end": "1175840"
  },
  {
    "text": "then use that for any integers so once we actually know the format type and we know you know what length we're using",
    "start": "1175840",
    "end": "1182320"
  },
  {
    "text": "for all of our data types we go through we get the version number the writer version and the minimum reader version",
    "start": "1182320",
    "end": "1188320"
  },
  {
    "text": "and then we check to see if the version number is greater than three if it is then we check our encoding uh name",
    "start": "1188320",
    "end": "1194799"
  },
  {
    "text": "length and then we actually read the encoding name and for those of you that you know might want to try to find some",
    "start": "1194799",
    "end": "1200160"
  },
  {
    "text": "CVEes uh we actually notice that there are possibly some crashes I'm not saying",
    "start": "1200160",
    "end": "1206000"
  },
  {
    "text": "anything if you mess with the length because of some allocations and then once we have all of our data parsed what",
    "start": "1206000",
    "end": "1212880"
  },
  {
    "text": "we do is the rest is that serialized data so it's the bite code that actually goes into the RDS virtual machine so the",
    "start": "1212880",
    "end": "1219520"
  },
  {
    "text": "RDS virtual machine has 36 possible by code instructions which create a bunch of objects so the RDS virtual machine",
    "start": "1219520",
    "end": "1226559"
  },
  {
    "text": "actually creates objects whereas the R virtual machine is just instructions and it works or the pickle one works on the",
    "start": "1226559",
    "end": "1232720"
  },
  {
    "text": "stack and the memo and there's a lot of different objects that we can have the first is that we have these lists and as",
    "start": "1232720",
    "end": "1239039"
  },
  {
    "text": "you can see there's quite a few different data types that you can have in the list so you can have logical so that's your true falses integers numeric",
    "start": "1239039",
    "end": "1246559"
  },
  {
    "text": "your complex numbers your characters and you can even have just raw bytes you can also have symbols so a symbol in R is",
    "start": "1246559",
    "end": "1253280"
  },
  {
    "text": "something like the system function uh that would be a s symbol it can also be variables that are in the environment",
    "start": "1253280",
    "end": "1259520"
  },
  {
    "text": "you can actually generate entire functions using the RDS virtual machine uh these are obviously not executable",
    "start": "1259520",
    "end": "1265919"
  },
  {
    "text": "within the RDS virtual machine otherwise our talk would be much shorter uh and then you have environments as well and",
    "start": "1265919",
    "end": "1272640"
  },
  {
    "text": "what's interesting about the RDS virtual machine is that whereas Pickle will just run through all of the instructions and",
    "start": "1272640",
    "end": "1278960"
  },
  {
    "text": "when it sees the stop instruction it will take the last value off of the stack and return that the RDS virtual",
    "start": "1278960",
    "end": "1285520"
  },
  {
    "text": "machine uses a recursive function call so we actually go into this read item function and as soon as the top level",
    "start": "1285520",
    "end": "1292159"
  },
  {
    "text": "read item returns that is returned back to the user and then all the data after",
    "start": "1292159",
    "end": "1297440"
  },
  {
    "text": "that is ignored so if you have extra data and the virtual machine is done that's it um so it doesn't just let you",
    "start": "1297440",
    "end": "1304480"
  },
  {
    "text": "keep running so any payloads that you have to do you have to do within one complete object uh or with pickle you",
    "start": "1304480",
    "end": "1310640"
  },
  {
    "text": "know we can put something in between then actually return something that was uh meaningful for the user and then all",
    "start": "1310640",
    "end": "1317520"
  },
  {
    "text": "of the instructions start with the same four byte flag uh so for ASI that's the",
    "start": "1317520",
    "end": "1322799"
  },
  {
    "text": "126 byt flag uh which is quite long but um our four byte flag what we do there",
    "start": "1322799",
    "end": "1328880"
  },
  {
    "text": "is we uh it's encoded with all the necessary data that's then followed by a variable length of data for whatever",
    "start": "1328880",
    "end": "1335919"
  },
  {
    "text": "instruction you have so let's look at how this uh flag is unpacked so we can",
    "start": "1335919",
    "end": "1341280"
  },
  {
    "text": "see here that the type of the um instruction is just grabbed from there we also have something called levels",
    "start": "1341280",
    "end": "1347840"
  },
  {
    "text": "which is used for characters uh you'll see that later on in another slide we can see whether we can set whether or",
    "start": "1347840",
    "end": "1354080"
  },
  {
    "text": "not this object is actually an object whether it has attributes and whether it has a tag or",
    "start": "1354080",
    "end": "1359880"
  },
  {
    "text": "not so just like with pickle and as you might have noticed there are some instructional quirks as well the first",
    "start": "1359880",
    "end": "1366480"
  },
  {
    "text": "is that we have the this bite code instruction so most of the R instructions will return one object and",
    "start": "1366480",
    "end": "1373520"
  },
  {
    "text": "only do one thing per instruction however the bite code instruction is basically just like a header and it",
    "start": "1373520",
    "end": "1380320"
  },
  {
    "text": "requires a strict format to be followed after that so that means once you see the bite code instruction it will try to",
    "start": "1380320",
    "end": "1385679"
  },
  {
    "text": "read a list off for any constants which are then list of objects and then it will try to read off just raw data bytes",
    "start": "1385679",
    "end": "1392720"
  },
  {
    "text": "so you have to have that format otherwise it will crash we also have generally any objects returned from the",
    "start": "1392720",
    "end": "1398880"
  },
  {
    "text": "RDS file and the des serialization pro uh process are S4 objects however what",
    "start": "1398880",
    "end": "1405039"
  },
  {
    "text": "you can do is you can return a vector with that uh object set to true and",
    "start": "1405039",
    "end": "1410640"
  },
  {
    "text": "it'll actually create an S3 object which is an older version of our objects which aren't supposed to be used in the R",
    "start": "1410640",
    "end": "1416640"
  },
  {
    "text": "virtual machine and then we have just a list of object we have some instructions that have lists of objects and these the",
    "start": "1416640",
    "end": "1423840"
  },
  {
    "text": "way that they work is when it starts having the list it will keep running through in a while loop until we see a",
    "start": "1423840",
    "end": "1429280"
  },
  {
    "text": "stop instruction and then it will get out of that function so there's a lot of instructional quirks and um what",
    "start": "1429280",
    "end": "1436400"
  },
  {
    "text": "instruction do we actually use to do our exploit r has a system called lazy",
    "start": "1436400",
    "end": "1441799"
  },
  {
    "text": "evaluation um and lazy evaluation is the strategy where expressions are not",
    "start": "1441799",
    "end": "1447280"
  },
  {
    "text": "actually evaluated when you first uh save them so that means that if I have x",
    "start": "1447280",
    "end": "1452640"
  },
  {
    "text": "equals a a is four and then I do a plus one so a is now five and then I access x",
    "start": "1452640",
    "end": "1458400"
  },
  {
    "text": "x is actually five not four because x was not accessed until after a was",
    "start": "1458400",
    "end": "1463520"
  },
  {
    "text": "updated so that also applies to function arguments so if I pass that uh evaluation or pass it down into a",
    "start": "1463520",
    "end": "1471120"
  },
  {
    "text": "function if it won't actually be evaluated until the function actually accesses that variable and uh once the",
    "start": "1471120",
    "end": "1478480"
  },
  {
    "text": "argument is accessed the stored expression is invaluated in the environment that is set by the promise",
    "start": "1478480",
    "end": "1485159"
  },
  {
    "text": "object so for the promise object inside of the virtual machine we have three components that are required to actually",
    "start": "1485159",
    "end": "1491279"
  },
  {
    "text": "build this object we have the expression which is the unevaluated R expression that we actually want to run we have the",
    "start": "1491279",
    "end": "1498000"
  },
  {
    "text": "environment so that's the environment that we actually want to run the expression in so all the variables it is going to use have to be in that",
    "start": "1498000",
    "end": "1504640"
  },
  {
    "text": "environment and then we finally we have the value that we're actually going to store the expression to when we were",
    "start": "1504640",
    "end": "1510480"
  },
  {
    "text": "first trying to create uh our exploit I was actually looking in and promise",
    "start": "1510480",
    "end": "1515520"
  },
  {
    "text": "object was one of the first things I saw and tried working with and uh one of the things I tried doing was if there was a",
    "start": "1515520",
    "end": "1521520"
  },
  {
    "text": "variable already in the environment I tried setting the environment to the current environment and then setting the",
    "start": "1521520",
    "end": "1526559"
  },
  {
    "text": "variable to or the value to a value that existed however that didn't work so what",
    "start": "1526559",
    "end": "1531919"
  },
  {
    "text": "we ended up doing was we looked further and uh so this is actually our exploit and one thing and this is using a",
    "start": "1531919",
    "end": "1539520"
  },
  {
    "text": "compiler that we're going to open source as well and any so remember when I said",
    "start": "1539520",
    "end": "1544559"
  },
  {
    "text": "that there's certain instructions that start a list any arguments passed in have to be in reverse order so in this",
    "start": "1544559",
    "end": "1550320"
  },
  {
    "text": "case we have the value expression or value environment expression so what you can see here is that rather than",
    "start": "1550320",
    "end": "1556960"
  },
  {
    "text": "actually setting a value from the environment we set it to something called an unbound value and what that",
    "start": "1556960",
    "end": "1562880"
  },
  {
    "text": "means is that the value is whatever you store it as so that means if we do a is",
    "start": "1562880",
    "end": "1568159"
  },
  {
    "text": "equal to read RDS that a is the value that once that's accessed that is going",
    "start": "1568159",
    "end": "1573279"
  },
  {
    "text": "to actually execute our expression once we have that we have the lang instruction which is just for used for",
    "start": "1573279",
    "end": "1580159"
  },
  {
    "text": "expressions so as you can see we use symbols and we get the characters so we have uh system there and the 64 value",
    "start": "1580159",
    "end": "1588880"
  },
  {
    "text": "that you see there is that levels that I was talking about so it's just a value that's checked later on um for most",
    "start": "1588880",
    "end": "1596320"
  },
  {
    "text": "things you can just use 64 and it'll work um and then once we have our system",
    "start": "1596320",
    "end": "1601679"
  },
  {
    "text": "we then have another list that's going to be our tupil that we pass to our system call and here we simply have echo",
    "start": "1601679",
    "end": "1607840"
  },
  {
    "text": "and then pawned by hidden layer so now let's look at how does this actually work so as I mentioned earlier the",
    "start": "1607840",
    "end": "1614400"
  },
  {
    "text": "unbound value what that means is that anything or whatever it's set to is going to be treated as the value from",
    "start": "1614400",
    "end": "1620559"
  },
  {
    "text": "then on so as you can see here if we have a a is our value as soon as a is",
    "start": "1620559",
    "end": "1626000"
  },
  {
    "text": "accessed we see pawned by hidden layer so the actual type of a does not matter so as you can see here we can do uh we",
    "start": "1626000",
    "end": "1633200"
  },
  {
    "text": "can set it to b and then b * 1 we still have ped by hidden layer uh we can pass it into functions and even if it's not",
    "start": "1633200",
    "end": "1639520"
  },
  {
    "text": "what's expected we see pone by hidden layer and then my favorite is if it's actually expecting an object because a",
    "start": "1639520",
    "end": "1645760"
  },
  {
    "text": "lot of times an attacker doesn't have control over you know how something's used so if there is an object that is",
    "start": "1645760",
    "end": "1651840"
  },
  {
    "text": "being accessed from this read RDDS even if you're not returning an object and even if it doesn't have the parameters",
    "start": "1651840",
    "end": "1658159"
  },
  {
    "text": "it can't access the par the parameters and components of the object without first doing the lazy evaluation so that",
    "start": "1658159",
    "end": "1664799"
  },
  {
    "text": "means no matter what you have and no matter what crashes happen your code is always going to be executed first so",
    "start": "1664799",
    "end": "1670640"
  },
  {
    "text": "that means that the payload will run um so obviously we went through and we did",
    "start": "1670640",
    "end": "1676320"
  },
  {
    "text": "responsible disclosure so we uh went to R and uh actually I have to give a shout",
    "start": "1676320",
    "end": "1681440"
  },
  {
    "text": "out to R because they actually patched the vulnerability in a month even though we gave them a three-month uh heads up",
    "start": "1681440",
    "end": "1687600"
  },
  {
    "text": "there uh which is one of the faster turnaround times uh which was great but what R did is they added this function",
    "start": "1687600",
    "end": "1693840"
  },
  {
    "text": "to check whether the topmost returned value was a promise object and the code here is actually the code from the R",
    "start": "1693840",
    "end": "1700480"
  },
  {
    "text": "virtual machine and you can see that it just checks to see if the type is equal to a promise however there were a few",
    "start": "1700480",
    "end": "1707840"
  },
  {
    "text": "problems with that uh we discussed it with R and R wanted to keep going forward with what they had done um but",
    "start": "1707840",
    "end": "1714960"
  },
  {
    "text": "bypasses were found once the research was released so some people were nesting the promise object within an environment",
    "start": "1714960",
    "end": "1720880"
  },
  {
    "text": "because then once the environment was loaded into the main environment the promise object was still evaluated and",
    "start": "1720880",
    "end": "1726640"
  },
  {
    "text": "then some people actually found ways to run the code within the virtual machine without ever returning so I mean once",
    "start": "1726640",
    "end": "1732880"
  },
  {
    "text": "you have a machine or once you have a virtual machine that executes code there's really no way to secure it",
    "start": "1732880",
    "end": "1738000"
  },
  {
    "text": "properly and then what was also interesting was that this patch was only added to the read RDS function whereas",
    "start": "1738000",
    "end": "1745120"
  },
  {
    "text": "there were a lot of different functions that used the RDS virtual machine and loaded RDS files in the R",
    "start": "1745120",
    "end": "1751320"
  },
  {
    "text": "ecosystem so we wanted to go through and show R and we wanted to show R that",
    "start": "1751320",
    "end": "1756799"
  },
  {
    "text": "there was a issue with this in a way that once we published people wouldn't use it if it didn't get patched so we",
    "start": "1756799",
    "end": "1763120"
  },
  {
    "text": "decided to just try to see if our packages could be exploited and our",
    "start": "1763120",
    "end": "1768320"
  },
  {
    "text": "thought behind that was people hopefully aren't just going to download random packages and run them for the most part",
    "start": "1768320",
    "end": "1774159"
  },
  {
    "text": "um for the most part uh so it was a good example for us to kind of show and",
    "start": "1774159",
    "end": "1779440"
  },
  {
    "text": "unlike uh just the regular RDS function uh our packages use something called",
    "start": "1779440",
    "end": "1785679"
  },
  {
    "text": "lazy load uh which you know lazy evaluation system uh to load all of the",
    "start": "1785679",
    "end": "1791279"
  },
  {
    "text": "data into memory from an R package so lazy load was filled with inconsistencies again what you see here",
    "start": "1791279",
    "end": "1797760"
  },
  {
    "text": "on the left is you see the R versions of lazy load uh so if you're ever using R you can just type the function name and",
    "start": "1797760",
    "end": "1803440"
  },
  {
    "text": "it gives you all the R code which is awesome it's really nice uh because you don't have to go hunting down into files",
    "start": "1803440",
    "end": "1809520"
  },
  {
    "text": "but as you can see we call lazy load db fetch and then in lazy load db fetch we have a primitive anytime you're doing",
    "start": "1809520",
    "end": "1816159"
  },
  {
    "text": "anything in R if it calls primitive it will then call into the C code and then",
    "start": "1816159",
    "end": "1821279"
  },
  {
    "text": "here on the left we can see l do lazy load db fetch which is our C code and um",
    "start": "1821279",
    "end": "1826559"
  },
  {
    "text": "what some of you guys may have noticed is whereas the patch for read RDS checked to see if it was a promise",
    "start": "1826559",
    "end": "1831919"
  },
  {
    "text": "object and returned an error in here if there's a promised object we run eval on it uh so it's not ideal so we don't even",
    "start": "1831919",
    "end": "1839760"
  },
  {
    "text": "have to wait for the promise object to propagate up because as soon as the pro promise object exists it will be",
    "start": "1839760",
    "end": "1845520"
  },
  {
    "text": "executed so where do people actually get these R packages so mainly people get uh R",
    "start": "1845520",
    "end": "1852720"
  },
  {
    "text": "packages from the comprehensive R archive network or CRAN which is about 21,000 packages so that's the official R",
    "start": "1852720",
    "end": "1859760"
  },
  {
    "text": "package list and that's what you can just access obviously there are third party uh sources for packages like RF",
    "start": "1859760",
    "end": "1865840"
  },
  {
    "text": "forge and then there's also package lists that are very specific to certain types of pro uh projects or fields like",
    "start": "1865840",
    "end": "1872720"
  },
  {
    "text": "bioonductor which is bioatistics work um and what you can see here on the right",
    "start": "1872720",
    "end": "1877840"
  },
  {
    "text": "is we have a nice little tree of just what an R package looks like so this is compiler this is one of the built-in R",
    "start": "1877840",
    "end": "1884559"
  },
  {
    "text": "packages and as you can see it's filled with RDS files which are is already a",
    "start": "1884559",
    "end": "1889720"
  },
  {
    "text": "problem but if you look into the R folder you see that we have a compiler.rdb and a compiler rdx and",
    "start": "1889720",
    "end": "1896720"
  },
  {
    "text": "those are the main workhorse or workh horses for actually loading an R package",
    "start": "1896720",
    "end": "1902240"
  },
  {
    "text": "so looking into these files an RDX file is pretty much just an RDS file just with a different file extension and what",
    "start": "1902240",
    "end": "1909039"
  },
  {
    "text": "it is is it's a vector so uh we have just a vector it has a bunch of the",
    "start": "1909039",
    "end": "1914080"
  },
  {
    "text": "names of just the functions the environments that are within the R package and then it has a offset from",
    "start": "1914080",
    "end": "1919919"
  },
  {
    "text": "the start of the file and then the length of data so let's say I want to load function A the R virtual machine",
    "start": "1919919",
    "end": "1926720"
  },
  {
    "text": "uses read RDS to load the RDX file it then goes through it checks to see which",
    "start": "1926720",
    "end": "1932159"
  },
  {
    "text": "one is a grabs the offset it then loads the RDB file goes to that offset and",
    "start": "1932159",
    "end": "1938159"
  },
  {
    "text": "then extracts the length of data from there and then that length of data from the RDB file and the RDB file is just a",
    "start": "1938159",
    "end": "1944880"
  },
  {
    "text": "blob of data so just lots of different consecutive blobs so the first four",
    "start": "1944880",
    "end": "1950720"
  },
  {
    "text": "bytes are the decompressed length and the decompressed length here is actually",
    "start": "1950720",
    "end": "1956080"
  },
  {
    "text": "used for allocating space before it decompresses the serialized data um if",
    "start": "1956080",
    "end": "1961760"
  },
  {
    "text": "you guys want to look there as well and then we have the actual compressed serialized data which is then de uh",
    "start": "1961760",
    "end": "1968159"
  },
  {
    "text": "decompressed and then we actually loaded into memory so obviously we wanted to go",
    "start": "1968159",
    "end": "1973760"
  },
  {
    "text": "through and we wanted to see you know we had this way that we could see that RDB files were potentially malicious so",
    "start": "1973760",
    "end": "1980320"
  },
  {
    "text": "those R packages so we actually went through every single R CRAN package and",
    "start": "1980320",
    "end": "1986000"
  },
  {
    "text": "checked to see if there were any promise objects on that top level and while we didn't find anything malicious we",
    "start": "1986000",
    "end": "1992080"
  },
  {
    "text": "actually did find quite a few projects that did use the promise object at the very top so we just wanted to talk about",
    "start": "1992080",
    "end": "1998159"
  },
  {
    "text": "that as well so here is Datos uh what you see here is a screenshot from our",
    "start": "1998159",
    "end": "2003279"
  },
  {
    "text": "crayon so just gives some package information as well as their GitHub and then we have a snippet of the code that",
    "start": "2003279",
    "end": "2008960"
  },
  {
    "text": "actually generates the promise objects in the RDB file so delayed assign is",
    "start": "2008960",
    "end": "2014000"
  },
  {
    "text": "generally used to create those promise objects in memory so we uh and then so",
    "start": "2014000",
    "end": "2019120"
  },
  {
    "text": "that's what we looked for and what you see here is that there's a bunch of delayed assigns in this package and what",
    "start": "2019120",
    "end": "2025360"
  },
  {
    "text": "they do is they load in a script a text file parse that as R code and then run",
    "start": "2025360",
    "end": "2031600"
  },
  {
    "text": "eval on it and this all happens as soon as the R package is loaded before you even access a specific function so it's",
    "start": "2031600",
    "end": "2038640"
  },
  {
    "text": "something that we wanted to look into to see if it was malicious um while this package was not malicious what it did is",
    "start": "2038640",
    "end": "2044480"
  },
  {
    "text": "it loaded in some data and then it just um ran it could very easily become",
    "start": "2044480",
    "end": "2050398"
  },
  {
    "text": "malicious if somebody can just sneak in code that won't even run when you call a specific function but as soon as you",
    "start": "2050399",
    "end": "2056320"
  },
  {
    "text": "load the package into your environment so as Tom mentioned we had uh two",
    "start": "2056320",
    "end": "2062240"
  },
  {
    "text": "different open source projects that we will be releasing and I love their names the first is hidden pickle so hidden",
    "start": "2062240",
    "end": "2068878"
  },
  {
    "text": "pickle will actually have four main components and uh this link is live so if you do want to use the tool it's all",
    "start": "2068879",
    "end": "2075118"
  },
  {
    "text": "on there and that is all the assembly that Tom showed um so the tool as I mentioned has four parts the first is a",
    "start": "2075119",
    "end": "2081760"
  },
  {
    "text": "disassembler which allows you to disassemble the pickle files without running arbitrary code but it also",
    "start": "2081760",
    "end": "2086800"
  },
  {
    "text": "handles files that are missing the proto instruction missing the stop instruction so you can really disassemble anything",
    "start": "2086800",
    "end": "2092480"
  },
  {
    "text": "that you want we have a patcher so let's say you don't want to compile an entire pickle file by hand uh you can hook",
    "start": "2092480",
    "end": "2098960"
  },
  {
    "text": "specific instructions to alter their values or you can add or remove instructions based on patterns in the file we have a compiler which allows you",
    "start": "2098960",
    "end": "2106640"
  },
  {
    "text": "to compile pickle files either programmatically or by hand and then we also allow you to have complete control",
    "start": "2106640",
    "end": "2113119"
  },
  {
    "text": "over the generation of those pickle files so with this tool you can actually build every single attack that we have",
    "start": "2113119",
    "end": "2118800"
  },
  {
    "text": "showed you today and then finally we have our dynamic function pickle where it was that generate uh programmatic",
    "start": "2118800",
    "end": "2125200"
  },
  {
    "text": "pickle where you just give it a function and it will load run that function uh as a pickle itself and then we also have",
    "start": "2125200",
    "end": "2131760"
  },
  {
    "text": "hidden promise so hidden promise has three main components that link is also live if you want to go to it the first",
    "start": "2131760",
    "end": "2137440"
  },
  {
    "text": "is a disassembler so it allows you to disassemble those RDB files and whereas",
    "start": "2137440",
    "end": "2142880"
  },
  {
    "text": "pickle uh our pickle disassembler just gives you straight disassembly the R uh hidden promise will actually convert all",
    "start": "2142880",
    "end": "2149839"
  },
  {
    "text": "of the R objects into Python objects so that you can traverse them and easily check values uh we also have a package",
    "start": "2149839",
    "end": "2156880"
  },
  {
    "text": "explorer which allows you to automatically disassemble RDX and RDB files as well as scan RDS RDX RDX and",
    "start": "2156880",
    "end": "2163680"
  },
  {
    "text": "RDB files for that malicious code and then finally of course a compiler which allows you to compile new RDS fun files",
    "start": "2163680",
    "end": "2171040"
  },
  {
    "text": "as well as inject code into existing RDB files so rather than having to build an RD uh B file from scratch you can take",
    "start": "2171040",
    "end": "2177920"
  },
  {
    "text": "an existing RB RDB file select a function or variable that you want to change and then you can inject whatever",
    "start": "2177920",
    "end": "2183680"
  },
  {
    "text": "code you want into that so we have our nice little sign sound bites as well that we want you to",
    "start": "2183680",
    "end": "2190000"
  },
  {
    "text": "come away with uh the first is please just ensure that your des serialization methods match your actual needs so hey",
    "start": "2190000",
    "end": "2197119"
  },
  {
    "text": "Tom if we have a project that uses pickle for like list and strings what can we use i mean JSON would be a very",
    "start": "2197119",
    "end": "2203920"
  },
  {
    "text": "good start for a lot of smaller you don't need a pickle for things like that next is attackers should scrutinize any",
    "start": "2203920",
    "end": "2211520"
  },
  {
    "text": "deserialization proc uh processes for potential exploits but specifically those that actually have an entire VM",
    "start": "2211520",
    "end": "2218480"
  },
  {
    "text": "aren't like a dumb format but run code to deserialize and yeah those are fun so",
    "start": "2218480",
    "end": "2223920"
  },
  {
    "text": "Tom what what do you normally say when you see a deserialization process with a virtual machine well I know you get very",
    "start": "2223920",
    "end": "2230160"
  },
  {
    "text": "excited i do get very excited yeah and then finally uh protect file formats um",
    "start": "2230160",
    "end": "2236240"
  },
  {
    "text": "to protect them you really need a deep understanding of their internal workings a lot of people will just or a lot of",
    "start": "2236240",
    "end": "2241760"
  },
  {
    "text": "projects will just try to scan basic patterns so we've seen a lot of open source scanners for pickle they just",
    "start": "2241760",
    "end": "2247200"
  },
  {
    "text": "look for very specific strings in it and they can be bypassed fairly easily and I",
    "start": "2247200",
    "end": "2252960"
  },
  {
    "text": "mean Tom how many ways have we found to execute just in built-in Python functions execute code i mean in the",
    "start": "2252960",
    "end": "2259680"
  },
  {
    "text": "standard libraries a couple of hundred and then with some of the third parties a few hundred more yeah so imagine",
    "start": "2259680",
    "end": "2265440"
  },
  {
    "text": "trying to come up with every single Python function that could potentially execute code when there's hundreds of",
    "start": "2265440",
    "end": "2270640"
  },
  {
    "text": "them and not just the functions the classes sometimes when you instantiate them run code well thank you very much",
    "start": "2270640",
    "end": "2276320"
  },
  {
    "text": "for coming to our talk uh anybody who has Q&A uh we have about a minute and a half left but then we can also move over",
    "start": "2276320",
    "end": "2282480"
  },
  {
    "text": "to the wrap-up room if you want to come there as well",
    "start": "2282480",
    "end": "2287620"
  },
  {
    "text": "[Applause]",
    "start": "2287620",
    "end": "2294400"
  },
  {
    "text": "question over there please come to the Yeah yeah",
    "start": "2294480",
    "end": "2299800"
  },
  {
    "text": "so for I I I mean I scan pickles i think most models hosted on hugging face are",
    "start": "2306079",
    "end": "2312960"
  },
  {
    "text": "have pickle files right so I build safe tensors for that do you have something",
    "start": "2312960",
    "end": "2318640"
  },
  {
    "text": "like that for R or did R come up with something uh so R added the patch um and so R did",
    "start": "2318640",
    "end": "2328079"
  },
  {
    "text": "a similar approach to Python where they put the warning on now so people shouldn't deserialize untrusted data",
    "start": "2328079",
    "end": "2334000"
  },
  {
    "text": "which is the same with Pickle you really shouldn't um and then as for our packages it's uh what they say is make",
    "start": "2334000",
    "end": "2340320"
  },
  {
    "text": "sure you review the code before you actually load it into your system um yeah that makes sense but have you have",
    "start": "2340320",
    "end": "2347280"
  },
  {
    "text": "you seen the safe tens of files do you do you think there are exploit I mean ways to get code exec using them so the",
    "start": "2347280",
    "end": "2355040"
  },
  {
    "text": "safe tensor format is actually really nice um they do a really good job so it's as I said like a dumb format as we",
    "start": "2355040",
    "end": "2361680"
  },
  {
    "text": "were saying where it just loads the data and nothing else and it's just integers or floats uh however we have seen and",
    "start": "2361680",
    "end": "2369680"
  },
  {
    "text": "published research where uh converting over into the safe tensor",
    "start": "2369680",
    "end": "2374880"
  },
  {
    "text": "format you have a lot of vulnerabilities in there so HuggingFace actually had a service to convert uh like PyTorch files",
    "start": "2374880",
    "end": "2381040"
  },
  {
    "text": "into safe tensor files and that was exploitable um and could potentially impact other users as well yeah",
    "start": "2381040",
    "end": "2386880"
  },
  {
    "text": "interesting i think I think so i'm I work at data bricks i think we do the same thing so I better check that thank",
    "start": "2386880",
    "end": "2392640"
  },
  {
    "text": "you for your questions yeah thank you you cheers and then uh we'll move over to the",
    "start": "2392640",
    "end": "2397760"
  },
  {
    "text": "wrap-up room if anybody wants to come since we're out of time thank you for coming",
    "start": "2397760",
    "end": "2403720"
  }
]