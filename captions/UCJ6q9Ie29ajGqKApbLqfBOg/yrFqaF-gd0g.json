[
  {
    "text": "this session is more shadow-walker the progression of TLB splitting on x86 by",
    "start": "30",
    "end": "6629"
  },
  {
    "text": "Jakob Torre morning my name is Jacob",
    "start": "6629",
    "end": "16170"
  },
  {
    "text": "Torre I'll be showing a how shadow-walker and a few other tools have been used and kind of show the evolution",
    "start": "16170",
    "end": "22890"
  },
  {
    "text": "of TLB splitting and also what TLB splitting is for those you don't already know and how it's evolved over the years",
    "start": "22890",
    "end": "29099"
  },
  {
    "text": "you're welcome to follow me on Twitter I know I'm figuring in between you and lunch or the the fun that will be",
    "start": "29099",
    "end": "35670"
  },
  {
    "text": "standing in line for your DEFCON badge right after this so I will appreciate you being here and taking the time out",
    "start": "35670",
    "end": "43129"
  },
  {
    "text": "so really quickly about me I lead a group of researchers out in Denver for a company called AIS we do really low",
    "start": "43129",
    "end": "49710"
  },
  {
    "text": "level stuff so since I've been there I've written SMM handler slash rootkit my own BIOS hypervisor that kind of",
    "start": "49710",
    "end": "56850"
  },
  {
    "text": "stuff and I like the outdoors as well and that's why I moved out to Denver a couple pre-talk notes I cover some some",
    "start": "56850",
    "end": "63930"
  },
  {
    "text": "very technical stuff so if I'm not making myself clear at any time please feel free to jump in politely and I'm",
    "start": "63930",
    "end": "70530"
  },
  {
    "text": "happy to clarify the the rotten fruit and the heckling session that will be saved towards the end I have a slide for",
    "start": "70530",
    "end": "76650"
  },
  {
    "text": "that and I only speak from me myself and I and none of the the people I mentioned",
    "start": "76650",
    "end": "81990"
  },
  {
    "text": "here so let's go on so I'm gonna give a",
    "start": "81990",
    "end": "87540"
  },
  {
    "text": "little bit of background about what TLB splitting is how it works and then a little bit more about what the operating",
    "start": "87540",
    "end": "93090"
  },
  {
    "text": "system and how x86 kind of supports the operating system and and keeping you guys safe from rogue applications and",
    "start": "93090",
    "end": "99810"
  },
  {
    "text": "malware or doesn't as a case might be a little bit of history about packs and gr",
    "start": "99810",
    "end": "105270"
  },
  {
    "text": "security a defensive tool back from 2000 shadow-walker and offensive tool from about 2005 and then some of the work",
    "start": "105270",
    "end": "112590"
  },
  {
    "text": "that I've done for a DARPA cyber fast track program and then swinging that to",
    "start": "112590",
    "end": "118049"
  },
  {
    "text": "the offense if this is blackhat after all so I'll draw some conclusions and",
    "start": "118049",
    "end": "125820"
  },
  {
    "text": "wrap up so then we can all get some food or head to the bar",
    "start": "125820",
    "end": "132120"
  },
  {
    "text": "so this is me pretty basic for a lot of you but I just wanted to make sure I had it covered just for those of you who might not be so aware xa6 which is the",
    "start": "132120",
    "end": "140370"
  },
  {
    "text": "Intel processor commonly found in your laptops and desktops supports different rings of protection so ring three is the",
    "start": "140370",
    "end": "147360"
  },
  {
    "text": "least privileged it's the outermost ring that's where your user applications are going to sit Rings 1 & 2 currently are",
    "start": "147360",
    "end": "153540"
  },
  {
    "text": "not really used MINIX ism kind of a more academic one they use rings 1 & 2 but",
    "start": "153540",
    "end": "159420"
  },
  {
    "text": "we'll just ignore those rings 0 is traditionally considered your kernel that's where Windows or Linux will sit",
    "start": "159420",
    "end": "165360"
  },
  {
    "text": "and then ring minus 1 is a newer name for the hypervisor so it's been added much later but it has more privileged",
    "start": "165360",
    "end": "171660"
  },
  {
    "text": "than the in the operating system kernel if you want to keep going down there's also ring -2 which is system management",
    "start": "171660",
    "end": "178170"
  },
  {
    "text": "mode again more privileged but sorry so",
    "start": "178170",
    "end": "187170"
  },
  {
    "text": "my start off again basic we're going to assume that most of you guys know this",
    "start": "187170",
    "end": "192510"
  },
  {
    "text": "but there's some x86 stuff that provides the capability of doing virtual memory so on 32-bit system each application",
    "start": "192510",
    "end": "200730"
  },
  {
    "text": "kinda lives in its own but it assumes to be a 4 gigabyte flat address space and",
    "start": "200730",
    "end": "207650"
  },
  {
    "text": "that application then that address space even if you don't have 4 gigabytes of memory the application thinks it does",
    "start": "207650",
    "end": "214560"
  },
  {
    "text": "and it can't operate an access memory that might be in the kernel space or another application before this happened",
    "start": "214560",
    "end": "220919"
  },
  {
    "text": "and before this was added to the CPUs you know back in da serra an application that went rogue so to speak could",
    "start": "220919",
    "end": "227669"
  },
  {
    "text": "overwrite the the DOS kernel and infect the entire system so it's a protective measure coming out of the CPU that",
    "start": "227669",
    "end": "234930"
  },
  {
    "text": "allows the operating system to improve its protection for ways to break out of",
    "start": "234930",
    "end": "240090"
  },
  {
    "text": "this please see my article in POC or gtfo coming out on Friday you can get a copy at the no starch press booth in",
    "start": "240090",
    "end": "246780"
  },
  {
    "text": "print or you can download it at a mirror near you so again more on address",
    "start": "246780",
    "end": "255030"
  },
  {
    "text": "translations this is how you actually go from a virtual memory address to a physical memory address so your virtual",
    "start": "255030",
    "end": "261090"
  },
  {
    "text": "address so the pointer you access and see consists essentially that addresses and offset into a table and then an offset",
    "start": "261090",
    "end": "267990"
  },
  {
    "text": "into a page in the most simple case so there's a register on the CPU cr3 control register 3 that stores the",
    "start": "267990",
    "end": "274289"
  },
  {
    "text": "physical address base of the page directory this is usually kind of different for each applications they can",
    "start": "274289",
    "end": "280080"
  },
  {
    "text": "have their own unique view of memory and then that points the page directory so",
    "start": "280080",
    "end": "285120"
  },
  {
    "text": "the first couple bits of your virtual pointer index into that and then you get another part of an address and then then",
    "start": "285120",
    "end": "290969"
  },
  {
    "text": "the next is the offset which is uh you know used with the offset from your virtual pointer and so that's how you",
    "start": "290969",
    "end": "296699"
  },
  {
    "text": "can go from a virtual address to a physical address this is a very simple example I think if you had a full system",
    "start": "296699",
    "end": "303029"
  },
  {
    "text": "with a hypervisor etc you could have up to seven levels of indirection this is",
    "start": "303029",
    "end": "313199"
  },
  {
    "text": "really slow as we know memory takes a long time to access compared to cache",
    "start": "313199",
    "end": "318719"
  },
  {
    "text": "and so if you're accessing one byte of memory from a certain page that hasn't been accessed recently you're going to",
    "start": "318719",
    "end": "324990"
  },
  {
    "text": "have to go get the page table look through that and get a pointer to the page the next level and kind of proceed",
    "start": "324990",
    "end": "330779"
  },
  {
    "text": "back and forth so you might be hitting RAM or waiting on ramped up to like seven times in this example here it's",
    "start": "330779",
    "end": "337020"
  },
  {
    "text": "only two or three times before you actually get that you know one byte of memory you want it as an application",
    "start": "337020",
    "end": "343639"
  },
  {
    "text": "so the solution TLB translation",
    "start": "343639",
    "end": "348690"
  },
  {
    "text": "lookaside buffer so this is essentially it just a cache so in your accessing memory is if it's already been accessed",
    "start": "348690",
    "end": "354689"
  },
  {
    "text": "recently and then that's stored in the translation lookaside buffer fantastic you just use that that mapping that's",
    "start": "354689",
    "end": "361199"
  },
  {
    "text": "already stored there and you can proceed otherwise you walk through the tables and then you save that mapping and you",
    "start": "361199",
    "end": "367500"
  },
  {
    "text": "proceed so this is how everything is advertised if you read the software",
    "start": "367500",
    "end": "374009"
  },
  {
    "text": "manuals or if you you know read some of the toriel's online but in order to actually optimize this so this is going",
    "start": "374009",
    "end": "380669"
  },
  {
    "text": "from a logical TLB is a logical unit in the how the CPU works if you're gonna go",
    "start": "380669",
    "end": "386430"
  },
  {
    "text": "and actually look at that if you take a CPU and look at it you know in a an x-ray or whatnot you're actually gonna",
    "start": "386430",
    "end": "391919"
  },
  {
    "text": "see two TLB if not more and so you're gonna have a data TLB which is",
    "start": "391919",
    "end": "398150"
  },
  {
    "text": "closer to your data caches and then you're gonna have an instruction TLB which is close to your instruction caches and all your instruction fetch",
    "start": "398150",
    "end": "404210"
  },
  {
    "text": "logic they operate in sync 100% of the time so it's essentially a von Neumann",
    "start": "404210",
    "end": "409700"
  },
  {
    "text": "task architecture so your view of memory if you're looking at it as data and as",
    "start": "409700",
    "end": "415460"
  },
  {
    "text": "code are going to be this consistent so this makes perfect sense for most of you if you access virtual address 0 X 1000",
    "start": "415460",
    "end": "422060"
  },
  {
    "text": "and you read that instruction and you just Cemil the first instruction and then you jump to it you're actually going to execute that what we're going",
    "start": "422060",
    "end": "429200"
  },
  {
    "text": "to talk about today is is D synchronizing or splitting the TLB so in shadow-walker or packs you'll see in the",
    "start": "429200",
    "end": "434870"
  },
  {
    "text": "second diagram that your data TLB will point to a different region of memory than your instruction TLB so this kind",
    "start": "434870",
    "end": "440780"
  },
  {
    "text": "of gets into that more of a Harvard architecture so if you guys play with some embedded stuff the AVR is a Harvard",
    "start": "440780",
    "end": "447320"
  },
  {
    "text": "architecture so you know what might be at pointer you know 1,000 if you read it",
    "start": "447320",
    "end": "452720"
  },
  {
    "text": "as data would be different than if you actually jump to it and so you'll see how this is used for both for both good",
    "start": "452720",
    "end": "458990"
  },
  {
    "text": "and ill throughout the talk here I've",
    "start": "458990",
    "end": "466340"
  },
  {
    "text": "shame Lilly shameful shamelessly stolen a block diagram from the Intel software",
    "start": "466340",
    "end": "472100"
  },
  {
    "text": "developer manuals showing that you know in highlighted in red you have an instruction TLB and a data TLB and in",
    "start": "472100",
    "end": "478640"
  },
  {
    "text": "pre Nehalem architecture this is what this talk is covering so far so this is up to and including a Core 2 Duo so this",
    "start": "478640",
    "end": "488420"
  },
  {
    "text": "right here is the procedure for how to actually do the split so what you're going to do is you're going to trap on",
    "start": "488420",
    "end": "493580"
  },
  {
    "text": "some kind of fault so a page fault handler general protection fault you're going to determine if that fault",
    "start": "493580",
    "end": "499040"
  },
  {
    "text": "happened because of a data or an instruction fetch so there's a couple different ways you can do that if it's a",
    "start": "499040",
    "end": "504470"
  },
  {
    "text": "page fault there's an exit condition that's pushed on the stack that says if it's data or instruction or you can",
    "start": "504470",
    "end": "509900"
  },
  {
    "text": "check the EIP and the faulting address and cr2 you figure that out essentially and then you prime the proper TLB by",
    "start": "509900",
    "end": "517310"
  },
  {
    "text": "either setting you know data access bits in the page tables and then reading through that to put that memory into the",
    "start": "517310",
    "end": "524030"
  },
  {
    "text": "or that that mapping into the the data TLB",
    "start": "524030",
    "end": "529670"
  },
  {
    "text": "or you can set the trap flag which will put the CPU into single stepping mode",
    "start": "529670",
    "end": "534710"
  },
  {
    "text": "and then execute that one instruction that was faulting which will then prime the itlp here the instruction TLB and",
    "start": "534710",
    "end": "540920"
  },
  {
    "text": "then what you're gonna do you're going to clear the bit so we'll trap back to you again but you're gonna leave it in the TLB so you're not gonna flush the",
    "start": "540920",
    "end": "547460"
  },
  {
    "text": "TLB so now you're basically D synchronizing what's in the page tables and what's in the TLB and so the TLB",
    "start": "547460",
    "end": "554150"
  },
  {
    "text": "next time a program accesses that page if it's still in the TLB it will run through and point to wherever you",
    "start": "554150",
    "end": "559610"
  },
  {
    "text": "pointed it to and if it's not if it gets you know cleared out because some other mapping has taken its place it'll jump",
    "start": "559610",
    "end": "566000"
  },
  {
    "text": "back and you'll have to repeat this process are there any questions yet I",
    "start": "566000",
    "end": "571010"
  },
  {
    "text": "know this is pretty low level stuff I gave a talk at b-sides and no one asked any questions and then as soon as that",
    "start": "571010",
    "end": "576920"
  },
  {
    "text": "okay thanks everyone got up and formed a line to ask me clarifying questions so they're too embarrassed so please if you",
    "start": "576920",
    "end": "582620"
  },
  {
    "text": "have a question jump in not",
    "start": "582620",
    "end": "587890"
  },
  {
    "text": "sure so the question is is why is it different from data and instruction cache so when you're priming the data",
    "start": "602390",
    "end": "609470"
  },
  {
    "text": "cache all you need to do is access memory at data as data so by doing like",
    "start": "609470",
    "end": "615110"
  },
  {
    "text": "a movie a X from that address and that will go through the data fetch logic and it will prime the data TLB and so you",
    "start": "615110",
    "end": "622130"
  },
  {
    "text": "can do that right and the kernel it's very easy to do and then to do it and so usually what you're doing here is is",
    "start": "622130",
    "end": "628519"
  },
  {
    "text": "that you're paging out the memory in the page table so it will fall to you that's the kind of the first step that's how",
    "start": "628519",
    "end": "633649"
  },
  {
    "text": "you get the trapping and then you're going to determine which I mentioned already whether it's data or instruction",
    "start": "633649",
    "end": "639560"
  },
  {
    "text": "and then what you're going to do is are going to update where the the next kind of where the actual memory page is in",
    "start": "639560",
    "end": "646339"
  },
  {
    "text": "the page entry so if you're splitting it you know for data is going to go to address 2000 and instructions are going",
    "start": "646339",
    "end": "653540"
  },
  {
    "text": "to go to address 1000 then you're going to update that accordingly and then either access data which will then prime",
    "start": "653540",
    "end": "659930"
  },
  {
    "text": "a data TLB or you'll execute that one instruction which will do an instruction fetch and then it will go through and it",
    "start": "659930",
    "end": "666019"
  },
  {
    "text": "will prime the I TLB and then you're going to set the page tables back to not present so that it once it kind of gets",
    "start": "666019",
    "end": "671209"
  },
  {
    "text": "cleared out of the TLB you're going to come back and you're going to have to repeat this process once the cash runs",
    "start": "671209",
    "end": "677360"
  },
  {
    "text": "out",
    "start": "677360",
    "end": "679510"
  },
  {
    "text": "yes so this is running as either a page fault handler or any general protection",
    "start": "683770",
    "end": "689089"
  },
  {
    "text": "for this is all happening in the kernel right now thank you all right some history so 2000",
    "start": "689089",
    "end": "695870"
  },
  {
    "text": "packs gr security they came out something called page exec so that's if",
    "start": "695870",
    "end": "702050"
  },
  {
    "text": "you're not familiar with PAC it's pretty impressive stuff it's set of Linux kernel patches that kind of improve security and they've stopped stuff that",
    "start": "702050",
    "end": "709100"
  },
  {
    "text": "you know people like the few text bug and stuff like that they've had some defenses against that like way way long",
    "start": "709100",
    "end": "714860"
  },
  {
    "text": "ago and so the one we're going to talk about is there a capability called page exec and so what that was is a set of",
    "start": "714860",
    "end": "721820"
  },
  {
    "text": "patches that allow you to emulate the know execute bit on systems that didn't actually have the know execute bit",
    "start": "721820",
    "end": "727610"
  },
  {
    "text": "hardware so if you're not familiar know execute it's exactly what it sounds like you can say if you have the stack",
    "start": "727610",
    "end": "733550"
  },
  {
    "text": "address the stack page you can mark as no execute which basically breaks the",
    "start": "733550",
    "end": "738709"
  },
  {
    "text": "traditional kind of old-school smashing attack attempt so you know and your buffer overflow what you're gonna do is",
    "start": "738709",
    "end": "745279"
  },
  {
    "text": "you're going to load some shellcode onto the stack you're gonna control the return address pointer you're gonna go back and execute that on the stack so",
    "start": "745279",
    "end": "751430"
  },
  {
    "text": "the no execute bit on modern systems will prevent that from happening which is kind of driven the move to return her",
    "start": "751430",
    "end": "757250"
  },
  {
    "text": "into programming turn to Lib C attacks because that way you're not actually executing on the stack you're just controlling execution to go to other",
    "start": "757250",
    "end": "763850"
  },
  {
    "text": "locations for you how they did this was was brilliant so what they did was is they actually",
    "start": "763850",
    "end": "769310"
  },
  {
    "text": "overloaded the user supervisor bit which is not used all that much and so user",
    "start": "769310",
    "end": "775250"
  },
  {
    "text": "we're talking about ring three and a supervisor would be ring zero so essentially what they did is that by",
    "start": "775250",
    "end": "781579"
  },
  {
    "text": "default the pages would be in supervisor bit motor or paged out and then when the",
    "start": "781579",
    "end": "786980"
  },
  {
    "text": "application would come and try to execute this page it would see that it was not pitched out it would go in it",
    "start": "786980",
    "end": "792500"
  },
  {
    "text": "would cause a general protection fault and then it would be able to identify okay either this is a it was a data",
    "start": "792500",
    "end": "798920"
  },
  {
    "text": "request it would set the user bit and allow it to go through and would prime that data TLB and if it was an",
    "start": "798920",
    "end": "805190"
  },
  {
    "text": "instruction fetch request it would say okay so this is being violate some one is trying to execute on no execute bit",
    "start": "805190",
    "end": "810380"
  },
  {
    "text": "page and it would terminate the program log whatever needed to do and so this",
    "start": "810380",
    "end": "816110"
  },
  {
    "text": "allows you to actually you know add these protections kind of later yeah",
    "start": "816110",
    "end": "821170"
  },
  {
    "text": "yes you don't set it explicitly you don't either prime the data teal there's no different instructions to prime me",
    "start": "833400",
    "end": "839050"
  },
  {
    "text": "that the data TLB or prime the instruction TLB you're doing that kind of transparently by either accessing",
    "start": "839050",
    "end": "845260"
  },
  {
    "text": "data through the in data's fetch logic which will default lis you know it will I can automatically prime that usually",
    "start": "845260",
    "end": "856390"
  },
  {
    "text": "just by accessing memory it will happen in the memory management unit so you don't really control that other processor types like SPARC you can",
    "start": "856390",
    "end": "862930"
  },
  {
    "text": "actually write T codes and you can change how that logic is done but on x86 it just happens it's in the microcode",
    "start": "862930",
    "end": "868300"
  },
  {
    "text": "yeah this worked on prenatal M CPUs there's really no point for it now",
    "start": "868300",
    "end": "874060"
  },
  {
    "text": "because almost all systems have no execute bit done in hardware saves you some performance stuff and then the nice",
    "start": "874060",
    "end": "880360"
  },
  {
    "text": "thing about this from a performance standpoint is that since you're caching the TLB every time that application accesses",
    "start": "880360",
    "end": "885970"
  },
  {
    "text": "that pages data so the stacker become they push or pop from the stack it's going to be in the cache and it's not",
    "start": "885970",
    "end": "891460"
  },
  {
    "text": "going to have to go through this whole process until it falls out jumping ahead",
    "start": "891460",
    "end": "897430"
  },
  {
    "text": "five years and swinging from a defensive capability to an offensive capability Jayme Butler and sherry sparks came out",
    "start": "897430",
    "end": "904000"
  },
  {
    "text": "with the shadow-walker rootkit pretty well-known I'm guessing probably some of you have heard of it it was a memory",
    "start": "904000",
    "end": "910330"
  },
  {
    "text": "hiding rootkit so rather than just denying access to say an instruction fetch versus data fetch it actually",
    "start": "910330",
    "end": "916000"
  },
  {
    "text": "pointed where the memory was accessed to different locations and so originally it was protecting the fu rootkit and so",
    "start": "916000",
    "end": "924010"
  },
  {
    "text": "what it would do is it would split the TLB so that if there was some antivirus software out there that was scanning",
    "start": "924010",
    "end": "929260"
  },
  {
    "text": "kernel memory and checking it against a known good signature or looking for an obvious patch or deviant it would access",
    "start": "929260",
    "end": "936130"
  },
  {
    "text": "the read write axon that was split and pointing to the the legitimate kernel",
    "start": "936130",
    "end": "941650"
  },
  {
    "text": "but if you were to actually jumped to that address you'd be accessing the the patch version and they need to be",
    "start": "941650",
    "end": "947500"
  },
  {
    "text": "running the rootkit and so it's a very clever way to to kind of hide what was going on and the only",
    "start": "947500",
    "end": "953500"
  },
  {
    "text": "way to see it was to do some kind of behavioral analysis to see if the state had changed kind of wallet was executing",
    "start": "953500",
    "end": "959200"
  },
  {
    "text": "so very clever again pre Nehalem CPU",
    "start": "959200",
    "end": "964740"
  },
  {
    "text": "all good things must come to pass intel introduces the Nehalem architecture and",
    "start": "967210",
    "end": "972380"
  },
  {
    "text": "actually breaks TLB splitting they added a level two cache the TLB also known as an sto b or a shared TLB",
    "start": "972380",
    "end": "979640"
  },
  {
    "text": "which breaks the previous TLB splitting architecture so what happens is you're",
    "start": "979640",
    "end": "985160"
  },
  {
    "text": "gonna have kind of just like a level two and a level one cache when you write to the level one cache it's also going to",
    "start": "985160",
    "end": "990230"
  },
  {
    "text": "be saved at level two cache and then if it's not in the level one cache will go to level two cache before going out to",
    "start": "990230",
    "end": "995990"
  },
  {
    "text": "main memory or in this case going to your fault handler so what you're gonna do is say you're trying to prime the",
    "start": "995990",
    "end": "1001810"
  },
  {
    "text": "data TLB you'll prime the data TLB which will then also prime the shared TLB and",
    "start": "1001810",
    "end": "1007270"
  },
  {
    "text": "then when you try to you know kind of trap on an instruction fetch the instruction TLB is going to ask the",
    "start": "1007270",
    "end": "1013150"
  },
  {
    "text": "shared tail be before faulting and saying and you have a mapping for this a shared till you'll say sure do here you",
    "start": "1013150",
    "end": "1018700"
  },
  {
    "text": "go and so that's why it kind of it breaks the system here's a block diagram",
    "start": "1018700",
    "end": "1024790"
  },
  {
    "text": "so you can kind of see how they've they've separated out where the data TLB in the eye TLB are and then highlighted",
    "start": "1024790",
    "end": "1030400"
  },
  {
    "text": "in red is is this shared TLB again this is from the the Intel software developer manuals and so this really kind of kind",
    "start": "1030400",
    "end": "1037630"
  },
  {
    "text": "of screwed the pooch for a lot of stuff I don't think I'd be standing here and",
    "start": "1037630",
    "end": "1045579"
  },
  {
    "text": "telling you this if that was the end of the talk I'd probably also have done a 20-minute talk rather than a 50-minute talk so now",
    "start": "1045579",
    "end": "1052570"
  },
  {
    "text": "I'm going to go through a little bit more background to kind of take you from where we are now to how we're able to do this now and new and Hale in the newer",
    "start": "1052570",
    "end": "1058720"
  },
  {
    "text": "CPUs so for that we're gonna need a few more technologies from Intel so we're",
    "start": "1058720",
    "end": "1064870"
  },
  {
    "text": "gonna need EPT which is the extended page tables so these add an additional layer of translation so now you're",
    "start": "1064870",
    "end": "1070510"
  },
  {
    "text": "mapping on a virtual address to a physical address you're mapping a guest physical to a machine physical so if you",
    "start": "1070510",
    "end": "1077260"
  },
  {
    "text": "can imagine splitting it up each guest will run their translation from a virtual pointer to a physical pointer",
    "start": "1077260",
    "end": "1082930"
  },
  {
    "text": "and then it will run through the EPT page tables and go from that guest physical to the actual machine physical",
    "start": "1082930",
    "end": "1089380"
  },
  {
    "text": "if then goes out over into RAM rather than triggering a page fault and trigger",
    "start": "1089380",
    "end": "1094600"
  },
  {
    "text": "an EPT fault that's a VM exit so it goes right to the hypervisor so now we're talking about hypervisor not kernel",
    "start": "1094600",
    "end": "1100179"
  },
  {
    "text": "talking ring zero or ring - one not ring zero and this has actually been really great it's a great performance",
    "start": "1100179",
    "end": "1105580"
  },
  {
    "text": "improvement it allows the operating system to manage its own memory and do paging to disk and everything and as if",
    "start": "1105580",
    "end": "1111279"
  },
  {
    "text": "it was running on the native hardware and it also really simplifies a hypervisor before that you had to kind",
    "start": "1111279",
    "end": "1117460"
  },
  {
    "text": "of implement a shadow TLB in your own and it was really hairy and very frustrating so EPT made that much faster",
    "start": "1117460",
    "end": "1125289"
  },
  {
    "text": "and much better it also implements some new instructions - to clear selectively",
    "start": "1125289",
    "end": "1130539"
  },
  {
    "text": "or you know on purpose entries in the TLB so obviously when you're doing a",
    "start": "1130539",
    "end": "1135970"
  },
  {
    "text": "context switch from one process to another any mappings that were there you want to have them invalidated otherwise",
    "start": "1135970",
    "end": "1142419"
  },
  {
    "text": "say if you're in the kernel context and you map in some sensitive piece of memory and then you switch to",
    "start": "1142419",
    "end": "1148929"
  },
  {
    "text": "application unless that's invalidated that application will be able to access that region of of kernel memory and so",
    "start": "1148929",
    "end": "1155649"
  },
  {
    "text": "you can then explicitly you know remove some of that or when you do a process which you change cr3",
    "start": "1155649",
    "end": "1161289"
  },
  {
    "text": "almost all the entries that aren't marked is you know stay here when you do a switch will get will get wiped of all",
    "start": "1161289",
    "end": "1168759"
  },
  {
    "text": "this the most important one to realize is that it supports execute only permissions this is going to be very",
    "start": "1168759",
    "end": "1174610"
  },
  {
    "text": "critical going forwards so it's a much more granular permissions that you have read only write only and execute only",
    "start": "1174610",
    "end": "1182649"
  },
  {
    "text": "and any combination thereof so that's keep that in the back your head as we go forward the next technology they added",
    "start": "1182649",
    "end": "1190029"
  },
  {
    "text": "is is V Pitt so that's V M process ID so that adds that extends each line in the",
    "start": "1190029",
    "end": "1196539"
  },
  {
    "text": "TLB with a tag a numeric tag so the vm ID of the the hypervisor of the vm m is",
    "start": "1196539",
    "end": "1203440"
  },
  {
    "text": "zero your first guess might be one the second guess might be 2 etc and that prevents the TLB from being flushed",
    "start": "1203440",
    "end": "1209259"
  },
  {
    "text": "every time you switch from either the guests the hypervisor the hypervisor to guest or guest to guest and that's",
    "start": "1209259",
    "end": "1214690"
  },
  {
    "text": "really important because before this you know just like when you have two processes switching or and you want to",
    "start": "1214690",
    "end": "1220330"
  },
  {
    "text": "make sure that the TLB doesn't have mappings pointing to either the wrong place or to sensitive locations the TLB",
    "start": "1220330",
    "end": "1225399"
  },
  {
    "text": "would be completely white and flushed when you switch and you review exit or vm resume so what they did is they",
    "start": "1225399",
    "end": "1232779"
  },
  {
    "text": "actually now there's kind of like a sub TLB for each VM inside of the larger VM and so you're gonna you're",
    "start": "1232779",
    "end": "1239110"
  },
  {
    "text": "kind of sharing some space there so now",
    "start": "1239110",
    "end": "1245920"
  },
  {
    "text": "our lookup diagram looks kind of like this you access memory is the translation in the TLB and the VM IDs",
    "start": "1245920",
    "end": "1252880"
  },
  {
    "text": "are correct if so fantastic at your memory otherwise go through and walk this you know in between the get PDE and",
    "start": "1252880",
    "end": "1260680"
  },
  {
    "text": "the cache stage is going to be walk apt so this is going to be another set of page tables that you're gonna go through",
    "start": "1260680",
    "end": "1266500"
  },
  {
    "text": "but for simplicity state sake of the diagram I'm just gonna leave it like",
    "start": "1266500",
    "end": "1272020"
  },
  {
    "text": "this so now our new TLB splitting procedure looks something like this so I'm gonna hail the new CPU the TLB is",
    "start": "1272020",
    "end": "1279520"
  },
  {
    "text": "split you set up your EPT tables and then you trap on EPT faults you then do",
    "start": "1279520",
    "end": "1284830"
  },
  {
    "text": "the same process of determining if it's an instruction fetch fault or a data fetch fault and then you either set the",
    "start": "1284830",
    "end": "1291640"
  },
  {
    "text": "page the EPT the entry to either read write so data or execute only then you need to set the",
    "start": "1291640",
    "end": "1300670"
  },
  {
    "text": "trap flag to trap back to the hypervisor after one instruction so you're gonna single step the guest for one instruction Yury inject back to the",
    "start": "1300670",
    "end": "1307930"
  },
  {
    "text": "guest to let it run that one instruction to prime the proper VP so if you were just to do what you do in kernel space",
    "start": "1307930",
    "end": "1313600"
  },
  {
    "text": "and shadow-walker and you just read that data you're gonna prime the data TLB you in the hypervisor context not the guest",
    "start": "1313600",
    "end": "1319720"
  },
  {
    "text": "context so you'll be splitting yourself not not the guest which is what in our the way we set it up that's how we we",
    "start": "1319720",
    "end": "1326080"
  },
  {
    "text": "had to architect that and then we're gonna reset the EPT tables back to you",
    "start": "1326080",
    "end": "1331720"
  },
  {
    "text": "no no no access essentially so that if they get cleared out of the TLB it'll come back and repeat this process and we",
    "start": "1331720",
    "end": "1337420"
  },
  {
    "text": "can resume the guest and it will just chug along so that brings me to my cyber",
    "start": "1337420",
    "end": "1347350"
  },
  {
    "text": "fast track program more measurement of running executables so here we thought that we could use a TLB",
    "start": "1347350",
    "end": "1353560"
  },
  {
    "text": "desynchronisation like from shadow-walker impacts that same kind of idea to automatically separate data from",
    "start": "1353560",
    "end": "1360610"
  },
  {
    "text": "instructions on like a shared memory page so we were working in trusted computing at AIS and so we wanted to be",
    "start": "1360610",
    "end": "1367300"
  },
  {
    "text": "able to do real-time on-demand trust of say an old legacy application or a system management mode handler it might have",
    "start": "1367300",
    "end": "1373630"
  },
  {
    "text": "variables and code interleaved so basically the goal was one of the look at some one page of an executable that",
    "start": "1373630",
    "end": "1380200"
  },
  {
    "text": "we didn't have access to the source code for then may have variables that are originally say initialized to zero and",
    "start": "1380200",
    "end": "1385990"
  },
  {
    "text": "so when we hashed that before we run it we get one version but then as it starts running its gonna gain this dynamic",
    "start": "1385990",
    "end": "1391540"
  },
  {
    "text": "state because the instructions and the code or interleave with the data and so then when we hash it again and we get",
    "start": "1391540",
    "end": "1396970"
  },
  {
    "text": "and get a different result we're not sure if that's because those variables are just changing as part of normal execution or if it's been subverted or",
    "start": "1396970",
    "end": "1403510"
  },
  {
    "text": "you know code injection Tek and so the basically question is is we see a little change right there has this executable",
    "start": "1403510",
    "end": "1408700"
  },
  {
    "text": "been modified and so that's kind of what the whole goal was for this so starting",
    "start": "1408700",
    "end": "1415450"
  },
  {
    "text": "from shadow-walker we ran into a couple challenges which I'll go through really briefly and how we kind of overcame them this is more",
    "start": "1415450",
    "end": "1421750"
  },
  {
    "text": "about more unless about how this impacts x86 but so the first one was it s TLB we",
    "start": "1421750",
    "end": "1429160"
  },
  {
    "text": "started off implementing a page fault handler hook very similar to shadow-walker and then we ran in some",
    "start": "1429160",
    "end": "1436900"
  },
  {
    "text": "issues with the windows 7 memory management the TLB being cleared on every vm exit or vm resume and then",
    "start": "1436900",
    "end": "1443290"
  },
  {
    "text": "Windows copy and write which is kind of a funny one as well I already clarified",
    "start": "1443290",
    "end": "1449470"
  },
  {
    "text": "this so basically we had to go through and and hoist our page fault handler up into into an EPT so we created a thin",
    "start": "1449470",
    "end": "1457480"
  },
  {
    "text": "hypervisor about 2,000 lines of code with EPT and v pit support that would allow us to an identity map so this is",
    "start": "1457480",
    "end": "1464110"
  },
  {
    "text": "not a a hypervisor like Zen or VirtualBox allows you to run multiple",
    "start": "1464110",
    "end": "1469300"
  },
  {
    "text": "different guests this is basically just you have one guest you know your your Mac or your Windows machine and this is",
    "start": "1469300",
    "end": "1476620"
  },
  {
    "text": "just running up there as a and letting all your your device accesses and your device devices talk directly to the",
    "start": "1476620",
    "end": "1483820"
  },
  {
    "text": "hardware and to the operating system and",
    "start": "1483820",
    "end": "1488920"
  },
  {
    "text": "so you know basically from that executes only the s TLB will not merge entries",
    "start": "1488920",
    "end": "1495310"
  },
  {
    "text": "with conflicting permissions so if you prime the instruction TLB with an execute only thing",
    "start": "1495310",
    "end": "1500540"
  },
  {
    "text": "execute only mapping when the data TLB asked the sto be it'll say yes I have one but it still won't help you because",
    "start": "1500540",
    "end": "1507560"
  },
  {
    "text": "this is execute only so here's look at a half default and then I still be able be able to trap that fault and then either",
    "start": "1507560",
    "end": "1513550"
  },
  {
    "text": "set up the data 1 or if it was like a pax know execute one just deny that so",
    "start": "1513550",
    "end": "1522320"
  },
  {
    "text": "shadow-walker was focused on memory hiding rootkit for for kernel code the fu rootkit kernel",
    "start": "1522320",
    "end": "1528440"
  },
  {
    "text": "pages are rarely if ever paged out to disk what we were doing is our test program was something we wrote you know",
    "start": "1528440",
    "end": "1535520"
  },
  {
    "text": "just a Windows C++ program which does get paged out and out if you're running",
    "start": "1535520",
    "end": "1540590"
  },
  {
    "text": "low on memory they might get paged disk if it's not actively being used so that was an issue",
    "start": "1540590",
    "end": "1547160"
  },
  {
    "text": "we had where sometimes we would be paging out memory but it was still in memory were just marking it as non",
    "start": "1547160",
    "end": "1552920"
  },
  {
    "text": "present so we could trap on that and then we would actually go and try to split it everything and then we'd realize that Windows had actually paged",
    "start": "1552920",
    "end": "1559220"
  },
  {
    "text": "that memory out and it was on disk somewhere and we would just crash the program and then also when you start",
    "start": "1559220",
    "end": "1565520"
  },
  {
    "text": "mucking with the the paging structures for for user space applications Windows gets a lot more finicky I would say that",
    "start": "1565520",
    "end": "1574220"
  },
  {
    "text": "Windows XP had a very much more laissez-faire approach and would kind of let you do whatever you wanted to though",
    "start": "1574220",
    "end": "1581180"
  },
  {
    "text": "it appears to us from our development of moving from shadow-walker and Windows XP to Windows 7 that somewhere in between",
    "start": "1581180",
    "end": "1587660"
  },
  {
    "text": "that the MS kernel team read a book on programming and now they check their data before they they just blindly jump",
    "start": "1587660",
    "end": "1594080"
  },
  {
    "text": "to function pointers and stuff so kudos to them though it is a little more painful for us who aren't blessed with",
    "start": "1594080",
    "end": "1601970"
  },
  {
    "text": "the source code to Windows that we have to figure some more stuff out on our own",
    "start": "1601970",
    "end": "1608020"
  },
  {
    "text": "as I mentioned we use EPT thanks to Intel for providing a solution around this so here we and the hypervisor have",
    "start": "1612770",
    "end": "1620450"
  },
  {
    "text": "our own set of page table so you use the extended page tables we modify our own stuff and then the operating system has",
    "start": "1620450",
    "end": "1625910"
  },
  {
    "text": "their page tables they modify their things there and kind of H work in their own little isolated bubble and so the",
    "start": "1625910",
    "end": "1632420"
  },
  {
    "text": "operating system doesn't affect us and then we don't have to worry about the operating system doing stuff and",
    "start": "1632420",
    "end": "1638440"
  },
  {
    "text": "complaining that we've changed their page tables also with the EPT where we",
    "start": "1638440",
    "end": "1643790"
  },
  {
    "text": "preempt pre-empting the operating system page fault so an EPT fault will have",
    "start": "1643790",
    "end": "1648800"
  },
  {
    "text": "trigger before a page fault I mentioned",
    "start": "1648800",
    "end": "1653990"
  },
  {
    "text": "already the VM that the TLB is cleared on a VM exit VM resume so when we were",
    "start": "1653990",
    "end": "1659060"
  },
  {
    "text": "testing this I was a four month effort we sent down the test code and it was working great and we didn't realize that",
    "start": "1659060",
    "end": "1665540"
  },
  {
    "text": "half of our test machines were Core 2 Duo and the other half four core i7s and so it was working great for us and they",
    "start": "1665540",
    "end": "1672140"
  },
  {
    "text": "said it's not working and so one weekend of figuring out all this we were running",
    "start": "1672140",
    "end": "1677750"
  },
  {
    "text": "into an issue where we prime say the data TLB in the the hypervisor we would",
    "start": "1677750",
    "end": "1684530"
  },
  {
    "text": "resume back to the guest and they would be wiped and then the guest would say nope you didn't do it fall back and so",
    "start": "1684530",
    "end": "1689660"
  },
  {
    "text": "we'd run just hang forever so again thank you Intel for beep it not only",
    "start": "1689660",
    "end": "1695060"
  },
  {
    "text": "does it make us faster it allows us to bypass that so the last major challenge",
    "start": "1695060",
    "end": "1702950"
  },
  {
    "text": "I ran into this is more about the more effort specifically than TLB splitting in general so Windows",
    "start": "1702950",
    "end": "1708710"
  },
  {
    "text": "generally loads you know one copy of the executable pages into memory so it can",
    "start": "1708710",
    "end": "1714590"
  },
  {
    "text": "you know D duplicate if you're running ten instances of notepad it can just run one instance of the executable page and",
    "start": "1714590",
    "end": "1721100"
  },
  {
    "text": "then ten instances of the data copies and then they can perform copy and write if say there's a self modifying notepad",
    "start": "1721100",
    "end": "1727280"
  },
  {
    "text": "which sounds pretty terrifying our test application we wrote specifically",
    "start": "1727280",
    "end": "1732740"
  },
  {
    "text": "interleaved code and data so we wrote a huge knop sled and we use that as our memory buffer for all of our work so we",
    "start": "1732740",
    "end": "1739460"
  },
  {
    "text": "could actually simulate what this would be so we were always triggering that copy and right and then windows would",
    "start": "1739460",
    "end": "1745460"
  },
  {
    "text": "say oh no no we to keep that pristine coffee here where you know it is and we're gonna move the",
    "start": "1745460",
    "end": "1750490"
  },
  {
    "text": "copy that we're actually going to work on that might be subjugated somewhere else we're not going tell you where it is so now we were to be splitting on a",
    "start": "1750490",
    "end": "1757539"
  },
  {
    "text": "page that wasn't being used which was doing effectively nothing and so we had",
    "start": "1757539",
    "end": "1762639"
  },
  {
    "text": "to find wherever our application went so our really ugly solution was as we would trap on a context switch and then ReWalk",
    "start": "1762639",
    "end": "1769059"
  },
  {
    "text": "the page tables for our application to see if they had copy and write had",
    "start": "1769059",
    "end": "1774249"
  },
  {
    "text": "occurred and then we would go and update which pages we were splitting on not very graceful but it worked in the two",
    "start": "1774249",
    "end": "1782350"
  },
  {
    "text": "months that I had to do this so real",
    "start": "1782350",
    "end": "1789759"
  },
  {
    "text": "simple STL be we overcame by using a PT which has the more granular permission",
    "start": "1789759",
    "end": "1795159"
  },
  {
    "text": "set the windows 7 minute memory management again EPT TLB being cleared",
    "start": "1795159",
    "end": "1801549"
  },
  {
    "text": "on a VM exit VM resume we get implemented v pid' tag TL B's and then",
    "start": "1801549",
    "end": "1807129"
  },
  {
    "text": "the the windows copy and write we just brute force walking the page tables to make sure we can keep up with everything",
    "start": "1807129",
    "end": "1814289"
  },
  {
    "text": "everyone good so far perfect yeah",
    "start": "1814289",
    "end": "1820768"
  },
  {
    "text": "do what",
    "start": "1821369",
    "end": "1824580"
  },
  {
    "text": "so that came back to this goal right here of we wanted to look at an",
    "start": "1837730",
    "end": "1843880"
  },
  {
    "text": "arbitrary binary and say this thing which may have data and encode interleaved on the same memory page has",
    "start": "1843880",
    "end": "1850539"
  },
  {
    "text": "it changed so this is a defensive application so familiar a system management mode kind of is like BIOS",
    "start": "1850539",
    "end": "1857559"
  },
  {
    "text": "that runs persistently and if you look at how you know the STM the software",
    "start": "1857559",
    "end": "1864120"
  },
  {
    "text": "software management mode transform monitor which is a hypervisor that runs in SMM space when you kick off a txt",
    "start": "1864120",
    "end": "1870399"
  },
  {
    "text": "measurement unless you have that STM that STM doesn't really measure the SMM handler because it might have some",
    "start": "1870399",
    "end": "1876970"
  },
  {
    "text": "dynamic State and it's a legacy application that's interleaved in this case the STM could actually do this kind",
    "start": "1876970",
    "end": "1883360"
  },
  {
    "text": "of TLB splitting and it could actually use a legacy SMM handler but still get consistent measurements that when you do",
    "start": "1883360",
    "end": "1889690"
  },
  {
    "text": "a late launch txt measurement you can actually verify all the code rather than just relying on your hypervisor or",
    "start": "1889690",
    "end": "1896409"
  },
  {
    "text": "security in your in your s and then your s TM is that answer that okay the",
    "start": "1896409",
    "end": "1902799"
  },
  {
    "text": "question was what's the point of doing all this so so what did we do in about",
    "start": "1902799",
    "end": "1913870"
  },
  {
    "text": "two months we build a custom vm x hypervisor that we added epi apt and be paid support that we could monitor",
    "start": "1913870",
    "end": "1919480"
  },
  {
    "text": "process creation so we were doing it all in Windows just to make it nice and easy we had a list of file name so like test",
    "start": "1919480",
    "end": "1926289"
  },
  {
    "text": "exe etc that would we would trap on we want to you know split the TLB for and",
    "start": "1926289",
    "end": "1933340"
  },
  {
    "text": "so we would bonnet er whenever a new process was created this was all Windows kernel module then we would VM exit on",
    "start": "1933340",
    "end": "1940779"
  },
  {
    "text": "either cr3 change so we could walk through and look for any windows copy and write activity EPT violations and",
    "start": "1940779",
    "end": "1947380"
  },
  {
    "text": "faults that would go and we'd actually do the real splitting and then the trap flags that we could you know we could",
    "start": "1947380",
    "end": "1952840"
  },
  {
    "text": "presume and single stepping after we either prime the data or the instruction TLB of the guest select shadow-walker",
    "start": "1952840",
    "end": "1961120"
  },
  {
    "text": "if there this is very obvious here basically if if it's a data and fetch",
    "start": "1961120",
    "end": "1966159"
  },
  {
    "text": "we're gonna mark the EPT pages for that page as read right",
    "start": "1966159",
    "end": "1971380"
  },
  {
    "text": "allow it for one instruction if it's a code access we mark it execute only for one instruction and then we ran into",
    "start": "1971380",
    "end": "1977050"
  },
  {
    "text": "this very interesting case for both so we call these thrash cases where there",
    "start": "1977050",
    "end": "1982150"
  },
  {
    "text": "is an instruction on a certain page maybe like the first instruction of the page it is also referencing memory on the",
    "start": "1982150",
    "end": "1988210"
  },
  {
    "text": "same page and neither of them are in the TLB and so it's asking for both at the same time it would kind of flip-flop",
    "start": "1988210",
    "end": "1994840"
  },
  {
    "text": "back and forth and so what we had to do here to get kind of through these are very rare there's maybe over a duration",
    "start": "1994840",
    "end": "2001830"
  },
  {
    "text": "of a program maybe there's a couple hundred of these thrashes that we ran into so only a couple hundred",
    "start": "2001830",
    "end": "2007200"
  },
  {
    "text": "instructions would would hit this case and so what we would do is we would copy one instruction from the pristine known",
    "start": "2007200",
    "end": "2014400"
  },
  {
    "text": "good executable copy to the data copy to ensure that you know there hasn't been any compromise there and then we'd run",
    "start": "2014400",
    "end": "2020610"
  },
  {
    "text": "it with full permissions for one instruction and then we would reset it to no permissions and clear the TLB this",
    "start": "2020610",
    "end": "2026610"
  },
  {
    "text": "K lattice to kind of break through those weird thrash points so that's kind of",
    "start": "2026610",
    "end": "2031740"
  },
  {
    "text": "just a weird one that we could kind of occasionally have this weird issue where kept switching back and forth where it",
    "start": "2031740",
    "end": "2037350"
  },
  {
    "text": "was asking for data and asking for executable and vice versa so our results",
    "start": "2037350",
    "end": "2043110"
  },
  {
    "text": "we were hitting about less than a two percent performance hit on our test cases most of that is comes from just",
    "start": "2043110",
    "end": "2049980"
  },
  {
    "text": "kind of the upfront costs of setting up the TLB split so at the longer the program ran I mean the the runtime hit",
    "start": "2049980",
    "end": "2056700"
  },
  {
    "text": "was very very small we had one program that didn't it was almost too short to",
    "start": "2056700",
    "end": "2062128"
  },
  {
    "text": "measure even running by itself so it showed up it's a 98% performance hit just because you're talking about",
    "start": "2062129",
    "end": "2068669"
  },
  {
    "text": "fractions of a second we architected our",
    "start": "2068669",
    "end": "2073679"
  },
  {
    "text": "hypervisor to have clear isolation of data in code so if something else could measure us so if you fired at fired off",
    "start": "2073679",
    "end": "2080340"
  },
  {
    "text": "at ext late launch you'd be able to measure our code sections and make sure that it hasn't changed and then also we",
    "start": "2080340",
    "end": "2087658"
  },
  {
    "text": "could then Rivera fie measure the trust of our application test every 1/10 of a",
    "start": "2087659",
    "end": "2093780"
  },
  {
    "text": "second which is some number I threw in and as long as you weren't printing the results over debug view it would work very quickly the second you tried",
    "start": "2093780",
    "end": "2100110"
  },
  {
    "text": "printing out every 1/10 of a second the system crawled to a halt and this was all with no ma vacation the application so this is",
    "start": "2100110",
    "end": "2106950"
  },
  {
    "text": "perfect for a legacy you know bios so we just wrote how we had one person write",
    "start": "2106950",
    "end": "2112020"
  },
  {
    "text": "an exe and then we had one person me write the hypervisor for it and we weren't allowed any recompilation or",
    "start": "2112020",
    "end": "2118800"
  },
  {
    "text": "source access so I have a very not so",
    "start": "2118800",
    "end": "2125220"
  },
  {
    "text": "interesting video for you so as we mentioned dynamic applications kind of",
    "start": "2125220",
    "end": "2131190"
  },
  {
    "text": "gain state as they execute and this is these variables that are changing and so on the right here is just a programming",
    "start": "2131190",
    "end": "2138840"
  },
  {
    "text": "wrote it just Janet calculates PI very slowly and all the variables are written to process into our no ops LED that we",
    "start": "2138840",
    "end": "2147150"
  },
  {
    "text": "put in so this is a special application as well you had to modify some of the PE flags that it would actually allow you",
    "start": "2147150",
    "end": "2153300"
  },
  {
    "text": "to do this otherwise yeah Windows would shut down the application so here we have some stuff for there and you'll",
    "start": "2153300",
    "end": "2158850"
  },
  {
    "text": "notice on the left I'm not sure how well you can see it or not but the the checksum is changing you can take my",
    "start": "2158850",
    "end": "2165030"
  },
  {
    "text": "word for that essentially what we're doing is we're noticing that the checksum is changing as this application is gaining dynamic State so now what",
    "start": "2165030",
    "end": "2176490"
  },
  {
    "text": "we're going to do is we're going to leave that application on the right unchanged and we're just going to turn on the TLB splitting feature of the",
    "start": "2176490",
    "end": "2182940"
  },
  {
    "text": "hypervisor so you'll notice on the left once it starts printing stuff ABS can print out a data copy and an executive",
    "start": "2182940",
    "end": "2189300"
  },
  {
    "text": "copy and so you'll see the data copy is changing as it should variables change etc but we're automatically kind of",
    "start": "2189300",
    "end": "2194880"
  },
  {
    "text": "isolating the the data and the instruction and so the the executable",
    "start": "2194880",
    "end": "2200550"
  },
  {
    "text": "checksum will never change as it's run but the data check some changes so we're basically transparently separating them",
    "start": "2200550",
    "end": "2206790"
  },
  {
    "text": "out",
    "start": "2206790",
    "end": "2208910"
  },
  {
    "text": "very good question so with this we actually created a second mapping and EPT for a hypervisor to be able to to",
    "start": "2220660",
    "end": "2228640"
  },
  {
    "text": "get to that and as read-only because that mapping was completely different so we had to have like a second mapping to",
    "start": "2228640",
    "end": "2235360"
  },
  {
    "text": "the executable page otherwise we would go through the same process additionally since we're running in the measurement",
    "start": "2235360",
    "end": "2242620"
  },
  {
    "text": "routine right here coming through is happening in the hypervisor context so it's a different V pit it's just being",
    "start": "2242620",
    "end": "2248290"
  },
  {
    "text": "piped through to debug view in the guest but yeah very good question",
    "start": "2248290",
    "end": "2254610"
  },
  {
    "text": "against what oh I'll get there",
    "start": "2255540",
    "end": "2263820"
  },
  {
    "text": "so with that perfect segue more shadow-walker so as dan gear very eloquently pointed",
    "start": "2263820",
    "end": "2272860"
  },
  {
    "text": "out yesterday there's a lot of dual use technology so every tool you have out there you can use for for good or evil",
    "start": "2272860",
    "end": "2279040"
  },
  {
    "text": "so to speak and TLB splitting is a perfect example of this you can use it",
    "start": "2279040",
    "end": "2284050"
  },
  {
    "text": "for offensive or defensive as we've shown with pecs more as being defensive and then shadow-walker and now more",
    "start": "2284050",
    "end": "2290140"
  },
  {
    "text": "shadow-walker with the offensive so basically I just took out all the",
    "start": "2290140",
    "end": "2295300"
  },
  {
    "text": "trusted computing stuff in the more hypervisor and it allows you to do essentially the same thing as a shadow",
    "start": "2295300",
    "end": "2301150"
  },
  {
    "text": "Walker and so this would in theory be able to bypass patch guard because when patch",
    "start": "2301150",
    "end": "2306580"
  },
  {
    "text": "guard or any other kind of kernel integrity monitoring it's going to read that they will read the unchanged",
    "start": "2306580",
    "end": "2312910"
  },
  {
    "text": "version but if they actually jump to that to execute they will execute so basically the gist of this is you can",
    "start": "2312910",
    "end": "2319270"
  },
  {
    "text": "split arbitrary pages on a new Nehalem a newer CPU and a question there's one",
    "start": "2319270",
    "end": "2325540"
  },
  {
    "text": "question I'm hoping someone's gonna ask right now",
    "start": "2325540",
    "end": "2329220"
  },
  {
    "text": "perfect question so what's the point right why bother if we already have vmm",
    "start": "2331910",
    "end": "2337350"
  },
  {
    "text": "like we're blue pill right we why would we bother we don't need to have a memory hiding",
    "start": "2337350",
    "end": "2342390"
  },
  {
    "text": "rootkit you just set up your EPT and then you just make sure that you know the hyper or the operating system can",
    "start": "2342390",
    "end": "2347790"
  },
  {
    "text": "never read your memory so there's a couple reasons for that one is is they",
    "start": "2347790",
    "end": "2352950"
  },
  {
    "text": "you know the closer you are to the to the user and the application in the operating system you have more control you can you know kind of introspect on",
    "start": "2352950",
    "end": "2359670"
  },
  {
    "text": "certain things like you know someone opens up a certain file and you want to inject content into it or say you're a",
    "start": "2359670",
    "end": "2365340"
  },
  {
    "text": "keyboard logger you want to be able to you know hook the keyboard driver and then you want to be able to use the",
    "start": "2365340",
    "end": "2371520"
  },
  {
    "text": "kernel network stack to excellent rate that data you can do all that from a hypervisor but it requires you know kind",
    "start": "2371520",
    "end": "2376770"
  },
  {
    "text": "of emulating requires you know kind of writing your own network stack so with",
    "start": "2376770",
    "end": "2382290"
  },
  {
    "text": "blue pill and red pill so red pill is an anti blue pill detection technique with it is they found really the only way you",
    "start": "2382290",
    "end": "2388350"
  },
  {
    "text": "can detect if you had a really good hypervisor is looking at the performance hit of some simple operations so one",
    "start": "2388350",
    "end": "2396150"
  },
  {
    "text": "example the CPUID instruction will always trap to the hypervisor and so",
    "start": "2396150",
    "end": "2402270"
  },
  {
    "text": "usually it takes like seven clock cycles but now you're doing an entire context switch to a hypervisor take alot more so",
    "start": "2402270",
    "end": "2411000"
  },
  {
    "text": "the you know the minimum the less stuff you have in vmm the better and this is also it can be applied to system",
    "start": "2411000",
    "end": "2417210"
  },
  {
    "text": "management I mean I've written system management mode rootkit but once you're up there I mean yes you have full privilege and you can do anything but",
    "start": "2417210",
    "end": "2423660"
  },
  {
    "text": "that means that you now need to like write your own operating system your own network stack to be useful and so also",
    "start": "2423660",
    "end": "2429060"
  },
  {
    "text": "you have just a huge library of existing stuff out there that you can just kind of reuse there's a whole bunch of really",
    "start": "2429060",
    "end": "2434880"
  },
  {
    "text": "cool root kits out there a lot of them you can find the source for if you just kind of wrap this up in the more shadow-walker and you're good to go and",
    "start": "2434880",
    "end": "2442980"
  },
  {
    "text": "then also just the last one just synthetically just to show you that it can be used you know for good or evil",
    "start": "2442980",
    "end": "2448350"
  },
  {
    "text": "depending if your immersion or death or a white hat so that I'm just going to",
    "start": "2448350",
    "end": "2455190"
  },
  {
    "text": "kind of conclude that the gist of this is that x86 has gotten so complicated",
    "start": "2455190",
    "end": "2461310"
  },
  {
    "text": "that you can now attacked you know affect huge apparent architectural and modification",
    "start": "2461310",
    "end": "2467040"
  },
  {
    "text": "so in this case switching from a von Neumann architecture to a Harvard architecture or an apparent Harvard",
    "start": "2467040",
    "end": "2472110"
  },
  {
    "text": "architecture just through software so a lot of researchers they use opensparc which is an FPGA you know and so they",
    "start": "2472110",
    "end": "2478230"
  },
  {
    "text": "can make different changes to how certain things happen a lot of this now can be done through software I would",
    "start": "2478230",
    "end": "2483600"
  },
  {
    "text": "really be interested in someone writing a thin hypervisor research idea for any grad students that can on an SMP system",
    "start": "2483600",
    "end": "2491400"
  },
  {
    "text": "or a couple SMP systems can boot up and appear to look like a Numa system where",
    "start": "2491400",
    "end": "2496680"
  },
  {
    "text": "you have your memory zones you know kind of isolated to each or your cluster so you be able to boot one operating system across multiple machines in a single",
    "start": "2496680",
    "end": "2504240"
  },
  {
    "text": "system image another example the complexity the memory management unit is actually turing-complete on x86 this was",
    "start": "2504240",
    "end": "2511770"
  },
  {
    "text": "shown by Sergey Broadus and Julian Bangor showing that you can configure",
    "start": "2511770",
    "end": "2518100"
  },
  {
    "text": "your page tables in such a way and then cause a page fault and simulate any turing machine without ever executing an",
    "start": "2518100",
    "end": "2524490"
  },
  {
    "text": "instruction so you don't even need two CPU to be able to run programs on x86 because the memory management unit is so",
    "start": "2524490",
    "end": "2531210"
  },
  {
    "text": "complicated and this is happening over and over and over again these weird machines pop up everywhere and then also just as an architecture",
    "start": "2531210",
    "end": "2538530"
  },
  {
    "text": "evolve and as you know this is cat and mouse game of the offense versus the defense you know the new techniques come",
    "start": "2538530",
    "end": "2544980"
  },
  {
    "text": "up to bypass things so this is a classic example the NX bit came out and stopped these classic smashing the stack attack",
    "start": "2544980",
    "end": "2551250"
  },
  {
    "text": "and now you have Rob and then there's Emmett and I just saw a great talk yesterday about getting around Emmett",
    "start": "2551250",
    "end": "2557040"
  },
  {
    "text": "and still being able to do Rob attacks and so really this just shows that you know as the things progressed you know",
    "start": "2557040",
    "end": "2562860"
  },
  {
    "text": "it's don't give up as soon as they say okay we fix this exact technique and so there's probably a new way to do it the",
    "start": "2562860",
    "end": "2571650"
  },
  {
    "text": "code for both the the hypervisor that was submitted to Mudge for cyber fast",
    "start": "2571650",
    "end": "2577710"
  },
  {
    "text": "track that does all the trust competing and measurement that's going to be released open source as well as the the",
    "start": "2577710",
    "end": "2585660"
  },
  {
    "text": "very simplified one that just can you give it to a virtual memory address and then the code page you want it to go to",
    "start": "2585660",
    "end": "2592350"
  },
  {
    "text": "and the the data page you want it to go to and we'll do the splitting that's going to be on this address",
    "start": "2592350",
    "end": "2598920"
  },
  {
    "text": "it's released this week and since this week is not yet done I actually haven't uploaded it yet so it will be there by",
    "start": "2598920",
    "end": "2605099"
  },
  {
    "text": "the the week send a couple shoutouts ogr security and pax team for making linux",
    "start": "2605099",
    "end": "2611580"
  },
  {
    "text": "more secure being way ahead of the curve Jamie Butler for providing some guidance on the CFP program and how to get into",
    "start": "2611580",
    "end": "2619140"
  },
  {
    "text": "black hat and then Mudge who when he was at DARPA now he's at Google or Motorola",
    "start": "2619140",
    "end": "2625160"
  },
  {
    "text": "for basically taking more from just an idea in my head to reality and then my",
    "start": "2625160",
    "end": "2632730"
  },
  {
    "text": "employer AIS for putting up with me when I disappear off to the third world for a month at a time so with that thanks for",
    "start": "2632730",
    "end": "2640530"
  },
  {
    "text": "listening you guys can now heckle and any rotten fruit and then I'm here all week so if you want to meet up or chat",
    "start": "2640530",
    "end": "2648200"
  },
  {
    "text": "shoot me a tweet and go from there",
    "start": "2648200",
    "end": "2653000"
  }
]