[
  {
    "text": "all right so uh we'll first quickly go over an introduction and tell you a little bit what we're talking about so uh my name is Chris kral I'm um the",
    "start": "120",
    "end": "6960"
  },
  {
    "text": "co-founder and chief scientist of last line which is a company that develops breach detection Solutions and anti-",
    "start": "6960",
    "end": "12639"
  },
  {
    "text": "malware Solutions but I wear other hats as well and um I'm also professor ucab",
    "start": "12639",
    "end": "18119"
  },
  {
    "text": "barabara and you know where Yan and a number of other students together with me and gavan work on interesting",
    "start": "18119",
    "end": "25640"
  },
  {
    "text": "research topics and also on binary analysis and vulnerability finding which is what the topic of today's talk is and",
    "start": "25640",
    "end": "33600"
  },
  {
    "text": "uh when we still have a little bit of time I'm also a member of um the shellfish team which is um you know",
    "start": "33600",
    "end": "39160"
  },
  {
    "text": "playing in CTF competitions and enjoying binary analysis um in general for fun so",
    "start": "39160",
    "end": "45559"
  },
  {
    "text": "Yan I'll just to let you introduce before we kick it off uh of course I'm Yan um I'm a PhD student at UC Santa",
    "start": "45559",
    "end": "53000"
  },
  {
    "text": "Barbara which is an awesome Place everyone should be a PhD student there but then it would be kind of crowded um",
    "start": "53000",
    "end": "59399"
  },
  {
    "text": "I'm als Alo part of shellfish uh like Chris but a slightly newer part um I did",
    "start": "59399",
    "end": "65198"
  },
  {
    "text": "lead the uh shellfish effort for the Dara cyber challenge for those that don't know the Cyber Grand Challenge is",
    "start": "65199",
    "end": "71320"
  },
  {
    "text": "an effort to create a fully automated uh hacking uh program that can hack patch",
    "start": "71320",
    "end": "78119"
  },
  {
    "text": "and win ctfs um so that was really fun we qualif there I'll talk about it a",
    "start": "78119",
    "end": "83960"
  },
  {
    "text": "tiny bit later and I don't like peanut butter much to several people's Chagrin",
    "start": "83960",
    "end": "90360"
  },
  {
    "text": "so I'll pass it back over to Chris yeah so with this uh most important bit of our presentation out of the way uh what",
    "start": "90360",
    "end": "95759"
  },
  {
    "text": "are we talking about we're talking about firmware and basically embedded software and why it's why why is it important to",
    "start": "95759",
    "end": "102680"
  },
  {
    "text": "analyze this kind of software how can we do it how can we create automated tools that perform binary analysis analysis of",
    "start": "102680",
    "end": "110640"
  },
  {
    "text": "the binaries that power those embedded devices and then we introduce or in particular Yan will introduce anger",
    "start": "110640",
    "end": "116880"
  },
  {
    "text": "anger is our platform to perform binary analysis in an automated fashion and you can find a variety of vulnerabilities in",
    "start": "116880",
    "end": "125280"
  },
  {
    "text": "firmware and you know we'll we'll we'll talk more about how we do this analysis and why it might be interesting for you",
    "start": "125280",
    "end": "131800"
  },
  {
    "text": "as well okay so um just you know to set the stage a little bit I'm sure you you know all have heard of The Internet of",
    "start": "131800",
    "end": "137840"
  },
  {
    "text": "Things and its rapid growth and what that basically tells us there are more and more devices out there that run",
    "start": "137840",
    "end": "143879"
  },
  {
    "text": "embedded software and those devices and their software is becoming increasingly",
    "start": "143879",
    "end": "149280"
  },
  {
    "text": "connected to internet which means more and more people can possibly access that software remotely and of course finding",
    "start": "149280",
    "end": "155640"
  },
  {
    "text": "vulnerabilities allows them to remotely exploit those um vulnerabilities in embedded software which you know is is a",
    "start": "155640",
    "end": "162640"
  },
  {
    "text": "problem and of course also uh this software is often not written with security in mind and um you you sort of",
    "start": "162640",
    "end": "169879"
  },
  {
    "text": "have a situation almost like Windows in in you know in the late '90s where it's actually fairly easy to find bugs in in",
    "start": "169879",
    "end": "176720"
  },
  {
    "text": "that software and that is a problem because uh embedded software is becoming more and more mainstream and it's really",
    "start": "176720",
    "end": "183280"
  },
  {
    "text": "everywhere and starting not only to you know be embedded in in some devices that you might not care about but really",
    "start": "183280",
    "end": "189760"
  },
  {
    "text": "devices that you do care about such as you know cars um industrial control",
    "start": "189760",
    "end": "194920"
  },
  {
    "text": "systems and of course also a lot of consumer uh products or things for your house like uh like the The Nest or you",
    "start": "194920",
    "end": "201519"
  },
  {
    "text": "know thermostats so basically we have this combination of um potentially vulnerable software that be becomes more",
    "start": "201519",
    "end": "208840"
  },
  {
    "text": "and more important is driving more and more important um processes and devices",
    "start": "208840",
    "end": "214080"
  },
  {
    "text": "and at the same time um is often written with not a lot of security in mind and",
    "start": "214080",
    "end": "219599"
  },
  {
    "text": "not necessarily easy to update and to patch when vulnerabilities are being found and of course that really sets up",
    "start": "219599",
    "end": "225680"
  },
  {
    "text": "um a situation where there could be a lot of security problems and and that's really the reason why we want to study",
    "start": "225680",
    "end": "231680"
  },
  {
    "text": "those and build automated tools to find and ultimately defend against those vulnerabilities okay so how or rather",
    "start": "231680",
    "end": "240000"
  },
  {
    "text": "what are we looking at when I when I basically talk about embedded devices and firmware of course in in many cases",
    "start": "240000",
    "end": "246439"
  },
  {
    "text": "sort of these these embedded devices are just running Linux you know it's just a scaled down version with some variant of",
    "start": "246439",
    "end": "252439"
  },
  {
    "text": "Linux that runs um you know user space processes and has the normal operating system kernel and you know that is is is",
    "start": "252439",
    "end": "260120"
  },
  {
    "text": "more easy to analyze because people are more familiar with it but when we talk about firmware we also mean and",
    "start": "260120",
    "end": "265680"
  },
  {
    "text": "particular mean um those kinds of firmware that are C custom operating system scaled down operating systems",
    "start": "265680",
    "end": "272720"
  },
  {
    "text": "some you know old real-time operating systems maybe um with custom programs that are all combined together in what",
    "start": "272720",
    "end": "279080"
  },
  {
    "text": "we call a binary blob so that really means you don't get a familiar environment you just get a binary blob",
    "start": "279080",
    "end": "287000"
  },
  {
    "text": "some software in binary format um and sometimes it's not EAS easy actually to",
    "start": "287000",
    "end": "292520"
  },
  {
    "text": "get this software even off the device right these devices are running that embedded software but the question is",
    "start": "292520",
    "end": "298280"
  },
  {
    "text": "how can you access it how can you translate to some some environment where you can actually perform some analysis",
    "start": "298280",
    "end": "304240"
  },
  {
    "text": "on top of it so these are sort of already starting uh you know challenges that you face when you perform um or",
    "start": "304240",
    "end": "310639"
  },
  {
    "text": "when you try to perform some kind of analysis on on this embedded software okay and and sort of since you're only",
    "start": "310639",
    "end": "317560"
  },
  {
    "text": "given the binary um what can you do well we we perform program analysis and in particular we perform binary program or",
    "start": "317560",
    "end": "324840"
  },
  {
    "text": "binary code analysis and the goal is okay we want to derive some properties some interesting um traits some",
    "start": "324840",
    "end": "331960"
  },
  {
    "text": "interesting behaviors of the software that we are given and um there are you know just I'll I'll briefly talk about",
    "start": "331960",
    "end": "339120"
  },
  {
    "text": "the two different ways there are two different ways in general that you can do software um analysis and of course",
    "start": "339120",
    "end": "344440"
  },
  {
    "text": "that's also true for binaries it's static binary analysis or dynamic binary analysis and um when before we dive too",
    "start": "344440",
    "end": "351759"
  },
  {
    "text": "much into the details there let me just remind you of the goals so we want to perform this analysis we want to perform",
    "start": "351759",
    "end": "357400"
  },
  {
    "text": "binary analysis ultimately to to to find vulnerabilities here we want to find vulnerabilities we want to test programs",
    "start": "357400",
    "end": "364440"
  },
  {
    "text": "we want to maybe even verify them so we want to prove the absence of certain classes of vulnerabilities by analyzing",
    "start": "364440",
    "end": "371400"
  },
  {
    "text": "uh programs and you know we might want to generate signatures or defense",
    "start": "371400",
    "end": "376800"
  },
  {
    "text": "mechanisms that can constrain inputs that can trigger those vulnerabilities",
    "start": "376800",
    "end": "382000"
  },
  {
    "text": "and of course you can also use it of course when you want to find vulnerabilities you can then write exploits and you know use that same",
    "start": "382000",
    "end": "388080"
  },
  {
    "text": "knowledge of course Poss for for not so good purposes okay so when we look at the two",
    "start": "388080",
    "end": "394639"
  },
  {
    "text": "different um ways in which you can do the analysis static or dynamic um when we look at static analysis it really",
    "start": "394639",
    "end": "400160"
  },
  {
    "text": "means you just look at the code right so you look at the code um you don't execute the program and you try to",
    "start": "400160",
    "end": "405960"
  },
  {
    "text": "reason over all possible program path so you basically need an analysis that can",
    "start": "405960",
    "end": "411800"
  },
  {
    "text": "check out all the possible actions that that program can possibly perform which",
    "start": "411800",
    "end": "417919"
  },
  {
    "text": "which is great because in some sense you can achieve this great coverage you don't have to try all the path one by",
    "start": "417919",
    "end": "423360"
  },
  {
    "text": "one but you can say meaningful things about the entirety of the program the problem or the trade of is that",
    "start": "423360",
    "end": "429599"
  },
  {
    "text": "sometimes the things you can say about the entirety of the program are very loose you might say that program might",
    "start": "429599",
    "end": "435280"
  },
  {
    "text": "have a vulnerability that's not very useful right so there is an important trade-off that your static analysis",
    "start": "435280",
    "end": "441400"
  },
  {
    "text": "needs to be precise enough to not produce these very generic um yes there",
    "start": "441400",
    "end": "446800"
  },
  {
    "text": "might be vulnerability on all path and yes it's a correct statement but it's not a very useful statement so we have to be precise when our analysis says",
    "start": "446800",
    "end": "454560"
  },
  {
    "text": "well there is a vulnerability we have high confidence that there is actually a vulnerability but that on the other hand",
    "start": "454560",
    "end": "460160"
  },
  {
    "text": "has tradeoffs with scalability because the more precise you want to be the more costly your analysis could be and the",
    "start": "460160",
    "end": "466720"
  },
  {
    "text": "less scalable it might be to large programs so that's sort of a challenge that we face but in principle static",
    "start": "466720",
    "end": "472599"
  },
  {
    "text": "analysis is great because it allows this coverage this completeness and and also in some sense verification of programs",
    "start": "472599",
    "end": "479039"
  },
  {
    "text": "because allows you to say well we have not found any bug of this class of this",
    "start": "479039",
    "end": "484240"
  },
  {
    "text": "kind in all possible program path in that case you have actually verified or proven that this program is is not",
    "start": "484240",
    "end": "491080"
  },
  {
    "text": "vulnerable to that kind of vulnerability so that's great and it's definitely something that we use but it has those",
    "start": "491080",
    "end": "498400"
  },
  {
    "text": "precision and scalability trade-offs that we'll you know get much more into later and some ways in which you can",
    "start": "498400",
    "end": "503560"
  },
  {
    "text": "combine different analysis to get around the problem that we want to be both scalable and precise enough to",
    "start": "503560",
    "end": "510000"
  },
  {
    "text": "problems and of course then sort of the the counterpart will be dynamic analysis you just run the program which means you",
    "start": "510000",
    "end": "516360"
  },
  {
    "text": "examine every individual program path which on each execution is very precise",
    "start": "516360",
    "end": "521399"
  },
  {
    "text": "you know a lot about that particular path um you know everything about that particular path but of course the",
    "start": "521399",
    "end": "527760"
  },
  {
    "text": "coverage is now hard to achieve because you are in some sense limited on how",
    "start": "527760",
    "end": "533000"
  },
  {
    "text": "many of these path can you execute either you know in parallel when you farm them out or one after another um",
    "start": "533000",
    "end": "539040"
  },
  {
    "text": "and what is particularly interesting also in the in the real of firmware sometimes just running these programs is",
    "start": "539040",
    "end": "544120"
  },
  {
    "text": "actually hard because let's say you run them and in principle they would want to interact with some kind of peripheral",
    "start": "544120",
    "end": "550720"
  },
  {
    "text": "device right or they have sensors that read something from the environment so if you took that blob and you moved it",
    "start": "550720",
    "end": "556480"
  },
  {
    "text": "in some kind of environment where you run your analysis let's say an emulator",
    "start": "556480",
    "end": "562000"
  },
  {
    "text": "then what happens if that program tries to get some sensor readings or tries to actuate some device how you react to",
    "start": "562000",
    "end": "570000"
  },
  {
    "text": "this how can you make sure that you get the right the proper input to the program so that it can actually meaningfully execute so that's um a",
    "start": "570000",
    "end": "577040"
  },
  {
    "text": "difficult task and uh and something that is particularly hard on on binary firmer",
    "start": "577040",
    "end": "584079"
  },
  {
    "text": "and not as hard if you if you would run it on a normal um let's say Linux program um there are some ways around",
    "start": "584079",
    "end": "590680"
  },
  {
    "text": "this of course you can you can either try to stub and and try to fake those inputs uh and try to make the program",
    "start": "590680",
    "end": "595959"
  },
  {
    "text": "run or you can try to offload uh some system calls as a system called Avatar does where you basically have it in an",
    "start": "595959",
    "end": "602440"
  },
  {
    "text": "environment where the interaction with the device is offloaded to the real device and then you get the data back and then you can continue to analyze it",
    "start": "602440",
    "end": "609600"
  },
  {
    "text": "um but there are definitely challenges in both areas and and what we do will be a combination of more traditional static",
    "start": "609600",
    "end": "615680"
  },
  {
    "text": "program analysis and a combination of dynamic and static analysis which is called symbolic execution which Yan will",
    "start": "615680",
    "end": "622760"
  },
  {
    "text": "will go much more into detail okay so we already talked a little bit about the challenges of",
    "start": "622760",
    "end": "628320"
  },
  {
    "text": "static biner analysis hard to get the binary code but also binaries lack significant information that you would",
    "start": "628320",
    "end": "633440"
  },
  {
    "text": "have when you analyze source code and also you have the problem that often there are no clear operating system or",
    "start": "633440",
    "end": "638600"
  },
  {
    "text": "Library abstractions when you perform static analysis on let's say a Linux program and it reads from a file it",
    "start": "638600",
    "end": "645120"
  },
  {
    "text": "would typically either call a library um that does it or you know of course that library in turn calls a system call and",
    "start": "645120",
    "end": "651800"
  },
  {
    "text": "that system call or that Library function have a very clear semantics and typically when you can extract that",
    "start": "651800",
    "end": "658040"
  },
  {
    "text": "semantics and you can feed that as input in your program analysis then your program analysis has sort of an edge has",
    "start": "658040",
    "end": "664279"
  },
  {
    "text": "already some knowledge about what functions or system calls do that you normally don't have when you just get",
    "start": "664279",
    "end": "670600"
  },
  {
    "text": "the entire blob and the operating system functions and Library functions they all",
    "start": "670600",
    "end": "675880"
  },
  {
    "text": "mesh together and you don't really have that nice layers of abstraction that can add information to your",
    "start": "675880",
    "end": "682839"
  },
  {
    "text": "analysis okay and just you know to to quickly run through these challenges as as you know probably most of you know uh",
    "start": "682839",
    "end": "688760"
  },
  {
    "text": "when you get the Source good you compile it you link it together and then you strip any super fluous information out",
    "start": "688760",
    "end": "694240"
  },
  {
    "text": "that might not be needed to execute the binary and when you do that then things like names variable and function names",
    "start": "694240",
    "end": "701480"
  },
  {
    "text": "um of course are thrown away but also type information and jump targets for indirect control flow transactions which",
    "start": "701480",
    "end": "709120"
  },
  {
    "text": "you have to now infer back from the binary even if you want to build a complete control flow graph so you have",
    "start": "709120",
    "end": "715680"
  },
  {
    "text": "to to perform extra work to reconstruct the control flow graph of the application to understand where are the",
    "start": "715680",
    "end": "722519"
  },
  {
    "text": "functions and how they can call each other you have to extract potential indirect jump targets to be able to get",
    "start": "722519",
    "end": "728279"
  },
  {
    "text": "this complete graph and you have to know something about the types um of your variables to understand if it's",
    "start": "728279",
    "end": "734279"
  },
  {
    "text": "operating on strings or integers or what Precision of integers so there's a lot of work that we had to put into our",
    "start": "734279",
    "end": "739680"
  },
  {
    "text": "analysis to recreate to reconstruct that information to be even able to just simply say what are the functions and",
    "start": "739680",
    "end": "746320"
  },
  {
    "text": "what what possible calls between functions can occur um I already talked",
    "start": "746320",
    "end": "751680"
  },
  {
    "text": "a little bit about the missing OS and Library abstractions um as I said when you have system calls it's great you",
    "start": "751680",
    "end": "757480"
  },
  {
    "text": "know where the io routines are um and that's very important because in a sense often when you do vulnerability analysis",
    "start": "757480",
    "end": "764160"
  },
  {
    "text": "you have to assume that the attacker has some ability to send you data right send some input to your program to your",
    "start": "764160",
    "end": "770720"
  },
  {
    "text": "system and this is a great starting point to do vulnerability analysis because you want to start at where the",
    "start": "770720",
    "end": "777279"
  },
  {
    "text": "attacker potentially can provide inut so we can follow this input and then understand if the attacker can maybe",
    "start": "777279",
    "end": "783720"
  },
  {
    "text": "overflow a buffer later on or influence uh the execution down the road if you're looking at a binary blob we just don't",
    "start": "783720",
    "end": "791000"
  },
  {
    "text": "have that information um you might have to reconstruct it based on some",
    "start": "791000",
    "end": "796800"
  },
  {
    "text": "interaction where you know the program might write to certain registers or to certain memory regions and you have to",
    "start": "796800",
    "end": "802040"
  },
  {
    "text": "map that back to IO functions um also of course if you do the analysis on let's say with a Linux system call interface",
    "start": "802040",
    "end": "808519"
  },
  {
    "text": "you get type parameters you know what the return values mean and you can focus on a much smaller part which is the main",
    "start": "808519",
    "end": "814160"
  },
  {
    "text": "program and um of course dos is is not really there or it's embedded in a binary blob so we need juristic to find",
    "start": "814160",
    "end": "821959"
  },
  {
    "text": "IO functions which we know are are possibly incom complete but we have came up with some and um there's an open",
    "start": "821959",
    "end": "828560"
  },
  {
    "text": "challenge to be able to find the different components where you can say here's probably some components that belong to the operating system and here",
    "start": "828560",
    "end": "835000"
  },
  {
    "text": "are components that are probably the main program or the routine that acts on data it's not the supporting",
    "start": "835000",
    "end": "841680"
  },
  {
    "text": "functionality so how can you extract and separate those um is is something that is not necessarily",
    "start": "841680",
    "end": "847959"
  },
  {
    "text": "trivial and um you know similar arguments apply to library functions um especially for those of you who have",
    "start": "847959",
    "end": "853680"
  },
  {
    "text": "ever done static analysis Library functions are great because you actually don't have to analyze them uh but rather",
    "start": "853680",
    "end": "859120"
  },
  {
    "text": "you can write summary functions that say okay I know what string compare does I know what read does so I don't have to",
    "start": "859120",
    "end": "866160"
  },
  {
    "text": "look at all the code that implements that function but I can just write a little summary that tells me or rather",
    "start": "866160",
    "end": "871920"
  },
  {
    "text": "the static analysis what this function will do and in a sort of abstract",
    "start": "871920",
    "end": "877680"
  },
  {
    "text": "semantic summary and that makes the analysis much easier so now this is gone in the firmware because we don't have",
    "start": "877680",
    "end": "883320"
  },
  {
    "text": "the knowledge of where the libraries are it's almost like you know you statically linked it into a binary so we need to",
    "start": "883320",
    "end": "888600"
  },
  {
    "text": "undo this and um of course there are sort of well-known techniques Ida has flirt um the function liary",
    "start": "888600",
    "end": "895360"
  },
  {
    "text": "identification recognition technology which tries to guess what how functions look like after they've been compiled we",
    "start": "895360",
    "end": "901759"
  },
  {
    "text": "use something fairly similar but not so much syntactically based on sequence of",
    "start": "901759",
    "end": "906839"
  },
  {
    "text": "instructions but more based on how the control flow of the program looks like and um you know bind style where you say",
    "start": "906839",
    "end": "913279"
  },
  {
    "text": "okay there there's a control flow graph that looks like a particular function that we know is a library function so we",
    "start": "913279",
    "end": "918519"
  },
  {
    "text": "can substitute this function with our summary and don't have to look deeper into it which you know makes the",
    "start": "918519",
    "end": "924120"
  },
  {
    "text": "analysis again faster more precise and more scalable Okay so so from those",
    "start": "924120",
    "end": "930160"
  },
  {
    "text": "challenges you know we want to use B binary analysis some variants of static analysis what kind of vulnerabilities",
    "start": "930160",
    "end": "936399"
  },
  {
    "text": "are we looking for well you know we look for the classic memory safety vulnerabilities buffer overflows out of",
    "start": "936399",
    "end": "941880"
  },
  {
    "text": "bound reads you know the the the right what we of the right value to any",
    "start": "941880",
    "end": "948480"
  },
  {
    "text": "location that you can control so the the more traditional um generic memory",
    "start": "948480",
    "end": "953519"
  },
  {
    "text": "corruption vulnerabilities but also at authentication bypass back doors which is harder as I will talk about in in a",
    "start": "953519",
    "end": "960880"
  },
  {
    "text": "second because it's more application specific I mean a buffer overflow is the same regardless of what application you",
    "start": "960880",
    "end": "967720"
  },
  {
    "text": "look at it's a Memory violation that can be specified very cleanly if you talk about authentication bypass it's harder",
    "start": "967720",
    "end": "974480"
  },
  {
    "text": "because you have to know more about the application what authentication means in the context of an application or what it",
    "start": "974480",
    "end": "981560"
  },
  {
    "text": "means to be authenticated so there it's harder to model an authentication bypass",
    "start": "981560",
    "end": "987279"
  },
  {
    "text": "generically Than A Memory safety vulnerability um and then there's actuator control basically okay can an",
    "start": "987279",
    "end": "993880"
  },
  {
    "text": "attacker reach certain parts in the program where you can actuate can trigger something that you know makes",
    "start": "993880",
    "end": "1000040"
  },
  {
    "text": "things in the real world move okay so I'll I'll just want to basically give you one motivating",
    "start": "1000040",
    "end": "1005639"
  },
  {
    "text": "example that shows how we detect back doors or how we model back doors um there a simple embedded device so you",
    "start": "1005639",
    "end": "1012040"
  },
  {
    "text": "have an HTTP server it's actually this is not a binary blob but we'll just give you as a simple example you know same",
    "start": "1012040",
    "end": "1017639"
  },
  {
    "text": "thing applies to to binary blobs and what you have here someone else found that you basically have a back door",
    "start": "1017639",
    "end": "1023519"
  },
  {
    "text": "where you give a certain username and a password that's hardcoded in a binary and that allows you to reach",
    "start": "1023519",
    "end": "1029199"
  },
  {
    "text": "authenticated functionality without actually giving a real password so how would you model that normally you would",
    "start": "1029199",
    "end": "1034438"
  },
  {
    "text": "say okay there's a prompt the program ask for some user input then there's authentication routine and then you know",
    "start": "1034439",
    "end": "1040199"
  },
  {
    "text": "depending on the outcome of that authentication you either reach a success or a failure branch that makes",
    "start": "1040199",
    "end": "1045319"
  },
  {
    "text": "sense and so how would you model a back door well there's some other path in that program that bypasses the",
    "start": "1045319",
    "end": "1051280"
  },
  {
    "text": "authentication routine and that could have a string compare or some other check on that input that is different",
    "start": "1051280",
    "end": "1057520"
  },
  {
    "text": "from the normal authentication routine so that's how traditionally back doors are modeled the problem is that in many",
    "start": "1057520",
    "end": "1063520"
  },
  {
    "text": "cases it's actually hard to find that authentication function if you don't manually reverse engineer the program",
    "start": "1063520",
    "end": "1070080"
  },
  {
    "text": "which is exactly what we try to avoid with our automated analysis so how can you work around this how can you specify",
    "start": "1070080",
    "end": "1078480"
  },
  {
    "text": "an au authentication bypass without actually knowing the authentication routine because there could be other",
    "start": "1078480",
    "end": "1083679"
  },
  {
    "text": "problems where this authentication routine is actually simply missing and by just passing some inputs you reach a",
    "start": "1083679",
    "end": "1088960"
  },
  {
    "text": "program state where you are supposedly authenticated or where you can do something that is is something that you",
    "start": "1088960",
    "end": "1095960"
  },
  {
    "text": "shouldn't be able to do as a normal user but there has never been an authentication routine in the first place so that sort of problems with the",
    "start": "1095960",
    "end": "1102960"
  },
  {
    "text": "previous model where you would have to know the authentication routine the authentication routine would have to be present and we need to be able to find",
    "start": "1102960",
    "end": "1110520"
  },
  {
    "text": "path around that so in order to change this we decided okay let's let's change",
    "start": "1110520",
    "end": "1116559"
  },
  {
    "text": "the model a little bit and observe that it's often easy to find where those",
    "start": "1116559",
    "end": "1122320"
  },
  {
    "text": "authenticated states are when you have been successful in reaching an authenticated state so that's easier",
    "start": "1122320",
    "end": "1127760"
  },
  {
    "text": "than finding the authentication routine and if we can find that wouldn't it be great to see okay can I find statically",
    "start": "1127760",
    "end": "1135520"
  },
  {
    "text": "by just looking at the program some inputs that allow me to drive that",
    "start": "1135520",
    "end": "1141039"
  },
  {
    "text": "program to that success State I don't care where the authentication routine is I don't care if there's some bypass I",
    "start": "1141039",
    "end": "1146600"
  },
  {
    "text": "don't care if it's there at all can I have deterministic input can I determine the input just by looking at the program",
    "start": "1146600",
    "end": "1153720"
  },
  {
    "text": "that allows me to drive the execution down to this authenticated success State",
    "start": "1153720",
    "end": "1158960"
  },
  {
    "text": "and if there is no bypass then the answer should be no the program itself doesn't tell you enough information",
    "start": "1158960",
    "end": "1164200"
  },
  {
    "text": "because the bypass uh the the the authentication routine might you know use some PA passwords that are stored",
    "start": "1164200",
    "end": "1169919"
  },
  {
    "text": "somewhere else however if you actually have a authentication bypass like a back",
    "start": "1169919",
    "end": "1175679"
  },
  {
    "text": "door that has a scen compare then I can actually just look at the program and I can determine by looking at the program",
    "start": "1175679",
    "end": "1181600"
  },
  {
    "text": "alone what I need to pass to that program so that I drive it down to that success State and then I can",
    "start": "1181600",
    "end": "1188400"
  },
  {
    "text": "automatically find back doors without even having to know the authentication routine so we built this and um you know",
    "start": "1188400",
    "end": "1194480"
  },
  {
    "text": "Yan will show you an example of how that works on a simple case um and and the only problem that is sort of left is how",
    "start": "1194480",
    "end": "1200720"
  },
  {
    "text": "to model authentication bypass um or rather sorry how to find the success the authenticated State um we say it's",
    "start": "1200720",
    "end": "1207960"
  },
  {
    "text": "easier to find but how well there are certain ways you can say okay if I have some ABI information some system call",
    "start": "1207960",
    "end": "1214720"
  },
  {
    "text": "information I could say okay I'm exing a particular program that only authenticated or trusted users should be",
    "start": "1214720",
    "end": "1220799"
  },
  {
    "text": "able to do I'm accessing certain operating system resources like files but if I don't have that then I have to",
    "start": "1220799",
    "end": "1226720"
  },
  {
    "text": "say Okay is the program printing out a certain string that says hey you are logged in or hey you authenticated or",
    "start": "1226720",
    "end": "1233039"
  },
  {
    "text": "does it touch certain parts of the program that I know are touching devices that it only authenticated users should",
    "start": "1233039",
    "end": "1240080"
  },
  {
    "text": "touch but if I can do that if I can just find one point in a program where I can say okay here it's success then our",
    "start": "1240080",
    "end": "1246640"
  },
  {
    "text": "input determinism approach will just analyze the program and we'll be able to find what inputs are needed from that",
    "start": "1246640",
    "end": "1253840"
  },
  {
    "text": "program to drive it down to that state and that allows us to find Authentication bypass in a very generic",
    "start": "1253840",
    "end": "1260000"
  },
  {
    "text": "way without actually knowing anything about the authentication routine in the first place okay so so basically what",
    "start": "1260000",
    "end": "1265919"
  },
  {
    "text": "I've told you now are some some of our security policies and security policy Checkers so the idea is okay you take a",
    "start": "1265919",
    "end": "1271559"
  },
  {
    "text": "program you have some policy that says okay this is authentication bypass that I don't want or here's here's my model",
    "start": "1271559",
    "end": "1278000"
  },
  {
    "text": "of a memory corruption and now the question is how can I apply those security policies or how can I check for",
    "start": "1278000",
    "end": "1284320"
  },
  {
    "text": "those security policies in that binary program using our static analysis tool",
    "start": "1284320",
    "end": "1289559"
  },
  {
    "text": "and this is when I hand it to Yan he will talk about anger and our static analysis that allows us to find",
    "start": "1289559",
    "end": "1295919"
  },
  {
    "text": "violations of these security policies and produce either reports or even proof of Concepts all right thanks thanks",
    "start": "1295919",
    "end": "1304480"
  },
  {
    "text": "Chris um so as Chris mentioned I will be talking about our awesome binary",
    "start": "1304480",
    "end": "1310520"
  },
  {
    "text": "analysis framework called anger uh you're super excited about it hopefully",
    "start": "1310520",
    "end": "1316200"
  },
  {
    "text": "by the time this is over you're super excited about it you'll see uh some good stuff if uh things get really exciting",
    "start": "1316200",
    "end": "1322880"
  },
  {
    "text": "you'll see some crashes of our stuff maybe but we'll see all right so uh",
    "start": "1322880",
    "end": "1328360"
  },
  {
    "text": "anger um has three main components uh the first component is a binary loader",
    "start": "1328360",
    "end": "1334960"
  },
  {
    "text": "uh it doesn't sound too sexy but a binary loader is uh very necessary when",
    "start": "1334960",
    "end": "1340000"
  },
  {
    "text": "you're dealing with firmware right it's often not clear like Chris mentioned where that firmware should be loaded in",
    "start": "1340000",
    "end": "1345720"
  },
  {
    "text": "memory uh where the execution should begin and so forth for um then we have a symbolic execution um engine and a",
    "start": "1345720",
    "end": "1352679"
  },
  {
    "text": "static analysis uh a bunch of static analysis routines I'll talk about all of them except for the binary loader",
    "start": "1352679",
    "end": "1359720"
  },
  {
    "text": "because you know I already mentioned that but let's talk about the symbolic execution engine uh first so what is",
    "start": "1359720",
    "end": "1367159"
  },
  {
    "text": "symbolic execution symbolic execution is a good way of figuring out how to",
    "start": "1367159",
    "end": "1372480"
  },
  {
    "text": "trigger a certain path or a certain condition in the program uh why would we want to do that um it's not just for fun",
    "start": "1372480",
    "end": "1380320"
  },
  {
    "text": "um recall the example of input determinism to identify uh firmware",
    "start": "1380320",
    "end": "1386760"
  },
  {
    "text": "backdoors um in this model uh we really asking ourselves uh can we satisfy this path",
    "start": "1386760",
    "end": "1395679"
  },
  {
    "text": "that uh gets to the success State can we satisfi it with some uh known input that",
    "start": "1395679",
    "end": "1401320"
  },
  {
    "text": "we can uh glean from the binary um you might imagine that there are many",
    "start": "1401320",
    "end": "1407720"
  },
  {
    "text": "ways of this question so we might try first some of uh the previous analysis techniques that Chris talked about so we",
    "start": "1407720",
    "end": "1414640"
  },
  {
    "text": "might try uh Dynamic analysis technique so you uh pick a username password you",
    "start": "1414640",
    "end": "1420200"
  },
  {
    "text": "try it did it work probably not you try another one um randomly guessing one of",
    "start": "1420200",
    "end": "1426080"
  },
  {
    "text": "these is probably going to be pretty difficult uh you might want to buy a couple lottery tickets see how that goes",
    "start": "1426080",
    "end": "1431840"
  },
  {
    "text": "um so then you could move on to static analysis uh static analysis is too and",
    "start": "1431840",
    "end": "1437520"
  },
  {
    "text": "precise it'll tell you that yeah maybe you can there might be a data flow or path flow to the success State great um",
    "start": "1437520",
    "end": "1444600"
  },
  {
    "text": "but it doesn't provide these sort of actionable inputs um so we need something slightly different so we go um",
    "start": "1444600",
    "end": "1452799"
  },
  {
    "text": "into symbolic execution uh symbol execution is of course a known technique uh anger uh implements uh Dynamic",
    "start": "1452799",
    "end": "1460360"
  },
  {
    "text": "symbolic execution uh based on improvements off of various other uh",
    "start": "1460360",
    "end": "1466559"
  },
  {
    "text": "platforms um but the basic idea is first we interpret the application and we",
    "start": "1466559",
    "end": "1471640"
  },
  {
    "text": "interpret the application by uh modeling any user input as a symbolic variable so",
    "start": "1471640",
    "end": "1476799"
  },
  {
    "text": "over here you see a program that might read in four bytes right so let's say it",
    "start": "1476799",
    "end": "1482399"
  },
  {
    "text": "reads in an nth um that int coming from user input is modeled as a symbolic variable X it's not 10 it's not zero",
    "start": "1482399",
    "end": "1489559"
  },
  {
    "text": "it's not uh 1337 it's X um and as the",
    "start": "1489559",
    "end": "1494960"
  },
  {
    "text": "program branches we track constraints on uh this input so if uh a certain path",
    "start": "1494960",
    "end": "1501640"
  },
  {
    "text": "requires X to be between 10 and 100 we note that down and when the required",
    "start": "1501640",
    "end": "1507279"
  },
  {
    "text": "condition is triggered or the required path is found uh we then do what's called a concretization step to convert",
    "start": "1507279",
    "end": "1514480"
  },
  {
    "text": "the symbolic set of constraints to a real um input so what does that look",
    "start": "1514480",
    "end": "1519679"
  },
  {
    "text": "like uh we have our set of constraints from that branch and if you want to take that Branch if you want to satisfy that",
    "start": "1519679",
    "end": "1526240"
  },
  {
    "text": "state of constraints uh we to a concretization step using a constraint solver such as Z3 or a number of others",
    "start": "1526240",
    "end": "1534760"
  },
  {
    "text": "and uh we get back a possible value this constraint solving is uh pretty tricky",
    "start": "1534760",
    "end": "1540039"
  },
  {
    "text": "it's an NP complete problem uh in general uh so it's one of the kind of",
    "start": "1540039",
    "end": "1545159"
  },
  {
    "text": "complications of symbolic execution that you know you might start a constraint solve and then you might you know starve",
    "start": "1545159",
    "end": "1551120"
  },
  {
    "text": "to death while waiting for it to finish um but luckily their established libraries we",
    "start": "1551120",
    "end": "1557080"
  },
  {
    "text": "leverage uh for this um so given that you know we do Som",
    "start": "1557080",
    "end": "1563720"
  },
  {
    "text": "execution you're I'm sure chomping at the bit to see it happen so we have a uh",
    "start": "1563720",
    "end": "1572000"
  },
  {
    "text": "binary um that implements kind of an example model of this uh back door uh",
    "start": "1572000",
    "end": "1579000"
  },
  {
    "text": "that we want to find so this binary it's an arm binary here uh it asks for username password calls an",
    "start": "1579000",
    "end": "1586399"
  },
  {
    "text": "authentication routine if the authentic routine returns zero then it rejects the user otherwise it accepts the user the",
    "start": "1586399",
    "end": "1592840"
  },
  {
    "text": "sneaky thing is that this authentication routine has a back door and that's right here this back door string compares the",
    "start": "1592840",
    "end": "1600360"
  },
  {
    "text": "password against some uh hardcoded string and if it's true it says the",
    "start": "1600360",
    "end": "1605919"
  },
  {
    "text": "authenticated uh variable to one so uh this binary has a back door so let's see",
    "start": "1605919",
    "end": "1613360"
  },
  {
    "text": "what it happens when we try to find this back door in this binary so here is the",
    "start": "1613360",
    "end": "1619600"
  },
  {
    "text": "guey for anger we call it anger management um the guey uh opens up and",
    "start": "1619600",
    "end": "1627720"
  },
  {
    "text": "uh begins symbolic execution add the entry point to the program so this is the entry point to the program uh even",
    "start": "1627720",
    "end": "1633480"
  },
  {
    "text": "before main um so we can see what is",
    "start": "1633480",
    "end": "1639679"
  },
  {
    "text": "um the output uh or what is the um output of",
    "start": "1639679",
    "end": "1646200"
  },
  {
    "text": "the program so far there's so far are no output here um so let's uh step until we",
    "start": "1646200",
    "end": "1653440"
  },
  {
    "text": "see a branch with symbolic execution so we see a set of constraints on a uh",
    "start": "1653440",
    "end": "1660960"
  },
  {
    "text": "conditional branch on an if statement where we could come up with input to satisfy both sides of it so we step it",
    "start": "1660960",
    "end": "1669000"
  },
  {
    "text": "until it branches and here we have um we see the binary asking the username or asking the",
    "start": "1669000",
    "end": "1677240"
  },
  {
    "text": "uh user for a password and a username so if you look at as well as the uh input you",
    "start": "1677240",
    "end": "1685159"
  },
  {
    "text": "look at the out uh as well as the output we look at the input see what happened",
    "start": "1685159",
    "end": "1691559"
  },
  {
    "text": "um we see that it branched here on the uh password so sneaky so in order to uh",
    "start": "1691559",
    "end": "1699600"
  },
  {
    "text": "satisfy this path the password needs to be so sneaky in order to satisfy this path the password can be anything except",
    "start": "1699600",
    "end": "1706720"
  },
  {
    "text": "for so sneaky um if we keep stepping we'll see that uh the so sneaky",
    "start": "1706720",
    "end": "1715120"
  },
  {
    "text": "path says welcome to the admin console so there's our back door um found using symbolic execution which produces an",
    "start": "1715120",
    "end": "1723200"
  },
  {
    "text": "actionable input and matches our uh security policy so this is great um I mean this",
    "start": "1723200",
    "end": "1731440"
  },
  {
    "text": "is awesome why don't we just use symbolic execution for everything ever and uh be done with it well I'll show",
    "start": "1731440",
    "end": "1737519"
  },
  {
    "text": "you why um this binary of course is quite simple um but if we look at a more complicated",
    "start": "1737519",
    "end": "1746880"
  },
  {
    "text": "binary let's say bash I like bash I you know it was my programm language of",
    "start": "1746880",
    "end": "1753120"
  },
  {
    "text": "choice for a little while um but if we try to symbolically analyze bash we'll see something",
    "start": "1753120",
    "end": "1759200"
  },
  {
    "text": "interesting happen so let's step until bash Forks not Forks but until we have",
    "start": "1759200",
    "end": "1764399"
  },
  {
    "text": "two possible paths um and let's keep going let's let's see what happens if we keep going we have three possible paths",
    "start": "1764399",
    "end": "1771120"
  },
  {
    "text": "now now we have like five or six now we have quite a bit more and as we zoom out",
    "start": "1771120",
    "end": "1778240"
  },
  {
    "text": "we can see that if we keep stepping the amount of uh possible paths is not",
    "start": "1778240",
    "end": "1785559"
  },
  {
    "text": "sustainable to to track um so and if I keep stepping this will keep growing and",
    "start": "1785559",
    "end": "1792799"
  },
  {
    "text": "growing and if I sit here and hammer on this button my laptop will run out of RAM and we'll have another technical situation ation like at the beginning of",
    "start": "1792799",
    "end": "1799640"
  },
  {
    "text": "the uh presentation but what's worse is you can see that with all of this",
    "start": "1799640",
    "end": "1804880"
  },
  {
    "text": "branching um bash is branching on the the input that you provide so um the uh",
    "start": "1804880",
    "end": "1813679"
  },
  {
    "text": "commandline parameters standard input and so forth but if you look even with so many states here in in in bash",
    "start": "1813679",
    "end": "1820480"
  },
  {
    "text": "already if we output what bash has outputed so far and relay that graph",
    "start": "1820480",
    "end": "1828760"
  },
  {
    "text": "if we zoom in you'll see that even with all of these uh paths bash still hasn't",
    "start": "1828760",
    "end": "1834159"
  },
  {
    "text": "even printed anything right so this is uh symbolic exploration undergoing a",
    "start": "1834159",
    "end": "1839840"
  },
  {
    "text": "path explosion inside like initialization code of bash and this is why symbolic expiration alone is a not",
    "start": "1839840",
    "end": "1847600"
  },
  {
    "text": "feasible approach for um this sort of uh",
    "start": "1847600",
    "end": "1853240"
  },
  {
    "text": "vetting for for back doors and vulnerabilities uh at least not Not",
    "start": "1853240",
    "end": "1859440"
  },
  {
    "text": "Alone um so what can we do",
    "start": "1859440",
    "end": "1866000"
  },
  {
    "text": "um of course we want to use symbolic ex execution because uh it's very precise",
    "start": "1866000",
    "end": "1871559"
  },
  {
    "text": "once it tells us there's a back door it can give us an input to trigger that back door um and uh you",
    "start": "1871559",
    "end": "1879720"
  },
  {
    "text": "know those inputs are immediately actionable um it's very flexible but",
    "start": "1879720",
    "end": "1885639"
  },
  {
    "text": "unfortunately it's just not scalable on its own the because of the path explosion problem that we just saw and",
    "start": "1885639",
    "end": "1892039"
  },
  {
    "text": "because constraint solving is uh tricky so if you saw sometimes when I clicked it was sit for a while it was solving a",
    "start": "1892039",
    "end": "1898639"
  },
  {
    "text": "particularly tough set of constraints in the background um",
    "start": "1898639",
    "end": "1903799"
  },
  {
    "text": "so uh and and furthermore we have our case that's very simple our back door",
    "start": "1903799",
    "end": "1910399"
  },
  {
    "text": "but as we saw in a real program with bash um things go kind of badly and in",
    "start": "1910399",
    "end": "1917159"
  },
  {
    "text": "fact a real back door might be buried in an authentication routine that's in a real program right or that's in a real",
    "start": "1917159",
    "end": "1923240"
  },
  {
    "text": "uh binary and has a control flow that is kind of crazy and uh we might not even get to",
    "start": "1923240",
    "end": "1930880"
  },
  {
    "text": "the back door might be in that red square we might not even get there because of a path explosion we'll run out of resources never reach it so what",
    "start": "1930880",
    "end": "1937679"
  },
  {
    "text": "do we do well in Anger we uh provide a bunch of static analysis routines that",
    "start": "1937679",
    "end": "1943120"
  },
  {
    "text": "we can use to guide symbolic execution and uh keep it feasible to detect these",
    "start": "1943120",
    "end": "1948960"
  },
  {
    "text": "back doors um specifically we uh provide uh",
    "start": "1948960",
    "end": "1954679"
  },
  {
    "text": "two main uh types of analyses uh based on a really cool um technique called",
    "start": "1954679",
    "end": "1960679"
  },
  {
    "text": "value set analysis um we have a control flow graph um so anger control flow",
    "start": "1960679",
    "end": "1966039"
  },
  {
    "text": "graph isn't uh like Ida control flow graph in the sense that it just shows you you know direct jumps and some",
    "start": "1966039",
    "end": "1974039"
  },
  {
    "text": "heuristically recovered jumps it attempts to be EXT extremely complete we try to resolve uh indirect jumps um",
    "start": "1974039",
    "end": "1983039"
  },
  {
    "text": "calls through function pointers uh all sort of um hard to analyze uh control",
    "start": "1983039",
    "end": "1990639"
  },
  {
    "text": "flow transitions to attempt to create a very complete control FL graph for other analyses on top of that we do a data",
    "start": "1990639",
    "end": "1997480"
  },
  {
    "text": "flow analysis so once we identify the um successfully authenticated point we um",
    "start": "1997480",
    "end": "2004320"
  },
  {
    "text": "use a data flow analysis to determine a small slice of the program that we can",
    "start": "2004320",
    "end": "2009399"
  },
  {
    "text": "execute instead of the entire firmware to analyze just the authentication",
    "start": "2009399",
    "end": "2014880"
  },
  {
    "text": "routine and this is all uh powered like I said by value set analysis so let's",
    "start": "2014880",
    "end": "2020480"
  },
  {
    "text": "dive into value set analysis real quick um value set analysis is very useful at",
    "start": "2020480",
    "end": "2025919"
  },
  {
    "text": "telling us things that symbolic execution is not good at um or that you",
    "start": "2025919",
    "end": "2032480"
  },
  {
    "text": "know uh that other static analyses might not be very good at um so give take this",
    "start": "2032480",
    "end": "2038240"
  },
  {
    "text": "example this is a a simple Loop that looks through an array for the value uh",
    "start": "2038240",
    "end": "2045159"
  },
  {
    "text": "1337 and we want to know at the end of this Loop what is the value in RBX right",
    "start": "2045159",
    "end": "2053280"
  },
  {
    "text": "uh and RBX is of course the uh loop counter in this example so um symbolic",
    "start": "2053280",
    "end": "2059919"
  },
  {
    "text": "exploration uh under goes a state explosion here at every Loop it uh",
    "start": "2059919",
    "end": "2065839"
  },
  {
    "text": "spawns off a path that exits the loop and one that doesn't first time uh it",
    "start": "2065839",
    "end": "2071040"
  },
  {
    "text": "says okay is did we find 1337 maybe right so it spawns off two paths one",
    "start": "2071040",
    "end": "2076280"
  },
  {
    "text": "which did one which didn't by the end of this you'll have 1024 paths um and of",
    "start": "2076280",
    "end": "2081599"
  },
  {
    "text": "course then every other uh part of your program will then uh every other part of your analysis will explode by that much",
    "start": "2081599",
    "end": "2088679"
  },
  {
    "text": "so we could do some naive static analysis which tells us RBX can be anything that's precise I mean that's uh",
    "start": "2088679",
    "end": "2094878"
  },
  {
    "text": "uh correct uh but it's not precise right um we could improve the Precision",
    "start": "2094879",
    "end": "2101280"
  },
  {
    "text": "with a range analysis that tells us RBX is less than ox 1024 Ox 1024 for some",
    "start": "2101280",
    "end": "2107839"
  },
  {
    "text": "reason is the size of this uh buffer uh we can see it right here um so then you",
    "start": "2107839",
    "end": "2114160"
  },
  {
    "text": "know we have a question can we do better the answer is uh yes uh we can use value",
    "start": "2114160",
    "end": "2119359"
  },
  {
    "text": "set analysis value set analysis is a really complex uh analysis that does",
    "start": "2119359",
    "end": "2125720"
  },
  {
    "text": "quite a lot of uh complicated things but let's dive into a specific uh part of it",
    "start": "2125720",
    "end": "2131280"
  },
  {
    "text": "um we look at strided intervals in value set analysis a strided interval represents a set of values stri interval",
    "start": "2131280",
    "end": "2139680"
  },
  {
    "text": "and value set analysis the the equivalent of a symbolic execution symbolic variable right so when we had X",
    "start": "2139680",
    "end": "2146960"
  },
  {
    "text": "before and then we had constraints on X stri variable is the static analysis",
    "start": "2146960",
    "end": "2152599"
  },
  {
    "text": "equivalent of that in this case so this stred interval here um has a low value",
    "start": "2152599",
    "end": "2158400"
  },
  {
    "text": "of ox 100 a high value of O x120 size of 32 bytes and a stride of four so the",
    "start": "2158400",
    "end": "2164400"
  },
  {
    "text": "stride of four means that it can take any value at intervals of four between Ox 100 and Ox 120 so how does this um",
    "start": "2164400",
    "end": "2171400"
  },
  {
    "text": "help us right so let's look at how we' Analyze That example with uh value Cent",
    "start": "2171400",
    "end": "2176720"
  },
  {
    "text": "analysis we start out at uh program position one here where we just initialize RBX RBX is now a stred",
    "start": "2176720",
    "end": "2184640"
  },
  {
    "text": "interval between 0 and Zer with a strat of one great so then we go through the loop",
    "start": "2184640",
    "end": "2190599"
  },
  {
    "text": "once right so um as we go through the loop we merge uh at the loop back at the",
    "start": "2190599",
    "end": "2198599"
  },
  {
    "text": "Loop header we merge the value of RBX with its previous value so when we merge those sh intervals we get a stri",
    "start": "2198599",
    "end": "2204920"
  },
  {
    "text": "interval that could be zero or four that's uh range of uh between 0 and four",
    "start": "2204920",
    "end": "2210800"
  },
  {
    "text": "with a stri of four two values we go through it again we emerge it it can has",
    "start": "2210800",
    "end": "2215920"
  },
  {
    "text": "three values 0 4 and 8 then 04 and c and finally we hit the limit of our patients",
    "start": "2215920",
    "end": "2222160"
  },
  {
    "text": "we say screw it and we do a widening operation right so in order to keep this feasible we have a loop limiter after",
    "start": "2222160",
    "end": "2228040"
  },
  {
    "text": "which we widen so we say okay now it can be between zero and infinity but it's",
    "start": "2228040",
    "end": "2233079"
  },
  {
    "text": "still that stri of four we know it's a stri of four um which is interesting because we didn't know that in any of the other analyses but further on we can",
    "start": "2233079",
    "end": "2240920"
  },
  {
    "text": "then do a narrowing operation we analyze it again and we see oh okay that maximum",
    "start": "2240920",
    "end": "2246920"
  },
  {
    "text": "uh was 1024 and that allows us to get out of the loop into RBX and now we know",
    "start": "2246920",
    "end": "2252359"
  },
  {
    "text": "that RBX can be between zero and Ox 1024 with a shride of four this is more",
    "start": "2252359",
    "end": "2258400"
  },
  {
    "text": "information than our R analysis told us and it's specifically critical because uh for example if RBX is then used as an",
    "start": "2258400",
    "end": "2266359"
  },
  {
    "text": "entry into a jump table we know that the jump table has addresses starting every four bytes which is critical for",
    "start": "2266359",
    "end": "2273319"
  },
  {
    "text": "resolving indirect jumps through jump tables um so that's anger",
    "start": "2273319",
    "end": "2280640"
  },
  {
    "text": "uh I I've talked about the um different components different analyses we have in",
    "start": "2280640",
    "end": "2286440"
  },
  {
    "text": "it uh some of them there's more of course um but what did we use it for",
    "start": "2286440",
    "end": "2292240"
  },
  {
    "text": "well one of the things we use it for other than back doors and firmware is the DARPA cyber Grand Challenge uh as I",
    "start": "2292240",
    "end": "2298640"
  },
  {
    "text": "said the Cyber Grand Challenge is a uh contest to build an autonomous hacking",
    "start": "2298640",
    "end": "2303920"
  },
  {
    "text": "platform that uh can hack and Patch vulnerabilities sh fish uh participated",
    "start": "2303920",
    "end": "2309520"
  },
  {
    "text": "um as a bunch of grad students out of UC Santa Barbara if you guys think your uh",
    "start": "2309520",
    "end": "2315960"
  },
  {
    "text": "company's code is uh kind of crazy you should see what 11 grad students um",
    "start": "2315960",
    "end": "2321800"
  },
  {
    "text": "hobble together in their spare time with uh very little oversight it's pretty",
    "start": "2321800",
    "end": "2327480"
  },
  {
    "text": "crazy but we used it we created a cyber reasoning system um which uh did a lot",
    "start": "2327480",
    "end": "2334760"
  },
  {
    "text": "of stuff including um scanning for vulnerabilities and",
    "start": "2334760",
    "end": "2340160"
  },
  {
    "text": "patching the vulnerabilities and both of those uh used as one of their main components anger so this system is uh",
    "start": "2340160",
    "end": "2347640"
  },
  {
    "text": "pretty uh uh powerful and actually very usable uh we used it to qualify for the",
    "start": "2347640",
    "end": "2353760"
  },
  {
    "text": "cgc on when a fair chunk of change for shellfish so it was pretty awesome um so",
    "start": "2353760",
    "end": "2361000"
  },
  {
    "text": "we made anger so that anyone could use it not just us you use it from my python",
    "start": "2361000",
    "end": "2366599"
  },
  {
    "text": "um you can access its analyses in a well- encapsulated very usable way lots",
    "start": "2366599",
    "end": "2372560"
  },
  {
    "text": "of buzzwords um and moreover we made architecture independent you saw me analyze an arm binary uh cgc was x86 we",
    "start": "2372560",
    "end": "2380960"
  },
  {
    "text": "actually support the 64-bit and 32-bit uh variants of every major",
    "start": "2380960",
    "end": "2386400"
  },
  {
    "text": "architecture um myips arm PPC x86 uh we use Vex as our internal",
    "start": "2386400",
    "end": "2393760"
  },
  {
    "text": "representation which allows us uh to do that Vex is what valr uses which is how your Val gr mem checks work um so uh",
    "start": "2393760",
    "end": "2403440"
  },
  {
    "text": "anger as I said super easy to use here's uh on the top there we can generate and",
    "start": "2403440",
    "end": "2408920"
  },
  {
    "text": "display uh control flow graph for a binary in four lines of python uh that's including importing anger and loading",
    "start": "2408920",
    "end": "2415560"
  },
  {
    "text": "the binary um and on the bottom we can uh carry out symbolic execution uh super",
    "start": "2415560",
    "end": "2423599"
  },
  {
    "text": "simply as well uh of course it's up to you to make sure it doesn't explode and so forth but the uh core analyses are",
    "start": "2423599",
    "end": "2431079"
  },
  {
    "text": "exposed very readily and what's more anger's open source so as of right now as of this",
    "start": "2431079",
    "end": "2438599"
  },
  {
    "text": "talk view open source anger you can find it on GitHub you can hit up our website",
    "start": "2438599",
    "end": "2444440"
  },
  {
    "text": "anger. as long as uh they got the internet working enough to update the website um and you can subscribe to our",
    "start": "2444440",
    "end": "2450960"
  },
  {
    "text": "mailing list um rer represents almost 2 years of work this",
    "start": "2450960",
    "end": "2457359"
  },
  {
    "text": "is our baby uh the line numbers are almost 60,000 it's a gigantic project",
    "start": "2457359",
    "end": "2463480"
  },
  {
    "text": "all python uh tiny bit of a sea stub uh in one place um and there are about",
    "start": "2463480",
    "end": "2470319"
  },
  {
    "text": "6,000 commits I mean this is a pretty crazy uh undertaking uh and we hope that open",
    "start": "2470319",
    "end": "2477680"
  },
  {
    "text": "sourcing this will kind of launch the next generation of binary analysis um that we'd love to uh collaborate with",
    "start": "2477680",
    "end": "2484960"
  },
  {
    "text": "everyone to uh improve our capabilities in this field uh as in the community's",
    "start": "2484960",
    "end": "2490880"
  },
  {
    "text": "capabilities so check out anger uh star us of course on GitHub that goes without saying um and uh issues pull requests",
    "start": "2490880",
    "end": "2499839"
  },
  {
    "text": "everything's welcome um shoot us an email",
    "start": "2499839",
    "end": "2506040"
  },
  {
    "text": "yeah any questions yeah questions um please step up to the microphone and um",
    "start": "2513560",
    "end": "2519280"
  },
  {
    "text": "let it",
    "start": "2519280",
    "end": "2521640"
  },
  {
    "text": "know someone has to ask like a some question you got it go",
    "start": "2529240",
    "end": "2537560"
  },
  {
    "text": "oh ah we have a microphone situation oh okay a hi yeah just a quick question um",
    "start": "2537560",
    "end": "2543599"
  },
  {
    "text": "I just noticed that when you were analyzing I may have gotten is wrong or mistaking it but when you analyzing it",
    "start": "2543599",
    "end": "2550160"
  },
  {
    "text": "it seems like you were going from the start to the end to find the success or the success path is there is it much",
    "start": "2550160",
    "end": "2557880"
  },
  {
    "text": "easier to do that CU it seems the paths are going to really be explosive as what you mentioned but what if you go from",
    "start": "2557880",
    "end": "2563880"
  },
  {
    "text": "the success path we go backwards to find the success PA so that's that's the full",
    "start": "2563880",
    "end": "2569680"
  },
  {
    "text": "approach um but if you don't have really a visual guey for it right so the full approach is of course identify that",
    "start": "2569680",
    "end": "2576240"
  },
  {
    "text": "success path um calculate the data dependency graph and then slice backwards and then execute just that",
    "start": "2576240",
    "end": "2583160"
  },
  {
    "text": "slice um that's much harder to visualize um so right now our our GUI supports",
    "start": "2583160",
    "end": "2590599"
  },
  {
    "text": "some some static analyses mostly in terms of grabbing the control flow uh graph and then it supports this symbolic",
    "start": "2590599",
    "end": "2598119"
  },
  {
    "text": "expiration um what we did for the paper for example is implement this uh exactly",
    "start": "2598119",
    "end": "2605000"
  },
  {
    "text": "what you're saying yeah",
    "start": "2605000",
    "end": "2609119"
  },
  {
    "text": "[Music] so what what do you guys use for resolving function pointers um we use so we use uh value",
    "start": "2611870",
    "end": "2619319"
  },
  {
    "text": "set analysis for uh I mean we use a whole bunch of techniques the CFG code",
    "start": "2619319",
    "end": "2624440"
  },
  {
    "text": "you can check it out it's several thousand lines long of complete Insanity the guy that wrote it is sitting over",
    "start": "2624440",
    "end": "2630480"
  },
  {
    "text": "there laughing right now um so we use uh a lot of stuff um depending on the",
    "start": "2630480",
    "end": "2638160"
  },
  {
    "text": "function pointer so if it's for example um something that's in a global struct",
    "start": "2638160",
    "end": "2643319"
  },
  {
    "text": "somewhere right we might use a value set analysis to identify the possible ranges",
    "start": "2643319",
    "end": "2648680"
  },
  {
    "text": "of uh where the pointer can uh point to and then you know jump there um if it's",
    "start": "2648680",
    "end": "2656359"
  },
  {
    "text": "something that is computed on the Fly uh in certain cases we have to resort to",
    "start": "2656359",
    "end": "2663200"
  },
  {
    "text": "slicing backwards from the jump and symbolically executing that slice to determine the jump Target so there there",
    "start": "2663200",
    "end": "2670119"
  },
  {
    "text": "are several of these uh different types of operations that we can carry out to resolve as many of these uh indirect",
    "start": "2670119",
    "end": "2676520"
  },
  {
    "text": "pointers as possible okay I I guess my question really was like what kind of points to analysis do you do uh it's a",
    "start": "2676520",
    "end": "2682599"
  },
  {
    "text": "more of a fish question okay but yeah um I'd love to talk to you offline with uh",
    "start": "2682599",
    "end": "2689280"
  },
  {
    "text": "uh other guys seems that we have to wrap it up right or are something",
    "start": "2689280",
    "end": "2694319"
  },
  {
    "text": "them okay so we'll still take a few question and otherwise we'll just continue to talk to you guys side so",
    "start": "2694319",
    "end": "2700400"
  },
  {
    "text": "right did you publish this paper on this tour and and so the paper is",
    "start": "2700400",
    "end": "2706920"
  },
  {
    "text": "falis um it was published at ndss in February can I have a title I'm sorry",
    "start": "2706920",
    "end": "2713079"
  },
  {
    "text": "can I have your paper title falice okay f i r m a l i c e thank you mhm for one",
    "start": "2713079",
    "end": "2721000"
  },
  {
    "text": "more yeah uh yeah I'm interested in your binary loader do we have some nice",
    "start": "2721000",
    "end": "2726079"
  },
  {
    "text": "characteristics that can detect like Linux kernel or VX Works something like",
    "start": "2726079",
    "end": "2731640"
  },
  {
    "text": "that that can guess uh loading addresses images in the in memory we uh detect",
    "start": "2731640",
    "end": "2737720"
  },
  {
    "text": "loading addresses um and then we have some analyses um that identify try to identify like uh",
    "start": "2737720",
    "end": "2746280"
  },
  {
    "text": "start points uh like where where execution might be able to start um but the the loading address detection is",
    "start": "2746280",
    "end": "2753720"
  },
  {
    "text": "fairly robust it uses a bunch of different like jump tape Global memory access TR I figure out",
    "start": "2753720",
    "end": "2759319"
  },
  {
    "text": "where the binary needs to go so it even works sometimes yeah sometimes it works",
    "start": "2759319",
    "end": "2765440"
  },
  {
    "text": "it it happens yeah uh okay uh does it work",
    "start": "2765440",
    "end": "2771200"
  },
  {
    "text": "with polymorphic code or can you extended to do this uh with what poly so code that changes itself so we have",
    "start": "2771200",
    "end": "2779000"
  },
  {
    "text": "never tested it with polymorphic code but when we lift um bytes like to to",
    "start": "2779000",
    "end": "2784920"
  },
  {
    "text": "translate and analyze we lift them from from the running State uh I'd have to",
    "start": "2784920",
    "end": "2790280"
  },
  {
    "text": "see if that's the default but we have that ability um so I I I want to say yes it should it",
    "start": "2790280",
    "end": "2797119"
  },
  {
    "text": "should be able to there's nothing fundamental stopping it but uh I'm sure that the first time you try it something",
    "start": "2797119",
    "end": "2802440"
  },
  {
    "text": "will go horribly wrong but try it open an issue it'll be interesting to see",
    "start": "2802440",
    "end": "2807520"
  },
  {
    "text": "thanks thanks last question over there okay so which uh solare did you use for",
    "start": "2807520",
    "end": "2812599"
  },
  {
    "text": "the symbolic execution tool we use Z3 Z3 yeah so we we released a anger has a",
    "start": "2812599",
    "end": "2820520"
  },
  {
    "text": "bunch of different components has like six or seven repositories um you can",
    "start": "2820520",
    "end": "2825599"
  },
  {
    "text": "check it out um but we have one that's a uh abstraction layer over Z3 and the",
    "start": "2825599",
    "end": "2832520"
  },
  {
    "text": "domain supporting value set analysis so we can have this kind of unified interface to them but for solving we use",
    "start": "2832520",
    "end": "2839640"
  },
  {
    "text": "Z3 oh okay all right well thank you very much",
    "start": "2839640",
    "end": "2847400"
  },
  {
    "text": "thanks guys [Applause]",
    "start": "2847400",
    "end": "2852469"
  }
]