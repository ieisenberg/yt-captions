[
  {
    "text": "good afternoon everyone uh happy to be here uh Welcome to our talk exploiting opcua in every possible way um my name",
    "start": "3360",
    "end": "11719"
  },
  {
    "text": "is Sheron brov with me n we both are researchers at Clarity uh Team 82 uh in",
    "start": "11719",
    "end": "19720"
  },
  {
    "text": "Clarity we're doing a lot of uh IC related research so you can see here for example our lab in Tel Aviv uh where we",
    "start": "19720",
    "end": "27800"
  },
  {
    "text": "have a lot of interesting equipment including plc's hmis uh scatter servers",
    "start": "27800",
    "end": "34079"
  },
  {
    "text": "and we're trying to uh research all of these products uh and find vulnerabilities in",
    "start": "34079",
    "end": "40559"
  },
  {
    "text": "them so today we're going to talk about our Research into",
    "start": "40559",
    "end": "45879"
  },
  {
    "text": "opcua specifically implementations of opcua protocol um throughout the two or",
    "start": "45879",
    "end": "52960"
  },
  {
    "text": "three years uh We've researched dozens of different opcua protocol",
    "start": "52960",
    "end": "59039"
  },
  {
    "text": "implementations and we discovered many vulnerabilities around 50 CVS and we",
    "start": "59039",
    "end": "64799"
  },
  {
    "text": "also developed 12 different what we call them attack Concepts on opcua uh servers",
    "start": "64799",
    "end": "72280"
  },
  {
    "text": "clients uh protocol gateways uh basically any product that has support",
    "start": "72280",
    "end": "77680"
  },
  {
    "text": "of opcua uh and throughout these uh years we've released open- Source",
    "start": "77680",
    "end": "82920"
  },
  {
    "text": "projects and tools for example opcua fazer uh and today we're also going to",
    "start": "82920",
    "end": "88680"
  },
  {
    "text": "share and release a new exploit framework dedicated specifically for",
    "start": "88680",
    "end": "94960"
  },
  {
    "text": "opcua um and finally we would like to say thank you to zdi um zdi has their",
    "start": "94960",
    "end": "102079"
  },
  {
    "text": "pone to own competitions and they really pushed uh and emphasized on opcua",
    "start": "102079",
    "end": "107799"
  },
  {
    "text": "Research uh and they really incentivized us to research opcua in the the last few",
    "start": "107799",
    "end": "113719"
  },
  {
    "text": "years and we also got some nice uh prize money for this so let's start um",
    "start": "113719",
    "end": "120360"
  },
  {
    "text": "we're going to first discuss a little bit about what is opcua um cover some protocol stack",
    "start": "120360",
    "end": "127080"
  },
  {
    "text": "implementations discuss the bits and bites of opcua and then we're going to delve in into our research our",
    "start": "127080",
    "end": "133520"
  },
  {
    "text": "vulnerabilities exploits and finally share the new exploit framework that uh we've been working on in the last few",
    "start": "133520",
    "end": "141640"
  },
  {
    "text": "years so let's start with what is opcua what's the problem that opcua tried to",
    "start": "141640",
    "end": "146760"
  },
  {
    "text": "solve now if we're talking about uh an indust process for example we have a",
    "start": "146760",
    "end": "152760"
  },
  {
    "text": "water tank that we want to keep track of the water level inside of it uh we would",
    "start": "152760",
    "end": "158400"
  },
  {
    "text": "probably have a PC uh with some kind of logic that keep track of a variable uh",
    "start": "158400",
    "end": "164760"
  },
  {
    "text": "named water level now if we were in the past and we wanted to monitor this",
    "start": "164760",
    "end": "170680"
  },
  {
    "text": "process um meaning query the PLC to understand what is the current water",
    "start": "170680",
    "end": "176519"
  },
  {
    "text": "level basically trying to read this variable or this tag we would need to",
    "start": "176519",
    "end": "181640"
  },
  {
    "text": "use the same uh compatible software that know how to communicate in the specific",
    "start": "181640",
    "end": "187720"
  },
  {
    "text": "proprietary ICS protocol with the PLC uh and so we were very limited to",
    "start": "187720",
    "end": "193000"
  },
  {
    "text": "the type of the equipment that we could have in our factories or production lines and so opcua was kind of invented",
    "start": "193000",
    "end": "201040"
  },
  {
    "text": "to solve this uh and it became uh the standard way to exchange data in",
    "start": "201040",
    "end": "207080"
  },
  {
    "text": "industrial networks so now we don't need to have any specific equipment that needs to talk the",
    "start": "207080",
    "end": "214080"
  },
  {
    "text": "specific IC protocol uh instead we only need to know opcua so all the different",
    "start": "214080",
    "end": "220120"
  },
  {
    "text": "products in our uh Factory can communicate in opcua and we have kind of a uniform unified platform to",
    "start": "220120",
    "end": "228000"
  },
  {
    "text": "communicate and exchange data on the physical process so again for example if",
    "start": "228000",
    "end": "233159"
  },
  {
    "text": "we want to read the water level tag all we need to do is to do the read equivalent in opcua and get the this",
    "start": "233159",
    "end": "240760"
  },
  {
    "text": "variable so this was kind of the background why opcua created so opcua",
    "start": "240760",
    "end": "246799"
  },
  {
    "text": "stands for open platform Communications unified architecture and it's a protocol",
    "start": "246799",
    "end": "251840"
  },
  {
    "text": "for mainly used for data exchange between industrial devices and systems so in most cases we have servers which",
    "start": "251840",
    "end": "259320"
  },
  {
    "text": "store information about variables and tags and we have clients that read or",
    "start": "259320",
    "end": "264840"
  },
  {
    "text": "write these variables in TXS it's a widely accepted standard for Industrial",
    "start": "264840",
    "end": "270680"
  },
  {
    "text": "Communications and it's even supported by uh Cloud platforms like uh Azure and",
    "start": "270680",
    "end": "276520"
  },
  {
    "text": "AWS iot now opcua was developed by OPC foundation around 2006 uh based on",
    "start": "276520",
    "end": "283360"
  },
  {
    "text": "lesson learned from the previous version OPC uh OPC da or OPC classic um the new",
    "start": "283360",
    "end": "289560"
  },
  {
    "text": "version opcua became uh independent platform which is very scalable and even",
    "start": "289560",
    "end": "295520"
  },
  {
    "text": "secure uh now to make sure all the uh important aspects of opcua are kept OPC",
    "start": "295520",
    "end": "302880"
  },
  {
    "text": "Foundation created a very very detailed specifications where anyone can find uh",
    "start": "302880",
    "end": "309400"
  },
  {
    "text": "information about the protocol including the information module services for example how one needs to read or write",
    "start": "309400",
    "end": "316720"
  },
  {
    "text": "tags um and also security uh for example how to properly do authentication using",
    "start": "316720",
    "end": "323479"
  },
  {
    "text": "opcua now to accelerate the use of opcua",
    "start": "323479",
    "end": "328639"
  },
  {
    "text": "OPC Foundation created in the early days three main protocol Stacks so they developed um a",
    "start": "328639",
    "end": "336800"
  },
  {
    "text": "protocol stack in Java net and MCC and released these prodical stocks uh so",
    "start": "336800",
    "end": "343479"
  },
  {
    "text": "anyone who wants to start using opcua could use them um as uh the base",
    "start": "343479",
    "end": "349280"
  },
  {
    "text": "protocol stack for their product now with time vendor integrated the base",
    "start": "349280",
    "end": "355000"
  },
  {
    "text": "stxs and modified some of its code uh and today you can find many many many products around 500 products that are",
    "start": "355000",
    "end": "362280"
  },
  {
    "text": "using opcua and most of them are based on these three libraries um and you can",
    "start": "362280",
    "end": "367440"
  },
  {
    "text": "find all these uh products that support opcua in the OPC Foundation website this",
    "start": "367440",
    "end": "373400"
  },
  {
    "text": "is where we looked uh to to understand what do we want to research and how to research",
    "start": "373400",
    "end": "379319"
  },
  {
    "text": "it now the problem with uh these types of products is as I said many of them",
    "start": "379319",
    "end": "386759"
  },
  {
    "text": "are built upon uh very specific protocol Stacks that were developed in in the",
    "start": "386759",
    "end": "392639"
  },
  {
    "text": "early days so the problem is that most products today are heavily relying on",
    "start": "392639",
    "end": "398280"
  },
  {
    "text": "the base protocol Stacks from OPC foundation so for example if we'll uh",
    "start": "398280",
    "end": "403800"
  },
  {
    "text": "check the five most common products that support opcua for example uh opca",
    "start": "403800",
    "end": "411280"
  },
  {
    "text": "servers um from different uh programming languages from C C++ net Java uh we will",
    "start": "411280",
    "end": "417680"
  },
  {
    "text": "see that most most of of them integrated the core libraries of uh the protocol",
    "start": "417680",
    "end": "423879"
  },
  {
    "text": "stocks released by OPC foundation and a little bit changed or modified some of",
    "start": "423879",
    "end": "429360"
  },
  {
    "text": "its code or added some features but the base core stayed the",
    "start": "429360",
    "end": "434639"
  },
  {
    "text": "same so obviously the problem is that if someone will find bugs or",
    "start": "434639",
    "end": "441759"
  },
  {
    "text": "vulnerabilities in the core libraries uh it will be shared across many different",
    "start": "441759",
    "end": "447520"
  },
  {
    "text": "uh products so so to do this uh this is what we wanted to achieve uh so to do",
    "start": "447520",
    "end": "454440"
  },
  {
    "text": "this we uh made a list of all the major opcua protocol stocks servers clients",
    "start": "454440",
    "end": "461599"
  },
  {
    "text": "basically any product that supports in some way opcua and we started to analyze",
    "start": "461599",
    "end": "467639"
  },
  {
    "text": "and categorized different products based on their uh similarities and based uh",
    "start": "467639",
    "end": "474400"
  },
  {
    "text": "prodal stocks so for example if we saw a couple of U uh products that that are",
    "start": "474400",
    "end": "479560"
  },
  {
    "text": "using the same core protocol stock or at least what we thought was the same protocol stock we categorized it on the",
    "start": "479560",
    "end": "486680"
  },
  {
    "text": "same group and so we started to research these groups based on dire uh base",
    "start": "486680",
    "end": "493159"
  },
  {
    "text": "protocol stack now before we delve in into our research and how we research these",
    "start": "493159",
    "end": "500400"
  },
  {
    "text": "products and prodal stocks uh let's do a quick um over quick Crush course on",
    "start": "500400",
    "end": "507520"
  },
  {
    "text": "opcua So You Know opcua everything is a node node is a very strong terminology",
    "start": "507520",
    "end": "513159"
  },
  {
    "text": "in opcua and everything uh is described as node so for example our water level",
    "start": "513159",
    "end": "520039"
  },
  {
    "text": "variable is also a node and each node has a type so in our example the water",
    "start": "520039",
    "end": "525440"
  },
  {
    "text": "level variable will be node with type float uh nodes are arranged inside name",
    "start": "525440",
    "end": "532440"
  },
  {
    "text": "spaces uh so namespace is kind of a container for for nodes and we can have different um name name spaces for",
    "start": "532440",
    "end": "540240"
  },
  {
    "text": "different uh purposes and therefore nod nodes can be identified by the Nam space",
    "start": "540240",
    "end": "547440"
  },
  {
    "text": "ID NS and the identification of this node inside the namespace so every I and",
    "start": "547440",
    "end": "555000"
  },
  {
    "text": "NS identify a specific node uh now the specification tells us",
    "start": "555000",
    "end": "562360"
  },
  {
    "text": "exactly how we need to encode and decode nodes over the network line so in the",
    "start": "562360",
    "end": "567920"
  },
  {
    "text": "specification they say exactly how uh the name space should be encoded for example namespace should be en encoded",
    "start": "567920",
    "end": "574720"
  },
  {
    "text": "as bite and the identifier needs to be encoded as un6 um and this gave us uh",
    "start": "574720",
    "end": "580760"
  },
  {
    "text": "kind of the the basic building blocks when we started to research the specification on how should we Implement",
    "start": "580760",
    "end": "586600"
  },
  {
    "text": "uh our own packet our own opcua uh client um now in opcua we also have",
    "start": "586600",
    "end": "594519"
  },
  {
    "text": "Services uh Services is our our interaction with the server",
    "start": "594519",
    "end": "600079"
  },
  {
    "text": "um and we can uh kind of activate different services that will interact with nodes so for example we have a",
    "start": "600079",
    "end": "607640"
  },
  {
    "text": "service uh called read Service where we can use it to read values uh from uh",
    "start": "607640",
    "end": "614200"
  },
  {
    "text": "different nodes so if you want to read the variable like the word level we can use the read Service uh we also have",
    "start": "614200",
    "end": "620880"
  },
  {
    "text": "right service exactly the same for writing values um and we also have",
    "start": "620880",
    "end": "626200"
  },
  {
    "text": "something interesting call called call service where we can activate methods in",
    "start": "626200",
    "end": "632040"
  },
  {
    "text": "the opcua server and these methods can receive nodes as arguments and we will",
    "start": "632040",
    "end": "637720"
  },
  {
    "text": "see some example for this later um if we go back again to our example uh we have",
    "start": "637720",
    "end": "644480"
  },
  {
    "text": "a water tank a physical process that we want to monitor using opcua so in our",
    "start": "644480",
    "end": "650519"
  },
  {
    "text": "data model we will have uh for example our water level variable uh which",
    "start": "650519",
    "end": "656399"
  },
  {
    "text": "obviously will have a type float um and if we would want to have an HMI to",
    "start": "656399",
    "end": "662240"
  },
  {
    "text": "monitor this process we would configure it to use the read Service to constantly",
    "start": "662240",
    "end": "667720"
  },
  {
    "text": "read the variable from the opca server and this is how we will be able to",
    "start": "667720",
    "end": "673480"
  },
  {
    "text": "monitor our process using opcua great so this was kind of a quick",
    "start": "673480",
    "end": "679680"
  },
  {
    "text": "Crush course uh and now we'll move on to our research methodology so as I said we",
    "start": "679680",
    "end": "685440"
  },
  {
    "text": "were very interested in researching a lot of different products that support",
    "start": "685440",
    "end": "690639"
  },
  {
    "text": "opcua So to do this we bought two Intel nukes and install VMware esxi we want to",
    "start": "690639",
    "end": "697800"
  },
  {
    "text": "spin up a lot of different virtual machines and on each virtual machine we",
    "start": "697800",
    "end": "703480"
  },
  {
    "text": "installed different product so we made a very very long list of different uh",
    "start": "703480",
    "end": "708959"
  },
  {
    "text": "protocol stocks servers Gateway protocols um clients Etc basically any",
    "start": "708959",
    "end": "716680"
  },
  {
    "text": "interesting uh product that supports PCA and we installed it on different uh",
    "start": "716680",
    "end": "722480"
  },
  {
    "text": "machine and started to research it from different angles uh the first angle was",
    "start": "722480",
    "end": "729000"
  },
  {
    "text": "to build the basic opcua client from very early in our project we wanted to",
    "start": "729000",
    "end": "734920"
  },
  {
    "text": "have our own client opcua client that we built from zero from scratch um and why",
    "start": "734920",
    "end": "741480"
  },
  {
    "text": "is that um because we wanted to have some hands-on experience with opca so we",
    "start": "741480",
    "end": "747279"
  },
  {
    "text": "wanted to build it ourselves uh we wanted also to focus on the logic and have a customizable uh and very uh",
    "start": "747279",
    "end": "755600"
  },
  {
    "text": "tailor made to our needs so for example we uh configured the the client the opca",
    "start": "755600",
    "end": "762519"
  },
  {
    "text": "client that we built uh to be very modular and dynamic so if we wanted to alter and modify and change some of uh",
    "start": "762519",
    "end": "769880"
  },
  {
    "text": "the opca messages uh throughout uh their life cycle for example when we initiate",
    "start": "769880",
    "end": "775760"
  },
  {
    "text": "new session we could really easily do that and change any aspect of the protocol from initiating an opca session",
    "start": "775760",
    "end": "783880"
  },
  {
    "text": "up to changing specific bits in a very specific opca message uh now the way we",
    "start": "783880",
    "end": "789560"
  },
  {
    "text": "did this is by reading a lot of the specification the opcua specification are really good they're very detailed uh",
    "start": "789560",
    "end": "796480"
  },
  {
    "text": "and we also uh relied on the protocol analysis from wi shark and other uh",
    "start": "796480",
    "end": "802720"
  },
  {
    "text": "other available tools so once we had our opcua client it was kind of the very uh",
    "start": "802720",
    "end": "809519"
  },
  {
    "text": "basic building blocks for our research and we could continue and build things above it for example one of the things",
    "start": "809519",
    "end": "817399"
  },
  {
    "text": "uh that we built is a network fuzer uh that is heavily relied on our client but",
    "start": "817399",
    "end": "823800"
  },
  {
    "text": "also on other Frameworks like bufas uh and we ran this fer for a very long time",
    "start": "823800",
    "end": "829720"
  },
  {
    "text": "against uh all the products that we installed on our uh virtual environment",
    "start": "829720",
    "end": "835639"
  },
  {
    "text": "uh and we fuzed mostly six services including uh read and write of of uh TS",
    "start": "835639",
    "end": "842000"
  },
  {
    "text": "uh browse service and uh other services and the fuzer was very very",
    "start": "842000",
    "end": "848240"
  },
  {
    "text": "efficient because it was kind of a passive way for us to keep something running on the background while we're",
    "start": "848240",
    "end": "854880"
  },
  {
    "text": "doing uh other types of research like manual research another thing that uh we we did",
    "start": "854880",
    "end": "862480"
  },
  {
    "text": "very earlier in in our research was to also uh create harnesses and to run some",
    "start": "862480",
    "end": "869240"
  },
  {
    "text": "coverage based FS for example we uh found uh NCC opcua protocol stack so a",
    "start": "869240",
    "end": "877399"
  },
  {
    "text": "code base of opcua uh written in C and we created two harnesses for uh this",
    "start": "877399",
    "end": "885079"
  },
  {
    "text": "project one for AFL one for Li fer and we also ran a lot of these fers in the",
    "start": "885079",
    "end": "891959"
  },
  {
    "text": "background kind of uh in a passive mode Now to control all of these fers both",
    "start": "891959",
    "end": "897680"
  },
  {
    "text": "the coverage based and the network ones we created um a slackbot to monitor all",
    "start": "897680",
    "end": "904040"
  },
  {
    "text": "these process for us so whenever we had a crash uh we got a notification for this so whenever there was something",
    "start": "904040",
    "end": "910560"
  },
  {
    "text": "interesting on the machine uh and we had ways to monitor this we got a",
    "start": "910560",
    "end": "915680"
  },
  {
    "text": "notification including the screenshot from the relevant fer this way we could control uh easily control dozens of",
    "start": "915680",
    "end": "923519"
  },
  {
    "text": "different FS from Network ones to coverage ones we had all the fs running in the background and now we wanted to",
    "start": "923519",
    "end": "929800"
  },
  {
    "text": "move on to do some manual work so we started to look for uh isoteric features",
    "start": "929800",
    "end": "937000"
  },
  {
    "text": "and complex features in the opcua uh specifications and we mainly tried to",
    "start": "937000",
    "end": "943959"
  },
  {
    "text": "understand what developers will Overlook um so let me give you uh a for example",
    "start": "943959",
    "end": "950839"
  },
  {
    "text": "um if we're talking about opcua it has a very uh strict header header message so",
    "start": "950839",
    "end": "959079"
  },
  {
    "text": "in the header there is a flag saying is final now opcua supports Chun King of",
    "start": "959079",
    "end": "966759"
  },
  {
    "text": "messages let's say we want to send a very very long message uh we can divide",
    "start": "966759",
    "end": "972240"
  },
  {
    "text": "it into different chunks and send uh a chunk in each packet now to make sure",
    "start": "972240",
    "end": "978199"
  },
  {
    "text": "the server is aware that we're sending a very big message in chunks we need to",
    "start": "978199",
    "end": "983240"
  },
  {
    "text": "notify when is the last chunk and we have this flag saying that if it's the",
    "start": "983240",
    "end": "988680"
  },
  {
    "text": "last Chunk we will send we'll uh we will say this is the final using uh the F uh",
    "start": "988680",
    "end": "996360"
  },
  {
    "text": "letter so we were thinking this is a very nice feature but maybe it can be",
    "start": "996360",
    "end": "1002040"
  },
  {
    "text": "abused in some way so what happens if we're just keep on sending chunks",
    "start": "1002040",
    "end": "1007519"
  },
  {
    "text": "without ever sending the final chunk what would help it so we had these types",
    "start": "1007519",
    "end": "1013240"
  },
  {
    "text": "of questions in our mind while reading the specification we wrote everything on the side and we",
    "start": "1013240",
    "end": "1019040"
  },
  {
    "text": "continue so let's give a couple of examples to vulnerabilities that came up",
    "start": "1019040",
    "end": "1024199"
  },
  {
    "text": "through our research uh and we'll start with theal of service obviously uh denal of service",
    "start": "1024199",
    "end": "1030319"
  },
  {
    "text": "is uh very interesting when we're talking about physical processes because",
    "start": "1030319",
    "end": "1035640"
  },
  {
    "text": "having a denal of service in a live um a live process could mean some disruption",
    "start": "1035640",
    "end": "1042280"
  },
  {
    "text": "and maybe catastrophic results so obviously shutting down opcua server means there is no analytics no",
    "start": "1042280",
    "end": "1049720"
  },
  {
    "text": "monitoring of the process and maybe uh something bad will happen so this was a very valid case and was interesting for",
    "start": "1049720",
    "end": "1056480"
  },
  {
    "text": "us to research and to do this we made a very long list of all the possible ways",
    "start": "1056480",
    "end": "1062240"
  },
  {
    "text": "that we can achieve the N of service for example what happens if uh the server will crush due to uncontrolled memory",
    "start": "1062240",
    "end": "1068679"
  },
  {
    "text": "management what happens if there will be uh a threats deadlock and it was important for us to made this list",
    "start": "1068679",
    "end": "1075880"
  },
  {
    "text": "because these were the things we uh tried to focus on when we did code",
    "start": "1075880",
    "end": "1081840"
  },
  {
    "text": "review and when we did uh reverse engineering work we tried to focus on",
    "start": "1081840",
    "end": "1087080"
  },
  {
    "text": "these types of scenarios when we're talking about the NL of service now we",
    "start": "1087080",
    "end": "1092159"
  },
  {
    "text": "came up for each category we came up by reading the specification and doing reverse engineer work we came up with a",
    "start": "1092159",
    "end": "1099120"
  },
  {
    "text": "very long list for each category of potential attacks that could influence",
    "start": "1099120",
    "end": "1105000"
  },
  {
    "text": "not just one opcua protocol stock but many of them so for example I discussed",
    "start": "1105000",
    "end": "1112159"
  },
  {
    "text": "the final CH final flag uh we developed an attack called chunk flooding and it",
    "start": "1112159",
    "end": "1119280"
  },
  {
    "text": "goes like this we have the opcua message header and we have the chunk type um and",
    "start": "1119280",
    "end": "1127679"
  },
  {
    "text": "the chunk type is one of the flags within the OPC message header um and",
    "start": "1127679",
    "end": "1134919"
  },
  {
    "text": "usually if it's a chunk it will be C and if it's the final chunk or for a single chunk it will be f for final and if we",
    "start": "1134919",
    "end": "1142080"
  },
  {
    "text": "look at the code for example a very popular protocol stock op ca.net uh we",
    "start": "1142080",
    "end": "1148320"
  },
  {
    "text": "can see that the server is looking for uh this bite to BF to finalize the",
    "start": "1148320",
    "end": "1154559"
  },
  {
    "text": "message so if it's not f it means that we're in the middle of sending a very long message and it needs to keep on",
    "start": "1154559",
    "end": "1161799"
  },
  {
    "text": "receiving messages so by reading a specification we understood maybe we can",
    "start": "1161799",
    "end": "1166919"
  },
  {
    "text": "abuse this by sending in a lot of different chunks and without ever",
    "start": "1166919",
    "end": "1172960"
  },
  {
    "text": "sending the final message what happens to the server by filling it with more and more chunks obviously it will read",
    "start": "1172960",
    "end": "1181159"
  },
  {
    "text": "uh it will allocate more memory and it will read more chunks but there was",
    "start": "1181159",
    "end": "1186360"
  },
  {
    "text": "there were no limitation for this because again developers probably overlooked it and so finally the server",
    "start": "1186360",
    "end": "1192840"
  },
  {
    "text": "crushed um and again this was not a oneoff it was a common vulnerability",
    "start": "1192840",
    "end": "1198400"
  },
  {
    "text": "across different protocol stocks and by abusing these protocol stocks we also",
    "start": "1198400",
    "end": "1204520"
  },
  {
    "text": "were're able to exploit and Crush many products that relied on these based",
    "start": "1204520",
    "end": "1209640"
  },
  {
    "text": "protocol Stacks um another interesting uh denal of service concept is Method calling",
    "start": "1209640",
    "end": "1216720"
  },
  {
    "text": "from a dead session and this is part of a use after free category and it goes",
    "start": "1216720",
    "end": "1221840"
  },
  {
    "text": "like this in opcua we have a way to configure methods within the ser so we",
    "start": "1221840",
    "end": "1229000"
  },
  {
    "text": "can we can program a specific method that we can remotely call it from a",
    "start": "1229000",
    "end": "1235559"
  },
  {
    "text": "client now this method can receive arguments uh as nodes and we can",
    "start": "1235559",
    "end": "1241039"
  },
  {
    "text": "activate it remotely invoke it uh and we when we read the",
    "start": "1241039",
    "end": "1246480"
  },
  {
    "text": "description for methods in opcua we noticed something interesting so we",
    "start": "1246480",
    "end": "1252159"
  },
  {
    "text": "noticed that if method is invoked from the context of a session and the session is terminated for some reason the result",
    "start": "1252159",
    "end": "1259400"
  },
  {
    "text": "of the method execution cannot be returned to the client because the session is gone so obviously we ask",
    "start": "1259400",
    "end": "1266120"
  },
  {
    "text": "ourselves uh did all the developers really implement this correctly what happens if we will send a very very long",
    "start": "1266120",
    "end": "1274880"
  },
  {
    "text": "array in opcua containing method calling so basically asking the server to",
    "start": "1274880",
    "end": "1280960"
  },
  {
    "text": "execute 255 uh very complex methods and then",
    "start": "1280960",
    "end": "1286159"
  },
  {
    "text": "immediately terminate the session what will happen next and this is exactly what we tried using our client it was",
    "start": "1286159",
    "end": "1292880"
  },
  {
    "text": "very easy to configure this type of scenario so what we did is we sent a very long message with array of methods",
    "start": "1292880",
    "end": "1300720"
  },
  {
    "text": "and we sent it to the server started waited for the server to start uh",
    "start": "1300720",
    "end": "1306159"
  },
  {
    "text": "processing each method and when it reached to the middle of the methods we immediately um disconnected the client",
    "start": "1306159",
    "end": "1313919"
  },
  {
    "text": "so terminated the session now obviously when the server finished to analyze all",
    "start": "1313919",
    "end": "1319480"
  },
  {
    "text": "process all the methods uh it should have checked if there is active session",
    "start": "1319480",
    "end": "1325520"
  },
  {
    "text": "and if so return an answer and if not just dis disgard the the result but",
    "start": "1325520",
    "end": "1331039"
  },
  {
    "text": "instead uh the server tried to Der reference a session which was not exist",
    "start": "1331039",
    "end": "1336520"
  },
  {
    "text": "and we got an N the reference so again this is another type of concept we",
    "start": "1336520",
    "end": "1342039"
  },
  {
    "text": "developed based on reading the esoteric features of the opcua specification okay theal of service is",
    "start": "1342039",
    "end": "1350440"
  },
  {
    "text": "interesting but not cool so let's move on to remote code execution scenarios obviously remote code",
    "start": "1350440",
    "end": "1357799"
  },
  {
    "text": "execution is interesting because we are not crushing the server rather executing",
    "start": "1357799",
    "end": "1362840"
  },
  {
    "text": "code on it and if we have a code execution and opca server we can modify",
    "start": "1362840",
    "end": "1368000"
  },
  {
    "text": "the results fake the results delete the results or even cross the server so",
    "start": "1368000",
    "end": "1373320"
  },
  {
    "text": "remote code execution uh is obviously very interesting and it was one of the uh vectors we",
    "start": "1373320",
    "end": "1379520"
  },
  {
    "text": "researched now we decided to research uh one of the servers was op PTC kepware",
    "start": "1379520",
    "end": "1385240"
  },
  {
    "text": "it's a very popular um opcua server um one of the actually industry-leading",
    "start": "1385240",
    "end": "1392000"
  },
  {
    "text": "opcua server used in the biggest manufacturing lines oil rigs wind farms Etc uh it's a windows-based server um",
    "start": "1392000",
    "end": "1400000"
  },
  {
    "text": "and they have their own custom opcua protocol stock the opcua logic is found",
    "start": "1400000",
    "end": "1405880"
  },
  {
    "text": "in the server runtime service and this is most of it is what we",
    "start": "1405880",
    "end": "1413159"
  },
  {
    "text": "researched now I told you about our opcua Ser fer and we as I said run it",
    "start": "1413159",
    "end": "1420120"
  },
  {
    "text": "for quite some time and one day we got a notification from our bot that we got a",
    "start": "1420120",
    "end": "1425960"
  },
  {
    "text": "crush uh immediately we're uh very spec spectical because",
    "start": "1425960",
    "end": "1431320"
  },
  {
    "text": "um sometimes we're getting false positives uh but we decided to research this anyway and by the way this is the",
    "start": "1431320",
    "end": "1437480"
  },
  {
    "text": "the real image of uh uh the the crush that we got from our bot um and we",
    "start": "1437480",
    "end": "1443440"
  },
  {
    "text": "started to analyze it and we saw there is something related to uh string um",
    "start": "1443440",
    "end": "1449320"
  },
  {
    "text": "string processing so we started to analyze the crush and we saw something",
    "start": "1449320",
    "end": "1454440"
  },
  {
    "text": "is off with the way that kepware the opca server is processing strings now",
    "start": "1454440",
    "end": "1461159"
  },
  {
    "text": "strings in opcua is very interesting because uh it it's part of the opcua uh",
    "start": "1461159",
    "end": "1468039"
  },
  {
    "text": "specification so they really specify how strings should be encoded and transferred over the line in opcua",
    "start": "1468039",
    "end": "1475440"
  },
  {
    "text": "strings are encoded using UT utf8 uh and we have strings almost",
    "start": "1475440",
    "end": "1481320"
  },
  {
    "text": "everywhere so for example if we have our tank water tank you can you can see",
    "start": "1481320",
    "end": "1486480"
  },
  {
    "text": "string you you'll see strings in this example for example the name of the water tank the location of the water",
    "start": "1486480",
    "end": "1492559"
  },
  {
    "text": "tank and we can see it both in the opca server and using War shark for example",
    "start": "1492559",
    "end": "1497960"
  },
  {
    "text": "you can see here uh we have the location of the tan or the name of the tan now",
    "start": "1497960",
    "end": "1503760"
  },
  {
    "text": "the interesting part is that kepware was trying to convert the string from utf8",
    "start": "1503760",
    "end": "1509840"
  },
  {
    "text": "to utf16 and it failed utf8 is the way that strings are",
    "start": "1509840",
    "end": "1515120"
  },
  {
    "text": "encoded when we're transferring the data over the line but it tried to convert it",
    "start": "1515120",
    "end": "1520200"
  },
  {
    "text": "to utf16 because this is how kepware kept strings in memory so obviously we",
    "start": "1520200",
    "end": "1526720"
  },
  {
    "text": "started to research and explore these functions in the keper server and we",
    "start": "1526720",
    "end": "1532240"
  },
  {
    "text": "discovered something interesting there was a bug in the process of converting from utf8 to utf16 now to understand",
    "start": "1532240",
    "end": "1539919"
  },
  {
    "text": "this we need to understand real quick how utf8 uh encoding works so usually uh",
    "start": "1539919",
    "end": "1546799"
  },
  {
    "text": "we have uh a conversion of uh one to one if they ask asking if the bite is less",
    "start": "1546799",
    "end": "1555000"
  },
  {
    "text": "than 80xl but if we have a funny looking a here it won't be converted to one to",
    "start": "1555000",
    "end": "1562559"
  },
  {
    "text": "one but it will convert it to two bytes so we have a symbol the funny looking a",
    "start": "1562559",
    "end": "1568120"
  },
  {
    "text": "and it will be encoded as two bytes instead of one now when kepw is trying",
    "start": "1568120",
    "end": "1575000"
  },
  {
    "text": "to par a string from the opca server it will try to understand how many symbols",
    "start": "1575000",
    "end": "1581399"
  },
  {
    "text": "do we have in the packet and it will try to convert it to utf16 so let's give a",
    "start": "1581399",
    "end": "1587440"
  },
  {
    "text": "quick quick example let's say we have this string and we're sending this over",
    "start": "1587440",
    "end": "1592520"
  },
  {
    "text": "the line we have a a and finally uh funny looking a uh now when ker will try",
    "start": "1592520",
    "end": "1598840"
  },
  {
    "text": "to understand how many symbols we have here it will see that we have uh one",
    "start": "1598840",
    "end": "1604039"
  },
  {
    "text": "symbol one symbol one symbol and then one symbol that has two bytes so when it",
    "start": "1604039",
    "end": "1609880"
  },
  {
    "text": "will try to calculate how much memory it needs to allocate it will calculate it uh as uh four symbols but but the fourth",
    "start": "1609880",
    "end": "1618720"
  },
  {
    "text": "symbol has two bytes long in utf8 so it will reach to the N Terminator and stop",
    "start": "1618720",
    "end": "1626440"
  },
  {
    "text": "over there and eventually it will try to convert from these byes to",
    "start": "1626440",
    "end": "1633679"
  },
  {
    "text": "utf16 so what happens if we're sending",
    "start": "1633679",
    "end": "1639120"
  },
  {
    "text": "something that is not correct utf8 what we're sending a malformed utf8 so let's",
    "start": "1639120",
    "end": "1645399"
  },
  {
    "text": "give another example uh 41 one is one symbol capital a uh but it's also one",
    "start": "1645399",
    "end": "1652520"
  },
  {
    "text": "bite uh and we have it again so one symbol one bite and one symbol one bite",
    "start": "1652520",
    "end": "1658360"
  },
  {
    "text": "and now we have C3 so in kepware there was kind of a bug that when it reaches",
    "start": "1658360",
    "end": "1664000"
  },
  {
    "text": "some areas it will automatically try to deduce how much memory it needs to allocate and if it reached for example",
    "start": "1664000",
    "end": "1671000"
  },
  {
    "text": "C3 it automatically assumed there are two bytes so what happened is it reached",
    "start": "1671000",
    "end": "1678039"
  },
  {
    "text": "what it thought was a single symbol with two bites so it skipped the next bite",
    "start": "1678039",
    "end": "1684720"
  },
  {
    "text": "which in this case was a Nile Terminator and started to jump in the hip so",
    "start": "1684720",
    "end": "1689760"
  },
  {
    "text": "basically we were able to skip the null Terminator that stopped the string and",
    "start": "1689760",
    "end": "1695159"
  },
  {
    "text": "we started to and it started to count more symbols over the hip until it",
    "start": "1695159",
    "end": "1700200"
  },
  {
    "text": "reached another null Terminator um and this is how we were",
    "start": "1700200",
    "end": "1705440"
  },
  {
    "text": "able basically to leak the Heap because we skipped the null bite so the the the",
    "start": "1705440",
    "end": "1711559"
  },
  {
    "text": "string was not terminated uh where it should have been now we were able to",
    "start": "1711559",
    "end": "1717039"
  },
  {
    "text": "leak data using this primitive um and it's very cool that our father found it",
    "start": "1717039",
    "end": "1723399"
  },
  {
    "text": "uh and it actually the father found other bugs um but we were able to leak",
    "start": "1723399",
    "end": "1729000"
  },
  {
    "text": "data using this uh by reading different tags so as I said in in opcua servers we",
    "start": "1729000",
    "end": "1736480"
  },
  {
    "text": "can read variabl so we just tried to read variables with",
    "start": "1736480",
    "end": "1742080"
  },
  {
    "text": "C3 at the end and we were able to leak more data than the server should have",
    "start": "1742080",
    "end": "1747240"
  },
  {
    "text": "given us now we were also able to convert this uh not only uh by abusing",
    "start": "1747240",
    "end": "1753440"
  },
  {
    "text": "the read tag functionality but also uh by abusing the right tag so we tried to",
    "start": "1753440",
    "end": "1760440"
  },
  {
    "text": "write variables with C3 at the end of their name and we we were able to",
    "start": "1760440",
    "end": "1766159"
  },
  {
    "text": "overwrite data in the Heap so we now had the two Primitives to work with rid uh",
    "start": "1766159",
    "end": "1772880"
  },
  {
    "text": "outof bound read and outof bound right and we used the Reid for leaking",
    "start": "1772880",
    "end": "1777960"
  },
  {
    "text": "pointers to defeat the aslr and we used the outof bound right to construct our",
    "start": "1777960",
    "end": "1783960"
  },
  {
    "text": "rope chain and finally get an RC so finally we this is exactly the exploit",
    "start": "1783960",
    "end": "1790279"
  },
  {
    "text": "that we ran in pwn to own uh 2022 and uh",
    "start": "1790279",
    "end": "1795519"
  },
  {
    "text": "how how it worked is first we leaked data from the hip and then calculated",
    "start": "1795519",
    "end": "1803120"
  },
  {
    "text": "from the pointers that we leaked the base addresses for all the libraries that we needed uh for our rope chain",
    "start": "1803120",
    "end": "1809880"
  },
  {
    "text": "constructed our rope chain uh and finally triggered the remote code",
    "start": "1809880",
    "end": "1816240"
  },
  {
    "text": "execution thank you uh so using using this bug we're",
    "start": "1816240",
    "end": "1823679"
  },
  {
    "text": "able to um to get remote code execution um in Pon and it got us to",
    "start": "1823679",
    "end": "1832399"
  },
  {
    "text": "20K uh no thank you okay so Chiron just",
    "start": "1832399",
    "end": "1837559"
  },
  {
    "text": "showcased to you some RC vulnerabilities we identified in opcua servers however",
    "start": "1837559",
    "end": "1843440"
  },
  {
    "text": "next thing we aim to do is actually exploit a different kind of machine in",
    "start": "1843440",
    "end": "1848720"
  },
  {
    "text": "the OPC World H it being actually exploiting the opcua clients so let's",
    "start": "1848720",
    "end": "1855399"
  },
  {
    "text": "talk about the scenario right here if let's take for example the water level H",
    "start": "1855399",
    "end": "1861440"
  },
  {
    "text": "example we've showcased all slide long we have an opcua client connecting to a",
    "start": "1861440",
    "end": "1867399"
  },
  {
    "text": "malicious opcua server and trying to read a tag from it we thought to",
    "start": "1867399",
    "end": "1873200"
  },
  {
    "text": "ourselves what would happen if somehow we would return a malicious tag and",
    "start": "1873200",
    "end": "1879440"
  },
  {
    "text": "exploit some kind of vulnerability in the opcua server well that is exactly the kind of",
    "start": "1879440",
    "end": "1885200"
  },
  {
    "text": "vulnerability we exploited in the p to on competition last year H in 2023 where",
    "start": "1885200",
    "end": "1890880"
  },
  {
    "text": "we exploited two different web-based opca clients it being inductive automation ignition and softing data",
    "start": "1890880",
    "end": "1897840"
  },
  {
    "text": "feed Edge aggregator now one thing these two clients had in common is that they",
    "start": "1897840",
    "end": "1902880"
  },
  {
    "text": "were both web- based meaning the clients the users actually authenticated to the",
    "start": "1902880",
    "end": "1908240"
  },
  {
    "text": "web server H and actually acted as an opca client over web browser so because",
    "start": "1908240",
    "end": "1915440"
  },
  {
    "text": "we were in the realm of web browser ERS we thought to ourselves what is the obvious kind of",
    "start": "1915440",
    "end": "1920760"
  },
  {
    "text": "vulnerability type we can exploit it being an access vulnerability in the",
    "start": "1920760",
    "end": "1927159"
  },
  {
    "text": "read write or subscribe method and services so for example if the client",
    "start": "1927159",
    "end": "1932919"
  },
  {
    "text": "would connect to our Rogue opca server and try to read or write a tag we would",
    "start": "1932919",
    "end": "1939480"
  },
  {
    "text": "attack it somehow using an xss payload so this is exactly how it looks we have",
    "start": "1939480",
    "end": "1945320"
  },
  {
    "text": "the client connecting to our server and requesting to read a tag now when it",
    "start": "1945320",
    "end": "1951200"
  },
  {
    "text": "tries to read a tag we simply say yeah sure here is your tag however instead of returning a float or a basic string we",
    "start": "1951200",
    "end": "1958240"
  },
  {
    "text": "will return an xss uh script which then the client will take our xss script and",
    "start": "1958240",
    "end": "1966200"
  },
  {
    "text": "simply insert it it into its Dome into its Dom in the browser and which will",
    "start": "1966200",
    "end": "1971679"
  },
  {
    "text": "trigger an xss vulnerability and allow us to basically execute arbitrary JavaScript script code on the opcua",
    "start": "1971679",
    "end": "1979679"
  },
  {
    "text": "client browsers now this is exactly the kind of vulnerability we actually manage to",
    "start": "1979679",
    "end": "1985720"
  },
  {
    "text": "exploit in both softing as you can see here and in inductive automation ignition where we're able to execute",
    "start": "1985720",
    "end": "1992880"
  },
  {
    "text": "arbitary code in the browser of the user however that's pretty cool we can now",
    "start": "1992880",
    "end": "1998559"
  },
  {
    "text": "maybe recall the user or showcase some kind of weird uh interface in the Dom",
    "start": "1998559",
    "end": "2004320"
  },
  {
    "text": "however our goal was not only to manage to change the Dom somehow but instead we",
    "start": "2004320",
    "end": "2010320"
  },
  {
    "text": "wanted to leverage this excess vulnerability into achieving a remote Cod execution on the client H by",
    "start": "2010320",
    "end": "2019120"
  },
  {
    "text": "chaining different vulnerabilities along with the exess vulnerability and",
    "start": "2019120",
    "end": "2024279"
  },
  {
    "text": "actually managing to exploit the OPC UA client now because we were talking about",
    "start": "2024279",
    "end": "2031159"
  },
  {
    "text": "specific vulnerabilities the two vulnerabilities we exploited in both in ignition and soft were different so",
    "start": "2031159",
    "end": "2038120"
  },
  {
    "text": "let's go over them real quick so first thing first we are able to exploit and",
    "start": "2038120",
    "end": "2044360"
  },
  {
    "text": "execute arbitrary JavaScript code and because we are running in the browser of authenticated user we are now",
    "start": "2044360",
    "end": "2050398"
  },
  {
    "text": "authenticated as well meaning we are able to invoke arbitrary functionality on the server itself and now because we",
    "start": "2050399",
    "end": "2058118"
  },
  {
    "text": "are authenticated we are able to perform different kind of actions and the in in the case of an ignition server the",
    "start": "2058119",
    "end": "2064960"
  },
  {
    "text": "obvious thing was of course uploading a new project now when you upload a",
    "start": "2064960",
    "end": "2070280"
  },
  {
    "text": "project to inductive automation ignition you are able to actually specify",
    "start": "2070280",
    "end": "2075358"
  },
  {
    "text": "something called a Gateway event now Gateway events are actually scripts as",
    "start": "2075359",
    "end": "2080720"
  },
  {
    "text": "you can see here it is a script written in Python and whenever a specific event occurs our script will be executed as a",
    "start": "2080720",
    "end": "2087760"
  },
  {
    "text": "callback allowing us to basically execute Python scripts now we chose to",
    "start": "2087760",
    "end": "2092800"
  },
  {
    "text": "implement on schedule event meaning it will occur every every res set the number of seconds meaning we're able to",
    "start": "2092800",
    "end": "2099880"
  },
  {
    "text": "Simply execute arbitrary python code and actually manage to exploit and Achieve",
    "start": "2099880",
    "end": "2105880"
  },
  {
    "text": "remote code execution on the induct inductive automation ignition",
    "start": "2105880",
    "end": "2111200"
  },
  {
    "text": "Gateway now in the case of softing uh sorry now we actually change multiple",
    "start": "2111200",
    "end": "2117040"
  },
  {
    "text": "different vulnerabilities in this case h in order to achieve this remote code execution uh ging us the ability to",
    "start": "2117040",
    "end": "2123280"
  },
  {
    "text": "basically attack any different kind of inductive automation ignitions servers now in the case of softing our",
    "start": "2123280",
    "end": "2130400"
  },
  {
    "text": "exploitation technique was a little bit different H there was no some kind of a project but instead we had the ability",
    "start": "2130400",
    "end": "2136920"
  },
  {
    "text": "to perform a backup and restore procedure now what's a backup restore",
    "start": "2136920",
    "end": "2142480"
  },
  {
    "text": "procedure you might ask it is basally the basically the ability to restore the configuration of the server to an old",
    "start": "2142480",
    "end": "2149319"
  },
  {
    "text": "state of the configuration and whenever we would do that we would actually upload a zip file for the restore",
    "start": "2149319",
    "end": "2156119"
  },
  {
    "text": "operation and our ZIP will be opened and the all of the different configuration will be",
    "start": "2156119",
    "end": "2162240"
  },
  {
    "text": "restored now since it was a zip file we thought to ourself maybe there is a zip",
    "start": "2162240",
    "end": "2167560"
  },
  {
    "text": "slep vulnerability allowing us to actually escape the intended directory and basically achieve a arbitrary right",
    "start": "2167560",
    "end": "2175599"
  },
  {
    "text": "primitive on the softing server and that is exactly what we did so we simply",
    "start": "2175599",
    "end": "2181160"
  },
  {
    "text": "wrote a malicious so that will be ex that will execute code whenever it is",
    "start": "2181160",
    "end": "2186280"
  },
  {
    "text": "loaded and performed the backup operation restore procedure and whenever we did",
    "start": "2186280",
    "end": "2191800"
  },
  {
    "text": "this we gained the ability to execute code on the softing server giving us another rce",
    "start": "2191800",
    "end": "2199160"
  },
  {
    "text": "vulnerability okay so the whole opca procedure and research we've conducted",
    "start": "2199160",
    "end": "2206079"
  },
  {
    "text": "was pretty extensive so we thought to ourselves Yeah we actually managed to",
    "start": "2206079",
    "end": "2211400"
  },
  {
    "text": "identify and release over 50 different vulnerabilities and actually identify",
    "start": "2211400",
    "end": "2216960"
  },
  {
    "text": "attack concept meaning one concept one kind of attack and vulnerability that could affect even dozens of different",
    "start": "2216960",
    "end": "2223640"
  },
  {
    "text": "opcua products so we took this entire knowledge and this entire uh client and",
    "start": "2223640",
    "end": "2229400"
  },
  {
    "text": "codebase and poc's and actually aggregated it into our own opcua",
    "start": "2229400",
    "end": "2235040"
  },
  {
    "text": "exploitation framework this framework actually contains most of our different work over the years including the PC Cod",
    "start": "2235040",
    "end": "2243280"
  },
  {
    "text": "and of all of the exploits for the different opcua gateways servers and clients so feel free to scan the receipt",
    "start": "2243280",
    "end": "2249800"
  },
  {
    "text": "to scan the QR code cool H so this framework will be accessible from our",
    "start": "2249800",
    "end": "2255200"
  },
  {
    "text": "GitHub page uh feel free to use it on your environments for of course only",
    "start": "2255200",
    "end": "2260920"
  },
  {
    "text": "ethical reasons H to test it against your opcua product if you're an opcua vendor Etc and in this framework we",
    "start": "2260920",
    "end": "2268920"
  },
  {
    "text": "actually have the POC code and documentation for all the different opcua exploits we developed over the",
    "start": "2268920",
    "end": "2275920"
  },
  {
    "text": "years in including the ones we talked about today including the chunk flooding of course different vulnerabilities of",
    "start": "2275920",
    "end": "2282200"
  },
  {
    "text": "different opca products and our kepware exploit Etc it is a very very extensive",
    "start": "2282200",
    "end": "2290520"
  },
  {
    "text": "exploitation framework and we believe it can be used for good we actually opened",
    "start": "2290520",
    "end": "2295920"
  },
  {
    "text": "a select Coalition with different opcua vendors in the last few months giving",
    "start": "2295920",
    "end": "2301319"
  },
  {
    "text": "them early access to test their products again the different vulnerabilities we are going to Showcase in our expostion",
    "start": "2301319",
    "end": "2307160"
  },
  {
    "text": "products and and a lot of different vendors basically got to validate and test their product against the different",
    "start": "2307160",
    "end": "2313599"
  },
  {
    "text": "exploits and techniques we developed in the last few years H and of course it is very",
    "start": "2313599",
    "end": "2319920"
  },
  {
    "text": "extensive and contains all of the different exploits so let's summarize everything up and talk about all of the",
    "start": "2319920",
    "end": "2327200"
  },
  {
    "text": "research we've gotu on the last three years we actually participated in three different pwn toon competitions H using",
    "start": "2327200",
    "end": "2333079"
  },
  {
    "text": "both our clients and our Exposition framework H and actually during this year we won the master of phone award",
    "start": "2333079",
    "end": "2340079"
  },
  {
    "text": "actually exploiting most of the opcua clients and servers we found dozens and",
    "start": "2340079",
    "end": "2345720"
  },
  {
    "text": "dozens of different CVS in many different kinds of products involving opcua including gateways servers clients",
    "start": "2345720",
    "end": "2353079"
  },
  {
    "text": "Etc and we actually managed to develop what what we call techniques meaning one exploit that works against multiple",
    "start": "2353079",
    "end": "2359560"
  },
  {
    "text": "targets with minimal uh changes H we believe our opcua explosion framework",
    "start": "2359560",
    "end": "2366079"
  },
  {
    "text": "can be used for good and should be used to test your environments and your different opcua products H so feel free",
    "start": "2366079",
    "end": "2372480"
  },
  {
    "text": "to download it clone it and of course contribute to it because it is open source feel free to add support for your",
    "start": "2372480",
    "end": "2379440"
  },
  {
    "text": "different products so thank you everyone uh for attending our talk and if anyone",
    "start": "2379440",
    "end": "2384680"
  },
  {
    "text": "has any questions feel free to come up H to the mic and feel free to ask anything",
    "start": "2384680",
    "end": "2390440"
  },
  {
    "text": "thank you very much",
    "start": "2390440",
    "end": "2398400"
  }
]