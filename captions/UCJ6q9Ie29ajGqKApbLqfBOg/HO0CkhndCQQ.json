[
  {
    "start": "0",
    "end": "29000"
  },
  {
    "text": "all right welcome and thanks for attending this is Java everyday's exploiting software running on 3 billion",
    "start": "80",
    "end": "5160"
  },
  {
    "text": "devices uh yep thank you jasel uh jel and I are honored to be speaking uh",
    "start": "5160",
    "end": "11080"
  },
  {
    "text": "kicking off the track at this year's black hat uh we hope you enjoy this uh tour of a Java's attack surface and walk",
    "start": "11080",
    "end": "17240"
  },
  {
    "text": "away with a greater understanding and appreciation for the vulnerabilities that exist in the framework and",
    "start": "17240",
    "end": "22320"
  },
  {
    "text": "hopefully you can use this information to find your next zero",
    "start": "22320",
    "end": "26720"
  },
  {
    "text": "day all right so the first thing we're going to do is we're going to start with the solution and this solution was",
    "start": "27640",
    "end": "33280"
  },
  {
    "start": "29000",
    "end": "29000"
  },
  {
    "text": "provided to us by us C unless it's Absol unless it is absolutely necessary to run Java in a web browser disable it as",
    "start": "33280",
    "end": "40120"
  },
  {
    "text": "described below even after updating to the latest version of the software this will help mitigate other Java",
    "start": "40120",
    "end": "46280"
  },
  {
    "text": "vulnerabilities that may be discovered in the future you know it's a bad year for a piece of software when the US",
    "start": "46280",
    "end": "52359"
  },
  {
    "text": "government is saying don't use it even when it's the latest version of the software um so they were having a rough",
    "start": "52359",
    "end": "58760"
  },
  {
    "text": "year earlier this year um but we know that nobody in this room actually pays attention or is going to",
    "start": "58760",
    "end": "64158"
  },
  {
    "text": "follow what the US government has to say so we are forced to do this presentation so we hope you enjoy",
    "start": "64159",
    "end": "69680"
  },
  {
    "text": "it uh starting with the agenda we're going to take a tour of Java's attack surface",
    "start": "69680",
    "end": "75240"
  },
  {
    "text": "and describe the types of vulnerabilities that exist in the framework uh we're going to look at a set of five case studies for the top",
    "start": "75240",
    "end": "81200"
  },
  {
    "text": "vulnerability types and uh and provide you with a set of proof of Concepts that have never P most of which have never",
    "start": "81200",
    "end": "87720"
  },
  {
    "text": "been publicly shown before they've all been patched but uh they've never been publicly released uh we're going to talk",
    "start": "87720",
    "end": "94799"
  },
  {
    "text": "about what type of vulnerabilities are actually being leveraged in the landscape and then we're going to take an independent look at how Oracle is",
    "start": "94799",
    "end": "101439"
  },
  {
    "text": "handling the security uh issues that existed in the Java framework but first with a quick",
    "start": "101439",
    "end": "108399"
  },
  {
    "start": "106000",
    "end": "106000"
  },
  {
    "text": "introduction for jel and myself uh if you don't know who I am my name is Brian goren I work for H Packard and I work",
    "start": "108399",
    "end": "114759"
  },
  {
    "text": "I'm the manager of vulnerability research in HP security research organization my primary respons",
    "start": "114759",
    "end": "119880"
  },
  {
    "text": "responsibility is running uh the zero day initiative which is the the world's largest vendor agnostic bug Bounty",
    "start": "119880",
    "end": "126159"
  },
  {
    "text": "program I'm also responsible for organizing the Ponda own competitions uh that happen now twice a year I also do",
    "start": "126159",
    "end": "133280"
  },
  {
    "text": "root cause analysis on the zdi submissions uh from the our researcher base that come in every day and verify",
    "start": "133280",
    "end": "138640"
  },
  {
    "text": "exploitability in my free time I'm a family man I have two kids and a lovely wife and when I'm not spending time with",
    "start": "138640",
    "end": "144640"
  },
  {
    "text": "them I'm looking for code or looking for vulnerabilities and code in um closer close Source software um you can find me",
    "start": "144640",
    "end": "152400"
  },
  {
    "text": "on Twitter I'm malicious input on Twitter and I also run the zdi handle hey I'm jel Spelman I'm also part",
    "start": "152400",
    "end": "159879"
  },
  {
    "text": "of the zero day initiative team and I actually report to Brian I'm one of the guys that analyzes cases submitted to",
    "start": "159879",
    "end": "165680"
  },
  {
    "text": "our program uh as a result I spent a lot of time in Ida and as a result of that I",
    "start": "165680",
    "end": "171120"
  },
  {
    "text": "often curse at Ida I've actually submitted a bunch of bug reports just three uh I think two weeks ago and I",
    "start": "171120",
    "end": "176959"
  },
  {
    "text": "have another bug to submit um you can reach me on Twitter or IRC as wandering",
    "start": "176959",
    "end": "182040"
  },
  {
    "text": "glitch and I'm also behind the the zdi Twitter",
    "start": "182040",
    "end": "186440"
  },
  {
    "text": "account so why did we want to take a look at Java well we wanted to get a more granular insight into the attack",
    "start": "187400",
    "end": "193480"
  },
  {
    "text": "surface due to a surge in submissions uh at the zero day initiative in late 2012 and early 2013 and the things that we",
    "start": "193480",
    "end": "200879"
  },
  {
    "text": "really wanted to understand was what the most common vulnerability types in the framework we wanted to also understand",
    "start": "200879",
    "end": "206879"
  },
  {
    "text": "which part of the architecture produced the most vulnerabilities uh CU this would be a good Target for auditing uh",
    "start": "206879",
    "end": "214000"
  },
  {
    "text": "we also wanted to understand which part of the architecture produced the most severe vulnerabilities uh the and how",
    "start": "214000",
    "end": "221120"
  },
  {
    "text": "those were actually being leveraged in the landscape and again looking have an independent look at how Oracle is",
    "start": "221120",
    "end": "226480"
  },
  {
    "text": "handling these U the the industry had been in early 2012",
    "start": "226480",
    "end": "232439"
  },
  {
    "text": "focused on the sandbox bypass issue which we'll talk about later in the presentation and there was also multiple zero day vulnerabilities that were being",
    "start": "232439",
    "end": "239760"
  },
  {
    "text": "demonstrated at Ponda own and then used against major software vendors like Facebook and apple it kind of pequ our",
    "start": "239760",
    "end": "245439"
  },
  {
    "text": "interest to make do a further analysis so let's talk about the sample set that we used uh we scoped our sample",
    "start": "245439",
    "end": "253319"
  },
  {
    "start": "248000",
    "end": "248000"
  },
  {
    "text": "set to the modern day what we considered modern day vulnerabilities in Java and we scoped it to 2011 through",
    "start": "253319",
    "end": "259840"
  },
  {
    "text": "2013 and our sample set was over 120 unique Java bugs and this is probably",
    "start": "259840",
    "end": "266360"
  },
  {
    "text": "the the largest collection of java vulnerabilities in one place outside of Oracle or outside of the NSA or some",
    "start": "266360",
    "end": "272680"
  },
  {
    "text": "other nation state um so we had a large collection to look at we had the entire zero day initiative database we had",
    "start": "272680",
    "end": "279360"
  },
  {
    "text": "numerous vulnerability feeds to look at penetration testing tools exploit kits and we included in this analysis 6 day",
    "start": "279360",
    "end": "285880"
  },
  {
    "text": "vulnerabilities that have yet to be patched by Oracle uh which should hopefully be coming out in the next patch release to do the threat landscape",
    "start": "285880",
    "end": "293400"
  },
  {
    "text": "statistics that you'll see later in the slides we worked with reversing labs and got a sample of 52,000 unique malware",
    "start": "293400",
    "end": "300560"
  },
  {
    "text": "samples to analyze and look at and draw conclusions",
    "start": "300560",
    "end": "305600"
  },
  {
    "text": "from but if we take a look at Java's footprint it has a huge installation base and that's what makes it such an",
    "start": "305600",
    "end": "311600"
  },
  {
    "start": "306000",
    "end": "306000"
  },
  {
    "text": "interesting Target for attackers ACC you know and they boast of this installation based during their installation process",
    "start": "311600",
    "end": "318520"
  },
  {
    "text": "with they say three billion devices run Java it according to Oracle 1.1 billion",
    "start": "318520",
    "end": "323880"
  },
  {
    "text": "desktops from java and there's 1.4 billion Java cards produced every year I have no idea what a Java card is",
    "start": "323880",
    "end": "330240"
  },
  {
    "text": "but it runs Java and I'm sure it runs a subset and I don't know how it gets updated so there's a chance that some of",
    "start": "330240",
    "end": "336680"
  },
  {
    "text": "these bugs may be useful in that case um the other interesting thing is that most of the users of java are running",
    "start": "336680",
    "end": "343080"
  },
  {
    "text": "outdated software and there was a there was a report released earlier this year from Websense that said 93% of java",
    "start": "343080",
    "end": "349680"
  },
  {
    "text": "users are not running the latest patch a month after its release and sometimes up to a year the other interesting thing",
    "start": "349680",
    "end": "355880"
  },
  {
    "text": "about Java is that schools are using it as their base language for for teaching computer science to to students I know",
    "start": "355880",
    "end": "362440"
  },
  {
    "text": "that you know jel went to the University of Texas they taught Java there as their base language I went to Texas A&M",
    "start": "362440",
    "end": "367599"
  },
  {
    "text": "University and they also use that as their base language so every year there's hundreds of you know well",
    "start": "367599",
    "end": "372759"
  },
  {
    "text": "thousands of students coming out who that is their primary language and and so as a result there's been a widespread",
    "start": "372759",
    "end": "378360"
  },
  {
    "text": "adoption of java in the marketplace including in the financial sector and now into the mobile device",
    "start": "378360",
    "end": "386120"
  },
  {
    "text": "space if we look at the software architecture itself it's on the screen here there's over 50 subcomponents that",
    "start": "386120",
    "end": "392880"
  },
  {
    "text": "are responsible for specific tasks in the framework itself uh and you see this",
    "start": "392880",
    "end": "398360"
  },
  {
    "text": "if we look at um and that's where our initial uh research focused on was trying to understand the subcomponents",
    "start": "398360",
    "end": "404240"
  },
  {
    "text": "and what vulnerabilities affected each subcomponent and we'll talk about a couple of them real quick the deployment",
    "start": "404240",
    "end": "409919"
  },
  {
    "text": "subcomponent uh consists of the Java webstar capabilities and the Java appli capabilities and there's you'll see in a",
    "start": "409919",
    "end": "416199"
  },
  {
    "text": "couple seconds a large there's a large set of bugs in that component the the Java FX component applies a set of apis",
    "start": "416199",
    "end": "422280"
  },
  {
    "text": "for delivering and creating Rich internet applications the Java 2D component is a set of apis for drawing",
    "start": "422280",
    "end": "428599"
  },
  {
    "text": "two-dimensional graphics and the library subcomponent provides a basic functionality that is used by most",
    "start": "428599",
    "end": "435319"
  },
  {
    "text": "applications it really does provide a wide range of capabilities and that's why it is so popular with the developers",
    "start": "435319",
    "end": "440800"
  },
  {
    "text": "uh there's the ability to consume common web services work with databases and it's a good reason why people actually",
    "start": "440800",
    "end": "446879"
  },
  {
    "text": "like to use the software itself so let's start looking at the actual",
    "start": "446879",
    "end": "452240"
  },
  {
    "start": "450000",
    "end": "450000"
  },
  {
    "text": "vulnerability Trends and the attack surface of java so what we're looking at here is",
    "start": "452240",
    "end": "459199"
  },
  {
    "start": "456000",
    "end": "456000"
  },
  {
    "text": "patch statistics from 2011 2000 through 2013 and what we see if you look at the",
    "start": "459199",
    "end": "464560"
  },
  {
    "text": "patch statistics there's increased patching which you know as we all know uh due to the increased vulnerability uh",
    "start": "464560",
    "end": "470960"
  },
  {
    "text": "research going on there 50 issues were patched 50 remotely exploitable issues",
    "start": "470960",
    "end": "476159"
  },
  {
    "text": "were patched in 2011 and just in the first half of 20 3 130 remotely",
    "start": "476159",
    "end": "481680"
  },
  {
    "text": "exploitable issues were patched so there's a increase in in research in that area and an increase in patching",
    "start": "481680",
    "end": "487720"
  },
  {
    "text": "Oracle actually provides a lot of metadata when they release a patch and they release along with the patch itself",
    "start": "487720",
    "end": "493479"
  },
  {
    "text": "a SE risk Matrix which is shown on the screen and it provides you additional information about the vulnerability that",
    "start": "493479",
    "end": "499240"
  },
  {
    "text": "is that is being fixed and and we use this as for our initial analysis and you",
    "start": "499240",
    "end": "504400"
  },
  {
    "text": "can see this is cve 2013 2383 is a vulnerability in the 2D",
    "start": "504400",
    "end": "510759"
  },
  {
    "text": "component and it is remotely exploitable without authentication uh it's it CVSs",
    "start": "510759",
    "end": "516200"
  },
  {
    "text": "score is 10 so it's a very severe vulnerability in the 2D component according to the risk Matrix but the",
    "start": "516200",
    "end": "522839"
  },
  {
    "text": "interesting thing about how Java or sorry Oracle actually scores the CVSs score is they actually assume that the",
    "start": "522839",
    "end": "528600"
  },
  {
    "text": "user is running the applet or the web start application as using administrative privileges which we",
    "start": "528600",
    "end": "533640"
  },
  {
    "text": "believe is probably the best way to go for judging CVSs scores um but in reality most V are not going to do that",
    "start": "533640",
    "end": "540640"
  },
  {
    "text": "and as a result Oracle is giving themselves a more severe or harsh penalty on the vulnerabilities that that",
    "start": "540640",
    "end": "546040"
  },
  {
    "text": "are being fixed um so just depends on your perspective if you like the uh the fact that they're using that approach",
    "start": "546040",
    "end": "551839"
  },
  {
    "text": "for judging CVSs scores if we just look at the",
    "start": "551839",
    "end": "557320"
  },
  {
    "start": "555000",
    "end": "555000"
  },
  {
    "text": "information that Oracle provides uh with their patches we can see the component rankings there on on the slide those",
    "start": "557320",
    "end": "564640"
  },
  {
    "text": "components listed on the screen account for half of the remotely exploitable vulnerabilities in Java itself according",
    "start": "564640",
    "end": "570640"
  },
  {
    "text": "to their according to the patch information with the deployment being the number one most vulnerable component",
    "start": "570640",
    "end": "576079"
  },
  {
    "text": "followed by the 2D component uh libraries Java FX and awt and some",
    "start": "576079",
    "end": "581240"
  },
  {
    "text": "interesting statistics that came from this analysis that there's actually two subcomponents in the architecture that were have had bugs in them every single",
    "start": "581240",
    "end": "588640"
  },
  {
    "text": "patch release and that was the deployment and 2D components have been fixed in every single release um there's",
    "start": "588640",
    "end": "595279"
  },
  {
    "text": "actually a point in time where there was two subcomponents in the architecture that had uh double digit cve counts in a single",
    "start": "595279",
    "end": "602440"
  },
  {
    "text": "patch and that both happened both in February 2013 which I think was the largest Java patch ever um the",
    "start": "602440",
    "end": "608640"
  },
  {
    "text": "deployment and Java FX subcomponents had 10 and 12 respectively on average the",
    "start": "608640",
    "end": "614040"
  },
  {
    "text": "CVSs score is 7.67 uh and if you look at the table itself you can make an argument that the",
    "start": "614040",
    "end": "620519"
  },
  {
    "text": "2D component is actually the worst component in the architecture based off of its ranking and average and average",
    "start": "620519",
    "end": "627040"
  },
  {
    "text": "CVSs score but if we start looking at the zero day initiative submission Trends over the",
    "start": "627040",
    "end": "633480"
  },
  {
    "start": "630000",
    "end": "630000"
  },
  {
    "text": "years um in the zdi program we're getting about five Java zero days every",
    "start": "633480",
    "end": "638639"
  },
  {
    "text": "quarter when you can see there the huge Spike that I was talking about in the fourth quarter of 2012 and the first",
    "start": "638639",
    "end": "644120"
  },
  {
    "text": "quarter of 2013 uh with a high of 33 zero days",
    "start": "644120",
    "end": "649160"
  },
  {
    "text": "coming into our program in one quarter and that's kind of the reason the name for the talk is it basically felt like every day we were getting a new Java",
    "start": "649160",
    "end": "655279"
  },
  {
    "text": "zero day into the system which we had to Quick turn and get to Oracle uh if you look at the components that our",
    "start": "655279",
    "end": "661160"
  },
  {
    "text": "researchers are actually focusing on they're focusing on the 2D component the library component Java FX and the",
    "start": "661160",
    "end": "666959"
  },
  {
    "text": "deployment component and and sound uh and if you look at the overall stats for",
    "start": "666959",
    "end": "673000"
  },
  {
    "text": "how many um bugs the zdi program is actually responsible for Java they actually account for 36% of java",
    "start": "673000",
    "end": "680160"
  },
  {
    "text": "vulnerabilities with a CVSs score of 9 or higher that's a lot of bugs uh with",
    "start": "680160",
    "end": "686000"
  },
  {
    "text": "an average score of 9.28 um so we can look at it in two ways either the zdi researchers are focusing on components",
    "start": "686000",
    "end": "692040"
  },
  {
    "text": "that produced the most vules or the components end up on the most vulnerable list when the zdi researchers start",
    "start": "692040",
    "end": "697959"
  },
  {
    "text": "looking at them it just depends on your perspective so what we did is we took",
    "start": "697959",
    "end": "703160"
  },
  {
    "start": "701000",
    "end": "701000"
  },
  {
    "text": "that 100 the 120 plus vulnerabilities that we had in our data set and we we",
    "start": "703160",
    "end": "708680"
  },
  {
    "text": "categorized them by vulnerability class or cwe and we first started off with the blue boxes uh with privilege and sandbox",
    "start": "708680",
    "end": "716000"
  },
  {
    "text": "issues buffer overflows improper restriction on Buff her operations unpointed untrusted poty references ing",
    "start": "716000",
    "end": "723040"
  },
  {
    "text": "overflows and a couple other bugs and what we saw is you know in short the the",
    "start": "723040",
    "end": "729000"
  },
  {
    "text": "privileged sandbox issue had the most number of vulnerabilities in this in in Java and but followed by buffer",
    "start": "729000",
    "end": "736560"
  },
  {
    "text": "overflows followed by the out of- bounds rights the but we wanted to take a more granular look at the vulnerability",
    "start": "736560",
    "end": "743720"
  },
  {
    "text": "classes themselves and so we subcategorized the vulnerability classes even further we labeled uh",
    "start": "743720",
    "end": "750880"
  },
  {
    "text": "vulnerabilities that abused the reflection apis in Java to reach parts of the code that were restricted uh and",
    "start": "750880",
    "end": "758320"
  },
  {
    "text": "since allowed them to U disable the sandbox as unsafe reflection",
    "start": "758320",
    "end": "763600"
  },
  {
    "text": "vulnerabilities uh the abuse of the of of Java's due privileged blocks uh we labeled as least privilege violations",
    "start": "763600",
    "end": "771199"
  },
  {
    "text": "and then vulnerabilities that abused oracles type system uh due to using",
    "start": "771199",
    "end": "777639"
  },
  {
    "text": "techniques like deserialization of untrusted data were labeled as type confusion we also subcategorized the",
    "start": "777639",
    "end": "783160"
  },
  {
    "text": "buffer overflows into the classic Heap and stack based versions and out of- bounds wrs and out of- bounds reads for buffer operations um so and but the key",
    "start": "783160",
    "end": "791120"
  },
  {
    "text": "takeaway here for Java is it's it's a classic case study in almost every single major bug class that exists uh",
    "start": "791120",
    "end": "798880"
  },
  {
    "text": "that we have been we've known about for a long time so it's but if we look even",
    "start": "798880",
    "end": "804399"
  },
  {
    "text": "deeper at specifically the sandbox bypass issues itself C cw6 uh 265 it",
    "start": "804399",
    "end": "813399"
  },
  {
    "start": "805000",
    "end": "805000"
  },
  {
    "text": "accounted for over half of the vulnerabilities in our data set um if you look at the pie chart there you can",
    "start": "813399",
    "end": "818880"
  },
  {
    "text": "see that the unsafe reflection has had 50% over 50% of those and the least",
    "start": "818880",
    "end": "824760"
  },
  {
    "text": "privilege violations were a quarter and followed by the type confusion bugs if you see there there's a chart on the",
    "start": "824760",
    "end": "831000"
  },
  {
    "text": "screen that shows zdi submissions and then C cves in the wild that are",
    "start": "831000",
    "end": "836880"
  },
  {
    "text": "actively being exploited so we can clearly state that Oracle has known about this issue for a long time uh as",
    "start": "836880",
    "end": "843079"
  },
  {
    "text": "early as early 2011 2010 and these are actually quite popular and we'll talk about this in the leveraging section uh",
    "start": "843079",
    "end": "849920"
  },
  {
    "text": "with with exploiters um because you don't have to bypass OS level mitigations like Depp and aslr they just",
    "start": "849920",
    "end": "855519"
  },
  {
    "text": "work every time if we look at memory corruption issues cwe 787 out of bounds rights and",
    "start": "855519",
    "end": "863240"
  },
  {
    "start": "857000",
    "end": "857000"
  },
  {
    "text": "122 heat based buffer overflows there's really two root causes for those vulnerabilities in question uh the first",
    "start": "863240",
    "end": "870120"
  },
  {
    "text": "is an integer overflow that causes an allocation smaller than the intended buffer that you write past and then also",
    "start": "870120",
    "end": "877279"
  },
  {
    "text": "incorrect arithmetic operations but if you look at those two classes major classes of vulnerability types we see",
    "start": "877279",
    "end": "883639"
  },
  {
    "text": "that onethird of those issues are a result of integer overflow which we'll actually go over an example of an integer overflow in uh in the case study",
    "start": "883639",
    "end": "891360"
  },
  {
    "text": "section uh so that it's an interesting interesting look at the vulnerabilities themselves and the fact",
    "start": "891360",
    "end": "898160"
  },
  {
    "text": "that there are two different types uh but uh incorrect arithmetic operations is a majority of those memory",
    "start": "898160",
    "end": "905560"
  },
  {
    "start": "905000",
    "end": "905000"
  },
  {
    "text": "Corruptions so taking that information and Maring it with the zdi information and all the data sources that we had we",
    "start": "905560",
    "end": "911399"
  },
  {
    "text": "could determine the top seven vulnerability classes for Java number one being the unsafe reflection style of",
    "start": "911399",
    "end": "917600"
  },
  {
    "text": "owner of sandbox bypass uh and they're most popular actually in the library subcomponent the next is the least",
    "start": "917600",
    "end": "924320"
  },
  {
    "text": "privilege violation again most popular in the library subcomponent followed by two classic memory corruption issues we",
    "start": "924320",
    "end": "931279"
  },
  {
    "text": "have the heat based buffer overflow and the outof bounds right followed by untrusted pointer D referencing uh in",
    "start": "931279",
    "end": "938120"
  },
  {
    "text": "the Java FX component which is actually my favorite style of bug in Java I don't know why they exist but they do uh and",
    "start": "938120",
    "end": "944040"
  },
  {
    "text": "then there's the in integer overflow bugs in that result in heat based bu overflows and type",
    "start": "944040",
    "end": "950000"
  },
  {
    "text": "confusion interesting thing to note here is that the unsafe reflection and least privilege violations are the most",
    "start": "950000",
    "end": "955440"
  },
  {
    "text": "popular but trust uh type confusion uh is number seven in the list and we'll see a switch in that later on when we",
    "start": "955440",
    "end": "962600"
  },
  {
    "text": "talk about leveraging so the next thing we did was we said okay we we know what the most",
    "start": "962600",
    "end": "968399"
  },
  {
    "start": "964000",
    "end": "964000"
  },
  {
    "text": "vulnerable subcomponents are we have a set of 120 unique Java vulnerabilities let's create a road map of the type of",
    "start": "968399",
    "end": "975480"
  },
  {
    "text": "vulnerabilities in each component and which packages those vulnerabilities actually existed in so if we look at",
    "start": "975480",
    "end": "981399"
  },
  {
    "text": "here and this is I believe one of the first times this this mapping of the attack surface has actually existed um",
    "start": "981399",
    "end": "986880"
  },
  {
    "text": "so if we look outside of Oracle um if we look at the 2D 2D component we can",
    "start": "986880",
    "end": "992560"
  },
  {
    "text": "see which packages vulnerabilities actually existed in and the type of vulnerabilities which happen to be Memory corruption issues that existed in",
    "start": "992560",
    "end": "999360"
  },
  {
    "text": "there if we look at the deployment subcomponent they suffered from a set of",
    "start": "999360",
    "end": "1004680"
  },
  {
    "text": "injection and process control issues uh the uh and the rest of the components in",
    "start": "1004680",
    "end": "1011040"
  },
  {
    "text": "this list were actually sandbox related issues this is the another set of",
    "start": "1011040",
    "end": "1017120"
  },
  {
    "text": "components that we did analysis on you can see that Java FX suffered from a lot of untrusted pointer D reference style",
    "start": "1017120",
    "end": "1023160"
  },
  {
    "text": "vulnerabilities uh the library uh subcomponent mostly well pretty much",
    "start": "1023160",
    "end": "1028839"
  },
  {
    "text": "exclusively had sandbox issues but one of the interesting components is actually the sound component because it had both sandbox and memory corruption",
    "start": "1028839",
    "end": "1035678"
  },
  {
    "text": "issues in it the interesting thing here and and why this mapping is valuable as as a Bug Hunter uh who wants to",
    "start": "1035679",
    "end": "1042319"
  },
  {
    "text": "responsibly disclose through our program the it allows you to um pinpoint which",
    "start": "1042319",
    "end": "1048240"
  },
  {
    "text": "subcomponents to look at and kind of gives you a road map for what to look for especially when you're doing one-day",
    "start": "1048240",
    "end": "1053440"
  },
  {
    "text": "patch diffing you can take the subcomponent you can based off of uh the risk Matrix Oracle provides you can look",
    "start": "1053440",
    "end": "1059559"
  },
  {
    "text": "at this mapping and determine what vulnerability types and code changes you should be looking",
    "start": "1059559",
    "end": "1065280"
  },
  {
    "text": "for now we're going to uh take a look at a set of case studies of the most popular vulnerability types in the most",
    "start": "1065280",
    "end": "1071960"
  },
  {
    "start": "1066000",
    "end": "1066000"
  },
  {
    "text": "popular components we're going to go over a set of two sandbox issues in the library subcomponent two memory",
    "start": "1071960",
    "end": "1077960"
  },
  {
    "text": "corruption issues in the the 2D component and and an untrusted pointer D reference vulnerability in the Java FX",
    "start": "1077960",
    "end": "1083799"
  },
  {
    "text": "component some like I said before some of these pox have never been seen before publicly uh and so but they've all been",
    "start": "1083799",
    "end": "1091520"
  },
  {
    "text": "patched all right so the first bug is in the library subcomponent and is a privileged sandbox issue due to unsafe",
    "start": "1093240",
    "end": "1099760"
  },
  {
    "text": "reflection um but first what is unsafe reflection um imagine you have a or actually first what's reflection imagine",
    "start": "1099760",
    "end": "1106520"
  },
  {
    "text": "you have a dispatch method that takes a string and based on that string it then executes the method dynamically so you",
    "start": "1106520",
    "end": "1112640"
  },
  {
    "text": "pass it a the string add and it'll dynamically look up and invoke the ad method uh unsafe reflection would be",
    "start": "1112640",
    "end": "1120159"
  },
  {
    "text": "where you do not have proper validation on that string and you allow a malicious user to run the delete everything method",
    "start": "1120159",
    "end": "1127360"
  },
  {
    "text": "uh cve 2013 2436 is an example of unsafe reflection and was reported To Us by Ben",
    "start": "1127360",
    "end": "1133559"
  },
  {
    "text": "Murphy on March 20th of 2013 it starts off by using security Explorations is",
    "start": "1133559",
    "end": "1138760"
  },
  {
    "text": "issue 54 which Oracle did decided is not a vulnerability um issue 54 makes use of",
    "start": "1138760",
    "end": "1144960"
  },
  {
    "text": "the invoke Dynamic jvm op code to get access to protected methods so in this",
    "start": "1144960",
    "end": "1151200"
  },
  {
    "text": "particular case we can get access to the defined class protected method of the class loader class and we we end up with",
    "start": "1151200",
    "end": "1157400"
  },
  {
    "text": "a method handle to it um they also mentioned that they had another way of",
    "start": "1157400",
    "end": "1163080"
  },
  {
    "text": "actually turning into a full exploit and they called it issue 55 and based on issue 55 having the same cve as um what",
    "start": "1163080",
    "end": "1170640"
  },
  {
    "text": "Ben Murphy submitted to us we can only assume that they're the same Fen uh Ben Murphy had found that you can use method",
    "start": "1170640",
    "end": "1176280"
  },
  {
    "text": "handle as bind two method to bind the class to bind a method handle or a class",
    "start": "1176280",
    "end": "1181840"
  },
  {
    "text": "loader to a method handle and it'll allow the class loader to be used as a valid argument so once you've done that",
    "start": "1181840",
    "end": "1188480"
  },
  {
    "text": "you can actually invoke it and continue on once you've done that all you have to do is create a permission domain that",
    "start": "1188480",
    "end": "1194440"
  },
  {
    "text": "contains all permission and then load a class using that permission domain once you've done that you can execute a",
    "start": "1194440",
    "end": "1200039"
  },
  {
    "text": "method from the loaded class to invoke uh system. at security manager null and you'll nullify the security manager or",
    "start": "1200039",
    "end": "1206919"
  },
  {
    "text": "you could have a static initializer within the loaded class do the same and here is a sample of the pock and we",
    "start": "1206919",
    "end": "1214320"
  },
  {
    "text": "start off with uh the use of a custom class so I forgot to mention um to make",
    "start": "1214320",
    "end": "1221159"
  },
  {
    "text": "use of the invoke Dynamic op code to get access to a protected class you have to handcraft the class and so you cannot",
    "start": "1221159",
    "end": "1227760"
  },
  {
    "text": "use a Java compil you could do it with raw hex bites but an easier way is to use a framework such as the asm2",
    "start": "1227760",
    "end": "1233840"
  },
  {
    "text": "framework so you invoke your loaded class and uh invoke the method that",
    "start": "1233840",
    "end": "1239000"
  },
  {
    "text": "you've defined it within it and the whole point of that is to invoke this method here set defin class handle and",
    "start": "1239000",
    "end": "1245159"
  },
  {
    "text": "one of the arguments passed here is a method handle and we use that method handle which will be a method handle to",
    "start": "1245159",
    "end": "1250840"
  },
  {
    "text": "our class Define class uh protected method and we just save it to a static variable so we can access it later on",
    "start": "1250840",
    "end": "1258640"
  },
  {
    "text": "once we've invoked our custom class we then create our permission object and then create a protection domain using",
    "start": "1258640",
    "end": "1264480"
  },
  {
    "text": "that permission object we then get access to our class loader and create a method handle and bind uh the class",
    "start": "1264480",
    "end": "1271520"
  },
  {
    "text": "loader to that method handle and then we invoke a class at this point all we have to do is nullify the uh is invoke a",
    "start": "1271520",
    "end": "1278600"
  },
  {
    "text": "method within the loaded class that nullifies the security manager or as I said before make use of a satic",
    "start": "1278600",
    "end": "1284240"
  },
  {
    "text": "initializer so the way Oracle decided to patch this was by modifying the um one",
    "start": "1284240",
    "end": "1289600"
  },
  {
    "text": "of the methods that's implicitly called the uh convert method within Sun invoke util wrapper and it was patched in jdk7",
    "start": "1289600",
    "end": "1298159"
  },
  {
    "text": "update 21 and they did that by adding this assert and this if check where if",
    "start": "1298159",
    "end": "1304600"
  },
  {
    "text": "the parameter class is not an interface we'll cast our object to the given class",
    "start": "1304600",
    "end": "1310919"
  },
  {
    "text": "here we can see the original version where you can clearly see that there is no if check um as a result of the patch",
    "start": "1310919",
    "end": "1317320"
  },
  {
    "text": "if you were to try to run the mentioned P you would end up in a uh it would result in a Class cast",
    "start": "1317320",
    "end": "1323600"
  },
  {
    "text": "exception all right so the next vulnerability is also a library sub subcomponent and it's a privileged",
    "start": "1323600",
    "end": "1329679"
  },
  {
    "start": "1325000",
    "end": "1325000"
  },
  {
    "text": "sandbox issue due to lease privilege violation Java provides a way to execute",
    "start": "1329679",
    "end": "1335799"
  },
  {
    "text": "code in a higher context than you're given as an untrusted applet and this is done through access controllers D",
    "start": "1335799",
    "end": "1342679"
  },
  {
    "text": "privilege block uh the DU privilege method takes two arguments one that's required and one that's optional the",
    "start": "1342679",
    "end": "1348919"
  },
  {
    "text": "required argument is a class Anonymous or otherwise that has a run method and",
    "start": "1348919",
    "end": "1354000"
  },
  {
    "text": "this run method will get run when well within the Block in the higher or lower context the second argument is an access",
    "start": "1354000",
    "end": "1360559"
  },
  {
    "text": "control context object and that's basically a save state of the security context that existed when the access",
    "start": "1360559",
    "end": "1367559"
  },
  {
    "text": "control context was created so if you create it with a um untrusted applet then when Library code runs it with your",
    "start": "1367559",
    "end": "1374480"
  },
  {
    "text": "Access Control context it'll drop it'll basically drop privileges for executing your code if you were to do it within a",
    "start": "1374480",
    "end": "1381240"
  },
  {
    "text": "um within Library code then it would have a higher context and you'd be able to do well more powerful things um on",
    "start": "1381240",
    "end": "1387520"
  },
  {
    "text": "November 17th of 2012 Ben Murphy found that proxy proxy new proxy instance does",
    "start": "1387520",
    "end": "1392679"
  },
  {
    "text": "not save the caller's access control context unfortunately it requires an invocation Handler that's able to",
    "start": "1392679",
    "end": "1398159"
  },
  {
    "text": "execute an arbitrary statement so prior to jdk7 this was not all that useful but",
    "start": "1398159",
    "end": "1403559"
  },
  {
    "text": "he found that method method handle proxies has a method as interface instance that allow creation of an",
    "start": "1403559",
    "end": "1409279"
  },
  {
    "text": "invocation Handler instance and you can use this to get access to a protected",
    "start": "1409279",
    "end": "1415000"
  },
  {
    "text": "method such as class letterers Define class method the only issue with this is once you've created the bound method",
    "start": "1415000",
    "end": "1420679"
  },
  {
    "text": "handle you then have to find a way to execute it without putting user frames on the stack and here's a little snippet of a",
    "start": "1420679",
    "end": "1427159"
  },
  {
    "text": "Pock uh so you'd start off with some class that you control and has an instance method you want to execute at a",
    "start": "1427159",
    "end": "1433840"
  },
  {
    "text": "higher context and you just instantiate it you then um describe the method type",
    "start": "1433840",
    "end": "1439159"
  },
  {
    "text": "of the instance method you want to execute and this is just uh the return value the return class and then",
    "start": "1439159",
    "end": "1445640"
  },
  {
    "text": "parameter classes you then look up the method using the fine virtual method and uh",
    "start": "1445640",
    "end": "1452640"
  },
  {
    "text": "pass it the desired class the instance method's name and the method type",
    "start": "1452640",
    "end": "1458799"
  },
  {
    "text": "instance now you bind it to your desired class instance uh and run drop arguments drop",
    "start": "1458799",
    "end": "1465120"
  },
  {
    "text": "arguments as a name implies just drops arguments before ification of the method handle so in this particular instance",
    "start": "1465120",
    "end": "1471159"
  },
  {
    "text": "because the offset is zero it'll drop the first three arguments in object argument a method argument and an object",
    "start": "1471159",
    "end": "1477200"
  },
  {
    "text": "array argument once we've done that we can create our invocation Handler using method handle proxies as interface",
    "start": "1477200",
    "end": "1483200"
  },
  {
    "text": "instance and at this point we still have to invoke proxy new proxy instance but we have to do it on an interface that uh",
    "start": "1483200",
    "end": "1491120"
  },
  {
    "text": "once we've bound it to it we will be able to execute code without uh putting user frames on the",
    "start": "1491120",
    "end": "1496520"
  },
  {
    "text": "stack um this was patched in three different places first in the method handles uh function using uh by",
    "start": "1496520",
    "end": "1504200"
  },
  {
    "text": "modifying the fine virtual function which was modified to make use of the new fine bound collar class method and",
    "start": "1504200",
    "end": "1510960"
  },
  {
    "text": "the main takeaway from this is that the class return here will be it could potentially be null and as a result when",
    "start": "1510960",
    "end": "1517159"
  },
  {
    "text": "we call Access virtual here we could potentially be sending null to it method handle proxies was modified in the as",
    "start": "1517159",
    "end": "1523760"
  },
  {
    "text": "interface instance method and specifically the maybe bind collar um call was added and within there the main",
    "start": "1523760",
    "end": "1531720"
  },
  {
    "text": "takeaway is that if the parameter class is null or if the parameter class has a null class loader which means it was",
    "start": "1531720",
    "end": "1537600"
  },
  {
    "text": "it's basically Library coded or it's um Library code that was loaded then we",
    "start": "1537600",
    "end": "1542640"
  },
  {
    "text": "will just return the method handle without uh any modification whatsoever",
    "start": "1542640",
    "end": "1547679"
  },
  {
    "text": "and we'll never make it to this bind caller or yeah bind caller function um method handle implementation",
    "start": "1547679",
    "end": "1554399"
  },
  {
    "text": "was also modified in its bind collar method just in case you make it this far if the parameter class is n then we will",
    "start": "1554399",
    "end": "1561440"
  },
  {
    "text": "just throw an internal error um prior to this it would try to carry on using a c",
    "start": "1561440",
    "end": "1566960"
  },
  {
    "text": "trampoline and now it will end up with a um no pointer exception all right so the next",
    "start": "1566960",
    "end": "1573840"
  },
  {
    "start": "1572000",
    "end": "1572000"
  },
  {
    "text": "vulnerability is in the 2D subcomponent and it's a heat based buffer overflow due to integer overflow it was reported",
    "start": "1573840",
    "end": "1580399"
  },
  {
    "text": "To Us by axt axt on September 13th of 2012 and it exists in native code using",
    "start": "1580399",
    "end": "1587960"
  },
  {
    "text": "um so you have to access it using Java's native interface it exists in Sun awt",
    "start": "1587960",
    "end": "1593000"
  },
  {
    "text": "medial lib mli image create and the Overflow occurs based on the values for",
    "start": "1593000",
    "end": "1598559"
  },
  {
    "text": "height width and channels times four so it takes four arguments the first of which is a type that specifies well what",
    "start": "1598559",
    "end": "1607000"
  },
  {
    "text": "type of data you're looking at if you specify the type as mlib int then you'll be able to achieve uh the integer",
    "start": "1607000",
    "end": "1613799"
  },
  {
    "text": "overflow um mlib s32 which is the type for channels with and height is just a",
    "start": "1613799",
    "end": "1619960"
  },
  {
    "text": "type def around a s 32bit integer there are some restrictions placed on the values here in that width",
    "start": "1619960",
    "end": "1625960"
  },
  {
    "text": "and height both have to be greater than zero and channels has to be greater than one and less than four but after that",
    "start": "1625960",
    "end": "1631399"
  },
  {
    "text": "there are no checks or restrictions placed whatsoever so here we can see that if the type is mli int because",
    "start": "1631399",
    "end": "1637120"
  },
  {
    "text": "we're in the switch statement um we're multiplying width and channels by four or multiplying all those and then",
    "start": "1637120",
    "end": "1644120"
  },
  {
    "text": "setting it to WB and then later on we're multiplying WB in height and and using that to allocate memory so if the value",
    "start": "1644120",
    "end": "1651520"
  },
  {
    "text": "of height time width time channels Time 4 is greater than 2 302 power it'll wrap",
    "start": "1651520",
    "end": "1657159"
  },
  {
    "text": "and we'll end up allocating a buffer that is much smaller than we actually require so when we write to it we'll",
    "start": "1657159",
    "end": "1662840"
  },
  {
    "text": "overflow uh it was patched in jdk7 update 17 through the use of the safe to",
    "start": "1662840",
    "end": "1668200"
  },
  {
    "text": "Mt macro and this was actually interesting because this was patched or if you were looking at the open jdk",
    "start": "1668200",
    "end": "1674000"
  },
  {
    "text": "source code you could see this patch prior to uh the jdk7 upd 17 being",
    "start": "1674000",
    "end": "1681200"
  },
  {
    "text": "released and here's a updated snippet and we can see that they're using the",
    "start": "1681200",
    "end": "1686679"
  },
  {
    "text": "safe to MTT macro and only if it succeeds will they set WB to the value of width and channels and then once",
    "start": "1686679",
    "end": "1692480"
  },
  {
    "text": "again they're using safe to maltt on WB and 4 and only if it succeeds will they set WB to WB * 4 and then once again to",
    "start": "1692480",
    "end": "1701120"
  },
  {
    "text": "the before the call to Malik they're multiplying WB in height before passing it to Malik",
    "start": "1701120",
    "end": "1708360"
  },
  {
    "text": "um the last uh 2D subcomponent weakness is an outof bounds right due to integer overflow and it was reported To Us by",
    "start": "1708360",
    "end": "1714919"
  },
  {
    "text": "valal toov on December 2nd of 2012 cve 2013 2420 was um it exists in the native",
    "start": "1714919",
    "end": "1723840"
  },
  {
    "text": "code as well and it's in Sun awt image awt image rep it's accessible via Sun",
    "start": "1723840",
    "end": "1730840"
  },
  {
    "text": "awt image image representation and the vulnerable function is set ICM pixels",
    "start": "1730840",
    "end": "1736880"
  },
  {
    "text": "the issue lies in the integer component raster which is the last object and integer component raster has a scan line",
    "start": "1736880",
    "end": "1742720"
  },
  {
    "text": "stride field which is used without any validation whatsoever so here we can see a snippet",
    "start": "1742720",
    "end": "1748640"
  },
  {
    "text": "of the set ICM pixels function and we can see that the last argument to it is a j object in this case it's definitely",
    "start": "1748640",
    "end": "1755000"
  },
  {
    "text": "going to be the integer component raster um we then see the scan line stride field being set um as an offset from the",
    "start": "1755000",
    "end": "1762039"
  },
  {
    "text": "uh image component raster and then here we see destination and Source pointers being set and you can see that",
    "start": "1762039",
    "end": "1768200"
  },
  {
    "text": "destination pointer is set based off some math using the scan line St field and um the X and Y coordinates here we",
    "start": "1768200",
    "end": "1775880"
  },
  {
    "text": "have the outer loop where both the source pointer and destination pointer are incremented without any sort of",
    "start": "1775880",
    "end": "1781279"
  },
  {
    "text": "validation to prevent integer overflow um here we're just updating the",
    "start": "1781279",
    "end": "1786519"
  },
  {
    "text": "destination Source pointers and in the in loop we're once again incrementing the destination pointer without any",
    "start": "1786519",
    "end": "1792360"
  },
  {
    "text": "validation finally we're making our rights and incrementing Source pointer at the same time",
    "start": "1792360",
    "end": "1798840"
  },
  {
    "text": "so this was patched in jdk7 update 21 through the use of three new macros check stride check source and check dust",
    "start": "1798840",
    "end": "1804960"
  },
  {
    "text": "and in addition Oracle fully patch this by um checking all input arguments and",
    "start": "1804960",
    "end": "1810559"
  },
  {
    "text": "not just the ones that were specific to this vulnerability so here's the check stride function and we can see that",
    "start": "1810559",
    "end": "1816480"
  },
  {
    "text": "they're doing division to make sure that if integer overflow occurs will return false same goes for check source and",
    "start": "1816480",
    "end": "1823159"
  },
  {
    "text": "check des and then here is the updated version of set ICM pixels where we can",
    "start": "1823159",
    "end": "1828320"
  },
  {
    "text": "see that um now they're validating X and W and then here they're validating x y",
    "start": "1828320",
    "end": "1834640"
  },
  {
    "text": "and H we can see here that they're validating that the data offsets array within the raster's object is actually",
    "start": "1834640",
    "end": "1841200"
  },
  {
    "text": "valid and then here we can see the use of the uh macros that they just",
    "start": "1841200",
    "end": "1846919"
  },
  {
    "text": "introduced all right so the last vulnerability is in the Java FX subcomponent and it's an untrusted",
    "start": "1846919",
    "end": "1852760"
  },
  {
    "text": "pointer D reference uh cve 2013 2428 was reported To Us by T torup of on December",
    "start": "1852760",
    "end": "1859919"
  },
  {
    "text": "9th of 2012 it exists in common webp platform. webpage and the issue is web",
    "start": "1859919",
    "end": "1866559"
  },
  {
    "text": "page has a bunch of native functions that are called using jni some of one of them allocates a buffer in Sealand and",
    "start": "1866559",
    "end": "1873519"
  },
  {
    "text": "returns a pointer which then gets stored in javal land as an instance variable um known as P page uh there's also an",
    "start": "1873519",
    "end": "1881240"
  },
  {
    "text": "accessor method for p page variable called get page and some of the instance methods within the function will",
    "start": "1881240",
    "end": "1887480"
  },
  {
    "text": "directly use P page whereas others will make use of the get page accessor method",
    "start": "1887480",
    "end": "1893399"
  },
  {
    "text": "since web page is public and the get page class is also public we're able to",
    "start": "1893399",
    "end": "1899240"
  },
  {
    "text": "and it's not final we're able to subass it and modify it and a and as a result",
    "start": "1899240",
    "end": "1904559"
  },
  {
    "text": "we're able to corrupt memory so here we can see a snippet of the web page class",
    "start": "1904559",
    "end": "1910039"
  },
  {
    "text": "and you can see here that the class itself is public we can see that the get page class is definitely public and",
    "start": "1910039",
    "end": "1916240"
  },
  {
    "text": "here's one of the Native functions TW UK set editable and although it's private we can see above it that set editable is",
    "start": "1916240",
    "end": "1923360"
  },
  {
    "text": "public and here's the call to twwk set edible and within it you can see the get",
    "start": "1923360",
    "end": "1928440"
  },
  {
    "text": "the call to get page the way they patched this was interesting in that we had a slew of",
    "start": "1928440",
    "end": "1933919"
  },
  {
    "start": "1931000",
    "end": "1931000"
  },
  {
    "text": "these come in all at the same time and I think that may be why it's Brian's uh favorite type of bug in Java and in jdk",
    "start": "1933919",
    "end": "1941519"
  },
  {
    "text": "7 update 13 as kind of a make the hurting stop reaction Oracle just banned",
    "start": "1941519",
    "end": "1947200"
  },
  {
    "text": "uh a large number of packages in this case the common web Paine package such",
    "start": "1947200",
    "end": "1952639"
  },
  {
    "text": "that any attempt to access it jdk 13 or up will result in a package access",
    "start": "1952639",
    "end": "1958279"
  },
  {
    "text": "exception uh there's also a package definition restriction list and for every jdk that we've looked at it's the",
    "start": "1958279",
    "end": "1963639"
  },
  {
    "text": "exact same but all that means is that you can't try and uh trick the jvm by",
    "start": "1963639",
    "end": "1969120"
  },
  {
    "text": "defining a package of your own within commum web comson web pain um it was",
    "start": "1969120",
    "end": "1975799"
  },
  {
    "text": "also properly patched in jdk7 update 21 by making the get page method package",
    "start": "1975799",
    "end": "1981600"
  },
  {
    "text": "private and final so that you can no longer subclass it and well cor to memory at this point I'm going to turn",
    "start": "1981600",
    "end": "1988279"
  },
  {
    "start": "1987000",
    "end": "1987000"
  },
  {
    "text": "it back over to Brian so that he can go over Ponda own and how these weaknesses are utilized in the threat",
    "start": "1988279",
    "end": "1995000"
  },
  {
    "text": "landscape all right so the first place we're going to look like like jel said was at at pwn to own this year uh this",
    "start": "1995000",
    "end": "2001159"
  },
  {
    "text": "at this year's Pon own we decided to broaden the scope of the competition itself Beyond just the browser but to the actual browser plugins and the",
    "start": "2001159",
    "end": "2007960"
  },
  {
    "text": "reason we did that is because they the browser plugins are what actually targeted by malware and used and targeted attacks and so we wanted to",
    "start": "2007960",
    "end": "2013559"
  },
  {
    "text": "kind of highlight the vulnerabilities that existed in those uh plugins themselves so we included Flash reader",
    "start": "2013559",
    "end": "2020480"
  },
  {
    "text": "and of course Java into the mix uh at this year's pwn own and and some of the people in in the industry thought that",
    "start": "2020480",
    "end": "2027039"
  },
  {
    "text": "we were making it too IND too easy and you see costy's quote there it's one of our favorite quotes from when we launched the rules that zdi was giving",
    "start": "2027039",
    "end": "2033880"
  },
  {
    "text": "away $20,000 for free which it did actually feel like that at the time because there was so many zero days that",
    "start": "2033880",
    "end": "2039720"
  },
  {
    "text": "were being discovered and the amount of submissions we were getting when we launched the rules uh made it feel like",
    "start": "2039720",
    "end": "2044760"
  },
  {
    "text": "we were giving away $2,000 for free but we did it anyway we put that $20,000",
    "start": "2044760",
    "end": "2049878"
  },
  {
    "text": "bounty on on Java and our expectation was that the sandbox issue uh due to unsafe reflection was going to be we",
    "start": "2049879",
    "end": "2056638"
  },
  {
    "text": "were just going to basically get a bunch of those type of bugs because that's what everybody was looking at a security Explorations had re released their paper",
    "start": "2056639",
    "end": "2063520"
  },
  {
    "text": "and a lot of people were looking at those type of bugs and so our expectation was just to get a slew of them but in",
    "start": "2063520",
    "end": "2069158"
  },
  {
    "text": "reality what we got from our the researchers who pre-registered and showed up at the competition uh was",
    "start": "2069159",
    "end": "2074480"
  },
  {
    "text": "actually the top four vulnerability types that affected Java and that was kind of kind of interesting that you",
    "start": "2074480",
    "end": "2079679"
  },
  {
    "text": "know we would get every type that was the biggest problem in Java James Forshaw brought in at least privilege",
    "start": "2079679",
    "end": "2085560"
  },
  {
    "text": "violation vulnerability uh that he actually wrote up in a blog post that's quite good if you if you go search for",
    "start": "2085560",
    "end": "2090720"
  },
  {
    "text": "it on the web Joshua Drake brought in a out of bounds right and out of bounds read vulnerability vop in security",
    "start": "2090720",
    "end": "2096839"
  },
  {
    "text": "brought in a heat based for overflow issue and Ben Murphy brought in an unsafe reflection mg the uh unfortunately for Java it was",
    "start": "2096839",
    "end": "2105040"
  },
  {
    "text": "the most targeted application at this year's Ponda own um because we decided to purchase every bug that for",
    "start": "2105040",
    "end": "2111160"
  },
  {
    "text": "pre-registered contestants if they worked and so it ended up having four zero days dis uh demonstrated in it but",
    "start": "2111160",
    "end": "2118440"
  },
  {
    "text": "it was interesting see to see the different type of bugs that our researchers would bring in and I think our favorite quote was when we asked",
    "start": "2118440",
    "end": "2124760"
  },
  {
    "text": "vupen if they had brought an unsafe reflection bug to said oh we have unsafe reflection bugs but we wanted to bring",
    "start": "2124760",
    "end": "2131160"
  },
  {
    "text": "you something interesting and so he brought that heat based buffer flow if we actually look at the the",
    "start": "2131160",
    "end": "2138000"
  },
  {
    "start": "2136000",
    "end": "2136000"
  },
  {
    "text": "landscape itself based off of the reversing Labs data that we had we've seen a huge we you see a huge increase",
    "start": "2138000",
    "end": "2144000"
  },
  {
    "text": "in Java in malware that is actually leveraging Java every day and it actually interestingly enough mirrors",
    "start": "2144000",
    "end": "2150240"
  },
  {
    "text": "the vulnerability discoveries that were going on you see a huge uptick in unique Mau samples out on the in the sample Le",
    "start": "2150240",
    "end": "2157880"
  },
  {
    "text": "set that we had around the same time that there was a large number of issues being discovered we have you know if you",
    "start": "2157880",
    "end": "2165319"
  },
  {
    "text": "look at the exploit kit market and all the different exploit kits that are out there on average you know an exploit kit",
    "start": "2165319",
    "end": "2171280"
  },
  {
    "text": "to be competitive in that market space has to have two plus Java vulnerabilities in it just to be uh",
    "start": "2171280",
    "end": "2177040"
  },
  {
    "text": "viable for for purchase uh so when you look at like some some of the contagio data that that shows there's there's",
    "start": "2177040",
    "end": "2183119"
  },
  {
    "text": "exploit kits that have six or seven Java vulnerabilities in them uh",
    "start": "2183119",
    "end": "2188319"
  },
  {
    "text": "the other interesting thing is if you look at the chart and the cves that are under active exploitation you see that",
    "start": "2188319",
    "end": "2193400"
  },
  {
    "text": "vulnerabilities are still being vulnerabilities that were discovered in 2011 are still actively being used in",
    "start": "2193400",
    "end": "2199119"
  },
  {
    "text": "the landscape and that's due to the fact that the install base for Java is not routinely updated we had you know we",
    "start": "2199119",
    "end": "2204720"
  },
  {
    "text": "talked about the Websense report where 93% of java installations weren't being patched uh after a month of the release",
    "start": "2204720",
    "end": "2211319"
  },
  {
    "text": "of the patch and there's also the bit n report that showed that you know when you install Java it it's not",
    "start": "2211319",
    "end": "2217800"
  },
  {
    "text": "uninstalling the old major versions that leaves you know users vulnerable to uh exploitation of these older bugs and so",
    "start": "2217800",
    "end": "2224079"
  },
  {
    "text": "there's still you know vulnerabilities from 2011 actively being targeted in our sample set the peak uh was 12,000 unique",
    "start": "2224079",
    "end": "2231319"
  },
  {
    "text": "samples in one month uh targeting just nine vulnerabilities and you know the attackers are upping their game and",
    "start": "2231319",
    "end": "2237400"
  },
  {
    "text": "trying to get more Java vulnerabilities into their exploit kits into their tool sets uh because they and get and get",
    "start": "2237400",
    "end": "2243319"
  },
  {
    "text": "them on more machines but what we wanted to look at is what what type of vulnerabilities are",
    "start": "2243319",
    "end": "2249160"
  },
  {
    "start": "2246000",
    "end": "2246000"
  },
  {
    "text": "available for exploiters out there so we we took a a sample we we took a look at",
    "start": "2249160",
    "end": "2254319"
  },
  {
    "text": "penetration testing tools and exploit kits that were out there and came up with this table on on the screen that",
    "start": "2254319",
    "end": "2260240"
  },
  {
    "text": "you see right now and and looked at the type of vulnerabilities that they were actually including in the toolkits for",
    "start": "2260240",
    "end": "2266160"
  },
  {
    "text": "use by people and you see that the unsafe reflection vulnerability is the most popular type of vulnerability in",
    "start": "2266160",
    "end": "2271680"
  },
  {
    "text": "the tool sets available to exploiters or P penetration testers uh but an",
    "start": "2271680",
    "end": "2277000"
  },
  {
    "text": "interesting turn of events is that the fact that lease privilege violation is actually at the bottom of the list and type confusion has moved up to rank",
    "start": "2277000",
    "end": "2283680"
  },
  {
    "text": "number two in available vulnerability types in toolkits there is memory corruption in the toolkits and heat",
    "start": "2283680",
    "end": "2289800"
  },
  {
    "text": "based buffer overflows uh uh being the most popular in the toolkits themselves but but what what's really",
    "start": "2289800",
    "end": "2296960"
  },
  {
    "text": "important is what is actually being leveraged in the landscape and and surprisingly type confusion in our",
    "start": "2296960",
    "end": "2302520"
  },
  {
    "text": "sample set was the most prevalent issue under active exploitation with all with over 2/3 of the",
    "start": "2302520",
    "end": "2308800"
  },
  {
    "text": "actual uh unique samples taking advantage of type confusion followed by unsafe reflection followed by the leas",
    "start": "2308800",
    "end": "2315960"
  },
  {
    "text": "privilege violations but if you look at it the sandbox bypass issue makes up 90%",
    "start": "2315960",
    "end": "2321400"
  },
  {
    "text": "about 90% of the of the vulnerability types is being used in the landscape um and another interesting thing is that",
    "start": "2321400",
    "end": "2327680"
  },
  {
    "text": "memory corruption issues are barely visible on the map they are being used but they're just not as popular and the",
    "start": "2327680",
    "end": "2332920"
  },
  {
    "text": "reason for that is the with the sandbox bypass again the OS you don't have to bypass OS level mitigations like dep and",
    "start": "2332920",
    "end": "2340040"
  },
  {
    "text": "aslr they just work so that's what's being included in the kits for use and actually being",
    "start": "2340040",
    "end": "2345119"
  },
  {
    "text": "used I'm going pass it on to jel now he's going to go over some exploitation",
    "start": "2345119",
    "end": "2350240"
  },
  {
    "start": "2346000",
    "end": "2346000"
  },
  {
    "text": "techniques all right so I'm going to go over some some of the end goals for job exploitation and then I'll tell you a",
    "start": "2350240",
    "end": "2355880"
  },
  {
    "text": "useful technique for memory corruption vulnerabilities and then I'll finally go over a piece of malware that shows a",
    "start": "2355880",
    "end": "2362359"
  },
  {
    "text": "Sandbox bypass so essentially there are two main tenants um there's sandbox",
    "start": "2362359",
    "end": "2367440"
  },
  {
    "text": "bypasses where you essentially just need to run system. set security manager null uh nullifying the security manager means",
    "start": "2367440",
    "end": "2373920"
  },
  {
    "text": "once you can run anything you want you could download whatever you want do whatever uh the problem with that is you",
    "start": "2373920",
    "end": "2379160"
  },
  {
    "text": "need a higher context than you're given using a untrusted applet and you also have to have no user sack uh no user",
    "start": "2379160",
    "end": "2385079"
  },
  {
    "text": "sack frames for memory corruption you have your usual techniques one of which could be override a function pointer the",
    "start": "2385079",
    "end": "2391640"
  },
  {
    "text": "problem with that is then you have to deal with depth and aslr if you have a out of bounds right and you also have an",
    "start": "2391640",
    "end": "2398040"
  },
  {
    "text": "out-of- bounds read then you may be okay in that you could use that compute offset and potentially do something",
    "start": "2398040",
    "end": "2403960"
  },
  {
    "text": "interesting with that something that uh is sometimes easier is the use of the Java Bean statement class which was",
    "start": "2403960",
    "end": "2410560"
  },
  {
    "text": "given to us by Vitali toropov so uh Java Bean statement uh",
    "start": "2410560",
    "end": "2416359"
  },
  {
    "text": "represents a single Java statement of the form instance variable instance method and then arguments so what you",
    "start": "2416359",
    "end": "2422720"
  },
  {
    "text": "can do is allocate your buffer of whatever whatever vulnerability control",
    "start": "2422720",
    "end": "2428040"
  },
  {
    "text": "and immediately after create a statement um and replace the statements implicitly",
    "start": "2428040",
    "end": "2433480"
  },
  {
    "text": "created Access Control context with one that's far more powerful um you would do that just by creating a permission",
    "start": "2433480",
    "end": "2439640"
  },
  {
    "text": "object adding all permission to it creating a protection domain array based off that and then creating an access",
    "start": "2439640",
    "end": "2445480"
  },
  {
    "text": "control context using that uh once you've done that all you'd have to do is use your vulnerability to basically swap",
    "start": "2445480",
    "end": "2452200"
  },
  {
    "text": "or replace the uh created statements Access Control context with your controlled one and execute it and you'll",
    "start": "2452200",
    "end": "2458800"
  },
  {
    "text": "execute at a higher context so I'll now go over a um case study over a piece of malware that was",
    "start": "2458800",
    "end": "2465280"
  },
  {
    "start": "2462000",
    "end": "2462000"
  },
  {
    "text": "given to us and it was labeled as cve 2012 1723 which is a vulnerability in",
    "start": "2465280",
    "end": "2470960"
  },
  {
    "text": "the hotspot bite code verifier that leads to type confusion a couple characteristics are that you have to",
    "start": "2470960",
    "end": "2476119"
  },
  {
    "text": "have 100 at least 100 instance variables of some class class A and you have to",
    "start": "2476119",
    "end": "2481160"
  },
  {
    "text": "have a static variable of another class class B you then have to have a method within the class that takes Class B's",
    "start": "2481160",
    "end": "2487359"
  },
  {
    "text": "type and returns class A's type and another characteristic of this is that you will see repeated calls to this",
    "start": "2487359",
    "end": "2493240"
  },
  {
    "text": "function with null as the sole argument uh when we took it apart we saw",
    "start": "2493240",
    "end": "2498560"
  },
  {
    "text": "six class files three of which were completely useless in that or unused in that they had no static initializer and",
    "start": "2498560",
    "end": "2505119"
  },
  {
    "text": "they didn't reference anything not even themselves three of them were very were clearly useful in that one of them",
    "start": "2505119",
    "end": "2511760"
  },
  {
    "text": "extended applet and had it init method init method um so that was definitely our entry point Point another had um an",
    "start": "2511760",
    "end": "2519520"
  },
  {
    "text": "implementation of privilege exception action and made use of system. set security manager so that's clearly useful and then another one was",
    "start": "2519520",
    "end": "2526599"
  },
  {
    "text": "referenced by I think the one that extended applet and had three static methods that weren't all that useful in",
    "start": "2526599",
    "end": "2533839"
  },
  {
    "text": "and of themselves but because they were used we saw to include it um but we saw",
    "start": "2533839",
    "end": "2538920"
  },
  {
    "text": "that there are no characteristics of cve 2012 1723 so we had to Deus skate it to",
    "start": "2538920",
    "end": "2544200"
  },
  {
    "text": "find the actual CPE an interesting thing about this is that we were able to tell that alator Java off fuscater was used",
    "start": "2544200",
    "end": "2550720"
  },
  {
    "text": "but they did not make use of the advanced options such as code flow ausc as a result we were able to just use a",
    "start": "2550720",
    "end": "2557040"
  },
  {
    "text": "commonly available Java D compiler to get the source code um once we did that we were able to decate it by just using",
    "start": "2557040",
    "end": "2563400"
  },
  {
    "text": "basic compiler optimizations such as content propagation dead code elimination function inlining and",
    "start": "2563400",
    "end": "2568599"
  },
  {
    "text": "content function evaluation so here's a snippet of the uh",
    "start": "2568599",
    "end": "2573880"
  },
  {
    "text": "of the Deus gate and decompiled version and I'll just you through what it's doing the first thing it does is check",
    "start": "2573880",
    "end": "2580359"
  },
  {
    "text": "to see Java running Java version that's being run and if it's not 1.7 so if it's",
    "start": "2580359",
    "end": "2585440"
  },
  {
    "text": "not jdk7 it will bail out and do nothing if it is though it'll continue on and",
    "start": "2585440",
    "end": "2591119"
  },
  {
    "text": "it'll take the class that ex implements the privilege exception action turn it into an array of",
    "start": "2591119",
    "end": "2597520"
  },
  {
    "text": "bytes here we see the use of the generic Constructor class to instantiate the",
    "start": "2597520",
    "end": "2603319"
  },
  {
    "text": "anonymous class loader and then we use manage object manager Factory to get access to the",
    "start": "2603319",
    "end": "2609520"
  },
  {
    "text": "load class protected method we then see the method being invoked so that we load",
    "start": "2609520",
    "end": "2615079"
  },
  {
    "text": "our uh privilege exception action class and then we invoke a method within that class and we send it two parameters our",
    "start": "2615079",
    "end": "2622240"
  },
  {
    "text": "the last parameter is the class we just loaded and the first parameter is a string that's served that's given u",
    "start": "2622240",
    "end": "2628359"
  },
  {
    "text": "based off the HTML file that was serving the jar file up within the evil action class or the",
    "start": "2628359",
    "end": "2634760"
  },
  {
    "text": "one that extends uh privilege or implements vill exception action we start off in the trigger DPR block and",
    "start": "2634760",
    "end": "2640760"
  },
  {
    "text": "the names are clearly not what it was originally named but just what I've named to make it easier to understand uh",
    "start": "2640760",
    "end": "2646880"
  },
  {
    "text": "we take the string that we've been given and split it by the letters HJ and uh turn that into a URL we then take the",
    "start": "2646880",
    "end": "2654359"
  },
  {
    "text": "class we were given and get access to its Constructor and instantiate the object using the URL we were G or the",
    "start": "2654359",
    "end": "2660880"
  },
  {
    "text": "string we were given so now we're we end up in the Constructor and the first thing we do is run Access Controller du",
    "start": "2660880",
    "end": "2667280"
  },
  {
    "text": "privilege on ourself since this implements privilege exception action this as the result of executing our run",
    "start": "2667280",
    "end": "2673359"
  },
  {
    "text": "method um the run method consists solely of system. set security manager null so at this point we've nullified the",
    "start": "2673359",
    "end": "2679599"
  },
  {
    "text": "security manager the vulnerability has already taken place and everything that happens after here is stage",
    "start": "2679599",
    "end": "2684839"
  },
  {
    "text": "two all that happens now is we go and run our stage two method um within this we open our URL to the string we were",
    "start": "2684839",
    "end": "2692280"
  },
  {
    "text": "given and we create a file in our app data directory in it's called Java IO",
    "start": "2692280",
    "end": "2697920"
  },
  {
    "text": "tempter uh we then read from the URL and write to the file and once that's done we then try to execute it failing that",
    "start": "2697920",
    "end": "2705319"
  },
  {
    "text": "we will try to load it as a dll so now we can see that now that we've de off gated we can see that it's",
    "start": "2705319",
    "end": "2712440"
  },
  {
    "text": "actually very different from the cve we thought it was it's actually cve 2012 57 5076 and we use generic Constructor to",
    "start": "2712440",
    "end": "2719760"
  },
  {
    "text": "instantiate a restricted class in this case Anonymous class loader we then use manage object manager Factory to get",
    "start": "2719760",
    "end": "2725200"
  },
  {
    "text": "access to the load class protected method and we then use that to load a",
    "start": "2725200",
    "end": "2731000"
  },
  {
    "text": "malicious subclass of privilege exception action once we've done that we nullify the security manager and grab",
    "start": "2731000",
    "end": "2736839"
  },
  {
    "text": "our S2 and execute it and at this point I'm going to turn it back over to Brian so that you can go",
    "start": "2736839",
    "end": "2742000"
  },
  {
    "start": "2739000",
    "end": "2739000"
  },
  {
    "text": "over how Oracle has been dealing with all the malware and vulnerabilities in",
    "start": "2742000",
    "end": "2747000"
  },
  {
    "text": "Java all right so we have a unique perspective inside of the zero day initiative because we deal with a lot of",
    "start": "2747599",
    "end": "2753520"
  },
  {
    "start": "2749000",
    "end": "2749000"
  },
  {
    "text": "vendors um we deal with disclosing a lot of vulnerabilities we're almost at 200",
    "start": "2753520",
    "end": "2758920"
  },
  {
    "text": "bugs patch just this year um so we get to we get we get an interesting look at how vendors are actually responding to",
    "start": "2758920",
    "end": "2765440"
  },
  {
    "text": "the disclosures that we're actually sending to them so if we look at Oracle they've recently made very public",
    "start": "2765440",
    "end": "2770839"
  },
  {
    "text": "customer commitments uh about how fast they're going to turn around zero zero days that are actually under attack they",
    "start": "2770839",
    "end": "2776760"
  },
  {
    "text": "are they've U their releases to four releases a year though this is not you know like Microsoft's Patch Tuesday U",
    "start": "2776760",
    "end": "2782800"
  },
  {
    "text": "they have upped it um the other interesting thing that's that's not really known known and not reported very",
    "start": "2782800",
    "end": "2788119"
  },
  {
    "text": "often is that they're actually improving their vulnerability timeline year over year uh so on average a zdi submission",
    "start": "2788119",
    "end": "2795119"
  },
  {
    "text": "that we sent to Oracle in in Java it takes them about 3 months to patch right this puts them right in the middle of",
    "start": "2795119",
    "end": "2800680"
  },
  {
    "text": "the pack for for vendors patching software that we work with um but the interesting thing is that they've",
    "start": "2800680",
    "end": "2806920"
  },
  {
    "text": "actually decreased that timeline over the last 3 years while vulnerability submissions have been going up in their",
    "start": "2806920",
    "end": "2812640"
  },
  {
    "text": "product so it's actually Quite a feat you know that from an external perspective it looks like they're uh you",
    "start": "2812640",
    "end": "2818640"
  },
  {
    "text": "know working to decrease the timeline Staffing up their response organization uh to um to deal with the incoming",
    "start": "2818640",
    "end": "2825200"
  },
  {
    "text": "vulnerability disclosures as they've increased over the years uh the other interesting thing",
    "start": "2825200",
    "end": "2830319"
  },
  {
    "text": "that's not commonly reported is how aggressively they're adjusting the attack surface of java uh to deal with",
    "start": "2830319",
    "end": "2836200"
  },
  {
    "text": "the vulnerability disclosures that are going on and you saw this jel mentioned you know we had a whole SLE of pointer D",
    "start": "2836200",
    "end": "2841520"
  },
  {
    "text": "reference cases that came in and they patched out them uh by just uh putting",
    "start": "2841520",
    "end": "2846960"
  },
  {
    "text": "the package in the restriction list um but over the last you know 15 sorry 3 years we've they've actually killed 15",
    "start": "2846960",
    "end": "2853800"
  },
  {
    "text": "zero day initiative cases uh due to patching it in this perspective killed means we've got the we've we've",
    "start": "2853800",
    "end": "2860359"
  },
  {
    "text": "purchased the vulnerability from a researcher the um uh we've done the root",
    "start": "2860359",
    "end": "2865440"
  },
  {
    "text": "cause analysis we know it to be exploitable but a patch comes out and it fixes the bug uh that we just purchased",
    "start": "2865440",
    "end": "2871480"
  },
  {
    "text": "right so but they've actually uh killed several of those cases they had no idea that those cases existed well we they",
    "start": "2871480",
    "end": "2876520"
  },
  {
    "text": "may have have but uh the but they did actually patch them out and and by the",
    "start": "2876520",
    "end": "2882480"
  },
  {
    "text": "by the techniques that they were using to R uh reduce the attack surface if you look in jdk U13 or 7 U13 they killed",
    "start": "2882480",
    "end": "2890880"
  },
  {
    "text": "three untrusted poty reference cases that we had and in u15 they killed two leas privilege violation cases that we",
    "start": "2890880",
    "end": "2896920"
  },
  {
    "text": "had and they're doing this like I said by by increasing the applet package restrictions which we'll go over next",
    "start": "2896920",
    "end": "2902160"
  },
  {
    "text": "and also tightening up and and looks like auditing the least privilege violations what you see on the screen",
    "start": "2902160",
    "end": "2907480"
  },
  {
    "start": "2905000",
    "end": "2905000"
  },
  {
    "text": "here is the package restriction list modifications uh over the last several releases we Baseline this at",
    "start": "2907480",
    "end": "2914720"
  },
  {
    "text": "u9 uh with about and and at that point there was 12 packages that were being restricted uh to applets and in U10 and",
    "start": "2914720",
    "end": "2922839"
  },
  {
    "text": "U1 they didn't make any changes but in U13 they added another dozen uh packages",
    "start": "2922839",
    "end": "2927880"
  },
  {
    "text": "to that restriction list and you see you know uh in the example of the untrusted poty reference Comm Sun uh web pane at",
    "start": "2927880",
    "end": "2935119"
  },
  {
    "text": "the bottom there they added that and it effectively um mitigated that vulnerability uh in in the in the Java",
    "start": "2935119",
    "end": "2942400"
  },
  {
    "text": "FX component if you look at u5 though it's interesting because they actually remove a set of packages and add another",
    "start": "2942400",
    "end": "2949000"
  },
  {
    "text": "set of packages but what they're actually doing is they're removing a lower level package and uh adding a",
    "start": "2949000",
    "end": "2954559"
  },
  {
    "text": "higher level package to further reduce the attack surface of the application in u21 they made a lot of modifications and",
    "start": "2954559",
    "end": "2962440"
  },
  {
    "text": "in uh in u25 they added a couple more um so you can see in U2 21 you know they",
    "start": "2962440",
    "end": "2967799"
  },
  {
    "text": "add they they removed glass fish. external and added the glassfish package so further reducing the attack surface",
    "start": "2967799",
    "end": "2974400"
  },
  {
    "text": "um the interesting thing about watching the modifications to the Restriction lists is that as as a person who's doing",
    "start": "2974400",
    "end": "2980240"
  },
  {
    "text": "one day patch analysis you know that those are pro there are probably vulnerabilities in there so you should go look at those as they be as they're",
    "start": "2980240",
    "end": "2986480"
  },
  {
    "text": "added um you can also use the mapping that we've showed earlier to kind of get an idea of the type of vulnerability you're going to find in those specific",
    "start": "2986480",
    "end": "2992920"
  },
  {
    "text": "packages that are being restricted um so you can see here in this is uh jdk7",
    "start": "2992920",
    "end": "2999799"
  },
  {
    "text": "u25 there uh there was 43 packages that have been added to this restriction list",
    "start": "2999799",
    "end": "3005480"
  },
  {
    "text": "and in u9 there was 12 so there's been quite a bit of movement in the restriction list you see a lot of C sun",
    "start": "3005480",
    "end": "3011319"
  },
  {
    "text": "or Apache packages so it's almost an expectation that in a future release they'll they'll put a higher package in",
    "start": "3011319",
    "end": "3017119"
  },
  {
    "text": "there and further reduce the attack surface so in conclusion oracles",
    "start": "3017119",
    "end": "3022280"
  },
  {
    "start": "3021000",
    "end": "3021000"
  },
  {
    "text": "weathered quite the storm over the last 3 years especially within the last year they've seen a large number of vulnerability disclosures occur 50 plus",
    "start": "3022280",
    "end": "3030079"
  },
  {
    "text": "new zdi submissions have happened over the last three quarters that have been submitted to them adversaries are",
    "start": "3030079",
    "end": "3035960"
  },
  {
    "text": "leveraging the zero day vulnerabilities and we've seen the largest Patches from Oracle for Java uh there is a focus in",
    "start": "3035960",
    "end": "3042119"
  },
  {
    "text": "the research community on the sandbox bypass issue uh with unsafe reflection being the most prolific but type",
    "start": "3042119",
    "end": "3047720"
  },
  {
    "text": "confusion being the most utilized in the landscape and the 2D component being the",
    "start": "3047720",
    "end": "3053200"
  },
  {
    "text": "one that produces the most severe vulnerabilities according to the CVS but yet is not utilized very often in",
    "start": "3053200",
    "end": "3059040"
  },
  {
    "text": "the landscape so whether that is a how you want to correctly score it due the CVSs I think there's other talks at this",
    "start": "3059040",
    "end": "3064359"
  },
  {
    "text": "conference about how CVS scoring is used but uh it's just an interesting observation uh process improvements by",
    "start": "3064359",
    "end": "3071280"
  },
  {
    "text": "Oracle they have made quite a few process improvements they're making commitments and changing their attack surface of java based off of the",
    "start": "3071280",
    "end": "3077240"
  },
  {
    "text": "restriction list that you just saw and uh and we hope to see more of that we'd like to thank you for coming to this",
    "start": "3077240",
    "end": "3084640"
  },
  {
    "text": "presentation we'd like to thank the zdi researchers whove submitted Java vulnerabilities over the last 3 years uh",
    "start": "3084640",
    "end": "3089799"
  },
  {
    "text": "we couldn't have done this presentation without you guys uh if you have a job of zero day that you're sitting on and you want to get make extra legal money uh",
    "start": "3089799",
    "end": "3097599"
  },
  {
    "text": "off of it you can submit it to the zero day initiative we will pay you handsomely and handle all the",
    "start": "3097599",
    "end": "3102760"
  },
  {
    "text": "responsible disclosure for you at zero day initiative.com we also want to thank reversing labs and security Explorations",
    "start": "3102760",
    "end": "3109720"
  },
  {
    "text": "for helping us with the supporting material that helped us validate some of the assumptions we had in the product uh",
    "start": "3109720",
    "end": "3116240"
  },
  {
    "text": "early in the research uh thanks and good luck bug hunting",
    "start": "3116240",
    "end": "3122359"
  },
  {
    "start": "3118000",
    "end": "3118000"
  },
  {
    "text": "[Applause]",
    "start": "3125570",
    "end": "3127979"
  }
]