[
  {
    "start": "0",
    "end": "76000"
  },
  {
    "text": "[Music] foreign",
    "start": "1730",
    "end": "6720"
  },
  {
    "text": "Security in this talk I will present my research about the vulnerabilities",
    "start": "11840",
    "end": "17699"
  },
  {
    "text": "related to the five describers I will discuss how to find them fix them and",
    "start": "17699",
    "end": "24480"
  },
  {
    "text": "some exploit methods are also included in the slides and here are some introductions about me",
    "start": "24480",
    "end": "31920"
  },
  {
    "text": "I am interested in Android Linux accounting and exploit I found over 200",
    "start": "31920",
    "end": "38700"
  },
  {
    "text": "vulnerabilities in the last two years and I am also a speaker of blackhead Asia this year",
    "start": "38700",
    "end": "45239"
  },
  {
    "text": "foreign of my talk first of all I will give some",
    "start": "45239",
    "end": "52800"
  },
  {
    "text": "background on what a file describer is and why I do research about it after",
    "start": "52800",
    "end": "58680"
  },
  {
    "text": "that I will dive into the issues in the FD export and FD import operations",
    "start": "58680",
    "end": "64500"
  },
  {
    "text": "separately At Last I will give a summary and discuss the future work",
    "start": "64500",
    "end": "70860"
  },
  {
    "text": "so let's have a look at what a file descriptor is",
    "start": "70860",
    "end": "76080"
  },
  {
    "start": "76000",
    "end": "76000"
  },
  {
    "text": "we all know that everything is a file in Linux so file descriptors are almost",
    "start": "76080",
    "end": "81240"
  },
  {
    "text": "everywhere in Linux a file descriptor is an integer that identifies an open file",
    "start": "81240",
    "end": "88500"
  },
  {
    "text": "in a process there could be many file describers in the process and the value of A5",
    "start": "88500",
    "end": "94920"
  },
  {
    "text": "descriptor could be 0 1 2 and so on all the threads in the process can",
    "start": "94920",
    "end": "101460"
  },
  {
    "text": "operate the FD through this course like read write and so on normally every file",
    "start": "101460",
    "end": "108180"
  },
  {
    "text": "described is associated with a fire object in kernel space",
    "start": "108180",
    "end": "113280"
  },
  {
    "text": "when we operate an FD in user space the associated file object will be operated",
    "start": "113280",
    "end": "120240"
  },
  {
    "text": "accordingly in kernel space to record record the mapping between the",
    "start": "120240",
    "end": "129300"
  },
  {
    "text": "FD and the the file object and FD array is created in each process",
    "start": "129300",
    "end": "135959"
  },
  {
    "text": "the FD array is an array of file object pointers and the index of FD array is FD so we",
    "start": "135959",
    "end": "144720"
  },
  {
    "text": "can use it easily know which file object is associated with a specific FD",
    "start": "144720",
    "end": "152840"
  },
  {
    "text": "kernel needs to handle the translation between fire object and FD frequently on",
    "start": "154080",
    "end": "161040"
  },
  {
    "text": "the one hand kernel needs to export a file object as NFD to user process so",
    "start": "161040",
    "end": "167700"
  },
  {
    "text": "the Euro process can operate the FD for read or write the translation from file",
    "start": "167700",
    "end": "175140"
  },
  {
    "text": "object to FD is finished through the FDX Port operation",
    "start": "175140",
    "end": "180840"
  },
  {
    "text": "on the other hand kernel needs to import import the FD to find the associated",
    "start": "180840",
    "end": "187319"
  },
  {
    "text": "file object for further operations in this course the translation from FD to",
    "start": "187319",
    "end": "193500"
  },
  {
    "text": "file object is finished through the FD import operation",
    "start": "193500",
    "end": "199019"
  },
  {
    "text": "the FDX port and import operations are very common and basic operations in",
    "start": "199019",
    "end": "204840"
  },
  {
    "text": "kernel so let's have a look at the FDX post operation first",
    "start": "204840",
    "end": "212120"
  },
  {
    "text": "the FD export operation in kernel is divided into three steps for example",
    "start": "212120",
    "end": "218760"
  },
  {
    "text": "here is a file object X and we want to export it as NFD",
    "start": "218760",
    "end": "227879"
  },
  {
    "text": "the first step is to get an unused FD which is X",
    "start": "227879",
    "end": "233840"
  },
  {
    "text": "second step is to set up the FD array to make sure the element of FD array",
    "start": "234299",
    "end": "240120"
  },
  {
    "text": "indexed by the FD point to the file object",
    "start": "240120",
    "end": "246200"
  },
  {
    "text": "the last step is to pass the FD to user process",
    "start": "246239",
    "end": "251400"
  },
  {
    "text": "after these three step steps the FD export operation is finished and the",
    "start": "251400",
    "end": "257519"
  },
  {
    "text": "user process can operate the FD for reading or writing",
    "start": "257519",
    "end": "263419"
  },
  {
    "text": "the FD import operation in kernel is divided into two steps for example here",
    "start": "263639",
    "end": "270360"
  },
  {
    "text": "is NFD which is X and we want to import it",
    "start": "270360",
    "end": "275940"
  },
  {
    "text": "the first step is to look up the FD array to get the file object",
    "start": "275940",
    "end": "281639"
  },
  {
    "text": "the second second step is to acquire file reference after these two steps the FD import",
    "start": "281639",
    "end": "288780"
  },
  {
    "text": "operation is finished and kernel can operate the file object",
    "start": "288780",
    "end": "294919"
  },
  {
    "text": "let's make a summary the FD export operation is down in Three Steps step",
    "start": "296699",
    "end": "303000"
  },
  {
    "text": "one get an unused FD step to set up set up the fdre step 3 pass the FD to user",
    "start": "303000",
    "end": "311100"
  },
  {
    "text": "space and the FD import operation is down in Two Steps step one look up the",
    "start": "311100",
    "end": "317759"
  },
  {
    "text": "FD array to find the file object step two acquire file reference",
    "start": "317759",
    "end": "323280"
  },
  {
    "text": "thank you we also need to know another FD related operation which is close FD when we",
    "start": "323280",
    "end": "330660"
  },
  {
    "text": "close NFD the element of FD array indexed by the FD will be set to now",
    "start": "330660",
    "end": "338039"
  },
  {
    "text": "and then the reference of the associated file object will be dropped and the FD",
    "start": "338039",
    "end": "344880"
  },
  {
    "text": "will become only used after understanding some basic knowledge",
    "start": "344880",
    "end": "351840"
  },
  {
    "text": "of file describers let's talk about why I research file describers",
    "start": "351840",
    "end": "357419"
  },
  {
    "text": "uh they research is inspired by an interesting vulnerability I found last",
    "start": "357419",
    "end": "362580"
  },
  {
    "text": "year which is the severe 2021 0929",
    "start": "362580",
    "end": "368340"
  },
  {
    "text": "as you can see that thread B uh creates a DME buff FD with ion",
    "start": "368340",
    "end": "374820"
  },
  {
    "text": "uh this DME buff FD is passed to Kernel space and then in thread a kernel impose",
    "start": "374820",
    "end": "382080"
  },
  {
    "text": "the game above FD and create an ion handle object after that the memory buffer represented",
    "start": "382080",
    "end": "389520"
  },
  {
    "text": "by the i o handle gets mapped into kernel space as kernel virtual drawer",
    "start": "389520",
    "end": "395460"
  },
  {
    "text": "uh Connor would reference the kernel virtual draw later but in thread B it",
    "start": "395460",
    "end": "401160"
  },
  {
    "text": "can trigger the on map of of the kernel virtual drawer as a result uh use after",
    "start": "401160",
    "end": "407280"
  },
  {
    "text": "3 will happen in this risk condition",
    "start": "407280",
    "end": "411560"
  },
  {
    "text": "the CV 2021 0929 gave me a really",
    "start": "413039",
    "end": "418139"
  },
  {
    "text": "important hint a file describe tool can be shared between kernel space and user",
    "start": "418139",
    "end": "423840"
  },
  {
    "text": "space as a result risk conditions can happen between kernel and user operations",
    "start": "423840",
    "end": "430440"
  },
  {
    "text": "and here are two kinds of risk conditions I can think of",
    "start": "430440",
    "end": "436100"
  },
  {
    "text": "risk Edition one is like thread a is operating in the file object in kernel",
    "start": "436860",
    "end": "442620"
  },
  {
    "text": "space while thread B is operating the FD in user space",
    "start": "442620",
    "end": "448860"
  },
  {
    "text": "and the risk condition 2 is like thread a is operating the FD in kernel space",
    "start": "448860",
    "end": "454380"
  },
  {
    "text": "while thread B is also operating the FD in user space",
    "start": "454380",
    "end": "460819"
  },
  {
    "text": "and I I started to think that maybe there are more issues in these risk",
    "start": "461580",
    "end": "467280"
  },
  {
    "text": "conditions and I should try to construct such risk conditions in the FD export",
    "start": "467280",
    "end": "473699"
  },
  {
    "text": "and import operations so um let's dive into the issues in the",
    "start": "473699",
    "end": "480660"
  },
  {
    "text": "FD export operation first",
    "start": "480660",
    "end": "484759"
  },
  {
    "text": "I will talk about the four parts in this section including the scenario scenario",
    "start": "485759",
    "end": "491280"
  },
  {
    "text": "of FD export operation uh use after free course by risk condition and how to find",
    "start": "491280",
    "end": "497699"
  },
  {
    "text": "and fix the issues first first let's have a look at the",
    "start": "497699",
    "end": "504020"
  },
  {
    "text": "comments common scenario of FD export operation usually user process would",
    "start": "504020",
    "end": "510539"
  },
  {
    "text": "request a certain resource by opening a file and kernel we will create a file",
    "start": "510539",
    "end": "517200"
  },
  {
    "text": "object representing the resource this file object would be exported as NFD",
    "start": "517200",
    "end": "524159"
  },
  {
    "text": "through the F FDX Port operation I have mentioned after the user process knows the value",
    "start": "524159",
    "end": "531300"
  },
  {
    "text": "ffd it will perform operations on FD through this course",
    "start": "531300",
    "end": "537860"
  },
  {
    "text": "here is a typical example as you can see the implementation of Cisco open is the",
    "start": "539279",
    "end": "546899"
  },
  {
    "start": "540000",
    "end": "540000"
  },
  {
    "text": "scenario we are talking about a file object is created and this file object",
    "start": "546899",
    "end": "552420"
  },
  {
    "text": "gets exported as NFD to user process through the FDA exporter operation",
    "start": "552420",
    "end": "560279"
  },
  {
    "text": "foreign export operation is executed",
    "start": "560279",
    "end": "566279"
  },
  {
    "text": "sequentially which is still far from the risk conditions we want to see so let's",
    "start": "566279",
    "end": "572279"
  },
  {
    "text": "review the scenario to make sure we are not missing something",
    "start": "572279",
    "end": "577560"
  },
  {
    "text": "we know the FD export operation is down in three steps",
    "start": "577560",
    "end": "583740"
  },
  {
    "text": "actually we already have the ability to perform the operations on FD right after",
    "start": "583740",
    "end": "589920"
  },
  {
    "text": "step two because the FD has been associated with a valid file object in",
    "start": "589920",
    "end": "596100"
  },
  {
    "text": "step two however we can only perform operations on FD after step three",
    "start": "596100",
    "end": "601980"
  },
  {
    "text": "because we only know the value of FD after step three",
    "start": "601980",
    "end": "607260"
  },
  {
    "text": "but hold on do we have to wait for FD to be passed from kernel to know the value",
    "start": "607260",
    "end": "613019"
  },
  {
    "text": "of it the answer is no because FDA is predictable we can know",
    "start": "613019",
    "end": "620399"
  },
  {
    "text": "the value of NFD in advance first FDA is assigned in ascending order for a new",
    "start": "620399",
    "end": "627660"
  },
  {
    "text": "process fd012 are usually occupied three will be",
    "start": "627660",
    "end": "633300"
  },
  {
    "text": "the next FD exported from kernel foreign",
    "start": "633300",
    "end": "640339"
  },
  {
    "text": "five six and so on second FD will be reused after close as you can see uh the",
    "start": "641240",
    "end": "648060"
  },
  {
    "text": "in this example the fd2 is equal to FD",
    "start": "648060",
    "end": "653720"
  },
  {
    "text": "ever since we can know the value of fde of that in advance we can change the regular scenario of FDX Port operation",
    "start": "654300",
    "end": "662160"
  },
  {
    "text": "to a parallel scenario Suppose there are two threads uh thread thread a performs",
    "start": "662160",
    "end": "670019"
  },
  {
    "text": "the three steps of the FD export operation type B performs the operations",
    "start": "670019",
    "end": "675360"
  },
  {
    "text": "on the FD right after step two we can see a Time window between step",
    "start": "675360",
    "end": "683040"
  },
  {
    "text": "two and step 3 of FD export operation so if there are some operations on the",
    "start": "683040",
    "end": "690839"
  },
  {
    "text": "fire object during this time window we will succeed in constructing the case",
    "start": "690839",
    "end": "697200"
  },
  {
    "text": "of risk condition one as you can see that thread a is",
    "start": "697200",
    "end": "702360"
  },
  {
    "start": "701000",
    "end": "701000"
  },
  {
    "text": "performing the operations operations on the file object and thread B is performing the operations on the FD",
    "start": "702360",
    "end": "711980"
  },
  {
    "text": "in this scenario we can construct a potential use of the free case as you",
    "start": "711980",
    "end": "717660"
  },
  {
    "text": "can see that thread B can close the FD right after thread thread a finishing",
    "start": "717660",
    "end": "723060"
  },
  {
    "text": "step two the closed FD will trigger the release of file object and release the",
    "start": "723060",
    "end": "728339"
  },
  {
    "text": "objects after that use after three would happen when thread a operates the file",
    "start": "728339",
    "end": "733920"
  },
  {
    "text": "object however this use after free scenario is only based on our assumptions until now",
    "start": "733920",
    "end": "741660"
  },
  {
    "text": "now we we still don't know if there are any actual cases in real world",
    "start": "741660",
    "end": "748279"
  },
  {
    "text": "so I started to search for such issues in real world in order to search for the",
    "start": "748279",
    "end": "754860"
  },
  {
    "text": "issues thoroughly I looked for all kinds of Kernel apis which performed the step",
    "start": "754860",
    "end": "761160"
  },
  {
    "text": "two of FDA export operation here are the apis I found",
    "start": "761160",
    "end": "766260"
  },
  {
    "text": "FD install is the most common API we can say in kernel",
    "start": "766260",
    "end": "771660"
  },
  {
    "text": "and there are many other apis that wrap the FD in store",
    "start": "771660",
    "end": "777680"
  },
  {
    "text": "based on these Econo apis I searched for the bug pattern in some vendors kernels",
    "start": "778139",
    "end": "783360"
  },
  {
    "text": "and I quickly found two typical codes of debug pattern in the kernel of two",
    "start": "783360",
    "end": "788820"
  },
  {
    "text": "vendors as you can see that the file all related objects gets gets referenced",
    "start": "788820",
    "end": "795180"
  },
  {
    "text": "after the step two of FDX Port operation and this just proves that our assumption",
    "start": "795180",
    "end": "802139"
  },
  {
    "text": "is correct so I spent more time searching for the",
    "start": "802139",
    "end": "807839"
  },
  {
    "text": "bug pattern in many kernels and finally I found I found quite a few issues of debug pattern it turns out the bug",
    "start": "807839",
    "end": "814980"
  },
  {
    "text": "pattern exists in both vendors kernels and Linux mainstream there are a few",
    "start": "814980",
    "end": "820980"
  },
  {
    "text": "interesting facts we can see from these vulnerabilities first using DME buff is more likely to",
    "start": "820980",
    "end": "829260"
  },
  {
    "text": "introduce such issues this is this is reasonable because the dma buff",
    "start": "829260",
    "end": "834839"
  },
  {
    "text": "component is designed for sharing buffers across across multiple device",
    "start": "834839",
    "end": "840300"
  },
  {
    "text": "drivers and subsystems so it exports the dma buff objects as as the ft to user",
    "start": "840300",
    "end": "848399"
  },
  {
    "text": "space for the sharing purpose but unfortunately many drivers are not",
    "start": "848399",
    "end": "854100"
  },
  {
    "text": "taking good care of the FDX Port operation resulting in use after free",
    "start": "854100",
    "end": "860100"
  },
  {
    "text": "second I found the GPU driver say more likely to introduce such issues",
    "start": "860100",
    "end": "867600"
  },
  {
    "text": "so I started to search for the bug pattern in many GPU drivers and finally",
    "start": "867600",
    "end": "873000"
  },
  {
    "text": "I found two more vulnerabilities in the um melee GPU driver",
    "start": "873000",
    "end": "880079"
  },
  {
    "text": "things are getting more interesting because many Android devices you use the",
    "start": "880079",
    "end": "885600"
  },
  {
    "text": "melee driver and the meta driver can be accessed by untrust apps on Android",
    "start": "885600",
    "end": "894740"
  },
  {
    "text": "uh so let's have a look at the vulnerability Savvy 2022",
    "start": "895160",
    "end": "901399"
  },
  {
    "text": "28349 which is an end date I found in melee driver and it affects some older",
    "start": "901399",
    "end": "908160"
  },
  {
    "text": "version of many driver some Android 10 devices or vendors are still using the",
    "start": "908160",
    "end": "913800"
  },
  {
    "text": "older versions of many driver so they are affected by the vulnerability",
    "start": "913800",
    "end": "919880"
  },
  {
    "text": "the vulnerability cvu 2022 to 28350 is a",
    "start": "919980",
    "end": "926519"
  },
  {
    "text": "real zero day I found a melee driver it existed in a version of melee driver and",
    "start": "926519",
    "end": "932760"
  },
  {
    "text": "some Android 12 devices or vendors are affected for now the vulnerability has",
    "start": "932760",
    "end": "938940"
  },
  {
    "text": "been fixed foreign",
    "start": "938940",
    "end": "943160"
  },
  {
    "text": "exploit of this vulnerability actually before my exploit exploit a no exploited",
    "start": "945199",
    "end": "952019"
  },
  {
    "text": "method has been given by Matthias across from Geo security for a similar",
    "start": "952019",
    "end": "957300"
  },
  {
    "text": "vulnerability with this method we can finish reading or writing privileged",
    "start": "957300",
    "end": "962880"
  },
  {
    "text": "files from unprivileged privileged processes without worrying about",
    "start": "962880",
    "end": "967920"
  },
  {
    "text": "mitigations like kasr Smet or kcfi however this method won't work on",
    "start": "967920",
    "end": "975959"
  },
  {
    "text": "Android because of SC Linux to exploit this vulnerability on the affected",
    "start": "975959",
    "end": "982019"
  },
  {
    "text": "Android device I came up with a new method with which I can succeed in",
    "start": "982019",
    "end": "988500"
  },
  {
    "text": "succeed in writing privileged files from on trusted apps",
    "start": "988500",
    "end": "994440"
  },
  {
    "text": "and here is our poc in in this POC I succeeded in writing a privilege to",
    "start": "994440",
    "end": "1000620"
  },
  {
    "text": "share the library from an on Trust app app because of the limited time the details",
    "start": "1000620",
    "end": "1007459"
  },
  {
    "text": "of the exploit exploits are put in the supplement part of the slides",
    "start": "1007459",
    "end": "1015339"
  },
  {
    "text": "to find the use of free issue caused by the risk condition in the FDA export",
    "start": "1016759",
    "end": "1023360"
  },
  {
    "text": "operation we only need to check if the fire or related objects are referenced",
    "start": "1023360",
    "end": "1029120"
  },
  {
    "text": "after these listed functions this can be done more effectively by tools like code",
    "start": "1029120",
    "end": "1035540"
  },
  {
    "text": "ql there are two fixed methods for such",
    "start": "1035540",
    "end": "1042319"
  },
  {
    "text": "issues the first method method is obvious which is uh don't reference the",
    "start": "1042319",
    "end": "1048380"
  },
  {
    "text": "file or related objects after the step two of FDA export operation in kernel",
    "start": "1048380",
    "end": "1054860"
  },
  {
    "text": "until retain written to user space here is an example which is the part of Cisco",
    "start": "1054860",
    "end": "1061340"
  },
  {
    "text": "open as you can see after the FD is installed the file object is not",
    "start": "1061340",
    "end": "1067280"
  },
  {
    "text": "referenced and FD is returned to user space directly",
    "start": "1067280",
    "end": "1073120"
  },
  {
    "text": "the second method to fix the issue is to reference the file or related objects",
    "start": "1073120",
    "end": "1079220"
  },
  {
    "text": "with log protection and share the lock in the file release function of of FD as",
    "start": "1079220",
    "end": "1086660"
  },
  {
    "text": "you can see that if if we share the same mutex log in the two codes the risk",
    "start": "1086660",
    "end": "1092660"
  },
  {
    "text": "condition can never succeed so the uaf won't happen here is an actual example from vendor s",
    "start": "1092660",
    "end": "1102340"
  },
  {
    "text": "and then let's dive into the issues in the FD importer operation",
    "start": "1104780",
    "end": "1112240"
  },
  {
    "text": "I will talk about four parts in this section including the scenario of FD",
    "start": "1113679",
    "end": "1119240"
  },
  {
    "text": "import operation FD type confusion caused by risk condition and how to fix",
    "start": "1119240",
    "end": "1125720"
  },
  {
    "text": "find and fix the issues",
    "start": "1125720",
    "end": "1129520"
  },
  {
    "text": "let's have a look at the common scenario of FD import operation when user process",
    "start": "1130820",
    "end": "1137240"
  },
  {
    "text": "when user process performs the operation on FD through this course like read",
    "start": "1137240",
    "end": "1142940"
  },
  {
    "text": "write uh the FD will be passed to Kernel space and kernel will get the associated file",
    "start": "1142940",
    "end": "1151039"
  },
  {
    "text": "object through the FD import operation after that kernel will operate the file",
    "start": "1151039",
    "end": "1157100"
  },
  {
    "text": "object to finish the further work here is an example of the scenario which",
    "start": "1157100",
    "end": "1166520"
  },
  {
    "start": "1164000",
    "end": "1164000"
  },
  {
    "text": "is the implementation of Cisco right as you can see that the Ft import",
    "start": "1166520",
    "end": "1172520"
  },
  {
    "text": "operation is performed in the function FD get post and then the file object",
    "start": "1172520",
    "end": "1178760"
  },
  {
    "text": "will be got and passed to VFS rights for further operations",
    "start": "1178760",
    "end": "1185559"
  },
  {
    "text": "but this regular FD import operation is executed sequentially which is still far",
    "start": "1186640",
    "end": "1193160"
  },
  {
    "text": "from the risk conditions we want to see so I started to re search for all kinds",
    "start": "1193160",
    "end": "1199580"
  },
  {
    "text": "of scenarios of FD import operations in kernels and by by referencing all these",
    "start": "1199580",
    "end": "1207500"
  },
  {
    "text": "listed kernel apis for FDA import operation and finally I found some",
    "start": "1207500",
    "end": "1212600"
  },
  {
    "text": "really interesting issues so let's have a look at them",
    "start": "1212600",
    "end": "1218080"
  },
  {
    "start": "1218000",
    "end": "1218000"
  },
  {
    "text": "the first one is Savvy 2022 21772",
    "start": "1218179",
    "end": "1223460"
  },
  {
    "text": "which I found in your vendors kernel as you can see that this function will",
    "start": "1223460",
    "end": "1229100"
  },
  {
    "text": "create a specific team DME buff FD and then it will import the FG to get the",
    "start": "1229100",
    "end": "1235400"
  },
  {
    "text": "dma buff object after that the private field of the game buff object will be referenced as a",
    "start": "1235400",
    "end": "1243559"
  },
  {
    "text": "t-share mem object object for literature use",
    "start": "1243559",
    "end": "1249100"
  },
  {
    "text": "there's three steps in the function are simple normally this is safe in",
    "start": "1249500",
    "end": "1255620"
  },
  {
    "text": "sequential execution but what if there is a risk condition getting involved I",
    "start": "1255620",
    "end": "1261500"
  },
  {
    "text": "found that if we apply the risk condition 2 into this case something",
    "start": "1261500",
    "end": "1266539"
  },
  {
    "text": "interesting would happen",
    "start": "1266539",
    "end": "1269740"
  },
  {
    "text": "here are the details as you can see that thread a will perform the three steps of",
    "start": "1272120",
    "end": "1277820"
  },
  {
    "text": "the function it will create specific dma buff FD in the first step",
    "start": "1277820",
    "end": "1283039"
  },
  {
    "text": "right after this Fred B closed the FD and create a different different game",
    "start": "1283039",
    "end": "1288860"
  },
  {
    "text": "above FD this will make the FD become a totally different one in thread a",
    "start": "1288860",
    "end": "1295100"
  },
  {
    "text": "as a result a win thread a imposed the game buff FD it will get a totally",
    "start": "1295100",
    "end": "1301640"
  },
  {
    "text": "different dma buff object but thread a still treats the private",
    "start": "1301640",
    "end": "1307220"
  },
  {
    "text": "field of the DMV buff as t-share mem object this will cause a type confusion",
    "start": "1307220",
    "end": "1313400"
  },
  {
    "text": "issue and the second issue is like this",
    "start": "1313400",
    "end": "1320120"
  },
  {
    "text": "there is a sync file FD passed from user space and the function imposed the FD",
    "start": "1320120",
    "end": "1327799"
  },
  {
    "text": "for the first time to get the damn fence object it will check the dma fence",
    "start": "1327799",
    "end": "1333260"
  },
  {
    "text": "object to make sure it's valid and then the function Imports the FD for the",
    "start": "1333260",
    "end": "1338780"
  },
  {
    "text": "second time and the private data of a file object is",
    "start": "1338780",
    "end": "1344059"
  },
  {
    "text": "returned as sync file object for little use",
    "start": "1344059",
    "end": "1349179"
  },
  {
    "text": "the fourth step four steps in the function are simple normally this is",
    "start": "1349720",
    "end": "1355340"
  },
  {
    "text": "safe in sequential execution but I found that if we apply the risk condition 2",
    "start": "1355340",
    "end": "1361159"
  },
  {
    "text": "into this case something interesting will happen too",
    "start": "1361159",
    "end": "1366580"
  },
  {
    "text": "here are the the details as you can see that thread a will perform the four",
    "start": "1366620",
    "end": "1371900"
  },
  {
    "text": "steps of the function it will it will import the FD for the first time to get",
    "start": "1371900",
    "end": "1377480"
  },
  {
    "start": "1372000",
    "end": "1372000"
  },
  {
    "text": "the game above fence object it will check the dma fans object to make sure",
    "start": "1377480",
    "end": "1383120"
  },
  {
    "text": "it's valid right after this third B close the FD and create a different FD this will make",
    "start": "1383120",
    "end": "1390740"
  },
  {
    "text": "the FD become a totally different one in thread a as a result when thread a",
    "start": "1390740",
    "end": "1396260"
  },
  {
    "text": "imposed the FD for the second time it will get the totally different file object",
    "start": "1396260",
    "end": "1401720"
  },
  {
    "text": "but thread a still treats the private data of fire fire object as sync file object",
    "start": "1401720",
    "end": "1410600"
  },
  {
    "text": "this will cause a type confusion issue too",
    "start": "1410600",
    "end": "1415299"
  },
  {
    "text": "these two special issues represent two types of the issues in the scenario of",
    "start": "1416260",
    "end": "1422360"
  },
  {
    "text": "FD import operation the first type is FD time of create time",
    "start": "1422360",
    "end": "1427640"
  },
  {
    "text": "of import the bug pattern of the type is like this the first step is to create a specific",
    "start": "1427640",
    "end": "1434960"
  },
  {
    "text": "FD the second step is to import the FD to get a specific file object at last",
    "start": "1434960",
    "end": "1442360"
  },
  {
    "text": "the reference the private data or file file object or other related private",
    "start": "1442360",
    "end": "1448580"
  },
  {
    "text": "objects because there is a Type window the FD can be recreated",
    "start": "1448580",
    "end": "1456500"
  },
  {
    "text": "the second type is the fdw import ant of the type is like this kernel",
    "start": "1456500",
    "end": "1464480"
  },
  {
    "text": "Imports the FD for the first time to get a file object and this this file",
    "start": "1464480",
    "end": "1470539"
  },
  {
    "text": "object gets processed for ProPress a after that kernel Imports DFD again to",
    "start": "1470539",
    "end": "1476720"
  },
  {
    "text": "get a file object and this file object gets processed for purpose B because",
    "start": "1476720",
    "end": "1483679"
  },
  {
    "text": "there is a Time window between the two type 2 ft import operations",
    "start": "1483679",
    "end": "1488720"
  },
  {
    "text": "the FD can be recreated both both types of issues might cause FD type confusion",
    "start": "1488720",
    "end": "1498158"
  },
  {
    "text": "however there are still two questions that need to be answered there are more",
    "start": "1501080",
    "end": "1507020"
  },
  {
    "text": "issues of these types and how to find these issues more effectively actually",
    "start": "1507020",
    "end": "1513200"
  },
  {
    "text": "it could be difficult to find such issues by fuzzing because sometimes the",
    "start": "1513200",
    "end": "1518659"
  },
  {
    "text": "budget code is located in kernel the user process can barely notice it",
    "start": "1518659",
    "end": "1524059"
  },
  {
    "text": "and also the risk risk window could be tiny so I'm thinking about that maybe we",
    "start": "1524059",
    "end": "1530360"
  },
  {
    "text": "can detect such issues at runtime by some detecting code",
    "start": "1530360",
    "end": "1536679"
  },
  {
    "text": "here is the regular life cycle of an FD the original state of NFD is FD unused",
    "start": "1538400",
    "end": "1546559"
  },
  {
    "text": "as you can see and vfd will become FD created when the",
    "start": "1546559",
    "end": "1553220"
  },
  {
    "text": "FD gets associated with a file object through FD install when the FD gets returned to user space",
    "start": "1553220",
    "end": "1560779"
  },
  {
    "text": "the state will change from FD created to FTE user",
    "start": "1560779",
    "end": "1567200"
  },
  {
    "text": "when the user press user process operates the FD through a Cisco the FD",
    "start": "1567200",
    "end": "1573200"
  },
  {
    "text": "will will be imported by kernel and the FD state will change from fde user to",
    "start": "1573200",
    "end": "1580279"
  },
  {
    "text": "FDA first to use and then when the Cisco Returns the",
    "start": "1580279",
    "end": "1585559"
  },
  {
    "text": "state will change from FD first use to fde user",
    "start": "1585559",
    "end": "1591580"
  },
  {
    "start": "1592000",
    "end": "1592000"
  },
  {
    "text": "the two types of of issues in the scenario scenario of FD imported",
    "start": "1592059",
    "end": "1597980"
  },
  {
    "text": "operation can be located clearly in the life cycle of NFD the FD time of create",
    "start": "1597980",
    "end": "1606380"
  },
  {
    "text": "time of import issue might happen when the FD State changed from FD created to",
    "start": "1606380",
    "end": "1613279"
  },
  {
    "text": "Ft first to use and the fdw import issue might happen when the fds did change",
    "start": "1613279",
    "end": "1619460"
  },
  {
    "text": "from FD first used to FD Second Use actually the implementation of",
    "start": "1619460",
    "end": "1627500"
  },
  {
    "text": "of the detecting code is very simple we only need to add some code to a few",
    "start": "1627500",
    "end": "1633919"
  },
  {
    "text": "kernel apis which such as the FD install fd-get and so on and I have put the",
    "start": "1633919",
    "end": "1640460"
  },
  {
    "text": "detecting code at GitHub here are the issues I found by both the",
    "start": "1640460",
    "end": "1647840"
  },
  {
    "text": "detect tool and code outdating it seems that there are quite a few issues in the",
    "start": "1647840",
    "end": "1654260"
  },
  {
    "text": "scenario of FD import operations in vendors kernels",
    "start": "1654260",
    "end": "1659320"
  },
  {
    "text": "the fix for FD time of create time or important import is obvious kernel",
    "start": "1661100",
    "end": "1668059"
  },
  {
    "text": "should create a specific file object for use directly instead of creating NFD and",
    "start": "1668059",
    "end": "1674659"
  },
  {
    "text": "importing it the fix for Ft double import is also obvious kernel should import FD only",
    "start": "1674659",
    "end": "1683120"
  },
  {
    "text": "once to get the file object and all the following code should process this file",
    "start": "1683120",
    "end": "1689960"
  },
  {
    "text": "object directly importing NFD many times is never a good idea",
    "start": "1689960",
    "end": "1696880"
  },
  {
    "text": "for now we have talked about the issues in the FD export and import operations",
    "start": "1697419",
    "end": "1703820"
  },
  {
    "text": "let's make conclusion and talk about the future work in this talk I discussed a typical use",
    "start": "1703820",
    "end": "1710779"
  },
  {
    "text": "of free issue caused by risk condition in the FDX for operation in kernel so",
    "start": "1710779",
    "end": "1717620"
  },
  {
    "text": "there is a really obvious question we may need to ask ourselves",
    "start": "1717620",
    "end": "1723320"
  },
  {
    "text": "are there other similar kinds of resources just like the file describer",
    "start": "1723320",
    "end": "1729559"
  },
  {
    "text": "which is predictable and with export operations in kernel",
    "start": "1729559",
    "end": "1735620"
  },
  {
    "text": "the answer is yes I found that IDR is a really typical",
    "start": "1735620",
    "end": "1741200"
  },
  {
    "text": "resource of this kind it's predictable and x and Export operations can be",
    "start": "1741200",
    "end": "1747860"
  },
  {
    "text": "performed on it in kernel and is widely used in kernel drivers as",
    "start": "1747860",
    "end": "1753799"
  },
  {
    "text": "handle ID session ID or object ID and so on so here comes the future work",
    "start": "1753799",
    "end": "1760700"
  },
  {
    "text": "we can try to find a similar use after three issues in IDR or others",
    "start": "1760700",
    "end": "1766720"
  },
  {
    "text": "self-implementing indexes I also discussed the Ft type confusion",
    "start": "1766720",
    "end": "1773840"
  },
  {
    "text": "issues caused by risk condition in the FD import operation there is also a really obvious question",
    "start": "1773840",
    "end": "1780980"
  },
  {
    "text": "we may need to ask ourselves are there other similar kinds of",
    "start": "1780980",
    "end": "1786140"
  },
  {
    "text": "resources just like the file described on which similar import operations can be",
    "start": "1786140",
    "end": "1792440"
  },
  {
    "text": "performed in kernel the answer is yes there are quite a few resources on which",
    "start": "1792440",
    "end": "1799760"
  },
  {
    "text": "we can perform similar import operations in kernel such as IDR process PID user",
    "start": "1799760",
    "end": "1808100"
  },
  {
    "text": "virtual address and so on so we can try to find a similar issues in these",
    "start": "1808100",
    "end": "1813380"
  },
  {
    "text": "resources and thanks to more important",
    "start": "1813380",
    "end": "1821260"
  },
  {
    "text": "for helping me with my slides they made great suggestions thanks a lot",
    "start": "1826360",
    "end": "1834340"
  },
  {
    "text": "actually I really want to talk about my exploit method for CV 2022 to",
    "start": "1835220",
    "end": "1843039"
  },
  {
    "text": "28350 but due to the time constraint I put all the exploited details in the",
    "start": "1843039",
    "end": "1849980"
  },
  {
    "text": "supplement supplement supplement part and also I have proved that the issues I",
    "start": "1849980",
    "end": "1856820"
  },
  {
    "text": "researched about are exported exploitable even if the risk window is",
    "start": "1856820",
    "end": "1863059"
  },
  {
    "text": "really small details of turning these issues to memory corruption for for exploitation",
    "start": "1863059",
    "end": "1870380"
  },
  {
    "text": "are also put in the supplement part read them if you are interested",
    "start": "1870380",
    "end": "1877460"
  },
  {
    "text": "thanks [Music]",
    "start": "1877460",
    "end": "1882880"
  },
  {
    "text": "[Music]",
    "start": "1886740",
    "end": "1889829"
  }
]