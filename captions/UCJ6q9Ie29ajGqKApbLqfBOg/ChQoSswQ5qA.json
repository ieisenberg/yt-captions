[
  {
    "start": "0",
    "end": "300000"
  },
  {
    "text": "[Music]",
    "start": "1180",
    "end": "14730"
  },
  {
    "text": "hi everybody welcome to our session on how embedded tcpap stacks with critical vulnerabilities i'm daniel de santos a",
    "start": "15839",
    "end": "21439"
  },
  {
    "text": "research manager for scout and today i'm joined by stanislav de chavsky a security researcher at forscap",
    "start": "21439",
    "end": "27119"
  },
  {
    "text": "we would also like to thank our co-authors jos vazos and amin henry for the work and we would like to say",
    "start": "27119",
    "end": "33120"
  },
  {
    "text": "that at first gout research labs we analyze the security implications of hyper connectivity and itot convergence",
    "start": "33120",
    "end": "38879"
  },
  {
    "text": "and other trends such as iot emergence in enterprise networks uh today we'll be talking about project",
    "start": "38879",
    "end": "45280"
  },
  {
    "text": "memoria which is a large-scale study of uh tcp stack vulnerabilities",
    "start": "45280",
    "end": "50399"
  },
  {
    "text": "we'll then drill down into amnesia 33 which is our first study published under",
    "start": "50399",
    "end": "55760"
  },
  {
    "text": "project memoria that deals with vulnerabilities and open source ccpip stacks we'll do an analysis of these vulnerabilities talk about the",
    "start": "55760",
    "end": "61920"
  },
  {
    "text": "consequences of these vulnerabilities and then finally discuss a little bit what comes next in our research",
    "start": "61920",
    "end": "67920"
  },
  {
    "text": "so let's talk about project memoria so the goal of project memory is to have a large study of embedded tcp stack",
    "start": "67920",
    "end": "74240"
  },
  {
    "text": "security we want to understand why they're vulnerable how they're vulnerable and what we can do about it the idea is to have a quantitative and",
    "start": "74240",
    "end": "80320"
  },
  {
    "text": "qualitative study so that we not only look at security vulnerabilities across many stacks but we drill down",
    "start": "80320",
    "end": "86080"
  },
  {
    "text": "into components that are more prone to vulnerabilities to understand also the exploitability and other uh",
    "start": "86080",
    "end": "92560"
  },
  {
    "text": "nuances of vulnerabilities in tcp stacks this project will be done by first-cloud research labs and other collaborators",
    "start": "92560",
    "end": "100079"
  },
  {
    "text": "and we would like to say that the motivation behind uh this project is that we used to see",
    "start": "100079",
    "end": "106479"
  },
  {
    "text": "several vulnerabilities in tcp stack especially in general purpose tcp stacks in the late 90s and early 2000s you can",
    "start": "106479",
    "end": "112880"
  },
  {
    "text": "think of things like the ping of death wing nuke vulnerabilities affecting windows linux and so on",
    "start": "112880",
    "end": "119600"
  },
  {
    "text": "but nowadays we see this rise of embedded devices and the iot world and",
    "start": "119600",
    "end": "127040"
  },
  {
    "text": "just scaling up to billions of devices nowadays and we see that um tcpap stack",
    "start": "127040",
    "end": "133840"
  },
  {
    "text": "vulnerabilities are making a resurgence because they are used across many of these devices we saw in the past two years uh research",
    "start": "133840",
    "end": "140560"
  },
  {
    "text": "such as ripple 20 and urgent 11 that highlighted this risk and to start talking a little bit about",
    "start": "140560",
    "end": "147200"
  },
  {
    "text": "this kind of risk uh we need to understand a bit about the embedded systems supply chain right so",
    "start": "147200",
    "end": "152800"
  },
  {
    "text": "embedded devices and iot devices have several hardware and software",
    "start": "152800",
    "end": "158480"
  },
  {
    "text": "components that are basically mixed produced by different vendors and mixed and matched to form a device that ends up",
    "start": "158480",
    "end": "164959"
  },
  {
    "text": "in in an enterprise network and we have components such as microcontroller units",
    "start": "164959",
    "end": "170160"
  },
  {
    "text": "systems on a chip we have connectivity components we have applications such as library demons platforms and so on",
    "start": "170160",
    "end": "175760"
  },
  {
    "text": "and at several steps in this supply chain there might be a tcpap stack",
    "start": "175760",
    "end": "180959"
  },
  {
    "text": "that is that is introduced in a device right so one of the reasons why",
    "start": "180959",
    "end": "187280"
  },
  {
    "text": "looking into tcp stacks is interesting is because of this uh need to understand",
    "start": "187280",
    "end": "193760"
  },
  {
    "text": "where they are uh in a device and how a vulnerability in one tcpap stack uh high up in the",
    "start": "193760",
    "end": "201120"
  },
  {
    "text": "device in a supply chain ends up trickling down into devices but there are other reasons why we want to",
    "start": "201120",
    "end": "207680"
  },
  {
    "text": "target protocol stack so i already mentioned the wide deployment right an effective vulnerability is trickled down",
    "start": "207680",
    "end": "212799"
  },
  {
    "text": "to many vendors but also the fact that there is an absence of a software bill of materials so that vulnerabilities",
    "start": "212799",
    "end": "217920"
  },
  {
    "text": "that are fixed in a course stack might just never make it to all uh and firmer because of not just",
    "start": "217920",
    "end": "224879"
  },
  {
    "text": "the supply chain being long but also sometimes being obscured um there is in in tcp stacks there's",
    "start": "224879",
    "end": "232319"
  },
  {
    "text": "always a good chance of finding exploitable bugs because they tend to be written in low level code in",
    "start": "232319",
    "end": "238239"
  },
  {
    "text": "in memory safe languages such as cnc plus plus they are often uh old code bases that were",
    "start": "238239",
    "end": "244879"
  },
  {
    "text": "written several decades ago and they involve complex parsing and state machines and so on which are",
    "start": "244879",
    "end": "251360"
  },
  {
    "text": "difficult to get right um not just finding exploitable bugs is is is easier but it's interesting that",
    "start": "251360",
    "end": "258079"
  },
  {
    "text": "they are also uh often externally exposed components uh they often run as privileged and low",
    "start": "258079",
    "end": "264400"
  },
  {
    "text": "level components uh when there is an operating system sometimes there isn't even an operating system and the stack",
    "start": "264400",
    "end": "270320"
  },
  {
    "text": "runs on a flat memory model so basically dispatching issues plus the long life spans",
    "start": "270320",
    "end": "276160"
  },
  {
    "text": "of uh the devices that are affected by vulnerabilities kinds of vulnerabilities and the broad trickle down that we",
    "start": "276160",
    "end": "281680"
  },
  {
    "text": "mentioned above lead to a high vulnerability lifespan and difficulty in eradicating these vulnerabilities which",
    "start": "281680",
    "end": "288160"
  },
  {
    "text": "ultimately ultimately translate to a high attacker return on investment and now to",
    "start": "288160",
    "end": "294720"
  },
  {
    "text": "drill down into the details of amnesia 33 i would like to give the floor to stanislav",
    "start": "294720",
    "end": "300400"
  },
  {
    "start": "300000",
    "end": "420000"
  },
  {
    "text": "hello everyone thank you very much for joining my name is stanislav and i will tell you more about the amnesia 33 study",
    "start": "300400",
    "end": "307810"
  },
  {
    "text": "[Music] as daniel mentioned the tcp stacks are the key for the connectivity of embedded",
    "start": "307810",
    "end": "313840"
  },
  {
    "text": "systems and different iot devices but there are still quite a lot of popular implementations",
    "start": "313840",
    "end": "320479"
  },
  {
    "text": "of these tcp stacks that were not previously examined for example microsoft's",
    "start": "320479",
    "end": "326160"
  },
  {
    "text": "nedex niche stack and the nucleus net supported by siemens",
    "start": "326160",
    "end": "331520"
  },
  {
    "text": "therefore i would like to present to you our first study into this topic called amnesia 33. the study aims",
    "start": "331520",
    "end": "338639"
  },
  {
    "text": "specifically at open source tcpap stacks and we chose to explore open source targets in particular",
    "start": "338639",
    "end": "345039"
  },
  {
    "text": "uh because for example according to this 2019 embedded market study",
    "start": "345039",
    "end": "350800"
  },
  {
    "text": "most of the embedded projects reuse the source code which also includes open source and a",
    "start": "350800",
    "end": "356400"
  },
  {
    "text": "bit more than half of these projects are using open source real-time operating systems",
    "start": "356400",
    "end": "362720"
  },
  {
    "text": "and these are typically bundled with an open source implementation of a tcpap stack and also despite",
    "start": "362720",
    "end": "369680"
  },
  {
    "text": "this growth in popularity the security and privacy in these projects will still remain as an afterthought",
    "start": "369680",
    "end": "376020"
  },
  {
    "text": "[Music] we have broken down the research activities from amnesia into several",
    "start": "376020",
    "end": "381440"
  },
  {
    "text": "phases and i will use them as my outline for the rest of this talk i will now explain each phase in more",
    "start": "381440",
    "end": "388319"
  },
  {
    "text": "detail to you we started with the analysis of the existing vulnerabilities in different",
    "start": "388319",
    "end": "394319"
  },
  {
    "text": "stacks and we also studied related write-ups and research reports as we immediately noticed",
    "start": "394319",
    "end": "400560"
  },
  {
    "text": "apart from some of the recent studies there are not so many vulnerabilities disclosed for tcpap stacks even for",
    "start": "400560",
    "end": "407280"
  },
  {
    "text": "very popular stacks used for for decades and while one might think that this is",
    "start": "407280",
    "end": "412639"
  },
  {
    "text": "simply because these stacks are robust it could also indicate the lack of public security assessment",
    "start": "412639",
    "end": "419440"
  },
  {
    "text": "so we started also with studying prior vulnerabilities in more detail and we were inspired by the taxonomy of",
    "start": "419440",
    "end": "427440"
  },
  {
    "start": "420000",
    "end": "515000"
  },
  {
    "text": "anti-patterns introduced in in the paper called the seven turrets of babel",
    "start": "427440",
    "end": "433120"
  },
  {
    "text": "which was written by falcon muhammad and his colleagues some of these anti-partners directly",
    "start": "433120",
    "end": "440080"
  },
  {
    "text": "apply to the historical vulnerabilities we have seen in tcp stacks and for example some of them",
    "start": "440080",
    "end": "446560"
  },
  {
    "text": "are permissive parsing when there's no validation of the data that is coming",
    "start": "446560",
    "end": "451759"
  },
  {
    "text": "from a network packet there is also variant of this called shotgun parsing when",
    "start": "451759",
    "end": "457360"
  },
  {
    "text": "a processing validation code is mixed together and instead of doing validation first",
    "start": "457360",
    "end": "463840"
  },
  {
    "text": "and then processing second also more generally there was general",
    "start": "463840",
    "end": "469680"
  },
  {
    "text": "absence of bounce checks and also we we saw that there were a lot of integer wrap around issues and there's",
    "start": "469680",
    "end": "478000"
  },
  {
    "text": "was also quite some number of state confusion bugs like the the absence of proper requests",
    "start": "478000",
    "end": "483599"
  },
  {
    "text": "and reply matching another interesting pointer for us was the fact that they may be unclear and conflicting",
    "start": "483599",
    "end": "491039"
  },
  {
    "text": "design documentation has been used to develop these tcpap stacks",
    "start": "491039",
    "end": "496560"
  },
  {
    "text": "and also that describe various protocols these documents are called the rfc documents and for",
    "start": "496560",
    "end": "502720"
  },
  {
    "text": "instance the tcp urgent pointer that was not properly defined and one of these rses has been",
    "start": "502720",
    "end": "509919"
  },
  {
    "text": "already the source of implementation errors in the past",
    "start": "509919",
    "end": "514880"
  },
  {
    "text": "to select the appropriate targets for our study we focus on on stacks that have been used by",
    "start": "515279",
    "end": "521839"
  },
  {
    "text": "popular real-time operating systems and we also consider the potential numbers of devices that",
    "start": "521839",
    "end": "528160"
  },
  {
    "text": "are using a stack that we could find online to briefly introduce you to these stacks",
    "start": "528160",
    "end": "535839"
  },
  {
    "text": "we started with lwip that is very popular and it's also a part of uh freertos",
    "start": "535839",
    "end": "542320"
  },
  {
    "text": "operating system and also it has been used in many other embedded projects",
    "start": "542320",
    "end": "548480"
  },
  {
    "text": "the micro ip stack is also developed by by the same author that developed lwp",
    "start": "548480",
    "end": "554720"
  },
  {
    "text": "initially and it was designed to be even lighter than than lwip",
    "start": "554720",
    "end": "560320"
  },
  {
    "text": "currently it is a part of the cantiki os project and it is a quite popular base for",
    "start": "560320",
    "end": "565839"
  },
  {
    "text": "commercial and non-commercial forks uh the net tcpap stack is currently used",
    "start": "565839",
    "end": "571920"
  },
  {
    "text": "by the nato s and is also in active development now and also the rest of the the rest of the",
    "start": "571920",
    "end": "578880"
  },
  {
    "text": "stocks mentioned here are the commercial stocks made public some years ago",
    "start": "578880",
    "end": "584320"
  },
  {
    "text": "and they they remain quite popular to this day when know that other researchers",
    "start": "584320",
    "end": "590240"
  },
  {
    "text": "researchers looked at some of them in the past and these stacks have been found has been around for a very long time",
    "start": "590240",
    "end": "597760"
  },
  {
    "text": "but this actually implies that there could be many versions of these stacks running on different different devices that are",
    "start": "597760",
    "end": "604880"
  },
  {
    "text": "considered end of life by vendors if especially if they're running some old versions",
    "start": "604880",
    "end": "611680"
  },
  {
    "text": "for looking for the vulnerabilities in these stacks we use the combination of dynamic and",
    "start": "611680",
    "end": "617200"
  },
  {
    "start": "612000",
    "end": "708000"
  },
  {
    "text": "static analysis we first set up a fuzzing infrastructure using the leapfaster tool and we used whitebox",
    "start": "617200",
    "end": "625360"
  },
  {
    "text": "code coverage metric as our guide we could actually find a number of vulnerabilities in this way however",
    "start": "625360",
    "end": "632560"
  },
  {
    "text": "there were some complications in setting it up for more embedded for some of the embedded targets",
    "start": "632560",
    "end": "639120"
  },
  {
    "text": "moreover it might be quite challenging to achieve the full testing coverage with this approach",
    "start": "639120",
    "end": "644160"
  },
  {
    "text": "simply because when the fuzzer is used out of the box it might be not maybe not as efficient",
    "start": "644160",
    "end": "649600"
  },
  {
    "text": "and the reason for that is that some protocols require stateful fuzzing and they also need more advanced means",
    "start": "649600",
    "end": "656720"
  },
  {
    "text": "for computing checksum and passing through them we also used a static analysis tool",
    "start": "656720",
    "end": "663040"
  },
  {
    "text": "called yeon developed initially by fabian yamaguchi and we would like to thank gabriela cherby who",
    "start": "663040",
    "end": "669440"
  },
  {
    "text": "helped us to set it up for this specifically we encoded some of",
    "start": "669440",
    "end": "674800"
  },
  {
    "text": "the anti-patterns i mentioned earlier in the form of code search queries and",
    "start": "674800",
    "end": "680320"
  },
  {
    "text": "still as with any uh static analysis though there were sometimes high false positive rates",
    "start": "680320",
    "end": "688160"
  },
  {
    "text": "because some of the vulnerabilities in tcpap stacks are quite implementation",
    "start": "688160",
    "end": "693440"
  },
  {
    "text": "specific and they need to be adjusted for that finally we also performed a lot of",
    "start": "693440",
    "end": "700480"
  },
  {
    "text": "manual code inspections to explore the points of interest that we haven't covered with any of these tools before",
    "start": "700480",
    "end": "707010"
  },
  {
    "text": "[Music] so i would like to continue with first the positive results",
    "start": "707010",
    "end": "713040"
  },
  {
    "start": "708000",
    "end": "749000"
  },
  {
    "text": "for example we could not find any vulnerabilities in three of our targets which are lwip",
    "start": "713040",
    "end": "719279"
  },
  {
    "text": "cyclone tcp and microc these stocks in general did not exhibit any problematic code and the patterns",
    "start": "719279",
    "end": "726000"
  },
  {
    "text": "that we we have been looking for and for example they have the proper bond checks in",
    "start": "726000",
    "end": "731440"
  },
  {
    "text": "place and usually they in general have quite robust robust parsing code we also found that",
    "start": "731440",
    "end": "738639"
  },
  {
    "text": "these tags are actively developed and supported and when for example we conducted these",
    "start": "738639",
    "end": "743920"
  },
  {
    "text": "projects for some other issues they were quite responsive",
    "start": "743920",
    "end": "748959"
  },
  {
    "start": "749000",
    "end": "789000"
  },
  {
    "text": "for stocks however from the ones that we analyzed were vulnerable according to our",
    "start": "749360",
    "end": "754639"
  },
  {
    "text": "assessment and in total we found 33 vulnerabilities with the top affected components that",
    "start": "754639",
    "end": "761440"
  },
  {
    "text": "are dns ipv6 and ipv4 tcp and icmp",
    "start": "761440",
    "end": "767040"
  },
  {
    "text": "the potential impact of these vulnerabilities ranges from different kinds of denial of service to",
    "start": "767040",
    "end": "773760"
  },
  {
    "text": "information leak and remote code execution we also found a few state confusion bugs",
    "start": "773760",
    "end": "780000"
  },
  {
    "text": "like dns cache poisoning [Music] now i will provide some more detailed",
    "start": "780000",
    "end": "786560"
  },
  {
    "text": "analysis of our findings uh here i would like to show you how the initial vulnerabilities compare to the",
    "start": "786560",
    "end": "793519"
  },
  {
    "start": "789000",
    "end": "838000"
  },
  {
    "text": "previous studies and on the picture you can see the ratios between our findings and the",
    "start": "793519",
    "end": "799200"
  },
  {
    "text": "previous work done by other researchers it is worth to mention that we found",
    "start": "799200",
    "end": "804639"
  },
  {
    "text": "quite a few vulnerabilities in the transport and the network layers and these vulnerabilities are",
    "start": "804639",
    "end": "810240"
  },
  {
    "text": "specifically interesting because most of them are independent of a user application",
    "start": "810240",
    "end": "815760"
  },
  {
    "text": "that runs on top of them and also target device that is vulnerable doesn't need to have",
    "start": "815760",
    "end": "821600"
  },
  {
    "text": "any open pores for triggering these vulnerabilities at the same time it seems that the",
    "start": "821600",
    "end": "826720"
  },
  {
    "text": "overall complexity of a protocol remains a good indicator of potential vulnerabilities",
    "start": "826720",
    "end": "831839"
  },
  {
    "text": "here you can see that we found quite a lot of vulnerabilities in dns applications",
    "start": "831839",
    "end": "838399"
  },
  {
    "start": "838000",
    "end": "895000"
  },
  {
    "text": "if we break our findings down by vulnerability types we mostly get the following ones so we",
    "start": "838480",
    "end": "844880"
  },
  {
    "text": "start with the out of bounds read and write where attackers control length and offset fields of network packets",
    "start": "844880",
    "end": "852000"
  },
  {
    "text": "and these offsets might influence memory related operations then it follows by quite a number of",
    "start": "852000",
    "end": "858880"
  },
  {
    "text": "integer overflows where different network packets are incorporated into assignments and",
    "start": "858880",
    "end": "864639"
  },
  {
    "text": "bars and arithmetic and there is also some number of state confusion bugs and",
    "start": "864639",
    "end": "870880"
  },
  {
    "text": "these bugs are not related to memory issues directly but they can facilitate the exploitation of",
    "start": "870880",
    "end": "876639"
  },
  {
    "text": "other issues in the stacks next i would like to to make just a few examples of",
    "start": "876639",
    "end": "882639"
  },
  {
    "text": "of the vulnerabilities that we have found in this work on this slide you can see the bytes that",
    "start": "882639",
    "end": "889120"
  },
  {
    "text": "correspond to icmpv6 echo request and the corresponding reply packet",
    "start": "889120",
    "end": "895519"
  },
  {
    "text": "specifically here i highlighted the icmp headers that start from the hex value of 80 for echo",
    "start": "895519",
    "end": "901760"
  },
  {
    "text": "request and 81 is for the reply and then there is a code byte",
    "start": "901760",
    "end": "906880"
  },
  {
    "text": "two bytes checksum two identifier bytes and the two bytes that represent the sequence number",
    "start": "906880",
    "end": "913199"
  },
  {
    "text": "uh while these eight bytes are the minimum amount of bytes that an icmp payload should have which is",
    "start": "913199",
    "end": "919680"
  },
  {
    "text": "exactly the header some tcp stacks that we analyzed will interpret any sequence of byte that",
    "start": "919680",
    "end": "925920"
  },
  {
    "text": "starts with 80 and they will think it's an echo request so for instance",
    "start": "925920",
    "end": "932720"
  },
  {
    "text": "the way they implement that is that when processing a request and preparing a reply they just change",
    "start": "932720",
    "end": "937839"
  },
  {
    "text": "the first byte of the header and the checksum and the acmp payload and then they just send the rest of the packet",
    "start": "937839",
    "end": "943519"
  },
  {
    "text": "back here is an example of one of the vulnerable implementations",
    "start": "943519",
    "end": "949279"
  },
  {
    "start": "945000",
    "end": "1029000"
  },
  {
    "text": "and it's the bike of the cpip stack this is the function that will take an",
    "start": "949279",
    "end": "954800"
  },
  {
    "text": "icmpf a request pocket and prepare a reply that will be sent later on on the line",
    "start": "954800",
    "end": "960720"
  },
  {
    "text": "68 the memory for the reply packet is allocated and it will be the size of the data",
    "start": "960720",
    "end": "966240"
  },
  {
    "text": "sent in the echo packet some properties of the echo packet are copied over into reply the next lines",
    "start": "966240",
    "end": "973120"
  },
  {
    "text": "and on the line 84 the data payload of the echo message will be copied into the",
    "start": "973120",
    "end": "978560"
  },
  {
    "text": "reply using the mem copy function here it is explicitly assumed that the",
    "start": "978560",
    "end": "985279"
  },
  {
    "text": "minimum size of an echo message is at least 8 bytes you can see this",
    "start": "985279",
    "end": "990320"
  },
  {
    "text": "quite lengthy constant in the third argument of the memcopic goal but unfortunately there",
    "start": "990320",
    "end": "996480"
  },
  {
    "text": "are no checks to validate that so if we send an echo message that is only",
    "start": "996480",
    "end": "1002320"
  },
  {
    "text": "that has only a header and for example it consists only of three bytes the arithmetic",
    "start": "1002320",
    "end": "1008880"
  },
  {
    "text": "operation and the mem copy code will overflow and the size of the copy will become a",
    "start": "1008880",
    "end": "1014000"
  },
  {
    "text": "large positive value therefore in this way after when executing the num copy operation",
    "start": "1014000",
    "end": "1020880"
  },
  {
    "text": "we'll attempt to copy more bytes into reply than we have actually allocated previously",
    "start": "1020880",
    "end": "1025918"
  },
  {
    "text": "and therefore we will write out of bonds [Music] next i'd like to demonstrate uh some of",
    "start": "1025919",
    "end": "1032240"
  },
  {
    "start": "1029000",
    "end": "1064000"
  },
  {
    "text": "the vulnerability anti-patterns that we haven't seen in the prior work and there are more implementation",
    "start": "1032240",
    "end": "1038000"
  },
  {
    "text": "specific and are related to parsing ipv6 extension headers and",
    "start": "1038000",
    "end": "1043280"
  },
  {
    "text": "processing domain names in dns packets in case of extension headers we saw that",
    "start": "1043280",
    "end": "1049280"
  },
  {
    "text": "their lengths and also the length of options within them might be not validated",
    "start": "1049280",
    "end": "1054480"
  },
  {
    "text": "and for dns pockets we saw issues with not checking the length of a domain name as",
    "start": "1054480",
    "end": "1059919"
  },
  {
    "text": "well as not checking whether it was properly null terminated [Music] the next example that i would like to",
    "start": "1059919",
    "end": "1066480"
  },
  {
    "start": "1064000",
    "end": "1108000"
  },
  {
    "text": "show to you is about the destination options extension header which is",
    "start": "1066480",
    "end": "1071919"
  },
  {
    "text": "an ipv6 header used for setting packet delivery parameters it consists of the next header the",
    "start": "1071919",
    "end": "1078799"
  },
  {
    "text": "header extension length fields and a field the variable length field",
    "start": "1078799",
    "end": "1084240"
  },
  {
    "text": "is called options and the options field itself consists of type length and the data fields",
    "start": "1084240",
    "end": "1091039"
  },
  {
    "text": "in general ipvc ipv6 packets can have combinations of different extension headers with different time",
    "start": "1091039",
    "end": "1098640"
  },
  {
    "text": "different kinds of options that you can nest into them and here on this picture below you can",
    "start": "1098640",
    "end": "1104480"
  },
  {
    "text": "see the generic structure of these headers",
    "start": "1104480",
    "end": "1109600"
  },
  {
    "text": "here on this slide is vulnerable function from pico2cp and the purpose of the function is to",
    "start": "1109600",
    "end": "1115919"
  },
  {
    "text": "parse the destination options extension header and the nested options",
    "start": "1115919",
    "end": "1122240"
  },
  {
    "text": "so the function first sets a pointer to the first byte of the first option found in the header and",
    "start": "1122240",
    "end": "1128880"
  },
  {
    "text": "then it gets the total length of the extension header itself next the function parses every option in",
    "start": "1128880",
    "end": "1135360"
  },
  {
    "text": "the loop until it reaches the end of the options uh here on the in the line 9 it reads",
    "start": "1135360",
    "end": "1141200"
  },
  {
    "text": "the length of an individual option before it iterates and at the end",
    "start": "1141200",
    "end": "1146720"
  },
  {
    "text": "at the end of each iteration the parsing loop jumps over to the next option using the length byte",
    "start": "1146720",
    "end": "1152720"
  },
  {
    "text": "of the previous option as an offset there are several problems with this",
    "start": "1152720",
    "end": "1157760"
  },
  {
    "text": "implementation and the first one is that the attackers may control the length of an individual option because it is just",
    "start": "1157760",
    "end": "1164240"
  },
  {
    "text": "set in the header and it's not validated uh because of that they explicitly",
    "start": "1164240",
    "end": "1169919"
  },
  {
    "text": "and implicitly control the variable that holds the total length of the header and with that they can implicitly",
    "start": "1169919",
    "end": "1177440"
  },
  {
    "text": "control the pointer that jumps over the different options in the header [Music]",
    "start": "1177440",
    "end": "1183039"
  },
  {
    "text": "so with this degree of control attackers can either shift the option pointer to some",
    "start": "1183039",
    "end": "1188240"
  },
  {
    "text": "and map memory by providing large values to option length or alternatively they can make this loop",
    "start": "1188240",
    "end": "1194400"
  },
  {
    "text": "to iterate infinitely by making the length of one of the options to be zero and they can do that through the integer",
    "start": "1194400",
    "end": "1202400"
  },
  {
    "text": "overflow that can happen during the assignment at line nine",
    "start": "1202400",
    "end": "1208080"
  },
  {
    "text": "uh the final example i'd like to show is a vulnerable function from the nut net",
    "start": "1208559",
    "end": "1213840"
  },
  {
    "text": "and this function has some issues with parsing dns domain names first i would like to briefly illustrate",
    "start": "1213840",
    "end": "1220480"
  },
  {
    "text": "to you how a dns response record looks like you can see it on the left upper corner of the slide so this",
    "start": "1220480",
    "end": "1227760"
  },
  {
    "text": "record contains a sequence of byte that corresponds to a domain name that has been requested",
    "start": "1227760",
    "end": "1233440"
  },
  {
    "text": "and it follows with the domain type class time to leave and the resource that the",
    "start": "1233440",
    "end": "1238640"
  },
  {
    "text": "length bytes and then there are the bytes that correspond to the resource data for example it could be an ip address",
    "start": "1238640",
    "end": "1245760"
  },
  {
    "text": "that corresponds to the domain name in question a domain name itself is a byte sequence that",
    "start": "1245760",
    "end": "1252880"
  },
  {
    "text": "consists of domain labels where each label starts with a byte that indicates the length of a label and",
    "start": "1252880",
    "end": "1259600"
  },
  {
    "text": "then it is followed by the label characters a domain name also must end with a node",
    "start": "1259600",
    "end": "1264799"
  },
  {
    "text": "byte explicitly that indicates where it actually ends on the right you can see the vulnerable",
    "start": "1264799",
    "end": "1271039"
  },
  {
    "text": "function from not net as i mentioned and this function parses individual domain names from a dns response packet",
    "start": "1271039",
    "end": "1278400"
  },
  {
    "text": "and it tries to combine two things so first it returns the total length of the parse domain name",
    "start": "1278400",
    "end": "1284480"
  },
  {
    "text": "which is then used by some other functions as an offset and it also copies the domain name itself",
    "start": "1284480",
    "end": "1290880"
  },
  {
    "text": "that it parses into a separate buffer that it allocates in this function",
    "start": "1290880",
    "end": "1296320"
  },
  {
    "text": "before parsing the name the function will first de-allocate the domain name buffer if it contains some previously allocated",
    "start": "1296320",
    "end": "1303200"
  },
  {
    "text": "domain name and then it will allocate space for the new name based on the domain",
    "start": "1303200",
    "end": "1308320"
  },
  {
    "text": "name length provided in the packet the total length of the domain name is obtained by",
    "start": "1308320",
    "end": "1314080"
  },
  {
    "text": "using the astroland function on the line 182 as you can see",
    "start": "1314080",
    "end": "1320640"
  },
  {
    "text": "the code will then iterate over individual labels and copy their contents into the allocated buffer",
    "start": "1320640",
    "end": "1325840"
  },
  {
    "text": "byte by byte the problem here is that the aster length function",
    "start": "1325840",
    "end": "1331520"
  },
  {
    "start": "1328000",
    "end": "1391000"
  },
  {
    "text": "explicitly assumes that the sequence of characters is not terminated and there are no checks where whether",
    "start": "1331520",
    "end": "1337520"
  },
  {
    "text": "the combined lengths of individual labels correspond to the length of the domain name",
    "start": "1337520",
    "end": "1342640"
  },
  {
    "text": "this allows attackers to explicitly control the allocation of the buffer for example they might set the null byte",
    "start": "1342640",
    "end": "1349440"
  },
  {
    "text": "at a particular offset within a dns packet and at the same time the attackers may control how many bytes",
    "start": "1349440",
    "end": "1356320"
  },
  {
    "text": "will be written into it so they can specify uh arbitrary label length and and do that with this offsets",
    "start": "1356320",
    "end": "1364400"
  },
  {
    "text": "this is essentially a classical heap buffer overflow for example here on the left you can see",
    "start": "1364400",
    "end": "1370559"
  },
  {
    "text": "that the label length byte that says the label is 176 by",
    "start": "1370559",
    "end": "1376400"
  },
  {
    "text": "bytes long we inserted here however a fake null byte that",
    "start": "1376400",
    "end": "1381919"
  },
  {
    "text": "is about only 80 bytes this means that we will attempt to write 176 bytes into",
    "start": "1381919",
    "end": "1388159"
  },
  {
    "text": "the buffer that is just 80 bytes long we managed to exploit",
    "start": "1388159",
    "end": "1393200"
  },
  {
    "start": "1391000",
    "end": "1471000"
  },
  {
    "text": "this vulnerability by creating a malicious dns server that replies",
    "start": "1393200",
    "end": "1398240"
  },
  {
    "text": "to to the requests from a vulnerable.net dns client in this example a malicious dns response",
    "start": "1398240",
    "end": "1405600"
  },
  {
    "text": "contains two answer records here i would like just to provide a high level overview and the",
    "start": "1405600",
    "end": "1412240"
  },
  {
    "text": "detailed exploitation write-up will be coming soon the specifics are that the nato s has a",
    "start": "1412240",
    "end": "1418640"
  },
  {
    "text": "simple hip allocator which maintains singly linked free chunk list",
    "start": "1418640",
    "end": "1423919"
  },
  {
    "text": "and it has a deterministic best fit algorithm moreover there are some very simple",
    "start": "1423919",
    "end": "1430159"
  },
  {
    "text": "optional hip guards so basically it will just surround the heat metadata of an allocated chunk with",
    "start": "1430159",
    "end": "1437120"
  },
  {
    "text": "the dead beef bites it is therefore possible to shape the heap in a certain",
    "start": "1437120",
    "end": "1443760"
  },
  {
    "text": "way and we will first set the domain name of the first dns sensor that we send",
    "start": "1443760",
    "end": "1449760"
  },
  {
    "text": "to a certain size to ensure that it is allocated at a certain position on the hip",
    "start": "1449760",
    "end": "1455760"
  },
  {
    "text": "then the date of the first response is also set to a certain size so that we can allocate it right after",
    "start": "1455760",
    "end": "1461840"
  },
  {
    "text": "the the first domain name and there also after these two allocated chunks",
    "start": "1461840",
    "end": "1467440"
  },
  {
    "text": "there should be a free chunk in the memory uh the domain name in the second answer",
    "start": "1467440",
    "end": "1473520"
  },
  {
    "text": "record will be actually the malicious one and we set it to the same size of the first domain name so that the",
    "start": "1473520",
    "end": "1481120"
  },
  {
    "text": "memory allocation algorithm allocates the second name in the same chunk where the first was",
    "start": "1481120",
    "end": "1486640"
  },
  {
    "text": "one sorry where the first one was allocated the bytes we provide in the second name",
    "start": "1486640",
    "end": "1493360"
  },
  {
    "text": "will actually cause an overflow so then we override the next couple of chunks corrupting the metadata of the",
    "start": "1493360",
    "end": "1499360"
  },
  {
    "text": "free chunk as well and this will currently work because there are no memory protections",
    "start": "1499360",
    "end": "1505840"
  },
  {
    "text": "on the target that that that we were using and in this way we overwrite the pointer",
    "start": "1505840",
    "end": "1511679"
  },
  {
    "text": "to the next recharge so that it points to a local variable on the stack which we would like to use on an offset",
    "start": "1511679",
    "end": "1517360"
  },
  {
    "text": "for writing when the chart that chunk that will hold the data for the second indents",
    "start": "1517360",
    "end": "1523120"
  },
  {
    "text": "answer gets allocated the next pointer of the free chunk already point somewhere into the stack frame",
    "start": "1523120",
    "end": "1530720"
  },
  {
    "text": "and this is where the newly allocated data will be actually written therefore whatever we specify in the",
    "start": "1530720",
    "end": "1537120"
  },
  {
    "text": "data of the second answer will be written into the that stack frame offset and it will",
    "start": "1537120",
    "end": "1542480"
  },
  {
    "text": "allow us eventually to hijack the control from the control flow so in this way we can",
    "start": "1542480",
    "end": "1547919"
  },
  {
    "text": "also then create uh the rock chain uh and then redirect the the execution to the show code of",
    "start": "1547919",
    "end": "1554880"
  },
  {
    "text": "our choice here we have developed this proof of",
    "start": "1554880",
    "end": "1560960"
  },
  {
    "start": "1557000",
    "end": "1584000"
  },
  {
    "text": "concept against the latest version of the nato s and for that we used the ethernet 5 development",
    "start": "1560960",
    "end": "1567200"
  },
  {
    "text": "board as you can see here the payload simply prints string over uart",
    "start": "1567200",
    "end": "1572640"
  },
  {
    "text": "but we can't do much more like manipulating uh inputs and outputs we can extract",
    "start": "1572640",
    "end": "1578240"
  },
  {
    "text": "cryptographic key material or interact with other buses available on the device",
    "start": "1578240",
    "end": "1585200"
  },
  {
    "start": "1584000",
    "end": "1675000"
  },
  {
    "text": "the main lesson learned actually after this was that for embedded systems there is a",
    "start": "1585200",
    "end": "1591200"
  },
  {
    "text": "big difference between the perceived potential impact of vulnerability and the actual impact and exploitability",
    "start": "1591200",
    "end": "1598559"
  },
  {
    "text": "against a particular target there are many moving parts that can actually dramatically change these",
    "start": "1598559",
    "end": "1604960"
  },
  {
    "text": "factors and i would like to mention some of them the first one is the configuration of the stock itself",
    "start": "1604960",
    "end": "1611520"
  },
  {
    "text": "because some components and features may be disabled network buffers that we are trying to",
    "start": "1611520",
    "end": "1616640"
  },
  {
    "text": "overflow may have different sizes on different devices and also they might be using different",
    "start": "1616640",
    "end": "1622240"
  },
  {
    "text": "memory memory allocators and and so on the network and",
    "start": "1622240",
    "end": "1627760"
  },
  {
    "text": "hardware drive drivers configuration also play a significant role because some of the stacks may be configured to",
    "start": "1627760",
    "end": "1634480"
  },
  {
    "text": "offload validation and filtering of network packets to them also the",
    "start": "1634480",
    "end": "1640480"
  },
  {
    "text": "target platform um on which the tcp stack runs has a significant impact so the things",
    "start": "1640480",
    "end": "1647440"
  },
  {
    "text": "like memory protection support whether it's enabled or disabled different built-in security features or",
    "start": "1647440",
    "end": "1654960"
  },
  {
    "text": "a specific way in which defaults are handled within the device also the presence of",
    "start": "1654960",
    "end": "1660559"
  },
  {
    "text": "watchdog timers plays quite a big role in this there is also a big difference between cases when",
    "start": "1660559",
    "end": "1667520"
  },
  {
    "text": "a tcpap stack runs as a part of real-time operating system or it runs just on a bare metal setup",
    "start": "1667520",
    "end": "1675840"
  },
  {
    "start": "1675000",
    "end": "1746000"
  },
  {
    "text": "to quickly illustrate these points i'd like to show you two small examples the potential impact of the",
    "start": "1675840",
    "end": "1681279"
  },
  {
    "text": "vulnerability on the left is denial of service that can be triggered",
    "start": "1681279",
    "end": "1686320"
  },
  {
    "text": "when reading out of bonds within the checksum calculation function but to actually achieve this impact that",
    "start": "1686320",
    "end": "1692799"
  },
  {
    "text": "the target device must not offload the some calculation to any other driver",
    "start": "1692799",
    "end": "1699440"
  },
  {
    "text": "exactly this function has must be called a memory protection unit here must be also enabled and it also depends",
    "start": "1699440",
    "end": "1706880"
  },
  {
    "text": "on how the memory related faults are handled for example in some ways it might",
    "start": "1706880",
    "end": "1712640"
  },
  {
    "text": "just hun indefinitely or the device can be reset after a while the example on the right",
    "start": "1712640",
    "end": "1719120"
  },
  {
    "text": "is a vulnerability that can lead to an infinite loop when parsing no from tcp options in this case",
    "start": "1719120",
    "end": "1725679"
  },
  {
    "text": "depending on a task scheduler the entire system may hang causing a denial of service and if no watchdog timer is present the",
    "start": "1725679",
    "end": "1733039"
  },
  {
    "text": "system will hang indefinitely otherwise if there is a watchdog timer however only the network",
    "start": "1733039",
    "end": "1739279"
  },
  {
    "text": "functionality might be affected by the exploitation and the system itself might be reset",
    "start": "1739279",
    "end": "1744640"
  },
  {
    "text": "after some time thank you very much and i would like to give floor to daniel",
    "start": "1744640",
    "end": "1752000"
  },
  {
    "start": "1746000",
    "end": "2202000"
  },
  {
    "text": "so thank you stanislav for giving us so many details into the vulnerabilities that we found and insights into vulnerabilities in tcpap",
    "start": "1752000",
    "end": "1758720"
  },
  {
    "text": "stacks in general but now i'd like to talk about the consequences of these types of vulnerabilities so the first challenge that we have with",
    "start": "1758720",
    "end": "1766000"
  },
  {
    "text": "tcpap's site vulnerabilities is to identify affected systems in this research we use",
    "start": "1766000",
    "end": "1771360"
  },
  {
    "text": "three data sources including documentation of devices that we found online online instances of devices using tools such as",
    "start": "1771360",
    "end": "1777760"
  },
  {
    "text": "showdown and fingerprints on proprietary repository which we call the device cloud within for scout",
    "start": "1777760",
    "end": "1783919"
  },
  {
    "text": "that allowed us to identify close to 150 potentially affected vendors",
    "start": "1783919",
    "end": "1789200"
  },
  {
    "text": "and these vendors produce devices such as embedded components systems on a chip",
    "start": "1789200",
    "end": "1794960"
  },
  {
    "text": "connectivity modules and so on and network and office devices such as printers routers consumer iot devices such as smart plugs",
    "start": "1794960",
    "end": "1802320"
  },
  {
    "text": "and sensors and ot devices that are used in building automation sensors and building automation systems and",
    "start": "1802320",
    "end": "1808000"
  },
  {
    "text": "industrial control systems um these many of these vulnerabilities",
    "start": "1808000",
    "end": "1813200"
  },
  {
    "text": "affect these components that are high up in the supply chain such as the socs that we mentioned and then trickle down to many different",
    "start": "1813200",
    "end": "1818880"
  },
  {
    "text": "vendors and verticals right so that that's why it's difficult to identify idea devices that are that are actually",
    "start": "1818880",
    "end": "1824240"
  },
  {
    "text": "affected um we know that popular components and devices such as the wi-fi",
    "start": "1824240",
    "end": "1830080"
  },
  {
    "text": "sucks network switches are shipped into millions but other devices such as rtus and ot devices are much",
    "start": "1830080",
    "end": "1835679"
  },
  {
    "text": "harder to estimate so it's difficult to know the actual number of devices that are out there",
    "start": "1835679",
    "end": "1841919"
  },
  {
    "text": "another issue with tcp stack vulnerabilities is actual patching right so for instance we identified",
    "start": "1842320",
    "end": "1847919"
  },
  {
    "text": "vulnerabilities on a tcp stack that is produced and maintained by a vendor a but that ends up in an operating system",
    "start": "1847919",
    "end": "1854960"
  },
  {
    "text": "that is produced by another vendor and then embedded into a network management card of another vendor",
    "start": "1854960",
    "end": "1860159"
  },
  {
    "text": "and then finally that is part of a ups that is sold to an end user by a fourth",
    "start": "1860159",
    "end": "1865679"
  },
  {
    "text": "vendor and uh the vulnerabilities that were identified in the tcpap stack never actually were",
    "start": "1865679",
    "end": "1872799"
  },
  {
    "text": "never actually patched uh in the ups because basically the operating system vendor",
    "start": "1872799",
    "end": "1878000"
  },
  {
    "text": "is now out of business so there is a broken link in the supply chain which means that the end user will not get the",
    "start": "1878000",
    "end": "1885120"
  },
  {
    "text": "proper patches for these vulnerabilities uh so this is just an example uh that",
    "start": "1885120",
    "end": "1892799"
  },
  {
    "text": "highlights a more a broader issue which is the fact that vulnerable code",
    "start": "1892799",
    "end": "1897840"
  },
  {
    "text": "spreads widely especially in open source projects that we dealt with uh for amnesia 33 many of those start by",
    "start": "1897840",
    "end": "1904880"
  },
  {
    "text": "forking code and then evolve independently sometimes only single components of another project are used and then",
    "start": "1904880",
    "end": "1912320"
  },
  {
    "text": "different versions of the stack might be forked into different projects so we have a tree there that shows the example of micro ip which",
    "start": "1912320",
    "end": "1919200"
  },
  {
    "text": "is used by operating systems such as contiki uh and attacks and other projects such as open",
    "start": "1919200",
    "end": "1924320"
  },
  {
    "text": "ice cozy and some d-link firmware but the fact is that different versions of them are",
    "start": "1924320",
    "end": "1931039"
  },
  {
    "text": "vulnerable in different ways and the fixes are also uh being done",
    "start": "1931039",
    "end": "1936720"
  },
  {
    "text": "differently but and and that's what i want to discuss uh in this slide is who is actually responsible for fixes right",
    "start": "1936720",
    "end": "1942640"
  },
  {
    "text": "we disclosed these vulnerabilities to coordinating agencies such as the search cc and ics cert they got the help of other security",
    "start": "1942640",
    "end": "1948880"
  },
  {
    "text": "teams and agencies and so on but despite all this effort no official patches were produced for some of the original",
    "start": "1948880",
    "end": "1955120"
  },
  {
    "text": "projects such as micro ip and contiki which led to vendors implementing their own patches which means that there's",
    "start": "1955120",
    "end": "1960640"
  },
  {
    "text": "more code fragmentation and that all of these issues will need to trickle down to oems product vendors",
    "start": "1960640",
    "end": "1966320"
  },
  {
    "text": "and end users which as we saw in the previous slide it's not always an easy task um but not just identifying and patching",
    "start": "1966320",
    "end": "1974559"
  },
  {
    "text": "this devices is is complicated but there is also the aggravating factor that there are new attack scenarios that are",
    "start": "1974559",
    "end": "1981600"
  },
  {
    "text": "enabled by these uh these types of vulnerabilities right so nowadays there's this wide range of devices that",
    "start": "1981600",
    "end": "1987440"
  },
  {
    "text": "are vulnerable and several of them communicate externally for instance with dns servers",
    "start": "1987440",
    "end": "1992640"
  },
  {
    "text": "we saw how dns uh is is a an error prone component that is of high value for for attackers",
    "start": "1992640",
    "end": "2000640"
  },
  {
    "text": "and uh this basically means that several locations within an organization",
    "start": "2000640",
    "end": "2006080"
  },
  {
    "text": "now here we illustrate retail branch enterprise hq and substation are vulnerable right and it might be that",
    "start": "2006080",
    "end": "2013518"
  },
  {
    "text": "an attacker uses the dns vulnerabilities for initial access and moves laterally from one part of the",
    "start": "2013679",
    "end": "2019279"
  },
  {
    "text": "organization to the next and in the end causes an impact in in his or her",
    "start": "2019279",
    "end": "2024399"
  },
  {
    "text": "uh final target uh all of that using vulnerabilities in tcp stacks so",
    "start": "2024399",
    "end": "2029919"
  },
  {
    "text": "the key takeaways from from this research are that tcpap stacks are vulnerable across the board",
    "start": "2029919",
    "end": "2035360"
  },
  {
    "text": "there are some resilient stacks but the rule of thumb is that we find many bugs upon a closed inspection uh these",
    "start": "2035360",
    "end": "2041919"
  },
  {
    "text": "vulnerabilities arise from well-known bad software development practices there are bugs in several components but they",
    "start": "2041919",
    "end": "2047760"
  },
  {
    "text": "tend to correlate with protocol complexity the iot risk management is very difficult because these vulnerabilities",
    "start": "2047760",
    "end": "2054000"
  },
  {
    "text": "affect hundreds of vendors and millions of devices the exploitability is highly device specific and this complex supply chains",
    "start": "2054000",
    "end": "2060800"
  },
  {
    "text": "make it challenging to determine so to identify vulnerable devices and to patch and",
    "start": "2060800",
    "end": "2066240"
  },
  {
    "text": "eradicate those vulnerabilities but there is something that can be done on a more hopeful",
    "start": "2066240",
    "end": "2071839"
  },
  {
    "text": "tone we all know that it's difficult to identify the devices on the network that are vulnerable because that requires",
    "start": "2071839",
    "end": "2077839"
  },
  {
    "text": "some specific knowledge some accurate fingerprinting and that patching sometimes may be impossible because the",
    "start": "2077839",
    "end": "2083200"
  },
  {
    "text": "vendors may not know or not patch or even be out of business but there are some specific recommendations that can be done to",
    "start": "2083200",
    "end": "2089118"
  },
  {
    "text": "mitigate these issues right so disabling or blocking ipv6 traffic when it's not needed for instance because",
    "start": "2089119",
    "end": "2094800"
  },
  {
    "text": "several as we saw several ipv6 implementations are vulnerable and often they are not uh used within",
    "start": "2094800",
    "end": "2102079"
  },
  {
    "text": "enterprise networks so there's no reason why this this traffic should be allowed relying on internal dns servers for uh",
    "start": "2102079",
    "end": "2109440"
  },
  {
    "text": "critical devices monitoring the network for anomalous packets and basically segmenting the",
    "start": "2109440",
    "end": "2114800"
  },
  {
    "text": "network to avoid that critical devices are used as an early entry point",
    "start": "2114800",
    "end": "2120160"
  },
  {
    "text": "as as the target of an attack or even as a pivot point within the network for lateral movement um",
    "start": "2120160",
    "end": "2128000"
  },
  {
    "text": "but we also want to talk about what comes next in this research and what we want to do in the future",
    "start": "2128000",
    "end": "2133280"
  },
  {
    "text": "so we see vulnerabilities resulting from protocol complexity and external dependencies in multiple stacks",
    "start": "2133280",
    "end": "2138960"
  },
  {
    "text": "we already have vulnerabilities in six stacks from one case of this type of vulnerability",
    "start": "2138960",
    "end": "2144000"
  },
  {
    "text": "and we have severes in eight stacks for another case of this type of ability both cases are reminiscent of",
    "start": "2144000",
    "end": "2149440"
  },
  {
    "text": "issues seen in the 90s and early 2000s uh we also see vulnerabilities in popular close source stacks that are",
    "start": "2149440",
    "end": "2155359"
  },
  {
    "text": "used in several critical devices we already have eight cvs for two stacks there and we just see that",
    "start": "2155359",
    "end": "2161760"
  },
  {
    "text": "popular stacks tend to be highly vulnerable non-robust and known rfc compliant and we basically are going through a",
    "start": "2161760",
    "end": "2169119"
  },
  {
    "text": "proper and coordinated vulnerability disclosure for all of those issues and we want to present them as soon as possible",
    "start": "2169119",
    "end": "2175680"
  },
  {
    "text": "um we also would like to discuss the current disclosure process and how to scale it to the iot supply chain because",
    "start": "2175680",
    "end": "2182160"
  },
  {
    "text": "as we saw uh that's really challenging nowadays and we would like to expand on recommendations about",
    "start": "2182160",
    "end": "2188400"
  },
  {
    "text": "mitigation um for other stacks or um for other issues that",
    "start": "2188400",
    "end": "2193760"
  },
  {
    "text": "we find in the future that's it thank you so much for listening to us and i would like to take some questions",
    "start": "2193760",
    "end": "2199200"
  },
  {
    "text": "thank you very much",
    "start": "2199200",
    "end": "2201838"
  }
]