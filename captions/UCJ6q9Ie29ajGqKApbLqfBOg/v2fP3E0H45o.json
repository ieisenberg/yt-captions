[
  {
    "start": "0",
    "end": "45000"
  },
  {
    "text": "[Music]",
    "start": "1130",
    "end": "14320"
  },
  {
    "text": "the power of symbolic execution to the fight against malicious excel for macros",
    "start": "14320",
    "end": "20320"
  },
  {
    "text": "this work is the result of the collaboration between four people",
    "start": "20320",
    "end": "25840"
  },
  {
    "text": "myself nicola aguado fabio pagani and stefano ortolan",
    "start": "25840",
    "end": "32558"
  },
  {
    "text": "fabio pagani and nicola aguaro are working at ucsb in the sac lab while",
    "start": "32559",
    "end": "39040"
  },
  {
    "text": "myself and stefano ortolani are working at the threat analysis unit at vmware",
    "start": "39040",
    "end": "46079"
  },
  {
    "start": "45000",
    "end": "179000"
  },
  {
    "text": "excel 4 macros are used in malware mostly to",
    "start": "46079",
    "end": "51680"
  },
  {
    "text": "as the first step in a malware infection an excel file with excel for macros is sent",
    "start": "51680",
    "end": "59039"
  },
  {
    "text": "usually as an attachment and then the macro gets executed and download another",
    "start": "59039",
    "end": "64799"
  },
  {
    "text": "component that makes the malware more persistent there are many families they use this mechanism to achieve a first",
    "start": "64799",
    "end": "72880"
  },
  {
    "text": "foothold on the computer of users we observe this with trigbot danabot golgi",
    "start": "72880",
    "end": "79759"
  },
  {
    "text": "z loader you name it we have been tracking at vmware this threat since the very beginning",
    "start": "79759",
    "end": "86479"
  },
  {
    "text": "of 2020 and we have observed a continuous",
    "start": "86479",
    "end": "91759"
  },
  {
    "text": "evolution of the techniques that are used to avoid detection and avoid",
    "start": "91759",
    "end": "97680"
  },
  {
    "text": "analysis so what are excel 4 macros it's a legacy feature of excel",
    "start": "97680",
    "end": "105600"
  },
  {
    "text": "that has been made obsolete by vba macros",
    "start": "105600",
    "end": "111680"
  },
  {
    "text": "the difference between excel for macro and vba macro is the fact that",
    "start": "111680",
    "end": "118320"
  },
  {
    "text": "vba macro are enabled by default but they cannot access the underlying operating system",
    "start": "118320",
    "end": "126320"
  },
  {
    "text": "while excel 4 macros need to be enabled explicitly",
    "start": "126320",
    "end": "131920"
  },
  {
    "text": "but then they have full access to the underlying capability of the operating",
    "start": "131920",
    "end": "137760"
  },
  {
    "text": "system and for example they can execute commands using powershell and they can start",
    "start": "137760",
    "end": "144319"
  },
  {
    "text": "programs and so forth and so on so if you look at your common idea of excel",
    "start": "144319",
    "end": "152080"
  },
  {
    "text": "for macro they're limited to the workbook they're operating on and you cannot interact with environment excel",
    "start": "152080",
    "end": "159440"
  },
  {
    "text": "for functions instead can access the win api directly they can access the file system",
    "start": "159440",
    "end": "167040"
  },
  {
    "text": "directly and therefore they're a very powerful mechanism uh to gain access to",
    "start": "167040",
    "end": "174800"
  },
  {
    "text": "the computer in which the excel for spreadsheet is running",
    "start": "174800",
    "end": "179920"
  },
  {
    "start": "179000",
    "end": "237000"
  },
  {
    "text": "it's important to understand how they work there is in this spreadsheet there is a first cell called the auto open cell",
    "start": "179920",
    "end": "188159"
  },
  {
    "text": "where the execution starts after that execution",
    "start": "188159",
    "end": "193200"
  },
  {
    "text": "continues in the underlying cell until there is a transfer of execution",
    "start": "193200",
    "end": "200640"
  },
  {
    "text": "that can happen in a number of ways for example using the go to function the run",
    "start": "200640",
    "end": "206159"
  },
  {
    "text": "function or a user defined function at the same time the data in the cell",
    "start": "206159",
    "end": "211519"
  },
  {
    "text": "can be modified dynamically using the formula",
    "start": "211519",
    "end": "216799"
  },
  {
    "text": "and formula field functions so for example a formula function could",
    "start": "216799",
    "end": "222319"
  },
  {
    "text": "write some code in terms expressed in terms of function in a specific cell and then",
    "start": "222319",
    "end": "229599"
  },
  {
    "text": "the program could jump to that cell and therefore there is the chance of doing",
    "start": "229599",
    "end": "234640"
  },
  {
    "text": "dynamic execution of code to give you an idea of what the bad guys",
    "start": "234640",
    "end": "239760"
  },
  {
    "start": "237000",
    "end": "262000"
  },
  {
    "text": "do with these capabilities this is an example of a macro that checks if there is mouse",
    "start": "239760",
    "end": "248959"
  },
  {
    "text": "and audio in the underlying system this is done so that they can avoid being analyzed in",
    "start": "248959",
    "end": "257199"
  },
  {
    "text": "sandboxes they don't have a mouse or an audio system attached",
    "start": "257199",
    "end": "262639"
  },
  {
    "start": "262000",
    "end": "293000"
  },
  {
    "text": "we saw evasion of this type of technique for example while the previous example was a hidden",
    "start": "262639",
    "end": "270160"
  },
  {
    "text": "macro sheet in the new example we saw the very hidden macro sheet that requires a",
    "start": "270160",
    "end": "277520"
  },
  {
    "text": "manual operation in order to expose the content of the",
    "start": "277520",
    "end": "283600"
  },
  {
    "text": "of the actual macro and in addition we see newer vision tricks for example",
    "start": "283600",
    "end": "289759"
  },
  {
    "text": "a check on the size of the display other things that we see we saw",
    "start": "289759",
    "end": "295199"
  },
  {
    "text": "throughout you know 2020 and 2021 is the use for example of the char",
    "start": "295199",
    "end": "300880"
  },
  {
    "text": "function in order to collate together uh one letter by letter the whole content",
    "start": "300880",
    "end": "307360"
  },
  {
    "text": "of a macro or the use of time dependency for example uh in in this case there is a",
    "start": "307360",
    "end": "315280"
  },
  {
    "start": "308000",
    "end": "336000"
  },
  {
    "text": "macro that uses specific day as a key to actually decrypt the contents of the",
    "start": "315280",
    "end": "323360"
  },
  {
    "text": "macro so for example if you do it in the wrong day",
    "start": "323360",
    "end": "328479"
  },
  {
    "text": "you obtain just gibberish but on the right day you have the correct macro",
    "start": "328479",
    "end": "336560"
  },
  {
    "start": "336000",
    "end": "371000"
  },
  {
    "text": "this of course um can create all sorts of problems uh and another another technique that is",
    "start": "336560",
    "end": "343280"
  },
  {
    "text": "used by done by malware authors is the use of register",
    "start": "343280",
    "end": "349600"
  },
  {
    "text": "in order to create custom names for specific function so the register function in excel for macro can",
    "start": "349600",
    "end": "356800"
  },
  {
    "text": "associate any kind of label to any kind of function and by doing this the",
    "start": "356800",
    "end": "362160"
  },
  {
    "text": "malware authors try to avoid signature matches and static analysis on",
    "start": "362160",
    "end": "368720"
  },
  {
    "text": "the code itself so you can see from this that there are problems with obfuscation because there",
    "start": "368720",
    "end": "375280"
  },
  {
    "text": "are so many techniques in that can be used in order to obfuscate a malware",
    "start": "375280",
    "end": "380720"
  },
  {
    "text": "some techniques can prevent detection some can even help detection however",
    "start": "380720",
    "end": "388319"
  },
  {
    "text": "the idea obfuscation problem is still very hard and we need the obfuscation because we want to understand all the",
    "start": "388319",
    "end": "395039"
  },
  {
    "text": "possible behaviors of a specific macro not the ones associated with a single execution and also we want to extract",
    "start": "395039",
    "end": "403440"
  },
  {
    "text": "the indicators of compromise as i don't know if you notice in the previous slide you can see that there are a number of",
    "start": "403440",
    "end": "410639"
  },
  {
    "text": "domains that are used or executable that are used and that information is important in order to create",
    "start": "410639",
    "end": "418160"
  },
  {
    "text": "threat feeds that allow systems to detect this type of macros",
    "start": "418160",
    "end": "424000"
  },
  {
    "text": "reliably so at the moment deaf skating these macros is an error prone manual task",
    "start": "424000",
    "end": "432160"
  },
  {
    "text": "that requires a lot of manual work muscle because static analysis does not work because it's heavily obfuscated and",
    "start": "432160",
    "end": "439199"
  },
  {
    "text": "also dynamic analysis only gives you one sort of thread of execution so we want",
    "start": "439199",
    "end": "445919"
  },
  {
    "text": "to automate the obfuscation but what how can we handle all these",
    "start": "445919",
    "end": "451840"
  },
  {
    "text": "environmental checks that make a particular macro only work if the right",
    "start": "451840",
    "end": "457199"
  },
  {
    "text": "boundary conditions are correct how can we guess the right value and here we",
    "start": "457199",
    "end": "463039"
  },
  {
    "text": "introduce the the power of symbolic execution this is a program analysis technique",
    "start": "463039",
    "end": "468479"
  },
  {
    "text": "that uses symbolic values in order to represent",
    "start": "468479",
    "end": "474479"
  },
  {
    "text": "all possible executions at least in theory so the basic idea is that in symbolic execution you interpret the",
    "start": "474479",
    "end": "480879"
  },
  {
    "text": "code and whenever there is an input from the outside environment you keep that value symbolic",
    "start": "480879",
    "end": "487520"
  },
  {
    "text": "so when a conditional statement is found and the conditional statement relies of",
    "start": "487520",
    "end": "493759"
  },
  {
    "text": "on one of these symbolic values instead of taking a single decision you fork",
    "start": "493759",
    "end": "500560"
  },
  {
    "text": "you know a new state so you you sort of proceed both ways and depending on what",
    "start": "500560",
    "end": "506960"
  },
  {
    "text": "branch you decide to progress you add a constraint over the value of the",
    "start": "506960",
    "end": "513839"
  },
  {
    "text": "symbolic variable at a certain point you might reach a point of interest in your",
    "start": "513839",
    "end": "519120"
  },
  {
    "text": "code and at that point you can ask a constraint solver to automatically",
    "start": "519120",
    "end": "524800"
  },
  {
    "text": "provide you with a value that satisfies the constraints that will take you to that point",
    "start": "524800",
    "end": "531200"
  },
  {
    "text": "and you can use this technique to obtain automatically de-obfuscated code",
    "start": "531200",
    "end": "536800"
  },
  {
    "text": "well let me tell you a little bit about symbolic execution with this example so we have very simple code",
    "start": "536800",
    "end": "544480"
  },
  {
    "start": "537000",
    "end": "673000"
  },
  {
    "text": "and you can see at the very beginning we have a state and we read some input so our variable x at this point is a",
    "start": "544480",
    "end": "552480"
  },
  {
    "text": "symbolic variable so we don't know what uh value it is it's not five it's not seven",
    "start": "552480",
    "end": "557920"
  },
  {
    "text": "it's just a symbolic value so we sort of like uh weight to make a decision on",
    "start": "557920",
    "end": "563680"
  },
  {
    "text": "that particular value of course in the following line we actually compute a value based",
    "start": "563680",
    "end": "569920"
  },
  {
    "text": "on that symbolic value and so we have to keep track of the fact that y is x plus one so a symbolic value plus",
    "start": "569920",
    "end": "577519"
  },
  {
    "text": "one and then we encounter our first constraint we have a conditional",
    "start": "577519",
    "end": "583760"
  },
  {
    "text": "y greater or equal to ten and so we have to sort of split our execution in two possible",
    "start": "583760",
    "end": "591360"
  },
  {
    "text": "state one that will be followed if the constraint y less than ten is uh",
    "start": "591360",
    "end": "599040"
  },
  {
    "text": "true and one if the constraint y greater or equal 10 is true and you go on",
    "start": "599040",
    "end": "606320"
  },
  {
    "text": "then for example you can have another if then else in this case is based on x",
    "start": "606320",
    "end": "613519"
  },
  {
    "text": "symbolic variable and therefore the relevant state is split again to track",
    "start": "613519",
    "end": "620079"
  },
  {
    "text": "all possible outcomes but at this point we are at the",
    "start": "620079",
    "end": "625680"
  },
  {
    "text": "interesting code and so we can now concretize the state and we can ask the",
    "start": "625680",
    "end": "631040"
  },
  {
    "text": "solver hey give me a value of x that actually will drive the execution of",
    "start": "631040",
    "end": "638079"
  },
  {
    "text": "this code to this point to the interesting code so you can avoid testing for the errors you just get to",
    "start": "638079",
    "end": "644959"
  },
  {
    "text": "your code you have your state and you get the magic value they will lead you",
    "start": "644959",
    "end": "650079"
  },
  {
    "text": "to the place where you want and you already can understand how this can lead to the point where you will have the",
    "start": "650079",
    "end": "657839"
  },
  {
    "text": "interesting de-obfuscating code and i just want to say wait wait a minute how do you do this",
    "start": "657839",
    "end": "665200"
  },
  {
    "text": "well nicole aguado will explain the nitty-gritty details of how this is done",
    "start": "665200",
    "end": "673600"
  },
  {
    "start": "673000",
    "end": "684000"
  },
  {
    "text": "hello everyone and thank you giovanni for the introduction so now we'll talk about our approach and implementation of",
    "start": "673600",
    "end": "679920"
  },
  {
    "text": "the sim excel symbolic execution engine for excel for macros to start off and before delving into the",
    "start": "679920",
    "end": "686800"
  },
  {
    "start": "684000",
    "end": "741000"
  },
  {
    "text": "details of symbolic execution i would like to talk a little bit about concrete analysis",
    "start": "686800",
    "end": "692160"
  },
  {
    "text": "concrete analysis is a good tool for post infection analysis and the obfuscation of xl4 macros",
    "start": "692160",
    "end": "698800"
  },
  {
    "text": "it will not execute the excel for sample but it will instead load the xls file",
    "start": "698800",
    "end": "705120"
  },
  {
    "text": "into memory and start interpreting all of the instructions from the entry point down to the actual execution of the",
    "start": "705120",
    "end": "712160"
  },
  {
    "text": "modular payload since the initial environment configuration is not known it is possible with concrete analysis to use",
    "start": "712160",
    "end": "719279"
  },
  {
    "text": "brute force and forced execution in order to automatically figure out what the correct environment configuration is",
    "start": "719279",
    "end": "725920"
  },
  {
    "text": "and sidestep the environment configuration a good example of a complete analysis tool for excel for macros is the xlm",
    "start": "725920",
    "end": "733519"
  },
  {
    "text": "macro diffusator developed by desect modeler which is a great tool that poses the basis for our symbolic analysis",
    "start": "733519",
    "end": "740399"
  },
  {
    "text": "approach now the problem with concrete analysis is that first it will need some human",
    "start": "740399",
    "end": "746079"
  },
  {
    "start": "741000",
    "end": "800000"
  },
  {
    "text": "input because either a human analyst will need to manually inspect the malware sample",
    "start": "746079",
    "end": "752240"
  },
  {
    "text": "and figure out what the correct environment variables are or it will need to",
    "start": "752240",
    "end": "757600"
  },
  {
    "text": "manually inspect the sample and figure out what variables we should perforce and how to efficiently reforce them",
    "start": "757600",
    "end": "764880"
  },
  {
    "text": "this as you can expect will quickly get inspecting effective because as the malware starts to use more environment",
    "start": "764880",
    "end": "772480"
  },
  {
    "text": "variables and the search space becomes larger and larger this approach will no longer work",
    "start": "772480",
    "end": "779200"
  },
  {
    "text": "symbolic execution on the other hand will understand how these environment variables are generated propagated and",
    "start": "779200",
    "end": "786959"
  },
  {
    "text": "used during the execution and will allow us to reason more formally about the environment and",
    "start": "786959",
    "end": "794160"
  },
  {
    "text": "leverage this additional information in order to solve the constraints in the most efficient way possible",
    "start": "794160",
    "end": "801839"
  },
  {
    "start": "800000",
    "end": "852000"
  },
  {
    "text": "our architecture is composed of three main components the loader simulation manager and the solver",
    "start": "801839",
    "end": "808639"
  },
  {
    "text": "backhand the loader component is where the xls file is loaded into memory",
    "start": "808639",
    "end": "815440"
  },
  {
    "text": "the simulation manager is essentially a state orchestrator and will as you can see from the image",
    "start": "815440",
    "end": "822880"
  },
  {
    "text": "during the execution manage multiple states where every state has its own copy of",
    "start": "822880",
    "end": "828800"
  },
  {
    "text": "the environment memory and constraints finally the last component in our architecture is a solver backhand",
    "start": "828800",
    "end": "836560"
  },
  {
    "text": "which is where we keep track of the constraints and we will solve constraint to proceed with the symbolic execution",
    "start": "836560",
    "end": "844639"
  },
  {
    "text": "we will now talk briefly about these three components and we will start off with a loader",
    "start": "844880",
    "end": "852800"
  },
  {
    "start": "852000",
    "end": "919000"
  },
  {
    "text": "the loader is where the xls file which comes in the bfade format will be parsed",
    "start": "852880",
    "end": "858720"
  },
  {
    "text": "and loaded into memory the loader will create an initial simulation manager",
    "start": "858720",
    "end": "864000"
  },
  {
    "text": "and initialize its memory and its environment accordingly to the file that is just",
    "start": "864000",
    "end": "870160"
  },
  {
    "text": "loaded into memory so at this point we have two choices in order to implement the loader we can",
    "start": "870160",
    "end": "876320"
  },
  {
    "text": "decide to implement a loader in a static fashion or in a more dynamic fashion",
    "start": "876320",
    "end": "881839"
  },
  {
    "text": "an example of a loader implemented in a static way is the xlr d2 library developed again by",
    "start": "881839",
    "end": "888639"
  },
  {
    "text": "desect modeler which is a good approach fast but less robust than the dynamic",
    "start": "888639",
    "end": "894720"
  },
  {
    "text": "alternative so if you want to use a more dynamic approach what you can do is instead to use the",
    "start": "894720",
    "end": "901519"
  },
  {
    "text": "windows component object model which allows us to interface directly with",
    "start": "901519",
    "end": "906880"
  },
  {
    "text": "excel so load the file into memory and in this way avoid many of the vision techniques",
    "start": "906880",
    "end": "913760"
  },
  {
    "text": "that we commonly see in the most modern wave of xl4 malware samples",
    "start": "913760",
    "end": "920480"
  },
  {
    "start": "919000",
    "end": "951000"
  },
  {
    "text": "the second component in our architecture is the simulation manager the simulation manager is essentially a state",
    "start": "920560",
    "end": "926720"
  },
  {
    "text": "orchestrator as we have already said so what it will do is initialize an",
    "start": "926720",
    "end": "932880"
  },
  {
    "text": "initial state that will start the execution from the entry point it will then implement",
    "start": "932880",
    "end": "939519"
  },
  {
    "text": "a step function that transitions from one state to the successful state",
    "start": "939519",
    "end": "945040"
  },
  {
    "text": "while taking care of updating the memory the environment and the constraints",
    "start": "945040",
    "end": "951839"
  },
  {
    "start": "951000",
    "end": "1051000"
  },
  {
    "text": "every state will contain its own copy of the memory environmental constraints where the memory contains the cell",
    "start": "952079",
    "end": "958560"
  },
  {
    "text": "values formulas cell information and the defined names the cell information are",
    "start": "958560",
    "end": "964399"
  },
  {
    "text": "like the font that is used font size that is used in the cell etc while the defined",
    "start": "964399",
    "end": "971040"
  },
  {
    "text": "names are global names which are shared all across the spreadsheet",
    "start": "971040",
    "end": "976800"
  },
  {
    "text": "environment variables are what is used by the modular authors for sandbox detection an example of some",
    "start": "976800",
    "end": "984720"
  },
  {
    "text": "environment variables is the window height and the operating system which is in use",
    "start": "984720",
    "end": "991519"
  },
  {
    "text": "since the initial environment configuration and the correct environment configuration for the modular execution",
    "start": "991519",
    "end": "997680"
  },
  {
    "text": "is unknown what we do is associate a symbolic variable with each one of these",
    "start": "997680",
    "end": "1004560"
  },
  {
    "text": "environment variables and this allows us to figure out later during the execution",
    "start": "1004560",
    "end": "1009680"
  },
  {
    "text": "what the correct value for that particular environment variable is finally",
    "start": "1009680",
    "end": "1015920"
  },
  {
    "text": "constraints are what will characterize the malware execution meaning that",
    "start": "1015920",
    "end": "1021680"
  },
  {
    "text": "the modeler will take one range or another branch when executing a conditional instruction depending on the",
    "start": "1021680",
    "end": "1028480"
  },
  {
    "text": "constraints that are set on the state an example of a constraint is window height",
    "start": "1028480",
    "end": "1033918"
  },
  {
    "text": "greater than 390 and this type of constraints are propagated throughout the execution to the",
    "start": "1033919",
    "end": "1040400"
  },
  {
    "text": "successful states so every time that the step function is called these constraints will be propagated to",
    "start": "1040400",
    "end": "1047760"
  },
  {
    "text": "this successful state the step function is what will take care",
    "start": "1047760",
    "end": "1054480"
  },
  {
    "start": "1051000",
    "end": "1101000"
  },
  {
    "text": "to execute every cell and every formula the first thing that the step function",
    "start": "1054480",
    "end": "1059600"
  },
  {
    "text": "does is to parse these formulas in order to generate an abstract syntax",
    "start": "1059600",
    "end": "1065039"
  },
  {
    "text": "3 or ast this is done by using an extended bacchus normal form grammar or ebnf and",
    "start": "1065039",
    "end": "1072559"
  },
  {
    "text": "a look ahead left to right parser which we implemented using the larc",
    "start": "1072559",
    "end": "1077679"
  },
  {
    "text": "library after parsing the formula and generating the ast",
    "start": "1077679",
    "end": "1082960"
  },
  {
    "text": "the step function will dispatch the execution to the correct formula handlers which",
    "start": "1082960",
    "end": "1088880"
  },
  {
    "text": "will take care of updating the memory accessing the environment generating and adding new constraints or",
    "start": "1088880",
    "end": "1096160"
  },
  {
    "text": "creating new branches whenever a conditional instruction is executed",
    "start": "1096160",
    "end": "1102080"
  },
  {
    "start": "1101000",
    "end": "1283000"
  },
  {
    "text": "now in order to make this all more clear let's look at some examples so in this",
    "start": "1102480",
    "end": "1107919"
  },
  {
    "text": "case we will start execution from this from the cell a1 and the cell a1 contains the formula char",
    "start": "1107919",
    "end": "1114720"
  },
  {
    "text": "with the parameter 72 the chart formula is very common in this kind of samples",
    "start": "1114720",
    "end": "1120000"
  },
  {
    "text": "and essentially translate from the ascii representation of the character to the character itself and so in this case it",
    "start": "1120000",
    "end": "1127200"
  },
  {
    "text": "will update the memory and write the character h to the destination cell a1",
    "start": "1127200",
    "end": "1133679"
  },
  {
    "text": "after executing the cell a1 the step function will continue and step into the",
    "start": "1133679",
    "end": "1139280"
  },
  {
    "text": "cell a2 the cell a2 contains the formula get workspace 14.",
    "start": "1139280",
    "end": "1145120"
  },
  {
    "text": "get workspace is a special type of formula that will access the environment",
    "start": "1145120",
    "end": "1150799"
  },
  {
    "text": "and in this case read the value of the environment variable workspace 14 which corresponds",
    "start": "1150799",
    "end": "1156880"
  },
  {
    "text": "to the workspace height after reading the value from the environment",
    "start": "1156880",
    "end": "1162240"
  },
  {
    "text": "this will write its value into the cell at the address a2",
    "start": "1162240",
    "end": "1168799"
  },
  {
    "text": "so you can see how the symbolic variable is now no longer only in the environment",
    "start": "1168799",
    "end": "1174160"
  },
  {
    "text": "but has also been propagated into the memory and will be used later for further",
    "start": "1174160",
    "end": "1179600"
  },
  {
    "text": "computation after stepping the cell a2 the cell a3",
    "start": "1179600",
    "end": "1185600"
  },
  {
    "text": "will be executed and you can see here that a conditional instruction is executed",
    "start": "1185600",
    "end": "1192160"
  },
  {
    "text": "the if formula takes three parameters first the condition itself",
    "start": "1192160",
    "end": "1198000"
  },
  {
    "text": "then the true branch and then the false branch in this case you can see that the",
    "start": "1198000",
    "end": "1203039"
  },
  {
    "text": "conditional the condition is symbolic and so we don't know if we have to",
    "start": "1203039",
    "end": "1210159"
  },
  {
    "text": "execute the true branch or the false branch and thus we generate two branches",
    "start": "1210159",
    "end": "1217200"
  },
  {
    "text": "write the correct values to the correct cells so 75 and 76 to the cell a3 in the",
    "start": "1217200",
    "end": "1223760"
  },
  {
    "text": "two branches and finally generate and add the correct constraints",
    "start": "1223760",
    "end": "1229440"
  },
  {
    "text": "to the two states we will add the constraint workspace 14 greater than 390 to the true branch and",
    "start": "1229440",
    "end": "1237039"
  },
  {
    "text": "will space 14 less or equal than 390 to the fullest branch and then continue",
    "start": "1237039",
    "end": "1242640"
  },
  {
    "text": "with the symbolic execution now at cell a4 we have a slightly more",
    "start": "1242640",
    "end": "1248720"
  },
  {
    "text": "complicated formula as usual the step function will parse",
    "start": "1248720",
    "end": "1253919"
  },
  {
    "text": "this formula and generate the corresponding abstract syntax tree which you can see in the image",
    "start": "1253919",
    "end": "1260240"
  },
  {
    "text": "as you can see one of the leaf nodes in this case is symbolic and it's the variable workspace 14 again",
    "start": "1260240",
    "end": "1268320"
  },
  {
    "text": "during the execution of the formula the handlers will propagate this value and generate a symbolic expression",
    "start": "1268320",
    "end": "1276000"
  },
  {
    "text": "that will be then written into the cell a4",
    "start": "1276000",
    "end": "1281280"
  },
  {
    "text": "now that you've seen some of the examples let's have a look at our silver backend what we use for our silver backend is",
    "start": "1284080",
    "end": "1291440"
  },
  {
    "text": "the z3 smt solver which is a very common smt solver",
    "start": "1291440",
    "end": "1296480"
  },
  {
    "text": "and we believe that the most interesting use case for our tool is the execution of a symbolic payload",
    "start": "1296480",
    "end": "1304159"
  },
  {
    "text": "however what i mean with a symbolic payload so let's look at an example let's go back to our example",
    "start": "1304159",
    "end": "1310960"
  },
  {
    "text": "and when executing a cell a5 you can see here that we execute the formula formula",
    "start": "1310960",
    "end": "1316880"
  },
  {
    "text": "fill which takes two parameters an expression and a destination cell",
    "start": "1316880",
    "end": "1322960"
  },
  {
    "text": "in this case the expression is a concatenation of multiple characters so the first thing",
    "start": "1322960",
    "end": "1328799"
  },
  {
    "text": "that the handler for the formula we'll do is to read these characters from the memory",
    "start": "1328799",
    "end": "1334799"
  },
  {
    "text": "concatenate them and write the result finally into the destination cell a6",
    "start": "1334799",
    "end": "1341760"
  },
  {
    "text": "as you can see the values that we read from the environment are not all concrete some of them are",
    "start": "1341760",
    "end": "1347600"
  },
  {
    "text": "symbolic so we will have a new symbolic expression which we marked a symbolic",
    "start": "1347600",
    "end": "1353200"
  },
  {
    "text": "expression 2 that is going to be written to the cell a6 however",
    "start": "1353200",
    "end": "1359120"
  },
  {
    "text": "after executing a cell at a5 the step function will continue executing execution",
    "start": "1359120",
    "end": "1366559"
  },
  {
    "text": "and execute the cell a6 a6 however contain a symbolic expression",
    "start": "1366559",
    "end": "1374000"
  },
  {
    "text": "and we don't know yet how to execute a symbolic expression obviously",
    "start": "1374000",
    "end": "1380240"
  },
  {
    "text": "the solution for this is to concretize the values and generate multiple possible concrete",
    "start": "1380240",
    "end": "1387600"
  },
  {
    "text": "solutions that we will later execute in our symbolic execution engine",
    "start": "1387600",
    "end": "1393440"
  },
  {
    "text": "however how many solution do we have here in this case the expression is pretty",
    "start": "1393440",
    "end": "1399840"
  },
  {
    "text": "simple it will read four variables for the memory for cells",
    "start": "1399840",
    "end": "1405520"
  },
  {
    "text": "and two of them are concrete so a1 and a3 and those only have one solution",
    "start": "1405520",
    "end": "1411200"
  },
  {
    "text": "while two of them a2 and a4 are symbolic and both depend on the symbolic variable",
    "start": "1411200",
    "end": "1418159"
  },
  {
    "text": "workspace 14. workspace 14 is an integer symbolic",
    "start": "1418159",
    "end": "1423200"
  },
  {
    "text": "variable so it will have 2 to the power of 32 solutions",
    "start": "1423200",
    "end": "1428960"
  },
  {
    "text": "and you can imagine how this is not what we want to do we don't want to execute",
    "start": "1428960",
    "end": "1434400"
  },
  {
    "text": "to the to the 32 instructions or generate 2-32 branches",
    "start": "1434400",
    "end": "1440559"
  },
  {
    "text": "but the question now becomes can we do better than this",
    "start": "1440559",
    "end": "1446240"
  },
  {
    "text": "and our answer is that yes we can and the optimization that we introduce",
    "start": "1446240",
    "end": "1452640"
  },
  {
    "text": "are two the first one is the concept of observers we strategically introduce some observer",
    "start": "1452640",
    "end": "1459679"
  },
  {
    "text": "variables into the z3 expressions in order to make the constraint solving more manageable",
    "start": "1459679",
    "end": "1466400"
  },
  {
    "text": "an observer variables is essentially an intermediate variable that will hide a sub-expression",
    "start": "1466400",
    "end": "1472880"
  },
  {
    "text": "and observe its value throughout the execution",
    "start": "1472880",
    "end": "1477919"
  },
  {
    "text": "looking at the cell a4 the expression that is now contained in that cell is workspace 14 greater than 390 plus 84",
    "start": "1477919",
    "end": "1487360"
  },
  {
    "text": "which is then a boolean sub expression workspace 14 within 390 plus a concrete",
    "start": "1487360",
    "end": "1494159"
  },
  {
    "text": "integer 84. however when we are symbolically executing the",
    "start": "1494159",
    "end": "1499679"
  },
  {
    "text": "sample and we want to query all the possible models associated with this cell",
    "start": "1499679",
    "end": "1507600"
  },
  {
    "text": "what we will get in this case is all the models associated with the symbolic variable",
    "start": "1507600",
    "end": "1512799"
  },
  {
    "text": "workspace 14 but what we really need are only the two models associated with the true or false",
    "start": "1512799",
    "end": "1521120"
  },
  {
    "text": "solutions of the boolean sub expression what we can do is introduce an observer",
    "start": "1521120",
    "end": "1527520"
  },
  {
    "text": "variable which is going to be equal to workspace 14 greater than 390.",
    "start": "1527520",
    "end": "1534080"
  },
  {
    "text": "thus the value in the cell a4 will now be observer plus 84.",
    "start": "1534080",
    "end": "1539840"
  },
  {
    "text": "and now the three we're perfectly understand that this expression can have at most two solution and we will be able",
    "start": "1539840",
    "end": "1546559"
  },
  {
    "text": "to query the models and continue with the symbolic execution without an",
    "start": "1546559",
    "end": "1551760"
  },
  {
    "text": "additional overhead second optimization that we introduced",
    "start": "1551760",
    "end": "1558799"
  },
  {
    "text": "is called smart concretization so the problem here is that even when introducing the concept of observers",
    "start": "1558799",
    "end": "1566159"
  },
  {
    "text": "we will still have many solutions associated with every symbolic variable",
    "start": "1566159",
    "end": "1572480"
  },
  {
    "text": "what we can do however when solving and concretizing an expression",
    "start": "1572480",
    "end": "1578159"
  },
  {
    "text": "is to filter the possible complete values considering the excel for",
    "start": "1578159",
    "end": "1583360"
  },
  {
    "text": "grammars we already know which variables which values are correct or incorrect",
    "start": "1583360",
    "end": "1588799"
  },
  {
    "text": "and we can then use the excel for grammar as an oracle in order to filter these values and mark those that are",
    "start": "1588799",
    "end": "1595840"
  },
  {
    "text": "invalid while only considering the valid expressions",
    "start": "1595840",
    "end": "1601440"
  },
  {
    "text": "so in this case we filter out all of the values that are all invalid and we will have only the halt formula",
    "start": "1601440",
    "end": "1609200"
  },
  {
    "text": "which is going to be written to the cell a6 as a concrete formula before continuing with this execution",
    "start": "1609200",
    "end": "1618000"
  },
  {
    "start": "1618000",
    "end": "1913000"
  },
  {
    "text": "now that we have seen some examples and how the solver backhand works",
    "start": "1619679",
    "end": "1624880"
  },
  {
    "text": "let's have a look at how this works in practice so let's have a look at the malware sample analysis",
    "start": "1624880",
    "end": "1631840"
  },
  {
    "text": "this sample is a sample which was observed during the last three months and",
    "start": "1632080",
    "end": "1637679"
  },
  {
    "text": "reported during the last three months it is a fairly complex sample composed of",
    "start": "1637679",
    "end": "1643520"
  },
  {
    "text": "multiple stages and 2d obfuscation routines what you can see in red in the",
    "start": "1643520",
    "end": "1649120"
  },
  {
    "text": "counterflow graph are the errored or pruned branches due to our concretization",
    "start": "1649120",
    "end": "1655360"
  },
  {
    "text": "strategy while what you can see in green is the symbolic payload which are all",
    "start": "1655360",
    "end": "1661360"
  },
  {
    "text": "those cells that depends on environment variables and that we need to concretize when",
    "start": "1661360",
    "end": "1667279"
  },
  {
    "text": "executing them in order to correctly execute the sample",
    "start": "1667279",
    "end": "1672480"
  },
  {
    "text": "this sample we start executing from the defuscation routine 1 which implements a simple transposition",
    "start": "1672559",
    "end": "1679120"
  },
  {
    "text": "cipher which is used to obfuscate only the first stage this",
    "start": "1679120",
    "end": "1684799"
  },
  {
    "text": "cipher will loop through all the payloads and through all the characters",
    "start": "1684799",
    "end": "1690000"
  },
  {
    "text": "and generate from the obfuscated payload",
    "start": "1690000",
    "end": "1695679"
  },
  {
    "text": "obfuscated payload for the stage one this looks something like this",
    "start": "1695679",
    "end": "1701520"
  },
  {
    "text": "the malware sample we simply rearrange some values from memory and thus generated the obfuscated",
    "start": "1701520",
    "end": "1707919"
  },
  {
    "text": "payload after the obfuscating the payload it will start executing stage 1 which is a",
    "start": "1707919",
    "end": "1714240"
  },
  {
    "text": "simple stage that only spawns a new process in order as innovation techniques in order to",
    "start": "1714240",
    "end": "1720720"
  },
  {
    "text": "confuse static and dynamic analysis and it will initialize the deposition of the",
    "start": "1720720",
    "end": "1725919"
  },
  {
    "text": "next stage then we will execute the obfuscation",
    "start": "1725919",
    "end": "1732080"
  },
  {
    "text": "routine 2 which is slightly different from what we have seen in the obfuscation routine 1 and in this case is an implementation of",
    "start": "1732080",
    "end": "1739039"
  },
  {
    "text": "pigeon ear cipher which is still fairly simple this is used with different decryption keys in",
    "start": "1739039",
    "end": "1746559"
  },
  {
    "text": "order to obfuscate the second third and fourth stage of the malware execution",
    "start": "1746559",
    "end": "1754240"
  },
  {
    "text": "the virginia cipher will start from the obfuscated version of the payload",
    "start": "1754480",
    "end": "1759919"
  },
  {
    "text": "shift it considering the decryption key and finally generate the obfuscated payload so after the obfuscation we will",
    "start": "1759919",
    "end": "1767840"
  },
  {
    "text": "execute stage 2 which will write 5 characters of the final decryption key and these",
    "start": "1767840",
    "end": "1774240"
  },
  {
    "text": "characters are generated using different evasion techniques for example the modeler will check for",
    "start": "1774240",
    "end": "1780880"
  },
  {
    "text": "alternate data streams or adts it will check some environment configuration",
    "start": "1780880",
    "end": "1786799"
  },
  {
    "text": "or the consistency of the system clock what is interesting to note here",
    "start": "1786799",
    "end": "1792640"
  },
  {
    "text": "is that the malware will not simply abort execution if these values are not",
    "start": "1792640",
    "end": "1797760"
  },
  {
    "text": "what what it is expecting to see but it will instead de-obfuscate incorrectly",
    "start": "1797760",
    "end": "1804320"
  },
  {
    "text": "and this is why symbolic execution is interesting so",
    "start": "1804320",
    "end": "1809919"
  },
  {
    "text": "the second time that we run the application routine 2 you can see as in the as",
    "start": "1809919",
    "end": "1816080"
  },
  {
    "text": "in the description key there are some symbolic values and those the decrypted payload is going",
    "start": "1816080",
    "end": "1822000"
  },
  {
    "text": "to be symbolic and indeed you can see in the control",
    "start": "1822000",
    "end": "1827039"
  },
  {
    "text": "photograph for the stage 3 that most of the formulas that we execute",
    "start": "1827039",
    "end": "1832720"
  },
  {
    "text": "will have to be concretized stage three is the symbolic stage",
    "start": "1832720",
    "end": "1840399"
  },
  {
    "text": "and will write the sixth and seventh characters of the final decryption key",
    "start": "1840559",
    "end": "1846799"
  },
  {
    "text": "in order to generate these characters the malware will execute some more evasion techniques like checking for the",
    "start": "1846799",
    "end": "1853600"
  },
  {
    "text": "file system implementation or checking for the excel micro security settings",
    "start": "1853600",
    "end": "1860000"
  },
  {
    "text": "we will then run again the deposition routine 2 before starting to execute the",
    "start": "1860880",
    "end": "1865919"
  },
  {
    "text": "final stage of the monitor this final stage is the infection stage",
    "start": "1865919",
    "end": "1872640"
  },
  {
    "text": "the malware at this stage will download a malicious windows dll and register it",
    "start": "1872640",
    "end": "1879840"
  },
  {
    "text": "using the rundlll.exe executable",
    "start": "1879840",
    "end": "1885039"
  },
  {
    "text": "it is interesting to note how first as you can see in the graph again this",
    "start": "1885039",
    "end": "1891039"
  },
  {
    "text": "payload is completely symbolic we will need to compromise every formula before executing it",
    "start": "1891039",
    "end": "1897760"
  },
  {
    "text": "and as you can see from the branch in this specific sample if the first",
    "start": "1897760",
    "end": "1902960"
  },
  {
    "text": "download fails the sample is configured in order to access a second endpoint in order to",
    "start": "1902960",
    "end": "1909679"
  },
  {
    "text": "download the malicious dll now you might be wondering okay then but",
    "start": "1909679",
    "end": "1917519"
  },
  {
    "start": "1913000",
    "end": "1953000"
  },
  {
    "text": "why do i need to de-obfuscate this sample and the answer is that",
    "start": "1917519",
    "end": "1924320"
  },
  {
    "text": "we did the obfuscation we are able to extract some indicators of compromise",
    "start": "1924320",
    "end": "1929760"
  },
  {
    "text": "that would otherwise be impossible to extract some examples of indicators of",
    "start": "1929760",
    "end": "1936000"
  },
  {
    "text": "compromise are files that are accessed during the execution other strings or other",
    "start": "1936000",
    "end": "1942000"
  },
  {
    "text": "executables are used or urls that are accessed in order to download the payload or to download",
    "start": "1942000",
    "end": "1949519"
  },
  {
    "text": "other files that are used by the modeler so we will now look at our evaluation",
    "start": "1949519",
    "end": "1956399"
  },
  {
    "start": "1953000",
    "end": "2051000"
  },
  {
    "text": "and comparison with other similar tools and techniques for the application of excel for samples",
    "start": "1956399",
    "end": "1963440"
  },
  {
    "text": "first in order to evaluate our tool we collected and analyzed roughly 4 700",
    "start": "1963440",
    "end": "1969440"
  },
  {
    "text": "samples which were reported and observed in the last six months we classified these samples in roughly",
    "start": "1969440",
    "end": "1976919"
  },
  {
    "text": "480 clusters of distinct behavior many of these samples still have a very",
    "start": "1976919",
    "end": "1983519"
  },
  {
    "text": "low detection rate in virus total which we think is interesting and many are still undetected",
    "start": "1983519",
    "end": "1992240"
  },
  {
    "text": "what you can see in this table is the number of samples that can be correctly obfuscated using a",
    "start": "1992799",
    "end": "2000559"
  },
  {
    "text": "concrete approach or a symbolic approach you can see how using a concrete obfuscator",
    "start": "2000559",
    "end": "2006399"
  },
  {
    "text": "we can only de-obfuscate correctly a little more than 1800 samples or 320",
    "start": "2006399",
    "end": "2013039"
  },
  {
    "text": "clusters while using simvaxcell we are able to duplicate correctly more than 3 000",
    "start": "2013039",
    "end": "2019200"
  },
  {
    "text": "samples and more than 400 clusters however now if you look at the symbolic",
    "start": "2019200",
    "end": "2025760"
  },
  {
    "text": "samples alone which are the focus of our research and of our tool you can see how with the",
    "start": "2025760",
    "end": "2032080"
  },
  {
    "text": "concrete obfuscator you are able to duplicate correctly only very few symbolic samples and symbolic clusters",
    "start": "2032080",
    "end": "2039679"
  },
  {
    "text": "while with simp excel you are able to duplicate correctly more than 170",
    "start": "2039679",
    "end": "2045120"
  },
  {
    "text": "symbolic samples and 91 symbolic clusters of distinct behaviors",
    "start": "2045120",
    "end": "2051760"
  },
  {
    "start": "2051000",
    "end": "2103000"
  },
  {
    "text": "so now as a conclusion except for macros are still an ongoing",
    "start": "2051919",
    "end": "2057200"
  },
  {
    "text": "and evolving threat they are very difficult to analyze and to detect accurately due to the set of evasion",
    "start": "2057200",
    "end": "2064398"
  },
  {
    "text": "techniques which are used in the modern waves of this kind of malwares",
    "start": "2064399",
    "end": "2069760"
  },
  {
    "text": "we believe the symbolic execution provides a way to analyze the samples",
    "start": "2069760",
    "end": "2077440"
  },
  {
    "text": "which would otherwise be impossible or very hard to deal with skate using a concrete diaper skater this would allow",
    "start": "2077440",
    "end": "2085280"
  },
  {
    "text": "to accurately the obfuscated samples and therefore accurate classify the samples",
    "start": "2085280",
    "end": "2091599"
  },
  {
    "text": "as benign or malicious so thank you for your attention this is",
    "start": "2091599",
    "end": "2096960"
  },
  {
    "text": "it for this talk if you have any questions or comments we will be here and very happy to answer",
    "start": "2096960",
    "end": "2103280"
  },
  {
    "text": "them",
    "start": "2103280",
    "end": "2105839"
  }
]