[
  {
    "text": "thank you for joining us today my name is david and with me is nimrod we're security researchers from plexidity x",
    "start": "2480",
    "end": "10080"
  },
  {
    "text": "and today we are going to explore two vulnerabilities we identified in certain",
    "start": "10080",
    "end": "15280"
  },
  {
    "text": "32bit power pc microcontrollers from nxp and sd micro electronics",
    "start": "15280",
    "end": "21760"
  },
  {
    "text": "these vulnerabilities allow a privilege attacker to shut off memory protections",
    "start": "21760",
    "end": "27039"
  },
  {
    "text": "even though it was properly configured according to the vendor's",
    "start": "27039",
    "end": "32480"
  },
  {
    "text": "instructions so as mentioned we're from plexidity x formerly known as argo cyber",
    "start": "32760",
    "end": "39000"
  },
  {
    "text": "security uh at plexity x we develop cyber security solutions and products for the automotive industry and also",
    "start": "39000",
    "end": "46320"
  },
  {
    "text": "provides consulting services our team the embedded research team is doing",
    "start": "46320",
    "end": "51360"
  },
  {
    "text": "security research for automotive systems and embedded",
    "start": "51360",
    "end": "56960"
  },
  {
    "text": "devices and we would like to start with an automotive attack scenario so imagine this we have our attacker sitting near",
    "start": "57559",
    "end": "65198"
  },
  {
    "text": "the vehicle or somewhere remotely from the cloud and he's really eager to control the vehicle",
    "start": "65199",
    "end": "72560"
  },
  {
    "text": "so in order to do that he starts by analyzing one of the exposed connected ecu electronic control",
    "start": "72560",
    "end": "79080"
  },
  {
    "text": "units luckily it finds a critical vulnerability on it that allow him to",
    "start": "79080",
    "end": "84640"
  },
  {
    "text": "remotely execute code on this ecu this is not such a far-fetched",
    "start": "84640",
    "end": "90080"
  },
  {
    "text": "concept as we already seen in previous sessions here at blacket",
    "start": "90080",
    "end": "96000"
  },
  {
    "text": "so our attacker has his code execution primitive on this ecu and as mentioned",
    "start": "96000",
    "end": "101840"
  },
  {
    "text": "his goal is to control the vehicle in order to do that he needs to send messages over the vehicle bus to other",
    "start": "101840",
    "end": "108799"
  },
  {
    "text": "ecus to control vehicle assets so the attacker starts crafting",
    "start": "108799",
    "end": "114399"
  },
  {
    "text": "his shell code with this goal but he has some obstacles along the way",
    "start": "114399",
    "end": "121200"
  },
  {
    "text": "so first he cannot execute code from the stack second he cannot write to the",
    "start": "121200",
    "end": "126640"
  },
  {
    "text": "actual buffers that eventually get sent as messages over the vehicle bus and",
    "start": "126640",
    "end": "132480"
  },
  {
    "text": "third he cannot read other applications data or memory so what is the thing that",
    "start": "132480",
    "end": "139280"
  },
  {
    "text": "actually stops the attacker from doing all of these activities this is exactly the memory",
    "start": "139280",
    "end": "145280"
  },
  {
    "text": "protection unit the mpu and this is the subject of our talk today",
    "start": "145280",
    "end": "152319"
  },
  {
    "text": "so this is our agenda for today we are going to start with some introduction about mpu and its common",
    "start": "153120",
    "end": "159480"
  },
  {
    "text": "functionality then we're going to deep dive into the vulnerabilities we have discovered and we'll also present a demo",
    "start": "159480",
    "end": "165920"
  },
  {
    "text": "of the exploitation process we will continue with the disclosure process we have done with the",
    "start": "165920",
    "end": "171480"
  },
  {
    "text": "vendors and we'll finalize with some conclusions and mitigations",
    "start": "171480",
    "end": "179480"
  },
  {
    "text": "so what is an mpu a memory protection unit is a programmable hardware unit",
    "start": "180080",
    "end": "185680"
  },
  {
    "text": "that acts as a gatekeeper of the memory it allows the system designer to divide",
    "start": "185680",
    "end": "192159"
  },
  {
    "text": "the memory into regions and for each region mpu can set memory access",
    "start": "192159",
    "end": "198599"
  },
  {
    "text": "permissions which is who can access this memory region is it a normal user is it",
    "start": "198599",
    "end": "204560"
  },
  {
    "text": "a privileged user or no one can access it all what mpu can set also is the memory",
    "start": "204560",
    "end": "211920"
  },
  {
    "text": "access attribute which is the read write execute we are all familiar with so to summarize mpu over c access",
    "start": "211920",
    "end": "221040"
  },
  {
    "text": "control for shared memory resources with the stated goal of significantly reducing the attack surface for embedded",
    "start": "221040",
    "end": "228080"
  },
  {
    "text": "systems so just to get a feeling of how it looks like we would like to start with some",
    "start": "228080",
    "end": "234959"
  },
  {
    "text": "high level example of how mpu actually operates so this is a figure of a common",
    "start": "234959",
    "end": "240959"
  },
  {
    "text": "microcontroller we have here our main communication bus and on top of that bus",
    "start": "240959",
    "end": "246319"
  },
  {
    "text": "we have certain entities called bus masters such as the cpu cores the dma",
    "start": "246319",
    "end": "252239"
  },
  {
    "text": "and so on that interact with certain assets of the microcontroller like the",
    "start": "252239",
    "end": "257359"
  },
  {
    "text": "ram memory and the flash memory so we start by defining our mpu",
    "start": "257359",
    "end": "263360"
  },
  {
    "text": "regions for one of the cpu cores in this example we define three regions where",
    "start": "263360",
    "end": "269360"
  },
  {
    "text": "region one is no access region for the cpu core region two is read write",
    "start": "269360",
    "end": "275120"
  },
  {
    "text": "allowed region and region three is read write execute allowed",
    "start": "275120",
    "end": "281000"
  },
  {
    "text": "region so in the first scenario our cpu cores try to read region one data which",
    "start": "281000",
    "end": "286560"
  },
  {
    "text": "is a no access region and in that case because this is no access region the mpu",
    "start": "286560",
    "end": "292320"
  },
  {
    "text": "will block this request and the hardware fault will come up in the second scenario the mpu will",
    "start": "292320",
    "end": "300880"
  },
  {
    "text": "the cpu core will try to read region two data which is a read write allowed",
    "start": "300880",
    "end": "306280"
  },
  {
    "text": "region the mpu will allow this request and data will get back to the cpu core",
    "start": "306280",
    "end": "314840"
  },
  {
    "text": "thank you david so now that we know what mpus are",
    "start": "316000",
    "end": "322800"
  },
  {
    "text": "and how they work let's talk about the types of mpus",
    "start": "322800",
    "end": "328479"
  },
  {
    "text": "so there are main two types of memory protection units that are used in",
    "start": "328479",
    "end": "334120"
  },
  {
    "text": "industrial and automotive applications and these are the core memory protection",
    "start": "334120",
    "end": "339600"
  },
  {
    "text": "unit and the system memory protection unit so the core memory protection unit also",
    "start": "339600",
    "end": "346639"
  },
  {
    "text": "known as cmpu core mpu and cpu mpu is integrated directly into each of the cpu",
    "start": "346639",
    "end": "354080"
  },
  {
    "text": "cores of the microcontroller and it controls all memory transactions",
    "start": "354080",
    "end": "359199"
  },
  {
    "text": "originating from that core we all know that cpu cores can read and write to and",
    "start": "359199",
    "end": "366080"
  },
  {
    "text": "from memories but perhaps their main objective is to execute code from",
    "start": "366080",
    "end": "372039"
  },
  {
    "text": "memories therefore one important attribute of the cmpu is the execute",
    "start": "372039",
    "end": "379319"
  },
  {
    "text": "attribute which marks those memory regions that each core is allowed to",
    "start": "379319",
    "end": "385199"
  },
  {
    "text": "execute code from the execute attribute is similar to the windows dep data",
    "start": "385199",
    "end": "391919"
  },
  {
    "text": "execution prevention and the linux nx bit no execution bit and they are all",
    "start": "391919",
    "end": "398960"
  },
  {
    "text": "important mitigations against buffer overflow vulnerabilities as we should see when we",
    "start": "398960",
    "end": "405280"
  },
  {
    "text": "get to the nxp chip some vendors integrate the cmpus inside the system",
    "start": "405280",
    "end": "412080"
  },
  {
    "text": "memory protection unit or smppu to create an extended",
    "start": "412080",
    "end": "418080"
  },
  {
    "text": "smpu the second memory protection unit we wish to describe here is the system memory protection unit or smpu",
    "start": "418280",
    "end": "427039"
  },
  {
    "text": "this memory protection unit is designed and positioned to protect the entire system memory space and is source",
    "start": "427039",
    "end": "436039"
  },
  {
    "text": "aware each smppu region is assigned with a list of memory transaction sources",
    "start": "436039",
    "end": "443599"
  },
  {
    "text": "also known as bus masters in power pc terminology and their access attributes",
    "start": "443599",
    "end": "451360"
  },
  {
    "text": "only those memory transactions originating from one of the allowed bus",
    "start": "451360",
    "end": "456599"
  },
  {
    "text": "masters and with the required permissions and attributes will be approved by the smpu while completely",
    "start": "456599",
    "end": "464479"
  },
  {
    "text": "blocking all others same as with all other memory protection units the system memory",
    "start": "464479",
    "end": "472240"
  },
  {
    "text": "protection units unit um is simply throws a hardware fault",
    "start": "472240",
    "end": "480879"
  },
  {
    "text": "whenever its permissions are not allowed and uh at that time the",
    "start": "480879",
    "end": "490199"
  },
  {
    "text": "uh the uh snpu is simply not allowing that transaction to happen",
    "start": "490199",
    "end": "498800"
  },
  {
    "text": "so now that we know the two main types of memory protection",
    "start": "499520",
    "end": "504680"
  },
  {
    "text": "units it is time for us to start our journey towards configuring them however",
    "start": "504680",
    "end": "511520"
  },
  {
    "text": "the problem is that there is no mpu configuration handbook so what do we do",
    "start": "511520",
    "end": "517760"
  },
  {
    "text": "consider the scenario of an embedded system designer tasked with the setup of",
    "start": "517760",
    "end": "524560"
  },
  {
    "text": "an automotive embedded microcontroller and the configuration of its memory protection units we can take for example",
    "start": "524560",
    "end": "532959"
  },
  {
    "text": "the sd micro electronics 32-bit power pc microcontroller that is the subject of",
    "start": "532959",
    "end": "539200"
  },
  {
    "text": "this talk well this system designer will have to do a lot of reading and i mean a",
    "start": "539200",
    "end": "547160"
  },
  {
    "text": "lot the system designer would have to start with this 452 pages of the",
    "start": "547160",
    "end": "552959"
  },
  {
    "text": "enhanced power pc architecture and then continue with this",
    "start": "552959",
    "end": "558440"
  },
  {
    "text": "390 pages of the power pc core reference manual not any new york times bestseller",
    "start": "558440",
    "end": "565440"
  },
  {
    "text": "i assure you next would be the uh microcontrollers data sheet so another 144 47 pages and",
    "start": "565440",
    "end": "574080"
  },
  {
    "text": "if all that was not enough the system design would have to get closely acquainted with the thrilling",
    "start": "574080",
    "end": "581480"
  },
  {
    "text": "1,439 pages of the chips reference manual so far we've reached more than",
    "start": "581480",
    "end": "588440"
  },
  {
    "text": "2,000 pages but even if the system designer religiously follows all",
    "start": "588440",
    "end": "594120"
  },
  {
    "text": "instructions in each and every one of these data sheet and reference manuals a skilled attacker would still",
    "start": "594120",
    "end": "601680"
  },
  {
    "text": "be able to disable the power pcsu by simply flipping one bit and gain a",
    "start": "601680",
    "end": "609200"
  },
  {
    "text": "foothold over the microcontroller the explanation to this lies with the vulnerabilities we",
    "start": "609200",
    "end": "615440"
  },
  {
    "text": "discovered and are about to share with you today so the two vulnerabilities are hardware",
    "start": "615440",
    "end": "622720"
  },
  {
    "text": "vulnerabilities we identified in certain 32-bit power pc microcontrollers from sd",
    "start": "622720",
    "end": "628959"
  },
  {
    "text": "micro electronics and nxp or what we believe are missing implementations of",
    "start": "628959",
    "end": "635920"
  },
  {
    "text": "logic components on the silicon they allow a privileged attacker to shut",
    "start": "635920",
    "end": "642240"
  },
  {
    "text": "off the power pcspu and so gain read and write access",
    "start": "642240",
    "end": "648640"
  },
  {
    "text": "to previously protected memory regions and specifically on the nxp chip they",
    "start": "648640",
    "end": "654079"
  },
  {
    "text": "allow the attacker to gain read write and execute permissions over previously",
    "start": "654079",
    "end": "660480"
  },
  {
    "text": "protected memory regions even though the s&ps were properly configured in accordance with",
    "start": "660480",
    "end": "667920"
  },
  {
    "text": "vendors instructions consequently the system designer remains",
    "start": "667920",
    "end": "673519"
  },
  {
    "text": "under the impression that their system is protected and secured completely unaware of the",
    "start": "673519",
    "end": "680560"
  },
  {
    "text": "underlying risks so we're going to start with the",
    "start": "680560",
    "end": "685839"
  },
  {
    "text": "sd micro electronics power pc chip analysis and later explain the differences with regards to the nxp chip",
    "start": "685839",
    "end": "693839"
  },
  {
    "text": "we'll focus on the automotive grade spc58 line of",
    "start": "693839",
    "end": "699320"
  },
  {
    "text": "microcontrollers that are used in various automotive applications as shown",
    "start": "699320",
    "end": "704800"
  },
  {
    "text": "on this slide one such interesting application is the",
    "start": "704800",
    "end": "710399"
  },
  {
    "text": "body control module bcm that plays an important role in safety features such",
    "start": "710399",
    "end": "716640"
  },
  {
    "text": "as airbag deployment abs subsystem control vehicle stability and",
    "start": "716640",
    "end": "725079"
  },
  {
    "text": "more other affected parts as reported to us by sd micro electronics are also",
    "start": "725079",
    "end": "731760"
  },
  {
    "text": "listed on this slide so now um we are ready to open the spc58",
    "start": "731760",
    "end": "740000"
  },
  {
    "text": "data sheet and start at the block",
    "start": "740000",
    "end": "745279"
  },
  {
    "text": "diagram this here on the slide is the spc58 power pc block diagram and at the",
    "start": "745720",
    "end": "751920"
  },
  {
    "text": "bottom of the block diagram we will find the commonly shared memories let's zoom in on them on the right hand side we",
    "start": "751920",
    "end": "759200"
  },
  {
    "text": "have the nonvolatile memories these are flesh and ero and on the left hand side",
    "start": "759200",
    "end": "765200"
  },
  {
    "text": "we have a couple of arrays of static ram these commonly shared",
    "start": "765200",
    "end": "772040"
  },
  {
    "text": "memories are routed via the system bus to the upper part of the block diagram",
    "start": "772040",
    "end": "779600"
  },
  {
    "text": "where in the blue shaded blocks we find the power pc cores let's zoom in on them",
    "start": "779600",
    "end": "786760"
  },
  {
    "text": "so as we can see the fpc58 is equipped with three power pc cores and all of",
    "start": "786760",
    "end": "793680"
  },
  {
    "text": "them in red are protected by core memory protection",
    "start": "793680",
    "end": "800079"
  },
  {
    "text": "unit so the configuration of the core memory protection unit is pretty straightforward and we're not going to",
    "start": "800279",
    "end": "807200"
  },
  {
    "text": "go into details about it here it's enough for us to say that the cmpu",
    "start": "807200",
    "end": "813680"
  },
  {
    "text": "is well protected from a security perspective having said that it is now",
    "start": "813680",
    "end": "821120"
  },
  {
    "text": "time to configure the smppu so let's zoom in on the system",
    "start": "821120",
    "end": "826480"
  },
  {
    "text": "memory protection unit in between the power pc cores and",
    "start": "826480",
    "end": "832800"
  },
  {
    "text": "the commonly shared memories we find the smpu over there in yellow",
    "start": "832800",
    "end": "838880"
  },
  {
    "text": "it is divided into regions and in order to configure the smppu we should set for",
    "start": "838880",
    "end": "844639"
  },
  {
    "text": "each of these regions the start address of the memory region we wish to protect",
    "start": "844639",
    "end": "851680"
  },
  {
    "text": "the end address of that memory region and as we said previously since the snpu",
    "start": "851680",
    "end": "858320"
  },
  {
    "text": "is source aware there is also the list of allowed power pc bus masters and",
    "start": "858320",
    "end": "864399"
  },
  {
    "text": "their access attributes power pc bus masters are identified by",
    "start": "864399",
    "end": "871199"
  },
  {
    "text": "their respective numbers as shown in the next",
    "start": "871199",
    "end": "877680"
  },
  {
    "text": "slide so this is the list of smpu bus masters for the spc58 we can see that there are a total",
    "start": "877959",
    "end": "885600"
  },
  {
    "text": "of 14 available bus masters for example bus master numbers 0 one and two",
    "start": "885600",
    "end": "892440"
  },
  {
    "text": "correspond to memory transactions originating from cpu cores 0 one and two",
    "start": "892440",
    "end": "899320"
  },
  {
    "text": "respectively busm master number three corresponds to memory transactions originating from dma controller zero and",
    "start": "899320",
    "end": "907120"
  },
  {
    "text": "so on so all this configuration information is",
    "start": "907120",
    "end": "912399"
  },
  {
    "text": "written into special smppu registers called region descriptor registers or",
    "start": "912399",
    "end": "918800"
  },
  {
    "text": "simply region descriptors so now that we know how to",
    "start": "918800",
    "end": "924000"
  },
  {
    "text": "configure the smpu let's try an example",
    "start": "924000",
    "end": "929639"
  },
  {
    "text": "so in this example we have cpu core zero and core one that share a data region on",
    "start": "930079",
    "end": "937680"
  },
  {
    "text": "the commonly shared static ram while core 2 has its own data region",
    "start": "937680",
    "end": "944680"
  },
  {
    "text": "there our goal here in this example is to allow core to read and write access",
    "start": "944680",
    "end": "950720"
  },
  {
    "text": "to its own data region while completely blocking it from accessing the other cores data we do that in order to",
    "start": "950720",
    "end": "958639"
  },
  {
    "text": "prevent core 2 from reading or manipulating that",
    "start": "958639",
    "end": "963880"
  },
  {
    "text": "information to do that we set up two smpu regions smpu region one with a start",
    "start": "963880",
    "end": "971440"
  },
  {
    "text": "address and end address over core zero and core one data and here we allow bus",
    "start": "971440",
    "end": "977279"
  },
  {
    "text": "master 2 no which is cpu core 2 no access attributes to this memory region",
    "start": "977279",
    "end": "986839"
  },
  {
    "text": "for snpu region two we set the start address and end address over core 2 data",
    "start": "987040",
    "end": "993120"
  },
  {
    "text": "and here we allow bus master 2 which is again cpu core to read and write",
    "start": "993120",
    "end": "998160"
  },
  {
    "text": "attributes to this memory region that's all quite",
    "start": "998160",
    "end": "1004720"
  },
  {
    "text": "straightforward great so now that we know how to configure the smpu",
    "start": "1006360",
    "end": "1014199"
  },
  {
    "text": "regions what we need to do now is start or enable the smpu hardware",
    "start": "1014199",
    "end": "1021000"
  },
  {
    "text": "mechanism well this is accomplished by bit 31 gvld or global valid bit of the",
    "start": "1021000",
    "end": "1029880"
  },
  {
    "text": "cesr0 register control error status register zero of the snpu",
    "start": "1029880",
    "end": "1038480"
  },
  {
    "text": "however before we actually do that there is another important register we must look into so let's go back to the",
    "start": "1038480",
    "end": "1045280"
  },
  {
    "text": "reference manual this register here is the s&p",
    "start": "1045280",
    "end": "1050640"
  },
  {
    "text": "region descriptor word three and here marked in green we find in bit 28 the",
    "start": "1050640",
    "end": "1057440"
  },
  {
    "text": "arrow bit or read only bit the read only",
    "start": "1057440",
    "end": "1062840"
  },
  {
    "text": "bit prevents unintended or malicious manipulation of the region descriptors",
    "start": "1062840",
    "end": "1069440"
  },
  {
    "text": "we just configured when the arrow bit is set any",
    "start": "1069440",
    "end": "1074640"
  },
  {
    "text": "attempt to change or otherwise manipulate the region descriptors of",
    "start": "1074640",
    "end": "1079679"
  },
  {
    "text": "that region is simply ignored by the microcontroller that is perfectly",
    "start": "1079679",
    "end": "1084960"
  },
  {
    "text": "understandable and important from a security perspective but there's also a note with the arrow",
    "start": "1084960",
    "end": "1091840"
  },
  {
    "text": "bit description over there in red so let's zoom in on the note the note says that once the arrow",
    "start": "1091840",
    "end": "1100240"
  },
  {
    "text": "bit is set the region descriptors of that region are locked and cannot be",
    "start": "1100240",
    "end": "1107400"
  },
  {
    "text": "overwritten until the next system reset and the note also adds that once",
    "start": "1107400",
    "end": "1114160"
  },
  {
    "text": "the ro bit the read only bit is set the global valid bit will have no effect",
    "start": "1114160",
    "end": "1122080"
  },
  {
    "text": "which means that the gvld bit cannot be changed or otherwise",
    "start": "1122080",
    "end": "1127799"
  },
  {
    "text": "overwritten until the next system reset well this is a smart defensive",
    "start": "1127799",
    "end": "1133840"
  },
  {
    "text": "trick isn't it so the idea here is that",
    "start": "1133840",
    "end": "1142440"
  },
  {
    "text": "um once the system restarts itself the attacker would lose any grip they had",
    "start": "1142440",
    "end": "1149919"
  },
  {
    "text": "over the device under attack and allow the system to reconfigure itself back to its original",
    "start": "1149919",
    "end": "1157480"
  },
  {
    "text": "state effectively shaking the attacker completely out of the",
    "start": "1157480",
    "end": "1163240"
  },
  {
    "text": "system that's smart",
    "start": "1163240",
    "end": "1167039"
  },
  {
    "text": "thank you nimrod so now we have our new added",
    "start": "1168880",
    "end": "1173919"
  },
  {
    "text": "configuration bits to the diagram marked in yellow and we continue our configuration",
    "start": "1173919",
    "end": "1179720"
  },
  {
    "text": "journey so the next step is to log the region descriptors using the ro read",
    "start": "1179720",
    "end": "1185600"
  },
  {
    "text": "only bit that we just discussed setting it from zero to one",
    "start": "1185600",
    "end": "1191520"
  },
  {
    "text": "that will uh allow the mpu regions to not be changed from this",
    "start": "1191520",
    "end": "1197080"
  },
  {
    "text": "point next we enable the smpu by setting the gvld the global valid bit from 0 to",
    "start": "1197080",
    "end": "1203919"
  },
  {
    "text": "one and from that point the smpu is enabled and locked and it seems that our",
    "start": "1203919",
    "end": "1211039"
  },
  {
    "text": "memory is actually protected preventing an attacker from manipulating it but is it really the case",
    "start": "1211039",
    "end": "1220240"
  },
  {
    "text": "can attackers still manage to do something in order to bypass these smppu",
    "start": "1220240",
    "end": "1226840"
  },
  {
    "text": "protections well you can guess the answer because otherwise we wouldn't be here presenting at",
    "start": "1226840",
    "end": "1232840"
  },
  {
    "text": "blacket so this is the first vulnerability we have found it holds for the spc family we discussed and the core",
    "start": "1232840",
    "end": "1240960"
  },
  {
    "text": "of the vulnerability is that after the smpu is configured enabled and locked a",
    "start": "1240960",
    "end": "1246720"
  },
  {
    "text": "privileged attacker can simply flip the gvld bit from one to zero and may that",
    "start": "1246720",
    "end": "1252559"
  },
  {
    "text": "disable the smpu effectively providing access to privacy protected uh",
    "start": "1252559",
    "end": "1260760"
  },
  {
    "text": "areas important note here is that it's only read and write access to these area",
    "start": "1260760",
    "end": "1266159"
  },
  {
    "text": "areas so after finding this exciting vulnerability we wanted to look for",
    "start": "1266159",
    "end": "1272080"
  },
  {
    "text": "similar targets maybe targets that share similar architecture for the one of the",
    "start": "1272080",
    "end": "1278559"
  },
  {
    "text": "sd micro electronics and maybe also share the smpu",
    "start": "1278559",
    "end": "1283799"
  },
  {
    "text": "issue so we came across this target the uh mpc 5 power pc family from nxp and",
    "start": "1283799",
    "end": "1291520"
  },
  {
    "text": "for our test we chose the mpc5748 microcontroller which is also",
    "start": "1291520",
    "end": "1297039"
  },
  {
    "text": "used for the automotive industry and we wondered does this microcontroller share",
    "start": "1297039",
    "end": "1303679"
  },
  {
    "text": "the same smpu issue in order to validate that we went straight into the data",
    "start": "1303679",
    "end": "1310039"
  },
  {
    "text": "sheets so this is the block diagram of the nxp microcontroller we can see that",
    "start": "1310039",
    "end": "1316000"
  },
  {
    "text": "we have three cpu cores marked in yellow we have the memories flash and ram",
    "start": "1316000",
    "end": "1321840"
  },
  {
    "text": "memory marked in green and we have the snpu marked in",
    "start": "1321840",
    "end": "1327320"
  },
  {
    "text": "red but looking again at this block diagram it seems that something is",
    "start": "1327320",
    "end": "1332919"
  },
  {
    "text": "missing where are the core memory protection units the",
    "start": "1332919",
    "end": "1338039"
  },
  {
    "text": "cmpus well after digging a bit more into the data sheet and the reference manual we understood that in this",
    "start": "1338039",
    "end": "1344559"
  },
  {
    "text": "microcontroller there are no core memory protection units in fact the case here is that the core",
    "start": "1344559",
    "end": "1351840"
  },
  {
    "text": "memory protection functionality is embedded into the systemary protection unit the",
    "start": "1351840",
    "end": "1358760"
  },
  {
    "text": "snpu and at that point we understood that if this microcontroller share the same smpu issue we have discovered then",
    "start": "1358760",
    "end": "1366559"
  },
  {
    "text": "the impact here is more severe because we wouldn't get only read and write access to privacy protected areas but",
    "start": "1366559",
    "end": "1373840"
  },
  {
    "text": "also execute access to protected areas so it seems really interesting and we",
    "start": "1373840",
    "end": "1381360"
  },
  {
    "text": "kept digging through the reference manual we can see that the register names are pretty similar we have here",
    "start": "1381360",
    "end": "1388159"
  },
  {
    "text": "the cs0 register which has a field called gvld global valid bit indicates",
    "start": "1388159",
    "end": "1394720"
  },
  {
    "text": "where the smpu is enabled or disabled and we have a similar field for",
    "start": "1394720",
    "end": "1400960"
  },
  {
    "text": "the ar bit we already saw it's called here lck region descriptor lock and once",
    "start": "1400960",
    "end": "1407440"
  },
  {
    "text": "the lck is on the regions are locked and cannot be changed we have here also a",
    "start": "1407440",
    "end": "1414159"
  },
  {
    "text": "note let's zoom on to that you can see that the wording is really similar to the one we saw already on the sd micro",
    "start": "1414159",
    "end": "1420799"
  },
  {
    "text": "electronics reference manual so here again after setting the lck field to on",
    "start": "1420799",
    "end": "1427440"
  },
  {
    "text": "the regions cannot be changed and the gvld bit has no effect until the next",
    "start": "1427440",
    "end": "1433039"
  },
  {
    "text": "system reset after some testing around this area we found our second vulnerability",
    "start": "1433039",
    "end": "1440320"
  },
  {
    "text": "which holds for the nxp microcontroller and the core of the vulnerability is that after the smpu is",
    "start": "1440320",
    "end": "1447200"
  },
  {
    "text": "configured enabled and locked the attacker can again just simply flip the gvld bit from one to zero and by that",
    "start": "1447200",
    "end": "1454159"
  },
  {
    "text": "disable the snpu effectively providing access to previously protected regions",
    "start": "1454159",
    "end": "1461520"
  },
  {
    "text": "but here in that case it's read write and execute access so after understanding these two",
    "start": "1461520",
    "end": "1468679"
  },
  {
    "text": "vulnerabilities i think it's a good time for the demo thank you david",
    "start": "1468679",
    "end": "1476120"
  },
  {
    "text": "so in order to better explain the impact the two vulnerabilities we discovered",
    "start": "1476120",
    "end": "1482480"
  },
  {
    "text": "may have on automotive systems we prepared this demo",
    "start": "1482480",
    "end": "1489440"
  },
  {
    "text": "in the demo the car's body control module bcm is equipped with an airbag",
    "start": "1489440",
    "end": "1496480"
  },
  {
    "text": "deployment mechanism that's in charge of triggering the airbags in case of",
    "start": "1496480",
    "end": "1501840"
  },
  {
    "text": "emergency so in the demo this airbag mechanism is protected",
    "start": "1501840",
    "end": "1511360"
  },
  {
    "text": "by the body control modules s snpu that only allows a specific security module",
    "start": "1511360",
    "end": "1518400"
  },
  {
    "text": "access to this mechanism the attacker in the demo is",
    "start": "1518400",
    "end": "1525600"
  },
  {
    "text": "exploiting a stack buffer overflow vulnerability over the bcm however the",
    "start": "1525600",
    "end": "1533200"
  },
  {
    "text": "stack is not executable so only return oriented programming rop is available to the",
    "start": "1533200",
    "end": "1539919"
  },
  {
    "text": "attacker in its attack the attacker's goal is to trigger",
    "start": "1539919",
    "end": "1545679"
  },
  {
    "text": "the airbag mechanism and explode the airbags this slide here summarizes the",
    "start": "1545679",
    "end": "1554080"
  },
  {
    "text": "attack path so the attacker starts by exploiting the uh stack buffer overflow",
    "start": "1554080",
    "end": "1562080"
  },
  {
    "text": "on one of the cpu cores with the target of reaching the airbag deployment",
    "start": "1562080",
    "end": "1567880"
  },
  {
    "text": "mechanism however this mechanism is protected by snpu region five which only",
    "start": "1567880",
    "end": "1574320"
  },
  {
    "text": "allows bus master 3 read and write access and of course no access to the",
    "start": "1574320",
    "end": "1580480"
  },
  {
    "text": "cpu cores the attacker's role here in this demo then is to overcome the s&p",
    "start": "1580480",
    "end": "1589480"
  },
  {
    "text": "protections and explode the airbags this is the demo bcm ecu",
    "start": "1589480",
    "end": "1597600"
  },
  {
    "text": "electronic control unit as you can see it is based on the nxp mpc 5748 and it",
    "start": "1597600",
    "end": "1604559"
  },
  {
    "text": "has two leds leads number one is the power lead which lights whenever the bcm",
    "start": "1604559",
    "end": "1611120"
  },
  {
    "text": "is powered and number two is the airbag deployment lead which lights when the",
    "start": "1611120",
    "end": "1616320"
  },
  {
    "text": "airbags are triggered so in the first demo the s&p",
    "start": "1616320",
    "end": "1622400"
  },
  {
    "text": "is on and the attacker is exploiting the stack buffer overflow",
    "start": "1622400",
    "end": "1629640"
  },
  {
    "text": "this is the debugger view that the attacker is seeing and on the left hand side we have the stack memory view and",
    "start": "1632640",
    "end": "1639520"
  },
  {
    "text": "we can see that the attacker had already sprayed it with deadb and left two addresses the airbag deployment address",
    "start": "1639520",
    "end": "1646480"
  },
  {
    "text": "and the original return address which was changed by the attacker to point to",
    "start": "1646480",
    "end": "1652240"
  },
  {
    "text": "the ro gadget this is the",
    "start": "1652240",
    "end": "1657640"
  },
  {
    "text": "cs0 register of the snpu and here we can see that the gvl dbt is one so the snpu",
    "start": "1657640",
    "end": "1663840"
  },
  {
    "text": "is currently enabled at the bottom of the screen we have the smpu status window and here region five is",
    "start": "1663840",
    "end": "1671840"
  },
  {
    "text": "protecting the airbag mechanism and only as we can see bus master 3 is allowed read and write access to this region",
    "start": "1671840",
    "end": "1679679"
  },
  {
    "text": "the s&p smpu regions are configured and read only which means that the lck bits",
    "start": "1679679",
    "end": "1686159"
  },
  {
    "text": "are locked and the smpu is well configured so the attacker is now",
    "start": "1686159",
    "end": "1692080"
  },
  {
    "text": "stepping in the vulnerable functions epilogue r1 is the st pointer so the",
    "start": "1692080",
    "end": "1697760"
  },
  {
    "text": "first instruction pops r29 from the st now r29 contains the address of the",
    "start": "1697760",
    "end": "1705520"
  },
  {
    "text": "airbag deployment mechanism this instruction pops r0 from the stack which is the return",
    "start": "1705520",
    "end": "1712720"
  },
  {
    "text": "address of the vulnerable",
    "start": "1712720",
    "end": "1717120"
  },
  {
    "text": "function and blr is branched to link register which is the return of the power pc and this returns into the",
    "start": "1717799",
    "end": "1725360"
  },
  {
    "text": "attacker's ro gadget which sets r3 to one and here this instruction stores r3",
    "start": "1725360",
    "end": "1732399"
  },
  {
    "text": "which is one into the address of r29 that's the address of the airbeck deployment mechanism",
    "start": "1732399",
    "end": "1738640"
  },
  {
    "text": "however as we can see the smpu had intercepted this access attempt and",
    "start": "1738640",
    "end": "1744880"
  },
  {
    "text": "threw a hardware fault which changed the program counter into the hard fault handler and stopped this attack in its",
    "start": "1744880",
    "end": "1754320"
  },
  {
    "text": "tracks so the first attempt failed and now in the second demo the attacker is",
    "start": "1754919",
    "end": "1761679"
  },
  {
    "text": "exploiting the s&p vulnerabilities that we discovered so first the attacker disables or attempts to disable the",
    "start": "1761679",
    "end": "1770279"
  },
  {
    "text": "snpu and then attempting to trigger the airbags again the st memory view um the",
    "start": "1770279",
    "end": "1777520"
  },
  {
    "text": "attacker sprayed it and left two f4 addresses the cs0 register address the",
    "start": "1777520",
    "end": "1784720"
  },
  {
    "text": "first rop gadget address the arab mechanism address and a second rop",
    "start": "1784720",
    "end": "1791600"
  },
  {
    "text": "gadget this is the smpu status window and again regions are configured and lck",
    "start": "1795799",
    "end": "1802880"
  },
  {
    "text": "bits are locked so the smpu is well configured region five is again protecting the airbag mechanism and only",
    "start": "1802880",
    "end": "1809279"
  },
  {
    "text": "bus master 3 is allowed access the cs0 register of the smpu is",
    "start": "1809279",
    "end": "1816760"
  },
  {
    "text": "again showing us that the gvl dv is set so the smpu is enabled so everything is",
    "start": "1816760",
    "end": "1822880"
  },
  {
    "text": "configured and the attacker is now stepping in the vulnerable functions",
    "start": "1822880",
    "end": "1828640"
  },
  {
    "text": "epilogue the first instruction is again popping",
    "start": "1828640",
    "end": "1834120"
  },
  {
    "text": "r29 from the stack and r29 now contains the cs0 address r3 is then",
    "start": "1834120",
    "end": "1844879"
  },
  {
    "text": "cleared the return address is popped and this return will jump to the",
    "start": "1845399",
    "end": "1853039"
  },
  {
    "text": "attacker's first rope gadget and here in the first instruction the attacker is storing r3",
    "start": "1853039",
    "end": "1860640"
  },
  {
    "text": "into the address of r29 that's the cs0 register and as you can see this is all that is required to flip the gvld bit",
    "start": "1860640",
    "end": "1868559"
  },
  {
    "text": "from one to zero and effectively disable the smpu now the smpu is disabled and",
    "start": "1868559",
    "end": "1875520"
  },
  {
    "text": "all accesses from all bus masters are allowed so now the attacker continues to the",
    "start": "1875520",
    "end": "1882080"
  },
  {
    "text": "second phase popping r29 again from the stack now r29 contains the airbag mechanism",
    "start": "1882080",
    "end": "1891120"
  },
  {
    "text": "address the second drop gadget is popped and blr returns",
    "start": "1891240",
    "end": "1899919"
  },
  {
    "text": "there and the second row gadget again stores one in r3 and then stores r3 to",
    "start": "1901960",
    "end": "1909760"
  },
  {
    "text": "the address of r29 that's the address of the airbag deployment address but now we don't have the s&p protection so this is",
    "start": "1909760",
    "end": "1916480"
  },
  {
    "text": "what happens",
    "start": "1916480",
    "end": "1919720"
  },
  {
    "text": "so in this case when the attacker exploited the vulnerabilities that we discovered to disable the",
    "start": "1921840",
    "end": "1929000"
  },
  {
    "text": "smppu the attack was successful and the airbags were",
    "start": "1929000",
    "end": "1935120"
  },
  {
    "text": "exploded great so of course after we discovered about the two",
    "start": "1935320",
    "end": "1940519"
  },
  {
    "text": "vulnerabilities we proceeded directly with the responsible disclosures with both vendors and we started with sd",
    "start": "1940519",
    "end": "1947760"
  },
  {
    "text": "micro electronics so we contacted sd product security team and sent them all",
    "start": "1947760",
    "end": "1953760"
  },
  {
    "text": "the information we had about the weaknesses and um st acknowledged the",
    "start": "1953760",
    "end": "1959679"
  },
  {
    "text": "issue and said they would release an erata however sd micro electronics",
    "start": "1959679",
    "end": "1965919"
  },
  {
    "text": "claimed that the smppu was not a security",
    "start": "1965919",
    "end": "1971320"
  },
  {
    "text": "mechanism this is a response and i'll be reading it from the slide sd micro electronics says that the",
    "start": "1971320",
    "end": "1977679"
  },
  {
    "text": "behavior deviation of s&p you detected may affect nonsecure device domains",
    "start": "1977679",
    "end": "1984480"
  },
  {
    "text": "however this domain should not be used for storing security information",
    "start": "1984480",
    "end": "1989519"
  },
  {
    "text": "secret or security critical data shall be stored within the hsm that's a hardware security module subsystem",
    "start": "1989519",
    "end": "1996039"
  },
  {
    "text": "memory if stored outside they need to be encrypted the s&p is not a security",
    "start": "1996039",
    "end": "2003760"
  },
  {
    "text": "protection mechanism rather it helps to avoid interference",
    "start": "2003760",
    "end": "2010679"
  },
  {
    "text": "well we can only say that without mpus data used by one application for example",
    "start": "2011279",
    "end": "2018320"
  },
  {
    "text": "a safety application may be read and manipulated by other applications",
    "start": "2018320",
    "end": "2024600"
  },
  {
    "text": "non-safety applications and the results may be such as we've seen in the",
    "start": "2024600",
    "end": "2030440"
  },
  {
    "text": "demo stack buffers may be manipulated application code pointers may be",
    "start": "2030440",
    "end": "2035640"
  },
  {
    "text": "hijacked to gain code execution control and so on and so",
    "start": "2035640",
    "end": "2041720"
  },
  {
    "text": "forth encrypting all this information as st micro electronics suggest in their",
    "start": "2041720",
    "end": "2048358"
  },
  {
    "text": "response is simply not feasible",
    "start": "2048359",
    "end": "2053720"
  },
  {
    "text": "well next was the responsible disclosure process with nxp and again we contacted nxp product security team sent them all",
    "start": "2054240",
    "end": "2060638"
  },
  {
    "text": "information and after some back and forth correspondence nxp also acknowledged the issue and said they",
    "start": "2060639",
    "end": "2066638"
  },
  {
    "text": "would release a documentation however as was the case with sd micro electronics nxp also",
    "start": "2066639",
    "end": "2073919"
  },
  {
    "text": "claimed that the s&p was not a security feature to our",
    "start": "2073919",
    "end": "2079560"
  },
  {
    "text": "surprise again nxp response and i'll be reading it from the slide the product's reference manual is",
    "start": "2079560",
    "end": "2087398"
  },
  {
    "text": "clear about the s&p not being a security feature the s&p is not mentioned in the",
    "start": "2087399",
    "end": "2094079"
  },
  {
    "text": "chapter security overview nor in the section security modules but rather in",
    "start": "2094079",
    "end": "2100560"
  },
  {
    "text": "the section on system modules the s&p is also not listed under security in the",
    "start": "2100560",
    "end": "2105839"
  },
  {
    "text": "feature list table and the chapter that describes the s&p does not mention",
    "start": "2105839",
    "end": "2113440"
  },
  {
    "text": "security well as much as we read through the nxp chip manuals and data sheet we",
    "start": "2113480",
    "end": "2122560"
  },
  {
    "text": "could not find a positive reference to the fact that the s&p was not a security",
    "start": "2122560",
    "end": "2129200"
  },
  {
    "text": "feature or mechanism that's all we can say",
    "start": "2129200",
    "end": "2134640"
  },
  {
    "text": "thank you nimrod so to summarize throughout this talk we",
    "start": "2134640",
    "end": "2140720"
  },
  {
    "text": "understood that m protection units play crucial parts in every microcontroller defense strategy and more specifically",
    "start": "2140720",
    "end": "2148160"
  },
  {
    "text": "if we're talking about automotive applications as mpus enhance the",
    "start": "2148160",
    "end": "2154960"
  },
  {
    "text": "reliability safety and security of the microcontrollers that eventually getting",
    "start": "2154960",
    "end": "2160079"
  },
  {
    "text": "into our vehicles that's why it's hard for us to accept claims that a mechanism responsible for",
    "start": "2160079",
    "end": "2167920"
  },
  {
    "text": "access control to shared memory resources is not a security feature since this is an hardware issue",
    "start": "2167920",
    "end": "2175680"
  },
  {
    "text": "of what we perceive of a missing implementation on the silicon we think that fixing its root cause is not",
    "start": "2175680",
    "end": "2182920"
  },
  {
    "text": "feasible however we can suggest the following mitigations so first test every",
    "start": "2182920",
    "end": "2189520"
  },
  {
    "text": "important claim made in the data sheet especially if we're talking about security features such as the",
    "start": "2189520",
    "end": "2197000"
  },
  {
    "text": "mpus next you can use as many as exploit mitigation as possible to",
    "start": "2197000",
    "end": "2203240"
  },
  {
    "text": "prevent simple buffer overflow to becoming arbitrary code execution",
    "start": "2203240",
    "end": "2209440"
  },
  {
    "text": "and last in the case of the sdmi electronic chip block as many as you can",
    "start": "2209440",
    "end": "2214960"
  },
  {
    "text": "using the cmpus which are much harder to disable than the",
    "start": "2214960",
    "end": "2221400"
  },
  {
    "text": "snpus so that's all from our side and thank you for",
    "start": "2221400",
    "end": "2226640"
  },
  {
    "text": "[Applause] listening and we have a few minutes for",
    "start": "2226880",
    "end": "2233599"
  },
  {
    "text": "questions if you want",
    "start": "2233599",
    "end": "2237960"
  },
  {
    "text": "guys great talk working okay um thank you very much",
    "start": "2246240",
    "end": "2252560"
  },
  {
    "text": "great talk um i have a question more related to responsible disclosure so i feel like uh this issue is kind of like",
    "start": "2252560",
    "end": "2259119"
  },
  {
    "text": "a reference issue for multiple vendors which uses similar microcontrollers right so but also in the same time what",
    "start": "2259119",
    "end": "2266240"
  },
  {
    "text": "do you think why vendors kind of like provide ridiculous responses so uh in my",
    "start": "2266240",
    "end": "2273599"
  },
  {
    "text": "opinion like this issue really could potentially call like a recall of the vehicle because it's could be unfixable",
    "start": "2273599",
    "end": "2280800"
  },
  {
    "text": "in silicon it's potentially put some be mitigations in the firmware side but i",
    "start": "2280800",
    "end": "2287440"
  },
  {
    "text": "don't believe they will be quite effective it's could be by possible so what do you think about it",
    "start": "2287440",
    "end": "2296119"
  },
  {
    "text": "so uh we actually think that as we mentioned it is it's an hardware issue",
    "start": "2297680",
    "end": "2304000"
  },
  {
    "text": "and that's why we think it's it's probably impossible to fix it",
    "start": "2304000",
    "end": "2309160"
  },
  {
    "text": "um however as mentioned the we have",
    "start": "2309160",
    "end": "2314400"
  },
  {
    "text": "suggested some mitigations they are not complete uh but that's what we can actually offer in that case uh which",
    "start": "2314400",
    "end": "2322160"
  },
  {
    "text": "vehicle been on the demo if you don't mind to disclose so we we cannot it's it's just a demo",
    "start": "2322160",
    "end": "2329359"
  },
  {
    "text": "it's not on real vehicle so it's our device it's environment okay and and yeah that's that's the idea so i try to",
    "start": "2329359",
    "end": "2337200"
  },
  {
    "text": "contact any like automotive vendors versus like microcontroller vendors",
    "start": "2337200",
    "end": "2343200"
  },
  {
    "text": "because i believe they just like push to the market their chips but automotive vendors could care potentially more",
    "start": "2343200",
    "end": "2349599"
  },
  {
    "text": "about this issue so uh of course we we have we will",
    "start": "2349599",
    "end": "2356960"
  },
  {
    "text": "publish this uh on our website and uh we will also uh got some heads up for one",
    "start": "2356960",
    "end": "2363200"
  },
  {
    "text": "of for our customers for autoive industry uh so uh which vendors we",
    "start": "2363200",
    "end": "2369680"
  },
  {
    "text": "cannot say about the unfortunately yeah okay thank you",
    "start": "2369680",
    "end": "2377400"
  },
  {
    "text": "yeah so thank you very much guys for your time",
    "start": "2382160",
    "end": "2387640"
  }
]