[
  {
    "start": "0",
    "end": "85000"
  },
  {
    "text": "okay I think we'll get started so good afternoon and welcome to this session this is the session using Emmet to",
    "start": "0",
    "end": "7799"
  },
  {
    "text": "disable Emmet and our speakers today abdul-allah Elsa Hill and rug Raghav",
    "start": "7799",
    "end": "14099"
  },
  {
    "text": "Pandey we are in Rome South Seas AV so if this",
    "start": "14099",
    "end": "19740"
  },
  {
    "text": "isn't the session you're expecting to hear you're in the wrong room I have a few notes before we get going",
    "start": "19740",
    "end": "25230"
  },
  {
    "text": "the first is to get you to stop by the business hole located at Bayside a B during the day and for the Welcome",
    "start": "25230",
    "end": "31619"
  },
  {
    "text": "Reception the most important piece tonight is 5:30 to 7:00 in the same room",
    "start": "31619",
    "end": "36840"
  },
  {
    "text": "the blackhat Arsenal is on the palm foyer on level three and you can join us",
    "start": "36840",
    "end": "42210"
  },
  {
    "text": "for the pony Awards in the Mandalay Bay BC D at 6:30 this evening so just as a",
    "start": "42210",
    "end": "49020"
  },
  {
    "text": "quick reminder if I can get you to put your phones on vibrate I know that's a lot more fun but if we can just avoid",
    "start": "49020",
    "end": "55640"
  },
  {
    "text": "interrupting the session and without further ado go take it away thank you",
    "start": "55640",
    "end": "63019"
  },
  {
    "text": "hello everyone my name is Elsa here as he said and my colleague here is Riya Lindy we are from fire I company we will",
    "start": "63019",
    "end": "71340"
  },
  {
    "text": "be introducing a new technique to disable Emmitt using Emmitt so I cannot",
    "start": "71340",
    "end": "79170"
  },
  {
    "text": "see from here can you handle very slight yeah sure so I'm a consultant at",
    "start": "79170",
    "end": "86700"
  },
  {
    "start": "85000",
    "end": "109000"
  },
  {
    "text": "mandiant Saudi Arabia Riyadh office I used to work as a MIDI software",
    "start": "86700",
    "end": "92850"
  },
  {
    "text": "developer for some local company in Saudi Arabia my current research focus is endpoint",
    "start": "92850",
    "end": "100140"
  },
  {
    "text": "security systems things like like Amit",
    "start": "100140",
    "end": "104810"
  },
  {
    "text": "my my friend here is ranked at Mandi he's a researcher at fireEye Bangalore office he is working on the ambience",
    "start": "108880",
    "end": "117549"
  },
  {
    "start": "109000",
    "end": "124000"
  },
  {
    "text": "doing the end points system mostly things like it for the company and also",
    "start": "117549",
    "end": "127930"
  },
  {
    "start": "124000",
    "end": "138000"
  },
  {
    "text": "okay sorry no we have lost the battery for design sites yeah so um yeah so that there's a",
    "start": "129489",
    "end": "142880"
  },
  {
    "start": "138000",
    "end": "222000"
  },
  {
    "text": "funny story about the behind this this man so I remember I have came across",
    "start": "142880",
    "end": "150230"
  },
  {
    "text": "post or some forum over the internet and there was a guy who claimed that he",
    "start": "150230",
    "end": "156920"
  },
  {
    "text": "found a new technique to disable Amit and you know without back that up with",
    "start": "156920",
    "end": "162200"
  },
  {
    "text": "any with it without any proof concept so people starting to make fun of him and",
    "start": "162200",
    "end": "168549"
  },
  {
    "text": "for that some of the comments actually we're mean a bit and some of the guys",
    "start": "168549",
    "end": "174980"
  },
  {
    "text": "suggested that yes you can disable Emeth using add/remove programs and this was a",
    "start": "174980",
    "end": "180590"
  },
  {
    "text": "bit funny and not only this but also aspirational to me at least I found that",
    "start": "180590",
    "end": "187600"
  },
  {
    "text": "let's say we all know that a dream programs also can wipe that program of",
    "start": "187600",
    "end": "194239"
  },
  {
    "text": "the disc but also one can think of a similar thing let's say a portion of",
    "start": "194239",
    "end": "200090"
  },
  {
    "text": "code that wipe out the application from the memory itself and this is what leads",
    "start": "200090",
    "end": "207109"
  },
  {
    "text": "to our technique here there's some something that that is equivalent to the",
    "start": "207109",
    "end": "214430"
  },
  {
    "text": "add/remove programs that wipe out and it from from the memory rather than the disk so we'll be focusing on introducing",
    "start": "214430",
    "end": "224720"
  },
  {
    "text": "a new technique to disable Amit using Emeth and we will demonstrate that and at the end of the session but before",
    "start": "224720",
    "end": "231739"
  },
  {
    "text": "that we will introduce Amit we will talk briefly about it's a protections and also we will",
    "start": "231739",
    "end": "239459"
  },
  {
    "text": "go quickly through the previous techniques to disable Emmett and previous evasion mechanisms and we will",
    "start": "239459",
    "end": "247859"
  },
  {
    "text": "end with summarizing a bit about having custom antiques of lloyd solution and",
    "start": "247859",
    "end": "254579"
  },
  {
    "text": "we'll have some time for the questions so Amit is a security detection tool",
    "start": "254579",
    "end": "260310"
  },
  {
    "text": "from Microsoft that adds security mitigations to the user land protected",
    "start": "260310",
    "end": "266669"
  },
  {
    "text": "programs beyond these protections built and operating system one could really",
    "start": "266669",
    "end": "273720"
  },
  {
    "text": "think from it as antics oblige system simply like this the the main reason for",
    "start": "273720",
    "end": "279960"
  },
  {
    "text": "omit the main purpose is to raise the cost of exploitation the Riverland prevent exploitation it works merely by",
    "start": "279960",
    "end": "288270"
  },
  {
    "text": "injecting its dll to have protected the programs and mainly it works and depends",
    "start": "288270",
    "end": "294240"
  },
  {
    "text": "on them aligned hooking and we will discuss what their line working in next slide and it does various changes to",
    "start": "294240",
    "end": "301650"
  },
  {
    "text": "their protected process like adding a new exception handlers to vs. and manipulating the debugging it registers",
    "start": "301650",
    "end": "309500"
  },
  {
    "text": "so we can see that sorry we can see their load library we can see the load",
    "start": "309889",
    "end": "317520"
  },
  {
    "start": "310000",
    "end": "378000"
  },
  {
    "text": "library function which is owned as API and we see that it has been how then",
    "start": "317520",
    "end": "323639"
  },
  {
    "text": "like one line or line working working we can see that there is a detour at the top of this function this detour is",
    "start": "323639",
    "end": "331380"
  },
  {
    "text": "merely a jump to that detouring functions so we see the deterrent",
    "start": "331380",
    "end": "336599"
  },
  {
    "text": "function then here on the right side this is where Emmett implements it's a protection so emit basically any code",
    "start": "336599",
    "end": "343409"
  },
  {
    "text": "will call lot library will take this jump first to the editorial function which will emit analyzes this color code",
    "start": "343409",
    "end": "352020"
  },
  {
    "text": "to see if it's a safe code or not and then if it's a safe code M it will end",
    "start": "352020",
    "end": "357419"
  },
  {
    "text": "up in jumping into the function prologue so this function at the right bottom corner it's the original prologue for",
    "start": "357419",
    "end": "363750"
  },
  {
    "text": "the load library at the end of this there is that jump which gets back to them to execute the rest of the load",
    "start": "363750",
    "end": "371039"
  },
  {
    "text": "library function and this is how the online working that line hooking is working quirements sorry",
    "start": "371039",
    "end": "379170"
  },
  {
    "start": "378000",
    "end": "573000"
  },
  {
    "text": "so we'll talk a bit about emitted protections briefly because some of the",
    "start": "379170",
    "end": "384270"
  },
  {
    "text": "audience may have may not be familiar with Emmitt so M it comes to enforce",
    "start": "384270",
    "end": "390120"
  },
  {
    "text": "some of the protections like the seh or P which is the structured exception handling of a rights protection and they",
    "start": "390120",
    "end": "398700"
  },
  {
    "text": "did the famous did data execute that execution prevention and we have the SLR also so all of these Emmett can enforce",
    "start": "398700",
    "end": "407520"
  },
  {
    "text": "them no matter the underlying system and no matter whether of their protected applications received application has",
    "start": "407520",
    "end": "414330"
  },
  {
    "text": "the module have been combined with these options or not it doesn't really matter because M it will enforce these",
    "start": "414330",
    "end": "420120"
  },
  {
    "text": "protections also I met brilliant there are famous allocations type of",
    "start": "420120",
    "end": "425190"
  },
  {
    "text": "allocations and in exploits like null page allocation at the hip spring also M",
    "start": "425190",
    "end": "431730"
  },
  {
    "text": "it gives an important feature which is the AF this feature means to mints to to",
    "start": "431730",
    "end": "439650"
  },
  {
    "text": "detect official codes typical shellcodes like Metasploit shell code which iterates over the the exported address",
    "start": "439650",
    "end": "449310"
  },
  {
    "text": "table of modules like ER 32 and kennel bays and interior ll so m it implements",
    "start": "449310",
    "end": "457470"
  },
  {
    "text": "that debugging register and its uses them to place a hardware breakpoints and",
    "start": "457470",
    "end": "462930"
  },
  {
    "text": "export the table and these modules to see if there is any thread tries to access these exports a table and when",
    "start": "462930",
    "end": "469950"
  },
  {
    "text": "when when this having its table this thread and it will analyze whether if it's a safe code or not also omit",
    "start": "469950",
    "end": "479010"
  },
  {
    "text": "imported and important protections against Arab attacks the detail oriented",
    "start": "479010",
    "end": "484500"
  },
  {
    "text": "programming attacks from probe guard project so some of these protections",
    "start": "484500",
    "end": "491940"
  },
  {
    "text": "like memory protection checks which gives additional monitoring to that critical on this API is like virtual",
    "start": "491940",
    "end": "498870"
  },
  {
    "text": "projects which could be used to mark the stack as executable and Toby bastard",
    "start": "498870",
    "end": "504849"
  },
  {
    "text": "call or check which can be used to detect any windows ABI gets called with",
    "start": "504849",
    "end": "511089"
  },
  {
    "text": "call instruction rather than were in jump instruction or return instruction",
    "start": "511089",
    "end": "516550"
  },
  {
    "text": "as order land call call instruction also it detects the stack of everything and",
    "start": "516550",
    "end": "523380"
  },
  {
    "text": "it has another feature which is the simulate execution flow and this feature in it when it returns from critical",
    "start": "523380",
    "end": "530649"
  },
  {
    "text": "unders ABI it manipulates their ESP the stack register and it will see if it's -",
    "start": "530649",
    "end": "537040"
  },
  {
    "text": "it will simulate and that will see if this if this is a context of Rob gadgets",
    "start": "537040",
    "end": "542740"
  },
  {
    "text": "do this if it's a Rob attack also em it adds more more randomization for the",
    "start": "542740",
    "end": "550569"
  },
  {
    "text": "bottom up applications through bottom up a SLR bottom applications like heap and",
    "start": "550569",
    "end": "555579"
  },
  {
    "text": "and stack also it adds additional checks on the load library API so it prevents",
    "start": "555579",
    "end": "563350"
  },
  {
    "text": "loading libraries through the network through universal naming convention but",
    "start": "563350",
    "end": "570990"
  },
  {
    "text": "so Amit also hooks even the lowest level of ABI things and ntdll and also it's it",
    "start": "572790",
    "end": "581529"
  },
  {
    "start": "573000",
    "end": "633000"
  },
  {
    "text": "tries to stop the attacks or the attackers who's trying to bypass Amit by",
    "start": "581529",
    "end": "586899"
  },
  {
    "text": "jumping over the installed detours this is the antidote or protection it also",
    "start": "586899",
    "end": "592300"
  },
  {
    "text": "gives the user the ability to configure a list of banned functions so these",
    "start": "592300",
    "end": "598660"
  },
  {
    "text": "functions cannot be used within the protected program it also adds more",
    "start": "598660",
    "end": "603670"
  },
  {
    "text": "verification and checking to the certificate chain trusts and also it",
    "start": "603670",
    "end": "608769"
  },
  {
    "text": "gives the user the ability to to configure a list of modules that not be",
    "start": "608769",
    "end": "615189"
  },
  {
    "text": "- not to be loaded for certain program this is the era of ASR and we have the",
    "start": "615189",
    "end": "621550"
  },
  {
    "text": "EF extinction plus this is an extension to the AF objection to the Fichte stack",
    "start": "621550",
    "end": "627069"
  },
  {
    "text": "to everything and PE header reads",
    "start": "627069",
    "end": "632610"
  },
  {
    "start": "633000",
    "end": "696000"
  },
  {
    "text": "so here we will discuss some of the previous technique to disable in it mostly things published by offensive",
    "start": "633960",
    "end": "641850"
  },
  {
    "text": "security so an m8 4.1 there was a global",
    "start": "641850",
    "end": "647460"
  },
  {
    "text": "variable exported and writable data section omits who actually was using",
    "start": "647460",
    "end": "653339"
  },
  {
    "text": "this global variable at this offset of them a DLL it was every every production",
    "start": "653339",
    "end": "659430"
  },
  {
    "text": "and em it was checking for this variable if it's zero then it will not be activated so simply anyone can just zero",
    "start": "659430",
    "end": "666959"
  },
  {
    "text": "out this variable and the eMeter protections will goes and and inactivated we have carried the same",
    "start": "666959",
    "end": "674820"
  },
  {
    "text": "kind of analysis on all version of Emmett Emmett 2.1 we have found it has the same weakness so basically we think",
    "start": "674820",
    "end": "682020"
  },
  {
    "text": "or we suspect at least that this protection is is found like in early",
    "start": "682020",
    "end": "687170"
  },
  {
    "text": "versions of Emmett it has been there but nobody noticed maybe except and emit",
    "start": "687170",
    "end": "693690"
  },
  {
    "text": "very important one to disable their protections it requires a special",
    "start": "693690",
    "end": "699540"
  },
  {
    "text": "treatment so this is AF which capable of detecting shellcodes so basically if",
    "start": "699540",
    "end": "708360"
  },
  {
    "text": "this is since Emmett uses the debugging register anyone can should or should have to clear out the hardware break",
    "start": "708360",
    "end": "716100"
  },
  {
    "text": "points which are implemented by the debugging register can disable this protection to do this one way is to use",
    "start": "716100",
    "end": "723330"
  },
  {
    "text": "that context structure to be to to get an access to the debugging register we",
    "start": "723330",
    "end": "729720"
  },
  {
    "text": "can see that they are 0 the other one they are 2 dr3 this debugging it just cells are being used for will omit to",
    "start": "729720",
    "end": "737670"
  },
  {
    "text": "detect shellcodes so 0 what these registers that would to disable the AF",
    "start": "737670",
    "end": "744570"
  },
  {
    "text": "protection and then one should need to use the anti safe context thread to set",
    "start": "744570",
    "end": "751529"
  },
  {
    "text": "this code as a zero out context structure to the current thread and then disable various protection for m8 5.0",
    "start": "751529",
    "end": "760520"
  },
  {
    "text": "offensive security have found the same issue but this time the global variable is placed on the hip weather",
    "start": "760520",
    "end": "767110"
  },
  {
    "text": "on the on the data section within a",
    "start": "767110",
    "end": "772300"
  },
  {
    "text": "larger large struct structure offensive security name that config gets tracked",
    "start": "772300",
    "end": "779730"
  },
  {
    "text": "so at a certain offset then when the DLL there is a pointer to this larger structure and then within a certain",
    "start": "779730",
    "end": "787420"
  },
  {
    "text": "offset there is this global variable zero out this variable and emitter",
    "start": "787420",
    "end": "793269"
  },
  {
    "text": "protection as well goes and inactivated to disable AF they have found there is",
    "start": "793269",
    "end": "800680"
  },
  {
    "text": "unhooked pointer undeterred let's say to the empty set context thread which",
    "start": "800680",
    "end": "807250"
  },
  {
    "text": "should be used to assign the zero out context structure to the current thread",
    "start": "807250",
    "end": "812410"
  },
  {
    "text": "I've been disabling the AF for M 85.1 that's the same thing happened again",
    "start": "812410",
    "end": "818380"
  },
  {
    "text": "but this time the larger larger global variable have been set on that and the",
    "start": "818380",
    "end": "826390"
  },
  {
    "text": "and read-only memory and instead of writable memory but they have found",
    "start": "826390",
    "end": "831640"
  },
  {
    "text": "there is unhooked pointer to aunty protect virtual memory and they have used this and hoped pointer to that API",
    "start": "831640",
    "end": "838089"
  },
  {
    "text": "to mark this page as writable and then be carried the same attack the same way",
    "start": "838089",
    "end": "846570"
  },
  {
    "start": "853000",
    "end": "903000"
  },
  {
    "text": "so the techniques for evaluation now what Abdul Allah mentioned in the previous slides were they were like",
    "start": "853350",
    "end": "859240"
  },
  {
    "text": "disables so you go ahead you change one offset and then even goes away so it's like that but essentially what what we",
    "start": "859240",
    "end": "867190"
  },
  {
    "text": "can do is we can boil down to each and every fraction that comes in and individually try to break them apart now",
    "start": "867190",
    "end": "873220"
  },
  {
    "text": "this slide would be about that only so the most use protections statistically speaking which which usually thought the",
    "start": "873220",
    "end": "879040"
  },
  {
    "text": "exploit gates are the I don't know public exploits that coming through our stack the would call a check same exact",
    "start": "879040",
    "end": "885370"
  },
  {
    "text": "flow and EF the first three use in line hooking to calculate whether the return",
    "start": "885370",
    "end": "891610"
  },
  {
    "text": "address belongs to any return enter programming gadget or not and the last one uses hardware breakpoint along",
    "start": "891610",
    "end": "897250"
  },
  {
    "text": "with exception handling to check whether they are validated or not so amongst the",
    "start": "897250",
    "end": "906070"
  },
  {
    "start": "903000",
    "end": "1020000"
  },
  {
    "text": "most use prediction has an in case of stacked what we have two bypasses as of now the further both are not new the",
    "start": "906070",
    "end": "912010"
  },
  {
    "text": "first one was I think shown by mr. Jared Ahmad in his paper on defeating him at",
    "start": "912010",
    "end": "918130"
  },
  {
    "text": "four point one and bromium and second one was which we found in the wild in operation clandestine voltage fire I",
    "start": "918130",
    "end": "923980"
  },
  {
    "text": "discovered the uses of custom class to eventually make sure that stack the word check fails out so the way the stackable",
    "start": "923980",
    "end": "931300"
  },
  {
    "text": "check works is when you pivot from a normal exploit so you have to convert",
    "start": "931300",
    "end": "937960"
  },
  {
    "text": "the stack pointer to make sure that it points towards a controlled region in heap so the stack pointer will be",
    "start": "937960",
    "end": "944590"
  },
  {
    "text": "differentiated and it won't be lying into the region that stays inside environmental block which is the stacks",
    "start": "944590",
    "end": "951520"
  },
  {
    "text": "upper limit and lower limit upon the initial thread creation so email basically checks upon any API hook",
    "start": "951520",
    "end": "957760"
  },
  {
    "text": "whether any critical API when it's being called that the stack pointer is within that region or not in case of most exploits in fact every",
    "start": "957760",
    "end": "965260"
  },
  {
    "text": "one of them singly what happens is the pointer is not within that region so emit blocks that so in order to avoid",
    "start": "965260",
    "end": "972490"
  },
  {
    "text": "that what we do is the first a stack switching so basically this is roughly",
    "start": "972490",
    "end": "978250"
  },
  {
    "text": "how would I hope you guys can see that so what you do is instead of executing the gadgets on heap exactly you make",
    "start": "978250",
    "end": "985360"
  },
  {
    "text": "sure that all the gadgets are pushed to stack one by one stack is negated and after that stack is again is reversed",
    "start": "985360",
    "end": "992530"
  },
  {
    "text": "back so in case in this case the first instruction is you exchange a register with stack pointer and then you prepend",
    "start": "992530",
    "end": "998830"
  },
  {
    "text": "and append a specific sense of set of instructions to all the gadgets again and again a repetitive manner after that",
    "start": "998830",
    "end": "1004290"
  },
  {
    "text": "everything goes onto stack and you can execute the same thing and when you call an API from that the the stack pointer",
    "start": "1004290",
    "end": "1010320"
  },
  {
    "text": "will be in the original stack location so the lower region and the upper region has in the lower limit and the upper",
    "start": "1010320",
    "end": "1015960"
  },
  {
    "text": "limit of the stack regions will be validated the second one is a custom",
    "start": "1015960",
    "end": "1022080"
  },
  {
    "start": "1020000",
    "end": "1092000"
  },
  {
    "text": "class so this was found in the wild in operation in wolf now the Iraqis did was basically",
    "start": "1022080",
    "end": "1027808"
  },
  {
    "text": "they created a custom class and they created a virtual function inside that now the technique of universally reading",
    "start": "1027809",
    "end": "1034558"
  },
  {
    "text": "and writing any region of memory it's quite known since a long time using class vector objects so what they did",
    "start": "1034559",
    "end": "1040168"
  },
  {
    "text": "was they called the custom class in such a manner that it required a lot of",
    "start": "1040169",
    "end": "1045240"
  },
  {
    "text": "arguments and they put up all the arguments as the Rob gadgets that he wanted to execute now when the code got",
    "start": "1045240",
    "end": "1051299"
  },
  {
    "text": "converted to a just-in-time compilation the basically all the gadgets who are supposed to be on the stack when the",
    "start": "1051299",
    "end": "1057419"
  },
  {
    "text": "function was called and because we can override a function pointer we can point it to anywhere else but the thing was",
    "start": "1057419",
    "end": "1063840"
  },
  {
    "text": "the parameters are in the stack somewhere downward so it's it's not directly aligned so you cannot just do a Rob sled or stuff like that and just",
    "start": "1063840",
    "end": "1069960"
  },
  {
    "text": "return again and again into the same thing so we had to find a gadget in which it was like a DSP comma 0 X 58 or",
    "start": "1069960",
    "end": "1078120"
  },
  {
    "text": "something like that and that would slide the stack pointer exactly into the parameters that were previously craft into the stack and eventually the",
    "start": "1078120",
    "end": "1085559"
  },
  {
    "text": "attackers found out that this is the best mechanism to avoid stuck to it because there will be no detection why we call an API amongst the next check",
    "start": "1085559",
    "end": "1094230"
  },
  {
    "start": "1092000",
    "end": "1139000"
  },
  {
    "text": "the college check is the one which is them the most prominent one it basically checks whether so let's say that there's",
    "start": "1094230",
    "end": "1100169"
  },
  {
    "text": "an API that is getting hooked when emid gets the callback for that it will check whether the return address for that API",
    "start": "1100169",
    "end": "1105840"
  },
  {
    "text": "is preceded by a call instruction or not and then it checks whether that call",
    "start": "1105840",
    "end": "1111120"
  },
  {
    "text": "instruction will point to the API that was hooked or not so in case of E even",
    "start": "1111120",
    "end": "1117120"
  },
  {
    "text": "if you try to forge that it will basically validate whether it destination is proper as well as the source is proper and after that it will",
    "start": "1117120",
    "end": "1124139"
  },
  {
    "text": "simply either terminate it or give it a green flag and for that either we use a",
    "start": "1124139",
    "end": "1129149"
  },
  {
    "text": "call gadget as in we find a gadget which basically calls an API and then returns or we can use return into shell code so",
    "start": "1129149",
    "end": "1139649"
  },
  {
    "start": "1139000",
    "end": "1183000"
  },
  {
    "text": "I think this is very obvious so what you do is you find out a call register return gadget and you populate the",
    "start": "1139649",
    "end": "1145860"
  },
  {
    "text": "register of the value of virtual protect or any single API that can be called to mark a shell code as rwx and then you",
    "start": "1145860",
    "end": "1151919"
  },
  {
    "text": "can point to that so because all this we are doing just to mark our memory as",
    "start": "1151919",
    "end": "1156960"
  },
  {
    "text": "so we have to make sure that we just follow one API and it works out so in this case when you in this case it's",
    "start": "1156960",
    "end": "1163620"
  },
  {
    "text": "called a pointer dereference by ax ECX and return so ECX points to the voice",
    "start": "1163620",
    "end": "1168899"
  },
  {
    "text": "who protects IAT inside a message t ml not dll then eventually it ends up marking the stack as RW x but when you",
    "start": "1168899",
    "end": "1174059"
  },
  {
    "text": "may checks the return address and it goes back it will see that this is validated because there's a legitimate",
    "start": "1174059",
    "end": "1179940"
  },
  {
    "text": "call instruction which is going on the next is return into shell code now let's",
    "start": "1179940",
    "end": "1186120"
  },
  {
    "start": "1183000",
    "end": "1229000"
  },
  {
    "text": "say that call and return are not available so what do you do now emit",
    "start": "1186120",
    "end": "1191850"
  },
  {
    "text": "checks the return address it doesn't check whether the return address as executable permissions all right able or readability it doesn't care it just",
    "start": "1191850",
    "end": "1198600"
  },
  {
    "text": "checks whether the return address is preceded by a call gadget or not so what do you do you follow the same logic and",
    "start": "1198600",
    "end": "1204779"
  },
  {
    "text": "you make sure that you populate one register with whatever value you want to do and you jump into it and make sure",
    "start": "1204779",
    "end": "1211110"
  },
  {
    "text": "the return address is pointing to the shell code but now when email checks the shell code basically that that that area",
    "start": "1211110",
    "end": "1216450"
  },
  {
    "text": "you can craft so what do you do you go a little back from the shell code and you put a little call gadget over there because it's completely controllable by",
    "start": "1216450",
    "end": "1222690"
  },
  {
    "text": "you even though it never got executed it will still validate the logic and it will fail the next one is same exit flow",
    "start": "1222690",
    "end": "1231779"
  },
  {
    "start": "1229000",
    "end": "1276000"
  },
  {
    "text": "so same exit flow is a little bit it's it's like a it's like a call precedence check but in a little hyperventilated",
    "start": "1231779",
    "end": "1238440"
  },
  {
    "text": "form so what it does is basically instead of checking whether the return address hasn't it now this is preceded",
    "start": "1238440",
    "end": "1245850"
  },
  {
    "text": "by a call gadget or not it will it will simulate the next fifteen instructions which is by default and you can setup",
    "start": "1245850",
    "end": "1251730"
  },
  {
    "text": "that any way you want it will check whether the next fifteen instructions are going into a return or not and if",
    "start": "1251730",
    "end": "1257309"
  },
  {
    "text": "they are going into a return instruction they will check what particular return address is being given for that and it",
    "start": "1257309",
    "end": "1263190"
  },
  {
    "text": "will validate that return address for the caller check so it's it's a little complicated but I think we can get",
    "start": "1263190",
    "end": "1269520"
  },
  {
    "text": "through it so for that we have a double call gadget or nearly twenty returns very calculated returns which can",
    "start": "1269520",
    "end": "1274799"
  },
  {
    "text": "completely evade everything so I you can find these this gadget call es IBP ESP",
    "start": "1274799",
    "end": "1281549"
  },
  {
    "start": "1276000",
    "end": "1400000"
  },
  {
    "text": "and EBX in the most popular dll that is ms HTML and what you do is because there",
    "start": "1281549",
    "end": "1287520"
  },
  {
    "text": "will be no return so what do you do you populate two first to non-volatile registers one with the API you want to call with the",
    "start": "1287520",
    "end": "1293670"
  },
  {
    "text": "parameters and the second one with the shell code address you want to call and you make sure you put the stack in such a way that this thing works out so when",
    "start": "1293670",
    "end": "1300660"
  },
  {
    "text": "email validates the call ESI it checks okay find the return addresses that call EVP the if you go back its call es",
    "start": "1300660",
    "end": "1307350"
  },
  {
    "text": "either it's validated ESI contains the proper address say if it works out then it goes forward into EBP wherever it's",
    "start": "1307350",
    "end": "1314280"
  },
  {
    "text": "being pointed which should be the shellcode and it will follow the next 15 or maybe depending on whatever they use",
    "start": "1314280",
    "end": "1320100"
  },
  {
    "text": "a configuration setup it will check the 15 instructions and it will check whether there is a return or not but in",
    "start": "1320100",
    "end": "1326160"
  },
  {
    "text": "in a shellcode I think you can safely put an op sled before that and that will work out and the old check will fail the",
    "start": "1326160",
    "end": "1334140"
  },
  {
    "text": "next is 20 return instructions now finding a funnier double call is very hard it's it's not it it's not that easy",
    "start": "1334140",
    "end": "1340290"
  },
  {
    "text": "so the next approach actually we have seen this in the while being used by I think operation client is Teen Wolf",
    "start": "1340290",
    "end": "1347940"
  },
  {
    "text": "itself yeah I think so so what they were doing was they would put up the virtual",
    "start": "1347940",
    "end": "1353610"
  },
  {
    "text": "protect the address inside a register call it normally and then make sure that the call that they do is done properly",
    "start": "1353610",
    "end": "1360540"
  },
  {
    "text": "as in in this case it was called e^x and return and what they will do is when you",
    "start": "1360540",
    "end": "1366480"
  },
  {
    "text": "have to supply the return address after the API address in which you return into through the Rob gadgets you put the",
    "start": "1366480",
    "end": "1372210"
  },
  {
    "text": "return address as the return that is after call IX and you make sure that you",
    "start": "1372210",
    "end": "1377460"
  },
  {
    "text": "call the same thing like 15 to 20 times after that so what eventually happens is when virtual but it gets called the return",
    "start": "1377460",
    "end": "1383670"
  },
  {
    "text": "address is pointing to the return in call ax comma return so if you go back",
    "start": "1383670",
    "end": "1388860"
  },
  {
    "text": "you will see a call every time emit tries to validate the logic and by the time you hit 20 instructions the I think",
    "start": "1388860",
    "end": "1394680"
  },
  {
    "text": "the buffer will expire so at that time this thing works out very nicely so the",
    "start": "1394680",
    "end": "1400950"
  },
  {
    "text": "next EF so yeah if it's basically export address stable filtering what it does is it will",
    "start": "1400950",
    "end": "1406260"
  },
  {
    "text": "put up a hardware breakpoint on very specific set of addresses and it will check whether the address is being",
    "start": "1406260",
    "end": "1412410"
  },
  {
    "text": "violated for read access and it will check whether that thing is coming from a loaded module or not so let's say that",
    "start": "1412410",
    "end": "1419340"
  },
  {
    "text": "it has put the breakpoint on kernel based kernel that you doing dealers export artists table and the",
    "start": "1419340",
    "end": "1425320"
  },
  {
    "text": "moment that access violation hits because the shellcode has to grab the addresses from the export address of any",
    "start": "1425320",
    "end": "1430500"
  },
  {
    "text": "loaded DLL once they do that the exception hits and the contact structure",
    "start": "1430500",
    "end": "1435909"
  },
  {
    "text": "points to EAP which would be the instruction pointer that obviously will I mean in in most cases it will always",
    "start": "1435909",
    "end": "1441640"
  },
  {
    "text": "belong to a region which is not the part of any loaded module and email does the checking using peb so that is how it",
    "start": "1441640",
    "end": "1448090"
  },
  {
    "text": "validates and this this usually filters out most of the Metasploit shellcodes unless you have tampered with the",
    "start": "1448090",
    "end": "1454000"
  },
  {
    "text": "shellcode generation mechanism so for this we have two evasions one would be",
    "start": "1454000",
    "end": "1459760"
  },
  {
    "text": "modifying the peb so what do you do basically you can boil it as much as you",
    "start": "1459760",
    "end": "1467440"
  },
  {
    "text": "want but we can play around the detection logic that he met creates so what we do is we find out V V user PB to",
    "start": "1467440",
    "end": "1474429"
  },
  {
    "text": "find out the first loaded module that should be the executable section and let's say the executed module is",
    "start": "1474429",
    "end": "1480340"
  },
  {
    "text": "Internet Explorer Zone B image now you try to find that and you start reading",
    "start": "1480340",
    "end": "1486220"
  },
  {
    "text": "the first 1000 bytes that should be the first page and you take the current instruction pointer you go back thousand",
    "start": "1486220",
    "end": "1492669"
  },
  {
    "text": "bytes and you start writing the same thing again after that you go and alter the PB to make sure that the original",
    "start": "1492669",
    "end": "1499419"
  },
  {
    "text": "image base address is not pointing to where it's supposed we were supposed to be and it's now pointing to your",
    "start": "1499419",
    "end": "1504820"
  },
  {
    "text": "shellcode minus 1000 so when a mate tries to get the violation address and",
    "start": "1504820",
    "end": "1510399"
  },
  {
    "text": "it sees whether this thing belongs to any P P loaded module or not the P check will will work out why because we simply",
    "start": "1510399",
    "end": "1517330"
  },
  {
    "text": "copied the main executables image before the shellcode and the PB check will also figure out because it's essentially a",
    "start": "1517330",
    "end": "1524289"
  },
  {
    "text": "part of loaded module because email doesn't cash or kind of maintain any internal peb list it relies on the",
    "start": "1524289",
    "end": "1529630"
  },
  {
    "text": "additional list so the next one is using import address table instead of export",
    "start": "1529630",
    "end": "1535960"
  },
  {
    "start": "1532000",
    "end": "1589000"
  },
  {
    "text": "understable now II met has only access to for debug registers through which it applies the",
    "start": "1535960",
    "end": "1541139"
  },
  {
    "text": "breakpoint so it can put export address filtering on maybe for dealers but at",
    "start": "1541139",
    "end": "1547240"
  },
  {
    "text": "the end of the day if you're using the import address table of another DLL which is which is kind of pointing to",
    "start": "1547240",
    "end": "1552549"
  },
  {
    "text": "kernel32 or let's say base or even ntdll you can figure out some API addresses which can be useful",
    "start": "1552549",
    "end": "1558500"
  },
  {
    "text": "later on and the check will not trigger so this we have seen in the wild attacker is using MSB CRT and user that",
    "start": "1558500",
    "end": "1565130"
  },
  {
    "text": "reduce import address table and they kind of grab the address of get",
    "start": "1565130",
    "end": "1570410"
  },
  {
    "text": "procedural address inside Colonel value and from that they grab the address of whatever they want and then they call it because the EF logic doesn't apply for",
    "start": "1570410",
    "end": "1577340"
  },
  {
    "text": "in line ok it has to apply only on the hardware breakpoint you can call whatever API you want after you have",
    "start": "1577340",
    "end": "1583400"
  },
  {
    "text": "shell code execution and emit will be I mean completely evaded because of that",
    "start": "1583400",
    "end": "1589330"
  },
  {
    "start": "1589000",
    "end": "1649000"
  },
  {
    "text": "alright so the next is targeted evasion now now let's see that let's say that",
    "start": "1589360",
    "end": "1595660"
  },
  {
    "text": "individually reversing each and every protection trying to figure out bypasses is it's a little tidy I mean it's it",
    "start": "1595660",
    "end": "1603080"
  },
  {
    "text": "it's too it's too hard of a task to achieve in a very less time so rather",
    "start": "1603080",
    "end": "1608630"
  },
  {
    "text": "than that and if you think about any attacker who doesn't have much resources who can understand this kind of stuff",
    "start": "1608630",
    "end": "1615490"
  },
  {
    "text": "they can simply look for a mate and figure out a way to evade that now the",
    "start": "1615490",
    "end": "1620510"
  },
  {
    "text": "problem with this approach is it's very product specific if emit is not there it will not work and the failure chances",
    "start": "1620510",
    "end": "1625550"
  },
  {
    "text": "are high so it's it's similar to the disable version in which you find an offset and you terminate it and you put",
    "start": "1625550",
    "end": "1630620"
  },
  {
    "text": "zero over there because even in that case if email doesn't exist that officer doesn't exist and the application will",
    "start": "1630620",
    "end": "1636710"
  },
  {
    "text": "crash so and the advantages are it's very easy to deploy it's it's very easy",
    "start": "1636710",
    "end": "1642110"
  },
  {
    "text": "to find to be honest and it's it's basically a hook evasion using return oriented programming so forward so",
    "start": "1642110",
    "end": "1651010"
  },
  {
    "start": "1649000",
    "end": "1677000"
  },
  {
    "text": "assumptions are obviously that we have all the DEP vision API is like protect virtual memory virtual protect e X",
    "start": "1651010",
    "end": "1657200"
  },
  {
    "text": "etcetera all we can have we can do cross process tampering using right process memory or we can do a one-shot deal a",
    "start": "1657200",
    "end": "1663050"
  },
  {
    "text": "load from load library so as long as we can call one single API we can put in every effort that we want obviously we",
    "start": "1663050",
    "end": "1669590"
  },
  {
    "text": "can we can call multiple api's but it's it's good to make sure that the chain is as minimalistic as possible so the next",
    "start": "1669590",
    "end": "1678800"
  },
  {
    "start": "1677000",
    "end": "1700000"
  },
  {
    "text": "so basically the approach is you find the API address and there will be a detoured hook over there and you can",
    "start": "1678800",
    "end": "1684740"
  },
  {
    "text": "check whether the function prologue is reachable from the vetoed hook and if there is a way to calculate the",
    "start": "1684740",
    "end": "1690080"
  },
  {
    "text": "exact address to where you have to jump instead of the way you don't have to jump we can jump to the save prologue",
    "start": "1690080",
    "end": "1696470"
  },
  {
    "text": "and we can completely read all the hooks and it will return back again so I think",
    "start": "1696470",
    "end": "1701659"
  },
  {
    "start": "1700000",
    "end": "1756000"
  },
  {
    "text": "Abdullah mentioned something like this before for load library don't know if you look at the same thing in virtual",
    "start": "1701659",
    "end": "1706909"
  },
  {
    "text": "protect what happens is basically this is the address for the API and this is",
    "start": "1706909",
    "end": "1713090"
  },
  {
    "text": "the D word for the offset if you add to this address you will reach this address that is how a relative jump works now",
    "start": "1713090",
    "end": "1720830"
  },
  {
    "text": "through Rob gadgets we can we can obviously dereference a pointer we can add we can subscribe that is I mean it's",
    "start": "1720830",
    "end": "1726559"
  },
  {
    "text": "it's very common so what we do is we take this address we add one and we take this address we",
    "start": "1726559",
    "end": "1731840"
  },
  {
    "text": "add both to the API and then we add 26 to this so essentially we reach this area and this thing works on quite a bit",
    "start": "1731840",
    "end": "1738919"
  },
  {
    "text": "of emits versions and what happens is you have an API address which you can call it will it has a complete original",
    "start": "1738919",
    "end": "1745190"
  },
  {
    "text": "prologue which was overwritten by email and it also contains a jump which will go back and then completely complete the",
    "start": "1745190",
    "end": "1751279"
  },
  {
    "text": "whole simulation of the API so basically",
    "start": "1751279",
    "end": "1757309"
  },
  {
    "text": "this is an example of the chain required the gadgets are not very very difficult",
    "start": "1757309",
    "end": "1762740"
  },
  {
    "text": "to find it's just add and increase and move and I guess that's it so after that",
    "start": "1762740",
    "end": "1768500"
  },
  {
    "text": "what happens is we can do virtual protect without ever hitting umit's hook and we can get over it",
    "start": "1768500",
    "end": "1774500"
  },
  {
    "text": "after that for the EF check again we can do that obviously with shellcode that would be much easier compared to",
    "start": "1774500",
    "end": "1779779"
  },
  {
    "text": "compared to return oriented programming and if if the possible chance of failure",
    "start": "1779779",
    "end": "1785450"
  },
  {
    "text": "is it's very vital maybe somebody can use a little bit of conditional return",
    "start": "1785450",
    "end": "1791389"
  },
  {
    "text": "oriented programming to make sure that even though this fails the application should not crash and it should exploit normally so the application of evasion",
    "start": "1791389",
    "end": "1800840"
  },
  {
    "start": "1799000",
    "end": "1872000"
  },
  {
    "text": "research the problem the exploit detection products are that most of them have shared protections now if one",
    "start": "1800840",
    "end": "1807470"
  },
  {
    "text": "product has to offer offer something the next product also has to offer that and it has to add something more additive to",
    "start": "1807470",
    "end": "1814970"
  },
  {
    "text": "make sure that this thing sells and sometimes a few extra on each of them sometimes they're even less",
    "start": "1814970",
    "end": "1821070"
  },
  {
    "text": "than the other one if you compare multiple products and some are modded over each other like with the example of",
    "start": "1821070",
    "end": "1826110"
  },
  {
    "text": "college tech the the people who have taken the code from rob guard again they have they only taken the check which way",
    "start": "1826110",
    "end": "1832740"
  },
  {
    "text": "which which basically validates whether the return address is preceded by a proper call or not but nobody nobody had",
    "start": "1832740",
    "end": "1840420"
  },
  {
    "text": "the code other than obviously Microsoft to check whether the the return had the",
    "start": "1840420",
    "end": "1846780"
  },
  {
    "text": "call gadget that was preceded by the return address is actually pointing to the hooked API that would have been a",
    "start": "1846780",
    "end": "1852870"
  },
  {
    "text": "little difficult and because of this if if you evade one product the I mean if",
    "start": "1852870",
    "end": "1859530"
  },
  {
    "text": "the protections not not as very specific offset or or a gadget view it it affects others and because of that if there is a",
    "start": "1859530",
    "end": "1866700"
  },
  {
    "text": "design flaw I mean it's it's just it works on all of them and the main",
    "start": "1866700",
    "end": "1873780"
  },
  {
    "start": "1872000",
    "end": "1913000"
  },
  {
    "text": "highlights of all the exploited detection products right now I'll return address validation basically who can API",
    "start": "1873780",
    "end": "1880260"
  },
  {
    "text": "in a check whether it's proper not you can put up some heuristics on that which are a little more common just loaded",
    "start": "1880260",
    "end": "1886980"
  },
  {
    "text": "modules check is most common and you can do the exception validation as in you can put up page guard you can put up",
    "start": "1886980",
    "end": "1892800"
  },
  {
    "text": "page no access somewhere or you can even put a hardware breakpoint again that's limited a little bit and you can then",
    "start": "1892800",
    "end": "1898470"
  },
  {
    "text": "validate the exception for readwrite access to make sure that this thing is proper or not other than that the best",
    "start": "1898470",
    "end": "1904530"
  },
  {
    "text": "one is attack surface reduction you just simply block out something so that there is no bypass there is no evasion there is there is no way to go around the",
    "start": "1904530",
    "end": "1911160"
  },
  {
    "text": "block so the evasions are not very common in",
    "start": "1911160",
    "end": "1917400"
  },
  {
    "text": "the wild but the attackers are catching up obviously Inglot is gone now but it's",
    "start": "1917400",
    "end": "1922560"
  },
  {
    "text": "it's still that the last we saw it was evading he met it had a code in built inside and framework which was making",
    "start": "1922560",
    "end": "1928080"
  },
  {
    "text": "sure that it was not checking whether he met exists or not because previously what he used to happen was it will check",
    "start": "1928080",
    "end": "1933630"
  },
  {
    "text": "if he met exists and it will simply terminate but now it doesn't check that it just goes away straight away and",
    "start": "1933630",
    "end": "1939270"
  },
  {
    "text": "we've also seen 2015 to five four five cv evading omit completely because of",
    "start": "1939270",
    "end": "1944690"
  },
  {
    "text": "different mechanisms you know thank you yeah so we will talk",
    "start": "1944690",
    "end": "1953140"
  },
  {
    "start": "1951000",
    "end": "2007000"
  },
  {
    "text": "now about the new technique could save a limit using Emmet so we found there is a",
    "start": "1953140",
    "end": "1959980"
  },
  {
    "text": "portion of code at this offset of a mid DLL that does unload em it's protections",
    "start": "1959980",
    "end": "1966010"
  },
  {
    "text": "and remove them completely out of the memory so this portion of code in a",
    "start": "1966010",
    "end": "1972580"
  },
  {
    "text": "state of jumping directly to them this opposite we can reach out this code from the DLL male when the right parameters",
    "start": "1972580",
    "end": "1979150"
  },
  {
    "text": "get get passed to the IDL element the",
    "start": "1979150",
    "end": "1984460"
  },
  {
    "text": "reason that we would like to use the DLL means that rather than jumping directly to that to the offset is that we can we",
    "start": "1984460",
    "end": "1991540"
  },
  {
    "text": "could have this attack works against several versions of limit and instead of only one version and this offset because",
    "start": "1991540",
    "end": "1998440"
  },
  {
    "text": "from version to version this offset is gonna be changed so for the just",
    "start": "1998440",
    "end": "2010470"
  },
  {
    "start": "2007000",
    "end": "2058000"
  },
  {
    "text": "refreshment about the on the DLL main prototype so the first parameter takes",
    "start": "2010470",
    "end": "2016260"
  },
  {
    "text": "the takes the the base address of the DLL which is vendor DLL the second",
    "start": "2016260",
    "end": "2021720"
  },
  {
    "text": "derivative should be zero the second parameter for the internal process detach so this gives the this this gives",
    "start": "2021720",
    "end": "2031140"
  },
  {
    "text": "the DLL versus detach signal to the deal of man for the DLL to be unloaded also",
    "start": "2031140",
    "end": "2037679"
  },
  {
    "text": "the reserved which is the third the third parameter should be zero or not to",
    "start": "2037679",
    "end": "2043770"
  },
  {
    "text": "get them to give the base address of a medial we have used the get module",
    "start": "2043770",
    "end": "2049108"
  },
  {
    "text": "handle API which is an apple and unhooked by Emmet because it's not it's not being considered as critical API so",
    "start": "2049109",
    "end": "2059638"
  },
  {
    "text": "this is an important portion of unloading code and limit we can see that",
    "start": "2059639",
    "end": "2065550"
  },
  {
    "text": "it's zero out some of the variable because after after after M it gets",
    "start": "2065550",
    "end": "2072540"
  },
  {
    "text": "unloaded part of the memory these these values are not gonna be needed because it's this values has been unloaded",
    "start": "2072540",
    "end": "2080940"
  },
  {
    "text": "and there is a call on this on the left side to a function which is that's the",
    "start": "2080940",
    "end": "2086669"
  },
  {
    "text": "actual batch the hot patching and remedy so it will remove out them installed",
    "start": "2086669",
    "end": "2092970"
  },
  {
    "text": "hooks within this hooked API sorbitol api's there are several data structures",
    "start": "2092970",
    "end": "2104700"
  },
  {
    "start": "2101000",
    "end": "2288000"
  },
  {
    "text": "have been used within this unloading code actually there are three of them",
    "start": "2104700",
    "end": "2111150"
  },
  {
    "text": "will discuss two here so Amit use this representation to represent the veto of",
    "start": "2111150",
    "end": "2117690"
  },
  {
    "text": "a B is the wonders differs a B is as a linkedlist of data structures so this",
    "start": "2117690",
    "end": "2125640"
  },
  {
    "text": "unloading hoc unloading code will will look through these data structure like a",
    "start": "2125640",
    "end": "2130950"
  },
  {
    "text": "list for the detailed ABI death structure there is a variable to show",
    "start": "2130950",
    "end": "2136559"
  },
  {
    "text": "that it's active or not then there is a pointer to the second data structure",
    "start": "2136559",
    "end": "2142140"
  },
  {
    "text": "which is which gives more details about this detour ABI and there is the third",
    "start": "2142140",
    "end": "2147539"
  },
  {
    "text": "pointer which is just take you through the next node and this link it lists so",
    "start": "2147539",
    "end": "2153509"
  },
  {
    "text": "in the second a structure where there are more details about this detoured ABI we can see there is a pointer to the",
    "start": "2153509",
    "end": "2159269"
  },
  {
    "text": "theater on this API and there is the detouring function and there is the original prologue for this for this API",
    "start": "2159269",
    "end": "2167240"
  },
  {
    "text": "before it gets deterred",
    "start": "2167240",
    "end": "2171589"
  },
  {
    "text": "within the patch functions which is does the actual unhooking and removing out the van stalled hooks or detours it",
    "start": "2172799",
    "end": "2182099"
  },
  {
    "text": "works through a linkedlist of hook config data structure and here we",
    "start": "2182099",
    "end": "2188579"
  },
  {
    "text": "describe this data structure so there is a pointer to the next hook in the next pointer to the next node and this",
    "start": "2188579",
    "end": "2195720"
  },
  {
    "text": "linking list and there is a status is active exactly then it's one if not it's",
    "start": "2195720",
    "end": "2201059"
  },
  {
    "text": "zero and there is a pointer to the effective function so after that a loading could runs it will change this",
    "start": "2201059",
    "end": "2208650"
  },
  {
    "text": "pointer so instead of being pointing to the detouring function it will point",
    "start": "2208650",
    "end": "2214609"
  },
  {
    "text": "read to them to the non-literal original API because the installed hook has been",
    "start": "2214609",
    "end": "2221359"
  },
  {
    "text": "removed at the deterring function or omit protection function is not being used anymore then there is the this",
    "start": "2221359",
    "end": "2228559"
  },
  {
    "text": "organ there's API address and here pointer to a pointer to it and there is the amid deterrent function which is a",
    "start": "2228559",
    "end": "2235549"
  },
  {
    "text": "pointer to that to the emitter protection basically and I have cut all",
    "start": "2235549",
    "end": "2241579"
  },
  {
    "text": "this and blue actually because yeah because this one is being used in here",
    "start": "2241579",
    "end": "2247759"
  },
  {
    "text": "so actually the unloading code has a call to mem Covey which will copy this",
    "start": "2247759",
    "end": "2255519"
  },
  {
    "text": "which will which will will take this that what they have colored in here is and as blue it will use this as a",
    "start": "2255519",
    "end": "2262970"
  },
  {
    "text": "pointer to retrieve their size and them and and and the resort windows API",
    "start": "2262970",
    "end": "2268819"
  },
  {
    "text": "Prolog so it will use it so it's a basically a pointer to a chord but it's being used to also to retrieve a size of",
    "start": "2268819",
    "end": "2277309"
  },
  {
    "text": "the prologue and the and the product to be copied to the original already to",
    "start": "2277309",
    "end": "2282739"
  },
  {
    "text": "copy the original prologue to the github API so before calling the patch function",
    "start": "2282739",
    "end": "2291499"
  },
  {
    "start": "2288000",
    "end": "2336000"
  },
  {
    "text": "we can see the load library there is a jump at the top so there is a stalled detour and then after this after we",
    "start": "2291499",
    "end": "2300109"
  },
  {
    "text": "returned from patch functions and it's done moving through all the installed detours we can see that the original",
    "start": "2300109",
    "end": "2306529"
  },
  {
    "text": "prologue of the load library has been restored to to disable the AEF",
    "start": "2306529",
    "end": "2314989"
  },
  {
    "text": "protection which uses the debugging registers M it continues with downloading good so it will add this",
    "start": "2314989",
    "end": "2323509"
  },
  {
    "text": "this offset of a DLL and it uses zero of the context structure we have discussed",
    "start": "2323509",
    "end": "2329690"
  },
  {
    "text": "area and then use the mem set to zero to zero that to zero out that and then",
    "start": "2329690",
    "end": "2337789"
  },
  {
    "start": "2336000",
    "end": "2352000"
  },
  {
    "text": "Annette calls the NP set context thread to sit as zero out context to that",
    "start": "2337789",
    "end": "2343150"
  },
  {
    "text": "current to the current threat to make it effective and disable their",
    "start": "2343150",
    "end": "2349460"
  },
  {
    "text": "production so we have for the optimal time for the exploit the implementation",
    "start": "2349460",
    "end": "2356810"
  },
  {
    "start": "2352000",
    "end": "2448000"
  },
  {
    "text": "we have took an old exploit for Firefox and we uninstalled Emmet five point two",
    "start": "2356810",
    "end": "2362600"
  },
  {
    "text": "point zero point one and we have added",
    "start": "2362600",
    "end": "2367970"
  },
  {
    "text": "our our our Rob gadgets on the top of left slew it so basically we wasn't",
    "start": "2367970",
    "end": "2374180"
  },
  {
    "text": "trying to jump directly to the offset as we have discussed area we was trying to",
    "start": "2374180",
    "end": "2379940"
  },
  {
    "text": "look locate the DLL man then we trying to send that to send that",
    "start": "2379940",
    "end": "2385160"
  },
  {
    "text": "the the right parameters to get to the unlock code so basically there are some",
    "start": "2385160",
    "end": "2392210"
  },
  {
    "text": "considerations here we should we have considered during building our up gadgets so we know that we can we could",
    "start": "2392210",
    "end": "2400550"
  },
  {
    "text": "retrieve them it develops one with using get module handle then we know that the",
    "start": "2400550",
    "end": "2406100"
  },
  {
    "text": "MZ signature or this does head up there it's located on the base address and",
    "start": "2406100",
    "end": "2411520"
  },
  {
    "text": "from there we can with a certain offset we can get locate that PE header or",
    "start": "2411520",
    "end": "2417619"
  },
  {
    "text": "signature all of this just to get the offset for that address and three points",
    "start": "2417619",
    "end": "2423080"
  },
  {
    "text": "at certain IP address gets added to that PE header and then we just call the deal",
    "start": "2423080",
    "end": "2431420"
  },
  {
    "text": "element which is the base address basically added to that address or event three-point offset we have found and the",
    "start": "2431420",
    "end": "2437690"
  },
  {
    "text": "PE header and then we call it with them right parameters and this will this will",
    "start": "2437690",
    "end": "2444100"
  },
  {
    "text": "result in calling the unloading code this is the actual Rob gadgets we used",
    "start": "2444100",
    "end": "2453609"
  },
  {
    "start": "2448000",
    "end": "2504000"
  },
  {
    "text": "which is having described in the previous slide so no need to go through them entirely",
    "start": "2453609",
    "end": "2459760"
  },
  {
    "text": "so that vent it is that this district knee cubes is that it's easy you can see",
    "start": "2459760",
    "end": "2466850"
  },
  {
    "text": "that slide forward Rob gadgets and it's reliable nothing can be more reliable",
    "start": "2466850",
    "end": "2473990"
  },
  {
    "text": "than having Emmet unloading disabling itself and it's bright ones and exploit",
    "start": "2473990",
    "end": "2481510"
  },
  {
    "text": "everywhere so it works well emit different versions of limit actually because of because we are utilizing the",
    "start": "2481510",
    "end": "2487809"
  },
  {
    "text": "dll man instead of just jumping to a certain opposite and it also there is no",
    "start": "2487809",
    "end": "2493359"
  },
  {
    "text": "special special treatment for the AF protections and AF plus because M it",
    "start": "2493359",
    "end": "2499180"
  },
  {
    "text": "will continue with downloading code and will disable them off a one question",
    "start": "2499180",
    "end": "2506079"
  },
  {
    "start": "2504000",
    "end": "2603000"
  },
  {
    "text": "that they have came across over an Internet on reddit so this guy was asking how Microsoft fix this issue because rather",
    "start": "2506079",
    "end": "2513640"
  },
  {
    "text": "than the dll mint essential and the deal that be a lot of the little process",
    "start": "2513640",
    "end": "2520109"
  },
  {
    "text": "detach signal is also essential to to the Twitter through in it so how did",
    "start": "2520109",
    "end": "2526119"
  },
  {
    "text": "they fix it so I have digged a bit to see how did they how they fix it so",
    "start": "2526119",
    "end": "2531369"
  },
  {
    "text": "additional checks have been added to the D alignment so it's no longer that just providing them but all these parameters",
    "start": "2531369",
    "end": "2538779"
  },
  {
    "text": "to the DLL man will talk you it will take you to them a loading process to the unloading functions or you also I",
    "start": "2538779",
    "end": "2546549"
  },
  {
    "text": "have found that unloading code is still there at different offset of remedy alone the detour device structure I'm",
    "start": "2546549",
    "end": "2554170"
  },
  {
    "text": "the okay the hope convict structure that we discussed is still exist but they are unaffected because of the fix so then",
    "start": "2554170",
    "end": "2561940"
  },
  {
    "text": "the actual fix was to ever think that this pointer which had been which was",
    "start": "2561940",
    "end": "2568930"
  },
  {
    "text": "being used in the previous version when it to retrieves the eldest and the size of them of the original prologue so",
    "start": "2568930",
    "end": "2577000"
  },
  {
    "text": "right now it points to them hookah dress and the size of that hook so even if one",
    "start": "2577000",
    "end": "2582400"
  },
  {
    "text": "could succeed calling this milk cubby and defeats all of the additional checks",
    "start": "2582400",
    "end": "2587950"
  },
  {
    "text": "that would result in rewriting this miss cook rather than just removing it and",
    "start": "2587950",
    "end": "2594759"
  },
  {
    "text": "this is how did exist all right so I just like you saw there's",
    "start": "2594759",
    "end": "2606260"
  },
  {
    "start": "2603000",
    "end": "2732000"
  },
  {
    "text": "a big design flaw in you material and in it don't it not only applies to you man but it will go anywhere because a deal",
    "start": "2606260",
    "end": "2612680"
  },
  {
    "text": "has to have a loading code so this brings us to the next point that is the importance of custom exploit prevention",
    "start": "2612680",
    "end": "2619130"
  },
  {
    "text": "techniques now you saw the previous slides what what happens is you know a lot of product you roll out a tool or",
    "start": "2619130",
    "end": "2625250"
  },
  {
    "text": "anything and you challenge the air Tigers and eventually they will strike back even even though it takes times the problem is security office security",
    "start": "2625250",
    "end": "2632330"
  },
  {
    "text": "through obscurity is not it's a failed model all right now but it's I mean it's",
    "start": "2632330",
    "end": "2638360"
  },
  {
    "text": "it gives you more time it gives you more time to implement more protections it gives you more time to you know for the",
    "start": "2638360",
    "end": "2644540"
  },
  {
    "text": "bad guys to even understand what's what's wrong and suddenly one day their exploit is working and suddenly the next",
    "start": "2644540",
    "end": "2650330"
  },
  {
    "text": "day their hit rate is let's say two three percent less why because because of some detection product that is coming and blocking out so it's it's always",
    "start": "2650330",
    "end": "2658550"
  },
  {
    "text": "more more advantageous to have multiple protections and it's it's even better to have a custom one because eventually you",
    "start": "2658550",
    "end": "2665810"
  },
  {
    "text": "will realize that if you use something which is public everybody has access to that everybody has a code for that and",
    "start": "2665810",
    "end": "2670960"
  },
  {
    "text": "okay reverse engineering simple tricks and all the protections and trying to",
    "start": "2670960",
    "end": "2677060"
  },
  {
    "text": "anyway find out bypasses it's it's a little difficult but it's still true and other than that evading very simple",
    "start": "2677060",
    "end": "2683120"
  },
  {
    "text": "hooks and you know like by leaving out the exception handlers or using something else because ultimately the",
    "start": "2683120",
    "end": "2689600"
  },
  {
    "text": "detection technology over here revolves and all that and if you don't do that essentially it gives us okay we are we",
    "start": "2689600",
    "end": "2698000"
  },
  {
    "text": "are kind of on a back foot for that not only does it give a gives us more advantage but it's more effective",
    "start": "2698000",
    "end": "2704960"
  },
  {
    "text": "telemetry you you have three products and we have this amplifier right for angular exploit for 4cv 2015 to four to",
    "start": "2704960",
    "end": "2712940"
  },
  {
    "text": "five for five yeah all of those evaded email but some or some other detection product eventually",
    "start": "2712940",
    "end": "2718640"
  },
  {
    "text": "caught it and envied and that is how we found it because there is no other way you can find out how it how it works",
    "start": "2718640",
    "end": "2724220"
  },
  {
    "text": "because if one is failing and the other is catching it's a good thing",
    "start": "2724220",
    "end": "2728980"
  },
  {
    "text": "think that's it so we have the acknowledgments thanks to our colleagues",
    "start": "2729950",
    "end": "2737599"
  },
  {
    "start": "2732000",
    "end": "3115000"
  },
  {
    "text": "who helped us in figuring out this stuff and have the demo learned yeah all right",
    "start": "2737599",
    "end": "2744700"
  },
  {
    "text": "so Billa will show you the demo on the event stuff",
    "start": "2744700",
    "end": "2751569"
  },
  {
    "text": "so we have this exploit we will see how",
    "start": "2767820",
    "end": "2773550"
  },
  {
    "text": "Amit will respond to this exploit",
    "start": "2773550",
    "end": "2777800"
  },
  {
    "text": "we see that Emmett detected the stack of everything in this exploit",
    "start": "2783300",
    "end": "2788420"
  },
  {
    "text": "so this is the other exploit which has our own budget and our objective a",
    "start": "2793760",
    "end": "2802310"
  },
  {
    "text": "little man with this parameter",
    "start": "2802310",
    "end": "2805990"
  },
  {
    "text": "let's walk through this in action in the debugger",
    "start": "2813800",
    "end": "2818890"
  },
  {
    "text": "so this is the beginning of the unloading code starting with removing",
    "start": "2833000",
    "end": "2838190"
  },
  {
    "text": "the hooks so we could see that the ax is",
    "start": "2838190",
    "end": "2847220"
  },
  {
    "text": "pointing to that detoured API config which gives small details about then to the about then installed hooks sorry",
    "start": "2847220",
    "end": "2854300"
  },
  {
    "text": "about the Detroit baby eyes we can see",
    "start": "2854300",
    "end": "2860000"
  },
  {
    "text": "that the sit context thread is being",
    "start": "2860000",
    "end": "2866080"
  },
  {
    "text": "unloaded we can see the jump this is the",
    "start": "2866080",
    "end": "2872660"
  },
  {
    "text": "installed detour of you follow this it will leads us to that detour to the",
    "start": "2872660",
    "end": "2878660"
  },
  {
    "text": "Amida touring function so yeah and we",
    "start": "2878660",
    "end": "2887060"
  },
  {
    "text": "see that it's zero out this zero out this value because it's not gonna be",
    "start": "2887060",
    "end": "2893000"
  },
  {
    "text": "needed anymore this is landed detouring function so",
    "start": "2893000",
    "end": "2899930"
  },
  {
    "text": "this is the call we have jumped over all the unsolved detours we will go to them that's function to see how the touching",
    "start": "2899930",
    "end": "2908359"
  },
  {
    "text": "for the two packs out installed detours",
    "start": "2908359",
    "end": "2914410"
  },
  {
    "text": "yeah so now they sigh points to them installed tools this is the neem cubby",
    "start": "2918480",
    "end": "2929640"
  },
  {
    "text": "we talked about we have seen the fairest API being being batching over through",
    "start": "2929640",
    "end": "2938460"
  },
  {
    "text": "them by using the mem copy we can see that you can see the sauce which being",
    "start": "2938460",
    "end": "2946920"
  },
  {
    "text": "being passed to it so so we have we are",
    "start": "2946920",
    "end": "2954780"
  },
  {
    "text": "seen this is the installed detour it's being dissolved right now and mmm cubby",
    "start": "2954780",
    "end": "2960240"
  },
  {
    "text": "which will be executed right now it will we'll see how it will affect this API we",
    "start": "2960240",
    "end": "2969329"
  },
  {
    "text": "can see that this is the Venice of the the original prologue gets copied on the",
    "start": "2969329",
    "end": "2976079"
  },
  {
    "text": "onto the top of this API so it has been unhooked then it works works through all",
    "start": "2976079",
    "end": "2986010"
  },
  {
    "text": "the other installed hooks the same way this time we'll continue API so we will",
    "start": "2986010",
    "end": "2993599"
  },
  {
    "text": "skip this right now it's it's trying to to disable the air protection we can see",
    "start": "2993599",
    "end": "3002060"
  },
  {
    "text": "it's memset this structure the context structure",
    "start": "3002060",
    "end": "3009338"
  },
  {
    "text": "zero out everything and then calls indirectly indirect call to set context",
    "start": "3016190",
    "end": "3024740"
  },
  {
    "text": "threat with this with this with this context and you can see that if at the",
    "start": "3024740",
    "end": "3031760"
  },
  {
    "text": "end this is the current thread these are the parameters to set context thread which will disable the EF protection you",
    "start": "3031760",
    "end": "3042500"
  },
  {
    "text": "can see this is the context structure has been zero art let's check blood",
    "start": "3042500",
    "end": "3052310"
  },
  {
    "text": "library for example you can see it has been just get patched no protection for",
    "start": "3052310",
    "end": "3060830"
  },
  {
    "text": "Arnett in here now we would we would run that to see how how it works we can see",
    "start": "3060830",
    "end": "3070520"
  },
  {
    "text": "that the calc pops up and it's working [Applause]",
    "start": "3070520",
    "end": "3079829"
  },
  {
    "text": "thank you guys I think we are ready for the questions if there is time",
    "start": "3079870",
    "end": "3088060"
  },
  {
    "text": "all right big enough",
    "start": "3090660",
    "end": "3094548"
  },
  {
    "text": "questions will be at down here but we'll meet over unicorn for the next day and speakers so thank you thank you",
    "start": "3103680",
    "end": "3113740"
  },
  {
    "text": "[Applause]",
    "start": "3113740",
    "end": "3117770"
  }
]