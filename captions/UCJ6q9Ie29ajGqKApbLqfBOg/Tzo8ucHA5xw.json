[
  {
    "text": "[Music] foreign",
    "start": "1730",
    "end": "6720"
  },
  {
    "text": "and Max Garrett",
    "start": "11000",
    "end": "14660"
  },
  {
    "text": "good morning everyone and thank you for coming to our presentation",
    "start": "20039",
    "end": "25439"
  },
  {
    "text": "let me ask you this have you ever wondered how secure it is to open a",
    "start": "25439",
    "end": "31019"
  },
  {
    "text": "message within the desktop app you use to chat with your colleagues at work",
    "start": "31019",
    "end": "36719"
  },
  {
    "text": "have you ever thought how secure it is to open a source code which you just",
    "start": "36719",
    "end": "42120"
  },
  {
    "text": "downloaded from the internet within your favorite source code editor what do this electron based desktop",
    "start": "42120",
    "end": "49200"
  },
  {
    "text": "applications have in common and how fundamentally secure are they",
    "start": "49200",
    "end": "54300"
  },
  {
    "text": "before the year we set out to find an exact answer to discover what alerts",
    "start": "54300",
    "end": "60120"
  },
  {
    "text": "beneath electron applications and throughout the course of one year of our research we were able to compromise",
    "start": "60120",
    "end": "67439"
  },
  {
    "text": "multiple iconic applications used by millions of people and were able to find",
    "start": "67439",
    "end": "73080"
  },
  {
    "text": "and hidden attack surface within electron hereby I welcome everyone today",
    "start": "73080",
    "end": "78720"
  },
  {
    "text": "to Electro volt where we will take you on a journey to pawn popular desktop",
    "start": "78720",
    "end": "84000"
  },
  {
    "text": "applications while uncovering new attack surface on electron so the agenda for our talk today is I",
    "start": "84000",
    "end": "90780"
  },
  {
    "text": "will go through the basics of electron and its security settings then we will hack some real world commonly used",
    "start": "90780",
    "end": "97259"
  },
  {
    "text": "desktop applications starting from the least restrictive to the most restrictive security settings and then I",
    "start": "97259",
    "end": "104759"
  },
  {
    "text": "will present the novel attack Vector we discovered within electron JS framework and at the end we will talk about the",
    "start": "104759",
    "end": "111180"
  },
  {
    "text": "mitigations so let's get started so who are we um I'm Aditya purani AKA knapstack I'm a",
    "start": "111180",
    "end": "119159"
  },
  {
    "text": "senior security engineer at a leading automotive company my main area of expertise are appsec and",
    "start": "119159",
    "end": "126060"
  },
  {
    "text": "blockchain and on the weekends I play ctfs with perfect blue joining me today",
    "start": "126060",
    "end": "131879"
  },
  {
    "text": "is my colleague Max who is a security researcher at asset node Max area of",
    "start": "131879",
    "end": "138900"
  },
  {
    "text": "expertise are app second blockchain and he plays ctfs with water Peddler",
    "start": "138900",
    "end": "145379"
  },
  {
    "text": "so what is electron if you can build a website then you can build a desktop application that's the",
    "start": "145379",
    "end": "152879"
  },
  {
    "text": "main concept behind electron so electron is a popular open source framework which",
    "start": "152879",
    "end": "159239"
  },
  {
    "text": "is used by many commonly used apps such as Microsoft teams Discord slack and",
    "start": "159239",
    "end": "166140"
  },
  {
    "text": "other fundamentally electron is built on top of chromium and node.js which means that",
    "start": "166140",
    "end": "173760"
  },
  {
    "text": "by just using JavaScript HTML and CSS you can ship an entirely cross-platform",
    "start": "173760",
    "end": "180660"
  },
  {
    "text": "native desktop application before diving into the bugs it is important to understand the architecture",
    "start": "180660",
    "end": "187800"
  },
  {
    "text": "of electron within electron there are two types of process the first one is the main",
    "start": "187800",
    "end": "194099"
  },
  {
    "text": "process and the second one is a renderer process main process is the starting point of",
    "start": "194099",
    "end": "201000"
  },
  {
    "text": "all the electron applications main process can create multiple renderer process using a class called",
    "start": "201000",
    "end": "208260"
  },
  {
    "text": "browser window it also has access to Native GUI apis to",
    "start": "208260",
    "end": "213420"
  },
  {
    "text": "create objects like menu and tray and it is important to note that there",
    "start": "213420",
    "end": "219180"
  },
  {
    "text": "can be only one main process on the other hand we can have multiple renderer process and the main function",
    "start": "219180",
    "end": "226560"
  },
  {
    "text": "of a renderer process is to render a web page using chromium",
    "start": "226560",
    "end": "232379"
  },
  {
    "text": "so uh as chromium is used a lot of chromium related features are used such",
    "start": "232379",
    "end": "238379"
  },
  {
    "text": "as Chrome site isolation multiple process Etc",
    "start": "238379",
    "end": "243480"
  },
  {
    "text": "the way the main process and rendered process talks with each other is through something known as IPC or inter-process",
    "start": "243480",
    "end": "250980"
  },
  {
    "text": "communication module and you can also apply a lot of security",
    "start": "250980",
    "end": "256560"
  },
  {
    "text": "settings within the browser window configuration within a flag known as web reference",
    "start": "256560",
    "end": "262500"
  },
  {
    "text": "so that way you can control what type of rendered process you want the least",
    "start": "262500",
    "end": "268020"
  },
  {
    "text": "restrictive you are the more vulnerable you are so let's see how it looks in the code to",
    "start": "268020",
    "end": "273360"
  },
  {
    "text": "get a bit idea about that so here we have a file known as main.js it sets up a browser window and within",
    "start": "273360",
    "end": "281759"
  },
  {
    "text": "the web preferences it lists down couple of security settings which it sets true or false then it loads a URL which is",
    "start": "281759",
    "end": "289680"
  },
  {
    "text": "the web page you want to load which is google.com in this case and then it defines an IPC main which is like an",
    "start": "289680",
    "end": "296040"
  },
  {
    "text": "event listener to listen for IPC call in this case it's open URL",
    "start": "296040",
    "end": "301199"
  },
  {
    "text": "on the other side on the rendered process it is divided into two parts the first one is preload.js and preload",
    "start": "301199",
    "end": "308880"
  },
  {
    "text": "script contains code that is loaded prior to the web page so preload script run within the",
    "start": "308880",
    "end": "315720"
  },
  {
    "text": "renderer context but are granted more privileges by having access to electron",
    "start": "315720",
    "end": "322259"
  },
  {
    "text": "or node.js API context Bridge which you see in the",
    "start": "322259",
    "end": "327300"
  },
  {
    "text": "slide is a way to safely expose an API to the web page which could be later invoked using a window object",
    "start": "327300",
    "end": "334500"
  },
  {
    "text": "so here we have a web page which is hello world and the web page uses the",
    "start": "334500",
    "end": "339919"
  },
  {
    "text": "window.electron.openurl and Supply argument to pass it to the IPC main.eventlistener",
    "start": "339919",
    "end": "347520"
  },
  {
    "text": "so as we can see here uh you can put whatever security features you want to",
    "start": "347520",
    "end": "353580"
  },
  {
    "text": "get whatever render whatever process you want So at the least secure you are",
    "start": "353580",
    "end": "358759"
  },
  {
    "text": "whenever you use like something like sandbox is equal to false context isolation is equal to false and node",
    "start": "358759",
    "end": "365460"
  },
  {
    "text": "integration is true because in this case the web page has directly accessed to the node Primitives and in this case xss",
    "start": "365460",
    "end": "373979"
  },
  {
    "text": "is equals to RC because someone can just do a required child process and exact uh",
    "start": "373979",
    "end": "380460"
  },
  {
    "text": "whatever shell commands they want to do electron developers also thought about this and they came up with something",
    "start": "380460",
    "end": "386460"
  },
  {
    "text": "known as context isolation so as you can see in this slide in the renderer",
    "start": "386460",
    "end": "391800"
  },
  {
    "text": "process uh now we have two separate contexts the first one is the application context where the",
    "start": "391800",
    "end": "398100"
  },
  {
    "text": "application JavaScript runs and the second one is an isolated context and",
    "start": "398100",
    "end": "403199"
  },
  {
    "text": "within this isolated context the preload.js which we saw earlier and electrons internal code would run so it",
    "start": "403199",
    "end": "410759"
  },
  {
    "text": "is completely isolated and the web page now doesn't have direct access to node",
    "start": "410759",
    "end": "415860"
  },
  {
    "text": "Primitives so this is the same concept we use in Chrome as well in Chrome it is called isolated world where the",
    "start": "415860",
    "end": "422520"
  },
  {
    "text": "extensions content script JavaScript is different from a web page JavaScript so",
    "start": "422520",
    "end": "428100"
  },
  {
    "text": "there is a isolation here so throughout our talk the attack",
    "start": "428100",
    "end": "433139"
  },
  {
    "text": "surface is the renderer process so we will be starting by abusing the least",
    "start": "433139",
    "end": "438300"
  },
  {
    "text": "restrictive electron configuration and then move on to the complex exploits",
    "start": "438300",
    "end": "444419"
  },
  {
    "text": "so to keep the slides clean let's keep in mind the following terminology so we",
    "start": "444419",
    "end": "450360"
  },
  {
    "text": "have node integration context isolation and sandbox and don't worry about the node integration in workers or node",
    "start": "450360",
    "end": "457139"
  },
  {
    "text": "integration in subframes yet because I haven't talked about it but we'll talk in the coming slides",
    "start": "457139",
    "end": "462660"
  },
  {
    "text": "so the first situation um node integration is true context isolation is false and sandbox is false",
    "start": "462660",
    "end": "470099"
  },
  {
    "text": "this is s insecure it can get so it is really easy to get a shell as node is",
    "start": "470099",
    "end": "476160"
  },
  {
    "text": "directly exposed to the renderer the only thing you need to do as an attacker is to find a way to embed a job",
    "start": "476160",
    "end": "483599"
  },
  {
    "text": "a job within the webview So within the diagram the circle marked",
    "start": "483599",
    "end": "489060"
  },
  {
    "text": "as red is where we are targeting currently so I am going to present one of the case",
    "start": "489060",
    "end": "494940"
  },
  {
    "text": "study which we found in a real world commonly used application known as a vs code",
    "start": "494940",
    "end": "500520"
  },
  {
    "text": "so vs code is a source code editor where you can open a project and you can navigate and browse through the source",
    "start": "500520",
    "end": "507360"
  },
  {
    "text": "code so we escort had a feature where it asks before the opening source code that",
    "start": "507360",
    "end": "513320"
  },
  {
    "text": "do you want to open it in a restricted mode or do you want to not open it in a",
    "start": "513320",
    "end": "518940"
  },
  {
    "text": "restricted mode so as a part of our this use case we found a way to perform a",
    "start": "518940",
    "end": "524399"
  },
  {
    "text": "remote code execution in vs code in the restricted mode and so as a part of our",
    "start": "524399",
    "end": "530040"
  },
  {
    "text": "attack Vector we had a limited xss and we turned into a remote code execution",
    "start": "530040",
    "end": "535080"
  },
  {
    "text": "chain let's see how it works so this is like a pretty uh large schematic of how",
    "start": "535080",
    "end": "540720"
  },
  {
    "text": "the exploit looks like so we have three frames here which are marked by the square symbols so the one which is in",
    "start": "540720",
    "end": "548940"
  },
  {
    "text": "green is running with the most strict electron setting whereas the one in the",
    "start": "548940",
    "end": "554339"
  },
  {
    "text": "red is the one which we just talk about where node integration is true so as an",
    "start": "554339",
    "end": "559620"
  },
  {
    "text": "attacker you have an exercise on the markdown previewer which is running in a",
    "start": "559620",
    "end": "565320"
  },
  {
    "text": "very restricted context and the goal is to move from that green to Red somehow",
    "start": "565320",
    "end": "570360"
  },
  {
    "text": "and let's look at how we can do that so first of all let's say if you open a markdown like phone dot MD s this is",
    "start": "570360",
    "end": "578519"
  },
  {
    "text": "subject to a strict CSP policy what you would do is you would perform a meta",
    "start": "578519",
    "end": "583620"
  },
  {
    "text": "redirect to an external website and once you are on the external website you can run any JavaScript you want so once we",
    "start": "583620",
    "end": "591240"
  },
  {
    "text": "had this exercise on step number one what we do is we leak the extension ID",
    "start": "591240",
    "end": "596820"
  },
  {
    "text": "of vs code as you know you can install extension in vs code and those IDs are a",
    "start": "596820",
    "end": "602399"
  },
  {
    "text": "pretty long string which you cannot guess so once we leaked that extension ID we",
    "start": "602399",
    "end": "607500"
  },
  {
    "text": "found an xss on one of the other window which is vs code webview and what we did",
    "start": "607500",
    "end": "613920"
  },
  {
    "text": "is we found a way to perform a post message call to that particular frame so",
    "start": "613920",
    "end": "619800"
  },
  {
    "text": "in this case we deploy our xss using a post message on vs code webview and then",
    "start": "619800",
    "end": "626459"
  },
  {
    "text": "we deploy another another xss on the same webview to perform a channeled do",
    "start": "626459",
    "end": "633120"
  },
  {
    "text": "read which will leak a current directory where the project is downloaded on the",
    "start": "633120",
    "end": "638580"
  },
  {
    "text": "victims machine through vs code file so vscore file is a file is similar to a",
    "start": "638580",
    "end": "644820"
  },
  {
    "text": "file protocol but the catch here is you can invoke it uh on from a different",
    "start": "644820",
    "end": "650100"
  },
  {
    "text": "origin not from the same origin so once we leak the directory what we do is we",
    "start": "650100",
    "end": "655620"
  },
  {
    "text": "perform a part reversal on the vs code file by doing dot dot slash dot dot slash the path to an HTML file within",
    "start": "655620",
    "end": "662640"
  },
  {
    "text": "our project and this HTML file what you can do is you can record you can do top",
    "start": "662640",
    "end": "668279"
  },
  {
    "text": "dot require to get access to node Primitives and pop a shell so let's see",
    "start": "668279",
    "end": "673320"
  },
  {
    "text": "how this looks in the demo so our victim has opened a project in a restricted mode and they will navigate a file",
    "start": "673320",
    "end": "681980"
  },
  {
    "text": "and as you can see we have popped the calc in vs vs code which is the remote",
    "start": "684300",
    "end": "690660"
  },
  {
    "text": "code execution part so we received 6000 dollar Bounty for",
    "start": "690660",
    "end": "697500"
  },
  {
    "text": "this remote code execution bug in vs code we had a really a prompt and Swift",
    "start": "697500",
    "end": "704040"
  },
  {
    "text": "response from the Microsoft team for this let's move on to the second case study",
    "start": "704040",
    "end": "709560"
  },
  {
    "text": "in this case let's increase the level of restrictiveness a bit so we turn on the",
    "start": "709560",
    "end": "715560"
  },
  {
    "text": "feature which is called context isolation to True which was false in the previous scenario and if context",
    "start": "715560",
    "end": "722040"
  },
  {
    "text": "isolation is enabled the node is not directly available to the renderer so you just cannot do required child",
    "start": "722040",
    "end": "728519"
  },
  {
    "text": "process and phone a shell so there are two ways to exploit this um first one is you can use a chrome V8",
    "start": "728519",
    "end": "735839"
  },
  {
    "text": "renderer exploit because sandbox is disabled so you can go to like a CR bug",
    "start": "735839",
    "end": "741720"
  },
  {
    "text": "and look for a crash POC and get your own end or you can try to find a way to",
    "start": "741720",
    "end": "747959"
  },
  {
    "text": "disable the context isolation somehow which we'll be talking in the coming slides so in the schematic let's go again so we",
    "start": "747959",
    "end": "755579"
  },
  {
    "text": "have an xss on the application layer and this time there is an isolation between",
    "start": "755579",
    "end": "760620"
  },
  {
    "text": "where the node and electron API decides so the previous attack won't work here",
    "start": "760620",
    "end": "766200"
  },
  {
    "text": "so the second case study we have is a remote code execution on Discord which is a commonly used application we",
    "start": "766200",
    "end": "773820"
  },
  {
    "text": "found that Discord was using an older version of electron which was 12.14.1",
    "start": "773820",
    "end": "779519"
  },
  {
    "text": "and this means that it is also using an older version of Chrome indirectly",
    "start": "779519",
    "end": "784980"
  },
  {
    "text": "which is 83. so when we were looking for attack surface in Discord the most interesting",
    "start": "784980",
    "end": "790740"
  },
  {
    "text": "one was a video embed so let's say if you send a message to a vid team on",
    "start": "790740",
    "end": "796200"
  },
  {
    "text": "Discord with a YouTube link you will see that the video will get expanded and or someone can click on it so we found an",
    "start": "796200",
    "end": "803700"
  },
  {
    "text": "exercise on one of the third party embed which is Vimeo and we use that to get",
    "start": "803700",
    "end": "810480"
  },
  {
    "text": "our initial JavaScript execution on Discord but the catch here is whenever",
    "start": "810480",
    "end": "816420"
  },
  {
    "text": "um there is an iframe in electron based application it is sandbox by default so",
    "start": "816420",
    "end": "822360"
  },
  {
    "text": "we cannot just simply run like a render or exploit of chrome 83 and get an RC so",
    "start": "822360",
    "end": "828120"
  },
  {
    "text": "we dig down deep in the Discord and what we found that we found a misconfiguration in a new window file",
    "start": "828120",
    "end": "835200"
  },
  {
    "text": "Handler which can be used to open a new window using window.open and this new",
    "start": "835200",
    "end": "840839"
  },
  {
    "text": "window had a Sandbox disabled so what you can do is you can open a window with",
    "start": "840839",
    "end": "846060"
  },
  {
    "text": "a location of an external website controlled by you and then you can run your Chrome V8 renderer exploit to get",
    "start": "846060",
    "end": "852420"
  },
  {
    "text": "RC let's see the demo",
    "start": "852420",
    "end": "856519"
  },
  {
    "text": "so attacker is sending a video link to the victim victim will go and press on it",
    "start": "857519",
    "end": "865980"
  },
  {
    "text": "and as you can see this is the new window which I talked which is without sandbox and you can pop a calc on",
    "start": "865980",
    "end": "871560"
  },
  {
    "text": "Discord and this can be done improvised by just putting stylesheet to make it more",
    "start": "871560",
    "end": "877740"
  },
  {
    "text": "lucrative and conduct social engineering attacks so we received five thousand dollar",
    "start": "877740",
    "end": "884100"
  },
  {
    "text": "Bounty from Discord and Discord fixed it by upgrading to the latest electron",
    "start": "884100",
    "end": "889139"
  },
  {
    "text": "version and fix this new window misconfiguration by limiting uh to not",
    "start": "889139",
    "end": "895260"
  },
  {
    "text": "have redirection to external website and most of you already know about this attack it's common knowledge to use a V8",
    "start": "895260",
    "end": "902220"
  },
  {
    "text": "exploit when sandbox is visible in electron app but what I'm showing you is it is really common in real world",
    "start": "902220",
    "end": "908339"
  },
  {
    "text": "applications to have this sort of misconfigurations let's go one step further in this case",
    "start": "908339",
    "end": "915180"
  },
  {
    "text": "we turn sandbox to true but now we have context isolation to false which was true earlier",
    "start": "915180",
    "end": "921180"
  },
  {
    "text": "so s sandbox is enabled on renderer we cannot directly run like a chrome and",
    "start": "921180",
    "end": "926459"
  },
  {
    "text": "exploit to get RC because this time SEC comp or win32k lockdown will stop us by",
    "start": "926459",
    "end": "933120"
  },
  {
    "text": "blocking bad sys calls as node integration is false no node",
    "start": "933120",
    "end": "938459"
  },
  {
    "text": "modules are exposed to the renderer so you cannot do the trick in the first slide which I mentioned but now the",
    "start": "938459",
    "end": "944339"
  },
  {
    "text": "catch here is there is no ISO between the website you load and electrons internal code or preload code",
    "start": "944339",
    "end": "951600"
  },
  {
    "text": "in the diagram now you can see we had two isolated contexts before but now there's this one block which runs",
    "start": "951600",
    "end": "958079"
  },
  {
    "text": "electrons internal code your application and the preload so electrons internal",
    "start": "958079",
    "end": "964260"
  },
  {
    "text": "code is written in JavaScript as well so what can you do with an exercise can you",
    "start": "964260",
    "end": "969720"
  },
  {
    "text": "do something like prototype pollution to overwrite electrons internal code let's see so how to get special so if the",
    "start": "969720",
    "end": "977519"
  },
  {
    "text": "version of electron app is less than 10 then you can use prototype pollution Gadget to leak a remote module or IPC",
    "start": "977519",
    "end": "985740"
  },
  {
    "text": "module so remote module according to electron documentation is a module which",
    "start": "985740",
    "end": "990899"
  },
  {
    "text": "is used to bridge JavaScript objects from the main process to the renderer process so once you have access to",
    "start": "990899",
    "end": "998279"
  },
  {
    "text": "remote module even in a sandbox window it is Trivial to get access to node",
    "start": "998279",
    "end": "1003920"
  },
  {
    "text": "Primitives using it for electron version 10 to 14 electron developers thought about this and they",
    "start": "1003920",
    "end": "1010940"
  },
  {
    "text": "disabled remote by default so they toggled the true to false so you can",
    "start": "1010940",
    "end": "1016519"
  },
  {
    "text": "still try to leak the remote if application developer has enabled it explicitly or you can find an IPC",
    "start": "1016519",
    "end": "1023360"
  },
  {
    "text": "misconfiguration for electron version greater than 14 which are like the newer electron",
    "start": "1023360",
    "end": "1029000"
  },
  {
    "text": "version remote is completely deprecated due to this security concern of how it can allow you to give node Primitives on",
    "start": "1029000",
    "end": "1035780"
  },
  {
    "text": "a Sandbox window so you can still use a prototype pollution Gadget to leak IPC module but",
    "start": "1035780",
    "end": "1042798"
  },
  {
    "text": "in this case what you can do is after leaking this IPC module you need to find misconfigured IPC within the web app or",
    "start": "1042799",
    "end": "1050840"
  },
  {
    "text": "within electrons internal code so what I'm showing you here is a novel",
    "start": "1050840",
    "end": "1056360"
  },
  {
    "text": "prototype pollution Gadget we discovered on a late test electron version and this concept of prototype pollution",
    "start": "1056360",
    "end": "1063020"
  },
  {
    "text": "is not unknown it was first presented in 2018 by masato kinugaba on an older",
    "start": "1063020",
    "end": "1068660"
  },
  {
    "text": "electron version but this is something which which works even on the latest version so as you can see we overwrite",
    "start": "1068660",
    "end": "1075440"
  },
  {
    "text": "certain inbuilt JavaScript function which is call and ends with and then we",
    "start": "1075440",
    "end": "1080780"
  },
  {
    "text": "on the number three we get access to webpack require which contains all these",
    "start": "1080780",
    "end": "1086600"
  },
  {
    "text": "modules which we want to use to get RC on your favorite apps so for the situation like this where",
    "start": "1086600",
    "end": "1093559"
  },
  {
    "text": "sandbox is false you may be wondering you can just run a renderer exploit but",
    "start": "1093559",
    "end": "1098660"
  },
  {
    "text": "you can leak this webpack requires using prototype pollution and also get access",
    "start": "1098660",
    "end": "1103760"
  },
  {
    "text": "to like node Primitives or electron common API to pop your kelp and you may",
    "start": "1103760",
    "end": "1110480"
  },
  {
    "text": "be wondering why to use this and not a V8 exploit and the reason is this is much more reliable compared to a V8",
    "start": "1110480",
    "end": "1117140"
  },
  {
    "text": "exploit for example a second reason is that you don't require binary exploitation knowledge in order to",
    "start": "1117140",
    "end": "1123320"
  },
  {
    "text": "perform this attack it's a complete web attack and the third reason is what if",
    "start": "1123320",
    "end": "1128360"
  },
  {
    "text": "the application you are targeting doesn't have a chrome end in the first place then you need to be creative and",
    "start": "1128360",
    "end": "1134780"
  },
  {
    "text": "use something else so for an example where sandbox is true you cannot get access to the node",
    "start": "1134780",
    "end": "1141799"
  },
  {
    "text": "Primitives but what you can do is you can leak electrons IPC binding so you can leak",
    "start": "1141799",
    "end": "1148940"
  },
  {
    "text": "two ipcs which is IPC rendered internal and IPC uh just for electrons internal",
    "start": "1148940",
    "end": "1155419"
  },
  {
    "text": "IPC and then you can invoke multiple developer defined IPC channels like open",
    "start": "1155419",
    "end": "1160820"
  },
  {
    "text": "URL which I showed you earlier or you can invoke electrons internal Channel like electron star or guest star",
    "start": "1160820",
    "end": "1169100"
  },
  {
    "text": "so let's take a case study uh for Microsoft teams where we will where we were able to achieve local file read and",
    "start": "1169100",
    "end": "1176240"
  },
  {
    "text": "were able to perform an account takeover on Microsoft teams user so Microsoft teams",
    "start": "1176240",
    "end": "1181640"
  },
  {
    "text": "was using electron less than 15. we found an xss uh in the renderer where",
    "start": "1181640",
    "end": "1187820"
  },
  {
    "text": "you send a message to someone using a zero day in CK editor so we perform a",
    "start": "1187820",
    "end": "1193400"
  },
  {
    "text": "mutation exercise in C cadited which was a zero day finding which we did this is something which is used as a",
    "start": "1193400",
    "end": "1200059"
  },
  {
    "text": "rich text formatting for markdown in Microsoft teams so once you had this exercise what we",
    "start": "1200059",
    "end": "1207679"
  },
  {
    "text": "noticed that when you open a new window context isolation is disabled but",
    "start": "1207679",
    "end": "1213440"
  },
  {
    "text": "sandbox is enabled so we can use that same attack Vector which I showed earlier so we use prototype pollution",
    "start": "1213440",
    "end": "1219919"
  },
  {
    "text": "Gadget to leak IPC using our xss and once we leak IPC we leak the electrons",
    "start": "1219919",
    "end": "1227660"
  },
  {
    "text": "internal IPC which is IPC attender internal to make an IPC call to a",
    "start": "1227660",
    "end": "1233600"
  },
  {
    "text": "browser process which reads a file given a path so think of it as like a filed",
    "start": "1233600",
    "end": "1239120"
  },
  {
    "text": "read or local file inclusion attack and this was a misconfiguration within electron which was fixed in the electron",
    "start": "1239120",
    "end": "1246080"
  },
  {
    "text": "version 15. and as you can see you can perform an IPC invoke with this",
    "start": "1246080",
    "end": "1251960"
  },
  {
    "text": "electrons internal API and Supply a path name so let's look at the demo how this is",
    "start": "1251960",
    "end": "1257780"
  },
  {
    "text": "going to work",
    "start": "1257780",
    "end": "1260260"
  },
  {
    "text": "so this is where we have our xss and on the attacker's website we can see",
    "start": "1265520",
    "end": "1270679"
  },
  {
    "text": "that we leak the file which is desktopconfig.json and within this file",
    "start": "1270679",
    "end": "1275780"
  },
  {
    "text": "that is a JWT or jot token which you can use to get access to any user account",
    "start": "1275780",
    "end": "1281960"
  },
  {
    "text": "which you want to Target so that is uh the impact of our Microsoft teams",
    "start": "1281960",
    "end": "1287840"
  },
  {
    "text": "exploit so we received three thousand dollar Bounty for our Microsoft teams exploit",
    "start": "1287840",
    "end": "1293840"
  },
  {
    "text": "which is pretty nice but let's take one step even further what if everything is",
    "start": "1293840",
    "end": "1299299"
  },
  {
    "text": "green like what if an app is running with all proper security settings so",
    "start": "1299299",
    "end": "1305179"
  },
  {
    "text": "this settings is used by most of the application node Primitives are not exposed to the renderer context",
    "start": "1305179",
    "end": "1311480"
  },
  {
    "text": "isolation is enabled so we have a separate context and sandbox is true",
    "start": "1311480",
    "end": "1316580"
  },
  {
    "text": "so to hack this configuration is the main part of our research so here in the",
    "start": "1316580",
    "end": "1322880"
  },
  {
    "text": "block diagram we are mostly targeting this sandbox renderer portion",
    "start": "1322880",
    "end": "1328520"
  },
  {
    "text": "so at this point you might have a question that is this just like having an xss in a browser because everything",
    "start": "1328520",
    "end": "1334220"
  },
  {
    "text": "is enabled all security settings and the answer to that is no the reason for that",
    "start": "1334220",
    "end": "1340880"
  },
  {
    "text": "is that electron is not the same as your commonly used day-to-day Chromium",
    "start": "1340880",
    "end": "1346340"
  },
  {
    "text": "browser for example so electron code is something which is a combination of",
    "start": "1346340",
    "end": "1351620"
  },
  {
    "text": "chrome and electron specific code so what if we find a way to abuse this",
    "start": "1351620",
    "end": "1359120"
  },
  {
    "text": "intersection between electrons code and chromium code and somehow subvert all",
    "start": "1359120",
    "end": "1365780"
  },
  {
    "text": "the defenses which electron had let's see so first I'm going to present a CV which",
    "start": "1365780",
    "end": "1372200"
  },
  {
    "text": "we discovered in electron which is enabling node integration in subframes from a compromise renderer",
    "start": "1372200",
    "end": "1378740"
  },
  {
    "text": "so what is the node integration in subframes so let's say you have a website for example.com and you create",
    "start": "1378740",
    "end": "1386120"
  },
  {
    "text": "an iframe within that website which is to load another web page now let's say if you want to provide",
    "start": "1386120",
    "end": "1392480"
  },
  {
    "text": "access to node Primitives or preload scripts within this iframe you need to",
    "start": "1392480",
    "end": "1398179"
  },
  {
    "text": "enable a feature flag known as node integration in subframes because by default it is false so this is a way to",
    "start": "1398179",
    "end": "1406039"
  },
  {
    "text": "provide access to preloads or node Primitives to your iframe so for every",
    "start": "1406039",
    "end": "1412220"
  },
  {
    "text": "subframes like iframe or child Windows if node integration is enabled and",
    "start": "1412220",
    "end": "1417440"
  },
  {
    "text": "sandbox is disabled on your parent window which is your example.com then node.js will Primitives will be",
    "start": "1417440",
    "end": "1423679"
  },
  {
    "text": "available in subframes if node integration is disabled and sandbox doesn't matter even if it's enable or",
    "start": "1423679",
    "end": "1430220"
  },
  {
    "text": "disable then all your preloads will load within this specific iframe so let's see",
    "start": "1430220",
    "end": "1436220"
  },
  {
    "text": "in the code to understand a bit further so here we have a main process where we create browser window preference and",
    "start": "1436220",
    "end": "1443000"
  },
  {
    "text": "node integration subframes is false we do the same thing a loader URL",
    "start": "1443000",
    "end": "1449059"
  },
  {
    "text": "google.com and Define an IPC channel on the render process again the same story",
    "start": "1449059",
    "end": "1454159"
  },
  {
    "text": "We expose open URL and on the website google.com I create an iframe to pawn.af and I use that",
    "start": "1454159",
    "end": "1463720"
  },
  {
    "text": "window.electron.openurl to pass an argument this works fine but from the iframe when I try to do the",
    "start": "1463720",
    "end": "1470539"
  },
  {
    "text": "same thing by invoking that open URL it doesn't work it's because node integration in subframes is false",
    "start": "1470539",
    "end": "1477260"
  },
  {
    "text": "let's turn it to true and in this case no Adder is thrown and you can do you",
    "start": "1477260",
    "end": "1484159"
  },
  {
    "text": "can pop a calc from your iframe so most of the time when we get exercise",
    "start": "1484159",
    "end": "1489320"
  },
  {
    "text": "in a lot of these applications it is within iframe or subframes which you",
    "start": "1489320",
    "end": "1495020"
  },
  {
    "text": "notice in the Discord earlier and in this case node integration in subframes is disabled mostly because developers do",
    "start": "1495020",
    "end": "1502700"
  },
  {
    "text": "not go against uh the design pattern and enable it unless it's needed so in this",
    "start": "1502700",
    "end": "1508280"
  },
  {
    "text": "case even if we have xss we don't have access to context Bridge exposed API on embed which is a bit sad but can we",
    "start": "1508280",
    "end": "1516679"
  },
  {
    "text": "still hack it can we still find a way to somehow get access to those preload and node Primitives through this let's see",
    "start": "1516679",
    "end": "1524360"
  },
  {
    "text": "so to see this we take a deep dive into the electron source code let's look at",
    "start": "1524360",
    "end": "1529580"
  },
  {
    "text": "the let's look what how electron implements this security features So What electron does it it patches blink",
    "start": "1529580",
    "end": "1537080"
  },
  {
    "text": "web preferences and adds this node integration in subframes context site isolation everything within this so in",
    "start": "1537080",
    "end": "1545419"
  },
  {
    "text": "the red nisf is implemented there so when we take a more deep dive into",
    "start": "1545419",
    "end": "1551480"
  },
  {
    "text": "how the code for this works like on based on what you need to enable nisf we",
    "start": "1551480",
    "end": "1557179"
  },
  {
    "text": "can go to a file which is in the folder which is shell renderer and within this",
    "start": "1557179",
    "end": "1563240"
  },
  {
    "text": "file uh what it happens in the box marked as red is the rendered frame gets",
    "start": "1563240",
    "end": "1569539"
  },
  {
    "text": "access to Blink web preferences and then it accesses node integration in subframes variable and if this is set to",
    "start": "1569539",
    "end": "1577279"
  },
  {
    "text": "true or false based on that it will make a decision on whether to enable that feature or not",
    "start": "1577279",
    "end": "1583820"
  },
  {
    "text": "now if you have been paying close attention you would notice that the check here for this feature is on the",
    "start": "1583820",
    "end": "1590360"
  },
  {
    "text": "renderer process so what we can do is if we can run a renderer V8 exploit and",
    "start": "1590360",
    "end": "1597380"
  },
  {
    "text": "find a way to somehow set that variable which we just saw previously to one then we might be able to enable nisf",
    "start": "1597380",
    "end": "1605059"
  },
  {
    "text": "so here is an annotated version of our binary exploit so first of all we leak",
    "start": "1605059",
    "end": "1611659"
  },
  {
    "text": "address to window in the memory we added to get access to a web preferences we",
    "start": "1611659",
    "end": "1618679"
  },
  {
    "text": "add an offset to node integration in subframe and then we flip it to 1 from 0",
    "start": "1618679",
    "end": "1625100"
  },
  {
    "text": "to enable it so this is how the changes which you would make to your V8 expert",
    "start": "1625100",
    "end": "1630380"
  },
  {
    "text": "in order to perform this attack so let's look at the real world case which we found in element app and",
    "start": "1630380",
    "end": "1636799"
  },
  {
    "text": "element is a really famous application so it is using Chrome 91 and electron",
    "start": "1636799",
    "end": "1641900"
  },
  {
    "text": "13. there is an xss on embed through a deep link misconfiguration and no",
    "start": "1641900",
    "end": "1647659"
  },
  {
    "text": "context which API on embed is exposed by default so what you can do is same story you run",
    "start": "1647659",
    "end": "1654860"
  },
  {
    "text": "Chrome V8 exploit Xpose context Bridge API and then perform your exploit",
    "start": "1654860",
    "end": "1660980"
  },
  {
    "text": "So within the main process element app defines a IPC known as user download open this is used to open a path using",
    "start": "1660980",
    "end": "1669020"
  },
  {
    "text": "shell dot open path which is a dangerous sync in node.js",
    "start": "1669020",
    "end": "1674900"
  },
  {
    "text": "and on the renderer process it exposes electron dot send as a way to proxy",
    "start": "1674900",
    "end": "1680960"
  },
  {
    "text": "messages to main process so as we can see in our exploit what we do is we create an iframe SRC dock to",
    "start": "1680960",
    "end": "1688940"
  },
  {
    "text": "create your own iframe and once this rendered exploit runs it will create and",
    "start": "1688940",
    "end": "1694039"
  },
  {
    "text": "this iframe with node integration in subframes enabled So within this new iframe you will be able to access like",
    "start": "1694039",
    "end": "1701779"
  },
  {
    "text": "electron dot send method which was exposed earlier and can pass your own",
    "start": "1701779",
    "end": "1706820"
  },
  {
    "text": "argument to pop a shell so iframe will pop up and then you can pop up shell",
    "start": "1706820",
    "end": "1713120"
  },
  {
    "text": "because nisf is enabled let's see how this looks in the demo",
    "start": "1713120",
    "end": "1719140"
  },
  {
    "text": "so victim opens a the app",
    "start": "1719600",
    "end": "1724658"
  },
  {
    "text": "it's a video conferencing victim will try to join this video conference and as you can see in the background I",
    "start": "1725000",
    "end": "1731480"
  },
  {
    "text": "want to show you how this exploit would run this is where this calculation of the offset is gonna take place so we are",
    "start": "1731480",
    "end": "1739220"
  },
  {
    "text": "doing a step-by-step calculation and once this happens the shell will be popped as now you have",
    "start": "1739220",
    "end": "1745580"
  },
  {
    "text": "access to those preloads",
    "start": "1745580",
    "end": "1748899"
  },
  {
    "text": "so now let's try to do it a bit more so we received a three thousand dollar",
    "start": "1751720",
    "end": "1757039"
  },
  {
    "text": "Bounty from internet bug Bounty program as we reported this bug to electron Js",
    "start": "1757039",
    "end": "1762320"
  },
  {
    "text": "so now we will try to disable context isolation using a compromise renderer",
    "start": "1762320",
    "end": "1768080"
  },
  {
    "text": "so in this case it's the same story you know that electron patches blink web preferences adds context isolation there",
    "start": "1768080",
    "end": "1775640"
  },
  {
    "text": "and when we look into the electron code what we figure is it does the same thing",
    "start": "1775640",
    "end": "1780740"
  },
  {
    "text": "it gets access to the web preferences and access context underscore isolation",
    "start": "1780740",
    "end": "1785840"
  },
  {
    "text": "variable in the step number one in Step number two it has a Boolean value which",
    "start": "1785840",
    "end": "1791840"
  },
  {
    "text": "is like should create context isolation which is based on the value from the step number one and under step number",
    "start": "1791840",
    "end": "1798140"
  },
  {
    "text": "three there is a if statement which is like if should uh enable context",
    "start": "1798140",
    "end": "1803360"
  },
  {
    "text": "isolation is true then enable it else disable so our goal is to disable the",
    "start": "1803360",
    "end": "1809480"
  },
  {
    "text": "context isolation so same story you can use V8 render dot exploit because this",
    "start": "1809480",
    "end": "1815120"
  },
  {
    "text": "this particular feature was enabled on the renderer side and not on the sandbox side which was a design flaw within",
    "start": "1815120",
    "end": "1821179"
  },
  {
    "text": "electron.js framework and then you can set it from one to zero so this is an",
    "start": "1821179",
    "end": "1826340"
  },
  {
    "text": "annotated version of our binary exploit we get offset to a CIS or in the memory",
    "start": "1826340",
    "end": "1833059"
  },
  {
    "text": "and then we overwrite its value from one to zero to disable it",
    "start": "1833059",
    "end": "1838340"
  },
  {
    "text": "so let's take a look at our final case study which is RC in an undisclosed app",
    "start": "1838340",
    "end": "1843500"
  },
  {
    "text": "so we found a feature to embed untrusted content in an iframe in this application",
    "start": "1843500",
    "end": "1849260"
  },
  {
    "text": "so in the main process again you can see open underscore external is a channel which is dangerous sync and on the",
    "start": "1849260",
    "end": "1857240"
  },
  {
    "text": "preload we have something known as is allowed URL which is a function to",
    "start": "1857240",
    "end": "1862700"
  },
  {
    "text": "perform like allow list and it will only allow if the URLs has a protocol which",
    "start": "1862700",
    "end": "1867980"
  },
  {
    "text": "is https so unlike previous exploit you cannot pass something like file path to calc",
    "start": "1867980",
    "end": "1874100"
  },
  {
    "text": "dot app because then it will have a file protocol which will not be the https so let's try to find a way to bypass",
    "start": "1874100",
    "end": "1882559"
  },
  {
    "text": "this and make a direct IPC call to the main process from the web page so here is our exploit first of all we",
    "start": "1882559",
    "end": "1890659"
  },
  {
    "text": "disable context isolation using our V8 exploit then we perform a redirection to",
    "start": "1890659",
    "end": "1896659"
  },
  {
    "text": "an another web page which is leak.html and once this page is reloaded this will",
    "start": "1896659",
    "end": "1902539"
  },
  {
    "text": "be reloaded with context isolation disabled so what we can do is we can perform prototype pollution which I",
    "start": "1902539",
    "end": "1908539"
  },
  {
    "text": "showed earlier in the previous slide and get access to the IPC directly so in this way you can make a call even with",
    "start": "1908539",
    "end": "1915799"
  },
  {
    "text": "five protocol by bypassing that preload which was the middleman performing that",
    "start": "1915799",
    "end": "1921020"
  },
  {
    "text": "allow list to check so let's see how the demo would look like",
    "start": "1921020",
    "end": "1927220"
  },
  {
    "text": "so here are the calculation for the Heap offset offset for the V8 exploit which I mentioned earlier",
    "start": "1930020",
    "end": "1937120"
  },
  {
    "text": "and as you can see uh in the background this is what it happens it gets the offset it gets ciso and it sets to zero",
    "start": "1937520",
    "end": "1945020"
  },
  {
    "text": "now this is leak.html when we click on it we pop a shell because that was with",
    "start": "1945020",
    "end": "1950360"
  },
  {
    "text": "CIS or disabled window so we received five thousand dollar Bounty for from this undisclosed Bounty",
    "start": "1950360",
    "end": "1958039"
  },
  {
    "text": "program which is a very commonly used app as well now let's let's shift our gears to talk",
    "start": "1958039",
    "end": "1964039"
  },
  {
    "text": "about same site origin spoofing So within electron app let's say if you",
    "start": "1964039",
    "end": "1969140"
  },
  {
    "text": "want to load a website known as main.example.com then chromium will",
    "start": "1969140",
    "end": "1974840"
  },
  {
    "text": "internally create a process for example a process one for this now within this",
    "start": "1974840",
    "end": "1980020"
  },
  {
    "text": "main.example.com if you wanna in Implement like iframes for example youtube.com and sandbox.example.com then",
    "start": "1980020",
    "end": "1988399"
  },
  {
    "text": "let's see how many process it creates for this two iframes so it only creates a separate process",
    "start": "1988399",
    "end": "1995480"
  },
  {
    "text": "for youtube.com but it doesn't create the separate process for sandbox.example.com the reason is that a",
    "start": "1995480",
    "end": "2003340"
  },
  {
    "text": "chrome uses the same process if your top level domain is the same so in this case",
    "start": "2003340",
    "end": "2009159"
  },
  {
    "text": "example.com is the common between both of your sub domains and site isolation",
    "start": "2009159",
    "end": "2014500"
  },
  {
    "text": "won't apply here so Chrome uses the same process for both the pages so let's say",
    "start": "2014500",
    "end": "2020620"
  },
  {
    "text": "if you have an exercise on sandbox.example.com and you want to access like those preload apis and node",
    "start": "2020620",
    "end": "2028179"
  },
  {
    "text": "Primitives which are running on main.example.com then how would you do it the way you can do is is you can run",
    "start": "2028179",
    "end": "2035380"
  },
  {
    "text": "like a chrome render or V8 exploit and you can set document.url to",
    "start": "2035380",
    "end": "2041039"
  },
  {
    "text": "main.example.com and security context origin port to 443 this way you can",
    "start": "2041039",
    "end": "2047860"
  },
  {
    "text": "masculate as your parent page and will be able to access all these preloads and",
    "start": "2047860",
    "end": "2054099"
  },
  {
    "text": "node Primitives which are provided to the main.example.com",
    "start": "2054099",
    "end": "2059138"
  },
  {
    "text": "so as we notice we used a lot of V8 expert to perform this attacks and there",
    "start": "2059139",
    "end": "2065080"
  },
  {
    "text": "is a noticeable patch Gap within electron electron apps and chrome which",
    "start": "2065080",
    "end": "2071138"
  },
  {
    "text": "makes a lot of that this app susceptible to this attacks and if you want to go",
    "start": "2071139",
    "end": "2076540"
  },
  {
    "text": "one step further you can also use like sandbox escape from chromium which are pretty rare but it can also bypass this",
    "start": "2076540",
    "end": "2083560"
  },
  {
    "text": "sandbox to a configuration so as a part of the mitigations",
    "start": "2083560",
    "end": "2088658"
  },
  {
    "text": "um what uh are the suggested mitigations for this is the findings which we did earlier were all fixed by electron and",
    "start": "2088659",
    "end": "2096040"
  },
  {
    "text": "we were assigned CV for those finding so electron made a code level fix to not do",
    "start": "2096040",
    "end": "2101200"
  },
  {
    "text": "this check on the rendered process so you cannot just directly invoke those leaked IPC uh on the newer version but",
    "start": "2101200",
    "end": "2108460"
  },
  {
    "text": "as a developer what you can do is you can still enable all the security Flags because that's the recommended part you",
    "start": "2108460",
    "end": "2115780"
  },
  {
    "text": "shouldn't use a untrusted third-party embed which doesn't have a good security track record for example we saw with",
    "start": "2115780",
    "end": "2123640"
  },
  {
    "text": "Discord like you can embed a Vimeo which had xss and that was the failure point for the app",
    "start": "2123640",
    "end": "2129160"
  },
  {
    "text": "so make sure your attach Gap isn't large with chromium and your electron app so",
    "start": "2129160",
    "end": "2134859"
  },
  {
    "text": "if you have an organization and have a capability you can Fork electron and you can cherry pick commits which are V8",
    "start": "2134859",
    "end": "2142599"
  },
  {
    "text": "um uh bugs and can fix it by yourself so that is one way to do it and another",
    "start": "2142599",
    "end": "2149560"
  },
  {
    "text": "issue is you shouldn't Implement sensitive ipcs like what we saw earlier",
    "start": "2149560",
    "end": "2155320"
  },
  {
    "text": "those dangerous JavaScript syncs in your main process because attacker will find",
    "start": "2155320",
    "end": "2160599"
  },
  {
    "text": "a way to get access to those ipcs even if they are restricted and mitigate uh",
    "start": "2160599",
    "end": "2166060"
  },
  {
    "text": "security issues across all your asset so your main domain your sub domain whatever you are using in the app make",
    "start": "2166060",
    "end": "2173079"
  },
  {
    "text": "sure it is restricted because as you saw with same site origin spoofing a Sandbox domain can also get access to those uh",
    "start": "2173079",
    "end": "2181119"
  },
  {
    "text": "privilege a context Bridge exposed API so as a part of epilogue we were able to",
    "start": "2181119",
    "end": "2186820"
  },
  {
    "text": "compromise more than 20 commonly used electron applications uh this was",
    "start": "2186820",
    "end": "2192099"
  },
  {
    "text": "running at the latest version and we were also able to compromise Jupiter lab matter most notion based camp and the",
    "start": "2192099",
    "end": "2200740"
  },
  {
    "text": "apps which I showed in this demo which are few of them so as a part of our blackhead sound bite",
    "start": "2200740",
    "end": "2207520"
  },
  {
    "text": "I want to talk and emphasize on three key takeaways for this so the first one",
    "start": "2207520",
    "end": "2212800"
  },
  {
    "text": "is for bug bounty hunters and security researcher which is to dig deeper into",
    "start": "2212800",
    "end": "2217960"
  },
  {
    "text": "the framework you are auditing and to not limit yourself only to the application layer so what we see with",
    "start": "2217960",
    "end": "2224680"
  },
  {
    "text": "electron is there is a design flaw where these features were enabled on the",
    "start": "2224680",
    "end": "2229839"
  },
  {
    "text": "renderer for example and that intersection was not done perfectly so design labor layer floss can enable you",
    "start": "2229839",
    "end": "2237460"
  },
  {
    "text": "to bypass a lot of security settings if you have a primitive to a tweak those",
    "start": "2237460",
    "end": "2243579"
  },
  {
    "text": "second is for Ray team operators that electron apps are an ideal adversarial",
    "start": "2243579",
    "end": "2249820"
  },
  {
    "text": "Target because users will click anywhere or open any link users are gonna join",
    "start": "2249820",
    "end": "2255339"
  },
  {
    "text": "video conferences they are gonna opening the messages so if you are in a detection team make sure that you also",
    "start": "2255339",
    "end": "2261400"
  },
  {
    "text": "consider electron applications used within your organization as a part of the threat model",
    "start": "2261400",
    "end": "2266800"
  },
  {
    "text": "the third one is to minimize attack surface on your application as much as possible so in security what we consider",
    "start": "2266800",
    "end": "2274359"
  },
  {
    "text": "open URL redirection it's a very P5 issue but in electron JS someone can",
    "start": "2274359",
    "end": "2280540"
  },
  {
    "text": "still use an open URL redirect to redirect to their own external website and get access to the main webview and",
    "start": "2280540",
    "end": "2287680"
  },
  {
    "text": "perform this attack so treat all the security issues with a higher scrutiny",
    "start": "2287680",
    "end": "2294400"
  },
  {
    "text": "if possible and when you are doing threat modeling of your electron applications consider all the windows",
    "start": "2294400",
    "end": "2300579"
  },
  {
    "text": "and apply all the security settings on every window because as we saw with vs",
    "start": "2300579",
    "end": "2305800"
  },
  {
    "text": "code we were able to jump from the most restrictive to the least one and was able to get RC",
    "start": "2305800",
    "end": "2311740"
  },
  {
    "text": "so that's pretty much it for the presentation um first of all I would like to thank everyone coming by and stopping by and",
    "start": "2311740",
    "end": "2318579"
  },
  {
    "text": "hearing about talk uh and if you want to understand all these use cases which I mentioned here the application part of",
    "start": "2318579",
    "end": "2325359"
  },
  {
    "text": "it how we achieved in details and if you want to secure your electron applications please visit uh",
    "start": "2325359",
    "end": "2331740"
  },
  {
    "text": "electrovold.io and then you can find like our blog website which is",
    "start": "2331740",
    "end": "2336839"
  },
  {
    "text": "blog.electrovold.io and we have already published a use cases for vs code and",
    "start": "2336839",
    "end": "2341980"
  },
  {
    "text": "Discord RC there where you can look this entire chain in detail and understand further",
    "start": "2341980",
    "end": "2347619"
  },
  {
    "text": "so with that um I'm concluding the talk and uh opening up for any questions which you",
    "start": "2347619",
    "end": "2353980"
  },
  {
    "text": "may have [Music]",
    "start": "2353980",
    "end": "2360769"
  },
  {
    "text": "[Music]",
    "start": "2364630",
    "end": "2367719"
  }
]