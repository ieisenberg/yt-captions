[
  {
    "text": "hi everyone and welcome to my talk magic dot today we'll see a hackers magic show",
    "start": "2600",
    "end": "11160"
  },
  {
    "text": "and we'll together see how much magic dots and spaces create but in this magic",
    "start": "11160",
    "end": "17760"
  },
  {
    "text": "show you'll also learn the tricks so my name is Ora ear I'm the",
    "start": "17760",
    "end": "24880"
  },
  {
    "text": "security research team lead at safebridge I have more than six years of",
    "start": "24880",
    "end": "30039"
  },
  {
    "text": "experience in cyber security and in my past I researched Linux embedded some Android and in for",
    "start": "30039",
    "end": "38480"
  },
  {
    "text": "the last three years my main focus lies in Windows research but let's see what",
    "start": "38480",
    "end": "44239"
  },
  {
    "text": "we're going to talk about today so we're going to start with an introduction about an unfixed known issue in Windows",
    "start": "44239",
    "end": "51360"
  },
  {
    "text": "that exists for years which is also the base for this entire research we'll then",
    "start": "51360",
    "end": "56879"
  },
  {
    "text": "move on to specifying the research goals that I find when I started a",
    "start": "56879",
    "end": "62359"
  },
  {
    "text": "research then move on to um to see the post exploitation techniques and",
    "start": "62359",
    "end": "68560"
  },
  {
    "text": "vulnerabilities that I discovered based on this known issue and finally summarize with cves fixes takeaways and",
    "start": "68560",
    "end": "75560"
  },
  {
    "text": "provide a link to the gup repository so backwards compatibility in",
    "start": "75560",
    "end": "81880"
  },
  {
    "text": "Windows is a key element we all know that as the world's most popular desktop",
    "start": "81880",
    "end": "87400"
  },
  {
    "text": "OS Windows is trying to evolve while while maintaining its already invested customer base by not breaking any third",
    "start": "87400",
    "end": "94240"
  },
  {
    "text": "party software or features that they already use as a result there must be some known",
    "start": "94240",
    "end": "100720"
  },
  {
    "text": "issues left unfixed and this is exactly why what I encountered while I worked on a",
    "start": "100720",
    "end": "107159"
  },
  {
    "text": "different research project using ntapi uh you can see the gift too much",
    "start": "107159",
    "end": "113880"
  },
  {
    "text": "okay using n API which we'll later discuss I created two files with the",
    "start": "113880",
    "end": "119200"
  },
  {
    "text": "same name but one had a trailing dot then I deleted the one with the trailing",
    "start": "119200",
    "end": "124759"
  },
  {
    "text": "Dot and as a result the one without the trailing dot was deleted instead it",
    "start": "124759",
    "end": "130440"
  },
  {
    "text": "looked like pure magic so I decided to learn the magic primitive and create my",
    "start": "130440",
    "end": "136280"
  },
  {
    "text": "new hacker magic show looking at Microsoft's documentation I saw something that I had",
    "start": "136280",
    "end": "143400"
  },
  {
    "text": "no idea about Microsoft explicitly asked users to not end a file name or a",
    "start": "143400",
    "end": "149400"
  },
  {
    "text": "directory name with a space or a dot but as hackers what do we do when someone",
    "start": "149400",
    "end": "155720"
  },
  {
    "text": "tells us not to do something of course we do it but we before we dive into um",
    "start": "155720",
    "end": "163360"
  },
  {
    "text": "how we can utilize this known issue we must first understand exactly how it works so win32 API calls that you'll",
    "start": "163360",
    "end": "173080"
  },
  {
    "text": "normally use in user space usually do not do the actual operations themselves",
    "start": "173080",
    "end": "179159"
  },
  {
    "text": "and instead call and underlying anti functions as you may know now another",
    "start": "179159",
    "end": "184560"
  },
  {
    "text": "fact is that the um the wi 32 API calls",
    "start": "184560",
    "end": "189840"
  },
  {
    "text": "that receive uh path arguments we usually provide them with uh paths formatted as",
    "start": "189840",
    "end": "197920"
  },
  {
    "text": "do paths this is the normal type of path that you usually use however anti",
    "start": "197920",
    "end": "203480"
  },
  {
    "text": "functions do not work with those paths and instead they work with a type of a path called anti paath",
    "start": "203480",
    "end": "211239"
  },
  {
    "text": "therefore the win32 API calls must perform a conversion from dose paths to",
    "start": "211239",
    "end": "216959"
  },
  {
    "text": "anti paaths when they called anti functions as far as my check goes um the",
    "start": "216959",
    "end": "225200"
  },
  {
    "text": "conversion is performed by a a family of function that all go through one",
    "start": "225200",
    "end": "230599"
  },
  {
    "text": "function called RTP does path name to relative empty paath name and apparently",
    "start": "230599",
    "end": "237360"
  },
  {
    "text": "this function removes trailing dots and trailing spaces in the following",
    "start": "237360",
    "end": "243079"
  },
  {
    "text": "format so basically any trailing Dot from any path element in the converted",
    "start": "243079",
    "end": "249760"
  },
  {
    "text": "in the resulted anti path is removed and Trading Spaces are removed only from the",
    "start": "249760",
    "end": "255920"
  },
  {
    "text": "last path element and here you can see some examples so if we'll take a look at the top four we can see that all those",
    "start": "255920",
    "end": "263560"
  },
  {
    "text": "paths have um Trading Spaces and dots uh in their last path argument in the last",
    "start": "263560",
    "end": "269240"
  },
  {
    "text": "path element ments and they are all removed after the conversion if we look at the bottom two we can see that in the",
    "start": "269240",
    "end": "275919"
  },
  {
    "text": "second path element we have once a DOT and once a space the dot is removed but",
    "start": "275919",
    "end": "281560"
  },
  {
    "text": "the space is not since it's not the last path AR the last path element",
    "start": "281560",
    "end": "286919"
  },
  {
    "text": "sorry if you want to deeper dive into types into types of paths in Windows and",
    "start": "286919",
    "end": "293080"
  },
  {
    "text": "exactly how they're converted to anti paaths then after I discovered this issue I saw a very informative blog post",
    "start": "293080",
    "end": "300000"
  },
  {
    "text": "by James Forshaw about um this information so I really recommend um",
    "start": "300000",
    "end": "305199"
  },
  {
    "text": "diving into it but after I understood exactly how",
    "start": "305199",
    "end": "310800"
  },
  {
    "text": "this known issue Works uh it immediately hit me that such",
    "start": "310800",
    "end": "316680"
  },
  {
    "text": "a magic primitive would be perfect for some rootkit magic the Assumption was that if I use",
    "start": "316680",
    "end": "325560"
  },
  {
    "text": "such Pro problematic paths that are converted to other paths then I will",
    "start": "325560",
    "end": "332360"
  },
  {
    "text": "maybe be able to manipulate what users see so we all know that the primary um",
    "start": "332360",
    "end": "339440"
  },
  {
    "text": "target of a root kit is usually conce to conceal malicious elements but in order to understand how this rootkit would be",
    "start": "339440",
    "end": "346360"
  },
  {
    "text": "different from normal rootkits that we know let's briefly go over them so a",
    "start": "346360",
    "end": "352600"
  },
  {
    "text": "kernel space root kit would one would run in the kernel and hook kernel space API and manipulate information returned",
    "start": "352600",
    "end": "360440"
  },
  {
    "text": "to users to conceal malicious information in order to run a k root kit",
    "start": "360440",
    "end": "366080"
  },
  {
    "text": "one would need administrator privileges and to handle obstacles and mitigations such as the driver signature re",
    "start": "366080",
    "end": "372080"
  },
  {
    "text": "enforcement feature driver blocklist HCI and more and for this reason we barely",
    "start": "372080",
    "end": "378599"
  },
  {
    "text": "see carer rootkits in the wild um these days um a user space root kit runs in",
    "start": "378599",
    "end": "386960"
  },
  {
    "text": "user space of course and it injects itself into two processes um and then",
    "start": "386960",
    "end": "392400"
  },
  {
    "text": "hooks API calls in them again in order to manipulate information retrieved by",
    "start": "392400",
    "end": "398400"
  },
  {
    "text": "the caller in order to run a user space rootkit one would need again administrator privileges because a",
    "start": "398400",
    "end": "404960"
  },
  {
    "text": "rootkit would want to hide itself from all users on the system meaning it would need to inject itself into into",
    "start": "404960",
    "end": "412599"
  },
  {
    "text": "processes that run with administrator privileges thus administrator privileges",
    "start": "412599",
    "end": "417840"
  },
  {
    "text": "are required but then a a question Rises doesn't it",
    "start": "417840",
    "end": "423720"
  },
  {
    "text": "make sense that an attacker has managed to breach an end point which is just",
    "start": "423720",
    "end": "430319"
  },
  {
    "text": "fully patched and the attacker does not have a zero day privilege escalation varability doesn't it make sense that an",
    "start": "430319",
    "end": "437840"
  },
  {
    "text": "attacker has managed to breach an endpoint and maybe does not even need administrator privileges to perform its",
    "start": "437840",
    "end": "445879"
  },
  {
    "text": "goals of course this can happen and with that being being said I could not find",
    "start": "445879",
    "end": "451360"
  },
  {
    "text": "any rootkit like abilities that are able to be performed by an unprivileged user",
    "start": "451360",
    "end": "457840"
  },
  {
    "text": "in order to hide from all users on the system including",
    "start": "457840",
    "end": "462960"
  },
  {
    "text": "admins what I realized was that there could be a way to manipulate information",
    "start": "462960",
    "end": "469599"
  },
  {
    "text": "retrieved by a caller without being a part of the chain of calls like any",
    "start": "469599",
    "end": "475879"
  },
  {
    "text": "other root kit does and without needing any privileges for that because all we",
    "start": "475879",
    "end": "481479"
  },
  {
    "text": "need to do is to name files and directories however we need to name them",
    "start": "481479",
    "end": "486759"
  },
  {
    "text": "to name them so because we have the issue in the converting function we can",
    "start": "486759",
    "end": "492280"
  },
  {
    "text": "affect it to be kind of our hook in the chain of calls that retrieve",
    "start": "492280",
    "end": "498080"
  },
  {
    "text": "information and so the first research goal of my uh research was updated to",
    "start": "498080",
    "end": "503759"
  },
  {
    "text": "not require any um sort of administrator privileges um to so they will be able to",
    "start": "503759",
    "end": "511520"
  },
  {
    "text": "be performed by unprivileged users as well now the second research goal is",
    "start": "511520",
    "end": "517599"
  },
  {
    "text": "much more obvious already and that is to prove that such unfixed known issues that are left in Windows for years are",
    "start": "517599",
    "end": "525600"
  },
  {
    "text": "security risks and the most simple way to prove that would be to find Runner abilities based on this known",
    "start": "525600",
    "end": "533480"
  },
  {
    "text": "issue so without further Ado let's um let's see magic tricks to conceal files",
    "start": "533480",
    "end": "540360"
  },
  {
    "text": "and directories so the first and most obvious thing we can do using this known",
    "start": "540360",
    "end": "546279"
  },
  {
    "text": "issue is to just name a file using anti paath of course so the conversion will",
    "start": "546279",
    "end": "552560"
  },
  {
    "text": "not occur so just name them with dots and spaces or add um dots or spaces to",
    "start": "552560",
    "end": "559279"
  },
  {
    "text": "the end of an existing file name and as a result no file operations including",
    "start": "559279",
    "end": "564320"
  },
  {
    "text": "read write delete delete and so on could be taken against this file but we can",
    "start": "564320",
    "end": "571920"
  },
  {
    "text": "take this even further we can create what I call an impersonated file or directory if for example um we will name",
    "start": "571920",
    "end": "580760"
  },
  {
    "text": "a file benign dot so it has a trailing dot in the end of its name and we'll uh",
    "start": "580760",
    "end": "587440"
  },
  {
    "text": "we'll create this file in in a directory where a another file called just B9 is",
    "start": "587440",
    "end": "593959"
  },
  {
    "text": "present then what will happen um is that any file operation will be",
    "start": "593959",
    "end": "599839"
  },
  {
    "text": "that will be taken against benign dot will actually be taken against the",
    "start": "599839",
    "end": "605440"
  },
  {
    "text": "benign file that was already there because the trailing dot will be removed and then the path will reference the um",
    "start": "605440",
    "end": "613880"
  },
  {
    "text": "the original file so if a user reads B9 dot it will be presented with the",
    "start": "613880",
    "end": "619079"
  },
  {
    "text": "contents of B9 without a DOT and that is true for listing",
    "start": "619079",
    "end": "624600"
  },
  {
    "text": "directory as well deleting files and so on another feature another backwards",
    "start": "624600",
    "end": "630040"
  },
  {
    "text": "compatibility feature that we can leverage um to uh hide files is called short names AKA 8.3 file names basically",
    "start": "630040",
    "end": "639920"
  },
  {
    "text": "these names are very old type of names present since very old versions of Dos",
    "start": "639920",
    "end": "646079"
  },
  {
    "text": "and windows um and they're not of course the default names nowadays but we can still",
    "start": "646079",
    "end": "651920"
  },
  {
    "text": "use them and reference them with paths so let's see how we can use",
    "start": "651920",
    "end": "658240"
  },
  {
    "text": "them let's say that we have a file called a.txt in some directory and then",
    "start": "658240",
    "end": "665560"
  },
  {
    "text": "we want to create our own malicious file that we that will be hidden in some way",
    "start": "665560",
    "end": "673959"
  },
  {
    "text": "and we want a user that will read our malicious file to be presented with the",
    "start": "673959",
    "end": "679320"
  },
  {
    "text": "contents of a.txt instead of the real content there that is present inside",
    "start": "679320",
    "end": "685320"
  },
  {
    "text": "what we can do is to set the short name of a.txt to be LOL for example and then",
    "start": "685320",
    "end": "693040"
  },
  {
    "text": "name our malicious file in the same directory as LOL dot then as a result",
    "start": "693040",
    "end": "700200"
  },
  {
    "text": "when a user references LOL dot with a Dos path which is the most normal one",
    "start": "700200",
    "end": "706560"
  },
  {
    "text": "then the trailing dot will be removed eventually the path will reference LOL and LOL is actually a.txt so whoever",
    "start": "706560",
    "end": "714279"
  },
  {
    "text": "reads LOL dot will be presented with the contents of a.txt and that is true also",
    "start": "714279",
    "end": "719680"
  },
  {
    "text": "for any other file operation and for directories as well another way we can hide files is",
    "start": "719680",
    "end": "727639"
  },
  {
    "text": "using zip archives basically if file explorer is the default extractor the",
    "start": "727639",
    "end": "733440"
  },
  {
    "text": "default archive archive extractor on the victim system then because File Explorer",
    "start": "733440",
    "end": "738839"
  },
  {
    "text": "has difficulties functioning with such problematic paths then if we just name a",
    "start": "738839",
    "end": "744800"
  },
  {
    "text": "file in a z archive with a trailing dot or a directory with a tra in dot then",
    "start": "744800",
    "end": "750240"
  },
  {
    "text": "when file explorer lists the archive or extracts the archive we won't see the",
    "start": "750240",
    "end": "756839"
  },
  {
    "text": "filing there at all so if you just name it nobody name it with the trailing dot",
    "start": "756839",
    "end": "763480"
  },
  {
    "text": "nobody will see it to demonstrate that um all of these",
    "start": "763480",
    "end": "769120"
  },
  {
    "text": "capabilities together I created a demonstration video with a presumably normal test directory",
    "start": "769120",
    "end": "776959"
  },
  {
    "text": "directory called test with some files folders and an archive inside in the",
    "start": "776959",
    "end": "782839"
  },
  {
    "text": "first part of the video we'll see how Windows views their content and then in the second part we'll see their true",
    "start": "782839",
    "end": "789720"
  },
  {
    "text": "content using WSL so in here we see the files in the",
    "start": "789720",
    "end": "795199"
  },
  {
    "text": "directory we print their content using the type command in",
    "start": "795199",
    "end": "800959"
  },
  {
    "text": "CMD so we see we also have two directories they both have one file a.txt and there is one file inside the Z",
    "start": "800959",
    "end": "808800"
  },
  {
    "text": "orch iive also a.txt we now present their contents using notepad as",
    "start": "808800",
    "end": "817800"
  },
  {
    "text": "well and now let's see the same with",
    "start": "818959",
    "end": "825079"
  },
  {
    "text": "WSL so we're starting to print the files using cat and suddenly the files have",
    "start": "828360",
    "end": "834680"
  },
  {
    "text": "malicious contents in them and when we'll try to print the",
    "start": "834680",
    "end": "840560"
  },
  {
    "text": "content of axt inside the directory called haha then we see that it's actually not there and instead there are",
    "start": "840560",
    "end": "847440"
  },
  {
    "text": "five different executables in this directory which we're not able to see in",
    "start": "847440",
    "end": "852519"
  },
  {
    "text": "Windows when we extract the archive using WinRAR and not file",
    "start": "852519",
    "end": "857600"
  },
  {
    "text": "explorer then what we'll see is that there was actually one more file inside",
    "start": "857600",
    "end": "862639"
  },
  {
    "text": "that Explorer did not show us now let's move on to some magic",
    "start": "862639",
    "end": "869320"
  },
  {
    "text": "tricks to conceal processes so the first and most obvious thing again that we can",
    "start": "869320",
    "end": "875440"
  },
  {
    "text": "do is just to execute and executable um from a path um that we um",
    "start": "875440",
    "end": "883759"
  },
  {
    "text": "we can do that with uh a function called anti create user process we can only run",
    "start": "883759",
    "end": "889560"
  },
  {
    "text": "um executables with anti paths if we use anti functions but um for example in",
    "start": "889560",
    "end": "896120"
  },
  {
    "text": "order to create such uh uh a process um which is untraceable what we can do is",
    "start": "896120",
    "end": "903040"
  },
  {
    "text": "to run an executable from a path that if referenced with a Dos path then it will",
    "start": "903040",
    "end": "909320"
  },
  {
    "text": "be converted to a non-existent path so in this case for example if we run an",
    "start": "909320",
    "end": "916040"
  },
  {
    "text": "executable from C Windows dot blah blah blah blah. exe then when reference with",
    "start": "916040",
    "end": "923079"
  },
  {
    "text": "the do path the trailing dot will be removed referencing to a non-existent blah blah directory inside the real",
    "start": "923079",
    "end": "929959"
  },
  {
    "text": "Windows directory as a result the the executable that is referenced by the",
    "start": "929959",
    "end": "936560"
  },
  {
    "text": "image path of the process um will not be able to perform any file operations",
    "start": "936560",
    "end": "941920"
  },
  {
    "text": "against it and also process listing tools such as task manager and process Explorer will not be able to view any",
    "start": "941920",
    "end": "949399"
  },
  {
    "text": "Properties or information about that executable but again we can take this",
    "start": "949399",
    "end": "954440"
  },
  {
    "text": "even further we can create what I call an impersonated process this time",
    "start": "954440",
    "end": "959920"
  },
  {
    "text": "will run an executable from a path that if referenced by a Dos path will be",
    "start": "959920",
    "end": "965079"
  },
  {
    "text": "converted to an existing trusted and legitimate path for example the path of",
    "start": "965079",
    "end": "971160"
  },
  {
    "text": "the trusted SVC host executable so if we run and executable from C windows.",
    "start": "971160",
    "end": "978240"
  },
  {
    "text": "system32 SVC host then the trailing dot will be removed again referencing the",
    "start": "978240",
    "end": "983800"
  },
  {
    "text": "legitimate SVC host as a result any file operation taken against the execu utable",
    "start": "983800",
    "end": "989639"
  },
  {
    "text": "referenced by the image path of the process will be taken against as the SVC",
    "start": "989639",
    "end": "995480"
  },
  {
    "text": "host executable and in addition process listing tools such as task manager and",
    "start": "995480",
    "end": "1001399"
  },
  {
    "text": "process Explorer will tell us that the executable the malicious executable that",
    "start": "1001399",
    "end": "1006519"
  },
  {
    "text": "we ran is verified and signed by Microsoft and also prefet analysis tools",
    "start": "1006519",
    "end": "1012519"
  },
  {
    "text": "will show us information about the legitimate trusted SVC host executable so let's take a look at this",
    "start": "1012519",
    "end": "1021000"
  },
  {
    "text": "ability so in here we see process Explorer running and we see the magic dot tool and mimic cats now we'll run",
    "start": "1021000",
    "end": "1028160"
  },
  {
    "text": "mimic hats in a way that it will impersonate SVC host so we ran mimic cats we see it here",
    "start": "1028160",
    "end": "1037360"
  },
  {
    "text": "now let's find it in process Explorer and process Explorer tells us that its path is the path of just SVC",
    "start": "1037360",
    "end": "1044959"
  },
  {
    "text": "host the original one and that it is verified and signed by Microsoft",
    "start": "1044959",
    "end": "1050840"
  },
  {
    "text": "now if we'll find the same p in task manager then let's see what happens",
    "start": "1051320",
    "end": "1059799"
  },
  {
    "text": "here so we'll check its properties and again it tells us that it's located in",
    "start": "1059799",
    "end": "1065039"
  },
  {
    "text": "the real system 32 folder and that it is signed by Microsoft so I guess we all",
    "start": "1065039",
    "end": "1071640"
  },
  {
    "text": "know mimicat is not signed by Microsoft now as part of the exploration",
    "start": "1071640",
    "end": "1078120"
  },
  {
    "text": "Journey for boxs that I can um find based on this known issue I reversed",
    "start": "1078120",
    "end": "1084240"
  },
  {
    "text": "engineer process Explorer to see if I can find any such vulnerabilities or bugs and well I did not find any bug",
    "start": "1084240",
    "end": "1093120"
  },
  {
    "text": "based on this known issue in there but I did find a nice um anti-analysis technique to add to my so-called",
    "start": "1093120",
    "end": "1100440"
  },
  {
    "text": "unprivileged rootkit abilities so basically while reversing reverse",
    "start": "1100440",
    "end": "1106840"
  },
  {
    "text": "engineering process Explorer I saw this line of code Co that copies a process",
    "start": "1106840",
    "end": "1112640"
  },
  {
    "text": "name into a wide string buffer um and limits the length the the",
    "start": "1112640",
    "end": "1117799"
  },
  {
    "text": "final length of the buffer 2 256 why 256 because um process names are",
    "start": "1117799",
    "end": "1125960"
  },
  {
    "text": "determined by their executable names NTFS allows a maximum file name of",
    "start": "1125960",
    "end": "1132559"
  },
  {
    "text": "255 so overall that makes sense however two lines of code after that there is",
    "start": "1132559",
    "end": "1140200"
  },
  {
    "text": "another copy um of the P ID of the process into the same WID string buffer",
    "start": "1140200",
    "end": "1147159"
  },
  {
    "text": "with again limiting the final length of the white string buffer to 256 after a few seconds you can",
    "start": "1147159",
    "end": "1155000"
  },
  {
    "text": "immediately notice that if we can name a process in the length of 255 characters",
    "start": "1155000",
    "end": "1161400"
  },
  {
    "text": "so we can certainly go over this limitation if we add a PID but how would",
    "start": "1161400",
    "end": "1168000"
  },
  {
    "text": "that help us because the WCS catore s function is a safey runtime functions",
    "start": "1168000",
    "end": "1176200"
  },
  {
    "text": "and what are safety runtime functions so basically these are of course more",
    "start": "1176200",
    "end": "1182799"
  },
  {
    "text": "secure versions of normal C runtime functions that add a few extra security",
    "start": "1182799",
    "end": "1188360"
  },
  {
    "text": "checks but what happens when these Security checks fail like we understood",
    "start": "1188360",
    "end": "1194039"
  },
  {
    "text": "that we can do in this case to go over the limit of 250 six if they fail they",
    "start": "1194039",
    "end": "1200799"
  },
  {
    "text": "invoke an error Handler just like we can see in the case of WCS cator s it calls",
    "start": "1200799",
    "end": "1206760"
  },
  {
    "text": "the invalid the buil-in invalid parameter Handler the buil-in invalid",
    "start": "1206760",
    "end": "1212120"
  },
  {
    "text": "parameter Handler calls the um uh user assigned invalid parameter Handler but",
    "start": "1212120",
    "end": "1218240"
  },
  {
    "text": "if there is no one assigned by default it calls invoke Watson which just closes",
    "start": "1218240",
    "end": "1223960"
  },
  {
    "text": "the application and generates a mini dump like we can see here no Handler",
    "start": "1223960",
    "end": "1229440"
  },
  {
    "text": "calls invoke Watson so what does this actually mean it means that if we name a",
    "start": "1229440",
    "end": "1236240"
  },
  {
    "text": "process in the maximum length which is 255 and then the P will be added to it",
    "start": "1236240",
    "end": "1242240"
  },
  {
    "text": "will go over the 256 limit and will cause process Explorer to close",
    "start": "1242240",
    "end": "1247880"
  },
  {
    "text": "immediately and it will not be able to run at that moment and not to be run later",
    "start": "1247880",
    "end": "1253679"
  },
  {
    "text": "too and the lesson that we can learn from it is that many developers use",
    "start": "1253679",
    "end": "1259080"
  },
  {
    "text": "safety run time functions for validations but actually if you don't perform the validations yourself prior",
    "start": "1259080",
    "end": "1265960"
  },
  {
    "text": "to using safe Toc runtime functions or at least set up proper error handlers",
    "start": "1265960",
    "end": "1271400"
  },
  {
    "text": "for these functions then you can actually pivot from a buffer overflow",
    "start": "1271400",
    "end": "1276919"
  },
  {
    "text": "security risk to um to a denial of service security risk so you still leave",
    "start": "1276919",
    "end": "1282640"
  },
  {
    "text": "a risk so let's take a look at this vulnerability in process",
    "start": "1282640",
    "end": "1289120"
  },
  {
    "text": "Explorer so we are running process Explorer we have an executable with a very long name in here using an",
    "start": "1289120",
    "end": "1296640"
  },
  {
    "text": "executable that I created that calls empty create user process I run this executable with a",
    "start": "1296640",
    "end": "1303520"
  },
  {
    "text": "very long name and process Explorer is just closed immediately and is not able",
    "start": "1303520",
    "end": "1309679"
  },
  {
    "text": "to run later and this can be done by an unprivileged user to make um any",
    "start": "1309679",
    "end": "1315559"
  },
  {
    "text": "instance of process Explorer also running by mins to be closed immediately and not um to to not be able to be run",
    "start": "1315559",
    "end": "1325278"
  },
  {
    "text": "again so we're done with simple magic tricks now we can move on to real magic",
    "start": "1325799",
    "end": "1332200"
  },
  {
    "text": "which is in our case vulnerabilities for the first magic act",
    "start": "1332200",
    "end": "1338960"
  },
  {
    "text": "um the first magic act in this show is called the disappearing act for this act",
    "start": "1338960",
    "end": "1344720"
  },
  {
    "text": "I have uh a folder in here that is called demo demo has two files inside",
    "start": "1344720",
    "end": "1351880"
  },
  {
    "text": "a.txt and b.txt as an unprivileged user I do not have permissions to um to take",
    "start": "1351880",
    "end": "1359480"
  },
  {
    "text": "any file operation against those files however I do have permissions to create",
    "start": "1359480",
    "end": "1365720"
  },
  {
    "text": "a folder in the demo folder so what I do is that I create a directory called dot",
    "start": "1365720",
    "end": "1373440"
  },
  {
    "text": "dot dot and a space and I just place any file inside it doesn't matter what's the name",
    "start": "1373440",
    "end": "1379799"
  },
  {
    "text": "of the file but now after I created the directory um I need an administrator",
    "start": "1379799",
    "end": "1386640"
  },
  {
    "text": "volunteer that I already filmed that back at home at this um video we'll see what happens when the administrator",
    "start": "1386640",
    "end": "1393840"
  },
  {
    "text": "volunteer tries to delete this very strange triple do space directory that",
    "start": "1393840",
    "end": "1399400"
  },
  {
    "text": "it just saw so the administrator goes into the demo folder suddenly see a very",
    "start": "1399400",
    "end": "1404559"
  },
  {
    "text": "strange looking three dots directory that was not there before deletes it",
    "start": "1404559",
    "end": "1410679"
  },
  {
    "text": "then let's see what happens so the entire demo folder was just deleted instead the parent folder of the folder",
    "start": "1410679",
    "end": "1418120"
  },
  {
    "text": "that the administrator just tried to delete but how did that",
    "start": "1418120",
    "end": "1424240"
  },
  {
    "text": "happen basically when File Explorer or any other tool that deletes um folders",
    "start": "1424240",
    "end": "1430159"
  },
  {
    "text": "recursively first lists all the files in the directory recursively so it starts",
    "start": "1430159",
    "end": "1435799"
  },
  {
    "text": "by listing the first level which is just a triple do space directory and then this is just equal to",
    "start": "1435799",
    "end": "1442880"
  },
  {
    "text": "listing its Parent Directory because as part of the conversion the last path element is completely removed and this",
    "start": "1442880",
    "end": "1450440"
  },
  {
    "text": "is equal to just listing its Parent Directory so it sees another non-existent triple dot directory with a",
    "start": "1450440",
    "end": "1458480"
  },
  {
    "text": "space inside this directory so it lists it too and then this actually lists the",
    "start": "1458480",
    "end": "1466039"
  },
  {
    "text": "original triple. space directory because in this case the last path element is",
    "start": "1466039",
    "end": "1472039"
  },
  {
    "text": "again completely removed however the path element before it is not because as",
    "start": "1472039",
    "end": "1478320"
  },
  {
    "text": "we mentioned at the beginning of the talk trailing spaces are removed only",
    "start": "1478320",
    "end": "1483600"
  },
  {
    "text": "from the last path element so naming a directory with um dots but but ending it",
    "start": "1483600",
    "end": "1490520"
  },
  {
    "text": "with a space prevents an endless loop when recursively listing a",
    "start": "1490520",
    "end": "1496159"
  },
  {
    "text": "directory then after all the file uh were listed file explorer deletes",
    "start": "1496159",
    "end": "1502039"
  },
  {
    "text": "each one of them and then finally deletes the top directory but the top directory is just equal to deleting its",
    "start": "1502039",
    "end": "1510240"
  },
  {
    "text": "Parent Directory because as we saw before the last path element is completely removed so File Explorer by",
    "start": "1510240",
    "end": "1516279"
  },
  {
    "text": "accident deletes its Parent Directory so the second magic Act of",
    "start": "1516279",
    "end": "1523600"
  },
  {
    "text": "this hackers magic show is um in in this magic magic act I'm going to show you",
    "start": "1523600",
    "end": "1529760"
  },
  {
    "text": "how I'm able to change the memories of a shadow copy more specifically I'm going",
    "start": "1529760",
    "end": "1536720"
  },
  {
    "text": "to show you how a a shadow copy remembers the content of a benign test",
    "start": "1536720",
    "end": "1542880"
  },
  {
    "text": "directory and then I'm able to replace its content to be",
    "start": "1542880",
    "end": "1548200"
  },
  {
    "text": "malicious so basically all that I need to do in order to do that is just to",
    "start": "1548200",
    "end": "1554159"
  },
  {
    "text": "create another directory next to my target directory so my Target directory",
    "start": "1554159",
    "end": "1559320"
  },
  {
    "text": "is C demo test then I create test space",
    "start": "1559320",
    "end": "1564559"
  },
  {
    "text": "next to my target directory and inside it I create the same files the files",
    "start": "1564559",
    "end": "1571480"
  },
  {
    "text": "that I want to overwrite inside the test directory in the same locations and with",
    "start": "1571480",
    "end": "1577000"
  },
  {
    "text": "the same names and I place the malicious contents inside",
    "start": "1577000",
    "end": "1582880"
  },
  {
    "text": "them then let's see what happens when the same administrator volunteer from",
    "start": "1582880",
    "end": "1588440"
  },
  {
    "text": "the last video creates a shadow copy and then in a later point in time just restores the same Shadow",
    "start": "1588440",
    "end": "1596279"
  },
  {
    "text": "copy so we see both of the directories we see the test has a.txt and b.txt",
    "start": "1596279",
    "end": "1602919"
  },
  {
    "text": "inside an inner directory a deeper directory we see that our content is um",
    "start": "1602919",
    "end": "1609320"
  },
  {
    "text": "innocent the text innocent now the the admin creates just a simple Shadow copy",
    "start": "1609320",
    "end": "1615960"
  },
  {
    "text": "and now in a later point in time the admin wants to restore this Shadow copy so the content should remain the",
    "start": "1615960",
    "end": "1622200"
  },
  {
    "text": "same but the admin restores the shadow copy and then let's see what",
    "start": "1622200",
    "end": "1629278"
  },
  {
    "text": "happens so now we print their content again and suddenly their content was changed to be",
    "start": "1633200",
    "end": "1639720"
  },
  {
    "text": "delicious so we changed the memories of a shadow",
    "start": "1639720",
    "end": "1644360"
  },
  {
    "text": "copy so now we reach the grand finale of this magic show which in which we'll see",
    "start": "1645080",
    "end": "1652240"
  },
  {
    "text": "how I'm able to hypnotize a remote computer to run my malicious",
    "start": "1652240",
    "end": "1658600"
  },
  {
    "text": "code more specifically we'll see how I'm able to craft a malicious archive that",
    "start": "1658600",
    "end": "1665480"
  },
  {
    "text": "when extracted will be able to write an executable to wherever it want",
    "start": "1665480",
    "end": "1671120"
  },
  {
    "text": "executable or any other file to wherever it wants on the disk leading to code",
    "start": "1671120",
    "end": "1676840"
  },
  {
    "text": "execution Windows has a great attack surface for such a vulnerability now since Windows",
    "start": "1676840",
    "end": "1683399"
  },
  {
    "text": "just added support for many archive types that we've all been waiting",
    "start": "1683399",
    "end": "1690398"
  },
  {
    "text": "for when I approach to searching for such a vulnerability I considered symbolic links to be a very good",
    "start": "1690640",
    "end": "1698760"
  },
  {
    "text": "lead um symbolic links to be created to create them in in Windows we do need the",
    "start": "1698760",
    "end": "1705279"
  },
  {
    "text": "create symbolic links user right or developer mode turned on",
    "start": "1705279",
    "end": "1711960"
  },
  {
    "text": "however um they are supported by the newly added extractor that was just",
    "start": "1711960",
    "end": "1717799"
  },
  {
    "text": "added to extract all of these types of archives that are supported with by all the popular um extraction tools that we",
    "start": "1717799",
    "end": "1726120"
  },
  {
    "text": "all use and they are widely used in open source code projects and open source in",
    "start": "1726120",
    "end": "1732080"
  },
  {
    "text": "uh yeah so basically a lot of stuff that are used by developers so they are a very much valid attack surface um and",
    "start": "1732080",
    "end": "1740440"
  },
  {
    "text": "for the developers of course so symbolic links are not",
    "start": "1740440",
    "end": "1747000"
  },
  {
    "text": "considered to be a big threat um in archives because extractors do not allow",
    "start": "1747000",
    "end": "1752240"
  },
  {
    "text": "the functionality of writing into them after they they are extracted but just",
    "start": "1752240",
    "end": "1757919"
  },
  {
    "text": "to extract them however we have our magic dot magic so what I thought at the",
    "start": "1757919",
    "end": "1764880"
  },
  {
    "text": "beginning was that I could potentially create an archive with two files inside",
    "start": "1764880",
    "end": "1771559"
  },
  {
    "text": "named the same but one that has a trading dot in the end of its name then set the first file to be a",
    "start": "1771559",
    "end": "1779440"
  },
  {
    "text": "symbolic link that points to wherever I want on the disk and then set the",
    "start": "1779440",
    "end": "1785000"
  },
  {
    "text": "content of the second file to be the content that I want to write into the",
    "start": "1785000",
    "end": "1790240"
  },
  {
    "text": "target of the symbolic link and then hopefully when the second file is extracted then the extractor will ACC",
    "start": "1790240",
    "end": "1798000"
  },
  {
    "text": "accidentally open the first file because the trailing dot will be removed and it will write its content into the the",
    "start": "1798000",
    "end": "1804600"
  },
  {
    "text": "target of the symbolic link a secure Behavior against such an",
    "start": "1804600",
    "end": "1810919"
  },
  {
    "text": "extraction would be that the extractor will notice that um the file that it is",
    "start": "1810919",
    "end": "1817240"
  },
  {
    "text": "now trying to extract already exists and it will prompt um a kind of message of",
    "start": "1817240",
    "end": "1823360"
  },
  {
    "text": "of this kind that basically asks the user if it wants to EXP ruct this file",
    "start": "1823360",
    "end": "1829120"
  },
  {
    "text": "or not because it already exists so maybe so the file explorer or the the",
    "start": "1829120",
    "end": "1834760"
  },
  {
    "text": "instructor asks the user if it wants to overwrite the existing",
    "start": "1834760",
    "end": "1839880"
  },
  {
    "text": "file and this is exactly why the create file call that performs the",
    "start": "1839880",
    "end": "1845960"
  },
  {
    "text": "extraction uses the create new create disposition this is because the create",
    "start": "1845960",
    "end": "1851519"
  },
  {
    "text": "new create disposition affects the create file call to fail if the file",
    "start": "1851519",
    "end": "1857080"
  },
  {
    "text": "already exists however the only flag given to this call",
    "start": "1857080",
    "end": "1862399"
  },
  {
    "text": "is the file attribute normal flag and not the open reparse Point",
    "start": "1862399",
    "end": "1868320"
  },
  {
    "text": "flag this fact means that if this call is performed against a symbolic link",
    "start": "1868320",
    "end": "1875200"
  },
  {
    "text": "with a Target that does not exist so this this call and the um and the",
    "start": "1875200",
    "end": "1881960"
  },
  {
    "text": "specific create new create disos actually complies with this situations",
    "start": "1881960",
    "end": "1888240"
  },
  {
    "text": "with this situation where the target of sim link is does not exist and instead",
    "start": "1888240",
    "end": "1893320"
  },
  {
    "text": "of failing it actually creates the target of the symbolic link so that means that what we can do",
    "start": "1893320",
    "end": "1901679"
  },
  {
    "text": "is to create an archive with again two files that are named the same the second",
    "start": "1901679",
    "end": "1907840"
  },
  {
    "text": "one would have a trailing dot the first file will be a symbolic link to points",
    "start": "1907840",
    "end": "1913919"
  },
  {
    "text": "that points to somewhere on the dis um that does not exist to a non-existent",
    "start": "1913919",
    "end": "1919159"
  },
  {
    "text": "file and in our case it would be great that it would point to an executable in the startup",
    "start": "1919159",
    "end": "1925360"
  },
  {
    "text": "folder then the second file with the trailing dot would be the content that we run to write into this",
    "start": "1925360",
    "end": "1932880"
  },
  {
    "text": "executable then when the extraction is performed the first file which is the symbolic link is",
    "start": "1932880",
    "end": "1939159"
  },
  {
    "text": "extracted then the second file is extracted the extractor accidentally as",
    "start": "1939159",
    "end": "1944639"
  },
  {
    "text": "a result creates the target of the symbol link that was extracted before",
    "start": "1944639",
    "end": "1950000"
  },
  {
    "text": "and writes the content of the second file into it leading to our code",
    "start": "1950000",
    "end": "1955399"
  },
  {
    "text": "execution on a remote machine so let's take a look at the demo",
    "start": "1955399",
    "end": "1960559"
  },
  {
    "text": "of this vulnerability so we see a normal tar",
    "start": "1960559",
    "end": "1966639"
  },
  {
    "text": "gzip um archive that we are now going to extract using file explorer and as a",
    "start": "1966639",
    "end": "1972559"
  },
  {
    "text": "result suddenly calculator is just created in the startup folder in this case it's would be calculator in another",
    "start": "1972559",
    "end": "1979320"
  },
  {
    "text": "case it could be a very malicious maler We Now log off the current user log back",
    "start": "1979320",
    "end": "1985679"
  },
  {
    "text": "in and let's see what happens so calculator was run and we",
    "start": "1985679",
    "end": "1990840"
  },
  {
    "text": "managed to run our malicious code on a remote",
    "start": "1990840",
    "end": "1996120"
  },
  {
    "text": "[Applause]",
    "start": "1996690",
    "end": "2002080"
  },
  {
    "text": "machine okay so moving on to cves and responses so",
    "start": "2002080",
    "end": "2008120"
  },
  {
    "text": "uh Microsoft basically issued cves for these three vulnerabilities so for the remote code execution vulnerability the",
    "start": "2008120",
    "end": "2014880"
  },
  {
    "text": "elevation of copy the elevation of privilege sorry using the shadow copy",
    "start": "2014880",
    "end": "2020080"
  },
  {
    "text": "restoration um and for the denal of service in process Explorer they all",
    "start": "2020080",
    "end": "2025360"
  },
  {
    "text": "were fixed of course what was unfixed is the elevation of privilege um to delete",
    "start": "2025360",
    "end": "2031559"
  },
  {
    "text": "the upper folder Microsoft did manage to confirm and reproduce it but they just um responded that it's below this their",
    "start": "2031559",
    "end": "2039000"
  },
  {
    "text": "SEC their uh service power regarding all the other post exploitation techniques",
    "start": "2039000",
    "end": "2045000"
  },
  {
    "text": "so Microsoft did identify them as post exploitation techniques and so as we",
    "start": "2045000",
    "end": "2051240"
  },
  {
    "text": "anticipated they were not fixed um since there are not",
    "start": "2051240",
    "end": "2056638"
  },
  {
    "text": "vulnerabilities now to the maybe most important slide of this",
    "start": "2056800",
    "end": "2063480"
  },
  {
    "text": "talk takeaways of course and I think the most important takeaway that we can",
    "start": "2063599",
    "end": "2069200"
  },
  {
    "text": "understand from this talk is that backwards compatibility and unknown and",
    "start": "2069200",
    "end": "2074480"
  },
  {
    "text": "sorry and unfixed known issues that are left for years in many software",
    "start": "2074480",
    "end": "2080118"
  },
  {
    "text": "products do create security risks even if these known issues seem horribly",
    "start": "2080119",
    "end": "2086638"
  },
  {
    "text": "sometimes and we think they'll they'll not cause any risk we should not",
    "start": "2086639",
    "end": "2092079"
  },
  {
    "text": "underestimate them second as we now saw workare can be",
    "start": "2092079",
    "end": "2098760"
  },
  {
    "text": "hidden even without administrator privileges and without being a part of",
    "start": "2098760",
    "end": "2103920"
  },
  {
    "text": "the chain of calls that retrieve information like any other root kit",
    "start": "2103920",
    "end": "2110599"
  },
  {
    "text": "does third Microsoft chose to not fix the known issue that is still present in",
    "start": "2110599",
    "end": "2118880"
  },
  {
    "text": "Windows they fixed just to they chose just to fix the specific vulnerabilities",
    "start": "2118880",
    "end": "2124280"
  },
  {
    "text": "that I show that I showed so that means that there could be many any more",
    "start": "2124280",
    "end": "2129320"
  },
  {
    "text": "potential vulnerabilities and post exploitation techniques to find so I really encourage you to try and find",
    "start": "2129320",
    "end": "2136040"
  },
  {
    "text": "them before real attackers do or maybe they already",
    "start": "2136040",
    "end": "2141800"
  },
  {
    "text": "did lastly the best advice that I can give to software developers is to just",
    "start": "2141800",
    "end": "2147880"
  },
  {
    "text": "use empty paaths instead of Dos paths basically most users space API calls um",
    "start": "2147880",
    "end": "2155319"
  },
  {
    "text": "and the win32 API calls do support anti paaths as well it's just that most",
    "start": "2155319",
    "end": "2161720"
  },
  {
    "text": "developers don't use them by using anti paaths you can make sure 100% that you",
    "start": "2161720",
    "end": "2168800"
  },
  {
    "text": "are referencing the right file and that you are not being",
    "start": "2168800",
    "end": "2174920"
  },
  {
    "text": "manipulated and um basically this is the um QR code and link to the magic. gab",
    "start": "2174920",
    "end": "2184160"
  },
  {
    "text": "repository which will be published right after the talk um you're welcome to take a picture of",
    "start": "2184160",
    "end": "2191440"
  },
  {
    "text": "it SC it and save it um as again it will be uh published uh in uh the next hour",
    "start": "2191440",
    "end": "2199359"
  },
  {
    "text": "these are my contact details you are very welcome to message me in um any way",
    "start": "2199359",
    "end": "2204440"
  },
  {
    "text": "you would like and I'll be here if you want to ask me questions or maybe you want to approach the microphones but",
    "start": "2204440",
    "end": "2211160"
  },
  {
    "text": "that is it",
    "start": "2211160",
    "end": "2214400"
  }
]