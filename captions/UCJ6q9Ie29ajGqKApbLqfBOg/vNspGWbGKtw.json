[
  {
    "start": "0",
    "end": "34000"
  },
  {
    "text": "this morning's session is sex SCI product development techniques for",
    "start": "120",
    "end": "5460"
  },
  {
    "text": "ensuring secure silicone applied to open source verilog projects by Joseph",
    "start": "5460",
    "end": "10679"
  },
  {
    "text": "Fitzpatrick",
    "start": "10679",
    "end": "13639"
  },
  {
    "text": "hello became a sexy product development I think that's what I would call it but",
    "start": "16160",
    "end": "22020"
  },
  {
    "text": "you know got to encode it so it slipped by any reviewers",
    "start": "22020",
    "end": "27260"
  },
  {
    "text": "this document is not actually the preliminary Vision if you go online the one that is there will be and I'll throw",
    "start": "27260",
    "end": "32578"
  },
  {
    "text": "this final one on my website sooner or later um I'll jump right in with who am I my",
    "start": "32579",
    "end": "39719"
  },
  {
    "start": "34000",
    "end": "125000"
  },
  {
    "text": "background is electrical engineering I did a lot of focus on computer science and infosec as well I spent eight years",
    "start": "39719",
    "end": "45480"
  },
  {
    "text": "doing security research speedpath debug tool development and stuff for desktop",
    "start": "45480",
    "end": "50879"
  },
  {
    "text": "and server CPUs that included Hardware pen testing of CPUs for Security's sake",
    "start": "50879",
    "end": "56000"
  },
  {
    "text": "I also did a lot of training company I worked for had lots of",
    "start": "56000",
    "end": "62640"
  },
  {
    "text": "employees who did did functional validation of silicon projects right you know did it does it work you know the",
    "start": "62640",
    "end": "68939"
  },
  {
    "text": "standard test plan test every item in the test plan and check a box and ship a product I did some basic security",
    "start": "68939",
    "end": "74520"
  },
  {
    "text": "training for them which um you know I found that a little bit of security information goes a long way for someone who is deep down in the hardware",
    "start": "74520",
    "end": "81360"
  },
  {
    "text": "and used to you know if it works it works if it doesn't work do we really need it to work kind of mentality",
    "start": "81360",
    "end": "89520"
  },
  {
    "text": "um on the side I've been doing some local uh research on low-cost side Channel attacks as well as uh PCI",
    "start": "89520",
    "end": "94799"
  },
  {
    "text": "Express attacks if you're hanging around on Sunday at Defcon I've got a cool little demo of a PCI uh Express device",
    "start": "94799",
    "end": "103259"
  },
  {
    "text": "that can do driverless dma access to your system um it's lots of fun",
    "start": "103259",
    "end": "108780"
  },
  {
    "text": "um and also I've got a class software exploitation via Hardware exploits we just taught at the past four days here I",
    "start": "108780",
    "end": "114840"
  },
  {
    "text": "see a few of you here who just enjoyed that class I teach that with Stephen Ridley he's a company",
    "start": "114840",
    "end": "121220"
  },
  {
    "text": "teaches and runs that class privately if you're interested enough of Shameless plugs I'll give you an overview of what",
    "start": "121220",
    "end": "127920"
  },
  {
    "start": "125000",
    "end": "179000"
  },
  {
    "text": "I'm going to talk about I'll start out with kind of a definition of what Hardware security means to me because there's kind of a lot of uh",
    "start": "127920",
    "end": "134280"
  },
  {
    "text": "different definitions and different things that it means to different people um",
    "start": "134280",
    "end": "139440"
  },
  {
    "text": "I'll mention a bit about how Hardware is designed for those of you who are not familiar with that and then I've got three projects open risk which has some",
    "start": "139440",
    "end": "146640"
  },
  {
    "text": "JTAG issues openmsp 430 which you know uses some sketchy case statements and",
    "start": "146640",
    "end": "152540"
  },
  {
    "text": "Amber which has some memory aliasing stuff that I found and I'll summarize all of that",
    "start": "152540",
    "end": "159360"
  },
  {
    "text": "so these are all my definitions you don't have to agree with them but this is the",
    "start": "159360",
    "end": "164700"
  },
  {
    "text": "the context for which I'm going to be talking physical security is not Hardware security physical security is",
    "start": "164700",
    "end": "169980"
  },
  {
    "text": "keeping people away from things my mind Hardware security is okay we have physical access to the device",
    "start": "169980",
    "end": "176700"
  },
  {
    "text": "you know we assume that you know is the device secure supply chain security is not Hardware security you know supply chain security",
    "start": "176700",
    "end": "183480"
  },
  {
    "start": "179000",
    "end": "248000"
  },
  {
    "text": "is going to tell us whether the device we have is the one that was designed right that's helpful to know but once",
    "start": "183480",
    "end": "189540"
  },
  {
    "text": "you get down to it whether you have a secure supply chain that is you know beginning to end only designed by you",
    "start": "189540",
    "end": "195120"
  },
  {
    "text": "know secured vetted you know clear security clearance you know U.S citizens it still takes firmware updates and runs",
    "start": "195120",
    "end": "202140"
  },
  {
    "text": "code no matter who wrote it um secure boot is not Hardware security right secure boot is the process of",
    "start": "202140",
    "end": "208800"
  },
  {
    "text": "saying oh well we have something in Hardware that tells us that we can trust the software running on our system again",
    "start": "208800",
    "end": "214680"
  },
  {
    "text": "you know secure boot is something that depends on Hardware security but it in and of itself is is not itself Hardware",
    "start": "214680",
    "end": "220680"
  },
  {
    "text": "security finally secure firmware is not Hardware security right secure firmware in mind",
    "start": "220680",
    "end": "226260"
  },
  {
    "text": "you know it's the the old argument you know the software people call firmware Hardware people call firmware software so I'm going to call it software for the",
    "start": "226260",
    "end": "233280"
  },
  {
    "text": "for the scope of this presentation so again Hardware security in my mind depends on all these things we need",
    "start": "233280",
    "end": "238799"
  },
  {
    "text": "physical physical security we need to supply chain security we need software security we need firmware Security in order to scope and know what we're",
    "start": "238799",
    "end": "245519"
  },
  {
    "text": "taught where our goals are for a secure Hardware so hopefully this doesn't Point anyone",
    "start": "245519",
    "end": "251220"
  },
  {
    "start": "248000",
    "end": "286000"
  },
  {
    "text": "if you play Taboo you know you get a word that you have to get the people to guess and you're not supposed to use any",
    "start": "251220",
    "end": "256320"
  },
  {
    "text": "of the other words so these are all the things I'm not going to talk about so if you're coming here looking for formal of a communication encryption",
    "start": "256320",
    "end": "262079"
  },
  {
    "text": "firmware security ICS or security engine IP blocks I have no information for you I apologize",
    "start": "262079",
    "end": "268139"
  },
  {
    "text": "um I'm my focus is like okay we have lots of people who are already doing",
    "start": "268139",
    "end": "273440"
  },
  {
    "text": "functional validation of Hardware these people need to know a little bit more about security so that when they do",
    "start": "273440",
    "end": "279660"
  },
  {
    "text": "their functional validation they can you know think about Security in the process everything in here is all just RTL",
    "start": "279660",
    "end": "286020"
  },
  {
    "start": "286000",
    "end": "440000"
  },
  {
    "text": "inspection stuff so um I had a bit of a challenge how many of you here know what verilog is",
    "start": "286020",
    "end": "293100"
  },
  {
    "text": "how many of you hear code verilog regularly okay so it's black hat right",
    "start": "293100",
    "end": "298199"
  },
  {
    "text": "it's a it's an info set conference how many people had an input set conference really know what veralog is encoded very",
    "start": "298199",
    "end": "303720"
  },
  {
    "text": "very few but at the same time how many people who come to black hat and know what verilog is are going to be in this",
    "start": "303720",
    "end": "309000"
  },
  {
    "text": "room probably all of you so please don't Heckle me too bad I am no Vera log",
    "start": "309000",
    "end": "314520"
  },
  {
    "text": "expert I've never actually written much verilogue but I have looked at lots and lots and lots and I see the same issues",
    "start": "314520",
    "end": "320940"
  },
  {
    "text": "over and over again for those of you who are not familiar verilog is a hardware description language it's a way of defining",
    "start": "320940",
    "end": "327720"
  },
  {
    "text": "um uh Hardware right software programming languages you're writing code that runs",
    "start": "327720",
    "end": "333300"
  },
  {
    "text": "on Hardware Hardware description language you're defining wires and Gates that hook up and do things so programming languages they make",
    "start": "333300",
    "end": "340500"
  },
  {
    "text": "programs when they're compiled they break down into functions and procedures in libraries and they end up being a",
    "start": "340500",
    "end": "346680"
  },
  {
    "text": "sequential list of instructions for the most part you know there's exceptions and fancy architectures that do other things",
    "start": "346680",
    "end": "352560"
  },
  {
    "text": "Hardware description languages on the other hand you're making Hardware when you synthesize it right you break this",
    "start": "352560",
    "end": "360000"
  },
  {
    "text": "down into modules and IP blocks right and they're basically a set of",
    "start": "360000",
    "end": "366120"
  },
  {
    "text": "assignments that all kind of calculate in parallel so our second slide to give you an entire background in verilog is a",
    "start": "366120",
    "end": "373680"
  },
  {
    "text": "seed example and a verilog example right you see this is a simple sum function we have a and b and c and we want to add",
    "start": "373680",
    "end": "380220"
  },
  {
    "text": "them up and please don't critique me on the quality of either code in C we come up with some temporary",
    "start": "380220",
    "end": "387960"
  },
  {
    "text": "variables we add a and b into one temporary variable we add the uh our temporary variable and C into another",
    "start": "387960",
    "end": "393840"
  },
  {
    "text": "temporary variable and then we return the value right the result is we get back the sum of those three numbers",
    "start": "393840",
    "end": "399479"
  },
  {
    "text": "every time we call it in verilog on the other hand we make a module oops and this module has a b and",
    "start": "399479",
    "end": "406080"
  },
  {
    "text": "c as inputs and sum as the output right we don't have variables per se so we",
    "start": "406080",
    "end": "412919"
  },
  {
    "text": "create a wire and then we'll make we'll assign sum to Temp two temp two to C",
    "start": "412919",
    "end": "418560"
  },
  {
    "text": "plus temp 1 and temp one to a plus b and those of you who are you know c-minded",
    "start": "418560",
    "end": "423840"
  },
  {
    "text": "people are going to freak out because none of that works right well that's what I'm saying everything's in parallel right it doesn't matter what order we",
    "start": "423840",
    "end": "430919"
  },
  {
    "text": "put these things in because they Shuffle and they just work just make sense",
    "start": "430919",
    "end": "436979"
  },
  {
    "text": "of course I'm going to go show you a whole bunch of examples where it doesn't work so we'll start off with open risk this is",
    "start": "436979",
    "end": "442199"
  },
  {
    "start": "440000",
    "end": "482000"
  },
  {
    "text": "an open source verilog cpri any of you are familiar with openrisk or open course projects okay some of you",
    "start": "442199",
    "end": "447780"
  },
  {
    "text": "any of you work on them am I am I critiquing any of your work",
    "start": "447780",
    "end": "454020"
  },
  {
    "text": "good just just curious you never know who's going to be in the audience um so openrice is great it has pretty",
    "start": "454020",
    "end": "460259"
  },
  {
    "text": "good Linux kernel support it uses a lot in Academia as an example instruction architecture it's actually used in some",
    "start": "460259",
    "end": "466020"
  },
  {
    "text": "commercial products it works well on both fpgas and has been synthesized and you know again shipped in commercial",
    "start": "466020",
    "end": "472139"
  },
  {
    "text": "products and even the recent past um it's used in What's called the open risk",
    "start": "472139",
    "end": "477539"
  },
  {
    "text": "reference platform system on ship warp stock which is what I looked at in particular",
    "start": "477539",
    "end": "482940"
  },
  {
    "start": "482000",
    "end": "918000"
  },
  {
    "text": "before we jump into that I'm going to give you a little primer on what state machines are how many of you know what a state machine is",
    "start": "482940",
    "end": "488880"
  },
  {
    "text": "how many of you know about JTAG okay this will be easy again a state machine you have a bunch of State in this case",
    "start": "488880",
    "end": "494580"
  },
  {
    "text": "you have 16 States that the the logic could be in the state is stored somewhere in a register and",
    "start": "494580",
    "end": "502440"
  },
  {
    "text": "you basically have this diagram that tells you how to jump between different states what conditions have to be met so",
    "start": "502440",
    "end": "509300"
  },
  {
    "text": "it's not defined on here but basically if you're in this test logic reset State and your mode bit is zero the next time",
    "start": "509300",
    "end": "515520"
  },
  {
    "text": "there's a clock you move to this one if your mobile is one you just stay right here okay so if you're here and your",
    "start": "515520",
    "end": "521459"
  },
  {
    "text": "mode bit is zero you stay here if it's one you move into the next state so basically by toggling a mode bit every",
    "start": "521459",
    "end": "528120"
  },
  {
    "text": "time the clock switches we can jump from state to state to state to state and do different things with the state machine",
    "start": "528120",
    "end": "533640"
  },
  {
    "text": "JTAG if you're not familiar is a way of getting some debug access to a chip basically fundamentally you use this",
    "start": "533640",
    "end": "539279"
  },
  {
    "text": "shift Dr and shift IR state to shift data in to the Chip And shift data out",
    "start": "539279",
    "end": "545640"
  },
  {
    "text": "of the Chip And shift instructions in and out more details you can you can",
    "start": "545640",
    "end": "550860"
  },
  {
    "text": "read Wikipedia and you'll get a nice primer on it so something that's common is is a",
    "start": "550860",
    "end": "556260"
  },
  {
    "text": "one-hot state machine um what this means is instead of if we have",
    "start": "556260",
    "end": "561600"
  },
  {
    "text": "16 States you all know we can encode that into four bits right just having",
    "start": "561600",
    "end": "567000"
  },
  {
    "text": "different states well for reliability and other Stakes it's nice sometimes to have a single bit for each state right",
    "start": "567000",
    "end": "573779"
  },
  {
    "text": "that means all the other states are zero and one state is bit is set as a one so",
    "start": "573779",
    "end": "579600"
  },
  {
    "text": "here we go we look in the code we can see the definition of each of these states that match to each of these states so each one of them is a separate",
    "start": "579600",
    "end": "585300"
  },
  {
    "text": "register and then we want to look at how the next state is calculated in this case what they did is they came up with a little",
    "start": "585300",
    "end": "591360"
  },
  {
    "text": "little logic block for each state so the test logic reset state right and this",
    "start": "591360",
    "end": "598019"
  },
  {
    "text": "state I'll decode some of the the dialogue for you always means that you know basically this this event is",
    "start": "598019",
    "end": "603420"
  },
  {
    "text": "triggered uh whenever the any of these signals change either the t-clock signal or the T reset signal right so when we",
    "start": "603420",
    "end": "610500"
  },
  {
    "text": "reset the part it resets that makes sense when we have a clock every time we have",
    "start": "610500",
    "end": "615720"
  },
  {
    "text": "a clock we might jump to the next state then based on you know if it's in a",
    "start": "615720",
    "end": "620880"
  },
  {
    "text": "reset State we'll set test logic reset to one if we have another reset condition we'll reset to one otherwise",
    "start": "620880",
    "end": "627899"
  },
  {
    "text": "we'll check the previous state so if we have TMS of one and either of",
    "start": "627899",
    "end": "633240"
  },
  {
    "text": "these states we're going to go into one otherwise all other cases will go to zero right",
    "start": "633240",
    "end": "638700"
  },
  {
    "text": "so this logic is going to be calculated every time there's a t clock trigger right and it's going to set the new uh",
    "start": "638700",
    "end": "646079"
  },
  {
    "text": "what's called test logic reset State just below it you see the run test idle State and again there's a block of logic",
    "start": "646079",
    "end": "651779"
  },
  {
    "text": "that gets triggered every time there's a clock and assigns the new value of the run test idle state",
    "start": "651779",
    "end": "658260"
  },
  {
    "text": "so um I'll get into a minute basically this is",
    "start": "658260",
    "end": "663480"
  },
  {
    "text": "kind of an interesting way of architecting it because there's nothing there checking to see if it's one hot",
    "start": "663480",
    "end": "668820"
  },
  {
    "text": "right we basically have 16 different state blocks of logic that each calculate 16 different bits but no one's",
    "start": "668820",
    "end": "675779"
  },
  {
    "text": "really checking to make sure the other bits are right excuse me",
    "start": "675779",
    "end": "681779"
  },
  {
    "text": "so these These are these cores can be implemented inside a bigger system on chip that you might have they might be",
    "start": "681779",
    "end": "687899"
  },
  {
    "text": "actually synthesized or implemented on a chip and all these are external signals so let's look around and see if there's",
    "start": "687899",
    "end": "694380"
  },
  {
    "text": "any other any of these states that we can actually tamper with from another signal if we look a couple of these",
    "start": "694380",
    "end": "699720"
  },
  {
    "text": "these pins are output the reason they're output is so that other parts of the CPU can monitor them behave based upon them",
    "start": "699720",
    "end": "707399"
  },
  {
    "text": "luckily in this case there's no inputs that would be a red flag basically if we could from somewhere else go and poke",
    "start": "707399",
    "end": "713459"
  },
  {
    "text": "and set one of these bits that would be a a nice way to make it no longer a one hot State machine",
    "start": "713459",
    "end": "719519"
  },
  {
    "text": "um what I did find is pretty interesting is this one state run test idle has this really long stream of logic right we",
    "start": "719519",
    "end": "726180"
  },
  {
    "text": "have four values and actually a fifth value largely combine all of them to tell us",
    "start": "726180",
    "end": "731820"
  },
  {
    "text": "what our next run test idle state is going to be when you synthesize this there's a lot of optimization optimization that goes on so it may not",
    "start": "731820",
    "end": "738300"
  },
  {
    "text": "look exactly like this it may look bigger or smaller but if we're going to put this on an",
    "start": "738300",
    "end": "744000"
  },
  {
    "text": "fpga again this is an old old fpga what happens is you have these lookup tables",
    "start": "744000",
    "end": "750779"
  },
  {
    "text": "and the lookup tables basically are a map for any of these three inputs you can come up with any output and you as",
    "start": "750779",
    "end": "757260"
  },
  {
    "text": "the fpga designer Define what any of those outputs would be does that make sense so we have",
    "start": "757260",
    "end": "764579"
  },
  {
    "text": "essentially five inputs here we don't have five inputs here so the",
    "start": "764579",
    "end": "769740"
  },
  {
    "text": "way this would be synthesized in very simple terms is basically we take two different logic cells and Cascade them",
    "start": "769740",
    "end": "775380"
  },
  {
    "text": "so we put three inputs here carry the output to another logic cell and put the other two inputs right this is the only",
    "start": "775380",
    "end": "781800"
  },
  {
    "text": "state that does that all the other states only have two or three inputs to this logic block what that tells me is",
    "start": "781800",
    "end": "787740"
  },
  {
    "text": "when we synthesize this we might actually have a longer delay on this one than all the others right so this opens",
    "start": "787740",
    "end": "794940"
  },
  {
    "text": "it up for glitching right what's even better is tap JTAG is usually externally user accessible pins right and we",
    "start": "794940",
    "end": "801660"
  },
  {
    "text": "control the clock with JTAG so basically if we wanted to we could probably figure out a way to glitch this to inject an",
    "start": "801660",
    "end": "808860"
  },
  {
    "text": "extra bit into this state at any point in time right there's nothing in the entire logic that ensures that we're one",
    "start": "808860",
    "end": "815339"
  },
  {
    "text": "hop right so we could be over here you know an update in exit 2dr right and we",
    "start": "815339",
    "end": "821639"
  },
  {
    "text": "glitch the T clock exit 2dr works fine but run test idle ends up with the wrong value right right then as we shift",
    "start": "821639",
    "end": "828600"
  },
  {
    "text": "through States we can have this other state that's following a state behind right and so we might have both select",
    "start": "828600",
    "end": "835019"
  },
  {
    "text": "Dr and select IR select at the same time then if we go through with the right States you see these two chains are",
    "start": "835019",
    "end": "841320"
  },
  {
    "text": "parallel we could actually end up being in shift Dr and shift IR at the same time okay I don't have like a fancy exploit that",
    "start": "841320",
    "end": "848100"
  },
  {
    "text": "this is going to like end the world but this is this is the kind of bug I've seen over and over and over and over again",
    "start": "848100",
    "end": "853560"
  },
  {
    "text": "um that you know we can do something that the chip isn't defined that isn't defined for the ship and no functional",
    "start": "853560",
    "end": "859019"
  },
  {
    "text": "tester would ever really think about this so yeah let's look at what happens if we did that luckily they used much cleaner",
    "start": "859019",
    "end": "867060"
  },
  {
    "text": "looking logic in my opinion to Define what tdo value is going to be basically if we're in shift IR then we do IR",
    "start": "867060",
    "end": "876300"
  },
  {
    "text": "output otherwise we do something else I think I accidentally clipped off more code otherwise we're doing tdo out",
    "start": "876300",
    "end": "883440"
  },
  {
    "text": "um so it's a um you know they kind of cover their",
    "start": "883440",
    "end": "888600"
  },
  {
    "text": "basis here and making sure that you know this this scenario which should never happen we might be able to cause to",
    "start": "888600",
    "end": "893820"
  },
  {
    "text": "happen um we'll be taken care of so what if Dr had precedence over IR",
    "start": "893820",
    "end": "899100"
  },
  {
    "text": "would that change how this would make sense um what other functions of the chip",
    "start": "899100",
    "end": "904620"
  },
  {
    "text": "respond to JTAG State remember I showed you we output the shift Dr pause Dr",
    "start": "904620",
    "end": "910199"
  },
  {
    "text": "update Dr and capture Dr um uh tap States so stuff other stuff in",
    "start": "910199",
    "end": "916500"
  },
  {
    "text": "the chip can be triggered on these states um what happens if that stuff is triggered at the same time is something",
    "start": "916500",
    "end": "921899"
  },
  {
    "start": "918000",
    "end": "942000"
  },
  {
    "text": "else uh yeah particularly update Dr and update IR um what if these modes Collide what if",
    "start": "921899",
    "end": "927420"
  },
  {
    "text": "these two modes cause other things to collide on the chip right so again there's a bit of theoretical",
    "start": "927420",
    "end": "932459"
  },
  {
    "text": "scenario here but but this is this is how these bugs start and you know you just kind of roll down the hill seeing",
    "start": "932459",
    "end": "937980"
  },
  {
    "text": "the implications of all this undefined Behavior um let me speak at my time oh so you",
    "start": "937980",
    "end": "944399"
  },
  {
    "start": "942000",
    "end": "1078000"
  },
  {
    "text": "guys remember uh um One Hot or Not in the website like 10 years ago so we're gonna do a little one",
    "start": "944399",
    "end": "950519"
  },
  {
    "text": "hot or not right so if you take a take a peek at this block of logic and tell me",
    "start": "950519",
    "end": "955680"
  },
  {
    "text": "do you think this is one hot or not those of you who are not familiar with Barrel log I apologize this is probably",
    "start": "955680",
    "end": "961620"
  },
  {
    "text": "not going to be easy um basically what we have is a case statement down here we have a bunch of x's in our case statement that's kind of",
    "start": "961620",
    "end": "968040"
  },
  {
    "text": "a practice that's hopefully going to die very soon it's going by the wayside but what happens is we say okay if these",
    "start": "968040",
    "end": "973740"
  },
  {
    "text": "last four bits are true then this is our new state if these last four bits are these values",
    "start": "973740",
    "end": "980160"
  },
  {
    "text": "this is our next state if the first bit is this value and we haven't already assigned something this is our next",
    "start": "980160",
    "end": "985380"
  },
  {
    "text": "state and if the first bit is this this is our next state otherwise this is our new state",
    "start": "985380",
    "end": "991440"
  },
  {
    "text": "right when you have an X that means either don't care or don't know and the difference is actually important here",
    "start": "991440",
    "end": "998699"
  },
  {
    "text": "right if we have this assigned to a bunch of x's um it's a it's a don't care and that means that our state might",
    "start": "998699",
    "end": "1005540"
  },
  {
    "text": "actually end up being not one hot right when it's not one hot then yeah we run",
    "start": "1005540",
    "end": "1011360"
  },
  {
    "text": "into problems so here's another example take a peek those of you who are playing",
    "start": "1011360",
    "end": "1017660"
  },
  {
    "text": "along is it hot or not one hot or not so in this case",
    "start": "1017660",
    "end": "1024558"
  },
  {
    "text": "there's a lot more logic a bunch of ifs with cases but we did what we don't have in this case is a default case so",
    "start": "1024559",
    "end": "1031640"
  },
  {
    "text": "basically you'll you'll trickle down and if if we get into one of these case statements",
    "start": "1031640",
    "end": "1036918"
  },
  {
    "text": "and there's no default then there's no definition of what's going to happen in most cases that means it'll just retain",
    "start": "1036919",
    "end": "1042140"
  },
  {
    "text": "the previous value but again when you're optimizing and you're synthesizing different uh",
    "start": "1042140",
    "end": "1049220"
  },
  {
    "text": "different software might interpret that differently you might actually get a I don't care that gets generated in",
    "start": "1049220",
    "end": "1056240"
  },
  {
    "text": "there um and finally this this is is this hot or not one hot or not this is one hot",
    "start": "1056240",
    "end": "1061880"
  },
  {
    "text": "we've put basically a default case into every single one and we've defined what the default case is basically whenever",
    "start": "1061880",
    "end": "1067520"
  },
  {
    "text": "state gets screwed up we set it back to this one state you know so even though we haven't protected",
    "start": "1067520",
    "end": "1075440"
  },
  {
    "text": "against State getting mixed up at least we have a recovery plan in place so as a bonus to throw in this extra",
    "start": "1075440",
    "end": "1081200"
  },
  {
    "start": "1078000",
    "end": "1113000"
  },
  {
    "text": "JTAG bug um the ID code select so when we're in",
    "start": "1081200",
    "end": "1087140"
  },
  {
    "text": "shift Dr and ID code is our current instruction what it tells us to do is",
    "start": "1087140",
    "end": "1092480"
  },
  {
    "text": "basically shift data out and shift in sorry shift shift data out and shift in a TDI bit",
    "start": "1092480",
    "end": "1099200"
  },
  {
    "text": "right so basically we we shift through the 32 bits of ID code the problem",
    "start": "1099200",
    "end": "1104960"
  },
  {
    "text": "though is down here basically any other time except for shift Dr we",
    "start": "1104960",
    "end": "1111500"
  },
  {
    "text": "reset our ID code if we go back to the JTAG State machine though there's shift",
    "start": "1111500",
    "end": "1117320"
  },
  {
    "start": "1113000",
    "end": "1150000"
  },
  {
    "text": "Dr which is when we normally spit data out but we have this pause Dr State the purpose of the policy our state is to",
    "start": "1117320",
    "end": "1123140"
  },
  {
    "text": "like take a break so you know we shift eight bits we hang out for a minute you know take our catch our breath we go back we shift out eight more bits in",
    "start": "1123140",
    "end": "1130340"
  },
  {
    "text": "this implementation we're not going to get eight bits and the other eight bits another eight bits and then the last eight bits we're going to get the first",
    "start": "1130340",
    "end": "1135559"
  },
  {
    "text": "eight bits every time so again nothing really you can do with this specific bug but when you have this",
    "start": "1135559",
    "end": "1141799"
  },
  {
    "text": "on something that's a key when you have this on something that's a shifted in value you know taking advantage of this",
    "start": "1141799",
    "end": "1147860"
  },
  {
    "text": "pause Dr State can be really fun sometimes so on to msp430 as I think I'm actually",
    "start": "1147860",
    "end": "1154940"
  },
  {
    "start": "1150000",
    "end": "1325000"
  },
  {
    "text": "coming close to running out of time now I got 10 minutes um so open mass p430 is an open source",
    "start": "1154940",
    "end": "1161299"
  },
  {
    "text": "verilog CPU it's a clone of TI's msp430 it's binary compatible with all the standard msp432 chains and it's much",
    "start": "1161299",
    "end": "1168200"
  },
  {
    "text": "simpler than open risk it's just a simple microcontroller for those of you who aren't familiar we've got a front end and a back end",
    "start": "1168200",
    "end": "1174260"
  },
  {
    "text": "right the front end is what grabs the data from memory and sometimes does decoding of it and hands off what needs",
    "start": "1174260",
    "end": "1180980"
  },
  {
    "text": "to be executed to the execution unit right so these are two separate blocks two separate modules in this case they",
    "start": "1180980",
    "end": "1186080"
  },
  {
    "text": "have two separate State machines this is kind of messy messy code but what's good about",
    "start": "1186080",
    "end": "1192980"
  },
  {
    "text": "this code is it actually is very well defined you have every single thing to find is including a default like if",
    "start": "1192980",
    "end": "1198500"
  },
  {
    "text": "anything else happens just go into the state you know so we know what's going on what I found interesting about this",
    "start": "1198500",
    "end": "1204559"
  },
  {
    "text": "is this this always at block right this is a sensitivity list whenever something in this block changes this whole state",
    "start": "1204559",
    "end": "1211520"
  },
  {
    "text": "machine gets triggered what's not in this is a clock right so this state",
    "start": "1211520",
    "end": "1217580"
  },
  {
    "text": "machine is not triggered by a clock it's triggered by a list of signals hopefully all of these signals are synchronous",
    "start": "1217580",
    "end": "1223340"
  },
  {
    "text": "signals you know but can we tell that just by looking at it no we can't so let's look at these signals and see if",
    "start": "1223340",
    "end": "1229160"
  },
  {
    "text": "there's something we could as you know an end user an outside user someone who has access to external pins can trigger",
    "start": "1229160",
    "end": "1234860"
  },
  {
    "text": "and what stands out to me is actually this CPU halt command",
    "start": "1234860",
    "end": "1240260"
  },
  {
    "text": "because if we look at what feeds into that we have this debug halt command spinning in there right that debug Port",
    "start": "1240260",
    "end": "1246080"
  },
  {
    "text": "can be attached within the soc to another device um on on a within uh verilog or it could",
    "start": "1246080",
    "end": "1253340"
  },
  {
    "text": "be an external pin that might end up being user controlled um so let's go back and look at debug",
    "start": "1253340",
    "end": "1259100"
  },
  {
    "text": "halt Command right there's actually a bit of logic behind it but what it comes down to is we're triggered on debug",
    "start": "1259100",
    "end": "1265039"
  },
  {
    "text": "clock or debug reset right so if we can control either of these signals we can toggle the front end State machine and",
    "start": "1265039",
    "end": "1272120"
  },
  {
    "text": "the back end the the execution unit actually uses these signals differently so we have two different state machines using two different triggers to clock so",
    "start": "1272120",
    "end": "1280100"
  },
  {
    "text": "basically what happens if we toggle debug reset right it toggles it can change debug halt command if we change D",
    "start": "1280100",
    "end": "1286940"
  },
  {
    "text": "of a cult command we can change CPU halt command if we change CPU hold command even if nothing else changes we trigger",
    "start": "1286940",
    "end": "1292940"
  },
  {
    "text": "this block and we re-evaluate and we could hop to the next state and when we get out of sync with our back end that",
    "start": "1292940",
    "end": "1299240"
  },
  {
    "text": "makes bad things happen so um is your state machine strictly",
    "start": "1299240",
    "end": "1304400"
  },
  {
    "text": "clocked are all the sensitivity list parameters actually synchronous to the same clock and our critical signals pure",
    "start": "1304400",
    "end": "1310640"
  },
  {
    "text": "and not combined with logical with other user control signals you know if you have a system-wide you know secure mode",
    "start": "1310640",
    "end": "1316220"
  },
  {
    "text": "on secure mode off bit is that the one bit that you're using or using you know secure mode on and some other user",
    "start": "1316220",
    "end": "1323240"
  },
  {
    "text": "controllable bit um so let's scoot right through Amber is",
    "start": "1323240",
    "end": "1328580"
  },
  {
    "start": "1325000",
    "end": "1532000"
  },
  {
    "text": "the last one I looked at it's an open source paralog the CPU that's an implication of arm V2 arm V2 is an old",
    "start": "1328580",
    "end": "1334520"
  },
  {
    "text": "instruction set that's not well supported anymore you can use it up to links to four and some people have patch later versions it's much more complex",
    "start": "1334520",
    "end": "1340760"
  },
  {
    "text": "than msp430 but it's still no native memory controller like open risk um",
    "start": "1340760",
    "end": "1346159"
  },
  {
    "text": "so what I looked at here was the memory map which was interesting this is basically a bunch of things that live in",
    "start": "1346159",
    "end": "1351679"
  },
  {
    "text": "the memory we've got our main memory we've got a special cachable boot memory we have modules that are memory mapped",
    "start": "1351679",
    "end": "1356900"
  },
  {
    "text": "devices timers interrupt two uarts ethernet um",
    "start": "1356900",
    "end": "1362240"
  },
  {
    "text": "so you know these these things these extra pieces of Hardware are mapped into the memory interface so let's take a",
    "start": "1362240",
    "end": "1369200"
  },
  {
    "text": "look how do we oh actually one last thing down at the bottom we have this little function in uart zero basically a",
    "start": "1369200",
    "end": "1374480"
  },
  {
    "text": "macro that will let us know if we test an address where it's located so",
    "start": "1374480",
    "end": "1380600"
  },
  {
    "text": "we basically when we want to decode a res an address we use this function and we test is it in Ethernet Mac is it in",
    "start": "1380960",
    "end": "1387500"
  },
  {
    "text": "boot memory is it in main memory if we somehow misconfigured something on the back end this would let us you know",
    "start": "1387500",
    "end": "1392539"
  },
  {
    "text": "know the hierarchy what's what's decoded first what's also interesting is the",
    "start": "1392539",
    "end": "1397940"
  },
  {
    "text": "final default case we default to main memory right so if we access an address that's not defined anywhere else it",
    "start": "1397940",
    "end": "1404299"
  },
  {
    "text": "takes us to main memory so even if it's not in main memory it'll take us to main memory what can we",
    "start": "1404299",
    "end": "1410539"
  },
  {
    "text": "do with that if we look at how memory is accessed when you see this nice little comment",
    "start": "1410539",
    "end": "1415760"
  },
  {
    "text": "that tells us exactly what will happen wrap the address at 32 megabytes so this is a issue I've encountered many times",
    "start": "1415760",
    "end": "1421880"
  },
  {
    "text": "right when you wrap an address right that means even if you have a gigabyte of memory you have basically a whole",
    "start": "1421880",
    "end": "1427760"
  },
  {
    "text": "bunch of copies of your 32 megabytes of memory that's not so bad it's something that",
    "start": "1427760",
    "end": "1433100"
  },
  {
    "text": "was pretty common practice and embedded systems for a long time but what happens if you are protecting a piece of memory",
    "start": "1433100",
    "end": "1439039"
  },
  {
    "text": "right if you have a security mode a security bit a privileged level that depends on you know you being a super",
    "start": "1439039",
    "end": "1445460"
  },
  {
    "text": "user to access a byte in memory does that protection protect against the address or does it protect against",
    "start": "1445460",
    "end": "1452179"
  },
  {
    "text": "the aliased version of the address or the 15 aliased versions of the address right it's a way to bypass a memory",
    "start": "1452179",
    "end": "1458960"
  },
  {
    "text": "protection right so what devices live in this memory map how are they alkylated ordered and prioritized if there are multiple",
    "start": "1458960",
    "end": "1465500"
  },
  {
    "text": "implementations of address decoding do they decode average with the same priority right if you have two different",
    "start": "1465500",
    "end": "1470840"
  },
  {
    "text": "devices on a bus they might each have their own address decoding as to where they send things on",
    "start": "1470840",
    "end": "1475940"
  },
  {
    "text": "the bus is it actually identical can you take advantage of that and finally do areas exists can these Alias aliases be",
    "start": "1475940",
    "end": "1483320"
  },
  {
    "text": "used to access a byte of memory that is protected by a protected if you were to access it as another address",
    "start": "1483320",
    "end": "1491200"
  },
  {
    "text": "so as a summary we talked about some unchecked State encoding untrusted uh untested State transistors",
    "start": "1491600",
    "end": "1498700"
  },
  {
    "text": "untested State transitions very permissive sensitivity list obscured single combinations and then aliased",
    "start": "1499360",
    "end": "1506000"
  },
  {
    "text": "overlapped or misprioritized memory Maps um and that's what I got",
    "start": "1506000",
    "end": "1512000"
  },
  {
    "text": "any questions",
    "start": "1512000",
    "end": "1514600"
  },
  {
    "text": "did I bore you oh",
    "start": "1517220",
    "end": "1520480"
  },
  {
    "text": "yeah that's what's nice about vhdl verilog is is is like a",
    "start": "1525919",
    "end": "1532580"
  },
  {
    "start": "1532000",
    "end": "1549000"
  },
  {
    "text": "yeah it was never designed for a synthesis in the first place so when you're using verilog you can do a lot of",
    "start": "1532580",
    "end": "1537980"
  },
  {
    "text": "stuff that you don't get errors or Warnings out of that I think should get more errors and warnings like you assign",
    "start": "1537980",
    "end": "1544159"
  },
  {
    "text": "things that are different lengths and it just it just fixes it for you you know you yeah",
    "start": "1544159",
    "end": "1549919"
  },
  {
    "start": "1549000",
    "end": "1589000"
  },
  {
    "text": "that's why I'm focused on airlock it's easier to make bad code yeah",
    "start": "1549919",
    "end": "1556360"
  },
  {
    "text": "uh",
    "start": "1561559",
    "end": "1564559"
  },
  {
    "text": "-huh",
    "start": "1566900",
    "end": "1569500"
  },
  {
    "text": "right",
    "start": "1580400",
    "end": "1582820"
  },
  {
    "text": "so how do you map it into physical device so what I always did is you know when I was doing my RTL inspection you",
    "start": "1588980",
    "end": "1594140"
  },
  {
    "start": "1589000",
    "end": "1680000"
  },
  {
    "text": "know I'd go and I'd find all these interesting things and fix whatever is just blatantly bad and there are things",
    "start": "1594140",
    "end": "1600620"
  },
  {
    "text": "that you know like the the glitching the t-clock right I don't know how it's going to be synthesized right for an",
    "start": "1600620",
    "end": "1606559"
  },
  {
    "text": "fpga or or for an Asic but I know that there's something interesting there and so I put that on my list of something to",
    "start": "1606559",
    "end": "1612860"
  },
  {
    "text": "test as a hardware pen tester right",
    "start": "1612860",
    "end": "1616658"
  },
  {
    "text": "yeah I did on Asic I've done a little bit on fpgas",
    "start": "1618559",
    "end": "1623720"
  },
  {
    "text": "recently but mostly Asic",
    "start": "1623720",
    "end": "1627220"
  },
  {
    "text": "no that's that was at my prior employer so again you know I I used to do this on",
    "start": "1629000",
    "end": "1634400"
  },
  {
    "text": "Asics and I realized after about a year of not looking at verilog I should you know keep my game up so I started",
    "start": "1634400",
    "end": "1640640"
  },
  {
    "text": "browsing through open open course projects and said oh you know there's nothing major nothing burning here but",
    "start": "1640640",
    "end": "1646100"
  },
  {
    "text": "what I'm seeing is the same coding errors or you know oversights that I saw a lot of otherwise so I figured I'd pick",
    "start": "1646100",
    "end": "1652159"
  },
  {
    "text": "them out and since no one's really talking about this if we're gonna talk about it",
    "start": "1652159",
    "end": "1657260"
  },
  {
    "text": "no problem",
    "start": "1657260",
    "end": "1659919"
  },
  {
    "text": "um",
    "start": "1671120",
    "end": "1673120"
  },
  {
    "start": "1680000",
    "end": "1719000"
  },
  {
    "text": "no but if they wanted to pay me I would do it yeah",
    "start": "1680059",
    "end": "1685159"
  },
  {
    "text": "um I haven't I know that all of these projects are sometimes used in commercial projects and you know they",
    "start": "1685159",
    "end": "1690320"
  },
  {
    "text": "I'm sure I modify them and I'm sure that you know the stuff that actually make looks different so",
    "start": "1690320",
    "end": "1697299"
  },
  {
    "text": "not yet",
    "start": "1699740",
    "end": "1702460"
  },
  {
    "text": "net fpga oh yeah",
    "start": "1707299",
    "end": "1711039"
  },
  {
    "text": "I will oh",
    "start": "1715179",
    "end": "1720620"
  },
  {
    "start": "1719000",
    "end": "1803000"
  },
  {
    "text": "actually you know I got started on this because I've been playing with open risk and actually like trying to synthesize",
    "start": "1720620",
    "end": "1726080"
  },
  {
    "text": "uh or sock yeah so I'm trying to synthesize orbsoc on uh you know as Islands uh uh digital",
    "start": "1726080",
    "end": "1734000"
  },
  {
    "text": "and Atlas board you know and actually do get it set up so I can do some like Hardware pen testing on that",
    "start": "1734000",
    "end": "1741140"
  },
  {
    "text": "okay and more expensive",
    "start": "1741140",
    "end": "1744760"
  },
  {
    "text": "good question sorry",
    "start": "1751240",
    "end": "1755440"
  },
  {
    "text": "so I've only covered code reviews um here there's a whole mess of different things that you could do you",
    "start": "1760520",
    "end": "1766520"
  },
  {
    "text": "could um you know basically what the procedure I ended up doing is you know I started out using manual inspection and then I",
    "start": "1766520",
    "end": "1772460"
  },
  {
    "text": "realized that there's just certain structures that always have issues and so I just came up with a list of reps of",
    "start": "1772460",
    "end": "1777799"
  },
  {
    "text": "the code that would find all these critical areas and then I'd go and manually inspect them I never got so far as making my own tools to automate that",
    "start": "1777799",
    "end": "1784399"
  },
  {
    "text": "there are tools available um for doing like tracing signals back you know I don't know what proprietary",
    "start": "1784399",
    "end": "1790820"
  },
  {
    "text": "tool set you may or may not use but uh you know basically tracing Paths of of logic you know you can look at the cone",
    "start": "1790820",
    "end": "1796880"
  },
  {
    "text": "of logic if you have something that's supposed to be a secure signal trace it backwards until you find something that's not in your list of secure",
    "start": "1796880",
    "end": "1802520"
  },
  {
    "text": "signals",
    "start": "1802520",
    "end": "1805000"
  },
  {
    "start": "1803000",
    "end": "1827000"
  },
  {
    "text": "um I I used to say no that I know nothing that I know of but uh I mean yes there are",
    "start": "1809899",
    "end": "1815240"
  },
  {
    "text": "um are there any static analysis tools so for security purposes uh Jasper gold I'm",
    "start": "1815240",
    "end": "1821899"
  },
  {
    "text": "not familiar with it I've never used it but when I answered that question previously people told me to check it out and I haven't yet",
    "start": "1821899",
    "end": "1828500"
  },
  {
    "start": "1827000",
    "end": "1841000"
  },
  {
    "text": "maybe I'll get in touch with them and tell them to send me a free copy",
    "start": "1828500",
    "end": "1832898"
  },
  {
    "start": "1841000",
    "end": "1913000"
  },
  {
    "text": "uh could I do something coherent or a denial of service if I try to exploit these things",
    "start": "1841820",
    "end": "1847399"
  },
  {
    "text": "um yes I think that something coherent could come out of these um the most interesting one I'd say is",
    "start": "1847399",
    "end": "1853399"
  },
  {
    "text": "the aliasing bug right again you know this is a simple architecture there's not really any security protections or",
    "start": "1853399",
    "end": "1858500"
  },
  {
    "text": "super super user modes but uh you know finding that same bug on some on a",
    "start": "1858500",
    "end": "1863740"
  },
  {
    "text": "multi-ring you know chip that's that's money um and then the JTAG one again this",
    "start": "1863740",
    "end": "1870140"
  },
  {
    "text": "example was you know no real exploit uh that I came up with again I'm talking about RTL level I'm not talking",
    "start": "1870140",
    "end": "1876500"
  },
  {
    "text": "synthesized I'm not talking about you know real chips once you get the real Chip though",
    "start": "1876500",
    "end": "1881840"
  },
  {
    "text": "um the same logic would apply you find a one hot State machine that you can glitch into multi-hot State you know",
    "start": "1881840",
    "end": "1887720"
  },
  {
    "text": "you've entered into undefined territory um it depends on the Chip And how it's implemented if that lets you do",
    "start": "1887720",
    "end": "1894260"
  },
  {
    "text": "something bad or not again a black box scenario this gets really hard really fast",
    "start": "1894260",
    "end": "1899659"
  },
  {
    "text": "so any more questions",
    "start": "1899659",
    "end": "1905919"
  },
  {
    "text": "okay thanks very much foreign",
    "start": "1907159",
    "end": "1912940"
  }
]