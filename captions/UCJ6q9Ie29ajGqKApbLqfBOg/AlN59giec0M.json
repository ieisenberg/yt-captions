[
  {
    "text": "[Music]",
    "start": "1700",
    "end": "4810"
  },
  {
    "text": "hello black hat and thank you for joining us on our talk on leveraging the",
    "start": "7460",
    "end": "12960"
  },
  {
    "text": "endpoint security framework for Behavioral detections I'm Jaren Bradley I'm here presenting with my co-worker",
    "start": "12960",
    "end": "19380"
  },
  {
    "text": "Matt benyo we both work at jamf threat Labs where we focus on finding new ways",
    "start": "19380",
    "end": "24480"
  },
  {
    "text": "to detect malicious activity on Mac OS devices over the past few years this has",
    "start": "24480",
    "end": "30599"
  },
  {
    "text": "meant leaning pretty heavily into the apple and Point Security framework and today we wanted to share a bit about",
    "start": "30599",
    "end": "36420"
  },
  {
    "text": "where we've found success with monitoring for applications that are behaving in ways that they shouldn't be",
    "start": "36420",
    "end": "43800"
  },
  {
    "text": "so if you're here there's a good chance that you probably know a thing or two about the endpoint security framework",
    "start": "43800",
    "end": "49200"
  },
  {
    "text": "but regardless of your level of exposure we're going to take a step back and put it into context so what is the endpoint",
    "start": "49200",
    "end": "56399"
  },
  {
    "text": "security framework so if you're building an endpoint security tool for an operating system",
    "start": "56399",
    "end": "62160"
  },
  {
    "text": "you really need two basic things the first is a source of information about",
    "start": "62160",
    "end": "67380"
  },
  {
    "text": "events that are happening in the operating system that feeds into your analysis and detections",
    "start": "67380",
    "end": "73020"
  },
  {
    "text": "and the second is the ability to act on detections to exert Authority that could",
    "start": "73020",
    "end": "79200"
  },
  {
    "text": "be killing a process or preventing a file from being deleted or modified and so on",
    "start": "79200",
    "end": "85140"
  },
  {
    "text": "and historically the kernel the heart of the operating system is the place where we would go to access this data and",
    "start": "85140",
    "end": "90840"
  },
  {
    "text": "exert this Authority so until recently if you're developing an endpoint security tool for Mac OS",
    "start": "90840",
    "end": "96720"
  },
  {
    "text": "you'd build a kernel extension and you had at your disposal to do so the open",
    "start": "96720",
    "end": "102060"
  },
  {
    "text": "BSM audit Trail for your event information you had the chaos kernel",
    "start": "102060",
    "end": "107640"
  },
  {
    "text": "programming interface for your controls which was a bit limited and there's also the mandatory Access Control framework",
    "start": "107640",
    "end": "113759"
  },
  {
    "text": "which had the controls that vendors are looking for but it was unsupported",
    "start": "113759",
    "end": "118860"
  },
  {
    "text": "undocumented and ostensibly off limits to anyone but Apple so the thing is even by Apple's",
    "start": "118860",
    "end": "125159"
  },
  {
    "text": "admission kernel extensions are difficult to develop and maintain and ultimately they can create new security",
    "start": "125159",
    "end": "131760"
  },
  {
    "text": "vulnerabilities because even a minor bug can lead to things like kernel panics",
    "start": "131760",
    "end": "137819"
  },
  {
    "text": "so these limitations really have served as a big obstacle to innovation in Mac",
    "start": "137819",
    "end": "143459"
  },
  {
    "text": "OS security so in an effort to secure their kernel to give security vendors what they need to",
    "start": "143459",
    "end": "149220"
  },
  {
    "text": "build Tools in 10.15 apple introduced the endpoint security framework",
    "start": "149220",
    "end": "155040"
  },
  {
    "text": "and in doing so they are effectively serving up in user space and event info Rich event information source and the",
    "start": "155040",
    "end": "162959"
  },
  {
    "text": "controls to act on detections all without adding any additional instability in the kernel",
    "start": "162959",
    "end": "169319"
  },
  {
    "text": "so instead of kernel extensions vendors can now build system extensions that exist in user",
    "start": "169319",
    "end": "176160"
  },
  {
    "text": "space and the way this works is that when an event occurs the kernel sends information to all of",
    "start": "176160",
    "end": "183239"
  },
  {
    "text": "the third-party system extensions that are subscribed to a particular event things like process creates and exits",
    "start": "183239",
    "end": "189660"
  },
  {
    "text": "file creates unlinks Mount events that type of stuff most ESF events come in two different",
    "start": "189660",
    "end": "196379"
  },
  {
    "text": "varieties you have notification events and you have authorization events they both deliver the same information but",
    "start": "196379",
    "end": "202019"
  },
  {
    "text": "notify events are simply meant to inform so they let the system extension know that Something's Happened and the system",
    "start": "202019",
    "end": "208500"
  },
  {
    "text": "extension can use that information in whatever way it sees fit maybe it pops an alert to a console or maybe it's",
    "start": "208500",
    "end": "215099"
  },
  {
    "text": "forwarding data to a Sim by contrast authorization events",
    "start": "215099",
    "end": "220379"
  },
  {
    "text": "actually hold up activity at the kernel so the extension evaluates event data",
    "start": "220379",
    "end": "226440"
  },
  {
    "text": "with its detection logic and determines whether this process should proceed",
    "start": "226440",
    "end": "231780"
  },
  {
    "text": "when an event fails the system extension checks the system extension sends the deny response and the operation is",
    "start": "231780",
    "end": "238140"
  },
  {
    "text": "terminated now of course this is just a visual representation for illustration as the window for all this to occur is",
    "start": "238140",
    "end": "244379"
  },
  {
    "text": "incredibly brief to maintain performance and user experience",
    "start": "244379",
    "end": "249500"
  },
  {
    "text": "so static detections have been around since the early days of antivirus and they continue to stick around because",
    "start": "249599",
    "end": "255060"
  },
  {
    "text": "they're an effective means of detecting malware based on the way the auth events",
    "start": "255060",
    "end": "260220"
  },
  {
    "text": "work ESF complements static base blocking very nicely while the execution of event is on hold a third-party",
    "start": "260220",
    "end": "267120"
  },
  {
    "text": "extension can quickly scan it decide whether or not to allow it to execute um so what are the some of the static",
    "start": "267120",
    "end": "273360"
  },
  {
    "text": "behaviors that can be scanned in this small time window well it can be a variety of things but if we're going to",
    "start": "273360",
    "end": "278639"
  },
  {
    "text": "prevent something we better be really sure that it's uh not something I should be allowed to run because once again the",
    "start": "278639",
    "end": "284340"
  },
  {
    "text": "last thing we want to do is ruin the user's Mac OS experience so for this reason uh traditional kind of indicators",
    "start": "284340",
    "end": "290759"
  },
  {
    "text": "of compromise work really well team IDs or developers that have been identified as malicious in the past uh is a is an",
    "start": "290759",
    "end": "298860"
  },
  {
    "text": "easy thing to quickly look up and block file hashes you know file Fingerprints of known malware and then of course Yara",
    "start": "298860",
    "end": "306120"
  },
  {
    "text": "rules work fantastic as well allowing us to scan for byte byte patterns or strings and and blocking if we see ones",
    "start": "306120",
    "end": "314040"
  },
  {
    "text": "that we don't like there's of course other options such as machine learning algorithms but again ultimately whatever",
    "start": "314040",
    "end": "319680"
  },
  {
    "text": "you end up testing against needs to return a result almost instantly",
    "start": "319680",
    "end": "324900"
  },
  {
    "text": "so this leads naturally to the focus of our talk which is behavioral detections and this idea of a behavioral detection",
    "start": "324900",
    "end": "331860"
  },
  {
    "text": "has been around for a while and they've increased in value as security vendors have really refined uh developing a",
    "start": "331860",
    "end": "339479"
  },
  {
    "text": "baseline of what normal application activity looks like as opposed to things that are more suspicious or nefarious",
    "start": "339479",
    "end": "345720"
  },
  {
    "text": "so the downside to this type of a detection is that they tend to have a higher false positive ratio because",
    "start": "345720",
    "end": "351539"
  },
  {
    "text": "we're looking at a broader pattern of activity as opposed to something more objective like a file hash",
    "start": "351539",
    "end": "357180"
  },
  {
    "text": "but when these are executed correctly it's a worthy trade-off because it",
    "start": "357180",
    "end": "362280"
  },
  {
    "text": "allows us to identify things like malware that we haven't seen before or activity patterns that really haven't",
    "start": "362280",
    "end": "368520"
  },
  {
    "text": "been seen before so to give an example um we'll call this one a fake file",
    "start": "368520",
    "end": "375060"
  },
  {
    "text": "extension and we'll start with something really straightforward here so in this example a user goes to finder in their",
    "start": "375060",
    "end": "381539"
  },
  {
    "text": "temp directory and they discover a PDF called a DOT PDF now a single",
    "start": "381539",
    "end": "388020"
  },
  {
    "text": "letter PDF in the temp file is probably weird enough to detect on on its own but we can take a closer look at this and",
    "start": "388020",
    "end": "395580"
  },
  {
    "text": "when they examine this file they would discover that this is actually a Mako",
    "start": "395580",
    "end": "400740"
  },
  {
    "text": "executable so masquerading file extensions using",
    "start": "400740",
    "end": "406020"
  },
  {
    "text": "contradictory file extensions in this way is one of the oldest tricks in the book uh attackers will use this method",
    "start": "406020",
    "end": "411600"
  },
  {
    "text": "to try and blend in with the user's files or the operating system and somewhat ironically these kind of cheap",
    "start": "411600",
    "end": "417419"
  },
  {
    "text": "evasive maneuvers lead to some of our best detections because they're hard to justify in a benign context",
    "start": "417419",
    "end": "424699"
  },
  {
    "text": "so as you can see all we really did here was take the behavior of a file being created or written to Temp and perform",
    "start": "425460",
    "end": "432000"
  },
  {
    "text": "some additional checks to determine if it was actually of any interest so truth be told like benyo said some of these",
    "start": "432000",
    "end": "437580"
  },
  {
    "text": "might be interesting by themselves for instance a PDF extension on an executable it's probably a detection by",
    "start": "437580",
    "end": "443880"
  },
  {
    "text": "itself but if we want to take additional kind of odd behaviors like oh this is",
    "start": "443880",
    "end": "449340"
  },
  {
    "text": "this is in the temp directory or this has a single letter file name these are all just kind of strange things if we",
    "start": "449340",
    "end": "455220"
  },
  {
    "text": "want to further kind of enhance and tighten up detections we could look for multiple things like this to create one",
    "start": "455220",
    "end": "460740"
  },
  {
    "text": "detection we'll demonstrate a slightly more in-depth example of one of these",
    "start": "460740",
    "end": "466979"
  },
  {
    "text": "detections with something we call p-list disguised as Apple so inside of the system Library launch",
    "start": "466979",
    "end": "474360"
  },
  {
    "text": "agents directory a launch agent is something that will run generally run at",
    "start": "474360",
    "end": "479400"
  },
  {
    "text": "startup on the system when your system boots and here we have what a launch",
    "start": "479400",
    "end": "485280"
  },
  {
    "text": "agent should look like This one belongs to the Mac OS diagnose agent we actually tell this by simply",
    "start": "485280",
    "end": "492479"
  },
  {
    "text": "looking at the file name Apple encourages developers to follow suit and name all launch agents and daemons using",
    "start": "492479",
    "end": "498840"
  },
  {
    "text": "a reverse domain name notation so by looking at the file called",
    "start": "498840",
    "end": "504379"
  },
  {
    "text": "com.apple.diagnose agent.plist we should immediately know that this P list is",
    "start": "504379",
    "end": "509520"
  },
  {
    "text": "part of the operating system and belongs to Apple so a long time ago malware authors caught on to this fact as well",
    "start": "509520",
    "end": "515159"
  },
  {
    "text": "so they began calling their malicious demons and agents.com.apple.fill in the blank",
    "start": "515159",
    "end": "521120"
  },
  {
    "text": "causing those agents to blend in with the operating system as well",
    "start": "521120",
    "end": "526820"
  },
  {
    "text": "so if we look inside this file we see that this agent will launch this",
    "start": "527220",
    "end": "532320"
  },
  {
    "text": "diagnose helper this is an uh this executable is an apple binary and properly signed by Apple as it should be",
    "start": "532320",
    "end": "541160"
  },
  {
    "text": "so let's take a look at how this can be counterfeited or abused by attackers so",
    "start": "541680",
    "end": "547019"
  },
  {
    "text": "what we'll be looking for is in the user launch agents or launch demons directory",
    "start": "547019",
    "end": "552720"
  },
  {
    "text": "an addition of a new plist that's the first thing we detect on but then we look to see are they using a com.apple",
    "start": "552720",
    "end": "559320"
  },
  {
    "text": "identifier in the file name and truth be told we could stop right here if there's something that's outside of the sit",
    "start": "559320",
    "end": "565620"
  },
  {
    "text": "protected system launch agents directory and it's in the users folder that's",
    "start": "565620",
    "end": "570959"
  },
  {
    "text": "probably suspicious enough to take a look at but we have found some false positives that hit this so we can refine",
    "start": "570959",
    "end": "576540"
  },
  {
    "text": "this detection by doing some additional checks so what we do is we look at that P list and we scope in on the executable",
    "start": "576540",
    "end": "584220"
  },
  {
    "text": "that this intends to run at login and that's going to give us a path so we can go to the executable at that path and we",
    "start": "584220",
    "end": "590580"
  },
  {
    "text": "can run a code signing check and if this is something that's using a com.apple p",
    "start": "590580",
    "end": "597060"
  },
  {
    "text": "list we should hope or expect that this is an executable that's also owned by Apple and in this case the code signing",
    "start": "597060",
    "end": "604260"
  },
  {
    "text": "information comes back is unsigned and that is highly suspicious something that we can confidently trigger a detection",
    "start": "604260",
    "end": "609959"
  },
  {
    "text": "on for further analysis so this has been a really reliable detection over the years it is worth",
    "start": "609959",
    "end": "616920"
  },
  {
    "text": "pointing out though that when this these days when we see this triggered it's generally one of the newer Espionage",
    "start": "616920",
    "end": "623220"
  },
  {
    "text": "focused applications this is something that adware used to do a lot but I think that they spend so much time in the",
    "start": "623220",
    "end": "629100"
  },
  {
    "text": "trenches and they've been caught by so many different security products using this technique that's something that they've moved away from",
    "start": "629100",
    "end": "636680"
  },
  {
    "text": "so so far we've talked quite a bit about different behaviors and checks to perform with file activity let's get",
    "start": "637140",
    "end": "643200"
  },
  {
    "text": "into a bit of background on what suspicious process activity looks like so we're going to give an example here",
    "start": "643200",
    "end": "648959"
  },
  {
    "text": "by showing off a single exec event let's say that you're maybe a threat Hunter you're in Splunk and you encounter a",
    "start": "648959",
    "end": "656160"
  },
  {
    "text": "process execution events in this example we're just demoing with a simple cut",
    "start": "656160",
    "end": "661200"
  },
  {
    "text": "command so for those that aren't familiar with the cut command it's generally used to",
    "start": "661200",
    "end": "666600"
  },
  {
    "text": "splice data passed to it from another command by itself it really tells us absolutely nothing we're going to show",
    "start": "666600",
    "end": "672899"
  },
  {
    "text": "here how we can use other fields in this event to get the context of what's happening on the system",
    "start": "672899",
    "end": "680120"
  },
  {
    "text": "so next we'll use the parent process ID and grab the process that ran the cut command it it's primarily a tool meant",
    "start": "681180",
    "end": "687360"
  },
  {
    "text": "to be used within a shell so it comes as no surprise that the parent is zsh in",
    "start": "687360",
    "end": "692519"
  },
  {
    "text": "this case where we really start to gain some useful context here is when we take",
    "start": "692519",
    "end": "697620"
  },
  {
    "text": "this same event and we look up the responsible PID which in this case points to terminal dot app as we can see",
    "start": "697620",
    "end": "705660"
  },
  {
    "text": "this process ID starts to paint a better picture so far we've determined that the user opened a terminal their shell of",
    "start": "705660",
    "end": "712560"
  },
  {
    "text": "choice is the default zsh and they executed cut however as I stated earlier",
    "start": "712560",
    "end": "718380"
  },
  {
    "text": "this still there's still more to this picture and cut by itself isn't super",
    "start": "718380",
    "end": "724019"
  },
  {
    "text": "helpful to us but at least we know that this was likely a user because it was executed through a terminal GUI",
    "start": "724019",
    "end": "730140"
  },
  {
    "text": "application but uh by taking the process group ID value in this event we can determine",
    "start": "730140",
    "end": "736740"
  },
  {
    "text": "what the process group ID leader of this command was this PID value is fairly uh fairly well",
    "start": "736740",
    "end": "744720"
  },
  {
    "text": "known um but it gets less attention than it deserves in fret hunting not only can we",
    "start": "744720",
    "end": "750300"
  },
  {
    "text": "grab what process was at the front of a set of piped commands in this case system profiler but we can also perform",
    "start": "750300",
    "end": "757560"
  },
  {
    "text": "a search to see all processes that share this same process group ID essentially rebuilding the exact command that was",
    "start": "757560",
    "end": "764399"
  },
  {
    "text": "executed so this approach can't always be taken as we're demoing an example here where a standard job control",
    "start": "764399",
    "end": "770579"
  },
  {
    "text": "behavior is in place but overall this is a pretty good way to go about getting the context of how a group of commands",
    "start": "770579",
    "end": "776760"
  },
  {
    "text": "was executed in this case we can see that the executed command was one that gets used to grab a Serial ID of the",
    "start": "776760",
    "end": "783000"
  },
  {
    "text": "device it's run on and it gets used by both legitimate apps and scripts as well",
    "start": "783000",
    "end": "789240"
  },
  {
    "text": "as some malware performing Recon a session is a collection of process",
    "start": "789240",
    "end": "797040"
  },
  {
    "text": "groups and a session ID points us to the process that's in control of those groups and this is where we can kind of",
    "start": "797040",
    "end": "802560"
  },
  {
    "text": "go and get some additional context of what actually ran inside the terminal",
    "start": "802560",
    "end": "807600"
  },
  {
    "text": "so in this case it belongs to the login process which the terminal runs upon",
    "start": "807600",
    "end": "812880"
  },
  {
    "text": "execution before the shell is chosen so from a single event that shows a",
    "start": "812880",
    "end": "818519"
  },
  {
    "text": "simple cut command occurring we were able to use all the PID fields to determine the exact context of what's",
    "start": "818519",
    "end": "824399"
  },
  {
    "text": "happening and then with some simple lookups we can even sort out the command history that ran here in this terminal",
    "start": "824399",
    "end": "832260"
  },
  {
    "text": "so let's take a look at an attack behavior that can be uncovered using some of these techniques that we just",
    "start": "832260",
    "end": "837720"
  },
  {
    "text": "discussed so in this particular demonstration we're looking at a popular form of a",
    "start": "837720",
    "end": "844860"
  },
  {
    "text": "living off the land technique so in this technique the attacker will host a",
    "start": "844860",
    "end": "850139"
  },
  {
    "text": "script on their server and they will curl that down on the victim machine but pipe it directly to an interpreter on",
    "start": "850139",
    "end": "857519"
  },
  {
    "text": "the system the reason that this is an attractive technique is because in doing so no",
    "start": "857519",
    "end": "862800"
  },
  {
    "text": "malicious files exist on the disk therefore you can really sidestep most static detections this way as the script",
    "start": "862800",
    "end": "870180"
  },
  {
    "text": "really only exists in memory now while this doesn't create files it's",
    "start": "870180",
    "end": "876720"
  },
  {
    "text": "not entirely untraceable if you have that URL and the server still up you could go for example this is the Mythic",
    "start": "876720",
    "end": "882540"
  },
  {
    "text": "agent that would be hosted on This Server by Cody Thomas that's still available but you're creating that extra",
    "start": "882540",
    "end": "888000"
  },
  {
    "text": "step and really going to sidestep any detections aren't looking for this type of a technique specifically",
    "start": "888000",
    "end": "896420"
  },
  {
    "text": "so if we now look for applescript which is The Interpreter in this case being run and we check for it in the process",
    "start": "896940",
    "end": "902639"
  },
  {
    "text": "history we'll see that it's running with no arguments it's just running as Osa",
    "start": "902639",
    "end": "908639"
  },
  {
    "text": "script so to use ESF data to track this type of",
    "start": "908639",
    "end": "914399"
  },
  {
    "text": "activity what we would look for is the execution of The Interpreter in this case Osa script or apple script and if",
    "start": "914399",
    "end": "921480"
  },
  {
    "text": "you look down below in the command you would see that it has no path to a script no additional commands which is a",
    "start": "921480",
    "end": "927720"
  },
  {
    "text": "pretty good giveaway that whatever is running this the script was piped directly to The Interpreter in this way",
    "start": "927720",
    "end": "934740"
  },
  {
    "text": "so the way that we can start to uncover this of what piped to Osa script is by",
    "start": "934740",
    "end": "940320"
  },
  {
    "text": "looking at that process group ID so if we follow that process group ID we see that it leads us",
    "start": "940320",
    "end": "946680"
  },
  {
    "text": "to the curl command and once we have this link we are confident that this type of a living off",
    "start": "946680",
    "end": "953279"
  },
  {
    "text": "the land technique was being used at least to the point of popping an alert for further analysis",
    "start": "953279",
    "end": "959720"
  },
  {
    "text": "so let's walk through another sample that drives home the use case of once again the process group ID",
    "start": "959760",
    "end": "965459"
  },
  {
    "text": "uh Spotlight is functionality on Mac OS that indexes files and documents as they're created it does this by indexing",
    "start": "965459",
    "end": "972959"
  },
  {
    "text": "it does this indexing by taking keywords uh found in those documents and making",
    "start": "972959",
    "end": "978360"
  },
  {
    "text": "them easily findable in a search so when you press command and spacebar you can",
    "start": "978360",
    "end": "983459"
  },
  {
    "text": "punch in a keyword and easily find the document you were looking for even if you can't remember where you saved it",
    "start": "983459",
    "end": "988680"
  },
  {
    "text": "this is a super useful feature I use it all the time but any feature that's useful for us is generally also useful",
    "start": "988680",
    "end": "995459"
  },
  {
    "text": "for an attacker so mdfind is the command line equivalent",
    "start": "995459",
    "end": "1000560"
  },
  {
    "text": "of using this Spotlight functionality so an attacker can easily search for different keywords and attempts to try",
    "start": "1000560",
    "end": "1007279"
  },
  {
    "text": "and find files on the hard drive that contain these keywords such as maybe password routing and account or",
    "start": "1007279",
    "end": "1014180"
  },
  {
    "text": "confidential so an attacker once on the system might use a command that looks something like",
    "start": "1014180",
    "end": "1020720"
  },
  {
    "text": "this where basically they run mdfind they get a list of files back that contain the word confidential and then",
    "start": "1020720",
    "end": "1026780"
  },
  {
    "text": "they take each one of those files and pipe them immediately to an archive and now they just have to X fill that",
    "start": "1026780",
    "end": "1032839"
  },
  {
    "text": "archive and they have a giant archive full of confidential files",
    "start": "1032839",
    "end": "1039400"
  },
  {
    "text": "so in order to detect this happening what we would look for is the execution of one of the built-in archive Tools in",
    "start": "1041240",
    "end": "1048620"
  },
  {
    "text": "this example it's tar so then the next question is we ask what is the process",
    "start": "1048620",
    "end": "1054080"
  },
  {
    "text": "group idea of this tar execution and in this case following this process group",
    "start": "1054080",
    "end": "1059360"
  },
  {
    "text": "ID would lead us naturally to MD find and when this link has been made we can",
    "start": "1059360",
    "end": "1065480"
  },
  {
    "text": "be reasonably confident that tar was run at a string of commands that started",
    "start": "1065480",
    "end": "1070640"
  },
  {
    "text": "with mdfine and this technique was likely being used to the point where we can pop an alert for further analysis",
    "start": "1070640",
    "end": "1077419"
  },
  {
    "text": "it's worth pointing out though that this technique while interesting is limited to what's available uh outside of the",
    "start": "1077419",
    "end": "1085760"
  },
  {
    "text": "full disk aspect asset aspect of the transparent transparency consent and controls there's still some useful",
    "start": "1085760",
    "end": "1092720"
  },
  {
    "text": "things we'll get a little bit more into TCC in one of our advanced detections",
    "start": "1092720",
    "end": "1099340"
  },
  {
    "text": "so we've talked a bit about what we'd call Standard detections now we'd like to get in some detections that require significantly more checks to determine",
    "start": "1099980",
    "end": "1107360"
  },
  {
    "text": "applications uh behaving Anonymous anonymously all three detections we'll",
    "start": "1107360",
    "end": "1114080"
  },
  {
    "text": "talk about here were developed after we discovered or learned about a zero day vulnerability and then we went and found",
    "start": "1114080",
    "end": "1121160"
  },
  {
    "text": "a way to detect those vulnerability if those vulnerabilities were ever abused so everything we'll cover here has since",
    "start": "1121160",
    "end": "1127760"
  },
  {
    "text": "been patched but we still wanted to make sure before those patches occurred that we were",
    "start": "1127760",
    "end": "1133280"
  },
  {
    "text": "detecting them should it happen so the first we're going to touch on is a gatekeeper bypass from a while back so",
    "start": "1133280",
    "end": "1139940"
  },
  {
    "text": "a number of different bypasses have come to lights over the course of this year revolving around file quarantine and",
    "start": "1139940",
    "end": "1147140"
  },
  {
    "text": "gatekeeper these are both security features built into Mac OS that exist to help users ensure they're only running",
    "start": "1147140",
    "end": "1153740"
  },
  {
    "text": "code that's properly been signed by a trusted developer and notarized in this",
    "start": "1153740",
    "end": "1159559"
  },
  {
    "text": "slide we see that a user is downloaded and ran an app called toxic.app this would result",
    "start": "1159559",
    "end": "1165500"
  },
  {
    "text": "um uh in this gatekeeper prompt uh of something like this primarily because",
    "start": "1165500",
    "end": "1171320"
  },
  {
    "text": "the app is completely unsigned and therefore untrusted so last year Cedric Owens discovered a",
    "start": "1171320",
    "end": "1178039"
  },
  {
    "text": "method that allowed apps to incorrectly pass gatekeeper checks he actually did talk about this here at black hat",
    "start": "1178039",
    "end": "1183559"
  },
  {
    "text": "um so we created a detection when we heard about this vulnerability and soon discovered a variant of the Slayer",
    "start": "1183559",
    "end": "1189620"
  },
  {
    "text": "malware abusing it in the wild so before abusing this bypass Slayer",
    "start": "1189620",
    "end": "1195740"
  },
  {
    "text": "developers had to convince you to override gatekeeper because they didn't want to sign the malware they would",
    "start": "1195740",
    "end": "1201620"
  },
  {
    "text": "convince users to override gatekeeper by literally providing instructions for the override process within their installer",
    "start": "1201620",
    "end": "1208100"
  },
  {
    "text": "graphics so this simply consists of right-clicking the application selecting",
    "start": "1208100",
    "end": "1213320"
  },
  {
    "text": "open rather than double clicking on it it seems very basic but we see users fall for this all the time",
    "start": "1213320",
    "end": "1219160"
  },
  {
    "text": "we do see that this still results in some prompts informing the user that",
    "start": "1219160",
    "end": "1224179"
  },
  {
    "text": "this app was downloaded from the internet but ultimately they're given the option to go forward with it if",
    "start": "1224179",
    "end": "1230059"
  },
  {
    "text": "they'd like to when right clicking on the app so that's what the old Slayer malware",
    "start": "1230059",
    "end": "1235880"
  },
  {
    "text": "installer looked like here's what the Slayer malware with gatekeeper with the gatekeeper bypass embedded in it looked",
    "start": "1235880",
    "end": "1242900"
  },
  {
    "text": "like uh it's just a simple double click on the downloaded application and it's game over for the user they didn't have to",
    "start": "1242900",
    "end": "1249260"
  },
  {
    "text": "write click the application nor click through various prompt warnings uh this",
    "start": "1249260",
    "end": "1254360"
  },
  {
    "text": "completely unsigned malware would execute and perform a bunch of background activities while the user was",
    "start": "1254360",
    "end": "1259460"
  },
  {
    "text": "none the wiser an additional note to make here is that although this looked like a PKG",
    "start": "1259460",
    "end": "1266299"
  },
  {
    "text": "installer it was actually just a weaponized application that used a PKG icon but how did the bypass actually",
    "start": "1266299",
    "end": "1273260"
  },
  {
    "text": "work it worked in cases where an application did not contain an",
    "start": "1273260",
    "end": "1278539"
  },
  {
    "text": "info.plist file uh and it used a script as its primary",
    "start": "1278539",
    "end": "1283940"
  },
  {
    "text": "payload so if these two things were true it would be given a stamp of approval from the gatekeeper Security check and",
    "start": "1283940",
    "end": "1290120"
  },
  {
    "text": "it would be allowed to execute so let's rewind a little bit and think",
    "start": "1290120",
    "end": "1295880"
  },
  {
    "text": "about how we could actually detect this so first of all when an application is",
    "start": "1295880",
    "end": "1301340"
  },
  {
    "text": "launched by double clicking it sends a message to launch D which then goes on to open the application so that's the",
    "start": "1301340",
    "end": "1306980"
  },
  {
    "text": "thing that we would look for is launch D being the parent process now obviously most of the processes are running on the",
    "start": "1306980",
    "end": "1313760"
  },
  {
    "text": "system have a parent of launch D but by including this in the detection we can reduce false positives so our next check",
    "start": "1313760",
    "end": "1321559"
  },
  {
    "text": "is to be checking to ensure that we're actually dealing with an application bundle this can be done by analyzing the",
    "start": "1321559",
    "end": "1328039"
  },
  {
    "text": "command line while the app was double clicked but what we can do very easily is look",
    "start": "1328039",
    "end": "1333980"
  },
  {
    "text": "for this Telltale string in the command line arguments of dot app slash contents",
    "start": "1333980",
    "end": "1339380"
  },
  {
    "text": "slash Mac OS if we see this string we're confident that we're dealing with an",
    "start": "1339380",
    "end": "1344600"
  },
  {
    "text": "application",
    "start": "1344600",
    "end": "1347200"
  },
  {
    "text": "so next we're going to ensure that the process that was running was actually a built-in interpreter so what we did was",
    "start": "1349940",
    "end": "1356720"
  },
  {
    "text": "we essentially looked for any of the built-in interpreters at the time there were a couple more that have since been",
    "start": "1356720",
    "end": "1362120"
  },
  {
    "text": "deprecated but these are all the ones that are available and in the Slayer example it was actually bash that was",
    "start": "1362120",
    "end": "1367460"
  },
  {
    "text": "running so the next thing we'll do is we want to",
    "start": "1367460",
    "end": "1373340"
  },
  {
    "text": "make sure since a requirement of this bypass was that the executable was a script we'll look at the executable to",
    "start": "1373340",
    "end": "1379039"
  },
  {
    "text": "ensure that it wasn't some type of a macho binary that it was actually a script so you could do this via API check magic bytes whatever your",
    "start": "1379039",
    "end": "1386000"
  },
  {
    "text": "particular flavor is and then lastly we want to make sure",
    "start": "1386000",
    "end": "1393080"
  },
  {
    "text": "that we're catching this at the moment that it's being looked at by gatekeeper and for this we relied on a particular",
    "start": "1393080",
    "end": "1398120"
  },
  {
    "text": "Quirk of Gatekeepers so to mitigate a different vulnerability when you double",
    "start": "1398120",
    "end": "1403640"
  },
  {
    "text": "click on an application that's in something like a DMG gatekeeper will actually move that to a randomized file",
    "start": "1403640",
    "end": "1410419"
  },
  {
    "text": "path to prevent it from accessing external resources and this particular feature is called app translocation",
    "start": "1410419",
    "end": "1419960"
  },
  {
    "text": "so that's what we'll look for to ensure that this is happening at the moment of a gatekeeper inspection that will",
    "start": "1419960",
    "end": "1426140"
  },
  {
    "text": "incorrectly pass checks so let's take a quick look at what all",
    "start": "1426140",
    "end": "1431659"
  },
  {
    "text": "this looks like from an ESF perspective notice here that we can almost do all the checks required once again by",
    "start": "1431659",
    "end": "1438140"
  },
  {
    "text": "pivoting around on a single exec event so the first thing we're going to do is check that the parent is launch d",
    "start": "1438140",
    "end": "1445220"
  },
  {
    "text": "uh next we're going to take a look at the command line arguments and make sure a application is referenced within them",
    "start": "1445220",
    "end": "1453380"
  },
  {
    "text": "uh instead of checking the command line arguments we could also check the script field that ESF provides on execution uh",
    "start": "1453380",
    "end": "1460640"
  },
  {
    "text": "but uh in this case we do see that the application is referenced inside the command line arguments so next we'll",
    "start": "1460640",
    "end": "1466880"
  },
  {
    "text": "grab the path of the executable being exact to see if it matches an interpreter language which in this case",
    "start": "1466880",
    "end": "1473000"
  },
  {
    "text": "it does we see that it's been Bash and then we will take the application",
    "start": "1473000",
    "end": "1478460"
  },
  {
    "text": "from the command line arguments and check to ensure that it's not a macho as of course for this bypass we only care",
    "start": "1478460",
    "end": "1485240"
  },
  {
    "text": "about scripts because that's all that worked so finally as mentioned before uh we're",
    "start": "1485240",
    "end": "1492080"
  },
  {
    "text": "going to check that this app is being analyzed by gatekeeper as we only want to trigger at the time that the",
    "start": "1492080",
    "end": "1497720"
  },
  {
    "text": "gatekeeper bypass is occurring so you can actually use a script as your main payload in an application Apple does",
    "start": "1497720",
    "end": "1504080"
  },
  {
    "text": "allow for that uh but when when something like this happens we want to trigger on this at the time of bypasses",
    "start": "1504080",
    "end": "1510260"
  },
  {
    "text": "if the user still continues to want to run this in the future that's that's up to them",
    "start": "1510260",
    "end": "1516100"
  },
  {
    "text": "so this is the detection we put into action when we heard the zero day existed and almost immediately as we",
    "start": "1518120",
    "end": "1523580"
  },
  {
    "text": "pushed it out we detected the Slayer malware uh dropper triggering in various environments which tells us malicious",
    "start": "1523580",
    "end": "1530240"
  },
  {
    "text": "authors do see value in evading these gatekeeper checks and do see value in not having to take the time to sign code",
    "start": "1530240",
    "end": "1536480"
  },
  {
    "text": "or pay for any type of you know code signing fee",
    "start": "1536480",
    "end": "1541360"
  },
  {
    "text": "so next we're going to touch on a TCC bypass which we hinted at a little bit earlier as we showed",
    "start": "1541580",
    "end": "1548360"
  },
  {
    "text": "um earlier TCC is uh is kind of a feature where users can grant specific",
    "start": "1548360",
    "end": "1554000"
  },
  {
    "text": "applications permissions to do specific things such as capture keyboard input",
    "start": "1554000",
    "end": "1559279"
  },
  {
    "text": "record the mic or record the screen so when an application attempts to perform an action such as record the screen the",
    "start": "1559279",
    "end": "1567020"
  },
  {
    "text": "user is prompted asking if they want to approve this action for the application",
    "start": "1567020",
    "end": "1572779"
  },
  {
    "text": "so perhaps one of the more concerning times where we've seen this prompt bypassed was in the Wild by the XCS set",
    "start": "1572779",
    "end": "1578720"
  },
  {
    "text": "malware zero day usage isn't new for this malware in fact it was using two other zero days at the time as well",
    "start": "1578720",
    "end": "1585400"
  },
  {
    "text": "specifically we're going to focus in on the Zero date it would attempt to use in order to gain screen sharing permissions",
    "start": "1585400",
    "end": "1592039"
  },
  {
    "text": "uh the malware would start by looking for a list of various applications that already exist on the system and likely",
    "start": "1592039",
    "end": "1599360"
  },
  {
    "text": "hold that screen recording permission in the malware code it referred to these applications as donor apps",
    "start": "1599360",
    "end": "1606260"
  },
  {
    "text": "among these applications was of course Zoom since at this point many users have had installed zoom on on their systems",
    "start": "1606260",
    "end": "1613159"
  },
  {
    "text": "to remotely share their screens and for that purpose it would have the screen sharing permission already uh what the",
    "start": "1613159",
    "end": "1619220"
  },
  {
    "text": "app malware authors discovered is that if they placed an application bundle within an already existing application",
    "start": "1619220",
    "end": "1626179"
  },
  {
    "text": "bundle we'll call this update.app in this case they could",
    "start": "1626179",
    "end": "1631220"
  },
  {
    "text": "actually piggyback off the permissions of that the existing bundle held",
    "start": "1631220",
    "end": "1636980"
  },
  {
    "text": "so if we go back to the TCC settings this is effectively what would now be taking place however the piggybacking",
    "start": "1636980",
    "end": "1642980"
  },
  {
    "text": "application would gain the permissions it would gain the permissions but it",
    "start": "1642980",
    "end": "1648320"
  },
  {
    "text": "would not show up in this list of software as able to do so so uh now all",
    "start": "1648320",
    "end": "1653960"
  },
  {
    "text": "the attacker had to do was record the screen and no prompts would be displayed to the user I think an important",
    "start": "1653960",
    "end": "1660260"
  },
  {
    "text": "takeaway here is that many don't think anyone's going to take the time on Mac OS to bypass these type of restrictions",
    "start": "1660260",
    "end": "1666860"
  },
  {
    "text": "when in fact malware has already taken the time to try and find ways around this to remain more stealthy this was",
    "start": "1666860",
    "end": "1674240"
  },
  {
    "text": "all also done via applescript malware by the way which uh some some might argue makes this even more impressive",
    "start": "1674240",
    "end": "1682640"
  },
  {
    "text": "so when this malware runs it will trigger an endpoint security framework exec event",
    "start": "1682640",
    "end": "1689000"
  },
  {
    "text": "and the way that we would detect this is to look for that application being opened and we'd look at the path to",
    "start": "1689000",
    "end": "1695720"
  },
  {
    "text": "First determine that we're dealing with an application and the next thing we'll check to see is to see is that application nested inside",
    "start": "1695720",
    "end": "1703700"
  },
  {
    "text": "of another application now keep in mind Zoom is just the example here in theory it could be any",
    "start": "1703700",
    "end": "1709760"
  },
  {
    "text": "application that had the desired TCC permissions",
    "start": "1709760",
    "end": "1714639"
  },
  {
    "text": "so now that we have an outer app and an inner application we can start to treat those as two separate things and it's",
    "start": "1715340",
    "end": "1722059"
  },
  {
    "text": "worth pointing out that it's totally legal for developers to do this it's it's a normal behavior to put one app inside of another application however we",
    "start": "1722059",
    "end": "1729679"
  },
  {
    "text": "would expect that the signing information of those two applications would match so that's how we were able",
    "start": "1729679",
    "end": "1735980"
  },
  {
    "text": "to look for this being done illicitly so you check the donor application give it a code signing check in this case it's",
    "start": "1735980",
    "end": "1742760"
  },
  {
    "text": "the Zoom app it's a price surprise it's signed by Zoom legitimately so then next",
    "start": "1742760",
    "end": "1747799"
  },
  {
    "text": "we want to check the inner application and we should expect that also to be signed by Zoom if this is a legitimate",
    "start": "1747799",
    "end": "1754279"
  },
  {
    "text": "update app and in the case of the XCS at malware it came back as signed ad hoc",
    "start": "1754279",
    "end": "1759799"
  },
  {
    "text": "which was a huge red flag so that's the detection we're looking",
    "start": "1759799",
    "end": "1765620"
  },
  {
    "text": "for an application being executed we're looking for that application to be nested inside of another application",
    "start": "1765620",
    "end": "1772399"
  },
  {
    "text": "then we check the outer application signing information and see that it's legitimate and for the inner application",
    "start": "1772399",
    "end": "1779480"
  },
  {
    "text": "when we check that signing information if it's illegitimate we'd see one of three cases a mismatched team ID that",
    "start": "1779480",
    "end": "1785600"
  },
  {
    "text": "doesn't match the outer app signed ad hoc or not signed at all and if those conditions are met we confidently pop an",
    "start": "1785600",
    "end": "1791960"
  },
  {
    "text": "alert for further analysis so let's talk about one last gatekeeper",
    "start": "1791960",
    "end": "1798740"
  },
  {
    "text": "bypass that we were able to detect and this vulnerability was actually found by jamf's own for Dao seljuki and he was",
    "start": "1798740",
    "end": "1805640"
  },
  {
    "text": "attributed on a cve when this was patched by Apple so to understand this particular bypass",
    "start": "1805640",
    "end": "1811640"
  },
  {
    "text": "we first have to quickly break down some of the basics of how Safari works so when Safari is used to download a file",
    "start": "1811640",
    "end": "1818779"
  },
  {
    "text": "especially something like a zip file with an application in it you may have noticed that it hits the downloads",
    "start": "1818779",
    "end": "1824419"
  },
  {
    "text": "folder and is almost instantaneously unzipped this is the default behavior and this is part of a feature in Safari",
    "start": "1824419",
    "end": "1831500"
  },
  {
    "text": "called open safe files for downloading it's what Apple deems to save files and probably part of the thinking around",
    "start": "1831500",
    "end": "1837320"
  },
  {
    "text": "this is something like an application while it feels like a file is actually a directory bundle and can't be downloaded",
    "start": "1837320",
    "end": "1843919"
  },
  {
    "text": "directly so often you'll see applications that are zipped up in this way and using this Auto unzip feature",
    "start": "1843919",
    "end": "1849799"
  },
  {
    "text": "kind of abstracts that away so it feels uh more logical to an end user",
    "start": "1849799",
    "end": "1856480"
  },
  {
    "text": "so if we quickly rewind uh once again and then watch all of this in slow",
    "start": "1857840",
    "end": "1863179"
  },
  {
    "text": "motion using the endpoint security framework what we would actually see is",
    "start": "1863179",
    "end": "1868220"
  },
  {
    "text": "that after the archive download occurs Through Safari the Safari sandbox is",
    "start": "1868220",
    "end": "1873559"
  },
  {
    "text": "actually what's responsible for creating a temporary directory and then handling the unzipping of that archive into that",
    "start": "1873559",
    "end": "1879980"
  },
  {
    "text": "directory so the Safari sandbox then takes the quarantine extended attribute and",
    "start": "1879980",
    "end": "1886520"
  },
  {
    "text": "applies it to the newly unzipped application this part's actually very important",
    "start": "1886520",
    "end": "1891559"
  },
  {
    "text": "because when an application is opened for the first time its extended attributes are checked by the system if",
    "start": "1891559",
    "end": "1897380"
  },
  {
    "text": "this quarantine extended attribute is on the opened application the system knows that it needs to be checked by",
    "start": "1897380",
    "end": "1902899"
  },
  {
    "text": "gatekeeper upon its first launch so while we're browsing the internet in",
    "start": "1902899",
    "end": "1909140"
  },
  {
    "text": "search of malware we encountered a Gaming website that was hosting games in application form via zip archives so",
    "start": "1909140",
    "end": "1916640"
  },
  {
    "text": "after we downloaded these games we noticed that they were somehow bypassing Gatekeepers prompts despite being",
    "start": "1916640",
    "end": "1923000"
  },
  {
    "text": "completely unsigned so after further investigation we actually noticed that the extended attribute was not being",
    "start": "1923000",
    "end": "1929659"
  },
  {
    "text": "placed on the application directory itself it was only being applied to the recursive contents under that app and as",
    "start": "1929659",
    "end": "1936980"
  },
  {
    "text": "it turns out gatekeeper only cares about whether that application has a quarantine mark on it or not",
    "start": "1936980",
    "end": "1945260"
  },
  {
    "text": "so we notice that this wasn't actually happening if we downloaded the application via another browser and then",
    "start": "1945260",
    "end": "1952580"
  },
  {
    "text": "unzipped it manually all the quarantine attributes would appear as expected in in this type of scenario",
    "start": "1952580",
    "end": "1959179"
  },
  {
    "text": "so this told us the issue lied somewhere in the Safari Auto unzipper itself",
    "start": "1959179",
    "end": "1964820"
  },
  {
    "text": "not only that but we also noticed that if we used Apple's built-in ditto command to unzip our own archive it",
    "start": "1964820",
    "end": "1971059"
  },
  {
    "text": "would also result in the same quarantine bug this told us the bug likely goes much deeper on the operating system",
    "start": "1971059",
    "end": "1977240"
  },
  {
    "text": "somewhere as it was affecting at least two different unarchiving Technologies",
    "start": "1977240",
    "end": "1983440"
  },
  {
    "text": "so as it uh as it turned out this issue existed within the bill of materials functionality a bill of materials is",
    "start": "1983720",
    "end": "1990500"
  },
  {
    "text": "think of it like a receipt for all files that maybe an installer or archive leaves on the system logically this",
    "start": "1990500",
    "end": "1997640"
  },
  {
    "text": "receipt technology ties really well to PKG installers uh however Mac OS also builds references builds and references",
    "start": "1997640",
    "end": "2005320"
  },
  {
    "text": "uh a bomb for zip files as well it's just not very well documented anywhere",
    "start": "2005320",
    "end": "2012519"
  },
  {
    "text": "so upon unarchiving the application from a normal zip file the bomb seen on the",
    "start": "2012519",
    "end": "2018519"
  },
  {
    "text": "right here will keep track of each file that gets unarchived the unarchiving",
    "start": "2018519",
    "end": "2023620"
  },
  {
    "text": "logic then goes through each file uh in the bomb and applies the quarantine attribute fittingly",
    "start": "2023620",
    "end": "2030580"
  },
  {
    "text": "so one big thing we noticed analyzing a normal zipped application in a hex editor is that the first zip file header",
    "start": "2030580",
    "end": "2037720"
  },
  {
    "text": "starts at the root application directory the quarantine attribute would always be",
    "start": "2037720",
    "end": "2043000"
  },
  {
    "text": "applied as expected in this case but the zip files we are downloading from the",
    "start": "2043000",
    "end": "2048339"
  },
  {
    "text": "internet were unknowingly bypassing gatekeeper and on the other hand they were missing",
    "start": "2048339",
    "end": "2054820"
  },
  {
    "text": "this root level header and instead they started at the applications contents directory",
    "start": "2054820",
    "end": "2063539"
  },
  {
    "text": "so if we take one of these modified zip files and remove the top level header",
    "start": "2064659",
    "end": "2070118"
  },
  {
    "text": "we see here that when the bomb gets parsed once again on the right the application root directory would be",
    "start": "2070119",
    "end": "2077020"
  },
  {
    "text": "missing from the bomb however the application would continue to unzip and operate normally",
    "start": "2077020",
    "end": "2084419"
  },
  {
    "text": "but when the copy quarantine function gets referenced and it references the bill of materials to apply the",
    "start": "2084520",
    "end": "2090158"
  },
  {
    "text": "quarantine attributes it ends up missing the app directory itself since the bill of materials at this point was out of",
    "start": "2090159",
    "end": "2096460"
  },
  {
    "text": "sync so using the endpoint security framework again is our foundation how do we go",
    "start": "2096460",
    "end": "2101920"
  },
  {
    "text": "about detecting this occurring so we start by looking for a file rename",
    "start": "2101920",
    "end": "2107020"
  },
  {
    "text": "event we're looking for that moment when the Safari sandbox broker is moving from its temp file the new application back",
    "start": "2107020",
    "end": "2112900"
  },
  {
    "text": "to the downloads folder then we ensure that it's actually the Safari sandbox broker that's taking the",
    "start": "2112900",
    "end": "2118960"
  },
  {
    "text": "action and then we make we make sure that it's",
    "start": "2118960",
    "end": "2124000"
  },
  {
    "text": "actually an application that's in question that's being moved",
    "start": "2124000",
    "end": "2128640"
  },
  {
    "text": "then we make sure that the original location is the temporary directory that",
    "start": "2129400",
    "end": "2134859"
  },
  {
    "text": "the sandbox broker creates when it's unzipping the file and moving it back to downloads and then finally we do an",
    "start": "2134859",
    "end": "2140440"
  },
  {
    "text": "extended attribute lookup to ensure that the quarantine attribute was actually applied",
    "start": "2140440",
    "end": "2146820"
  },
  {
    "text": "so this detection is interesting because by looking over the shoulder of the built-in security and ensuring that it's",
    "start": "2147640",
    "end": "2153460"
  },
  {
    "text": "doing its job as expected we can generically detect when a gatekeeper bypass has occurred even if we don't",
    "start": "2153460",
    "end": "2160300"
  },
  {
    "text": "know what the technique is all we're looking for is an application that's being downloaded by the Safari sandbox",
    "start": "2160300",
    "end": "2165640"
  },
  {
    "text": "broker and yet somehow came away without a quarantine attribute and really I think this highlights the beauty of",
    "start": "2165640",
    "end": "2170800"
  },
  {
    "text": "these behavioral detections because they can allow us to pick up on techniques that we haven't even uncovered yet",
    "start": "2170800",
    "end": "2179280"
  },
  {
    "text": "so that kind of wraps up our talk uh what we show today is simply one piece of tooling that feeds off events",
    "start": "2180280",
    "end": "2186640"
  },
  {
    "text": "provided by the endpoint security framework but what's great about ESF is that Apple can focus on providing",
    "start": "2186640",
    "end": "2192820"
  },
  {
    "text": "visibility into the operating system and developers can get the power to decide what should be done with this",
    "start": "2192820",
    "end": "2198400"
  },
  {
    "text": "information and build detections engines as well as anything else they can think of more than anything it's just nice to",
    "start": "2198400",
    "end": "2204820"
  },
  {
    "text": "have these events that we use come from that that used to come from various",
    "start": "2204820",
    "end": "2210040"
  },
  {
    "text": "complex sources now be streamlined in an organized fashion from Apple so we can focus on using the events rather than",
    "start": "2210040",
    "end": "2217119"
  },
  {
    "text": "having to worry about creating them ourselves and that's what we had thanks so much for having us",
    "start": "2217119",
    "end": "2224500"
  },
  {
    "text": "foreign",
    "start": "2224500",
    "end": "2226740"
  },
  {
    "text": "[Music]",
    "start": "2231200",
    "end": "2234310"
  }
]