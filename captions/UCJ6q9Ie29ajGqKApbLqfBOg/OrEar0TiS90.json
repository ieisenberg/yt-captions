[
  {
    "start": "0",
    "end": "102000"
  },
  {
    "text": "thank you for the last nine years we've underestimated the impact of a whole",
    "start": "30",
    "end": "6000"
  },
  {
    "text": "class of vulnerabilities in PHP hundreds probably thousands of instances of this",
    "start": "6000",
    "end": "11639"
  },
  {
    "text": "issue have been found and a simple behavior in PHP exposes them to",
    "start": "11639",
    "end": "17070"
  },
  {
    "text": "exploitation through on serialization my name is Sam and I spend a lot of my time",
    "start": "17070",
    "end": "23699"
  },
  {
    "text": "attacking web applications and so I always ask myself what vulnerabilities",
    "start": "23699",
    "end": "30060"
  },
  {
    "text": "does this app have and what can you do with the vulnerabilities and the research I'm going to talk about today",
    "start": "30060",
    "end": "36420"
  },
  {
    "text": "doesn't really affect the first part of that question so I won't be introducing any new types of vulnerabilities but",
    "start": "36420",
    "end": "42930"
  },
  {
    "text": "I'll be demonstrating a new exploitation technique which should hopefully give",
    "start": "42930",
    "end": "48059"
  },
  {
    "text": "you guys a surprising answer to the second part of the question what can you do with certain vulnerabilities before I",
    "start": "48059",
    "end": "55410"
  },
  {
    "text": "introduce my own research I think it's important to say that this is really just a tiny addition to some wonderful",
    "start": "55410",
    "end": "60780"
  },
  {
    "text": "research done by Stephan essa almost ten years ago he discovered this on",
    "start": "60780",
    "end": "66689"
  },
  {
    "text": "serialization vulnerability and came up with a really unique way to exploit it",
    "start": "66689",
    "end": "72320"
  },
  {
    "text": "so I'm not going to go into a lot of detail about serialization and on",
    "start": "72320",
    "end": "78150"
  },
  {
    "text": "serialization but really briefly for anyone who doesn't know what it is it's a process by which internal objects in",
    "start": "78150",
    "end": "85590"
  },
  {
    "text": "PHP are converted into a string representation which can be passed over",
    "start": "85590",
    "end": "91140"
  },
  {
    "text": "the wire or stored in a database and then uncie realization can convert that representation back into an instance of",
    "start": "91140",
    "end": "98280"
  },
  {
    "text": "the object now obviously the examples on the slide are really simple so there's an integer",
    "start": "98280",
    "end": "103829"
  },
  {
    "start": "102000",
    "end": "102000"
  },
  {
    "text": "and a string but it can represent far more complicated objects and what Stefan",
    "start": "103829",
    "end": "109290"
  },
  {
    "start": "108000",
    "end": "108000"
  },
  {
    "text": "SR realized was that you can use this technique called property orientated programming which is very similar to",
    "start": "109290",
    "end": "115710"
  },
  {
    "text": "return orientated programming in store native code to reuse certain bits of",
    "start": "115710",
    "end": "122369"
  },
  {
    "text": "code which are already loaded or accessible to the application and chain them together to cause some malicious",
    "start": "122369",
    "end": "128399"
  },
  {
    "text": "action to occur and to me his research was years ahead of its time so if we look at the",
    "start": "128399",
    "end": "134760"
  },
  {
    "text": "corresponding issue in Java people sort of started talking about it in about",
    "start": "134760",
    "end": "139800"
  },
  {
    "text": "2011 and it wasn't until a couple of years ago when Christopher Hoff I",
    "start": "139800",
    "end": "145890"
  },
  {
    "text": "released the tool why so serial that we really started to see widespread exploitation whereas the issue of stefan",
    "start": "145890",
    "end": "153630"
  },
  {
    "text": "SR introduced it in PHP already came with sort of example payloads in widely",
    "start": "153630",
    "end": "159660"
  },
  {
    "text": "deployed libraries and was essentially fully formed in his original work so the",
    "start": "159660",
    "end": "168870"
  },
  {
    "text": "the details here are essentially how the issue is exploited so when the target application uncie realises the malicious",
    "start": "168870",
    "end": "176150"
  },
  {
    "text": "serialized object that we've given it this will cause certain what PHP cause",
    "start": "176150",
    "end": "181320"
  },
  {
    "text": "magic methods to execute so there's one called underscore underscore wakeup which will occur whenever an object Sun",
    "start": "181320",
    "end": "188700"
  },
  {
    "text": "serialized and also there's a garbage collector which will cause the method",
    "start": "188700",
    "end": "193920"
  },
  {
    "text": "destruct to execute in the conventional line serialization issue something is",
    "start": "193920",
    "end": "201510"
  },
  {
    "text": "going to be done with that data so the application is deliberately uncy realized something and is expecting a",
    "start": "201510",
    "end": "206880"
  },
  {
    "text": "certain type of data so it's also quite easy to trigger magic methods like to string or other similar things to that",
    "start": "206880",
    "end": "215720"
  },
  {
    "text": "essentially at this point all if you don't know anything about on serialization I just need you to accept",
    "start": "215720",
    "end": "221220"
  },
  {
    "text": "that it's really bad to unsee realized attacker controlled data so this is the",
    "start": "221220",
    "end": "226620"
  },
  {
    "text": "agenda for the talk and the first thing I'm going to discuss is something called stream wrappers and we'll focus on on",
    "start": "226620",
    "end": "232530"
  },
  {
    "text": "this specific stream wrapper called the far stream wrapper we'll look at the file format where far is a type of",
    "start": "232530",
    "end": "238830"
  },
  {
    "text": "archive so it's supposed to be the PHP equivalent to the jar Java archive and",
    "start": "238830",
    "end": "246360"
  },
  {
    "text": "we'll look at the file format for a far archive we'll look at something I've called far planting so that's getting a",
    "start": "246360",
    "end": "252390"
  },
  {
    "text": "far archive onto your target looking at any methods that might work beyond",
    "start": "252390",
    "end": "257669"
  },
  {
    "text": "simply uploading a file identifying the type of vulnerabilities that are effective",
    "start": "257669",
    "end": "263060"
  },
  {
    "text": "by this there's a tool called PHP GGC which is essentially the PHP equivalent",
    "start": "263060",
    "end": "269120"
  },
  {
    "text": "of Y so serial and the authors kindly given me permission to release a branch",
    "start": "269120",
    "end": "275180"
  },
  {
    "text": "alongside this talk which implements the techniques I'll be talking about but it uses that the same payloads which are",
    "start": "275180",
    "end": "281510"
  },
  {
    "text": "already there but can encapsulate them in this far file format the second half",
    "start": "281510",
    "end": "286639"
  },
  {
    "text": "of the presentation is largely looking at some real-world case studies I'll talk briefly about how we might defend",
    "start": "286639",
    "end": "292430"
  },
  {
    "text": "against this issue and a few things I'd like you to take away from the talk so",
    "start": "292430",
    "end": "298840"
  },
  {
    "text": "largely the first part of this talk is just going through stuff in the PHP manual to explain how I found out the",
    "start": "298840",
    "end": "307700"
  },
  {
    "text": "behavior that I mentioned earlier and I found this xkcd comic which I thought",
    "start": "307700",
    "end": "312740"
  },
  {
    "text": "was particularly apt if it doesn't make a lot of sense now hopefully when I've shown you a few sections of the manual",
    "start": "312740",
    "end": "319190"
  },
  {
    "text": "you'll begin to see why so this is Stream wrappers as they're defined in",
    "start": "319190",
    "end": "324740"
  },
  {
    "start": "321000",
    "end": "321000"
  },
  {
    "text": "the PHP manual and essentially they're a an interesting feature which causes",
    "start": "324740",
    "end": "332150"
  },
  {
    "text": "certain complex functionality to kick in from any file operation so they should",
    "start": "332150",
    "end": "339169"
  },
  {
    "text": "be quite familiar to anyone who's done sort of exploit development or web app testing before because they're used in",
    "start": "339169",
    "end": "344960"
  },
  {
    "text": "lots of different types of vulnerabilities so these are all the Stream wrappers which are enabled in PHP",
    "start": "344960",
    "end": "352370"
  },
  {
    "text": "by default and I've sort of grouped four of them as the remote stream wrappers so",
    "start": "352370",
    "end": "360340"
  },
  {
    "text": "provided this PHP any setting allow URL F open is true then we can access remote",
    "start": "360340",
    "end": "366950"
  },
  {
    "text": "files as if they're local files simply by supplying for instance the HTTP path or an FTP path I've put data into that",
    "start": "366950",
    "end": "375260"
  },
  {
    "text": "group although it's not strictly remote obviously you you would include the data that you wanted to use in the URL but it",
    "start": "375260",
    "end": "381770"
  },
  {
    "text": "also requires this setting to be true so a simple example of where that's used in",
    "start": "381770",
    "end": "388220"
  },
  {
    "text": "exploitation is turning a local file include into a remote file include now there's another PHP any setting which",
    "start": "388220",
    "end": "395670"
  },
  {
    "text": "he controls whether that works you also need allow URL include I think to be set",
    "start": "395670",
    "end": "401490"
  },
  {
    "text": "to true but this is also sort of this behavior is what makes a larger number",
    "start": "401490",
    "end": "407460"
  },
  {
    "text": "of server-side request forgery issues exist so if we have control of the",
    "start": "407460",
    "end": "413310"
  },
  {
    "text": "variable that's used in a call to file get contents and we give it an HTTP path or an FTP path then it will go off and",
    "start": "413310",
    "end": "420060"
  },
  {
    "text": "remotely retrieve something and obviously that could be an issue and it's the same behavior that's used for",
    "start": "420060",
    "end": "426780"
  },
  {
    "text": "any external communication from an xxe issue the next interesting stream",
    "start": "426780",
    "end": "432510"
  },
  {
    "text": "wrapper is the PHP stream wrapper one way this has been used in a number of",
    "start": "432510",
    "end": "438840"
  },
  {
    "text": "exploits is if we have PHP code on slash / input that kind of grabs standard i/o",
    "start": "438840",
    "end": "444240"
  },
  {
    "text": "and treats it as if it's a file so if we're in a web server web application scenario that's generally what you've",
    "start": "444240",
    "end": "450510"
  },
  {
    "text": "posted to the page but it will be treated as if it's a file if you have a",
    "start": "450510",
    "end": "456060"
  },
  {
    "text": "local file include issue and you want to read the source code of a file obviously if you try to include a PHP file that",
    "start": "456060",
    "end": "462720"
  },
  {
    "text": "will be executed but this stream wrapper has this interesting feature called filters so we could basics before encode",
    "start": "462720",
    "end": "470940"
  },
  {
    "text": "a file before it's included and then decode that on our end and read the source code from a file and as Stefan",
    "start": "470940",
    "end": "477810"
  },
  {
    "text": "essa made the really clever use of this filter feature in a certain scenario and one of his first unsee realization",
    "start": "477810",
    "end": "484830"
  },
  {
    "text": "exploits so he managed to put together a gadget chain which resulted in writing",
    "start": "484830",
    "end": "490650"
  },
  {
    "text": "some data to a file but this was prefixed with this sort of PHP Die command which would prevent any anything",
    "start": "490650",
    "end": "497730"
  },
  {
    "text": "after that from running but if we simply base64 decode what's being written to",
    "start": "497730",
    "end": "503790"
  },
  {
    "text": "the file then that would sort of nullify this this sequence and he could execute code the next stream wrapper there's one",
    "start": "503790",
    "end": "511980"
  },
  {
    "text": "called glob which whenever I'm looking through these I think is going to be really useful and sort of allow you to get directory listings but it doesn't",
    "start": "511980",
    "end": "519270"
  },
  {
    "text": "work the same as the others so you can't file get contents on a glob URL and get",
    "start": "519270",
    "end": "524640"
  },
  {
    "text": "a listing of files this is the example they give him the manual so they use a directory iterator with a",
    "start": "524640",
    "end": "530850"
  },
  {
    "text": "with a glob URL or URI and similarly",
    "start": "530850",
    "end": "536580"
  },
  {
    "text": "each stream rapper kind of has a list of what features it supports and glob literally supports none of them okay so",
    "start": "536580",
    "end": "543780"
  },
  {
    "text": "then there's two stream rappers left which these are you know of the ones enabled by default and one is dead live",
    "start": "543780",
    "end": "549210"
  },
  {
    "text": "and one is far and these are both for dealing with archive files and so",
    "start": "549210",
    "end": "554270"
  },
  {
    "text": "looking at them you know very briefly they look like they'll be quite boring maybe there'll be some issues with the",
    "start": "554270",
    "end": "560340"
  },
  {
    "text": "native code and we can sort of give a corrupted archive or a maliciously constructed archive and try to hijack",
    "start": "560340",
    "end": "567990"
  },
  {
    "text": "the system that way exploiting an issue like that's likely to be quite difficult",
    "start": "567990",
    "end": "573060"
  },
  {
    "text": "in the presence of modern mitigation sort of a SLR and depth and things like that obviously I wouldn't be giving this",
    "start": "573060",
    "end": "580320"
  },
  {
    "text": "talk if we finished there so what happened is I had a more detailed look at this far wrapper because I've never",
    "start": "580320",
    "end": "588270"
  },
  {
    "text": "heard of the file format before you know what's actually in a far archive so immediately upon looking at the elements",
    "start": "588270",
    "end": "594720"
  },
  {
    "text": "of the archive and again this is another excerpt from the manual the first thing they list is in an archive is called the",
    "start": "594720",
    "end": "601290"
  },
  {
    "text": "stub and the stub contains PHP code which you know anyone doing offensive",
    "start": "601290",
    "end": "607230"
  },
  {
    "text": "security that immediately looks interesting I'd love to say that the stuff I'm gonna talk about today I sort",
    "start": "607230",
    "end": "613890"
  },
  {
    "text": "of did some complex code analysis and and found the issue but to be honest I read the manual and tried some silly",
    "start": "613890",
    "end": "620160"
  },
  {
    "text": "stuff and one silly thing worked so the first anything I tried was to",
    "start": "620160",
    "end": "625560"
  },
  {
    "text": "write a simple test program to generate one of these archives with the stub set to some code to just echo out something",
    "start": "625560",
    "end": "632400"
  },
  {
    "text": "if the stub was running and then tried accessing a file within that archive",
    "start": "632400",
    "end": "637410"
  },
  {
    "text": "through the stream wrapper and unsurprisingly the stub doesn't execute",
    "start": "637410",
    "end": "642690"
  },
  {
    "text": "and just to sort of confirm everything was working right I executed that archive and the stub indeed gets",
    "start": "642690",
    "end": "649590"
  },
  {
    "text": "executed and as far as I can tell that's actually the only way to activate the stub so you would need one of these file",
    "start": "649590",
    "end": "656220"
  },
  {
    "text": "files to be executed which would mean essentially you know if I could execute",
    "start": "656220",
    "end": "661440"
  },
  {
    "text": "a file file probably execute a PHP file so it's not buying me anything but not wanting to be",
    "start": "661440",
    "end": "667860"
  },
  {
    "text": "deterred we look at the next element in all fire files and it has something called a manifest and there's another",
    "start": "667860",
    "end": "673529"
  },
  {
    "text": "page in the manual which lists what's in a manifest and there was one thing which immediately grabbed my attention so a",
    "start": "673529",
    "end": "679709"
  },
  {
    "text": "manifest can contain serialized metadata which is serialized in the standard PHP",
    "start": "679709",
    "end": "685800"
  },
  {
    "text": "form so again I tried something stupid a simple test program which defines a",
    "start": "685800",
    "end": "693480"
  },
  {
    "text": "class called test object and sets the metadata to an instance of this class then I ran another test program which",
    "start": "693480",
    "end": "700529"
  },
  {
    "text": "defines this class again but this time includes a destructor so that if this object is uncivilized and then destroyed",
    "start": "700529",
    "end": "708240"
  },
  {
    "text": "we would see the destructor get executed and so I tried my silly test program and",
    "start": "708240",
    "end": "714600"
  },
  {
    "text": "much to my surprise it actually worked and I guess if I hadn't told you all this was coming",
    "start": "714600",
    "end": "719970"
  },
  {
    "text": "you'd probably go something like this so sort of to confirm everything was",
    "start": "719970",
    "end": "725670"
  },
  {
    "text": "working how I expected I tried changing a couple of things so I wrote another test test program instead of grabbing",
    "start": "725670",
    "end": "733889"
  },
  {
    "text": "the contents of a file let's just check if that file exists now to me this seems like probably the least significant file",
    "start": "733889",
    "end": "740490"
  },
  {
    "text": "operation all you would think the least risky is a developer like the worst thing that's going to happen is someone",
    "start": "740490",
    "end": "745559"
  },
  {
    "text": "can figure out if a local file exists or not similarly we can change the path",
    "start": "745559",
    "end": "751680"
  },
  {
    "text": "after the name of the archive to just some gibberish to see what it will say",
    "start": "751680",
    "end": "756990"
  },
  {
    "text": "to a file that clearly doesn't exist and in both cases the destructor runs again and so hopefully that Manion that",
    "start": "756990",
    "end": "764819"
  },
  {
    "text": "cartoon now makes a little bit more sense so sort of from this information a",
    "start": "764819",
    "end": "771389"
  },
  {
    "start": "768000",
    "end": "768000"
  },
  {
    "text": "really obvious approach to an attack emerges there'll be two steps if we can",
    "start": "771389",
    "end": "776759"
  },
  {
    "text": "get one of these archives onto the target and then trigger some operation with the stream wrapper upon it we can",
    "start": "776759",
    "end": "782189"
  },
  {
    "text": "uncie realize sort of an arbitrary payload this is quite similar to local file include and indeed later I'll talk",
    "start": "782189",
    "end": "789809"
  },
  {
    "text": "about some of the inspiration we can take from different ways people have come up with or",
    "start": "789809",
    "end": "795430"
  },
  {
    "text": "exploiting local file include for people who are more familiar with the",
    "start": "795430",
    "end": "801070"
  },
  {
    "start": "798000",
    "end": "798000"
  },
  {
    "text": "traditional issue these are kind of this a couple of small things I bear in mind",
    "start": "801070",
    "end": "806560"
  },
  {
    "text": "when we're exploiting this issue so I kind of hinted at it earlier when this happens the application has had no",
    "start": "806560",
    "end": "813220"
  },
  {
    "text": "intention to unsee realized our data so it's not going to do anything with it it just sits there so the only sort of",
    "start": "813220",
    "end": "819760"
  },
  {
    "text": "payloads which we can use have to either be started by wake up or destruct and",
    "start": "819760",
    "end": "825720"
  },
  {
    "text": "there's this unusual behavior with the destruct change that for whatever reason the object is garbage collected I think",
    "start": "825720",
    "end": "832990"
  },
  {
    "text": "probably after the rest of the application has run but for some reason it sort of lost the context of the",
    "start": "832990",
    "end": "839020"
  },
  {
    "text": "application so any file operations that we do in that chain have to use absolute pass and the final Empire no sorry I've",
    "start": "839020",
    "end": "847600"
  },
  {
    "text": "skipped an elephant an elephant an element there'd be the file contents are",
    "start": "847600",
    "end": "854140"
  },
  {
    "text": "the file contents bol so there's a there's a signature which it says is optional but again this is a PHP any",
    "start": "854140",
    "end": "860770"
  },
  {
    "text": "setting which by default is set so that we need a signature so as an attacker that's not optional for us hopefully by",
    "start": "860770",
    "end": "869320"
  },
  {
    "start": "867000",
    "end": "867000"
  },
  {
    "text": "this point you've got bored of the manual and will trust me if I tell you a few more details about the file so so",
    "start": "869320",
    "end": "875080"
  },
  {
    "text": "there's three valid file formats for for archives there's this sort of base file format there's a tar version of the",
    "start": "875080",
    "end": "881770"
  },
  {
    "text": "format and a zip version of the format but for the rest of the talk I'm going to ignore the zip format it could be",
    "start": "881770",
    "end": "887350"
  },
  {
    "text": "useful if we're targeting an application which has some legitimate functionality which allows us to upload a zip file but",
    "start": "887350",
    "end": "894220"
  },
  {
    "text": "the other two offers some interesting flexibility that I wanted to talk about so the first one we'll start with is the",
    "start": "894220",
    "end": "900070"
  },
  {
    "text": "base file format and I've done sort of a hex dump of one of those test files that",
    "start": "900070",
    "end": "905800"
  },
  {
    "text": "I generated with these test programs and we can see the different elements highlighted of a fire archive so in",
    "start": "905800",
    "end": "912670"
  },
  {
    "text": "terms of uncie realization the the green bit here is the serialized data in the standard PHP form but what I sort of",
    "start": "912670",
    "end": "919209"
  },
  {
    "text": "really want you to notice from this is that the stub although the stubs no use for running code it's the first thing in",
    "start": "919209",
    "end": "926440"
  },
  {
    "text": "the archive and we can put anything in there as long as we have this small piece of PHP code so we can prefix this but then",
    "start": "926440",
    "end": "933940"
  },
  {
    "text": "I think we want and it will still be a valid fire archive provided that we calculate a signature and everything",
    "start": "933940",
    "end": "939100"
  },
  {
    "text": "like that so I think this is saying essentially the same as I just said so",
    "start": "939100",
    "end": "944830"
  },
  {
    "text": "so we can make a pretty good fake of any file format by putting data in front of",
    "start": "944830",
    "end": "950230"
  },
  {
    "text": "the fire archive one important detail is that we literally can't put anything after it so the signature was the last",
    "start": "950230",
    "end": "956590"
  },
  {
    "text": "thing in the archive and literally any single byte after that G BMB will cause",
    "start": "956590",
    "end": "962260"
  },
  {
    "text": "it to no longer be a valid archive so there's some circumstances in which flexibility elsewhere would be useful to",
    "start": "962260",
    "end": "969490"
  },
  {
    "text": "us and tar is quite a complicated file format I'm not going to go into the full",
    "start": "969490",
    "end": "974860"
  },
  {
    "start": "970000",
    "end": "970000"
  },
  {
    "text": "details of tar but these are the details that are interesting to us in terms of this attack and essentially particularly",
    "start": "974860",
    "end": "981880"
  },
  {
    "text": "these two details so the first a hundred bytes of a sort of tar encapsulated fire",
    "start": "981880",
    "end": "988030"
  },
  {
    "text": "archive and indeed any tar file the file name of the first file so there's no",
    "start": "988030",
    "end": "993340"
  },
  {
    "text": "reason we shouldn't be able to change that and the end of the archive is marked by a thousand and twenty four now",
    "start": "993340",
    "end": "999160"
  },
  {
    "text": "bytes and critically everything after this is ignored so what we can do is",
    "start": "999160",
    "end": "1005310"
  },
  {
    "text": "take a simple this is a simple sort of test archive that are generated and I can change the file name provided that I",
    "start": "1005310",
    "end": "1012870"
  },
  {
    "text": "fix up the checksum and I'm going to explain to you what I've changed that",
    "start": "1012870",
    "end": "1018420"
  },
  {
    "text": "file name too so the first two bytes are a jpg header the second two bytes are",
    "start": "1018420",
    "end": "1023430"
  },
  {
    "text": "saying this is a common and the next two bytes are the length of that comment now I've set the length so it encapsulates",
    "start": "1023430",
    "end": "1028920"
  },
  {
    "text": "the whole archive including the 1024 zero bytes at the end and then we can",
    "start": "1028920",
    "end": "1034949"
  },
  {
    "text": "simply carry on the jpg file and be both a valid file / tar archive and a valid",
    "start": "1034949",
    "end": "1042089"
  },
  {
    "text": "JPEG so I'm just going to sort of quickly try and demonstrate that with the picture so on my desktop I've got a",
    "start": "1042089",
    "end": "1052560"
  },
  {
    "start": "1043000",
    "end": "1043000"
  },
  {
    "text": "picture of my cat but if I change the filename of this",
    "start": "1052560",
    "end": "1057810"
  },
  {
    "text": "picture I can remember I wants to tell me",
    "start": "1057810",
    "end": "1065650"
  },
  {
    "text": "something oh yeah so it's got this unusually named file in it but it's also",
    "start": "1065650",
    "end": "1072430"
  },
  {
    "text": "got all the elements which make up a fire archive so it's got the stub and",
    "start": "1072430",
    "end": "1078660"
  },
  {
    "text": "it's got the metadata which is in the standard PHP serialized format and it's",
    "start": "1078660",
    "end": "1087310"
  },
  {
    "text": "got the signature which isn't really sort of readable there so that file is",
    "start": "1087310",
    "end": "1094200"
  },
  {
    "text": "you know a perfect polyglot it's it is both a valid JPEG and a valid archive",
    "start": "1094200",
    "end": "1101520"
  },
  {
    "text": "okay so I mentioned sort of thinking about other ways we might get one of these files onto the target if we can't",
    "start": "1103500",
    "end": "1109930"
  },
  {
    "start": "1104000",
    "end": "1104000"
  },
  {
    "text": "just stop load it we can look at a few tricks people have developed for a local file includes so Brett Moore came up",
    "start": "1109930",
    "end": "1118480"
  },
  {
    "text": "with this technique using PHP info where if you post anything to a PHP file that",
    "start": "1118480",
    "end": "1124990"
  },
  {
    "text": "so if you post a file to a PHP page it will save a copy of that file in the",
    "start": "1124990",
    "end": "1131800"
  },
  {
    "text": "temporary directory and populate the dollar underscore files variable and PHP",
    "start": "1131800",
    "end": "1138250"
  },
  {
    "text": "info gives you a dump of this file but once PHP info is finished running that file will be deleted but what you",
    "start": "1138250",
    "end": "1145000"
  },
  {
    "text": "can do is essentially sort of stall PHP info from returning everything and that",
    "start": "1145000",
    "end": "1150790"
  },
  {
    "text": "file sits there and you've got the name of it and similarly a guy could Jimmy Rams mark demonstrated that the entropy",
    "start": "1150790",
    "end": "1158950"
  },
  {
    "text": "basically isn't very good in windows in particular with its temporary files so it's not that difficult to brute-force",
    "start": "1158950",
    "end": "1165310"
  },
  {
    "text": "the name of a temporary file if we have some primitive like the one shown on the",
    "start": "1165310",
    "end": "1170830"
  },
  {
    "text": "slide where we can completely control a session variable then we can do something very similar to why I showed",
    "start": "1170830",
    "end": "1177430"
  },
  {
    "text": "with the JPEG provided within the first 100 bytes we can cause the session file",
    "start": "1177430",
    "end": "1182830"
  },
  {
    "text": "to both be the valid session file and a valid archive and being a reference that through the",
    "start": "1182830",
    "end": "1188490"
  },
  {
    "text": "stream wrapper there's a couple of other ones I've listed there which are things I haven't managed to pull off but I suspect a possible so on some",
    "start": "1188490",
    "end": "1196950"
  },
  {
    "text": "architectures proc self you know older file well the things that look like",
    "start": "1196950",
    "end": "1202140"
  },
  {
    "text": "files to PHP within proc so will be populated with different things so proc",
    "start": "1202140",
    "end": "1208260"
  },
  {
    "text": "self environs sometimes gets the user agent and things like that and log files",
    "start": "1208260",
    "end": "1213740"
  },
  {
    "text": "should be exploitable but it's quite tricky so if we were going to use the base file format and we'd need to be",
    "start": "1213740",
    "end": "1220620"
  },
  {
    "text": "writing right to the very last bite of the log file even a new line would would break our archive if we went to do the",
    "start": "1220620",
    "end": "1228270"
  },
  {
    "text": "tar trick we're going to need to write an awful lot of null bytes to a log file which you know might not be possible and",
    "start": "1228270",
    "end": "1233940"
  },
  {
    "text": "in both cases we need to know the entire contents of the file to have valid",
    "start": "1233940",
    "end": "1239580"
  },
  {
    "text": "signatures okay so in terms of identifying vulnerabilities like I mentioned we're not really talking about",
    "start": "1239580",
    "end": "1245820"
  },
  {
    "start": "1241000",
    "end": "1241000"
  },
  {
    "text": "any new types of vulnerability it's it's exploiting what are essentially xxe",
    "start": "1245820",
    "end": "1251340"
  },
  {
    "text": "issues or server side request forgery so the one interesting axe aspect with xxe",
    "start": "1251340",
    "end": "1257820"
  },
  {
    "text": "well both of them essentially is that you don't need any outbound connectivity",
    "start": "1257820",
    "end": "1263400"
  },
  {
    "text": "and you can even specifically there's a live XML option which disables network connectivity but far is a local file you",
    "start": "1263400",
    "end": "1271020"
  },
  {
    "text": "know it's all to do with local file so it won't prevent you using the file stream wrapper ftp stream wrapper is far",
    "start": "1271020",
    "end": "1280680"
  },
  {
    "text": "better than the HTTP one for detecting this issue because it supports many more",
    "start": "1280680",
    "end": "1285840"
  },
  {
    "text": "operations so if you call file exists on a HTTP URL that will do nothing and just return false but if you call file exists",
    "start": "1285840",
    "end": "1293160"
  },
  {
    "text": "with an FTP URL it will go out and connect to the FTP server and I'll sort",
    "start": "1293160",
    "end": "1298680"
  },
  {
    "text": "of I'll demonstrate that with one of the issues to see you know it's quite an easy way to try and to take these issues",
    "start": "1298680",
    "end": "1304560"
  },
  {
    "text": "in a black box scenario if we've got no out-of-band communication so either",
    "start": "1304560",
    "end": "1309900"
  },
  {
    "text": "allow URL F open is set to false or there's no path to our system either directly or through DNS then we can",
    "start": "1309900",
    "end": "1317370"
  },
  {
    "text": "sometimes look at how the file stream wrapper Caves so if that works then it's likely that we're triggering stream rappers so",
    "start": "1317370",
    "end": "1326530"
  },
  {
    "text": "PHP GDC which I mentioned earlier is essentially the PHP equivalent of why",
    "start": "1326530",
    "end": "1331990"
  },
  {
    "text": "so serious oh it's a tool for generating payloads which has a lot of almost like a database of known payloads within it",
    "start": "1331990",
    "end": "1338190"
  },
  {
    "text": "it's developed by a guy called Charles fall and he kindly gave me permission to",
    "start": "1338190",
    "end": "1343600"
  },
  {
    "text": "branch it so what I've done is just added a really simple tool on to it called fire GGC which allows you to put",
    "start": "1343600",
    "end": "1350410"
  },
  {
    "text": "these payloads into a fire using one of the two techniques I mentioned earlier there's this PHP any setting which we",
    "start": "1350410",
    "end": "1358420"
  },
  {
    "text": "need to set on our local system to actually be able to write too far archives because we let PHP do all the",
    "start": "1358420",
    "end": "1363580"
  },
  {
    "text": "work in terms of generating the archive file I've made the slight change to the",
    "start": "1363580",
    "end": "1370240"
  },
  {
    "start": "1366000",
    "end": "1366000"
  },
  {
    "text": "payloads that are included with it at the moment because most of them no longer work with PHP 7.2 as a defense",
    "start": "1370240",
    "end": "1377470"
  },
  {
    "text": "in-depth mechanism they sort of got rid of something that people used to often use in exploits which is they limit what",
    "start": "1377470",
    "end": "1384100"
  },
  {
    "text": "functions you can call dynamically so for instance you can't call it Val or include but for a long time they left it",
    "start": "1384100",
    "end": "1390850"
  },
  {
    "text": "so you could dynamically call assert with a string and that code would get evaluated but that doesn't happen",
    "start": "1390850",
    "end": "1396250"
  },
  {
    "text": "anymore as a sort of quick fix I've changed everything to use pass through which runs a system command and spits",
    "start": "1396250",
    "end": "1403120"
  },
  {
    "text": "out the output on some sort of lock down systems commands like pass through or",
    "start": "1403120",
    "end": "1408700"
  },
  {
    "text": "exit or other sort of commands which actually execute system commands will",
    "start": "1408700",
    "end": "1414160"
  },
  {
    "text": "have been sort of locked down and prevented from running it seems to me that nearly every large application now",
    "start": "1414160",
    "end": "1421300"
  },
  {
    "text": "uses a library manager called composer and that includes a simple wrapper for include so suddenly we can dynamically",
    "start": "1421300",
    "end": "1428140"
  },
  {
    "text": "call include so if we're in that scenario where we want to run PHP code because we can't run one simple command",
    "start": "1428140",
    "end": "1435310"
  },
  {
    "text": "to do what we want to do we can consider calling this this function as I mentioned if we're in a destruction",
    "start": "1435310",
    "end": "1442320"
  },
  {
    "text": "we'll have to use absolute pass so what we might do is start off by including a",
    "start": "1442320",
    "end": "1447730"
  },
  {
    "text": "TC password and as long as that works we can start trying to brute-force the name of either some fire",
    "start": "1447730",
    "end": "1453620"
  },
  {
    "text": "we've uploaded or if we want to look clever we could include the code into the far archive and and grab it from",
    "start": "1453620",
    "end": "1460130"
  },
  {
    "text": "there okay so there's a bunch of case studies I'm going to go through and with",
    "start": "1460130",
    "end": "1468860"
  },
  {
    "start": "1461000",
    "end": "1461000"
  },
  {
    "text": "all of them I found the issue through manual code analysis two of them could",
    "start": "1468860",
    "end": "1474050"
  },
  {
    "text": "have really easily been found just by using the ftp wrapper one of them is a little bit more subtle and it might be a",
    "start": "1474050",
    "end": "1482390"
  },
  {
    "text": "bit boring but all of them are sort of in scenarios where i can just upload a file onto the target so the first one is",
    "start": "1482390",
    "end": "1488390"
  },
  {
    "text": "a CMS called typo3 they fix this issue in the most recent version it's the only",
    "start": "1488390",
    "end": "1495260"
  },
  {
    "text": "issue I'm going to look at today that's actually been fixed and many things to a guy called Oliver Haider who basically",
    "start": "1495260",
    "end": "1500920"
  },
  {
    "text": "looked after fixing it and they've done quite an interesting thing as well they've created their own custom faster",
    "start": "1500920",
    "end": "1507710"
  },
  {
    "text": "as well as sort of fixing the underlying issue which I identified which allowed you to activate the stream wrappers they've written a custom file wrapper to",
    "start": "1507710",
    "end": "1515690"
  },
  {
    "text": "prevent the system one from being abused in any scenario so the the path from",
    "start": "1515690",
    "end": "1522320"
  },
  {
    "text": "user data to the vulnerability is recently complicated but the actual issue is fairly straightforward so what",
    "start": "1522320",
    "end": "1529640"
  },
  {
    "text": "happens when it's processing links sort of internally it tries to figure out what sort of file it's looking at and",
    "start": "1529640",
    "end": "1537880"
  },
  {
    "text": "the problem here is that after it's done all these checks at URL decodes the",
    "start": "1537880",
    "end": "1543740"
  },
  {
    "text": "value so what provided that we encode any colons it's not going to see",
    "start": "1543740",
    "end": "1548990"
  },
  {
    "text": "something as happy as being a URI with a scheme it's going to assume it's a local file and cool file exists on it so by",
    "start": "1548990",
    "end": "1556510"
  },
  {
    "text": "encoding we can we can cause it to activate the stream records so let's",
    "start": "1556510",
    "end": "1561590"
  },
  {
    "text": "have a quick look at the demo so the",
    "start": "1561590",
    "end": "1567380"
  },
  {
    "text": "first thing we need to do is generate a payload",
    "start": "1567380",
    "end": "1571870"
  },
  {
    "text": "like any sensible person I've got a bunch of pictures of cats in my pictures directory so what I'll do first so this",
    "start": "1579170",
    "end": "1590210"
  },
  {
    "text": "will list the payloads available in PHP GGC some of them use to string as the",
    "start": "1590210",
    "end": "1599180"
  },
  {
    "text": "starting point so they're no good for us but all the ones that use destructor wake up we can use with this technique",
    "start": "1599180",
    "end": "1604790"
  },
  {
    "text": "so what I'm going to do is generate a payload so I'm going to use cat 1 as the",
    "start": "1604790",
    "end": "1612860"
  },
  {
    "text": "input I'll output it as type O 3 I will use",
    "start": "1612860",
    "end": "1622570"
  },
  {
    "text": "guzzle / RC e 1 is the payload and I'm gonna try and run new name - a on the",
    "start": "1622750",
    "end": "1629240"
  },
  {
    "text": "target so that's been written to type O 3 jpg a moment in my pictures directory",
    "start": "1629240",
    "end": "1637180"
  },
  {
    "text": "I'm going to exploit the issue as admin which might seem a bit weird but so this",
    "start": "1637180",
    "end": "1643940"
  },
  {
    "text": "CMS sort of implements a fine-grained access model there's no standard roles and stuff set up",
    "start": "1643940",
    "end": "1649730"
  },
  {
    "text": "so the functionality we're abusing is certainly not only available to admins",
    "start": "1649730",
    "end": "1656649"
  },
  {
    "text": "so the first thing we need to do is simply upload that file whoever's doing",
    "start": "1657430",
    "end": "1666620"
  },
  {
    "text": "the other presentation is much fun the other Maya right so we you know we just",
    "start": "1666620",
    "end": "1673310"
  },
  {
    "text": "upload you know we're in a scenario where we're able to upload files into the application that appears as a JPEG",
    "start": "1673310",
    "end": "1681220"
  },
  {
    "text": "so I'm gonna go to any page and I'm going to add some content and I'm going",
    "start": "1681370",
    "end": "1687920"
  },
  {
    "text": "to add an image is only element which has a link property Danny",
    "start": "1687920",
    "end": "1693430"
  },
  {
    "text": "so actually what I'll do if I set up a",
    "start": "1693430",
    "end": "1698570"
  },
  {
    "text": "listener on another server",
    "start": "1698570",
    "end": "1702370"
  },
  {
    "text": "he's knit all right so that's listening on port 443 and provided that I encode",
    "start": "1707730",
    "end": "1718299"
  },
  {
    "text": "the colons and don't have stubby fingers",
    "start": "1718299",
    "end": "1726388"
  },
  {
    "text": "12:43 now if I've got this right when I",
    "start": "1737940",
    "end": "1746649"
  },
  {
    "text": "save this I've clearly got it wrong put it and I've lost track of my ip's this",
    "start": "1746649",
    "end": "1759010"
  },
  {
    "text": "is one of them yeah round papaji's so",
    "start": "1759010",
    "end": "1771220"
  },
  {
    "text": "the server I'm attacking is got 100 and I want it to contact dot one I want when",
    "start": "1771220",
    "end": "1778299"
  },
  {
    "text": "I say that this timer has connected to",
    "start": "1778299",
    "end": "1783370"
  },
  {
    "text": "us and if I pretend to be an FTP server they'll probably do it's basically",
    "start": "1783370",
    "end": "1794320"
  },
  {
    "text": "looking for the file in the URL that we gave it so we can see that stream wrappers are definitely activated there",
    "start": "1794320",
    "end": "1800880"
  },
  {
    "text": "if I go to my notes and get the file",
    "start": "1800880",
    "end": "1809830"
  },
  {
    "text": "path just going to intercept the",
    "start": "1809830",
    "end": "1817899"
  },
  {
    "text": "requests",
    "start": "1817899",
    "end": "1820710"
  },
  {
    "text": "now intercept the response to this request and hope for me at the top of it",
    "start": "1836150",
    "end": "1843600"
  },
  {
    "text": "is run new name - a so that's essentially the exploit working ok the",
    "start": "1843600",
    "end": "1860160"
  },
  {
    "text": "next example is in WordPress and when I first discovered this issue I sort of wanted to find an instance in it in a",
    "start": "1860160",
    "end": "1866700"
  },
  {
    "text": "fairly high profile app and thought you know WordPress was a good target and I assumed they would fix it fairly quickly",
    "start": "1866700",
    "end": "1873180"
  },
  {
    "text": "and I could move on and find some other examples and do a presentation but they",
    "start": "1873180",
    "end": "1878670"
  },
  {
    "text": "still haven't fixed it at this point and [Music] you know understanding this issue",
    "start": "1878670",
    "end": "1885990"
  },
  {
    "text": "obviously affects lots of applications so it's difficult to try to wait to talk about it because there's one instance in",
    "start": "1885990",
    "end": "1892650"
  },
  {
    "text": "the nap and I felt it had got to the point where it was irresponsible not to disclose if that makes sense",
    "start": "1892650",
    "end": "1898860"
  },
  {
    "text": "so this is my favorite vulnerability because it's more subtle than the others the vulnerabilities in some legacy",
    "start": "1898860",
    "end": "1906120"
  },
  {
    "text": "functionality for dealing with thumbnails and the problem is is in the",
    "start": "1906120",
    "end": "1912570"
  },
  {
    "text": "highlighted code so it calculates a variable called thumb file and then cause file exists on it and it",
    "start": "1912570",
    "end": "1919950"
  },
  {
    "text": "calculates the value of this variable by replacing within file the base name with",
    "start": "1919950",
    "end": "1924960"
  },
  {
    "text": "file with something now there's a bad assumption there which is that the base",
    "start": "1924960",
    "end": "1930210"
  },
  {
    "text": "name of the file only occurs in in the place where the base name is so we can",
    "start": "1930210",
    "end": "1936870"
  },
  {
    "text": "completely control this valid this value image data thumb and we can partially",
    "start": "1936870",
    "end": "1942300"
  },
  {
    "text": "control the value of file so file comes from get attached file get attach file",
    "start": "1942300",
    "end": "1950300"
  },
  {
    "text": "so if we look at the code from get attach file it in most circumstances it prepends the applications upload path",
    "start": "1950300",
    "end": "1958100"
  },
  {
    "text": "but there's certain circumstances in which it doesn't so if the value of file starts with a slash then it's an",
    "start": "1958100",
    "end": "1965130"
  },
  {
    "text": "absolute Linux path and it doesn't bother prepending but that's no use to us but if the file",
    "start": "1965130",
    "end": "1970990"
  },
  {
    "text": "starts with something that looks like an absolute windows path so a single character followed by colon forward slash then it also doesn't prepend this",
    "start": "1970990",
    "end": "1979150"
  },
  {
    "text": "value now despite the fact we're attacking a Linux system we can set this value to something that looks like a",
    "start": "1979150",
    "end": "1985480"
  },
  {
    "text": "Windows path in terms of the payload that we use to exploit this",
    "start": "1985480",
    "end": "1991210"
  },
  {
    "start": "1988000",
    "end": "1988000"
  },
  {
    "text": "so until WordPress 4.9 there was a publicly known payload to go from to",
    "start": "1991210",
    "end": "1997570"
  },
  {
    "text": "string to code execution and we'd simply basically add something to trigger a to",
    "start": "1997570",
    "end": "2004230"
  },
  {
    "text": "string from a destruct but that doesn't work anymore so we have to go looking for a new payload and wordpress is one",
    "start": "2004230",
    "end": "2011970"
  },
  {
    "text": "of the few PHP applications that doesn't have an autoloader so you're limited to the classes which are already loaded by",
    "start": "2011970",
    "end": "2018060"
  },
  {
    "text": "the application and this is one of the few classes that looked particularly interesting so they've got this class",
    "start": "2018060",
    "end": "2024330"
  },
  {
    "text": "called requests utility filtered iterator which is an array iterator so you can basically set this as the",
    "start": "2024330",
    "end": "2030780"
  },
  {
    "text": "iterator of an array and if you iterate through that array this code is triggered and this code calls a function",
    "start": "2030780",
    "end": "2037770"
  },
  {
    "text": "which is defined by a property so provided we can trigger something to go",
    "start": "2037770",
    "end": "2042870"
  },
  {
    "text": "through this array then we can execute arbitrary code I serve I looked around within system classes and any of the few",
    "start": "2042870",
    "end": "2050610"
  },
  {
    "text": "classes that were already loaded and I couldn't find something to do that so",
    "start": "2050610",
    "end": "2056070"
  },
  {
    "text": "the sort of next natural thing to do is to go and look at popular plugins and",
    "start": "2056070",
    "end": "2062639"
  },
  {
    "text": "WooCommerce which is commonly come you know it's a very common e-commerce cell to use WordPress and WooCommerce",
    "start": "2062640",
    "end": "2067830"
  },
  {
    "text": "together has a destructor which runs through a bunch of handles and is",
    "start": "2067830",
    "end": "2073379"
  },
  {
    "text": "supposed to just check if something's a resource and close the file but all we're really interested in is the fact",
    "start": "2073380",
    "end": "2078658"
  },
  {
    "text": "that it runs for e so let's have a look at that though",
    "start": "2078659",
    "end": "2083898"
  },
  {
    "text": "for this demo I've scripted most of it because I'm sure I would forget",
    "start": "2089210",
    "end": "2094429"
  },
  {
    "text": "something in my setup well I'm actually",
    "start": "2094429",
    "end": "2099529"
  },
  {
    "text": "gonna do first provided WordPress seems to run horribly slowly so I what I was",
    "start": "2099529",
    "end": "2119390"
  },
  {
    "text": "gonna do here and I may abandon was just load up WordPress and show you what user I'll be exploiting it as so it has quite",
    "start": "2119390",
    "end": "2126559"
  },
  {
    "text": "as well by default as a far simpler so a privilege model and you have in",
    "start": "2126559",
    "end": "2132319"
  },
  {
    "text": "WordPress you have unauthenticated subscriber author editor admin and we",
    "start": "2132319",
    "end": "2137630"
  },
  {
    "text": "can exploit this issue as an author so I've got a user set up called author to",
    "start": "2137630",
    "end": "2143599"
  },
  {
    "text": "exploit it now given that this isn't loading there's a good chance it's not going to work but I'll give it a try",
    "start": "2143599",
    "end": "2151150"
  },
  {
    "text": "thank you I always keep doing that",
    "start": "2159039",
    "end": "2164170"
  },
  {
    "text": "that's the problem yet",
    "start": "2164170",
    "end": "2168068"
  },
  {
    "text": "that's my favorite way to fail right so",
    "start": "2172660",
    "end": "2187460"
  },
  {
    "text": "this is the is version of WordPress and has the latest version of WooCommerce installed as a plugin but we're going to be",
    "start": "2187460",
    "end": "2193490"
  },
  {
    "text": "exploiting as this author user who has the role author and now I actually want",
    "start": "2193490",
    "end": "2205400"
  },
  {
    "text": "intercept one just so this runs through",
    "start": "2205400",
    "end": "2217580"
  },
  {
    "text": "quite a few requests to just set the various elements that we need to and the first thing it does is an XML RPC call",
    "start": "2217580",
    "end": "2224750"
  },
  {
    "text": "to upload a file so doing it via XML RPC",
    "start": "2224750",
    "end": "2230630"
  },
  {
    "text": "means that uploads of you know the value in the request is base64 encoded but we",
    "start": "2230630",
    "end": "2236630"
  },
  {
    "text": "can have a quick look at what that looks like so this basically is a standard",
    "start": "2236630",
    "end": "2241910"
  },
  {
    "text": "file format archive but it just has a few bytes in front of the stub that makes it look a tiny bit like a PHP file",
    "start": "2241910",
    "end": "2249670"
  },
  {
    "text": "now so it's uploaded the file the next",
    "start": "2249670",
    "end": "2255290"
  },
  {
    "text": "thing it does is log into the you know into the application through the web",
    "start": "2255290",
    "end": "2260420"
  },
  {
    "text": "interface because we need to grab a cookie so it does that you know we'll be",
    "start": "2260420",
    "end": "2266660"
  },
  {
    "text": "grabbing the cookie for access to the backend once it's got that cookie it's",
    "start": "2266660",
    "end": "2275330"
  },
  {
    "text": "going to access the URL to edit the post which corresponds to the media item that",
    "start": "2275330",
    "end": "2280400"
  },
  {
    "text": "we just uploaded and it needs to do this to get a nonce to do something else",
    "start": "2280400",
    "end": "2285580"
  },
  {
    "text": "so before we intercept the response to that in here so it's grabbing this nonce",
    "start": "2285580",
    "end": "2296510"
  },
  {
    "text": "which is a hidden value in a form so it can set the the file value in the thumb value to what it wants so this one is",
    "start": "2296510",
    "end": "2306590"
  },
  {
    "text": "setting the file name to Zed colon slash said so that's going to cause when that",
    "start": "2306590",
    "end": "2312380"
  },
  {
    "text": "replacement of the base name happens it's also going to replace the very start of the file name which allows us",
    "start": "2312380",
    "end": "2318050"
  },
  {
    "text": "to trigger the stream wrapper",
    "start": "2318050",
    "end": "2321580"
  },
  {
    "text": "and then it's setting the value of thumb to this far path now I mentioned that in",
    "start": "2326260",
    "end": "2334670"
  },
  {
    "text": "the payload we can't use relative paths but you'll see here you know when we're triggering the issue we can find the",
    "start": "2334670",
    "end": "2341359"
  },
  {
    "text": "relative path on our local system and this is a you know will be a valid attack on any system because we're",
    "start": "2341359",
    "end": "2346670"
  },
  {
    "text": "simply using you know a single dot so just the current directory and then",
    "start": "2346670",
    "end": "2351849"
  },
  {
    "text": "wp-content where we've uploaded the file so now we've set all those values when",
    "start": "2351849",
    "end": "2359270"
  },
  {
    "text": "we call this XML RPC method get meteor item it should do something interesting",
    "start": "2359270",
    "end": "2369910"
  },
  {
    "text": "so at the very end of this you'll see that I've run LS dash L so very quickly",
    "start": "2370390",
    "end": "2385480"
  },
  {
    "text": "this is the script and we could just change that to anything",
    "start": "2385480",
    "end": "2391089"
  },
  {
    "text": "to upload the file and triggers the staff and runs at one",
    "start": "2400470",
    "end": "2406170"
  },
  {
    "text": "okay so the final case study is in a library called TC PDF which seems to be",
    "start": "2415410",
    "end": "2420820"
  },
  {
    "start": "2416000",
    "end": "2416000"
  },
  {
    "text": "the standard library to convert HTML to a PDF in PHP so loads of applications",
    "start": "2420820",
    "end": "2426700"
  },
  {
    "text": "use this it's sort of developed by one guy who's been really helpful and I",
    "start": "2426700",
    "end": "2433330"
  },
  {
    "text": "think he's you know he's depreciated it and he's coming out with a new library but I think he's gonna fix this",
    "start": "2433330",
    "end": "2438780"
  },
  {
    "text": "hopefully very soon and released a new version so as I mentioned this is a very",
    "start": "2438780",
    "end": "2445510"
  },
  {
    "text": "common library to render into a PDF so it can be exposed either deliberately when you know by design we can edit the",
    "start": "2445510",
    "end": "2453220"
  },
  {
    "text": "HTML that's going to be put into a PDF but often in testing we find scenarios",
    "start": "2453220",
    "end": "2458530"
  },
  {
    "text": "where you can cross-site script into some HTML that's being sent to a PDF and that's a very common scenario for server",
    "start": "2458530",
    "end": "2464980"
  },
  {
    "text": "side request forgery so the vulnerability here is really simple",
    "start": "2464980",
    "end": "2470640"
  },
  {
    "text": "the library has a type HTML tag handler and if it encounters an image tag it",
    "start": "2470640",
    "end": "2476260"
  },
  {
    "text": "calls this other function image and this does various stuff but eventually falls",
    "start": "2476260",
    "end": "2481510"
  },
  {
    "text": "through to calling file exists on the path that's been supplied so let's have a look at the demo for that",
    "start": "2481510",
    "end": "2489360"
  },
  {
    "text": "so again I need to generate a payload obviously using a different bit to",
    "start": "2499650",
    "end": "2505470"
  },
  {
    "text": "account will run at ATC pasture as",
    "start": "2505470",
    "end": "2538020"
  },
  {
    "text": "similar to typo3 this is quite a complex CMS that has fine-grained access controls and the",
    "start": "2538020",
    "end": "2546990"
  },
  {
    "text": "point here is really that the vulnerabilities in the library not in the CMS but the CMS is a nice easy way",
    "start": "2546990",
    "end": "2552240"
  },
  {
    "text": "to sort of trigger it so again the first",
    "start": "2552240",
    "end": "2559290"
  },
  {
    "text": "thing we need to do is just upload the payload which we generated and again the",
    "start": "2559290",
    "end": "2570390"
  },
  {
    "text": "application just sees this as if it's an image and I've already got within the",
    "start": "2570390",
    "end": "2575580"
  },
  {
    "text": "application an article sets up in fact I'd open this so at the moment the",
    "start": "2575580",
    "end": "2583560"
  },
  {
    "text": "article just has xxx yyy in and I've got",
    "start": "2583560",
    "end": "2590940"
  },
  {
    "text": "this setting here export as PDF enabled so that's an option for this article",
    "start": "2590940",
    "end": "2596550"
  },
  {
    "text": "which will send it straight to the library so if I edit the contents of",
    "start": "2596550",
    "end": "2603120"
  },
  {
    "text": "this article",
    "start": "2603120",
    "end": "2605990"
  },
  {
    "text": "so I'm gonna Chuck an image tag into the middle of the if I press the right map",
    "start": "2619400",
    "end": "2626690"
  },
  {
    "text": "at the moment I haven't put the stream wrapper on that image tag I was just",
    "start": "2634940",
    "end": "2640500"
  },
  {
    "text": "going to show you how it behaves with just a pointer to that image so there's",
    "start": "2640500",
    "end": "2647580"
  },
  {
    "text": "no image as far as the browsers concerned of that path that the PDF",
    "start": "2647580",
    "end": "2652890"
  },
  {
    "text": "render it deals with it slightly differently and so yet we'll get a PDF",
    "start": "2652890",
    "end": "2659130"
  },
  {
    "text": "with just the picture in as a picture",
    "start": "2659130",
    "end": "2662720"
  },
  {
    "text": "but if I tell it to use to try to access something within that as an archive but",
    "start": "2670290",
    "end": "2680760"
  },
  {
    "text": "now the browser doesn't even display a broken image tab because it doesn't like sort of the the scheme of far it's",
    "start": "2680760",
    "end": "2688809"
  },
  {
    "text": "obviously not something the browser knows what to do in but once we tell it to generate a PDF it should be suppose",
    "start": "2688809",
    "end": "2697349"
  },
  {
    "text": "[Applause] and as the demos gone through and thanks to the person who told me interceptor",
    "start": "2699920",
    "end": "2706359"
  },
  {
    "text": "was on they all worked right in terms of",
    "start": "2706359",
    "end": "2714099"
  },
  {
    "start": "2714000",
    "end": "2714000"
  },
  {
    "text": "defending against this issue obviously we'd love to avoid it altogether by not",
    "start": "2714099",
    "end": "2720010"
  },
  {
    "text": "having the vulnerability but bear in mind that it's xxe or server side request forgery looking things obviously",
    "start": "2720010",
    "end": "2725740"
  },
  {
    "text": "these are found all the time certainly should be easy to sort of detect in a",
    "start": "2725740",
    "end": "2731200"
  },
  {
    "text": "signature based way so ids is or IPS this should be easily able to pick up the fact that we've got a nasty payload",
    "start": "2731200",
    "end": "2737799"
  },
  {
    "text": "in an archive or or a polyglot you can't disable the stream wrapper from the",
    "start": "2737799",
    "end": "2743740"
  },
  {
    "text": "command line as far as I can tell or from any any settings but if you know",
    "start": "2743740",
    "end": "2749200"
  },
  {
    "text": "you really urgent Lee decided you needed to disable this you could probably look at doing it during compilation I did let",
    "start": "2749200",
    "end": "2755650"
  },
  {
    "text": "PHP know about this a couple of months ago and I haven't heard back but I'm hoping in the long term that they'll",
    "start": "2755650",
    "end": "2761619"
  },
  {
    "text": "obviously change the behavior because there isn't really any reason to one serialize that data at that point though",
    "start": "2761619",
    "end": "2767980"
  },
  {
    "text": "there's you know that it's a feature that supposed to be there that you can have metadata in these archives but",
    "start": "2767980",
    "end": "2773799"
  },
  {
    "text": "there's no reason to unsee realize it until someone specifically requests it rather than just accessing the archive",
    "start": "2773799",
    "end": "2779829"
  },
  {
    "text": "through the stream wrapper like what do I want you to take away so it more",
    "start": "2779829",
    "end": "2785680"
  },
  {
    "start": "2782000",
    "end": "2782000"
  },
  {
    "text": "broadly than just this issue I think there's there's a deeper issue in in this in PHP and other languages that",
    "start": "2785680",
    "end": "2792960"
  },
  {
    "text": "basically applications are getting more and more complex and we're not paying any attention to what code is included",
    "start": "2792960",
    "end": "2799660"
  },
  {
    "text": "we're leaving stuff in that's no longer used this library manager called",
    "start": "2799660",
    "end": "2805240"
  },
  {
    "text": "composers seems to be the standard now in PHP and that lets you through on",
    "start": "2805240",
    "end": "2810520"
  },
  {
    "text": "serialization load any class included in the application by abusing the stream wrapper in a few different vulnerability",
    "start": "2810520",
    "end": "2817720"
  },
  {
    "text": "scenarios we can trigger this behavior some of the vulnerabilities that we can",
    "start": "2817720",
    "end": "2822760"
  },
  {
    "text": "get code execution from would have been considered extremely minor especially if you know allow URL F open was set to OFF",
    "start": "2822760",
    "end": "2830460"
  },
  {
    "text": "they might have disclosed to you that a local file exists was what people would have imagined the worst that could",
    "start": "2830460",
    "end": "2836620"
  },
  {
    "text": "happen and it's fairly easy to find these issues either through black box",
    "start": "2836620",
    "end": "2843430"
  },
  {
    "text": "techniques or gold analysis",
    "start": "2843430",
    "end": "2846960"
  }
]