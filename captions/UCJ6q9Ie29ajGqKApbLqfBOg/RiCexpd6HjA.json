[
  {
    "text": "[Music]",
    "start": "1700",
    "end": "4810"
  },
  {
    "text": "thank you for the introduction so welcome to my presentation go with the flow my name is Claudia Canela I'm",
    "start": "7400",
    "end": "13679"
  },
  {
    "text": "currently a PhD candidate at guards University of Technology in Austria if you want to reach out after the talk",
    "start": "13679",
    "end": "19080"
  },
  {
    "text": "please do so via Twitter or by email so before I want to talk about what I'm",
    "start": "19080",
    "end": "24180"
  },
  {
    "text": "actually going to present I want to present a little bit of motivation and one thing is that we do see quite a lot",
    "start": "24180",
    "end": "30060"
  },
  {
    "text": "of attacks over the years so here we have the number of cves that is being that has been being issued over the",
    "start": "30060",
    "end": "36239"
  },
  {
    "text": "years and as you can see here in this year we're already on our way on the way to surpass the values and that we've",
    "start": "36239",
    "end": "43079"
  },
  {
    "text": "encountered in the previous years so we do need to find a way how we can mitigate against potential attacks",
    "start": "43079",
    "end": "50399"
  },
  {
    "text": "typically we have two different ways that we can do this so the first thing is obviously when we do have",
    "start": "50399",
    "end": "56460"
  },
  {
    "text": "vulnerabilities we do want to eliminate bugs obviously this is also quite difficult we haven't",
    "start": "56460",
    "end": "62879"
  },
  {
    "text": "been able to do this in like forever the second thing that we can do is that",
    "start": "62879",
    "end": "67979"
  },
  {
    "text": "we can limit the post exploitation impact of these vulnerabilities once somebody for instance an attacker has",
    "start": "67979",
    "end": "73619"
  },
  {
    "text": "gained control of the application so instead of being able to do whatever they want they are severely limited in",
    "start": "73619",
    "end": "79920"
  },
  {
    "text": "what they can achieve in this talk I won't talk about eliminating bugs I've never done any",
    "start": "79920",
    "end": "85799"
  },
  {
    "text": "research in that direction so instead I will focus on limiting the post exploitation impact",
    "start": "85799",
    "end": "91200"
  },
  {
    "text": "obviously in the past there have been several attempts to do this as well for instance sandboxing one very prominent",
    "start": "91200",
    "end": "98520"
  },
  {
    "text": "example that has been proposed like 17 years ago or so now is control flow",
    "start": "98520",
    "end": "104100"
  },
  {
    "text": "integrity control for integrity has very simple idea during static analysis when we compile",
    "start": "104100",
    "end": "111360"
  },
  {
    "text": "the application or using a binary binary analysis we extract the control flow of",
    "start": "111360",
    "end": "117119"
  },
  {
    "text": "an application so for instance here we have a simple abstraction of this where we have several nodes and we extract",
    "start": "117119",
    "end": "122700"
  },
  {
    "text": "information at Node 1 can follow to can transfer control to node 2 which can control transfer control to node four",
    "start": "122700",
    "end": "130560"
  },
  {
    "text": "Node 1 can also transfer control to node 3 and so on so using static analysis we extract this",
    "start": "130560",
    "end": "137819"
  },
  {
    "text": "information build a control flow graph and then instrument our binary with",
    "start": "137819",
    "end": "143520"
  },
  {
    "text": "some checks so before we transition in Control Function check Integrity to a new Target the thing that we do is we",
    "start": "143520",
    "end": "150060"
  },
  {
    "text": "simply check is this a valid transfer or not so for instance for node 3 we know that",
    "start": "150060",
    "end": "156840"
  },
  {
    "text": "we can only transfer control to nodes 5 and 6. these can be functions this can",
    "start": "156840",
    "end": "161879"
  },
  {
    "text": "be basic blocks pretty much everything so if an attacker now tries to hijack",
    "start": "161879",
    "end": "168360"
  },
  {
    "text": "the control of our application we have this malicious flow to a different node then CFI will prevent",
    "start": "168360",
    "end": "174959"
  },
  {
    "text": "this however CFI does have a few limitations it's typically only applies within a",
    "start": "174959",
    "end": "182099"
  },
  {
    "text": "single domain for instance you can apply CFI to user space you can apply it to Kernel space but it's very hard to do",
    "start": "182099",
    "end": "189420"
  },
  {
    "text": "this in a cross-security domain context but obviously this is something that we",
    "start": "189420",
    "end": "194819"
  },
  {
    "text": "want to do because a lot of pretty much all of our exploits requires interactions with the operating system",
    "start": "194819",
    "end": "200159"
  },
  {
    "text": "as it is the privileged entity on our systems so we need a way to limit the interaction with the",
    "start": "200159",
    "end": "207239"
  },
  {
    "text": "operating system and there's one thing that Linux already provides us and this is Linux second",
    "start": "207239",
    "end": "212879"
  },
  {
    "text": "company secure Computing interface the idea behind second was quite easy we checked for every single system call",
    "start": "212879",
    "end": "219180"
  },
  {
    "text": "whether it is part of a filter or not if it is not we simply terminate our application the typical flow here is",
    "start": "219180",
    "end": "226319"
  },
  {
    "text": "this we have our application the application itself you use the developer you are responsible in identifying what",
    "start": "226319",
    "end": "232200"
  },
  {
    "text": "are the system costs that your application requires and you send them to the kernel to install these filters",
    "start": "232200",
    "end": "239879"
  },
  {
    "text": "for every single system call then the internal intercepts the system call checks with the with the filters and if",
    "start": "239879",
    "end": "247080"
  },
  {
    "text": "it does not is not part of the filter we simply terminate it otherwise we execute the system call and return the result",
    "start": "247080",
    "end": "254640"
  },
  {
    "text": "so this is obviously something quite nice that we can use to limit the post exploitation impact of an attack however",
    "start": "254640",
    "end": "262260"
  },
  {
    "text": "sex Compares two limitations in this case the first one is that we only look at the current system call we don't have",
    "start": "262260",
    "end": "269340"
  },
  {
    "text": "any context information the second one is that is quite difficult to apply here we have a very simple example of a",
    "start": "269340",
    "end": "276300"
  },
  {
    "text": "program it does nothing else than copy one file the content of one file to another file",
    "start": "276300",
    "end": "281880"
  },
  {
    "text": "but you as a developer you are responsible in identifying every single system call that your application uses",
    "start": "281880",
    "end": "288419"
  },
  {
    "text": "well this is quite simply something like this it's not a large program it's quite complicated if you think",
    "start": "288419",
    "end": "294780"
  },
  {
    "text": "about large complex applications like servers and so on so just to give you an idea how many",
    "start": "294780",
    "end": "301199"
  },
  {
    "text": "system calls that this application might require this is the list and as we can see it's already quite a lot and most",
    "start": "301199",
    "end": "308880"
  },
  {
    "text": "people I would assume would not be able to identify this system course so a couple years ago we worked on",
    "start": "308880",
    "end": "317280"
  },
  {
    "text": "automating this and we gave a presentation on this back at blackhead in 2020 in blackhead Asia together with",
    "start": "317280",
    "end": "324180"
  },
  {
    "text": "my colleagues so we simply automated this Con this discovery of the system cost that your application requires",
    "start": "324180",
    "end": "331320"
  },
  {
    "text": "but when we worked on this we also had another idea what if we extend SEC comp",
    "start": "331320",
    "end": "336419"
  },
  {
    "text": "with not only enforcing a current system call but this current system call in the",
    "start": "336419",
    "end": "342360"
  },
  {
    "text": "in the context of the previous one so we'll try to enforce ciscal sequences and this brings me to what I'm going to",
    "start": "342360",
    "end": "348900"
  },
  {
    "text": "present today and this is our concept of Cisco flow Integrity protection it takes ideas from CFI and SEC comp to to",
    "start": "348900",
    "end": "357360"
  },
  {
    "text": "enforce the program behavior of an application that is protected for it",
    "start": "357360",
    "end": "362520"
  },
  {
    "text": "as flip as we call it is built upon three pillars our first pillar is a simple State machine during static",
    "start": "362520",
    "end": "369060"
  },
  {
    "text": "analysis we extract every single Cisco sequence of length 2 obviously there are",
    "start": "369060",
    "end": "374940"
  },
  {
    "text": "other lengths are possible as well but we focused on only length two so we",
    "start": "374940",
    "end": "380160"
  },
  {
    "text": "extract these sequences and then try to enforce them so I'll assist our",
    "start": "380160",
    "end": "385740"
  },
  {
    "text": "application is only able to call system ciscos in the sequence as we determined",
    "start": "385740",
    "end": "391319"
  },
  {
    "text": "statically just like we had it in the CFI but on a different level however we try to extend this further to",
    "start": "391319",
    "end": "398639"
  },
  {
    "text": "provide even stricter protection and this is for ciscal Origins during the same process when we attract extract",
    "start": "398639",
    "end": "405240"
  },
  {
    "text": "this information we also extract the origin of each single system called generating a mapping from the CIS called",
    "start": "405240",
    "end": "412199"
  },
  {
    "text": "origin to the system called that it can execute obviously this can be a mapping",
    "start": "412199",
    "end": "417300"
  },
  {
    "text": "one to one a single sysical instruction can only execute a single system call or a single system called instruction can",
    "start": "417300",
    "end": "424080"
  },
  {
    "text": "potentially execute multiple system calls both of these things we do extract",
    "start": "424080",
    "end": "429419"
  },
  {
    "text": "during static analysis in the compilation of the application however S5 would not be anything without",
    "start": "429419",
    "end": "436680"
  },
  {
    "text": "our third pillar that actually enforces the information so we modified the Linux",
    "start": "436680",
    "end": "441900"
  },
  {
    "text": "kernel that it can receive the information that we provided and then enforce it into set the system color",
    "start": "441900",
    "end": "448020"
  },
  {
    "text": "check is this a valid transition is it a valid origin and if it is we continue our execution",
    "start": "448020",
    "end": "456500"
  },
  {
    "text": "so this is the free pillows pillows that our S5 builds upon",
    "start": "456539",
    "end": "462000"
  },
  {
    "text": "in this talk I will mostly focus on the first two pillars and less on the third pillar simply because it's more on the",
    "start": "462000",
    "end": "469080"
  },
  {
    "text": "trivial side this part so we implemented s-f in a proof of",
    "start": "469080",
    "end": "475500"
  },
  {
    "text": "concept implementation we call this sys flow sys flow consists of three parts",
    "start": "475500",
    "end": "480660"
  },
  {
    "text": "it's a compiler so we modified the llvm compiler tool train during that performs",
    "start": "480660",
    "end": "486599"
  },
  {
    "text": "the extraction of both the Cisco sequences and the the origins then a simple support Library it does",
    "start": "486599",
    "end": "493860"
  },
  {
    "text": "nothing else than extract the information do some adjustments for the Cisco offsets and send it to the kernel and",
    "start": "493860",
    "end": "501300"
  },
  {
    "text": "finally the third part is our modified Linux kernel which takes care of the enforcement",
    "start": "501300",
    "end": "506759"
  },
  {
    "text": "the enforcement can be done in various ways we choose to modify the Linux kernel entirely so but you could also",
    "start": "506759",
    "end": "514200"
  },
  {
    "text": "use something like evpf or something like that so let's focus a bit on the extraction",
    "start": "514200",
    "end": "520440"
  },
  {
    "text": "part what is the type of extract information that we extract we have here a very simple example of just a little",
    "start": "520440",
    "end": "527279"
  },
  {
    "text": "bit of code as we can see we have a function four it takes a parameter it calls some functions it has some",
    "start": "527279",
    "end": "533700"
  },
  {
    "text": "um yeah some branches in there as well and a system call first it is important that we extract",
    "start": "533700",
    "end": "540360"
  },
  {
    "text": "several key parts of information so the thing that we extract is the transitions so we generate an inter an",
    "start": "540360",
    "end": "547200"
  },
  {
    "text": "inter procedural control flow graph so that we know from where can we go to where so that we can actually extract",
    "start": "547200",
    "end": "554220"
  },
  {
    "text": "the sequences correctly so we know for instance that from line three we can transition to line four or line six and",
    "start": "554220",
    "end": "560160"
  },
  {
    "text": "so on we also have to call targets so this is these represent our inter procedural",
    "start": "560160",
    "end": "566160"
  },
  {
    "text": "control flow graph where we know that at line two we're going to call the function scan F or on line four we're",
    "start": "566160",
    "end": "572220"
  },
  {
    "text": "going to call printf and finally we also extract information of the system calls so we know at line 06 we are going to",
    "start": "572220",
    "end": "579899"
  },
  {
    "text": "call the read system call we extract all of this information for every single file that we encounter both if it's a C",
    "start": "579899",
    "end": "586680"
  },
  {
    "text": "file if it's an assembly file we can extract all this information generate the object file response",
    "start": "586680",
    "end": "593640"
  },
  {
    "text": "yeah the corresponding object file and encode all of this information in the object file",
    "start": "593640",
    "end": "600240"
  },
  {
    "text": "so because only later on we can build our whole control flow graph and this is called sequences",
    "start": "600240",
    "end": "606600"
  },
  {
    "text": "the second part is more complicated and it it builds upon the first part as well",
    "start": "606600",
    "end": "611880"
  },
  {
    "text": "and this is the CIS called offset extraction first why do we extract this is called offset as an offset to the",
    "start": "611880",
    "end": "618300"
  },
  {
    "text": "start of the function instead of an absolute address we simply do this so that we can still use features like",
    "start": "618300",
    "end": "624600"
  },
  {
    "text": "address based layout randomization because we simply don't know the final address once it's being loaded",
    "start": "624600",
    "end": "631320"
  },
  {
    "text": "so what we have here is a simple translation unit we have a function we already seen this function before and we",
    "start": "631320",
    "end": "637680"
  },
  {
    "text": "know that it's going to execute a system call so we used now the information that in",
    "start": "637680",
    "end": "643440"
  },
  {
    "text": "the back end of the compiler we see a system called instructure we use the information that we have extracted",
    "start": "643440",
    "end": "649140"
  },
  {
    "text": "previously and annotate this with a label so we're going to say this is in function func and the system call number",
    "start": "649140",
    "end": "656339"
  },
  {
    "text": "39. because at this point we don't know the offset of the interact instruction",
    "start": "656339",
    "end": "661560"
  },
  {
    "text": "there are several key steps of optimization that are going to happen afterwards only at the very end when we generate",
    "start": "661560",
    "end": "668459"
  },
  {
    "text": "the symbol table for our object file can we actually determine the offset so once",
    "start": "668459",
    "end": "674760"
  },
  {
    "text": "we have this symbol table we simply take the the address that's generated for the function and the address generated for",
    "start": "674760",
    "end": "682140"
  },
  {
    "text": "all now newly generated label calculate the difference annotate it with add the",
    "start": "682140",
    "end": "687720"
  },
  {
    "text": "information of the system call number and we have the information so we know our function func is going to call 13",
    "start": "687720",
    "end": "693320"
  },
  {
    "text": "the system called 39 I think it's the get ppid system call at line O2",
    "start": "693320",
    "end": "699959"
  },
  {
    "text": "however what we also see here is this unknown offsets The Cisco cb3 why do we",
    "start": "699959",
    "end": "706200"
  },
  {
    "text": "have this Cisco CP is a function that's performing a system call with a checkpoint",
    "start": "706200",
    "end": "711300"
  },
  {
    "text": "so we don't know what the offset is there because it's in a different",
    "start": "711300",
    "end": "716339"
  },
  {
    "text": "translation unit we don't have this information readily available but what we do have is the assistant information",
    "start": "716339",
    "end": "722160"
  },
  {
    "text": "what the actual system call is but at one point we have either seen or will see this function Cisco CP then we",
    "start": "722160",
    "end": "729899"
  },
  {
    "text": "have the opposite problem now we know what this the offset is but we don't know what the system call is so we",
    "start": "729899",
    "end": "736140"
  },
  {
    "text": "annotate this information we say we are in functions it's called CP and as the number we encode minus one",
    "start": "736140",
    "end": "742620"
  },
  {
    "text": "and now we have the unknown ciscals as well so we know what is the offset there in this function",
    "start": "742620",
    "end": "748800"
  },
  {
    "text": "in the Linker we combine this information to get our final information where we now also know Cisco CP is going",
    "start": "748800",
    "end": "755040"
  },
  {
    "text": "to perform the function at the system called free uh I think it's closed at this offset",
    "start": "755040",
    "end": "762560"
  },
  {
    "text": "so let's talk about the state machine generation and also in this same process we generate the final information for",
    "start": "762720",
    "end": "769380"
  },
  {
    "text": "our Cisco offsets we have all these object files that are now annotated that",
    "start": "769380",
    "end": "774839"
  },
  {
    "text": "contain this new section with our information that we extracted we take",
    "start": "774839",
    "end": "780720"
  },
  {
    "text": "all of these object files and throw them into the Linker the Linker extracts all of this and generates this huge block of",
    "start": "780720",
    "end": "787620"
  },
  {
    "text": "information this whole control flow graph the whole information on system classes called offsets and so on",
    "start": "787620",
    "end": "794040"
  },
  {
    "text": "but obviously we need to build the final Cisco sequence we cannot simply use this information because the we would",
    "start": "794040",
    "end": "799980"
  },
  {
    "text": "severely over approximate and we still don't know any inter-procedural ciscal sequences",
    "start": "799980",
    "end": "805500"
  },
  {
    "text": "so I will briefly illustrate the generation of the state machine using this example so in the top left you can",
    "start": "805500",
    "end": "811440"
  },
  {
    "text": "see the current function that we are at and on the dot right you see the information that we have available for",
    "start": "811440",
    "end": "816959"
  },
  {
    "text": "this in the bottom you see the last system calls that we encountered and the state machine",
    "start": "816959",
    "end": "822360"
  },
  {
    "text": "so our information here tells us that we're encountering a transition to the",
    "start": "822360",
    "end": "827459"
  },
  {
    "text": "functions full one and full two and simply based on the order of the line",
    "start": "827459",
    "end": "832800"
  },
  {
    "text": "numbers we know that we first transition to full one so let's do this we recursively visit our function through",
    "start": "832800",
    "end": "838920"
  },
  {
    "text": "one we pass all the information to it and we see that the first thing in this function is a system called open",
    "start": "838920",
    "end": "846060"
  },
  {
    "text": "so we're going to consume this open add it to the last system calls but we don't have a previous system call so this is",
    "start": "846060",
    "end": "852300"
  },
  {
    "text": "more or less our initial state what we tend to have is the transition to the function bar one in bar one we",
    "start": "852300",
    "end": "859920"
  },
  {
    "text": "again have a system called read now we do have a previous system call so",
    "start": "859920",
    "end": "865019"
  },
  {
    "text": "what we can do is we add in the state machine a transition from open to read so we have a valid transition there",
    "start": "865019",
    "end": "871320"
  },
  {
    "text": "we then consumed it it's added to the last system cost replace the previous value but and can continue but we don't",
    "start": "871320",
    "end": "879180"
  },
  {
    "text": "have any further information for our function bar one so we simply return no further information here as well so we",
    "start": "879180",
    "end": "885420"
  },
  {
    "text": "will return again until we are at Main in the main function where we have now our transition to Food 2 and we simply",
    "start": "885420",
    "end": "892260"
  },
  {
    "text": "repeat that we go to full two we have our system call First with the open system call our last system call is read",
    "start": "892260",
    "end": "898980"
  },
  {
    "text": "so we are going to add a transition from read to open replace the last system call that we encountered transition to",
    "start": "898980",
    "end": "905220"
  },
  {
    "text": "Bar two and add now a transition from the open system call to the Stat system",
    "start": "905220",
    "end": "910500"
  },
  {
    "text": "column so we now know that there are two valid transitions from the opener system call",
    "start": "910500",
    "end": "916380"
  },
  {
    "text": "one thing that we also during this process is that we every single time we encounter and function we add all the",
    "start": "916380",
    "end": "922260"
  },
  {
    "text": "system called offsets that we have for this function so simply at the end of this once we have returned here to our",
    "start": "922260",
    "end": "928440"
  },
  {
    "text": "main function there's no more information left we have generated this whole map of uh CIS called Origins as",
    "start": "928440",
    "end": "935880"
  },
  {
    "text": "well as our CIS called sequences then we encode this information again in",
    "start": "935880",
    "end": "942120"
  },
  {
    "text": "our final binary link our support library to it which is responsible for extracting the information",
    "start": "942120",
    "end": "948660"
  },
  {
    "text": "now that we have launched the application we also know all the the functional addresses we use this",
    "start": "948660",
    "end": "955440"
  },
  {
    "text": "information make the offset adjustment and finally send it to our kernel for",
    "start": "955440",
    "end": "960959"
  },
  {
    "text": "the enforcement the kernel is very simple it intercepts a system call it keeps track of what was",
    "start": "960959",
    "end": "967620"
  },
  {
    "text": "the previous system call that I encountered and once we perform a new system call it looks up in the",
    "start": "967620",
    "end": "973019"
  },
  {
    "text": "information is the current system called a valid Target for the previous system code so it performs this transition",
    "start": "973019",
    "end": "978300"
  },
  {
    "text": "check once it passes this it performs this independent origin check to see whether the system call also originates",
    "start": "978300",
    "end": "984480"
  },
  {
    "text": "from a location where it is valid so this is basically the idea of our",
    "start": "984480",
    "end": "989519"
  },
  {
    "text": "concept of of svip but the thing that always is of Interest obviously is the",
    "start": "989519",
    "end": "994560"
  },
  {
    "text": "evaluation what is the performance impact of our two of our concept and as well the security that we provide",
    "start": "994560",
    "end": "1001699"
  },
  {
    "text": "let's start with the performance so the first thing we did is We",
    "start": "1001699",
    "end": "1007399"
  },
  {
    "text": "performed this micro Benchmark we simply followed what the Linux kernel developers do as well we executed the",
    "start": "1007399",
    "end": "1014540"
  },
  {
    "text": "get ppid system called one million times we did this for different setups so in",
    "start": "1014540",
    "end": "1020360"
  },
  {
    "text": "the First Column we see that we simply used no protection at all in a second we compared our implementation to sec.com",
    "start": "1020360",
    "end": "1027079"
  },
  {
    "text": "and then we benchmarked all the different uh configurations of our svip so only state checks only origin checks",
    "start": "1027079",
    "end": "1034100"
  },
  {
    "text": "and only the and then both of them combined obviously we are slower than no",
    "start": "1034100",
    "end": "1039980"
  },
  {
    "text": "protection at all here we have like an average number of 302 compared to 341 in",
    "start": "1039980",
    "end": "1046100"
  },
  {
    "text": "the case of our combined protection this is to be expected simply because we'd have to take a different uh we have",
    "start": "1046100",
    "end": "1052940"
  },
  {
    "text": "to perform our checks but also we have to take a different path into the kernel there's the the kernel calls it the the",
    "start": "1052940",
    "end": "1058460"
  },
  {
    "text": "slow path compared to the fast fiscal enterpath and this is something that we have in common with sec.com because we",
    "start": "1058460",
    "end": "1064100"
  },
  {
    "text": "need to intercept the system column but one thing that we can see is that we outperform SEC comp in terms of this",
    "start": "1064100",
    "end": "1070580"
  },
  {
    "text": "micro Benchmark that we performed it's only seven Cycles but still quite a bit there's a simple reason why this is the",
    "start": "1070580",
    "end": "1077960"
  },
  {
    "text": "case section of internally uses the cppf program language simple to express their",
    "start": "1077960",
    "end": "1083780"
  },
  {
    "text": "filters it's quite complex they need to be interpreted and this takes quite a bit of an overhead",
    "start": "1083780",
    "end": "1090440"
  },
  {
    "text": "but Micro benchmarks are they are nice they tell you like a raw estimate of the",
    "start": "1090440",
    "end": "1096440"
  },
  {
    "text": "overhead but usually your system your application isn't going to perform 1 million uh",
    "start": "1096440",
    "end": "1101840"
  },
  {
    "text": "system calls of the get ppid system called um it's simply not going to happen within a second",
    "start": "1101840",
    "end": "1107660"
  },
  {
    "text": "so one thing that we did is We performed this macro this macro Benchmark we looked at several large-scale",
    "start": "1107660",
    "end": "1113059"
  },
  {
    "text": "applications uh and compiled it them with our tool chain we want we rent them as well so also",
    "start": "1113059",
    "end": "1121220"
  },
  {
    "text": "obviously yes we can report some performance numbers we can also say that our system actually works so this is",
    "start": "1121220",
    "end": "1126260"
  },
  {
    "text": "also like a functional Corrections test in itself as well because we were able for instance for our memcache we ran the",
    "start": "1126260",
    "end": "1132620"
  },
  {
    "text": "whole test Suite without any errors uh for nginx we were able to load a website",
    "start": "1132620",
    "end": "1138020"
  },
  {
    "text": "connect to it make a hundred thousand or a million requests without it crashing and for ffmpeg we simply converted one",
    "start": "1138020",
    "end": "1145160"
  },
  {
    "text": "file to another file format one thing that we can see here is that we have a very low overhead the",
    "start": "1145160",
    "end": "1151940"
  },
  {
    "text": "interesting case here is obviously the combined case because it provides the the most protection in all cases we have",
    "start": "1151940",
    "end": "1157760"
  },
  {
    "text": "less than two percent overhead even though we perform more checks than second we provide more security",
    "start": "1157760",
    "end": "1164600"
  },
  {
    "text": "so even though we do all this we have quite a nice performance impact that I would say is acceptable for most",
    "start": "1164600",
    "end": "1171620"
  },
  {
    "text": "applications one thing that I want to point to that I still don't know the answer to it is why",
    "start": "1171620",
    "end": "1178700"
  },
  {
    "text": "in ffmpec we have this weird case where the just checking the state or just checking the Cisco location",
    "start": "1178700",
    "end": "1185539"
  },
  {
    "text": "performs worse than when we combine those our repetitive experiment I think like 20 times and this Behavior was",
    "start": "1185539",
    "end": "1192440"
  },
  {
    "text": "always prevalent and it's still something that I'm looking into it I'm to be honest I'm not entirely sure",
    "start": "1192440",
    "end": "1197840"
  },
  {
    "text": "what's the case there I expected some weird caching Behavior there",
    "start": "1197840",
    "end": "1203860"
  },
  {
    "text": "but obviously the thing that we also want to know about is what is the security benefit of using as fit for",
    "start": "1203960",
    "end": "1210200"
  },
  {
    "text": "your application one thing that we can reason with on that allows us to reason about the",
    "start": "1210200",
    "end": "1216260"
  },
  {
    "text": "provided security of our system is when we look at the state machine here we have several applications that we used",
    "start": "1216260",
    "end": "1222260"
  },
  {
    "text": "in our in our evaluation or research paper that we used so we simply extracted the from the state machine for",
    "start": "1222260",
    "end": "1229340"
  },
  {
    "text": "all of these applications and looked at some of the key metrics there are more metrics in the paper and just present",
    "start": "1229340",
    "end": "1235220"
  },
  {
    "text": "some of the most important ones here so let's look at nginx nginx here has",
    "start": "1235220",
    "end": "1242240"
  },
  {
    "text": "the highest number of states with 107. obviously this is quite a lot but one",
    "start": "1242240",
    "end": "1248360"
  },
  {
    "text": "thing that is quite important here is that 107 States is also the number of of",
    "start": "1248360",
    "end": "1253400"
  },
  {
    "text": "states or system calls that you would have in a sec.com filter so it's simply",
    "start": "1253400",
    "end": "1258740"
  },
  {
    "text": "the equivalent there because it's the number of Origins for a system call and if it's an origin obviously at one point",
    "start": "1258740",
    "end": "1264440"
  },
  {
    "text": "I'm going to require the system color so the number here also matches our",
    "start": "1264440",
    "end": "1270200"
  },
  {
    "text": "previous research so when we did the automated second filter generation we also arrived at this number and",
    "start": "1270200",
    "end": "1276260"
  },
  {
    "text": "concurrent work also have this so I'm pretty confident that this is accurate",
    "start": "1276260",
    "end": "1282200"
  },
  {
    "text": "one thing with SEC comparison that is quite important with second we have 107",
    "start": "1282200",
    "end": "1288140"
  },
  {
    "text": "States and we don't enforce any context around them so every single one of these",
    "start": "1288140",
    "end": "1293600"
  },
  {
    "text": "107 states can reach every single one of the uh of the 107 States so with the",
    "start": "1293600",
    "end": "1299780"
  },
  {
    "text": "number of average transitions in sec.com is 107. in our case we have a reduction to",
    "start": "1299780",
    "end": "1306620"
  },
  {
    "text": "74.05 so on average every single one of these",
    "start": "1306620",
    "end": "1312020"
  },
  {
    "text": "107 states can reach 74 other system costs obviously this is quite a high",
    "start": "1312020",
    "end": "1317600"
  },
  {
    "text": "number but compared to sec.com there's still an improvement by yeah 33 system calls and",
    "start": "1317600",
    "end": "1326360"
  },
  {
    "text": "we see this also for others the question obviously is why do we have such a high number of average transitions there are",
    "start": "1326360",
    "end": "1333140"
  },
  {
    "text": "certain things that we need to to do so we do over approximate just like you do in CFI when we build the control flow",
    "start": "1333140",
    "end": "1339919"
  },
  {
    "text": "graph resolution of indirect costs is quite complex it's an undecidable problem so",
    "start": "1339919",
    "end": "1347240"
  },
  {
    "text": "we need to over approximate their which results in this high on average this higher number",
    "start": "1347240",
    "end": "1353480"
  },
  {
    "text": "now I do want you to keep these two numbers 74 and 107 in mind when we",
    "start": "1353480",
    "end": "1359000"
  },
  {
    "text": "transition to our origin analysis then we did pretty much the same thing we looked at these applications we looked",
    "start": "1359000",
    "end": "1365539"
  },
  {
    "text": "at the total number of offsets within these applications so the total number of system call instructions and the",
    "start": "1365539",
    "end": "1371179"
  },
  {
    "text": "number of average offsets that can a system where a system call can occur",
    "start": "1371179",
    "end": "1376640"
  },
  {
    "text": "let's look again at nginx here we have 318 system call instructions when we",
    "start": "1376640",
    "end": "1383360"
  },
  {
    "text": "think about SEC compare again when we use second comp we have a 107 system calls",
    "start": "1383360",
    "end": "1389539"
  },
  {
    "text": "every single one of these system calls can originate at any one of these 318 locations so this is perfect if you",
    "start": "1389539",
    "end": "1396559"
  },
  {
    "text": "think about like a Rob chain I can I still have quite a big attack surface",
    "start": "1396559",
    "end": "1401600"
  },
  {
    "text": "but one thing that um that we have now with our uh with our origin enforcement",
    "start": "1401600",
    "end": "1407120"
  },
  {
    "text": "is we reduce this to free so even though we have 107 States on average every",
    "start": "1407120",
    "end": "1413120"
  },
  {
    "text": "single one of these system costs can only be executed at three locations this is quite a reduction we have like a",
    "start": "1413120",
    "end": "1419480"
  },
  {
    "text": "hundred effective 100 less uh Cisco Origins as would have been possible with",
    "start": "1419480",
    "end": "1425539"
  },
  {
    "text": "sec.com and together I think we have this reduction to 74 possible Transitions and",
    "start": "1425539",
    "end": "1433100"
  },
  {
    "text": "the reduction to like on average free system called locations this is quite nice of a security benefit",
    "start": "1433100",
    "end": "1439340"
  },
  {
    "text": "but let's have a look at our concept in the context of return oriented programming",
    "start": "1439340",
    "end": "1444799"
  },
  {
    "text": "just to let me give you a quick primer for those if somebody is not too familiar with return oriented",
    "start": "1444799",
    "end": "1450020"
  },
  {
    "text": "programming the idea behind return behind Rob is simply that we use existing code in our application to",
    "start": "1450020",
    "end": "1455960"
  },
  {
    "text": "exploit the program there are certain reasons why we need to do this I won't go into too many details here but the",
    "start": "1455960",
    "end": "1462260"
  },
  {
    "text": "idea then is that we use this existing code by simply jumping to parts of functions",
    "start": "1462260",
    "end": "1467480"
  },
  {
    "text": "which we call gadgets these gadgets are typically of a very simple form they are",
    "start": "1467480",
    "end": "1472820"
  },
  {
    "text": "simply in the same assembly instructions that are followed by return instructions like we can see here we pop RDI we",
    "start": "1472820",
    "end": "1479120"
  },
  {
    "text": "return We perform a system called or we return and that we return so in on typical export you chain these",
    "start": "1479120",
    "end": "1486159"
  },
  {
    "text": "gadgets together and the only requirement here is that we override the stack with the addresses of the gadgets",
    "start": "1486159",
    "end": "1492860"
  },
  {
    "text": "as well as any parameters that we require a brief illustration so here we have the",
    "start": "1492860",
    "end": "1498380"
  },
  {
    "text": "stack we have program code and we have registers we have prepared our Stacks so we have our return address and the",
    "start": "1498380",
    "end": "1504200"
  },
  {
    "text": "parameters on there we have the program code as well so we simply return perform some asmr's instruction return to next",
    "start": "1504200",
    "end": "1511280"
  },
  {
    "text": "Gadget there we now have our Pop instructions that are part of our Gadget we popped in",
    "start": "1511280",
    "end": "1517340"
  },
  {
    "text": "two different values that we've prepared into the register and return to our Cisco instruction",
    "start": "1517340",
    "end": "1522760"
  },
  {
    "text": "and now we have a working system a working blockchain that performs a system call that we have specified and",
    "start": "1522760",
    "end": "1529640"
  },
  {
    "text": "with the parameters that we also provided so obviously this is quite interesting for an attacker and these",
    "start": "1529640",
    "end": "1536000"
  },
  {
    "text": "gadgets that we have here they are often unintended so consider this byte sequence from an Intel processor you",
    "start": "1536000",
    "end": "1541700"
  },
  {
    "text": "have o5 5A 5e5fc3 when we disassemble this this is simple and add instructions so we add a",
    "start": "1541700",
    "end": "1548299"
  },
  {
    "text": "constant value to whatever is in the register however if we skip the first byte then",
    "start": "1548299",
    "end": "1554120"
  },
  {
    "text": "it disassembles did this very nice uh Gadget so we pop some values and return and an attacker can do this obviously as",
    "start": "1554120",
    "end": "1561500"
  },
  {
    "text": "well so they can simply jump to underlined addresses and to underline instructions and perform some",
    "start": "1561500",
    "end": "1567760"
  },
  {
    "text": "computation that they want even though it is not there intended by the compiler",
    "start": "1567760",
    "end": "1572900"
  },
  {
    "text": "or by the application developer and this property is due to non-aligned variable with opcodes",
    "start": "1572900",
    "end": "1578779"
  },
  {
    "text": "now the Cisco instruction itself is quite small it only has byte sequence of",
    "start": "1578779",
    "end": "1583880"
  },
  {
    "text": "0505 and of05 so it's very easy to find underlying ciscal instructions",
    "start": "1583880",
    "end": "1590480"
  },
  {
    "text": "however when we think about svip in the context of these return oriented programming we do impose some",
    "start": "1590480",
    "end": "1596779"
  },
  {
    "text": "restrictions on them so we restrict these rough chains by a Cisco Origins so",
    "start": "1596779",
    "end": "1602360"
  },
  {
    "text": "for instance underlined instructions are simply no longer possible because we have never encountered as an underlying",
    "start": "1602360",
    "end": "1609200"
  },
  {
    "text": "ciscaline structure in our static analysis because we are the compiler we have no clue about this at this point",
    "start": "1609200",
    "end": "1616460"
  },
  {
    "text": "and uh also potentially Shell Code or something like that is also not possible",
    "start": "1616460",
    "end": "1621679"
  },
  {
    "text": "second in together with the origins we also enforce that not uh considered not",
    "start": "1621679",
    "end": "1627260"
  },
  {
    "text": "every single sequence is possible anymore so this is also quite a nice reduction so an attacker must be very",
    "start": "1627260",
    "end": "1632659"
  },
  {
    "text": "careful in the gadgets that are constructed and must have previous knowledge about the possible Transitions",
    "start": "1632659",
    "end": "1638600"
  },
  {
    "text": "and the possible Origins so together with this we can say that S3 can poses significant constraints on control flow",
    "start": "1638600",
    "end": "1645020"
  },
  {
    "text": "hijacking attacks however svip is not perfect when it",
    "start": "1645020",
    "end": "1650659"
  },
  {
    "text": "comes to uh to this we have similar restrictions to limitations as C5 for",
    "start": "1650659",
    "end": "1658220"
  },
  {
    "text": "instance as I mentioned the over approximation and this over approximation leads to something that we",
    "start": "1658220",
    "end": "1663679"
  },
  {
    "text": "call that is called a mimicry attack in our case it's not a typical mimicry",
    "start": "1663679",
    "end": "1669380"
  },
  {
    "text": "attack as it is discussed in the literature for intuition detection systems but a slightly modified version",
    "start": "1669380",
    "end": "1676340"
  },
  {
    "text": "but let me briefly discuss the mimicry attacks in the context of intrusion",
    "start": "1676340",
    "end": "1681380"
  },
  {
    "text": "detection systems because there we have also used Cisco sequences for detecting malicious behavior",
    "start": "1681380",
    "end": "1688279"
  },
  {
    "text": "but not enforcement as we are using it so we have this detection policy now intuition detection system that from an",
    "start": "1688279",
    "end": "1693919"
  },
  {
    "text": "open system call um if an open system call followed by an f-stat system called followed by a write",
    "start": "1693919",
    "end": "1699200"
  },
  {
    "text": "system called if we see this Behavior then we know that something malicious is going on",
    "start": "1699200",
    "end": "1705020"
  },
  {
    "text": "in the mimicry attack the it is quite simple to evade this this detection",
    "start": "1705020",
    "end": "1710120"
  },
  {
    "text": "because an attacker can simply do this we the attacker executes the open system call then performs some no op system",
    "start": "1710120",
    "end": "1716360"
  },
  {
    "text": "call it can be anything let's say it's a read system call then after the read system call the",
    "start": "1716360",
    "end": "1722360"
  },
  {
    "text": "attacker performs the f-stat system call and there we could also potentially do another no op system call can also be",
    "start": "1722360",
    "end": "1728779"
  },
  {
    "text": "the read system call again and then we perform the right system code the only thing that is necessary for the attacker",
    "start": "1728779",
    "end": "1734480"
  },
  {
    "text": "is the D2 for instance in this case the two no op system calls don't interfere with the actual attack they are simply",
    "start": "1734480",
    "end": "1741020"
  },
  {
    "text": "there to towards the detection policy in our case it's a little bit different",
    "start": "1741020",
    "end": "1747320"
  },
  {
    "text": "because we don't try to detect malicious behavior we try to enforce program Behavior",
    "start": "1747320",
    "end": "1753380"
  },
  {
    "text": "but we do have this over approximation that allows an attacker to do this when",
    "start": "1753380",
    "end": "1758480"
  },
  {
    "text": "we uh our application for instance doesn't have a valid transition from the",
    "start": "1758480",
    "end": "1763760"
  },
  {
    "text": "open system call to the f-stat system call but it does have a valid transition from open to our no op system call which",
    "start": "1763760",
    "end": "1770480"
  },
  {
    "text": "in turn has a transition to the asset system call so the attacker with the knowledge of the Cisco sequences can",
    "start": "1770480",
    "end": "1777260"
  },
  {
    "text": "weave its way through the um through the enforcement so to reach the final system called it's required in",
    "start": "1777260",
    "end": "1785480"
  },
  {
    "text": "the attack however even if an attacker tries to do this there are simple there are still restrictions so there must be a valid",
    "start": "1785480",
    "end": "1792860"
  },
  {
    "text": "transition between the no op system call and the um the source system call and",
    "start": "1792860",
    "end": "1797960"
  },
  {
    "text": "the know-up system call must execute at the valid Target at the valid origin if",
    "start": "1797960",
    "end": "1803720"
  },
  {
    "text": "this is not possible if this is not given then we will kill the the exploit",
    "start": "1803720",
    "end": "1809120"
  },
  {
    "text": "and this is possible for every single one of these edges so an attacker with knowledge can find a",
    "start": "1809120",
    "end": "1815539"
  },
  {
    "text": "way but still we do impose some restrictions on uh on attacks",
    "start": "1815539",
    "end": "1823240"
  },
  {
    "text": "one thing that I want to point to also is that something that I've done and that I will probably release in the near",
    "start": "1823279",
    "end": "1829460"
  },
  {
    "text": "future it's work that I've done with my student and it's more or less to",
    "start": "1829460",
    "end": "1834980"
  },
  {
    "text": "restrict exactly a text like this let's assume we have a simple example",
    "start": "1834980",
    "end": "1840679"
  },
  {
    "text": "here we have two code locations we have in the creation a we have a function Cisco it performs a system color and",
    "start": "1840679",
    "end": "1848360"
  },
  {
    "text": "then it should cause the function bar one bar one in turn also performs system call and returns to our function from",
    "start": "1848360",
    "end": "1854899"
  },
  {
    "text": "one location B does pretty much the same thing it also performs the same system color but transitions to a different",
    "start": "1854899",
    "end": "1861440"
  },
  {
    "text": "function so there we perform a different system call on the right we can see here the",
    "start": "1861440",
    "end": "1867380"
  },
  {
    "text": "information that we extract in S5 we have the transition so we know that open because we have encountered it can",
    "start": "1867380",
    "end": "1872960"
  },
  {
    "text": "transition to either the read or the Stat system column and we have the origins we have opma can occur at these",
    "start": "1872960",
    "end": "1879919"
  },
  {
    "text": "different locations and read can occur these uh locations read and set at these",
    "start": "1879919",
    "end": "1885740"
  },
  {
    "text": "locations one thing that an attacker now would be possible because we perform these",
    "start": "1885740",
    "end": "1891260"
  },
  {
    "text": "transitions these origin checks independent of each other an attacker can do simply execute the open system",
    "start": "1891260",
    "end": "1896840"
  },
  {
    "text": "call add our location a and transition to location B and perform the Stat",
    "start": "1896840",
    "end": "1902539"
  },
  {
    "text": "system call there if it is required this would pass both tests checks because",
    "start": "1902539",
    "end": "1907760"
  },
  {
    "text": "it's a valid transition and both system calls over originate from a valid origin",
    "start": "1907760",
    "end": "1913399"
  },
  {
    "text": "that's why I refer to this implementation of svip as coarse grained as fit similar to what you see in CFI",
    "start": "1913399",
    "end": "1920000"
  },
  {
    "text": "where we have coarse grained and fine-grained CFI one thing that I worked with my student",
    "start": "1920000",
    "end": "1925159"
  },
  {
    "text": "on is that we thought that okay now that we know that actually in extracting these fiscal Origins these Cisco",
    "start": "1925159",
    "end": "1931640"
  },
  {
    "text": "transition sequences is possible let's more finely intertwine these parts so we",
    "start": "1931640",
    "end": "1938720"
  },
  {
    "text": "came up with this idea of this fine-grained s-fib where we make the transition check also dependent on the",
    "start": "1938720",
    "end": "1945380"
  },
  {
    "text": "previous origin so now we have the information that's open when it occurs at the location of X2 can only",
    "start": "1945380",
    "end": "1952279"
  },
  {
    "text": "transition to the system called read at ox12 so the transition from this point",
    "start": "1952279",
    "end": "1957320"
  },
  {
    "text": "to this point here is no longer possible and we've worked on this for quite a",
    "start": "1957320",
    "end": "1962840"
  },
  {
    "text": "while now if we have evaluated it and it seems to actually do what we intended it to do so it poses even more significant",
    "start": "1962840",
    "end": "1970580"
  },
  {
    "text": "restrictions but at the cost of performance now before I finish my presentation here",
    "start": "1970580",
    "end": "1976700"
  },
  {
    "text": "I want to point you to a proof of concept uh you can find it on GitHub uh one thing that I want to point out it's",
    "start": "1976700",
    "end": "1982940"
  },
  {
    "text": "an academic proof of concept so there are still restrictions I'm currently",
    "start": "1982940",
    "end": "1988159"
  },
  {
    "text": "working also on it to make it more easy to use because it's quite difficult",
    "start": "1988159",
    "end": "1993200"
  },
  {
    "text": "right now but you can find a proof of concept implementation on GitHub and I'm",
    "start": "1993200",
    "end": "1999080"
  },
  {
    "text": "also working on releasing our more fine-grained solution there as well if you want more information so there's",
    "start": "1999080",
    "end": "2006179"
  },
  {
    "text": "obviously not enough time to go into all the details so you can find more details in our paper you have all the",
    "start": "2006179",
    "end": "2012460"
  },
  {
    "text": "information implementation details where we discuss even potential improvements that are going even further than what we",
    "start": "2012460",
    "end": "2018460"
  },
  {
    "text": "have currently limitations more extensive security discussion we also demonstrated in our paper uh how a",
    "start": "2018460",
    "end": "2025899"
  },
  {
    "text": "specific bug would have been prevented if our Implement if the application would have prevent been protected by",
    "start": "2025899",
    "end": "2032980"
  },
  {
    "text": "svip and you can find it on archive now a brief recap",
    "start": "2032980",
    "end": "2038980"
  },
  {
    "text": "um so with svip we do provide this Integrity to use the kernel transitions that we were not able to do directly",
    "start": "2038980",
    "end": "2044799"
  },
  {
    "text": "with CFI and also not directly with secon we were also able to provide security",
    "start": "2044799",
    "end": "2051158"
  },
  {
    "text": "via our Cisco Transitions and our origin checks and one thing that I also want to point",
    "start": "2051159",
    "end": "2057398"
  },
  {
    "text": "out similar to our automated second filter generation it is fully automized it does not require any",
    "start": "2057399",
    "end": "2063878"
  },
  {
    "text": "action body developer except adding like con compiler Flags otherwise it's fully",
    "start": "2063879",
    "end": "2069940"
  },
  {
    "text": "automated and it has minimal runtime overhead of less than two percent",
    "start": "2069940",
    "end": "2075339"
  },
  {
    "text": "um as we have seen with that I would like to thank you for your attention and if you have any questions please feel",
    "start": "2075339",
    "end": "2081580"
  },
  {
    "text": "free to ask [Music]",
    "start": "2081580",
    "end": "2087388"
  },
  {
    "text": "[Music]",
    "start": "2091239",
    "end": "2094339"
  }
]