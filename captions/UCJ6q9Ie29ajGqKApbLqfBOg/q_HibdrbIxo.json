[
  {
    "text": "uh my name is Alex Blunda i work as a software security engineer for Intel's open source technology center in Romania",
    "start": "160",
    "end": "8080"
  },
  {
    "text": "um today's talk is focused on a fuzzing approach that target system components",
    "start": "8080",
    "end": "13759"
  },
  {
    "text": "in Android the main points of uh the",
    "start": "13759",
    "end": "18920"
  },
  {
    "text": "presentation first we'll have a section that deals with a set of general methods",
    "start": "18920",
    "end": "24080"
  },
  {
    "text": "and concepts that can be used for fuzzing in an Android environment uh this approach will not try to offer a",
    "start": "24080",
    "end": "31199"
  },
  {
    "text": "complete picture but rather to give an example or a starting point for someone who is interested in this topic then",
    "start": "31199",
    "end": "38399"
  },
  {
    "text": "we'll see how this approach applies to several real life fuzzing uh targets",
    "start": "38399",
    "end": "44160"
  },
  {
    "text": "from the Android OS we'll see how the approach applies to fuzzing stage fright",
    "start": "44160",
    "end": "49760"
  },
  {
    "text": "which is the media framework in Android and then we'll see how this approach applies to the Android application",
    "start": "49760",
    "end": "56320"
  },
  {
    "text": "installer towards the end of the session we'll also have an alternative approach we'll",
    "start": "56320",
    "end": "63039"
  },
  {
    "text": "discuss how to use the popular American fuzzy loop inside the the Android",
    "start": "63039",
    "end": "69760"
  },
  {
    "text": "OS these will be the the main topics uh for the general fuzzing approach first",
    "start": "72520",
    "end": "79439"
  },
  {
    "text": "we will see a few methods in which we can generate demo form data for our fuzzing needs the actual execution or",
    "start": "79439",
    "end": "87920"
  },
  {
    "text": "running of the tests won't be taken into consideration for this section because this is a process that is highly",
    "start": "87920",
    "end": "93920"
  },
  {
    "text": "specific for um each target so we will discuss about this in more into detail",
    "start": "93920",
    "end": "100159"
  },
  {
    "text": "um for each example for each project example um then we will go on and see",
    "start": "100159",
    "end": "105759"
  },
  {
    "text": "how we can monitor the the results inside the fuzzing campaign in Android",
    "start": "105759",
    "end": "111759"
  },
  {
    "text": "we will see how to do this and to get the results in real time in the fortunate case when we are",
    "start": "111759",
    "end": "117759"
  },
  {
    "text": "running a fuzzing campaign and we have uh a lot of results a lot of crashes we",
    "start": "117759",
    "end": "123920"
  },
  {
    "text": "need a way to uh automatically uh sort out the unique issues so we can see we",
    "start": "123920",
    "end": "130800"
  },
  {
    "text": "can develop a triage mechanism we'll see how to uh how to do this and in the end",
    "start": "130800",
    "end": "137440"
  },
  {
    "text": "when we have only the unique issues the the few unique issues we need a way to",
    "start": "137440",
    "end": "143280"
  },
  {
    "text": "uh analyze them to debug them to uh sort out to sort them um based on their",
    "start": "143280",
    "end": "149599"
  },
  {
    "text": "severity and to see if they're exploitable or not",
    "start": "149599",
    "end": "154920"
  },
  {
    "text": "so generally speaking um when we talk about fuzzing we have mutational fuzzing",
    "start": "155440",
    "end": "161519"
  },
  {
    "text": "on the one hand and generation fuzzing on the other hand mutational fuzzing means that we take uh an initial set of",
    "start": "161519",
    "end": "169360"
  },
  {
    "text": "valid inputs or test cases and we try to apply different mutations to them um we",
    "start": "169360",
    "end": "176319"
  },
  {
    "text": "need to take into consideration that while applying those mutations we need to make sure that the target component",
    "start": "176319",
    "end": "182879"
  },
  {
    "text": "the system that we are fuzzing needs to uh believe that the input that we are",
    "start": "182879",
    "end": "188000"
  },
  {
    "text": "feeding is valid so we need to fuzz those initial uh test cases but keep",
    "start": "188000",
    "end": "194319"
  },
  {
    "text": "them structurally valid generation the approach on uh generation fuzzing um is",
    "start": "194319",
    "end": "200159"
  },
  {
    "text": "based on the fact that we try to create the malform input from scratch we need to know the internals of the format or",
    "start": "200159",
    "end": "207519"
  },
  {
    "text": "the structure of the the data that uh we are feeding to the target and uh based on that format we",
    "start": "207519",
    "end": "215360"
  },
  {
    "text": "need to try to uh create an input that is also malformed but also structurally",
    "start": "215360",
    "end": "222840"
  },
  {
    "text": "valid um for the projects that I'm going to talk about today uh this is the tool",
    "start": "222840",
    "end": "228400"
  },
  {
    "text": "set that uh we've been using so first there is the basic fuzzing framework uh",
    "start": "228400",
    "end": "233840"
  },
  {
    "text": "which is a mutational fuzzer that um targets application that applications",
    "start": "233840",
    "end": "239120"
  },
  {
    "text": "that consume uh file input um this uh",
    "start": "239120",
    "end": "244159"
  },
  {
    "text": "tool the BFF is based on another popular tool Zuzu it's based on a modified",
    "start": "244159",
    "end": "249280"
  },
  {
    "text": "version of this tool then we have fuzbox which is actually a very small tool uh",
    "start": "249280",
    "end": "255439"
  },
  {
    "text": "but a more more specialized one uh it specializes in targeting multimedia",
    "start": "255439",
    "end": "261160"
  },
  {
    "text": "codex uh both of these tools work on Linux environments um then we have",
    "start": "261160",
    "end": "268280"
  },
  {
    "text": "Redamza redamza is actually a collection of um many uh small fuzzing tools its",
    "start": "268280",
    "end": "275440"
  },
  {
    "text": "main advantage and the reason why we used it for our project projects is the",
    "start": "275440",
    "end": "281040"
  },
  {
    "text": "fact that you can pass a seed to it so when you actually get a crash you can easily go back and reproduce that crash",
    "start": "281040",
    "end": "288479"
  },
  {
    "text": "and also there's the American fuzzy loop uh I think you are all familiar with it",
    "start": "288479",
    "end": "293600"
  },
  {
    "text": "i'm going to talk more into detail in a uh about it into a in a separate section of the the",
    "start": "293600",
    "end": "301120"
  },
  {
    "text": "presentation so let's say we've generated our data and we've executed it",
    "start": "303400",
    "end": "310080"
  },
  {
    "text": "on the device we need a way to see what happens if it's possible in real in real",
    "start": "310080",
    "end": "316720"
  },
  {
    "text": "time with the input that we are feeding to to the Android",
    "start": "316720",
    "end": "321680"
  },
  {
    "text": "OS if you are familiar with uh the logging system in Android you know that",
    "start": "321960",
    "end": "327199"
  },
  {
    "text": "you can uh access it through the load command the thing is that each time a fatal",
    "start": "327199",
    "end": "333759"
  },
  {
    "text": "crash um occurs so each time a crash occurs at the native code level in",
    "start": "333759",
    "end": "339759"
  },
  {
    "text": "Android a fatal message is generated and inserted into the load buffer the locut",
    "start": "339759",
    "end": "345039"
  },
  {
    "text": "buffer contains uh messages sent from all the system components and not only",
    "start": "345039",
    "end": "350160"
  },
  {
    "text": "from applications as well and they are sorted using priorities there are in",
    "start": "350160",
    "end": "356080"
  },
  {
    "text": "total seven priorities for messages that are included into local load buffer um",
    "start": "356080",
    "end": "363759"
  },
  {
    "text": "we are interested in the fatal messages so what we do each time",
    "start": "363759",
    "end": "369560"
  },
  {
    "text": "we send a test test case to be executed on an Android device we also",
    "start": "369560",
    "end": "375759"
  },
  {
    "text": "artificially insert um fatal message in the load buffer so",
    "start": "375759",
    "end": "382720"
  },
  {
    "text": "for example this is an artificial inserted message into the load buffer",
    "start": "382720",
    "end": "388400"
  },
  {
    "text": "you can see it has a fatal priority here um you can mention using this",
    "start": "388400",
    "end": "395800"
  },
  {
    "text": "command the priority the component and other useful information",
    "start": "395800",
    "end": "401919"
  },
  {
    "text": "about the test case usually uh I'd recommend that you insert here uh",
    "start": "401919",
    "end": "407520"
  },
  {
    "text": "information about how to actually reproduce the crash for example if you are fuzzing media files uh this would be",
    "start": "407520",
    "end": "414880"
  },
  {
    "text": "a more simpler example we could include here the name of the media file that was",
    "start": "414880",
    "end": "420639"
  },
  {
    "text": "sent uh to be decoded on the device and then have that media file saved let's",
    "start": "420639",
    "end": "426720"
  },
  {
    "text": "say locally on the local machine that is connected to to the Android device so",
    "start": "426720",
    "end": "433120"
  },
  {
    "text": "each time we send a test case we log it and when an actual fatal message that is",
    "start": "433120",
    "end": "438720"
  },
  {
    "text": "actually generated by the system like this one let's say a segmentation fault",
    "start": "438720",
    "end": "443840"
  },
  {
    "text": "we will have a way to reproduce that crash because the test cases are sent",
    "start": "443840",
    "end": "449319"
  },
  {
    "text": "sequentially we know that this segmentation fault is gen is produced by",
    "start": "449319",
    "end": "454880"
  },
  {
    "text": "this [Music] component also uh as I said earlier it's",
    "start": "454880",
    "end": "462479"
  },
  {
    "text": "important to note that we must include in in the message a way to actually reproduce that crash because in some",
    "start": "462479",
    "end": "468880"
  },
  {
    "text": "cases it won't be possible to actually save the the input that um that caused",
    "start": "468880",
    "end": "474639"
  },
  {
    "text": "that crash you can you can have information like a seed or or stuff like that",
    "start": "474639",
    "end": "482280"
  },
  {
    "text": "so we've um generated the data we've executed the data and we've generated",
    "start": "483759",
    "end": "489599"
  },
  {
    "text": "the logs for a testing campaign let's say we've run a testing campaign for I",
    "start": "489599",
    "end": "495680"
  },
  {
    "text": "don't know a period of time one day and we've generated that log that has the template that I mentioned in the",
    "start": "495680",
    "end": "501599"
  },
  {
    "text": "previous slide um if we have a large number of crashes uh and we can go manually",
    "start": "501599",
    "end": "508960"
  },
  {
    "text": "through them we can go and check each uh fatal signal and see that the input that",
    "start": "508960",
    "end": "514479"
  },
  {
    "text": "caused it and see if it's unique or not and gather information about that crash",
    "start": "514479",
    "end": "520640"
  },
  {
    "text": "we need a way to uh sort them in an automated manner um what we do is",
    "start": "520640",
    "end": "526640"
  },
  {
    "text": "besides the fatal message that is generated each time um a crash occurs in",
    "start": "526640",
    "end": "532640"
  },
  {
    "text": "the Android locat we have an entry that is generated",
    "start": "532640",
    "end": "539120"
  },
  {
    "text": "in the data tombstones files on the device so we have a tombstone that is generated for each crash in",
    "start": "539120",
    "end": "545560"
  },
  {
    "text": "Android the tombstone file contains a lot of useful information contains the type of signal the code for that signal",
    "start": "545560",
    "end": "553279"
  },
  {
    "text": "uh the value of the registries at the time of the crash and the back trace for that",
    "start": "553279",
    "end": "559720"
  },
  {
    "text": "crash uh what is interesting for us from the perspective of from the perspective",
    "start": "559720",
    "end": "564959"
  },
  {
    "text": "of the triage mechanism is the program counter value for the last component uh",
    "start": "564959",
    "end": "570560"
  },
  {
    "text": "in the back trace so this component this value will be unique for",
    "start": "570560",
    "end": "577519"
  },
  {
    "text": "each crash the thing is that we need to uh",
    "start": "577519",
    "end": "583279"
  },
  {
    "text": "carefully apply this mechanism because if we are testing on different images on",
    "start": "583279",
    "end": "589440"
  },
  {
    "text": "different builds of Android if we will have the same identical crash the",
    "start": "589440",
    "end": "595440"
  },
  {
    "text": "program counter will differ so this mechanism applies only if we are testing on the exact same build",
    "start": "595440",
    "end": "601680"
  },
  {
    "text": "on different runs here are more details about the",
    "start": "601680",
    "end": "606800"
  },
  {
    "text": "actual implementation of the triage mechanism so let's say we had the initial testing phase where we executed",
    "start": "606800",
    "end": "614720"
  },
  {
    "text": "the files and we generated that the logs that have that specific format we save",
    "start": "614720",
    "end": "620240"
  },
  {
    "text": "the logs with that specific format and we parse them identify the the",
    "start": "620240",
    "end": "626440"
  },
  {
    "text": "crashes see what input produced the crash it can either be uh directly the",
    "start": "626440",
    "end": "633279"
  },
  {
    "text": "the file that produced that crash or ways to reproduce it and for each of the",
    "start": "633279",
    "end": "638880"
  },
  {
    "text": "identified inputs what we do is try to confirm the crash we resend it to the",
    "start": "638880",
    "end": "644079"
  },
  {
    "text": "device see if it actually crashes the device if it does it must generate a",
    "start": "644079",
    "end": "649519"
  },
  {
    "text": "tombstone so we grab that tombstone we check the program counter from the back trace and if it's a value that has not",
    "start": "649519",
    "end": "656640"
  },
  {
    "text": "been previously encountered then it means that uh it is a new issue what we",
    "start": "656640",
    "end": "662160"
  },
  {
    "text": "do then is we save the tombstone because we want information about that crash and",
    "start": "662160",
    "end": "667200"
  },
  {
    "text": "also we save the input if it's possible or the exact information about how to",
    "start": "667200",
    "end": "673040"
  },
  {
    "text": "reproduce the the",
    "start": "673040",
    "end": "675920"
  },
  {
    "text": "crash after sorting the unique issues we are left with a number generally",
    "start": "678279",
    "end": "683920"
  },
  {
    "text": "speaking we in most cases we are left with a number that we can go through manually and try to analyze them the",
    "start": "683920",
    "end": "691760"
  },
  {
    "text": "first uh place we go to see information about the crash is as mentioned earlier",
    "start": "691760",
    "end": "696800"
  },
  {
    "text": "the the tombstone file the signal type and the signal code can give us uh the",
    "start": "696800",
    "end": "703839"
  },
  {
    "text": "first clues of what's going on with that that crash um there al there there are also useful",
    "start": "703839",
    "end": "710800"
  },
  {
    "text": "information in the registry values um the tombstone file generally contains useful information",
    "start": "710800",
    "end": "718000"
  },
  {
    "text": "from locat so additional information besides uh the stuff that is that is on",
    "start": "718000",
    "end": "723200"
  },
  {
    "text": "the screen where else can we go we can go to",
    "start": "723200",
    "end": "729040"
  },
  {
    "text": "the message um those are two examples of crashes on stage fright",
    "start": "729040",
    "end": "736959"
  },
  {
    "text": "the first is an error four and an error six and this is how uh we can identify",
    "start": "736959",
    "end": "745440"
  },
  {
    "text": "what is going on with these errors so one is an invalid read and one is an",
    "start": "745440",
    "end": "750959"
  },
  {
    "text": "invalid right generally speaking in stage fright",
    "start": "750959",
    "end": "758440"
  },
  {
    "text": "um these are the types of issues that that that we've encountered but I'll talk about this a bit later on",
    "start": "758440",
    "end": "766959"
  },
  {
    "text": "you can also use GDB for that you first need to uh enable GDB server on the",
    "start": "766959",
    "end": "774320"
  },
  {
    "text": "device you can do this in two ways you can either start the process that you",
    "start": "774320",
    "end": "780720"
  },
  {
    "text": "want to debug and then attach the GDB server to the process ID of the target",
    "start": "780720",
    "end": "789440"
  },
  {
    "text": "or you can actually if the process can be started using an executable or binary you can start it directly using GDB",
    "start": "789440",
    "end": "796000"
  },
  {
    "text": "server and mention the port that will later be used from the local machine to",
    "start": "796000",
    "end": "801360"
  },
  {
    "text": "mention the target then all you have to do is forward the TCP port on the local",
    "start": "801360",
    "end": "807040"
  },
  {
    "text": "machine on the machine that is connected to the Android device start GDB target the the remote",
    "start": "807040",
    "end": "814160"
  },
  {
    "text": "port and continue the resume the process execution it's also useful if you have the Android",
    "start": "814160",
    "end": "821360"
  },
  {
    "text": "3 and you've built an image that you've actually flashed on the device uh you can load the the debugging symbols and",
    "start": "821360",
    "end": "828320"
  },
  {
    "text": "have more information on your debugging session if you have access to the source",
    "start": "828320",
    "end": "835760"
  },
  {
    "text": "code which is the case of Android generally speaking there are some binaries that you have that you don't",
    "start": "835760",
    "end": "841920"
  },
  {
    "text": "have access to the source code um you would like to know what was the exact",
    "start": "841920",
    "end": "847600"
  },
  {
    "text": "line of the source code that produced the crash for that you take the",
    "start": "847600",
    "end": "853040"
  },
  {
    "text": "tombstone file and the back trace and you identify the program counter value",
    "start": "853040",
    "end": "859360"
  },
  {
    "text": "for the component that you are debugging in the example on the screen we don't",
    "start": "859360",
    "end": "864560"
  },
  {
    "text": "really want to see the exact line of code from the functions from lip C but actually we want to see the component",
    "start": "864560",
    "end": "871920"
  },
  {
    "text": "that crashed in lip stage right for example and that is why we take this",
    "start": "871920",
    "end": "877279"
  },
  {
    "text": "program counter value and pass it to address to line uh this is the path to",
    "start": "877279",
    "end": "883519"
  },
  {
    "text": "the symbols from the Android 3 so you need to build uh an image and actually",
    "start": "883519",
    "end": "888800"
  },
  {
    "text": "flash it on the device in order to uh use address to line in this",
    "start": "888800",
    "end": "894800"
  },
  {
    "text": "way okay and now I'm going to move on to the first u example how we applied uh",
    "start": "895880",
    "end": "903040"
  },
  {
    "text": "the things I've mentioned uh until now onto a real testing",
    "start": "903040",
    "end": "909639"
  },
  {
    "text": "scenario the stere framework is the media framework in Android it has been highly publicized lately because of the",
    "start": "909639",
    "end": "916160"
  },
  {
    "text": "so-called stage right bug uh I'm going to try to to show you how to actually",
    "start": "916160",
    "end": "921440"
  },
  {
    "text": "perform fuzzing against it first of all a few reasons that make audio and",
    "start": "921440",
    "end": "929839"
  },
  {
    "text": "video attractive vectors attack vectors um first there's",
    "start": "929839",
    "end": "935600"
  },
  {
    "text": "the fact that audio and video are binary streams that contain complex data so uh",
    "start": "935600",
    "end": "941600"
  },
  {
    "text": "these streams are parsed by a lot of specialized components which can result in a lot of u memory issues memory",
    "start": "941600",
    "end": "949440"
  },
  {
    "text": "corruption issues then there is the fact that um we have a large attack",
    "start": "949440",
    "end": "955959"
  },
  {
    "text": "surface this means that the chances of uh finding uh an issue that is actually",
    "start": "955959",
    "end": "961279"
  },
  {
    "text": "exploitable um are a bit higher in Android and in general i think uh there",
    "start": "961279",
    "end": "968399"
  },
  {
    "text": "is also the user perception that media files are harmless so users normal users",
    "start": "968399",
    "end": "974240"
  },
  {
    "text": "won't have any second thoughts when downloading or playing media files from untrusted",
    "start": "974240",
    "end": "980440"
  },
  {
    "text": "sources and also in Android uh specifically because it has um",
    "start": "980440",
    "end": "986320"
  },
  {
    "text": "permission based security model you don't really need um any special permissions when for example surfing the",
    "start": "986320",
    "end": "993120"
  },
  {
    "text": "the web and downloading an a media file and playing it or also there was the",
    "start": "993120",
    "end": "1000480"
  },
  {
    "text": "attack vector that made the stage right bug popular sending the the media file through an",
    "start": "1000480",
    "end": "1007199"
  },
  {
    "text": "MMS this is the overview of the testing process in this case so what we need to have is an",
    "start": "1008199",
    "end": "1015839"
  },
  {
    "text": "initial large set of valid media files we try to fudge them so to malform",
    "start": "1015839",
    "end": "1023519"
  },
  {
    "text": "them in various ways using the tool set that I mentioned in the beginning of the presentation but in the same time trying",
    "start": "1023519",
    "end": "1030400"
  },
  {
    "text": "to keep them structurally valid we then direct them to the appropriate",
    "start": "1030400",
    "end": "1035558"
  },
  {
    "text": "decoders so for this this specific case the target is the stage right media framework we monitored the system for",
    "start": "1035559",
    "end": "1042880"
  },
  {
    "text": "potential issues uh using a very similar approach to the one that I've mentioned",
    "start": "1042880",
    "end": "1048760"
  },
  {
    "text": "earlier and then because it is the case u the project gave a lot of crisis a lot",
    "start": "1048760",
    "end": "1056080"
  },
  {
    "text": "of results we passed the results through a triage mechanism and analyze the issues",
    "start": "1056080",
    "end": "1063200"
  },
  {
    "text": "separately in the initial stages of the project so this project began sometimes",
    "start": "1064520",
    "end": "1070160"
  },
  {
    "text": "in uh March 2014 we looked and saw tried to figure",
    "start": "1070160",
    "end": "1076480"
  },
  {
    "text": "out how to actually pass the invalid media files to our",
    "start": "1076480",
    "end": "1082280"
  },
  {
    "text": "target the first solutions were passing the media files to uh different uh",
    "start": "1082280",
    "end": "1088640"
  },
  {
    "text": "player applications from Android or trying to use the Java API",
    "start": "1088640",
    "end": "1094320"
  },
  {
    "text": "however the best solution we came up with was the stage right command line interface that can be optionally built",
    "start": "1094320",
    "end": "1100480"
  },
  {
    "text": "from the Android tree into uh and then uh pushed onto an Android device uh this",
    "start": "1100480",
    "end": "1107440"
  },
  {
    "text": "had the main advantage that it bypassed the Java layer so we had access directly to the native uh code layer of the",
    "start": "1107440",
    "end": "1114720"
  },
  {
    "text": "states right media framework and that is actually where all the crashes occur all",
    "start": "1114720",
    "end": "1120000"
  },
  {
    "text": "the issues appear this is an example of uh the usage of",
    "start": "1120000",
    "end": "1125760"
  },
  {
    "text": "this binary it has the main functionality of decoding audio and",
    "start": "1125760",
    "end": "1131120"
  },
  {
    "text": "video files also for audio files it can uh",
    "start": "1131120",
    "end": "1136400"
  },
  {
    "text": "offer playback capabilities there is the advantage also that you can try to force the usage of a",
    "start": "1136400",
    "end": "1143120"
  },
  {
    "text": "software codec and a hardware codec so we had to test in both the scenarios and",
    "start": "1143120",
    "end": "1149120"
  },
  {
    "text": "there also uh is the possibility of extracting the thumbnail for the video file this is also a place where crisis",
    "start": "1149120",
    "end": "1155440"
  },
  {
    "text": "can occur when parsing the image associated with the video",
    "start": "1155440",
    "end": "1160720"
  },
  {
    "text": "file this is an example of an actual log that is constructed using the approach",
    "start": "1161240",
    "end": "1166480"
  },
  {
    "text": "I've mentioned earlier uh for this specific example the files",
    "start": "1166480",
    "end": "1172240"
  },
  {
    "text": "were malformed using the basic fising framework which as I said is based on a modified version of",
    "start": "1172240",
    "end": "1179000"
  },
  {
    "text": "Zuzu so each time we what we do is we have the initial valid media files we",
    "start": "1179000",
    "end": "1185280"
  },
  {
    "text": "fuz them locally so not on the device given performance issues and then for each fuz file we send it to the device",
    "start": "1185280",
    "end": "1192240"
  },
  {
    "text": "we push it onto the device and try to decode it passing it as a parameter to the stage fright binary each time we do",
    "start": "1192240",
    "end": "1199120"
  },
  {
    "text": "this we also insert the fatal message",
    "start": "1199120",
    "end": "1204160"
  },
  {
    "text": "with the file name so in this case this is simple we have the file name of the media file that is also saved locally on",
    "start": "1204160",
    "end": "1211679"
  },
  {
    "text": "our computer when an actual segmentation fold appears we'll know that this file",
    "start": "1211679",
    "end": "1217919"
  },
  {
    "text": "is responsible for this crash and it will be easy to reproduce it because we have the file",
    "start": "1217919",
    "end": "1224799"
  },
  {
    "text": "saved these are some results so uh the project as I said earlier began in March",
    "start": "1225400",
    "end": "1232559"
  },
  {
    "text": "2014 this was the time when we first uh reported the the first issues to Google",
    "start": "1232559",
    "end": "1240640"
  },
  {
    "text": "the initial results so during the first week on a cluster of devices that was composed of less than 20I Android",
    "start": "1240640",
    "end": "1247760"
  },
  {
    "text": "devices we had thousands and thousands of crashes and that's why we had to come out with automated triage mechanism to",
    "start": "1247760",
    "end": "1254400"
  },
  {
    "text": "sort out through the unique issues the first severe issues that uh affected",
    "start": "1254400",
    "end": "1260080"
  },
  {
    "text": "the stage right library um were included in the Android partner security bulletin",
    "start": "1260080",
    "end": "1266400"
  },
  {
    "text": "from September 2014 these were integger overflows much similar to the issues",
    "start": "1266400",
    "end": "1272960"
  },
  {
    "text": "that are commonly known as the stage right bug uh they have the the CV ids",
    "start": "1272960",
    "end": "1278640"
  },
  {
    "text": "from the screen the tool is now open sourced uh it has been open sourced in",
    "start": "1278640",
    "end": "1283679"
  },
  {
    "text": "February 2015 it's available on GitHub we don't actually use it anymore as it",
    "start": "1283679",
    "end": "1290799"
  },
  {
    "text": "is we use it as a complimentary solution u alongside with AFL i'll be talking about this to towards the end of the",
    "start": "1290799",
    "end": "1299080"
  },
  {
    "text": "session i'm going to move on towards the next project example which is fuzzing",
    "start": "1299080",
    "end": "1304240"
  },
  {
    "text": "the Android application install process this is an interesting project",
    "start": "1304240",
    "end": "1310960"
  },
  {
    "text": "from um a few perspectives first there is the fact that the component that uh",
    "start": "1310960",
    "end": "1317760"
  },
  {
    "text": "handles the install process in Android more specifically the install demon runs with high system privileges so any issue",
    "start": "1317760",
    "end": "1325760"
  },
  {
    "text": "that is found and is found to be exploitable um can be considered to be a",
    "start": "1325760",
    "end": "1331919"
  },
  {
    "text": "high-profile issue then um having an APK so an APK is uh the",
    "start": "1331919",
    "end": "1340240"
  },
  {
    "text": "file that uh we use to install an application on the device the an APK is",
    "start": "1340240",
    "end": "1345440"
  },
  {
    "text": "the file that contains the the Java the compile Java code and the native libraries it's one of the few ways in",
    "start": "1345440",
    "end": "1352480"
  },
  {
    "text": "which an unprivileged user can send input towards uh system components towards privileged components in Android",
    "start": "1352480",
    "end": "1359360"
  },
  {
    "text": "and also there is the fact that um issues that are regularly found by",
    "start": "1359360",
    "end": "1364640"
  },
  {
    "text": "fuzzing um are not usually found by regular validation so are not found by",
    "start": "1364640",
    "end": "1369919"
  },
  {
    "text": "checks that are uh done for example uh before the applications are uploaded",
    "start": "1369919",
    "end": "1375280"
  },
  {
    "text": "into the play store we've identified two approaches to",
    "start": "1375280",
    "end": "1383280"
  },
  {
    "text": "testing approaches one is specific to Android versions before Lollipop because um of the",
    "start": "1383280",
    "end": "1391360"
  },
  {
    "text": "Dalvvic art switch so before Android Lollipop we had the Dalvvic virtual",
    "start": "1391360",
    "end": "1396799"
  },
  {
    "text": "machine after that for Lollipop and Marshmallow we have the Android runtime art um while documenting the steps that",
    "start": "1396799",
    "end": "1405280"
  },
  {
    "text": "are taken during the regular install process in Android we've seen that uh",
    "start": "1405280",
    "end": "1411600"
  },
  {
    "text": "there are two components for each of the Android versions that are interesting from a fuzzing perspective in the case",
    "start": "1411600",
    "end": "1418080"
  },
  {
    "text": "of Lollipop and Art it was this component dex2 out and in the case of KitKat and other previous versions and",
    "start": "1418080",
    "end": "1425400"
  },
  {
    "text": "DVI it was uh this component uh dex2 takes uh a dex file as",
    "start": "1425400",
    "end": "1433440"
  },
  {
    "text": "a parameter and converts it to an oat file which is actually an regular elf",
    "start": "1433440",
    "end": "1439400"
  },
  {
    "text": "executable that is then used to uh open the application it's the the file is",
    "start": "1439400",
    "end": "1445200"
  },
  {
    "text": "stored on the device and it's used to to to play the application uh Dexop uses um",
    "start": "1445200",
    "end": "1452559"
  },
  {
    "text": "a different file format so it it converts the dex file into an optimized dex which is then stored onto the device",
    "start": "1452559",
    "end": "1460480"
  },
  {
    "text": "so these are our main targets the dex and the dexop uh the thing is that the",
    "start": "1460480",
    "end": "1466799"
  },
  {
    "text": "installed demon which is the component that runs with high system privileges forks this pro processes uh without",
    "start": "1466799",
    "end": "1473679"
  },
  {
    "text": "dropping privileges so uh these are in turn uh privileged components",
    "start": "1473679",
    "end": "1480919"
  },
  {
    "text": "this will this would be the general testing flow we need to have an initial",
    "start": "1482640",
    "end": "1489039"
  },
  {
    "text": "set of valid APK files from these valid APK files what we",
    "start": "1489039",
    "end": "1497039"
  },
  {
    "text": "do is we take each APK and we extract its components this is basically an",
    "start": "1497039",
    "end": "1503039"
  },
  {
    "text": "unzip operation because uh the APK is generally speaking just an archive file",
    "start": "1503039",
    "end": "1510240"
  },
  {
    "text": "then we fuzz the APK components that are of interest to us and then in the case of Dalvvic we",
    "start": "1510240",
    "end": "1517679"
  },
  {
    "text": "need to repackage the APK and send it to the Android install process in the case of art the things are more simpler we",
    "start": "1517679",
    "end": "1524559"
  },
  {
    "text": "can actually par we can actually pass uh different components directly to Dex2 we'll see about",
    "start": "1524559",
    "end": "1532799"
  },
  {
    "text": "that these are the components of an APK",
    "start": "1533960",
    "end": "1539320"
  },
  {
    "text": "the things that are of interest to us are the classes point dex because this",
    "start": "1539679",
    "end": "1545120"
  },
  {
    "text": "is the file that we will actually be fuzzing an alternative fuzzing target",
    "start": "1545120",
    "end": "1550880"
  },
  {
    "text": "could be the Android manifest XML but this is not in the scope of this project",
    "start": "1550880",
    "end": "1555919"
  },
  {
    "text": "u metain directory contains the signing information for the APK so for example",
    "start": "1555919",
    "end": "1561679"
  },
  {
    "text": "if we have an APK we unzip it and we start to modify things around it the manifest file or the DEX file and then",
    "start": "1561679",
    "end": "1568640"
  },
  {
    "text": "we repackage it and try to reinstall it on the device uh that won't be possible",
    "start": "1568640",
    "end": "1573840"
  },
  {
    "text": "because the signing information won't match so after we u modify anything in",
    "start": "1573840",
    "end": "1581440"
  },
  {
    "text": "the APK component if you want to reinstall that application we need to resign it",
    "start": "1581440",
    "end": "1588919"
  },
  {
    "text": "this is the approach on uh Android KitKat on",
    "start": "1591760",
    "end": "1596840"
  },
  {
    "text": "desktop the thing is that although Dexop is a standalone binary in the Android",
    "start": "1596840",
    "end": "1603679"
  },
  {
    "text": "device so you can see it in the Android device you can pass um there are a lot",
    "start": "1603679",
    "end": "1608720"
  },
  {
    "text": "of parameters to pass to it and these can be obtained from a shell like environment so what the solution that we",
    "start": "1608720",
    "end": "1615760"
  },
  {
    "text": "came up with was to actually simulate the entire APK install process and for",
    "start": "1615760",
    "end": "1622360"
  },
  {
    "text": "that so we take an APK we unzip it we",
    "start": "1622360",
    "end": "1627760"
  },
  {
    "text": "fuz the extracted dex file for the moment let's say we fuz it and I'll I'll",
    "start": "1627760",
    "end": "1632960"
  },
  {
    "text": "explain later exactly how we do this because uh it's important we remove the",
    "start": "1632960",
    "end": "1638559"
  },
  {
    "text": "original dex from the initial APK using the AAP tool We repackage the APK with",
    "start": "1638559",
    "end": "1644799"
  },
  {
    "text": "the new fuzz with the new fuzzed uh decks this is done also with the",
    "start": "1644799",
    "end": "1651799"
  },
  {
    "text": "AAP we need to create a key store so we can actually sign that APK we do that",
    "start": "1651799",
    "end": "1658640"
  },
  {
    "text": "with the key tool we remove the old outdated meta",
    "start": "1658640",
    "end": "1664320"
  },
  {
    "text": "directory and then we resign the APK then all we have to do is just run ADB install and try to install that APK",
    "start": "1664320",
    "end": "1671919"
  },
  {
    "text": "dexop will actually be uh responsible for parsing the corrupt dex file and any",
    "start": "1671919",
    "end": "1679279"
  },
  {
    "text": "issues that will occur generally occur into this component into",
    "start": "1679279",
    "end": "1684440"
  },
  {
    "text": "desktop this is an example of a log that is constructed using the fuzzing",
    "start": "1684440",
    "end": "1689760"
  },
  {
    "text": "approach I've mentioned earlier uh for this scenario we've used the redsa tool",
    "start": "1689760",
    "end": "1697200"
  },
  {
    "text": "so what we need to have in each message that is inserted into the lockup buffer is the name of the APK the name of the",
    "start": "1697200",
    "end": "1704640"
  },
  {
    "text": "initial valid APK and the seed that we have used to file the DEX",
    "start": "1704640",
    "end": "1711240"
  },
  {
    "text": "file now we don't actually save each malformed APK we just have the initial",
    "start": "1711240",
    "end": "1718640"
  },
  {
    "text": "APK saved in one place and when we encounter a fatal signal like this one a",
    "start": "1718640",
    "end": "1723760"
  },
  {
    "text": "segmentation fault all we have to do is take the the initial valid APK and pass",
    "start": "1723760",
    "end": "1730640"
  },
  {
    "text": "it through the process I mentioned in the previous two slides and at the fuzzing uh step we can use our damsa to",
    "start": "1730640",
    "end": "1738399"
  },
  {
    "text": "fuzz um the dex file with this seed and this should give us the exact APK that",
    "start": "1738399",
    "end": "1744799"
  },
  {
    "text": "produced the crash in the case of Dex tote the things",
    "start": "1744799",
    "end": "1752000"
  },
  {
    "text": "are really more simpler because um also dex tote is a standalone binary in the",
    "start": "1752000",
    "end": "1758159"
  },
  {
    "text": "Android device shell you can pass a dex file to it and an um oat file that is",
    "start": "1758159",
    "end": "1764799"
  },
  {
    "text": "the output so all you have to do is just run dex to oat minus minus dex file and",
    "start": "1764799",
    "end": "1770240"
  },
  {
    "text": "the dex file you want to pass it and minus minus o file and a file name for",
    "start": "1770240",
    "end": "1775840"
  },
  {
    "text": "for the output this is the log example for this",
    "start": "1775840",
    "end": "1781720"
  },
  {
    "text": "case we have the name directly the name of the dex because in the case of the",
    "start": "1781720",
    "end": "1788720"
  },
  {
    "text": "the dex file we don't really need the apks so what we do is we have the initial pool of um APK files and we",
    "start": "1788720",
    "end": "1797520"
  },
  {
    "text": "extract from it the initial DEX files however if we do encounter um a",
    "start": "1797520",
    "end": "1804960"
  },
  {
    "text": "fatal signal like this one we take the initial um we take the initial DEX ID",
    "start": "1804960",
    "end": "1811399"
  },
  {
    "text": "and fuzz it with red and the seed if the it if dex2 crashes so we have a",
    "start": "1811399",
    "end": "1819039"
  },
  {
    "text": "crash in dex we actually also try to uh reproduce the crash in a normal user",
    "start": "1819039",
    "end": "1824559"
  },
  {
    "text": "scenario we try to include the dex file into the original APK and try to uh",
    "start": "1824559",
    "end": "1830720"
  },
  {
    "text": "produce the crash using this scenario also so for example if want if we would",
    "start": "1830720",
    "end": "1837279"
  },
  {
    "text": "want to include a P in a report we would include the DEX file but also the APK",
    "start": "1837279",
    "end": "1842640"
  },
  {
    "text": "file that would produce the crash it would be the same crash but with two different um attack vectors let's",
    "start": "1842640",
    "end": "1850960"
  },
  {
    "text": "say as I said earlier uh the actual fuzzing um of the dex file is a little",
    "start": "1851799",
    "end": "1857679"
  },
  {
    "text": "bit tricky we've identified three ways of performing the fuz the fuzzing",
    "start": "1857679",
    "end": "1863360"
  },
  {
    "text": "against the dex files the thing is that the Android OS employs a large number of",
    "start": "1863360",
    "end": "1868559"
  },
  {
    "text": "verifications at install time against the dex file to check if it's actually valid",
    "start": "1868559",
    "end": "1873679"
  },
  {
    "text": "so uh we've identified these three alternatives i'm going to go through each one of them um the first one is oh",
    "start": "1873679",
    "end": "1884000"
  },
  {
    "text": "um so these are examples of install verifications install verification",
    "start": "1884000",
    "end": "1889440"
  },
  {
    "text": "errors so if we have an dex file initial dex file and we start modifying things",
    "start": "1889440",
    "end": "1894640"
  },
  {
    "text": "through it these are the types of errors that we would encounter for example bad",
    "start": "1894640",
    "end": "1899760"
  },
  {
    "text": "file size but check some invalid header the thing is we don't want these uh errors to appear because it means that",
    "start": "1899760",
    "end": "1907279"
  },
  {
    "text": "the system didn't actually parse our input uh it just stopped at the header",
    "start": "1907279",
    "end": "1912720"
  },
  {
    "text": "it saw that the things aren't all right and um there there isn't a way actually",
    "start": "1912720",
    "end": "1918159"
  },
  {
    "text": "to produce a crash in this scenario so what we want to do is to trick the system into believing that the DEX file",
    "start": "1918159",
    "end": "1924240"
  },
  {
    "text": "is actually valid for this we need to understand the",
    "start": "1924240",
    "end": "1930159"
  },
  {
    "text": "DEX file format i'm not going to go very much into detail there are um a few important",
    "start": "1930159",
    "end": "1938480"
  },
  {
    "text": "sections first there is the header that contains general information about the file things like header size file size",
    "start": "1938480",
    "end": "1945679"
  },
  {
    "text": "check sums um magic numbers Indian tag but also specific information about each",
    "start": "1945679",
    "end": "1952600"
  },
  {
    "text": "section so for each section for the type ids proto ids the header will contain",
    "start": "1952600",
    "end": "1957919"
  },
  {
    "text": "two fields the offset for that uh section and the size for that section um",
    "start": "1957919",
    "end": "1964640"
  },
  {
    "text": "the the fields contain the actual content from the compile Java code from",
    "start": "1964640",
    "end": "1970080"
  },
  {
    "text": "the from the compile Java code and also there is an optional field the map that",
    "start": "1970080",
    "end": "1976080"
  },
  {
    "text": "contains information regarding the offsets and the type of content that is inside each uh section",
    "start": "1976080",
    "end": "1985640"
  },
  {
    "text": "so the first alternative would be take the dex file start fuzzing randomly the",
    "start": "1986960",
    "end": "1993880"
  },
  {
    "text": "file and then come back and try to repair as much as possible in this case",
    "start": "1993880",
    "end": "2000000"
  },
  {
    "text": "what we can repair is the magic number which is a constant the check sum because we can",
    "start": "2000000",
    "end": "2007679"
  },
  {
    "text": "recalculate the check sum for the resulting file after the fuzzing has been done uh this is also the case of",
    "start": "2007679",
    "end": "2014399"
  },
  {
    "text": "the shaan signature and the file size these can both be",
    "start": "2014399",
    "end": "2019480"
  },
  {
    "text": "recomputed the header size and the Indian tag are constant values and if uh",
    "start": "2019480",
    "end": "2025440"
  },
  {
    "text": "by any chance we modified it during the uh random fuzzing process we we come",
    "start": "2025440",
    "end": "2031919"
  },
  {
    "text": "back and we insert the correct values",
    "start": "2031919",
    "end": "2036440"
  },
  {
    "text": "the second approach is a more targeted one because the data section contains",
    "start": "2037519",
    "end": "2042640"
  },
  {
    "text": "the more the most interesting information like strings and variables we only fuzz this section so what we do",
    "start": "2042640",
    "end": "2050800"
  },
  {
    "text": "we take the the initial dex file we split it in three we have the first part",
    "start": "2050800",
    "end": "2057520"
  },
  {
    "text": "with the header and all the sections we had the second part the data and we have",
    "start": "2057520",
    "end": "2062878"
  },
  {
    "text": "the third part the map we fuzz only the data randomly using",
    "start": "2062879",
    "end": "2069800"
  },
  {
    "text": "redamza and then we glue all the chunks back together and we come back to the header",
    "start": "2069800",
    "end": "2076720"
  },
  {
    "text": "and try to fix as much as possible besides the fields from the header that",
    "start": "2076720",
    "end": "2082158"
  },
  {
    "text": "we've uh fixed as in the pro previous approach we can also take a look at the",
    "start": "2082159",
    "end": "2088800"
  },
  {
    "text": "map offset so for example if we if we fuzz the data and uh it grew in size the",
    "start": "2088800",
    "end": "2095200"
  },
  {
    "text": "offset of the map will change and this uh this field uh can be computed we have",
    "start": "2095200",
    "end": "2101200"
  },
  {
    "text": "information we can actually calculate uh how big is the fuzz data file and also",
    "start": "2101200",
    "end": "2108480"
  },
  {
    "text": "the data size these this is actually the approach that um gave the the most uh promising",
    "start": "2108480",
    "end": "2117920"
  },
  {
    "text": "results so the most crashes and the most interesting ones there is also this approach uh",
    "start": "2117920",
    "end": "2125119"
  },
  {
    "text": "which is a completely done fuzzing method we just take initial valid dex",
    "start": "2125119",
    "end": "2130240"
  },
  {
    "text": "files and we pass them through the basic fuzzing framework we don't look at the",
    "start": "2130240",
    "end": "2135520"
  },
  {
    "text": "header at all and then and just pass pass it back to the dexode binary this",
    "start": "2135520",
    "end": "2141359"
  },
  {
    "text": "would be an example of a log in this case um for this scenario we save all the all",
    "start": "2141359",
    "end": "2149599"
  },
  {
    "text": "the invalid DEX files that are being generated and if an actual uh segmentation fault occurs or rather",
    "start": "2149599",
    "end": "2156160"
  },
  {
    "text": "fatal signal we will have uh that DEX file saved on the local",
    "start": "2156160",
    "end": "2162640"
  },
  {
    "text": "machine these are some results so the number of crashes wasn't as spectacular",
    "start": "2163880",
    "end": "2170320"
  },
  {
    "text": "as in the case of stage fright but in the initial phases of the of the project",
    "start": "2170320",
    "end": "2177280"
  },
  {
    "text": "we had about 1,000 crashes not unique per week on a cluster of 30 to 40",
    "start": "2177280",
    "end": "2183599"
  },
  {
    "text": "Android devices there is a critical issue that occurred using the targeted fuzzing",
    "start": "2183599",
    "end": "2191040"
  },
  {
    "text": "approach we've reported it to Google and it got a CV um assigned in 2014 in",
    "start": "2191040",
    "end": "2198800"
  },
  {
    "text": "November 2014 there are also a lot of now a lot of low priority issues that were",
    "start": "2198800",
    "end": "2205920"
  },
  {
    "text": "reported both in KitKat and Lollipop uh but these were not considered to be exploitable there are the project is",
    "start": "2205920",
    "end": "2213520"
  },
  {
    "text": "still under um development so we have a lot of issues that are uh under",
    "start": "2213520",
    "end": "2219359"
  },
  {
    "text": "investigation",
    "start": "2219359",
    "end": "2222359"
  },
  {
    "text": "i'm going to speak a little bit about an alternative approach that uses the very",
    "start": "2227040",
    "end": "2233359"
  },
  {
    "text": "popular American fuzzy loop tool a few words about the tool in",
    "start": "2233359",
    "end": "2239599"
  },
  {
    "text": "general it's an instrumentation based fuzzing tool it offers two fuzzing modes the dumb mode and the instrumented mode",
    "start": "2239599",
    "end": "2246560"
  },
  {
    "text": "it also has a third let's say mode the Peruvian rabbit mode that you can feed",
    "start": "2246560",
    "end": "2251599"
  },
  {
    "text": "crashes to try to um to get uh new crashes from crashes that already",
    "start": "2251599",
    "end": "2259000"
  },
  {
    "text": "occurred its main advantage is the fact that um it detects changes to uh the",
    "start": "2259000",
    "end": "2265839"
  },
  {
    "text": "program control flow and you can find new paths and find new interesting test cases that can be sent to the target",
    "start": "2265839",
    "end": "2274960"
  },
  {
    "text": "it's pretty much automated it detects both crashes and hangs uh it tries to do",
    "start": "2274960",
    "end": "2282400"
  },
  {
    "text": "a best effort to sort out the unique issues um I used an modified version of",
    "start": "2282400",
    "end": "2290560"
  },
  {
    "text": "the tool and a version that was developed by my colleague Adrian he",
    "start": "2290560",
    "end": "2296640"
  },
  {
    "text": "developed um a port for the tool for Android it's public available now it's",
    "start": "2296640",
    "end": "2302079"
  },
  {
    "text": "on the mailing list from the AFL tool this is um how we use AFL to fast",
    "start": "2302079",
    "end": "2311119"
  },
  {
    "text": "stage fright if you've ever worked with AFL you need you know that uh there are",
    "start": "2311119",
    "end": "2317760"
  },
  {
    "text": "a few prerequisites before actually starting the tool in the case of Android what we need to have on the device is um",
    "start": "2317760",
    "end": "2326240"
  },
  {
    "text": "have root remount the device uh these the root and mount are uh necessary so we",
    "start": "2326240",
    "end": "2334000"
  },
  {
    "text": "can push the um AFL testing binary and also the target binary for example in",
    "start": "2334000",
    "end": "2341280"
  },
  {
    "text": "the case of stage right because uh the binary is doesn't come um built into the",
    "start": "2341280",
    "end": "2348160"
  },
  {
    "text": "default Android tree we need to build our own binary and then push it on the device so if we want to push it on in",
    "start": "2348160",
    "end": "2355520"
  },
  {
    "text": "system bean you you need to have the device remounted",
    "start": "2355520",
    "end": "2360720"
  },
  {
    "text": "Also uh you want to load the initial seeds the initial valid media files and",
    "start": "2361040",
    "end": "2367680"
  },
  {
    "text": "um a prerequisite that is specific to FL is that is to set the scaling govern",
    "start": "2367680",
    "end": "2373760"
  },
  {
    "text": "governor to the perform to performance the thing is if the initial",
    "start": "2373760",
    "end": "2380880"
  },
  {
    "text": "media files contain uh an input that generates a crash from the beginning the",
    "start": "2380880",
    "end": "2387520"
  },
  {
    "text": "the AFL tool will reject it so if you want to automate",
    "start": "2387520",
    "end": "2392680"
  },
  {
    "text": "this we need to make sure that the initial seeds that we load onto the",
    "start": "2392680",
    "end": "2397800"
  },
  {
    "text": "devices do not contain inputs that produce a crash uh when we are working",
    "start": "2397800",
    "end": "2402960"
  },
  {
    "text": "with a cluster of let's say tens of devices we need to figure a way to to do",
    "start": "2402960",
    "end": "2408800"
  },
  {
    "text": "this in an automated manner uh so what we tried was we start the AFL tool with",
    "start": "2408800",
    "end": "2417280"
  },
  {
    "text": "a timeout and check if it finds a crash that produce uh input that produces a",
    "start": "2417280",
    "end": "2424000"
  },
  {
    "text": "crash and if it does wait until the the timeout ends and restart it again so we",
    "start": "2424000",
    "end": "2430480"
  },
  {
    "text": "have a loop with AFL running with a timeout um when it get when it gets rid of all",
    "start": "2430480",
    "end": "2437599"
  },
  {
    "text": "the test cases that produced a crash we will then go and start AFL normally and",
    "start": "2437599",
    "end": "2444320"
  },
  {
    "text": "redirect its uh pretty um results reporting uh format to dev new let's say",
    "start": "2444320",
    "end": "2451760"
  },
  {
    "text": "so we can um we can run it uh in an automated manner",
    "start": "2451760",
    "end": "2458440"
  },
  {
    "text": "this is a diagram that shows how we've integrated",
    "start": "2460400",
    "end": "2466119"
  },
  {
    "text": "the our custom fuzzing tool with AFL so we have the initial phase the",
    "start": "2466119",
    "end": "2472400"
  },
  {
    "text": "seed generation where we generate initial valid files media files we load the seeds onto the devices",
    "start": "2472400",
    "end": "2481680"
  },
  {
    "text": "where we start AFL using the the process that I've mentioned in the previous",
    "start": "2481680",
    "end": "2486800"
  },
  {
    "text": "slide we run the AFL tool for a period of time",
    "start": "2486800",
    "end": "2492560"
  },
  {
    "text": "usually two or three days then we get the crashes and the hangs the thing is",
    "start": "2492560",
    "end": "2497839"
  },
  {
    "text": "that uh on each device AFL will report an issue as being unique but another",
    "start": "2497839",
    "end": "2503839"
  },
  {
    "text": "device will also report an issue as being unique although um the issues",
    "start": "2503839",
    "end": "2509200"
  },
  {
    "text": "aren't unique for the general target that is why we need to pass the the",
    "start": "2509200",
    "end": "2517359"
  },
  {
    "text": "crashes the results that FL gave us through the through our custombased uh",
    "start": "2517359",
    "end": "2523960"
  },
  {
    "text": "fuzzer we pass it and we generate the logs the in the format that I've",
    "start": "2523960",
    "end": "2530079"
  },
  {
    "text": "mentioned earlier and from there we have uh the logs that",
    "start": "2530079",
    "end": "2536720"
  },
  {
    "text": "are parsed and passed to the triage mechanism where we actually get the real unique issues there is also another",
    "start": "2536720",
    "end": "2543440"
  },
  {
    "text": "reason why we need to uh pass the media files through the our custom fuzzer is",
    "start": "2543440",
    "end": "2550319"
  },
  {
    "text": "the fact that the media files uh run in an restricted environment in AFL so you",
    "start": "2550319",
    "end": "2555839"
  },
  {
    "text": "can in Android for example uh you have to set the memory limit and the timeout",
    "start": "2555839",
    "end": "2561920"
  },
  {
    "text": "where in the case of our uh fuzzer the the media files run u more more closely",
    "start": "2561920",
    "end": "2569680"
  },
  {
    "text": "to a normal user scenario so some crashes that are reported to FL may not",
    "start": "2569680",
    "end": "2575680"
  },
  {
    "text": "actually reproduce in a normal user scenario",
    "start": "2575680",
    "end": "2581319"
  },
  {
    "text": "we've also had some results using this approach the most notable was a hip corruption uh that could lead to",
    "start": "2583200",
    "end": "2590560"
  },
  {
    "text": "arbitrary code execution using the media server process this was discovered um",
    "start": "2590560",
    "end": "2596160"
  },
  {
    "text": "this summer it uh was included in the Nexus security glutin from August 2015",
    "start": "2596160",
    "end": "2603119"
  },
  {
    "text": "there were also a lot of low priority issues things like nonpointed references",
    "start": "2603119",
    "end": "2608319"
  },
  {
    "text": "or integrity division by zero",
    "start": "2608319",
    "end": "2612480"
  },
  {
    "text": "stuff and uh that's about it a few conclusions",
    "start": "2614040",
    "end": "2621240"
  },
  {
    "text": "um first of all fuzzing in an Android environment is a little bit trickier than in a normal Linux",
    "start": "2621240",
    "end": "2628280"
  },
  {
    "text": "environment also stage fright is not really a bug is more like a library that",
    "start": "2628280",
    "end": "2634160"
  },
  {
    "text": "has a lot a lot of issues and um it's really important to",
    "start": "2634160",
    "end": "2639520"
  },
  {
    "text": "know the internals of the component that you are targeting so you can actually have better results there is also the",
    "start": "2639520",
    "end": "2646640"
  },
  {
    "text": "case when you perform dump fuzzing and you get lucky uh that's also um a",
    "start": "2646640",
    "end": "2652839"
  },
  {
    "text": "probability and that's about it these are other people that contributed to to",
    "start": "2652839",
    "end": "2658160"
  },
  {
    "text": "these projects uh Adrian developed the Android port for AFL um Cost Maxim also",
    "start": "2658160",
    "end": "2666319"
  },
  {
    "text": "had a lot of technical input for the projects yonus Gavas supported the development of these",
    "start": "2666319",
    "end": "2671880"
  },
  {
    "text": "projects and also if you have questions",
    "start": "2671880",
    "end": "2676559"
  },
  {
    "text": "[Applause]",
    "start": "2684690",
    "end": "2688780"
  }
]