[
  {
    "text": "hi everyone thanks for having us it's our pleasure to be here and the next",
    "start": "2960",
    "end": "8400"
  },
  {
    "text": "topic we are going to talk about is best fit oh wait wait wait i think we have a",
    "start": "8400",
    "end": "14120"
  },
  {
    "text": "typo here oh sorry it's worst fit unveiling hidden transformers in window",
    "start": "14120",
    "end": "20760"
  },
  {
    "text": "NC and Orange and his sprit line we are excited to share our new research with",
    "start": "20760",
    "end": "27680"
  },
  {
    "text": "you okay so let's start with one",
    "start": "27680",
    "end": "33239"
  },
  {
    "text": "story one fateful day I hacked into a bank of course this is a madeup",
    "start": "33239",
    "end": "41239"
  },
  {
    "text": "story and yeah since we hacked into the bank so we have the four assets to their",
    "start": "41239",
    "end": "47039"
  },
  {
    "text": "database yeah it's a pro posgress SQL running on Windows and yeah it stores",
    "start": "47039",
    "end": "53120"
  },
  {
    "text": "all the account information wow that's amazing yeah that's really amazing and",
    "start": "53120",
    "end": "59760"
  },
  {
    "text": "the first thing I did was checking my own account information and I was poor",
    "start": "59760",
    "end": "64878"
  },
  {
    "text": "as hell i only had $14.50 you are so poor yeah I was so poor so I",
    "start": "64879",
    "end": "72400"
  },
  {
    "text": "just did what every evil hacker would do which is make my balance to the moon i",
    "start": "72400",
    "end": "79040"
  },
  {
    "text": "changed my balance to the infinity sign and yeah it worked perfect don't do this",
    "start": "79040",
    "end": "85360"
  },
  {
    "text": "at home yeah don't try this at home so yeah I exactly put infinite sign",
    "start": "85360",
    "end": "91840"
  },
  {
    "text": "infinity sign here right so but when I check my account",
    "start": "91840",
    "end": "98799"
  },
  {
    "text": "information again why is it only eight i exactly",
    "start": "98799",
    "end": "104960"
  },
  {
    "text": "type the infinite sign layer right do you see that but why is it eight now you",
    "start": "104960",
    "end": "110320"
  },
  {
    "text": "are more poor yeah I'm more poor i'm I mean I'm even poorer than before so this",
    "start": "110320",
    "end": "117200"
  },
  {
    "text": "really pissed me off and the IT guy found me he just kicked me out so after",
    "start": "117200",
    "end": "124399"
  },
  {
    "text": "all of this we try really hard to know what just happened that time and so this is how our research",
    "start": "124399",
    "end": "132400"
  },
  {
    "text": "topic came to be we will show you how did we turn this weird behavior into",
    "start": "132400",
    "end": "138640"
  },
  {
    "text": "several bucks in this session",
    "start": "138640",
    "end": "143400"
  },
  {
    "text": "before we dive into the topic let's introduce ourselves first hi I'm Orange",
    "start": "143680",
    "end": "148959"
  },
  {
    "text": "and hi I'm Speline uh we are both from Defc Research team our mission is to",
    "start": "148959",
    "end": "154239"
  },
  {
    "text": "push the boundaries of security through uh offensive thinking we always report",
    "start": "154239",
    "end": "159760"
  },
  {
    "text": "our finding directly to the vendors to make the world safe this research is",
    "start": "159760",
    "end": "165360"
  },
  {
    "text": "also part of day so let's get started okay before we really talk about the",
    "start": "165360",
    "end": "172160"
  },
  {
    "text": "vulnerability itself we need to know this well I think you we can see unique",
    "start": "172160",
    "end": "178400"
  },
  {
    "text": "code in a lot of place and in Windows we have the file name the file content the",
    "start": "178400",
    "end": "184640"
  },
  {
    "text": "environment variable even the Windows regist registry we can put environment",
    "start": "184640",
    "end": "189840"
  },
  {
    "text": "variable we can put unic code string there and you think about how does it",
    "start": "189840",
    "end": "196440"
  },
  {
    "text": "store yep so actually Windows supports several",
    "start": "196440",
    "end": "202560"
  },
  {
    "text": "ways to represent a character here we can see the evolution",
    "start": "202560",
    "end": "207599"
  },
  {
    "text": "of encoding in Microsoft Windows well at the beginning it was so simple we just",
    "start": "207599",
    "end": "212879"
  },
  {
    "text": "need need a single bite to store everything and then we have uni code so",
    "start": "212879",
    "end": "218080"
  },
  {
    "text": "at the beginning they use UCS2 to do the uni code uni code encoding and soon",
    "start": "218080",
    "end": "225400"
  },
  {
    "text": "after is deprecated and up upgraded to",
    "start": "225400",
    "end": "231799"
  },
  {
    "text": "UTF-16 and this is why the way Windows 2 store those internal",
    "start": "231799",
    "end": "237720"
  },
  {
    "text": "informations and yep actually now we have UTF8 but it's it's still in the",
    "start": "237720",
    "end": "244159"
  },
  {
    "text": "beta phase so in most of the language age the check box is not checked yet",
    "start": "244159",
    "end": "251519"
  },
  {
    "text": "well so like in English in Chinese in most of European language well you",
    "start": "251519",
    "end": "257120"
  },
  {
    "text": "cannot use the UTF8 feature by default but anyway we now we know all of",
    "start": "257120",
    "end": "265440"
  },
  {
    "text": "these information are stored in the uni code which is actually a white carrot",
    "start": "265440",
    "end": "270520"
  },
  {
    "text": "format and like the console input file name command line with registry environ",
    "start": "270520",
    "end": "276240"
  },
  {
    "text": "variable are all store in this white car format but you might say wait so I write",
    "start": "276240",
    "end": "282400"
  },
  {
    "text": "my C C program every day and I always write in this way i use the character a",
    "start": "282400",
    "end": "287759"
  },
  {
    "text": "single by character to retrieve those environment variable but now you say it's stored in a Y format it doesn't",
    "start": "287759",
    "end": "294320"
  },
  {
    "text": "make sense and how about this i wrote I read the Microsoft official document and",
    "start": "294320",
    "end": "300479"
  },
  {
    "text": "this get env function we can use this function to retrieve the environment",
    "start": "300479",
    "end": "305800"
  },
  {
    "text": "variable within the single by character format but now you say in or in Y format",
    "start": "305800",
    "end": "313600"
  },
  {
    "text": "well it doesn't sounds right but yeah it's all kind of not really Windows",
    "start": "313600",
    "end": "318960"
  },
  {
    "text": "stuff let's get back to the real window Wind Windows stuff so let's take a look at Windows",
    "start": "318960",
    "end": "325240"
  },
  {
    "text": "API so actually we have two different way to retrieve the environment variable",
    "start": "325240",
    "end": "332400"
  },
  {
    "text": "which is one is get environment variable A and another one is get environment",
    "start": "332400",
    "end": "337520"
  },
  {
    "text": "variable W and for the A1 is actually NC format and for the W1 is actually format",
    "start": "337520",
    "end": "344320"
  },
  {
    "text": "and you will get the data in the uni code format well but now you have you might",
    "start": "344320",
    "end": "350639"
  },
  {
    "text": "have one question well so how can one data be in two totally different format",
    "start": "350639",
    "end": "357840"
  },
  {
    "text": "one is NC one is white how does it work okay now we are going to show you",
    "start": "357840",
    "end": "363199"
  },
  {
    "text": "one simple example to let you know how this work",
    "start": "363199",
    "end": "368560"
  },
  {
    "text": "let's assume we have this environment variable which which is hello h l o and",
    "start": "368560",
    "end": "376319"
  },
  {
    "text": "we retrieve it with the y format is y character originally so y white y",
    "start": "376319",
    "end": "382240"
  },
  {
    "text": "character in y character out nothing changed everything goes fine yeah makes sense but how about this we use the NC",
    "start": "382240",
    "end": "391199"
  },
  {
    "text": "API to retrieve the y data and now it will in invoke a function internally",
    "start": "391199",
    "end": "399440"
  },
  {
    "text": "which is this long function name function and but here everything still",
    "start": "399440",
    "end": "404880"
  },
  {
    "text": "goes fine because h e l o are all in the ask key range so nothing to strange just",
    "start": "404880",
    "end": "411840"
  },
  {
    "text": "make it to the uni code make the unic code to the NC string",
    "start": "411840",
    "end": "418280"
  },
  {
    "text": "but how about we have this string which is a square root of pi to the seven",
    "start": "418280",
    "end": "424880"
  },
  {
    "text": "seventh power is less or equal than infinity uh yeah this weird string but",
    "start": "424880",
    "end": "431240"
  },
  {
    "text": "anyway and as you can see they are all in the they are they are not in the ask",
    "start": "431240",
    "end": "438319"
  },
  {
    "text": "key range they are all unico character they have two bytes so",
    "start": "438319",
    "end": "446280"
  },
  {
    "text": "fancy what's going on well you can now guess a little bit but I guess you",
    "start": "446280",
    "end": "451759"
  },
  {
    "text": "cannot guess the right answer let's just show you so this square root will become v this pi will become p Smaller seven",
    "start": "451759",
    "end": "459360"
  },
  {
    "text": "will become the bigger seven and this less or equal then will become equal",
    "start": "459360",
    "end": "464800"
  },
  {
    "text": "okay and the infin infinity sign will knew the answer which is",
    "start": "464800",
    "end": "470280"
  },
  {
    "text": "eight okay how does it work it totally doesn't make sense right so actually",
    "start": "470280",
    "end": "476720"
  },
  {
    "text": "this is rightly best fit yeah now you can guess the formula or the pattern now so but let's tell you",
    "start": "476720",
    "end": "485919"
  },
  {
    "text": "what exactly is the best fit behavior so first the best fit mapping",
    "start": "485919",
    "end": "493840"
  },
  {
    "text": "happens when the unic string is converted into an NC string yep so",
    "start": "493840",
    "end": "499120"
  },
  {
    "text": "that's what just happened and there's no spec no specific pattern or formula so",
    "start": "499120",
    "end": "506080"
  },
  {
    "text": "Microsoft just want to make them look alike yeah um so let's see if infinity",
    "start": "506080",
    "end": "512320"
  },
  {
    "text": "sign look like eight okay fine but the and there's another scene which",
    "start": "512320",
    "end": "518640"
  },
  {
    "text": "is different core patch maps differently for example for this U00 A5",
    "start": "518640",
    "end": "526320"
  },
  {
    "text": "which is a yin sign in the unique code in Japanese it's going to be a backslash",
    "start": "526320",
    "end": "532320"
  },
  {
    "text": "in the Eastern European language it's going to be a capital Y and for the all",
    "start": "532320",
    "end": "538320"
  },
  {
    "text": "the other code pages it's going to be a still a yin sign",
    "start": "538320",
    "end": "543519"
  },
  {
    "text": "so because of this reason the worst fit vulnerability highly depends on the language configuration okay now we",
    "start": "543519",
    "end": "551160"
  },
  {
    "text": "already not knew the basic concept of the best fit let's have orange to introduce the first ever worst fit",
    "start": "551160",
    "end": "558240"
  },
  {
    "text": "vulnerability we found okay thanks to line and I thought",
    "start": "558240",
    "end": "566160"
  },
  {
    "text": "we told you that we hack a bank in the beginning in fact the real story began",
    "start": "566160",
    "end": "572000"
  },
  {
    "text": "from this CVE a remote execution on PHP CGI as described this is a bypass of an",
    "start": "572000",
    "end": "580880"
  },
  {
    "text": "old vulnerability the bug is quite simple the design of PHP CGI is prone to",
    "start": "580880",
    "end": "588640"
  },
  {
    "text": "argument injection so in the good old days you can simply",
    "start": "588640",
    "end": "595360"
  },
  {
    "text": "inject the arguments through the query string to lick source code or even get",
    "start": "595360",
    "end": "600399"
  },
  {
    "text": "code execution it was really it was really simple but dangerous so PHP patch",
    "start": "600399",
    "end": "608240"
  },
  {
    "text": "it quickly their fix was also easy just to ensure there's no leading dash in the",
    "start": "608240",
    "end": "614480"
  },
  {
    "text": "query string the patch worked well and no one b it for the past 12 year however",
    "start": "614480",
    "end": "622640"
  },
  {
    "text": "I felt that this blacklist looks weak so I wrote a faster and",
    "start": "622640",
    "end": "629240"
  },
  {
    "text": "find why the ASKI 0x can bypass the",
    "start": "629240",
    "end": "636040"
  },
  {
    "text": "patch as investigation us investigating us investigating more",
    "start": "636040",
    "end": "644399"
  },
  {
    "text": "we find that the 0x8 is mapped to a dash which lead to the bypass and we soon",
    "start": "644399",
    "end": "651760"
  },
  {
    "text": "learned that this is best fit this feature is super cool and motivate sprit",
    "start": "651760",
    "end": "658720"
  },
  {
    "text": "line and me to take a deep look as we delve deeper we realize",
    "start": "658720",
    "end": "665360"
  },
  {
    "text": "that's the bug that the bug is just the tip of the iceberg there are even more",
    "start": "665360",
    "end": "670800"
  },
  {
    "text": "attacks on this feature so that's how this research was born",
    "start": "670800",
    "end": "677040"
  },
  {
    "text": "here are the attacks we have so far due to the time constraints we will",
    "start": "677040",
    "end": "683600"
  },
  {
    "text": "only cover three of them today so let's begin with today's first",
    "start": "683600",
    "end": "689680"
  },
  {
    "text": "attack the worst fit on the firemen this is a screenshot from one of",
    "start": "689680",
    "end": "696720"
  },
  {
    "text": "my favorite hacker movie the Hilo hacks into someone's personal computer to",
    "start": "696720",
    "end": "702480"
  },
  {
    "text": "figure out who is the spy do you find anything special on",
    "start": "702480",
    "end": "708440"
  },
  {
    "text": "this yes white is the destination folder followed by a strange symbol a sprit",
    "start": "708440",
    "end": "716240"
  },
  {
    "text": "line mentioned earlier the symbol is called a yin sign and because this is a",
    "start": "716240",
    "end": "721839"
  },
  {
    "text": "Japanese movie all the backslashes in their computers are displayed as the yin",
    "start": "721839",
    "end": "727880"
  },
  {
    "text": "sign it might sounds a bit strange but don't worry it's just for display and",
    "start": "727880",
    "end": "734639"
  },
  {
    "text": "the and the actual ASKI code is still 0x5C the same as the",
    "start": "734639",
    "end": "741560"
  },
  {
    "text": "backslash but why did Microsoft decide to map the inside to a backslash this",
    "start": "741560",
    "end": "748560"
  },
  {
    "text": "can be traced back to several historical reasons back to 1996 the ISO attempt to",
    "start": "748560",
    "end": "756240"
  },
  {
    "text": "twe to to create a standard that can cover as many language as possible so it",
    "start": "756240",
    "end": "763279"
  },
  {
    "text": "opened several positions for countries to define their own characters and one",
    "start": "763279",
    "end": "769600"
  },
  {
    "text": "of the position is 0x5C since the yin signai is used more",
    "start": "769600",
    "end": "776360"
  },
  {
    "text": "frequently than the backslash in Japan so the Japanese variant of the",
    "start": "776360",
    "end": "782720"
  },
  {
    "text": "standard plus the yai at position",
    "start": "782720",
    "end": "787759"
  },
  {
    "text": "0x5C however shortly ISO introduced a new standard which known as the latin",
    "start": "787880",
    "end": "794399"
  },
  {
    "text": "one is a eight bit ch set and include a dedicated position for the yin",
    "start": "794399",
    "end": "802200"
  },
  {
    "text": "sign since they look alike so Microsoft said \"Okay let's map them together.\" So",
    "start": "802200",
    "end": "810480"
  },
  {
    "text": "that's why the yin sign is mapped to the backslash on Windows and once we learned",
    "start": "810480",
    "end": "816560"
  },
  {
    "text": "that a straightforward idea quickly pop up can we use the yen sign as the file",
    "start": "816560",
    "end": "826279"
  },
  {
    "text": "name we try to create one to verify that we put it on the desk desktop and use",
    "start": "826279",
    "end": "833440"
  },
  {
    "text": "the built-in function in Python to list the content of a",
    "start": "833440",
    "end": "839000"
  },
  {
    "text": "desktop originally Windows hold a file name with the white calendar",
    "start": "839000",
    "end": "844839"
  },
  {
    "text": "internally however the API required a single chart array so the best fit",
    "start": "844839",
    "end": "853320"
  },
  {
    "text": "applied without any surprise the folder with the yen sign will uh will become",
    "start": "853320",
    "end": "859120"
  },
  {
    "text": "the dot backslash this allows us to perform the path traversal to browse wherever we",
    "start": "859120",
    "end": "867720"
  },
  {
    "text": "want okay we now understand the loot codes let's explore some real world",
    "start": "867720",
    "end": "873880"
  },
  {
    "text": "applications let's target the cuckoo sandbox i'm not sure if you heard uh if",
    "start": "873880",
    "end": "879040"
  },
  {
    "text": "you heard of this before it's famous because it's a famous mware analysis platform is well known because it's the",
    "start": "879040",
    "end": "887040"
  },
  {
    "text": "only open-source solution since cuckoo has reached its",
    "start": "887040",
    "end": "892079"
  },
  {
    "text": "end of life it keep using a vulnerable Python version so that we can exploit",
    "start": "892079",
    "end": "898440"
  },
  {
    "text": "it the cuckoo consists of two parts the sandbox host and the virtual machine",
    "start": "898440",
    "end": "904959"
  },
  {
    "text": "cluster to isolate the environment the host on the left can inspect the virtual",
    "start": "904959",
    "end": "912000"
  },
  {
    "text": "machine to collect the log traffic and dropped file since we can upload our malware we",
    "start": "912000",
    "end": "920480"
  },
  {
    "text": "can write a simple program to create a file using the white character API and",
    "start": "920480",
    "end": "926000"
  },
  {
    "text": "put the yen sign in the file name we can then correct the dropped",
    "start": "926000",
    "end": "932320"
  },
  {
    "text": "files on the web interface as mentioned Koku use an old Python which is",
    "start": "932320",
    "end": "937800"
  },
  {
    "text": "vulnerable to feed so once we click the",
    "start": "937800",
    "end": "943000"
  },
  {
    "text": "button we can download whatever we want on the sandbox",
    "start": "943000",
    "end": "948680"
  },
  {
    "text": "host we can then collect sensitive information for further attacks such as",
    "start": "948680",
    "end": "953759"
  },
  {
    "text": "bypass the authentication to convert this arbitrary file reading to rce let's",
    "start": "953759",
    "end": "959440"
  },
  {
    "text": "check the demo so in the top window you can see the",
    "start": "959440",
    "end": "965320"
  },
  {
    "text": "cuckoo and we are running the sandbox host on the left",
    "start": "965320",
    "end": "971839"
  },
  {
    "text": "side and the right side is the virtual machine that is waiting for our files to",
    "start": "971880",
    "end": "980000"
  },
  {
    "text": "analyze so we run our exploit to upload a payload and after some magic we pop",
    "start": "980120",
    "end": "987680"
  },
  {
    "text": "the calculate successfully yes okay this is cool",
    "start": "987680",
    "end": "997240"
  },
  {
    "text": "but you might be thinking that this is blackhead why the speaker keep talking",
    "start": "997240",
    "end": "1004079"
  },
  {
    "text": "about the Asian code patch actually in the most code patches",
    "start": "1004079",
    "end": "1010639"
  },
  {
    "text": "the fourways reversed solids is also mapped to the backslash leading to the",
    "start": "1010639",
    "end": "1016800"
  },
  {
    "text": "patch traversal again so do I really need to worry about that well if you if",
    "start": "1016800",
    "end": "1024720"
  },
  {
    "text": "you are using any of the following language such as English Spanish French",
    "start": "1024720",
    "end": "1032640"
  },
  {
    "text": "Dutch and more they are all vulnerable to worst fit",
    "start": "1032640",
    "end": "1038400"
  },
  {
    "text": "or you can check this map if your country is marked in red you are likely affected by this",
    "start": "1038400",
    "end": "1046280"
  },
  {
    "text": "attack to be helpful here is a tip for mitigation you can switch your language",
    "start": "1046280",
    "end": "1054080"
  },
  {
    "text": "to traditional Chinese that's safe from such a tech",
    "start": "1054080",
    "end": "1059600"
  },
  {
    "text": "okay okay let's hand back to sprit line for the next section okay now we finish the past part",
    "start": "1059600",
    "end": "1067919"
  },
  {
    "text": "and now we start to talk about the worst fit on command line yeah actually we",
    "start": "1067919",
    "end": "1073600"
  },
  {
    "text": "mentioned about that earlier which is for the PHP C drive case but actually we",
    "start": "1073600",
    "end": "1079200"
  },
  {
    "text": "can do more with command line and first for this case we have",
    "start": "1079200",
    "end": "1087160"
  },
  {
    "text": "this on an English configured Windows operating system we have this Python",
    "start": "1087160",
    "end": "1092720"
  },
  {
    "text": "script which we use the subprocess to run the wget get executable and only a",
    "start": "1092720",
    "end": "1099120"
  },
  {
    "text": "small little part of the argument is controllable what could we go wrong here well maybe",
    "start": "1099120",
    "end": "1104640"
  },
  {
    "text": "if you're not a familiar with Python you might just say okay I can just use a command here such it's such an easy",
    "start": "1104640",
    "end": "1111039"
  },
  {
    "text": "stuff uh of course not otherwise I will not be here right so we can refer to the",
    "start": "1111039",
    "end": "1117280"
  },
  {
    "text": "document for this subprocess module it just say you can safely pass those",
    "start": "1117280",
    "end": "1123280"
  },
  {
    "text": "argument into the child process so nope of course and it just remain the normal",
    "start": "1123280",
    "end": "1130080"
  },
  {
    "text": "part of the argument yeah and of course this won't work you cannot just inject",
    "start": "1130080",
    "end": "1136160"
  },
  {
    "text": "an argument here but how about this well you might think oh wait wait what's the",
    "start": "1136160",
    "end": "1142480"
  },
  {
    "text": "difference but don't care about that i just pop a calculator out such an easy",
    "start": "1142480",
    "end": "1148280"
  },
  {
    "text": "stuff what why okay let's have this challenge i think most of you cannot",
    "start": "1148280",
    "end": "1153520"
  },
  {
    "text": "find a difference i mean even Microsoft cannot find a difference so on the left side is our exploit and on the right",
    "start": "1153520",
    "end": "1160640"
  },
  {
    "text": "side is totally safe from this kind of attack uh so what's the difference",
    "start": "1160640",
    "end": "1167000"
  },
  {
    "text": "exactly well on the left side is the four ways quotation mark and on the",
    "start": "1167000",
    "end": "1172160"
  },
  {
    "text": "right side is the normal double quote mhm well but why why what's the",
    "start": "1172160",
    "end": "1179919"
  },
  {
    "text": "reason make it vulnerable well let's go back to this simple stuff which is a this command line and how is",
    "start": "1179919",
    "end": "1188000"
  },
  {
    "text": "it pared so let's start with Unix like system because I think most of you are",
    "start": "1188000",
    "end": "1194400"
  },
  {
    "text": "more familiar with Unix like system is and it's totally different from the Windows and for Unix like system we have",
    "start": "1194400",
    "end": "1201760"
  },
  {
    "text": "this command line and first it will pass by your shell and it will separate it to",
    "start": "1201760",
    "end": "1208400"
  },
  {
    "text": "several arguments now it will invoke an system call which",
    "start": "1208400",
    "end": "1214880"
  },
  {
    "text": "the cycl execute and now notice that we already have this separated arguments",
    "start": "1214880",
    "end": "1221919"
  },
  {
    "text": "and finally the new process spout is like a wget get with the separated",
    "start": "1221919",
    "end": "1228400"
  },
  {
    "text": "argument and yeah how about this on Windows we",
    "start": "1228400",
    "end": "1233840"
  },
  {
    "text": "have the same command line and we will throw it to the Windows",
    "start": "1233840",
    "end": "1239039"
  },
  {
    "text": "API which is like create process but here the second argument is command line",
    "start": "1239039",
    "end": "1244960"
  },
  {
    "text": "it's not arguments i mean like this so",
    "start": "1244960",
    "end": "1250640"
  },
  {
    "text": "the full command line will pass into the Windows API mhm so it's not argument and",
    "start": "1250640",
    "end": "1257280"
  },
  {
    "text": "now the new process spawned so now it's the the executable's duty to pass the",
    "start": "1257280",
    "end": "1265760"
  },
  {
    "text": "command line yeah it's right after the process spawn it's passed by itself now",
    "start": "1265760",
    "end": "1271520"
  },
  {
    "text": "we finally have the arguments mhm so let's go back to the",
    "start": "1271520",
    "end": "1277840"
  },
  {
    "text": "subprocess case we have this Python script and in the argument we have a",
    "start": "1277840",
    "end": "1284640"
  },
  {
    "text": "four with quotation mark layer and yeah so the Python will try to",
    "start": "1284640",
    "end": "1291600"
  },
  {
    "text": "convert Python list into a command line string and since there's no double quote",
    "start": "1291600",
    "end": "1298159"
  },
  {
    "text": "and no backslash so there's no need to escape anything so just just pass it to",
    "start": "1298159",
    "end": "1303760"
  },
  {
    "text": "the Windows API yep we have the same command line here and then we will pass it to the",
    "start": "1303760",
    "end": "1311520"
  },
  {
    "text": "wget or the vulnerable case but the double get use the NC API",
    "start": "1311520",
    "end": "1318320"
  },
  {
    "text": "to retrieve this command line so which makes it to vulnerable to the worst fit",
    "start": "1318320",
    "end": "1325080"
  },
  {
    "text": "attack the worst fit attack is like okay I'm best fit so I'm an NC API and what",
    "start": "1325080",
    "end": "1331520"
  },
  {
    "text": "is a forest double quote i don't know but the best fit just say the four double quote is actually a normal double",
    "start": "1331520",
    "end": "1338480"
  },
  {
    "text": "quote so the command line will become like this now a single argument is separated",
    "start": "1338480",
    "end": "1346320"
  },
  {
    "text": "into three yeah this is how these attacks work and actually we found many of these",
    "start": "1346320",
    "end": "1354640"
  },
  {
    "text": "kind of bug in a lot of common applications like on in Java in OpenSSL",
    "start": "1354640",
    "end": "1360400"
  },
  {
    "text": "in subversion in pearl it's almost everywhere and we think there must be",
    "start": "1360400",
    "end": "1365919"
  },
  {
    "text": "more in the wild here we have this tar which is a Windows built-in command as a",
    "start": "1365919",
    "end": "1372960"
  },
  {
    "text": "case study and the victim today is lfinder which is a file management web",
    "start": "1372960",
    "end": "1379960"
  },
  {
    "text": "application write writing in PP so it has a function which you can",
    "start": "1379960",
    "end": "1386880"
  },
  {
    "text": "make an archive based on several files and it executes a command for creating",
    "start": "1386880",
    "end": "1393440"
  },
  {
    "text": "archive yeah excuse command sounds dangerous but all the arguments are",
    "start": "1393440",
    "end": "1399120"
  },
  {
    "text": "escaped by this escape es escape shell argument which is a PHP built-in",
    "start": "1399120",
    "end": "1405760"
  },
  {
    "text": "function for escaping arguments and is safe mhm so we have this command line",
    "start": "1405760",
    "end": "1411840"
  },
  {
    "text": "and all the arguments are escaped but the texe is vulnerable to fit",
    "start": "1411840",
    "end": "1420240"
  },
  {
    "text": "attack so here we can check the demo first we check the language",
    "start": "1420280",
    "end": "1427120"
  },
  {
    "text": "configuration on the server which is an English code page and now we go back to",
    "start": "1427120",
    "end": "1433840"
  },
  {
    "text": "the web application we create an arbitary file and create an archive",
    "start": "1433840",
    "end": "1439039"
  },
  {
    "text": "based on it now we can set the archive name to a worth attack then we can",
    "start": "1439039",
    "end": "1446000"
  },
  {
    "text": "inject arbitry argument to it now we have a calculator popup",
    "start": "1446000",
    "end": "1452559"
  },
  {
    "text": "of course Linder definitely not the only victim we are able to pop more",
    "start": "1452679",
    "end": "1459679"
  },
  {
    "text": "calculator with this kind of bug here we just pick several application as a demonstration well here we go so on the",
    "start": "1459679",
    "end": "1467440"
  },
  {
    "text": "right side is the R studio and on the on the right side is the tois g and one",
    "start": "1467440",
    "end": "1473840"
  },
  {
    "text": "calculator popup and another popup perfect yes",
    "start": "1473840",
    "end": "1481520"
  },
  {
    "text": "and what's worse is no programming language can stop this kind of attack for example Ras Python NodeJS",
    "start": "1481520",
    "end": "1489360"
  },
  {
    "text": "Goland PI PHP even you use the correct function to execute the comment you",
    "start": "1489360",
    "end": "1495039"
  },
  {
    "text": "cannot you can not avoid this kind of attack and yeah all of these catches are",
    "start": "1495039",
    "end": "1503919"
  },
  {
    "text": "affected so of this code page will convert this full waste quotation mark into a normal double",
    "start": "1503919",
    "end": "1512440"
  },
  {
    "text": "quote so the way to do the mitigation yeah you need to switch it it to CJK",
    "start": "1512440",
    "end": "1518159"
  },
  {
    "text": "language which is Chinese Japanese and Korean uh but wait wait wait I think we",
    "start": "1518159",
    "end": "1524320"
  },
  {
    "text": "forgot one thing did you remember we have this for the yen sign in Japanese",
    "start": "1524320",
    "end": "1529679"
  },
  {
    "text": "and W sign in Korean we can use this to map it to the backslash right and what",
    "start": "1529679",
    "end": "1537600"
  },
  {
    "text": "can a backslash do backslash can escape stuff and how can you escape did you get",
    "start": "1537600",
    "end": "1542640"
  },
  {
    "text": "it did you get it mhm let's just show you one example let's assume we have this",
    "start": "1542640",
    "end": "1549600"
  },
  {
    "text": "program.exe is vulnerable to worse fit and we put the argument here which is",
    "start": "1549600",
    "end": "1555520"
  },
  {
    "text": "full yen sign double quotes bar and we have a double quote here so the Python will try to escape it and now it will",
    "start": "1555520",
    "end": "1563520"
  },
  {
    "text": "prepend a backslash for escape the double quote okay now it's still fine",
    "start": "1563520",
    "end": "1570080"
  },
  {
    "text": "and but after it's throw into the program the the backslash will try to",
    "start": "1570080",
    "end": "1578320"
  },
  {
    "text": "the y sign will become a backslash so now the backslash will be used as escape",
    "start": "1578320",
    "end": "1586080"
  },
  {
    "text": "the following backslash now the argument is separated into two",
    "start": "1586080",
    "end": "1591799"
  },
  {
    "text": "so yeah this is a real world map to show you who are affected by argument",
    "start": "1591799",
    "end": "1598799"
  },
  {
    "text": "splitting vulnerability and the real way to do the",
    "start": "1598799",
    "end": "1603840"
  },
  {
    "text": "mitigation yeah you need to switch it to Chinese mhm yeah that's amazing",
    "start": "1603840",
    "end": "1611480"
  },
  {
    "text": "right okay wow that's amazing you can imagine how many web applications will",
    "start": "1611480",
    "end": "1618000"
  },
  {
    "text": "become vulnerable again however that's not all this attack has the potential to",
    "start": "1618000",
    "end": "1624960"
  },
  {
    "text": "target applications other than web and the NASCA is going to be",
    "start": "1624960",
    "end": "1632039"
  },
  {
    "text": "wild oops on Windows what happens when you",
    "start": "1632039",
    "end": "1637440"
  },
  {
    "text": "doubleclick a file like this text file we all know it will use Notepad to open",
    "start": "1637440",
    "end": "1645080"
  },
  {
    "text": "that however how does Windows know which",
    "start": "1645080",
    "end": "1650159"
  },
  {
    "text": "program to use to open the file actually Windows maintains the",
    "start": "1650159",
    "end": "1656320"
  },
  {
    "text": "table internally you can see there's a handler fort which open the notepad and forward",
    "start": "1656320",
    "end": "1664880"
  },
  {
    "text": "the file name as the argument we can also use process monitor to check",
    "start": "1664880",
    "end": "1670799"
  },
  {
    "text": "that the command line should look like this and since we can control part of",
    "start": "1670799",
    "end": "1678720"
  },
  {
    "text": "the file name can we use the same technique earlier to inject the",
    "start": "1678720",
    "end": "1684760"
  },
  {
    "text": "arguments of course we discovered several Windows application are",
    "start": "1684760",
    "end": "1690080"
  },
  {
    "text": "vulnerable to that and Excel is one of them",
    "start": "1690080",
    "end": "1696320"
  },
  {
    "text": "and if we rename this Excel file into the following name replacing all the",
    "start": "1696320",
    "end": "1704399"
  },
  {
    "text": "slash backslash and double quote with their uni code version once we double click the file",
    "start": "1704399",
    "end": "1712880"
  },
  {
    "text": "the worst fit will transform this uni code characters to their normal version",
    "start": "1712880",
    "end": "1718559"
  },
  {
    "text": "that leading to the argument injection here we inject two more",
    "start": "1718559",
    "end": "1724320"
  },
  {
    "text": "arguments to do further exploitation and let's check the",
    "start": "1724320",
    "end": "1730679"
  },
  {
    "text": "demo the victim try to download a malicious file from the internet you can",
    "start": "1730679",
    "end": "1736240"
  },
  {
    "text": "see the file is really strange and once he opened the file Excel will send N and",
    "start": "1736240",
    "end": "1743279"
  },
  {
    "text": "we can use tricks like RBCD or shadow credential to pop the",
    "start": "1743279",
    "end": "1749159"
  },
  {
    "text": "calculator yes that's cool and",
    "start": "1749159",
    "end": "1755440"
  },
  {
    "text": "additionally the protection such as mark of the web or protactic view will not",
    "start": "1756520",
    "end": "1762399"
  },
  {
    "text": "help you because the argument passing is not in their scope so basically all",
    "start": "1762399",
    "end": "1769760"
  },
  {
    "text": "English and European bas excel are vulnerable okay let's head back to split",
    "start": "1769760",
    "end": "1777200"
  },
  {
    "text": "line for our final attack hm yeah that's cool so our final",
    "start": "1777200",
    "end": "1782880"
  },
  {
    "text": "attack is envir environment variable so when we talk about",
    "start": "1782880",
    "end": "1788559"
  },
  {
    "text": "environment variable the first scene pop out in my mind is CGI program since the",
    "start": "1788559",
    "end": "1793679"
  },
  {
    "text": "CGI program use a lot of environment variable to transmit those those data",
    "start": "1793679",
    "end": "1799760"
  },
  {
    "text": "like query stream pass or HTTP headers so if the CGI is vulnerable to the n to",
    "start": "1799760",
    "end": "1808159"
  },
  {
    "text": "the worst fit attack then there must be something going to happen so when the CGI use the NC API to",
    "start": "1808159",
    "end": "1816720"
  },
  {
    "text": "retrieve those environment variable those those data will be",
    "start": "1816720",
    "end": "1822559"
  },
  {
    "text": "vulnerable to worse fit attack well let's have this",
    "start": "1822559",
    "end": "1828360"
  },
  {
    "text": "example we have a web server and it blocks the SS to",
    "start": "1828360",
    "end": "1834200"
  },
  {
    "text": "admin so an attacker can create this kind of request which have a and test",
    "start": "1834200",
    "end": "1840799"
  },
  {
    "text": "like percent e dm and yep it's not admin at all",
    "start": "1840799",
    "end": "1846279"
  },
  {
    "text": "so so it will just decode it and get this data which has has a pass info",
    "start": "1846279",
    "end": "1852159"
  },
  {
    "text": "which is has an asented a dyn and now it will be passed to the CGI program and",
    "start": "1852159",
    "end": "1859200"
  },
  {
    "text": "the CGI program use the NC API to retrieve the environment variable so now that split applied now",
    "start": "1859200",
    "end": "1867760"
  },
  {
    "text": "the path become the real admin path well this is cool but it's still kind of an",
    "start": "1867760",
    "end": "1873760"
  },
  {
    "text": "imaging case can we find a real world case yep so here we have PHPC C drive",
    "start": "1873760",
    "end": "1880240"
  },
  {
    "text": "again the PHPC drag use NC API in a lot of space so here we have this kind of",
    "start": "1880240",
    "end": "1887679"
  },
  {
    "text": "pass and we need to know how to see passed and we have",
    "start": "1887679",
    "end": "1894679"
  },
  {
    "text": "indestpar and it will be passed to the server and the server will generate a bunch of environment variable",
    "start": "1894679",
    "end": "1902320"
  },
  {
    "text": "so next you will pass this this kind of environment variables to the PHP CGI",
    "start": "1902320",
    "end": "1908840"
  },
  {
    "text": "program and then it will generate the file name of PHP and the path info",
    "start": "1908840",
    "end": "1916159"
  },
  {
    "text": "notice that we have the those paths are passed by the PHP CGI itself",
    "start": "1916159",
    "end": "1924440"
  },
  {
    "text": "so you might think about can we use the data slash again to confuse the P ph PHP",
    "start": "1924440",
    "end": "1931600"
  },
  {
    "text": "CGI to make it get a wrong pass well unfortunately it will not work",
    "start": "1931600",
    "end": "1939279"
  },
  {
    "text": "because the web server usually will validate the the UR URL pass for this",
    "start": "1939279",
    "end": "1945919"
  },
  {
    "text": "kind of case is like a data sla it's obviously an invalid pass and you will",
    "start": "1945919",
    "end": "1953360"
  },
  {
    "text": "just get a bad request so here we have a yen sign again",
    "start": "1953360",
    "end": "1958720"
  },
  {
    "text": "we have this yen sign to get a backslash we can use this sign to make it part of",
    "start": "1958720",
    "end": "1966960"
  },
  {
    "text": "the file name and yeah it's just part of the file name so it's definitely not",
    "start": "1966960",
    "end": "1974679"
  },
  {
    "text": "invalid and now when the PPC use the NC API to retrieve the environment variable",
    "start": "1974679",
    "end": "1980720"
  },
  {
    "text": "it will become data backslash again and now you will get the PHP file and pass",
    "start": "1980720",
    "end": "1986000"
  },
  {
    "text": "info wrong how can we utilize this kind of attack on Apache server we can use it to",
    "start": "1986000",
    "end": "1993440"
  },
  {
    "text": "detect a file exist or not and this kind of useless but actually we can do more",
    "start": "1993440",
    "end": "1999360"
  },
  {
    "text": "with this on IIS on IS with the document route configured it can become local",
    "start": "1999360",
    "end": "2005440"
  },
  {
    "text": "file inclusion and since since it's a local file inclusion so we can actually",
    "start": "2005440",
    "end": "2011360"
  },
  {
    "text": "achieve remote co execution based on based on it sometimes",
    "start": "2011360",
    "end": "2016640"
  },
  {
    "text": "that's quite cool so we look into some common CGI for pearl CGI most of the",
    "start": "2016640",
    "end": "2023279"
  },
  {
    "text": "components are all affected and for PPCGI for such things like request and",
    "start": "2023279",
    "end": "2029360"
  },
  {
    "text": "get and also several variables in the server will also",
    "start": "2029360",
    "end": "2036158"
  },
  {
    "text": "affected yeah so here we have this this best bit mapping again we can use this",
    "start": "2036200",
    "end": "2042960"
  },
  {
    "text": "for solidus reverse solids to map it to the the backslash and make it to",
    "start": "2042960",
    "end": "2049599"
  },
  {
    "text": "vulnerable to pass traversal",
    "start": "2049599",
    "end": "2053720"
  },
  {
    "text": "okay thank you sprit line now we had finished most of our men main section",
    "start": "2055359",
    "end": "2061200"
  },
  {
    "text": "today due to the time constraint there are still two part that we don't cover",
    "start": "2061200",
    "end": "2066960"
  },
  {
    "text": "maybe it could become some of your future work I guess as for mentioned our attacks",
    "start": "2066960",
    "end": "2074398"
  },
  {
    "text": "affect so many popular applications some of them are fakes some of some of them",
    "start": "2074399",
    "end": "2080720"
  },
  {
    "text": "are not but why do so many applications do it",
    "start": "2080720",
    "end": "2088040"
  },
  {
    "text": "phone it's quite common to have a main function and you put all the application",
    "start": "2088040",
    "end": "2094079"
  },
  {
    "text": "logic inside that this approach works well on the Unix",
    "start": "2094079",
    "end": "2099880"
  },
  {
    "text": "system however if you pull the same program to Windows for any reason it",
    "start": "2099880",
    "end": "2105599"
  },
  {
    "text": "will be vulnerable by default why to elaborate we try to build a simple",
    "start": "2105599",
    "end": "2113760"
  },
  {
    "text": "hello world program on Windows and put a binary in a disassembler like ID Pro we",
    "start": "2113760",
    "end": "2122000"
  },
  {
    "text": "then check the cross reference for the main function you will discover wow there are",
    "start": "2122000",
    "end": "2129440"
  },
  {
    "text": "a lot of code running before your main function what we only write a simple",
    "start": "2129440",
    "end": "2135520"
  },
  {
    "text": "hello world but why is there so much code that is not",
    "start": "2135520",
    "end": "2141640"
  },
  {
    "text": "yours so who put this code it's Visual Studio the best inclass",
    "start": "2141640",
    "end": "2149839"
  },
  {
    "text": "tools for any developers actually visual st Visual",
    "start": "2149839",
    "end": "2155839"
  },
  {
    "text": "Studio will embed a lot of code to your program automatically while the compiler while",
    "start": "2155839",
    "end": "2162720"
  },
  {
    "text": "the compiling this is part of the convention for process initialization",
    "start": "2162720",
    "end": "2168400"
  },
  {
    "text": "the conversion also called the NC API to retrieve the command line which is",
    "start": "2168400",
    "end": "2174400"
  },
  {
    "text": "vulnerable to the worst feed so what is the better way to use the men",
    "start": "2174400",
    "end": "2182280"
  },
  {
    "text": "function the safer way is to use the wmen the white character version of men",
    "start": "2182280",
    "end": "2189280"
  },
  {
    "text": "so is everything good actually this only protects you from the command line",
    "start": "2189280",
    "end": "2195359"
  },
  {
    "text": "passing issue there are more functions could be potentially vulnerable even if you don't",
    "start": "2195359",
    "end": "2202240"
  },
  {
    "text": "use any Windows API you might still be at risk because the underlining C run",
    "start": "2202240",
    "end": "2207839"
  },
  {
    "text": "long runtime still use the NC API so to fix everything you have to",
    "start": "2207839",
    "end": "2214480"
  },
  {
    "text": "replace all functions with their white character version which is",
    "start": "2214480",
    "end": "2220680"
  },
  {
    "text": "painful so who is responsible for that is it the issue with the compiler and",
    "start": "2220680",
    "end": "2228079"
  },
  {
    "text": "runtime provided by Microsoft or is it the developers problem for not using the",
    "start": "2228079",
    "end": "2234480"
  },
  {
    "text": "white character API we try to repose to Microsoft",
    "start": "2234480",
    "end": "2240280"
  },
  {
    "text": "first we try to highlight this problem but as you can see it's not easy the",
    "start": "2240280",
    "end": "2246560"
  },
  {
    "text": "cast on Excel was only accepted on our third attempt and for the tar cast",
    "start": "2246560",
    "end": "2253119"
  },
  {
    "text": "Microsoft said the scope is not covered by their service since Microsoft didn't consider",
    "start": "2253119",
    "end": "2260800"
  },
  {
    "text": "it an issue we then report this cases to the upstream instead and here are the",
    "start": "2260800",
    "end": "2268480"
  },
  {
    "text": "responses we got the author of curl say that curl is",
    "start": "2268480",
    "end": "2274560"
  },
  {
    "text": "also a victim not a responsible party okay",
    "start": "2274560",
    "end": "2280160"
  },
  {
    "text": "pearl said that it seems more like a Microsoft bug",
    "start": "2280160",
    "end": "2285400"
  },
  {
    "text": "good postgre also said that's not their",
    "start": "2285400",
    "end": "2290520"
  },
  {
    "text": "problem and uh the maintainer from Postgre even tag Microsoft to ask if if",
    "start": "2290520",
    "end": "2298320"
  },
  {
    "text": "there was a better way to use the Windows API and uh",
    "start": "2298320",
    "end": "2304359"
  },
  {
    "text": "unsurprisingly there's no response so the problems are still there but no",
    "start": "2304359",
    "end": "2311040"
  },
  {
    "text": "one want to take actions the good news is that we are now",
    "start": "2311040",
    "end": "2316480"
  },
  {
    "text": "collaborating with third and hope everything goes well here is a world map to summarize",
    "start": "2316480",
    "end": "2324640"
  },
  {
    "text": "our attacks the countries marked in red are hardest hit and the yellow are",
    "start": "2324640",
    "end": "2330800"
  },
  {
    "text": "probably are probably public probably affected and the red is saved from that",
    "start": "2330800",
    "end": "2336240"
  },
  {
    "text": "since worst fit is binary independent we also create a website to check the",
    "start": "2336240",
    "end": "2342560"
  },
  {
    "text": "vulnerable executables so contributions are all",
    "start": "2342560",
    "end": "2348200"
  },
  {
    "text": "welcome okay let's talk about the mitigation since this is a systemwide",
    "start": "2348200",
    "end": "2354480"
  },
  {
    "text": "problem the best mitigation for users is to switch your system instant language",
    "start": "2354480",
    "end": "2360079"
  },
  {
    "text": "to UTFA and if you are a developer please use the please use the white character",
    "start": "2360079",
    "end": "2366480"
  },
  {
    "text": "version of Windows API as much as possible and that's our presentation if",
    "start": "2366480",
    "end": "2373599"
  },
  {
    "text": "you have any questions here is our contact information thank you for being here today thanks",
    "start": "2373599",
    "end": "2380010"
  },
  {
    "text": "[Applause]",
    "start": "2380010",
    "end": "2384719"
  }
]