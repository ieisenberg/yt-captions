[
  {
    "start": "0",
    "end": "138000"
  },
  {
    "text": "so I'm Philippa I now work at Google on the go team but this research for it was",
    "start": "30",
    "end": "5279"
  },
  {
    "text": "from before I joined the company and it was done in collaboration with sean devlin who you may know as the outer of",
    "start": "5279",
    "end": "11519"
  },
  {
    "text": "the recent crypto pulse the cryptography challenges once known as the matazano crypto challenges so the story of this",
    "start": "11519",
    "end": "19260"
  },
  {
    "text": "talk starts when a cloud for engineer found something weird verifying",
    "start": "19260",
    "end": "24720"
  },
  {
    "text": "certificates in a city log it found a certificate with a signature that been",
    "start": "24720",
    "end": "29840"
  },
  {
    "text": "verified and that's weird because city logs verify signatures before accepting",
    "start": "29840",
    "end": "35790"
  },
  {
    "text": "certificates so something had to be up with the code that was being used to verify verify them it turned out that",
    "start": "35790",
    "end": "43410"
  },
  {
    "text": "the bug was specific bug in the implementation of the NIST P 256",
    "start": "43410",
    "end": "50329"
  },
  {
    "text": "elliptic curve and more specifically in the x86 64 as symbol implementation this",
    "start": "50329",
    "end": "58590"
  },
  {
    "text": "was optimized them to implementation written by hand in assembly to make these operations from this elliptic",
    "start": "58590",
    "end": "65158"
  },
  {
    "text": "curve especially fast on the architecture which is the most popular one on computers that are not mobile or",
    "start": "65159",
    "end": "72810"
  },
  {
    "text": "embedded these days so copper reports",
    "start": "72810",
    "end": "77880"
  },
  {
    "text": "this winner ability to the go team and atom language on the on the go teams comments that yes the that's a problem",
    "start": "77880",
    "end": "85650"
  },
  {
    "text": "although it's not obvious if someone will be able to squeeze something out of",
    "start": "85650",
    "end": "91560"
  },
  {
    "text": "this hole but you know it would be a cool paper so yeah Sean and I met in Paris to look at",
    "start": "91560",
    "end": "102360"
  },
  {
    "text": "this vulnerability that's nothing else than a challenge right there and one",
    "start": "102360",
    "end": "107430"
  },
  {
    "text": "month later we figured out a way to mount a complete key recovery attack against real protocols as implemented by",
    "start": "107430",
    "end": "115259"
  },
  {
    "text": "real implementations that would recover the entire private key from that small extremely rare bug in the implementation",
    "start": "115259",
    "end": "123049"
  },
  {
    "text": "go on the goal releases were minted with",
    "start": "123049",
    "end": "128550"
  },
  {
    "text": "the facts and of course we're talking about something that does not apply to the current go",
    "start": "128550",
    "end": "135200"
  },
  {
    "text": "distribution so first of all I want you to understand a bit of what the code was",
    "start": "135200",
    "end": "141290"
  },
  {
    "start": "138000",
    "end": "596000"
  },
  {
    "text": "doing now elliptic curve implementations have as their bedrock field",
    "start": "141290",
    "end": "148220"
  },
  {
    "text": "implementation field arithmetic implementations those are nothing else than operations need n modulo a prime P",
    "start": "148220",
    "end": "157030"
  },
  {
    "text": "this prime P is fixed for each little curve so for example the value P here",
    "start": "157030",
    "end": "163610"
  },
  {
    "text": "would be a constant for the NIST advance the second curve and a lot of the operations you need to do to build the",
    "start": "163610",
    "end": "170480"
  },
  {
    "text": "wider implementation will have to be modular this p number for example the code we're going to be looking at today",
    "start": "170480",
    "end": "176570"
  },
  {
    "text": "is the code to subtract two numbers modulo P straightforward enough you have",
    "start": "176570",
    "end": "182510"
  },
  {
    "text": "a and B and you want a minus B that's it that's what this code does why is this",
    "start": "182510",
    "end": "187880"
  },
  {
    "text": "hard well P is a 256-bit wide number there are no registers in your machines",
    "start": "187880",
    "end": "195140"
  },
  {
    "text": "that can hold a 256-bit wide number so instead you have to break it up over",
    "start": "195140",
    "end": "200900"
  },
  {
    "text": "multiple registers you actually know how to do this every time you do columnar",
    "start": "200900",
    "end": "205910"
  },
  {
    "text": "subtraction you are using there is more registers one digit wide and doing",
    "start": "205910",
    "end": "212390"
  },
  {
    "text": "subtraction between the two digits and then doing a borrow from the next digit",
    "start": "212390",
    "end": "217459"
  },
  {
    "text": "right this does the exact same thing it breaks up the 256 bit number into four",
    "start": "217459",
    "end": "225049"
  },
  {
    "text": "64-bit registers then subtract them one by one and if there's a borrow bit it",
    "start": "225049",
    "end": "233390"
  },
  {
    "text": "borrows a one from the next more significant register so that's what",
    "start": "233390",
    "end": "239480"
  },
  {
    "text": "you're looking at for the very top block you look at a sub-q instruction which is",
    "start": "239480",
    "end": "245450"
  },
  {
    "text": "just a set a to a minus b and then afterwards SBB q instruction which means",
    "start": "245450",
    "end": "255110"
  },
  {
    "text": "the same thing subtraction but with the borrow so if the previous instruction had to borrow a",
    "start": "255110",
    "end": "261530"
  },
  {
    "text": "bit the caret flag in the CPU is going to be sad and the next instruction will",
    "start": "261530",
    "end": "266900"
  },
  {
    "text": "one from the result of the next operation you do that multiple times and eventually you end up with just the ball",
    "start": "266900",
    "end": "273350"
  },
  {
    "text": "final borough that tells you if you under flowed or not so this function is",
    "start": "273350",
    "end": "281060"
  },
  {
    "text": "longer than just that block why well this function is doing two additional things this function is a",
    "start": "281060",
    "end": "288530"
  },
  {
    "text": "hand of course handling the case where you have to be dude you have to be doing",
    "start": "288530",
    "end": "294199"
  },
  {
    "text": "the subtraction modulo P not module 2 to 256 and it's handling the fact that you",
    "start": "294199",
    "end": "300440"
  },
  {
    "text": "want that to be in constant time if this function took a different time based on",
    "start": "300440",
    "end": "305479"
  },
  {
    "text": "whether or not for example there was an underflow or overflow that would leak",
    "start": "305479",
    "end": "311930"
  },
  {
    "text": "information to an attacker like house and we would find out things about the key like with it but for different",
    "start": "311930",
    "end": "317479"
  },
  {
    "text": "reasons so instead what does it do pretty simple it starts by doing the",
    "start": "317479",
    "end": "322490"
  },
  {
    "text": "subtraction a minus equal B then it saves that value of a in a separate set",
    "start": "322490",
    "end": "329960"
  },
  {
    "text": "of registers and then it adds to a P why the problem is that a minus P a B might",
    "start": "329960",
    "end": "336740"
  },
  {
    "text": "have underflow and it wraps around at 2 to the 256 because that's how wide four",
    "start": "336740",
    "end": "342470"
  },
  {
    "text": "registers are but that's not correct you want to wrap around that P not at 212 256 so instead what it does is that",
    "start": "342470",
    "end": "350599"
  },
  {
    "text": "it adds back P P overflows so one under flow and one overflow bring it back into",
    "start": "350599",
    "end": "357110"
  },
  {
    "text": "the right space correct the error and since adding P for the operation modulo",
    "start": "357110",
    "end": "363229"
  },
  {
    "text": "P is is not problem in arithmetic terms the result is correct and finally the",
    "start": "363229",
    "end": "370310"
  },
  {
    "text": "last block has to decide which one am I going to use the one with the P added or",
    "start": "370310",
    "end": "375440"
  },
  {
    "text": "the one without the P if if adding P had",
    "start": "375440",
    "end": "380960"
  },
  {
    "text": "if subtracting B did not under flow then you can just use a minus B but if",
    "start": "380960",
    "end": "387580"
  },
  {
    "text": "instead it had under flowed you have to add P you can't always add use the one",
    "start": "387580",
    "end": "392810"
  },
  {
    "text": "where P was added because that would have overflowed in the other case so",
    "start": "392810",
    "end": "398389"
  },
  {
    "text": "that's what you're looking at with that Molesey register the borrow bid from the first",
    "start": "398389",
    "end": "403430"
  },
  {
    "text": "chain from a minus B is saved in a register so that we can use it later to make a decision and that will tell us if",
    "start": "403430",
    "end": "410570"
  },
  {
    "text": "a minus B under float or not and based on that it makes a decision with some",
    "start": "410570",
    "end": "416420"
  },
  {
    "text": "seem of instructions seem of instructions just in constant time copy a value from left to right in this",
    "start": "416420",
    "end": "423530"
  },
  {
    "text": "notation based on what the zero flag is and finally there is essentially dummy",
    "start": "423530",
    "end": "430340"
  },
  {
    "text": "operation in theory that just checks not zero and uses it to set the zero the",
    "start": "430340",
    "end": "436880"
  },
  {
    "text": "zero flag where's the bag the bag is that that dummy operation right there",
    "start": "436880",
    "end": "443570"
  },
  {
    "text": "was supposed to be something like add zero or end one something that doesn't actually change multirow but just",
    "start": "443570",
    "end": "450920"
  },
  {
    "text": "operates on it so that the zero flag gets set based on what mod 0 was so that",
    "start": "450920",
    "end": "456200"
  },
  {
    "text": "then we can use it to make the decision in C mode but it's not that our ad with",
    "start": "456200",
    "end": "462710"
  },
  {
    "text": "carry there's a cylinder so that one byte mistake makes it take in the carry",
    "start": "462710",
    "end": "471530"
  },
  {
    "text": "bit from the previous instruction what's the previous instruction it's just the end of adding P to a minus V",
    "start": "471530",
    "end": "478970"
  },
  {
    "text": "which has nothing to do with the decision that multirow is there for so this is sneaking in a carry that has",
    "start": "478970",
    "end": "486140"
  },
  {
    "text": "nothing to do with what we're trying to do and that influences the decision now",
    "start": "486140",
    "end": "492050"
  },
  {
    "text": "this would be wrong most of the times but instead the seam of instruction is",
    "start": "492050",
    "end": "499690"
  },
  {
    "text": "swapped instead of being if 0 its if not zero so two mistakes cancel each other",
    "start": "499690",
    "end": "508430"
  },
  {
    "text": "out and most of the times everything goes well and that's why it's a skate testing so almost always this is not a",
    "start": "508430",
    "end": "516710"
  },
  {
    "text": "problem except that there is the difference between the or the old code",
    "start": "516710",
    "end": "523940"
  },
  {
    "text": "and the patched one and the difference is what happens when that carry bit is not there a rare occurrence but",
    "start": "523940",
    "end": "531230"
  },
  {
    "text": "sometimes adding P does not overflow and if adding P does",
    "start": "531230",
    "end": "537020"
  },
  {
    "text": "not overflow the bit the carry flag is not set and the result is wrong instead",
    "start": "537020",
    "end": "543140"
  },
  {
    "text": "of returning a minus B as it should it will return a minus B plus P which will",
    "start": "543140",
    "end": "549170"
  },
  {
    "text": "end up being higher than P a specific case of this is that if you try",
    "start": "549170",
    "end": "554780"
  },
  {
    "text": "subtracting one from one one minus one it will return P instead of zero because",
    "start": "554780",
    "end": "561200"
  },
  {
    "text": "adding P will not wraparound so why is this a problem well this is a problem",
    "start": "561200",
    "end": "567260"
  },
  {
    "text": "because once in 2 to the 32 times that result will be wrong and when that",
    "start": "567260",
    "end": "575030"
  },
  {
    "text": "happens something will break higher up but this is rare again 2 to 32 times",
    "start": "575030",
    "end": "580550"
  },
  {
    "text": "that's why it went completely unnoticed until it made a signature not verify",
    "start": "580550",
    "end": "586190"
  },
  {
    "text": "that someone was really really sure that should really verify so this is the back",
    "start": "586190",
    "end": "591730"
  },
  {
    "text": "now we didn't find this back we worked on how to use this back which is a carry",
    "start": "591730",
    "end": "597650"
  },
  {
    "text": "propagation bag to mount an attack to actually recover something useful the",
    "start": "597650",
    "end": "603350"
  },
  {
    "text": "key now you might be asking how does forgetting to carry the 1 or carry a 1",
    "start": "603350",
    "end": "609020"
  },
  {
    "text": "that wasn't there very literally forgetting to carry the 1 cause a fool",
    "start": "609020",
    "end": "614090"
  },
  {
    "text": "he recover attack now that's exactly what this talk is about but to",
    "start": "614090",
    "end": "619850"
  },
  {
    "text": "understand that I need you to take you back for a moment and do a crash course on the lipstick curve cryptography",
    "start": "619850",
    "end": "625930"
  },
  {
    "text": "sounds scary I promise I've done before and people survived now we know that",
    "start": "625930",
    "end": "632390"
  },
  {
    "text": "there are fields right we know that there are operations are done module P because that's what we're looking at and",
    "start": "632390",
    "end": "639680"
  },
  {
    "text": "that's what all numbers we work with are at the lowest level numbers modulo P in",
    "start": "639680",
    "end": "646520"
  },
  {
    "text": "the field then there are points points are simply x and y-coordinates where x",
    "start": "646520",
    "end": "652760"
  },
  {
    "text": "and y fit in an equation which is the curve equation we don't care about the curve equation don't worry it's not even",
    "start": "652760",
    "end": "659210"
  },
  {
    "text": "on the slides because what we're going to be working on is the abstraction above that the obstruction critical to",
    "start": "659210",
    "end": "666530"
  },
  {
    "text": "understand TAC is the group a group is two things a",
    "start": "666530",
    "end": "672199"
  },
  {
    "text": "generator point and an operation addition what's this a special about the",
    "start": "672199",
    "end": "679339"
  },
  {
    "text": "generator point if you take the generator point and you add it to itself using that addition you defined a",
    "start": "679339",
    "end": "686470"
  },
  {
    "text": "certain number of times you go back to G that number of times is called the order",
    "start": "686470",
    "end": "692209"
  },
  {
    "text": "of the group and it's another very big number in the order of P and 2 to 256 so",
    "start": "692209",
    "end": "700490"
  },
  {
    "text": "it's a 256-bit wide number but this this is important it's a cyclic group so you",
    "start": "700490",
    "end": "707300"
  },
  {
    "text": "can keep adding G and you hit a bunch of points in the group and eventually wrap around and you're back at G this is a",
    "start": "707300",
    "end": "713569"
  },
  {
    "text": "group if you give a group to a cryptographer that will build if you have Mon on it so to build if you hamon",
    "start": "713569",
    "end": "721100"
  },
  {
    "text": "you need multiplication but we only have addition now if you know how to do",
    "start": "721100",
    "end": "726500"
  },
  {
    "text": "addition you know how to do multiplication if you want to multiply by 5 you add add add add add and there's",
    "start": "726500",
    "end": "734540"
  },
  {
    "text": "no special definition of multiplication in groups it's just repeated addition an",
    "start": "734540",
    "end": "739750"
  },
  {
    "text": "additional multiplication follow all the rules that you already know about they are commutative and they're associated",
    "start": "739750",
    "end": "746139"
  },
  {
    "text": "so you know you can do first add 5 and then add 7 or the other way around you",
    "start": "746139",
    "end": "752329"
  },
  {
    "text": "can group them however you like then as I said you give us a group we build",
    "start": "752329",
    "end": "759649"
  },
  {
    "text": "diffie-hellman you might already know diffie-hellman from its finite field version but if you don't it's our",
    "start": "759649",
    "end": "765589"
  },
  {
    "text": "problem here's how it works on ellipticals the private key in defi Hellman is a giant number modulo the",
    "start": "765589",
    "end": "772550"
  },
  {
    "text": "order of the curve it has no special properties except it's this giant",
    "start": "772550",
    "end": "778480"
  },
  {
    "text": "integer that you select at random cryptographic from a cryptographically secure random number generator hopefully",
    "start": "778480",
    "end": "785920"
  },
  {
    "text": "then you want to generate a public key for your site how you do that is that",
    "start": "785920",
    "end": "791420"
  },
  {
    "text": "you just multiply this giant number by the generator point of the curve so",
    "start": "791420",
    "end": "796910"
  },
  {
    "text": "generator times the giant number is your private your public key you send your public key",
    "start": "796910",
    "end": "803329"
  },
  {
    "text": "to your pier your Pierce generates a private key and sends their public key to you and then to generate a shared",
    "start": "803329",
    "end": "810290"
  },
  {
    "text": "secret between the two of us that's the goal of the Hellman we take the public",
    "start": "810290",
    "end": "815720"
  },
  {
    "text": "key of the other side and multiply it by our private key so the final result on",
    "start": "815720",
    "end": "820850"
  },
  {
    "text": "our side is generator times the other part is private key times our private",
    "start": "820850",
    "end": "827809"
  },
  {
    "text": "key they do the same and on the other side it's going to be generator times our private key times their private key",
    "start": "827809",
    "end": "835420"
  },
  {
    "text": "multiplication is associative it's commutative we can these two results are identical so since we have identical",
    "start": "835420",
    "end": "842569"
  },
  {
    "text": "results we can do the C Hellman and then we can use that shared secret for example as a session key or as an",
    "start": "842569",
    "end": "848689"
  },
  {
    "text": "encryption key in a public key encryption scheme so this is how to",
    "start": "848689",
    "end": "855829"
  },
  {
    "text": "build diffie-hellman from the group but I go stove or something I told you that",
    "start": "855829",
    "end": "862639"
  },
  {
    "text": "how we do multiplication is by adding and adding and adding and adding and adding and then I told you that we take",
    "start": "862639",
    "end": "867889"
  },
  {
    "text": "a giant number and we multiply by that giant number of course you can't add G",
    "start": "867889",
    "end": "873709"
  },
  {
    "text": "to itself two to the 255 plus whatever times there is literally not enough",
    "start": "873709",
    "end": "879649"
  },
  {
    "text": "energy in the universe to do something to to a 255 times and I'm not I'm not",
    "start": "879649",
    "end": "884779"
  },
  {
    "text": "making this up I wanted to go into the",
    "start": "884779",
    "end": "891110"
  },
  {
    "text": "physics and then regretted it and so we're moving on",
    "start": "891110",
    "end": "896019"
  },
  {
    "text": "but I will I can tell you is how to avoid that problem and would use to out",
    "start": "896800",
    "end": "903889"
  },
  {
    "start": "898000",
    "end": "1101000"
  },
  {
    "text": "so I multiply by this giant number we use what's called a double and add algorithm now we take our giant D and we",
    "start": "903889",
    "end": "913730"
  },
  {
    "text": "consider it as a string of bits it there will be a most significant bit on the left because the Gambian is the only way",
    "start": "913730",
    "end": "921459"
  },
  {
    "text": "reasonable way to work and then all the way to the least significant bit on the",
    "start": "921459",
    "end": "927980"
  },
  {
    "text": "right the most significant bit is worth 2 to the 2:55 then tutorial 254 etc sir",
    "start": "927980",
    "end": "936670"
  },
  {
    "text": "what we do is that we do a sequence of operations that's the double in AD algorithm based on the bits of the key",
    "start": "936670",
    "end": "943540"
  },
  {
    "text": "we want to generate the product q times D okay so we start from the most",
    "start": "943540",
    "end": "951160"
  },
  {
    "text": "significant bit if it's said if it's one we add q and since there's nothing we",
    "start": "951160",
    "end": "956890"
  },
  {
    "text": "just take Q for now then every time we move down one we double we double the",
    "start": "956890",
    "end": "963010"
  },
  {
    "text": "running result we have we add a double operation to our chain now what happens by the time we are at",
    "start": "963010",
    "end": "969970"
  },
  {
    "text": "the end to this Q that we added now it gets doubled 255 times so it gets to",
    "start": "969970",
    "end": "976840"
  },
  {
    "text": "have exactly the value it was supposed to have for its significance which was to 255 because it's the most significant",
    "start": "976840",
    "end": "984760"
  },
  {
    "text": "most important highest valued bit in the key now this might not be immediately",
    "start": "984760",
    "end": "991810"
  },
  {
    "text": "intuitive but we're gonna run through it so we move down 1 and we do a double operation at the bottom there I'm",
    "start": "991810",
    "end": "999160"
  },
  {
    "text": "keeping a track of the operations we have to do on our running product then we check the bit and it's zero so we",
    "start": "999160",
    "end": "1006030"
  },
  {
    "text": "don't add anything we double again to move down one this bit is 1 so now we",
    "start": "1006030",
    "end": "1011700"
  },
  {
    "text": "add Q and then we move down by doubling this bit is 1 so we add Q and then we",
    "start": "1011700",
    "end": "1018750"
  },
  {
    "text": "move down by doubling we keep doing that skipping the bits the zero bit and",
    "start": "1018750",
    "end": "1025319"
  },
  {
    "text": "adding one for each for each one bit so",
    "start": "1025320",
    "end": "1031110"
  },
  {
    "text": "what we get at the end is this string at the bottom of operations that if we do",
    "start": "1031110",
    "end": "1036480"
  },
  {
    "text": "them in that order with the Q point that we want to multiply the final result is",
    "start": "1036480",
    "end": "1041569"
  },
  {
    "text": "d times Q now this might have clicked if",
    "start": "1041570",
    "end": "1046770"
  },
  {
    "text": "it didn't click the part that you need to understand further attack is that given one a private key we generate a",
    "start": "1046770",
    "end": "1054690"
  },
  {
    "text": "sequence of operations that we do on the point and we use that as the result okay",
    "start": "1054690",
    "end": "1062520"
  },
  {
    "text": "so you're given a point and enum multiply and based on the bits of the",
    "start": "1062520",
    "end": "1067980"
  },
  {
    "text": "point which is our private key we build a custom very specific to the key sequence of operations and the",
    "start": "1067980",
    "end": "1074480"
  },
  {
    "text": "operations are the same up to if the first bits are the same or if all the",
    "start": "1074480",
    "end": "1079980"
  },
  {
    "text": "bits are the same if a bit is different at position 100 the FIR the old operations before that are going to be",
    "start": "1079980",
    "end": "1086070"
  },
  {
    "text": "the same so we're going to use this fact the fact that a key bits trim bit string",
    "start": "1086070",
    "end": "1093300"
  },
  {
    "text": "is maps directly into operations done to the point to build our adaptive attack",
    "start": "1093300",
    "end": "1101240"
  },
  {
    "start": "1101000",
    "end": "1430000"
  },
  {
    "text": "so back to our carrot now we have about where our wrong result is returned from",
    "start": "1101240",
    "end": "1107460"
  },
  {
    "text": "a very internal function evening has internal in the name so what does it that we break we look at the code",
    "start": "1107460",
    "end": "1114120"
  },
  {
    "text": "and it's called by point add adding two points together and it's also called by",
    "start": "1114120",
    "end": "1120090"
  },
  {
    "text": "point double which is just an optimised way of adding the point to itself and",
    "start": "1120090",
    "end": "1126020"
  },
  {
    "text": "that is used in scalar multiplication scalar multiplication is exactly what I just described it's a fancy way of",
    "start": "1126020",
    "end": "1132690"
  },
  {
    "text": "calling x as a sequence of adding X so you know how to do scatter",
    "start": "1132690",
    "end": "1138240"
  },
  {
    "text": "multiplication now how is this used in a real protocol well this for example in",
    "start": "1138240",
    "end": "1143490"
  },
  {
    "text": "elliptic curve diffie-hellman is used with a point which can from your peer",
    "start": "1143490",
    "end": "1149130"
  },
  {
    "text": "because that's the public key of the other party a scalar which is the giant",
    "start": "1149130",
    "end": "1155040"
  },
  {
    "text": "bits through a string which is your secret key that the attacker doesn't know and the result is the shared secret",
    "start": "1155040",
    "end": "1162180"
  },
  {
    "text": "the shared secret is going to be what's used for example to encrypt this connection we're setting up or to",
    "start": "1162180",
    "end": "1168540"
  },
  {
    "text": "decrypt this message we are received now this is used one way to use this is",
    "start": "1168540",
    "end": "1176220"
  },
  {
    "text": "normal ephemeral diffie-hellman where each part generates a new private key at every run and we can't attack that but",
    "start": "1176220",
    "end": "1183840"
  },
  {
    "text": "there's another way of using the element if you feel brave and it's by fixing the private key on one side that's useful",
    "start": "1183840",
    "end": "1191310"
  },
  {
    "text": "because the public he also never changes so you can you know broadcasted you can",
    "start": "1191310",
    "end": "1196560"
  },
  {
    "text": "put in a certificate you can deploy to machines printed on business cards and I'm not joking that what happens if",
    "start": "1196560",
    "end": "1204090"
  },
  {
    "text": "you try to use it with PGP but so the point is that the private key this color",
    "start": "1204090",
    "end": "1209700"
  },
  {
    "text": "right there that never changes on our side while the public key is different",
    "start": "1209700",
    "end": "1214980"
  },
  {
    "text": "every time we do this with a new peer which might be an attacker so recapping",
    "start": "1214980",
    "end": "1220710"
  },
  {
    "text": "scalar multiplication is called with an attacker provide the point a secret",
    "start": "1220710",
    "end": "1226739"
  },
  {
    "text": "private key is color and the result the seeker the shared secret is going to be",
    "start": "1226739",
    "end": "1232350"
  },
  {
    "text": "used to do some interaction with the attacker now what can the attacker learn from this it learns whether the bag",
    "start": "1232350",
    "end": "1238679"
  },
  {
    "text": "triggered or not because if that function at the bottom doesn't work The Shard secret the result is going to be",
    "start": "1238679",
    "end": "1245609"
  },
  {
    "text": "wrong and if that's wrong the TLS connection for example will break and it",
    "start": "1245609",
    "end": "1251369"
  },
  {
    "text": "will terminate and that's what in cryptography call we call an Oracle an",
    "start": "1251369",
    "end": "1256559"
  },
  {
    "text": "Oracle is something that has some information hidden inside it that we",
    "start": "1256559",
    "end": "1261600"
  },
  {
    "text": "want to discover but that we can see directly but will answer questions of some sort about this in this thing the",
    "start": "1261600",
    "end": "1269309"
  },
  {
    "text": "question we can ask this one is if I give you this point do you calculate the result correctly or not now once we box",
    "start": "1269309",
    "end": "1278279"
  },
  {
    "text": "this into this kind of Oracle that's game over because if you give an Oracle to a cryptographer they will build on",
    "start": "1278279",
    "end": "1285090"
  },
  {
    "text": "that have adaptive attack let's see how so let's say that we have two magic points okay one of them breaks if you",
    "start": "1285090",
    "end": "1292559"
  },
  {
    "text": "add the double it double it add the double it add the double it and add it and it breaks a dead last edition and",
    "start": "1292559",
    "end": "1298859"
  },
  {
    "text": "from their own everything is broken another magic point breaks if you add",
    "start": "1298859",
    "end": "1304889"
  },
  {
    "text": "the doublet doublet at the double it I'll add the double doublet and it breaks specifically on that double",
    "start": "1304889",
    "end": "1311460"
  },
  {
    "text": "operation now how do we use this to to discover a bit of the key let's say we",
    "start": "1311460",
    "end": "1318179"
  },
  {
    "text": "already know the four bits first four bits of the key based on what the last bit of the key the fifth bit of the key",
    "start": "1318179",
    "end": "1324929"
  },
  {
    "text": "is the operations will follow one chain or the other so they will hit the bug on",
    "start": "1324929",
    "end": "1331100"
  },
  {
    "text": "it will hit the bag only on one of the two points based on wood the bit of the key",
    "start": "1331100",
    "end": "1336330"
  },
  {
    "text": "is so we send both points to our Oracle one of them causes the bug and breaks",
    "start": "1336330",
    "end": "1341790"
  },
  {
    "text": "the connection one of them doesn't close the bank and doesn't break the connection what does that mean that the",
    "start": "1341790",
    "end": "1348450"
  },
  {
    "text": "one that broke the connection is the one that corresponds to the bit of the key and we learned a bit of the key now if",
    "start": "1348450",
    "end": "1355559"
  },
  {
    "text": "we learn a bit of the key it's usually older specifically it's over if you learned a bit of the key and then we",
    "start": "1355559",
    "end": "1361440"
  },
  {
    "text": "have a way to discover the next bit given all the previous ones and how do we proceed on this attack well once we",
    "start": "1361440",
    "end": "1368460"
  },
  {
    "text": "know the first five bits because we just figured them out with these two points we generate two new magic points that",
    "start": "1368460",
    "end": "1376710"
  },
  {
    "text": "chain that crash on the two different paths of the next bit and we send them",
    "start": "1376710",
    "end": "1383970"
  },
  {
    "text": "both one of them breaks one of them doesn't we learnt another bit we generate two magic points we send them",
    "start": "1383970",
    "end": "1390929"
  },
  {
    "text": "both and we keep doing this until we have your key now what's this gold is an",
    "start": "1390929",
    "end": "1396720"
  },
  {
    "text": "adaptive attack and it's adaptive because we can't generate the two magic points to find bit six unless we know",
    "start": "1396720",
    "end": "1404280"
  },
  {
    "text": "bit five and that also means that we can pre-compute points for all the possible",
    "start": "1404280",
    "end": "1409950"
  },
  {
    "text": "chains because there are as many chains as there are keys but we can generate points for the two possible chains for",
    "start": "1409950",
    "end": "1416880"
  },
  {
    "text": "the next bit that we don't know given all the previous tours now we were extremely proud that we had figured out",
    "start": "1416880",
    "end": "1423540"
  },
  {
    "text": "this attack if anyone in the room is in the academic career they will know the",
    "start": "1423540",
    "end": "1430020"
  },
  {
    "start": "1430000",
    "end": "1678000"
  },
  {
    "text": "feeling then of going to the literature and find him that Billy Bob Bromley figured this out in 2011 before us so",
    "start": "1430020",
    "end": "1441419"
  },
  {
    "text": "the attack is pretty much the same thing although this was against a 2006 bug",
    "start": "1441419",
    "end": "1449059"
  },
  {
    "text": "2007 possibly and it was published in 2011 so there was a bit of consolation",
    "start": "1449059",
    "end": "1454710"
  },
  {
    "text": "in the fact that it took a few years to notice that that bug was explorable so we're still pretty happy but the paper",
    "start": "1454710",
    "end": "1461910"
  },
  {
    "text": "is eerily similar there is a bug it's not the same it's not in the same function as I've shown you that there is a bug in",
    "start": "1461910",
    "end": "1467430"
  },
  {
    "text": "OpenSSL it does the exact same thing it breaks and you can generate two magic",
    "start": "1467430",
    "end": "1472710"
  },
  {
    "text": "points that break based on the two bits and you can send them both and build the same adaptive attack now it's exactly",
    "start": "1472710",
    "end": "1480570"
  },
  {
    "text": "the same except that it's absolutely not the same in terms of implementation and",
    "start": "1480570",
    "end": "1485990"
  },
  {
    "text": "that's because the go implementation was using certain optimizations based on the",
    "start": "1485990",
    "end": "1492690"
  },
  {
    "text": "work by Krasnov and where on that they applied in the meantime to open SSL -",
    "start": "1492690",
    "end": "1498560"
  },
  {
    "text": "which speeds up that double in ad sequence by a lot by instead of looking",
    "start": "1498560",
    "end": "1506760"
  },
  {
    "text": "bit by bit you know one bit at the point double maybe at the point double may be",
    "start": "1506760",
    "end": "1512970"
  },
  {
    "text": "at the point double instead it looks at chunks of five bits in a specific",
    "start": "1512970",
    "end": "1518250"
  },
  {
    "text": "encoding based on boof on the boof algorithm which is from the 50s not",
    "start": "1518250",
    "end": "1524460"
  },
  {
    "text": "kidding not wrong paper from the 50s still speeding up things but at the end of the",
    "start": "1524460",
    "end": "1531960"
  },
  {
    "text": "day we're doing is that it takes Windows of five bits and for each window the value can be from minus sixteen to class",
    "start": "1531960",
    "end": "1538920"
  },
  {
    "text": "sixteen and instead of adding one and then doubling it will add or subtract",
    "start": "1538920",
    "end": "1545580"
  },
  {
    "text": "one to sixteen and then double five times to catch up to move down so it",
    "start": "1545580",
    "end": "1551760"
  },
  {
    "text": "starts by making up a computation table and once it has the per computation",
    "start": "1551760",
    "end": "1557940"
  },
  {
    "text": "table it will use it to double five times and then look at the window of",
    "start": "1557940",
    "end": "1563790"
  },
  {
    "text": "five bits add or subtract one to sixteen from the running result and double five",
    "start": "1563790",
    "end": "1569580"
  },
  {
    "text": "times again until the windows have run through the entire number so as I said",
    "start": "1569580",
    "end": "1577320"
  },
  {
    "text": "this is boof encoded so it's a little different than that so instead of talking about five bit windows we talked",
    "start": "1577320",
    "end": "1583830"
  },
  {
    "text": "about limbs limbs are nothing else than each sign bit and one to sixteen so the",
    "start": "1583830",
    "end": "1591120"
  },
  {
    "text": "value you want to add or subtract one to say zero to sixteen and whether you want to add it or subtract them and that's a",
    "start": "1591120",
    "end": "1598680"
  },
  {
    "text": "sequence or values that we apply to come to our product but then the tack pretty much",
    "start": "1598680",
    "end": "1605669"
  },
  {
    "text": "are all soft the same way instead of attacking the two options ad or not ad",
    "start": "1605669",
    "end": "1611609"
  },
  {
    "text": "we attack each possible value that you're adding from the pre-computation table so now for each limb there are 33",
    "start": "1611609",
    "end": "1619799"
  },
  {
    "text": "values because plus and minus zero are not distinguishable and we generate",
    "start": "1619799",
    "end": "1625830"
  },
  {
    "text": "points for on average half of them which happens to be 16 because there's some overlap and so on average we take 16",
    "start": "1625830",
    "end": "1634019"
  },
  {
    "text": "points instead of one sorry 16 points to figure out five bits of the",
    "start": "1634019",
    "end": "1639389"
  },
  {
    "text": "key instead of five to figure out five bits of the key so it's approximately three times slower but it works the",
    "start": "1639389",
    "end": "1645749"
  },
  {
    "text": "exact same way now as I said it works the same way so we're targeting things",
    "start": "1645749",
    "end": "1652559"
  },
  {
    "text": "that will cause the bug to trigger either in adding the limp from the pro competition table specifically that limp",
    "start": "1652559",
    "end": "1659039"
  },
  {
    "text": "from the competition table so we'll have a point that only breaks when you add the turkey and one that only breaks when",
    "start": "1659039",
    "end": "1665129"
  },
  {
    "text": "you subtract 12 and we send each of them and one of them will break and we will know that limp or break in the five",
    "start": "1665129",
    "end": "1672989"
  },
  {
    "text": "doubles that come immediately after which still depend on the previous limb now the one thing I didn't tell you is",
    "start": "1672989",
    "end": "1680970"
  },
  {
    "start": "1678000",
    "end": "1824000"
  },
  {
    "text": "okay but these magic points where are you pulling them out of and the answer",
    "start": "1680970",
    "end": "1686519"
  },
  {
    "text": "is that we don't have an algebraic way to figure them out partially because by",
    "start": "1686519",
    "end": "1691679"
  },
  {
    "text": "the time they reach that point of the chain a lot of things have happened to the value but we have and it would be",
    "start": "1691679",
    "end": "1699659"
  },
  {
    "text": "hard to undo them but so instead we just took the extremely fast implementation of the curve and added assembly hook to",
    "start": "1699659",
    "end": "1708179"
  },
  {
    "text": "just tell us whether or not the bug would trigger and then we run a fuzzer so that would just raise the flag set a",
    "start": "1708179",
    "end": "1715769"
  },
  {
    "text": "register if the conditions for the bag were met so we would notify us instead of breaking and then we wrote as a small",
    "start": "1715769",
    "end": "1723960"
  },
  {
    "text": "scaffolding around that which would execute all the operations that we already know from the previous limbs all",
    "start": "1723960",
    "end": "1730200"
  },
  {
    "text": "the operations that we've already learned that no we are going to be executed and then",
    "start": "1730200",
    "end": "1735340"
  },
  {
    "text": "for each of the possible next operations so subtract 16 subtract 15 all the way",
    "start": "1735340",
    "end": "1741280"
  },
  {
    "text": "to add 15 at 16 we look for something that breaks for only one of these",
    "start": "1741280",
    "end": "1747520"
  },
  {
    "text": "operations if we find that that's it that's a candidate point we send it to",
    "start": "1747520",
    "end": "1752620"
  },
  {
    "text": "the Oracle and we check if we were lucky we removed some of the constant time stuff because death code had to be",
    "start": "1752620",
    "end": "1759550"
  },
  {
    "text": "constant time our doesn't have to and turns out that branches are a little faster so this was generating point at a",
    "start": "1759550",
    "end": "1766570"
  },
  {
    "text": "very acceptable rate of course to generate points we need test points",
    "start": "1766570",
    "end": "1773440"
  },
  {
    "text": "candidate points to that we can try and figure out if they're going to be useful points or not so instead what we did",
    "start": "1773440",
    "end": "1781750"
  },
  {
    "text": "there is that we just started from a random number multiplied by G and that was a pair and then just kept adding one",
    "start": "1781750",
    "end": "1788740"
  },
  {
    "text": "to the private key and G to the public key remember that the private key is just the thing we're going to multiply G",
    "start": "1788740",
    "end": "1797350"
  },
  {
    "text": "by so if you add one to the private key and G to the public key you have a new pair of valid points point and private",
    "start": "1797350",
    "end": "1805120"
  },
  {
    "text": "key why do we need the private key because the only way we can in the Oracle does this point cause a bug is by",
    "start": "1805120",
    "end": "1813640"
  },
  {
    "text": "checking if the whole protocol works correctly if we don't know our private key there is no way we're going to know",
    "start": "1813640",
    "end": "1820060"
  },
  {
    "text": "if the other side made a mistake so this worked out we had four magic points for",
    "start": "1820060",
    "end": "1827890"
  },
  {
    "start": "1824000",
    "end": "1850000"
  },
  {
    "text": "all the different values we wanted we added some post-processing because there were plenty of false positives but",
    "start": "1827890",
    "end": "1833440"
  },
  {
    "text": "eventually we had a steady stream of points that would only break at that specific point at for that specific",
    "start": "1833440",
    "end": "1840130"
  },
  {
    "text": "operation so we know how to proceed in the attack once we know the few limbs we",
    "start": "1840130",
    "end": "1846430"
  },
  {
    "text": "know how to find the n plus 1 limb if we know the enth limb now the question is",
    "start": "1846430",
    "end": "1852040"
  },
  {
    "start": "1850000",
    "end": "2251000"
  },
  {
    "text": "how do we start how do we find the first limit the first two limbs you can think",
    "start": "1852040",
    "end": "1857470"
  },
  {
    "text": "you do the same thing right you generate a point that only breaks when you take three from the computation",
    "start": "1857470",
    "end": "1863470"
  },
  {
    "text": "table because that's the first limb and you multiply it you double it five times and you do that",
    "start": "1863470",
    "end": "1870400"
  },
  {
    "text": "you generated you try it and what happens is that it also breaks for six and for 12",
    "start": "1870400",
    "end": "1875550"
  },
  {
    "text": "why well six in the pre-computation table is nothing else than three doubled",
    "start": "1875550",
    "end": "1881730"
  },
  {
    "text": "so if the tree you find a point that breaks when you take three and you",
    "start": "1881730",
    "end": "1887290"
  },
  {
    "text": "double double double double double that will also break when you take six which",
    "start": "1887290",
    "end": "1892930"
  },
  {
    "text": "is nothing else than three double and then you double double double double so",
    "start": "1892930",
    "end": "1898000"
  },
  {
    "text": "it's going to break sooner but we don't have visibility into when it breaks we only get to know it works it didn't work",
    "start": "1898000",
    "end": "1904750"
  },
  {
    "text": "and Woodbury Coast offers 12 because 12 is again three double double so it will",
    "start": "1904750",
    "end": "1909820"
  },
  {
    "text": "break after you do double double double so how do you fix this you generate three points you generate one that",
    "start": "1909820",
    "end": "1916510"
  },
  {
    "text": "breaks doubling five times one that breaks doubling six times and one that breaks doubling seven times you send all",
    "start": "1916510",
    "end": "1923410"
  },
  {
    "text": "three and you look at which ones break if they all three break if 12 if only",
    "start": "1923410",
    "end": "1929200"
  },
  {
    "text": "two of them break it's six if only one breaks is three it's even harder than",
    "start": "1929200",
    "end": "1934810"
  },
  {
    "text": "this because the next thing might be zero and more doubles might happen but that gets less and less likely the more",
    "start": "1934810",
    "end": "1940630"
  },
  {
    "text": "zeroes you string so I'm not suggesting adding zeroes at the top of your private key to defend against this attack but",
    "start": "1940630",
    "end": "1949450"
  },
  {
    "text": "eventually you you come to a pretty certain about the first limbs and the",
    "start": "1949450",
    "end": "1956200"
  },
  {
    "text": "good thing is that you can pre-compute these these don't depend on anything don't require you to adapt on any",
    "start": "1956200",
    "end": "1961900"
  },
  {
    "text": "previous limbs because those are the first so we can pre generate these and have them forever and all the cats we",
    "start": "1961900",
    "end": "1968020"
  },
  {
    "text": "can use them so we now know how to start and how to proceed we can recover the",
    "start": "1968020",
    "end": "1974680"
  },
  {
    "text": "entire key and I can see you're tired so for a change of pace we're just going to chat about kangaroos now aren't they",
    "start": "1974680",
    "end": "1981520"
  },
  {
    "text": "cute but where are we going to use kangaroos to finish the attack so we're",
    "start": "1981520",
    "end": "1989830"
  },
  {
    "text": "going to use again the polar kangaroo attack to find the last bits of the key we could just run the auricle until the",
    "start": "1989830",
    "end": "1996820"
  },
  {
    "text": "end but this makes it much faster and more importantly to find the result of line it's optional",
    "start": "1996820",
    "end": "2004799"
  },
  {
    "text": "but it's fun to learn about it's also fun because now I had an Australian",
    "start": "2004799",
    "end": "2011549"
  },
  {
    "text": "dispute this but Pollard in a cryptography paper maintains that this",
    "start": "2011549",
    "end": "2017100"
  },
  {
    "text": "is true and I'm not arguing with Pollard so apparently kangaroos jump based on",
    "start": "2017100",
    "end": "2023970"
  },
  {
    "text": "the ground on under their feet in the point where they're jumping from so if",
    "start": "2023970",
    "end": "2029639"
  },
  {
    "text": "you put two kangaroos in the same spot they will jump in the same direction and at the same distance how do you use this",
    "start": "2029639",
    "end": "2037320"
  },
  {
    "text": "because well what if you have to catch kangaroos you had some times to catch a",
    "start": "2037320",
    "end": "2043139"
  },
  {
    "text": "kangaroo right that's annoying so what you do is that you take a ten",
    "start": "2043139",
    "end": "2048179"
  },
  {
    "text": "kangaroo which of course you have laying around because you have a ten kangaroo and you put a GPS tracker on it and you",
    "start": "2048179",
    "end": "2055169"
  },
  {
    "text": "let it loose it jumps a lot it makes a lot of footprints and eventually it you",
    "start": "2055169",
    "end": "2060388"
  },
  {
    "text": "go pick it up it made a lot of jumps and you go pick it up the kangaroo and in place of the kangaroo where you found",
    "start": "2060389",
    "end": "2066118"
  },
  {
    "text": "that you put a trap right there then a wild kangaroos hopping around now it's",
    "start": "2066119",
    "end": "2073829"
  },
  {
    "text": "very unlikely that the wild kangaroo will step into the trap right but it's more likely that will step into the",
    "start": "2073829",
    "end": "2080450"
  },
  {
    "text": "footprints of the while the same kangaroo because it left a lot of those and we know that if it steps in the same",
    "start": "2080450",
    "end": "2087750"
  },
  {
    "text": "spot it will keep jump in the same way from there on and so eventually it will end up in the trap so this is how you",
    "start": "2087750",
    "end": "2094829"
  },
  {
    "text": "catch kangaroos and that was it that was the end of talk like that that's it but",
    "start": "2094829",
    "end": "2100650"
  },
  {
    "text": "if you really want to use it for elliptic curve cryptography you just have to define how a jump is defined in",
    "start": "2100650",
    "end": "2107400"
  },
  {
    "text": "an elliptic curve now we can define it by taking a point hashing it and adding",
    "start": "2107400",
    "end": "2113579"
  },
  {
    "text": "it to itself this operation Q n plus 1 will depend only on Q n so it has it has",
    "start": "2113579",
    "end": "2120540"
  },
  {
    "text": "the property of the kangaroo jump that it only depends on the starting point the next that depends on the starting",
    "start": "2120540",
    "end": "2127170"
  },
  {
    "text": "point of the point a lot of points so we use this to catch kangaroos by to",
    "start": "2127170",
    "end": "2135170"
  },
  {
    "text": "catch to find private keys by taking a",
    "start": "2135170",
    "end": "2140990"
  },
  {
    "text": "team point at endpoint is one we know the private key off and we make it do a lot of jumps and then we only save the",
    "start": "2140990",
    "end": "2148730"
  },
  {
    "text": "final position we don't save all the intermediate states we save the final position and how much distance the",
    "start": "2148730",
    "end": "2155090"
  },
  {
    "text": "private key has traveled effectively to get there and then we take the point we",
    "start": "2155090",
    "end": "2160700"
  },
  {
    "text": "don't know the private key off and we run it a bunch we do the same thing we hope that it will intersect at some",
    "start": "2160700",
    "end": "2166940"
  },
  {
    "text": "point with the chain that the previous that the team wanted and if it does it",
    "start": "2166940",
    "end": "2172010"
  },
  {
    "text": "will end up in the trap by ending up exactly the same as the chain that we",
    "start": "2172010",
    "end": "2177920"
  },
  {
    "text": "started from a known point since we know where the chain ends and we know how far the wild point traveled we can backtrack",
    "start": "2177920",
    "end": "2185150"
  },
  {
    "text": "and we find the private key now this is actually evolved algorithm to find",
    "start": "2185150",
    "end": "2190760"
  },
  {
    "text": "private keys for full-fledged attacks but of course you can't apply it against a 256-bit key because again had heat",
    "start": "2190760",
    "end": "2199580"
  },
  {
    "text": "death of the universe yada-yada but the advantage of this attack is that if you know that the",
    "start": "2199580",
    "end": "2205520"
  },
  {
    "text": "private key lies in a range it's as if you knew that the wild kangaroo is an is",
    "start": "2205520",
    "end": "2210590"
  },
  {
    "text": "in an area and if too much time passes it probably escaped and you can start",
    "start": "2210590",
    "end": "2216020"
  },
  {
    "text": "over so this is useful when you know that the private key lies in a range and we know that the private key lies in a",
    "start": "2216020",
    "end": "2223400"
  },
  {
    "text": "range when we know a bunch of limbs already and we just don't know how the number finishes it will have to be",
    "start": "2223400",
    "end": "2230119"
  },
  {
    "text": "between the non limbs and zero and the known limbs at 32 so that's a range and",
    "start": "2230119",
    "end": "2235250"
  },
  {
    "text": "this is a more efficient attack as well I didn't make this up and it comes from the same paper from which the raw attack",
    "start": "2235250",
    "end": "2241400"
  },
  {
    "text": "comes which is the attack to find private keys so now that we know how to",
    "start": "2241400",
    "end": "2248480"
  },
  {
    "text": "start how to proceed and how to end we're just in a target now we as I told",
    "start": "2248480",
    "end": "2257660"
  },
  {
    "text": "you you only use elliptic curve diffie-hellman in a femoral static way where the one private key is fixed if",
    "start": "2257660",
    "end": "2264260"
  },
  {
    "text": "you're extremely brave and we know that usually cryptographers shouldn't be brave but we",
    "start": "2264260",
    "end": "2271580"
  },
  {
    "text": "also know that sometimes programmers come and they're like man I want more choice I want to be able to use any",
    "start": "2271580",
    "end": "2278090"
  },
  {
    "text": "primitive I want and I want to be able to combine them however I want and I want to have to choose them and I don't",
    "start": "2278090",
    "end": "2284630"
  },
  {
    "text": "want you to give me any guidance about which ones to use because I'm a mature adult programmer and I'm going to use",
    "start": "2284630",
    "end": "2290660"
  },
  {
    "text": "what I want so josy was built based on that understanding and it allows you to",
    "start": "2290660",
    "end": "2298369"
  },
  {
    "text": "use anything including a lipstick curve diffie-hellman in a femoral static or air mode now if you couldn't tell I was",
    "start": "2298369",
    "end": "2306050"
  },
  {
    "text": "sarcastic and friends don't let friends use Josie and JW tees but people still",
    "start": "2306050",
    "end": "2312859"
  },
  {
    "text": "use them so we just find ourselves off the shelf go implementation this is no",
    "start": "2312859",
    "end": "2319250"
  },
  {
    "text": "fault of their own and we check that it does support elliptic curve",
    "start": "2319250",
    "end": "2324349"
  },
  {
    "text": "diffie-hellman in the femoral static way because of course it does and we build it with a vulnerable",
    "start": "2324349",
    "end": "2330650"
  },
  {
    "text": "version of go maybe the last one before the patch was applied and we bought guild a small service something that",
    "start": "2330650",
    "end": "2336589"
  },
  {
    "text": "publishes its public key and accepts encrypted messages and there will be a",
    "start": "2336589",
    "end": "2342109"
  },
  {
    "text": "dealer timing difference or an error difference between this does not decrypt and these the crypts but I don't know",
    "start": "2342109",
    "end": "2349310"
  },
  {
    "text": "what you sent me so that's our Oracle this does not decrypt trigger the bug",
    "start": "2349310",
    "end": "2354470"
  },
  {
    "text": "this is the crypts but I don't know what what's in it did not trigger the back and we just use that to build our",
    "start": "2354470",
    "end": "2363320"
  },
  {
    "text": "adaptive attack and we recover the entire key we have to rebuild this and",
    "start": "2363320",
    "end": "2369890"
  },
  {
    "text": "we built us with the infrastructure where the there's a small dispatcher program running on a laptop or anything",
    "start": "2369890",
    "end": "2377030"
  },
  {
    "text": "maybe with an grok exposed it runs a HTTP server with two endpoints work",
    "start": "2377030",
    "end": "2382700"
  },
  {
    "text": "which allows a pool of workers to ask ok what should I fast next and then resolve",
    "start": "2382700",
    "end": "2390260"
  },
  {
    "text": "which is for when hey I found a useful point here is it it has a short timeout",
    "start": "2390260",
    "end": "2396109"
  },
  {
    "text": "so if someone else finds the if you find the limp and you want to move on to the next limb all the workers",
    "start": "2396109",
    "end": "2403460"
  },
  {
    "text": "will check in soon to figure out more work and the workers can be anything they can be cloud instances potty",
    "start": "2403460",
    "end": "2411410"
  },
  {
    "text": "assistants preemptable instances baldness instances whatever you like they just have to be able to connect to",
    "start": "2411410",
    "end": "2418250"
  },
  {
    "text": "an HTP endpoint ask for work and do some work so this scales horizontally as much as you want",
    "start": "2418250",
    "end": "2424430"
  },
  {
    "text": "and it allowed us to do the attack from top to bottom for a full recovery of the",
    "start": "2424430",
    "end": "2431000"
  },
  {
    "text": "key so here are some numbers for each key there are 52 limbs ignoring the",
    "start": "2431000",
    "end": "2436280"
  },
  {
    "text": "kangaroos for each limb there you will need on average 16 points before your",
    "start": "2436280",
    "end": "2441410"
  },
  {
    "text": "you strike the right one and each point requires about 2 to the 26 tries to find",
    "start": "2441410",
    "end": "2449180"
  },
  {
    "text": "a candidate point so about every limb is 85 CPU hours which clocks the entire",
    "start": "2449180",
    "end": "2457460"
  },
  {
    "text": "attack at less than 5,000 CPU hours which you can buy from the cloud for",
    "start": "2457460",
    "end": "2463490"
  },
  {
    "text": "less than 50 bucks so you can run the attack and it will take about 800 and",
    "start": "2463490",
    "end": "2471440"
  },
  {
    "text": "spare Kyrie's to the Oracle less if you have a lot of Kangaroos and 50 bucks in",
    "start": "2471440",
    "end": "2478180"
  },
  {
    "text": "offline computation and you will have the key so now we're gonna have a live",
    "start": "2478180",
    "end": "2483950"
  },
  {
    "start": "2482000",
    "end": "2624000"
  },
  {
    "text": "demo in which I'm going to attack a live running server from the conference Wi-Fi",
    "start": "2483950",
    "end": "2489369"
  },
  {
    "text": "you know of course I'm kidding I am not that brave instead we're gonna have a recording of exactly that",
    "start": "2489369",
    "end": "2496099"
  },
  {
    "text": "happening this is a UI built by Shawn where you can see each remaining",
    "start": "2496099",
    "end": "2503839"
  },
  {
    "text": "candidate for the next limb and you read all the candidates that we found the point for and we sent it and it was not",
    "start": "2503839",
    "end": "2510740"
  },
  {
    "text": "the right one and in green the ones that we sent and it did cross the bag so we know that that's the limb it's sped up",
    "start": "2510740",
    "end": "2519680"
  },
  {
    "text": "yes I'm cheating as I said not that brave and also you don't have the time",
    "start": "2519680",
    "end": "2525349"
  },
  {
    "text": "to stay here and see it but would you now what's beautiful about this",
    "start": "2525349",
    "end": "2531460"
  },
  {
    "text": "specifically sped up is that you know how to's Hollywood movies that depict hacking in all the",
    "start": "2531460",
    "end": "2538130"
  },
  {
    "text": "wrong ways and there are these people with these UIs where the numbers spin very fast and then it finds one and",
    "start": "2538130",
    "end": "2543859"
  },
  {
    "text": "moves to the next one and then finds that and move to next one and we were like that's absolutely Porsche that's",
    "start": "2543859",
    "end": "2549530"
  },
  {
    "text": "not how any of that works there isn't a",
    "start": "2549530",
    "end": "2557710"
  },
  {
    "text": "cryptographers get into adaptive attacks it's not the papers it's that you can build these you eyes look at the key at",
    "start": "2557710",
    "end": "2564650"
  },
  {
    "text": "the bottom slowly being stopped Hey look",
    "start": "2564650",
    "end": "2570650"
  },
  {
    "text": "at the kid at the bottom slowly rolling and appearing more and more as more bits are figured out so yes this is beautiful",
    "start": "2570650",
    "end": "2579369"
  },
  {
    "text": "now we could stay here stare at the dima for a little while I love it you probably don't so moving on what so in",
    "start": "2579369",
    "end": "2590660"
  },
  {
    "text": "real time this really depends on how many workers you have which depends on how brave you are because you have to",
    "start": "2590660",
    "end": "2599260"
  },
  {
    "text": "decide on one side it will make it faster and save me time from my life on",
    "start": "2599260",
    "end": "2604700"
  },
  {
    "text": "the other side if I forget to turn them off that's going to cost me a fortune so this one took a few hours I think 12",
    "start": "2604700",
    "end": "2613330"
  },
  {
    "text": "with doubled workers who have taken 6 with double it would probably have taken",
    "start": "2613330",
    "end": "2618650"
  },
  {
    "text": "down by someone thinking it was mining bitcoins so now as I told you when I",
    "start": "2618650",
    "end": "2625730"
  },
  {
    "start": "2624000",
    "end": "2684000"
  },
  {
    "text": "when we started I was not at Google at the time I am now at Google I'm now on the go team and I now own the",
    "start": "2625730",
    "end": "2632180"
  },
  {
    "text": "cryptography libraries in the NGO project so now this is my problem so",
    "start": "2632180",
    "end": "2637270"
  },
  {
    "text": "here's the new policy on what you need to do before we will accept your assembly from now on and you know it's",
    "start": "2637270",
    "end": "2644510"
  },
  {
    "text": "pretty obvious staff like we prefer go so if we can make the compiler faster",
    "start": "2644510",
    "end": "2649849"
  },
  {
    "text": "for you tell us and write go that is easier to to review because let's a",
    "start": "2649849",
    "end": "2654859"
  },
  {
    "text": "knowledge it assembly is hard to write and it's hard to review and then if you",
    "start": "2654859",
    "end": "2660080"
  },
  {
    "text": "have to write it assembly tell us why and then test it well test it into small",
    "start": "2660080",
    "end": "2665359"
  },
  {
    "text": "chunks because this function tested individually was easy to detect but tested in the hole if we've",
    "start": "2665359",
    "end": "2671810"
  },
  {
    "text": "taken forever and connected to give us thousand hooks so that we can false",
    "start": "2671810",
    "end": "2677210"
  },
  {
    "text": "everything and we're in the process of cleaning this up so hopefully this does not happen again now in closing if you",
    "start": "2677210",
    "end": "2686990"
  },
  {
    "start": "2684000",
    "end": "2744000"
  },
  {
    "text": "liked this talk you probably also like the crypto house the crypto challenges I",
    "start": "2686990",
    "end": "2694220"
  },
  {
    "text": "told you at the beginning and here's a three if you followed this talk you have",
    "start": "2694220",
    "end": "2700400"
  },
  {
    "text": "a head start for the latest crypto powerset written by shawn literally on the plane over here dropping",
    "start": "2700400",
    "end": "2707390"
  },
  {
    "text": "hot-off-the-press dropping right now if ssh was working so that's the URL and",
    "start": "2707390",
    "end": "2716680"
  },
  {
    "text": "finally everybody took a picture I'm gonna wait for you yes you yes no stress",
    "start": "2716680",
    "end": "2722510"
  },
  {
    "text": "don't worry no don't worry yes we were just all waiting for you but in closing",
    "start": "2722510",
    "end": "2728620"
  },
  {
    "text": "thank you very much and as uma Thurman said in Kill Bill leave the limbs you",
    "start": "2728620",
    "end": "2733730"
  },
  {
    "text": "lost those belong to me and Shawn now and thank you very much [Applause]",
    "start": "2733730",
    "end": "2746630"
  }
]