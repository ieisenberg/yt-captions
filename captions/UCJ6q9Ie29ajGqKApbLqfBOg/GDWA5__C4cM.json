[
  {
    "start": "0",
    "end": "75000"
  },
  {
    "text": "all right guys I think we're uh finally going to get",
    "start": "27080",
    "end": "32200"
  },
  {
    "text": "started so let a couple more people sit down",
    "start": "32200",
    "end": "38879"
  },
  {
    "text": "stragglers okay so uh I'm spoon him and this iscape",
    "start": "38879",
    "end": "45920"
  },
  {
    "text": "uh Matt Miller either one um and we're here to talk about uh Beyond EIP as a",
    "start": "45920",
    "end": "52320"
  },
  {
    "text": "presentation we're going to talk um less about exploitation vectors and stuff like that but more about um what you do",
    "start": "52320",
    "end": "60359"
  },
  {
    "text": "with an exploit we're going to talk a lot about Shell Code um the infrastructure that it takes to be able to do some some sort of advanced uh",
    "start": "60359",
    "end": "67799"
  },
  {
    "text": "attack stuff and then we're going to get into all of those different Technologies",
    "start": "67799",
    "end": "74840"
  },
  {
    "start": "75000",
    "end": "111000"
  },
  {
    "text": "so so uh who we are uh I'm a full-time student and uh I started working on met",
    "start": "75080",
    "end": "81040"
  },
  {
    "text": "exploit uh for the 2.0 release in 2003 um and a little bit after that",
    "start": "81040",
    "end": "88159"
  },
  {
    "text": "scape came along and was doing a lot of really cool payload stuff and he uh joined on working with us in 2004 uh",
    "start": "88159",
    "end": "95640"
  },
  {
    "text": "he's done a lot of the really cool stuff if anybody's heard of interpreter um passive acts a lot of this stuff uh he",
    "start": "95640",
    "end": "101960"
  },
  {
    "text": "wrote and he's a he's a software developer uh and he just does research",
    "start": "101960",
    "end": "108240"
  },
  {
    "text": "for fun so so uh what's this presentation about",
    "start": "108240",
    "end": "114680"
  },
  {
    "start": "111000",
    "end": "171000"
  },
  {
    "text": "well uh what it's not about we're not going to talk about any new exploit or attack vectors um and we're not going to",
    "start": "114680",
    "end": "120360"
  },
  {
    "text": "talk about any new exploitation techniques um this stuff has been talked about a lot previous black hats defcons",
    "start": "120360",
    "end": "126479"
  },
  {
    "text": "papers um and I mean there's there's a lot of good knowledge about there and we're not talk about anybody OD we're not going to talk about oday bugs",
    "start": "126479",
    "end": "133040"
  },
  {
    "text": "everything we're going to talk about is bug independent it doesn't apply to any specific bug it's going to be able to",
    "start": "133040",
    "end": "138319"
  },
  {
    "text": "apply to any bug um so then what we are talking about is",
    "start": "138319",
    "end": "143800"
  },
  {
    "text": "what do you do after you can you know exploit leverage of vulnerability and start executing code what do you do",
    "start": "143800",
    "end": "149200"
  },
  {
    "text": "after you own EIP um and we're going to talk about some of the different techniques to do it um and by techniques",
    "start": "149200",
    "end": "154280"
  },
  {
    "text": "we're not talking about uh exploitation techniques we're talking about uh showell code techniques generally um so",
    "start": "154280",
    "end": "160680"
  },
  {
    "text": "we're talking mostly about the code that's being run in uh in a buffer overflow attack or any of these sort of",
    "start": "160680",
    "end": "166560"
  },
  {
    "text": "tags we're going to talk about our tools and the stuff we've been working on",
    "start": "166560",
    "end": "172280"
  },
  {
    "start": "171000",
    "end": "252000"
  },
  {
    "text": "so uh So the plan of attack what we're going to take is uh there's a lot of there's a lot of information that you",
    "start": "172720",
    "end": "178120"
  },
  {
    "text": "guys need to know um there's a lot of groundwork that allows us to be able to do some of the cool stuff that we do so",
    "start": "178120",
    "end": "183760"
  },
  {
    "text": "we're going to try to start from the basics we're going to break down and show all of the pieces that make up a",
    "start": "183760",
    "end": "188799"
  },
  {
    "text": "payload um how how the Frameworks how payloads automatically get generated in things like Metasploit um recent tools",
    "start": "188799",
    "end": "195560"
  },
  {
    "text": "tricks and different techniques um they're going to allow us to do all of this cooler stuff so then once we sort",
    "start": "195560",
    "end": "201879"
  },
  {
    "text": "of lay that Foundation we're going to move into post exploitation tools and that's that's the term that we've coined",
    "start": "201879",
    "end": "209319"
  },
  {
    "text": "for ort of um Advanced Shell Code that you know uh is attacker Centric so",
    "start": "209319",
    "end": "217959"
  },
  {
    "text": "things like staying in memory staying in process uh being able to upload and download files without using command.",
    "start": "217959",
    "end": "223680"
  },
  {
    "text": "exe um all these sort of uh Advanced uh you know penetration type",
    "start": "223680",
    "end": "230680"
  },
  {
    "text": "Shell Code uh we call those post post exploitation tools um they tend to be interactive and that's the difference",
    "start": "230680",
    "end": "236680"
  },
  {
    "text": "between just like you know a command. exe shell so then we're going to talk about all the the technology behind that",
    "start": "236680",
    "end": "243159"
  },
  {
    "text": "um and then how our implementations and then basically all of the kind of features that would give to an end user",
    "start": "243159",
    "end": "249040"
  },
  {
    "text": "um so all the cool things you can do so you want to start uh sure so uh",
    "start": "249040",
    "end": "256359"
  },
  {
    "start": "252000",
    "end": "311000"
  },
  {
    "text": "we've kind of broken down the exploitation cycle into three phases uh the first phase that everyone is",
    "start": "256359",
    "end": "261759"
  },
  {
    "text": "probably familiar with is uh pre- exploitation this is the phase where you're finding a bug uh you've isolated",
    "start": "261759",
    "end": "267520"
  },
  {
    "text": "it you've figured out how to trigger it uh and now it's time to kind of write the tools that you're going to need to be able to exploit this yeah the way we",
    "start": "267520",
    "end": "274639"
  },
  {
    "text": "broke down everybody has different uh terminology for this stuff we kind of do it time based so you have pre-",
    "start": "274639",
    "end": "280400"
  },
  {
    "text": "exploitation that you know could be done months and months before an attack and then you're going to have like the",
    "start": "280400",
    "end": "285720"
  },
  {
    "text": "attack itself um which is exploitation and that's going to be you know you know",
    "start": "285720",
    "end": "291240"
  },
  {
    "text": "maybe you're you know a ninja Navy officer and you've waited like six months for this attack window and you",
    "start": "291240",
    "end": "297440"
  },
  {
    "text": "whatever so that that's what this is going to be this is going to be reconnaissance information gathering finding a Target and then initializing",
    "start": "297440",
    "end": "304639"
  },
  {
    "text": "all of your stuff getting everything ready and then launching the exploit so then the next phase is post exploitation",
    "start": "304639",
    "end": "311280"
  },
  {
    "start": "311000",
    "end": "445000"
  },
  {
    "text": "and this is the one that we're going to focus on mostly because it's kind of the area of most interest like right now",
    "start": "311280",
    "end": "316720"
  },
  {
    "text": "spoon said mostly exploitation technology is matured at this point we've got all the vectors you know",
    "start": "316720",
    "end": "322160"
  },
  {
    "text": "determined uh we can reliably get code execution but what do we actually want to do once we can get code execution so",
    "start": "322160",
    "end": "328639"
  },
  {
    "text": "that's going to be this post exploitation phase of the timeline uh this is the phase where everybody's familiar with getting a command shell uh",
    "start": "328639",
    "end": "335479"
  },
  {
    "text": "some of the other things like uh executing commands file access if you saw the demo last year you saw VNC",
    "start": "335479",
    "end": "342000"
  },
  {
    "text": "injection uh and all these other Advanced payloads that you can do during this phase it's just kind of arbitrary",
    "start": "342000",
    "end": "347400"
  },
  {
    "text": "so we're going to kind of provide a a glimpse into some of the powers that you have during this phase of exploitation",
    "start": "347400",
    "end": "353800"
  },
  {
    "text": "and and post exploitation could go on for a long time it could go on for days um and whatever you want it's up to the",
    "start": "353800",
    "end": "360360"
  },
  {
    "text": "the end exploiter I guess um and then it could kind of include things like rot",
    "start": "360360",
    "end": "366160"
  },
  {
    "text": "kids and stuff like that but we're not going to talk about that we're just going to sort of talk about the uh our post exploitation show code stuff",
    "start": "366160",
    "end": "374800"
  },
  {
    "text": "so okay so um I mean most people hear this term payload uh and or Shell Code",
    "start": "376880",
    "end": "384599"
  },
  {
    "text": "used pretty much interchangeably um but I mean back in the day it used to be just you know an assembly blob and",
    "start": "384599",
    "end": "391199"
  },
  {
    "text": "things have sort of the typical attack has definitely evolved into something uh much more advanced and it might be",
    "start": "391199",
    "end": "397319"
  },
  {
    "text": "something you don't even necessarily realize so um how a payload breaks down",
    "start": "397319",
    "end": "402759"
  },
  {
    "text": "uh a knop sled is optional but it's used for an exploit where your return is uncertain so generally in Windows",
    "start": "402759",
    "end": "409440"
  },
  {
    "text": "exploits you won't see KN sleds very often um and there's a lot of ids's that claim to be able to do knop sled",
    "start": "409440",
    "end": "414680"
  },
  {
    "text": "detection and stuff like that and uh that's kind of garbage because for half of the time for most of the good bugs don't even need an oped but there are",
    "start": "414680",
    "end": "421680"
  },
  {
    "text": "some situations uh Unix exploits uh brute forcing attacks where an opsed can be very valuable so",
    "start": "421680",
    "end": "430479"
  },
  {
    "text": "um so uh so what how it works is control is going to uh hopefully you're going to",
    "start": "430879",
    "end": "436080"
  },
  {
    "text": "land somewhere in this knop space it just gives you a big area to land into uh and then it's generally one bite a",
    "start": "436080",
    "end": "441919"
  },
  {
    "text": "line and you're going to sort of run through this and then run into the payload",
    "start": "441919",
    "end": "447639"
  },
  {
    "text": "um so then uh something that's also you know you're",
    "start": "447639",
    "end": "453120"
  },
  {
    "text": "not going to see this for local exploit and stuff you'll have we generally have uh we'll use the term encoder and decoder pretty much uh",
    "start": "453120",
    "end": "459800"
  },
  {
    "text": "interchangeably so uh what this does is uh it's a little stub piece of assembly code it's going to get put before your",
    "start": "459800",
    "end": "466720"
  },
  {
    "text": "payload and it's going to uh un encode your payload so basically before you do",
    "start": "466720",
    "end": "472120"
  },
  {
    "text": "an attack you're going to take your payload and for reasons uh we'll talk about you want to transform it somehow",
    "start": "472120",
    "end": "477800"
  },
  {
    "text": "so say you want to turn it into asky character say you know like you know any sort of encoding you want a base 64 it or",
    "start": "477800",
    "end": "484360"
  },
  {
    "text": "something I mean obviously that wouldn't work very well in our case but any any of these sort of Transformations and then of course you can't execute that",
    "start": "484360",
    "end": "490879"
  },
  {
    "text": "directly so you need something to untransform it so this is going to be the inverse operation uh and that's just",
    "start": "490879",
    "end": "495919"
  },
  {
    "text": "this little piece of assembly code that's going to get stuck before that so that's the decoder and then the encoded",
    "start": "495919",
    "end": "501720"
  },
  {
    "text": "payload you see in parenthesis that's going to be uh you know your end payload your command shell whatever that is and",
    "start": "501720",
    "end": "507720"
  },
  {
    "text": "that's going to be encoded um when it's sent over the wire so the payload this is just our ARB arbitrary code uh this",
    "start": "507720",
    "end": "514279"
  },
  {
    "text": "is typically in the generic sense it provides a command shell but uh the stuff we try to do is a lot more",
    "start": "514279",
    "end": "519839"
  },
  {
    "text": "advanced than that so uh so like I said an OP sled it's going to be a series of bites that",
    "start": "519839",
    "end": "526080"
  },
  {
    "start": "521000",
    "end": "572000"
  },
  {
    "text": "equate to no operations so basically um when you don't know where you can return into an exploit you don't know an exact",
    "start": "526080",
    "end": "532480"
  },
  {
    "text": "address you can kind of get an idea um what an opset allows you to do allows you to give a very big surface area to",
    "start": "532480",
    "end": "537880"
  },
  {
    "text": "land so you can say all right you know I'm going to try to put like 1K of knops and then I I have a feeling I can guess",
    "start": "537880",
    "end": "543839"
  },
  {
    "text": "the address within that 1K um so then you're going to land you know you could land at the beginning in the middle at",
    "start": "543839",
    "end": "549120"
  },
  {
    "text": "the end anywhere in this and then all it's supposed to do is just be instructions that don't do anything",
    "start": "549120",
    "end": "554480"
  },
  {
    "text": "harmful and then they just run and then you land into your your payload so it's just it's sort of a you know that's why",
    "start": "554480",
    "end": "560680"
  },
  {
    "text": "it's called the sled it's just you're hitting it and then you're sliding in to uh your payload so uh a client is going",
    "start": "560680",
    "end": "569640"
  },
  {
    "text": "to build a knop sled and it's going to repend it to the payload um and then it's just going to",
    "start": "569640",
    "end": "574959"
  },
  {
    "text": "transmit that entire thing so you have the payload and then you're going to have this big sled out front um so then",
    "start": "574959",
    "end": "580600"
  },
  {
    "text": "the target is going to execute all some or none of the KN instructions just depends where you return and the idea is",
    "start": "580600",
    "end": "586399"
  },
  {
    "text": "that you have this big range that you can hit so instead of having to guess you know an address to the bite now you can guess an address to the you know 1K",
    "start": "586399",
    "end": "593519"
  },
  {
    "text": "which is uh you know a lot more predictable so then the execution just",
    "start": "593519",
    "end": "598600"
  },
  {
    "text": "falls through to the pill so not all vulnerabilties vulnerabilities have predictable return",
    "start": "598600",
    "end": "604160"
  },
  {
    "start": "599000",
    "end": "610000"
  },
  {
    "text": "addresses uh pretty much all unix's um grot forcing exploits uh can take very",
    "start": "604160",
    "end": "610720"
  },
  {
    "start": "610000",
    "end": "705000"
  },
  {
    "text": "good use of an Ops slid so it can it can improve the exploit quality at the same time it can",
    "start": "610720",
    "end": "618519"
  },
  {
    "text": "uh you know it can be bad too because a lot of people will try to signature on knop sleds so on one hand it can improve",
    "start": "618519",
    "end": "625040"
  },
  {
    "text": "the quality of your exploit on the other hand it can sort of decrease your um stealthiness you're going to have to send a bigger request to have all these",
    "start": "625040",
    "end": "631240"
  },
  {
    "text": "knob sleds in and it may be something that's predictable so uh but one thing that having a big knob slet does is it",
    "start": "631240",
    "end": "637440"
  },
  {
    "text": "allows you to brute force in bigger increments so you've ever seen a Brute Force exploit it'll run us like trying this address you know trying this",
    "start": "637440",
    "end": "642839"
  },
  {
    "text": "address plus four trying whatever so the bigger the knop sled the bigger these address jumps you can take so you know",
    "start": "642839",
    "end": "649600"
  },
  {
    "text": "if you have a small small knob sled maybe it'll take 20 attempts before you find the address but if you're big knob slide maybe you can do it in one or two",
    "start": "649600",
    "end": "655320"
  },
  {
    "text": "attempts so it's kind of like this trade-off of all of the different things you know it's stealthy and at the same time less stealthy because it's",
    "start": "655320",
    "end": "661680"
  },
  {
    "text": "stealthier because now you're making less requests but it's also bigger requests um so this is stuff that if you",
    "start": "661680",
    "end": "667720"
  },
  {
    "text": "guys ever want to do you know some sort of advanced attacking uh I mean this is stuff that would be important to",
    "start": "667720",
    "end": "673360"
  },
  {
    "text": "understand who you're attacking and then you know what what sort of qualities you find most important in your attack that",
    "start": "673360",
    "end": "680480"
  },
  {
    "text": "would be kind of during the exploitation phase during your reconnaissance you'd kind of figure out would it be best to use a larger knop sled or a smaller knop",
    "start": "680480",
    "end": "686760"
  },
  {
    "text": "sled uh just based on the situation knowing knowing what kind of defensive mechanisms they have what kind of people",
    "start": "686760",
    "end": "692800"
  },
  {
    "text": "watch their Network you know um some tools will be very specific to seeing noisy traffic so lots of connections or",
    "start": "692800",
    "end": "699440"
  },
  {
    "text": "something like that where you know and it also depends on you know depends on a lot of different",
    "start": "699440",
    "end": "704959"
  },
  {
    "text": "things so uh existing nsled technology uh everybody knows Ox 90 and that's",
    "start": "704959",
    "end": "710360"
  },
  {
    "text": "typically that's used a lot even in core impact and canvas both uh still use os90",
    "start": "710360",
    "end": "716760"
  },
  {
    "text": "sleds a lot so um that's very signatur B uh ADM mutate came out a while ago and",
    "start": "716760",
    "end": "724440"
  },
  {
    "text": "they had uh a single bite x86 knop generator um and that would use different one byte op codes so o90 is",
    "start": "724440",
    "end": "731839"
  },
  {
    "text": "just a no operation but there's other things setting Flags clearing Flags things that aren't really going to um",
    "start": "731839",
    "end": "738639"
  },
  {
    "text": "they do something but they aren't going to do something that's going to affect the execution so what we want in a no",
    "start": "738639",
    "end": "744199"
  },
  {
    "text": "operation instruction is we want something that's not going to cause harm it's not going to crash the machine it's not going to modify any memory State",
    "start": "744199",
    "end": "750720"
  },
  {
    "text": "anything we want to save so we could do things like you know add a number decremented number add a number decremented number I mean if it's",
    "start": "750720",
    "end": "756279"
  },
  {
    "text": "something we don't care about um so Metasploit technology uh we're not going to really talk about",
    "start": "756279",
    "end": "761440"
  },
  {
    "text": "this but we have something called uh opop 2 which is a a multi-te uh kned",
    "start": "761440",
    "end": "766920"
  },
  {
    "text": "generator so uh instead of just having one by op codes it allows you to have uh between one and six by op codes and",
    "start": "766920",
    "end": "774440"
  },
  {
    "text": "prefixes and stuff like this so it makes um detecting n SLS a lot harder because",
    "start": "774440",
    "end": "780680"
  },
  {
    "text": "none of the existing a you know some people wrote some tools that would detect ADM mutate sleds and stuff like that um and this this is really makes",
    "start": "780680",
    "end": "787680"
  },
  {
    "text": "things a lot more difficult yeah just throw it out there uh spoon actually uh presented at Recon and his slides talk",
    "start": "787680",
    "end": "794000"
  },
  {
    "text": "about uh nyn 2 in quite a bit more detail so if you're curious about how it works you can check that",
    "start": "794000",
    "end": "801000"
  },
  {
    "start": "801000",
    "end": "888000"
  },
  {
    "text": "out so you uh so uh the encoders that we talked about the purpose behind the",
    "start": "801480",
    "end": "807160"
  },
  {
    "text": "encoder is we want to ret maintain the functionality of the payload but we want to transform the way that it's",
    "start": "807160",
    "end": "812480"
  },
  {
    "text": "represented in memory uh or just you know uh as a set of bites uh so how the",
    "start": "812480",
    "end": "818959"
  },
  {
    "text": "encoder Works basically uh and just to back up a little bit the reason why you would want to encode is let's say uh",
    "start": "818959",
    "end": "825240"
  },
  {
    "text": "many times you run into exploits where you can't use a certain set of bytes you can't use a space you can't use a",
    "start": "825240",
    "end": "831199"
  },
  {
    "text": "backslash you can't use you know higher than seven bit uh you know op codes or anything of that sort uh so what you can",
    "start": "831199",
    "end": "837880"
  },
  {
    "text": "use is an encoder in this case so that you can transform the format of the payload without actually changing its",
    "start": "837880",
    "end": "844399"
  },
  {
    "text": "functionality uh we talk about that more in the slid yeah so uh kind of just to Breeze through this basically how the",
    "start": "844399",
    "end": "850920"
  },
  {
    "text": "encoder works is on the client side prior to exploitation you have a stub that'll process your raw payload the one",
    "start": "850920",
    "end": "857800"
  },
  {
    "text": "that's going to give you a command shell or do any other Advanced step and it's going to encode it and just kind of",
    "start": "857800",
    "end": "864399"
  },
  {
    "text": "transform it to the form they're actually going to send across the wire uh so before we send it across the wire the we decode a stub a decoder stub and",
    "start": "864399",
    "end": "871279"
  },
  {
    "text": "the purpose of the decoder stub is to once that code is executed on the target machine to take that encoded payload",
    "start": "871279",
    "end": "878160"
  },
  {
    "text": "transform it back to the original form and then fall into it and execute it so",
    "start": "878160",
    "end": "883199"
  },
  {
    "text": "that we'll see that here so after we do this the client's going to transmit the entire payload VI an exploit uh it's",
    "start": "883199",
    "end": "889680"
  },
  {
    "start": "888000",
    "end": "955000"
  },
  {
    "text": "going to get over there the codee's going to get executed uh so the target executes the decoder stub and then the",
    "start": "889680",
    "end": "896000"
  },
  {
    "text": "decoder stub is going to perform that inverse operation get the payload back back to its original format and our",
    "start": "896000",
    "end": "901199"
  },
  {
    "text": "code's going to execute as normal so an simple example of an encoder um so we",
    "start": "901199",
    "end": "906839"
  },
  {
    "text": "say an encoder and then we usually say decoder stub so usually there's there's two components there's there's sort of the uh the attacker side this is going",
    "start": "906839",
    "end": "913920"
  },
  {
    "text": "to be something that if you're using a framework this is something that's going to do for you for example Metasploit um",
    "start": "913920",
    "end": "920199"
  },
  {
    "text": "so an example of a simple encoder would be you take every bite and you add one to it so if you had ox40 now you have Ox",
    "start": "920199",
    "end": "925920"
  },
  {
    "text": "41 um and then the counter decoder sub that's going to be written in assembly is just going to Loop through the uh",
    "start": "925920",
    "end": "933560"
  },
  {
    "text": "encoded payload and then it's going to subtract one because you added one before so what this is just allowing you to do is take your payload and sort of",
    "start": "933560",
    "end": "940240"
  },
  {
    "text": "mutate it into a different fite space and that has a lot of really important uh uses so pretty much most of the like",
    "start": "940240",
    "end": "948040"
  },
  {
    "text": "you know all of the stuff you see in metas if anybody's ever used it that would not be possible without encoders they're quite",
    "start": "948040",
    "end": "955600"
  },
  {
    "start": "955000",
    "end": "1065000"
  },
  {
    "text": "important so yeah just as we were saying uh the purpose of the encoders what's so cool about them is that now you can",
    "start": "956160",
    "end": "962839"
  },
  {
    "text": "avoid those restricted characters in your payload uh you don't have to worry about having a no bite in your payload",
    "start": "962839",
    "end": "968240"
  },
  {
    "text": "yes having a decoder stud prefixed in front of the payload is going to make it a little bit bigger but often time that's negligible so you don't need to",
    "start": "968240",
    "end": "974560"
  },
  {
    "text": "worry about it uh so that's one of the big big bonuses um and often times it's interesting because people will say like",
    "start": "974560",
    "end": "980560"
  },
  {
    "text": "oh Dakota are bad for size but then you'll see people who write Shell Code to like specifically avoid certain bites",
    "start": "980560",
    "end": "986000"
  },
  {
    "text": "they're like okay this is null free Shell Code or this is like you know Ox OA free Shell Code and you look at it",
    "start": "986000",
    "end": "991040"
  },
  {
    "text": "and actually ends up being bigger than using an encoder because our encoder stub may be 20 bytes but by trying to",
    "start": "991040",
    "end": "998160"
  },
  {
    "text": "avoid all these btes in your actual uh you know your big payload you may end up you know doing different instructions",
    "start": "998160",
    "end": "1004120"
  },
  {
    "text": "that add more than 20 bytes in the end so we'll take cases where someone wrote like a special case payload against a certain character and we can just take",
    "start": "1004120",
    "end": "1010680"
  },
  {
    "text": "you know our like template already made um Shell Code thr through an encoder and ends up being smaller so this is",
    "start": "1010680",
    "end": "1017440"
  },
  {
    "text": "actually uh you know really good stuff so yep so the other the other big bonus",
    "start": "1017440",
    "end": "1023319"
  },
  {
    "text": "of having an encoder is that you can survive Transformations so if you know that the application that you're attacking is going to for instance do",
    "start": "1023319",
    "end": "1029600"
  },
  {
    "text": "two upper on the payload that you pass it uh you can use an encoder to ensure that your payload is already to Upper",
    "start": "1029600",
    "end": "1035558"
  },
  {
    "text": "safe so all of the op codes or you know the encoded version is already uppercase so that when you go through that transform you will be unchanged uh so",
    "start": "1035559",
    "end": "1043280"
  },
  {
    "text": "this also applies to things like Unicode and stuff like that so there'll be cases where you know you'll have a buffer it",
    "start": "1043280",
    "end": "1049039"
  },
  {
    "text": "either has to be in unic code to begin with and it gets validated or you know it'll get transformed into unic code so",
    "start": "1049039",
    "end": "1054960"
  },
  {
    "text": "you're going to need to be able to have uh a payload that after these Transformations are still going to be",
    "start": "1054960",
    "end": "1061520"
  },
  {
    "text": "you know correct executable machine code so as a cool sort of uh side effect",
    "start": "1061520",
    "end": "1070240"
  },
  {
    "start": "1065000",
    "end": "1134000"
  },
  {
    "text": "um I mean encoders were actually written for very practical reasons they weren't written for IDs evasion they were written so we could avoid certain Bad",
    "start": "1070240",
    "end": "1076640"
  },
  {
    "text": "characters um and the explo wouldn't work without avoiding these characters you mean it would it would terminate you know too soon the Overflow wouldn't",
    "start": "1076640",
    "end": "1083200"
  },
  {
    "text": "happen whatever the case would be so uh generally they were written for very you know practical means um but then sort of",
    "start": "1083200",
    "end": "1089039"
  },
  {
    "text": "as a cool side effect you avoid uh a lot of IDs a lot of sort of IDs stuff for",
    "start": "1089039",
    "end": "1094799"
  },
  {
    "text": "example um you know if I if we have a normal payload we might have SL bsh somewhere in here because we're going to",
    "start": "1094799",
    "end": "1101000"
  },
  {
    "text": "execute SL bsh so that string would be somewhere along our assembly code because it's just going to be data to",
    "start": "1101000",
    "end": "1106480"
  },
  {
    "text": "our to our code um so now as a side of effect since all of our stuff's run through an encoder anyway that's going",
    "start": "1106480",
    "end": "1111600"
  },
  {
    "text": "to be transformed and that's not going to be on the wire anymore so if any ids's are trying to look at specific things that are characteristic to a",
    "start": "1111600",
    "end": "1118120"
  },
  {
    "text": "payload you know binah any of these sort of things now as a side effect we just",
    "start": "1118120",
    "end": "1123880"
  },
  {
    "text": "you know we can we can mutate and pretty much avoid any sort of uh we can avoid any detection on the payload pretty much",
    "start": "1123880",
    "end": "1131280"
  },
  {
    "text": "on the on the encoded payload so so uh just kind of give some",
    "start": "1131280",
    "end": "1137159"
  },
  {
    "text": "background on encoder stuff uh the deao standard at this point that most people",
    "start": "1137159",
    "end": "1142440"
  },
  {
    "text": "use for encoders is exor just because of the nice properties that exor has of giving you a better bit distribution uh",
    "start": "1142440",
    "end": "1149039"
  },
  {
    "text": "and better possibilities that you can create by doing an exor on you know a given bite word or dword basis uh so",
    "start": "1149039",
    "end": "1156880"
  },
  {
    "text": "basically it uh just for those who aren't familiar with exor we're not going to cover it but basically the",
    "start": "1156880",
    "end": "1163080"
  },
  {
    "text": "purpose of this is is you have your payload separated into different blocks it's either a bite you know two bytes",
    "start": "1163080",
    "end": "1169200"
  },
  {
    "text": "four bytes whatever the casee may be and what you do is you have a key that's either static or variable that you go",
    "start": "1169200",
    "end": "1174559"
  },
  {
    "text": "through just Loop through every block in the payload and xoring it with that key uh to generate the encoded version of",
    "start": "1174559",
    "end": "1180640"
  },
  {
    "text": "the payload so then what you'll do on the flip side is when it's running on the target machine you'll have the decoder stub that just does the exact",
    "start": "1180640",
    "end": "1187000"
  },
  {
    "text": "same operation since xor is its own inverse you'll get the same result back that you had on the original side so",
    "start": "1187000",
    "end": "1193000"
  },
  {
    "text": "that's one of the nice reasons that exor is used just because of that property of exor and uh and it in a framework like",
    "start": "1193000",
    "end": "1199240"
  },
  {
    "text": "met asit not only is the uh encoded payload being dynamically generated but also the counter decoder stub is also",
    "start": "1199240",
    "end": "1205960"
  },
  {
    "text": "being dynamically in generated so for example um we're g to you're going to you know just give us a payload and",
    "start": "1205960",
    "end": "1212080"
  },
  {
    "text": "you're going to say you know I want to encode it and then we're going to look and we're g to and you say you know I want to encode it and I want to avoid",
    "start": "1212080",
    "end": "1217720"
  },
  {
    "text": "all of these characters I want to avoid null I want to avoid Ox OA um and then",
    "start": "1217720",
    "end": "1223400"
  },
  {
    "text": "we have some systems that are going to look through and we're going to determine a key that when your buffer is xord will avoid all of these characters",
    "start": "1223400",
    "end": "1230559"
  },
  {
    "text": "so if you say I want to avoid this big list we go through and we find a key that when the data is exert it will avoid those characters so we mutate this",
    "start": "1230559",
    "end": "1237679"
  },
  {
    "text": "and then we build the decoder stub and we put that xor key that we just found in that stub and we put the two",
    "start": "1237679",
    "end": "1246039"
  },
  {
    "start": "1246000",
    "end": "1458000"
  },
  {
    "text": "together um so some other uh encoder technologies that exist and in fact are",
    "start": "1246480",
    "end": "1251520"
  },
  {
    "text": "in metas sploit um well Ricks wrote a good uh alpha numeric paper in fora 57",
    "start": "1251520",
    "end": "1258360"
  },
  {
    "text": "talking talking about how to sort of do um you know exactly what we're doing except staying in an alpha numeric range",
    "start": "1258360",
    "end": "1265120"
  },
  {
    "text": "which is pretty hard because you you really limited to the the assembly instructions you can use um so that's",
    "start": "1265120",
    "end": "1270679"
  },
  {
    "text": "definitely advantage of using an encoder basing to try to you know change the whole payload is that encoder you can",
    "start": "1270679",
    "end": "1276320"
  },
  {
    "text": "just write once and you can make it try to make it as small as possible and then you know that's it so um so then rck",
    "start": "1276320",
    "end": "1283520"
  },
  {
    "text": "wrote this paper and then Skyland came back and did uh a very good he sort of",
    "start": "1283520",
    "end": "1288640"
  },
  {
    "text": "improved on a lot of different people's techniques and wrote a very good implementation of an x86 ASI and unic",
    "start": "1288640",
    "end": "1294480"
  },
  {
    "text": "code encoder and metlo has that and it um and it works really well uh David",
    "start": "1294480",
    "end": "1300679"
  },
  {
    "text": "tell and FX also had um written encoders for Unicode",
    "start": "1300679",
    "end": "1306240"
  },
  {
    "text": "situations um and that's really important because I mean like I remember when uh FX and David tell were first",
    "start": "1306240",
    "end": "1312320"
  },
  {
    "text": "writing these encoders it was just you know one bug came out and your you know your payload had to be in unic code and",
    "start": "1312320",
    "end": "1320159"
  },
  {
    "text": "you know none of the existing technology was really able to do that so you have to sit down and you have to think about",
    "start": "1320159",
    "end": "1325200"
  },
  {
    "text": "it and you have to write and try to design encoder that can you know deal with these constraints um so then in Menlo we have",
    "start": "1325200",
    "end": "1333720"
  },
  {
    "text": "uh just a a normal encoder called chicat gai which was uh written I guess mostly",
    "start": "1333720",
    "end": "1341279"
  },
  {
    "text": "for IDs evasion yeah it's not really that normal uh just to interject here one of",
    "start": "1341279",
    "end": "1346799"
  },
  {
    "text": "the cool properties he's the one that worked on this uh one of the cool properties of shic g i is basically what",
    "start": "1346799",
    "end": "1351840"
  },
  {
    "text": "it does is uh decoders usually uh except for the key are generally static uh",
    "start": "1351840",
    "end": "1357840"
  },
  {
    "text": "which is one of the points on there uh so this is something that a lot of IDs vendors will pick up on and they'll say",
    "start": "1357840",
    "end": "1363120"
  },
  {
    "text": "well I know that the payload could be encoded so I obviously can't signature on that but what I can do is signature on the static decoder stub that's going",
    "start": "1363120",
    "end": "1369640"
  },
  {
    "text": "to be sent prefixed to this encoded payload so what uh smam did is he went",
    "start": "1369640",
    "end": "1375039"
  },
  {
    "text": "and wrote an encoder that uh basically uh has just the instructions are set up such",
    "start": "1375039",
    "end": "1381200"
  },
  {
    "text": "that they can be moved around uh or substituted with other instructions of the same same length uh and he just",
    "start": "1381200",
    "end": "1387240"
  },
  {
    "text": "built some block based dependencies and things of that sort so what he can do is uh at runtime he can you know build a",
    "start": "1387240",
    "end": "1393600"
  },
  {
    "text": "decoder St on the Fly that is functionally equivalent to any other of the decoder stubs that he's going to use",
    "start": "1393600",
    "end": "1398919"
  },
  {
    "text": "uh but totally different in format so you end up with something that is going to be very challenging for IDs people to",
    "start": "1398919",
    "end": "1405000"
  },
  {
    "text": "Signature so that's that's the cool property of uh and it's it's also pretty useful for functional reasons because",
    "start": "1405000",
    "end": "1410279"
  },
  {
    "text": "one of the problems we keep on talking about avoiding Bad characters which is very important so what happens when the encoder you're using it's a static",
    "start": "1410279",
    "end": "1416320"
  },
  {
    "text": "encoder it has a bad character well then you have a problem you can't use that encoder so that's one of sort of the nice things also about shakata ganai is",
    "start": "1416320",
    "end": "1422960"
  },
  {
    "text": "it was sort of designed to be you know to try to be able to generate lots of different combinations with different",
    "start": "1422960",
    "end": "1428799"
  },
  {
    "text": "bite sequences and stuff like that so you can actually tell shakata ghai that I'm trying to avoid you know this character and maybe it would have had it",
    "start": "1428799",
    "end": "1435320"
  },
  {
    "text": "if it was static but this way when it generates itself it tries to look and say like okay I have these four possibilities well let's remove any of",
    "start": "1435320",
    "end": "1441760"
  },
  {
    "text": "the possibilities that have a bad character and now I'm going to pick one that doesn't if if you're curious about that he also that's also in his Recon",
    "start": "1441760",
    "end": "1448120"
  },
  {
    "text": "slides so you check those out we've talked more about the details of this stuff in other presentation so we won't try to talk about it too much we'll try",
    "start": "1448120",
    "end": "1454080"
  },
  {
    "text": "to lead into the uh what's built upon this sort of stuff so kind of here uh the big",
    "start": "1454080",
    "end": "1461440"
  },
  {
    "start": "1458000",
    "end": "1501000"
  },
  {
    "text": "question is what is a payload uh and this is something we've already kind of answered but basically it's going to be the arbitrary code that we execute that",
    "start": "1461440",
    "end": "1468159"
  },
  {
    "text": "does some undefined task could be it's totally arbitrary whatever it's going to do whatever we can fit into the exploit",
    "start": "1468159",
    "end": "1474600"
  },
  {
    "text": "in this situation uh so how a payload works this is pretty simple uh the client prepares the payload for",
    "start": "1474600",
    "end": "1480600"
  },
  {
    "text": "execution uh what that could entail is basically you may need to embed the command string or you may need to embed",
    "start": "1480600",
    "end": "1487000"
  },
  {
    "text": "uh Target IP address and Port if it's going to connect back to you for instance for to give you a command shell",
    "start": "1487000",
    "end": "1492159"
  },
  {
    "text": "uh so that thing that stuff needs to be substituted prior to being transmitted to the other side after that happens the",
    "start": "1492159",
    "end": "1497679"
  },
  {
    "text": "client's going to transmit it to the Target that code's going to get executed uh and then you'll get your arbitrary",
    "start": "1497679",
    "end": "1504279"
  },
  {
    "start": "1501000",
    "end": "1733000"
  },
  {
    "text": "whatever it is whatever your payload is going to be doing so does anybody have any questions any this stuff yet are we",
    "start": "1504279",
    "end": "1509720"
  },
  {
    "text": "going too slow or too fast I don't it's hard to judge where everybody is on the different scales of this sort of stuff",
    "start": "1509720",
    "end": "1517480"
  },
  {
    "text": "stand the question was what does shic g g it means like it is inevitable there's no stopping it BL",
    "start": "1517480",
    "end": "1525320"
  },
  {
    "text": "so it's like you're screwed in Japanese um so",
    "start": "1525320",
    "end": "1533840"
  },
  {
    "text": "yeah well the thing about that is that um the repeating the question was does it try to sort of do any sort of um a",
    "start": "1539120",
    "end": "1546640"
  },
  {
    "text": "lot of ids's will do disassembly and try to tell if it's valid machine code and stuff like that and do we do anything to try to throw off",
    "start": "1546640",
    "end": "1552399"
  },
  {
    "text": "disassemblers uh any length you know trying to like throw up a disassembler so it gets the wrong length of",
    "start": "1552399",
    "end": "1557640"
  },
  {
    "text": "instruction something like that and uh no what the the entire payload is 27",
    "start": "1557640",
    "end": "1563159"
  },
  {
    "text": "bytes uh four of those are randomly generated xor key and four of those it actually can encode the last four bytes",
    "start": "1563159",
    "end": "1569279"
  },
  {
    "text": "of itself so it's encoded so there's there's 19 bytes that are you know not",
    "start": "1569279",
    "end": "1574679"
  },
  {
    "text": "random out of those 19 bytes uh there's 1.5 million permutations so I was just",
    "start": "1574679",
    "end": "1580039"
  },
  {
    "text": "hoping that even if you had a disassembler only the first 19 bytes are going to disassemble and that's not",
    "start": "1580039",
    "end": "1585200"
  },
  {
    "text": "really enough to say a lot like especially on normal Network traffic I mean there's going to be a lot of 19",
    "start": "1585200",
    "end": "1590640"
  },
  {
    "text": "bytes to disassemble so you know I didn't do anything specific um but I",
    "start": "1590640",
    "end": "1596640"
  },
  {
    "text": "just I have confidence that that sort of stuff won't hold up for for other",
    "start": "1596640",
    "end": "1602600"
  },
  {
    "text": "reasons uh well I mean so the question is what in metlo is identifiable yeah I mean as as as anybody who does IDs stuff",
    "start": "1604799",
    "end": "1611600"
  },
  {
    "text": "will know and should tell you that you should try to Signature uh a vulnerability not signature sort of you",
    "start": "1611600",
    "end": "1617520"
  },
  {
    "text": "know it's going to about a vulnerability it's going to be a losing game to try to Signature the payload I can do a million",
    "start": "1617520",
    "end": "1623399"
  },
  {
    "text": "things to make it look a million different ways and you're not going to be able to Signature it so it's best to try to Signature the vulnerability the",
    "start": "1623399",
    "end": "1629279"
  },
  {
    "text": "ways that it's being triggered right um I mean it' be like it's the problem is if I give you some bites and you tell me",
    "start": "1629279",
    "end": "1634399"
  },
  {
    "text": "if it's a program or not you know what I mean like it could look like a program but it's not you know I mean like a string of A's is completely fine",
    "start": "1634399",
    "end": "1641520"
  },
  {
    "text": "executable code so I mean trying to do these sort of detections um I mean IDs vendors know that this is not the right",
    "start": "1641520",
    "end": "1647159"
  },
  {
    "text": "way to do it sometimes just the you know easiest way but uh it's not the best way",
    "start": "1647159",
    "end": "1652679"
  },
  {
    "text": "so uh I mean there's plenty of things in metlo that are signatur but they're going to be they're going to be exploit",
    "start": "1652679",
    "end": "1658880"
  },
  {
    "text": "specific stuff everything we're talking about here is just sort of General Technologies and out of this I don't really think that there's necessarily that much um I mean these are all sort",
    "start": "1658880",
    "end": "1665559"
  },
  {
    "text": "of Concepts so there's nothing signature so some of our implementations might be but I mean um and that's not that's not",
    "start": "1665559",
    "end": "1672399"
  },
  {
    "text": "our main goal is to try to be IDs evasive necessarily yeah if people are interested in that they can modify it and add it yeah so we try to build a",
    "start": "1672399",
    "end": "1679320"
  },
  {
    "text": "framework that allows you guys to do whatever you want in met display so if if your thing is IDs evasion then you should be able to you know uh add that",
    "start": "1679320",
    "end": "1686679"
  },
  {
    "text": "sort of stuff so all right so uh diving back into this uh what we're going to do now is we're going to break the",
    "start": "1686679",
    "end": "1693600"
  },
  {
    "text": "categorization of payloads down into three subtypes uh the way that we've broken it down is you have what's referred to as a single payload",
    "start": "1693600",
    "end": "1700279"
  },
  {
    "text": "basically what a single payload is is it's a just a self-contained payload basically this is one that's going to is",
    "start": "1700279",
    "end": "1706279"
  },
  {
    "text": "very task oriented it's going to perform specific task whether it be connect back to you and give you a command shell uh",
    "start": "1706279",
    "end": "1711760"
  },
  {
    "text": "upload and execute a file uh it's all going to be one contiguous you know set of bytes that's going to perform this",
    "start": "1711760",
    "end": "1718080"
  },
  {
    "text": "single task or maybe multiple tasks and this is probably what most people people are familiar with you know if you just see like a big shell code blob and like",
    "start": "1718080",
    "end": "1724080"
  },
  {
    "text": "a cxl or something this is going to be a single payload everything's all inclusive you know maybe it gets encoded or something but it's still it's still",
    "start": "1724080",
    "end": "1730399"
  },
  {
    "text": "just one yeah it's definitely the most common uh the next type of uh payload",
    "start": "1730399",
    "end": "1735519"
  },
  {
    "start": "1733000",
    "end": "1779000"
  },
  {
    "text": "that we have is what's referred to as a Stager and this is actually uh two parts so uh basically what a",
    "start": "1735519",
    "end": "1741000"
  },
  {
    "text": "Stager is is instead of trying to do everything in one single blob you know of op codes we split it up so that we",
    "start": "1741000",
    "end": "1748559"
  },
  {
    "text": "have uh what's referred to as a Stager and the Stager is going to be nothing more than a means of loading another",
    "start": "1748559",
    "end": "1754720"
  },
  {
    "text": "chunk of assembly and the way that it loads that other chunk of assembly is arbitrary uh it could load it over a",
    "start": "1754720",
    "end": "1760240"
  },
  {
    "text": "connection it could load it over any sort of means it's not necessarily assembly either like if anybody's seen download and execute Shell Code we just",
    "start": "1760240",
    "end": "1767120"
  },
  {
    "text": "give it a URL and download and execute it that would be an example of a Stager it's sort of you know it's it's it",
    "start": "1767120",
    "end": "1773039"
  },
  {
    "text": "doesn't have the task in it its job is only to go get something else all right right so uh and then the complement to",
    "start": "1773039",
    "end": "1780360"
  },
  {
    "start": "1779000",
    "end": "1953000"
  },
  {
    "text": "that is you have the stage uh and the stage is the thing where in the single payad we're task oriented we have a",
    "start": "1780360",
    "end": "1785600"
  },
  {
    "text": "specific task that we're going to be performing in the stage we do perform that specific task uh so for instance",
    "start": "1785600",
    "end": "1792120"
  },
  {
    "text": "the nice thing about this is the way that it's set up is the Stager if it does establish a connection it's going",
    "start": "1792120",
    "end": "1797320"
  },
  {
    "text": "to pass that connection to the stage so that the stage can reuse it uh use that for socket.io talking back to the uh",
    "start": "1797320",
    "end": "1804440"
  },
  {
    "text": "client uh for whatever it needs to do so if it's redirector uh a command shell back to the client it'll use that",
    "start": "1804440",
    "end": "1810320"
  },
  {
    "text": "already established connection it won't establish a new one on its own so the Stager in order to read this more code that we're talking about this stage it",
    "start": "1810320",
    "end": "1816360"
  },
  {
    "text": "needs to make some sort of communication back to us yeah so that all that's allowing us to do is since this communication is already established we",
    "start": "1816360",
    "end": "1821960"
  },
  {
    "text": "can just reuse it in the stage so it's sort of extracting the two things like we no longer have you know a bind",
    "start": "1821960",
    "end": "1827600"
  },
  {
    "text": "command shell we have a bind Stager and we have a command shell stage and they know nothing about each other this also",
    "start": "1827600",
    "end": "1833360"
  },
  {
    "text": "helps reduce code duplication so if you're writing a payload to do a command shell and you want to be able to get",
    "start": "1833360",
    "end": "1839360"
  },
  {
    "text": "that command shell over a port bind reverse fine sock whatever the case may be you're going to be duplicating that",
    "start": "1839360",
    "end": "1844960"
  },
  {
    "text": "code to create that command shell for each one of those payloads even though your connection medium is different so",
    "start": "1844960",
    "end": "1850000"
  },
  {
    "text": "by separating the two making the connection medium independent of the stage uh you just you know reduce the",
    "start": "1850000",
    "end": "1855880"
  },
  {
    "text": "number of amount of code duplication that you're going to have in the end you just have one command self stage that uses an arbitrary",
    "start": "1855880",
    "end": "1863880"
  },
  {
    "text": "Stager",
    "start": "1886919",
    "end": "1889919"
  },
  {
    "text": "e e",
    "start": "1916840",
    "end": "1920880"
  }
]