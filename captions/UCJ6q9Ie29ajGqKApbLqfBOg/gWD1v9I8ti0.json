[
  {
    "text": "so hello everyone before we start I'm pretty sure most of you at some point in",
    "start": "2600",
    "end": "8880"
  },
  {
    "text": "your life have played game maybe on PC or gaming console or mobile but I wanted",
    "start": "8880",
    "end": "15960"
  },
  {
    "text": "to know if anyone here ever played any competitive games like Valerian Counter-Strike",
    "start": "15960",
    "end": "22260"
  },
  {
    "text": "Fortnight yeah that's good so if you ever encountered a cheetah in these",
    "start": "22260",
    "end": "27599"
  },
  {
    "text": "competitive games you know how painful it is to play against them and so how do",
    "start": "27599",
    "end": "32640"
  },
  {
    "text": "these hackers or cheaters are destroying you and this gaming industry so well in this talk I'll be",
    "start": "32640",
    "end": "39840"
  },
  {
    "text": "sharing my game hacking experience and few techniques that these hackers might be using to out hack you all and it's up",
    "start": "39840",
    "end": "47940"
  },
  {
    "text": "to you what how you want to make use of this knowledge maybe you can make a",
    "start": "47940",
    "end": "54120"
  },
  {
    "text": "private cheat for yourself because you know you just suck at gaming or maybe",
    "start": "54120",
    "end": "59160"
  },
  {
    "text": "you want to earn a lot of money because this game cheating industry is a",
    "start": "59160",
    "end": "65460"
  },
  {
    "text": "multi-million dollar industry and you can sell these sell these cheats and also the skills that you learn in",
    "start": "65460",
    "end": "72479"
  },
  {
    "text": "game hacking can be used in other fields like malware analysis Etc so",
    "start": "72479",
    "end": "78900"
  },
  {
    "text": "and if you're wondering what hardcore cheating looks like and how bad it is this is an example",
    "start": "78900",
    "end": "85920"
  },
  {
    "text": "it's basically a nightmare so these hackers won't even let you spawn and as soon as you spawn uh boom it's a",
    "start": "85920",
    "end": "92759"
  },
  {
    "text": "headshot so on the left we have valent which is very famous for its uh",
    "start": "92759",
    "end": "99380"
  },
  {
    "text": "strongest entity in the market and on the right we have Counter Strike which",
    "start": "99380",
    "end": "104520"
  },
  {
    "text": "is also very popular for uh one of the worst entity at the market so",
    "start": "104520",
    "end": "110280"
  },
  {
    "text": "it doesn't really matter how strong or how poor The Entity it is the hackers",
    "start": "110280",
    "end": "116159"
  },
  {
    "text": "are still gonna hack it so a little intro about myself I'm Rohan my handle is nahurag I do bug bounties I",
    "start": "116159",
    "end": "124680"
  },
  {
    "text": "am founder at defco security and I've participated in live hacking events and uh",
    "start": "124680",
    "end": "130979"
  },
  {
    "text": "I also love playing games of course without cheats so this is what we're going to cover",
    "start": "130979",
    "end": "137160"
  },
  {
    "text": "first we'll look at the history of cheats versus entity antigens then we",
    "start": "137160",
    "end": "143160"
  },
  {
    "text": "are going to see some game hacking Basics I will see kernel cheat then",
    "start": "143160",
    "end": "148440"
  },
  {
    "text": "external hardware cheat and we also see demo of both of them",
    "start": "148440",
    "end": "154379"
  },
  {
    "text": "so the history of game hacking so one of the very first game was made in 1957 and",
    "start": "154379",
    "end": "160980"
  },
  {
    "text": "it was a tennis game but it wasn't available to anyone because it was in a library so at that time it was gaming wasn't",
    "start": "160980",
    "end": "168720"
  },
  {
    "text": "very popular but it became popular in 1970s and 1980s uh when gaming console",
    "start": "168720",
    "end": "175019"
  },
  {
    "text": "and desktops were introduced to General Public and in 1980s modding of games started",
    "start": "175019",
    "end": "182879"
  },
  {
    "text": "happening using command style hex editors and the first import was made in 1995",
    "start": "182879",
    "end": "190800"
  },
  {
    "text": "for a game called Doom 2. but the thing started to heat up when",
    "start": "190800",
    "end": "196739"
  },
  {
    "text": "popular multiplayer games were released in early 2000 and with them cheats were",
    "start": "196739",
    "end": "202140"
  },
  {
    "text": "evolved and causing negative impact on the server so you see when cheating was done on a single player games it was at",
    "start": "202140",
    "end": "209580"
  },
  {
    "text": "best impacting the uh session of the hacker itself not other people but when",
    "start": "209580",
    "end": "215400"
  },
  {
    "text": "these cheats were introduced in multiplayer game at that time they were",
    "start": "215400",
    "end": "220920"
  },
  {
    "text": "directly impacting the experience of everybody else in a negative manner so that's when it became serious and",
    "start": "220920",
    "end": "228120"
  },
  {
    "text": "since the success of these games requires large and active user base that",
    "start": "228120",
    "end": "233459"
  },
  {
    "text": "developers can let go of this so the first entity was born in early",
    "start": "233459",
    "end": "240420"
  },
  {
    "text": "2000 and it was called punk Buster and then in 2002 came all went to cheat but",
    "start": "240420",
    "end": "247080"
  },
  {
    "text": "these both were uh user mode cheats so initially they were very successful in stopping cheats but hacker discovered",
    "start": "247080",
    "end": "254459"
  },
  {
    "text": "that they can load their their cheat in kernel and therefore they were able to",
    "start": "254459",
    "end": "260100"
  },
  {
    "text": "bypass them and here we are today with the one of the popular kernel entities",
    "start": "260100",
    "end": "268220"
  },
  {
    "text": "and these they basically continuously monitor the your activities on the",
    "start": "270780",
    "end": "276180"
  },
  {
    "text": "system and the game and basically try to stop the cheats from kernel itself",
    "start": "276180",
    "end": "283080"
  },
  {
    "text": "so now we can move to the basics so initially when I started learning game hacking I had to decide whether I should",
    "start": "283080",
    "end": "288960"
  },
  {
    "text": "go with internal sheets or external cheats so internal as the name suggests is basically they are injected into the",
    "start": "288960",
    "end": "296340"
  },
  {
    "text": "game process itself so therefore they have good performance and they have huge",
    "start": "296340",
    "end": "302880"
  },
  {
    "text": "flexibility in terms of providing new cheat functionalities but they were",
    "start": "302880",
    "end": "308699"
  },
  {
    "text": "complex to make because you need to be aware of uh the engine or the game",
    "start": "308699",
    "end": "314520"
  },
  {
    "text": "language on which they are made because you are directly injecting the injecting into a game process so you need to be",
    "start": "314520",
    "end": "320220"
  },
  {
    "text": "aware of their languages so also internal cheats in terms of",
    "start": "320220",
    "end": "325500"
  },
  {
    "text": "anti-cheats have very high detection vectors and in an external they have",
    "start": "325500",
    "end": "333000"
  },
  {
    "text": "their own process and they are manipulating the game process externally using some other program",
    "start": "333000",
    "end": "339120"
  },
  {
    "text": "and because they are external their performance and flexibility is much",
    "start": "339120",
    "end": "344280"
  },
  {
    "text": "lower than internal but it's enough for you to make basic hacks like Rolex or",
    "start": "344280",
    "end": "349979"
  },
  {
    "text": "import and therefore they are easy to make because you can they are external you",
    "start": "349979",
    "end": "355440"
  },
  {
    "text": "can make them in any language and in terms of anti-cheat they have",
    "start": "355440",
    "end": "360560"
  },
  {
    "text": "lower detection vectors as compared to internal so what's the general methodology of",
    "start": "360560",
    "end": "367979"
  },
  {
    "text": "bypassing kernel attitude so as you can see in this diagram we have",
    "start": "367979",
    "end": "373020"
  },
  {
    "text": "the cheat in user mode we have the game and in kernel we have entity which is supposed to protect the uh",
    "start": "373020",
    "end": "379620"
  },
  {
    "text": "game memory so we are trying to read write from user mode and as soon as we create a handle",
    "start": "379620",
    "end": "386940"
  },
  {
    "text": "for Reading Writing uh The Entity will detect it and it will block the connection using object register",
    "start": "386940",
    "end": "392699"
  },
  {
    "text": "callback so how do we bypass this so we also need to move to the kernel",
    "start": "392699",
    "end": "399000"
  },
  {
    "text": "level itself so basically we create the driver we load it into the kernel and",
    "start": "399000",
    "end": "404220"
  },
  {
    "text": "send the instructions from user mode whether we want to read or write so this way we are basically able to bypass the",
    "start": "404220",
    "end": "411300"
  },
  {
    "text": "entity but this doesn't mean that it won't be detected so if you don't know what you are doing in the kernel you are",
    "start": "411300",
    "end": "417360"
  },
  {
    "text": "not clearing your traces uh you still you can still get detected",
    "start": "417360",
    "end": "422840"
  },
  {
    "text": "so since we are moving into the kernel there there should be lot of challenges that we are going to facing",
    "start": "422940",
    "end": "428819"
  },
  {
    "text": "though so the first one is how you can create your own driver how you can load your driver whether you",
    "start": "428819",
    "end": "435660"
  },
  {
    "text": "are even able to load your driver itself and how you are able to communicate with",
    "start": "435660",
    "end": "441479"
  },
  {
    "text": "the driver from user mode and also how you can make your driver",
    "start": "441479",
    "end": "446880"
  },
  {
    "text": "undetected so now we can move to the kernel G",
    "start": "446880",
    "end": "452039"
  },
  {
    "text": "development phase so I've divided this whole kernel G development into five steps and if you",
    "start": "452039",
    "end": "458220"
  },
  {
    "text": "are able to crack these uh you should be able to make a kernel drive for any game",
    "start": "458220",
    "end": "463979"
  },
  {
    "text": "so first one is reversing so just like in pen testing we do reconnaissance for",
    "start": "463979",
    "end": "469139"
  },
  {
    "text": "information gathering here we do reversing for finding the offsets of the game and what are these offsets I will tell",
    "start": "469139",
    "end": "475800"
  },
  {
    "text": "you in the coming slides next next is the communication part which is here hooking how you are able",
    "start": "475800",
    "end": "482520"
  },
  {
    "text": "to how you will be communicating with the driver so you should be knowing that next will be the creating the driver",
    "start": "482520",
    "end": "488580"
  },
  {
    "text": "itself based on the communication part which is hooking you will be creating the driver next how you will be loading",
    "start": "488580",
    "end": "495300"
  },
  {
    "text": "the driver and the fifth one is creating the user mode",
    "start": "495300",
    "end": "501319"
  },
  {
    "text": "so the first one reversing so the main point of reverse engineering",
    "start": "501599",
    "end": "507419"
  },
  {
    "text": "is to finding the game offsets so there are two ways to reverse engineer",
    "start": "507419",
    "end": "513599"
  },
  {
    "text": "first one is debugger and second is disassembling so for debugger you can",
    "start": "513599",
    "end": "518820"
  },
  {
    "text": "use cheat engine and for disassembling you can use either so I prefer to use uh",
    "start": "518820",
    "end": "524459"
  },
  {
    "text": "I prefer to go with debugger or using cheat engine because for me it was easy and convenient uh where the",
    "start": "524459",
    "end": "531560"
  },
  {
    "text": "disassembling we have I have to first defuscate the game binary because",
    "start": "531560",
    "end": "536820"
  },
  {
    "text": "usually it's very highly obfuscated so and also to do that and I need to create",
    "start": "536820",
    "end": "543240"
  },
  {
    "text": "a kernel driver for dumping the memory game binary and um",
    "start": "543240",
    "end": "549600"
  },
  {
    "text": "also finding the offsets using disassembler I need to be aware of the",
    "start": "549600",
    "end": "555180"
  },
  {
    "text": "language and the gaming engine on which the game is made whether it's unreal or Unity",
    "start": "555180",
    "end": "561240"
  },
  {
    "text": "so all these restrictions are not present in cheat engine I don't need to defuscate any I don't and the game",
    "start": "561240",
    "end": "567480"
  },
  {
    "text": "engine doesn't play a major role in it so that's why I went with cheat engine",
    "start": "567480",
    "end": "573140"
  },
  {
    "text": "so offsets what are the offsets offset basically as the name so that's suggests",
    "start": "573360",
    "end": "579839"
  },
  {
    "text": "it tells how far something with respect to something so we can see here that uh",
    "start": "579839",
    "end": "585240"
  },
  {
    "text": "A and B B is 12 kilometer away so B offset is 12 kilometer so so why this",
    "start": "585240",
    "end": "592380"
  },
  {
    "text": "offsets are important here so let's say we launched the game and",
    "start": "592380",
    "end": "598140"
  },
  {
    "text": "initially uh it's it gets loaded on this address and we need to reverse the",
    "start": "598140",
    "end": "603480"
  },
  {
    "text": "health inside this so we reverse whatever like a cheat engine also we",
    "start": "603480",
    "end": "609360"
  },
  {
    "text": "find that it's set when uh it said it's at this address so",
    "start": "609360",
    "end": "616760"
  },
  {
    "text": "next time we launch the game again and again if we try to use that address for",
    "start": "616760",
    "end": "622440"
  },
  {
    "text": "Reading Writing that Health we won't be able to do that because every time the",
    "start": "622440",
    "end": "627540"
  },
  {
    "text": "game launches it will be loaded at different address so the variables inside it will also be loaded at",
    "start": "627540",
    "end": "633600"
  },
  {
    "text": "different risks so instead of reverse engineering again and again what we do is we find the offset of that address so",
    "start": "633600",
    "end": "640140"
  },
  {
    "text": "we find the offset of Health uh how far is it away from the game based address",
    "start": "640140",
    "end": "645240"
  },
  {
    "text": "so game based address is very easy to find we can use any Windows API for finding that and if we are able to find",
    "start": "645240",
    "end": "651720"
  },
  {
    "text": "the offset of files we will we can simply find we don't need to reverse engineer again and again so here if you",
    "start": "651720",
    "end": "658740"
  },
  {
    "text": "will notice that on the first launch the health is three bytes and all the second second launch also health is three bytes",
    "start": "658740",
    "end": "665160"
  },
  {
    "text": "away so that's so we can say that the health offset is three bytes away",
    "start": "665160",
    "end": "671519"
  },
  {
    "text": "from the game be setters and if you don't want to reverse",
    "start": "671519",
    "end": "677459"
  },
  {
    "text": "engineer in these offset just like me if you are lazy so you can use these resources so any game that gets launches",
    "start": "677459",
    "end": "684480"
  },
  {
    "text": "even like yesterday in today also you can get this offset so people used to",
    "start": "684480",
    "end": "690360"
  },
  {
    "text": "usually uh do that stuff for you so these are the websites where you can find this offset if you don't want to",
    "start": "690360",
    "end": "696540"
  },
  {
    "text": "reverse engineer so next come the hooking part basically the communication you let's say you made",
    "start": "696540",
    "end": "703620"
  },
  {
    "text": "the driver how are you going to communicate with that so generally when uh when you make your",
    "start": "703620",
    "end": "709560"
  },
  {
    "text": "own driver you can't actually use uh communicate with it so what we are going to do is uh",
    "start": "709560",
    "end": "715800"
  },
  {
    "text": "we're going to do hooking which provides a communication path to it what cooking is is basically uh we hijack a system",
    "start": "715800",
    "end": "723779"
  },
  {
    "text": "call so we can call the system calls and we tell it like hey I want this",
    "start": "723779",
    "end": "730440"
  },
  {
    "text": "instruction to be sent to my driver in the kernel and so system call will say like I don't have any functionality to",
    "start": "730440",
    "end": "736260"
  },
  {
    "text": "do that so we will also provide the functionality basically this op code something like this that move racks and",
    "start": "736260",
    "end": "743100"
  },
  {
    "text": "the address of our cheat driver and we're going to jump to that so basically we are uh this op code we will be",
    "start": "743100",
    "end": "750300"
  },
  {
    "text": "injecting into the system call and since we are able to system able to call the system call uh it will be transferring",
    "start": "750300",
    "end": "756839"
  },
  {
    "text": "to cheat driver so here I have an example of this so let's say uh we have our user mode",
    "start": "756839",
    "end": "765480"
  },
  {
    "text": "and in the kernel we have the driver itself and we are trying to communicate here but we can't actually do that",
    "start": "765480",
    "end": "773100"
  },
  {
    "text": "so first we find uh Windows any Windows driver which you want let's say uh here",
    "start": "773100",
    "end": "779220"
  },
  {
    "text": "example we are using DxD kernel which is a direct test driver next",
    "start": "779220",
    "end": "784800"
  },
  {
    "text": "we're going to find any system call in that which we can use for hijacking",
    "start": "784800",
    "end": "789839"
  },
  {
    "text": "let's say we find this system called nto pump and in that we will be injecting this",
    "start": "789839",
    "end": "795720"
  },
  {
    "text": "opcode so as you can see in the user mode now we are calling the system call and in system call using that opcode we",
    "start": "795720",
    "end": "803880"
  },
  {
    "text": "are transferring it to our driver so this is what basically hooking is",
    "start": "803880",
    "end": "809459"
  },
  {
    "text": "so till now we have seen reverse engineering offsets and we have seen the",
    "start": "809459",
    "end": "814500"
  },
  {
    "text": "combination part so what else our driver need to do",
    "start": "814500",
    "end": "819440"
  },
  {
    "text": "so let me duplicate this",
    "start": "820139",
    "end": "825860"
  },
  {
    "text": "so our our T driver needs to do basically fourth thing first it needs to find the system collectors like in",
    "start": "832920",
    "end": "840000"
  },
  {
    "text": "previous slide I showed you this NT open first you need to find the address where it's located",
    "start": "840000",
    "end": "845880"
  },
  {
    "text": "next it needs to do the hooking part basically placing the shell coat like I",
    "start": "845880",
    "end": "851519"
  },
  {
    "text": "showed you here and this move racks jump racks third it needs to also have a hook",
    "start": "851519",
    "end": "858300"
  },
  {
    "text": "Handler so like basically we are sending uh read instruction right instruction so",
    "start": "858300",
    "end": "863399"
  },
  {
    "text": "it needs to handle those instructions as well and the fourth is clearing the traces",
    "start": "863399",
    "end": "868740"
  },
  {
    "text": "so let me show you uh briefly like how this code looks like",
    "start": "868740",
    "end": "875600"
  },
  {
    "text": "so just like in C plus plus we have void main for the entry where where whenever",
    "start": "879959",
    "end": "886079"
  },
  {
    "text": "we launch the program it goes there so here we have driver entry so it first it",
    "start": "886079",
    "end": "892139"
  },
  {
    "text": "goes there and we uh there is a call Control Function",
    "start": "892139",
    "end": "896720"
  },
  {
    "text": "so here we are finding the address of the system call this is the driver",
    "start": "898500",
    "end": "905880"
  },
  {
    "text": "which is directors this is system call and here we are preparing the instructions for that",
    "start": "905880",
    "end": "911820"
  },
  {
    "text": "for the basically the opportunity and we are injecting that using uh this",
    "start": "911820",
    "end": "919199"
  },
  {
    "text": "function the this function is basically a wrapper of of many other things so I'll be sharing this code to you so you",
    "start": "919199",
    "end": "926339"
  },
  {
    "text": "can like go through it at the end and in some of the function insights are",
    "start": "926339",
    "end": "933600"
  },
  {
    "text": "undocumented so you won't be able to find that on Google but nowadays we have",
    "start": "933600",
    "end": "939600"
  },
  {
    "text": "chat gbt so you can use that as well for understanding this code and this is the hook Handler basically like if you want",
    "start": "939600",
    "end": "946860"
  },
  {
    "text": "to read The Base address of the game or if we are sending the right instruction",
    "start": "946860",
    "end": "951899"
  },
  {
    "text": "so it will do the right part read the part so let me show you in VM how it works in",
    "start": "951899",
    "end": "959699"
  },
  {
    "text": "the back end so this is the driver which I've already made and this",
    "start": "959699",
    "end": "966180"
  },
  {
    "text": "is basically a KD mapper which will be used for loading our driver",
    "start": "966180",
    "end": "974000"
  },
  {
    "text": "so I'll open this Windows debugger",
    "start": "974279",
    "end": "980180"
  },
  {
    "text": "live demos doesn't work",
    "start": "999920",
    "end": "1003940"
  },
  {
    "text": "but I have a video",
    "start": "1006980",
    "end": "1010720"
  },
  {
    "text": "so yeah so this is the driver and this is the KD mapper which will load the driver",
    "start": "1027199",
    "end": "1033280"
  },
  {
    "text": "so first we'll be uh doing the kernel debugging local kernel debugging and we're going to reload the DirectX",
    "start": "1037040",
    "end": "1044780"
  },
  {
    "text": "driver which we are targeting here",
    "start": "1044780",
    "end": "1048520"
  },
  {
    "text": "now we can move to the disassembly path where we will be seeing uh how this op",
    "start": "1068059",
    "end": "1073460"
  },
  {
    "text": "code is is will be injected into the system call so first we'll search and I",
    "start": "1073460",
    "end": "1079280"
  },
  {
    "text": "wanted to notice the first tools instructions here",
    "start": "1079280",
    "end": "1084620"
  },
  {
    "text": "and we will be changing the instruction basically injecting our own move right to jump racks",
    "start": "1084620",
    "end": "1090320"
  },
  {
    "text": "so we uh we load the driver using KDM Apple I'll also have slide for KD mapper",
    "start": "1090320",
    "end": "1095720"
  },
  {
    "text": "to show you how it works",
    "start": "1095720",
    "end": "1098860"
  },
  {
    "text": "and if you just remove a character and enter it for refreshing",
    "start": "1113780",
    "end": "1120039"
  },
  {
    "text": "yeah so we can see our first the op code which we are injecting move racks jump racks is being injected here and this is",
    "start": "1120679",
    "end": "1128240"
  },
  {
    "text": "the address of the driver which are which where it's loaded we can also",
    "start": "1128240",
    "end": "1134059"
  },
  {
    "text": "search this address here to see the assembly code of all driver",
    "start": "1134059",
    "end": "1139460"
  },
  {
    "text": "so this is how hooking works at the back end",
    "start": "1139460",
    "end": "1143740"
  },
  {
    "text": "so this is the most important slide in here so basically uh how you can hide",
    "start": "1151840",
    "end": "1156980"
  },
  {
    "text": "your driver here so first is you need to find your own hook function basically the system call which",
    "start": "1156980",
    "end": "1163280"
  },
  {
    "text": "we are targeting like here we were targeting NT open composition surface so this one is very known is very publicly",
    "start": "1163280",
    "end": "1171679"
  },
  {
    "text": "known to the integer itself so you need to find your own system call maybe you can find it some different system call",
    "start": "1171679",
    "end": "1178400"
  },
  {
    "text": "in directors driver or some other drivers and the second is the Shell Code here like we were using move racket jump",
    "start": "1178400",
    "end": "1184340"
  },
  {
    "text": "racks this is also very widely known by NTT developers so basically you also",
    "start": "1184340",
    "end": "1189500"
  },
  {
    "text": "need to find some new uh shell code that basically does the same thing but so",
    "start": "1189500",
    "end": "1195860"
  },
  {
    "text": "that you can bypass the signature that that are being made by The Entity sheet",
    "start": "1195860",
    "end": "1201620"
  },
  {
    "text": "so the next thing is how you can load your driver so there are three ways the first is test mode in which you go into",
    "start": "1201620",
    "end": "1209660"
  },
  {
    "text": "the test mode of the windows and there you can test your drivers but this doesn't work with the entity because",
    "start": "1209660",
    "end": "1217179"
  },
  {
    "text": "they check whether your windows is in test mode and if it is they won't let",
    "start": "1217179",
    "end": "1222260"
  },
  {
    "text": "you launch the game so the second way is to find is to get",
    "start": "1222260",
    "end": "1228140"
  },
  {
    "text": "your driver officially signed by Microsoft by paying them but this also is a very not good like if",
    "start": "1228140",
    "end": "1237559"
  },
  {
    "text": "your driver gets detected uh they will revoke your driver and your money will be wasted",
    "start": "1237559",
    "end": "1243260"
  },
  {
    "text": "so what hackers are doing is they are basically exploiting officially signed",
    "start": "1243260",
    "end": "1248419"
  },
  {
    "text": "drivers finding vulnerabilities in them and using those to load our driver so",
    "start": "1248419",
    "end": "1254720"
  },
  {
    "text": "like I showed you KD mapper in that video uh basically KD mapper what does is there is a vulnerability in an Intel",
    "start": "1254720",
    "end": "1261260"
  },
  {
    "text": "driver which is this one and it basically helps you to manually map your own unofficial sand driver into the",
    "start": "1261260",
    "end": "1268520"
  },
  {
    "text": "kernel memory and it and this KD mapper also take care of clearing traces of your driver like",
    "start": "1268520",
    "end": "1275960"
  },
  {
    "text": "these mm and low driver table and pit B cache table it it also clear those as",
    "start": "1275960",
    "end": "1282080"
  },
  {
    "text": "well and also if you want to use some other",
    "start": "1282080",
    "end": "1287120"
  },
  {
    "text": "drivers other other like other vulnerable drivers you can find those",
    "start": "1287120",
    "end": "1292520"
  },
  {
    "text": "here as well so the last part is user mode which is",
    "start": "1292520",
    "end": "1298700"
  },
  {
    "text": "basically very easy all you need to do here is calling the hook function and and then you need to prepare these",
    "start": "1298700",
    "end": "1305299"
  },
  {
    "text": "instruction like whatever you want to read or write and handle the cheat logic part whatever like Aimbot or ESP you are",
    "start": "1305299",
    "end": "1312320"
  },
  {
    "text": "making you need to handle that as well uh so I have a demo which I made for",
    "start": "1312320",
    "end": "1318200"
  },
  {
    "text": "Apex Legends uh this is basically a wall hack",
    "start": "1318200",
    "end": "1323960"
  },
  {
    "text": "so like I find the offset of uh how you can enable glow on the enemy so in in",
    "start": "1323960",
    "end": "1330799"
  },
  {
    "text": "this game there is a uh character like Bloodhound which has the",
    "start": "1330799",
    "end": "1336020"
  },
  {
    "text": "ability to reveal enemies for certain second so using that you find the game offset of that and you just uh using",
    "start": "1336020",
    "end": "1343760"
  },
  {
    "text": "your driver you enable that part So currently I have already loaded the",
    "start": "1343760",
    "end": "1348860"
  },
  {
    "text": "driver I'll just simply run my user mode",
    "start": "1348860",
    "end": "1352840"
  },
  {
    "text": "and those red ones are the enemies",
    "start": "1356480",
    "end": "1362320"
  },
  {
    "text": "so now we can move to the external hardware cheat",
    "start": "1382100",
    "end": "1386980"
  },
  {
    "text": "so uh in this we will be using pixelbot so like whatever I showed you earlier uh",
    "start": "1387220",
    "end": "1395059"
  },
  {
    "text": "there was a uh like those kernel sheets weren't working for uh the valrent game itself",
    "start": "1395059",
    "end": "1402500"
  },
  {
    "text": "because in valorent uh the ntg loads whenever your system boot so I wasn't",
    "start": "1402500",
    "end": "1407539"
  },
  {
    "text": "able to find a way to bypass that so I found some other means of chill hacking",
    "start": "1407539",
    "end": "1412580"
  },
  {
    "text": "in well run so one of the ways is using pixel bot which are basically color based Imports",
    "start": "1412580",
    "end": "1419000"
  },
  {
    "text": "so in these games there is a functionality using which you can enable",
    "start": "1419000",
    "end": "1424340"
  },
  {
    "text": "uh enemy outlines so like we have a screenshot so we can see like there is",
    "start": "1424340",
    "end": "1430880"
  },
  {
    "text": "red yellow and purple and we can use this functionality to create a program",
    "start": "1430880",
    "end": "1435919"
  },
  {
    "text": "that will find enemy on the screen and it will automatically aim at that pair",
    "start": "1435919",
    "end": "1443480"
  },
  {
    "text": "so how do these work is basically there are three things here it first find a find the it first capture the screen you",
    "start": "1443480",
    "end": "1450919"
  },
  {
    "text": "can use like python libraries or you can use OBS as well then it finds the enemy",
    "start": "1450919",
    "end": "1457640"
  },
  {
    "text": "basically using a color filtering and then it needs to move the mouse to that enemy",
    "start": "1457640",
    "end": "1464659"
  },
  {
    "text": "so like here we are seeing uh the well-rent is projecting on a monitor",
    "start": "1464659",
    "end": "1470240"
  },
  {
    "text": "and pixelbot is basically reading uh from the monitor so the benefit here is",
    "start": "1470240",
    "end": "1475760"
  },
  {
    "text": "that we aren't we aren't interacting with the game memory we are we aren't touching the game memory itself",
    "start": "1475760",
    "end": "1483020"
  },
  {
    "text": "so that's why uh these pixel boards are very uh hard to detect via the entity",
    "start": "1483020",
    "end": "1488659"
  },
  {
    "text": "sheet and they are easy to make and almost works on any game that have this functionality of enemy highlighting and",
    "start": "1488659",
    "end": "1495700"
  },
  {
    "text": "it depends on the code of the logic of your input uh the the better the Aimbot",
    "start": "1495700",
    "end": "1501260"
  },
  {
    "text": "logic is the better will be the enemy finding part",
    "start": "1501260",
    "end": "1507440"
  },
  {
    "text": "so the tools which will be required are Arduino Leonardo and USB host shield and",
    "start": "1507440",
    "end": "1513020"
  },
  {
    "text": "you need to solder these like green ones for getting",
    "start": "1513020",
    "end": "1519080"
  },
  {
    "text": "the power to your mouse and you might be wondering why we are needing these external tools like if I",
    "start": "1519080",
    "end": "1526220"
  },
  {
    "text": "go to previous slide for capturing pixels we can do that from any library",
    "start": "1526220",
    "end": "1532039"
  },
  {
    "text": "or OBS for enemy finding that's again a simple logic but for Mouse movement this",
    "start": "1532039",
    "end": "1537679"
  },
  {
    "text": "is uh what is concerning for anti-cheat like how why you are moving a mouse",
    "start": "1537679",
    "end": "1542900"
  },
  {
    "text": "virtually for if so if you are making the code for moving mouse in the same system on which",
    "start": "1542900",
    "end": "1549080"
  },
  {
    "text": "a valent is running it's it's gonna be able to detect it so that's why we will be using any external device for",
    "start": "1549080",
    "end": "1555559"
  },
  {
    "text": "simulating the mouse movements so initially people were used to do uh",
    "start": "1555559",
    "end": "1562279"
  },
  {
    "text": "Mouse movement using uh some libraries and later they started",
    "start": "1562279",
    "end": "1568460"
  },
  {
    "text": "using external device so I'll show you like initially what used to work and how we are and and what's work currently",
    "start": "1568460",
    "end": "1575179"
  },
  {
    "text": "working so like I have here made a pixel about genuine Mouse movement financially people used to use these",
    "start": "1575179",
    "end": "1582320"
  },
  {
    "text": "like libraries here we have for moving a mouse like python libraries or C plus libraries and some of these uh still",
    "start": "1582320",
    "end": "1589940"
  },
  {
    "text": "work for some other games like OverWatch but for Valentine these they both are",
    "start": "1589940",
    "end": "1595100"
  },
  {
    "text": "not working next people started using external drivers so like here internal",
    "start": "1595100",
    "end": "1602000"
  },
  {
    "text": "interception driver the very first one this one became very popular so people were using that for simulating",
    "start": "1602000",
    "end": "1608840"
  },
  {
    "text": "Mouse movement people were also using Razer Logitech drivers for using Mouse",
    "start": "1608840",
    "end": "1614900"
  },
  {
    "text": "movement and also this Chinese driver which also got famous for externally moving but later valran came to know",
    "start": "1614900",
    "end": "1622100"
  },
  {
    "text": "about these and they simply blocked it so the Gen 3 is where a good thing",
    "start": "1622100",
    "end": "1627799"
  },
  {
    "text": "started happening like uh we found out that Arduino also has Mouse movement libraries so the good thing here is the",
    "start": "1627799",
    "end": "1636440"
  },
  {
    "text": "mouse movement Mouse movement part is coming externally from some other device instead of internal so the valent itself",
    "start": "1636440",
    "end": "1644840"
  },
  {
    "text": "doesn't know whether these Mouse movement are actually coming from uh real mouse or is it a simulated Mouse",
    "start": "1644840",
    "end": "1651740"
  },
  {
    "text": "movement so these were used to work for a long time but uh one of the ways which",
    "start": "1651740",
    "end": "1658279"
  },
  {
    "text": "Valentine found out about these is we can see here we are using Tomb of the original one and the second mouse",
    "start": "1658279",
    "end": "1664880"
  },
  {
    "text": "so the Valerian can question like why why are there two most connected to the system so they basically block the",
    "start": "1664880",
    "end": "1671240"
  },
  {
    "text": "second mouse so this also doesn't work anymore and this is this is like show you if you",
    "start": "1671240",
    "end": "1677240"
  },
  {
    "text": "are using a second mouse so using this they can detect your second mouse so initially they were",
    "start": "1677240",
    "end": "1684620"
  },
  {
    "text": "basically they block the mouse but on a physical level like on higher level but the",
    "start": "1684620",
    "end": "1691039"
  },
  {
    "text": "forward to block it on lower level like virtualize or something so people started using hyper-v which is a Windows",
    "start": "1691039",
    "end": "1697480"
  },
  {
    "text": "Virtual Technology to simulate a second mouse but they also got patched I think",
    "start": "1697480",
    "end": "1703580"
  },
  {
    "text": "in August 22 the this combination of Arduino and hypervisor got passed",
    "start": "1703580",
    "end": "1709400"
  },
  {
    "text": "so this is where currently we are now this is this thing is currently working for valorent uh basically what we are",
    "start": "1709400",
    "end": "1716059"
  },
  {
    "text": "doing is we have Arduino we have a USB of Shield uh we connect our real Mouse",
    "start": "1716059",
    "end": "1721100"
  },
  {
    "text": "to the USB host Shield which is connected to Arduino and Arduino is connected to PC so this whole setup is",
    "start": "1721100",
    "end": "1727700"
  },
  {
    "text": "like a single Mouse and using this setup we can simulate a mouse movement and",
    "start": "1727700",
    "end": "1734000"
  },
  {
    "text": "also control our air mouse so in the coming slide I'll show you how and this is how it looks like if you are",
    "start": "1734000",
    "end": "1740900"
  },
  {
    "text": "able to spoof the Arduino and Nano it will look like a only single Mouse is connected",
    "start": "1740900",
    "end": "1747340"
  },
  {
    "text": "so here we have to think the pixelbot code and the Arduino code so the pixelbot code needs to do basically four",
    "start": "1747500",
    "end": "1754460"
  },
  {
    "text": "things first you capture the pixel on the screen then it do the color filtering then it calculate coordinates",
    "start": "1754460",
    "end": "1761059"
  },
  {
    "text": "like where is the enemy and then it sends the coordinates to the Arduino so let me show you this uh pixel bot code",
    "start": "1761059",
    "end": "1770419"
  },
  {
    "text": "although this is a very simple python code so like we have the libraries and",
    "start": "1770419",
    "end": "1776600"
  },
  {
    "text": "when we are we are using uh serial communication method for sending the",
    "start": "1776600",
    "end": "1781700"
  },
  {
    "text": "coordinates to the Arduino and we are initializing some variables",
    "start": "1781700",
    "end": "1787039"
  },
  {
    "text": "and these are the HSV the color value the color filtering values for purple color of enemy",
    "start": "1787039",
    "end": "1794299"
  },
  {
    "text": "so as soon as we click the left Mouse it will capture the screen and find the",
    "start": "1794299",
    "end": "1800240"
  },
  {
    "text": "enemy this is the Aimbot very simple logic and it will send the S X or Y",
    "start": "1800240",
    "end": "1806840"
  },
  {
    "text": "coordinates to this function and we we need to convert this X and Y to an",
    "start": "1806840",
    "end": "1813080"
  },
  {
    "text": "unsite integer because we can't send signed integers or like negative value through Arduino through this com Port so",
    "start": "1813080",
    "end": "1820340"
  },
  {
    "text": "we need to convert this to unsigned and then we will send this to our Arduino we",
    "start": "1820340",
    "end": "1825860"
  },
  {
    "text": "will be doing the mouse movement part so one of the challenges in this is uh",
    "start": "1825860",
    "end": "1834140"
  },
  {
    "text": "finding the correct HSV value like here we have screenshot and we can see the",
    "start": "1834140",
    "end": "1839539"
  },
  {
    "text": "purple color in background so imagine if there is enemy also and it has a purple outline so we shouldn't be like aiming",
    "start": "1839539",
    "end": "1847399"
  },
  {
    "text": "on these trees instead of uh the enemy itself so for that you need to filter",
    "start": "1847399",
    "end": "1854260"
  },
  {
    "text": "like the very best range for your respective color so you can use opencv",
    "start": "1854260",
    "end": "1860659"
  },
  {
    "text": "in python or something like we have here behind Astra wall which is purple and in front we have",
    "start": "1860659",
    "end": "1866960"
  },
  {
    "text": "uh enemies and both of our purple but if we have find a good HSV range we can",
    "start": "1866960",
    "end": "1873320"
  },
  {
    "text": "like see in below screenshot we are able to filter out the enemies and this is a very basic code of opencv",
    "start": "1873320",
    "end": "1880279"
  },
  {
    "text": "which you can use for finding uh the perfect HSV range",
    "start": "1880279",
    "end": "1886399"
  },
  {
    "text": "so the Arduino code needs to do three things at first take the coordinates from our python code it",
    "start": "1886399",
    "end": "1894080"
  },
  {
    "text": "simulates the mouse movement and it also needs to simulate Mouse movement of a real Mouse",
    "start": "1894080",
    "end": "1899779"
  },
  {
    "text": "so let me show you its code",
    "start": "1899779",
    "end": "1903399"
  },
  {
    "text": "we have a libraries and these are some of the global variable which are which will be used for simulating the real",
    "start": "1906140",
    "end": "1913220"
  },
  {
    "text": "Mouse we have a mouse parser class which is basically passing the inputs from a",
    "start": "1913220",
    "end": "1919700"
  },
  {
    "text": "real Mouse itself and this is a set of function which is a",
    "start": "1919700",
    "end": "1926120"
  },
  {
    "text": "mandatory and it only runs one time here we are initializing some of the objects",
    "start": "1926120",
    "end": "1932480"
  },
  {
    "text": "and this Loop function is also mandatory and it continuously Loops whenever you",
    "start": "1932480",
    "end": "1938059"
  },
  {
    "text": "connect to Arduino so this logic is for simulating a real Mouse",
    "start": "1938059",
    "end": "1943760"
  },
  {
    "text": "and this is the logic for uh simulating the coordinates which are coming from",
    "start": "1943760",
    "end": "1949840"
  },
  {
    "text": "the python code so whenever there is any available in any available data in the",
    "start": "1949840",
    "end": "1956299"
  },
  {
    "text": "serial Port it will read it X and Y and it will again convert it to send integer",
    "start": "1956299",
    "end": "1961760"
  },
  {
    "text": "because we are sending unsigned on the communication part and then it will",
    "start": "1961760",
    "end": "1967220"
  },
  {
    "text": "simply move the mouse so as I showed you in this we were using",
    "start": "1967220",
    "end": "1976159"
  },
  {
    "text": "serial communication part for communicating to the Arduino but we can",
    "start": "1976159",
    "end": "1981740"
  },
  {
    "text": "also we can also use some other method like web server or wireless transmitter so why why am i showing you this is",
    "start": "1981740",
    "end": "1989899"
  },
  {
    "text": "because uh Vanguard which is the entity for valent is actually monitoring the",
    "start": "1989899",
    "end": "1996100"
  },
  {
    "text": "serial com Port so that doesn't mean that you can't use this you can still",
    "start": "1996100",
    "end": "2001419"
  },
  {
    "text": "use it you can use it basically you need to make the data which you are sending",
    "start": "2001419",
    "end": "2007720"
  },
  {
    "text": "to be unique so that they can't make a signature for it so like you can X like",
    "start": "2007720",
    "end": "2014260"
  },
  {
    "text": "the X and Y you can put some garbage value in a prefix part in the postfix",
    "start": "2014260",
    "end": "2019960"
  },
  {
    "text": "pass also you can do what you can do is spoof",
    "start": "2019960",
    "end": "2025600"
  },
  {
    "text": "your Arduino so this is a very uh basic spoofing method which you can use",
    "start": "2025600",
    "end": "2031419"
  },
  {
    "text": "so this is a file like uh this Arduino boards file you can open it and change",
    "start": "2031419",
    "end": "2038320"
  },
  {
    "text": "the Leonardo name to whatever your mouse is and you need to also change the vid and vendor ID product ID which which you",
    "start": "2038320",
    "end": "2046059"
  },
  {
    "text": "can get from this URL and so this way you can this a basic",
    "start": "2046059",
    "end": "2053320"
  },
  {
    "text": "simple spoof method you can use if you don't use it and whenever you",
    "start": "2053320",
    "end": "2059080"
  },
  {
    "text": "connect to Arduino it will show on your system that Arduino lunardo is connected and I won't say whether this basic thing",
    "start": "2059080",
    "end": "2065618"
  },
  {
    "text": "is sufficient for Val rent you need to experiment on your own",
    "start": "2065619",
    "end": "2071618"
  },
  {
    "text": "so I have uh two videos for valorent which shows the",
    "start": "2071619",
    "end": "2078780"
  },
  {
    "text": "so this is directly recording the uh valorant and",
    "start": "2083560",
    "end": "2090220"
  },
  {
    "text": "we are basically simply clicking and it is automatically aiming at the enemy",
    "start": "2090220",
    "end": "2095320"
  },
  {
    "text": "header",
    "start": "2095320",
    "end": "2097679"
  },
  {
    "text": "foreign",
    "start": "2116560",
    "end": "2119400"
  },
  {
    "text": "so we I'm just simply holding the mouse I'll simply click it and the mouse is connected uh to the USB host Shield",
    "start": "2127300",
    "end": "2134320"
  },
  {
    "text": "which is connected to the Arduino and Arduino is connected to the PC and I'll simply click my mouse and it will",
    "start": "2134320",
    "end": "2141400"
  },
  {
    "text": "automatically like move it to the enemy head",
    "start": "2141400",
    "end": "2145800"
  },
  {
    "text": "now it actually moved out of the field of view so I'm adjusting my mouse",
    "start": "2146619",
    "end": "2152160"
  },
  {
    "text": "right so uh so what well run can do in this case",
    "start": "2161260",
    "end": "2168099"
  },
  {
    "text": "is uh recently uh they made a patch where they introduced functionality to",
    "start": "2168099",
    "end": "2174400"
  },
  {
    "text": "hide the enemy outlines itself so I'm suspecting that in future they will",
    "start": "2174400",
    "end": "2180640"
  },
  {
    "text": "completely remove the enemy outlines because that's one of the ways in which they can counter it because if there is",
    "start": "2180640",
    "end": "2188680"
  },
  {
    "text": "no way of finding various enemies there's no way of moving the mouse to them",
    "start": "2188680",
    "end": "2194500"
  },
  {
    "text": "but there is actually a project which is which you can find or unknown sheets which is using artificial intelligence",
    "start": "2194500",
    "end": "2202660"
  },
  {
    "text": "to find the enemy on the screen like if you have enough data sets for it you can",
    "start": "2202660",
    "end": "2208660"
  },
  {
    "text": "use this for uh simulating Moss movement and finding the enemy uh",
    "start": "2208660",
    "end": "2215380"
  },
  {
    "text": "and this is where I'll be releasing the kernel driver and the Arduino code itself",
    "start": "2215380",
    "end": "2222339"
  },
  {
    "text": "and these are the references which helped in making of this presentation",
    "start": "2222339",
    "end": "2227619"
  },
  {
    "text": "and the conclusion part and we're done",
    "start": "2227619",
    "end": "2233140"
  },
  {
    "text": "[Applause]",
    "start": "2233140",
    "end": "2239020"
  },
  {
    "text": "so if you have any questions",
    "start": "2239020",
    "end": "2242400"
  },
  {
    "text": "sorry I can't hear you Mobile gaming",
    "start": "2248160",
    "end": "2254380"
  },
  {
    "text": "I haven't tested it I don't have any experience in Mobile gaming",
    "start": "2254380",
    "end": "2261540"
  },
  {
    "text": "uh he was asking whether we can do this all this in Mobile gamings",
    "start": "2262540",
    "end": "2268260"
  },
  {
    "text": "okay thank you guys foreign",
    "start": "2272859",
    "end": "2278440"
  }
]