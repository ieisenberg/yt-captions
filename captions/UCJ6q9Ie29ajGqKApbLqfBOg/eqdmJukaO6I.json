[
  {
    "text": "this is uh bio Security in track six uh with John Butterworth Corey hallenberg",
    "start": "120",
    "end": "6000"
  },
  {
    "text": "and Zeno kovak there uh this is a real real full",
    "start": "6000",
    "end": "12280"
  },
  {
    "text": "talk so there won't be too much Q&A there will be a little bit in the hallway",
    "start": "12280",
    "end": "17360"
  },
  {
    "text": "afterwards all right hello I'm Zeno kova I'll let my colleagues introduce themselves once they start talking so uh",
    "start": "18199",
    "end": "24599"
  },
  {
    "text": "we're going to be talking about biocurity and in particular a uh defensive system that we developed that we call bio chronomancy uh we're trusted",
    "start": "24599",
    "end": "32000"
  },
  {
    "text": "Computing researchers at the miter Corporation and miter is a not for-profit company that runs six",
    "start": "32000",
    "end": "37960"
  },
  {
    "text": "federally funded research and development centers for the US government and um a little more about",
    "start": "37960",
    "end": "43640"
  },
  {
    "text": "miter is we've been around for quite a while since the 50s when we spun off from uh MIT Lincoln labs and at the time",
    "start": "43640",
    "end": "50719"
  },
  {
    "text": "you know we we aren't military we aren't government we aren't educational we're not an ISP so actually the.org was made",
    "start": "50719",
    "end": "56840"
  },
  {
    "text": "specifically to uh accommodate our sort of miscellaneous on the arpanet and uh if you know of miter the",
    "start": "56840",
    "end": "64400"
  },
  {
    "text": "primary place you'd know of it is from cve so we manage cve as well as a number",
    "start": "64400",
    "end": "69640"
  },
  {
    "text": "of other U standards and kek people asked me to to promote that so kek is",
    "start": "69640",
    "end": "76040"
  },
  {
    "text": "common attack pattern enumer enumeration and characterization and it's basically",
    "start": "76040",
    "end": "81479"
  },
  {
    "text": "a standard way to identify the way that people actually do attacks so you should check that out so um first of all why do",
    "start": "81479",
    "end": "89600"
  },
  {
    "text": "we think people should care about biocurity in general well uh it's the first code that runs on a PC and",
    "start": "89600",
    "end": "95200"
  },
  {
    "text": "therefore it's it has to be the most trusted code because if an attacker gets in and has code execution from the very",
    "start": "95200",
    "end": "101200"
  },
  {
    "text": "beginning then they can compromise any uh any code that runs thereafter so U",
    "start": "101200",
    "end": "106920"
  },
  {
    "text": "just as we see with bootkits they run before an operating system and they compromise an operating system if you run in the Bios you can compromise",
    "start": "106920",
    "end": "113119"
  },
  {
    "text": "everything that comes afterwards uh additionally there's you know bios is kind of out of sight out of",
    "start": "113119",
    "end": "119360"
  },
  {
    "text": "mind right now now and so no one is pervasively checking their bios and integrity checking whether anyone's",
    "start": "119360",
    "end": "125719"
  },
  {
    "text": "actually infected it um and if someone were to infect your bios they can sit",
    "start": "125719",
    "end": "130920"
  },
  {
    "text": "there for a long time and we're not so much concerned about them you know just going lower and then beaconing out with",
    "start": "130920",
    "end": "137040"
  },
  {
    "text": "normal command and control like you see with normal OS level M we're more concerned about the fact that they could",
    "start": "137040",
    "end": "142280"
  },
  {
    "text": "get into the BIOS sit there listen and for instance wait for a kill command and",
    "start": "142280",
    "end": "148319"
  },
  {
    "text": "wipe the BIOS and subs that's the kind of attack where you can't remediate that without sending Hardware back to the",
    "start": "148319",
    "end": "154560"
  },
  {
    "text": "manufacturers to reflash the the Spy flash so uh also you know why should we",
    "start": "154560",
    "end": "160040"
  },
  {
    "text": "care about biocurity it's just cool because it's you know not welln and uh it's very powerful and and we think more",
    "start": "160040",
    "end": "166680"
  },
  {
    "text": "people should know about it so we specifically got interested in biocurity partially because of you know the talks",
    "start": "166680",
    "end": "172680"
  },
  {
    "text": "Circa 2008 2009 at black hat and we sort of worked our way towards this um we were working on other kernel stuff at",
    "start": "172680",
    "end": "179080"
  },
  {
    "text": "the time but as trust Computing researchers we wanted to understand exactly how the how the technology",
    "start": "179080",
    "end": "184720"
  },
  {
    "text": "worked down at the BIOS level so in the trust Computing specifications they say things like you know we've got this",
    "start": "184720",
    "end": "190000"
  },
  {
    "text": "immutable root of trust down at the lowest level and that starts off all the measurements and then each phase",
    "start": "190000",
    "end": "196159"
  },
  {
    "text": "measures and goes to the next phase but we wanted to know how does that actually work and so we dug into that and",
    "start": "196159",
    "end": "201480"
  },
  {
    "text": "obviously we wanted to know if an attacker could subvert this and uh it turns out that that's true so subsequently we utilized some of our",
    "start": "201480",
    "end": "208120"
  },
  {
    "text": "existing work that's adapted from academic work and we think that this builds basically a better measurement",
    "start": "208120",
    "end": "213920"
  },
  {
    "text": "system down at the BIOS level and that's the BIOS chronomancy stuff that we'll talk about at at the end so basically",
    "start": "213920",
    "end": "219959"
  },
  {
    "text": "the the high level overview is we're going to say you know the attacker can get into the BIOS you know how could",
    "start": "219959",
    "end": "225040"
  },
  {
    "text": "they get in could either be through misconfiguration or through exploits um you know how does this trusted Computing",
    "start": "225040",
    "end": "231159"
  },
  {
    "text": "technology actually work down at the BIOS level how can attack or attack it how can they subvert it how can they make you think that everything's still",
    "start": "231159",
    "end": "237079"
  },
  {
    "text": "working exactly the way it should when it's not actually and then we talk about our defensive system but so before we",
    "start": "237079",
    "end": "242640"
  },
  {
    "text": "get into that uh I wanted to introduce uh Rick Martinez uh from Dell and so we",
    "start": "242640",
    "end": "248120"
  },
  {
    "text": "wanted to have him come up and talk a little bit about um what Dell has been doing for biocurity because our work is",
    "start": "248120",
    "end": "254159"
  },
  {
    "text": "specifically looking at uh Dell Latitude e6400 and so um a couple years ago I saw",
    "start": "254159",
    "end": "260440"
  },
  {
    "text": "Dylan Bradford's talk about ska security and uh you know he found attacks in Seaman skada systems but he he allowed",
    "start": "260440",
    "end": "268000"
  },
  {
    "text": "these Seaman people to come out provide eles as a point of contact so that other researchers who are working in the area",
    "start": "268000",
    "end": "273160"
  },
  {
    "text": "can know exactly who they need to go to if they want to talk about problems so Rick's been great to work with and so we",
    "start": "273160",
    "end": "279080"
  },
  {
    "text": "wanted to let him say a few words thanks good afternoon um I'm Rick",
    "start": "279080",
    "end": "284759"
  },
  {
    "text": "Martinez as Eno had mentioned um I'm the biocurity architect for the enduser",
    "start": "284759",
    "end": "289960"
  },
  {
    "text": "Computing solutions group at Dell um I've been in BIOS been doing bias for",
    "start": "289960",
    "end": "295160"
  },
  {
    "text": "over 13 years now and uh I've done a lot of lead secur",
    "start": "295160",
    "end": "300199"
  },
  {
    "text": "work for the BIOS and I've recently past few years transitioned more into an architecture role where I'm handling the",
    "start": "300199",
    "end": "305919"
  },
  {
    "text": "architecture and strategy uh for security Technologies um that that uh impact the BIOS um I want to thank Zeno",
    "start": "305919",
    "end": "314320"
  },
  {
    "text": "John and Corey uh for uh letting me assist in their research um and letting me say a few words today uh they've been",
    "start": "314320",
    "end": "320560"
  },
  {
    "text": "they've been great to work with and I look forward to to working with them again um so I've got my contact",
    "start": "320560",
    "end": "327479"
  },
  {
    "text": "information on the slides um why what would possess me to put my contact information in front of a black hatat",
    "start": "327479",
    "end": "333360"
  },
  {
    "text": "audience um it's because I'm interested and I'm serious about biocurity and I'm I'm serious about U improving that",
    "start": "333360",
    "end": "340560"
  },
  {
    "text": "security uh Dell's interested in security um you've seen it through from our Acquisitions uh in the marketplace",
    "start": "340560",
    "end": "347240"
  },
  {
    "text": "um we take a layered approach to security from the infrastructure um to the endpoint to the OS but you can't",
    "start": "347240",
    "end": "353280"
  },
  {
    "text": "have a layered uh a a layered take on security without a very strong Foundation",
    "start": "353280",
    "end": "360560"
  },
  {
    "text": "and that's the bias uh so I'm interested in and very serious about um improving",
    "start": "360560",
    "end": "366199"
  },
  {
    "text": "um the security of our bias Foundation um for the rest of our um security",
    "start": "366199",
    "end": "371380"
  },
  {
    "text": "[Music]",
    "start": "371380",
    "end": "374569"
  },
  {
    "text": "[Music] stack so um again sorry my my contact",
    "start": "380110",
    "end": "388960"
  },
  {
    "text": "information is on there um if you're doing any kind of bias research um or anything with Dell Platforms in general",
    "start": "388960",
    "end": "395120"
  },
  {
    "text": "um please feel free to reach out to me um let's work together uh to kind of Harden um that security um we've also",
    "start": "395120",
    "end": "401960"
  },
  {
    "text": "got a um an actually an external incident Response Team um and process",
    "start": "401960",
    "end": "407599"
  },
  {
    "text": "that we're getting ready to roll out and we'll have a public email address that you can they can use as well if you don't want to contact me",
    "start": "407599",
    "end": "414840"
  },
  {
    "text": "directly um so uh with that let's um you know enough about me let's talk about the the platform that that we're going",
    "start": "414840",
    "end": "420879"
  },
  {
    "text": "to be discussing today um so the D latitude e6400 is one",
    "start": "420879",
    "end": "426520"
  },
  {
    "text": "of our uh older commercial uh platforms um a notebook system um it was launched",
    "start": "426520",
    "end": "432080"
  },
  {
    "text": "in August of 2008 about 5 years ago now and uh it was built upon the Legacy BIOS",
    "start": "432080",
    "end": "439080"
  },
  {
    "text": "um and if you're not familiar with Legacy BIOS it's a precursor to the modern ufi bias that you may be familiar",
    "start": "439080",
    "end": "445639"
  },
  {
    "text": "with it was written entirely in x86 Assembly Language and uh the uh TPM or",
    "start": "445639",
    "end": "451240"
  },
  {
    "text": "TCG implementation that's on that bias uh was implemented specifically for bit",
    "start": "451240",
    "end": "456440"
  },
  {
    "text": "locker and for bit Locker um compliance so um it was a little bit of a different security landscape back then and um uh",
    "start": "456440",
    "end": "464520"
  },
  {
    "text": "it was actually the last generation of Legacy bias um on our latitude systems um I don't want to steal the",
    "start": "464520",
    "end": "471000"
  },
  {
    "text": "researchers uh Thunder too much but we do have a new bias available as of the 16th of July it's revision 834 for the",
    "start": "471000",
    "end": "480560"
  },
  {
    "text": "e6400 um so after you hear their great presentation um please be sure if you",
    "start": "480560",
    "end": "486120"
  },
  {
    "text": "have an e6400 to go download that and and update your bias um just real quick I want to end",
    "start": "486120",
    "end": "492080"
  },
  {
    "text": "with this and like I said uh the e6400 was uh was built on on the Legacy",
    "start": "492080",
    "end": "499120"
  },
  {
    "text": "bi framework um specifically V for Vista bit locker since then a lot of great um",
    "start": "499120",
    "end": "504919"
  },
  {
    "text": "technologies have come across for bias um and we're um we've implemented them um starting with the ufi transition um",
    "start": "504919",
    "end": "512080"
  },
  {
    "text": "the uh nist 80047 U bias protections that have been implemented and most",
    "start": "512080",
    "end": "517479"
  },
  {
    "text": "recently secure boot you might have heard of some of those during Yuri's presentation earlier this morning um so",
    "start": "517479",
    "end": "523599"
  },
  {
    "text": "that's all I have um thank you for letting me speak thank you Rick yep so",
    "start": "523599",
    "end": "529440"
  },
  {
    "text": "um you know we did this work on the e6400 basically because it was a target of opportunity we had debugging Hardware",
    "start": "529440",
    "end": "535160"
  },
  {
    "text": "which would fit this and we happen to be using e6400 internally at miter so part of the point here is you know it Legacy",
    "start": "535160",
    "end": "542600"
  },
  {
    "text": "systems tend to stick around for a while so uh the types of problems that we find here are you know potentially found on",
    "start": "542600",
    "end": "548680"
  },
  {
    "text": "other machines and even if you have old machines if your organization doesn't do bios updates you're going to be sitting",
    "start": "548680",
    "end": "555120"
  },
  {
    "text": "around with vulnerable bioses uh scattered throughout your environment and you know how many how many back doors and bioses does it take for the",
    "start": "555120",
    "end": "561959"
  },
  {
    "text": "attacker to maintain a persistent uh persistent hold on your network for years or decades potentially so with",
    "start": "561959",
    "end": "568680"
  },
  {
    "text": "that I'm going to turn it over to Cory and he's going to talk about how an attacker potentially gets into the",
    "start": "568680",
    "end": "574959"
  },
  {
    "text": "BIOS okay thank you so this is all assuming that the attacker can actually get into the BIOS and there are actually",
    "start": "574959",
    "end": "581200"
  },
  {
    "text": "some chips said mechanisms that prevent an attacker from just riding directly to the spbi flash that contains the BIOS",
    "start": "581200",
    "end": "586720"
  },
  {
    "text": "Yuri was um mentioned this as well um but on a lot of modern systems these are",
    "start": "586720",
    "end": "592000"
  },
  {
    "text": "locked down so you can't just do this sort of thing where you can just write directly to the Flash and corrupt the bios so what we found at the e6400 was",
    "start": "592000",
    "end": "598519"
  },
  {
    "text": "their a29 bios rision um they weren't locking down the BIOS this was a while ago but when a30 came around they were",
    "start": "598519",
    "end": "604800"
  },
  {
    "text": "locking it down and they they supported signed bios enforcement so that you couldn't just overwrite the the",
    "start": "604800",
    "end": "610200"
  },
  {
    "text": "flashship with anything that wasn't signed with the Dell private key so that's that's good security so [Music]",
    "start": "610200",
    "end": "615560"
  },
  {
    "text": "um we still as an attacker want to talk about how we can get a um an arbitrary",
    "start": "615560",
    "end": "620720"
  },
  {
    "text": "image on the flashship even in the presence of the signed bios enforcement and so essentially you what you have to",
    "start": "620720",
    "end": "625760"
  },
  {
    "text": "do is exploit the BIOS update process to do something like that now something similar to this has already happened in",
    "start": "625760",
    "end": "632240"
  },
  {
    "text": "2009 uh invisible things lab showed an exploit memory corruption exploit against an Intel bios that allowed them",
    "start": "632240",
    "end": "638920"
  },
  {
    "text": "to reflash with an arbitrary image despite this signed bios enforcement and we found something similar that affected",
    "start": "638920",
    "end": "644440"
  },
  {
    "text": "a number of Dell systems including the e6400 okay so um our our attch service",
    "start": "644440",
    "end": "651360"
  },
  {
    "text": "here is the BIOS update process we're going to try to corrupt it somehow and uh to before we can do this we really",
    "start": "651360",
    "end": "657360"
  },
  {
    "text": "need to understand the attack surface and understand in the Dell bios update process so for the e6400 at least um the",
    "start": "657360",
    "end": "663279"
  },
  {
    "text": "way this breaks down is the uh the BIOS update image is called in Dell terminology and HDR image and what",
    "start": "663279",
    "end": "670240"
  },
  {
    "text": "happens when you want to update your bios is that the operating system packe tizes HDR bios update image which can be",
    "start": "670240",
    "end": "677760"
  },
  {
    "text": "many megabytes in in size so it can be quite big so to handle that they'll split it up into smaller packets and",
    "start": "677760",
    "end": "684399"
  },
  {
    "text": "these kind of get written across the address space and then a bit in Coss is flipped that indicates all right there there's a bios update pending and then",
    "start": "684399",
    "end": "691680"
  },
  {
    "text": "the system reboots and whenever this reboot happens the BIOS is checking is a seos bits set if so go out and find the",
    "start": "691680",
    "end": "698600"
  },
  {
    "text": "pending bios update and and do the process and this all happens in system management",
    "start": "698600",
    "end": "704440"
  },
  {
    "text": "mode okay so this is just a little visual depiction of what actually is happening you have the operating system",
    "start": "704440",
    "end": "709600"
  },
  {
    "text": "kernel driver taking this big HDR image and splitting it up into uh what's called rbu packets in the Dell",
    "start": "709600",
    "end": "716760"
  },
  {
    "text": "terminology and they're just split all across address bace and they're encapsulated by some head Header",
    "start": "716760",
    "end": "723000"
  },
  {
    "text": "information which says things like the sequence number the size of the packet uh Etc that just helps the update",
    "start": "723000",
    "end": "729600"
  },
  {
    "text": "routine reassemble the the BIOS update image from those individual",
    "start": "729600",
    "end": "734880"
  },
  {
    "text": "packets so you can see here this is actually the um what would happen after the reboot the system management mode",
    "start": "734880",
    "end": "741480"
  },
  {
    "text": "update routine is literally traversing through the entire Ram address bace looking for these rbu packets and it",
    "start": "741480",
    "end": "748079"
  },
  {
    "text": "identifies them by this special string dollar sign rpk on like page align boundaries that indicates that an rbu",
    "start": "748079",
    "end": "754720"
  },
  {
    "text": "packet is there and then as it finds them it collects them and then uh combines them in this reconstitution",
    "start": "754720",
    "end": "761079"
  },
  {
    "text": "area where eventually the entire uh dell you know bios update image is going to",
    "start": "761079",
    "end": "766240"
  },
  {
    "text": "end up and not until this occurs is the uh signature signature check uh happen",
    "start": "766240",
    "end": "771720"
  },
  {
    "text": "on the BIOS update image the reason is the the rbu packets themselves those rpk things are not being signed because it's",
    "start": "771720",
    "end": "778560"
  },
  {
    "text": "up to the system driver to split up the image and maybe those will be different depending on the uh the operating system",
    "start": "778560",
    "end": "784560"
  },
  {
    "text": "resources so those are completely unsigned the attacker can control anything about the meta information and",
    "start": "784560",
    "end": "789639"
  },
  {
    "text": "those only until that image is completely reconstructed can the signature check occurs so anything that",
    "start": "789639",
    "end": "795160"
  },
  {
    "text": "happens before that is fair gain for trying to U find a corruption vulnerability",
    "start": "795160",
    "end": "801079"
  },
  {
    "text": "in okay so just to reiterate our goal as an attacker is obviously to reflash the",
    "start": "801160",
    "end": "806320"
  },
  {
    "text": "BIOS with an arbitrary image and to do that we're going to try and try to find a memory corruption vulnerability in this reconstruction process that the",
    "start": "806320",
    "end": "812959"
  },
  {
    "text": "BIOS update process uses so uh more specifically our tax",
    "start": "812959",
    "end": "818519"
  },
  {
    "text": "surface is really those rbu packets I was just describing and you can see here this is actually provided by the uh by",
    "start": "818519",
    "end": "825560"
  },
  {
    "text": "like a s bias library for Linux so you don't have to reverse this or anything it's just freely available and it's this",
    "start": "825560",
    "end": "831680"
  },
  {
    "text": "is H what encapsulates all those individual bios update image packets and it contains stuff that you would pretty",
    "start": "831680",
    "end": "836759"
  },
  {
    "text": "much expect stuff like the current uh you know packet ID the size of it what the sequence number is ETC pretty",
    "start": "836759",
    "end": "843199"
  },
  {
    "text": "generic stuff for this type of um problem solving so as I mentioned before",
    "start": "843199",
    "end": "848480"
  },
  {
    "text": "this 33 by structure is unsigned uh anything in here in the parsing of this is fair game for trying to find a",
    "start": "848480",
    "end": "854040"
  },
  {
    "text": "vulnerability in oops okay so getting into the nitty-gritty of how this update routine",
    "start": "854040",
    "end": "859560"
  },
  {
    "text": "actually works uh what you're looking at here is system management mode code for the e6400 and this is what happens when one",
    "start": "859560",
    "end": "866360"
  },
  {
    "text": "of those rbu packets is located as soon as it's located it starts to parse the individual packet",
    "start": "866360",
    "end": "871959"
  },
  {
    "text": "so in this case um it's copying some of those structure members into a global",
    "start": "871959",
    "end": "877120"
  },
  {
    "text": "smm data area so things is interested in like the the set ID the total number of packets the size the sequence number Etc",
    "start": "877120",
    "end": "884199"
  },
  {
    "text": "uh these are all just copied into this kind of smm global data area and they'll be used for later calculations and",
    "start": "884199",
    "end": "889279"
  },
  {
    "text": "what's important to take note of here is there's not a lot of Sanity checking going on at least at this stage um you",
    "start": "889279",
    "end": "894320"
  },
  {
    "text": "can see it's just kind of copying it to this data area and they'll be used later for for various things",
    "start": "894320",
    "end": "900959"
  },
  {
    "text": "okay so uh one little coraly here that's worth mentioning is part of the um the",
    "start": "900959",
    "end": "908320"
  },
  {
    "text": "Dell update process is actually in that reconstruction area I was referring to",
    "start": "908320",
    "end": "913759"
  },
  {
    "text": "previously it's going to fill with this gor string Geo it's like an asy tag and",
    "start": "913759",
    "end": "919600"
  },
  {
    "text": "I'm not exactly sure why it's doing this uh we just saw it the code doing it I think basically it's adding this tag to",
    "start": "919600",
    "end": "925240"
  },
  {
    "text": "the Reconstruction space to signify where these individual RB packets are supposed to end up in the reconstitution",
    "start": "925240",
    "end": "930880"
  },
  {
    "text": "area just is a debugging thing so when they're developing this reconstruction algorithm they could go in and you know",
    "start": "930880",
    "end": "936160"
  },
  {
    "text": "debug it or something like that but anyway this thing is going to come back to haunt us and make exploiting this um",
    "start": "936160",
    "end": "941560"
  },
  {
    "text": "pretty difficult okay so getting to the actual vulnerability um just to cut to the",
    "start": "941560",
    "end": "947720"
  },
  {
    "text": "chase if you look down here at the the second line that rep move SD is a inline MIM copy um so obviously we should be",
    "start": "947720",
    "end": "955839"
  },
  {
    "text": "thinking like buffer overflow and if you look at the size param ECX if you look closely you can see that",
    "start": "955839",
    "end": "961680"
  },
  {
    "text": "it's like um let me see if I can point that",
    "start": "961680",
    "end": "967480"
  },
  {
    "text": "out uh yeah the refresh rate is kind of bad never mind so that rep move SD at the bottom that's inline MIM copy the",
    "start": "967800",
    "end": "974040"
  },
  {
    "text": "size parameter is ECX obviously and if you follow the chain up you can see it's derived from attacker data uh that HDR",
    "start": "974040",
    "end": "980279"
  },
  {
    "text": "size which just comes directly from that rbu packet okay so you know the size parameter MIM copy bad buer overflow uh",
    "start": "980279",
    "end": "988279"
  },
  {
    "text": "we're definitely in business um but the situation is",
    "start": "988279",
    "end": "993560"
  },
  {
    "text": "actually quite a bit more interesting than that which is why we're really going into into depth about talking about this so if you look closely at",
    "start": "993560",
    "end": "1000199"
  },
  {
    "text": "this hex-rays output for this relevant code you can see that the source the destination and the size are all",
    "start": "1000199",
    "end": "1006319"
  },
  {
    "text": "influenced by attacker data so normally where you only get the the size parameter we actually control or",
    "start": "1006319",
    "end": "1011600"
  },
  {
    "text": "influence at least the size and the source and the destination which makes things uh really pretty interesting so",
    "start": "1011600",
    "end": "1018399"
  },
  {
    "text": "exploitable memory corruption vulnerability in the update process uh what's great about this is",
    "start": "1018399",
    "end": "1024280"
  },
  {
    "text": "it's happening in system management mode and in smm there's no things like aslr stack canaries blah blah blah so you're",
    "start": "1024280",
    "end": "1031959"
  },
  {
    "text": "really free to pursue any Target with impunity nothing's going to stop you and in fact since you're in system",
    "start": "1031959",
    "end": "1037038"
  },
  {
    "text": "management mode which is like the super privileged x86 mode you can literally overwrite anything and nothing's going",
    "start": "1037039",
    "end": "1042319"
  },
  {
    "text": "to stop you it's not like you can go off the end of the stack and generate an exception you can write over code it's not going to be a segmentation fault you",
    "start": "1042319",
    "end": "1048400"
  },
  {
    "text": "can do anything and everything okay so those are the good",
    "start": "1048400",
    "end": "1053600"
  },
  {
    "text": "things things that are working for us as an attacker unfortunately exploting this turns out to be quite tricky uh number",
    "start": "1053600",
    "end": "1059280"
  },
  {
    "text": "one because to get to this vulnerable MIM copy you can see it's actually looking at the uh what effectively here",
    "start": "1059280",
    "end": "1065799"
  },
  {
    "text": "is the the destination for the copy underlined in red and it's checking to make sure the destination points to this",
    "start": "1065799",
    "end": "1072039"
  },
  {
    "text": "G tag which kind of makes sense based on my previous description it's making sure that the um the destination for the Mim",
    "start": "1072039",
    "end": "1078840"
  },
  {
    "text": "copy was previously filled in with this debugging tag gor so um this is going to",
    "start": "1078840",
    "end": "1084200"
  },
  {
    "text": "complicate things uh in fact there's a number of other constraints that make exploiting this sort of uh difficult in general the",
    "start": "1084200",
    "end": "1092919"
  },
  {
    "text": "hardest part about this was the buffer where we're overflowing is considerably lower in memory than anything we want to",
    "start": "1092919",
    "end": "1099559"
  },
  {
    "text": "overwrite like many many megabytes so we're basically going to just trash a whole lot of the system RAM and it",
    "start": "1099559",
    "end": "1105799"
  },
  {
    "text": "attempt to overwrite any function pointers and uh so it's pretty tricky to uh corrupt that",
    "start": "1105799",
    "end": "1112600"
  },
  {
    "text": "much data in the address space and not hang the system and so that's kind of what we are working around and we had to",
    "start": "1112600",
    "end": "1118320"
  },
  {
    "text": "go in and find like we can overwrite this but not this and I won't hang the system Etc and just come up with a list of constraints of stuff we can touch",
    "start": "1118320",
    "end": "1124600"
  },
  {
    "text": "without causing a system crash okay and back to the The Source",
    "start": "1124600",
    "end": "1130280"
  },
  {
    "text": "the destination and the size these are basically how they're derived in that vulnerable MIM copy so what's uh",
    "start": "1130280",
    "end": "1135880"
  },
  {
    "text": "important to note here is that they're all derived from the same attacker controlled parameters so this rbu packet",
    "start": "1135880",
    "end": "1140960"
  },
  {
    "text": "structure is completely attacker controlled the attacker can set anything he wants to for those things um so",
    "start": "1140960",
    "end": "1147400"
  },
  {
    "text": "notice if you want to change or like destination source and size I'll have the packet size parameter in there so",
    "start": "1147400",
    "end": "1152840"
  },
  {
    "text": "effectively what this means is if you want to change the source or the size it's going to change all the other parameters as well so it's a bit like",
    "start": "1152840",
    "end": "1159799"
  },
  {
    "text": "you have a sliding window that you can corrupt and that window is going to change based on any number one of the",
    "start": "1159799",
    "end": "1165919"
  },
  {
    "text": "parameters so the trick here is to figure out the parameter so that that window corrupts the function pointers we",
    "start": "1165919",
    "end": "1171640"
  },
  {
    "text": "want but does not hang the system and this is actually ended up being a pretty tricky",
    "start": "1171640",
    "end": "1177120"
  },
  {
    "text": "problem okay um so I previously mentioned that the Reconstruction area",
    "start": "1177600",
    "end": "1182960"
  },
  {
    "text": "is filled with this G or debugging tag um now this should occur naturally",
    "start": "1182960",
    "end": "1188880"
  },
  {
    "text": "in the Bios update process where this G or debugging string is written unfortunately we kind of short circuit",
    "start": "1188880",
    "end": "1194760"
  },
  {
    "text": "the update routine so that that does not happen so",
    "start": "1194760",
    "end": "1200120"
  },
  {
    "text": "you can see let me see the total data size right here well first of all we need this if",
    "start": "1200120",
    "end": "1206799"
  },
  {
    "text": "if St statement to return one if this does not execute in return one then we'll never get to that vulnerable MIM",
    "start": "1206799",
    "end": "1213159"
  },
  {
    "text": "copy that we're basically trying to",
    "start": "1213159",
    "end": "1216480"
  },
  {
    "text": "exploits so we need this to run and notice that forces's total data",
    "start": "1219000",
    "end": "1224679"
  },
  {
    "text": "size to be less than ox 800,000 8 megabytes um we want to write more than that so the way we kind of get get",
    "start": "1224679",
    "end": "1232200"
  },
  {
    "text": "around this is we set the total number of packets to one this is an attacker controlled paramet in that rbu packet so",
    "start": "1232200",
    "end": "1238480"
  },
  {
    "text": "total data size is zero good this executes uh but what's bad is it means this gor string basically is not is not",
    "start": "1238480",
    "end": "1245600"
  },
  {
    "text": "end up being written the way we expect it to be written and furthermore we found that if we let this uh MIM set",
    "start": "1245600",
    "end": "1251400"
  },
  {
    "text": "which just zeros out that whole reconstruction area first run that would cause big problems as well just zeroing",
    "start": "1251400",
    "end": "1256520"
  },
  {
    "text": "out a huge amount of the address space so so unfortunately to make this to hit this exploitable condition the way we",
    "start": "1256520",
    "end": "1262720"
  },
  {
    "text": "want we're going to have to make it where the gor string does not occur there naturally okay so that gor string has to",
    "start": "1262720",
    "end": "1270520"
  },
  {
    "text": "be there just to reiterate again it has to be there to hit that vulnerable MIM copy so what do we do well um after",
    "start": "1270520",
    "end": "1276760"
  },
  {
    "text": "thinking for a while we actually sort of um fakely generate this this gor string",
    "start": "1276760",
    "end": "1283440"
  },
  {
    "text": "in the operating system we wrote a Windows kernel driver that would basically write the gor string as high up as physical memory as it could it",
    "start": "1283440",
    "end": "1289840"
  },
  {
    "text": "would keep allocating higher and higher using mm allocate contiguous and as a",
    "start": "1289840",
    "end": "1294960"
  },
  {
    "text": "Windows kernel function keep allocating as high as it possibly can keep writing the gor string so it's kind of like a",
    "start": "1294960",
    "end": "1300720"
  },
  {
    "text": "gor spray or something like that of the address space and then effectively we're abusing the same functionality that the",
    "start": "1300720",
    "end": "1306440"
  },
  {
    "text": "BIOS update does where if you set up the system RAM and do a soft reboot that Ram",
    "start": "1306440",
    "end": "1311520"
  },
  {
    "text": "will actually stay in place it's not like it's zeroed out upon a system reset if it's just a soft reboot the address",
    "start": "1311520",
    "end": "1316600"
  },
  {
    "text": "bace will for the most part stay the same it's the same thing that the the BIOS update does so we found that if we",
    "start": "1316600",
    "end": "1323200"
  },
  {
    "text": "just spray the address space with gor and then reboot the system softly we could actually have it where this would",
    "start": "1323200",
    "end": "1329440"
  },
  {
    "text": "uh stay in place and we could meet this condition okay so there were a number of",
    "start": "1329440",
    "end": "1334760"
  },
  {
    "text": "other constraints that I was sort of alluding to and effectively what we did was we just wrote something to brute force a possible rbu packet that would",
    "start": "1334760",
    "end": "1343559"
  },
  {
    "text": "overwrite a function pointer that we care about in this case we just chose the return address for the bios update",
    "start": "1343559",
    "end": "1349080"
  },
  {
    "text": "routine and remember it's totally legit to go after this because there's no exploit mitigations in in the system",
    "start": "1349080",
    "end": "1354760"
  },
  {
    "text": "management mode so overwrite that don't crash the system Etc and luckily we were",
    "start": "1354760",
    "end": "1361600"
  },
  {
    "text": "able to uh solve you know get a Brute Force at rbu packet configurations that will let us overwrite the return address",
    "start": "1361600",
    "end": "1367039"
  },
  {
    "text": "and not crash the system Etc and just to uh give a visual depiction of what's going on um you can",
    "start": "1367039",
    "end": "1374679"
  },
  {
    "text": "see here that with a um it's a bit hard for you",
    "start": "1374679",
    "end": "1380559"
  },
  {
    "text": "guys to see perhaps but if you come back to this you can see like for the rbu packet the packet number is unusually",
    "start": "1380559",
    "end": "1386600"
  },
  {
    "text": "high Ox 83 F9 and um the packet size is FFF so",
    "start": "1386600",
    "end": "1393919"
  },
  {
    "text": "these things normally you would not see during a regular bias update process are obviously unusual large and malicious or",
    "start": "1393919",
    "end": "1400120"
  },
  {
    "text": "whatever and with those uh what happens is the the reconstitution area for the",
    "start": "1400120",
    "end": "1405960"
  },
  {
    "text": "the BIOS update actually overlaps the system management mode Ram so if we do this uh cleverly we can make it where we",
    "start": "1405960",
    "end": "1411919"
  },
  {
    "text": "overwrite their return address being used by the update routine and then gain control of the instruction pointer",
    "start": "1411919",
    "end": "1417240"
  },
  {
    "text": "within the context of the BIOS update routine and at this point we are free to reflash the BIOS with whatever we want",
    "start": "1417240",
    "end": "1423559"
  },
  {
    "text": "it doesn't have to be signed by anything okay do we have the mod ES",
    "start": "1423559",
    "end": "1432000"
  },
  {
    "text": "okay so this is just a um yeah okay so what I'm doing here is",
    "start": "1441200",
    "end": "1449039"
  },
  {
    "text": "this is the e6400 I'm just going into the bio setup and showing you that in fact that uh you know signed bios",
    "start": "1449039",
    "end": "1455159"
  },
  {
    "text": "enforcement is turned",
    "start": "1455159",
    "end": "1458120"
  },
  {
    "text": "on yeah so it might be a bit hard to read but yeah basically signed bias enforcement is turned on we can't just reflash the bias with an arbitrary image",
    "start": "1462360",
    "end": "1469760"
  },
  {
    "text": "uh the SPI is locked and everything so you can't do something similar to what Yuri was doing you can't just write directly to the flash this thing is",
    "start": "1469760",
    "end": "1475640"
  },
  {
    "text": "locked down pretty good and what we're doing now is booting into the operating system and we're",
    "start": "1475640",
    "end": "1481799"
  },
  {
    "text": "going to run our uh malicious kernel driver that's going to write one of these malicious rbu packets to the",
    "start": "1481799",
    "end": "1487360"
  },
  {
    "text": "address space and then uh trigger the BIOS update process that way we can try to exploit it reflash the bias with an",
    "start": "1487360",
    "end": "1493279"
  },
  {
    "text": "arbitrary image and um in Windows this probably",
    "start": "1493279",
    "end": "1498640"
  },
  {
    "text": "requires a kernel driver but in in Linux you could actually do this just from user Land from the root account uh so it would be like a user land to smm and",
    "start": "1498640",
    "end": "1505559"
  },
  {
    "text": "bias privilege privilege escalation so from here what I just did was ran the kernel driver it set up the address bace",
    "start": "1505559",
    "end": "1511919"
  },
  {
    "text": "with that malicious uh bios update packet it flipped the seos bit now we're",
    "start": "1511919",
    "end": "1517399"
  },
  {
    "text": "rebooting hopefully we'll trigger the BIOS update process and then um you know get control of VIP so yeah at this point",
    "start": "1517399",
    "end": "1525279"
  },
  {
    "text": "the BIOS update process should be going but clearly we had control of the um the instruction",
    "start": "1525279",
    "end": "1531000"
  },
  {
    "text": "pointer basically that last screen which went away kind of fast was just showing",
    "start": "1531000",
    "end": "1536880"
  },
  {
    "text": "this so you know we have control of instruction pointer in the context of the bias update uh update routine and at",
    "start": "1536880",
    "end": "1543080"
  },
  {
    "text": "this point you can literally overwrite The Flash chip with whatever you want and the Flash chip contains like the",
    "start": "1543080",
    "end": "1548840"
  },
  {
    "text": "management engine and all kinds of other good stuff so you really have complete control of the system um the other",
    "start": "1548840",
    "end": "1554399"
  },
  {
    "text": "important thing to take away is that bios is actually responsible for instantiating system management mode so",
    "start": "1554399",
    "end": "1560320"
  },
  {
    "text": "once you have control of the flashship you have complete control of smm as well and you'll be persistent in there so",
    "start": "1560320",
    "end": "1567039"
  },
  {
    "text": "this bug allows you to get control of the BIOS and system management mode for good um and then once you have control",
    "start": "1567039",
    "end": "1573600"
  },
  {
    "text": "of BIOS andm you can do really bad things primarily because the whole root of trust in the system things like what",
    "start": "1573600",
    "end": "1579240"
  },
  {
    "text": "the TPM uses is on this bio flash ship so now John is going to talk about some of the really nasty malare you can",
    "start": "1579240",
    "end": "1584679"
  },
  {
    "text": "Implement once you have complete control of the system like this thank you Cory hi I'm John Butterworth and I'm",
    "start": "1584679",
    "end": "1591919"
  },
  {
    "text": "going to present to you a an example of a worst case scenario where the attacker is able to exploit a vulnerability like",
    "start": "1591919",
    "end": "1598600"
  },
  {
    "text": "the one that Cory just showed you and install a permanent root kit uh",
    "start": "1598600",
    "end": "1604000"
  },
  {
    "text": "persistant root kit into your firmware bios now technically uh modifying the BIOS with something like say a rootkit",
    "start": "1604000",
    "end": "1609760"
  },
  {
    "text": "should be detected uh in their PC client specification The Trusted Computing group does lay out a set of critical",
    "start": "1609760",
    "end": "1616720"
  },
  {
    "text": "boot time components which which must be measured in order to establish a trusted",
    "start": "1616720",
    "end": "1622159"
  },
  {
    "text": "system now the uh measurement of these components is referred to as the static root of trust for measurement static",
    "start": "1622159",
    "end": "1627880"
  },
  {
    "text": "being uh because you're assumed to be measuring the same thing each time uh each component is measured prior",
    "start": "1627880",
    "end": "1635559"
  },
  {
    "text": "uh to control actually being handed off to that separate component thus establishing a chain of",
    "start": "1635559",
    "end": "1641679"
  },
  {
    "text": "trust AEL now for this discussion we're focused specifically on that first initial measurement which is referred to",
    "start": "1641679",
    "end": "1647880"
  },
  {
    "text": "as the core route of trust uh for measurement uh the responsibility of which is to measure itself as well as",
    "start": "1647880",
    "end": "1654000"
  },
  {
    "text": "the BIOS uh and because of that uh it forms a sort of anchor in this chain of",
    "start": "1654000",
    "end": "1659399"
  },
  {
    "text": "trust as you will and because it's also measuring the BIOS therefore technically a uh firmware rootkit should be detected",
    "start": "1659399",
    "end": "1666880"
  },
  {
    "text": "however as I'm going to show you that's not necessarily the case uh first a little bit of a terminology we have the",
    "start": "1666880",
    "end": "1673440"
  },
  {
    "text": "trusted platform module the TPM chip uh it's located on the motherboard has a multiple security features uh the most",
    "start": "1673440",
    "end": "1680200"
  },
  {
    "text": "pertinent to this discussion is the fact that it is able to provide a signed quote of its current PCR Set uh it can",
    "start": "1680200",
    "end": "1688720"
  },
  {
    "text": "also provide signed tick stamps uh B youo will'll get into that a little bit later now these pcrs uh they are",
    "start": "1688720",
    "end": "1695240"
  },
  {
    "text": "registers located on the TPM chips uh they store 20 byte hashes uh",
    "start": "1695240",
    "end": "1701039"
  },
  {
    "text": "each of these H hashes represents a uh one of these uh measurements of these critical boot time components defined by",
    "start": "1701039",
    "end": "1707480"
  },
  {
    "text": "the TCG uh the TPM uh the pcrs rather are reset to zero upon reboots and they can only",
    "start": "1707480",
    "end": "1714480"
  },
  {
    "text": "be modified via an extend function which is the Sha one hash of the current PCR value concatenated with the measurement",
    "start": "1714480",
    "end": "1722279"
  },
  {
    "text": "with the hash of the measurement that you wish to extend on to now this is an example of a measured",
    "start": "1722279",
    "end": "1728440"
  },
  {
    "text": "boot uh as of as as defined by The Trusted Computing group uh here we have",
    "start": "1728440",
    "end": "1736120"
  },
  {
    "text": "our core root of trust for measurement measuring itself as well as the BIOS and",
    "start": "1736120",
    "end": "1741240"
  },
  {
    "text": "extending that measurement onto PCR Z now as I st it earlier uh the crtm is",
    "start": "1741240",
    "end": "1747480"
  },
  {
    "text": "the only measurement which we are focused on I'm just going to leave these here for reference as they are beyond",
    "start": "1747480",
    "end": "1753039"
  },
  {
    "text": "the scope of this discussion uh this slide is just to show",
    "start": "1753039",
    "end": "1758480"
  },
  {
    "text": "how our work in the trusted Computing space uh differs uh from that performed in the past uh past researchers have",
    "start": "1758480",
    "end": "1766399"
  },
  {
    "text": "actually attacked the TPM chip uh like say with an electron microscope trying to dig the keys out of like say the",
    "start": "1766399",
    "end": "1771440"
  },
  {
    "text": "shielded locations that are uh located on the TPM chip uh we are actually",
    "start": "1771440",
    "end": "1777600"
  },
  {
    "text": "focused specifically on uh investigating the vendor implementations of these uh",
    "start": "1777600",
    "end": "1783440"
  },
  {
    "text": "static root of trust measurements now let's just talk about the architecture a little bit uh this is",
    "start": "1783440",
    "end": "1790720"
  },
  {
    "text": "the an image of the Q45 Express chipset on the e6400 uh we have here",
    "start": "1790720",
    "end": "1798480"
  },
  {
    "text": "a it it consists of a CPU a memory controller Hub controlling IO to system",
    "start": "1798480",
    "end": "1803840"
  },
  {
    "text": "RAM and we have an IO controller Hub controlling IO to various system devices like say the SPI flash which is where",
    "start": "1803840",
    "end": "1811039"
  },
  {
    "text": "the uh bios resides as well as the TPM chip too uh so we're just going to simplify",
    "start": "1811039",
    "end": "1817760"
  },
  {
    "text": "this uh into a simplified representation um we're going to talk a little bit about the boot process now uh when you",
    "start": "1817760",
    "end": "1824760"
  },
  {
    "text": "power up your system the CPU begins executing directly from the NV Ram flash directly from the boot block performing",
    "start": "1824760",
    "end": "1830600"
  },
  {
    "text": "various generic uh chipset uh configurations specific to the dell",
    "start": "1830600",
    "end": "1835679"
  },
  {
    "text": "e6400 it begins to process uh a number of modules uh some of these modules are",
    "start": "1835679",
    "end": "1842080"
  },
  {
    "text": "very benign containing uh data such as the splash screen which you see upon system boot uh others contain a very",
    "start": "1842080",
    "end": "1848840"
  },
  {
    "text": "important executable code like that which is like that code which will instantiate system management mode and",
    "start": "1848840",
    "end": "1855679"
  },
  {
    "text": "it's executable system management Ram space and of course uh the crtm is another one",
    "start": "1855679",
    "end": "1861000"
  },
  {
    "text": "of these modules which will execute and extend its measurement onto a TPMS PCR z",
    "start": "1861000",
    "end": "1867679"
  },
  {
    "text": "uh specifically what that is measuring I will uh detail shortly uh but first i'm",
    "start": "1867679",
    "end": "1873279"
  },
  {
    "text": "like to just uh outline some very general problems with relying on pcrs uh",
    "start": "1873279",
    "end": "1878600"
  },
  {
    "text": "as indicators of a trusted system uh for example uh there are no golden pcrs",
    "start": "1878600",
    "end": "1885880"
  },
  {
    "text": "provided by the oems uh it is up to you the truster the owner of the system to determine that these initial PCR sets",
    "start": "1885880",
    "end": "1893399"
  },
  {
    "text": "that you see are in fact uh to be trusted so you have to provide your own golden value so to speak uh there is",
    "start": "1893399",
    "end": "1901200"
  },
  {
    "text": "also no description of what's actually being measured uh to incorporate uh to to create these measurements that you uh",
    "start": "1901200",
    "end": "1907720"
  },
  {
    "text": "read in the pcrs uh in our research we were",
    "start": "1907720",
    "end": "1913279"
  },
  {
    "text": "surprised to see that homogeneous systems uh systems being the same uh",
    "start": "1913279",
    "end": "1919399"
  },
  {
    "text": "Hardware configuration same model uh same bios revision would actually produce different PCR values uh as well",
    "start": "1919399",
    "end": "1926159"
  },
  {
    "text": "as we were also surprised to see duplicative PCR values uh when we were dumping the PCR sets as you can see here",
    "start": "1926159",
    "end": "1933159"
  },
  {
    "text": "in the figure below uh indexes 1 two and three I'll share the same hash now what this means",
    "start": "1933159",
    "end": "1941480"
  },
  {
    "text": "is twofold uh one uh no new information is actually being measured and extended",
    "start": "1941480",
    "end": "1946760"
  },
  {
    "text": "into those pcrs and two uh what's defined by the TC trusted Computing group as a critical",
    "start": "1946760",
    "end": "1953360"
  },
  {
    "text": "boot component that should be measured is actually not being measured anecdotally speaking this hash is",
    "start": "1953360",
    "end": "1958919"
  },
  {
    "text": "actually the hash of a of an empty PCR value concatenated with the SHA one hash",
    "start": "1958919",
    "end": "1964880"
  },
  {
    "text": "of zero so now I'm going to talk a little bit about uh what the uh e6400 core root",
    "start": "1964880",
    "end": "1971919"
  },
  {
    "text": "of trust of measurement is actually measuring uh this is indicated above in this uh diagram at the top this is the",
    "start": "1971919",
    "end": "1978320"
  },
  {
    "text": "BIOS and those gray slices represent what this core root of trust is actually",
    "start": "1978320",
    "end": "1983679"
  },
  {
    "text": "measuring uh these gray slices uh consist of the first 64 bytes of each of",
    "start": "1983679",
    "end": "1988960"
  },
  {
    "text": "those modules which I had described earlier during the BIOS boot slides uh and as you can see the uh core",
    "start": "1988960",
    "end": "1996200"
  },
  {
    "text": "root of trust for measurement actually also is not measuring itself now it's easy to look at this and say well that's",
    "start": "1996200",
    "end": "2003200"
  },
  {
    "text": "the problem right there if they were only measuring the entire bios well that would fix the problem that's actually really not the case as I'll show you",
    "start": "2003200",
    "end": "2010360"
  },
  {
    "text": "shortly um that's that's that is a red herring the real problem is because the",
    "start": "2010360",
    "end": "2015760"
  },
  {
    "text": "uh crtm is actually something you can modify it's mutable so but regardless of that you",
    "start": "2015760",
    "end": "2022679"
  },
  {
    "text": "still want to uh perform the measurements correctly so there are some problems with uh weak measurements uh",
    "start": "2022679",
    "end": "2029840"
  },
  {
    "text": "for example uh is uh shown on the uh previous slide um if you're not measuring certain components such as the",
    "start": "2029840",
    "end": "2036360"
  },
  {
    "text": "PCI option ROMs and bios configuration that is un ungood uh you're not actually capturing those",
    "start": "2036360",
    "end": "2042639"
  },
  {
    "text": "measurements um it's also possible looking uh judging from the what's",
    "start": "2042639",
    "end": "2047760"
  },
  {
    "text": "actually measured on the previous slide you can actually arbitrarily modify uh bits and pieces of the BIOS uh without",
    "start": "2047760",
    "end": "2053919"
  },
  {
    "text": "actually triggering any changes in the PCR sets as well uh Yuri actually presented a similar Discovery at canc",
    "start": "2053919",
    "end": "2060040"
  },
  {
    "text": "West uh 2013 uh where he found he was able to arbitrarily modify the BIOS on",
    "start": "2060040",
    "end": "2065960"
  },
  {
    "text": "his Asus motherboard without triggering any changes in his pcrs uh the takeaway from this is that",
    "start": "2065960",
    "end": "2072280"
  },
  {
    "text": "this is not limited to a single vendor uh this is an industrywide problem we",
    "start": "2072280",
    "end": "2077878"
  },
  {
    "text": "believe uh so um as I stated earlier uh regardless of how much of the BIOS is",
    "start": "2077879",
    "end": "2084280"
  },
  {
    "text": "actually being measured um it is possible to to still um install a root",
    "start": "2084280",
    "end": "2089839"
  },
  {
    "text": "kit in in there so uh what if an attacker wanted to modify any part of",
    "start": "2089839",
    "end": "2094919"
  },
  {
    "text": "the BIOS regardless of whether or not they're measuring the entire the entire thing well you can forge the",
    "start": "2094919",
    "end": "2101320"
  },
  {
    "text": "pcrs and this works because the BIOS is mutable uh this is basically your standard run-of-the-mill replay type of",
    "start": "2101320",
    "end": "2108079"
  },
  {
    "text": "attack uh where the attacker is able to either record or calculate the known good measurement uh that's performed by",
    "start": "2108079",
    "end": "2114640"
  },
  {
    "text": "the crtm to record that hash that gets passed to uh the tpn to extend onto a",
    "start": "2114640",
    "end": "2120040"
  },
  {
    "text": "PCR z uh it's then able to modify the crtm to prevent that good crtm from",
    "start": "2120040",
    "end": "2125599"
  },
  {
    "text": "running and then to replay it's pre-recorded hash to the TPM to extend",
    "start": "2125599",
    "end": "2131040"
  },
  {
    "text": "on to PCR Z thus reporting your golden value so to speak of PCR Z that you",
    "start": "2131040",
    "end": "2136440"
  },
  {
    "text": "expect to see even though the crtm has actually been modified and from there the attacker is able to instantiate to",
    "start": "2136440",
    "end": "2144480"
  },
  {
    "text": "uh insert itself into system management Ram or any other part of the system that it wants",
    "start": "2144480",
    "end": "2150319"
  },
  {
    "text": "to so as uh Corey hinted there here's an example of some really bad things that",
    "start": "2150440",
    "end": "2157119"
  },
  {
    "text": "can happen uh when when this is a possibility U just to show that this",
    "start": "2157119",
    "end": "2162480"
  },
  {
    "text": "isn't uh just paper analysis we created two proof of concept fir where rootkits uh each is installed programmatically",
    "start": "2162480",
    "end": "2169200"
  },
  {
    "text": "there's no Hardware modification required uh to do this uh we created the tick and the flea both of these are",
    "start": "2169200",
    "end": "2176200"
  },
  {
    "text": "persistent stealth malware uh the tick achieves its stealth uh by forging",
    "start": "2176200",
    "end": "2181680"
  },
  {
    "text": "pcrs and of course once it's achieved the stealth it's free to modify any other portion of the BIOS that it wants",
    "start": "2181680",
    "end": "2187560"
  },
  {
    "text": "o including uh inserting itself into system management Ram uh the flea has all those exact same basic stealth uh",
    "start": "2187560",
    "end": "2194000"
  },
  {
    "text": "capabilities as the tick but it's actually also able to persist even Beyond bios ref",
    "start": "2194000",
    "end": "2201680"
  },
  {
    "text": "flashes so as a recap this is just a an example of a normal PCR zero measurement",
    "start": "2202560",
    "end": "2208720"
  },
  {
    "text": "uh where the crtm executes uh creates his measurement and extends that measurement to PCR z uh now if there's a",
    "start": "2208720",
    "end": "2216440"
  },
  {
    "text": "tick installed of course prevents the uh good uh crtm from executing takes its",
    "start": "2216440",
    "end": "2222200"
  },
  {
    "text": "pre-recorded hash value and extends that to PCR Z thus pro pro producing the",
    "start": "2222200",
    "end": "2228599"
  },
  {
    "text": "exact same PCR Z value as you would expect from a healthy system when clearly there is something else in your",
    "start": "2228599",
    "end": "2235839"
  },
  {
    "text": "firmware so now we have a quick little demonstration uh to show uh the stealth",
    "start": "2235839",
    "end": "2242040"
  },
  {
    "text": "capabilities of the tick",
    "start": "2242040",
    "end": "2245920"
  },
  {
    "text": "so what we have here is a bios uh revision a29 uh which is uh which just booted up",
    "start": "2253319",
    "end": "2259640"
  },
  {
    "text": "you just saw the Dell splash screen uh for this presentation purposes that",
    "start": "2259640",
    "end": "2264680"
  },
  {
    "text": "splash screen is actually going to be the only trustworthy indicator that this system is actually something that can be",
    "start": "2264680",
    "end": "2272560"
  },
  {
    "text": "trusted and just is a little spoiler alert you're not going to see that again so this is our setup in the upper right",
    "start": "2273040",
    "end": "2279160"
  },
  {
    "text": "hand corner we have a kernel debug output which we're going to use to grab our uh PCR values uh using our open TPM",
    "start": "2279160",
    "end": "2286359"
  },
  {
    "text": "driver which Corey wrote and I will provide a link to it's open source so what we're grabbing here this is",
    "start": "2286359",
    "end": "2292200"
  },
  {
    "text": "actually our known good uh this is going to be this will serve as our uh golden",
    "start": "2292200",
    "end": "2297319"
  },
  {
    "text": "PCR zero value uh this is an unmodified bios uh which is just booted",
    "start": "2297319",
    "end": "2303160"
  },
  {
    "text": "up and uh we recorded that into a text file just so we can compare and contrast",
    "start": "2303160",
    "end": "2308839"
  },
  {
    "text": "as we uh go through the uh boot process so what we're installing here just to show that the PCR values will change",
    "start": "2308839",
    "end": "2315960"
  },
  {
    "text": "this is a naive uh root kit naive is a root kit that we we refer to as naive",
    "start": "2315960",
    "end": "2322000"
  },
  {
    "text": "being because it has no stealth capability it can be easily detected simply by observing PCR zero so what we",
    "start": "2322000",
    "end": "2328760"
  },
  {
    "text": "expect to see when we again run the open TPM driver and dump our PCR set and grab",
    "start": "2328760",
    "end": "2334880"
  },
  {
    "text": "our value of PCR Z and compare it to our golden value value we expect that value to be",
    "start": "2334880",
    "end": "2340160"
  },
  {
    "text": "different so we're just going to get logged in here and perform",
    "start": "2340160",
    "end": "2345400"
  },
  {
    "text": "that just pause here real quick so it doesn't go too quick but this but indeed uh this hash is different and so the uh",
    "start": "2351000",
    "end": "2358880"
  },
  {
    "text": "this root kit is easily uh detected simply by observing the PCR value so now",
    "start": "2358880",
    "end": "2364040"
  },
  {
    "text": "we're going to install our tick now remember the tick has that stealth capability where it forges the pcrs viaa",
    "start": "2364040",
    "end": "2369560"
  },
  {
    "text": "the replay attack so we just executed that we're going to go through the update process",
    "start": "2369560",
    "end": "2376560"
  },
  {
    "text": "again and what we expect to see is that in this case the PCR Z will actually",
    "start": "2377240",
    "end": "2384000"
  },
  {
    "text": "match our first golden value of PCR 0 so it will appear that nothing in the Bios",
    "start": "2384000",
    "end": "2391000"
  },
  {
    "text": "is actually changed however something has changed again the",
    "start": "2391000",
    "end": "2398720"
  },
  {
    "text": "splash screen has changed just a benign",
    "start": "2398720",
    "end": "2404359"
  },
  {
    "text": "change so now we're just going to get logged in here and compare our values of PCR Z to the",
    "start": "2406640",
    "end": "2416400"
  },
  {
    "text": "initial value",
    "start": "2416400",
    "end": "2419799"
  },
  {
    "text": "we'll provide a link to the uh open TPM driver as well in case any of uh anyone here wants to start dumping their uh PCR",
    "start": "2429480",
    "end": "2436880"
  },
  {
    "text": "sets and indeed uh just pausing here real quick this does actually match our golden value of the uh pcrs so it",
    "start": "2436880",
    "end": "2443640"
  },
  {
    "text": "appears uh that the BIOS is",
    "start": "2443640",
    "end": "2448839"
  },
  {
    "text": "unmodified when in fact it has been",
    "start": "2448839",
    "end": "2453359"
  },
  {
    "text": "modified now we're going to talk about the flea as I stated earlier the flea has all the same stealth capabilities as",
    "start": "2455680",
    "end": "2461560"
  },
  {
    "text": "the tick uh performs the same replay attack it forges PCR z uh this remaining",
    "start": "2461560",
    "end": "2466640"
  },
  {
    "text": "undetected it's persistent uh not only between reboots just like the tick but it's also persistent Beyond bios ref",
    "start": "2466640",
    "end": "2472960"
  },
  {
    "text": "flashes so whereas I just showed you with a tick where you can't actually rely on the TPM to tell you that the",
    "start": "2472960",
    "end": "2479079"
  },
  {
    "text": "system is clean you also cannot necessarily rely on bios ref flashes to tell you that to to cleanse your system",
    "start": "2479079",
    "end": "2486920"
  },
  {
    "text": "of of a particularly nasty root kit so here's how the flea basically works the flea has hooked the BIOS update",
    "start": "2486920",
    "end": "2494720"
  },
  {
    "text": "process uh so it of course it's aware that it's about to begin it clones itself into that bios firmware update",
    "start": "2494720",
    "end": "2500760"
  },
  {
    "text": "that's in Resident Ram once it's in there and all set it simply permits the update process to continue thus the flea",
    "start": "2500760",
    "end": "2507200"
  },
  {
    "text": "has persisted to your newly updated flash bios and again we're going to see a",
    "start": "2507200",
    "end": "2513280"
  },
  {
    "text": "little video displaying this aspect of the flea",
    "start": "2513280",
    "end": "2519000"
  },
  {
    "text": "okay let me just start this one over okay so what we're starting here we're actually starting in the interest of",
    "start": "2523960",
    "end": "2529079"
  },
  {
    "text": "time we're just starting here with a uh with a system that already has a flea installed on it um so what we're going",
    "start": "2529079",
    "end": "2535839"
  },
  {
    "text": "to do is we're going to run through we're going to perform bios update and just show that the flea actually does persist I would be redundant to show the",
    "start": "2535839",
    "end": "2542160"
  },
  {
    "text": "forging capabilities however I should mention that the that once the F",
    "start": "2542160",
    "end": "2548280"
  },
  {
    "text": "persists and uh clones itself into the new bios update it will actually Forge",
    "start": "2548280",
    "end": "2553520"
  },
  {
    "text": "the expected update for that for that bios",
    "start": "2553520",
    "end": "2558160"
  },
  {
    "text": "revision so what we're going to do is we're going to uh simply update our bios to bios rision a30 using Dell's utility",
    "start": "2560319",
    "end": "2567160"
  },
  {
    "text": "which you can uh download uh from their",
    "start": "2567160",
    "end": "2572480"
  },
  {
    "text": "site uh bios Vision 830 at least at this time uh offered some uh security updates",
    "start": "2572880",
    "end": "2578720"
  },
  {
    "text": "of course if you have an e6400 you should listen to Rick and install bio Vision",
    "start": "2578720",
    "end": "2583960"
  },
  {
    "text": "a34 we're going to go through the uh update process and like I said we expect to see that the flea has",
    "start": "2583960",
    "end": "2590440"
  },
  {
    "text": "persisted into this new revision",
    "start": "2590440",
    "end": "2595440"
  },
  {
    "text": "and as you can see the flea has persisted tobios R Vision a30 it's a little bit dim there at the bottom",
    "start": "2628599",
    "end": "2637160"
  },
  {
    "text": "so I'm going to pass it over to zenova who's going to tell us how to combat these uh firmware",
    "start": "2640559",
    "end": "2648040"
  },
  {
    "text": "rootkits all right so um what we did then is you know we're defensive security researchers and we had some",
    "start": "2649520",
    "end": "2655040"
  },
  {
    "text": "previous work that we had done in Windows kernel uh trying to apply get better uh roots of trust so that we can",
    "start": "2655040",
    "end": "2662319"
  },
  {
    "text": "basically we're worried about these sort of attacks specifically where the software can lie and say that every is",
    "start": "2662319",
    "end": "2667520"
  },
  {
    "text": "good so first of all you should probably take down this uh bitly Link at the bottom um there's about 10 years of work",
    "start": "2667520",
    "end": "2675079"
  },
  {
    "text": "in the area that I'm going to describe and I'm not able to do it justice in the small amount of time that we have left",
    "start": "2675079",
    "end": "2680680"
  },
  {
    "text": "so um we put up a timeline there that talks about all the other uh work in this in this area but what we did is we",
    "start": "2680680",
    "end": "2687079"
  },
  {
    "text": "created a system we called bios chronomancy and what it is is timing based datastation or software based",
    "start": "2687079",
    "end": "2693160"
  },
  {
    "text": "datastation that's the terminology in the academic community and what this kind of software is trying to do is",
    "start": "2693160",
    "end": "2699079"
  },
  {
    "text": "you're building software with a very special construction where you're trying to say this software will tell me that",
    "start": "2699079",
    "end": "2705359"
  },
  {
    "text": "it is uncompromised and if someone has compromised and is making it lie it'll",
    "start": "2705359",
    "end": "2710480"
  },
  {
    "text": "take extra time to actually run so you're trying to build it specifically so that if it's manipulated if someone's",
    "start": "2710480",
    "end": "2716119"
  },
  {
    "text": "trying to put a hook into it but then they're cleaning up and making it look like it's not hooked it's going to take",
    "start": "2716119",
    "end": "2721319"
  },
  {
    "text": "additional time to run and this is the sort of timing side channel that we're purposely building into the software's",
    "start": "2721319",
    "end": "2726400"
  },
  {
    "text": "execution so um the BS Condy system is we're not trying to reimplement the entire static",
    "start": "2726400",
    "end": "2733480"
  },
  {
    "text": "root of trust for measurement we're not trying to measure the BIOS itself and then the option ROMs and then everything else we're just saying we want this",
    "start": "2733480",
    "end": "2740079"
  },
  {
    "text": "first root of trust we've got this mutable bios so we know an attacker can potentially get in here and modify it",
    "start": "2740079",
    "end": "2746640"
  },
  {
    "text": "and we want to have additional trust in this specific software so uh again",
    "start": "2746640",
    "end": "2751920"
  },
  {
    "text": "there's there's a lot of different assumptions with this you should see the previous related work and in our future paper on this to get them all but the",
    "start": "2751920",
    "end": "2758480"
  },
  {
    "text": "first assumption and we think this is what makes this this technique in general so appealing is you assume that",
    "start": "2758480",
    "end": "2763960"
  },
  {
    "text": "the attacker has full control of the system before you execute and even potentially while you're executing they",
    "start": "2763960",
    "end": "2769720"
  },
  {
    "text": "can do whatever they want before and during your execution but the intention is you build your software specifically",
    "start": "2769720",
    "end": "2776040"
  },
  {
    "text": "so that if they modify you while you're running you run slower um and then another thing a big",
    "start": "2776040",
    "end": "2781839"
  },
  {
    "text": "assumption here is that the code we've written is the most optimal way that we can check ourselves",
    "start": "2781839",
    "end": "2787440"
  },
  {
    "text": "so if an attacker can come in here and create a little better handc assembly and make it run a little faster he can",
    "start": "2787440",
    "end": "2793119"
  },
  {
    "text": "add an instruction which would normally slow it down but then he can combat that by optimizing some other instructions",
    "start": "2793119",
    "end": "2799000"
  },
  {
    "text": "which speeds it back up and then we don't detect any timing changes and similarly we have to make sure that deep",
    "start": "2799000",
    "end": "2804839"
  },
  {
    "text": "down at the microarchitectural level with all of the you know different alus and everything else that's available for",
    "start": "2804839",
    "end": "2810359"
  },
  {
    "text": "the processor we have to make sure there's no free slots where they can just add an instruction and because there's an idle you know subcomponent of",
    "start": "2810359",
    "end": "2816640"
  },
  {
    "text": "this CPU they can't just uh use that for free so all of this uh related work",
    "start": "2816640",
    "end": "2823640"
  },
  {
    "text": "fundamentally it breaks down to having these uh core premises first of all you're going to read your own code and",
    "start": "2823640",
    "end": "2829400"
  },
  {
    "text": "your own data so you're reading yourself in order to provide some evidence of control flow Integrity or code Integrity",
    "start": "2829400",
    "end": "2836240"
  },
  {
    "text": "so you want to make sure no one's put a jump instruction in your code to hook you like you know rot kits commonly do",
    "start": "2836240",
    "end": "2841559"
  },
  {
    "text": "on OS level software so you're reading your own code you're building a check sum over your own code and unlike things",
    "start": "2841559",
    "end": "2847599"
  },
  {
    "text": "like a malware where it's you know just trivially that malware will check some itself to look for an analyst putting a",
    "start": "2847599",
    "end": "2853480"
  },
  {
    "text": "break point in it um but we need to make sure that um that if we do this sort of",
    "start": "2853480",
    "end": "2859960"
  },
  {
    "text": "check summing that it's going to cause a difference in the timing execution which subsequently gets measured so then what",
    "start": "2859960",
    "end": "2867040"
  },
  {
    "text": "we do is we read the data pointer which is pointing at our own code and our own data we incorporate that into the checks",
    "start": "2867040",
    "end": "2873480"
  },
  {
    "text": "and the notion there is if the attacker takes our code and copies it off to a clean location so they've got a clean",
    "start": "2873480",
    "end": "2879200"
  },
  {
    "text": "copy of our code when we try to read our own stuff they point us at the clean copy well we incorporate the pointer",
    "start": "2879200",
    "end": "2885440"
  },
  {
    "text": "itself so they're pointing at some other copy they're not pointing back at our own thing at our own location where we know it should be they're pointing at a",
    "start": "2885440",
    "end": "2891960"
  },
  {
    "text": "different copy and so they need to modify the incorporation of the data pointer which means they need to do you know maybe an ADD and a subtract for",
    "start": "2891960",
    "end": "2898559"
  },
  {
    "text": "instance and those two extra instructions are then going to perturb the uh timing uh similarly instruction pointer",
    "start": "2898559",
    "end": "2905640"
  },
  {
    "text": "we're executing at a know location we're reading data from a known location if we incorporate those pointers and if the",
    "start": "2905640",
    "end": "2910839"
  },
  {
    "text": "attacker is pointing them to different execution location different data read location then uh they have to fix that",
    "start": "2910839",
    "end": "2917040"
  },
  {
    "text": "back up during the check Su some computation and that modifies it also unlike this sort of we don't want",
    "start": "2917040",
    "end": "2922319"
  },
  {
    "text": "trivial replays so there's not a fixed like here's our um single check sum",
    "start": "2922319",
    "end": "2928839"
  },
  {
    "text": "which proves that we're clean we use a nons in order to have freshness and make it so that you can't just keep replaying",
    "start": "2928839",
    "end": "2935200"
  },
  {
    "text": "yep I'm clean yep I'm clean and just a a plane replay attack like that it also helps prevent pre-computation attacks",
    "start": "2935200",
    "end": "2941280"
  },
  {
    "text": "where the attacker stores like every possible combination of challenge to response so with a big enough nons you",
    "start": "2941280",
    "end": "2946480"
  },
  {
    "text": "know they don't have enough RAM to to keep it around uh and then the important thing is all of this incorporation of data",
    "start": "2946480",
    "end": "2952880"
  },
  {
    "text": "into your self check sum you do it millions of times uh so that you're trying to make it so that if they add",
    "start": "2952880",
    "end": "2958240"
  },
  {
    "text": "even one instruction of overhead times millions of iterations that means millions of instructions of overhead so",
    "start": "2958240",
    "end": "2963720"
  },
  {
    "text": "this is what it would kind of look like as C pseudo code in reality it's always hand coded assembly because you have to have that optimality assumption but the",
    "start": "2963720",
    "end": "2971200"
  },
  {
    "text": "point is you know we're incorporating some of these things the nons the data pointer the data pointed to by the data",
    "start": "2971200",
    "end": "2977000"
  },
  {
    "text": "pointer the instruction pointer we're mixing it around and then uh we're doing this all in a while loop if the attacker",
    "start": "2977000",
    "end": "2983559"
  },
  {
    "text": "knows that he's compromised your data if he's modified your self-checking code and he wants to make it look like he",
    "start": "2983559",
    "end": "2989359"
  },
  {
    "text": "hasn't he needs to check are you is the good code about to read some bad data",
    "start": "2989359",
    "end": "2994799"
  },
  {
    "text": "and if so I'm going to give it the good data and that's basic if kind of",
    "start": "2994799",
    "end": "3000280"
  },
  {
    "text": "conditional but by adding an if conditional that's you know a couple of instructions extra that he has to do to",
    "start": "3000280",
    "end": "3005920"
  },
  {
    "text": "clean up this check sum and make sure the check sum is still correct and a couple instructions times millions of Loops equals millions of instructions of",
    "start": "3005920",
    "end": "3012359"
  },
  {
    "text": "overhead millions of instructions equals uh macroscopic timing difference so",
    "start": "3012359",
    "end": "3017559"
  },
  {
    "text": "overall this is what our protocol basically looks like uh we're down at the BIOS level we don't we unlike some",
    "start": "3017559",
    "end": "3023920"
  },
  {
    "text": "other things we can't necessarily get a challenge from a server so we're actually going to get our knots from the TPM we start out we request from the TPM",
    "start": "3023920",
    "end": "3031839"
  },
  {
    "text": "this special uh type of measurement called a tick stamp and all it really is is basically the TPM when it resets you",
    "start": "3031839",
    "end": "3038119"
  },
  {
    "text": "have a counter counting up it's a tick counter it's just like rdtsc on x86 except the big thing that the TPM gives",
    "start": "3038119",
    "end": "3044119"
  },
  {
    "text": "you is the TPM can give you a signed copy of that tick stamp so that you actually have some belief that this is",
    "start": "3044119",
    "end": "3050119"
  },
  {
    "text": "actually coming from the TPM that you've provisioned and you have the keys for and you can check the digital signatures and so forth so it sends back a time",
    "start": "3050119",
    "end": "3057440"
  },
  {
    "text": "stamp that's signed it also has a nons that's built into it the TPM makes a new nons every time the TPM resets you take",
    "start": "3057440",
    "end": "3064200"
  },
  {
    "text": "that you incorporate the data from the signature which is going to differ every time because of the different nons the TPM generates use that as the nons for",
    "start": "3064200",
    "end": "3071040"
  },
  {
    "text": "the self-checking algorithm and then you run your millions of iterations reading your own code and uh subsequently you",
    "start": "3071040",
    "end": "3078920"
  },
  {
    "text": "then ask the TPM what time is it now so basically we we kind of think of this like a trusted stopwatch you say TPM",
    "start": "3078920",
    "end": "3084880"
  },
  {
    "text": "what time is it now you run yourself self check which is specially designed so that it increases the amount of time",
    "start": "3084880",
    "end": "3090319"
  },
  {
    "text": "if an attacker is manipulating it and then you say TPM what time is it now and you've got your time one you've got your",
    "start": "3090319",
    "end": "3095680"
  },
  {
    "text": "time two so you've got the Delta time and subsequently you can U use that you say here's a given CPU here's it running",
    "start": "3095680",
    "end": "3101680"
  },
  {
    "text": "at a certain clock speed we know how much time this algorithm should take over this many iterations so you just send back to a",
    "start": "3101680",
    "end": "3108799"
  },
  {
    "text": "server to verify here's the tick stamp one tick stamp two and the self check sum and it can confirm that so we did a",
    "start": "3108799",
    "end": "3114839"
  },
  {
    "text": "bunch of experiments on this so you can our paper later for it but the key point is here is we took like 18 E64 hundreds",
    "start": "3114839",
    "end": "3122280"
  },
  {
    "text": "just to show that this works across many systems it's not just a one-time deal that we got to work on ours and the",
    "start": "3122280",
    "end": "3128040"
  },
  {
    "text": "basic Point here is without attacker it's low and with an attacker it's High um but back here the main point is if we",
    "start": "3128040",
    "end": "3134760"
  },
  {
    "text": "don't run enough iterations potentially we're on the boundary so at 625,000",
    "start": "3134760",
    "end": "3140000"
  },
  {
    "text": "iterations the attacker sometimes can get fast enough that his lower bound on his runtime is about the same as the",
    "start": "3140000",
    "end": "3146960"
  },
  {
    "text": "upper bound on the on the clean run time but uh this is pretty easily dealt with because what you're really dealing with",
    "start": "3146960",
    "end": "3152200"
  },
  {
    "text": "here is there's a percentage overhead that the attacker adds by adding a couple instructions is a couple percent",
    "start": "3152200",
    "end": "3159079"
  },
  {
    "text": "overhead so if you want a larger macroscopic difference for a small percentage overhead you just run it more",
    "start": "3159079",
    "end": "3164359"
  },
  {
    "text": "times and you get more difference so um you know pretty clear in all these cases",
    "start": "3164359",
    "end": "3169720"
  },
  {
    "text": "that uh we have easy detection of the attacker um that he's perturbing the timing so uh we know that this system",
    "start": "3169720",
    "end": "3177799"
  },
  {
    "text": "gives us you know under the academic sense of it it's a great thing because it's saying this code is unmodified we",
    "start": "3177799",
    "end": "3183119"
  },
  {
    "text": "can you know verify this and that's all good but uh what we found when we dug into this is we said well that's good",
    "start": "3183119",
    "end": "3189839"
  },
  {
    "text": "from the academic perspective but in the Practical perspective we want to you know stop attackers from being able to",
    "start": "3189839",
    "end": "3194960"
  },
  {
    "text": "to do bad things and kind of a big problem with this kind of technique is a talk to attack time of check time of use",
    "start": "3194960",
    "end": "3202040"
  },
  {
    "text": "so I check the system and it says yep the check sum is right the timing is write this code ran unmodified and",
    "start": "3202040",
    "end": "3208920"
  },
  {
    "text": "that's great that's a property which quite frankly we don't have for most any other security software out there that's",
    "start": "3208920",
    "end": "3214760"
  },
  {
    "text": "good property but it's not sufficient it's necessary but insufficient as the academics say uh the attacker can remove himself",
    "start": "3214760",
    "end": "3222319"
  },
  {
    "text": "from the system allow a measurement to proceed with a clean system and then you know reinstall himself after the checks",
    "start": "3222319",
    "end": "3229760"
  },
  {
    "text": "and so that's why you know this is kind of future work that we're working on right now we're branching out into the peripherals we know that there's been",
    "start": "3229760",
    "end": "3234880"
  },
  {
    "text": "plenty of work in the black ey Community with you know infecting Nick cards infecting keyboard controllers and so",
    "start": "3234880",
    "end": "3240640"
  },
  {
    "text": "forth so we're concerned about this kind of thing and we're working on that because fundamentally we think that if you can't stomp out this kind of attack",
    "start": "3240640",
    "end": "3247520"
  },
  {
    "text": "down at the BIOS level it's not going to be useful at other higher levels so the basic conclusions are um you know we",
    "start": "3247520",
    "end": "3254000"
  },
  {
    "text": "think you should assume attackers can get in we think that this sort of timing waste adastation system is built under that assumption so that's a good thing",
    "start": "3254000",
    "end": "3260880"
  },
  {
    "text": "uh you know Cory showed ways that you can get in uh Yuri showed ways that you can get in the attacker gets in we have",
    "start": "3260880",
    "end": "3266200"
  },
  {
    "text": "to work under that assumption um and then obviously bad things can happen because unfortunately",
    "start": "3266200",
    "end": "3271480"
  },
  {
    "text": "when we have these mutable roots of trust that becomes untrustworthy once it's it's mutable and an attacker can",
    "start": "3271480",
    "end": "3277240"
  },
  {
    "text": "get in so um so one of the things I forgot to put",
    "start": "3277240",
    "end": "3282520"
  },
  {
    "text": "on here but it was in the sort of uh in the summary so Rick mentioned how they",
    "start": "3282520",
    "end": "3287599"
  },
  {
    "text": "started um applying the nist 800 d147 guidance that's saying you know apply things like signed updates and so forth",
    "start": "3287599",
    "end": "3293960"
  },
  {
    "text": "and they did that they locked down the flash chip they applied signed updates and that increases the security so going",
    "start": "3293960",
    "end": "3299280"
  },
  {
    "text": "beyond that part of our point of showing the flea was to say signed updates is again necessary but not sufficient",
    "start": "3299280",
    "end": "3305480"
  },
  {
    "text": "because if an attacker is in there before uh the signed updates are applied he can just keep bouncing his way across",
    "start": "3305480",
    "end": "3311119"
  },
  {
    "text": "new signed updates being applied and similarly you can have signed updates but an attacker can exploit and get",
    "start": "3311119",
    "end": "3316160"
  },
  {
    "text": "their way in so uh there's further nist guidance there's the nist 800 d155 which",
    "start": "3316160",
    "end": "3322440"
  },
  {
    "text": "is targeted at at vendors basically saying here's the type of stuff we think think you need to actually measure uh in",
    "start": "3322440",
    "end": "3328160"
  },
  {
    "text": "order to provide a good root of trust and as trusted Computing researchers that's the kind of stuff we care about",
    "start": "3328160",
    "end": "3334319"
  },
  {
    "text": "but uh fundamentally uh as as we've mentioned a couple of times the the core problem here is that your core root of",
    "start": "3334319",
    "end": "3339760"
  },
  {
    "text": "trust is mutable and if it's mutable then somehow some way we assume that the",
    "start": "3339760",
    "end": "3345599"
  },
  {
    "text": "attacker is going to be able to get in and they can subvert your root of trust all right so the one last thing",
    "start": "3345599",
    "end": "3352400"
  },
  {
    "text": "that we have to say there was like a question in Yuri's talk about you know what's the prevalence of biosi configurations we've actually that",
    "start": "3352400",
    "end": "3358640"
  },
  {
    "text": "should be uh that should be live now and we're we released a tool called",
    "start": "3358640",
    "end": "3364319"
  },
  {
    "text": "Cernic's and what it does is it tells us about things like misconfigurations in the biocurity so if you've got a bios",
    "start": "3364319",
    "end": "3372520"
  },
  {
    "text": "that's not locking down the flash chip Copernicus will tell you that it'll say bios it gives us simple things like is",
    "start": "3372520",
    "end": "3378559"
  },
  {
    "text": "smm writable is smm locked or unlocked is bios locked or unlocked and so we've",
    "start": "3378559",
    "end": "3384079"
  },
  {
    "text": "released the binary so you can just uh go play with this and see on your own machine are you vulnerable to a trivial",
    "start": "3384079",
    "end": "3389880"
  },
  {
    "text": "wiping of your bios can it be trivially bricked also uh we care about this for doing analysis of the systems so",
    "start": "3389880",
    "end": "3396720"
  },
  {
    "text": "Cernic's gives us a bios flash dump and then from there you can you know as we",
    "start": "3396720",
    "end": "3402160"
  },
  {
    "text": "kind of talked about there's problems with pcrs and that you get a hash but then the question is if you've got your nice trust Computing system and uh",
    "start": "3402160",
    "end": "3409319"
  },
  {
    "text": "hashes differed then what right what are you going to do if someone tells you the hash of your bios is not what it should",
    "start": "3409319",
    "end": "3415119"
  },
  {
    "text": "be so cernic gives you the ability to like dump the H dump the flash chip and go ahead and start looking at it look at",
    "start": "3415119",
    "end": "3421359"
  },
  {
    "text": "a clean one look at a dirty one diff it throw it in Ida and uh that's exactly the kind of stuff we do so um you know",
    "start": "3421359",
    "end": "3428839"
  },
  {
    "text": "miter works for for the government so for anyone here who's a Fed uh basically",
    "start": "3428839",
    "end": "3434440"
  },
  {
    "text": "uh we're interested in doing uh deployments Pilots within your environment so you can check you know how many of your machines are actually",
    "start": "3434440",
    "end": "3441039"
  },
  {
    "text": "uh vulnerable to trivial bricking uh and also you know check pull back the biosis and say we have you know this is what we",
    "start": "3441039",
    "end": "3447039"
  },
  {
    "text": "think the Dell golden image for a flash chip should look like on an e6400 or newer things but if you don't have that",
    "start": "3447039",
    "end": "3454039"
  },
  {
    "text": "we'd like to you know actually Analyze That and find out why uh additionally in miters not prer profit company we don't",
    "start": "3454039",
    "end": "3460599"
  },
  {
    "text": "make uh cot software the best we've found out the hard way we don't like to run science projects for many years at a",
    "start": "3460599",
    "end": "3466880"
  },
  {
    "text": "time so kind of this capability needs to be incorporated into commercial products and uh we're licensing this and it's",
    "start": "3466880",
    "end": "3473680"
  },
  {
    "text": "very easy license because fundamentally we're going to be licensing it as data for code so you give us data about how",
    "start": "3473680",
    "end": "3480440"
  },
  {
    "text": "many machines you've seen vulnerable we incorporate that into our next paper which Again part of the reason for",
    "start": "3480440",
    "end": "3485480"
  },
  {
    "text": "releasing the binary is we'd like people to go check your own machines and then tell us you know I've got this model and",
    "start": "3485480",
    "end": "3490760"
  },
  {
    "text": "it's vulnerable so our next paper is going to be basically how prevalent is this in the wild what percentage of",
    "start": "3490760",
    "end": "3496400"
  },
  {
    "text": "machines are trivially writable what percentage have TPMS what percentage have them on all the sort of things",
    "start": "3496400",
    "end": "3502200"
  },
  {
    "text": "which vendors do better than other vendors you know so if you care about this thing and you're doing purchasing",
    "start": "3502200",
    "end": "3507240"
  },
  {
    "text": "um you want to know which ones are actually locked down so uh so we're looking to license this to cots and do U",
    "start": "3507240",
    "end": "3513720"
  },
  {
    "text": "um piloting in government in particular but we're also open to doing it for U",
    "start": "3513720",
    "end": "3518880"
  },
  {
    "text": "for um just general people who are interested in finding out about their biocurity because it helps our our",
    "start": "3518880",
    "end": "3524599"
  },
  {
    "text": "ongoing research so unfortunately uh you know we we jammed packed it with like three talks worth of material so we",
    "start": "3524599",
    "end": "3530640"
  },
  {
    "text": "don't have a lot of time for questions uh I see people queuing up at the back so uh we won't take them up here we'll",
    "start": "3530640",
    "end": "3536319"
  },
  {
    "text": "go right out there and right to the uh to the right there's a little area that you can ask us questions but our two",
    "start": "3536319",
    "end": "3542599"
  },
  {
    "text": "last things that we're going to pimp here is uh Cory's open TPM if you want to start playing with the TPM he's",
    "start": "3542599",
    "end": "3548160"
  },
  {
    "text": "provided open source tools that you can do that and then finally um open securitytraining doino we've got classes",
    "start": "3548160",
    "end": "3554640"
  },
  {
    "text": "on TPM so you can learn about it we've got classes on idpr and reverse engineering so you can learn about that and John's going to be making a class on",
    "start": "3554640",
    "end": "3560760"
  },
  {
    "text": "bios so you can learn more about that so with that thank you",
    "start": "3560760",
    "end": "3566720"
  }
]