[
  {
    "text": "[Music]",
    "start": "3630",
    "end": "28720"
  },
  {
    "text": "want to turn it on introduction to what is e re why is it cool why you know why",
    "start": "28720",
    "end": "34360"
  },
  {
    "text": "is it significant and also some background on exploitation and return addresses then I'm going to talk about",
    "start": "34360",
    "end": "40160"
  },
  {
    "text": "the uh internals uh like how the arithmetic works and um how the emulation core works and last but",
    "start": "40160",
    "end": "46879"
  },
  {
    "text": "definitely not least Yugi is going to provide a very cool demonstration and some stats on you know why e re's cool",
    "start": "46879",
    "end": "54520"
  },
  {
    "text": "but first here's Ryan with the weather",
    "start": "54520",
    "end": "58960"
  },
  {
    "text": "good morning uh today um I'm going to kind of give an introduction to uh the",
    "start": "63320",
    "end": "69000"
  },
  {
    "text": "technology that we're going to be demonstrating here uh the the technology is called E re uh specifically it deals",
    "start": "69000",
    "end": "76759"
  },
  {
    "text": "with return addresses now return addresses only have an importance in the",
    "start": "76759",
    "end": "83600"
  },
  {
    "text": "context of exploitation so uh although this talk is",
    "start": "83600",
    "end": "88799"
  },
  {
    "text": "not really about EXP exploitation uh we need to get a a couple of uh terms out",
    "start": "88799",
    "end": "94079"
  },
  {
    "text": "of the way here in the context that we're talking about uh an exploit is any",
    "start": "94079",
    "end": "99840"
  },
  {
    "text": "attack that will specifically uh take control of EIP on a",
    "start": "99840",
    "end": "106240"
  },
  {
    "text": "processor uh these types of attacks can include buffer overflows uh format",
    "start": "106240",
    "end": "112000"
  },
  {
    "text": "string attacks uh function porn or overwrites basically any type of attack",
    "start": "112000",
    "end": "117200"
  },
  {
    "text": "that will give you control over EIP now traditionally any good attacker",
    "start": "117200",
    "end": "123880"
  },
  {
    "text": "is going to use this control over EIP to execute their supplied code in in this context there becomes an",
    "start": "123880",
    "end": "132040"
  },
  {
    "text": "issue of how do I get control over EIP to my supplied",
    "start": "132040",
    "end": "137360"
  },
  {
    "text": "code uh in this system here uh we're considering a return address any way",
    "start": "137360",
    "end": "145160"
  },
  {
    "text": "when loaded into EIP will result in executing our uh return code what it's",
    "start": "145160",
    "end": "152560"
  },
  {
    "text": "uh if you could imagine for a moment a a a treasure map uh where the code that",
    "start": "152560",
    "end": "158680"
  },
  {
    "text": "you want to be executed is a big red x uh the return address would be the path",
    "start": "158680",
    "end": "164280"
  },
  {
    "text": "that wound around to get to that X you could uh almost say that exploit marks",
    "start": "164280",
    "end": "170319"
  },
  {
    "text": "the spot um silly Jokes Aside um basically uh in",
    "start": "170319",
    "end": "177319"
  },
  {
    "text": "this talk um as I said the this affects any type of uh attack that will uh go",
    "start": "177319",
    "end": "183680"
  },
  {
    "text": "out and uh take control of VIP in our examples we're going to uh primarily be focusing on uh buffer",
    "start": "183680",
    "end": "191440"
  },
  {
    "text": "overflow type attacks simply because they're widely known they're very simple to explain and most people by now have a",
    "start": "191440",
    "end": "198480"
  },
  {
    "text": "pretty solid understanding of them so in that vein we're going to kind of quick go over this and I'm going to",
    "start": "198480",
    "end": "204200"
  },
  {
    "text": "graphically show kind of where return addresses fit into the whole scenario",
    "start": "204200",
    "end": "210360"
  },
  {
    "text": "um so you have a buffer over uh o overflow attack um where you have a stack buffer",
    "start": "210360",
    "end": "218280"
  },
  {
    "text": "and you're copying your data in and uh you go right up to EIP and then right",
    "start": "218280",
    "end": "224239"
  },
  {
    "text": "over uh the point right here that's considered our EIP would be the place",
    "start": "224239",
    "end": "230799"
  },
  {
    "text": "where we place our return address now as I said before any competent attacker will use this",
    "start": "230799",
    "end": "237159"
  },
  {
    "text": "to put a payload there and Ute our payload uh there are several ways that",
    "start": "237159",
    "end": "242360"
  },
  {
    "text": "are going on on this and uh we will go into them here so in the in the past um",
    "start": "242360",
    "end": "249120"
  },
  {
    "text": "there have been various types of return addresses that have been given um the most simplistic uh is a static address",
    "start": "249120",
    "end": "256600"
  },
  {
    "text": "that you overwrite uh the savp with that will Point directly into your",
    "start": "256600",
    "end": "262800"
  },
  {
    "text": "buffer this uh type of attack has found widespread use in uh many local Unix and",
    "start": "262800",
    "end": "269280"
  },
  {
    "text": "even some remote Unix applications uh due to some specifics in the Unix deck",
    "start": "269280",
    "end": "274919"
  },
  {
    "text": "that I'll explain shortly uh the the determinant on this is that you must",
    "start": "274919",
    "end": "280120"
  },
  {
    "text": "know where your buffer uh your payload buffer is going to be located in the",
    "start": "280120",
    "end": "286039"
  },
  {
    "text": "process memory space before you operate uh this is a a sort of unrealistic",
    "start": "286039",
    "end": "292000"
  },
  {
    "text": "expectation in a lot of cases uh and we'll go into that now here um basically",
    "start": "292000",
    "end": "299320"
  },
  {
    "text": "Trad additional Unix Stacks start at the uh at a pre uh determined address space",
    "start": "299320",
    "end": "305199"
  },
  {
    "text": "at the top of the userland addressable memory space what this means is that uh",
    "start": "305199",
    "end": "311639"
  },
  {
    "text": "your local Unix uh uh seid rout program uh when you start it the Stack's always",
    "start": "311639",
    "end": "317039"
  },
  {
    "text": "going to be at the same place um because you're overflowing at the same place every time you run it your stack pointer",
    "start": "317039",
    "end": "323840"
  },
  {
    "text": "is basically going to look pretty much the same um when you uh when you decide",
    "start": "323840",
    "end": "329280"
  },
  {
    "text": "to put uh your buffer in memory you can look at using a GDB uh and locate the",
    "start": "329280",
    "end": "337080"
  },
  {
    "text": "exact address plug it into your exploit and jump directly into your",
    "start": "337080",
    "end": "342880"
  },
  {
    "text": "code in the situation where there is some variants you can use a technique called knop sledding uh which pads the",
    "start": "342880",
    "end": "350680"
  },
  {
    "text": "size of your buffer so that you don't need an exact guess and just a a good scientific guest will get you somewhere",
    "start": "350680",
    "end": "357880"
  },
  {
    "text": "in your buffer where you're not sled which is basically any type of uh",
    "start": "357880",
    "end": "363680"
  },
  {
    "text": "instruction that will not affect the execution of your actual payload um say",
    "start": "363680",
    "end": "368800"
  },
  {
    "text": "an Inc ebx deck ebx pair uh can be repeated and slid right into your code",
    "start": "368800",
    "end": "375240"
  },
  {
    "text": "uh that that gives you a little bit of leeway now comes the windows Stacks uh",
    "start": "375240",
    "end": "380400"
  },
  {
    "text": "the the windows stack layout um is significantly different from Unix uh",
    "start": "380400",
    "end": "388160"
  },
  {
    "text": "primarily uh every thread that starts has a dynamically allocated stack this",
    "start": "388160",
    "end": "394880"
  },
  {
    "text": "becomes a problem in that you do not know when uh uh where specifically in",
    "start": "394880",
    "end": "401160"
  },
  {
    "text": "the process space the stack that you're going to be attacking is going to be located um there there's also the the",
    "start": "401160",
    "end": "407919"
  },
  {
    "text": "addition of the fact that Windows typically uses several threads within a",
    "start": "407919",
    "end": "413560"
  },
  {
    "text": "context of execution making it that shift even more apparent the final part",
    "start": "413560",
    "end": "419639"
  },
  {
    "text": "that really kind of bugs exploiters on on using static addresses in window",
    "start": "419639",
    "end": "424759"
  },
  {
    "text": "Stacks is that traditionally uh the stack will be based at uh uh",
    "start": "424759",
    "end": "431879"
  },
  {
    "text": "0x00 something um meaning that there's by default a null in your uh stack space",
    "start": "431879",
    "end": "439280"
  },
  {
    "text": "now this can be a real problem especially when you're talking about uh doing a traditional string based buffer",
    "start": "439280",
    "end": "446080"
  },
  {
    "text": "overflow so um on the side here we we also have heaps uh and heaps are by",
    "start": "446080",
    "end": "453680"
  },
  {
    "text": "definition uh blocks are allocated as they're needed meaning that it's very",
    "start": "453680",
    "end": "458759"
  },
  {
    "text": "very unlikely on both Unix and windows that you're going to be able to guess uh",
    "start": "458759",
    "end": "464080"
  },
  {
    "text": "before running a program where your HEAP is uh these problems are really going to cause a lot of trouble in using static",
    "start": "464080",
    "end": "470800"
  },
  {
    "text": "addresses and that makes this uh older technique not nearly as",
    "start": "470800",
    "end": "476639"
  },
  {
    "text": "effective um in uh using uh return addresses as it once was um some smart",
    "start": "476639",
    "end": "484199"
  },
  {
    "text": "attackers uh realized that by uh looking at the context section of uh a debugger",
    "start": "484199",
    "end": "491639"
  },
  {
    "text": "uh looking at the various Registries or uh registers rather um and what's in the",
    "start": "491639",
    "end": "497159"
  },
  {
    "text": "stack that you found pointers to your code for instance",
    "start": "497159",
    "end": "502560"
  },
  {
    "text": "on a successful buffer overflow crash when EIP points off to somewhere in memory say 41 41 41 41 you notice that",
    "start": "502560",
    "end": "511800"
  },
  {
    "text": "ESP at the point of Crash points directly into your code um so the",
    "start": "511800",
    "end": "517159"
  },
  {
    "text": "problem becomes how do I get ESP uh to execute uh we have to transfer",
    "start": "517159",
    "end": "523839"
  },
  {
    "text": "we have to load the value in ESP into EIP that kind of brings us up to the",
    "start": "523839",
    "end": "530160"
  },
  {
    "text": "state of uh the current technology and return addresses what we have is uh",
    "start": "530160",
    "end": "537320"
  },
  {
    "text": "several different programs out there that are collectively known as like jump finders um they they share a lot in",
    "start": "537320",
    "end": "544560"
  },
  {
    "text": "common um and there are several different variations that have uh uh",
    "start": "544560",
    "end": "549880"
  },
  {
    "text": "different uh codes that they're looking for or different ways of going about it but in the generic sense they basically",
    "start": "549880",
    "end": "558079"
  },
  {
    "text": "will load either a dll um or a series of dlls from a process space into memory uh",
    "start": "558079",
    "end": "566279"
  },
  {
    "text": "or conversely they will attach to a running process using a debugger uh and",
    "start": "566279",
    "end": "571560"
  },
  {
    "text": "look at the existing memory in this context the traditional way of doing it",
    "start": "571560",
    "end": "576680"
  },
  {
    "text": "is to scan for bite sequences that correspond to various op codes now these",
    "start": "576680",
    "end": "583079"
  },
  {
    "text": "op codes can do things such as uh the three most common uh as you can see are",
    "start": "583079",
    "end": "589519"
  },
  {
    "text": "to call into your register for instance call ESP that will transport uh that",
    "start": "589519",
    "end": "595079"
  },
  {
    "text": "will change EIP to the value inside of ESP giving you access to your code",
    "start": "595079",
    "end": "600800"
  },
  {
    "text": "another is to jump directly to the register and the final most common would",
    "start": "600800",
    "end": "607040"
  },
  {
    "text": "be to uh to push the register onto the stack and then to issue a return which",
    "start": "607040",
    "end": "613040"
  },
  {
    "text": "will load it off of the stack into EIP there's uh a a a lot of really good",
    "start": "613040",
    "end": "620040"
  },
  {
    "text": "stuff out there right now to find simple instruction sequences like this across",
    "start": "620040",
    "end": "625519"
  },
  {
    "text": "various databases uh for instance uh the metas uh return address database uh",
    "start": "625519",
    "end": "631760"
  },
  {
    "text": "tracks several Windows dlls across various Service Pack versions and can",
    "start": "631760",
    "end": "637519"
  },
  {
    "text": "give you at at with a couple simple clicks the ability to find uh a return",
    "start": "637519",
    "end": "643560"
  },
  {
    "text": "address that's appropriate for your context now as you notice I said across several different Service Pack",
    "start": "643560",
    "end": "649920"
  },
  {
    "text": "levels this becomes a real problem in uh the current way of doing uh uh return",
    "start": "649920",
    "end": "656880"
  },
  {
    "text": "addresses is that as levels on code",
    "start": "656880",
    "end": "662120"
  },
  {
    "text": "change uh the return addresses no longer become valid uh what happens is an A A",
    "start": "662120",
    "end": "668600"
  },
  {
    "text": "vulnerability may exist across uh several different service packs however",
    "start": "668600",
    "end": "673720"
  },
  {
    "text": "it becomes very difficult to find a reliable return address that comes across uh each one of them uh to find a",
    "start": "673720",
    "end": "682480"
  },
  {
    "text": "return address that uh that is universal across all of them requires sort of uh",
    "start": "682480",
    "end": "688920"
  },
  {
    "text": "either holding on to uh a piece of code that did not change between versions or",
    "start": "688920",
    "end": "694600"
  },
  {
    "text": "locating a specific address that when executed will continuously lead it may",
    "start": "694600",
    "end": "700920"
  },
  {
    "text": "be different code but it may not be significantly different enough or that all paths may still actually achieve to",
    "start": "700920",
    "end": "708680"
  },
  {
    "text": "the return address so in the Quest for Universal return addresses um I'd like",
    "start": "708680",
    "end": "714720"
  },
  {
    "text": "to introduce e re as a new way of achieving this goal",
    "start": "714720",
    "end": "720440"
  },
  {
    "text": "go um e re is the EI emulating return",
    "start": "720440",
    "end": "725800"
  },
  {
    "text": "address purveyor um a as as its name implies it is an emulator uh and we'll",
    "start": "725800",
    "end": "733000"
  },
  {
    "text": "go into that in a little bit more um it it's got a lot in common with the current uh Contex or uh the current uh",
    "start": "733000",
    "end": "741519"
  },
  {
    "text": "Harvest of uh jump finders uh the purpose of course is to find return",
    "start": "741519",
    "end": "747079"
  },
  {
    "text": "addresses um we're hoping to to find more than anybody else uh for a better",
    "start": "747079",
    "end": "752880"
  },
  {
    "text": "chance of C uh finding cross patch level uh correspondences giving us more",
    "start": "752880",
    "end": "758480"
  },
  {
    "text": "Universal offsets um like many other uh jump finders uh we operate on the context of",
    "start": "758480",
    "end": "767120"
  },
  {
    "text": "the crash uh if ESP is pointed to your code we need to know that because that's another way to get to your code if ebx",
    "start": "767120",
    "end": "774480"
  },
  {
    "text": "is pointing to your code minus 4 that's also very useful so unlike uh",
    "start": "774480",
    "end": "779920"
  },
  {
    "text": "traditional esps we're not specifically tying oursel down to one path to the",
    "start": "779920",
    "end": "784959"
  },
  {
    "text": "code um also very similar to existing uh systems we're looking at the real world",
    "start": "784959",
    "end": "792440"
  },
  {
    "text": "example of what's actually loaded into that process um we have a companion tool with e re uh called",
    "start": "792440",
    "end": "799880"
  },
  {
    "text": "pnap uh that will create a complete dump of the memory space uh it can also be uh",
    "start": "799880",
    "end": "807120"
  },
  {
    "text": "ran in a way where it will uh create specific uh chosen segments of the",
    "start": "807120",
    "end": "814399"
  },
  {
    "text": "memory space for instance if you choose to do uh only code sections uh that are",
    "start": "814399",
    "end": "820040"
  },
  {
    "text": "readon uh which would tra uh traditionally map to the dlls that are loaded um it gives you a lot of",
    "start": "820040",
    "end": "826720"
  },
  {
    "text": "flexibility in what areas you're willing to look for a return address",
    "start": "826720",
    "end": "832000"
  },
  {
    "text": "in um the the main difference between eere and any other uh Solution on the",
    "start": "832000",
    "end": "838120"
  },
  {
    "text": "market right now is of course that it's an emulator um much like emulators such as",
    "start": "838120",
    "end": "844839"
  },
  {
    "text": "VMware or the the box project which is an open source uh x86 emulator it models",
    "start": "844839",
    "end": "853199"
  },
  {
    "text": "the the x86 instruction set um we're not actually operating on the processor but",
    "start": "853199",
    "end": "859079"
  },
  {
    "text": "on our model we introduced some differences that nobody else does uh such as",
    "start": "859079",
    "end": "864120"
  },
  {
    "text": "non-determinism and Abstract memory spaces which Derek will get into uh more",
    "start": "864120",
    "end": "869279"
  },
  {
    "text": "as he shows the internals um but we have uh a context which comprises the entire",
    "start": "869279",
    "end": "877160"
  },
  {
    "text": "register space we have a virtual memory system that emulates uh accesses to and",
    "start": "877160",
    "end": "882560"
  },
  {
    "text": "from memory uh such as an x86 processor would do um the key Point uh and",
    "start": "882560",
    "end": "888959"
  },
  {
    "text": "difference is is that we're no longer doing Simple bite searches um a jump ESP",
    "start": "888959",
    "end": "894519"
  },
  {
    "text": "is a jump ESP is a jump ESP but searching for it will only find",
    "start": "894519",
    "end": "900720"
  },
  {
    "text": "individual instances um if by emulating we can find any complex code path that",
    "start": "900720",
    "end": "907880"
  },
  {
    "text": "will actually take us directly to our code um",
    "start": "907880",
    "end": "914040"
  },
  {
    "text": "basically the the process is um using the context the process snapshot and",
    "start": "914040",
    "end": "920560"
  },
  {
    "text": "user defined limitations um that we cons uh that we call Craigs uh uh candidate",
    "start": "920560",
    "end": "927079"
  },
  {
    "text": "return address generators um we can set up a series of return addresses that are",
    "start": "927079",
    "end": "933920"
  },
  {
    "text": "potential candidates uh and then emulate through each individual one of those uh",
    "start": "933920",
    "end": "939839"
  },
  {
    "text": "and find uh obviously once execution EIP lands in our Target buffer we are",
    "start": "939839",
    "end": "948560"
  },
  {
    "text": "upet the advantages uh of this methodology over any existing methodology are uh we have several um uh",
    "start": "949639",
    "end": "959160"
  },
  {
    "text": "we're not looking for simple instructions uh uh if for instance a a push R uh and we'll show an example of",
    "start": "959160",
    "end": "966480"
  },
  {
    "text": "this uh soon um is separated uh a simple bik code uh uh operation is not going to",
    "start": "966480",
    "end": "973319"
  },
  {
    "text": "find it um in our testing uh We've set thresholds on the number of instructions",
    "start": "973319",
    "end": "979880"
  },
  {
    "text": "that will consider an emulation chain uh up to 100 and we found sequences of up",
    "start": "979880",
    "end": "986000"
  },
  {
    "text": "to 91 bytes or rather 91 instructions that will when executed always take you",
    "start": "986000",
    "end": "993519"
  },
  {
    "text": "to your target buffer uh that will give potentially significant better numbers",
    "start": "993519",
    "end": "999560"
  },
  {
    "text": "of results as well as giving you potentially different quality of results um in in addition to this uh we",
    "start": "999560",
    "end": "1008680"
  },
  {
    "text": "will find every s uh simple instruction uh because it will emulate out to uh the",
    "start": "1008680",
    "end": "1014319"
  },
  {
    "text": "code port or the code point that we're looking for um",
    "start": "1014319",
    "end": "1019440"
  },
  {
    "text": "basically in this situation we will find uh within the context of uh what we have",
    "start": "1019440",
    "end": "1027199"
  },
  {
    "text": "every viable path to the return address we do have some exceptions where",
    "start": "1027199",
    "end": "1032798"
  },
  {
    "text": "there are some instructions that we don't uh uh emulate such as like MMX or",
    "start": "1032799",
    "end": "1038480"
  },
  {
    "text": "uh Advanced processor instructions we kind of stuck to the basic x86 uh",
    "start": "1038480",
    "end": "1043720"
  },
  {
    "text": "instruction set but uh those uh will be covered in our to-do we're uh they're on",
    "start": "1043720",
    "end": "1049320"
  },
  {
    "text": "the Slate um the the whole bottom line in this is that we we're kind of looking for a bunch of different possibilities",
    "start": "1049320",
    "end": "1057080"
  },
  {
    "text": "uh we figured that more choice is better than less Choice uh and when you can come up with significantly more",
    "start": "1057080",
    "end": "1063679"
  },
  {
    "text": "possibilities you're going to have more potential matches between uh service pack one and Service Pack",
    "start": "1063679",
    "end": "1070360"
  },
  {
    "text": "two um in this there's also the possibility of uh say you you need",
    "start": "1070360",
    "end": "1077159"
  },
  {
    "text": "specifically only asky character return addresses when you have more of them you",
    "start": "1077159",
    "end": "1082480"
  },
  {
    "text": "have more possibility of actually finding a specific asky code or Unicode type of uh address and our uh our Craig",
    "start": "1082480",
    "end": "1089960"
  },
  {
    "text": "section uh that Derek will explain is the way that we put limitations on",
    "start": "1089960",
    "end": "1095200"
  },
  {
    "text": "that so in in the bottom um we uh by using non-determinism and uh and",
    "start": "1095200",
    "end": "1103080"
  },
  {
    "text": "trimming execution paths that we can't determine as exact matches to your query",
    "start": "1103080",
    "end": "1110720"
  },
  {
    "text": "um we feel that we're getting real world results uh that will trim down all the",
    "start": "1110720",
    "end": "1117080"
  },
  {
    "text": "maybe and if this is set type of uh situations um uh giving you just good",
    "start": "1117080",
    "end": "1123840"
  },
  {
    "text": "solid return addresses that will work uh across the board uh by emulating each",
    "start": "1123840",
    "end": "1130039"
  },
  {
    "text": "candidate um we have a potentially theoretically ideal solution uh with the",
    "start": "1130039",
    "end": "1137840"
  },
  {
    "text": "exception of instructions that aren't uh set and a definition of our context um",
    "start": "1137840",
    "end": "1144760"
  },
  {
    "text": "because of the memory space abstraction we're kind of forgoing the specifics of",
    "start": "1144760",
    "end": "1152000"
  },
  {
    "text": "what's in a stack and where is located in memory so there are potential point in time return addresses that e re will",
    "start": "1152000",
    "end": "1158919"
  },
  {
    "text": "not find those are outside the scope and because they are point in time they're not going to necessarily be effective",
    "start": "1158919",
    "end": "1165440"
  },
  {
    "text": "from one point to the next uh and with that I would like to to pass the torch",
    "start": "1165440",
    "end": "1171120"
  },
  {
    "text": "on here to Derek uh so he can show you some of the deep dark secrets in the E",
    "start": "1171120",
    "end": "1176400"
  },
  {
    "text": "reap Magical Mystery Tour D cool so yeah um so as it turns out e",
    "start": "1176400",
    "end": "1184400"
  },
  {
    "text": "is a little bit magical and a little bit mysterious and uh we're going to try and demystify it here e is a uh an Intel",
    "start": "1184400",
    "end": "1191960"
  },
  {
    "text": "32-bit machine code emulator that supports non-determinism which again is partially and wholly undefined values",
    "start": "1191960",
    "end": "1199120"
  },
  {
    "text": "and it also supports abstract memory regions which is important for memory regions that may move around across",
    "start": "1199120",
    "end": "1204400"
  },
  {
    "text": "multiple executions of a single version of a process um these two advantages are",
    "start": "1204400",
    "end": "1209840"
  },
  {
    "text": "important because um excuse me um where did I go these two advantages are",
    "start": "1209840",
    "end": "1216440"
  },
  {
    "text": "important because U there are certain factors that you know are unknowable or",
    "start": "1216440",
    "end": "1221880"
  },
  {
    "text": "um unpredictable and this will allow the user to compensate for them when searching for more return addresses uh e",
    "start": "1221880",
    "end": "1229200"
  },
  {
    "text": "accepts a state from the user um I'll talk about what I mean by state in the next slide and it emulates at each",
    "start": "1229200",
    "end": "1235360"
  },
  {
    "text": "candidate return address to figure out which ones um host or begin a code path",
    "start": "1235360",
    "end": "1240960"
  },
  {
    "text": "that will lead to your target buffer and which ones won't um let's see the basic purpose of",
    "start": "1240960",
    "end": "1248120"
  },
  {
    "text": "ere I mean actually the fundamental purpose is to find every start address that leads to a code path that will lead",
    "start": "1248120",
    "end": "1254480"
  },
  {
    "text": "to your arbitrary code oh yeah I should also mention uh",
    "start": "1254480",
    "end": "1260120"
  },
  {
    "text": "Craig as Ryan mentioned is our context return address generator and it allows the user to further narrow down this",
    "start": "1260120",
    "end": "1265600"
  },
  {
    "text": "list of candidate addresses both by ranges like say if there are only certain modules you're interested in",
    "start": "1265600",
    "end": "1270840"
  },
  {
    "text": "looking at or code sections of those modules and also character Maps um by character maps I mean for",
    "start": "1270840",
    "end": "1278559"
  },
  {
    "text": "each bite position each of the four bite positions of the return address you can set a list of characters that are valid",
    "start": "1278559",
    "end": "1285039"
  },
  {
    "text": "this will allow you to do things like askie for the low three bytes and then ask plus null for the high bite alpha",
    "start": "1285039",
    "end": "1290840"
  },
  {
    "text": "numeric Alpha Unicode you name it we'll get to that in a minute now the state consists of a",
    "start": "1290840",
    "end": "1298080"
  },
  {
    "text": "process memory snapshot which is just like a memory dump plus you know page permissions and whatnot um it's pretty",
    "start": "1298080",
    "end": "1304240"
  },
  {
    "text": "simple uh format and also a contact uh excuse me context that specifies which",
    "start": "1304240",
    "end": "1311720"
  },
  {
    "text": "registers and which memory locations contain what data um rule number one is that a path from the registers to to the",
    "start": "1311720",
    "end": "1319320"
  },
  {
    "text": "um to the Target buffer must exist this path can be very indirect um like for",
    "start": "1319320",
    "end": "1325200"
  },
  {
    "text": "instance um ESP will hopefully always Point onto the stack so contents of Stack memory for all practical purposes",
    "start": "1325200",
    "end": "1331480"
  },
  {
    "text": "can be considered a first top in a way also um hard-coded addresses like if there's a specific say you",
    "start": "1331480",
    "end": "1338720"
  },
  {
    "text": "know variable in a global like data section of a dll you know that could also be a first top if you can find an",
    "start": "1338720",
    "end": "1345360"
  },
  {
    "text": "instruction that will uh reference that memory um of course the context requires",
    "start": "1345360",
    "end": "1350679"
  },
  {
    "text": "user observation to construct um it requires the user to look at the environment of the process at the exact",
    "start": "1350679",
    "end": "1356840"
  },
  {
    "text": "pivotal moment that execution will be transferred um eugi will demonstrate",
    "start": "1356840",
    "end": "1362240"
  },
  {
    "text": "this don't worry and um uh jot down you know kind of what things seem to be consistent what things",
    "start": "1362240",
    "end": "1368760"
  },
  {
    "text": "seem to be kind of variable and also abstract memory regions like you know",
    "start": "1368760",
    "end": "1373799"
  },
  {
    "text": "okay here is a stack you know I can identify this as a stack I don't always know what it's going to be",
    "start": "1373799",
    "end": "1379200"
  },
  {
    "text": "but it's stack you know if there is a way for E to get from the initial",
    "start": "1379200",
    "end": "1384840"
  },
  {
    "text": "context to the Target buffer well then it's designed to find it and uh doesn't do a bad job again yui's going to show",
    "start": "1384840",
    "end": "1391559"
  },
  {
    "text": "that I keep plugging his part because it's uh you know it's pretty cool so memory regions uh the as I said the",
    "start": "1391559",
    "end": "1398400"
  },
  {
    "text": "context defines a memory region um which has to be expressed abstractly because",
    "start": "1398400",
    "end": "1404039"
  },
  {
    "text": "they tend to move around across multiple executions the uh they kind of cooked up example here is uh stack and Heap in",
    "start": "1404039",
    "end": "1411799"
  },
  {
    "text": "each of these three cases uh ESP takes a different value you notice that the low word is the same because the stack is",
    "start": "1411799",
    "end": "1418360"
  },
  {
    "text": "dynamically allocated whenever the thread is spun um of course there's usually 64 kilobyte alignment on the uh",
    "start": "1418360",
    "end": "1425320"
  },
  {
    "text": "you know virtual address region that the stack occupies so that's why that low word looks the same and what's this is",
    "start": "1425320",
    "end": "1430919"
  },
  {
    "text": "indicative of is that the um is that ESP is a consistent offset into the stack",
    "start": "1430919",
    "end": "1437120"
  },
  {
    "text": "the stack moves around but ESP is always at a specific point in that stack um you know with a um with like",
    "start": "1437120",
    "end": "1444760"
  },
  {
    "text": "kind of a predictable you know instruction sequence and a a sane you know call stack and compiled code this",
    "start": "1444760",
    "end": "1451480"
  },
  {
    "text": "should be pretty reliable I mean you can get some weird like recursion and whatnot but um you know basically uh ESP",
    "start": "1451480",
    "end": "1458679"
  },
  {
    "text": "should be a pretty consistent offset within the stack the Heap on the other hand is a complete mess um it is a",
    "start": "1458679",
    "end": "1464400"
  },
  {
    "text": "process-wide shared resource blocks are allocated at random and Freed at random",
    "start": "1464400",
    "end": "1469559"
  },
  {
    "text": "and about the only thing you can really count on is 8 by alignment of the block you know either low digits eight or zero",
    "start": "1469559",
    "end": "1476559"
  },
  {
    "text": "um you have to when thinking about Heap addresses you have to take into account that uh how much work the process is",
    "start": "1476559",
    "end": "1483399"
  },
  {
    "text": "done you know how much will load it's been under how many blocks it's allocated how many blocks are still there as well as uh certain machine",
    "start": "1483399",
    "end": "1489320"
  },
  {
    "text": "factors even like the wind you know what directory is the windows directory because the length of the windows",
    "start": "1489320",
    "end": "1495120"
  },
  {
    "text": "directory be it windows or wind and you know will inuence the size of heat blocks say you know arv and whatnot and",
    "start": "1495120",
    "end": "1502480"
  },
  {
    "text": "therefore it can change the entire layout of the heat depending so um for all practical purposes it's best to just",
    "start": "1502480",
    "end": "1508399"
  },
  {
    "text": "say this is a heat block I'm interested in I have no idea where it is but I know what's in it and that's the advantage of",
    "start": "1508399",
    "end": "1514960"
  },
  {
    "text": "expressing memory abstractly um okay to specify the",
    "start": "1514960",
    "end": "1520360"
  },
  {
    "text": "context itself um the U most fundamental element of the context is uh integers",
    "start": "1520360",
    "end": "1526720"
  },
  {
    "text": "you know assigning integers to registers two memory locations and integers are all tracked on the bit level to maintain",
    "start": "1526720",
    "end": "1532559"
  },
  {
    "text": "the most possible Precision each bit could either be 0 1 or X and X is not two x is uh undefined it's either this",
    "start": "1532559",
    "end": "1541159"
  },
  {
    "text": "bit may be zero this bit may be one the emulator is going to try and you know stick with both",
    "start": "1541159",
    "end": "1546600"
  },
  {
    "text": "possibilities um this is especially important for E Flags which really has no meaning above the bit level you know",
    "start": "1546600",
    "end": "1552760"
  },
  {
    "text": "one bit one flag a flag can be in this case 01 or undefined which has some interesting lications when you start",
    "start": "1552760",
    "end": "1559440"
  },
  {
    "text": "talking about undefined Flags get to that point in a minute as well um declaring a pointer because memory",
    "start": "1559440",
    "end": "1567200"
  },
  {
    "text": "regions are defined abstractly a uh a pointer consists of which memory region",
    "start": "1567200",
    "end": "1572279"
  },
  {
    "text": "and then plus offset into that memory region just bace plus offset um in the",
    "start": "1572279",
    "end": "1578320"
  },
  {
    "text": "case of a pointer into the virtual address space itself which is a completely numerically defined address",
    "start": "1578320",
    "end": "1583919"
  },
  {
    "text": "space it starts at zero it contains the data from the snapshot the process",
    "start": "1583919",
    "end": "1589559"
  },
  {
    "text": "snapshot um these pointers are um also double as integers um if you try and dereference",
    "start": "1589559",
    "end": "1595919"
  },
  {
    "text": "an integer then it's regarded as a pointer into the virtual address space unless it's partially undefined and then",
    "start": "1595919",
    "end": "1601760"
  },
  {
    "text": "that's kind of a messy situation so we don't deal with that trying to D reference an undefined pointer means",
    "start": "1601760",
    "end": "1607880"
  },
  {
    "text": "that you're retrieving um you know memory from an unknown location may be causing an access violation so it's just",
    "start": "1607880",
    "end": "1613840"
  },
  {
    "text": "not a really good idea to try that out um to Define of memory region uh you",
    "start": "1613840",
    "end": "1619799"
  },
  {
    "text": "specify a size and then optional attributes and an optional um partially defined value the size is usually just a",
    "start": "1619799",
    "end": "1627279"
  },
  {
    "text": "reasonable over or underestimate because you don't always know what the size of the memory region is you don't want it",
    "start": "1627279",
    "end": "1633200"
  },
  {
    "text": "to be unbounded because that means that any pointer D reference in that region is going to be valid because we don't",
    "start": "1633200",
    "end": "1639200"
  },
  {
    "text": "know where it sits in the virtual address space we don't know what the underlying pages are what their permissions are if they even exist a",
    "start": "1639200",
    "end": "1646360"
  },
  {
    "text": "quick example would be um say ESP uh is like stack plus 80 million hex",
    "start": "1646360",
    "end": "1653320"
  },
  {
    "text": "obviously that's an invalid address because the Stack's going to be in userland and that would result in the dreference into kernel land but when",
    "start": "1653320",
    "end": "1659960"
  },
  {
    "text": "you're talking about an abstract memory region that information is not available to the emulator so in that case it's",
    "start": "1659960",
    "end": "1665880"
  },
  {
    "text": "just best to choose a um just kind of a ballpark figure for the size um in our",
    "start": "1665880",
    "end": "1671279"
  },
  {
    "text": "example we use like 64k that may be a little excessive um okay secondarily attributes",
    "start": "1671279",
    "end": "1677720"
  },
  {
    "text": "there's only a couple a memory region can either be read write or readon uh readon is useful for one if the",
    "start": "1677720",
    "end": "1683960"
  },
  {
    "text": "underlying memory region is um in readon memory enforced by the paging system um",
    "start": "1683960",
    "end": "1690880"
  },
  {
    "text": "secondarily if you have a memory region that contains like your payload code and you want to disregard any code pests",
    "start": "1690880",
    "end": "1696799"
  },
  {
    "text": "that are going to destroy that code then you can set it to readon and then whenever a write occurs to your target",
    "start": "1696799",
    "end": "1702919"
  },
  {
    "text": "buffer region uh that code path will be disregarded because causes the equivalent of AC access",
    "start": "1702919",
    "end": "1709039"
  },
  {
    "text": "violation um speaking of Target regions the other attribute is Target it says",
    "start": "1709039",
    "end": "1714080"
  },
  {
    "text": "this abstract memory region is somewhere that I want EIP to be if EIP ever reaches that Target buffer you know",
    "start": "1714080",
    "end": "1720399"
  },
  {
    "text": "within the size that you've given it then that emulation thread um is a success and that return address that",
    "start": "1720399",
    "end": "1727200"
  },
  {
    "text": "spawn that whole thing is logged um memory regions uh for greater",
    "start": "1727200",
    "end": "1733880"
  },
  {
    "text": "flexibility memory regions can be mapped into one another I one of the core tenants of e is that a memory region is",
    "start": "1733880",
    "end": "1740159"
  },
  {
    "text": "abstract but sometimes it's useful to map one of them into another uh specifically this is most useful",
    "start": "1740159",
    "end": "1746919"
  },
  {
    "text": "whenever you have one memory region that has a certain size and set of attributes and you want to Define kind of a sub",
    "start": "1746919",
    "end": "1752279"
  },
  {
    "text": "region inside of that memory region um for instance my favorite example is you got your stack memory",
    "start": "1752279",
    "end": "1758519"
  },
  {
    "text": "region but then you've got your target buffer inside of the stack um you know just a small region of the stack that",
    "start": "1758519",
    "end": "1764039"
  },
  {
    "text": "you want to Mark as Target obviously you don't want EIP to just land anywhere in the stack that's not going to help you",
    "start": "1764039",
    "end": "1769480"
  },
  {
    "text": "but if it lands in that Target buffer which is inside of the stack then you definitely want to know about that and",
    "start": "1769480",
    "end": "1775080"
  },
  {
    "text": "knowing that it's inside of the stack is helpful to the emulation engine because again you could get there based off of",
    "start": "1775080",
    "end": "1780799"
  },
  {
    "text": "ESP or something for instance um if a memory region is mapped into the virtual address space then um",
    "start": "1780799",
    "end": "1789519"
  },
  {
    "text": "well it's assigned a fully defined numerical value you know now you're just talking about a specific concrete region",
    "start": "1789519",
    "end": "1795480"
  },
  {
    "text": "of the virtual address space that has this number to start it runs for this size and um as a region in the virtual",
    "start": "1795480",
    "end": "1802880"
  },
  {
    "text": "address space the data from the uh process snapshot applies on pointer D reference any",
    "start": "1802880",
    "end": "1810200"
  },
  {
    "text": "overlapping regions underneath that pointer um their attributes are all checked out so again if you have a stack",
    "start": "1810200",
    "end": "1815840"
  },
  {
    "text": "pointer that happens to point into this um Target buffer region then um you know you want to",
    "start": "1815840",
    "end": "1821760"
  },
  {
    "text": "check and see if that Target attribute is in any region that's in that mapping um we're calling these mappings",
    "start": "1821760",
    "end": "1827960"
  },
  {
    "text": "address space composite so if I refer to address space composite that's what I'm talking about here's an example context",
    "start": "1827960",
    "end": "1834279"
  },
  {
    "text": "it'll probably piece it all together it's probably a little bit Burly at first but um you know really it's just",
    "start": "1834279",
    "end": "1839760"
  },
  {
    "text": "single instructions to the context loader just tells it what to do how to initialize the master",
    "start": "1839760",
    "end": "1845440"
  },
  {
    "text": "context hope everybody can see that I can't um fortunately I have notes the um",
    "start": "1845440",
    "end": "1851640"
  },
  {
    "text": "first instruction just defines the stack as a memory region it says um you know",
    "start": "1851640",
    "end": "1857480"
  },
  {
    "text": "we know that the partial value of the stack and this partial value is again just to Aid the emulation engine you",
    "start": "1857480",
    "end": "1863279"
  },
  {
    "text": "know um if you're performing pointer arithmetic and you need to uh resolve a pointer into a single integer value then",
    "start": "1863279",
    "end": "1870799"
  },
  {
    "text": "this um Base address or excuse me this um partial value comes into play um in",
    "start": "1870799",
    "end": "1876960"
  },
  {
    "text": "this case let's say that we ran the program multiple times and every time the uh stack was based at you know some",
    "start": "1876960",
    "end": "1882799"
  },
  {
    "text": "number beginning with a null you know two two zeros and hex so you know that's useful information inform to hang on to",
    "start": "1882799",
    "end": "1889360"
  },
  {
    "text": "a quick example of when that would come in handy is if arithmetic was performed on that pointer and say that would cause",
    "start": "1889360",
    "end": "1895440"
  },
  {
    "text": "a sign flag to be cleared which is uh could be useful you know there can be conditional jumps that use a sign flag",
    "start": "1895440",
    "end": "1902000"
  },
  {
    "text": "it's just the more information the better and the more accurate the emulation um there's that 64k example",
    "start": "1902000",
    "end": "1907880"
  },
  {
    "text": "size I was talking about it's you know it's kind of a ballpark figure stack of course needs to be read",
    "start": "1907880",
    "end": "1913000"
  },
  {
    "text": "right um ESP is uh then declared as a pointer into the stack region just base",
    "start": "1913000",
    "end": "1919519"
  },
  {
    "text": "plus offset we're saying the ESP is at stack wherever stack begins plus e e000",
    "start": "1919519",
    "end": "1924840"
  },
  {
    "text": "hex um now we're going to declare buffer as our um you know Target memory region",
    "start": "1924840",
    "end": "1930080"
  },
  {
    "text": "you can see the target attribute on the end it's also declared as read only to keep the code from getting mauled by",
    "start": "1930080",
    "end": "1935519"
  },
  {
    "text": "like uh say stack operations like a bunch of pushes and stuff um we ma we",
    "start": "1935519",
    "end": "1940760"
  },
  {
    "text": "mapped the buffer into the stack at offset e9c just a ballpark figure and",
    "start": "1940760",
    "end": "1946000"
  },
  {
    "text": "give it a you know give it a size of 12 8 um next up we're going to initialize",
    "start": "1946000",
    "end": "1951440"
  },
  {
    "text": "some memory on the stack saying stack plus E4 um is actually a pointer into our",
    "start": "1951440",
    "end": "1957240"
  },
  {
    "text": "buffer so what this means ESP is at e000 this pointer is at e0004 so if there",
    "start": "1957240",
    "end": "1963480"
  },
  {
    "text": "were like say a pop and then a r to occur then that would land you eight bytes into our buffer which would cause",
    "start": "1963480",
    "end": "1969840"
  },
  {
    "text": "emulation in the end uh and say hey this is a good return address now we Define",
    "start": "1969840",
    "end": "1975159"
  },
  {
    "text": "some registers with you know what look like some common values you know hypothetically this is just taken from running the program multiple times maybe",
    "start": "1975159",
    "end": "1981720"
  },
  {
    "text": "disassembling to see what's going on in there and just kind of getting a feel for what these values are you know can",
    "start": "1981720",
    "end": "1986799"
  },
  {
    "text": "be expected to be let's say eax is zero maybe that's just a function return code",
    "start": "1986799",
    "end": "1992360"
  },
  {
    "text": "ECX 3ff something the low bits are undefined kind of looks like an integer overflow or something EBP points into",
    "start": "1992360",
    "end": "2000120"
  },
  {
    "text": "the stack um the memory at EBP points further into the stack it's kind of a typical link list of um excuse me EBP",
    "start": "2000120",
    "end": "2008159"
  },
  {
    "text": "based frames it's pretty typical ESI points into the stack the thread information block is uh just another",
    "start": "2008159",
    "end": "2014919"
  },
  {
    "text": "memory region declared somewhere floating out there you know we don't know where our threads tib is going to be because this is some kind of",
    "start": "2014919",
    "end": "2021360"
  },
  {
    "text": "multi-threaded example um of course it has a size of 4K and it's read R you",
    "start": "2021360",
    "end": "2026679"
  },
  {
    "text": "know typically they're allocated top down so it's 7 FF something is the value and that again could come in handy to",
    "start": "2026679",
    "end": "2033159"
  },
  {
    "text": "our emulation engine of course it's also 4K aligned uh FS of course points to the",
    "start": "2033159",
    "end": "2039440"
  },
  {
    "text": "thread information block and finally e Flags is partially defined you know some of these bits you can't change no matter",
    "start": "2039440",
    "end": "2045600"
  },
  {
    "text": "what the instruction or excuse me the interrupt flag is enabled this is a user mode application there's nothing you can",
    "start": "2045600",
    "end": "2051240"
  },
  {
    "text": "do about that some of the other bits are always zero always one those never change and then we've got the carry flag",
    "start": "2051240",
    "end": "2057800"
  },
  {
    "text": "from right to left carry flag parody flag and auxiliary carry flag undefined maybe some arithmetics happening before",
    "start": "2057800",
    "end": "2063720"
  },
  {
    "text": "the you know we sees control that we can't always be sure of what the result of the flags are going to",
    "start": "2063720",
    "end": "2070800"
  },
  {
    "text": "be H hold on just a second there you go okay now we're going to talk a little",
    "start": "2072679",
    "end": "2078560"
  },
  {
    "text": "bit about emulation and how that works and how that flows um so the top level",
    "start": "2078560",
    "end": "2083800"
  },
  {
    "text": "outer loop of e is the uh uses the CAG to generate uh candidate return",
    "start": "2083800",
    "end": "2089040"
  },
  {
    "text": "addresses um for each address we just um we start the emulation with a fresh copy",
    "start": "2089040",
    "end": "2094720"
  },
  {
    "text": "of the contact structure and just tell it to go emulate the context structure is um initialized to just default values",
    "start": "2094720",
    "end": "2101839"
  },
  {
    "text": "and then it's loaded up from the uh you know by the context loader based on what's specified in that context file um",
    "start": "2101839",
    "end": "2109720"
  },
  {
    "text": "so you know you've got like just completely Global defaults like certain segment registers certain Flags",
    "start": "2109720",
    "end": "2115800"
  },
  {
    "text": "everything else is undefined and then the context loader loads it up with you know memory with registers and then for",
    "start": "2115800",
    "end": "2122400"
  },
  {
    "text": "each emulation run this uh context duplicated and passed off to the emulation core um we're going to refer",
    "start": "2122400",
    "end": "2128359"
  },
  {
    "text": "to these runs as emulation threads don't be fooled it's not a multi-threaded application but it's just convenient",
    "start": "2128359",
    "end": "2135440"
  },
  {
    "text": "terminology so each instruction is emulated as Faithfully as possible the arithmetic um in order of Priority First",
    "start": "2135440",
    "end": "2143119"
  },
  {
    "text": "tries to preserve the destination as a pointer if the operation can occur on the pointer such that the pointer can",
    "start": "2143119",
    "end": "2149640"
  },
  {
    "text": "still be a pointer the same base different offset then that's preferable",
    "start": "2149640",
    "end": "2155359"
  },
  {
    "text": "uh secondarily if the arithmetic is is um the arithmetic will try to um convert",
    "start": "2155359",
    "end": "2161880"
  },
  {
    "text": "the destination to a pointer of the source's base so like if you're doing arithmetic on say an integer is a",
    "start": "2161880",
    "end": "2168400"
  },
  {
    "text": "destination and a pointer is a source well I mean obviously the the destination is not a pointer it's a",
    "start": "2168400",
    "end": "2174599"
  },
  {
    "text": "number um so we're going to try and convert it to the to a pointer of the source base first and foremost you know",
    "start": "2174599",
    "end": "2180880"
  },
  {
    "text": "just to try and preserve as much information as possible um failing all that it's just",
    "start": "2180880",
    "end": "2186480"
  },
  {
    "text": "integer arithmetic on two integers with the nondeterminism so you know there's",
    "start": "2186480",
    "end": "2191560"
  },
  {
    "text": "special arithmetic to handle you know each bit position 0 one or X um we do",
    "start": "2191560",
    "end": "2197599"
  },
  {
    "text": "erir on the side of non-determinism so like if I had our you know logic tables here to show you they're just 3x3",
    "start": "2197599",
    "end": "2203680"
  },
  {
    "text": "instead of the usual 2x two you know you got 0 1 and x uh and 0 1 and x uh kind",
    "start": "2203680",
    "end": "2209079"
  },
  {
    "text": "of forming a matrix and we do air on the side of non-determinism so if we don't know what the outcome is going to be we",
    "start": "2209079",
    "end": "2215079"
  },
  {
    "text": "just jot down an X obviously you and any anything by zero it's going to be zero you or anything by one it's going to be",
    "start": "2215079",
    "end": "2220800"
  },
  {
    "text": "one but you know vice versa you or X by zero and it's still going to be X",
    "start": "2220800",
    "end": "2226079"
  },
  {
    "text": "because it hadn't changed you don't know what's there um arithmetic also modifies the E Flags register as the best it can",
    "start": "2226079",
    "end": "2233119"
  },
  {
    "text": "according to the arithmetic as it's performed on the integer representations you know you got um you",
    "start": "2233119",
    "end": "2238280"
  },
  {
    "text": "got some partially undefined integers um and you like say Ad them together your carry flag might be undefined auxiliary",
    "start": "2238280",
    "end": "2244480"
  },
  {
    "text": "carry parody flag any of those flags might be undefined depending on which bit positions are defined and",
    "start": "2244480",
    "end": "2250280"
  },
  {
    "text": "undefined um but we try and do that to the best of our ability however sometimes Faith just",
    "start": "2250280",
    "end": "2257280"
  },
  {
    "text": "isn't enough there's a lot of things that can cause a thread to end um the first and foremost being kind of",
    "start": "2257280",
    "end": "2263720"
  },
  {
    "text": "emulated access violations for instance um if you try and de reference a pointer out of bounds of the size of the memory",
    "start": "2263720",
    "end": "2270160"
  },
  {
    "text": "region that fails if you try and write to a readon region that fails page permissions in the case of uh you know",
    "start": "2270160",
    "end": "2277520"
  },
  {
    "text": "poter D references in the virtual address space which you know of course corresponds to the snapshot it looks at",
    "start": "2277520",
    "end": "2283520"
  },
  {
    "text": "the page permissions if you're violating something there if you're accessing an missing page that",
    "start": "2283520",
    "end": "2289240"
  },
  {
    "text": "fails additionally invalid op codes privileged instructions and potential divide by zeros will all cause the",
    "start": "2289240",
    "end": "2295440"
  },
  {
    "text": "emulation to fail if you're dividing by a register that all the defined bits are zero but there are some undefined bits",
    "start": "2295440",
    "end": "2302319"
  },
  {
    "text": "well that register could be zero it could cause a divide by zero we don't know we take it on the safe side because",
    "start": "2302319",
    "end": "2308119"
  },
  {
    "text": "we're going for robustness here uh loops and branches this is where um undefined Flags gets interesting so",
    "start": "2308119",
    "end": "2315960"
  },
  {
    "text": "um first and foremost we Institute an instruction countdown to keep the emulation from running forever and to",
    "start": "2315960",
    "end": "2322800"
  },
  {
    "text": "you know limit prohibitively costly I mean time expensive kind of uh emulation runs we don't want this thing to run",
    "start": "2322800",
    "end": "2329280"
  },
  {
    "text": "forever um we're using 100 as a reasonable default Yugi as as Ryan",
    "start": "2329280",
    "end": "2335160"
  },
  {
    "text": "mentioned Yugi found a 91 instruction seat sequence so we may AO bumped that up a little bit but it a you know is a",
    "start": "2335160",
    "end": "2341480"
  },
  {
    "text": "reasonable default to start with so if a conditional jump or a loop or conditional Loop is reached with um you",
    "start": "2341480",
    "end": "2348240"
  },
  {
    "text": "know the the requisite registers or Flags undefined and there's no way to tell which path it's going to take we",
    "start": "2348240",
    "end": "2354440"
  },
  {
    "text": "take both of them what we do is we take the context at that moment we copy it we",
    "start": "2354440",
    "end": "2360200"
  },
  {
    "text": "have the instruction count in each of those context so that you know you can't spiral out of control in like a an",
    "start": "2360200",
    "end": "2366000"
  },
  {
    "text": "indeterminate uh additional jump to itself for instance and um and then the",
    "start": "2366000",
    "end": "2371319"
  },
  {
    "text": "parent succeeds if both of the children paths were jotted down as successes um",
    "start": "2371319",
    "end": "2377079"
  },
  {
    "text": "One path is the branch One path is the fall through if both of them result in execution and reaching your target",
    "start": "2377079",
    "end": "2382440"
  },
  {
    "text": "buffer then the parent is a success and therefore the return address that led there or that started that whole thing",
    "start": "2382440",
    "end": "2387839"
  },
  {
    "text": "is a success too E's also going to show that off um",
    "start": "2387839",
    "end": "2393800"
  },
  {
    "text": "yeah so if everything goes well then it reaches your target b and um that return address is jotted",
    "start": "2393800",
    "end": "2400000"
  },
  {
    "text": "down as a success it's logged to the interface and it goes on to the next one Speaking of going on to the next one",
    "start": "2400000",
    "end": "2407319"
  },
  {
    "text": "I'm going to defer to eugi now who's going to give an awesome example using a uh vulnerability that he discovered so",
    "start": "2407319",
    "end": "2414280"
  },
  {
    "text": "here's Yugi hi good morning I'm",
    "start": "2414280",
    "end": "2421720"
  },
  {
    "text": "Yugi thank you okay okay I will talk about the uh how to use the E reap and",
    "start": "2422160",
    "end": "2429240"
  },
  {
    "text": "uh result of the performance of the E re so the first we must FL the target",
    "start": "2429240",
    "end": "2435480"
  },
  {
    "text": "process using the vulnerability to be exploited and uh we should put the",
    "start": "2435480",
    "end": "2441119"
  },
  {
    "text": "process as close as possible to the state that will be in effect when the execution is hijacked like uh finish uh",
    "start": "2441119",
    "end": "2449640"
  },
  {
    "text": "finished exploit with the in less like 4141 4141 I really like this value and",
    "start": "2449640",
    "end": "2456480"
  },
  {
    "text": "the uh process should and the process should definitely have a divago on it",
    "start": "2456480",
    "end": "2462680"
  },
  {
    "text": "with the first chance exception cord okay and um I will show how to use",
    "start": "2462680",
    "end": "2469920"
  },
  {
    "text": "the E and uh second we must uh we must use the U no it's a pnap I'm sorry and",
    "start": "2469920",
    "end": "2477760"
  },
  {
    "text": "yeah we must use a pnap to grab the process M snapshot and the uh this two",
    "start": "2477760",
    "end": "2484319"
  },
  {
    "text": "can identify the uh type of the data region like a heap or stack or image or card or",
    "start": "2484319",
    "end": "2491400"
  },
  {
    "text": "data like this and the uh before starting the e r",
    "start": "2491400",
    "end": "2498079"
  },
  {
    "text": "we must create the context of the target process and the uh to create the context",
    "start": "2498079",
    "end": "2505280"
  },
  {
    "text": "we must study the environment at the class time it's like uh consistent poters and integers and um memory region",
    "start": "2505280",
    "end": "2513200"
  },
  {
    "text": "of the in and uh if you want to double check your context uh you can",
    "start": "2513200",
    "end": "2519040"
  },
  {
    "text": "disassemble the cord and you must know that the context and the snapshot are",
    "start": "2519040",
    "end": "2524800"
  },
  {
    "text": "both specific to the one version of the vulnerable",
    "start": "2524800",
    "end": "2530119"
  },
  {
    "text": "process okay and I will show the an example context and this is the context",
    "start": "2530119",
    "end": "2536800"
  },
  {
    "text": "for the exploiting of the lsas SS it is for the window 2000 yeah",
    "start": "2536800",
    "end": "2543760"
  },
  {
    "text": "20004 and the uh I will show the how to create this context so I",
    "start": "2543760",
    "end": "2550920"
  },
  {
    "text": "want oops oops shut",
    "start": "2570920",
    "end": "2578119"
  },
  {
    "text": "Just moment",
    "start": "2581960",
    "end": "2584520"
  },
  {
    "text": "please holy",
    "start": "2593640",
    "end": "2597160"
  },
  {
    "text": " what Okay so",
    "start": "2599640",
    "end": "2606800"
  },
  {
    "text": "all right",
    "start": "2619599",
    "end": "2622800"
  },
  {
    "text": "okay I will describe about how to create a Contex without this demonstration",
    "start": "2640800",
    "end": "2646359"
  },
  {
    "text": "machine okay and the uh",
    "start": "2646359",
    "end": "2652559"
  },
  {
    "text": "okay oops so we must set up the uh stack and",
    "start": "2652559",
    "end": "2658720"
  },
  {
    "text": "registers and the buffers as the context and the uh the startat all of the uh",
    "start": "2658720",
    "end": "2666280"
  },
  {
    "text": "stack is is the um um Community Legion",
    "start": "2666280",
    "end": "2672079"
  },
  {
    "text": "of the thre stack and the stack space is always align 64 kiloby Bly and uh but it",
    "start": "2672079",
    "end": "2679680"
  },
  {
    "text": "move around so the we can assign the stack numerical value of like Z",
    "start": "2679680",
    "end": "2687400"
  },
  {
    "text": "XXX Z like this but it is totally seate all the",
    "start": "2687400",
    "end": "2692839"
  },
  {
    "text": "space and the uh we must set up the uh value of each registers like uh eax",
    "start": "2692839",
    "end": "2699599"
  },
  {
    "text": "equal Z and ebx equal Z and ECX equal stack plus 5D 38 or",
    "start": "2699599",
    "end": "2706079"
  },
  {
    "text": "something and the uh this is the uh buffer it's Target",
    "start": "2706079",
    "end": "2711280"
  },
  {
    "text": "buffer and technically you can execute a cord anywhere in your buffer but it uh",
    "start": "2711280",
    "end": "2717240"
  },
  {
    "text": "for the just simplity we choose to execute a cord after",
    "start": "2717240",
    "end": "2723319"
  },
  {
    "text": "ESP okay we tested uh this e against the",
    "start": "2723319",
    "end": "2728440"
  },
  {
    "text": "following three kind of platforms it's a window 2000 Advanced server it's English",
    "start": "2728440",
    "end": "2734280"
  },
  {
    "text": "version it's no service pack and no patch and the uh window 2000 sp3 and sp4",
    "start": "2734280",
    "end": "2741839"
  },
  {
    "text": "and the target process is lsss and it contain the MSO 411 bability",
    "start": "2741839",
    "end": "2749319"
  },
  {
    "text": "it is basically stock based overflow in the loging function which we",
    "start": "2749319",
    "end": "2755359"
  },
  {
    "text": "found okay I will show you the result of the performance of e re um this is",
    "start": "2755480",
    "end": "2761920"
  },
  {
    "text": "basically the completion with the common used L finder we just find the jump es",
    "start": "2761920",
    "end": "2768400"
  },
  {
    "text": "and call es and push ESP and red and in case for the window 2000",
    "start": "2768400",
    "end": "2775119"
  },
  {
    "text": "sp4 now the common use returnless find can just identify 1607",
    "start": "2775119",
    "end": "2782520"
  },
  {
    "text": "returnes but the E re could identify the 800 24 L it's much",
    "start": "2782520",
    "end": "2790920"
  },
  {
    "text": "better okay and the uh this is the distribution of the",
    "start": "2790920",
    "end": "2797359"
  },
  {
    "text": "number of instuction from the start list to the Target buffer and uh this is what",
    "start": "2797359",
    "end": "2803400"
  },
  {
    "text": "we found in window 2000 spz and the what is my point okay this",
    "start": "2803400",
    "end": "2810480"
  },
  {
    "text": "is the tables um which show the hist and there are number of the return L it that",
    "start": "2810480",
    "end": "2817200"
  },
  {
    "text": "will execute the court in the ESP so that by number of instructions required",
    "start": "2817200",
    "end": "2824359"
  },
  {
    "text": "to get there and the peak of the histogram is two two instuctions that",
    "start": "2824359",
    "end": "2831720"
  },
  {
    "text": "means that we found more two inflection sequency than any other",
    "start": "2831720",
    "end": "2838119"
  },
  {
    "text": "number and uh this is the longest sequence from the start list to the",
    "start": "2838119",
    "end": "2843480"
  },
  {
    "text": "Target buffer and we import the limit of one inflections so it's possible that the",
    "start": "2843480",
    "end": "2851839"
  },
  {
    "text": "there is the longest sequence could exist okay this is the case of window",
    "start": "2851839",
    "end": "2858000"
  },
  {
    "text": "2000 sp3 the peak is four installtions and the maximum number of instuction is",
    "start": "2858000",
    "end": "2866480"
  },
  {
    "text": "79 okay this is S4 the peak is five",
    "start": "2866480",
    "end": "2872240"
  },
  {
    "text": "instuctions and the maximum number of instuction is 91 it's very",
    "start": "2872240",
    "end": "2877920"
  },
  {
    "text": "long okay and here we found seven return Alles exist on the window 2000 SB Z and",
    "start": "2877920",
    "end": "2885839"
  },
  {
    "text": "a three and four like this okay and yeah I will show you the",
    "start": "2885839",
    "end": "2893319"
  },
  {
    "text": "example of the return Lis and this is the example R Lis for the sp4 with 27",
    "start": "2893319",
    "end": "2903599"
  },
  {
    "text": "inflections okay and the uh this example contain the undetermined blanch like my",
    "start": "2904440",
    "end": "2912400"
  },
  {
    "text": "PO like this and the uh ex is undetermined because it is loaded from",
    "start": "2912400",
    "end": "2919079"
  },
  {
    "text": "the stack so then the compare will make a z flag undetermined so the E reap must",
    "start": "2919079",
    "end": "2926960"
  },
  {
    "text": "test both directions so yeah I will show you the",
    "start": "2926960",
    "end": "2932440"
  },
  {
    "text": "demonstration which use this address as a return l and I try to exploit the",
    "start": "2932440",
    "end": "2940520"
  },
  {
    "text": "elas can you help",
    "start": "2942960",
    "end": "2947240"
  },
  {
    "text": "I have a we know 20004 in the",
    "start": "2974119",
    "end": "2981000"
  },
  {
    "text": "oops",
    "start": "2998200",
    "end": "3001200"
  },
  {
    "text": "okay",
    "start": "3040599",
    "end": "3043599"
  },
  {
    "text": "rep it doesn't work I don't know",
    "start": "3080440",
    "end": "3086599"
  },
  {
    "text": "I can",
    "start": "3088319",
    "end": "3095839"
  },
  {
    "text": "okay okay so I going Clash it",
    "start": "3095839",
    "end": "3103160"
  },
  {
    "text": "fast",
    "start": "3104680",
    "end": "3107680"
  },
  {
    "text": "oops we",
    "start": "3114520",
    "end": "3118520"
  },
  {
    "text": "like this we got a first chance exception in L",
    "start": "3125839",
    "end": "3130359"
  },
  {
    "text": "say and the uh yeah this where doesn't work",
    "start": "3135200",
    "end": "3144480"
  },
  {
    "text": "pnap oh I no I don't have pnap maybe cont H how get the cont oh okay",
    "start": "3149400",
    "end": "3158359"
  },
  {
    "text": "okay I going talk about uh how to get the context so yeah this is a",
    "start": "3158359",
    "end": "3164559"
  },
  {
    "text": "Tib and the uh okay this is the start outl um of the",
    "start": "3164559",
    "end": "3174280"
  },
  {
    "text": "committed Legion of the sled stack and the uh yeah stock space is all the way to line 64 KOB B but it may move",
    "start": "3174280",
    "end": "3181760"
  },
  {
    "text": "along so yeah we can assign the stock Med value as the uh you know it",
    "start": "3181760",
    "end": "3189000"
  },
  {
    "text": "include the um undetermined",
    "start": "3189000",
    "end": "3193720"
  },
  {
    "text": "value and weird it cannot bu yeah okay I'm kill this one",
    "start": "3194520",
    "end": "3205838"
  },
  {
    "text": "oop oops it won't start yeah it didn't start oh W yeah there are the kind of",
    "start": "3207119",
    "end": "3213880"
  },
  {
    "text": "problem in",
    "start": "3213880",
    "end": "3216359"
  },
  {
    "text": "the okay all",
    "start": "3222079",
    "end": "3227400"
  },
  {
    "text": "right well I said if uh I said if I spilled water on Yugi that uh and that",
    "start": "3232839",
    "end": "3238200"
  },
  {
    "text": "was all that went wrong then that'd be a pretty good presentation you got to allow for the unexpected um let's see so I'm going to",
    "start": "3238200",
    "end": "3245440"
  },
  {
    "text": "go ahead and talk about what there is left to do on e um as somebody once said you can't",
    "start": "3245440",
    "end": "3251359"
  },
  {
    "text": "always get what you want but if you try it out sometime you just might find that it works good enough no I'm just kidding",
    "start": "3251359",
    "end": "3258280"
  },
  {
    "text": "uh there there's always way to make it better thanks for the courtesy laugh let's see so first and foremost um uh",
    "start": "3258280",
    "end": "3266119"
  },
  {
    "text": "the objective here is to use e to find a completely Universal offset the more Universal the better the more versions",
    "start": "3266119",
    "end": "3273040"
  },
  {
    "text": "it spans the more um languages it spans operating systems it spans the better",
    "start": "3273040",
    "end": "3279839"
  },
  {
    "text": "you know I guess the Holy Grail would be an entirely Universal offset across all windows um secondarily um it'd be nice",
    "start": "3279839",
    "end": "3288720"
  },
  {
    "text": "to maintain the results of poter arithmetic as a series of Expressions um",
    "start": "3288720",
    "end": "3293920"
  },
  {
    "text": "for instance the example I've got here is kind of a kind of a hack NE example but it'll serve is that um if you take a pointer",
    "start": "3293920",
    "end": "3301480"
  },
  {
    "text": "and you knot it um in the current engine that becomes undefined because let's say",
    "start": "3301480",
    "end": "3306839"
  },
  {
    "text": "that that Pointer's base value is undefined we don't know what virtual address it's at well when you take um",
    "start": "3306839",
    "end": "3312680"
  },
  {
    "text": "you know the inverse of that then it is no longer a meaningful pointer it's U reduced to an integer which is",
    "start": "3312680",
    "end": "3318480"
  },
  {
    "text": "completely undefined so then you add one to that it's still undefined not it again still undefined whereas if we kept",
    "start": "3318480",
    "end": "3325960"
  },
  {
    "text": "track of that that as a series of Expressions then not pointer + one not",
    "start": "3325960",
    "end": "3331359"
  },
  {
    "text": "again is going to actually equal pointer minus one so it's additional information that's kind of being lost um during the",
    "start": "3331359",
    "end": "3339039"
  },
  {
    "text": "uh you know during the emulation um another cool thing would be automated context reconnaissance instead",
    "start": "3339039",
    "end": "3345520"
  },
  {
    "text": "of having a person have to sit there and say hey this register points to that this memory contains that is to have a",
    "start": "3345520",
    "end": "3351400"
  },
  {
    "text": "program take multiple um executions of this process study what's there",
    "start": "3351400",
    "end": "3356760"
  },
  {
    "text": "you know maybe maybe even do things to intentionally kind of shake up the uh the scenario you know to uh to see",
    "start": "3356760",
    "end": "3363000"
  },
  {
    "text": "what's really going to be constant and what's really going to be unpredictable and um and just do all",
    "start": "3363000",
    "end": "3368280"
  },
  {
    "text": "that in a third party tool if um you know anybody's",
    "start": "3368280",
    "end": "3373640"
  },
  {
    "text": "interested um and finally it would be uh kind of nice to emulate exception",
    "start": "3373640",
    "end": "3378760"
  },
  {
    "text": "handlers because those contain cool function pointers that uh could be overwritten and um it wouldn't be that",
    "start": "3378760",
    "end": "3384760"
  },
  {
    "text": "terribly hard to do um but we just don't do it yet can't get everything out in the 1.0 right um there there would be",
    "start": "3384760",
    "end": "3392880"
  },
  {
    "text": "some other cool things to do um such as um supporting more instructions like MMX",
    "start": "3392880",
    "end": "3399280"
  },
  {
    "text": "and um it'd be nice to have an indeterminate version of the um uh BCD",
    "start": "3399280",
    "end": "3405480"
  },
  {
    "text": "instructions like AAA or whatever we don't have that now you know it takes",
    "start": "3405480",
    "end": "3410599"
  },
  {
    "text": "into account undefined bits it doesn't yet and also to be able to contain conin",
    "start": "3410599",
    "end": "3416440"
  },
  {
    "text": "a special value in the context like to say this register doesn't point to my target buffer but it contains a value",
    "start": "3416440",
    "end": "3422520"
  },
  {
    "text": "I'm interested in keeping around so by the end of the simulation thread that this buffer or this excuse me this value",
    "start": "3422520",
    "end": "3428760"
  },
  {
    "text": "should still be accessible somewhere that'd be kind of nice too maybe useful in some",
    "start": "3428760",
    "end": "3434119"
  },
  {
    "text": "circumstances um let's see I think that's about it I'm going to see if eugi",
    "start": "3434119",
    "end": "3439160"
  },
  {
    "text": "is about ready to uh do the demonstration uh just a second",
    "start": "3439160",
    "end": "3447280"
  },
  {
    "text": "looks like we're going to have that uh promise demonstration after all um it'll be just a second so uh if y'all can",
    "start": "3452480",
    "end": "3459520"
  },
  {
    "text": "resist the temptation of lunch I'm hungry too let just stick it out",
    "start": "3459520",
    "end": "3466680"
  },
  {
    "text": "sweetness",
    "start": "3480359",
    "end": "3483038"
  },
  {
    "text": "money um C can you hang on just a second please we'll get to questions and is it",
    "start": "3486920",
    "end": "3494160"
  },
  {
    "text": "cool uh y'all want to demonstrate now okay yeah uh he's going to demonstrate",
    "start": "3494160",
    "end": "3499400"
  },
  {
    "text": "right quick and then we'll gladly take questions and money",
    "start": "3499400",
    "end": "3505880"
  },
  {
    "text": "okay so okay first I will put the blade point",
    "start": "3512799",
    "end": "3518640"
  },
  {
    "text": "at the",
    "start": "3518640",
    "end": "3521558"
  },
  {
    "text": "uh okay this is thatl",
    "start": "3530520",
    "end": "3536799"
  },
  {
    "text": "which contain a 27 interaction one okay and the uh yeah we will send",
    "start": "3536799",
    "end": "3543880"
  },
  {
    "text": "the exploit do",
    "start": "3543880",
    "end": "3547240"
  },
  {
    "text": "this",
    "start": "3549520",
    "end": "3552520"
  },
  {
    "text": "oops and this is this one",
    "start": "3559720",
    "end": "3566880"
  },
  {
    "text": "oops oh yeah so e is here so I will do the",
    "start": "3574960",
    "end": "3581280"
  },
  {
    "text": "step holy freezed",
    "start": "3581280",
    "end": "3588880"
  },
  {
    "text": "man so yeah I attached um lsss so it's",
    "start": "3588880",
    "end": "3594440"
  },
  {
    "text": "being freezed so yeah sorry about that",
    "start": "3594440",
    "end": "3599839"
  },
  {
    "text": "can you",
    "start": "3599839",
    "end": "3602119"
  },
  {
    "text": "[Applause] start so thanks for your patience",
    "start": "3608130",
    "end": "3614359"
  },
  {
    "text": "everyone we are actually going to hold on a",
    "start": "3614359",
    "end": "3620160"
  },
  {
    "text": "second here you go we are actually going",
    "start": "3621079",
    "end": "3626760"
  },
  {
    "text": "take um some questions now um somebody in an nii shirt will be around to pick up your dollars so um just Kidd let's go",
    "start": "3626760",
    "end": "3635559"
  },
  {
    "text": "um oh okay go",
    "start": "3635559",
    "end": "3639280"
  },
  {
    "text": "ahead we have considered abstractly emulating API calls um generically it",
    "start": "3645200",
    "end": "3651200"
  },
  {
    "text": "could be as simple as just parsing the header file and saying okay the the API accepts these U these arguments and",
    "start": "3651200",
    "end": "3659520"
  },
  {
    "text": "passes back this kind of result um you know of course just to gloss it over it could just return like undefined values",
    "start": "3659520",
    "end": "3666680"
  },
  {
    "text": "and furthermore you'd have to hope that no exceptions happen internal to the API or transfers of execution but",
    "start": "3666680",
    "end": "3673319"
  },
  {
    "text": "specifically emulating apis um I can tell you how e e does it it just uh",
    "start": "3673319",
    "end": "3679440"
  },
  {
    "text": "emulates right on into the API it uh it doesn't differentiate the boundaries of the API and any other code uh it'll you",
    "start": "3679440",
    "end": "3687039"
  },
  {
    "text": "know with a sufficient counter it'll keep emulating right on up to that n2e and then it'll uh it'll stop because uh",
    "start": "3687039",
    "end": "3693880"
  },
  {
    "text": "it doesn't like interrupts it doesn't know what they do to execution um does does that does that",
    "start": "3693880",
    "end": "3699319"
  },
  {
    "text": "answer your question okay cool next up go",
    "start": "3699319",
    "end": "3704880"
  },
  {
    "text": "ahead oh no it hasn't um uh that particular protection is um beyond the",
    "start": "3710400",
    "end": "3716920"
  },
  {
    "text": "scope of what E's intended to do um I mean if and I guess people have proven",
    "start": "3716920",
    "end": "3722839"
  },
  {
    "text": "if you can get around that protection then this will uh provide all the return",
    "start": "3722839",
    "end": "3728200"
  },
  {
    "text": "addresses that you might want to uh to implement in your um exploit but we",
    "start": "3728200",
    "end": "3733599"
  },
  {
    "text": "haven't tested on those versions of the operating systems yet although there there's theoretically no reason why it",
    "start": "3733599",
    "end": "3739520"
  },
  {
    "text": "would it behave any differently next brave soul uh I saw you",
    "start": "3739520",
    "end": "3745520"
  },
  {
    "text": "in the back first go",
    "start": "3745520",
    "end": "3748319"
  },
  {
    "text": "ahead Oh you mean like a protection goal um you could do that it's um it's",
    "start": "3759559",
    "end": "3768160"
  },
  {
    "text": "uh it's really in infeasible I guess to try and you know do restrictive things to your code um definitely it's not",
    "start": "3768160",
    "end": "3774680"
  },
  {
    "text": "beyond the scope of possib ability but um you know I think uh first and foremost just keep people from being",
    "start": "3774680",
    "end": "3780880"
  },
  {
    "text": "able to specify an arbitrary function pointer and uh if you could like if there was like one big Universal address",
    "start": "3780880",
    "end": "3787359"
  },
  {
    "text": "that you could disable by rebasing a dll then that'd be kind of effective in a",
    "start": "3787359",
    "end": "3792400"
  },
  {
    "text": "subversive kind of way too and in the",
    "start": "3792400",
    "end": "3797038"
  },
  {
    "text": "front oh yeah it'll um it'll it'll emulate the code to the",
    "start": "3804000",
    "end": "3809200"
  },
  {
    "text": "best oh no we haven't we ran it against delas um yeah it'll um it'll emulate",
    "start": "3809200",
    "end": "3816279"
  },
  {
    "text": "it'll emulate the deferences um as long as a context is set up to initialize the memory and the registers to their proper",
    "start": "3816279",
    "end": "3822240"
  },
  {
    "text": "values which just kind of you know requires like a Keen Eye and looking on looking into what's going on in the uh",
    "start": "3822240",
    "end": "3829799"
  },
  {
    "text": "um exploit Dave",
    "start": "3829799",
    "end": "3834799"
  },
  {
    "text": "um well first answer would be non-determinism the CPU does not support um non-deterministic values for the bits",
    "start": "3837000",
    "end": "3844720"
  },
  {
    "text": "so that alone was enough to necessitate emulation furthermore the abstract memory regions and Abstract um or excuse",
    "start": "3844720",
    "end": "3852079"
  },
  {
    "text": "me and uh you know just undefined values the context and uh I pity the fool who",
    "start": "3852079",
    "end": "3858000"
  },
  {
    "text": "sits there and just clicks the revert button in VMware next question",
    "start": "3858000",
    "end": "3865480"
  },
  {
    "text": "anybody everybody hungry okay go ahead I meant to add that to the to-do",
    "start": "3867559",
    "end": "3874039"
  },
  {
    "text": "list um come up with a no I'm just kidding no price list yeah it'll be",
    "start": "3874039",
    "end": "3879240"
  },
  {
    "text": "given away free the emulation Corp is uh solid we're um we're still um not happy",
    "start": "3879240",
    "end": "3886440"
  },
  {
    "text": "with the way it displays the information so we'll make it all snazzy and cool um but it will be up on the site we should",
    "start": "3886440",
    "end": "3892760"
  },
  {
    "text": "have a research portal upcoming shortly and uh that'll be the place to get all the cool",
    "start": "3892760",
    "end": "3899318"
  },
  {
    "text": "stuff okay",
    "start": "3901599",
    "end": "3905480"
  },
  {
    "text": "um what you want to do something oh that it I guess that's it okay thanks for everybody who stuck it",
    "start": "3907760",
    "end": "3915440"
  },
  {
    "text": "out",
    "start": "3924640",
    "end": "3927640"
  },
  {
    "text": "e",
    "start": "3954640",
    "end": "3957640"
  },
  {
    "text": "e",
    "start": "3984559",
    "end": "3987559"
  },
  {
    "text": "e",
    "start": "4014520",
    "end": "4017520"
  },
  {
    "text": "e",
    "start": "4044520",
    "end": "4047520"
  },
  {
    "text": "e",
    "start": "4074440",
    "end": "4077440"
  },
  {
    "text": "e",
    "start": "4104440",
    "end": "4107440"
  },
  {
    "text": "e",
    "start": "4134440",
    "end": "4137440"
  },
  {
    "text": "e",
    "start": "4164359",
    "end": "4167359"
  },
  {
    "text": "e",
    "start": "4194320",
    "end": "4197320"
  },
  {
    "text": "e",
    "start": "4224320",
    "end": "4227320"
  },
  {
    "text": "e",
    "start": "4254239",
    "end": "4257239"
  },
  {
    "text": "e",
    "start": "4284239",
    "end": "4287239"
  },
  {
    "text": "e",
    "start": "4314239",
    "end": "4317239"
  },
  {
    "text": "e",
    "start": "4344159",
    "end": "4347159"
  },
  {
    "text": "e",
    "start": "4374120",
    "end": "4377120"
  },
  {
    "text": "e",
    "start": "4404120",
    "end": "4407120"
  },
  {
    "text": "e",
    "start": "4434040",
    "end": "4437040"
  },
  {
    "text": "e",
    "start": "4464040",
    "end": "4467040"
  },
  {
    "text": "e",
    "start": "4494000",
    "end": "4497000"
  },
  {
    "text": "e",
    "start": "4523960",
    "end": "4526960"
  },
  {
    "text": "e",
    "start": "4553920",
    "end": "4556920"
  },
  {
    "text": "e",
    "start": "4583920",
    "end": "4586920"
  },
  {
    "text": "e",
    "start": "4613840",
    "end": "4616840"
  },
  {
    "text": "e",
    "start": "4643840",
    "end": "4646840"
  },
  {
    "text": "e e",
    "start": "4673840",
    "end": "4677800"
  }
]