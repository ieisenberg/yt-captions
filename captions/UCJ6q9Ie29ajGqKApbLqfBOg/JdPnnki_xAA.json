[
  {
    "start": "0",
    "end": "67000"
  },
  {
    "text": "[Music]",
    "start": "1130",
    "end": "13679"
  },
  {
    "text": "welcome everyone to our presentation today called enter sandbox before we start with the content of our presentation let us briefly introduce",
    "start": "13679",
    "end": "20320"
  },
  {
    "text": "ourselves my name is claudio canella i'm a phd candidate at guards university of technology if you ever want to reach out",
    "start": "20320",
    "end": "26880"
  },
  {
    "text": "to me ask some questions feel free to do so on twitter or simply send me an email hi so",
    "start": "26880",
    "end": "33120"
  },
  {
    "text": "my name is matthew weiner i'm a i was a phd at carter university of technology as well when conducting this",
    "start": "33120",
    "end": "39600"
  },
  {
    "text": "research and now i'm a hardware design engineer at nxp semiconductors so if you want to reach me have a look at my",
    "start": "39600",
    "end": "46000"
  },
  {
    "text": "homepage and you find the contact information there hi my name is michael schwarz i'm a",
    "start": "46000",
    "end": "52960"
  },
  {
    "text": "faculty at cisco helmholtz center for information security also if you have some questions feel",
    "start": "52960",
    "end": "58559"
  },
  {
    "text": "free to always reach out to me on twitter via mail or ask questions after",
    "start": "58559",
    "end": "64239"
  },
  {
    "text": "our talk so what is this talk about we already know that memory safety",
    "start": "64239",
    "end": "71040"
  },
  {
    "start": "67000",
    "end": "67000"
  },
  {
    "text": "vulnerabilities they are quite common so everything is quite buggy we have",
    "start": "71040",
    "end": "76640"
  },
  {
    "text": "vulnerabilities everywhere and there's this nice technique of sandboxing that helps in limiting the",
    "start": "76640",
    "end": "84400"
  },
  {
    "text": "impact of vulnerabilities that's something that we really want to use in all these applications",
    "start": "84400",
    "end": "91520"
  },
  {
    "text": "that could have bugs and are a target for exploitation like browsers for example",
    "start": "91520",
    "end": "98079"
  },
  {
    "text": "and if we are on linux there's already a nice technique the segcomp filters",
    "start": "98079",
    "end": "104240"
  },
  {
    "text": "and they allow us to sandbox an application so that they only have limited access to system codes",
    "start": "104240",
    "end": "112240"
  },
  {
    "text": "but this is still something we'd have to do manually so the question is can we automate that",
    "start": "112240",
    "end": "120159"
  },
  {
    "text": "can we get sandboxing in more applications than we have right now",
    "start": "120159",
    "end": "125840"
  },
  {
    "text": "a few months ago so i was coding",
    "start": "125840",
    "end": "131360"
  },
  {
    "text": "a little application i needed a small application to copy some files around",
    "start": "131360",
    "end": "136720"
  },
  {
    "text": "and i wrote that in my favorite language in c of course i know if i write applications",
    "start": "136720",
    "end": "143680"
  },
  {
    "text": "in memory unsafe languages like c it's easy to make some mistakes to introduce bugs",
    "start": "143680",
    "end": "150640"
  },
  {
    "text": "maybe even exploitable bugs and that this is quite common we can see",
    "start": "150640",
    "end": "156319"
  },
  {
    "text": "that here for example in this plot so i looked at all these cves",
    "start": "156319",
    "end": "163200"
  },
  {
    "text": "regarding memory safety vulnerabilities things that were exploited in native",
    "start": "163200",
    "end": "168720"
  },
  {
    "text": "applications and we see we have quite a lot of them and these",
    "start": "168720",
    "end": "174400"
  },
  {
    "text": "are only the known ones that received an identifier i don't want to make this graph any",
    "start": "174400",
    "end": "181440"
  },
  {
    "text": "steeper so i'd like to not have any vulnerabilities in my code",
    "start": "181440",
    "end": "188319"
  },
  {
    "text": "so your application sounds to be perfect for seccomp so let me briefly introduce",
    "start": "188319",
    "end": "194000"
  },
  {
    "start": "194000",
    "end": "194000"
  },
  {
    "text": "what seccomp is with seccomp we have this application like for instance in your case your application for copying",
    "start": "194000",
    "end": "200560"
  },
  {
    "text": "files and typically it just wants to perform some system calls to perform its task so",
    "start": "200560",
    "end": "206480"
  },
  {
    "text": "you identify the system calls that your application does or does need and it installs the",
    "start": "206480",
    "end": "212799"
  },
  {
    "text": "filters in the kernel so it just says if you get an open system call please allow",
    "start": "212799",
    "end": "218080"
  },
  {
    "text": "it so we get the system call then after the filters have been installed the application performs for instance this",
    "start": "218080",
    "end": "224480"
  },
  {
    "text": "open system call the operating system the linux kernel checks within the",
    "start": "224480",
    "end": "229760"
  },
  {
    "text": "filters if the system call is allowed if it is not it is simply going to terminate your application",
    "start": "229760",
    "end": "236400"
  },
  {
    "text": "because it might have been exploited in some way or form and if it's allowed",
    "start": "236400",
    "end": "241439"
  },
  {
    "text": "then simply if we allowed or the system call is executed and we return",
    "start": "241439",
    "end": "248239"
  },
  {
    "text": "that indeed sounds fascinating so from the basic idea i get it",
    "start": "248239",
    "end": "255519"
  },
  {
    "text": "but i just seriously audio so i looked at that so he explained it so nicely and i",
    "start": "255519",
    "end": "261120"
  },
  {
    "start": "257000",
    "end": "257000"
  },
  {
    "text": "felt like that's a plug-in solution i just put it into my application",
    "start": "261120",
    "end": "266720"
  },
  {
    "text": "but then i found some tutorials and it looks like that so that looks",
    "start": "266720",
    "end": "272080"
  },
  {
    "text": "nothing like c code or anything i know that looks more like some",
    "start": "272080",
    "end": "277199"
  },
  {
    "text": "type of pseudo assembly stitched together using c macros and it's",
    "start": "277199",
    "end": "283360"
  },
  {
    "text": "horrible to read and even worse to write that so",
    "start": "283360",
    "end": "288400"
  },
  {
    "text": "i don't know so it sounds cool but i have no idea how i should come up with things like that i mean it might work",
    "start": "288400",
    "end": "295280"
  },
  {
    "text": "for a simple hello world application but for anything larger i don't know",
    "start": "295280",
    "end": "300560"
  },
  {
    "text": "well yes that's because that you use the bpf filters directly the filters are",
    "start": "300560",
    "end": "305759"
  },
  {
    "text": "expressed in this language called ppf and it's really complicated but why not just use lipsec comp it's more or less",
    "start": "305759",
    "end": "313120"
  },
  {
    "text": "an rb it does everything for you in the background and it's really nice you have these functions you can just create a",
    "start": "313120",
    "end": "319120"
  },
  {
    "text": "context you call second rule add with the number of the system call or name of the system call that you want to perform",
    "start": "319120",
    "end": "326320"
  },
  {
    "text": "and it's done so why not just use that it's a lot more easier",
    "start": "326320",
    "end": "331680"
  },
  {
    "text": "okay that indeed sounds a bit more practical so i looked that up i looked at lipsec comp",
    "start": "331759",
    "end": "339360"
  },
  {
    "start": "332000",
    "end": "332000"
  },
  {
    "text": "and yes you are kind of right so it definitely looks easier than what",
    "start": "339360",
    "end": "346000"
  },
  {
    "text": "i tried to do before that's now actual c code with some functions",
    "start": "346000",
    "end": "351360"
  },
  {
    "text": "but still it doesn't look very nice and it looks super complicated and i had to",
    "start": "351360",
    "end": "356479"
  },
  {
    "text": "look up many things in there so we have something like the rt secret dern or",
    "start": "356479",
    "end": "362000"
  },
  {
    "text": "exit group open ad like why did i need all of that i mean",
    "start": "362000",
    "end": "368080"
  },
  {
    "text": "i don't really know but if i didn't add that it crashed so it must be necessary",
    "start": "368080",
    "end": "375360"
  },
  {
    "text": "and after a bit of research i figured out like these are the syscalls that are internally used by the code by the c",
    "start": "375360",
    "end": "382880"
  },
  {
    "text": "code and i have to figure out which syscalls my application uses",
    "start": "382880",
    "end": "388479"
  },
  {
    "text": "but how would i know that as a simple developer so i have cc functions",
    "start": "388479",
    "end": "394880"
  },
  {
    "start": "390000",
    "end": "390000"
  },
  {
    "text": "how can i map them to the syscalls that they actually use and",
    "start": "394880",
    "end": "400400"
  },
  {
    "text": "i would have to do that for the entire code base so again for hello world that's fine",
    "start": "400400",
    "end": "407600"
  },
  {
    "text": "but if i have a large application with thousands of lines of codes and multiple",
    "start": "407600",
    "end": "412800"
  },
  {
    "text": "files doing that for all the c functions checking which cisco they use",
    "start": "412800",
    "end": "419280"
  },
  {
    "text": "does that really sound feasible to you i know it doesn't to me",
    "start": "419280",
    "end": "424960"
  },
  {
    "text": "and then again typically i use some third party libraries and have a lot of code again",
    "start": "424960",
    "end": "431120"
  },
  {
    "text": "so i would also have to do that for all the third party libraries really",
    "start": "431120",
    "end": "438479"
  },
  {
    "text": "you're right we need to do something about it so maybe we can come up with a solution for that",
    "start": "438560",
    "end": "444479"
  },
  {
    "text": "months of research and engineering later we came up with this solution that we",
    "start": "444479",
    "end": "449520"
  },
  {
    "text": "call chestnut and chestnut is more or less a two-phase approach so in the first phase we have this we call it p1",
    "start": "449520",
    "end": "456639"
  },
  {
    "text": "we have the static analysis and it's more as what you said we have to we take the source code of an application we use",
    "start": "456639",
    "end": "463440"
  },
  {
    "text": "our tool that we call source alizer it performs some analysis and at the end it tells us what are the system calls",
    "start": "463440",
    "end": "470080"
  },
  {
    "text": "that it's the application is going to execute and in the other case maybe we just want",
    "start": "470080",
    "end": "475360"
  },
  {
    "text": "to we don't have the source code available and we only have the binaries so we also have a solution for that",
    "start": "475360",
    "end": "482160"
  },
  {
    "text": "we use our binary we use our tool called binalyzer and we again get this",
    "start": "482160",
    "end": "488080"
  },
  {
    "text": "these annotated files but this might not work entirely because",
    "start": "488080",
    "end": "493919"
  },
  {
    "text": "static analysis does have its problems so we have this optional second phase called the dynamic refinement phase",
    "start": "493919",
    "end": "501039"
  },
  {
    "text": "where we have a third part of our tool called finalizer and with this dynamic analyzer",
    "start": "501039",
    "end": "509120"
  },
  {
    "text": "we can simply do some runtime tracing of system calls and we can refine the system calls that we find",
    "start": "509120",
    "end": "516719"
  },
  {
    "text": "and we get again these annotated binary files that we can then use another tool called either chestnut patcher to",
    "start": "516719",
    "end": "523518"
  },
  {
    "text": "generate a sandbox binary or chestnut generator that generates us a wrapped binary",
    "start": "523519",
    "end": "529760"
  },
  {
    "text": "but that's a lot of information for just this one slide so maybe let's take a look a closer look at all",
    "start": "529760",
    "end": "536560"
  },
  {
    "text": "of these components individually let's start with the first part uh source eliza as i said we have these",
    "start": "536560",
    "end": "543920"
  },
  {
    "start": "539000",
    "end": "539000"
  },
  {
    "text": "source files like for instance you're copying files code",
    "start": "543920",
    "end": "549200"
  },
  {
    "text": "we simply pass it through our extended compiler we extract the system call number there",
    "start": "549200",
    "end": "555680"
  },
  {
    "text": "then we need to build up some call graph we need to know which function calls which so that we can extract the correct",
    "start": "555680",
    "end": "561200"
  },
  {
    "text": "system cause in the final binary after this we take the the object file that we have",
    "start": "561200",
    "end": "567200"
  },
  {
    "text": "we annotate it with the call graph that we found and the system calls that we found within this",
    "start": "567200",
    "end": "572720"
  },
  {
    "text": "this single file then we combine it in the linker with the additional libraries that we have",
    "start": "572720",
    "end": "579519"
  },
  {
    "text": "and we flatten this call graph we get the system call numbers out there for the whole binary that we actually need",
    "start": "579519",
    "end": "587600"
  },
  {
    "text": "and we generate this annotated executable and once we run it we're simply going to install the filters",
    "start": "587600",
    "end": "594000"
  },
  {
    "text": "sounds nice right you just need to use our extended compiler that we provide and your application is",
    "start": "594000",
    "end": "600240"
  },
  {
    "text": "sandboxed do you even know how challenging it is in practice i mean you make it sound really simple",
    "start": "600240",
    "end": "606480"
  },
  {
    "text": "no i don't know okay so um let me show you how this all works",
    "start": "606480",
    "end": "611920"
  },
  {
    "start": "610000",
    "end": "610000"
  },
  {
    "text": "with the help of one example so we take the most important program in computer science everyone knows it hello world",
    "start": "611920",
    "end": "618959"
  },
  {
    "text": "and the challenge or that we have that we want what we want to achieve is we",
    "start": "618959",
    "end": "624160"
  },
  {
    "text": "want to sandbox this application and you nicely explained we put it into the",
    "start": "624160",
    "end": "630000"
  },
  {
    "text": "compiler and he does all the work and we're done but if we really try and try it and look",
    "start": "630000",
    "end": "636560"
  },
  {
    "text": "at what the compiler actually sees it's not that simple because when you compile this program everything the compiler",
    "start": "636560",
    "end": "642640"
  },
  {
    "text": "sees is a call to a function called put string the compiler has no idea what this",
    "start": "642640",
    "end": "648880"
  },
  {
    "text": "function is where it has been defined what it does internally and he doesn't care",
    "start": "648880",
    "end": "654160"
  },
  {
    "text": "he only looks at one translation unit at a time so we can manually look up this bootstring function we find it in our c",
    "start": "654160",
    "end": "661120"
  },
  {
    "text": "library implementation looks something like that yeah on the first glance it's still",
    "start": "661120",
    "end": "667120"
  },
  {
    "text": "really complicated we have we see some function calls some macros there",
    "start": "667120",
    "end": "672560"
  },
  {
    "text": "yeah and when we can let the compiler do its work we see internally put string calls for other functions",
    "start": "672560",
    "end": "679279"
  },
  {
    "text": "but again nobody knows what these functions are to and yeah the compiler doesn't care",
    "start": "679279",
    "end": "686320"
  },
  {
    "text": "so one thing which we do in our tool in sourcalizer is that we extract all this",
    "start": "686320",
    "end": "691440"
  },
  {
    "text": "local information each translation unit only knows about the code it contains and uh what other functions it calls and",
    "start": "691440",
    "end": "698800"
  },
  {
    "text": "what we do here is we serialize this information in this case we simply pick json",
    "start": "698800",
    "end": "703920"
  },
  {
    "text": "and we embed this json into a node in the resulting object file so we can use elf",
    "start": "703920",
    "end": "710639"
  },
  {
    "text": "elf nodes there and just add arbitrary information in the second step the linker which",
    "start": "710639",
    "end": "717760"
  },
  {
    "text": "has the task of combining all these object files loads also this new node edit node sections",
    "start": "717760",
    "end": "723680"
  },
  {
    "text": "and uses this [Music] information fragments to recombine all",
    "start": "723680",
    "end": "729120"
  },
  {
    "text": "this information and construct a constitutional a counterflow graph or in this case a call graph",
    "start": "729120",
    "end": "736560"
  },
  {
    "text": "so when you look at the slides here we see main calls put string put string calls for other functions the one which",
    "start": "736560",
    "end": "743600"
  },
  {
    "text": "is important is f put string if we follow this path further we find",
    "start": "743600",
    "end": "748880"
  },
  {
    "text": "that this internally calls f write and f write again calls a few other",
    "start": "748880",
    "end": "753920"
  },
  {
    "text": "functions but we still have no idea where the actual syscalls are we haven't seen them here",
    "start": "753920",
    "end": "759440"
  },
  {
    "text": "the challenge is that f rat doesn't do a direct call to the next functions but an indirect function",
    "start": "759440",
    "end": "766240"
  },
  {
    "text": "call and again we cannot be sure which functions there",
    "start": "766240",
    "end": "771600"
  },
  {
    "text": "are called there and what we do here is we utilize again the compiler the",
    "start": "771600",
    "end": "777519"
  },
  {
    "text": "compiler knows which signatures are called so what arguments the",
    "start": "777519",
    "end": "783920"
  },
  {
    "text": "function get and what type they have and uh by collecting all the information which we have again",
    "start": "783920",
    "end": "790160"
  },
  {
    "text": "we find that he has to call in this case standard outright and in standard outright we",
    "start": "790160",
    "end": "795760"
  },
  {
    "text": "really have the cisco so calling cisco 16 for an io control and syscall 20 in the",
    "start": "795760",
    "end": "802399"
  },
  {
    "text": "standard ao write is the write operation all which is left then is to back propagate this information up the call",
    "start": "802399",
    "end": "809440"
  },
  {
    "text": "graph and then we know what this is called main users so to summarize the key aspects that",
    "start": "809440",
    "end": "816800"
  },
  {
    "start": "815000",
    "end": "815000"
  },
  {
    "text": "socializer uses are that we use each tool",
    "start": "816800",
    "end": "822320"
  },
  {
    "text": "for what it's best at we use the compiler for extracting information he has access to like the syscalls and",
    "start": "822320",
    "end": "828160"
  },
  {
    "text": "function names and signatures we emit all this stuff into the object file and then recombine it in the call",
    "start": "828160",
    "end": "834800"
  },
  {
    "text": "graph into a call graph as part of the linker additionally we use link time garbage collection to reduce the number",
    "start": "834800",
    "end": "841600"
  },
  {
    "text": "of reachable functions which helps with this indirect function call handling and",
    "start": "841600",
    "end": "848320"
  },
  {
    "text": "the function called signature heuristic which i mentioned before to figure out which functions are called indirectly",
    "start": "848320",
    "end": "855360"
  },
  {
    "text": "and the result of that is that no time consuming whole program analysis is needed so we can",
    "start": "855360",
    "end": "861040"
  },
  {
    "text": "do this all much faster than our previous related work i think that's a very interesting idea",
    "start": "861040",
    "end": "866800"
  },
  {
    "text": "but the question that pretty much everyone is asking themselves is does this really work or is it just working",
    "start": "866800",
    "end": "872480"
  },
  {
    "text": "for like a small example like hello world uh yeah so i was expecting that of course you are always um",
    "start": "872480",
    "end": "878959"
  },
  {
    "text": "quite skeptical with this stuff so yeah we tried that of course and as an",
    "start": "878959",
    "end": "885040"
  },
  {
    "text": "example we also tried it on ffmpeg so you have all this video encoding stuff in there you have parsers",
    "start": "885040",
    "end": "892800"
  },
  {
    "text": "a lot of potential uh vulnerable spaces where vulnerabilities would be bad and we compiled it with our",
    "start": "892800",
    "end": "899360"
  },
  {
    "text": "source analyzer tool and got the sandbox binary we have a quick video here which shows",
    "start": "899360",
    "end": "904720"
  },
  {
    "text": "when we start this application first we look at what this calls were found in this case 63 cisco's very",
    "start": "904720",
    "end": "911760"
  },
  {
    "text": "extracted and when we start the application with a debug flag we again print",
    "start": "911760",
    "end": "918399"
  },
  {
    "text": "what syscalls have been found which we are used for setting up the second filters",
    "start": "918399",
    "end": "923920"
  },
  {
    "text": "and yeah the application simply runs that's really nice resize so i have to",
    "start": "923920",
    "end": "929199"
  },
  {
    "text": "say i use that on my simple application and it still works flawlessly so it seems it",
    "start": "929199",
    "end": "936240"
  },
  {
    "text": "perfectly sandboxed that but i'm still not fully satisfied",
    "start": "936240",
    "end": "941440"
  },
  {
    "text": "so i have this old software lying around here that looks a bit shady i'm not sure how",
    "start": "941440",
    "end": "948560"
  },
  {
    "text": "secure it is maybe it even has backdoors or something and",
    "start": "948560",
    "end": "954399"
  },
  {
    "text": "i can't really tell because i don't have the source code i only have this binary here i would like to also sandbox that",
    "start": "954399",
    "end": "961920"
  },
  {
    "text": "to make it a bit more secure at least at least so",
    "start": "961920",
    "end": "966959"
  },
  {
    "text": "i can't do that with your compiler right it requires source code as every compiler so what do you do if i only",
    "start": "966959",
    "end": "972880"
  },
  {
    "text": "have a binary well you obviously did not pay attention to what i said in the beginning we also have this binary",
    "start": "972880",
    "end": "978560"
  },
  {
    "text": "analysis tool that allows you to do exactly what you want here so we have the spinalizer it extracts the",
    "start": "978560",
    "end": "984480"
  },
  {
    "start": "979000",
    "end": "979000"
  },
  {
    "text": "system calls from existing binaries or libraries and for that it simply uses the capstone",
    "start": "984480",
    "end": "990959"
  },
  {
    "text": "framework so it disassembles the binary so that we get all the assembly instructions and users so we can find",
    "start": "990959",
    "end": "997199"
  },
  {
    "text": "the system calls there and then we use the anchor tool to build a call graph again and extract the",
    "start": "997199",
    "end": "1002959"
  },
  {
    "text": "system calls that are actually needed for the for the binary but claudio how does this work in detail i mean is",
    "start": "1002959",
    "end": "1009199"
  },
  {
    "text": "called finding them sounds complicated it is a little bit complicated so let me",
    "start": "1009199",
    "end": "1014320"
  },
  {
    "text": "briefly walk you through this so what we do is we rely on symbolic backwards execution we look through the",
    "start": "1014320",
    "end": "1020639"
  },
  {
    "text": "disassembly binary until we find the system call instruction and duplica",
    "start": "1020639",
    "end": "1025678"
  },
  {
    "text": "typically the system call is executed is in the rax register of",
    "start": "1025679",
    "end": "1032319"
  },
  {
    "text": "of the cpu so you move at one point the request number into that register",
    "start": "1032319",
    "end": "1038240"
  },
  {
    "text": "perform the systemcalling structure and the operat and the system handles the rest for you",
    "start": "1038240",
    "end": "1043360"
  },
  {
    "text": "but we need to find this so we you we look for the system calling structure and",
    "start": "1043360",
    "end": "1048558"
  },
  {
    "text": "when we find it in this case we simply don't know yet what is the value of our x so we keep the value symbolic and we",
    "start": "1048559",
    "end": "1055039"
  },
  {
    "text": "move back up a couple instructions because at one point we are going to find this move in structure",
    "start": "1055039",
    "end": "1061280"
  },
  {
    "text": "but in the first two lines that we look at we don't really find it but at one point we see that we have this moth ebx",
    "start": "1061280",
    "end": "1067760"
  },
  {
    "text": "to eax register well that simply that still does not tell us what is the",
    "start": "1067760",
    "end": "1072799"
  },
  {
    "text": "actual syscall that is executed because suddenly eax is ebx so we need to keep the value further symbolic but we now",
    "start": "1072799",
    "end": "1079520"
  },
  {
    "text": "know that rex is equal to rbx which we don't know the value yet so we continue",
    "start": "1079520",
    "end": "1085120"
  },
  {
    "text": "our search we don't learn anything else in the next line but at one point we'll see that the",
    "start": "1085120",
    "end": "1091280"
  },
  {
    "text": "uh we see a muff instruction where the value 1 is moved into the bl register so",
    "start": "1091280",
    "end": "1096480"
  },
  {
    "text": "the lower part of the ebx register so at this point we can now infer that",
    "start": "1096480",
    "end": "1103360"
  },
  {
    "text": "rax is equals to rbx which is equals to 1. so we know that the syst call that is being executed is this call number one",
    "start": "1103360",
    "end": "1112240"
  },
  {
    "text": "and so help me out there do i have to do that manually no the system so our tool",
    "start": "1112240",
    "end": "1118000"
  },
  {
    "text": "does all of that automatically for you you just give it as an input the",
    "start": "1118000",
    "end": "1123280"
  },
  {
    "text": "uh your binary we pass the binary so that we find all uh the dynamic dependencies of it",
    "start": "1123280",
    "end": "1129679"
  },
  {
    "text": "and it finds the system calls we built the call graph with anger and",
    "start": "1129679",
    "end": "1135280"
  },
  {
    "text": "using this tool we can then get the system call mapping where we know for instance that the puts function",
    "start": "1135280",
    "end": "1141600"
  },
  {
    "start": "1139000",
    "end": "1139000"
  },
  {
    "text": "needs right v um the default function is going to need right v sysclone and cisfutex system",
    "start": "1141600",
    "end": "1148320"
  },
  {
    "text": "calls so all of that is done automatically for you and we can also show you again using a video",
    "start": "1148320",
    "end": "1155120"
  },
  {
    "text": "how this is done for this we use the application radius and we applied our binary analysis tool to",
    "start": "1155120",
    "end": "1161440"
  },
  {
    "text": "it and executed the test suite of the application and as you can see",
    "start": "1161440",
    "end": "1167280"
  },
  {
    "text": "not a single one of these test cases fails so it seems like we find all the necessary",
    "start": "1167280",
    "end": "1173600"
  },
  {
    "text": "system calls for our application i trusted you with that so i applied",
    "start": "1173600",
    "end": "1179679"
  },
  {
    "text": "that to my legacy application that i only have a binary and",
    "start": "1179679",
    "end": "1185360"
  },
  {
    "text": "surprisingly that happened it just crashed it stopped working so it doesn't",
    "start": "1185360",
    "end": "1191520"
  },
  {
    "text": "work your vinylizer thingy destroyed the application so it's now",
    "start": "1191520",
    "end": "1196559"
  },
  {
    "text": "completely broken so why what is happening here you explained",
    "start": "1196559",
    "end": "1202240"
  },
  {
    "text": "it so nicely it made sense but apparently it doesn't work yeah michael i think you've found a corner",
    "start": "1202240",
    "end": "1208960"
  },
  {
    "text": "case there which we simply cannot handle so i mean seconds second filter if you you",
    "start": "1208960",
    "end": "1216320"
  },
  {
    "text": "configure them statically it's not possible to relax them anymore i mean that's a nice property for",
    "start": "1216320",
    "end": "1223760"
  },
  {
    "text": "uh for having uh for ensuring that a pr application doesn't gain additional",
    "start": "1223760",
    "end": "1229360"
  },
  {
    "text": "privileges but in this case um it's really not not ideal",
    "start": "1229360",
    "end": "1234700"
  },
  {
    "text": "[Applause] so what we actually have to do here is we need another approach i mean second",
    "start": "1234700",
    "end": "1240960"
  },
  {
    "text": "itself is nice if you know the static set but we need additional capabilities in",
    "start": "1240960",
    "end": "1246880"
  },
  {
    "text": "particular something like uh like this like an s trace approach where we see all the syscalls and can decide",
    "start": "1246880",
    "end": "1254320"
  },
  {
    "start": "1252000",
    "end": "1252000"
  },
  {
    "text": "during runtime if this belongs to the application or if it is a malicious syscall that we do not",
    "start": "1254320",
    "end": "1261200"
  },
  {
    "text": "expect we have a tool for that it's called",
    "start": "1261200",
    "end": "1266720"
  },
  {
    "text": "finalizer and what finalizer does is it basically",
    "start": "1266720",
    "end": "1272640"
  },
  {
    "text": "implements this estrace approach so we have we have a tracy uh which is the",
    "start": "1272640",
    "end": "1278159"
  },
  {
    "text": "application which we want to protect and we spawn a second process the tracer which monitors the syscalls of our",
    "start": "1278159",
    "end": "1285039"
  },
  {
    "text": "target application [Applause] what now happens when the application",
    "start": "1285039",
    "end": "1290720"
  },
  {
    "text": "makes a syscall the kernel automatically delegates this decision if the syscall is okay or not",
    "start": "1290720",
    "end": "1296159"
  },
  {
    "text": "to our tracing application here we can lock the syscall we can",
    "start": "1296159",
    "end": "1302240"
  },
  {
    "text": "theoretically decide if it's okay to do it or not or simply uh take notes and lock that the cisco took",
    "start": "1302240",
    "end": "1309360"
  },
  {
    "text": "place and use that information for further refinement later on afterwards we",
    "start": "1309360",
    "end": "1315760"
  },
  {
    "text": "the tracer that compo the monitoring component uh returns to",
    "start": "1315760",
    "end": "1322000"
  },
  {
    "text": "the kernel and says okay the application is allowed to do the syscall and then the kernel performs the actual operation",
    "start": "1322000",
    "end": "1330480"
  },
  {
    "text": "um so when we look how where we implemented that we basically designed a",
    "start": "1331520",
    "end": "1337440"
  },
  {
    "start": "1335000",
    "end": "1335000"
  },
  {
    "text": "new small utility library look called a lib chestnut this library",
    "start": "1337440",
    "end": "1343120"
  },
  {
    "text": "is in charge of setting up second filters on application start and it also",
    "start": "1343120",
    "end": "1348960"
  },
  {
    "text": "implements this finalizer approach which i discussed on the previous slide",
    "start": "1348960",
    "end": "1354000"
  },
  {
    "text": "the way it works is it registers a constructor basically as",
    "start": "1354480",
    "end": "1359679"
  },
  {
    "text": "i've constructed a function like like in c in a c plus plus program but in this case in a c program",
    "start": "1359679",
    "end": "1366240"
  },
  {
    "text": "which is automatically called on program startup and in this constructor we set up the sync up filters",
    "start": "1366240",
    "end": "1373360"
  },
  {
    "text": "additionally source socializer which we introduced before uh automatically links to this library so all you have to do",
    "start": "1373360",
    "end": "1379760"
  },
  {
    "text": "there is to use the uh the sandboxing flag and of the compiler and you get the completely protected",
    "start": "1379760",
    "end": "1386080"
  },
  {
    "text": "binary at the end so the question here is then what about binalyzer in binalyzer we cannot simply",
    "start": "1386080",
    "end": "1393440"
  },
  {
    "text": "link against it right so when we think back to the overview that i gave earlier we had these two other",
    "start": "1393440",
    "end": "1400240"
  },
  {
    "text": "tools there chestnut patcher and chestnut generator so they can be used for this",
    "start": "1400240",
    "end": "1405919"
  },
  {
    "start": "1402000",
    "end": "1402000"
  },
  {
    "text": "so chestnut patcher more or less uses the information that is provided the number of system calls that are",
    "start": "1405919",
    "end": "1411520"
  },
  {
    "text": "being executed or that need to be allowed and directly patches the binary includes them in a node section and also",
    "start": "1411520",
    "end": "1419039"
  },
  {
    "text": "links against a lipsec comp and lip chestnut so more or less you then have",
    "start": "1419039",
    "end": "1424640"
  },
  {
    "text": "the same thing as you have with a socializer the other approach would be to use",
    "start": "1424640",
    "end": "1429840"
  },
  {
    "text": "chestnut generator so instead of patching the binary",
    "start": "1429840",
    "end": "1435120"
  },
  {
    "text": "we create like a wrapper program that launches that sets up all the filters using lipsec comp and our lip chestnut",
    "start": "1435120",
    "end": "1442960"
  },
  {
    "text": "and then launches the binary okay yeah so that's pretty nice",
    "start": "1442960",
    "end": "1452480"
  },
  {
    "text": "so i can apply that to all my applications now right yes",
    "start": "1452640",
    "end": "1458880"
  },
  {
    "text": "okay and yes this time it really works so i have to admit i'm a bit surprised by",
    "start": "1458880",
    "end": "1465279"
  },
  {
    "text": "that but it actually works but i mean still you do a lot of stuff",
    "start": "1465279",
    "end": "1471440"
  },
  {
    "text": "you figure out syscalls uh you have to do static analysis some dynamic analysis symbolic execution",
    "start": "1471440",
    "end": "1480640"
  },
  {
    "text": "that's a lot also adding all these filters so isn't it going to be super slow",
    "start": "1480720",
    "end": "1488000"
  },
  {
    "text": "well we obviously put some thought into that and performed some evaluation of all this so we looked",
    "start": "1488000",
    "end": "1494640"
  },
  {
    "text": "at the performance of our tools in extracting the system call information that we need we also evaluated the functional",
    "start": "1494640",
    "end": "1501039"
  },
  {
    "text": "correctness so our tools actually still able to do what they want or what they need to do",
    "start": "1501039",
    "end": "1506720"
  },
  {
    "text": "and we also looked at the security because in the end that's what we are most interested in when we use second we",
    "start": "1506720",
    "end": "1513440"
  },
  {
    "text": "want to improve the overall security of the system and for that we looked at clients server",
    "start": "1513440",
    "end": "1519039"
  },
  {
    "text": "and database applications and in total those were like 18 applications that we analyzed",
    "start": "1519039",
    "end": "1525520"
  },
  {
    "text": "throughout this client server and database applications and when we look at first the",
    "start": "1525520",
    "end": "1531120"
  },
  {
    "text": "performance of our tools we only provide the worst compile time overhead here and we observed this for",
    "start": "1531120",
    "end": "1538159"
  },
  {
    "start": "1532000",
    "end": "1532000"
  },
  {
    "text": "the git application and there we observed an overhead of 28",
    "start": "1538159",
    "end": "1543600"
  },
  {
    "text": "28 sounds quite high but you know total that was like 19 seconds of overhead and",
    "start": "1543600",
    "end": "1550159"
  },
  {
    "text": "it's actually quite fast when you compare it to uh concurrent work",
    "start": "1550159",
    "end": "1556158"
  },
  {
    "text": "then for the worst binary extraction time we observed us for ffmpeg it's the largest application that we looked at i",
    "start": "1556240",
    "end": "1562880"
  },
  {
    "text": "think the binary was like 100 megabytes and there it took 11 minutes to extract it using our analyzer",
    "start": "1562880",
    "end": "1570880"
  },
  {
    "text": "all we discussed up till up until now is is basically overhead which we have at compile time or after",
    "start": "1570880",
    "end": "1578159"
  },
  {
    "start": "1571000",
    "end": "1571000"
  },
  {
    "text": "in a pre-processing step before we actually launch the application but there is other overhead as well which we",
    "start": "1578159",
    "end": "1584720"
  },
  {
    "text": "should at least mention in terms of runtime and especially so",
    "start": "1584720",
    "end": "1590640"
  },
  {
    "text": "chestnut itself doesn't add anything in regards of overhead during execution but we still use",
    "start": "1590640",
    "end": "1597200"
  },
  {
    "text": "seccomp and seccomp is not the fastest if we are completely honest",
    "start": "1597200",
    "end": "1603039"
  },
  {
    "text": "um but there is work ongoing uh to improve this situation so it's not really in the scope of our work",
    "start": "1603039",
    "end": "1609440"
  },
  {
    "text": "but every improvement which goes into seccomp which is part of the linux kernel itself uh",
    "start": "1609440",
    "end": "1616000"
  },
  {
    "text": "automatically also improves our final solution which is nice i guess",
    "start": "1616000",
    "end": "1622240"
  },
  {
    "text": "so that's great so now let's take a closer look at the functional correctness i mean that's",
    "start": "1622240",
    "end": "1628000"
  },
  {
    "text": "after security probably one of developers are most interested because if your application doesn't work anymore",
    "start": "1628000",
    "end": "1634640"
  },
  {
    "start": "1629000",
    "end": "1629000"
  },
  {
    "text": "what's the security worth um so for that we relied on the application's",
    "start": "1634640",
    "end": "1640320"
  },
  {
    "text": "test suites for our checks so we were not able to test pretty much all of them but because they simply did",
    "start": "1640320",
    "end": "1647440"
  },
  {
    "text": "not have test suites available but we used those that had some available and",
    "start": "1647440",
    "end": "1654240"
  },
  {
    "text": "let those run and that just checked did these test tweets complete",
    "start": "1654240",
    "end": "1659279"
  },
  {
    "text": "successfully because if they did not then we might have made a mistake",
    "start": "1659279",
    "end": "1664320"
  },
  {
    "text": "to substantiate that we are actually looking at the majority of the application we looked at code coverage",
    "start": "1664320",
    "end": "1670640"
  },
  {
    "text": "metrics for uh for the better estimation of of the correctness",
    "start": "1670640",
    "end": "1676080"
  },
  {
    "text": "and there we've seen that in regards to line coverage we were close between 59",
    "start": "1676080",
    "end": "1681679"
  },
  {
    "text": "and 77 percent and for function coverage we were able to cover between 61 and 92",
    "start": "1681679",
    "end": "1688240"
  },
  {
    "text": "of the of the functions in these test suites so this might also be a point that we need",
    "start": "1688240",
    "end": "1693360"
  },
  {
    "text": "better test tweets but this is outside the scope of our work what we also looked at or what we've",
    "start": "1693360",
    "end": "1699919"
  },
  {
    "text": "seen in these tests is that we observed no crashes during these tests so i think this is nice it shows that at least for",
    "start": "1699919",
    "end": "1707120"
  },
  {
    "text": "the main parts that are covered by the test suites we are able to extract everything that is necessary",
    "start": "1707120",
    "end": "1712960"
  },
  {
    "text": "and additionally what we also did is we performed a six month long term study using ngn nginx hosting one of our",
    "start": "1712960",
    "end": "1719840"
  },
  {
    "text": "websites with it and we observed no crashes over those six",
    "start": "1719840",
    "end": "1724880"
  },
  {
    "text": "months okay so another important thing is of course the security you already mentioned it the whole point of this",
    "start": "1724880",
    "end": "1731039"
  },
  {
    "start": "1729000",
    "end": "1729000"
  },
  {
    "text": "research is to improve security and uh what we did to figure out how much we improved this",
    "start": "1731039",
    "end": "1738000"
  },
  {
    "text": "we looked at how many system calls has been blocked have been blocked by our tools so in particular when you look at the",
    "start": "1738000",
    "end": "1744799"
  },
  {
    "text": "socializer approach we were able to block on average 87 of the syscalls",
    "start": "1744799",
    "end": "1750159"
  },
  {
    "text": "which the linux kernel provides which is of course a really nice improvement already",
    "start": "1750159",
    "end": "1755440"
  },
  {
    "text": "quite similarly uh by analyzer also was able to block 83",
    "start": "1755440",
    "end": "1760880"
  },
  {
    "text": "of the sys calls on average which drastically reduces the attack surface of the kernel",
    "start": "1760880",
    "end": "1767520"
  },
  {
    "text": "when we look at uh exec which is one particular [Applause]",
    "start": "1767520",
    "end": "1772559"
  },
  {
    "text": "system call which is quite dangerous in in terms of security results were a little bit worse but",
    "start": "1772559",
    "end": "1779360"
  },
  {
    "text": "still we were able to block it in nine out of our tested applications",
    "start": "1779360",
    "end": "1785200"
  },
  {
    "text": "using the compiler-based approach and even in 14 using vinylizer",
    "start": "1785200",
    "end": "1791840"
  },
  {
    "text": "similarly mprotect which makes it possible to change the execution permissions of a page in memory",
    "start": "1791840",
    "end": "1799200"
  },
  {
    "text": "we looked at that in particular and our socializer tool blocked this system call in 61",
    "start": "1799200",
    "end": "1805120"
  },
  {
    "text": "all that is nice but what we also did is we looked at mitigating real world exploits so we looked at the meteor",
    "start": "1805120",
    "end": "1812240"
  },
  {
    "start": "1811000",
    "end": "1811000"
  },
  {
    "text": "database looked for for cves that explicitly mentioned that they exploit some kernel vulnerability",
    "start": "1812240",
    "end": "1819360"
  },
  {
    "text": "that is triggered using a system call and there we found 175 uh cves that did exactly that we",
    "start": "1819360",
    "end": "1826880"
  },
  {
    "text": "analyzed those cves we found that some of them there is an alternative system call that might also be able to exploit",
    "start": "1826880",
    "end": "1833120"
  },
  {
    "text": "this vulnerability so we simply replace those with with them and got much larger",
    "start": "1833120",
    "end": "1838480"
  },
  {
    "text": "data sets there so roughly 345 cves in that when it comes to that",
    "start": "1838480",
    "end": "1844880"
  },
  {
    "text": "and then we just took our applications all these 18s that we had we compared the system calls that the cve relies on",
    "start": "1844880",
    "end": "1851760"
  },
  {
    "text": "what the exploit relies on cross-reference those with the system calls that are being allowed",
    "start": "1851760",
    "end": "1857120"
  },
  {
    "text": "and if we block the system call then we consider that this cve to be not exploitable via this",
    "start": "1857120",
    "end": "1865039"
  },
  {
    "text": "application and when we looked at the full cve so we can mitigate all of the variants of it",
    "start": "1865039",
    "end": "1870799"
  },
  {
    "text": "we were able to block 64 and 62 percent respectively using sources and binalyzer",
    "start": "1870799",
    "end": "1877360"
  },
  {
    "text": "and for the sub variants we were able to block even more so 75 and 72 percent",
    "start": "1877360",
    "end": "1884799"
  },
  {
    "text": "okay that's pretty impressive but while you explained that i wasn't listening",
    "start": "1888720",
    "end": "1894880"
  },
  {
    "text": "too much but i thought about some exploit technique that also injects those calls in existing",
    "start": "1894880",
    "end": "1902960"
  },
  {
    "text": "applications so as thinking about return oriented programming where i use existing code in an application to",
    "start": "1902960",
    "end": "1910480"
  },
  {
    "text": "exploit a program the idea is to simply if you have control in the application",
    "start": "1910480",
    "end": "1916880"
  },
  {
    "text": "because you exploited it to jump to existing parts of the application so called gadgets",
    "start": "1916880",
    "end": "1922559"
  },
  {
    "text": "that do part of the functionality and then return to the next gadget and so on",
    "start": "1922559",
    "end": "1927760"
  },
  {
    "start": "1925000",
    "end": "1925000"
  },
  {
    "text": "and you chain them together so these gashes could be as simple as getting some value from the stack into a",
    "start": "1927760",
    "end": "1933760"
  },
  {
    "text": "register or just executing a syscall",
    "start": "1933760",
    "end": "1939200"
  },
  {
    "text": "and with that couldn't i still exploit your sandbox application",
    "start": "1939200",
    "end": "1945679"
  },
  {
    "text": "i mean if i look at that in detail i'm suddenly using the stack pointer as the",
    "start": "1945679",
    "end": "1952480"
  },
  {
    "text": "instruction pointer because i have the addresses there for all the gadgets i use and then i'm returning into the",
    "start": "1952480",
    "end": "1958960"
  },
  {
    "text": "application itself i'm not loading any code i'm not executing anything with the x-axis caller i'm not using m protect",
    "start": "1958960",
    "end": "1965440"
  },
  {
    "text": "for anything so i'm just using existing code jump to that return again the stack",
    "start": "1965440",
    "end": "1971200"
  },
  {
    "text": "pointer access the instruction point to the next gadget i execute that return",
    "start": "1971200",
    "end": "1976240"
  },
  {
    "text": "back execute the next one and with that i can build my own code out of existing",
    "start": "1976240",
    "end": "1981919"
  },
  {
    "text": "code that can do arbitrary syscalls",
    "start": "1981919",
    "end": "1986880"
  },
  {
    "text": "but yeah mikey that's exactly the point you you can make arbitrary syscalls we",
    "start": "1987039",
    "end": "1992399"
  },
  {
    "text": "use something like returner and programming but at least in",
    "start": "1992399",
    "end": "1997440"
  },
  {
    "text": "with the second filtering we can prevent it on the kernel side so if you build a source code that was not originally in",
    "start": "1997440",
    "end": "2003519"
  },
  {
    "text": "the program and which our tools didn't find the application simply is terminated as",
    "start": "2003519",
    "end": "2009120"
  },
  {
    "text": "soon as you try it this demo does pretty much we show here that it's actually sandboxed using our approach it reads",
    "start": "2009120",
    "end": "2015760"
  },
  {
    "text": "from some file and then we start our attack we crash the application we find out okay we can have some form of buffer",
    "start": "2015760",
    "end": "2023279"
  },
  {
    "text": "overflow there we perform a rub attack that tries to spawn a shell as we can see here with this pop-up",
    "start": "2023279",
    "end": "2029600"
  },
  {
    "text": "simply our uh our system has detected this and asked us to clarify hey is this",
    "start": "2029600",
    "end": "2036000"
  },
  {
    "text": "something that you actually want to do executing this okay so i think it's really the best to",
    "start": "2036000",
    "end": "2042880"
  },
  {
    "text": "just give it a try all our tools are open source you can find it on",
    "start": "2042880",
    "end": "2048000"
  },
  {
    "text": "github you find it under the url in the in the slides and it's the",
    "start": "2048000",
    "end": "2053520"
  },
  {
    "text": "best simply to try it out yourself and also when you're already looking up stuff",
    "start": "2053520",
    "end": "2058720"
  },
  {
    "text": "also check out our paper it contains much more information on how the techniques actually actually work",
    "start": "2058720",
    "end": "2064800"
  },
  {
    "text": "this really reduces this overhead this manual analysis overhead to actually",
    "start": "2064800",
    "end": "2070240"
  },
  {
    "start": "2065000",
    "end": "2065000"
  },
  {
    "text": "sandbox an application and make it secure by having this automated process",
    "start": "2070240",
    "end": "2077118"
  },
  {
    "text": "yes so that's very nice that we should through this automated process we were basically able to show that we can",
    "start": "2077119",
    "end": "2082560"
  },
  {
    "text": "improve the overall system security using no manual labor pretty much at all",
    "start": "2082560",
    "end": "2088800"
  },
  {
    "text": "i mean you need to modify some make files probably we were also able to show the functional",
    "start": "2088800",
    "end": "2095118"
  },
  {
    "text": "correctness using test suites showing that our applications using the chestnut sandbox approach still work",
    "start": "2095119",
    "end": "2101760"
  },
  {
    "text": "and we were only we were also able to show the chestnut only has a small performance overhead in your everyday",
    "start": "2101760",
    "end": "2108720"
  },
  {
    "text": "development cycle so that is something that should be developed further which",
    "start": "2108720",
    "end": "2114160"
  },
  {
    "text": "can help make systems a lot more secure without needing a lot of experts to do",
    "start": "2114160",
    "end": "2119920"
  },
  {
    "text": "that so thanks again all of you for being here for paying attention",
    "start": "2119920",
    "end": "2128359"
  }
]