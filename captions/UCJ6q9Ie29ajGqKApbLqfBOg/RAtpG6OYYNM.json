[
  {
    "start": "0",
    "end": "62000"
  },
  {
    "text": "[Music]",
    "start": "860",
    "end": "9840"
  },
  {
    "text": "hello and welcome to this session on",
    "start": "9840",
    "end": "11840"
  },
  {
    "text": "practical http header smartplane where",
    "start": "11840",
    "end": "14400"
  },
  {
    "text": "we're going to look at some of the ways",
    "start": "14400",
    "end": "15839"
  },
  {
    "text": "we can sneak http request headers past",
    "start": "15839",
    "end": "18400"
  },
  {
    "text": "reverse proxies",
    "start": "18400",
    "end": "19840"
  },
  {
    "text": "and some of the fun vulnerability",
    "start": "19840",
    "end": "22000"
  },
  {
    "text": "exploitation we can get as a result of",
    "start": "22000",
    "end": "23840"
  },
  {
    "text": "that but before we jump into that we",
    "start": "23840",
    "end": "25920"
  },
  {
    "text": "need to have the mandatory who am i side",
    "start": "25920",
    "end": "28000"
  },
  {
    "text": "so hello i'm daniel thatcher i work at a",
    "start": "28000",
    "end": "30560"
  },
  {
    "text": "company called intruder we're a",
    "start": "30560",
    "end": "32398"
  },
  {
    "text": "cloud-based vulnerability scanner",
    "start": "32399",
    "end": "33920"
  },
  {
    "text": "focused on making continuous monitoring",
    "start": "33920",
    "end": "35840"
  },
  {
    "text": "easy",
    "start": "35840",
    "end": "36719"
  },
  {
    "text": "i work there as a researcher as a",
    "start": "36719",
    "end": "38399"
  },
  {
    "text": "penetration tester as well as providing",
    "start": "38399",
    "end": "40559"
  },
  {
    "text": "some of the security expertise for the",
    "start": "40559",
    "end": "42320"
  },
  {
    "text": "platform",
    "start": "42320",
    "end": "44160"
  },
  {
    "text": "a lot of my research is focused on black",
    "start": "44160",
    "end": "46160"
  },
  {
    "text": "box scenarios as these are the ones i",
    "start": "46160",
    "end": "48160"
  },
  {
    "text": "find myself working most often and to me",
    "start": "48160",
    "end": "51039"
  },
  {
    "text": "they tend to be the most interesting",
    "start": "51039",
    "end": "53440"
  },
  {
    "text": "i've also got some links to our social",
    "start": "53440",
    "end": "55520"
  },
  {
    "text": "media and our research blogs",
    "start": "55520",
    "end": "57680"
  },
  {
    "text": "which you will be available at the end",
    "start": "57680",
    "end": "59520"
  },
  {
    "text": "of the presentation as well",
    "start": "59520",
    "end": "62559"
  },
  {
    "start": "62000",
    "end": "62000"
  },
  {
    "text": "so what are we going to talk about today",
    "start": "62559",
    "end": "64720"
  },
  {
    "text": "we're going to start a review of a",
    "start": "64720",
    "end": "66320"
  },
  {
    "text": "review of the model that we're using to",
    "start": "66320",
    "end": "68400"
  },
  {
    "text": "describe a modern worm applications",
    "start": "68400",
    "end": "70840"
  },
  {
    "text": "architecture we're then going to move on",
    "start": "70840",
    "end": "73040"
  },
  {
    "text": "to discussing what is actually header",
    "start": "73040",
    "end": "74720"
  },
  {
    "text": "smuggling",
    "start": "74720",
    "end": "76320"
  },
  {
    "text": "some talk about the detection of header",
    "start": "76320",
    "end": "78159"
  },
  {
    "text": "smuggling and then a look at some",
    "start": "78159",
    "end": "80000"
  },
  {
    "text": "applications",
    "start": "80000",
    "end": "81920"
  },
  {
    "text": "finally we'll finish off talking about",
    "start": "81920",
    "end": "83680"
  },
  {
    "text": "how to defend against head smuggling and",
    "start": "83680",
    "end": "85759"
  },
  {
    "text": "some conclusions and talk of where the",
    "start": "85759",
    "end": "87759"
  },
  {
    "text": "research can go in the future",
    "start": "87759",
    "end": "91200"
  },
  {
    "start": "91000",
    "end": "91000"
  },
  {
    "text": "so how is a modern web application set",
    "start": "91600",
    "end": "93920"
  },
  {
    "text": "up",
    "start": "93920",
    "end": "94720"
  },
  {
    "text": "well we're going to model it in this",
    "start": "94720",
    "end": "96159"
  },
  {
    "text": "talk as a front-end and a back-end",
    "start": "96159",
    "end": "98240"
  },
  {
    "text": "server",
    "start": "98240",
    "end": "99520"
  },
  {
    "text": "the front-end server is typically",
    "start": "99520",
    "end": "101200"
  },
  {
    "text": "responsible for duties such as caching",
    "start": "101200",
    "end": "104479"
  },
  {
    "text": "load balancing or acting as a web",
    "start": "104479",
    "end": "106880"
  },
  {
    "text": "application firewall whereas the backend",
    "start": "106880",
    "end": "109119"
  },
  {
    "text": "server is what actually runs the",
    "start": "109119",
    "end": "110799"
  },
  {
    "text": "application's code and logic is",
    "start": "110799",
    "end": "112880"
  },
  {
    "text": "responsible for accessing all the data",
    "start": "112880",
    "end": "115360"
  },
  {
    "text": "of the application",
    "start": "115360",
    "end": "117360"
  },
  {
    "text": "now it's really important to mention",
    "start": "117360",
    "end": "119200"
  },
  {
    "text": "that this is just a model",
    "start": "119200",
    "end": "121280"
  },
  {
    "text": "and in most scenarios including the ones",
    "start": "121280",
    "end": "123119"
  },
  {
    "text": "we'll see today it's actually a massive",
    "start": "123119",
    "end": "125280"
  },
  {
    "text": "oversimplification of reality",
    "start": "125280",
    "end": "127360"
  },
  {
    "text": "however this model allows us to",
    "start": "127360",
    "end": "129520"
  },
  {
    "text": "understand a lot of behavior we see and",
    "start": "129520",
    "end": "131920"
  },
  {
    "text": "allows us to move forward with",
    "start": "131920",
    "end": "133440"
  },
  {
    "text": "exploitation by assuming the setup is",
    "start": "133440",
    "end": "135840"
  },
  {
    "text": "like this",
    "start": "135840",
    "end": "137120"
  },
  {
    "text": "but if you find yourself in a situation",
    "start": "137120",
    "end": "139520"
  },
  {
    "text": "where you're trying to understand some",
    "start": "139520",
    "end": "140879"
  },
  {
    "text": "behavior this is an assumption worth",
    "start": "140879",
    "end": "143440"
  },
  {
    "text": "challenging as usually the front-end",
    "start": "143440",
    "end": "146239"
  },
  {
    "text": "servers could be a chain of more servers",
    "start": "146239",
    "end": "148720"
  },
  {
    "text": "they could be multiple back-end servers",
    "start": "148720",
    "end": "150800"
  },
  {
    "text": "or the setup could be more complex than",
    "start": "150800",
    "end": "152879"
  },
  {
    "text": "this in ways you couldn't even imagine",
    "start": "152879",
    "end": "157200"
  },
  {
    "text": "now generally front-end servers use http",
    "start": "157200",
    "end": "160480"
  },
  {
    "text": "headers to pass information to back-end",
    "start": "160480",
    "end": "162640"
  },
  {
    "text": "servers",
    "start": "162640",
    "end": "163840"
  },
  {
    "text": "a great example of this is the exported",
    "start": "163840",
    "end": "166080"
  },
  {
    "text": "four-header which front-end servers",
    "start": "166080",
    "end": "168160"
  },
  {
    "text": "typically put the client ip address in",
    "start": "168160",
    "end": "170400"
  },
  {
    "text": "so the back end servers can know the",
    "start": "170400",
    "end": "172400"
  },
  {
    "text": "initial ip address from which the",
    "start": "172400",
    "end": "173840"
  },
  {
    "text": "request originated",
    "start": "173840",
    "end": "175920"
  },
  {
    "text": "this makes it quite important for",
    "start": "175920",
    "end": "177519"
  },
  {
    "text": "front-end servers to actually filter out",
    "start": "177519",
    "end": "179920"
  },
  {
    "text": "headers such as these from the client's",
    "start": "179920",
    "end": "181599"
  },
  {
    "text": "request",
    "start": "181599",
    "end": "182720"
  },
  {
    "text": "otherwise as a user i'd be able to put",
    "start": "182720",
    "end": "185360"
  },
  {
    "text": "whatever value i wanted into the",
    "start": "185360",
    "end": "186879"
  },
  {
    "text": "exported four header and spoof my ip",
    "start": "186879",
    "end": "189200"
  },
  {
    "text": "address",
    "start": "189200",
    "end": "190239"
  },
  {
    "text": "so if the information these headers is",
    "start": "190239",
    "end": "191760"
  },
  {
    "text": "to be trusted the front end server needs",
    "start": "191760",
    "end": "193840"
  },
  {
    "text": "to validate it and filter some",
    "start": "193840",
    "end": "196319"
  },
  {
    "text": "information out if it was provided by",
    "start": "196319",
    "end": "198080"
  },
  {
    "text": "the clients",
    "start": "198080",
    "end": "200319"
  },
  {
    "text": "we also get some interesting situations",
    "start": "200319",
    "end": "203120"
  },
  {
    "text": "when the servers disagree about either",
    "start": "203120",
    "end": "205440"
  },
  {
    "text": "the value or the existence of a header",
    "start": "205440",
    "end": "207920"
  },
  {
    "text": "so one we've seen a lot of in recent",
    "start": "207920",
    "end": "209920"
  },
  {
    "text": "years is request smuggling",
    "start": "209920",
    "end": "211840"
  },
  {
    "text": "when servers disagree about either the",
    "start": "211840",
    "end": "213680"
  },
  {
    "text": "value or the existence the content",
    "start": "213680",
    "end": "215519"
  },
  {
    "text": "length and transfer encoding headers",
    "start": "215519",
    "end": "217760"
  },
  {
    "text": "this can often lead to request smuggling",
    "start": "217760",
    "end": "220560"
  },
  {
    "text": "similarly we'll also look at the",
    "start": "220560",
    "end": "222000"
  },
  {
    "text": "situation in this talk where this leads",
    "start": "222000",
    "end": "224000"
  },
  {
    "text": "to cash poisoning when two servers",
    "start": "224000",
    "end": "225760"
  },
  {
    "text": "disagree on the value of the header",
    "start": "225760",
    "end": "229200"
  },
  {
    "start": "229000",
    "end": "229000"
  },
  {
    "text": "now with that in mind what actually is",
    "start": "229840",
    "end": "232080"
  },
  {
    "text": "header smuggling",
    "start": "232080",
    "end": "233760"
  },
  {
    "text": "simply put it's the process of",
    "start": "233760",
    "end": "235360"
  },
  {
    "text": "disguising a header so that it will be",
    "start": "235360",
    "end": "237360"
  },
  {
    "text": "passed differently by different web",
    "start": "237360",
    "end": "238959"
  },
  {
    "text": "servers and in this research we're going",
    "start": "238959",
    "end": "241519"
  },
  {
    "text": "to focus on the situation where the",
    "start": "241519",
    "end": "243360"
  },
  {
    "text": "front-end server misses a header or",
    "start": "243360",
    "end": "245760"
  },
  {
    "text": "doesn't pass it",
    "start": "245760",
    "end": "247439"
  },
  {
    "text": "in the way that the back-end server does",
    "start": "247439",
    "end": "250400"
  },
  {
    "text": "and then the backend server passes it as",
    "start": "250400",
    "end": "252239"
  },
  {
    "text": "we want it to",
    "start": "252239",
    "end": "253519"
  },
  {
    "text": "without the front end server modifying",
    "start": "253519",
    "end": "255519"
  },
  {
    "text": "it",
    "start": "255519",
    "end": "257280"
  },
  {
    "text": "how do we discuss headers well we're",
    "start": "257280",
    "end": "258799"
  },
  {
    "text": "doing what i terms of mutation which is",
    "start": "258799",
    "end": "261600"
  },
  {
    "text": "simply a modification you can make to a",
    "start": "261600",
    "end": "263440"
  },
  {
    "text": "header to cause different servers to",
    "start": "263440",
    "end": "265520"
  },
  {
    "text": "pass it differently",
    "start": "265520",
    "end": "267440"
  },
  {
    "text": "so some examples of mutations include",
    "start": "267440",
    "end": "270080"
  },
  {
    "start": "270000",
    "end": "270000"
  },
  {
    "text": "the identity mutation where we do",
    "start": "270080",
    "end": "271840"
  },
  {
    "text": "nothing to the header so this x my",
    "start": "271840",
    "end": "273919"
  },
  {
    "text": "header test header here will look pretty",
    "start": "273919",
    "end": "276720"
  },
  {
    "text": "much as you'd expect a standard 80 to be",
    "start": "276720",
    "end": "278800"
  },
  {
    "text": "headed look",
    "start": "278800",
    "end": "280720"
  },
  {
    "text": "however if you use underscores in header",
    "start": "280720",
    "end": "282960"
  },
  {
    "text": "names it's quite common for some servers",
    "start": "282960",
    "end": "285680"
  },
  {
    "text": "to process it as it was the x my header",
    "start": "285680",
    "end": "288639"
  },
  {
    "text": "test header we had on the last slide",
    "start": "288639",
    "end": "290639"
  },
  {
    "text": "whereas some will see it as a different",
    "start": "290639",
    "end": "292080"
  },
  {
    "text": "header",
    "start": "292080",
    "end": "293680"
  },
  {
    "start": "293000",
    "end": "293000"
  },
  {
    "text": "similarly when we see a lot in request",
    "start": "293680",
    "end": "295360"
  },
  {
    "text": "smuggling is putting white space in",
    "start": "295360",
    "end": "297520"
  },
  {
    "text": "places around the header for example",
    "start": "297520",
    "end": "299120"
  },
  {
    "text": "here before the column and it's worth",
    "start": "299120",
    "end": "300960"
  },
  {
    "text": "noting at this point that a lot of these",
    "start": "300960",
    "end": "302479"
  },
  {
    "text": "mutations come from request smuggling",
    "start": "302479",
    "end": "304880"
  },
  {
    "text": "research as you may have recognized",
    "start": "304880",
    "end": "307120"
  },
  {
    "text": "already",
    "start": "307120",
    "end": "309039"
  },
  {
    "text": "another one we see quite commonly is",
    "start": "309039",
    "end": "310479"
  },
  {
    "text": "white space at the start of the header",
    "start": "310479",
    "end": "312720"
  },
  {
    "text": "and one we're going to see a lot of in",
    "start": "312720",
    "end": "314160"
  },
  {
    "start": "313000",
    "end": "313000"
  },
  {
    "text": "this talk",
    "start": "314160",
    "end": "315280"
  },
  {
    "text": "is including some random junk in the",
    "start": "315280",
    "end": "317520"
  },
  {
    "text": "header name after a space so some",
    "start": "317520",
    "end": "320479"
  },
  {
    "text": "servers will pass this header as a",
    "start": "320479",
    "end": "322800"
  },
  {
    "text": "header called x my header abcd",
    "start": "322800",
    "end": "325840"
  },
  {
    "text": "whereas others will just pass it as a",
    "start": "325840",
    "end": "327680"
  },
  {
    "text": "header called x my header with a value",
    "start": "327680",
    "end": "329919"
  },
  {
    "text": "of test",
    "start": "329919",
    "end": "332400"
  },
  {
    "start": "332000",
    "end": "332000"
  },
  {
    "text": "so this research set out to find a",
    "start": "333440",
    "end": "335440"
  },
  {
    "text": "methodology for detecting header",
    "start": "335440",
    "end": "337360"
  },
  {
    "text": "smuggling and there were two key aims of",
    "start": "337360",
    "end": "339440"
  },
  {
    "text": "this methodology",
    "start": "339440",
    "end": "341039"
  },
  {
    "text": "the first is that it would identify",
    "start": "341039",
    "end": "342720"
  },
  {
    "text": "mutations in a generic way where you",
    "start": "342720",
    "end": "345039"
  },
  {
    "text": "find a mutation independently of a",
    "start": "345039",
    "end": "346880"
  },
  {
    "text": "header so once a mutation has been found",
    "start": "346880",
    "end": "349840"
  },
  {
    "text": "we can apply it to any header to sneak",
    "start": "349840",
    "end": "351840"
  },
  {
    "text": "it through to the back end server",
    "start": "351840",
    "end": "353680"
  },
  {
    "text": "without being recognized by the",
    "start": "353680",
    "end": "354960"
  },
  {
    "text": "front-end server",
    "start": "354960",
    "end": "356880"
  },
  {
    "text": "the second aim was that it would work in",
    "start": "356880",
    "end": "358720"
  },
  {
    "text": "black box scenarios as i mentioned at",
    "start": "358720",
    "end": "360720"
  },
  {
    "text": "the top of the talk these are the",
    "start": "360720",
    "end": "362319"
  },
  {
    "text": "scenarios that i find myself in most",
    "start": "362319",
    "end": "364240"
  },
  {
    "text": "often and personally for my research",
    "start": "364240",
    "end": "366400"
  },
  {
    "text": "find most interesting so these are the",
    "start": "366400",
    "end": "368000"
  },
  {
    "text": "ones i chose to focus on",
    "start": "368000",
    "end": "371440"
  },
  {
    "text": "now i'm going to explain the methodology",
    "start": "371440",
    "end": "373199"
  },
  {
    "start": "372000",
    "end": "372000"
  },
  {
    "text": "through the use of an example so the",
    "start": "373199",
    "end": "375440"
  },
  {
    "text": "methodology works by testing one",
    "start": "375440",
    "end": "377360"
  },
  {
    "text": "mutation at a time and trying to",
    "start": "377360",
    "end": "379600"
  },
  {
    "text": "determine whether it can be used to",
    "start": "379600",
    "end": "381280"
  },
  {
    "text": "achieve header smuggling so in this",
    "start": "381280",
    "end": "383520"
  },
  {
    "text": "example we're looking at the mutation",
    "start": "383520",
    "end": "385120"
  },
  {
    "text": "which adds an abcd after the space to",
    "start": "385120",
    "end": "388080"
  },
  {
    "text": "the header name",
    "start": "388080",
    "end": "389440"
  },
  {
    "text": "and we're going to see",
    "start": "389440",
    "end": "390880"
  },
  {
    "text": "if the front-end server will process",
    "start": "390880",
    "end": "393120"
  },
  {
    "text": "this as a header other than a header",
    "start": "393120",
    "end": "395440"
  },
  {
    "text": "called x header",
    "start": "395440",
    "end": "396960"
  },
  {
    "text": "while the back end will still see it as",
    "start": "396960",
    "end": "398800"
  },
  {
    "text": "the x header header",
    "start": "398800",
    "end": "402240"
  },
  {
    "text": "so to start off the detection process",
    "start": "406720",
    "end": "409520"
  },
  {
    "text": "we use what may look like a fairly",
    "start": "409520",
    "end": "411440"
  },
  {
    "text": "normal request the only thing that might",
    "start": "411440",
    "end": "413759"
  },
  {
    "text": "stand out to you about slightly strange",
    "start": "413759",
    "end": "415199"
  },
  {
    "text": "in this request",
    "start": "415199",
    "end": "416560"
  },
  {
    "text": "is that it is a get request but it has a",
    "start": "416560",
    "end": "418720"
  },
  {
    "text": "content length header in there and the",
    "start": "418720",
    "end": "420400"
  },
  {
    "text": "value of the content length header is",
    "start": "420400",
    "end": "421919"
  },
  {
    "text": "set to zero so we're actually not",
    "start": "421919",
    "end": "423599"
  },
  {
    "text": "including a body",
    "start": "423599",
    "end": "425599"
  },
  {
    "text": "now most servers are completely fine",
    "start": "425599",
    "end": "427360"
  },
  {
    "text": "with this so as we can see here we get",
    "start": "427360",
    "end": "429840"
  },
  {
    "text": "to 200 okay indicating the response we",
    "start": "429840",
    "end": "432560"
  },
  {
    "text": "really expected for a get request to the",
    "start": "432560",
    "end": "434880"
  },
  {
    "text": "home page",
    "start": "434880",
    "end": "437280"
  },
  {
    "text": "the next step is to put an invalid value",
    "start": "437280",
    "end": "439520"
  },
  {
    "text": "in that content length header",
    "start": "439520",
    "end": "441680"
  },
  {
    "text": "and as we can see here unsurprisingly",
    "start": "441680",
    "end": "443919"
  },
  {
    "text": "this causes an error this indicates that",
    "start": "443919",
    "end": "446639"
  },
  {
    "text": "one of the servers in the chain is",
    "start": "446639",
    "end": "448000"
  },
  {
    "text": "trying to pass the content length header",
    "start": "448000",
    "end": "450080"
  },
  {
    "text": "and when it sees an invalid value such",
    "start": "450080",
    "end": "451919"
  },
  {
    "text": "as the z here it's going to throw an",
    "start": "451919",
    "end": "453759"
  },
  {
    "text": "error",
    "start": "453759",
    "end": "455759"
  },
  {
    "text": "now we repeat this process with our",
    "start": "455759",
    "end": "457759"
  },
  {
    "start": "456000",
    "end": "456000"
  },
  {
    "text": "mutated header",
    "start": "457759",
    "end": "459280"
  },
  {
    "text": "so here again we're putting this content",
    "start": "459280",
    "end": "461759"
  },
  {
    "text": "length value of zero in the mutated",
    "start": "461759",
    "end": "464400"
  },
  {
    "text": "content length at this time",
    "start": "464400",
    "end": "466319"
  },
  {
    "text": "and we get a response that we expect",
    "start": "466319",
    "end": "468319"
  },
  {
    "text": "without any errors",
    "start": "468319",
    "end": "470720"
  },
  {
    "text": "now when we put an invalid value in",
    "start": "470720",
    "end": "472639"
  },
  {
    "text": "there we again get an error so we know",
    "start": "472639",
    "end": "474960"
  },
  {
    "text": "that some server in the chain is passing",
    "start": "474960",
    "end": "477120"
  },
  {
    "text": "this",
    "start": "477120",
    "end": "479360"
  },
  {
    "text": "now there's a couple of key things to",
    "start": "479360",
    "end": "480879"
  },
  {
    "start": "480000",
    "end": "480000"
  },
  {
    "text": "look at here to determine whether we",
    "start": "480879",
    "end": "482560"
  },
  {
    "text": "have header smuggling",
    "start": "482560",
    "end": "484400"
  },
  {
    "text": "the first is a comparison between our",
    "start": "484400",
    "end": "486720"
  },
  {
    "text": "requests that set the content length to",
    "start": "486720",
    "end": "488560"
  },
  {
    "text": "zero it's quite important that these set",
    "start": "488560",
    "end": "491039"
  },
  {
    "text": "the same response",
    "start": "491039",
    "end": "492560"
  },
  {
    "text": "and using this we can know that our",
    "start": "492560",
    "end": "494479"
  },
  {
    "text": "mutated header",
    "start": "494479",
    "end": "495919"
  },
  {
    "text": "hasn't been so malformed that one of the",
    "start": "495919",
    "end": "497919"
  },
  {
    "text": "servers in the chain has rejected it or",
    "start": "497919",
    "end": "499759"
  },
  {
    "text": "refused to pass the request completely",
    "start": "499759",
    "end": "502240"
  },
  {
    "text": "every server has continued to pass the",
    "start": "502240",
    "end": "503919"
  },
  {
    "text": "request as a valid http request and",
    "start": "503919",
    "end": "506400"
  },
  {
    "text": "return the response we expect",
    "start": "506400",
    "end": "509599"
  },
  {
    "text": "we also need to compare the errors now",
    "start": "509599",
    "end": "511840"
  },
  {
    "start": "510000",
    "end": "510000"
  },
  {
    "text": "importantly here with our mutated",
    "start": "511840",
    "end": "514080"
  },
  {
    "text": "unmutated header when we put an invalid",
    "start": "514080",
    "end": "516320"
  },
  {
    "text": "value in them we get different errors",
    "start": "516320",
    "end": "519039"
  },
  {
    "text": "and this suggests that the errors are",
    "start": "519039",
    "end": "520719"
  },
  {
    "text": "coming from different servers which are",
    "start": "520719",
    "end": "522959"
  },
  {
    "text": "erroring when they see an invalid value",
    "start": "522959",
    "end": "525279"
  },
  {
    "text": "in the content length header",
    "start": "525279",
    "end": "527440"
  },
  {
    "text": "so one of our servers is reading the",
    "start": "527440",
    "end": "529279"
  },
  {
    "text": "content length unmutated header",
    "start": "529279",
    "end": "531600"
  },
  {
    "text": "whereas another one it seems to be",
    "start": "531600",
    "end": "533200"
  },
  {
    "text": "passing our mutated header",
    "start": "533200",
    "end": "536800"
  },
  {
    "text": "now as we know that",
    "start": "537120",
    "end": "539040"
  },
  {
    "text": "the server which is likely the front-end",
    "start": "539040",
    "end": "540880"
  },
  {
    "text": "server which is passing the unmutated",
    "start": "540880",
    "end": "543440"
  },
  {
    "text": "header",
    "start": "543440",
    "end": "544480"
  },
  {
    "text": "is not throwing an error",
    "start": "544480",
    "end": "546399"
  },
  {
    "text": "for our mutated header as we're getting",
    "start": "546399",
    "end": "548080"
  },
  {
    "text": "a different error back",
    "start": "548080",
    "end": "549839"
  },
  {
    "text": "this suggests that",
    "start": "549839",
    "end": "551600"
  },
  {
    "text": "that second error of the mutated header",
    "start": "551600",
    "end": "553360"
  },
  {
    "text": "is coming from a backend server",
    "start": "553360",
    "end": "555360"
  },
  {
    "text": "which is reading this while the front",
    "start": "555360",
    "end": "556959"
  },
  {
    "text": "end is ignoring that mutated header",
    "start": "556959",
    "end": "560160"
  },
  {
    "text": "so",
    "start": "560160",
    "end": "560959"
  },
  {
    "text": "we have a mutation which allows us to",
    "start": "560959",
    "end": "562959"
  },
  {
    "start": "561000",
    "end": "561000"
  },
  {
    "text": "sneak a header through to the back end",
    "start": "562959",
    "end": "564800"
  },
  {
    "text": "without the front end seeing it",
    "start": "564800",
    "end": "567040"
  },
  {
    "text": "where do we get from here",
    "start": "567040",
    "end": "568640"
  },
  {
    "text": "well sometimes we might know a header we",
    "start": "568640",
    "end": "570720"
  },
  {
    "text": "want to",
    "start": "570720",
    "end": "571680"
  },
  {
    "text": "test already and sneak through a great",
    "start": "571680",
    "end": "573839"
  },
  {
    "text": "example of this is the exported for",
    "start": "573839",
    "end": "575600"
  },
  {
    "text": "header where if we're coming across some",
    "start": "575600",
    "end": "577680"
  },
  {
    "text": "ip restrictions this might be a great",
    "start": "577680",
    "end": "579920"
  },
  {
    "text": "candidate to try and sneak through to",
    "start": "579920",
    "end": "581360"
  },
  {
    "text": "the back end to bypass these",
    "start": "581360",
    "end": "582800"
  },
  {
    "text": "restrictions",
    "start": "582800",
    "end": "584240"
  },
  {
    "text": "however",
    "start": "584240",
    "end": "585279"
  },
  {
    "text": "often we don't know a specific header",
    "start": "585279",
    "end": "587440"
  },
  {
    "text": "which will be interesting for our target",
    "start": "587440",
    "end": "589040"
  },
  {
    "text": "system and we just want to try guess as",
    "start": "589040",
    "end": "591120"
  },
  {
    "text": "many headers as possible",
    "start": "591120",
    "end": "593279"
  },
  {
    "text": "now for this in my research i've been",
    "start": "593279",
    "end": "595279"
  },
  {
    "text": "using an updated version of james",
    "start": "595279",
    "end": "597200"
  },
  {
    "text": "kettle's pram miner extension",
    "start": "597200",
    "end": "599360"
  },
  {
    "text": "which i will be releasing as well as",
    "start": "599360",
    "end": "601120"
  },
  {
    "text": "part of the research at the time of the",
    "start": "601120",
    "end": "602640"
  },
  {
    "text": "conference what this updated version",
    "start": "602640",
    "end": "605360"
  },
  {
    "text": "will do is it will search for mutations",
    "start": "605360",
    "end": "607680"
  },
  {
    "text": "which allow us to sneak a header through",
    "start": "607680",
    "end": "609360"
  },
  {
    "text": "to the back end",
    "start": "609360",
    "end": "610800"
  },
  {
    "text": "and then with each of those mutations it",
    "start": "610800",
    "end": "612800"
  },
  {
    "text": "finds",
    "start": "612800",
    "end": "613760"
  },
  {
    "text": "it will try every header that paraminer",
    "start": "613760",
    "end": "616240"
  },
  {
    "text": "will try anyway and see if it can",
    "start": "616240",
    "end": "618320"
  },
  {
    "text": "trigger some interesting behavior",
    "start": "618320",
    "end": "621760"
  },
  {
    "text": "so we're going to look at some examples",
    "start": "622959",
    "end": "624560"
  },
  {
    "text": "now",
    "start": "624560",
    "end": "625360"
  },
  {
    "text": "and the first one of these examples is",
    "start": "625360",
    "end": "626959"
  },
  {
    "text": "in aws api gateway",
    "start": "626959",
    "end": "629440"
  },
  {
    "text": "now api gateway is a service from aws",
    "start": "629440",
    "end": "632320"
  },
  {
    "text": "which allows you to build http apis",
    "start": "632320",
    "end": "635519"
  },
  {
    "text": "built on lambda functions which are aws",
    "start": "635519",
    "end": "638640"
  },
  {
    "text": "version of serverless functions",
    "start": "638640",
    "end": "641680"
  },
  {
    "text": "in essence you run the code for your",
    "start": "641680",
    "end": "643839"
  },
  {
    "text": "function without having to maintain any",
    "start": "643839",
    "end": "645440"
  },
  {
    "text": "of the infrastructure and you only pay",
    "start": "645440",
    "end": "647600"
  },
  {
    "text": "for the execution time of your function",
    "start": "647600",
    "end": "651120"
  },
  {
    "text": "now if you want to limit ip access to",
    "start": "651120",
    "end": "653680"
  },
  {
    "text": "one of these",
    "start": "653680",
    "end": "655519"
  },
  {
    "text": "functions or one of these apis you use",
    "start": "655519",
    "end": "658000"
  },
  {
    "text": "what's called a resource policy which",
    "start": "658000",
    "end": "660079"
  },
  {
    "text": "you apply to your api gateway service",
    "start": "660079",
    "end": "663920"
  },
  {
    "text": "i have an example of the resource policy",
    "start": "663920",
    "end": "665600"
  },
  {
    "text": "here which may be of interest to some of",
    "start": "665600",
    "end": "667360"
  },
  {
    "text": "you more familiar with aws",
    "start": "667360",
    "end": "669519"
  },
  {
    "text": "but the important part here is that only",
    "start": "669519",
    "end": "672160"
  },
  {
    "text": "the ip addresses 1.2.3.4",
    "start": "672160",
    "end": "675279"
  },
  {
    "text": "and the range 100 8",
    "start": "675279",
    "end": "678560"
  },
  {
    "text": "are allowed to make requests to this",
    "start": "678560",
    "end": "680399"
  },
  {
    "text": "service",
    "start": "680399",
    "end": "681440"
  },
  {
    "text": "unfortunately i don't own the ip address",
    "start": "681440",
    "end": "683880"
  },
  {
    "text": "1.2.3.4 and can't send requests from it",
    "start": "683880",
    "end": "686959"
  },
  {
    "text": "and in this example we're sending",
    "start": "686959",
    "end": "688399"
  },
  {
    "text": "requests from outside the customers",
    "start": "688399",
    "end": "689920"
  },
  {
    "text": "cloud account so there's no way i can",
    "start": "689920",
    "end": "692000"
  },
  {
    "text": "send from that internal range either",
    "start": "692000",
    "end": "695839"
  },
  {
    "text": "now if we set up an api with api gateway",
    "start": "695839",
    "end": "698399"
  },
  {
    "text": "and apply this resource policy",
    "start": "698399",
    "end": "700480"
  },
  {
    "text": "and send a request to it",
    "start": "700480",
    "end": "702560"
  },
  {
    "text": "we unsurprisingly get a 403 forbidden",
    "start": "702560",
    "end": "704880"
  },
  {
    "text": "because we're not requesting from an",
    "start": "704880",
    "end": "706399"
  },
  {
    "text": "allowed ip address",
    "start": "706399",
    "end": "709120"
  },
  {
    "text": "a perhaps slightly naive approach might",
    "start": "709120",
    "end": "711680"
  },
  {
    "text": "be to just include the exported 4 header",
    "start": "711680",
    "end": "714000"
  },
  {
    "text": "in our request with an ip address on the",
    "start": "714000",
    "end": "716160"
  },
  {
    "text": "white list",
    "start": "716160",
    "end": "717760"
  },
  {
    "text": "and unsurprisingly this doesn't bypass",
    "start": "717760",
    "end": "720720"
  },
  {
    "text": "aws's restrictions",
    "start": "720720",
    "end": "722639"
  },
  {
    "text": "would be nice and it's always worth",
    "start": "722639",
    "end": "724000"
  },
  {
    "text": "testing but i don't think that's going",
    "start": "724000",
    "end": "725760"
  },
  {
    "text": "to come as a shock to anyone",
    "start": "725760",
    "end": "728399"
  },
  {
    "text": "however through some testing i",
    "start": "728399",
    "end": "730959"
  },
  {
    "text": "discovered that i could sneak headers",
    "start": "730959",
    "end": "732399"
  },
  {
    "text": "through to the back end by using this",
    "start": "732399",
    "end": "734240"
  },
  {
    "text": "mutation of adding some junk after a",
    "start": "734240",
    "end": "736399"
  },
  {
    "text": "space in the header name",
    "start": "736399",
    "end": "738079"
  },
  {
    "text": "and the back end would still pass it as",
    "start": "738079",
    "end": "740079"
  },
  {
    "text": "though that space and training",
    "start": "740079",
    "end": "741839"
  },
  {
    "text": "characters weren't there so i tried the",
    "start": "741839",
    "end": "743920"
  },
  {
    "text": "following requests",
    "start": "743920",
    "end": "745440"
  },
  {
    "text": "and i got through to my api bypassing",
    "start": "745440",
    "end": "747920"
  },
  {
    "text": "all the restrictions",
    "start": "747920",
    "end": "749279"
  },
  {
    "text": "so that's quite a nice start",
    "start": "749279",
    "end": "751279"
  },
  {
    "text": "but often we won't actually know an ip",
    "start": "751279",
    "end": "754160"
  },
  {
    "text": "address which is allowed through to the",
    "start": "754160",
    "end": "755839"
  },
  {
    "text": "api we might be able to work it out but",
    "start": "755839",
    "end": "758399"
  },
  {
    "text": "we'll be blind guessing quite a bit and",
    "start": "758399",
    "end": "760000"
  },
  {
    "text": "that's quite difficult",
    "start": "760000",
    "end": "761920"
  },
  {
    "text": "so i moved on to trying something",
    "start": "761920",
    "end": "764000"
  },
  {
    "text": "perhaps more stupid but putting an",
    "start": "764000",
    "end": "766240"
  },
  {
    "text": "imbalanced value in there that can't be",
    "start": "766240",
    "end": "768079"
  },
  {
    "text": "passed as an ip address in this case a",
    "start": "768079",
    "end": "770079"
  },
  {
    "text": "letter z",
    "start": "770079",
    "end": "771440"
  },
  {
    "text": "and quite fortunately this also worked",
    "start": "771440",
    "end": "776399"
  },
  {
    "text": "so to summarize that we could bypass",
    "start": "776480",
    "end": "779040"
  },
  {
    "text": "bypass",
    "start": "779040",
    "end": "780240"
  },
  {
    "text": "ip restrictions in api gateway resource",
    "start": "780240",
    "end": "782639"
  },
  {
    "text": "policies by adding this header and the",
    "start": "782639",
    "end": "784800"
  },
  {
    "text": "slide to the request",
    "start": "784800",
    "end": "787839"
  },
  {
    "start": "788000",
    "end": "788000"
  },
  {
    "text": "another similar example that i have also",
    "start": "788639",
    "end": "790720"
  },
  {
    "text": "reported to aws",
    "start": "790720",
    "end": "792639"
  },
  {
    "text": "was incognito which is used for identity",
    "start": "792639",
    "end": "794959"
  },
  {
    "text": "management",
    "start": "794959",
    "end": "796480"
  },
  {
    "text": "now cognito on a penetration test that i",
    "start": "796480",
    "end": "799040"
  },
  {
    "text": "was working on their cognito instance",
    "start": "799040",
    "end": "801680"
  },
  {
    "text": "was limiting access to the clients",
    "start": "801680",
    "end": "804959"
  },
  {
    "text": "whereas rate limiting you so if you send",
    "start": "804959",
    "end": "807279"
  },
  {
    "text": "too many requests i believe was five",
    "start": "807279",
    "end": "809040"
  },
  {
    "text": "within a short period of time your ip",
    "start": "809040",
    "end": "811120"
  },
  {
    "text": "address will get blocked for a while",
    "start": "811120",
    "end": "814079"
  },
  {
    "text": "however",
    "start": "814079",
    "end": "815440"
  },
  {
    "text": "i've discovered that if you add the x",
    "start": "815440",
    "end": "817200"
  },
  {
    "text": "folded four header with that's a",
    "start": "817200",
    "end": "819440"
  },
  {
    "text": "vertical tab after the colon you can see",
    "start": "819440",
    "end": "821519"
  },
  {
    "text": "in the slide there and then any other",
    "start": "821519",
    "end": "823600"
  },
  {
    "text": "value",
    "start": "823600",
    "end": "825040"
  },
  {
    "text": "your you would no longer be blocked and",
    "start": "825040",
    "end": "827040"
  },
  {
    "text": "you'd get five more requests it's",
    "start": "827040",
    "end": "829199"
  },
  {
    "text": "important to note here that you couldn't",
    "start": "829199",
    "end": "830880"
  },
  {
    "text": "cycle the bank of this header including",
    "start": "830880",
    "end": "833120"
  },
  {
    "text": "valid ip addresses and you wouldn't get",
    "start": "833120",
    "end": "836000"
  },
  {
    "text": "any more requests so this is a very",
    "start": "836000",
    "end": "837920"
  },
  {
    "text": "minor bug that takes your limit from",
    "start": "837920",
    "end": "840320"
  },
  {
    "text": "five requests to 10 total within a short",
    "start": "840320",
    "end": "842560"
  },
  {
    "text": "period of time",
    "start": "842560",
    "end": "843839"
  },
  {
    "text": "however i feel it's quite a nice demo of",
    "start": "843839",
    "end": "846320"
  },
  {
    "text": "what can be done and even though the",
    "start": "846320",
    "end": "848079"
  },
  {
    "text": "impact is minimal i think it's worth",
    "start": "848079",
    "end": "850079"
  },
  {
    "text": "mentioning just as an example",
    "start": "850079",
    "end": "854199"
  },
  {
    "start": "854000",
    "end": "854000"
  },
  {
    "text": "another example we're going to look at",
    "start": "857839",
    "end": "859360"
  },
  {
    "text": "today is cash poisoning",
    "start": "859360",
    "end": "861600"
  },
  {
    "text": "so i reported the issue",
    "start": "861600",
    "end": "863760"
  },
  {
    "text": "with bypassing the resource policy ipa",
    "start": "863760",
    "end": "866079"
  },
  {
    "text": "address restrictions to aws",
    "start": "866079",
    "end": "868399"
  },
  {
    "text": "and they fairly promptly fixed it",
    "start": "868399",
    "end": "870800"
  },
  {
    "text": "however i noticed that i could still",
    "start": "870800",
    "end": "872399"
  },
  {
    "text": "sneak headers through to back-end",
    "start": "872399",
    "end": "873839"
  },
  {
    "text": "servers using that same mutation of",
    "start": "873839",
    "end": "876240"
  },
  {
    "text": "adding a space and some trading",
    "start": "876240",
    "end": "877600"
  },
  {
    "text": "characters",
    "start": "877600",
    "end": "879040"
  },
  {
    "text": "so i started to think about",
    "start": "879040",
    "end": "880959"
  },
  {
    "text": "what else could i add here that could be",
    "start": "880959",
    "end": "882959"
  },
  {
    "text": "interesting",
    "start": "882959",
    "end": "884639"
  },
  {
    "text": "now there's probably a lot of headers",
    "start": "884639",
    "end": "886320"
  },
  {
    "text": "that turn onto api gateway that would be",
    "start": "886320",
    "end": "888639"
  },
  {
    "text": "interesting if you knew them but i",
    "start": "888639",
    "end": "889920"
  },
  {
    "text": "couldn't find any",
    "start": "889920",
    "end": "891440"
  },
  {
    "text": "however one that perhaps is quite",
    "start": "891440",
    "end": "893199"
  },
  {
    "text": "interesting is the host header as it's a",
    "start": "893199",
    "end": "895040"
  },
  {
    "text": "bit more fundamental to the request",
    "start": "895040",
    "end": "898240"
  },
  {
    "text": "so i set up two apis to test with the",
    "start": "898240",
    "end": "901120"
  },
  {
    "text": "first one you can see here is this",
    "start": "901120",
    "end": "902880"
  },
  {
    "text": "victim api and a request to slash a on",
    "start": "902880",
    "end": "905760"
  },
  {
    "text": "this will just give you real response a",
    "start": "905760",
    "end": "909040"
  },
  {
    "text": "the second api is this attacker api",
    "start": "909040",
    "end": "912480"
  },
  {
    "text": "and for reasons we'll see in a second",
    "start": "912480",
    "end": "914399"
  },
  {
    "text": "this responds with poisoned a when you",
    "start": "914399",
    "end": "916720"
  },
  {
    "text": "request it",
    "start": "916720",
    "end": "918560"
  },
  {
    "text": "so the question is what happens when i",
    "start": "918560",
    "end": "921279"
  },
  {
    "text": "send the following request",
    "start": "921279",
    "end": "923199"
  },
  {
    "text": "here we have two host headers an",
    "start": "923199",
    "end": "924800"
  },
  {
    "text": "unmutated one which",
    "start": "924800",
    "end": "926639"
  },
  {
    "text": "is for the victim api and the mutated",
    "start": "926639",
    "end": "928800"
  },
  {
    "text": "header which is for the attacker api",
    "start": "928800",
    "end": "931680"
  },
  {
    "text": "well it turns out api gateway will give",
    "start": "931680",
    "end": "933920"
  },
  {
    "text": "us the response for the attacker api",
    "start": "933920",
    "end": "935920"
  },
  {
    "text": "this poisoned a response",
    "start": "935920",
    "end": "939519"
  },
  {
    "start": "939000",
    "end": "939000"
  },
  {
    "text": "so",
    "start": "939680",
    "end": "940639"
  },
  {
    "text": "this becomes interesting when we",
    "start": "940639",
    "end": "942079"
  },
  {
    "text": "introduce a cache",
    "start": "942079",
    "end": "943759"
  },
  {
    "text": "to test i set up cloudfront in front of",
    "start": "943759",
    "end": "945759"
  },
  {
    "text": "my api gateway instance and i set the",
    "start": "945759",
    "end": "948480"
  },
  {
    "text": "all viewer request policy which",
    "start": "948480",
    "end": "950720"
  },
  {
    "text": "effectively means that cloudfront will",
    "start": "950720",
    "end": "952399"
  },
  {
    "text": "forward all headers to api gateway",
    "start": "952399",
    "end": "955440"
  },
  {
    "text": "i then sent the request from the",
    "start": "955440",
    "end": "956959"
  },
  {
    "text": "previous slide",
    "start": "956959",
    "end": "958399"
  },
  {
    "text": "now cloudfront doesn't pass this mutated",
    "start": "958399",
    "end": "960639"
  },
  {
    "text": "host header so it sees the host header",
    "start": "960639",
    "end": "963199"
  },
  {
    "text": "for the victim api and it thinks the url",
    "start": "963199",
    "end": "966720"
  },
  {
    "text": "is for the victims api",
    "start": "966720",
    "end": "968959"
  },
  {
    "text": "however api gateway for this request",
    "start": "968959",
    "end": "971440"
  },
  {
    "text": "gives us a response from the attackers",
    "start": "971440",
    "end": "973040"
  },
  {
    "text": "api which the attacker controls in this",
    "start": "973040",
    "end": "975360"
  },
  {
    "text": "scenario",
    "start": "975360",
    "end": "977120"
  },
  {
    "text": "what happens as a result here is",
    "start": "977120",
    "end": "979199"
  },
  {
    "text": "cloudfront will cache the result under",
    "start": "979199",
    "end": "982000"
  },
  {
    "text": "the victim's api cache but the response",
    "start": "982000",
    "end": "984800"
  },
  {
    "text": "will be completely controlled by the",
    "start": "984800",
    "end": "986160"
  },
  {
    "text": "attacker",
    "start": "986160",
    "end": "987440"
  },
  {
    "text": "this allows an attacker to target a",
    "start": "987440",
    "end": "989839"
  },
  {
    "text": "victim using cloudfront or any other",
    "start": "989839",
    "end": "991759"
  },
  {
    "text": "caching proxy which will forward these",
    "start": "991759",
    "end": "993279"
  },
  {
    "text": "headers in front of api gateway and just",
    "start": "993279",
    "end": "996639"
  },
  {
    "text": "overwrite any responses in their cache",
    "start": "996639",
    "end": "999279"
  },
  {
    "text": "with any value completely under the",
    "start": "999279",
    "end": "1001279"
  },
  {
    "text": "attacker's control",
    "start": "1001279",
    "end": "1004240"
  },
  {
    "start": "1005000",
    "end": "1005000"
  },
  {
    "text": "now we're also going to look at cl.cl",
    "start": "1005839",
    "end": "1008000"
  },
  {
    "text": "request smuggling i.e request smuggling",
    "start": "1008000",
    "end": "1010240"
  },
  {
    "text": "based on two content length headers",
    "start": "1010240",
    "end": "1012880"
  },
  {
    "text": "now a lot of requests only recently has",
    "start": "1012880",
    "end": "1015040"
  },
  {
    "text": "been based on the use of a transfer",
    "start": "1015040",
    "end": "1016800"
  },
  {
    "text": "encoding and a content length header",
    "start": "1016800",
    "end": "1019120"
  },
  {
    "text": "however at blackhat usa 2020 amic client",
    "start": "1019120",
    "end": "1022399"
  },
  {
    "text": "presents debug in squid and abyss which",
    "start": "1022399",
    "end": "1024959"
  },
  {
    "text": "was based on two content length headers",
    "start": "1024959",
    "end": "1027360"
  },
  {
    "text": "one of them being mutated",
    "start": "1027360",
    "end": "1030240"
  },
  {
    "text": "now he detected this through white box",
    "start": "1030240",
    "end": "1032240"
  },
  {
    "text": "testing but i was curious about whether",
    "start": "1032240",
    "end": "1034798"
  },
  {
    "text": "it was possible to detect these sorts of",
    "start": "1034799",
    "end": "1036319"
  },
  {
    "text": "bugs through black box testing and",
    "start": "1036319",
    "end": "1038480"
  },
  {
    "text": "importantly whether it was possible to",
    "start": "1038480",
    "end": "1040160"
  },
  {
    "text": "do it safely",
    "start": "1040160",
    "end": "1041600"
  },
  {
    "text": "so those of you familiar with james",
    "start": "1041600",
    "end": "1043120"
  },
  {
    "text": "kettle's detection techniques based on",
    "start": "1043120",
    "end": "1045120"
  },
  {
    "text": "timeouts for request smuggling might be",
    "start": "1045120",
    "end": "1047280"
  },
  {
    "text": "wondering why we can't just adapt those",
    "start": "1047280",
    "end": "1049280"
  },
  {
    "text": "directly",
    "start": "1049280",
    "end": "1050880"
  },
  {
    "text": "the issue is when you're looking at",
    "start": "1050880",
    "end": "1052320"
  },
  {
    "text": "cl.cl request smuggling if you don't",
    "start": "1052320",
    "end": "1055120"
  },
  {
    "text": "know which server is going to pass which",
    "start": "1055120",
    "end": "1056880"
  },
  {
    "text": "header out of the front end of backend",
    "start": "1056880",
    "end": "1058720"
  },
  {
    "text": "server you have a 50 chance of causing a",
    "start": "1058720",
    "end": "1061520"
  },
  {
    "text": "timeout in the vulnerable system but you",
    "start": "1061520",
    "end": "1063840"
  },
  {
    "text": "also have a 50 chance of leaving some",
    "start": "1063840",
    "end": "1065919"
  },
  {
    "text": "data in the socket and affecting another",
    "start": "1065919",
    "end": "1067679"
  },
  {
    "text": "user's request and this is something we",
    "start": "1067679",
    "end": "1069679"
  },
  {
    "text": "generally want to avoid",
    "start": "1069679",
    "end": "1072880"
  },
  {
    "start": "1073000",
    "end": "1073000"
  },
  {
    "text": "so just to recap the setup",
    "start": "1073600",
    "end": "1075840"
  },
  {
    "text": "we have squid acting as a front end",
    "start": "1075840",
    "end": "1078640"
  },
  {
    "text": "doing some caching in front of abyss now",
    "start": "1078640",
    "end": "1080880"
  },
  {
    "text": "you can exploit this bug to do more than",
    "start": "1080880",
    "end": "1082559"
  },
  {
    "text": "caching you can directly affect other",
    "start": "1082559",
    "end": "1084400"
  },
  {
    "text": "users requests",
    "start": "1084400",
    "end": "1085760"
  },
  {
    "text": "however i'm showing caching here as i",
    "start": "1085760",
    "end": "1087840"
  },
  {
    "text": "think it's the nicest sort of simple way",
    "start": "1087840",
    "end": "1090400"
  },
  {
    "text": "to show this bug",
    "start": "1090400",
    "end": "1093200"
  },
  {
    "text": "now so the bug that amicline presented",
    "start": "1093200",
    "end": "1095679"
  },
  {
    "text": "looks like this we start with a fairly",
    "start": "1095679",
    "end": "1098320"
  },
  {
    "text": "normal post request shown here in green",
    "start": "1098320",
    "end": "1100720"
  },
  {
    "text": "the only slightly strange thing about it",
    "start": "1100720",
    "end": "1102559"
  },
  {
    "text": "is we have two content length headers",
    "start": "1102559",
    "end": "1104880"
  },
  {
    "text": "one unmutated content length header",
    "start": "1104880",
    "end": "1107200"
  },
  {
    "text": "which says the length of the body is 33",
    "start": "1107200",
    "end": "1109440"
  },
  {
    "text": "bytes and one mutated content length",
    "start": "1109440",
    "end": "1111919"
  },
  {
    "text": "header which says the length of the body",
    "start": "1111919",
    "end": "1113760"
  },
  {
    "text": "is zero bytes",
    "start": "1113760",
    "end": "1115600"
  },
  {
    "text": "now what's going to happen is our",
    "start": "1115600",
    "end": "1117360"
  },
  {
    "text": "front-end server squid is going to read",
    "start": "1117360",
    "end": "1120160"
  },
  {
    "text": "our unmutated content length header and",
    "start": "1120160",
    "end": "1122799"
  },
  {
    "text": "believe that this is a post request with",
    "start": "1122799",
    "end": "1124960"
  },
  {
    "text": "a body of length 33 bytes so it sees two",
    "start": "1124960",
    "end": "1128000"
  },
  {
    "text": "requests in this stream the first being",
    "start": "1128000",
    "end": "1130320"
  },
  {
    "text": "what we have in green without post",
    "start": "1130320",
    "end": "1132400"
  },
  {
    "text": "request and the body of this post",
    "start": "1132400",
    "end": "1134559"
  },
  {
    "text": "request is shown in blue",
    "start": "1134559",
    "end": "1136720"
  },
  {
    "text": "it then thinks the second request in",
    "start": "1136720",
    "end": "1138320"
  },
  {
    "text": "this stream starts in red there and is a",
    "start": "1138320",
    "end": "1140960"
  },
  {
    "text": "request and is a get request to the",
    "start": "1140960",
    "end": "1142960"
  },
  {
    "text": "slash doesn't exist page",
    "start": "1142960",
    "end": "1145200"
  },
  {
    "text": "so it's going to cache the result of",
    "start": "1145200",
    "end": "1146720"
  },
  {
    "text": "this request for the path slash doesn't",
    "start": "1146720",
    "end": "1149360"
  },
  {
    "text": "exist",
    "start": "1149360",
    "end": "1151280"
  },
  {
    "text": "however",
    "start": "1151280",
    "end": "1152880"
  },
  {
    "text": "the back end server abyss is going to",
    "start": "1152880",
    "end": "1155039"
  },
  {
    "text": "read on mutated content length header",
    "start": "1155039",
    "end": "1157520"
  },
  {
    "text": "which says that the length of the",
    "start": "1157520",
    "end": "1159039"
  },
  {
    "text": "request is 0 bytes the length of the",
    "start": "1159039",
    "end": "1161360"
  },
  {
    "text": "body is 0 bytes even",
    "start": "1161360",
    "end": "1163200"
  },
  {
    "text": "so it thinks that the second request in",
    "start": "1163200",
    "end": "1165120"
  },
  {
    "text": "the stream starts in blue there that",
    "start": "1165120",
    "end": "1167200"
  },
  {
    "text": "request to slash a.html with a header",
    "start": "1167200",
    "end": "1170320"
  },
  {
    "text": "called something and a value it just",
    "start": "1170320",
    "end": "1171840"
  },
  {
    "text": "doesn't really care about",
    "start": "1171840",
    "end": "1173600"
  },
  {
    "text": "and then again it's a request as before",
    "start": "1173600",
    "end": "1175679"
  },
  {
    "text": "to squidoo1 to rs lab",
    "start": "1175679",
    "end": "1179840"
  },
  {
    "text": "so",
    "start": "1180080",
    "end": "1180799"
  },
  {
    "text": "just to show this in a diagram we have",
    "start": "1180799",
    "end": "1182799"
  },
  {
    "text": "squid on the front end",
    "start": "1182799",
    "end": "1184640"
  },
  {
    "text": "reading the unmutated content length",
    "start": "1184640",
    "end": "1186400"
  },
  {
    "text": "header i'm thinking the second request",
    "start": "1186400",
    "end": "1188400"
  },
  {
    "text": "is to the slash doesn't exist path",
    "start": "1188400",
    "end": "1190720"
  },
  {
    "text": "and abyss on the back end reading our",
    "start": "1190720",
    "end": "1192799"
  },
  {
    "text": "mutated content length header and",
    "start": "1192799",
    "end": "1194640"
  },
  {
    "text": "thinking the second request is two slash",
    "start": "1194640",
    "end": "1196400"
  },
  {
    "text": "a.html",
    "start": "1196400",
    "end": "1198080"
  },
  {
    "text": "so squid is going to cache the value of",
    "start": "1198080",
    "end": "1199919"
  },
  {
    "text": "a.html under a different path and this",
    "start": "1199919",
    "end": "1202720"
  },
  {
    "text": "is the simple demo to show that cache",
    "start": "1202720",
    "end": "1204960"
  },
  {
    "text": "poisoning exists",
    "start": "1204960",
    "end": "1207440"
  },
  {
    "start": "1207000",
    "end": "1207000"
  },
  {
    "text": "so how do we detect this black box well",
    "start": "1207440",
    "end": "1210159"
  },
  {
    "text": "we're working with detecting mutations",
    "start": "1210159",
    "end": "1212080"
  },
  {
    "text": "here and that's something we've already",
    "start": "1212080",
    "end": "1213520"
  },
  {
    "text": "looked at",
    "start": "1213520",
    "end": "1214880"
  },
  {
    "text": "so we just need to modify our",
    "start": "1214880",
    "end": "1216240"
  },
  {
    "text": "methodology slightly",
    "start": "1216240",
    "end": "1218400"
  },
  {
    "text": "so this might look fairly similar to",
    "start": "1218400",
    "end": "1220080"
  },
  {
    "text": "before we've got a post request and the",
    "start": "1220080",
    "end": "1222400"
  },
  {
    "text": "slightly strange thing about it is we",
    "start": "1222400",
    "end": "1223760"
  },
  {
    "text": "have two content length headers and one",
    "start": "1223760",
    "end": "1226000"
  },
  {
    "text": "of them is mutated",
    "start": "1226000",
    "end": "1227440"
  },
  {
    "text": "now we start off by setting the value of",
    "start": "1227440",
    "end": "1229360"
  },
  {
    "text": "both of these to zero",
    "start": "1229360",
    "end": "1231039"
  },
  {
    "text": "and we get a 200 okay and the response",
    "start": "1231039",
    "end": "1233280"
  },
  {
    "text": "we expect for this post request",
    "start": "1233280",
    "end": "1235679"
  },
  {
    "text": "so we know that this is being passed as",
    "start": "1235679",
    "end": "1237600"
  },
  {
    "text": "normal and we haven't broken anything",
    "start": "1237600",
    "end": "1240880"
  },
  {
    "text": "then we put an invalid value inside the",
    "start": "1240880",
    "end": "1243360"
  },
  {
    "text": "content length header that isn't mutated",
    "start": "1243360",
    "end": "1245840"
  },
  {
    "text": "so this content length z you see here",
    "start": "1245840",
    "end": "1248640"
  },
  {
    "text": "and unsurprisingly we get an error in",
    "start": "1248640",
    "end": "1250960"
  },
  {
    "text": "this case a 411 length required as one",
    "start": "1250960",
    "end": "1253840"
  },
  {
    "text": "of the servers in the chain is trying to",
    "start": "1253840",
    "end": "1255280"
  },
  {
    "text": "look at the content length of this post",
    "start": "1255280",
    "end": "1256799"
  },
  {
    "text": "request and not be able to find it due",
    "start": "1256799",
    "end": "1258559"
  },
  {
    "text": "to our invalid value",
    "start": "1258559",
    "end": "1261200"
  },
  {
    "text": "uh so similarly we try again with the",
    "start": "1261200",
    "end": "1263360"
  },
  {
    "text": "mutated content length header now i'm",
    "start": "1263360",
    "end": "1265200"
  },
  {
    "text": "showing this request with zero bytes in",
    "start": "1265200",
    "end": "1267120"
  },
  {
    "text": "both headers",
    "start": "1267120",
    "end": "1268559"
  },
  {
    "text": "again for comparison",
    "start": "1268559",
    "end": "1270720"
  },
  {
    "text": "but when we push an invalid value in our",
    "start": "1270720",
    "end": "1272720"
  },
  {
    "text": "mutated content length header we also",
    "start": "1272720",
    "end": "1274880"
  },
  {
    "text": "get an error however it's a different",
    "start": "1274880",
    "end": "1277039"
  },
  {
    "text": "error to what we saw last time",
    "start": "1277039",
    "end": "1279280"
  },
  {
    "text": "so we can infer that this error has been",
    "start": "1279280",
    "end": "1281039"
  },
  {
    "text": "generated by a different server in the",
    "start": "1281039",
    "end": "1282960"
  },
  {
    "text": "chain",
    "start": "1282960",
    "end": "1285039"
  },
  {
    "text": "so",
    "start": "1285039",
    "end": "1286080"
  },
  {
    "text": "we now know that we have two servers",
    "start": "1286080",
    "end": "1287919"
  },
  {
    "text": "server a and server b server a is",
    "start": "1287919",
    "end": "1290799"
  },
  {
    "text": "reading our unmutated content length",
    "start": "1290799",
    "end": "1292720"
  },
  {
    "text": "header and server b is reading our",
    "start": "1292720",
    "end": "1294720"
  },
  {
    "text": "mutated content length header we don't",
    "start": "1294720",
    "end": "1297200"
  },
  {
    "text": "actually know at this point which is the",
    "start": "1297200",
    "end": "1299120"
  },
  {
    "text": "front-end server and which is the",
    "start": "1299120",
    "end": "1300799"
  },
  {
    "text": "back-end server and this is very",
    "start": "1300799",
    "end": "1302400"
  },
  {
    "text": "important to know this before we",
    "start": "1302400",
    "end": "1304320"
  },
  {
    "text": "continue testing so that we can continue",
    "start": "1304320",
    "end": "1306080"
  },
  {
    "text": "testing safely and minimize the danger",
    "start": "1306080",
    "end": "1308480"
  },
  {
    "text": "of affecting another user's request",
    "start": "1308480",
    "end": "1311919"
  },
  {
    "text": "so to find out which is a front-end",
    "start": "1311919",
    "end": "1313600"
  },
  {
    "text": "server we do something quite simple we",
    "start": "1313600",
    "end": "1316240"
  },
  {
    "text": "just send a post request with only one",
    "start": "1316240",
    "end": "1318159"
  },
  {
    "text": "content length header not mutated and",
    "start": "1318159",
    "end": "1320240"
  },
  {
    "text": "put an imbalanced value in it",
    "start": "1320240",
    "end": "1322240"
  },
  {
    "text": "we expect the front end server to pass",
    "start": "1322240",
    "end": "1324000"
  },
  {
    "text": "this request as we expect any server to",
    "start": "1324000",
    "end": "1326080"
  },
  {
    "text": "pass it and we see a 411 length required",
    "start": "1326080",
    "end": "1329120"
  },
  {
    "text": "which we can assume is from the front",
    "start": "1329120",
    "end": "1330559"
  },
  {
    "text": "end server comparing to our testing",
    "start": "1330559",
    "end": "1333760"
  },
  {
    "text": "earlier this is the same as when we put",
    "start": "1333760",
    "end": "1336400"
  },
  {
    "text": "this value in the unmutated header",
    "start": "1336400",
    "end": "1337840"
  },
  {
    "text": "before",
    "start": "1337840",
    "end": "1338799"
  },
  {
    "text": "so we can assume that when we send two",
    "start": "1338799",
    "end": "1340400"
  },
  {
    "text": "headers it's the front-end server in",
    "start": "1340400",
    "end": "1342480"
  },
  {
    "text": "this case squid which is reading the",
    "start": "1342480",
    "end": "1345039"
  },
  {
    "text": "unmutated content length header and",
    "start": "1345039",
    "end": "1347039"
  },
  {
    "text": "therefore the back end server abyss",
    "start": "1347039",
    "end": "1348880"
  },
  {
    "text": "reasonably mutated one",
    "start": "1348880",
    "end": "1351760"
  },
  {
    "text": "so we've got quite a good chance of",
    "start": "1351760",
    "end": "1353440"
  },
  {
    "text": "request smuggling here as we can send",
    "start": "1353440",
    "end": "1355280"
  },
  {
    "text": "two content length headers and specify",
    "start": "1355280",
    "end": "1357440"
  },
  {
    "text": "different content lengths in them and",
    "start": "1357440",
    "end": "1359520"
  },
  {
    "text": "this and the two servers that we're",
    "start": "1359520",
    "end": "1361360"
  },
  {
    "text": "looking at",
    "start": "1361360",
    "end": "1362480"
  },
  {
    "text": "will think the request has a different",
    "start": "1362480",
    "end": "1364240"
  },
  {
    "text": "body to each other",
    "start": "1364240",
    "end": "1366000"
  },
  {
    "text": "however this doesn't guarantee request",
    "start": "1366000",
    "end": "1368080"
  },
  {
    "text": "modeling that's quite important to",
    "start": "1368080",
    "end": "1370000"
  },
  {
    "text": "highlight you actually need to continue",
    "start": "1370000",
    "end": "1371679"
  },
  {
    "text": "testing",
    "start": "1371679",
    "end": "1373039"
  },
  {
    "text": "it's quite common in this sort of",
    "start": "1373039",
    "end": "1374799"
  },
  {
    "text": "scenario for the back-end server to",
    "start": "1374799",
    "end": "1376640"
  },
  {
    "text": "actually be looking at both content",
    "start": "1376640",
    "end": "1378159"
  },
  {
    "text": "length headers and continuing as normal",
    "start": "1378159",
    "end": "1380559"
  },
  {
    "text": "if they have the same value but as soon",
    "start": "1380559",
    "end": "1382480"
  },
  {
    "text": "as you put a different value in those",
    "start": "1382480",
    "end": "1384320"
  },
  {
    "text": "headers it will complain and throw an",
    "start": "1384320",
    "end": "1386400"
  },
  {
    "text": "error at you so you can generate a",
    "start": "1386400",
    "end": "1389200"
  },
  {
    "text": "timeout in a similar way to james",
    "start": "1389200",
    "end": "1391520"
  },
  {
    "text": "kettle's research by essentially",
    "start": "1391520",
    "end": "1393120"
  },
  {
    "text": "starving the back end of content and",
    "start": "1393120",
    "end": "1395360"
  },
  {
    "text": "full details of that will be in the",
    "start": "1395360",
    "end": "1396559"
  },
  {
    "text": "white paper as well as some exploitation",
    "start": "1396559",
    "end": "1398320"
  },
  {
    "text": "scripts",
    "start": "1398320",
    "end": "1399440"
  },
  {
    "text": "but the general advice from here is that",
    "start": "1399440",
    "end": "1401039"
  },
  {
    "text": "you need to confirm beyond this and",
    "start": "1401039",
    "end": "1402799"
  },
  {
    "text": "often you have to actually just try",
    "start": "1402799",
    "end": "1404080"
  },
  {
    "text": "exploit the system which obviously you",
    "start": "1404080",
    "end": "1406240"
  },
  {
    "text": "have to be quite careful about",
    "start": "1406240",
    "end": "1409600"
  },
  {
    "start": "1410000",
    "end": "1410000"
  },
  {
    "text": "so we've looked at some",
    "start": "1410799",
    "end": "1413039"
  },
  {
    "text": "header smuggling and the question is",
    "start": "1413039",
    "end": "1415679"
  },
  {
    "text": "how do we defend against this",
    "start": "1415679",
    "end": "1417840"
  },
  {
    "text": "well part of the defense i recommend is",
    "start": "1417840",
    "end": "1419760"
  },
  {
    "text": "to use the tooling i'm going to be",
    "start": "1419760",
    "end": "1421440"
  },
  {
    "text": "releasing as part of this research and",
    "start": "1421440",
    "end": "1423679"
  },
  {
    "text": "scan any systems you're conf you're",
    "start": "1423679",
    "end": "1425679"
  },
  {
    "text": "concerned about",
    "start": "1425679",
    "end": "1427840"
  },
  {
    "text": "another piece of defense i consider key",
    "start": "1427840",
    "end": "1430559"
  },
  {
    "text": "is on front-end servers",
    "start": "1430559",
    "end": "1432400"
  },
  {
    "text": "don't forward malformed or suspicious",
    "start": "1432400",
    "end": "1435360"
  },
  {
    "text": "headers",
    "start": "1435360",
    "end": "1436720"
  },
  {
    "text": "so cloudflare don't afford headers with",
    "start": "1436720",
    "end": "1438960"
  },
  {
    "text": "a space in for example",
    "start": "1438960",
    "end": "1440880"
  },
  {
    "text": "and that saved them from being used in",
    "start": "1440880",
    "end": "1442799"
  },
  {
    "text": "the example earlier with api gateway and",
    "start": "1442799",
    "end": "1445120"
  },
  {
    "text": "the cache poisoning",
    "start": "1445120",
    "end": "1447520"
  },
  {
    "text": "and this is also the approach that aws",
    "start": "1447520",
    "end": "1449760"
  },
  {
    "text": "are taking to resolve this issue within",
    "start": "1449760",
    "end": "1451919"
  },
  {
    "text": "api gateway they're writing a lot of",
    "start": "1451919",
    "end": "1454000"
  },
  {
    "text": "tests to test the services with an api",
    "start": "1454000",
    "end": "1456000"
  },
  {
    "text": "gateway to make sure they don't forward",
    "start": "1456000",
    "end": "1458320"
  },
  {
    "text": "these malformed headers",
    "start": "1458320",
    "end": "1461200"
  },
  {
    "text": "and there's also this concept that you",
    "start": "1461200",
    "end": "1462640"
  },
  {
    "text": "should be quite liberal about passing",
    "start": "1462640",
    "end": "1464720"
  },
  {
    "text": "protocols such as http",
    "start": "1464720",
    "end": "1467039"
  },
  {
    "text": "however if it's for a back-end server",
    "start": "1467039",
    "end": "1469360"
  },
  {
    "text": "and you're expecting the request to be",
    "start": "1469360",
    "end": "1470799"
  },
  {
    "text": "filtered or normalized by a front-end",
    "start": "1470799",
    "end": "1472880"
  },
  {
    "text": "server this doesn't necessarily apply as",
    "start": "1472880",
    "end": "1475679"
  },
  {
    "text": "you won't be seeing requests from all",
    "start": "1475679",
    "end": "1477200"
  },
  {
    "text": "sorts of different implementations of",
    "start": "1477200",
    "end": "1479279"
  },
  {
    "text": "http you should only be seeing requests",
    "start": "1479279",
    "end": "1481760"
  },
  {
    "text": "from one implementation so you can be a",
    "start": "1481760",
    "end": "1484080"
  },
  {
    "text": "lot more strict and that can help defend",
    "start": "1484080",
    "end": "1486240"
  },
  {
    "text": "against these vulnerabilities",
    "start": "1486240",
    "end": "1489600"
  },
  {
    "text": "now in terms of future research i think",
    "start": "1489840",
    "end": "1492480"
  },
  {
    "text": "there are plenty more applications to be",
    "start": "1492480",
    "end": "1494080"
  },
  {
    "text": "found i'd recommend that you just go and",
    "start": "1494080",
    "end": "1496480"
  },
  {
    "text": "scan as many systems as you can with my",
    "start": "1496480",
    "end": "1498559"
  },
  {
    "text": "modified turbo intruder find interesting",
    "start": "1498559",
    "end": "1501120"
  },
  {
    "text": "behavior that you probably can't predict",
    "start": "1501120",
    "end": "1503200"
  },
  {
    "text": "right now and go play with it and see if",
    "start": "1503200",
    "end": "1505440"
  },
  {
    "text": "you can exploit something",
    "start": "1505440",
    "end": "1507760"
  },
  {
    "text": "we've of course also seen a lot of http",
    "start": "1507760",
    "end": "1510400"
  },
  {
    "text": "2 request smuggling research this year",
    "start": "1510400",
    "end": "1512720"
  },
  {
    "text": "focused on http 2 to 81 downgrades and",
    "start": "1512720",
    "end": "1516080"
  },
  {
    "text": "this has also led to lots of new ways to",
    "start": "1516080",
    "end": "1518320"
  },
  {
    "text": "sneak headers through to the back end",
    "start": "1518320",
    "end": "1520159"
  },
  {
    "text": "with the focus on the transfer and",
    "start": "1520159",
    "end": "1521520"
  },
  {
    "text": "coding header in general",
    "start": "1521520",
    "end": "1523520"
  },
  {
    "text": "so these techniques i haven't looked at",
    "start": "1523520",
    "end": "1525279"
  },
  {
    "text": "as part of my research but that could",
    "start": "1525279",
    "end": "1527200"
  },
  {
    "text": "definitely provide some interesting",
    "start": "1527200",
    "end": "1528480"
  },
  {
    "text": "results if you go and look at those",
    "start": "1528480",
    "end": "1530720"
  },
  {
    "text": "i've also made some assumptions in my",
    "start": "1530720",
    "end": "1532320"
  },
  {
    "text": "research which are probably worth",
    "start": "1532320",
    "end": "1533679"
  },
  {
    "text": "addressing i've assumed that front and",
    "start": "1533679",
    "end": "1535840"
  },
  {
    "text": "back end servers will give different",
    "start": "1535840",
    "end": "1537279"
  },
  {
    "text": "errors to each other",
    "start": "1537279",
    "end": "1538799"
  },
  {
    "text": "i've also assumed that all headers are",
    "start": "1538799",
    "end": "1540159"
  },
  {
    "text": "passed the same so if you find one",
    "start": "1540159",
    "end": "1542000"
  },
  {
    "text": "mutation that works with a content",
    "start": "1542000",
    "end": "1544080"
  },
  {
    "text": "length header we're assuming it works",
    "start": "1544080",
    "end": "1545679"
  },
  {
    "text": "with every other header which may not be",
    "start": "1545679",
    "end": "1547840"
  },
  {
    "text": "true although it generally seems to be",
    "start": "1547840",
    "end": "1551279"
  },
  {
    "text": "and i've also assumed that all servers",
    "start": "1551279",
    "end": "1553120"
  },
  {
    "text": "pass the content length header and get",
    "start": "1553120",
    "end": "1555279"
  },
  {
    "text": "requests which is mostly true but there",
    "start": "1555279",
    "end": "1557760"
  },
  {
    "text": "are definitely some servers i've seen",
    "start": "1557760",
    "end": "1559120"
  },
  {
    "text": "which don't do this",
    "start": "1559120",
    "end": "1560799"
  },
  {
    "text": "so those will be missed by the",
    "start": "1560799",
    "end": "1562240"
  },
  {
    "text": "methodology of this research",
    "start": "1562240",
    "end": "1565200"
  },
  {
    "start": "1565000",
    "end": "1565000"
  },
  {
    "text": "now there are some references here which",
    "start": "1565200",
    "end": "1566720"
  },
  {
    "text": "i'd encourage you to go check out these",
    "start": "1566720",
    "end": "1568960"
  },
  {
    "text": "have really been informative in this",
    "start": "1568960",
    "end": "1570320"
  },
  {
    "text": "research there's also some other",
    "start": "1570320",
    "end": "1572159"
  },
  {
    "text": "resources which again you can find in",
    "start": "1572159",
    "end": "1574000"
  },
  {
    "text": "the slides and if you found this talk",
    "start": "1574000",
    "end": "1575760"
  },
  {
    "text": "interesting i think you should probably",
    "start": "1575760",
    "end": "1577039"
  },
  {
    "text": "have a look at these as you'll enjoy",
    "start": "1577039",
    "end": "1578400"
  },
  {
    "text": "them as well",
    "start": "1578400",
    "end": "1579919"
  },
  {
    "text": "and thank you for coming so links to our",
    "start": "1579919",
    "end": "1582320"
  },
  {
    "text": "blogs there i'd like to say a massive",
    "start": "1582320",
    "end": "1584000"
  },
  {
    "text": "thank you to the aws security team",
    "start": "1584000",
    "end": "1586000"
  },
  {
    "text": "who've been really helpful and really",
    "start": "1586000",
    "end": "1587919"
  },
  {
    "text": "good to work with throughout this",
    "start": "1587919",
    "end": "1589120"
  },
  {
    "text": "research",
    "start": "1589120",
    "end": "1591120"
  },
  {
    "text": "and also we're hiring so you have a bit",
    "start": "1591120",
    "end": "1593039"
  },
  {
    "text": "of experience come and talk to us",
    "start": "1593039",
    "end": "1595279"
  },
  {
    "text": "and are there any questions",
    "start": "1595279",
    "end": "1598170"
  },
  {
    "text": "[Music]",
    "start": "1598170",
    "end": "1607779"
  }
]