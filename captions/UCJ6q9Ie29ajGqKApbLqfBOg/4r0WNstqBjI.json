[
  {
    "text": "hi good evening everyone my name is para Vincent Dominique and I are security",
    "start": "30",
    "end": "6540"
  },
  {
    "text": "researchers from the Technical University of Berlin Germany and we're here to talk about our automated first",
    "start": "6540",
    "end": "12150"
  },
  {
    "text": "testing framework called fuzz X bikina this is going to be a longish talk so",
    "start": "12150",
    "end": "17190"
  },
  {
    "text": "I'll start with a brief summary of hard work fuzz ex machina or fiction for short is an automated fuzzing framework",
    "start": "17190",
    "end": "24180"
  },
  {
    "text": "what this means is that it reduces to a bare minimum the manual effort that",
    "start": "24180",
    "end": "29460"
  },
  {
    "text": "typically goes into setting up a fast testing pipeline for software now naturally automating fasting is a hard",
    "start": "29460",
    "end": "36390"
  },
  {
    "text": "problem so to tackle some of these challenges POSIX lukina has clever tricks up its sleeve which we're going",
    "start": "36390",
    "end": "42809"
  },
  {
    "text": "to talk about later in this presentation we've developed fixham with two use cases in mind BYOB or bring your own",
    "start": "42809",
    "end": "50100"
  },
  {
    "text": "binary in this mode you can fast automatically fast software that you care about and the other mode is",
    "start": "50100",
    "end": "57170"
  },
  {
    "text": "large-scale distributed fuzzing in this mode you can use fixham to automatically",
    "start": "57170",
    "end": "63600"
  },
  {
    "text": "fuzz represent or ease of software packages such as the arch linux package",
    "start": "63600",
    "end": "68790"
  },
  {
    "text": "repository we believe in eating our own dog food so we have tried flexing ourselves and found numerous bugs and",
    "start": "68790",
    "end": "75390"
  },
  {
    "text": "crashes which will disclose later in this presentation finally if exome itself is free and",
    "start": "75390",
    "end": "80670"
  },
  {
    "text": "open-source you can check it out at the linked github URL great so here's a",
    "start": "80670",
    "end": "89310"
  },
  {
    "text": "small outline of our talk I'm going to provide some context behind our book and provide a brief introduction then I'm",
    "start": "89310",
    "end": "96360"
  },
  {
    "text": "going to show you how you can use flexsim to automatically files software that you care about the so-called BYOB",
    "start": "96360",
    "end": "102540"
  },
  {
    "text": "mode then I'm going to hand over the presentation to Vincent who's going to get into fixham internals and then more",
    "start": "102540",
    "end": "109229"
  },
  {
    "text": "the bug dashboard so to speak and finally Dominic is going to present our findings a cool new feature called time",
    "start": "109229",
    "end": "116460"
  },
  {
    "text": "work and finally conclude the presentation and before that he's going to show the demo great with that out of",
    "start": "116460",
    "end": "125369"
  },
  {
    "text": "the way let me get started I'm sure most of you are aware of what fuzz testing is",
    "start": "125369",
    "end": "131459"
  },
  {
    "text": "but for those who don't it's essentially throwing Carnegie's input at a program until it breaks so",
    "start": "131459",
    "end": "137099"
  },
  {
    "text": "it's a bit like shooting in the dark but not exactly and the idea is not new in",
    "start": "137099",
    "end": "142380"
  },
  {
    "text": "fact anecdotally speaking it dates back to a computer science assignment in 1988",
    "start": "142380",
    "end": "147569"
  },
  {
    "text": "provided by Professor Bart Miller at the University of Wisconsin when he asked students to write the so-called first",
    "start": "147569",
    "end": "154319"
  },
  {
    "text": "generator program the goal of this program was to provide an unpredictable input stream to test the resilience of",
    "start": "154319",
    "end": "162200"
  },
  {
    "text": "UNIX utility programs although this approach was rather dumb it was",
    "start": "162200",
    "end": "167280"
  },
  {
    "text": "surprisingly effective and one-third of the UNIX utility programs that were tested crashed ever since then we've",
    "start": "167280",
    "end": "176580"
  },
  {
    "text": "come a long way in making fast testing more effective we security researchers",
    "start": "176580",
    "end": "181920"
  },
  {
    "text": "quickly figured that simply random testing is not very effective because while it can quickly find shallow bugs",
    "start": "181920",
    "end": "188670"
  },
  {
    "text": "it cannot test deep portions of the program so in the early noughties",
    "start": "188670",
    "end": "196700"
  },
  {
    "text": "some of the researchers proposed a so-called input specification guided fast testing here the main idea was tell",
    "start": "196700",
    "end": "204900"
  },
  {
    "text": "the fuzzer what the program does by feeding it a specification of the program one way to",
    "start": "204900",
    "end": "212280"
  },
  {
    "text": "provide such a specification is for example tell the fuzzer what inputs to",
    "start": "212280",
    "end": "217290"
  },
  {
    "text": "the program on the test looks like for example let's say you're passing the TCP",
    "start": "217290",
    "end": "222510"
  },
  {
    "text": "protocol parser program what you would do is define the so called TCP data",
    "start": "222510",
    "end": "228450"
  },
  {
    "text": "format so that the phaser can meaningfully first test your program now",
    "start": "228450",
    "end": "233790"
  },
  {
    "text": "although this was much better than random fuzz testing it had its own limitations for one you needed the",
    "start": "233790",
    "end": "240690"
  },
  {
    "text": "specification to do such testing and in several cases getting a specification was difficult because either the program",
    "start": "240690",
    "end": "247889"
  },
  {
    "text": "was poorly documented or for some other reason specification did not simply exist and the other problem was that",
    "start": "247889",
    "end": "255889"
  },
  {
    "text": "when you drive fuzzer using a specification you might not actually be",
    "start": "255889",
    "end": "261060"
  },
  {
    "text": "testing undocumented features so what happens is there is a divergence between",
    "start": "261060",
    "end": "266370"
  },
  {
    "text": "specification and implementation and you're targeting your fussing at specification and that might not uncover",
    "start": "266370",
    "end": "272580"
  },
  {
    "text": "bugs in undocumented features so finally in the late not East researchers",
    "start": "272580",
    "end": "278250"
  },
  {
    "text": "proposed so-called feedback guided fuzzing and the main idea behind feedback headed fuzzing is do away",
    "start": "278250",
    "end": "284070"
  },
  {
    "text": "entirely with having to require some sort of specification and let the phaser",
    "start": "284070",
    "end": "290160"
  },
  {
    "text": "automatically learn about program behavior one popular technique to learn about program behavior on the fly is",
    "start": "290160",
    "end": "297660"
  },
  {
    "text": "coverage guided fast testing in this technique what the father does is it essentially instruments' the program",
    "start": "297660",
    "end": "303840"
  },
  {
    "text": "such that it can monitor program coverage and then sees how different inputs that are fed to the program",
    "start": "303840",
    "end": "310410"
  },
  {
    "text": "change program coverage with the idea being that greater coverage indicates",
    "start": "310410",
    "end": "316220"
  },
  {
    "text": "execution of some interesting portion of the program and this is retain for future fuzzing and feedback driven",
    "start": "316220",
    "end": "322860"
  },
  {
    "text": "fuzzing has been surprisingly very effective and found numerous bugs and vulnerabilities this brings me to the",
    "start": "322860",
    "end": "329400"
  },
  {
    "text": "state of the art so today you find frameworks such as Google's OSS files and similar offerings by Microsoft and",
    "start": "329400",
    "end": "335910"
  },
  {
    "text": "Yahoo which take these advances over the years and scale it up at a massive level",
    "start": "335910",
    "end": "341300"
  },
  {
    "text": "so you have for example Google OSS fuzz which is known to churn out four",
    "start": "341300",
    "end": "346680"
  },
  {
    "text": "trillion test cases per week this is massive so the idea is that these",
    "start": "346680",
    "end": "352289"
  },
  {
    "text": "initiatives provide the infrastructure to fast programs and also the fuzzing",
    "start": "352289",
    "end": "357599"
  },
  {
    "text": "tool chain so all the developer needs to do is provide test cases seeds and so on",
    "start": "357599",
    "end": "363870"
  },
  {
    "text": "and so forth and the impact has been massive for example Google's fuzz bot",
    "start": "363870",
    "end": "371849"
  },
  {
    "text": "has exposed over thousand open-source bugs in various you user space programs",
    "start": "371849",
    "end": "377910"
  },
  {
    "text": "and not only this it has also uncovered in similar initiatives various bugs in",
    "start": "377910",
    "end": "384240"
  },
  {
    "text": "the Linux kernel itself which is used in millions of devices now after Hartley it was found in open SSL some researchers",
    "start": "384240",
    "end": "392070"
  },
  {
    "text": "at Google showed that had open SSL actually taken up continuous fuzzing of",
    "start": "392070",
    "end": "397830"
  },
  {
    "text": "its codebase heartbeat would have been in a matter of seconds with the tooling that we have today the jiff on the right",
    "start": "397830",
    "end": "404430"
  },
  {
    "text": "shows you how quick it is to find ha a bug like heartbleed using modern fuzzing",
    "start": "404430",
    "end": "410970"
  },
  {
    "text": "2 chainz so clearly we've come a long way and made a lot of progress but yet",
    "start": "410970",
    "end": "417150"
  },
  {
    "text": "we still find buffer overflows in various programs like it's 1996 so",
    "start": "417150",
    "end": "422550"
  },
  {
    "text": "clearly there's a divergence between what exists and the kind of bugs we find",
    "start": "422550",
    "end": "428130"
  },
  {
    "text": "today so the question is why aren't developers and QA teams not fuzzing yet",
    "start": "428130",
    "end": "433620"
  },
  {
    "text": "right and the truth is actually that we aren't fuzzing but we aren't fuzzing the",
    "start": "433620",
    "end": "439800"
  },
  {
    "text": "sub 1% what I mean is if you look at the scale of software that is shipped in a",
    "start": "439800",
    "end": "444960"
  },
  {
    "text": "modern OS distribution which is typically around 50,000 software projects and the scale of let's say the",
    "start": "444960",
    "end": "452190"
  },
  {
    "text": "most popular open source passing initiative which is Google OS as fast it only contains 150 software projects so",
    "start": "452190",
    "end": "458400"
  },
  {
    "text": "this is less than 1% of the software that is shipped to users end users and",
    "start": "458400",
    "end": "464490"
  },
  {
    "text": "bear in mind that Google OSS files has been around for approximately 2 years now so it's somewhat surprising that",
    "start": "464490",
    "end": "471780"
  },
  {
    "text": "there are so few projects still in spite of the fact that fuzzing tool chains have really made it easy for developers",
    "start": "471780",
    "end": "478979"
  },
  {
    "text": "to test their code so let me qualify the question that I posed a couple of slides",
    "start": "478979",
    "end": "486030"
  },
  {
    "text": "back the question is not that we are not fuzzing but we're not fuzzing enough we're not caring about the other 99% of",
    "start": "486030",
    "end": "493860"
  },
  {
    "text": "software packages so to to understand",
    "start": "493860",
    "end": "501300"
  },
  {
    "text": "why we might not be fuzzing enough I did an experiment so I'm going to present",
    "start": "501300",
    "end": "507210"
  },
  {
    "text": "two perspectives about open sourcing initiatives such as Google OSS first one",
    "start": "507210",
    "end": "513180"
  },
  {
    "text": "I'm going to present the perspective of a developer who is interested in enrolling their project into this",
    "start": "513180",
    "end": "519959"
  },
  {
    "text": "program and also the perspective of Google so let's see what the developer perspective is so here's what I did I",
    "start": "519959",
    "end": "526800"
  },
  {
    "text": "actually went ahead and try to enroll a software popular software package called",
    "start": "526800",
    "end": "532470"
  },
  {
    "text": "open we for those of you who are not aware of open we switch it's essentially a software virtual networking switch which",
    "start": "532470",
    "end": "541790"
  },
  {
    "text": "does routine packet processing so I went ahead and enrolled this project into OS",
    "start": "541790",
    "end": "548270"
  },
  {
    "text": "as fast and in the process what I found is that I needed to do three things first I needed to write a test program",
    "start": "548270",
    "end": "555250"
  },
  {
    "text": "which is essentially C or C++ program which accepts input from the fuzzing",
    "start": "555250",
    "end": "562190"
  },
  {
    "text": "tool chain and feeds it to the API on the test second I needed to provide a",
    "start": "562190",
    "end": "568190"
  },
  {
    "text": "seed corpus or a list of files that I consider somewhat valid files by the",
    "start": "568190",
    "end": "574070"
  },
  {
    "text": "program under test for example if the switch typically parts is let's say TCP payloads I need to provide a bunch of",
    "start": "574070",
    "end": "581209"
  },
  {
    "text": "TCP payloads as the seed purpose finally I needed to write a build script such",
    "start": "581209",
    "end": "586550"
  },
  {
    "text": "that the software would be fetched from let's say github and then automatically",
    "start": "586550",
    "end": "591770"
  },
  {
    "text": "compile it and linked to the fuzzer binary that would be run on the Google infrastructure and to do this I also had",
    "start": "591770",
    "end": "598490"
  },
  {
    "text": "to provide a docker file which makes it possible to run the fuzzer in a",
    "start": "598490",
    "end": "604399"
  },
  {
    "text": "containerized environment so this is not I would I wouldn't say this is too much work for the developer but it's",
    "start": "604399",
    "end": "611180"
  },
  {
    "text": "certainly not trivial especially for those who have let's say little knowledge of fuzzing toolchains and the",
    "start": "611180",
    "end": "618680"
  },
  {
    "text": "process passing itself and then I present to you the Googler perspective",
    "start": "618680",
    "end": "624890"
  },
  {
    "text": "so what I did next was like I said before I was surprised that even after",
    "start": "624890",
    "end": "630230"
  },
  {
    "text": "two years Google OSS fuzz has under 150 projects so I I spoke to a Googler",
    "start": "630230",
    "end": "637040"
  },
  {
    "text": "called Kostya who is closely involved with this initiative and asked him why is this disparity between the time OS as",
    "start": "637040",
    "end": "645560"
  },
  {
    "text": "far as has been around and so few projects right and this what he said he said that the biggest reasons people are",
    "start": "645560",
    "end": "651500"
  },
  {
    "text": "not using initiatives such as OSS fuzz is that there is huge inertia on the",
    "start": "651500",
    "end": "656990"
  },
  {
    "text": "part of developers there's lack of awareness religious reasons which I",
    "start": "656990",
    "end": "662120"
  },
  {
    "text": "don't know what they are but they exist and no time right so then we got",
    "start": "662120",
    "end": "668320"
  },
  {
    "text": "together and we thought okay we can't do much about religious reasons and lack of awareness of course what we can do is",
    "start": "668320",
    "end": "674889"
  },
  {
    "text": "come to platforms like black black hat and asked you to fuss if you're a software developer so I'm gonna do that",
    "start": "674889",
    "end": "681639"
  },
  {
    "text": "and say please use us as far as please use fiction and fuzz your software however what we can do is try to address",
    "start": "681639",
    "end": "690209"
  },
  {
    "text": "huge inertia and no time right so how can we make it easier for software",
    "start": "690209",
    "end": "696279"
  },
  {
    "text": "developers to fast test the software that they care about right so what is",
    "start": "696279",
    "end": "702990"
  },
  {
    "text": "disappered from my conversation with Kostya and my own experience writing test cases is that the developer",
    "start": "702990",
    "end": "710709"
  },
  {
    "text": "expectation is that I provide these so called fuzzing frameworks my github URL",
    "start": "710709",
    "end": "717790"
  },
  {
    "text": "and the the fuzzing bot or the fuzzing service says ok I take your URL and I",
    "start": "717790",
    "end": "726149"
  },
  {
    "text": "and I give you the box that I found right so that's the developer expectation I provide you the URL you",
    "start": "726149",
    "end": "732069"
  },
  {
    "text": "give me bugs and we are done however the reality is that it it requires",
    "start": "732069",
    "end": "738250"
  },
  {
    "text": "non-trivial amount of work on the part of developers for example providing a test program seats and some",
    "start": "738250",
    "end": "744639"
  },
  {
    "text": "configuration and a bill script and this can be quickly discouraging enough for the developers to not really take it",
    "start": "744639",
    "end": "752170"
  },
  {
    "text": "take it further right so there's a divergence between expectation and reality which I decipher so at this",
    "start": "752170",
    "end": "762040"
  },
  {
    "text": "point this was the main problem we were faced with which is that if we take the route of Google OSS fuzz which requires",
    "start": "762040",
    "end": "769389"
  },
  {
    "text": "developer participation we pretty much encounter the same problems as they will and we will not be able to scale up",
    "start": "769389",
    "end": "775779"
  },
  {
    "text": "fuzzing further so our main philosophy was to start automatic and go to manual",
    "start": "775779",
    "end": "780970"
  },
  {
    "text": "only if necessary so we essentially the idea is we we want the developer to do",
    "start": "780970",
    "end": "789100"
  },
  {
    "text": "as little work as possible right in the beginning to enroll their project but in case the automatic automatic part does",
    "start": "789100",
    "end": "796000"
  },
  {
    "text": "not work we fall back to manual and provide developer to investigate potentially",
    "start": "796000",
    "end": "801490"
  },
  {
    "text": "manually so with this design philosophy in mind we have design fiction and at",
    "start": "801490",
    "end": "807790"
  },
  {
    "text": "this point I'm going to show you a demo of how you can use fixham to essentially",
    "start": "807790",
    "end": "815170"
  },
  {
    "text": "fast software that you care about in other words be biome be you note and here my colleague Vincent is going to",
    "start": "815170",
    "end": "821950"
  },
  {
    "text": "help me with the demo thanks Wilson",
    "start": "821950",
    "end": "827100"
  },
  {
    "text": "so what you're seeing is a terminal where we have set up the fixham to chain",
    "start": "827100",
    "end": "834300"
  },
  {
    "text": "beforehand and now we are going to show you how you can run fix them on a binary",
    "start": "834300",
    "end": "840310"
  },
  {
    "text": "you care about so first we're going to show you a configuration file that is",
    "start": "840310",
    "end": "845890"
  },
  {
    "text": "required to run fixham so let's do cat configuration file so here's what we",
    "start": "845890",
    "end": "857050"
  },
  {
    "text": "want the developers to provide us the name of the software package this is trivial right the out there which is",
    "start": "857050",
    "end": "863860"
  },
  {
    "text": "where the results of passing would be stored the fuzz manager or the mode in",
    "start": "863860",
    "end": "869290"
  },
  {
    "text": "which you want to use fixham in this case it's the be by OB mode and the first deviation in other words how long",
    "start": "869290",
    "end": "874390"
  },
  {
    "text": "you want the fuzzing to take place in minutes so for one minute and we optionally require a docker file which",
    "start": "874390",
    "end": "880660"
  },
  {
    "text": "we'll show you and the docker file in some respects essentially provides a",
    "start": "880660",
    "end": "888550"
  },
  {
    "text": "containerized environment for fussing here what we do is we use a pre-built docker image which we call pac-man fossa",
    "start": "888550",
    "end": "894220"
  },
  {
    "text": "and essentially we clone the software that you want to fuzz in this case J",
    "start": "894220",
    "end": "900490"
  },
  {
    "text": "head which is a JPEG parsing library and then essentially compile it and start",
    "start": "900490",
    "end": "905500"
  },
  {
    "text": "our own fuzzing so let's start fuzzing with these two inputs and to do that what you would do is essentially run",
    "start": "905500",
    "end": "911260"
  },
  {
    "text": "effects and fuzz and the configuration file and at this point what is going to",
    "start": "911260",
    "end": "917620"
  },
  {
    "text": "happen is let's hit enter what's going to happen is fixham starts automatically",
    "start": "917620",
    "end": "922690"
  },
  {
    "text": "inferring the right invocation for the program in other words how do I invoke J head so that parsing takes place it's",
    "start": "922690",
    "end": "929260"
  },
  {
    "text": "also going to info automatically what kinds of input state passes in this case JPEG files and",
    "start": "929260",
    "end": "934720"
  },
  {
    "text": "when all of this is done it's going to provide an optimal seat set to the program and automatically start pausing",
    "start": "934720",
    "end": "940840"
  },
  {
    "text": "like you see on the dashboard it's going to take a while to do all the fussing so",
    "start": "940840",
    "end": "946120"
  },
  {
    "text": "at this point I'm going to hand over the presentation to Winston who's going to begin to fix some internals and tell you in greater detail",
    "start": "946120",
    "end": "952780"
  },
  {
    "text": "how we do the automation so Vincent oh",
    "start": "952780",
    "end": "957660"
  },
  {
    "text": "thanks bhagava so yeah what's that out of the way let me tell you what faz ex",
    "start": "958230",
    "end": "964330"
  },
  {
    "text": "machina or FX I'm actually as it's a distributed last day of fasting framework which basically minimizes the",
    "start": "964330",
    "end": "971800"
  },
  {
    "text": "effort to set up a fuzzing pipeline to point where it's almost completely automated we leverage existing bail",
    "start": "971800",
    "end": "979090"
  },
  {
    "text": "proof software to build this automatic framework right and using this framework",
    "start": "979090",
    "end": "986110"
  },
  {
    "text": "we started passing hundreds of packages immediately so here's how fake them",
    "start": "986110",
    "end": "993220"
  },
  {
    "text": "automated automates this pipeline the only thing you need to provide is a",
    "start": "993220",
    "end": "998890"
  },
  {
    "text": "package size which can be either BYOB configuration like bag of I showed you",
    "start": "998890",
    "end": "1004680"
  },
  {
    "text": "or it could be package repository that you want to fast so say you want to",
    "start": "1004680",
    "end": "1010140"
  },
  {
    "text": "scale up then you could fix them telefax them to download packages from pacman",
    "start": "1010140",
    "end": "1015780"
  },
  {
    "text": "say now once 6m has this package choice or a list of packages that you want to",
    "start": "1015780",
    "end": "1022440"
  },
  {
    "text": "fast it crawls those packages for binaries then in first some way to give",
    "start": "1022440",
    "end": "1028949"
  },
  {
    "text": "those binaries user-defined input select good set of seeds then starts the actual",
    "start": "1028950",
    "end": "1036420"
  },
  {
    "text": "fuzzing for you with a good configuration and after that it triage",
    "start": "1036420",
    "end": "1042089"
  },
  {
    "text": "those two crashes that came out of the fuzzy and then in the last step at hand control like over to you in a dashboard",
    "start": "1042090",
    "end": "1049680"
  },
  {
    "text": "that displays the results in a very convenient way all right so let's look",
    "start": "1049680",
    "end": "1055790"
  },
  {
    "text": "into each step in detail and the first step would be the crawling binary step",
    "start": "1055790",
    "end": "1061190"
  },
  {
    "text": "so like I said if you want to scale up you do the following basically you choose sorry and then provide fax em with a",
    "start": "1061190",
    "end": "1069050"
  },
  {
    "text": "list of packages from that repository that you want to fuss once you've done that sex em tries to download the source",
    "start": "1069050",
    "end": "1077180"
  },
  {
    "text": "of the packages and compile it and also add instrumentation where possible it",
    "start": "1077180",
    "end": "1083420"
  },
  {
    "text": "also tries to after the compilation step extract ready to run elf binaries that",
    "start": "1083420",
    "end": "1089840"
  },
  {
    "text": "we later on one tooth us so we've before we move on to the next",
    "start": "1089840",
    "end": "1094910"
  },
  {
    "text": "step let me quickly clarify what instrumentation means basically backup I explained to you we need to give the",
    "start": "1094910",
    "end": "1101960"
  },
  {
    "text": "phaser feedback and to give the feather PFLAG we need to keep track of the code",
    "start": "1101960",
    "end": "1107420"
  },
  {
    "text": "tablet that we have achieved in a certain execution of the binary we could",
    "start": "1107420",
    "end": "1112820"
  },
  {
    "text": "do this either during compile time and this results in a very fast execution speed but it require a source code for",
    "start": "1112820",
    "end": "1119870"
  },
  {
    "text": "the binary and in the case of fixham that we want to do anything anything",
    "start": "1119870",
    "end": "1125060"
  },
  {
    "text": "automated we also need to be able to automatically build a binary successful",
    "start": "1125060",
    "end": "1130940"
  },
  {
    "text": "which from our experience unfortunately it's not always possible so following",
    "start": "1130940",
    "end": "1136610"
  },
  {
    "text": "our best effort approach we fall back to a slower run time investment ation which",
    "start": "1136610",
    "end": "1142910"
  },
  {
    "text": "also works for black box binaries that means if you call recall the pacman",
    "start": "1142910",
    "end": "1151400"
  },
  {
    "text": "manager package manager example we try to build binary some soils but if there",
    "start": "1151400",
    "end": "1157970"
  },
  {
    "text": "doesn't succeed we then just download the people binaries alright once we have",
    "start": "1157970",
    "end": "1164060"
  },
  {
    "text": "our pre-built or our binaries we need a way we need to identify way to provide",
    "start": "1164060",
    "end": "1170210"
  },
  {
    "text": "them with user-defined input so to give you an some intuition on what this means say you would like to first tcpdump then",
    "start": "1170210",
    "end": "1178310"
  },
  {
    "text": "what you would need to identify is the parameter - NVR and then the path to a",
    "start": "1178310",
    "end": "1184520"
  },
  {
    "text": "file so that tcpdump then reads this file you would also like",
    "start": "1184520",
    "end": "1190580"
  },
  {
    "text": "to identify that tcpdump actually passes pickup files but that's going to be a",
    "start": "1190580",
    "end": "1195890"
  },
  {
    "text": "later step so to formalize this intuitional once we have a binary in the repository",
    "start": "1195890",
    "end": "1203400"
  },
  {
    "text": "we need to identify two things one the parameter which we with which we need to",
    "start": "1203400",
    "end": "1210150"
  },
  {
    "text": "call the binary so that it people processes our user-defined input and the second thing we need to identify this",
    "start": "1210150",
    "end": "1217320"
  },
  {
    "text": "the input channels so that would either be standard in network or a file given",
    "start": "1217320",
    "end": "1224220"
  },
  {
    "text": "or a file path given as a parameter I want to quickly note here that normally",
    "start": "1224220",
    "end": "1230310"
  },
  {
    "text": "network fuzzing is a non-trivial task so what we do is we leverage great existing",
    "start": "1230310",
    "end": "1236520"
  },
  {
    "text": "software in particular we leverage the D soft library out of the premium package which hooks libraries so it's a",
    "start": "1236520",
    "end": "1247200"
  },
  {
    "text": "pre-loaded library which hopes Network calls so that every time the binary",
    "start": "1247200",
    "end": "1254370"
  },
  {
    "text": "reads from a socket the input actually comes from a CDN so in that sense input",
    "start": "1254370",
    "end": "1260700"
  },
  {
    "text": "from SVN and from sockets are the same but for fats ex machina so to give you",
    "start": "1260700",
    "end": "1267300"
  },
  {
    "text": "two more examples well we already have two TCP dump example which would be and we are and then path to a file and say",
    "start": "1267300",
    "end": "1273720"
  },
  {
    "text": "you want to fast we get then you would need to identify local host ad as the",
    "start": "1273720",
    "end": "1278820"
  },
  {
    "text": "invocation that leads to user-defined input all right so to do this Tex M employs the",
    "start": "1278820",
    "end": "1284970"
  },
  {
    "text": "two-phase algorithm in the first phase we call that the collection phase we",
    "start": "1284970",
    "end": "1290900"
  },
  {
    "text": "collect potential parameter candidates where we assume those candidates could",
    "start": "1290900",
    "end": "1296610"
  },
  {
    "text": "lead to the processing of user-defined input we do this by pausing the help text of the binary so in the case of TCP",
    "start": "1296610",
    "end": "1304650"
  },
  {
    "text": "dump for example we would pass the help text and that would point us to the - our parameter and we also employ other",
    "start": "1304650",
    "end": "1312210"
  },
  {
    "text": "heuristics for example route forcing different meta candidates that often",
    "start": "1312210",
    "end": "1318030"
  },
  {
    "text": "lead to processing of user-defined input like - F and then the path to a file then once we have all those parameter",
    "start": "1318030",
    "end": "1325350"
  },
  {
    "text": "candidates for each parameter candidate we do a validation phase which basically",
    "start": "1325350",
    "end": "1331260"
  },
  {
    "text": "means we need to check if the parameter we tried actually let",
    "start": "1331260",
    "end": "1336479"
  },
  {
    "text": "to the processing of user-defined input sorry so here's how we do this and sorry",
    "start": "1336479",
    "end": "1349369"
  },
  {
    "text": "here's how we do this for each parameter we basically create a temporary dummy",
    "start": "1349369",
    "end": "1355709"
  },
  {
    "text": "file and then try to give the dummy file to the binary as input with our",
    "start": "1355709",
    "end": "1361679"
  },
  {
    "text": "parameter in the case where we have a parameter that takes a path to a file we",
    "start": "1361679",
    "end": "1369959"
  },
  {
    "text": "just replace that path with the path to our dummy file and in the case of a",
    "start": "1369959",
    "end": "1375299"
  },
  {
    "text": "parameter that we suspect leads to the processing of input wire centered in our network we just pipe the contents of the",
    "start": "1375299",
    "end": "1382649"
  },
  {
    "text": "dummy file to standard in remember we D sort the binary and then after we've",
    "start": "1382649",
    "end": "1389099"
  },
  {
    "text": "done this we check the system calls of that particular execution and grep for",
    "start": "1389099",
    "end": "1394919"
  },
  {
    "text": "open or read calls for our dummy file and if the system code for that",
    "start": "1394919",
    "end": "1401669"
  },
  {
    "text": "particular execution contains those faults then we know that our parameter",
    "start": "1401669",
    "end": "1407070"
  },
  {
    "text": "indeed led to the processing of user-defined input okay so once we've",
    "start": "1407070",
    "end": "1412769"
  },
  {
    "text": "done that we could already start to fast but we would like to optimize our passing set up a little more so we want",
    "start": "1412769",
    "end": "1419339"
  },
  {
    "text": "to select good seats now what I could see the good seed is basically a valid",
    "start": "1419339",
    "end": "1426299"
  },
  {
    "text": "program input in the case of binary is that process files or process specific",
    "start": "1426299",
    "end": "1433409"
  },
  {
    "text": "protocols it would just be a sample file of the file type data program parsers so",
    "start": "1433409",
    "end": "1442019"
  },
  {
    "text": "come back coming back to the TCP dump example it would just be a pcap file and",
    "start": "1442019",
    "end": "1450649"
  },
  {
    "text": "so to identify this the algorithm we employ is based on coverage and we do",
    "start": "1450649",
    "end": "1457409"
  },
  {
    "text": "this under the assumption that the right file type yields higher coverage all",
    "start": "1457409",
    "end": "1464129"
  },
  {
    "text": "right but before we can implement this we need to acquire a set of sample seed",
    "start": "1464129",
    "end": "1470670"
  },
  {
    "text": "files we decided to crawl it up for that and we did this because often developers",
    "start": "1470670",
    "end": "1477210"
  },
  {
    "text": "include small test files in their repositories so say you want to develop",
    "start": "1477210",
    "end": "1482550"
  },
  {
    "text": "a JPEG buzzer then you would include a jpg file in your data repository to do",
    "start": "1482550",
    "end": "1489420"
  },
  {
    "text": "better unit tests and this leads to the result that often in data repositories",
    "start": "1489420",
    "end": "1496410"
  },
  {
    "text": "they are small sample files which have a lot of chronic cases which is great for",
    "start": "1496410",
    "end": "1501630"
  },
  {
    "text": "our fuzzing purpose okay so what you can see here is a result of that eristic on",
    "start": "1501630",
    "end": "1511560"
  },
  {
    "text": "your x-axis you can see the different file types and then on the y-axis you",
    "start": "1511560",
    "end": "1517020"
  },
  {
    "text": "can see the total coverage the sample files yielded for the tcpdump execution",
    "start": "1517020",
    "end": "1522150"
  },
  {
    "text": "I elaborated on Julia earlier and we can really see this peak here for the pcap",
    "start": "1522150",
    "end": "1529260"
  },
  {
    "text": "file type so this would allow us to identify PKS write file type and dice",
    "start": "1529260",
    "end": "1534480"
  },
  {
    "text": "choose good seats while we were developing fixham we identified three",
    "start": "1534480",
    "end": "1540650"
  },
  {
    "text": "sort of stereotypical coverage patterns one is where the binary process is a",
    "start": "1540650",
    "end": "1546510"
  },
  {
    "text": "single file type that's one on the Left where you just have one peak so it's",
    "start": "1546510",
    "end": "1552480"
  },
  {
    "text": "pretty obvious that we have one right file type then there's another more or less obvious case where the binary",
    "start": "1552480",
    "end": "1558660"
  },
  {
    "text": "process is multiple file types and we just have multiple peaks so that would be the case for an image passer which",
    "start": "1558660",
    "end": "1564660"
  },
  {
    "text": "can price JPEG as well as PNG files and they have a third case where the",
    "start": "1564660",
    "end": "1570360"
  },
  {
    "text": "distribution the coverage distribution is rather noisy and in that case we hand back of control to the user and remote",
    "start": "1570360",
    "end": "1577860"
  },
  {
    "text": "Dominic is going to elaborate on later all right now we have selected to see it",
    "start": "1577860",
    "end": "1583140"
  },
  {
    "text": "we know how to give the binary input so we can finally start first in sizing we",
    "start": "1583140",
    "end": "1589500"
  },
  {
    "text": "try to Excel assemble our own filing experience in to fix them and two",
    "start": "1589500",
    "end": "1594540"
  },
  {
    "text": "results following we use American puzzle which is a well-known established Prezi",
    "start": "1594540",
    "end": "1599640"
  },
  {
    "text": "which has found a lot of crack we use fighting dictionaries where appropriate so here we can leverage our",
    "start": "1599640",
    "end": "1606299"
  },
  {
    "text": "file type inference algorithm so say we know that the binary processes chip files then we can use jiff dictionaries",
    "start": "1606299",
    "end": "1614489"
  },
  {
    "text": "for fuzzy we use address sanitizers which detect memory corruptions whenever",
    "start": "1614489",
    "end": "1619559"
  },
  {
    "text": "possible and we do Network pausing why daddy sock we also schedule the fighting in a round",
    "start": "1619559",
    "end": "1626759"
  },
  {
    "text": "robin fashion so that each binary gets its fair share of fuzzing so to speak",
    "start": "1626759",
    "end": "1632129"
  },
  {
    "text": "and we need to do that because we are in a large-scale set in once we fast we",
    "start": "1632129",
    "end": "1639720"
  },
  {
    "text": "hopefully got some crashes but those crashes are not really structured so we need to bring some structure to the",
    "start": "1639720",
    "end": "1646470"
  },
  {
    "text": "unstructured fuzzing outputs and this is basically this triaging step the triaging step we do two things we",
    "start": "1646470",
    "end": "1653970"
  },
  {
    "text": "classify the crashes according to their severity and we try to deduplicate pressures so that we are only left with",
    "start": "1653970",
    "end": "1661350"
  },
  {
    "text": "unique pressures for this we leverage a",
    "start": "1661350",
    "end": "1666809"
  },
  {
    "text": "six existing tools namely exploitable nafl you tools and exploitable has the",
    "start": "1666809",
    "end": "1673830"
  },
  {
    "text": "built-in eristic heuristic to assess the severity and the uniqueness of a crash",
    "start": "1673830",
    "end": "1680369"
  },
  {
    "text": "we only fixed a functionality in exploitable namely the handling of a",
    "start": "1680369",
    "end": "1688350"
  },
  {
    "text": "sense tech traces so on this slide you can see a sample a sense take place and",
    "start": "1688350",
    "end": "1693710"
  },
  {
    "text": "what exploitable does it takes into account two things to assess the place",
    "start": "1693710",
    "end": "1699919"
  },
  {
    "text": "disarray B of a crash into uniqueness so one is the type of the memory corruption",
    "start": "1699919",
    "end": "1705749"
  },
  {
    "text": "say it's HIPAA overflow you would consider that more severe than a null",
    "start": "1705749",
    "end": "1712109"
  },
  {
    "text": "pointer dereference for example and the other one is you try to calculate a unique hash of the SEC trace to",
    "start": "1712109",
    "end": "1720509"
  },
  {
    "text": "deduplicate the Crushers okay we finally arrived at the last step the dashboard",
    "start": "1720509",
    "end": "1727320"
  },
  {
    "text": "step where we show you the results and for this I would like to a spec over for existence because I figured",
    "start": "1727320",
    "end": "1735059"
  },
  {
    "text": "instead of showing you more slides I will just show you another demo yeah so",
    "start": "1735059",
    "end": "1742710"
  },
  {
    "text": "what you can see here practically took you bring the window a little bit to the",
    "start": "1742710",
    "end": "1747840"
  },
  {
    "text": "right because I think it's cut off sorry for that okay what you can see here is",
    "start": "1747840",
    "end": "1759840"
  },
  {
    "text": "the effects and dashboard where you can see the results and it shows you which packages you fast",
    "start": "1759840",
    "end": "1766200"
  },
  {
    "text": "and what's the worst crash that has been found in those packages so say we we",
    "start": "1766200",
    "end": "1773730"
  },
  {
    "text": "found an exploitable pression jus new PG for example and say we want to log into",
    "start": "1773730",
    "end": "1779070"
  },
  {
    "text": "that then we can click on that package alright and then we can see all the",
    "start": "1779070",
    "end": "1785340"
  },
  {
    "text": "wineries we have found in that package that we fast already and which crashes have been found for their specific",
    "start": "1785340",
    "end": "1792179"
  },
  {
    "text": "binary and and the death what we can see alright we found an exploitable crash in",
    "start": "1792179",
    "end": "1797399"
  },
  {
    "text": "kbx utah and we would like to look into that a little more so we click on the binary and here we see an overview of",
    "start": "1797399",
    "end": "1805470"
  },
  {
    "text": "all the crashes we found which are hopefully unique because we do the deal organization and their severity well the",
    "start": "1805470",
    "end": "1813809"
  },
  {
    "text": "last thing we could do if we want to explore the creatures a little more say we want to debug or we want to end some",
    "start": "1813809",
    "end": "1819299"
  },
  {
    "text": "bug bounty then we can view the crash law or the Athens tech fest like so yeah",
    "start": "1819299",
    "end": "1826950"
  },
  {
    "text": "all right so that's the dashboard and as you have might notice we have a lot of pressures that we found so I will hand",
    "start": "1826950",
    "end": "1834360"
  },
  {
    "text": "over to Dominic now who is going to explain to you the results or findings and to time warp modes which is remote",
    "start": "1834360",
    "end": "1842490"
  },
  {
    "text": "we hand back control to the user in case fix them fails with their infos Thank",
    "start": "1842490",
    "end": "1849119"
  },
  {
    "text": "You Vincent yeah so did dashboard you've just seen it and what better way to end blackhat",
    "start": "1849119",
    "end": "1858090"
  },
  {
    "text": "and with a few crashes right so let's let me present you the findings what we",
    "start": "1858090",
    "end": "1864389"
  },
  {
    "text": "did was we just ran effects them against our package repo for a few days and we just ran it on the",
    "start": "1864389",
    "end": "1872090"
  },
  {
    "text": "top 500 packages which means we ran it on around 200 containing also binaries",
    "start": "1872090",
    "end": "1878780"
  },
  {
    "text": "like the other ones are probably Python or something we only ran it on one machine also we could have done it on",
    "start": "1878780",
    "end": "1885710"
  },
  {
    "text": "different machines because we're like using celery like large-scale stuff and",
    "start": "1885710",
    "end": "1891790"
  },
  {
    "text": "well this is how we started the day zero and the first day we had the first",
    "start": "1891790",
    "end": "1897830"
  },
  {
    "text": "crashes or on that day but next day we were happy to find crashes after the",
    "start": "1897830",
    "end": "1902840"
  },
  {
    "text": "second day of those 200 packages 29 of them had binaries that crashed 12 of",
    "start": "1902840",
    "end": "1909710"
  },
  {
    "text": "them were exploitable according to our automated triaging so that doesn't mean",
    "start": "1909710",
    "end": "1916010"
  },
  {
    "text": "that others are not exploitable and it doesn't mean that all of them are super severe bugs that can be exploited over",
    "start": "1916010",
    "end": "1922190"
  },
  {
    "text": "the network it just means that these are like heap out of bound reads or writes or something like that and all of them",
    "start": "1922190",
    "end": "1929270"
  },
  {
    "text": "were pretty popular so we only took the 500 top art packages including TL",
    "start": "1929270",
    "end": "1935630"
  },
  {
    "text": "- would have never heard about but it's part of libreoffice sort of maybe something there if you want to look into",
    "start": "1935630",
    "end": "1941540"
  },
  {
    "text": "it and then drift to PNG I just included it because I like just tips it's",
    "start": "1941540",
    "end": "1946550"
  },
  {
    "text": "actually not one of the 500 most popular packages although it should be yeah so crashes right there's a heap of overflow",
    "start": "1946550",
    "end": "1954590"
  },
  {
    "text": "in sis detail with the read out-of-bounds read of what 4k or",
    "start": "1954590",
    "end": "1959630"
  },
  {
    "text": "something like that which is obviously not too good continuing on what if facts",
    "start": "1959630",
    "end": "1966260"
  },
  {
    "text": "some inference fails what if we cannot do it fully automated well we have so",
    "start": "1966260",
    "end": "1971570"
  },
  {
    "text": "many packages we ran it on 200 packages who cares right we cannot run it we just",
    "start": "1971570",
    "end": "1977870"
  },
  {
    "text": "drop it now that's obviously not true that would be boring as bhargava said in",
    "start": "1977870",
    "end": "1984410"
  },
  {
    "text": "the beginning you've seen this slide before when automatic mode fails we fall back to manual we introduced a new way",
    "start": "1984410",
    "end": "1992660"
  },
  {
    "text": "to deal with AFL which is easy to use",
    "start": "1992660",
    "end": "1997970"
  },
  {
    "text": "hopefully and hopefully makes sense so basically as user you can use the MA FL or you can",
    "start": "1997970",
    "end": "2006200"
  },
  {
    "text": "use the tool as you would usually because you know things that other people don't using time work here we have an",
    "start": "2006200",
    "end": "2014960"
  },
  {
    "text": "unfeasible source code which is please give me eight characters and then please",
    "start": "2014960",
    "end": "2021980"
  },
  {
    "text": "give me the same eight characters again that's basically into entering a password well for user right you read it",
    "start": "2021980",
    "end": "2029390"
  },
  {
    "text": "please give me a charge please give you the same hrs it is extremely easy to do however a father that can only see how",
    "start": "2029390",
    "end": "2037490"
  },
  {
    "text": "if it reaches new basic blocks or not and it can never see if it reaches the correct ones this is well it takes how",
    "start": "2037490",
    "end": "2045260"
  },
  {
    "text": "much how long does it take to brute-force eight characters it takes rather long hopefully else our passwords",
    "start": "2045260",
    "end": "2052399"
  },
  {
    "text": "are pretty bad anyway so using that and",
    "start": "2052400",
    "end": "2058090"
  },
  {
    "text": "below there would be the crash so using that if the user can use it",
    "start": "2058090",
    "end": "2063379"
  },
  {
    "text": "until their point and then start fuzzing we can find the bugs despite this being",
    "start": "2063380",
    "end": "2068450"
  },
  {
    "text": "an unfeasible binary just thanks to human use user mode anyway here's",
    "start": "2068450",
    "end": "2074870"
  },
  {
    "text": "another bug right of size 8 in G disk which is part of GPT fdisk so time work",
    "start": "2074870",
    "end": "2083090"
  },
  {
    "text": "mode as I just said it can start fuzzing at any point so it will span spin up the fork server I'll go into that in a bit",
    "start": "2083090",
    "end": "2090190"
  },
  {
    "text": "at any given point in the program it requires little technical knowledge and it's fully integrated with XM it's shown",
    "start": "2090190",
    "end": "2097490"
  },
  {
    "text": "in the dashboard whenever FEX some fields that there's a need for it so it's like hmm I'm not sure about if I",
    "start": "2097490",
    "end": "2103790"
  },
  {
    "text": "invert this correctly maybe you want to have a look at it yourself and then you can choose if the binary is interesting",
    "start": "2103790",
    "end": "2110420"
  },
  {
    "text": "or not like most of them for me or not and then it'll generate test cases when",
    "start": "2110420",
    "end": "2116390"
  },
  {
    "text": "you use the binary so this is how if I'll usually works if L spawns a but or",
    "start": "2116390",
    "end": "2122750"
  },
  {
    "text": "at least the Frog server mode FL spawns its child and the child then pauses at",
    "start": "2122750",
    "end": "2128750"
  },
  {
    "text": "the very beginning the instrumented child and Forks are for each new fast instance that way you",
    "start": "2128750",
    "end": "2135030"
  },
  {
    "text": "you know copy-on-write and it's a lot quicker as then if you would restart the whole program every time and we added",
    "start": "2135030",
    "end": "2142050"
  },
  {
    "text": "you know a command control port I have one FL and a standard i/o port so you",
    "start": "2142050",
    "end": "2148170"
  },
  {
    "text": "can then give input over network and then using the control port you can go",
    "start": "2148170",
    "end": "2153600"
  },
  {
    "text": "back to the beginning of the program or you can start the folks over at any given point in time yeah jpg up Tim",
    "start": "2153600",
    "end": "2163260"
  },
  {
    "text": "another read of size 29 let's let's do the time-warp so winston is gonna assist",
    "start": "2163260",
    "end": "2169410"
  },
  {
    "text": "me with the demo this time and I'm gonna cut short a little bit because of time",
    "start": "2169410",
    "end": "2177769"
  },
  {
    "text": "so this is this is actually the j-hat demo dead bug over start in the very",
    "start": "2178850",
    "end": "2184110"
  },
  {
    "text": "beginning this is our demo dry head so this is why we only have one package here it found J head exploit or not",
    "start": "2184110",
    "end": "2191400"
  },
  {
    "text": "exploit with a back after one minute and and revive me is the package that we",
    "start": "2191400",
    "end": "2197970"
  },
  {
    "text": "added so in the very left you see on the very right sorry you see the timer button you can press",
    "start": "2197970",
    "end": "2203490"
  },
  {
    "text": "it press it yes it will take some time spinning up hopefully",
    "start": "2203490",
    "end": "2208530"
  },
  {
    "text": "yeah it'll spin out the docker in the background so everything is containerized and it will connect to the",
    "start": "2208530",
    "end": "2214440"
  },
  {
    "text": "binary and here this is the command prompt as you would see it if you would run the binary directly so enter a char",
    "start": "2214440",
    "end": "2221430"
  },
  {
    "text": "password here that is the thing that you've seen before and slides yeah you can interact with it or something yeah",
    "start": "2221430",
    "end": "2226920"
  },
  {
    "text": "yeah okay let's go back to the slides then thank you Thank You Vincent okay so",
    "start": "2226920",
    "end": "2233150"
  },
  {
    "text": "this is the internals this is how you know if I can't do and passing talk",
    "start": "2233150",
    "end": "2238650"
  },
  {
    "text": "without showing you I fell for once so on the on the bottom you see that it crashes after a very short time after",
    "start": "2238650",
    "end": "2246330"
  },
  {
    "text": "we've done we enter a test test and test test again using standard i/o and then",
    "start": "2246330",
    "end": "2253080"
  },
  {
    "text": "started fuzzing using the command and control server on the on the top here",
    "start": "2253080",
    "end": "2258470"
  },
  {
    "text": "yeah another crash this time it's in J hat J ed was the crash as you just saw there",
    "start": "2258470",
    "end": "2263700"
  },
  {
    "text": "were many more caresses actually out of bounds beat so to conclude this",
    "start": "2263700",
    "end": "2268970"
  },
  {
    "text": "how bad is it right if we have crashes in bash not embarrass re but in in the",
    "start": "2268970",
    "end": "2275240"
  },
  {
    "text": "package bash and when you install bash you get men into HTML you get like out",
    "start": "2275240",
    "end": "2280550"
  },
  {
    "text": "of pound read out of bounds right and the sauce this is the crashing input by the way it's some random generates that",
    "start": "2280550",
    "end": "2288710"
  },
  {
    "text": "we caught something from github and this is random stuff that it generated it included CSS and whatever it's kind of",
    "start": "2288710",
    "end": "2297740"
  },
  {
    "text": "resembles pro your man page I don't know and meant to it HTML even has this line",
    "start": "2297740",
    "end": "2303170"
  },
  {
    "text": "and it's intro this program is rather buggy but in spite of that it often works yeah so okay not a bug right off",
    "start": "2303170",
    "end": "2312109"
  },
  {
    "text": "says whatever what happens to the box so in the beginning we started off okay",
    "start": "2312109",
    "end": "2317450"
  },
  {
    "text": "let's report some we're gonna find some so let's report them mostly either no",
    "start": "2317450",
    "end": "2323420"
  },
  {
    "text": "response or they didn't know how to how to deal with a nascent output and the binary blob so the guys from Lib PNG",
    "start": "2323420",
    "end": "2331130"
  },
  {
    "text": "told us please send a non binary file as input I don't know what a non binary file would be but if they would run the",
    "start": "2331130",
    "end": "2337220"
  },
  {
    "text": "binary file in the PNG it would crash [Music] then there was another one shape Nick",
    "start": "2337220",
    "end": "2343280"
  },
  {
    "text": "optimum which was already fixed upstream but just for a year not downstream in",
    "start": "2343280",
    "end": "2349760"
  },
  {
    "text": "art or upstream in art it's just in the github repo fixed and then there is J",
    "start": "2349760",
    "end": "2356480"
  },
  {
    "text": "had that we just talked about it's also in the art repo still and it will probably always stay there another read",
    "start": "2356480",
    "end": "2364420"
  },
  {
    "text": "and this was the answer of the author unfortunately I don't have time to work on it these days well at least he",
    "start": "2364420",
    "end": "2371000"
  },
  {
    "text": "answered in one day so I've heard about you know IOT is so broken and nobody is one of we wants to fix bugs but just",
    "start": "2371000",
    "end": "2378770"
  },
  {
    "text": "look at your local repository here that's the - bug right up sized one and",
    "start": "2378770",
    "end": "2385430"
  },
  {
    "text": "some random library so what do we want to do in future it's not about the box",
    "start": "2385430",
    "end": "2390829"
  },
  {
    "text": "we're not here for the box we here for the tool obviously it's rent change human can still do a lot better than a",
    "start": "2390829",
    "end": "2396319"
  },
  {
    "text": "fully automated solution we want to improve that we want to let the machines take over eventually",
    "start": "2396319",
    "end": "2402290"
  },
  {
    "text": "at more repos so right now we have apt which wasn't tested in last week though we have pac-man we want to scale maybe",
    "start": "2402290",
    "end": "2410089"
  },
  {
    "text": "github we started doing that a little bit it's hard you have to infer how to build a whole",
    "start": "2410089",
    "end": "2416390"
  },
  {
    "text": "repo that's not easy and we're still puzzling pretty shallow so you know like",
    "start": "2416390",
    "end": "2422270"
  },
  {
    "text": "symbolic execution at some point or something we need to go deeper to stay",
    "start": "2422270",
    "end": "2427400"
  },
  {
    "text": "in the meme category here lip soundTouch it's used in sounds to it oh we",
    "start": "2427400",
    "end": "2435079"
  },
  {
    "text": "downloaded something sorry yeah this is using audacity or some I don't so to",
    "start": "2435079",
    "end": "2442670"
  },
  {
    "text": "come back to the beginning the TLDR we have a fully automated fuzzing test framework clever tricks up its sleeve",
    "start": "2442670",
    "end": "2449440"
  },
  {
    "text": "you can either bring your own binaries or you can you know fast distributions and we found numerous bugs if you should",
    "start": "2449440",
    "end": "2456260"
  },
  {
    "text": "just see and it's free and open source starting now it just got released to the public oh",
    "start": "2456260",
    "end": "2461619"
  },
  {
    "text": "yeah there's a back in SQLite not a SQLite but inside its repo so it",
    "start": "2461619",
    "end": "2468740"
  },
  {
    "text": "wouldn't have been possible with lots of people's help and without their prior contributions that we used from you know",
    "start": "2468740",
    "end": "2475849"
  },
  {
    "text": "open source community more help is always appreciated so go to github.com so there's FG secti so let's fix them",
    "start": "2475849",
    "end": "2482869"
  },
  {
    "text": "now and you know try it out maybe it works hopefully works now it will work if not two decisions if you are ears we",
    "start": "2482869",
    "end": "2491359"
  },
  {
    "text": "are always happy to hear them so to wrap it up simple memory corruptions are",
    "start": "2491359",
    "end": "2496430"
  },
  {
    "text": "still way too widespread we don't know why we find so many bugs in simple tools it should be easy to trivial to use AFL",
    "start": "2496430",
    "end": "2503690"
  },
  {
    "text": "by this point checksum then tries to help out by I oughta mating this and it",
    "start": "2503690",
    "end": "2510680"
  },
  {
    "text": "scales it to everywhere you want to go there's no more excuses to not fastest",
    "start": "2510680",
    "end": "2516530"
  },
  {
    "text": "starting today so thank you I think we have time left if not and we can",
    "start": "2516530",
    "end": "2522380"
  },
  {
    "text": "continue in the rep room that was Faxon thanks [Applause]",
    "start": "2522380",
    "end": "2535099"
  }
]