[
  {
    "start": "0",
    "end": "34000"
  },
  {
    "text": "uh my name is sha gu feel free to call me Rex uh this is a work that uh a",
    "start": "199",
    "end": "6080"
  },
  {
    "text": "collaboration with my colleague Shan W from Intel uh we both do security research at Intel and we work on mobile",
    "start": "6080",
    "end": "12960"
  },
  {
    "text": "and iot uh security so uh before just before the",
    "start": "12960",
    "end": "21039"
  },
  {
    "text": "talk uh there's a disclaimer we don't speak for our employers and all the",
    "start": "21039",
    "end": "26279"
  },
  {
    "text": "information here are our responsibility including mistakes and bad jokes",
    "start": "26279",
    "end": "31960"
  },
  {
    "start": "34000",
    "end": "34000"
  },
  {
    "text": "so just before I dig into the details of the talk uh I want to give everybody a high level summary about what uh what is",
    "start": "34200",
    "end": "40879"
  },
  {
    "text": "the research about and what what our solution is trying to solve so um uh as",
    "start": "40879",
    "end": "46000"
  },
  {
    "text": "we know that malware development and detection it's a catam mouse game right the malware keep evolving and people try",
    "start": "46000",
    "end": "53039"
  },
  {
    "text": "to write malware that more stealthy and traditional software level detection mechanisms um most of them",
    "start": "53039",
    "end": "60680"
  },
  {
    "text": "relies on the SEC uh correct functioning of the operating system and there are",
    "start": "60680",
    "end": "66159"
  },
  {
    "text": "some new approaches that propos that that are based on vmn uh uh based",
    "start": "66159",
    "end": "72000"
  },
  {
    "text": "detections but then uh when you use vmm based approaches you have a lot of",
    "start": "72000",
    "end": "77040"
  },
  {
    "text": "semantic gaps and and there are ways to solve those semantic gaps but but it",
    "start": "77040",
    "end": "82119"
  },
  {
    "text": "will incur a lot of uh performance overhead so what we're trying to do here is to uh show you a new way to bring",
    "start": "82119",
    "end": "89920"
  },
  {
    "text": "reach this uh semantic Gap or even without knowing uh uh the uh detail",
    "start": "89920",
    "end": "95159"
  },
  {
    "text": "implementation of the operating system and we're going to show you that by using the hardware performance counters",
    "start": "95159",
    "end": "101720"
  },
  {
    "text": "you can detect the kernel RIT with very low performance overhead and",
    "start": "101720",
    "end": "107719"
  },
  {
    "text": "uh through the whole talk I'm going to use kernel RIT uh Linux specifically",
    "start": "107719",
    "end": "113040"
  },
  {
    "text": "Linux kernel ret to demonstrate the idea but the idea is general and you can apply to other type of MERS",
    "start": "113040",
    "end": "121680"
  },
  {
    "text": "so here's the agenda of the talk uh first I'm going to briefly explain kernal RIT and and then I'm going to",
    "start": "123360",
    "end": "130440"
  },
  {
    "text": "talk about Hardware performance counters then I'm going to explain uh our design",
    "start": "130440",
    "end": "135640"
  },
  {
    "text": "the num cheacker and then how to use the design to detect and identify rot kits",
    "start": "135640",
    "end": "142200"
  },
  {
    "text": "and then I'll conclude the talk all right um so since we're at",
    "start": "142200",
    "end": "149640"
  },
  {
    "text": "Black had I assume that most of the audience probably aware of the general ideas of RIT uh basically is a type of",
    "start": "149640",
    "end": "156280"
  },
  {
    "text": "software that you attacker injects into a computer and then they use it to hide",
    "start": "156280",
    "end": "162720"
  },
  {
    "text": "uh their activities from the user or the detection tool and and one type of ret",
    "start": "162720",
    "end": "168440"
  },
  {
    "text": "that that is very stealthy is Kernel RIT um the reason is that it directly affect",
    "start": "168440",
    "end": "174040"
  },
  {
    "text": "the operating system kernel so sometimes you can have unrestricted access to the system",
    "start": "174040",
    "end": "180519"
  },
  {
    "text": "resources okay and um since you can do that you can use it to hide their hide",
    "start": "180519",
    "end": "186959"
  },
  {
    "text": "the presence um open back doors gain Ro privileges or disable defense",
    "start": "186959",
    "end": "194799"
  },
  {
    "text": "mechanisms and uh we classify the kernel rooked uh Behavior into two types um the",
    "start": "196400",
    "end": "203239"
  },
  {
    "start": "197000",
    "end": "197000"
  },
  {
    "text": "first one is direct kernel object manipulation also known as decom um this",
    "start": "203239",
    "end": "208640"
  },
  {
    "text": "type of rookie Behavior here basically uh subverts the kernel by directly manipulating the uh data objects in in",
    "start": "208640",
    "end": "216200"
  },
  {
    "text": "the memory um this kind of uh rookie Behavior has",
    "start": "216200",
    "end": "222040"
  },
  {
    "text": "its limitation because it's only it's only changing the data objects in the memory and since it's only changing",
    "start": "222040",
    "end": "229720"
  },
  {
    "text": "specific data objects you can detect it relatively Easier by checking those data",
    "start": "229720",
    "end": "235480"
  },
  {
    "text": "objects in the memory um so another type of uh rooked behavior is Kernel object",
    "start": "235480",
    "end": "242840"
  },
  {
    "text": "hooking um this type of uh rooked Behavior basically hijacks the kernal",
    "start": "242840",
    "end": "247959"
  },
  {
    "text": "control flow and and um compared to decom it's",
    "start": "247959",
    "end": "253480"
  },
  {
    "text": "much harder to detect it and their studies show that a majority of the Linux kernel ret changes the control",
    "start": "253480",
    "end": "261560"
  },
  {
    "text": "flow behavior of the Linux kernel and that's why uh our research is mainly",
    "start": "261560",
    "end": "266919"
  },
  {
    "text": "focus on this type of rooked uh Behavior so if you see the diagram um it shows",
    "start": "266919",
    "end": "274520"
  },
  {
    "text": "one example how the ret uh it's going to affect your system so for example uh you",
    "start": "274520",
    "end": "281120"
  },
  {
    "text": "have a application running in the user mode and then it will trigger a CIS call using the uh int 80 instruction and then",
    "start": "281120",
    "end": "290960"
  },
  {
    "text": "the execution will switch to the interrupt table and then the system will look up the interrupt descript",
    "start": "290960",
    "end": "296960"
  },
  {
    "text": "descriptor table and then you will uh try to find which CIS call it is by",
    "start": "296960",
    "end": "302000"
  },
  {
    "text": "looking up the system call table now if your system is not affected uh you will execute the original CIS call table and",
    "start": "302000",
    "end": "309000"
  },
  {
    "text": "then execute the original CIS routine but if you have a RIT it will it will",
    "start": "309000",
    "end": "314639"
  },
  {
    "text": "try to give you a fake uh CIS called table and then jump to a malitia cisal",
    "start": "314639",
    "end": "320479"
  },
  {
    "text": "routine okay um so two specific examples of these rets one is uh sucket",
    "start": "320479",
    "end": "328000"
  },
  {
    "text": "ret uh the uh the this R basically uh",
    "start": "328000",
    "end": "333160"
  },
  {
    "text": "give you a fake CIS call table and another example is um a door NG RIT uh",
    "start": "333160",
    "end": "339600"
  },
  {
    "text": "this RIT changes the control flow at the virtual file system layer uh for some of the sis called",
    "start": "339600",
    "end": "347039"
  },
  {
    "text": "routines okay so we got this problem now people have come up with uh different",
    "start": "349400",
    "end": "354479"
  },
  {
    "text": "solutions so the first solution is the host Bas ret detection uh the high level idea is that the detection tool itself",
    "start": "354479",
    "end": "362199"
  },
  {
    "text": "runs uh within the operating system now the and and periodically CH",
    "start": "362199",
    "end": "368479"
  },
  {
    "text": "uh checks the kernal static and dynamic objects right but the challenge is that since",
    "start": "368479",
    "end": "374880"
  },
  {
    "text": "the detection tool runs with the same privilege uh uh uh as well the detection",
    "start": "374880",
    "end": "382000"
  },
  {
    "text": "Tool uh runs the same privilege as the gas OS uh the the operating system so if",
    "start": "382000",
    "end": "389080"
  },
  {
    "text": "a rook has higher privilege you will temper the detection process so then people propose a",
    "start": "389080",
    "end": "396479"
  },
  {
    "text": "different approach uh using virtualization now the detection tool runs at the vmm",
    "start": "396479",
    "end": "403039"
  },
  {
    "text": "level and it also uh the the tool at the vmm level also checks the uh static and",
    "start": "403039",
    "end": "410280"
  },
  {
    "text": "dynamic kernel objects so this is good it solves the",
    "start": "410280",
    "end": "415319"
  },
  {
    "text": "problem of the privileged separation but it also has its own challenges um so one of the biggest challenges is that it has",
    "start": "415319",
    "end": "421919"
  },
  {
    "text": "semantic gaps between the external and the internal observation of the gas operating system uh what that means is",
    "start": "421919",
    "end": "428879"
  },
  {
    "text": "that it requires very detailed knowledge of the uh gas OS",
    "start": "428879",
    "end": "435639"
  },
  {
    "text": "implementation and and and people try to come up with uh different ideas to bridge the semantic gaps but then all of",
    "start": "435639",
    "end": "443599"
  },
  {
    "text": "these uh idea so far will incur a significant performance overhead",
    "start": "443599",
    "end": "450440"
  },
  {
    "text": "so so we propose uh num cheer um it's also an architecture that runs",
    "start": "452599",
    "end": "459759"
  },
  {
    "text": "at the vmm level and it does not require detailed knowledge of the gasos",
    "start": "459759",
    "end": "466599"
  },
  {
    "text": "implementation and the way we achieve it uh without knowing the detail knowledge",
    "start": "466599",
    "end": "471919"
  },
  {
    "text": "of the gasos implementation is to validate the execution the software",
    "start": "471919",
    "end": "477440"
  },
  {
    "text": "execution flow using Hardware Prof perance counters so the the high level idea is that you basically observe the",
    "start": "477440",
    "end": "484919"
  },
  {
    "text": "hardware behavior from the software flow you're checking the hardware behavior when you",
    "start": "484919",
    "end": "491400"
  },
  {
    "text": "execute certain software",
    "start": "491400",
    "end": "494520"
  },
  {
    "start": "498000",
    "end": "498000"
  },
  {
    "text": "programs all right so before I dig into the detail of num cheacker I'm going to give a brief explanation of uh Hardware",
    "start": "498440",
    "end": "505680"
  },
  {
    "text": "performance counters so U they Hardware performance counter HPC are also known",
    "start": "505680",
    "end": "512320"
  },
  {
    "text": "as a uh performance monitoring unit and they're originally used for",
    "start": "512320",
    "end": "517479"
  },
  {
    "text": "performance tuning so to give you some example um both commercially available Intel and",
    "start": "517479",
    "end": "523839"
  },
  {
    "text": "AMD CPUs have those counters um and those counters uh uh",
    "start": "523839",
    "end": "530680"
  },
  {
    "text": "each core has a certain number of counters so sorry once you uh once you",
    "start": "530680",
    "end": "538920"
  },
  {
    "text": "enable the counter the counter will automatically start counting the events of the uh based on what you",
    "start": "538920",
    "end": "545480"
  },
  {
    "text": "configure and and this typical events um include uh counting the clock Cycles",
    "start": "545480",
    "end": "551760"
  },
  {
    "text": "counting instruction retirement basically means how much instruction how many instructions have been completed uh",
    "start": "551760",
    "end": "558320"
  },
  {
    "text": "cash misses or tlb misses right and and these events are very rich in modern uh",
    "start": "558320",
    "end": "565600"
  },
  {
    "text": "CPUs uh both in Intel and AMD CPUs you can find more than 100 Hardware events",
    "start": "565600",
    "end": "571839"
  },
  {
    "text": "uh that you can count so I'm not going to jump into",
    "start": "571839",
    "end": "577079"
  },
  {
    "text": "detail how to use the counters if you want to know the detail you can refer to the programmer",
    "start": "577079",
    "end": "582839"
  },
  {
    "text": "menu but basically each uh counter can be configured to monitor any event that",
    "start": "582839",
    "end": "589959"
  },
  {
    "text": "you like to see okay um so as I mentioned our our",
    "start": "589959",
    "end": "597600"
  },
  {
    "text": "approach is vmn based so um the virtualization technology that",
    "start": "597600",
    "end": "604200"
  },
  {
    "text": "we use in our experiment is KVM in Linux um but you can use other virtualization",
    "start": "604200",
    "end": "609480"
  },
  {
    "text": "technology as well okay but I'll explain based on the KVM architecture so KVM is",
    "start": "609480",
    "end": "615279"
  },
  {
    "text": "uh basically based on the hardware extension from commercial CPUs uh it has",
    "start": "615279",
    "end": "620880"
  },
  {
    "text": "a gas mode and a host mode each VM is running as a process in the",
    "start": "620880",
    "end": "626839"
  },
  {
    "text": "host and and and KVM has a k uh KVM kernel module",
    "start": "626839",
    "end": "633600"
  },
  {
    "text": "which handles the interceptions it also has a Linux perf",
    "start": "633600",
    "end": "639079"
  },
  {
    "text": "event kernel service and this service basically helps you to initialize enable",
    "start": "639079",
    "end": "645079"
  },
  {
    "text": "disable uh reads or close the",
    "start": "645079",
    "end": "649320"
  },
  {
    "text": "hpcs okay so we we develop three",
    "start": "652720",
    "end": "658000"
  },
  {
    "text": "different components uh on top of the KVM architecture um so the first one is the",
    "start": "658000",
    "end": "664760"
  },
  {
    "text": "num trer kernel module and the host kernel uh this module basically",
    "start": "664760",
    "end": "670120"
  },
  {
    "text": "responsible for communicating between the kvn kernel and the perform",
    "start": "670120",
    "end": "675160"
  },
  {
    "text": "Performance Event per perfect event kernel service so um the KVM kernel will",
    "start": "675160",
    "end": "682839"
  },
  {
    "text": "notify when we should start counting and when we should stop counting okay um the",
    "start": "682839",
    "end": "689399"
  },
  {
    "text": "second module that we add is the configuration program that runs in the user space so because there's a limited",
    "start": "689399",
    "end": "696959"
  },
  {
    "text": "number of counters on the CPU but there are so many events to count and if you",
    "start": "696959",
    "end": "702160"
  },
  {
    "text": "count the number of CIS call combinations along with the event that you want to count there will be a huge",
    "start": "702160",
    "end": "708480"
  },
  {
    "text": "number so we develop a configuration program you can turn on which CIS call and event combination you want to",
    "start": "708480",
    "end": "715639"
  },
  {
    "text": "count um and then um the count value will be written to lock files and those",
    "start": "715639",
    "end": "722040"
  },
  {
    "text": "lock files are used to create reference models that is that we use to detect the",
    "start": "722040",
    "end": "728920"
  },
  {
    "text": "r kit and if it is at wrong time we're we're going to use those lock uh data to",
    "start": "728920",
    "end": "734920"
  },
  {
    "text": "compare with the reference model so I'm going to show you what that mean I'm going to show you the flow uh of the num",
    "start": "734920",
    "end": "741600"
  },
  {
    "text": "tracker design so basically it it is a two-phase",
    "start": "741600",
    "end": "747480"
  },
  {
    "start": "744000",
    "end": "744000"
  },
  {
    "text": "detection and identification it has a offline phase and it has the online phase right so in the offline",
    "start": "747480",
    "end": "754639"
  },
  {
    "text": "phase um when you first deploy the system the the gas OS is clean it's not",
    "start": "754639",
    "end": "760399"
  },
  {
    "text": "infected by the ret right so um the host will prepare to launch the num tracker",
    "start": "760399",
    "end": "768120"
  },
  {
    "text": "functionality and and what it does is that it logs into the guest and then execute a test program or a set of test",
    "start": "768279",
    "end": "776440"
  },
  {
    "text": "programs I'll explain what test program mean and when it launches a test program um",
    "start": "776440",
    "end": "783560"
  },
  {
    "text": "it is going to uh the kernel is going to monitor the hardware",
    "start": "783560",
    "end": "789199"
  },
  {
    "text": "events and then you will lock the uh HPC reading",
    "start": "789480",
    "end": "794839"
  },
  {
    "text": "results now the in the offline phase the HPC reading results we use it as a",
    "start": "795639",
    "end": "801360"
  },
  {
    "text": "reference model and then at the online phase uh when we want to detect whether the system has a rotate or not we again",
    "start": "801360",
    "end": "809639"
  },
  {
    "text": "we launch n cheer and then we monitor the CIS call and the hardware event right we by executing the test",
    "start": "809639",
    "end": "818079"
  },
  {
    "text": "program and then we log those results and compare with the reference model",
    "start": "818079",
    "end": "825279"
  },
  {
    "text": "okay so this is a very high level flow um um there are several questions uh",
    "start": "825519",
    "end": "832120"
  },
  {
    "text": "that you probably have well the first one is uh what is in the test program uh how do we determine what's in the test",
    "start": "832120",
    "end": "838800"
  },
  {
    "text": "program and and the second is what kind of event and CIS call should we should we select",
    "start": "838800",
    "end": "844079"
  },
  {
    "text": "during the monitoring process and also how do we analyze the final",
    "start": "844079",
    "end": "849639"
  },
  {
    "text": "result so um just as a additional note um in the online phase besides",
    "start": "852399",
    "end": "860120"
  },
  {
    "text": "launching the num tracker in the from the host you can also launch it from the guest the guest itself can initialize",
    "start": "860120",
    "end": "866720"
  },
  {
    "text": "the tracking process",
    "start": "866720",
    "end": "870279"
  },
  {
    "start": "871000",
    "end": "871000"
  },
  {
    "text": "so so I'm going to show a a detail flow at the at the very low level how we",
    "start": "875160",
    "end": "881240"
  },
  {
    "text": "monitor different events when you launch the test call program the test",
    "start": "881240",
    "end": "887160"
  },
  {
    "text": "program uh so first you start a test program in the in the guest user space and and here um we're monitoring",
    "start": "887160",
    "end": "896000"
  },
  {
    "text": "this cost but notice that I'm using a example uh instruction int 80 to enter the CIS",
    "start": "896000",
    "end": "903000"
  },
  {
    "text": "call but there are also other ways to enter CIS call like CIS enter or CIS call but here I'm just going to use this",
    "start": "903000",
    "end": "909320"
  },
  {
    "text": "example as example so once you do in 0 instruction uh you're going to trigger a",
    "start": "909320",
    "end": "917440"
  },
  {
    "text": "trap to trap the host kernel and this trapping requires specific",
    "start": "917440",
    "end": "923000"
  },
  {
    "text": "configurations depends on which processor that you're using and it also depends on how you enter the the um how",
    "start": "923000",
    "end": "929639"
  },
  {
    "text": "you enter the CIS call if you're using CIS call or CIS enter instruction to enter uh to enter CIS call Flow then you",
    "start": "929639",
    "end": "938000"
  },
  {
    "text": "will use different configurations on the on the CPU um due to the time constraint I I'm not going to talk about exactly",
    "start": "938000",
    "end": "944680"
  },
  {
    "text": "how to configure the CPU to trap the CIS call but if you're interested feel free",
    "start": "944680",
    "end": "949959"
  },
  {
    "text": "to uh come and talk to me offline okay so once you trap the uh",
    "start": "949959",
    "end": "956279"
  },
  {
    "text": "host kernel it will initialize the uh performance",
    "start": "956279",
    "end": "961319"
  },
  {
    "text": "counters now after initializing the performance counter the hardware will start counting the events and the",
    "start": "961319",
    "end": "968319"
  },
  {
    "text": "execution flow will go back to uh uh go back to the guest kernel and you will",
    "start": "968319",
    "end": "974000"
  },
  {
    "text": "run the S call Rota and after the CIS call finishes uh",
    "start": "974000",
    "end": "980959"
  },
  {
    "text": "again we'll track the kernel uh host kernel and then disable the counter values and read out the counter values",
    "start": "980959",
    "end": "988279"
  },
  {
    "text": "and then read that direct the execution flow back to the test",
    "start": "988279",
    "end": "993120"
  },
  {
    "text": "program so um during the CIS called process uh there may be other high",
    "start": "994560",
    "end": "1000800"
  },
  {
    "text": "priority events that will interrupt the counting process but there's no problem",
    "start": "1000800",
    "end": "1005920"
  },
  {
    "text": "there won't be any problem because we will store the counter value before we",
    "start": "1005920",
    "end": "1010959"
  },
  {
    "text": "execute the interceptions and then once the interception finishes we'll restore the counter value and keep counting",
    "start": "1010959",
    "end": "1019240"
  },
  {
    "start": "1019000",
    "end": "1019000"
  },
  {
    "text": "so uh here's here's a very simple example uh for kernel preemption handling basically means One S call",
    "start": "1020839",
    "end": "1026880"
  },
  {
    "text": "interrupt another CIS call so while we're executing CIS call and there's another CIS call coming and interrupt",
    "start": "1026880",
    "end": "1032558"
  },
  {
    "text": "the current CIS call right we'll do a test switch and then disable the performance",
    "start": "1032559",
    "end": "1037760"
  },
  {
    "text": "counter and then we'll execute the CIS called that interrupt the current CIS",
    "start": "1037760",
    "end": "1043000"
  },
  {
    "text": "call and then once that finishes we'll do task switch back and we'll reenable",
    "start": "1043000",
    "end": "1048600"
  },
  {
    "text": "the performance",
    "start": "1048600",
    "end": "1051640"
  },
  {
    "start": "1053000",
    "end": "1053000"
  },
  {
    "text": "counter okay so now I'm going to talk about how what what how do we create a test",
    "start": "1054799",
    "end": "1061320"
  },
  {
    "text": "program um so first of all uh once vmm",
    "start": "1061320",
    "end": "1066559"
  },
  {
    "text": "launches the test program it needs to know it is the test program that is",
    "start": "1066559",
    "end": "1072559"
  },
  {
    "text": "triggering the CIS so one criteria that we build a test program is that",
    "start": "1072559",
    "end": "1078880"
  },
  {
    "text": "initially it has a preamble of CIS calls that we choose so the host kernel will",
    "start": "1078880",
    "end": "1084440"
  },
  {
    "text": "monitor those CIS call sequences and know that this process it is the test",
    "start": "1084440",
    "end": "1091840"
  },
  {
    "text": "program okay and after the Preamble CIS calls we're actually going to monitor",
    "start": "1091840",
    "end": "1099960"
  },
  {
    "text": "the real CIS call we want to monitor the the CIS call that actually will be",
    "start": "1099960",
    "end": "1105120"
  },
  {
    "text": "affected by the RIT Okay so so we will we will have a",
    "start": "1105120",
    "end": "1111159"
  },
  {
    "text": "set of selected CIS call with control arguments in the test program and then",
    "start": "1111159",
    "end": "1116919"
  },
  {
    "text": "we'll set in a predefined",
    "start": "1116919",
    "end": "1120759"
  },
  {
    "start": "1123000",
    "end": "1123000"
  },
  {
    "text": "sequence okay so once we build the test program um as I mentioned we choose the",
    "start": "1124400",
    "end": "1131960"
  },
  {
    "text": "CIS calls and the Cisco argument but we also want need to choose what kind of",
    "start": "1131960",
    "end": "1137159"
  },
  {
    "text": "event we want to monitor right um so there are some principles",
    "start": "1137159",
    "end": "1142240"
  },
  {
    "text": "that we use when we choose the event uh first of all we want to choose the event",
    "start": "1142240",
    "end": "1147559"
  },
  {
    "text": "that occurs very frequently during the cisal execution um we don't want to choose a",
    "start": "1147559",
    "end": "1153280"
  },
  {
    "text": "event that happen rarely during the cisal execution because that won't be very useful and and the second criteria that",
    "start": "1153280",
    "end": "1160200"
  },
  {
    "text": "we use is that the performance counter reading will have noise um this is due to many",
    "start": "1160200",
    "end": "1167720"
  },
  {
    "text": "reasons because when you you enter the performance monitor when you start counting and when you finish counting",
    "start": "1167720",
    "end": "1173559"
  },
  {
    "text": "the processor have those uh uh performance features that will have very",
    "start": "1173559",
    "end": "1178799"
  },
  {
    "text": "various number of uh noises during the counter reading right so we so so the second criteria is",
    "start": "1178799",
    "end": "1186640"
  },
  {
    "text": "that we run through a number of experiments and we categorize the variation of those counter counter",
    "start": "1186640",
    "end": "1193600"
  },
  {
    "text": "readings uh using statistical method and then we find the ones that are more more",
    "start": "1193600",
    "end": "1199120"
  },
  {
    "text": "stable uh in terms of different executions okay",
    "start": "1199120",
    "end": "1204880"
  },
  {
    "text": "so um the events that we selected um uh",
    "start": "1204880",
    "end": "1209960"
  },
  {
    "text": "in this talk are five events uh first one is uh retire Micro Ops uh this",
    "start": "1209960",
    "end": "1217080"
  },
  {
    "text": "basically means that uh micro op basically means that when you uh execute",
    "start": "1217080",
    "end": "1222400"
  },
  {
    "text": "a processor instruction if it is a complex instruction set you decode into simpler instruction sets",
    "start": "1222400",
    "end": "1229280"
  },
  {
    "text": "and the number of retirement Ops are the number of simpler instructions that gets",
    "start": "1229280",
    "end": "1234919"
  },
  {
    "text": "finished in the processor okay and and number of retiring instruction basically means the",
    "start": "1234919",
    "end": "1240360"
  },
  {
    "text": "number of complex instructions that that are finished uh the third one is uh retire",
    "start": "1240360",
    "end": "1246280"
  },
  {
    "text": "near returns that basically means how many near returns have finished near return means that when you return you",
    "start": "1246280",
    "end": "1252960"
  },
  {
    "text": "return to the same co- segment um and then the last four are related to branch um return Branch",
    "start": "1252960",
    "end": "1260000"
  },
  {
    "text": "instruction basically means how many Branch instruction that are finished and return Branch taken instruction",
    "start": "1260000",
    "end": "1265400"
  },
  {
    "text": "basically means how among the brunch instructions that are finished how many of them uh have taken the",
    "start": "1265400",
    "end": "1273320"
  },
  {
    "text": "branch by predicted by the branch",
    "start": "1273320",
    "end": "1277600"
  },
  {
    "start": "1280000",
    "end": "1280000"
  },
  {
    "text": "predictor okay um since we cannot avoid the noise uh during the counter reading",
    "start": "1280799",
    "end": "1288159"
  },
  {
    "text": "we need to characterize a noise a threshold we call it deviation threshold",
    "start": "1288159",
    "end": "1293679"
  },
  {
    "text": "to quantify what kind of noise level it's what we can uh to is tolerable",
    "start": "1293679",
    "end": "1300240"
  },
  {
    "text": "right so uh the way we compute the deviation is that we we Define the event uh ex so",
    "start": "1300240",
    "end": "1309600"
  },
  {
    "text": "ex basically means uh X basically means a particular event right and and Sy y",
    "start": "1309600",
    "end": "1315000"
  },
  {
    "text": "basically means a particular CIS call and and count C bracket ex and ey",
    "start": "1315000",
    "end": "1323159"
  },
  {
    "text": "basically means that for that particular event and CIS call combination uh what is the counter value",
    "start": "1323159",
    "end": "1330919"
  },
  {
    "text": "okay so now once we have this term defined we can compute a reference",
    "start": "1330919",
    "end": "1336159"
  },
  {
    "text": "counter value for a particular CIS call and performance uh uh and event a",
    "start": "1336159",
    "end": "1344400"
  },
  {
    "text": "pair and the way we do it is that we run through the sis call and the event we",
    "start": "1344400",
    "end": "1350720"
  },
  {
    "text": "run through it many many times uh hundreds of times and then we average the values",
    "start": "1350720",
    "end": "1357200"
  },
  {
    "text": "now after that we also run a few hundred different test executions so each time",
    "start": "1357200",
    "end": "1366200"
  },
  {
    "text": "we run the test execution we use the deviation uh equation to compute the",
    "start": "1366200",
    "end": "1371240"
  },
  {
    "text": "deviation and from this set of results we find that if you set the deviation",
    "start": "1371240",
    "end": "1377200"
  },
  {
    "text": "threshold to 5% then uh your false positive will drop to",
    "start": "1377200",
    "end": "1383159"
  },
  {
    "text": "zero basically means that um when there's no malor um you will you will you will",
    "start": "1383159",
    "end": "1390440"
  },
  {
    "text": "classify all the event and cope pair",
    "start": "1390440",
    "end": "1394519"
  },
  {
    "text": "correctly and so so what that also means is that if you are executing the the",
    "start": "1395880",
    "end": "1403320"
  },
  {
    "text": "test program and you find that the deviation threshold the deviation",
    "start": "1403320",
    "end": "1409799"
  },
  {
    "text": "uh reaches more than 5% that means there may be some modification happens in your",
    "start": "1409799",
    "end": "1416600"
  },
  {
    "start": "1419000",
    "end": "1419000"
  },
  {
    "text": "kernel okay so this is a very busy uh table I I will try to explain it very",
    "start": "1419640",
    "end": "1426158"
  },
  {
    "text": "slowly so the the First Column is the guess OS kernel version in this case is",
    "start": "1427320",
    "end": "1433159"
  },
  {
    "text": "a Linux 3.0 and the second column is the RIT that we run",
    "start": "1433159",
    "end": "1439000"
  },
  {
    "text": "uh on the gessos and the third column is the event",
    "start": "1439000",
    "end": "1444200"
  },
  {
    "text": "that we selected in our experiment uh those are the same event that I mentioned earlier so for each R kit we",
    "start": "1444200",
    "end": "1450760"
  },
  {
    "text": "have five events okay and the next five column are the CIS C that we",
    "start": "1450760",
    "end": "1459120"
  },
  {
    "text": "selected okay and as you can see that we have five events for each ret and five",
    "start": "1459120",
    "end": "1466000"
  },
  {
    "text": "CIS calls for each ret so altogether there are 2 five event and CIS called",
    "start": "1466000",
    "end": "1472240"
  },
  {
    "text": "pairs uh for the for the counter reading and and the numbers in the colons",
    "start": "1472240",
    "end": "1478799"
  },
  {
    "text": "indicates the de deviation when we uh when we run the the",
    "start": "1478799",
    "end": "1484279"
  },
  {
    "text": "uh test program and the last column shows that whether the rot kill is detected or not",
    "start": "1484279",
    "end": "1490960"
  },
  {
    "text": "okay so as I S as I said in the in the in the previous slide if the deviation",
    "start": "1490960",
    "end": "1497840"
  },
  {
    "text": "reaches is more than 5% uh regardless of",
    "start": "1497840",
    "end": "1503640"
  },
  {
    "text": "which event and cisal pairs we claim that a kernel modification is",
    "start": "1503640",
    "end": "1510279"
  },
  {
    "text": "detected so basically if you see the red uh numbers on the screen all the rooked",
    "start": "1510279",
    "end": "1516559"
  },
  {
    "text": "have at least one or most of them has more than one uh maybe five um CIS",
    "start": "1516559",
    "end": "1524360"
  },
  {
    "text": "called to event counter values that exceed the threshold that we set okay",
    "start": "1524360",
    "end": "1530760"
  },
  {
    "text": "now now if you take a more detailed look you find that one of this is called that",
    "start": "1530760",
    "end": "1535799"
  },
  {
    "text": "all the three R is trying to mess up with uh that one is CIS get de NTS",
    "start": "1535799",
    "end": "1542919"
  },
  {
    "text": "64 um now if you see what that CIS called is doing it's basically trying to",
    "start": "1542919",
    "end": "1548799"
  },
  {
    "text": "return the uh file names under certain directory and Linux uses that CIS call",
    "start": "1548799",
    "end": "1555960"
  },
  {
    "text": "to find out the P IDs by by by basically dumping the uh SL proc directory so you",
    "start": "1555960",
    "end": "1562520"
  },
  {
    "text": "got a list of P IDs now the reason why rooki want to modify that is they want",
    "start": "1562520",
    "end": "1567559"
  },
  {
    "text": "to hide the processes so whenever you call that you want to get the P IDs they will change the CIS call and then you",
    "start": "1567559",
    "end": "1573640"
  },
  {
    "text": "can see the actual process ID of the ret or some other",
    "start": "1573640",
    "end": "1579640"
  },
  {
    "text": "M um these are just some more data uh we also did the experiment on Linux kernel version 2.6",
    "start": "1581960",
    "end": "1588919"
  },
  {
    "text": "with different type of me um same you can see that there's at least one ass",
    "start": "1588919",
    "end": "1596520"
  },
  {
    "text": "sis called to event pair that exceed the threshold",
    "start": "1596520",
    "end": "1602919"
  },
  {
    "text": "right same you know same obser observation for Linux 2.4 kernel with",
    "start": "1602919",
    "end": "1608679"
  },
  {
    "text": "other type of malware so um then I'm going to talk",
    "start": "1608679",
    "end": "1616080"
  },
  {
    "start": "1612000",
    "end": "1612000"
  },
  {
    "text": "about some performance numbers um so we we basically run the test",
    "start": "1616080",
    "end": "1624520"
  },
  {
    "text": "program um 500 iterations we have a few test programs um basically one two or",
    "start": "1624520",
    "end": "1631720"
  },
  {
    "text": "four test programs each one contains a number of uh CIS cost so for example if",
    "start": "1631720",
    "end": "1637919"
  },
  {
    "text": "you see the first table the first row that test program contains sis open and",
    "start": "1637919",
    "end": "1643960"
  },
  {
    "text": "sis close okay and you can see that the uh performance over head it's around um",
    "start": "1643960",
    "end": "1651200"
  },
  {
    "text": "a millisecond range okay and we also run some",
    "start": "1651200",
    "end": "1656360"
  },
  {
    "text": "benchmarks and we invoke the checking process during the uh Benchmark",
    "start": "1656360",
    "end": "1662480"
  },
  {
    "text": "execution so we try two different period one is five one is 10 and the",
    "start": "1662480",
    "end": "1669279"
  },
  {
    "text": "performance overhead is really small as you can see uh it ranges from 1% to",
    "start": "1669279",
    "end": "1675640"
  },
  {
    "text": "4% all right so um sometimes that we not only we want",
    "start": "1676640",
    "end": "1684960"
  },
  {
    "text": "to detect the ret we also want to know exactly which ret that is affecting our system right so we can try try try some",
    "start": "1684960",
    "end": "1692679"
  },
  {
    "text": "way to remove it or do do some other uh detection or prevention",
    "start": "1692679",
    "end": "1698919"
  },
  {
    "text": "mechanism so what we do is that to identify which ret we create a uh what",
    "start": "1698919",
    "end": "1706039"
  },
  {
    "text": "we call HPC based Behavior signal signature um the notations are similar",
    "start": "1706039",
    "end": "1711320"
  },
  {
    "text": "we have ex this means the CIS call the event and s y it's the CIS call and for",
    "start": "1711320",
    "end": "1717360"
  },
  {
    "text": "a particular event and CIS call pair we have a counter value and we count n number of Hardware",
    "start": "1717360",
    "end": "1725919"
  },
  {
    "text": "events and we also count n number of CIS calls right so and then we basically",
    "start": "1725919",
    "end": "1734919"
  },
  {
    "text": "create a vector uh of M * n",
    "start": "1734919",
    "end": "1741000"
  },
  {
    "text": "entries and each Vector entry is basically a counter",
    "start": "1741000",
    "end": "1746159"
  },
  {
    "text": "value",
    "start": "1746159",
    "end": "1749159"
  },
  {
    "text": "okay and then we use similar Matrix to classify uh what should try to identify",
    "start": "1751519",
    "end": "1757159"
  },
  {
    "text": "the uh Meer um so the first equation is similar to",
    "start": "1757159",
    "end": "1763279"
  },
  {
    "text": "what I show earlier it's a deviation uh equation and then the second one the dest",
    "start": "1763279",
    "end": "1768760"
  },
  {
    "text": "underscore Max is basically that when we run a number of test we don't compute",
    "start": "1768760",
    "end": "1774320"
  },
  {
    "text": "the average we find the max value the max deviation value right and the last",
    "start": "1774320",
    "end": "1780480"
  },
  {
    "text": "one is uh we want to compute since now we have uh many points or many",
    "start": "1780480",
    "end": "1786799"
  },
  {
    "text": "signatures for each Rook kit we want to know how similar two R kits are uh when",
    "start": "1786799",
    "end": "1794080"
  },
  {
    "text": "comparing those two uh vectors right so the way we do is that uh we try to",
    "start": "1794080",
    "end": "1799320"
  },
  {
    "text": "compare the deviations in each entry in the vector and we try to see how many",
    "start": "1799320",
    "end": "1806200"
  },
  {
    "text": "are within the uh threshold",
    "start": "1806200",
    "end": "1810000"
  },
  {
    "start": "1811000",
    "end": "1811000"
  },
  {
    "text": "deviation okay so we run some experiments and um basically what you can see is",
    "start": "1812559",
    "end": "1821039"
  },
  {
    "text": "that so the the the the rows the the rows are different uh rookie types and",
    "start": "1821039",
    "end": "1828080"
  },
  {
    "text": "the colon are also different rookie types and maybe I can use the",
    "start": "1828080",
    "end": "1835360"
  },
  {
    "text": "PO never mind um there's",
    "start": "1837760",
    "end": "1844240"
  },
  {
    "text": "Mouse Okay so uh what you can see is that if the deviation is low between two",
    "start": "1844240",
    "end": "1852559"
  },
  {
    "text": "rets that means they are the same ret and and and the threshold that we set is",
    "start": "1852559",
    "end": "1860080"
  },
  {
    "text": "5% uh same as in the detection flow we set it as 5% so if we compare to",
    "start": "1860080",
    "end": "1866799"
  },
  {
    "text": "RIT their deviation is smaller than five we say they're the same RIT and if the",
    "start": "1866799",
    "end": "1873120"
  },
  {
    "text": "deviation is bigger than five we say they're different ret right so you can see that the same RIT their threshold",
    "start": "1873120",
    "end": "1879960"
  },
  {
    "text": "all falls below five and another indicator you can see is the",
    "start": "1879960",
    "end": "1885880"
  },
  {
    "text": "um the the vector comparison the fitting rate so if the fitting rate is 100% that",
    "start": "1885880",
    "end": "1891799"
  },
  {
    "text": "means all the points fits together meaning all the event and CIS call uh",
    "start": "1891799",
    "end": "1899200"
  },
  {
    "text": "signatures uh fit with each other right so if it is a different R kit for example this one you'll see that the",
    "start": "1899200",
    "end": "1905880"
  },
  {
    "text": "fitting rate is really low",
    "start": "1905880",
    "end": "1912360"
  },
  {
    "text": "okay so uh one important thing to notice is",
    "start": "1912360",
    "end": "1917559"
  },
  {
    "text": "that uh there are two rits one is sucket one is super kit we find that their",
    "start": "1917559",
    "end": "1924240"
  },
  {
    "text": "deviation is quite similar and their fitting rate is also relatively high",
    "start": "1924240",
    "end": "1929840"
  },
  {
    "text": "right so for suckit and superkit the uh deviation is very very close to our",
    "start": "1929840",
    "end": "1937000"
  },
  {
    "text": "deviation threshold so at that point it's really hard to distinguish whether the r kits are the same or not right and",
    "start": "1937000",
    "end": "1944039"
  },
  {
    "text": "that fundamentally related to their behavior their Behavior may be",
    "start": "1944039",
    "end": "1950000"
  },
  {
    "text": "similar but but there there should be a way to tell uh the difference between this ret",
    "start": "1950000",
    "end": "1957519"
  },
  {
    "text": "so what we do is this instead of instead of getting the",
    "start": "1957519",
    "end": "1963919"
  },
  {
    "start": "1960000",
    "end": "1960000"
  },
  {
    "text": "event count at the end of the execution we try to sample it",
    "start": "1963919",
    "end": "1969760"
  },
  {
    "text": "periodically now if you see this demonstration diagram um although if we",
    "start": "1969760",
    "end": "1975320"
  },
  {
    "text": "sample the counter reading at the end the Mal word one and two will have the",
    "start": "1975320",
    "end": "1980600"
  },
  {
    "text": "same reading but if you sample it periodically during the execution you will find their reading are actually",
    "start": "1980600",
    "end": "1988760"
  },
  {
    "text": "different okay so so what that means is that um first let me explain what what",
    "start": "1991760",
    "end": "1998399"
  },
  {
    "text": "this all this diagram is about uh each each row it is a CIS call",
    "start": "1998399",
    "end": "2005840"
  },
  {
    "text": "execution and each row contains four event so for this call S call we record",
    "start": "2005840",
    "end": "2013080"
  },
  {
    "text": "four events okay and then there are five CIS calls and each CIS call contains",
    "start": "2013080",
    "end": "2018519"
  },
  {
    "text": "four events that we monitor right and and the blue line here means malare one well",
    "start": "2018519",
    "end": "2026720"
  },
  {
    "text": "rookie one and the red one means uh rookie number two",
    "start": "2026720",
    "end": "2032159"
  },
  {
    "text": "so um in this case the blue one is the socket and the red one is the super kit",
    "start": "2032159",
    "end": "2038840"
  },
  {
    "text": "so now you can see that if you look at their behavior over time you can see the",
    "start": "2038840",
    "end": "2045320"
  },
  {
    "text": "difference among different event and cisal pairs okay so remember in the",
    "start": "2045320",
    "end": "2051599"
  },
  {
    "text": "previous way we calculate the deviation uh we use the counter",
    "start": "2051599",
    "end": "2056679"
  },
  {
    "text": "value so now we don't use the counter value uh what we use is that the area of",
    "start": "2056679",
    "end": "2062560"
  },
  {
    "text": "the of the curve we compute the area of the curve over xais",
    "start": "2062560",
    "end": "2068638"
  },
  {
    "text": "right so for these two malare the area will be different and we use that to compute the",
    "start": "2068639",
    "end": "2075838"
  },
  {
    "text": "deviation okay so um the the first table is the result when we have no periodical",
    "start": "2079000",
    "end": "2087158"
  },
  {
    "text": "sampling um as you can see that the the the deviation is very close to the",
    "start": "2087159",
    "end": "2093760"
  },
  {
    "text": "special and the second one is when we add periodical sampling right you can see that we can",
    "start": "2093760",
    "end": "2100400"
  },
  {
    "text": "significantly distinguish uh this two R",
    "start": "2100400",
    "end": "2104960"
  },
  {
    "start": "2108000",
    "end": "2108000"
  },
  {
    "text": "kit so uh before I conclude the talk I also want to uh talk about security",
    "start": "2109560",
    "end": "2115440"
  },
  {
    "text": "analysis of the scheme I mean it's all good that we detect the RIT it's all good that we identify the RIT but I'm",
    "start": "2115440",
    "end": "2122520"
  },
  {
    "text": "pretty sure in this kind of mouse game the rid Rider is trying to bypass the",
    "start": "2122520",
    "end": "2127760"
  },
  {
    "text": "schin if they know the skin exists right so start from the the weakest",
    "start": "2127760",
    "end": "2134240"
  },
  {
    "text": "attacker right the the weakest rookie may try to temper with the performance",
    "start": "2134240",
    "end": "2139599"
  },
  {
    "text": "counters but then this is not possible because performance counter in the CPU",
    "start": "2139599",
    "end": "2144920"
  },
  {
    "text": "they support uh full control in the in the virtual in the vmm um so the next type of ret they may",
    "start": "2144920",
    "end": "2152599"
  },
  {
    "text": "try to temper with the analysis program this is also not possible because our analysis program is in in",
    "start": "2152599",
    "end": "2159599"
  },
  {
    "text": "vmn um the ret will also try to predict the good numbers right um so what that",
    "start": "2159599",
    "end": "2165440"
  },
  {
    "text": "means is that they try to create modifications that when we read the",
    "start": "2165440",
    "end": "2172119"
  },
  {
    "text": "event value it is the same as uh the good number the number that we're",
    "start": "2172119",
    "end": "2177200"
  },
  {
    "text": "looking for right so um in in our scheme",
    "start": "2177200",
    "end": "2182800"
  },
  {
    "text": "uh we have a assumption uh that you can use test",
    "start": "2182800",
    "end": "2188040"
  },
  {
    "text": "program as a secret key and the reason we say that is",
    "start": "2188040",
    "end": "2193280"
  },
  {
    "text": "that the test program you can design in so many different ways because of the",
    "start": "2193280",
    "end": "2199440"
  },
  {
    "text": "large number of system calls system call arguments and events you can create a",
    "start": "2199440",
    "end": "2205440"
  },
  {
    "text": "huge number of of different test programs now even if the Rook try to",
    "start": "2205440",
    "end": "2212720"
  },
  {
    "text": "guess one of your uh test program and they figure out the good numbers you can",
    "start": "2212720",
    "end": "2217839"
  },
  {
    "text": "always update your test",
    "start": "2217839",
    "end": "2220920"
  },
  {
    "text": "program all right um those Rook that I just talked about are pretty uh probably too weak um",
    "start": "2224119",
    "end": "2231440"
  },
  {
    "text": "now we see stronger ones so uh this type of Rook may try to undo",
    "start": "2231440",
    "end": "2236720"
  },
  {
    "text": "the modification right now if if the rooked who try to undo the modification",
    "start": "2236720",
    "end": "2242880"
  },
  {
    "text": "does not the test does not know the test program exists then it does not know when it is being monitored right so even",
    "start": "2242880",
    "end": "2250000"
  },
  {
    "text": "if you try to undo the program maybe it is during the time that it's not being",
    "start": "2250000",
    "end": "2255119"
  },
  {
    "text": "monitor so that's not very useful because eventually we'll catch",
    "start": "2255119",
    "end": "2260680"
  },
  {
    "text": "it uh now now you may also try to identify the test program which is very",
    "start": "2260680",
    "end": "2267000"
  },
  {
    "text": "reasonable um so as I said the vmm can update the test program and try to use",
    "start": "2267000",
    "end": "2272720"
  },
  {
    "text": "other ways to evade the det detection from the RIT",
    "start": "2272720",
    "end": "2278400"
  },
  {
    "text": "um so let's say the ret detects the test program and he try to undo the",
    "start": "2279839",
    "end": "2286800"
  },
  {
    "text": "modification right now if he simply undo the modification it's going to get into a",
    "start": "2286800",
    "end": "2293400"
  },
  {
    "text": "dilemma because its whole purpose is to hide other malicious",
    "start": "2293400",
    "end": "2299240"
  },
  {
    "text": "activities now if it doesn't undo will detect the RIT but if we undo and we",
    "start": "2299240",
    "end": "2305680"
  },
  {
    "text": "have other detection mechanisms we attack the other activities so so it puts it puts the",
    "start": "2305680",
    "end": "2311839"
  },
  {
    "text": "Rook into a dilemma and also to make the detection",
    "start": "2311839",
    "end": "2316920"
  },
  {
    "text": "really hard you can also randomize the sampling period",
    "start": "2316920",
    "end": "2322280"
  },
  {
    "text": "um now finally we we we we don't eliminate the possibility that the rid",
    "start": "2322280",
    "end": "2328240"
  },
  {
    "text": "is really strong and the rid can detect the test program accurately and undo all",
    "start": "2328240",
    "end": "2334319"
  },
  {
    "text": "the modifications right what that means is it undo the modific in the kernel it",
    "start": "2334319",
    "end": "2339359"
  },
  {
    "text": "it reads all the activities on your system that's also possible um if that's",
    "start": "2339359",
    "end": "2345480"
  },
  {
    "text": "the case then uh what we suggest is that we should not use a test program right",
    "start": "2345480",
    "end": "2352119"
  },
  {
    "text": "rather we should go for a different approach where we use machine learning algorithms to actually classify the",
    "start": "2352119",
    "end": "2359240"
  },
  {
    "text": "correct behavior of the system and then create a sort of Wireless machine learning model to to check whether is Sy",
    "start": "2359240",
    "end": "2367520"
  },
  {
    "text": "is uh infected or not",
    "start": "2367520",
    "end": "2371839"
  },
  {
    "text": "um how doing one",
    "start": "2373000",
    "end": "2376800"
  },
  {
    "start": "2380000",
    "end": "2380000"
  },
  {
    "text": "time okay um so in conclusion um we",
    "start": "2380839",
    "end": "2386359"
  },
  {
    "text": "propose this num cheer idea it basically we show that it can",
    "start": "2386359",
    "end": "2391440"
  },
  {
    "text": "effectively detect and identify kernel roet um it is a vmn based frame work so",
    "start": "2391440",
    "end": "2398720"
  },
  {
    "text": "although we use KVM in this uh in this talk but you can use any virtualization",
    "start": "2398720",
    "end": "2404200"
  },
  {
    "text": "technology you like and because it validates the execution of the gas CIS c um you you",
    "start": "2404200",
    "end": "2412960"
  },
  {
    "text": "don't need to know the detail implementation of your gasos gas OS implementation and also you don't you're",
    "start": "2412960",
    "end": "2419599"
  },
  {
    "text": "not necessary to monitor the CIS call you can also monitor other software behaviors on the system",
    "start": "2419599",
    "end": "2427480"
  },
  {
    "text": "and the good thing is that all these events are supported by hardware and by",
    "start": "2427480",
    "end": "2433280"
  },
  {
    "text": "commercial CPUs today and the performance cost is really low by using",
    "start": "2433280",
    "end": "2438920"
  },
  {
    "text": "this uh performance counters and finally what we want to say",
    "start": "2438920",
    "end": "2446480"
  },
  {
    "text": "is that we use RIT Kel RIT as an example but you can really use it for other type",
    "start": "2446480",
    "end": "2452640"
  },
  {
    "text": "of malware depends on how you identify the behavior and and use the events to",
    "start": "2452640",
    "end": "2458599"
  },
  {
    "text": "characterize those behaviors in",
    "start": "2458599",
    "end": "2462520"
  },
  {
    "text": "the all right so finally I want to thank these people who give the reviews all",
    "start": "2463800",
    "end": "2469920"
  },
  {
    "text": "these folks are from Intel and with that I finish the",
    "start": "2469920",
    "end": "2478078"
  },
  {
    "text": "talk any questions yes",
    "start": "2483400",
    "end": "2489240"
  },
  {
    "text": "okay so the question is so so the question is uh when the good program",
    "start": "2503839",
    "end": "2510319"
  },
  {
    "text": "triggered the CIS call whether the detection mechanism will will will have a false alarm right uh my question is uh",
    "start": "2510319",
    "end": "2518520"
  },
  {
    "text": "that if I apply this uh technique onto the normal system there would be cases",
    "start": "2518520",
    "end": "2523880"
  },
  {
    "text": "where the Bing programs will also have the similar Behavior okay so um that's",
    "start": "2523880",
    "end": "2529040"
  },
  {
    "text": "not the case because the way we're checking it is that first you create you",
    "start": "2529040",
    "end": "2535119"
  },
  {
    "text": "you create reference model based on a clean uh system right and once your",
    "start": "2535119",
    "end": "2542359"
  },
  {
    "text": "system is not clean meaning once your kernel it's being affected",
    "start": "2542359",
    "end": "2547720"
  },
  {
    "text": "then no matter a good program or a bad program calls the CIS call the detection",
    "start": "2547720",
    "end": "2553839"
  },
  {
    "text": "algorithm will say modification is detected and and and also one thing in",
    "start": "2553839",
    "end": "2560480"
  },
  {
    "text": "in in our experiment we only trigger the detection mechanism when we execute the test",
    "start": "2560480",
    "end": "2566440"
  },
  {
    "text": "program but if you want to do it with a normal program you can also do",
    "start": "2566440",
    "end": "2571960"
  },
  {
    "text": "that okay so does that does that answer your question um I'm bit uh yeah I I",
    "start": "2571960",
    "end": "2578720"
  },
  {
    "text": "think yes but another question is like will the bang programs will have uniform",
    "start": "2578720",
    "end": "2584119"
  },
  {
    "text": "counter values for the similar system calls would the benign program will have",
    "start": "2584119",
    "end": "2591319"
  },
  {
    "text": "uniform values uniform counter Val performance counter values uniform what",
    "start": "2591319",
    "end": "2596599"
  },
  {
    "text": "do you mean by uniform I mean uh when you are checking this Branch instructions or instructions or microbes",
    "start": "2596599",
    "end": "2603680"
  },
  {
    "text": "so will that counter value be uniform across the uh same same system call but for the different programs oh okay okay",
    "start": "2603680",
    "end": "2610440"
  },
  {
    "text": "no it won't be the same um because because you're looking at the deviation",
    "start": "2610440",
    "end": "2615520"
  },
  {
    "text": "uh when you are suspect uh when you when you're trying to find the root kits right right so will that be a unifor if",
    "start": "2615520",
    "end": "2623240"
  },
  {
    "text": "if it is not uniform in the bang then the bang program can also be suspected as a root kit yeah yeah so here's the",
    "start": "2623240",
    "end": "2629680"
  },
  {
    "text": "thing the counter reading uh for a particular SS call",
    "start": "2629680",
    "end": "2636680"
  },
  {
    "text": "excuse me and Hardware event won't be uniform because there's a third variable that is the argument to the CIS so",
    "start": "2636680",
    "end": "2643400"
  },
  {
    "text": "different beny program or malicious program they would try to call different arguments to the uh to the CIS right now",
    "start": "2643400",
    "end": "2653599"
  },
  {
    "text": "the way we select our test program um with fixed argument or a set of argument",
    "start": "2653599",
    "end": "2659880"
  },
  {
    "text": "that we want to select to trigger the CIS call and event accounting is that we analyze the malare behavior because in",
    "start": "2659880",
    "end": "2666520"
  },
  {
    "text": "the CIS call there are certain number of areas that you really want to modify to",
    "start": "2666520",
    "end": "2671960"
  },
  {
    "text": "really hide your process or files or whatever you want to hide right now as long as the argument that we",
    "start": "2671960",
    "end": "2679240"
  },
  {
    "text": "selected can trigger can cover those flows that The Rook trying to change",
    "start": "2679240",
    "end": "2685240"
  },
  {
    "text": "then The Rook will get detected",
    "start": "2685240",
    "end": "2690599"
  },
  {
    "text": "okay okay uh so the another question is uh does the counter all also uh take",
    "start": "2691280",
    "end": "2698559"
  },
  {
    "text": "into account the event of the other processes or it's uh based on you're monitoring for one single process yeah",
    "start": "2698559",
    "end": "2704160"
  },
  {
    "text": "so so in the uh virtual machine the counter readings are isolated at the",
    "start": "2704160",
    "end": "2710599"
  },
  {
    "text": "process level so you don't need to worry about process isolation yeah",
    "start": "2710599",
    "end": "2716960"
  },
  {
    "text": "okay uh the one last question yeah go ahead uh there because uh the hackers",
    "start": "2716960",
    "end": "2724119"
  },
  {
    "text": "always try to find a new ways to build theout kids so they might try to aisk it",
    "start": "2724119",
    "end": "2730359"
  },
  {
    "text": "in a way that the counter values are randomized and then you will not find the significant difference between the B",
    "start": "2730359",
    "end": "2736800"
  },
  {
    "text": "the deviation which you're looking into well as I explained in the security",
    "start": "2736800",
    "end": "2742079"
  },
  {
    "text": "analysis right if he just randomized the counter value it doesn't do much use for",
    "start": "2742079",
    "end": "2747960"
  },
  {
    "text": "him because if it is randomized then it will exceed the thresold at some point the the thing that is really",
    "start": "2747960",
    "end": "2754960"
  },
  {
    "text": "useful for a rookie writer is to make sure the modification actually",
    "start": "2754960",
    "end": "2760000"
  },
  {
    "text": "align with the good number yeah but but I may put a modification along with my some random codes so that it it doesn't",
    "start": "2760000",
    "end": "2767720"
  },
  {
    "text": "uh make the difference so so visible at the counter level no if you write random code then",
    "start": "2767720",
    "end": "2775920"
  },
  {
    "text": "you need to make sure your random code don't exceed the threshold okay you need to really make",
    "start": "2775920",
    "end": "2781440"
  },
  {
    "text": "sure that as long as it whatever random code you're writing as long as it exceed the fres show then the malware is",
    "start": "2781440",
    "end": "2790000"
  },
  {
    "text": "detected but the smart uh rookie writers may try to write their",
    "start": "2790000",
    "end": "2797160"
  },
  {
    "text": "modification such that it is aligned with the good numbers but as I said um",
    "start": "2797160",
    "end": "2803880"
  },
  {
    "text": "you can also update the test program you can you have a huge number of arguments",
    "start": "2803880",
    "end": "2809240"
  },
  {
    "text": "thisis call and also Hardware event to select so it's going to create the",
    "start": "2809240",
    "end": "2814599"
  },
  {
    "text": "rookie writer job much harder okay thank",
    "start": "2814599",
    "end": "2819760"
  },
  {
    "text": "you one question would it be possible for to actually detect that H Checker is",
    "start": "2819760",
    "end": "2825880"
  },
  {
    "text": "available and just U uh because H Checker has to neize the forance couns",
    "start": "2825880",
    "end": "2834160"
  },
  {
    "text": "and uh stop and start check starting perance couns and then Tech that is",
    "start": "2834160",
    "end": "2841359"
  },
  {
    "text": "running in such an environment then just uh taking all work",
    "start": "2841359",
    "end": "2848280"
  },
  {
    "text": "REM yeah that's that's a good question actually I I explained those in the previous slide maybe I go too fast but",
    "start": "2848280",
    "end": "2854880"
  },
  {
    "text": "let me answer a question so so I classify into different cases right the",
    "start": "2854880",
    "end": "2859960"
  },
  {
    "text": "r kit May the r kit may try to identify the test program right is that the",
    "start": "2859960",
    "end": "2866960"
  },
  {
    "text": "scenario test itself but the that",
    "start": "2866960",
    "end": "2872440"
  },
  {
    "text": "is okay sure you can detect that available",
    "start": "2872440",
    "end": "2878280"
  },
  {
    "text": "as soon as I figure out that my system that I'm executing within the",
    "start": "2878280",
    "end": "2883720"
  },
  {
    "text": "RO taking a little longer maybe because has to some work beginning at",
    "start": "2883720",
    "end": "2890319"
  },
  {
    "text": "end then I",
    "start": "2890319",
    "end": "2894000"
  },
  {
    "text": "just so yeah that that that's a scenario but you will modify the Cisco at some",
    "start": "2896440",
    "end": "2905240"
  },
  {
    "text": "point yeah right how how are you going to execute the CIS call you you modify at some point and you will execute it",
    "start": "2905240",
    "end": "2913319"
  },
  {
    "text": "the moment you execute it then there's a possibility that you will get detected we're not saying all",
    "start": "2913319",
    "end": "2920559"
  },
  {
    "text": "this call all the modification will get detected exactly at the time that it gets modified right so yeah that that",
    "start": "2920559",
    "end": "2929000"
  },
  {
    "text": "that's a valid scenario for sure but the it also require The Rook writer to know",
    "start": "2929000",
    "end": "2934400"
  },
  {
    "text": "when you should undo the modification that's true",
    "start": "2934400",
    "end": "2940119"
  },
  {
    "text": "right hi yeah go ahead",
    "start": "2940280",
    "end": "2944920"
  },
  {
    "text": "uh not really because um performance counter require really lowlevel Hardware",
    "start": "2968040",
    "end": "2975480"
  },
  {
    "text": "events um so for example the one that we choose the number of uh operations micro",
    "start": "2975480",
    "end": "2981880"
  },
  {
    "text": "operations that are completed that really depends on your program I mean you can configure the system differently",
    "start": "2981880",
    "end": "2987680"
  },
  {
    "text": "but once you configure it um you build your reference model",
    "start": "2987680",
    "end": "2995119"
  },
  {
    "text": "okay so is the question related to that um when during deployment you change",
    "start": "3000839",
    "end": "3007680"
  },
  {
    "text": "your operating system uh part of your operating system will that affect the reference model",
    "start": "3007680",
    "end": "3014720"
  },
  {
    "text": "right so uh we haven't done a detail analysis on that um but the possibility",
    "start": "3014720",
    "end": "3022880"
  },
  {
    "text": "definitely exists depends on what part you're changing the operating system yeah and also depends on what you event",
    "start": "3022880",
    "end": "3028920"
  },
  {
    "text": "you're monitoring go ahead one more question are you for production uh system or just",
    "start": "3028920",
    "end": "3038040"
  },
  {
    "text": "for where I want to analyze the",
    "start": "3038040",
    "end": "3043839"
  },
  {
    "text": "suspect should this run in production environment yeah to to just always",
    "start": "3047599",
    "end": "3053000"
  },
  {
    "text": "online monitor your systems while they are oh I see I see I see um you can do",
    "start": "3053000",
    "end": "3060119"
  },
  {
    "text": "both ways but I think the real benefit of this is that the performance overhead is much lower than pure software",
    "start": "3060119",
    "end": "3066200"
  },
  {
    "text": "Solutions so you can actually run it online okay yes you mentioned machine learning",
    "start": "3066200",
    "end": "3074680"
  },
  {
    "text": "at one point in one of the slides that wheny you know uh yeah which one now",
    "start": "3074680",
    "end": "3083599"
  },
  {
    "text": "well in one of the slides that you talk about what the rootkit can do and then",
    "start": "3089160",
    "end": "3094319"
  },
  {
    "text": "how to how root kit can actually try to counter this security",
    "start": "3094319",
    "end": "3101200"
  },
  {
    "text": "analysis this one or the next secret key no there there is a slide yeah yeah yeah",
    "start": "3101240",
    "end": "3108520"
  },
  {
    "text": "yeah a strong look at the last point so have you done something on that work how",
    "start": "3108520",
    "end": "3113680"
  },
  {
    "text": "how you actually approach this machine learning um so we are very interested in doing",
    "start": "3113680",
    "end": "3121000"
  },
  {
    "text": "this research um but we we uh we can't",
    "start": "3121000",
    "end": "3127240"
  },
  {
    "text": "see any result for now but yeah I think that this direction is possible if if",
    "start": "3127240",
    "end": "3132680"
  },
  {
    "text": "you're interested we can talk offline if you want to uh collaborate on",
    "start": "3132680",
    "end": "3138960"
  },
  {
    "text": "this yes",
    "start": "3140440",
    "end": "3144440"
  },
  {
    "text": "any other questions all right I think everybody's",
    "start": "3150319",
    "end": "3155480"
  },
  {
    "text": "ready for lunch okay thank you for coming to talk again",
    "start": "3155480",
    "end": "3161039"
  }
]