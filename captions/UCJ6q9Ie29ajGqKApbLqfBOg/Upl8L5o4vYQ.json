[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "[Music]",
    "start": "2920",
    "end": "14730"
  },
  {
    "text": "[Music]",
    "start": "17680",
    "end": "20780"
  },
  {
    "text": "a security researcher with AB stake um I'm going to be presenting today about uh cracking web",
    "start": "42879",
    "end": "49840"
  },
  {
    "text": "keys so this talk is about some software that I developed uh to crack some web keys",
    "start": "54600",
    "end": "60719"
  },
  {
    "text": "uh it performs dictionary attacks against the web key generators it it",
    "start": "60719",
    "end": "66400"
  },
  {
    "text": "does dictionary attacks against raw keys and also performs a Brute Force against one of the generators I'll describe in a",
    "start": "66400",
    "end": "72040"
  },
  {
    "text": "bit what these generators are and what the what I mean by raw Keys um the work I did uh",
    "start": "72040",
    "end": "78479"
  },
  {
    "text": "besides uh implementing cracking software I also did a little bit of looking at the key generators themselves and we'll go into some of that detail on",
    "start": "78479",
    "end": "84479"
  },
  {
    "text": "this talk uh one thing that this talk is not going to cover is any any new form",
    "start": "84479",
    "end": "89560"
  },
  {
    "text": "of uh Crypt analysis on web there's uh several there's several other papers out",
    "start": "89560",
    "end": "95000"
  },
  {
    "text": "there on on good research that uh did Crypt analysis against web um for those",
    "start": "95000",
    "end": "100680"
  },
  {
    "text": "of you who saw 's talk yesterday that's a very good example um another thing I'm not going to be talking about is any sort of dynamic keying there are some",
    "start": "100680",
    "end": "107719"
  },
  {
    "text": "proposals out there for dynamic keying with web uh such as 802.1x um I haven't looked at any of",
    "start": "107719",
    "end": "113920"
  },
  {
    "text": "that yet so I'm not going to be discussing any of that so this is what my talk is going to",
    "start": "113920",
    "end": "119719"
  },
  {
    "start": "118000",
    "end": "118000"
  },
  {
    "text": "look like today first I'm going to talk a little bit about why we should even think about cracking web Keys then I'm",
    "start": "119719",
    "end": "126240"
  },
  {
    "text": "going to go into some of the background material by giving an overview of what the web protocol looks like then I'm",
    "start": "126240",
    "end": "131560"
  },
  {
    "text": "going to talk about how web is usually keyed then I'll talk about the web key generators",
    "start": "131560",
    "end": "137760"
  },
  {
    "text": "themselves uh finally I'll present uh the design uh of the software that I",
    "start": "137760",
    "end": "142879"
  },
  {
    "text": "wrote and then I'll give a little bit of results and I'll talk about some related works at the end",
    "start": "142879",
    "end": "149120"
  },
  {
    "start": "150000",
    "end": "150000"
  },
  {
    "text": "so why should we perform dictionary attacks against web um security is a is a weakest link",
    "start": "152319",
    "end": "159800"
  },
  {
    "text": "phenomena your security in your system is only as good as your weakest link and key cracking attacks the human",
    "start": "159800",
    "end": "166840"
  },
  {
    "text": "problem as good as the system is if humans are using the system incorrectly then that's where the",
    "start": "166840",
    "end": "173239"
  },
  {
    "text": "weakest link is going to be and for those of you who saw Ian's talk yesterday you might wonder but",
    "start": "173239",
    "end": "180080"
  },
  {
    "text": "isn't web already broken why should we even bother trying to attack it from a new approach um well it turns out that key",
    "start": "180080",
    "end": "186720"
  },
  {
    "text": "cracking is often a simpler attack to implement and easier to perform it also can be less timec",
    "start": "186720",
    "end": "194239"
  },
  {
    "text": "consuming um it does have the property that's not guaranteed to give you any success but in the case that it does it",
    "start": "194239",
    "end": "200400"
  },
  {
    "text": "usually gives you results much quicker another interesting feature about U key cracking is it actually",
    "start": "200400",
    "end": "206280"
  },
  {
    "text": "recovers the keying material rather than any sort of bite stream that's generated from the keying material so this is a",
    "start": "206280",
    "end": "213000"
  },
  {
    "text": "lot easier to use with off-the-shelf software such as uh the the drivers that come with web cards with 80211",
    "start": "213000",
    "end": "222239"
  },
  {
    "start": "222000",
    "end": "222000"
  },
  {
    "text": "cards so what exactly is wired equival what is exactly is web uh web is also called wired equivalent",
    "start": "223760",
    "end": "230360"
  },
  {
    "text": "privacy it's the piece of the 80211 protocol that's supposed to give security to the system as its name",
    "start": "230360",
    "end": "236239"
  },
  {
    "text": "implies the purpose of the the purpose of the protocol is is to bring the same",
    "start": "236239",
    "end": "242319"
  },
  {
    "text": "level of security to the wireless networks as exist in wire networks um it provides authentication",
    "start": "242319",
    "end": "249400"
  },
  {
    "text": "features it also provides encryption of the traffic um the encryption is based off",
    "start": "249400",
    "end": "256079"
  },
  {
    "text": "of the rc4 algorithm um with 64-bit Keys although there is a variant that uses 128bit",
    "start": "256079",
    "end": "264440"
  },
  {
    "text": "Keys um the authentication Primitives are built on top of the encryption Primitives uh with a standard Challenge",
    "start": "264440",
    "end": "270280"
  },
  {
    "text": "and response type of protocol so I'm going to give a quick",
    "start": "270280",
    "end": "275840"
  },
  {
    "start": "274000",
    "end": "274000"
  },
  {
    "text": "overview of what it looks like to encrypt and decrypt we packets uh before you start you",
    "start": "275840",
    "end": "281800"
  },
  {
    "text": "have an unencrypted packet which I have represented by the 80211 frame on the",
    "start": "281800",
    "end": "287080"
  },
  {
    "text": "left hand side which consists of a header and a payload the first thing that happens in the process of",
    "start": "287080",
    "end": "292840"
  },
  {
    "text": "encryption is the payload uh a check sum is computed over the payload this is a 32-bit CRC check sum um and when it's",
    "start": "292840",
    "end": "300720"
  },
  {
    "text": "finished uh this value is appended to the payload to form um what you see on the right which is the payload followed",
    "start": "300720",
    "end": "307280"
  },
  {
    "text": "by an icv the icv is another word for the the",
    "start": "307280",
    "end": "312000"
  },
  {
    "text": "checkum in The Next Step a key is selected web supports four keys that are",
    "start": "313520",
    "end": "319680"
  },
  {
    "text": "keyed into the system and I'll talk later about how they are keyed into the system and uh when a packet is to be",
    "start": "319680",
    "end": "325880"
  },
  {
    "text": "sent one of the Four Keys is selected um it's completely up to the implementation how these keys are",
    "start": "325880",
    "end": "331919"
  },
  {
    "text": "selected um but what happens is a key number between 0 and three is generated",
    "start": "331919",
    "end": "338000"
  },
  {
    "text": "and it used to index a table which you see as the uh 4x400 uh box in the middle which has",
    "start": "338000",
    "end": "344520"
  },
  {
    "text": "four 40-bit keys and out of that you get a single 40 bit",
    "start": "344520",
    "end": "349880"
  },
  {
    "text": "key in the next step an IV is selected this is just a a value that's going to",
    "start": "350560",
    "end": "356120"
  },
  {
    "text": "be used as part of the encryption um the standard also doesn't mandate anything about how the IV is to be selected so",
    "start": "356120",
    "end": "363400"
  },
  {
    "text": "this is completely up to the imple implementor as well um the IV is a 24-bit number and um",
    "start": "363400",
    "end": "370639"
  },
  {
    "text": "after it selected is prepended to the key number that was used to to select the key earlier to form um a 32-bit",
    "start": "370639",
    "end": "379759"
  },
  {
    "text": "value in The Next Step an actual encryption oper operation is performed the uh an rc4 is uh rc4 key is",
    "start": "379919",
    "end": "389599"
  },
  {
    "text": "formed by taking the initialization Vector IV and appending it to the key if",
    "start": "389599",
    "end": "395039"
  },
  {
    "text": "you remember the IV was uh 24 bits and the key was uh 40 bits so the total key",
    "start": "395039",
    "end": "402039"
  },
  {
    "text": "size here is 64 bits going into rc4 um that key is used to encrypt the",
    "start": "402039",
    "end": "407639"
  },
  {
    "text": "payload and the icv and uh out of that of course you get the encrypted payload and icv which is",
    "start": "407639",
    "end": "413400"
  },
  {
    "text": "shown in red on the side and finally we construct the the",
    "start": "413400",
    "end": "420680"
  },
  {
    "text": "frame that's going to be sent out over the wire U this is been done by taking the encrypted payload in icv prepending",
    "start": "420680",
    "end": "427520"
  },
  {
    "text": "it with the IV and the key number and then popping a header on the front of",
    "start": "427520",
    "end": "433719"
  },
  {
    "text": "that the decryption process is pretty straightforward from the description of the encryption",
    "start": "435840",
    "end": "442759"
  },
  {
    "text": "process uh the first thing that's done is the key number from the frame that",
    "start": "442759",
    "end": "447840"
  },
  {
    "text": "was sent which is uh shown in blue the IV there is used to index the table of keys again and this",
    "start": "447840",
    "end": "455479"
  },
  {
    "text": "is used to um select another uh the 40-bit key on the receiver",
    "start": "455479",
    "end": "460800"
  },
  {
    "text": "side uh next that key number is attached to the IV which was",
    "start": "461240",
    "end": "467080"
  },
  {
    "text": "also in the header and used as a key to rc4 to decrypt the payload in the icv and out",
    "start": "467080",
    "end": "474800"
  },
  {
    "text": "of that of course you get the decrypted payload in icv",
    "start": "474800",
    "end": "479479"
  },
  {
    "text": "in The Next Step um the check stem is again computed over the payload to uh get IV Prime",
    "start": "480479",
    "end": "488120"
  },
  {
    "text": "there on the side which is a 32-bit number and that number is compared against the icv in the transmitted packet this is done to verify that the",
    "start": "488120",
    "end": "494680"
  },
  {
    "text": "packet was indeed decrypted properly and at the same time the uh",
    "start": "494680",
    "end": "501000"
  },
  {
    "text": "actual unencrypted frame is formed by popping a header onto",
    "start": "501000",
    "end": "505759"
  },
  {
    "start": "507000",
    "end": "507000"
  },
  {
    "text": "that weip also provides Authentication the authentication is based directly on the encryption Primitives it is",
    "start": "507080",
    "end": "514800"
  },
  {
    "text": "done by having the uh having the access point generate a",
    "start": "514800",
    "end": "521599"
  },
  {
    "text": "noas which is a random value uh and sent in plain text to the client the client",
    "start": "521599",
    "end": "528160"
  },
  {
    "text": "takes the kns and encrypts it and sends it back to the access point and then the",
    "start": "528160",
    "end": "534040"
  },
  {
    "text": "server decrypts the response and compares the nons against the one it sent if it was the same nons then the uh",
    "start": "534040",
    "end": "540560"
  },
  {
    "text": "access point believes that the uh client actually has the key and is authenticated um one thing that's",
    "start": "540560",
    "end": "546959"
  },
  {
    "text": "important to note is authentication is not a mandated feature of the protocol you can use web without having the",
    "start": "546959",
    "end": "552440"
  },
  {
    "text": "authentication um option turned on at all so as I mentioned earlier there's",
    "start": "552440",
    "end": "559360"
  },
  {
    "text": "actually another variant that um instead of using 64-bit Keys uses 128bit Keys um",
    "start": "559360",
    "end": "566880"
  },
  {
    "text": "it's almost identical to the 64bit variant that we saw earlier um the",
    "start": "566880",
    "end": "573440"
  },
  {
    "text": "purpose of this variant of course is to increase the key size um yes go",
    "start": "573440",
    "end": "579640"
  },
  {
    "text": "ahead no the uh the 24-bit random number was it's not necessarily random but the 24-bit IV was sent in the pl text the",
    "start": "589519",
    "end": "597240"
  },
  {
    "text": "key was never sent the right yes the the key that you enter",
    "start": "597240",
    "end": "604120"
  },
  {
    "text": "into weap uh when you key the system is a 40 bit key the key that's used in rc4",
    "start": "604120",
    "end": "609800"
  },
  {
    "text": "is a 64-bit key so there's a little confusion there yes",
    "start": "609800",
    "end": "616640"
  },
  {
    "text": "exactly okay so this uh the 128 variant um the purpose of course is to increase",
    "start": "618200",
    "end": "623240"
  },
  {
    "start": "619000",
    "end": "619000"
  },
  {
    "text": "the key size uh I guess they were hoping for stronger security um the 128 bit variant is",
    "start": "623240",
    "end": "630040"
  },
  {
    "text": "non-standard but it is in widespread use and um all the people who implement it implement it the same way for",
    "start": "630040",
    "end": "635639"
  },
  {
    "text": "interoperability um everything all the encryption steps that we were outlined earlier are almost exactly identical",
    "start": "635639",
    "end": "641839"
  },
  {
    "text": "except for in the key selection 104 bit key is selected instead of a 40 bit",
    "start": "641839",
    "end": "647440"
  },
  {
    "text": "key and then during the encryption process when the IV and the key are concatenated together the resulting rc4",
    "start": "647440",
    "end": "655360"
  },
  {
    "text": "key is actually 128 bits long which is shown here in the diagram",
    "start": "655360",
    "end": "661240"
  },
  {
    "start": "663000",
    "end": "663000"
  },
  {
    "text": "so where do these Keys come from the web standard the 80211 standard itself does not",
    "start": "664000",
    "end": "669800"
  },
  {
    "text": "mandate uh does not does not mandate how the keys are to be uh distributed or set",
    "start": "669800",
    "end": "675560"
  },
  {
    "text": "on the system uh in practice what happens is keys are manually distributed which",
    "start": "675560",
    "end": "681320"
  },
  {
    "text": "means uh somebody comes up with a key walks over to somebody else and hands them the key or tells them to it over the phone uh keys are also statically",
    "start": "681320",
    "end": "687839"
  },
  {
    "text": "configured they're not dynamically set by any sort of protocol uh somebody goes and manually manually enters them into",
    "start": "687839",
    "end": "693480"
  },
  {
    "text": "the computer uh these two items have implications um because keys are",
    "start": "693480",
    "end": "698680"
  },
  {
    "text": "manually distributed and statically configured uh chances are they're going to be selected to be easy to remember so",
    "start": "698680",
    "end": "704399"
  },
  {
    "text": "that somebody could tell it to someone else remember it and enter into a computer easily also chances are they're not",
    "start": "704399",
    "end": "711519"
  },
  {
    "text": "going to be changed very often if you have 100 users who are using a system with a statically keyed key then to",
    "start": "711519",
    "end": "718639"
  },
  {
    "text": "change it you have to to contact each of those users and have them all change them at the same time um that's not very",
    "start": "718639",
    "end": "724880"
  },
  {
    "text": "practical um as was pointed out earlier there are four 40- bit keys that are used for the 64-bit variant in the",
    "start": "724880",
    "end": "731600"
  },
  {
    "text": "128bit variant uh I've only seen uh an implementations that have a single key",
    "start": "731600",
    "end": "736920"
  },
  {
    "text": "that's 104 bits long but um I don't see why uh someone couldn't Support also",
    "start": "736920",
    "end": "742279"
  },
  {
    "text": "having several keys there um the key values are uh can be",
    "start": "742279",
    "end": "748160"
  },
  {
    "text": "entered directly as he what this means is you have a dialog box that has 40 boxes and you can enter in",
    "start": "748160",
    "end": "754600"
  },
  {
    "text": "40 hex values there uh but since humans don't generally like to enter in a lot of hex values um implementers have been",
    "start": "754600",
    "end": "761600"
  },
  {
    "text": "uh kind enough to provide a key generator um there's actually two key generators one that's used for the",
    "start": "761600",
    "end": "766720"
  },
  {
    "text": "64-bit variant and one that's used for the 128bit variant um the purpose of the key generator of course is to enter an",
    "start": "766720",
    "end": "774120"
  },
  {
    "text": "asy string which is much easier for a human to deal with and to turn that string into the keying data that's",
    "start": "774120",
    "end": "780680"
  },
  {
    "text": "required um again these key generators are not standard they're not specified",
    "start": "780680",
    "end": "785760"
  },
  {
    "text": "in the 80211 standard but they are in widespread use and again for interoperability everybody has",
    "start": "785760",
    "end": "791720"
  },
  {
    "text": "implemented the same key generators so uh to give you a concrete",
    "start": "791720",
    "end": "799480"
  },
  {
    "start": "797000",
    "end": "797000"
  },
  {
    "text": "example of what this might look like uh on the bottom of the screen you can see 40 uh boxes where hex values can be",
    "start": "799480",
    "end": "805440"
  },
  {
    "text": "entered into and you can see why people generally wouldn't want to do that that's a lot of work and you can see",
    "start": "805440",
    "end": "810959"
  },
  {
    "text": "above it uh where there's a a box for a pass phrase to be entered in and I've entered in my pass phrase and uh the hex",
    "start": "810959",
    "end": "817639"
  },
  {
    "text": "values on the bottom if you can read them at all uh were the values that were generated from the phrase my past",
    "start": "817639",
    "end": "824399"
  },
  {
    "start": "826000",
    "end": "826000"
  },
  {
    "text": "phrase so uh what do these generators look like um I'm going to go over this uh a little",
    "start": "826560",
    "end": "833959"
  },
  {
    "text": "quickly at first and we'll come back to some of these points um this is what the 4 generator",
    "start": "833959",
    "end": "839759"
  },
  {
    "text": "looks like this diagram at the top it's uh composed of several steps um the first step is a folding",
    "start": "839759",
    "end": "847199"
  },
  {
    "text": "operation where the past phrase is folded down into a 32bit numbers a 32bit",
    "start": "847199",
    "end": "852800"
  },
  {
    "text": "number and this is done in the following manner um all of the uh the letters from the past phrase are laid",
    "start": "852800",
    "end": "859000"
  },
  {
    "text": "out excuse me where you you can see uh in this section right here uh four",
    "start": "859000",
    "end": "866720"
  },
  {
    "text": "across uh until all of the characters are used and then an exclusive or operation is performed uh down each row",
    "start": "866720",
    "end": "874000"
  },
  {
    "text": "each column so in this example the value that I'm pointing out right there was generated by performing The Exclusive or",
    "start": "874000",
    "end": "880560"
  },
  {
    "text": "of the letters m a h and E likewise uh these other four values at the bottom were um the result of another exclusive",
    "start": "880560",
    "end": "888160"
  },
  {
    "text": "or operation with the other columns so once the uh 32bit value is",
    "start": "888160",
    "end": "893759"
  },
  {
    "text": "generated this is used as a seed to the pseudo random number generator which is shown in the Box",
    "start": "893759",
    "end": "901040"
  },
  {
    "text": "um the type of pseudo random number generator used here was a 32-bit linear congruential pseudo random number",
    "start": "901360",
    "end": "906519"
  },
  {
    "text": "generator and we'll see why that's important in a few seconds um this generator is uh spits",
    "start": "906519",
    "end": "912920"
  },
  {
    "text": "out 32-bit numbers um you can see a bunch of them on the side there um where the top number would be 34 f8",
    "start": "912920",
    "end": "920399"
  },
  {
    "text": "a927 um the generator is used to generate 40 different values from each",
    "start": "920399",
    "end": "926759"
  },
  {
    "text": "of these 40 values one bite is selected and those are the boxes shown in green there and this is used for the keying",
    "start": "926759",
    "end": "932959"
  },
  {
    "text": "material so in this example the key would be f8 61 A3 E7 C3 8 e and so",
    "start": "932959",
    "end": "943759"
  },
  {
    "text": "[Music] on okay so this is a really really bad key",
    "start": "944250",
    "end": "949880"
  },
  {
    "start": "947000",
    "end": "947000"
  },
  {
    "text": "generator um why is that well ideally since we're generating four 40 bit Keys",
    "start": "949880",
    "end": "955959"
  },
  {
    "text": "we'd like to at least have 40 bits of entropy so we at least have enough for one of those keys but uh this generator",
    "start": "955959",
    "end": "962040"
  },
  {
    "text": "reduces the entropy in several ways in the first step where the aski",
    "start": "962040",
    "end": "968639"
  },
  {
    "start": "966000",
    "end": "966000"
  },
  {
    "text": "key is mapped down to a seed uh we reduce well right off the bat",
    "start": "968639",
    "end": "973759"
  },
  {
    "text": "we took a string which could have had an arbitrary amount of entropy in it we mapped it down to a 32bit value already",
    "start": "973759",
    "end": "980880"
  },
  {
    "text": "we have at most 32 bits of entropy um in the next step where we uh",
    "start": "980880",
    "end": "987680"
  },
  {
    "text": "actually did the exclusive order four of the uh characters um it's important to note that since these characters are asy all",
    "start": "987680",
    "end": "995759"
  },
  {
    "text": "of their High bits are zero uh when when the exclusive or operation is performed on these values um the resultant value",
    "start": "995759",
    "end": "1003680"
  },
  {
    "text": "is also going to have an high a high bit of zero so of these four characters that were gener of these four numbers that were generated to form the 32-bit",
    "start": "1003680",
    "end": "1011160"
  },
  {
    "text": "value um four of the bits are always zero so now the entropy is at most 28",
    "start": "1011160",
    "end": "1018600"
  },
  {
    "text": "bits or 32 - 4 or um set another way",
    "start": "1018600",
    "end": "1023680"
  },
  {
    "text": "only the seeds of 00000000 0 0 through 7f 7f 7f",
    "start": "1023680",
    "end": "1030160"
  },
  {
    "text": "7f can occur where all the High bits are always",
    "start": "1030160",
    "end": "1035400"
  },
  {
    "start": "1037000",
    "end": "1037000"
  },
  {
    "text": "cleared so next the way that they use the pseudo random number generator also reduces the",
    "start": "1037880",
    "end": "1044400"
  },
  {
    "text": "entropy so um in this step remember that there was a 40 values",
    "start": "1046240",
    "end": "1051320"
  },
  {
    "text": "generated from the generator from each of these values only one of the bytes was",
    "start": "1051320",
    "end": "1057919"
  },
  {
    "text": "selected well the generator is a linear congruential generator and it uses a modulus of 2 to 32 um this type of",
    "start": "1057960",
    "end": "1065559"
  },
  {
    "text": "generator has the property that the the least bit the least significant bits are much less random than the most",
    "start": "1065559",
    "end": "1071400"
  },
  {
    "text": "significant bits in particular if you look at the very at the lowest bit it",
    "start": "1071400",
    "end": "1077240"
  },
  {
    "text": "will cycle every two iterations so if you pull three numbers from the generator and look at only the lowest",
    "start": "1077240",
    "end": "1083640"
  },
  {
    "text": "bit the third bit that you get out will be the same as the first bit that you get out and also if you look at the uh",
    "start": "1083640",
    "end": "1091280"
  },
  {
    "text": "if you look at the fourth bit it'll cycle with a cycle length of 16 or 2 the 4th and so um these values that we're",
    "start": "1091280",
    "end": "1098280"
  },
  {
    "text": "pulling out from bits um 16 through 23 have a cycle length of 2 to",
    "start": "1098280",
    "end": "1105759"
  },
  {
    "text": "24 um or another way um for this generator only the seeds",
    "start": "1106039",
    "end": "1114880"
  },
  {
    "text": "of 00000000 through zero FF FF FF will result in unique Keys all the other",
    "start": "1114880",
    "end": "1121760"
  },
  {
    "text": "seeds that are used um will give you the same result as one of the seeds in this",
    "start": "1121760",
    "end": "1128360"
  },
  {
    "text": "range so right there um the entropy can be at most 24",
    "start": "1128360",
    "end": "1134120"
  },
  {
    "start": "1134000",
    "end": "1134000"
  },
  {
    "text": "bits now when you take these uh these effects all together the net result is",
    "start": "1134120",
    "end": "1139960"
  },
  {
    "text": "the entropy of this generator is only 21 bits um in the first uh asy folding",
    "start": "1139960",
    "end": "1146280"
  },
  {
    "text": "operation we notice that we could only the keys I mean sorry only the seeds of zero through 7f 7f 7f 7f where the High",
    "start": "1146280",
    "end": "1153600"
  },
  {
    "text": "bits were always zero uh could be generated and then in the uh random number generator we notice that only the",
    "start": "1153600",
    "end": "1159760"
  },
  {
    "text": "seeds zero through um this is incorrect it should be uh 00 FF FF FF will result in unique",
    "start": "1159760",
    "end": "1167559"
  },
  {
    "text": "Keys when you combine these two facts uh we note that we only need to consider the seeds 0 through 0 7f 7f 7f or to the",
    "start": "1167559",
    "end": "1176120"
  },
  {
    "text": "21 seeds so uh this is a pretty small",
    "start": "1176120",
    "end": "1181840"
  },
  {
    "text": "number two to 20 is about uh what is that a million so this is about what 2 million values I think I'm doing my math",
    "start": "1181840",
    "end": "1187760"
  },
  {
    "text": "right but not a whole lot of values at",
    "start": "1187760",
    "end": "1191880"
  },
  {
    "start": "1192000",
    "end": "1192000"
  },
  {
    "text": "least um so like I mentioned there's a separate generator for the 128bit variant um this generator is a bit",
    "start": "1192919",
    "end": "1199600"
  },
  {
    "text": "better um it's based on the md5 algorithm um the purpose of this generator of course was to map an Nasi",
    "start": "1199600",
    "end": "1206120"
  },
  {
    "text": "key to4 bit um key value to use with the 128bit",
    "start": "1206120",
    "end": "1211520"
  },
  {
    "text": "variant um this is done in several steps in the first step an ASI string is",
    "start": "1211520",
    "end": "1216559"
  },
  {
    "text": "extended to 64 bytes through repetition so in the example where the pass phrase",
    "start": "1216559",
    "end": "1222760"
  },
  {
    "text": "was my passphrase um the 64 bytes uh sorry the uh the description underneath",
    "start": "1222760",
    "end": "1229200"
  },
  {
    "text": "that should read bites not bits would be my pass phrase my pass phrase my pass phrase my pass phrase and so on until",
    "start": "1229200",
    "end": "1235919"
  },
  {
    "text": "you reach 64 characters um it's not really clear why they performed this operation it's it",
    "start": "1235919",
    "end": "1243360"
  },
  {
    "text": "seems to indicate that they didn't really have a good understanding of how md5 worked um in the next step um the md5",
    "start": "1243360",
    "end": "1249480"
  },
  {
    "text": "this uh buffer is taken which results in another 64 bytes and of this only the",
    "start": "1249480",
    "end": "1255480"
  },
  {
    "text": "first 104 bits or 13 bytes are used which is shown in the green green there so uh this this generator is actually",
    "start": "1255480",
    "end": "1262360"
  },
  {
    "text": "pretty good the key strength relies on the strength of md5 which so far has a pretty good record and uh then entropy",
    "start": "1262360",
    "end": "1269720"
  },
  {
    "text": "of the string that's entered and this is the property that we like to have in a key",
    "start": "1269720",
    "end": "1275039"
  },
  {
    "start": "1275000",
    "end": "1275000"
  },
  {
    "text": "generator so now I'm going to change gears a little bit and start talking about the web cracker that I",
    "start": "1275880",
    "end": "1281480"
  },
  {
    "text": "implemented um this cracker is a proof of concept program um I didn't bother",
    "start": "1281480",
    "end": "1287760"
  },
  {
    "text": "going to all the little bells and whistles that you could put into a cracker I'm going to leave that for someone else to come along and do",
    "start": "1287760",
    "end": "1292960"
  },
  {
    "text": "afterwards if someone really wants to do that uh this program will perform",
    "start": "1292960",
    "end": "1298559"
  },
  {
    "text": "dictionary attacks against web keys and what that means is it will go through a dictionary and",
    "start": "1298559",
    "end": "1304159"
  },
  {
    "text": "try uh every single word in the dictionary to see if it's a valid key um it can find keys that were",
    "start": "1304159",
    "end": "1311279"
  },
  {
    "text": "generated generated from the dictionary word going through one of the key generators or it can find keys that were",
    "start": "1311279",
    "end": "1319080"
  },
  {
    "text": "um entered as hex values but actually are asky",
    "start": "1319080",
    "end": "1324080"
  },
  {
    "text": "strings um it also has the feature to perform a brute force on the 64-bit web generator which I showed earlier was",
    "start": "1324559",
    "end": "1331279"
  },
  {
    "text": "week um it doesn't have any support for any of the other Brute Force attacks that are possible and I'll discuss why",
    "start": "1331279",
    "end": "1337120"
  },
  {
    "text": "um towards the end of the talk so this program is organized as",
    "start": "1337120",
    "end": "1343919"
  },
  {
    "start": "1339000",
    "end": "1339000"
  },
  {
    "text": "follows um there's a component which collects a bunch of packets",
    "start": "1343919",
    "end": "1349360"
  },
  {
    "text": "uh which are used um to actually perform verification that's shown in the blue at the bottom",
    "start": "1349360",
    "end": "1355400"
  },
  {
    "text": "then there's a part of the program which generates guesses uh these guesses are then turned",
    "start": "1355400",
    "end": "1360840"
  },
  {
    "text": "into Keys through another section of the program which Maps um guesses to Keys uh",
    "start": "1360840",
    "end": "1366640"
  },
  {
    "text": "finally these keys are used uh to try to decrypt the packets",
    "start": "1366640",
    "end": "1371799"
  },
  {
    "text": "which were previously collected and uh to print out success when one of the keys was actually successful",
    "start": "1371799",
    "end": "1379799"
  },
  {
    "start": "1380000",
    "end": "1380000"
  },
  {
    "text": "the packet collector component has the purpose that it needs to collect a packets to be used for",
    "start": "1381960",
    "end": "1388039"
  },
  {
    "text": "verification um the implementation that I made only collects 80211 data packets it doesn't",
    "start": "1388039",
    "end": "1395360"
  },
  {
    "text": "bother with any of the other types of packets and I'll dis discuss why in a little bit um and this part the program",
    "start": "1395360",
    "end": "1403080"
  },
  {
    "text": "currently collects two packets and also describe why we wanted two packets",
    "start": "1403080",
    "end": "1408919"
  },
  {
    "text": "uh the program was kept simple by using uh pcap format files there's no actual packet capture built into my program but",
    "start": "1408919",
    "end": "1416120"
  },
  {
    "text": "rather I'm using other programs such as um the prism dump utility to collect packets prism dump saves the packets",
    "start": "1416120",
    "end": "1423000"
  },
  {
    "text": "into a packet file in the pcap file format and then I read them in and perform the the cracking operation uh",
    "start": "1423000",
    "end": "1430400"
  },
  {
    "text": "this made the design a lot simpler it also allows for offline cracking where uh packets are captured uh stored onto",
    "start": "1430400",
    "end": "1436720"
  },
  {
    "text": "dis and then cracked uh at at your leisure uh in the next section uh making",
    "start": "1436720",
    "end": "1443440"
  },
  {
    "start": "1440000",
    "end": "1440000"
  },
  {
    "text": "guesses how do we make the guesses that are used for um uh used to to guess the",
    "start": "1443440",
    "end": "1449720"
  },
  {
    "text": "key um well there's two different modes to this program there is the dictionary attack mode and there's the boot Force",
    "start": "1449720",
    "end": "1455960"
  },
  {
    "text": "mode in the dictionary Attack Mode we read a bunch of words from a file it's kept really simple um again there's a",
    "start": "1455960",
    "end": "1462880"
  },
  {
    "text": "lot of room for improvements here for example programs such as uh Alec muffet's crack have uh really nice",
    "start": "1462880",
    "end": "1470000"
  },
  {
    "text": "generator sections that will perform uh operations on the words to transform them into other words to pen letters to",
    "start": "1470000",
    "end": "1476080"
  },
  {
    "text": "them uh to change regular words into Elite speak or something like that um I",
    "start": "1476080",
    "end": "1481799"
  },
  {
    "text": "leave it to somebody else to to add functionality like that if they desire to uh for the Brute Force gen uh for the",
    "start": "1481799",
    "end": "1489080"
  },
  {
    "text": "Brute Force attacks what we want to do is uh generate a bunch of seeds we don't want to generate actual words we want to",
    "start": "1489080",
    "end": "1496159"
  },
  {
    "text": "generate the seeds that are going to go into the Pudo random number generator and uh as I described earlier we want to generate the C from zero through 7f 7f",
    "start": "1496159",
    "end": "1505159"
  },
  {
    "start": "1506000",
    "end": "1506000"
  },
  {
    "text": "7f so once we have these guesses we have to turn them into keys this can be done in a number of",
    "start": "1506799",
    "end": "1512799"
  },
  {
    "text": "ways um in the simplest operation you can take a key you can take a guess which is a word and transform it",
    "start": "1512799",
    "end": "1519159"
  },
  {
    "text": "directly to a key uh by doing nothing just using it as a key um for example",
    "start": "1519159",
    "end": "1525720"
  },
  {
    "text": "when using 64-bit web you need a 40-bit key you can take the first five letters of any word and use that as the key um",
    "start": "1525720",
    "end": "1533000"
  },
  {
    "text": "or for the 128bit variant you need 13 bytes or4 bits and this is either done by",
    "start": "1533000",
    "end": "1539440"
  },
  {
    "text": "truncating a long word or zero filling in a short word uh if we're using the key generator",
    "start": "1539440",
    "end": "1545600"
  },
  {
    "text": "we take an Ask value that we guessed and we run the key generation function and we get out the keys directly this can be",
    "start": "1545600",
    "end": "1550840"
  },
  {
    "text": "done by using the 64-bit generator or the 128bit generator if we're performing a Brute Force we've generated seed value",
    "start": "1550840",
    "end": "1558640"
  },
  {
    "text": "and not actual asky strings in this case we bypass the first operation of the key",
    "start": "1558640",
    "end": "1564080"
  },
  {
    "text": "generator and provide the C directly to the suseo random number generator and then generate the bits from",
    "start": "1564080",
    "end": "1571440"
  },
  {
    "start": "1571000",
    "end": "1571000"
  },
  {
    "text": "there so once we have a key uh we need to verify whether that key was actually the right key used to encrypt and",
    "start": "1572240",
    "end": "1578760"
  },
  {
    "text": "decrypt um the traffic that we've captured um there are several possibilities of how you can do this um",
    "start": "1578760",
    "end": "1586360"
  },
  {
    "text": "the first and most obvious would to look at authentication packets why authentication packets give us a known",
    "start": "1586360",
    "end": "1593080"
  },
  {
    "text": "plane text they give us the plain text and they give us the encrypted results of that of a packet that's encrypted",
    "start": "1593080",
    "end": "1600360"
  },
  {
    "text": "using that plain text um so it would be trivial to do the comparison in this case but I chose not",
    "start": "1600360",
    "end": "1607080"
  },
  {
    "text": "to do this why this is uh far from ideal for two reasons one is that",
    "start": "1607080",
    "end": "1614000"
  },
  {
    "text": "authentication only happens when someone comes and joins the network so this is an infrequent operation you could sit around waiting for hours uh for someone",
    "start": "1614000",
    "end": "1620960"
  },
  {
    "text": "to join um number two it's optional which means you could sit around forever",
    "start": "1620960",
    "end": "1626840"
  },
  {
    "text": "waiting for this to happen and never get any results so obviously this is not going to be the best way to do this um",
    "start": "1626840",
    "end": "1633200"
  },
  {
    "text": "data packets are much more common so what can we do to use data packets to",
    "start": "1633200",
    "end": "1638720"
  },
  {
    "text": "per perform this verification um the first thing that",
    "start": "1638720",
    "end": "1644399"
  },
  {
    "text": "came to my mind was why don't we just decrypt the packet and look to see if it looks like a packet um this sort of",
    "start": "1644399",
    "end": "1650840"
  },
  {
    "text": "implies that you know what a packet would look like um usually I know what packets look like because usually when",
    "start": "1650840",
    "end": "1656039"
  },
  {
    "text": "I'm looking at networks I see IP traffic so you could decrypt the packet perform",
    "start": "1656039",
    "end": "1661480"
  },
  {
    "text": "a few humanistics to see if it looks like an IP packet and if it does you could say well I must have got the right",
    "start": "1661480",
    "end": "1668000"
  },
  {
    "text": "key um but there's another option that uh turns out to work a bit",
    "start": "1668000",
    "end": "1673960"
  },
  {
    "text": "better um you can decrypt the packet and verify the check some on the packet after you decrypted it recalling that",
    "start": "1673960",
    "end": "1680840"
  },
  {
    "text": "every single packet that was encrypted had a check suum applied to it um both of these methods have the",
    "start": "1680840",
    "end": "1688360"
  },
  {
    "text": "property that they're inexact you can decrypt a packet and it could look like",
    "start": "1688360",
    "end": "1693679"
  },
  {
    "text": "a valid IP packet or the check sum could verify properly even in the case where",
    "start": "1693679",
    "end": "1699559"
  },
  {
    "text": "you actually had the wrong key um so what will you do in this case",
    "start": "1699559",
    "end": "1705679"
  },
  {
    "text": "to uh eliminate false positives um well you could verify several packets um the",
    "start": "1705679",
    "end": "1712000"
  },
  {
    "text": "odds of having a false positive are really low on one packet the odds having a false positive on several packets uh",
    "start": "1712000",
    "end": "1718440"
  },
  {
    "text": "gets increasingly smaller so um the method I actually",
    "start": "1718440",
    "end": "1725039"
  },
  {
    "text": "implemented was icv verification um this works in the following way you get the IV and the key",
    "start": "1725039",
    "end": "1730640"
  },
  {
    "text": "number from the packet you form an rc4 key uh by taking the IV and the selected",
    "start": "1730640",
    "end": "1737760"
  },
  {
    "text": "key concatenating concatenating them you decrypt the payload and the icv of the",
    "start": "1737760",
    "end": "1743000"
  },
  {
    "text": "packet finally you recompute the icv of the payload and you perform the comparison this was all uh basically the",
    "start": "1743000",
    "end": "1749399"
  },
  {
    "text": "same steps of decryption that was that were pointed out earlier um because we're",
    "start": "1749399",
    "end": "1755279"
  },
  {
    "text": "comparing these 32-bit icvs to verify whether it was decrypted properly uh we",
    "start": "1755279",
    "end": "1760600"
  },
  {
    "text": "have a probability of a false Mash roughly 1 and two the 32 or 1 in four billion um I wanted a little bit higher",
    "start": "1760600",
    "end": "1767240"
  },
  {
    "text": "Assurance than this so I actually took two packets um to verify against which gives a probability of a false match of",
    "start": "1767240",
    "end": "1773360"
  },
  {
    "text": "one and two the 64 which is uh very very very",
    "start": "1773360",
    "end": "1779039"
  },
  {
    "start": "1779000",
    "end": "1779000"
  },
  {
    "text": "infrequent so what are the results of uh this construction of this program well I made the program uh it",
    "start": "1779720",
    "end": "1787240"
  },
  {
    "text": "exists um it performs dictionary taxs on asky Keys um key keys that were directly set",
    "start": "1787240",
    "end": "1793559"
  },
  {
    "text": "as aski or against keys that were generated gener generated excuse me using the the 64 and 128bit",
    "start": "1793559",
    "end": "1799960"
  },
  {
    "text": "generators it also performs a Brute Force against the 64-bit",
    "start": "1799960",
    "end": "1805120"
  },
  {
    "text": "generator how well does it work well the brute force that I mentioned earlier going through all of",
    "start": "1805120",
    "end": "1811600"
  },
  {
    "text": "the two to 21 possibilities for the 64-bit generator takes about 60 uh sorry",
    "start": "1811600",
    "end": "1817519"
  },
  {
    "text": "35 seconds so uh pretty fast uh that's",
    "start": "1817519",
    "end": "1823000"
  },
  {
    "text": "about 60,000 guesses a second also performing a regular dictionary attack again 64-bit web uh takes about 67 uh",
    "start": "1823000",
    "end": "1831440"
  },
  {
    "text": "60,000 seconds I'm sorry 60,000 guesses per second uh doing the uh 128 bit variant",
    "start": "1831440",
    "end": "1838760"
  },
  {
    "text": "is a little bit slower depending on whether or not whether or not you use the generator the generator you can see",
    "start": "1838760",
    "end": "1844000"
  },
  {
    "text": "slows it down a little bit uh giving you a speed of 45,000 guesses a second um",
    "start": "1844000",
    "end": "1849480"
  },
  {
    "text": "for the case where you don't use the generator about 55,000 guesses per second",
    "start": "1849480",
    "end": "1857000"
  },
  {
    "start": "1855000",
    "end": "1855000"
  },
  {
    "text": "so what does this mean um well at these speeds you really don't want to try to Brute Force the 40- bit key size uh in",
    "start": "1858559",
    "end": "1866080"
  },
  {
    "text": "the case where people aren't using the generator you might think well why don't we just try all of the uh all of the",
    "start": "1866080",
    "end": "1871799"
  },
  {
    "text": "possible keys for the 40 bit uh web key um well I don't know you you kind of you",
    "start": "1871799",
    "end": "1877480"
  },
  {
    "text": "could do this if you wanted to it would take about 210 days uh given the speeds of the numbers I gave you for my laptop",
    "start": "1877480",
    "end": "1883760"
  },
  {
    "text": "um that's reasonable if you had 100 machines you know about two days to do so not out of the question but uh we'll",
    "start": "1883760",
    "end": "1891000"
  },
  {
    "text": "see why you might not want to do that in a few seconds um because there are some better attacks out",
    "start": "1891000",
    "end": "1896480"
  },
  {
    "text": "there what about use uh boot Force against 128bit web well the 104 bit keys",
    "start": "1896480",
    "end": "1902360"
  },
  {
    "text": "will take about 10 to the 19 years you probably don't even want to start doing",
    "start": "1902360",
    "end": "1907880"
  },
  {
    "start": "1908000",
    "end": "1908000"
  },
  {
    "text": "that uh what are the implications of this um obviously nobody should be using",
    "start": "1908039",
    "end": "1913320"
  },
  {
    "text": "the 64-bit generator um it's horribly broken 35",
    "start": "1913320",
    "end": "1918399"
  },
  {
    "text": "seconds to break uh not very strong at all um if you're going to use 64-bit web",
    "start": "1918399",
    "end": "1925320"
  },
  {
    "text": "you should uh use uh you should either use hex keys or uh",
    "start": "1925320",
    "end": "1930840"
  },
  {
    "text": "you know if you choose an ask a key and map it directly to hex but uh the same guideline should be used um basically as",
    "start": "1930840",
    "end": "1937159"
  },
  {
    "text": "you use to select any other password you should select passwords that are strong uh they shouldn't be dictionary words um",
    "start": "1937159",
    "end": "1943279"
  },
  {
    "text": "maybe not even two dictionary words put together um basically all the things that people told you about how to pick",
    "start": "1943279",
    "end": "1948720"
  },
  {
    "text": "your Unix password you should apply that to web um what about the strength of 40 bit",
    "start": "1948720",
    "end": "1954720"
  },
  {
    "text": "uh Keys um they're reasonably strong um again if somebody has 100 computers they",
    "start": "1954720",
    "end": "1960000"
  },
  {
    "text": "can probably boot Force the whole thing in a few days uh well chosen 104 bit keys are very strong whether or not they",
    "start": "1960000",
    "end": "1966399"
  },
  {
    "text": "are generated but before anybody gets all",
    "start": "1966399",
    "end": "1971559"
  },
  {
    "start": "1970000",
    "end": "1970000"
  },
  {
    "text": "happy about uh saying well I picked a good key and I'm not using this generator uh let we look at some related",
    "start": "1971559",
    "end": "1978000"
  },
  {
    "text": "work there's more bad news uh for those of you who saw Ian's talk yesterday um some of the work that he",
    "start": "1978000",
    "end": "1983799"
  },
  {
    "text": "had done earlier this year he pointed out that web encryption is fundamentally flawed in other",
    "start": "1983799",
    "end": "1989760"
  },
  {
    "text": "words no matter how well you select your key uh someone can someone can uh still",
    "start": "1989760",
    "end": "1995559"
  },
  {
    "text": "decrypt your traffic uh perform injection um perform a number of",
    "start": "1995559",
    "end": "2000960"
  },
  {
    "text": "attacks the attack times for some of the attacks that he outline are on the order of a few days maybe a day of uh",
    "start": "2000960",
    "end": "2007200"
  },
  {
    "text": "collecting traff and then some processing uh maybe two depending on the attack um there were also some other",
    "start": "2007200",
    "end": "2014240"
  },
  {
    "text": "attacks pointed out by Bill arbo uh Ian had covered some of these also in his talk um pointing out that web authentication",
    "start": "2014240",
    "end": "2021480"
  },
  {
    "text": "itself is broken into um you can perform the authentication step by observing",
    "start": "2021480",
    "end": "2026720"
  },
  {
    "text": "someone else's authentication um he also extended some of the Goldberg attacks and",
    "start": "2026720",
    "end": "2033799"
  },
  {
    "text": "um the net result of his extensions were that it's easier to perform",
    "start": "2033799",
    "end": "2039720"
  },
  {
    "text": "so um all this related work taken together says that if you are going to",
    "start": "2039960",
    "end": "2045240"
  },
  {
    "text": "crack web Keys you really shouldn't bother spending more than a day or two on on doing it because if you have a day",
    "start": "2045240",
    "end": "2050638"
  },
  {
    "text": "or two to spare um there's attx that will guaranteed are guaranteed to give you results um so this is another reason",
    "start": "2050639",
    "end": "2057839"
  },
  {
    "text": "why nobody should try to Brute Force the 40 bit keys well that's um the bulk of my talk",
    "start": "2057839",
    "end": "2065118"
  },
  {
    "text": "I have a short demonstration to give also um before I get to that I'd like to",
    "start": "2065119",
    "end": "2070320"
  },
  {
    "text": "point out that um all the source code for the program that I just mentioned are on the C that you have they're also",
    "start": "2070320",
    "end": "2076158"
  },
  {
    "text": "available online at the URL mentioned right there um I also have a bunch of other utilities up at the up at that",
    "start": "2076159",
    "end": "2081960"
  },
  {
    "text": "site feel free to grab whatever you like if anybody has questions about any of my talk that they don't want to give bring",
    "start": "2081960",
    "end": "2087040"
  },
  {
    "text": "up here feel free to send me email at uh tum stake.com",
    "start": "2087040",
    "end": "2092200"
  },
  {
    "text": "all the source code is in the public domain so feel free to use it in anything you want to use it in",
    "start": "2092200",
    "end": "2098839"
  },
  {
    "start": "2093000",
    "end": "2093000"
  },
  {
    "text": "and uh right before I get to questions I'd like to give a quick uh demonstration of how this",
    "start": "2098839",
    "end": "2104400"
  },
  {
    "text": "works okay so in this window here um I have a couple of files that I've",
    "start": "2110560",
    "end": "2116200"
  },
  {
    "text": "captured previously um the uh 64bit doap is a capture of me",
    "start": "2116200",
    "end": "2125400"
  },
  {
    "text": "using the 64-bit key generator and uh basically all of these uh captures just",
    "start": "2125400",
    "end": "2130720"
  },
  {
    "text": "have a few R packets in them nothing really special um the 128bit file",
    "start": "2130720",
    "end": "2136240"
  },
  {
    "text": "likewise is using the 128bit generator I also have a third file there",
    "start": "2136240",
    "end": "2141480"
  },
  {
    "text": "called 128 asky and in this one I uh I chose a key by picking a 13l dictionary",
    "start": "2141480",
    "end": "2147560"
  },
  {
    "text": "word and then entering the hex values for the key for the key directly so let's see what it looks like uh when you",
    "start": "2147560",
    "end": "2153079"
  },
  {
    "text": "run my program on these files",
    "start": "2153079",
    "end": "2157640"
  },
  {
    "text": "so the program is called Web crack and in this first case I'm going to run it against the 64-bit generator",
    "start": "2163880",
    "end": "2171680"
  },
  {
    "text": "so I select the file that I'm going to crack and I select a list of words this is just the user addict words from Linux",
    "start": "2171680",
    "end": "2178520"
  },
  {
    "text": "uh not the biggest dictionary you can get so this is probably not the uh the best example but um my word is uh the word I picked was",
    "start": "2178520",
    "end": "2186920"
  },
  {
    "text": "actually victimized which is also in that dictionary so it took all of a second to",
    "start": "2186920",
    "end": "2192440"
  },
  {
    "text": "guess this um and it shows you how fast it took um and then it also shows you what the hex web key is if you would",
    "start": "2192440",
    "end": "2199599"
  },
  {
    "text": "like to actually enter it in by hex values and it also shows you the word that was gener generated",
    "start": "2199599",
    "end": "2205359"
  },
  {
    "text": "from so um if you wanted to crack a the 128bit",
    "start": "2205359",
    "end": "2213000"
  },
  {
    "text": "variant um you you actually have to know that you have packets that were encrypted with 128bit variant because",
    "start": "2213000",
    "end": "2219000"
  },
  {
    "text": "there is really really no way that I know of to distinguish the packets so in this case I have a flag DS for strong",
    "start": "2219000",
    "end": "2225800"
  },
  {
    "text": "128 bits um and then I specify the captured file",
    "start": "2225800",
    "end": "2233000"
  },
  {
    "text": "and the word list again and uh this one started with an A so it took a very small amount of time",
    "start": "2233000",
    "end": "2239680"
  },
  {
    "text": "the word was arrogant uh there is the hex bits that were used to um as the key",
    "start": "2239680",
    "end": "2244920"
  },
  {
    "text": "again it tells you the performance how fast it was going",
    "start": "2244920",
    "end": "2249520"
  },
  {
    "text": "um let's say that the uh 64-bit capture wasn't generated from",
    "start": "2250319",
    "end": "2256119"
  },
  {
    "text": "word or we didn't know it was generated from word and we just wanted to perform a Brute Force well in this case you would specify DB and then the capture",
    "start": "2256119",
    "end": "2262760"
  },
  {
    "text": "file you don't have to specify a word list because it's going to Brute Force the whole Space um this one's going to take a",
    "start": "2262760",
    "end": "2268960"
  },
  {
    "text": "little bit longer because it is uh doing to the 21 or some fraction of",
    "start": "2268960",
    "end": "2274640"
  },
  {
    "text": "it so there it took uh three seconds to to go through obviously you didn't have to go through the whole Space which",
    "start": "2274640",
    "end": "2280280"
  },
  {
    "text": "would have tooken about 30 35 seconds um so you'll see some weird",
    "start": "2280280",
    "end": "2286079"
  },
  {
    "text": "results here um it says success it shows you what the seed was um but then it says generate generated by and uh recall",
    "start": "2286079",
    "end": "2294800"
  },
  {
    "text": "that the word that I used was victimized but it shows you aa aa semicolon bang Ka",
    "start": "2294800",
    "end": "2300319"
  },
  {
    "text": "a um this is because there's a lot of collisions in the ASI mapping and I'm",
    "start": "2300319",
    "end": "2306440"
  },
  {
    "text": "not actually using asky strings but once I get a seed I want to have something I can type into the generator so I go back",
    "start": "2306440",
    "end": "2311880"
  },
  {
    "text": "and unfold the bits to find Just One of the values that can be used so if you",
    "start": "2311880",
    "end": "2316960"
  },
  {
    "text": "type that into the key gen generator you'll get the same web key as you would have if you typed in the word victimized",
    "start": "2316960",
    "end": "2322520"
  },
  {
    "text": "it turns out that the uh generator has a lot of collisions so there are a lot of words that will map to the same",
    "start": "2322520",
    "end": "2329599"
  },
  {
    "text": "value and uh finally I have a file here where I used",
    "start": "2330720",
    "end": "2336079"
  },
  {
    "text": "a a key key that was directly asky so uh how do we crack that",
    "start": "2336079",
    "end": "2342079"
  },
  {
    "text": "we uh first you have to specify which key you're cracking because uh in this mode we'll crack um each key separately",
    "start": "2342280",
    "end": "2350280"
  },
  {
    "text": "um I'm using key number zero or the first key also um I'm using the 128 bit",
    "start": "2350280",
    "end": "2357079"
  },
  {
    "text": "variant so i use- s then I specify my file and a word list and away it goes um",
    "start": "2357079",
    "end": "2365599"
  },
  {
    "text": "the word I used was unanticipated and you could see that the the web key below it 75 661 those are actually the",
    "start": "2365599",
    "end": "2372119"
  },
  {
    "text": "characters unanticipated uh again it took about4",
    "start": "2372119",
    "end": "2377359"
  },
  {
    "text": "seconds that's uh pretty much it anybody have any questions about anything I covered or the",
    "start": "2377359",
    "end": "2383960"
  },
  {
    "text": "program yes go ahead um keys are typically entered",
    "start": "2384640",
    "end": "2393280"
  },
  {
    "text": "in um with a little like in example of windows with one of those little Windows applets and then when you click the",
    "start": "2393280",
    "end": "2399240"
  },
  {
    "text": "store Key it actually downloads the keying material into the card itself um but at the same time they",
    "start": "2399240",
    "end": "2406000"
  },
  {
    "text": "usually save a copy in the registry or something like that so uh it doesn't really help them a whole",
    "start": "2406000",
    "end": "2412119"
  },
  {
    "text": "lot yesen am I aware of any non-broken",
    "start": "2412119",
    "end": "2417880"
  },
  {
    "text": "40-bit key generators as far as I know there's just the one generator being used if uh people use different",
    "start": "2417880",
    "end": "2423200"
  },
  {
    "text": "generators then obviously uh unless they're using the same one it's not going in op so",
    "start": "2423200",
    "end": "2430119"
  },
  {
    "text": "um all of the commercial software I've seen uses the same gener generator um some of the drivers for Linux or other",
    "start": "2430119",
    "end": "2437680"
  },
  {
    "text": "systems uh may actually have a setting to specify which generator to use for",
    "start": "2437680",
    "end": "2442920"
  },
  {
    "text": "example the Linux one I use has uh an entry where you actually tell it which program to run so you could swap it out",
    "start": "2442920",
    "end": "2448880"
  },
  {
    "text": "with anything you want of course once you do that you're not going to be interoperate interoperating with anything else",
    "start": "2448880",
    "end": "2455560"
  },
  {
    "text": "so yes go ahead you what kind of card do I use for",
    "start": "2455560",
    "end": "2461000"
  },
  {
    "text": "packet capture um I'm currently using an SMC card it's a prism2 based um so uh",
    "start": "2461000",
    "end": "2468200"
  },
  {
    "text": "most of the software that you'll see on my website um there will be applicable to",
    "start": "2468200",
    "end": "2474040"
  },
  {
    "text": "that um Prism 2 is widely used in a lot of cards so you can pick up a lot of cards like dlink or there's some Cisco",
    "start": "2474040",
    "end": "2479839"
  },
  {
    "text": "cards that have Prism 2 U but of course it's not the only chipset out there yes go ahead",
    "start": "2479839",
    "end": "2488680"
  },
  {
    "text": "um are all base stations have do all base stations have 128 bit capabilities is what you're asking um to be honest I",
    "start": "2492000",
    "end": "2500160"
  },
  {
    "text": "haven't really played with a lot of the base stations I play mostly with the cards um so I couldn't really answer your question there",
    "start": "2500160",
    "end": "2508160"
  },
  {
    "text": "so the answer in the audience was not all of them have the 128bit",
    "start": "2520119",
    "end": "2525280"
  },
  {
    "text": "capabilities well I guess that's [Applause]",
    "start": "2529000",
    "end": "2539159"
  },
  {
    "text": "it",
    "start": "2546119",
    "end": "2549119"
  },
  {
    "text": "e",
    "start": "2576119",
    "end": "2579119"
  },
  {
    "text": "e",
    "start": "2606119",
    "end": "2609119"
  },
  {
    "text": "e",
    "start": "2636040",
    "end": "2639040"
  },
  {
    "text": "e",
    "start": "2666040",
    "end": "2669040"
  },
  {
    "text": "e e",
    "start": "2696040",
    "end": "2700040"
  }
]