[
  {
    "text": "[Music]",
    "start": "1390",
    "end": "7940"
  },
  {
    "text": "okay everyone uh thank you everyone for coming to this talk my name is Rex wall",
    "start": "7940",
    "end": "14120"
  },
  {
    "text": "and this is my co-speaker genuine Zhang you can read about us online we have a",
    "start": "14120",
    "end": "20340"
  },
  {
    "text": "lot of things to cover today so we're just going to Jump Right In",
    "start": "20340",
    "end": "25640"
  },
  {
    "text": "so imagine a sophisticated attacker compromise your Linux production",
    "start": "26039",
    "end": "32220"
  },
  {
    "text": "environment uh he launches a lock for Shell exploit and then executed a reverse shell back",
    "start": "32220",
    "end": "38460"
  },
  {
    "text": "to his machine then he discovered that the machine has",
    "start": "38460",
    "end": "43500"
  },
  {
    "text": "a vulnerable version of pseudo running on it so he elevated the privilege",
    "start": "43500",
    "end": "49460"
  },
  {
    "text": "and he tried to read the Etsy Shadow file to see if there's anything interesting to crack",
    "start": "51059",
    "end": "56660"
  },
  {
    "text": "then he also found out that he can move to another Machine by reading into the SSH processing environmental variable",
    "start": "57600",
    "end": "65719"
  },
  {
    "text": "so he happily moved to the second machine and as he is celebrating",
    "start": "65820",
    "end": "72540"
  },
  {
    "text": "he discovered that his assets was gone so he fired the RC again and this time",
    "start": "72540",
    "end": "78840"
  },
  {
    "text": "there's no luck quickly he find out his assets was blocked",
    "start": "78840",
    "end": "84320"
  },
  {
    "text": "so now let's take a look at the other side of the story as everything happens your security",
    "start": "84540",
    "end": "90360"
  },
  {
    "text": "engineer received a sequence of alerts from The Cutting Edge security monitoring software and these softwares",
    "start": "90360",
    "end": "98040"
  },
  {
    "text": "monitor the processing information and all the system calls happening on the machine so for example",
    "start": "98040",
    "end": "104540"
  },
  {
    "text": "when a reverse shell is executed there will be a connection call and there may be others depending on the technique",
    "start": "104540",
    "end": "112020"
  },
  {
    "text": "when the attacker tried to read the Etsy Shadow file they will be either open or open ad system call",
    "start": "112020",
    "end": "119100"
  },
  {
    "text": "now the question is how does how do you use this level of visibility to actually",
    "start": "119100",
    "end": "125880"
  },
  {
    "text": "perform a threat detection so we want to use a really really simple",
    "start": "125880",
    "end": "132840"
  },
  {
    "text": "detection rule to illustrate the idea so this rule is saying um I want to",
    "start": "132840",
    "end": "139200"
  },
  {
    "text": "detect untrusted program that's reading the Etsy Shadow file now let me explain the rule the rule is saying if the",
    "start": "139200",
    "end": "145560"
  },
  {
    "text": "system call is open or open at and it has re-permission",
    "start": "145560",
    "end": "150959"
  },
  {
    "text": "and the file name argument points to the SC Shadow file",
    "start": "150959",
    "end": "156540"
  },
  {
    "text": "and also the program is not in the allow list of programs then we'll fire the alert",
    "start": "156540",
    "end": "164160"
  },
  {
    "text": "so you can see that you can quickly build out really complicated rules with even multiple system calls you can even",
    "start": "164160",
    "end": "171120"
  },
  {
    "text": "build a machine learning algorithms on top of these visibility",
    "start": "171120",
    "end": "176160"
  },
  {
    "text": "but all these logic relies on the fact that the system called software is able",
    "start": "176160",
    "end": "181500"
  },
  {
    "text": "to extract the data correctly so in this talk we're going to dive",
    "start": "181500",
    "end": "187980"
  },
  {
    "text": "really deep into how system called tracing works and then we'll talk about the vulnerabilities in the system called",
    "start": "187980",
    "end": "194280"
  },
  {
    "text": "tracing software once we understand the vulnerability we'll talk about how to actually exploit these vulnerabilities",
    "start": "194280",
    "end": "199940"
  },
  {
    "text": "and then we'll conclude with mitigations and takeaways",
    "start": "199940",
    "end": "205099"
  },
  {
    "text": "thank you yeah thank you Rex um as last mentioned Cisco tradition is really important with",
    "start": "205220",
    "end": "211800"
  },
  {
    "text": "the text best so this diagram gives you an overview for Cisco tracing basically including",
    "start": "211800",
    "end": "217440"
  },
  {
    "text": "two parts one is the hopes for C4 interception and also the tracing program",
    "start": "217440",
    "end": "222480"
  },
  {
    "text": "so one application issue a system called into the kernel the assist or code pass is executed if any hooks plays in the",
    "start": "222480",
    "end": "229260"
  },
  {
    "text": "co-pass the attached tracing program will be triggered to collect seasonal information and send those data to the",
    "start": "229260",
    "end": "235739"
  },
  {
    "text": "monitor agent to detect threat the tracing program can be implemented and in kernel space as shown on the left",
    "start": "235739",
    "end": "243360"
  },
  {
    "text": "diagram or implemented as a user space program as part of the monitoring agent which is shown on the right diagram",
    "start": "243360",
    "end": "251720"
  },
  {
    "text": "so the program used to collect seasonal data like system arguments is called tracing program",
    "start": "251760",
    "end": "256919"
  },
  {
    "text": "this program can be attached to different hooks like Trace point k-pro or P Trace",
    "start": "256919",
    "end": "262440"
  },
  {
    "text": "we can directly use Linux native magnesis as a tracing program or you can Implement your own tracing program as",
    "start": "262440",
    "end": "269699"
  },
  {
    "text": "kernel module adbf Pro or use a Space Program the first kind of hooks for Cisco",
    "start": "269699",
    "end": "276780"
  },
  {
    "text": "interception is called Chase point it's a steady hook in the kernel for Cisco intersection this is Kernel",
    "start": "276780",
    "end": "283979"
  },
  {
    "text": "provides six enter and 6X Trace point if we attach the tracing program to the",
    "start": "283979",
    "end": "290100"
  },
  {
    "text": "address point the function call or traces enter and traces exit if you use the same parameters to trigger the",
    "start": "290100",
    "end": "296759"
  },
  {
    "text": "tracing program the first parameter is called Rex which same The Cisco arguments the second parameter is ID",
    "start": "296759",
    "end": "304320"
  },
  {
    "text": "which is the accessible number Trace Point provide low overhead but it's only provides static single",
    "start": "304320",
    "end": "310620"
  },
  {
    "text": "interception you can also use the dynamic hook like cable",
    "start": "310620",
    "end": "316860"
  },
  {
    "text": "using cable you can register the tracing program on almost any instructions in",
    "start": "316860",
    "end": "321900"
  },
  {
    "text": "the Cisco podcast when the instructions get excluded the tracing program will trigger",
    "start": "321900",
    "end": "328199"
  },
  {
    "text": "k-pro is a dynamic approach but compared to the choice point it's kind of slow and also you need to know exactly how",
    "start": "328199",
    "end": "335460"
  },
  {
    "text": "the data is stored in the memory and register in order to get the useful information like assistful arguments",
    "start": "335460",
    "end": "343160"
  },
  {
    "text": "future is provide a user space solution for Cisco tracing similar to the trace point is a steady",
    "start": "343199",
    "end": "349680"
  },
  {
    "text": "hook for Cisco enter and exit using p-trace you don't need to implement any kernel programs and as a",
    "start": "349680",
    "end": "357720"
  },
  {
    "text": "tracing program but only the user Space Program are needed compared to the previous two approach",
    "start": "357720",
    "end": "363539"
  },
  {
    "text": "key trace overheads of performance is higher for optimization you can combine with",
    "start": "363539",
    "end": "370380"
  },
  {
    "text": "the second and Cisco filtering for better performance you can also use the ldp load for",
    "start": "370380",
    "end": "377039"
  },
  {
    "text": "physical interception but this approach is easy to bypass if we use assembly code to issue system call",
    "start": "377039",
    "end": "384960"
  },
  {
    "text": "so many of you have probably heard about the cloud workload protection products this product usually provides Advanced",
    "start": "384960",
    "end": "391080"
  },
  {
    "text": "threat detection based ones for tracing there are different kinds of cloud workloads like virtual machine",
    "start": "391080",
    "end": "396900"
  },
  {
    "text": "containers on customer merge VMS service containers and others so for service",
    "start": "396900",
    "end": "402419"
  },
  {
    "text": "containers it's usually allocated and maintained by the cloud provider on demand so it usually have no access to",
    "start": "402419",
    "end": "409680"
  },
  {
    "text": "the host this table summarized how Cisco trading",
    "start": "409680",
    "end": "415680"
  },
  {
    "text": "techniques can be applied to different workloads in the cloud for virtual machine we have full access",
    "start": "415680",
    "end": "421740"
  },
  {
    "text": "3D host so we can use any kinds of the Hawks trading programs and for the tools you can use Sparkle",
    "start": "421740",
    "end": "428580"
  },
  {
    "text": "ebpf kernel module and fuckopedic we'll talk about this tour later",
    "start": "428580",
    "end": "433740"
  },
  {
    "text": "for containers on customer major VM so you can have the same options as the",
    "start": "433740",
    "end": "439020"
  },
  {
    "text": "virtual machine as long as they get enough capabilities for service containers as we mentioned",
    "start": "439020",
    "end": "445139"
  },
  {
    "text": "you have no ss3d host so we can only use the key Trace as talking point and implement the tracing",
    "start": "445139",
    "end": "452280"
  },
  {
    "text": "program in user space instead of using file called ebpf and kernel module we can only use the",
    "start": "452280",
    "end": "459000"
  },
  {
    "text": "fuckopedic Falco used the similar techniques to",
    "start": "459000",
    "end": "464819"
  },
  {
    "text": "trade system core it's open source project in cncf and it's widely used",
    "start": "464819",
    "end": "472139"
  },
  {
    "text": "so internal space is support kernel module and evapf pro using tracepoint",
    "start": "472139",
    "end": "478919"
  },
  {
    "text": "in user space speed is developed based on key Trace faculty kidding is dedicated for system",
    "start": "478919",
    "end": "485940"
  },
  {
    "text": "tracing of service workloads so we did not evaluate other security",
    "start": "485940",
    "end": "492000"
  },
  {
    "text": "monitor agents but we believe the popularity of Fargo represent an implementation that is widely accepted",
    "start": "492000",
    "end": "498720"
  },
  {
    "text": "by the community unfortunately this kind of imitation suffer for the total issue there is time",
    "start": "498720",
    "end": "506039"
  },
  {
    "text": "to check time use let's take the connect system core for example the second argument of Kinesis Encore is",
    "start": "506039",
    "end": "512940"
  },
  {
    "text": "a user pointer called user V address which pointing to the stock address in",
    "start": "512940",
    "end": "518520"
  },
  {
    "text": "user space during time will check the tracing program did reference this user space",
    "start": "518520",
    "end": "524039"
  },
  {
    "text": "pointer to get the socket address and during time we use the kernel did",
    "start": "524039",
    "end": "529080"
  },
  {
    "text": "reference the same used as space pointer to get the socket address again however between time or check and time",
    "start": "529080",
    "end": "536339"
  },
  {
    "text": "will use the memory from user space pointed by the user V address pointer is",
    "start": "536339",
    "end": "542399"
  },
  {
    "text": "vulnerable to be changed by this user space attacker so in this case the stock address can be different between timer",
    "start": "542399",
    "end": "548820"
  },
  {
    "text": "check and time use causing a total issue so let's dive into the connection call",
    "start": "548820",
    "end": "555420"
  },
  {
    "text": "which can help you understand the important issue for Cisco tracing when the application issue the connected",
    "start": "555420",
    "end": "562740"
  },
  {
    "text": "flow in the kernel so the Cisco Handler will check if any tracing program",
    "start": "562740",
    "end": "568140"
  },
  {
    "text": "attached to the static hook a system called enter like key Trace second Sixth and the trace point",
    "start": "568140",
    "end": "574620"
  },
  {
    "text": "if this is true the trading program will be triggered after that the Cisco Handler will look",
    "start": "574620",
    "end": "582180"
  },
  {
    "text": "up the accessible table and jump to the connection core to create a connection on a socket",
    "start": "582180",
    "end": "588480"
  },
  {
    "text": "before returning to our user space the Handler will again check if any trading program attached to the study Fork",
    "start": "588480",
    "end": "595740"
  },
  {
    "text": "assets or exit like e-trace 6X Tracy point and so on similarly if this is true the tracing",
    "start": "595740",
    "end": "603300"
  },
  {
    "text": "program will be called so as I mentioned earlier the second",
    "start": "603300",
    "end": "608820"
  },
  {
    "text": "argument of Kinesis and core is a user pointer pointing to the stock address in",
    "start": "608820",
    "end": "613920"
  },
  {
    "text": "user space this pointer is passed through the connect session call and assigned to different kernel variables",
    "start": "613920",
    "end": "619800"
  },
  {
    "text": "which is highlight in red the kernel called move address to Kernel",
    "start": "619800",
    "end": "625500"
  },
  {
    "text": "to make a copy of stock address from the user space to the kernel buffer",
    "start": "625500",
    "end": "631519"
  },
  {
    "text": "and then the kernel will call internal function six connect file to create a connection on a socket based on the",
    "start": "633000",
    "end": "639839"
  },
  {
    "text": "Kernel buffer and this is a time of use by Linux kernel for the connectors and core",
    "start": "639839",
    "end": "645420"
  },
  {
    "text": "arguments before the memory copy function the",
    "start": "645420",
    "end": "651000"
  },
  {
    "text": "kernel buffer is not created so",
    "start": "651000",
    "end": "655440"
  },
  {
    "text": "and call enter or to any places before the memory copy function using k-pro",
    "start": "666240",
    "end": "672720"
  },
  {
    "text": "the tracing programs need to de-reference the user pointer or read the user space memory directory to get",
    "start": "672720",
    "end": "679980"
  },
  {
    "text": "the stock address as we mentioned earlier the user memory is vulnerable to be changed by the",
    "start": "679980",
    "end": "685500"
  },
  {
    "text": "attacker from the user space after the memory copy function so uh the",
    "start": "685500",
    "end": "692880"
  },
  {
    "text": "kernel buffer is created with one copies of the stock address unfortunately the total issue may still",
    "start": "692880",
    "end": "698940"
  },
  {
    "text": "exist think about if we attach the tracing program to the study hook a system",
    "start": "698940",
    "end": "704100"
  },
  {
    "text": "called exit right 6X tracing point or P Trace the tracing program may still will it",
    "start": "704100",
    "end": "710459"
  },
  {
    "text": "reference the user pointer to get the socket address again the user memory is vulnerable for",
    "start": "710459",
    "end": "717060"
  },
  {
    "text": "the attacker from user space faculty use p-trace for Cisco Android",
    "start": "717060",
    "end": "723959"
  },
  {
    "text": "and exit but only use the",
    "start": "723959",
    "end": "727940"
  },
  {
    "text": "only used 6X Express point so hopefully you got some idea about the",
    "start": "738240",
    "end": "744600"
  },
  {
    "text": "total issue for system of tracing in the source code level next I'll head over to Rex talk about the variabilities",
    "start": "744600",
    "end": "752600"
  },
  {
    "text": "okay so um although the example that we use is uh on kernel 5.7 but this uh tactical",
    "start": "755760",
    "end": "763920"
  },
  {
    "text": "issue really exists since the day features and Trace point was introduced and we actually confirmed with the",
    "start": "763920",
    "end": "769680"
  },
  {
    "text": "kernel developers that this is the expected Behavior because these features",
    "start": "769680",
    "end": "775019"
  },
  {
    "text": "are really designed for performance and debugging initially and in terms of mitigation what they recommend is",
    "start": "775019",
    "end": "781860"
  },
  {
    "text": "um you know the software need to actually monitor the kernel memory for this kind of security purposes but it",
    "start": "781860",
    "end": "788459"
  },
  {
    "text": "sounds very simple it will become quickly very complicated when you actually implement it and we'll talk",
    "start": "788459",
    "end": "794519"
  },
  {
    "text": "about that when we talk about mitigations",
    "start": "794519",
    "end": "798199"
  },
  {
    "text": "so um basically we reported this issue to Falco and the main thing in their",
    "start": "800399",
    "end": "807720"
  },
  {
    "text": "software is that they have to talk to issue as this exit because they use the three-spoint SS exit and P dick also",
    "start": "807720",
    "end": "814620"
  },
  {
    "text": "used the P trees SSX so this will impact Falco version older",
    "start": "814620",
    "end": "819839"
  },
  {
    "text": "than 0.31.1 and if you're using the commercial version you probably want to",
    "start": "819839",
    "end": "825000"
  },
  {
    "text": "check what version is affected and uh we report this issue on December",
    "start": "825000",
    "end": "830279"
  },
  {
    "text": "and it's mitigated in March the mitigation that was deployed is they",
    "start": "830279",
    "end": "835860"
  },
  {
    "text": "will compare the for Trace point they will compare the center and this exit data and if there's any change that",
    "start": "835860",
    "end": "842399"
  },
  {
    "text": "potential will indicate a tampering attempt for ptake they also deploy the same",
    "start": "842399",
    "end": "848339"
  },
  {
    "text": "mitigation for p3s as a center and also features SS exit",
    "start": "848339",
    "end": "855620"
  },
  {
    "text": "now in terms of the what kind of system calls are actually being affected so we",
    "start": "856680",
    "end": "861839"
  },
  {
    "text": "analyze the important system calls in the open source Falco rules pretty much majority of them are impacted there are",
    "start": "861839",
    "end": "869160"
  },
  {
    "text": "two exceptions in this table one is the exactly system call the reason is that",
    "start": "869160",
    "end": "874740"
  },
  {
    "text": "when Falco trees exactly they actually go in and read the kernel data so they",
    "start": "874740",
    "end": "880260"
  },
  {
    "text": "didn't fully rely on the trace Point result uh the second one is the send to and",
    "start": "880260",
    "end": "885959"
  },
  {
    "text": "send message system call so later we'll talk about how to use the blocking condition to exploit uh the talk to",
    "start": "885959",
    "end": "893220"
  },
  {
    "text": "issue but in the send to and send message we didn't find a reliable way to",
    "start": "893220",
    "end": "898500"
  },
  {
    "text": "influence the blocking condition but also keep in mind that this two system costs are typically heavy to",
    "start": "898500",
    "end": "905639"
  },
  {
    "text": "Monitor and this limits their adoption",
    "start": "905639",
    "end": "911120"
  },
  {
    "text": "okay so I think the vulnerability hopefully everybody got a sense of what the vulnerability is now let's talk",
    "start": "912240",
    "end": "917639"
  },
  {
    "text": "about how to actually exploit the vulnerability so we don't want to acquire any",
    "start": "917639",
    "end": "923760"
  },
  {
    "text": "additional privilege and also we don't want to acquire any additional capabilities in the bypass",
    "start": "923760",
    "end": "930180"
  },
  {
    "text": "we need to have some level of control",
    "start": "930180",
    "end": "934399"
  },
  {
    "text": "we want the exploit to be 100 reliable because in this game if the attacker is",
    "start": "944899",
    "end": "951120"
  },
  {
    "text": "being detected once then the whole operation are potentially at risk",
    "start": "951120",
    "end": "956360"
  },
  {
    "text": "okay so this leads us to two exploitation strategies uh we will first",
    "start": "957620",
    "end": "963120"
  },
  {
    "text": "talk about exported strategy number one which is the research that we did in last year's Defcon",
    "start": "963120",
    "end": "968760"
  },
  {
    "text": "um from there you can sort of see",
    "start": "968760",
    "end": "972620"
  },
  {
    "text": "uh cross-core uh interrupt but in order to properly manage the",
    "start": "986639",
    "end": "993600"
  },
  {
    "text": "bypass using this delay everything has to be precisely synchronized we have to inject it at the precise timing and then",
    "start": "993600",
    "end": "999660"
  },
  {
    "text": "we have to synchronize all the data operations so this we we need to use a system called user4sd",
    "start": "999660",
    "end": "1006440"
  },
  {
    "text": "and there are some limitations of using this citizen call number one is",
    "start": "1006440",
    "end": "1013279"
  },
  {
    "text": "if you are using Docker containers and you enable the default icon profile then",
    "start": "1013279",
    "end": "1019399"
  },
  {
    "text": "the second profile will actually block the system call so this wouldn't work in the container",
    "start": "1019399",
    "end": "1025220"
  },
  {
    "text": "uh the other limitation is that most of the cloud workloads are not uh",
    "start": "1025220",
    "end": "1032058"
  },
  {
    "text": "does not use user 5D so the usage of this system call indicates something abnormal",
    "start": "1032059",
    "end": "1038120"
  },
  {
    "text": "and this is actually the mitigation deploy by Falco last year so they detect the usage of user 5D system called",
    "start": "1038120",
    "end": "1046760"
  },
  {
    "text": "okay so last year we went back and we think you know how do we how do we overcome this limitation what if what if",
    "start": "1046760",
    "end": "1053360"
  },
  {
    "text": "we don't need user for fds on Call",
    "start": "1053360",
    "end": "1057100"
  },
  {
    "text": "um now in order to do that it basically means we cannot precisely synchronize uh",
    "start": "1058700",
    "end": "1065059"
  },
  {
    "text": "when we inject but what if we can inject a really really long delay",
    "start": "1065059",
    "end": "1071179"
  },
  {
    "text": "then we don't need to worry about synchronization at all right the idea sounds really simple but",
    "start": "1071179",
    "end": "1076820"
  },
  {
    "text": "the question is how how do we actually do this",
    "start": "1076820",
    "end": "1081880"
  },
  {
    "text": "so we actually found out two ways to achieve this uh the first way to achieve",
    "start": "1083660",
    "end": "1088880"
  },
  {
    "text": "this is using the blocking condition now I'll talk more about blocking",
    "start": "1088880",
    "end": "1094580"
  },
  {
    "text": "condition the second way to do this is to use the second to actually delay the",
    "start": "1094580",
    "end": "1099799"
  },
  {
    "text": "system called execution um so what do we mean by System called",
    "start": "1099799",
    "end": "1104960"
  },
  {
    "text": "getting block now if you think about the fundamental kind of system call it's essentially the",
    "start": "1104960",
    "end": "1110960"
  },
  {
    "text": "kernel interacting with some resources on behalf of the user Space Program",
    "start": "1110960",
    "end": "1116179"
  },
  {
    "text": "now many of these resources are i o devices and it takes time for them to respond",
    "start": "1116179",
    "end": "1123140"
  },
  {
    "text": "before the kernel returned the results to the user space",
    "start": "1123140",
    "end": "1128140"
  },
  {
    "text": "so to be more concrete let's look at Connexus and call so in this in this diagram there are two",
    "start": "1128780",
    "end": "1136419"
  },
  {
    "text": "machines there's a client machine there's a server machine and on the client machine it's monitored",
    "start": "1136419",
    "end": "1143900"
  },
  {
    "text": "by the system called monitoring software and let's say there's an application the",
    "start": "1143900",
    "end": "1148940"
  },
  {
    "text": "application triggers a connection call what happens in the normal scenario is",
    "start": "1148940",
    "end": "1154580"
  },
  {
    "text": "that the networking stack will send us impacted to the server and then server will respond the same",
    "start": "1154580",
    "end": "1159740"
  },
  {
    "text": "back packet and then client respond with the ACT packet and then your sys card will hit the",
    "start": "1159740",
    "end": "1165140"
  },
  {
    "text": "return path a trace Point features will read the argument and then this is called will exit",
    "start": "1165140",
    "end": "1172400"
  },
  {
    "text": "right so now you may be wondering this is just computer networking 101 what can go wrong here",
    "start": "1172400",
    "end": "1179620"
  },
  {
    "text": "now imagine the following scenario many times when attacker compromise a",
    "start": "1180380",
    "end": "1186280"
  },
  {
    "text": "environment they will try to connect to their command and control server which means they control the server as well",
    "start": "1186280",
    "end": "1193880"
  },
  {
    "text": "so imagine the scenario we have a client and the server now on the client side the attacker first create a system",
    "start": "1193880",
    "end": "1200960"
  },
  {
    "text": "called thread the system call thread will create an override thread",
    "start": "1200960",
    "end": "1207080"
  },
  {
    "text": "and then the system customer will call the system called connect when it called the assistant call it",
    "start": "1207080",
    "end": "1213080"
  },
  {
    "text": "will use a user space memory that contains the malicious IP address",
    "start": "1213080",
    "end": "1219320"
  },
  {
    "text": "and when this happens the kernel will send the same packet to the server",
    "start": "1219320",
    "end": "1224740"
  },
  {
    "text": "now what if the server dropped the packet so the client will retry",
    "start": "1224840",
    "end": "1231860"
  },
  {
    "text": "what if the server dropped the packet again then the client will retry again",
    "start": "1231860",
    "end": "1237620"
  },
  {
    "text": "but every time the client retry this uh the num the amount of delay is",
    "start": "1237620",
    "end": "1243260"
  },
  {
    "text": "controlled by the TCP congestion algorithm so it's roughly you know think about it more or less exponential delay",
    "start": "1243260",
    "end": "1250580"
  },
  {
    "text": "now with that amount of delay the override threat has enough time to override the user space memory with a",
    "start": "1250580",
    "end": "1257480"
  },
  {
    "text": "benign IP address and then it has enough time to propagate all the memory copies so when the server",
    "start": "1257480",
    "end": "1266600"
  },
  {
    "text": "sends the same packet and then client return the ACT packet when they hit the Sysco return path the trace point and",
    "start": "1266600",
    "end": "1273320"
  },
  {
    "text": "the p3s will happily read the bin iip address",
    "start": "1273320",
    "end": "1277960"
  },
  {
    "text": "so we're going to show you a demo on the scenario",
    "start": "1278720",
    "end": "1284380"
  },
  {
    "text": "foreign okay so in this demo there are two machines just as what we Illustrated in",
    "start": "1288200",
    "end": "1294080"
  },
  {
    "text": "the diagram so right now what you're seeing is a server machine now you can see the server machine has IP address ending",
    "start": "1294080",
    "end": "1300679"
  },
  {
    "text": "with 176.",
    "start": "1300679",
    "end": "1303860"
  },
  {
    "text": "okay and then on the server we start up this program that's going to look at the same packet and drop the same packet and",
    "start": "1306860",
    "end": "1312500"
  },
  {
    "text": "then we also start a listening server on the server side on the client side we're going to run",
    "start": "1312500",
    "end": "1318020"
  },
  {
    "text": "Falco and we also use Wireshark to see what's actually running on The Wire",
    "start": "1318020",
    "end": "1325039"
  },
  {
    "text": "and now we run this attack program that is going to try to connect to the server",
    "start": "1325039",
    "end": "1332019"
  },
  {
    "text": "so you see it's connected now it's trying to send some dummy chat okay so client got the message sorry",
    "start": "1332960",
    "end": "1340280"
  },
  {
    "text": "server got the message",
    "start": "1340280",
    "end": "1343240"
  },
  {
    "text": "but now if you look at the result reported by Falco you can see",
    "start": "1347659",
    "end": "1353360"
  },
  {
    "text": "that it's actually saying our client is talking to IP address 1.1.1.1 that indicates a successful bypass",
    "start": "1353360",
    "end": "1361480"
  },
  {
    "text": "but now if you look at what's actually happening on the wire you'll see that the first two SIM package got dropped",
    "start": "1361700",
    "end": "1368000"
  },
  {
    "text": "and then it says that you know we're actually talking to IP address ending with 176.",
    "start": "1368000",
    "end": "1375100"
  },
  {
    "text": "so the previous demo is for the ebpf and the kernel module version of the Falco",
    "start": "1382460",
    "end": "1388039"
  },
  {
    "text": "which use the trace point now we're going to show you how we do the same bypass for p dick on AWS far gate",
    "start": "1388039",
    "end": "1397000"
  },
  {
    "text": "okay so what you're seeing here is again the server machine uh the IP address is ending with 163",
    "start": "1397640",
    "end": "1403700"
  },
  {
    "text": "we're going to run the the Sim packet drop program",
    "start": "1403700",
    "end": "1409179"
  },
  {
    "text": "and we're going to fire the TCP listening server now this isn't a far game machine",
    "start": "1417500",
    "end": "1423860"
  },
  {
    "text": "so pdig will launch our attacker program so it's the same program that try to",
    "start": "1423860",
    "end": "1430100"
  },
  {
    "text": "connect to the server and you can see that the IP address reported by pdig is again 1.1.1.1 which indicates a",
    "start": "1430100",
    "end": "1436940"
  },
  {
    "text": "successful bypass",
    "start": "1436940",
    "end": "1439720"
  },
  {
    "text": "okay now you may be wondering okay this is for connect system call does it actually work for other system call as",
    "start": "1458659",
    "end": "1464299"
  },
  {
    "text": "well so we actually discovered that the entire class of file system calls are",
    "start": "1464299",
    "end": "1470000"
  },
  {
    "text": "also affected um and some other system calls that relies on file system will also be",
    "start": "1470000",
    "end": "1476240"
  },
  {
    "text": "effective for example with the exact V and the exactly at the reason is that when you execute a binary first it's",
    "start": "1476240",
    "end": "1483740"
  },
  {
    "text": "going to the disk to actually fetch the binary and therefore they're also affected",
    "start": "1483740",
    "end": "1490700"
  },
  {
    "text": "next you know we'll talk about how we exploit the file system costs",
    "start": "1490700",
    "end": "1497740"
  },
  {
    "text": "so uh before I talk about how to bypass open S is for Tracy let me introduce Fields so Fields stand for user space",
    "start": "1497799",
    "end": "1505220"
  },
  {
    "text": "fire system framework it usually including a kernel module a user library and also a multi utility",
    "start": "1505220",
    "end": "1512000"
  },
  {
    "text": "so in Cloud scenario the fields is often often used as a remote storage fields so",
    "start": "1512000",
    "end": "1517520"
  },
  {
    "text": "using such Fields you can mount the remote stored objects as local file system and access the remote file as",
    "start": "1517520",
    "end": "1524720"
  },
  {
    "text": "local file since it's the user space version so it provides faster involvement or",
    "start": "1524720",
    "end": "1530419"
  },
  {
    "text": "development and it usually do not Penny the kernel so here is the list of examples for the",
    "start": "1530419",
    "end": "1537679"
  },
  {
    "text": "remote storage Fields so you can see it's very popular it's widely used from the list you can see the um the",
    "start": "1537679",
    "end": "1545480"
  },
  {
    "text": "major cloud provider has their own fields this is the general architecture for",
    "start": "1545480",
    "end": "1551179"
  },
  {
    "text": "remote storage views so if the user space application or container wants to",
    "start": "1551179",
    "end": "1556400"
  },
  {
    "text": "open a remote file what it does is the same as opening a local file",
    "start": "1556400",
    "end": "1561500"
  },
  {
    "text": "basically it will issue the open or open SSM call into the kernel when the requests reached the VFS layer",
    "start": "1561500",
    "end": "1568820"
  },
  {
    "text": "a little bit round to the fields kernel driver and then Judy uses the base fire system like GCS fuse",
    "start": "1568820",
    "end": "1576320"
  },
  {
    "text": "the demon will send the request to the remote storage once the response is back from the",
    "start": "1576320",
    "end": "1582200"
  },
  {
    "text": "server the it will be allowed that to the user space application through the",
    "start": "1582200",
    "end": "1587299"
  },
  {
    "text": "original path one thing I need to mention is the delay between the client and server is much",
    "start": "1587299",
    "end": "1594919"
  },
  {
    "text": "longer than the Cisco delay itself basically you can leverage this long delay to bypass the Open Access and call",
    "start": "1594919",
    "end": "1603260"
  },
  {
    "text": "so let me show how it works so we have a malicious cry that is monitored by the",
    "start": "1603260",
    "end": "1609380"
  },
  {
    "text": "tracing program The Cisco threat is trying to open the remote file called malicious file",
    "start": "1609380",
    "end": "1616039"
  },
  {
    "text": "basically it will issue an open Assistant call into the kernel with the past name when you do the malicious file",
    "start": "1616039",
    "end": "1622159"
  },
  {
    "text": "name in user space since the file is stored remotely so the",
    "start": "1622159",
    "end": "1628100"
  },
  {
    "text": "open request will be round from the kernel to the user space and then to the remote storage",
    "start": "1628100",
    "end": "1634400"
  },
  {
    "text": "before the response response is back the override thread can jump in and trying",
    "start": "1634400",
    "end": "1640400"
  },
  {
    "text": "to override the user memory pointed by the past named from Malaysia's fine name",
    "start": "1640400",
    "end": "1646100"
  },
  {
    "text": "to ub95 name and again because the delay is so long the CPU have enough time to propagate a",
    "start": "1646100",
    "end": "1652640"
  },
  {
    "text": "change to all the copies of CP uh register and memories",
    "start": "1652640",
    "end": "1658940"
  },
  {
    "text": "after the responsibility is back and before it returned to the use space the",
    "start": "1658940",
    "end": "1664100"
  },
  {
    "text": "tracing program can leverage the sixth exit Trace point to read The Cisco arguments",
    "start": "1664100",
    "end": "1669620"
  },
  {
    "text": "for example last name unfortunately the person has changed from the malicious file to the b95",
    "start": "1669620",
    "end": "1676220"
  },
  {
    "text": "which means our bypass will be succeed right now let me show you a demo",
    "start": "1676220",
    "end": "1684278"
  },
  {
    "text": "so we have the console on the left side for Google Cloud Storage bucket",
    "start": "1691279",
    "end": "1696559"
  },
  {
    "text": "and we deployed the Fargo in gke cluster",
    "start": "1696559",
    "end": "1701260"
  },
  {
    "text": "and we log into one of the part",
    "start": "1702260",
    "end": "1705700"
  },
  {
    "text": "then we checked the process inside the container so we have the Fargo agent running",
    "start": "1707299",
    "end": "1712340"
  },
  {
    "text": "and also we have GCS fields around the end which amount of Google Cloud Storage bucket as a local folder MNT",
    "start": "1712340",
    "end": "1720440"
  },
  {
    "text": "and then we check the log for Falco so we have one event generated because we",
    "start": "1720440",
    "end": "1726140"
  },
  {
    "text": "just log into the port so right now the nnd folder is empty",
    "start": "1726140",
    "end": "1733700"
  },
  {
    "text": "which means the remote storage is empty",
    "start": "1733700",
    "end": "1737919"
  },
  {
    "text": "and then we're trying to open the file called malicious file in the entity folder",
    "start": "1740600",
    "end": "1747700"
  },
  {
    "text": "and then you check the end the local folder so the manuscript file is created in remote storage",
    "start": "1756500",
    "end": "1764380"
  },
  {
    "text": "and then we try to lock from Falco so we have a event generated because if you're",
    "start": "1766039",
    "end": "1771740"
  },
  {
    "text": "trying to open a malicious file on the entity folder",
    "start": "1771740",
    "end": "1777278"
  },
  {
    "text": "and let me remove this malicious fire so it will remove it from the remote",
    "start": "1780440",
    "end": "1785480"
  },
  {
    "text": "storage and then we run attack",
    "start": "1785480",
    "end": "1792279"
  },
  {
    "text": "we check the folder so the malicious file is created by the attack code",
    "start": "1796220",
    "end": "1801260"
  },
  {
    "text": "for the remote storage bucket and we check the effect of lock",
    "start": "1801260",
    "end": "1807200"
  },
  {
    "text": "so there are no new event generated which means our attacks the seat next I will hand over to Rex to talk",
    "start": "1807200",
    "end": "1813440"
  },
  {
    "text": "about the uh if more Express and also conclude you've got three",
    "start": "1813440",
    "end": "1820419"
  },
  {
    "text": "okay so now we're going to talk about how to bypass the center tracing",
    "start": "1824840",
    "end": "1831080"
  },
  {
    "text": "um so if you remember earlier in the diagram when the system call executes it hits P trees and then hit second",
    "start": "1831080",
    "end": "1839000"
  },
  {
    "text": "you know and a bunch of other stuff is eventually it's going to the system call actually going to dereference the user",
    "start": "1839000",
    "end": "1844820"
  },
  {
    "text": "space memory so now the question is can we use second to actually delay the uh",
    "start": "1844820",
    "end": "1850640"
  },
  {
    "text": "the execution and therefore bypass the features as a center",
    "start": "1850640",
    "end": "1855520"
  },
  {
    "text": "uh before I dive into the detail just a really quick recap on what that comp is",
    "start": "1855679",
    "end": "1861740"
  },
  {
    "text": "so it is a kernel level mechanism that allows developer to specify",
    "start": "1861740",
    "end": "1867320"
  },
  {
    "text": "um you know allow or block system calls and you can even allow and block based on system called arguments",
    "start": "1867320",
    "end": "1873860"
  },
  {
    "text": "you can build a Sandbox on top of this mechanism and these rules can quickly",
    "start": "1873860",
    "end": "1879860"
  },
  {
    "text": "become really complicated and it will take more time to compute",
    "start": "1879860",
    "end": "1885020"
  },
  {
    "text": "one last caveat I want to highlight is the um first inserted ruins.com are actually",
    "start": "1885020",
    "end": "1892279"
  },
  {
    "text": "evaluated the last assume you wouldn't understand why this matters",
    "start": "1892279",
    "end": "1899260"
  },
  {
    "text": "okay so the bypass idea is very very simple um if you understand the previous attack",
    "start": "1900080",
    "end": "1906200"
  },
  {
    "text": "so you know in this diagram we have everything is running on the same machine there's a system call thread",
    "start": "1906200",
    "end": "1912620"
  },
  {
    "text": "that is going to first insert a bunch of second rules just like a regular application",
    "start": "1912620",
    "end": "1919399"
  },
  {
    "text": "and then it's going to create the override thread then it's going to call the system called create",
    "start": "1919399",
    "end": "1927380"
  },
  {
    "text": "then as you call the system call is passing in an argument that points to user space memory that points to that",
    "start": "1927679",
    "end": "1935299"
  },
  {
    "text": "that contains a b95 now Petri is happily read the benign file argument and then the second check",
    "start": "1935299",
    "end": "1943520"
  },
  {
    "text": "kick in right you know at the same time the authorized thread will override the",
    "start": "1943520",
    "end": "1948740"
  },
  {
    "text": "assistant car argument with the malicious file so finally after the second finish all",
    "start": "1948740",
    "end": "1954860"
  },
  {
    "text": "the computation then the kernel is actually going to reference the argument and then it's going to create the",
    "start": "1954860",
    "end": "1960140"
  },
  {
    "text": "malicious file for us so one one interesting caveat I want to",
    "start": "1960140",
    "end": "1967700"
  },
  {
    "text": "mention is um what we talk about is pictures in",
    "start": "1967700",
    "end": "1972980"
  },
  {
    "text": "playing mode now you can also use P trees plus second redirect",
    "start": "1972980",
    "end": "1978799"
  },
  {
    "text": "what that means is you can use P trees to set up a rule in the monitor program",
    "start": "1978799",
    "end": "1984440"
  },
  {
    "text": "uh whenever you hit the second group the rule will say redirect execution back to the Tracer",
    "start": "1984440",
    "end": "1990740"
  },
  {
    "text": "now in this case if the Tracer start the application that means the Tracer let's",
    "start": "1990740",
    "end": "1997220"
  },
  {
    "text": "say the application runs the first person call the Tracer will say let me insert the second rule and this will be the first rule being inserted so if this",
    "start": "1997220",
    "end": "2005019"
  },
  {
    "text": "is the case then later no matter how many second rules the application inserts it's not going to impact the",
    "start": "2005019",
    "end": "2010600"
  },
  {
    "text": "talk to window and therefore this will not be vulnerable but it will not be the case if the trees",
    "start": "2010600",
    "end": "2017679"
  },
  {
    "text": "are attached to a running application because there's no control whether the application has already insert a computer or not",
    "start": "2017679",
    "end": "2025260"
  },
  {
    "text": "okay so um we have cover different type of attack at different uh part of the system call",
    "start": "2026740",
    "end": "2033640"
  },
  {
    "text": "we just want to quickly summarize so we talk about features as a center in order to mitigate this issue",
    "start": "2033640",
    "end": "2042159"
  },
  {
    "text": "one we need to use pcom plus.com redirect and make sure it's actually starting the",
    "start": "2042159",
    "end": "2048339"
  },
  {
    "text": "application if the actually if the application already started then you may want to inspect the second filter to see if",
    "start": "2048339",
    "end": "2055960"
  },
  {
    "text": "there's anything abnormal in the second filters for trees Point as the center",
    "start": "2055960",
    "end": "2062138"
  },
  {
    "text": "although the tactile issue exists but we didn't find any reliable way to export it so you may be able to explode it but",
    "start": "2062139",
    "end": "2069460"
  },
  {
    "text": "it's a probabilistic now for Trace Point access exit it's",
    "start": "2069460",
    "end": "2074980"
  },
  {
    "text": "vulnerable to the blocking condition attack that we talk about here and also what we did in Defcon 29.",
    "start": "2074980",
    "end": "2082480"
  },
  {
    "text": "so in order to mitigate this one-way you know to do this is to compare the system",
    "start": "2082480",
    "end": "2089560"
  },
  {
    "text": "called enter and also system called exit arguments and to make sure nothing got changed",
    "start": "2089560",
    "end": "2096760"
  },
  {
    "text": "for p trees uh SSX it's vulnerable to the same attack",
    "start": "2096760",
    "end": "2102640"
  },
  {
    "text": "in order to mitigate this uh Trace location one we need to deploy all the",
    "start": "2102640",
    "end": "2108520"
  },
  {
    "text": "mitigations for petri's asset Center and then compare the center analysis exit",
    "start": "2108520",
    "end": "2114099"
  },
  {
    "text": "arguments to make sure nothing um you know is changed",
    "start": "2114099",
    "end": "2119400"
  },
  {
    "text": "um the last one we didn't talk a lot about in this uh talk it's the k-probe who came to Kernel internal functions",
    "start": "2119500",
    "end": "2126940"
  },
  {
    "text": "whether this can be exploited really depends on which function is being hooked",
    "start": "2126940",
    "end": "2132940"
  },
  {
    "text": "so in general what we in for system call",
    "start": "2132940",
    "end": "2138700"
  },
  {
    "text": "monitoring uh what we see is depends on the number of Kernel versions",
    "start": "2138700",
    "end": "2145540"
  },
  {
    "text": "that you want to support you can choose RSM Linux security module interfaces so",
    "start": "2145540",
    "end": "2151240"
  },
  {
    "text": "that will cover certain amount of system costs but the support across different",
    "start": "2151240",
    "end": "2157000"
  },
  {
    "text": "kernel versions is different on some neural kernel you can use even use a BPF or RSM",
    "start": "2157000",
    "end": "2163480"
  },
  {
    "text": "but if you have to support a wide range of Kernel and RSM",
    "start": "2163480",
    "end": "2169180"
  },
  {
    "text": "in some version doesn't have the system called interfaces that you wanted then you may need to look into other",
    "start": "2169180",
    "end": "2175000"
  },
  {
    "text": "interfaces and then you quickly get into tracking different kernel versions and make sure",
    "start": "2175000",
    "end": "2180520"
  },
  {
    "text": "all these interfaces exist in the kernel",
    "start": "2180520",
    "end": "2185339"
  },
  {
    "text": "okay so um to conclude um so first let's zoom into this",
    "start": "2186400",
    "end": "2193480"
  },
  {
    "text": "research which is we demonstrated that Linux kernel tracing can be bypassed reliably in many different ways at",
    "start": "2193480",
    "end": "2200619"
  },
  {
    "text": "different asset Center and sus access so if you happen to deploy a similar",
    "start": "2200619",
    "end": "2206980"
  },
  {
    "text": "tool you may want to check if your tool is actually secure against this type of",
    "start": "2206980",
    "end": "2212500"
  },
  {
    "text": "attack because we only evaluated the open source solution the second thing is the mitigations are",
    "start": "2212500",
    "end": "2219700"
  },
  {
    "text": "very complicated depends on how many kernel versions are being supported by the tool so you will also want to check",
    "start": "2219700",
    "end": "2225400"
  },
  {
    "text": "the mitigation claims by the tool to make sure they're actually mitigated in the way that you intended to be",
    "start": "2225400",
    "end": "2233560"
  },
  {
    "text": "now if I you know if we zoom out from this particular issue if we think about",
    "start": "2233560",
    "end": "2238599"
  },
  {
    "text": "the bigger picture now today we propose some fundamental bypass right that doesn't mean in the",
    "start": "2238599",
    "end": "2244540"
  },
  {
    "text": "future there wouldn't be newer bypass against this type of tracing technology",
    "start": "2244540",
    "end": "2250000"
  },
  {
    "text": "so I think for the security teams um we recommend that you have a",
    "start": "2250000",
    "end": "2255280"
  },
  {
    "text": "comprehensive visibility into the environment because if I need to bypass all the different data sources that",
    "start": "2255280",
    "end": "2260920"
  },
  {
    "text": "exponentially increase my bypass difficulty the last but not least this is something",
    "start": "2260920",
    "end": "2268000"
  },
  {
    "text": "that we do a lot at least work which is",
    "start": "2268000",
    "end": "2273040"
  },
  {
    "text": "um we think about what is normal in the environment we Baseline the environment",
    "start": "2273040",
    "end": "2278079"
  },
  {
    "text": "because if you know what is intended to be in your environment then even if the attacker is able to change these values",
    "start": "2278079",
    "end": "2285640"
  },
  {
    "text": "they have to select the right value to choose otherwise they will trigger a certain type of detection",
    "start": "2285640",
    "end": "2293460"
  },
  {
    "text": "now with that we are ready for Q a",
    "start": "2293740",
    "end": "2298740"
  },
  {
    "text": "[Music]",
    "start": "2298920",
    "end": "2302038"
  },
  {
    "text": "thank you [Music]",
    "start": "2304500",
    "end": "2308979"
  }
]