[
  {
    "text": "um thanks for coming my name is gundyr caldwind and this is matteo zuck we would like to present the",
    "start": "240",
    "end": "7520"
  },
  {
    "text": "well boxbone research which actually got us a pony award yesterday really cool",
    "start": "7520",
    "end": "13840"
  },
  {
    "text": "so uh well at first i would like to say i'm sorry but we have a lot of slides and i'm not",
    "start": "15360",
    "end": "21359"
  },
  {
    "text": "going to go through all of them they will be made public so the pieces we skip with us are basically",
    "start": "21359",
    "end": "26480"
  },
  {
    "text": "basics of instrumentation they will be available later for you to check out but what are we",
    "start": "26480",
    "end": "31760"
  },
  {
    "text": "going to talk today we are going to actually start with um with the end we are going to start with a demo",
    "start": "31760",
    "end": "38079"
  },
  {
    "text": "of one of the bugs that we found during this research and actually show that what can it be used",
    "start": "38079",
    "end": "43680"
  },
  {
    "text": "for and then we are going to go um about kernel instrumentation system-wide",
    "start": "43680",
    "end": "49840"
  },
  {
    "text": "instrumentation and present our results and how we approach instrumenting windows linux and freebsd",
    "start": "49840",
    "end": "57680"
  },
  {
    "text": "there are also some slides about about open bsd but it's still working progress so we are not going to talk about it",
    "start": "57680",
    "end": "62960"
  },
  {
    "text": "when we are going to talk about um potentially about hyper pound project",
    "start": "62960",
    "end": "68080"
  },
  {
    "text": "and about our and i will give you a sneak peek on boxbone amson which is basically an",
    "start": "68080",
    "end": "74560"
  },
  {
    "text": "extension to boxbone which we are going to probably talk about later this year and which already has some results",
    "start": "74560",
    "end": "82798"
  },
  {
    "text": "so let's start with the move hey okay so the demo is live i hope it",
    "start": "83439",
    "end": "91119"
  },
  {
    "text": "works we have a windows 7 32-bit virtual machine here which is which has the latest patches",
    "start": "91119",
    "end": "98640"
  },
  {
    "text": "until january this year so it doesn't have the february ones in which the vulnerability that i'm going",
    "start": "98640",
    "end": "104320"
  },
  {
    "text": "to show here was patched so we log in as the guest user",
    "start": "104320",
    "end": "109360"
  },
  {
    "text": "and we basically have the exploit here on desktop so we just oh we just run it",
    "start": "109360",
    "end": "115840"
  },
  {
    "text": "uh i guess i have to make the phone a little bigger",
    "start": "115840",
    "end": "121118"
  },
  {
    "text": "okay you should see it now um so what happens here is that it's uh we perform some basic pre-initialization",
    "start": "121600",
    "end": "127520"
  },
  {
    "text": "to find the symbols in kernel that we need to exploit this and then we spray the user out of space",
    "start": "127520",
    "end": "133840"
  },
  {
    "text": "run some program and basically when i click enter there is the exploitation of a race",
    "start": "133840",
    "end": "140239"
  },
  {
    "text": "condition that we detected using box pawn we had like 10 000 iterations to make sure that the race condition is actually",
    "start": "140239",
    "end": "146480"
  },
  {
    "text": "uh that would win the race condition and then after this uh i hope we won the",
    "start": "146480",
    "end": "152640"
  },
  {
    "text": "race uh during one of those raid races and it turns out that we actually did so we have root",
    "start": "152640",
    "end": "160720"
  },
  {
    "text": "or anti-authority system on the on the machine we can also check this out",
    "start": "160720",
    "end": "165920"
  },
  {
    "text": "using process explorer i think",
    "start": "165920",
    "end": "173120"
  },
  {
    "text": "um just a second yeah so you can see that the process was elevated to",
    "start": "178000",
    "end": "183200"
  },
  {
    "text": "anti-authority system and that's it that's a previous escalation vulnerability for windows 732-bit found",
    "start": "183200",
    "end": "188800"
  },
  {
    "text": "by boxbone",
    "start": "188800",
    "end": "191440"
  },
  {
    "text": "okay so probably some of you are asking like what happened and we are going to explain the back and we are not going to",
    "start": "196480",
    "end": "203040"
  },
  {
    "text": "talk how it was exploited uh it's in our paper that we released some time ago",
    "start": "203040",
    "end": "209360"
  },
  {
    "text": "but first let's start about let's talk about instrumentation how how did we find this back in the first place",
    "start": "209440",
    "end": "215519"
  },
  {
    "text": "and all the other like 37 bucks we found during this research so well you probably all know what",
    "start": "215519",
    "end": "222480"
  },
  {
    "text": "instrumentation is basically you run a program or run anything run some code and it has a set of states",
    "start": "222480",
    "end": "228959"
  },
  {
    "text": "and you pick you cherry pick some of the states and examine them monitor them maybe",
    "start": "228959",
    "end": "234159"
  },
  {
    "text": "change them a little maybe like compare two different states and thanks to that you get some",
    "start": "234159",
    "end": "240480"
  },
  {
    "text": "information which you can reason on what exactly you are reasoning on we are going to talk later so i'm i said i'm",
    "start": "240480",
    "end": "246720"
  },
  {
    "text": "going to skip the basic of user mode instrumentation and get to the point to actually um",
    "start": "246720",
    "end": "253360"
  },
  {
    "text": "kernel mode instrumentation system wide instrumentation which we focused on on this project",
    "start": "253360",
    "end": "258400"
  },
  {
    "text": "so our initial assumptions were that we wanted more to instrument modern operating systems",
    "start": "258400",
    "end": "263680"
  },
  {
    "text": "that is windows that is linux based systems freebsd perhaps and other bsds",
    "start": "263680",
    "end": "269199"
  },
  {
    "text": "maybe even osx um and we will do this for modern operating",
    "start": "269199",
    "end": "274400"
  },
  {
    "text": "platforms which are modern desktop platforms which are x86 and x864",
    "start": "274400",
    "end": "280720"
  },
  {
    "text": "ideally we wanted to instrument per instruction if possible maybe per event per other event like uh per memory",
    "start": "280720",
    "end": "286720"
  },
  {
    "text": "access and uh actually well it turned out that it worked um so how do we instrument well",
    "start": "286720",
    "end": "294320"
  },
  {
    "text": "there are several options we discussed um the thing you see here is actually box the box is an open source",
    "start": "294320",
    "end": "300800"
  },
  {
    "text": "um computer system emulator so it emulates both x86 cpu and also emulates the hardware",
    "start": "300800",
    "end": "306720"
  },
  {
    "text": "and as you can see it actually can run windows and starcraft 1 but it has a little some problems with",
    "start": "306720",
    "end": "312000"
  },
  {
    "text": "with vga color palette but that's what's actually not a problem for us it",
    "start": "312000",
    "end": "317199"
  },
  {
    "text": "works so box is awesome because it has all the cpu logic implemented in it",
    "start": "317199",
    "end": "323600"
  },
  {
    "text": "that means that if we wish to change how one instruction works we can do it if we wish to monitor",
    "start": "323600",
    "end": "329360"
  },
  {
    "text": "access to linear linear memory no problem so that's great we have 100 percent",
    "start": "329360",
    "end": "335120"
  },
  {
    "text": "control of all the computer system everything that's going on in the computer system it's really easy to develop",
    "start": "335120",
    "end": "340720"
  },
  {
    "text": "instrumentation for box it has a an api and it's pretty easy to debug because in the end box is a user mode application",
    "start": "340720",
    "end": "348080"
  },
  {
    "text": "so you just attach your favorite debuggers or lan the background you can debug it however it's extremely painfully slow as",
    "start": "348080",
    "end": "355120"
  },
  {
    "text": "in how slow i'm going to talk about later and it's limited to virtual hardware so it has",
    "start": "355120",
    "end": "360479"
  },
  {
    "text": "some emulation for like old hardware and that's it so there is no chance of testing modern",
    "start": "360479",
    "end": "367120"
  },
  {
    "text": "motherboard drivers or modern graphics cards drivers our approaches include for example using",
    "start": "367120",
    "end": "375120"
  },
  {
    "text": "well hypervisors as in hardware virtualization be it btx or amd",
    "start": "375120",
    "end": "380720"
  },
  {
    "text": "svm well a thin hypervisor is really nice because it's first first of all it has an extremely",
    "start": "380720",
    "end": "387120"
  },
  {
    "text": "low overhead it's really really fast and it allows you to run on real hardware",
    "start": "387120",
    "end": "392880"
  },
  {
    "text": "which means that you can test all the modern drivers as well the problems are but it's kind of tricky",
    "start": "392880",
    "end": "398720"
  },
  {
    "text": "to implement especially when comparing to box approach and it might be difficult in debugging",
    "start": "398720",
    "end": "404479"
  },
  {
    "text": "especially if you don't don't own a hardware debugger and it's partly well system specific and it's",
    "start": "404479",
    "end": "412400"
  },
  {
    "text": "also cpu specific so that means if we focus on intel it won't work on amd cpus",
    "start": "412400",
    "end": "418639"
  },
  {
    "text": "it also doesn't allow you to change the logic of the cpu another approach would be well as you can see on these pictures",
    "start": "418639",
    "end": "425360"
  },
  {
    "text": "these are actually two laptops connected with a firewire cable and running windows and win dbg window",
    "start": "425360",
    "end": "431440"
  },
  {
    "text": "back debugger so basically you use an external debugger to instrument the running operating system this is a",
    "start": "431440",
    "end": "438720"
  },
  {
    "text": "pretty sweet approach i think you can you can it's relatively easy to implement especially if the",
    "start": "438720",
    "end": "444240"
  },
  {
    "text": "given debugger the given external debugger supports a scripting language like for example python following dbg",
    "start": "444240",
    "end": "450240"
  },
  {
    "text": "it has relatively low overhead in comparison to box and it can run on real hardware however",
    "start": "450240",
    "end": "456160"
  },
  {
    "text": "it's still slower than a hypervisor and it it's really system specific so you either instrument",
    "start": "456160",
    "end": "462080"
  },
  {
    "text": "when dbg or you do it for kdbg or or so or so on and it it's also limited you",
    "start": "462080",
    "end": "467440"
  },
  {
    "text": "cannot change the logic of the cpu another approach would be while using",
    "start": "467440",
    "end": "472639"
  },
  {
    "text": "x80c x86 trap hijacking this is the method that soft ice use if you know soft ice um",
    "start": "472639",
    "end": "480879"
  },
  {
    "text": "it's it has a pretty low overhead um it allows you still to access to test real hardware",
    "start": "480879",
    "end": "486960"
  },
  {
    "text": "and it's pretty debuggable however it also is tricky to implement because if you if",
    "start": "486960",
    "end": "492080"
  },
  {
    "text": "you ever have written implementation for x86 traps well there are some some things you need",
    "start": "492080",
    "end": "497759"
  },
  {
    "text": "to handle properly it might not be very elegant and it might be a little system specific",
    "start": "497759",
    "end": "503599"
  },
  {
    "text": "and it's also still limited to what the cpu allows you to do to what traps it actually issues what",
    "start": "503599",
    "end": "509039"
  },
  {
    "text": "exceptions it issues and what it allows you to set another approach well a hardware",
    "start": "509039",
    "end": "514560"
  },
  {
    "text": "debugger the biggest problem with it is that we don't have one",
    "start": "514560",
    "end": "520640"
  },
  {
    "text": "yeah so they actually cost some money all the other approaches we mentioned well don't cost money except for the",
    "start": "520640",
    "end": "526399"
  },
  {
    "text": "firewire cable which is pretty cheap of course and so we're really unsure about also the scripting",
    "start": "526399",
    "end": "533200"
  },
  {
    "text": "capabilities and um but it probably should have real well close to native",
    "start": "533200",
    "end": "538720"
  },
  {
    "text": "speed speed and access to real hardware so you could test real drivers on it so the winner",
    "start": "538720",
    "end": "545600"
  },
  {
    "text": "and our well things we picked as you know from the name of a talk already is box so again box is a full",
    "start": "545600",
    "end": "553279"
  },
  {
    "text": "full computer system and full cpu emulator it supports all the modern features and cpus including virtualization so you",
    "start": "553279",
    "end": "560240"
  },
  {
    "text": "can actually run vmware inside box this is awesome and it provides an",
    "start": "560240",
    "end": "565760"
  },
  {
    "text": "instrumentation api so it's not a really a plug-in api it's actually a set of defines which you",
    "start": "565760",
    "end": "572320"
  },
  {
    "text": "which you uh well implement and and they get called on certain events so when are the events called well there",
    "start": "572320",
    "end": "579600"
  },
  {
    "text": "are actually quite a lot of events in box that box already has instrumentation provided for and since",
    "start": "579600",
    "end": "584720"
  },
  {
    "text": "it's open source you can of course well modify everything that's not exported into this instrumentation api",
    "start": "584720",
    "end": "591200"
  },
  {
    "text": "so a couple of things that are useful when you instrument stuff first of all this is the basic stuff",
    "start": "591200",
    "end": "598640"
  },
  {
    "text": "well really basic stuff like box starts or the guest machine gets rebooted you get one",
    "start": "598640",
    "end": "604959"
  },
  {
    "text": "of these callbacks called um this is more interesting this is actually for basic blocking",
    "start": "604959",
    "end": "610560"
  },
  {
    "text": "instrumentation so there is a branch taken branch not taken far branch and so on and so on so you",
    "start": "610560",
    "end": "616480"
  },
  {
    "text": "get an event when the jump happens in the guest machine you get a call back",
    "start": "616480",
    "end": "621839"
  },
  {
    "text": "there's also of course instrumentation for ins for exceptions so when exceptions happen and you get a callback",
    "start": "621839",
    "end": "627040"
  },
  {
    "text": "you can well check the state and this is a really interesting one it is",
    "start": "627040",
    "end": "633600"
  },
  {
    "text": "basically like single stepping in classical approach so you have you get notified before one instruction is executed when",
    "start": "633600",
    "end": "640000"
  },
  {
    "text": "it's already decoded by before before it's executed and emulated and when you get notified after it's",
    "start": "640000",
    "end": "645200"
  },
  {
    "text": "executed this is quite important in our research and we are going to talk what's it for later there's also of",
    "start": "645200",
    "end": "651600"
  },
  {
    "text": "course memory access so a program has an instruction that accesses linear memory or physical",
    "start": "651600",
    "end": "658000"
  },
  {
    "text": "memory and you get notified that's really useful for our research as well",
    "start": "658000",
    "end": "663680"
  },
  {
    "text": "about performance well this is the short story as i said box is painfully slow and by paying painfully slow i mean from",
    "start": "663920",
    "end": "672000"
  },
  {
    "text": "80 um 80 millions instructions per second if you have no instrumentation and you",
    "start": "672000",
    "end": "678399"
  },
  {
    "text": "have a really modern cpu when you get an 80 megahertz basically machine",
    "start": "678399",
    "end": "684000"
  },
  {
    "text": "so well running windows on it is kind of slow it boots four minutes i would say however if you",
    "start": "684000",
    "end": "689519"
  },
  {
    "text": "start instrumenting things if you start adding your your well instrumentation to it and all",
    "start": "689519",
    "end": "695279"
  },
  {
    "text": "the logic it gets slower in the end you might even decrease to like one megahertz but actually we most of our",
    "start": "695279",
    "end": "703040"
  },
  {
    "text": "instrumentation runs about i guess 20 megahertz so that means that windows boots 20 minutes",
    "start": "703040",
    "end": "709360"
  },
  {
    "text": "uh linux is not too much faster a free bezier thankfully",
    "start": "709360",
    "end": "714480"
  },
  {
    "text": "so well it's okay for research especially if you have automated tests but",
    "start": "714480",
    "end": "719519"
  },
  {
    "text": "not well you cannot do normal work on it of course so we can instrument anything in the",
    "start": "719519",
    "end": "727360"
  },
  {
    "text": "operating system anything that happens in the operating system we can instrument uh what shall we start with",
    "start": "727360",
    "end": "733279"
  },
  {
    "text": "and whatever she's going to talk about double fetches which we which we focused on",
    "start": "733279",
    "end": "738720"
  },
  {
    "text": "okay so let's start with double fetches the condition that we focused in our research primarily",
    "start": "740000",
    "end": "746000"
  },
  {
    "text": "so what double double fetches are they are basically like time of check time of use uh type",
    "start": "746000",
    "end": "752079"
  },
  {
    "text": "of bugs where when when where the kernel assumes that a specific memory area within the user address space changes",
    "start": "752079",
    "end": "758720"
  },
  {
    "text": "that sorry doesn't change or is consistent between two different points in time it's basically probably a bug because",
    "start": "758720",
    "end": "765839"
  },
  {
    "text": "the kernel cannot really know whether a specific uh a specific place within user outer space",
    "start": "765839",
    "end": "771360"
  },
  {
    "text": "hasn't been changed by a concurrent threat on another cpu in the meantime so whenever it does that",
    "start": "771360",
    "end": "777920"
  },
  {
    "text": "we have a bug in the kernel so that's what we're looking for and uh the whole research started with",
    "start": "777920",
    "end": "784240"
  },
  {
    "text": "this bug in win32k that we found using manual analysis as you can see here in the code snippet",
    "start": "784240",
    "end": "790880"
  },
  {
    "text": "we have an acx register which holds a user mode pointer and then it is basically used twice the",
    "start": "790880",
    "end": "797920"
  },
  {
    "text": "first time it's used to fetch the fetch the pointer that is being validated and then",
    "start": "797920",
    "end": "803600"
  },
  {
    "text": "it is used again to fetch the value to actually use it so we have a double fetch with two",
    "start": "803600",
    "end": "809279"
  },
  {
    "text": "fetches within three assembly instructions and when we perform some variant analysis over it we",
    "start": "809279",
    "end": "814399"
  },
  {
    "text": "found out that there were 26 different instances of the very same bug all over win32k",
    "start": "814399",
    "end": "820800"
  },
  {
    "text": "so we found this in q4 of 2012 and we reported this to microsoft immediately and they fixed it in",
    "start": "820800",
    "end": "827680"
  },
  {
    "text": "february this year along with some other bugs and this particular vulnerability allowed us to",
    "start": "827680",
    "end": "834160"
  },
  {
    "text": "read any memory within the kernel outer space so this was an information disclosure vulnerability",
    "start": "834160",
    "end": "841519"
  },
  {
    "text": "uh so when it comes to the trivia of double fetches they usually occur within consistent",
    "start": "841519",
    "end": "846560"
  },
  {
    "text": "code blocks so either within like single system calls or io ctl handlers or in general like",
    "start": "846560",
    "end": "852720"
  },
  {
    "text": "consistent code blocks that are invoked from user mode and uh if you find a double fetch",
    "start": "852720",
    "end": "858560"
  },
  {
    "text": "uh the maximum impact that you can get from it is local bugs you cannot really find",
    "start": "858560",
    "end": "863680"
  },
  {
    "text": "remote ones because of the fact that in order to actually flip the user mode uh memory that is being",
    "start": "863680",
    "end": "870639"
  },
  {
    "text": "raised against you actually have to have code execution to have a threat which flips the value continuously",
    "start": "870639",
    "end": "876000"
  },
  {
    "text": "so in the worst case a double flat vulnerability can lead to an elevation of privileges",
    "start": "876000",
    "end": "881120"
  },
  {
    "text": "if you manage to get it to trigger a condition such as a buffer overflow or a right water condition you can also end up with an information",
    "start": "881120",
    "end": "888160"
  },
  {
    "text": "disclosure such as the debug that i showed before either by having arbitrary reads into",
    "start": "888160",
    "end": "894800"
  },
  {
    "text": "the kernel mode if you operate on pointers or maybe under field buffers that are being copied back into user mode",
    "start": "894800",
    "end": "901360"
  },
  {
    "text": "and you can also basically have like all sorts of denial of service if you fail to exploit either of the two previous types of",
    "start": "901360",
    "end": "907760"
  },
  {
    "text": "issues uh so exploitation of race conditions like that are not really",
    "start": "907760",
    "end": "912959"
  },
  {
    "text": "uh the subject of this talk because well it's a whole different thing we",
    "start": "912959",
    "end": "918720"
  },
  {
    "text": "already addressed it during our cisco cisco talk this year and there have been also some",
    "start": "918720",
    "end": "924800"
  },
  {
    "text": "exploitation technique detailed by sgracu and twis in 2007 so be sure to check out",
    "start": "924800",
    "end": "930079"
  },
  {
    "text": "our slides and wipe white paper from cisco and also the two guys work which is an article in frac",
    "start": "930079",
    "end": "938560"
  },
  {
    "text": "when it comes to detection via instrumentation the general idea is as follows uh we there are three major steps that",
    "start": "938560",
    "end": "945839"
  },
  {
    "text": "we perform the first one is to collect all information about the memory accesses that take place throughout the whole lifespan of an",
    "start": "945839",
    "end": "952480"
  },
  {
    "text": "operating system and after we have that information uh what we do is that we find all pairs",
    "start": "952480",
    "end": "957600"
  },
  {
    "text": "of memory fetches that take place in kernel mode and read from user mode memory uh such that they meet three conditions",
    "start": "957600",
    "end": "964160"
  },
  {
    "text": "they are within the same thread they're they are within the same system call invocation and uh",
    "start": "964160",
    "end": "969279"
  },
  {
    "text": "they access obviously the same memory location so after we have all of these bars pairs we basically filter out all of the",
    "start": "969279",
    "end": "975199"
  },
  {
    "text": "known false positives and there are usually lots of them and then basically manually looked into all",
    "start": "975199",
    "end": "980399"
  },
  {
    "text": "of the reports that we got and find the actual bugs",
    "start": "980399",
    "end": "985519"
  },
  {
    "text": "so as i said we have to have a large database of memory accesses and",
    "start": "985519",
    "end": "990720"
  },
  {
    "text": "each memory access can actually be characterized by quite a lot quite a lot of information which we need to implement the logic of",
    "start": "990720",
    "end": "997519"
  },
  {
    "text": "the double fetch finding so we had we can actually uh we can actually group all of these types",
    "start": "997519",
    "end": "1004480"
  },
  {
    "text": "of information into three different uh into several different types of",
    "start": "1004480",
    "end": "1009759"
  },
  {
    "text": "of things so we can characterize them by purpose uh so we have three different purposes",
    "start": "1009759",
    "end": "1015040"
  },
  {
    "text": "of this information the first one is information that is actually required to implement the logic so this is the",
    "start": "1015040",
    "end": "1020079"
  },
  {
    "text": "essential information that we have to find out if the memory pairs meet the three conditions that i mentioned earlier so",
    "start": "1020079",
    "end": "1027280"
  },
  {
    "text": "uh then we have the types of information that we have to actually perform double fetch analysis after we find the double",
    "start": "1027280",
    "end": "1033520"
  },
  {
    "text": "fetches which help us actually understand what is going on in the code as such as the instruction disassembly",
    "start": "1033520",
    "end": "1039760"
  },
  {
    "text": "or the number of the system call and stuff like that and then we also have information which helps us uh find",
    "start": "1039760",
    "end": "1045360"
  },
  {
    "text": "the unique issues so that we don't up don't end up with at least like a long list of duplicate issues we",
    "start": "1045360",
    "end": "1051200"
  },
  {
    "text": "have to have the stack trace to find out which which cases are really the same bug",
    "start": "1051200",
    "end": "1056960"
  },
  {
    "text": "and we can also group uh these this types of information by the source of where we take them",
    "start": "1056960",
    "end": "1062240"
  },
  {
    "text": "so we again have like three groups the first one is information that is provided by the ins",
    "start": "1062240",
    "end": "1067280"
  },
  {
    "text": "uh by the linear memory access callback that we have from boxbone",
    "start": "1067280",
    "end": "1072559"
  },
  {
    "text": "uh then we also have information that we get from the other type of callback which is the one that is invoked before the instruction",
    "start": "1072559",
    "end": "1079200"
  },
  {
    "text": "is executed and we need that because we have to know about all system calls that take place",
    "start": "1079200",
    "end": "1084240"
  },
  {
    "text": "within the operating system and we do this by looking for the syst enter instruction or the arrow instructions that are used to invoke",
    "start": "1084240",
    "end": "1090640"
  },
  {
    "text": "system calls and after we find an instruction like that we basically examine the eax register and find out",
    "start": "1090640",
    "end": "1097280"
  },
  {
    "text": "which system call is being invoked by the by the user mode program and then we have the third type which is basically the",
    "start": "1097280",
    "end": "1104000"
  },
  {
    "text": "information that is stored within memory of the operating system that we have to read basically directly from ram",
    "start": "1104000",
    "end": "1111360"
  },
  {
    "text": "so our implementation is as follows we basically create a large large uh memolog bin file that contains all of",
    "start": "1111360",
    "end": "1117679"
  },
  {
    "text": "those memory accesses it's usually like many many gigabytes because there are lots of memory fetches within the",
    "start": "1117679",
    "end": "1123840"
  },
  {
    "text": "operating system lifespan we split the file into thread specific logs so we end up with",
    "start": "1123840",
    "end": "1129360"
  },
  {
    "text": "thousands of log files each corresponding to each thread that was running inside of the system",
    "start": "1129360",
    "end": "1136480"
  },
  {
    "text": "we run the double fetch utility over each of them and after we have the output we symbolize the resulting reports and",
    "start": "1136480",
    "end": "1141919"
  },
  {
    "text": "perform uniquization and then look into them so here we can see the exemplary report",
    "start": "1141919",
    "end": "1148480"
  },
  {
    "text": "that boxbone generates and as you can see you basically have a nicely formatted information that i mentioned",
    "start": "1148480",
    "end": "1153600"
  },
  {
    "text": "earlier so you have the id of the thread in the form of a process id thread id and",
    "start": "1153600",
    "end": "1159120"
  },
  {
    "text": "creation time or some other characteristic of the other thread then you have the process name",
    "start": "1159120",
    "end": "1164240"
  },
  {
    "text": "you have the type of the memory access its length the instruction disassembly and the full",
    "start": "1164240",
    "end": "1169360"
  },
  {
    "text": "call stack this is basically a report for linux but the ones for linux so for windows and all other platforms",
    "start": "1169360",
    "end": "1176480"
  },
  {
    "text": "look basically the same so even though the the idea for",
    "start": "1176480",
    "end": "1181600"
  },
  {
    "text": "detecting double fetches is generic and applies to all operating systems there are many many system specific",
    "start": "1181600",
    "end": "1187600"
  },
  {
    "text": "things that we need to address so like there are different distinctions between what user mode and kernel mode",
    "start": "1187600",
    "end": "1193520"
  },
  {
    "text": "memory is and we have different system structures to traverse to fetch the data that we",
    "start": "1193520",
    "end": "1198640"
  },
  {
    "text": "need to to fill in the information about the context of the read we have also different ways to actually",
    "start": "1198640",
    "end": "1205360"
  },
  {
    "text": "generate code coverage of the kernel and different false positives that we need to filter out and obviously",
    "start": "1205360",
    "end": "1210559"
  },
  {
    "text": "different results so we need to look into all of these platforms separately",
    "start": "1210559",
    "end": "1216880"
  },
  {
    "text": "so let's start with microsoft windows the most interesting part in my opinion so when it comes to the",
    "start": "1216880",
    "end": "1223360"
  },
  {
    "text": "distinction between using user and kernel mode it's really really simple in windows because you have a",
    "start": "1223360",
    "end": "1228960"
  },
  {
    "text": "deep entire address space is basically divided into two parts and you can use a less than or greater",
    "start": "1228960",
    "end": "1234640"
  },
  {
    "text": "than operator so you can see the memory boundaries here uh they are different obviously for 32",
    "start": "1234640",
    "end": "1240480"
  },
  {
    "text": "and 64 bits of of versions of windows so that's that's a really simple part",
    "start": "1240480",
    "end": "1245679"
  },
  {
    "text": "then when it comes to traversing the structures that contain information about threats and processes",
    "start": "1245679",
    "end": "1250720"
  },
  {
    "text": "it's a little more complicated as you can see we basically traverse three structures first the kpcr which",
    "start": "1250720",
    "end": "1257120"
  },
  {
    "text": "contains a pointer to the current thread which in turn then in turn contains a pointer to the current process",
    "start": "1257120",
    "end": "1263280"
  },
  {
    "text": "and we get the uh the pointer to kpcr using the base address of the fs segment",
    "start": "1263280",
    "end": "1269360"
  },
  {
    "text": "on 32-bit windows and uh the base address of the gs on 64-bits",
    "start": "1269360",
    "end": "1274960"
  },
  {
    "text": "and then the three structures actually contain all the information that we need so the ir irql level and the uh",
    "start": "1274960",
    "end": "1282240"
  },
  {
    "text": "information about the current threat and the image name of the current process uh and then we when it comes to getting",
    "start": "1282240",
    "end": "1288799"
  },
  {
    "text": "information about the all of the drivers that are being loaded uh by the operating system which we need for",
    "start": "1288799",
    "end": "1295600"
  },
  {
    "text": "symbolization it's also pretty simple so you have to get the address of the",
    "start": "1295600",
    "end": "1301280"
  },
  {
    "text": "first item on the ldr model list so you get that using like traversing two different",
    "start": "1301280",
    "end": "1306720"
  },
  {
    "text": "structures on 32-bit version of windows or we because of the fact that one of these",
    "start": "1306720",
    "end": "1312000"
  },
  {
    "text": "pointers is not really present on a 64-bit version of windows we just hard code the offset",
    "start": "1312000",
    "end": "1318080"
  },
  {
    "text": "of a ps loaded modulus pointer within the kernel image and then after we have that we can read",
    "start": "1318080",
    "end": "1324000"
  },
  {
    "text": "information about about all of the kernel modules uh loaded in the operating system so this is also pretty easy",
    "start": "1324000",
    "end": "1331039"
  },
  {
    "text": "so when it comes to the false positives that we encountered uh when we were running windows on boxbone",
    "start": "1331039",
    "end": "1336240"
  },
  {
    "text": "there's quite a few of them uh so the first ones are uh so the first",
    "start": "1336240",
    "end": "1341440"
  },
  {
    "text": "one is reports originating from the system process which is the basic the most important process in windows",
    "start": "1341440",
    "end": "1347600"
  },
  {
    "text": "it is uh it is a kernel mode process entirely and its main activity uh",
    "start": "1347600",
    "end": "1354640"
  },
  {
    "text": "is when the system boots so at this time during very early boot up uh there is no kernel user kernel",
    "start": "1354640",
    "end": "1361440"
  },
  {
    "text": "boundary yet so we ended up with lots of false positives because of this and we could easily discard uh all of",
    "start": "1361440",
    "end": "1368080"
  },
  {
    "text": "these false positives by just ignoring all reports that were coming from process id equals zero or four",
    "start": "1368080",
    "end": "1374400"
  },
  {
    "text": "which is this specific system process we also got lots of false positives from abc related kernel routines which we",
    "start": "1374400",
    "end": "1381360"
  },
  {
    "text": "neutralized by uh discarding all of those fetches that were taking place at irql",
    "start": "1381360",
    "end": "1387200"
  },
  {
    "text": "equals apc level then we had again lots of reports originating from the ci",
    "start": "1387200",
    "end": "1392640"
  },
  {
    "text": "dll which is responsible for handling the signing the pe signing",
    "start": "1392640",
    "end": "1398000"
  },
  {
    "text": "things so we just removed all database entries which had ci dot dll somewhere in the call stack",
    "start": "1398000",
    "end": "1405600"
  },
  {
    "text": "which was also pretty effective and then we had numerous false positives in the messaging routines of win32k",
    "start": "1405600",
    "end": "1411120"
  },
  {
    "text": "which we basically had to deal with by having a blacklist of known functions that are known to have false positives and",
    "start": "1411120",
    "end": "1417440"
  },
  {
    "text": "the most prominent thing of false positive that we have had to deal with was memory probing because you probably",
    "start": "1417440",
    "end": "1423279"
  },
  {
    "text": "know that the windows kernel one of the windows kernel design decisions is that before",
    "start": "1423279",
    "end": "1429120"
  },
  {
    "text": "using a kernel sorry a user provided pointer you actually have to probe it to find out whether this is a valid pointer",
    "start": "1429120",
    "end": "1435200"
  },
  {
    "text": "and points to mapped memory so you have several public functions to do that such as probe for read and prop for right",
    "start": "1435200",
    "end": "1441440"
  },
  {
    "text": "but it turns out that the kernel itself also has several internal functions for that and internal",
    "start": "1441440",
    "end": "1447440"
  },
  {
    "text": "macros so the most the two most prevalent patterns that were responsible for just for doing the probing",
    "start": "1447440",
    "end": "1453360"
  },
  {
    "text": "are the two listed here the first one is for checking whether the memory is writable and the other one for checking whether",
    "start": "1453360",
    "end": "1459039"
  },
  {
    "text": "the memory is readable so the first pattern was mitigated by logging all four bytes right",
    "start": "1459039",
    "end": "1465200"
  },
  {
    "text": "accesses in addition to the read ones and then we could use that additional information",
    "start": "1465200",
    "end": "1470559"
  },
  {
    "text": "to filter out all of the patterns where there was a four byte read followed immediately by a four by right",
    "start": "1470559",
    "end": "1477039"
  },
  {
    "text": "in which case we just figured that this would be a probe and not a real read and the second pattern was mitigated by",
    "start": "1477039",
    "end": "1483039"
  },
  {
    "text": "the signaling ignoring all reads of less than two bytes because it turns out that there are so few legitimate uh one byte fetches from",
    "start": "1483039",
    "end": "1490159"
  },
  {
    "text": "user mode in the kernel that we could just safely ignore them when it comes to symbolization this is",
    "start": "1490159",
    "end": "1497039"
  },
  {
    "text": "really trivial for windows as well so microsoft supported debug help dll which has all of the necessary api for doing the",
    "start": "1497039",
    "end": "1503679"
  },
  {
    "text": "symbolization there are basically three functions that you need to use for that and you also have to have the pdb files",
    "start": "1503679",
    "end": "1509440"
  },
  {
    "text": "for all of the kernel modules that you want to symbolize which you can basically download from the microsoft symbol server",
    "start": "1509440",
    "end": "1515679"
  },
  {
    "text": "so it's pretty trivial to implement one's own resolver with that information okay so",
    "start": "1515679",
    "end": "1522640"
  },
  {
    "text": "when it comes to the results uh we had like five different iterations running windows 7",
    "start": "1522640",
    "end": "1528000"
  },
  {
    "text": "and windows 8 in different businesses and all of this resulted in almost 90 potential new issues which we",
    "start": "1528000",
    "end": "1534320"
  },
  {
    "text": "all reported to microsoft part of those were the initial 27 bucks that we also rediscovered",
    "start": "1534320",
    "end": "1540799"
  },
  {
    "text": "and we reported them to microsoft throughout november last year to january this year",
    "start": "1540799",
    "end": "1546080"
  },
  {
    "text": "and these resulted in the fixes of 12 of 37 eops being addressed by five different uh",
    "start": "1546080",
    "end": "1552400"
  },
  {
    "text": "microsoft bulletins 13 issues were classified as only dos",
    "start": "1552400",
    "end": "1557679"
  },
  {
    "text": "and i think we're not fixed and then one big problem is still being worked on as far as we know",
    "start": "1557679",
    "end": "1562720"
  },
  {
    "text": "and three other cases are being uh being reinvestigated by microsoft so the rest were either assessed",
    "start": "1562720",
    "end": "1568320"
  },
  {
    "text": "non-exploitable or non-issues or requiring administrative access which is not really considered an elevation of",
    "start": "1568320",
    "end": "1573919"
  },
  {
    "text": "privileges and stuff like that so these were the official results the less official results are that well",
    "start": "1573919",
    "end": "1581200"
  },
  {
    "text": "microsoft was obviously very receptive to the reports and we also have evidence that ins like",
    "start": "1581200",
    "end": "1587200"
  },
  {
    "text": "in addition to just taking our reports and fixing the bugs they also performed like extensive variant analysis of them",
    "start": "1587200",
    "end": "1593679"
  },
  {
    "text": "because we're continuously finding examples of routines that were around those that we found found bugs in and",
    "start": "1593679",
    "end": "1599679"
  },
  {
    "text": "they were also fixed even though we didn't report bugs in those so there are some exemplary symbols",
    "start": "1599679",
    "end": "1604720"
  },
  {
    "text": "there uh also three of our original reports were fixed as variants with no cv assigned",
    "start": "1604720",
    "end": "1610480"
  },
  {
    "text": "and but we really don't have any idea of how many of those bugs were fixed as variants or how many",
    "start": "1610480",
    "end": "1617440"
  },
  {
    "text": "bugs microsoft found internally because we don't have that information from them uh we also shared boxbone with microsoft",
    "start": "1617440",
    "end": "1624000"
  },
  {
    "text": "but we don't really have an idea whether they are currently using it or not",
    "start": "1624000",
    "end": "1629120"
  },
  {
    "text": "uh one interesting thing about uh about the whole research is that we decided to release all of the logs",
    "start": "1629120",
    "end": "1635120"
  },
  {
    "text": "that we uh generated for all of the platforms including microsoft windows uh",
    "start": "1635120",
    "end": "1640399"
  },
  {
    "text": "specifically specifically releasing the reports that we uh reported to microsoft",
    "start": "1640399",
    "end": "1646320"
  },
  {
    "text": "so one of the reasons is that uh microsoft assessed a majority of the reports as dos or non-issue",
    "start": "1646320",
    "end": "1652559"
  },
  {
    "text": "and we don't really have the resources to find out whether this is true or not so we just let you decide and uh yeah",
    "start": "1652559",
    "end": "1658720"
  },
  {
    "text": "so we also figured that uh since some of the windows issues haven't been fixed for nine months now",
    "start": "1658720",
    "end": "1664159"
  },
  {
    "text": "uh that's enough time so uh we would like to warn you about those and obviously locks from the other",
    "start": "1664159",
    "end": "1669840"
  },
  {
    "text": "systems are being released too so you can you can see the linux reports and the freebsd reports that you got",
    "start": "1669840",
    "end": "1675039"
  },
  {
    "text": "and look into those as well so final thoughts about windows is that it's generally designed very",
    "start": "1675039",
    "end": "1681440"
  },
  {
    "text": "poorly and written poorly with regards to this specific problem so windows really lacks several",
    "start": "1681440",
    "end": "1688480"
  },
  {
    "text": "mechanisms that are found in other operating systems so we don't have pointer annotations to",
    "start": "1688480",
    "end": "1693840"
  },
  {
    "text": "so you don't really know for a specific function whether a pointer that it takes is a user mode pointer or not",
    "start": "1693840",
    "end": "1700480"
  },
  {
    "text": "uh whereas linux has a user user mode annotation for pointers you don't have dedicated fetch functions",
    "start": "1700480",
    "end": "1707600"
  },
  {
    "text": "that you could use to get data from user mode so instead of that you just use the pointer in whatever way you want",
    "start": "1707600",
    "end": "1713440"
  },
  {
    "text": "directly and there are also node street data fetching policies so everyone will just you",
    "start": "1713440",
    "end": "1718480"
  },
  {
    "text": "do as they will which means well bugs so we we think that backs are bound to",
    "start": "1718480",
    "end": "1723919"
  },
  {
    "text": "occur in this configuration and this lack of of counter measures and the only problem we have",
    "start": "1723919",
    "end": "1730240"
  },
  {
    "text": "uh with finding bugs with boxbone is that we have problems generating coverage",
    "start": "1730240",
    "end": "1735279"
  },
  {
    "text": "because because this is because of the fact that this is uh a dynamic approach we are really dependent",
    "start": "1735279",
    "end": "1741279"
  },
  {
    "text": "on how much coverage we have because we can only analyze the program states that are really taking place so if we imagine",
    "start": "1741279",
    "end": "1748559"
  },
  {
    "text": "that if you imagine that we found like 40 bucks by just booting up the system and running a few tests",
    "start": "1748559",
    "end": "1753760"
  },
  {
    "text": "you can imagine how many bugs there still must be if you actually managed to invoke all of the less used",
    "start": "1753760",
    "end": "1759840"
  },
  {
    "text": "system calls and io ctl routines and stuff like that we think there must be tons of them so",
    "start": "1759840",
    "end": "1765840"
  },
  {
    "text": "when it comes to the code coverage itself what we did is basically put the system up do some system",
    "start": "1765840",
    "end": "1771840"
  },
  {
    "text": "navigation like run internet explorer and some other default tools that we found in a windows",
    "start": "1771840",
    "end": "1777520"
  },
  {
    "text": "installation and then play some multimedia start starcraft 1 as you could see before and run some wine",
    "start": "1777520",
    "end": "1783919"
  },
  {
    "text": "conformant conformance tests but we figure that's way too little",
    "start": "1783919",
    "end": "1789520"
  },
  {
    "text": "so if you have any ideas of how this could be still improved i would be really happy to hear from you",
    "start": "1789520",
    "end": "1794799"
  },
  {
    "text": "and our current belief is that if we have a moderately smart system called fuzzer uh we could really dramatically like",
    "start": "1794799",
    "end": "1800720"
  },
  {
    "text": "maybe twice or three times improve the code coverage that we have now so we are currently working on that and",
    "start": "1800720",
    "end": "1806159"
  },
  {
    "text": "uh maybe maybe some new windows bugs will be found and reported soon thanks to this so",
    "start": "1806159",
    "end": "1813200"
  },
  {
    "text": "there are some statistics regarding the code coverage that we have right now you can see basically like what are the orders of the sizes of the code covers",
    "start": "1813200",
    "end": "1820159"
  },
  {
    "text": "that we have like we we we can see the code coverage for the two most important kernel modules so",
    "start": "1820159",
    "end": "1826000"
  },
  {
    "text": "the base kernel and win32k which is the graphics subsystem so it's not really high as you can see",
    "start": "1826000",
    "end": "1833760"
  },
  {
    "text": "the first the blue part is the code coverage that we got by just running like putting up the system and",
    "start": "1833760",
    "end": "1839039"
  },
  {
    "text": "terminating it and the green one is for running the system and running all of the tests that i uh listed before",
    "start": "1839039",
    "end": "1845919"
  },
  {
    "text": "so for win3k it's not really that bad it's like 50 coverage but there's still much room for",
    "start": "1845919",
    "end": "1852000"
  },
  {
    "text": "improvement then we have the statistics for the system calls invoked uh which are really similar to the previous",
    "start": "1852000",
    "end": "1858159"
  },
  {
    "text": "slide and then we also have the number of fetch instructions that we actually detected in in the base kernel in win32k and then",
    "start": "1858159",
    "end": "1866320"
  },
  {
    "text": "in the all all of the models yeah so that was about windows and now back",
    "start": "1866320",
    "end": "1872720"
  },
  {
    "text": "to unveil about linux and psd",
    "start": "1872720",
    "end": "1878080"
  },
  {
    "text": "okay guys so um the last slide is really important you can see how many fetch instructions",
    "start": "1878080",
    "end": "1883200"
  },
  {
    "text": "are in in windows let's compare it with what we have in linux so how do we approach linux",
    "start": "1883200",
    "end": "1888480"
  },
  {
    "text": "well first by linux i mean actually ubuntu 13.04 64-bit with a generic stock kernel",
    "start": "1888480",
    "end": "1896720"
  },
  {
    "text": "and well when you approach instrumenting when we actually ported boxbone to support linux we",
    "start": "1896720",
    "end": "1902320"
  },
  {
    "text": "we needed to address a few things which matters already mentioned both for boxbone and for windows so",
    "start": "1902320",
    "end": "1908240"
  },
  {
    "text": "first of all we need to gather threat information and important thing to realize here is that",
    "start": "1908240",
    "end": "1913760"
  },
  {
    "text": "we might get an event when the guest is in user mode and we might get an event a call callback when the user is sorry",
    "start": "1913760",
    "end": "1921279"
  },
  {
    "text": "if a guest is in kernel mode so we first we need to to have well actually two different approaches",
    "start": "1921279",
    "end": "1926320"
  },
  {
    "text": "so uh to get threat specific information if we are in user mode we actually just well read the",
    "start": "1926320",
    "end": "1932880"
  },
  {
    "text": "task register go into the tss with our of course x86 structures and read the kernel",
    "start": "1932880",
    "end": "1938559"
  },
  {
    "text": "rsp kernel stack pointer that's important on linux read the stack pointer from there",
    "start": "1938559",
    "end": "1944159"
  },
  {
    "text": "however on well if you're on ring zero this is trivial because you already have the stack pointer in the stack pointer",
    "start": "1944159",
    "end": "1950480"
  },
  {
    "text": "register obviously once you have this well linux is quite interesting you actually",
    "start": "1950480",
    "end": "1955919"
  },
  {
    "text": "have the kernel stack for the given thread and the stack pointer points somewhere here right",
    "start": "1955919",
    "end": "1961120"
  },
  {
    "text": "and you mask out the lower bits and you get the address of the beginning of the stack and at the beginning of the stack there",
    "start": "1961120",
    "end": "1967360"
  },
  {
    "text": "is a thread information thread info structure which contains the pointers to information we need",
    "start": "1967360",
    "end": "1973760"
  },
  {
    "text": "so if we dive deeper we actually get read a task pointer from that structure and we have",
    "start": "1973760",
    "end": "1979600"
  },
  {
    "text": "a test structure we read the pid so this is interesting actually do you know that in kernel mode",
    "start": "1979600",
    "end": "1985600"
  },
  {
    "text": "i'm actually a linux noob so this is surprising to me in kernel mode the pid is actually the thread id",
    "start": "1985600",
    "end": "1991279"
  },
  {
    "text": "and the tg id is the thread group id which is actually the process id confusing okay com is the name of the",
    "start": "1991279",
    "end": "1998880"
  },
  {
    "text": "process um the second thing so so this is already all the information about the",
    "start": "1998880",
    "end": "2004799"
  },
  {
    "text": "threads we need now the modules so the drivers this is quite easy so linux doesn't have any kernel mode aslr",
    "start": "2004799",
    "end": "2011360"
  },
  {
    "text": "so we just hard code the address of the modules global variable and it points to the",
    "start": "2011360",
    "end": "2018159"
  },
  {
    "text": "beginning of the modules list where we can well read the name of each module the address in the kernel where",
    "start": "2018159",
    "end": "2024559"
  },
  {
    "text": "carousel mode memory or is it and the size of it so it's basic memory forensic stuff basically",
    "start": "2024559",
    "end": "2031279"
  },
  {
    "text": "so uh now the call stack we actually want a nice symbolized call stack thankfully",
    "start": "2031279",
    "end": "2037039"
  },
  {
    "text": "the stock kernels came with uh with frame pointers they were not omitted so",
    "start": "2037039",
    "end": "2042240"
  },
  {
    "text": "they were in rbp or saved on the stack which is which is makes things really really simple since you can just walk",
    "start": "2042240",
    "end": "2047440"
  },
  {
    "text": "through it however we noticed that sometimes there was an entry missing so if you",
    "start": "2047440",
    "end": "2052560"
  },
  {
    "text": "if you go to the do exec v common um function you you couldn't find a call to",
    "start": "2052560",
    "end": "2058000"
  },
  {
    "text": "this to get user there was some more function one more function actually called and that one more nested",
    "start": "2058000",
    "end": "2064960"
  },
  {
    "text": "function had the code finally to get user four and what happened well actually the",
    "start": "2064960",
    "end": "2070398"
  },
  {
    "text": "functions that are implemented on linux in assembly don't preserve the stack pointer on the sorry the frame pointer on the",
    "start": "2070399",
    "end": "2077520"
  },
  {
    "text": "stack that means when we walk through the frames we actually just skip one and",
    "start": "2077520",
    "end": "2082560"
  },
  {
    "text": "so actually we solved it by well creating events actually creating",
    "start": "2082560",
    "end": "2088158"
  },
  {
    "text": "call by getting callbacks when one of these functions was uh was entered save the regis save the",
    "start": "2088159",
    "end": "2095280"
  },
  {
    "text": "return address and then when we need a call stack we inserted that return address into",
    "start": "2095280",
    "end": "2100720"
  },
  {
    "text": "in between the first and the second entry in the call stack um another problem was were inline",
    "start": "2100720",
    "end": "2107920"
  },
  {
    "text": "functions so actually when you compile with inline you get the symbolizations get gets really",
    "start": "2107920",
    "end": "2113920"
  },
  {
    "text": "messed up this is easily solvable if you recompile the kernel by disabling inline at all",
    "start": "2113920",
    "end": "2121359"
  },
  {
    "text": "so speaking of symbolization actually symbolization on linux is trivial as well you just in case of ubuntu you just",
    "start": "2121359",
    "end": "2127599"
  },
  {
    "text": "download the symbols from for your stock kernel which we did in our case and there is the",
    "start": "2127599",
    "end": "2132640"
  },
  {
    "text": "new benutel's address to line tool uh which we well written a simple python script to",
    "start": "2132640",
    "end": "2138240"
  },
  {
    "text": "run it and you get from addresses you get trans you get it translated to",
    "start": "2138240",
    "end": "2143280"
  },
  {
    "text": "file name line and that file and the function name",
    "start": "2143280",
    "end": "2148079"
  },
  {
    "text": "okay so we have symbolizations we have thread information we have module information now how do we get the coverage",
    "start": "2148480",
    "end": "2153680"
  },
  {
    "text": "so we run fuzzers puzzlers get sometimes decent coverage we run invest trinity fs father and some others",
    "start": "2153680",
    "end": "2160000"
  },
  {
    "text": "and we also run the linux test project which are is a really cool set of tests",
    "start": "2160000",
    "end": "2166720"
  },
  {
    "text": "in the end we got the coverage on the level of i guess 28 which is by the way instruction granularity in the kernel",
    "start": "2167359",
    "end": "2173920"
  },
  {
    "text": "it's so it's i would say 1 4 and 301 um 301",
    "start": "2173920",
    "end": "2182560"
  },
  {
    "text": "system calls were called in the end so it is far less than windows as you know so in the end when we",
    "start": "2182560",
    "end": "2190160"
  },
  {
    "text": "run linux on boxbone and started generating logs like the mem log.bin file that mateoche",
    "start": "2190160",
    "end": "2195839"
  },
  {
    "text": "mentioned we got locks up to 200 gigabytes so we can i guess imagine how many hard drives we had to buy",
    "start": "2195839",
    "end": "2201359"
  },
  {
    "text": "during this research um actually quite a lot of terabytes went went to storing just vlogs",
    "start": "2201359",
    "end": "2207760"
  },
  {
    "text": "um there were about 50 000 threads run during doing this research",
    "start": "2207760",
    "end": "2212960"
  },
  {
    "text": "unique threats and the output filtered logs the double fetched logs",
    "start": "2212960",
    "end": "2218000"
  },
  {
    "text": "were from well up to 200 kilobytes of text data about double fetters",
    "start": "2218000",
    "end": "2225680"
  },
  {
    "text": "yeah so final results i guess there are some linux fans here or people who just",
    "start": "2225680",
    "end": "2230880"
  },
  {
    "text": "cheer for linux how do you think box performed against linux so there are actually three digits here and i'm going to reveal one by one",
    "start": "2230880",
    "end": "2237440"
  },
  {
    "text": "so how many hundreds of bugs did we find actually no actually not it's not in the",
    "start": "2237440",
    "end": "2244320"
  },
  {
    "text": "order of hundreds it's neither tense actually we didn't",
    "start": "2244320",
    "end": "2250480"
  },
  {
    "text": "find any bugs yeah so it came as a surprise for us i",
    "start": "2250480",
    "end": "2255760"
  },
  {
    "text": "said i'm a linux noob so i thought it would be well it would be well same as on windows",
    "start": "2255760",
    "end": "2261760"
  },
  {
    "text": "but why is that i mean let's do some documented documenting failure uh stuff so",
    "start": "2261760",
    "end": "2268480"
  },
  {
    "text": "first of all there are actually three reasons because we analyzed it while we said well there should be bugs why",
    "start": "2268480",
    "end": "2274240"
  },
  {
    "text": "aren't there and there are three uh reasons first where use they don't just randomly the reference pointers as",
    "start": "2274240",
    "end": "2280240"
  },
  {
    "text": "they did in windows and they actually have a lot of copying functions which are needed to be called to",
    "start": "2280240",
    "end": "2285520"
  },
  {
    "text": "read data from memory and you as you know well developers are lazy basically so that means that if",
    "start": "2285520",
    "end": "2291119"
  },
  {
    "text": "they can reference a pointer where we'll do it but if they need to call a function then well well probably they would prefer to",
    "start": "2291119",
    "end": "2298000"
  },
  {
    "text": "do it once instead of twice um the other thing are is actually",
    "start": "2298000",
    "end": "2303440"
  },
  {
    "text": "sparse sparse and annotations so this is a user dash sorry underscore underscore user",
    "start": "2303440",
    "end": "2309440"
  },
  {
    "text": "annotation for all the input variables and fields and structures but a system called gets from the user",
    "start": "2309440",
    "end": "2316160"
  },
  {
    "text": "memory and if if a variable has annotation like this it cannot be dereferenced",
    "start": "2316160",
    "end": "2322240"
  },
  {
    "text": "and the reference will basically issue a sparse warning so this kills most of the bikes or if not",
    "start": "2322240",
    "end": "2327599"
  },
  {
    "text": "all i would say and the third is overall design i mean the structures are pretty flat",
    "start": "2327599",
    "end": "2333520"
  },
  {
    "text": "when you pass through the kernel there is no they don't go deep and deep and deep they are pretty flat and with",
    "start": "2333520",
    "end": "2340640"
  },
  {
    "text": "well this is this is a good design what can i say so that doesn't mean we didn't detect",
    "start": "2340640",
    "end": "2346000"
  },
  {
    "text": "any double fetch conditions we did actually a couple of them and but there were no exploitable ones",
    "start": "2346000",
    "end": "2353520"
  },
  {
    "text": "i'm going to talk about one one and do tcp get suck up versus a get user length it gets",
    "start": "2353520",
    "end": "2360400"
  },
  {
    "text": "gets an upland from from this pointer gets the length of the integer to to this buffer to this integer variable",
    "start": "2360400",
    "end": "2366880"
  },
  {
    "text": "and then does something to it calculates the minimum value and then again if you go deeper to the function you there's a switch case and",
    "start": "2366880",
    "end": "2373280"
  },
  {
    "text": "then sometimes in some cases you get again the fetch",
    "start": "2373280",
    "end": "2378320"
  },
  {
    "text": "however due to how this variable is used you cannot do anything malicious with it you cannot actually use it to",
    "start": "2378320",
    "end": "2385040"
  },
  {
    "text": "to get root so well it's basically a false positive in terms of vulnerabilities",
    "start": "2385040",
    "end": "2391520"
  },
  {
    "text": "so what's about linux no bugs found we are still going to work on it and work on the coverage especially",
    "start": "2391599",
    "end": "2397280"
  },
  {
    "text": "maybe maybe we will find something and we we also have some other approaches we are going to test against linux",
    "start": "2397280",
    "end": "2403040"
  },
  {
    "text": "so freebsd we used well 91 64-bit generic generic kernel",
    "start": "2403040",
    "end": "2410960"
  },
  {
    "text": "again when you instrument you have exactly the same thing so you need to handle both getting",
    "start": "2410960",
    "end": "2417200"
  },
  {
    "text": "the informations about threads and if the event is from user mode and from kernel mode",
    "start": "2417200",
    "end": "2422480"
  },
  {
    "text": "actually you we use the gs.base in this case for getting the threat information you can read it either directly from the",
    "start": "2422480",
    "end": "2428800"
  },
  {
    "text": "register in ring zero or just read it from the msr that is used by swap gs instruction",
    "start": "2428800",
    "end": "2434319"
  },
  {
    "text": "so once you have it you will travels down you go into the thread structure read",
    "start": "2434319",
    "end": "2439680"
  },
  {
    "text": "the thread id go into the process structure read the bid this is actually the process id and this is actually the thread id so it's",
    "start": "2439680",
    "end": "2445920"
  },
  {
    "text": "not like name confusion like on linux and the name of a process and if you would like also to get",
    "start": "2445920",
    "end": "2453200"
  },
  {
    "text": "modules where you can do like this same idea as on linux some more traversing deep",
    "start": "2453200",
    "end": "2458560"
  },
  {
    "text": "however we didn't bother because it turned out there 700 sorry 477 modules in 3bsd by default",
    "start": "2458560",
    "end": "2466560"
  },
  {
    "text": "registered however all of them each and every one of these is in the kernel image so we can just",
    "start": "2466560",
    "end": "2472960"
  },
  {
    "text": "assume that everything is in the kernel image and be done with that and this will really speed up the instrumentation because we don't have to",
    "start": "2472960",
    "end": "2478960"
  },
  {
    "text": "like fetch data for 477 modules uh so we ignored them however in the",
    "start": "2478960",
    "end": "2485440"
  },
  {
    "text": "future we would like to test some of those because freebsd actually supports external modules as well we would probably well need to re-enable",
    "start": "2485440",
    "end": "2492079"
  },
  {
    "text": "the functionality okay call stack and symbolization same stuff as on linux",
    "start": "2492079",
    "end": "2498640"
  },
  {
    "text": "uh one nice thing you actually have on your drive in the default installation the symbols for the kernel that's a nice",
    "start": "2498640",
    "end": "2504960"
  },
  {
    "text": "thing you don't have to look for them and extract them the coverage basically same thing",
    "start": "2504960",
    "end": "2510319"
  },
  {
    "text": "fuzzers lf6 and net use fs fuzzer and trinity parts from linux",
    "start": "2510319",
    "end": "2515359"
  },
  {
    "text": "stress 2 and regression tests for freebsd so results again what do you think well",
    "start": "2515359",
    "end": "2523200"
  },
  {
    "text": "it's not hundreds i can tell you that and actually you know where this is going right",
    "start": "2523200",
    "end": "2528800"
  },
  {
    "text": "again nothing found again we are pretty sad so this is why i thanked microsoft yesterday because we actually have",
    "start": "2528800",
    "end": "2533920"
  },
  {
    "text": "have a decency to put some bugs that we can find it means really a lot for us like offensive researchers",
    "start": "2533920",
    "end": "2541359"
  },
  {
    "text": "yeah well these guys didn't no decency here so documenting failure again well",
    "start": "2542079",
    "end": "2548240"
  },
  {
    "text": "it also has it has no annotations but it has copying functions that need to be used actually five of them so not a full",
    "start": "2548240",
    "end": "2554160"
  },
  {
    "text": "slide of them like linux has this is a pretty pretty nice design by the way",
    "start": "2554160",
    "end": "2559200"
  },
  {
    "text": "it's and we we've also been told that this is actually double fetches is a pretty popular back class on psds on",
    "start": "2559200",
    "end": "2565839"
  },
  {
    "text": "open bsd particularly and also on freebsd so well this has been audited before one false positive i would like",
    "start": "2565839",
    "end": "2572880"
  },
  {
    "text": "to mention in kernel select function so this is actually an actual report that we we work on from",
    "start": "2572880",
    "end": "2579920"
  },
  {
    "text": "well from boxbone and well where it reads first read is in",
    "start": "2579920",
    "end": "2586880"
  },
  {
    "text": "in select check by the fd and it gets some byte and when there's another one and gets",
    "start": "2586880",
    "end": "2592800"
  },
  {
    "text": "the same bytes again actually it gets bits but due to the nature again this is a double fetch but due to the nature of",
    "start": "2592800",
    "end": "2599119"
  },
  {
    "text": "how this is used it's not exploitable it's just so it's not even a bike it's just it's not exploitable you",
    "start": "2599119",
    "end": "2604240"
  },
  {
    "text": "cannot do anything evil with it basically boring for false positive",
    "start": "2604240",
    "end": "2610400"
  },
  {
    "text": "yeah ever there were also some other false positives we are as matteo said we will be",
    "start": "2610960",
    "end": "2616160"
  },
  {
    "text": "releasing the logs on our blogs really soon like like i don't know maybe tomorrow and in a few days",
    "start": "2616160",
    "end": "2622160"
  },
  {
    "text": "so you can take a look on the other first positives as well i'm going to skip open bsd because this is still work in progress",
    "start": "2622160",
    "end": "2628640"
  },
  {
    "text": "there are some data on the slides if you would like to take a look and uh well you can also we",
    "start": "2628640",
    "end": "2634960"
  },
  {
    "text": "can also run boxbound versus netbsd maybe osx and maybe some other linux distributions",
    "start": "2634960",
    "end": "2640160"
  },
  {
    "text": "we'll see there is still also a lot of ground to cover with better coverage",
    "start": "2640160",
    "end": "2646319"
  },
  {
    "text": "okay now matosh is going to talk about hyper prone and then about the the thing that i find really interesting",
    "start": "2646319",
    "end": "2652960"
  },
  {
    "text": "and there will be one more demo a bug spawn amazon",
    "start": "2652960",
    "end": "2657440"
  },
  {
    "text": "okay so about hyper bone um so even though we had so much success with boxbone",
    "start": "2659440",
    "end": "2665280"
  },
  {
    "text": "and windows specifically we found out that we thought that it would be interesting to actually have",
    "start": "2665280",
    "end": "2670720"
  },
  {
    "text": "something much faster which we could probably use for example on our workstation instead of just specifically",
    "start": "2670720",
    "end": "2676160"
  },
  {
    "text": "running a guest on box uh so there are several uh very important advantages of this",
    "start": "2676160",
    "end": "2681839"
  },
  {
    "text": "set us all of the eos os instructions execute natively instead of being emulated and only instructions that we really",
    "start": "2681839",
    "end": "2688400"
  },
  {
    "text": "have to intercept are being intercepted all of the other ones are just running as asses and yeah as i said this could",
    "start": "2688400",
    "end": "2694880"
  },
  {
    "text": "be potentially run seamlessly on anyone's workstation so you could get coverage by just",
    "start": "2694880",
    "end": "2700000"
  },
  {
    "text": "like working on this computer for a week or something and just naturally expanding the coverage that we have",
    "start": "2700000",
    "end": "2706319"
  },
  {
    "text": "uh yeah but that's only if you don't really use vms in your work so i guess not for security people",
    "start": "2706319",
    "end": "2711839"
  },
  {
    "text": "anyway uh it's only very good for memory access patterns uh instrumentation it's not really perfect",
    "start": "2711839",
    "end": "2717680"
  },
  {
    "text": "for other types of instrumentation uh so the initial concept that we uh thought of would be to start",
    "start": "2717680",
    "end": "2724079"
  },
  {
    "text": "off with jonah's blue pill project which was basically a thin vmm that was loaded as a driver inside of",
    "start": "2724079",
    "end": "2731119"
  },
  {
    "text": "the host system putting the operating system in kind of a jail or a virtualist environment",
    "start": "2731119",
    "end": "2738960"
  },
  {
    "text": "as you can see here this is the detailed design of that so about how we would",
    "start": "2738960",
    "end": "2746400"
  },
  {
    "text": "intercept the memory reads uh so the basic idea would be to just instrument 32-bit operating systems",
    "start": "2746400",
    "end": "2752640"
  },
  {
    "text": "which are like the same code base as 64-bit and do some gdt magic to really replace the data",
    "start": "2752640",
    "end": "2759599"
  },
  {
    "text": "segment for the kernel to have it like expand down with base zero and size 800 which would result in having the",
    "start": "2759599",
    "end": "2766319"
  },
  {
    "text": "same base such as the kernels all of the memory fetches would still work but then an exception would be generated",
    "start": "2766319",
    "end": "2772960"
  },
  {
    "text": "for all fetches from user mode performed by the kernel uh so the vmm would that intercept the",
    "start": "2772960",
    "end": "2779280"
  },
  {
    "text": "exception perform the instrumentation in the same way as in boxbone and then restore the data segment",
    "start": "2779280",
    "end": "2784960"
  },
  {
    "text": "set the trap flag so the one instruction can execute and then continue uh so this would be pretty",
    "start": "2784960",
    "end": "2790960"
  },
  {
    "text": "straightforward uh this is how we imagine this would work but we really didn't think this through so",
    "start": "2790960",
    "end": "2798079"
  },
  {
    "text": "it turns out that there is no no virtualization on in protected mode and on the other hand there is no memory",
    "start": "2798079",
    "end": "2803680"
  },
  {
    "text": "segmentation in long mode so we cannot really implement this but the revised idea would be to tamper with",
    "start": "2803680",
    "end": "2808960"
  },
  {
    "text": "another part of the virtual address space translation mechanism so instead of doing this magic",
    "start": "2808960",
    "end": "2814319"
  },
  {
    "text": "with gdt we could just do the same with page tables as in clear the present flag in all of",
    "start": "2814319",
    "end": "2819359"
  },
  {
    "text": "those top level page table entries and restoring them after the exit",
    "start": "2819359",
    "end": "2824880"
  },
  {
    "text": "after the instruction executes so yeah this is this is an illustration for that uh",
    "start": "2824880",
    "end": "2831119"
  },
  {
    "text": "yeah so we are still working on it uh we hope that we will be able to present it in the fall of this year uh yeah so be",
    "start": "2831119",
    "end": "2838319"
  },
  {
    "text": "on the lookout for that uh when it comes to double fetches themselves there are some other things",
    "start": "2838319",
    "end": "2844480"
  },
  {
    "text": "that we can do like instrument macro xx and improve the coverage for windows which i already mentioned",
    "start": "2844480",
    "end": "2850880"
  },
  {
    "text": "and one other interesting things that we could do for double fetches specifically is try to approach them with a static analysis",
    "start": "2850880",
    "end": "2857520"
  },
  {
    "text": "instead of doing dynamic analysis and yeah the symbolic execution model is fairly interesting for that",
    "start": "2857520",
    "end": "2863920"
  },
  {
    "text": "and we could also like try to mix the static and dynamic analysis by hinting the static",
    "start": "2863920",
    "end": "2868960"
  },
  {
    "text": "analyzer with information that we have from the dynamic ones at us where are the instructions that we know for sure",
    "start": "2868960",
    "end": "2874240"
  },
  {
    "text": "that i that are fetching data from user mode so this could be interesting and potentially it has uh it has much bigger",
    "start": "2874240",
    "end": "2882240"
  },
  {
    "text": "capabilities of having like greater coverage because then we're not limited to the code that we actually have to execute",
    "start": "2882240",
    "end": "2888640"
  },
  {
    "text": "okay so that's about uh boxbone like the core of boxbone and now we wanted to mention a project",
    "start": "2888640",
    "end": "2894000"
  },
  {
    "text": "that we just wrote like a week or two weeks ago and we also had some success with it",
    "start": "2894000",
    "end": "2899359"
  },
  {
    "text": "so what we wanted to really emphasize today is that kernel instrumentation is a",
    "start": "2899359",
    "end": "2904559"
  },
  {
    "text": "powerful tool and it's not only about double fetches it's also about other types of bugs so for example you could think of like",
    "start": "2904559",
    "end": "2911440"
  },
  {
    "text": "one potential application of that could be tracking like doing chain tracking of kernel memory",
    "start": "2911440",
    "end": "2916720"
  },
  {
    "text": "so on 32-bit windows for example or any other operating systems you have like one to two gigabyte wide kernel address",
    "start": "2916720",
    "end": "2922079"
  },
  {
    "text": "space which is not too much so like considering the current amounts of ram that you can have in your",
    "start": "2922079",
    "end": "2927520"
  },
  {
    "text": "computer you can you can easily have like up to 16 bytes of shadow memory describing the",
    "start": "2927520",
    "end": "2933119"
  },
  {
    "text": "like a single kernel byte which is a lot of information that we could store them there and uh so for example",
    "start": "2933119",
    "end": "2940720"
  },
  {
    "text": "how about tracking the initialization property of heaps and pools and stack that are",
    "start": "2940720",
    "end": "2947200"
  },
  {
    "text": "residing in the kernel and trying to find some bugs using this so it turns out we could actually detect",
    "start": "2947200",
    "end": "2953520"
  },
  {
    "text": "the use of uninitialized memory which is like the uh an analogous thing",
    "start": "2953520",
    "end": "2958880"
  },
  {
    "text": "to what memory sanitizer does in user mode currently this is a very nice tool which is an extension to c line by the",
    "start": "2958880",
    "end": "2965040"
  },
  {
    "text": "way so uh yeah so we could really do that we could also uh in like in addition to just finding",
    "start": "2965040",
    "end": "2973280"
  },
  {
    "text": "use of uninitialized memory inside of the kernel we could also possibly detect the leakage of uninitialized kernel byte",
    "start": "2973280",
    "end": "2979520"
  },
  {
    "text": "into user mode while the kernel is copying and initialized memory into user mode so so we implemented a prototype for",
    "start": "2979520",
    "end": "2986880"
  },
  {
    "text": "that and we ran it against windows just a week before this conference so it turned out that it really works we",
    "start": "2986880",
    "end": "2993920"
  },
  {
    "text": "found like 12 bucks that are uh basically disclosure of kernel bytes from",
    "start": "2993920",
    "end": "2999920"
  },
  {
    "text": "from the kernel into user mode uh in both windows 7 and the latest windows 8.1",
    "start": "2999920",
    "end": "3005520"
  },
  {
    "text": "released just just a few weeks ago and we just did by just booting up the system so we didn't run",
    "start": "3005520",
    "end": "3011119"
  },
  {
    "text": "any test we just put it the system and found this 12 bucks so i would like to show you a demo of",
    "start": "3011119",
    "end": "3016800"
  },
  {
    "text": "the zero day we're not going to release the vulnerability of course because it's not fixed yet by microsoft but",
    "start": "3016800",
    "end": "3024720"
  },
  {
    "text": "yeah we can show the bug itself so we have a windows 8 and we are going",
    "start": "3024839",
    "end": "3032400"
  },
  {
    "text": "to log into the guest account again um yeah we have the we have the exploit",
    "start": "3032400",
    "end": "3040480"
  },
  {
    "text": "here so we just run it and um the font is too small again",
    "start": "3040480",
    "end": "3047680"
  },
  {
    "text": "yeah so you can see here is like kernel bytes that are being leaked from from from the kernel mode into user mode",
    "start": "3049599",
    "end": "3055599"
  },
  {
    "text": "these are not really interesting like you cannot find any strings that you could recognize here or something",
    "start": "3055599",
    "end": "3060800"
  },
  {
    "text": "because of the type of the pool that is being used here but these are really uninitialized bytes i could also",
    "start": "3060800",
    "end": "3069359"
  },
  {
    "text": "i guess run it in another way to show you that this is really poor",
    "start": "3069359",
    "end": "3075599"
  },
  {
    "text": "memory yeah you can see like different",
    "start": "3075599",
    "end": "3082559"
  },
  {
    "text": "structures of the kernel pool here so yeah you can see it works",
    "start": "3082559",
    "end": "3088319"
  },
  {
    "text": "yeah so that's a zero day this is going to be fixed properly probably in several months but",
    "start": "3088319",
    "end": "3093359"
  },
  {
    "text": "yeah anyway",
    "start": "3093359",
    "end": "3097838"
  },
  {
    "text": "okay uh yeah we're probably going to discuss this approach uh in more detail later on probably",
    "start": "3104640",
    "end": "3110240"
  },
  {
    "text": "going to apply it for another operating system as well and get more more coverage too yeah",
    "start": "3110240",
    "end": "3115440"
  },
  {
    "text": "like linux round two yeah hopefully more success now anyway",
    "start": "3115440",
    "end": "3121440"
  },
  {
    "text": "so uh the conclusions are uh first of all the most important part i think",
    "start": "3121440",
    "end": "3126720"
  },
  {
    "text": "is that we are releasing boxbone uh us open source today so the new name then the name of the",
    "start": "3126720",
    "end": "3132559"
  },
  {
    "text": "open source project is kfedge toolkit and uh we're releasing the instrumentation part and the",
    "start": "3132559",
    "end": "3137920"
  },
  {
    "text": "post-processing part so basically everything that we use to discover all of those vulnerabilities that i talked about today",
    "start": "3137920",
    "end": "3144160"
  },
  {
    "text": "uh yeah this is on apache v2 license you have the link here so you can check out the project on github",
    "start": "3144160",
    "end": "3150400"
  },
  {
    "text": "and basically just refer to the readme for instructions of how to compile and how to use it there's like a 22 page uh",
    "start": "3150400",
    "end": "3158319"
  },
  {
    "text": "document on how to use it so uh there is also some further work to be done here",
    "start": "3158319",
    "end": "3164240"
  },
  {
    "text": "uh so we think that the kernel instrumentation is the potential of it is like far from being exhausted",
    "start": "3164240",
    "end": "3169839"
  },
  {
    "text": "you can have many many other ideas of how this could be probably used and find like hundreds of low-hanging fruit",
    "start": "3169839",
    "end": "3177200"
  },
  {
    "text": "uh so far it seems most of them are in windows but yeah we shall see how the other uh ideas that",
    "start": "3177200",
    "end": "3184480"
  },
  {
    "text": "we have now will apply to the error operating systems so yeah be be sure to check to check the k fetch",
    "start": "3184480",
    "end": "3191839"
  },
  {
    "text": "toolkit thing and hack on it maybe pour them to like another more exotic platforms or find",
    "start": "3191839",
    "end": "3197599"
  },
  {
    "text": "other patterns that you could use to discover bugs or improve the coverage which is really really useful again",
    "start": "3197599",
    "end": "3204000"
  },
  {
    "text": "or just test the other presented approaches so we really hope that the subject will be picked up because",
    "start": "3204000",
    "end": "3210640"
  },
  {
    "text": "we haven't seen too many people doing kernel instrumentation and it's really fun uh if you do have any problems or any",
    "start": "3210640",
    "end": "3216640"
  },
  {
    "text": "results with k first toolkit just let us know and check our blogs for slides and the double fetch reports that",
    "start": "3216640",
    "end": "3223280"
  },
  {
    "text": "we mentioned earlier from our previous iterations yeah so this will be published in a few days no not now yet",
    "start": "3223280",
    "end": "3229280"
  },
  {
    "text": "so thank you for coming thank you for your attention here are a few slides a few thanks to the people that help us",
    "start": "3229280",
    "end": "3234880"
  },
  {
    "text": "and other questions",
    "start": "3234880",
    "end": "3238240"
  },
  {
    "text": "hello hey is this working yeah it works all right so so you",
    "start": "3247520",
    "end": "3253680"
  },
  {
    "text": "mentioned things that cause false positives on windows right did you find similar uh",
    "start": "3253680",
    "end": "3261839"
  },
  {
    "text": "conditions for linux or bsd",
    "start": "3261839",
    "end": "3267040"
  },
  {
    "text": "yes so a couple of them were mentioned on the slides so one pattern that we see on linux",
    "start": "3269440",
    "end": "3275599"
  },
  {
    "text": "actually there's a copy string from user function which tends to do a double fetch",
    "start": "3275599",
    "end": "3280880"
  },
  {
    "text": "every time it first checks the length then allocates the memory and does the copying later it's a double",
    "start": "3280880",
    "end": "3286640"
  },
  {
    "text": "fetch but it's safe i mean we've looked at it way too much so yeah when",
    "start": "3286640",
    "end": "3291680"
  },
  {
    "text": "we publish the slides also and the logs were actually a couple of more false positives",
    "start": "3291680",
    "end": "3296960"
  },
  {
    "text": "mentioned in freebsd for example exec v is commonly called with the first argument is the program name",
    "start": "3296960",
    "end": "3303520"
  },
  {
    "text": "right the path and also the same pointer is used in the arc v table in the zero element and this",
    "start": "3303520",
    "end": "3310400"
  },
  {
    "text": "is also a double fetch false positive because actually nothing can go wrong though right so i guess that's",
    "start": "3310400",
    "end": "3315599"
  },
  {
    "text": "mostly it do you have this in a paper or some place so uh one paper on the method methodology",
    "start": "3315599",
    "end": "3324079"
  },
  {
    "text": "we published some time ago you can look it up on our blogs and then we don't publish a paper",
    "start": "3324079",
    "end": "3329599"
  },
  {
    "text": "now but there is a 23 page well document on how to use the k-fetch toolkit you might",
    "start": "3329599",
    "end": "3335440"
  },
  {
    "text": "want to refer to that but we'll also publish the logs and the logs have comments on them about how what we think about a given",
    "start": "3335440",
    "end": "3341920"
  },
  {
    "text": "report so well that's not a paper but but there is some information there as well all right thank you",
    "start": "3341920",
    "end": "3349839"
  },
  {
    "text": "okay thanks guys",
    "start": "3351680",
    "end": "3359119"
  }
]