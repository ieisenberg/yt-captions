[
  {
    "text": "[Music]",
    "start": "1130",
    "end": "14690"
  },
  {
    "text": "hello all this is nicholas jolly i will be co-presenting this talk with sarah moore we both work at the microsoft",
    "start": "15040",
    "end": "21279"
  },
  {
    "text": "security response center vmsrc i'm based in the uk in cheltenham and tsar is in",
    "start": "21279",
    "end": "28840"
  },
  {
    "text": "israel we are very happy to be talking about cherry today",
    "start": "28840",
    "end": "34239"
  },
  {
    "text": "so why are we here and why cherry well the short answer to this question is",
    "start": "34239",
    "end": "39840"
  },
  {
    "text": "that we are haunted by memory safety issues as you can see on this graph which represents the number of msrt",
    "start": "39840",
    "end": "46320"
  },
  {
    "text": "cases for memory safety issues that we had over the past five years the trend",
    "start": "46320",
    "end": "52399"
  },
  {
    "text": "isn't really going down memory safety issues is something that we are going to see",
    "start": "52399",
    "end": "57600"
  },
  {
    "text": "in the years to come why is that because enforcing memory safety this is a non-trivial problem",
    "start": "57600",
    "end": "64878"
  },
  {
    "text": "there are solutions to this such as safe languages like rust or net but the",
    "start": "64879",
    "end": "70479"
  },
  {
    "text": "problem with this is that this hardly scales it's very difficult and obviously very costly",
    "start": "70479",
    "end": "77600"
  },
  {
    "text": "to rewrite everything in the safe language so what else can we do well we",
    "start": "77600",
    "end": "82799"
  },
  {
    "text": "can push for more mitigations but the problem with mitigations is that at the end of the day they only make",
    "start": "82799",
    "end": "89680"
  },
  {
    "text": "the attacker's life a bit harder those mitigations they are rarely a silver bullet and each year there are events or",
    "start": "89680",
    "end": "97040"
  },
  {
    "text": "competitions like for example pontoon that remind us that we are losing the battle we make the attacker's life a bit",
    "start": "97040",
    "end": "105200"
  },
  {
    "text": "harder but in the end it's still possible to exploit memory safety issues so what",
    "start": "105200",
    "end": "111280"
  },
  {
    "text": "else can we consider well there are hardware solutions something like cherry for example and",
    "start": "111280",
    "end": "117439"
  },
  {
    "text": "that's why we're here today so in the following slides i will be assuming that you've never heard about",
    "start": "117439",
    "end": "122960"
  },
  {
    "text": "cherry so we'll be giving a very short introduction and then we'll be talking about some",
    "start": "122960",
    "end": "128399"
  },
  {
    "text": "vulnerabilities and attacks that we've tried against cherry and finally we'll be talking about some",
    "start": "128399",
    "end": "134959"
  },
  {
    "text": "work in progress and we'll be giving a few words in conclusion regarding our research",
    "start": "134959",
    "end": "141599"
  },
  {
    "text": "all right let's go so what is cherry a cherry has been",
    "start": "141599",
    "end": "146959"
  },
  {
    "text": "developed by folks from the cambridge university and sri international with",
    "start": "146959",
    "end": "152720"
  },
  {
    "text": "special safety in mind from the very beginning it extends a traditional isas",
    "start": "152720",
    "end": "158480"
  },
  {
    "text": "such as arm mips or wrist five with new instructions to provide special",
    "start": "158480",
    "end": "164879"
  },
  {
    "text": "safety so in this research in our research i should mention that we've only looking",
    "start": "164879",
    "end": "170560"
  },
  {
    "text": "we've only looked at the mips and arm implementations the army implementation",
    "start": "170560",
    "end": "176480"
  },
  {
    "text": "will be referred as morale in the next slides so this new model introduces a new data",
    "start": "176480",
    "end": "183840"
  },
  {
    "text": "type called capability so this is a very central point uh and we're going to talk",
    "start": "183840",
    "end": "188879"
  },
  {
    "text": "about capability uh for in in the center presentation so pay",
    "start": "188879",
    "end": "194000"
  },
  {
    "text": "attention to this so capability you can see this as an extended pointer a pointer with extra",
    "start": "194000",
    "end": "200319"
  },
  {
    "text": "information and such capability takes exactly 16 bytes",
    "start": "200319",
    "end": "205680"
  },
  {
    "text": "in memory plus one bit for a tag so in total this is 129 bits so the tag is",
    "start": "205680",
    "end": "214959"
  },
  {
    "text": "very important this is the bit that protects the capability the capability",
    "start": "214959",
    "end": "221120"
  },
  {
    "text": "cannot be forged it is unforgeable so if you try to dereference a capability that",
    "start": "221120",
    "end": "227920"
  },
  {
    "text": "doesn't take set you will trigger a fault if you try to overwrite a capability",
    "start": "227920",
    "end": "235040"
  },
  {
    "text": "you will instantly clear the tag so this tag is super important",
    "start": "235040",
    "end": "240560"
  },
  {
    "text": "so obviously cherry is a bit more than that and if you're curious or if you want to know more i encourage you to",
    "start": "240560",
    "end": "247360"
  },
  {
    "text": "have a look at the cherry documentation provided by the commerce university it's super interesting",
    "start": "247360",
    "end": "254400"
  },
  {
    "text": "so coming back to those capabilities what can we find in them well we can find of course the virtual address so",
    "start": "254400",
    "end": "260959"
  },
  {
    "text": "this is the pointer that we commonly see every day when we're dealing with c",
    "start": "260959",
    "end": "266000"
  },
  {
    "text": "we can find a few other fields such as the permissions so this is the permissions to",
    "start": "266000",
    "end": "271759"
  },
  {
    "text": "to the object pointed by the address is it readable is it writeable is it",
    "start": "271759",
    "end": "276960"
  },
  {
    "text": "executable i remember there is another field called type so this represents",
    "start": "276960",
    "end": "284160"
  },
  {
    "text": "whether the capability is sealed or not sealed means that the capability some capabilities can be made immutable or",
    "start": "284160",
    "end": "292199"
  },
  {
    "text": "non-dereferenceable for example so you can find this by reading the o type",
    "start": "292199",
    "end": "297840"
  },
  {
    "text": "field and the last field that you can find in your capability is a length",
    "start": "297840",
    "end": "303199"
  },
  {
    "text": "so this length is represented using compressed bounds",
    "start": "303199",
    "end": "308560"
  },
  {
    "text": "and because of the compression for large allocations uh just slightly more memory",
    "start": "308560",
    "end": "315440"
  },
  {
    "text": "can be sometimes allocated and this in this very specific case it's still",
    "start": "315440",
    "end": "321039"
  },
  {
    "text": "possible to get some out of bounds access but those accesses will never",
    "start": "321039",
    "end": "327280"
  },
  {
    "text": "lead to some memory safety issues that's because just a bit more memory has been allocated for capability this is just a",
    "start": "327280",
    "end": "335360"
  },
  {
    "text": "note but it's important to to have that in mind the next slide is going to show you what's a capability uh",
    "start": "335360",
    "end": "342080"
  },
  {
    "text": "you when you're debugging a program so on the left side you can see uh traditional registers and on the right",
    "start": "342080",
    "end": "349280"
  },
  {
    "text": "side you can see a bunch of capabilities so for example this one is c3 which points to some memory that is read and",
    "start": "349280",
    "end": "356319"
  },
  {
    "text": "writeable so where are we using capabilities well",
    "start": "356319",
    "end": "361680"
  },
  {
    "text": "the answer to that is pretty much everywhere when you're programming and when you are",
    "start": "361680",
    "end": "368880"
  },
  {
    "text": "allocating some objects for example whether those are in the stack or in the hip you'll be dealing with a capability",
    "start": "368880",
    "end": "376160"
  },
  {
    "text": "if you're defining some function pointers your will be you will be dealing with a capability again",
    "start": "376160",
    "end": "383120"
  },
  {
    "text": "and what about and also good stuff well you will be dealing also with a",
    "start": "383120",
    "end": "388400"
  },
  {
    "text": "capability so say that you're you're doing uh stuff in the stack for example then you will",
    "start": "388400",
    "end": "394319"
  },
  {
    "text": "be dealing with a capability say that you are doing some c prospers programming and",
    "start": "394319",
    "end": "399520"
  },
  {
    "text": "you are dealing with some zippers press objects that have some v table here again you'll be dealing with some",
    "start": "399520",
    "end": "405440"
  },
  {
    "text": "capabilities so when you're programming the compiler will under most of the",
    "start": "405440",
    "end": "411120"
  },
  {
    "text": "capabilities that the program will be using and for under the hood staff this will",
    "start": "411120",
    "end": "416960"
  },
  {
    "text": "be the responsibility of the loader to create those capabilities so obviously",
    "start": "416960",
    "end": "422800"
  },
  {
    "text": "this model suggests that the programmer is aware of specific changes",
    "start": "422800",
    "end": "429599"
  },
  {
    "text": "changes like for example casts casting a pointer to an integer is",
    "start": "429599",
    "end": "434800"
  },
  {
    "text": "something allowed in cherry however the contrary is a bit more difficult you",
    "start": "434800",
    "end": "439840"
  },
  {
    "text": "cannot for example cast from hint to pointer this is not possible what you can do is you can cast from in pointer t",
    "start": "439840",
    "end": "447759"
  },
  {
    "text": "to pointer that's a load and something also that uh we need to have in mind is that mem copy or memo",
    "start": "447759",
    "end": "454560"
  },
  {
    "text": "operations are tag preserving which means that if you try to copy a bunch of capabilities from one place to another",
    "start": "454560",
    "end": "461039"
  },
  {
    "text": "then the tag bit will be preserved it's very important to have this concept",
    "start": "461039",
    "end": "467039"
  },
  {
    "text": "when you think about exploitation so this is a short slide to show you",
    "start": "467039",
    "end": "473039"
  },
  {
    "text": "what's a capability in in the compiler after the program has been compiled so those",
    "start": "473039",
    "end": "479280"
  },
  {
    "text": "three lines of of c code shows a buffer overflow so here we have",
    "start": "479280",
    "end": "485039"
  },
  {
    "text": "a stack buffer of exactly 10 bytes that has been defined and you can see that a special",
    "start": "485039",
    "end": "490400"
  },
  {
    "text": "instruction here is setting the length of the capability to 16 bytes and if you try to",
    "start": "490400",
    "end": "497199"
  },
  {
    "text": "write out of the bounds of these capabilities then you'll get a thought a secret if you were trying to read out of",
    "start": "497199",
    "end": "503520"
  },
  {
    "text": "bounds of this capability you get again a secret",
    "start": "503520",
    "end": "509120"
  },
  {
    "text": "so this is almost the same example but this time with the hip so here we haven't shown",
    "start": "509120",
    "end": "515360"
  },
  {
    "text": "the location where the length of the capability is set but this is basically the responsibility of the allocator here",
    "start": "515360",
    "end": "522320"
  },
  {
    "text": "in this example of malloc malloc will set the length of the capability and then the program will use it and here",
    "start": "522320",
    "end": "529360"
  },
  {
    "text": "since we are trying to write out amount of capabilities will be triggering a secret",
    "start": "529360",
    "end": "536800"
  },
  {
    "text": "so if you've followed so far and if you like to write exploit now is a good time to be to start worry about sharing",
    "start": "536880",
    "end": "545120"
  },
  {
    "text": "why well cherry has two main impacts the first impact obviously is for special",
    "start": "545120",
    "end": "550480"
  },
  {
    "text": "safety out-of-bound vulnerabilities those are no longer a security concern they are",
    "start": "550480",
    "end": "556279"
  },
  {
    "text": "deterministically mitigated which means no buffer overflows no stack overflows no things like that",
    "start": "556279",
    "end": "562720"
  },
  {
    "text": "and the other consequence is that one cannot manufacture a pointer so think",
    "start": "562720",
    "end": "567760"
  },
  {
    "text": "about attacks like rope where the attacker is trying to craft some",
    "start": "567760",
    "end": "572880"
  },
  {
    "text": "arbitrary pointers those are no longer possible so in in summary cherry is a game",
    "start": "572880",
    "end": "579760"
  },
  {
    "text": "changer for the attacker trying to exploit a memory safety issues is something that is much much much",
    "start": "579760",
    "end": "586880"
  },
  {
    "text": "harder for the attacker to do let's see a quick example some quick example so if",
    "start": "586880",
    "end": "592959"
  },
  {
    "text": "you have a primitive where you can corrupt a few bits or perhaps the entirety of a monitor then cherry is",
    "start": "592959",
    "end": "599519"
  },
  {
    "text": "going to raise a tag bit violation so this violation won't happen on the moment that you grab the pointer it will",
    "start": "599519",
    "end": "606720"
  },
  {
    "text": "happen on the moment you're already referencing it if you try to uh write out of bounds",
    "start": "606720",
    "end": "612959"
  },
  {
    "text": "read or write out of bounds of a of a buffer you will get this time a length violation the only corner case",
    "start": "612959",
    "end": "620000"
  },
  {
    "text": "where it would still be possible to get some buffer overflow is when you're trying uh to uh overflow from some intra",
    "start": "620000",
    "end": "628560"
  },
  {
    "text": "objects so typically some c struct where you'd be using a buffer followed by an integer or a pointer or something like",
    "start": "628560",
    "end": "635279"
  },
  {
    "text": "that in that case it would require a special compiler flag to get rid of the issues",
    "start": "635279",
    "end": "642800"
  },
  {
    "text": "so what else well there is isn't only special safety um the problem uh is that",
    "start": "643360",
    "end": "649120"
  },
  {
    "text": "there are other issues such as such as a temporal safety issues like double",
    "start": "649120",
    "end": "654240"
  },
  {
    "text": "freeze uh use after freeze etc those are still theoretically exploitable with",
    "start": "654240",
    "end": "659440"
  },
  {
    "text": "sharing there are other things also such as type confusions or uninitialized",
    "start": "659440",
    "end": "665839"
  },
  {
    "text": "memory vulnerabilities and actually sar in the next slide is going to give you",
    "start": "665839",
    "end": "672320"
  },
  {
    "text": "a very interesting example of this and so now i'm going to leave you with",
    "start": "672320",
    "end": "677360"
  },
  {
    "text": "sar who will be talking about those vulnerabilities one last word uh",
    "start": "677360",
    "end": "682560"
  },
  {
    "text": "cherry is very good at mitigating exploits it makes x it makes writing",
    "start": "682560",
    "end": "688959"
  },
  {
    "text": "exploits tasks much much much harder than what it was before",
    "start": "688959",
    "end": "694720"
  },
  {
    "text": "all right sar it's up to you now thank you so much nico for this great introduction now",
    "start": "694720",
    "end": "700640"
  },
  {
    "text": "so let's discuss some of the attacks that are still possible on cherries about the platforms so as sure i say it",
    "start": "700640",
    "end": "705839"
  },
  {
    "text": "does not mitigate type confusions at the architectural level we can still create type confusion scenarios between",
    "start": "705839",
    "end": "711200"
  },
  {
    "text": "different simple space objects and this of course is the very powerful expectation primitive of calling",
    "start": "711200",
    "end": "716560"
  },
  {
    "text": "arbitrarily existing methods of different objects v tables and from this we can of course scroll up some",
    "start": "716560",
    "end": "722320"
  },
  {
    "text": "important metadata to escalate privileges and to trigger some information disclosures all of that",
    "start": "722320",
    "end": "727360"
  },
  {
    "text": "actually reminds me the famous park bypass that was found in objective c and relied on the fact that the isa pointer",
    "start": "727360",
    "end": "733440"
  },
  {
    "text": "was not protected by pak this is from the amazing talks and sailor head at 36 c3 and as you can see",
    "start": "733440",
    "end": "740320"
  },
  {
    "text": "and before the pack era we could just corrupt the ici printer and fake the entire class descriptor with all of the",
    "start": "740320",
    "end": "746079"
  },
  {
    "text": "vtables function pointers and basically everything and this just gave us the primitive of gaining full control over",
    "start": "746079",
    "end": "751839"
  },
  {
    "text": "the pc register and jump to an arbitrary address now given park this is no longer",
    "start": "751839",
    "end": "756880"
  },
  {
    "text": "possible of course because all of the function pointers and all of the references to code are signed by pac",
    "start": "756880",
    "end": "762320"
  },
  {
    "text": "that being said the ic printer itself was not sunway pack at the beginning it is today by the way and because it was",
    "start": "762320",
    "end": "768720"
  },
  {
    "text": "attacked pointer and therefore we could still corrupt the isa pointer and make it point to a fake class descriptor that",
    "start": "768720",
    "end": "774959"
  },
  {
    "text": "contains valid legitimate v tables and and this of course give us the",
    "start": "774959",
    "end": "780160"
  },
  {
    "text": "explanation primitive of calling arbitrary existing methods in different objective-c objects this kind of type of",
    "start": "780160",
    "end": "786560"
  },
  {
    "text": "confusions attack are very powerful and they are still possible on cherry okay now let's discuss exploitation of",
    "start": "786560",
    "end": "793760"
  },
  {
    "text": "cherry isa from in high level point of view so we all know how this classic circle of life works right we find some of them",
    "start": "793760",
    "end": "801040"
  },
  {
    "text": "zero day we shape some memory layout we trigger the vulnerability we do",
    "start": "801040",
    "end": "806160"
  },
  {
    "text": "corruption of some target structure and from this point we gain arbitrary or relative read write",
    "start": "806160",
    "end": "812399"
  },
  {
    "text": "primitives and from this point it's a game over it's a clear win now given cherry this phase of gaining relative",
    "start": "812399",
    "end": "818639"
  },
  {
    "text": "arbitrary right primitive is actually kind of broken in the sense that if you want to gain a truly generic arbitrary",
    "start": "818639",
    "end": "824800"
  },
  {
    "text": "read writes you need to gain a capability with a link that spans then the entire virtual outdoor space and",
    "start": "824800",
    "end": "830560"
  },
  {
    "text": "there is no good reason the allocator will generate you such a capability",
    "start": "830560",
    "end": "835760"
  },
  {
    "text": "please note that this makes the allocator to be in the sense some of the part of the tcp of the trusted",
    "start": "835760",
    "end": "841360"
  },
  {
    "text": "components because the allocator actually uses dedicated instructions to change and edit and modify existing",
    "start": "841360",
    "end": "847839"
  },
  {
    "text": "capabilities so we really need to make sure that the allocator cannot be compromised and that it checks the",
    "start": "847839",
    "end": "852880"
  },
  {
    "text": "integrity of its own metadata before it uses it okay great so cherry introduces a new restriction right we cannot craft",
    "start": "852880",
    "end": "859760"
  },
  {
    "text": "painters and we cannot fake pointers in any way this of course applies to everything function pointers v tables um",
    "start": "859760",
    "end": "867519"
  },
  {
    "text": "return addresses structures buffers literally everything we can even know and longer though and partial corruption",
    "start": "867519",
    "end": "874720"
  },
  {
    "text": "which is a very elegant and convenient trick and for instance if you want to deal with slr and you don't want to lick",
    "start": "874720",
    "end": "880560"
  },
  {
    "text": "the entropy bits so you can just corrupt the lsb part of a pointer and you can move it backward or forward in memory",
    "start": "880560",
    "end": "886480"
  },
  {
    "text": "such attacks are not possible on cherry at all because even if you flip one bits in a capability you clear the tag and",
    "start": "886480",
    "end": "892959"
  },
  {
    "text": "you will just trigger a cherry exception when you will try to dereference this capability okay so what we can still do",
    "start": "892959",
    "end": "899920"
  },
  {
    "text": "is we can move an existing capability from one place to another and this of course opens a pretty wide range of",
    "start": "899920",
    "end": "906160"
  },
  {
    "text": "opportunities for us and for instance if we want to exploit and use after free bug",
    "start": "906160",
    "end": "911360"
  },
  {
    "text": "does not mitigate temporal safety at the architectural level as well so we can just replace a structure a",
    "start": "911360",
    "end": "917360"
  },
  {
    "text": "with a structure b in memory and we can choose our structures such that the v tables or some other pointers will be at",
    "start": "917360",
    "end": "924240"
  },
  {
    "text": "the same offsets and we can treat these pointers differently this kind of type confusions attack are very powerful and",
    "start": "924240",
    "end": "931360"
  },
  {
    "text": "they can be converted into a very exploitation primitives",
    "start": "931360",
    "end": "936880"
  },
  {
    "text": "okay now let's talk about slr this is really fun slr means nothing on cherry and because we cannot corrupt or fake",
    "start": "936880",
    "end": "944320"
  },
  {
    "text": "pointers in any way there is zero value for us to know the layout of the virtual address space right we really don't care",
    "start": "944320",
    "end": "950560"
  },
  {
    "text": "where the star keep and leaps are located because we cannot even use this information in our exploits to begin",
    "start": "950560",
    "end": "956639"
  },
  {
    "text": "with and and this is of course by design when people build the model of cherry they try to create a threat model where",
    "start": "956639",
    "end": "962720"
  },
  {
    "text": "we can assume that we can give the attackers the entire layout of all of the virtual address space and it shouldn't help them at all",
    "start": "962720",
    "end": "969759"
  },
  {
    "text": "i really do want to make a very important distinction here between bypassing slr and generic",
    "start": "969759",
    "end": "976240"
  },
  {
    "text": "information disclosures because while we really don't care about people leaking capabilities and know the layout of the",
    "start": "976240",
    "end": "981600"
  },
  {
    "text": "virtual address space we really do carry and we don't want attackers to be able to leak secret or confidential data",
    "start": "981600",
    "end": "987680"
  },
  {
    "text": "across different security domains we even have some models such as the home sandbox for windows that rely on the",
    "start": "987680",
    "end": "993199"
  },
  {
    "text": "fact that you cannot leak secrets in the homes and box for windows for example if you lick the port names from outside the",
    "start": "993199",
    "end": "999279"
  },
  {
    "text": "sandbox you can escape the sandbox by design so we really do care about that",
    "start": "999279",
    "end": "1004720"
  },
  {
    "text": "okay now let's go to the exploitation so we have a port of jsc over pure capability cherry",
    "start": "1004720",
    "end": "1012240"
  },
  {
    "text": "this is very convenient uh we use that in our first offensive research on cherry mips and we still use that in our",
    "start": "1012240",
    "end": "1019040"
  },
  {
    "text": "research on morelo which is cherry on arm javascript engines are just a great place to export vulnerabilities in right",
    "start": "1019040",
    "end": "1025600"
  },
  {
    "text": "we have a script in language which is highly convenient for exploitation and ever since morello we have jeets which",
    "start": "1025600",
    "end": "1031760"
  },
  {
    "text": "is fantastic because jit compilers are have been proven to be a very rich place",
    "start": "1031760",
    "end": "1036880"
  },
  {
    "text": "for bugs and for security issues so it just looks like the right place to start from and i want to start with an amazing",
    "start": "1036880",
    "end": "1042720"
  },
  {
    "text": "bar an uninitialized stock in jsc full credit goes to bruno",
    "start": "1042720",
    "end": "1048640"
  },
  {
    "text": "and then to lucatodesco the one and only who did an amazing job exploiting this vulnerability and all of this",
    "start": "1048640",
    "end": "1054799"
  },
  {
    "text": "understanding of the root cause is based on their work so let's see what's going on here so as we all know registers is a",
    "start": "1054799",
    "end": "1061760"
  },
  {
    "text": "limited resource right and in many cases we need to free up some registers when we have no ones available",
    "start": "1061760",
    "end": "1068720"
  },
  {
    "text": "and in order to do so we need to implement some kind of a context switch we need to take all of the values that",
    "start": "1068720",
    "end": "1075039"
  },
  {
    "text": "are currently stored in the registers and just store them to some piece of memory start",
    "start": "1075039",
    "end": "1080160"
  },
  {
    "text": "hip or whatever and then later on when we want to continue the execution we",
    "start": "1080160",
    "end": "1085360"
  },
  {
    "text": "need to restore all of these values from memory into the corresponding registers and then keep going",
    "start": "1085360",
    "end": "1091600"
  },
  {
    "text": "and in many cases these values are being written to the stack okay great now the jsc register",
    "start": "1091600",
    "end": "1098160"
  },
  {
    "text": "allocator makes this very interesting assumption that allocations happen unconditionally and this is interesting",
    "start": "1098160",
    "end": "1104240"
  },
  {
    "text": "because if we have some flow in jsc that has a conditional branch and then does a",
    "start": "1104240",
    "end": "1109360"
  },
  {
    "text": "register allocation it means that we can skip this register allocation and therefore we may skip all",
    "start": "1109360",
    "end": "1114960"
  },
  {
    "text": "of these rights into the stack and this is very problematic because if there will be some flow later on uh that will",
    "start": "1114960",
    "end": "1121200"
  },
  {
    "text": "try to use a value that is corresponding to a supposedly spilled register from before we just created here a scenario",
    "start": "1121200",
    "end": "1128480"
  },
  {
    "text": "of using of uninitialized value from the stack and this gets super interesting because",
    "start": "1128480",
    "end": "1134240"
  },
  {
    "text": "we can use the jit compiler to compile some javascript functions that fetch a pointer or in our case a capability on",
    "start": "1134240",
    "end": "1140720"
  },
  {
    "text": "cherry a pointer from the stack that points to some js object of a certain type and you can use our bug in order to",
    "start": "1140720",
    "end": "1147440"
  },
  {
    "text": "make the stack address to contain an uninitialized value and therefore we can shape this stack",
    "start": "1147440",
    "end": "1153039"
  },
  {
    "text": "and upfront to drop their capability a valid capability that points to a different js object of a different type",
    "start": "1153039",
    "end": "1160559"
  },
  {
    "text": "and this is how we can convert in a very elegant way this uninitialized use from the stack into a type confusion",
    "start": "1160559",
    "end": "1168320"
  },
  {
    "text": "okay great so let's see some code so this function com compile string slice is the function",
    "start": "1168320",
    "end": "1174799"
  },
  {
    "text": "that contains the bug and as you can see we have our conditional branch and then we have some register allocation and of",
    "start": "1174799",
    "end": "1180480"
  },
  {
    "text": "course this register allocation may need to write some data into the stack and but if we will take the conditional",
    "start": "1180480",
    "end": "1186880"
  },
  {
    "text": "branch we just keep the register allocation and all of this area on the stack will just remain uninitialized",
    "start": "1186880",
    "end": "1193039"
  },
  {
    "text": "okay great now we said that we can control then initialize and shape the stack right so let's see how we can do",
    "start": "1193039",
    "end": "1198240"
  },
  {
    "text": "it this is actually super simple if you want to write some data to the stack let's just call a function which",
    "start": "1198240",
    "end": "1203600"
  },
  {
    "text": "allocate it on stack frame and then have this function to write some data into its own local stack frame and then when",
    "start": "1203600",
    "end": "1209280"
  },
  {
    "text": "this function returns all of the data that we just wrote to the stack simply remains there until something else will",
    "start": "1209280",
    "end": "1215679"
  },
  {
    "text": "come and override it so in our case we can simply implement two different javascript functions of",
    "start": "1215679",
    "end": "1221919"
  },
  {
    "text": "one and opt that are basically identical and we just use them with different kind of objects we just pass them as",
    "start": "1221919",
    "end": "1228400"
  },
  {
    "text": "arguments capabilities that points to two different js objects and so in this",
    "start": "1228400",
    "end": "1234159"
  },
  {
    "text": "case for example let's call opt one with capability that points to a js object of",
    "start": "1234159",
    "end": "1239440"
  },
  {
    "text": "type a and then we will call opt with a capability that points to a js object of",
    "start": "1239440",
    "end": "1244480"
  },
  {
    "text": "type b and then because of the bug opt will fetch from the stack a capability",
    "start": "1244480",
    "end": "1249520"
  },
  {
    "text": "that it believes that points to type b because we use the jit compiler and we train this function to be compiled with",
    "start": "1249520",
    "end": "1256159"
  },
  {
    "text": "type b but opt one actually wrote something to this and to this uninitialized value on the",
    "start": "1256159",
    "end": "1262799"
  },
  {
    "text": "stack and this something is a capability that points to type a and this is how we can con create this type confusion",
    "start": "1262799",
    "end": "1270159"
  },
  {
    "text": "okay now let's see the plc and actually we can do more in this plc we can convert the type",
    "start": "1270159",
    "end": "1276080"
  },
  {
    "text": "confusion to be out of bound read in a very simple way and great vlog and great",
    "start": "1276080",
    "end": "1281919"
  },
  {
    "text": "curse to luca for this exploit again so what we have is just a lot of useless",
    "start": "1281919",
    "end": "1287120"
  },
  {
    "text": "accesses to the stock to make sure that we have the stack frame that we want and then we need to do a type proof this is",
    "start": "1287120",
    "end": "1293200"
  },
  {
    "text": "very important we need to fetch for some field in the object because this will tell the data flow graph that it can",
    "start": "1293200",
    "end": "1299200"
  },
  {
    "text": "emit some structure checks and this is super important because we have a type confusion and these structural checks",
    "start": "1299200",
    "end": "1305760"
  },
  {
    "text": "may break the exploits and it could cache us and then we do the bug trigger we call slice",
    "start": "1305760",
    "end": "1312480"
  },
  {
    "text": "on a string which calls compile string slice the function that contains the bug and this creates the uninitialized on",
    "start": "1312480",
    "end": "1318000"
  },
  {
    "text": "the stack and then we call get by offset but this get by offsets with big",
    "start": "1318000",
    "end": "1323039"
  },
  {
    "text": "it will be called on an arbitrarily type red from the stack instead of on a proven type",
    "start": "1323039",
    "end": "1329760"
  },
  {
    "text": "okay so this is super simple let's see how we can complete this out of one grid so we",
    "start": "1329760",
    "end": "1335520"
  },
  {
    "text": "just need a to define some some objects and we just create an",
    "start": "1335520",
    "end": "1341600"
  },
  {
    "text": "object with five fields and then another object with four fields and then we need to repeat this second object because we",
    "start": "1341600",
    "end": "1347760"
  },
  {
    "text": "have an out of bound read here so we want two continuous allocations on the heap and",
    "start": "1347760",
    "end": "1354080"
  },
  {
    "text": "and different types on jsc are actually allocated in different areas and then",
    "start": "1354080",
    "end": "1359760"
  },
  {
    "text": "we'll just try to fetch to read a field a from obj2 but because of the type confusion we",
    "start": "1359760",
    "end": "1366320"
  },
  {
    "text": "actually use the offset of a in obj1 which is clearly clearly an out of bound for obj2 okay great fantastic um",
    "start": "1366320",
    "end": "1374960"
  },
  {
    "text": "now let's talk for a minute and talk about this that it's pretty well that we're standing here and talking about out of bound on sharing",
    "start": "1374960",
    "end": "1381520"
  },
  {
    "text": "because we said the cherry i say does mitigate special safety in the architectural level so yes it does",
    "start": "1381520",
    "end": "1387919"
  },
  {
    "text": "through and cherry does a wonderful job in deterministically mitigate special safety at the",
    "start": "1387919",
    "end": "1393600"
  },
  {
    "text": "architectural level but if you want to get all of these guarantees from the architecture you need to use it right",
    "start": "1393600",
    "end": "1399600"
  },
  {
    "text": "for instance you absolutely need to make sure that your allocators for star keep in global set the accurate bounds in all",
    "start": "1399600",
    "end": "1406240"
  },
  {
    "text": "of the couple in all of the capabilities they return and as it turns out in the prototype",
    "start": "1406240",
    "end": "1411919"
  },
  {
    "text": "that we were working on the cherry bsd over morelo all of the allocators for start keeping",
    "start": "1411919",
    "end": "1417679"
  },
  {
    "text": "global did a fantastic job but the allocator for the jsl heap did not and it just sets 16k for bands for",
    "start": "1417679",
    "end": "1425360"
  },
  {
    "text": "all of the allocations that it's um that it's like returns and this is",
    "start": "1425360",
    "end": "1431120"
  },
  {
    "text": "why this technique works on morelo just as it works on ubuntu x64 or like ios or",
    "start": "1431120",
    "end": "1436960"
  },
  {
    "text": "any other platform and now this actually was fixed in a dev branch of webkit over cherry so we",
    "start": "1436960",
    "end": "1444000"
  },
  {
    "text": "can actually see the difference on the left hand side you can see the main branch with the bug and you can see that all of",
    "start": "1444000",
    "end": "1449440"
  },
  {
    "text": "the capabilities have a 16k for bounce and on the right hand side you can simply see that all of the capabilities",
    "start": "1449440",
    "end": "1456640"
  },
  {
    "text": "have accurate bounds okay great and this is the commit a fantastic",
    "start": "1456640",
    "end": "1462720"
  },
  {
    "text": "job by brett from the university of cambridge okay now we have a very stable",
    "start": "1462720",
    "end": "1468240"
  },
  {
    "text": "out of boundary right so let's see what we can do with it we already agreed that asl is out of the picture it's",
    "start": "1468240",
    "end": "1474000"
  },
  {
    "text": "absolutely not interesting and this is a good time to talk about structure ids every type in jsc has a unique structure",
    "start": "1474000",
    "end": "1481039"
  },
  {
    "text": "id a tilted bits that are stored as the first deload of every object",
    "start": "1481039",
    "end": "1487279"
  },
  {
    "text": "and attackers supposedly need to know a valid structure id in order to fake objects in memory because there are many",
    "start": "1487279",
    "end": "1493279"
  },
  {
    "text": "structure checks that make sure that every time that we are about to operate on some objects we need to make sure that this object is",
    "start": "1493279",
    "end": "1500480"
  },
  {
    "text": "of the type that we are expecting from it to be uh and",
    "start": "1500480",
    "end": "1506159"
  },
  {
    "text": "back in the day it was actually very easy to guess and predict these structure ideas you could just spray a",
    "start": "1506159",
    "end": "1512000"
  },
  {
    "text": "lot of like different types and objects and then you could guess that for instance structured thousands is of a",
    "start": "1512000",
    "end": "1517200"
  },
  {
    "text": "certain type and it works fantastic and everybody did it and because everybody did it apple added a randomization that",
    "start": "1517200",
    "end": "1523039"
  },
  {
    "text": "called structure radio randomization that does exactly what its name suggests it just randomizes all of the structure",
    "start": "1523039",
    "end": "1528159"
  },
  {
    "text": "ideas and this is a very good example for mitigation that it would be very interesting for us to bypass on cherry",
    "start": "1528159",
    "end": "1534480"
  },
  {
    "text": "because even though there are many mitigations that we might remove given cherry such as acelav",
    "start": "1534480",
    "end": "1541039"
  },
  {
    "text": "and some others this is a very good example of a mitigation that we still want to keep around because it make a faking structures more",
    "start": "1541039",
    "end": "1548640"
  },
  {
    "text": "difficult okay so let's try to leak some structure id and this is actually something that you can",
    "start": "1548640",
    "end": "1554720"
  },
  {
    "text": "see in many webkit exploits today most of the exploits just opened with a licking a valid",
    "start": "1554720",
    "end": "1561120"
  },
  {
    "text": "saxophone structure ready okay and this is the commits that added the",
    "start": "1561120",
    "end": "1566559"
  },
  {
    "text": "randomization of the structure ideas so this is the the part of uh likable plc",
    "start": "1566559",
    "end": "1573120"
  },
  {
    "text": "that did compile the javascript functions as in and and as you can see we have the",
    "start": "1573120",
    "end": "1578799"
  },
  {
    "text": "definitions for all of the objects and we set a pattern here in objects to an victim so we could identify them in",
    "start": "1578799",
    "end": "1585120"
  },
  {
    "text": "memory and this is on morelo and you can simply see that obj2 and victim are allocated continuously on the hip and",
    "start": "1585120",
    "end": "1591840"
  },
  {
    "text": "the first deal in both of these objects is the 32-bit structure ids and clearly",
    "start": "1591840",
    "end": "1597919"
  },
  {
    "text": "we can understand it if we'll just trigger the art of madrid from obj2",
    "start": "1597919",
    "end": "1603039"
  },
  {
    "text": "to victim we'll just fetch and read the structure id of victim and this is exactly what",
    "start": "1603039",
    "end": "1608880"
  },
  {
    "text": "happens and and now we will go back to nico which will show us the second",
    "start": "1608880",
    "end": "1614559"
  },
  {
    "text": "vulnerability and the second exploit thank you thank you sir that was super interesting",
    "start": "1614559",
    "end": "1621600"
  },
  {
    "text": "so we first had a look at cherry in summer 2020 and",
    "start": "1621600",
    "end": "1626880"
  },
  {
    "text": "we looked particularly at jsc on cherry bsd on actually cherry mips",
    "start": "1626880",
    "end": "1632559"
  },
  {
    "text": "the question that we had was that we knew that sherry was very good at mitigating special safety issue but we",
    "start": "1632559",
    "end": "1639679"
  },
  {
    "text": "knew that there was still a concern with temporal safety so our question was provided with special safety would we",
    "start": "1639679",
    "end": "1646720"
  },
  {
    "text": "still be able to exploit a temporal safety issue so to try to solve this question we",
    "start": "1646720",
    "end": "1652640"
  },
  {
    "text": "looked we looked at jc and we wanted to have a look at some cvs and see if we",
    "start": "1652640",
    "end": "1658080"
  },
  {
    "text": "could still exploit those problem that we faced is that",
    "start": "1658080",
    "end": "1663200"
  },
  {
    "text": "well one of one of the problem with with jsc on mips is that jit the jit is",
    "start": "1663200",
    "end": "1669520"
  },
  {
    "text": "unsupported and there were something else like the gc garbage collection that wasn't really",
    "start": "1669520",
    "end": "1675360"
  },
  {
    "text": "working so we couldn't really trigger some use after three issues so instead we went for the easy way and we",
    "start": "1675360",
    "end": "1681600"
  },
  {
    "text": "introduced a stack user factor free stack uaf so why this kind of issue the reason is",
    "start": "1681600",
    "end": "1688559"
  },
  {
    "text": "a few years ago we had a bunch of test cases in chakra and the scenario here",
    "start": "1688559",
    "end": "1694880"
  },
  {
    "text": "was that in some cases it was possible with the jit to allocate an object in the stack and because of the bug in",
    "start": "1694880",
    "end": "1701360"
  },
  {
    "text": "chakra it would be possible for an attacker later to uh to use that reference and so this would",
    "start": "1701360",
    "end": "1709840"
  },
  {
    "text": "give him the ability to read and write stuff in the stack so this was a super",
    "start": "1709840",
    "end": "1715039"
  },
  {
    "text": "powerful primitive so we were a bit curious about those issues and we wanted to see how far cherry",
    "start": "1715039",
    "end": "1722399"
  },
  {
    "text": "would be able to mitigate those so to do that we decided to introduce a",
    "start": "1722399",
    "end": "1728480"
  },
  {
    "text": "bug in the era buffer so something very simple so here we just chant a couple of",
    "start": "1728480",
    "end": "1734240"
  },
  {
    "text": "lines and so instead of dealing with the hip the array buffer would now be dealing with the stack",
    "start": "1734240",
    "end": "1740480"
  },
  {
    "text": "so a trigger would be super simple so we would just allocate a normal array buffer and then we would slice it and",
    "start": "1740480",
    "end": "1746960"
  },
  {
    "text": "that would give a view to the stack to the attacker so what can we do with",
    "start": "1746960",
    "end": "1753039"
  },
  {
    "text": "that well if you know sar you know that once you've got your read and write permittee well it's game over",
    "start": "1753039",
    "end": "1760240"
  },
  {
    "text": "so we want to get to the same state but here we have cherry to deal with so first what can what",
    "start": "1760240",
    "end": "1768000"
  },
  {
    "text": "where do we want to go first we want to see if we can copy a capability from one",
    "start": "1768000",
    "end": "1773279"
  },
  {
    "text": "place to another without losing the tag the tag bits so at first i thought that this would be",
    "start": "1773279",
    "end": "1779120"
  },
  {
    "text": "easy i would just have to use some known types in javascript that",
    "start": "1779120",
    "end": "1784320"
  },
  {
    "text": "would be using 128 bits the problem with the gic at least on",
    "start": "1784320",
    "end": "1790080"
  },
  {
    "text": "mips is that there is no such objects that uh that exists at my at most",
    "start": "1790080",
    "end": "1796080"
  },
  {
    "text": "float takes 64 bits and so if you try to copy two floats then obviously you will lose the",
    "start": "1796080",
    "end": "1803760"
  },
  {
    "text": "the tag bit so this proved to be a bit more difficult than expected",
    "start": "1803760",
    "end": "1810320"
  },
  {
    "text": "so by looking for move online copy the source code we noticed two methods typed",
    "start": "1810320",
    "end": "1816159"
  },
  {
    "text": "our reset and slice and it turns out that when the destination and source have the same",
    "start": "1816159",
    "end": "1823520"
  },
  {
    "text": "type it's possible to enter this particular piece of code and here as you can see",
    "start": "1823520",
    "end": "1830159"
  },
  {
    "text": "there is a main move so which means that if we are",
    "start": "1830159",
    "end": "1836799"
  },
  {
    "text": "using set uh typed reset with two array buffers that have the same type then",
    "start": "1836799",
    "end": "1843440"
  },
  {
    "text": "we'll be uh able to copy a capability from one array buffer located in the stack to",
    "start": "1843440",
    "end": "1849679"
  },
  {
    "text": "another array buffer in the heap so that's already a good step now can we read from anywhere well not",
    "start": "1849679",
    "end": "1858000"
  },
  {
    "text": "exactly anywhere you cannot read from 4141.41 for example this is not possible",
    "start": "1858000",
    "end": "1863600"
  },
  {
    "text": "with cherry you have to read from a valid capability so what can we do for example we can",
    "start": "1863600",
    "end": "1869200"
  },
  {
    "text": "read capabilities in the stack but can we really read from those capabilities well",
    "start": "1869200",
    "end": "1874399"
  },
  {
    "text": "it turns out that with re-entrancy applied on the length argument we could for example trigger again the",
    "start": "1874399",
    "end": "1880960"
  },
  {
    "text": "same issue and this time alter will change the sorcery capability",
    "start": "1880960",
    "end": "1886720"
  },
  {
    "text": "so we would be triggering twice the issue once to get into",
    "start": "1886720",
    "end": "1893120"
  },
  {
    "text": "the set function then we would trigger around 20 and then we would trigger again the same issue to",
    "start": "1893120",
    "end": "1899039"
  },
  {
    "text": "overwrite the source array and in that state we will be able to read",
    "start": "1899039",
    "end": "1904080"
  },
  {
    "text": "from anywhere and i mean from any valid capability so this is already a good",
    "start": "1904080",
    "end": "1909519"
  },
  {
    "text": "step now can we write anything anywhere",
    "start": "1909519",
    "end": "1914799"
  },
  {
    "text": "well the answer to that is likely i'm saying likely because i didn't already explore this possibility it turns out that the",
    "start": "1914799",
    "end": "1922080"
  },
  {
    "text": "bug that we introduced was already quite powerful we were able to write things in the stack so we were able to correct",
    "start": "1922080",
    "end": "1928640"
  },
  {
    "text": "pointers no need to be able to write something anywhere but if you look at",
    "start": "1928640",
    "end": "1934000"
  },
  {
    "text": "set or slides it's likely that you'd be able to do exactly",
    "start": "1934000",
    "end": "1939279"
  },
  {
    "text": "the same thing so now that we have that in mind where are we going so ideally we would want to",
    "start": "1939279",
    "end": "1945919"
  },
  {
    "text": "reach a function that would that would allow the attacker to execute an arbitrary command something like",
    "start": "1945919",
    "end": "1952480"
  },
  {
    "text": "system for example where can we find a system libsy.system it turns out that",
    "start": "1952480",
    "end": "1957600"
  },
  {
    "text": "there is one place where we can find it it's a cherry capability table and it also turns out that the cherry cabbage",
    "start": "1957600",
    "end": "1964559"
  },
  {
    "text": "table is used everywhere by the compiler you're going to see tons of references",
    "start": "1964559",
    "end": "1969919"
  },
  {
    "text": "to it in the stack so this makes it super convenient for the attacker you cannot",
    "start": "1969919",
    "end": "1976000"
  },
  {
    "text": "you can just read a pointer to a cherry capability table and then traverse that pointer up to finding a pointer to",
    "start": "1976000",
    "end": "1983519"
  },
  {
    "text": "system so this is what we are going to do we are going to traverse enough capability",
    "start": "1983519",
    "end": "1990480"
  },
  {
    "text": "up to reading system and then we'll find a way to get rc",
    "start": "1990480",
    "end": "1995760"
  },
  {
    "text": "so how to get rc so one could for example just try to overwrite a return",
    "start": "1995760",
    "end": "2000960"
  },
  {
    "text": "address with a capability to system but the problem with that is that because of the",
    "start": "2000960",
    "end": "2006640"
  },
  {
    "text": "current convention uh system would use its first argument in a register and so",
    "start": "2006640",
    "end": "2013360"
  },
  {
    "text": "if you try to overwrite a return address then you'd also have to make sure that this particular register would be set to",
    "start": "2013360",
    "end": "2021039"
  },
  {
    "text": "uh your uh your your own value and because of that it makes things uh",
    "start": "2021039",
    "end": "2026640"
  },
  {
    "text": "really hard to to implement it might be possible but definitely harder so what we did instead",
    "start": "2026640",
    "end": "2033679"
  },
  {
    "text": "is that we targeted a saved c plus plus object in the stack so an object with a v table",
    "start": "2033679",
    "end": "2041120"
  },
  {
    "text": "and here it would be super easy actually to fake a v table you can with cherry",
    "start": "2041120",
    "end": "2046480"
  },
  {
    "text": "you just see you can as i said in the beginning of the table is just again a capability a capability to some other",
    "start": "2046480",
    "end": "2053280"
  },
  {
    "text": "capabilities so something that is easy to to achieve with uh with an array",
    "start": "2053280",
    "end": "2058320"
  },
  {
    "text": "buffer so we would just create an array buffer and then add some offset in this array buffer copy the capabilities",
    "start": "2058320",
    "end": "2065440"
  },
  {
    "text": "to system and that would be rv table something really easy in the end",
    "start": "2065440",
    "end": "2071599"
  },
  {
    "text": "and so in the end we just need to overwrite two pointers two capabilities in the stack one for dc plus plus object",
    "start": "2071599",
    "end": "2079118"
  },
  {
    "text": "and one for for the argument and then we'll just wait for the stack",
    "start": "2079119",
    "end": "2085358"
  },
  {
    "text": "to and win to execute or payload and so this is a result i agree with you",
    "start": "2085359",
    "end": "2090878"
  },
  {
    "text": "that this isn't very impressive but at least it works you can see a ping to uh some some websites executed just from",
    "start": "2090879",
    "end": "2098480"
  },
  {
    "text": "loaded uh a script with jsc and now i'm going to hand over again to",
    "start": "2098480",
    "end": "2105680"
  },
  {
    "text": "sar who will be talking about some work in progress and we'll be concluding",
    "start": "2105680",
    "end": "2110960"
  },
  {
    "text": "thank you thank you so much nico this was super interesting okay so now let's talk about how we can present some",
    "start": "2110960",
    "end": "2117280"
  },
  {
    "text": "hardening of cherry so as we saw cherry isa gives us known for non-foldable",
    "start": "2117280",
    "end": "2124160"
  },
  {
    "text": "references to virtual memory and bounce and permission check at the architectural level which is amazing",
    "start": "2124160",
    "end": "2130480"
  },
  {
    "text": "and if we just use cherry aware compiler and runtime we could actually achieve um",
    "start": "2130480",
    "end": "2137040"
  },
  {
    "text": "deterministic mitigation for all of the special safety variants and it's fantastic and this means that we just",
    "start": "2137040",
    "end": "2143040"
  },
  {
    "text": "left with temple safety type safety allocator safety and probably some other stuff that we need to care about",
    "start": "2143040",
    "end": "2149440"
  },
  {
    "text": "and we just want to mention here that there are some fantastic and really impressive work in progress projects",
    "start": "2149440",
    "end": "2155200"
  },
  {
    "text": "they try to present software solutions for these backlashes a very good example is cornucopia which is capability",
    "start": "2155200",
    "end": "2161760"
  },
  {
    "text": "revocation it's an extension for the virtual memory subsystem in cherry bcd and it's",
    "start": "2161760",
    "end": "2169200"
  },
  {
    "text": "um it's simply represents a deterministic mitigation",
    "start": "2169200",
    "end": "2176000"
  },
  {
    "text": "for c and c plus plus heap temporal safety issues mostly focused on heap use after freeze and we don't have time to",
    "start": "2176000",
    "end": "2182480"
  },
  {
    "text": "talk about all of the details but there is a great paper that you can check out and there is actually the code in a",
    "start": "2182480",
    "end": "2188960"
  },
  {
    "text": "dedicated branch of cherry bsd that implements capability revocation so please check it out",
    "start": "2188960",
    "end": "2195760"
  },
  {
    "text": "another very important example is jit jit is always a very sensitive and very very dangerous place and for instance we",
    "start": "2195760",
    "end": "2203280"
  },
  {
    "text": "do want to make sure that we can enforce right so x right we don't want to have one physical page that is both writable",
    "start": "2203280",
    "end": "2209920"
  },
  {
    "text": "and executable at the same time so instead of just having two different virtual mappings that the first one is",
    "start": "2209920",
    "end": "2215760"
  },
  {
    "text": "read right and the second one is it executes we can just have two different capabilities the first one is read right",
    "start": "2215760",
    "end": "2221040"
  },
  {
    "text": "and the other one is executed and it's very elegant and this is very good example for the fact that cherry isa",
    "start": "2221040",
    "end": "2228240"
  },
  {
    "text": "is also provide us very very like unique set of abilities in",
    "start": "2228240",
    "end": "2233359"
  },
  {
    "text": "hardware that we can take advantage on from software in order to implement a more elegant and stable software",
    "start": "2233359",
    "end": "2239839"
  },
  {
    "text": "solutions and and this is for instance a commit from brett from the",
    "start": "2239839",
    "end": "2246800"
  },
  {
    "text": "university of cambridge that implements this idea of just like having and",
    "start": "2246800",
    "end": "2252240"
  },
  {
    "text": "capabilities that are only recreatable or executable in the",
    "start": "2252240",
    "end": "2257440"
  },
  {
    "text": "executable allocator okay so some takeaways cherry isa",
    "start": "2257440",
    "end": "2262720"
  },
  {
    "text": "mitigates a very wide range of backlashes at the architectural level fantastic and cherry i say significantly",
    "start": "2262720",
    "end": "2269440"
  },
  {
    "text": "like raises the uh the the bar for exploitation uh",
    "start": "2269440",
    "end": "2274560"
  },
  {
    "text": "in a very elegant in a very unique way and it's very important to keep in mind that cherry offers a lot of abilities in",
    "start": "2274560",
    "end": "2281839"
  },
  {
    "text": "hardware just like we said that you can take advantage on from software and it's very important to keep in mind",
    "start": "2281839",
    "end": "2288400"
  },
  {
    "text": "that it's only the beginning there is so much to innovate research and to develop in",
    "start": "2288400",
    "end": "2294079"
  },
  {
    "text": "in this area so we absolutely hope that all of you will like jump by and we'll try to help to make cherry and um better",
    "start": "2294079",
    "end": "2302720"
  },
  {
    "text": "and stronger and now it's time for shout outs and this project could not have",
    "start": "2302720",
    "end": "2308079"
  },
  {
    "text": "been done without an amazing force for many different teams and organizations msrc msr cambridge and like many other",
    "start": "2308079",
    "end": "2315520"
  },
  {
    "text": "partners we cannot mention all of you but thank you so much it was super fun to work together and to",
    "start": "2315520",
    "end": "2321680"
  },
  {
    "text": "collaborate on this project here are some references that you can follow on cherry and thank you",
    "start": "2321680",
    "end": "2329200"
  }
]