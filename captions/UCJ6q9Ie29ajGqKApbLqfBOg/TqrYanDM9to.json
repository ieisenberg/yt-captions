[
  {
    "text": "my presentation topic is excusable holy memory switch so exo-m switch the",
    "start": "900",
    "end": "7770"
  },
  {
    "text": "purpose of that is trying to hide your code from you know advanced code reuse attacks in one shot I just named it like",
    "start": "7770",
    "end": "16230"
  },
  {
    "text": "EXO aims which is pretty descriptive way so that you know Intel lawyers won't you know shoot me this is the first time I",
    "start": "16230",
    "end": "24689"
  },
  {
    "text": "participating blackhat this is a short bio of myself and I'm currently my name is Ming Wei Zhang and currently a",
    "start": "24689",
    "end": "31410"
  },
  {
    "text": "research scientist in anti-malware research team in Intel ABS my research span across a wide range of topics",
    "start": "31410",
    "end": "37920"
  },
  {
    "text": "including program modeling using Intel hardware features anti-malware technologies dynamics and boxing for",
    "start": "37920",
    "end": "44280"
  },
  {
    "text": "Android it was machine learning and etc so I received my PhD in 2015 in Stony",
    "start": "44280",
    "end": "49469"
  },
  {
    "text": "Brook I was my PhD program was focused on software security via binary writing",
    "start": "49469",
    "end": "55739"
  },
  {
    "text": "and program analysis you can find me through the links below and today I",
    "start": "55739",
    "end": "61140"
  },
  {
    "text": "would you know divide my topic into the five parts so let's fire let's come to",
    "start": "61140",
    "end": "67229"
  },
  {
    "text": "the problem statement first as we can see that code we use attacks has been",
    "start": "67229",
    "end": "73170"
  },
  {
    "text": "you know played around for a quiet why almost a decade the reason why you know",
    "start": "73170",
    "end": "78840"
  },
  {
    "text": "ROP attacks is popular because it is effective way to bypass dep data",
    "start": "78840",
    "end": "84330"
  },
  {
    "text": "execution prevention it allows attackers to executing code without coding Jackson",
    "start": "84330",
    "end": "90930"
  },
  {
    "text": "right Cody reuse attacks however you know requires an accurate location of",
    "start": "90930",
    "end": "96180"
  },
  {
    "text": "you know you know smoke chunk of code to be executed called gadget which may and",
    "start": "96180",
    "end": "101490"
  },
  {
    "text": "because they want to find accurately location of those gadget and it may suffer from code diversity and code",
    "start": "101490",
    "end": "107790"
  },
  {
    "text": "randomization defenses so that's why attackers in recent days generate new",
    "start": "107790",
    "end": "113369"
  },
  {
    "text": "type of attack or advanced code reuse attack let's summarize so the purpose of that attack is trying to design",
    "start": "113369",
    "end": "120360"
  },
  {
    "text": "especially to solve the problem of gadget availability as we can see from",
    "start": "120360",
    "end": "125939"
  },
  {
    "text": "left hand side this is a you know the way how traditional code would use attacks is working so basically the",
    "start": "125939",
    "end": "131819"
  },
  {
    "text": "hackers trying to get has already got the heap vulnerabilities he trying to you know has already controlled a trunk",
    "start": "131819",
    "end": "138959"
  },
  {
    "text": "of memory in the heap and then he read rat control to you know the stack pointer to the heap you know and then",
    "start": "138959",
    "end": "145499"
  },
  {
    "text": "start executing the small chunk of code located inside the binaries they find so",
    "start": "145499",
    "end": "152340"
  },
  {
    "text": "one of the key reason this success what makes this kind of attack could be succeed is because attackers already has",
    "start": "152340",
    "end": "160049"
  },
  {
    "text": "the prior knowledge of the code you know the binary layout one of the type of",
    "start": "160049",
    "end": "165810"
  },
  {
    "text": "advanced code we use attack is about just-in-time code reuse the key difference between this one and a",
    "start": "165810",
    "end": "171569"
  },
  {
    "text": "traditional one is because they are they make the attacker does not have the",
    "start": "171569",
    "end": "177120"
  },
  {
    "text": "prior knowledge e of the binary layout instead you know they are trying to use some malicious JavaScript with the",
    "start": "177120",
    "end": "183680"
  },
  {
    "text": "vulnerability of memory leakage and the it could dynamically harvesting code pages on the fly and at the same time",
    "start": "183680",
    "end": "191340"
  },
  {
    "text": "after you know the harvesting code pages they could actually you know dynamically",
    "start": "191340",
    "end": "197099"
  },
  {
    "text": "constructing those return addresses in in the buffer they control so this is called justin time code reuse attacks",
    "start": "197099",
    "end": "204120"
  },
  {
    "text": "the second type of code reuse the tags called a hacking blind write this this",
    "start": "204120",
    "end": "209459"
  },
  {
    "text": "type of attack is more complicated and it is the the whole attacking process is",
    "start": "209459",
    "end": "214709"
  },
  {
    "text": "separated into two parts the first part is where attacker is trying to blindly",
    "start": "214709",
    "end": "219870"
  },
  {
    "text": "harvesting any kind of small code chunks and generating a simple return to leaps the attacks while using you know those",
    "start": "219870",
    "end": "226500"
  },
  {
    "text": "small chunk of you know gadget to generate a system call that trying to",
    "start": "226500",
    "end": "232280"
  },
  {
    "text": "read the code pages all the way back to the attacker site and after that",
    "start": "232280",
    "end": "238049"
  },
  {
    "text": "attacker may use the information leaked from the victim application and",
    "start": "238049",
    "end": "243409"
  },
  {
    "text": "harvesting you know a meaningful more complicated gadget on the fly and the",
    "start": "243409",
    "end": "250019"
  },
  {
    "text": "second step of course naturally is they generate the second ROP attack to perform more sophisticated logic so the",
    "start": "250019",
    "end": "260010"
  },
  {
    "text": "reasons of advanced ROP attack is because of two reasons i as a summarize",
    "start": "260010",
    "end": "265300"
  },
  {
    "text": "the first one is because is more convenient because as we can see it is generating harvesting code pages and",
    "start": "265300",
    "end": "271990"
  },
  {
    "text": "reading the code pages at runtime brings about robustness of attacks on binaries",
    "start": "271990",
    "end": "277690"
  },
  {
    "text": "in many versions even these days so many open-source binaries you know there are so many versions of it and so many",
    "start": "277690",
    "end": "284500"
  },
  {
    "text": "patches in source code and also binaries and also each you know even if the",
    "start": "284500",
    "end": "290050"
  },
  {
    "text": "binary actually the you know code is in the same version in the same you know",
    "start": "290050",
    "end": "296199"
  },
  {
    "text": "but in a different in compilation environment and then we generate different binaries because of that it",
    "start": "296199",
    "end": "302169"
  },
  {
    "text": "brings you know a lot of the challenges for attackers to really make their exploit robust and the second one is",
    "start": "302169",
    "end": "309819"
  },
  {
    "text": "like it really make it robust against those kind of fine-grained rent code",
    "start": "309819",
    "end": "315370"
  },
  {
    "text": "randomizations as defenses because you know they can recoat right so whenever they whatever you randomize they can",
    "start": "315370",
    "end": "322000"
  },
  {
    "text": "read it and then they can use it to continue launching attack the second",
    "start": "322000",
    "end": "327759"
  },
  {
    "text": "reason is because this kind of advanced code we use attacks actually build a larger attack vectors right in this case",
    "start": "327759",
    "end": "335590"
  },
  {
    "text": "they make the post gtrob and planked ROP attacks makes a significant threat to",
    "start": "335590",
    "end": "341650"
  },
  {
    "text": "the close source and privately distributed binaries so for this reason",
    "start": "341650",
    "end": "348039"
  },
  {
    "text": "the advanced ROP attacks becomes very popular and so these two types of",
    "start": "348039",
    "end": "357370"
  },
  {
    "text": "advanced code reuse attacks has a common you know a common feature both of them requires code reading capabilities",
    "start": "357370",
    "end": "363509"
  },
  {
    "text": "that's why the defense of executable holy memory comes into picture this is",
    "start": "363509",
    "end": "370930"
  },
  {
    "text": "in fact this is not a first time a first research work on excludable holy memory so there are several you know previous",
    "start": "370930",
    "end": "380080"
  },
  {
    "text": "work that has already been done in the you know in several lines of research right the first one is the public code",
    "start": "380080",
    "end": "385569"
  },
  {
    "text": "published in CCS 2014 they're using page fault handlers to try to make a page",
    "start": "385569",
    "end": "391620"
  },
  {
    "text": "readable and executable only if in their working set right and the second lies of",
    "start": "391620",
    "end": "397670"
  },
  {
    "text": "you know research work is to reuse existing you know infrastructure using extended page table right only the",
    "start": "397670",
    "end": "404900"
  },
  {
    "text": "extended page table you can really make a code page really executable only so and the third one is you use some side",
    "start": "404900",
    "end": "412100"
  },
  {
    "text": "effects on microarchitecture such as height and published in CODIS pi and they're using the micro architecture",
    "start": "412100",
    "end": "418730"
  },
  {
    "text": "difference between ITR b and d trp unfortunately this work may not you know",
    "start": "418730",
    "end": "424040"
  },
  {
    "text": "succeed in modern Intel architectures because in modern Intel CPUs does not have any of these microarchitecture",
    "start": "424040",
    "end": "431480"
  },
  {
    "text": "difference and the final one is the one that is working on arm you know it is",
    "start": "431480",
    "end": "436520"
  },
  {
    "text": "pretty successful because it works on you know existing phones and then jalebis however this is the work that is",
    "start": "436520",
    "end": "444440"
  },
  {
    "text": "on arm so so far there is no research work currently applies executable holy",
    "start": "444440",
    "end": "449810"
  },
  {
    "text": "memory to Intel Architecture so all of these research are beautiful but there",
    "start": "449810",
    "end": "455030"
  },
  {
    "text": "have only drawbacks right one of the high problem is like they have generating high runtime overhead right",
    "start": "455030",
    "end": "461120"
  },
  {
    "text": "like the first paper published in x and r they have requires OS to actively",
    "start": "461120",
    "end": "467290"
  },
  {
    "text": "handle the page fault handling so that word takes a long time and second one is",
    "start": "467290",
    "end": "473660"
  },
  {
    "text": "they may require some you know special hardware support like hypervisor support",
    "start": "473660",
    "end": "478790"
  },
  {
    "text": "right second especially using any approach using extended page table requires a customized cooperative",
    "start": "478790",
    "end": "485540"
  },
  {
    "text": "hypervisor right well in client side this might be okay but in cloud that",
    "start": "485540",
    "end": "491090"
  },
  {
    "text": "indicates they're nested virtualization which actually generate more overhead or some of the cloud provider does not",
    "start": "491090",
    "end": "498590"
  },
  {
    "text": "provide this you know feature and also it may you know requires a significant",
    "start": "498590",
    "end": "504950"
  },
  {
    "text": "effort on code refactoring rewriting those kind of things and those are the challenges and issues they have so in",
    "start": "504950",
    "end": "512630"
  },
  {
    "text": "this presentation with we will provide a solution to executable early memory and we show that this security property can",
    "start": "512630",
    "end": "520340"
  },
  {
    "text": "be easily achieved using Intel you know hardware capability so we use this",
    "start": "520340",
    "end": "526340"
  },
  {
    "text": "techniques and Intel Intel protection keys this is new hardware features that has been",
    "start": "526340",
    "end": "531880"
  },
  {
    "text": "proposed in recent Intel CPUs in the next couple of slides we're going to",
    "start": "531880",
    "end": "538060"
  },
  {
    "text": "show you how you know we what exactly is protection keys and how we use it so",
    "start": "538060",
    "end": "543220"
  },
  {
    "text": "memory protection key is quite an early has been proposed early in Oracle so and",
    "start": "543220",
    "end": "548320"
  },
  {
    "text": "this feature has been implemented by Intel as now it is also implemented in",
    "start": "548320",
    "end": "553810"
  },
  {
    "text": "other architectures as well so yes so there this Hardware feature has been",
    "start": "553810",
    "end": "560350"
  },
  {
    "text": "mentioned in various points in rwn and also officially mentioned in Intel",
    "start": "560350",
    "end": "565570"
  },
  {
    "text": "software develops menu and all of them are might be too long and if you didn't read you can listen to my presentation",
    "start": "565570",
    "end": "572860"
  },
  {
    "text": "yeah so Intel's mpk implementation is called protection keys mentioned in four",
    "start": "572860",
    "end": "578589"
  },
  {
    "text": "point six point two if you want to look at it details the name is actually confusing because it is nothing to do",
    "start": "578589",
    "end": "584350"
  },
  {
    "text": "with encryption or decryption right is actually a memory attacking capability it allows you to attack tagged a chunk",
    "start": "584350",
    "end": "592000"
  },
  {
    "text": "of memory pages with a you know a key or or a tag we call P key I",
    "start": "592000",
    "end": "599019"
  },
  {
    "text": "so using this P key you can actually do several things for example the property is provided by production key is you can",
    "start": "599019",
    "end": "605230"
  },
  {
    "text": "fast turned the page permissions from readable to inaccessible to any other",
    "start": "605230",
    "end": "610810"
  },
  {
    "text": "things for example you can mark those your data you want to protect the data you can you easily binding those you",
    "start": "610810",
    "end": "618220"
  },
  {
    "text": "know by them protection key to those pages and use one instruction to make make them read-only or make them",
    "start": "618220",
    "end": "624579"
  },
  {
    "text": "inaccessible right so this feature it actually supports sixteen memory domains",
    "start": "624579",
    "end": "631180"
  },
  {
    "text": "so basically 16 P keys per process right and in actually it can be enabled per",
    "start": "631180",
    "end": "637540"
  },
  {
    "text": "process you know based so this last will show how it works so originally any kind of a memory",
    "start": "637540",
    "end": "645010"
  },
  {
    "text": "access was issued by the CPU and CPU we're decoding instruction and we'll you",
    "start": "645010",
    "end": "650319"
  },
  {
    "text": "know you know the CPU were checked the memory access this that this",
    "start": "650319",
    "end": "655690"
  },
  {
    "text": "instructions were you know trying to access so the linear address you know",
    "start": "655690",
    "end": "661240"
  },
  {
    "text": "where first go to page table page table permission check either what goes to you know either generate a page",
    "start": "661240",
    "end": "667489"
  },
  {
    "text": "walk or generate it look look up the PT e lookups the translation looks like",
    "start": "667489",
    "end": "674419"
  },
  {
    "text": "look inside a buffer so here the production key basically added",
    "start": "674419",
    "end": "680239"
  },
  {
    "text": "additional staff basically it used a special register called peek-a-ru so",
    "start": "680239",
    "end": "685429"
  },
  {
    "text": "this is a 32 bit you know a special register which allows you to have you",
    "start": "685429",
    "end": "691159"
  },
  {
    "text": "know two additional bits per each P key well at the same time they used it you",
    "start": "691159",
    "end": "696259"
  },
  {
    "text": "know the page table entry the sixty-two bits and 259 bits as the four bits as indexed to index the peek-a-ru right and",
    "start": "696259",
    "end": "704029"
  },
  {
    "text": "and the final access permission whether you allow or not is jointly decided by",
    "start": "704029",
    "end": "709399"
  },
  {
    "text": "page table munitions and production key to permissions right so so this",
    "start": "709399",
    "end": "715639"
  },
  {
    "text": "protection key applies only to user level pages basically means that whenever this pages are belonging to",
    "start": "715639",
    "end": "721069"
  },
  {
    "text": "Colonel and this kind of peek-a-ru a check or not applies in order to support",
    "start": "721069",
    "end": "728629"
  },
  {
    "text": "this protection key feature Linux so you know provide three extra system costs",
    "start": "728629",
    "end": "734839"
  },
  {
    "text": "and you know Intel provides two additional instructions this among the",
    "start": "734839",
    "end": "740449"
  },
  {
    "text": "three system cost there's a P keep Alec and P key free which are easy to understand right you allocate a picky and you use",
    "start": "740449",
    "end": "747109"
  },
  {
    "text": "it and you feel it the the key things to mention is like the P key and protect",
    "start": "747109",
    "end": "752329"
  },
  {
    "text": "this is a critical system call that actually bind a chunk of memory who is a picky and to quickly manipulate the page",
    "start": "752329",
    "end": "760970"
  },
  {
    "text": "permissions we can you can use the instruction called wrpk are you and RD",
    "start": "760970",
    "end": "765979"
  },
  {
    "text": "peek-a-ru this slides were shows how this kind of thing is working so for",
    "start": "765979",
    "end": "776119"
  },
  {
    "text": "each process this P key could be turned on for each process so that it you do",
    "start": "776119",
    "end": "781789"
  },
  {
    "text": "not have to turn on this feature system wise so basically if you have a server critical applications you can turn on",
    "start": "781789",
    "end": "787999"
  },
  {
    "text": "and the security feature for that if you worried other issues you can you know",
    "start": "787999",
    "end": "793549"
  },
  {
    "text": "you don't have to turn it on for other processes running your systems right and 16 as we mentioned you can",
    "start": "793549",
    "end": "799279"
  },
  {
    "text": "support sixteen PK's per process and each p key as we can see from the slide one P key could bind to you know",
    "start": "799279",
    "end": "806269"
  },
  {
    "text": "infinite number of memory pages which are in contiguous right here we shows that there are three in contiguous you",
    "start": "806269",
    "end": "813589"
  },
  {
    "text": "know memory regions that binds to one pika-pika number one right and also",
    "start": "813589",
    "end": "818870"
  },
  {
    "text": "remember the P key provides you a memory",
    "start": "818870",
    "end": "824050"
  },
  {
    "text": "permissions in it is a view basically the thread number one will see that this",
    "start": "824050",
    "end": "831860"
  },
  {
    "text": "the memory permission of these regions as none accessible however thread number two may see the",
    "start": "831860",
    "end": "839269"
  },
  {
    "text": "same month same number of regions as read-only right so by doing that actually thread thread number one could",
    "start": "839269",
    "end": "846440"
  },
  {
    "text": "actually prevent any kind of unintended or malicious read and write while thread number two could prevent unintended or",
    "start": "846440",
    "end": "852319"
  },
  {
    "text": "malicious right so production key basically it provides you a performance",
    "start": "852319",
    "end": "859759"
  },
  {
    "text": "bit right instead of provide you with additional capability you actually you",
    "start": "859759",
    "end": "865490"
  },
  {
    "text": "know you can actually use you can actually implement it using system call like and protect right you can do it",
    "start": "865490",
    "end": "871370"
  },
  {
    "text": "using system call alone but then why do we need protection keys so the critical",
    "start": "871370",
    "end": "877310"
  },
  {
    "text": "part is actually that protection key provides is the performance right",
    "start": "877310",
    "end": "882860"
  },
  {
    "text": "imagine that you can tweak the memory pages of several non contiguous memory",
    "start": "882860",
    "end": "888589"
  },
  {
    "text": "regions in one shot and which only cost you 60 220 cycles right and while in",
    "start": "888589",
    "end": "895399"
  },
  {
    "text": "comparison if you use system cost you at least work cost you you know twenty thousand cycles and those at a time it",
    "start": "895399",
    "end": "903350"
  },
  {
    "text": "cost for you to change memory permissions will be you know proportional to the number of code pages",
    "start": "903350",
    "end": "909380"
  },
  {
    "text": "or data pages that you want to change so this lines were basically shows a kind",
    "start": "909380",
    "end": "915709"
  },
  {
    "text": "of small code which is very simple laughing side it's a user level applications telling you how to use it",
    "start": "915709",
    "end": "921819"
  },
  {
    "text": "it's it's a simple approach physically you allocate a P key you allocate a memory page you bind the speaky with",
    "start": "921819",
    "end": "928399"
  },
  {
    "text": "this memory and then you use a special function called P key set to make sure it is not",
    "start": "928399",
    "end": "934340"
  },
  {
    "text": "writable even if you initially make it writable now you use P key set you can",
    "start": "934340",
    "end": "940370"
  },
  {
    "text": "you know quickly turn it off turn the write permission off then you're trying to write it right then of course",
    "start": "940370",
    "end": "946760"
  },
  {
    "text": "naturally your generate a page fault and the program you know may crash on default on the right hand side which",
    "start": "946760",
    "end": "953540"
  },
  {
    "text": "shows you how it works in details so so the majority of the work relies on the",
    "start": "953540",
    "end": "959630"
  },
  {
    "text": "Intel instruction code WRP GRU so it requires you to put the peak are you",
    "start": "959630",
    "end": "964850"
  },
  {
    "text": "value in EAX while maintaining ECX and EDX as zero so so far we have finished",
    "start": "964850",
    "end": "972380"
  },
  {
    "text": "briefly the discussion of production keys but why does production key has anything to do with executable all in",
    "start": "972380",
    "end": "979130"
  },
  {
    "text": "memory so production key can be used for executable only memory because if you",
    "start": "979130",
    "end": "985520"
  },
  {
    "text": "Mark a code page as inaccessible that does not prevent code execution so",
    "start": "985520",
    "end": "991490"
  },
  {
    "text": "basically a code page that is readable and executable you mark the page as in",
    "start": "991490",
    "end": "997120"
  },
  {
    "text": "accessible you can still jump to and execute it right in fact executable only memory",
    "start": "997120",
    "end": "1003010"
  },
  {
    "text": "support has already been integrated into Linux kernel in 24.9 and later versions",
    "start": "1003010",
    "end": "1008250"
  },
  {
    "text": "morbo than that actually Linux developers in Intel also you know achieved a capability by using the",
    "start": "1008250",
    "end": "1014860"
  },
  {
    "text": "traditional system call and protect so you can directly mark a chunk of code",
    "start": "1014860",
    "end": "1020460"
  },
  {
    "text": "chunk of code as executable without explicitly you know manipulating the P",
    "start": "1020460",
    "end": "1026860"
  },
  {
    "text": "keys yourself and also jalebi C's adopts the protection key support in you know",
    "start": "1026860",
    "end": "1032740"
  },
  {
    "text": "December last year however the executable only memory support is missing imposed gilepsy and compiler so",
    "start": "1032740",
    "end": "1039220"
  },
  {
    "text": "and enabling that usually requires a lot of rewriting and recompilation work so",
    "start": "1039220",
    "end": "1046720"
  },
  {
    "text": "in the following slides will show you how we do it without doing this you know kind of Cobra compilation of those kind",
    "start": "1046720",
    "end": "1053020"
  },
  {
    "text": "of things we show you how we do it in one shot and apply protection keys based executable only memory to all your F",
    "start": "1053020",
    "end": "1060070"
  },
  {
    "text": "binaries our idea is simple basically we use a static binary writing and to enable the",
    "start": "1060070",
    "end": "1066830"
  },
  {
    "text": "protection keys and we have following features we don't require a source code at all right we only require you to",
    "start": "1066830",
    "end": "1073280"
  },
  {
    "text": "patch to your program loader the LDS oh and we don't generate any kind of",
    "start": "1073280",
    "end": "1078710"
  },
  {
    "text": "runtime overhead because of course you know marking code pages and is cute over",
    "start": "1078710",
    "end": "1083929"
  },
  {
    "text": "only you know only generate over hat at load time and we open source basically",
    "start": "1083929",
    "end": "1089929"
  },
  {
    "text": "we open source and contribute to the community so before we come to the details of this presentation we have if",
    "start": "1089929",
    "end": "1096500"
  },
  {
    "text": "you want it replicated the result you want to use it around you need to have to satisfy several prerequisite right",
    "start": "1096500",
    "end": "1104120"
  },
  {
    "text": "you need to have a CPU that supports production key features or you have a Linux and you have a Linux kernel of 4.9",
    "start": "1104120",
    "end": "1110240"
  },
  {
    "text": "or alternatively you just have an AWS account you can use Google Amazon and",
    "start": "1110240",
    "end": "1115250"
  },
  {
    "text": "and launch ac5 instance right if you launch that you have everything you have so now come back to our you know",
    "start": "1115250",
    "end": "1122540"
  },
  {
    "text": "presentation so the idea is very simple right we just need to identifying those",
    "start": "1122540",
    "end": "1127550"
  },
  {
    "text": "code pages at program loading time and mark them as executable only however",
    "start": "1127550",
    "end": "1132650"
  },
  {
    "text": "even this is simple you know idea and the simple goal requires to overcome",
    "start": "1132650",
    "end": "1137870"
  },
  {
    "text": "several you know critical challenges the first challenge is that you know how do",
    "start": "1137870",
    "end": "1143420"
  },
  {
    "text": "we identify code and data write as we know knows in this picture we show that the ERF binaries has you know two views",
    "start": "1143420",
    "end": "1151670"
  },
  {
    "text": "you know the left hand side is to compile you know after compilation time the link view and write write in size is",
    "start": "1151670",
    "end": "1158270"
  },
  {
    "text": "the runtime view clearly there is an information loss because a lot of metadata are real data you know in a",
    "start": "1158270",
    "end": "1165170"
  },
  {
    "text": "friend and after the code real code pages are actually missing they are all regarded as a code pages right in",
    "start": "1165170",
    "end": "1172460"
  },
  {
    "text": "addition you know we you know yeah all kinds of things were missing also in in",
    "start": "1172460",
    "end": "1178490"
  },
  {
    "text": "the middle of those code sections there might be other you know code data in the middle of code which you make mess up",
    "start": "1178490",
    "end": "1185480"
  },
  {
    "text": "further right so to solve that problem the first challenge we use a section",
    "start": "1185480",
    "end": "1190970"
  },
  {
    "text": "table information right so basically at a runtime section table may Oh not be in the picture so we use the",
    "start": "1190970",
    "end": "1197720"
  },
  {
    "text": "section table we load it and we you know use it to pass the section table and recover those link time information so",
    "start": "1197720",
    "end": "1205490"
  },
  {
    "text": "on a high level and the second challenge is how do we applying protecting keys on",
    "start": "1205490",
    "end": "1210890"
  },
  {
    "text": "all binaries as we all know there are currently any kind of programs running no matter it's a kind of you know slash",
    "start": "1210890",
    "end": "1217730"
  },
  {
    "text": "ping / RS or it's kind of large programs like browser they all dynamic dynamic",
    "start": "1217730",
    "end": "1223180"
  },
  {
    "text": "linked because they're they're you know libraries might be a lot right and in",
    "start": "1223180",
    "end": "1229430"
  },
  {
    "text": "key point is like their libraries may not be known at run holy and until at runtime so statically you know applying",
    "start": "1229430",
    "end": "1236960"
  },
  {
    "text": "that will be a heavyweight approach which may not be appropriate and the",
    "start": "1236960",
    "end": "1242900"
  },
  {
    "text": "second challenge we need to have is like we need to find a right message to hook we need where we need to intercept right",
    "start": "1242900",
    "end": "1248660"
  },
  {
    "text": "naturally using LD preload or the library path those are kind of things traditional mechanisms are that's are",
    "start": "1248660",
    "end": "1254780"
  },
  {
    "text": "too late right and also we can do it in a kernel right doing any car noise is the right place but it may be too",
    "start": "1254780",
    "end": "1262010"
  },
  {
    "text": "cumbersome right doing the colonel might generate too much code that actually increased attack bacteria of to the kernel",
    "start": "1262010",
    "end": "1269710"
  },
  {
    "text": "alternatively we also can recompile the program loader right again but we",
    "start": "1269710",
    "end": "1274880"
  },
  {
    "text": "compiled program loader it's also a cumbersome an unstable approach because you know you have once you recompile the",
    "start": "1274880",
    "end": "1282950"
  },
  {
    "text": "program loader you have to use and recompile everything including the leap CSO and lead pthread those kind of",
    "start": "1282950",
    "end": "1290600"
  },
  {
    "text": "libraries you have to make sure all of you use all of them instead of using the only the program loader right in",
    "start": "1290600",
    "end": "1297470"
  },
  {
    "text": "addition to that even we complied put Julie PC may also have compatibility issues with some other library systems",
    "start": "1297470",
    "end": "1303530"
  },
  {
    "text": "such as C++ runtime so because of this issues I think it is naturally we should",
    "start": "1303530",
    "end": "1309410"
  },
  {
    "text": "use a lightweight binary patch to patching slightly your own program",
    "start": "1309410",
    "end": "1315320"
  },
  {
    "text": "loader to in order to enable this lightweight security feature so in the",
    "start": "1315320",
    "end": "1321440"
  },
  {
    "text": "next following slides will show you how we do it you know how we patch the binaries and in a 4-step so the idea is simple right",
    "start": "1321440",
    "end": "1331190"
  },
  {
    "text": "we want to generating inject a piece of code that modified the original code logic inside program loader right but",
    "start": "1331190",
    "end": "1338690"
  },
  {
    "text": "how do we do it right so here we allows you to write it with instrumentation code is in C you can write your",
    "start": "1338690",
    "end": "1345130"
  },
  {
    "text": "instrumentation code as you wish you know using C code and we were compiling that into a binary right once",
    "start": "1345130",
    "end": "1352550"
  },
  {
    "text": "we compile that into a binary then we're going to extract you extract some",
    "start": "1352550",
    "end": "1358220"
  },
  {
    "text": "special sections called tax oral data and data such as out and we put that in",
    "start": "1358220",
    "end": "1363500"
  },
  {
    "text": "separately as a kind of a binary trunk right and in the first step we're gonna",
    "start": "1363500",
    "end": "1370040"
  },
  {
    "text": "inject that chunk of binary into the end of the program loader right by doing",
    "start": "1370040",
    "end": "1375290"
  },
  {
    "text": "that actually this is you know program loader will actually have that you know chunk of code and data co-located",
    "start": "1375290",
    "end": "1382240"
  },
  {
    "text": "however in order to make sure this chunk of an additional code and data to be loaded into memory we need to change in",
    "start": "1382240",
    "end": "1388580"
  },
  {
    "text": "additional data structures called ph.d program inheritable so we need to give",
    "start": "1388580",
    "end": "1394100"
  },
  {
    "text": "them 3 X 4 you know loadable segments right by doing that once you launch your",
    "start": "1394100",
    "end": "1400670"
  },
  {
    "text": "you know instrumented program loader your extra data and a code will be loaded into memory however even if you",
    "start": "1400670",
    "end": "1410120"
  },
  {
    "text": "were those kind of instrumentation code is loaded into memory it doesn't it doesn't mean that it will be executed",
    "start": "1410120",
    "end": "1416210"
  },
  {
    "text": "because you haven't patched original binary so in the following slides will",
    "start": "1416210",
    "end": "1421430"
  },
  {
    "text": "show you how we patched binary patched the program loader to enable to tweaking the program loading process but before",
    "start": "1421430",
    "end": "1429380"
  },
  {
    "text": "we telling you how to do that we need to figure out what exactly is the original program loading logic so the original",
    "start": "1429380",
    "end": "1437270"
  },
  {
    "text": "program logic loading logic is the following in a program load LD dot a so",
    "start": "1437270",
    "end": "1442960"
  },
  {
    "text": "it's basically three step the first step the program loader will read the ERF",
    "start": "1442960",
    "end": "1448790"
  },
  {
    "text": "binary to see if it is a RF binary if if it is not and there's no need to go further and also it will need to know",
    "start": "1448790",
    "end": "1456050"
  },
  {
    "text": "the you know data structures just after your f Hatter right so by knowing that it",
    "start": "1456050",
    "end": "1462800"
  },
  {
    "text": "renault z-- how many pages does this program need if everything goes fine it",
    "start": "1462800",
    "end": "1468140"
  },
  {
    "text": "word goes to mapped whole executable fires at this moment you know mapping whole executable files they were map it",
    "start": "1468140",
    "end": "1474830"
  },
  {
    "text": "as readable and executable and in fact this is a minor security issues although",
    "start": "1474830",
    "end": "1480590"
  },
  {
    "text": "this kind of security issues is being there for you know for a long time and",
    "start": "1480590",
    "end": "1485870"
  },
  {
    "text": "after that the program loader will map you know remap each segment afterwards",
    "start": "1485870",
    "end": "1491930"
  },
  {
    "text": "so here it will map data segment as readable and writeable and after that it",
    "start": "1491930",
    "end": "1497180"
  },
  {
    "text": "will do something other things that is irrelevant to it to our you know topic so as we know as we you know understand",
    "start": "1497180",
    "end": "1505760"
  },
  {
    "text": "it the program loading logic we come to how we change it right so we patch several you know critical",
    "start": "1505760",
    "end": "1512360"
  },
  {
    "text": "points for the binary and a redirect controls to our instrumentation code by",
    "start": "1512360",
    "end": "1517670"
  },
  {
    "text": "doing that we actually can tweaking the loading process a little bit so that we can actually control and apply",
    "start": "1517670",
    "end": "1523640"
  },
  {
    "text": "executable only memory into pictures so here's how we do it the changes all happens just after you know that the",
    "start": "1523640",
    "end": "1532000"
  },
  {
    "text": "original program loader map everything into the picture after that we're gonna",
    "start": "1532000",
    "end": "1537260"
  },
  {
    "text": "instrument the control flow basically we load a second table as we mentioned before section table has more meaningful",
    "start": "1537260",
    "end": "1544220"
  },
  {
    "text": "information than you know then you know the program had a table right in section table it over tells you where are the",
    "start": "1544220",
    "end": "1550760"
  },
  {
    "text": "you know data's and where are the code pages right bypassing after passing the",
    "start": "1550760",
    "end": "1556220"
  },
  {
    "text": "section table we're going to know okay the front couple of pages are metadata so we mark them as read only and in in",
    "start": "1556220",
    "end": "1562700"
  },
  {
    "text": "the middle of the code pages there are excludable only so we mark them as executable only and then later on",
    "start": "1562700",
    "end": "1568310"
  },
  {
    "text": "read-only data is excludable and after doing that we come back you know we",
    "start": "1568310",
    "end": "1573400"
  },
  {
    "text": "return the control flow to the original program loading process and everything",
    "start": "1573400",
    "end": "1578450"
  },
  {
    "text": "will be fine so yes so after this is done we actually make the program",
    "start": "1578450",
    "end": "1585140"
  },
  {
    "text": "loading work so as we know as we all knows all programs including executable fires and you know",
    "start": "1585140",
    "end": "1592080"
  },
  {
    "text": "libraries are loaded by this program special program program loader so by intercepting this critical parsed",
    "start": "1592080",
    "end": "1598890"
  },
  {
    "text": "critical pass we can actually you know uh you know applying this key property",
    "start": "1598890",
    "end": "1605220"
  },
  {
    "text": "to all the libraries all the dependent libraries as well as executable itself",
    "start": "1605220",
    "end": "1611690"
  },
  {
    "text": "this is the second challenge is we how we overcome and third one is how we you",
    "start": "1612020",
    "end": "1617820"
  },
  {
    "text": "know because you know Intel provide WR peek-a-ru and our DP gru these two",
    "start": "1617820",
    "end": "1622950"
  },
  {
    "text": "instructions are user level instructions the developers applications can use it same at the same time attackers can use",
    "start": "1622950",
    "end": "1630270"
  },
  {
    "text": "it use it too so as we can see from this picture the malicious control flow if they jump to the third byte of a valid",
    "start": "1630270",
    "end": "1637830"
  },
  {
    "text": "instructions then it comes into a very small you know code trunk gadget which",
    "start": "1637830",
    "end": "1643470"
  },
  {
    "text": "which allows them to abuse the peek-a-ru values right so to prevent that we",
    "start": "1643470",
    "end": "1649440"
  },
  {
    "text": "actually propose to kind of defenses one is you know we can potentially scale in",
    "start": "1649440",
    "end": "1655290"
  },
  {
    "text": "the code sections and rewrite dangerous instructions right and in addition we can also reset",
    "start": "1655290",
    "end": "1661110"
  },
  {
    "text": "periodically resetting the peek-a-ru contained and each just before each",
    "start": "1661110",
    "end": "1666600"
  },
  {
    "text": "system call in kernel right by doing that we can actually make sure they did peek-a-ru is always a valid valid values",
    "start": "1666600",
    "end": "1673880"
  },
  {
    "text": "configurations that we have however we do and meet that this is kind of defense",
    "start": "1673880",
    "end": "1680040"
  },
  {
    "text": "is limited because in power but this kind of defense could be strengthened",
    "start": "1680040",
    "end": "1685950"
  },
  {
    "text": "further by you know Intel CET and kind of sci-fi or coder randomizations to further prevent attackers by knowing the",
    "start": "1685950",
    "end": "1693330"
  },
  {
    "text": "accurate locations of wrpk are you things like that and then we comes to",
    "start": "1693330",
    "end": "1702120"
  },
  {
    "text": "evaluation right so as we mentioned this",
    "start": "1702120",
    "end": "1707550"
  },
  {
    "text": "is actually a you know lightweight approach we only instrument program loader and Julie Libby I saw optionally",
    "start": "1707550",
    "end": "1714480"
  },
  {
    "text": "so our instrumentation code only increased the code size by seven percent",
    "start": "1714480",
    "end": "1719550"
  },
  {
    "text": "and our increase on Julie PC is point nine percent so basically the",
    "start": "1719550",
    "end": "1725250"
  },
  {
    "text": "cosine changes always almost horrible and for other binaries we don't change",
    "start": "1725250",
    "end": "1730320"
  },
  {
    "text": "anything right at run time we actually generate additional you know over hat",
    "start": "1730320",
    "end": "1736410"
  },
  {
    "text": "because we do have invoked several extra system costs like 1m map 1m and lap and",
    "start": "1736410",
    "end": "1743580"
  },
  {
    "text": "several and protecting structures for permission changes in you know fine fine grained permission tweaks in code",
    "start": "1743580",
    "end": "1750090"
  },
  {
    "text": "segments and we also you know basically testing using spec benchmark usually we",
    "start": "1750090",
    "end": "1756690"
  },
  {
    "text": "have you know no over hat and there's the overhead becomes actually noise in this case because it is expected because",
    "start": "1756690",
    "end": "1764480"
  },
  {
    "text": "the overhead usually happens only at program loading time which is very shot",
    "start": "1764480",
    "end": "1769590"
  },
  {
    "text": "and overall runtime it does not generate in any kind of runtime overhead because",
    "start": "1769590",
    "end": "1775260"
  },
  {
    "text": "of this hardware support we also tested this on some large binaries for example",
    "start": "1775260",
    "end": "1782040"
  },
  {
    "text": "in our case we our test that is using one two 17.04 with Linux kernel for",
    "start": "1782040",
    "end": "1787740"
  },
  {
    "text": "point 10 so we have a Intel you know CPU with protection keys enabled and we use",
    "start": "1787740",
    "end": "1794190"
  },
  {
    "text": "Julie PC 2.24 we have test is on some large binaries such as Firefox 54",
    "start": "1794190",
    "end": "1800280"
  },
  {
    "text": "version and LibreOffice and kaya right in Firefox you can see that the library",
    "start": "1800280",
    "end": "1806370"
  },
  {
    "text": "it depends on has you know the number of libraries it depends on is 130 and the",
    "start": "1806370",
    "end": "1811770"
  },
  {
    "text": "original code size at a runtime will be 104 megabytes right after the XO XO m",
    "start": "1811770",
    "end": "1818790"
  },
  {
    "text": "you know switch you know protection the true readable code shrinking to you know",
    "start": "1818790",
    "end": "1825210"
  },
  {
    "text": "one point five megabytes well executable only code goes to 57 percent and read only code goes to forty",
    "start": "1825210",
    "end": "1832170"
  },
  {
    "text": "percent so the total reduction goes to 97 percent and and more than that right so so one of the reasons you might ask",
    "start": "1832170",
    "end": "1841410"
  },
  {
    "text": "is like why do we you know why not making all executable only you know all code pages as executable only alright",
    "start": "1841410",
    "end": "1848100"
  },
  {
    "text": "this is because some of the page if the sum of pages are data by not just making that as a data right instead of making",
    "start": "1848100",
    "end": "1854220"
  },
  {
    "text": "that executable olli right so making the code King those data in the code picking a",
    "start": "1854220",
    "end": "1859909"
  },
  {
    "text": "code segment as read-only will actually will actually reduce attack vector",
    "start": "1859909",
    "end": "1865220"
  },
  {
    "text": "instead of increasing them right so and also we do an infective analysis show",
    "start": "1865220",
    "end": "1873470"
  },
  {
    "text": "right here so here is the traditional Cobras use attacks and we show you how",
    "start": "1873470",
    "end": "1881049"
  },
  {
    "text": "just-in-time code reuse attack or be defeated because because this is natural",
    "start": "1881049",
    "end": "1886580"
  },
  {
    "text": "because but when attackers trying to use malicious JavaScript to read code pages it will be defeated because those code",
    "start": "1886580",
    "end": "1893779"
  },
  {
    "text": "pages are not accessible the interesting things like how the second type of",
    "start": "1893779",
    "end": "1900200"
  },
  {
    "text": "attack are defeated because hacking blind can actually steal wing in the first stage because they can",
    "start": "1900200",
    "end": "1906500"
  },
  {
    "text": "steal blindingly search for any gadget they want and a launch and system call however they this type of attack will be",
    "start": "1906500",
    "end": "1914240"
  },
  {
    "text": "defeated in in the system call right so the system car will not succeed right",
    "start": "1914240",
    "end": "1919880"
  },
  {
    "text": "because this is because even if you are in kernel you are trying to accessing user level pages that is marked by P key",
    "start": "1919880",
    "end": "1928429"
  },
  {
    "text": "that is unaccessible you can you cannot read it either so in kernel this will",
    "start": "1928429",
    "end": "1933649"
  },
  {
    "text": "also generate a page fault and reading those stealing code pages using system call or not succeed so this period",
    "start": "1933649",
    "end": "1941840"
  },
  {
    "text": "English in this slides will show how we defeat this two type of tax and finally",
    "start": "1941840",
    "end": "1947450"
  },
  {
    "text": "we comes to the picture and we how to use it right so this code actually is",
    "start": "1947450",
    "end": "1954250"
  },
  {
    "text": "open source has open source by officially by Intel in XOM - which",
    "start": "1954250",
    "end": "1960019"
  },
  {
    "text": "target you are welcome to download it and try yourself and it has several dependencies like",
    "start": "1960019",
    "end": "1965750"
  },
  {
    "text": "Python and GCC and it also has a you know depends on a binary analyzer called",
    "start": "1965750",
    "end": "1972830"
  },
  {
    "text": "radio - so I used it and you know I feel like it's very interesting it's very convenient to use it to patch the binary",
    "start": "1972830",
    "end": "1980120"
  },
  {
    "text": "you can easily you know use the following command right used in passion loader you know and put your origin",
    "start": "1980120",
    "end": "1986659"
  },
  {
    "text": "loader at first as the forces and generating your own loader using that is also easy because you basically",
    "start": "1986659",
    "end": "1995130"
  },
  {
    "text": "just prepend your executable only you",
    "start": "1995130",
    "end": "2000320"
  },
  {
    "text": "know enabled program loader with your command line to launch your programs here in the case we can you can launch",
    "start": "2000320",
    "end": "2006679"
  },
  {
    "text": "your 5ox and you can optionally preload your own GBC right the reason why you",
    "start": "2006679",
    "end": "2012770"
  },
  {
    "text": "can we provide this option is because firefox may generate a child process",
    "start": "2012770",
    "end": "2018140"
  },
  {
    "text": "right and may generate additional binaries in child process and instrumenting your own gilepsy allows",
    "start": "2018140",
    "end": "2025309"
  },
  {
    "text": "you to apply executable only security permission to all this child processes",
    "start": "2025309",
    "end": "2031280"
  },
  {
    "text": "right to verify that you can easily check that with you know proc fire systems using proc your PID and maps you",
    "start": "2031280",
    "end": "2039559"
  },
  {
    "text": "can see that those memory pages protected our executable only so and i",
    "start": "2039559",
    "end": "2046460"
  },
  {
    "text": "appreciate a lot of lots of people in intel's and just for the support for the reviews of my work and with that I would",
    "start": "2046460",
    "end": "2054800"
  },
  {
    "text": "take questions thank you very much [Applause]",
    "start": "2054800",
    "end": "2062138"
  }
]