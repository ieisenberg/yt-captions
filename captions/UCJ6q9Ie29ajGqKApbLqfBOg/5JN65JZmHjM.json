[
  {
    "text": "[Music] [Laughter]",
    "start": "1610",
    "end": "10260"
  },
  {
    "text": "you're in the Mass Effect track this is recent Java exploitation Trends and malware um presented by Matt",
    "start": "10719",
    "end": "18880"
  },
  {
    "text": "o yeah thank you so can you hear me well",
    "start": "20279",
    "end": "27800"
  },
  {
    "text": "no hello like this one",
    "start": "28480",
    "end": "34360"
  },
  {
    "text": "is okay talk uh hi uh today",
    "start": "37000",
    "end": "44280"
  },
  {
    "text": "uh I'm going to talk about Java recent Java exploitation Trends and the",
    "start": "44280",
    "end": "51520"
  },
  {
    "text": "males uh let's talk about the background for uh actually this very very specific",
    "start": "51520",
    "end": "59039"
  },
  {
    "text": "cve this one is very very famous one actually uh the CV 2012 uh",
    "start": "59039",
    "end": "65720"
  },
  {
    "text": "0507 uh we found the force sample on March 2012 and this one was using a",
    "start": "65720",
    "end": "73799"
  },
  {
    "text": "vulnerability actually uh that was patched at the time just few weeks",
    "start": "73799",
    "end": "79119"
  },
  {
    "text": "ago and somehow this one was really really popular with all those like malas",
    "start": "79119",
    "end": "85759"
  },
  {
    "text": "the exploit kids they were like using this like aot like so we are seeing millions millions of detections per",
    "start": "85759",
    "end": "92880"
  },
  {
    "text": "month and the thing is that many people think that uh they are now running Java",
    "start": "92880",
    "end": "98560"
  },
  {
    "text": "on their system right but the truth is that Java is running more than 1.1",
    "start": "98560",
    "end": "105320"
  },
  {
    "text": "billion desktops in the world right now so it's a huge number so the other issue with Java is",
    "start": "105320",
    "end": "114079"
  },
  {
    "text": "that uh Java is like a multiplatform and the thing is that it is very very easy easy to Port just one",
    "start": "114079",
    "end": "121960"
  },
  {
    "text": "Windows malware written in Java to Mao 10 or Linux it is like a really really",
    "start": "121960",
    "end": "128119"
  },
  {
    "text": "easy so if you look at the source code down there so it is from one of the malwares for me 10 and you can see that",
    "start": "128119",
    "end": "136800"
  },
  {
    "text": "you can they are just running some Unix command here so meos 10 is based on Unix",
    "start": "136800",
    "end": "143160"
  },
  {
    "text": "so they are using some CH mode they they are just changing some uh permission bits for some binary day drop",
    "start": "143160",
    "end": "150720"
  },
  {
    "text": "and after they are using launch CTL this one is the command line that is used in",
    "start": "150720",
    "end": "156080"
  },
  {
    "text": "Meo 10 to launch any command so they are just launching the dropped file so just",
    "start": "156080",
    "end": "162720"
  },
  {
    "text": "using like a five lines they just ported the whole malware to like a me 10 this",
    "start": "162720",
    "end": "169720"
  },
  {
    "text": "is so easy so we can see that Java vulnerabilities has a kind of very very",
    "start": "169720",
    "end": "176560"
  },
  {
    "text": "like a mass effect so let's see the timeline timeline is very very",
    "start": "176560",
    "end": "183480"
  },
  {
    "text": "interesting because even though the vulnerability was patched on February uh",
    "start": "183480",
    "end": "190040"
  },
  {
    "text": "2012 the first patch appeared on internet on September 2011 it's almost",
    "start": "190040",
    "end": "197400"
  },
  {
    "text": "like a five or 6 months ago before the actual official patch was released so",
    "start": "197400",
    "end": "204000"
  },
  {
    "text": "this one was not actually open jdk so I believe the guy who made maintaining",
    "start": "204000",
    "end": "210360"
  },
  {
    "text": "this open source uh version of jdk java uh is kind of contributor to the whole",
    "start": "210360",
    "end": "216879"
  },
  {
    "text": "project so he accidentally just checked in his fix for uh this varability and",
    "start": "216879",
    "end": "224239"
  },
  {
    "text": "it's been 6 months later and Oracle finally patched the vity from their",
    "start": "224239",
    "end": "230400"
  },
  {
    "text": "official release of jdk and JRE and just few days later uh a",
    "start": "230400",
    "end": "236920"
  },
  {
    "text": "researcher who claims that actually who found who found claimed that he found uh the",
    "start": "236920",
    "end": "243480"
  },
  {
    "text": "vity in the first time like before even before September 2011 he posted a Blog",
    "start": "243480",
    "end": "249760"
  },
  {
    "text": "about that and kind of interesting thing happening after that like March 2012 the",
    "start": "249760",
    "end": "256919"
  },
  {
    "text": "actual malare actually abusing that vulnerability appeared so the blog post from that researcher actually didn't uh",
    "start": "256919",
    "end": "264639"
  },
  {
    "text": "post full exploit he just posted a very very basic proof of concept code but",
    "start": "264639",
    "end": "270080"
  },
  {
    "text": "somehow malware writers like figured out how to use that for their exploitation and",
    "start": "270080",
    "end": "276800"
  },
  {
    "text": "malware and it was just a month later that we saw the magos S10 uh malware",
    "start": "277000",
    "end": "283400"
  },
  {
    "text": "abusing this like same vulnerability and the interesting thing",
    "start": "283400",
    "end": "288720"
  },
  {
    "text": "is that uh at that point Apple didn't fix their JRE yet it's been like uh two",
    "start": "288720",
    "end": "294880"
  },
  {
    "text": "months later they finally fixed their uh shipping version of JRE at the time so",
    "start": "294880",
    "end": "300880"
  },
  {
    "text": "there there are a lot of chances to fix the issues like from the September 2011",
    "start": "300880",
    "end": "306479"
  },
  {
    "text": "uh they used 6 months to fix it in official release and after that Apple",
    "start": "306479",
    "end": "311840"
  },
  {
    "text": "used like two months to fix it their own like a package of",
    "start": "311840",
    "end": "317479"
  },
  {
    "text": "JRE so the it looks like the M writers using this time gap between the uh",
    "start": "317479",
    "end": "325120"
  },
  {
    "text": "information about the vulnerability and the actual patch and the actual updates",
    "start": "325120",
    "end": "330360"
  },
  {
    "text": "from the users they're using that time Gap and they are using these new viabilities actively the thing is that",
    "start": "330360",
    "end": "337600"
  },
  {
    "text": "the this viability was never been zero day actually so this one is fixed by",
    "start": "337600",
    "end": "343479"
  },
  {
    "text": "like a Oracle already but it is like a very very effective way to like infect",
    "start": "343479",
    "end": "350120"
  },
  {
    "text": "all those machines so why this uh specific 2012",
    "start": "350120",
    "end": "356520"
  },
  {
    "text": "0507 is so special so that is one of the questions we will answer in this",
    "start": "356520",
    "end": "363000"
  },
  {
    "text": "presentation and the other issue is that many of those like Java males uh are using ofation so you might",
    "start": "363000",
    "end": "371680"
  },
  {
    "text": "wonder that uh I'm sure many guys will not be that familiar with Java like AOS",
    "start": "371680",
    "end": "378759"
  },
  {
    "text": "cations because like if you think about AOS cation maybe you can think about JavaScript ofation but Java has their",
    "start": "378759",
    "end": "385800"
  },
  {
    "text": "own aosc methods so or we will look into how we can like uh defeat that",
    "start": "385800",
    "end": "393120"
  },
  {
    "text": "method so before all this uh we need to look into the Java security",
    "start": "393120",
    "end": "399080"
  },
  {
    "text": "model so Java platform security they are like a uh very very strong actually they",
    "start": "399080",
    "end": "405639"
  },
  {
    "text": "have very very solid model of security so the first first thing to note is Java",
    "start": "405639",
    "end": "412759"
  },
  {
    "text": "code is loaded by class model always this fact is very very important actually uh because",
    "start": "412759",
    "end": "420160"
  },
  {
    "text": "the first code loaded is always loaded by class loader and in the other word if",
    "start": "420160",
    "end": "426800"
  },
  {
    "text": "you have the you you have access to class loader you can load your own",
    "start": "426800",
    "end": "432199"
  },
  {
    "text": "classes with your own permissions so that is like U not allowed actually but",
    "start": "432199",
    "end": "438520"
  },
  {
    "text": "you can use some vulnerabilities to use your own class loader to make your own",
    "start": "438520",
    "end": "443960"
  },
  {
    "text": "classes you you with any permissions you want so we will explain it later and and",
    "start": "443960",
    "end": "449720"
  },
  {
    "text": "the second uh important thing is that remote code that is downloaded from the internet like Java appich uh actually",
    "start": "449720",
    "end": "457479"
  },
  {
    "text": "they run inside jvm sandbox so the sandbox model has been in Java like a",
    "start": "457479",
    "end": "462800"
  },
  {
    "text": "long long time so that is good but the thing is that all these permissions are",
    "start": "462800",
    "end": "469520"
  },
  {
    "text": "controlled by security policies so they have the actual security policy",
    "start": "469520",
    "end": "475120"
  },
  {
    "text": "file like this so if you look at that uh this one is just from one of those like",
    "start": "475120",
    "end": "482280"
  },
  {
    "text": "uh uh default Java uh Java policy file from uh J 7 and you can just open the",
    "start": "482280",
    "end": "490039"
  },
  {
    "text": "file and you can see the default policies so if you look at this uh part of the policy looks like it's not",
    "start": "490039",
    "end": "497000"
  },
  {
    "text": "permitting that much permissions so if it is downloaded Apple uh it it can't do",
    "start": "497000",
    "end": "503159"
  },
  {
    "text": "many things it it is just running and it is really really",
    "start": "503159",
    "end": "508440"
  },
  {
    "text": "restricted so you you can see that this security policy class loader and the sandbox they",
    "start": "508440",
    "end": "516800"
  },
  {
    "text": "are three of them are very very important elements in Java security so",
    "start": "516800",
    "end": "522320"
  },
  {
    "text": "they are actually uh very important in understanding the",
    "start": "522320",
    "end": "528560"
  },
  {
    "text": "Mal so security policy I already explained it it's about the permissions about uh code that runs inside jvm so",
    "start": "528560",
    "end": "538000"
  },
  {
    "text": "it's just defining what kind of resources they can access so this one was the example so if this one is one of",
    "start": "538000",
    "end": "545320"
  },
  {
    "text": "the malware actually running and uh even for the get amp if you look at the force",
    "start": "545320",
    "end": "553160"
  },
  {
    "text": "line from this exception record you can see the Java length runtime permission and",
    "start": "553160",
    "end": "560560"
  },
  {
    "text": "this one is category so runtime permission category and get amp method is not allowed even this one is not",
    "start": "560560",
    "end": "566600"
  },
  {
    "text": "allowed just getting some environmental variable that is not allowed so you can see that this one is kind of failed",
    "start": "566600",
    "end": "573079"
  },
  {
    "text": "exploitation method so looks like this Java sandbox is kind of very very restricted uh uh",
    "start": "573079",
    "end": "581800"
  },
  {
    "text": "like a environment and the security manager is",
    "start": "581800",
    "end": "588279"
  },
  {
    "text": "the actual object that is actually uh dealing with setting the security policies uh for the code and there is",
    "start": "588279",
    "end": "597160"
  },
  {
    "text": "actual classes there actually from the class security manager class so if you",
    "start": "597160",
    "end": "602399"
  },
  {
    "text": "have access to this class you can set the permissions for your own code or",
    "start": "602399",
    "end": "607800"
  },
  {
    "text": "other code that will be run but the thing is that you don't usually if your",
    "start": "607800",
    "end": "612959"
  },
  {
    "text": "code is from the remote code if your code is downloaded from the internet then usually you don't have any access",
    "start": "612959",
    "end": "618760"
  },
  {
    "text": "to this method at all so for example this exception record so the first um",
    "start": "618760",
    "end": "627839"
  },
  {
    "text": "step in exploiting like Java vulnerabilities they usually uh call this method like from java length system",
    "start": "627839",
    "end": "634880"
  },
  {
    "text": "they call set security manager n so it means that they are just nullifying security manager so there will be no",
    "start": "634880",
    "end": "641560"
  },
  {
    "text": "security at all so this one is the for stabing exploiting so if you look at the",
    "start": "641560",
    "end": "647279"
  },
  {
    "text": "exception record here uh so it looks like it's using one of the old exploit",
    "start": "647279",
    "end": "654560"
  },
  {
    "text": "and actually it's failing uh the exploit actually failed because I ran this malware using some recent uh runtime",
    "start": "654560",
    "end": "662000"
  },
  {
    "text": "environment so you can see that uh the exploit itself will try to run set",
    "start": "662000",
    "end": "667040"
  },
  {
    "text": "security manager no so if you look at analyze a lot of males they usually this one is the first step in exploiting they",
    "start": "667040",
    "end": "674160"
  },
  {
    "text": "just nullify security manager and after that they do whatever they want to do so if you look at these like U uh",
    "start": "674160",
    "end": "682519"
  },
  {
    "text": "exception records then this is like a good sign of exploitation there is no reason the uh like just good code will",
    "start": "682519",
    "end": "691680"
  },
  {
    "text": "call this there are not many reason for them to call this like a security manager",
    "start": "691680",
    "end": "697519"
  },
  {
    "text": "no and the next very important Concept in Java right now is actually type",
    "start": "697519",
    "end": "702959"
  },
  {
    "text": "safety so type safety uh the name may be",
    "start": "702959",
    "end": "708120"
  },
  {
    "text": "kind of very uh uh complicated to understand actually it's very easy about",
    "start": "708120",
    "end": "714839"
  },
  {
    "text": "just uh type means data type and safety means safety so if you have some data",
    "start": "714839",
    "end": "721279"
  },
  {
    "text": "type like for example if you programmed in C or C++ you have all those basic",
    "start": "721279",
    "end": "727320"
  },
  {
    "text": "data types like a integer character string so if you write very very weird",
    "start": "727320",
    "end": "732519"
  },
  {
    "text": "program that prints out integers you will print out really random memory area",
    "start": "732519",
    "end": "738320"
  },
  {
    "text": "so in that case it is not type safe at all right because you are supposed to be dumping out some like a string area that",
    "start": "738320",
    "end": "745959"
  },
  {
    "text": "memory region but if you are just passing out some uh integer value uh it will not work correctly so that kind of",
    "start": "745959",
    "end": "753000"
  },
  {
    "text": "thing is type safety so just uh making sure one data type is not interpreted as",
    "start": "753000",
    "end": "761560"
  },
  {
    "text": "other data type so for example integer to uh string or string to integer or",
    "start": "761560",
    "end": "767600"
  },
  {
    "text": "yeah that kind of thing it it should not be allowed so for example the type not only includes like integer or uh",
    "start": "767600",
    "end": "773959"
  },
  {
    "text": "character string that kind of type but they also include some kind of classes uh unions structures they all types they",
    "start": "773959",
    "end": "781160"
  },
  {
    "text": "are all types so if you if the code doesn't guarantee that one type is not",
    "start": "781160",
    "end": "788199"
  },
  {
    "text": "uh treated as such type uh it will make some",
    "start": "788199",
    "end": "793480"
  },
  {
    "text": "problems so there are uh two uh method of actually verifying the type safety so",
    "start": "793480",
    "end": "801240"
  },
  {
    "text": "one is static type so for example if you write some C program that is printing out integer as a string actually many",
    "start": "801240",
    "end": "808880"
  },
  {
    "text": "comp compilers will complain about that because you are supposed to be passing some uh string pointer but you are",
    "start": "808880",
    "end": "814800"
  },
  {
    "text": "passing some integer in that case it will complain there so it means that it like it didn't run the code but it just",
    "start": "814800",
    "end": "821720"
  },
  {
    "text": "did some kind of static analysis on that those code so in that case it is some static type check but for dynamic type",
    "start": "821720",
    "end": "829639"
  },
  {
    "text": "check so for all those object in the memory if they have some code that is",
    "start": "829639",
    "end": "835120"
  },
  {
    "text": "checking the data types uh that the actual code is accessible then uh that might be you you can call",
    "start": "835120",
    "end": "843000"
  },
  {
    "text": "that uh as a dynamic type check so whenever the call is made to uh the",
    "start": "843000",
    "end": "848759"
  },
  {
    "text": "specific uh data type uh then if it is checking whether it is making uh correct",
    "start": "848759",
    "end": "856240"
  },
  {
    "text": "call um it will be dynamic type safety check the thing is that if you do this",
    "start": "856240",
    "end": "862639"
  },
  {
    "text": "like a routine every time it will make a lot of like overhead so usually for",
    "start": "862639",
    "end": "868040"
  },
  {
    "text": "efficiency uh for Java they are mainly doing static type check so the problem",
    "start": "868040",
    "end": "874399"
  },
  {
    "text": "is that when they're doing static type check if that static type check logic fails it means that uh type safety will",
    "start": "874399",
    "end": "883920"
  },
  {
    "text": "be uh not will not be guaranteed so one of those quots here uh type safety is",
    "start": "883920",
    "end": "891000"
  },
  {
    "text": "the most essential element of java security uh that is from the one of the book The like a securing Java uh book",
    "start": "891000",
    "end": "899279"
  },
  {
    "text": "and this one is the kind of like a Bible uh for Java security and it is kind of",
    "start": "899279",
    "end": "904680"
  },
  {
    "text": "very old book but it has like a lot of good information there so they are",
    "start": "904680",
    "end": "909800"
  },
  {
    "text": "saying type safety is the most essential element so you might wonder why is this so important so I will explain it",
    "start": "909800",
    "end": "917560"
  },
  {
    "text": "later so let's talk about the vulnerabilities so if you look at the",
    "start": "917560",
    "end": "923279"
  },
  {
    "text": "voler components usually many parts are actually the runtime environment itself",
    "start": "923279",
    "end": "929079"
  },
  {
    "text": "the JRE itself J contains a lot of libraries um component inside it uh",
    "start": "929079",
    "end": "935759"
  },
  {
    "text": "historically we saw deserialization scripting module javascripting module and concurrency component this one is",
    "start": "935759",
    "end": "943199"
  },
  {
    "text": "0507 and corbar module those modules are known to have some problems uh before",
    "start": "943199",
    "end": "949959"
  },
  {
    "text": "and for plugins so when you are talking about Java vulnerabilities so many",
    "start": "949959",
    "end": "955160"
  },
  {
    "text": "people uh talk about maybe they talk about runtime environment or they can talk about JD uh Java deployment toolkit",
    "start": "955160",
    "end": "963959"
  },
  {
    "text": "or Java web start but they are kind of like a little bit different like a",
    "start": "963959",
    "end": "969360"
  },
  {
    "text": "technology so these are for like a plugins actually so they are not",
    "start": "969360",
    "end": "974560"
  },
  {
    "text": "essential part of all like a runtime environment so if you just categorize",
    "start": "974560",
    "end": "981160"
  },
  {
    "text": "all those like vity types for Java actually you can overall you can see",
    "start": "981160",
    "end": "986880"
  },
  {
    "text": "four uh different types so the first one is type confusion so",
    "start": "986880",
    "end": "992639"
  },
  {
    "text": "this one is uh the vulnerability that is related to type safety that we just",
    "start": "992639",
    "end": "998360"
  },
  {
    "text": "talked about so type confusion means uh the situation where type safety is not",
    "start": "998360",
    "end": "1005880"
  },
  {
    "text": "uh working so if type safety fails uh it is Tye confusion so why is this so important",
    "start": "1005880",
    "end": "1013480"
  },
  {
    "text": "because as I said the class loader security manager they are all like a classes in Java and they are object so",
    "start": "1013480",
    "end": "1021000"
  },
  {
    "text": "if you make some confusion type confusion with class loader or security manager with other like a fake uh data",
    "start": "1021000",
    "end": "1029520"
  },
  {
    "text": "type that Theo made then you can actually control the whole security model inside the jvm so that's why this",
    "start": "1029520",
    "end": "1037839"
  },
  {
    "text": "T type safety is so important in like Java so for tip confusion this is not a",
    "start": "1037839",
    "end": "1045240"
  },
  {
    "text": "New Concept it's been known like more than 10 years and if if you look at this like a securing Java uh book and uh this",
    "start": "1045240",
    "end": "1053360"
  },
  {
    "text": "like a blackhead Asia um presentation it's been like a 10 years so it's been",
    "start": "1053360",
    "end": "1060160"
  },
  {
    "text": "like a talked about like a long time ago but kind of it's forgotten and it has a",
    "start": "1060160",
    "end": "1066640"
  },
  {
    "text": "long story and a long history and it is kind of very very well-known problem so for example for TI confusion",
    "start": "1066640",
    "end": "1074000"
  },
  {
    "text": "there are three major vulnerabilities found recently the first one is uh 2012",
    "start": "1074000",
    "end": "1080280"
  },
  {
    "text": "0507 the the avability we will talk about today and the second one is 2011",
    "start": "1080280",
    "end": "1086080"
  },
  {
    "text": "3521 this one is the ti confusion in Coral module so you can see that this",
    "start": "1086080",
    "end": "1091520"
  },
  {
    "text": "one is from atom reference array the second one is from Coral so looks like they are just happening in random like",
    "start": "1091520",
    "end": "1098000"
  },
  {
    "text": "modules so the bability can happen from any modules inside JRE and the third one is actually from",
    "start": "1098000",
    "end": "1105400"
  },
  {
    "text": "hosal field instruction so when you are doing F field uh G field instructions and there can be some tight confusion",
    "start": "1105400",
    "end": "1112520"
  },
  {
    "text": "between static field and some instance field so this one 2012 1723 this one was",
    "start": "1112520",
    "end": "1119760"
  },
  {
    "text": "just found like just three weeks ago so we are just looking into 12",
    "start": "1119760",
    "end": "1125760"
  },
  {
    "text": "12507 and 12 1723 both of them we are monitoring them actually this one got it",
    "start": "1125760",
    "end": "1132840"
  },
  {
    "text": "is still getting more detections right now but looks like this one new like a new vity is like catching up whole",
    "start": "1132840",
    "end": "1139880"
  },
  {
    "text": "detections so looks like there are more and more like Mal writers are like",
    "start": "1139880",
    "end": "1145640"
  },
  {
    "text": "introducing uh new uh voles second type of like a Java voles",
    "start": "1145640",
    "end": "1154679"
  },
  {
    "text": "uh is logic ER so for example uh when you are implementing some component for",
    "start": "1154679",
    "end": "1161440"
  },
  {
    "text": "JRE uh if you made some mistake then it will lead to kind of like a",
    "start": "1161440",
    "end": "1167240"
  },
  {
    "text": "vulnerability so for example 2011 3544 uh this one is follow with inside",
    "start": "1167240",
    "end": "1174480"
  },
  {
    "text": "the Java Rhino script engine so security manager is not implemented",
    "start": "1174480",
    "end": "1179679"
  },
  {
    "text": "correctly so you can when you are calling uh this modu is for JavaScript",
    "start": "1179679",
    "end": "1185679"
  },
  {
    "text": "execution inside uh Java environment so when you are calling JavaScript if you",
    "start": "1185679",
    "end": "1191840"
  },
  {
    "text": "call like some like a a security manager no code inside it uh it will just not",
    "start": "1191840",
    "end": "1199000"
  },
  {
    "text": "security manager itself as because the EV method from this script engine is",
    "start": "1199000",
    "end": "1205600"
  },
  {
    "text": "kind of privileged quote so they forgot to like U uh ass set the security uh",
    "start": "1205600",
    "end": "1212840"
  },
  {
    "text": "policy correctly when they're running this security um the the what is the JavaScript code and the second Vol is",
    "start": "1212840",
    "end": "1221280"
  },
  {
    "text": "Java web start basic s simple this fish policy file like override of vity this",
    "start": "1221280",
    "end": "1226640"
  },
  {
    "text": "one is a little bit complicated because it involves with uh uh jnlp protocol but",
    "start": "1226640",
    "end": "1233080"
  },
  {
    "text": "it basically you can overwrite the security policy file itself you can just make the Java think that uh the provided",
    "start": "1233080",
    "end": "1241000"
  },
  {
    "text": "uh policy file from your web server is the correct like a policy file for that",
    "start": "1241000",
    "end": "1246240"
  },
  {
    "text": "applet and you can set just all permission for that Java applet then you can run anything you",
    "start": "1246240",
    "end": "1252760"
  },
  {
    "text": "want the third issue actually is memory corruption so you might wonder oh there is no memory corruption for for Java and",
    "start": "1252760",
    "end": "1259520"
  },
  {
    "text": "actually they exist and for example 2010 0842 and 2010 3552 so they are all like",
    "start": "1259520",
    "end": "1268400"
  },
  {
    "text": "memory corruption issues some kind traditional issues but looks like they are not so",
    "start": "1268400",
    "end": "1274080"
  },
  {
    "text": "popular so somehow right now Java is not suffering much from memory corruption",
    "start": "1274080",
    "end": "1280000"
  },
  {
    "text": "issues they are much more suffering from uh tight confusion issues right now 2012",
    "start": "1280000",
    "end": "1285760"
  },
  {
    "text": "we have two major tight confusion bugs just I uh just as I",
    "start": "1285760",
    "end": "1291520"
  },
  {
    "text": "explained and the last type of uh vulnerabilities uh is argument injection",
    "start": "1291520",
    "end": "1297880"
  },
  {
    "text": "this one is very popular with Java plugin uh what is it the plugin Technologies like Java web start Java",
    "start": "1297880",
    "end": "1304400"
  },
  {
    "text": "deployment toolkit so when you are like uh calling uh those uh component you can",
    "start": "1304400",
    "end": "1311760"
  },
  {
    "text": "actually make it uh to pass some command line argument so actually when the",
    "start": "1311760",
    "end": "1317200"
  },
  {
    "text": "plugin is running they will runs java.exe or Java W exe that kind of",
    "start": "1317200",
    "end": "1322400"
  },
  {
    "text": "thing and actually you can make uh to pass some command line argument and you can make some like command execution",
    "start": "1322400",
    "end": "1329159"
  },
  {
    "text": "through that so we can just call that argument injection so you might wonder that if",
    "start": "1329159",
    "end": "1335320"
  },
  {
    "text": "you are new to Java like a malware World maybe you can wonder what kind of tool",
    "start": "1335320",
    "end": "1341240"
  },
  {
    "text": "can I use so we will explain it briefly here so the note is that uh actually",
    "start": "1341240",
    "end": "1348120"
  },
  {
    "text": "micro of doesn't uh endorse any tools that I'm going to uh explain U the tools",
    "start": "1348120",
    "end": "1355039"
  },
  {
    "text": "are basically based on my personal experience so for any researches you",
    "start": "1355039",
    "end": "1362360"
  },
  {
    "text": "usually you have two methods like the first one is static analysis the second one is dynamic analysis so for static",
    "start": "1362360",
    "end": "1370440"
  },
  {
    "text": "analysis uh actually uh first you have the compilers",
    "start": "1370440",
    "end": "1375600"
  },
  {
    "text": "they are much much easier way to uh deal with some like Java binaries actually so",
    "start": "1375600",
    "end": "1382159"
  },
  {
    "text": "for example Jed GUI or J they are the most popular uh the compilers out there",
    "start": "1382159",
    "end": "1389200"
  },
  {
    "text": "and uh they are like very effective actually they can generate from the Java",
    "start": "1389200",
    "end": "1394679"
  },
  {
    "text": "binary actually you can create very very nice uh decompiled source code and",
    "start": "1394679",
    "end": "1399919"
  },
  {
    "text": "sometimes you can just make it recompile again so you during during uh through that method you can actually test the",
    "start": "1399919",
    "end": "1407080"
  },
  {
    "text": "m and actually sometimes jdg works fine but sometimes J Jed works fine sometimes",
    "start": "1407080",
    "end": "1413480"
  },
  {
    "text": "both of them fails and there are always the possibility for them to fail",
    "start": "1413480",
    "end": "1418880"
  },
  {
    "text": "actually because the Malia writers use some kind of lowlevel manipulation of the bite code and it will make the",
    "start": "1418880",
    "end": "1426240"
  },
  {
    "text": "decompiler uh like a process uh to fail so decompilers work like just looking at",
    "start": "1426240",
    "end": "1432799"
  },
  {
    "text": "some patterns that is generated by some like a very very popular uh uh jav",
    "start": "1432799",
    "end": "1438720"
  },
  {
    "text": "compiling tools so they are looking for that patterns if they can't find that kind of patterns then they will fail so",
    "start": "1438720",
    "end": "1445640"
  },
  {
    "text": "in that case the next option is actually Ida so you might wonder oh Ida is supported Java binaries yeah they",
    "start": "1445640",
    "end": "1452400"
  },
  {
    "text": "supported and so if you are not so sure about the Java like internals the binary",
    "start": "1452400",
    "end": "1458400"
  },
  {
    "text": "internals you should use Ida to confirm your findings so they show like um",
    "start": "1458400",
    "end": "1463600"
  },
  {
    "text": "usually they show like a good like a bite code sometimes they also",
    "start": "1463600",
    "end": "1470639"
  },
  {
    "text": "fail so next approach is dynamic analysis so you can actually use debers",
    "start": "1470720",
    "end": "1477279"
  },
  {
    "text": "so there are some conditions actually so you can use eclipse or nepin they are just like a very very popular uh Java uh",
    "start": "1477279",
    "end": "1485799"
  },
  {
    "text": "IDE but you can if you can decompile the Mal itself you can just decompile them as a source code form and just make them",
    "start": "1485799",
    "end": "1493360"
  },
  {
    "text": "as a project and make it a compile compilable and the problem is that uh",
    "start": "1493360",
    "end": "1499760"
  },
  {
    "text": "after they actually you can the binary through the what is that debugging process you can put the break point you",
    "start": "1499760",
    "end": "1505240"
  },
  {
    "text": "can inspect the like a variables you can actually watch how the Mal is doing so",
    "start": "1505240",
    "end": "1511880"
  },
  {
    "text": "it is like a very very convenient method the problem is that if the Mal code is not DEC compilable then this option will",
    "start": "1511880",
    "end": "1519640"
  },
  {
    "text": "not work so the last option is actually instrumentation so the thing is that for",
    "start": "1519640",
    "end": "1526080"
  },
  {
    "text": "Java instrumentation itself has a a kind of long long history and it has been used for like all different kinds of",
    "start": "1526080",
    "end": "1533120"
  },
  {
    "text": "like purposes uh the most mostly it was used for profiling and there are like a",
    "start": "1533120",
    "end": "1538799"
  },
  {
    "text": "lot of different purposes for instrumentation but the thing is that you can use instrumentation for security",
    "start": "1538799",
    "end": "1544399"
  },
  {
    "text": "uh research purpose so you can just instrument the binary Java bite code itself you can put some uh debugging",
    "start": "1544399",
    "end": "1551880"
  },
  {
    "text": "messages and you can put whatever logic you want actually so for instrumentation",
    "start": "1551880",
    "end": "1557919"
  },
  {
    "text": "tools you can use Bell ASM some people like ASM some people like Bell so both",
    "start": "1557919",
    "end": "1563679"
  },
  {
    "text": "of them yeah both of them are good actually so we now we talked about",
    "start": "1563679",
    "end": "1569880"
  },
  {
    "text": "security model and we talked about vulnerabilities and tools now let's look at the tie confusion because tie",
    "start": "1569880",
    "end": "1576360"
  },
  {
    "text": "confusion is the most prevalent uh like a vity type right now so this one 202",
    "start": "1576360",
    "end": "1582640"
  },
  {
    "text": "0507 is the most like a notorious one so we are looking into that now so this one",
    "start": "1582640",
    "end": "1589799"
  },
  {
    "text": "is from the actual modare so this one is detected as exploit Java uh this one B",
    "start": "1589799",
    "end": "1597320"
  },
  {
    "text": "variant so from our engine Microsoft uh security ensal so if you look at that uh",
    "start": "1597320",
    "end": "1604440"
  },
  {
    "text": "this is really simple code so this is the main part of the exploitation so the first step is like",
    "start": "1604440",
    "end": "1611760"
  },
  {
    "text": "building some serialized object so you might be very very familiar with serialized object if you worked with",
    "start": "1611760",
    "end": "1618279"
  },
  {
    "text": "with Java or C or probably with C++ they all have serialized object concept so if",
    "start": "1618279",
    "end": "1625440"
  },
  {
    "text": "you have some object in the on the memory so actually some object can be saved to the file or in bite array form",
    "start": "1625440",
    "end": "1634919"
  },
  {
    "text": "so actually these hex strings uh represent some object inside the memory",
    "start": "1634919",
    "end": "1640720"
  },
  {
    "text": "so there it is just building just doing some string manipulation and actually it's calling a",
    "start": "1640720",
    "end": "1647039"
  },
  {
    "text": "read object uh method uh from this stream and",
    "start": "1647039",
    "end": "1652600"
  },
  {
    "text": "actually that one is object array so and actually they are ref referencing that",
    "start": "1652600",
    "end": "1657679"
  },
  {
    "text": "object array zero and one with this specific data type so you might wonder",
    "start": "1657679",
    "end": "1663600"
  },
  {
    "text": "what help type is so actually help type is the type that the the attacker",
    "start": "1663600",
    "end": "1670120"
  },
  {
    "text": "defined so you can see the help class later in the code so a to M reference",
    "start": "1670120",
    "end": "1675559"
  },
  {
    "text": "array uh this is the type that is respon responsible for the this",
    "start": "1675559",
    "end": "1681279"
  },
  {
    "text": "vulnerability so the tip confusion happens when uh they are calling this",
    "start": "1681480",
    "end": "1687799"
  },
  {
    "text": "local Atomic reference array same method here actually local Atomic reference",
    "start": "1687799",
    "end": "1694039"
  },
  {
    "text": "array uh is from here so it's from the object itself so it is calling one of",
    "start": "1694039",
    "end": "1700200"
  },
  {
    "text": "the method from the reference array and setting the uh index zero to local class",
    "start": "1700200",
    "end": "1705880"
  },
  {
    "text": "loader so here is the class loader so I told uh already that class loader is",
    "start": "1705880",
    "end": "1712200"
  },
  {
    "text": "very very important uh uh object in the jbm so it's getting some class loader",
    "start": "1712200",
    "end": "1718919"
  },
  {
    "text": "from the system and it is passing it through this like method code and actually during this time type confusion",
    "start": "1718919",
    "end": "1725200"
  },
  {
    "text": "is happening so you might wonder what is happening there so the thing is that if you look into the uh memory structure",
    "start": "1725200",
    "end": "1732519"
  },
  {
    "text": "itself um so this one this whole Square",
    "start": "1732519",
    "end": "1738320"
  },
  {
    "text": "uh this rectangle thing is actually um uh the whole um object that is read from",
    "start": "1738320",
    "end": "1746320"
  },
  {
    "text": "the serialized object so this one is array of object and it has two members there so so this one is first member",
    "start": "1746320",
    "end": "1754279"
  },
  {
    "text": "index zero and this one is index one and index zero has each own array so",
    "start": "1754279",
    "end": "1761559"
  },
  {
    "text": "each help array and the size is one and the first member is null",
    "start": "1761559",
    "end": "1768880"
  },
  {
    "text": "and array of object one is actually atomy reference array type and this data",
    "start": "1768880",
    "end": "1775600"
  },
  {
    "text": "type actually has private member array and this type is actually object array",
    "start": "1775600",
    "end": "1782120"
  },
  {
    "text": "so actually this one is array is just doing referencing to this help object",
    "start": "1782120",
    "end": "1790519"
  },
  {
    "text": "help array so if you look at this one is from the actually from the eclipse debugging so if you look into this uh um",
    "start": "1790519",
    "end": "1799320"
  },
  {
    "text": "help one array uh this one the array member from Atomic reference array is",
    "start": "1799320",
    "end": "1804360"
  },
  {
    "text": "actually referencing to this like a help one array so if you look at this ID",
    "start": "1804360",
    "end": "1810600"
  },
  {
    "text": "field id90 here and this one is id90 so they are same object actually so this",
    "start": "1810600",
    "end": "1817480"
  },
  {
    "text": "one this structure you can't make this structure using some Java code you can't",
    "start": "1817480",
    "end": "1822519"
  },
  {
    "text": "do that actually so the attackers just uh manipulated the ser IED object",
    "start": "1822519",
    "end": "1829039"
  },
  {
    "text": "themselves they know about the the specification for the serialized object is open so they just manipulated that",
    "start": "1829039",
    "end": "1836080"
  },
  {
    "text": "structure itself and after this call uh this call like a local atom",
    "start": "1836080",
    "end": "1844039"
  },
  {
    "text": "reference array set object and set member from set zero to local class load",
    "start": "1844039",
    "end": "1849360"
  },
  {
    "text": "it means that uh this object this array uh you are just replacing the index one",
    "start": "1849360",
    "end": "1856960"
  },
  {
    "text": "element to local class loader so actually this one is referencing to here",
    "start": "1856960",
    "end": "1862639"
  },
  {
    "text": "so it's just replacing the first member in help class the thing is that if you",
    "start": "1862639",
    "end": "1868519"
  },
  {
    "text": "look at this uh the debugging thing so you can see that the app two both of",
    "start": "1868519",
    "end": "1873799"
  },
  {
    "text": "these and these are replaced with app two class loader and actually they are same because this is reference and the",
    "start": "1873799",
    "end": "1882159"
  },
  {
    "text": "thing is that help class help array should contain help type there but it's",
    "start": "1882159",
    "end": "1888440"
  },
  {
    "text": "containing app two class load type here so this is typ confusion so Tye",
    "start": "1888440",
    "end": "1893480"
  },
  {
    "text": "confusion is not kind of difficult concept it is a really easy concept so help array contains totally different",
    "start": "1893480",
    "end": "1901320"
  },
  {
    "text": "data type inside so it's not it should have help type here but it has some",
    "start": "1901320",
    "end": "1906679"
  },
  {
    "text": "object that is not in help type so this is uh the uh typical type confusion like",
    "start": "1906679",
    "end": "1914639"
  },
  {
    "text": "a situation and actually so you might wonder that",
    "start": "1914639",
    "end": "1921039"
  },
  {
    "text": "how can this be possible if it is possible with just writing some code you can just make like a Java Val very very",
    "start": "1921039",
    "end": "1927799"
  },
  {
    "text": "easily but this is only possible when the vulnerability that is replacing some",
    "start": "1927799",
    "end": "1933360"
  },
  {
    "text": "object without checking the data types exist in the trusted code so the trusty code is like the code that is actually",
    "start": "1933360",
    "end": "1941480"
  },
  {
    "text": "inside the JRE itself so when the JRE some of the part of J code is written in",
    "start": "1941480",
    "end": "1947639"
  },
  {
    "text": "this way not checking the data types when they are replacing some object uh then uh it makes the",
    "start": "1947639",
    "end": "1956158"
  },
  {
    "text": "vulnerability so for example for this code we know that this same method from",
    "start": "1956559",
    "end": "1963159"
  },
  {
    "text": "Atomic reference array has the varability right so if we call this Atomic reference array same method with",
    "start": "1963159",
    "end": "1970440"
  },
  {
    "text": "some index and you can pass any data type here actually you can replace uh the underlying object without type",
    "start": "1970440",
    "end": "1977519"
  },
  {
    "text": "checking and the fundamental reason why it is happening is that it is actually using",
    "start": "1977519",
    "end": "1985880"
  },
  {
    "text": "unsafe uh put object volatile method inside there so if you look at the code for that actually it's very very simple",
    "start": "1985880",
    "end": "1992880"
  },
  {
    "text": "code so you might wonder what unsafe is so unsafe is kind of very very unsafe",
    "start": "1992880",
    "end": "1999440"
  },
  {
    "text": "method class actually it's from the actually uh uh",
    "start": "1999440",
    "end": "2006240"
  },
  {
    "text": "the JRE actually so some misc unsafe class that is the class name actually so",
    "start": "2006240",
    "end": "2012799"
  },
  {
    "text": "they know when they made this class class this one is really unsafe so this",
    "start": "2012799",
    "end": "2018120"
  },
  {
    "text": "one is for some Dynamic manipulation of Java memory and object and it is kind of",
    "start": "2018120",
    "end": "2023960"
  },
  {
    "text": "very very low level and it is unsafe as the name implies but the thing is that this one is very very efficient because",
    "start": "2023960",
    "end": "2030559"
  },
  {
    "text": "it's just uh going not doing any kind of type checks any anything they they are",
    "start": "2030559",
    "end": "2035600"
  },
  {
    "text": "not doing anything so this one is very efficient in like managing some manipulating memory so this one is only",
    "start": "2035600",
    "end": "2043000"
  },
  {
    "text": "allowed in trust code but somehow uh the trusty code itself just I",
    "start": "2043000",
    "end": "2049440"
  },
  {
    "text": "said the atom reference or class just like that class if that one has the",
    "start": "2049440",
    "end": "2055079"
  },
  {
    "text": "vulnerability uh then it will lead to to like a kind of privilege escalation",
    "start": "2055079",
    "end": "2063078"
  },
  {
    "text": "situation so now let's let's look at how this type confusion can be used for",
    "start": "2065280",
    "end": "2072480"
  },
  {
    "text": "exploitation so we talked about he class you might wonder what help class is but this one is just Nam from the manual",
    "start": "2073119",
    "end": "2080079"
  },
  {
    "text": "writer so help class is just happen to be there uh that the attacker chose so",
    "start": "2080079",
    "end": "2086560"
  },
  {
    "text": "help class is actually extended from class loader so if you look at the",
    "start": "2086560",
    "end": "2092000"
  },
  {
    "text": "source code it's like extend extension from the class loader and it has a",
    "start": "2092000",
    "end": "2097240"
  },
  {
    "text": "public uh static uh method do work and it's getting help class itself so it is",
    "start": "2097240",
    "end": "2103359"
  },
  {
    "text": "one of the method from help class and as the first uh parameter is getting help",
    "start": "2103359",
    "end": "2110280"
  },
  {
    "text": "class so this one is the actual flow that might be seen from bite code",
    "start": "2111079",
    "end": "2118640"
  },
  {
    "text": "verifier so this one the upper code is the uh the actual exploitation part the",
    "start": "2118640",
    "end": "2125480"
  },
  {
    "text": "public class test uh this one is sub class of applet it means that this code",
    "start": "2125480",
    "end": "2130800"
  },
  {
    "text": "will be run first from Whole like a binary and this one class loader uh help",
    "start": "2130800",
    "end": "2139000"
  },
  {
    "text": "help class this one is extending class loader itself so if you look at this in",
    "start": "2139000",
    "end": "2144720"
  },
  {
    "text": "this part actually uh the it's just reading the object and it's just",
    "start": "2144720",
    "end": "2151200"
  },
  {
    "text": "assigning referencing this array of object zero uh with help array they are",
    "start": "2151200",
    "end": "2157400"
  },
  {
    "text": "help array type just as we saw so it's just passing help of array",
    "start": "2157400",
    "end": "2164520"
  },
  {
    "text": "array of help index zero and they should be help type right so each passing and",
    "start": "2164520",
    "end": "2171960"
  },
  {
    "text": "do work it's calling do work here and the control flow goes here do work it's getting help typ and do work is",
    "start": "2171960",
    "end": "2178720"
  },
  {
    "text": "accepting help typ so there is nothing wrong so do work is accepting help timee and the code here help do work is just",
    "start": "2178720",
    "end": "2185280"
  },
  {
    "text": "passing help timee and that's it the fire from jbm just thinks that oh everything is just fine and they they",
    "start": "2185280",
    "end": "2192000"
  },
  {
    "text": "just let the code run so from this static analysis from the verifier they",
    "start": "2192000",
    "end": "2197920"
  },
  {
    "text": "don't see that the actual Atomic reference array set method will change the underlying object",
    "start": "2197920",
    "end": "2204119"
  },
  {
    "text": "type so if you do some kind of dynamic analysis so array of help is help array",
    "start": "2204119",
    "end": "2210720"
  },
  {
    "text": "type this one is same as static analysis but when this call is made the TP",
    "start": "2210720",
    "end": "2215760"
  },
  {
    "text": "confusion happens actually already of help zero is the app two class which is",
    "start": "2215760",
    "end": "2221560"
  },
  {
    "text": "a sub class of class load type and after that it's passing that",
    "start": "2221560",
    "end": "2226839"
  },
  {
    "text": "half type object with class loader actual object so underlying object is subass of class",
    "start": "2226839",
    "end": "2233200"
  },
  {
    "text": "loader but the like a bite code level they think that this one is still help",
    "start": "2233200",
    "end": "2238520"
  },
  {
    "text": "ti so it is tie confusion as the name implies so the this one do work is",
    "start": "2238520",
    "end": "2245880"
  },
  {
    "text": "expecting help type but it thinks that it got help type but actually it got class loader",
    "start": "2245880",
    "end": "2252119"
  },
  {
    "text": "type and it's calling some Define class method from this uh help type which is a",
    "start": "2252119",
    "end": "2259839"
  },
  {
    "text": "subass of class loer and it's just creating some class Define class is a a",
    "start": "2259839",
    "end": "2266200"
  },
  {
    "text": "method from class loader and which actually can set up some uh create some",
    "start": "2266200",
    "end": "2272760"
  },
  {
    "text": "uh class with your own permission so it's passing some local",
    "start": "2272760",
    "end": "2277839"
  },
  {
    "text": "protection domain actually you can specify the permission that actual code inside in the bite array will have so if",
    "start": "2277839",
    "end": "2285960"
  },
  {
    "text": "you pass some like all permission here the code will have all permission you can do whatever you can do you can",
    "start": "2285960",
    "end": "2291319"
  },
  {
    "text": "execute programs it can delete file you can create file you can do whatever you can do the next thing is that it's calling",
    "start": "2291319",
    "end": "2299119"
  },
  {
    "text": "new instance so it's just instance shate uh the class",
    "start": "2299119",
    "end": "2304480"
  },
  {
    "text": "itself so you can see that from the static on point of view you can see the actual underlying operations uh from the",
    "start": "2304480",
    "end": "2311960"
  },
  {
    "text": "trust code and it will not see that this local atomy reference or set method will",
    "start": "2311960",
    "end": "2318040"
  },
  {
    "text": "make some tight confusion and it thinks that uh everything is fine and it will",
    "start": "2318040",
    "end": "2323319"
  },
  {
    "text": "just pass some Ty compus uh variables so you might wonder the next",
    "start": "2323319",
    "end": "2330480"
  },
  {
    "text": "important thing is",
    "start": "2330480",
    "end": "2333400"
  },
  {
    "text": "that the next very important Concept in exploiting Java Vol is is actually",
    "start": "2336440",
    "end": "2342960"
  },
  {
    "text": "Define class method they are kind of very protected from abusing so this",
    "start": "2342960",
    "end": "2348880"
  },
  {
    "text": "method has kind of some history uh being abused in the past",
    "start": "2348880",
    "end": "2353920"
  },
  {
    "text": "so kind of if you call this method with",
    "start": "2353920",
    "end": "2359160"
  },
  {
    "text": "some uh protection domain so if you look at this it's uh setting some URL file",
    "start": "2359160",
    "end": "2365800"
  },
  {
    "text": "URL so it means that the class is loaded from local file system",
    "start": "2365800",
    "end": "2371880"
  },
  {
    "text": "and certificate is kind of null and it's setting the permission here and it's setting all permission here and it's",
    "start": "2371880",
    "end": "2378800"
  },
  {
    "text": "creating of uh what is that the protection domain Here Local protection domain and it's passing this local",
    "start": "2378800",
    "end": "2385160"
  },
  {
    "text": "protection domain to Define class method so the thing is",
    "start": "2385160",
    "end": "2393800"
  },
  {
    "text": "that uh you can't access defined class method outside from class loader itself",
    "start": "2395760",
    "end": "2402880"
  },
  {
    "text": "or subass of that class loader so you should sub class class loader itself to",
    "start": "2402880",
    "end": "2409400"
  },
  {
    "text": "call a Define class so you should make some sub class",
    "start": "2409400",
    "end": "2414560"
  },
  {
    "text": "just like to call this defined class method you should be doing this just",
    "start": "2414560",
    "end": "2422520"
  },
  {
    "text": "extend class loader and you create your own Heth class any class and you can",
    "start": "2422520",
    "end": "2428640"
  },
  {
    "text": "call Define class in that case so you might don't know what is wrong with this picture so you are extending the help",
    "start": "2428640",
    "end": "2435040"
  },
  {
    "text": "class here and you are calling the Define class if you have this class you can do whatever you can do right but the",
    "start": "2435040",
    "end": "2441520"
  },
  {
    "text": "thing is that even though you have that help class uh you can't um let me see",
    "start": "2441520",
    "end": "2449680"
  },
  {
    "text": "you can't instantiate uh that class so you need this crate class loader permission to to",
    "start": "2449680",
    "end": "2457599"
  },
  {
    "text": "instantiate any subass uh of class loader so even though you can create the",
    "start": "2457599",
    "end": "2463920"
  },
  {
    "text": "class loader uh the uh your own class that calls Define class you have it in",
    "start": "2463920",
    "end": "2468960"
  },
  {
    "text": "your code you can't use it so it's useless but the thing is that the T typ",
    "start": "2468960",
    "end": "2475000"
  },
  {
    "text": "confusion thing you are using this tip confusion so if you pass",
    "start": "2475000",
    "end": "2482520"
  },
  {
    "text": "some already instantiated class loader here it will be this code will make",
    "start": "2482520",
    "end": "2490319"
  },
  {
    "text": "Define class to be like a code so you are call you are just passing so if you",
    "start": "2490319",
    "end": "2496599"
  },
  {
    "text": "go back to the code so it's up",
    "start": "2496599",
    "end": "2504640"
  },
  {
    "text": "there so if you look at this code actually it's just getting the class loader the system class loader it's",
    "start": "2504640",
    "end": "2511000"
  },
  {
    "text": "getting get class get class loader and this one is class loader it's just doing the type confusion and actually you are",
    "start": "2511000",
    "end": "2517480"
  },
  {
    "text": "calling the Define define class method from this instance but if you are just",
    "start": "2517480",
    "end": "2522599"
  },
  {
    "text": "calling local class loader Define method here you can't do that because Define uh",
    "start": "2522599",
    "end": "2528440"
  },
  {
    "text": "Define class method itself is kind of",
    "start": "2528440",
    "end": "2533000"
  },
  {
    "text": "protected so that's what is happening with uh this typ confusion",
    "start": "2535280",
    "end": "2541400"
  },
  {
    "text": "thing so you can see that this Ty confusion is usually used in like this",
    "start": "2541480",
    "end": "2547960"
  },
  {
    "text": "form you are just uh sub class uh just extend a class from class loader and",
    "start": "2547960",
    "end": "2554440"
  },
  {
    "text": "create some stating method here and you just call the Define class meth this is really really typical method in",
    "start": "2554440",
    "end": "2560520"
  },
  {
    "text": "exploiting Java voles so in summary you can see that uh",
    "start": "2560520",
    "end": "2566520"
  },
  {
    "text": "using like this type confusion uh if you don't have any typ confusion you can't",
    "start": "2566520",
    "end": "2571640"
  },
  {
    "text": "do anything like instantiate class loader from uh any class extended from class",
    "start": "2571640",
    "end": "2578559"
  },
  {
    "text": "loader and you can't access defined class method from outside of the code even though you have the in instance of",
    "start": "2578559",
    "end": "2585480"
  },
  {
    "text": "that uh class loader and what you can do is app class",
    "start": "2585480",
    "end": "2590599"
  },
  {
    "text": "is extended from class loader and it has access to each own like inherited defined class method and using this typ",
    "start": "2590599",
    "end": "2597040"
  },
  {
    "text": "confusion method you are just passing instance of uh sub uh instance of the",
    "start": "2597040",
    "end": "2603079"
  },
  {
    "text": "class loader and you just make the call in from that",
    "start": "2603079",
    "end": "2609119"
  },
  {
    "text": "so the next subject so we talked about tools and vulnerabilities and to the",
    "start": "2609920",
    "end": "2614960"
  },
  {
    "text": "type confusion itself we are talking about aosc so this one is for Mal analysis",
    "start": "2614960",
    "end": "2622280"
  },
  {
    "text": "actually so the officiation is about the like",
    "start": "2622280",
    "end": "2628119"
  },
  {
    "text": "making malware like inform more of like a not",
    "start": "2628119",
    "end": "2633559"
  },
  {
    "text": "understandable from The Human Side so they are using using some uh language",
    "start": "2633559",
    "end": "2640839"
  },
  {
    "text": "pictures so for example for JavaScript they are using evil function and document right this one is like very",
    "start": "2640839",
    "end": "2648079"
  },
  {
    "text": "well known and for Action script in Adobe Flash they are using flash display loaders load bites and they are loading",
    "start": "2648079",
    "end": "2655400"
  },
  {
    "text": "some sweet file itself in Dynamic way and for Java they are using these two classes Java L class and Java Lang",
    "start": "2655400",
    "end": "2662319"
  },
  {
    "text": "reflect method class so us they are using the method",
    "start": "2662319",
    "end": "2668720"
  },
  {
    "text": "here like from javaan class they are using for name so this using this method",
    "start": "2668720",
    "end": "2674240"
  },
  {
    "text": "actually you can look up the class using the name and using this method G method you",
    "start": "2674240",
    "end": "2680559"
  },
  {
    "text": "can actually look up the method itself and new instance you can use this method",
    "start": "2680559",
    "end": "2686040"
  },
  {
    "text": "to instantiate uh the class itself and this method like class is",
    "start": "2686040",
    "end": "2692400"
  },
  {
    "text": "actually returned from gam method method and from there you can use invoke method",
    "start": "2692400",
    "end": "2698559"
  },
  {
    "text": "to invoke the method itself so you just uh look up the class first and look up",
    "start": "2698559",
    "end": "2705920"
  },
  {
    "text": "the method and instantiate the class itself and after that you invoke the",
    "start": "2705920",
    "end": "2712760"
  },
  {
    "text": "method is so in this way the code that is like running some specific method",
    "start": "2712760",
    "end": "2718599"
  },
  {
    "text": "from a class will not appear in the code the bite code itself so you should run the code to see what they are doing so",
    "start": "2718599",
    "end": "2726520"
  },
  {
    "text": "for example this one is from the actual malware that is exploiting uh",
    "start": "2726520",
    "end": "2734119"
  },
  {
    "text": "0507 so this part is about like a class resolution the first argument par object",
    "start": "2737720",
    "end": "2744680"
  },
  {
    "text": "one this one is actually the class name so they are passing the class name and",
    "start": "2744680",
    "end": "2750160"
  },
  {
    "text": "it is passed to here and actually they are calling class Pro name to look up the class and they are just returning it",
    "start": "2750160",
    "end": "2758720"
  },
  {
    "text": "and after that it's calling G method and it's passing the parm object to which is",
    "start": "2758720",
    "end": "2765000"
  },
  {
    "text": "a method name and it's passing par array of",
    "start": "2765000",
    "end": "2771640"
  },
  {
    "text": "class and it's actually calling the method itself so using this one",
    "start": "2771640",
    "end": "2777240"
  },
  {
    "text": "nine they are actually calling some any method they can they can they want so",
    "start": "2777240",
    "end": "2782920"
  },
  {
    "text": "they are just passing the par parameter types and parameter object here",
    "start": "2782920",
    "end": "2788920"
  },
  {
    "text": "so for example they are doing like this so this",
    "start": "2792280",
    "end": "2798200"
  },
  {
    "text": "lbl is the code here so this one is from class lb and the method La so it's",
    "start": "2798200",
    "end": "2805200"
  },
  {
    "text": "calling lbl here it's passing all those parameters and class names here so for",
    "start": "2805200",
    "end": "2810880"
  },
  {
    "text": "example if the thing that these like a strings are all all like off offc",
    "start": "2810880",
    "end": "2817359"
  },
  {
    "text": "so for example this one local n l y this one is supposed to be class name so",
    "start": "2817359",
    "end": "2823079"
  },
  {
    "text": "let's Trace where it is coming from so for example this class local L",
    "start": "2823079",
    "end": "2830520"
  },
  {
    "text": "uh ly class name is actually from the other class so this one is bite code uh",
    "start": "2830520",
    "end": "2837680"
  },
  {
    "text": "representation of how this assignment is assigning is happening actually if you",
    "start": "2837680",
    "end": "2844559"
  },
  {
    "text": "use like a decompiling this part is not like uh decompiled because these parts",
    "start": "2844559",
    "end": "2850359"
  },
  {
    "text": "are very very very very important in like ofation the M writers do some kind",
    "start": "2850359",
    "end": "2856720"
  },
  {
    "text": "of like a lowlevel manipulation so that uh we can't do decompile the code so you",
    "start": "2856720",
    "end": "2863000"
  },
  {
    "text": "should look into this using Ida and it sees that this one these are the all jbm",
    "start": "2863000",
    "end": "2869040"
  },
  {
    "text": "instructions it's loading the uh register zero and on the stack and it's",
    "start": "2869040",
    "end": "2874920"
  },
  {
    "text": "calling some stating method uh here and uh each accessing static field",
    "start": "2874920",
    "end": "2883520"
  },
  {
    "text": "there and by push is just pushing 15 number 15 loading and actually you can",
    "start": "2883520",
    "end": "2890000"
  },
  {
    "text": "just represent it as this one so it's l n ly it is assigned from n z15 array",
    "start": "2890000",
    "end": "2898359"
  },
  {
    "text": "member so n is the class name l y is the variable name g is the array",
    "start": "2898359",
    "end": "2904000"
  },
  {
    "text": "name so we need to trace G g15 here so g15 is actually coming from here so it's",
    "start": "2904000",
    "end": "2912240"
  },
  {
    "text": "loading LDC is just loading this string to the stack and after that it's",
    "start": "2912240",
    "end": "2917599"
  },
  {
    "text": "calling uh this method me001 213 this sub routine so it's just passing pushing",
    "start": "2917599",
    "end": "2924839"
  },
  {
    "text": "this string and just calling this routine so let's look at this routine and after calling this routine it's",
    "start": "2924839",
    "end": "2930880"
  },
  {
    "text": "assigning the value to uh this ng15 so it's easy so this one is the",
    "start": "2930880",
    "end": "2938400"
  },
  {
    "text": "actual uh deos routine so you can actually use Ida to see this graph so",
    "start": "2938400",
    "end": "2945280"
  },
  {
    "text": "the first uh basic blog is actually doing some kind of switch statement",
    "start": "2945280",
    "end": "2951079"
  },
  {
    "text": "statement actually so it's using irm operation that uh divide the what is",
    "start": "2951079",
    "end": "2957720"
  },
  {
    "text": "that the array index with five and it's doing some switch and it's going through",
    "start": "2957720",
    "end": "2964520"
  },
  {
    "text": "uh going to one to five different branches and if you look at the branch",
    "start": "2964520",
    "end": "2970000"
  },
  {
    "text": "they are very simple they are just pushing some variables here some constant numbers so if you express this",
    "start": "2970000",
    "end": "2978680"
  },
  {
    "text": "as a uh shoter code actually you can see that for uh i z to string length uh it's",
    "start": "2978680",
    "end": "2986319"
  },
  {
    "text": "just divide uh I with five and using the remaining value as the uh switch and for",
    "start": "2986319",
    "end": "2993559"
  },
  {
    "text": "each cases it's using different xrr key so this is a very very simple uh",
    "start": "2993559",
    "end": "2999920"
  },
  {
    "text": "dication so after that it's just doing some XR here ixr and it's just storing",
    "start": "2999920",
    "end": "3006160"
  },
  {
    "text": "them back to the array so each decoded value is like original value XR and XR",
    "start": "3006160",
    "end": "3011839"
  },
  {
    "text": "key and the XR key changes every time like uh there are four different uh XR",
    "start": "3011839",
    "end": "3019040"
  },
  {
    "text": "keys so for example this original aosc string is decoded as Java line integer",
    "start": "3019040",
    "end": "3025720"
  },
  {
    "text": "if you follow this uh same uh uh algorithm so it's a really simple",
    "start": "3025720",
    "end": "3031400"
  },
  {
    "text": "algorithm the thing is that this Keys here every keys I I talked about five",
    "start": "3031400",
    "end": "3038680"
  },
  {
    "text": "different Keys the value changes every time so whenever we have new mare they are using different key so in that case",
    "start": "3038680",
    "end": "3046160"
  },
  {
    "text": "you can't automate the process you have this string but you are not so sure what kind of keys they will use so some kind",
    "start": "3046160",
    "end": "3052400"
  },
  {
    "text": "of human intervention is needed so we need some kind of",
    "start": "3052400",
    "end": "3057920"
  },
  {
    "text": "automation here so this one is the last chapter of this presentation so we use instrumentation",
    "start": "3057920",
    "end": "3064720"
  },
  {
    "text": "in this case so we just as we just talked about instrumentation is like a very very stable technology in Java so",
    "start": "3064720",
    "end": "3072720"
  },
  {
    "text": "you can use Dynamic analysis on Java bite code and just like this one is the",
    "start": "3072720",
    "end": "3080359"
  },
  {
    "text": "actual code is more more complicated than this but this one is just showing very very like a simplified version of",
    "start": "3080359",
    "end": "3087480"
  },
  {
    "text": "the instrumentation so for example we talked about the Java Lang reflect",
    "start": "3087480",
    "end": "3092760"
  },
  {
    "text": "method classes invoke method and we can just replace that method with our own",
    "start": "3092760",
    "end": "3097880"
  },
  {
    "text": "hook like we created our own package inspector package and class our own like",
    "start": "3097880",
    "end": "3103720"
  },
  {
    "text": "a class classro uh class and we created our own like invoke method here and we",
    "start": "3103720",
    "end": "3110599"
  },
  {
    "text": "just made it to uh like uh call our own like invoke hook",
    "start": "3110599",
    "end": "3117640"
  },
  {
    "text": "instead of their own like a system method inoke so we can actually monitor every invoke method that is called",
    "start": "3117640",
    "end": "3124280"
  },
  {
    "text": "inside malware so if you look at the inspector",
    "start": "3124280",
    "end": "3130160"
  },
  {
    "text": "package this one this code is totally written by us and inspect package class",
    "start": "3130160",
    "end": "3135599"
  },
  {
    "text": "hook class and inside it it has invoke hook so every the method object the",
    "start": "3135599",
    "end": "3141240"
  },
  {
    "text": "parameters they they will be passed to our code so we are just printing out some de messages we just dump pass some",
    "start": "3141240",
    "end": "3148760"
  },
  {
    "text": "objects or whatever and after that we are just calling the original method so this is the basic way of like",
    "start": "3148760",
    "end": "3156480"
  },
  {
    "text": "using instrumentation for the malware research so after that uh if you run",
    "start": "3156480",
    "end": "3162559"
  },
  {
    "text": "this instrumented binary through the actual like a JRE environment then you",
    "start": "3162559",
    "end": "3168799"
  },
  {
    "text": "can get uh Java log if you enable the Java log from the control panel and you",
    "start": "3168799",
    "end": "3173920"
  },
  {
    "text": "can get the messages like this so this one is for 2012 0507 and it's you can see that it's uh",
    "start": "3173920",
    "end": "3181680"
  },
  {
    "text": "calling actually the previous uh opos skate code is actually calling atomy reference array set and this method and",
    "start": "3181680",
    "end": "3189599"
  },
  {
    "text": "argument uh the first argument is zero and the second argument is apply to",
    "start": "3189599",
    "end": "3195200"
  },
  {
    "text": "class loader so you can just determine the varability using this automation process so that is what uh we are",
    "start": "3195200",
    "end": "3203640"
  },
  {
    "text": "presenting here and the conclusion is that uh there are like a different kind of",
    "start": "3203640",
    "end": "3210359"
  },
  {
    "text": "like vulnerabilities for Java but currently uh type confusion vity is the",
    "start": "3210359",
    "end": "3216319"
  },
  {
    "text": "most prevalent one and we see that um the maror are using like",
    "start": "3216319",
    "end": "3222640"
  },
  {
    "text": "0507 and 1723 actively right now so you must",
    "start": "3222640",
    "end": "3229240"
  },
  {
    "text": "update your check your J version if you are working for a company you should check that and if you are at home you",
    "start": "3229240",
    "end": "3235799"
  },
  {
    "text": "should check your your J version and you should update them because J doesn't update automatically it shows the",
    "start": "3235799",
    "end": "3242440"
  },
  {
    "text": "notification uh like what is the balloon but you should do the manual update or",
    "start": "3242440",
    "end": "3248400"
  },
  {
    "text": "you can Justa disable the J from the control panel so you get you can go to control panel and select the Java from",
    "start": "3248400",
    "end": "3255359"
  },
  {
    "text": "there and there are some menus like a Java uh Tab and you can click the view Tab and you can actually disable some",
    "start": "3255359",
    "end": "3262400"
  },
  {
    "text": "specific um uh JRE versions or you can just uninstall the J if you don't use J",
    "start": "3262400",
    "end": "3268160"
  },
  {
    "text": "at all so that is the most Safe Way and as you look from this like presentation",
    "start": "3268160",
    "end": "3273880"
  },
  {
    "text": "uh if you write the exploit in right way and if you are not patched the success",
    "start": "3273880",
    "end": "3279839"
  },
  {
    "text": "rate for exploitation is like 100% so this one is really really",
    "start": "3279839",
    "end": "3285799"
  },
  {
    "text": "dangerous and you should be doing something like update to remove or like",
    "start": "3285799",
    "end": "3293440"
  },
  {
    "text": "a disable so the next uh thing is that uh",
    "start": "3293440",
    "end": "3299280"
  },
  {
    "text": "instrumentation can be used for automatic analysis of this like a Java related Dev abilities and",
    "start": "3299280",
    "end": "3306200"
  },
  {
    "text": "malw and finally thanks to chuning from Microsoft malware protection Center he",
    "start": "3306200",
    "end": "3312280"
  },
  {
    "text": "helped VA the CV 2012 0507 and thanks to him and that's it any",
    "start": "3312280",
    "end": "3319640"
  },
  {
    "text": "[Applause] questions yeah thank you",
    "start": "3319700",
    "end": "3325920"
  }
]