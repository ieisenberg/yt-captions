[
  {
    "text": "hey everyone thanks for coming out um although this is not my first blackout talk it is the first time I'll be",
    "start": "4359",
    "end": "10559"
  },
  {
    "text": "speaking in person I'm really excited to be here and uh let's get [Music]",
    "start": "10559",
    "end": "16240"
  },
  {
    "text": "started so a bit of background uh my name is Bill DiMera and I'm a researcher",
    "start": "16240",
    "end": "22000"
  },
  {
    "text": "for the Microsoft security Response Center uh while working full-time I'm also a full-time student at the",
    "start": "22000",
    "end": "28439"
  },
  {
    "text": "Rochester Institute of Technology I have a relatively diverse background in offensive and defensive security but",
    "start": "28439",
    "end": "35440"
  },
  {
    "text": "my specialization is low-level operating system internals Windows being my",
    "start": "35440",
    "end": "41718"
  },
  {
    "text": "favorite so in this talk we'll be exploring my work into digital signatures specifically the",
    "start": "42760",
    "end": "49440"
  },
  {
    "text": "implementation issues I found with them we'll start with some background on how digital signatures are validated then",
    "start": "49440",
    "end": "56239"
  },
  {
    "text": "we'll look at approaches for attacking them which will tie into the systemic flaw I found and its impact on the",
    "start": "56239",
    "end": "62519"
  },
  {
    "text": "ecosystem a quick disclaimer we'll be discussing several first and third party",
    "start": "62519",
    "end": "67600"
  },
  {
    "text": "vulnerabilities in this talk every everything you see here today are patched issues we won't be dropping any",
    "start": "67600",
    "end": "74159"
  },
  {
    "text": "zero days so how are digital signatures",
    "start": "74159",
    "end": "80759"
  },
  {
    "text": "validated in the real world a digital signature is used to",
    "start": "80759",
    "end": "86280"
  },
  {
    "text": "verify that a message document or software comes from a specific sender",
    "start": "86280",
    "end": "91479"
  },
  {
    "text": "and hasn't been altered during transmission this is done by creating a hash of the message and then encrypting",
    "start": "91479",
    "end": "97720"
  },
  {
    "text": "that hash with the sender's private key a digital certificate on the other hand is a digital document issued by a",
    "start": "97720",
    "end": "104399"
  },
  {
    "text": "trusted third party known as a certificate Authority it contains the public key corresponding to the sender's",
    "start": "104399",
    "end": "110719"
  },
  {
    "text": "private key as well as information about the identity of the sender in order to validate a digital signature the",
    "start": "110719",
    "end": "117799"
  },
  {
    "text": "recipient needs to be able to find the sender's public key the problem is if",
    "start": "117799",
    "end": "123119"
  },
  {
    "text": "the sender simply sent their public key along with their message there's no way to know for the recipient can know uh",
    "start": "123119",
    "end": "130560"
  },
  {
    "text": "that the public key really belongs to the sender by containing the sender's public key and being digitally signed by",
    "start": "130560",
    "end": "137400"
  },
  {
    "text": "a trusted third party CA a digital certificate confirms that the public key",
    "start": "137400",
    "end": "142680"
  },
  {
    "text": "really does belong to the",
    "start": "142680",
    "end": "146079"
  },
  {
    "text": "sender it's important to understand the role of trusted root certificate authorities for digital signatures to",
    "start": "148040",
    "end": "155200"
  },
  {
    "text": "work in practice we need organizations that we can rely on to issue digital",
    "start": "155200",
    "end": "160640"
  },
  {
    "text": "certificates and establish a chain of trust root certificate authorities are",
    "start": "160640",
    "end": "166440"
  },
  {
    "text": "responsible for identity verification of individuals and organizations requesting",
    "start": "166440",
    "end": "171879"
  },
  {
    "text": "a certificate who verifies theas well they come pre-installed for example the",
    "start": "171879",
    "end": "178319"
  },
  {
    "text": "screenshot below is of the windows trusted root store these are the authorities that come with the operating",
    "start": "178319",
    "end": "184840"
  },
  {
    "text": "system and provide a reference point for digital signature",
    "start": "184840",
    "end": "190040"
  },
  {
    "text": "validation so how is a digital certificate verified through the chain of trust remember the trusted root Casas",
    "start": "192440",
    "end": "200280"
  },
  {
    "text": "that come with your machine we can verify if a digital certificate is legitimate by checking if it chains up",
    "start": "200280",
    "end": "207560"
  },
  {
    "text": "to one of these trusted casa in practice the root Casa verify",
    "start": "207560",
    "end": "213319"
  },
  {
    "text": "intermediate Casa which verify your end entity or server certificate and allow",
    "start": "213319",
    "end": "218879"
  },
  {
    "text": "us to determine the legitimacy of a digital message so let's go through a simplified",
    "start": "218879",
    "end": "226000"
  },
  {
    "text": "example of what verifying an executable on Windows looks like under the authentic code",
    "start": "226000",
    "end": "231640"
  },
  {
    "text": "specification first we need to generate an authentic code hash or digest we",
    "start": "231640",
    "end": "237319"
  },
  {
    "text": "start by hashing the PE headers of the executable we skip over some parts of",
    "start": "237319",
    "end": "242519"
  },
  {
    "text": "the header including the security directory and the check some next we",
    "start": "242519",
    "end": "247640"
  },
  {
    "text": "sort every PE section by their file offset in ascending order and hash their",
    "start": "247640",
    "end": "253720"
  },
  {
    "text": "contents if there is any extra data after the PE sections and before to security directory we'll include this",
    "start": "253720",
    "end": "260239"
  },
  {
    "text": "into hash as well once we calculate the hash will'll then grab the encrypted",
    "start": "260239",
    "end": "265840"
  },
  {
    "text": "digest from the security directory which contains the authen code signature we",
    "start": "265840",
    "end": "271479"
  },
  {
    "text": "decrypt and compare this hash with the one we calculated and at this point we validated that the authentic code",
    "start": "271479",
    "end": "277600"
  },
  {
    "text": "signature is either valid or invalid the last thing we need to do is verify the",
    "start": "277600",
    "end": "282680"
  },
  {
    "text": "certificate and the chain of trust does the certificate link to a certificate Authority we trust and that's about",
    "start": "282680",
    "end": "290919"
  },
  {
    "text": "it at least from a high level so let's talk a little bit about",
    "start": "290919",
    "end": "297720"
  },
  {
    "text": "how one can go about attacking digital ual signatures so a quick history recap",
    "start": "297720",
    "end": "304600"
  },
  {
    "text": "since 1996 the use of the md5 algorithm has been discouraged due to its inherent",
    "start": "304600",
    "end": "310000"
  },
  {
    "text": "weaknesses for example in 2004 we saw the public first publication of an md5",
    "start": "310000",
    "end": "316240"
  },
  {
    "text": "Collision researchers were able to generate two distinct files that resulted in the same md5 hash in 2008",
    "start": "316240",
    "end": "324400"
  },
  {
    "text": "researchers abused known md5 weaknesses to generate a malicious intermediate certificate Authority with a valid chain",
    "start": "324400",
    "end": "331440"
  },
  {
    "text": "of trust by using a chosen prefix Collision they were able to create this Rogue intermediate CA that had the same",
    "start": "331440",
    "end": "338680"
  },
  {
    "text": "md5 hash as an end entity certificate that was issued by a legitimate",
    "start": "338680",
    "end": "343960"
  },
  {
    "text": "certificate Authority in 2011 we saw the breach of the Dig notor cdca and in 2012 we saw",
    "start": "343960",
    "end": "352400"
  },
  {
    "text": "the Flame ma abusing a very similar attack to the one we saw in 2008 which allowed them to generate a trusted",
    "start": "352400",
    "end": "358800"
  },
  {
    "text": "Microsoft Sur certificate Authority so let's discuss the attacks",
    "start": "358800",
    "end": "365080"
  },
  {
    "text": "that are relevant for digital signatures from a high level at least",
    "start": "365080",
    "end": "371120"
  },
  {
    "text": "what types of attacks are relevant we have three broad categories that are generally applicable to a lot more than",
    "start": "371120",
    "end": "377400"
  },
  {
    "text": "just digital signatures let's break these down first we have memory corruption issues these are your classic",
    "start": "377400",
    "end": "383759"
  },
  {
    "text": "outabounds read and write vulnerabilities or overflow vulnerabilities that can often arise",
    "start": "383759",
    "end": "389000"
  },
  {
    "text": "from mishandling untrusted data how do we find them typically this involves",
    "start": "389000",
    "end": "395120"
  },
  {
    "text": "manual or guided analysis as well as fuzzing how do we fix them well one good",
    "start": "395120",
    "end": "401599"
  },
  {
    "text": "way is to minimize your attack surface limit the code that processes unrusted data you can also use various",
    "start": "401599",
    "end": "408199"
  },
  {
    "text": "mitigations and memory safe languages uh to substantially reduce your risk for",
    "start": "408199",
    "end": "413960"
  },
  {
    "text": "these issues next we have logic flaws these are highly context specific",
    "start": "413960",
    "end": "419840"
  },
  {
    "text": "implementation issues that vary by application how do we find them again",
    "start": "419840",
    "end": "424879"
  },
  {
    "text": "manual or guided analysis fing fuzzing Etc and these issues typically require a",
    "start": "424879",
    "end": "430639"
  },
  {
    "text": "decent understanding of how the application is supposed to work and the intended usage for example a good way to",
    "start": "430639",
    "end": "437720"
  },
  {
    "text": "find these issues is to look for differences in logic between a design document and the actual",
    "start": "437720",
    "end": "443960"
  },
  {
    "text": "implementation how do we prevent them well again minimizing the code that processes un trusted data is a good",
    "start": "443960",
    "end": "450319"
  },
  {
    "text": "place to start absolutely look for a secure design and also having a test",
    "start": "450319",
    "end": "456879"
  },
  {
    "text": "Suite of expected outcomes are another way to prevent regressions and validate basic",
    "start": "456879",
    "end": "462720"
  },
  {
    "text": "assumptions we also have cryptographic flaws these are different from implementation issues and that they",
    "start": "462720",
    "end": "469039"
  },
  {
    "text": "exist in the cryptographic algorithms themselves how do we find them again this typically involves mathematical",
    "start": "469039",
    "end": "475680"
  },
  {
    "text": "analysis of algorithms to ensure things like pre-image resistance uh second pre-image resistance and strong",
    "start": "475680",
    "end": "481840"
  },
  {
    "text": "Collision resistance and for preventing them for most people just don't roll your own",
    "start": "481840",
    "end": "488720"
  },
  {
    "text": "crypto so logic flaws are one of the harder types of vulnerabilities to address writing cryptographic systems is",
    "start": "492039",
    "end": "498879"
  },
  {
    "text": "inherently challenging due to its complexity cryptographic implementations aren't isolated they interact with a",
    "start": "498879",
    "end": "505639"
  },
  {
    "text": "multitude of other systems protocols and software patching implementations can",
    "start": "505639",
    "end": "510879"
  },
  {
    "text": "get complicated for example one reason why XYZ insecure future you know a",
    "start": "510879",
    "end": "516240"
  },
  {
    "text": "future we know has security issues is difficult to get rid of is because if you simply prevented its use you may",
    "start": "516240",
    "end": "523159"
  },
  {
    "text": "break Legacy systems and applications memory corruption issues are better are",
    "start": "523159",
    "end": "528680"
  },
  {
    "text": "better understood um logic flaws are harder to prevent as they are context",
    "start": "528680",
    "end": "535600"
  },
  {
    "text": "specific let's review the different types of signing certificates and the minimum requirements for obtaining them",
    "start": "537760",
    "end": "544160"
  },
  {
    "text": "first we have regular SSL certificates that you can use to secure your connection with a web server at minimum",
    "start": "544160",
    "end": "551680"
  },
  {
    "text": "you need to prove that you own the domain you are requesting a certificate for this can involve adding a DNS record",
    "start": "551680",
    "end": "558320"
  },
  {
    "text": "or uploading a file to serve via HTTP SM certificates are used for",
    "start": "558320",
    "end": "563640"
  },
  {
    "text": "securing email Communications like SSL certificates you need to approve that you own the email address address that",
    "start": "563640",
    "end": "569720"
  },
  {
    "text": "you're requesting a certificate for which can include the identity uh of yourself or your",
    "start": "569720",
    "end": "577440"
  },
  {
    "text": "organization we also have code signing certificates these are used to maintain the Integrity of your software unlike",
    "start": "579160",
    "end": "585760"
  },
  {
    "text": "Sim or SSL certificates the bar for obtaining one is substantially higher as",
    "start": "585760",
    "end": "591920"
  },
  {
    "text": "we'll soon discuss you will almost always need to verify your identity or the legitimacy of your",
    "start": "591920",
    "end": "598120"
  },
  {
    "text": "organization finally we also have document signing certificates these are in a bit of a gray area as they're",
    "start": "598120",
    "end": "604040"
  },
  {
    "text": "frequently interchangeable with Sim or SSL certificates and have similar",
    "start": "604040",
    "end": "610240"
  },
  {
    "text": "requirements the requirements for different types of certificates can greatly vary let's break down the",
    "start": "612120",
    "end": "617800"
  },
  {
    "text": "different types of validation that Casa can perform with domain validation you",
    "start": "617800",
    "end": "623480"
  },
  {
    "text": "need to prove that you that you control a given domain this is a pretty low bar",
    "start": "623480",
    "end": "628519"
  },
  {
    "text": "for verification because only your domain is validated and because of the lower levels of verification there is a",
    "start": "628519",
    "end": "635360"
  },
  {
    "text": "higher risk of abuse organization validation is where we get into a moderate level of",
    "start": "635360",
    "end": "641120"
  },
  {
    "text": "verification during this process you need to prove the legal and physical existence of your organization this is",
    "start": "641120",
    "end": "648200"
  },
  {
    "text": "often the bare minimum uh for code signing certificates and other sensitive digital signature use",
    "start": "648200",
    "end": "654560"
  },
  {
    "text": "cases extended validation is one of the highest levels of validation that that a CA can perform it's everything you need",
    "start": "654560",
    "end": "662120"
  },
  {
    "text": "for OV or organization validation but more for example you often need to show",
    "start": "662120",
    "end": "667560"
  },
  {
    "text": "that your business is legitimate and not a shell",
    "start": "667560",
    "end": "672360"
  },
  {
    "text": "company so when I started my research into",
    "start": "673519",
    "end": "679600"
  },
  {
    "text": "digital signature implementations the differences between certificate requirements caught my eye for example",
    "start": "679600",
    "end": "685680"
  },
  {
    "text": "in our context having a valid digital signature loone is not sufficient we",
    "start": "685680",
    "end": "691200"
  },
  {
    "text": "need to not only be able to verify that a signature is cryptographically valid but also that it originates from a",
    "start": "691200",
    "end": "697079"
  },
  {
    "text": "trusted Source these two diagrams overview the differences between",
    "start": "697079",
    "end": "702200"
  },
  {
    "text": "extended validation and domain validation the question I had was",
    "start": "702200",
    "end": "708079"
  },
  {
    "text": "looking at the extended validation process which is significantly more tedious than the domain validation",
    "start": "708079",
    "end": "713440"
  },
  {
    "text": "process is what prevents an attacker from abusing a certificate that has has",
    "start": "713440",
    "end": "719160"
  },
  {
    "text": "only proven domain ownership for purposes that require a higher level of verification like code signing so we",
    "start": "719160",
    "end": "726480"
  },
  {
    "text": "know that the DV certificates or domain validated certificates can be used for SSL certificates for example and we know",
    "start": "726480",
    "end": "732680"
  },
  {
    "text": "that organization validation or extended validation is necessary for codes signning certificates what's stopping an",
    "start": "732680",
    "end": "738959"
  },
  {
    "text": "attacker from using one of these certificates that has a much lower bar of identity verification for an",
    "start": "738959",
    "end": "745680"
  },
  {
    "text": "unintended purpose",
    "start": "745680",
    "end": "750880"
  },
  {
    "text": "now let's get into the fun stuff so what defines a certificate's",
    "start": "751120",
    "end": "756360"
  },
  {
    "text": "purpose what distinguishes an SSL certificate from a code signing certificate often it's the extended key",
    "start": "756360",
    "end": "763920"
  },
  {
    "text": "usage field present in most end entity certificates EKU specify what a",
    "start": "763920",
    "end": "770120"
  },
  {
    "text": "certificate is allowed to be used for as an example the image on the right shows",
    "start": "770120",
    "end": "775839"
  },
  {
    "text": "this field from an SSL certificate the server and client authentication usages",
    "start": "775839",
    "end": "781279"
  },
  {
    "text": "mean that the certificate is allowed to authenticate a remote server or",
    "start": "781279",
    "end": "787360"
  },
  {
    "text": "client but what actually verifies these EKU in practice when you sign Digital",
    "start": "788560",
    "end": "795519"
  },
  {
    "text": "Data the utility you use can impose restrictions for example if you're",
    "start": "795519",
    "end": "800639"
  },
  {
    "text": "signing an executable you may receive an error if you try to use a certificate without the",
    "start": "800639",
    "end": "806360"
  },
  {
    "text": "code signing EKU these the restrictions these tools impose are not what matters because they",
    "start": "806360",
    "end": "813320"
  },
  {
    "text": "run before the attack is performed and on an untrusted environment as we'll soon see if I as an",
    "start": "813320",
    "end": "821320"
  },
  {
    "text": "attacker got an error related to the intended purpose of my certificate",
    "start": "821320",
    "end": "826760"
  },
  {
    "text": "there's nothing stopping me from modifying the tool to bypass this",
    "start": "826760",
    "end": "833120"
  },
  {
    "text": "check so how do we identify vulnerable implement ation that fail to validate a",
    "start": "835160",
    "end": "841040"
  },
  {
    "text": "certificate's intended purpose first we started by identifying",
    "start": "841040",
    "end": "847560"
  },
  {
    "text": "some basic criteria now the Microsoft security Response Center is interested in protecting the entire ecosystem not",
    "start": "847560",
    "end": "854880"
  },
  {
    "text": "just first party implementations we ended up looking at a variety of file formats that leverage digital signatures",
    "start": "854880",
    "end": "862880"
  },
  {
    "text": "most frequently this included Cod signing because of the bare minimum organization validation requirement",
    "start": "862880",
    "end": "869560"
  },
  {
    "text": "for testing we generated an SSL certificate which only required proof of",
    "start": "869560",
    "end": "874680"
  },
  {
    "text": "domain control so in the next few slides we'll",
    "start": "874680",
    "end": "881480"
  },
  {
    "text": "review designing tools relevant to the file formats we're interested in and modify them to remove any client side",
    "start": "881480",
    "end": "888800"
  },
  {
    "text": "checks remember modifying our signing tools comes before any attack and it's",
    "start": "888800",
    "end": "894720"
  },
  {
    "text": "on our environment what matters is how to receive an end handles these",
    "start": "894720",
    "end": "901680"
  },
  {
    "text": "zekus so to start with I looked at Microsoft's sign tool which lets you uh",
    "start": "902399",
    "end": "908079"
  },
  {
    "text": "which lets you sign over 25 unique extensions this utility is most often used for authentic code formats and it",
    "start": "908079",
    "end": "914880"
  },
  {
    "text": "comes with the windows SDK first I performed a sanity check and",
    "start": "914880",
    "end": "920680"
  },
  {
    "text": "tried to sign an executable with my SSL certificate as you can see sign tool by",
    "start": "920680",
    "end": "927199"
  },
  {
    "text": "default does not does valid validate the EKU of your signing certificate and you're not allowed to use an ssld",
    "start": "927199",
    "end": "933319"
  },
  {
    "text": "certificate to sign an executable we need to get around this so using Ida Pro I was able to",
    "start": "933319",
    "end": "940240"
  },
  {
    "text": "quickly identify the function responsible for the check by looking for the EKU filter error string the function",
    "start": "940240",
    "end": "948040"
  },
  {
    "text": "was conveniently named filter certificates and I patched it to immediately return and avoid filtering",
    "start": "948040",
    "end": "956800"
  },
  {
    "text": "entirely next time I tried signing my executable it worked without a problem I now had an",
    "start": "957600",
    "end": "964399"
  },
  {
    "text": "exe file that was signed with an SSL",
    "start": "964399",
    "end": "969440"
  },
  {
    "text": "certificate sign tool isn't the only utility relevant to this project the",
    "start": "971160",
    "end": "976319"
  },
  {
    "text": "Manifest generation and editing tool is used to create and modify application or",
    "start": "976319",
    "end": "981560"
  },
  {
    "text": "deployment manifest part of this tool includes the ability to actually sign these",
    "start": "981560",
    "end": "987519"
  },
  {
    "text": "manifests we'll discuss how these are used in practice in a later slide like sign tool M performs EKU",
    "start": "987519",
    "end": "996040"
  },
  {
    "text": "verification when signing a manifest unlike sign tool Mage is written in C",
    "start": "996040",
    "end": "1002279"
  },
  {
    "text": "how do we how can we patch a CKU check I use dpy an older net assembly editor",
    "start": "1002279",
    "end": "1008240"
  },
  {
    "text": "that allows you to decompile C applications and modify",
    "start": "1008240",
    "end": "1013680"
  },
  {
    "text": "them I found a responsible method can sign with by looking for a relevant",
    "start": "1013680",
    "end": "1019000"
  },
  {
    "text": "error message using dnpi I modified this method to always return",
    "start": "1019000",
    "end": "1026480"
  },
  {
    "text": "true as expected this modification allows you to sign manifest with an",
    "start": "1027280",
    "end": "1032558"
  },
  {
    "text": "unrelated certificate that does not have a code signing",
    "start": "1032559",
    "end": "1037438"
  },
  {
    "text": "EKU now that we've prepared our test data signed with our SSL certificate",
    "start": "1038319",
    "end": "1043720"
  },
  {
    "text": "let's try it against Real World authentic code implementations",
    "start": "1043720",
    "end": "1050400"
  },
  {
    "text": "some background on Windows the primary API commonly used to verify the trust of",
    "start": "1052039",
    "end": "1058480"
  },
  {
    "text": "supported objects is when verify trust this function abstracts the job of",
    "start": "1058480",
    "end": "1064240"
  },
  {
    "text": "signature validation to subject interface packages or sips and Trust",
    "start": "1064240",
    "end": "1071039"
  },
  {
    "text": "providers sips are responsible for the format specific verification of digital",
    "start": "1071039",
    "end": "1077400"
  },
  {
    "text": "signatures for example a portable executable will store digital signatures",
    "start": "1077400",
    "end": "1082720"
  },
  {
    "text": "in a different format compared to a Powershell script there's a sip for both and in",
    "start": "1082720",
    "end": "1089120"
  },
  {
    "text": "this talk we'll briefly review this architecture if you're interested in understanding this design in detail I",
    "start": "1089120",
    "end": "1096080"
  },
  {
    "text": "would strongly recommend that you read subverting trust in Windows by Mac",
    "start": "1096080",
    "end": "1102080"
  },
  {
    "text": "Graver so trust providers don't care about the Sip you use they are designed",
    "start": "1103840",
    "end": "1109240"
  },
  {
    "text": "to perform format agnostic trust verification actions common trust",
    "start": "1109240",
    "end": "1114400"
  },
  {
    "text": "providers include when trust action generic C verify which will verify a certificate generic chain verify to",
    "start": "1114400",
    "end": "1122200"
  },
  {
    "text": "verify the chain of trust generic verify which is used to verify a file or object according to the",
    "start": "1122200",
    "end": "1129280"
  },
  {
    "text": "authentic code specification and the generic verify provider is most commonly used for a lot of the formats we see um",
    "start": "1129280",
    "end": "1136919"
  },
  {
    "text": "but it's also used in some other formats that are supported that have sips that",
    "start": "1136919",
    "end": "1143880"
  },
  {
    "text": "supported so as a simple test I wrote a small application to verify and",
    "start": "1144720",
    "end": "1150480"
  },
  {
    "text": "executable with when verify trust unfortunately or fortunately depending",
    "start": "1150480",
    "end": "1155799"
  },
  {
    "text": "on how you look at it it didn't work I received an error stating the certificate is not valid for the",
    "start": "1155799",
    "end": "1161720"
  },
  {
    "text": "requested usage remember remembered to generic",
    "start": "1161720",
    "end": "1166760"
  },
  {
    "text": "verified trust provider unfortunately it turns out that one of the basic requirements for this provider which is",
    "start": "1166760",
    "end": "1174240"
  },
  {
    "text": "used for quite a few different formats is that the code signing EKU is",
    "start": "1174240",
    "end": "1180840"
  },
  {
    "text": "present this meant that most of these formats that are verified through this architecture are protected by",
    "start": "1180840",
    "end": "1189440"
  },
  {
    "text": "default although Windows may have gotten it right for once I was curious about",
    "start": "1192960",
    "end": "1198320"
  },
  {
    "text": "other libraries that validated the authenticity of authentic applications what about the workloads",
    "start": "1198320",
    "end": "1205039"
  },
  {
    "text": "that need to verify these signatures on other operating systems well unfortunately as we'll soon",
    "start": "1205039",
    "end": "1211640"
  },
  {
    "text": "see several authen code Implement implementations outside of windows itself were vulnerable to this",
    "start": "1211640",
    "end": "1219960"
  },
  {
    "text": "attack so the mono project is an open source equivalent of microsoft's.net",
    "start": "1220320",
    "end": "1226559"
  },
  {
    "text": "framework Microsoft's sponsors the project and mono is frequently used in crossplatform applications that want to",
    "start": "1226559",
    "end": "1233760"
  },
  {
    "text": "use net mono supports authentic code signing",
    "start": "1233760",
    "end": "1238799"
  },
  {
    "text": "and verification with its authentic code DE formatter and authentic code formatter classes how can we test mono's",
    "start": "1238799",
    "end": "1246240"
  },
  {
    "text": "authentic code implementation well fortunately mono comes with a check trust tool that allows us to verify the",
    "start": "1246240",
    "end": "1254240"
  },
  {
    "text": "signature of an executable unfortunately due to a lack of EKU",
    "start": "1254240",
    "end": "1261360"
  },
  {
    "text": "validation mono's authentico de formatter class is vulnerable to the",
    "start": "1261360",
    "end": "1266799"
  },
  {
    "text": "attack now this issue isn't just specific to monu's simple check trust",
    "start": "1266799",
    "end": "1272480"
  },
  {
    "text": "testing utility any mono application that uses this class for verifying",
    "start": "1272480",
    "end": "1278720"
  },
  {
    "text": "untrusted executable is potentially",
    "start": "1278720",
    "end": "1283320"
  },
  {
    "text": "vulnerable moving on to our next issue trail of bits is a security consulting",
    "start": "1285880",
    "end": "1290960"
  },
  {
    "text": "firm that helps organizations engineer secure applications they have quite a",
    "start": "1290960",
    "end": "1296200"
  },
  {
    "text": "few open-source tools and projects one of which includes authenticode",
    "start": "1296200",
    "end": "1301600"
  },
  {
    "text": "authentic code is a crossplatform library that allows you to verify the digital signature of a portable",
    "start": "1301600",
    "end": "1308320"
  },
  {
    "text": "executable the intent is to provide a similar interface like when verify Trust",
    "start": "1308320",
    "end": "1313960"
  },
  {
    "text": "on non- Windows platforms unlike when verifi Trust however authentic code does not verify",
    "start": "1313960",
    "end": "1321720"
  },
  {
    "text": "the chain of trust it only verifies the signature the chain of trust is not",
    "start": "1321720",
    "end": "1327400"
  },
  {
    "text": "relevant for EKU however you can verify that a leaf certificate is allowed to be",
    "start": "1327400",
    "end": "1332799"
  },
  {
    "text": "used for code signing without verifying that it was used by a issued without",
    "start": "1332799",
    "end": "1338039"
  },
  {
    "text": "verifying that it was issued by a trusted",
    "start": "1338039",
    "end": "1341879"
  },
  {
    "text": "Authority unfortunately aens code was vulnerable to the EKU hack allowing",
    "start": "1343679",
    "end": "1348760"
  },
  {
    "text": "attackers to sign code with an unrelated certificate Fair disclaimer the re real",
    "start": "1348760",
    "end": "1354679"
  },
  {
    "text": "world implications of this U attack with authentic code are limited for example",
    "start": "1354679",
    "end": "1360480"
  },
  {
    "text": "according to the authors I spoke with authentic code is frequently used in cicd stacks for basic authen code",
    "start": "1360480",
    "end": "1368159"
  },
  {
    "text": "validation of course given its open source nature it's hard to quantify its",
    "start": "1368159",
    "end": "1373240"
  },
  {
    "text": "use with certainty",
    "start": "1373240",
    "end": "1378960"
  },
  {
    "text": "I also wanted to quickly review a bonus example so when I was reviewing authentic codes implementation of",
    "start": "1378960",
    "end": "1385360"
  },
  {
    "text": "signature verification I noticed that it deviated from the specification on the left we have the",
    "start": "1385360",
    "end": "1392760"
  },
  {
    "text": "same diagram from the earlier slide showing a highle overview of what verifying a portable executable looks",
    "start": "1392760",
    "end": "1399600"
  },
  {
    "text": "like on the right I've modified the diagram to reflect authentic code's",
    "start": "1399600",
    "end": "1405039"
  },
  {
    "text": "implementation of the specification according to the authenticode specification you are",
    "start": "1405039",
    "end": "1411000"
  },
  {
    "text": "supposed to Hash the contents of an executable by concatenating the hashes",
    "start": "1411000",
    "end": "1416159"
  },
  {
    "text": "of the PE header sorted PE sections and any extra data authentic code ignored PE sections",
    "start": "1416159",
    "end": "1425080"
  },
  {
    "text": "instead they'd hash the PE header and the rest of the file excluding the",
    "start": "1425080",
    "end": "1430480"
  },
  {
    "text": "security directory on an earlier slide about attacking digital signatures I mentioned",
    "start": "1430480",
    "end": "1436120"
  },
  {
    "text": "how you shouldn't roll your own crypto or deviate from the specification I was curious what were",
    "start": "1436120",
    "end": "1442640"
  },
  {
    "text": "the imple what were the implementation what were the implications of these",
    "start": "1442640",
    "end": "1449278"
  },
  {
    "text": "differences unfortunately this deviation led to a pretty big flaw I found that by",
    "start": "1451559",
    "end": "1457080"
  },
  {
    "text": "embedding the security directory within a PE section I could modify the code of",
    "start": "1457080",
    "end": "1462679"
  },
  {
    "text": "an executable without changing its authenticode hash according to authenticode",
    "start": "1462679",
    "end": "1468399"
  },
  {
    "text": "the problem was that since authentic code skips over the security directory",
    "start": "1468399",
    "end": "1473440"
  },
  {
    "text": "it would hash everything up to the PE section ignore the security D directory with malicious code and hash everything",
    "start": "1473440",
    "end": "1480559"
  },
  {
    "text": "after it you could move around the security directory and the authentic",
    "start": "1480559",
    "end": "1485600"
  },
  {
    "text": "code hash as calculated by authentic code would not",
    "start": "1485600",
    "end": "1490919"
  },
  {
    "text": "change I was able to leverage this this attack to replace the entry point point of a legitimate Microsoft executable",
    "start": "1493279",
    "end": "1500159"
  },
  {
    "text": "with malicious shell coat this issue is not related to EKU it was simply an",
    "start": "1500159",
    "end": "1505279"
  },
  {
    "text": "extra implementation flaw I stumbled upon but it highlights the importance of",
    "start": "1505279",
    "end": "1510399"
  },
  {
    "text": "sticking with the specification and how one small mistake with digital signatures can have a devastating",
    "start": "1510399",
    "end": "1518520"
  },
  {
    "text": "impact let's discuss click once click once is a deployment",
    "start": "1520440",
    "end": "1527399"
  },
  {
    "text": "technique technology that allows developers to create self-updating Windows applications that can be",
    "start": "1527399",
    "end": "1533320"
  },
  {
    "text": "installed and run with minimal",
    "start": "1533320",
    "end": "1537039"
  },
  {
    "text": "interaction under the hood click once deployments are made up of application files a deployment manifest and an",
    "start": "1538520",
    "end": "1545960"
  },
  {
    "text": "optional application manifest the cool part of Click once is that you can",
    "start": "1545960",
    "end": "1551399"
  },
  {
    "text": "install or run applications from a website the picture shows what a click",
    "start": "1551399",
    "end": "1557279"
  },
  {
    "text": "On's prompt can look like which can be triggered by a link in a browser that supports click",
    "start": "1557279",
    "end": "1564520"
  },
  {
    "text": "once so click once applications can be signed automatically with Visual Studio",
    "start": "1566760",
    "end": "1573080"
  },
  {
    "text": "or manually with Mage what does that look like well for visual studio it'll",
    "start": "1573080",
    "end": "1578440"
  },
  {
    "text": "start by taking your unsigned click once deployment it'll assign the application manifest in the application files",
    "start": "1578440",
    "end": "1585159"
  },
  {
    "text": "directory the deployment manifest in that same directory and the application manifest in the root",
    "start": "1585159",
    "end": "1592960"
  },
  {
    "text": "directory so once the deployment was signed which again I use the SSL",
    "start": "1594720",
    "end": "1600120"
  },
  {
    "text": "certificate 4 and the Mage tool we modified earlier I uploaded it to a web server for",
    "start": "1600120",
    "end": "1605559"
  },
  {
    "text": "testing this is again what the prompt looks like the web page can be whatever you want but if you hit that run button",
    "start": "1605559",
    "end": "1612399"
  },
  {
    "text": "or open Button you'll now see uh The Click once security warning",
    "start": "1612399",
    "end": "1618279"
  },
  {
    "text": "and unfortunately uh click once was impacted by the attack uh by signing a",
    "start": "1618279",
    "end": "1623559"
  },
  {
    "text": "clickin deployment with with an SSL certificate I was able to generate a deployment that was legitimate and the",
    "start": "1623559",
    "end": "1629600"
  },
  {
    "text": "IDS of Click",
    "start": "1629600",
    "end": "1632278"
  },
  {
    "text": "once so I want to talk a little bit about some related work from other researchers in 2014 researchers from the",
    "start": "1637720",
    "end": "1645799"
  },
  {
    "text": "University of Texas and the University of California released using Franken",
    "start": "1645799",
    "end": "1651559"
  },
  {
    "text": "certs for automated adversarial testing of certificate validation in ssl/tls",
    "start": "1651559",
    "end": "1658080"
  },
  {
    "text": "implementations so as the name suggests the researchers generated mutated certificates with different combinations",
    "start": "1658080",
    "end": "1665760"
  },
  {
    "text": "of extensions and constraints the idea was to look for inconsistencies across",
    "start": "1665760",
    "end": "1672080"
  },
  {
    "text": "implementations now the paper exclusively focuses on testing the sslt",
    "start": "1672080",
    "end": "1677559"
  },
  {
    "text": "LS implementations in op SSL NSS gnutls",
    "start": "1677559",
    "end": "1684398"
  },
  {
    "text": "Etc of relevance to this talk the researchers found several libraries that",
    "start": "1684880",
    "end": "1690360"
  },
  {
    "text": "failed to validate the appropriate EKU instead of malformed certificates",
    "start": "1690360",
    "end": "1695559"
  },
  {
    "text": "for digital signatures and executables they looked at abusing them in the",
    "start": "1695559",
    "end": "1700960"
  },
  {
    "text": "browser if you'd like to read more about their work check out the GitHub link",
    "start": "1700960",
    "end": "1706440"
  },
  {
    "text": "below We additionally verified that common",
    "start": "1706440",
    "end": "1713519"
  },
  {
    "text": "Implement common libraries like op SSL validate EKU appropriately so if you use",
    "start": "1713519",
    "end": "1720200"
  },
  {
    "text": "these libraries for solely verifying the authenticity of a certificate without",
    "start": "1720200",
    "end": "1725960"
  },
  {
    "text": "specifying a purpose and there's no default you can still be exposed to an EKU",
    "start": "1725960",
    "end": "1732080"
  },
  {
    "text": "attack in op SSL you can specify a context for xile 509 verification which",
    "start": "1732080",
    "end": "1739600"
  },
  {
    "text": "can include EKU defaults you can see an exert in the code below where the EKU",
    "start": "1739600",
    "end": "1746320"
  },
  {
    "text": "default is set by simply specifying that you're an SSL client or an SSL",
    "start": "1746320",
    "end": "1752960"
  },
  {
    "text": "server additionally outside of the formats we reviewed in this talk there are quite a few that didn't work I cut",
    "start": "1754080",
    "end": "1761120"
  },
  {
    "text": "them out for time but there's quite a few implementations outside of the ones we covered that were not impacted by the",
    "start": "1761120",
    "end": "1767799"
  },
  {
    "text": "EKU confusion",
    "start": "1767799",
    "end": "1771080"
  },
  {
    "text": "attack all right let's review some takeaways and techniques so let's review",
    "start": "1773080",
    "end": "1779120"
  },
  {
    "text": "the attack in this project we discovered numerous implementations of digital",
    "start": "1779120",
    "end": "1784240"
  },
  {
    "text": "signatures that fail to validate the extended key usage field this would allow an attacker to",
    "start": "1784240",
    "end": "1790440"
  },
  {
    "text": "abuse certificates with a substantially lower bar for identity verification in",
    "start": "1790440",
    "end": "1795679"
  },
  {
    "text": "important context like coach signing you can see in the diagram below what this attack looks like we start by an",
    "start": "1795679",
    "end": "1802679"
  },
  {
    "text": "attacker generating an SSL certificate or another low cost certificate that doesn't have a high bar of verification",
    "start": "1802679",
    "end": "1809960"
  },
  {
    "text": "next the attacker assigns the unrelated data with the mismatch",
    "start": "1809960",
    "end": "1815360"
  },
  {
    "text": "certificate vulnerable apps fail to detect the invalid certificate and this can lead to a false sense of trust for",
    "start": "1815360",
    "end": "1822039"
  },
  {
    "text": "the user or other bypasses of important access controls",
    "start": "1822039",
    "end": "1828960"
  },
  {
    "text": "how do you protect your implementation well if you're impacted by this attack which you should verify if you have a",
    "start": "1828960",
    "end": "1835840"
  },
  {
    "text": "digital signature implementation that works on untrusted data you should start",
    "start": "1835840",
    "end": "1840880"
  },
  {
    "text": "with a point fix always validate EKU in your application to ensure that",
    "start": "1840880",
    "end": "1846000"
  },
  {
    "text": "certificates are used for their intended purpose you can use libraries that",
    "start": "1846000",
    "end": "1851360"
  },
  {
    "text": "properly Implement these EKU checks op SSL as an example we briefly reviewed",
    "start": "1851360",
    "end": "1856720"
  },
  {
    "text": "earlier allows you to specify context for your client and it'll automatically have defaults for EKU associated with it",
    "start": "1856720",
    "end": "1865840"
  },
  {
    "text": "trust but verify key principles in your application's design every single",
    "start": "1865840",
    "end": "1871240"
  },
  {
    "text": "vulnerable implementations re re reviewed today were supposed to check for",
    "start": "1871240",
    "end": "1876360"
  },
  {
    "text": "EKU no one verified that they did Implement regular security testing",
    "start": "1876360",
    "end": "1882799"
  },
  {
    "text": "especially in components using cryptography for crucial features your",
    "start": "1882799",
    "end": "1888120"
  },
  {
    "text": "implementation is much more likely to have a vulnerability than a cryptographic",
    "start": "1888120",
    "end": "1895480"
  },
  {
    "text": "algorithm what is msrc doing to protect our customers well we've released a",
    "start": "1898120",
    "end": "1903360"
  },
  {
    "text": "patch for all first party issues the third party issues we discussed in this talk have also been fixed we're",
    "start": "1903360",
    "end": "1910559"
  },
  {
    "text": "continuing to work with impacted thirdparty vendors to address their implementations and we continue to",
    "start": "1910559",
    "end": "1917200"
  },
  {
    "text": "explore digital signature implementations for similar flaws below is a list of cves that were recently",
    "start": "1917200",
    "end": "1923600"
  },
  {
    "text": "issued for some of these vulnerabilities that concludes my talk I really appreciate everyone coming out and now",
    "start": "1923600",
    "end": "1929720"
  },
  {
    "text": "is the time for [Applause]",
    "start": "1929720",
    "end": "1937000"
  },
  {
    "text": "questions",
    "start": "1937000",
    "end": "1940000"
  }
]