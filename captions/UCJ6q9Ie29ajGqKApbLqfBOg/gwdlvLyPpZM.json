[
  {
    "start": "0",
    "end": "30000"
  },
  {
    "text": "[Music]",
    "start": "910",
    "end": "9519"
  },
  {
    "text": "uh welcome to our talk one glitch to rule them all fault injection attacks against the amdc coprocessor today we're",
    "start": "9519",
    "end": "16640"
  },
  {
    "text": "going to present our attack against the mdck processor that allows us to execute",
    "start": "16640",
    "end": "21680"
  },
  {
    "text": "custom payloads on that security sensitive microprocessor so before going into details about our",
    "start": "21680",
    "end": "27439"
  },
  {
    "text": "attack i want to briefly introduce the mdck processor and what it does",
    "start": "27439",
    "end": "33360"
  },
  {
    "start": "30000",
    "end": "80000"
  },
  {
    "text": "so i've taken this slide from an amd slide deck and amd says about their",
    "start": "33360",
    "end": "39120"
  },
  {
    "text": "secure processor that it's a dedicated security subsystem and actually",
    "start": "39120",
    "end": "44879"
  },
  {
    "text": "this is an arm core which is integrated into your x86 soc",
    "start": "44879",
    "end": "50719"
  },
  {
    "text": "so if you're buying a modern amd cpu you just have the x86 course but also there",
    "start": "50719",
    "end": "56239"
  },
  {
    "text": "is a tiny arm call embedded within that cpu and it runs an uh proprietary and",
    "start": "56239",
    "end": "63520"
  },
  {
    "text": "largely undocumented operating system which is provided by amd and the secure processor in general",
    "start": "63520",
    "end": "70159"
  },
  {
    "text": "is the hardware root of trust of all modern amd cpus",
    "start": "70159",
    "end": "75360"
  },
  {
    "text": "so there are several applications that you might know that depend on this secure processor",
    "start": "75360",
    "end": "81920"
  },
  {
    "start": "80000",
    "end": "177000"
  },
  {
    "text": "so on the server side we have the secure encrypted virtualization technology or sme this is",
    "start": "81920",
    "end": "89600"
  },
  {
    "text": "present only on the epic server cpus sav aims to protect virtual machines in",
    "start": "89600",
    "end": "96400"
  },
  {
    "text": "untrusted environments by protecting their memory so in that scenario the secure processor",
    "start": "96400",
    "end": "102640"
  },
  {
    "text": "is responsible for key management so in a previous paper we published",
    "start": "102640",
    "end": "109280"
  },
  {
    "text": "some works of us that show what happens if there are firmware issues within that secure processes firmware and how they",
    "start": "109280",
    "end": "115520"
  },
  {
    "text": "affect the suv technology so if you're interested in that have a look at our paper called insecure and improvement",
    "start": "115520",
    "end": "121920"
  },
  {
    "text": "updated now on the desktop side so on ryzen and",
    "start": "121920",
    "end": "126960"
  },
  {
    "text": "on threadripper cpus there is a dedicated secures which is running on the zika processor and one of",
    "start": "126960",
    "end": "133920"
  },
  {
    "text": "the applications that it hosts is a dedicated firmware tpm so if you use a",
    "start": "133920",
    "end": "140080"
  },
  {
    "text": "firmware tpin on amd system your firmware tpm will be executed on",
    "start": "140080",
    "end": "145360"
  },
  {
    "text": "the ctr processor and um the secure processor also allows for",
    "start": "145360",
    "end": "153519"
  },
  {
    "text": "using the secure processor as a trusted execution environment so amd published patches to the",
    "start": "153519",
    "end": "159840"
  },
  {
    "text": "linux kernel that indicate that in future versions it might be possible to",
    "start": "159840",
    "end": "165760"
  },
  {
    "text": "deploy user control trust applications to that secure processor although i'm not too",
    "start": "165760",
    "end": "172480"
  },
  {
    "text": "sure to what extent the currently available firmware already supports this",
    "start": "172480",
    "end": "178239"
  },
  {
    "text": "now the zika processor has its own operating system so a firmware essentially",
    "start": "178239",
    "end": "185120"
  },
  {
    "text": "and as it's an arm core embedded within the x86 slc uh it's interesting to see where this",
    "start": "185120",
    "end": "191840"
  },
  {
    "text": "firmware actually comes from and actually the firmware for the secure processor is part of the usual uefa",
    "start": "191840",
    "end": "198480"
  },
  {
    "text": "image so if you dump the content of a flash chip from a motherboard or if you download a new wifi update for your",
    "start": "198480",
    "end": "205040"
  },
  {
    "text": "system one of the things that you find inside that uefa image is the firmware for the",
    "start": "205040",
    "end": "210560"
  },
  {
    "text": "secure processor and it uses a dedicated file system like a proprietary file system from amd",
    "start": "210560",
    "end": "218159"
  },
  {
    "start": "217000",
    "end": "268000"
  },
  {
    "text": "now we wrote a tool which is called psp2 which allows you to parse that",
    "start": "218159",
    "end": "223360"
  },
  {
    "text": "proprietary file system and dump informations about the contents of that file system it's called",
    "start": "223360",
    "end": "229440"
  },
  {
    "text": "psp tool it's available on github now for for this talk i'm not going to",
    "start": "229440",
    "end": "235040"
  },
  {
    "text": "go into details about how this firmware actually looks like and what are these its components but if",
    "start": "235040",
    "end": "242480"
  },
  {
    "text": "you're interested in that you can have a look at one of our previous talk which we gave on the 36 c3 in",
    "start": "242480",
    "end": "250400"
  },
  {
    "text": "2019 where we go into much more details on the secure processors firmware",
    "start": "250400",
    "end": "256479"
  },
  {
    "text": "instead today i want to give you a brief overview on the secure crypto virtualization technology as it's one of",
    "start": "256479",
    "end": "263680"
  },
  {
    "text": "the applications that really depend on the amd cto processor",
    "start": "263680",
    "end": "269840"
  },
  {
    "text": "so i'm sure you all have heard this term that the cloud is just someone else's computer",
    "start": "270639",
    "end": "276560"
  },
  {
    "text": "so if you look at one of the hosts of a cloud system you will find that there is a high privileged component called the",
    "start": "276560",
    "end": "282160"
  },
  {
    "text": "hypervisor which is responsible to host host multiple virtual machines from potentially",
    "start": "282160",
    "end": "288080"
  },
  {
    "text": "different tenants and the hypervisor will ensure the isolation of these different virtual machines in this",
    "start": "288080",
    "end": "293199"
  },
  {
    "text": "environment now if you as the customer or user of such a bam want to protect your data in this",
    "start": "293199",
    "end": "299759"
  },
  {
    "text": "environment you can use disk encryption technologies for example and that will protect the data which is stored on the",
    "start": "299759",
    "end": "306240"
  },
  {
    "text": "block device or the data at rest you can also use technologies like tls to protect the data which is transferred",
    "start": "306240",
    "end": "312800"
  },
  {
    "text": "over network but if you consider the hypervisor as the adversary",
    "start": "312800",
    "end": "317840"
  },
  {
    "text": "the data is unprotected so the data in use which is residing in the virtual machine's memory is not protected by",
    "start": "317840",
    "end": "324400"
  },
  {
    "text": "anything so the hypervisor can have direct access to the memory content including the keys for disk encryption",
    "start": "324400",
    "end": "329919"
  },
  {
    "text": "or the tls connection now the sdb technology tries to solve",
    "start": "329919",
    "end": "334960"
  },
  {
    "text": "this problem by adding memory encryption to virtual machines so with sap a",
    "start": "334960",
    "end": "340000"
  },
  {
    "text": "virtual machine's memory is encrypted and the respective encryption encryption keys are held by the amd cto processor",
    "start": "340000",
    "end": "348080"
  },
  {
    "text": "the hypervisor has to use a specific api which is implemented by the suv firmware running on the secure processor to",
    "start": "348080",
    "end": "354880"
  },
  {
    "text": "instantiate new virtual machines and then the secure processor will generate fresh virtual machine encryption keys",
    "start": "354880",
    "end": "361520"
  },
  {
    "text": "and from there on the virtual machine is protected so the hypervisor has no longer direct",
    "start": "361520",
    "end": "366960"
  },
  {
    "text": "access to that machine now um if you consider the",
    "start": "366960",
    "end": "372080"
  },
  {
    "text": "remote system it has not fully trustworthy such as a cloud environment for example",
    "start": "372080",
    "end": "377600"
  },
  {
    "text": "the sap technology allows you to prove or to to verify that your virtual",
    "start": "377600",
    "end": "384319"
  },
  {
    "text": "machine was instantiated the way you specified it and it implements or offers a remote",
    "start": "384319",
    "end": "390080"
  },
  {
    "text": "adaptation feature that allows a customer for example to verify that the virtual machine is",
    "start": "390080",
    "end": "396240"
  },
  {
    "text": "deployed on a genuine amd system with scp protection in place",
    "start": "396240",
    "end": "402240"
  },
  {
    "text": "and all of this remote station protocol and the handling of the virtual machine's memory encryption is",
    "start": "402240",
    "end": "409120"
  },
  {
    "text": "implemented by firmware running on the secure processor so if you're interested in attacking suv",
    "start": "409120",
    "end": "415120"
  },
  {
    "text": "the jk processor is a interesting target so now",
    "start": "415120",
    "end": "420479"
  },
  {
    "text": "we start with faulting the amd secure processor how can we actually attack the secure processor by injecting",
    "start": "420479",
    "end": "427199"
  },
  {
    "text": "a fault in general fault injection attacks mean that you",
    "start": "427199",
    "end": "432960"
  },
  {
    "start": "428000",
    "end": "630000"
  },
  {
    "text": "modify the environment of an integrated circuit so that it will not crash it",
    "start": "432960",
    "end": "439680"
  },
  {
    "text": "will continue to execute but you changed the behavior of that ic",
    "start": "439680",
    "end": "445039"
  },
  {
    "text": "so for example you could lower the voltage for a short period which is referred to as voltage fault",
    "start": "445039",
    "end": "451360"
  },
  {
    "text": "injection uh you could hit the ic with an electromagnetic pulse which is referred to as em fault injection or you",
    "start": "451360",
    "end": "458479"
  },
  {
    "text": "could hit it with a laser just referred to as laser volt injection",
    "start": "458479",
    "end": "463520"
  },
  {
    "text": "now regardless of the way you introduce an uh fault in the system",
    "start": "463520",
    "end": "469599"
  },
  {
    "text": "you have certain properties that you want to achieve as an attacker so imagine there's a security sensitive",
    "start": "469599",
    "end": "476000"
  },
  {
    "text": "check that will validate some password that was entered by the attacker",
    "start": "476000",
    "end": "481360"
  },
  {
    "text": "now the attacker does not have the password so the system will transition into an",
    "start": "481360",
    "end": "487120"
  },
  {
    "text": "error state if the password check failed now imagine",
    "start": "487120",
    "end": "492400"
  },
  {
    "text": "we are able to introduce a fault during this validation so there are no number of things that",
    "start": "492400",
    "end": "498240"
  },
  {
    "text": "can happen so for example we could just lock up the system so we",
    "start": "498240",
    "end": "503360"
  },
  {
    "text": "somehow lowered the voltage too much the system is no longer functional we have to reset",
    "start": "503360",
    "end": "508560"
  },
  {
    "text": "it to to try again for example or you um directly reset the system right you",
    "start": "508560",
    "end": "514959"
  },
  {
    "text": "lower the voltage and then rise it up again and the system simply restarts",
    "start": "514959",
    "end": "520399"
  },
  {
    "text": "or you just have no effect meaning that the system will still enter the error state",
    "start": "520399",
    "end": "525760"
  },
  {
    "text": "although that's not what you actually wanted or anything can happen actually but also",
    "start": "525760",
    "end": "532399"
  },
  {
    "text": "one of the possibilities that can happen is that the system will actually allow you access",
    "start": "532399",
    "end": "539200"
  },
  {
    "text": "so the error you introduce during the security sensitive check calls as something",
    "start": "539200",
    "end": "545600"
  },
  {
    "text": "that transitions the system into the authentication successful safety",
    "start": "545600",
    "end": "550800"
  },
  {
    "text": "so um the key takeaway here is that with fault injection there are many many",
    "start": "550800",
    "end": "556560"
  },
  {
    "text": "different states which you can reach with that attack but only one is useful so in this case only this is the useful",
    "start": "556560",
    "end": "562959"
  },
  {
    "text": "state that we want to to reach you and the key challenges with fault injection",
    "start": "562959",
    "end": "568320"
  },
  {
    "text": "in general are first you need to have some kind of trigger so you need to understand and identify when the target",
    "start": "568320",
    "end": "575839"
  },
  {
    "text": "is in a state where it's performing something security sensitive like a password validation",
    "start": "575839",
    "end": "581040"
  },
  {
    "text": "and you need to know the parameters to which extent you want to change the target's environment",
    "start": "581040",
    "end": "586560"
  },
  {
    "text": "so if we're talking about voltage fault injection you need to know how deep you want to lower the voltage so the system",
    "start": "586560",
    "end": "593120"
  },
  {
    "text": "is still operational but the behavior has changed and you need to determine whether your",
    "start": "593120",
    "end": "599200"
  },
  {
    "text": "attack was successful and also in case it was not successful you need to be",
    "start": "599200",
    "end": "604720"
  },
  {
    "text": "able to quickly reset the system and then try again because",
    "start": "604720",
    "end": "610160"
  },
  {
    "text": "most of the times you would try a fault attack the effect will not be",
    "start": "610160",
    "end": "616240"
  },
  {
    "text": "that you gain access for example right so the system might crash or whatever just a minor fraction of the",
    "start": "616240",
    "end": "623360"
  },
  {
    "text": "attempts will result in a successful attack so you need to be able to quickly reset the system and try again",
    "start": "623360",
    "end": "632200"
  },
  {
    "text": "now to do that on the amd secure processor we need to understand how the mdc care processor actually works",
    "start": "632399",
    "end": "639360"
  },
  {
    "text": "and how its boot is protected so when you power up the amd system for the",
    "start": "639360",
    "end": "646160"
  },
  {
    "text": "very first time the first thing that executes is the rambudara new rumble data is",
    "start": "646160",
    "end": "652959"
  },
  {
    "text": "as nem says a bootloader which is executing from non-updated or wrong and the thing that the rambo. does is it",
    "start": "652959",
    "end": "660399"
  },
  {
    "text": "will initialize the system and then we'll load an amd public key from the spi attached flash",
    "start": "660399",
    "end": "666560"
  },
  {
    "text": "it will verify that publicly by hashes which are stored within the wrong block",
    "start": "666560",
    "end": "672079"
  },
  {
    "text": "now in the second step the wrong boot order will load the pspfw",
    "start": "672079",
    "end": "677279"
  },
  {
    "text": "boot with a component and that component has a signature and",
    "start": "677279",
    "end": "682560"
  },
  {
    "text": "the rambo data will validate that signature using the public key which is loaded in the first step",
    "start": "682560",
    "end": "689120"
  },
  {
    "text": "now the execution is handed over to this psp of wp bootloader component and that",
    "start": "689120",
    "end": "694399"
  },
  {
    "text": "component will load additional components or additional applications from the spi attached flash",
    "start": "694399",
    "end": "700399"
  },
  {
    "text": "and they all have a signature and the pspfw bluetooth will validate their signature",
    "start": "700399",
    "end": "706880"
  },
  {
    "text": "using the power key that's loaded in the first step so during runtime this pspfw bootloader",
    "start": "706880",
    "end": "712240"
  },
  {
    "text": "is actually like a small operating system are running in the privileged svc mode whereas all the applications are running",
    "start": "712240",
    "end": "718959"
  },
  {
    "text": "in the unprivileged user mode",
    "start": "718959",
    "end": "722639"
  },
  {
    "start": "721000",
    "end": "795000"
  },
  {
    "text": "now we we looked at this the first step that the rumble duda",
    "start": "724079",
    "end": "729680"
  },
  {
    "text": "does the loading of this amd public key here now using a logic analyzer we analyze",
    "start": "729680",
    "end": "735680"
  },
  {
    "text": "what happens on the spi bus during this step and what you see here is the output of",
    "start": "735680",
    "end": "741360"
  },
  {
    "text": "that logic analyzer during loading of the amd power key specifically you see the chip select",
    "start": "741360",
    "end": "746800"
  },
  {
    "text": "line as of the spi bus and the measle line that is the data coming from the flash to the cpu",
    "start": "746800",
    "end": "754560"
  },
  {
    "text": "now we replaced this amd public key with our own public key on the sbi flash",
    "start": "754560",
    "end": "760160"
  },
  {
    "text": "and then recorded the same point in time during the rumble",
    "start": "760160",
    "end": "766720"
  },
  {
    "text": "execution and this is the trace that you see there the red part now as you can easily see",
    "start": "766720",
    "end": "774560"
  },
  {
    "text": "it kind of looks the same for both attempts except for in the end",
    "start": "774560",
    "end": "780399"
  },
  {
    "text": "so in the case of the original amy public key you see here that there's continued sbi activity whereas in the",
    "start": "780399",
    "end": "786800"
  },
  {
    "text": "case of the of our own public key you see that there is no more",
    "start": "786800",
    "end": "791920"
  },
  {
    "text": "sbi activity at this point in time now from that we actually concluded that",
    "start": "791920",
    "end": "799040"
  },
  {
    "start": "795000",
    "end": "849000"
  },
  {
    "text": "during this window what you see here the very amd public key is verified",
    "start": "799040",
    "end": "804880"
  },
  {
    "text": "and also what we saw is that the number of chip select level changes before this window is constant",
    "start": "804880",
    "end": "812880"
  },
  {
    "text": "and afterwards the chip select line is always pulled low unless the verification of that key",
    "start": "812880",
    "end": "819199"
  },
  {
    "text": "failed in that case it would stay high so now we have",
    "start": "819199",
    "end": "824399"
  },
  {
    "text": "the chip select line that we can use as a trigger to determine when we want to",
    "start": "824399",
    "end": "829760"
  },
  {
    "text": "inject a fault in during the key verification and we also can use the chip select line to determine whether",
    "start": "829760",
    "end": "836160"
  },
  {
    "text": "our attack was successful or not because only if the public key was accepted the chip select line is pulled low again",
    "start": "836160",
    "end": "843600"
  },
  {
    "text": "so we use that information to trigger our attack and to measure success",
    "start": "843600",
    "end": "850639"
  },
  {
    "start": "849000",
    "end": "895000"
  },
  {
    "text": "now on a high level our attack works as follows our goal is to execute payloads right",
    "start": "850959",
    "end": "857120"
  },
  {
    "text": "after the wrong build order so in the first step we replace the amd public key in the uefi image with our",
    "start": "857120",
    "end": "863040"
  },
  {
    "text": "own public key then we replace the pspfw bootloader",
    "start": "863040",
    "end": "868160"
  },
  {
    "text": "with our payload then we sign that payload with our custom key and then we introduce an error during",
    "start": "868160",
    "end": "875440"
  },
  {
    "text": "this window where the public key is verified so that the secure processor is forced to accept our public key and then",
    "start": "875440",
    "end": "881199"
  },
  {
    "text": "use that power key to validate the signatures of our payload",
    "start": "881199",
    "end": "886320"
  },
  {
    "text": "now to actually inject an error during this window we need to understand how the input voltage",
    "start": "886320",
    "end": "893440"
  },
  {
    "text": "to the amd soc is handled so",
    "start": "893440",
    "end": "898480"
  },
  {
    "start": "895000",
    "end": "980000"
  },
  {
    "text": "modern x86 cpus use uh in general dynamic voltage control so on amd ss",
    "start": "898480",
    "end": "905040"
  },
  {
    "text": "there is a dedicated component a small microprocessor within the abs",
    "start": "905040",
    "end": "911519"
  },
  {
    "text": "are called the system management unit that is responsible to to monitor the whole soc and to determine by some logic",
    "start": "911519",
    "end": "919360"
  },
  {
    "text": "which input voltage should be applied now the system management unit talks to the",
    "start": "919360",
    "end": "925360"
  },
  {
    "text": "uh x to an external voltage regulator using the svi 2 bus",
    "start": "925360",
    "end": "931600"
  },
  {
    "text": "now the sva 2 bus allows to control two different voltage domains",
    "start": "931600",
    "end": "937839"
  },
  {
    "text": "on apixes or ryzen systems we saw that there is usually one voltage regulator",
    "start": "937839",
    "end": "942880"
  },
  {
    "text": "which is responsible to handle v-stock that is the input that the input voltage where the amd secure processor is",
    "start": "942880",
    "end": "949680"
  },
  {
    "text": "attached to and also record where the xd6 cores are attached to on epic systems we saw that there are",
    "start": "949680",
    "end": "957279"
  },
  {
    "text": "two voltage regulators one for each voltage domain now these voltage regulators are",
    "start": "957279",
    "end": "963360"
  },
  {
    "text": "microcontrollers which are part of your motherboard so they're not part of the amd slc and i'm going to hand over to",
    "start": "963360",
    "end": "971279"
  },
  {
    "text": "niklas who's going into who is going to explain how we can use that setup to actually manipulate the",
    "start": "971279",
    "end": "976800"
  },
  {
    "text": "input voltage to the amd secure processor okay thank you robert",
    "start": "976800",
    "end": "982959"
  },
  {
    "start": "980000",
    "end": "1048000"
  },
  {
    "text": "so um the setup we used to inject a fault is inspired by the world pillager attack which has been published earlier",
    "start": "982959",
    "end": "989279"
  },
  {
    "text": "this year and what they do and what we also do is we attach a td microcontroller",
    "start": "989279",
    "end": "995920"
  },
  {
    "text": "to the bus between the voltage regulator and the amd soc and the cd microcontroller can inject",
    "start": "995920",
    "end": "1002720"
  },
  {
    "text": "packets here and tell the voltage regulator to apply different voltages to the voltage rails in our case the",
    "start": "1002720",
    "end": "1008639"
  },
  {
    "text": "v-stock additionally we need to be able to reset the system in between attempts that's",
    "start": "1008639",
    "end": "1015360"
  },
  {
    "text": "why we attach our gt microcontroller also to the ac atx reset line of the",
    "start": "1015360",
    "end": "1021279"
  },
  {
    "text": "motherboard and furthermore as robert explained um to have our trigger and to determine",
    "start": "1021279",
    "end": "1027199"
  },
  {
    "text": "whether or not our attack was successful we connect the td microcontroller to the spi bus also present on the motherboard",
    "start": "1027199",
    "end": "1035600"
  },
  {
    "text": "then and the tnt microcontroller runs the attack logic but is controlled by an external machine",
    "start": "1035600",
    "end": "1042720"
  },
  {
    "text": "that has a script that supervises the attack um the setup looks really nice and clean",
    "start": "1042720",
    "end": "1048960"
  },
  {
    "text": "here on the slide but in reality it looks something like this so you can see here a desk in our",
    "start": "1048960",
    "end": "1055760"
  },
  {
    "text": "department that has been set up like this for at least one year now and",
    "start": "1055760",
    "end": "1061280"
  },
  {
    "text": "uh in the top you can see two ryzen motherboards that we use for testing in the bottom",
    "start": "1061280",
    "end": "1067600"
  },
  {
    "text": "large server motherboard with an epic cpu and we can actually control this whole",
    "start": "1067600",
    "end": "1073039"
  },
  {
    "text": "setup remotely so and you can see the attack machine that we use on the top left here",
    "start": "1073039",
    "end": "1079600"
  },
  {
    "text": "let's zoom in a little bit into the epic motherboard you can see this small",
    "start": "1079600",
    "end": "1085840"
  },
  {
    "text": "small board that we attached to the ram slots here is actually connected directly to the svi 2 bus",
    "start": "1085840",
    "end": "1093679"
  },
  {
    "text": "and it has a little driver i see on it that helps us inject packets onto the bus",
    "start": "1093679",
    "end": "1098960"
  },
  {
    "text": "and it's connected via the spread board here to the teensy microcontroller and the tv microwave",
    "start": "1098960",
    "end": "1105440"
  },
  {
    "text": "controller is similarly attached to the spi bus over here you can see there's also a",
    "start": "1105440",
    "end": "1111280"
  },
  {
    "text": "little external dongle with an external flash chip so that we can easily replace",
    "start": "1111280",
    "end": "1117600"
  },
  {
    "text": "the flash contents by a usb from our attacker machine now the last piece in the puzzle is this",
    "start": "1117600",
    "end": "1123520"
  },
  {
    "text": "dodgy looking wire here which connects the tv to the atx reset line",
    "start": "1123520",
    "end": "1129840"
  },
  {
    "text": "so now that we've seen a setup let's go through one cycle of our glitch attack",
    "start": "1129840",
    "end": "1135039"
  },
  {
    "start": "1130000",
    "end": "1316000"
  },
  {
    "text": "we can see here logic analyzer traces uh the top two traces are the clock and",
    "start": "1135039",
    "end": "1140400"
  },
  {
    "text": "data line from the svi 2 bus afterwards you can see analog trace of",
    "start": "1140400",
    "end": "1146880"
  },
  {
    "text": "the actual voltage being applied to the amd soc and on the bottom you can see two of the",
    "start": "1146880",
    "end": "1153280"
  },
  {
    "text": "uh you can see two chip select lines one from an intent where our attack actually",
    "start": "1153280",
    "end": "1158720"
  },
  {
    "text": "succeeded and one from an attempt where the key was rejected",
    "start": "1158720",
    "end": "1164640"
  },
  {
    "text": "first of all this is right after the system has been reset um the svds or the",
    "start": "1164640",
    "end": "1170160"
  },
  {
    "text": "data line of the sva2 bus is low and it becomes high when the system starts",
    "start": "1170160",
    "end": "1175760"
  },
  {
    "text": "to boot you can see there's two packets being injected by the cpu onto the sa-2",
    "start": "1175760",
    "end": "1181280"
  },
  {
    "text": "plus which set some default voltages our tnz notices this and starts with the",
    "start": "1181280",
    "end": "1187520"
  },
  {
    "text": "tag logic and you can see also the two packages that the",
    "start": "1187520",
    "end": "1192799"
  },
  {
    "text": "cpu injects you actually cause the voltage of the v-sock to rise immediately",
    "start": "1192799",
    "end": "1199360"
  },
  {
    "text": "afterwards there's some activity that you can see here on the clock line which would potentially interfere with our packets",
    "start": "1199360",
    "end": "1206080"
  },
  {
    "text": "being injected and this activity is the voltage regulator sending telemetry data back to the cpu",
    "start": "1206080",
    "end": "1212880"
  },
  {
    "text": "uh in order to avoid collisions we disable this",
    "start": "1212880",
    "end": "1217919"
  },
  {
    "text": "this telemetric reporting feature by injecting our first two packets some time after that you can see here we wait",
    "start": "1217919",
    "end": "1224240"
  },
  {
    "text": "for a telemetry port and right afterwards we inject the packet we do this two times",
    "start": "1224240",
    "end": "1229440"
  },
  {
    "text": "here to one set the core voltage that we know and the stock voltage that we predetermined and",
    "start": "1229440",
    "end": "1236960"
  },
  {
    "text": "we also disable this dilemma important feature now um the team waits and waits until",
    "start": "1236960",
    "end": "1244880"
  },
  {
    "text": "the fmd sp starts to access the flash which looks something like this so here",
    "start": "1244880",
    "end": "1250159"
  },
  {
    "text": "the amd sd starts the notes and directories and then finally starts to load the amd public key from the flash",
    "start": "1250159",
    "end": "1256559"
  },
  {
    "text": "and our teams can account for chip select parses and knows exactly when it's downloading the public key and at",
    "start": "1256559",
    "end": "1262400"
  },
  {
    "text": "this point we perform the actual attack now to do this the um",
    "start": "1262400",
    "end": "1267840"
  },
  {
    "text": "injects two packets one will lower the voltage level of the v-stock rail",
    "start": "1267840",
    "end": "1273120"
  },
  {
    "text": "to a really low level and then you see the stock voltage starting to fall here and then before it",
    "start": "1273120",
    "end": "1279600"
  },
  {
    "text": "reaches the really low level the team ejects the second package which uh sets",
    "start": "1279600",
    "end": "1284799"
  },
  {
    "text": "a higher voltage again so that you have this really nice defined dip here with a defined low point",
    "start": "1284799",
    "end": "1290799"
  },
  {
    "text": "and yeah and now you can also see that this point is exactly inside of the key",
    "start": "1290799",
    "end": "1296880"
  },
  {
    "text": "verification window and now we hope for the best use the chip select line again to",
    "start": "1296880",
    "end": "1302240"
  },
  {
    "text": "determine whether or not there was some more activity so our attacks had seated which is the lower case here or if we",
    "start": "1302240",
    "end": "1308640"
  },
  {
    "text": "have a higher case where nothing happens on the spi bus and we call atx we said low again and we start the whole attack",
    "start": "1308640",
    "end": "1316880"
  },
  {
    "text": "overall um we've successfully applied this attack to all epic and ryzen cpu",
    "start": "1316880",
    "end": "1322799"
  },
  {
    "text": "that we got our hands on and those are all the horizon cpus from all different generations so then one two and three",
    "start": "1322799",
    "end": "1329440"
  },
  {
    "text": "um the success times between glitches vary a little bit we have 30 minutes for then one and up to 45 minutes for length",
    "start": "1329440",
    "end": "1337679"
  },
  {
    "text": "three but um those definitely could be improved we didn't put too much work into improving these times because we",
    "start": "1337679",
    "end": "1344400"
  },
  {
    "text": "are more than satisfied without regard and i'm going to talk a little bit about what we do with those we executed some",
    "start": "1344400",
    "end": "1351280"
  },
  {
    "text": "payloads instead of the original firmware component we executed our own components first of all one payload that",
    "start": "1351280",
    "end": "1358080"
  },
  {
    "text": "simply prints hello world to the fbi bus which we can then use to confirm",
    "start": "1358080",
    "end": "1363919"
  },
  {
    "text": "that we actually have code execution next of all we use this access to decrypt some firmware",
    "start": "1363919",
    "end": "1371600"
  },
  {
    "text": "images some of the more recent images for the amd sp have been encrypted and",
    "start": "1371600",
    "end": "1377280"
  },
  {
    "text": "there's a key in hardware that we can use to decrypt them and furthermore we also dump the",
    "start": "1377280",
    "end": "1383120"
  },
  {
    "text": "read-only memory bootloader so that we can analyze it all of the code",
    "start": "1383120",
    "end": "1388640"
  },
  {
    "text": "which is the teamview firmware together with the scripts that you use on your attacker machine and all the payloads",
    "start": "1388640",
    "end": "1395840"
  },
  {
    "text": "are available in our github repository with the link down below here",
    "start": "1395840",
    "end": "1402440"
  },
  {
    "text": "so um now all of these attacks are interesting allow us to resonate more of the process and attack the sav ecosystem",
    "start": "1402559",
    "end": "1410559"
  },
  {
    "text": "the first thing that we can do to attack the sv ecosystem is replace the sap application running on the secure",
    "start": "1410559",
    "end": "1416720"
  },
  {
    "text": "processor so this is a really similar attack instead just that we didn't replace this psp fw",
    "start": "1416720",
    "end": "1423520"
  },
  {
    "text": "bootloader component but we replaced the suv firmware with our own firmware",
    "start": "1423520",
    "end": "1428799"
  },
  {
    "text": "and then second we can down also some keyboards relevant to the sap modalization protocol let's",
    "start": "1428799",
    "end": "1436320"
  },
  {
    "start": "1433000",
    "end": "2007000"
  },
  {
    "text": "go into a little bit more detail we call it seb um we are trying to go with suv is to",
    "start": "1436320",
    "end": "1442320"
  },
  {
    "text": "enable vm customers of a vm service to not trust",
    "start": "1442320",
    "end": "1447760"
  },
  {
    "text": "the hardware element to not trust the hypervisor by encrypting the memory and having the remote attestation protocol",
    "start": "1447760",
    "end": "1454720"
  },
  {
    "text": "ensure them that their systems are set up encrypted on",
    "start": "1454720",
    "end": "1460240"
  },
  {
    "text": "on some cloud service provider and um the feature that you might want if you",
    "start": "1460240",
    "end": "1467360"
  },
  {
    "text": "if you're developing for such a system that you might want is to be able to debug your virtual machines",
    "start": "1467360",
    "end": "1473600"
  },
  {
    "text": "for that amd included a debug decrypt command which allows the hypervisor to",
    "start": "1473600",
    "end": "1479440"
  },
  {
    "text": "decrypt vm's memory if that the m has been specially set up to be",
    "start": "1479440",
    "end": "1484799"
  },
  {
    "text": "the debuggable our replace firmware component for so the",
    "start": "1484799",
    "end": "1490960"
  },
  {
    "text": "sav application has actually disabled this check where the scp",
    "start": "1490960",
    "end": "1496000"
  },
  {
    "text": "application checks whether or not a hypervisor is allowed to even decrypt",
    "start": "1496000",
    "end": "1501200"
  },
  {
    "text": "the vm and um with this malicious",
    "start": "1501200",
    "end": "1506799"
  },
  {
    "text": "sed application in place we can cause um we can set up a",
    "start": "1506799",
    "end": "1512000"
  },
  {
    "text": "malicious administrator could actually use our attack to set up this",
    "start": "1512000",
    "end": "1518159"
  },
  {
    "text": "smd application and then a vm customer could set up a vm that is",
    "start": "1518159",
    "end": "1523840"
  },
  {
    "text": "non-debuggable but the hypervisor can try to decrypt the vm the ndsp will",
    "start": "1523840",
    "end": "1529760"
  },
  {
    "text": "happily do that defeating all of the securities provided by the sav technology",
    "start": "1529760",
    "end": "1536799"
  },
  {
    "text": "this is of course a attack where you need physical access to the system and",
    "start": "1536799",
    "end": "1543360"
  },
  {
    "text": "if we want some different attack we might want to attack the remote attestation feature",
    "start": "1543360",
    "end": "1548880"
  },
  {
    "text": "we call the remote attestation feature is used by customers that want to ensure that the",
    "start": "1548880",
    "end": "1555840"
  },
  {
    "text": "ends actually being set up with suv in place so um",
    "start": "1555840",
    "end": "1561440"
  },
  {
    "text": "yeah basically removing the need to trust the hardware owner by having a",
    "start": "1561440",
    "end": "1567200"
  },
  {
    "text": "cryptographic check in place and this um the systematic as follows",
    "start": "1567200",
    "end": "1572320"
  },
  {
    "text": "the ndsp will first of all set up vbn and then generate a measurement",
    "start": "1572320",
    "end": "1577840"
  },
  {
    "text": "of um the whole setup that includes for example a hash of the contents of each",
    "start": "1577840",
    "end": "1583120"
  },
  {
    "text": "page and also includes whether or not the vm is debuggable for example a lot of more information and",
    "start": "1583120",
    "end": "1590080"
  },
  {
    "text": "this um this information is then signed with a key called the chip endorsement key",
    "start": "1590080",
    "end": "1595600"
  },
  {
    "text": "which is accessible only to the nbc core processor the cloud customer can then",
    "start": "1595600",
    "end": "1601279"
  },
  {
    "text": "retrieve the certificate certificate for the student orphan key from amd's key",
    "start": "1601279",
    "end": "1606480"
  },
  {
    "text": "servers and using the certificate can validate the sign report which then proves that the system are",
    "start": "1606480",
    "end": "1613840"
  },
  {
    "text": "set up by a valid and the secure processor the issue with the system is of course",
    "start": "1613840",
    "end": "1620159"
  },
  {
    "text": "if we get access to the chip endorsement key then we can set up a vm for example on",
    "start": "1620159",
    "end": "1625360"
  },
  {
    "text": "some other system like a intel machine and then generate the necessary",
    "start": "1625360",
    "end": "1630640"
  },
  {
    "text": "measurement uh sign it with the extracted key and send this attestation report to the",
    "start": "1630640",
    "end": "1636480"
  },
  {
    "text": "customer who is then not able to uh to",
    "start": "1636480",
    "end": "1641679"
  },
  {
    "text": "know the difference between the state report and the real one so compromising the keys completely",
    "start": "1641679",
    "end": "1649360"
  },
  {
    "text": "breaks the remote attestation feature which has been a downfall previously",
    "start": "1649360",
    "end": "1655120"
  },
  {
    "text": "because there were some firmware issues in in the",
    "start": "1655120",
    "end": "1660240"
  },
  {
    "text": "sav application which led to the sap remote authentication protocol",
    "start": "1660240",
    "end": "1666080"
  },
  {
    "text": "being broken to fix this issue uh and we introduced the version to the endorsement keynote",
    "start": "1666080",
    "end": "1673120"
  },
  {
    "text": "which we will present a simplified version here the idea is that we don't have one chip endorsement key that can",
    "start": "1673120",
    "end": "1678559"
  },
  {
    "text": "be leaked but we have multiple chip endorsement keys tied to the version versions of specific firmware components",
    "start": "1678559",
    "end": "1685760"
  },
  {
    "text": "how does this look so here we have this hierarchy first of all the wrong blur executes loads the pspfw bootloader and",
    "start": "1685760",
    "end": "1693520"
  },
  {
    "text": "this pspfw google executes the sd application and the wrong moodle has access to a secret",
    "start": "1693520",
    "end": "1700640"
  },
  {
    "text": "and all of the next firmware components all have versions romwoodloader uses this version of the psp fw bootloader to",
    "start": "1700640",
    "end": "1708960"
  },
  {
    "text": "generate a different secret which is now tied to the version of the second stage bootloader and the second stage",
    "start": "1708960",
    "end": "1714720"
  },
  {
    "text": "bootloader will also do the same for the sv application we'll encode the version of the smv application into the secret",
    "start": "1714720",
    "end": "1722000"
  },
  {
    "text": "and only pass that secret on to the sed application which then can use the secret to generate a version chip",
    "start": "1722000",
    "end": "1728399"
  },
  {
    "text": "endorsement key which is now tied to those firmware versions if an attacker now signs it back for",
    "start": "1728399",
    "end": "1734000"
  },
  {
    "text": "example in the sav application then we need to assume the relationship",
    "start": "1734000",
    "end": "1739840"
  },
  {
    "text": "endorsement key and the secret um are compromised and we can't use them anymore",
    "start": "1739840",
    "end": "1746559"
  },
  {
    "text": "but now what amd can do is they can publish an updated version of the sap application is a new version number",
    "start": "1746559",
    "end": "1753120"
  },
  {
    "text": "which means that there will be a different secret that is passed to this application which will then generate a",
    "start": "1753120",
    "end": "1759679"
  },
  {
    "text": "different key which is not compromised this is not nice system for",
    "start": "1759679",
    "end": "1767039"
  },
  {
    "text": "allowing updates to firmware components but what is the vulnerability is actually part of the hardware not of the",
    "start": "1767039",
    "end": "1773039"
  },
  {
    "text": "software component we recall our in our attack we are able to execute a payload directly after the",
    "start": "1773039",
    "end": "1778799"
  },
  {
    "text": "room loader and the robot loader will pass a secret with some version encoded",
    "start": "1778799",
    "end": "1784159"
  },
  {
    "text": "directly to our application to our payload and we can actually choose this version that",
    "start": "1784159",
    "end": "1790320"
  },
  {
    "text": "our payload has because it's part of the header of the of the payload that we signed with our",
    "start": "1790320",
    "end": "1796799"
  },
  {
    "text": "custom key what we can do now is we can dump this key to our attacker machine",
    "start": "1796799",
    "end": "1802240"
  },
  {
    "text": "and generate an inverting chip endorsement key from that secret and actually we can do",
    "start": "1802240",
    "end": "1809039"
  },
  {
    "text": "this attack for any version of our attacker payload so we can generate all version chip endorsement keys",
    "start": "1809039",
    "end": "1815840"
  },
  {
    "text": "additionally we don't have to execute this attack for every version x of our attacker payload because there's a nice",
    "start": "1815840",
    "end": "1821919"
  },
  {
    "text": "pcb downgrade feature in the newest standard for the sav technology and we can use that to only",
    "start": "1821919",
    "end": "1829200"
  },
  {
    "text": "execute this attack once and then gain access to all version chip endorsement keys",
    "start": "1829200",
    "end": "1835600"
  },
  {
    "text": "okay let's summarize so we have successfully um we have successfully exploited all ryzen",
    "start": "1835600",
    "end": "1842159"
  },
  {
    "text": "and epics the use of the recent cpu micro architectures or then one to then three um we believe server is also",
    "start": "1842159",
    "end": "1850720"
  },
  {
    "text": "vulnerable but we haven't tested it yet because we don't have access to any machines right now and what we did is we gained reliable",
    "start": "1850720",
    "end": "1858320"
  },
  {
    "text": "code execution execution right after the execution of the robot loader so at the",
    "start": "1858320",
    "end": "1863919"
  },
  {
    "text": "earliest stage that you can expect to execute anything else than the one loader",
    "start": "1863919",
    "end": "1869120"
  },
  {
    "text": "our attack takes between 30-45 minutes but this can very probably be",
    "start": "1869120",
    "end": "1876000"
  },
  {
    "text": "improved we used our attack to check suv and basically uh circumvent uh certain",
    "start": "1876000",
    "end": "1882960"
  },
  {
    "text": "projection mechanisms in particular we completely broke suv's remote attestation protocol uh which yeah can",
    "start": "1882960",
    "end": "1890799"
  },
  {
    "text": "not be or cannot be assumed to be um secure anymore",
    "start": "1890799",
    "end": "1896159"
  },
  {
    "text": "for recent for all of these cpu generations we believe that firmware tpm's uh device and cpus will also be",
    "start": "1896159",
    "end": "1904000"
  },
  {
    "text": "compromised by this attack but we haven't tested this yet so we'll see if we work on that",
    "start": "1904000",
    "end": "1910240"
  },
  {
    "text": "and as far as mitigations go there are no mitigations that andy could",
    "start": "1910240",
    "end": "1916159"
  },
  {
    "text": "could introduce here to fix this issue we would need either",
    "start": "1916159",
    "end": "1921679"
  },
  {
    "text": "hardware measurements or we would need notifications to demonstrate most probably",
    "start": "1921679",
    "end": "1927440"
  },
  {
    "text": "modifications of both components which can only be done in a future cpu generation",
    "start": "1927440",
    "end": "1935120"
  },
  {
    "text": "you can read more about all of these attacks in our paper which is linked at the top here we also",
    "start": "1935120",
    "end": "1940960"
  },
  {
    "text": "have published all of our code and this includes the teensy firmware all the scripts that you need to execute",
    "start": "1940960",
    "end": "1947279"
  },
  {
    "text": "this attack also the payloads and also some proof that we actually compromised",
    "start": "1947279",
    "end": "1952720"
  },
  {
    "text": "the chip endorsement keys because we signed paper the title of our paper with these keys",
    "start": "1952720",
    "end": "1958640"
  },
  {
    "text": "um there's a more complicated attack on suv which is the third point here where we attack the sdv migration",
    "start": "1958640",
    "end": "1966480"
  },
  {
    "text": "feature and then there's the psp rule that robert talked about in the beginning",
    "start": "1966480",
    "end": "1971600"
  },
  {
    "text": "that you can use to analyze uefi updates furthermore there's an emulator for",
    "start": "1971600",
    "end": "1977200"
  },
  {
    "text": "the amd sp written um using the unicorn emulator and there's also a query report",
    "start": "1977200",
    "end": "1983440"
  },
  {
    "text": "that robert has worked on recently thank you very much thank you for your attention and yeah we have some time for",
    "start": "1983440",
    "end": "1990720"
  },
  {
    "text": "questions now and you can also send us emails if you have any questions",
    "start": "1990720",
    "end": "1996940"
  },
  {
    "text": "[Music]",
    "start": "1996940",
    "end": "2006518"
  },
  {
    "text": "you",
    "start": "2007039",
    "end": "2009120"
  }
]