[
  {
    "text": "good morning everyone welcome to my talk Apple Pack 4 years later I will share my",
    "start": "3800",
    "end": "9480"
  },
  {
    "text": "research on reverse engineering pack Hardware implementation on fm1 and this",
    "start": "9480",
    "end": "14799"
  },
  {
    "text": "talk is a technical talk about Apple CPU feature and I hope you enjoyed so let me",
    "start": "14799",
    "end": "21840"
  },
  {
    "text": "first introduce myself my name is T it's difficult to pronounce it but don't",
    "start": "21840",
    "end": "28000"
  },
  {
    "text": "worry you can call me Z or my English name Zachary yeah",
    "start": "28000",
    "end": "33320"
  },
  {
    "text": "currently I'm a master student at joj University my research focus on operating system security reverse",
    "start": "33320",
    "end": "40000"
  },
  {
    "text": "engineering and virtualization and also we have some model team member",
    "start": "40000",
    "end": "47399"
  },
  {
    "text": "J and Wu so let's get started here's the",
    "start": "47440",
    "end": "53640"
  },
  {
    "text": "outl of my talk at first I will introduce what is pack and the current state of Apple pack research",
    "start": "53640",
    "end": "60640"
  },
  {
    "text": "and second I will introduce how I reverse it by solving two challenges and",
    "start": "60640",
    "end": "65920"
  },
  {
    "text": "the final part the most important most important part of this talk is our filings on Apple pad Hardware",
    "start": "65920",
    "end": "74000"
  },
  {
    "text": "implementation so let's get started and first let's take a look at the basic uh",
    "start": "74000",
    "end": "80079"
  },
  {
    "text": "memory attack here's the simple example of pointer SL cycle typically the",
    "start": "80079",
    "end": "85720"
  },
  {
    "text": "pointer will be stored into memory for some reasons and then you be loaded off from memory and used to the function",
    "start": "85720",
    "end": "92399"
  },
  {
    "text": "core or memory access therefore attacker often Target",
    "start": "92399",
    "end": "98040"
  },
  {
    "text": "the pointer stored in memory and by crafting a pointer they can hijack the",
    "start": "98040",
    "end": "104479"
  },
  {
    "text": "control flow data flow to to further attack so how Apple mitigate this",
    "start": "104479",
    "end": "110799"
  },
  {
    "text": "attack it comes up with pointless indication po authentication of pack is",
    "start": "110799",
    "end": "116320"
  },
  {
    "text": "a hardware feature for protecting the poter integrity Point auth indication provides pack",
    "start": "116320",
    "end": "122600"
  },
  {
    "text": "instruction and ALT instruction pack instruction can generate the signature based on the PO and and the pack keys",
    "start": "122600",
    "end": "132040"
  },
  {
    "text": "and then you will store it into the higher on Space of the pointer with Point indication if the",
    "start": "132040",
    "end": "140160"
  },
  {
    "text": "attacker try to modify the pointer that will be detected by Al instruction Al",
    "start": "140160",
    "end": "145840"
  },
  {
    "text": "instruction will validate the pointer by regenerating a signature BAS B on the current point of value and compare it to",
    "start": "145840",
    "end": "153000"
  },
  {
    "text": "the one uh stor memory yeah not that even the pack or the signature is also",
    "start": "153000",
    "end": "160440"
  },
  {
    "text": "stored in memory U but the attacker cannot fory a Val signature easily",
    "start": "160440",
    "end": "166800"
  },
  {
    "text": "because they don't know the key now let's dive into more detail",
    "start": "166800",
    "end": "172200"
  },
  {
    "text": "about point of authentication point tication is a hardw feature introduced in MBA do3 specification it provides",
    "start": "172200",
    "end": "180680"
  },
  {
    "text": "five 138 bit pack keys and each key is made up by two 64bit system registers",
    "start": "180680",
    "end": "187720"
  },
  {
    "text": "know that this system resistors can only be accessed under the privilege mod and",
    "start": "187720",
    "end": "194000"
  },
  {
    "text": "there are four keys for signing the poter including AP a ib DB besides that",
    "start": "194000",
    "end": "200799"
  },
  {
    "text": "there are a there's a apj key for General usage like uh generating the",
    "start": "200799",
    "end": "207040"
  },
  {
    "text": "signature for the pack instruction it will take three inputs the key pointer",
    "start": "207040",
    "end": "213000"
  },
  {
    "text": "and modifier and then you will store the you will generate the signature based on",
    "start": "213000",
    "end": "218239"
  },
  {
    "text": "this inputs and store it into the higher on Space of the pointer for the pack keys and it's wor",
    "start": "218239",
    "end": "225560"
  },
  {
    "text": "noting that in the arm specification there's only one package for all exception level in other words the",
    "start": "225560",
    "end": "232879"
  },
  {
    "text": "package won't change even if you change the exception level besides that unpr",
    "start": "232879",
    "end": "240400"
  },
  {
    "text": "uh per key switch to enable or disable pack instruction if you disa it the pack",
    "start": "240400",
    "end": "247280"
  },
  {
    "text": "instruction will work as a not instruction so uh there are what this are what we need to know about the point",
    "start": "247280",
    "end": "254360"
  },
  {
    "text": "of indication in arm authenication uh now let's head into the Apple",
    "start": "254360",
    "end": "260199"
  },
  {
    "text": "pack Apple implements P authentication in on a of chip for uh iPhone 10s in",
    "start": "260199",
    "end": "268600"
  },
  {
    "text": "2018 after that this Hardware support uh is deped on all Apple CI based",
    "start": "268600",
    "end": "275520"
  },
  {
    "text": "devices since 2019 there are lot of incredible research works on Apple pack",
    "start": "275520",
    "end": "283000"
  },
  {
    "text": "protection for example like uh brandom from Google project zero and Tango and",
    "start": "283000",
    "end": "289840"
  },
  {
    "text": "Etc but if you look into the research work on Apple pack in the past few years",
    "start": "289840",
    "end": "296440"
  },
  {
    "text": "you will find that most of the research work are focusing on software or how to",
    "start": "296440",
    "end": "302199"
  },
  {
    "text": "bypass the pack protection in contrast for the hardware side there's only one",
    "start": "302199",
    "end": "308120"
  },
  {
    "text": "research work has mentioned this part is the block writen by brend aard in",
    "start": "308120",
    "end": "314520"
  },
  {
    "text": "2019 in this blog uh he mentioned that the pack instruction behavior on ATF",
    "start": "314520",
    "end": "320080"
  },
  {
    "text": "chip is significantly different from the arms back one he term this instruction",
    "start": "320080",
    "end": "326080"
  },
  {
    "text": "Behavior as dark magic and this dark magic makes the Apple pack can mitigate",
    "start": "326080",
    "end": "331800"
  },
  {
    "text": "cross domain attack without software supports so and I will explain later about what is cross Dom Tech but uh here",
    "start": "331800",
    "end": "339840"
  },
  {
    "text": "we can see that in the past four years there's no followup work for this stock",
    "start": "339840",
    "end": "345319"
  },
  {
    "text": "measure so uh that's the main motivation of my research and I want to find out",
    "start": "345319",
    "end": "351880"
  },
  {
    "text": "the implementation behind this stock me now uh so let's take a recap of what is",
    "start": "351880",
    "end": "358960"
  },
  {
    "text": "stock me IC or cross do mitigation so uh first let's start with",
    "start": "358960",
    "end": "366039"
  },
  {
    "text": "cross do mitigation what is cross domain T mitigation and basically is a pointer",
    "start": "366039",
    "end": "372280"
  },
  {
    "text": "substitution pack across different domains and why it is feasible because",
    "start": "372280",
    "end": "378080"
  },
  {
    "text": "onpac does not provide any hardware isolation for differentiating the signature generation in different",
    "start": "378080",
    "end": "385000"
  },
  {
    "text": "domains in other word if you generate the signature with the same input in",
    "start": "385000",
    "end": "390080"
  },
  {
    "text": "different domains the signature will be equal so the attacker can try to for a",
    "start": "390080",
    "end": "397720"
  },
  {
    "text": "side pointer uh in one domain and then use that pointer to substitute to",
    "start": "397720",
    "end": "403880"
  },
  {
    "text": "substitute the pointer in other domain and finally hij reject the control FL or",
    "start": "403880",
    "end": "409520"
  },
  {
    "text": "data flow in another domain and know that uh the attacker controlled side",
    "start": "409520",
    "end": "415000"
  },
  {
    "text": "pointer can also pass the authentication in btim domain because the signature",
    "start": "415000",
    "end": "420800"
  },
  {
    "text": "generation process in different domains are equal and let's take a example uh like",
    "start": "420800",
    "end": "429080"
  },
  {
    "text": "here is the AC cross e attack uh the attacker can generate a side colal poter",
    "start": "429080",
    "end": "436039"
  },
  {
    "text": "in user space and use it to replace a real side colal poter and then finally",
    "start": "436039",
    "end": "444199"
  },
  {
    "text": "hijack the kernal control flow or data flow so how to mitigate the cross attack",
    "start": "444199",
    "end": "451080"
  },
  {
    "text": "well if you are use the unpack to protect the kernel this there are two",
    "start": "451080",
    "end": "456319"
  },
  {
    "text": "solutions for mitigating this attack the first one is to maintain different key",
    "start": "456319",
    "end": "462080"
  },
  {
    "text": "values for user space and Cel space and second one is to disable the users B",
    "start": "462080",
    "end": "468599"
  },
  {
    "text": "pack so back to the dark magic what Brandon discover is that even there's no",
    "start": "468599",
    "end": "476039"
  },
  {
    "text": "key switching operation in the S kernel the signature generated with the same",
    "start": "476039",
    "end": "482000"
  },
  {
    "text": "inputs in user space and kernel space are different yeah besides that there are",
    "start": "482000",
    "end": "489000"
  },
  {
    "text": "some other cross doain mitigation on AO one and the the second one is called key",
    "start": "489000",
    "end": "496720"
  },
  {
    "text": "attack that means if you set up all the pack keys with the same values and and",
    "start": "496720",
    "end": "503680"
  },
  {
    "text": "then generate signature using different keys with the same inputs the signature",
    "start": "503680",
    "end": "509039"
  },
  {
    "text": "will be equal if you you are if you are using the unpack but for the Apple pack",
    "start": "509039",
    "end": "515560"
  },
  {
    "text": "it's different the third one is crossb have",
    "start": "515560",
    "end": "520839"
  },
  {
    "text": "mitigation if you use uh the unpack and set up the keys with the static value",
    "start": "520839",
    "end": "527160"
  },
  {
    "text": "for different SS the signature will also be static but for the Apple pack it's",
    "start": "527160",
    "end": "535800"
  },
  {
    "text": "different okay the final one is cross VM attack medication we discover this one",
    "start": "535800",
    "end": "542079"
  },
  {
    "text": "on appm one and as I mentioned before in the arm specification there's only one",
    "start": "542079",
    "end": "547880"
  },
  {
    "text": "set of pack kits for all exception level so if you set up the keys in virtual",
    "start": "547880",
    "end": "553560"
  },
  {
    "text": "machine or host machine and hosting machine with the same values for the",
    "start": "553560",
    "end": "558640"
  },
  {
    "text": "unpack the signature generated in virtual machine and hosting machine will be equal but for Apple pack it's",
    "start": "558640",
    "end": "567200"
  },
  {
    "text": "different again so uh here we have a conclusion is that",
    "start": "567200",
    "end": "572920"
  },
  {
    "text": "Apple implements the dark magic or Uh custom attack mitigation without",
    "start": "572920",
    "end": "578920"
  },
  {
    "text": "software support and therefore I want to find out how Apple customize the pack",
    "start": "578920",
    "end": "584600"
  },
  {
    "text": "Hardware to achieve this do magic and here I make you a promise is that after",
    "start": "584600",
    "end": "592399"
  },
  {
    "text": "this dog you will know how Apple implements it so let's head into next",
    "start": "592399",
    "end": "598560"
  },
  {
    "text": "part uh reverse engineering how I reverse engineer Apple",
    "start": "598560",
    "end": "604240"
  },
  {
    "text": "pack well the basic idea is simple is to",
    "start": "604240",
    "end": "609320"
  },
  {
    "text": "change the CPU States and see what happened the CPU States here u means",
    "start": "609320",
    "end": "615800"
  },
  {
    "text": "different configurations of CPU features and in the arm specif in the MBA",
    "start": "615800",
    "end": "621120"
  },
  {
    "text": "specification the CPU features are controlled by System registers so uh",
    "start": "621120",
    "end": "626880"
  },
  {
    "text": "step one is to set up the system Reg and the step two is to run instructions",
    "start": "626880",
    "end": "633279"
  },
  {
    "text": "and see the result so for the step one it comes up with challenge one is that what are the",
    "start": "633279",
    "end": "640800"
  },
  {
    "text": "system registers we want to set because Apple wiist a lot of new system",
    "start": "640800",
    "end": "647800"
  },
  {
    "text": "registers and there's no official documentation about this system",
    "start": "647800",
    "end": "653000"
  },
  {
    "text": "registers and then for the set for the step two um this also a chall is that",
    "start": "653000",
    "end": "659839"
  },
  {
    "text": "how to read the package because I discovered that Apple implements a",
    "start": "659839",
    "end": "665800"
  },
  {
    "text": "hardware package protection for uh to prevent the package from being read and",
    "start": "665800",
    "end": "672240"
  },
  {
    "text": "I will explain later about what it is and why we need to bypass it so uh for the challenge one we have",
    "start": "672240",
    "end": "680040"
  },
  {
    "text": "task one we need to identify appos back pack system",
    "start": "680040",
    "end": "685720"
  },
  {
    "text": "resistors also for this for the challenge two we have task to is we need",
    "start": "685720",
    "end": "691240"
  },
  {
    "text": "to bypass Apple spe pack key protection so uh let's start with the task one",
    "start": "691240",
    "end": "698399"
  },
  {
    "text": "identify the apple back pack system registers let me first introduce what is",
    "start": "698399",
    "end": "703800"
  },
  {
    "text": "system register and system resistors are resistors for configuring the CPU",
    "start": "703800",
    "end": "709560"
  },
  {
    "text": "feature it can be accessed using MSI instruction and M instruction for",
    "start": "709560",
    "end": "716040"
  },
  {
    "text": "example like this instruction is used for same Base address of the kernel pce table uh",
    "start": "716040",
    "end": "723079"
  },
  {
    "text": "using the Val using the value in X1 General registor but for better",
    "start": "723079",
    "end": "729519"
  },
  {
    "text": "understand the technique we will discuss later uh here we need to clarify",
    "start": "729519",
    "end": "734720"
  },
  {
    "text": "something most people may think that the ttp1 you want here is a register but",
    "start": "734720",
    "end": "741720"
  },
  {
    "text": "actually it's not in the arm specification the exact meaning of the",
    "start": "741720",
    "end": "747720"
  },
  {
    "text": "ttbl 1 year1 is aonic for encoding and here we don't need to understand the the",
    "start": "747720",
    "end": "754760"
  },
  {
    "text": "meaning of each B of the encoding we can simply regard it as a combination of",
    "start": "754760",
    "end": "760079"
  },
  {
    "text": "some numbers so uh back to the MSI instruction the exact meaning of the",
    "start": "760079",
    "end": "767160"
  },
  {
    "text": "instruction is that the MSR instruction will use the encoding for uh to access",
    "start": "767160",
    "end": "773360"
  },
  {
    "text": "register and why we need why we need to clarify this uh because actually the",
    "start": "773360",
    "end": "779959"
  },
  {
    "text": "encoding and register they are not one to one mapping which means different encodings they can be used to access the",
    "start": "779959",
    "end": "787079"
  },
  {
    "text": "same register and also one encoding can be used to access different registers on",
    "start": "787079",
    "end": "793279"
  },
  {
    "text": "the different CPU states with this knowledge we can better understand another tech another feature",
    "start": "793279",
    "end": "800880"
  },
  {
    "text": "uh the system register redirection system register redirection",
    "start": "800880",
    "end": "806000"
  },
  {
    "text": "is one of the hardware supports of virtualizing host extension or v v is a",
    "start": "806000",
    "end": "813320"
  },
  {
    "text": "set of Hardware supports for enabling the operating system to run on E1 and E2",
    "start": "813320",
    "end": "819720"
  },
  {
    "text": "exception level without software changes it's worth noting that uh the vhe is",
    "start": "819720",
    "end": "826079"
  },
  {
    "text": "hardw on app1 in other world is implemented and is always enabled on",
    "start": "826079",
    "end": "832720"
  },
  {
    "text": "app1 among this power support the most important one um for our analysis is is",
    "start": "832720",
    "end": "839639"
  },
  {
    "text": "the system register redirection so what is system register",
    "start": "839639",
    "end": "845000"
  },
  {
    "text": "redirection basically it contains three things first one is banking the register",
    "start": "845000",
    "end": "851839"
  },
  {
    "text": "in both y one and Y2 excepting at the same time there will be there will be a",
    "start": "851839",
    "end": "859000"
  },
  {
    "text": "E2 encoding for accessing E2 register the second one is a access",
    "start": "859000",
    "end": "867120"
  },
  {
    "text": "direction for your one en coding as showing this P are using the E1 encoding",
    "start": "867120",
    "end": "873120"
  },
  {
    "text": "on E2 exception app the register which will be access is the eo2",
    "start": "873120",
    "end": "879920"
  },
  {
    "text": "register the third one is uh E1 to encoding which can be used to access the",
    "start": "879920",
    "end": "886399"
  },
  {
    "text": "eo1 register from uh eo2 exception LEL this are the background we need to",
    "start": "886399",
    "end": "893199"
  },
  {
    "text": "know about the system register and for better understanding I turn the E12 and",
    "start": "893199",
    "end": "900480"
  },
  {
    "text": "E2 encoding as areas encoding so uh back to the Apple spec",
    "start": "900480",
    "end": "907639"
  },
  {
    "text": "system registers what Apple have done is that Apple introduced lot of new",
    "start": "907639",
    "end": "914320"
  },
  {
    "text": "encodings to access new resistors to control new features however apple does not provide",
    "start": "914320",
    "end": "921959"
  },
  {
    "text": "any documentation about them if you're look into the binary for this system registers uh all you can see is only a",
    "start": "921959",
    "end": "929600"
  },
  {
    "text": "bunch of numbers and you have no idea what it is and how to use it it's what",
    "start": "929600",
    "end": "936079"
  },
  {
    "text": "KN thing that uh hit there's a tip here is that uh the crn field of the of the",
    "start": "936079",
    "end": "943319"
  },
  {
    "text": "Apple SP encoding is always 15 on app one so you can easily determine uh which",
    "start": "943319",
    "end": "950800"
  },
  {
    "text": "which encoding is Apple spec one or arm spec one by theing",
    "start": "950800",
    "end": "956680"
  },
  {
    "text": "this for task one we want to answer these two questions the first one is how",
    "start": "956680",
    "end": "962880"
  },
  {
    "text": "to identify encoding of Interest second one is how to understand this",
    "start": "962880",
    "end": "969680"
  },
  {
    "text": "encoding about identify or document uh the Apple spec encodings there are",
    "start": "969680",
    "end": "976279"
  },
  {
    "text": "already some um incredible Works done by asss and they have documenting a lot of",
    "start": "976279",
    "end": "984279"
  },
  {
    "text": "apples back encodings however the method of how to document then is not well described so",
    "start": "984279",
    "end": "991440"
  },
  {
    "text": "here I'd like to share my insights to on how how to document then and I found",
    "start": "991440",
    "end": "997680"
  },
  {
    "text": "that some of my insights are also also shared by ass",
    "start": "997680",
    "end": "1002720"
  },
  {
    "text": "l so the T first tip is that you must look into binary although Apple open",
    "start": "1002720",
    "end": "1009639"
  },
  {
    "text": "source the S kernel the code related to Apple spec system resistors can only be",
    "start": "1009639",
    "end": "1015639"
  },
  {
    "text": "seen in binary for example uh as showing this two picture they are the same",
    "start": "1015639",
    "end": "1021240"
  },
  {
    "text": "function for texting the pack functionality but the checks of apples",
    "start": "1021240",
    "end": "1027079"
  },
  {
    "text": "back system registers can only be seen in binary so uh if you look into binary",
    "start": "1027079",
    "end": "1033839"
  },
  {
    "text": "you can document in coding based on the S the the St data or",
    "start": "1033839",
    "end": "1040678"
  },
  {
    "text": "functions the second tip is that I recommend you to identify the edit",
    "start": "1040679",
    "end": "1046400"
  },
  {
    "text": "encoding because it's really useful when you are doing test I will give you some",
    "start": "1046400",
    "end": "1053120"
  },
  {
    "text": "example later for the for the a encoding uh we can identify them based on uh the",
    "start": "1053120",
    "end": "1060039"
  },
  {
    "text": "system register Direction feature and here's here's an example of identifying",
    "start": "1060039",
    "end": "1066320"
  },
  {
    "text": "the pat C12 encoding which is introduced by Apple first we can set out the E1",
    "start": "1066320",
    "end": "1073760"
  },
  {
    "text": "register using the E1 encoding at E1 exception level and then we can test all",
    "start": "1073760",
    "end": "1081840"
  },
  {
    "text": "uh possible encodings on2 exception level to identify that if there's",
    "start": "1081840",
    "end": "1088240"
  },
  {
    "text": "another encoding that can read out the value we set before so uh that encoding",
    "start": "1088240",
    "end": "1095200"
  },
  {
    "text": "will be the E1 encoding E12 encoding and similarly you can use this method to",
    "start": "1095200",
    "end": "1102200"
  },
  {
    "text": "identify your two encoding but here's the thing is that",
    "start": "1102200",
    "end": "1107280"
  },
  {
    "text": "this method is is not applicable not applicable for all cases for example the",
    "start": "1107280",
    "end": "1114640"
  },
  {
    "text": "pat You2 encoding uh I identifi it in a more specific way and I will explain",
    "start": "1114640",
    "end": "1121760"
  },
  {
    "text": "later yeah and the tip three here is you can try to identify more encoding based on",
    "start": "1121760",
    "end": "1129440"
  },
  {
    "text": "the AAS encoding you identified before for example for the vmd encoding there's",
    "start": "1129440",
    "end": "1135960"
  },
  {
    "text": "uh there's no information in binary indicating that this encoding is pack",
    "start": "1135960",
    "end": "1141360"
  },
  {
    "text": "related but we mark it as pack related uh because it's initial life with the",
    "start": "1141360",
    "end": "1147520"
  },
  {
    "text": "the Ed incuding we identified before in the same basic blob and also I did some",
    "start": "1147520",
    "end": "1153960"
  },
  {
    "text": "test and confirm that this encoding is pack related but the second question is how",
    "start": "1153960",
    "end": "1161600"
  },
  {
    "text": "to understand the usage of this encoding and the first tip is that you can uh do",
    "start": "1161600",
    "end": "1168039"
  },
  {
    "text": "some manual analysis and it's iny because some of the resistors are set up",
    "start": "1168039",
    "end": "1174320"
  },
  {
    "text": "with hardcoded value or static value but for other cases or more complex cases I",
    "start": "1174320",
    "end": "1182440"
  },
  {
    "text": "recommend another method is a dynamic analysis or in other",
    "start": "1182440",
    "end": "1188440"
  },
  {
    "text": "word you can sniff a monitary system register we can do this um because uh we",
    "start": "1188440",
    "end": "1196400"
  },
  {
    "text": "Implement a hypervisor base is teral debug and we Implement two functionality",
    "start": "1196400",
    "end": "1202520"
  },
  {
    "text": "which are not supported by the official crial debugger ARB the active Canal",
    "start": "1202520",
    "end": "1208400"
  },
  {
    "text": "debugging and unlimited number of break points and this tool is very useful when",
    "start": "1208400",
    "end": "1215240"
  },
  {
    "text": "you are doing an analysis of SM kernel and yes we plan to open sources this",
    "start": "1215240",
    "end": "1221600"
  },
  {
    "text": "year and this work is a cowork with my friend Jo jashin and and if you and you",
    "start": "1221600",
    "end": "1227919"
  },
  {
    "text": "can follow his Twitter here and if you have any question and feel free to reach out",
    "start": "1227919",
    "end": "1233320"
  },
  {
    "text": "yeah and the tip three is that you can run your test on your one exception",
    "start": "1233320",
    "end": "1239440"
  },
  {
    "text": "level first as I mentioned before the vhe is Hardware on apple1 so most Apple",
    "start": "1239440",
    "end": "1247000"
  },
  {
    "text": "spe uh CPU features are depended on both E1 and E2 exception LEL running your",
    "start": "1247000",
    "end": "1253480"
  },
  {
    "text": "test on your one is a uh very useful trick because",
    "start": "1253480",
    "end": "1258640"
  },
  {
    "text": "you can trap to your two exception level and observe your one Hardware with a",
    "start": "1258640",
    "end": "1264320"
  },
  {
    "text": "higher privilege and I will give a example later",
    "start": "1264320",
    "end": "1269520"
  },
  {
    "text": "yeah so here we finish the task one however I need to say that the cases I",
    "start": "1269520",
    "end": "1276840"
  },
  {
    "text": "mentioned before like uh documenting encoding based on trim data uh or test",
    "start": "1276840",
    "end": "1283200"
  },
  {
    "text": "functions and these cases are easy or general and most of cases has been done",
    "start": "1283200",
    "end": "1290240"
  },
  {
    "text": "but uh I discovered that there are some uh there are still a lot of Apple St",
    "start": "1290240",
    "end": "1295840"
  },
  {
    "text": "encodings are remain undocumented and even some encodings are not used in SM",
    "start": "1295840",
    "end": "1301480"
  },
  {
    "text": "kernel so uh if you are interested in this uh we need your help for more test",
    "start": "1301480",
    "end": "1308520"
  },
  {
    "text": "to document them yeah so let's head to Let's head into",
    "start": "1308520",
    "end": "1314000"
  },
  {
    "text": "the task two uh bypass Apple's backpack key prote action first there are two pack mes on",
    "start": "1314000",
    "end": "1322440"
  },
  {
    "text": "app one the unpack mole and apple pack Mo under the unpack mod the pack",
    "start": "1322440",
    "end": "1328559"
  },
  {
    "text": "instruction Behavior will work as in un spe un specification and in and the Apple pack",
    "start": "1328559",
    "end": "1335360"
  },
  {
    "text": "mode can be enabled by setting up a bit of Apple's backpack system registers and",
    "start": "1335360",
    "end": "1341600"
  },
  {
    "text": "know that once you enabled it it cannot be disabled the ex criminal will enable",
    "start": "1341600",
    "end": "1348679"
  },
  {
    "text": "the Apple pack mod during kernel boots so our Target is to provide the uh pack",
    "start": "1348679",
    "end": "1356880"
  },
  {
    "text": "instruction Behavior after enabling Apple pack mode so uh what is pack key protection",
    "start": "1356880",
    "end": "1364520"
  },
  {
    "text": "for example if we use the E1 encoding to read the key register Under The Apple",
    "start": "1364520",
    "end": "1371000"
  },
  {
    "text": "under the unpack mode U we can read all the key sucessfully",
    "start": "1371000",
    "end": "1376279"
  },
  {
    "text": "yeah but once we enable the Apple pack and try to use the same method to read",
    "start": "1376279",
    "end": "1382960"
  },
  {
    "text": "out the key there's only one at this only an exception waiting for you",
    "start": "1382960",
    "end": "1389080"
  },
  {
    "text": "yeah so why we need to bypass the key protection well uh let me explain our",
    "start": "1389080",
    "end": "1395640"
  },
  {
    "text": "situation in reverse engineering for now uh there are four inputs we can control",
    "start": "1395640",
    "end": "1402320"
  },
  {
    "text": "the first one is the key value set up using your one encoding the second one",
    "start": "1402320",
    "end": "1407640"
  },
  {
    "text": "is the key selection or we can choose which key we wanted to use for uh signature",
    "start": "1407640",
    "end": "1414440"
  },
  {
    "text": "generation and then is a pointer and modifier however the the output we can",
    "start": "1414440",
    "end": "1421400"
  },
  {
    "text": "read is only the pack result or the signature so uh as we can see there are",
    "start": "1421400",
    "end": "1429720"
  },
  {
    "text": "two process between the inputs and outputs as a result even we can confirm",
    "start": "1429720",
    "end": "1435960"
  },
  {
    "text": "the existence of the docent Magic by reading the signature but we cannot",
    "start": "1435960",
    "end": "1442039"
  },
  {
    "text": "determine the dark magic is happening in which process and yeah so that's why we",
    "start": "1442039",
    "end": "1448279"
  },
  {
    "text": "need to read out the key because uh if we once we can read it we can determine the dark magic is",
    "start": "1448279",
    "end": "1456480"
  },
  {
    "text": "happen in which process and do some uh further reverse engineering",
    "start": "1456480",
    "end": "1462600"
  },
  {
    "text": "yeah so I I found that um the pack protection is depend on both E1 and E2",
    "start": "1462600",
    "end": "1470600"
  },
  {
    "text": "exception level for both of them I propose two methods to bypassing but to",
    "start": "1470600",
    "end": "1476279"
  },
  {
    "text": "bypass them yeah uh the first one is for your one key protection as I mentioned",
    "start": "1476279",
    "end": "1482840"
  },
  {
    "text": "before I recommend you to run the test on your one first and also to identify",
    "start": "1482840",
    "end": "1489000"
  },
  {
    "text": "the areas in coding I mentioned that this this trick are really useful and I",
    "start": "1489000",
    "end": "1495159"
  },
  {
    "text": "will show you an example so and so uh here is the example I found that",
    "start": "1495159",
    "end": "1501720"
  },
  {
    "text": "although we cannot read out the key value using the E1 encoding but for the",
    "start": "1501720",
    "end": "1508240"
  },
  {
    "text": "E1 key protection we can bypass it by reading the key registor using the E12",
    "start": "1508240",
    "end": "1515919"
  },
  {
    "text": "encoding on E2 exception so uh what about the E2 key",
    "start": "1515919",
    "end": "1524480"
  },
  {
    "text": "register uh no no no it's what about the E2 ke protection yeah how to bypass it",
    "start": "1524480",
    "end": "1531880"
  },
  {
    "text": "uh because now there's no higher exception level or E3 on A.1 the method",
    "start": "1531880",
    "end": "1539240"
  },
  {
    "text": "we used for bypass the eo1 key protection is not applicable for E2 so",
    "start": "1539240",
    "end": "1547240"
  },
  {
    "text": "my first idea is that um are there some other encodings for Access E2 key",
    "start": "1547240",
    "end": "1554440"
  },
  {
    "text": "register and the answer is yes there are E2 key",
    "start": "1554440",
    "end": "1560520"
  },
  {
    "text": "encodings for accessing the your two key register However unfortunately these",
    "start": "1560520",
    "end": "1567240"
  },
  {
    "text": "encodings are also non-readable yeah then I came up with the second idea is",
    "start": "1567240",
    "end": "1573480"
  },
  {
    "text": "that uh if I can use the side Channel attack to lift the key values from",
    "start": "1573480",
    "end": "1579880"
  },
  {
    "text": "register I did some test I found that the side Channel attack works on fm1 but",
    "start": "1579880",
    "end": "1587840"
  },
  {
    "text": "it can only works for leaking the things from memory for the system resistors it",
    "start": "1587840",
    "end": "1594200"
  },
  {
    "text": "fails after that uh I did a lot of test unfortunately I still cannot directly",
    "start": "1594200",
    "end": "1601559"
  },
  {
    "text": "read the key register all uh but luckily I have some",
    "start": "1601559",
    "end": "1608080"
  },
  {
    "text": "observations observation one is that uh I discovered that if the Apple pack mode",
    "start": "1608080",
    "end": "1614159"
  },
  {
    "text": "is disabled there's only one set of pack chick are available for Signature",
    "start": "1614159",
    "end": "1621200"
  },
  {
    "text": "generation uh this phenomenal makes sense um because as we mentioned before",
    "start": "1621200",
    "end": "1627399"
  },
  {
    "text": "in the arm specification there's only one set of pack keys for all",
    "start": "1627399",
    "end": "1633640"
  },
  {
    "text": "exception and but once we enable the app the Apple pack on E2 uh the access of",
    "start": "1633640",
    "end": "1640880"
  },
  {
    "text": "using the1 encoding on E2 exemption level will be redirect uh redirect",
    "start": "1640880",
    "end": "1648039"
  },
  {
    "text": "to the E2 key register observation two is that",
    "start": "1648039",
    "end": "1654399"
  },
  {
    "text": "enabling Apple pack will not change the value in E2 pack key",
    "start": "1654399",
    "end": "1660720"
  },
  {
    "text": "register besides that observation three is the pack instruction will generate",
    "start": "1660720",
    "end": "1666600"
  },
  {
    "text": "the signature based on the key based on the key value access the using E1",
    "start": "1666600",
    "end": "1672679"
  },
  {
    "text": "encoding yeah and back to our situation of reverse engineering what we need uh is",
    "start": "1672679",
    "end": "1681000"
  },
  {
    "text": "uh when we want to determine the pack value used for uh signature generation",
    "start": "1681000",
    "end": "1688039"
  },
  {
    "text": "when Apple pack enable so combining the observations and the ability we really",
    "start": "1688039",
    "end": "1695399"
  },
  {
    "text": "want I came up with the idea to bypass the E2 key",
    "start": "1695399",
    "end": "1701880"
  },
  {
    "text": "protection is uh we can preset the key the pack keys for Apple pack is",
    "start": "1701880",
    "end": "1709240"
  },
  {
    "text": "enable so there are only two steps we need to do step one we can set up e two",
    "start": "1709240",
    "end": "1716919"
  },
  {
    "text": "packes are using your two encoding with value and then enable the app pack the",
    "start": "1716919",
    "end": "1724320"
  },
  {
    "text": "pack instruction now will generate the signature based on the value we set before so the task two is also",
    "start": "1724320",
    "end": "1733600"
  },
  {
    "text": "finished after solving these two challenges uh what we need to do is do",
    "start": "1733600",
    "end": "1739640"
  },
  {
    "text": "some experiments and summarize the findings so here's the final part and",
    "start": "1739640",
    "end": "1746519"
  },
  {
    "text": "the most important part of my talk is our findings on Apple pack Hardware",
    "start": "1746519",
    "end": "1753279"
  },
  {
    "text": "implementation and here's the finding overview our findings contains registers",
    "start": "1753279",
    "end": "1758600"
  },
  {
    "text": "and instruction behavior and I will introduce the register first but the",
    "start": "1758600",
    "end": "1764880"
  },
  {
    "text": "functionality of them will be discussed in DET detail combining our finding on instruction Behavior so uh Apple",
    "start": "1764880",
    "end": "1773039"
  },
  {
    "text": "introduced three new packs system register first one is a control register",
    "start": "1773039",
    "end": "1779679"
  },
  {
    "text": "and second one is a 128 bit key for differentiating the signature generation",
    "start": "1779679",
    "end": "1785919"
  },
  {
    "text": "between user space and colel space the third one is 128 with diversifier to differentiate",
    "start": "1785919",
    "end": "1795200"
  },
  {
    "text": "the signature generation uh or the packing instruction between virtual",
    "start": "1795200",
    "end": "1800679"
  },
  {
    "text": "machines and host machine and even between different virtual machines so let's start with the key",
    "start": "1800679",
    "end": "1808960"
  },
  {
    "text": "access instruction as I mentioned each pack key is made up by two 64bit system resistors",
    "start": "1808960",
    "end": "1817519"
  },
  {
    "text": "so there are two system resistors indicating the lower syst bit and higher",
    "start": "1817519",
    "end": "1823279"
  },
  {
    "text": "syst bit of the pack keys and here we can see that if we set up the lowest",
    "start": "1823279",
    "end": "1829080"
  },
  {
    "text": "syst bit and read out the key and actually there's nothing happen what you",
    "start": "1829080",
    "end": "1834760"
  },
  {
    "text": "read is what to write but when I try to set up I bit something",
    "start": "1834760",
    "end": "1842000"
  },
  {
    "text": "happens yes the key is totally changed and I did some test and confirm that the",
    "start": "1842000",
    "end": "1849760"
  },
  {
    "text": "key now in the registor is the key value used for Signature",
    "start": "1849760",
    "end": "1855799"
  },
  {
    "text": "generation so the first finding is that if we set up the higher cible bit of the",
    "start": "1855799",
    "end": "1863120"
  },
  {
    "text": "P key on the Apple pack mode it will trigger a key",
    "start": "1863120",
    "end": "1868679"
  },
  {
    "text": "transformation and then I did some did some more test on E1 key transformation",
    "start": "1868679",
    "end": "1876080"
  },
  {
    "text": "I set up the VD in different values and Trigger the key",
    "start": "1876080",
    "end": "1882120"
  },
  {
    "text": "transformation and the result shows that uh the vmd U2 is one of the inputs for",
    "start": "1882120",
    "end": "1889600"
  },
  {
    "text": "your one key transformation besides that I discover",
    "start": "1889600",
    "end": "1896039"
  },
  {
    "text": "uh for the same inputs and the the key transformation result for different keys",
    "start": "1896039",
    "end": "1902559"
  },
  {
    "text": "are different so how Apple differentiate the",
    "start": "1902559",
    "end": "1908279"
  },
  {
    "text": "key transformation result for different keys I won't find out what it is and",
    "start": "1908279",
    "end": "1914080"
  },
  {
    "text": "what it is and after a lot of test um luckily I found it",
    "start": "1914080",
    "end": "1920320"
  },
  {
    "text": "yeah here's the key transformation result after I set up the vmd from zero",
    "start": "1920320",
    "end": "1926600"
  },
  {
    "text": "to seven and it's difficult to read but uh don't worry if we put some color it",
    "start": "1926600",
    "end": "1933720"
  },
  {
    "text": "will look like this so uh you can see that there's a symmetry here and I will I give you the",
    "start": "1933720",
    "end": "1941840"
  },
  {
    "text": "answer a bit is that uh there are six peras SS for differentiating the key",
    "start": "1941840",
    "end": "1949080"
  },
  {
    "text": "transformation for different keys and more importantly for the one",
    "start": "1949080",
    "end": "1955480"
  },
  {
    "text": "key transformation that per key sort will do a XR with",
    "start": "1955480",
    "end": "1960639"
  },
  {
    "text": "BD and the result will be one of the inputs for your one key",
    "start": "1960639",
    "end": "1967320"
  },
  {
    "text": "transformation so let's take a summary uh let's have some summarize uh of the",
    "start": "1967320",
    "end": "1974000"
  },
  {
    "text": "uh inputs and outputs for E1 key trans information is that there are four",
    "start": "1974000",
    "end": "1979840"
  },
  {
    "text": "inputs for you for key transformation first one is the lower syst forit of the",
    "start": "1979840",
    "end": "1986080"
  },
  {
    "text": "key registor and second one is the operator of the uh instruction for",
    "start": "1986080",
    "end": "1992960"
  },
  {
    "text": "setting up the higher SST key and the third one is the result of purchase s XO",
    "start": "1992960",
    "end": "1999880"
  },
  {
    "text": "with lower syst bit of V the final one is the highest C bit of the V and output",
    "start": "1999880",
    "end": "2007679"
  },
  {
    "text": "of the per of the key transformation is that the real 128 bit pack key for",
    "start": "2007679",
    "end": "2015440"
  },
  {
    "text": "Signature generation in addition to that um I",
    "start": "2015440",
    "end": "2020799"
  },
  {
    "text": "confirm that uh the key transformation is also depended on E2 exception level",
    "start": "2020799",
    "end": "2027279"
  },
  {
    "text": "for the E2 key transformation uh there's a per Booth diversifier to differentiate the key",
    "start": "2027279",
    "end": "2034320"
  },
  {
    "text": "transformation for different CPU for the pack instruction I found that",
    "start": "2034320",
    "end": "2040960"
  },
  {
    "text": "Apple introduced actual key to XO with the pack Keys before uh signature",
    "start": "2040960",
    "end": "2048560"
  },
  {
    "text": "generation and this actra key can be enabled in user space or kernel Space by",
    "start": "2048560",
    "end": "2056000"
  },
  {
    "text": "the apple back pack control register for the pack algorithm I found",
    "start": "2056000",
    "end": "2063200"
  },
  {
    "text": "that the pack algorithm on F1 is not the the comma uh recommended by R and there",
    "start": "2063200",
    "end": "2072118"
  },
  {
    "text": "interesting thing uh is that uh the result of the modifier XO with the key",
    "start": "2072119",
    "end": "2078878"
  },
  {
    "text": "value will be one of the inputs for pack algorithm besides that I discover that",
    "start": "2078879",
    "end": "2086800"
  },
  {
    "text": "Apple introduced a new per year switch to enable or disabled packing",
    "start": "2086800",
    "end": "2092800"
  },
  {
    "text": "struction and this switch can be cooperated with the armp back per key",
    "start": "2092800",
    "end": "2098040"
  },
  {
    "text": "switch and if one of them is enabled the pack instruction will be",
    "start": "2098040",
    "end": "2103839"
  },
  {
    "text": "enabled so uh let's summarize how Apple mitigate how Apple implements the dark",
    "start": "2103839",
    "end": "2110960"
  },
  {
    "text": "magic or cross attack mitigation for the cross attack I found that uh Apple I",
    "start": "2110960",
    "end": "2119680"
  },
  {
    "text": "found that the as kernel only enable the actual key on user space as a result the",
    "start": "2119680",
    "end": "2127079"
  },
  {
    "text": "signature generated in user space and kernel space are different for the cross VM attack Apple",
    "start": "2127079",
    "end": "2134480"
  },
  {
    "text": "introduce two different diversifier to differentiate the key transformation",
    "start": "2134480",
    "end": "2139680"
  },
  {
    "text": "result in virtual machine and host machine so and also for the cross boot",
    "start": "2139680",
    "end": "2145920"
  },
  {
    "text": "attack Apple introduced a pro boot diversifier to differentiate the key",
    "start": "2145920",
    "end": "2151800"
  },
  {
    "text": "transformation for different CPU boots finally for the Cross Key attack",
    "start": "2151800",
    "end": "2158880"
  },
  {
    "text": "Apple introduced per key SS for differentiating the the key",
    "start": "2158880",
    "end": "2165319"
  },
  {
    "text": "transformation result for different kcks and meanwhile I also do some",
    "start": "2165319",
    "end": "2171240"
  },
  {
    "text": "reverse and summarize the key management in the ASM kernel and we can see that the smm",
    "start": "2171240",
    "end": "2179000"
  },
  {
    "text": "kernel will configure the apia DHA with a global or static value and while it",
    "start": "2179000",
    "end": "2186440"
  },
  {
    "text": "will initialize uh the API bdb and actual key with a process b as a result",
    "start": "2186440",
    "end": "2195560"
  },
  {
    "text": "the pack instruction scope on the Kernel looks like this for the pack",
    "start": "2195560",
    "end": "2202000"
  },
  {
    "text": "IID uh they are Global in kernel but they are prosess in user",
    "start": "2202000",
    "end": "2208000"
  },
  {
    "text": "space for the pack ibdb and they process and for some process uh the SM",
    "start": "2208000",
    "end": "2216200"
  },
  {
    "text": "kernel will disable the user space pack by disabling uh the perchase reach",
    "start": "2216200",
    "end": "2223480"
  },
  {
    "text": "yeah so uh let's summarize the limitation of my work and yes uh there",
    "start": "2223480",
    "end": "2229319"
  },
  {
    "text": "are still things we don't know the first thing is that uh what's the algorithm",
    "start": "2229319",
    "end": "2235160"
  },
  {
    "text": "used for key transformation and also what's the pack algorithm on every oneth",
    "start": "2235160",
    "end": "2242160"
  },
  {
    "text": "and besides although we can confirm that uh how the per pero diversifier works",
    "start": "2242160",
    "end": "2250240"
  },
  {
    "text": "but how Apple how Apple implements it uh is still is still a question yeah",
    "start": "2250240",
    "end": "2258119"
  },
  {
    "text": "uh by the way I think that maybe we can look into the the loader to see that if",
    "start": "2258119",
    "end": "2264240"
  },
  {
    "text": "there's some uh useful message yeah so uh here's the summarize here's",
    "start": "2264240",
    "end": "2271280"
  },
  {
    "text": "the summary of my work yeah although there are some still uh still some",
    "start": "2271280",
    "end": "2277560"
  },
  {
    "text": "implementation remain known but uh the design of Apple pack is clear Apple pack",
    "start": "2277560",
    "end": "2285119"
  },
  {
    "text": "Hardware design looks simple but it's insightful among all the arm C fe uh arm",
    "start": "2285119",
    "end": "2292359"
  },
  {
    "text": "CP vendors apple is definitely the leader in point authentication so for",
    "start": "2292359",
    "end": "2299040"
  },
  {
    "text": "how to improve this hard to protect the the system the whole system and then",
    "start": "2299040",
    "end": "2306000"
  },
  {
    "text": "here's the end given by Apple I think that other CPU other arm CPU vendors and",
    "start": "2306000",
    "end": "2313520"
  },
  {
    "text": "even arm can learn a lot from this uh design and try to improve the point",
    "start": "2313520",
    "end": "2320119"
  },
  {
    "text": "authentication in the future okay so yes there one more thing",
    "start": "2320119",
    "end": "2327520"
  },
  {
    "text": "uh is that I also did uh secur the analysis of Cal pack protection and one",
    "start": "2327520",
    "end": "2335319"
  },
  {
    "text": "by 5 scholar CV from Apple and however this talk is about our findings on how",
    "start": "2335319",
    "end": "2342920"
  },
  {
    "text": "Apple implements the pack hardware and not about how to bypass it so if you are",
    "start": "2342920",
    "end": "2349599"
  },
  {
    "text": "interested in that part uh you can check on my using security paper yeah okay so",
    "start": "2349599",
    "end": "2357119"
  },
  {
    "text": "uh this is my talk and thank you for having me and thanks to thanks to black hat for giving me a chance to share this",
    "start": "2357119",
    "end": "2365240"
  },
  {
    "text": "work with you and if you have any question feel free to reach out on Twitter or email yeah and I will answer",
    "start": "2365240",
    "end": "2373640"
  },
  {
    "text": "that and thank you",
    "start": "2373640",
    "end": "2381400"
  }
]