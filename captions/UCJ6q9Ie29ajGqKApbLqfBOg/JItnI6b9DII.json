[
  {
    "text": "and my name is y and I'm from secure works and I provide redeeming services",
    "start": "3280",
    "end": "8920"
  },
  {
    "text": "for Enterprises mainly in Japan so for today's talk I'd like to share one of the challenges that I had during our",
    "start": "8920",
    "end": "15759"
  },
  {
    "text": "redam engagements and also I like to share the solution to",
    "start": "15759",
    "end": "21119"
  },
  {
    "text": "it now here are the agenda for today's talk first introduction and then we will",
    "start": "21880",
    "end": "28960"
  },
  {
    "text": "move on to the device authentication mechanism of the Microsoft enter ID and then after that we will dive into the",
    "start": "28960",
    "end": "36440"
  },
  {
    "text": "device authentication internals the windows internals and also I directly talk about how to abuse it with demo and",
    "start": "36440",
    "end": "43640"
  },
  {
    "text": "mitigation finally conclusion so um introduction so let me",
    "start": "43640",
    "end": "50079"
  },
  {
    "text": "begin with a story from our red team",
    "start": "50079",
    "end": "54198"
  },
  {
    "text": "engagement so one day in our red team engagement we SU three Spearfish and got",
    "start": "55160",
    "end": "61719"
  },
  {
    "text": "one of the target target machine infected with a sh cant so from the",
    "start": "61719",
    "end": "66840"
  },
  {
    "text": "machine we broke into its internal Network and with some techniques we",
    "start": "66840",
    "end": "72400"
  },
  {
    "text": "compromised the target active directory with some techniques and we got the domain admin privilege so after that",
    "start": "72400",
    "end": "79880"
  },
  {
    "text": "with the D privilege that we got we dumped all the credentials from the active",
    "start": "79880",
    "end": "85720"
  },
  {
    "text": "directory and in the dumped credentials one of one of the credential look like",
    "start": "86400",
    "end": "92040"
  },
  {
    "text": "admin account in Azure ad currently which is known as the Microsoft enter",
    "start": "92040",
    "end": "97799"
  },
  {
    "text": "ID so if we can successfully l in with this um admin account of the",
    "start": "97799",
    "end": "103240"
  },
  {
    "text": "aid we might get admin access to enter ID as well right so we try to crack its",
    "start": "103240",
    "end": "109680"
  },
  {
    "text": "password and we try to log into enter ID with the credential however the login was",
    "start": "109680",
    "end": "116439"
  },
  {
    "text": "successful but the access was brocked by the one of the security features of Microsoft enter ID which is the",
    "start": "116439",
    "end": "123079"
  },
  {
    "text": "conditional access so what is conditional access for",
    "start": "123079",
    "end": "129479"
  },
  {
    "text": "those of you who are not familiar with the conditional access this is a um security feature by Microsoft that can",
    "start": "129479",
    "end": "135760"
  },
  {
    "text": "control access to resources in the crowd based on the signals like who you are",
    "start": "135760",
    "end": "141080"
  },
  {
    "text": "and what your devices and what application you useing and what your network",
    "start": "141080",
    "end": "148319"
  },
  {
    "text": "Etc so from the error message that we got we can tell that the access was",
    "start": "148840",
    "end": "154239"
  },
  {
    "text": "brocked by the device based con access policy and it seems it requires the",
    "start": "154239",
    "end": "159480"
  },
  {
    "text": "Microsoft enter and on premise 8 joint device which means that we need as",
    "start": "159480",
    "end": "164680"
  },
  {
    "text": "attacker we need a corporate device for pivoting to the",
    "start": "164680",
    "end": "169800"
  },
  {
    "text": "clowd so the question is how can we bypass this kind of uh condition access",
    "start": "169800",
    "end": "175120"
  },
  {
    "text": "policy where you need a specific device",
    "start": "175120",
    "end": "180480"
  },
  {
    "text": "so from this engagement I started researching into how we can bypass the",
    "start": "180959",
    "end": "186599"
  },
  {
    "text": "device based connection access and gain access to resources as any user with a",
    "start": "186599",
    "end": "192159"
  },
  {
    "text": "credential so we want to access to resources in the cloud as any user with the credential not just only the locked",
    "start": "192159",
    "end": "198920"
  },
  {
    "text": "on user of the device so that we can easily switch accounts move laterally between accounts for fter post",
    "start": "198920",
    "end": "205959"
  },
  {
    "text": "exploitation activities in the clowd so this is my research goal",
    "start": "205959",
    "end": "211760"
  },
  {
    "text": "so to get some ideas for the research goal let's look into the mechanism of how ENT ID can identify device during",
    "start": "212599",
    "end": "219720"
  },
  {
    "text": "the authentication so the important part of",
    "start": "219720",
    "end": "224760"
  },
  {
    "text": "the device identification by the enter ID is the keys generated during the",
    "start": "224760",
    "end": "229879"
  },
  {
    "text": "device registration so when device is registered to enter ID two key sets are",
    "start": "229879",
    "end": "235879"
  },
  {
    "text": "generated one is the device key and the other one is transport key and each of the key set has its public",
    "start": "235879",
    "end": "242959"
  },
  {
    "text": "key and also the private key and during device registration the",
    "start": "242959",
    "end": "249239"
  },
  {
    "text": "public keys of the uh device key and also the transport key are sent to enter",
    "start": "249239",
    "end": "254599"
  },
  {
    "text": "ID and registered and after that ENT ID can identify device based on the usage",
    "start": "254599",
    "end": "260000"
  },
  {
    "text": "of those keys during O setation So now let's look into the detail of the",
    "start": "260000",
    "end": "265240"
  },
  {
    "text": "authentication flow when you access to Microsoft with your browser and from your C corate",
    "start": "265240",
    "end": "271840"
  },
  {
    "text": "device so first when you want to authenticate to enter ID with your corporate device and device sends the",
    "start": "271840",
    "end": "279479"
  },
  {
    "text": "logr request signed by device key and the signed L request is",
    "start": "279479",
    "end": "286400"
  },
  {
    "text": "basically JWT which is the U Json web token and the JWT has three parts and",
    "start": "286400",
    "end": "292440"
  },
  {
    "text": "each part is um base 64 URL encoded Json values and the one the first one header",
    "start": "292440",
    "end": "298840"
  },
  {
    "text": "defines the signing algorithm of the JWT and the second one payload contains",
    "start": "298840",
    "end": "304639"
  },
  {
    "text": "username and a password for the user authentication and the last one is the",
    "start": "304639",
    "end": "310240"
  },
  {
    "text": "signature which is the Json web signature made by device key so enter ID received this request",
    "start": "310240",
    "end": "317240"
  },
  {
    "text": "and verify the bar key usage of the device key and also the credentials in the",
    "start": "317240",
    "end": "324240"
  },
  {
    "text": "pay so by sending the signed Rin request enter ID can identify device and also D",
    "start": "324240",
    "end": "330120"
  },
  {
    "text": "user then enter ID returns PLT which is the primary refresh token and also the",
    "start": "330120",
    "end": "337000"
  },
  {
    "text": "session key and this is the response from the ENT ID and in the response you can see",
    "start": "337000",
    "end": "345080"
  },
  {
    "text": "there is the PLT and also the session key right there and uh one primary",
    "start": "345080",
    "end": "351160"
  },
  {
    "text": "refresh token is this can be used for single sign access to the for example",
    "start": "351160",
    "end": "356800"
  },
  {
    "text": "teams or SharePoint or Al or whatever you can use it for single sign on but just sending PRT is not enough for the",
    "start": "356800",
    "end": "364000"
  },
  {
    "text": "single sign on uh you need to use the session key as well but in the response",
    "start": "364000",
    "end": "369960"
  },
  {
    "text": "session key is encrypted actually and to use the session key device decrypts the",
    "start": "369960",
    "end": "376080"
  },
  {
    "text": "encrypt s Key by transport key so for the single sign access with",
    "start": "376080",
    "end": "383280"
  },
  {
    "text": "your browser first device decrypt the encrypt key in the response and then use",
    "start": "383280",
    "end": "388800"
  },
  {
    "text": "it to find the PLT and this one is called the PLT",
    "start": "388800",
    "end": "394560"
  },
  {
    "text": "cie and PLT quickie is also the JWT as you can see there and it contains the",
    "start": "394560",
    "end": "400880"
  },
  {
    "text": "PLT and the payload right this and this PLT cook key it's JWT is signed by the",
    "start": "400880",
    "end": "407039"
  },
  {
    "text": "session key which is bounded to a specific device so again entry ID can",
    "start": "407039",
    "end": "412599"
  },
  {
    "text": "identify which device is used from the key usage of the session key and also enter ID can control the access to",
    "start": "412599",
    "end": "420199"
  },
  {
    "text": "um resources in the crowd based on the device information so after the device",
    "start": "420199",
    "end": "426199"
  },
  {
    "text": "identification you can access to Microsoft you can access to the resources in the cloud like",
    "start": "426199",
    "end": "432400"
  },
  {
    "text": "this so in summary during the device registration device key and transport key are",
    "start": "432400",
    "end": "438360"
  },
  {
    "text": "generated and registered to enter ID and then enter ID can identify which device",
    "start": "438360",
    "end": "443599"
  },
  {
    "text": "is used by the signature of device key and also the session key but the session key and the response",
    "start": "443599",
    "end": "451199"
  },
  {
    "text": "is encrypted so device decrypted by the register transport key and use it to",
    "start": "451199",
    "end": "456400"
  },
  {
    "text": "sign the p and create P cie so getting back to the research goal",
    "start": "456400",
    "end": "461560"
  },
  {
    "text": "from this mechanism we can say that the um by signing any users login request",
    "start": "461560",
    "end": "467080"
  },
  {
    "text": "and also the PT with those keys then we can access to enter ID as a registered",
    "start": "467080",
    "end": "472240"
  },
  {
    "text": "device and bypass the device based connection access however those keys the device key",
    "start": "472240",
    "end": "480479"
  },
  {
    "text": "transport key and also the session key all of them are securely stored in TPM the trust that platform module if the",
    "start": "480479",
    "end": "486960"
  },
  {
    "text": "device has it and those keys cannot be exported they are not",
    "start": "486960",
    "end": "492159"
  },
  {
    "text": "exportable and there is a prer research and the um exporting a derived key of",
    "start": "492159",
    "end": "497840"
  },
  {
    "text": "session key and creating PLT cook keie is discovered by Benjamin dely and D",
    "start": "497840",
    "end": "503080"
  },
  {
    "text": "however it is PED in 2021 So currently it is hard to export those key and",
    "start": "503080",
    "end": "508879"
  },
  {
    "text": "create p key but even if the keys are protected",
    "start": "508879",
    "end": "513919"
  },
  {
    "text": "in TPM and not exportable I believe that still those keys can be used from the",
    "start": "513919",
    "end": "519919"
  },
  {
    "text": "device and they can be accessed I believe so if we can understand how the",
    "start": "519919",
    "end": "525160"
  },
  {
    "text": "TPM store keys are handled and used in the device internally then we can still",
    "start": "525160",
    "end": "531440"
  },
  {
    "text": "abuse them for creating any users P cookie and fake device to access to ENT ID so this is why I started reverse",
    "start": "531440",
    "end": "539040"
  },
  {
    "text": "engineering ing Windows OS to understand how those secret keys in TPM are used",
    "start": "539040",
    "end": "544880"
  },
  {
    "text": "and how we can abuse that so um let me talk about the",
    "start": "544880",
    "end": "551800"
  },
  {
    "text": "analysis of the windows internals and the ways of its",
    "start": "551800",
    "end": "557240"
  },
  {
    "text": "abuse first I started researching how Google Chrome handles the browser single sign on especially especially it's",
    "start": "557320",
    "end": "564839"
  },
  {
    "text": "extension called the windows accounts that handles the browser single sign for you",
    "start": "564839",
    "end": "569920"
  },
  {
    "text": "user and so when you open the Google Chrome and access to Microsoft with it",
    "start": "569920",
    "end": "575079"
  },
  {
    "text": "what happens there is that first Google Chrome sponsor a new process code browser.exe and then browser.exe Lo a DL",
    "start": "575079",
    "end": "583880"
  },
  {
    "text": "code Microsoft Microsoft account token provider. DL and then pro.exe execute",
    "start": "583880",
    "end": "590920"
  },
  {
    "text": "the method inside the DL called get cookie info for U and this method get",
    "start": "590920",
    "end": "597200"
  },
  {
    "text": "the PLT cookie of the loc on user the device and return it to a Col process and return it to a Google Chrome so",
    "start": "597200",
    "end": "604440"
  },
  {
    "text": "basically this is the way of browser single sign on for Google Chrome and also this has been abused by attackers",
    "start": "604440",
    "end": "611560"
  },
  {
    "text": "for PLT Quicky Seft what I mean by that is that attackers can use the browser C or exe",
    "start": "611560",
    "end": "619000"
  },
  {
    "text": "or attacker can also use the dll and execute the method inside",
    "start": "619000",
    "end": "624640"
  },
  {
    "text": "it so but for my research I tried to discover what what the method the get",
    "start": "624640",
    "end": "630640"
  },
  {
    "text": "cookie info for UI does to internally get the PLT cookie of the Doon user for",
    "start": "630640",
    "end": "636399"
  },
  {
    "text": "my research so if you look at the get cook",
    "start": "636399",
    "end": "642240"
  },
  {
    "text": "info for Ur method in the DL you can find that the method at the end calls",
    "start": "642240",
    "end": "647399"
  },
  {
    "text": "the LSA C authentication package and this Windows API can communicate with",
    "start": "647399",
    "end": "653120"
  },
  {
    "text": "the authenication provider loaded in Elsas so this means that the method to",
    "start": "653120",
    "end": "659760"
  },
  {
    "text": "get cookie info for U it's sending some data to Elsas to get the PLT cookie of",
    "start": "659760",
    "end": "665440"
  },
  {
    "text": "the logon user and if you look at the data sent to Elsas then you can find some Json data",
    "start": "665440",
    "end": "672720"
  },
  {
    "text": "with code ID and also the payload values in it and if you also follow where the Json",
    "start": "672720",
    "end": "680120"
  },
  {
    "text": "data goes then you can tell that the Json data is first to the cloudd authentication provider in elus and then",
    "start": "680120",
    "end": "687959"
  },
  {
    "text": "the Jon data is pass on to the A",
    "start": "687959",
    "end": "693160"
  },
  {
    "text": "prag and the finally the a prag handles the Json data inside this function and",
    "start": "693880",
    "end": "701720"
  },
  {
    "text": "inside this function of a plugin there is a switch statement and based on the Cod number of",
    "start": "701720",
    "end": "708480"
  },
  {
    "text": "the Json data one of the functions inside a plugin is executed and this",
    "start": "708480",
    "end": "714279"
  },
  {
    "text": "time the code number in Json is two so the create SSO cie function inside the",
    "start": "714279",
    "end": "721560"
  },
  {
    "text": "plugin is executed and then this function Returns the PLT C keie of the lock down",
    "start": "721560",
    "end": "727680"
  },
  {
    "text": "user so let me summarize what we have seen so far so during the browser single",
    "start": "727680",
    "end": "732880"
  },
  {
    "text": "sign know Google Chrome runs a browser called exe and then Brer core. exe",
    "start": "732880",
    "end": "738000"
  },
  {
    "text": "execute the get cook info for URI and then this method um execute the RSA core",
    "start": "738000",
    "end": "744320"
  },
  {
    "text": "authentication package to communicate with .exe and by sending the Json",
    "start": "744320",
    "end": "751199"
  },
  {
    "text": "data the Json data passed on to the a plugin then based on the c number of the",
    "start": "751199",
    "end": "756600"
  },
  {
    "text": "Json data the uh Creator SS cookie function is executed and this function",
    "start": "756600",
    "end": "762199"
  },
  {
    "text": "returns a PT cookie to the Google Chrome so this is what happens during",
    "start": "762199",
    "end": "767440"
  },
  {
    "text": "browser single sign on and in order to interact with the .exe and also the a",
    "start": "767440",
    "end": "774079"
  },
  {
    "text": "plugin for my research I implemented a PC that",
    "start": "774079",
    "end": "779320"
  },
  {
    "text": "directly talk to .exe without the browser.exe and also the uh",
    "start": "779320",
    "end": "785360"
  },
  {
    "text": "DL by just scoring the LSA called authentication package and with this P I",
    "start": "785360",
    "end": "790959"
  },
  {
    "text": "was able to call the create SSO cookie in the Prov so by replicating the same flow as",
    "start": "790959",
    "end": "798560"
  },
  {
    "text": "Google Chrome and by executing the uh function inside of a already plug in I confirm that we can steal the PLT cookie",
    "start": "798560",
    "end": "805959"
  },
  {
    "text": "of the lockone user as you can see there so now I got another way of PLT cookie sft",
    "start": "805959",
    "end": "812360"
  },
  {
    "text": "for the lock on user however the retried PL cookie only allow",
    "start": "812360",
    "end": "818639"
  },
  {
    "text": "us to gain access to resources as a loged on user of the device and to",
    "start": "818639",
    "end": "824079"
  },
  {
    "text": "access to resources as any user with the credential first what we have to do is",
    "start": "824079",
    "end": "829639"
  },
  {
    "text": "that we need to sign the user's login request by device key for this thing there was an internal",
    "start": "829639",
    "end": "837560"
  },
  {
    "text": "function in a plug in called sign per function and it looked like interesting",
    "start": "837560",
    "end": "843279"
  },
  {
    "text": "and it looked like this might help with a research so for my research as a next",
    "start": "843279",
    "end": "848519"
  },
  {
    "text": "step I started looking at the sign PA function inside the a",
    "start": "848519",
    "end": "853759"
  },
  {
    "text": "plam so um this is a part of the the compiled version of the uh sign PA",
    "start": "854240",
    "end": "859759"
  },
  {
    "text": "function in the a prame you can see there are two functions are called inside this function and one is the",
    "start": "859759",
    "end": "866880"
  },
  {
    "text": "check package Sid for request sign and the other one is build by source assumtion so let's look at the second",
    "start": "866880",
    "end": "873720"
  },
  {
    "text": "one first to understand what this sign P function inside the plugin can do for",
    "start": "873720",
    "end": "880440"
  },
  {
    "text": "us so what it does in the build by assumtion is that first Json data is",
    "start": "880440",
    "end": "886199"
  },
  {
    "text": "sent to ls. XE and then the device or assumtion gets this period value and",
    "start": "886199",
    "end": "892800"
  },
  {
    "text": "basic for URL encoded like this and at the same time JWT header is generated",
    "start": "892800",
    "end": "899560"
  },
  {
    "text": "and from the header and payload the signature of the device key is",
    "start": "899560",
    "end": "905000"
  },
  {
    "text": "generated and finally combine all together JWT is created with the",
    "start": "905000",
    "end": "910560"
  },
  {
    "text": "signature of device key so the sign PA function literally",
    "start": "910560",
    "end": "916199"
  },
  {
    "text": "can sign the content of the pay and make jity with the signature of device",
    "start": "916199",
    "end": "922240"
  },
  {
    "text": "key so this means that with this function if you include username and password in the payload of the Json data",
    "start": "922240",
    "end": "929319"
  },
  {
    "text": "then through this internal function of a plugin you can get this login request with a signature of device key and you",
    "start": "929319",
    "end": "936120"
  },
  {
    "text": "can use it to authenticate to enter ID however there is another function the",
    "start": "936120",
    "end": "942600"
  },
  {
    "text": "check package Sid for request sign and what this function does is that",
    "start": "942600",
    "end": "948880"
  },
  {
    "text": "this function checks if a coder process Sid is the one specified here and if not the right Sid then the",
    "start": "948880",
    "end": "957639"
  },
  {
    "text": "build device of assumption is not executed and therefore sign perod function does not return the device key",
    "start": "957639",
    "end": "964000"
  },
  {
    "text": "sign Ling request for us however by quickly searching the Sid",
    "start": "964000",
    "end": "969759"
  },
  {
    "text": "specified there I found that the Sid is for the app containers Sid and it is for",
    "start": "969759",
    "end": "975480"
  },
  {
    "text": "the application called a token broker since this Sid is for the app containers",
    "start": "975480",
    "end": "981759"
  },
  {
    "text": "with some techniques we can impersonate this Sid in the device and we can byass the Sid check of this function",
    "start": "981759",
    "end": "990480"
  },
  {
    "text": "so for example from our C client we can impersonate the a token broker Sid to",
    "start": "990480",
    "end": "996000"
  },
  {
    "text": "bypass the Sid check and then we can call the a call authentication package",
    "start": "996000",
    "end": "1001720"
  },
  {
    "text": "and to execute this time the sign P function inside the plam and if you include username and",
    "start": "1001720",
    "end": "1009120"
  },
  {
    "text": "password in the um Json data sent to .xc then you can get the device key sign l",
    "start": "1009120",
    "end": "1016720"
  },
  {
    "text": "login request through this approach so I implemented a PO for this approach",
    "start": "1016720",
    "end": "1023880"
  },
  {
    "text": "and generated sign login request with a signature of device key like this in the",
    "start": "1023880",
    "end": "1029839"
  },
  {
    "text": "request and by sending this sign login request then I confirm that we can get",
    "start": "1029839",
    "end": "1035199"
  },
  {
    "text": "the any users P the Logan users the we can get the PT of the user and we can",
    "start": "1035199",
    "end": "1040400"
  },
  {
    "text": "also get the encrypt session key in the response so to sum up we can sign any",
    "start": "1040400",
    "end": "1047839"
  },
  {
    "text": "users ring request by device key through the internal function of a plugin called",
    "start": "1047839",
    "end": "1053039"
  },
  {
    "text": "sign payload so by sending the sign request we can get the users PLT and",
    "start": "1053039",
    "end": "1059039"
  },
  {
    "text": "also we can get the encrypt session key for the browser single sign access",
    "start": "1059039",
    "end": "1065080"
  },
  {
    "text": "we have one more thing to do which is to decrypt the encrypt the session key in the response and use it to sign the PLT",
    "start": "1065080",
    "end": "1071720"
  },
  {
    "text": "with it and for so let's let's find out how",
    "start": "1071720",
    "end": "1076880"
  },
  {
    "text": "we can do that so by looking at the plin code I found that undocumented API from crypto",
    "start": "1076880",
    "end": "1083840"
  },
  {
    "text": "enc.dll are imported and used for huning the encrypted session key in the response",
    "start": "1083840",
    "end": "1091240"
  },
  {
    "text": "which are NGC import symmetric POP key and also the NGC sign with symmetric POP",
    "start": "1091240",
    "end": "1099440"
  },
  {
    "text": "key I'm not going to cover all the technical details here but the undent",
    "start": "1100360",
    "end": "1105760"
  },
  {
    "text": "API works as RPC client and and NGC import symmetric POP key can talk to",
    "start": "1105760",
    "end": "1113360"
  },
  {
    "text": "a.exe and then a.exe works as RPC server",
    "start": "1113360",
    "end": "1118720"
  },
  {
    "text": "and import the encrypt key into TPM and decrypted by the register transport key",
    "start": "1118720",
    "end": "1124559"
  },
  {
    "text": "in TPM and NGC sign with symmetric po pop",
    "start": "1124559",
    "end": "1130320"
  },
  {
    "text": "key can use the uh session key deced in TPM and sign the signing input and get",
    "start": "1130320",
    "end": "1137280"
  },
  {
    "text": "the signature of session key from ass signing input so by analyzing the undocumented",
    "start": "1137280",
    "end": "1143799"
  },
  {
    "text": "apis I figured out that we can use them to input and deip the session key in DPM",
    "start": "1143799",
    "end": "1150120"
  },
  {
    "text": "then we can use the session key for signing so with this approach we can",
    "start": "1150120",
    "end": "1156640"
  },
  {
    "text": "finally sign the PLT with the decrep S key and we can also create our own PLT",
    "start": "1156640",
    "end": "1164240"
  },
  {
    "text": "cookie so I implemented this into my PC and confirm that we can create our own",
    "start": "1165120",
    "end": "1170480"
  },
  {
    "text": "PLT cookie as you can see here now we can create arbitrary users PLT cookie",
    "start": "1170480",
    "end": "1176080"
  },
  {
    "text": "with the credential so we can gain browser single sign access to resources as any user if you have the",
    "start": "1176080",
    "end": "1183679"
  },
  {
    "text": "credential so let me summarize what we have seen so far and how we can abuse them first we need to infect some",
    "start": "1183679",
    "end": "1190720"
  },
  {
    "text": "corporate machine that is registered to enter ID and then from the machine we can sign any users ring request stored",
    "start": "1190720",
    "end": "1198480"
  },
  {
    "text": "in device the signed by the device key and then you can send a sign R",
    "start": "1198480",
    "end": "1204760"
  },
  {
    "text": "request with a signature of device key and you can get the users's PLT and also you can get the encrypt session",
    "start": "1204760",
    "end": "1211679"
  },
  {
    "text": "key and after that you can import the uh session key to TPM and decrypt it by the",
    "start": "1211679",
    "end": "1218039"
  },
  {
    "text": "transport key started in TPM thanks to the undent apis then you can sign the PLT with it",
    "start": "1218039",
    "end": "1225120"
  },
  {
    "text": "and you can create PLT cook key and if attackers get the generated PLT cookie",
    "start": "1225120",
    "end": "1230720"
  },
  {
    "text": "with this approach attackers can people to the clowd as a user of the PLT cookie",
    "start": "1230720",
    "end": "1236720"
  },
  {
    "text": "and bypassing the device based connection access so with this approach now we can",
    "start": "1236720",
    "end": "1242320"
  },
  {
    "text": "gain the browser based single sign access but what if I want to have API",
    "start": "1242320",
    "end": "1249559"
  },
  {
    "text": "access to enter ID so there is another authentication FL",
    "start": "1249559",
    "end": "1258200"
  },
  {
    "text": "that can give give us up tokens for API access so by sending the PLT signed by",
    "start": "1258200",
    "end": "1265000"
  },
  {
    "text": "session key we can also acquire app tokens for API access however this app tokens in the",
    "start": "1265000",
    "end": "1272279"
  },
  {
    "text": "response are encrypted and they cannot be used as they are for",
    "start": "1272279",
    "end": "1277880"
  },
  {
    "text": "API but actually you can decrypt the encrypted app tokens by the S key and I",
    "start": "1277880",
    "end": "1284799"
  },
  {
    "text": "found that there is another undent API used for us which is the ngg decrypt with symmetric POP",
    "start": "1284799",
    "end": "1292000"
  },
  {
    "text": "key so by analyzing the usage of the undent API I confirmed that we can decrypt the encrypted app tokens with",
    "start": "1292000",
    "end": "1299760"
  },
  {
    "text": "the session key decrypted and stored in TPM and we can acquire access token and",
    "start": "1299760",
    "end": "1305200"
  },
  {
    "text": "also refresh token for API access to the cloud as",
    "start": "1305200",
    "end": "1310360"
  },
  {
    "text": "well so by abusing the TPM store Keys through the undocumented apis and also the",
    "start": "1310360",
    "end": "1317720"
  },
  {
    "text": "internal function of a plugin loaded in Elsas we can create our own PLT cookie",
    "start": "1317720",
    "end": "1323320"
  },
  {
    "text": "or also we can acquire app tokens with any users credential and this attack approach does",
    "start": "1323320",
    "end": "1330400"
  },
  {
    "text": "not require administ administrator privilege in the compromised",
    "start": "1330400",
    "end": "1335840"
  },
  {
    "text": "device and using this approach we can finally bypass the device based con access",
    "start": "1335840",
    "end": "1341840"
  },
  {
    "text": "policy so now the initial goal is achieved but let's Explore More to find",
    "start": "1341840",
    "end": "1349320"
  },
  {
    "text": "another ways of abusing the TPM St keys so um another abuse of the TPM St",
    "start": "1349320",
    "end": "1357039"
  },
  {
    "text": "Keys is password authentication so I found that the other important apis allow us to interact with",
    "start": "1357039",
    "end": "1364880"
  },
  {
    "text": "the windows H for business Keys stored also in TPM first let's look at the windows H",
    "start": "1364880",
    "end": "1371679"
  },
  {
    "text": "for business Implement implementation to find out what this undocumented API can do for us",
    "start": "1371679",
    "end": "1379480"
  },
  {
    "text": "so as you might know Windows har for business is used for password address authentication and when you want to use",
    "start": "1379480",
    "end": "1386320"
  },
  {
    "text": "it Windows hard for business Keys called user key are generated and registered to",
    "start": "1386320",
    "end": "1391799"
  },
  {
    "text": "enter ID and after that Um this can be used to authenticate to enter ID without",
    "start": "1391799",
    "end": "1399799"
  },
  {
    "text": "password and when authenticating with Windows har for business first we need to send device key signed",
    "start": "1399799",
    "end": "1407039"
  },
  {
    "text": "JWT that contains the user key sign data I know this is kind of complicated then",
    "start": "1407039",
    "end": "1413000"
  },
  {
    "text": "enter ID can return the PLT and also the session key with this we can create the",
    "start": "1413000",
    "end": "1418760"
  },
  {
    "text": "PLT cookie as we have seen before so let's look at the complicated sign",
    "start": "1418760",
    "end": "1424600"
  },
  {
    "text": "data so this is the request to enter ID during the authentication and it has a device key",
    "start": "1424600",
    "end": "1431080"
  },
  {
    "text": "sign JWT in the request and if you look at it the JWT",
    "start": "1431080",
    "end": "1436279"
  },
  {
    "text": "pay contains data with the signature of Windows har for business keys and ENT ID",
    "start": "1436279",
    "end": "1442840"
  },
  {
    "text": "received this request and with this request ENT ID can perform its authentication by validating the key",
    "start": "1442840",
    "end": "1448720"
  },
  {
    "text": "usage of the device key and also the uh Windows H 4 business",
    "start": "1448720",
    "end": "1454559"
  },
  {
    "text": "keys so by analyzing the undent apis and by interacting with all the secret keys",
    "start": "1454559",
    "end": "1461240"
  },
  {
    "text": "topm I confirm that we can authenticate the enter ID with Windows har for business keys without password and we",
    "start": "1461240",
    "end": "1467919"
  },
  {
    "text": "can create PLT cookie and also in addition to the PLT",
    "start": "1467919",
    "end": "1473799"
  },
  {
    "text": "cookie you can also receive access token with the windows hard for business keys",
    "start": "1473799",
    "end": "1479320"
  },
  {
    "text": "and if you look at the access token here a acquired by the this approach this",
    "start": "1479320",
    "end": "1484640"
  },
  {
    "text": "access token has MFA claims in its payload so this means that with this",
    "start": "1484640",
    "end": "1490039"
  },
  {
    "text": "authentication approach multiactor authenication is already completed and also you can see there is a device ID",
    "start": "1490039",
    "end": "1497679"
  },
  {
    "text": "here in the CR in the pay which means that device identification is also completed with this authentication",
    "start": "1497679",
    "end": "1506080"
  },
  {
    "text": "approach so to summarize now we can create PLT cook key or also we can",
    "start": "1506080",
    "end": "1511200"
  },
  {
    "text": "acquire the app tokens through Windows har for business keys without password and this approach allow us to",
    "start": "1511200",
    "end": "1517760"
  },
  {
    "text": "bypass the device based con access policy and also attackers can bypass the MFA enforcement policy in the uh",
    "start": "1517760",
    "end": "1525480"
  },
  {
    "text": "conditional access of the ENT ID however there is one b side for the",
    "start": "1525480",
    "end": "1530559"
  },
  {
    "text": "aters um if you want to login as other user if you want to switch accounts then",
    "start": "1530559",
    "end": "1536600"
  },
  {
    "text": "you need to compromise other device with Windows har for business Keys stored so the windows har for business keys are",
    "start": "1536600",
    "end": "1543880"
  },
  {
    "text": "bounded to a specific user and stored in other device so if you want to uh move",
    "start": "1543880",
    "end": "1550120"
  },
  {
    "text": "laterally between accounts in the cloud then we have to compromise other device",
    "start": "1550120",
    "end": "1555480"
  },
  {
    "text": "with other users Windows H for business keys",
    "start": "1555480",
    "end": "1560240"
  },
  {
    "text": "stored so uh let me show you a demo so I implemented all the techniques",
    "start": "1562200",
    "end": "1569559"
  },
  {
    "text": "into Powershell script called but toen broker and let me show you what it's",
    "start": "1569559",
    "end": "1575120"
  },
  {
    "text": "like okay so right now you are showing the you're looking at the windows Ron",
    "start": "1575120",
    "end": "1580880"
  },
  {
    "text": "box and this is um register to enter ID so you can access to Microsoft and now",
    "start": "1580880",
    "end": "1586760"
  },
  {
    "text": "there you can see attackers scene and for the demo first I will try to log",
    "start": "1586760",
    "end": "1593039"
  },
  {
    "text": "into the enter ID and people to the clowd with the store show in the introduction however from the attacker",
    "start": "1593039",
    "end": "1600240"
  },
  {
    "text": "machine the access is Brock by the condition access and it looks like it requires as",
    "start": "1600240",
    "end": "1606760"
  },
  {
    "text": "the corporate device like the inra join and Prem join device so uh let's imagine",
    "start": "1606760",
    "end": "1613200"
  },
  {
    "text": "that we compromised the windows webon box and we can open the power shell",
    "start": "1613200",
    "end": "1619279"
  },
  {
    "text": "session and we can import the B token broker script like this and we can",
    "start": "1619279",
    "end": "1626640"
  },
  {
    "text": "execute the create PLT cookie command by specifying the username and a password once you execute it you can get the PLT",
    "start": "1626640",
    "end": "1633960"
  },
  {
    "text": "cookie like this and then once you get the PLT",
    "start": "1633960",
    "end": "1640840"
  },
  {
    "text": "cookie with this approach you can go back to the attack",
    "start": "1640840",
    "end": "1646559"
  },
  {
    "text": "machine and you can configure the PLT cookie in the brother cookie",
    "start": "1646559",
    "end": "1651799"
  },
  {
    "text": "store like",
    "start": "1651799",
    "end": "1655158"
  },
  {
    "text": "this and then once you configure the cookie you can access the Microsoft",
    "start": "1658399",
    "end": "1666000"
  },
  {
    "text": "again and now you can [Applause]",
    "start": "1666880",
    "end": "1672640"
  },
  {
    "text": "buy so this is all for the demo",
    "start": "1672640",
    "end": "1677640"
  },
  {
    "text": "okay so I implemented all the techniques into the um B token",
    "start": "1684279",
    "end": "1689399"
  },
  {
    "text": "broker now it's um public so you can access to the URL specified",
    "start": "1689399",
    "end": "1695919"
  },
  {
    "text": "here so this is all for the demo and finally let me give you some tips for",
    "start": "1700080",
    "end": "1705120"
  },
  {
    "text": "mitigation against this attack so this attack is implemented based on",
    "start": "1705120",
    "end": "1711360"
  },
  {
    "text": "how Windows always internally handles the uh secret key stored in TPM so it's",
    "start": "1711360",
    "end": "1716880"
  },
  {
    "text": "kind of like by Design and Microsoft has responded this attack as a expected Behavior so there is no fix so",
    "start": "1716880",
    "end": "1725159"
  },
  {
    "text": "far however for the mitigation I recommend you should review and Harden your condition access policies for for",
    "start": "1725159",
    "end": "1731840"
  },
  {
    "text": "example requiring MFA not only just requiring corporate device and this",
    "start": "1731840",
    "end": "1737480"
  },
  {
    "text": "helps that this helps to make it harder for attackers to Pivot to the crowd and move",
    "start": "1737480",
    "end": "1743399"
  },
  {
    "text": "laterally between Clow between accounts and clowd so during our team engagement we",
    "start": "1743399",
    "end": "1749960"
  },
  {
    "text": "have seen a lot of companies require just only corporate device to access the crowd not only not require",
    "start": "1749960",
    "end": "1757480"
  },
  {
    "text": "MFA but M if MFA is also required then attackers have to do something like",
    "start": "1757480",
    "end": "1763080"
  },
  {
    "text": "compromising other device with the windows hard key is configured for switching accounts for",
    "start": "1763080",
    "end": "1769760"
  },
  {
    "text": "their post exploitation activity so I should I recommend you should um require MFA and Harden your con condition access",
    "start": "1769760",
    "end": "1776679"
  },
  {
    "text": "policies so that attackers will be hard to people to the clowd and to detect to detect the",
    "start": "1776679",
    "end": "1783960"
  },
  {
    "text": "attacks by the B token broker you should monitor suspicious RP activity by using",
    "start": "1783960",
    "end": "1789080"
  },
  {
    "text": "the internal function of a plugin and also you should monitor the uh Crypton agency and the Comm API",
    "start": "1789080",
    "end": "1796240"
  },
  {
    "text": "calls also if you corate device is compromised then it is it is a good idea",
    "start": "1796240",
    "end": "1801320"
  },
  {
    "text": "to check if the device is used by attackers to bypass the device based con",
    "start": "1801320",
    "end": "1806440"
  },
  {
    "text": "access policy and move laterally between accounts you can look at the multip",
    "start": "1806440",
    "end": "1811840"
  },
  {
    "text": "multiple accounts signning logs from your device please refer to the KQ query reseted",
    "start": "1811840",
    "end": "1818200"
  },
  {
    "text": "here so let me summarize today's session so we have seen how attackers",
    "start": "1818200",
    "end": "1824240"
  },
  {
    "text": "can interact with the secret Keys even stored in TPM so thanks to the RPC calls",
    "start": "1824240",
    "end": "1829440"
  },
  {
    "text": "and also the undocumented API and once your corporate device is compromised then attackers can easily",
    "start": "1829440",
    "end": "1836679"
  },
  {
    "text": "abuse them for bypassing the conditional access policies as we have seen before and for making it harder for",
    "start": "1836679",
    "end": "1843399"
  },
  {
    "text": "attackers I strongly recommend de and Harden your conditional access polies more and detect the sufficient",
    "start": "1843399",
    "end": "1849240"
  },
  {
    "text": "activities in your end point so this is all for my presentation",
    "start": "1849240",
    "end": "1854360"
  },
  {
    "text": "and if you have any questions I'll be around here so you can walk to me and ask any questions after the session or",
    "start": "1854360",
    "end": "1860679"
  },
  {
    "text": "you can send some DM to Twitter or rinkin whatever anytime so this is all",
    "start": "1860679",
    "end": "1866399"
  },
  {
    "text": "for my presentation and thank you very much for listening [Applause]",
    "start": "1866399",
    "end": "1873200"
  }
]