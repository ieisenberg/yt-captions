[
  {
    "start": "0",
    "end": "111000"
  },
  {
    "text": "[Music] [Laughter]",
    "start": "1610",
    "end": "10260"
  },
  {
    "text": "you're in a palace 3 for the breaking things track and this is the ru my type",
    "start": "10800",
    "end": "17800"
  },
  {
    "text": "presentation by James porot hi there sorry about the uh short",
    "start": "17800",
    "end": "24920"
  },
  {
    "text": "delay um computer problems so what am I here to talk about",
    "start": "24920",
    "end": "31720"
  },
  {
    "text": "I'm going to talk about uh the research I did which ultimately resulted in the Microsoft bulletin",
    "start": "31720",
    "end": "39760"
  },
  {
    "text": "ms235 and this was issues related to net binary serialization and the ability to",
    "start": "39800",
    "end": "46640"
  },
  {
    "text": "use that to attack remote services or break out of partial trust",
    "start": "46640",
    "end": "52239"
  },
  {
    "text": "sandboxes um it's also worth pointing out that actually um some of these issues have only been fixed um have only",
    "start": "52239",
    "end": "59079"
  },
  {
    "text": "been mitigated in not actually been fixed so there's still some fundamental problems in net which are sort of",
    "start": "59079",
    "end": "65400"
  },
  {
    "text": "hanging around which cannot actually be remediated and an easy",
    "start": "65400",
    "end": "70640"
  },
  {
    "text": "way so the obligatory company slide I'm afraid uh before I get on to the real",
    "start": "70640",
    "end": "75840"
  },
  {
    "text": "Tech um I work for a company called context information security outside um out of the UK we also have offices in",
    "start": "75840",
    "end": "83200"
  },
  {
    "text": "Germany and Australia uh but we basically do three three main things",
    "start": "83200",
    "end": "88640"
  },
  {
    "text": "research which obviously sort of thing is an example of uh we also do our",
    "start": "88640",
    "end": "94439"
  },
  {
    "text": "Assurance stuff which is your standard pen testing and that kind of uh typical security work and we also do response so",
    "start": "94439",
    "end": "102479"
  },
  {
    "text": "if you've been hacked we'll help come in and try and help you and uh try and work out how they got in and hopefully stop",
    "start": "102479",
    "end": "108560"
  },
  {
    "text": "them from getting in again anyway so what is",
    "start": "108560",
    "end": "113920"
  },
  {
    "start": "111000",
    "end": "111000"
  },
  {
    "text": "calization it's uh sort of a mechanism to transform a data structure of some",
    "start": "113920",
    "end": "119600"
  },
  {
    "text": "form into which can be then stored and transmitted and then later recreated at",
    "start": "119600",
    "end": "124680"
  },
  {
    "text": "another time or location um so being a quote who said",
    "start": "124680",
    "end": "129800"
  },
  {
    "text": "that well I just said that because I couldn't find a better quote than",
    "start": "129800",
    "end": "134879"
  },
  {
    "start": "134000",
    "end": "134000"
  },
  {
    "text": "that so why would we care what what is it about calization which might be a bad",
    "start": "134879",
    "end": "140480"
  },
  {
    "text": "thing security wise well we only have to look at other Technologies to sort of",
    "start": "140480",
    "end": "145840"
  },
  {
    "text": "demonstrate uh the potential risks involved in serialization mechanisms so you have almost the canonical example",
    "start": "145840",
    "end": "152720"
  },
  {
    "text": "of serialization vulnerabilities in Java I'm sure most people here probably everybody here knows about sort of java",
    "start": "152720",
    "end": "159400"
  },
  {
    "text": "serialization issues if you were here in 2009 you may have seen the presentation on attacking",
    "start": "159400",
    "end": "166720"
  },
  {
    "text": "interoperability done by sort of the ibmx force team uh about Comm serialization",
    "start": "166720",
    "end": "172360"
  },
  {
    "text": "issues and also PHP is another example there's an unserialized method you can call and if the untrusted data gets sent",
    "start": "172360",
    "end": "179599"
  },
  {
    "text": "to that uh method potentially bad things can happen now do net being quite a big",
    "start": "179599",
    "end": "187560"
  },
  {
    "start": "184000",
    "end": "184000"
  },
  {
    "text": "framework has a number of different uh serialization mechanisms sort of built into the",
    "start": "187560",
    "end": "193319"
  },
  {
    "text": "framework uh first and foremost is is the I format of serializers so binary and soap and they they've been around",
    "start": "193319",
    "end": "200200"
  },
  {
    "text": "since the very first version of net and also included in version one was the XO calization mechanisms and this is a bit",
    "start": "200200",
    "end": "207920"
  },
  {
    "text": "more sort of binary ization is very very powerful and which is sort of why I'm talking about it xmo calization is",
    "start": "207920",
    "end": "214680"
  },
  {
    "text": "considerably less powerful you can only create public types very very limited but in the scenarios in which you want",
    "start": "214680",
    "end": "221360"
  },
  {
    "text": "to use it for it's quite quite useful and so there's some others uh as part of version three Windows communication",
    "start": "221360",
    "end": "227840"
  },
  {
    "text": "Foundation introduced the data contractor serializers and 3.5 also had a built-in Json",
    "start": "227840",
    "end": "235560"
  },
  {
    "start": "235000",
    "end": "235000"
  },
  {
    "text": "serializer but as I've said before I'm here to talk about B serialization now this is sort of baked in to The NET",
    "start": "236599",
    "end": "243360"
  },
  {
    "text": "Framework basically the sort of special support for it but not every object can",
    "start": "243360",
    "end": "248560"
  },
  {
    "text": "be serialized if you for example were had a reference to say a file or some",
    "start": "248560",
    "end": "254640"
  },
  {
    "text": "unmanaged resource it's not something you can just serialize so um at which",
    "start": "254640",
    "end": "259959"
  },
  {
    "text": "point you actually have to say I actually want my C type or Visual Basic",
    "start": "259959",
    "end": "266440"
  },
  {
    "text": "type to be serializable and to do this you must specify an annotation on that class",
    "start": "266440",
    "end": "272919"
  },
  {
    "text": "which basically says hey I approve this for serialization and I will take responsibility for",
    "start": "272919",
    "end": "278720"
  },
  {
    "text": "it so this is some very simple code which represents how you would actually",
    "start": "278720",
    "end": "284199"
  },
  {
    "start": "279000",
    "end": "279000"
  },
  {
    "text": "do binary serialization and as you can see there's actually not much to it you create a a binary format instance and",
    "start": "284199",
    "end": "291800"
  },
  {
    "text": "you then just push the object you want to serialize into it and out comes a binary blob of data so you can see why",
    "start": "291800",
    "end": "300000"
  },
  {
    "text": "it's its power its flexibility is quite high and obviously that can lead to uh",
    "start": "300000",
    "end": "305560"
  },
  {
    "text": "substantial misuse if uh if it's not taken care of now the end process of that as I say",
    "start": "305560",
    "end": "312199"
  },
  {
    "text": "is a binary blob of data and this is sort of a rough representation of that",
    "start": "312199",
    "end": "317520"
  },
  {
    "text": "class previously uh which we serialized so the binary data itself contains uh",
    "start": "317520",
    "end": "323360"
  },
  {
    "text": "the name of a library so this is the dll effectively which hosted that type",
    "start": "323360",
    "end": "329960"
  },
  {
    "text": "you then have a type name so this was the serializable class so that's recorded in",
    "start": "329960",
    "end": "335039"
  },
  {
    "text": "there each field then is represented so each basically um variable um member",
    "start": "335039",
    "end": "341960"
  },
  {
    "text": "variable you can specify in the class is then represented by a named value and then finally in this case the hello",
    "start": "341960",
    "end": "348479"
  },
  {
    "text": "world string is stored as a as a straight binary blob in there but of",
    "start": "348479",
    "end": "355720"
  },
  {
    "start": "353000",
    "end": "353000"
  },
  {
    "text": "course it's potentially it is a potentially dangerous operation the binary formatter can access private",
    "start": "355720",
    "end": "362240"
  },
  {
    "text": "types private fields of an object and manipulate that and fill it could fill it with junk data so if",
    "start": "362240",
    "end": "370160"
  },
  {
    "text": "you were to use binary formata in some sort of untrusted scenario so for",
    "start": "370160",
    "end": "375440"
  },
  {
    "text": "example you were reading values you're reading B stream off a socket and pushing through binary form matter",
    "start": "375440",
    "end": "382080"
  },
  {
    "text": "there's always a risk that there could be actually a security issue with that but surely the only time that's ever",
    "start": "382080",
    "end": "389160"
  },
  {
    "text": "going to be problem is you get your object back and your badly written code",
    "start": "389160",
    "end": "394520"
  },
  {
    "text": "does something stupid with that resulting object but it turns out that's not",
    "start": "394520",
    "end": "400080"
  },
  {
    "text": "necessarily going to be the case so the framework potentially has",
    "start": "400080",
    "end": "407400"
  },
  {
    "text": "mechanisms whereby code will execute during the process of deserialization and so in this",
    "start": "407400",
    "end": "413960"
  },
  {
    "text": "particular case this bit of code which is doing derealization you've T taken potentially",
    "start": "413960",
    "end": "419120"
  },
  {
    "text": "untrust input into the system and before you've even had an opportunity to stop",
    "start": "419120",
    "end": "424720"
  },
  {
    "text": "that deserialization process happening you've already been done over and that's",
    "start": "424720",
    "end": "429840"
  },
  {
    "text": "the sort of potentially risky scenario of of using this",
    "start": "429840",
    "end": "435639"
  },
  {
    "start": "435000",
    "end": "435000"
  },
  {
    "text": "mechanism so one potential way that code can execute is by leveraging the custom",
    "start": "436240",
    "end": "442960"
  },
  {
    "text": "serialization functionality sometimes you may not be able to specify exactly",
    "start": "442960",
    "end": "449199"
  },
  {
    "text": "what you want to do just using the sort of default mechanism the default mechanism will just take each of your",
    "start": "449199",
    "end": "454879"
  },
  {
    "text": "member variables and serialize those individually into the binary stream but sometimes that's not actually what you",
    "start": "454879",
    "end": "461759"
  },
  {
    "text": "want so one of the mechanisms the framework provides is you can implement this I serializable interface and this",
    "start": "461759",
    "end": "469120"
  },
  {
    "text": "interface allows you to specify custom serialization and deserialization code",
    "start": "469120",
    "end": "475680"
  },
  {
    "text": "to run at that point of the process and in this case you've imp mented the get",
    "start": "475680",
    "end": "480720"
  },
  {
    "text": "object data method which is run on serialization and you get a dictionary of uh key value pairs you can fill in",
    "start": "480720",
    "end": "487599"
  },
  {
    "text": "with whatever data you like and then on the other side you implement a default a special",
    "start": "487599",
    "end": "494199"
  },
  {
    "start": "490000",
    "end": "490000"
  },
  {
    "text": "Constructor which again takes that object and manually deserializes your object but you can see how potentially",
    "start": "494199",
    "end": "500800"
  },
  {
    "text": "if there's dangerous code in that uh interface",
    "start": "500800",
    "end": "505960"
  },
  {
    "text": "implementation something bad could happen just by the process of deriz",
    "start": "505960",
    "end": "511440"
  },
  {
    "text": "ation so I did what anyone would do I wrote a program to basically hunt for",
    "start": "512320",
    "end": "518479"
  },
  {
    "text": "bad stuff so in this case I wrote a tool first and foremost to go searching for",
    "start": "518479",
    "end": "523719"
  },
  {
    "text": "serializable types and this is just an example of of five of the main libraries in the",
    "start": "523720",
    "end": "529519"
  },
  {
    "text": "framework and sort of the rough counts of the V of the number of classes which are serializable so for example mscore",
    "start": "529519",
    "end": "537200"
  },
  {
    "text": "lib which is like the basic Library you have to have it in every net application is has about 681",
    "start": "537200",
    "end": "544640"
  },
  {
    "text": "serializable classes now considering there's only about 1,800 classes in the entire Library that's a fair proportion",
    "start": "544640",
    "end": "552240"
  },
  {
    "text": "over a third of the classes is serializable now of those serializable",
    "start": "552240",
    "end": "558040"
  },
  {
    "text": "classes 268 have custom serialization mechanisms which might mean some you could do",
    "start": "558040",
    "end": "564480"
  },
  {
    "text": "something bad if you can find something bad in there now there's also other mechanisms for example callback so",
    "start": "564480",
    "end": "569720"
  },
  {
    "text": "there's General sort of on deserialization run this bit of code do some checking that sort of stuff and",
    "start": "569720",
    "end": "575959"
  },
  {
    "text": "there's also finalization now finalization is effectively destructors in the sort of C++ idea but for uh net",
    "start": "575959",
    "end": "585079"
  },
  {
    "text": "and you'll see the similar if you know Java quite well you'll probably have encountered these as well and these are",
    "start": "585079",
    "end": "590120"
  },
  {
    "text": "bits of code which will run to make sure you can clean up all your manage resources uh before the object gets",
    "start": "590120",
    "end": "596200"
  },
  {
    "text": "disposed of in the garbage collector so in this case was two in mscore",
    "start": "596200",
    "end": "602320"
  },
  {
    "start": "602000",
    "end": "602000"
  },
  {
    "text": "lib so let's actually go into finding some stuff which does something nasty if I just want to start and just",
    "start": "602320",
    "end": "609519"
  },
  {
    "text": "be malicious well this class kind of fills in that um that",
    "start": "609519",
    "end": "615920"
  },
  {
    "text": "requirement so you've got this class called temp file collection and it contains a list of uh file names which",
    "start": "615920",
    "end": "623600"
  },
  {
    "text": "are the output of a compilation process so for example you can compile",
    "start": "623600",
    "end": "629399"
  },
  {
    "text": "some sort of source code and it generates temporary files which it keeps a collection of and makes sure that they",
    "start": "629399",
    "end": "634640"
  },
  {
    "text": "get deleted at some point in the future no guarantee when but it will definitely do it at some point in the future now",
    "start": "634640",
    "end": "640839"
  },
  {
    "text": "this implements a finalizer and the thing the finalizer does is basically just walk through this list of files and",
    "start": "640839",
    "end": "646720"
  },
  {
    "text": "deletes them so if an attacker can can serialize a list of files in there and",
    "start": "646720",
    "end": "652040"
  },
  {
    "text": "hand it to you then when that object goes away it's going to start deleting arbit files on your file system even",
    "start": "652040",
    "end": "658560"
  },
  {
    "text": "though you haven't actually interactive with the object at all so I'm just going to do a",
    "start": "658560",
    "end": "664560"
  },
  {
    "start": "662000",
    "end": "662000"
  },
  {
    "text": "demonstration hopefully CH me this",
    "start": "664560",
    "end": "669399"
  },
  {
    "text": "works uh possibly okay so this is on Windows 7",
    "start": "670160",
    "end": "679399"
  },
  {
    "text": "and I've got a serialized temp file collection class and right at the bottom",
    "start": "679399",
    "end": "686160"
  },
  {
    "text": "this is our file we're going to delete important data. text on my",
    "start": "686160",
    "end": "692720"
  },
  {
    "text": "desktop which is sitting there waiting to be uh be",
    "start": "692720",
    "end": "699120"
  },
  {
    "text": "molested so if I run this bad application so this bad application just takes a file and pushes it through",
    "start": "699360",
    "end": "705560"
  },
  {
    "text": "binary format it could have been a socket application or or any other sort of type of application which will take",
    "start": "705560",
    "end": "711600"
  },
  {
    "text": "an arbitary binary stream and if we load that file from the",
    "start": "711600",
    "end": "717040"
  },
  {
    "text": "desktop it says we got a temp file collection",
    "start": "717040",
    "end": "723600"
  },
  {
    "text": "object back that's great but it doesn't seem to have worked the file is still sitting there well that's because the",
    "start": "723600",
    "end": "730440"
  },
  {
    "text": "finalizer isn't going to run immediately it waits until the garbage collector actually picks up and decides to destroy",
    "start": "730440",
    "end": "736040"
  },
  {
    "text": "that object but if we actually close the application our file has now been",
    "start": "736040",
    "end": "741560"
  },
  {
    "text": "deleted because it has to have run the finalizer to make sure everything is been cleaned up",
    "start": "741560",
    "end": "747480"
  },
  {
    "text": "appropriately okay",
    "start": "747480",
    "end": "751160"
  },
  {
    "text": "so there must be ways of protecting against this well you can be a bit more defensive in your in your development of",
    "start": "753440",
    "end": "760000"
  },
  {
    "text": "any application which uses binary form matter and one of the ways is you can specify this special serialization",
    "start": "760000",
    "end": "765920"
  },
  {
    "text": "binder class which allows you to basically just say I accept these types are valid and these types are",
    "start": "765920",
    "end": "772680"
  },
  {
    "text": "not and the big one is just don't trust binary form matter with with data coming",
    "start": "772680",
    "end": "778600"
  },
  {
    "text": "from the outside world and you can also use plenty of other stuff as as I've shown with the",
    "start": "778600",
    "end": "784480"
  },
  {
    "text": "previous slide there's a number of calization Technologies present in net there's things like protuff net which",
    "start": "784480",
    "end": "790360"
  },
  {
    "text": "came out of Google so there's plenty of other other techniques you can use for",
    "start": "790360",
    "end": "796040"
  },
  {
    "text": "serialization but of course you've done all this you've removed the uh use of",
    "start": "796040",
    "end": "801839"
  },
  {
    "text": "binary formatter you've say used Proto buff instead so you're safe there's no",
    "start": "801839",
    "end": "808079"
  },
  {
    "text": "possible way you can be act well because it's such a fundamental uh serialization primitive",
    "start": "808079",
    "end": "815680"
  },
  {
    "text": "it's also used in a few other ver Technologies which have been around since the very first version of net so",
    "start": "815680",
    "end": "822360"
  },
  {
    "text": "if you're using net remoting for example you may be at risk or if you're using partial trust sandboxes you may be at",
    "start": "822360",
    "end": "829480"
  },
  {
    "text": "risk and this is all happening inside the framework you don't even actually see it you don't have any reference to",
    "start": "829480",
    "end": "836160"
  },
  {
    "text": "Binary formatter in your code but in fact you're actually using it or without um any actual",
    "start": "836160",
    "end": "843560"
  },
  {
    "start": "842000",
    "end": "842000"
  },
  {
    "text": "knowledge so let's go a bit into how net remoting actually works because the first thing I'm going to look at is",
    "start": "843920",
    "end": "850079"
  },
  {
    "text": "actually attacking remoting services so remoting Services has the",
    "start": "850079",
    "end": "855399"
  },
  {
    "text": "concept of these application domains these are built into net they're fundamental net objects part of the the",
    "start": "855399",
    "end": "861720"
  },
  {
    "text": "framework itself and act as isolation mechanisms for objects you cannot",
    "start": "861720",
    "end": "867440"
  },
  {
    "text": "directly pass an object from one app domain to another without any other sort of mechanism in order to achieve that",
    "start": "867440",
    "end": "873880"
  },
  {
    "text": "that feat now if you want to actually talk to a remote object so imagine one of these",
    "start": "873880",
    "end": "879839"
  },
  {
    "text": "domains is actually sitting on a system somewhere the other side of the world",
    "start": "879839",
    "end": "884920"
  },
  {
    "text": "for example connected over the Internet it will be publishing some sort of well-known service on a say a TCP",
    "start": "884920",
    "end": "894320"
  },
  {
    "text": "port24 and another app domain wants to do some work on that so it creates first that TCP channel to act",
    "start": "894920",
    "end": "902680"
  },
  {
    "text": "as the communication carrier and then it has to package up all the request data so it has to know",
    "start": "902680",
    "end": "909440"
  },
  {
    "text": "who it's going to talk talk to at the other side and also all the parameters have to be packaged up as well so it",
    "start": "909440",
    "end": "916199"
  },
  {
    "text": "packages that up sends it across the link and the well-known service will unwrap that and action that particular",
    "start": "916199",
    "end": "923240"
  },
  {
    "text": "function call then obviously it's a symmetric process so you can pass it back any",
    "start": "923240",
    "end": "929319"
  },
  {
    "text": "return value gets thrown back across the link and there is your remote call but",
    "start": "929319",
    "end": "935639"
  },
  {
    "text": "that does still leave the question how parameters themselves get across the link because I've already said that an",
    "start": "935639",
    "end": "941279"
  },
  {
    "start": "936000",
    "end": "936000"
  },
  {
    "text": "app domain you can't pass objects directly between app domains so in this case there's actually",
    "start": "941279",
    "end": "946759"
  },
  {
    "text": "two ways in which you can pass objects which are built into the framework and if you've used any other sort of",
    "start": "946759",
    "end": "952360"
  },
  {
    "text": "remoting technology such as RMI in Java you're probably very familiar with this sort of concept so the first is martial",
    "start": "952360",
    "end": "959519"
  },
  {
    "text": "by reference so in this case your object never actually leaves your app domain",
    "start": "959519",
    "end": "965959"
  },
  {
    "text": "but what it does do is it creates a special object which has all the information to refer back to the",
    "start": "965959",
    "end": "972000"
  },
  {
    "text": "original value it is actually then that which gets converted to some binary blob and",
    "start": "972000",
    "end": "978040"
  },
  {
    "text": "passed across the link where it can create a proxy object to talk back to the original object in your acon name",
    "start": "978040",
    "end": "985800"
  },
  {
    "text": "but sometimes that's not appropriate so there's another way of do doing it you can if your object is serializable then",
    "start": "985800",
    "end": "992759"
  },
  {
    "start": "988000",
    "end": "988000"
  },
  {
    "text": "it will actually get directly converted to a binary blob and when they gets ped across the link it actually recreates a",
    "start": "992759",
    "end": "1000600"
  },
  {
    "text": "copy of that object at the other side so any then function calls on that object will be local to that app domain but",
    "start": "1000600",
    "end": "1007519"
  },
  {
    "text": "obviously I've talked about binary calization you can kind of guess what technology it uses to do this uh binary",
    "start": "1007519",
    "end": "1014199"
  },
  {
    "text": "transformation so we had the malicious just the general",
    "start": "1014199",
    "end": "1021079"
  },
  {
    "start": "1016000",
    "end": "1016000"
  },
  {
    "text": "malicious attack deleting files on your file system so let's go for something a bit more active um because it's a remote",
    "start": "1021079",
    "end": "1028240"
  },
  {
    "text": "service we may want to actually try and do something particularly nasty to it so in this case I found a class called file",
    "start": "1028240",
    "end": "1035678"
  },
  {
    "text": "info now file info as its name might suggest provides information about a file and it contains things like its",
    "start": "1035679",
    "end": "1042600"
  },
  {
    "text": "path and its file size all that sort of stuff but during its custom",
    "start": "1042600",
    "end": "1047678"
  },
  {
    "text": "deserialization process it first has to make sure that path is canonicalized so in to in order to get",
    "start": "1047679",
    "end": "1053960"
  },
  {
    "text": "rid of dot do slash and all that sort of stuff it basically canonizes the path now it does this in a really really sort",
    "start": "1053960",
    "end": "1059760"
  },
  {
    "text": "of simple way and just try try it doesn't touch the file system or it shouldn't touch the file",
    "start": "1059760",
    "end": "1065720"
  },
  {
    "start": "1065000",
    "end": "1065000"
  },
  {
    "text": "system but this is actually a very simplified version of that that code it",
    "start": "1065720",
    "end": "1070919"
  },
  {
    "text": "basically splits the path into individual components and if one of those components starts with the tier",
    "start": "1070919",
    "end": "1077000"
  },
  {
    "text": "character it assumes that perhaps that file name is actually a short path so a 8.3 window short short",
    "start": "1077000",
    "end": "1084960"
  },
  {
    "text": "file name so in order to make sure it's got the definitely correct path it pushes it",
    "start": "1084960",
    "end": "1091000"
  },
  {
    "text": "Through the Windows API of get long path name now get long path name has to refer",
    "start": "1091000",
    "end": "1098720"
  },
  {
    "text": "to the original to the actual file system because otherwise how is it going to do that",
    "start": "1098720",
    "end": "1104159"
  },
  {
    "text": "translation so what if we passed in a file name of SL eval SL tier share for",
    "start": "1104159",
    "end": "1109760"
  },
  {
    "text": "example well what that ends up doing is your application starts making SMB",
    "start": "1109760",
    "end": "1115640"
  },
  {
    "text": "requests back out and there's plenty of you can go to",
    "start": "1115640",
    "end": "1121000"
  },
  {
    "text": "met exploit load up the smv relay module and you can then potentially exploit this so you can either reflect do",
    "start": "1121000",
    "end": "1127640"
  },
  {
    "text": "credential reflection back to the uh person who generated that request or at",
    "start": "1127640",
    "end": "1133360"
  },
  {
    "text": "least you used to be able to or you could relay that authentication mechanism to another system on a domain",
    "start": "1133360",
    "end": "1139039"
  },
  {
    "text": "and attack something else that way but nothing is ever",
    "start": "1139039",
    "end": "1146280"
  },
  {
    "text": "simple this entire process was anticipated by the original designers of",
    "start": "1146280",
    "end": "1151880"
  },
  {
    "text": "The NET Framework so this is a page in msdm",
    "start": "1151880",
    "end": "1157559"
  },
  {
    "text": "and basically the first sentence is it's basically saying in order to actually",
    "start": "1157559",
    "end": "1164159"
  },
  {
    "text": "work out whether the parameters you're passing are valid you must have deserialized these parameters and so you've got kind of a chicken egg problem",
    "start": "1164159",
    "end": "1171039"
  },
  {
    "text": "and you could end up with automatic deserialization and as it quotes might try to exploit the moment of",
    "start": "1171039",
    "end": "1176840"
  },
  {
    "text": "deserialization and you can you guaranteed that's exactly what I want to try and",
    "start": "1176840",
    "end": "1182679"
  },
  {
    "text": "do so it implements type filtering so when I try and send my dodgy file info",
    "start": "1182679",
    "end": "1188280"
  },
  {
    "text": "class across the link well the remote server just says no it doesn't match up",
    "start": "1188280",
    "end": "1193840"
  },
  {
    "text": "with a set of rules it has in the framework which says these are valid objects to D",
    "start": "1193840",
    "end": "1200640"
  },
  {
    "text": "serialized so we need a way of bypassing this and one of the things I found to do",
    "start": "1200640",
    "end": "1205679"
  },
  {
    "start": "1201000",
    "end": "1201000"
  },
  {
    "text": "this is the data set class now the data set class is a inmemory database it can",
    "start": "1205679",
    "end": "1212400"
  },
  {
    "text": "contain multiple tables but it has to do some clever manipulation of its serialization in order to handle the",
    "start": "1212400",
    "end": "1219440"
  },
  {
    "text": "fact that it's able to serialize its tables both as XML and as binary",
    "start": "1219440",
    "end": "1225159"
  },
  {
    "text": "blobs so what it does is it does serialization a two-step process so for",
    "start": "1225159",
    "end": "1230440"
  },
  {
    "text": "example in this case we have a data set the star represents like our bad file info and the first thing the data set",
    "start": "1230440",
    "end": "1237679"
  },
  {
    "text": "does is serialize that file info to a binary stream it then actually stores",
    "start": "1237679",
    "end": "1243840"
  },
  {
    "text": "that in its outer wrapper serialized wrapper and it's that which gets passed",
    "start": "1243840",
    "end": "1249120"
  },
  {
    "text": "across the link and when the deserialization process it um gets processed in the type",
    "start": "1249120",
    "end": "1255440"
  },
  {
    "text": "filtering binary formatter in fact all it serializes is an array of bites which",
    "start": "1255440",
    "end": "1260760"
  },
  {
    "text": "is perfectly legitimate for um the secure lock down system but",
    "start": "1260760",
    "end": "1266880"
  },
  {
    "text": "then the actual data set der serialization code kicks in it creates a privileged binary formatter and proceeds",
    "start": "1266880",
    "end": "1274080"
  },
  {
    "text": "to De serialize your file info class which then ends up you doing an SMB request out and potentially doing",
    "start": "1274080",
    "end": "1280120"
  },
  {
    "text": "something nasty so I'm going to demo it it's got It's a demo on xps2 just because that's",
    "start": "1280120",
    "end": "1286840"
  },
  {
    "text": "prior to the fix Microsoft uh on SMB reflection it just makes the",
    "start": "1286840",
    "end": "1291919"
  },
  {
    "text": "demo look slightly nicer um but you can still use it for things like information gathering because it will go out and say",
    "start": "1291919",
    "end": "1297880"
  },
  {
    "text": "who's actually run that piece of code or you can use it to sort of like Brute Force passwords if they're still running",
    "start": "1297880",
    "end": "1304480"
  },
  {
    "text": "operating systems generating the landman hashes",
    "start": "1304480",
    "end": "1309720"
  },
  {
    "text": "so uh I have here my xps2 machine",
    "start": "1309720",
    "end": "1319200"
  },
  {
    "text": "expand that out slightly and on this machine I'm running",
    "start": "1319200",
    "end": "1326240"
  },
  {
    "text": "a very very simple server I think there's the actual remoting code is about five lines something like that so",
    "start": "1326240",
    "end": "1333279"
  },
  {
    "text": "there's no actual implicit sort of functionality being used which says I'm using binary",
    "start": "1333279",
    "end": "1340000"
  },
  {
    "text": "formatter so if I uh",
    "start": "1340000",
    "end": "1345600"
  },
  {
    "text": "if I actually run up a client for this so This is actually running under mono because mono",
    "start": "1348840",
    "end": "1354640"
  },
  {
    "text": "implements basically um pretty much everything um according to the",
    "start": "1354640",
    "end": "1360039"
  },
  {
    "text": "standards and so I can always I can just to",
    "start": "1360039",
    "end": "1367080"
  },
  {
    "text": "demonstrate it's actually working let me send just a simple message to the",
    "start": "1367080",
    "end": "1375520"
  },
  {
    "text": "server and it says hello black cap on our",
    "start": "1375520",
    "end": "1380440"
  },
  {
    "text": "so instead we want to um we want to run this SMB relay so",
    "start": "1380880",
    "end": "1388320"
  },
  {
    "text": "I've got a copy of met sploit running running the SMB relay uh exploit",
    "start": "1388320",
    "end": "1394600"
  },
  {
    "text": "payload so if we oops we go back to here and in this case",
    "start": "1394600",
    "end": "1402279"
  },
  {
    "text": "we send our file info class so",
    "start": "1402279",
    "end": "1407440"
  },
  {
    "text": "108.1 so this is pointing back to the uh machine I'm hosting this on if we send a",
    "start": "1407440",
    "end": "1414400"
  },
  {
    "text": "request now suddenly start seeing loads of stuff going on in the metp session and we get C to",
    "start": "1414400",
    "end": "1420400"
  },
  {
    "text": "appear so fairly",
    "start": "1420400",
    "end": "1425278"
  },
  {
    "start": "1430000",
    "end": "1430000"
  },
  {
    "text": "simple so again how can you protect against this well the main one or the certainly the Microsoft recommendation",
    "start": "1430799",
    "end": "1437279"
  },
  {
    "text": "is just don't use net remoting net remoting is considered to be an obsolete technology and so Windows communication",
    "start": "1437279",
    "end": "1444200"
  },
  {
    "text": "Foundation is the way to go also just don't expose it to the internet you can add authentication mechanisms to it as",
    "start": "1444200",
    "end": "1450919"
  },
  {
    "text": "well to prevent just arbitary people connecting to your service but it's also worth remembering",
    "start": "1450919",
    "end": "1456720"
  },
  {
    "text": "that the process is symmetric so anything which works upwards towards the",
    "start": "1456720",
    "end": "1461880"
  },
  {
    "text": "server probably also works down as well so if you can impersonate server in some",
    "start": "1461880",
    "end": "1467640"
  },
  {
    "text": "way either booing DNS booing whatever you can then start attacking clients Instead at which point the",
    "start": "1467640",
    "end": "1474679"
  },
  {
    "text": "authentication mechanism isn't necessarily going to help",
    "start": "1474679",
    "end": "1479240"
  },
  {
    "start": "1479000",
    "end": "1479000"
  },
  {
    "text": "you so now on to the probably the most interesting bit the sort of breaking out of",
    "start": "1480159",
    "end": "1486240"
  },
  {
    "text": "sandboxes now it's interesting that basically the the infrastructure which implements net remoting is done in",
    "start": "1486240",
    "end": "1492360"
  },
  {
    "text": "exactly is used again for partial trust sandboxing that whole isolation aspect",
    "start": "1492360",
    "end": "1499000"
  },
  {
    "text": "is a very useful feature to prevent people gaining access to objects outside the boundary of our app domain and you",
    "start": "1499000",
    "end": "1505360"
  },
  {
    "text": "can also assign permission sets to these application domains which restrict the code what the code can do running in",
    "start": "1505360",
    "end": "1513799"
  },
  {
    "text": "it so what will usually happen you'll have a host domain which will create this partial trust limited permission",
    "start": "1513799",
    "end": "1521200"
  },
  {
    "text": "domain and that can then create untrusted classes coming from untrusted uh libraries somewhere",
    "start": "1521200",
    "end": "1528720"
  },
  {
    "text": "and this is used in a few Technologies so for example there's click wants and there's also Zam or browser applications",
    "start": "1528720",
    "end": "1535399"
  },
  {
    "text": "which are basically a browser hosted net",
    "start": "1535399",
    "end": "1542960"
  },
  {
    "start": "1543000",
    "end": "1543000"
  },
  {
    "text": "program now there's various different permission sets you can specify so for example you can say the code can only",
    "start": "1543279",
    "end": "1550240"
  },
  {
    "text": "access files in this directory or it can only open uh web requests to Google for",
    "start": "1550240",
    "end": "1556480"
  },
  {
    "text": "example but there's also has this common with these sort of sandboxing mechanisms there's also some God level privileges",
    "start": "1556480",
    "end": "1562919"
  },
  {
    "text": "the stuff which basically if you give it to untrusted code you may as well not have a soundbox at all so does things",
    "start": "1562919",
    "end": "1569960"
  },
  {
    "text": "like can I call arbitary Windows API functions if you can do that you can probably fairly easily break out the",
    "start": "1569960",
    "end": "1576039"
  },
  {
    "text": "sandbox but unfortunately access to serialization Services is considered one",
    "start": "1576039",
    "end": "1581520"
  },
  {
    "text": "of those God level privileges so there's no well unless you've",
    "start": "1581520",
    "end": "1587880"
  },
  {
    "text": "implemented Ed very badly your sandboxing there's very little chance you'll actually have access to",
    "start": "1587880",
    "end": "1593480"
  },
  {
    "text": "serialization in your partial trust code and that represents a problem but we know from remoting that all we actually",
    "start": "1593480",
    "end": "1600320"
  },
  {
    "text": "have to do is find some way of getting an object to transition from one of those application domains to another at",
    "start": "1600320",
    "end": "1607159"
  },
  {
    "text": "which point the framework will actually do all the work for us you'd think that would actually be",
    "start": "1607159",
    "end": "1612720"
  },
  {
    "start": "1612000",
    "end": "1612000"
  },
  {
    "text": "quite a difficult thing to achieve but it's actually not as difficult as you'd imagine because the the boundary is",
    "start": "1612720",
    "end": "1618799"
  },
  {
    "text": "fairly porous part of the use of net remoting is the fact that it's almost",
    "start": "1618799",
    "end": "1623880"
  },
  {
    "text": "transparent you don't realize you're using it but that also then leads to the fact",
    "start": "1623880",
    "end": "1629039"
  },
  {
    "text": "that you can't easily audit which bits are using umet remoting and which bits",
    "start": "1629039",
    "end": "1634200"
  },
  {
    "text": "are not so for example in this case zaml browser applications had a bug with exception",
    "start": "1634200",
    "end": "1640640"
  },
  {
    "text": "handling so the browser host would basically start creating a host",
    "start": "1640640",
    "end": "1646399"
  },
  {
    "text": "application and in order to run the code in partial trust it would have to transition across that link into the",
    "start": "1646399",
    "end": "1653159"
  },
  {
    "text": "other code now this is still then the same flow of execution but our execution goes up and",
    "start": "1653159",
    "end": "1659760"
  },
  {
    "text": "eventually leads to something we can control so in this case this is evil xbap and someone's clicking a button but",
    "start": "1659760",
    "end": "1666960"
  },
  {
    "text": "you don't actually have to have user interaction just running the code is sufficient if a piece of code creates an",
    "start": "1666960",
    "end": "1674399"
  },
  {
    "text": "exception object um exception object are already serializable",
    "start": "1674399",
    "end": "1680919"
  },
  {
    "text": "objects so it throws that and it starts going up the stack trying to find something to catch that exception to to",
    "start": "1680919",
    "end": "1688480"
  },
  {
    "text": "stop the process from crashing and it goes all the way up to the the transition point between the app",
    "start": "1688480",
    "end": "1695039"
  },
  {
    "text": "domains and the framework then goes nicely well no one in this app domain serviced that exception so maybe someone",
    "start": "1695039",
    "end": "1702519"
  },
  {
    "text": "over the other side will do it and so it czes it throws it across the link and recreates it the other side and that",
    "start": "1702519",
    "end": "1709519"
  },
  {
    "text": "gets us our roundtrip serialization and it is pretty much that simple this three lines of code is",
    "start": "1709519",
    "end": "1716519"
  },
  {
    "text": "enough to get an arbitary object roundtrip serialized in an Z browser application and this was one of the bugs",
    "start": "1716519",
    "end": "1723039"
  },
  {
    "text": "which was fixed in ms235 but there's still a",
    "start": "1723039",
    "end": "1729240"
  },
  {
    "text": "problem before we could just specify the binary stream itself so we could manipulate it in any way we liked",
    "start": "1729240",
    "end": "1735840"
  },
  {
    "text": "manipulate internal states of objects to do any anything we wanted but we can't do that from partial trust code partial",
    "start": "1735840",
    "end": "1741960"
  },
  {
    "text": "trust code is not supposed to be very privileged if you could manipulate the internal state of objects that's a bad",
    "start": "1741960",
    "end": "1748600"
  },
  {
    "text": "thing so we cannot directly provide that binary stream but there must be a way of",
    "start": "1748600",
    "end": "1753799"
  },
  {
    "text": "partial trust to manipulate that process and to do that we just have to",
    "start": "1753799",
    "end": "1760000"
  },
  {
    "start": "1758000",
    "end": "1758000"
  },
  {
    "text": "go back to our I serializable interface which has been so fruitful already one of the things the serialization custom",
    "start": "1760000",
    "end": "1767799"
  },
  {
    "text": "ser Iz ation process allows for is the ability to change your type now this might be used for example if you need to",
    "start": "1767799",
    "end": "1775120"
  },
  {
    "text": "uh transport your object as a different type across a boundary and then when you deserialize you can then recreate your",
    "start": "1775120",
    "end": "1782000"
  },
  {
    "text": "original type again so it allows you to just set your type it has a set type method but",
    "start": "1782000",
    "end": "1788880"
  },
  {
    "text": "unfortunately there's no there was no actual restriction on what type you could specify so if I wanted to create a",
    "start": "1788880",
    "end": "1796279"
  },
  {
    "text": "file info class I could just say set the type of that fill in some fake serialization data which would match up",
    "start": "1796279",
    "end": "1802799"
  },
  {
    "text": "with what it was expecting and it would it would actually deserialize to that or uh deserialize",
    "start": "1802799",
    "end": "1809519"
  },
  {
    "start": "1805000",
    "end": "1805000"
  },
  {
    "text": "into a different type to what it serialized from and this is just a sort of really simple demonstration so in our",
    "start": "1809519",
    "end": "1816399"
  },
  {
    "text": "partial trust domain we have our exception and imagine our Green Dot is our custom serializable class it gets",
    "start": "1816399",
    "end": "1823600"
  },
  {
    "text": "packaged up it's changed its type and actually now on the other side it's become a completely different type to",
    "start": "1823600",
    "end": "1829279"
  },
  {
    "text": "what you put in now we could use this for various",
    "start": "1829279",
    "end": "1836080"
  },
  {
    "text": "things we can obviously do it the SMB reflection stuff but let's face it that's not exactly the most interesting",
    "start": "1836080",
    "end": "1841519"
  },
  {
    "text": "things to do especially as it's not something you can easily do now with the fix on",
    "start": "1841519",
    "end": "1846640"
  },
  {
    "text": "reflection so I wanted a different way what if I could get hold of that object if I've just created a potentially",
    "start": "1846640",
    "end": "1852559"
  },
  {
    "text": "corrupt and manipulated object if I can get it back and core methods on it because my part I got co- running in",
    "start": "1852559",
    "end": "1859720"
  },
  {
    "text": "partial trust perhaps I can do something with that and so I found a class which just",
    "start": "1859720",
    "end": "1866039"
  },
  {
    "text": "did that for me the evidence-based class was added in net 4 and is used to",
    "start": "1866039",
    "end": "1871639"
  },
  {
    "text": "formalize the the mechanism of evidence I'm not I unfortunately don't have the time to actually describe what evidence is but it's basically sort of a use for",
    "start": "1871639",
    "end": "1878840"
  },
  {
    "text": "trust decisions and it's marked as serializable but it also implements a method to do a deep clone of that object",
    "start": "1878840",
    "end": "1885799"
  },
  {
    "text": "because it might need to copy these objects around a bit so this is the entire code for the",
    "start": "1885799",
    "end": "1893159"
  },
  {
    "start": "1890000",
    "end": "1890000"
  },
  {
    "text": "Clone method and it looks fairly similar to code I've already shown up on the uh",
    "start": "1893159",
    "end": "1900080"
  },
  {
    "text": "at the presentation so it's serializing the current object into a stream and",
    "start": "1900080",
    "end": "1905159"
  },
  {
    "text": "then basically pushing that back through the binary format to spit out a new copy of that",
    "start": "1905159",
    "end": "1910679"
  },
  {
    "text": "object but this wouldn't have necessarily been a problem because if I called that because of the way net",
    "start": "1910679",
    "end": "1917080"
  },
  {
    "text": "security works if the caller of that method didn't have permissions to do civilization it",
    "start": "1917080",
    "end": "1922159"
  },
  {
    "text": "wouldn't actually make a difference but unfortunately it was annotated with a special override which basically says",
    "start": "1922159",
    "end": "1928960"
  },
  {
    "text": "actually no no matter what people call me as I don't care what their permission was assume I have serialization",
    "start": "1928960",
    "end": "1936559"
  },
  {
    "text": "permissions so that's a bit of a security problem so exploiting it is very simple",
    "start": "1936559",
    "end": "1943639"
  },
  {
    "start": "1941000",
    "end": "1941000"
  },
  {
    "text": "if I derive a class from evidence base just create a new class fill it with a",
    "start": "1943639",
    "end": "1948960"
  },
  {
    "text": "member variable which contains the object we want to get back but the custom serializable one so it will craft",
    "start": "1948960",
    "end": "1954600"
  },
  {
    "text": "it if we called a clone method the roundtrip calization process will ensure",
    "start": "1954600",
    "end": "1960279"
  },
  {
    "text": "that in our own domain we've managed to get hold of that corrupt object and",
    "start": "1960279",
    "end": "1965440"
  },
  {
    "text": "that's then we can do something with it so the fill in the final piece of the",
    "start": "1965440",
    "end": "1973159"
  },
  {
    "text": "puzzle in terms of getting remote code execution the breaking out of a Sandbox we need a type which we can corrupt in",
    "start": "1973159",
    "end": "1979159"
  },
  {
    "text": "such a way that it causes the security problem and for this I chose delegates",
    "start": "1979159",
    "end": "1984519"
  },
  {
    "text": "now delegates are something which is sort of been built in since day one of the net runtime effectively are just",
    "start": "1984519",
    "end": "1990440"
  },
  {
    "text": "sort of fancy uh function pointers but they have special um special treatment",
    "start": "1990440",
    "end": "1996760"
  },
  {
    "text": "in the framework for performance reasons they effectively boil down to when they're jitted to straight function",
    "start": "1996760",
    "end": "2004639"
  },
  {
    "text": "calls but it's also serializable which which makes it very very",
    "start": "2004639",
    "end": "2011000"
  },
  {
    "start": "2010000",
    "end": "2010000"
  },
  {
    "text": "interesting especially as it also has an interesting property called multicasting now a delegate can Will normally just",
    "start": "2011000",
    "end": "2018799"
  },
  {
    "text": "represent one call to one sort of method as sort of standard function pointer so",
    "start": "2018799",
    "end": "2024240"
  },
  {
    "text": "in this case we've got a uh type of our uh delegate which is taking a um",
    "start": "2024240",
    "end": "2030760"
  },
  {
    "text": "word-sized integer pointer but what we can do is we can",
    "start": "2030760",
    "end": "2036399"
  },
  {
    "text": "actually join multiple Del together into one single delegate and then when we call that method both those functions",
    "start": "2036399",
    "end": "2043120"
  },
  {
    "text": "gets called one after another with the same parameter but what if we could actually",
    "start": "2043120",
    "end": "2049919"
  },
  {
    "text": "specify two different types of these delegates so in this case we now have a string delegate which takes a string but",
    "start": "2049919",
    "end": "2055720"
  },
  {
    "text": "we also have our pointer one we try and combine those together and the framework says no because having those two types",
    "start": "2055720",
    "end": "2062760"
  },
  {
    "text": "would cause type aling issues which basically could be exploited",
    "start": "2062760",
    "end": "2068240"
  },
  {
    "start": "2068000",
    "end": "2068000"
  },
  {
    "text": "but what happens when we we do a serialized delegate what will this do if I actually",
    "start": "2068240",
    "end": "2073760"
  },
  {
    "text": "call this method well it turns out it will do that so this is dump out of wind debug",
    "start": "2073760",
    "end": "2082760"
  },
  {
    "start": "2076000",
    "end": "2076000"
  },
  {
    "text": "in this case ECX points to that fake value we specified because basically it's been passed on the stack there's",
    "start": "2082760",
    "end": "2088638"
  },
  {
    "text": "been a type confusion issue and so effectively you've now just got a string which is represented by the pointer of 1",
    "start": "2088639",
    "end": "2095280"
  },
  {
    "text": "2 3 4 5 6 7 8 that ultimately leads to a vtable lookup and call and you can see",
    "start": "2095280",
    "end": "2102240"
  },
  {
    "text": "from the stack that it's clearly massively confused as to what it's supposed to be doing it's calling",
    "start": "2102240",
    "end": "2107400"
  },
  {
    "text": "through an in poter delegate into a string method and that shouldn't",
    "start": "2107400",
    "end": "2113240"
  },
  {
    "text": "happen so I'm just going to do a demonstration of that in Click once so using the evidence-base",
    "start": "2113240",
    "end": "2120240"
  },
  {
    "text": "class uh come",
    "start": "2120240",
    "end": "2125280"
  },
  {
    "text": "on so we start this",
    "start": "2126119",
    "end": "2133400"
  },
  {
    "text": "up make sure I have my web server running otherwise it's not going to do very",
    "start": "2140560",
    "end": "2145839"
  },
  {
    "text": "much",
    "start": "2145839",
    "end": "2148839"
  },
  {
    "text": "okay so if we run this from the browser we get various dialogues as it",
    "start": "2152319",
    "end": "2157440"
  },
  {
    "text": "as it it starts up but basically this is going to be uh creating a application on",
    "start": "2157440",
    "end": "2162640"
  },
  {
    "text": "the desktop which is running with a heavily restricted permission set and you actually see this being used uh even",
    "start": "2162640",
    "end": "2169720"
  },
  {
    "text": "now for example if you install Google Chrome via IE it will actually use this",
    "start": "2169720",
    "end": "2174800"
  },
  {
    "text": "click WS mechanism to drop the installer on your system and install Chrome for you so obviously there's a there is a",
    "start": "2174800",
    "end": "2181480"
  },
  {
    "text": "warning dialogue associated with that but we also get this big flag don't type your passwords into this application",
    "start": "2181480",
    "end": "2187680"
  },
  {
    "text": "it's probably malicious we can see a big go",
    "start": "2187680",
    "end": "2194000"
  },
  {
    "text": "button so this go button will effectively go and kick off the evidence-based vulnerability run some",
    "start": "2194000",
    "end": "2199839"
  },
  {
    "text": "Shell Code by doing some corrupt delegates type aliasing all that sort of stuff and we end up with",
    "start": "2199839",
    "end": "2207720"
  },
  {
    "text": "[Applause]",
    "start": "2208660",
    "end": "2211770"
  },
  {
    "start": "2215000",
    "end": "2215000"
  },
  {
    "text": "C but it doesn't really end there evidence base is a bug it's clear bug",
    "start": "2215079",
    "end": "2221480"
  },
  {
    "text": "you shouldn't be able to either the method shouldn't have asserted the serialization permissions or you",
    "start": "2221480",
    "end": "2227960"
  },
  {
    "text": "shouldn't have been able to derive your own object from it if you're coming from partial trust code and it was fixed it was fixed in",
    "start": "2227960",
    "end": "2236599"
  },
  {
    "text": "ms235 so what if we could actually achieve the same result without any",
    "start": "2236599",
    "end": "2242000"
  },
  {
    "text": "actual specific bug in in this sort of sense it would work in every of net CU",
    "start": "2242000",
    "end": "2248280"
  },
  {
    "text": "obviously evidence base only came from inv verion 4 and also crucially",
    "start": "2248280",
    "end": "2253319"
  },
  {
    "text": "difficult to fix just because I'm feeling nasty so again we go hunting for",
    "start": "2253319",
    "end": "2260160"
  },
  {
    "start": "2257000",
    "end": "2257000"
  },
  {
    "text": "interesting objects and one of the things I found is the hash table object or hashtable class",
    "start": "2260160",
    "end": "2266960"
  },
  {
    "text": "and this is something which has been in since version one of the framework basically is a key value dictionary and",
    "start": "2266960",
    "end": "2273880"
  },
  {
    "text": "was done before you actually had a proper generic dictionary which came along in net",
    "start": "2273880",
    "end": "2279359"
  },
  {
    "text": "2 and it serializes its keys and values but it doesn't actually serialize",
    "start": "2279359",
    "end": "2285480"
  },
  {
    "text": "its hash table because due to the way in which it's it's implementing the hash function it",
    "start": "2285480",
    "end": "2291880"
  },
  {
    "text": "cannot guarantee that those values will match up when you say deserialize from a file at a later date or on a different",
    "start": "2291880",
    "end": "2298440"
  },
  {
    "text": "machine or a different version of the framework there's no actual guarantees in that to uh make sure that",
    "start": "2298440",
    "end": "2304839"
  },
  {
    "text": "you're actually using the right thing so it calls a rebuil hashtable",
    "start": "2304839",
    "end": "2310599"
  },
  {
    "text": "function and this thing uses a special object called an N quality compare or at",
    "start": "2310599",
    "end": "2316560"
  },
  {
    "text": "least that's the interface which implements it and this can be specified by by code",
    "start": "2316560",
    "end": "2324599"
  },
  {
    "text": "you can pass it in in the Constructor and say I want to use this special comparer as my mechanism to generate",
    "start": "2324599",
    "end": "2331400"
  },
  {
    "text": "these hash values and so it gets serialized with the hash table because obviously once you get to the other side you actually",
    "start": "2331400",
    "end": "2338119"
  },
  {
    "text": "want to uh use the uh the same thing you used at the other side and what it does is it goes through",
    "start": "2338119",
    "end": "2345480"
  },
  {
    "text": "every single key in the collection and calls the get hash code method on this",
    "start": "2345480",
    "end": "2351000"
  },
  {
    "text": "comparer which is interesting so what if this object was never actually",
    "start": "2351000",
    "end": "2358440"
  },
  {
    "start": "2359000",
    "end": "2359000"
  },
  {
    "text": "serialized so this is how you can basically do it without ever having to find a specific book so",
    "start": "2360640",
    "end": "2367400"
  },
  {
    "text": "in this case we've implemented our own custom equality comparer but crucially we've made it so",
    "start": "2367400",
    "end": "2374200"
  },
  {
    "text": "it's a martial by reference object that means that object will never actually",
    "start": "2374200",
    "end": "2379520"
  },
  {
    "text": "leave our partial trust sandbox so we throw our hash table",
    "start": "2379520",
    "end": "2385880"
  },
  {
    "text": "across the across the boundary using the xbat uh bug I I've already mentioned for",
    "start": "2385880",
    "end": "2390960"
  },
  {
    "text": "example or any other mechanism to cross the boundary because there is generally there's still ways you can affect this",
    "start": "2390960",
    "end": "2397920"
  },
  {
    "text": "and I get serialized across and recreated on the other side now obviously we've now got our bad object",
    "start": "2397920",
    "end": "2404200"
  },
  {
    "text": "created in the other domain but obviously we can't access it because it's sitting in the host application",
    "start": "2404200",
    "end": "2410319"
  },
  {
    "text": "domain but now the hashtable D calization code kicks in and this is where it goes",
    "start": "2410319",
    "end": "2416280"
  },
  {
    "text": "interesting so it goes through each of its Keys passes it to the get hash code method but the get hash code method is",
    "start": "2416280",
    "end": "2422599"
  },
  {
    "text": "implemented inside our martial by reference object so it has to serialize each of",
    "start": "2422599",
    "end": "2428000"
  },
  {
    "text": "those keys back up and pushes them back across the boundary and because",
    "start": "2428000",
    "end": "2433359"
  },
  {
    "text": "effectively we've broken the symmetry of the serialization process by doing this type aliasing issue when it goes back",
    "start": "2433359",
    "end": "2441280"
  },
  {
    "text": "across the boundary it doesn't realize it's got to convert it back to our custom serialized object it now just",
    "start": "2441280",
    "end": "2446359"
  },
  {
    "text": "thinks it's actually this corrupt delegate and you can use that to get",
    "start": "2446359",
    "end": "2451920"
  },
  {
    "text": "back your object so final demonstration",
    "start": "2451920",
    "end": "2457960"
  },
  {
    "text": "so in this case we've got a zaml browser application and you see it's hosted",
    "start": "2458560",
    "end": "2465480"
  },
  {
    "text": "inside iie there used to be actually a Firefox Plugin or or MP API plugin for",
    "start": "2465480",
    "end": "2471720"
  },
  {
    "text": "it although I think I believe that's now deprecated",
    "start": "2471720",
    "end": "2478480"
  },
  {
    "text": "and come [Music] on taking it's time",
    "start": "2478760",
    "end": "2487920"
  },
  {
    "text": "right so again just got a simple start button you can also specify the command if you're so",
    "start": "2497599",
    "end": "2503760"
  },
  {
    "text": "inclined and to actually better demonstrate it in action I've also added a special marker object so this will",
    "start": "2503760",
    "end": "2510680"
  },
  {
    "text": "basically pop up a dialogue box saying at what stage of the process it's currently currently at so if they click",
    "start": "2510680",
    "end": "2516720"
  },
  {
    "text": "Start we first get our object is being serialized in the partial trust ABD",
    "start": "2516720",
    "end": "2522760"
  },
  {
    "text": "domain makes sense it's having to cross the boundary so we click okay it's now",
    "start": "2522760",
    "end": "2528720"
  },
  {
    "text": "deserializing in the default app domain and this is the hosting app domain somewhere else on the",
    "start": "2528720",
    "end": "2534880"
  },
  {
    "text": "system click again well now we're starting to go back the other way again now it's starting to serialize it",
    "start": "2534880",
    "end": "2541160"
  },
  {
    "text": "again we finally get deserialization in the partial Trust app domain at which point we get out to",
    "start": "2541160",
    "end": "2549599"
  },
  {
    "text": "appear and we can see from basically the fact that it's it's would now normally",
    "start": "2554880",
    "end": "2561280"
  },
  {
    "text": "show this exception dialogue but as you can see it actually exploited it before it even finished the exception process",
    "start": "2561280",
    "end": "2566960"
  },
  {
    "text": "because we were actually doing this exploit during the process the exception object was being deserialized so before",
    "start": "2566960",
    "end": "2574880"
  },
  {
    "text": "the hosting code has even realized it's got an unquote exception to",
    "start": "2574880",
    "end": "2580760"
  },
  {
    "text": "catch So It's tricky to protect against that because basically we've not technically used any real bug okay the",
    "start": "2583559",
    "end": "2591079"
  },
  {
    "text": "exception trick is is a bug and has been fixed but there's other ways in which partial trust code can do",
    "start": "2591079",
    "end": "2596559"
  },
  {
    "text": "that and it has massive potentials for back compat issues so effectively Microsoft fix was now you cannot do this",
    "start": "2596559",
    "end": "2602800"
  },
  {
    "text": "type aliasing anymore if you are partial trust code you can no longer just arbitrarily set any any object type you",
    "start": "2602800",
    "end": "2610880"
  },
  {
    "text": "like but also probably the biggest one is basically Microsoft have blocked any",
    "start": "2610880",
    "end": "2615920"
  },
  {
    "text": "use of partial trust. net code from the browser because it was just too much of a security issue and so exam browser",
    "start": "2615920",
    "end": "2622319"
  },
  {
    "text": "application are effectively banned certainly from the internet Zone uh you can still use click once but obviously",
    "start": "2622319",
    "end": "2627559"
  },
  {
    "text": "you saw that dialogue which popped up and you could argue that if you click through a dialogue you could have clicked through a dialogue which says",
    "start": "2627559",
    "end": "2633359"
  },
  {
    "text": "you want to get owned at which point it doesn't really matter",
    "start": "2633359",
    "end": "2638559"
  },
  {
    "start": "2637000",
    "end": "2637000"
  },
  {
    "text": "so there was a lot more to the bulletin release than was actually just posted just in the cves so there was only two",
    "start": "2638559",
    "end": "2645280"
  },
  {
    "text": "cves in it but there was actually quite a few different fixs implemented in that bulletin release now attacks from",
    "start": "2645280",
    "end": "2651720"
  },
  {
    "text": "partial trust code have been mitigated but net remoting is still something which potentially you could attack if",
    "start": "2651720",
    "end": "2656960"
  },
  {
    "text": "you found the right system and there's still a number of objects which if you could get them desized would do",
    "start": "2656960",
    "end": "2663680"
  },
  {
    "text": "something potentially nasty so that's the end of the presentation uh if anyone's got any",
    "start": "2663680",
    "end": "2670280"
  },
  {
    "text": "questions if you want more technical details the white paper should be on the CD which has code examples of how to",
    "start": "2670280",
    "end": "2675839"
  },
  {
    "text": "create the the corrupt delegates and all that sort of stuff so there any questions",
    "start": "2675839",
    "end": "2685000"
  },
  {
    "text": "no thanks very much",
    "start": "2688400",
    "end": "2692279"
  }
]