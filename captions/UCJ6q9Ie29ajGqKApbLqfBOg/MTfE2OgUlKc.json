[
  {
    "start": "0",
    "end": "284000"
  },
  {
    "text": "Thanks so let's talk about DC realization vulnerabilities so real quick we will attempt to advance slides",
    "start": "0",
    "end": "8149"
  },
  {
    "text": "that's it not coming through it's advancing on my screen and it's not advancing up there all right good enough",
    "start": "8150",
    "end": "17460"
  },
  {
    "text": "all right so few words about Who I am so I'm a senior software security engineer at Netflix I work on the platform",
    "start": "17460",
    "end": "23279"
  },
  {
    "text": "security team we build all sorts of cool stuff to make our micro service ecosystem safe and if you download the",
    "start": "23279",
    "end": "29820"
  },
  {
    "text": "slide deck afterwards you can check out some of the cool projects that we work on I'm easily findable online if you",
    "start": "29820",
    "end": "36120"
  },
  {
    "text": "want to shoot me some questions after the talk but let's get into it let's talk about D serialization vulnerabilities so first I'm gonna",
    "start": "36120",
    "end": "42570"
  },
  {
    "text": "scribe what those are so that we're all on the same page and then I'm going to talk about what a gadget chain is and",
    "start": "42570",
    "end": "48300"
  },
  {
    "text": "why I'm spending all my time talking about that and then finally I'm going to talk about the new tool I made to find",
    "start": "48300",
    "end": "53699"
  },
  {
    "text": "gadget chains and finally the good stuff some new exploits that I discovered with that tool so first of all what is a D",
    "start": "53699",
    "end": "61109"
  },
  {
    "text": "serialization vulnerability so in object-oriented languages like Java data",
    "start": "61109",
    "end": "68490"
  },
  {
    "text": "is contained in classes and classes also contain code this is object-oriented",
    "start": "68490",
    "end": "73560"
  },
  {
    "text": "programming and it gives you cool stuff like polymorphism but this leads to a really important side effect when you're",
    "start": "73560",
    "end": "79860"
  },
  {
    "text": "talking about deserializing data which is that if you control the data type then you also control code that's",
    "start": "79860",
    "end": "87509"
  },
  {
    "text": "getting run because the codes is determined by the data type so what does",
    "start": "87509",
    "end": "92909"
  },
  {
    "text": "that actually mean if you're trying to look at something that's vulnerable and then try to exploit that so here's an example of like a rest endpoint that",
    "start": "92909",
    "end": "100020"
  },
  {
    "text": "would be vulnerable and kind of a classic Java program so you've got some kind of render user endpoint it's got a",
    "start": "100020",
    "end": "106110"
  },
  {
    "text": "post body and you pass the request body into the object input stream class you",
    "start": "106110",
    "end": "111689"
  },
  {
    "text": "read an object out of there and whoever wrote this expects the object that you read out to be a user and it's going to",
    "start": "111689",
    "end": "117060"
  },
  {
    "text": "call something like user dot render so the developer has the intent of the person posting a serialized body that",
    "start": "117060",
    "end": "124799"
  },
  {
    "text": "represents this user class and this does nothing interesting it's holy knock Lluis but where you get into a",
    "start": "124799",
    "end": "130530"
  },
  {
    "text": "potentially dangerous place is if the application something like this on the classpath as",
    "start": "130530",
    "end": "135540"
  },
  {
    "text": "well a thumbnail user and in this case this is maybe a user that has a thumbnail which is a path to something",
    "start": "135540",
    "end": "141360"
  },
  {
    "text": "on disk and that means that if a attacker can serialize the some male user class and pass it into this post",
    "start": "141360",
    "end": "148260"
  },
  {
    "text": "body then they can read any file off the disk and so this is what I mean by if an attacker can control your data type then",
    "start": "148260",
    "end": "155250"
  },
  {
    "text": "they might be able to directly influence what code gets executed and potentially do something unintended so D",
    "start": "155250",
    "end": "162480"
  },
  {
    "text": "serialization that's not a new topic so this was a really popular topic in 2016",
    "start": "162480",
    "end": "168570"
  },
  {
    "text": "but D serialization vulnerabilities actually go to something way before that so they first kind of came up around",
    "start": "168570",
    "end": "174480"
  },
  {
    "text": "2006 some work shown in field gave a talk at blackhat where he describes",
    "start": "174480",
    "end": "180540"
  },
  {
    "text": "exactly a sort of issue you can potentially do weird things with your data types in a serialized body and get",
    "start": "180540",
    "end": "186840"
  },
  {
    "text": "arbitrary code execution but this really gained steam in 2015 when fro HOF and",
    "start": "186840",
    "end": "193020"
  },
  {
    "text": "Lawrence gave a presentation at app set Cali where they showed that there's arbitrary code execution gadget chains",
    "start": "193020",
    "end": "199200"
  },
  {
    "text": "in all sorts of open-source libraries are commonly pulled in like commas collections and so if you've got any",
    "start": "199200",
    "end": "204900"
  },
  {
    "text": "application doing unsafety serialization and that included things like jenkins and various application containers then",
    "start": "204900",
    "end": "211470"
  },
  {
    "text": "you've got arbitrary code execution on those apps and it's because there's just so many libraries that have these",
    "start": "211470",
    "end": "216690"
  },
  {
    "text": "interesting gadget chains in them that end up doing arbitrary code execution so the year that followed I've heard a lot",
    "start": "216690",
    "end": "223050"
  },
  {
    "text": "of people refer to as like the Java D serialization apocalypse because just everyone realized that they were vulnerable to this and so lots of talks",
    "start": "223050",
    "end": "229650"
  },
  {
    "text": "were given in that year and probably my favorite one was by Luca at an OAuth meetup where he just did a really good",
    "start": "229650",
    "end": "235920"
  },
  {
    "text": "job of outlining this is what a vulnerability is this is what an exploit looks like this is how you fix them so",
    "start": "235920",
    "end": "241200"
  },
  {
    "text": "this is a good talk to go look at afterwards if you want to kind of dig a little deeper on what phoner abilities",
    "start": "241200",
    "end": "247140"
  },
  {
    "text": "look like but you know the subject didn't end there so at last year's blackhat Nino's Amuro she gave talk",
    "start": "247140",
    "end": "253410"
  },
  {
    "text": "about JSON parsing libraries that are also subject to these kind of D serialization attacks so for a while in",
    "start": "253410",
    "end": "260220"
  },
  {
    "text": "2016 everyone's like art if I just don't use the Java like object input stream then I'm not gonna be subject to these",
    "start": "260220",
    "end": "265650"
  },
  {
    "text": "vulnerabilities so it's all good right and the answer is no there's still plenty of ways other Java",
    "start": "265650",
    "end": "271759"
  },
  {
    "text": "deserialize errs or DC Wiser's and other languages can be vulnerable to these sorts of exploits so this is a really",
    "start": "271759",
    "end": "277879"
  },
  {
    "text": "good survey of all sorts of different deserializing libraries and in lots of languages besides Java so that's another",
    "start": "277879",
    "end": "283490"
  },
  {
    "text": "good talk to go check out so there was that talk last year there's this talk right now so that's the end of the D",
    "start": "283490",
    "end": "289490"
  },
  {
    "start": "284000",
    "end": "284000"
  },
  {
    "text": "serialization story right no like this is still an important topic we still haven't killed off this vulnerability",
    "start": "289490",
    "end": "295039"
  },
  {
    "text": "class so in October this year at app tech USA there's still gonna be another talk about D serialization and why you",
    "start": "295039",
    "end": "301039"
  },
  {
    "text": "shouldn't be doing this in a dangerous way and what can go wrong so this is still a relevant topic and it's",
    "start": "301039",
    "end": "307219"
  },
  {
    "text": "something that we need to understand more deeply because it's obviously not going away so what's the deal with Java D",
    "start": "307219",
    "end": "313370"
  },
  {
    "start": "311000",
    "end": "311000"
  },
  {
    "text": "serialization vulnerabilities why are they so interesting why did this cause so much strife when we realized what a big deal they were you know if all DC",
    "start": "313370",
    "end": "320689"
  },
  {
    "text": "relation vulnerabilities look like what I add in that first slide they wouldn't actually be that interesting the reason they're interesting is because there's",
    "start": "320689",
    "end": "327650"
  },
  {
    "text": "these things called magic methods and those magic methods will get automatically executed by the D",
    "start": "327650",
    "end": "332960"
  },
  {
    "text": "serialization library while it's constructing your payload from the serialize byte stream and that's what",
    "start": "332960",
    "end": "338479"
  },
  {
    "text": "gives rise to all sorts of interesting behavior that attackers can exploit so here's another example that so this is",
    "start": "338479",
    "end": "344870"
  },
  {
    "text": "the exact same post endpoint as before but let's say you have this like evil class that's on your class path for some",
    "start": "344870",
    "end": "350240"
  },
  {
    "text": "reason this probably doesn't actually exist anymore but for the sake of example there's this this class implements this read object method and",
    "start": "350240",
    "end": "357139"
  },
  {
    "text": "that's one of these magic methods that gets automatically invoked and that thing's gonna read something that'll be",
    "start": "357139",
    "end": "362449"
  },
  {
    "text": "object input stream and execute it so shell out to whatever it read in and the",
    "start": "362449",
    "end": "368240"
  },
  {
    "text": "thing that about this magic method this read object method that's so critical is that that gets executed before this we'd",
    "start": "368240",
    "end": "376849"
  },
  {
    "text": "object method ever gets ever returns on the left-hand side so it doesn't matter",
    "start": "376849",
    "end": "381860"
  },
  {
    "text": "that this evil class can't be passed to a user because this magic method gets invoked before that ever returns so",
    "start": "381860",
    "end": "390560"
  },
  {
    "start": "390000",
    "end": "390000"
  },
  {
    "text": "magic methods what's the deal with those like you've probably never implemented one you're just like how common can",
    "start": "390560",
    "end": "396680"
  },
  {
    "text": "these things actually be and the answer is that they're in doubly common because the JDK has them all over the place so the so hashmap is",
    "start": "396680",
    "end": "405960"
  },
  {
    "text": "a really good example of a class implementing one of these matching method so it implements read object and",
    "start": "405960",
    "end": "411089"
  },
  {
    "text": "the reason that it implements the right object and read object method is because it allows serialize versions of a hash",
    "start": "411089",
    "end": "418169"
  },
  {
    "text": "map to be interoperable between different jdk versions they might want to change the way they manage their hash",
    "start": "418169",
    "end": "423509"
  },
  {
    "text": "tables and things between jdk releases and if they did that too may use default serialization techniques then those here",
    "start": "423509",
    "end": "430169"
  },
  {
    "text": "live versions of hash mats wouldn't be interoperable but by instead implementing write object and",
    "start": "430169",
    "end": "436169"
  },
  {
    "text": "serializing out the hash map is just a list of key value pairs they can read that in in any version of the JDK as a",
    "start": "436169",
    "end": "443069"
  },
  {
    "text": "list of key value pairs and call this stop put with that key and that value for each one they read in that means",
    "start": "443069",
    "end": "448740"
  },
  {
    "text": "that as the Java ID serials I D serialization library is deserializing a",
    "start": "448740",
    "end": "455399"
  },
  {
    "text": "hash map your calling object hash code and object equals for each of those keys you're reading out of that list so this",
    "start": "455399",
    "end": "462779"
  },
  {
    "text": "gives us a way of getting to other known entry points so if there's a class that has an interesting hashcode method that",
    "start": "462779",
    "end": "468300"
  },
  {
    "text": "does something potentially dangerous in that hash code then even though patch code isn't a magic methods we know we",
    "start": "468300",
    "end": "474029"
  },
  {
    "text": "can wrap it inside a hash map and we'll end up invoking it and that kind of gets you into what gadget chains start",
    "start": "474029",
    "end": "480300"
  },
  {
    "text": "looking like it's where you get moved from one method that you know the D serialization library will invoke and getting into another one and then",
    "start": "480300",
    "end": "486269"
  },
  {
    "text": "potentially more from there so I talked about hash map priority queue is just another really common example that I've",
    "start": "486269",
    "end": "492059"
  },
  {
    "text": "seen attackers use in building up gadget chains but if you check out a project",
    "start": "492059",
    "end": "497459"
  },
  {
    "text": "like Y so serial you'll see a bunch of others so here's an example of how magic",
    "start": "497459",
    "end": "502949"
  },
  {
    "start": "500000",
    "end": "500000"
  },
  {
    "text": "methods get you to gadget chain so this is a really simplified version of what we table tech looks like in a hash map",
    "start": "502949",
    "end": "508949"
  },
  {
    "text": "and the main thing to notice is that it reads keys and values out of that object input stream and calls hash code on the",
    "start": "508949",
    "end": "515550"
  },
  {
    "text": "key and so if I put into my object input stream something like this class and this is an example again simplified",
    "start": "515550",
    "end": "522599"
  },
  {
    "text": "example but an example of a class that comes out of the closure library then what this class does when you invoke",
    "start": "522599",
    "end": "528480"
  },
  {
    "text": "cache code on it is it looks up inside its mat for a I function instance and calls invoke on it so if I",
    "start": "528480",
    "end": "535800"
  },
  {
    "text": "put inside that closer function map an interesting implementation of I function I can get into a class it does",
    "start": "535800",
    "end": "542160"
  },
  {
    "text": "interesting things and invoke so here's an example of a function implementation that composes two other functions so",
    "start": "542160",
    "end": "548460"
  },
  {
    "text": "let's say for f1 I implement the constant function that just returned some constant value and for f2 I directs",
    "start": "548460",
    "end": "556710"
  },
  {
    "text": "the payload to deserialize and eval function and that means that I can get some arbitrary value pass into the",
    "start": "556710",
    "end": "563580"
  },
  {
    "text": "invoke on function eval and basically get RCE so this is what a gadget chain looks like in a DC realization exploit and if",
    "start": "563580",
    "end": "570930"
  },
  {
    "text": "you want to know what that like would actually look like on the wire this is an example of a Jackson version of that",
    "start": "570930",
    "end": "576540"
  },
  {
    "start": "573000",
    "end": "573000"
  },
  {
    "text": "kind of a payload so you wrap that interesting abstract table model class that had that interesting hash code",
    "start": "576540",
    "end": "582120"
  },
  {
    "text": "implementation inside a hash map and then you just supply as the instances of all those member variables these",
    "start": "582120",
    "end": "588180"
  },
  {
    "text": "interesting classes with potentially more interesting member values inside that so the important thing to note",
    "start": "588180",
    "end": "596010"
  },
  {
    "text": "about that example that I just gave though is that all of that had nothing to do with what the application was",
    "start": "596010",
    "end": "602550"
  },
  {
    "text": "actually calling what code it was invoking that payload worked just as",
    "start": "602550",
    "end": "608040"
  },
  {
    "text": "well with that first example I gave that tried to pass things to users it had nothing to do that payload had nothing",
    "start": "608040",
    "end": "614520"
  },
  {
    "text": "to do with what the application expects to do what the payload wants is deserialized everything that determines",
    "start": "614520",
    "end": "620400"
  },
  {
    "text": "what gadget chain to construct is determined by the class path by what classes exist inside your application",
    "start": "620400",
    "end": "626130"
  },
  {
    "text": "and that doesn't have to be dis class as you call directly that is the cumulative sum of all of your transitive",
    "start": "626130",
    "end": "631830"
  },
  {
    "text": "dependencies so if there's something interesting in some transitive dependency you didn't even know you were pulling in a DC realization gadget chain",
    "start": "631830",
    "end": "639180"
  },
  {
    "text": "can potentially utilize that and that's what makes these things so dangerous and so prolific in in applications and",
    "start": "639180",
    "end": "646290"
  },
  {
    "text": "practice so what Java deserialize errs are vulnerable to these kind of exploits",
    "start": "646290",
    "end": "651540"
  },
  {
    "start": "647000",
    "end": "647000"
  },
  {
    "text": "so the JDK object input stream is the classic one that's the one that we're",
    "start": "651540",
    "end": "656610"
  },
  {
    "text": "all this attention started gaining steam but that's definitely not the only one so extreme is another example of an XML",
    "start": "656610",
    "end": "663150"
  },
  {
    "text": "parser where you can specify your data types and therefore or end up in San Shi a ting arbitrary things and potentially building gadget",
    "start": "663150",
    "end": "669480"
  },
  {
    "text": "chain all of these JSON libraries are potentially exploitable some of them are not by default but with some certain",
    "start": "669480",
    "end": "675690"
  },
  {
    "text": "configuration options might end up being exploitable so you should spend some time reading you know some arose if",
    "start": "675690",
    "end": "680910"
  },
  {
    "text": "you're worried about those and understanding exactly how and when those are exploitable but the point is that there's lots of different libraries and",
    "start": "680910",
    "end": "687120"
  },
  {
    "text": "all those libraries have different ideas about what classes they'll deserialize and what magic methods will be invoked",
    "start": "687120",
    "end": "693300"
  },
  {
    "text": "and so those different libraries might end up having different types of gadget chains possible and that's something to",
    "start": "693300",
    "end": "699209"
  },
  {
    "text": "keep in mind for later so finding vulnerabilities how do you actually know if your application is vulnerable to",
    "start": "699209",
    "end": "706199"
  },
  {
    "start": "701000",
    "end": "701000"
  },
  {
    "text": "addy serialization bug well finding a potential D serialization vulnerability",
    "start": "706199",
    "end": "711209"
  },
  {
    "text": "isn't really any different from finding many other types of application security vulnerabilities like sequel injection or",
    "start": "711209",
    "end": "716790"
  },
  {
    "text": "XSS it's really just a question of can attacker controlled data flow into your",
    "start": "716790",
    "end": "721860"
  },
  {
    "text": "application and then go into one of these potentially dangerous sinks in this case a parser library to",
    "start": "721860",
    "end": "727680"
  },
  {
    "text": "deserialize or library like anyone's I just named on that last page and that's basically the same thing as something",
    "start": "727680",
    "end": "733680"
  },
  {
    "text": "like sequel injection that's something attacker control will flow into a sequel statement so existing tools are pretty",
    "start": "733680",
    "end": "739709"
  },
  {
    "text": "good at finding these kind of vulnerabilities we understand how to find them statically and dynamically so I'm actually not that interested in how",
    "start": "739709",
    "end": "746819"
  },
  {
    "text": "do you find these things because that's the topic that we've been discussing for years it's not where I'm gonna focus on",
    "start": "746819",
    "end": "752310"
  },
  {
    "text": "what I'm really interested in are the gadget chains so why am i interested in",
    "start": "752310",
    "end": "757829"
  },
  {
    "start": "756000",
    "end": "756000"
  },
  {
    "text": "gadget chains and why is that the focus of this talk and the answer is that it has to do with what do you do with the",
    "start": "757829",
    "end": "764550"
  },
  {
    "text": "vulnerability once you discover it so why not just use a better serialization",
    "start": "764550",
    "end": "770220"
  },
  {
    "text": "strategy why not use some library or some configuration that isn't vulnerable to this kind of problem and I think Luca",
    "start": "770220",
    "end": "777269"
  },
  {
    "text": "summed this up into 2016 talk the best it's 2016 there are better options for serialization and that was true then",
    "start": "777269",
    "end": "783420"
  },
  {
    "text": "that's true today but my answer to that is that's fine if you're developing new",
    "start": "783420",
    "end": "789839"
  },
  {
    "text": "application but what do you do when you're working with existing applications that have existing clients",
    "start": "789839",
    "end": "795059"
  },
  {
    "text": "out there in the world we're changing the way that you parse their pale might end up breaking things so who",
    "start": "795059",
    "end": "802130"
  },
  {
    "text": "recognizes this guy on the left so this is the original weed DVD that got sent",
    "start": "802130",
    "end": "808310"
  },
  {
    "text": "out to customers of Netflix so they could stream Netflix from there we V that thing went out around 2010 and",
    "start": "808310",
    "end": "814460"
  },
  {
    "text": "that's got a client stands on the disc which if you want wanted to go use it like we should still understand how to",
    "start": "814460",
    "end": "820400"
  },
  {
    "text": "parse payloads from those clients the thing on the right is in a first generation roku also came out around",
    "start": "820400",
    "end": "826640"
  },
  {
    "text": "2010 and there's probably a bunch of those stuffed in someone's closet and same thing if you plug that in today",
    "start": "826640",
    "end": "831980"
  },
  {
    "text": "like that should boot up and be able to sing Netflix or at the very least be able to talk to some kind of Netflix",
    "start": "831980",
    "end": "838400"
  },
  {
    "text": "server and be able to get a firmware update and we should be able to understand those payloads so you want so",
    "start": "838400",
    "end": "844070"
  },
  {
    "text": "there's plenty of contexts where updating your IPC mechanism is really",
    "start": "844070",
    "end": "849380"
  },
  {
    "text": "hard or impossible because you've got clients out there that you can't readily update and the thing is even if you're",
    "start": "849380",
    "end": "855020"
  },
  {
    "text": "not in one of these contexts even if you do have full control of both your clients and your servers it's just an",
    "start": "855020",
    "end": "860570"
  },
  {
    "text": "expensive thing to do if you have to go update all your clients like it takes a lot of someone's time to replace an IPC",
    "start": "860570",
    "end": "866990"
  },
  {
    "text": "mechanism so is it worth the effort to remediate one of these vulnerabilities",
    "start": "866990",
    "end": "873200"
  },
  {
    "text": "that's ultimately the question it's gonna take a developer like three weeks of time to go update a server to",
    "start": "873200",
    "end": "880220"
  },
  {
    "text": "understand some new protocol then go update all the clients make sure they're all really updated then go take the old one out is that we're doing maybe you've",
    "start": "880220",
    "end": "888590"
  },
  {
    "text": "got some vulnerability but it's not actually exploitable you can't do anything with it",
    "start": "888590",
    "end": "894310"
  },
  {
    "text": "so how do you know if your application is exploitable so there's a few known",
    "start": "902080",
    "end": "908360"
  },
  {
    "start": "903000",
    "end": "903000"
  },
  {
    "text": "exploits in a bunch of open source projects so why so serial is probably the most well-known one and that was and",
    "start": "908360",
    "end": "913880"
  },
  {
    "text": "that's run by fro Hoff the same person that started talking about these vulnerabilities in 2015 and that's got a",
    "start": "913880",
    "end": "920480"
  },
  {
    "text": "lot of gadget chains that researchers have discovered in open source libraries so if you look at that project look at",
    "start": "920480",
    "end": "926300"
  },
  {
    "text": "the places where there are known gadget chains then you can look at your application determined",
    "start": "926300",
    "end": "932579"
  },
  {
    "text": "they're not it's got one of those libraries and be like okay it's got one of those libraries I know that thing's vulnerable and that thing is exploitable",
    "start": "932579",
    "end": "938389"
  },
  {
    "text": "marshal SEC is a similar open-source project so it's not a wider breadth of",
    "start": "938389",
    "end": "943709"
  },
  {
    "text": "exploits it works it's got some gadget chains for other libraries but it's kind",
    "start": "943709",
    "end": "949889"
  },
  {
    "text": "of the same thing where it's got a bunch of known gadget chains but isn't going to tell you anything specific about your",
    "start": "949889",
    "end": "956309"
  },
  {
    "text": "application it's not going to tell you are there gadget chains that are unique to my random collection of libraries",
    "start": "956309",
    "end": "962939"
  },
  {
    "text": "that I happen to have on my class path and for that matter now that these things is going to give you much",
    "start": "962939",
    "end": "968639"
  },
  {
    "text": "information if you're using some kind of non-standard deserialization library that these things weren't built around",
    "start": "968639",
    "end": "974040"
  },
  {
    "text": "but which is still potentially dangerous because it instantiates arbitrary object types so what tools are out there so",
    "start": "974040",
    "end": "982049"
  },
  {
    "start": "979000",
    "end": "979000"
  },
  {
    "text": "I've talked about why so serial Jugal is another interesting project that allows you to programmatically query things",
    "start": "982049",
    "end": "987959"
  },
  {
    "text": "about data types on your class path if you're manually building up a gadget chain one link at a time and you want to",
    "start": "987959",
    "end": "993149"
  },
  {
    "text": "know for example what are all the implementations a map on my class path that thing will give you that answer on",
    "start": "993149",
    "end": "998910"
  },
  {
    "text": "the other hand if there is 5,000 implementations of map on your class path that's a lot of stuff is then sift",
    "start": "998910",
    "end": "1004009"
  },
  {
    "text": "through and find out if any of those do anything interesting there's the java d serialization scanner that's a burp",
    "start": "1004009",
    "end": "1010429"
  },
  {
    "text": "suite plugin that basically uses payloads from life so serial to dynamically scan your app and determine if any of those payloads work already",
    "start": "1010429",
    "end": "1017209"
  },
  {
    "text": "mention marshal sec earlier this year the mcc group released a burp suite plugin which again kind of does the same",
    "start": "1017209",
    "end": "1023569"
  },
  {
    "text": "thing as the other burp suite plugin but that one's mainly based on payloads from you knows mirages work at last week's",
    "start": "1023569",
    "end": "1028699"
  },
  {
    "text": "blackhat but all those things don't really do what I described the last page",
    "start": "1028699",
    "end": "1033769"
  },
  {
    "text": "tell you something that's unique about your application so really what is it",
    "start": "1033769",
    "end": "1039350"
  },
  {
    "start": "1037000",
    "end": "1037000"
  },
  {
    "text": "that I'm after so we've got thousands of applications in our Netflix micro service ecosystem and when we stumble",
    "start": "1039350",
    "end": "1045199"
  },
  {
    "text": "upon one of these vulnerabilities we really want to be able to assess the risk of a vulnerability we would like to",
    "start": "1045199",
    "end": "1050720"
  },
  {
    "text": "know how important is it to remediate is it even exploitable and if it's exploitable what kind of exploits",
    "start": "1050720",
    "end": "1056870"
  },
  {
    "text": "possible RCEs SRF we'd like to know and so if we're answering that question we",
    "start": "1056870",
    "end": "1062960"
  },
  {
    "text": "don't necessarily have to be perfect a reasonable overestimation risk is still useful and we don't",
    "start": "1062960",
    "end": "1068360"
  },
  {
    "text": "actually have to generate payloads if our goal is just to understand what gadget chains are possible what is a",
    "start": "1068360",
    "end": "1074570"
  },
  {
    "text": "good starting point if I was trying to exploit this so what are the",
    "start": "1074570",
    "end": "1080150"
  },
  {
    "text": "requirements if I'm going to set out to build a tool to solve this problem because like I described tools exist but",
    "start": "1080150",
    "end": "1086480"
  },
  {
    "text": "they didn't do exactly what I wanted to do so really if I'm not looking for vulnerabilities I don't have to find",
    "start": "1086480",
    "end": "1092059"
  },
  {
    "text": "them I'm only gonna use this if I already know my application as a vulnerability but it needs to be able to look at the entire class path so all the",
    "start": "1092059",
    "end": "1099529"
  },
  {
    "text": "transitive dependencies I'm pulling in and be able to tell me if there's any kind of gadget chain that potentially",
    "start": "1099529",
    "end": "1104960"
  },
  {
    "text": "uses a bunch of those libraries and it should operate on bytecode so that I don't have to understand groovy and",
    "start": "1104960",
    "end": "1111169"
  },
  {
    "text": "closure in Kotlin and any other JVM language that's been invented in the last few years and we might even be",
    "start": "1111169",
    "end": "1117020"
  },
  {
    "text": "including proprietary third-party things which again maybe I'm not even using directly but if it's on the class path",
    "start": "1117020",
    "end": "1122809"
  },
  {
    "text": "it's potentially usable in a gadget chain so I really want something that will operate on byte codes inside my",
    "start": "1122809",
    "end": "1129679"
  },
  {
    "text": "application so that was the goal that I set out to achieve and in doing so I",
    "start": "1129679",
    "end": "1136370"
  },
  {
    "text": "created this tool called that I called gadget inspector so what it does is exactly what I've just described it",
    "start": "1136370",
    "end": "1141770"
  },
  {
    "text": "analyzes the byte codes of your application and its entire class path in an attempt to find gadget chains so how",
    "start": "1141770",
    "end": "1149690"
  },
  {
    "text": "does it work well it takes in your application be it in war format or a collection of jars kind of whatever",
    "start": "1149690",
    "end": "1155960"
  },
  {
    "text": "makes sense for your application does some analysis and then spits out what it thinks are possible gadget chains and",
    "start": "1155960",
    "end": "1161299"
  },
  {
    "text": "the gadget chain here is basically just going to be a link of method invocations where we know that this method can call",
    "start": "1161299",
    "end": "1168080"
  },
  {
    "text": "this one and this one and this one and then it gets down to something potentially interesting so let's dig in",
    "start": "1168080",
    "end": "1173750"
  },
  {
    "text": "a little bit to understand exactly what this does and what kind of gadget chains it can produce so the first step is just",
    "start": "1173750",
    "end": "1180409"
  },
  {
    "start": "1179000",
    "end": "1179000"
  },
  {
    "text": "to enumerate everything we have on the class path and then determine its class hierarchy what methods override other",
    "start": "1180409",
    "end": "1187039"
  },
  {
    "text": "ones and things like that that's not a terribly difficult problem to solve that's something that you can even do",
    "start": "1187039",
    "end": "1192320"
  },
  {
    "text": "with like plain old Java reflection api's but we really want to just enumerate all that stuff because it's going to be really relevant for the next",
    "start": "1192320",
    "end": "1198770"
  },
  {
    "text": "few steps but something that's really useful to do in this context is if you're analyzing things in the byte code level as opposed",
    "start": "1198770",
    "end": "1205399"
  },
  {
    "text": "to using dollar reflection api's is that you can really dig in and understand inner inner inner classes which are the",
    "start": "1205399",
    "end": "1211849"
  },
  {
    "text": "kind of things that end up getting produced when you use some of these jvm languages like scholar closure so the",
    "start": "1211849",
    "end": "1219139"
  },
  {
    "start": "1218000",
    "end": "1218000"
  },
  {
    "text": "next step is where things start getting a little bit interesting where I want to discover what I call pass through data",
    "start": "1219139",
    "end": "1224509"
  },
  {
    "text": "flow and the goal of this step is to understand if an attacker is able to control some arguments that gets passed",
    "start": "1224509",
    "end": "1231259"
  },
  {
    "text": "into a function can the attacker control the return value of that method and we",
    "start": "1231259",
    "end": "1237319"
  },
  {
    "text": "basically just want that so that we can do the next step where we understand what methods call other methods so",
    "start": "1237319",
    "end": "1243109"
  },
  {
    "text": "that's what we do in this step and we basically just do a little bit of symbolic execution where we step through",
    "start": "1243109",
    "end": "1248239"
  },
  {
    "text": "the byte codes one instruction at a time and then whenever we return a value we",
    "start": "1248239",
    "end": "1253249"
  },
  {
    "text": "will output that so there's one assumption here that I make in this",
    "start": "1253249",
    "end": "1258589"
  },
  {
    "text": "analysis which is basically that if any object is tainted and in this case I really just buy taint I mean attacker",
    "start": "1258589",
    "end": "1264739"
  },
  {
    "text": "controllable then everything about that object is attacked uncontrollable and that makes sense in this context because",
    "start": "1264739",
    "end": "1270619"
  },
  {
    "text": "in a DC realization vulnerability if an attacker can control an object it's because it came out of that payload so",
    "start": "1270619",
    "end": "1276709"
  },
  {
    "text": "they control everything about that object there are places where that could break down don't get me wrong but for",
    "start": "1276709",
    "end": "1281959"
  },
  {
    "text": "our purposes it's basically always going to be true so in this case we can",
    "start": "1281959",
    "end": "1288169"
  },
  {
    "text": "determine that and what this funky syntax in the top right means is that the if an attacker can control argument",
    "start": "1288169",
    "end": "1295190"
  },
  {
    "text": "zero which in this case is the implicit this of the function then the return value is also tacker controllable so",
    "start": "1295190",
    "end": "1301279"
  },
  {
    "text": "basically this means the return value is influenced by argument zero and here we can just see that directly we're",
    "start": "1301279",
    "end": "1307099"
  },
  {
    "text": "returning this top value and if we assume this is tainted then if we assume every member value is tainted then this",
    "start": "1307099",
    "end": "1314329"
  },
  {
    "text": "thought value would be tainted so one more example here's something a little bit trickier it's got an F else in it",
    "start": "1314329",
    "end": "1320269"
  },
  {
    "text": "but it's either just returning the argument as passed in or calling functions on VOC on some other argument",
    "start": "1320269",
    "end": "1325729"
  },
  {
    "text": "and this gets us to the next assumption that I make in the course of this analysis and this is something that",
    "start": "1325729",
    "end": "1331069"
  },
  {
    "text": "makes the analysis super easy if you are interested in static analysis or symbolic execution or something",
    "start": "1331069",
    "end": "1337000"
  },
  {
    "text": "determining what branch conditions are satisfiable tends to be the hardest problem we sidestep that entirely and",
    "start": "1337000",
    "end": "1343629"
  },
  {
    "text": "just assume that any branch condition is satisfiable this is probably one of the weakest assumptions that I make in the",
    "start": "1343629",
    "end": "1350080"
  },
  {
    "text": "course of this analysis but it's also most of the time totally reasonable because in practice any branch",
    "start": "1350080",
    "end": "1355659"
  },
  {
    "text": "conditions we end up encountering in these methods are influenced by member values and arguments getting passed in",
    "start": "1355659",
    "end": "1361240"
  },
  {
    "text": "and all of that ends up being attacker controllable because we're in this context where we're deserializing payloads inside of methods of objects",
    "start": "1361240",
    "end": "1368830"
  },
  {
    "text": "that are from that payload so in general whenever we want a branch condition to be satisfied we can usually achieve it",
    "start": "1368830",
    "end": "1374559"
  },
  {
    "text": "so in this case we just look at all the different outcomes of that branch condition so in this case where we",
    "start": "1374559",
    "end": "1379990"
  },
  {
    "text": "returned the argument directly we see that the first argument goes out into the return value in the second one we",
    "start": "1379990",
    "end": "1385240"
  },
  {
    "text": "call F dot invoke and then using the result from the above step where we see",
    "start": "1385240",
    "end": "1391029"
  },
  {
    "text": "function constants return values influenced by argument zero we end up deriving that the return value of that is also potentially attacked and",
    "start": "1391029",
    "end": "1397299"
  },
  {
    "text": "controllable from argument zero so next up step three is basically the exact",
    "start": "1397299",
    "end": "1403779"
  },
  {
    "start": "1401000",
    "end": "1401000"
  },
  {
    "text": "same thing but instead of carrying about return values we instead care about what methods get invoked and the goal there",
    "start": "1403779",
    "end": "1409330"
  },
  {
    "text": "is to build up the call graph of knowing this method invokes that one because that's how you start building up chains",
    "start": "1409330",
    "end": "1414669"
  },
  {
    "text": "you want to know one method a calls method B calls method C and you want to know when attacker control input flows",
    "start": "1414669",
    "end": "1420789"
  },
  {
    "text": "through all of those so we basically do exactly the same analysis but this time",
    "start": "1420789",
    "end": "1425980"
  },
  {
    "text": "you want to know when some argument inputs like argument zero flows into the invocation of some function and what",
    "start": "1425980",
    "end": "1432220"
  },
  {
    "text": "argument index that flows into so again some kind of weird funky syntax I just invented for the purpose of this",
    "start": "1432220",
    "end": "1437919"
  },
  {
    "text": "analysis here what all this means is that argument zero flows into function invoke at argument one and in this case",
    "start": "1437919",
    "end": "1444250"
  },
  {
    "text": "that's happening literally because we're passing this in as argument one to function invoke and then similarly we",
    "start": "1444250",
    "end": "1450720"
  },
  {
    "text": "know that the F comes out of that closer map we know that closer map is or is",
    "start": "1450720",
    "end": "1457179"
  },
  {
    "text": "controllable if you control the this argument so we know F is attacker controllable so F which is the implicit",
    "start": "1457179",
    "end": "1463419"
  },
  {
    "text": "this the function invoke is also attacker controllable so here's just one more example using that",
    "start": "1463419",
    "end": "1469240"
  },
  {
    "text": "compose function from the previous slide and basically you just run through exactly the same thing so argument one",
    "start": "1469240",
    "end": "1474850"
  },
  {
    "text": "gets passed in as argument one there one gets passed in is argument zero the implicit this and then using the last",
    "start": "1474850",
    "end": "1482110"
  },
  {
    "text": "step knowing that you return value is potentially attacker controllable we can derive that the return value gets passed",
    "start": "1482110",
    "end": "1489610"
  },
  {
    "text": "in as an attacker control value again assuming argument 0s attacker controllable so this is actually I feel",
    "start": "1489610",
    "end": "1495940"
  },
  {
    "text": "like harder to follow on a slide deck like this if you walk through the codes in the tool it's actually just you",
    "start": "1495940",
    "end": "1503140"
  },
  {
    "text": "execute bytecode one at a time and do what it says and then you output when you see a method call so it's actually",
    "start": "1503140",
    "end": "1508630"
  },
  {
    "text": "kind of easier to follow in detail then at this high-level alright so step four",
    "start": "1508630",
    "end": "1514330"
  },
  {
    "start": "1513000",
    "end": "1513000"
  },
  {
    "text": "if you're getting a little awesome worried this is completely independent of all the other steps step four is really simple we just want to enumerate",
    "start": "1514330",
    "end": "1521169"
  },
  {
    "text": "entry points for gadget chains and this is basically new ring entry points using known tricks and as an example we know",
    "start": "1521169",
    "end": "1527799"
  },
  {
    "text": "that hash code is an entry point because of what I described on those previous slides we know we can wrap it in a hash",
    "start": "1527799",
    "end": "1533169"
  },
  {
    "text": "map and therefore to get the hash code so this is one of the other limitations of this analysis is that it relies on",
    "start": "1533169",
    "end": "1539980"
  },
  {
    "text": "some known tricks now the hash mapping wrapping with its matching method and",
    "start": "1539980",
    "end": "1545260"
  },
  {
    "text": "calling hash code we've actually be able to derive from those method invocations in the previous step but there's other",
    "start": "1545260",
    "end": "1551260"
  },
  {
    "text": "neat tricks that researchers have come up with like wrapping things in a dynamic proxy which gets you into an",
    "start": "1551260",
    "end": "1556720"
  },
  {
    "text": "invocation handler dot invoke method that you wouldn't be able to derive from this analysis because that sort of built",
    "start": "1556720",
    "end": "1562210"
  },
  {
    "text": "into how the JVM works with these dynamic proxies so there's definitely if as researchers come up with other clever",
    "start": "1562210",
    "end": "1569440"
  },
  {
    "text": "tricks for entry points into a gadget chain this this tool could be enhanced with and potentially find some more",
    "start": "1569440",
    "end": "1575559"
  },
  {
    "text": "gadget chains but that's all this does is it basically looks at method signatures and it's like I know that's an entry point all right so the last",
    "start": "1575559",
    "end": "1582580"
  },
  {
    "start": "1581000",
    "end": "1581000"
  },
  {
    "text": "step is just putting it all together we have this graph call we have this call",
    "start": "1582580",
    "end": "1588820"
  },
  {
    "text": "graph of method invocations and what methods invoke other ones we have entry points so literally all we do now is a",
    "start": "1588820",
    "end": "1595210"
  },
  {
    "text": "breadth-first search through this call graph starting at these entry points and output a gadget chain",
    "start": "1595210",
    "end": "1601389"
  },
  {
    "text": "when we reach an interesting method so let's just walk through this basically coming up with that gadget chain I had",
    "start": "1601389",
    "end": "1606849"
  },
  {
    "text": "from one of the first slides so we have this starting point and then we have all those method invocations there where we",
    "start": "1606849",
    "end": "1613389"
  },
  {
    "text": "call function dot invoke and pass an argument 1 or argument 0 and so the next assumption I make here is that we can",
    "start": "1613389",
    "end": "1619839"
  },
  {
    "text": "jump to any method implementation we choose as long as it's in a serializable class and again this is just because",
    "start": "1619839",
    "end": "1626289"
  },
  {
    "text": "we're in this context where an attacker controls all of these methods and what class gets instantiated as one of those",
    "start": "1626289",
    "end": "1633309"
  },
  {
    "text": "member values so this is literally how you construct those gadget chains which is the attacker specifies what class",
    "start": "1633309",
    "end": "1640239"
  },
  {
    "text": "type you should supply as these members so what so when we enumerate all the",
    "start": "1640239",
    "end": "1645940"
  },
  {
    "text": "different places we can go to in this graph we choose every of mendacious to start our graph search so as an example",
    "start": "1645940",
    "end": "1655450"
  },
  {
    "text": "using that method call we might include function compose out invoke as one particular mentation you look at all the",
    "start": "1655450",
    "end": "1662200"
  },
  {
    "text": "things that invokes and as we are walking through this we say all right while we might choose the eval function",
    "start": "1662200",
    "end": "1667269"
  },
  {
    "text": "as the implementation we invoke here and then inside that eval function we know",
    "start": "1667269",
    "end": "1672879"
  },
  {
    "text": "that it calls runtime exec and then you end up with this gadget chain because we know runtime exec is interesting you can",
    "start": "1672879",
    "end": "1678279"
  },
  {
    "text": "invoke arbitrary code with it so this is how the tool ends up outputting a bunch of gadget chains it discovers some of",
    "start": "1678279",
    "end": "1683829"
  },
  {
    "text": "the class paths so the last limitation that I'll describe is that it relies on",
    "start": "1683829",
    "end": "1690070"
  },
  {
    "text": "some known interesting sink so obviously runtime exec is one we know about and there's a whole list of other",
    "start": "1690070",
    "end": "1695229"
  },
  {
    "text": "interesting ones that have been built into your gadget inspector so things like opening files writing files opening",
    "start": "1695229",
    "end": "1700269"
  },
  {
    "text": "URLs doing dns lookups terminating the JVM lots of interesting syncs that exist",
    "start": "1700269",
    "end": "1706389"
  },
  {
    "text": "in there but it's entirely possible that I've missed some more interesting things so just enumerated more of those could",
    "start": "1706389",
    "end": "1712029"
  },
  {
    "text": "also potentially find some more gadget chains so in everything I've described",
    "start": "1712029",
    "end": "1717940"
  },
  {
    "start": "1715000",
    "end": "1715000"
  },
  {
    "text": "one thing that I've left out is how do you deal with this if you're working",
    "start": "1717940",
    "end": "1723190"
  },
  {
    "text": "with different types of DC realization libraries well basically everything I've described is parameterize Abul so what",
    "start": "1723190",
    "end": "1729999"
  },
  {
    "text": "classes are considered considered serializable well you can pass that in as a parameter to the",
    "start": "1729999",
    "end": "1735300"
  },
  {
    "text": "analysis and say classes implementing this interface are serializable or",
    "start": "1735300",
    "end": "1741520"
  },
  {
    "text": "classes of no art constructors are serializable and that will determine how you do that graph search and step 5",
    "start": "1741520",
    "end": "1746970"
  },
  {
    "text": "different D serialization sources exist different matching methods between different libraries again parameter",
    "start": "1746970",
    "end": "1753130"
  },
  {
    "text": "eyes'll and step 4 and what a method implementation should you consider for things like the JRE object input stream",
    "start": "1753130",
    "end": "1760060"
  },
  {
    "text": "that's basically any implementation you want but for something like Jackson there's annotations you can put on",
    "start": "1760060",
    "end": "1766300"
  },
  {
    "text": "methods that determine what data types can be used for those member values so it depends and all of that's",
    "start": "1766300",
    "end": "1771970"
  },
  {
    "text": "parameterize bol in this analysis though so alright lots of talk about lots of",
    "start": "1771970",
    "end": "1777850"
  },
  {
    "text": "things that this tool does and lots of",
    "start": "1777850",
    "end": "1783010"
  },
  {
    "text": "assumptions that it makes so the question is does it actually find anything useful or is it just false",
    "start": "1783010",
    "end": "1788110"
  },
  {
    "text": "positive heavy and totally useless so first thing I did was set out to scan some open source libraries and see what",
    "start": "1788110",
    "end": "1794620"
  },
  {
    "text": "it comes up with so Rand gadget inspector against 100 most popular",
    "start": "1794620",
    "end": "1800140"
  },
  {
    "start": "1796000",
    "end": "1796000"
  },
  {
    "text": "libraries as listed on maven repository comm and look for exploits against Java d serialization the built-in object",
    "start": "1800140",
    "end": "1806680"
  },
  {
    "text": "input stream so it did rediscover several known gadget chains so that's good that means it's actually finding",
    "start": "1806680",
    "end": "1812350"
  },
  {
    "text": "things I know it should find so thumbs up it's it's doing something useful it turns out that not that many open source",
    "start": "1812350",
    "end": "1818980"
  },
  {
    "text": "libraries actually implement classes that implement serializable it's not",
    "start": "1818980",
    "end": "1824140"
  },
  {
    "text": "that popular these days to use the object input stream but there were a few new things that fall into that class so",
    "start": "1824140",
    "end": "1830950"
  },
  {
    "text": "I'm going to talk about those it did actually find some interesting new stuff it did have a handful of false positives because there are some assumptions but",
    "start": "1830950",
    "end": "1837580"
  },
  {
    "text": "there's not that as many as you'd expect and I think it's because most of those assumptions I made are reasonably valid",
    "start": "1837580",
    "end": "1843340"
  },
  {
    "text": "they make sense in this context most of the sources of false positives is because reflection is hard so old gadget",
    "start": "1843340",
    "end": "1851170"
  },
  {
    "start": "1850000",
    "end": "1850000"
  },
  {
    "text": "chain so comments collections this is the big one that you know fro often Lorenz talk about in 2015 and the reason",
    "start": "1851170",
    "end": "1857830"
  },
  {
    "text": "that this one was so interesting is that it was in Commons collections this is a 38 most popular library according to",
    "start": "1857830",
    "end": "1863350"
  },
  {
    "text": "maven repository and this is basically what's the they started that catch a",
    "start": "1863350",
    "end": "1868840"
  },
  {
    "text": "chain like you wrapped something in a dynamic proxy you get into the occasion handler entry point you go to this lazy map in",
    "start": "1868840",
    "end": "1875740"
  },
  {
    "text": "Commons collections and then you're able to do some reflection stuff and get somewhere interesting so cool found the",
    "start": "1875740",
    "end": "1881799"
  },
  {
    "text": "Commons collections Gacha chains doing something useful the very first thing that gadget inspector discovered though",
    "start": "1881799",
    "end": "1887740"
  },
  {
    "start": "1885000",
    "end": "1885000"
  },
  {
    "text": "was the gadget chaining closure and we thought Commons collections was interesting because the 38 most popular",
    "start": "1887740",
    "end": "1893530"
  },
  {
    "text": "library closure is the six most popular library so this was really interesting to me so it found a gadget chain",
    "start": "1893530",
    "end": "1899950"
  },
  {
    "text": "starting in hashcode and got down to the bottom here where basically it was able to read an arbitrary file from disk and",
    "start": "1899950",
    "end": "1906160"
  },
  {
    "text": "execute it as closure so it turns out that by tweaking that last step and instead of calling load file you call",
    "start": "1906160",
    "end": "1911799"
  },
  {
    "text": "eval you get exactly the gadget chain that have kind of been describing at the beginning of the talk so that turned",
    "start": "1911799",
    "end": "1918100"
  },
  {
    "text": "into an RTC gadget chain it's been in all versions of closure since like one point 2.0 which is like eight years old",
    "start": "1918100",
    "end": "1924549"
  },
  {
    "text": "or something and I reported that to closure dev mailing list and they",
    "start": "1924549",
    "end": "1929799"
  },
  {
    "text": "decided to turn off serialization for this class because like who in the world even uses that anyway so that's great",
    "start": "1929799",
    "end": "1936130"
  },
  {
    "text": "version one nine zero release doesn't have that gadget chain anymore so cool",
    "start": "1936130",
    "end": "1941290"
  },
  {
    "text": "progress all right what else did gadget inspector find so it found stuff in Scala so that's the third most popular",
    "start": "1941290",
    "end": "1947679"
  },
  {
    "start": "1943000",
    "end": "1943000"
  },
  {
    "text": "library on maven repository comm so this one isn't RCE so maybe a little bit less interesting",
    "start": "1947679",
    "end": "1953110"
  },
  {
    "text": "to you but it did but it is able to write out a zero byte file why is that",
    "start": "1953110",
    "end": "1958929"
  },
  {
    "text": "interesting well let's you overwrite a file with zero bytes which can potentially cause some denial of service if you overwrite your application",
    "start": "1958929",
    "end": "1965020"
  },
  {
    "text": "resources that could then just crash your your application so that's kind of interesting it also found just a slight",
    "start": "1965020",
    "end": "1973870"
  },
  {
    "text": "variation on that gadget chain where it will do an SS RF so it gets at an",
    "start": "1973870",
    "end": "1979150"
  },
  {
    "text": "arbitrary URL with with your application so cool it's finding useful stuff all",
    "start": "1979150",
    "end": "1985870"
  },
  {
    "text": "right just before I put these slides together I reran the analysis on closure it turns",
    "start": "1985870",
    "end": "1992770"
  },
  {
    "text": "out that there's actually a different entry points that gives you exactly the same gadget chain so even though they",
    "start": "1992770",
    "end": "1999640"
  },
  {
    "text": "remove that gadget chain and 1-9 oh it turns out they're still actually an RC e gadget chain in all versions",
    "start": "1999640",
    "end": "2005380"
  },
  {
    "text": "released since then so I haven't actually followed up with the closure dev mailing list but it turns out if",
    "start": "2005380",
    "end": "2010600"
  },
  {
    "text": "you've got an application that's doing unsafe D serialization and you've got the six most popular library on your",
    "start": "2010600",
    "end": "2015760"
  },
  {
    "text": "class path then there's an RC e in there so yeah hopefully this is just reiterating the fact that you got to",
    "start": "2015760",
    "end": "2021730"
  },
  {
    "text": "stop doing unsafety serialization okay so that's all great it proved that",
    "start": "2021730",
    "end": "2026770"
  },
  {
    "text": "gadget inspector is doing something useful for open source libraries but the",
    "start": "2026770",
    "end": "2031870"
  },
  {
    "text": "whole point of this was to be able to tell me about the risk of my applications I wanted to know whether or",
    "start": "2031870",
    "end": "2037150"
  },
  {
    "text": "not there's some gadget chain that's unique to my app under some unique constraints about the D serialization",
    "start": "2037150",
    "end": "2042790"
  },
  {
    "text": "that I'm doing so first app that I",
    "start": "2042790",
    "end": "2047800"
  },
  {
    "start": "2045000",
    "end": "2045000"
  },
  {
    "text": "looked at was an app that was doing some unsafety civilization with jackson where an attacker could specify what class",
    "start": "2047800",
    "end": "2054158"
  },
  {
    "text": "were deserializing and the whole meth and the whole payload so because we're using jackson and its default",
    "start": "2054159",
    "end": "2060158"
  },
  {
    "text": "configuration it can only deserialize classes with no art constructors and the only entry points are going to be those",
    "start": "2060159",
    "end": "2065830"
  },
  {
    "text": "constructors but there's a 200 megabyte class path on this app so maybe there's something there like we spent a little",
    "start": "2065830",
    "end": "2072100"
  },
  {
    "text": "while looking at it manually and we couldn't decide but it's like this is kind of icky like we don't know if",
    "start": "2072100",
    "end": "2077230"
  },
  {
    "text": "there's some rain and constructor out there that does something interesting so I ran gas inspector it didn't find",
    "start": "2077230",
    "end": "2082840"
  },
  {
    "text": "anything so all right cool maybe we don't actually need to worry about this so that's a good lesson in how this saved",
    "start": "2082840",
    "end": "2088990"
  },
  {
    "text": "us some time we didn't spend that much time remediating it it's probably dropped down we eventually fixed it but it wasn't something where we had to drop",
    "start": "2088990",
    "end": "2094960"
  },
  {
    "text": "everything and fix this before we could get out some more features but of course",
    "start": "2094960",
    "end": "2100630"
  },
  {
    "text": "I'm not gonna leave you with that let's get to something more interesting so there was a second web app which was",
    "start": "2100630",
    "end": "2105910"
  },
  {
    "text": "using a non-standard D serialization library when an attacker could specify what data types DC relies but had some",
    "start": "2105910",
    "end": "2112240"
  },
  {
    "text": "really weird and interesting constraints on it it didn't use the read object magic methods but it did use read",
    "start": "2112240",
    "end": "2118000"
  },
  {
    "text": "resolve so your lies objects didn't need to implement serializable but they did have a bunch of other restrictions so",
    "start": "2118000",
    "end": "2124300"
  },
  {
    "text": "they couldn't have any member fields with dollars in the name it couldn't have any arrays or generic Matz's",
    "start": "2124300",
    "end": "2131320"
  },
  {
    "text": "numbers and it couldn't have any null member values and that was the kicker because it means that if it",
    "start": "2131320",
    "end": "2136910"
  },
  {
    "text": "had some value that was like a character array or a byte array or something that it wasn't C realizable by this library because",
    "start": "2136910",
    "end": "2143809"
  },
  {
    "text": "that couldn't be null and this doesn't support serializing arrays so it was hard to tell for that matter what",
    "start": "2143809",
    "end": "2150489"
  },
  {
    "text": "classes on a class path were even serializable and because there are no",
    "start": "2150489",
    "end": "2156529"
  },
  {
    "text": "null values this is a recursive requirement all of its member types also",
    "start": "2156529",
    "end": "2161630"
  },
  {
    "text": "had to be satisfied these restrictions so it was hard to tell what was even serializable in this case much less",
    "start": "2161630",
    "end": "2168109"
  },
  {
    "text": "whether or not gadget chains existed but I found something so this gadget chain",
    "start": "2168109",
    "end": "2173839"
  },
  {
    "text": "is 12 steps deep and you know don't look at exactly what the different methods",
    "start": "2173839",
    "end": "2178880"
  },
  {
    "text": "are because that's not nearly as interesting it's just a fact of what the different packages are so there are",
    "start": "2178880",
    "end": "2183890"
  },
  {
    "text": "seven different libraries involved in this gadget chain including classes in the app itself and some JRE classes so",
    "start": "2183890",
    "end": "2191719"
  },
  {
    "text": "this is something we're just looking at a project like Y so cereal or Marshalls heck wouldn't have been able to tell you",
    "start": "2191719",
    "end": "2197180"
  },
  {
    "text": "that there's a gadget chain that exists when you have this random collection of classes in your class path plus some",
    "start": "2197180",
    "end": "2203029"
  },
  {
    "text": "behavior that's unique to classes in your app and so this was incredibly cool and what this what this gadget chain",
    "start": "2203029",
    "end": "2211190"
  },
  {
    "text": "does is it copies a file from an arbitrary location to an arbitrary location so we were able to do with this",
    "start": "2211190",
    "end": "2217219"
  },
  {
    "text": "is copy private keys into the web app resource directory and exfiltrate secrets off of that box but a few",
    "start": "2217219",
    "end": "2224269"
  },
  {
    "text": "minutes of manually inspecting this after the fact what you realize is that there's a stream pumper thing ATS line 8",
    "start": "2224269",
    "end": "2230329"
  },
  {
    "text": "which basically copies an input stream to an output stream so there's a small tweak you can do on this where you",
    "start": "2230329",
    "end": "2235819"
  },
  {
    "text": "specify a arbitrary string as your input stream and then an arbitrary file path as your output stream and now I can",
    "start": "2235819",
    "end": "2242690"
  },
  {
    "text": "write arbitrary string to a JSP file and yet RCE with this gadget chain so this",
    "start": "2242690",
    "end": "2247789"
  },
  {
    "text": "was even worse than what gadget inspector originally thought it was and so that's amazing this thing was",
    "start": "2247789",
    "end": "2253309"
  },
  {
    "text": "able to tell us any course of a few minutes that there was an order to e gadget chain in this app so that is a",
    "start": "2253309",
    "end": "2258499"
  },
  {
    "text": "huge win so there's lots of room for improvement with this tool it chokes on",
    "start": "2258499",
    "end": "2263719"
  },
  {
    "start": "2259000",
    "end": "2259000"
  },
  {
    "text": "reflection a little bit I talked about the assumptions that it makes I talked about the limitations that exist",
    "start": "2263719",
    "end": "2268750"
  },
  {
    "text": "with with knowing about different sources and different sinks but one of",
    "start": "2268750",
    "end": "2275050"
  },
  {
    "start": "2275000",
    "end": "2275000"
  },
  {
    "text": "the things that I really think is worth taking away from this is that I think it's completely uncharted territory for the D serialization space automatically",
    "start": "2275050",
    "end": "2281860"
  },
  {
    "text": "finding these gadget chains and I feel like it's proven just in this sort of proof of concept that I've built that",
    "start": "2281860",
    "end": "2288100"
  },
  {
    "text": "it's able to find some really useful things and you know as I mentioned at the beginning going through the history",
    "start": "2288100",
    "end": "2293620"
  },
  {
    "text": "of DC realization vulnerabilities they're not going away yet there's still things we have to deal with and we're",
    "start": "2293620",
    "end": "2298930"
  },
  {
    "text": "still realizing that there's new libraries that are subject to these kind of vulnerabilities so and hopefully as",
    "start": "2298930",
    "end": "2305890"
  },
  {
    "text": "our last example showed they gadget chains that were able to build through these sorts of vulnerabilities are",
    "start": "2305890",
    "end": "2311350"
  },
  {
    "text": "getting more and more complicated and more and more sophisticated so I think",
    "start": "2311350",
    "end": "2317020"
  },
  {
    "text": "we need better tools that are better able to understand our risk profile in these sorts of applications so this tool",
    "start": "2317020",
    "end": "2323380"
  },
  {
    "text": "is open source I just pushed it to github so take a look at it feel free to submit PRS feel free to just take the",
    "start": "2323380",
    "end": "2329350"
  },
  {
    "text": "ideas and build something robust but hopefully I just hope that people come",
    "start": "2329350",
    "end": "2334630"
  },
  {
    "text": "away looking at this and using these ideas to to improve the state of the",
    "start": "2334630",
    "end": "2340630"
  },
  {
    "text": "worlds when it comes to DC's H and vulnerabilities so hit me up online if you want to afterwards and that's all",
    "start": "2340630",
    "end": "2346480"
  },
  {
    "text": "I've got thank you [Applause]",
    "start": "2346480",
    "end": "2351960"
  },
  {
    "text": "thank you",
    "start": "2351960",
    "end": "2354710"
  }
]