[
  {
    "text": "foreign",
    "start": "1979",
    "end": "4159"
  },
  {
    "text": "welcome to my talk dirty vanity a new approach the code injection and ADL bypass my name is elyran Nissan",
    "start": "9620",
    "end": "16980"
  },
  {
    "text": "I'm a security researcher at Deep Instinct this is my Twitter handle if anybody would want to contact me after the session",
    "start": "16980",
    "end": "22800"
  },
  {
    "text": "a bit about my background I started around 10 years ago as a security researcher and IDF forensic researcher",
    "start": "22800",
    "end": "29099"
  },
  {
    "text": "and then I moved along to 2001 research in both the offensive and defensive side",
    "start": "29099",
    "end": "34200"
  },
  {
    "text": "but my main forward and what I like to do is the defensive side I like solving security issues and windows internals",
    "start": "34200",
    "end": "39899"
  },
  {
    "text": "and I don't like cyber crime or lactose I'm sensitive so please none of these in this in this session",
    "start": "39899",
    "end": "46079"
  },
  {
    "text": "so a bit of overview the goal of my session is to showcase the dirty vanity a new injection technique that abuses",
    "start": "46079",
    "end": "53160"
  },
  {
    "text": "forking which is a mechanism for process Creation in Linux but it's lesser known to to be existing in Windows as well",
    "start": "53160",
    "end": "59340"
  },
  {
    "text": "before we'll dive into dirty vanity we'll lay some foundations starting off with forking background a bit of forking",
    "start": "59340",
    "end": "65760"
  },
  {
    "text": "in Windows and whites there API to invoke it the internals behind those forking mechanisms and we'll go to the",
    "start": "65760",
    "end": "72299"
  },
  {
    "text": "Divinity finally so starting off uh forking background so forking is the",
    "start": "72299",
    "end": "79439"
  },
  {
    "text": "act of creating a new process from the calling process of it a lot of you know this it originates from the Unix system",
    "start": "79439",
    "end": "86040"
  },
  {
    "text": "calls of process creation for can execute in this example here we have parent that will issue a four call and",
    "start": "86040",
    "end": "92700"
  },
  {
    "text": "it's this will create an identical child that will resume its execution just after the forks return and then the",
    "start": "92700",
    "end": "98939"
  },
  {
    "text": "parrot as well will resume execution after the fork but what will differentiate between the parent and the",
    "start": "98939",
    "end": "104579"
  },
  {
    "text": "child that are identical is the return code here the return code will be uh will be zero the for the child and",
    "start": "104579",
    "end": "111659"
  },
  {
    "text": "symbolize the child's execution to in this example execute an exit call to replace its image and the parent will",
    "start": "111659",
    "end": "117840"
  },
  {
    "text": "execute on a different return code on the else branch okay so most of you",
    "start": "117840",
    "end": "123000"
  },
  {
    "text": "maybe know this so the origins of the windows Fork so Windows doesn't use uh fork and",
    "start": "123000",
    "end": "129239"
  },
  {
    "text": "execute for process creation but it did support it with its Legacy posix subsystem a subsystem that is intended",
    "start": "129239",
    "end": "135959"
  },
  {
    "text": "to support basic Unix binary execution in this subsystem is included the ps6",
    "start": "135959",
    "end": "142200"
  },
  {
    "text": "dll which exports basic unique API and among them this Fork snippet or the fork",
    "start": "142200",
    "end": "149220"
  },
  {
    "text": "to support Unix runtime and we can see that internally it's implemented with a call to RTL clone user process and ntdll",
    "start": "149220",
    "end": "156300"
  },
  {
    "text": "Export we'll dive into it later but this is how the fork is introduced into windows",
    "start": "156300",
    "end": "162420"
  },
  {
    "text": "so a bit of mechanisms nowadays that use forking windows first one is process reflection the goal",
    "start": "162420",
    "end": "168660"
  },
  {
    "text": "of forces of election is to allow analysis and processes that should constantly provide service and why is",
    "start": "168660",
    "end": "173879"
  },
  {
    "text": "this an issue why is this a need let's take for example this debugger here and let's say it wants to debug service exe",
    "start": "173879",
    "end": "179519"
  },
  {
    "text": "that provides some crucial service to the operation systems runtime if the bugger will resume to debug this",
    "start": "179519",
    "end": "186060"
  },
  {
    "text": "process it will render the service unable to provide service and then disrupt the system",
    "start": "186060",
    "end": "191280"
  },
  {
    "text": "so what reflection does is it allows us to Fork the set process to be analyzed",
    "start": "191280",
    "end": "197340"
  },
  {
    "text": "and then we can analyze the suspended Fork without interrupting the system how",
    "start": "197340",
    "end": "202560"
  },
  {
    "text": "its work is this is the component's windows that uses a wdi Windows diagnostic infrastructure that makes use",
    "start": "202560",
    "end": "208140"
  },
  {
    "text": "of process reflection to do such things in this example wdi instead of debugging service directly will issue a call of",
    "start": "208140",
    "end": "214500"
  },
  {
    "text": "RTL create process reflection that internally causes service to Fork itself and will create a clone service then wdi",
    "start": "214500",
    "end": "222540"
  },
  {
    "text": "would can resume to debug this process or do whatever dump its memory okay another mechanism some a bit more",
    "start": "222540",
    "end": "230640"
  },
  {
    "text": "well-known one is process snapshotting another mechanism similar to the last one that allows us to query data from",
    "start": "230640",
    "end": "236340"
  },
  {
    "text": "process States and memory data but it does so this is a descriptions of msdn",
    "start": "236340",
    "end": "241560"
  },
  {
    "text": "using the windows internal posix for clone capability the one that we just covered the API name that invokes it is",
    "start": "241560",
    "end": "248159"
  },
  {
    "text": "PSS capture snapshot okay our next example of forking is that",
    "start": "248159",
    "end": "253560"
  },
  {
    "text": "involves the credential defense realm let's cover a basic credential cadential attack and credential defense in it we",
    "start": "253560",
    "end": "259919"
  },
  {
    "text": "have the Elsa's process that contains the OS credentials and an attackers",
    "start": "259919",
    "end": "265080"
  },
  {
    "text": "would usually want to read it using let's say mini dump ride damp or other reading apis and then edrs for CDs and",
    "start": "265080",
    "end": "271500"
  },
  {
    "text": "protect these attempts forking is introduced to credential theft it's a known example of abuse of",
    "start": "271500",
    "end": "277979"
  },
  {
    "text": "forking and in it instead of the reading Elsa's directly the attacker will issue a snapshot or reflection",
    "start": "277979",
    "end": "284720"
  },
  {
    "text": "API which is underlining implemented with a fork to clone Elsas",
    "start": "284720",
    "end": "290820"
  },
  {
    "text": "and then the attacker could then proceed to do a mini dump or read of the answers clone which will leave the EDR unaware",
    "start": "290820",
    "end": "297120"
  },
  {
    "text": "of most of some of the areas don't attempt to foresee this",
    "start": "297120",
    "end": "303419"
  },
  {
    "text": "so we moved along basic lines of working usages and abuse and a common abuse in Windows let's go into forking internals",
    "start": "303419",
    "end": "310680"
  },
  {
    "text": "the forking has a forking has as we as we saw has a point of power in the system and can allow us to manipulate",
    "start": "310680",
    "end": "316500"
  },
  {
    "text": "the system before diving into 4K internals internals let's distinguish between two",
    "start": "316500",
    "end": "322020"
  },
  {
    "text": "forking types the cell fork and the remote Fork so when the cell Fork a",
    "start": "322020",
    "end": "327180"
  },
  {
    "text": "process will request the kernel to Fork itself causing a fork to be created which is identical to the process to the",
    "start": "327180",
    "end": "333539"
  },
  {
    "text": "calling process in a remote Fork which is allowed in Windows the process can request from the kernel",
    "start": "333539",
    "end": "339539"
  },
  {
    "text": "to Fork a different process the target process which is done in the reflection snap floating mechanisms and then the",
    "start": "339539",
    "end": "345539"
  },
  {
    "text": "kernel will create a targets clone for the process and it's called to Target",
    "start": "345539",
    "end": "350699"
  },
  {
    "text": "the Target clone will be considered the target's child okay",
    "start": "350699",
    "end": "356220"
  },
  {
    "text": "starting off with the first 4K API that we've seen the RTL clone user process the self Fork that implements the Unix",
    "start": "356220",
    "end": "362580"
  },
  {
    "text": "work in ps6 dll contains a regular set of parameters and when issuing it it",
    "start": "362580",
    "end": "368520"
  },
  {
    "text": "will clone the calling process let's see how it's actually implemented in ntdll this is its code basic",
    "start": "368520",
    "end": "375900"
  },
  {
    "text": "acquiring of flux at the beginning of its runtime and then calling a wrapper to rtlp create user processor wrapper to",
    "start": "375900",
    "end": "381539"
  },
  {
    "text": "anti-create user process the Cisco to create processes in Windows which",
    "start": "381539",
    "end": "386840"
  },
  {
    "text": "traditionally points to a section handle file and creates a process from it but when given the correct parameters it",
    "start": "386840",
    "end": "393060"
  },
  {
    "text": "will create a process from a parent process handle after the API executes article clone is",
    "start": "393060",
    "end": "401160"
  },
  {
    "text": "a process uses the return code in Windows 297 signifies uh child handling and the child code will be handled in",
    "start": "401160",
    "end": "407699"
  },
  {
    "text": "this if condition and on a zero return code set to success the parent will be managed",
    "start": "407699",
    "end": "414439"
  },
  {
    "text": "okay this is how the actual anti-create user process is called looks and what",
    "start": "414960",
    "end": "420060"
  },
  {
    "text": "creates the actual fork and the parameter that's responsible to it is attribute list PPS attribute list and",
    "start": "420060",
    "end": "426539"
  },
  {
    "text": "when populated with the correct way it will clone the calling process we create the public attribute list and populate",
    "start": "426539",
    "end": "432180"
  },
  {
    "text": "it with a PS attribute parent process this is how Windows treats processes to be cloned and if we set its value value",
    "start": "432180",
    "end": "439560"
  },
  {
    "text": "PTR to get to the current process handle and set these arguments to the anti-create user processes call this",
    "start": "439560",
    "end": "445800"
  },
  {
    "text": "will clone the calling process but what I want to see because I want to see if this is a okay this is this is capable",
    "start": "445800",
    "end": "452039"
  },
  {
    "text": "of forking a remote process because this is the stronger way to manipulate the system",
    "start": "452039",
    "end": "457440"
  },
  {
    "text": "so uh I'll try to I want to check if this is possible if I can set our remote",
    "start": "457440",
    "end": "462960"
  },
  {
    "text": "different process handle to the calling process so let's see what I did to examine this I created 4K vxc just to",
    "start": "462960",
    "end": "470340"
  },
  {
    "text": "use this to clone and explore XA and and uh issued the the call with attributes",
    "start": "470340",
    "end": "477180"
  },
  {
    "text": "that point into the Explorer parent and I got this status invalid parameter in Windows that signifies something went",
    "start": "477180",
    "end": "483419"
  },
  {
    "text": "wrong so I want to see if something went wrong because of this is an API limitation or something I wrote wrong in",
    "start": "483419",
    "end": "490020"
  },
  {
    "text": "my code so let's debug this in win dbg",
    "start": "490020",
    "end": "495500"
  },
  {
    "text": "a side of integrate user process and this is a large function so I don't want to step in every assembly execution line",
    "start": "496800",
    "end": "503340"
  },
  {
    "text": "but I want to see where this return code of status and value parameter originates okay so I'll take the call stack and",
    "start": "503340",
    "end": "509940"
  },
  {
    "text": "I'll see the return address from this function and then I'll issue this command PIR to step to each and every",
    "start": "509940",
    "end": "516060"
  },
  {
    "text": "assembly line of execution of this function and I'll see where this return code of establishing value parameter",
    "start": "516060",
    "end": "523200"
  },
  {
    "text": "originates I can see that finally it returns it in our in the RX register but in order to find why it's originating",
    "start": "523200",
    "end": "530459"
  },
  {
    "text": "I will search the entire output for the for this value and I can see the address in which it's uh originating",
    "start": "530459",
    "end": "537600"
  },
  {
    "text": "and I can see the reason why it's originating because of a comparison between two registers r13 and R6 I can",
    "start": "537600",
    "end": "544080"
  },
  {
    "text": "get the values from the trace I see because they are not equal the value is",
    "start": "544080",
    "end": "549360"
  },
  {
    "text": "being assigned so looks like the API is intended to do this these values are e-process values I'm not showing it here",
    "start": "549360",
    "end": "555180"
  },
  {
    "text": "but it can be seen with the disassembly but when I'm checking these eprocess values I can see that they point to the",
    "start": "555180",
    "end": "561120"
  },
  {
    "text": "Explorer that I'm trying to clone in my own calling process so this API is limited to a local Fork not good for a",
    "start": "561120",
    "end": "568320"
  },
  {
    "text": "remote forking means so how do how is the remote forking working because remote for can can execute in Windows so",
    "start": "568320",
    "end": "575100"
  },
  {
    "text": "I'll examine the known working mechanisms snapshotting starting off with snapshotting in order to invoke a",
    "start": "575100",
    "end": "581580"
  },
  {
    "text": "remote fork with SNAP floating I'll point it to a process handle to 4K to create a snapshot of it and underlyingly",
    "start": "581580",
    "end": "588480"
  },
  {
    "text": "it points to PSS Capital snaps PSS and the capsule snapshot of anti-dll that",
    "start": "588480",
    "end": "594000"
  },
  {
    "text": "redirects to anti-create process ex and older siblings integrate user process and all the system calls for process",
    "start": "594000",
    "end": "600240"
  },
  {
    "text": "creation but those this one can actually Fork a remote process how it's very simple",
    "start": "600240",
    "end": "606060"
  },
  {
    "text": "we can see here both anti-create process ex and it's even older sibling and the",
    "start": "606060",
    "end": "611399"
  },
  {
    "text": "great process can be pointed to a parent process simple as that and then we one will provide this argument and put a",
    "start": "611399",
    "end": "618060"
  },
  {
    "text": "null section handle we'll get a fork of the calling we get a fork of the for process store liking this is how the",
    "start": "618060",
    "end": "624720"
  },
  {
    "text": "parameters need to be set process to before to be inputted here and now for the section handle",
    "start": "624720",
    "end": "630300"
  },
  {
    "text": "and this will Fork a remote process okay on to the to the next remote forking mechanism we've covered",
    "start": "630300",
    "end": "636779"
  },
  {
    "text": "reflection so reflection has an even more interesting signature it can be guided into a process to Fork uh process",
    "start": "636779",
    "end": "643440"
  },
  {
    "text": "handle and then it has two extra parameters that are interesting start routine and start context meaning I can",
    "start": "643440",
    "end": "648540"
  },
  {
    "text": "start a fork from from a location of my liking with a limitation that we'll examine and a context a parameter to be",
    "start": "648540",
    "end": "656459"
  },
  {
    "text": "executed to be inserted to the routine so this is interesting to me so let's dive into the reflection mechanism and",
    "start": "656459",
    "end": "663360"
  },
  {
    "text": "see how it's actually implemented in Windows this is the flowchart of the uh",
    "start": "663360",
    "end": "669120"
  },
  {
    "text": "reflection mechanism of the reflection API flow but I'm going to guide you through each step",
    "start": "669120",
    "end": "674579"
  },
  {
    "text": "first we have in this example reflection requester that will request a reflection to be made on the target process",
    "start": "674579",
    "end": "682320"
  },
  {
    "text": "reflection requester will issue a call of RTL create process that will execute over the target with",
    "start": "682320",
    "end": "689459"
  },
  {
    "text": "the target handle and for the first step it will allocate a parameter block and we will map it to the Target memory space",
    "start": "689459",
    "end": "696839"
  },
  {
    "text": "and for the second phase it will invoke a call to rtlp create user thread which is a wrapper to create remote thread",
    "start": "696839",
    "end": "702600"
  },
  {
    "text": "that will work over the target with the starting entry point inside interior",
    "start": "702600",
    "end": "708060"
  },
  {
    "text": "level stop called rtlp process of election startup winning meaning the entry point or reflection",
    "start": "708060",
    "end": "714079"
  },
  {
    "text": "So This Thread will execute this entry point with the shell parameters that are mapped to the Target and it will cause",
    "start": "714079",
    "end": "720779"
  },
  {
    "text": "it to actually invoke a local code to RTL clone user process the local mechanism to request a fork in this case",
    "start": "720779",
    "end": "727920"
  },
  {
    "text": "and as we've covered this will call to the RTL 2 anti-create user process the",
    "start": "727920",
    "end": "735600"
  },
  {
    "text": "system calls it Forks a local calling process let's check how it's looking in the kernel side of things",
    "start": "735600",
    "end": "743120"
  },
  {
    "text": "the kennel side of things looks pretty similar starting up with the candle side of anti-create user process moving along",
    "start": "743240",
    "end": "749519"
  },
  {
    "text": "to PSP allocate process for process Creation in the kernel when things start to get different when moving to this API",
    "start": "749519",
    "end": "756120"
  },
  {
    "text": "I'm a initialized process address space and this time around the Boolean flag that signifies this is a clone operation",
    "start": "756120",
    "end": "762779"
  },
  {
    "text": "is being turned down because of the parameters that I've inserted to and to create user process that points to our",
    "start": "762779",
    "end": "768180"
  },
  {
    "text": "parent attribute and this time around the function has been invoked is hey my clone process",
    "start": "768180",
    "end": "775019"
  },
  {
    "text": "address space which does which does the actual cloning it creates a copy and write view of the of the target process",
    "start": "775019",
    "end": "781079"
  },
  {
    "text": "the process that is targeted and assigns the student to the newly created process effectively creating a clone of the",
    "start": "781079",
    "end": "787200"
  },
  {
    "text": "process okay this function finishes and returns to the context of anti-creator the",
    "start": "787200",
    "end": "792480"
  },
  {
    "text": "process in the kernel side and it returns two status codes status success to the to the Target that called",
    "start": "792480",
    "end": "798480"
  },
  {
    "text": "integrate user process and RTL cologne child 297 to the newly created Target clone which",
    "start": "798480",
    "end": "805740"
  },
  {
    "text": "contains the shared parameters block from the first step of the allocation meaning and Shadow locations in other",
    "start": "805740",
    "end": "812459"
  },
  {
    "text": "allocations that are created on the target will get cloned as well so this is very good for me for my intentions",
    "start": "812459",
    "end": "818880"
  },
  {
    "text": "we'll cover them in a bit so the RTL clone status code is returned",
    "start": "818880",
    "end": "824579"
  },
  {
    "text": "and the fog starts within the startup of outer process reflection startup just after the call to octal clone with the",
    "start": "824579",
    "end": "830940"
  },
  {
    "text": "process and for the first step of this clone runtime it sets the parameter in the ldr",
    "start": "830940",
    "end": "837420"
  },
  {
    "text": "to shut down in progress to be one this is the intentions for this fog so if we want to call these poses to be more",
    "start": "837420",
    "end": "843720"
  },
  {
    "text": "functional we're going to remember this for later to set this back to zero",
    "start": "843720",
    "end": "848880"
  },
  {
    "text": "and according to the Shell parameters block that I've specified it's going to choose whether to suspend the thread in",
    "start": "848880",
    "end": "854339"
  },
  {
    "text": "normal cases to allow it to be analyzed or to invoke a start routine that I've entered in the calling parameters",
    "start": "854339",
    "end": "861300"
  },
  {
    "text": "so according to Windows internals the Bible for Windows internals start routine must be implemented inside ntdll",
    "start": "861300",
    "end": "868680"
  },
  {
    "text": "context okay so I'm limited maybe I cannot write everything I like this is",
    "start": "868680",
    "end": "874079"
  },
  {
    "text": "what I'm where I'm going from and to end it to start executing the fork from it uh but so let's check this let's check",
    "start": "874079",
    "end": "881699"
  },
  {
    "text": "the invocation of the actual start routing in assembly this is the uh the entry point of the",
    "start": "881699",
    "end": "888899"
  },
  {
    "text": "the fork entry and how it's being actually invoked to start routine start routing is being pulled in in the fork",
    "start": "888899",
    "end": "895019"
  },
  {
    "text": "child to our ex and start context to R6 and then they are being invoked with the call to guard dispatch I call fptr which",
    "start": "895019",
    "end": "903120"
  },
  {
    "text": "if you know it's the mechanism of CFG being executed here CFG being controlled",
    "start": "903120",
    "end": "908160"
  },
  {
    "text": "flow guard and control flow God is a defense mechanism that prevents an execution of an invalid address and and",
    "start": "908160",
    "end": "915420"
  },
  {
    "text": "it verifies the address to be invoked in this case start routine to be a valid address but what it protects from is",
    "start": "915420",
    "end": "921420"
  },
  {
    "text": "memory corruption vulnerabilities and start within here is not caused with a",
    "start": "921420",
    "end": "927240"
  },
  {
    "text": "memory corruption it's caused because it's dynamically allocated and if if I'll allocated it with a page execute on",
    "start": "927240",
    "end": "934500"
  },
  {
    "text": "the process to be forked it will get forked and contain the same permissions and if I set it with a page execute CFG",
    "start": "934500",
    "end": "941760"
  },
  {
    "text": "will not protect from it so this is bad and I can execute every allocated process I've allocated a",
    "start": "941760",
    "end": "948839"
  },
  {
    "text": "memory from the fault parent but without limitation from cfgc if you want",
    "start": "948839",
    "end": "955320"
  },
  {
    "text": "disabled me to do this so I can abuse it",
    "start": "955320",
    "end": "960480"
  },
  {
    "text": "so let's recap what they just covered we mapped the remote forking methods of",
    "start": "960480",
    "end": "966320"
  },
  {
    "text": "anti-create process and and rtlk rtlk process reflection",
    "start": "966320",
    "end": "972060"
  },
  {
    "text": "integrate process and process the XR system calls that are being directed to a remote process and the kernel will",
    "start": "972060",
    "end": "979019"
  },
  {
    "text": "Fork them for me completely and RTL create process reflection will cause the process that",
    "start": "979019",
    "end": "985440"
  },
  {
    "text": "I'm targeting to invoke itself a call to a local Fork to be invoked by focusing",
    "start": "985440",
    "end": "991139"
  },
  {
    "text": "on the second method we can familiarity with the forking internals including the kernel side which is similar to the",
    "start": "991139",
    "end": "997440"
  },
  {
    "text": "anti-api authentic related process and process CX and we see that we've seen that Mi clone process address space does",
    "start": "997440",
    "end": "1003860"
  },
  {
    "text": "the actual clone and copies the parent's memory as a copy and write view to the child memory",
    "start": "1003860",
    "end": "1010100"
  },
  {
    "text": "and we established that a protection that supposedly existing on the start on",
    "start": "1010100",
    "end": "1015139"
  },
  {
    "text": "the start address of the fork in the reflection it has a flaw that it doesn't protect from dynamic memory addresses",
    "start": "1015139",
    "end": "1020540"
  },
  {
    "text": "that contains executor privilege so it's time to talk dirty vanity",
    "start": "1020540",
    "end": "1026740"
  },
  {
    "text": "uh so dirty vanity is an injection technique okay so let's cover basic injection and injection defense before",
    "start": "1028400",
    "end": "1035058"
  },
  {
    "text": "doing uh dirty vanity in injections we have a couple of necessary Primitives",
    "start": "1035059",
    "end": "1041120"
  },
  {
    "text": "allocation writing and execution allocation is optional because someone might find an area that's already",
    "start": "1041120",
    "end": "1046880"
  },
  {
    "text": "allocated and right to it and then execute it but any other combination aside from writing and executing any",
    "start": "1046880",
    "end": "1053059"
  },
  {
    "text": "other combination is not is not enough to be in an injection if any ideas will",
    "start": "1053059",
    "end": "1059240"
  },
  {
    "text": "try to correlate this and they will get a ton of false positives because only allocating and writing let's say is only",
    "start": "1059240",
    "end": "1066080"
  },
  {
    "text": "as a legitimate communication method in Windows so in this example we have injector exe",
    "start": "1066080",
    "end": "1071480"
  },
  {
    "text": "that will try to inject to explore and from the ADR perspective ADR monitors uh",
    "start": "1071480",
    "end": "1077419"
  },
  {
    "text": "events being made on Explorer and a fence being made from injector and we'll try to correlate this being made on the",
    "start": "1077419",
    "end": "1083120"
  },
  {
    "text": "machine so for simplicity's sake I've chosen a injector to do an allocate primitive of",
    "start": "1083120",
    "end": "1089299"
  },
  {
    "text": "virtual analog X most simple one and the ideal notices it and I'll look and monitors it to itself when injector will",
    "start": "1089299",
    "end": "1096740"
  },
  {
    "text": "write to the allocated space the same allocated space that it created edl cogulates this and monitors this as well",
    "start": "1096740",
    "end": "1104299"
  },
  {
    "text": "and when finally when the inductor will wrap things up with a execute primitive here create remote thread ADR detects",
    "start": "1104299",
    "end": "1111260"
  },
  {
    "text": "that this injector created an injection on Explorer Explorer is injected and",
    "start": "1111260",
    "end": "1116539"
  },
  {
    "text": "will do things its way from now terminate this or whatever it chooses so the Divinity vanity what the vanity",
    "start": "1116539",
    "end": "1123080"
  },
  {
    "text": "does differently the Divinity makes use of the three remote forking apis that",
    "start": "1123080",
    "end": "1129260"
  },
  {
    "text": "I've shown RTL create process reflection and the correct process in process ex and use them as two New Primitives of",
    "start": "1129260",
    "end": "1135740"
  },
  {
    "text": "fork or four can execute so how it's actually working in dirty vanity things will start off",
    "start": "1135740",
    "end": "1141980"
  },
  {
    "text": "similar injector will allocate space or can allocate space in the in its Target",
    "start": "1141980",
    "end": "1147940"
  },
  {
    "text": "and then we'll issue a right primitive this time I adopted the initial right",
    "start": "1147940",
    "end": "1153020"
  },
  {
    "text": "primitive why because it's not the final right so the right is going to get happened anyway again so this is the",
    "start": "1153020",
    "end": "1159860"
  },
  {
    "text": "initial right just to create the location in Explorer in the parent process and then for my first my third",
    "start": "1159860",
    "end": "1165440"
  },
  {
    "text": "phase I'm going to use a forking primitive for the sake of Simplicity of this demo I'm going to use a 4K and",
    "start": "1165440",
    "end": "1171740"
  },
  {
    "text": "execute primitive RTL create process reflection and when setting it with a start address to the address that I've",
    "start": "1171740",
    "end": "1178520"
  },
  {
    "text": "allocated on the parent the same address is going to be allocated on the on the Clone child of Explorer that's now newly",
    "start": "1178520",
    "end": "1184220"
  },
  {
    "text": "created and when I finish this API call of RTL Care Plus reflection this Explorer clone will already have this",
    "start": "1184220",
    "end": "1189980"
  },
  {
    "text": "mic injection up and running my shell code already executing inside it from the ideal perspective it it caught",
    "start": "1189980",
    "end": "1196760"
  },
  {
    "text": "allocation and writing on Explorer but no execution he doesn't know the forking",
    "start": "1196760",
    "end": "1202520"
  },
  {
    "text": "primitive and nothing was ever written to the to the newly created Explorer by the EDR site so when it's finally",
    "start": "1202520",
    "end": "1209419"
  },
  {
    "text": "starting to execute an injection uh nothing is new here to DDR so this is",
    "start": "1209419",
    "end": "1214760"
  },
  {
    "text": "the the strength of the Divinity in this side so some prerequisites",
    "start": "1214760",
    "end": "1221419"
  },
  {
    "text": "for the fork and execute step I'm going to need for the RTL create process",
    "start": "1221419",
    "end": "1226520"
  },
  {
    "text": "reflection variant process VM operation create thread and process duplicate",
    "start": "1226520",
    "end": "1232340"
  },
  {
    "text": "handle and for the anti-create process and process ex variant I need only a process",
    "start": "1232340",
    "end": "1238340"
  },
  {
    "text": "create process permission and for the initial y step it can be anything that you can think of by",
    "start": "1238340",
    "end": "1244160"
  },
  {
    "text": "using the write and allocate for Simplicity but it can be section creation and mapping and set setting",
    "start": "1244160",
    "end": "1251240"
  },
  {
    "text": "thread context to do ghost writing or anything else exotic that you find the writing attempts will get cloned to the",
    "start": "1251240",
    "end": "1257780"
  },
  {
    "text": "newly created child so let's take a look at the POC of uh of",
    "start": "1257780",
    "end": "1266240"
  },
  {
    "text": "uh the definitive via artillery process reflection",
    "start": "1266240",
    "end": "1271280"
  },
  {
    "text": "in it we have a shell code here a normal Shell Code and we're going to open a",
    "start": "1271280",
    "end": "1276559"
  },
  {
    "text": "Target handle let's say Explorer and then we're going to allocate paste them",
    "start": "1276559",
    "end": "1281780"
  },
  {
    "text": "our space on it and right to it on the Base address that you got from virtual alloc for the first third step again not",
    "start": "1281780",
    "end": "1290059"
  },
  {
    "text": "executing but forking and executing later and this time around with the fork",
    "start": "1290059",
    "end": "1295520"
  },
  {
    "text": "with executing the Base address and the fog chart will execute our injection our Shell Code that we created so let's test",
    "start": "1295520",
    "end": "1301820"
  },
  {
    "text": "this my first attempt with it was reflecting a simple message box shell code I bet",
    "start": "1301820",
    "end": "1307760"
  },
  {
    "text": "you encountered those and it invokes a message block say from user32 dll when I",
    "start": "1307760",
    "end": "1314000"
  },
  {
    "text": "break in Breaking a clone process and resume my execution I got this disappointing screen of access violation",
    "start": "1314000",
    "end": "1320299"
  },
  {
    "text": "uh access denied so let's check the call stack I get I",
    "start": "1320299",
    "end": "1326059"
  },
  {
    "text": "get the access violation from this address user32 get DPI for current process and when the messing around with",
    "start": "1326059",
    "end": "1333740"
  },
  {
    "text": "the contents of the RX register uh I am getting some invalid address so",
    "start": "1333740",
    "end": "1340100"
  },
  {
    "text": "I'm checking the I'm checking the call stack here and I'm saying I'm still originating from the message box that the fork child actually invoked but",
    "start": "1340100",
    "end": "1347299"
  },
  {
    "text": "something goes wrong here so I need to check out why okay so let's starting with",
    "start": "1347299",
    "end": "1352760"
  },
  {
    "text": "disassembling the get API for current process and checking what's what's failing I can see the RX register is",
    "start": "1352760",
    "end": "1359179"
  },
  {
    "text": "being pointed into user32 GPS side uh symbol from user32 and when actually",
    "start": "1359179",
    "end": "1364880"
  },
  {
    "text": "reading it later the contents we fail let's get the address of the actual",
    "start": "1364880",
    "end": "1370700"
  },
  {
    "text": "symbol what it's pointing to and from using this command I get this address here to one zero next",
    "start": "1370700",
    "end": "1378940"
  },
  {
    "text": "and when I'm checking the contents of the actual address in the fork child I",
    "start": "1378940",
    "end": "1384799"
  },
  {
    "text": "can see it's actually non-existing it's it's free it's a free page so it's a",
    "start": "1384799",
    "end": "1390799"
  },
  {
    "text": "surprise to me I thought that for the fork should copy or the entirety of the memory of the parent so what happened to",
    "start": "1390799",
    "end": "1398600"
  },
  {
    "text": "this address so let's let's check it let's try to try to see what why the symbol gpsi is",
    "start": "1398600",
    "end": "1404840"
  },
  {
    "text": "missing so starting around I'm going to examine this address on the parent process to",
    "start": "1404840",
    "end": "1411919"
  },
  {
    "text": "see what its features and maybe will give me a hint of why it's not getting Fork this address uh so the contents of this address is",
    "start": "1411919",
    "end": "1420200"
  },
  {
    "text": "those committed address with a permission of mapped meaning a shared memory address okay uh",
    "start": "1420200",
    "end": "1427100"
  },
  {
    "text": "so let's let's check further and let's check the gpsi symbol from user32 this",
    "start": "1427100",
    "end": "1433820"
  },
  {
    "text": "is the this is its in initialization and I see that during the boot of user32",
    "start": "1433820",
    "end": "1439400"
  },
  {
    "text": "this is a dll main user client dll initialize gpsi is pointed to G to the G shared",
    "start": "1439400",
    "end": "1446000"
  },
  {
    "text": "info symbol a symbol that points to a shared info structure structure from",
    "start": "1446000",
    "end": "1451220"
  },
  {
    "text": "kernel that is mapped to every process that loads user32 this structure is a good structure that holds a session",
    "start": "1451220",
    "end": "1457340"
  },
  {
    "text": "specific data in GUI handles and all sorts of this stuff and it resides",
    "start": "1457340",
    "end": "1464960"
  },
  {
    "text": "in a shared read-only section that is mapped from channel to each process that loads is 32.",
    "start": "1464960",
    "end": "1471020"
  },
  {
    "text": "let's see how it's getting loaded okay process here loads user32 which executed",
    "start": "1471020",
    "end": "1477140"
  },
  {
    "text": "dll main which invokes a call to win from Winter to you anti-connect process",
    "start": "1477140",
    "end": "1483260"
  },
  {
    "text": "and use end user connect process which invokes the kernel side in the kernel side of in the wind 32k driver and the",
    "start": "1483260",
    "end": "1490520"
  },
  {
    "text": "user connect process invoking init map shell section an informative name that Maps the actually the actual shared info",
    "start": "1490520",
    "end": "1498919"
  },
  {
    "text": "object to the address space of process that loads this Revenue that contains",
    "start": "1498919",
    "end": "1504200"
  },
  {
    "text": "the contents of the shared infrastructure so this is the GPS I this is the contents that I'm missing I want",
    "start": "1504200",
    "end": "1510200"
  },
  {
    "text": "to check now why and now I want to check why it's missing I got a lot of I got my info that I need",
    "start": "1510200",
    "end": "1516020"
  },
  {
    "text": "so let's check why my first guess is maybe addresses are not getting mapped to my",
    "start": "1516020",
    "end": "1522260"
  },
  {
    "text": "Forks so let's check it I'm going to check every map address in the created fork in",
    "start": "1522260",
    "end": "1528380"
  },
  {
    "text": "my example here and I'm saying there's a bunch of mapped addresses including the address that I uh that the reflection",
    "start": "1528380",
    "end": "1535159"
  },
  {
    "text": "demo that I've shown you the shell parameters are also getting fought so",
    "start": "1535159",
    "end": "1540620"
  },
  {
    "text": "there is no reason for failure here so let's check deeper in the kernel implementation of the folk I'm going to",
    "start": "1540620",
    "end": "1547340"
  },
  {
    "text": "check how the how the forking process works and why it skips this allocation of the GPS side",
    "start": "1547340",
    "end": "1553220"
  },
  {
    "text": "uh okay I'm going to start off things with Mi clone process address space as you recall we've died we we took the",
    "start": "1553220",
    "end": "1560720"
  },
  {
    "text": "dive from anti-create user process up to where Micron process address space this is the function this does that does the",
    "start": "1560720",
    "end": "1566720"
  },
  {
    "text": "actual clone from the parent to the child uh it receives the e-process of the parent two clone and the process of",
    "start": "1566720",
    "end": "1574340"
  },
  {
    "text": "the child to populate and it invokes this function am I allocate child vets a quick definition",
    "start": "1574340",
    "end": "1580220"
  },
  {
    "text": "of that is the kernel object that describes a uh that describes a basically an allocation",
    "start": "1580220",
    "end": "1586480"
  },
  {
    "text": "of the process that contains it and each process has a pointer to a vadri a root",
    "start": "1586480",
    "end": "1592159"
  },
  {
    "text": "of its allocations and this is how it manages its own allocations this function in my allocate child Advance",
    "start": "1592159",
    "end": "1597220"
  },
  {
    "text": "iterates through the parent process that and creates them to the child but first",
    "start": "1597220",
    "end": "1602840"
  },
  {
    "text": "it applies them with the filter this filter is a my Val should be forked",
    "start": "1602840",
    "end": "1608179"
  },
  {
    "text": "sounds promising it contains this function receives every vad of the",
    "start": "1608179",
    "end": "1613400"
  },
  {
    "text": "parent process and applies the condition to it and if the if the condition will be correct that will get forked",
    "start": "1613400",
    "end": "1621200"
  },
  {
    "text": "so let's check it this is the pseudo code of the actual of the Mi that should be Fork function uh",
    "start": "1621200",
    "end": "1627679"
  },
  {
    "text": "shortened for the sake of Simplicity and for most private uh private vets meaning everyday allocations it's going to",
    "start": "1627679",
    "end": "1635659"
  },
  {
    "text": "return one meaning uh going to get forked but in the case of maps or showed",
    "start": "1635659",
    "end": "1642620"
  },
  {
    "text": "shared allocation shared beds it's going to test something it's going to test whether the field here in the Ved long",
    "start": "1642620",
    "end": "1649460"
  },
  {
    "text": "Flags too a flag the flags two member in the vet is going to check it's 26th bit",
    "start": "1649460",
    "end": "1655100"
  },
  {
    "text": "to and if it's set to one if it's set to one it's going to say this vat is ready to get forked else it's going to return",
    "start": "1655100",
    "end": "1661400"
  },
  {
    "text": "no don't work this one and we're checking the struct definition of the flags too I see that the 26 bit is the",
    "start": "1661400",
    "end": "1669799"
  },
  {
    "text": "inherit field sounds sounds good sounds like it's the right way I want to see if I can set",
    "start": "1669799",
    "end": "1676220"
  },
  {
    "text": "this inherit bit that I'm missing to one to one to yes inherit this so let's",
    "start": "1676220",
    "end": "1681860"
  },
  {
    "text": "check what is this inherit bit and how can affect it okay I'll try to Google this uh I'll try",
    "start": "1681860",
    "end": "1688100"
  },
  {
    "text": "to check the flex to inherit and I get this track definition from Google so",
    "start": "1688100",
    "end": "1694159"
  },
  {
    "text": "it's a loop I'm not getting anywhere from Google so I'll try either I'll convert this flag to its hexadecimal",
    "start": "1694159",
    "end": "1701179"
  },
  {
    "text": "form this value here and my aim is to detect usages of it in ntos kernel I",
    "start": "1701179",
    "end": "1706220"
  },
  {
    "text": "want to see how it's getting manipulated and how it's getting inserted to a vad and then maybe I can set it myself to",
    "start": "1706220",
    "end": "1711380"
  },
  {
    "text": "this step uh okay so I'll search this little uh this string in little endiness in the",
    "start": "1711380",
    "end": "1717740"
  },
  {
    "text": "entire binary of entire scandal uh when I when I searches I get a ton of uh",
    "start": "1717740",
    "end": "1723500"
  },
  {
    "text": "output a lot of locations that use this value because it's a very generic value some of these places are not even code",
    "start": "1723500",
    "end": "1730400"
  },
  {
    "text": "in my in my search query but I can sort it and if I sort this search query to",
    "start": "1730400",
    "end": "1735500"
  },
  {
    "text": "search only in areas that are Mi prefix functions that manages memory in current",
    "start": "1735500",
    "end": "1740900"
  },
  {
    "text": "US candle and only operations that are not test but move that actually use this flag and set this flag I found two",
    "start": "1740900",
    "end": "1747799"
  },
  {
    "text": "interesting hits Mi map view of image section and Mi map view of data section let's actually set",
    "start": "1747799",
    "end": "1753980"
  },
  {
    "text": "this value to a newly created allocation so I'm going to check how",
    "start": "1753980",
    "end": "1759500"
  },
  {
    "text": "so I'll reverse these two these two areas and when what I find is this",
    "start": "1759500",
    "end": "1765380"
  },
  {
    "text": "pseudo code I can see that the inherit flag is being controlled by a Boolean and this this Boolean is being",
    "start": "1765380",
    "end": "1771080"
  },
  {
    "text": "controlled by arguments if this Boolean is true this actual flag is going to be set to the newly created web good for me",
    "start": "1771080",
    "end": "1778159"
  },
  {
    "text": "let's see how we can affect it let's check what is this argument I'm going to follow up the call stack from the area that I found in my map view of image and",
    "start": "1778159",
    "end": "1785059"
  },
  {
    "text": "data section and following up to empty map view of section and I reveal Arc 6 to be section inherit in Harry this",
    "start": "1785059",
    "end": "1792500"
  },
  {
    "text": "position parameter of anti-mapped view of section okay this this thing I can check in Google it's an API",
    "start": "1792500",
    "end": "1799460"
  },
  {
    "text": "and when I check it I get that inherit disposition is defined in this way",
    "start": "1799460",
    "end": "1806539"
  },
  {
    "text": "specifies how the view is to be shared with child processes the possible values",
    "start": "1806539",
    "end": "1811820"
  },
  {
    "text": "are view share the view will be mapped into any child processor that are created from this parent process or view",
    "start": "1811820",
    "end": "1819500"
  },
  {
    "text": "on map the child The View will not get mapped into child processes sound like exactly what I'm messing with and we",
    "start": "1819500",
    "end": "1825440"
  },
  {
    "text": "even have a recommendation from msdn drivers should typically specify view on map from this for this parameter so this",
    "start": "1825440",
    "end": "1832580"
  },
  {
    "text": "is exactly what's happening gpsi is mapped from kernel space from win32k driver",
    "start": "1832580",
    "end": "1837880"
  },
  {
    "text": "which is uh and when I check the actual mapping code in 132k in it publisher",
    "start": "1837880",
    "end": "1843919"
  },
  {
    "text": "section I can see that the search shared section is being mapped with a view on map",
    "start": "1843919",
    "end": "1849559"
  },
  {
    "text": "value so let's recap things okay I try",
    "start": "1849559",
    "end": "1854600"
  },
  {
    "text": "to Fork a process and I I wanted to invoke a message box in it but it used",
    "start": "1854600",
    "end": "1860480"
  },
  {
    "text": "this value and this value is mapped with view on map so and we are not sections are not",
    "start": "1860480",
    "end": "1866299"
  },
  {
    "text": "getting copied to the folk child so this is my martial code crashed GPS pointing to this section and message",
    "start": "1866299",
    "end": "1873440"
  },
  {
    "text": "book and the message bookshelf code fails so what are my options now okay the couple of options some of some are",
    "start": "1873440",
    "end": "1880399"
  },
  {
    "text": "more difficult than others I can try to reload user32 dll and this way the",
    "start": "1880399",
    "end": "1885860"
  },
  {
    "text": "shared section will get Reloaded invoking The the load of the anti-connect user process",
    "start": "1885860",
    "end": "1892120"
  },
  {
    "text": "again I can copy the contents from the parent of the shared section uh from the",
    "start": "1892120",
    "end": "1898460"
  },
  {
    "text": "parent to the Clone and I can even call the API anti-connect",
    "start": "1898460",
    "end": "1904640"
  },
  {
    "text": "and and user called process connect to remap this shared infrastructure from the from the folk child",
    "start": "1904640",
    "end": "1912220"
  },
  {
    "text": "but what I've chosen to do is to write my reflected Shell Code with only NT API",
    "start": "1912220",
    "end": "1918940"
  },
  {
    "text": "anti-api are independent they don't need any other layer of shared memory to",
    "start": "1918940",
    "end": "1924500"
  },
  {
    "text": "support them by the way I can use any low level API from Canon 32 like load",
    "start": "1924500",
    "end": "1930620"
  },
  {
    "text": "library and others uh it's a it's a method of try and test but anti-api",
    "start": "1930620",
    "end": "1938539"
  },
  {
    "text": "works flawlessly and let's explain also why V1 map is existing here the why the",
    "start": "1938539",
    "end": "1945559"
  },
  {
    "text": "forks are faulty uh how it's actually working in in the Unix subsystem that's supposed to actually function so when",
    "start": "1945559",
    "end": "1952279"
  },
  {
    "text": "I'm examining the actual forking code uh the actual mapping code of locations in",
    "start": "1952279",
    "end": "1958220"
  },
  {
    "text": "uh in the posix dlls I can see that every mapping in deposit subsystem uses the view shell member and The View on",
    "start": "1958220",
    "end": "1966440"
  },
  {
    "text": "map is only a Windows usage value so this is how the Unix Fork works",
    "start": "1966440",
    "end": "1972860"
  },
  {
    "text": "and able to create our executing processes and this is why it's interrupted in Windows so I'm going to",
    "start": "1972860",
    "end": "1979580"
  },
  {
    "text": "reflect the Shell Code and the API for my demo and my shortcut is going to instead of creating a message box invoke",
    "start": "1979580",
    "end": "1986240"
  },
  {
    "text": "a call to anti-create user process invoking invoking a a message MSG",
    "start": "1986240",
    "end": "1993200"
  },
  {
    "text": "executable that says on a hello prompt and this is what motion code is going to do I'm going to set the contents of the",
    "start": "1993200",
    "end": "1999799"
  },
  {
    "text": "ldr again to shutdown in progress to be zero because this when this is one it it runs the process runtime it harms apis",
    "start": "1999799",
    "end": "2006360"
  },
  {
    "text": "and I'm going to find my anti-dll API from dldl and perform parameter creation",
    "start": "2006360",
    "end": "2011740"
  },
  {
    "text": "for this anti-creator process without thelk process parameter ZX and then",
    "start": "2011740",
    "end": "2016899"
  },
  {
    "text": "invoke anti-create user process from the reflected Shell Code invoking CMD and a",
    "start": "2016899",
    "end": "2022179"
  },
  {
    "text": "command line of MSG hello from the Divinity and I'm going to suspend it to allow you to see it",
    "start": "2022179",
    "end": "2027700"
  },
  {
    "text": "okay let's now it's time for the demo demo demo okay we have a demo here of a",
    "start": "2027700",
    "end": "2035620"
  },
  {
    "text": "system that's protected with an EDR and in it we're going to Target Explorer this is the Explorer process three this",
    "start": "2035620",
    "end": "2041799"
  },
  {
    "text": "is its PID and I'm going to apply to Target this PID first with an ordinary injector and",
    "start": "2041799",
    "end": "2049240"
  },
  {
    "text": "by setting the period of Explorer 6480 I'm getting my injection walking Hello",
    "start": "2049240",
    "end": "2056080"
  },
  {
    "text": "message and I need the album prompt down here the ideal cut this attempt I censored it so in case I don't want to",
    "start": "2056080",
    "end": "2062858"
  },
  {
    "text": "mess with anybody and when I the ADR created a new Explorer because it contains Shell Code",
    "start": "2062859",
    "end": "2069520"
  },
  {
    "text": "and new Explorer is created I'm going to invoke the active entity on it the prompt is being is being executed",
    "start": "2069520",
    "end": "2076919"
  },
  {
    "text": "and when checking the actual process 3 I can see that Explorer indeed created a",
    "start": "2076919",
    "end": "2083800"
  },
  {
    "text": "new Explorer image and it's this this child Explorer created the CMD that",
    "start": "2083800",
    "end": "2088960"
  },
  {
    "text": "invoked my message box so the Shell Code in any delay actually operates",
    "start": "2088960",
    "end": "2094200"
  },
  {
    "text": "thank you",
    "start": "2094960",
    "end": "2097500"
  },
  {
    "text": "okay so this is this was the demo time for uh uh summary and takeaways",
    "start": "2100140",
    "end": "2108540"
  },
  {
    "text": "to detect to detect injections in their Solutions you usually Monitor and correlate attempts of allocation writing",
    "start": "2108760",
    "end": "2115720"
  },
  {
    "text": "and execution it allocates and correlates these attempts on the process on that are being invoked on a single on",
    "start": "2115720",
    "end": "2122440"
  },
  {
    "text": "a single process on the same process what folk API do is they introduce two New Primitives to this injection game",
    "start": "2122440",
    "end": "2128500"
  },
  {
    "text": "fork and four can execute and what it does it basically splits the edr's vision and the Divinity makes use of",
    "start": "2128500",
    "end": "2134800"
  },
  {
    "text": "forking to reflect any attempts of allocation and written writing to the newly created Target process the child",
    "start": "2134800",
    "end": "2141160"
  },
  {
    "text": "clone process and from the ideal perspective the parent was never executed and and it won't and the child",
    "start": "2141160",
    "end": "2148599"
  },
  {
    "text": "is never been allocated or written to and thus it will never get flagged when finally when eventually I will choose to",
    "start": "2148599",
    "end": "2154480"
  },
  {
    "text": "execute it either with a fork and execute primitive or forking with the forking apis and then finally actually",
    "start": "2154480",
    "end": "2161440"
  },
  {
    "text": "in the executing it in every other execution primitive that I want to follow up with",
    "start": "2161440",
    "end": "2167560"
  },
  {
    "text": "and a couple of takeaways for you uh dirty vanity changes how we look at",
    "start": "2167560",
    "end": "2173020"
  },
  {
    "text": "injection defense because uh forking changes how we monitor the system what",
    "start": "2173020",
    "end": "2178480"
  },
  {
    "text": "details should how should edits should respond is should they should monitor the all the poking Primitives uh that I",
    "start": "2178480",
    "end": "2185740"
  },
  {
    "text": "presented eventually tracking forked processes and applying them with all the knowledge of the parents their Divinity",
    "start": "2185740",
    "end": "2192460"
  },
  {
    "text": "can be used or the forking can be used in other attacks we saw we were saw an",
    "start": "2192460",
    "end": "2197619"
  },
  {
    "text": "abuse of credential dumping this is the injection world and we must apply the entirety of the",
    "start": "2197619",
    "end": "2203740"
  },
  {
    "text": "knowledge of the we have on the parent to the child process to prevent this kind of attacks",
    "start": "2203740",
    "end": "2209140"
  },
  {
    "text": "and more variation of the dirty vanity injections exist up to you to map them all we can do the anti-create process",
    "start": "2209140",
    "end": "2215980"
  },
  {
    "text": "the processing X system call within follow-up execute primitive we can patch the entry point of the fork to do",
    "start": "2215980",
    "end": "2221320"
  },
  {
    "text": "anything we like and we can try to fix it's possible higher level apis but",
    "start": "2221320",
    "end": "2226720"
  },
  {
    "text": "generally anti-dl can do anything with younger brothers can do up to you to",
    "start": "2226720",
    "end": "2232540"
  },
  {
    "text": "catch them all all the variations and thank you this is where I'm finishing this is the link to the GitHub",
    "start": "2232540",
    "end": "2239680"
  },
  {
    "text": "that contains the POC demo to dirty vanity it contains also the Shell Code generation framework that are used that",
    "start": "2239680",
    "end": "2245680"
  },
  {
    "text": "invokes the Shell Code of ntdl API you can customize it quite easily this is my Twitter handle if anybody would want to",
    "start": "2245680",
    "end": "2251380"
  },
  {
    "text": "contact me after the session and some references that I've used and time for questions if anybody has has one",
    "start": "2251380",
    "end": "2260279"
  },
  {
    "text": "foreign [Music]",
    "start": "2261339",
    "end": "2265969"
  },
  {
    "text": "[Music]",
    "start": "2269820",
    "end": "2272909"
  }
]