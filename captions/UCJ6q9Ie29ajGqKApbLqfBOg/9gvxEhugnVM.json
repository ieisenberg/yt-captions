[
  {
    "text": "welcome to GH all bending the rules of web cash explation this is the agenda for today",
    "start": "3040",
    "end": "9280"
  },
  {
    "text": "first I'm going to briefly explain how a we cach works next I'm going to show how we can abuse different eural passing",
    "start": "9280",
    "end": "16160"
  },
  {
    "text": "discrepancies between an HTTP server and a cache proxy in order to steal some sensitive information from a big team",
    "start": "16160",
    "end": "23560"
  },
  {
    "text": "and I obtain arbitrary webcash deception then I'm going to show how we can use similar techniques in order to",
    "start": "23560",
    "end": "30560"
  },
  {
    "text": "modify the cash key of a store resource and obtain arbitrary well cash poisoning",
    "start": "30560",
    "end": "36239"
  },
  {
    "text": "and then I'm going to combine both techniques in order to St to store any resource we want with any key we want",
    "start": "36239",
    "end": "42719"
  },
  {
    "text": "and obtain a full defacement of our website finally I'm going to show some defenses that can be used to protect",
    "start": "42719",
    "end": "48800"
  },
  {
    "text": "against these attacks and the takeaways of the session so before I di into the talk I'm",
    "start": "48800",
    "end": "55480"
  },
  {
    "text": "going to I have to say that most of these examples that you are going to see are based on CDN like Cloud for",
    "start": "55480",
    "end": "62640"
  },
  {
    "text": "cloudfront or Aki but all of these attacks can be used and applied in any kind of work cach so even those that are",
    "start": "62640",
    "end": "70159"
  },
  {
    "text": "included in the same HTTP server so whenever we send a request to",
    "start": "70159",
    "end": "75200"
  },
  {
    "text": "a website that is using a webcache the sorry yeah that is we webcache the first",
    "start": "75200",
    "end": "80400"
  },
  {
    "text": "thing that is going to happen is that the request is going to be handled by that webcash proxy and the idea is that",
    "start": "80400",
    "end": "86640"
  },
  {
    "text": "he will try to resolve the request by generating a response that is already stored so to do to that it's going to",
    "start": "86640",
    "end": "93399"
  },
  {
    "text": "calculate the key of the request and the key is basically an identifier that just says which is the resource that is being",
    "start": "93399",
    "end": "99720"
  },
  {
    "text": "requested so usually it's the it's a string containing the URL and the host heater so the idea is that if we have",
    "start": "99720",
    "end": "106840"
  },
  {
    "text": "two requests with different cookies or different user regs we will still be requesting the same resource and",
    "start": "106840",
    "end": "113040"
  },
  {
    "text": "therefore the response should be the same if the resource is static so after calculating this key the",
    "start": "113040",
    "end": "119200"
  },
  {
    "text": "cash Pro is going to look at the table at the cach table and if there's no no resource ready for that request then",
    "start": "119200",
    "end": "124719"
  },
  {
    "text": "it's going to forward it to the origin server now the origin server is going to pass the URL to obtain the path and map",
    "start": "124719",
    "end": "130759"
  },
  {
    "text": "the endpoint that should resolve the request sometimes it's a dynamic endpoint and sometimes it's just a",
    "start": "130759",
    "end": "136080"
  },
  {
    "text": "static file that is going to be served so when the origin server sends the request the response back to the cache",
    "start": "136080",
    "end": "141959"
  },
  {
    "text": "proxy it will this response is going to be evaluated as well as the request using some rules that will tell the cash",
    "start": "141959",
    "end": "149560"
  },
  {
    "text": "proxy if this resource is static or not and if it should be stored or not and in",
    "start": "149560",
    "end": "154920"
  },
  {
    "text": "the response it's going to observe the cach control heater which is going to tell some directives that can tell if",
    "start": "154920",
    "end": "161400"
  },
  {
    "text": "the resource is static and should be stored and this is created by the origin server but also it could look at some",
    "start": "161400",
    "end": "167760"
  },
  {
    "text": "other things in the request such as the URL and it can compare it with some strings and depending on the behavior of",
    "start": "167760",
    "end": "173879"
  },
  {
    "text": "that evoluation that it will be able to know if the response is static or not one really common rule Ru that is",
    "start": "173879",
    "end": "180440"
  },
  {
    "text": "applied in many cdns by default is the static extension rule that in this slide",
    "start": "180440",
    "end": "185760"
  },
  {
    "text": "you can see the the static extensions that are defined in cler by default and",
    "start": "185760",
    "end": "191280"
  },
  {
    "text": "the idea is that if the path of the request ends with any of these extensions then the request or the",
    "start": "191280",
    "end": "198080"
  },
  {
    "text": "response should be stored in the cach so in this case as you can see the request is to styles do CSS and as it ends with",
    "start": "198080",
    "end": "205560"
  },
  {
    "text": "a static extension the cach pro is going to decide that it should be storing this this response and it will use the the",
    "start": "205560",
    "end": "212720"
  },
  {
    "text": "key that was calculated in the first step to store this so that whenever a",
    "start": "212720",
    "end": "218480"
  },
  {
    "text": "client maybe the same or other the client sends a request looking for the same resource the cash per is going to",
    "start": "218480",
    "end": "224439"
  },
  {
    "text": "calculate the key is going to find a response ready for that key and it's going to deliver it back to the",
    "start": "224439",
    "end": "230280"
  },
  {
    "text": "client so all these steps involve parsing the URL and obtaining the path",
    "start": "230280",
    "end": "236560"
  },
  {
    "text": "and this can lead to different kind of unexpected behaviors because if the",
    "start": "236560",
    "end": "242079"
  },
  {
    "text": "parer from the origin server and from the front end server which is the cash proxy are different then the path could",
    "start": "242079",
    "end": "248560"
  },
  {
    "text": "be interpreted differently this is what happens when we try to attack an application using uh",
    "start": "248560",
    "end": "256320"
  },
  {
    "text": "cash proxy with an attack that was presented a few years ago by om Gil in",
    "start": "256320",
    "end": "262040"
  },
  {
    "text": "blackhe hat 2017 and what he realized was that some backend servers were using a special",
    "start": "262040",
    "end": "268520"
  },
  {
    "text": "mapping where where the only part the only thing that is compared is the prefix of the URL and then the rest is",
    "start": "268520",
    "end": "275759"
  },
  {
    "text": "considered path is considered parameters so these are called path parameters so if we send a request to my account slpm",
    "start": "275759",
    "end": "282600"
  },
  {
    "text": "1/ param 2 only the first part is going to be used to look for the endpoint so",
    "start": "282600",
    "end": "287720"
  },
  {
    "text": "my account and the response is going to be it's going to contain in this case a",
    "start": "287720",
    "end": "292960"
  },
  {
    "text": "lot of information from the bitting like the email and the credit card that's the response that we want to steal so",
    "start": "292960",
    "end": "300160"
  },
  {
    "text": "to do that we are going to send a malicious link to a victim this is what omil discovered and in the we we're",
    "start": "300160",
    "end": "307800"
  },
  {
    "text": "going to use the first the the path that is my account but also a parameter that is called ajs so when this is forwarded",
    "start": "307800",
    "end": "315960"
  },
  {
    "text": "to the to the origin server using the cookies of the victim the origin server is just going to look for the first part",
    "start": "315960",
    "end": "321919"
  },
  {
    "text": "which is my account and the rest is going to be considered as a parameter so it will return the response containing",
    "start": "321919",
    "end": "327280"
  },
  {
    "text": "all the secret information now as the cash proxy is not aware of this special mapping it's just going to think that",
    "start": "327280",
    "end": "334080"
  },
  {
    "text": "the end of the path is still part of the path so it's going to think that this contains a static extension and",
    "start": "334080",
    "end": "339319"
  },
  {
    "text": "therefore the response should be stored in the cach and now if an attacker sends the same request without any cogi or without",
    "start": "339319",
    "end": "346080"
  },
  {
    "text": "anything because it's not part of the of the key the cash BR is going to find that there's a response ready for that",
    "start": "346080",
    "end": "352720"
  },
  {
    "text": "and it's going to send back the victim's response containing all the secret information and we will be able to",
    "start": "352720",
    "end": "358039"
  },
  {
    "text": "obtain that that data but the problem with this attack is that if there's no special mapping then we",
    "start": "358039",
    "end": "364240"
  },
  {
    "text": "cannot create any webcash deception attack and also if the path the path",
    "start": "364240",
    "end": "369919"
  },
  {
    "text": "parameters have any special meaning like we cannot send ajs because it's going to be interpreted in the origine server",
    "start": "369919",
    "end": "376319"
  },
  {
    "text": "then this attack is again going to fail so what I decided to do is to look for other kind of path confusion",
    "start": "376319",
    "end": "383199"
  },
  {
    "text": "techniques that could be applied to make this uh these discrepancies and eventually be able to store a dynamic",
    "start": "383199",
    "end": "391000"
  },
  {
    "text": "response and to do so I started looking at how the path is obtained from my URL",
    "start": "391000",
    "end": "396599"
  },
  {
    "text": "and this is done by using what what the RFC calls path delimiters so basically",
    "start": "396599",
    "end": "402240"
  },
  {
    "text": "these delimiters are characters resered characters that will tell where each of the elements of the URL start and end so",
    "start": "402240",
    "end": "410000"
  },
  {
    "text": "a URL contains different elements such as the scheme the credentials the host path query and fragments but to split",
    "start": "410000",
    "end": "417120"
  },
  {
    "text": "them the RFC says that you can use this kind of the limiters the problem is that the RFC says that they may or may not be",
    "start": "417120",
    "end": "424520"
  },
  {
    "text": "used as the limiters so it's it's entirely depending on the on the implementation and that's where the",
    "start": "424520",
    "end": "431199"
  },
  {
    "text": "problems begin because if we can find a delimiter that is being used at the origin server",
    "start": "431199",
    "end": "436440"
  },
  {
    "text": "but not at the front end server then we can actually send the same request which is my account instead of Slash we would",
    "start": "436440",
    "end": "441960"
  },
  {
    "text": "send the delimer in this case a dollar sign and ajs the origin server is going",
    "start": "441960",
    "end": "447840"
  },
  {
    "text": "to use the telemeter and it's going to say say that the path is actually my account but as the front end is not",
    "start": "447840",
    "end": "454479"
  },
  {
    "text": "using the delimer then it's going to think that the entire URL is part of the path and it's going to think that this",
    "start": "454479",
    "end": "461199"
  },
  {
    "text": "is a static file because of the static extension and it's going to store the",
    "start": "461199",
    "end": "466479"
  },
  {
    "text": "response and the what's really cool about this attack is that we can use it with any kind of resource so we don't",
    "start": "466479",
    "end": "472879"
  },
  {
    "text": "really depend on any mapping and we can steal any kind of things so not only my account we could steal other responses",
    "start": "472879",
    "end": "478319"
  },
  {
    "text": "like secret or anything we want so let's see which delimiters we can",
    "start": "478319",
    "end": "484599"
  },
  {
    "text": "find in the wild to use this and to exploit An Origin server that is using them the first one is one that is really",
    "start": "484599",
    "end": "491759"
  },
  {
    "text": "well known by a lot of people which is the spring semicolon in Spring we can Define Matrix variables and we can",
    "start": "491759",
    "end": "498840"
  },
  {
    "text": "include them in the path so if we send something like my account semicolon ajs",
    "start": "498840",
    "end": "503960"
  },
  {
    "text": "Well Spring is going to think that this is just my account and ajs is a path parameter or actually a matrix variable",
    "start": "503960",
    "end": "511440"
  },
  {
    "text": "then in rails this is a really cool one because I I never saw anyone using it in",
    "start": "511680",
    "end": "517120"
  },
  {
    "text": "rails we can use the dot as a delimeter and this is because rails when we create",
    "start": "517120",
    "end": "522839"
  },
  {
    "text": "a view in rails and an endpoint that answer for that view the the expected behavior for rails is that when we send",
    "start": "522839",
    "end": "529320"
  },
  {
    "text": "something like my account it's just going to look for the my account HTML view okay however if we send my account.",
    "start": "529320",
    "end": "536519"
  },
  {
    "text": "CSS well ra is going to still think that this is a request to my account and it's going to try to load the CSS version of",
    "start": "536519",
    "end": "543519"
  },
  {
    "text": "The View so it's going to look for my account. CSS and if there's no view for that then it's just going to return a",
    "start": "543519",
    "end": "549519"
  },
  {
    "text": "406 error which is not really useful for us however if we send something like my",
    "start": "549519",
    "end": "554839"
  },
  {
    "text": "account. AA well ra doesn't think that this is our valid extension and therefore it's going to use the default",
    "start": "554839",
    "end": "560399"
  },
  {
    "text": "view which is HTML and it's just going to send us back the response these are the static extensions",
    "start": "560399",
    "end": "567120"
  },
  {
    "text": "that we saw that are accepted by cler and also in green you can see the extensions that are known by rails so if",
    "start": "567120",
    "end": "573880"
  },
  {
    "text": "we send something like my account PNG or JS or css then ra is going to look for that view and if it's no if it's not",
    "start": "573880",
    "end": "580920"
  },
  {
    "text": "there then it's going to just return an error but these are all the other extensions that are not known by rails",
    "start": "580920",
    "end": "586839"
  },
  {
    "text": "and that are going to be responded with the HTML view so if we send something like my account. Ico which is going to",
    "start": "586839",
    "end": "592920"
  },
  {
    "text": "be storing the cach because it's a static extension then rails is just going to load the HTML View and we will",
    "start": "592920",
    "end": "598680"
  },
  {
    "text": "be able to use it as a delimiter to hijack any sensitive response there are also other delimers",
    "start": "598680",
    "end": "605360"
  },
  {
    "text": "that are not in Frameworks but in HTP server such as the encoded n bite in open light speed so if we send this n",
    "start": "605360",
    "end": "612640"
  },
  {
    "text": "encoded bite it's going to be just be it's going to just behave like a question mark and it's going to be used",
    "start": "612640",
    "end": "617800"
  },
  {
    "text": "as a delimeter so it's going to be interpreted as my account the problem with this is that",
    "start": "617800",
    "end": "623000"
  },
  {
    "text": "many CDN will not forward the N bite so we will need to find some that does like",
    "start": "623000",
    "end": "629320"
  },
  {
    "text": "fastly Ori next we can find another delimiter in engine X when Engine X is actually",
    "start": "629320",
    "end": "636040"
  },
  {
    "text": "configured to rewrite the rues toite the path sorry and in this case if we send",
    "start": "636040",
    "end": "641120"
  },
  {
    "text": "an encoded new line then we will be able to use it as a delimer and again the",
    "start": "641120",
    "end": "646240"
  },
  {
    "text": "behavior is going to be the same we will be able to store anything we want using this attack now all these examples work they",
    "start": "646240",
    "end": "654200"
  },
  {
    "text": "they are just using uh the delimer and extension when they are interpreted in the back end they are all interpreted as",
    "start": "654200",
    "end": "660279"
  },
  {
    "text": "my accounts all these buend are going to respond with my account and with the sensitive information and then they are",
    "start": "660279",
    "end": "667279"
  },
  {
    "text": "going to be sorry they're going to be cashed because of the static extension but the problem with these",
    "start": "667279",
    "end": "673839"
  },
  {
    "text": "kind of attacks is that there are already some CDN like laer which created",
    "start": "673839",
    "end": "679720"
  },
  {
    "text": "some some defenses like web cach deception armor and the idea in these",
    "start": "679720",
    "end": "684880"
  },
  {
    "text": "cases is that the the cash BR is going to look for the extension that was set",
    "start": "684880",
    "end": "690240"
  },
  {
    "text": "in the URL and it's going to look for the content type in the response and if they don't match for instance in this",
    "start": "690240",
    "end": "695440"
  },
  {
    "text": "case we have an extension CSS and a content type HTML well Cloud for will know that this is an attack and it will",
    "start": "695440",
    "end": "702040"
  },
  {
    "text": "stop storing this response so we can try to attack other",
    "start": "702040",
    "end": "707880"
  },
  {
    "text": "kind of rules as I said we are we have the static extension that is almost always by default in any CDN but there",
    "start": "707880",
    "end": "714639"
  },
  {
    "text": "are also other rules like the static directory one the idea in this case is that the path is only compar is only",
    "start": "714639",
    "end": "721360"
  },
  {
    "text": "comparing the prefix of the URL and if the URL starts with something like",
    "start": "721360",
    "end": "726680"
  },
  {
    "text": "static or shared or anything that can be configured by by the user then this is",
    "start": "726680",
    "end": "731800"
  },
  {
    "text": "going to be used as a static as a static request and it's going to be storing the",
    "start": "731800",
    "end": "737680"
  },
  {
    "text": "response but in this case we will need to create a payload that when interpreted in the front end is",
    "start": "737680",
    "end": "744160"
  },
  {
    "text": "interpreted as static and in the back end as my account and this is not really easy",
    "start": "744160",
    "end": "749880"
  },
  {
    "text": "because right now we think that the path is just obtained from the URL and then it's used in the keys the rules and the",
    "start": "749880",
    "end": "755959"
  },
  {
    "text": "mapping but I forgot to say that there's one extra step which is normalization so",
    "start": "755959",
    "end": "761279"
  },
  {
    "text": "path is usually normalized and that is first the UR is decoded using basically",
    "start": "761279",
    "end": "767120"
  },
  {
    "text": "URL encodings so we can send something like percentage and the exad decimal value of each character and then this is",
    "start": "767120",
    "end": "774040"
  },
  {
    "text": "going to be decoded and also in some cases we will find that the the pr or",
    "start": "774040",
    "end": "779560"
  },
  {
    "text": "the back end is normalizing also the slashes and the dots so we can send encoded slashes and encoded dots and",
    "start": "779560",
    "end": "786199"
  },
  {
    "text": "they will behave just as the decoded version and also we have dot segment",
    "start": "786199",
    "end": "792000"
  },
  {
    "text": "resolution which is basically resolving path reversals and that is if we send something like hello SL do do World well",
    "start": "792000",
    "end": "799800"
  },
  {
    "text": "the do segment is going to remove the previous segment which is hello and we will be left with with world and also",
    "start": "799800",
    "end": "806560"
  },
  {
    "text": "some persons will decode and convert the back slashes into regular slashes so this could be also useful in some",
    "start": "806560",
    "end": "813480"
  },
  {
    "text": "attacks so now that we know this we can send a request that uses a theimer that",
    "start": "813480",
    "end": "818959"
  },
  {
    "text": "is going to be interpreted in the back end so if we send something like this we will be the back end is going to use the",
    "start": "818959",
    "end": "825079"
  },
  {
    "text": "dollar sign as a delimer and it's going to interpret the path as my account but as the front end is not using the",
    "start": "825079",
    "end": "831720"
  },
  {
    "text": "delimiter it's just going to normalize the path so first it's going to decode it and then it's going to resolve the",
    "start": "831720",
    "end": "838199"
  },
  {
    "text": "dot segment so so we will left with static W CD so now if there's a static",
    "start": "838199",
    "end": "844959"
  },
  {
    "text": "spth configured in the CDN then the the cash BR is going to store this response",
    "start": "844959",
    "end": "850560"
  },
  {
    "text": "because it starts with the static path and therefore we will be able to access it using just static slw",
    "start": "850560",
    "end": "857680"
  },
  {
    "text": "CD of course this as I said this bypass the web cach deception armor because there's no extension and so there's",
    "start": "857680",
    "end": "863680"
  },
  {
    "text": "nothing to compare so we can use it in any in any case even when they are protected with this kind of",
    "start": "863680",
    "end": "870639"
  },
  {
    "text": "implementations now we are going to see which kind of servers and proxies are",
    "start": "870639",
    "end": "876399"
  },
  {
    "text": "being are normalizing the request because that's what we need so in this in this table you can see that",
    "start": "876399",
    "end": "882519"
  },
  {
    "text": "cloudfront aure and impera they are all normalizing the the the URL before using",
    "start": "882519",
    "end": "887959"
  },
  {
    "text": "the path and therefore they will all be used to exploit this these kind of vulnerabilities when the back end is",
    "start": "887959",
    "end": "894360"
  },
  {
    "text": "using a special delimiter so this is the case where we combine imper by aure or Cloud front",
    "start": "894360",
    "end": "900920"
  },
  {
    "text": "with for example Java and Tomcat in this case Java is going to use the deleter",
    "start": "900920",
    "end": "907079"
  },
  {
    "text": "and it's going to interpret the path as secret and in the case of aure imper and Cloud it's just going to be normalized",
    "start": "907079",
    "end": "913120"
  },
  {
    "text": "and we will get the static and again this is going to be stored in the gach",
    "start": "913120",
    "end": "918480"
  },
  {
    "text": "now we can use this with other Frameworks such as rails and puma and",
    "start": "918480",
    "end": "923519"
  },
  {
    "text": "also with with any application that is using a special mapping so if we find something like I describ in the in the",
    "start": "923519",
    "end": "929440"
  },
  {
    "text": "beginning with the wecast deception that was discovered by omil then we can use the same technique if this special",
    "start": "929440",
    "end": "935519"
  },
  {
    "text": "mapping is applied now I said that there is a discrepancy in normalization when the",
    "start": "935519",
    "end": "942920"
  },
  {
    "text": "front end is normalizing and the back end is not but what happen when the front end is not normalizing and the",
    "start": "942920",
    "end": "948959"
  },
  {
    "text": "back end is so this is the case for cler fastly and Google Cloud platform and",
    "start": "948959",
    "end": "955880"
  },
  {
    "text": "also in the front in the back end engine X open light speed and I they are all",
    "start": "955880",
    "end": "961319"
  },
  {
    "text": "normalizing the path so if we send something like static SL the encoded do",
    "start": "961319",
    "end": "966639"
  },
  {
    "text": "segment and secret we are sending the encoded do segment because the browsers the victim is going to be sending this",
    "start": "966639",
    "end": "972920"
  },
  {
    "text": "and we cannot send it without encodings so this is going to be interpreted just as it is because",
    "start": "972920",
    "end": "979519"
  },
  {
    "text": "there's no normalization in the front end but the back end is normalizing the the request and therefore the path is",
    "start": "979519",
    "end": "986440"
  },
  {
    "text": "going to be interpreted as Secret so the response is going to be to whatever",
    "start": "986440",
    "end": "991480"
  },
  {
    "text": "resource we want in this case secret and the front end is going to think that this is a static resource because of the",
    "start": "991480",
    "end": "997920"
  },
  {
    "text": "static path and therefore it's going to store the response this vulnerability was found in",
    "start": "997920",
    "end": "1003079"
  },
  {
    "text": "open Ai and allowed to extract any kind of token API token from any other user",
    "start": "1003079",
    "end": "1010720"
  },
  {
    "text": "we want now I also found that this the",
    "start": "1010720",
    "end": "1016000"
  },
  {
    "text": "normalization there's a normalization discrepancy between is and any other CDN and that's because IIs is the only one",
    "start": "1016000",
    "end": "1022600"
  },
  {
    "text": "that is normalizing backlashes backlashes so when we send something like the the request that we see in the",
    "start": "1022600",
    "end": "1030038"
  },
  {
    "text": "the slide basically I is going to consider this as account however all the CDN that we that we see in the in the SL",
    "start": "1030039",
    "end": "1037400"
  },
  {
    "text": "are all going to think that this starts with static and therefore that this should be stored in the",
    "start": "1037400",
    "end": "1042839"
  },
  {
    "text": "cache and if there's no static directory configured by the user then we and try",
    "start": "1042839",
    "end": "1049200"
  },
  {
    "text": "to Target another rule which is the static files so basically in many CDN by",
    "start": "1049200",
    "end": "1054360"
  },
  {
    "text": "default they will be storing some files like robots.txt sometimes fabicon",
    "start": "1054360",
    "end": "1059760"
  },
  {
    "text": "sometimes index.html and they can also be configured to other to store other resources and the idea is that in this",
    "start": "1059760",
    "end": "1067120"
  },
  {
    "text": "case we need that the path is exactly the same as in this case robot txd so we can extend the same technique",
    "start": "1067120",
    "end": "1074160"
  },
  {
    "text": "that I explained previously to modify the the expect expected result expected",
    "start": "1074160",
    "end": "1079919"
  },
  {
    "text": "result in the front end and the back end so basically the first part of the URL is going to be used in the in the back",
    "start": "1079919",
    "end": "1086559"
  },
  {
    "text": "end because of the the limiter and then the last part is going to be used in the front in the front end because of the",
    "start": "1086559",
    "end": "1092919"
  },
  {
    "text": "normalization so if we try to steal Secrets then we can use robots txt to",
    "start": "1092919",
    "end": "1098120"
  },
  {
    "text": "store this basically we will send a request that is going to be interpreted as secret in the back end and it's going to be interpreted as robot.txt in the",
    "start": "1098120",
    "end": "1105480"
  },
  {
    "text": "back in the front end so webcast deception is really good",
    "start": "1105480",
    "end": "1110960"
  },
  {
    "text": "but we need user interaction and we I I wanted to find an attack that I don't",
    "start": "1110960",
    "end": "1116559"
  },
  {
    "text": "require any user interaction at all so the other way we can exploit a webcash",
    "start": "1116559",
    "end": "1121720"
  },
  {
    "text": "is using webcash poisoning and basically in this attack we are going to try to store a malicious response in this case",
    "start": "1121720",
    "end": "1128120"
  },
  {
    "text": "a response that contains a script that was reflected because of the cookies and the idea is that because of",
    "start": "1128120",
    "end": "1134760"
  },
  {
    "text": "the because the resources being cached because it contains the cash control CER then this is going to be poisoning the",
    "start": "1134760",
    "end": "1142760"
  },
  {
    "text": "homepage however so sorry the when the client tries to access home he will just",
    "start": "1142760",
    "end": "1148360"
  },
  {
    "text": "get this store resource and he will be exploited with the script that was injected but the problem is what if we",
    "start": "1148360",
    "end": "1156679"
  },
  {
    "text": "have to poison what the if the response that we poison is not accessed by anyone when they navigate through the website",
    "start": "1156679",
    "end": "1163080"
  },
  {
    "text": "so let's say that the vulnerable endpoint is files your username and a unique identifier then this is probably",
    "start": "1163080",
    "end": "1169520"
  },
  {
    "text": "not going to be visited by any user so in this case we will need some user interaction and again this is not really",
    "start": "1169520",
    "end": "1176159"
  },
  {
    "text": "useful in webcash poisoning so what I wanted to do is to modify that key so",
    "start": "1176159",
    "end": "1181799"
  },
  {
    "text": "that we can modify what is being poisoned and eventually be able to poison and affect any user navigating",
    "start": "1181799",
    "end": "1189159"
  },
  {
    "text": "through the website without having to interact with them and to do so we will use key",
    "start": "1189159",
    "end": "1194799"
  },
  {
    "text": "normalization basically key normalization is using normalization to create the key and this is by default in",
    "start": "1194799",
    "end": "1201720"
  },
  {
    "text": "impera aure and partially inami and this can also be configured in any other CDN",
    "start": "1201720",
    "end": "1207360"
  },
  {
    "text": "and the way we can detect if the key is being normalized is by sending a request to styles. CSS or any other resource",
    "start": "1207360",
    "end": "1214280"
  },
  {
    "text": "that is cachable and if we observe that this is being retrieved from the cach then we just need to modify the path so",
    "start": "1214280",
    "end": "1220919"
  },
  {
    "text": "that when normalized we again get styles. TSS if we get that the same the",
    "start": "1220919",
    "end": "1226280"
  },
  {
    "text": "same response and the response was also obtained from the cache so for instance if we find that there's a x cach heater",
    "start": "1226280",
    "end": "1232960"
  },
  {
    "text": "with the value heat then we will be able to use this and modify the key as I'm",
    "start": "1232960",
    "end": "1239200"
  },
  {
    "text": "going to explain later so if we have this key normalization and we find that there's a",
    "start": "1239200",
    "end": "1244960"
  },
  {
    "text": "delimiter at the back end then we can use the delimiter to create a path that",
    "start": "1244960",
    "end": "1250840"
  },
  {
    "text": "is going to be interpreted as exploit which is the part that that is is getting the response with the malicious",
    "start": "1250840",
    "end": "1257600"
  },
  {
    "text": "content and then we can use normalization to modify the path that is poisoned so we can put anything we want",
    "start": "1257600",
    "end": "1264240"
  },
  {
    "text": "and this allow us to create an arbitrary work pooning attack so I'm going to show how we can",
    "start": "1264240",
    "end": "1272440"
  },
  {
    "text": "use this in impera but first let me say that even though I I stated that there were four delimiters that are really",
    "start": "1272440",
    "end": "1278440"
  },
  {
    "text": "useful and can be used in in any application there's also one extra delimiter that we weren't using in cash",
    "start": "1278440",
    "end": "1284960"
  },
  {
    "text": "deception which is the hash and that's because the browser will not send anything after cash even in some",
    "start": "1284960",
    "end": "1290559"
  },
  {
    "text": "conditions we we can exploit this if the the limiter is going to be decoded but in most cases it's impossible to use it",
    "start": "1290559",
    "end": "1295760"
  },
  {
    "text": "in web Cas deception but the thing is different for web cash poisoning because we can just open a session and send this",
    "start": "1295760",
    "end": "1302480"
  },
  {
    "text": "directly to the website and the interesting thing about the hash is that in Pera for instance cler and fast they",
    "start": "1302480",
    "end": "1309559"
  },
  {
    "text": "don't consider that the hash is at the limiter so they will just behave like it's it's an it's a common character",
    "start": "1309559",
    "end": "1316440"
  },
  {
    "text": "like an aski value any any other and the the thing is different for a",
    "start": "1316440",
    "end": "1322000"
  },
  {
    "text": "backend server because engine X unicorn Puma rails flask LEL and many others they all consider the hash as a the",
    "start": "1322000",
    "end": "1328919"
  },
  {
    "text": "limiter so basically if we send something like xss the hash and then the",
    "start": "1328919",
    "end": "1335080"
  },
  {
    "text": "path that is going to be normalized what's going to happen is that the back end any of the ones I I",
    "start": "1335080",
    "end": "1341080"
  },
  {
    "text": "mentioned is going to convert this to xss and it's going to generate the payload which contains the malicious",
    "start": "1341080",
    "end": "1347919"
  },
  {
    "text": "response that the attacker wants to use to poison another resource now impire is not going",
    "start": "1347919",
    "end": "1353760"
  },
  {
    "text": "to use the hash as at the limiter and therefore it's going to just normalize the path and then we will get home and",
    "start": "1353760",
    "end": "1360320"
  },
  {
    "text": "so the home page is going to be poisoned now when an attacker sends a request to home he will be able to hijack to sorry",
    "start": "1360320",
    "end": "1368520"
  },
  {
    "text": "when the user is visiting home he will get the poison response and he will be",
    "start": "1368520",
    "end": "1374559"
  },
  {
    "text": "affected by this and this vity was found in bit stamp master and T-Mobile and",
    "start": "1374559",
    "end": "1379960"
  },
  {
    "text": "many other back Bounty programs and I invite you to look for all of them because this behavior is still observed",
    "start": "1379960",
    "end": "1385840"
  },
  {
    "text": "in impera and in many other CDN and we can use the same technique",
    "start": "1385840",
    "end": "1391320"
  },
  {
    "text": "with other the limiters like the semicolon for Java and in this case we could also use aure because in this case",
    "start": "1391320",
    "end": "1396799"
  },
  {
    "text": "aure is normalizing the key so if we have aure inera and any other back end",
    "start": "1396799",
    "end": "1402760"
  },
  {
    "text": "using Java or Tomcat then we will have the same effect and the same happens",
    "start": "1402760",
    "end": "1408039"
  },
  {
    "text": "with ra with engx and with any any back end that is",
    "start": "1408039",
    "end": "1414559"
  },
  {
    "text": "using the special mapping to to find the endpoint that should handle the",
    "start": "1414559",
    "end": "1420400"
  },
  {
    "text": "request so let me show how we can use aure now in this case we are going to",
    "start": "1420400",
    "end": "1426279"
  },
  {
    "text": "use the hash as a delimiter in the front end and this is the only delimiter I found that affects a front end and not a",
    "start": "1426279",
    "end": "1433120"
  },
  {
    "text": "back end so that's why the hash is also really interesting for me and in this case I should considers the hash aimer",
    "start": "1433120",
    "end": "1440559"
  },
  {
    "text": "but this is not true for open light for Jango or for Express so if we have a delimiter at the",
    "start": "1440559",
    "end": "1447880"
  },
  {
    "text": "front end and it could be other delimiters also not only the hash but in this case I found that it was affecting",
    "start": "1447880",
    "end": "1454120"
  },
  {
    "text": "ashure in this way so if we using a the limit in the front end what is going to happen is that the path that is going to",
    "start": "1454120",
    "end": "1460440"
  },
  {
    "text": "be obtained from this URL is just going to be home because of the delimiter and then is if the back end is not using the",
    "start": "1460440",
    "end": "1468039"
  },
  {
    "text": "delim is going to just normalize the Euro and we will have with exploit so again we will be able to",
    "start": "1468039",
    "end": "1474520"
  },
  {
    "text": "poison the home the homepage with any exp or any response we",
    "start": "1474520",
    "end": "1479720"
  },
  {
    "text": "want this was found again in open AI because they were using aure and I think",
    "start": "1479720",
    "end": "1484880"
  },
  {
    "text": "was python in the back end so what if we don't have any payload",
    "start": "1484880",
    "end": "1490600"
  },
  {
    "text": "to to use as an exploit or as to store for for the poison endpoint so in",
    "start": "1490600",
    "end": "1497760"
  },
  {
    "text": "this case let's say we don't have any xss or anything that we can use to reflect and to affect a user well pretty",
    "start": "1497760",
    "end": "1504679"
  },
  {
    "text": "easy we can just choose any static resource like styles. CSS and we can",
    "start": "1504679",
    "end": "1509919"
  },
  {
    "text": "start poisoning every single H end point with this with this response so that",
    "start": "1509919",
    "end": "1516080"
  },
  {
    "text": "when a client tries to access home or my account or any other endpoint he will just receive the CSS and this will be",
    "start": "1516080",
    "end": "1523440"
  },
  {
    "text": "effect eventually leading to denial service so now I'm going to show how we can",
    "start": "1523440",
    "end": "1530279"
  },
  {
    "text": "combine both techniques in order to store any payload we want and to exploit",
    "start": "1530279",
    "end": "1535919"
  },
  {
    "text": "any any application by by modifying the behavior of like the homepage or any",
    "start": "1535919",
    "end": "1542080"
  },
  {
    "text": "page that is going to be visited by a user to do so first we need to identify",
    "start": "1542080",
    "end": "1547919"
  },
  {
    "text": "a malicious response so in this case the response is basically eil.com",
    "start": "1547919",
    "end": "1553480"
  },
  {
    "text": "H sorry the the response is the one obtained from logout so this case we",
    "start": "1553480",
    "end": "1558799"
  },
  {
    "text": "have an open rir and it's pretty it's pretty easy because in this case we are",
    "start": "1558799",
    "end": "1564480"
  },
  {
    "text": "including X4 host heater and this heater is going to be used for creating the",
    "start": "1564480",
    "end": "1569640"
  },
  {
    "text": "reloc relocation heater in the response and so we have an open rir and as you can see there's no cache control heer so",
    "start": "1569640",
    "end": "1576799"
  },
  {
    "text": "this shouldn't be really exploitable we can't use it in",
    "start": "1576799",
    "end": "1581440"
  },
  {
    "text": "anything so right now we have the payload that we want to use to store and",
    "start": "1582720",
    "end": "1588360"
  },
  {
    "text": "to modify the behavior of the of the application now what we are going to use is the um we are going to look for a",
    "start": "1588360",
    "end": "1596600"
  },
  {
    "text": "resource that we want to poison so we want to modify the behavior of another resource and in this case I'm going to",
    "start": "1596600",
    "end": "1602240"
  },
  {
    "text": "use main.js and that's because when the homepage is loaded it's going to import",
    "start": "1602240",
    "end": "1607799"
  },
  {
    "text": "this main.js script and so we want to modify what is being return for that",
    "start": "1607799",
    "end": "1614840"
  },
  {
    "text": "resource and the idea is we're going to try to put an open Direct in the place of the main.js so that when the browser",
    "start": "1614840",
    "end": "1623200"
  },
  {
    "text": "loads the homepage it will look for the um main.js script and this will return",
    "start": "1623200",
    "end": "1629000"
  },
  {
    "text": "an open redirect which can be used to redirect the big browser to a malicious",
    "start": "1629000",
    "end": "1634919"
  },
  {
    "text": "server and this server is going to return a malicious JavaScript that can be used to modify the behavior of the",
    "start": "1634919",
    "end": "1642960"
  },
  {
    "text": "browser and I'm going to show a demo using impera and NX and IDE the idea",
    "start": "1642960",
    "end": "1649200"
  },
  {
    "text": "again is to include a URL that starts with the malicious endpoint in this case",
    "start": "1649200",
    "end": "1654520"
  },
  {
    "text": "log out this will include the X4 host heater to generate a malicious open R",
    "start": "1654520",
    "end": "1662679"
  },
  {
    "text": "response now as the cash the cash proxy in this case in Pera is normalizing the",
    "start": "1662679",
    "end": "1668200"
  },
  {
    "text": "path it will think that this response should be stored in main.js and as the",
    "start": "1668200",
    "end": "1673240"
  },
  {
    "text": "main.js has a static extension it will think that this is a static resource and it will be stored in that",
    "start": "1673240",
    "end": "1680720"
  },
  {
    "text": "place now when the user sends a request to home this request is going to be",
    "start": "1680720",
    "end": "1686799"
  },
  {
    "text": "forwarded to Eng X and engx is going to return the homepage which tells the",
    "start": "1686799",
    "end": "1692200"
  },
  {
    "text": "browser that it should it should load the main.js script so the bigam browser",
    "start": "1692200",
    "end": "1697960"
  },
  {
    "text": "is going to look for that and it's going to send a request to main.js now impera has a response for",
    "start": "1697960",
    "end": "1703679"
  },
  {
    "text": "BJs so it's going to send a response which is an open rir now the big browser",
    "start": "1703679",
    "end": "1709240"
  },
  {
    "text": "is going to follow this rir and it's going to go to the eil.com server which is controlled by the",
    "start": "1709240",
    "end": "1715080"
  },
  {
    "text": "attacker the attacker is going to return a JavaScript that is going to be used in the",
    "start": "1715080",
    "end": "1720360"
  },
  {
    "text": "homepage and so we will be able to create any any JavaScript we want and",
    "start": "1720360",
    "end": "1725960"
  },
  {
    "text": "inject it in the homepage and in any page that is using actually main.js which usually is a lot of",
    "start": "1725960",
    "end": "1731320"
  },
  {
    "text": "pages and if we have something like a cont security policy that is not",
    "start": "1731320",
    "end": "1736440"
  },
  {
    "text": "allowing us to load a from another place usually we won't find a CSP policy that",
    "start": "1736440",
    "end": "1743760"
  },
  {
    "text": "provides that prevents from loading CSS so we could also use this to modify the",
    "start": "1743760",
    "end": "1748919"
  },
  {
    "text": "behavior of a CSS and have CSS extration if you watch yesterday's talk from",
    "start": "1748919",
    "end": "1755000"
  },
  {
    "text": "Gareth then you know that this can be used to extract anything we want so I'm going to show the",
    "start": "1755000",
    "end": "1763799"
  },
  {
    "text": "demo so this is the web page that we are going to attack is using impera it's",
    "start": "1765919",
    "end": "1772200"
  },
  {
    "text": "using impera right now so hopefully they didn't fix it ER as you can see when we load the",
    "start": "1772200",
    "end": "1778640"
  },
  {
    "text": "homepage nothing happens so if we send a request to the",
    "start": "1778640",
    "end": "1783919"
  },
  {
    "text": "homepage we will see that it's including the script so that's the script we want",
    "start": "1783919",
    "end": "1789799"
  },
  {
    "text": "to modify now this is the actual value of the script and as you can see it's being",
    "start": "1789799",
    "end": "1795679"
  },
  {
    "text": "cached okay I said it for 25 seconds so we will be able to cach it",
    "start": "1795679",
    "end": "1800840"
  },
  {
    "text": "anyway and what we want is to modify the response of this resource with the open",
    "start": "1800840",
    "end": "1807440"
  },
  {
    "text": "rir now this is the open rir if we send a request to it we will see that it's reflecting the X4 host",
    "start": "1807440",
    "end": "1815440"
  },
  {
    "text": "heer in the location and also what's really",
    "start": "1815440",
    "end": "1820799"
  },
  {
    "text": "interesting is that in this case I added a cache control heater which is says that this is private no store so it's",
    "start": "1820799",
    "end": "1827559"
  },
  {
    "text": "basically the origin serice is basically saying to the to the front end that this shouldn't be stored and this is not a",
    "start": "1827559",
    "end": "1833760"
  },
  {
    "text": "static resource so we are doing everything right from the origin server",
    "start": "1833760",
    "end": "1838840"
  },
  {
    "text": "point of view now this is the the malicious uh",
    "start": "1838840",
    "end": "1845360"
  },
  {
    "text": "server and if we send our request to login which is the the page that is",
    "start": "1845360",
    "end": "1850559"
  },
  {
    "text": "going to be loaded then we see that we have the malicious JavaScript that we want to load and we want to use to",
    "start": "1850559",
    "end": "1857080"
  },
  {
    "text": "poison the the victim and finally this is the attack so",
    "start": "1857080",
    "end": "1865080"
  },
  {
    "text": "what we are going to do is we want to create a response for",
    "start": "1865080",
    "end": "1870600"
  },
  {
    "text": "lout and we want to include the hashtag this is because the back end is going to",
    "start": "1870760",
    "end": "1876159"
  },
  {
    "text": "just use this as the path because of the hashtag and as you can remember this",
    "start": "1876159",
    "end": "1882080"
  },
  {
    "text": "response should contain a an open R now",
    "start": "1882080",
    "end": "1888639"
  },
  {
    "text": "as the as the front end is not using the hash it's just normalizing the path we can include this path reversal and then",
    "start": "1888639",
    "end": "1895679"
  },
  {
    "text": "the resource that we want to",
    "start": "1895679",
    "end": "1899880"
  },
  {
    "text": "modify now as you see we get the same response private no store so basically",
    "start": "1901120",
    "end": "1906720"
  },
  {
    "text": "it seems like it didn't work but if we send a request again you can see that it was stored and if we send a request to",
    "start": "1906720",
    "end": "1913840"
  },
  {
    "text": "main.js which used to have a 200 now it's rir so let me send this attack again",
    "start": "1913840",
    "end": "1922039"
  },
  {
    "text": "because it's going to last for 25 seconds okay so when we load the",
    "start": "1922039",
    "end": "1928399"
  },
  {
    "text": "homepage again we get arbitrary weight cash",
    "start": "1928399",
    "end": "1934530"
  },
  {
    "text": "[Applause]",
    "start": "1934530",
    "end": "1942279"
  },
  {
    "text": "poison okay so basically these are the defenses we can apply to protect against",
    "start": "1942279",
    "end": "1948080"
  },
  {
    "text": "these attacks the first one is to protect against web cach deception always use the directive the cache",
    "start": "1948080",
    "end": "1954279"
  },
  {
    "text": "control heater with the private and no store directives however as we just saw this sometimes will not work so try to",
    "start": "1954279",
    "end": "1961799"
  },
  {
    "text": "see if it's possible to disable the um this feature that is overriding the cach",
    "start": "1961799",
    "end": "1967200"
  },
  {
    "text": "control heater and if it's not possible we'll consider changing the CDM and also",
    "start": "1967200",
    "end": "1973039"
  },
  {
    "text": "for defending against web cach poisoning this is really again just choosing the",
    "start": "1973039",
    "end": "1978720"
  },
  {
    "text": "right CDN because if we are going to choose a CDN that is normalizing the key then remember that this is going to",
    "start": "1978720",
    "end": "1984320"
  },
  {
    "text": "happen and try to see if there's no discrepancies with the HTTP server so that it's not possible to create even a",
    "start": "1984320",
    "end": "1990480"
  },
  {
    "text": "d of service or even a wor and you can also use the tool I will",
    "start": "1990480",
    "end": "1995600"
  },
  {
    "text": "provide in GitHub that is a BP extension to detect if there's any path confusion",
    "start": "1995600",
    "end": "2001559"
  },
  {
    "text": "that could be used for web cach poisoning or web cach deception these are all the different",
    "start": "2001559",
    "end": "2007440"
  },
  {
    "text": "links that are that were used to create this do and also the at the end you can",
    "start": "2007440",
    "end": "2012840"
  },
  {
    "text": "find the B extension link which is a a repository in",
    "start": "2012840",
    "end": "2018840"
  },
  {
    "text": "GitHub finally the takes hours of the session um so as I as I show we can use",
    "start": "2018840",
    "end": "2024960"
  },
  {
    "text": "parsing discrepancies in almost any website to exploit webcash poisoning and web cach deception all these attacks",
    "start": "2024960",
    "end": "2030840"
  },
  {
    "text": "should work right now because they were not fixed because they were not vulnerabilities it's really hard to fix",
    "start": "2030840",
    "end": "2036240"
  },
  {
    "text": "these kind of things because just at it happen with HB smuggling we are exploiting discrepancies so if I tell I",
    "start": "2036240",
    "end": "2043159"
  },
  {
    "text": "don't know if I tell ncdn that they are using a the limiter or they are not using a limiter they are going to tell",
    "start": "2043159",
    "end": "2048320"
  },
  {
    "text": "me that they are complying with the RFC and the problem is from the origin server and is this just going to be a",
    "start": "2048320",
    "end": "2054800"
  },
  {
    "text": "problem of blaming each other also we saw that we can apply all these",
    "start": "2054800",
    "end": "2060679"
  },
  {
    "text": "different techniques in many back Bounty programs I didn't found a lot of vulnerabilities with this or actually I",
    "start": "2060679",
    "end": "2067280"
  },
  {
    "text": "did find but I didn't look for many vulnerabilities because I didn't have time so I invite you all to use this",
    "start": "2067280",
    "end": "2073200"
  },
  {
    "text": "tool to find a lot of targets and probably you will be able to find a lot of vulnerabilities because last time I",
    "start": "2073200",
    "end": "2078720"
  },
  {
    "text": "checked there were about probably 10,000 of sides that were using special delimiters so this is going to be really",
    "start": "2078720",
    "end": "2085760"
  },
  {
    "text": "useful for those that are doing back bounties and finally I showed how we can",
    "start": "2085760",
    "end": "2091398"
  },
  {
    "text": "change these different techniques in order to increase severity so always consider using these kind of chains to",
    "start": "2091399",
    "end": "2097839"
  },
  {
    "text": "create new exploits that are going to prove that this should be stored that this should be fixed in every site I",
    "start": "2097839",
    "end": "2104079"
  },
  {
    "text": "when first when I first reported this to many websites they told me that this wasn't a vulnerability even even though",
    "start": "2104079",
    "end": "2109599"
  },
  {
    "text": "I was able to show that the attacker C could cause denial service so I had to",
    "start": "2109599",
    "end": "2114920"
  },
  {
    "text": "create this new attack to show that we could create an attack that takes control entire",
    "start": "2114920",
    "end": "2121680"
  },
  {
    "text": "site okay thank you and I still have some time for questions fortunately",
    "start": "2121680",
    "end": "2127920"
  },
  {
    "text": "[Applause]",
    "start": "2127920",
    "end": "2136449"
  },
  {
    "text": "thank you I have a question for you over here on this side uh so for an organization",
    "start": "2138440",
    "end": "2146760"
  },
  {
    "text": "uh trying to protect their servers I suppose this is very difficult to uh detect pre-production right so if you're",
    "start": "2146760",
    "end": "2153280"
  },
  {
    "text": "in QA or a developer I suppose uh for a pentest team this this has to be in",
    "start": "2153280",
    "end": "2158680"
  },
  {
    "text": "production to have the web cach in the way right yeah yeah usually it's not easy to detect this because it's not",
    "start": "2158680",
    "end": "2165599"
  },
  {
    "text": "related with the application itself is related with the with the way we configure the web cach and the way we",
    "start": "2165599",
    "end": "2171520"
  },
  {
    "text": "configure our own HTTP server thank you [Applause]",
    "start": "2171520",
    "end": "2181290"
  }
]