[
  {
    "text": "[Music] foreign",
    "start": "1700",
    "end": "6720"
  },
  {
    "text": "Welcome to our session today we will talk about unique",
    "start": "9019",
    "end": "14400"
  },
  {
    "text": "vulnerabilities we discovered in the implementation of possess SQL as a",
    "start": "14400",
    "end": "19440"
  },
  {
    "text": "managed service across multiple Cloud providers during the session we will go into the",
    "start": "19440",
    "end": "25619"
  },
  {
    "text": "technical details of the vulnerabilities how we were able to exploit certain modifications in the process SQL in",
    "start": "25619",
    "end": "32220"
  },
  {
    "text": "order to get a previous escalation and also costanant access to other databases of other customers",
    "start": "32220",
    "end": "39600"
  },
  {
    "text": "um I hope that after this session you will have much better understanding of how many services work in general in the",
    "start": "39600",
    "end": "47460"
  },
  {
    "text": "cloud also about how open source project that was written 25 years ago was integrated",
    "start": "47460",
    "end": "54239"
  },
  {
    "text": "into a managed service and offered to a lot of customers some postcode SQL internals because it's always fun to go",
    "start": "54239",
    "end": "61020"
  },
  {
    "text": "into the internals and how we as The Wiz research team conduct our research",
    "start": "61020",
    "end": "68220"
  },
  {
    "text": "and just a fun fact all the elephants you see on the screen are actually AI generated which is a pretty cool you",
    "start": "68220",
    "end": "75780"
  },
  {
    "text": "will see there was another session so let's start with a bit about us my",
    "start": "75780",
    "end": "81420"
  },
  {
    "text": "name is and both of us from the wheel research",
    "start": "81420",
    "end": "86460"
  },
  {
    "text": "team we try to bring groundbreaking new Research into the cloud industry we",
    "start": "86460",
    "end": "92040"
  },
  {
    "text": "would like to uncover and find new risks both for protecting our customers but",
    "start": "92040",
    "end": "97979"
  },
  {
    "text": "also to share with the community and present it here on that stage um",
    "start": "97979",
    "end": "103439"
  },
  {
    "text": "we add some notable research like oh my God chaosdb also extra replica which we",
    "start": "103439",
    "end": "109619"
  },
  {
    "text": "are going to talk about today and um yeah so near would you like to tell us",
    "start": "109619",
    "end": "115079"
  },
  {
    "text": "what is the agenda for today thank you Shield so in today's agenda we'll first off",
    "start": "115079",
    "end": "121140"
  },
  {
    "text": "begin with some motivation what actually led us to research the implementation of",
    "start": "121140",
    "end": "126180"
  },
  {
    "text": "possess SQL across multiple Cloud vendors we'll then dive into two implementation",
    "start": "126180",
    "end": "131580"
  },
  {
    "text": "vulnerabilities that was that were caused by the modifications that cloud vendors introduced to the possess a SQL",
    "start": "131580",
    "end": "137879"
  },
  {
    "text": "engine and we also show how we managed to leverage this kind of vulnerabilities to",
    "start": "137879",
    "end": "143400"
  },
  {
    "text": "gain an unauthorized access to the databases of other customers using the service and we'll finish things off with some",
    "start": "143400",
    "end": "150660"
  },
  {
    "text": "takeaways so our Story begins in last year's",
    "start": "150660",
    "end": "155819"
  },
  {
    "text": "blackout Europe well my colleagues are gay and I presented on stage ksdb",
    "start": "155819",
    "end": "163080"
  },
  {
    "text": "we showed that how almost by accident by left by it's exploiting a chain of",
    "start": "163080",
    "end": "168959"
  },
  {
    "text": "vulnerabilities we were able to gain an unauthorized access to the database instances of other customers using one",
    "start": "168959",
    "end": "175440"
  },
  {
    "text": "of azure's Flagship database Solutions Cosmos DB",
    "start": "175440",
    "end": "180680"
  },
  {
    "text": "thinking could it be that chaosdb is not an isolated case and that there are more",
    "start": "183720",
    "end": "190500"
  },
  {
    "text": "cloud services that may be vulnerable to the similar kind of attacks so essentially the same developed like a",
    "start": "190500",
    "end": "196980"
  },
  {
    "text": "talk we are already looking for next Target so Cosmos DB was a minute service that",
    "start": "196980",
    "end": "203400"
  },
  {
    "text": "that gave us the ability to execute code on a short environment so we wanted to",
    "start": "203400",
    "end": "208980"
  },
  {
    "text": "find a similar service a managed service that actually lets us to execute code in",
    "start": "208980",
    "end": "214379"
  },
  {
    "text": "a shared environment a shared environment is an environment matched by the cloud vendor that actually hosts the",
    "start": "214379",
    "end": "221340"
  },
  {
    "text": "instances of multiple customers during the research we found that this is where Cloud vendors struggle the most",
    "start": "221340",
    "end": "227879"
  },
  {
    "text": "in keeping the customers instances completely isolated for one another",
    "start": "227879",
    "end": "233040"
  },
  {
    "text": "and we wanted to build database as a service databases are one of the most integral",
    "start": "233040",
    "end": "238860"
  },
  {
    "text": "Parts in any organization making them the attack is Holy Grail",
    "start": "238860",
    "end": "244799"
  },
  {
    "text": "in the end of the day almost every network operations goal is to get to the database",
    "start": "244799",
    "end": "249900"
  },
  {
    "text": "so with that that if we manage to find another vulnerability in database of the service it sure would have a lot of",
    "start": "249900",
    "end": "256560"
  },
  {
    "text": "impact so we are looking for a database as a service that has the ability to execute",
    "start": "256560",
    "end": "262860"
  },
  {
    "text": "code in the form of a feature and after a good few hours of scouting or this kind of a service we are pretty",
    "start": "262860",
    "end": "270000"
  },
  {
    "text": "much left empty-handed apparently Cosmos DB was kind of a special snowflake in the its direct",
    "start": "270000",
    "end": "276660"
  },
  {
    "text": "ability to actually execute code in a shared environment but then we thought that",
    "start": "276660",
    "end": "282720"
  },
  {
    "text": "all of these databases services are actually based on open source database Solutions",
    "start": "282720",
    "end": "288720"
  },
  {
    "text": "and one of these database Solutions must have a feature that will actually let us to execute code in a kind of",
    "start": "288720",
    "end": "294479"
  },
  {
    "text": "straightforward way and apparently poses SQL one of the internet's most",
    "start": "294479",
    "end": "300479"
  },
  {
    "text": "popular database engines a database agent that is being used across all major Cloud providers",
    "start": "300479",
    "end": "306300"
  },
  {
    "text": "actually has a very straightforward way of executing code via SQL",
    "start": "306300",
    "end": "311940"
  },
  {
    "text": "you can execute the following SQL query which starts with creating a table that stores the",
    "start": "311940",
    "end": "318120"
  },
  {
    "text": "command's output executing the command via the copy statement in this case we are executing",
    "start": "318120",
    "end": "323880"
  },
  {
    "text": "the ID command that shows the Privileges of the currently running user and then we'll query the commands result",
    "start": "323880",
    "end": "330000"
  },
  {
    "text": "and executing this command should this query should give us something that looks like this",
    "start": "330000",
    "end": "337638"
  },
  {
    "text": "so the last thing we did is to take this exact SQL query and execute it against every manage process SQL available on",
    "start": "337860",
    "end": "345360"
  },
  {
    "text": "the market hoping that at least one of them forgot about this little trick",
    "start": "345360",
    "end": "350580"
  },
  {
    "text": "but unfortunately without any exception they all gave us the same error message",
    "start": "350580",
    "end": "357419"
  },
  {
    "text": "stating that we are simply lacking the Privileges to use the copy statement and that in order to use the copy",
    "start": "357419",
    "end": "363780"
  },
  {
    "text": "statement we need to be a super user but I mean the process is secure",
    "start": "363780",
    "end": "369240"
  },
  {
    "text": "privilege model shouldn't be the thing that stops us from executing code I mean this is not a real security",
    "start": "369240",
    "end": "374940"
  },
  {
    "text": "burial how hard could it be to actually manage to find a vulnerability that will allow",
    "start": "374940",
    "end": "381300"
  },
  {
    "text": "us to elevate our privileges to a super users and thus gain the ability to execute commands and then get an inside",
    "start": "381300",
    "end": "388139"
  },
  {
    "text": "look to the service internal workings and to answer this very question I would",
    "start": "388139",
    "end": "394080"
  },
  {
    "text": "like to invite Shield back to Stage to walk you through some very cool vulnerabilities thanks",
    "start": "394080",
    "end": "400560"
  },
  {
    "text": "okay so we had we took this snippet we run it across a lot of cloud providers a lot of managed processor services and",
    "start": "400560",
    "end": "408240"
  },
  {
    "text": "one of them was gcp the Google Cloud compute and specifically the cloud SQL",
    "start": "408240",
    "end": "414660"
  },
  {
    "text": "service the cloud SQL provide customers with multiple open sources databases offerings and and we created in postgres",
    "start": "414660",
    "end": "423180"
  },
  {
    "text": "SQL instance we connected and we tried to execute code with no success",
    "start": "423180",
    "end": "428580"
  },
  {
    "text": "so the first thing we did is we try to understand who are we what permissions do we have",
    "start": "428580",
    "end": "433800"
  },
  {
    "text": "over the database so we can see that we are running as the user postgres and the user postgres is a member of the",
    "start": "433800",
    "end": "440940"
  },
  {
    "text": "cloud SQL super usable and it doesn't seems like we have special permissions we are definitely low privileged user",
    "start": "440940",
    "end": "447479"
  },
  {
    "text": "with no permissions and another user we have in the database is the cloud SQL admin this is actually",
    "start": "447479",
    "end": "454500"
  },
  {
    "text": "an administrator a super user within a database and used by Google to manage this instance and we don't have any",
    "start": "454500",
    "end": "461699"
  },
  {
    "text": "access to it so we don't have permissions to execute code and we are not real super users",
    "start": "461699",
    "end": "468599"
  },
  {
    "text": "but apparently we can create event ringers",
    "start": "468599",
    "end": "473759"
  },
  {
    "text": "now eventually gas is not necessarily um a dangerous operation in postgres you",
    "start": "473759",
    "end": "478860"
  },
  {
    "text": "just create an event trigger the thing about event triggers is that only super",
    "start": "478860",
    "end": "484620"
  },
  {
    "text": "users can create event triggers this is from this screenshot is from the official process SQL documentation",
    "start": "484620",
    "end": "490620"
  },
  {
    "text": "now this is weird because we don't have permissions in the database we are not super users but yet we can create",
    "start": "490620",
    "end": "496259"
  },
  {
    "text": "different triggers what's going on here and it's not just the ventricles it's also loading",
    "start": "496259",
    "end": "502259"
  },
  {
    "text": "extensions in process SQL you must be a super user in order to load most extensions and here we have a case where",
    "start": "502259",
    "end": "510060"
  },
  {
    "text": "we can actually load extensions this is also weird something else we noticed is that we can create a table and change",
    "start": "510060",
    "end": "517620"
  },
  {
    "text": "the owner of the table to another user to just give it to another user in the database even users which are not",
    "start": "517620",
    "end": "524640"
  },
  {
    "text": "associated with alcohol and this is also very not default Behavior I mean if you have a screenshot",
    "start": "524640",
    "end": "531000"
  },
  {
    "text": "we can create a table let's call it test table owned by the user postgres we can actually change the owner to the cloud",
    "start": "531000",
    "end": "537420"
  },
  {
    "text": "SQL admin which we are not associated with and this is not the default Behavior",
    "start": "537420",
    "end": "542519"
  },
  {
    "text": "so this made us believe that the process SQL engine was modified later we actually discovered that Google",
    "start": "542519",
    "end": "550399"
  },
  {
    "text": "publicly announced this they share this in their documentation they say that you",
    "start": "550399",
    "end": "555420"
  },
  {
    "text": "cannot create database users that have super user privileges however you can create database users with the cloud SQL",
    "start": "555420",
    "end": "562320"
  },
  {
    "text": "super user role which has some super user privileges including creating extensions creating event triggers",
    "start": "562320",
    "end": "568680"
  },
  {
    "text": "creating application users so now we know that the possible engine was modified",
    "start": "568680",
    "end": "574980"
  },
  {
    "text": "um and we are not really a super user but also we are not regular user because",
    "start": "574980",
    "end": "580860"
  },
  {
    "text": "we have some super user capabilities that brought us to raise a very",
    "start": "580860",
    "end": "587339"
  },
  {
    "text": "interesting resource question can we use those capabilities those",
    "start": "587339",
    "end": "592980"
  },
  {
    "text": "unique capabilities that Google offered us in order to break the process SQL security model and use those into to",
    "start": "592980",
    "end": "600000"
  },
  {
    "text": "elevate our privileges so we were exploring those functionalities and the ones that caught",
    "start": "600000",
    "end": "606120"
  },
  {
    "text": "our eyes was the option to alter a table and change the owner of the table to",
    "start": "606120",
    "end": "611580"
  },
  {
    "text": "another user basically in postgres if we create a table and we try to change the owner to",
    "start": "611580",
    "end": "617279"
  },
  {
    "text": "a user we are not associated with we should receive the following error message that we must be a member of the",
    "start": "617279",
    "end": "623160"
  },
  {
    "text": "world Cloud SQL admin in this case but in Google it actually worked we",
    "start": "623160",
    "end": "628380"
  },
  {
    "text": "managed to create a table and to change the owner to the cloud SQL admin now in order to understand like how",
    "start": "628380",
    "end": "635100"
  },
  {
    "text": "impactful this capability could be we will do a very short recap of two very basic",
    "start": "635100",
    "end": "642540"
  },
  {
    "text": "things in postgres tables and indexes imagine we have a table called employees",
    "start": "642540",
    "end": "650279"
  },
  {
    "text": "table we have the three records Shear near and Bill and the table is indexed",
    "start": "650279",
    "end": "655860"
  },
  {
    "text": "by the ID column whenever we installed a new whenever a user insert new item to the table the",
    "start": "655860",
    "end": "662220"
  },
  {
    "text": "table has a new item now postgres supports indexes like any",
    "start": "662220",
    "end": "667860"
  },
  {
    "text": "relational database but also it supports index functions which mean we can create",
    "start": "667860",
    "end": "672899"
  },
  {
    "text": "an index on a certain column and that whenever we insert something to the table it will be indexed based on the",
    "start": "672899",
    "end": "680459"
  },
  {
    "text": "output of a certain function so every time a user inserts something to the table the index function behind",
    "start": "680459",
    "end": "687420"
  },
  {
    "text": "the scene the one we declared will be executed and the new row in data in the",
    "start": "687420",
    "end": "693180"
  },
  {
    "text": "table will be indexed based on the output of that function so what is the potential risk here",
    "start": "693180",
    "end": "700980"
  },
  {
    "text": "we have to use a user who perform inserts or updates and it's not just insult and updates there is a lot of",
    "start": "700980",
    "end": "706860"
  },
  {
    "text": "commands that actually execute index functions like analyze and vacuum",
    "start": "706860",
    "end": "712800"
  },
  {
    "text": "if a user performs this operation on a table behind the scenes an index function is going to be invoked",
    "start": "712800",
    "end": "719459"
  },
  {
    "text": "and it's not just allow yourself if Bill will perform an operation on a table owned by Me by the use of postgres they",
    "start": "719459",
    "end": "726000"
  },
  {
    "text": "will also invoke the index function and the same goes for super users who perform operation on our table",
    "start": "726000",
    "end": "731760"
  },
  {
    "text": "now postgres wanted to face this potential security risk and they wanted to avoid the situation where users",
    "start": "731760",
    "end": "738120"
  },
  {
    "text": "accidentally invoke functions they don't know about so they added a mitigation",
    "start": "738120",
    "end": "743700"
  },
  {
    "text": "for these exactly issues 13 years ago they decided that whenever a user",
    "start": "743700",
    "end": "749160"
  },
  {
    "text": "perform an operation on a table the index function behind the scene will be executed with the permissions of the",
    "start": "749160",
    "end": "756600"
  },
  {
    "text": "table owner so if a super user is performing insert",
    "start": "756600",
    "end": "761700"
  },
  {
    "text": "on the table the index function will still be called with the permissions of the user postgres because the user",
    "start": "761700",
    "end": "767040"
  },
  {
    "text": "podcasts are the one on the table now here maybe some of you already have",
    "start": "767040",
    "end": "772260"
  },
  {
    "text": "an idea of how this behavior is going to be exploited what would happen if we we",
    "start": "772260",
    "end": "778500"
  },
  {
    "text": "create a table and then change the owner of the table to Cloud SQL admin we will",
    "start": "778500",
    "end": "783720"
  },
  {
    "text": "create a table with an index function and then we will change the owner because Google allow us to do so",
    "start": "783720",
    "end": "790200"
  },
  {
    "text": "in that case if the table will be owned by the cloud SQL admin the super user",
    "start": "790200",
    "end": "796500"
  },
  {
    "text": "every time someone will perform an operation on the table like insert or update the index function which we",
    "start": "796500",
    "end": "803279"
  },
  {
    "text": "declared will be executed with the cloud SQL admin permissions all we have to do now is just to replace",
    "start": "803279",
    "end": "810480"
  },
  {
    "text": "the index function with an evil function and let's say we will craft an evil",
    "start": "810480",
    "end": "816120"
  },
  {
    "text": "function with the following code that execute the ID command after performing an operation on the",
    "start": "816120",
    "end": "822060"
  },
  {
    "text": "table it could be insert update analyze vacuum we will get the follow results",
    "start": "822060",
    "end": "827940"
  },
  {
    "text": "we will actually able to execute code on the possible SQL instance of Google this is the output of the ID command",
    "start": "827940",
    "end": "836120"
  },
  {
    "text": "we were able to gain a code execution on a managed instance on the on managed by",
    "start": "836120",
    "end": "843180"
  },
  {
    "text": "Google and we were very excited to explore the internal environment of the minute service",
    "start": "843180",
    "end": "848639"
  },
  {
    "text": "we know that we are currently probably running inside an internal Network and like a shared environment and we execute",
    "start": "848639",
    "end": "856740"
  },
  {
    "text": "code with the permission of the modified process SQL instance so we started doing some Recon",
    "start": "856740",
    "end": "863100"
  },
  {
    "text": "and we discovered that we are running inside a Docker container and the document container is probably running inside the virtual machine",
    "start": "863100",
    "end": "870060"
  },
  {
    "text": "we also noticed that we have an network interface shared with the host it was a",
    "start": "870060",
    "end": "876600"
  },
  {
    "text": "shared namespace with the 10.128 subnet we were able to find private escalation",
    "start": "876600",
    "end": "883500"
  },
  {
    "text": "vulnerability in order to gain wood access within the docker container then we used the good access in order to",
    "start": "883500",
    "end": "889680"
  },
  {
    "text": "escape the container and get a good access to the virtual machine from there we were able to see the",
    "start": "889680",
    "end": "895139"
  },
  {
    "text": "control plane the components that manage our service and also other processor",
    "start": "895139",
    "end": "900600"
  },
  {
    "text": "scale instances that were accessible through the local network later we discovered that those are",
    "start": "900600",
    "end": "906240"
  },
  {
    "text": "actually our own instances because we choose the high availability feature in a postgres we got some replications and",
    "start": "906240",
    "end": "912779"
  },
  {
    "text": "this is actually a replica the applications of our own database in that moment of the research we",
    "start": "912779",
    "end": "919980"
  },
  {
    "text": "received a very surprising email from Google they sent us an email on a very old",
    "start": "919980",
    "end": "927180"
  },
  {
    "text": "disclosure thread we had with them regarding another vulnerability and they said like hey Dell wanted to ask in case",
    "start": "927180",
    "end": "933480"
  },
  {
    "text": "it was your one of your colleagues every Fox every folks doing research on cloud SQL would you mind sharing your podcast",
    "start": "933480",
    "end": "940260"
  },
  {
    "text": "if so now that was the first time I mean we do a lot of cloud research that was the first time you got caught",
    "start": "940260",
    "end": "947399"
  },
  {
    "text": "um so we wrapped everything up we wrote very detailed reports and we shared it with a friends at Google",
    "start": "947399",
    "end": "954060"
  },
  {
    "text": "and at that point we were very excited about our finding and we know that Bobby there is a lot of other vendors we can",
    "start": "954060",
    "end": "959639"
  },
  {
    "text": "go and check if they did similar modifications maybe we can find similar vulnerabilities",
    "start": "959639",
    "end": "965519"
  },
  {
    "text": "so that brings us for the next example the Azure process SQL flexible server",
    "start": "965519",
    "end": "972240"
  },
  {
    "text": "because also Azure will provide manage progress and maybe they do they did the same things",
    "start": "972240",
    "end": "978120"
  },
  {
    "text": "so first thing we felt lucky we were just log into the Azure process SQL",
    "start": "978120",
    "end": "983339"
  },
  {
    "text": "instance and trying to execute code to straightforward way and same as we had with Google we had",
    "start": "983339",
    "end": "988980"
  },
  {
    "text": "here we must be a super user or a member of the PGA execute server program in order to execute code",
    "start": "988980",
    "end": "994740"
  },
  {
    "text": "so same as we did with Google same as we do here we check which permissions do we have",
    "start": "994740",
    "end": "1000500"
  },
  {
    "text": "so we're running as the user postgres and we are a member of the Azure PG admin which is azure unicrow which it",
    "start": "1000500",
    "end": "1008959"
  },
  {
    "text": "doesn't seems like we have a lot of permissions we do have some walls but they're not that interesting and we don't have permissions to execute code",
    "start": "1008959",
    "end": "1015800"
  },
  {
    "text": "but we do have some privileged capabilities like creating event triggers",
    "start": "1015800",
    "end": "1022579"
  },
  {
    "text": "and in addition we also have the option to create a checkpoints",
    "start": "1022579",
    "end": "1028339"
  },
  {
    "text": "not risky operation but recording the documentation you need to be super user in order to create checkpoints",
    "start": "1028339",
    "end": "1034699"
  },
  {
    "text": "and same with Google we can also load extensions so publicly modify the process SQL just",
    "start": "1034699",
    "end": "1042500"
  },
  {
    "text": "the same as Google did and it's actually it's pretty astonishing two vendors two different code bases all",
    "start": "1042500",
    "end": "1049880"
  },
  {
    "text": "wanted to introduce the same capabilities but in Azure something else got all eyes",
    "start": "1049880",
    "end": "1056720"
  },
  {
    "text": "they provide us the creatable permission now create for permission is actually",
    "start": "1056720",
    "end": "1063080"
  },
  {
    "text": "pretty popular among a cloud managed services and they tend to provide this",
    "start": "1063080",
    "end": "1069260"
  },
  {
    "text": "this capability over this permission but all everyone every time you do that you",
    "start": "1069260",
    "end": "1075140"
  },
  {
    "text": "must restrict it because this is a very powerful permission according to the process SQL",
    "start": "1075140",
    "end": "1081380"
  },
  {
    "text": "documentation you must be careful with the create World privilege it's a goal if a role does not have a",
    "start": "1081380",
    "end": "1087980"
  },
  {
    "text": "certain privilege but is allowed to create other walls it can easily create another role with different privileges",
    "start": "1087980",
    "end": "1094100"
  },
  {
    "text": "than its own and therefore the guard walls that have great wall privilege as almost super",
    "start": "1094100",
    "end": "1100460"
  },
  {
    "text": "users almost super usables so we know that we can create I mean we",
    "start": "1100460",
    "end": "1107299"
  },
  {
    "text": "don't know yet but we believe that we can create new users and specify unique roles which roles can we provide a new",
    "start": "1107299",
    "end": "1114260"
  },
  {
    "text": "user in postgres so here is the list of the most powerful walls we can provide it we can provide it with PG readable files",
    "start": "1114260",
    "end": "1121940"
  },
  {
    "text": "which will allow us to read files from the file system beautiful pretty powerful",
    "start": "1121940",
    "end": "1127340"
  },
  {
    "text": "also we can specify the PG right server files which will allow us to write files to the file system",
    "start": "1127340",
    "end": "1133460"
  },
  {
    "text": "but last the most powerful permission or the most powerful wall PG execute server program which will allow us to execute",
    "start": "1133460",
    "end": "1139820"
  },
  {
    "text": "code if we will have this permission so next thing we did we created the new",
    "start": "1139820",
    "end": "1144919"
  },
  {
    "text": "user we called it James and we specify all those three privileges little files",
    "start": "1144919",
    "end": "1151820"
  },
  {
    "text": "lots of files and executes server program and it worked we actually were able to",
    "start": "1151820",
    "end": "1157880"
  },
  {
    "text": "create a new user and now we have a user called James with those very powerful",
    "start": "1157880",
    "end": "1162980"
  },
  {
    "text": "permissions so next thing we did we logged in as the user James",
    "start": "1162980",
    "end": "1169400"
  },
  {
    "text": "and we execute the following SQL query now here we did not want to I mean we",
    "start": "1169400",
    "end": "1175400"
  },
  {
    "text": "didn't even execute the ID command straightforward follows shell",
    "start": "1175400",
    "end": "1181059"
  },
  {
    "text": "and it worked we're actually getting yeah we can",
    "start": "1181160",
    "end": "1189580"
  },
  {
    "text": "we were able to get a reversal to Azure managed instance and same as well with",
    "start": "1193580",
    "end": "1198799"
  },
  {
    "text": "Google we were very excited we have a new environment to Recon to resellers to understand where are we what can we do",
    "start": "1198799",
    "end": "1205280"
  },
  {
    "text": "from there and what is the possibilities and we can actually achieve this vulnerability",
    "start": "1205280",
    "end": "1210980"
  },
  {
    "text": "and this is the time to invite Neil to Stage to go over the extra replica",
    "start": "1210980",
    "end": "1216559"
  },
  {
    "text": "vulnerability and now we gain constant access to the databases of other customers",
    "start": "1216559",
    "end": "1222440"
  },
  {
    "text": "thank you so as you mentioned I'm going to show you how you're able to leverage this",
    "start": "1222440",
    "end": "1227960"
  },
  {
    "text": "kind of vulnerabilities to gain an unauthorized access to the databases of other customers using the service",
    "start": "1227960",
    "end": "1234559"
  },
  {
    "text": "so this is what will be gone we know that we are running inside inside of some sort of an Azure modified version",
    "start": "1234559",
    "end": "1240980"
  },
  {
    "text": "or possess SQL and after doing some basic icon we realized that we are actually running",
    "start": "1240980",
    "end": "1246679"
  },
  {
    "text": "inside of a dedicated Docker container and that this dedicated token container",
    "start": "1246679",
    "end": "1252260"
  },
  {
    "text": "actually runs on top of a dedicated virtual machine next we executed the if config command",
    "start": "1252260",
    "end": "1258919"
  },
  {
    "text": "to see which network interfaces do we have this is where we learned that our virtual machine is actually a part of",
    "start": "1258919",
    "end": "1265460"
  },
  {
    "text": "two subnets and this made us assume that we are actually a part of some sort of an Azure",
    "start": "1265460",
    "end": "1271280"
  },
  {
    "text": "internal Network but we still don't know what are these Network subnets",
    "start": "1271280",
    "end": "1276980"
  },
  {
    "text": "so to try to answer this question we actually use the nmap port scanning tool",
    "start": "1276980",
    "end": "1282260"
  },
  {
    "text": "to try to map the host within the Azure internal Network and this command essentially checks if there are other",
    "start": "1282260",
    "end": "1288440"
  },
  {
    "text": "poses SQL instances within that Network and as it turns out within the Azure",
    "start": "1288440",
    "end": "1294200"
  },
  {
    "text": "internal Network there were other 212 database instances meaning host that we can connect to so",
    "start": "1294200",
    "end": "1301159"
  },
  {
    "text": "what deposit csql default Port 5432 now at this point we wondered",
    "start": "1301159",
    "end": "1307940"
  },
  {
    "text": "are these our instances the same way it was the gcp so we really hope not first of all we",
    "start": "1307940",
    "end": "1314720"
  },
  {
    "text": "wanted to prove cost any taxes and we were really hoping that we are not paying for 212 plus this instances",
    "start": "1314720",
    "end": "1321320"
  },
  {
    "text": "because in the cloud you can never know so we have a direct connection to other",
    "start": "1321320",
    "end": "1327740"
  },
  {
    "text": "customer databases but we like to the appropriate credentials to actually do",
    "start": "1327740",
    "end": "1332900"
  },
  {
    "text": "any meaningful actions so the next thing we did is something that we're doing almost every almost",
    "start": "1332900",
    "end": "1339980"
  },
  {
    "text": "almost every cost Talent research and is to examine the default configuration coming with the virtual machine image",
    "start": "1339980",
    "end": "1346760"
  },
  {
    "text": "being a managed service this means that all of the instances are running the",
    "start": "1346760",
    "end": "1351860"
  },
  {
    "text": "same image with the same configuration this means that if we'll be able to find an exploitable misconfiguration it is",
    "start": "1351860",
    "end": "1358880"
  },
  {
    "text": "applicable to other customer instances so we examine the for this SQL",
    "start": "1358880",
    "end": "1364400"
  },
  {
    "text": "authentication configuration files we first examined the pghbi conf which is",
    "start": "1364400",
    "end": "1369500"
  },
  {
    "text": "the process SQL authentication configuration file this file dictates who can connect to which database",
    "start": "1369500",
    "end": "1377059"
  },
  {
    "text": "and we also examined the PG ident file the page ident file is essentially an",
    "start": "1377059",
    "end": "1382220"
  },
  {
    "text": "extension to the pg HBA file detailing further configuration for more advanced",
    "start": "1382220",
    "end": "1387320"
  },
  {
    "text": "authentication mechanisms authentication mechanisms that are a bit more advanced than the usual user password",
    "start": "1387320",
    "end": "1392419"
  },
  {
    "text": "authentication so here's the short snippet of the PG",
    "start": "1392419",
    "end": "1397640"
  },
  {
    "text": "HBA file we found on our machine and we noticed that this file is",
    "start": "1397640",
    "end": "1402860"
  },
  {
    "text": "very different from the different one coming before this pause this and what actually photo eyes are the three less",
    "start": "1402860",
    "end": "1410059"
  },
  {
    "text": "lines so to understand why let's pass it together so essentially these three lines say",
    "start": "1410059",
    "end": "1417380"
  },
  {
    "text": "that in order to authenticate to the replication database we need to authenticate as the",
    "start": "1417380",
    "end": "1423140"
  },
  {
    "text": "replication user and we can only do that through a set of internal subnets one of",
    "start": "1423140",
    "end": "1428659"
  },
  {
    "text": "them is the 10.0.0 subnet we've seen before and the authentication mechanism for",
    "start": "1428659",
    "end": "1433820"
  },
  {
    "text": "that user is client certificate Authentication",
    "start": "1433820",
    "end": "1438580"
  },
  {
    "text": "this means that if you want to authenticate to the application database for another possess SQL instance within",
    "start": "1439400",
    "end": "1446240"
  },
  {
    "text": "the Azure internal Network we need to supply some sort of a valid certificate but how does a valid certificate even",
    "start": "1446240",
    "end": "1453559"
  },
  {
    "text": "looks like this is exactly where the PG identifier comes into play",
    "start": "1453559",
    "end": "1459140"
  },
  {
    "text": "the PG ident file has two regular Expressions that are being used in order to validate the certificate subject name",
    "start": "1459140",
    "end": "1467000"
  },
  {
    "text": "you may notice that both of the legal expression actually contains some sort of some sort of unique identifier",
    "start": "1467000",
    "end": "1473539"
  },
  {
    "text": "this is actually the hostname of the virtual machine hosting the positive SQL instance and this this is unique",
    "start": "1473539",
    "end": "1479900"
  },
  {
    "text": "identifier for each instance meaning the regular expression actually varies from the from instance to",
    "start": "1479900",
    "end": "1486080"
  },
  {
    "text": "instance and there isn't just one certificate that can be used to authenticate to all instances rather a",
    "start": "1486080",
    "end": "1492740"
  },
  {
    "text": "new certificate needs to be issued for every new instance okay so we'll begin with the second",
    "start": "1492740",
    "end": "1498380"
  },
  {
    "text": "regular expression because it's a bit more easier so essentially it will supply",
    "start": "1498380",
    "end": "1504559"
  },
  {
    "text": "certificate that begins with RL which I can only assume it stands for application",
    "start": "1504559",
    "end": "1510320"
  },
  {
    "text": "the unique identifier of the database code osdb acline.ms we can authenticate to the",
    "start": "1510320",
    "end": "1517280"
  },
  {
    "text": "replication user now because only Microsoft is the owner of the azclan.ms domain they're the only",
    "start": "1517280",
    "end": "1524600"
  },
  {
    "text": "ones who can issue this certificate okay so it's pretty straightforward",
    "start": "1524600",
    "end": "1529640"
  },
  {
    "text": "but things get a bit more complicated when it comes to the first angular expression",
    "start": "1529640",
    "end": "1535760"
  },
  {
    "text": "because it actually utilizes regular expression matching groups this means that the identity of the user will",
    "start": "1535760",
    "end": "1542360"
  },
  {
    "text": "authenticating to is determined by the prefix of the subject name",
    "start": "1542360",
    "end": "1548059"
  },
  {
    "text": "this means that if we Supply certificate that has the prefix of application we",
    "start": "1548059",
    "end": "1553760"
  },
  {
    "text": "can authenticate to the replication user same goes with if we Supply the prefix",
    "start": "1553760",
    "end": "1559580"
  },
  {
    "text": "nil we can authenticate to the username so on and so forth",
    "start": "1559580",
    "end": "1566840"
  },
  {
    "text": "but now maybe some Eagles are spectators in the audience May notice that this cellular",
    "start": "1566840",
    "end": "1573679"
  },
  {
    "text": "expression is a bit of a permissive",
    "start": "1573679",
    "end": "1579220"
  },
  {
    "text": "because it actually ends with a wild cloud this is quite an easy misconfiguration that we can exploit",
    "start": "1580460",
    "end": "1587480"
  },
  {
    "text": "this means that while we are not the owner of the azure.com domain and thus we cannot issue this certificate",
    "start": "1587480",
    "end": "1594860"
  },
  {
    "text": "we can actually take the inside entire subject name of the domain we want to authenticate to and register it under a",
    "start": "1594860",
    "end": "1601940"
  },
  {
    "text": "domain of our control in this case with research.com",
    "start": "1601940",
    "end": "1607700"
  },
  {
    "text": "this subject name will be also validated by the cellular expression and will actually let us to authenticate to the",
    "start": "1607700",
    "end": "1613700"
  },
  {
    "text": "database so if we examine the pghbi file one more",
    "start": "1613700",
    "end": "1619159"
  },
  {
    "text": "time in order to authenticate to the application user we need to have an IP address in the 10. subnet which we have",
    "start": "1619159",
    "end": "1627140"
  },
  {
    "text": "and we need to supply a valid certificate which we can so the next one we did is to actually",
    "start": "1627140",
    "end": "1634100"
  },
  {
    "text": "try to authenticate to that database and to our surprise we got the following",
    "start": "1634100",
    "end": "1640039"
  },
  {
    "text": "error message stating that the replication database simply does not exist",
    "start": "1640039",
    "end": "1646820"
  },
  {
    "text": "but it does not make any sense why would the Azure have a specific configuration for a database that is not",
    "start": "1646820",
    "end": "1653659"
  },
  {
    "text": "Dell so apparently the replication database is not a real database it's a pseudo",
    "start": "1653659",
    "end": "1660799"
  },
  {
    "text": "database and connecting to this database actually lets you to replicate the entire",
    "start": "1660799",
    "end": "1667460"
  },
  {
    "text": "postgres SQL instance and not just a specific database and we can do that by using one of the",
    "start": "1667460",
    "end": "1673279"
  },
  {
    "text": "built-in postgres SQL utilities called PG based backup so we have everything that we need in",
    "start": "1673279",
    "end": "1680600"
  },
  {
    "text": "order to start replicating databases now in every other presentation this is",
    "start": "1680600",
    "end": "1687740"
  },
  {
    "text": "the point I will show you a live demo of the vulnerability but being a cloud vulnerability this vulnerability is now",
    "start": "1687740",
    "end": "1693440"
  },
  {
    "text": "pitched so I cannot show you a live demo but I'll try to do my best in illustrating the entire attack flow",
    "start": "1693440",
    "end": "1699980"
  },
  {
    "text": "using the magic of illustration and animation so we are on our left of a researcher a",
    "start": "1699980",
    "end": "1707419"
  },
  {
    "text": "research machine and on the right we have our victim which is uh and we want to get its confidential information",
    "start": "1707419",
    "end": "1714799"
  },
  {
    "text": "the victim has the falling house Earth name begins with ba so the next thing what we'll do is issue",
    "start": "1714799",
    "end": "1722059"
  },
  {
    "text": "a certificate that will actually alert us to authenticate to the replication user on that database",
    "start": "1722059",
    "end": "1728840"
  },
  {
    "text": "as you can see we have a subject name that begins with replication followed by the unique identifier of the database",
    "start": "1728840",
    "end": "1735260"
  },
  {
    "text": "and it all sits under the with research.com domain next we'll use the PG based backup",
    "start": "1735260",
    "end": "1742460"
  },
  {
    "text": "utility uh feeding it with our newly issued certificate and connect to the",
    "start": "1742460",
    "end": "1748940"
  },
  {
    "text": "application user after doing that the hours machine will",
    "start": "1748940",
    "end": "1754520"
  },
  {
    "text": "actually send the SSL certificate and authenticate to the database and we'll get a full application of the",
    "start": "1754520",
    "end": "1762799"
  },
  {
    "text": "database with its entire confidential information",
    "start": "1762799",
    "end": "1767740"
  },
  {
    "text": "[Applause]",
    "start": "1768050",
    "end": "1775640"
  },
  {
    "text": "so we send our report at Microsoft and they address the issues amazingly fast",
    "start": "1775640",
    "end": "1781220"
  },
  {
    "text": "only 48 hours after the initial report the vulnerability was no longer",
    "start": "1781220",
    "end": "1786559"
  },
  {
    "text": "exploitable the first address the issues by fixing the over permissive regular expression",
    "start": "1786559",
    "end": "1792320"
  },
  {
    "text": "but a few days after that they also disabled the cost and network access meaning that both of our expert",
    "start": "1792320",
    "end": "1799940"
  },
  {
    "text": "Primitives were basically basically gone and they were so appreciative of our",
    "start": "1799940",
    "end": "1805700"
  },
  {
    "text": "work that they actually awarded us with a forty thousand dollars of bounty",
    "start": "1805700",
    "end": "1811960"
  },
  {
    "text": "with that I want to invite you back to Stage to walk you through some very interesting takeaways",
    "start": "1816200",
    "end": "1823600"
  },
  {
    "text": "so we discovered those vulnerabilities and we start reporting those uh to Microsoft and Google",
    "start": "1826460",
    "end": "1832880"
  },
  {
    "text": "and we try to understand what was the root cause of those issues",
    "start": "1832880",
    "end": "1837980"
  },
  {
    "text": "we learned that possess SQL was not built to be a multi-tenant managed service it was built like I think it was",
    "start": "1837980",
    "end": "1845179"
  },
  {
    "text": "around 25 years ago and it has a very simple permission model you can be a super user where you can do",
    "start": "1845179",
    "end": "1852799"
  },
  {
    "text": "everything you can delete files write files loading shared libraries execute",
    "start": "1852799",
    "end": "1859399"
  },
  {
    "text": "code a lot of operations that are dangerous and could risk the underlying compute oh you can be a low privileged",
    "start": "1859399",
    "end": "1866419"
  },
  {
    "text": "user and this is a very simple um permission model but it does not fit",
    "start": "1866419",
    "end": "1872179"
  },
  {
    "text": "the cloud need Cloud providers cannot provide their customers the ability to",
    "start": "1872179",
    "end": "1878600"
  },
  {
    "text": "feel like their administrators in their own database but at the same time to not",
    "start": "1878600",
    "end": "1883940"
  },
  {
    "text": "risking the underlying compute and this is why all csps we worked with",
    "start": "1883940",
    "end": "1890860"
  },
  {
    "text": "modified the process SQL and they already did the same they wanted to provide users admin capabilities but on",
    "start": "1890860",
    "end": "1898760"
  },
  {
    "text": "the same time to do a lot of hardenings in order to protect the processes for instance and not allowing customers to",
    "start": "1898760",
    "end": "1904100"
  },
  {
    "text": "execute code or to risk the instance they did it using extensions sometimes with configurations and sometimes with",
    "start": "1904100",
    "end": "1910279"
  },
  {
    "text": "code changes so they actually maintain their own Fork of postgres and the thing about that is that when",
    "start": "1910279",
    "end": "1917779"
  },
  {
    "text": "they do this modification when they introduce new capabilities it's very easy to introduce vulnerabilities",
    "start": "1917779",
    "end": "1924559"
  },
  {
    "text": "open source projects basically I mean mostly postgres you need to have a very good",
    "start": "1924559",
    "end": "1930080"
  },
  {
    "text": "understanding of the part of the project before you change it and postgres is a very big and very complex project",
    "start": "1930080",
    "end": "1937220"
  },
  {
    "text": "so at that moment we understood that the vulnerabilities we discovered might work",
    "start": "1937220",
    "end": "1942799"
  },
  {
    "text": "on other vendors and it was a very problem it was problematic for us",
    "start": "1942799",
    "end": "1947840"
  },
  {
    "text": "because we really wanted to talk about these issues we wanted to write a blog post about it we wanted to come here to",
    "start": "1947840",
    "end": "1954380"
  },
  {
    "text": "Black it and present it to you but how can we discuss those issues after they were fixed in Google and",
    "start": "1954380",
    "end": "1961760"
  },
  {
    "text": "um in Microsoft with the knowing that those issues could actually affect other vendors other",
    "start": "1961760",
    "end": "1967580"
  },
  {
    "text": "managed process SQL vendors so that was us to the question how do we",
    "start": "1967580",
    "end": "1972679"
  },
  {
    "text": "inform all those vendors um so first we initially report the vulnerabilities to Google and Microsoft",
    "start": "1972679",
    "end": "1977840"
  },
  {
    "text": "but then we crafted the report and we sent it to dozens of vendors that could potentially be vulnerable",
    "start": "1977840",
    "end": "1984679"
  },
  {
    "text": "it was also worked with a lot of them on understanding the vulnerabilities the mitigations we also initiated a private",
    "start": "1984679",
    "end": "1991760"
  },
  {
    "text": "group with all major csps to collaborate on those issues and to understand like how can we solve this issue once for all",
    "start": "1991760",
    "end": "1998659"
  },
  {
    "text": "and not not just like keeping it more",
    "start": "1998659",
    "end": "2003720"
  },
  {
    "text": "just keeping the problem bigger because the absolute thought is that most",
    "start": "2003720",
    "end": "2009340"
  },
  {
    "text": "vendors in order to fix the vulnerabilities we disclosed They just added more hardening small code changes",
    "start": "2009340",
    "end": "2014919"
  },
  {
    "text": "more modification to the postgres project and this is not good for security this is the opposite of what we wanted to do it's actually they are just",
    "start": "2014919",
    "end": "2022720"
  },
  {
    "text": "adding more potential attack surface for new vulnerabilities um and we think and the solution",
    "start": "2022720",
    "end": "2030700"
  },
  {
    "text": "actually this is something that we talked about the group it's the Google initiative to suggest Google suggested to contribute their hardening their um",
    "start": "2030700",
    "end": "2038500"
  },
  {
    "text": "their own audience to the process SQL product the official one so the official project will maintain",
    "start": "2038500",
    "end": "2044799"
  },
  {
    "text": "um these other links and new capabilities for cloud provider so whoever wanted to offer customers a bit",
    "start": "2044799",
    "end": "2051398"
  },
  {
    "text": "more privileges um than just a regular user but still not a super user",
    "start": "2051399",
    "end": "2058540"
  },
  {
    "text": "um so they actually wrote it on the mailing list they offered the hardening",
    "start": "2058540",
    "end": "2063820"
  },
  {
    "text": "a deposit skill Community really debates on that right now it doesn't look that good and it looks like the process SQL",
    "start": "2063820",
    "end": "2070720"
  },
  {
    "text": "official project will not Embrace this um if you would like to follow it you can do it with the you can check the mailing",
    "start": "2070720",
    "end": "2078878"
  },
  {
    "text": "list it's a bitly link but trust me it's the mailing list um",
    "start": "2078879",
    "end": "2084520"
  },
  {
    "text": "a nice very good project also bought by Ivan Ivan is a managed Day Management database vendor and they offered they",
    "start": "2084520",
    "end": "2093398"
  },
  {
    "text": "actually open sourced their own possible SQL hardenings and this is actually a very good approach because because right",
    "start": "2093399",
    "end": "2100540"
  },
  {
    "text": "now um if someone will find a new vulnerability like the ones we found in those hardenings it is all will be in",
    "start": "2100540",
    "end": "2106839"
  },
  {
    "text": "one central place and it will get a cve people could fix it in one place for all",
    "start": "2106839",
    "end": "2112180"
  },
  {
    "text": "and we think it's a very good approach and for last I would like to talk about",
    "start": "2112180",
    "end": "2117700"
  },
  {
    "text": "a different topic which is isolation and why installation is so important",
    "start": "2117700",
    "end": "2123760"
  },
  {
    "text": "in the cloud isolation is King isolation is the best way to actually stop hackers",
    "start": "2123760",
    "end": "2132460"
  },
  {
    "text": "and after they were able to get a foothold within the internal environment",
    "start": "2132460",
    "end": "2138160"
  },
  {
    "text": "um we stayed we started with the examples we showed today that where we had",
    "start": "2138160",
    "end": "2143500"
  },
  {
    "text": "network access to other customers instances and isolation was not perfect we actually had the opportunity the",
    "start": "2143500",
    "end": "2151180"
  },
  {
    "text": "attack surface to find a second vulnerability and where the isolation is really really good you can find yourself empty-handed",
    "start": "2151180",
    "end": "2159099"
  },
  {
    "text": "now the thing about isolation is that cloud providers have a lot of minute Services every service is designed",
    "start": "2159099",
    "end": "2165579"
  },
  {
    "text": "differently it has different architecture and a different isolation mechanisms and we as customers it's a",
    "start": "2165579",
    "end": "2173020"
  },
  {
    "text": "bit frustrating for us as Cloud customers that we have no idea how our data is isolated in each of each service",
    "start": "2173020",
    "end": "2180339"
  },
  {
    "text": "now Cloud providers does share some information regarding the isolation you can check it in the documentation",
    "start": "2180339",
    "end": "2186220"
  },
  {
    "text": "usually it will be for the main compute service and sometimes those serverless functions and the shared compute",
    "start": "2186220",
    "end": "2192880"
  },
  {
    "text": "container services place as well they tell you like straightforward you are going to execute your code or the",
    "start": "2192880",
    "end": "2199599"
  },
  {
    "text": "service is going to use just compute this is the places where usually customers are more concerned and they",
    "start": "2199599",
    "end": "2204640"
  },
  {
    "text": "show information but they must share much more information they don't share enough now doing a research when we disclose",
    "start": "2204640",
    "end": "2212380"
  },
  {
    "text": "cause standard vulnerabilities to Cloud providers we ask them a lot of questions and we would like to encourage you or",
    "start": "2212380",
    "end": "2219579"
  },
  {
    "text": "Cloud customers who are a bit worried or they want to understand how the data is isolated in the cloud to take a poor",
    "start": "2219579",
    "end": "2225760"
  },
  {
    "text": "active approach and ask your provider so this is usually the questions we ask when we do responsible disclosure with",
    "start": "2225760",
    "end": "2233020"
  },
  {
    "text": "vendors for example you can ask your cloud provider if they use Shield",
    "start": "2233020",
    "end": "2238180"
  },
  {
    "text": "compute in a specific service you use or I mean shared compute is very risky",
    "start": "2238180",
    "end": "2243220"
  },
  {
    "text": "because they are actually using the same operating system and to run jobs and",
    "start": "2243220",
    "end": "2248560"
  },
  {
    "text": "works workers of separate or different customers and so if someone will find",
    "start": "2248560",
    "end": "2253900"
  },
  {
    "text": "the vulnerability in that service it will be very straightforward to access the data of other customers also very good questions is to ask the",
    "start": "2253900",
    "end": "2261040"
  },
  {
    "text": "cloud provider if they use containers as a security burial for Cellcom Services because containers usually could be",
    "start": "2261040",
    "end": "2268060"
  },
  {
    "text": "Escape sometimes pretty easily with configuration issues but also even if",
    "start": "2268060",
    "end": "2273880"
  },
  {
    "text": "the container was very well configured a Linux kernel vulnerability usually break",
    "start": "2273880",
    "end": "2278920"
  },
  {
    "text": "out of it so you don't want the Linux camera vulnerability to be the security barrier between One customer to another",
    "start": "2278920",
    "end": "2284500"
  },
  {
    "text": "customer a third question would be do you do they use do the customers get the same",
    "start": "2284500",
    "end": "2291220"
  },
  {
    "text": "compute instance within a shared network and if so do they have network access",
    "start": "2291220",
    "end": "2296579"
  },
  {
    "text": "because imagine if you would ask this question a Microsoft long ago",
    "start": "2296579",
    "end": "2302500"
  },
  {
    "text": "um about the Azure processor flexible server those questions will it's not just to",
    "start": "2302500",
    "end": "2308020"
  },
  {
    "text": "satisfy the customers they also need in order to answer you so we need to do their homework so we need to go and check and verify the service and",
    "start": "2308020",
    "end": "2314800"
  },
  {
    "text": "understand if like how does it work there and if you will ask this question could it could be that they will fix it",
    "start": "2314800",
    "end": "2321099"
  },
  {
    "text": "they will go check see that there is network access they will think to themselves that bad they will fix it and",
    "start": "2321099",
    "end": "2328180"
  },
  {
    "text": "then we will not be here today presenting costs and vulnerabilities so um thank you very much",
    "start": "2328180",
    "end": "2335260"
  },
  {
    "text": "it was the chicken near from with [Applause]",
    "start": "2335260",
    "end": "2341200"
  },
  {
    "text": "[Music]",
    "start": "2341200",
    "end": "2344310"
  },
  {
    "text": "[Music]",
    "start": "2348160",
    "end": "2351239"
  }
]