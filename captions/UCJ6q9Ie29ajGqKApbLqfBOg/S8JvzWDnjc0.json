[
  {
    "start": "0",
    "end": "145000"
  },
  {
    "text": "this talk is going beyond coverage",
    "start": "0",
    "end": "2010"
  },
  {
    "text": "guided buzzing with structured fuzzing",
    "start": "2010",
    "end": "4500"
  },
  {
    "text": "by Jonathan Metz Ben but first we have a",
    "start": "4500",
    "end": "6569"
  },
  {
    "text": "few notes please stop by the business",
    "start": "6569",
    "end": "9929"
  },
  {
    "text": "Hall located in Mandalay Bay Oceanside",
    "start": "9929",
    "end": "12599"
  },
  {
    "text": "and shoreline ballrooms on level 2",
    "start": "12599",
    "end": "15179"
  },
  {
    "text": "during the day and for the Welcome",
    "start": "15179",
    "end": "17160"
  },
  {
    "text": "Reception at 5:30 this evening the",
    "start": "17160",
    "end": "20189"
  },
  {
    "text": "blackhat Arsenal is in the business hall",
    "start": "20189",
    "end": "22410"
  },
  {
    "text": "on level 2 and join us for the pony",
    "start": "22410",
    "end": "24840"
  },
  {
    "text": "awards and lagoon JKL at 6:30",
    "start": "24840",
    "end": "29779"
  },
  {
    "text": "please remember to silence your phones",
    "start": "29779",
    "end": "32390"
  },
  {
    "text": "and without further ado Jonathan Messman",
    "start": "32390",
    "end": "38260"
  },
  {
    "text": "[Applause]",
    "start": "38260",
    "end": "45199"
  },
  {
    "text": "hi everyone thanks for coming in my talk",
    "start": "47450",
    "end": "49950"
  },
  {
    "text": "as I was introduced from Jonathan met",
    "start": "49950",
    "end": "52829"
  },
  {
    "text": "ceman and I'm here to talk about how you",
    "start": "52829",
    "end": "55350"
  },
  {
    "text": "can get more bugs out of coverage guided",
    "start": "55350",
    "end": "57480"
  },
  {
    "text": "buzzing by adding structure awareness to",
    "start": "57480",
    "end": "59609"
  },
  {
    "text": "your fuzzers I first got into fuzzing",
    "start": "59609",
    "end": "63000"
  },
  {
    "text": "while I was in college through AFL I",
    "start": "63000",
    "end": "65100"
  },
  {
    "text": "started using AFL to find bugs in my",
    "start": "65100",
    "end": "67710"
  },
  {
    "text": "school projects and later I moved on to",
    "start": "67710",
    "end": "70380"
  },
  {
    "text": "finding bugs in real software like",
    "start": "70380",
    "end": "71820"
  },
  {
    "text": "sequel Lite with AFL and I was really",
    "start": "71820",
    "end": "74520"
  },
  {
    "text": "amazed by how well AFL worked because",
    "start": "74520",
    "end": "76320"
  },
  {
    "text": "you know I didn't really know much about",
    "start": "76320",
    "end": "78180"
  },
  {
    "text": "how AFL worked at the time and I didn't",
    "start": "78180",
    "end": "81509"
  },
  {
    "text": "know much about the software I was",
    "start": "81509",
    "end": "83189"
  },
  {
    "text": "finding bugs in with AFL but it still",
    "start": "83189",
    "end": "85380"
  },
  {
    "text": "worked so well and you know I thought",
    "start": "85380",
    "end": "87000"
  },
  {
    "text": "what could be better than this tool that",
    "start": "87000",
    "end": "88680"
  },
  {
    "text": "gives us bugs for free so I think the",
    "start": "88680",
    "end": "92729"
  },
  {
    "text": "answer that has got to be structured",
    "start": "92729",
    "end": "94320"
  },
  {
    "text": "fuzzing otherwise I wouldn't be giving",
    "start": "94320",
    "end": "95759"
  },
  {
    "text": "this talk but unfortunately structured",
    "start": "95759",
    "end": "98400"
  },
  {
    "text": "fuzzing doesn't actually give you bugs",
    "start": "98400",
    "end": "100380"
  },
  {
    "text": "for free it forces you to think about",
    "start": "100380",
    "end": "102630"
  },
  {
    "text": "the format that your fuzzing but because",
    "start": "102630",
    "end": "104670"
  },
  {
    "text": "of that thought process and the effort",
    "start": "104670",
    "end": "106950"
  },
  {
    "text": "you put into it you'll end up finding",
    "start": "106950",
    "end": "108840"
  },
  {
    "text": "more bugs so let's fast forward a few",
    "start": "108840",
    "end": "111780"
  },
  {
    "text": "years to when I started working at",
    "start": "111780",
    "end": "113159"
  },
  {
    "text": "Google I wrote a structured fuzzer for",
    "start": "113159",
    "end": "115740"
  },
  {
    "text": "skia which is a graphics library using",
    "start": "115740",
    "end": "117930"
  },
  {
    "text": "Chrome and you could see part of the",
    "start": "117930",
    "end": "120420"
  },
  {
    "text": "header file of that fuzzer on the screen",
    "start": "120420",
    "end": "122219"
  },
  {
    "text": "and so as you can probably guess it took",
    "start": "122219",
    "end": "124200"
  },
  {
    "text": "quite a bit of effort to write that",
    "start": "124200",
    "end": "125549"
  },
  {
    "text": "fuzzer but i think the effort paid off",
    "start": "125549",
    "end": "127560"
  },
  {
    "text": "in the end because the fuzzer found",
    "start": "127560",
    "end": "129330"
  },
  {
    "text": "around 10 vulnerabilities in",
    "start": "129330",
    "end": "132200"
  },
  {
    "text": "that weren't found with unstructured",
    "start": "132200",
    "end": "133970"
  },
  {
    "text": "buzzers like AFL so today I want to",
    "start": "133970",
    "end": "136909"
  },
  {
    "text": "teach you more about this technique",
    "start": "136909",
    "end": "138170"
  },
  {
    "text": "structured buzzing and convince you what",
    "start": "138170",
    "end": "140780"
  },
  {
    "text": "why it's sometimes worth it to pay more",
    "start": "140780",
    "end": "142549"
  },
  {
    "text": "when you could pay less first a little",
    "start": "142549",
    "end": "146840"
  },
  {
    "start": "145000",
    "end": "313000"
  },
  {
    "text": "bit about myself I work at Google on",
    "start": "146840",
    "end": "149209"
  },
  {
    "text": "mainly on fuzzy chrome but we also",
    "start": "149209",
    "end": "151760"
  },
  {
    "text": "develop fuzzy tools that are used by",
    "start": "151760",
    "end": "154069"
  },
  {
    "text": "other open-source projects and one of",
    "start": "154069",
    "end": "156079"
  },
  {
    "text": "these is called OSS fuzz which thank you",
    "start": "156079",
    "end": "159110"
  },
  {
    "text": "Dino for shouting this out during the",
    "start": "159110",
    "end": "161030"
  },
  {
    "text": "keynote today and one of the unofficial",
    "start": "161030",
    "end": "163790"
  },
  {
    "text": "roles I've taken on in Chrome security",
    "start": "163790",
    "end": "166220"
  },
  {
    "text": "is getting people to write structured",
    "start": "166220",
    "end": "168470"
  },
  {
    "text": "fuzzers for Chrome they've been such a",
    "start": "168470",
    "end": "170420"
  },
  {
    "text": "big big win for us there and I'm hoping",
    "start": "170420",
    "end": "172609"
  },
  {
    "text": "today I could do the same for you and",
    "start": "172609",
    "end": "174560"
  },
  {
    "text": "that there'll be a big win for you all",
    "start": "174560",
    "end": "176030"
  },
  {
    "text": "as well so let's define what I mean by",
    "start": "176030",
    "end": "180829"
  },
  {
    "text": "structured fuzzing and see how it",
    "start": "180829",
    "end": "182870"
  },
  {
    "text": "evolved the first generation of fuzzers",
    "start": "182870",
    "end": "185930"
  },
  {
    "text": "were completely black box they knew",
    "start": "185930",
    "end": "188239"
  },
  {
    "text": "nothing about the target that they were",
    "start": "188239",
    "end": "190250"
  },
  {
    "text": "fuzzing and they were also actually",
    "start": "190250",
    "end": "192079"
  },
  {
    "text": "structure unaware which means that they",
    "start": "192079",
    "end": "194930"
  },
  {
    "text": "knew nothing about the format that they",
    "start": "194930",
    "end": "197060"
  },
  {
    "text": "were supposed to be mutating or",
    "start": "197060",
    "end": "198889"
  },
  {
    "text": "generating so they were pretty similar -",
    "start": "198889",
    "end": "201530"
  },
  {
    "text": "they're pretty you were - mentor in that",
    "start": "201530",
    "end": "202760"
  },
  {
    "text": "and they were similar to piping bytes",
    "start": "202760",
    "end": "204560"
  },
  {
    "text": "from you know dev you random to like a",
    "start": "204560",
    "end": "206599"
  },
  {
    "text": "UNIX utility just you know completely",
    "start": "206599",
    "end": "208730"
  },
  {
    "text": "unaware and now the next generation of",
    "start": "208730",
    "end": "212269"
  },
  {
    "text": "fuzzers improved on the effectiveness of",
    "start": "212269",
    "end": "214730"
  },
  {
    "text": "the first generation by being structure",
    "start": "214730",
    "end": "216799"
  },
  {
    "text": "aware there was still black box but it",
    "start": "216799",
    "end": "220040"
  },
  {
    "text": "was this was probably based on the",
    "start": "220040",
    "end": "221569"
  },
  {
    "text": "realization that if you're fuzzing",
    "start": "221569",
    "end": "223370"
  },
  {
    "text": "something like an HTML renderer you're",
    "start": "223370",
    "end": "225829"
  },
  {
    "text": "more likely to find bugs if you give it",
    "start": "225829",
    "end": "228379"
  },
  {
    "text": "inputs that look something like HTML",
    "start": "228379",
    "end": "230209"
  },
  {
    "text": "rather than just you know nonsense from",
    "start": "230209",
    "end": "233180"
  },
  {
    "text": "dev you random now I think the current",
    "start": "233180",
    "end": "236060"
  },
  {
    "text": "generation of fuzzers that most people",
    "start": "236060",
    "end": "237739"
  },
  {
    "text": "are using our coverage guided and",
    "start": "237739",
    "end": "239930"
  },
  {
    "text": "unstructured and this is the technique",
    "start": "239930",
    "end": "241639"
  },
  {
    "text": "that AFL pioneered and a sort of sparked",
    "start": "241639",
    "end": "244459"
  },
  {
    "text": "this like fuzzing revolution that were",
    "start": "244459",
    "end": "246560"
  },
  {
    "text": "in currently and the reason why the AFL",
    "start": "246560",
    "end": "251299"
  },
  {
    "text": "has had such a large effect and in this",
    "start": "251299",
    "end": "253160"
  },
  {
    "text": "technique as well is because",
    "start": "253160",
    "end": "254769"
  },
  {
    "text": "unstructured fuzzing allows people to",
    "start": "254769",
    "end": "257389"
  },
  {
    "text": "use it without actually understanding",
    "start": "257389",
    "end": "259810"
  },
  {
    "text": "much about the format that they're",
    "start": "259810",
    "end": "262640"
  },
  {
    "text": "actually fuzzing but because it's",
    "start": "262640",
    "end": "264080"
  },
  {
    "text": "coverage guided the",
    "start": "264080",
    "end": "265400"
  },
  {
    "text": "buzzer generates progressively more",
    "start": "265400",
    "end": "266960"
  },
  {
    "text": "interesting inputs and that's why it's",
    "start": "266960",
    "end": "269240"
  },
  {
    "text": "actually fairly good at finding bugs now",
    "start": "269240",
    "end": "272210"
  },
  {
    "text": "coverage guided fuzzing is such a big",
    "start": "272210",
    "end": "273830"
  },
  {
    "text": "advance in fuzzing that I'm going to",
    "start": "273830",
    "end": "276500"
  },
  {
    "text": "just assume we're talking about covered",
    "start": "276500",
    "end": "278509"
  },
  {
    "text": "guided fuzzing throughout the rest of",
    "start": "278509",
    "end": "279860"
  },
  {
    "text": "the talk and so I'm just gonna refer to",
    "start": "279860",
    "end": "282770"
  },
  {
    "text": "this as unstructured fuzzing now I think",
    "start": "282770",
    "end": "285080"
  },
  {
    "text": "the next generation of fuzzers will",
    "start": "285080",
    "end": "287060"
  },
  {
    "text": "build off of this coverage got these",
    "start": "287060",
    "end": "288770"
  },
  {
    "text": "advances and coverage guided fussing but",
    "start": "288770",
    "end": "291139"
  },
  {
    "text": "though they'll also be structure aware",
    "start": "291139",
    "end": "293870"
  },
  {
    "text": "and this is what I call structured",
    "start": "293870",
    "end": "296060"
  },
  {
    "text": "fuzzing and by being structured aware I",
    "start": "296060",
    "end": "297830"
  },
  {
    "text": "mean things like they won't do the sort",
    "start": "297830",
    "end": "300740"
  },
  {
    "text": "of general purpose mutations that AFL",
    "start": "300740",
    "end": "302690"
  },
  {
    "text": "does on inputs that they'll do you know",
    "start": "302690",
    "end": "305389"
  },
  {
    "text": "format specific ones like they'll",
    "start": "305389",
    "end": "307039"
  },
  {
    "text": "they'll delete expressions from",
    "start": "307039",
    "end": "309039"
  },
  {
    "text": "JavaScript programs they won't just flip",
    "start": "309039",
    "end": "311060"
  },
  {
    "text": "bits so why you structured fuzzing at",
    "start": "311060",
    "end": "316520"
  },
  {
    "start": "313000",
    "end": "470000"
  },
  {
    "text": "the end of the day I think it's only",
    "start": "316520",
    "end": "317840"
  },
  {
    "text": "worth using a new fuzzing technique if",
    "start": "317840",
    "end": "319940"
  },
  {
    "text": "it helps you find more bugs and that's",
    "start": "319940",
    "end": "322280"
  },
  {
    "text": "exactly what structured frozen can do",
    "start": "322280",
    "end": "324590"
  },
  {
    "text": "for you so let me first demonstrate that",
    "start": "324590",
    "end": "326750"
  },
  {
    "text": "structured fuzzing can help you find",
    "start": "326750",
    "end": "328099"
  },
  {
    "text": "more bugs and explain why it'll help you",
    "start": "328099",
    "end": "330500"
  },
  {
    "text": "find more bugs and to do this I want to",
    "start": "330500",
    "end": "334699"
  },
  {
    "text": "start by sharing a story about how",
    "start": "334699",
    "end": "336789"
  },
  {
    "text": "structured fuzzing found bugs in sequel",
    "start": "336789",
    "end": "339680"
  },
  {
    "text": "light that weren't found with",
    "start": "339680",
    "end": "341360"
  },
  {
    "text": "unstructured fuzzing now I mentioned",
    "start": "341360",
    "end": "343940"
  },
  {
    "text": "fuzzing sequel light in the earlier",
    "start": "343940",
    "end": "346880"
  },
  {
    "text": "slides or at least you know one of the",
    "start": "346880",
    "end": "348620"
  },
  {
    "text": "first projects I would fuzz with AFL was",
    "start": "348620",
    "end": "350120"
  },
  {
    "text": "sequel light and I guess that probably",
    "start": "350120",
    "end": "353229"
  },
  {
    "text": "sequel light might be one of the most",
    "start": "353229",
    "end": "355250"
  },
  {
    "text": "well fuzz projects in the world one of",
    "start": "355250",
    "end": "357650"
  },
  {
    "text": "the groups that fuzz this equal light is",
    "start": "357650",
    "end": "359180"
  },
  {
    "text": "actually my team at Google we fuzz",
    "start": "359180",
    "end": "361400"
  },
  {
    "text": "sequel light through OSS fuzz and we've",
    "start": "361400",
    "end": "363530"
  },
  {
    "text": "been doing it for years through Lib",
    "start": "363530",
    "end": "365900"
  },
  {
    "text": "fuzzer and AFL and I'd say that over the",
    "start": "365900",
    "end": "369380"
  },
  {
    "text": "years we've probably thrown tens of",
    "start": "369380",
    "end": "371030"
  },
  {
    "text": "billions of test cases at sequel light",
    "start": "371030",
    "end": "373250"
  },
  {
    "text": "that were created by AFL and Lib fuzzer",
    "start": "373250",
    "end": "375740"
  },
  {
    "text": "so you would think that with all these",
    "start": "375740",
    "end": "377599"
  },
  {
    "text": "attempts and all this time",
    "start": "377599",
    "end": "378919"
  },
  {
    "text": "AFL and Lib buzzer would have found most",
    "start": "378919",
    "end": "381050"
  },
  {
    "text": "of the bugs in sequel light but",
    "start": "381050",
    "end": "383150"
  },
  {
    "text": "obviously that's not true and we",
    "start": "383150",
    "end": "386060"
  },
  {
    "text": "actually have one of my co-workers",
    "start": "386060",
    "end": "388909"
  },
  {
    "text": "actually last fall Mathew Denton wrote a",
    "start": "388909",
    "end": "391400"
  },
  {
    "text": "structured fuzzer for sequel light and",
    "start": "391400",
    "end": "393020"
  },
  {
    "text": "this fuzzer",
    "start": "393020",
    "end": "393979"
  },
  {
    "text": "would generate SQL statements to be",
    "start": "393979",
    "end": "396590"
  },
  {
    "text": "executed by sequel light",
    "start": "396590",
    "end": "398630"
  },
  {
    "text": "it immediately started finding",
    "start": "398630",
    "end": "399920"
  },
  {
    "text": "vulnerabilities that weren't found by",
    "start": "399920",
    "end": "401870"
  },
  {
    "text": "AFL and Lib buzzer including this heap",
    "start": "401870",
    "end": "404870"
  },
  {
    "text": "overflow that you see on the screen now",
    "start": "404870",
    "end": "408699"
  },
  {
    "text": "that's just an anecdote but we actually",
    "start": "409120",
    "end": "412580"
  },
  {
    "text": "have data to support the use of",
    "start": "412580",
    "end": "413750"
  },
  {
    "text": "structured fuzzing as well in Chrome",
    "start": "413750",
    "end": "415910"
  },
  {
    "text": "probably around 50 vulnerabilities have",
    "start": "415910",
    "end": "418280"
  },
  {
    "text": "been found using structured fuzzing in",
    "start": "418280",
    "end": "420260"
  },
  {
    "text": "about the past two years and some of",
    "start": "420260",
    "end": "423620"
  },
  {
    "text": "these were cases like the previous one",
    "start": "423620",
    "end": "425030"
  },
  {
    "text": "where there was a unstructured fuzzer",
    "start": "425030",
    "end": "428360"
  },
  {
    "text": "and then the structured foster sort of",
    "start": "428360",
    "end": "429980"
  },
  {
    "text": "beat the unstructured fuzzer and finding",
    "start": "429980",
    "end": "431630"
  },
  {
    "text": "bugs but actually there are other cases",
    "start": "431630",
    "end": "434000"
  },
  {
    "text": "where structured fuzzing allowed a",
    "start": "434000",
    "end": "436370"
  },
  {
    "text": "researcher to fuzz code that they",
    "start": "436370",
    "end": "438590"
  },
  {
    "text": "couldn't fuzz with unstructured fuzzing",
    "start": "438590",
    "end": "440600"
  },
  {
    "text": "and I'll explain more about how that",
    "start": "440600",
    "end": "442400"
  },
  {
    "text": "works later on and although we'll only",
    "start": "442400",
    "end": "444980"
  },
  {
    "text": "be discussing structured fuzzing in the",
    "start": "444980",
    "end": "446750"
  },
  {
    "text": "context of like userland code and Lib",
    "start": "446750",
    "end": "449150"
  },
  {
    "text": "buzzer today it's worth noting that",
    "start": "449150",
    "end": "451760"
  },
  {
    "text": "outside of this context there's a lot of",
    "start": "451760",
    "end": "454250"
  },
  {
    "text": "data to support the use of structured",
    "start": "454250",
    "end": "455930"
  },
  {
    "text": "fuzzing as well I think the most notable",
    "start": "455930",
    "end": "458180"
  },
  {
    "text": "of these is sis caller which for those",
    "start": "458180",
    "end": "460220"
  },
  {
    "text": "of you who haven't heard of it is a",
    "start": "460220",
    "end": "462580"
  },
  {
    "text": "structured fuzzing framework for the",
    "start": "462580",
    "end": "464510"
  },
  {
    "text": "Linux kernel that is found I think over",
    "start": "464510",
    "end": "466760"
  },
  {
    "text": "a thousand vulnerabilities in just the",
    "start": "466760",
    "end": "468350"
  },
  {
    "text": "past couple years so why does structured",
    "start": "468350",
    "end": "472160"
  },
  {
    "start": "470000",
    "end": "610000"
  },
  {
    "text": "fuzzing help you find more bugs there",
    "start": "472160",
    "end": "474770"
  },
  {
    "text": "are many reasons but I think they all",
    "start": "474770",
    "end": "476090"
  },
  {
    "text": "really boil down to the fact that",
    "start": "476090",
    "end": "477710"
  },
  {
    "text": "structured fuzzing gives you the",
    "start": "477710",
    "end": "479510"
  },
  {
    "text": "researcher more power to fuzz what you",
    "start": "479510",
    "end": "481670"
  },
  {
    "text": "want",
    "start": "481670",
    "end": "482060"
  },
  {
    "text": "it lets you fuzz where you think the",
    "start": "482060",
    "end": "483860"
  },
  {
    "text": "bugs are going to be let's see how this",
    "start": "483860",
    "end": "486980"
  },
  {
    "text": "compares to unstructured fuzzing at a",
    "start": "486980",
    "end": "489950"
  },
  {
    "text": "high level so if we're fuzzing something",
    "start": "489950",
    "end": "492770"
  },
  {
    "text": "like v8 which is Chrome's JavaScript",
    "start": "492770",
    "end": "494720"
  },
  {
    "text": "engine there's a range of possible",
    "start": "494720",
    "end": "497840"
  },
  {
    "text": "places where bugs can occur on one end",
    "start": "497840",
    "end": "500840"
  },
  {
    "text": "of the spectrum you've got bugs like",
    "start": "500840",
    "end": "503090"
  },
  {
    "text": "parser bugs and then on the other end",
    "start": "503090",
    "end": "505010"
  },
  {
    "text": "you have things like JIT miss compiles",
    "start": "505010",
    "end": "506960"
  },
  {
    "text": "where you actually have to run",
    "start": "506960",
    "end": "507800"
  },
  {
    "text": "JavaScript code to trigger those bugs",
    "start": "507800",
    "end": "509950"
  },
  {
    "text": "now what an unstructured fuzz were like",
    "start": "509950",
    "end": "512900"
  },
  {
    "text": "AFL would do if you were using it the",
    "start": "512900",
    "end": "514820"
  },
  {
    "text": "fuzz v8 is it would take JavaScript",
    "start": "514820",
    "end": "517909"
  },
  {
    "text": "programs and it would pick random bytes",
    "start": "517910",
    "end": "520700"
  },
  {
    "text": "in those programs and change them to",
    "start": "520700",
    "end": "523219"
  },
  {
    "text": "arbitrary values so if we have like an",
    "start": "523219",
    "end": "525260"
  },
  {
    "text": "else keyword in our program AFL might do",
    "start": "525260",
    "end": "527720"
  },
  {
    "text": "something like add 0 into the middle of",
    "start": "527720",
    "end": "530210"
  },
  {
    "text": "our else keyword",
    "start": "530210",
    "end": "531380"
  },
  {
    "text": "and this is gonna fail parsing right l0s",
    "start": "531380",
    "end": "535190"
  },
  {
    "text": "e is not valid JavaScript code anymore",
    "start": "535190",
    "end": "537560"
  },
  {
    "text": "and this is sort of the problem with",
    "start": "537560",
    "end": "540140"
  },
  {
    "text": "using unstructured fuzzing sometimes so",
    "start": "540140",
    "end": "543500"
  },
  {
    "text": "many of the test cases are gonna fail",
    "start": "543500",
    "end": "544940"
  },
  {
    "text": "parsing that what you might have an easy",
    "start": "544940",
    "end": "547970"
  },
  {
    "text": "time finding these sort of parser bugs",
    "start": "547970",
    "end": "549650"
  },
  {
    "text": "you're gonna have a much harder time",
    "start": "549650",
    "end": "551150"
  },
  {
    "text": "finding these bugs that exist higher up",
    "start": "551150",
    "end": "553700"
  },
  {
    "text": "the stack you know at a higher level of",
    "start": "553700",
    "end": "555110"
  },
  {
    "text": "abstraction and so to focus on finding",
    "start": "555110",
    "end": "557600"
  },
  {
    "text": "these bugs that live at this higher",
    "start": "557600",
    "end": "559550"
  },
  {
    "text": "level of abstraction we can with",
    "start": "559550",
    "end": "561980"
  },
  {
    "text": "structured fuzzing we can constrain our",
    "start": "561980",
    "end": "563900"
  },
  {
    "text": "input so that all of our inputs the to",
    "start": "563900",
    "end": "568580"
  },
  {
    "text": "the target obey certain constraints so",
    "start": "568580",
    "end": "571400"
  },
  {
    "text": "with the structured fuzzer we can make",
    "start": "571400",
    "end": "573230"
  },
  {
    "text": "it so that every test case we create is",
    "start": "573230",
    "end": "575890"
  },
  {
    "text": "syntactically valid JavaScript and so we",
    "start": "575890",
    "end": "578300"
  },
  {
    "text": "can be sure that all of these end up",
    "start": "578300",
    "end": "580310"
  },
  {
    "text": "getting executed and this is basically",
    "start": "580310",
    "end": "582350"
  },
  {
    "text": "what I mean by sort of fuzzing where you",
    "start": "582350",
    "end": "584810"
  },
  {
    "text": "think bugs are you're basically focusing",
    "start": "584810",
    "end": "587060"
  },
  {
    "text": "the fuzzers efforts on a certain",
    "start": "587060",
    "end": "589370"
  },
  {
    "text": "subspace of the range of possible inputs",
    "start": "589370",
    "end": "592640"
  },
  {
    "text": "that you think is most likely the",
    "start": "592640",
    "end": "594860"
  },
  {
    "text": "trigger bugs and it's also worth noting",
    "start": "594860",
    "end": "596990"
  },
  {
    "text": "that in v8 in particular and I think",
    "start": "596990",
    "end": "599480"
  },
  {
    "text": "it's true for most programs most bugs",
    "start": "599480",
    "end": "601700"
  },
  {
    "text": "actually tend to live at these higher",
    "start": "601700",
    "end": "603230"
  },
  {
    "text": "levels of abstraction and not just at",
    "start": "603230",
    "end": "605510"
  },
  {
    "text": "the parsing level so by doing this we",
    "start": "605510",
    "end": "607640"
  },
  {
    "text": "are really finding more bugs another way",
    "start": "607640",
    "end": "611930"
  },
  {
    "text": "that controlling your input space with",
    "start": "611930",
    "end": "614090"
  },
  {
    "text": "structured fuzzing can help with fuzzing",
    "start": "614090",
    "end": "617840"
  },
  {
    "text": "efficiency is you can avoid fuzzing",
    "start": "617840",
    "end": "619820"
  },
  {
    "text": "certain code that actually makes it",
    "start": "619820",
    "end": "621530"
  },
  {
    "text": "harder to find bugs and so recently I",
    "start": "621530",
    "end": "625550"
  },
  {
    "text": "was writing a structured buzzer that",
    "start": "625550",
    "end": "627140"
  },
  {
    "text": "produced JavaScript code and one of the",
    "start": "627140",
    "end": "629060"
  },
  {
    "text": "problems this fuzzer had was it",
    "start": "629060",
    "end": "631280"
  },
  {
    "text": "immediately started producing infinite",
    "start": "631280",
    "end": "632990"
  },
  {
    "text": "loops and we don't want to execute",
    "start": "632990",
    "end": "634880"
  },
  {
    "text": "infinite loops when we're fuzzing a",
    "start": "634880",
    "end": "636800"
  },
  {
    "text": "javascript engine like v8 because it's a",
    "start": "636800",
    "end": "639590"
  },
  {
    "text": "huge waste of time you know we'll never",
    "start": "639590",
    "end": "642380"
  },
  {
    "text": "be able to reach code that comes after",
    "start": "642380",
    "end": "644270"
  },
  {
    "text": "the infinite loop and instead we'll just",
    "start": "644270",
    "end": "645950"
  },
  {
    "text": "keep trying the same thing over and over",
    "start": "645950",
    "end": "647750"
  },
  {
    "text": "again and expecting to find the bug so",
    "start": "647750",
    "end": "650120"
  },
  {
    "text": "the simple solution with structured",
    "start": "650120",
    "end": "652220"
  },
  {
    "text": "fuzzing is again constraining the input",
    "start": "652220",
    "end": "654380"
  },
  {
    "text": "space so now instead of just generating",
    "start": "654380",
    "end": "656860"
  },
  {
    "text": "syntactically valid JavaScript I'm only",
    "start": "656860",
    "end": "659480"
  },
  {
    "text": "going to generate syntactically valid",
    "start": "659480",
    "end": "660770"
  },
  {
    "text": "JavaScript where every loop is",
    "start": "660770",
    "end": "662930"
  },
  {
    "text": "and this obviously solves the infinite",
    "start": "662930",
    "end": "666559"
  },
  {
    "text": "loop problem that we have and you can",
    "start": "666559",
    "end": "667970"
  },
  {
    "text": "apply this to other sorts of issues you",
    "start": "667970",
    "end": "670399"
  },
  {
    "text": "might face when fuzzing so you could do",
    "start": "670399",
    "end": "671720"
  },
  {
    "text": "the same to ensure that you know your",
    "start": "671720",
    "end": "673670"
  },
  {
    "text": "JavaScript code doesn't throw any",
    "start": "673670",
    "end": "675079"
  },
  {
    "text": "uncaught exceptions for example now I",
    "start": "675079",
    "end": "679040"
  },
  {
    "start": "677000",
    "end": "809000"
  },
  {
    "text": "think the real power with structured",
    "start": "679040",
    "end": "681019"
  },
  {
    "text": "fuzzing is not in just avoiding fuzzing",
    "start": "681019",
    "end": "683629"
  },
  {
    "text": "certain things but it's and actually",
    "start": "683629",
    "end": "685759"
  },
  {
    "text": "it's in making the fuzzer cover code",
    "start": "685759",
    "end": "688129"
  },
  {
    "text": "that you want to be tested and you want",
    "start": "688129",
    "end": "690079"
  },
  {
    "text": "to find bugs in and a good example of",
    "start": "690079",
    "end": "693050"
  },
  {
    "text": "this was a fuzzer I was recently writing",
    "start": "693050",
    "end": "694999"
  },
  {
    "text": "for PDF iam which is Chrome's PDF reader",
    "start": "694999",
    "end": "697910"
  },
  {
    "text": "now the way I wrote this fuzzer",
    "start": "697910",
    "end": "700550"
  },
  {
    "text": "was I would run the fuzzer for a little",
    "start": "700550",
    "end": "702679"
  },
  {
    "text": "bit then generate a coverage report",
    "start": "702679",
    "end": "705079"
  },
  {
    "text": "using claims coverage tools and see what",
    "start": "705079",
    "end": "707629"
  },
  {
    "text": "code wasn't being covered and so as you",
    "start": "707629",
    "end": "710300"
  },
  {
    "text": "can see on the slide there's a coverage",
    "start": "710300",
    "end": "712790"
  },
  {
    "text": "report that shows that the PDF PDF eum's",
    "start": "712790",
    "end": "716300"
  },
  {
    "text": "barcode feature isn't being covered at",
    "start": "716300",
    "end": "718309"
  },
  {
    "text": "all and there's a simple reason for this",
    "start": "718309",
    "end": "720499"
  },
  {
    "text": "it's because I had no idea that bark",
    "start": "720499",
    "end": "723110"
  },
  {
    "text": "that PDFs actually support barcodes",
    "start": "723110",
    "end": "725240"
  },
  {
    "text": "that's like a feature that they have but",
    "start": "725240",
    "end": "726769"
  },
  {
    "text": "apparently it's actually a thing so the",
    "start": "726769",
    "end": "729769"
  },
  {
    "text": "solution here was just to basically",
    "start": "729769",
    "end": "731600"
  },
  {
    "text": "expand the input space to get the fuzzer",
    "start": "731600",
    "end": "733939"
  },
  {
    "text": "to produce PDFs that contain barcodes",
    "start": "733939",
    "end": "736279"
  },
  {
    "text": "and then I ran another coverage report",
    "start": "736279",
    "end": "738319"
  },
  {
    "text": "afterwards and just confirm that I'm",
    "start": "738319",
    "end": "740300"
  },
  {
    "text": "indeed covering the code I wanted to",
    "start": "740300",
    "end": "742999"
  },
  {
    "text": "cover the barcode feature now this",
    "start": "742999",
    "end": "745699"
  },
  {
    "text": "workflow is something you only really",
    "start": "745699",
    "end": "747170"
  },
  {
    "text": "get with structured fuzzing with an",
    "start": "747170",
    "end": "749360"
  },
  {
    "text": "unstructured fuzzer you could sort of",
    "start": "749360",
    "end": "750709"
  },
  {
    "text": "get it by you know giving seed inputs",
    "start": "750709",
    "end": "752870"
  },
  {
    "text": "and hoping that it can derive similar",
    "start": "752870",
    "end": "755329"
  },
  {
    "text": "inputs from there but it's not like a",
    "start": "755329",
    "end": "757160"
  },
  {
    "text": "tight feedback loop like you have here",
    "start": "757160",
    "end": "758959"
  },
  {
    "text": "and you know here with structured",
    "start": "758959",
    "end": "760790"
  },
  {
    "text": "fuzzing you're almost becoming good part",
    "start": "760790",
    "end": "762800"
  },
  {
    "text": "of the fuzzer where you see code that",
    "start": "762800",
    "end": "764600"
  },
  {
    "text": "isn't being covered and you you know",
    "start": "764600",
    "end": "766459"
  },
  {
    "text": "make a decision whether you think it's",
    "start": "766459",
    "end": "767959"
  },
  {
    "text": "worth covering that code and then you",
    "start": "767959",
    "end": "769730"
  },
  {
    "text": "make the fuzzer cover that code and",
    "start": "769730",
    "end": "771459"
  },
  {
    "text": "that's a point I want to emphasize here",
    "start": "771459",
    "end": "774079"
  },
  {
    "text": "that you know we're making a trade-off",
    "start": "774079",
    "end": "775730"
  },
  {
    "text": "with structured fuzzing where we're",
    "start": "775730",
    "end": "777259"
  },
  {
    "text": "treating some of our time and effort in",
    "start": "777259",
    "end": "779059"
  },
  {
    "text": "order to find more bugs and you know",
    "start": "779059",
    "end": "782540"
  },
  {
    "text": "you'll just have to decide if you think",
    "start": "782540",
    "end": "784730"
  },
  {
    "text": "it's worth covering a fee like one",
    "start": "784730",
    "end": "786679"
  },
  {
    "text": "feature or another feature or covering a",
    "start": "786679",
    "end": "788389"
  },
  {
    "text": "feature more thoroughly or maybe you can",
    "start": "788389",
    "end": "790759"
  },
  {
    "text": "get bugs more cheaply by teaching the",
    "start": "790759",
    "end": "792649"
  },
  {
    "text": "fuzzer about another feature like you'll",
    "start": "792649",
    "end": "794449"
  },
  {
    "text": "notice I'm not covering the barcode",
    "start": "794449",
    "end": "796700"
  },
  {
    "text": "you're fully in the second coverage",
    "start": "796700",
    "end": "798080"
  },
  {
    "text": "report and that's because I decided hey",
    "start": "798080",
    "end": "800000"
  },
  {
    "text": "you know I could probably get more bugs",
    "start": "800000",
    "end": "802360"
  },
  {
    "text": "by teaching the fuzzer about a new",
    "start": "802360",
    "end": "804980"
  },
  {
    "text": "feature you know I've already gotten",
    "start": "804980",
    "end": "806420"
  },
  {
    "text": "bugs out of this barcode thing I did the",
    "start": "806420",
    "end": "810620"
  },
  {
    "start": "809000",
    "end": "881000"
  },
  {
    "text": "last way I'm going to cover that",
    "start": "810620",
    "end": "812480"
  },
  {
    "text": "structured fuzzing can help you fuzz",
    "start": "812480",
    "end": "814700"
  },
  {
    "text": "where you think bugs are is structured",
    "start": "814700",
    "end": "817010"
  },
  {
    "text": "fuzzing can actually make it easier to",
    "start": "817010",
    "end": "818840"
  },
  {
    "text": "fuzz code that doesn't just accept an",
    "start": "818840",
    "end": "820580"
  },
  {
    "text": "array of bytes so a good example of this",
    "start": "820580",
    "end": "823550"
  },
  {
    "text": "that I want used to illustrate this",
    "start": "823550",
    "end": "825050"
  },
  {
    "text": "point is a fuzzer written by a co-worker",
    "start": "825050",
    "end": "827690"
  },
  {
    "text": "of mine Ned Williamson this buzzer was",
    "start": "827690",
    "end": "830270"
  },
  {
    "text": "for app cache which is a chrome feature",
    "start": "830270",
    "end": "831950"
  },
  {
    "text": "app cache had a number of API is that",
    "start": "831950",
    "end": "835400"
  },
  {
    "text": "the fuzzer was trying to find bugs in",
    "start": "835400",
    "end": "837620"
  },
  {
    "text": "and you'll notice that none of these API",
    "start": "837620",
    "end": "839630"
  },
  {
    "text": "is just except a blob of bytes like",
    "start": "839630",
    "end": "843440"
  },
  {
    "text": "unstructured fuzzers produce and so",
    "start": "843440",
    "end": "846290"
  },
  {
    "text": "there's also no place in chrome where",
    "start": "846290",
    "end": "848390"
  },
  {
    "text": "you could just shove in a blob of bytes",
    "start": "848390",
    "end": "850010"
  },
  {
    "text": "and get these functions exercised so",
    "start": "850010",
    "end": "853670"
  },
  {
    "text": "what the fuzzer did was it structured",
    "start": "853670",
    "end": "855890"
  },
  {
    "text": "each of its inputs so that each input",
    "start": "855890",
    "end": "858470"
  },
  {
    "text": "represented a function call to make and",
    "start": "858470",
    "end": "860990"
  },
  {
    "text": "the arguments to pass those functions",
    "start": "860990",
    "end": "862970"
  },
  {
    "text": "now obviously this input can't be",
    "start": "862970",
    "end": "865250"
  },
  {
    "text": "directly used in fuzzing there's nothing",
    "start": "865250",
    "end": "867980"
  },
  {
    "text": "in chrome that understands what this",
    "start": "867980",
    "end": "869450"
  },
  {
    "text": "means",
    "start": "869450",
    "end": "870020"
  },
  {
    "text": "so the fuzzer also just had to interpret",
    "start": "870020",
    "end": "872570"
  },
  {
    "text": "these inputs so it says if you know if",
    "start": "872570",
    "end": "874910"
  },
  {
    "text": "the inputs telling me to call do",
    "start": "874910",
    "end": "877310"
  },
  {
    "text": "requests I'm going to call do requests",
    "start": "877310",
    "end": "879080"
  },
  {
    "text": "and pass in the specified arguments so",
    "start": "879080",
    "end": "883040"
  },
  {
    "start": "881000",
    "end": "902000"
  },
  {
    "text": "to summarise why you should use",
    "start": "883040",
    "end": "884300"
  },
  {
    "text": "structured fuzzing you should use it",
    "start": "884300",
    "end": "886070"
  },
  {
    "text": "because it will help you find more bugs",
    "start": "886070",
    "end": "887450"
  },
  {
    "text": "and it can help you find more bugs",
    "start": "887450",
    "end": "889430"
  },
  {
    "text": "because it gives you the research or",
    "start": "889430",
    "end": "891350"
  },
  {
    "text": "more power into fuzzing what you want",
    "start": "891350",
    "end": "893420"
  },
  {
    "text": "and also because it allows you to fuzz",
    "start": "893420",
    "end": "895430"
  },
  {
    "text": "more things in particular it allows you",
    "start": "895430",
    "end": "897680"
  },
  {
    "text": "to fuzz code that doesn't accept an",
    "start": "897680",
    "end": "899240"
  },
  {
    "text": "array of bytes now that I'm done selling",
    "start": "899240",
    "end": "903680"
  },
  {
    "start": "902000",
    "end": "928000"
  },
  {
    "text": "structured fuzzing to you all I want to",
    "start": "903680",
    "end": "906230"
  },
  {
    "text": "give you very practical advice on how",
    "start": "906230",
    "end": "908360"
  },
  {
    "text": "you can write a structured fuzzer and",
    "start": "908360",
    "end": "910340"
  },
  {
    "text": "I'll cover three techniques that you can",
    "start": "910340",
    "end": "912440"
  },
  {
    "text": "use for writing a structured fuzzer with",
    "start": "912440",
    "end": "914690"
  },
  {
    "text": "Lib buzzer and Lib buzzer for those of",
    "start": "914690",
    "end": "916700"
  },
  {
    "text": "you who don't know is a coverage guided",
    "start": "916700",
    "end": "920060"
  },
  {
    "text": "fuzzer much like AFL it's probably the",
    "start": "920060",
    "end": "922910"
  },
  {
    "text": "main fuzzer that we use in chrome and",
    "start": "922910",
    "end": "925070"
  },
  {
    "text": "OSS fuzz",
    "start": "925070",
    "end": "927910"
  },
  {
    "start": "928000",
    "end": "971000"
  },
  {
    "text": "so the first way you can write a",
    "start": "928110",
    "end": "931120"
  },
  {
    "text": "structured buzzer with lib buzzer is by",
    "start": "931120",
    "end": "933009"
  },
  {
    "text": "defining a lib buzzer custom mutator and",
    "start": "933009",
    "end": "935860"
  },
  {
    "text": "these work pretty much as you might",
    "start": "935860",
    "end": "937990"
  },
  {
    "text": "expect you simply define this function",
    "start": "937990",
    "end": "940269"
  },
  {
    "text": "and live buzzer when mutating test cases",
    "start": "940269",
    "end": "942970"
  },
  {
    "text": "will call this function to mutate test",
    "start": "942970",
    "end": "946509"
  },
  {
    "text": "cases rather than its default mutator so",
    "start": "946509",
    "end": "949209"
  },
  {
    "text": "if we're fussing JavaScript instead of",
    "start": "949209",
    "end": "951160"
  },
  {
    "text": "using the default mutator to do stupid",
    "start": "951160",
    "end": "952870"
  },
  {
    "text": "things like bit flipping well actually",
    "start": "952870",
    "end": "954930"
  },
  {
    "text": "lib buzzer will call your custom mutator",
    "start": "954930",
    "end": "957759"
  },
  {
    "text": "that can do things like you know parse",
    "start": "957759",
    "end": "960639"
  },
  {
    "text": "the JavaScript build an AST and then do",
    "start": "960639",
    "end": "962949"
  },
  {
    "text": "sort of like intelligent mutations it's",
    "start": "962949",
    "end": "966519"
  },
  {
    "text": "a lot of work but you know this",
    "start": "966519",
    "end": "968199"
  },
  {
    "text": "technique is pretty powerful there's an",
    "start": "968199",
    "end": "972279"
  },
  {
    "start": "971000",
    "end": "1028000"
  },
  {
    "text": "easier way though and that's where Lib",
    "start": "972279",
    "end": "974079"
  },
  {
    "text": "protobuf mutator comes in Lou protobuf",
    "start": "974079",
    "end": "977019"
  },
  {
    "text": "mutator will actually handle mutation",
    "start": "977019",
    "end": "979089"
  },
  {
    "text": "for you and you only have to do work",
    "start": "979089",
    "end": "981100"
  },
  {
    "text": "around there so let's let me explain",
    "start": "981100",
    "end": "983709"
  },
  {
    "text": "what I mean here so the proto brough",
    "start": "983709",
    "end": "986529"
  },
  {
    "text": "mutator is a custom mutator for protobuf",
    "start": "986529",
    "end": "989110"
  },
  {
    "text": "just like the custom mutaters we just",
    "start": "989110",
    "end": "991209"
  },
  {
    "text": "discussed and protobuf is a data format",
    "start": "991209",
    "end": "994149"
  },
  {
    "text": "like json but with pipes and so what you",
    "start": "994149",
    "end": "997120"
  },
  {
    "text": "can do the insight here is you can use",
    "start": "997120",
    "end": "998949"
  },
  {
    "text": "protobuf to define like a spec or schema",
    "start": "998949",
    "end": "1002100"
  },
  {
    "text": "for the inputs you want Lib fuzzer to",
    "start": "1002100",
    "end": "1004439"
  },
  {
    "text": "mutate so if you see on the slides we",
    "start": "1004439",
    "end": "1007139"
  },
  {
    "text": "have an ADD expression to find them",
    "start": "1007139",
    "end": "1009180"
  },
  {
    "text": "protobuf and in this simple case we'll",
    "start": "1009180",
    "end": "1011639"
  },
  {
    "text": "have two operands that are both integers",
    "start": "1011639",
    "end": "1014040"
  },
  {
    "text": "but protobuf is rich enough that you can",
    "start": "1014040",
    "end": "1016649"
  },
  {
    "text": "make each operand",
    "start": "1016649",
    "end": "1018209"
  },
  {
    "text": "you know an int or float or an int float",
    "start": "1018209",
    "end": "1020279"
  },
  {
    "text": "or another expression even you know it",
    "start": "1020279",
    "end": "1022199"
  },
  {
    "text": "gives you the tools that you'd probably",
    "start": "1022199",
    "end": "1024058"
  },
  {
    "text": "want in this case so lip protobuf",
    "start": "1024059",
    "end": "1030030"
  },
  {
    "text": "mutator will then create a test case",
    "start": "1030030",
    "end": "1032938"
  },
  {
    "text": "based on the spec for you and as we see",
    "start": "1032939",
    "end": "1037409"
  },
  {
    "text": "here we've got you know two operands ten",
    "start": "1037409",
    "end": "1039600"
  },
  {
    "text": "and nine and you know that's basically",
    "start": "1039600",
    "end": "1042418"
  },
  {
    "text": "exactly what we intended and so",
    "start": "1042419",
    "end": "1044610"
  },
  {
    "text": "obviously like we saw before you can't",
    "start": "1044610",
    "end": "1046678"
  },
  {
    "text": "feed this to anything unless it accepts",
    "start": "1046679",
    "end": "1048960"
  },
  {
    "text": "protobuf right it's not useful for",
    "start": "1048960",
    "end": "1050549"
  },
  {
    "text": "fuzzing something like v8 so what we do",
    "start": "1050549",
    "end": "1053340"
  },
  {
    "text": "is we have our interpreter for this and",
    "start": "1053340",
    "end": "1055140"
  },
  {
    "text": "our interpreter here will just convert",
    "start": "1055140",
    "end": "1056940"
  },
  {
    "text": "from this intermediate format into the",
    "start": "1056940",
    "end": "1060720"
  },
  {
    "text": "tar",
    "start": "1060720",
    "end": "1060960"
  },
  {
    "text": "good format javascript will take both",
    "start": "1060960",
    "end": "1062460"
  },
  {
    "text": "operands convert them to strings and add",
    "start": "1062460",
    "end": "1064830"
  },
  {
    "text": "a plus sign in between them luke",
    "start": "1064830",
    "end": "1066809"
  },
  {
    "text": "protobuf mutator is extremely effective",
    "start": "1066809",
    "end": "1069270"
  },
  {
    "text": "and actually all of the fuzzers that",
    "start": "1069270",
    "end": "1071039"
  },
  {
    "text": "i've covered today have used this",
    "start": "1071039",
    "end": "1072899"
  },
  {
    "text": "technique the you know this includes",
    "start": "1072899",
    "end": "1075270"
  },
  {
    "text": "everything from like the skia fuzzer to",
    "start": "1075270",
    "end": "1076919"
  },
  {
    "text": "the app cache browser which the app",
    "start": "1076919",
    "end": "1079559"
  },
  {
    "text": "cache fuzzer actually was used in a",
    "start": "1079559",
    "end": "1082130"
  },
  {
    "text": "recent X was using an exploit that you",
    "start": "1082130",
    "end": "1086700"
  },
  {
    "text": "know how to sandbox escape and",
    "start": "1086700",
    "end": "1088049"
  },
  {
    "text": "everything so completely owning Chrome",
    "start": "1088049",
    "end": "1089669"
  },
  {
    "text": "with the vulnerability found by the app",
    "start": "1089669",
    "end": "1091620"
  },
  {
    "text": "cache fuzzer",
    "start": "1091620",
    "end": "1092340"
  },
  {
    "text": "and actually the protobuf mutator was",
    "start": "1092340",
    "end": "1094380"
  },
  {
    "text": "again used by my coworker Ned to find",
    "start": "1094380",
    "end": "1097440"
  },
  {
    "text": "the vulnerability in the iOS kernel that",
    "start": "1097440",
    "end": "1099690"
  },
  {
    "text": "was used in the iOS I think 12.2",
    "start": "1099690",
    "end": "1102380"
  },
  {
    "text": "jailbreak so you can use it to find some",
    "start": "1102380",
    "end": "1105059"
  },
  {
    "text": "pretty nice bugs and it's sort of the",
    "start": "1105059",
    "end": "1107970"
  },
  {
    "text": "technique I'd recommend when in most",
    "start": "1107970",
    "end": "1110159"
  },
  {
    "text": "cases for writing a structured buzzer",
    "start": "1110159",
    "end": "1113720"
  },
  {
    "start": "1113000",
    "end": "1488000"
  },
  {
    "text": "the last option you have is one that's",
    "start": "1114140",
    "end": "1118860"
  },
  {
    "text": "like a pretty exciting area more for",
    "start": "1118860",
    "end": "1120960"
  },
  {
    "text": "future work but I don't have fantastic",
    "start": "1120960",
    "end": "1123600"
  },
  {
    "text": "results from it so far so I'll just sort",
    "start": "1123600",
    "end": "1125610"
  },
  {
    "text": "of explain it and maybe give some tips",
    "start": "1125610",
    "end": "1127710"
  },
  {
    "text": "on how you might be able to do it now",
    "start": "1127710",
    "end": "1129990"
  },
  {
    "text": "imagine you have a black box buzzer",
    "start": "1129990",
    "end": "1133110"
  },
  {
    "text": "basically something like a Python script",
    "start": "1133110",
    "end": "1135720"
  },
  {
    "text": "that can mutate HTML files that you then",
    "start": "1135720",
    "end": "1138690"
  },
  {
    "text": "feed the chrome and try and get crashes",
    "start": "1138690",
    "end": "1140510"
  },
  {
    "text": "you could convert this into a Lib buzzer",
    "start": "1140510",
    "end": "1144090"
  },
  {
    "text": "custom mutator to add the power of",
    "start": "1144090",
    "end": "1146340"
  },
  {
    "text": "coverage guided fuzzing to this black",
    "start": "1146340",
    "end": "1148409"
  },
  {
    "text": "box buzzer that you have and so some of",
    "start": "1148409",
    "end": "1151169"
  },
  {
    "text": "the challenges that you might encounter",
    "start": "1151169",
    "end": "1152909"
  },
  {
    "text": "when doing this that you might have to",
    "start": "1152909",
    "end": "1154590"
  },
  {
    "text": "overcome are you know if you imagine how",
    "start": "1154590",
    "end": "1157169"
  },
  {
    "text": "this buzzer works you'll have a corpus",
    "start": "1157169",
    "end": "1160740"
  },
  {
    "text": "of test cases and your frezzer will pick",
    "start": "1160740",
    "end": "1162960"
  },
  {
    "text": "one at random mutate it and that gets",
    "start": "1162960",
    "end": "1165059"
  },
  {
    "text": "fed to your target now if it were a",
    "start": "1165059",
    "end": "1167250"
  },
  {
    "text": "custom mutator what would happen is",
    "start": "1167250",
    "end": "1170990"
  },
  {
    "text": "there's a lot this ain't pretty much the",
    "start": "1170990",
    "end": "1173250"
  },
  {
    "text": "same but there's a last step at the end",
    "start": "1173250",
    "end": "1174690"
  },
  {
    "text": "where a test case will be added back to",
    "start": "1174690",
    "end": "1176640"
  },
  {
    "text": "the corpus and this could present the",
    "start": "1176640",
    "end": "1178500"
  },
  {
    "text": "problem for some fuzzers because they",
    "start": "1178500",
    "end": "1180419"
  },
  {
    "text": "can't actually mutate their own output",
    "start": "1180419",
    "end": "1181620"
  },
  {
    "text": "sometimes they're not used to be running",
    "start": "1181620",
    "end": "1183299"
  },
  {
    "text": "in a kind of loop you know I was",
    "start": "1183299",
    "end": "1185309"
  },
  {
    "text": "recently converting a font mutator into",
    "start": "1185309",
    "end": "1188760"
  },
  {
    "text": "a Lib fuzzer custom mutator and the",
    "start": "1188760",
    "end": "1191190"
  },
  {
    "text": "problem there was you know this this",
    "start": "1191190",
    "end": "1193049"
  },
  {
    "text": "font mutator would parse",
    "start": "1193049",
    "end": "1194370"
  },
  {
    "text": "what expected to be semi valid fonts and",
    "start": "1194370",
    "end": "1197029"
  },
  {
    "text": "mutate them and you know that I would",
    "start": "1197029",
    "end": "1200220"
  },
  {
    "text": "then feed to the target well you know",
    "start": "1200220",
    "end": "1202740"
  },
  {
    "text": "once it was mutated",
    "start": "1202740",
    "end": "1204210"
  },
  {
    "text": "sometimes wouldn't be able to parse",
    "start": "1204210",
    "end": "1205950"
  },
  {
    "text": "those mutated outputs again so in that",
    "start": "1205950",
    "end": "1208169"
  },
  {
    "text": "case you could just sort of fall back to",
    "start": "1208169",
    "end": "1210150"
  },
  {
    "text": "the lib fuzzers default mutator or even",
    "start": "1210150",
    "end": "1213390"
  },
  {
    "text": "maybe improve your mutator the other",
    "start": "1213390",
    "end": "1215909"
  },
  {
    "text": "problem you might have to overcome is",
    "start": "1215909",
    "end": "1217350"
  },
  {
    "text": "sometimes these tools aren't written to",
    "start": "1217350",
    "end": "1219390"
  },
  {
    "text": "be fast enough to run in this coverage",
    "start": "1219390",
    "end": "1221309"
  },
  {
    "text": "guided fuzzing loop you know coverage",
    "start": "1221309",
    "end": "1223080"
  },
  {
    "text": "guided fuzzing works best when it when",
    "start": "1223080",
    "end": "1225690"
  },
  {
    "text": "it's quick and you know you might want",
    "start": "1225690",
    "end": "1227880"
  },
  {
    "text": "to need to improve the speed there and",
    "start": "1227880",
    "end": "1229260"
  },
  {
    "text": "the final thing you might need to",
    "start": "1229260",
    "end": "1230580"
  },
  {
    "text": "improve is or work on is the fact that",
    "start": "1230580",
    "end": "1234210"
  },
  {
    "text": "many of these test cases these mutaters",
    "start": "1234210",
    "end": "1236490"
  },
  {
    "text": "excuse me",
    "start": "1236490",
    "end": "1237000"
  },
  {
    "text": "are written in languages other than c++",
    "start": "1237000",
    "end": "1239340"
  },
  {
    "text": "and to call it from a custom mutator you",
    "start": "1239340",
    "end": "1242190"
  },
  {
    "text": "need to use whatever language the",
    "start": "1242190",
    "end": "1245100"
  },
  {
    "text": "fuzzers written in you know it probably",
    "start": "1245100",
    "end": "1246659"
  },
  {
    "text": "has some interface like maybe j and i",
    "start": "1246659",
    "end": "1248370"
  },
  {
    "text": "for calling the for calling that code",
    "start": "1248370",
    "end": "1251940"
  },
  {
    "text": "from c++ so to summarize how you can",
    "start": "1251940",
    "end": "1256500"
  },
  {
    "text": "write a lib fuzzer custom meet it's how",
    "start": "1256500",
    "end": "1258390"
  },
  {
    "text": "you can write a structured fuzzer using",
    "start": "1258390",
    "end": "1259830"
  },
  {
    "text": "lib buzzer your first option is to use a",
    "start": "1259830",
    "end": "1262770"
  },
  {
    "text": "lib buzzer custom mutator your second",
    "start": "1262770",
    "end": "1265440"
  },
  {
    "text": "option and it's the one I recommend in",
    "start": "1265440",
    "end": "1267240"
  },
  {
    "text": "most cases is to use the protobuf",
    "start": "1267240",
    "end": "1269520"
  },
  {
    "text": "mutator and the third thing you can do",
    "start": "1269520",
    "end": "1271440"
  },
  {
    "text": "which is pretty exciting is taking an",
    "start": "1271440",
    "end": "1274440"
  },
  {
    "text": "existing black box buzzer you have and",
    "start": "1274440",
    "end": "1276270"
  },
  {
    "text": "converting it to a lib buzzer custom",
    "start": "1276270",
    "end": "1278159"
  },
  {
    "text": "mutator to get the power of coverage",
    "start": "1278159",
    "end": "1281039"
  },
  {
    "text": "guided fuzzing added to your fuzzer so",
    "start": "1281039",
    "end": "1285630"
  },
  {
    "text": "to summarize what we went over in this",
    "start": "1285630",
    "end": "1287159"
  },
  {
    "text": "talk you should use structured fuzzing",
    "start": "1287159",
    "end": "1289320"
  },
  {
    "text": "because it'll help you find more bugs",
    "start": "1289320",
    "end": "1290730"
  },
  {
    "text": "you know more bugs is really the bottom",
    "start": "1290730",
    "end": "1292620"
  },
  {
    "text": "line here and to write a structured",
    "start": "1292620",
    "end": "1295559"
  },
  {
    "text": "fuzzer with lib buzzer you can use",
    "start": "1295559",
    "end": "1297419"
  },
  {
    "text": "either lib clusters custom mutator",
    "start": "1297419",
    "end": "1299279"
  },
  {
    "text": "feature or lib protobuf mutator I have",
    "start": "1299279",
    "end": "1303120"
  },
  {
    "text": "some links at the end of the slides if",
    "start": "1303120",
    "end": "1305520"
  },
  {
    "text": "anyone wants to check the slides",
    "start": "1305520",
    "end": "1306990"
  },
  {
    "text": "afterwards and do further reading and",
    "start": "1306990",
    "end": "1308750"
  },
  {
    "text": "I'll take questions now if anyone has",
    "start": "1308750",
    "end": "1311820"
  },
  {
    "text": "them can you um can you go up to the",
    "start": "1311820",
    "end": "1315059"
  },
  {
    "text": "microphone and ask there",
    "start": "1315059",
    "end": "1318350"
  },
  {
    "text": "thank you",
    "start": "1320139",
    "end": "1323289"
  },
  {
    "text": "all right so you talk about writing new",
    "start": "1325460",
    "end": "1328619"
  },
  {
    "text": "buzzers from scratch yeah",
    "start": "1328619",
    "end": "1330749"
  },
  {
    "text": "however last year there was a puzzle",
    "start": "1330749",
    "end": "1333629"
  },
  {
    "text": "released which kind of does all this are",
    "start": "1333629",
    "end": "1336720"
  },
  {
    "text": "you aware of the AFL smart uh yeah I",
    "start": "1336720",
    "end": "1339869"
  },
  {
    "text": "have heard of AFL smart I'm I skimmed",
    "start": "1339869",
    "end": "1343019"
  },
  {
    "text": "the paper but it seemed to me like it",
    "start": "1343019",
    "end": "1344489"
  },
  {
    "text": "was pretty much a similar idea to lib",
    "start": "1344489",
    "end": "1346769"
  },
  {
    "text": "protobuf mutator where you take you know",
    "start": "1346769",
    "end": "1348659"
  },
  {
    "text": "you sort of write like peach pits and",
    "start": "1348659",
    "end": "1350450"
  },
  {
    "text": "yeah it's just a similar idea I think",
    "start": "1350450",
    "end": "1352619"
  },
  {
    "text": "the lib protobuf mutator you like to",
    "start": "1352619",
    "end": "1354239"
  },
  {
    "text": "finding you know you're defining a",
    "start": "1354239",
    "end": "1355830"
  },
  {
    "text": "schema for what you want me to define",
    "start": "1355830",
    "end": "1357989"
  },
  {
    "text": "the pitched files where you have the",
    "start": "1357989",
    "end": "1359639"
  },
  {
    "text": "grammar and you also have all of the",
    "start": "1359639",
    "end": "1361169"
  },
  {
    "text": "advantages AFL with the speed and",
    "start": "1361169",
    "end": "1363629"
  },
  {
    "text": "efficiency and you can make it structure",
    "start": "1363629",
    "end": "1365999"
  },
  {
    "text": "where by defining the grammar by",
    "start": "1365999",
    "end": "1367529"
  },
  {
    "text": "yourself yes yeah you pay by investing",
    "start": "1367529",
    "end": "1370259"
  },
  {
    "text": "time in defining grammar but Wright has",
    "start": "1370259",
    "end": "1372029"
  },
  {
    "text": "really good results in real life yeah",
    "start": "1372029",
    "end": "1373739"
  },
  {
    "text": "yeah I mean I'm familiar with the a",
    "start": "1373739",
    "end": "1375480"
  },
  {
    "text": "little bit familiar with the work and",
    "start": "1375480",
    "end": "1376919"
  },
  {
    "text": "yeah they um you know I know that people",
    "start": "1376919",
    "end": "1378659"
  },
  {
    "text": "that did it you know they they produce a",
    "start": "1378659",
    "end": "1380519"
  },
  {
    "text": "pretty good work on AFL and yeah I'm I",
    "start": "1380519",
    "end": "1383639"
  },
  {
    "text": "was pretty impressed with the results",
    "start": "1383639",
    "end": "1385320"
  },
  {
    "text": "and I think it's pretty comparable to",
    "start": "1385320",
    "end": "1386609"
  },
  {
    "text": "lip protobuf mutaters so yeah yeah",
    "start": "1386609",
    "end": "1388769"
  },
  {
    "text": "because I was curious if you're using it",
    "start": "1388769",
    "end": "1390239"
  },
  {
    "text": "and we're we're not using it but I'm",
    "start": "1390239",
    "end": "1392460"
  },
  {
    "text": "currently exploring ways to view this",
    "start": "1392460",
    "end": "1394679"
  },
  {
    "text": "better and so that's definitely one of",
    "start": "1394679",
    "end": "1396179"
  },
  {
    "text": "the things I'm gonna be looking at yeah",
    "start": "1396179",
    "end": "1397499"
  },
  {
    "text": "cuz I mean protobuf isn't like a you",
    "start": "1397499",
    "end": "1400679"
  },
  {
    "text": "know it wasn't designed for making",
    "start": "1400679",
    "end": "1402559"
  },
  {
    "text": "buzzer grammars right and so you know",
    "start": "1402559",
    "end": "1405779"
  },
  {
    "text": "maybe something like peaches pits would",
    "start": "1405779",
    "end": "1408869"
  },
  {
    "text": "be better at that I sort of think that",
    "start": "1408869",
    "end": "1410789"
  },
  {
    "text": "the fact that protobuf might not have",
    "start": "1410789",
    "end": "1412769"
  },
  {
    "text": "all these features might be a good thing",
    "start": "1412769",
    "end": "1414330"
  },
  {
    "text": "you know because in conversion and",
    "start": "1414330",
    "end": "1416299"
  },
  {
    "text": "interpreting you have unlimited power",
    "start": "1416299",
    "end": "1418619"
  },
  {
    "text": "right you have full SEPA and everyone",
    "start": "1418619",
    "end": "1420509"
  },
  {
    "text": "knows how to write C++ already so you",
    "start": "1420509",
    "end": "1423149"
  },
  {
    "text": "don't need to learn like a new format to",
    "start": "1423149",
    "end": "1425970"
  },
  {
    "text": "you know write write these effectively",
    "start": "1425970",
    "end": "1427590"
  },
  {
    "text": "so it might be a feature but I'll",
    "start": "1427590",
    "end": "1429809"
  },
  {
    "text": "definitely going to be taking a look at",
    "start": "1429809",
    "end": "1431279"
  },
  {
    "text": "that yeah yeah at the first point you",
    "start": "1431279",
    "end": "1433289"
  },
  {
    "text": "said converting and we also had to dub",
    "start": "1433289",
    "end": "1435629"
  },
  {
    "text": "pseudocode phase to interpret that the",
    "start": "1435629",
    "end": "1440580"
  },
  {
    "text": "decoded results like with the functions",
    "start": "1440580",
    "end": "1442409"
  },
  {
    "text": "and the headers and you have to parse",
    "start": "1442409",
    "end": "1444389"
  },
  {
    "text": "that one more time basically adding",
    "start": "1444389",
    "end": "1446009"
  },
  {
    "text": "another overhead that kinda can already",
    "start": "1446009",
    "end": "1448440"
  },
  {
    "text": "be done with Al feel smart and we were",
    "start": "1448440",
    "end": "1450359"
  },
  {
    "text": "really proud with the results we had",
    "start": "1450359",
    "end": "1451619"
  },
  {
    "text": "with it and yeah I was I was curious if",
    "start": "1451619",
    "end": "1455070"
  },
  {
    "text": "you if you're even considering using it",
    "start": "1455070",
    "end": "1457799"
  },
  {
    "text": "in the future instead of right",
    "start": "1457799",
    "end": "1459010"
  },
  {
    "text": "your own custom fuzzers well I mean I",
    "start": "1459010",
    "end": "1461470"
  },
  {
    "text": "don't really consider it that",
    "start": "1461470",
    "end": "1462490"
  },
  {
    "text": "differently that different from you know",
    "start": "1462490",
    "end": "1465970"
  },
  {
    "text": "writing something with lib protobuf",
    "start": "1465970",
    "end": "1467380"
  },
  {
    "text": "meteor I mean and that's primarily what",
    "start": "1467380",
    "end": "1469450"
  },
  {
    "text": "we use for you know writing these things",
    "start": "1469450",
    "end": "1471850"
  },
  {
    "text": "like I said I think all the examples",
    "start": "1471850",
    "end": "1474010"
  },
  {
    "text": "that I presented in this talk we're",
    "start": "1474010",
    "end": "1475960"
  },
  {
    "text": "written using lib protobuf mutator okay",
    "start": "1475960",
    "end": "1478060"
  },
  {
    "text": "thanks thanks for the question",
    "start": "1478060",
    "end": "1481770"
  },
  {
    "text": "[Applause]",
    "start": "1482430",
    "end": "1490559"
  }
]