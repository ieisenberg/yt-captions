[
  {
    "text": "welcome to splitting the email atom exploiting parses to bypass access",
    "start": "2879",
    "end": "8840"
  },
  {
    "text": "controls email addresses might seem mundane but the rfc's governing them are",
    "start": "8840",
    "end": "14679"
  },
  {
    "text": "downright Bonkers I'll show you why predicting an email destination is highly complex and",
    "start": "14679",
    "end": "22800"
  },
  {
    "text": "I'll take you on a journey of ancient protocols exotic encodings access control bypasses and",
    "start": "22800",
    "end": "30000"
  },
  {
    "text": "how I gained remote code execution from an RFC compliant email",
    "start": "30000",
    "end": "36320"
  },
  {
    "text": "address first I'll explain why email address par of discrepancies matter next",
    "start": "37239",
    "end": "43559"
  },
  {
    "text": "I'll cover the shaky foundations on which they are built the core of the talk will focus on parure discrepancies",
    "start": "43559",
    "end": "51000"
  },
  {
    "text": "including Unicode overflows encoded word Punic code and all with real world case",
    "start": "51000",
    "end": "57519"
  },
  {
    "text": "studies then I'll share my methodology and tools for automating",
    "start": "57519",
    "end": "63960"
  },
  {
    "text": "exploitation followed by advice on defense I'll conclude with the key takeaways and leave five minutes for",
    "start": "63960",
    "end": "72960"
  },
  {
    "text": "questions so This research all started when we realized that many websites use",
    "start": "72960",
    "end": "78080"
  },
  {
    "text": "the domain part of the email address to infer the user's organization and apply access control",
    "start": "78080",
    "end": "85840"
  },
  {
    "text": "for example slack will automatically give you access to a company's slack Channel based upon your work email",
    "start": "85840",
    "end": "93640"
  },
  {
    "text": "address and cloudflare zero day trust can be configured to use the email",
    "start": "93640",
    "end": "99000"
  },
  {
    "text": "domain to protect your internal networks this makes email verification a",
    "start": "99000",
    "end": "105479"
  },
  {
    "text": "critical security boundary what could possibly go",
    "start": "105479",
    "end": "110880"
  },
  {
    "text": "wrong everyone knows that URL paral discrepancies are critical as they can",
    "start": "111600",
    "end": "117079"
  },
  {
    "text": "lead to ssrf path through ersal and other security issues using email domains for Access",
    "start": "117079",
    "end": "125399"
  },
  {
    "text": "Control makes email address part discrepancies critical to predicting which email domain and",
    "start": "125399",
    "end": "133879"
  },
  {
    "text": "email should be rooted to should be simple but it's actually ludicrously difficult even for valid RFC compliance",
    "start": "133879",
    "end": "141760"
  },
  {
    "text": "email addresses so we've established why email",
    "start": "141760",
    "end": "147720"
  },
  {
    "text": "address parsa uh why email address parsing matters now let's explore why",
    "start": "147720",
    "end": "153519"
  },
  {
    "text": "predicting the email destination is so challenging email addresses are built on",
    "start": "153519",
    "end": "160720"
  },
  {
    "text": "a shaky Foundation of rfc's designed many years ago validation is often performed by",
    "start": "160720",
    "end": "168640"
  },
  {
    "text": "copy and pasting regular expressions from stack Overflow all trying to follow",
    "start": "168640",
    "end": "173760"
  },
  {
    "text": "the RFC however one mistake in the regular expression can bring everything Crashing",
    "start": "173760",
    "end": "179200"
  },
  {
    "text": "Down I'm not going to bore you with rfc's but",
    "start": "179200",
    "end": "185440"
  },
  {
    "text": "I will highlight the important ones for this talk for instance the characters before the art symbol are called the",
    "start": "185440",
    "end": "192120"
  },
  {
    "text": "local part the RFC also allows what is called",
    "start": "192120",
    "end": "197280"
  },
  {
    "text": "the quoted local part which allows you to place uh characters that aren't",
    "start": "197280",
    "end": "202720"
  },
  {
    "text": "normally allowed in the local part of the address in this example I use the quoted",
    "start": "202720",
    "end": "209080"
  },
  {
    "text": "local parts to use the at symbol as part of the address the same RSC allows you",
    "start": "209080",
    "end": "215200"
  },
  {
    "text": "to use a quoted per which basically means a character preceded by a backslash this enables you to use the",
    "start": "215200",
    "end": "221760"
  },
  {
    "text": "double quotes and the backslash as part of the local part address characters enclosed in",
    "start": "221760",
    "end": "229400"
  },
  {
    "text": "parenthesis are treated as comments and can be placed anywhere in the address",
    "start": "229400",
    "end": "234720"
  },
  {
    "text": "apart from the quoted local part when the actual email is delivered the comment are",
    "start": "234720",
    "end": "242159"
  },
  {
    "text": "removed so here are two email addresses you might be wondering which",
    "start": "243000",
    "end": "249439"
  },
  {
    "text": "one of these emails are valid as this is a typical question asked in an email",
    "start": "249439",
    "end": "255519"
  },
  {
    "text": "presentation however it's a wrong question for this talk the question you should be asking",
    "start": "255519",
    "end": "262880"
  },
  {
    "text": "is which email domain does it go to you might expect both emails to go to",
    "start": "262880",
    "end": "268520"
  },
  {
    "text": "example.com well that's not what happens they both go to",
    "start": "268520",
    "end": "274520"
  },
  {
    "text": "psr.exe difficult this is just the tip of the iceberg the first example works on PO",
    "start": "279120",
    "end": "285960"
  },
  {
    "text": "fix and the second example works on semil if you are confused you should",
    "start": "285960",
    "end": "293120"
  },
  {
    "text": "be a source route is a sequence of service where an email goes through",
    "start": "293680",
    "end": "299320"
  },
  {
    "text": "before reaching its final destination servers in the chain are separated by commas and the final",
    "start": "299320",
    "end": "305919"
  },
  {
    "text": "destination is marched with a column before the recipient's full",
    "start": "305919",
    "end": "311000"
  },
  {
    "text": "address another form of source rooting is called the percent hack despite its",
    "start": "311000",
    "end": "317120"
  },
  {
    "text": "name the actual character is chosen by the mailer in this process the email is",
    "start": "317120",
    "end": "323280"
  },
  {
    "text": "initially sent to example.com after which the percent symbol is converted into an art symbol and the email is sent",
    "start": "323280",
    "end": "330639"
  },
  {
    "text": "to fps. this process can be repeated several",
    "start": "330639",
    "end": "337160"
  },
  {
    "text": "times before email addresses and even the internet existed people exchanged",
    "start": "338160",
    "end": "343639"
  },
  {
    "text": "messages using the uucp protocol which is a Unix to Unix copy protocol uucp is",
    "start": "343639",
    "end": "351560"
  },
  {
    "text": "an early protocol that separates the local and multiple horse with an exclamation mark creating what is known",
    "start": "351560",
    "end": "358720"
  },
  {
    "text": "as a bang path unlike the standard format for emails addresses today the bang path lists the",
    "start": "358720",
    "end": "365919"
  },
  {
    "text": "horse from left to right with the Final Destination uh user mailbox at the",
    "start": "365919",
    "end": "373479"
  },
  {
    "text": "end so going back to the original examples that I gave with all the special characters remove the",
    "start": "374720",
    "end": "381680"
  },
  {
    "text": "parenthesis effectively remove the art symbol and the domain and without the domain part pfix treats the email as a",
    "start": "381680",
    "end": "389680"
  },
  {
    "text": "sent Source route using a backslash and escaping the at symbol has the same",
    "start": "389680",
    "end": "394880"
  },
  {
    "text": "effect on S mail which treats the email as a uucp address pretty damn crazy",
    "start": "394880",
    "end": "401440"
  },
  {
    "text": "right and I have checked and all those special characters do go to the uh email",
    "start": "401440",
    "end": "407240"
  },
  {
    "text": "mailbox so this is just the examples with them removed I wish I could tell you that I",
    "start": "407240",
    "end": "415080"
  },
  {
    "text": "uncovered this Behavior by analyzing thousands of lines of code using a debuger and stepping through the cord",
    "start": "415080",
    "end": "421599"
  },
  {
    "text": "flowing s mail and post fix but that's not actually how it went down I noticed that an unnamed Target",
    "start": "421599",
    "end": "429680"
  },
  {
    "text": "was allowing all sorts of special characters so I took them all and pasted them into my email expecting them to",
    "start": "429680",
    "end": "436400"
  },
  {
    "text": "fail but instead I checked the CIS log on a box I was testing and I noticed a",
    "start": "436400",
    "end": "444638"
  },
  {
    "text": "difference I was getting horse unknown error in the delivery state us",
    "start": "445280",
    "end": "450400"
  },
  {
    "text": "notification this was significant because it would suggest that a different host was being used and if you",
    "start": "450400",
    "end": "456360"
  },
  {
    "text": "look at the arrow you'll notice the exclamation mark was missing I didn't actually notice that at the time but",
    "start": "456360",
    "end": "461560"
  },
  {
    "text": "that was a clue I started to remove characters and resend the email to see if I could get the same message I",
    "start": "461560",
    "end": "468520"
  },
  {
    "text": "narrowed it down to the exclamation mark and thus discovered the uucp behavior",
    "start": "468520",
    "end": "473919"
  },
  {
    "text": "this was Bonkers by sheer look the characters I pasted ended with a backslash with which escaped the art",
    "start": "473919",
    "end": "480400"
  },
  {
    "text": "symbol and then I wrote a fuzzer to find the uh Source Roots Behavior Uh to find",
    "start": "480400",
    "end": "486520"
  },
  {
    "text": "the behavior in in postfix these findings gave me great confidence that there were tons of bugs",
    "start": "486520",
    "end": "492560"
  },
  {
    "text": "out there so I began to look for more one of the main problems I had with",
    "start": "492560",
    "end": "500280"
  },
  {
    "text": "this research was to generate blocks characters many applications will block",
    "start": "500280",
    "end": "506759"
  },
  {
    "text": "multiple art symbols so this following section focuses on Unicode overflows",
    "start": "506759",
    "end": "512680"
  },
  {
    "text": "which enable the creation of asy characters from higher Unicode",
    "start": "512680",
    "end": "519200"
  },
  {
    "text": "characters the PHP Char function is a good example of how a unicord overflow",
    "start": "519560",
    "end": "525080"
  },
  {
    "text": "can occur this function generates a character from an integer cord Point",
    "start": "525080",
    "end": "531040"
  },
  {
    "text": "here's an illustration of the algorithm used by this function it Loops through",
    "start": "531040",
    "end": "536959"
  },
  {
    "text": "the Cod Point while it's less than zero Contin adding 256 until it's non- negative because why not this is PHP",
    "start": "536959",
    "end": "544160"
  },
  {
    "text": "after all then it uses a mod operation to ensure the bite value is always",
    "start": "544160",
    "end": "549720"
  },
  {
    "text": "within a range of 0 to 255 it will be truncated into this range",
    "start": "549720",
    "end": "556200"
  },
  {
    "text": "note that Unicode overflows aren't specific to",
    "start": "556200",
    "end": "561200"
  },
  {
    "text": "PHP generating a Unicode overflow in JavaScript is quite simple using the",
    "start": "561959",
    "end": "567680"
  },
  {
    "text": "from codo method first you pass the number that you want to cause the",
    "start": "567680",
    "end": "573200"
  },
  {
    "text": "unicord Overflow such as Ox 100 which is 256 in decimal next you'll provide a",
    "start": "573200",
    "end": "580240"
  },
  {
    "text": "second HEX number to specify the actual character you want to generate like o",
    "start": "580240",
    "end": "585360"
  },
  {
    "text": "x40 which is the at symbol the from Cordo method will generate this unicord",
    "start": "585360",
    "end": "591000"
  },
  {
    "text": "character and then when that character is transformed to fit within 255 by A system that doesn't support",
    "start": "591000",
    "end": "598519"
  },
  {
    "text": "higher unicor characters it will produce an asky character specified by the second HEX",
    "start": "598519",
    "end": "605800"
  },
  {
    "text": "number so I started hunting for real world Unicode overflows and I found a",
    "start": "606440",
    "end": "611959"
  },
  {
    "text": "Target that I don't really want to mention because it might get hacked um that alters the characters within the",
    "start": "611959",
    "end": "618160"
  },
  {
    "text": "mailer's SMTP conversation the application blocked the",
    "start": "618160",
    "end": "623680"
  },
  {
    "text": "uh backlashing the quoted local part but I bypass this validation using a Unicode",
    "start": "623680",
    "end": "628800"
  },
  {
    "text": "overflow this enabled me to escape characters that are normally allowed to be escaped",
    "start": "628800",
    "end": "634440"
  },
  {
    "text": "and break out of the quoted local part despite this when using an encoded art",
    "start": "634440",
    "end": "639680"
  },
  {
    "text": "symbol the email wasn't sent suggesting there's a double validation once in the",
    "start": "639680",
    "end": "644880"
  },
  {
    "text": "application and once again before sending so although I didn't manage to exploit this particular Target the key",
    "start": "644880",
    "end": "651639"
  },
  {
    "text": "takeaway is that Unicode overflows can be used to bypass validation and smuggle",
    "start": "651639",
    "end": "657480"
  },
  {
    "text": "characters within the actual SM CP",
    "start": "657480",
    "end": "661760"
  },
  {
    "text": "conversation so unicorn overflows were great it's a cool technique but I needed more methods to generate blocked",
    "start": "662680",
    "end": "669399"
  },
  {
    "text": "characters so I took a deep dive into the Glorious RFC looking for gold and I",
    "start": "669399",
    "end": "674639"
  },
  {
    "text": "found it this next section is about encoded word I discovered this when trying to",
    "start": "674639",
    "end": "681680"
  },
  {
    "text": "find ways of generating the art symbol without Unicode overflows encoded word is specified in r",
    "start": "681680",
    "end": "689399"
  },
  {
    "text": "C 2047 and it allows the inclusion of Unicode characters using encoded",
    "start": "689399",
    "end": "697240"
  },
  {
    "text": "data and this is how encoded word Works equals and question mark indicate",
    "start": "698079",
    "end": "705560"
  },
  {
    "text": "the start of the encoded word following that is the character encoding in this case",
    "start": "705560",
    "end": "713800"
  },
  {
    "text": "utf8 the question marks act as separators between the encoding type on",
    "start": "713800",
    "end": "720160"
  },
  {
    "text": "the on the character set inside the separators is the",
    "start": "720160",
    "end": "725639"
  },
  {
    "text": "encoding type in this case Q encoding after that is the hex encoded",
    "start": "725639",
    "end": "733120"
  },
  {
    "text": "uh data so equals 41 represents the uppercase character a question mark and",
    "start": "733120",
    "end": "743839"
  },
  {
    "text": "equals and the encoded word what once the email has been passed",
    "start": "743880",
    "end": "750839"
  },
  {
    "text": "by the email passing Library the encoded characters will be converted and the",
    "start": "750839",
    "end": "756480"
  },
  {
    "text": "encoded word meta characters will be removed and then it gets sent to that following email address pretty damn",
    "start": "756480",
    "end": "764880"
  },
  {
    "text": "crazy to probe for encoded word you should make two requests with these two Chets the reason",
    "start": "765120",
    "end": "772839"
  },
  {
    "text": "for this is because different email passing libraries support different Char",
    "start": "772839",
    "end": "777880"
  },
  {
    "text": "sets when probing you should use lowercase characters to uh detect if the site",
    "start": "777880",
    "end": "785320"
  },
  {
    "text": "rejects or transforms to lower case initially I was using X as the Char set",
    "start": "785320",
    "end": "791720"
  },
  {
    "text": "um to reduce the size of the probe however this this will be rejected on some systems um so it's better to use",
    "start": "791720",
    "end": "799560"
  },
  {
    "text": "these two probs and then follow up with X as a Char set if it works if successful you should get an email to",
    "start": "799560",
    "end": "806279"
  },
  {
    "text": "the emails displayed in a real probe you would probably use a collaborator payload or a similar I've highlighted",
    "start": "806279",
    "end": "813199"
  },
  {
    "text": "the encoded and decoded text in",
    "start": "813199",
    "end": "817839"
  },
  {
    "text": "Red so we've covered how incord word works now let's dive into some real",
    "start": "820360",
    "end": "826440"
  },
  {
    "text": "world case studies the following case studies all use Ruby mail um which is a",
    "start": "826440",
    "end": "832199"
  },
  {
    "text": "ruby Library which has over 8 million downloads at the time of testing the",
    "start": "832199",
    "end": "838360"
  },
  {
    "text": "version was 2.8.1 this library is used by many popular Ruby applications including",
    "start": "838360",
    "end": "845560"
  },
  {
    "text": "GitHub zenes gitlab and bu",
    "start": "845560",
    "end": "850360"
  },
  {
    "text": "crowd for my first case study I'm going to show how I exploited gitlab",
    "start": "850720",
    "end": "856720"
  },
  {
    "text": "Enterprise so first you can use uh X as a Cho set as GI gitlab in this",
    "start": "856720",
    "end": "864360"
  },
  {
    "text": "particular instance didn't care about it I could then use an encoded at symbol",
    "start": "864360",
    "end": "870880"
  },
  {
    "text": "and then I used uh an underscore character which in encoded word is treated as a space so you can use a hex",
    "start": "870880",
    "end": "877880"
  },
  {
    "text": "encoded equals 20 as a space or the underscore character and then what",
    "start": "877880",
    "end": "883320"
  },
  {
    "text": "happens is the email gets split in half um",
    "start": "883320",
    "end": "888600"
  },
  {
    "text": "so uh gitlab thinks the domain is example.com but it actually gets sent to",
    "start": "888600",
    "end": "896399"
  },
  {
    "text": "results in an email to clab",
    "start": "899120",
    "end": "903320"
  },
  {
    "text": "psr.exe servers that had domain-based email",
    "start": "914839",
    "end": "920639"
  },
  {
    "text": "restrictions to understand the next set of slides let's have a quick recap on",
    "start": "922000",
    "end": "927399"
  },
  {
    "text": "how an email is sent at the SMTP level there is a conversation in handshake",
    "start": "927399",
    "end": "932440"
  },
  {
    "text": "between the mailer and the SMTP client uh it does the handshake but the important part for this is the receipt",
    "start": "932440",
    "end": "939360"
  },
  {
    "text": "to command you'll notice the uh the email is in Clause with angle brackets",
    "start": "939360",
    "end": "946440"
  },
  {
    "text": "we're going to abuse these in the next slides so gitlab is also an IDP so I",
    "start": "946440",
    "end": "955199"
  },
  {
    "text": "exploited the email verification so this is separate from the Enterprise Products",
    "start": "955199",
    "end": "960720"
  },
  {
    "text": "because they use PST fix by default so I used X on the slide but you",
    "start": "960720",
    "end": "966959"
  },
  {
    "text": "need to use that following CH set um because um it wouldn't fit on the slide",
    "start": "966959",
    "end": "972040"
  },
  {
    "text": "and gitlab uh will reject any unknown character set so you need to use that Char",
    "start": "972040",
    "end": "978040"
  },
  {
    "text": "set I then used an encoded at symbol",
    "start": "978040",
    "end": "983079"
  },
  {
    "text": "again and this time this is the interesting part you can use an encoded",
    "start": "983079",
    "end": "988920"
  },
  {
    "text": "greater than symbol as as I showed you on the previous slide with the receipt two command um and this allows you to",
    "start": "988920",
    "end": "996720"
  },
  {
    "text": "ignore the rest of the address provided you've got a space so uh the greater",
    "start": "996720",
    "end": "1002880"
  },
  {
    "text": "than symbol is um used I use an encoded space and then the email is sent to PS",
    "start": "1002880",
    "end": "1010079"
  },
  {
    "text": "res.net while gitlab thinks the domain is example.com",
    "start": "1010079",
    "end": "1015720"
  },
  {
    "text": "using this book I could bypass domain-based access controls who used",
    "start": "1019160",
    "end": "1024160"
  },
  {
    "text": "websites uh uh on on websites that support gitlab as an IDP this screenshot",
    "start": "1024160",
    "end": "1031199"
  },
  {
    "text": "shows um that I've got verified domains from mofcom gitlab.com Etc I could",
    "start": "1031199",
    "end": "1037678"
  },
  {
    "text": "verify any domain this next technique is a more",
    "start": "1037679",
    "end": "1044400"
  },
  {
    "text": "complex attack that works on zenes and it uses the quoted local part with",
    "start": "1044400",
    "end": "1051160"
  },
  {
    "text": "encoded quotes first we use a quoted local part with the double",
    "start": "1051160",
    "end": "1058200"
  },
  {
    "text": "quote then we use the Q encoded double quote so that's a he hex escape double",
    "start": "1058200",
    "end": "1066960"
  },
  {
    "text": "quote followed by an at symbol next we have a greater land",
    "start": "1066960",
    "end": "1073440"
  },
  {
    "text": "character to finish the receipt two command as I showed earlier and after that this time I use a null",
    "start": "1073440",
    "end": "1080039"
  },
  {
    "text": "character um and I use this to ignore the rest of the",
    "start": "1080039",
    "end": "1085480"
  },
  {
    "text": "address due to the quirks of the mailer the validation that zenes Ed I had to",
    "start": "1085480",
    "end": "1091919"
  },
  {
    "text": "use an encoded an encoded less than and double",
    "start": "1091919",
    "end": "1097880"
  },
  {
    "text": "quote um this was removed by um the zenes uh validation and",
    "start": "1097880",
    "end": "1106200"
  },
  {
    "text": "paring then I finished the quoted local part and the email actually gets to gets",
    "start": "1106200",
    "end": "1112400"
  },
  {
    "text": "sent to collab ps.net it's absolutely insane really how this works so yeah",
    "start": "1112400",
    "end": "1120120"
  },
  {
    "text": "what happens is all this gets decoded and zenes removes the quoted local part",
    "start": "1120120",
    "end": "1127720"
  },
  {
    "text": "because it's trying to make sure it um it doesn't bypass its validation or whatever and then it it removes all the",
    "start": "1127720",
    "end": "1133880"
  },
  {
    "text": "characters and then sends that email address whereas zenes still thinks it's example.com",
    "start": "1133880",
    "end": "1141360"
  },
  {
    "text": "so the impact of this was attackers could verify uh email addresses from",
    "start": "1141600",
    "end": "1148200"
  },
  {
    "text": "domains they don't control which means you could get access to zenes email",
    "start": "1148200",
    "end": "1153440"
  },
  {
    "text": "domain protected support",
    "start": "1153440",
    "end": "1157000"
  },
  {
    "text": "centers GitHub were also vulnerable to the greater than and null attack that",
    "start": "1158520",
    "end": "1163760"
  },
  {
    "text": "I've previously demonstrated so first I created an encoded out symbol again",
    "start": "1163760",
    "end": "1169600"
  },
  {
    "text": "then I used an encoded greater than to end the receipt 2 conversation then you can use an encoded",
    "start": "1169600",
    "end": "1176280"
  },
  {
    "text": "null and then the rest of the address will be ignored which results in the",
    "start": "1176280",
    "end": "1181919"
  },
  {
    "text": "following email so yeah it's pretty damn crazy to",
    "start": "1181919",
    "end": "1187400"
  },
  {
    "text": "think people will trust git uh github's email validation uh you really need to",
    "start": "1187400",
    "end": "1193200"
  },
  {
    "text": "verify that before you use it so using this technique I was able to",
    "start": "1193200",
    "end": "1198840"
  },
  {
    "text": "verify any domain I liked on GitHub and I had verified emails from mill.com github.com and",
    "start": "1198840",
    "end": "1207320"
  },
  {
    "text": "microsoft.com by spoofing email domains on GitHub I could verify addresses from",
    "start": "1209799",
    "end": "1216000"
  },
  {
    "text": "domains I don't control this allows me to bypass domain-based access controls",
    "start": "1216000",
    "end": "1222080"
  },
  {
    "text": "on websites that use GitHub as an ident identity provider for example I could",
    "start": "1222080",
    "end": "1228120"
  },
  {
    "text": "penetrate internal networks prot protected by Cloud flare zero trust",
    "start": "1228120",
    "end": "1233280"
  },
  {
    "text": "configured with uh email domain validation this screenshot shows Cloud",
    "start": "1233280",
    "end": "1238880"
  },
  {
    "text": "flare zero trust trusting email domains from github.com and since any domain can",
    "start": "1238880",
    "end": "1244799"
  },
  {
    "text": "be spoof this affects all zero trust instances that use email domain",
    "start": "1244799",
    "end": "1250400"
  },
  {
    "text": "validation so don't solely use email email domain",
    "start": "1250400",
    "end": "1256639"
  },
  {
    "text": "validation as I always testing multiple ruby libraries I discovered you can also use base 64 encoded email addresses",
    "start": "1257120",
    "end": "1265440"
  },
  {
    "text": "because why not right we need this what could possibly go wrong in this",
    "start": "1265440",
    "end": "1271039"
  },
  {
    "text": "example I the B indicates the start of the encoded word type so this is um this",
    "start": "1271039",
    "end": "1278440"
  },
  {
    "text": "signifies a b 64 encoded type in encoded",
    "start": "1278440",
    "end": "1283520"
  },
  {
    "text": "word then we've got a B 64 um encoded",
    "start": "1283520",
    "end": "1288600"
  },
  {
    "text": "address so in this instance I'm encoded fuar but it works with any character I've just used Fubar as an",
    "start": "1288600",
    "end": "1295000"
  },
  {
    "text": "example and that results in an email to that address so that you can embed our",
    "start": "1295000",
    "end": "1302120"
  },
  {
    "text": "arbitary characters whatever you like in the B 64 encoded uh email",
    "start": "1302120",
    "end": "1308400"
  },
  {
    "text": "part anyone remember this this is a",
    "start": "1308400",
    "end": "1313640"
  },
  {
    "text": "utf-7 encoded script block that used to work in iie I loved",
    "start": "1313640",
    "end": "1321440"
  },
  {
    "text": "utf-7 surely uh the email paring libraries won't allow you to use utf-7",
    "start": "1322080",
    "end": "1328760"
  },
  {
    "text": "charet of course they do using the Ruby Library mail here is a utf-7 encoded",
    "start": "1328760",
    "end": "1336720"
  },
  {
    "text": "address so this is an encoded a utf-7 encoded food bar and the Cho set will be",
    "start": "1336720",
    "end": "1344200"
  },
  {
    "text": "decoded and it will be sent to that email address I know know what you're thinking or maybe it's just me but yes",
    "start": "1344200",
    "end": "1352360"
  },
  {
    "text": "you can use a utf-7 address and a b64 encoded address within one",
    "start": "1352360",
    "end": "1359159"
  },
  {
    "text": "email in this example there is a b 64 address with a UTF 7",
    "start": "1359159",
    "end": "1365279"
  },
  {
    "text": "charet so first the uh email passer will decode the base",
    "start": "1365279",
    "end": "1370960"
  },
  {
    "text": "64 then the email parer will decode the utf-7 absolute",
    "start": "1370960",
    "end": "1377240"
  },
  {
    "text": "insanity and that results in an email to Fu Fubar",
    "start": "1377240",
    "end": "1384159"
  },
  {
    "text": "psr.exe arbitary characters it's just not restricted to um alpha numeric",
    "start": "1392640",
    "end": "1401278"
  },
  {
    "text": "characters then I thought what about a mixture of ut7 and Q encoding so so here",
    "start": "1402159",
    "end": "1409159"
  },
  {
    "text": "I'm going to modify the a character so I'm going to encod it with equals 41 as",
    "start": "1409159",
    "end": "1415840"
  },
  {
    "text": "hex and then this gets decoded in the second",
    "start": "1415840",
    "end": "1421120"
  },
  {
    "text": "level so then it gets treated as a you as a Bas 64 um oh sorry as a utf-7",
    "start": "1421120",
    "end": "1427360"
  },
  {
    "text": "encoded address B 64 and UTF 7 similar anywh but um the the the first part is",
    "start": "1427360",
    "end": "1434720"
  },
  {
    "text": "an encoded Q encoded equals 41 it gets de recorded and then that's a UTF 7",
    "start": "1434720",
    "end": "1441120"
  },
  {
    "text": "address uh uh triet which gets decoded and the email gets sent to F Fubar",
    "start": "1441120",
    "end": "1449200"
  },
  {
    "text": "ps.net at this point um you might have a few doubts about following the RFC to",
    "start": "1449200",
    "end": "1454919"
  },
  {
    "text": "the letter especially when I tell you that this works in the domain part when I tested the mail Library I know what",
    "start": "1454919",
    "end": "1462679"
  },
  {
    "text": "you're thinking nobody is going to support utf-7 encoded emails",
    "start": "1462679",
    "end": "1469440"
  },
  {
    "text": "uh well it worked on a small source code hosting website called uh GitHub I was I",
    "start": "1469440",
    "end": "1475399"
  },
  {
    "text": "was gooded I didn't exploit them with this because I'd already exploited them earlier so it would have been nice to have a utf-7 exploit but who cares",
    "start": "1475399",
    "end": "1483720"
  },
  {
    "text": "anyway so after that um I went hunting for encoded word outside of Ruby and I",
    "start": "1483720",
    "end": "1491240"
  },
  {
    "text": "found that PHP mailer uh supports encoded word within the name of the",
    "start": "1491240",
    "end": "1497240"
  },
  {
    "text": "recipient I tried exploiting WordPress and other applications but the requirement of of needing angle brackets",
    "start": "1497240",
    "end": "1505320"
  },
  {
    "text": "around the email made exploitation difficult still I bet there are a lot of",
    "start": "1505320",
    "end": "1510559"
  },
  {
    "text": "systems uh out there that reflect the name um and then they could be exploited",
    "start": "1510559",
    "end": "1515720"
  },
  {
    "text": "for xss for example so it's worth having a go trying to see if the name part of",
    "start": "1515720",
    "end": "1522640"
  },
  {
    "text": "the recipient um can be decoded",
    "start": "1522640",
    "end": "1528000"
  },
  {
    "text": "so we've already explored how you can manipulate email parsing to sidestep",
    "start": "1529279",
    "end": "1535080"
  },
  {
    "text": "access controls but let's take things a stage further what if you could weaponize an",
    "start": "1535080",
    "end": "1541799"
  },
  {
    "text": "email address to gain remote code execution well in this next section we'll cover Punic cord attacks and how I",
    "start": "1541799",
    "end": "1549440"
  },
  {
    "text": "exploited Juma Punic cord is a way to represent",
    "start": "1549440",
    "end": "1557000"
  },
  {
    "text": "unicord characters in the current DNS system Punic Cod always starts with xn",
    "start": "1557000",
    "end": "1563000"
  },
  {
    "text": "and is followed by two hyphens the algorithm converts the sequence of unicord characters into a representation",
    "start": "1563000",
    "end": "1570640"
  },
  {
    "text": "that utilizes only Al alpha numeric characters and hyphens for example the",
    "start": "1570640",
    "end": "1576640"
  },
  {
    "text": "domain muchin as shown um is encoded with the following Punic cord",
    "start": "1576640",
    "end": "1582240"
  },
  {
    "text": "sequence the very nature of how Punic cord Works makes it difficult to test because if you change one character it",
    "start": "1582240",
    "end": "1589600"
  },
  {
    "text": "can affect the output and and the character position due to how the algorithm Works what you want to do is",
    "start": "1589600",
    "end": "1596760"
  },
  {
    "text": "generate malicious characters that when de when it's decoded but doing that is a",
    "start": "1596760",
    "end": "1601880"
  },
  {
    "text": "really big challenge in these examples you can see the position of the unicor",
    "start": "1601880",
    "end": "1607919"
  },
  {
    "text": "character changes when one bite is modified so you can see the Unicode characters moving along as you change",
    "start": "1607919",
    "end": "1614559"
  },
  {
    "text": "one bite so after reading um about Punic",
    "start": "1614559",
    "end": "1620600"
  },
  {
    "text": "cord on Wikipedia I went I followed a link and uh began testing on an online",
    "start": "1620600",
    "end": "1626799"
  },
  {
    "text": "punicode converter and began to experiment the converter used the Boogie",
    "start": "1626799",
    "end": "1632919"
  },
  {
    "text": "idn PHP Library I started adding zeros to the beginning of the Punic code",
    "start": "1632919",
    "end": "1639120"
  },
  {
    "text": "address to convert it into asky characters I initially succeeded in generating a comma which I was so",
    "start": "1639120",
    "end": "1646080"
  },
  {
    "text": "surprised I doubted my eyes encouraged by this I started to experiment a bit",
    "start": "1646080",
    "end": "1651240"
  },
  {
    "text": "further and produce the art symbol so here you can see the um Punic Cod",
    "start": "1651240",
    "end": "1657679"
  },
  {
    "text": "address on the left and the decoded address is on the",
    "start": "1657679",
    "end": "1662799"
  },
  {
    "text": "right so after searching GitHub I found an interesting Target using this Library",
    "start": "1663320",
    "end": "1669440"
  },
  {
    "text": "jumer this was great because if I got xss then I have rce doing um source code",
    "start": "1669440",
    "end": "1676279"
  },
  {
    "text": "analysis I noticed there were escaping the user's email address before it was",
    "start": "1676279",
    "end": "1681480"
  },
  {
    "text": "Punic code decoded this means if I could produce some malform Punic code that",
    "start": "1681480",
    "end": "1686679"
  },
  {
    "text": "when decoding produces HTML I could get xss but it wouldn't be that",
    "start": "1686679",
    "end": "1693600"
  },
  {
    "text": "easy so here I'm displaying the they've escaped the um email first but then",
    "start": "1693600",
    "end": "1702200"
  },
  {
    "text": "Punic code decoded so this is why it works you get some Malone Punic code and",
    "start": "1702200",
    "end": "1707440"
  },
  {
    "text": "then uh um you'll get some U malicious characters out so it sounds simple just give the",
    "start": "1707440",
    "end": "1714799"
  },
  {
    "text": "decoder some mou on Punic code generate some HTML but remember how the algorithm",
    "start": "1714799",
    "end": "1721080"
  },
  {
    "text": "Works any change in the character can result in a completely different output",
    "start": "1721080",
    "end": "1726279"
  },
  {
    "text": "I thought this was a job for a fuzzer so I just wrote a simple fuzzer to generate Malone Punic code and the results were",
    "start": "1726279",
    "end": "1734399"
  },
  {
    "text": "really interesting I found many ways to generate different characters so on the",
    "start": "1734399",
    "end": "1740559"
  },
  {
    "text": "right you can see what I'm trying to do here I'm trying to generate an SVG tag and then maybe an event maybe quarts",
    "start": "1740559",
    "end": "1746320"
  },
  {
    "text": "that sort of stuff so I started generating millions of different character combinations I",
    "start": "1746320",
    "end": "1753080"
  },
  {
    "text": "managed to construct partial xss vectors but I encountered several",
    "start": "1753080",
    "end": "1758240"
  },
  {
    "text": "issues I could only generate two asy characters by using more than one Punic",
    "start": "1758240",
    "end": "1763600"
  },
  {
    "text": "con subdomain this limitation arose from the specific workings of the Punic code",
    "start": "1763600",
    "end": "1770320"
  },
  {
    "text": "algorithm PHP and the quirks of the PHP IDM Library as you can see in the",
    "start": "1770320",
    "end": "1776840"
  },
  {
    "text": "examples I was really close um but these problems made exploiting Juma very",
    "start": "1776840",
    "end": "1782799"
  },
  {
    "text": "difficult I concluded that xss was not feasible because although I was able to",
    "start": "1782799",
    "end": "1788120"
  },
  {
    "text": "generate a single quoted attribute it required an underscore character dumler",
    "start": "1788120",
    "end": "1793960"
  },
  {
    "text": "however does not permit underscore characters in The Domain part of the email address",
    "start": "1793960",
    "end": "1800039"
  },
  {
    "text": "so was that the end of the story well not quite I thought about this for a while and I worked out that you could",
    "start": "1800679",
    "end": "1807519"
  },
  {
    "text": "use a single Punic Cod subdomain and then you could generate any opening tag",
    "start": "1807519",
    "end": "1813559"
  },
  {
    "text": "eventually after a lot of testings I concluded that the only exploitable",
    "start": "1813559",
    "end": "1819480"
  },
  {
    "text": "Vector was an opening style tag here I use Mal for Punic cord to construct it",
    "start": "1819480",
    "end": "1825360"
  },
  {
    "text": "this is not a test string that's the actual value so the pical library decodes that as a",
    "start": "1825360",
    "end": "1830919"
  },
  {
    "text": "style tag what happens um with the injection",
    "start": "1830919",
    "end": "1837600"
  },
  {
    "text": "is the rest of the pre-existing dumler HTML cord would add the space and the",
    "start": "1837600",
    "end": "1843480"
  },
  {
    "text": "angle bracket for me so you can see the Malone Punic cord is added to the output",
    "start": "1843480",
    "end": "1849080"
  },
  {
    "text": "and the TD tag in the dumler cord will add the greater than for me so you've",
    "start": "1849080",
    "end": "1854200"
  },
  {
    "text": "got a valid T well a valid style tag uh and this will work fine um in",
    "start": "1854200",
    "end": "1862320"
  },
  {
    "text": "jumer so i' need two accounts the first creates a style tag with the m uh the Malone Punic code AS previously",
    "start": "1862639",
    "end": "1869919"
  },
  {
    "text": "demonstrated the second account contains the actual CSS payload which is inside",
    "start": "1869919",
    "end": "1876240"
  },
  {
    "text": "the name field of the user and that Imports the malicious Styles sheet the first account name starts with an A",
    "start": "1876240",
    "end": "1883000"
  },
  {
    "text": "because I want that one to go first and the second one starts with X so the uh import gets done second um this is to",
    "start": "1883000",
    "end": "1890919"
  },
  {
    "text": "ensure it starts first and then second if you notice the curly braces um this",
    "start": "1890919",
    "end": "1896679"
  },
  {
    "text": "is because um all the rest of the HTML is treated as an invalid selector",
    "start": "1896679",
    "end": "1903159"
  },
  {
    "text": "because why not this is CSS so like all the HTML that occurs before the",
    "start": "1903159",
    "end": "1908480"
  },
  {
    "text": "injection will be treated as an invalid selector and completely ignored and in Chrome they fix this by using strict MIM",
    "start": "1908480",
    "end": "1916399"
  },
  {
    "text": "type stylesheets um but with the style tag this does not apply this is why it",
    "start": "1916399",
    "end": "1923360"
  },
  {
    "text": "works so as I said the first step is to is for an attacker to register two accounts the First with the malicious",
    "start": "1924240",
    "end": "1931200"
  },
  {
    "text": "Punic code and the second with the evil embedded CSS in the name so all all",
    "start": "1931200",
    "end": "1937320"
  },
  {
    "text": "that's required is two accounts and jomer does not um you don't even need to approve these accounts in order to",
    "start": "1937320",
    "end": "1945880"
  },
  {
    "text": "exploit so the attacker uses import chaining and a custom node-based CSS",
    "start": "1946039",
    "end": "1951399"
  },
  {
    "text": "exfiltrated server to quickly exfiltrate the c c token when the admin visits the",
    "start": "1951399",
    "end": "1957960"
  },
  {
    "text": "users page you've got persistent style injection so the militia CSS is loaded",
    "start": "1957960",
    "end": "1963559"
  },
  {
    "text": "and then the token is extracted and this screenshot demonstrates extracting the",
    "start": "1963559",
    "end": "1970200"
  },
  {
    "text": "token using the exfiltrated token the attacker then uses the CSS exfiltrated",
    "start": "1970880",
    "end": "1977519"
  },
  {
    "text": "and gives the admin a URL that performs a C- surf attack and then modifies the",
    "start": "1977519",
    "end": "1982799"
  },
  {
    "text": "admin template to get rce so this is the attack flow once the token's been ex",
    "start": "1982799",
    "end": "1990000"
  },
  {
    "text": "extracted I'm actually going to demo this now um James convinced me to do a",
    "start": "1990000",
    "end": "1995559"
  },
  {
    "text": "live demo so here let's give it a shot",
    "start": "1995559",
    "end": "2002559"
  },
  {
    "text": "so first we have got the xil trator server",
    "start": "2003000",
    "end": "2008480"
  },
  {
    "text": "this is going to be damn tricky right so uh the uh victim the admin is on the",
    "start": "2008480",
    "end": "2017519"
  },
  {
    "text": "left the the left browser the attacker is on the right so the attacker's first step is to inject all the uh the",
    "start": "2017519",
    "end": "2025720"
  },
  {
    "text": "malicious uh Punic code um so I'm registering One account with the malicious Punic code so I get an error",
    "start": "2025720",
    "end": "2032159"
  },
  {
    "text": "because I haven't configured mail obviously but we don't need mail um and then the attacker then registers a",
    "start": "2032159",
    "end": "2038519"
  },
  {
    "text": "second count account in the name so that contains the um",
    "start": "2038519",
    "end": "2043960"
  },
  {
    "text": "styles so we register the second account cool so far so good and then this is the",
    "start": "2043960",
    "end": "2051599"
  },
  {
    "text": "CSS X filtrat running on a nod uh server um so",
    "start": "2051599",
    "end": "2058398"
  },
  {
    "text": "now ah not a lot of room to be honest hang on there we go so now the",
    "start": "2058399",
    "end": "2066839"
  },
  {
    "text": "admin visits the admin page and then logs in and then we go to the users",
    "start": "2066839",
    "end": "2076560"
  },
  {
    "text": "page and the XEL traed token is extracted from this persistent style um",
    "start": "2077520",
    "end": "2083878"
  },
  {
    "text": "injection and then we we start to talk to the admin now hi admin how you doing I'm doing",
    "start": "2083879",
    "end": "2091320"
  },
  {
    "text": "great how are you living the dream Etc uh so they're just going to click on the link",
    "start": "2091320",
    "end": "2098480"
  },
  {
    "text": "the link then applies this back door if you can see the code there you can see the back door it just checks the get",
    "start": "2098480",
    "end": "2104079"
  },
  {
    "text": "parameter and then Cuts Etc password and then the attacker visits that back door",
    "start": "2104079",
    "end": "2110280"
  },
  {
    "text": "and we've got rce woohoo thank",
    "start": "2110280",
    "end": "2116359"
  },
  {
    "text": "you so when conducting this email parsing research I found it useful to",
    "start": "2123280",
    "end": "2128520"
  },
  {
    "text": "follow the following methodology probe observe encode exploit first you probe",
    "start": "2128520",
    "end": "2134280"
  },
  {
    "text": "for encoded word observe the decoded email um to confirm that it's supported",
    "start": "2134280",
    "end": "2140400"
  },
  {
    "text": "then encode the various characters and observe that they are decoded then follow up with an exploit that abuses",
    "start": "2140400",
    "end": "2146839"
  },
  {
    "text": "these characters I've done a little example of the following the methodology there um so in this case I'm trying to",
    "start": "2146839",
    "end": "2153960"
  },
  {
    "text": "uh see if uh Q encoding is supported",
    "start": "2153960",
    "end": "2159240"
  },
  {
    "text": "um so hack verter is a free open source tool that I've wrote for Burpy I've crafted some hack verta tags to help",
    "start": "2159839",
    "end": "2166720"
  },
  {
    "text": "generate Unicode overflows and encoded uh word attacks easily from within burp",
    "start": "2166720",
    "end": "2172640"
  },
  {
    "text": "turbo Intruder is another free burp extension written by jmes Kettle I've",
    "start": "2172640",
    "end": "2177839"
  },
  {
    "text": "created the turbo Intruder script to help exploit the mailer this script is used once you identified that the",
    "start": "2177839",
    "end": "2185200"
  },
  {
    "text": "encoded word is supported but you want to know what characters can exploit the",
    "start": "2185200",
    "end": "2190400"
  },
  {
    "text": "mailer like null for example space whatever for ease of use we've also",
    "start": "2190400",
    "end": "2196359"
  },
  {
    "text": "built this into a burp Intruder word list I've also created a Punic cord",
    "start": "2196359",
    "end": "2202000"
  },
  {
    "text": "fuzzer that can help Mal find Malone Punic code the fuzzer works with you",
    "start": "2202000",
    "end": "2207119"
  },
  {
    "text": "just give it some Punic code input and then add the placeholders and it does some uh it has like random substitutions",
    "start": "2207119",
    "end": "2214200"
  },
  {
    "text": "and characters in Whit space it was really effective in finding um what",
    "start": "2214200",
    "end": "2219560"
  },
  {
    "text": "characters were allowed with Malone Punic code to defend against email splitting",
    "start": "2219560",
    "end": "2225839"
  },
  {
    "text": "attacks uh just make sure you filter out or disable encoded word always verify",
    "start": "2225839",
    "end": "2231560"
  },
  {
    "text": "email addresses before using them even when received from an SSO provider after",
    "start": "2231560",
    "end": "2237079"
  },
  {
    "text": "validating the email address do not use the domain as a sole means of authorization that's my",
    "start": "2237079",
    "end": "2245119"
  },
  {
    "text": "advice a few blog posts were really inspirational when conducting This research uh I really recommend you read",
    "start": "2245119",
    "end": "2252200"
  },
  {
    "text": "each one because they contain really useful information the import chaining technique is uh that I used to",
    "start": "2252200",
    "end": "2258400"
  },
  {
    "text": "exfiltrate the Token is from Pet Villa and donor if you enjoyed this presentation",
    "start": "2258400",
    "end": "2264880"
  },
  {
    "text": "you might also like my colleague Martin who's um doing a talk on webcash uh",
    "start": "2264880",
    "end": "2270240"
  },
  {
    "text": "deception and webcash poisoning and it starts at 10:20",
    "start": "2270240",
    "end": "2275280"
  },
  {
    "text": "tomorrow so the three takeaways I want to leave you with are valid email",
    "start": "2275280",
    "end": "2280319"
  },
  {
    "text": "addresses can trigger major parts of discrepancies even addresses that ending",
    "start": "2280319",
    "end": "2287160"
  },
  {
    "text": "at example.com might go elsewhere as a result it's never safe to use email",
    "start": "2287160",
    "end": "2294000"
  },
  {
    "text": "domains for Access Control enforcement we've created a web security",
    "start": "2294000",
    "end": "2300920"
  },
  {
    "text": "CTF to help practice your skills your email splitting skills I've also for",
    "start": "2300920",
    "end": "2306000"
  },
  {
    "text": "your convenience created a do file with the vulnerable version of jumer so you can try this uh these attacks out for",
    "start": "2306000",
    "end": "2313000"
  },
  {
    "text": "yourself you can get all the links and all the materials from this talk on our G GitHub",
    "start": "2313000",
    "end": "2319280"
  },
  {
    "text": "repository thank you so much any [Applause]",
    "start": "2319280",
    "end": "2330359"
  },
  {
    "text": "questions yeah",
    "start": "2330359",
    "end": "2334359"
  },
  {
    "text": "uh so the question was do did I get any backstory of why the RSC allows this",
    "start": "2340839",
    "end": "2346800"
  },
  {
    "text": "nons nonsense um I think it's mainly to support um like accent characters like",
    "start": "2346800",
    "end": "2352839"
  },
  {
    "text": "Spanish accent characters that sort of thing that's that's my take on where it comes from but yeah it's absolutely",
    "start": "2352839",
    "end": "2360240"
  },
  {
    "text": "insane no not not utf-7 so like I was specifically talking about um encoded",
    "start": "2362240",
    "end": "2368599"
  },
  {
    "text": "word um but yeah you could have like Unicode characters embedded in utf-7 I",
    "start": "2368599",
    "end": "2373640"
  },
  {
    "text": "suppose but why they would need utf-7 as a Char set in an email I have no",
    "start": "2373640",
    "end": "2381200"
  },
  {
    "text": "idea have you spoken to RFC authors or the internet mail Consortium uh no I",
    "start": "2382760",
    "end": "2389319"
  },
  {
    "text": "haven't um sorry I can't see where you right oh no I haven't I haven't spoken",
    "start": "2389319",
    "end": "2395200"
  },
  {
    "text": "to them no um but yeah yeah somebody really",
    "start": "2395200",
    "end": "2400040"
  },
  {
    "text": "should test test cool thank you one more question oh",
    "start": "2401160",
    "end": "2406960"
  },
  {
    "text": "yeah on the left left here oh yeah could you quickly",
    "start": "2406960",
    "end": "2414359"
  },
  {
    "text": "speculate where else you might find this issue like email clients search",
    "start": "2414359",
    "end": "2420200"
  },
  {
    "text": "validation CC thank you so so the question was where else",
    "start": "2420200",
    "end": "2426760"
  },
  {
    "text": "might you find this this issue where else um file uploads that sort of thing",
    "start": "2426760",
    "end": "2433520"
  },
  {
    "text": "maybe uh maybe um May maybe you could use it within the",
    "start": "2433520",
    "end": "2440880"
  },
  {
    "text": "name part of the uh recipient as well so I think like when when an email gets",
    "start": "2440880",
    "end": "2447520"
  },
  {
    "text": "sent from Google to somewhere else um and they decode that data and then it",
    "start": "2447520",
    "end": "2453599"
  },
  {
    "text": "gets somewhere sent somewhere else and you maybe you could potentially exploit that in some way so yeah that's one",
    "start": "2453599",
    "end": "2459800"
  },
  {
    "text": "potential explo thank you I didn't even try xss by the way because I'm bored of",
    "start": "2459800",
    "end": "2465240"
  },
  {
    "text": "it really um I have another one yeah on the",
    "start": "2465240",
    "end": "2471800"
  },
  {
    "text": "right um has have these vulnerabilities in GitHub and um Cloud Fair been fixed",
    "start": "2471800",
    "end": "2479319"
  },
  {
    "text": "uh yes so GitHub have have fixed it um Cloud flare was not reported as a bug",
    "start": "2479319",
    "end": "2485400"
  },
  {
    "text": "because it wasn't a bug it was a bug in um the way that GitHub validate their emails um",
    "start": "2485400",
    "end": "2492200"
  },
  {
    "text": "so if Cloud flare want to just uh use email domain validation I can't really",
    "start": "2492200",
    "end": "2498000"
  },
  {
    "text": "point that as a bug because that's just what they do um but uh GitHub had fixed",
    "start": "2498000",
    "end": "2504760"
  },
  {
    "text": "um you can't verify emails using the techniques I've shown on this uh on slides thank you wor",
    "start": "2504760",
    "end": "2515000"
  },
  {
    "text": "and cool thanks thank",
    "start": "2515040",
    "end": "2522440"
  }
]