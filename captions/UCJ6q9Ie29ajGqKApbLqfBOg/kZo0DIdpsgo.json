[
  {
    "text": "[Music]",
    "start": "570",
    "end": "7460"
  },
  {
    "text": "welcome to black hat briefings held November 21st through the 22nd 2001 in Amsterdam this is videotape number 2B a",
    "start": "22160",
    "end": "31960"
  },
  {
    "text": "uation the problem and it was a bit subtle um the problem was the first four",
    "start": "36239",
    "end": "42200"
  },
  {
    "text": "bytes of the second buffer may not be characters there's a check which I had",
    "start": "42200",
    "end": "48680"
  },
  {
    "text": "overseen so um basically that's the reason why it sometimes worked and",
    "start": "48680",
    "end": "53719"
  },
  {
    "text": "sometimes didn't I just have to put numbers there and then I can write to an arbitrary location",
    "start": "53719",
    "end": "59960"
  },
  {
    "text": "okay so as we have lots of stuff to go over",
    "start": "60280",
    "end": "65518"
  },
  {
    "text": "in the second half I'll not waste too much time on",
    "start": "65519",
    "end": "69880"
  },
  {
    "text": "this well here you are I'll try to make this as short as",
    "start": "71560",
    "end": "79840"
  },
  {
    "text": "possible here we are we in B and C",
    "start": "80560",
    "end": "86159"
  },
  {
    "text": "again we enter 32 bytes thus overriding the lowest order bite of the control",
    "start": "86159",
    "end": "91759"
  },
  {
    "text": "structure with a null then we do not enter a a a a",
    "start": "91759",
    "end": "98640"
  },
  {
    "text": "here and then we enter some value here and we",
    "start": "98640",
    "end": "105040"
  },
  {
    "text": "enter some value to be written here properties",
    "start": "105280",
    "end": "111640"
  },
  {
    "text": "of hm there should have been a breako which is disabled okay",
    "start": "111640",
    "end": "119320"
  },
  {
    "text": "9999 uncore uncore uncore I I I I so if I hit enter now we land in the",
    "start": "129200",
    "end": "137080"
  },
  {
    "text": "small D allocator again and there are a few special",
    "start": "137080",
    "end": "144000"
  },
  {
    "text": "properties um that apply here of course the address where we write to should be",
    "start": "144000",
    "end": "149160"
  },
  {
    "text": "paged underscore underscore underscore is not paged so um I would like to",
    "start": "149160",
    "end": "154280"
  },
  {
    "text": "supply a paged value here I can't do that from the state user interface as I can't enter hexadecimal values in gets",
    "start": "154280",
    "end": "161720"
  },
  {
    "text": "so I'll just patch this in the memory you all know that if you can't you can send hex data over Network you don't",
    "start": "161720",
    "end": "167800"
  },
  {
    "text": "need to restrict yourself to aski so something that's always paged in Windows NT in a single threaded application is",
    "start": "167800",
    "end": "175560"
  },
  {
    "text": "the address 7f whoops 7 ffde",
    "start": "175560",
    "end": "180680"
  },
  {
    "text": "001 I'll explain later on why this is always patched uh paged because it's quite a funny",
    "start": "180680",
    "end": "187000"
  },
  {
    "text": "thing and then we just walk through this and get to this",
    "start": "187000",
    "end": "195000"
  },
  {
    "text": "point edx points here ebx is loaded with edx Plus 8 ECX",
    "start": "195000",
    "end": "203440"
  },
  {
    "text": "is loaded with edx + 4 and then the value of ebx is written",
    "start": "203440",
    "end": "209319"
  },
  {
    "text": "to the address pointed to at ECX Plus 8 so again we have an arbitrary memory",
    "start": "209319",
    "end": "215439"
  },
  {
    "text": "override it was just my stupidness that I didn't realize the first four four bites of the second buffer may not be",
    "start": "215439",
    "end": "222319"
  },
  {
    "text": "characters so I hope I have repaired my reputation at least to a certain",
    "start": "222319",
    "end": "228040"
  },
  {
    "text": "degree but you see that these ones can be quite tricky and Another good",
    "start": "228040",
    "end": "233200"
  },
  {
    "text": "argument for not using stress testing all the EI guys are gone now so I can bash to them some",
    "start": "233200",
    "end": "238480"
  },
  {
    "text": "more all right right um moving on to the second half",
    "start": "238480",
    "end": "244280"
  },
  {
    "text": "exploitation reliability we all know how annoying it is to um try to own a",
    "start": "244280",
    "end": "249879"
  },
  {
    "text": "computer and it just Falls over especially under NT where services are not automatically restarted and you just",
    "start": "249879",
    "end": "255239"
  },
  {
    "text": "have one shot it's really really bad because um well your return addresses",
    "start": "255239",
    "end": "260880"
  },
  {
    "text": "change with service packs with Hot fixes and sometimes even with languages so",
    "start": "260880",
    "end": "266360"
  },
  {
    "text": "unless you know the exact Service Pack hot fix number and the language of the computer attacking you infer a bit of a Gamble and that is not exactly what you",
    "start": "266360",
    "end": "273560"
  },
  {
    "text": "like to do secondly in multi-threaded applications you never know where your stack is at so the standard Unix",
    "start": "273560",
    "end": "279000"
  },
  {
    "text": "technique of jumping into the stack doesn't work at all so you're jumping into some kind of shared library and try",
    "start": "279000",
    "end": "284960"
  },
  {
    "text": "to find some code which locates your your buffer and jumps into it the problem with this is that those shared",
    "start": "284960",
    "end": "290320"
  },
  {
    "text": "libraries can be relocated in memory and they can end up being pretty much anywhere so we need to find some more",
    "start": "290320",
    "end": "298400"
  },
  {
    "text": "reliable way to improve reliability now there is reliability at various levels",
    "start": "298400",
    "end": "303960"
  },
  {
    "text": "first off um there's reliability at the Shell Cod level there's a lot of unstable shell codes out there I got hit",
    "start": "303960",
    "end": "309960"
  },
  {
    "text": "by um small buck pretty badly when I was starting out with shell codes basically",
    "start": "309960",
    "end": "315960"
  },
  {
    "text": "I had an AMD computer and that AMD computer was very interc compatible at",
    "start": "315960",
    "end": "322199"
  },
  {
    "text": "least more interc compatible as intels because I was writing a shell code where I thought it was pretty sneaky to try to",
    "start": "322199",
    "end": "328280"
  },
  {
    "text": "determine where I'm in memory by pushing to like three up codes on the stack namely pop EBP pop eax jump EBP and then",
    "start": "328280",
    "end": "336440"
  },
  {
    "text": "issuing a call ESP and that would give me my Delta offset like where I am in memory and it",
    "start": "336440",
    "end": "343520"
  },
  {
    "text": "worked fine on my computer on my own box just right and I tried to test it in the wild of course on the 200 Intel boxes",
    "start": "343520",
    "end": "351479"
  },
  {
    "text": "which I have in my room and um well I noticed that all of them crash",
    "start": "351479",
    "end": "358840"
  },
  {
    "text": "I couldn't figure out why why now um after a lot of fiddling around and a lot",
    "start": "358840",
    "end": "364199"
  },
  {
    "text": "of guessing I finally started reading the erat of Intel and inet has documented that from",
    "start": "364199",
    "end": "370639"
  },
  {
    "text": "the Pentium on the call ESP instruction does not behave like the call ESP instruction used to",
    "start": "370639",
    "end": "376560"
  },
  {
    "text": "behave um basically the call ESP instruction on the AMD and on the early ints would behave in a way that it would",
    "start": "376560",
    "end": "383199"
  },
  {
    "text": "first transfer the current stack pointer no it it would first push the data like I I push the data",
    "start": "383199",
    "end": "390440"
  },
  {
    "text": "I'm speaking I push the data personally I issue the call ESP call ESP",
    "start": "390440",
    "end": "396240"
  },
  {
    "text": "transform or moves the ESP value into EIP and then pushes the old",
    "start": "396240",
    "end": "401800"
  },
  {
    "text": "EIP that was the way it used to work so my code would get executed immediately I had pushed it before now with the",
    "start": "401800",
    "end": "408199"
  },
  {
    "text": "Pentium on they changed this they first push EIP and then transfer that new EIP",
    "start": "408199",
    "end": "413759"
  },
  {
    "text": "value uh ESP value to EIP therefore I was executing my own return address and",
    "start": "413759",
    "end": "419680"
  },
  {
    "text": "that's SEC faulted so um you can get control reliably if your",
    "start": "419680",
    "end": "425879"
  },
  {
    "text": "sh code is bad then you will be screwed and there's a tremendous amount of bad Shell Code around like hardcoded",
    "start": "425879",
    "end": "431960"
  },
  {
    "text": "addresses especially for NT anyways it's very much needed to have reliable",
    "start": "431960",
    "end": "437240"
  },
  {
    "text": "exploits whether you're a pen tester or a blackhead or somebody riding a warm to celebrate the switch of the internet",
    "start": "437240",
    "end": "443120"
  },
  {
    "text": "week and therefore I came up with a few funny tricks first off um we all know and love",
    "start": "443120",
    "end": "450919"
  },
  {
    "text": "format string bugs I know this diagram looks a bit bizarre anybody here who's not familiar with how to exploit format",
    "start": "450919",
    "end": "457560"
  },
  {
    "text": "string bugs please raise your hand okay then I'll demonstrate",
    "start": "457560",
    "end": "464520"
  },
  {
    "text": "okay this lame server is just a program listening on Port 1999 and echoing back",
    "start": "481919",
    "end": "487039"
  },
  {
    "text": "whatever I type using SN prth into a buffer and then sending it back so if I send a AAA it echoes back a AAA if I",
    "start": "487039",
    "end": "495039"
  },
  {
    "text": "send hello world it Echo back hello world now if I",
    "start": "495039",
    "end": "500759"
  },
  {
    "text": "send hello world percent LX it sends back this because it's a format string",
    "start": "500759",
    "end": "507440"
  },
  {
    "text": "bug now this point I can read out arbitrary data from the memory because basically for every argument with like",
    "start": "507440",
    "end": "515080"
  },
  {
    "text": "for every format character they start paring upwards the stack from the",
    "start": "515080",
    "end": "520360"
  },
  {
    "text": "pointer to the format string upwards into some arbitrary data there",
    "start": "520360",
    "end": "525600"
  },
  {
    "text": "now depending on how things are set up if I have AAA and continue to pop off",
    "start": "525600",
    "end": "531839"
  },
  {
    "text": "the stack and the AA buffers on the stack I will eventually get that print F pointer which is pausing the data into",
    "start": "531839",
    "end": "537720"
  },
  {
    "text": "my own buffer like right now see the 41 41 41",
    "start": "537720",
    "end": "545600"
  },
  {
    "text": "41 now at this point I am supplying data which I can display and then there is",
    "start": "545600",
    "end": "551240"
  },
  {
    "text": "the specification of print F uh I'm not sure whether I have the",
    "start": "551240",
    "end": "557640"
  },
  {
    "text": "exact specification here wait a second oh",
    "start": "557640",
    "end": "563160"
  },
  {
    "text": "yeah the anzi EO specification the best $9 I ever spent",
    "start": "563160",
    "end": "570320"
  },
  {
    "text": "apparently nobody else does this like nobody else spends Oh wrong",
    "start": "570720",
    "end": "577760"
  },
  {
    "text": "program I think we should use Acrobat",
    "start": "577760",
    "end": "582440"
  },
  {
    "text": "okay and now we try to find prf it should be in the",
    "start": "602640",
    "end": "611279"
  },
  {
    "text": "library I don't think this is going to be very intuitive I think we'll look at another ANC",
    "start": "616640",
    "end": "624320"
  },
  {
    "text": "specification there is is a format character called percent n which can be",
    "start": "628040",
    "end": "633160"
  },
  {
    "text": "used for figuring out how many bytes a certain print F called has already",
    "start": "633160",
    "end": "638839"
  },
  {
    "text": "written for example if you issue a percent s you don't know how many bytes you've written basically what you do",
    "start": "638839",
    "end": "646600"
  },
  {
    "text": "is the person n is not even listed in this one or is it oh",
    "start": "647000",
    "end": "652440"
  },
  {
    "text": "here um basically the person n tells the printf to copy the length of the string",
    "start": "652440",
    "end": "658000"
  },
  {
    "text": "already written into the argument on the stack so if I",
    "start": "658000",
    "end": "663240"
  },
  {
    "text": "issue something like a print F person s person n",
    "start": "663240",
    "end": "670079"
  },
  {
    "text": "string Len then Len will be filled with the length of the string I've already",
    "start": "670079",
    "end": "675399"
  },
  {
    "text": "written addressive L sorry addressive length uh well whatever",
    "start": "675399",
    "end": "682920"
  },
  {
    "text": "length so does it does it write to the that parameter yeah it writes to the parameter there to Len",
    "start": "682920",
    "end": "690560"
  },
  {
    "text": "and we know that we can supply this parameter in for case of a format string bug so we can write the length of a string to an arbitary location in memory",
    "start": "690560",
    "end": "698720"
  },
  {
    "text": "repeatedly so um yeah that's basically how it works I think I should try to show it a",
    "start": "698720",
    "end": "706920"
  },
  {
    "text": "bit",
    "start": "706920",
    "end": "709920"
  },
  {
    "text": "okay um I'll explain later on what this little tool does right now it just displays memory at the location 7 ffde",
    "start": "719959",
    "end": "730079"
  },
  {
    "text": "0000",
    "start": "731320",
    "end": "734320"
  },
  {
    "text": "whoops and the data I'm going to send it's going to look like",
    "start": "743480",
    "end": "751880"
  },
  {
    "text": "this we can see up is it readable from anywhere in the audience not at all okay",
    "start": "751880",
    "end": "758519"
  },
  {
    "text": "then I'll try to do it",
    "start": "758519",
    "end": "761800"
  },
  {
    "text": "differently we know that if we hit a AA here and then pop 12 bytes of the stack",
    "start": "764000",
    "end": "769600"
  },
  {
    "text": "that the next four bytes will be our value we can pop those 12 bytes more",
    "start": "769600",
    "end": "777959"
  },
  {
    "text": "elegantly but by using o1f which pops 8 bytes and percent LX percent",
    "start": "777959",
    "end": "787079"
  },
  {
    "text": "LX same result okay now we know that we can write the length of the string we've",
    "start": "787079",
    "end": "793480"
  },
  {
    "text": "already written to the location 41 41 41 41 but just instead of issuing the last",
    "start": "793480",
    "end": "800040"
  },
  {
    "text": "percent LX issuing a percent n",
    "start": "800040",
    "end": "805279"
  },
  {
    "text": "so what I'll do now is",
    "start": "805279",
    "end": "810079"
  },
  {
    "text": "oops is this readable from the audience somewhere it's a a AA bbbb blah blah",
    "start": "819079",
    "end": "825519"
  },
  {
    "text": "blah and then percent. 01f do8",
    "start": "825519",
    "end": "830560"
  },
  {
    "text": "LX and um on percent o8x and present n",
    "start": "830560",
    "end": "835600"
  },
  {
    "text": "so by changing this value here we can change the length of the string which has been",
    "start": "835600",
    "end": "841040"
  },
  {
    "text": "displayed because we can tell it to P the LX to 22 characters or to 55",
    "start": "841040",
    "end": "846440"
  },
  {
    "text": "characters or to whatever you want and then we issue the percent n to write to",
    "start": "846440",
    "end": "851639"
  },
  {
    "text": "the location Here and Now what I'll do is I'll Supply the location which is being displayed in that",
    "start": "851639",
    "end": "857880"
  },
  {
    "text": "window okay we'll save",
    "start": "857880",
    "end": "861600"
  },
  {
    "text": "this okay now I know you will not be able to see this in the back but if I",
    "start": "866240",
    "end": "872320"
  },
  {
    "text": "write replace this 41 41 4141 with",
    "start": "872320",
    "end": "878639"
  },
  {
    "text": "7f FD e0",
    "start": "878639",
    "end": "884600"
  },
  {
    "text": "01 we should be writing a value to this",
    "start": "884600",
    "end": "890519"
  },
  {
    "text": "location see it",
    "start": "895519",
    "end": "899800"
  },
  {
    "text": "and now we can change the value we write by changing the padding here wait from",
    "start": "903199",
    "end": "909360"
  },
  {
    "text": "55 to let's say 8",
    "start": "909360",
    "end": "915079"
  },
  {
    "text": "who",
    "start": "915079",
    "end": "918079"
  },
  {
    "text": "08 so we know that the padding of 08 will write the 23 hex value up",
    "start": "923519",
    "end": "930600"
  },
  {
    "text": "there so we can even well we can now write an arbitrary value there by just",
    "start": "930600",
    "end": "936480"
  },
  {
    "text": "supplying the right padding if we decrease this by one the bite we write decreases by one as",
    "start": "936480",
    "end": "944759"
  },
  {
    "text": "well instead of 23 it's 22 is this clear to",
    "start": "946880",
    "end": "953959"
  },
  {
    "text": "everybody anything unclear raise your hand at least you can ask that in Europe",
    "start": "953959",
    "end": "959079"
  },
  {
    "text": "it's um frequently a problem in other countries where people out of fear of loss of face will not raise their hands",
    "start": "959079",
    "end": "964480"
  },
  {
    "text": "if you ask something so okay so everybody's more or less clear",
    "start": "964480",
    "end": "971399"
  },
  {
    "text": "on what a forance string does and why does this and um format string bugs and Heap",
    "start": "971399",
    "end": "979720"
  },
  {
    "text": "overrides have the same thing in or have one thing in common you write to arbitrary addresses and you write",
    "start": "979720",
    "end": "984839"
  },
  {
    "text": "arbitrary values to arbitrary addresses and the usual way to exploit these these kind of bugs under Unix is you guess",
    "start": "984839",
    "end": "990880"
  },
  {
    "text": "where your stack is at where your return address on the stack is at and you hijack the return address on the stack",
    "start": "990880",
    "end": "996720"
  },
  {
    "text": "or you override the uh value in the global offset table inside the executable and hijack one of the lipy",
    "start": "996720",
    "end": "1003000"
  },
  {
    "text": "calls on NT you can't do either because first off most NT compilers set the go",
    "start": "1003000",
    "end": "1009199"
  },
  {
    "text": "equivalent under NT to be read only now if you write to it there will be a SE",
    "start": "1009199",
    "end": "1015000"
  },
  {
    "text": "fault nothing will happen and secondly if you try to guess where the stack is at good luck I mean NT is inherently",
    "start": "1015000",
    "end": "1022720"
  },
  {
    "text": "multi-threaded and every process might end up in a completely different location with a stack depending on",
    "start": "1022720",
    "end": "1028600"
  },
  {
    "text": "Service Pack and so on so Windows provides something called structured",
    "start": "1028600",
    "end": "1033678"
  },
  {
    "text": "exception handling which allows an application to handle handle its own exceptions which is very useful for",
    "start": "1033679",
    "end": "1040280"
  },
  {
    "text": "example if I first off want to hide sloppy programming and secondly very useful if I'm trying to well if I'm",
    "start": "1040280",
    "end": "1047558"
  },
  {
    "text": "dealing with data I don't know and there might be an exception coming up and just catch it and handle it one might argue that the idea of",
    "start": "1047559",
    "end": "1054520"
  },
  {
    "text": "exception handling is wrong in itself as an exception should not occur but then",
    "start": "1054520",
    "end": "1060559"
  },
  {
    "text": "again anyways there are two kinds of exception handlers under NT there are a bit more now under XP but I haven't",
    "start": "1060559",
    "end": "1067039"
  },
  {
    "text": "played with them yet first there there's the unhandled exception filter which is",
    "start": "1067039",
    "end": "1072080"
  },
  {
    "text": "um the the last chance exception pretty much if all other exception handlers",
    "start": "1072080",
    "end": "1077480"
  },
  {
    "text": "have failed the unhand exception Handler will get control and when it gets control um well it executes code and",
    "start": "1077480",
    "end": "1085640"
  },
  {
    "text": "there's an API call to install such an unhandled exception filter which is called set unhandled exception",
    "start": "1085640",
    "end": "1093960"
  },
  {
    "text": "filter uh my desktop is getting chaotic my computer is getting to be bit of a",
    "start": "1095400",
    "end": "1101200"
  },
  {
    "text": "chaos so what we'll do is we'll look at the disassembly of set unhandled exception filter in kernel 32 DL",
    "start": "1101200",
    "end": "1110320"
  },
  {
    "text": "assuming I have it around if not I have it copy down somewhere",
    "start": "1111320",
    "end": "1118200"
  },
  {
    "text": "okay this is it all it does is it takes its argument",
    "start": "1146559",
    "end": "1153880"
  },
  {
    "text": "the pointer to the filter moves it into this location and",
    "start": "1153880",
    "end": "1159799"
  },
  {
    "text": "Returns what was previously in that location so anyone can see that the only",
    "start": "1159799",
    "end": "1167400"
  },
  {
    "text": "thing we need to do to get control is write our value to this location and",
    "start": "1167400",
    "end": "1173720"
  },
  {
    "text": "trigger an exception now the problem here is that we're dealing with the car 32",
    "start": "1173720",
    "end": "1179880"
  },
  {
    "text": "disassembly and that's going to change from Service Pack to service pack from hfix to H fix but still if you can determine the exact service Peg number",
    "start": "1179880",
    "end": "1187000"
  },
  {
    "text": "and the exact H hot fix of a computer this is the Surefire way to get control with a heap override or with a format",
    "start": "1187000",
    "end": "1193720"
  },
  {
    "text": "string bug just write the value in there and boom you're in",
    "start": "1193720",
    "end": "1199679"
  },
  {
    "text": "okay it's a bit boring though and not very useful in the wild world because",
    "start": "1199679",
    "end": "1205360"
  },
  {
    "text": "when for the last time have you or does anybody have a reliable Service Pack and hot fix fingerprinter over the network",
    "start": "1205360",
    "end": "1211080"
  },
  {
    "text": "for n if you have one give",
    "start": "1211080",
    "end": "1215879"
  },
  {
    "text": "me okay the second kind of exception handlers which can be installed are per",
    "start": "1224480",
    "end": "1229960"
  },
  {
    "text": "thread exception handlers every thread can install its own exception Handler by",
    "start": "1229960",
    "end": "1235919"
  },
  {
    "text": "um manipulating a structure this is all not very",
    "start": "1235919",
    "end": "1241320"
  },
  {
    "text": "interesting okay um by manipulating the structure at fs.",
    "start": "1241320",
    "end": "1246440"
  },
  {
    "text": "Z the structure at fs. Z is called thread environment block and is not",
    "start": "1246440",
    "end": "1251480"
  },
  {
    "text": "really well documented by entt but the wine project has done a very good job at documenting it and at fs. Z the first",
    "start": "1251480",
    "end": "1258600"
  },
  {
    "text": "first double word points to an a structure of this format down here it",
    "start": "1258600",
    "end": "1265640"
  },
  {
    "text": "has contains the pointer to the next structure of the next Handler and the pointer to the Handler code now in order",
    "start": "1265640",
    "end": "1271200"
  },
  {
    "text": "for a thread to install such a Handler you just issue the push offset of the Handler push the double word that's at",
    "start": "1271200",
    "end": "1277640"
  },
  {
    "text": "fs do0 and then move your current ESP into fs. Z this will automatically",
    "start": "1277640",
    "end": "1284480"
  },
  {
    "text": "create the structure here on the stack and we make sure that you don't erase any previously installed handlers so",
    "start": "1284480",
    "end": "1290559"
  },
  {
    "text": "basically it creates a linked list of these structures which",
    "start": "1290559",
    "end": "1295799"
  },
  {
    "text": "contain a Handler and when an exception occurs NT calls the topmost Handler like",
    "start": "1295799",
    "end": "1302039"
  },
  {
    "text": "the Handler that was last installed and that Handler claims it fails it returns",
    "start": "1302039",
    "end": "1307360"
  },
  {
    "text": "with an error value and NT calls the next Handler and so on that goes down all the way until eventually no more",
    "start": "1307360",
    "end": "1314440"
  },
  {
    "text": "handlers are left and the unhandled exception filter is called so I knew about this for quite some time",
    "start": "1314440",
    "end": "1322559"
  },
  {
    "text": "from the old copy protection days because it can be used very efficiently for funny anti-debugging like um setting",
    "start": "1322559",
    "end": "1330200"
  },
  {
    "text": "the computer into single step mode and catching its own exception and if somebody single steps it in soft eyes",
    "start": "1330200",
    "end": "1336000"
  },
  {
    "text": "then nothing will happen and your program knows somebody's single stepping it it's not very very hard to crack but",
    "start": "1336000",
    "end": "1342400"
  },
  {
    "text": "it can be used for a lot of funny games until I finally had the idea that it's a good way to get control",
    "start": "1342400",
    "end": "1349120"
  },
  {
    "text": "we override a threads exception Handler and trigger an exception should get us",
    "start": "1349120",
    "end": "1354840"
  },
  {
    "text": "control now that was a simple idea it turned out to be a bit more complicated in practice but still it's quite",
    "start": "1354840",
    "end": "1362120"
  },
  {
    "text": "useful um I mentioned fs. Z forms a linked list of these structures we go through all this uh the",
    "start": "1362120",
    "end": "1369600"
  },
  {
    "text": "entire chain of handlers and if we can overwrite the value at fs. Z and we can",
    "start": "1369600",
    "end": "1375320"
  },
  {
    "text": "make it point to a structure we have supplied then we're in of course we have to",
    "start": "1375320",
    "end": "1381520"
  },
  {
    "text": "trigger an exception afterwards but triggering an exception is not always a hard thing to do now we have a few",
    "start": "1381520",
    "end": "1388520"
  },
  {
    "text": "problems here the structure we're trying to overwrite is at at s.0 and as you might remember I don't",
    "start": "1388520",
    "end": "1395559"
  },
  {
    "text": "think there is any way in the world where we can do cross- segment arbitrary",
    "start": "1395559",
    "end": "1400760"
  },
  {
    "text": "data overrides neither with format string bugs nor with maloc bugs we can",
    "start": "1400760",
    "end": "1405799"
  },
  {
    "text": "do a cross segment WR we need to write to fs. zer we're screwed we can't do it",
    "start": "1405799",
    "end": "1411320"
  },
  {
    "text": "okay um what nobody seems to have tried to document before is that those threat",
    "start": "1411320",
    "end": "1417760"
  },
  {
    "text": "environment blocks are created at highly predictable addresses now they are not only at fs. Z",
    "start": "1417760",
    "end": "1425120"
  },
  {
    "text": "but they're mapped into the address space of the thread as well officially a",
    "start": "1425120",
    "end": "1430240"
  },
  {
    "text": "program is not allowed to use it but they're there and they can be accessed and I wrote a small test",
    "start": "1430240",
    "end": "1437080"
  },
  {
    "text": "program to show how how tebs are actually allocated and the results",
    "start": "1437080",
    "end": "1443039"
  },
  {
    "text": "are that the first thread always is at 7 ffde 0000 the first teb for the first",
    "start": "1443039",
    "end": "1449960"
  },
  {
    "text": "thread and then for the second thread one page below and so on up until to the",
    "start": "1449960",
    "end": "1455360"
  },
  {
    "text": "11th thread and um that is at 7 ffd",
    "start": "1455360",
    "end": "1460400"
  },
  {
    "text": "400 and the 12th thread starts at 7 FF f00 the 12th TB and from then on it goes",
    "start": "1460400",
    "end": "1467880"
  },
  {
    "text": "on to INF I test stop quit testing this at more than 500 threads and it just goes sequentially down from there so we",
    "start": "1467880",
    "end": "1474360"
  },
  {
    "text": "know we can predict where the tebs are going to be that's",
    "start": "1474360",
    "end": "1479399"
  },
  {
    "text": "why I knew that 7 ffde e001 would always be paged so we know that we have a bunch of",
    "start": "1479399",
    "end": "1485640"
  },
  {
    "text": "pages that are always going to be paged and we know that if we write to these and create a structure in these pages",
    "start": "1485640",
    "end": "1491200"
  },
  {
    "text": "that are always paged we can get control we're facing a few difficulties",
    "start": "1491200",
    "end": "1496679"
  },
  {
    "text": "though I hope this side works if not I'll show it live um you have threads 1 to 4 which",
    "start": "1496679",
    "end": "1504600"
  },
  {
    "text": "have been sequentially created now thread two finishes and exits and this region here becomes",
    "start": "1504600",
    "end": "1512399"
  },
  {
    "text": "non-paged so if we now start to sequentially override those TB structure hand Beginnings we're going to get an a",
    "start": "1512399",
    "end": "1520440"
  },
  {
    "text": "sec fold with the second thread and assuming that we want to exploit with the fourth thread we're never going to",
    "start": "1520440",
    "end": "1526279"
  },
  {
    "text": "reach it because it's SE fors before so we have to somehow deal with the fragmentation of the teb",
    "start": "1526279",
    "end": "1534200"
  },
  {
    "text": "table I don't know what this slide was all about was supposed to be very visual for",
    "start": "1534200",
    "end": "1540480"
  },
  {
    "text": "something but all I can see is typographical",
    "start": "1540480",
    "end": "1545240"
  },
  {
    "text": "errors oh yeah well it shows a bit more how the TB might become",
    "start": "1546399",
    "end": "1552679"
  },
  {
    "text": "fragmented I think I'll rather show that live somehow if I manage",
    "start": "1552679",
    "end": "1558760"
  },
  {
    "text": "to get back to my TB",
    "start": "1558760",
    "end": "1562520"
  },
  {
    "text": "view okay TB view displays the first 50 threads tebs like the data there I",
    "start": "1565679",
    "end": "1572399"
  },
  {
    "text": "whipped this up yesterday want to make things a bit more visual because I noticed that nobody is capable of",
    "start": "1572399",
    "end": "1578320"
  },
  {
    "text": "reading the soft ice screen in the audience now I have a client that",
    "start": "1578320",
    "end": "1584679"
  },
  {
    "text": "simulates through traffic to a certain degree it s to the server lingers for a",
    "start": "1584679",
    "end": "1590000"
  },
  {
    "text": "while disconnects and uh does all this with varying degrees of",
    "start": "1590000",
    "end": "1595559"
  },
  {
    "text": "delay so you can see a bunch of threads being created and connecting and now you can just watch",
    "start": "1595559",
    "end": "1602360"
  },
  {
    "text": "how the TB starts well it's not really fragmented right now because there's",
    "start": "1602360",
    "end": "1607480"
  },
  {
    "text": "contining new new threads being created but once there's a bunch of threads which all die at a certain point and no",
    "start": "1607480",
    "end": "1613000"
  },
  {
    "text": "new threads coming in for a second it's going to be heavily fragmented now you can see here that",
    "start": "1613000",
    "end": "1619200"
  },
  {
    "text": "we have a bunch of threads running now the TB is very heavily fragmented for",
    "start": "1619200",
    "end": "1624679"
  },
  {
    "text": "example that it's not going to be easy to override them",
    "start": "1628399",
    "end": "1635398"
  },
  {
    "text": "sequentially",
    "start": "1637120",
    "end": "1640120"
  },
  {
    "text": "so hello back to PowerPoint any questions concerning this so far I forgot to",
    "start": "1645120",
    "end": "1651159"
  },
  {
    "text": "ask no right okay I mentioned those",
    "start": "1651159",
    "end": "1656399"
  },
  {
    "text": "difficulties before we don't know which which thread we're working with I mean we just connected we don't have the",
    "start": "1656399",
    "end": "1662279"
  },
  {
    "text": "thread number or the where the teb is at and the teb table may be fragmented so",
    "start": "1662279",
    "end": "1668440"
  },
  {
    "text": "we have no clue where to write to so we need to um exploit in a certain strategy what",
    "start": "1668440",
    "end": "1676600"
  },
  {
    "text": "I do usually is I create a large number of threads I create a heavy load on the server because if I create a heavy load",
    "start": "1676600",
    "end": "1683200"
  },
  {
    "text": "on the server I have a good chance that one of my threads will be amongst the first few way up there if you look at",
    "start": "1683200",
    "end": "1690159"
  },
  {
    "text": "the TB again H darn should start learning gii programming more in",
    "start": "1690159",
    "end": "1697320"
  },
  {
    "text": "depth okay um if I create a heavy load for quite some while with my threads I",
    "start": "1697320",
    "end": "1704360"
  },
  {
    "text": "can assume that at one point one of my threads will get a like one of the TBS",
    "start": "1704360",
    "end": "1709840"
  },
  {
    "text": "high up on that list I want my exploiting thread to be as high up on that list as possible because I want",
    "start": "1709840",
    "end": "1717000"
  },
  {
    "text": "well I want to get control and if I'm overriding sequentially from the beginning then I'm not going to get very",
    "start": "1717000",
    "end": "1722159"
  },
  {
    "text": "far if my exploiting threat is somewhere down the list so I create a heavy load",
    "start": "1722159",
    "end": "1727399"
  },
  {
    "text": "on the server to get one of my threads actually populate the first region I let",
    "start": "1727399",
    "end": "1732720"
  },
  {
    "text": "all of them die quickly and then I connect and when all of them die quickly",
    "start": "1732720",
    "end": "1738159"
  },
  {
    "text": "this TB table is very fragmented but a few places very high on",
    "start": "1738159",
    "end": "1743799"
  },
  {
    "text": "the list are going to be free so I connect with my exploiting thread which is going to be high on the list and next",
    "start": "1743799",
    "end": "1750200"
  },
  {
    "text": "thing I do is I collect with a lot of junk threads to just fill in the gaps in the TB table and then I start",
    "start": "1750200",
    "end": "1758519"
  },
  {
    "text": "exploiting um unfortunately there's no way to visualize it and the result of this is that you",
    "start": "1759799",
    "end": "1767360"
  },
  {
    "text": "have uh reliability of 80 to 90% of exploitation under multi- thread systems",
    "start": "1767360",
    "end": "1772559"
  },
  {
    "text": "and this is without knowing whether it's NT 2K or XP without knowing the service",
    "start": "1772559",
    "end": "1778320"
  },
  {
    "text": "pack the language or",
    "start": "1778320",
    "end": "1781440"
  },
  {
    "text": "anything um now officially the speech would be at its end from the slides but I'll demonstrate a bit",
    "start": "1783440",
    "end": "1790919"
  },
  {
    "text": "more trying to figure out why I have an empty command shell",
    "start": "1794080",
    "end": "1799600"
  },
  {
    "text": "okay um we'll quit the lame client now and I'll demonstrate how we actually can",
    "start": "1802399",
    "end": "1810440"
  },
  {
    "text": "overwrite the TB Parts wait a",
    "start": "1810799",
    "end": "1815639"
  },
  {
    "text": "second so we can assume that my lame server uh my lame client is creating",
    "start": "1819480",
    "end": "1824880"
  },
  {
    "text": "quite some traffic here so he's doing the job of creating um well he's doing the job of creating a",
    "start": "1824880",
    "end": "1832360"
  },
  {
    "text": "lot of threads of course in a true environment there would be more than just one one",
    "start": "1832360",
    "end": "1837919"
  },
  {
    "text": "client here but I let all those threads that are creating traffic die and",
    "start": "1837919",
    "end": "1844200"
  },
  {
    "text": "then wait I'm connecting with my exploiting",
    "start": "1844200",
    "end": "1852039"
  },
  {
    "text": "thread of course in reality this has to happen really really fast",
    "start": "1852200",
    "end": "1858080"
  },
  {
    "text": "just to make it more visual this is okay CD um black hat",
    "start": "1858080",
    "end": "1866279"
  },
  {
    "text": "speech okay and I create a bunch of threads to fill in the gaps I don't need those threads right now because they are",
    "start": "1867760",
    "end": "1873679"
  },
  {
    "text": "no gaps because all traffic that was there was generated by me but um actually I could run two",
    "start": "1873679",
    "end": "1880880"
  },
  {
    "text": "instances of lame client that should work I'll try to visualize it this way",
    "start": "1880880",
    "end": "1886320"
  },
  {
    "text": "wait a second okay the application",
    "start": "1886320",
    "end": "1892720"
  },
  {
    "text": "crashed let's get back to the lame",
    "start": "1894399",
    "end": "1898880"
  },
  {
    "text": "server and then we start up TB",
    "start": "1900440",
    "end": "1904638"
  },
  {
    "text": "view process ID has changed at 32",
    "start": "1905919",
    "end": "1910960"
  },
  {
    "text": "3205 okay",
    "start": "1912760",
    "end": "1916760"
  },
  {
    "text": "we minimize the lame server I'll quit any applications we don't need to get an UNS School",
    "start": "1921000",
    "end": "1928360"
  },
  {
    "text": "result okay we start one instance of lame",
    "start": "1934600",
    "end": "1940158"
  },
  {
    "text": "client we start another instant of lame client to create a heavy load",
    "start": "1943240",
    "end": "1949638"
  },
  {
    "text": "I'm prepare for connecting with the exploiting",
    "start": "1955799",
    "end": "1960240"
  },
  {
    "text": "thread I let one of my lame clients",
    "start": "1963240",
    "end": "1968559"
  },
  {
    "text": "die I hope I've gotten one of the threads high above I'm not",
    "start": "1970320",
    "end": "1976600"
  },
  {
    "text": "sure I have I have one of those I'm still alive with my thread oh I'm trying now I'll create a",
    "start": "1976600",
    "end": "1983320"
  },
  {
    "text": "bunch of threads to actually fill in any gaps that might be",
    "start": "1983320",
    "end": "1990320"
  },
  {
    "text": "there now I can be quite uh this was wrong I should have executed spoit 2 ha",
    "start": "2000679",
    "end": "2009760"
  },
  {
    "text": "doe I told you this was not going to be easy to",
    "start": "2011519",
    "end": "2016080"
  },
  {
    "text": "visualize lame servers waiting lame client should be starting",
    "start": "2019880",
    "end": "2026559"
  },
  {
    "text": "to generate",
    "start": "2026559",
    "end": "2029240"
  },
  {
    "text": "traffic I have two instances of client",
    "start": "2035600",
    "end": "2040158"
  },
  {
    "text": "running I'll try to figure out what the P ID of the the lay server is in order",
    "start": "2049599",
    "end": "2056440"
  },
  {
    "text": "to be able to see what the TBS",
    "start": "2056440",
    "end": "2061358"
  },
  {
    "text": "are okay here we have the TBS on a fairly heavy load",
    "start": "2063679",
    "end": "2069480"
  },
  {
    "text": "I ready myself to connect with the exploiting thread and I",
    "start": "2071879",
    "end": "2077158"
  },
  {
    "text": "already the correct program in the other",
    "start": "2077159",
    "end": "2081598"
  },
  {
    "text": "window",
    "start": "2089359",
    "end": "2092358"
  },
  {
    "text": "okay now I make sure that if I just flip this the right window will pop up this",
    "start": "2096200",
    "end": "2101680"
  },
  {
    "text": "should be it okay I let one of the lame clients die",
    "start": "2101680",
    "end": "2109079"
  },
  {
    "text": "and I couldn't I mistyped okay I start up the lame client",
    "start": "2109079",
    "end": "2116240"
  },
  {
    "text": "again well this all happens in the in the in a fraction of a second if you have written it in exploit but just",
    "start": "2116240",
    "end": "2122680"
  },
  {
    "text": "trying to visualize it it's is a major pain",
    "start": "2122680",
    "end": "2127760"
  },
  {
    "text": "okay sorry and sploit two",
    "start": "2134800",
    "end": "2142280"
  },
  {
    "text": "thanks okay wish me luck flipping it gets me to the right",
    "start": "2142280",
    "end": "2149000"
  },
  {
    "text": "point I let one lame client die I connect I've probably gotten the third one from",
    "start": "2149000",
    "end": "2156040"
  },
  {
    "text": "above actually we can very verify that I have gotten one up on the list by letting the second lame client",
    "start": "2156040",
    "end": "2163920"
  },
  {
    "text": "die okay we let this die and we can see that I've",
    "start": "2164359",
    "end": "2172400"
  },
  {
    "text": "gotten nothing oh yeah I hit the up",
    "start": "2172400",
    "end": "2179838"
  },
  {
    "text": "Arrow okay well at least I'm filling the time",
    "start": "2183960",
    "end": "2189559"
  },
  {
    "text": "it's quite hard to just hit",
    "start": "2195560",
    "end": "2198760"
  },
  {
    "text": "enter okay we let okay I just have to hit enter then",
    "start": "2201560",
    "end": "2207720"
  },
  {
    "text": "no hand on the up arror I let one client die and connect",
    "start": "2207720",
    "end": "2213119"
  },
  {
    "text": "and now I let the second lame client die and you can see we've gotten a thread way up on the",
    "start": "2213119",
    "end": "2219520"
  },
  {
    "text": "is this at least plausible okay now as we've gotten a thread way up on the list we start the",
    "start": "2220040",
    "end": "2226400"
  },
  {
    "text": "lame client again to simulate real traffic um and our exploiting now now we",
    "start": "2226400",
    "end": "2235079"
  },
  {
    "text": "create a bunch of threads to prevent there being um a fragment fragmentation",
    "start": "2235079",
    "end": "2240920"
  },
  {
    "text": "directly before our thread sploit two thanks and um we just hope that there",
    "start": "2240920",
    "end": "2247400"
  },
  {
    "text": "will there will be no fragmentation now before our original thread because we'll start exploiting now with the original",
    "start": "2247400",
    "end": "2253240"
  },
  {
    "text": "thread and I'd love to demonstrate how I write to that address but um if you can tell me how I write 7 ffd",
    "start": "2253240",
    "end": "2261359"
  },
  {
    "text": "c0000 or Z Z1 using the standard interface with my regular keyboard",
    "start": "2261359",
    "end": "2267400"
  },
  {
    "text": "without a number pad uh you're my king",
    "start": "2267400",
    "end": "2272920"
  },
  {
    "text": "so yeah but I don't have a number pad so I'll try function function",
    "start": "2273839",
    "end": "2280400"
  },
  {
    "text": "key and then oh wait now I have a number pad apparently and now we have to guess oh",
    "start": "2280400",
    "end": "2287119"
  },
  {
    "text": "no the the first value we want to write is",
    "start": "2287119",
    "end": "2292560"
  },
  {
    "text": "01 let's hope this works 0",
    "start": "2292560",
    "end": "2300519"
  },
  {
    "text": "one shouldn't the cursor be advancing",
    "start": "2300960",
    "end": "2305838"
  },
  {
    "text": "Z",
    "start": "2308400",
    "end": "2310960"
  },
  {
    "text": "Z1 oh this was not good 01",
    "start": "2314079",
    "end": "2322640"
  },
  {
    "text": "no Z [Music] 01 I don't know whe that's the right",
    "start": "2322640",
    "end": "2328200"
  },
  {
    "text": "character but let's hope yeah okay that's the 01 the next one would be",
    "start": "2328200",
    "end": "2335400"
  },
  {
    "text": "e0 e0 we'll just convert",
    "start": "2335400",
    "end": "2340279"
  },
  {
    "text": "it the best application Microsoft has ever written no I'm just kidding I'm seeing",
    "start": "2342160",
    "end": "2348119"
  },
  {
    "text": "rooster back in the room here and I had to make stupid jokes about Microsoft so um no it's not e z it's d0 which we",
    "start": "2348119",
    "end": "2355960"
  },
  {
    "text": "want d0 which is 208 alt Funk 208",
    "start": "2355960",
    "end": "2366200"
  },
  {
    "text": "and then it's",
    "start": "2368400",
    "end": "2371160"
  },
  {
    "text": "FD",
    "start": "2374960",
    "end": "2377960"
  },
  {
    "text": "253 no it's only 7f which should be 127 or",
    "start": "2383839",
    "end": "2393200"
  },
  {
    "text": "something 127 yeah one two",
    "start": "2394400",
    "end": "2401920"
  },
  {
    "text": "seven it's the backspace character so we're screwed but it's it's",
    "start": "2401920",
    "end": "2408000"
  },
  {
    "text": "it's possible we just can't do it on the keyboard here just a small",
    "start": "2408000",
    "end": "2414920"
  },
  {
    "text": "that yeah we we could do that but right now I have this small thread here in the",
    "start": "2414920",
    "end": "2420160"
  },
  {
    "text": "very beginning um well we've seen that once we have the thread we can write to arbitrary",
    "start": "2420160",
    "end": "2425920"
  },
  {
    "text": "addresses and I've Dem demonstrated that we can now sequentially override those exception handlers without",
    "start": "2425920",
    "end": "2432640"
  },
  {
    "text": "problem um do you believe me that this works okay now everything's fine shut up",
    "start": "2432640",
    "end": "2440200"
  },
  {
    "text": "rooster okay any questions concerning this how much time do we have left um 45",
    "start": "2440200",
    "end": "2451640"
  },
  {
    "text": "minutes okay so somebody please come up with questions but I come up with something yes yes where you from Germany",
    "start": "2454119",
    "end": "2462440"
  },
  {
    "text": "thank you another question um you talked about",
    "start": "2462440",
    "end": "2468359"
  },
  {
    "text": "the for Strings bugs yeah u i",
    "start": "2468359",
    "end": "2473520"
  },
  {
    "text": "really if if you have a time yeah and and the audience is interested I I I",
    "start": "2473520",
    "end": "2481520"
  },
  {
    "text": "would like to have a little bit more detailed uh uh information",
    "start": "2481520",
    "end": "2488160"
  },
  {
    "text": "about to find for and exploit it because I I I saw the demo and it was looked",
    "start": "2488160",
    "end": "2494920"
  },
  {
    "text": "fine but I really didn't get the the the source code thing in my mind working",
    "start": "2494920",
    "end": "2502200"
  },
  {
    "text": "really okay you understand yeah okay learn explain a bit more about format",
    "start": "2502200",
    "end": "2508760"
  },
  {
    "text": "string bugs are there any we can do that in a minute yeah I mean we still have time apparently",
    "start": "2508760",
    "end": "2515119"
  },
  {
    "text": "um any questions concerning this smoothly threaded exploitation",
    "start": "2515119",
    "end": "2520319"
  },
  {
    "text": "crap nothing all right then we'll start playing with format string bugs some",
    "start": "2524240",
    "end": "2530760"
  },
  {
    "text": "more yeah have a question is maybe a little bit off topic but do you know if",
    "start": "2530760",
    "end": "2536200"
  },
  {
    "text": "there's anything similar to uh exception handlers in the Unix World good question",
    "start": "2536200",
    "end": "2544720"
  },
  {
    "text": "um it's not standardized Unix I would bet sun has implemented",
    "start": "2544720",
    "end": "2549960"
  },
  {
    "text": "something like it because um they are the direct competitors to",
    "start": "2549960",
    "end": "2556318"
  },
  {
    "text": "Microsoft but are they actually implemented in a similar",
    "start": "2557000",
    "end": "2562280"
  },
  {
    "text": "way because the windows exception handlers are not like the standard exception handlers in C++ they're implemented using Tri accept",
    "start": "2562760",
    "end": "2570720"
  },
  {
    "text": "macros have something like the signal hand for SE B will be the yeah the",
    "start": "2572359",
    "end": "2577800"
  },
  {
    "text": "signal handlers would be the next next best thing through a an exception Handler but signal handlers only get one",
    "start": "2577800",
    "end": "2584920"
  },
  {
    "text": "exception while an exception Handler gets any exception and I think there are very few",
    "start": "2584920",
    "end": "2589960"
  },
  {
    "text": "applications explicitly installing a seal Handler so signal handlers are not quite",
    "start": "2589960",
    "end": "2596559"
  },
  {
    "text": "as useful as structured exception handlers when it comes to exploitation I'm not aware of anything right from the",
    "start": "2596559",
    "end": "2603839"
  },
  {
    "text": "top of my head and I don't think that there's anything that's in the standard",
    "start": "2603839",
    "end": "2609319"
  },
  {
    "text": "besides the C++ exception handling with throw and catch okay so let's play with format",
    "start": "2609319",
    "end": "2617319"
  },
  {
    "text": "strings some more um we'll quit this crap in the",
    "start": "2617319",
    "end": "2622680"
  },
  {
    "text": "background oh wait a second oh",
    "start": "2622680",
    "end": "2628359"
  },
  {
    "text": "yeah actually works",
    "start": "2628359",
    "end": "2632640"
  },
  {
    "text": "so I think if nobody Minds I'll explain a bit more how format string bugs look in the source how they can be found in",
    "start": "2640440",
    "end": "2646440"
  },
  {
    "text": "the binary unfortunately I don't have the nice example of having format string bugs in checkpoint anymore I don't have",
    "start": "2646440",
    "end": "2651640"
  },
  {
    "text": "checkpoint installed um but we can play a bit with",
    "start": "2651640",
    "end": "2658040"
  },
  {
    "text": "that whoa hello",
    "start": "2658400",
    "end": "2665800"
  },
  {
    "text": "not that I know",
    "start": "2673040",
    "end": "2678400"
  },
  {
    "text": "okay okay actually this lame server is a pretty good example for playing with",
    "start": "2685160",
    "end": "2690920"
  },
  {
    "text": "form string bugs uh the the site exec bug in W FP was similar you could see your own Echo",
    "start": "2690920",
    "end": "2697040"
  },
  {
    "text": "so you could even if you didn't know what machine you were running on you could try to exploit it a friend of mine",
    "start": "2697040",
    "end": "2702280"
  },
  {
    "text": "spent about a week just sending weird format characters to some weird irx box he had found somewhere trying to figure",
    "start": "2702280",
    "end": "2708839"
  },
  {
    "text": "out how this one could be exploited not that any of my friends engage in illegal",
    "start": "2708839",
    "end": "2716000"
  },
  {
    "text": "activities what I don't know",
    "start": "2717800",
    "end": "2723319"
  },
  {
    "text": "any if they do they must do it without telling me",
    "start": "2723319",
    "end": "2728920"
  },
  {
    "text": "rooster would you consider yourself my",
    "start": "2729160",
    "end": "2732838"
  },
  {
    "text": "friend okay now I think we'll have a small look",
    "start": "2737559",
    "end": "2744559"
  },
  {
    "text": "at the source of that lame server",
    "start": "2744559",
    "end": "2748720"
  },
  {
    "text": "this the mistake is pretty much here it's called argument deficiency um",
    "start": "2760640",
    "end": "2768400"
  },
  {
    "text": "actually I have an entire chapter on that in the other presentation let's try whether we can",
    "start": "2768400",
    "end": "2773760"
  },
  {
    "text": "find it",
    "start": "2773760",
    "end": "2776960"
  },
  {
    "text": "[Music] ah",
    "start": "2787530",
    "end": "2794000"
  },
  {
    "text": "okay now this is the speech I used to hold back in the days last",
    "start": "2794040",
    "end": "2800559"
  },
  {
    "text": "time okay um format string vulnerabilities basically come from the fact that programmers are too lazy to",
    "start": "2800559",
    "end": "2807119"
  },
  {
    "text": "type the false statement and I think anyone of us when he writes a small test program feels inclined to write print F",
    "start": "2807119",
    "end": "2813280"
  },
  {
    "text": "stuff instead of print F double quote percent f double quote um colon semicolon whatever it is",
    "start": "2813280",
    "end": "2821640"
  },
  {
    "text": "comma um stuff so programmers are lazy they do a print of user data or",
    "start": "2821640",
    "end": "2828319"
  },
  {
    "text": "programmers are stupid and don't know the specification and think that suslock it doesn't accept format strings and",
    "start": "2828319",
    "end": "2834079"
  },
  {
    "text": "pass a straight value so basically format string vulnerabilities or format",
    "start": "2834079",
    "end": "2839800"
  },
  {
    "text": "string bugs can be classified as argument deficiency bugs people are lacking an argument here",
    "start": "2839800",
    "end": "2848119"
  },
  {
    "text": "a correct print F call has two arguments one format string with a format character and one piece of data being",
    "start": "2848400",
    "end": "2855400"
  },
  {
    "text": "expanded the print of user data doesn't so we have an argument efficiency uh we",
    "start": "2855400",
    "end": "2861319"
  },
  {
    "text": "went over exploitation details we'll play a bit more with that later on basically all format strings can be",
    "start": "2861319",
    "end": "2868040"
  },
  {
    "text": "classified like this so if you see a Sprint F and the format string is not",
    "start": "2868040",
    "end": "2874400"
  },
  {
    "text": "enclosed in double quotes and it has an argument efficiency you should look very closely the same",
    "start": "2874400",
    "end": "2881200"
  },
  {
    "text": "goes for binaries actually I can show you a disassembly of Microsoft FTP server which has a form string",
    "start": "2881200",
    "end": "2887160"
  },
  {
    "text": "bug unfortunately a part of the code that is never reached never ever unless",
    "start": "2887160",
    "end": "2892680"
  },
  {
    "text": "you take a hex editor and toggle some",
    "start": "2892680",
    "end": "2896200"
  },
  {
    "text": "Flags yeah I know that jokes Tak some time",
    "start": "2901319",
    "end": "2907079"
  },
  {
    "text": "okay um I'll erase this comment",
    "start": "2912040",
    "end": "2920480"
  },
  {
    "text": "here okay the Pu debug print",
    "start": "2920480",
    "end": "2925839"
  },
  {
    "text": "function is an a debugging printing or debug",
    "start": "2925839",
    "end": "2931559"
  },
  {
    "text": "messaging um function which uses vssn print later on to actually Implement",
    "start": "2931559",
    "end": "2939400"
  },
  {
    "text": "something like a sprintf so the programmer issue a pu debug printf and",
    "start": "2939400",
    "end": "2945040"
  },
  {
    "text": "therefore can put out error messages kind of like prf which is probably very handy and I have written a small script",
    "start": "2945040",
    "end": "2954079"
  },
  {
    "text": "to automatically detect these format string bugs the funny thing is in nonoptimized codee non like in if",
    "start": "2954079",
    "end": "2960359"
  },
  {
    "text": "something was compiled with not the highest optimization settings you usually have something after a call which is called stack correction all the",
    "start": "2960359",
    "end": "2967480"
  },
  {
    "text": "arguments were pushed onto the stack and then the call was issued and afterwards",
    "start": "2967480",
    "end": "2972760"
  },
  {
    "text": "the stack has to be corrected again because all the arguments to that function are still on the stack wasting space so you have something after the",
    "start": "2972760",
    "end": "2979400"
  },
  {
    "text": "call which is called stack correction here they add the amount of arguments times four for the size of the arguments",
    "start": "2979400",
    "end": "2987160"
  },
  {
    "text": "to the ESP so you can see an argument efficiency in the disassembly by looking",
    "start": "2987160",
    "end": "2993839"
  },
  {
    "text": "at the stack correction and then you can check whether the format string is enclosed in",
    "start": "2993839",
    "end": "3000240"
  },
  {
    "text": "double quotes or whether it's Dynamic and therefore find these buggers",
    "start": "3000240",
    "end": "3006599"
  },
  {
    "text": "so we have a total of 212 ques to pu",
    "start": "3006839",
    "end": "3012040"
  },
  {
    "text": "debug print now we have two Alternatives we either go through each one and",
    "start": "3012040",
    "end": "3017640"
  },
  {
    "text": "look which I won't do or we write ourselves script which does all the",
    "start": "3017640",
    "end": "3022880"
  },
  {
    "text": "checking for us now to start with some Shameless self advertisement I'm holding a class on",
    "start": "3022880",
    "end": "3029400"
  },
  {
    "text": "this entire binding auditing crap at blackhead usually so um if you want to learn more about it contact me and I'll",
    "start": "3029400",
    "end": "3035839"
  },
  {
    "text": "gladly teach you I have to pay my rent",
    "start": "3035839",
    "end": "3040760"
  },
  {
    "text": "somehow so the Ida disassembler is scriptable you can perform boring tasks",
    "start": "3044880",
    "end": "3052359"
  },
  {
    "text": "automatically so I have created a script that Tak takes two inputs first of the",
    "start": "3052359",
    "end": "3058680"
  },
  {
    "text": "address of the function that we're dealing with secondly or it takes three inputs secondly the amount of Stack",
    "start": "3058680",
    "end": "3067559"
  },
  {
    "text": "correction it needs to have like it it should have as a minimum for sprintf",
    "start": "3067559",
    "end": "3073480"
  },
  {
    "text": "that would be 12 for printf that would be eight because we need at least two arguments for printf or three for",
    "start": "3073480",
    "end": "3079880"
  },
  {
    "text": "sprintf and then you or then it checks whether the string length of the format",
    "start": "3079880",
    "end": "3085400"
  },
  {
    "text": "string is longer than one it gets confused by a simple print F back sln because that's only one character but um",
    "start": "3085400",
    "end": "3091839"
  },
  {
    "text": "well I never claim to write bug free code I'll just run this and if this is",
    "start": "3091839",
    "end": "3097359"
  },
  {
    "text": "confusing you right now and not really helping you out with understanding format strings better don't worry we",
    "start": "3097359",
    "end": "3102960"
  },
  {
    "text": "still got time for that later okay I'm running this",
    "start": "3102960",
    "end": "3110040"
  },
  {
    "text": "script the address of the function we're investigating oh I for to figure out the",
    "start": "3111880",
    "end": "3117160"
  },
  {
    "text": "minimum stack correction this was not",
    "start": "3117160",
    "end": "3121599"
  },
  {
    "text": "good so we have to calculate the minimum stack",
    "start": "3122200",
    "end": "3128480"
  },
  {
    "text": "correction we have three arguments in this format string and we only need one",
    "start": "3128920",
    "end": "3136079"
  },
  {
    "text": "so the stack correction of one C Hax 28 is 8 bytes larger than what we need we",
    "start": "3136079",
    "end": "3142559"
  },
  {
    "text": "need a stack correction of 20 because we only need one format character and there's threes in this format string string here so the correct stack",
    "start": "3142559",
    "end": "3149880"
  },
  {
    "text": "correction would be",
    "start": "3149880",
    "end": "3152558"
  },
  {
    "text": "20 and it was the fourth argument which was the was the format string if I",
    "start": "3159000",
    "end": "3165160"
  },
  {
    "text": "remember correctly if I'm wrong now we notice in a second we let the script",
    "start": "3165160",
    "end": "3171559"
  },
  {
    "text": "run and it hasn't found anything so I made a mistake with the number of the",
    "start": "3172160",
    "end": "3177240"
  },
  {
    "text": "format string 1 2 3 4 yes this is",
    "start": "3177240",
    "end": "3182880"
  },
  {
    "text": "true hold on for a",
    "start": "3183000",
    "end": "3186640"
  },
  {
    "text": "second H never try to present something you",
    "start": "3191720",
    "end": "3197520"
  },
  {
    "text": "haven't tested they'll work in a minute I think you're used to me fumbling up now so",
    "start": "3197520",
    "end": "3206880"
  },
  {
    "text": "last try",
    "start": "3225520",
    "end": "3228799"
  },
  {
    "text": "oh yeah here we go um it has successfully",
    "start": "3238359",
    "end": "3244559"
  },
  {
    "text": "detected an addition to ESP with an argument efficiency",
    "start": "3244559",
    "end": "3250240"
  },
  {
    "text": "16 and dynamic format string argument four is not enclosed in double",
    "start": "3250240",
    "end": "3255400"
  },
  {
    "text": "quotes it's temp buff actually here temp buff is created before using a double",
    "start": "3255400",
    "end": "3261839"
  },
  {
    "text": "Sprint like a w Sprint fa so they create this debug string command too long",
    "start": "3261839",
    "end": "3268000"
  },
  {
    "text": "partial percent D bytes now percent D blah blah blah from host percent s that",
    "start": "3268000",
    "end": "3273359"
  },
  {
    "text": "from host is actually looked up through a DNS query so if we were to enable",
    "start": "3273359",
    "end": "3279799"
  },
  {
    "text": "debug Flags in this Microsoft fvp server which is not enabled by default or which",
    "start": "3279799",
    "end": "3284839"
  },
  {
    "text": "is a bit tricky to enable and we would then spoof or write or run a Rog DNS",
    "start": "3284839",
    "end": "3291079"
  },
  {
    "text": "server and connect and send a too long string to that FTP server Microsoft",
    "start": "3291079",
    "end": "3297640"
  },
  {
    "text": "would catch it and have us get in there via a format string bug rooster do you know any FTP servers in the Microsoft",
    "start": "3297640",
    "end": "3303839"
  },
  {
    "text": "network running on debug mode okay thanks um this just to to introduce you",
    "start": "3303839",
    "end": "3312559"
  },
  {
    "text": "to the topic of binary auditing because it's one of my stranger",
    "start": "3312559",
    "end": "3318359"
  },
  {
    "text": "Hobbies anyways enough confusion I was just trying to show you that these things can be found automatically in the",
    "start": "3318359",
    "end": "3325240"
  },
  {
    "text": "binary and I think you'll want to go back to some of the actual playing with",
    "start": "3325240",
    "end": "3331839"
  },
  {
    "text": "format string bugs now we show before that we send this string here and pop",
    "start": "3331839",
    "end": "3341720"
  },
  {
    "text": "from the stack we eventually get to our own",
    "start": "3341720",
    "end": "3347400"
  },
  {
    "text": "data does everybody understand why this is the case this is the case",
    "start": "3347400",
    "end": "3354160"
  },
  {
    "text": "because the buffer lame two which is the buffer supplied by the",
    "start": "3354160",
    "end": "3362359"
  },
  {
    "text": "user is on the stack so it's clear now why we're reading out three values before we",
    "start": "3362359",
    "end": "3368400"
  },
  {
    "text": "actually re reach our own data we read out the return value then sock then blah",
    "start": "3368400",
    "end": "3375160"
  },
  {
    "text": "and then our data because we're reading upwards from here basically so we eventually reach this",
    "start": "3375160",
    "end": "3383039"
  },
  {
    "text": "and we can now read out arbitrary data by for",
    "start": "3383039",
    "end": "3388960"
  },
  {
    "text": "example this will SE fault now but this is will try to read the string at address 41 414141",
    "start": "3392640",
    "end": "3400799"
  },
  {
    "text": "that's pretty clear we can now read arbitrary data there's no data at 4141 4141",
    "start": "3401160",
    "end": "3408839"
  },
  {
    "text": "but um doesn't really matter we can supply other values here um we can write to arbitary",
    "start": "3408839",
    "end": "3416280"
  },
  {
    "text": "addresses using PR n we've shown that before as well and if push comes to shove and we",
    "start": "3416280",
    "end": "3422280"
  },
  {
    "text": "don't have anything used to to write to we can still do something like",
    "start": "3422280",
    "end": "3428400"
  },
  {
    "text": "percent 20,000 s and smash just about any buffer if they're not using SN",
    "start": "3428400",
    "end": "3434960"
  },
  {
    "text": "printf so there's a whole lot of things we can do once we have a format string",
    "start": "3435359",
    "end": "3440520"
  },
  {
    "text": "bug actually I'm using Sprint F here so we can actually try to smash the buffer the target buffer is 5,00 byes",
    "start": "3440520",
    "end": "3447839"
  },
  {
    "text": "long",
    "start": "3447839",
    "end": "3450839"
  },
  {
    "text": "so we'll try this I don't know whether actually that",
    "start": "3453400",
    "end": "3459599"
  },
  {
    "text": "lipy will handle values as large as 6,000 but we'll see um and I think the server has just",
    "start": "3459599",
    "end": "3468160"
  },
  {
    "text": "died yeah so format string bugs really are",
    "start": "3468160",
    "end": "3475599"
  },
  {
    "text": "fun to play with unfortunately they've gone away far too quickly I mean um the NSA predicted 20",
    "start": "3475599",
    "end": "3483280"
  },
  {
    "text": "years ago that buffer overs wouldn't be around for much longer but perer overuns are so elusive in nature that they can",
    "start": "3483280",
    "end": "3489160"
  },
  {
    "text": "still be found pretty much anywhere just go and audit Apachi the modules are insanely bad and one would think that",
    "start": "3489160",
    "end": "3495319"
  },
  {
    "text": "Apache is pretty secure and F string bugs can be found",
    "start": "3495319",
    "end": "3500400"
  },
  {
    "text": "automatically so the hunters don't have to go out there hunting big animals and um being afraid of being being lost in",
    "start": "3500400",
    "end": "3506520"
  },
  {
    "text": "the code woods but they just send their little script out there does all the hunting and um remes all the funny",
    "start": "3506520",
    "end": "3513039"
  },
  {
    "text": "little animals and they're gone up until the next bug class comes",
    "start": "3513039",
    "end": "3521640"
  },
  {
    "text": "out um any more questions concerning the format string bugs okay any other yes",
    "start": "3523039",
    "end": "3533119"
  },
  {
    "text": "SE Windows yeah yeah uh you mean for in the wild",
    "start": "3533799",
    "end": "3539599"
  },
  {
    "text": "applications yeah I gave checkpoint a working one for their administrative",
    "start": "3539599",
    "end": "3545559"
  },
  {
    "text": "client I haven't seen any of them published but there's about five people",
    "start": "3545559",
    "end": "3551599"
  },
  {
    "text": "writing an exploits and two of them are Japanese and don't speak English and um",
    "start": "3551599",
    "end": "3557000"
  },
  {
    "text": "there are a few more writing ant exploits actually but they're not very good at it it seems most of the ant Shell Code you see most of the ant",
    "start": "3557000",
    "end": "3563160"
  },
  {
    "text": "exploits you see are very very bad people don't like just creating an exploit for their own Labb just testing",
    "start": "3563160",
    "end": "3569000"
  },
  {
    "text": "it there or using e i exploits or whatever so the anti exploit writing",
    "start": "3569000",
    "end": "3574400"
  },
  {
    "text": "scene is very very small compared to the unix's exploit writing scene and to be honest no like outside",
    "start": "3574400",
    "end": "3583280"
  },
  {
    "text": "of government organization I know organizations I know about three people looking at binaries and you don't find",
    "start": "3583280",
    "end": "3588920"
  },
  {
    "text": "format string bugs with stress testing usually so you don't have too many of them on Windows anyways another thing",
    "start": "3588920",
    "end": "3595359"
  },
  {
    "text": "that's going on on Windows is that you don't have sysock sysock is a famous source of format string bugs you have",
    "start": "3595359",
    "end": "3600720"
  },
  {
    "text": "something called format message and then send message and so on um no not send message but format message which is not",
    "start": "3600720",
    "end": "3606760"
  },
  {
    "text": "exploitable for format string bugs so the amount of I have to be honest I've never seen a format string bug in an",
    "start": "3606760",
    "end": "3613280"
  },
  {
    "text": "application specifically written for for NT I've seen format string bugs in",
    "start": "3613280",
    "end": "3618440"
  },
  {
    "text": "applications ported from other platforms checkpoint was not explicitly written for n but you had Unix programmers and",
    "start": "3618440",
    "end": "3624400"
  },
  {
    "text": "my explanation was this for this one that most um Windows programmers have never heard that something like vprint",
    "start": "3624400",
    "end": "3630079"
  },
  {
    "text": "exists I mean they're too busy using",
    "start": "3630079",
    "end": "3633960"
  },
  {
    "text": "MFC any other",
    "start": "3635400",
    "end": "3638838"
  },
  {
    "text": "questions okay then um I apologize for not having enough stuff to fill the second half completely but I think the",
    "start": "3640520",
    "end": "3646240"
  },
  {
    "text": "stuff I presented should make for some nice experimentation at home and I thank you for being here have a good day",
    "start": "3646240",
    "end": "3655000"
  },
  {
    "text": "e",
    "start": "3714839",
    "end": "3717839"
  },
  {
    "text": "e",
    "start": "3744839",
    "end": "3747839"
  },
  {
    "text": "e",
    "start": "3774839",
    "end": "3777839"
  },
  {
    "text": "e e",
    "start": "3804760",
    "end": "3808760"
  }
]