[
  {
    "text": "all right good morning everyone we're going to get started um welcome to Shell on Earth",
    "start": "40",
    "end": "5720"
  },
  {
    "text": "from browser to system compromise with Matt malen Yahweh jel Spelman and Abdul",
    "start": "5720",
    "end": "12519"
  },
  {
    "text": "Hariri um before we begin um it's a reminder to please stop by the business Hall located in Bayside AB to visit all",
    "start": "12519",
    "end": "19960"
  },
  {
    "text": "of our vendors um and there's a welcome reception there tonight from 5:30 to 7",
    "start": "19960",
    "end": "25920"
  },
  {
    "text": "the black hat Arsenal is in the Palm foyer on level three and remember to join us for the pony",
    "start": "25920",
    "end": "32360"
  },
  {
    "text": "Awards in manderlay Bay BCD at 6:30 and please remember to put your phones on",
    "start": "32360",
    "end": "38239"
  },
  {
    "text": "vibrate",
    "start": "38239",
    "end": "40920"
  },
  {
    "text": "thanks hi there everybody um this is a sh on Earth uh there's a dollar sign in",
    "start": "43920",
    "end": "49399"
  },
  {
    "text": "the title uh it's a shout out to all the Unix users out there which is everyone now because the windows has",
    "start": "49399",
    "end": "56440"
  },
  {
    "text": "bash and uh to all the nontechnical people they ask why you have a dollar",
    "start": "56440",
    "end": "61960"
  },
  {
    "text": "sign your title it's uh because it makes your uh your talk more baller with the S",
    "start": "61960",
    "end": "68720"
  },
  {
    "text": "instead of the you know the dollar sign instead of the S So today we're going to be talking about the pon contest",
    "start": "68720",
    "end": "74680"
  },
  {
    "text": "Evolution uh history of pone remote browser to Colonel exploits uh the full",
    "start": "74680",
    "end": "80439"
  },
  {
    "text": "attack chains of the eight winning submissions of Pono this year and then",
    "start": "80439",
    "end": "86119"
  },
  {
    "text": "we will conclude so my name is Matt m Yi I'm security researcher for the zero day",
    "start": "86119",
    "end": "92759"
  },
  {
    "text": "initiative um in my spare time I was a two-time United States finalist uh competition DJ um and that's what I do",
    "start": "92759",
    "end": "100640"
  },
  {
    "text": "for fun and uh that's why my Twitter handle is DJ Manila ice so I'm also",
    "start": "100640",
    "end": "106520"
  },
  {
    "text": "playing uh the def gone party later in the week so come check it",
    "start": "106520",
    "end": "112520"
  },
  {
    "text": "out hello my name is Abdul I'm a security researcher working for the zdi",
    "start": "113640",
    "end": "118799"
  },
  {
    "text": "um I've been working for the zdi for the past 3 years um of course zdi which is",
    "start": "118799",
    "end": "124479"
  },
  {
    "text": "part of Trend Micro Tipping Point um I do a lot of uh bug Discovery and R cuse analysis",
    "start": "124479",
    "end": "131520"
  },
  {
    "text": "J hey I'm jel Spelman more commonly known as wandering glitch and I'm also with zdi I've been with zdi since 2012",
    "start": "131520",
    "end": "139280"
  },
  {
    "text": "uh tried to focus mostly on reverse engineering and static analysis and in my free time I like to play instruments",
    "start": "139280",
    "end": "145440"
  },
  {
    "text": "and go rock climbing so if you haven't heard of Trend Micro zero day Initiative for the",
    "start": "145440",
    "end": "152000"
  },
  {
    "text": "world's largest vendor agnostic bug bounding program we're focused on vulnerability Discovery and Remediation",
    "start": "152000",
    "end": "158480"
  },
  {
    "text": "and uh we do research into advanced exploitation techniques also note we are number one in vulnerabilities and CVS at",
    "start": "158480",
    "end": "165680"
  },
  {
    "text": "Microsoft and Adobe for 2015 now we'll go into the evolution of",
    "start": "165680",
    "end": "173440"
  },
  {
    "text": "exploit development uh at Pond own so prior to Pond own 2013 these",
    "start": "173440",
    "end": "179760"
  },
  {
    "text": "these were some of the exploit mitigations that were available to the applications that were put to the test",
    "start": "179760",
    "end": "186480"
  },
  {
    "text": "um basically things weren't easy during those times they were pretty hard um when I got started probably five six",
    "start": "186480",
    "end": "192959"
  },
  {
    "text": "years ago that's a lot to catch up with and trying to bypass uh but in 2013 we",
    "start": "192959",
    "end": "199959"
  },
  {
    "text": "made a significant change to the poundon competition where we required the full exploit chain and details around the",
    "start": "199959",
    "end": "206720"
  },
  {
    "text": "vulnerabilities uh to be disclosed we also made much higher payouts to the",
    "start": "206720",
    "end": "213640"
  },
  {
    "text": "winning exploit chains uh to reward all the vulnerability researchers that",
    "start": "213640",
    "end": "218920"
  },
  {
    "text": "participate in the competition each affected vendor uh receives a copy of the exploit chain at",
    "start": "218920",
    "end": "225159"
  },
  {
    "text": "the contest and are given an opportunity to ask questions from the contestant in order to improve their software so it's",
    "start": "225159",
    "end": "232599"
  },
  {
    "text": "a real positive thing and I'm a big fan of it so now let's take a look at some of",
    "start": "232599",
    "end": "238599"
  },
  {
    "text": "the exploit mitigations that have Arisen from the change uh here we can see some",
    "start": "238599",
    "end": "243720"
  },
  {
    "text": "of the employ and exploit mitigations that have been developed and uh details around the exploit techniques and the",
    "start": "243720",
    "end": "249720"
  },
  {
    "text": "vulnerabilities have um definitely made a clear um",
    "start": "249720",
    "end": "255280"
  },
  {
    "text": "impact uh into people's software and is um has influenced the increase of",
    "start": "255280",
    "end": "261280"
  },
  {
    "text": "defensive Technologies being developed today and here's a slide that um shows",
    "start": "261280",
    "end": "269680"
  },
  {
    "text": "was basically our Hall of Fame of folks that have uh produced remote browser to",
    "start": "269680",
    "end": "274880"
  },
  {
    "text": "super user exploit uh they've bypassed pretty much all the things I had",
    "start": "274880",
    "end": "281280"
  },
  {
    "text": "discussed in the prior two slides and it's a tall order and you know we're really proud of these guys so you have",
    "start": "281280",
    "end": "288520"
  },
  {
    "text": "uh John and Niels um you got Sebastian Andreas all these are great guys by the",
    "start": "288520",
    "end": "294160"
  },
  {
    "text": "way uh the keing team um Mario smolinsky um by the the",
    "start": "294160",
    "end": "299720"
  },
  {
    "text": "way his uh his system escalation bug uh is probably the most hilarious bug at",
    "start": "299720",
    "end": "305320"
  },
  {
    "text": "ponon of all time cuz uh he was able to use the uh Emet installer to uh",
    "start": "305320",
    "end": "311240"
  },
  {
    "text": "uninstall EMT and as a result get system with it that's super wild who does that",
    "start": "311240",
    "end": "318918"
  },
  {
    "text": "man and of course our big winner uh 2015 uh Jun Lee um who holds the single",
    "start": "320520",
    "end": "327319"
  },
  {
    "text": "biggest payout in Pon in history as you can see year after year this type of activity where you're escalating uh from",
    "start": "327319",
    "end": "335199"
  },
  {
    "text": "browser remote code execution to U um highest privilege um is increasing uh",
    "start": "335199",
    "end": "341160"
  },
  {
    "text": "and the exploit mitigations are getting bypassed and Sid stepped altogether by the EOL VI uh but this is a really good",
    "start": "341160",
    "end": "347840"
  },
  {
    "text": "thing because the defense uh gets better and uh we make things better uh now",
    "start": "347840",
    "end": "354240"
  },
  {
    "text": "let's go into this year's shell on Earth uh exploit chains at Pondo in 2016",
    "start": "354240",
    "end": "361479"
  },
  {
    "text": "so now we'll be discussing the Safari chain uh produced by team Shield of",
    "start": "362160",
    "end": "367800"
  },
  {
    "text": "10cent keing lab and let's uh let's start with some shells how about that",
    "start": "367800",
    "end": "375000"
  },
  {
    "text": "everybody all right so the VM on the left is the target machine and the VM on",
    "start": "376560",
    "end": "382120"
  },
  {
    "text": "the right is the pone serving machine uh it's sending a dib to get thrown into",
    "start": "382120",
    "end": "387479"
  },
  {
    "text": "the browser to execute the Pro PR escalation and then there's the shell",
    "start": "387479",
    "end": "393000"
  },
  {
    "text": "over there and it's surrounding as a",
    "start": "393000",
    "end": "398120"
  },
  {
    "text": "root and to prove they uh definitely uh got Road shell and can do stuff they uh",
    "start": "400720",
    "end": "406199"
  },
  {
    "text": "road to the rout ped by ke",
    "start": "406199",
    "end": "410520"
  },
  {
    "text": "lab so now let's talk about the chain the um Apple U graphics uh contacts uaf",
    "start": "412080",
    "end": "419160"
  },
  {
    "text": "this was a used after free with a graphics object um Graphics context",
    "start": "419160",
    "end": "424400"
  },
  {
    "text": "object this uh caused execution to die at set platform text drawing mode as you",
    "start": "424400",
    "end": "430560"
  },
  {
    "text": "can see on the slide um if you look at the pseudo code it's controlling the disappointer if you're able to reclaim",
    "start": "430560",
    "end": "436960"
  },
  {
    "text": "the object in time uh when you're doing use after free exploitation uh you want to know who created the object who freed",
    "start": "436960",
    "end": "443560"
  },
  {
    "text": "it and uh which part of your script is uh reusing it so um basically a lot of",
    "start": "443560",
    "end": "449840"
  },
  {
    "text": "this stuff was happening during a filex function call and uh the free was occurring let's",
    "start": "449840",
    "end": "458960"
  },
  {
    "text": "see the free was occurring with a modification to the width attribute of",
    "start": "458960",
    "end": "464479"
  },
  {
    "text": "this um Graphics I'm sorry this canvas object um it was basically resetting the",
    "start": "464479",
    "end": "469840"
  },
  {
    "text": "size to it and then when you change the width it goes and deletes the old one so basically if you uh reclaim this uh you",
    "start": "469840",
    "end": "477759"
  },
  {
    "text": "could do more interesting things Downstream so let's uh discuss the",
    "start": "477759",
    "end": "484000"
  },
  {
    "text": "exploitation steps so after they reclaimed um the freed memory they found",
    "start": "484000",
    "end": "490159"
  },
  {
    "text": "this exploit primitive um with uh the save function",
    "start": "490159",
    "end": "495919"
  },
  {
    "text": "uh within Graphics context save and uh that's what gave them the",
    "start": "495919",
    "end": "501039"
  },
  {
    "text": "arbitrary right they sprayed the memory with strings and frame objects as you can see and that's the memory layout and",
    "start": "501039",
    "end": "509080"
  },
  {
    "text": "then able to use that right primitive to overwrite the String's length um",
    "start": "509080",
    "end": "514599"
  },
  {
    "text": "attribute so they can read um large chunks of memory or whatever they really wanted to and then they read in the",
    "start": "514599",
    "end": "524039"
  },
  {
    "text": "frame view table um pointer to bypass aslr finally they use the write again to",
    "start": "524039",
    "end": "531399"
  },
  {
    "text": "write the V table of the frame object pointer and then called the blur function on it so that they can get code",
    "start": "531399",
    "end": "536920"
  },
  {
    "text": "execution so long story short with multiple usages of this right",
    "start": "536920",
    "end": "542240"
  },
  {
    "text": "primitive you can do cool stuff now let's talk about the",
    "start": "542240",
    "end": "548079"
  },
  {
    "text": "escalation um the bug was in the multi-touch support binary and uh if you",
    "start": "548079",
    "end": "555839"
  },
  {
    "text": "look at uh V2 in this uh slide here let's say that's a uh CF data object um",
    "start": "555839",
    "end": "563519"
  },
  {
    "text": "if you're able to reclaim that uh by kicking off the thread and winning this race condition uh you'll get to do more",
    "start": "563519",
    "end": "570440"
  },
  {
    "text": "interesting things Downstream so here's a race condition details it's invoked by calling exet",
    "start": "570440",
    "end": "578000"
  },
  {
    "text": "Global Force config uh which resides in core Graphics inside the Windows Server",
    "start": "578000",
    "end": "583399"
  },
  {
    "text": "process on OSX and uh you know shortly after the call to this uh function this",
    "start": "583399",
    "end": "589360"
  },
  {
    "text": "unserialized gesture configuration uh function uh there's another call to CF release so if you were claiming in time",
    "start": "589360",
    "end": "596399"
  },
  {
    "text": "and you get this uh CF release called on the data that you control you can make a d reference on the method call of uh",
    "start": "596399",
    "end": "603959"
  },
  {
    "text": "objects uh it's The Objective C stuff but uh object I'm sorry object C message",
    "start": "603959",
    "end": "610760"
  },
  {
    "text": "send when uh the CF release is called and that's how they got direct code",
    "start": "610760",
    "end": "616200"
  },
  {
    "text": "execution oh man this is a lot so yeah basically with this uh this slide don't",
    "start": "616200",
    "end": "621839"
  },
  {
    "text": "let intimidate you they basically called the Windows server to get the connection port to be able to call the uh the",
    "start": "621839",
    "end": "627600"
  },
  {
    "text": "vulnerable function they sprayed memory and they win the race and then you hit the r chain uh by uh hitting your stack",
    "start": "627600",
    "end": "635680"
  },
  {
    "text": "pivot and then uh run your shell code and if you're running in the Windows Server you're running as the Windows",
    "start": "635680",
    "end": "641120"
  },
  {
    "text": "Server uh user but all you have to do is basically call set you ID zero and then",
    "start": "641120",
    "end": "646240"
  },
  {
    "text": "your root so that was it next uh exploit chain is Apple Safari",
    "start": "646240",
    "end": "653320"
  },
  {
    "text": "uh produced by team sniper uh of 10cent Keem lab let's kick off this demo so a lot of",
    "start": "653320",
    "end": "662120"
  },
  {
    "text": "the stuff is being discussed right now uh concurrently with a keing lab um in",
    "start": "662120",
    "end": "667800"
  },
  {
    "text": "another talk so we're just going to go over higher level how this work basically they um had a vulnerability in",
    "start": "667800",
    "end": "676120"
  },
  {
    "text": "JavaScript core able to get a use after free and after that they're able to um",
    "start": "676120",
    "end": "683000"
  },
  {
    "text": "read whatever they wanted to because um they controlled uh the two string function so they could read all memory",
    "start": "683000",
    "end": "690639"
  },
  {
    "text": "and since you're executing in JavaScript well it's executable and they can",
    "start": "690639",
    "end": "696120"
  },
  {
    "text": "redefine the two spring function and uh that's pretty much it",
    "start": "696120",
    "end": "702959"
  },
  {
    "text": "so the layout was exactly this oops the layout was basically the exact",
    "start": "702959",
    "end": "708360"
  },
  {
    "text": "same um sprayed string objects frame objects",
    "start": "708360",
    "end": "713680"
  },
  {
    "text": "and then just code exec and that's pretty much it for the",
    "start": "713680",
    "end": "719000"
  },
  {
    "text": "the chain so the details of the uh kernel portion are being discussed right now it's in that uh Apple Graphics uh",
    "start": "719000",
    "end": "725639"
  },
  {
    "text": "display driver",
    "start": "725639",
    "end": "728680"
  },
  {
    "text": "code the next chain we're going to be discussing is U Apple Safari de kernel U",
    "start": "732320",
    "end": "737440"
  },
  {
    "text": "by Loki",
    "start": "737440",
    "end": "739920"
  },
  {
    "text": "har and we'll kick off this demo so this was composed of a use after",
    "start": "743639",
    "end": "750120"
  },
  {
    "text": "free uh within the renderer process uh heat buffer overflow within the font D process uh sandbox escape to be able to",
    "start": "750120",
    "end": "758320"
  },
  {
    "text": "um escape the sandbox process and then a logic error to execute um to escalate",
    "start": "758320",
    "end": "765120"
  },
  {
    "text": "privileges with the pseudo command which is very interesting so you can see here",
    "start": "765120",
    "end": "772079"
  },
  {
    "text": "there's a there's the shell and do an ID you'll see the",
    "start": "772079",
    "end": "777839"
  },
  {
    "text": "route and the root so popping Kelk popping chills it's pretty",
    "start": "777839",
    "end": "785720"
  },
  {
    "text": "cool all right so this was found by source code auditing uh Loki Hart John",
    "start": "785720",
    "end": "791639"
  },
  {
    "text": "Lee pointed straight to the webkit source code where this used after free",
    "start": "791639",
    "end": "796839"
  },
  {
    "text": "was occurring um in this case uh he noted that if mq is null and only M",
    "start": "796839",
    "end": "803079"
  },
  {
    "text": "regions exists set track zero on the items and M regions never gets called so",
    "start": "803079",
    "end": "809040"
  },
  {
    "text": "after that you got your dangling pointer start reclaiming so the exploitation steps go",
    "start": "809040",
    "end": "816279"
  },
  {
    "text": "as so uh he uh leaked a heap address off of a list object within M",
    "start": "816279",
    "end": "822360"
  },
  {
    "text": "regions um he sprayed a series of string objects allocated around the track",
    "start": "822360",
    "end": "828760"
  },
  {
    "text": "element um he leaked AR arbitrary addesses with the mode attribute with",
    "start": "828760",
    "end": "834920"
  },
  {
    "text": "the associated track element then he sprayed Ray buffer objects around and uh",
    "start": "834920",
    "end": "841360"
  },
  {
    "text": "corrupted the AFF forementioned list attribute which is that VT region list object and and achieve the right",
    "start": "841360",
    "end": "847639"
  },
  {
    "text": "primitive allowing for out of bounds read and right access um finally this is a a rless",
    "start": "847639",
    "end": "853680"
  },
  {
    "text": "execution because it's happening within JavaScript uh he basically was able to get runtime",
    "start": "853680",
    "end": "859399"
  },
  {
    "text": "evaluation um by dropping a shell code into um a jscript function having it be",
    "start": "859399",
    "end": "865839"
  },
  {
    "text": "evaluated and then rewiring it to um be called with the on Q change uh",
    "start": "865839",
    "end": "874120"
  },
  {
    "text": "function uh within the reclaimed object so now we'll talk about more",
    "start": "874120",
    "end": "881920"
  },
  {
    "text": "privilege escalation uh font D has a xpc which is font object server so you can",
    "start": "881920",
    "end": "887839"
  },
  {
    "text": "communicate to this uh via that name and if you send uh hex Tu message uh to",
    "start": "887839",
    "end": "895120"
  },
  {
    "text": "reach this function uh which allocates memory uh of the size that readed from",
    "start": "895120",
    "end": "900279"
  },
  {
    "text": "the controlled um data um control pointer um it'll get passed down into",
    "start": "900279",
    "end": "905320"
  },
  {
    "text": "get uncompressed bitmap representation uh get uncompressed bit map representation contains no bounce",
    "start": "905320",
    "end": "911959"
  },
  {
    "text": "checking and as a result you get data copied into the buffer resulting in heat",
    "start": "911959",
    "end": "917079"
  },
  {
    "text": "buffer overflow so he exploited this by",
    "start": "917079",
    "end": "922279"
  },
  {
    "text": "spraying with mock message um and then uh he triggered the heat buffer",
    "start": "922279",
    "end": "929160"
  },
  {
    "text": "flow and then he was able to leak addresses because he's already executing and he can get the addresses of the",
    "start": "929160",
    "end": "934959"
  },
  {
    "text": "modules that are already loaded into memory and then he built his R chain uh",
    "start": "934959",
    "end": "940079"
  },
  {
    "text": "and then called ECT to Mark stuff executable and that's how again code ex code",
    "start": "940079",
    "end": "946560"
  },
  {
    "text": "EXA the OSX font D sandbox Escape was found by looking at this file which is",
    "start": "946560",
    "end": "952880"
  },
  {
    "text": "the font D internal SB file which is located in user share sandbox uh he",
    "start": "952880",
    "end": "959079"
  },
  {
    "text": "found that font validator was not sandbox and after looking at the binary",
    "start": "959079",
    "end": "964560"
  },
  {
    "text": "he saw that the environment variable um XT framework resources path um could be",
    "start": "964560",
    "end": "970560"
  },
  {
    "text": "changed and he changed that so that it would point to load a module that he",
    "start": "970560",
    "end": "975959"
  },
  {
    "text": "controlled and run his code that way uh so basically is an environment variable",
    "start": "975959",
    "end": "982160"
  },
  {
    "text": "problem and um the stuff not running um not running sandboxed so",
    "start": "982160",
    "end": "990120"
  },
  {
    "text": "finally um he took a look at the diagnostic um binary that's on the",
    "start": "990120",
    "end": "996199"
  },
  {
    "text": "system uh he was able to create arbitrary directories with this um this binary has a method that reads values",
    "start": "996199",
    "end": "1003120"
  },
  {
    "text": "from the diagnostic messages history pist file and if you supply a key um",
    "start": "1003120",
    "end": "1009199"
  },
  {
    "text": "submit to local folder uh with the value of a directory uh you will get an",
    "start": "1009199",
    "end": "1014880"
  },
  {
    "text": "arbitrary directory created for you so how do you us this he",
    "start": "1014880",
    "end": "1021440"
  },
  {
    "text": "uh he basically created his directory at VAR DB pseudo and uh with the username of the",
    "start": "1021440",
    "end": "1029959"
  },
  {
    "text": "guy that's running and it makes an updated directory um modified time and",
    "start": "1029959",
    "end": "1038400"
  },
  {
    "text": "basically that modified time is checked by the pseudo um",
    "start": "1038400",
    "end": "1044438"
  },
  {
    "text": "binary and if it's within a certain time range you don't have to type in the password",
    "start": "1044439",
    "end": "1051720"
  },
  {
    "text": "and then if you can run pseudo well you get your sandwich and that's how that",
    "start": "1051720",
    "end": "1058880"
  },
  {
    "text": "works and uh yeah you get to do rude things so I'll turn it over to jel he's going to talk about",
    "start": "1058880",
    "end": "1064430"
  },
  {
    "text": "[Music] Chrome so the uh really the only Chrome",
    "start": "1064430",
    "end": "1070720"
  },
  {
    "text": "entry we had was from 360 Bulan and this one was actually a little bit more drama",
    "start": "1070720",
    "end": "1075799"
  },
  {
    "text": "filled than uh any of the other entries um it consists of four different",
    "start": "1075799",
    "end": "1081640"
  },
  {
    "text": "bugs it starts off with a chrome out of- bounds vulnerability followed by two flash use after freeze and then finally",
    "start": "1081640",
    "end": "1087440"
  },
  {
    "text": "a kernel use after free here you can see uh they're running",
    "start": "1087440",
    "end": "1092760"
  },
  {
    "text": "a notepad as system at least should be able to see um this kernel vulnerability",
    "start": "1092760",
    "end": "1099000"
  },
  {
    "text": "as well as all the other uh Windows kernel vulnerabilities from all the researchers they uh they all stole the",
    "start": "1099000",
    "end": "1105159"
  },
  {
    "text": "system token by iterating through the process list in colel land and then finding the system process with the P4",
    "start": "1105159",
    "end": "1112679"
  },
  {
    "text": "taking that and then applying it to the current process the Google Chrome vulnerability",
    "start": "1112679",
    "end": "1119120"
  },
  {
    "text": "is especially interesting in that it was found and reported just 3 days prior to",
    "start": "1119120",
    "end": "1125280"
  },
  {
    "text": "uh Ponda own so in 2015 we introduced a a change to the rules where we would",
    "start": "1125280",
    "end": "1131200"
  },
  {
    "text": "consult with the vendors and if they found that they already knew about the vulnerability we would treat that uh",
    "start": "1131200",
    "end": "1137559"
  },
  {
    "text": "part of the chain as a partial so this actually got treated as a partial what's interesting is Google gave us a chromium",
    "start": "1137559",
    "end": "1144640"
  },
  {
    "text": "bug ID and if you look at that it was duped against another bug ID that is now",
    "start": "1144640",
    "end": "1150120"
  },
  {
    "text": "credited to Keen laab so Keen laab killed a bug that 360 vulin was planning on using or did use that's just quite",
    "start": "1150120",
    "end": "1157840"
  },
  {
    "text": "interesting the vulnerability itself is in iterate elements and the issue is in",
    "start": "1157840",
    "end": "1163840"
  },
  {
    "text": "an assumption that accessing elements of an array is safe they knew that accessing elements of other objects is",
    "start": "1163840",
    "end": "1169679"
  },
  {
    "text": "unsafe and so they had an explicit check to make sure that they were not acting on any other type of object but array",
    "start": "1169679",
    "end": "1176799"
  },
  {
    "text": "accesses was actually not as safe as they thought in that you could add a custom accessor method a getter method",
    "start": "1176799",
    "end": "1183520"
  },
  {
    "text": "that would execute whenever you access any given element looking at it in code this is a",
    "start": "1183520",
    "end": "1189559"
  },
  {
    "text": "proof of concept that will trigger the vulnerability the interesting thing to note is evil call back here uh this",
    "start": "1189559",
    "end": "1194679"
  },
  {
    "text": "function will change the length of the array that's being acted on and as a result it'll free the old storage so",
    "start": "1194679",
    "end": "1200919"
  },
  {
    "text": "you're now acting on freed memory then uh you apply it to the array prototype",
    "start": "1200919",
    "end": "1206120"
  },
  {
    "text": "uh by calling Define getter and you just set it for any index in this case it's setting it to zero but it could be",
    "start": "1206120",
    "end": "1211760"
  },
  {
    "text": "anything the third portion of this uh proof of concept is just filling in the array so it has some elements that are",
    "start": "1211760",
    "end": "1218400"
  },
  {
    "text": "legitimately being going to be acted upon and then you call array. concat which will trigger the call to iterate",
    "start": "1218400",
    "end": "1224799"
  },
  {
    "text": "elements and as a result you um end up going going in in this case with an array of size four and you go in and you",
    "start": "1224799",
    "end": "1234120"
  },
  {
    "text": "then continue acting on four elements that don't actually exist as far as exploiting this uh 360",
    "start": "1234120",
    "end": "1242080"
  },
  {
    "text": "Vulcan allocated an array buffer object in the free storage and use this to craft a custom array buffer object that",
    "start": "1242080",
    "end": "1248799"
  },
  {
    "text": "had a size that they were able to control and they use this to get arbitrary reads and wrs one of the key",
    "start": "1248799",
    "end": "1254880"
  },
  {
    "text": "portions of this part of the chain was leaking the address of Cur 32 and they did this by leaking the address of a",
    "start": "1254880",
    "end": "1261320"
  },
  {
    "text": "text object then using the arbitrary reads and writes they use that to get the address of chrome dll once they had",
    "start": "1261320",
    "end": "1267919"
  },
  {
    "text": "the address of chrome dll they use that to parse the import address table and find Colonel",
    "start": "1267919",
    "end": "1274640"
  },
  {
    "text": "32 uh once they had once they had that they then triggered the flash portion of their exploit chain the first part is a",
    "start": "1277720",
    "end": "1285400"
  },
  {
    "text": "use after free in the handling of action script to transform objects this vulnerability is solely used as an",
    "start": "1285400",
    "end": "1292559"
  },
  {
    "text": "information leak and that that's all it really can be used for the issue is that transform objects contain a matrix",
    "start": "1292559",
    "end": "1299559"
  },
  {
    "text": "property which is just an instance of the Matrix class and whenever you access",
    "start": "1299559",
    "end": "1305279"
  },
  {
    "text": "transform. Matrix any uh The Matrix property of any transform object it will create a new instance of the Matrix",
    "start": "1305279",
    "end": "1312600"
  },
  {
    "text": "class the issue specifically is that action script 2 is very very lenient and",
    "start": "1312600",
    "end": "1318120"
  },
  {
    "text": "and when you access the Matrix class you can actually trigger uh userdefined code",
    "start": "1318120",
    "end": "1323320"
  },
  {
    "text": "if you hook a uh if you hook flash. geome and add a custom accessor",
    "start": "1323320",
    "end": "1329480"
  },
  {
    "text": "method uh another thing here is action script 2 is very uh very lenient and as",
    "start": "1329480",
    "end": "1336440"
  },
  {
    "text": "a result uh you can you can bind it to a uh to a matrix and allocate another",
    "start": "1336440",
    "end": "1342799"
  },
  {
    "text": "object so you'll get object addresses as a result of well just reading what",
    "start": "1342799",
    "end": "1348400"
  },
  {
    "text": "should have been there the proof of concept here is fairly straightforward we can ignore the first part it's basically just getting a movie clip and",
    "start": "1348400",
    "end": "1355240"
  },
  {
    "text": "getting a transform object that we'll access the second part is getting access to the geome object namespace that gets",
    "start": "1355240",
    "end": "1362799"
  },
  {
    "text": "modified after that is uh saving an original reference to the original Matrix because that has to be returned",
    "start": "1362799",
    "end": "1369400"
  },
  {
    "text": "so that you can actually continue a code execution properly the most interesting part is the third part of the proof of",
    "start": "1369400",
    "end": "1375919"
  },
  {
    "text": "concept where they're adding the property to to The Matrix or to the jom object and here in this case they're",
    "start": "1375919",
    "end": "1382679"
  },
  {
    "text": "removing the object and then just removing the movie clip and then returning the original Matrix the actual",
    "start": "1382679",
    "end": "1388200"
  },
  {
    "text": "exploit they replace it with a custom object that they're choosing so that they can then use it in the second uh",
    "start": "1388200",
    "end": "1394400"
  },
  {
    "text": "flash vulnerability so all in all uh to exploit this they triggered the vulnerability then within the custom",
    "start": "1394400",
    "end": "1401200"
  },
  {
    "text": "accessor between freeing the movie clip and returning the original they allocated a bunch of custom objects then",
    "start": "1401200",
    "end": "1408039"
  },
  {
    "text": "they just read the Val values back from the Matrix property and Ed that to know exactly where in memory their custom",
    "start": "1408039",
    "end": "1414240"
  },
  {
    "text": "objects were allocated the second uh flash vulnerability and the last part of the",
    "start": "1414240",
    "end": "1420159"
  },
  {
    "text": "user land chain is in the handling of the load vars object it's used after free and also in action script too load",
    "start": "1420159",
    "end": "1427760"
  },
  {
    "text": "bars contains a decode method which is used to take eural encoded strings and",
    "start": "1427760",
    "end": "1432919"
  },
  {
    "text": "use that to set properties on an object so if you have a string that says a equals 1 amp saying b equals 2 you apply",
    "start": "1432919",
    "end": "1440159"
  },
  {
    "text": "it on a object it'll set it so that object. a is one and object. B is 2 the",
    "start": "1440159",
    "end": "1447039"
  },
  {
    "text": "whole issue here is uh one of the properties that's built into uh to action script actually script General is",
    "start": "1447039",
    "end": "1454480"
  },
  {
    "text": "object. watch which allows you to set a call back that will fire whenever any property is modified and as a result you",
    "start": "1454480",
    "end": "1462559"
  },
  {
    "text": "can modify and free movie clips and replace the object and get uh us after",
    "start": "1462559",
    "end": "1469200"
  },
  {
    "text": "free once again here is the proof of concept and just as with the previous one the first portion is not too",
    "start": "1469200",
    "end": "1476039"
  },
  {
    "text": "interesting it's just setting up the uh variables that we'll be using the interesting part is really in the second",
    "start": "1476039",
    "end": "1482360"
  },
  {
    "text": "portion where you're calling MC doat saying it on AAA so when AAA is set or",
    "start": "1482360",
    "end": "1489120"
  },
  {
    "text": "modified uh this function will run and in this case they're only removing the movie clip but for the full exploit they",
    "start": "1489120",
    "end": "1495919"
  },
  {
    "text": "reclaim that memory by allocating their custom objects uh the last part is where you're actually triggering the call now",
    "start": "1495919",
    "end": "1502240"
  },
  {
    "text": "note that my LV that the load bars object uh has its decode method called",
    "start": "1502240",
    "end": "1507919"
  },
  {
    "text": "but it's actually being applied so that the properties are set on the movie clip",
    "start": "1507919",
    "end": "1513080"
  },
  {
    "text": "this is the this is uh required for the actual exploit otherwise the use after free would not actually occur because it",
    "start": "1513080",
    "end": "1519440"
  },
  {
    "text": "would not be writing to the movie clip object so triggering the vulnerability",
    "start": "1519440",
    "end": "1525679"
  },
  {
    "text": "uh is part of setting the a dynamic call occurs an indirect call um to bypass",
    "start": "1525679",
    "end": "1531799"
  },
  {
    "text": "that the kernel 32 information leak is used so that you can actually return clean and continue things on for the",
    "start": "1531799",
    "end": "1537279"
  },
  {
    "text": "rest of the uh exploit as part of reclaiming the memory they're able to achieve a arbitrary address uh decrement",
    "start": "1537279",
    "end": "1545399"
  },
  {
    "text": "and although this is limited because they have the information leaked from the first flash vulnerability they use",
    "start": "1545399",
    "end": "1551240"
  },
  {
    "text": "this to decrement the reference count and replace that object with a custom object or with a bite array so now they",
    "start": "1551240",
    "end": "1558279"
  },
  {
    "text": "have two objects pointing to the same address and they have the bite array",
    "start": "1558279",
    "end": "1563919"
  },
  {
    "text": "which has sizes and uh positions and they have their custom object using the",
    "start": "1563919",
    "end": "1568960"
  },
  {
    "text": "custom object they're able to change the size such that it is much much larger than it actually is and they're able to",
    "start": "1568960",
    "end": "1575559"
  },
  {
    "text": "read and write through basically all of memory just by updating position and reading and",
    "start": "1575559",
    "end": "1581720"
  },
  {
    "text": "writing the kernel portion of the uh the chain was a use after free in surface",
    "start": "1581720",
    "end": "1587880"
  },
  {
    "text": "objects uh this arises due to the fact that window objects are created and",
    "start": "1587880",
    "end": "1593120"
  },
  {
    "text": "handled by the wind 32k subsystem but uh All Surface objects and related objects",
    "start": "1593120",
    "end": "1599360"
  },
  {
    "text": "are handled by the desktop Window Manager dwm.exe as a result of uh some mishandling of",
    "start": "1599360",
    "end": "1606679"
  },
  {
    "text": "reference counts it was possible to get a a compatible DC object to have its reference count messed up um and it was",
    "start": "1606679",
    "end": "1615000"
  },
  {
    "text": "not properly tracking things so a surface object would end up getting freed even though it and it was safe but",
    "start": "1615000",
    "end": "1621720"
  },
  {
    "text": "the the associated compatible device Contex object would not be so you'd have",
    "start": "1621720",
    "end": "1627240"
  },
  {
    "text": "a dangling pointer that you could abuse one issue with this is cleanup is vital as part of process uh termination",
    "start": "1627240",
    "end": "1634279"
  },
  {
    "text": "process death involves a cleanup of all these objects and if you don't clean things up properly after exploitation or",
    "start": "1634279",
    "end": "1640880"
  },
  {
    "text": "just in general then it would cause a blue screen and the entire system would shut",
    "start": "1640880",
    "end": "1646520"
  },
  {
    "text": "down uh exploitation was about standard for the 360 chains it was reclaim the",
    "start": "1646520",
    "end": "1653240"
  },
  {
    "text": "object with a accelerator table objects and then bitmap objects and then use the bitmap objects to achieve arbitrary read",
    "start": "1653240",
    "end": "1660120"
  },
  {
    "text": "and write access and as I said when I was showing the video they use this to iterate through the process list and",
    "start": "1660120",
    "end": "1665360"
  },
  {
    "text": "seal the system token and apply it to the current process so now I'm going to go over the",
    "start": "1665360",
    "end": "1671880"
  },
  {
    "text": "doe flash chain from 360 this is the pure flash entry um the previous was solely Chrome even though it did have",
    "start": "1671880",
    "end": "1678279"
  },
  {
    "text": "two flash vulnerabilities so here's the proof of concept itself uh this starts off with a",
    "start": "1678279",
    "end": "1684960"
  },
  {
    "text": "flash type confusion vulnerability and then leads to a kernel use after free the type confusion vulnerability is used",
    "start": "1684960",
    "end": "1691360"
  },
  {
    "text": "for first an information leak and then an arbitrary use after free and the kernel use after free is used basically",
    "start": "1691360",
    "end": "1698039"
  },
  {
    "text": "just to get a arbitrary read and write",
    "start": "1698039",
    "end": "1701879"
  },
  {
    "text": "access so once again uh they have notepad running as",
    "start": "1706440",
    "end": "1712600"
  },
  {
    "text": "system the issue here is in the handling of Net Connection objects uh Net",
    "start": "1713399",
    "end": "1718519"
  },
  {
    "text": "Connection objects in action script 2 are uh a little bit different than your",
    "start": "1718519",
    "end": "1723559"
  },
  {
    "text": "typical objects all action script 2 script objects contain a type ID as well as private data that is specific to the",
    "start": "1723559",
    "end": "1730760"
  },
  {
    "text": "type ID typically objects have their type ID and their private data set at",
    "start": "1730760",
    "end": "1736200"
  },
  {
    "text": "the same time but Net Connection objects have them set as part of establishing a",
    "start": "1736200",
    "end": "1741640"
  },
  {
    "text": "connection the secondary issue that's just inherent to actionscript 2 and actually JavaScript ecmascript in",
    "start": "1741640",
    "end": "1747880"
  },
  {
    "text": "general is implicit type conversions where if you try to treat something as a",
    "start": "1747880",
    "end": "1753039"
  },
  {
    "text": "object type that it's not it'll try and convert it to the type you'd actually like it to and if that fails okay but it",
    "start": "1753039",
    "end": "1759799"
  },
  {
    "text": "does offer an opportunity for executing code that may not have been uh expected or",
    "start": "1759799",
    "end": "1765760"
  },
  {
    "text": "intended this is the proof concept uh we're actually uh looking at it's probably easiest to start bottom and",
    "start": "1765760",
    "end": "1771679"
  },
  {
    "text": "then look up so Net Connection is called uh net connections connect uh function is called but uh before that it's passed",
    "start": "1771679",
    "end": "1779200"
  },
  {
    "text": "a XML object this XML object has a custom attribute that is set the attribute name is irrelevant but the",
    "start": "1779200",
    "end": "1785760"
  },
  {
    "text": "important thing is that it's being set to this o object and this o object has a custom two string function the two",
    "start": "1785760",
    "end": "1792399"
  },
  {
    "text": "string function is calling super and then returning a string calling super",
    "start": "1792399",
    "end": "1797840"
  },
  {
    "text": "uh ends up in calling the cons the super Constructor for Net Connection such that",
    "start": "1797840",
    "end": "1803480"
  },
  {
    "text": "it sets the type ID but by uh allocating color matrix filter objects they're able",
    "start": "1803480",
    "end": "1809559"
  },
  {
    "text": "to confuse color matrix filter objects as a Net Connection object the reason they chose this is",
    "start": "1809559",
    "end": "1816559"
  },
  {
    "text": "that color matrix filter objects contain an array of 20 floats that can be read and written and using this they're able",
    "start": "1816559",
    "end": "1823039"
  },
  {
    "text": "to uh leak a pointer to a string specifically the string that contains the URL that's used for the Net",
    "start": "1823039",
    "end": "1829799"
  },
  {
    "text": "Connection and then they write to it and modify that pointer such that they now have the ability to trigger an arbitrary",
    "start": "1829799",
    "end": "1836559"
  },
  {
    "text": "use after free they use this to uh create a uh to to craft a modified bite",
    "start": "1836559",
    "end": "1842840"
  },
  {
    "text": "array object that has a custom uh length and once they have that they have read and write access to basically all of",
    "start": "1842840",
    "end": "1849320"
  },
  {
    "text": "user L memory and at that point code execution is fairly straightforward the kernel portion is a",
    "start": "1849320",
    "end": "1856639"
  },
  {
    "text": "window U use after free uh arising from user land callbacks uh this is an area",
    "start": "1856639",
    "end": "1862000"
  },
  {
    "text": "that has been hit up quite a bit and still is apparently uh occurring the",
    "start": "1862000",
    "end": "1867799"
  },
  {
    "text": "specific issue is in uh when XXX and defer window pause X calls post IM shell",
    "start": "1867799",
    "end": "1875120"
  },
  {
    "text": "hook message X the issue is that they're only using a an H wind a handle to a",
    "start": "1875120",
    "end": "1881039"
  },
  {
    "text": "window which is generally safe but post shell hook message X does not actually do any verification of of the handle",
    "start": "1881039",
    "end": "1887799"
  },
  {
    "text": "it's given it assumes it's still valid and it's kind of hard to see here but A3 is the window handle and it is just",
    "start": "1887799",
    "end": "1894720"
  },
  {
    "text": "directly uh offsetting into the pointer in G shared info uh typically you would you would",
    "start": "1894720",
    "end": "1901960"
  },
  {
    "text": "make sure it's still valid by contacting the uh the uh handle manager and uh or",
    "start": "1901960",
    "end": "1908360"
  },
  {
    "text": "calling validate hwind but they were not doing that and as a result there was no incrementing of a reference count or any",
    "start": "1908360",
    "end": "1915679"
  },
  {
    "text": "validation whatsoever here we can see a snippet from xXx and",
    "start": "1915679",
    "end": "1921000"
  },
  {
    "text": "defer Windows position X and there's no validation uh in this case it's v52",
    "start": "1921000",
    "end": "1926799"
  },
  {
    "text": "they're just verifying that a window handle was actually passed and outside of that they call it directly with with",
    "start": "1926799",
    "end": "1933399"
  },
  {
    "text": "no uh M maintenance of the uh reference count exploitation of this was the exact",
    "start": "1933399",
    "end": "1939840"
  },
  {
    "text": "same as the Chrome chain where uh they allocate accelerator tables on top of",
    "start": "1939840",
    "end": "1946360"
  },
  {
    "text": "the now freed window object and then allocate a bit map objects adjacently",
    "start": "1946360",
    "end": "1951519"
  },
  {
    "text": "they use the first bit map object to update pointers and the second so that they can just call get bitmap bits and",
    "start": "1951519",
    "end": "1957639"
  },
  {
    "text": "set bitmap bits to achieve arbitrary reads and",
    "start": "1957639",
    "end": "1962960"
  },
  {
    "text": "wrs and then like the previous train they uh just iterate through the process list and steal the token this is team",
    "start": "1962960",
    "end": "1970360"
  },
  {
    "text": "snipers flash chain um this starts off with a flash stack Overflow and and then",
    "start": "1970360",
    "end": "1978039"
  },
  {
    "text": "leads into kernel land with a kernel pointer information leak and then a kernel use after",
    "start": "1978039",
    "end": "1983960"
  },
  {
    "text": "free and then here they have a command shell that is running as system so the interesting thing here is",
    "start": "1993039",
    "end": "2000639"
  },
  {
    "text": "uh this was found as a result of a project zero uh vulnerability project",
    "start": "2000639",
    "end": "2006519"
  },
  {
    "text": "zero found found a vulnerability in the jpeg parsing a JPEG XR parsing in Adobe",
    "start": "2006519",
    "end": "2011799"
  },
  {
    "text": "Flash although Adobe Flash does not release source code they have a JPEG XR",
    "start": "2011799",
    "end": "2016840"
  },
  {
    "text": "parser that very very closely matches the itu reference implementation and uh",
    "start": "2016840",
    "end": "2021919"
  },
  {
    "text": "stepen VTO of project zero found a vulnerability and published it but what",
    "start": "2021919",
    "end": "2027880"
  },
  {
    "text": "for whatever reason neither he nor Adobe managed to see that the same vulnerability existed in the else",
    "start": "2027880",
    "end": "2034440"
  },
  {
    "text": "condition um it's actually slightly different but it's it's effectively the exact same where in this case RL CFS is",
    "start": "2034440",
    "end": "2040639"
  },
  {
    "text": "a array of user defined user supplied values and I is supposed to be an index",
    "start": "2040639",
    "end": "2046639"
  },
  {
    "text": "that is supposed to be less than 16 but because it's user supplied and there's no validation or no real validation",
    "start": "2046639",
    "end": "2053000"
  },
  {
    "text": "they're able to access out of bounds and Achieve regen rights uh looking at adaptive LP scan we",
    "start": "2053000",
    "end": "2059358"
  },
  {
    "text": "can see that they do have a check um A3 is the is I in this case and the only",
    "start": "2059359",
    "end": "2065240"
  },
  {
    "text": "check they uh doing is to make sure that the value when treated as a signed integer is greater than zero an",
    "start": "2065240",
    "end": "2071720"
  },
  {
    "text": "interesting thing is for whatever reason in the flash debug builds Not only was there this check but there was an",
    "start": "2071720",
    "end": "2077280"
  },
  {
    "text": "explicit check that in addition to this also checked to make sure A3 was greater than 15 and in both cases it would still",
    "start": "2077280",
    "end": "2084118"
  },
  {
    "text": "allow this uh this code path to be hit and still allowed the rights to occur I don't know why that was the case but it",
    "start": "2084119",
    "end": "2091919"
  },
  {
    "text": "was so as far as exploiting the vulnerability was actually triggered several times",
    "start": "2091919",
    "end": "2097520"
  },
  {
    "text": "um the first time was just to leak a stack address which was used to craft a fake object pointer and they triggered",
    "start": "2097520",
    "end": "2104280"
  },
  {
    "text": "another time to leak some more pointers and then once they had that they uh made a function call in action script where",
    "start": "2104280",
    "end": "2111800"
  },
  {
    "text": "they are calling the function with over 100 arguments it's all the exact same fake object the whole point of this was",
    "start": "2111800",
    "end": "2118800"
  },
  {
    "text": "to update pointers within the OB within the second object and then use the second the other object to perform",
    "start": "2118800",
    "end": "2125640"
  },
  {
    "text": "arbitrary reads and writs and once they had that they just wrote to the stack and they just wrote their Ro directly to",
    "start": "2125640",
    "end": "2131400"
  },
  {
    "text": "the stack so that they were able to return and code execution happened it was one it was a very clean",
    "start": "2131400",
    "end": "2139280"
  },
  {
    "text": "exploit the kernel portion starts off by allocating a PFF object which is",
    "start": "2139280",
    "end": "2145240"
  },
  {
    "text": "basically just a font um it's a representation of a font the information leak is effectively a logic issue where",
    "start": "2145240",
    "end": "2153240"
  },
  {
    "text": "this function NT GDI get em ufi would call another function GRE get ufi and",
    "start": "2153240",
    "end": "2159520"
  },
  {
    "text": "it's supposed to return a an an ID that is used to reference the pfff object but",
    "start": "2159520",
    "end": "2165760"
  },
  {
    "text": "for whatever reason they forgot or didn't check and they were returning the kernel pointer so you had a direct",
    "start": "2165760",
    "end": "2171599"
  },
  {
    "text": "kernel pointer that was being leaked to user land of a font that you had some uh control",
    "start": "2171599",
    "end": "2178160"
  },
  {
    "text": "over the actual uh exploitation from Colonel Lan occurs as a result of this function B delete load ref which is used",
    "start": "2178160",
    "end": "2185440"
  },
  {
    "text": "as part of cleaning up a font uh specifically it's used to free resources",
    "start": "2185440",
    "end": "2190839"
  },
  {
    "text": "associated with the PFF object but the issue here is the return code was very dependent on the reference count so if",
    "start": "2190839",
    "end": "2197800"
  },
  {
    "text": "the PFF object still had any references to it then this bottom check would fail",
    "start": "2197800",
    "end": "2203640"
  },
  {
    "text": "and it would just return zero even though it may have actually freed the associated object so you'd have a PFF",
    "start": "2203640",
    "end": "2210280"
  },
  {
    "text": "object that has stale pointers to objects that can be reclaimed and as a",
    "start": "2210280",
    "end": "2216079"
  },
  {
    "text": "result the caller wouldn't necessarily know if the resources were freed exploiting this vulnerability",
    "start": "2216079",
    "end": "2222200"
  },
  {
    "text": "occurs uh by freeing the associated resources and then calling nuser convert mem handle which is an undocumented but",
    "start": "2222200",
    "end": "2229720"
  },
  {
    "text": "uh heavily used function which allocates memory of user controlled size and user",
    "start": "2229720",
    "end": "2235560"
  },
  {
    "text": "controlled uh data this resulted in A Primitive that is kind of limited",
    "start": "2235560",
    "end": "2240760"
  },
  {
    "text": "actually fairly limited uh where all you could do is or an arbitrary value with two but what uh keenlab did is they use",
    "start": "2240760",
    "end": "2249520"
  },
  {
    "text": "this to increment or to massively increase the size of a window object's extra bite size so window objects have",
    "start": "2249520",
    "end": "2255920"
  },
  {
    "text": "pointers to the window text to their Associated class stuff like that but in addition you can have data that's",
    "start": "2255920",
    "end": "2261760"
  },
  {
    "text": "specific to a given window and that's controlled by the uh extra bite size",
    "start": "2261760",
    "end": "2267480"
  },
  {
    "text": "they use this to call set window long pointer to modify the text pointer in an",
    "start": "2267480",
    "end": "2273119"
  },
  {
    "text": "adjacent window and then they just made calls to internal get window text and ENT user def set text to read and write",
    "start": "2273119",
    "end": "2279680"
  },
  {
    "text": "memory and then use the exact same trick of iterating through the process list and sealing a token to get code",
    "start": "2279680",
    "end": "2285720"
  },
  {
    "text": "execution and now I'm going to hand it over to Du all right so uh before before going",
    "start": "2285720",
    "end": "2293800"
  },
  {
    "text": "through the uh the chains it's it's worth noting that the edge bugs uh that we got in pontoon were found by um",
    "start": "2293800",
    "end": "2301280"
  },
  {
    "text": "auditing the source code of chakra which is which is interesting uh both Edge bugs from Loi and uh from team um so I'm",
    "start": "2301280",
    "end": "2308319"
  },
  {
    "text": "going to be covering the uh the Lis chain here I'm going to play a small video so basically exploited two bugs",
    "start": "2308319",
    "end": "2315599"
  },
  {
    "text": "one in Edge uh The Edge bug is a is an uninitialized variable bug in the concat",
    "start": "2315599",
    "end": "2321040"
  },
  {
    "text": "JavaScript uh function and uh there's another bug that he exploited to",
    "start": "2321040",
    "end": "2326319"
  },
  {
    "text": "escalate privileges which was u a trial triers bug which allowed him to load the",
    "start": "2326319",
    "end": "2331480"
  },
  {
    "text": "dll um into um like forcing that service to load the dll and ex cute cod as",
    "start": "2331480",
    "end": "2337400"
  },
  {
    "text": "system um so as the video shows he he was able to pop CMD and uh gain system",
    "start": "2337400",
    "end": "2345079"
  },
  {
    "text": "prives all right um so when when concat is executed from JavaScript basically um",
    "start": "2345480",
    "end": "2352640"
  },
  {
    "text": "uh in Chakra the the code flow reaches concat args and as you guys can see the",
    "start": "2352640",
    "end": "2357680"
  },
  {
    "text": "sub item is um is defined on the stack but it's not initialized and inside the loop if if has item succeeds and get",
    "start": "2357680",
    "end": "2365240"
  },
  {
    "text": "item fails basically it's and to push an un initialize sub item inside the array and that's that's that's the root cause",
    "start": "2365240",
    "end": "2370760"
  },
  {
    "text": "of the bug just plain simple um so as for the puck um so",
    "start": "2370760",
    "end": "2377920"
  },
  {
    "text": "basically he defined he defined a proxy trap for the has uh method and make make",
    "start": "2377920",
    "end": "2383119"
  },
  {
    "text": "it return true and then um set that proxy um on an array object and and then",
    "start": "2383119",
    "end": "2388440"
  },
  {
    "text": "just call Con cat and that's that's a simple trigger as for exploiting the bug",
    "start": "2388440",
    "end": "2393800"
  },
  {
    "text": "in principle um so in principle like after the introduction of mgc us after",
    "start": "2393800",
    "end": "2398960"
  },
  {
    "text": "free exploitation got really um harder um so um so he used a technique called",
    "start": "2398960",
    "end": "2405400"
  },
  {
    "text": "misaligned reference basically in principle what it what he did is he allocated a bunch of objects and then uh",
    "start": "2405400",
    "end": "2411119"
  },
  {
    "text": "grabbed reference for one of these objects and then Force the free uh allocated smaller objects um in a way",
    "start": "2411119",
    "end": "2417680"
  },
  {
    "text": "they they will be misaligned against the original ones and then uh use that to uh",
    "start": "2417680",
    "end": "2422720"
  },
  {
    "text": "to leak and and do a bunch of stuff uh so this is this is um the",
    "start": "2422720",
    "end": "2427960"
  },
  {
    "text": "outcome of the spray basically as you guys can see the data objects were freed and then you have the data when when",
    "start": "2427960",
    "end": "2434079"
  },
  {
    "text": "they were freed he he allocated data view objects instead so uh the reference that he held against one of the data",
    "start": "2434079",
    "end": "2440640"
  },
  {
    "text": "date objects uh basically points to offset 30 of the data View and offset 30",
    "start": "2440640",
    "end": "2446079"
  },
  {
    "text": "basically contains bite uh bite offset and data and these will um so basically the reference would treat the bite upset",
    "start": "2446079",
    "end": "2453079"
  },
  {
    "text": "and data as V table and type um respectively so that's how he was uh able to leak",
    "start": "2453079",
    "end": "2460280"
  },
  {
    "text": "memory so uh as for achieving read rights um so what he did is he basically freed the data data view objects and",
    "start": "2461119",
    "end": "2467640"
  },
  {
    "text": "then allocated a bunch of native float arrays and then uh he used a fake data view to to achieve return and right um",
    "start": "2467640",
    "end": "2474680"
  },
  {
    "text": "as for CFG he he used a a set jump call just to obtain the stack address and",
    "start": "2474680",
    "end": "2479880"
  },
  {
    "text": "override the return address which is uh which was",
    "start": "2479880",
    "end": "2484920"
  },
  {
    "text": "simple so now I'm going to discuss the uh the escalation piece um so as I mentioned",
    "start": "2485240",
    "end": "2491640"
  },
  {
    "text": "before it's a it's a traversal bug uh there's a there's a service called the Diagnostics Hub standard collector uh",
    "start": "2491640",
    "end": "2499200"
  },
  {
    "text": "service it's it's a long name uh so basically what it does is it it captures events in real time and processes them",
    "start": "2499200",
    "end": "2505920"
  },
  {
    "text": "um it exposes a Comon interface uh this com interface basically exposes a method called ad agent uh and the ad agent",
    "start": "2505920",
    "end": "2513280"
  },
  {
    "text": "method takes two arguments um the first argument is a d path and then uh and the second is a GD um this method doesn't",
    "start": "2513280",
    "end": "2520440"
  },
  {
    "text": "really do proper checking on the path so as a result it can end up uh loading um",
    "start": "2520440",
    "end": "2526760"
  },
  {
    "text": "DLS from undesired path undesired path basically uh so this is this is a",
    "start": "2526760",
    "end": "2533760"
  },
  {
    "text": "snapshot from from Ida just to show the load Library call there isn't much interesting things going on before that",
    "start": "2533760",
    "end": "2539640"
  },
  {
    "text": "just doesn't check the path properly and then just um loads the DL and that's how we got um the system execution",
    "start": "2539640",
    "end": "2548160"
  },
  {
    "text": "um so the next chain I'm going to be discussing is a king lab um Edge two",
    "start": "2550920",
    "end": "2556599"
  },
  {
    "text": "system so this is a small video uh they exploited two bucks two",
    "start": "2556599",
    "end": "2562599"
  },
  {
    "text": "one in Edge uh in the fil JavaScript uh method uh which uh which is in out of",
    "start": "2562599",
    "end": "2569079"
  },
  {
    "text": "bound access and they also exploited the buffer overflow in the direct X graphics",
    "start": "2569079",
    "end": "2574520"
  },
  {
    "text": "gral driver uh um so uh in in in the demo here uh they they were able to",
    "start": "2574520",
    "end": "2581319"
  },
  {
    "text": "steal a system token and modify the edge uh token with with that token so um so",
    "start": "2581319",
    "end": "2587000"
  },
  {
    "text": "now the edge process would would show it that it's running an under",
    "start": "2587000",
    "end": "2592318"
  },
  {
    "text": "system all right so uh when calling the The Fill JavaScript method in Chakra um",
    "start": "2593319",
    "end": "2598640"
  },
  {
    "text": "the execution flow which is like it starts from entry fill um so in entry fill what happens is it fetches the",
    "start": "2598640",
    "end": "2604920"
  },
  {
    "text": "length of the of the from from the length property but it doesn't really fetch it from the internal slot so uh in",
    "start": "2604920",
    "end": "2612119"
  },
  {
    "text": "in in in specific cases the length property can be overwritten um later on",
    "start": "2612119",
    "end": "2617160"
  },
  {
    "text": "uh the floor reaches Phil helper uh so basically since uh the",
    "start": "2617160",
    "end": "2624240"
  },
  {
    "text": "length can be overwritten and then um like out of bound axis can can happen and and that that happens specifically",
    "start": "2624240",
    "end": "2630680"
  },
  {
    "text": "in direct set item uh but the bug the the bug goes a little bit deeper than that so since we we're dealing with",
    "start": "2630680",
    "end": "2637000"
  },
  {
    "text": "typed arrays um the execution flow reaches base type direct set item and",
    "start": "2637000",
    "end": "2643160"
  },
  {
    "text": "basically what it it takes um the index and uh what happens here it it actually",
    "start": "2643160",
    "end": "2649119"
  },
  {
    "text": "checks for the for the ACT if the index is less than the actual length which is from the internal slot but it does it",
    "start": "2649119",
    "end": "2654839"
  },
  {
    "text": "does it through an assert message and it just logs the message and later on it just writes whatever um to whatever",
    "start": "2654839",
    "end": "2662000"
  },
  {
    "text": "index we specify so that's that's how that's the actual bug",
    "start": "2662000",
    "end": "2668000"
  },
  {
    "text": "uh the buck is simple as well um it's basically to just Define a type array and then um set the prototype to uh to",
    "start": "2669000",
    "end": "2675760"
  },
  {
    "text": "another array uh specifying whatever size and that's that's where the actual length property overwrite happens and",
    "start": "2675760",
    "end": "2682400"
  },
  {
    "text": "then just call fill as for exploitation um the exploitation technique um that",
    "start": "2682400",
    "end": "2688520"
  },
  {
    "text": "they used was just composed of corrupting the length of a JavaScript native um in Array um and their exploit",
    "start": "2688520",
    "end": "2694720"
  },
  {
    "text": "they use to two sprays the first spray was used to stabilize the Heap uh and the the next spray was used to fetch the",
    "start": "2694720",
    "end": "2701280"
  },
  {
    "text": "index of one of the objects they were able to write to so once that once that's done um once",
    "start": "2701280",
    "end": "2708359"
  },
  {
    "text": "they actually got the index of the of the target object they corrupted the length and that's how they were able to",
    "start": "2708359",
    "end": "2713440"
  },
  {
    "text": "achieve read and write as for CFG they use the same trick as Loki which is calling set",
    "start": "2713440",
    "end": "2720400"
  },
  {
    "text": "jump all right so I'm going to go over the the chal buff overflow so basically X um Graphics Graphics gal driver uh it",
    "start": "2721839",
    "end": "2730200"
  },
  {
    "text": "contains a structure called the present history uh token and inside that structure there's another structure",
    "start": "2730200",
    "end": "2735839"
  },
  {
    "text": "called the Dirty regions um dirty regions contains U num RS and it",
    "start": "2735839",
    "end": "2741599"
  },
  {
    "text": "contains a static array of of RS so in one of the methods um in one of",
    "start": "2741599",
    "end": "2749800"
  },
  {
    "text": "in one of the functions there's a there's a bunch of cases one of the cases which is interesting is that it checks if if the number re is smaller",
    "start": "2749800",
    "end": "2756880"
  },
  {
    "text": "than uh the max the maximum number of fracks um so in in in the specific code",
    "start": "2756880",
    "end": "2762880"
  },
  {
    "text": "there uh it if if the check fails and uh and then it's it just lugs it um but",
    "start": "2762880",
    "end": "2769720"
  },
  {
    "text": "what happens it plugs and it continues execution so the execution reaches um m m move call and that's what where the",
    "start": "2769720",
    "end": "2776599"
  },
  {
    "text": "actual buffer overflow happens so we're we're we're a little",
    "start": "2776599",
    "end": "2782599"
  },
  {
    "text": "bit running out of time so apologies guys I'm going to go through this really fast um so as as I've exploited I'm just",
    "start": "2782599",
    "end": "2788280"
  },
  {
    "text": "going to go over to some details um so that driver basically allocates a pool inside that pool it allocates records",
    "start": "2788280",
    "end": "2794640"
  },
  {
    "text": "these records are connected to each other as link list so they they triggered the bug to overwrite a",
    "start": "2794640",
    "end": "2799960"
  },
  {
    "text": "subsequent uh record and then uh they used a bit map spray where they were",
    "start": "2799960",
    "end": "2805119"
  },
  {
    "text": "also able to grab reference to one of the bit maps and Achieve read and right through a set bit map uh bits and get",
    "start": "2805119",
    "end": "2811359"
  },
  {
    "text": "bit map bits um and then they were able to steal uh system token and just modify",
    "start": "2811359",
    "end": "2817960"
  },
  {
    "text": "that token um so Matt you want to close",
    "start": "2817960",
    "end": "2824039"
  },
  {
    "text": "this so we're going to conclude here and uh big takeaways is application",
    "start": "2825359",
    "end": "2831280"
  },
  {
    "text": "sandboxing is a step in the right direction um but the chronal attack surface remains expansive and exposed um",
    "start": "2831280",
    "end": "2838680"
  },
  {
    "text": "basically the return on investment of learning um a code base in the kernel",
    "start": "2838680",
    "end": "2845079"
  },
  {
    "text": "will net you higher Privileges and it's probably a good time invested um",
    "start": "2845079",
    "end": "2852119"
  },
  {
    "text": "exploitation is getting harder but still very possible uh right exploit Primitives are mainstate and",
    "start": "2852119",
    "end": "2858480"
  },
  {
    "text": "exploits you know if you got right you could probably install Doom in like your",
    "start": "2858480",
    "end": "2863520"
  },
  {
    "text": "browser if you wanted to or write your own exploit mitigation you know you can write so you could do whatever you want",
    "start": "2863520",
    "end": "2869680"
  },
  {
    "text": "right um another takeaway is logic bugs uh can be a very high impact as we saw",
    "start": "2869680",
    "end": "2876520"
  },
  {
    "text": "with um the pseudo bug and the directory traversal bugs and um vulnerability",
    "start": "2876520",
    "end": "2881800"
  },
  {
    "text": "exploit research is becoming increasingly popular uh we see a lot of new faces every year at Pon own um I",
    "start": "2881800",
    "end": "2889000"
  },
  {
    "text": "like the New Breed they've uh set a new standard with what they accomplish is here um basically they're humble they",
    "start": "2889000",
    "end": "2896720"
  },
  {
    "text": "work hard and the work talks for itself so it's also becoming a team sport",
    "start": "2896720",
    "end": "2903440"
  },
  {
    "text": "because um with the various subsystems that exploit developers need to",
    "start": "2903440",
    "end": "2908960"
  },
  {
    "text": "understand you're going to have to go to various subject matter experts to be able to develop uh the code and be able",
    "start": "2908960",
    "end": "2915359"
  },
  {
    "text": "to execute um so exploitations getting harder and um you know that's what's",
    "start": "2915359",
    "end": "2920480"
  },
  {
    "text": "happening so um we're kind of running a l on time uh if there's any questions we",
    "start": "2920480",
    "end": "2926680"
  },
  {
    "text": "can uh take some uh outside uh we the zero day initiative um we have a",
    "start": "2926680",
    "end": "2932400"
  },
  {
    "text": "vulnerability um bug Bounty program and send us your stuff we'll handly",
    "start": "2932400",
    "end": "2938520"
  },
  {
    "text": "reward you so we're also hiring too so thank you thank",
    "start": "2938520",
    "end": "2945660"
  },
  {
    "text": "[Applause] you",
    "start": "2945660",
    "end": "2950839"
  }
]