[
  {
    "start": "0",
    "end": "108000"
  },
  {
    "text": "[Music]",
    "start": "1130",
    "end": "14320"
  },
  {
    "text": "thanks everyone for joining and welcome to our talk cloudy with a chance of apt i'm doug beanstalk i'm a manager at",
    "start": "14320",
    "end": "21680"
  },
  {
    "text": "mandiant and i've been with mandiant for about seven years now which for some feels like an eternity i'm certainly one",
    "start": "21680",
    "end": "28560"
  },
  {
    "text": "of those my rolex mandiant is primarily an incident response manager so i manage",
    "start": "28560",
    "end": "33600"
  },
  {
    "text": "a lot of the investigations that come to us in our new york city office i also dabble a little bit in red",
    "start": "33600",
    "end": "40079"
  },
  {
    "text": "teaming especially on the research side of things where i've published tools like poenath for oauth abuse as well of",
    "start": "40079",
    "end": "46719"
  },
  {
    "text": "of course adfs dump and adv 80 fs spoof and some other associated research",
    "start": "46719",
    "end": "52800"
  },
  {
    "text": "outside of infosec i'm a lifelong green bay packers fan and i'm currently very anxiously and nervously",
    "start": "52800",
    "end": "60239"
  },
  {
    "text": "reading the news about aaron rodgers and i'm really hoping for a resolution so we'll see what happens there now i'm",
    "start": "60239",
    "end": "65920"
  },
  {
    "text": "going to turn it over to my colleague josh he's going to introduce himself and get us kicked off with some content",
    "start": "65920",
    "end": "71119"
  },
  {
    "text": "thanks doug my name is josh maidly i'm a manager of professional services at mandiant i've been with the company for",
    "start": "71119",
    "end": "78560"
  },
  {
    "text": "almost six years and that entire time i have been an incident response lead based out of our boston office",
    "start": "78560",
    "end": "85759"
  },
  {
    "text": "unlike doug i'm not an author of any publicly available tools but if you do work at mandi you've probably interacted",
    "start": "85759",
    "end": "91840"
  },
  {
    "text": "with some code that i have written i am a canadian expat i moved from toronto to boston in",
    "start": "91840",
    "end": "98840"
  },
  {
    "text": "2012 which means that i adopted the new england patriots as my team of choice so",
    "start": "98840",
    "end": "105280"
  },
  {
    "text": "cue the boos this past year has proved the point that",
    "start": "105280",
    "end": "112479"
  },
  {
    "start": "108000",
    "end": "108000"
  },
  {
    "text": "nation state state-backed threat actors are increasingly investing time and money to develop novel ways to access",
    "start": "112479",
    "end": "118880"
  },
  {
    "text": "data in microsoft 365. and these actors are especially interested in microsoft",
    "start": "118880",
    "end": "124320"
  },
  {
    "text": "365 because that's where more and more organizations are storing data and",
    "start": "124320",
    "end": "129679"
  },
  {
    "text": "collaborating and this can be some of their most confidential data like email sharepoint onedrive power bi",
    "start": "129679",
    "end": "137760"
  },
  {
    "text": "so if you're an espionage motivated threat actor microsoft 365 is the holy grail",
    "start": "137760",
    "end": "145599"
  },
  {
    "text": "so today we're going to talk about some of the lessons learned from some",
    "start": "145599",
    "end": "151360"
  },
  {
    "text": "high scale or large-scale espionage campaigns that we've detected over the past year and we're going to talk",
    "start": "151360",
    "end": "158160"
  },
  {
    "text": "through the novel techniques that they use to evade detection by disabling security features like",
    "start": "158160",
    "end": "164640"
  },
  {
    "text": "auditing and logging automating data theft through old techniques like mailbox folder permissions and some newer techniques",
    "start": "164640",
    "end": "171680"
  },
  {
    "text": "like abusing enterprise applications and then we're going to talk through maintaining",
    "start": "171680",
    "end": "178239"
  },
  {
    "text": "persistent access by abusing saml and adfs",
    "start": "178239",
    "end": "183280"
  },
  {
    "text": "throughout this talk we're going to detail the technical underpinnings that are key to understanding and realizing",
    "start": "183280",
    "end": "189519"
  },
  {
    "text": "these techniques and in a few instances we're also going to cover new extensions",
    "start": "189519",
    "end": "194640"
  },
  {
    "text": "or facets of these techniques that have not yet been observed in the wild but are natural extensions of the technique",
    "start": "194640",
    "end": "202080"
  },
  {
    "text": "that organizations should be prepared to defend against in the coming weeks months and years",
    "start": "202080",
    "end": "208480"
  },
  {
    "text": "so to start we're going to talk about avoiding detection specifically by disabling security features and",
    "start": "208480",
    "end": "214799"
  },
  {
    "start": "211000",
    "end": "211000"
  },
  {
    "text": "throughout this talk we're going to see that attackers are targeting microsoft 365 to",
    "start": "214799",
    "end": "222159"
  },
  {
    "text": "steal data that's why they're there they're not just interested in modifying data they",
    "start": "222159",
    "end": "227440"
  },
  {
    "text": "actually want to take it and review it and understand it and there are some pretty stealthy ways",
    "start": "227440",
    "end": "233280"
  },
  {
    "text": "to do this but attackers always want to increase their stealth make it harder to get caught especially if they want to",
    "start": "233280",
    "end": "240799"
  },
  {
    "text": "perpetrate these this data theft over years as opposed to just a one-time smash and",
    "start": "240799",
    "end": "246640"
  },
  {
    "text": "grab so if we think about the analogy of let's say a stealing a rar archive full of files",
    "start": "246640",
    "end": "252959"
  },
  {
    "text": "from a file server if we have object level auditing enabled on this file server we can see every archive file",
    "start": "252959",
    "end": "259919"
  },
  {
    "text": "that is put into that or every file that's put into that archive",
    "start": "259919",
    "end": "264960"
  },
  {
    "text": "the same concept applies for office 365 or microsoft 365. all domain",
    "start": "264960",
    "end": "271600"
  },
  {
    "text": "admins have access to the audit logs but if you pay for an e5 license you have access to what's known as the advanced",
    "start": "271600",
    "end": "278240"
  },
  {
    "text": "auditing and this could be analogous to object level auditing specifically",
    "start": "278240",
    "end": "283759"
  },
  {
    "text": "that that comes with the mail items accessed event which is going to record any interactions with mail item objects",
    "start": "283759",
    "end": "291280"
  },
  {
    "text": "in a mailbox it's going to record the first 1000 interactions in a 24-hour period which",
    "start": "291280",
    "end": "296880"
  },
  {
    "text": "according to microsoft accounts for 99 of users within the world",
    "start": "296880",
    "end": "301919"
  },
  {
    "text": "after that it's throttled and it will say so but you can imagine this type of logging",
    "start": "301919",
    "end": "306960"
  },
  {
    "text": "is problematic to attackers who are trying to steal data and as of today",
    "start": "306960",
    "end": "312479"
  },
  {
    "text": "if mailbox auditing is enabled by default in the tenant you can't disable it on individual",
    "start": "312479",
    "end": "318479"
  },
  {
    "text": "mailboxes so attackers needed to find a different way around this fortunately microsoft handed it to them",
    "start": "318479",
    "end": "324080"
  },
  {
    "text": "in the set mailbox audit bypass association commandlet and what this is going to do is prevent any and all",
    "start": "324080",
    "end": "330960"
  },
  {
    "text": "mailbox mailbox actions for specific users from being logged",
    "start": "330960",
    "end": "336080"
  },
  {
    "text": "i'm not entirely sure why this feature exists but there is some reference to administrators trying to limit noise in",
    "start": "336080",
    "end": "342320"
  },
  {
    "text": "their logs so they bypass a couple different users but you would it's",
    "start": "342320",
    "end": "349520"
  },
  {
    "text": "you'd be well served to monitor for the execution of this commandlet in your tenant",
    "start": "349520",
    "end": "356560"
  },
  {
    "text": "now what this means once it's configured is that any action or any mailbox owner actions",
    "start": "356560",
    "end": "366080"
  },
  {
    "text": "made by the specified users that have the bypass association created",
    "start": "366080",
    "end": "371919"
  },
  {
    "text": "are not going to be logged it also means that delegate actions performed by the bypassed users on target mailboxes",
    "start": "371919",
    "end": "379680"
  },
  {
    "text": "including shared mailboxes aren't logged it also means that admin actions or",
    "start": "379680",
    "end": "385840"
  },
  {
    "text": "certain admin actions are not going to be logged so this allows attackers to",
    "start": "385840",
    "end": "392720"
  },
  {
    "text": "if you're monitoring for data theft to access a particular mailbox and it not generate a mail items access log",
    "start": "392720",
    "end": "398960"
  },
  {
    "text": "but a more efficient way that we've actually seen threat actors using to bypass logging in an environment is to",
    "start": "398960",
    "end": "405039"
  },
  {
    "text": "downgrade the critical users from an e5 to an e3 license now",
    "start": "405039",
    "end": "411440"
  },
  {
    "text": "along with saving the organization a little bit of money it's also going to disable the mail item access logging",
    "start": "411440",
    "end": "418880"
  },
  {
    "text": "without degrading any of the features that the majority of users are taking advantage of on a daily basis",
    "start": "418880",
    "end": "426080"
  },
  {
    "text": "these are really simple techniques once you get administrative access to a tenant to make these changes to enable long-term",
    "start": "426080",
    "end": "433599"
  },
  {
    "text": "data theft and we're going to talk about some of these in the next slide",
    "start": "433599",
    "end": "439919"
  },
  {
    "text": "so first we're going to talk about an older technique which is abusing mailbox folder permissions and",
    "start": "440000",
    "end": "445680"
  },
  {
    "text": "if it ain't broke don't fix it so mailbox folder positions are our folder",
    "start": "445680",
    "end": "452479"
  },
  {
    "start": "448000",
    "end": "448000"
  },
  {
    "text": "permissions are an alternative to mailbox delegation so within a mailbox a user administrator or delegate can grant",
    "start": "452479",
    "end": "459759"
  },
  {
    "text": "permissions to other users that allow them to access specific folders",
    "start": "459759",
    "end": "466560"
  },
  {
    "text": "this you know you can think about sharing calendars allowing administrative assistants to",
    "start": "466639",
    "end": "472960"
  },
  {
    "text": "look at particular folders or particular content that is moved around for them",
    "start": "472960",
    "end": "480240"
  },
  {
    "text": "but just like administrators attackers who have acquired sufficient permissions to a mailbox or tenant can modify these",
    "start": "480240",
    "end": "486800"
  },
  {
    "text": "permissions to allow them to access the folder contents this is an older",
    "start": "486800",
    "end": "492960"
  },
  {
    "text": "technique that was actually documented by bo bullock at black hills information security",
    "start": "492960",
    "end": "498479"
  },
  {
    "text": "but the reason we're talking about it today is that we recently saw an apt threat actor lose access to multiple",
    "start": "498479",
    "end": "504840"
  },
  {
    "text": "environments using a sophisticated means of targeting mailboxes only to fall back",
    "start": "504840",
    "end": "510080"
  },
  {
    "text": "on this old school method of abusing mailbox folder permissions and i think what was even more",
    "start": "510080",
    "end": "515680"
  },
  {
    "text": "fascinating is that when they fell back on this method there were no modifications made to the",
    "start": "515680",
    "end": "522000"
  },
  {
    "text": "environment to enable it during the time of our investigation which meant that those changes had been",
    "start": "522000",
    "end": "528000"
  },
  {
    "text": "made a long time before so just like",
    "start": "528000",
    "end": "534560"
  },
  {
    "start": "532000",
    "end": "532000"
  },
  {
    "text": "local folders mailbox folder permissions can be assigned through either individual permissions or",
    "start": "534560",
    "end": "541120"
  },
  {
    "text": "roles which are just collections of folder permissions ultimately though the threat actors are",
    "start": "541120",
    "end": "547040"
  },
  {
    "text": "going to be after roles that have the read items permission and as its name implies it grants access",
    "start": "547040",
    "end": "553760"
  },
  {
    "text": "to the contents of the folders to a specific user or group",
    "start": "553760",
    "end": "559040"
  },
  {
    "text": "so author editor non-editing author owner publishing editor these are all roles that have the",
    "start": "559040",
    "end": "566160"
  },
  {
    "text": "read items permission and we have the reviewer role as uh",
    "start": "566160",
    "end": "572240"
  },
  {
    "text": "noted here because that's the one that we've actually seen threat actors use and it is also the one that beau bullock",
    "start": "572240",
    "end": "578399"
  },
  {
    "text": "talked about in his his post on using mail sniper to accomplish this",
    "start": "578399",
    "end": "585600"
  },
  {
    "text": "now folder permissions can be assigned to users and mail enabled security groups",
    "start": "585600",
    "end": "591920"
  },
  {
    "text": "in addition to the users within the tenant there are two special users there is the anonymous user which",
    "start": "591920",
    "end": "598720"
  },
  {
    "text": "accounts for any external unauthenticated user which sounds pretty scary but in",
    "start": "598720",
    "end": "604240"
  },
  {
    "text": "practice neither doug or myself have been able to get this to work as advertised we haven't been able to take",
    "start": "604240",
    "end": "609839"
  },
  {
    "text": "advantage of that anonymous permission set to abuse mailbox folder permissions",
    "start": "609839",
    "end": "615120"
  },
  {
    "text": "and then there is the default user also known as the everyone user depending on",
    "start": "615120",
    "end": "620160"
  },
  {
    "text": "what log you're looking at and this up this includes any internal authenticated user",
    "start": "620160",
    "end": "626800"
  },
  {
    "text": "now by default the access for both users is set to none so they can't do anything",
    "start": "626800",
    "end": "632720"
  },
  {
    "text": "but a threat actor can take advantage of this and what we have seen is that",
    "start": "632720",
    "end": "638959"
  },
  {
    "text": "they're going to assign the default user reviewer the reviewer role",
    "start": "638959",
    "end": "644000"
  },
  {
    "text": "to the top of the information store and every folder underneath it to allow any off and any authenticated",
    "start": "644000",
    "end": "651040"
  },
  {
    "text": "user access to the mailbox folder now these permissions don't automatically cascade down from child to",
    "start": "651040",
    "end": "657760"
  },
  {
    "text": "parent so the threat actor needed to intentionally modify each subfolder but any new folders that the user",
    "start": "657760",
    "end": "664320"
  },
  {
    "text": "creates the threat actor will have access to and this can trivially be done by using the",
    "start": "664320",
    "end": "670959"
  },
  {
    "text": "set mailbox folder permission commandlet or a tool like ews editor",
    "start": "670959",
    "end": "676320"
  },
  {
    "text": "or mail sniper or one or a custom built application that makes ews api calls",
    "start": "676320",
    "end": "683360"
  },
  {
    "text": "now the threat actor still needs to maintain some level of access to the environment",
    "start": "683360",
    "end": "689600"
  },
  {
    "text": "via a valid account but they don't need to once they've made this modification they",
    "start": "689600",
    "end": "695440"
  },
  {
    "text": "don't need to maintain access to an account or to sp to the specif the",
    "start": "695440",
    "end": "700800"
  },
  {
    "text": "specific accounts that they want to target on a daily basis or on a weekly basis so they can use one compromised",
    "start": "700800",
    "end": "707200"
  },
  {
    "text": "account to access 10 modified or mailboxes that have modified folder permissions",
    "start": "707200",
    "end": "714639"
  },
  {
    "start": "714000",
    "end": "714000"
  },
  {
    "text": "now to detect this mechanism we want to look for ews sign-ins that",
    "start": "714639",
    "end": "721600"
  },
  {
    "text": "are then being used to access the modified folders",
    "start": "721600",
    "end": "726880"
  },
  {
    "text": "in azure active directory these are going to be coded as non-interactive sign-ins",
    "start": "726880",
    "end": "732399"
  },
  {
    "text": "and it's important to note that these are azure ad logs so they're not going to be forwarded to the unified audit log and",
    "start": "732399",
    "end": "740399"
  },
  {
    "text": "they must be specifically enabled to forward to some sort of sim or ingested into microsoft sentinel",
    "start": "740399",
    "end": "748959"
  },
  {
    "text": "alternatively you can look for the execution or the use of the set mailbox",
    "start": "748959",
    "end": "754079"
  },
  {
    "text": "folder permission or the set mailbox permission command within your unified audit log",
    "start": "754079",
    "end": "760000"
  },
  {
    "text": "keep in mind though that there's going to be a lot of noise from legitimate admin activity as well as some background exchange online activity",
    "start": "760000",
    "end": "768959"
  },
  {
    "text": "if you have mail items access auditing enabled you can also look for any patterns of",
    "start": "768959",
    "end": "776399"
  },
  {
    "text": "non-owner access to high-value targeted or high-value mailboxes",
    "start": "776399",
    "end": "782959"
  },
  {
    "text": "final method you can use is to enumerate the mailbox folder permissions with powershell and look for any evidence of",
    "start": "783200",
    "end": "790320"
  },
  {
    "text": "the default user having the reviewer permission or the",
    "start": "790320",
    "end": "795600"
  },
  {
    "text": "everyone users having reviewer permission and this you know is going it doesn't scale well",
    "start": "795600",
    "end": "801839"
  },
  {
    "text": "if you have 150 000 users in your tenant but you can be targeting high value users or users that fit within a",
    "start": "801839",
    "end": "808240"
  },
  {
    "text": "particular threat model so you can see threat actors can steal data",
    "start": "808240",
    "end": "815040"
  },
  {
    "text": "using this kind of older method but it still requires them to maintain a valid account",
    "start": "815040",
    "end": "821199"
  },
  {
    "text": "and if you're changing passwords every 90 days you know this can be problematic they have to come back in and",
    "start": "821199",
    "end": "826320"
  },
  {
    "text": "re-compromise and risk getting detected a better way to maintain access to mailboxes would be to hijack an",
    "start": "826320",
    "end": "832880"
  },
  {
    "text": "enterprise application or an app registration now both app registrations and",
    "start": "832880",
    "end": "839279"
  },
  {
    "start": "836000",
    "end": "836000"
  },
  {
    "text": "enterprise applications are referred to as applications or azure ad applications",
    "start": "839279",
    "end": "845760"
  },
  {
    "text": "but there are some key differences that we want to discuss in the context of abuse",
    "start": "845760",
    "end": "852240"
  },
  {
    "text": "app registrations are the initial instance of an application",
    "start": "852240",
    "end": "857760"
  },
  {
    "text": "that lives within the tenant that created the app and this effectively serves as the",
    "start": "857760",
    "end": "864480"
  },
  {
    "text": "blueprint to create a service principle in any tenant that is going to be consuming or",
    "start": "864480",
    "end": "869760"
  },
  {
    "text": "using that application a good example of this would be exchange online it's",
    "start": "869760",
    "end": "874880"
  },
  {
    "text": "located within the microsoft corporation tenant but the service principle that you",
    "start": "874880",
    "end": "879920"
  },
  {
    "text": "interact with as a consumer on a daily basis is going to exist within your tenant and it is modeled off of",
    "start": "879920",
    "end": "886959"
  },
  {
    "text": "the blueprint in the microsoft corporation tenant then we have enterprise applications",
    "start": "886959",
    "end": "894000"
  },
  {
    "text": "also known as service principles and these are that copy of the app registration that live in your tenant or",
    "start": "894000",
    "end": "901279"
  },
  {
    "text": "these are going to be custom applications that you have made in your tenant now everything within microsoft 365 uses",
    "start": "901279",
    "end": "909920"
  },
  {
    "text": "applications or this model of applications to interact with each",
    "start": "909920",
    "end": "914959"
  },
  {
    "text": "other so if you need to make api calls to office or to microsoft 365 if you need",
    "start": "914959",
    "end": "920560"
  },
  {
    "text": "to interact with data it's going to be done through an application so if you go through your",
    "start": "920560",
    "end": "926320"
  },
  {
    "text": "tenant right now there's going to be a a bunch of service principles that you've probably never heard of but",
    "start": "926320",
    "end": "931519"
  },
  {
    "text": "there's going to be one for every application that you're using and microsoft services are designated as",
    "start": "931519",
    "end": "938800"
  },
  {
    "text": "first party service principal so they have a different level of access to the tenant that's not otherwise afforded to",
    "start": "938800",
    "end": "944800"
  },
  {
    "text": "any custom apps that you create but it is important to note that",
    "start": "944800",
    "end": "950880"
  },
  {
    "text": "everything within microsoft 365 every application every interaction is going to",
    "start": "950880",
    "end": "957040"
  },
  {
    "text": "be reliant on some sort of application use now",
    "start": "957040",
    "end": "963759"
  },
  {
    "start": "961000",
    "end": "961000"
  },
  {
    "text": "effectively applications are an oauth authentication mechanism so the",
    "start": "964160",
    "end": "969680"
  },
  {
    "text": "applications provide the the oauth entity that is going to be",
    "start": "969680",
    "end": "975360"
  },
  {
    "text": "authenticating to different services and they're going to have different permissions applied to them and",
    "start": "975360",
    "end": "980399"
  },
  {
    "text": "depending on how the application is being used is going to be a different type of permission so we have delegated",
    "start": "980399",
    "end": "985519"
  },
  {
    "text": "permissions which are going to enable apps to perform api operations on behalf",
    "start": "985519",
    "end": "990560"
  },
  {
    "text": "of a user so this is going to be limited to [Music] data that the user has access to",
    "start": "990560",
    "end": "997680"
  },
  {
    "text": "so effectively that user is going to consent to this application at runtime or they're going to consent",
    "start": "997680",
    "end": "1003600"
  },
  {
    "text": "to the permissions at runtime and then that application is going to act as the user a good example of this",
    "start": "1003600",
    "end": "1009839"
  },
  {
    "text": "would be a morning digest application that reads your emails calendar and task",
    "start": "1009839",
    "end": "1015279"
  },
  {
    "text": "and then reads your gmail calendar and tasks and collates them all into a cohesive unit",
    "start": "1015279",
    "end": "1022000"
  },
  {
    "text": "the api calls that that application is making to pull your emails are being made on your by the application on your",
    "start": "1022000",
    "end": "1029038"
  },
  {
    "text": "behalf using your permissions application permissions on the other hand",
    "start": "1029039",
    "end": "1034720"
  },
  {
    "text": "enable apps to perform api operations without a signed in user",
    "start": "1034720",
    "end": "1041199"
  },
  {
    "text": "and they're allowed to access tenant-wide data now this does require admin consent but",
    "start": "1041199",
    "end": "1048079"
  },
  {
    "text": "once that administrative consent is provided the application acts as itself it doesn't act on behalf",
    "start": "1048079",
    "end": "1055200"
  },
  {
    "text": "of the administrator now both app registrations and enterprise applications can be assigned",
    "start": "1055200",
    "end": "1061280"
  },
  {
    "text": "permission so we're going to talk a little bit about that in a couple slides and how that affects",
    "start": "1061280",
    "end": "1066400"
  },
  {
    "text": "applications that you trust from third parties but before we go any further we do need",
    "start": "1066400",
    "end": "1073120"
  },
  {
    "start": "1070000",
    "end": "1070000"
  },
  {
    "text": "to talk about authentication because you can't just create an application",
    "start": "1073120",
    "end": "1079120"
  },
  {
    "text": "with permissions and then expect it to be able to authenticate to the services you",
    "start": "1079120",
    "end": "1084480"
  },
  {
    "text": "need to create a secret or a certificate that allows",
    "start": "1084480",
    "end": "1090640"
  },
  {
    "text": "or that allows the application to authenticate as the identity of the app",
    "start": "1090799",
    "end": "1098559"
  },
  {
    "text": "and this is roughly analogous to api keys applications can have",
    "start": "1098559",
    "end": "1105520"
  },
  {
    "text": "multiple secrets or certificates associated with them they can have multiple api keys",
    "start": "1105520",
    "end": "1112159"
  },
  {
    "text": "but once they're created once you create this api key you can't extract it from",
    "start": "1112559",
    "end": "1118080"
  },
  {
    "text": "azure ad from the azure ad key store there's no mini cats equivalent that you can run or at least that i'm aware of",
    "start": "1118080",
    "end": "1124880"
  },
  {
    "text": "that will extract the plain text credentials for that api key what this means is that",
    "start": "1124880",
    "end": "1131280"
  },
  {
    "text": "the threat actor is going to need to create their own secrets or certificates for an",
    "start": "1131280",
    "end": "1137520"
  },
  {
    "text": "application that they want to access now",
    "start": "1137520",
    "end": "1143600"
  },
  {
    "text": "both app registrations and enterprise apps both the blueprint and the service",
    "start": "1143600",
    "end": "1148840"
  },
  {
    "text": "principle can have secrets assigned to them however you can only assign",
    "start": "1148840",
    "end": "1154240"
  },
  {
    "text": "credentials to an enterprise application via powershell you can't do that through the",
    "start": "1154240",
    "end": "1160400"
  },
  {
    "text": "azure portal so now that we've kind of laid the groundwork for how azure applications",
    "start": "1160400",
    "end": "1166559"
  },
  {
    "start": "1163000",
    "end": "1163000"
  },
  {
    "text": "work the high-level fun fundamentals for the permissions",
    "start": "1166559",
    "end": "1172320"
  },
  {
    "text": "and the mechanisms for authenticating it seems pretty obvious how attackers are abusing",
    "start": "1172320",
    "end": "1177679"
  },
  {
    "text": "them what we have seen is attackers identify",
    "start": "1177679",
    "end": "1183679"
  },
  {
    "text": "an existing service principle inside of a tenant that they want to hijack and to hijack them what they",
    "start": "1183679",
    "end": "1190799"
  },
  {
    "text": "would do is add the ms graph application permissions",
    "start": "1190799",
    "end": "1196320"
  },
  {
    "text": "specifically the file.read and mail.read permissions",
    "start": "1196320",
    "end": "1201360"
  },
  {
    "text": "that allow them to as the name suggests read mail and read files within the tenant",
    "start": "1201360",
    "end": "1207280"
  },
  {
    "text": "then to authenticate the threat actor would add new credentials these can be either",
    "start": "1207280",
    "end": "1212799"
  },
  {
    "text": "secrets or certificates and we've actually seen threat actors use both we haven't fully figured out why they pick",
    "start": "1212799",
    "end": "1218640"
  },
  {
    "text": "one over the other but ultimately they add these credentials to",
    "start": "1218640",
    "end": "1224559"
  },
  {
    "text": "act as their api keys once they have done this they have remote access to make api",
    "start": "1224559",
    "end": "1231600"
  },
  {
    "text": "calls to the microsoft graph so every day an attacker would log in and extract",
    "start": "1231600",
    "end": "1237520"
  },
  {
    "text": "the last 24 hours of emails from a set group of mailboxes now we",
    "start": "1237520",
    "end": "1243919"
  },
  {
    "text": "hadn't seen them target every mailbox in a tenant that would be too much data but we did see them target the last 24 hours",
    "start": "1243919",
    "end": "1250640"
  },
  {
    "text": "of a couple hundred mailboxes that fit within their espionage campaign or with the data that they were",
    "start": "1250640",
    "end": "1257440"
  },
  {
    "text": "after now some of you may be saying well we have conditional access policies that limit how people access our environment",
    "start": "1257440",
    "end": "1264640"
  },
  {
    "text": "those don't get applied to applications which means that the threat actor can access or can authenticate to the graph",
    "start": "1264640",
    "end": "1271280"
  },
  {
    "text": "from anywhere in the world and to make matters worse service principal sign-ins",
    "start": "1271280",
    "end": "1276960"
  },
  {
    "text": "weren't even available or sign-in logs weren't even available until mid-2020",
    "start": "1276960",
    "end": "1282320"
  },
  {
    "text": "when and even then they're only recorded in",
    "start": "1282320",
    "end": "1288159"
  },
  {
    "text": "azure ad and they need to be forwarded to a sim if you want to do any sort of meaningful analytics on them fortunately",
    "start": "1288159",
    "end": "1293679"
  },
  {
    "text": "microsoft is paying close attention to where applications are authenticating from in the back end so it is making a",
    "start": "1293679",
    "end": "1299919"
  },
  {
    "text": "little bit more difficult for threat actors to abuse them now",
    "start": "1299919",
    "end": "1305200"
  },
  {
    "start": "1304000",
    "end": "1304000"
  },
  {
    "text": "we talk about app registrations because these can be created as multi-tenants customers can add your app",
    "start": "1305200",
    "end": "1313280"
  },
  {
    "text": "to their tenant and the app registration remains as that master copy or the blueprint that is",
    "start": "1313280",
    "end": "1320159"
  },
  {
    "text": "linked to all of the existing enterprise apps that are registered in the customer",
    "start": "1320159",
    "end": "1325280"
  },
  {
    "text": "tenants so if we compromise that app registration that master copy we can",
    "start": "1325280",
    "end": "1331039"
  },
  {
    "text": "access the data in any of the customer tenants so you really have to think about how",
    "start": "1331039",
    "end": "1337120"
  },
  {
    "text": "you're trusting your business partners or applications that",
    "start": "1337120",
    "end": "1342559"
  },
  {
    "text": "you've added to your tenants and all we need to do is use the friendly name of the",
    "start": "1342559",
    "end": "1348960"
  },
  {
    "text": "application that we want or the friendly name of the tenant i should say that we want to access microsoft.com",
    "start": "1348960",
    "end": "1354720"
  },
  {
    "text": "yourcompanyinc.com to access the data now there's a couple caveats here",
    "start": "1354720",
    "end": "1361440"
  },
  {
    "text": "the permissions set that the app registration has is going to be the minimum of what the particular",
    "start": "1361440",
    "end": "1367760"
  },
  {
    "text": "app is granted in the the consuming tenant or the consuming",
    "start": "1367760",
    "end": "1372799"
  },
  {
    "text": "tenant service principle which also means that modifications to the app registration don't automatically",
    "start": "1372799",
    "end": "1379840"
  },
  {
    "text": "propagate down to the uh the consuming tenants",
    "start": "1379840",
    "end": "1385520"
  },
  {
    "text": "so a threat actor can't just add the mail.read permission and expect",
    "start": "1385520",
    "end": "1390960"
  },
  {
    "text": "it to work in all of the consuming tenants uh still requires an administrator to consent but if the app",
    "start": "1390960",
    "end": "1396880"
  },
  {
    "text": "already has the mail.read permission um they can they can leverage that",
    "start": "1396880",
    "end": "1403760"
  },
  {
    "text": "um additionally though if the threat actor adds the adds a new credential to an app registration that",
    "start": "1403760",
    "end": "1410559"
  },
  {
    "text": "exists outside of the blueprint and that app register that credential can be used to authenticate",
    "start": "1410559",
    "end": "1417120"
  },
  {
    "text": "that new credential can be used to authenticate to all of the consuming tenants",
    "start": "1417120",
    "end": "1422960"
  },
  {
    "text": "so this is the this is pretty scary because you can trust an",
    "start": "1422960",
    "end": "1428480"
  },
  {
    "text": "application you think that you've got a service principle and that's the entity that you're going to be interacting with an",
    "start": "1428480",
    "end": "1433760"
  },
  {
    "text": "attacker can't access your service principle because your security is really good but now the security of the",
    "start": "1433760",
    "end": "1440240"
  },
  {
    "text": "service that you're trusting is now in question you have to focus very carefully on that and what permissions",
    "start": "1440240",
    "end": "1446799"
  },
  {
    "text": "you're giving access to and to further complicate matters defenders in in our experience don't really",
    "start": "1446799",
    "end": "1453600"
  },
  {
    "text": "understand the intricacies of azure ad apps there's a lot of new terminology that's you know if you live in an amazon",
    "start": "1453600",
    "end": "1460240"
  },
  {
    "text": "world that is very different or if you live in a gcp world it's very different",
    "start": "1460240",
    "end": "1466640"
  },
  {
    "text": "that this is a very new frontier for defenders and combine that with the fact that",
    "start": "1466640",
    "end": "1472240"
  },
  {
    "text": "logging is pretty minimal and it's less than intuitive there's a big blind spot for defenders",
    "start": "1472240",
    "end": "1479279"
  },
  {
    "text": "to realize that data could be being mass exported from their environment",
    "start": "1479279",
    "end": "1484840"
  },
  {
    "text": "without any sort of alarm bells ringing like i said before fortunately microsoft",
    "start": "1484840",
    "end": "1490240"
  },
  {
    "text": "is paying attention to this issue and they are proactively monitoring for abuse of",
    "start": "1490240",
    "end": "1497840"
  },
  {
    "text": "azure ed apps so with that said i want to hand it over to doug to talk about",
    "start": "1497840",
    "end": "1505200"
  },
  {
    "text": "saml abuse and adfs doug thanks josh now we're going to move into",
    "start": "1505200",
    "end": "1510320"
  },
  {
    "text": "some adfs techniques specifically and saml so before we get into gold and saml",
    "start": "1510320",
    "end": "1515919"
  },
  {
    "text": "i want to give a little bit of a quick one slide walkthrough on the adfs web",
    "start": "1515919",
    "end": "1521520"
  },
  {
    "text": "authentication flow so we've got our user here on the bottom they're going to try and log into office 365. so they go",
    "start": "1521520",
    "end": "1528960"
  },
  {
    "text": "to the website they enter their username and then we go through a process called home realm discovery where office 365 is",
    "start": "1528960",
    "end": "1536720"
  },
  {
    "text": "going to kick me back to my adfs login page which is being proxied by our web",
    "start": "1536720",
    "end": "1542799"
  },
  {
    "text": "application proxy in the dmz now that's really just a dumb reverse proxy uh for",
    "start": "1542799",
    "end": "1548159"
  },
  {
    "text": "the real adfs server which is going to be sitting somewhere in that corporate network right so i enter my username and",
    "start": "1548159",
    "end": "1555039"
  },
  {
    "text": "password adfs is going to pass that over to in most cases active directory to",
    "start": "1555039",
    "end": "1560400"
  },
  {
    "text": "make our actual authentication decision if that authentication is successful",
    "start": "1560400",
    "end": "1565600"
  },
  {
    "text": "then it's going to provide back some information to adfs things like my username maybe my group memberships",
    "start": "1565600",
    "end": "1571679"
  },
  {
    "text": "maybe when the password expires these are all provided in what are called claims which are really just little",
    "start": "1571679",
    "end": "1577039"
  },
  {
    "text": "snippets of information about the identity or the user that's authenticating",
    "start": "1577039",
    "end": "1582240"
  },
  {
    "text": "now adfs is going to take those claims and transform them into new claims it",
    "start": "1582240",
    "end": "1588000"
  },
  {
    "text": "could be simple such as pass through the username or it could be more complex like transform it add some text to it",
    "start": "1588000",
    "end": "1594960"
  },
  {
    "text": "and it's going to package those claims into a security token which is called a saml token now that saml token is just",
    "start": "1594960",
    "end": "1602480"
  },
  {
    "text": "an xml text document it's going to contain those pieces of information those claims and then the security of",
    "start": "1602480",
    "end": "1608799"
  },
  {
    "text": "that document or how office 365 knows it's a valid token",
    "start": "1608799",
    "end": "1613840"
  },
  {
    "text": "is facilitated through a digital signature and that digital signature is using a private key called the adfs",
    "start": "1613840",
    "end": "1621120"
  },
  {
    "text": "token signing key which sits on the adfs server so you can imagine pretty easily if an",
    "start": "1621120",
    "end": "1627679"
  },
  {
    "text": "attacker were able to get their hands on that adfs token signing key they could create saml tokens",
    "start": "1627679",
    "end": "1634240"
  },
  {
    "text": "arbitrarily and access any cloud application that is federated to adfs right so the real bedrock of security",
    "start": "1634240",
    "end": "1641600"
  },
  {
    "text": "for adfs is that token signing key and we want to keep it out of the hands of",
    "start": "1641600",
    "end": "1646720"
  },
  {
    "text": "attackers so shifting our focus or our viewpoint to that attacker viewpoint how do we get",
    "start": "1646720",
    "end": "1652320"
  },
  {
    "text": "our hands on that adfs token signing key well the first step is we need the",
    "start": "1652320",
    "end": "1658159"
  },
  {
    "text": "encrypted key there are a couple of ways to get it but what we're going to focus on is",
    "start": "1658159",
    "end": "1664000"
  },
  {
    "text": "how it's stored in the adfs configuration database and it's packed",
    "start": "1664000",
    "end": "1669200"
  },
  {
    "text": "into this encrypted blob which i have on the screen for us now so there's of course going to be the cipher text but",
    "start": "1669200",
    "end": "1675360"
  },
  {
    "text": "there's also a lot of associated information that we need to perform the decryption things like the nonce and the",
    "start": "1675360",
    "end": "1681520"
  },
  {
    "text": "initialization vector for the decryption routine we also have a mac value so that we can validate that we decrypted the",
    "start": "1681520",
    "end": "1688799"
  },
  {
    "text": "proper ciphertext or cleartext so how do we actually perform this decryption we",
    "start": "1688799",
    "end": "1694480"
  },
  {
    "text": "first need some secret material and that secret material is using a technology called dkm or distributed key",
    "start": "1694480",
    "end": "1701279"
  },
  {
    "text": "manager which is basically a fancy way of storing secrets inside of active",
    "start": "1701279",
    "end": "1706799"
  },
  {
    "text": "directory and so that secret is stored in this adfs group in a contact object",
    "start": "1706799",
    "end": "1714240"
  },
  {
    "text": "specifically in a thumbnail photo attribute of that contact object now by default only the adfs service account",
    "start": "1714240",
    "end": "1722240"
  },
  {
    "text": "and some highly privileged groups like domain admins can read that key",
    "start": "1722240",
    "end": "1728960"
  },
  {
    "text": "now the dkm value is not used by itself to decrypt the token signing certificate",
    "start": "1728960",
    "end": "1734000"
  },
  {
    "start": "1729000",
    "end": "1729000"
  },
  {
    "text": "it's actually used as input to a key derivation function and the key derivation function that we're using is",
    "start": "1734000",
    "end": "1739760"
  },
  {
    "text": "a nist standard it's a hmac sha-256 derivation function and it mostly but not exactly follows",
    "start": "1739760",
    "end": "1746960"
  },
  {
    "text": "the standard defined by nist and this is important because as a red teamer or as attackers if we just use for example the",
    "start": "1746960",
    "end": "1753840"
  },
  {
    "text": "standard python cryptography package we're going to run into issues we actually need to tweak some of the",
    "start": "1753840",
    "end": "1759840"
  },
  {
    "text": "parameters for that function in order to get the proper key now the other inputs are going to be",
    "start": "1759840",
    "end": "1765039"
  },
  {
    "text": "taken out of that encrypted blob that i showed a couple of slides ago so we have the nonce",
    "start": "1765039",
    "end": "1770240"
  },
  {
    "text": "we have the iv we have what's called a context all of that goes into this function and then we get the actual aes",
    "start": "1770240",
    "end": "1776720"
  },
  {
    "text": "symmetric key to use for decryption so at this point we have a valid token",
    "start": "1776720",
    "end": "1781919"
  },
  {
    "text": "signing key but how do we actually create a saml token that for example office 365 will accept",
    "start": "1781919",
    "end": "1789120"
  },
  {
    "text": "well it relies on something called claims issuance rules and so anyone who's dabbled in adfs",
    "start": "1789120",
    "end": "1794799"
  },
  {
    "text": "this will be familiar to you but i've got an example of some of the claim issuance rules for office 365 on",
    "start": "1794799",
    "end": "1801679"
  },
  {
    "text": "this slide and it uses kind of a custom language that is documented by microsoft",
    "start": "1801679",
    "end": "1807440"
  },
  {
    "text": "that falls into two parts we have a condition and then we have the actual issuance rule so it could be very simple such as",
    "start": "1807440",
    "end": "1814399"
  },
  {
    "text": "take the claim that's incoming and just spit it out into the saml token or it could be more complex right",
    "start": "1814399",
    "end": "1820960"
  },
  {
    "text": "now the order of these rules matters it's very important because they're evaluated chronologically so if we as",
    "start": "1820960",
    "end": "1826880"
  },
  {
    "text": "attackers don't follow the order of these rules to the letter we're going to get a different set of resulting claims which",
    "start": "1826880",
    "end": "1834080"
  },
  {
    "text": "means that office 365 or dropbox whatever we're trying to access it might not accept our saml token",
    "start": "1834080",
    "end": "1841200"
  },
  {
    "text": "or we may add additional claims that aren't necessary and for anyone who is",
    "start": "1841200",
    "end": "1847600"
  },
  {
    "text": "following the unk 2452 the solarwinds stuff some of the office 365 tools was",
    "start": "1847600",
    "end": "1854080"
  },
  {
    "text": "we're looking for a user authentication method value of i think it was one six",
    "start": "1854080",
    "end": "1859279"
  },
  {
    "text": "four five seven and that value is just a bitmap of the different claims in the",
    "start": "1859279",
    "end": "1864720"
  },
  {
    "text": "token so as defenders that's kind of neat because we can kind of baseline what that value is and then look for",
    "start": "1864720",
    "end": "1871600"
  },
  {
    "text": "look for outliers the sort of unfortunate thing is that value was never intended to be",
    "start": "1871600",
    "end": "1878240"
  },
  {
    "text": "exposed to defenders so if you search for that value in your unified audit log",
    "start": "1878240",
    "end": "1883840"
  },
  {
    "text": "or in your azure sign in logs you're not going to see it anymore so as defenders we cannot do any detecting based on",
    "start": "1883840",
    "end": "1890320"
  },
  {
    "text": "abnormal claims now microsoft can see the claims in the token to a degree",
    "start": "1890320",
    "end": "1895360"
  },
  {
    "text": "because they can see that user authentication method value so they may be monitoring right and it's important",
    "start": "1895360",
    "end": "1901360"
  },
  {
    "text": "that if we're red teamers or threat actors we want to as closely match a legitimate saml token as possible",
    "start": "1901360",
    "end": "1910159"
  },
  {
    "text": "the last piece of information that we want to focus on is that token lifetime right so how long are these saml tokens",
    "start": "1910159",
    "end": "1916720"
  },
  {
    "text": "valid for now this is configurable per relying party trust which is per cloud",
    "start": "1916720",
    "end": "1922159"
  },
  {
    "text": "application we're trying to access we can find that in the adfs database we",
    "start": "1922159",
    "end": "1927440"
  },
  {
    "text": "can also get it using powershell now a default value of 0 means 60 seconds",
    "start": "1927440",
    "end": "1933679"
  },
  {
    "text": "but we could set it for longer there's nothing to say that we can't make this a year or three years",
    "start": "1933679",
    "end": "1939360"
  },
  {
    "text": "the only things to keep in mind are the saml token is evaluated when you",
    "start": "1939360",
    "end": "1944480"
  },
  {
    "text": "provide it to that application you're trying to access so if we make a saml token with a validity",
    "start": "1944480",
    "end": "1950640"
  },
  {
    "text": "period of five years but the underlying private public key pair is only valid for one the saml token's not going to be",
    "start": "1950640",
    "end": "1957600"
  },
  {
    "text": "valid right the other thing to keep in mind is well this is an anomaly this is something that defenders can key in on",
    "start": "1957600",
    "end": "1964480"
  },
  {
    "text": "and again we run into a situation where actual enterprise defenders cannot see this value so it does not show up in the",
    "start": "1964480",
    "end": "1970720"
  },
  {
    "text": "logs it will not show up in your sim it's not something you can build rules for microsoft however can see this value",
    "start": "1970720",
    "end": "1977440"
  },
  {
    "text": "on their back end and especially after last year's unk2452 spree they're probably",
    "start": "1977440",
    "end": "1983279"
  },
  {
    "text": "monitoring for this so again as red teamers threat actors they're going to want to closely mimic this and 60",
    "start": "1983279",
    "end": "1989039"
  },
  {
    "text": "minutes is pretty long time right in kind of the digital realm so this is all cool but what can we",
    "start": "1989039",
    "end": "1996159"
  },
  {
    "text": "really do with this well as threat actors as red teamers our goal is always going to be persistence right",
    "start": "1996159",
    "end": "2002720"
  },
  {
    "text": "how can we access this data for as long as possible and so it turns out one",
    "start": "2002720",
    "end": "2007919"
  },
  {
    "text": "thing we can do is we can actually add a second token signing certificate to adfs",
    "start": "2007919",
    "end": "2013279"
  },
  {
    "text": "we can have two valid certificates at the same time and the reason for this is",
    "start": "2013279",
    "end": "2018320"
  },
  {
    "text": "token certificate signing certificate rollover right this is managed by adfs",
    "start": "2018320",
    "end": "2023679"
  },
  {
    "text": "and in order to avoid outages there is actually the space for two token signing certificates so that one",
    "start": "2023679",
    "end": "2030640"
  },
  {
    "text": "can expire in 30 days a new one can be created and then you have a little bit of",
    "start": "2030640",
    "end": "2036399"
  },
  {
    "text": "overlap right and in fact both signing certificates can be valid at the same time and",
    "start": "2036399",
    "end": "2042000"
  },
  {
    "text": "there's nothing to say that one signing certificate can be valid for the default period of one year",
    "start": "2042000",
    "end": "2047840"
  },
  {
    "text": "and another one like we see in the screenshot be valid for five years so i can create my secondary token",
    "start": "2047840",
    "end": "2054480"
  },
  {
    "text": "signing certificate i can add it to adfs or if i have global administrator privileges i could bypass adfs entirely",
    "start": "2054480",
    "end": "2062720"
  },
  {
    "text": "and just add it to office 365. we can then create and mint our own",
    "start": "2062720",
    "end": "2067839"
  },
  {
    "text": "tokens for you know as long as we want 5 years 20 years 100 years until someone notices",
    "start": "2067839",
    "end": "2074240"
  },
  {
    "text": "the secondary certificate and gets rid of it we can create valid token signing certificates so a very powerful",
    "start": "2074240",
    "end": "2080638"
  },
  {
    "text": "persistence mechanism and in fact as defenders there is an",
    "start": "2080639",
    "end": "2085760"
  },
  {
    "text": "event log message that gets generated when a new token signing certificate is added but there's no like built-in",
    "start": "2085760",
    "end": "2091358"
  },
  {
    "text": "alerting right we'll need to create some custom scene rules if we want to detect this and you know we're going to have to",
    "start": "2091359",
    "end": "2097118"
  },
  {
    "text": "do some baselining right because this process happens automatically when adfs performs rollovers and unfortunately the",
    "start": "2097119",
    "end": "2105280"
  },
  {
    "text": "event log message does not tell us anything about the cert so we can't create some baselines to say hey tell me",
    "start": "2105280",
    "end": "2110800"
  },
  {
    "text": "whenever a certificate is valid for longer than one year we kind of just need to see this alert maybe establish a",
    "start": "2110800",
    "end": "2116960"
  },
  {
    "text": "pattern or maybe just have someone manually check that new cert so let's move on to some new techniques",
    "start": "2116960",
    "end": "2123680"
  },
  {
    "text": "adfs replication and when i was doing the adfs spoof and",
    "start": "2123680",
    "end": "2128880"
  },
  {
    "text": "dump research a couple years ago you know i always was thinking well what can we do to go further you know this technique is pretty cool it's pretty",
    "start": "2128880",
    "end": "2135280"
  },
  {
    "start": "2135000",
    "end": "2135000"
  },
  {
    "text": "powerful but it relies on a threat actor gaining access to the adfs server and hopefully",
    "start": "2135280",
    "end": "2141520"
  },
  {
    "text": "mature organizations are treating that adfs server as tier zero which means it's going to be hard to get at so is",
    "start": "2141520",
    "end": "2148000"
  },
  {
    "text": "there any way that we could do this over the network and it turns out that we can with adfs",
    "start": "2148000",
    "end": "2153760"
  },
  {
    "text": "replication so you can imagine that larger organizations geographically dispersed organizations they don't want",
    "start": "2153760",
    "end": "2160240"
  },
  {
    "text": "just one adfs server they want multiple and those servers are going to exist in what's called a farm",
    "start": "2160240",
    "end": "2166400"
  },
  {
    "text": "so we have multiple farm nodes and by default they're all going to use the same configuration and they're all going",
    "start": "2166400",
    "end": "2172160"
  },
  {
    "text": "to use the same secrets they're going to use the same token signing certificate so these nodes keep the information in",
    "start": "2172160",
    "end": "2178320"
  },
  {
    "text": "sync by using a replication service and this replication service is going to",
    "start": "2178320",
    "end": "2183520"
  },
  {
    "text": "be served on the primary adfs server which is just the first adfs server that we install the roll on or the first",
    "start": "2183520",
    "end": "2190960"
  },
  {
    "text": "windows server that we install that roll on so replication is going to be",
    "start": "2190960",
    "end": "2196960"
  },
  {
    "start": "2194000",
    "end": "2194000"
  },
  {
    "text": "making use of something called the windows communication foundation or wcf which is really just another.net",
    "start": "2196960",
    "end": "2203520"
  },
  {
    "text": "framework that allows us to really easily build client server applications so it kind of abstracts away all of the",
    "start": "2203520",
    "end": "2210480"
  },
  {
    "text": "stuff that is developers we don't really want to focus on so the channels that communication is going to occur over",
    "start": "2210480",
    "end": "2216079"
  },
  {
    "text": "which in this case is http and things like message security and authentication and authorization which in this case is",
    "start": "2216079",
    "end": "2222880"
  },
  {
    "text": "going to be ws security in kerberos so that replication service is going to be accessible over a",
    "start": "2222880",
    "end": "2230000"
  },
  {
    "text": "well-known uri which i have here on the slide authentication is going to use ws trust",
    "start": "2230000",
    "end": "2235599"
  },
  {
    "text": "esp nego using kerberos and then you can see that this is over",
    "start": "2235599",
    "end": "2240640"
  },
  {
    "text": "port 80 so it's over clear text http but the actual data payloads are going to be encrypted using a shared secret that's",
    "start": "2240640",
    "end": "2247760"
  },
  {
    "text": "derived from the kerberos session key so even though this is you know clear text http the actual data payloads are",
    "start": "2247760",
    "end": "2254560"
  },
  {
    "text": "encrypted so we can't just sit on the wire and uh spoof or snoop on the",
    "start": "2254560",
    "end": "2259920"
  },
  {
    "text": "traffic on the replication traffic now i mentioned that replication",
    "start": "2259920",
    "end": "2266000"
  },
  {
    "text": "is using some sort of authorization right there's going to be a decision made to see if a wcf client can",
    "start": "2266000",
    "end": "2272480"
  },
  {
    "text": "in fact perform this replication and that authorization",
    "start": "2272480",
    "end": "2277599"
  },
  {
    "text": "is going to use a policy which sits on the adfs server in that configuration database and it's just some xml text",
    "start": "2277599",
    "end": "2284480"
  },
  {
    "text": "which i have here on the slide this is the default adfs authorization policy",
    "start": "2284480",
    "end": "2289920"
  },
  {
    "text": "and there are two main rules the first we can see is a user sid this is just the user sid for the adfs service",
    "start": "2289920",
    "end": "2296960"
  },
  {
    "text": "account in my test lab and the second is a group sid and so we can actually see this is a little bit",
    "start": "2296960",
    "end": "2303200"
  },
  {
    "text": "more permissive than than maybe we would think any member of the local administrators group on the adfs server",
    "start": "2303200",
    "end": "2310000"
  },
  {
    "text": "can in fact perform a replication so even though we're still getting an",
    "start": "2310000",
    "end": "2315200"
  },
  {
    "text": "encrypted value we're still getting an encrypted token signing cert we've now expanded the attack surface right",
    "start": "2315200",
    "end": "2321440"
  },
  {
    "text": "previously we needed to run some code on the adfs server and we needed to compromise the adfs service account",
    "start": "2321440",
    "end": "2329119"
  },
  {
    "text": "now we can actually get this secret value from anywhere on the network and in fact we don't even need the adfs",
    "start": "2329119",
    "end": "2334960"
  },
  {
    "text": "service account we can use any local admin so maybe domain admin maybe that's for",
    "start": "2334960",
    "end": "2340079"
  },
  {
    "text": "whatever reason easier to get credentials for than that single adfs service account",
    "start": "2340079",
    "end": "2346480"
  },
  {
    "text": "so how do we actually do the replication well again it turns out it's pretty easy and the reason is wcf it extracts away a",
    "start": "2346480",
    "end": "2353200"
  },
  {
    "text": "lot of what we as developers or tool developers we need to do and on the slide here you see in just a few lines",
    "start": "2353200",
    "end": "2360320"
  },
  {
    "text": "this is really all the code you need to request using the wcf client the",
    "start": "2360320",
    "end": "2366800"
  },
  {
    "text": "particular endpoint to get the encrypted token signing certificate you call a function or you're actually sending a",
    "start": "2366800",
    "end": "2373599"
  },
  {
    "text": "message with the get state operation now there's some more code that you need but it's really all boilerplate and the",
    "start": "2373599",
    "end": "2380400"
  },
  {
    "text": "entire poc that i wrote which i will not be releasing is about 150 lines of code",
    "start": "2380400",
    "end": "2385839"
  },
  {
    "text": "and you can see some some other of my peers wrote wrote a tool in powershell for example which kind of reverse",
    "start": "2385839",
    "end": "2392560"
  },
  {
    "text": "engineered a lot of the actual network protocols but you get the same result there you get the encrypted as token signing",
    "start": "2392560",
    "end": "2399520"
  },
  {
    "text": "certificate so thinking forward to persistence like what can i actually do with this how can",
    "start": "2399520",
    "end": "2405839"
  },
  {
    "text": "i persist my access to for example office 365 for longer or",
    "start": "2405839",
    "end": "2411839"
  },
  {
    "text": "maybe a la dc shadow how can i as a threat actor as a red team or when i re-compromise the network go from domain",
    "start": "2411839",
    "end": "2419119"
  },
  {
    "text": "user to control of adfs in just one click",
    "start": "2419119",
    "end": "2424560"
  },
  {
    "text": "and so it's actually pretty straightforward right we can imagine that when i compromise the network i elevate my privileges to",
    "start": "2424560",
    "end": "2430880"
  },
  {
    "text": "domain admin for example the first thing i do is i edit the object acl to include a new access control entry for that dkm",
    "start": "2430880",
    "end": "2438960"
  },
  {
    "text": "key to allow all domain users to read it so now any domain user can get that dkm",
    "start": "2438960",
    "end": "2444640"
  },
  {
    "text": "key i can also really easily create a new authorization policy to authorize the",
    "start": "2444640",
    "end": "2450960"
  },
  {
    "text": "group sid for domain users to access the replication service using a",
    "start": "2450960",
    "end": "2457040"
  },
  {
    "text": "wcf client so now when i re-compromise the network as a domain user all of the permissions are",
    "start": "2457040",
    "end": "2463680"
  },
  {
    "text": "in place for me to establish a wcf client call that get state operation and i now",
    "start": "2463680",
    "end": "2471440"
  },
  {
    "text": "have the means to decrypt the adfs token signing certificate from anywhere on the",
    "start": "2471440",
    "end": "2476720"
  },
  {
    "text": "network as any user so this is really powerful and we're you know",
    "start": "2476720",
    "end": "2482160"
  },
  {
    "start": "2482000",
    "end": "2482000"
  },
  {
    "text": "we're asking the question why or why are we going to do this well i think that's easy we want persistent access to",
    "start": "2482160",
    "end": "2488960"
  },
  {
    "text": "information and more often than not that information is going to be in office 365 right whether it's email whether it's",
    "start": "2488960",
    "end": "2495359"
  },
  {
    "text": "teams messages whether it's files on sharepoint as a nation state actor with intelligence",
    "start": "2495359",
    "end": "2501520"
  },
  {
    "text": "collection requirements that's going to be the bulk of what i want or as a red teamer that's probably a pretty",
    "start": "2501520",
    "end": "2507200"
  },
  {
    "text": "high importance objective and we're aided by some of the default configurations in adfs when we're",
    "start": "2507200",
    "end": "2513839"
  },
  {
    "text": "performing this attack the first is by default adfs is going to expose port 80",
    "start": "2513839",
    "end": "2519599"
  },
  {
    "text": "to all systems using the windows firewall the adfs role actually creates some",
    "start": "2519599",
    "end": "2524720"
  },
  {
    "text": "default firewall rules for us to allow all port 80 traffic and you know you can imagine well that makes sense right if",
    "start": "2524720",
    "end": "2531280"
  },
  {
    "text": "i'm trying to access something as an end user using web authentication i'm going to need",
    "start": "2531280",
    "end": "2537359"
  },
  {
    "text": "to access it over the web it turns out that's slightly wrong you definitely need port 443 right because as a user",
    "start": "2537359",
    "end": "2545040"
  },
  {
    "text": "authenticating i'm going to be doing this over tls but we don't actually need to expose port 80 to all systems the",
    "start": "2545040",
    "end": "2551119"
  },
  {
    "text": "only adfs service that's using port 80 is that replication service and the only",
    "start": "2551119",
    "end": "2557520"
  },
  {
    "text": "clients that should be accessing that are other adfs servers we also have some logging settings going",
    "start": "2557520",
    "end": "2563599"
  },
  {
    "text": "for us we have some stealth built in the first is that replication events are not logged at all so nowhere not in the",
    "start": "2563599",
    "end": "2570400"
  },
  {
    "text": "security event logs not in the adfs log itself that's not",
    "start": "2570400",
    "end": "2575520"
  },
  {
    "text": "logged anywhere the only way that you'll see this in the event log is is if you enable wcf tracing which to be",
    "start": "2575520",
    "end": "2582560"
  },
  {
    "text": "honest no one's going to do because it's extremely chatty editing that adfs configuration database",
    "start": "2582560",
    "end": "2588720"
  },
  {
    "text": "is also not logged anywhere so we can make changes to that and as long as we don't mess up as long as we don't",
    "start": "2588720",
    "end": "2594400"
  },
  {
    "text": "invalidate the configuration no one's really going to be the wiser and",
    "start": "2594400",
    "end": "2599839"
  },
  {
    "text": "then lastly you know editing domain object acls you know there's some really great research out there and talks out",
    "start": "2599839",
    "end": "2606240"
  },
  {
    "text": "there about you know how you can enable auditing for that but you know i think the organization that enables that is",
    "start": "2606240",
    "end": "2611920"
  },
  {
    "text": "going to be very few and far between so we definitely have some things going for us here with this technique",
    "start": "2611920",
    "end": "2618400"
  },
  {
    "text": "and then you know the attack surface i already talked about a little bit but it's worth noting that you don't need to",
    "start": "2618400",
    "end": "2623920"
  },
  {
    "text": "target the primary adfs server so you know if you're sitting off in some data center far away and that primary server",
    "start": "2623920",
    "end": "2630319"
  },
  {
    "text": "is vland off you can actually access the replication service by um",
    "start": "2630319",
    "end": "2636880"
  },
  {
    "text": "by any adfs server even the secondary server it's just going to service that request for you",
    "start": "2636880",
    "end": "2642720"
  },
  {
    "text": "and if your adfs environment you're targeting is using a sql server backend which is not the default this will work",
    "start": "2642720",
    "end": "2649280"
  },
  {
    "text": "as well right so it's a pretty powerful technique if we're for whatever reason able to get domain admin privileges but",
    "start": "2649280",
    "end": "2655040"
  },
  {
    "text": "not adfs service account privileges we can still get the adfs signing key we can still decrypt it and then we can",
    "start": "2655040",
    "end": "2661839"
  },
  {
    "text": "create this kind of adfs backdoor to give ourselves persistent access to that token signing key",
    "start": "2661839",
    "end": "2668079"
  },
  {
    "text": "so that's all we have for today if we'll have any questions they'll be in the chat i think if not you have my",
    "start": "2668079",
    "end": "2675040"
  },
  {
    "text": "and josh's twitter and thanks guys for listening",
    "start": "2675040",
    "end": "2680000"
  }
]