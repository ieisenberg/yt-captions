[
  {
    "start": "0",
    "end": "30000"
  },
  {
    "text": "foreign",
    "start": "1979",
    "end": "4159"
  },
  {
    "text": "everybody I'm Victor I'm a PhD researcher with varai University type",
    "start": "10580",
    "end": "16379"
  },
  {
    "text": "Amsterdam um and I'm Fabian and we're going to be presenting to you a talk about stock",
    "start": "16379",
    "end": "23279"
  },
  {
    "text": "unwinding so specifically we're going to be talking about control flow hijacking control",
    "start": "23279",
    "end": "31199"
  },
  {
    "start": "30000",
    "end": "130000"
  },
  {
    "text": "flow hijacking means telling a program to execute stuff that it didn't do before or it shouldn't have done the way",
    "start": "31199",
    "end": "37380"
  },
  {
    "text": "it was written so let's take a quick trip down memory lane where we have a",
    "start": "37380",
    "end": "44100"
  },
  {
    "text": "stack of a function and a function calls another function the return address of where execution will continue after that",
    "start": "44100",
    "end": "50219"
  },
  {
    "text": "call Goes On The Stack if we have a stack buffer overflow we can overwrite it",
    "start": "50219",
    "end": "55739"
  },
  {
    "text": "and then we can make it go somewhere else so that's classical psych performance flows",
    "start": "55739",
    "end": "61199"
  },
  {
    "text": "um another way that so this this was addressed by adding a random cookie to the stack and that cookie gets protect",
    "start": "61199",
    "end": "68580"
  },
  {
    "text": "protects the return address so if we overflow the cookie gets changed and the",
    "start": "68580",
    "end": "73799"
  },
  {
    "text": "program dies then another way another mitigation was",
    "start": "73799",
    "end": "80159"
  },
  {
    "text": "added to that where every return address goes onto a separate stack so every time you have a return address on the real",
    "start": "80159",
    "end": "86100"
  },
  {
    "text": "stack it also goes onto a shadow stack so these are Shadow stacks and other mitigation against stack by 4 flows",
    "start": "86100",
    "end": "93240"
  },
  {
    "text": "another popular exploitation technique on Windows was exploiting structured exception handling where there is a",
    "start": "93240",
    "end": "99299"
  },
  {
    "text": "linked list of pointers to exception handlers on the stack and if you overflow those you change them",
    "start": "99299",
    "end": "105960"
  },
  {
    "text": "you can control them and you can hijack them that way and this was mitigated by adding a an allow list of allowed",
    "start": "105960",
    "end": "113100"
  },
  {
    "text": "handlers and with all of these mitigations if our anode is not on the list we die",
    "start": "113100",
    "end": "120720"
  },
  {
    "text": "so with all these mitigations stack buffers are resolved problem that's our talk thank you for listening any",
    "start": "120720",
    "end": "127140"
  },
  {
    "text": "questions I have a question for you yeah go ahead",
    "start": "127140",
    "end": "133739"
  },
  {
    "text": "are there any exceptions to these mitigations that's good thanks for asking that yes",
    "start": "133739",
    "end": "141959"
  },
  {
    "text": "um so now to what we will be talking to you about this time uh we'll be talking",
    "start": "141959",
    "end": "147660"
  },
  {
    "text": "to you about the technique that we call Chop or catch Handler oriented programming job exploits the unwinder",
    "start": "147660",
    "end": "154739"
  },
  {
    "text": "that handles exceptions in programming languages such as C plus plus or other compiled programming languages that do",
    "start": "154739",
    "end": "161580"
  },
  {
    "text": "exception handling and okay we confuse the unwinder so picture in a nutshell",
    "start": "161580",
    "end": "166920"
  },
  {
    "text": "can you explain what the unwinder is So Def and why there is a piece of code so as Fabian was telling you in a low level",
    "start": "166920",
    "end": "175099"
  },
  {
    "text": "in programs written in low-level languages when you get an exception uh",
    "start": "175099",
    "end": "180540"
  },
  {
    "text": "this unwinder kicks in and decides which exception Handler will treat this",
    "start": "180540",
    "end": "185879"
  },
  {
    "text": "exception and with our technique that we call Chop we can exploit and hijack the",
    "start": "185879",
    "end": "193200"
  },
  {
    "text": "unwinder to execute a different Handler now at the beginning of the talk we",
    "start": "193200",
    "end": "198480"
  },
  {
    "text": "thought that there are different control flow hijacking techniques but they are defenses for",
    "start": "198480",
    "end": "203819"
  },
  {
    "text": "them unfortunately these defenses do not work on the unwinding path which makes job",
    "start": "203819",
    "end": "210920"
  },
  {
    "text": "possible we also have a paper coming out next",
    "start": "210920",
    "end": "217019"
  },
  {
    "text": "week on this topic so if you like the technique if you like the talk please read this paper as well it's under",
    "start": "217019",
    "end": "224400"
  },
  {
    "text": "embargo until the 10th of January um but you can find more information about",
    "start": "224400",
    "end": "231840"
  },
  {
    "text": "about this you're gonna see an icon you see the icon in the the right top Corner",
    "start": "231840",
    "end": "238200"
  },
  {
    "text": "uh every time you're going to see a slide with this know that there's more on the topic uh uh in uh in the paper",
    "start": "238200",
    "end": "248000"
  },
  {
    "text": "now let's see if the gist of what we're going to talk we're going to start discussing a little bit on how the",
    "start": "248159",
    "end": "255239"
  },
  {
    "text": "unwinder operates to see what the problem with it is uh then based on the",
    "start": "255239",
    "end": "261299"
  },
  {
    "text": "problem we're going to build with you the the chop technique we're going to",
    "start": "261299",
    "end": "266340"
  },
  {
    "text": "show you how it works and how you can gain further control uh while pulling of",
    "start": "266340",
    "end": "272460"
  },
  {
    "text": "this attack then we're gonna show you more sophisticated ways or or techniques",
    "start": "272460",
    "end": "278699"
  },
  {
    "text": "that you can use leverage this chop attack to pull",
    "start": "278699",
    "end": "285540"
  },
  {
    "text": "off more stronger attacks after which we're going to see the likelihood that",
    "start": "285540",
    "end": "292199"
  },
  {
    "text": "if if indeed a series of issues by looking and analyzing popular binaries",
    "start": "292199",
    "end": "298639"
  },
  {
    "text": "from Debian after which we're going to conclude the the stock with a real world",
    "start": "298639",
    "end": "305940"
  },
  {
    "text": "exploit of a bug with a known TV all right so let's take a look at what",
    "start": "305940",
    "end": "313680"
  },
  {
    "text": "the sun Winder does under the hood so looking at an exam piece of example code",
    "start": "313680",
    "end": "319800"
  },
  {
    "text": "where we have one function which with a try catch block and that calls another function again the return address Goes",
    "start": "319800",
    "end": "326699"
  },
  {
    "text": "On The Stack so that's where execution would resume if an exception isn't thrown however in our this case our",
    "start": "326699",
    "end": "333660"
  },
  {
    "text": "function bar throws an exception and the unwinder is the piece of code that transfers execution from the throw",
    "start": "333660",
    "end": "339900"
  },
  {
    "text": "statement to the corresponding catch Block in in a scope above on the stack",
    "start": "339900",
    "end": "346320"
  },
  {
    "text": "so it does that by looking at that return address and comparing it to an exception table within this exception",
    "start": "346320",
    "end": "352259"
  },
  {
    "text": "table we have called site ranges which roughly correspond to the current to the try blocks",
    "start": "352259",
    "end": "358800"
  },
  {
    "text": "then there is some metadata about which types of exceptions are are handled and then finally there is a landing pad or",
    "start": "358800",
    "end": "366060"
  },
  {
    "text": "the Handler that gets invoked for this specific call Site range the specific set of exceptions and then that's where",
    "start": "366060",
    "end": "373020"
  },
  {
    "text": "execution continues so let's look at an example to make this clear here we have three functions are the",
    "start": "373020",
    "end": "378960"
  },
  {
    "text": "stack for three functions uh and the last function in that call chain throws",
    "start": "378960",
    "end": "384300"
  },
  {
    "text": "in a bad analog exception so the unwinder will consult the exception handling table",
    "start": "384300",
    "end": "390060"
  },
  {
    "text": "it'll start out by looking at the return address of the first function the one that through the bad allocation",
    "start": "390060",
    "end": "395160"
  },
  {
    "text": "exception in this case this return address is not in the table so the stack",
    "start": "395160",
    "end": "400740"
  },
  {
    "text": "on Winder will say nope I don't have a Handler for this one let's continue unwinding and then from",
    "start": "400740",
    "end": "407819"
  },
  {
    "text": "there on it'll look at the next stack frame it'll look in there it will find that there is a matching entry in there",
    "start": "407819",
    "end": "413520"
  },
  {
    "text": "but this is so we threw a bad allocation exception but there is an entry for a",
    "start": "413520",
    "end": "419160"
  },
  {
    "text": "Handler that handles a runtime error so exception type doesn't match we continue unwinding and then lastly we do find a",
    "start": "419160",
    "end": "427500"
  },
  {
    "text": "matching return address and in the exception table in the corresponding call Site range in this case the",
    "start": "427500",
    "end": "433860"
  },
  {
    "text": "unwinder says yes we found one and this is where execution will continue so that's in a few steps basically what the",
    "start": "433860",
    "end": "441060"
  },
  {
    "text": "unwinder does okay and that brings us to how we can exploit",
    "start": "441060",
    "end": "447000"
  },
  {
    "text": "this because it uses those return addresses okay so coming back to this example when",
    "start": "447000",
    "end": "453660"
  },
  {
    "text": "this code will get compiled the com the compiler will generate and enter in the table for this try cache block and uh",
    "start": "453660",
    "end": "461039"
  },
  {
    "text": "when bar will throw its return address will match the qualified range of this cache Handler so it's going to execute",
    "start": "461039",
    "end": "468419"
  },
  {
    "text": "this app but what what happens if we overflow this return address",
    "start": "468419",
    "end": "474780"
  },
  {
    "text": "and write something else there uh well let's take a look at the simple",
    "start": "474780",
    "end": "480900"
  },
  {
    "text": "example here we have a simple function called the the caller will catch the exception the quality will throw the",
    "start": "480900",
    "end": "488280"
  },
  {
    "text": "exception now in normal execution when nothing goes wrong this location will be",
    "start": "488280",
    "end": "493380"
  },
  {
    "text": "caught by the according Handler here info now if we overflow during the execution",
    "start": "493380",
    "end": "500940"
  },
  {
    "text": "of function rule and then we overflow the return address",
    "start": "500940",
    "end": "506400"
  },
  {
    "text": "and then through the exception and we overflow the return address with",
    "start": "506400",
    "end": "512159"
  },
  {
    "text": "some address within the range of the cash online in bar then we will trigly",
    "start": "512159",
    "end": "517440"
  },
  {
    "text": "unwinder to execute this this sketch Handler",
    "start": "517440",
    "end": "522479"
  },
  {
    "text": "um but okay so what so we redirect control but these are valid handles so",
    "start": "522479",
    "end": "528540"
  },
  {
    "text": "these are written by programmers and programmers always write safe code right uh so you can't do anything with this",
    "start": "528540",
    "end": "537120"
  },
  {
    "text": "without without something else so let's talk on what can we control when we redirect to",
    "start": "537120",
    "end": "546300"
  },
  {
    "start": "540000",
    "end": "693000"
  },
  {
    "text": "to a different end and let's use the same example we have a",
    "start": "546300",
    "end": "552959"
  },
  {
    "text": "caller that catches uh collaterals but the color now also prints in the catch",
    "start": "552959",
    "end": "560700"
  },
  {
    "text": "Handler uh variable on the cooler stack frame which is initialized to 23. now in",
    "start": "560700",
    "end": "567180"
  },
  {
    "text": "normal execution when this exception is caught the color will print 23. what",
    "start": "567180",
    "end": "572399"
  },
  {
    "text": "happens if we overflow function full this is so functional here",
    "start": "572399",
    "end": "578700"
  },
  {
    "text": "and we redirect to 100 in a different function that does the same thing prints a local variable well you might think",
    "start": "578700",
    "end": "585660"
  },
  {
    "text": "that okay it's gonna print 42 well it's not going to print 42 it's still going",
    "start": "585660",
    "end": "590880"
  },
  {
    "text": "to print it's still going to print 23 because",
    "start": "590880",
    "end": "597839"
  },
  {
    "text": "even though we change the Handler we're still operating on the color stack which is function form",
    "start": "597839",
    "end": "603959"
  },
  {
    "text": "so in other words essentially when when you're going to overflow uh the frame pass the return",
    "start": "603959",
    "end": "612899"
  },
  {
    "text": "you can control all local variables which are used by the handle during its",
    "start": "612899",
    "end": "618300"
  },
  {
    "text": "execution now you may see that okay then the chop",
    "start": "618300",
    "end": "624180"
  },
  {
    "text": "technique requires you to overflow return and then go past this return to control local variables if you can't do",
    "start": "624180",
    "end": "630300"
  },
  {
    "text": "anything when it sort of happens that for Simplicity some of these local variables are stored in quality saved",
    "start": "630300",
    "end": "639120"
  },
  {
    "text": "register during the color execution and when the coil will call the vulnerable function it might spill some of these",
    "start": "639120",
    "end": "645779"
  },
  {
    "text": "registers on the volume function frame so",
    "start": "645779",
    "end": "652320"
  },
  {
    "text": "um when the unwinder kicks in it knows that",
    "start": "652320",
    "end": "658500"
  },
  {
    "text": "some of these registers are on the qualiframe and it's going to unwind",
    "start": "658500",
    "end": "663959"
  },
  {
    "text": "these registers as well so you might essentially have enough control just by overflowing the cauliflame and reaching",
    "start": "663959",
    "end": "671579"
  },
  {
    "text": "the return in order to take the unwind way yeah so with that we basically saw",
    "start": "671579",
    "end": "677459"
  },
  {
    "text": "that you can by overflowing this return pointer we can redirect to a different exception Handler and we can control the",
    "start": "677459",
    "end": "684899"
  },
  {
    "text": "local variables of that specific exception Handler let's take a look at how we can abuse this technique to craft",
    "start": "684899",
    "end": "691980"
  },
  {
    "text": "some more interesting exploits so again we have a stack perform flow then we",
    "start": "691980",
    "end": "698160"
  },
  {
    "start": "693000",
    "end": "981000"
  },
  {
    "text": "reach a throw after that and then finally we execute a viable Gadget or a",
    "start": "698160",
    "end": "703320"
  },
  {
    "text": "Handler that will that we can abuse so let's take a look at what kind of handlers that we can abuse this way so",
    "start": "703320",
    "end": "710579"
  },
  {
    "text": "we one of the most important things that we need to realize at this point is that",
    "start": "710579",
    "end": "716579"
  },
  {
    "text": "the handlers and the throw statements don't necessarily need to be part of the code of the program that we're execute",
    "start": "716579",
    "end": "723600"
  },
  {
    "text": "that we're exploiting for example you could have throw a statement that's buried far in one",
    "start": "723600",
    "end": "729779"
  },
  {
    "text": "library and you could divert execution to Handler in a different Library so it the if even if the program that we're",
    "start": "729779",
    "end": "736440"
  },
  {
    "text": "exploiting doesn't do any exception handling it might use libraries that do",
    "start": "736440",
    "end": "741600"
  },
  {
    "text": "and there is one library that is used a lot and we found a really really good",
    "start": "741600",
    "end": "746880"
  },
  {
    "text": "Handler in there and this is this is part of the standard C plus Library and this is part of the code that",
    "start": "746880",
    "end": "753660"
  },
  {
    "text": "terminates the program when no Handler is found and this ironically this part",
    "start": "753660",
    "end": "759839"
  },
  {
    "text": "that that terminates the program when there is no exception Handler for our unhandled exception and that terminates",
    "start": "759839",
    "end": "765480"
  },
  {
    "text": "a program on there itself does exception handling so there is a try catch Block in there not going to go into what",
    "start": "765480",
    "end": "771540"
  },
  {
    "text": "happens in the try block the important part for us is the catch block because this catch block calls terminate",
    "start": "771540",
    "end": "777959"
  },
  {
    "text": "with a pointer or a local variable and as Victor explained to you just before",
    "start": "777959",
    "end": "783180"
  },
  {
    "text": "if we control right the if we control the variables of that stack frame",
    "start": "783180",
    "end": "789120"
  },
  {
    "text": "because that's that comes from the stack we can overwrite this pointer",
    "start": "789120",
    "end": "794639"
  },
  {
    "text": "and then it goes on and calls terminate and invokes that Handler and the other",
    "start": "794639",
    "end": "800100"
  },
  {
    "text": "important thing about this is It's a catch-all block so this means it matches all exception types that's what the",
    "start": "800100",
    "end": "806940"
  },
  {
    "text": "three little dots in that catch says so this is a universal Gadget that's why we call it the golden Gadget",
    "start": "806940",
    "end": "813079"
  },
  {
    "text": "because if you can go on there GG all right so another interesting",
    "start": "813079",
    "end": "819600"
  },
  {
    "text": "technique where we can use the chop requires us to understand how stack protectors are applied we talked a",
    "start": "819600",
    "end": "825660"
  },
  {
    "text": "little bit about stack protectors at the beginning of the talk but let's look a little bit dive a little bit deeper so",
    "start": "825660",
    "end": "831779"
  },
  {
    "text": "this is the the function path from lvm that apply stack protectors to functions",
    "start": "831779",
    "end": "837480"
  },
  {
    "text": "now you may see here that before you insert the stack protector you check if",
    "start": "837480",
    "end": "843000"
  },
  {
    "text": "you actually need the stack protector now let's see what happens in this",
    "start": "843000",
    "end": "848579"
  },
  {
    "text": "request a protector it's a lot this function has a lot of comments so don't read it I hope you don't see it through",
    "start": "848579",
    "end": "854579"
  },
  {
    "text": "the tldr I'm going to tell you what the function does so",
    "start": "854579",
    "end": "859980"
  },
  {
    "text": "it checks if a function either explicit equals a local either",
    "start": "859980",
    "end": "866779"
  },
  {
    "text": "defines two different programming constructs a buffer on the stack or has",
    "start": "866779",
    "end": "872339"
  },
  {
    "text": "an instruction that uses the address of local variables",
    "start": "872339",
    "end": "877620"
  },
  {
    "text": "normally known as others taken variables",
    "start": "877620",
    "end": "883079"
  },
  {
    "text": "with if we don't have these prerequisites a function will not get a",
    "start": "883079",
    "end": "888779"
  },
  {
    "text": "stack protector now what can we do with this information let's look at like uh like an uh an",
    "start": "888779",
    "end": "897000"
  },
  {
    "text": "example so consider the call graph of function that applies to protectors in the",
    "start": "897000",
    "end": "902639"
  },
  {
    "text": "epilogue you see the stack uh the canal the cookie check emitted by the compiler",
    "start": "902639",
    "end": "908760"
  },
  {
    "text": "uh if we overflow the return address we also overflow the canary so the function",
    "start": "908760",
    "end": "915360"
  },
  {
    "text": "will abort now consider that the function also handles exceptions we have",
    "start": "915360",
    "end": "920459"
  },
  {
    "text": "a Handler for it and there's a throw that's been cut by designer well when",
    "start": "920459",
    "end": "925800"
  },
  {
    "text": "the Handler finishes Vega cushion it's going to flow in the epilogue with the function so if during the execution of",
    "start": "925800",
    "end": "933000"
  },
  {
    "text": "the Handler we want to overflow the stack even further to do a return based uh control fire jacking we cannot",
    "start": "933000",
    "end": "939060"
  },
  {
    "text": "because the cookie compare will stop us but what if we have another Handler uh",
    "start": "939060",
    "end": "945360"
  },
  {
    "text": "in a function that doesn't have any aloka doesn't have any buffer no address taken local variables and therefore no",
    "start": "945360",
    "end": "954540"
  },
  {
    "text": "cookie and we use a chop technique to over to regularly control to defend where in",
    "start": "954540",
    "end": "961620"
  },
  {
    "text": "this scenario if the Handler gives us the possibility we can further overflow the stack and do",
    "start": "961620",
    "end": "968040"
  },
  {
    "text": "a technique that we call pivot to rope in which we require initial return based",
    "start": "968040",
    "end": "973519"
  },
  {
    "text": "hijack to pull off the technique and here we can actually do this because we",
    "start": "973519",
    "end": "978839"
  },
  {
    "text": "don't have a cookie compare all right so we just saw that how we can",
    "start": "978839",
    "end": "985139"
  },
  {
    "text": "evade the the mitigation that we we showed in the beginning are there any",
    "start": "985139",
    "end": "990540"
  },
  {
    "text": "other ways we can exploit this so let's look at a couple of functions again",
    "start": "990540",
    "end": "995639"
  },
  {
    "text": "called chain of three different functions the first function Foo has a try catch block and",
    "start": "995639",
    "end": "1001639"
  },
  {
    "text": "called bar bar then called baz and baz throws an exception in this case as we have seen a couple of",
    "start": "1001639",
    "end": "1008420"
  },
  {
    "text": "times now the unwinder will transfer control flow from the throw to the catch any code that is after buzz after the",
    "start": "1008420",
    "end": "1015320"
  },
  {
    "text": "culture bars will be unreachable it will be skipped there is an exception to this though",
    "start": "1015320",
    "end": "1021500"
  },
  {
    "text": "um if we have an object on the stack and if that object has some kind of destructors that need to be called so",
    "start": "1021500",
    "end": "1028160"
  },
  {
    "text": "some there's some cleanup code that object's lifetime ends at the throw so",
    "start": "1028160",
    "end": "1033380"
  },
  {
    "text": "it will need to be cleaned up the compiler will do this by emitting a a",
    "start": "1033380",
    "end": "1038660"
  },
  {
    "text": "cleanup Handler for the cleanup code for the destructor that invokes this Destructor",
    "start": "1038660",
    "end": "1045819"
  },
  {
    "text": "after that's done execution will continue and continue at the to the next point in the in the unwinding chain and",
    "start": "1046760",
    "end": "1053780"
  },
  {
    "text": "it'll continue unwinding up to the catch Handler so in this case the destructor will be run",
    "start": "1053780",
    "end": "1059780"
  },
  {
    "text": "on the unwinding path it's these cleanup handlers terminate not by",
    "start": "1059780",
    "end": "1066799"
  },
  {
    "text": "returning they terminate by calling a function called unwind resume which then invokes the unwinder and tells it to",
    "start": "1066799",
    "end": "1072380"
  },
  {
    "text": "continue unwinding so if we overflow we can't just go on to",
    "start": "1072380",
    "end": "1078679"
  },
  {
    "text": "catch handlers we can also Target these cleanup handlers and that gives us a couple of interesting Primitives so",
    "start": "1078679",
    "end": "1084980"
  },
  {
    "text": "cleanup handlers have the interesting property that because they are destructors",
    "start": "1084980",
    "end": "1090679"
  },
  {
    "text": "they're often call cleanup code that means manipulating Heap state that means freeing variables",
    "start": "1090679",
    "end": "1097880"
  },
  {
    "text": "if we can Target arbitrary freeze because the variables that get freed are local to the cleanup handlers that means",
    "start": "1097880",
    "end": "1105080"
  },
  {
    "text": "that we can also call arbitrary freeze in the program that's a really powerful primitive in exploitation because it",
    "start": "1105080",
    "end": "1111740"
  },
  {
    "text": "allows us to trigger use after free vulnerabilities you can also because unwinding resumes",
    "start": "1111740",
    "end": "1118400"
  },
  {
    "text": "after a cleanup Handler you can chain multiple cleanup handlers together and",
    "start": "1118400",
    "end": "1124460"
  },
  {
    "text": "then at the end of the cleanup handlers return into a catch Handler that",
    "start": "1124460",
    "end": "1130220"
  },
  {
    "text": "terminates your chain so you have multiple unit handlers and then you return to account shutter and that's where you you resume execution so on the",
    "start": "1130220",
    "end": "1137480"
  },
  {
    "text": "right here you can see the a reverse engineered cleanup Handler from a binary",
    "start": "1137480",
    "end": "1143000"
  },
  {
    "text": "this is also lip standard C plus and that in this case has an arbitrary free",
    "start": "1143000",
    "end": "1148220"
  },
  {
    "text": "Gadget so it calls the delete operator which is free and then it resumes",
    "start": "1148220",
    "end": "1153559"
  },
  {
    "text": "unwinding and you have a lot of those as we'll see later on in the talk okay so to understand other ways that we can",
    "start": "1153559",
    "end": "1162260"
  },
  {
    "text": "trick the unwinder let's look a little bit on how signal handling works so when",
    "start": "1162260",
    "end": "1168620"
  },
  {
    "text": "a process receives a signal the operating system will stop this process and it's going to decide to either kill",
    "start": "1168620",
    "end": "1174860"
  },
  {
    "text": "the process or execute the signal Handler now what happens",
    "start": "1174860",
    "end": "1180919"
  },
  {
    "text": "if we execute the Cena Handler well before the signal handle executes the",
    "start": "1180919",
    "end": "1186980"
  },
  {
    "text": "operating system will create a special frame on the the stack of the the process it's called a figure frame and",
    "start": "1186980",
    "end": "1194419"
  },
  {
    "text": "it's going to point the return in this Frame to something that resembles a",
    "start": "1194419",
    "end": "1201919"
  },
  {
    "text": "special fifth call call figure return now after the signal and in this Frame",
    "start": "1201919",
    "end": "1209419"
  },
  {
    "text": "we have the state of the program just before doing the signal so we have all general purpose registers here",
    "start": "1209419",
    "end": "1216200"
  },
  {
    "text": "after the signal finishes the fifth config return will",
    "start": "1216200",
    "end": "1223940"
  },
  {
    "text": "restore all the all this register from the thing of uh from the secretary frame",
    "start": "1223940",
    "end": "1229880"
  },
  {
    "text": "however when you execute a signal you can also receive an exception so because",
    "start": "1229880",
    "end": "1235220"
  },
  {
    "text": "the exception happens before the Cisco is called the unwinder needs to essentially do the same thing while",
    "start": "1235220",
    "end": "1241820"
  },
  {
    "text": "encountering a secret time frame and is to restore registers from this Frame however the unwinder does not know that",
    "start": "1241820",
    "end": "1250900"
  },
  {
    "text": "it a signal actually happens so it checks this return for a special op code",
    "start": "1250900",
    "end": "1258020"
  },
  {
    "text": "to see if this this exception happened during signal",
    "start": "1258020",
    "end": "1264860"
  },
  {
    "text": "so an attacker can essentially overflow this Frame put a return that points to to a sick",
    "start": "1264860",
    "end": "1272960"
  },
  {
    "text": "return function and override these registers and then throw an exception now",
    "start": "1272960",
    "end": "1281539"
  },
  {
    "text": "this is essentially crafting a fake secretary now the unwinder",
    "start": "1281539",
    "end": "1287480"
  },
  {
    "text": "restores registers one of the registers in the same is the RFP so the stack point so when the unwinder will unwind",
    "start": "1287480",
    "end": "1294860"
  },
  {
    "text": "is registered we have the possibility to Pivot the stack to an attacker control",
    "start": "1294860",
    "end": "1300080"
  },
  {
    "text": "location another register on the frame is the rip so you can essentially trick",
    "start": "1300080",
    "end": "1306140"
  },
  {
    "text": "the unwinder to execute a different Handler by crafting this fake Sig return",
    "start": "1306140",
    "end": "1312740"
  },
  {
    "text": "frame all right so that was a lot let's look",
    "start": "1312740",
    "end": "1318020"
  },
  {
    "start": "1313000",
    "end": "1618000"
  },
  {
    "text": "at the techniques that we that we just saw so we started out by showing that we",
    "start": "1318020",
    "end": "1323600"
  },
  {
    "text": "can divert control flow using a stack buffer overflow to a specific different",
    "start": "1323600",
    "end": "1329299"
  },
  {
    "text": "Handler so this was a cleanup Handler or catch Handler diversion so",
    "start": "1329299",
    "end": "1336080"
  },
  {
    "text": "invoking the wrong catch Handler for that exception the next thing we can abuse this way is so for example one",
    "start": "1336080",
    "end": "1343220"
  },
  {
    "text": "example of that catch Handler would be a the golden Gadget in standard C plus plus but we can also divert to catch",
    "start": "1343220",
    "end": "1350419"
  },
  {
    "text": "handlers or handlers that don't have stack cookies enabled so that allows us to to Pivot to Rob then we can chain",
    "start": "1350419",
    "end": "1359659"
  },
  {
    "text": "cleanup handlers to groom the Heap into a state where we can do use after free Builder abilities and call arbitrary",
    "start": "1359659",
    "end": "1366620"
  },
  {
    "text": "freeze and then finally with all of that we can also craft Sig return frames and",
    "start": "1366620",
    "end": "1373220"
  },
  {
    "text": "these Sig return frames allow us to Pivot the Heap to other locations and control all registers that as we unwind",
    "start": "1373220",
    "end": "1382240"
  },
  {
    "text": "so these are a couple of powerful Primitives but they they need a couple",
    "start": "1382280",
    "end": "1387740"
  },
  {
    "text": "of prerequisites and with that let's take a look at how easy it is to find",
    "start": "1387740",
    "end": "1393380"
  },
  {
    "text": "those out there in the wild okay um then Victor let's let's take it",
    "start": "1393380",
    "end": "1399320"
  },
  {
    "text": "away so let's talk a little bit on like some statistics on popular binaries now",
    "start": "1399320",
    "end": "1406340"
  },
  {
    "text": "first of all let's recap on the the technique we need we need a stack buffer",
    "start": "1406340",
    "end": "1412340"
  },
  {
    "text": "overflow to overflow or return address we need the troll to trigger the unwinder and then we need the viable",
    "start": "1412340",
    "end": "1418820"
  },
  {
    "text": "Handler now stack buffer overflows are out there the question is do we have uh",
    "start": "1418820",
    "end": "1425419"
  },
  {
    "text": "binaries that use exception that throw enough because we if you don't have a throw we cannot do what you're taking",
    "start": "1425419",
    "end": "1431780"
  },
  {
    "text": "and if we can do a job technique can we actually redirect to something that",
    "start": "1431780",
    "end": "1437000"
  },
  {
    "text": "gives us like meaningful attacker wife capabilities and we essentially did a large scale",
    "start": "1437000",
    "end": "1445520"
  },
  {
    "text": "analysis on Debian packages we use the Debian popularity contest to rank the",
    "start": "1445520",
    "end": "1452780"
  },
  {
    "text": "top 1000 most popular uh by uh packages and we extracted all binaries from these",
    "start": "1452780",
    "end": "1459679"
  },
  {
    "text": "packages this comes to roughly 3 000 K binaries and then we did some analysis",
    "start": "1459679",
    "end": "1467179"
  },
  {
    "text": "to check how many of these binaries use",
    "start": "1467179",
    "end": "1472400"
  },
  {
    "text": "exception handling either catch or throw and roughly 10 percent of this binaries",
    "start": "1472400",
    "end": "1478760"
  },
  {
    "text": "use exceptionally which is quite a large service but that this doesn't tell us anything about",
    "start": "1478760",
    "end": "1484900"
  },
  {
    "text": "our other periques prerequisites so we did another analysis to check how",
    "start": "1484900",
    "end": "1493400"
  },
  {
    "text": "many of these binaries and how many functions in",
    "start": "1493400",
    "end": "1499340"
  },
  {
    "text": "these binaries will eventually throw and we found out that uh half of this",
    "start": "1499340",
    "end": "1505159"
  },
  {
    "text": "binaries contain at least 40 percent of functions that will eventually throw an",
    "start": "1505159",
    "end": "1511400"
  },
  {
    "text": "exception now this is quite for pulling off the initial job",
    "start": "1511400",
    "end": "1518539"
  },
  {
    "text": "technique but what can we do with this now if you noticed",
    "start": "1518539",
    "end": "1524000"
  },
  {
    "text": "our previous four techniques that we we presented they all use more or less some",
    "start": "1524000",
    "end": "1531500"
  },
  {
    "text": "primitive some code Gadget that give the attacker further capabilities to exploit",
    "start": "1531500",
    "end": "1538640"
  },
  {
    "text": "the program so we kind of analyzed all these binaries to look for popular code",
    "start": "1538640",
    "end": "1546440"
  },
  {
    "text": "gadgets we extracted all catch and cleanup",
    "start": "1546440",
    "end": "1551960"
  },
  {
    "text": "handles from from this binaries and we searched for for this specific edges",
    "start": "1551960",
    "end": "1557980"
  },
  {
    "text": "what we found out is that all almost 80",
    "start": "1557980",
    "end": "1563059"
  },
  {
    "text": "percent of uh of this binaries have at least one",
    "start": "1563059",
    "end": "1568940"
  },
  {
    "text": "controllable free function that you can use to to to groom the hip with",
    "start": "1568940",
    "end": "1577279"
  },
  {
    "text": "um apart from that around more than 50 percent of this binary contains at least",
    "start": "1577279",
    "end": "1583279"
  },
  {
    "text": "one for this control from hijacking primitive both in catch and clean up code and moreover",
    "start": "1583279",
    "end": "1590299"
  },
  {
    "text": "um almost uh 50 of this binaries contain a fully controllable right primitive",
    "start": "1590299",
    "end": "1596659"
  },
  {
    "text": "this means that this Primitives can be used both for control for a jacking by",
    "start": "1596659",
    "end": "1602539"
  },
  {
    "text": "overwriting a function pointer or corrupting the program State and do data",
    "start": "1602539",
    "end": "1608120"
  },
  {
    "text": "only attack so the attack the the attack surface is quite large popular binaries",
    "start": "1608120",
    "end": "1614299"
  },
  {
    "text": "indeed contain primitive in December all right so we saw what the attack was",
    "start": "1614299",
    "end": "1621740"
  },
  {
    "start": "1618000",
    "end": "1848000"
  },
  {
    "text": "how the attack works we saw that we have a lot of gadgets that are prevalent out there and there is a lot of code that",
    "start": "1621740",
    "end": "1627500"
  },
  {
    "text": "throws can we put these things together can we build real world exploits with with this technique and we took a look",
    "start": "1627500",
    "end": "1634940"
  },
  {
    "text": "at three pre-existing bugs in software that are out there we didn't find these",
    "start": "1634940",
    "end": "1640159"
  },
  {
    "text": "bugs these were found by other people but we looked at are these exploitable with this technique and to the best of",
    "start": "1640159",
    "end": "1645980"
  },
  {
    "text": "our knowledge they are all not exploitable when modern mitigations are enabled without our technique",
    "start": "1645980",
    "end": "1653480"
  },
  {
    "text": "so there was a an overflow in power DNS which is a textbook example that is",
    "start": "1653480",
    "end": "1658880"
  },
  {
    "text": "really nice to understand there's a apple smart card services and then finally there is",
    "start": "1658880",
    "end": "1664880"
  },
  {
    "text": "um a an exploit in Liberal which is a nice pinata to pocat and we're going to",
    "start": "1664880",
    "end": "1671480"
  },
  {
    "text": "talk about our exploit in Libra this is the vulnerable code that is in",
    "start": "1671480",
    "end": "1679400"
  },
  {
    "text": "Libra when we when we exploited it we're parsing exif tags in a raw image the bra",
    "start": "1679400",
    "end": "1685640"
  },
  {
    "text": "parses raw images and is used for example in image magic and We're looping over all these",
    "start": "1685640",
    "end": "1692659"
  },
  {
    "text": "different tags and taking that tag from the from the file if the tag is a specific type of",
    "start": "1692659",
    "end": "1700940"
  },
  {
    "text": "tag in this case a maker node then that gets handled specifically so if",
    "start": "1700940",
    "end": "1706820"
  },
  {
    "text": "it's a maker note for a Raspberry Pi image from the Raspberry Pi camera and a specific type of Raspberry Pi camera",
    "start": "1706820",
    "end": "1712400"
  },
  {
    "text": "then the maker note is just plain text in the in the image and Libra goes ahead",
    "start": "1712400",
    "end": "1718159"
  },
  {
    "text": "and takes the length that is part of this exif tag and copies that much data into a static sized buffer on the stack",
    "start": "1718159",
    "end": "1726020"
  },
  {
    "text": "so MN text here is 512 bytes large the attacker controls the length that gets",
    "start": "1726020",
    "end": "1731120"
  },
  {
    "text": "copied into it so we have a really really classic stack buffer overflow in here",
    "start": "1731120",
    "end": "1736340"
  },
  {
    "text": "um however after that we can't reach a throw that's a problem so we look at other because We're looping around we",
    "start": "1736340",
    "end": "1742100"
  },
  {
    "text": "can then parse other make other exit tags but there's no throw there to be found except in one place",
    "start": "1742100",
    "end": "1749419"
  },
  {
    "text": "if our image is not a Raspberry Pi camera image",
    "start": "1749419",
    "end": "1754820"
  },
  {
    "text": "then we go into part maker node down here so we're in a bit of a pickle now",
    "start": "1754820",
    "end": "1759860"
  },
  {
    "text": "we can either have a Raspberry Pi camera image where we can overflow or we can trigger",
    "start": "1759860",
    "end": "1767360"
  },
  {
    "text": "a throw or can we let's take a closer look at",
    "start": "1767360",
    "end": "1772580"
  },
  {
    "text": "the stack layout of these functions down here we have the stack frame for",
    "start": "1772580",
    "end": "1777620"
  },
  {
    "text": "parse maker note and farther up on the stack is the make and the model of of the camera",
    "start": "1777620",
    "end": "1783020"
  },
  {
    "text": "so if we overflow we can change that make a model from Raspberry Pi camera to say a poneberry",
    "start": "1783020",
    "end": "1789500"
  },
  {
    "text": "pi camera and then in a subsequent uh exif tag we can then invoke a throw",
    "start": "1789500",
    "end": "1797740"
  },
  {
    "text": "we'll set the return address to a gadget in Liberal that allows us to Pivot to a",
    "start": "1797899",
    "end": "1803240"
  },
  {
    "text": "return oriented programming chain and we use a specific address that you could find in lib standard C plus plus or in",
    "start": "1803240",
    "end": "1809419"
  },
  {
    "text": "lip standard C where or let's see um where",
    "start": "1809419",
    "end": "1814460"
  },
  {
    "text": "that allows when you jump to that it just spawns a shell for you it's called the one gadgets it's a popular exploitation technique",
    "start": "1814460",
    "end": "1821539"
  },
  {
    "text": "the Handler that we're using is part of liberal and it's a again a catch all Handler that just returns one",
    "start": "1821539",
    "end": "1828380"
  },
  {
    "text": "and the interesting part about this function is again it doesn't have any addresses taken it doesn't have any buffers on there it just returns one and",
    "start": "1828380",
    "end": "1834919"
  },
  {
    "text": "if you look at this in a reverse engineering tool it'll you'll see that there is no compare of the cookie",
    "start": "1834919",
    "end": "1840740"
  },
  {
    "text": "there's no stack protector so we can just pivot directly into into romp and we have a small demo prepared for",
    "start": "1840740",
    "end": "1847940"
  },
  {
    "text": "you um over here where",
    "start": "1847940",
    "end": "1853220"
  },
  {
    "start": "1848000",
    "end": "1941000"
  },
  {
    "text": "um we'll we'll just show you what our exploit does we're using a program called",
    "start": "1853220",
    "end": "1858559"
  },
  {
    "text": "raw identify which uses liberal to identify the specific camera or type",
    "start": "1858559",
    "end": "1864080"
  },
  {
    "text": "that made an image so we have an image made by Raspberry Pi camera image and",
    "start": "1864080",
    "end": "1870080"
  },
  {
    "text": "correctly says it's by Raspberry Pi may this have made this image if we now run",
    "start": "1870080",
    "end": "1876020"
  },
  {
    "text": "a script that crafts an exploit payload it'll leak some pointers in this case we",
    "start": "1876020",
    "end": "1882500"
  },
  {
    "text": "have aslr disabled we're assuming that there is another way to to circumvent SLR stands for a single leak required so",
    "start": "1882500",
    "end": "1890120"
  },
  {
    "text": "in this case it only needs a single leak to find the base of the libraries and where they are in memory",
    "start": "1890120",
    "end": "1895940"
  },
  {
    "text": "after doing that it builds together a payload that does the steps that we just",
    "start": "1895940",
    "end": "1901700"
  },
  {
    "text": "explained on the on the stack and it creates a new raw image with those XF",
    "start": "1901700",
    "end": "1907279"
  },
  {
    "text": "tags in there so there's first an exit tag for that overthrows the stack",
    "start": "1907279",
    "end": "1912440"
  },
  {
    "text": "and then there's a nexif tag that then triggers an exception so when we now run raw identify",
    "start": "1912440",
    "end": "1920840"
  },
  {
    "text": "on product Raw it'll spawn shell for us and we can use",
    "start": "1920840",
    "end": "1927860"
  },
  {
    "text": "that shell to for example Echo some messages",
    "start": "1927860",
    "end": "1932500"
  },
  {
    "text": "and yeah that's that's our our small demo similar things work in other",
    "start": "1934100",
    "end": "1941000"
  },
  {
    "start": "1941000",
    "end": "2161000"
  },
  {
    "text": "in in in the other vulnerabilities that we only have time to show you one of",
    "start": "1941000",
    "end": "1946159"
  },
  {
    "text": "those unfortunately so with that we're approaching the end",
    "start": "1946159",
    "end": "1951620"
  },
  {
    "text": "of our talk so again as we saw here even though we",
    "start": "1951620",
    "end": "1958220"
  },
  {
    "text": "have two different code paths that are disjunct that we can do either one of",
    "start": "1958220",
    "end": "1963860"
  },
  {
    "text": "the both in the case where we can do a stack overall flow modify the stack we can actually trigger both this else this",
    "start": "1963860",
    "end": "1971299"
  },
  {
    "text": "branch and this else branch and the key takeaway here is that if we",
    "start": "1971299",
    "end": "1977059"
  },
  {
    "text": "control the stack we can make the program do things that aren't obviously visible just by looking",
    "start": "1977059",
    "end": "1983120"
  },
  {
    "text": "at the source code and you can do you can reach throws that aren't obviously reachable as well",
    "start": "1983120",
    "end": "1991059"
  },
  {
    "text": "with that we're approaching the end of our talk we looked at how unwinding works",
    "start": "1991159",
    "end": "1998539"
  },
  {
    "text": "and figured out and saw how the unwinder uses return addresses to figure out",
    "start": "1998539",
    "end": "2003640"
  },
  {
    "text": "where to target the exception handlers if we overflow those return addresses we",
    "start": "2003640",
    "end": "2009880"
  },
  {
    "text": "can do a control cache Handler oriented programming and that's the general idea",
    "start": "2009880",
    "end": "2016120"
  },
  {
    "text": "of our talk of what we're presenting today we talked about four different specific",
    "start": "2016120",
    "end": "2021279"
  },
  {
    "text": "techniques that you can use to leverage job either by using the golden Gadget in lip",
    "start": "2021279",
    "end": "2028779"
  },
  {
    "text": "Center C plus by pivoting to a return oriented programming and evading stack cookies",
    "start": "2028779",
    "end": "2037980"
  },
  {
    "text": "signal handlers and then finally we also looked at the cleanup handlers and how",
    "start": "2038100",
    "end": "2043960"
  },
  {
    "text": "you can chain them to manipulate the Heap into a state that's good for exploitation and Trigger use after freeze",
    "start": "2043960",
    "end": "2049179"
  },
  {
    "text": "and then after it starts and the real world example now we're here at the end of our talk recapping what we did",
    "start": "2049179",
    "end": "2056679"
  },
  {
    "text": "there's a couple of honorable mentions and people that helped us along the way um",
    "start": "2056679",
    "end": "2061780"
  },
  {
    "text": "I think it wasn't just us two it was an entire research team that you saw in the beginning of the slide",
    "start": "2061780",
    "end": "2067780"
  },
  {
    "text": "we also like to to thank the CTF team tasteless for organizing a CTF on this",
    "start": "2067780",
    "end": "2075099"
  },
  {
    "text": "subject yeah Greg super helpful he pointed out an",
    "start": "2075099",
    "end": "2080440"
  },
  {
    "text": "example that was a textbook example of the party DNS bug",
    "start": "2080440",
    "end": "2085500"
  },
  {
    "text": "which is really nice at demonstrating this uh this topic uh yiska for the",
    "start": "2085500",
    "end": "2091599"
  },
  {
    "text": "Cookie Monster is that we're hiding in the slides and yeah they are my team the",
    "start": "2091599",
    "end": "2097180"
  },
  {
    "text": "vothic group that gave us a lot of feedback and drilled off many times for",
    "start": "2097180",
    "end": "2103480"
  },
  {
    "text": "this presentation I hope you people enjoyed it",
    "start": "2103480",
    "end": "2109119"
  },
  {
    "text": "it was really fun to do this and with this uh we're gonna live on",
    "start": "2109119",
    "end": "2116680"
  },
  {
    "text": "this slide a couple of key takeaways from our talk I think uh given the time",
    "start": "2116680",
    "end": "2122920"
  },
  {
    "text": "do we have time for questions we do we do or do we um I think maybe one one quick question",
    "start": "2122920",
    "end": "2129760"
  },
  {
    "text": "anyone has any questions they should come up to the mic yeah just come up to the mic um we'll leave these up here there's",
    "start": "2129760",
    "end": "2136180"
  },
  {
    "text": "also a QR code with a GitHub repository that's currently empty it'll be filled",
    "start": "2136180",
    "end": "2141540"
  },
  {
    "text": "as uh as soon as the um you heard these promises before yeah it'll be it'll be",
    "start": "2141540",
    "end": "2148359"
  },
  {
    "text": "filled as soon as the Embargo lifts [Music]",
    "start": "2148359",
    "end": "2156320"
  },
  {
    "text": "[Music]",
    "start": "2160170",
    "end": "2163269"
  }
]