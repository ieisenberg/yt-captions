[
  {
    "text": "the discussing is a Python program that I've released on the black hat website so if you go click on the black hat",
    "start": "59800",
    "end": "66200"
  },
  {
    "text": "website under the schedule you'll actually see a GPL so I guess half you can't click but you know for $40,000",
    "start": "66200",
    "end": "74720"
  },
  {
    "text": "I'll BSD license it t um it's it's a GPL",
    "start": "74720",
    "end": "80280"
  },
  {
    "text": "program that takes bytes and changes them into other bytes like most programs but uh we'll be discussing in detail",
    "start": "80280",
    "end": "86640"
  },
  {
    "text": "what it does and you can read through with it if you like or read ahead of",
    "start": "86640",
    "end": "92200"
  },
  {
    "text": "time or you know comment on my poor coding style whatever strikes are fancy",
    "start": "92200",
    "end": "99640"
  },
  {
    "text": "so I think might as well start seems like there's a lot of people here and it's about time to",
    "start": "99640",
    "end": "106359"
  },
  {
    "text": "start all right so this this presentation was uh originally written",
    "start": "108560",
    "end": "115520"
  },
  {
    "text": "um because I thought there were a lot of there was a lot of process invol involved in understanding what an",
    "start": "115520",
    "end": "122119"
  },
  {
    "text": "exploit really is that I thought the traditional this is a buffer overflow talks were missing uh and so I wanted to",
    "start": "122119",
    "end": "129520"
  },
  {
    "text": "get a bit into detail on the process and to do this I analyzed an existing vulnerability although you know this",
    "start": "129520",
    "end": "136959"
  },
  {
    "text": "could apply to any vulnerability that you're going through I wanted people to understand the",
    "start": "136959",
    "end": "142080"
  },
  {
    "text": "mindset um I'm the founder of immunity Incorporated it's a New York City based company does Consulting and products one",
    "start": "142080",
    "end": "149120"
  },
  {
    "text": "of the products you sort of Saw uh it's canvas it's kind of a toolkit for",
    "start": "149120",
    "end": "154280"
  },
  {
    "text": "demonstrating exploits or if you're someone who writes exploits it's a toolkit for writing exploits and",
    "start": "154280",
    "end": "160280"
  },
  {
    "text": "demonstrating exploits I also sell a Solaris kernel forensics tool which will",
    "start": "160280",
    "end": "165519"
  },
  {
    "text": "detect kernel Trojans um it does this fairly well I",
    "start": "165519",
    "end": "170800"
  },
  {
    "text": "also give away Spike and Spike proxy Spike proxy is just as good as any of",
    "start": "170800",
    "end": "176599"
  },
  {
    "text": "the web application assessors that you've seen and used perhaps in your company except free and open source and",
    "start": "176599",
    "end": "183840"
  },
  {
    "text": "Spike is uh kind of groundbreaking tool for finding vulnerabilities like the one",
    "start": "183840",
    "end": "189840"
  },
  {
    "text": "that I just showed you and it I have a whole another blackhe hat talk on that hopefully you caught that uh I've found",
    "start": "189840",
    "end": "196120"
  },
  {
    "text": "vulnerabilities in many programs and some of these have gone public and some of them have not and I guess you can do",
    "start": "196120",
    "end": "202200"
  },
  {
    "text": "a bug track search on me to find out exactly what I have done that is public",
    "start": "202200",
    "end": "208360"
  },
  {
    "text": "um this talk talk specifically does not cover everything that you need to know to write a Windows overflow no one talk",
    "start": "208360",
    "end": "215159"
  },
  {
    "text": "could do that uh but many talks I think leave out important things or gloss over",
    "start": "215159",
    "end": "221599"
  },
  {
    "text": "them or haven't touched them uh one some of these things are Heap overflows this talk is not going to be about a heap",
    "start": "221599",
    "end": "227599"
  },
  {
    "text": "overflow but there's a lot of interesting places to go when exploiting",
    "start": "227599",
    "end": "232959"
  },
  {
    "text": "a Windows Heap overflow that I don't think any talk or paper has really done uh fixing the Heap after overflow occurs",
    "start": "232959",
    "end": "240000"
  },
  {
    "text": "is probably the main one uh the other one is actually finding the the function pointers as you trace through the",
    "start": "240000",
    "end": "246319"
  },
  {
    "text": "exception handlers uh and doing the multiple overwrites there's actually a New Zealander uh who was keying me into",
    "start": "246319",
    "end": "253920"
  },
  {
    "text": "ways of doing multiple overwrites recently uh the PE header parsing I",
    "start": "253920",
    "end": "259000"
  },
  {
    "text": "think has been covered fairly well now by several people uh if you went to Riley hassel's talk he discussed it a",
    "start": "259000",
    "end": "265160"
  },
  {
    "text": "bit LSD has come out with their paper and uh shell codes stuff on it uh in",
    "start": "265160",
    "end": "271520"
  },
  {
    "text": "reality it's been known for quite a while um Library call redirection is something that I think under the windows",
    "start": "271520",
    "end": "278240"
  },
  {
    "text": "platform is much more valuable than under the Unix platform where it's known as CIS call redirection uh and I'm not going to be",
    "start": "278240",
    "end": "285520"
  },
  {
    "text": "discussing why but canvas is built or the windows part of canvas is built on that the other sort of Windows specifics",
    "start": "285520",
    "end": "294000"
  },
  {
    "text": "for exploitation or writing an exploit tokens and impersonation and that entire morass",
    "start": "294000",
    "end": "300320"
  },
  {
    "text": "probably one of the bigger design mistakes in NT was putting multiple authentication or multiple sort of",
    "start": "300320",
    "end": "307280"
  },
  {
    "text": "authorization mechanisms together that will encapsulate in one process different user levels um which is",
    "start": "307280",
    "end": "315000"
  },
  {
    "text": "probably not wise uh dcpc is poorly understood by anybody I think it's just",
    "start": "315000",
    "end": "320360"
  },
  {
    "text": "too complex to understand uh and so exploiting the holes in that and I think also the unic code is something that",
    "start": "320360",
    "end": "327440"
  },
  {
    "text": "unlike in Unix in NT is kind of a big B of the OS the internal function calls use Unicode uh entirely and so actually",
    "start": "327440",
    "end": "336600"
  },
  {
    "text": "dealing with Unicode is is another thing that most people haven't had to do or if they have done have found some tricky",
    "start": "336600",
    "end": "342400"
  },
  {
    "text": "way of getting around it a lot of this presentation is not needing a tricky way to get around",
    "start": "342400",
    "end": "349720"
  },
  {
    "text": "it okay so if you look at like what a Unicode",
    "start": "350360",
    "end": "355479"
  },
  {
    "text": "exploit is typically described as if someone releases an advisory and they say I have a Unicode exploit in",
    "start": "355479",
    "end": "361880"
  },
  {
    "text": "following product this is what they really should be saying what they really mean is I",
    "start": "361880",
    "end": "367880"
  },
  {
    "text": "found some way to get arbitrary data into Unicode form but in reality a true",
    "start": "367880",
    "end": "373000"
  },
  {
    "text": "Unicode exploit and this is going to be very common as you find you know exploits in dcom is that you'll get some",
    "start": "373000",
    "end": "380440"
  },
  {
    "text": "sort of thing is in this case any process taking in an asky string it's going to take a native string in and",
    "start": "380440",
    "end": "386199"
  },
  {
    "text": "it's going to say okay now that I have it I need to give it to somebody else and it's going to send it across with an",
    "start": "386199",
    "end": "391520"
  },
  {
    "text": "RPC call to some other process or even itself and what when it does that it'll",
    "start": "391520",
    "end": "398520"
  },
  {
    "text": "probably pre-con convert it to you know some version of Unicode in whatever localization that it thinks it wants to",
    "start": "398520",
    "end": "405319"
  },
  {
    "text": "put it in and that other process which could be an entirely separate memory area it's an",
    "start": "405319",
    "end": "412680"
  },
  {
    "text": "entirely different process is going to overflow and now you're in a situation",
    "start": "412680",
    "end": "417879"
  },
  {
    "text": "where you've overflowed and the data have is in Unicode format and so it's sort of a special case of the filter",
    "start": "417879",
    "end": "424319"
  },
  {
    "text": "sort of aspect of exploitation there's a filter put onto your input string that",
    "start": "424319",
    "end": "430199"
  },
  {
    "text": "is restricting what you can do during your exploit so I kind of strictly defined it",
    "start": "430199",
    "end": "436319"
  },
  {
    "text": "as a Unicode exploit does not allow you to access your shell code as non-unicode",
    "start": "436319",
    "end": "441840"
  },
  {
    "text": "in the case of for example a locator exploit it's actually a Unicode string",
    "start": "441840",
    "end": "447400"
  },
  {
    "text": "but you can put arbitrary binary data into it so you're not really restricted in any way but in in the exploit that I",
    "start": "447400",
    "end": "454919"
  },
  {
    "text": "chose to do this demonstration on you are I think it's much more it's a restrictive case and if you can show",
    "start": "454919",
    "end": "460240"
  },
  {
    "text": "that the restrictive case is easy and doable then you can expand that to the other cases so it's really I mean I found it",
    "start": "460240",
    "end": "469919"
  },
  {
    "text": "uh very unreliable trying to find a way to get arbitrary binary data into this particular exploit that we're going to",
    "start": "469919",
    "end": "475479"
  },
  {
    "text": "be talking about and and we'll talk about kind of what sort of string manipulation is done by the process as",
    "start": "475479",
    "end": "482840"
  },
  {
    "text": "we go through so the one we're talking about today is a known vulnerability in",
    "start": "482840",
    "end": "488440"
  },
  {
    "text": "Microsoft content server 2001 um it's it's been known for a while",
    "start": "488440",
    "end": "494919"
  },
  {
    "text": "it's it's remotely exploitable via just a simple post to a login page that it installs during the",
    "start": "494919",
    "end": "501039"
  },
  {
    "text": "installation process and Microsoft content server I've never actually used it but uh it does connect to SQL server",
    "start": "501039",
    "end": "509080"
  },
  {
    "text": "and it manages your content I assume um but it is it's a stack",
    "start": "509080",
    "end": "514479"
  },
  {
    "text": "Overflow and it's Unicode and that's really all you have to know in the weekending so it was announced August",
    "start": "514479",
    "end": "521080"
  },
  {
    "text": "7th credited to this guy I can't pronounce his name correctly I'm sure so",
    "start": "521080",
    "end": "526279"
  },
  {
    "text": "feel free to read it but there were actually two other remotes that he found in Microsoft content server in 2001 I",
    "start": "526279",
    "end": "532160"
  },
  {
    "text": "think the 2001 server line I'm sure was not as nearly as robust as the stuff coming out now but uh in this case found",
    "start": "532160",
    "end": "539800"
  },
  {
    "text": "a couple other things and I haven't even looked at those things since I thought this problem was more interesting but",
    "start": "539800",
    "end": "545560"
  },
  {
    "text": "those things as well are just the same remote Roots so if you read The Advisory you'll",
    "start": "545560",
    "end": "552440"
  },
  {
    "text": "get some useful data out of it you you'll learn that a buff overflow somewhere in a low-level function that",
    "start": "552440",
    "end": "559839"
  },
  {
    "text": "performs user identification is is accessible via some web page functionality of some kind",
    "start": "559839",
    "end": "567000"
  },
  {
    "text": "right so taking it to its fuzziest that's all you know about the vulnerability when you're going to look",
    "start": "567000",
    "end": "572519"
  },
  {
    "text": "for it and the mitigating factors listed are you know it's not there unless you",
    "start": "572519",
    "end": "579560"
  },
  {
    "text": "install it but also URL scan which is a Microsoft tool to limit the length of URL and URL arguments uh would block any",
    "start": "579560",
    "end": "588240"
  },
  {
    "text": "URL with non asky data and one thing I found odd about",
    "start": "588240",
    "end": "593440"
  },
  {
    "text": "this was that the actual overflow is not in the URL as far as I can tell maybe",
    "start": "593440",
    "end": "599720"
  },
  {
    "text": "there's some other overflow that I haven't been able to find in the URL uh and that's often the case actually is",
    "start": "599720",
    "end": "605440"
  },
  {
    "text": "that when you find one overflow the whole code is riddled with problems but",
    "start": "605440",
    "end": "611000"
  },
  {
    "text": "in this case I didn't find an overflow in the URL and I did look for a while I wasted a couple hours looking for one",
    "start": "611000",
    "end": "617240"
  },
  {
    "text": "and it also says that the attacker would need to construct valid executable code using only asky data which makes it",
    "start": "617240",
    "end": "623079"
  },
  {
    "text": "sound incredibly difficult so um those of you who've downloaded my python",
    "start": "623079",
    "end": "628839"
  },
  {
    "text": "script from the web page can now construct asky only executable code unit",
    "start": "628839",
    "end": "635399"
  },
  {
    "text": "code format but we're going to be talking kind of how you can do that so to find the process of finding a",
    "start": "635399",
    "end": "642040"
  },
  {
    "text": "vulnerability is what I kind finding and exploiting it successfully is kind of what I wanted to walk through um",
    "start": "642040",
    "end": "648600"
  },
  {
    "text": "basically obtaining the software and installing it and then I just said what",
    "start": "648600",
    "end": "654160"
  },
  {
    "text": "process is running as local system because the advisory said you could get system",
    "start": "654160",
    "end": "659800"
  },
  {
    "text": "and is new and the one that sticks out is something called AE Security Service uh so you attach to it with Ali",
    "start": "659800",
    "end": "667600"
  },
  {
    "text": "debug which is the best debugger that I've found for doing this sort of thing although you may disagree with me with",
    "start": "667600",
    "end": "673240"
  },
  {
    "text": "that depending on it's called Ali debug Ali his name is Oli he wrote a debugger",
    "start": "673240",
    "end": "679440"
  },
  {
    "text": "he called it Oli debug that's good um so you can Google that it'll pop up",
    "start": "679440",
    "end": "687800"
  },
  {
    "text": "it's it's free but it's not open source um but it's good it's got a nice",
    "start": "687800",
    "end": "693040"
  },
  {
    "text": "goey that's what you saw earlier if you were here anyway so I have this program called Spike proxy which takes small",
    "start": "693040",
    "end": "699839"
  },
  {
    "text": "strings and makes them bigger uh in the in the context of a web application it",
    "start": "699839",
    "end": "706320"
  },
  {
    "text": "does that fairly well you click overflow after browsing around on the content server Pages which you can see via the",
    "start": "706320",
    "end": "712800"
  },
  {
    "text": "is MMC plugin and you wait and all debug breaks and that's where the Overflow is",
    "start": "712800",
    "end": "721240"
  },
  {
    "text": "and the bolded part I bolded if you can see it it's the actual machine name that's the first overflow that you find",
    "start": "721279",
    "end": "729200"
  },
  {
    "text": "the this is just some random login page and you have to make sure that you",
    "start": "729200",
    "end": "734560"
  },
  {
    "text": "actually add your overflow string to the end of that and you can't interrupt that win n colon SL slash which is what",
    "start": "734560",
    "end": "741519"
  },
  {
    "text": "you're really seeing there so the Overflow is interesting because a lot of tools will will just replace the win ton",
    "start": "741519",
    "end": "749720"
  },
  {
    "text": "SL SL string with their own long string and that that actually won't find the vulnerability you do have to sort of",
    "start": "749720",
    "end": "756800"
  },
  {
    "text": "have a certain format to it and um I got lucky that Spike proxy does just aend",
    "start": "756800",
    "end": "763279"
  },
  {
    "text": "things as well as prepending them and replacing them so that's the vulnerability and long string out of",
    "start": "763279",
    "end": "770279"
  },
  {
    "text": "small string as most vulnerabilities are if you if you just quickly do in oi",
    "start": "770279",
    "end": "775680"
  },
  {
    "text": "debug this all these little windows that you see here are just me screen scraping from Ali debug so if you screen scrape",
    "start": "775680",
    "end": "783120"
  },
  {
    "text": "Ali debug after finding that vulnerability and you look at the call stack little functionality they will",
    "start": "783120",
    "end": "788560"
  },
  {
    "text": "show you this little thing which shows you clearly that the string I sent was 4,000 40,000 bytes long and they appear",
    "start": "788560",
    "end": "796880"
  },
  {
    "text": "to be using that value as the maximum length so the source which is what they really should have been using or",
    "start": "796880",
    "end": "803360"
  },
  {
    "text": "actually some calculation based on the source is is much smaller than 40,000 it",
    "start": "803360",
    "end": "809279"
  },
  {
    "text": "turns out and so it crashed and the call stack was set this way so this is kind",
    "start": "809279",
    "end": "815279"
  },
  {
    "text": "of like what am I dealing with you're dealing with wcsn copy which you can tell right away is going to be a Unicode",
    "start": "815279",
    "end": "824160"
  },
  {
    "text": "operation because of the W uh and look at the fact that you",
    "start": "824160",
    "end": "829279"
  },
  {
    "text": "control the source and the dust is on the stack which if you are looking at",
    "start": "829279",
    "end": "834399"
  },
  {
    "text": "the the registers you can tell which is ESP so you know where the stack is so just to briefly revisit what a typical",
    "start": "834399",
    "end": "842000"
  },
  {
    "text": "win32 buffer overflow looks like you get you basically over you trash the whole",
    "start": "842000",
    "end": "848199"
  },
  {
    "text": "stack and somewhere on the stack is going to be a little function pointer called an exception Handler and you're",
    "start": "848199",
    "end": "853880"
  },
  {
    "text": "going to overwrite the exception Handler and after the exception happens because you're going to overwrite the segment boundary at the end of the stack it's",
    "start": "853880",
    "end": "859360"
  },
  {
    "text": "going to give you control and you're going to direct it to some other thing that says call ESI or call some other",
    "start": "859360",
    "end": "865360"
  },
  {
    "text": "register and in this case if you look at the the screen you'll see that ESI has a",
    "start": "865360",
    "end": "870480"
  },
  {
    "text": "pointer to our string which is going to then execute our string if we can call ESI so that's the typical process of",
    "start": "870480",
    "end": "878440"
  },
  {
    "text": "obtaining control and executing your shell code once you've done that you pretty much won the game in most",
    "start": "878440",
    "end": "885839"
  },
  {
    "text": "cases so unfortunately this particular Microsoft content server overflow is not",
    "start": "885839",
    "end": "891639"
  },
  {
    "text": "a typical overflow it has a lot of wrinkles to it which is why I found it interesting enough to write a",
    "start": "891639",
    "end": "897360"
  },
  {
    "text": "presentation about uh uh but just to give you some context from beginning to end from from from reading the advisory",
    "start": "897360",
    "end": "905160"
  },
  {
    "text": "and saying hm this one might be interesting to look at to finishing the exploit took about two weeks because",
    "start": "905160",
    "end": "910360"
  },
  {
    "text": "there was a lot of infrastructure that had to be done to do the exploit but just to that's where we're going we're",
    "start": "910360",
    "end": "916360"
  },
  {
    "text": "going to have a working exploit at the end in case you're wondering what the magic ending was but the real issue with",
    "start": "916360",
    "end": "923839"
  },
  {
    "text": "this is that there's no there's no standard way that I can f",
    "start": "923839",
    "end": "929360"
  },
  {
    "text": "to get your binary data into that string that actually does the Overflow without",
    "start": "929360",
    "end": "934759"
  },
  {
    "text": "having it be unic coded and unic coding is is different on Service Pack 2 and",
    "start": "934759",
    "end": "940639"
  },
  {
    "text": "Service Pack 3 in the terms of this at least as demonstrated by this overflow",
    "start": "940639",
    "end": "946240"
  },
  {
    "text": "the unic coding process can change a little bit which makes your exploit a little bit variable but the main",
    "start": "946240",
    "end": "952800"
  },
  {
    "text": "difficulty is that you're if you're just restricted on that filter and you're you're thrown through that function",
    "start": "952800",
    "end": "958240"
  },
  {
    "text": "there's a there's a huge subset of the normal operations that you would do there's a huge set of this stuff that",
    "start": "958240",
    "end": "964720"
  },
  {
    "text": "you can no longer just easily do so a lot of this presentation is",
    "start": "964720",
    "end": "971279"
  },
  {
    "text": "going to be a little bit split between the Service Pack 2 situation and the Service Pack 3 situation but if you",
    "start": "971279",
    "end": "977040"
  },
  {
    "text": "think about the Service Pack 2 situation which is more restrictive you're you're in a better State for the Service Pack 3",
    "start": "977040",
    "end": "982360"
  },
  {
    "text": "situation because it only took like a day to sort of or a few minutes really to Port over the service pack two to the",
    "start": "982360",
    "end": "987839"
  },
  {
    "text": "service PC 3 the surfice Pack 2 is so restrictive that it really took a lot of",
    "start": "987839",
    "end": "993920"
  },
  {
    "text": "effort okay so cataloging the situation when the Overflow happens you get e EIP",
    "start": "993920",
    "end": "1001160"
  },
  {
    "text": "you have it and it's pointing to a version of your string right you can you",
    "start": "1001160",
    "end": "1006759"
  },
  {
    "text": "can you can say that EIP I own and ebx points at me and that's a good situation",
    "start": "1006759",
    "end": "1012240"
  },
  {
    "text": "to be in you can say that I know that there's another version of my string on",
    "start": "1012240",
    "end": "1017480"
  },
  {
    "text": "the Heap somewhere and it's important to sort of as you write an exploit like this catalog what you control in all of",
    "start": "1017480",
    "end": "1024360"
  },
  {
    "text": "memory and in the registers and in any other state that you can control instead of just looking at what's on the stack",
    "start": "1024360",
    "end": "1030760"
  },
  {
    "text": "or what's on the particular string that you've overflown uh and you have to look at",
    "start": "1030760",
    "end": "1037079"
  },
  {
    "text": "kind of the filter that's been applied it's basically just a function the Unicode function that got applied under",
    "start": "1037079",
    "end": "1042880"
  },
  {
    "text": "version SP2 actually differed between the version that was on the stack which was a very restrictive utf16 something",
    "start": "1042880",
    "end": "1050280"
  },
  {
    "text": "there's like there there's a few different versions of Unicode that get applied apparently but you just look at",
    "start": "1050280",
    "end": "1055360"
  },
  {
    "text": "what it is and it's very strict in and what it allows on the stack and if you looked at the one on the Heap it wasn't",
    "start": "1055360",
    "end": "1060400"
  },
  {
    "text": "as strict so you maintain kind of a little notepad list of at this address I",
    "start": "1060400",
    "end": "1065960"
  },
  {
    "text": "have the following restrictions on my string and it got transformed in the following way and at this address I have",
    "start": "1065960",
    "end": "1072000"
  },
  {
    "text": "the other restrictions so you have kind of a little table of what kind of resources you have available to you um",
    "start": "1072000",
    "end": "1079840"
  },
  {
    "text": "and because EIP is on the stack in this case it was subject the most restrictive case in that you couldn't have anything",
    "start": "1079840",
    "end": "1087240"
  },
  {
    "text": "above 7f and the other major issue is that you're not in inet info you don't have a",
    "start": "1087240",
    "end": "1093200"
  },
  {
    "text": "raw socket you can just grab so as you're writing an exploit you always think about how is this exploit going to",
    "start": "1093200",
    "end": "1099559"
  },
  {
    "text": "communicate with me the attacker and in the case of a lot of programs it's just going to try to steal that wind sock",
    "start": "1099559",
    "end": "1105480"
  },
  {
    "text": "socket but in the case of something that's in a decom thing you don't even know what machine it's on so having it",
    "start": "1105480",
    "end": "1111919"
  },
  {
    "text": "communicate over the same socket is not an option so the constraints that you view",
    "start": "1111919",
    "end": "1118320"
  },
  {
    "text": "are with a Unicode are very often this this sort of thing you're going to get the choice to overwrite EIP with a",
    "start": "1118320",
    "end": "1125960"
  },
  {
    "text": "certain set of numbers and this is going to correspond to a certain set of memory addresses that you can jump",
    "start": "1125960",
    "end": "1132080"
  },
  {
    "text": "to so I just described it as sort of a Ford like function you can have any kind of car as long as it's black or in the",
    "start": "1132080",
    "end": "1139440"
  },
  {
    "text": "case of this you can have any kind of EIP as long as it's in this following",
    "start": "1139440",
    "end": "1144559"
  },
  {
    "text": "format which is you can't have zeros because zeros will terminate your string",
    "start": "1144559",
    "end": "1149960"
  },
  {
    "text": "you can't have a A or BB that are less that are",
    "start": "1149960",
    "end": "1155400"
  },
  {
    "text": "greater than 7f because that will have them transformed into four bytes which",
    "start": "1155400",
    "end": "1161320"
  },
  {
    "text": "is not what you want um and so when you",
    "start": "1161320",
    "end": "1166400"
  },
  {
    "text": "see this sort of restriction on your ability even to jump to memory you then start feeling a little shaky about your",
    "start": "1166400",
    "end": "1172640"
  },
  {
    "text": "ability to even write the exploit but there's ways to get around that as we'll see so you have some",
    "start": "1172640",
    "end": "1178679"
  },
  {
    "text": "additional iffiness because of the way the exploit is actually done you can't use the at symbol you can't use slashes",
    "start": "1178679",
    "end": "1185799"
  },
  {
    "text": "and you can't I think use a colon but I didn't list that here um just because they have special meanings they'll",
    "start": "1185799",
    "end": "1191559"
  },
  {
    "text": "terminate the string you won't get the Overflow and you kind of discover this through empirical testing I usually just write a little script that tries all 250",
    "start": "1191559",
    "end": "1198799"
  },
  {
    "text": "five characters and when one isn't working I kind of binary search it out so in code red they use this cute little",
    "start": "1198799",
    "end": "1207039"
  },
  {
    "text": "percent U trick which is great but it doesn't work for this exploit and",
    "start": "1207039",
    "end": "1212080"
  },
  {
    "text": "neither just trying to change the sort of accept languages and all the other fun things so if you have better luck",
    "start": "1212080",
    "end": "1217760"
  },
  {
    "text": "getting that to work then you may not have to run into all these issues but uh in this case I either and in one way I",
    "start": "1217760",
    "end": "1224559"
  },
  {
    "text": "didn't really look too hard at forcing it to accept non-unicode data because because I wanted to demonstrate that",
    "start": "1224559",
    "end": "1230280"
  },
  {
    "text": "Unicode exploits are perfectly doable so UTF 16 or Unicode or any of",
    "start": "1230280",
    "end": "1236520"
  },
  {
    "text": "that stuff for those of you who aren't brutally familiar with it um I forgot to release show Unicode but",
    "start": "1236520",
    "end": "1245600"
  },
  {
    "text": "basically it's a very simple function in in Windows and you get Ox 41 or any kind",
    "start": "1245600",
    "end": "1251799"
  },
  {
    "text": "of small number and it's going to get turned into a 0041 and if you get anything above that",
    "start": "1251799",
    "end": "1258280"
  },
  {
    "text": "it's going to going to turn into one of these 4 byte uh sort of nonces which is going to be a specific order and interestingly C3",
    "start": "1258280",
    "end": "1267120"
  },
  {
    "text": "is the op code for return so it's important to remember that if you are restricted to only having Unicode you",
    "start": "1267120",
    "end": "1273679"
  },
  {
    "text": "can still do a push of a register and then a return which is is useful for",
    "start": "1273679",
    "end": "1279080"
  },
  {
    "text": "controlling execution flow but in this case we don't do that it turns out we don't need it um so in some cases with",
    "start": "1279080",
    "end": "1286640"
  },
  {
    "text": "this string and the reason we don't need it is that sometimes the the unic code function that you run through just turns",
    "start": "1286640",
    "end": "1292080"
  },
  {
    "text": "anything into z0 and then that thing so sometimes you get lucky but you",
    "start": "1292080",
    "end": "1298640"
  },
  {
    "text": "shouldn't have to rely on that so I think as as you find that um people",
    "start": "1298640",
    "end": "1307200"
  },
  {
    "text": "are rebasing their dlls or they're doing other things it's often almost easier",
    "start": "1307200",
    "end": "1312799"
  },
  {
    "text": "just to jump into the Heap and you can make it Fairly reliable by controlling a",
    "start": "1312799",
    "end": "1318200"
  },
  {
    "text": "large amount of the Heap and I mean you can grow the Heap in various ways but the easiest way for",
    "start": "1318200",
    "end": "1325320"
  },
  {
    "text": "this is just to send a lot of data and if the Heap is reasonably static or if the process hasn't been touched then you",
    "start": "1325320",
    "end": "1331640"
  },
  {
    "text": "can pretty much be assured that you're going to be lucky enough to get into your shell coat so the first step of",
    "start": "1331640",
    "end": "1339080"
  },
  {
    "text": "gaining execution is where are we going to return to what are we going to set that return address to it turns out that",
    "start": "1339080",
    "end": "1344559"
  },
  {
    "text": "on the Heap that you just do an Oli debug search it's got a real nice search function you just do 00",
    "start": "1344559",
    "end": "1350840"
  },
  {
    "text": "17001 and pretty much the shell code is Always Somewhere below that so that's",
    "start": "1350840",
    "end": "1357039"
  },
  {
    "text": "the solution that that I chose to finding out to getting control of execution in the",
    "start": "1357039",
    "end": "1362159"
  },
  {
    "text": "beginning uh and then you're set thinking okay now I have execution let's",
    "start": "1362159",
    "end": "1368159"
  },
  {
    "text": "just write a simple decoder and be done with it but the reality is that it's really really hard to write a Unicode",
    "start": "1368159",
    "end": "1374880"
  },
  {
    "text": "decoder and by decoder I mean something that will transform unic code data into actual machine code data those of you",
    "start": "1374880",
    "end": "1382640"
  },
  {
    "text": "who are not familiar but it's really hard to do that unless you know that a particular register points",
    "start": "1382640",
    "end": "1390279"
  },
  {
    "text": "to a particular place in your shell code and and this is this is pretty much the",
    "start": "1390279",
    "end": "1396440"
  },
  {
    "text": "it's one of the the keys to trickiness of this",
    "start": "1396440",
    "end": "1401480"
  },
  {
    "text": "overflow so you you then gather some information about what kinds of What",
    "start": "1401480",
    "end": "1407000"
  },
  {
    "text": "kinds of other features about the memory state are useful to you in particular what registers have writable addresses",
    "start": "1407000",
    "end": "1413760"
  },
  {
    "text": "because those registers can be used to provide a sort of noop and what registers point at directly at your",
    "start": "1413760",
    "end": "1419039"
  },
  {
    "text": "string and where do they point and those you then feed into a basically a compiler that is going to",
    "start": "1419039",
    "end": "1425360"
  },
  {
    "text": "compile a set of instructions and going to control the alignment because alignment is your main problem if every",
    "start": "1425360",
    "end": "1432039"
  },
  {
    "text": "instruction you have got expanded into two instructions and the first bite is z0 you then have to worry about what you",
    "start": "1432039",
    "end": "1439200"
  },
  {
    "text": "can execute the set of instructions that is0 something and then you can also try to execute a set of instructions that's",
    "start": "1439200",
    "end": "1444880"
  },
  {
    "text": "0000 something z0 and you can execute a set of instructions that's anyway you see it here so you're now you're Now",
    "start": "1444880",
    "end": "1452600"
  },
  {
    "text": "using these sort of Primitives that you've you've you can figure out you can use to kind of compile a little",
    "start": "1452600",
    "end": "1459799"
  },
  {
    "text": "program so that's my that's my cool product graphic that I had but uh I've",
    "start": "1460039",
    "end": "1467039"
  },
  {
    "text": "always felt that that really sets you apart when you're building something like this is the fact that you've invested in",
    "start": "1467039",
    "end": "1472679"
  },
  {
    "text": "infrastructure um that's what the Patriot missile is and hopefully that's what canvas is someday but uh the the",
    "start": "1472679",
    "end": "1481039"
  },
  {
    "text": "infrastructure that I'm giving away to you today is this make Unicode thing it will take it will do this job for you all the stuff we're about to talk about",
    "start": "1481039",
    "end": "1487799"
  },
  {
    "text": "all that alignment checking all that stuff you have now uh and the way it works is that you kind of Define some",
    "start": "1487799",
    "end": "1493919"
  },
  {
    "text": "Primitives and you build a compiler around that",
    "start": "1493919",
    "end": "1499600"
  },
  {
    "text": "so to see where the goal is I I always thought that during presentations like this people will start getting bored unless you say this is what we're",
    "start": "1499600",
    "end": "1505960"
  },
  {
    "text": "actually doing and what we're actually going to do is we're going to overwrite the exception Handler point to the Heap",
    "start": "1505960",
    "end": "1511520"
  },
  {
    "text": "the Heap who knows where it actually is but it's eventually going to run into your shell code and you're going to use that to jump into the stack which is",
    "start": "1511520",
    "end": "1518559"
  },
  {
    "text": "actually pointed to by ebx and you know where ebx is pointing and that's a key",
    "start": "1518559",
    "end": "1524120"
  },
  {
    "text": "fact and you know that ESI is always going to be writable or pointing to a writable address and then you have a",
    "start": "1524120",
    "end": "1530760"
  },
  {
    "text": "small little well unic code it's going to get you're you're being able to compile a little program in Unicode",
    "start": "1530760",
    "end": "1536760"
  },
  {
    "text": "means it gets huge so you're going to have that sort of program on the stack sort of create and with itself another",
    "start": "1536760",
    "end": "1543919"
  },
  {
    "text": "little assembly program which is then going to hunt the Heap for another program which is then going to actually",
    "start": "1543919",
    "end": "1550120"
  },
  {
    "text": "run so it's kind of a little tricky tricky and",
    "start": "1550120",
    "end": "1555279"
  },
  {
    "text": "fun Okay so we're going to we need to get",
    "start": "1555279",
    "end": "1560360"
  },
  {
    "text": "control of EIP at a known place in our buffer which sounds originally very very",
    "start": "1560360",
    "end": "1567159"
  },
  {
    "text": "easy but when you think about what your restrictions are it becomes a little bit more difficult so we know that ebx points to",
    "start": "1567159",
    "end": "1574679"
  },
  {
    "text": "that known place so all we really have to do is sort of modify ebx a little bit you can increment it or decrement it to",
    "start": "1574679",
    "end": "1581159"
  },
  {
    "text": "get it exactly right CU in this case there's ebx is actually pointing to a",
    "start": "1581159",
    "end": "1586760"
  },
  {
    "text": "piece of your buffer that got corrupted is munged and you need to increment ebx to get get around that so you then need",
    "start": "1586760",
    "end": "1594679"
  },
  {
    "text": "to push ebx and then return which is the same thing as doing a call or a jump evx which will then execute your buffer at a",
    "start": "1594679",
    "end": "1601279"
  },
  {
    "text": "known place um and and that's",
    "start": "1601279",
    "end": "1606559"
  },
  {
    "text": "done okay so that's done",
    "start": "1606559",
    "end": "1610480"
  },
  {
    "text": "here back up here you",
    "start": "1611919",
    "end": "1616880"
  },
  {
    "text": "have and",
    "start": "1617240",
    "end": "1621158"
  },
  {
    "text": "you the question is we have evx in Unicode format actually ebx is we don't",
    "start": "1623799",
    "end": "1628960"
  },
  {
    "text": "have ebx at all we don't control any of the registers directly except for EIP which has been taken from the stack",
    "start": "1628960",
    "end": "1635120"
  },
  {
    "text": "because the exception Handler well we we know for a fact though that ebx is pointing at our",
    "start": "1635120",
    "end": "1640720"
  },
  {
    "text": "string so you don't control it but you know what it is that",
    "start": "1640720",
    "end": "1647159"
  },
  {
    "text": "help okay so just to show you the one little",
    "start": "1647159",
    "end": "1653799"
  },
  {
    "text": "trick Auto aligning noops um when you jump into a piece of code you don't know",
    "start": "1653799",
    "end": "1659240"
  },
  {
    "text": "necessarily where in the alignment you are it could be 0026 it could be 260 0",
    "start": "1659240",
    "end": "1665480"
  },
  {
    "text": "and the point is that you have to pick that it's 26 because 26 no matter what alignment you get in will Auto align",
    "start": "1665480",
    "end": "1672399"
  },
  {
    "text": "itself right does everyone see that and it will be actually uh extra bonus ES is",
    "start": "1672399",
    "end": "1678600"
  },
  {
    "text": "the writable register that you know you can write to automatically without crashing and so it's just going to be",
    "start": "1678600",
    "end": "1685120"
  },
  {
    "text": "writing to that register over and over as your Noah so as as we execute this",
    "start": "1685120",
    "end": "1690720"
  },
  {
    "text": "we'll have a big string of these two sixes which is I think question mark in our string and it's going to get turned",
    "start": "1690720",
    "end": "1696320"
  },
  {
    "text": "into Unicode which means it's going to be 026 0 026 0 026 and then it's going to be jumped into at a random place and",
    "start": "1696320",
    "end": "1704080"
  },
  {
    "text": "so the the little game you play the logic game is what can I make that 26",
    "start": "1704080",
    "end": "1709480"
  },
  {
    "text": "which this the answer is 26 to survive this no matter which alignment I happen",
    "start": "1709480",
    "end": "1714760"
  },
  {
    "text": "to be at in in spark and other uh operating",
    "start": "1714760",
    "end": "1720320"
  },
  {
    "text": "systems that do sort of aligned instructions you don't have to worry about that sort of thing okay so the next trick here and as",
    "start": "1720320",
    "end": "1728320"
  },
  {
    "text": "you as don't get too afraid of the the assembly it's it's it's not actually that complex but the the original string",
    "start": "1728320",
    "end": "1736799"
  },
  {
    "text": "was just 26 6 C 436 and that got turned into 0026 006",
    "start": "1736799",
    "end": "1742679"
  },
  {
    "text": "0043 006 and that when executed says that",
    "start": "1742679",
    "end": "1748880"
  },
  {
    "text": "it's going to basically be a noop that ESI and then this 6C thing is going to align me so",
    "start": "1748880",
    "end": "1755679"
  },
  {
    "text": "that I can execute a single bite instruction and this maintaining this",
    "start": "1755679",
    "end": "1761080"
  },
  {
    "text": "sort of because 006 e00 is a three byte instruction you then",
    "start": "1761080",
    "end": "1767480"
  },
  {
    "text": "get the ability to throw in just a nice 43 instead of a 0 43 because 0 43 is not",
    "start": "1767480",
    "end": "1772679"
  },
  {
    "text": "what I want to do so 43 increments evx and then you realign again because",
    "start": "1772679",
    "end": "1779600"
  },
  {
    "text": "there's another z z after that so you have to do your three BYT instruction and then you increment evx again so what",
    "start": "1779600",
    "end": "1785640"
  },
  {
    "text": "we have here is a mechanism for adding numbers to evx in this bizarre little",
    "start": "1785640",
    "end": "1791240"
  },
  {
    "text": "format so it turns out that you can just use a blank C3 to return or you can use the uh in in some version of unic code",
    "start": "1791240",
    "end": "1798640"
  },
  {
    "text": "you can actually use the if you use FF for example that will actually be C300 you know something something",
    "start": "1798640",
    "end": "1804919"
  },
  {
    "text": "something something so that would return as well so in this case um you can",
    "start": "1804919",
    "end": "1810440"
  },
  {
    "text": "really you can just you increment ebx you push it with 53 the same way you would increment it and then you just",
    "start": "1810440",
    "end": "1815720"
  },
  {
    "text": "return and now you've done a call ebx plus some number and that's that's like",
    "start": "1815720",
    "end": "1822559"
  },
  {
    "text": "that's a day of your time okay so",
    "start": "1822559",
    "end": "1828600"
  },
  {
    "text": "this is kind of the rationale behind that and if you didn't understand what I said you should read this",
    "start": "1828600",
    "end": "1835398"
  },
  {
    "text": "slide okay so now that we've jumped into our string at the stack we know exactly",
    "start": "1835679",
    "end": "1840960"
  },
  {
    "text": "where we are we know ESI is writable we still have some issues some pretty hefty",
    "start": "1840960",
    "end": "1846000"
  },
  {
    "text": "issues in that we still can't write anything over 7f without it being nonsense and we need to somehow generate",
    "start": "1846000",
    "end": "1853320"
  },
  {
    "text": "Shell Code out of that even though we know it's going to get z z something z0 something",
    "start": "1853320",
    "end": "1859039"
  },
  {
    "text": "so um Chris anley really did a lot of research into doing this sort of thing",
    "start": "1859039",
    "end": "1864519"
  },
  {
    "text": "he does make some I won call them mistakes because they're not mistakes but he does assume that you can use ox8",
    "start": "1864519",
    "end": "1871159"
  },
  {
    "text": "which uh you can't in this particular case and I wanted to be the most restrictive case as",
    "start": "1871159",
    "end": "1877840"
  },
  {
    "text": "possible so loops loops are great but you don't have as much control you don't have any",
    "start": "1877840",
    "end": "1884279"
  },
  {
    "text": "instructions under this restriction that you can use to do a loop so instead what you do is you kind of manually unwrap",
    "start": "1884279",
    "end": "1890440"
  },
  {
    "text": "your Loop and you have a big long string of instructions um and this kind of kind of",
    "start": "1890440",
    "end": "1899080"
  },
  {
    "text": "Primitives that you're going to use you want to add you want to add numbers to memory in this case you want to add ah",
    "start": "1899080",
    "end": "1905880"
  },
  {
    "text": "to the the memory address pointed to by ECX which is going to be basically our",
    "start": "1905880",
    "end": "1911320"
  },
  {
    "text": "index pointer as we go through the memory we're going to increment evx or ECX rather so you see you kind of build",
    "start": "1911320",
    "end": "1918639"
  },
  {
    "text": "these instructions with what you can actually do you need to add eax and subtract from eax uh if you you can you",
    "start": "1918639",
    "end": "1925279"
  },
  {
    "text": "can actually do it with just with one but if you do with two you actually save some bytes which is nice and you then of",
    "start": "1925279",
    "end": "1932600"
  },
  {
    "text": "course you want to increment ECX you've built up you've basically built your own machine language is what's happened",
    "start": "1932600",
    "end": "1937880"
  },
  {
    "text": "you've kind of meta machine languaged it and at the same time the main issue",
    "start": "1937880",
    "end": "1943519"
  },
  {
    "text": "that you have to deal with I manually you could do it but maintaining the alignment in your head is a big pain and",
    "start": "1943519",
    "end": "1950519"
  },
  {
    "text": "a lot of what the Python program does if you look at it is figure out what alignment would be optimal for what",
    "start": "1950519",
    "end": "1957279"
  },
  {
    "text": "you're trying to do okay so it's also important to",
    "start": "1957279",
    "end": "1962440"
  },
  {
    "text": "remember like what don't you know you don't know ECX or eax or any of those you have to you have to initialize those",
    "start": "1962440",
    "end": "1968600"
  },
  {
    "text": "yourself somehow and this is how to set ECX to",
    "start": "1968600",
    "end": "1973720"
  },
  {
    "text": "where your encoded egg is you're basically going to push it and then pop it it or actually pushing and popping",
    "start": "1973720",
    "end": "1980080"
  },
  {
    "text": "you push ebx because you know ebx points directly to you you then realign with",
    "start": "1980080",
    "end": "1985919"
  },
  {
    "text": "that's the 00 600 and then you pop eax and that puts",
    "start": "1985919",
    "end": "1991039"
  },
  {
    "text": "wherever you are exactly into eax and then you're going to add to eax",
    "start": "1991039",
    "end": "1997200"
  },
  {
    "text": "and subtract to eax so that you can actually because you have this big long string of sort of program and then you",
    "start": "1997200",
    "end": "2003039"
  },
  {
    "text": "have a big long string of egg and that's the encoded stuff and so what you need to do is point something to the encoded",
    "start": "2003039",
    "end": "2009720"
  },
  {
    "text": "stuff and so that's what this little snippet does it's adding 500 hex bytes down in the buffer from where you are to",
    "start": "2009720",
    "end": "2017279"
  },
  {
    "text": "point at your encoded bytes so transmuting between registers is",
    "start": "2017279",
    "end": "2024919"
  },
  {
    "text": "actually really easy you just do a push and a pop and the other thing you have to do",
    "start": "2024919",
    "end": "2030840"
  },
  {
    "text": "is somehow get an actual number into eax",
    "start": "2030840",
    "end": "2036320"
  },
  {
    "text": "so that you can start so that you know what it is and you do that just by sort of pushing a number or just a constant",
    "start": "2036320",
    "end": "2042639"
  },
  {
    "text": "and then popping that constant back into eax so this is what your decoding Loop",
    "start": "2042639",
    "end": "2048280"
  },
  {
    "text": "looks like and this is kind of I noticed actually a bug in this um that's or a",
    "start": "2048280",
    "end": "2054118"
  },
  {
    "text": "non-optimization in this that maybe I'll go back and add",
    "start": "2054119",
    "end": "2059200"
  },
  {
    "text": "but as you as you kind of go through you have ECX pointing to the next bite that you",
    "start": "2059200",
    "end": "2065280"
  },
  {
    "text": "want to actually write to and and and instead of writing what you're really doing is adding to it so if it's a zero",
    "start": "2065280",
    "end": "2071158"
  },
  {
    "text": "and you add a one to it it's going to be a one or vice versa and the other thing you have to worry about is that they're",
    "start": "2071159",
    "end": "2076800"
  },
  {
    "text": "actually rolling over so if it's a zero and you or if it's a one and you add an FF to it it's going to turn into a zero",
    "start": "2076800",
    "end": "2083040"
  },
  {
    "text": "and that's kind of how you going to get around the null issue so you can look at this and if you",
    "start": "2083040",
    "end": "2088760"
  },
  {
    "text": "walk through it just briefly you're going to see that you subtract from eax a certain number once you know what eax",
    "start": "2088760",
    "end": "2095079"
  },
  {
    "text": "is and you're kind of basically setting a H to a certain number adding that number to what you know you already have",
    "start": "2095079",
    "end": "2101000"
  },
  {
    "text": "in your encoded egg and then repeating as",
    "start": "2101000",
    "end": "2105440"
  },
  {
    "text": "necessary so the main problem with this is that Windows Shell Code portable good",
    "start": "2106359",
    "end": "2112400"
  },
  {
    "text": "Windows shell code is actually pretty big um howars I'm sure is about 10 bytes",
    "start": "2112400",
    "end": "2118800"
  },
  {
    "text": "but mine is about 560 bytes",
    "start": "2118800",
    "end": "2124280"
  },
  {
    "text": "so I mean if I'm going to encode something it's going to get get pretty big especially with this kind of encoder",
    "start": "2124280",
    "end": "2130760"
  },
  {
    "text": "where it's really quite a hard function to fit through so it's actually going to",
    "start": "2130760",
    "end": "2136119"
  },
  {
    "text": "end up on the stack as something like 5,000 bytes which is going to overrun",
    "start": "2136119",
    "end": "2141440"
  },
  {
    "text": "the segment boundary and you're not going to get the whole an egg onto the stack so you can't do that you can't",
    "start": "2141440",
    "end": "2148240"
  },
  {
    "text": "take you can't just say blindly okay I have 600 bytes of Shell Code I'm going to use this Unicode make Unicode 2. Pi",
    "start": "2148240",
    "end": "2155760"
  },
  {
    "text": "that you provided and it's going to go onong onto the stack and I'm just going to run it and it'll it'll work because it'll it'll end up being corrupted by",
    "start": "2155760",
    "end": "2162800"
  },
  {
    "text": "the end of the segment so there are a few other issues you can't you're kind of restricted with",
    "start": "2162800",
    "end": "2169040"
  },
  {
    "text": "the characters you can use you can't use 40 for example so no matter what you do you can't add 40 to it because it'll end",
    "start": "2169040",
    "end": "2175400"
  },
  {
    "text": "the string and not work so there's a set of bad bites that you maintain internal and you say if I'm going to add that",
    "start": "2175400",
    "end": "2181359"
  },
  {
    "text": "then I just try to add you know 20 and 20 instead so uh python partially because",
    "start": "2181359",
    "end": "2189280"
  },
  {
    "text": "Python's the best language to write in but also because it integrates with canvas which is much you know it's",
    "start": "2189280",
    "end": "2196680"
  },
  {
    "text": "important to be able to reuse this technology for another exploit later down the line and this is this is the",
    "start": "2196680",
    "end": "2203119"
  },
  {
    "text": "choice made um this is basically what it does you have it now you can look through and",
    "start": "2203119",
    "end": "2208599"
  },
  {
    "text": "see how it does this but this is what it does my documentation has been criticized in the past so you may may",
    "start": "2208599",
    "end": "2215880"
  },
  {
    "text": "find that this sort this kind of explanation of what's actually going on is useful um and it does work it works",
    "start": "2215880",
    "end": "2223880"
  },
  {
    "text": "reliably except probably today when I do the demo but other than that works for a lot so there's another issue that you",
    "start": "2223880",
    "end": "2230720"
  },
  {
    "text": "have and that's that size issue that you really haven't been able to conquer yet and the way you get around that is actually by writing another little mini",
    "start": "2230720",
    "end": "2237319"
  },
  {
    "text": "decoder that does this sort of nibble decoding and you can see a ebf is just a",
    "start": "2237319",
    "end": "2242920"
  },
  {
    "text": "loop jump but it would actually get transformed via the encoder into 005 5 b",
    "start": "2242920",
    "end": "2248520"
  },
  {
    "text": "005 f00 5e uh and and because some of the btes",
    "start": "2248520",
    "end": "2253839"
  },
  {
    "text": "still are bad btes as you say you can kind of flip those into a nice a nice way with 5c being instead of 4 C which",
    "start": "2253839",
    "end": "2261200"
  },
  {
    "text": "is a slasher colon or something so this makes the string four times longer but that's better than the 10 to 12 times",
    "start": "2261200",
    "end": "2267040"
  },
  {
    "text": "longer that the Unicode is doing so it's not it's this will get you around around",
    "start": "2267040",
    "end": "2273400"
  },
  {
    "text": "your length issue because there's there's usually a reasonable size somewhere in point is to find that place",
    "start": "2273400",
    "end": "2278640"
  },
  {
    "text": "and get to it so the place that we use is actually",
    "start": "2278640",
    "end": "2284920"
  },
  {
    "text": "the Heap we already have this one magic number in the exploit whenever you're writing an exploit you want to minimize",
    "start": "2284920",
    "end": "2291200"
  },
  {
    "text": "the amount of magic numbers that are required to make the exploit reliable in this case the magic number that we're",
    "start": "2291200",
    "end": "2296839"
  },
  {
    "text": "using is 1701 and we already know that number so we just started that number and we",
    "start": "2296839",
    "end": "2302720"
  },
  {
    "text": "search through that that memory until we find the nibble bite encoded egg",
    "start": "2302720",
    "end": "2309440"
  },
  {
    "text": "so that's where we at we're at now we're we jump into the Heap via the exception",
    "start": "2309960",
    "end": "2315040"
  },
  {
    "text": "Handler we then have a string of noops that increments ebx it Returns the ebx",
    "start": "2315040",
    "end": "2320079"
  },
  {
    "text": "it then has a little Unicode decoder which was the work of a week but ends up",
    "start": "2320079",
    "end": "2325359"
  },
  {
    "text": "only decoding a tiny little nibble decoder it then hunts through the Heap to find the nibble encoded Shell Code",
    "start": "2325359",
    "end": "2332119"
  },
  {
    "text": "then re decodes that and runs it so",
    "start": "2332119",
    "end": "2338480"
  },
  {
    "text": "conclusion there is that URL scan is not going to protect you from these sorts of things it is possible to both you know",
    "start": "2338480",
    "end": "2345240"
  },
  {
    "text": "use ASC doc from Frack or something like this if you have a Unicode situation uh",
    "start": "2345240",
    "end": "2351000"
  },
  {
    "text": "I don't know of another Unicode encoder I would have used that uh and it has one hardcoded value which is uh 17 Z1 which",
    "start": "2351000",
    "end": "2360359"
  },
  {
    "text": "you jump into the Heap with and one hardcoded value is not too bad you kind of want to remove it and you want to try",
    "start": "2360359",
    "end": "2366440"
  },
  {
    "text": "to do as much as you can to make that reliable but in reality I haven't found it to be too",
    "start": "2366440",
    "end": "2372599"
  },
  {
    "text": "unreliable um the make Unicode 2 technology I think is very easily adaptable to other overflows of this",
    "start": "2372599",
    "end": "2378480"
  },
  {
    "text": "type and I think I've described earlier how I expect there to be quite a few of this type and you can find more",
    "start": "2378480",
    "end": "2384839"
  },
  {
    "text": "information on this overflow and other fun things at my website uh as soon as",
    "start": "2384839",
    "end": "2390359"
  },
  {
    "text": "about March 12 rolls around and I can uh hit up the Verizon guys to climb into",
    "start": "2390359",
    "end": "2396440"
  },
  {
    "text": "the basement for a while so um canvas is that and this is that is",
    "start": "2396440",
    "end": "2402720"
  },
  {
    "text": "the end of the first part of the presentation I was going to do a demo but are there any questions before the demo about kind of the",
    "start": "2402720",
    "end": "2410920"
  },
  {
    "text": "theory EAS",
    "start": "2410920",
    "end": "2414440"
  },
  {
    "text": "hard so the question is is it easier or harder with utfa and answer is I don't",
    "start": "2422720",
    "end": "2428640"
  },
  {
    "text": "know I thought this was utf8 turned out and I got very confused as I traced through it trying to figure out what",
    "start": "2428640",
    "end": "2434560"
  },
  {
    "text": "encodings were getting applied when and I I think that you had all sorts of language and localization issues that",
    "start": "2434560",
    "end": "2440520"
  },
  {
    "text": "were running over you you had the service pack issue was confusing there was you know three different versions of",
    "start": "2440520",
    "end": "2445920"
  },
  {
    "text": "the string in memory and I'd say that I tried to code for the worst",
    "start": "2445920",
    "end": "2451760"
  },
  {
    "text": "possible case so that you would have it would be easy no matter what and",
    "start": "2451760",
    "end": "2456839"
  },
  {
    "text": "hopefully that will turn out to be the case that was a good question any other",
    "start": "2456839",
    "end": "2465560"
  },
  {
    "text": "questions okay so the question is how do you get control of execution and you get",
    "start": "2473920",
    "end": "2479520"
  },
  {
    "text": "control of execution because you've written such a long string onto the stack that you've overflowed the segment",
    "start": "2479520",
    "end": "2484839"
  },
  {
    "text": "boundary the stack has ended and now it's going to complain and it's going to cause an exception and when it causes",
    "start": "2484839",
    "end": "2491319"
  },
  {
    "text": "that exception it's going to go to this the SE Handler which is you've overwritten because that's on the stack",
    "start": "2491319",
    "end": "2497920"
  },
  {
    "text": "which was fantastic and",
    "start": "2497920",
    "end": "2503078"
  },
  {
    "text": "um so then I control thep un it's a Unicode value yes it's",
    "start": "2503280",
    "end": "2508920"
  },
  {
    "text": "completely Unicode you have no way of getting control of the other two bites how can you",
    "start": "2508920",
    "end": "2515160"
  },
  {
    "text": "jum you can a limited number exactly you can only jump to a limited number of",
    "start": "2515160",
    "end": "2520960"
  },
  {
    "text": "places and the place that I chose was 007 00001 because that's on the Heap where",
    "start": "2520960",
    "end": "2527720"
  },
  {
    "text": "there happened to be a big chunk of my string over right you can't go 80 for",
    "start": "2527720",
    "end": "2535680"
  },
  {
    "text": "example you couldn't do",
    "start": "2535680",
    "end": "2538838"
  },
  {
    "text": "that right well well I mean you can literally only go 00 41 041 or 0 1 01",
    "start": "2540880",
    "end": "2549800"
  },
  {
    "text": "the highest number you can do is 00 7f 00 7f have to R the",
    "start": "2549800",
    "end": "2557279"
  },
  {
    "text": "fact yeah this does rely on the fact okay this technique does rely on the fact that you can jump somewhere where",
    "start": "2557319",
    "end": "2563200"
  },
  {
    "text": "your string exists right well I mean the other cases",
    "start": "2563200",
    "end": "2568599"
  },
  {
    "text": "that you can sometimes find there is there are text Pages or code Pages which",
    "start": "2568599",
    "end": "2575559"
  },
  {
    "text": "have things that are useful like a call ESI or call but it turned out that it",
    "start": "2575559",
    "end": "2580920"
  },
  {
    "text": "was actually more reliable to do this",
    "start": "2580920",
    "end": "2585920"
  },
  {
    "text": "how how how different is this to the Venetian exploit and I I think it's it's",
    "start": "2589839",
    "end": "2596319"
  },
  {
    "text": "quite different because the Venetian exploit I think was was it's it's slightly different function they don't",
    "start": "2596319",
    "end": "2602359"
  },
  {
    "text": "have these zeros inserted which is yeah they use well they use they can they have a better function to work with in a",
    "start": "2602359",
    "end": "2608920"
  },
  {
    "text": "way that's actually really good work I've used that but this is I think specific for this Windows subset of",
    "start": "2608920",
    "end": "2616280"
  },
  {
    "text": "problems that I think are going to come up more and more commonly and uh but it's a very similar",
    "start": "2616280",
    "end": "2623520"
  },
  {
    "text": "kind of problem are",
    "start": "2623520",
    "end": "2630200"
  },
  {
    "text": "your yes as well I'm walking through my buffer as I patch it any other questions",
    "start": "2630680",
    "end": "2639039"
  },
  {
    "text": "any hecklers all right so the demo is going",
    "start": "2639359",
    "end": "2645480"
  },
  {
    "text": "to be pretty quick this is why I say this oh we can drag it out when it stops",
    "start": "2645480",
    "end": "2650839"
  },
  {
    "text": "working and I try to debug it all right",
    "start": "2650839",
    "end": "2656280"
  },
  {
    "text": "so this is canvas just so you know what you're seeing this is my product it is all",
    "start": "2656359",
    "end": "2663119"
  },
  {
    "text": "python all right so what I just did is I set up this little listener so that's where the the shell code's",
    "start": "2663960",
    "end": "2669160"
  },
  {
    "text": "going to call back and connect to this and that's what's going to provide all my functionality and I'm not going to go",
    "start": "2669160",
    "end": "2674480"
  },
  {
    "text": "into how The Listener works because that's an entirely different talk",
    "start": "2674480",
    "end": "2680440"
  },
  {
    "text": "um but the other thing you have to know is that well there's really not much",
    "start": "2680440",
    "end": "2685880"
  },
  {
    "text": "else you have to know think so AE a security service is",
    "start": "2685880",
    "end": "2694079"
  },
  {
    "text": "running it's just this is the default install I haven't done anything anything patchwise or anything",
    "start": "2694079",
    "end": "2700480"
  },
  {
    "text": "else and you can run it over SSL as Riley mentioned ids's don't look at SSL",
    "start": "2701520",
    "end": "2706720"
  },
  {
    "text": "it's going to going to hit enter it's going to freeze for a little while while my guey tries to figure out whether or not it",
    "start": "2706720",
    "end": "2713640"
  },
  {
    "text": "worked so this guey is basically doing all that stuff that we just talked",
    "start": "2713760",
    "end": "2719800"
  },
  {
    "text": "about huh I knew it it's G ah",
    "start": "2719800",
    "end": "2725960"
  },
  {
    "text": "sweet all right now that's that's luck but",
    "start": "2725960",
    "end": "2732400"
  },
  {
    "text": "uh all that stuff we just talked about because it generates all the shell Cod on the Fly and and then it wraps it in",
    "start": "2732400",
    "end": "2739319"
  },
  {
    "text": "these layers and one of the layers that it wraps it in in the end is the layer that is going to put it into the Unicode",
    "start": "2739319",
    "end": "2745880"
  },
  {
    "text": "format that it needs to be in so if you look at the file that I gave out today on the website you'll see and it's GPL",
    "start": "2745880",
    "end": "2752480"
  },
  {
    "text": "so you can feel free to modify it and redistribute it under those terms uh you'll see that",
    "start": "2752480",
    "end": "2757920"
  },
  {
    "text": "it actually is there's a little thing called make mcss Shell Code and you can you can I'm",
    "start": "2757920",
    "end": "2765960"
  },
  {
    "text": "sure use your own Shell Code if you have good Windows Shell Code and you should be able to write this exploit in a",
    "start": "2765960",
    "end": "2771280"
  },
  {
    "text": "couple days if that and I guess you probably don't believe me that this exploit actually worked this little",
    "start": "2771280",
    "end": "2777960"
  },
  {
    "text": "thing is a that's the actual connection back you go down a little sis call",
    "start": "2777960",
    "end": "2783160"
  },
  {
    "text": "redirection toolkit you can pop this up you can do things like you",
    "start": "2783160",
    "end": "2791000"
  },
  {
    "text": "know yay we can do you whatever you want you're running a system right so you can",
    "start": "2792359",
    "end": "2799359"
  },
  {
    "text": "upload download files I find all that very entertaining uh but that's it that's that's the",
    "start": "2799359",
    "end": "2805160"
  },
  {
    "text": "process of writing an exploit that has difficulties that's not just a stack Overflow that you've read about in every",
    "start": "2805160",
    "end": "2812119"
  },
  {
    "text": "book on the planet this is actually for Fun and Profit so more profit if you buy",
    "start": "2812119",
    "end": "2818200"
  },
  {
    "text": "canvas but um are there any questions about that",
    "start": "2818200",
    "end": "2823599"
  },
  {
    "text": "does anyone want to click it it's fun if you're not enjoying it you're not going to do",
    "start": "2823599",
    "end": "2830200"
  },
  {
    "text": "it so that's that and I hope you guys had fun and learned",
    "start": "2830200",
    "end": "2836920"
  },
  {
    "text": "something",
    "start": "2845839",
    "end": "2848839"
  },
  {
    "text": "e",
    "start": "2875839",
    "end": "2878839"
  }
]