[
  {
    "text": "hello and welcome to my talk dealing with style or how to use CSS to exploit",
    "start": "2580",
    "end": "8040"
  },
  {
    "text": "protonmail in France first of all a little bit about me I'm Paul I'm a vulnerability researcher at",
    "start": "8040",
    "end": "14820"
  },
  {
    "text": "sonar where we build solutions to help developers to write clean code and part of that is of course security so we try",
    "start": "14820",
    "end": "22260"
  },
  {
    "text": "to find real world vulnerabilities to improve our engine and yeah in my free time I love to play",
    "start": "22260",
    "end": "27840"
  },
  {
    "text": "and organize ctfs and in general I love to break web things which is what we're going to do today",
    "start": "27840",
    "end": "34559"
  },
  {
    "text": "so first I will introduce you to the concept of privacy oriented webmailers and a little bit of background and then",
    "start": "34559",
    "end": "41520"
  },
  {
    "text": "I will show three case studies about vulnerabilities that we found in proton",
    "start": "41520",
    "end": "46680"
  },
  {
    "text": "males give and tutanota and finally we'll draw some learnings from that so let's get started with privacy",
    "start": "46680",
    "end": "53700"
  },
  {
    "text": "oriented webmailers of course you might ask about our privacy oriented Webmail is so they are privacy oriented because",
    "start": "53700",
    "end": "61199"
  },
  {
    "text": "they use end-to-end encryption to encrypt your emails and also cryptographic signatures to provide",
    "start": "61199",
    "end": "67680"
  },
  {
    "text": "authenticity for emails then they are in the web because they run in the browser or in similar",
    "start": "67680",
    "end": "73260"
  },
  {
    "text": "Technologies like electron and finally they're of course mailers because you can send and receive emails and they",
    "start": "73260",
    "end": "79740"
  },
  {
    "text": "handle HTML emails and attachments and so on",
    "start": "79740",
    "end": "84780"
  },
  {
    "text": "and one thing that's special about privacy oriented webmailers is that they have some high risk user groups that",
    "start": "84780",
    "end": "91320"
  },
  {
    "text": "other email Services might also have but here some people just like a journalists",
    "start": "91320",
    "end": "97439"
  },
  {
    "text": "or political activists whistleblowers and so on really rely on the cryptography and end-to-end encryption",
    "start": "97439",
    "end": "104220"
  },
  {
    "text": "and privacy oriented webmailers share a risk with General web mailers which is",
    "start": "104220",
    "end": "110220"
  },
  {
    "text": "they have to render arbitrary HTML in a CQ away the application is itself built",
    "start": "110220",
    "end": "115560"
  },
  {
    "text": "with HTML and all the web Technologies so you have to have a boundary between the email body the content that can be",
    "start": "115560",
    "end": "121140"
  },
  {
    "text": "sent by an attacker and the application itself because otherwise you are at the risk of cross-site scripting which can",
    "start": "121140",
    "end": "128160"
  },
  {
    "text": "be dangerous and of course Crosshair scripting in general is less of a threat than let's say an rce on the server but",
    "start": "128160",
    "end": "135420"
  },
  {
    "text": "in the scope of these applications actually there's more stuff that can go wrong than usual with xss because once",
    "start": "135420",
    "end": "143220"
  },
  {
    "text": "you export the client you can steal the unencrypted emails you might even be able to steal private keys because they",
    "start": "143220",
    "end": "150360"
  },
  {
    "text": "have to be present in the client in order to decrypt and encrypt emails and you can impersonate the victim by",
    "start": "150360",
    "end": "157379"
  },
  {
    "text": "signing emails or just sending emails from their account and to yeah circumvent or like to tackle",
    "start": "157379",
    "end": "165720"
  },
  {
    "text": "these problems um the the three case studies that we show have some common security measures",
    "start": "165720",
    "end": "171480"
  },
  {
    "text": "that they you know basically all do the same so the first one is they do HTML",
    "start": "171480",
    "end": "176640"
  },
  {
    "text": "sanitization which is used to just clean out unwanted stuff from an email HTML",
    "start": "176640",
    "end": "182340"
  },
  {
    "text": "body mostly JavaScript but it can also be other things like images from somewhere else or maybe some Styles or",
    "start": "182340",
    "end": "188879"
  },
  {
    "text": "whatever and this is what it usually looks like you give some library for",
    "start": "188879",
    "end": "193980"
  },
  {
    "text": "example don't purify an unsafe HTML string that can contain whatever and you",
    "start": "193980",
    "end": "199319"
  },
  {
    "text": "get back a safe HTML string that's stripped of any unwanted content",
    "start": "199319",
    "end": "204360"
  },
  {
    "text": "the second line of defense is an iframe with a Sandbox attribute and this is",
    "start": "204360",
    "end": "210000"
  },
  {
    "text": "actually an allow list of features so you will put the email body inside of the iframe and with the iframe you",
    "start": "210000",
    "end": "217319"
  },
  {
    "text": "specify which things can work are scripts allowed in this iframe yes or no are pop-ups allowed to open from here",
    "start": "217319",
    "end": "223500"
  },
  {
    "text": "and so on and this is what it looks like you just have an iframe element you give it a Sandbox attribute and then you put all",
    "start": "223500",
    "end": "229920"
  },
  {
    "text": "the directors in that you want to allow and everything else will be blocked and the third line of defense is the",
    "start": "229920",
    "end": "236879"
  },
  {
    "text": "content security policy this is also an allow list but this time for resources so it will tell the browser where things",
    "start": "236879",
    "end": "244620"
  },
  {
    "text": "can come from like where can the browser load scripts from from which server where can Styles can can come from and",
    "start": "244620",
    "end": "250560"
  },
  {
    "text": "so on and it served as a HTTP response header and it looks like this and it has",
    "start": "250560",
    "end": "256320"
  },
  {
    "text": "multiple directives and we will see later some of them and what it actually does",
    "start": "256320",
    "end": "262979"
  },
  {
    "text": "so let's start with our first case study which is protonmail I'm sure a lot of you have heard the name maybe we have",
    "start": "262979",
    "end": "269520"
  },
  {
    "text": "some users here today but if you don't know it this is what it looks like it's just your regular Webmail thing",
    "start": "269520",
    "end": "276720"
  },
  {
    "text": "where you can have your folders and see your emails and yeah it has to render",
    "start": "276720",
    "end": "282240"
  },
  {
    "text": "arbitrary HTML as you can see in this email so what do what security measures do",
    "start": "282240",
    "end": "287820"
  },
  {
    "text": "they have they have all the three that I just mentioned they have HTML sanitization they have a iframe Sandbox",
    "start": "287820",
    "end": "294060"
  },
  {
    "text": "and they have a Content security policy and yeah all these three things kind of",
    "start": "294060",
    "end": "299400"
  },
  {
    "text": "line up to give a good protection and as an attacker if you want to execute JavaScript in the context of protonmail",
    "start": "299400",
    "end": "306479"
  },
  {
    "text": "you will have to bypass all of those three so let's find out how that was possible",
    "start": "306479",
    "end": "313259"
  },
  {
    "text": "first of all how can we bypass the sanitization so protomail uses Dom purify which is a",
    "start": "313259",
    "end": "320340"
  },
  {
    "text": "very popular and probably the best client-side HTML sanitization Library",
    "start": "320340",
    "end": "326520"
  },
  {
    "text": "it uses the same parser as the browser so it's very very close to what will actually render the HTML after",
    "start": "326520",
    "end": "333720"
  },
  {
    "text": "but what they did is after sanitization they changed something in the sanitized",
    "start": "333720",
    "end": "338940"
  },
  {
    "text": "HTML which is a bad thing to do and what they did is they looked for all SVG elements and if they found one they just",
    "start": "338940",
    "end": "346680"
  },
  {
    "text": "renamed it to proton SVG so the tag name is now proton SVG and they do this by",
    "start": "346680",
    "end": "352199"
  },
  {
    "text": "creating new element copying the children and replacing the old one so you might ask what could go wrong",
    "start": "352199",
    "end": "358139"
  },
  {
    "text": "with that just renaming doesn't sound too bad right so yeah let's take this payload here we",
    "start": "358139",
    "end": "365039"
  },
  {
    "text": "have an SVG tag inside that we have a style tag and inside that we have an a tag which is just a link and it has some",
    "start": "365039",
    "end": "371400"
  },
  {
    "text": "attribute with just some data in its value maybe you can already see that the",
    "start": "371400",
    "end": "376620"
  },
  {
    "text": "data in the attributes value is a little bit fishy but yeah so far the sanitizer",
    "start": "376620",
    "end": "382860"
  },
  {
    "text": "doesn't really see this so if you're sanitize with this with storm purify it will say like it's just fine there's no",
    "start": "382860",
    "end": "389340"
  },
  {
    "text": "JavaScript in here it can pass but after renaming the SVG tag to proton",
    "start": "389340",
    "end": "395400"
  },
  {
    "text": "SVG something else happens so if it's parsed after the renaming you can see",
    "start": "395400",
    "end": "400560"
  },
  {
    "text": "that it Powers differently and especially you can see that there's a",
    "start": "400560",
    "end": "406080"
  },
  {
    "text": "closing style tag that's now closing this style tag inside of the proton SVG",
    "start": "406080",
    "end": "411800"
  },
  {
    "text": "prematurely and kind of the image tag comes out and the honor error Handler",
    "start": "411800",
    "end": "416880"
  },
  {
    "text": "would be executed and execute JavaScript so why is that happening as it turns out inside of an SVG element",
    "start": "416880",
    "end": "424500"
  },
  {
    "text": "they are slightly different parsing rules than in regular HTML so once the",
    "start": "424500",
    "end": "430500"
  },
  {
    "text": "attack is still named SVG it's yeah all the child elements are passed with SVG",
    "start": "430500",
    "end": "435840"
  },
  {
    "text": "parsing rules but after the renaming they are passed slightly differently and as you can see in SVG pausing rules a",
    "start": "435840",
    "end": "443039"
  },
  {
    "text": "style tag has like child elements but in HTML rules sorry they have raw text",
    "start": "443039",
    "end": "450120"
  },
  {
    "text": "content so in HTML the first occurrence of the closing style tag byte sequence",
    "start": "450120",
    "end": "455160"
  },
  {
    "text": "will close the style tag which is the differential you see right here",
    "start": "455160",
    "end": "460380"
  },
  {
    "text": "okay nice we bypass the sanitization so next up is the iframe sandbox",
    "start": "460380",
    "end": "466680"
  },
  {
    "text": "the first directive that they have in the iframe sandbox is allow same origin this is just used so that the outermost",
    "start": "466680",
    "end": "473340"
  },
  {
    "text": "frame can put stuff into the innermost frame but it also means that it could go the other way around if the iframe will",
    "start": "473340",
    "end": "480060"
  },
  {
    "text": "execute some JavaScript it could access the top frame and yeah access everything in that Dom",
    "start": "480060",
    "end": "486539"
  },
  {
    "text": "the next one is allow pop-ups this just means that if you click on the link inside the iframe a new tab or a pop-up",
    "start": "486539",
    "end": "493139"
  },
  {
    "text": "can open which is I don't know very usual for email applications if you have a link in your email you might want to",
    "start": "493139",
    "end": "498780"
  },
  {
    "text": "click it and nothing bad happens here because the iframe sandbox is inherited to the new",
    "start": "498780",
    "end": "505080"
  },
  {
    "text": "tab so everything that does not work in the iframe will also not work in the new tab",
    "start": "505080",
    "end": "510720"
  },
  {
    "text": "and then there's the third directive which is allow pop-ups to escape sandbox and it does what it says this means if a",
    "start": "510720",
    "end": "518039"
  },
  {
    "text": "pop-up is opened the site in that pop-up or in the new tab can do whatever it wants so if we",
    "start": "518039",
    "end": "525540"
  },
  {
    "text": "could somehow do something fishy there we might be able to go back through the",
    "start": "525540",
    "end": "530940"
  },
  {
    "text": "iframe and then to the topmost frame and again access the sensitive data",
    "start": "530940",
    "end": "537060"
  },
  {
    "text": "and then I noticed that if you're using Safari or any other webkit based browser they have a little extra Clause where",
    "start": "537060",
    "end": "543779"
  },
  {
    "text": "they just allow scripts in the iframe which is of course nice for exploitation because in that case once we bypass",
    "start": "543779",
    "end": "550740"
  },
  {
    "text": "everything else we can just execute JavaScript and directly access the top",
    "start": "550740",
    "end": "555779"
  },
  {
    "text": "frame so yeah what we're going to want to do for exploit is if we're on Safari we can",
    "start": "555779",
    "end": "561240"
  },
  {
    "text": "just include a script and for all the other browsers we have to open like the rest of the exploit in a new tab which",
    "start": "561240",
    "end": "568019"
  },
  {
    "text": "then escapes the sandbox okay we got that done so the third line is the content security policy",
    "start": "568019",
    "end": "575540"
  },
  {
    "text": "the first directive here is default Source self and this is just the fallback for all the other directives",
    "start": "575540",
    "end": "580920"
  },
  {
    "text": "and or if they're not like specified and self just means yeah stuff can come from the same server the same origin that the",
    "start": "580920",
    "end": "588000"
  },
  {
    "text": "page came from which is usually a pretty safe thing so doesn't help us much here",
    "start": "588000",
    "end": "594240"
  },
  {
    "text": "the next thing that we can see is they allow inline Styles so some CSS you can",
    "start": "594240",
    "end": "599820"
  },
  {
    "text": "write it in line in a style tag and they also allow to load images from any https",
    "start": "599820",
    "end": "605519"
  },
  {
    "text": "https URL which is common for HTML emails all your",
    "start": "605519",
    "end": "612360"
  },
  {
    "text": "marketing newsletters probably contain a lot of CSS to look nice and they also load some Banner images from somewhere",
    "start": "612360",
    "end": "618300"
  },
  {
    "text": "else so the email is not 20 megabytes so nothing too fishy here as of now",
    "start": "618300",
    "end": "623880"
  },
  {
    "text": "but then we see okay for scripts they allow scripts to be loaded from blob",
    "start": "623880",
    "end": "628920"
  },
  {
    "text": "urls so looks good maybe we can load our final payload from a blob URL that's the",
    "start": "628920",
    "end": "636720"
  },
  {
    "text": "plan for now but let's just look at what is a blob URL in case you're not familiar",
    "start": "636720",
    "end": "642360"
  },
  {
    "text": "so a blob URL is a thing you can create from JavaScript within a browser and you",
    "start": "642360",
    "end": "648180"
  },
  {
    "text": "give it some content this HTML right here and the content type text HTML for example and then you just call some",
    "start": "648180",
    "end": "654839"
  },
  {
    "text": "function and what you get back is a blob URL and it looks like this and as you",
    "start": "654839",
    "end": "660480"
  },
  {
    "text": "can see it contains an origin which is the origin of the page that created it",
    "start": "660480",
    "end": "665760"
  },
  {
    "text": "and then it creates contains a random identifier which is randomly generated",
    "start": "665760",
    "end": "671579"
  },
  {
    "text": "and two things to note about blob URLs is they're very short-lived so once the document that creates created it gets",
    "start": "671579",
    "end": "678899"
  },
  {
    "text": "unloaded by reloading the tab or closing and reopening it all the blob URLs that were created in that session will become",
    "start": "678899",
    "end": "685440"
  },
  {
    "text": "invalid and what's also important is is it it inherits the content security policy of",
    "start": "685440",
    "end": "691560"
  },
  {
    "text": "the page that it Crea that created it so in this example we have some HTML in the blob URL which would get loaded when you",
    "start": "691560",
    "end": "698459"
  },
  {
    "text": "browse to that URL or fetch it um but the CSP of the surrounding page",
    "start": "698459",
    "end": "703740"
  },
  {
    "text": "that created it still applies so yeah scripts can only be loaded from there",
    "start": "703740",
    "end": "709079"
  },
  {
    "text": "then it also applies to The Blob URL okay now let's see how we could craft",
    "start": "709079",
    "end": "714660"
  },
  {
    "text": "one so that we can then use it to load a script this is how yeah attachments and",
    "start": "714660",
    "end": "720660"
  },
  {
    "text": "especially inline images work in protonmail and it's pretty similar in all the mail clients so if you want to",
    "start": "720660",
    "end": "726600"
  },
  {
    "text": "include a cute picture of a cat inside of your email not as an attachment not inline then you will have an image tag",
    "start": "726600",
    "end": "733140"
  },
  {
    "text": "that has a CID Source attribute with some ID and then there's an attachment that has a Content ID header which is",
    "start": "733140",
    "end": "740040"
  },
  {
    "text": "matching this value and also content type and the content and when protonmail renders this they",
    "start": "740040",
    "end": "746579"
  },
  {
    "text": "just take the content and the content type create a blob URL out of it and put it into the source attribute of the",
    "start": "746579",
    "end": "752820"
  },
  {
    "text": "image tag so okay now this blob URL appears in the Dom and what if we send instead of a cat",
    "start": "752820",
    "end": "761640"
  },
  {
    "text": "image or any image at all just our payload HTML or JavaScript file well",
    "start": "761640",
    "end": "766920"
  },
  {
    "text": "protonmail will happily create the blob URL again and yeah we have this so the further idea",
    "start": "766920",
    "end": "774540"
  },
  {
    "text": "would be okay now we can create a blob URL we somehow need to get it and then",
    "start": "774540",
    "end": "779579"
  },
  {
    "text": "we can use it to bypass the CSP but how do we get a blob URL for any",
    "start": "779579",
    "end": "784800"
  },
  {
    "text": "attachment and here I had to become a little bit creative there were known tricks that",
    "start": "784800",
    "end": "792500"
  },
  {
    "text": "unfortunately didn't work here so there's for example ways how you can use fonts or styles that you load from",
    "start": "792500",
    "end": "798899"
  },
  {
    "text": "another server to leak certain values from a Dom to an attacker server but we",
    "start": "798899",
    "end": "805380"
  },
  {
    "text": "couldn't use fonts from anywhere and styles could only be in line and not come from somewhere else so yeah we had",
    "start": "805380",
    "end": "812220"
  },
  {
    "text": "to see how we could do it anyways so as a small reminder inline Styles plus",
    "start": "812220",
    "end": "817980"
  },
  {
    "text": "images that can come from any https URL had to be used to create some kind of a",
    "start": "817980",
    "end": "823560"
  },
  {
    "text": "leak and here's how that works so one thing that I used was CSS",
    "start": "823560",
    "end": "829980"
  },
  {
    "text": "attribute selectors this is one example and it just selects all the image tags that have a source attribute which",
    "start": "829980",
    "end": "836639"
  },
  {
    "text": "contains the string a b and we can create kind of an oracle with",
    "start": "836639",
    "end": "842579"
  },
  {
    "text": "this where we can basically say like if this attribute of that tag contains a",
    "start": "842579",
    "end": "848639"
  },
  {
    "text": "string that we like are looking for then send this request to the attacker server",
    "start": "848639",
    "end": "855000"
  },
  {
    "text": "and the sending the request works by just specifying a background image with a URL and then when rendering the",
    "start": "855000",
    "end": "860519"
  },
  {
    "text": "browser will just fetch this image because it has to show it so then the attacker server would know okay there's",
    "start": "860519",
    "end": "866459"
  },
  {
    "text": "an A B somewhere in this attribute value or CD or whatever we're trying to looking for",
    "start": "866459",
    "end": "873360"
  },
  {
    "text": "so to make this useful we had to create like around 5000 of those selectors for",
    "start": "873360",
    "end": "880440"
  },
  {
    "text": "all the three character combinations that could occur in a uuid because the",
    "start": "880440",
    "end": "885839"
  },
  {
    "text": "uuid is the random part of The Blob URL everything before that origin it's known so we just need to leak this uuid",
    "start": "885839",
    "end": "893339"
  },
  {
    "text": "so in theory we create selectors for all of these and some of them will match for",
    "start": "893339",
    "end": "898440"
  },
  {
    "text": "all the things that are in this particular uuid and then for every one of those a request will be sent to the",
    "start": "898440",
    "end": "904320"
  },
  {
    "text": "attacker server but okay we get a lot of requests it's like only Snippets how can",
    "start": "904320",
    "end": "909540"
  },
  {
    "text": "we put it together let's look at this example of a blob URL that starts with the uid like ABCD",
    "start": "909540",
    "end": "917820"
  },
  {
    "text": "and now if the browser renders this it will go through all of the CSS selectors that we created and the first one that",
    "start": "917820",
    "end": "924899"
  },
  {
    "text": "will match is ABC yes ABC is in that blob URL",
    "start": "924899",
    "end": "930120"
  },
  {
    "text": "so it will request the ABC URL from the attacker server and not the attacker",
    "start": "930120",
    "end": "935699"
  },
  {
    "text": "server knows okay ABC is somewhere in there then the browser will continue to render",
    "start": "935699",
    "end": "941220"
  },
  {
    "text": "and it will see okay BCD is also in there it said offset one let's send also",
    "start": "941220",
    "end": "946680"
  },
  {
    "text": "in request for that and now the attacker server knows okay ABC and BCD is in there so what it can do after it",
    "start": "946680",
    "end": "953220"
  },
  {
    "text": "received all the requests it knows okay because it's all three character chunks they will have some",
    "start": "953220",
    "end": "959459"
  },
  {
    "text": "overlap like this BC uh occurs in ABC and BCD so it can use this overlap to",
    "start": "959459",
    "end": "966720"
  },
  {
    "text": "just stitch together the original blob URL and then it knows the URL",
    "start": "966720",
    "end": "972600"
  },
  {
    "text": "but there's one problem you can only have one background image per element so what we are trying to do",
    "start": "972600",
    "end": "978779"
  },
  {
    "text": "to send the request to the attacker server is to use this background image but if multiple matches happen the first",
    "start": "978779",
    "end": "986100"
  },
  {
    "text": "one will be overridden and since the browser will render this in one go it will first like resolve everything and",
    "start": "986100",
    "end": "993120"
  },
  {
    "text": "see what overrides which directors and then at the end it will only request the images that it needs to so with this it",
    "start": "993120",
    "end": "999720"
  },
  {
    "text": "would only request one image and not all of the ones that would match but there's a solution and I say this",
    "start": "999720",
    "end": "1006680"
  },
  {
    "text": "very easily but this was me reading through CSS backend functions two days straight and losing my mind but what I",
    "start": "1006680",
    "end": "1013940"
  },
  {
    "text": "found is there's the Crossfade function which takes two images and a percentage and it will then overlay them",
    "start": "1013940",
    "end": "1020360"
  },
  {
    "text": "and for the images you can either directly specify a URL or you can recursively use the output of another",
    "start": "1020360",
    "end": "1027558"
  },
  {
    "text": "Crossfade function so what we can do is we just Nest a lot of Crossfade function calls and at the",
    "start": "1027559",
    "end": "1033980"
  },
  {
    "text": "root of that nested calls we will pass URLs as the parameters and now we can",
    "start": "1033980",
    "end": "1039438"
  },
  {
    "text": "yeah use as many URLs as we want for one element because in order to render the whole thing to Overlay all the images",
    "start": "1039439",
    "end": "1045798"
  },
  {
    "text": "the browser of course has to request all of them first and then it can render them",
    "start": "1045799",
    "end": "1051020"
  },
  {
    "text": "okay let's take a step back and combine all this leak process",
    "start": "1051020",
    "end": "1056299"
  },
  {
    "text": "so first we create a lot of these selectors and for each one that matches where this particular three character",
    "start": "1056299",
    "end": "1063440"
  },
  {
    "text": "combination is inside of the blob URL we set the acss variable to a certain value",
    "start": "1063440",
    "end": "1068600"
  },
  {
    "text": "then at the end we have one selector for this image that combines all the values of these variables into one big",
    "start": "1068600",
    "end": "1075020"
  },
  {
    "text": "Crossfade nested call block and that's it this will cause all the right requests to go to the server and",
    "start": "1075020",
    "end": "1082280"
  },
  {
    "text": "then the server can stitch it back together very nice now we have a blob URL that",
    "start": "1082280",
    "end": "1087799"
  },
  {
    "text": "has a content of an arbitrary payload that we defined and the arbitrary content type that we defined very good",
    "start": "1087799",
    "end": "1094880"
  },
  {
    "text": "so let's look at how we can put the whole exploit together so yeah it's as a stage one email we",
    "start": "1094880",
    "end": "1101840"
  },
  {
    "text": "will send this one it has a image tag that points to this attachment which is",
    "start": "1101840",
    "end": "1107840"
  },
  {
    "text": "our payload and of course the style that will leak all the stuff back and what's once the victim opens this email and",
    "start": "1107840",
    "end": "1114799"
  },
  {
    "text": "just views it the browser will render it and with the CSS leak technique that I just described all the blob URLs nipples",
    "start": "1114799",
    "end": "1122299"
  },
  {
    "text": "Snippets will be sent back to the attacker server the attacker stitches everything back together and then the attacker has to send a",
    "start": "1122299",
    "end": "1130340"
  },
  {
    "text": "stage 2 email just in the follow-up email thread which then for Safari for",
    "start": "1130340",
    "end": "1135620"
  },
  {
    "text": "example just includes this blob URL as a script tag and once the victim views this it's game over and JavaScript",
    "start": "1135620",
    "end": "1142460"
  },
  {
    "text": "should be executed so let's see how this works in in in",
    "start": "1142460",
    "end": "1148220"
  },
  {
    "text": "real life so this is a recorded video of course protonmail is a hosted service I",
    "start": "1148220",
    "end": "1153559"
  },
  {
    "text": "cannot just downgrade their version to to show my demo so um",
    "start": "1153559",
    "end": "1158600"
  },
  {
    "text": "we will see how that works right here on the right you will see the attacker",
    "start": "1158600",
    "end": "1164480"
  },
  {
    "text": "script it will just um yeah send the stage one email and then the victim refreshes their",
    "start": "1164480",
    "end": "1171500"
  },
  {
    "text": "protonmail and a new email will appear That's it right there then yeah there's",
    "start": "1171500",
    "end": "1177919"
  },
  {
    "text": "nothing suspicious in it some embedded image but on the right you can see that the blob URL was received and the stage",
    "start": "1177919",
    "end": "1183980"
  },
  {
    "text": "2 email was sent so yeah everything was stitched back together now you see the new email",
    "start": "1183980",
    "end": "1189919"
  },
  {
    "text": "appear and upon watching it the alert triggers [Applause]",
    "start": "1189919",
    "end": "1199220"
  },
  {
    "text": "okay let's look at the disclosure disclosure process and all this happened",
    "start": "1199220",
    "end": "1205400"
  },
  {
    "text": "in last summer we sent the reports some days later they pushed the fix to the",
    "start": "1205400",
    "end": "1210919"
  },
  {
    "text": "public repo then some days more later they awarded us with a 750 bug Bounty",
    "start": "1210919",
    "end": "1216200"
  },
  {
    "text": "which was nice we could give it to charity and then roughly one month after our report they deployed it to production so",
    "start": "1216200",
    "end": "1223220"
  },
  {
    "text": "pretty good time frame I would just recommend not pushing the fix before I",
    "start": "1223220",
    "end": "1228320"
  },
  {
    "text": "or like much more before deploying the actual fix because there are people that",
    "start": "1228320",
    "end": "1233960"
  },
  {
    "text": "know this these kinds of attacks could have seen the commit and could have reverse engineered what it was for but",
    "start": "1233960",
    "end": "1240080"
  },
  {
    "text": "yeah so let's look at the next case study this is again cross-site scripting but",
    "start": "1240080",
    "end": "1246620"
  },
  {
    "text": "this time in skiff and skiff and again a end-to-end encrypted email service it",
    "start": "1246620",
    "end": "1252260"
  },
  {
    "text": "looks like this it's I think less known than protonmail but yeah it's basically a similar service",
    "start": "1252260",
    "end": "1259400"
  },
  {
    "text": "and they also use similar security measures so they again have sanitization iframe sandbox and content security",
    "start": "1259400",
    "end": "1265940"
  },
  {
    "text": "policy so we have to do the same thing again and bypass all of those",
    "start": "1265940",
    "end": "1271340"
  },
  {
    "text": "and again they use Dom purify which is very good but also again they modify",
    "start": "1271340",
    "end": "1276799"
  },
  {
    "text": "something after they sanitize the HTML and what this does is it looks for",
    "start": "1276799",
    "end": "1281900"
  },
  {
    "text": "elements that have a certain attribute and then they will just insert a empty div tag just before that element",
    "start": "1281900",
    "end": "1289520"
  },
  {
    "text": "so let's go through step by step to see why this is bad so this is again our payload it looks",
    "start": "1289520",
    "end": "1296000"
  },
  {
    "text": "pretty much the same like the last one it just has this data injected ID attribute that this function is looking",
    "start": "1296000",
    "end": "1302120"
  },
  {
    "text": "for so this again passes sanitization just fine they in this case sanitize the",
    "start": "1302120",
    "end": "1307940"
  },
  {
    "text": "HTML and don't return a sanitized string but like the sanitized Dom structure and then afterward with their function",
    "start": "1307940",
    "end": "1315320"
  },
  {
    "text": "they just inject this div tag which is now the first child within the SVG tag and it's just there it's empty nothing",
    "start": "1315320",
    "end": "1322580"
  },
  {
    "text": "nothing much happening for now but then you notice that a div tag is not really",
    "start": "1322580",
    "end": "1329600"
  },
  {
    "text": "allowed in SVG tags it's an HTML tag so it should be in the HTML realm and not",
    "start": "1329600",
    "end": "1335360"
  },
  {
    "text": "within an SVG element so when the HTML gets re-parished and",
    "start": "1335360",
    "end": "1340760"
  },
  {
    "text": "this happens just before rendering they take the inner HTML of the sanitized Dom",
    "start": "1340760",
    "end": "1345860"
  },
  {
    "text": "and which serializes it to a string and then they set it to somebody someone else's elements in ihtml which parses it",
    "start": "1345860",
    "end": "1353299"
  },
  {
    "text": "again from a string and this time the HTML path of the browser will see",
    "start": "1353299",
    "end": "1358360"
  },
  {
    "text": "my SVG tag has a contained div tag that's not really allowed let's move",
    "start": "1358360",
    "end": "1363980"
  },
  {
    "text": "this div tag outside of the SVG tag and with that everything after the div tag",
    "start": "1363980",
    "end": "1369740"
  },
  {
    "text": "gets also moved outside and then the same parser differential between House Dial tags are parsed within an SVG tag",
    "start": "1369740",
    "end": "1376340"
  },
  {
    "text": "and in regular HTML are just yeah triggering again just as I explained it",
    "start": "1376340",
    "end": "1382039"
  },
  {
    "text": "for protonmail and JavaScript gets executed again Next Up the iframe Sandbox this is also",
    "start": "1382039",
    "end": "1390140"
  },
  {
    "text": "pretty much the same just without the Safari exception so in this case we definitely have to open or exploit in a",
    "start": "1390140",
    "end": "1397400"
  },
  {
    "text": "new tab in order to execute some scripts um yeah but it will still work",
    "start": "1397400",
    "end": "1404299"
  },
  {
    "text": "and finally we have the content security policy again they have a default source of self which is pretty secure and then",
    "start": "1404299",
    "end": "1411260"
  },
  {
    "text": "for script so for scripts they allow the eval function which is just yeah you",
    "start": "1411260",
    "end": "1416419"
  },
  {
    "text": "give it a string it evaluates JavaScript and without this directive if you have a CSP then it would just not work it would",
    "start": "1416419",
    "end": "1423140"
  },
  {
    "text": "throw an exception and they also allow scripts to come from hcaptcha.com among other things which is just a capture",
    "start": "1423140",
    "end": "1431299"
  },
  {
    "text": "site I guess and it is it's just like recaptcha and all the other captures that you know but when I try to look at this domain to",
    "start": "1431299",
    "end": "1439039"
  },
  {
    "text": "maybe find some script Gadgets in there that could help me bypass the CSP I noticed that it's hosted behind",
    "start": "1439039",
    "end": "1444980"
  },
  {
    "text": "cloudflare which is also nothing unusual it's probably the most used reverse proxy in the world",
    "start": "1444980",
    "end": "1450559"
  },
  {
    "text": "but one interesting thing that some people don't know apparently is that all",
    "start": "1450559",
    "end": "1455980"
  },
  {
    "text": "cloudflare Sites or sites behind cloudflare they have this New Path CDN",
    "start": "1455980",
    "end": "1461120"
  },
  {
    "text": "CGI scripts under which cloudflare serves some javascripts I think it's to show they are like you're being",
    "start": "1461120",
    "end": "1466820"
  },
  {
    "text": "redirected site but apparently in one of these scripts that are served from there",
    "start": "1466820",
    "end": "1472460"
  },
  {
    "text": "there's a known Gadget that can be used in exactly this case where you have an evil allowed in your CSP and a domain",
    "start": "1472460",
    "end": "1479539"
  },
  {
    "text": "that serves these scripts and then you can combine it and just bypass the CSP by creating an HTML structure that will",
    "start": "1479539",
    "end": "1486380"
  },
  {
    "text": "then be parsed and yeah in the end JavaScript will be executed by this gadget script",
    "start": "1486380",
    "end": "1492080"
  },
  {
    "text": "so this is what it looks like unfortunately I don't have the time to go into it but I have some links there",
    "start": "1492080",
    "end": "1498200"
  },
  {
    "text": "you can check it out later when the slides go online they use some Dom clobbering and I didn't come up with",
    "start": "1498200",
    "end": "1503780"
  },
  {
    "text": "this I just found it it's very cool so be sure to check it out but we have to continue",
    "start": "1503780",
    "end": "1510020"
  },
  {
    "text": "so yeah as GIF is pretty similar to the protonmail thing in terms of security measures and because of that also in",
    "start": "1510020",
    "end": "1517159"
  },
  {
    "text": "terms of exploitation we can already see how it works so we again do a blob URL",
    "start": "1517159",
    "end": "1523280"
  },
  {
    "text": "leak um although we didn't have blob URLs allowed in the script Source we do this",
    "start": "1523280",
    "end": "1529220"
  },
  {
    "text": "to have a blob URL that will then be opened upon click so the content of The Blob URL will be what is rendered in the",
    "start": "1529220",
    "end": "1536779"
  },
  {
    "text": "new tab that's opened and yeah to do it we again sent an email some style tags",
    "start": "1536779",
    "end": "1542240"
  },
  {
    "text": "and an attachment leak back the chunks of The Blob URL Stitch it back together and once we have it we send back a stage",
    "start": "1542240",
    "end": "1549440"
  },
  {
    "text": "2 email which in this case has a link we cannot directly do it the victim will have to click but if it happens then",
    "start": "1549440",
    "end": "1556580"
  },
  {
    "text": "JavaScript will be executed again so also let's look at this",
    "start": "1556580",
    "end": "1562700"
  },
  {
    "text": "again this is a recorded video of back from when this was still vulnerable when I found this and here you will see that",
    "start": "1562700",
    "end": "1571340"
  },
  {
    "text": "when we first refresh the first email appears again this is just a innocent",
    "start": "1571340",
    "end": "1577520"
  },
  {
    "text": "email saying hi nothing much but in the background now again the CSS is being rendered all the requests are being made",
    "start": "1577520",
    "end": "1584659"
  },
  {
    "text": "to the attacker server the attacker server stitches Back Together The Blob URL and then once once it has done so it",
    "start": "1584659",
    "end": "1592520"
  },
  {
    "text": "will send the follow-up email that should probably happen now yes and when",
    "start": "1592520",
    "end": "1598100"
  },
  {
    "text": "the victim refreshes the next email is there and now the victim has to click on the",
    "start": "1598100",
    "end": "1603740"
  },
  {
    "text": "link but now we have the cross scripting again [Applause]",
    "start": "1603740",
    "end": "1612109"
  },
  {
    "text": "so disclosure with skiff was very boring which is a good thing for disclosures we just sent the report they fixed it two",
    "start": "1612799",
    "end": "1619460"
  },
  {
    "text": "days later and it was done very good so let's look at our final our third",
    "start": "1619460",
    "end": "1625640"
  },
  {
    "text": "case study and this is tutanota and especially the tutanota desktop app which we first found xss and we're then",
    "start": "1625640",
    "end": "1632360"
  },
  {
    "text": "able to improve it to remote code execution tutanota just like the other two it's",
    "start": "1632360",
    "end": "1638779"
  },
  {
    "text": "just a email client so it looks the same but in this case it's not running in the browser it's I mean not in your regular",
    "start": "1638779",
    "end": "1645559"
  },
  {
    "text": "browser it's running inside of electron which is just some JavaScript together with a browser shipped to your machine",
    "start": "1645559",
    "end": "1653020"
  },
  {
    "text": "and the mitigations are a little bit different here they do have sanitization they do not have an iframe so we got",
    "start": "1653020",
    "end": "1660559"
  },
  {
    "text": "that for free we don't have to bypass some sandbox there then there's the content security policy",
    "start": "1660559",
    "end": "1665720"
  },
  {
    "text": "and finally after the web part there's the electron sandbox that we want to escape in order to directly execute code",
    "start": "1665720",
    "end": "1672740"
  },
  {
    "text": "on the system so for this sanitization you know the drill by now they use Dom purify but",
    "start": "1672740",
    "end": "1679640"
  },
  {
    "text": "again they modify the stuff after sanitizing it this time they use this library to",
    "start": "1679640",
    "end": "1686200"
  },
  {
    "text": "convert all text URLs to link tags that might be in the HTML somewhere",
    "start": "1686200",
    "end": "1692960"
  },
  {
    "text": "but as it turns out this library that they use for this Powers us the HTML itself and they use a custom parser",
    "start": "1692960",
    "end": "1699799"
  },
  {
    "text": "that's different to what the browser and what Dom purify uses so let's see again step by step what we",
    "start": "1699799",
    "end": "1707059"
  },
  {
    "text": "can do to bypass this and make use of this parser differential again this is our good old payload you",
    "start": "1707059",
    "end": "1714500"
  },
  {
    "text": "know it by now there's just one thing differently we have this I element with",
    "start": "1714500",
    "end": "1719960"
  },
  {
    "text": "an X attribute and you will see in a minute wire and again this is just waved by wave",
    "start": "1719960",
    "end": "1726740"
  },
  {
    "text": "through by don't purify nothing suspicious here at least not to don't purify",
    "start": "1726740",
    "end": "1732140"
  },
  {
    "text": "then in the next step the linkify library will pass the HTML as I said it's not the browser's browser it's a",
    "start": "1732140",
    "end": "1738860"
  },
  {
    "text": "custom one so you will see that this dial tag is parsed with HTML rules which",
    "start": "1738860",
    "end": "1744980"
  },
  {
    "text": "is not correct because it's inside of an SVG tag and although the image tag appears here",
    "start": "1744980",
    "end": "1750380"
  },
  {
    "text": "it doesn't get executed yet because this is just in the parsing of the library it's not being rendered by the browser",
    "start": "1750380",
    "end": "1756080"
  },
  {
    "text": "yet so okay it parses it and then at the end after processing all the links that",
    "start": "1756080",
    "end": "1761120"
  },
  {
    "text": "might be there it will normalize the HTML before serializing it back to a string and what",
    "start": "1761120",
    "end": "1767360"
  },
  {
    "text": "they do here is they add default values for attributes that didn't have a value",
    "start": "1767360",
    "end": "1772460"
  },
  {
    "text": "before like this x attribute or they put double quotes around attributes that didn't have double quotes to make it all",
    "start": "1772460",
    "end": "1779299"
  },
  {
    "text": "look normal like good HTML but this leads now to a problem because when all of this is put back together to",
    "start": "1779299",
    "end": "1785899"
  },
  {
    "text": "a string the browser will now pass it differently than when Dom purifier parse it and this",
    "start": "1785899",
    "end": "1793159"
  },
  {
    "text": "is because of this one this one double quote which now prematurely ends the alt",
    "start": "1793159",
    "end": "1798980"
  },
  {
    "text": "attribute and now the image tag comes out again and yeah the on Arrow Handler is executed so again we did it we bypass",
    "start": "1798980",
    "end": "1807080"
  },
  {
    "text": "desanitization and next up is not the iframe sandbox as",
    "start": "1807080",
    "end": "1812659"
  },
  {
    "text": "you might remember there is none into the Nota so we can directly go on",
    "start": "1812659",
    "end": "1818059"
  },
  {
    "text": "and there's the content security policy so here again they have a default source",
    "start": "1818059",
    "end": "1823220"
  },
  {
    "text": "of self which is pretty secure at least in the web but what I noticed is inside",
    "start": "1823220",
    "end": "1828919"
  },
  {
    "text": "of electron all of the pages and JavaScript files are served from the file protocol and the CSP uses self to",
    "start": "1828919",
    "end": "1837799"
  },
  {
    "text": "look at okay which origin does the site come from but An Origin consists of a protocol a hostname and a port but for",
    "start": "1837799",
    "end": "1844520"
  },
  {
    "text": "the file protocol there's no host and no Port so it all boils down to just the",
    "start": "1844520",
    "end": "1849679"
  },
  {
    "text": "file protocol meaning that with this CSP and the stuff being served from the file protocol all local files on your disk",
    "start": "1849679",
    "end": "1857059"
  },
  {
    "text": "are allowed by the CSP so maybe we can use this and yeah just a",
    "start": "1857059",
    "end": "1862520"
  },
  {
    "text": "little note electron is like a nice framework if you just want to build one application and it will work on all the",
    "start": "1862520",
    "end": "1868580"
  },
  {
    "text": "major desktop os's and for the next steps we will focus on Windows because their exploitation was the easiest as",
    "start": "1868580",
    "end": "1875360"
  },
  {
    "text": "you will see so we want to use a local file to load",
    "start": "1875360",
    "end": "1881120"
  },
  {
    "text": "it as JavaScript but how do we get one for this we look at attachments and for",
    "start": "1881120",
    "end": "1886159"
  },
  {
    "text": "tutor notar to show an attachment they get downloaded and decrypted it's still end-to-end encrypted",
    "start": "1886159",
    "end": "1892899"
  },
  {
    "text": "and it then after decryption ends up in a known location so in some temporary",
    "start": "1892899",
    "end": "1899000"
  },
  {
    "text": "directory some subfolder and then it uses the name of the attachment file so",
    "start": "1899000",
    "end": "1905000"
  },
  {
    "text": "we can know this location basically as an attacker so the idea would be now",
    "start": "1905000",
    "end": "1910399"
  },
  {
    "text": "once the victim opens an attachment and it can be something innocent like a txt file then we know this path and we can",
    "start": "1910399",
    "end": "1918200"
  },
  {
    "text": "just include it as a script and it should execute but there's a little bit of a problem",
    "start": "1918200",
    "end": "1923720"
  },
  {
    "text": "here a little bit of timing and we have to make the victim open the attachment so for the timing issue we use this",
    "start": "1923720",
    "end": "1930500"
  },
  {
    "text": "trick we use a iframe with a source stock attribute which is normally used in iframe with a source attribute and",
    "start": "1930500",
    "end": "1936620"
  },
  {
    "text": "put in a URL that it will load but with Source doc you just put the HTML right in and it will render",
    "start": "1936620",
    "end": "1943399"
  },
  {
    "text": "so the first thing we have inside of that is a meta refresh tag which will refresh the iframe itself every second",
    "start": "1943399",
    "end": "1950899"
  },
  {
    "text": "and besides that we have a script that tries to load this file so this will refresh every second every second it",
    "start": "1950899",
    "end": "1957440"
  },
  {
    "text": "will try again to load the file from the disk and once the victims clicks open clicks open it will actually work",
    "start": "1957440",
    "end": "1964580"
  },
  {
    "text": "because then the file is there and it will load so how can we make the victim click open attachment",
    "start": "1964580",
    "end": "1971000"
  },
  {
    "text": "well we can use our good old friend CSS to redress the UI a little bit as I said",
    "start": "1971000",
    "end": "1977000"
  },
  {
    "text": "there's no iframe into tanota which also means that all the styles that are contained in the email body will apply",
    "start": "1977000",
    "end": "1982640"
  },
  {
    "text": "to the whole UI and not only to the email and this is good because we can just make the open Button really big",
    "start": "1982640",
    "end": "1988940"
  },
  {
    "text": "overlay the whole UI and make it invisible and then once the victim clicks anywhere they click actually the",
    "start": "1988940",
    "end": "1994640"
  },
  {
    "text": "button without knowing it so having that we now have a plan to do",
    "start": "1994640",
    "end": "2000580"
  },
  {
    "text": "our cross-site scripting but from that we want to go to remote code execution and first of all we looked at the",
    "start": "2000580",
    "end": "2006760"
  },
  {
    "text": "electron security hygiene so electron has some special configurations that are for security but they all look pretty",
    "start": "2006760",
    "end": "2012940"
  },
  {
    "text": "good context isolation was on node integration was off and all the other things were also good",
    "start": "2012940",
    "end": "2019240"
  },
  {
    "text": "but in order to do the things that it needs to do the app still has to have a way to write some file to disk when you",
    "start": "2019240",
    "end": "2025360"
  },
  {
    "text": "click save attachment or if you click open attachment to open it so it has some IPC calls that are being done",
    "start": "2025360",
    "end": "2031480"
  },
  {
    "text": "between the web part and the main part of the electron application and the main part can then access the system",
    "start": "2031480",
    "end": "2037960"
  },
  {
    "text": "so we have this right file one and the open one but when opening files there's",
    "start": "2037960",
    "end": "2043299"
  },
  {
    "text": "a block list we can just send a.exe attachment and once clicked it will execute but we still want to use this we",
    "start": "2043299",
    "end": "2051339"
  },
  {
    "text": "want to use the right file IPC call to write an executable to disk and then use open which uses the shell execute W",
    "start": "2051339",
    "end": "2058358"
  },
  {
    "text": "function to open it and which will run the application on Windows",
    "start": "2058359",
    "end": "2063638"
  },
  {
    "text": "so let's see how we could bypass the block list this is how it looks like it's just a",
    "start": "2063639",
    "end": "2068858"
  },
  {
    "text": "big array of known bad extensions there's about 20 of them and there's",
    "start": "2068859",
    "end": "2075158"
  },
  {
    "text": "probably a way to bypass this if you're good with Windows and know some weird",
    "start": "2075159",
    "end": "2080378"
  },
  {
    "text": "extensions that nobody else knows about but I didn't know any I tried stuff from the web and nothing worked so I had to",
    "start": "2080379",
    "end": "2087040"
  },
  {
    "text": "look further and this is how they take the file extension from a file path they use the",
    "start": "2087040",
    "end": "2093000"
  },
  {
    "text": "path.xname function which is a node.js library function and this is how it works so if your file",
    "start": "2093000",
    "end": "2099400"
  },
  {
    "text": "is called food.exe this will return dot exe and this will be blocked because",
    "start": "2099400",
    "end": "2104440"
  },
  {
    "text": "it's in the block list and all of this is good because food.exe should not be opened because it might be dangerous",
    "start": "2104440",
    "end": "2110560"
  },
  {
    "text": "if your file is only called Foo it will return an empty string because there's",
    "start": "2110560",
    "end": "2116020"
  },
  {
    "text": "no extension there's no dot in the file name and this is fine it's not blocked but Windows wouldn't know what to do",
    "start": "2116020",
    "end": "2121480"
  },
  {
    "text": "with this full file anyway so no problem here but there's an interesting Edge case",
    "start": "2121480",
    "end": "2126640"
  },
  {
    "text": "where if you call your file only dot exe or dot something",
    "start": "2126640",
    "end": "2132160"
  },
  {
    "text": "the file extension will be empty my guess is this because yeah it thinks it's like a DOT file on Linux or",
    "start": "2132160",
    "end": "2137980"
  },
  {
    "text": "whatever but this is very interesting for us because a DOT exe file just",
    "start": "2137980",
    "end": "2143980"
  },
  {
    "text": "that's called just that will be happily executed by Windows if you double click it or use the open color but it's not in",
    "start": "2143980",
    "end": "2150520"
  },
  {
    "text": "the block list the empty string is not in the block list right so again here we have a bypass and the funny thing is",
    "start": "2150520",
    "end": "2157420"
  },
  {
    "text": "this is actually well documented in the documentation of this function but yeah who reads documentation anyways so yeah",
    "start": "2157420",
    "end": "2165400"
  },
  {
    "text": "I only did it to find a bypassing so let's put it all back together first",
    "start": "2165400",
    "end": "2171160"
  },
  {
    "text": "we send an email that includes this iframe that reloads itself and some style to make the open Button real big",
    "start": "2171160",
    "end": "2177099"
  },
  {
    "text": "and invisible and as an attachment our JavaScript once the victim opens the",
    "start": "2177099",
    "end": "2182740"
  },
  {
    "text": "email and clicks anywhere which actually clicks",
    "start": "2182740",
    "end": "2188140"
  },
  {
    "text": "the button the JavaScript will start to execute and once it executes it will use these tool IPC two IPC calls to actually",
    "start": "2188140",
    "end": "2195820"
  },
  {
    "text": "run a code on the system so again let's see how this works out in",
    "start": "2195820",
    "end": "2202119"
  },
  {
    "text": "real life and again this is a recorded demo at first I thought I could just use the old",
    "start": "2202119",
    "end": "2207400"
  },
  {
    "text": "version of the client because it's just an application you can download but what they actually do is they prevent old",
    "start": "2207400",
    "end": "2214180"
  },
  {
    "text": "versions of the client from working so the weekend will just reject it and also the API changed so I couldn't make it",
    "start": "2214180",
    "end": "2220359"
  },
  {
    "text": "work so we have to take this old video and yeah the victim will just reload and",
    "start": "2220359",
    "end": "2226900"
  },
  {
    "text": "see oh there's an email let's look at it and I will pause here because you can",
    "start": "2226900",
    "end": "2232060"
  },
  {
    "text": "see the email is empty and unfortunately in this proof of concept video I didn't use the CSS make the button big and",
    "start": "2232060",
    "end": "2238780"
  },
  {
    "text": "invisible technique but yeah you will see better how everything works so the",
    "start": "2238780",
    "end": "2244000"
  },
  {
    "text": "victim will just click on open on this txt file and the txt file opens and next to that we have the calc",
    "start": "2244000",
    "end": "2250680"
  },
  {
    "text": "[Applause]",
    "start": "2250680",
    "end": "2254710"
  },
  {
    "text": "okay um disclosure timeline again we sent a report last summer one day after they",
    "start": "2255760",
    "end": "2262000"
  },
  {
    "text": "confirmed it one day after that they released the fix and one month after",
    "start": "2262000",
    "end": "2267339"
  },
  {
    "text": "that they did something that was really nice um they from their own motivation made a",
    "start": "2267339",
    "end": "2273520"
  },
  {
    "text": "blog post on their blog that said like hey we had this vulnerability this is roughly what it is about this is what",
    "start": "2273520",
    "end": "2279099"
  },
  {
    "text": "risks there were for users and this is how we mitigated it and they're planning to harden application in the future so",
    "start": "2279099",
    "end": "2284980"
  },
  {
    "text": "this was really nice to see that they're really open and transparent with their security and gives me a lot of trust in",
    "start": "2284980",
    "end": "2290380"
  },
  {
    "text": "their position towards security okay now let's wrap things up we've seen",
    "start": "2290380",
    "end": "2297700"
  },
  {
    "text": "seen our three case studies and what can we maybe learn from them so the first first thing is as a web",
    "start": "2297700",
    "end": "2305200"
  },
  {
    "text": "exploiter CSS should not be overlooked um okay you want to execute your JavaScript but as we have seen CSS can",
    "start": "2305200",
    "end": "2312760"
  },
  {
    "text": "be your friend either by leaking some stuff or by making it easier to trick a victim into doing a certain user",
    "start": "2312760",
    "end": "2318640"
  },
  {
    "text": "interaction and there might be some more fun in the future there are some things that are being drafted in the CSS pack right now",
    "start": "2318640",
    "end": "2325839"
  },
  {
    "text": "that could make all these leaks easier in the future with just one request instead of all of these that have to be",
    "start": "2325839",
    "end": "2331599"
  },
  {
    "text": "stitched together so let's look out for that the second point is modern mitigations",
    "start": "2331599",
    "end": "2337720"
  },
  {
    "text": "do actually work they make exploitation harder as we have seen all the exploits needed some user interaction two emails",
    "start": "2337720",
    "end": "2344560"
  },
  {
    "text": "being sent in a row you can't reload the page in between and so on so all the mitigations the content security policy",
    "start": "2344560",
    "end": "2351099"
  },
  {
    "text": "the iframe sandbox the sanitization and everything it still kind of worked and made everything harder and it's not like",
    "start": "2351099",
    "end": "2357099"
  },
  {
    "text": "you receive an email and you're directly pawned which is also a good thing and finally and I do want you to really",
    "start": "2357099",
    "end": "2364300"
  },
  {
    "text": "remember this is do not touch or modify your data after sanitizing it it will",
    "start": "2364300",
    "end": "2369520"
  },
  {
    "text": "come and haunt you thank you thank you",
    "start": "2369520",
    "end": "2375660"
  }
]