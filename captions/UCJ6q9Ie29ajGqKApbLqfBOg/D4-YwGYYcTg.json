[
  {
    "start": "0",
    "end": "201000"
  },
  {
    "text": "good morning everyone the topic today is how to survive the hardware-assisted",
    "start": "30",
    "end": "6029"
  },
  {
    "text": "control flow integrity enforcement let's",
    "start": "6029",
    "end": "12690"
  },
  {
    "text": "first introduce ourselves our co-worker",
    "start": "12690",
    "end": "17910"
  },
  {
    "text": "Pinson is unable to come therefore we'll just introduced him first ping son is a",
    "start": "17910",
    "end": "24359"
  },
  {
    "text": "senior secure researcher he leads McAfee IPS research team he has extensive",
    "start": "24359",
    "end": "31650"
  },
  {
    "text": "experience in knowledge --is in operating systems information security",
    "start": "31650",
    "end": "37020"
  },
  {
    "text": "especially in advanced vulnerability research and exploitation techniques",
    "start": "37020",
    "end": "45469"
  },
  {
    "text": "along with rootkit detection firmware security and virtualization technologies",
    "start": "45469",
    "end": "52190"
  },
  {
    "text": "ping has been a regular researcher for many security conferences such as",
    "start": "52190",
    "end": "58500"
  },
  {
    "text": "blackhat and accounts a quest hello I'm Jenny I am a security researcher of X",
    "start": "58500",
    "end": "65820"
  },
  {
    "text": "future now I mainly focus on vulnerability research specialized in",
    "start": "65820",
    "end": "71040"
  },
  {
    "text": "the vulnerability a legacy and exploitation I especially have a focus",
    "start": "71040",
    "end": "77909"
  },
  {
    "text": "on browser vulnerabilities and Windows platform my name is Zhang Chu I received",
    "start": "77909",
    "end": "86759"
  },
  {
    "text": "my PhD from Duke University currently I'm the head of the security research",
    "start": "86759",
    "end": "92670"
  },
  {
    "text": "team for McAfee network security business unit my focus is mainly on",
    "start": "92670",
    "end": "100159"
  },
  {
    "text": "research and innovation for intrusion prevention my team focus is on the",
    "start": "100460",
    "end": "107880"
  },
  {
    "text": "security of vulnerability research malware ADP detection and upon a",
    "start": "107880",
    "end": "113280"
  },
  {
    "text": "detection also my team feeds the security contents into multiple McAfee",
    "start": "113280",
    "end": "119369"
  },
  {
    "text": "products as well as McAfee global threat intelligence now here is the agenda our",
    "start": "119369",
    "end": "130110"
  },
  {
    "text": "topic is how to survive the hot war assisted CET the control flow",
    "start": "130110",
    "end": "137780"
  },
  {
    "text": "enforcement technology so we would like to start from a little bit of history",
    "start": "137780",
    "end": "143670"
  },
  {
    "text": "where we described aha sulfur solution first for the control flow integrity",
    "start": "143670",
    "end": "151050"
  },
  {
    "text": "enforcement and then based on that we'll introduce Intel's new feature for that",
    "start": "151050",
    "end": "157370"
  },
  {
    "text": "control flow enforcement technology CET and then well followed by the Intel",
    "start": "157370",
    "end": "165330"
  },
  {
    "text": "implementation Windows 10 for the CET after that we'll talk about how to",
    "start": "165330",
    "end": "172320"
  },
  {
    "text": "attack those especially for the control flow hijacking and arbitrary code",
    "start": "172320",
    "end": "178110"
  },
  {
    "text": "execution Windows 10 with the city enabled and then we'll conclude and have",
    "start": "178110",
    "end": "185130"
  },
  {
    "text": "the Q&A first of all let's talk about",
    "start": "185130",
    "end": "191550"
  },
  {
    "text": "the software based solution the software based control flow integrity enforcement",
    "start": "191550",
    "end": "198770"
  },
  {
    "text": "we know if we want to attack the control flow there are two ways to do it from",
    "start": "199400",
    "end": "205709"
  },
  {
    "start": "201000",
    "end": "201000"
  },
  {
    "text": "the front edge from the front edge one and any indirect wait if we can control",
    "start": "205709",
    "end": "213390"
  },
  {
    "text": "the target address then we'll be able to change the call flow so that this call",
    "start": "213390",
    "end": "220800"
  },
  {
    "text": "will go to the direction that we want and we'll land on the target address that we provide this is the front edge",
    "start": "220800",
    "end": "228300"
  },
  {
    "text": "and from the back edge obviously when alcohol returns it will return to the",
    "start": "228300",
    "end": "235770"
  },
  {
    "text": "call the original address that the return address has been on the data step",
    "start": "235770",
    "end": "240959"
  },
  {
    "text": "but if we have a way to change that so that when the call returns it will",
    "start": "240959",
    "end": "247140"
  },
  {
    "text": "return to the address that we provided then pretty much we also hijacked the",
    "start": "247140",
    "end": "253140"
  },
  {
    "text": "control flow to any arbitrary location we want for the code execution those are",
    "start": "253140",
    "end": "258180"
  },
  {
    "text": "the two ways of doing the control flow hijacking therefore for the software",
    "start": "258180",
    "end": "263910"
  },
  {
    "text": "approach Microsoft has came up with two solutions one is called the control",
    "start": "263910",
    "end": "271289"
  },
  {
    "text": "flow guard this is to detect the front",
    "start": "271289",
    "end": "276509"
  },
  {
    "text": "and hijacking the basic idea is as follows let's look at the program on",
    "start": "276509",
    "end": "284759"
  },
  {
    "text": "this side on this side if we see here there's a function pointer and then we",
    "start": "284759",
    "end": "292830"
  },
  {
    "text": "assign this function pointer to this object so in this function bar then we",
    "start": "292830",
    "end": "300750"
  },
  {
    "text": "make the indirect call to the function pointer that we assigned to this is the",
    "start": "300750",
    "end": "307319"
  },
  {
    "text": "original code but if when the CFG is enabled then compiler will be able to",
    "start": "307319",
    "end": "313259"
  },
  {
    "text": "add instrumented instructions what it is added is here the card check icon so",
    "start": "313259",
    "end": "321180"
  },
  {
    "text": "what this does is that for any indirect call there's a target address and",
    "start": "321180",
    "end": "328430"
  },
  {
    "text": "Microsoft wants to enforce a check for the validity of that target address what",
    "start": "328430",
    "end": "336419"
  },
  {
    "text": "that means is that when a problem is being compiled or the valid destinations",
    "start": "336419",
    "end": "341699"
  },
  {
    "text": "of those calling targets are listed so that there will be a bitmap to simplify",
    "start": "341699",
    "end": "348930"
  },
  {
    "text": "which address is a valid address and then one that program is loaded and",
    "start": "348930",
    "end": "355680"
  },
  {
    "text": "obviously those are addresses the virtual address will be mapped so also",
    "start": "355680",
    "end": "360719"
  },
  {
    "text": "then those map app will now become a valid be map to indicate which are the",
    "start": "360719",
    "end": "367289"
  },
  {
    "text": "valid target addresses so when each core is actually made here then before that",
    "start": "367289",
    "end": "375330"
  },
  {
    "text": "Microsoft uses this the guard check icon to check whether or not this court",
    "start": "375330",
    "end": "382830"
  },
  {
    "text": "target is innocent knowing bitmap one that is successful then this call will",
    "start": "382830",
    "end": "388680"
  },
  {
    "text": "be our in the rec hall will be allowed",
    "start": "388680",
    "end": "394110"
  },
  {
    "text": "to continue otherwise if it's not valid target then obviously for example if we",
    "start": "394110",
    "end": "399719"
  },
  {
    "text": "are jumping into arbitrary location then that target address is not a valid target then",
    "start": "399719",
    "end": "405869"
  },
  {
    "text": "obviously Microsoft will fill this process so that's the basic idea for the",
    "start": "405869",
    "end": "413789"
  },
  {
    "text": "CFG this is used to address the front edge control flow hijacking but there",
    "start": "413789",
    "end": "423359"
  },
  {
    "text": "has been multiple ways to bypass this and then if you guys are interested in",
    "start": "423359",
    "end": "428759"
  },
  {
    "text": "this then you can look at the Microsoft",
    "start": "428759",
    "end": "436729"
  },
  {
    "text": "mitigation bypass bounty pages and from that for CFG Microsoft listed a lot of",
    "start": "436729",
    "end": "443969"
  },
  {
    "text": "the known witness of CFG along with what they think are the out of scope attack",
    "start": "443969",
    "end": "450359"
  },
  {
    "text": "vectors so all those are useful in bypassing CFG so later we'll show so",
    "start": "450359",
    "end": "457349"
  },
  {
    "text": "some of those even with the CDT enabled are still valid that's for the front",
    "start": "457349",
    "end": "464729"
  },
  {
    "text": "edge then for the back edge Microsoft implemented what they caught the return",
    "start": "464729",
    "end": "469919"
  },
  {
    "start": "465000",
    "end": "465000"
  },
  {
    "text": "flow guard the idea is also very simple one a function call is made we know that",
    "start": "469919",
    "end": "479659"
  },
  {
    "text": "the attorney address is on the stack is on the data stack and attackers will try",
    "start": "479659",
    "end": "486569"
  },
  {
    "text": "to modify that return address so that I can hijack the control flow but what if",
    "start": "486569",
    "end": "494119"
  },
  {
    "text": "we have a separate stack which also has a copy of the return address and then",
    "start": "494119",
    "end": "501089"
  },
  {
    "text": "when the real return happens operating system we'll be able to compare the",
    "start": "501089",
    "end": "507799"
  },
  {
    "text": "stored return address on this shadow stack along with the return address on",
    "start": "507799",
    "end": "513568"
  },
  {
    "text": "the data stack if those two matches then obviously the the real return address on",
    "start": "513569",
    "end": "521008"
  },
  {
    "text": "the data stack is the return address so that's the basic idea in order to do",
    "start": "521009",
    "end": "527879"
  },
  {
    "text": "that also there has to be some operating system changes",
    "start": "527879",
    "end": "533660"
  },
  {
    "text": "if you look at the cult here before the call is actually made and proceed when",
    "start": "533660",
    "end": "541620"
  },
  {
    "text": "we made the call but before the real call proceeds then there's some cold",
    "start": "541620",
    "end": "547230"
  },
  {
    "text": "before and there some code after what this does is that we see RSV is the",
    "start": "547230",
    "end": "553890"
  },
  {
    "text": "current stack pointer it points to the return address of the current call so we",
    "start": "553890",
    "end": "560279"
  },
  {
    "text": "move that we copy that into this FS RSP which points to the shadow stack which",
    "start": "560279",
    "end": "570300"
  },
  {
    "text": "means we're copying the real return address currently we know into the shadow stack",
    "start": "570300",
    "end": "575779"
  },
  {
    "text": "and then after the original code executes before we return then we'll see",
    "start": "575779",
    "end": "581910"
  },
  {
    "text": "we're doing a comparison which is the reverse process we take the copy of the",
    "start": "581910",
    "end": "588810"
  },
  {
    "text": "return address on the shadow stack and compared with the real return address that is how this is implemented which is",
    "start": "588810",
    "end": "596220"
  },
  {
    "text": "the return flow guard but there are two things that we have to notice the first",
    "start": "596220",
    "end": "602910"
  },
  {
    "text": "thing is store of this return address and the comparison of those return",
    "start": "602910",
    "end": "610290"
  },
  {
    "text": "address those are not atomic operations because they're at the beginning of this",
    "start": "610290",
    "end": "617250"
  },
  {
    "text": "call and at the end of this call so in the middle after the RSP is stored on to",
    "start": "617250",
    "end": "626130"
  },
  {
    "text": "the shadow stack then if we have a way to change the shadow stack content to",
    "start": "626130",
    "end": "634200"
  },
  {
    "text": "change the return address on the shadow stack then obviously we can change it to",
    "start": "634200",
    "end": "639240"
  },
  {
    "text": "whatever we we want to use and now again that we can corrupt the data stack for",
    "start": "639240",
    "end": "645540"
  },
  {
    "text": "the return address the same address that we want to return to will be copied on",
    "start": "645540",
    "end": "650820"
  },
  {
    "text": "both the the real data stack and the shadow stack that is the first assumption but that's not easy to do",
    "start": "650820",
    "end": "658769"
  },
  {
    "text": "because one Microsoft implements the so called the SIA rfg the return flow card",
    "start": "658769",
    "end": "666540"
  },
  {
    "text": "then one assumption is this is put into a location nobody knows which means we",
    "start": "666540",
    "end": "673830"
  },
  {
    "text": "don't know the base address for this shadow stack they'll sell first hurdle stack that's a good assumption but in",
    "start": "673830",
    "end": "681870"
  },
  {
    "text": "reality everything is still in the memory so there are ways to find out where this base address is as soon as we",
    "start": "681870",
    "end": "688980"
  },
  {
    "text": "get that base address of this shadow stack then we will be able to see where",
    "start": "688980",
    "end": "694560"
  },
  {
    "text": "the real return address we want to change to is and then if we have a arbitrary read and write exploitation to",
    "start": "694560",
    "end": "703740"
  },
  {
    "text": "get read and write now we'll be able to change the memory so then that can be",
    "start": "703740",
    "end": "709440"
  },
  {
    "text": "broken that's the basic idea so if you are interested then pretty much this",
    "start": "709440",
    "end": "715650"
  },
  {
    "text": "talk has the detail so now we know that",
    "start": "715650",
    "end": "724340"
  },
  {
    "text": "we have software solutions to tackle both the front edge and the back edge control flow hijacking but those",
    "start": "724340",
    "end": "732390"
  },
  {
    "text": "software solutions don't really work as they're designed there are still possibility to bypass them therefore",
    "start": "732390",
    "end": "739290"
  },
  {
    "text": "Intel decides that such solutions to be should be implemented into the hardware",
    "start": "739290",
    "end": "745380"
  },
  {
    "text": "into CPU this is where the control flow enforcement technology CET came okay so",
    "start": "745380",
    "end": "757730"
  },
  {
    "text": "Intel implemented this so it will be come out as the hardware feature for the",
    "start": "757730",
    "end": "763620"
  },
  {
    "text": "new processor families the basic idea as we said is to prevent control flow",
    "start": "763620",
    "end": "769830"
  },
  {
    "text": "hijacking there are two capabilities as we're already said first of all there's",
    "start": "769830",
    "end": "776010"
  },
  {
    "text": "a friend and friend edge control flow hijacking and there's a back edge for",
    "start": "776010",
    "end": "781290"
  },
  {
    "text": "the front edge what it is being done",
    "start": "781290",
    "end": "786390"
  },
  {
    "text": "here is Intel introduced the so called",
    "start": "786390",
    "end": "794060"
  },
  {
    "text": "indirect branch tracking so that one odd in direct cause may then it wants to",
    "start": "794060",
    "end": "802970"
  },
  {
    "text": "compare the the address and also for the package then we have this shadow stack",
    "start": "802970",
    "end": "810410"
  },
  {
    "text": "concept already that is implemented into the hardware now so now we know there",
    "start": "810410",
    "end": "822050"
  },
  {
    "start": "819000",
    "end": "819000"
  },
  {
    "text": "are two of those capabilities let's dive into the details so that we understand what exactly is being done here and how",
    "start": "822050",
    "end": "830240"
  },
  {
    "text": "those can be used to prevent hijacking first of all let's look at the shadows",
    "start": "830240",
    "end": "837350"
  },
  {
    "text": "that concept as we know for the we already described for the cell first evolution you have the data stack and",
    "start": "837350",
    "end": "844610"
  },
  {
    "text": "then you have shadows stack here we have the same concept but the difference is",
    "start": "844610",
    "end": "851630"
  },
  {
    "text": "that this shadow stack now is only",
    "start": "851630",
    "end": "857050"
  },
  {
    "text": "available operated by a hardware and",
    "start": "857050",
    "end": "862400"
  },
  {
    "text": "also it's only available to be changed and modified through certain",
    "start": "862400",
    "end": "869830"
  },
  {
    "text": "instructions which is not a normal instruction special instructions are introduced but the basic idea is still",
    "start": "869830",
    "end": "877340"
  },
  {
    "text": "the same one any choice made the return",
    "start": "877340",
    "end": "882650"
  },
  {
    "text": "address first of all it must be on the data stack and then we'll copy that into",
    "start": "882650",
    "end": "888460"
  },
  {
    "text": "this shadow stack so one the call returns then CPU will check the return",
    "start": "888460",
    "end": "898760"
  },
  {
    "text": "address on the data stack compared with the return address of the shadow stack if they don't match which means that the",
    "start": "898760",
    "end": "908120"
  },
  {
    "text": "data stack return address is now corrupted now we have a mismatch so at",
    "start": "908120",
    "end": "914150"
  },
  {
    "text": "this point operating system will throw an exception which is called control",
    "start": "914150",
    "end": "919310"
  },
  {
    "text": "production exception and it will give you different reasons of why this failed",
    "start": "919310",
    "end": "925490"
  },
  {
    "text": "so that's the basic idea now this uh IBT",
    "start": "925490",
    "end": "933960"
  },
  {
    "start": "930000",
    "end": "930000"
  },
  {
    "text": "the indirect branch checking here is",
    "start": "933960",
    "end": "939150"
  },
  {
    "text": "also the basic idea let us look at the problem on the left what we're doing",
    "start": "939150",
    "end": "945750"
  },
  {
    "text": "here is we're doing assignment for a function pointer and then we're making a",
    "start": "945750",
    "end": "951150"
  },
  {
    "text": "indirect cost through a function pointer and then one this is compiled the",
    "start": "951150",
    "end": "956940"
  },
  {
    "text": "compiler will add other instrumentation instructions into the binary code so",
    "start": "956940",
    "end": "963990"
  },
  {
    "text": "what are added are what is called n branch instructions those are the n",
    "start": "963990",
    "end": "970230"
  },
  {
    "text": "branch so this n branch is at the beginning and then right when we get",
    "start": "970230",
    "end": "976170"
  },
  {
    "text": "into this this indirect call it has a second and branch those two comes as a",
    "start": "976170",
    "end": "983490"
  },
  {
    "text": "pair that's V Z that's easy to see so now how does the CPU work in this case",
    "start": "983490",
    "end": "993170"
  },
  {
    "text": "CPU oh by yourself it maintains a small state machine this state machine has",
    "start": "993170",
    "end": "999180"
  },
  {
    "text": "only two states the first state is idle state the second state is the wait for n",
    "start": "999180",
    "end": "1004970"
  },
  {
    "text": "branch state 1 we have the code execution we see the first n branch",
    "start": "1004970",
    "end": "1013120"
  },
  {
    "text": "instruction and then the CPU gets from the idle state into this wait for n",
    "start": "1013120",
    "end": "1019550"
  },
  {
    "text": "branch states at this moment he knows that a function in the rec hall will be",
    "start": "1019550",
    "end": "1024949"
  },
  {
    "text": "made and then obviously as soon as it",
    "start": "1024949",
    "end": "1030260"
  },
  {
    "text": "gets into this indirect go into the function then it expects the second",
    "start": "1030260",
    "end": "1037810"
  },
  {
    "text": "matching and branch instruction so one is sees this instruction then CPU will",
    "start": "1037810",
    "end": "1045290"
  },
  {
    "text": "change his state from and the wait for n branch to idle which means now we're",
    "start": "1045290",
    "end": "1051770"
  },
  {
    "text": "seeing a koi is made and then this call is actually made to the valid",
    "start": "1051770",
    "end": "1058510"
  },
  {
    "text": "destination that we're checking so that's the basic idea of this",
    "start": "1058510",
    "end": "1063519"
  },
  {
    "text": "but let's see what if the attacker is able to hijack the target address and",
    "start": "1063519",
    "end": "1071029"
  },
  {
    "text": "redirect this to some other location let's assume in this case RDX contains",
    "start": "1071029",
    "end": "1077630"
  },
  {
    "text": "the address that this call wants to call",
    "start": "1077630",
    "end": "1083389"
  },
  {
    "text": "- but let's say if we are the attacker and we are able to modify this RDX the",
    "start": "1083389",
    "end": "1090950"
  },
  {
    "text": "value of it so that we jump to some other places in this case for simplicity let's assume that we are able to jump",
    "start": "1090950",
    "end": "1099049"
  },
  {
    "text": "into in the middle of this function call",
    "start": "1099049",
    "end": "1104450"
  },
  {
    "text": "somewhere in the middle and then obviously when it comes to hear what CPU",
    "start": "1104450",
    "end": "1111169"
  },
  {
    "text": "expects is another and branch but when it comes to here the instructor is not",
    "start": "1111169",
    "end": "1116210"
  },
  {
    "text": "and branch then obviously CPU knows that something goes wrong because we're not",
    "start": "1116210",
    "end": "1121750"
  },
  {
    "text": "going into the target address that has the end branch the other end branch has",
    "start": "1121750",
    "end": "1127279"
  },
  {
    "text": "a pair right so that's how the problem happens and then now since CPU",
    "start": "1127279",
    "end": "1136120"
  },
  {
    "text": "identifies there there's a mismatch and there's a hijacking in place then we'll",
    "start": "1136120",
    "end": "1141980"
  },
  {
    "text": "throw another control protection its exception with different unbranched as a",
    "start": "1141980",
    "end": "1149870"
  },
  {
    "text": "error reason that is how this IBT works",
    "start": "1149870",
    "end": "1158740"
  },
  {
    "text": "in order to use those then new instructions were introduced for example",
    "start": "1164410",
    "end": "1171650"
  },
  {
    "text": "for shadow stack management there's a bunch of new instructions if we want to",
    "start": "1171650",
    "end": "1177170"
  },
  {
    "text": "increase the shadows stack pointer then this Inc SSB is used if we want to read",
    "start": "1177170",
    "end": "1184160"
  },
  {
    "text": "the shadow stack pointer then this RVs SP is used and also there's a other two",
    "start": "1184160",
    "end": "1190730"
  },
  {
    "text": "pairs of the instructions which are very interesting as we know different",
    "start": "1190730",
    "end": "1196400"
  },
  {
    "text": "programs different processes different acts are running at the same time on CPU so each of those will have its own",
    "start": "1196400",
    "end": "1203780"
  },
  {
    "text": "shadow stack so one the task switches now we have to switch to a new shadow",
    "start": "1203780",
    "end": "1209750"
  },
  {
    "text": "stack those saved rivers ssp and restore as as we are used for the channel stack",
    "start": "1209750",
    "end": "1217370"
  },
  {
    "text": "switching purposes so that it can switch a new shadow stack that can be used for",
    "start": "1217370",
    "end": "1223220"
  },
  {
    "text": "the new task and then to write to the shadow stack there's this WR s s and W R",
    "start": "1223220",
    "end": "1231470"
  },
  {
    "text": "Us has the second one we can write to it in the user mode and then obviously we",
    "start": "1231470",
    "end": "1237830"
  },
  {
    "text": "can set the shadow stack to be busy and also we can also clear the visit tag we",
    "start": "1237830",
    "end": "1247790"
  },
  {
    "text": "just described a little bit of there's a shadow stack switch so this is a very",
    "start": "1247790",
    "end": "1254059"
  },
  {
    "text": "interesting operation as we know because we need to switch back and forth between",
    "start": "1254059",
    "end": "1261230"
  },
  {
    "text": "different shadow sacks with because different processes and the tasks are running so this is how it is done",
    "start": "1261230",
    "end": "1267950"
  },
  {
    "text": "through the through the current shadow",
    "start": "1267950",
    "end": "1278780"
  },
  {
    "text": "stack and the new shadow stack now let's look at this first of all we have the",
    "start": "1278780",
    "end": "1288110"
  },
  {
    "text": "current shadow stack here and then we are using restore shadows restore SSP",
    "start": "1288110",
    "end": "1294760"
  },
  {
    "text": "given and add this is where the new shadows are we want to switch to so as we see a point",
    "start": "1294760",
    "end": "1301850"
  },
  {
    "text": "so here at this location it has a what they call the shadow stack restore token",
    "start": "1301850",
    "end": "1309590"
  },
  {
    "text": "and this restore cook and this bit is zero and this part contains the address",
    "start": "1309590",
    "end": "1315110"
  },
  {
    "text": "when this token was created that means when this was created at that moment",
    "start": "1315110",
    "end": "1322210"
  },
  {
    "text": "this is the shadow step pointer so what we're doing here is that replace this by",
    "start": "1322210",
    "end": "1329149"
  },
  {
    "text": "a previous shuttle stack token now we're because we need to go back to here so",
    "start": "1329149",
    "end": "1336110"
  },
  {
    "text": "since we the current SSP is point two pointing to 0 X 1 0 0 then we copy the",
    "start": "1336110",
    "end": "1344240"
  },
  {
    "text": "address to here and then this one marks it as previous SSB token so now this is",
    "start": "1344240",
    "end": "1351559"
  },
  {
    "text": "created and now we can see since this is",
    "start": "1351559",
    "end": "1358000"
  },
  {
    "text": "created then this previous SSP token is in place now we want to do the store we",
    "start": "1358000",
    "end": "1367880"
  },
  {
    "text": "want to have the the previous shadow stack to have this shadow stack token so",
    "start": "1367880",
    "end": "1376760"
  },
  {
    "text": "that we know we are able to go back to this district 1 when this is done or",
    "start": "1376760",
    "end": "1382250"
  },
  {
    "text": "some other shadow stack after the use of it and then we put this which contains",
    "start": "1382250",
    "end": "1391130"
  },
  {
    "text": "the address of the previous shuttle stack which is here and then this is the",
    "start": "1391130",
    "end": "1401149"
  },
  {
    "text": "address and then this 0 means is the Sherrill stack restored token and then",
    "start": "1401149",
    "end": "1407260"
  },
  {
    "text": "after that is done so we will be able to have a new have a new oh this is the",
    "start": "1407260",
    "end": "1418639"
  },
  {
    "text": "original this is our read sorry this is our return or shuttle stack restore token so now we",
    "start": "1418639",
    "end": "1424909"
  },
  {
    "text": "put the previous set of stacked token to it and then after that is done then we",
    "start": "1424909",
    "end": "1430340"
  },
  {
    "text": "popped the SSP now SSP points to the new",
    "start": "1430340",
    "end": "1435529"
  },
  {
    "text": "shadow stack on top of it so that can be used now this will be able to use for",
    "start": "1435529",
    "end": "1442190"
  },
  {
    "text": "the new shadow stack so that is how switch happens obviously for the any new",
    "start": "1442190",
    "end": "1450979"
  },
  {
    "text": "CPU features there will be registered that we can use to store all those for",
    "start": "1450979",
    "end": "1458179"
  },
  {
    "text": "operation there are CR 4 dot CET that we use for the master enable bits and then",
    "start": "1458179",
    "end": "1465889"
  },
  {
    "text": "there's a bunch of MSR the model specific register that we use to operate",
    "start": "1465889",
    "end": "1471409"
  },
  {
    "text": "for those now let's look at the",
    "start": "1471409",
    "end": "1477409"
  },
  {
    "text": "operating system implementation of it for Windows 10 in order to implement",
    "start": "1477409",
    "end": "1484369"
  },
  {
    "text": "this it has to make a lot of changes the first change it makes is introduced a",
    "start": "1484369",
    "end": "1491330"
  },
  {
    "text": "lot of the enhancement for a lot of those operations for example thread",
    "start": "1491330",
    "end": "1497989"
  },
  {
    "text": "creation and termination fiber equation termination and T continue and gas read",
    "start": "1497989",
    "end": "1503799"
  },
  {
    "text": "context and an exception a minder control protection for paid handling and",
    "start": "1503799",
    "end": "1511749"
  },
  {
    "text": "page fault handling a user mode callbacks all those needs to be enhanced",
    "start": "1511749",
    "end": "1516889"
  },
  {
    "text": "so that they can deal with this a new feature but then one thing that we want",
    "start": "1516889",
    "end": "1523609"
  },
  {
    "text": "to notice is that for the latest Windows 10 Windows 10 insider preview 19 h1 it",
    "start": "1523609",
    "end": "1529580"
  },
  {
    "text": "doesn't really support the IBT we're suspecting that because Microsoft",
    "start": "1529580",
    "end": "1534919"
  },
  {
    "text": "already have the our rfg in place so to get rid of rfg to fully implement this",
    "start": "1534919",
    "end": "1542989"
  },
  {
    "text": "IBT it may takes a lot of time therefore it probably is deferred now let's look",
    "start": "1542989",
    "end": "1550849"
  },
  {
    "text": "at the deal of the also enhancement that we want to add to those",
    "start": "1550849",
    "end": "1556730"
  },
  {
    "start": "1552000",
    "end": "1552000"
  },
  {
    "text": "some of the functions that is their gene will give you to detail now you guys",
    "start": "1556730",
    "end": "1567330"
  },
  {
    "text": "know some special instructor and how did inhale do with a shadow stack and next I",
    "start": "1567330",
    "end": "1574080"
  },
  {
    "text": "will combine some special function in fiber to tell you how Microsoft added",
    "start": "1574080",
    "end": "1579960"
  },
  {
    "text": "into function actually because it seems",
    "start": "1579960",
    "end": "1585860"
  },
  {
    "text": "thread creations we can send the shadows decoration so we need to focus on the",
    "start": "1585860",
    "end": "1592530"
  },
  {
    "text": "fiber actually this ready is most important but the creation should be same the first day is a function you can",
    "start": "1592530",
    "end": "1600690"
  },
  {
    "text": "see is a PSP start up user fiber shadow stack this is a function which responds",
    "start": "1600690",
    "end": "1609210"
  },
  {
    "text": "for the shadows a shot at creation and to switch and you can see there are",
    "start": "1609210",
    "end": "1615570"
  },
  {
    "text": "serious a first function in the dress of a p84 is for one it name is PSP reserved",
    "start": "1615570",
    "end": "1622950"
  },
  {
    "text": "and commit user shadow stack actually this function aim to create read only",
    "start": "1622950",
    "end": "1630600"
  },
  {
    "text": "paid protection shadow stack page and it also considered for the shadows that",
    "start": "1630600",
    "end": "1636240"
  },
  {
    "text": "extend it will return the address and next it will check if it is a success",
    "start": "1636240",
    "end": "1644550"
  },
  {
    "text": "and you can see here from the address a p8 for 5 month it the instruction is sub",
    "start": "1644550",
    "end": "1654480"
  },
  {
    "text": "rx-8 the target is a shadow stack pointer it will give first Q word on the",
    "start": "1654480",
    "end": "1663000"
  },
  {
    "text": "shadows to export him and he adhere at",
    "start": "1663000",
    "end": "1668220"
  },
  {
    "text": "the address of a p8 for Wi-Fi it will move a function pointer in this place",
    "start": "1668220",
    "end": "1676070"
  },
  {
    "text": "actually the sweat switch and fiber switch will always begin with a special",
    "start": "1676070",
    "end": "1681780"
  },
  {
    "text": "function here the fibers is a detail RTL user favor start",
    "start": "1681780",
    "end": "1687970"
  },
  {
    "text": "when the fibers red has been added the function will begin with this function",
    "start": "1687970",
    "end": "1695700"
  },
  {
    "text": "the interaction this instruction will move the pointer into shadow stack so",
    "start": "1695700",
    "end": "1701980"
  },
  {
    "text": "that when the fibers thread be shadowed and return the instruction will check if",
    "start": "1701980",
    "end": "1710320"
  },
  {
    "text": "the function pointer will match the shadow stack and it will use the special",
    "start": "1710320",
    "end": "1715840"
  },
  {
    "text": "instruction WR USS why is the pointer into the create a shadow stack and this",
    "start": "1715840",
    "end": "1724720"
  },
  {
    "text": "is the rest part of a PSP start up user fiber shadow stack and you can see just",
    "start": "1724720",
    "end": "1732010"
  },
  {
    "text": "like a last page it also use special",
    "start": "1732010",
    "end": "1738460"
  },
  {
    "text": "instruction WR USS but this time he just white restore token on the second D word",
    "start": "1738460",
    "end": "1746500"
  },
  {
    "text": "and the shadow stack bottom so the first is pointer of random user fabrica the",
    "start": "1746500",
    "end": "1752800"
  },
  {
    "text": "second is a shadow stack restore Hawken it can be used for the switch contacts",
    "start": "1752800",
    "end": "1760240"
  },
  {
    "text": "later and the next is another function",
    "start": "1760240",
    "end": "1766240"
  },
  {
    "start": "1764000",
    "end": "1764000"
  },
  {
    "text": "which name is switch fabric context it will shadows a new create fiber and the",
    "start": "1766240",
    "end": "1773440"
  },
  {
    "text": "CPU and RAM begin with ngel torrent random user fiber start it",
    "start": "1773440",
    "end": "1781450"
  },
  {
    "text": "can do the three things the first is it will as address of nursery 295 it will",
    "start": "1781450",
    "end": "1790570"
  },
  {
    "text": "come higher therapy twist pointer at RC",
    "start": "1790570",
    "end": "1796300"
  },
  {
    "text": "X plus 5 to 8 it will check if the shadow stack is exist if it is if it is",
    "start": "1796300",
    "end": "1804450"
  },
  {
    "text": "exist it will use another spiritual",
    "start": "1804450",
    "end": "1809530"
  },
  {
    "text": "instruction like RTS SP it will read the pointer of the shadow stack and you can",
    "start": "1809530",
    "end": "1817540"
  },
  {
    "text": "see the fire of special instruction at address of nursery to ad to restore shadow stack",
    "start": "1817540",
    "end": "1827620"
  },
  {
    "text": "pointer and sip reverse shadow style pointer because currently the serie -",
    "start": "1827620",
    "end": "1835150"
  },
  {
    "text": "shadow sects shadow stack of a thread who will create the new fiber and the",
    "start": "1835150",
    "end": "1841090"
  },
  {
    "text": "another shadow stack is curing to create fibers so it need to do add a switch and",
    "start": "1841090",
    "end": "1848070"
  },
  {
    "text": "at the end the function also moved to the pointer of a beginning function RTL",
    "start": "1848070",
    "end": "1857770"
  },
  {
    "text": "user fiber set it will move to the data stack so that when the function used",
    "start": "1857770",
    "end": "1864040"
  },
  {
    "text": "read the shadow stack pointer will match the data stack pointer so that it will",
    "start": "1864040",
    "end": "1869590"
  },
  {
    "text": "not reach the say P exception this is logic of switch and shadow stack",
    "start": "1869590",
    "end": "1878380"
  },
  {
    "text": "creation next part and is about the",
    "start": "1878380",
    "end": "1885000"
  },
  {
    "text": "control flow hijackings idea and from will talk the brief so will now we",
    "start": "1885000",
    "end": "1899410"
  },
  {
    "text": "talked about the software solution for control flow hijacking and we talked about Intel's Traverse solution for",
    "start": "1899410",
    "end": "1906970"
  },
  {
    "text": "hijacking and then we talked about Windows 10 implementation for the CET",
    "start": "1906970",
    "end": "1915480"
  },
  {
    "text": "enhancement and then gene used example of fiber the creation and also switch",
    "start": "1915480",
    "end": "1923340"
  },
  {
    "text": "for those to describe what are the changes the operators must must make to",
    "start": "1923340",
    "end": "1929980"
  },
  {
    "text": "use those special instructions provided to do all the enhancement in order to",
    "start": "1929980",
    "end": "1936010"
  },
  {
    "text": "use the city now let's continue let's continue into how we can break it",
    "start": "1936010",
    "end": "1943530"
  },
  {
    "text": "first of all we believe shadow sac CT",
    "start": "1945630",
    "end": "1951299"
  },
  {
    "text": "shadows stack itself it defeats the friend of the package control flow hijacking wired the return address",
    "start": "1951299",
    "end": "1957570"
  },
  {
    "text": "overwrite as we know the way how it does",
    "start": "1957570",
    "end": "1962730"
  },
  {
    "text": "is through hardware and then also at this moment because only a certain set",
    "start": "1962730",
    "end": "1970380"
  },
  {
    "text": "of the instructions can be used to modify the content on the shuttle stack",
    "start": "1970380",
    "end": "1975900"
  },
  {
    "text": "and to make changes so it's not possible for arbitrary Unicode to make make",
    "start": "1975900",
    "end": "1981720"
  },
  {
    "text": "arbitrary changes to those therefore the shadow stack by itself is very secure",
    "start": "1981720",
    "end": "1987440"
  },
  {
    "text": "therefore it's not possible for anybody to temper the content on the shadow",
    "start": "1987440",
    "end": "1993510"
  },
  {
    "text": "stack because it's a hardware assisted solution so now the return address",
    "start": "1993510",
    "end": "1999690"
  },
  {
    "text": "overwrite as we used to use it's no longer pretty much impossible second",
    "start": "1999690",
    "end": "2008020"
  },
  {
    "text": "shadow stack together with AC g + CI g AC t-- a sense for arbitrary called card",
    "start": "2008020",
    "end": "2015169"
  },
  {
    "text": "CI g sent for the code integrity card nose make the code arbitrary code",
    "start": "2015169",
    "end": "2021950"
  },
  {
    "text": "execution even more difficult why is that well first of all shadows stack pretty much it defeats rob shellcode we",
    "start": "2021950",
    "end": "2030169"
  },
  {
    "text": "cannot jump arbitrarily anymore and then as we know AC g the purpose of it is to",
    "start": "2030169",
    "end": "2037309"
  },
  {
    "text": "be able to load only the knowing code into the memory for execution and CI g",
    "start": "2037309",
    "end": "2042650"
  },
  {
    "text": "is that if we can load knowing code then we have to make sure when the code is",
    "start": "2042650",
    "end": "2048108"
  },
  {
    "text": "loaded it cannot be changed now when those things work together which means",
    "start": "2048109",
    "end": "2054560"
  },
  {
    "text": "that we cannot arbitrarily load any code and change any pages in the memory for",
    "start": "2054560",
    "end": "2062210"
  },
  {
    "text": "execution and then even if some code is loaded then it's not possible for any",
    "start": "2062210",
    "end": "2067460"
  },
  {
    "text": "third party code to be loaded and especially those called modifies the",
    "start": "2067460",
    "end": "2073368"
  },
  {
    "text": "memory and make it as a new executable so no are pretty much no longer possible but",
    "start": "2073369",
    "end": "2082120"
  },
  {
    "text": "that being said as we said in the previous section the indirect branch",
    "start": "2082120",
    "end": "2089649"
  },
  {
    "text": "tracking which is a hardware solution for CET is not implemented in the",
    "start": "2089650",
    "end": "2096580"
  },
  {
    "text": "current Windows 10 implementation therefore a Windows 10 currently still",
    "start": "2096580",
    "end": "2102310"
  },
  {
    "text": "heavily relies on the CFG for the front",
    "start": "2102310",
    "end": "2108520"
  },
  {
    "text": "edge control for hijacking we know CFG is possible to by passive those being",
    "start": "2108520",
    "end": "2115270"
  },
  {
    "text": "said a lot of the assumptions made here are is that we need show called in order",
    "start": "2115270",
    "end": "2122050"
  },
  {
    "text": "to have all the things work but in reality that's not really necessary one",
    "start": "2122050",
    "end": "2129790"
  },
  {
    "text": "talk we gave which is the shell codes are for the 99% if you are interested",
    "start": "2129790",
    "end": "2135100"
  },
  {
    "text": "you can read that talk what we proposed here is that we don't have to have the",
    "start": "2135100",
    "end": "2141250"
  },
  {
    "text": "shell code we can go through the scripting engine in this case the",
    "start": "2141250",
    "end": "2146350"
  },
  {
    "text": "example we use is a JavaScript engine everything can be done through JavaScript and we will achieve the same",
    "start": "2146350",
    "end": "2153630"
  },
  {
    "text": "results so pretty much we achieved our create a solution that is a shell code free",
    "start": "2153630",
    "end": "2161380"
  },
  {
    "text": "because we're doing everything shoot JavaScript so that being said now since",
    "start": "2161380",
    "end": "2170950"
  },
  {
    "text": "were using javascript a lot of those say ICGC IG those are no longer a barrier",
    "start": "2170950",
    "end": "2179260"
  },
  {
    "text": "for us because we don't we don't really rely on an arbitrary shell code to be executed we do in the JavaScript layer",
    "start": "2179260",
    "end": "2187590"
  },
  {
    "text": "so now the only thing we want to bypass is how to bypass either the shadow stack",
    "start": "2187590",
    "end": "2194620"
  },
  {
    "text": "or the CFG",
    "start": "2194620",
    "end": "2197820"
  },
  {
    "start": "2198000",
    "end": "2198000"
  },
  {
    "text": "now we understand what is possible let's look at the attack vector we believe the",
    "start": "2200250",
    "end": "2208950"
  },
  {
    "text": "following attack vectors are still valid and possible given the current",
    "start": "2208950",
    "end": "2214609"
  },
  {
    "text": "implementation on Windows 10 for CET but for the first two called replacement",
    "start": "2214609",
    "end": "2220790"
  },
  {
    "text": "attack and counter fate a break Iranian programming attack those two are off",
    "start": "2220790",
    "end": "2227700"
  },
  {
    "text": "topic so will not touch those we'll focus on the last three data only",
    "start": "2227700",
    "end": "2232950"
  },
  {
    "text": "corruption function pointer hijacking through race condition attack and threat",
    "start": "2232950",
    "end": "2239180"
  },
  {
    "text": "contacts hijacking by abusing anti continue mechanism now Jim will give all",
    "start": "2239180",
    "end": "2248550"
  },
  {
    "text": "the details and examples of each of those attack vector how they can be",
    "start": "2248550",
    "end": "2253710"
  },
  {
    "text": "attacked and along with the screenshot of the results okay let's begin as the",
    "start": "2253710",
    "end": "2265320"
  },
  {
    "text": "data only corruption you probably know about the data only attack we can use",
    "start": "2265320",
    "end": "2271170"
  },
  {
    "text": "high court here and abilities to gain the arbitrator tries red and white after",
    "start": "2271170",
    "end": "2277410"
  },
  {
    "text": "we got this capabilities we can use this to change some key key point data in",
    "start": "2277410",
    "end": "2283290"
  },
  {
    "text": "some structure and it can resulting in the Hydra hijacking control flow and now",
    "start": "2283290",
    "end": "2291300"
  },
  {
    "text": "the CD ends say every protection only protects the integrity of control flow",
    "start": "2291300",
    "end": "2298339"
  },
  {
    "text": "but now the integrity of data so we can corrupt in our programs critical data",
    "start": "2298339",
    "end": "2304800"
  },
  {
    "text": "and it can lead the control flow hijack there is a case CFG bypass by abusing in",
    "start": "2304800",
    "end": "2312750"
  },
  {
    "text": "detail order work mechanism this issues is still exist in the windows inside",
    "start": "2312750",
    "end": "2319290"
  },
  {
    "text": "preview 19 h1 and you can read this link to see how the loader work work",
    "start": "2319290",
    "end": "2326300"
  },
  {
    "text": "basically this is a demo screen shot",
    "start": "2326300",
    "end": "2331760"
  },
  {
    "start": "2329000",
    "end": "2329000"
  },
  {
    "text": "basically we buy the high quality even abilities we freak loader work structures and we",
    "start": "2331760",
    "end": "2340440"
  },
  {
    "text": "insert it into the top hole increased and a loader worker naturally can change",
    "start": "2340440",
    "end": "2346140"
  },
  {
    "text": "the memory protection so you can see as the rest this is address or function RPC rt4 it's",
    "start": "2346140",
    "end": "2354660"
  },
  {
    "text": "a safety check we change the protection of this memory so original memory is",
    "start": "2354660",
    "end": "2361400"
  },
  {
    "text": "paid read and now it's people read and white or we can just either return or",
    "start": "2361400",
    "end": "2367890"
  },
  {
    "text": "returned value equal to 1 and this safe check will be bypassed and then we can",
    "start": "2367890",
    "end": "2373710"
  },
  {
    "text": "combine with JavaScript engine drum has mentioned that we can use the RPC module",
    "start": "2373710",
    "end": "2379950"
  },
  {
    "text": "to call any function we want in just quick level I think is Alcon way to",
    "start": "2379950",
    "end": "2386329"
  },
  {
    "text": "hijack the control flow in the left you can see by recalling some windows API we",
    "start": "2386329",
    "end": "2394680"
  },
  {
    "text": "can cause current process PB it was to say two three seven four eight who say",
    "start": "2394680",
    "end": "2402299"
  },
  {
    "text": "zero zero zero and next let's see some",
    "start": "2402299",
    "end": "2407940"
  },
  {
    "text": "harder is about function pointer hijacking Zoo risk condition attack",
    "start": "2407940",
    "end": "2415729"
  },
  {
    "text": "because some have mentioned due to the lake of hardware base for the edge",
    "start": "2415729",
    "end": "2422039"
  },
  {
    "text": "control flow enforcement gibt and memory target address of",
    "start": "2422039",
    "end": "2428369"
  },
  {
    "text": "indirect call and the indirect ramp is still susceptible to the risk condition",
    "start": "2428369",
    "end": "2434460"
  },
  {
    "text": "attack there are two case the first case is exception an exception handler and a",
    "start": "2434460",
    "end": "2443130"
  },
  {
    "text": "weakened dollar hijacking through the risk condition attack the root cause of",
    "start": "2443130",
    "end": "2448170"
  },
  {
    "text": "this the same and the second case is frame consolidation and when the",
    "start": "2448170",
    "end": "2454380"
  },
  {
    "text": "callback routine hijack service condition attack actually the two parter also happens in the exception handler",
    "start": "2454380",
    "end": "2462710"
  },
  {
    "text": "let's see the first the pack was found in the function named",
    "start": "2462710",
    "end": "2470590"
  },
  {
    "text": "random dispatcher exception and Wrentham execute handle or exception",
    "start": "2470590",
    "end": "2477130"
  },
  {
    "text": "this one is functional who do the really work and the another function is runtime",
    "start": "2477130",
    "end": "2484119"
  },
  {
    "text": "on with the X and our TRP execute handler for Unwin function this for",
    "start": "2484119",
    "end": "2490960"
  },
  {
    "text": "function in the entire module this this function can be exploited to achieve the",
    "start": "2490960",
    "end": "2498160"
  },
  {
    "text": "control flow hijack so the root reason",
    "start": "2498160",
    "end": "2503560"
  },
  {
    "text": "is that the handler is first saved on the stack before it gets executed so if",
    "start": "2503560",
    "end": "2510340"
  },
  {
    "text": "you can find a small time window between the stack store and handle or invocation",
    "start": "2510340",
    "end": "2517119"
  },
  {
    "text": "it will have a possible to make a recent condition attack so the basic idea is we",
    "start": "2517119",
    "end": "2525580"
  },
  {
    "text": "will call a function who have the which have the problems a lot of time and it",
    "start": "2525580",
    "end": "2533590"
  },
  {
    "text": "will trigger the exception again again so it in the in the function level it",
    "start": "2533590",
    "end": "2541090"
  },
  {
    "text": "will call the function which have back again again so we can create a another",
    "start": "2541090",
    "end": "2547270"
  },
  {
    "text": "thread in this thread we can achieve the risk condition act hack to modify the value in the original stress data in the",
    "start": "2547270",
    "end": "2555970"
  },
  {
    "text": "stack and by the way the exception and I",
    "start": "2555970",
    "end": "2561130"
  },
  {
    "text": "mean handle seems to come from certain trust place actually it should come from",
    "start": "2561130",
    "end": "2567340"
  },
  {
    "text": "the mr data of a piece section so there is no any safety check against them it",
    "start": "2567340",
    "end": "2574720"
  },
  {
    "text": "will make the risk condition attack easier okay let's see the code this is a",
    "start": "2574720",
    "end": "2582430"
  },
  {
    "start": "2579000",
    "end": "2579000"
  },
  {
    "text": "function in the case one eye only shows Unwin the handle or hydrating because",
    "start": "2582430",
    "end": "2587590"
  },
  {
    "text": "exception is a same as it you can see there a lot of right code",
    "start": "2587590",
    "end": "2593360"
  },
  {
    "text": "actually this is a time window for the risk condition attack so the red",
    "start": "2593360",
    "end": "2601610"
  },
  {
    "text": "function the function in the left is art here and windy X and the function the",
    "start": "2601610",
    "end": "2607250"
  },
  {
    "text": "right is our TRP executed a handler for and wind this function will be called as",
    "start": "2607250",
    "end": "2614900"
  },
  {
    "text": "the dress or four six one six five here and finally the run Hampi execute the",
    "start": "2614900",
    "end": "2623210"
  },
  {
    "text": "function will call our x directly that is in handler but you can see the areas",
    "start": "2623210",
    "end": "2631370"
  },
  {
    "text": "come from our night has 38 and this this",
    "start": "2631370",
    "end": "2636860"
  },
  {
    "text": "pointer come from the RB P plus 1 C 0 plus variable we can control so we can",
    "start": "2636860",
    "end": "2645500"
  },
  {
    "text": "use this condition by changing this value to hijack the control flow and the",
    "start": "2645500",
    "end": "2654050"
  },
  {
    "text": "red box give us a lot of time to achieve this risk condition it's more easy",
    "start": "2654050",
    "end": "2660800"
  },
  {
    "text": "because it have no staff check next let's see the harder the frame",
    "start": "2660800",
    "end": "2668390"
  },
  {
    "text": "consolidation and when this function is also a part of exception dispatcher and",
    "start": "2668390",
    "end": "2675400"
  },
  {
    "text": "it's also is a risk condition back and",
    "start": "2675400",
    "end": "2680560"
  },
  {
    "text": "differ from the and when the handler this consolidation have a callback",
    "start": "2680560",
    "end": "2686690"
  },
  {
    "text": "routine you can see the function handler comes from structure exception record to",
    "start": "2686690",
    "end": "2694250"
  },
  {
    "text": "exception information 0 this handler is valid by a safety check before making",
    "start": "2694250",
    "end": "2701270"
  },
  {
    "text": "this call and now release there is also small window of the time between the first",
    "start": "2701270",
    "end": "2707260"
  },
  {
    "text": "exception code check in the 70 you can see in the runtime and e^x later and the",
    "start": "2707260",
    "end": "2714920"
  },
  {
    "text": "second exception code to check for the final execution the",
    "start": "2714920",
    "end": "2720359"
  },
  {
    "text": "execution is in the function are say firm consolidation during this time we",
    "start": "2720359",
    "end": "2726780"
  },
  {
    "text": "can find the exception records and the stack that we can use a risk condition",
    "start": "2726780",
    "end": "2733830"
  },
  {
    "text": "attack to change this value let's see the code is Li complex the left is art",
    "start": "2733830",
    "end": "2743430"
  },
  {
    "start": "2740000",
    "end": "2740000"
  },
  {
    "text": "here and windy X and the right is art here or restore contacts this function",
    "start": "2743430",
    "end": "2751170"
  },
  {
    "text": "will be called as here that dress 6-3 p 0 and the the left the right the red",
    "start": "2751170",
    "end": "2761609"
  },
  {
    "text": "code is a first exception Chad called for savage II the safety check is at the",
    "start": "2761609",
    "end": "2767640"
  },
  {
    "text": "left bottom address six seven to eight it will be called adhere the zero as",
    "start": "2767640",
    "end": "2779550"
  },
  {
    "text": "compared with the exception code to the value eight a lot of 0:29 and if match",
    "start": "2779550",
    "end": "2787500"
  },
  {
    "text": "it will jump to the safety check and then it will jump to six three ninety is",
    "start": "2787500",
    "end": "2795089"
  },
  {
    "text": "here it will call another functional odor control flow card first and finally",
    "start": "2795089",
    "end": "2801720"
  },
  {
    "text": "it will do some check and prepare for the parameter and go here to call",
    "start": "2801720",
    "end": "2809640"
  },
  {
    "text": "another function random card very the stack pointer or finally the well called",
    "start": "2809640",
    "end": "2814800"
  },
  {
    "text": "the second exception code to check the right function RTL restore contacts and",
    "start": "2814800",
    "end": "2822980"
  },
  {
    "text": "you can see at the end of the second exception jacket the function will color",
    "start": "2822980",
    "end": "2828690"
  },
  {
    "text": "acts directly so this is a pointer or",
    "start": "2828690",
    "end": "2833880"
  },
  {
    "text": "from the structure like this so even the",
    "start": "2833880",
    "end": "2839040"
  },
  {
    "text": "first exception check has a self G loader value the user call target we",
    "start": "2839040",
    "end": "2846510"
  },
  {
    "text": "still have enough time to do the risk condition after it finished",
    "start": "2846510",
    "end": "2851920"
  },
  {
    "text": "the job until the function finally called the re axe let's see the last",
    "start": "2851920",
    "end": "2863609"
  },
  {
    "text": "threat contacts hijacking Bob using anti continuous system call and she continued",
    "start": "2863609",
    "end": "2870430"
  },
  {
    "text": "is a special function it can change the curing the Stratus contacts the threat",
    "start": "2870430",
    "end": "2876369"
  },
  {
    "text": "Comcast contain a lot all four CPU register include our IP re ax r ZX and",
    "start": "2876369",
    "end": "2882720"
  },
  {
    "text": "SATA contacts change occurs in the kernel space so all the users GFI",
    "start": "2882720",
    "end": "2889980"
  },
  {
    "text": "enforcements cannot we all became in relative so as I mentioned in the",
    "start": "2889980",
    "end": "2897400"
  },
  {
    "text": "continue will take the contest at is argument in the memory and anti continue",
    "start": "2897400",
    "end": "2904720"
  },
  {
    "text": "in kernel we are not valid the most member of contacts but except for the",
    "start": "2904720",
    "end": "2909940"
  },
  {
    "text": "RSP and CD act state by the way serious",
    "start": "2909940",
    "end": "2915540"
  },
  {
    "text": "some explanation for the special function ke verify contacts activate CTU",
    "start": "2915540",
    "end": "2922780"
  },
  {
    "text": "you can fund control flow and explanation or a slide of a publication",
    "start": "2922780",
    "end": "2929619"
  },
  {
    "text": "about the Safety Act state function this function aim to prevent that hacker to",
    "start": "2929619",
    "end": "2937810"
  },
  {
    "text": "change the contacts but used some instruction like ax restore and but post",
    "start": "2937810",
    "end": "2947109"
  },
  {
    "text": "factor makes a straight content by dragging through the risk condition access possible so it's also a risk",
    "start": "2947109",
    "end": "2953980"
  },
  {
    "text": "condition attack there are also two case the first is the contacts hijacking in",
    "start": "2953980",
    "end": "2961330"
  },
  {
    "text": "stressed user mode initialization it's about the function name the lower initialize the trunk",
    "start": "2961330",
    "end": "2967180"
  },
  {
    "text": "mr. Rahman mr. bean how do this topic you can refer from the link and now I",
    "start": "2967180",
    "end": "2973180"
  },
  {
    "text": "will show the second case we want to",
    "start": "2973180",
    "end": "2978280"
  },
  {
    "text": "hijack the thread compacts in the exception and wind process the",
    "start": "2978280",
    "end": "2984260"
  },
  {
    "text": "function Hallberg name is art here I'll restore context you have seen let's see",
    "start": "2984260",
    "end": "2993630"
  },
  {
    "start": "2991000",
    "end": "2991000"
  },
  {
    "text": "the code is a little complex the code",
    "start": "2993630",
    "end": "2999000"
  },
  {
    "text": "name is I should have back and we can",
    "start": "2999000",
    "end": "3005810"
  },
  {
    "text": "see adhere the at the top of right you can see the function will call DW",
    "start": "3005810",
    "end": "3011390"
  },
  {
    "text": "continue the DW continue is until anemia internally called DW continues it will",
    "start": "3011390",
    "end": "3018440"
  },
  {
    "text": "change the thread contacts in kernel and the contacts record is as a parameter",
    "start": "3018440",
    "end": "3026930"
  },
  {
    "text": "come from the RCX but the place memory",
    "start": "3026930",
    "end": "3032120"
  },
  {
    "text": "holds this context record is on the stack so in this case it will have a",
    "start": "3032120",
    "end": "3038090"
  },
  {
    "text": "very long time window to do the risk condition it will check if it's",
    "start": "3038090",
    "end": "3045080"
  },
  {
    "text": "exception called will match this and according the different exceptional",
    "start": "3045080",
    "end": "3051830"
  },
  {
    "text": "record to match different contacts restore method so you can see as a right",
    "start": "3051830",
    "end": "3057170"
  },
  {
    "text": "by using and continuous it's code to restore contacts and you saw you can",
    "start": "3057170",
    "end": "3063350"
  },
  {
    "text": "also do the fast contact restore or just used special instruction ex restore but",
    "start": "3063350",
    "end": "3071150"
  },
  {
    "text": "this function need to check with ke verify contacts I mentioned and there",
    "start": "3071150",
    "end": "3077060"
  },
  {
    "text": "are a lot of way to do the contacts restore and finally it will jump to our",
    "start": "3077060",
    "end": "3083960"
  },
  {
    "text": "say firm consolidation so such a long time window you can also use risk",
    "start": "3083960",
    "end": "3091790"
  },
  {
    "text": "condition attack to change contacts record and stack this is screenshot demo",
    "start": "3091790",
    "end": "3101320"
  },
  {
    "start": "3097000",
    "end": "3097000"
  },
  {
    "text": "let me explain it and register you can see the dip",
    "start": "3101320",
    "end": "3108640"
  },
  {
    "text": "the Parker rubric has the function kernel32 is this a value name this is a",
    "start": "3108640",
    "end": "3115700"
  },
  {
    "text": "hijacked control Florentino control fellow cannot jump here by changing the",
    "start": "3115700",
    "end": "3121430"
  },
  {
    "text": "are IP into street contacts we changed at address of this and we also fake",
    "start": "3121430",
    "end": "3128710"
  },
  {
    "text": "object as our sex value but if we want to use the anti continue hijacking you",
    "start": "3128710",
    "end": "3137810"
  },
  {
    "text": "should also to change the value of RP p and RSP i mentioned it's cannot change",
    "start": "3137810",
    "end": "3147140"
  },
  {
    "text": "the RSP value at random but you can change the value at the bottom of RSP it",
    "start": "3147140",
    "end": "3153410"
  },
  {
    "text": "should match the return address or random restore context functions parent",
    "start": "3153410",
    "end": "3161240"
  },
  {
    "text": "function so when the function finally returns it will also match the return",
    "start": "3161240",
    "end": "3168050"
  },
  {
    "text": "address in data second the shadow stack you must keep the function pointer",
    "start": "3168050",
    "end": "3174430"
  },
  {
    "text": "matches otherwise it will also raise exception that's all of the data of the",
    "start": "3174430",
    "end": "3183380"
  },
  {
    "text": "hijacking control flow idea",
    "start": "3183380",
    "end": "3187420"
  },
  {
    "text": "okay we just show different ways that we can still make control flow hijacking",
    "start": "3192160",
    "end": "3199130"
  },
  {
    "text": "possible and didn't already described several scenarios in shock tolls are",
    "start": "3199130",
    "end": "3204619"
  },
  {
    "text": "addressing different possibilities now let's conclude this talk first of",
    "start": "3204619",
    "end": "3212540"
  },
  {
    "text": "all we believe that CET our solution is definitely the direction to go because",
    "start": "3212540",
    "end": "3219740"
  },
  {
    "text": "to start with we already seen that the software based solution is not adequate",
    "start": "3219740",
    "end": "3225980"
  },
  {
    "text": "is in it's good but it's not adequate because there are still ways to bypass",
    "start": "3225980",
    "end": "3231050"
  },
  {
    "text": "those software solutions and then regarding the two functions provided by",
    "start": "3231050",
    "end": "3238460"
  },
  {
    "text": "CET PCT shadow stack is a good supplement to CFG and it makes the",
    "start": "3238460",
    "end": "3245690"
  },
  {
    "text": "control flow hijacking an arbitrary code execution more difficult and by itself shadow",
    "start": "3245690",
    "end": "3252890"
  },
  {
    "text": "stack can also successfully block the control flow hijacking wired the return",
    "start": "3252890",
    "end": "3258140"
  },
  {
    "text": "address overwrite and therefore the Rob and also Rob based attacks so by design",
    "start": "3258140",
    "end": "3268780"
  },
  {
    "text": "it successfully achieved those but however even with the however based",
    "start": "3268780",
    "end": "3279170"
  },
  {
    "text": "CT in place then other type of control",
    "start": "3279170",
    "end": "3284270"
  },
  {
    "text": "flow hijacking is still possible gingers show that for the data only attack and",
    "start": "3284270",
    "end": "3290390"
  },
  {
    "text": "also anti continue then we still can use those to bypass the control flow",
    "start": "3290390",
    "end": "3297140"
  },
  {
    "text": "hijacking protection because especially",
    "start": "3297140",
    "end": "3302390"
  },
  {
    "text": "let's say for example for the data only attack we're not relying on hijacking",
    "start": "3302390",
    "end": "3308510"
  },
  {
    "text": "the control flow itself or relying on changing some of the data which will",
    "start": "3308510",
    "end": "3313670"
  },
  {
    "text": "influence different control flow transition so those are the key for the",
    "start": "3313670",
    "end": "3320450"
  },
  {
    "text": "successful even with hardware solution in place such scenario is still possible but that",
    "start": "3320450",
    "end": "3327920"
  },
  {
    "text": "being said is that it is possible to still hijack the control flow but then",
    "start": "3327920",
    "end": "3336080"
  },
  {
    "text": "after we hijack the control flow we have to make a way of doing something else to",
    "start": "3336080",
    "end": "3343190"
  },
  {
    "text": "run the arbitrary code then with city in place arbitrary code execution after the",
    "start": "3343190",
    "end": "3350960"
  },
  {
    "text": "control flow hijacking is becoming extremely difficult if not impossible that that means the city is still very",
    "start": "3350960",
    "end": "3359690"
  },
  {
    "text": "strong in terms of providing the protection the third point we want to",
    "start": "3359690",
    "end": "3365600"
  },
  {
    "text": "make is that compared to the hardware-based the IB teat indirect",
    "start": "3365600",
    "end": "3372710"
  },
  {
    "text": "branch tracking the current sulfur solution on Windows 10 is still not adequate because the CFG is still by",
    "start": "3372710",
    "end": "3382550"
  },
  {
    "text": "possible then last but not least is that as we see a lot of the data or there",
    "start": "3382550",
    "end": "3389840"
  },
  {
    "text": "were touching or were modifying are in the users the process space those are",
    "start": "3389840",
    "end": "3396020"
  },
  {
    "text": "the critical data that can influence the execution of the processes and threats",
    "start": "3396020",
    "end": "3401810"
  },
  {
    "text": "whatever the entity we want to to say so therefore it's very critical that some",
    "start": "3401810",
    "end": "3410030"
  },
  {
    "text": "of those meaningful data are moved out of the process space that way the",
    "start": "3410030",
    "end": "3416480"
  },
  {
    "text": "critical data that can influence the execution of the process of threats are no longer accessible within the same",
    "start": "3416480",
    "end": "3423950"
  },
  {
    "text": "process even you have different stress running as we see for the risk condition",
    "start": "3423950",
    "end": "3430820"
  },
  {
    "text": "attack we can ruin a different stroke within the same process which will be able to modify the data within the same",
    "start": "3430820",
    "end": "3437540"
  },
  {
    "text": "process if that process that data is outside this process space then obviously that is no longer possible so",
    "start": "3437540",
    "end": "3445370"
  },
  {
    "text": "that that is one of the things that we think ultimately will make this data",
    "start": "3445370",
    "end": "3453800"
  },
  {
    "text": "only attack more difficult that pretty much conclude the talk today",
    "start": "3453800",
    "end": "3460620"
  },
  {
    "text": "and now we'll start the Q&A so after",
    "start": "3460620",
    "end": "3466650"
  },
  {
    "text": "this session if you have any questions or you want the further discussion",
    "start": "3466650",
    "end": "3471930"
  },
  {
    "text": "please email us so we have all the emails listed here and also at the end",
    "start": "3471930",
    "end": "3479160"
  },
  {
    "text": "we would like to thank nsrc because we reported the problem and they helped",
    "start": "3479160",
    "end": "3485520"
  },
  {
    "text": "analyze and confirm those problems in a very timely manner moreover we would",
    "start": "3485520",
    "end": "3491730"
  },
  {
    "text": "like to thank our team the McAfee IPS research team for all the help and all",
    "start": "3491730",
    "end": "3497250"
  },
  {
    "text": "the support so now it's the time for Q&A any questions",
    "start": "3497250",
    "end": "3504680"
  },
  {
    "text": "we used a city neighbor hover but for",
    "start": "3518430",
    "end": "3526060"
  },
  {
    "text": "for the debugging purpose because a lot",
    "start": "3526060",
    "end": "3531490"
  },
  {
    "text": "of the the current say Ida Pro it doesn't really fully support all of all",
    "start": "3531490",
    "end": "3538210"
  },
  {
    "text": "of those new instructions so we have to make some our own tricks in order to make all those thing work so that we can",
    "start": "3538210",
    "end": "3544329"
  },
  {
    "text": "show you like the code we show you actually is not directly from the",
    "start": "3544329",
    "end": "3549940"
  },
  {
    "text": "existing debugger is we have to make some changes for those any other",
    "start": "3549940",
    "end": "3556960"
  },
  {
    "text": "questions",
    "start": "3556960",
    "end": "3559710"
  },
  {
    "text": "JIT called where are the giantic on what",
    "start": "3567779",
    "end": "3574000"
  },
  {
    "text": "would put in me",
    "start": "3574000",
    "end": "3576960"
  },
  {
    "text": "you probably means i PT tricking for the treaty code actually the IPTS are same",
    "start": "3593940",
    "end": "3603839"
  },
  {
    "text": "as surgery but the difference is autumn instruction and as ER is a software-based so this behavior is",
    "start": "3603839",
    "end": "3612869"
  },
  {
    "text": "happening after the compiler so the JIT is a compiler dynamic so it I think it",
    "start": "3612869",
    "end": "3619559"
  },
  {
    "text": "will not have a BT but due to the situation currently there's no any abaca",
    "start": "3619559",
    "end": "3626460"
  },
  {
    "text": "support in Windows 10 so it's hard to judge basically the IPT will have also a",
    "start": "3626460",
    "end": "3639480"
  },
  {
    "text": "bitmap dresser like a 70 but it's also hard to charge because the currently",
    "start": "3639480",
    "end": "3647069"
  },
  {
    "text": "here we don't see any code of the IPT",
    "start": "3647069",
    "end": "3650930"
  },
  {
    "text": "[Music] so I know that",
    "start": "3652430",
    "end": "3659068"
  },
  {
    "text": "so so",
    "start": "3667250",
    "end": "3678650"
  },
  {
    "text": "because I'm just the father actually we",
    "start": "3693500",
    "end": "3705480"
  },
  {
    "text": "choose theta only at HACC and the risk condition attack is based on we have a",
    "start": "3705480",
    "end": "3711330"
  },
  {
    "text": "language just like JavaScript it came to the first days it can provide us a high",
    "start": "3711330",
    "end": "3717869"
  },
  {
    "text": "quality run abilities so it can to modify the data in the stack and the",
    "start": "3717869",
    "end": "3723150"
  },
  {
    "text": "second is the place there's a vulnerability stipends just like the",
    "start": "3723150",
    "end": "3729320"
  },
  {
    "text": "exception dispatch oh we will white",
    "start": "3729320",
    "end": "3735140"
  },
  {
    "text": "function how problems on purpose so it will trigger the exception again again",
    "start": "3735140",
    "end": "3741930"
  },
  {
    "text": "and that's which will guarantee a time we can change the data on the stack because I have no any experience with",
    "start": "3741930",
    "end": "3750180"
  },
  {
    "text": "the mobile so I don't know if we thank you okay any other questions",
    "start": "3750180",
    "end": "3757910"
  },
  {
    "text": "yeah but but in general that the cold we",
    "start": "3783470",
    "end": "3789090"
  },
  {
    "text": "showed right that the N branch is right within the function cord itself so no",
    "start": "3789090",
    "end": "3802530"
  },
  {
    "text": "the the instrumented code and branch is inserted by the compiler but then CP selphie runs a very small",
    "start": "3802530",
    "end": "3809250"
  },
  {
    "text": "state machine but yeah but as you know when the call is made and right it will",
    "start": "3809250",
    "end": "3816810"
  },
  {
    "text": "the first instruction is that that n branch pretty much yeah I think that the",
    "start": "3816810",
    "end": "3834600"
  },
  {
    "text": "transfers data is first solo probably we can we can talk offline for this question yes",
    "start": "3834600",
    "end": "3841010"
  },
  {
    "text": "the CFI check you mean the CFG check",
    "start": "3853880",
    "end": "3865180"
  },
  {
    "text": "very so yeah so that's a good question for the forest condition obviously you",
    "start": "3868240",
    "end": "3875930"
  },
  {
    "text": "have to have ways to prevent the exception from failing the process there",
    "start": "3875930",
    "end": "3882710"
  },
  {
    "text": "are tricks that we have to do so it's not described here tricks tricks yes so",
    "start": "3882710",
    "end": "3891680"
  },
  {
    "text": "you have to do something with the exception of another yeah",
    "start": "3891680",
    "end": "3901390"
  },
  {
    "text": "okay yeah thank you all then [Applause]",
    "start": "3905410",
    "end": "3912260"
  }
]