[
  {
    "start": "0",
    "end": "38000"
  },
  {
    "text": "[Music]",
    "start": "860",
    "end": "9599"
  },
  {
    "text": "hi everyone welcome to picking lock files attacking and defending your supply chain",
    "start": "9599",
    "end": "14799"
  },
  {
    "text": "we'll be talking some about supply chains how software's built and deployed and how lock file tampering in particular",
    "start": "14799",
    "end": "21840"
  },
  {
    "text": "can play a role in an attack chain there are many forms of supply chain",
    "start": "21840",
    "end": "26880"
  },
  {
    "text": "attacks lock file tampering being just one our goal is to help you understand lock file tampering in depth",
    "start": "26880",
    "end": "33920"
  },
  {
    "text": "as well as how to better defend it or add it to your red team tool belt supply chain attacks are really nothing",
    "start": "33920",
    "end": "39760"
  },
  {
    "start": "38000",
    "end": "38000"
  },
  {
    "text": "new a military history provides some great examples of what supply chains look like",
    "start": "39760",
    "end": "45680"
  },
  {
    "text": "what they're for as well as how they can be attacked and defended supply chains are in place to move",
    "start": "45680",
    "end": "51360"
  },
  {
    "text": "critical assets to the right place at the right time during world war ii",
    "start": "51360",
    "end": "56640"
  },
  {
    "text": "opposing forces would sometimes use inflatable tanks wooden airplanes and fake buildings to confuse the enemy",
    "start": "56640",
    "end": "62960"
  },
  {
    "text": "and divert direct attacks on the chain of supplies flowing from one place to another",
    "start": "62960",
    "end": "68799"
  },
  {
    "text": "sometimes these plots were discovered and opposing forces would drop wooden bombs on wooden airfields subjectively",
    "start": "68799",
    "end": "74159"
  },
  {
    "text": "say hey we we see what you're up to um and in a way this is similar in a sense",
    "start": "74159",
    "end": "80240"
  },
  {
    "text": "to lock file tampering where fake dependencies can be injected in the software supply chain",
    "start": "80240",
    "end": "86400"
  },
  {
    "text": "why are we talking about supply chains at all uh a software supply chain is in essence a",
    "start": "86400",
    "end": "94240"
  },
  {
    "start": "87000",
    "end": "87000"
  },
  {
    "text": "sequence of processes in place to promote promote the production of and distribution of an application",
    "start": "94240",
    "end": "100960"
  },
  {
    "text": "there have been a number of newborn newsworthy breaches manifested through supply",
    "start": "100960",
    "end": "106000"
  },
  {
    "text": "chains in recent months and years and you really can't mention supply chain attacks without mentioning the news stories surrounding them",
    "start": "106000",
    "end": "113360"
  },
  {
    "text": "in new stories like these they tend to attract the attention of organizations and make them ask the question",
    "start": "113360",
    "end": "119200"
  },
  {
    "text": "hey what if this happened to us and and what would be our response",
    "start": "119200",
    "end": "124880"
  },
  {
    "text": "packages or dependencies serve as a way for developers to add code to an application for typically a specific",
    "start": "125040",
    "end": "131200"
  },
  {
    "text": "purpose without them having to write every single line of code themselves for example",
    "start": "131200",
    "end": "136800"
  },
  {
    "text": "performing web requests and software is arguably a solved problem few developers",
    "start": "136800",
    "end": "141840"
  },
  {
    "text": "want to rewrite a web request module nor should they so developers would typically typically",
    "start": "141840",
    "end": "147920"
  },
  {
    "text": "pull in a package or a dependency that meets their requirements and install it with a package management tool so that",
    "start": "147920",
    "end": "153280"
  },
  {
    "text": "it can easily be leveraged by a team of developers during the software development life cycle",
    "start": "153280",
    "end": "160160"
  },
  {
    "text": "it's become really easy to pull in code pull in third-party dependencies and such but hard to verify the integrity",
    "start": "160160",
    "end": "167920"
  },
  {
    "text": "our ability to pull in software components has outgrown our ability to verify the changes over time",
    "start": "167920",
    "end": "175200"
  },
  {
    "text": "supply chains for for software can be extremely complex you have things like ci cd pipelines containers package",
    "start": "175200",
    "end": "181360"
  },
  {
    "text": "registries and the like with the rise of devops and devsecops and the like the tool chains to get",
    "start": "181360",
    "end": "188319"
  },
  {
    "text": "software from devs to users can get long and complicated we won't go into a lot of detail about",
    "start": "188319",
    "end": "194640"
  },
  {
    "text": "why supply chains are vulnerable in general there's a talk by adam shaw where he",
    "start": "194640",
    "end": "199760"
  },
  {
    "text": "does a deep dive into that specific topic and it's probably worth your time",
    "start": "199760",
    "end": "205440"
  },
  {
    "text": "but for now let's focus on one attack involving lock files and understand better what lock files are",
    "start": "205440",
    "end": "212480"
  },
  {
    "text": "it's important to point out that any of the components that we've pointed out here in the slide",
    "start": "212480",
    "end": "218239"
  },
  {
    "text": "can contain a lock file and therefore they can be subject to a supply chain attack",
    "start": "218239",
    "end": "224560"
  },
  {
    "start": "224000",
    "end": "224000"
  },
  {
    "text": "most programming languages and frameworks have a package management system incorporated into their accepted architecture",
    "start": "224560",
    "end": "230879"
  },
  {
    "text": "each works slightly differently but the general concept as to why they exist in the first place is the same to download",
    "start": "230879",
    "end": "236640"
  },
  {
    "text": "third-party apps into your application uh they each have a com in common a lock file to allow for some level of",
    "start": "236640",
    "end": "243200"
  },
  {
    "text": "consistency uh during the overall sdlc our premise is that there are",
    "start": "243200",
    "end": "248519"
  },
  {
    "text": "insufficiencies in how package managers verify these dependencies and we'll go over the elements of a lock",
    "start": "248519",
    "end": "254720"
  },
  {
    "text": "file tampering attack we'll cover some red team approaches you can use if you want to test your organizational controls around this type of attack",
    "start": "254720",
    "end": "261759"
  },
  {
    "text": "and we'll look at some custom offensive tooling to help help you find the right dependencies to target",
    "start": "261759",
    "end": "267600"
  },
  {
    "text": "from the attacker side and also tamper a lock file automatically if you want to do so",
    "start": "267600",
    "end": "273199"
  },
  {
    "text": "we're also going to look at some custom defensive tooling that'll help you defend a lock file tampering attack and",
    "start": "273199",
    "end": "279280"
  },
  {
    "text": "i'll turn over to dennis for a few examples of what lock files are and how they can be manipulated",
    "start": "279280",
    "end": "285680"
  },
  {
    "text": "thanks craig i will walk you through the defender side of log file template today",
    "start": "285680",
    "end": "290960"
  },
  {
    "start": "286000",
    "end": "286000"
  },
  {
    "text": "and the key message that i want to cross get across is that log files are sensitive any changes to log files need",
    "start": "290960",
    "end": "298000"
  },
  {
    "text": "to be carefully reviewed and we will also talk about some good practices for protecting lock for",
    "start": "298000",
    "end": "304960"
  },
  {
    "text": "integrity in your projects and also how we can raise the bar for",
    "start": "304960",
    "end": "310080"
  },
  {
    "text": "what a successful log-fire tempering attack could look like and as craig already mentioned i will",
    "start": "310080",
    "end": "316080"
  },
  {
    "text": "also have some defensive tooling that can automatically detect block fire tampering attempts",
    "start": "316080",
    "end": "323638"
  },
  {
    "text": "um but before we go into the details of what log files are we quickly introduce ourselves uh i'm dennis atwood i'm a",
    "start": "324000",
    "end": "330960"
  },
  {
    "text": "staff security engineer at gitlab working in security research and what i do is i help engineers write",
    "start": "330960",
    "end": "338000"
  },
  {
    "text": "secure software craig and i have worked with with several development teams",
    "start": "338000",
    "end": "343039"
  },
  {
    "text": "um and we want to share with you our our experience that we that we had creating",
    "start": "343039",
    "end": "348560"
  },
  {
    "text": "awareness for local temporary attacks and my name is greg johnson and i'm on",
    "start": "348560",
    "end": "354320"
  },
  {
    "text": "the red team at gitlab and so my job is to to break software systems and and help make them better",
    "start": "354320",
    "end": "361520"
  },
  {
    "text": "okay let's jump into explanation what log files are so when your package",
    "start": "361520",
    "end": "368000"
  },
  {
    "text": "manager is installing your application dependencies there is a certain ambiguity which version of a dependency",
    "start": "368000",
    "end": "375120"
  },
  {
    "text": "should be installed for example your application might depend on the latest version of a dependency",
    "start": "375120",
    "end": "381919"
  },
  {
    "text": "and what latest is resolving to really changes at different points",
    "start": "381919",
    "end": "388080"
  },
  {
    "text": "in time so latest is a moving target in other words and what this results in if you run your",
    "start": "388080",
    "end": "396000"
  },
  {
    "text": "package manager to install dependencies multiple times at different points in time you will have different",
    "start": "396000",
    "end": "401120"
  },
  {
    "text": "dependencies installed on your system and this leads to inconsistent application behavior",
    "start": "401120",
    "end": "408319"
  },
  {
    "text": "and what log files get you is consistency here so let's have a look at",
    "start": "408319",
    "end": "414560"
  },
  {
    "text": "how log files get you consistency",
    "start": "414560",
    "end": "419080"
  },
  {
    "text": "um so every time the package manager adds or updates a dependency uh it's",
    "start": "422720",
    "end": "429120"
  },
  {
    "text": "it's writing to the log file the exact url from where it pulled down the source code and the exact version that was",
    "start": "429120",
    "end": "437039"
  },
  {
    "text": "installed so that future installation runs can go back to",
    "start": "437039",
    "end": "442240"
  },
  {
    "text": "this information and download again the exact same version of the dependency",
    "start": "442240",
    "end": "448319"
  },
  {
    "text": "log files are checked into source control so that the future installation runs can",
    "start": "448319",
    "end": "453360"
  },
  {
    "text": "pull them down from source control and then work based off the log file and i really want to stress this point",
    "start": "453360",
    "end": "459599"
  },
  {
    "text": "that log files are version controlled because this is where lock file tampering comes in if an attacker",
    "start": "459599",
    "end": "465680"
  },
  {
    "text": "manages to to get a malicious modification to log files merged um then potentially attacker control",
    "start": "465680",
    "end": "471280"
  },
  {
    "text": "dependencies will be installed on future installation runs",
    "start": "471280",
    "end": "477160"
  },
  {
    "start": "478000",
    "end": "478000"
  },
  {
    "text": "so let's have a look um how a log file entry looks like before we",
    "start": "478160",
    "end": "483280"
  },
  {
    "text": "talk about how you can tamper these entries so let's assume you use the package manager yarn and you add a dependency",
    "start": "483280",
    "end": "490319"
  },
  {
    "text": "called calce to my app if you do that command then jan will",
    "start": "490319",
    "end": "496479"
  },
  {
    "text": "write the following entry to the log file let's go over the the single lines in this entry",
    "start": "496479",
    "end": "503280"
  },
  {
    "text": "the first line says for which dependency this entry is for so this is for cause a and then it",
    "start": "503280",
    "end": "509599"
  },
  {
    "text": "gives a semantic version range um that uh that the log file manager has to resolve that installation time",
    "start": "509599",
    "end": "516320"
  },
  {
    "text": "so not look for a manager to package manager as a result at installation time",
    "start": "516320",
    "end": "521518"
  },
  {
    "text": "in the next line the the package manager notes down which exact version the",
    "start": "521519",
    "end": "529120"
  },
  {
    "text": "previous semantic version was resolved to so in this case 1.5",
    "start": "529120",
    "end": "535399"
  },
  {
    "text": "the next line is the exact url that from which the source files of the",
    "start": "535839",
    "end": "541440"
  },
  {
    "text": "dependencies were downloaded and the next line is a checksum of the",
    "start": "541440",
    "end": "546480"
  },
  {
    "text": "files that have been downloaded from the previous ul for the purpose of integrity checks",
    "start": "546480",
    "end": "552880"
  },
  {
    "text": "and then the the next attribute here is about all the child dependencies of cal state but we don't need to go through",
    "start": "552880",
    "end": "558959"
  },
  {
    "text": "all these entries because they follow the same pattern",
    "start": "558959",
    "end": "563839"
  },
  {
    "text": "so now let's talk about log file tempering when you look at the the log file um",
    "start": "564320",
    "end": "569620"
  },
  {
    "text": "[Music] there's a message that that says something like this is an auto generated",
    "start": "569620",
    "end": "574880"
  },
  {
    "text": "file do not edit this file directly and",
    "start": "574880",
    "end": "580000"
  },
  {
    "text": "this creates the the impression amongst developers in my experience that",
    "start": "580000",
    "end": "585760"
  },
  {
    "text": "it's not possible to manually edit this file or young young would consider any manual edits to be invalid and would",
    "start": "585760",
    "end": "592560"
  },
  {
    "text": "reject them and not install from from such log file but as it turns out that's",
    "start": "592560",
    "end": "597760"
  },
  {
    "text": "not the case it's possible to manually edit the log file and yarn will still accept it as a log file as a valid log",
    "start": "597760",
    "end": "603519"
  },
  {
    "text": "file and install dependencies from it and this can be used for log file temporary",
    "start": "603519",
    "end": "610240"
  },
  {
    "text": "let's look at a introductory example of how log file tampering",
    "start": "610240",
    "end": "615360"
  },
  {
    "start": "612000",
    "end": "612000"
  },
  {
    "text": "can happen so here we have a um another log file entry uh it's for the",
    "start": "615360",
    "end": "621120"
  },
  {
    "text": "dependency dom purify um but if you pay close attention to the",
    "start": "621120",
    "end": "626640"
  },
  {
    "text": "resolved url from from where the source code for this dependency was downloaded from it says don't purify so",
    "start": "626640",
    "end": "634480"
  },
  {
    "text": "these two two letters here u and o have been twisted um and",
    "start": "634480",
    "end": "640720"
  },
  {
    "text": "so what this means that the sources of this other dependency here don't really need to to match with what is expected",
    "start": "640720",
    "end": "647360"
  },
  {
    "text": "when you would download uh dom purify um so an attacker could change the ul",
    "start": "647360",
    "end": "653680"
  },
  {
    "text": "like this and then he also would need to of course to upgrade the integrity hash to match the sources that i downloaded",
    "start": "653680",
    "end": "660000"
  },
  {
    "text": "from here um but if he if he does that and if his change would be accepted into the",
    "start": "660000",
    "end": "665920"
  },
  {
    "text": "version control system then um the future installations would um install",
    "start": "665920",
    "end": "671200"
  },
  {
    "text": "the attacker control dependency don't don't verify which might lead to arbitrary code execution",
    "start": "671200",
    "end": "678880"
  },
  {
    "text": "let's have a look at another example there are many many ways how log files can be tampered and i just want to give",
    "start": "679920",
    "end": "685839"
  },
  {
    "start": "680000",
    "end": "680000"
  },
  {
    "text": "you a brief idea of what's possible so here in this example",
    "start": "685839",
    "end": "691519"
  },
  {
    "text": "certain attributes in the log file entry are repeated here resolved and integrity",
    "start": "691519",
    "end": "696640"
  },
  {
    "text": "appears twice and just by looking at that log file entry it's difficult to tell what what",
    "start": "696640",
    "end": "702959"
  },
  {
    "text": "yarn would do when when is processing this entry as it turns out",
    "start": "702959",
    "end": "709279"
  },
  {
    "text": "if there are multiple entries yarn is using the latest the last occurrence of an entry",
    "start": "709279",
    "end": "715920"
  },
  {
    "text": "and here again it would resolve the dependency don't purify to to purify as",
    "start": "715920",
    "end": "722160"
  },
  {
    "text": "and not the intended dom purifying so here's another example of how",
    "start": "722160",
    "end": "727760"
  },
  {
    "start": "725000",
    "end": "725000"
  },
  {
    "text": "log fire tampering could happen in this example the integrity attribute is removed",
    "start": "727760",
    "end": "734000"
  },
  {
    "text": "altogether and interestingly jan is not rejecting this",
    "start": "734000",
    "end": "739279"
  },
  {
    "text": "entry it's still downloading the sources and it will simply skip the integrity check",
    "start": "739279",
    "end": "745120"
  },
  {
    "text": "so even if a malicious log file gets introduced that is uh not",
    "start": "745120",
    "end": "750959"
  },
  {
    "text": "having an integrity hash that is opening up other interesting attack vectors where instead of tampering the the path",
    "start": "750959",
    "end": "758399"
  },
  {
    "text": "of the resolved url we could tamper the the host of the resolved ul and",
    "start": "758399",
    "end": "764160"
  },
  {
    "text": "essentially proxy the uh the request to download the",
    "start": "764160",
    "end": "769519"
  },
  {
    "text": "dependency and since the integrity hash is missing jan would not realize that",
    "start": "769519",
    "end": "775120"
  },
  {
    "text": "the the files have been changed",
    "start": "775120",
    "end": "779200"
  },
  {
    "text": "and this is also not only specific to yarn version one so all the examples that i showed you so far",
    "start": "781920",
    "end": "787120"
  },
  {
    "text": "was for yarn version one in the latest version of yarn the same basic uh",
    "start": "787120",
    "end": "792560"
  },
  {
    "text": "problem still exists there are a couple of improvements how log faults are handled but essentially it's still",
    "start": "792560",
    "end": "798480"
  },
  {
    "text": "possible to to to change the resolution to a different dependency",
    "start": "798480",
    "end": "805279"
  },
  {
    "text": "same for npm v7 and the log file entry here looks",
    "start": "805279",
    "end": "811519"
  },
  {
    "text": "a little bit different than what we have seen before but it's all very similar and here again you you can see that the",
    "start": "811519",
    "end": "817519"
  },
  {
    "text": "dependency dom purify is resolved to do parify and npm will also install that without",
    "start": "817519",
    "end": "824480"
  },
  {
    "text": "complaint and completely different ecosystem",
    "start": "824480",
    "end": "829760"
  },
  {
    "text": "ruby bundler um so this is for installing gems here is an example of installing",
    "start": "829760",
    "end": "836160"
  },
  {
    "text": "rails and with bundler it it doesn't store the ul exactly where",
    "start": "836160",
    "end": "843680"
  },
  {
    "text": "the the source files have been downloaded for from for dependency um",
    "start": "843680",
    "end": "849040"
  },
  {
    "text": "but what you can do is you can add additional dependencies that actually do",
    "start": "849040",
    "end": "855839"
  },
  {
    "text": "not belong belong in there and banta will still install them like here in this example",
    "start": "855839",
    "end": "861519"
  },
  {
    "text": "um all the usual dependencies that belong in here for rails are here and in addition also cause here because",
    "start": "861519",
    "end": "869839"
  },
  {
    "text": "it doesn't belong there but bundler would still install it if he would install from this",
    "start": "869839",
    "end": "875199"
  },
  {
    "text": "block file so now that we've talked a little bit",
    "start": "875199",
    "end": "881199"
  },
  {
    "start": "878000",
    "end": "878000"
  },
  {
    "text": "about how log file jumping is happening i hand it back over to craig who will talk a bit",
    "start": "881199",
    "end": "887279"
  },
  {
    "text": "more about the attacker perspective yes so the attacker's perspective of a",
    "start": "887279",
    "end": "892560"
  },
  {
    "text": "lock file tampering attack is fairly straightforward the goal is to is as quietly as possible",
    "start": "892560",
    "end": "899040"
  },
  {
    "text": "inject an attacker control dependency in this supply chain without breaking the functionality if possible",
    "start": "899040",
    "end": "905120"
  },
  {
    "text": "meaning there's a need to fully understand the software stack the architecture and build systems that make a target application work some package",
    "start": "905120",
    "end": "912639"
  },
  {
    "text": "managers have the concept of developer dependencies and production dependencies and",
    "start": "912639",
    "end": "917839"
  },
  {
    "text": "this is important depending on what your target is so developer dependencies support the development of the application as you",
    "start": "917839",
    "end": "924000"
  },
  {
    "text": "would expect from the name they're typically they typically sit on ci servers and",
    "start": "924000",
    "end": "930320"
  },
  {
    "text": "developer machines but don't get deployed to the final production server",
    "start": "930320",
    "end": "937120"
  },
  {
    "text": "developer machines typically have some sensitive key material passwords or information",
    "start": "937920",
    "end": "943440"
  },
  {
    "text": "we as an attacker might be interested interested in look at how an application is configured",
    "start": "943440",
    "end": "949199"
  },
  {
    "text": "to download its dependencies to better understand which type of dependencies you may want to tamper",
    "start": "949199",
    "end": "955680"
  },
  {
    "text": "regardless of the target you're after the goal is typically to gain access to information in order to pivot or",
    "start": "955680",
    "end": "960720"
  },
  {
    "text": "escalate privileges in other words tampering the lock file is probably not going to be the final",
    "start": "960720",
    "end": "966240"
  },
  {
    "text": "stop for a live attack best practices and saw in the software industry as dennis",
    "start": "966240",
    "end": "972320"
  },
  {
    "text": "has already mentioned suggest that lock files should be committed to an scm repository",
    "start": "972320",
    "end": "978240"
  },
  {
    "text": "so in essence your attack is going to be somewhat visible that is if someone looks at it which isn't very common for",
    "start": "978240",
    "end": "984639"
  },
  {
    "text": "lock files as we'll see in a minute lock files aren't very readable and developers tend",
    "start": "984639",
    "end": "990079"
  },
  {
    "text": "to trust a machine generated file which isn't unreasonable but your job as an attacker is to make",
    "start": "990079",
    "end": "997120"
  },
  {
    "text": "the lock file change look legitimate and incorporate it into a beneficial change",
    "start": "997120",
    "end": "1002399"
  },
  {
    "text": "both gitlab and github hide the lock file changes on their diff tab in some way the change set for even a minor version",
    "start": "1002399",
    "end": "1009199"
  },
  {
    "text": "bump on a single dependency can be quite large and payloads for this type of attack can",
    "start": "1009199",
    "end": "1014800"
  },
  {
    "text": "vary based on the goal of the attacker typically you'll see some code added to a hooked event that gets raised during",
    "start": "1014800",
    "end": "1021360"
  },
  {
    "text": "the installation process but that's by no means the limit with regard to node specifically the event",
    "start": "1021360",
    "end": "1028079"
  },
  {
    "text": "hooks available have changed a bit over time but these changes really have little",
    "start": "1028079",
    "end": "1033280"
  },
  {
    "text": "impact on an attacker's ability to compromise a system with a lock file tampering attack",
    "start": "1033280",
    "end": "1039839"
  },
  {
    "text": "we'll cover some red teaming aspects of this type of attack specifically as lock files are components and software",
    "start": "1041439",
    "end": "1046959"
  },
  {
    "text": "architectures many software systems these days are polymorphic and then though the main",
    "start": "1046959",
    "end": "1052240"
  },
  {
    "text": "application may be in golang or c sharp lock files may exist and for node.js in the same ecosystem",
    "start": "1052240",
    "end": "1060320"
  },
  {
    "text": "to enable build and deployment features red teaming you'll obviously have some",
    "start": "1060320",
    "end": "1066080"
  },
  {
    "text": "limitations around the sort of payloads you can logically deploy during the exercise",
    "start": "1066080",
    "end": "1071200"
  },
  {
    "text": "know your audience and understand what you will need to need to show impact for most reaching out to an external",
    "start": "1071200",
    "end": "1077440"
  },
  {
    "text": "server with with something like a random hash value for example will be enough to demonstrate impact",
    "start": "1077440",
    "end": "1083440"
  },
  {
    "text": "maybe writing a text file to a specific place on your target system to show potential for arbitrary code",
    "start": "1083440",
    "end": "1090080"
  },
  {
    "text": "execution is also good we'll show an example of that in just a minute your mileage may vary though so",
    "start": "1090080",
    "end": "1097200"
  },
  {
    "text": "this is probably one of the more critical aspects to consider if you're going to red team with this type of attack",
    "start": "1097200",
    "end": "1104240"
  },
  {
    "text": "i've included in this slide some information on relative relevant ttps in the mitre attack framework",
    "start": "1104320",
    "end": "1112799"
  },
  {
    "start": "1113000",
    "end": "1113000"
  },
  {
    "text": "there are a lot of ways for a lock file tampering attack to happen it all depends on your target and if red",
    "start": "1114000",
    "end": "1119600"
  },
  {
    "text": "teaming your organization's tolerance for more ambitious attacks exampled in the miter attack framework ttps from the",
    "start": "1119600",
    "end": "1126400"
  },
  {
    "text": "previous slide something more real world where lock file tampering um isn't uh",
    "start": "1126400",
    "end": "1133039"
  },
  {
    "text": "the final stop in the attack chain attackers are also looking for opportunities to reduce the footprint",
    "start": "1133039",
    "end": "1139440"
  },
  {
    "text": "during injection the most subtle footprint of all regardless of lock files",
    "start": "1139440",
    "end": "1144640"
  },
  {
    "text": "is an upstream dependency tamper it simply takes a downstream upgrade to",
    "start": "1144640",
    "end": "1149840"
  },
  {
    "text": "compromise the systems if during the review process or viewer discs or changes the attacker will be",
    "start": "1149840",
    "end": "1156400"
  },
  {
    "text": "the attack will be in plain sight but hopefully very difficult to detect",
    "start": "1156400",
    "end": "1162080"
  },
  {
    "text": "the first step in general is to publish a convent a convincing package",
    "start": "1162080",
    "end": "1167280"
  },
  {
    "text": "on a package management system um there are a lot of details to look for",
    "start": "1167280",
    "end": "1173360"
  },
  {
    "text": "author the number of versions released download count naming publish dates all",
    "start": "1173360",
    "end": "1178960"
  },
  {
    "text": "of which are typically displayed on a web page related to your dependency",
    "start": "1178960",
    "end": "1184480"
  },
  {
    "text": "your malicious dependency download counts are simply a function of guitar file download or package manager",
    "start": "1184480",
    "end": "1191360"
  },
  {
    "text": "installs they can be bash corrupted to get a closer account and most the critical data fields can be",
    "start": "1191360",
    "end": "1197039"
  },
  {
    "text": "manipulated in some way so keep that in mind so i want to demo for you a tool called",
    "start": "1197039",
    "end": "1203840"
  },
  {
    "start": "1201000",
    "end": "1201000"
  },
  {
    "text": "bump key it's an offensive tool to speed up the research process while looking for lock file attack vectors",
    "start": "1203840",
    "end": "1210159"
  },
  {
    "text": "and to automate the process of tampering the lock file directly to make it more approachable and less prone to human",
    "start": "1210159",
    "end": "1216159"
  },
  {
    "text": "error so now we'll jump into uh",
    "start": "1216159",
    "end": "1221760"
  },
  {
    "text": "bum key and take a look at its functionality okay so before we dive directly into",
    "start": "1221760",
    "end": "1227760"
  },
  {
    "text": "bumpkey i want to show you an example of a typical open source application",
    "start": "1227760",
    "end": "1234559"
  },
  {
    "text": "in this case facebook's react and we'll take a quick look at the package json just to see what that looks like",
    "start": "1234559",
    "end": "1241120"
  },
  {
    "text": "and here we see we have lots of scripts involved and lots of developer dependencies",
    "start": "1241120",
    "end": "1247520"
  },
  {
    "text": "involved if we just take a quick look at the the length of the lock file itself",
    "start": "1247520",
    "end": "1254799"
  },
  {
    "text": "we can see it's 16 000 lines long which is going to be pretty hard to",
    "start": "1254799",
    "end": "1261120"
  },
  {
    "text": "review end-to-end for any developer so what i'll do now is take bumpkey and",
    "start": "1261120",
    "end": "1266880"
  },
  {
    "text": "do a little recon on the react project to figure out what what specific dependencies are out of",
    "start": "1266880",
    "end": "1273840"
  },
  {
    "text": "date within that project and some specific details that will help us as an attacker make a decision on which",
    "start": "1273840",
    "end": "1280880"
  },
  {
    "text": "uh on which dependency to tamper so let's take a look at eslant",
    "start": "1280880",
    "end": "1286799"
  },
  {
    "text": "what's specified in the package.json is 770. what's wanted",
    "start": "1286799",
    "end": "1292320"
  },
  {
    "text": "what's actually downloaded by the package lock file is 732 and the latest version is 8.0 so they're",
    "start": "1292320",
    "end": "1299840"
  },
  {
    "text": "full major version behind and we get some other helpful details like the url where the project's located",
    "start": "1299840",
    "end": "1306159"
  },
  {
    "text": "where you can find bugs and dependency counts so this one has uh quite a bit of both dev and",
    "start": "1306159",
    "end": "1312480"
  },
  {
    "text": "uh production dependencies so the idea there is um the more dependencies that a",
    "start": "1312480",
    "end": "1320640"
  },
  {
    "text": "package has the more surface area there might be for an attack you don't necessarily have to tamper a top-level",
    "start": "1320640",
    "end": "1326880"
  },
  {
    "text": "dependency you can tamper a dependency of a dependency for example",
    "start": "1326880",
    "end": "1333840"
  },
  {
    "text": "and here we see we've got we've ignored 68 up to date dependencies",
    "start": "1334559",
    "end": "1340240"
  },
  {
    "text": "so for this next example i'm using the latest lts version of node um",
    "start": "1340240",
    "end": "1347679"
  },
  {
    "text": "as i mentioned earlier some of the hook scripts that are available in node have changed over time",
    "start": "1347679",
    "end": "1353840"
  },
  {
    "text": "it doesn't really impact the ability to do a deluxe field block file tampering attack but i just wanted to show what",
    "start": "1353840",
    "end": "1359120"
  },
  {
    "text": "version i'm using here and next we're just going to take a look at a fake application",
    "start": "1359120",
    "end": "1365679"
  },
  {
    "text": "to demo what a lock file tampering attack might look like and this one's pretty simple it pulls in",
    "start": "1365679",
    "end": "1372159"
  },
  {
    "text": "a single dependency dom purify",
    "start": "1372159",
    "end": "1377440"
  },
  {
    "text": "and it's simple enough where we can take a look at the package like json in full and and grok what's going on",
    "start": "1378240",
    "end": "1384400"
  },
  {
    "text": "so here we see our dom purified dependency it's requesting 233 and we have defined our resolved",
    "start": "1384400",
    "end": "1391440"
  },
  {
    "text": "uh url and and integrity hash both of which are valid",
    "start": "1391440",
    "end": "1397679"
  },
  {
    "text": "so right now we have a clean git status history",
    "start": "1398559",
    "end": "1403280"
  },
  {
    "text": "we have no dependencies installed and what our malicious dependency will",
    "start": "1404480",
    "end": "1411679"
  },
  {
    "text": "do in just a moment is write a file to temp lol",
    "start": "1411679",
    "end": "1417600"
  },
  {
    "text": "just to show the propensity for arbitrary code execution",
    "start": "1417600",
    "end": "1423039"
  },
  {
    "text": "so now what i'm going to do with bumpkey is actually tamper the lock file in our fake application and re replace",
    "start": "1428880",
    "end": "1437200"
  },
  {
    "text": "the dom purify package name by package name",
    "start": "1437200",
    "end": "1443360"
  },
  {
    "text": "and replace that with our quote-unquote malicious dependency",
    "start": "1443360",
    "end": "1448559"
  },
  {
    "text": "in this case uh doneporify notice the spelling difference",
    "start": "1448559",
    "end": "1454720"
  },
  {
    "text": "and if we let that run we'll notice that we've got some diff changes introduced to the",
    "start": "1454720",
    "end": "1460400"
  },
  {
    "text": "package lock file and if we diff those changes we can quickly see that the resolved url",
    "start": "1460400",
    "end": "1466799"
  },
  {
    "text": "and the integrity hash have changed",
    "start": "1466799",
    "end": "1471000"
  },
  {
    "text": "and if i install the dependencies and cut out that file that we expect to see",
    "start": "1472960",
    "end": "1478799"
  },
  {
    "text": "we can see that it's been written to exemplify some arbitrary code execution as an example",
    "start": "1478799",
    "end": "1487279"
  },
  {
    "text": "so now that that greg walked us through the bunkie tooling um we'll have a closer look at the defender",
    "start": "1487279",
    "end": "1494159"
  },
  {
    "text": "side of log file tampering so how can you defend your projects from log file tampering",
    "start": "1494159",
    "end": "1500799"
  },
  {
    "text": "and the key message that i want to get across is that log files are sensitive and all changes to them need to be reviewed carefully",
    "start": "1500799",
    "end": "1509679"
  },
  {
    "text": "now that we have talked about log file jump ring and introduce how it works it might be obvious that this is the case",
    "start": "1510080",
    "end": "1515679"
  },
  {
    "text": "but in our experience when we talk to developers they were really surprised to to see that a lot of tempering is",
    "start": "1515679",
    "end": "1521679"
  },
  {
    "text": "possible at all they thought somehow package managers would verify the integrity of the log file",
    "start": "1521679",
    "end": "1528880"
  },
  {
    "text": "but that's not the case so how can you protect log file",
    "start": "1528880",
    "end": "1534799"
  },
  {
    "text": "integrity in your projects first you should familiarize yourself how your",
    "start": "1534799",
    "end": "1542000"
  },
  {
    "text": "sem solution display log file divs sometimes it's necessary to take manual",
    "start": "1542000",
    "end": "1547279"
  },
  {
    "text": "action to see actually the div here is an example of how it looks in gitlab",
    "start": "1547279",
    "end": "1553120"
  },
  {
    "start": "1549000",
    "end": "1549000"
  },
  {
    "text": "this is a merge request that is changing the yarn",
    "start": "1553120",
    "end": "1558400"
  },
  {
    "text": "lock file and uh because there are too many uh lines that that have been",
    "start": "1558400",
    "end": "1563760"
  },
  {
    "text": "updated in this merge request the file is not shown um so you need to click on view file to",
    "start": "1563760",
    "end": "1571360"
  },
  {
    "text": "actually see the changes before you inspect log files on your local computer you should make sure that",
    "start": "1571360",
    "end": "1578400"
  },
  {
    "text": "the content of the log file is okay especially you should not install from the log file on your",
    "start": "1578400",
    "end": "1584640"
  },
  {
    "text": "computer without having inspected the file because if it's actually tempered at the time of",
    "start": "1584640",
    "end": "1590480"
  },
  {
    "text": "installation it's already might be too late",
    "start": "1590480",
    "end": "1594799"
  },
  {
    "text": "another way to raise the bar of what the successful log file tempering",
    "start": "1596000",
    "end": "1601600"
  },
  {
    "text": "attack could look like is to use automated dependency updates um",
    "start": "1601600",
    "end": "1606640"
  },
  {
    "text": "if you if you stop accepting trivial contributions that just for example bump the",
    "start": "1606640",
    "end": "1612400"
  },
  {
    "text": "dependency version um you make it more harder for an attacker to put together a",
    "start": "1612400",
    "end": "1617520"
  },
  {
    "text": "convincing contribution that is containing workflow tampering and there are very various bots that can",
    "start": "1617520",
    "end": "1624159"
  },
  {
    "text": "help you with automating log file updates so this just",
    "start": "1624159",
    "end": "1629520"
  },
  {
    "text": "reduces a very low effort attack vector for the attacker",
    "start": "1629520",
    "end": "1634559"
  },
  {
    "start": "1634000",
    "end": "1634000"
  },
  {
    "text": "and here's an example how an automated dependency merge requests might look like this has been created by a renovate",
    "start": "1634880",
    "end": "1641360"
  },
  {
    "text": "bot just make sure that if you use this that it cannot easily be",
    "start": "1641360",
    "end": "1647840"
  },
  {
    "text": "impersonated by an attacker by just copying the layout of the merge request",
    "start": "1647840",
    "end": "1655480"
  },
  {
    "text": "and also when you evaluate which dependencies to use you might want to pay attention to how",
    "start": "1658640",
    "end": "1666159"
  },
  {
    "text": "dependencies are reviewing log file changes because as craig mentioned um the dependencies that in the supply",
    "start": "1666159",
    "end": "1672720"
  },
  {
    "text": "chain could also fall victim to log file tempering",
    "start": "1672720",
    "end": "1677200"
  },
  {
    "text": "um now let's have a quick look at the demo for how to for how to automatically check",
    "start": "1678159",
    "end": "1685360"
  },
  {
    "text": "the integrity of log files so this is the demo of antenna by my",
    "start": "1685360",
    "end": "1691279"
  },
  {
    "text": "logo file [Music] and as i mentioned it's here the counterpart to bump key",
    "start": "1691279",
    "end": "1697200"
  },
  {
    "text": "the demo picks up essentially where correct demo craigs demo ended we have a template log",
    "start": "1697200",
    "end": "1702799"
  },
  {
    "text": "file and i already installed the dependencies from that log file and just to to show",
    "start": "1702799",
    "end": "1709200"
  },
  {
    "text": "you that um it actually worked so here you can see uh the the",
    "start": "1709200",
    "end": "1714960"
  },
  {
    "text": "file was written to temp um now let's see if we uh instead use our",
    "start": "1714960",
    "end": "1720559"
  },
  {
    "text": "defensive tooling on that log file to check the integrity so how that works is you you call the",
    "start": "1720559",
    "end": "1727360"
  },
  {
    "text": "tool like this you pass in the log file that you want to check and then the tool goes through each dependency in your log",
    "start": "1727360",
    "end": "1734080"
  },
  {
    "text": "file and it checks that the metadata that is recorded in the log file matches with what is stored in the registry",
    "start": "1734080",
    "end": "1741919"
  },
  {
    "text": "and if there is any mismatch between the data in the log file in the",
    "start": "1741919",
    "end": "1747039"
  },
  {
    "text": "registry it will report an error and here as we would expect it reports an error for dom purify because the",
    "start": "1747039",
    "end": "1753279"
  },
  {
    "text": "integrity hash and the resolved url don't match",
    "start": "1753279",
    "end": "1758240"
  },
  {
    "text": "i'd recommend to to run the tool in a ci job and let it run every time",
    "start": "1759039",
    "end": "1765120"
  },
  {
    "text": "there are changes checked or submitted to to your project",
    "start": "1765120",
    "end": "1770320"
  },
  {
    "text": "um so it will automatically fail pipelines if log file tampering is detected here's an example for gitlab ci",
    "start": "1770320",
    "end": "1776960"
  },
  {
    "text": "you can just copy and paste that into your ci config and then if actually the the tool uh that puts an",
    "start": "1776960",
    "end": "1784399"
  },
  {
    "text": "error you see the pipeline is failing and this should create enough noise for you to",
    "start": "1784399",
    "end": "1790559"
  },
  {
    "text": "figure out that there's a lot for a temporary attack going on yes and uh for closing words uh just a",
    "start": "1790559",
    "end": "1797360"
  },
  {
    "start": "1795000",
    "end": "1795000"
  },
  {
    "text": "couple of things that i want to mention um both dennis's tool untampering my lock file and uh bumpkey",
    "start": "1797360",
    "end": "1804399"
  },
  {
    "text": "are open source and we welcome contributions from a red teaming perspective there's just a couple of",
    "start": "1804399",
    "end": "1810320"
  },
  {
    "text": "closing points that i want to mention um leadership communication and",
    "start": "1810320",
    "end": "1815520"
  },
  {
    "text": "careful control thereof is is probably one of the more important aspects if you plan to red team this time type of",
    "start": "1815520",
    "end": "1821200"
  },
  {
    "text": "attack keep the goal in mind which is to to test the controls and make them better",
    "start": "1821200",
    "end": "1827520"
  },
  {
    "text": "whether you're you're focused on the defensive side or the offensive side",
    "start": "1827520",
    "end": "1834799"
  },
  {
    "text": "be aware that there can be some social aspects um in relation to this type of attack",
    "start": "1835120",
    "end": "1840480"
  },
  {
    "text": "uh reviewers will likely want to talk to you about your changes be able to speak to them and and justify",
    "start": "1840480",
    "end": "1846559"
  },
  {
    "text": "them uh and there can be an element of uh social engineering in tandem with",
    "start": "1846559",
    "end": "1852480"
  },
  {
    "text": "this type of attack so that's something to be aware of as well um in closing thank you for listening",
    "start": "1852480",
    "end": "1858399"
  },
  {
    "text": "and uh we we welcome your contributions [Music]",
    "start": "1858399",
    "end": "1871420"
  },
  {
    "text": "you",
    "start": "1873440",
    "end": "1875518"
  }
]