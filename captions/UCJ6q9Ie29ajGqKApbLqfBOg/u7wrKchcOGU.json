[
  {
    "text": "so thank you very much for for coming and I see there are still people coming in but so we're gonna get our",
    "start": "30",
    "end": "7379"
  },
  {
    "text": "presentation started No so I'll talk today is called client-side protection against dom-based xss done right",
    "start": "7379",
    "end": "13759"
  },
  {
    "text": "obviously this is yeah kind of making a little bit of fun of ourselves here so",
    "start": "13759",
    "end": "19320"
  },
  {
    "text": "who's us actually so my name is ben together with me today is my colleague sebastian and we are an of PhD students",
    "start": "19320",
    "end": "27330"
  },
  {
    "text": "at the University in Erlangen and go home respectively in Germany and this is today joint work with our colleague",
    "start": "27330",
    "end": "33149"
  },
  {
    "text": "Martin from ACP who couldn't make it here so it's just the two of us today in",
    "start": "33149",
    "end": "38940"
  },
  {
    "text": "this talk we're gonna talk to you a little bit about a practical evaluation of current the world the current",
    "start": "38940",
    "end": "45059"
  },
  {
    "text": "generation of client-side cross-site scripting filters to be more precise the Chrome XSS auditor and in doing so in",
    "start": "45059",
    "end": "52289"
  },
  {
    "text": "our work we found that the excess auditor is not really capable of protecting us against the client-side so",
    "start": "52289",
    "end": "58440"
  },
  {
    "text": "really client-side XSS which I'm going to talk about a little bit in the beginning of the talk and so we found a",
    "start": "58440",
    "end": "64290"
  },
  {
    "text": "number of hypotheses and based on these bypasses we said hey there needs to be a better solution to do this so this is",
    "start": "64290",
    "end": "70650"
  },
  {
    "text": "something that we would present afterwards and so before we start this",
    "start": "70650",
    "end": "76020"
  },
  {
    "text": "is something that we got from from Steve from from blackhat hiddens for speaker",
    "start": "76020",
    "end": "82020"
  },
  {
    "text": "so good speakers capture the audience and so on and so forth first 30 seconds with substance quality content coming",
    "start": "82020",
    "end": "87630"
  },
  {
    "text": "certainly we have to start with some technical background so I'm gonna try and start cute here hope this is visible",
    "start": "87630",
    "end": "93240"
  },
  {
    "text": "actually it's not so it's a cat picture sorry I it's a some problems with the with the projector yeah okay so let's",
    "start": "93240",
    "end": "100590"
  },
  {
    "text": "start with some technical background well cross-site scripting so before we can talk about cross-site scripting let's first we'll talk briefly about the",
    "start": "100590",
    "end": "107490"
  },
  {
    "text": "question if I am a tech org and I kind of open an iframe for example and frame",
    "start": "107490",
    "end": "112710"
  },
  {
    "text": "mail.google.com why is it not possible for me to interact with this site right because that would be very easy for me",
    "start": "112710",
    "end": "119189"
  },
  {
    "text": "to kind of extract all your emails and the answer is the so-called same origin policy which basically is a policy that",
    "start": "119189",
    "end": "125280"
  },
  {
    "text": "will enforce this application boundaries on based on an origin and an origin in this case is the",
    "start": "125280",
    "end": "131459"
  },
  {
    "text": "combination of the protocol the domain and the port and obviously a tacher org",
    "start": "131459",
    "end": "136530"
  },
  {
    "text": "has a different domain then then gmail.com or mail.google.com so we can",
    "start": "136530",
    "end": "141750"
  },
  {
    "text": "actually execute our own code and kind of script into that this means that the attackers code runs in a different",
    "start": "141750",
    "end": "147870"
  },
  {
    "text": "origin so since we're at blackhat this is hacking conference we want to know how we can actually bypass that right so",
    "start": "147870",
    "end": "156269"
  },
  {
    "text": "how can we bypass the same origin policy we have to take a look at what web applications or applications that such",
    "start": "156269",
    "end": "161790"
  },
  {
    "text": "typically do so they process data right it wouldn't make sense if you just had a static website that that didn't do",
    "start": "161790",
    "end": "167370"
  },
  {
    "text": "anything you have some interaction with the user so the user provides it with some data say for example the URL of",
    "start": "167370",
    "end": "173190"
  },
  {
    "text": "some piece of data or some some input that Priebe provides to you and this data may be for example stored if you",
    "start": "173190",
    "end": "178799"
  },
  {
    "text": "think of a guestbook or something or it might be echoed back directly to you think of a search page for example we",
    "start": "178799",
    "end": "183870"
  },
  {
    "text": "see hey you searched for XYZ and this is something that you provided earlier on and if we look at this piece of let's",
    "start": "183870",
    "end": "189840"
  },
  {
    "text": "call it data this is actually well something that these are may post as data if this is not properly kind of",
    "start": "189840",
    "end": "195780"
  },
  {
    "text": "encoded on the server side or filtered on the server side this actually ends up being interpreted as HTML code right so",
    "start": "195780",
    "end": "200850"
  },
  {
    "text": "this is a script tag that allows me to open an alert box and what's very",
    "start": "200850",
    "end": "205859"
  },
  {
    "text": "important to understand in in terms of XSS is that I'm not trying to exploit the server side but rather this code",
    "start": "205859",
    "end": "212130"
  },
  {
    "text": "that I can inject here is executed in my victim's browser in the context of the",
    "start": "212130",
    "end": "217260"
  },
  {
    "text": "origin or of the other vulnerable application that means I actually run my own code runs in your identity on",
    "start": "217260",
    "end": "225060"
  },
  {
    "text": "mail.google.com and yeah basically this is why it's called cross-site scripting because as",
    "start": "225060",
    "end": "231450"
  },
  {
    "text": "an attacker I can kind of cross script into a different different site here so",
    "start": "231450",
    "end": "236750"
  },
  {
    "text": "what can an attacker do with cross-site scripting well he can open an alert box and you will typically see this quite",
    "start": "236750",
    "end": "242549"
  },
  {
    "text": "often and select Wow an alert box that is super awesome but actually this is",
    "start": "242549",
    "end": "248099"
  },
  {
    "text": "just a proof of concept a lot opening in alert box is basically arbitrary JavaScript execution that you can do so",
    "start": "248099",
    "end": "254160"
  },
  {
    "text": "what can we do with this well obviously we can do things like hijack a session so you can steal a cookie for example",
    "start": "254160",
    "end": "259440"
  },
  {
    "text": "but so modern web applications kind of secure secured against that but you can control the victims browser",
    "start": "259440",
    "end": "265800"
  },
  {
    "text": "for example Twitter I could not post something on Twitter in your names like hey this is a crappy talk let's go",
    "start": "265800",
    "end": "272040"
  },
  {
    "text": "somewhere else what we can also do is we can alter the content of that site there was actually a very famous example of",
    "start": "272040",
    "end": "277800"
  },
  {
    "text": "the German Chancellor's website where somebody found an excess vulnerability and then kind of posted there that the",
    "start": "277800",
    "end": "284490"
  },
  {
    "text": "Chancellor had resigned for some weird reasons and I think even newspapers picked up on that because the text was",
    "start": "284490",
    "end": "289530"
  },
  {
    "text": "on a Bundesliga N'Diaye which is yeah the German government's official website",
    "start": "289530",
    "end": "295919"
  },
  {
    "text": "and yeah and also something that people do not necessarily think about you can",
    "start": "295919",
    "end": "302070"
  },
  {
    "text": "use that to steal password managers passwords we did a talk at blackhat Europe if you want to check that out",
    "start": "302070",
    "end": "308130"
  },
  {
    "text": "that's a pretty interesting work I think so to summarize as an XSS attacker I can",
    "start": "308130",
    "end": "313440"
  },
  {
    "text": "do everything with the web application but under you our idea of this is locked in user and if we think about XSS there",
    "start": "313440",
    "end": "321720"
  },
  {
    "text": "are actually two dimensions in which we can categorize cross-site scripting so there is server-side cross-site scripting which means there's",
    "start": "321720",
    "end": "327210"
  },
  {
    "text": "server-side code involved that is vulnerable and there is client-side cross-site scripting meaning that well obviously it's client-side code that is",
    "start": "327210",
    "end": "333750"
  },
  {
    "text": "that is vulnerable here and then we have reflected and stored XSS I think most of you will probably probably know this in",
    "start": "333750",
    "end": "340830"
  },
  {
    "text": "this talk we're going to focus mostly on client-side XSS so let's not talk about the server side you do let's do talk",
    "start": "340830",
    "end": "347910"
  },
  {
    "text": "about dom-based or client-side XSS this means basically we have flaws in",
    "start": "347910",
    "end": "353160"
  },
  {
    "text": "client-side code that well allow us to well inject our own payload and to kind",
    "start": "353160",
    "end": "359400"
  },
  {
    "text": "of look at this in an abstract way we have some data that is coming from an attacker controllable source if you look",
    "start": "359400",
    "end": "365220"
  },
  {
    "text": "at this small example up here this would be the location hash slice 1 which means basically everything that is behind the",
    "start": "365220",
    "end": "370229"
  },
  {
    "text": "hash tag in the URL this kind of this piece of data flows through the application and at some point it enters",
    "start": "370229",
    "end": "376560"
  },
  {
    "text": "a security sensitive sync document right right this allows you to write HTML through the DOM and in order to well",
    "start": "376560",
    "end": "385590"
  },
  {
    "text": "kind of so if let me go back if I rather than having kind of my own name my name",
    "start": "385590",
    "end": "390870"
  },
  {
    "text": "would be again script alert alert 1 then this would actually right hello then the script Erica Lord",
    "start": "390870",
    "end": "397310"
  },
  {
    "text": "won and would open the alert box and in order to find this kind of cross-site scripting there are two ways of",
    "start": "397310",
    "end": "403220"
  },
  {
    "text": "approaching this one is dynamic analysis using basically time tracking again this is like a data flow so this sounds a lot",
    "start": "403220",
    "end": "409370"
  },
  {
    "text": "like team tracking there's a commercial product called Dominator which basically does this in Firefox in previous",
    "start": "409370",
    "end": "415880"
  },
  {
    "text": "research we developed a tool that doesn't have a name we should actually fix that which allows us to also also",
    "start": "415880",
    "end": "421730"
  },
  {
    "text": "automatically generate exploits so rather than just throwing hey there is a flow of data we can actually generate an",
    "start": "421730",
    "end": "426830"
  },
  {
    "text": "exploit exactly for that for that flow and validate whether that's actually vulnerability or not I presume there are",
    "start": "426830",
    "end": "433280"
  },
  {
    "text": "also ways to do of doing this statically but to be honest I have no idea how the static analysis of JavaScript would work",
    "start": "433280",
    "end": "439070"
  },
  {
    "text": "so we're gonna skip that so how can we know that we know what XSS is how can we",
    "start": "439070",
    "end": "445580"
  },
  {
    "text": "stop XSS attacks as an application owner or developer you can go ahead and well",
    "start": "445580",
    "end": "451220"
  },
  {
    "text": "do not use user provided so basically don't trust the user right that's kind of a policy that you should adhere to in",
    "start": "451220",
    "end": "457730"
  },
  {
    "text": "any in any program so if something comes from the user makes sure that it's either properly encoded or you kind of",
    "start": "457730",
    "end": "464960"
  },
  {
    "text": "whitelist some some characters that are allowed in but don't just trust that the user will not provide some some malicious data",
    "start": "464960",
    "end": "471080"
  },
  {
    "text": "well you knew some secure frameworks other metric recently people kind of",
    "start": "471080",
    "end": "476600"
  },
  {
    "text": "came up with this content security policy which has issues of its own you can do sandbox iframes but still I mean",
    "start": "476600",
    "end": "482240"
  },
  {
    "text": "this is all on the developer side and you can trust us that the developers often do not adhere",
    "start": "482240",
    "end": "488510"
  },
  {
    "text": "to these to these standards which I will come to it in a minute and so what on",
    "start": "488510",
    "end": "494000"
  },
  {
    "text": "the other hand if you're the applications user you can well turn off JavaScript not sure if you can actually",
    "start": "494000",
    "end": "499940"
  },
  {
    "text": "use Google Mail without JavaScript I've never tried I think there's a lot of sites that won't work at all with without JavaScript this is just this is",
    "start": "499940",
    "end": "506630"
  },
  {
    "text": "just it the way it is on the web right now what you can do is you can use a client-side cross-site scripting filter",
    "start": "506630",
    "end": "512750"
  },
  {
    "text": "and this in this case client-side means it's deployed on the client it doesn't have anything to do with clients that XSS just to make that",
    "start": "512750",
    "end": "518830"
  },
  {
    "text": "make that clear there is no script for Firefox or Firefox doesn't ship its own",
    "start": "518830",
    "end": "523959"
  },
  {
    "text": "XSS filter but one nostril is pretty powerful it's also kind of I think for",
    "start": "523959",
    "end": "529600"
  },
  {
    "text": "for beginners it's pretty hard to use so yeah that's an issue",
    "start": "529600",
    "end": "534880"
  },
  {
    "text": "Internet Explorer ships one and most prominently the Chrome browser from Google also ships one which is called",
    "start": "534880",
    "end": "541420"
  },
  {
    "text": "the the XSS auditor and this is kind of well state of the art and in XSS filtering on the client side and this is",
    "start": "541420",
    "end": "547839"
  },
  {
    "text": "well not really discussed or not really something that or that's something that the research community can agree on okay",
    "start": "547839",
    "end": "554440"
  },
  {
    "text": "before I will assume turn over the mic to the bastion let's briefly talk about kind of results from the from the study",
    "start": "554440",
    "end": "560980"
  },
  {
    "text": "we conducted into kind of real world well abilities in terms of client-side XSS and I already kind of spotted that a",
    "start": "560980",
    "end": "567040"
  },
  {
    "text": "little bit so our our approach to finding these is kind of three prongs so for one we have a bite level team",
    "start": "567040",
    "end": "573670"
  },
  {
    "text": "tracking engine implement into chromium that means for each string that is either in the JavaScript engine or the",
    "start": "573670",
    "end": "578890"
  },
  {
    "text": "the rendering engine we can precisely for each character say whether it was hard coded or it was coming for example",
    "start": "578890",
    "end": "584140"
  },
  {
    "text": "from the URL from a cookie from the post message and so on and so forth so basically we can exactly say this part",
    "start": "584140",
    "end": "589180"
  },
  {
    "text": "is not controllable by an attacker and this might be controllable by an attacker we then kind of build a chrome crawling extension and infrastructure",
    "start": "589180",
    "end": "596260"
  },
  {
    "text": "around it allowing us to crawl a large number of sites and then the bastion came up with with an expert generator",
    "start": "596260",
    "end": "602320"
  },
  {
    "text": "that basically takes the stain information plus kind of the knowledge of how HTML and JavaScript works and",
    "start": "602320",
    "end": "608110"
  },
  {
    "text": "then automatically can generate these these exploits and the results were",
    "start": "608110",
    "end": "614170"
  },
  {
    "text": "actually like this so we ran the experiments on the X at top 10k went down to pages from the from the main",
    "start": "614170",
    "end": "620110"
  },
  {
    "text": "page so called f2 found over 1600 unique vulnerabilities",
    "start": "620110",
    "end": "625390"
  },
  {
    "text": "on 958 remains that means almost 10% and we know that we don't have any",
    "start": "625390",
    "end": "631360"
  },
  {
    "text": "assurances in terms of code coverage because we're not we're just executing the side as is we're not trying anything",
    "start": "631360",
    "end": "637029"
  },
  {
    "text": "like like fuzzing or something and when we validate these vulnerabilities we actually opted to",
    "start": "637029",
    "end": "643180"
  },
  {
    "text": "disable the XSS or the top why don't we disable the XSS auditor just because the",
    "start": "643180",
    "end": "649000"
  },
  {
    "text": "auditor can kind of catch vulnerability or an exploit doesn't mean that there is not actually availability right it's just it",
    "start": "649000",
    "end": "655120"
  },
  {
    "text": "just means that obviously a chrome did a good job in terms of finding that and we",
    "start": "655120",
    "end": "662410"
  },
  {
    "text": "then rerun the experiment turning on the auditor and it turns out that some of the exploits were Brock",
    "start": "662410",
    "end": "667630"
  },
  {
    "text": "blocked but others were not blocked so we were wondering so so why exactly is that and so we went ahead and kind of",
    "start": "667630",
    "end": "674440"
  },
  {
    "text": "conducted an in-depth analysis into also the codebase of the SS auditor and found",
    "start": "674440",
    "end": "680830"
  },
  {
    "text": "a number of of bypasses that allow us to kind of bypass the yeah the XS auditor",
    "start": "680830",
    "end": "686260"
  },
  {
    "text": "and then we rerun the experiment kind of with this knowledge specifically generating payloads that wouldn't try",
    "start": "686260",
    "end": "693220"
  },
  {
    "text": "not to trigger the the XSS auditor but actually this is what the button is",
    "start": "693220",
    "end": "698440"
  },
  {
    "text": "going to tell you about now so how we can actually bypass the XSS",
    "start": "698440",
    "end": "703410"
  },
  {
    "text": "okay yeah just make us working great so I'm not going to talk about bypassing",
    "start": "706730",
    "end": "713210"
  },
  {
    "text": "the xs/s auditor but before doing that I will first talk a little bit about how the xs/s auditor actually works so the",
    "start": "713210",
    "end": "721910"
  },
  {
    "text": "attacker model that the exercise s auditor I can hear myself as the xs/s",
    "start": "721910",
    "end": "728060"
  },
  {
    "text": "auditor tries to cover is the reflected cross-site scripting attack her model so",
    "start": "728060",
    "end": "734270"
  },
  {
    "text": "in this model we here and the attacker craft some kind of request that contains",
    "start": "734270",
    "end": "740510"
  },
  {
    "text": "his malicious payload for example in the URL or within the post parameters and",
    "start": "740510",
    "end": "745520"
  },
  {
    "text": "then the attacker sends you a victim and well victims click on links or visit",
    "start": "745520",
    "end": "751340"
  },
  {
    "text": "other web pages so the request that the attacker crafted is conducted in the",
    "start": "751340",
    "end": "758000"
  },
  {
    "text": "user's browser and running in his authentication context and this leads the Willner about vulnerable website to",
    "start": "758000",
    "end": "765440"
  },
  {
    "text": "reflect the payload somewhere in the page so we can see this year this is",
    "start": "765440",
    "end": "772010"
  },
  {
    "text": "exactly the attacker model that the XSS author is trying to to defend against",
    "start": "772010",
    "end": "777290"
  },
  {
    "text": "and he tries to do this by finding these constructs back again in the URL so here",
    "start": "777290",
    "end": "783260"
  },
  {
    "text": "we can see the attacker included his payload in the URL and we have it in the page and what the exists Jessica what's",
    "start": "783260",
    "end": "792110"
  },
  {
    "text": "this a question no okay what the XSS origin tries to do is while pausing the",
    "start": "792110",
    "end": "797540"
  },
  {
    "text": "document he encounters different HTML constructs that might be potentially",
    "start": "797540",
    "end": "802850"
  },
  {
    "text": "malicious and whenever he finds such a construct they audit of tries to find",
    "start": "802850",
    "end": "809090"
  },
  {
    "text": "whether this construct is also contained somewhere in the requests and if this is",
    "start": "809090",
    "end": "814130"
  },
  {
    "text": "in the request it will block the JavaScript from executing and thus the",
    "start": "814130",
    "end": "820820"
  },
  {
    "text": "attack fails and well the basic assumption of the auditor is that an attacker is always going to use HTML to",
    "start": "820820",
    "end": "830480"
  },
  {
    "text": "trigger JavaScript execution so that the attacker inject an script tag that",
    "start": "830480",
    "end": "836000"
  },
  {
    "text": "invokes the JavaScript engine or whether the attacker injects an event and let something like unload or on",
    "start": "836000",
    "end": "842519"
  },
  {
    "text": "arrow that again triggers some malicious JavaScript to be executed and basically",
    "start": "842519",
    "end": "848279"
  },
  {
    "text": "the idea of the auditor is to prevent these malicious HTML constructs from",
    "start": "848279",
    "end": "853829"
  },
  {
    "text": "triggering the JavaScript engine and that explains the placement of the XSS auditor so the auditor is placed in",
    "start": "853829",
    "end": "861000"
  },
  {
    "text": "between the rendering engine and the JavaScript engine over here and whenever",
    "start": "861000",
    "end": "867149"
  },
  {
    "text": "it finds a construct that is possible that is capable of triggering the JavaScript engine it tries to filter it",
    "start": "867149",
    "end": "873899"
  },
  {
    "text": "and to to match the the construct against a ul or the request and if it finds it it blocks it so let's now have",
    "start": "873899",
    "end": "881100"
  },
  {
    "text": "a look at the constructs that are able to actually trigger JavaScript execution and the first construct is very obvious",
    "start": "881100",
    "end": "888029"
  },
  {
    "text": "it's just inline scripts so whenever the attacker in inserts a script tag the",
    "start": "888029",
    "end": "893220"
  },
  {
    "text": "browser will invoke the JavaScript engine the next construct is dangerous HTML attributes so for example the",
    "start": "893220",
    "end": "901050"
  },
  {
    "text": "attacker could in inject an event handler we can see here we have an image and we have an onload event and when the",
    "start": "901050",
    "end": "908760"
  },
  {
    "text": "image is loaded this malicious JavaScript which is just an alert box in this case will be triggered by the",
    "start": "908760",
    "end": "914790"
  },
  {
    "text": "browser and there's but there's also another way to trigger javascript with HTML attributes and this is JavaScript",
    "start": "914790",
    "end": "921720"
  },
  {
    "text": "URLs which we can see here so for example if we have attributes that accept JavaScript URLs such iframe",
    "start": "921720",
    "end": "928740"
  },
  {
    "text": "source we can use that to again trigger the JavaScript engine and there's a",
    "start": "928740",
    "end": "935399"
  },
  {
    "text": "third way and this involves external content so the attacker could just inject the script tag and load an",
    "start": "935399",
    "end": "941490"
  },
  {
    "text": "external script that he controls or he could load for example a flash applet or silverlight applet or java applet and",
    "start": "941490",
    "end": "948240"
  },
  {
    "text": "all of those applets are capable of executing JavaScript's of generating requests and for each of these three",
    "start": "948240",
    "end": "955470"
  },
  {
    "text": "constructs the XSS auditor has a separate check and what I would like to do now is to go through these checks and",
    "start": "955470",
    "end": "961500"
  },
  {
    "text": "explain how the XSS auditor is able to catch those different cases and to see",
    "start": "961500",
    "end": "966600"
  },
  {
    "text": "whether the content was actually injected or contained within the requests so here",
    "start": "966600",
    "end": "972230"
  },
  {
    "text": "we have an example of an inline scripts so as soon as the HTML parser passes document it will find such an inline",
    "start": "972230",
    "end": "978650"
  },
  {
    "text": "script and what it does first it checks whether the opening script tag is contained within the requests so within",
    "start": "978650",
    "end": "984980"
  },
  {
    "text": "the URL or within the post parameters if it finds an opening script tag it will",
    "start": "984980",
    "end": "990500"
  },
  {
    "text": "extract the first 100 characters of the payload up to the first common sign and",
    "start": "990500",
    "end": "996140"
  },
  {
    "text": "we'll try to find this in the requests in the URL or the request parameters and",
    "start": "996140",
    "end": "1001960"
  },
  {
    "text": "if it finds it it will remove the script completely so actually blocking blocking",
    "start": "1001960",
    "end": "1007570"
  },
  {
    "text": "the the attack the second rule and applies for attributes HTML attributes",
    "start": "1007570",
    "end": "1013450"
  },
  {
    "text": "and what the auditors are series it first checks whether an attribute contains a JavaScript URL so it goes",
    "start": "1013450",
    "end": "1019570"
  },
  {
    "text": "through when parsing the document it will find attribute nodes and it will check for each attribute note whether it",
    "start": "1019570",
    "end": "1025510"
  },
  {
    "text": "contains JavaScript URL so whether it starts with JavaScript colon or whether",
    "start": "1025510",
    "end": "1030520"
  },
  {
    "text": "the attribute is an event handler so whether it starts with the letters om and has at least five characters and if",
    "start": "1030520",
    "end": "1037209"
  },
  {
    "text": "it finds or if it finds that cases it the auditor will extract the complete",
    "start": "1037210",
    "end": "1042730"
  },
  {
    "text": "attribute so it will extract this string onload alert and so on and we'll try to",
    "start": "1042730",
    "end": "1048700"
  },
  {
    "text": "find this in the request and if it finds it again it will remove the specific attribute the search check applies for",
    "start": "1048700",
    "end": "1057520"
  },
  {
    "text": "external content so the auditor is a list of different tags that can that are capable of loading external content and",
    "start": "1057520",
    "end": "1063850"
  },
  {
    "text": "whenever it encounter such attack it will first check whether the script or whether the opening tag is contained",
    "start": "1063850",
    "end": "1071710"
  },
  {
    "text": "within the request so in this case this is a script next on one so we'll check for opening an angle bracket and script",
    "start": "1071710",
    "end": "1079690"
  },
  {
    "text": "if it's an object it will check for opening and bracket and object and so on",
    "start": "1079690",
    "end": "1085420"
  },
  {
    "text": "and if it finds this it will look out for the URL attribute so for script is a",
    "start": "1085420",
    "end": "1093280"
  },
  {
    "text": "source for objects disease data of 480 X",
    "start": "1093280",
    "end": "1098290"
  },
  {
    "text": "this is the href attribute and it will then have a look whether it can find this attribute in the your in the request and",
    "start": "1098290",
    "end": "1105429"
  },
  {
    "text": "if so it will block block to it but the attack so to summarize this we have the",
    "start": "1105429",
    "end": "1111879"
  },
  {
    "text": "rendering engine here and the rendering engine pauses to HTML finds different notes then when these notes are capable",
    "start": "1111879",
    "end": "1119469"
  },
  {
    "text": "of executing JavaScript it will pass it to the XSS auditor the XSS auditor will",
    "start": "1119469",
    "end": "1125379"
  },
  {
    "text": "try to match these things against the request you can see URL and the post parameters and if it finds something it",
    "start": "1125379",
    "end": "1131769"
  },
  {
    "text": "will block the request or the the execution of JavaScript and if that if it does not find anything it will pass",
    "start": "1131769",
    "end": "1138039"
  },
  {
    "text": "the script on to the JavaScript engine so in this process we have three different phases we have an invocation",
    "start": "1138039",
    "end": "1144580"
  },
  {
    "text": "phase where the rendering engine decides whether to to use the XS as audit or",
    "start": "1144580",
    "end": "1150219"
  },
  {
    "text": "whether to switch it on then we have a matching phase where the XSS auditor tries to find malicious code constructs",
    "start": "1150219",
    "end": "1157629"
  },
  {
    "text": "in the request and in the end we have a blocking phase and now let's talk about",
    "start": "1157629",
    "end": "1163659"
  },
  {
    "text": "how to bypass this so basically we have two different options here the first option is we avoid the invocation of the",
    "start": "1163659",
    "end": "1170679"
  },
  {
    "text": "XSS auditor so if the thing is not switched on it cannot detect anything or",
    "start": "1170679",
    "end": "1175869"
  },
  {
    "text": "we can confuse the matching of the auditor Sofie if it does not find the things that we inject it it will think",
    "start": "1175869",
    "end": "1182739"
  },
  {
    "text": "well this is not injected and then let us execute the JavaScript so let's first",
    "start": "1182739",
    "end": "1187839"
  },
  {
    "text": "talk about avoiding the auditor invocation so basically there are three different reasons why the XSS auditor",
    "start": "1187839",
    "end": "1194259"
  },
  {
    "text": "might be switched off and the first reason is that the main function of the",
    "start": "1194259",
    "end": "1200919"
  },
  {
    "text": "XSS auditor is kind of not true for the on based exercise because the main assumption is that all the malicious",
    "start": "1200919",
    "end": "1207940"
  },
  {
    "text": "content passes the exam HTML parser and the attacker always injects HTML but",
    "start": "1207940",
    "end": "1214690"
  },
  {
    "text": "this is not true for example we have in JavaScript the code evaluation functions such as eval such as the timeouts at",
    "start": "1214690",
    "end": "1220389"
  },
  {
    "text": "interval function and so on and those functions will never pass or the content",
    "start": "1220389",
    "end": "1226089"
  },
  {
    "text": "pass through those functions will never pass the HTML parser so we will never ever go through the XSS auditory in that",
    "start": "1226089",
    "end": "1231909"
  },
  {
    "text": "cases furthermore we also have the Dom bindings in JavaScript so we have things like script outsource",
    "start": "1231909",
    "end": "1237790"
  },
  {
    "text": "and script or text so whenever we pass a user control string to such a dump such",
    "start": "1237790",
    "end": "1244660"
  },
  {
    "text": "an attribute or such a property through the Dom bindings it will never go through the HTML pass and so we will",
    "start": "1244660",
    "end": "1250390"
  },
  {
    "text": "never see the Excel is SS auditor in this case the second reason for the",
    "start": "1250390",
    "end": "1256750"
  },
  {
    "text": "auditor not to be invoked is performance so we we study the source code of the",
    "start": "1256750",
    "end": "1261910"
  },
  {
    "text": "auditor and we found several cases where the auditor is just switched off although it could have been switched on",
    "start": "1261910",
    "end": "1269200"
  },
  {
    "text": "to filter and one occasion is the inner HTML property so we found a bug in the",
    "start": "1269200",
    "end": "1274929"
  },
  {
    "text": "in the back chromium bug tracker and we found out that they switched off the XSS auditor for inner HTML assignments",
    "start": "1274929",
    "end": "1280590"
  },
  {
    "text": "because of performance reasons because it took too long to filter all the stuff and to check so they just will switch",
    "start": "1280590",
    "end": "1287440"
  },
  {
    "text": "off and the check and there's also another check for performance reason and it's when when the XSS auditor starts it",
    "start": "1287440",
    "end": "1295960"
  },
  {
    "text": "checks whether URL or the request in general contains one of these four characters so the two angle brackets the",
    "start": "1295960",
    "end": "1302740"
  },
  {
    "text": "double quote and the single quote if it does not find any of those characters it will not switch on the XSS auditor",
    "start": "1302740",
    "end": "1308710"
  },
  {
    "text": "because it then believes that there is no attack happening so it only triggers",
    "start": "1308710",
    "end": "1314559"
  },
  {
    "text": "in a very few cases for very few URLs the problem with this is that there are",
    "start": "1314559",
    "end": "1319690"
  },
  {
    "text": "some attacks that do not require these characters for example if there is an injection into an unquoted attribute you",
    "start": "1319690",
    "end": "1326440"
  },
  {
    "text": "do not need to have a quote to break out of the attribute you just need to have a wide space and you can just add an event",
    "start": "1326440",
    "end": "1332920"
  },
  {
    "text": "handler and you don't need any angle brackets for doing that so this this is",
    "start": "1332920",
    "end": "1338470"
  },
  {
    "text": "a minor case and it happens only rarely but it sometimes happens this is also",
    "start": "1338470",
    "end": "1344410"
  },
  {
    "text": "the reason for the next things not to be not to invoke the auditor so sometimes",
    "start": "1344410",
    "end": "1350140"
  },
  {
    "text": "we also have different ways of getting payloads into web pages so the XSS",
    "start": "1350140",
    "end": "1355450"
  },
  {
    "text": "auditor assumes that all the payloads are contained within the request but we for example have the postmessage api we",
    "start": "1355450",
    "end": "1362530"
  },
  {
    "text": "have the window dot name property and we have exists hrs dead load x terminal content without being actually",
    "start": "1362530",
    "end": "1369150"
  },
  {
    "text": "contained in the initial request so whenever there's an alternative vector used for XSS the auditor will not find",
    "start": "1369150",
    "end": "1376920"
  },
  {
    "text": "it and the payload is not in the UL so it will not find that four characters that are required to switch the auditor",
    "start": "1376920",
    "end": "1382800"
  },
  {
    "text": "on so it will just switch it off so that's it on the invocation side so now",
    "start": "1382800",
    "end": "1389700"
  },
  {
    "text": "we are talking about string matching issues and now I would like to give a few demos of this so now we are trying",
    "start": "1389700",
    "end": "1395400"
  },
  {
    "text": "to like confuse the SSL s auditor not to find certain strings so let me switch to",
    "start": "1395400",
    "end": "1403740"
  },
  {
    "text": "the browser so I will do the demos in two browsers so here we have our browser",
    "start": "1403740",
    "end": "1409770"
  },
  {
    "text": "that's our patched browser that has the taint tracking engine built into it and we switched off the XSS auditor in this",
    "start": "1409770",
    "end": "1416790"
  },
  {
    "text": "case but we I will use this to get an understanding of the vulnerability and then I will show it in the canary",
    "start": "1416790",
    "end": "1423570"
  },
  {
    "text": "version so in the newest version of Chrome that has the XSS auditor enabled will show that the bypasses are actually",
    "start": "1423570",
    "end": "1429390"
  },
  {
    "text": "working so let's have a look at the first demo so this demo is it's one",
    "start": "1429390",
    "end": "1438240"
  },
  {
    "text": "instance of class that we call partial injections so here you can see a website",
    "start": "1438240",
    "end": "1445170"
  },
  {
    "text": "and it has some value in the in the fragment of the URL and here you can see",
    "start": "1445170",
    "end": "1451020"
  },
  {
    "text": "some output of our teint engine so what you can see here is that our teint",
    "start": "1451020",
    "end": "1456090"
  },
  {
    "text": "engine detected a call to document right to dom function that right stuff to dom",
    "start": "1456090",
    "end": "1461190"
  },
  {
    "text": "and you can see what the document right actually got as a value and the read",
    "start": "1461190",
    "end": "1467190"
  },
  {
    "text": "value is marking user input so this is something coming from the user and the",
    "start": "1467190",
    "end": "1473310"
  },
  {
    "text": "other parts are hard-coded so what we see here we have a very simple script it just has one variable and it has this",
    "start": "1473310",
    "end": "1480450"
  },
  {
    "text": "value over there so and if I if I change this value and reload the page we will see the new user input so the usual way",
    "start": "1480450",
    "end": "1488820"
  },
  {
    "text": "of exploiting this would be doing the following so we would like break out of this of this variable and then we would",
    "start": "1488820",
    "end": "1496650"
  },
  {
    "text": "end the script tag then would open a new script tag sailor one",
    "start": "1496650",
    "end": "1502620"
  },
  {
    "text": "and then close this cryptic again and if we execute it we should see an alert box",
    "start": "1502620",
    "end": "1509370"
  },
  {
    "text": "and we do it because the auditory switched off so now let's try this and copy this to the to the cannery version",
    "start": "1509370",
    "end": "1515130"
  },
  {
    "text": "of Chrome wear the xs/s auditory switch done we do this and we see the message",
    "start": "1515130",
    "end": "1520700"
  },
  {
    "text": "well this thing was blocked because what happened is that we injected a new",
    "start": "1520700",
    "end": "1526140"
  },
  {
    "text": "script tag and as soon as it discovers the positives covers the script tag it will check if this is contained in the",
    "start": "1526140",
    "end": "1532440"
  },
  {
    "text": "root in the request it will see that this is actually contained in a request and block it but if you watch closely we",
    "start": "1532440",
    "end": "1540450"
  },
  {
    "text": "see that we already have a script tag here so well there's no need to close one script tag then open another one and",
    "start": "1540450",
    "end": "1547110"
  },
  {
    "text": "then have our malicious payload so we can just reuse our existing new script tag so I just remove the closing and the",
    "start": "1547110",
    "end": "1553140"
  },
  {
    "text": "opening tag and we will again see the Lord because the auditors switched off",
    "start": "1553140",
    "end": "1558960"
  },
  {
    "text": "now let's go to the canary version and reload this thing and with the scene",
    "start": "1558960",
    "end": "1566910"
  },
  {
    "text": "alert one and in this case what happened is the matching rule for scripts didn't apply so the auditor checked whether",
    "start": "1566910",
    "end": "1573210"
  },
  {
    "text": "there's an opening script tag somewhere in the in the request but there is no opening script tag we just removed it so",
    "start": "1573210",
    "end": "1579410"
  },
  {
    "text": "this triggers the requests so we bypassed the auditor for this class of",
    "start": "1579410",
    "end": "1587040"
  },
  {
    "text": "bugs we have three different three different instances of bugs but I'm not I don't have the time to show all of",
    "start": "1587040",
    "end": "1593010"
  },
  {
    "text": "them so let's see the second class of the text so the second class of attacks",
    "start": "1593010",
    "end": "1598020"
  },
  {
    "text": "we call a trailing content and we you can see the output of our taint engine we see we have a div tag written wire",
    "start": "1598020",
    "end": "1606000"
  },
  {
    "text": "document right and we see some user input is passed from the URL which is the same so the usual way of again would",
    "start": "1606000",
    "end": "1612780"
  },
  {
    "text": "be to break out of this HTML attribute then close this div tag then open the script tag and so on",
    "start": "1612780",
    "end": "1619550"
  },
  {
    "text": "but what we see here is interesting so we have like we have the user input which is 80 and then we see some",
    "start": "1619550",
    "end": "1625520"
  },
  {
    "text": "trailing content behind the thing which is in this case a px and we actually can",
    "start": "1625520",
    "end": "1631280"
  },
  {
    "text": "use this trailing content to confuse the XSS audit or during its matching so what",
    "start": "1631280",
    "end": "1637040"
  },
  {
    "text": "I'm doing what I'm doing now is I break out of these div tag and i just insert",
    "start": "1637040",
    "end": "1643220"
  },
  {
    "text": "an image tag and give it some arbitrary source and i will use an on arrow event",
    "start": "1643220",
    "end": "1651340"
  },
  {
    "text": "and here the interesting part starts so i will now type in alert 1 the code that i doesn't matter",
    "start": "1651340",
    "end": "1658750"
  },
  {
    "text": "alert 1 but instead of closing this image tag instead of closing this on",
    "start": "1658750",
    "end": "1664460"
  },
  {
    "text": "error event handler i will just leave it open and you will see what's going to happen so will see the a lot box the",
    "start": "1664460",
    "end": "1671750"
  },
  {
    "text": "auditor is switched off but what we see here is that basically we create a new image tag and the image text consumes",
    "start": "1671750",
    "end": "1679400"
  },
  {
    "text": "the trailing content that is behind the injection so we see that the on arrow is not on arrow alert 1 but is actually on",
    "start": "1679400",
    "end": "1686360"
  },
  {
    "text": "error alert 1 and then to trading 1 10px and then the quote and this is actually",
    "start": "1686360",
    "end": "1693290"
  },
  {
    "text": "a syntactically correct Java Script so this is perfectly fine and if we",
    "start": "1693290",
    "end": "1698510"
  },
  {
    "text": "remember the matching rules for for attributes the auditor tries to match on error until the last code so it will try",
    "start": "1698510",
    "end": "1706160"
  },
  {
    "text": "to find this string that I just marked within the request but in the requests we only have the beginning of this thing",
    "start": "1706160",
    "end": "1712580"
  },
  {
    "text": "so it will never find it and we can try in cannery so I switch to the canary version click no just just the old one I",
    "start": "1712580",
    "end": "1721670"
  },
  {
    "text": "need to know now so now we see we bypass the XSS auditor again so because it's",
    "start": "1721670",
    "end": "1729590"
  },
  {
    "text": "not able to to find this thing in the request and for this category we also have three different three different",
    "start": "1729590",
    "end": "1738580"
  },
  {
    "text": "types of off attacks of three different instances and this one is very naive and",
    "start": "1738580",
    "end": "1744080"
  },
  {
    "text": "very very simple but it requires the trailing content to be valid JavaScript this is ready okay so in this case it's",
    "start": "1744080",
    "end": "1751640"
  },
  {
    "text": "easy because there's just P X which is a very short value but if you have longer well youth it's probably not",
    "start": "1751640",
    "end": "1757340"
  },
  {
    "text": "valid JavaScript but we also have ways for that but I'm I don't have the time",
    "start": "1757340",
    "end": "1762380"
  },
  {
    "text": "to show this so now let's go to the third examples and this category called",
    "start": "1762380",
    "end": "1769340"
  },
  {
    "text": "multi injections so in our study we figured out that each call to document",
    "start": "1769340",
    "end": "1775100"
  },
  {
    "text": "ride or in HTML or to any other function has on average three injection points so",
    "start": "1775100",
    "end": "1781190"
  },
  {
    "text": "it's not like there's one user input but usually you construct the strings of different user inputs and different",
    "start": "1781190",
    "end": "1786530"
  },
  {
    "text": "hard-coded values and then you evaluate it or write it to the DOM and what we",
    "start": "1786530",
    "end": "1792200"
  },
  {
    "text": "see here we see an output of our taint engine again we see we wrote an image tag and we have two injection points in",
    "start": "1792200",
    "end": "1797720"
  },
  {
    "text": "this case so in the naive attack would again be break out of one of these",
    "start": "1797720",
    "end": "1803059"
  },
  {
    "text": "attributes and then open the script tag and this would not work but we can make",
    "start": "1803059",
    "end": "1809030"
  },
  {
    "text": "use of both of those injection points and is actually very interesting so we can use the first and just break out of",
    "start": "1809030",
    "end": "1815630"
  },
  {
    "text": "this width attribute and close the image tag and then we open a script tag and do",
    "start": "1815630",
    "end": "1823460"
  },
  {
    "text": "a payload we can look at this now so this is only half of the payload it's",
    "start": "1823460",
    "end": "1829370"
  },
  {
    "text": "not working so we see we have here a part of the script and we again have an injection afterwards so instead of",
    "start": "1829370",
    "end": "1836179"
  },
  {
    "text": "closing the script directly we close it only after the after the the other",
    "start": "1836179",
    "end": "1844750"
  },
  {
    "text": "script so I do this and do the closing tag in the other thing so now we see we",
    "start": "1844750",
    "end": "1851299"
  },
  {
    "text": "have a script tag here but we still have some content that is hard-coded within the page and that like destroys",
    "start": "1851299",
    "end": "1859010"
  },
  {
    "text": "our attack because it's not syntactically correct but we can just make use of this and just try to get rid",
    "start": "1859010",
    "end": "1864350"
  },
  {
    "text": "of it so I just used a void function which does nothing and then just wrap",
    "start": "1864350",
    "end": "1869600"
  },
  {
    "text": "this thing in a void and we see in a lot box here and what happened just now we",
    "start": "1869600",
    "end": "1876080"
  },
  {
    "text": "have a script tag and this script tag is valid JavaScript it has an alert",
    "start": "1876080",
    "end": "1882350"
  },
  {
    "text": "and then it has the void function which consumes this hard-coded values so that they don't annoy the JavaScript engine",
    "start": "1882350",
    "end": "1889340"
  },
  {
    "text": "and then it's a valid syntactically correct JavaScript but what we also see here is that this is hard-coded actually",
    "start": "1889340",
    "end": "1895789"
  },
  {
    "text": "so not the complete script is contained in the request but just parts of it so let's try to execute this in the canary",
    "start": "1895789",
    "end": "1902330"
  },
  {
    "text": "version of Chrome and we see again we have bypassed the filter for this",
    "start": "1902330",
    "end": "1910010"
  },
  {
    "text": "category we also have three different instances of multi injections so we can have this simple moot injection we can",
    "start": "1910010",
    "end": "1915620"
  },
  {
    "text": "have a multi injection where only one value is is reflected twice and we can",
    "start": "1915620",
    "end": "1920990"
  },
  {
    "text": "also have moot injections where we have different injection points for example multiple document writes multiple in",
    "start": "1920990",
    "end": "1926090"
  },
  {
    "text": "HTML or we could even mix some of those but I'm not able to show all of them so",
    "start": "1926090",
    "end": "1937990"
  },
  {
    "text": "what we did then is we had like we had about 17 different chrome bypasses after",
    "start": "1937990",
    "end": "1944270"
  },
  {
    "text": "like two months of studying the chrome source code and we also had this huge",
    "start": "1944270",
    "end": "1950240"
  },
  {
    "text": "number of Dom based cross-site scripting vulnerabilities that we found and what we did is we patched our our exploit",
    "start": "1950240",
    "end": "1957440"
  },
  {
    "text": "generator to you make use of the bypasses so instead of just generating",
    "start": "1957440",
    "end": "1963380"
  },
  {
    "text": "naive naive cross-site scripting exploits we we check the vulnerabilities",
    "start": "1963380",
    "end": "1968900"
  },
  {
    "text": "first and check whether they are susceptible to certain bypasses and then we generated a specific bypass for it so",
    "start": "1968900",
    "end": "1975919"
  },
  {
    "text": "we did that and we were able to bypass the auditor in about 80% of all the cases so we were able to bypass in",
    "start": "1975919",
    "end": "1983960"
  },
  {
    "text": "seventy-two percent of all vulnerabilities and 80% of all domains so because some domains have multiple",
    "start": "1983960",
    "end": "1990500"
  },
  {
    "text": "vulnerabilities and we were only able to bypass one but that's basically enough to exploit a web page okay",
    "start": "1990500",
    "end": "1999190"
  },
  {
    "text": "that's it from my side and yet there's a disclaimer some of these issues has been fixed but not all of them because some",
    "start": "1999190",
    "end": "2005910"
  },
  {
    "text": "are inherited in the design of the xs/s auditor so that's the reason why we",
    "start": "2005910",
    "end": "2010920"
  },
  {
    "text": "thought well we need something new and we implemented our own filter and this will be covered by them okay so the",
    "start": "2010920",
    "end": "2026580"
  },
  {
    "text": "busting just showed you that we have the audience actually has a couple of problems and let's try to abstract what these",
    "start": "2026580",
    "end": "2032400"
  },
  {
    "text": "problems are so problem number one is the auditor does some approximation of the data flow right it tries to guess",
    "start": "2032400",
    "end": "2038820"
  },
  {
    "text": "that well something was sent to the server and it was coming back so there might have been a data flow on the server which which occurred and then so",
    "start": "2038820",
    "end": "2046560"
  },
  {
    "text": "basically the string matching to approximate this data flow secondly it's located inside the HTML for HTML parser",
    "start": "2046560",
    "end": "2052290"
  },
  {
    "text": "and as we've seen this is also a problem because we don't necessarily need to inject HTML 2 to be able to execute",
    "start": "2052290",
    "end": "2058440"
  },
  {
    "text": "JavaScript and thirdly it and to be honest also towards the guys who designed this it was never designed to",
    "start": "2058440",
    "end": "2065128"
  },
  {
    "text": "tackle kind of client-side access it was always meant as a defense against reflected Isis but let's let's try and",
    "start": "2065129",
    "end": "2071429"
  },
  {
    "text": "fix that so we propose the following solution the approximation using string",
    "start": "2071429",
    "end": "2077398"
  },
  {
    "text": "matching is unnecessarily imprecise for flows that occur purely on the client side right we have time tracking in",
    "start": "2077399",
    "end": "2082830"
  },
  {
    "text": "place so let's use the taint tracking pass the taint through all the execution paths of the of the application all the",
    "start": "2082830",
    "end": "2088440"
  },
  {
    "text": "way down to the JavaScript puzzle where we can then say ok so we have this",
    "start": "2088440",
    "end": "2094020"
  },
  {
    "text": "string that is tainted and now we can apply some policy where we say that it",
    "start": "2094020",
    "end": "2099300"
  },
  {
    "text": "and again abstracting XSS means that data is being interpreted as code and if you think about what the JavaScript",
    "start": "2099300",
    "end": "2105180"
  },
  {
    "text": "engine does or what any kind of basically any language puzzled us it kind of generates tokens out of the out",
    "start": "2105180",
    "end": "2111240"
  },
  {
    "text": "of the the text content that is passed to it and then these tokens might for example be literals it might be",
    "start": "2111240",
    "end": "2117710"
  },
  {
    "text": "declarations they might be call expressions and so on and so forth and we say this is user provided data so it",
    "start": "2117710",
    "end": "2123480"
  },
  {
    "text": "should always end up being interpreted as data and never at anything anything else so that's the basic idea let me kind of",
    "start": "2123480",
    "end": "2130800"
  },
  {
    "text": "give you a small example here so we have a an easy vulnerability here we have some user input that goes into this evil",
    "start": "2130800",
    "end": "2136980"
  },
  {
    "text": "and the best me just show you what we can actually or similarly this is similar to these in script injectors we had earlier and let's presume our input",
    "start": "2136980",
    "end": "2144510"
  },
  {
    "text": "was user data right so this is what ends up being sent to to the email function",
    "start": "2144510",
    "end": "2149579"
  },
  {
    "text": "and this is what the actual kind of app section tux tree looks like so we have a clear declaration we have an identifier",
    "start": "2149579",
    "end": "2156180"
  },
  {
    "text": "and then we have the red party notes here tainted data so user provided data we are creating a string literal from",
    "start": "2156180",
    "end": "2162030"
  },
  {
    "text": "user provided data again data is a string literal list is obviously data so this is this is okay we're fine with",
    "start": "2162030",
    "end": "2168270"
  },
  {
    "text": "that however if we kind of look at the same example in case where we actively exploit the whole vulnerability so we",
    "start": "2168270",
    "end": "2174750"
  },
  {
    "text": "break out of this definition of a we do alert one and do the the comment signs",
    "start": "2174750",
    "end": "2180000"
  },
  {
    "text": "here then this is what actually ends up being passed to the JavaScript engine so we have Y is equal to the data then the",
    "start": "2180000",
    "end": "2186180"
  },
  {
    "text": "red one and then well this is actually not visible it's gray trust me it's less the brightness of the project just the",
    "start": "2186180",
    "end": "2192329"
  },
  {
    "text": "problem here so this is what the abstraction sucks whew looks like then we can see okay we have some string over",
    "start": "2192329",
    "end": "2198809"
  },
  {
    "text": "here we're still fine with that we have a literal value down here as well it was just a 1 but in the in the middle here",
    "start": "2198809",
    "end": "2204750"
  },
  {
    "text": "we have an identifier which has tainted when we do not allow it trying to taint identifiers so this is actually being",
    "start": "2204750",
    "end": "2210270"
  },
  {
    "text": "blocked and we won't let the the execution happen here and so the policies this policy already discussed",
    "start": "2210270",
    "end": "2217020"
  },
  {
    "text": "so we have tainted values may only generate kind of a string number or numeric or a boolean literal they're",
    "start": "2217020",
    "end": "2223020"
  },
  {
    "text": "actually also object literals but we don't want those to be generated from from user provided input and secondly",
    "start": "2223020",
    "end": "2229349"
  },
  {
    "text": "Sebastian told you about this you can have external content like music script",
    "start": "2229349",
    "end": "2234960"
  },
  {
    "text": "source for example which is then download and executed and obviously if you are able to inject some well this",
    "start": "2234960",
    "end": "2241020"
  },
  {
    "text": "HTML markup we do script source equals then we would the the browser would request this external resource and none",
    "start": "2241020",
    "end": "2248220"
  },
  {
    "text": "of the content would be tainted because we wouldn't know what was actually provided by the user so in these case we say we will not allow any external",
    "start": "2248220",
    "end": "2254880"
  },
  {
    "text": "content to be included if any part of the origin is tainted that means either the the protocol the",
    "start": "2254880",
    "end": "2260700"
  },
  {
    "text": "domain or the port and this is both in force in the HTML puzzle we're also the excess",
    "start": "2260700",
    "end": "2266860"
  },
  {
    "text": "auditors located as well as the Dom bindings there is one single exception to that rule if it is the same origin of",
    "start": "2266860",
    "end": "2274120"
  },
  {
    "text": "the including page because even attacker was able to upload arbitrary content to the server well then we don't need XSS",
    "start": "2274120",
    "end": "2280390"
  },
  {
    "text": "auditors or anything in place right you can just do anything on that on that side okay so with this in mind we kind",
    "start": "2280390",
    "end": "2286720"
  },
  {
    "text": "of conducted an evaluation of yeah of our approach and first and foremost we",
    "start": "2286720",
    "end": "2292300"
  },
  {
    "text": "were interested in false negatives so we ran our approach against the set of known vulnerabilities and well - no big",
    "start": "2292300",
    "end": "2299170"
  },
  {
    "text": "surprise we caught all the exploits this is quite obvious because for one we",
    "start": "2299170",
    "end": "2304810"
  },
  {
    "text": "detected them with a similar kind of yeah means and also these were kind of the test cases for our implementation to",
    "start": "2304810",
    "end": "2310630"
  },
  {
    "text": "be completely honest and this is basically the issue we don't have a ground truth so there's to my knowledge",
    "start": "2310630",
    "end": "2317440"
  },
  {
    "text": "no kind of large set of real-world abilities other than the one we are having and yeah so this is obviously a",
    "start": "2317440",
    "end": "2323950"
  },
  {
    "text": "problem but I believe that if there are any bypasses these are only related to",
    "start": "2323950",
    "end": "2328990"
  },
  {
    "text": "implementation issues where we kind of lose detained at some point or something but I think this is the concept as such",
    "start": "2328990",
    "end": "2334120"
  },
  {
    "text": "should be sound more interestingly we looked at false positives so in order to get a number of false positives we",
    "start": "2334120",
    "end": "2340180"
  },
  {
    "text": "conducted the compatibility crawl called the alexa top 10k I think also going down to levels and crawled well roughly",
    "start": "2340180",
    "end": "2347440"
  },
  {
    "text": "1 million URLs and since each URL contains more than one frame to think about I don't know advertisement every",
    "start": "2347440",
    "end": "2354250"
  },
  {
    "text": "place it has their own frame Facebook Likes and and stuff like that has their own frames so in total we crawled well",
    "start": "2354250",
    "end": "2359950"
  },
  {
    "text": "9.3 million frames and on 0.01 6 percent of those frames we actually cost an",
    "start": "2359950",
    "end": "2366970"
  },
  {
    "text": "issue which we presume it's a false positive because we went we weren't trying to attack anything right looking",
    "start": "2366970",
    "end": "2373450"
  },
  {
    "text": "at the domains this number looks a little bit worse so on 1.8 3% this looks like this might be too high actually we",
    "start": "2373450",
    "end": "2380920"
  },
  {
    "text": "looked at all these these cases and found that it was always was just one single component in that side that broke",
    "start": "2380920",
    "end": "2386950"
  },
  {
    "text": "so it's not like you can't use the site anymore but rather the advertisement is broken or some very specific",
    "start": "2386950",
    "end": "2392500"
  },
  {
    "text": "functionality is broken more interestingly we then looking at these 183 components we decided hey",
    "start": "2392500",
    "end": "2399400"
  },
  {
    "text": "let's have have a look at how many of these are actually vulnerabilities because if there are vulnerabilities they are not really false positives if",
    "start": "2399400",
    "end": "2405310"
  },
  {
    "text": "we block them right turns out that half of them are actually exploitable vulnerabilities where decide owners kind",
    "start": "2405310",
    "end": "2411610"
  },
  {
    "text": "of did well cross-site scripting by design so they had I don't know evolve of HTML and that had the code in the UL",
    "start": "2411610",
    "end": "2418560"
  },
  {
    "text": "this might be nice for convenience but obviously has some security implications",
    "start": "2418560",
    "end": "2424230"
  },
  {
    "text": "and then the third kind of well dimension which we went ahead and and",
    "start": "2424230",
    "end": "2429760"
  },
  {
    "text": "evaluated our approach was performance and we ran the four benchmarks carbon",
    "start": "2429760",
    "end": "2435160"
  },
  {
    "text": "tomatillo Sampada at octane and so this line here is basically the the unpatched version of chrome then we have these two",
    "start": "2435160",
    "end": "2443260"
  },
  {
    "text": "are our patched version of chrome the green one is Firefox and the blue one is Internet Explorer very interesting to",
    "start": "2443260",
    "end": "2449920"
  },
  {
    "text": "note in this you see that Internet Explorer is way faster than any other engine on SunSpider benchmark and we did",
    "start": "2449920",
    "end": "2456310"
  },
  {
    "text": "a little bit of digging and it turns out that according to Microsoft the Internet",
    "start": "2456310",
    "end": "2461980"
  },
  {
    "text": "Explorer has a dead code detection mechanism and so the SunSpider benchmark",
    "start": "2461980",
    "end": "2467770"
  },
  {
    "text": "actually has one loop which is very kind of compare computationally expensive and but the value that is being computed",
    "start": "2467770",
    "end": "2474850"
  },
  {
    "text": "it's never used outside this outside this loop and therefore Internet Explorer doesn't even execute the loop",
    "start": "2474850",
    "end": "2480510"
  },
  {
    "text": "there are some people who say they have a specific that they don't have that coat detection or elimination but rather",
    "start": "2480510",
    "end": "2487780"
  },
  {
    "text": "SunSpider loop detection and then just well don't execute that but never mind this what",
    "start": "2487780",
    "end": "2495160"
  },
  {
    "text": "you will notice is that we have two different versions or for our for a patched chrome here and one is patched",
    "start": "2495160",
    "end": "2501160"
  },
  {
    "text": "called patched chrome and the other one is called patch chrome worst this is due to the fact that if you think of a benchmarking suite they will typically",
    "start": "2501160",
    "end": "2507880"
  },
  {
    "text": "use strings they will use integers and so on it's a force but they won't use tainted strings right they won't write something to the URL then refer retrieve",
    "start": "2507880",
    "end": "2514870"
  },
  {
    "text": "it again and do something with this so typically the strings that are being used inside these these these benchmarks",
    "start": "2514870",
    "end": "2521440"
  },
  {
    "text": "won't be tainted so we don't have to copy their around detained information all the time we don't have to check",
    "start": "2521440",
    "end": "2526870"
  },
  {
    "text": "whether string is tainted and so this is basically the the so this left part here is if we just have our",
    "start": "2526870",
    "end": "2533470"
  },
  {
    "text": "normal implementation that checks hey is a string tainted and it's only tainted if it's coming from from user input to",
    "start": "2533470",
    "end": "2538600"
  },
  {
    "text": "get an approximation of what the absolute worst-case performance overhead would be we just kind of flip the switch",
    "start": "2538600",
    "end": "2544930"
  },
  {
    "text": "in the implementation and for each string just always return yes it's tainted so we'd always have to copy around the taint information and yeah so",
    "start": "2544930",
    "end": "2552700"
  },
  {
    "text": "on and so forth so this is actually gives give us a upper bound to the into the performance impact and you see so",
    "start": "2552700",
    "end": "2559960"
  },
  {
    "text": "it's about 30% in in carping and it's typically less than 20% I think on average it's about 17% kind of the worst",
    "start": "2559960",
    "end": "2568330"
  },
  {
    "text": "worst case overhead and the best case overhead or the the average case overhead is is roughly seven percent",
    "start": "2568330",
    "end": "2574470"
  },
  {
    "text": "this can be optimized but I mean we are we are researchers we're not soft and",
    "start": "2574470",
    "end": "2580119"
  },
  {
    "text": "reduce at Google well Boston is kind of know but that's a different story but it was never intended as kind of a",
    "start": "2580119",
    "end": "2587700"
  },
  {
    "text": "mainline patch to begin but it was more merely a proof-of-concept that it would actually that would actually work and I",
    "start": "2587700",
    "end": "2593770"
  },
  {
    "text": "believe it did it does okay concluding",
    "start": "2593770",
    "end": "2598830"
  },
  {
    "text": "what do you have want to take away from from this talk today so we showed to you",
    "start": "2598830",
    "end": "2605170"
  },
  {
    "text": "today in this talk that clients I cross all scripting is actually a big issue roughly 10% of the Alexa top 10k carry",
    "start": "2605170",
    "end": "2612100"
  },
  {
    "text": "at least one cross-site scripting vulnerability this is due to the fact or",
    "start": "2612100",
    "end": "2618130"
  },
  {
    "text": "I think this number will be higher right now we're not trying to log into any applications we're not trying to kind of",
    "start": "2618130",
    "end": "2624310"
  },
  {
    "text": "cover much code that would execute kind of additional additional vulnerability or additional vulnerable code so this is",
    "start": "2624310",
    "end": "2631780"
  },
  {
    "text": "well this is pretty like a pretty much lower bound I actually conducted an experiment I think two weeks ago and",
    "start": "2631780",
    "end": "2638170"
  },
  {
    "text": "we're still cross-site scripting 916 domains on the Alexa top 10 K and this",
    "start": "2638170",
    "end": "2643990"
  },
  {
    "text": "is going down one level from the start page and just spoiler at least two of the companies that sponsor this event",
    "start": "2643990",
    "end": "2649930"
  },
  {
    "text": "are also within that set nevermind right so we then went ahead and",
    "start": "2649930",
    "end": "2657940"
  },
  {
    "text": "conducted the security analysis of the exercise or we found several bypasses that allow us",
    "start": "2657940",
    "end": "2663309"
  },
  {
    "text": "to well either bypass the invocation or that well trick the the string matching",
    "start": "2663309",
    "end": "2669549"
  },
  {
    "text": "algorithms such that the engine doesn't think that there is actually data flow happening and well based on this we",
    "start": "2669549",
    "end": "2676539"
  },
  {
    "text": "proposed a new approach to client-side access filtering which uses precise taint tracking and has pretty low false",
    "start": "2676539",
    "end": "2682900"
  },
  {
    "text": "positives it does have some overhead which we believe can be optimized again if if dv8",
    "start": "2682900",
    "end": "2688780"
  },
  {
    "text": "developers pick pick up the idea okay and with that we're actually finishing a",
    "start": "2688780",
    "end": "2694420"
  },
  {
    "text": "little bit early we would like to thank you very much for your attention and are happy to answer any questions you might",
    "start": "2694420",
    "end": "2700240"
  },
  {
    "text": "have eleven micro something or it just",
    "start": "2700240",
    "end": "2711430"
  },
  {
    "text": "supposed to scream you're just supposed to scream I guess",
    "start": "2711430",
    "end": "2716490"
  },
  {
    "text": "but what I have experienced while doing the static analysis the commercial tool",
    "start": "2722150",
    "end": "2729630"
  },
  {
    "text": "which is available in the market all right now they have like they analyze the data flow analysis from",
    "start": "2729630",
    "end": "2735540"
  },
  {
    "text": "source to sink so what I have observed and my experiences up maybe you could",
    "start": "2735540",
    "end": "2741300"
  },
  {
    "text": "bypass the excesses auditor but the way the static and this is I have so I have",
    "start": "2741300",
    "end": "2746819"
  },
  {
    "text": "seen your comment that you don't know whether static analysis is happening or not but I am telling you just understand",
    "start": "2746819",
    "end": "2752760"
  },
  {
    "text": "static analysis is giving you 100 percent a good result if there is any",
    "start": "2752760",
    "end": "2758540"
  },
  {
    "text": "don't be successes and the OS o ASP is easy pile filter if you losing it I",
    "start": "2758540",
    "end": "2765359"
  },
  {
    "text": "think you could not bypass what you have done in this dynamic analysis or the the",
    "start": "2765359",
    "end": "2770400"
  },
  {
    "text": "manual analysis ok well yes so I mean yes obviously we you have you're",
    "start": "2770400",
    "end": "2776040"
  },
  {
    "text": "perfectly right we have no idea of how all static analysis does work for these cases to be completely honest I believe",
    "start": "2776040",
    "end": "2783780"
  },
  {
    "text": "that tools be they static or be they dynamic would definitely help develop us",
    "start": "2783780",
    "end": "2791520"
  },
  {
    "text": "in kind of fixing their their software and then obviously well allowing us if",
    "start": "2791520",
    "end": "2797250"
  },
  {
    "text": "any obviously not develop to exploit the vulnerability to begin with in our work",
    "start": "2797250",
    "end": "2802619"
  },
  {
    "text": "we found that oftentimes developers will kind of so they they seem to lack kind",
    "start": "2802619",
    "end": "2809040"
  },
  {
    "text": "of knowledge of the api's that I used in in in JavaScript for example so we found",
    "start": "2809040",
    "end": "2815550"
  },
  {
    "text": "a couple of things where you look at the court and you see like no that's not availability you look at the code again and again and then after some time you",
    "start": "2815550",
    "end": "2822210"
  },
  {
    "text": "figure it out so oftentimes it's really tricky to to to get exactly what the",
    "start": "2822210",
    "end": "2827520"
  },
  {
    "text": "vulnerability is but well to be honest I think 85 to 90 percent are really face",
    "start": "2827520",
    "end": "2834210"
  },
  {
    "text": "palms in terms of it's like in these examples we had on here it's like document.write user and what this is something you see all over the all over",
    "start": "2834210",
    "end": "2841109"
  },
  {
    "text": "the web so I think yeah but also I mean the XSS auditor has meant as a kind of a",
    "start": "2841109",
    "end": "2846690"
  },
  {
    "text": "last line of defense against cross-site scripting right if we were a perfect word there would not be any cross-site",
    "start": "2846690",
    "end": "2851730"
  },
  {
    "text": "scripting to begin honestly I mean I saw a few of your test cases I think it I could use I will use",
    "start": "2851730",
    "end": "2858580"
  },
  {
    "text": "in future also if I will be doing the manual pen test okay don't mess but yeah another thing that's what I'm saying",
    "start": "2858580",
    "end": "2865540"
  },
  {
    "text": "for the dynamic analysis of other apprentice I think you script what you have done the research it is useful for",
    "start": "2865540",
    "end": "2871090"
  },
  {
    "text": "us especially specifically for the security community okay but Oh your knowledge I'm just telling you remember",
    "start": "2871090",
    "end": "2877930"
  },
  {
    "text": "successes could be found by this static analysis may be a remark from my side so",
    "start": "2877930",
    "end": "2884530"
  },
  {
    "text": "I don't really believe in static analysis tools right now so I had a look at a lot of them and they all fail they",
    "start": "2884530",
    "end": "2891700"
  },
  {
    "text": "don't they wouldn't detect this and I think the reason is not because static analysis in general is not good but I",
    "start": "2891700",
    "end": "2897460"
  },
  {
    "text": "think the tools are not good mostly because tools are transferred from other languages so you have that see in Java",
    "start": "2897460",
    "end": "2903160"
  },
  {
    "text": "static analysis tool and then you say oh we want to I have JavaScript capabilities so we add another parser",
    "start": "2903160",
    "end": "2908710"
  },
  {
    "text": "and then we find all the vulnerabilities but I think most of the tools like like",
    "start": "2908710",
    "end": "2914710"
  },
  {
    "text": "a lot of really fundamental or basic knowledge for example most of the tools don't assume JavaScript to be run in a",
    "start": "2914710",
    "end": "2921640"
  },
  {
    "text": "web page you just pass JavaScript to the static analyzer but there's more to webpage as HTML and their CSS and",
    "start": "2921640",
    "end": "2928300"
  },
  {
    "text": "there's other stuff happening there are events that are automatically invoked by the browser and static analysis tools",
    "start": "2928300",
    "end": "2935290"
  },
  {
    "text": "right now do not cover all of that so and also also we we're currently working with with people from from UCSB they are",
    "start": "2935290",
    "end": "2943480"
  },
  {
    "text": "trying to kind of build a static analysis tool and we gave them some of our samples so it's it's still ongoing",
    "start": "2943480",
    "end": "2949210"
  },
  {
    "text": "research but it would be very interesting see kind of given the I mean we know that there's a vulnerability we",
    "start": "2949210",
    "end": "2954820"
  },
  {
    "text": "don't necessarily actually also trace back where where it originated from but it would be very interesting to kind of have a tool that looks at that",
    "start": "2954820",
    "end": "2961300"
  },
  {
    "text": "aesthetically and say hey this is this is actually vulnerability so this is something that is ongoing",
    "start": "2961300",
    "end": "2966970"
  },
  {
    "text": "- Scott - - because I think a couple of months ago so this is something that the",
    "start": "2966970",
    "end": "2972010"
  },
  {
    "text": "stuff in the keyboard was investigating yep Thanks",
    "start": "2972010",
    "end": "2976349"
  },
  {
    "text": "alright okay first of all great talks so someone I'm wondering what are the",
    "start": "2981180",
    "end": "2987119"
  },
  {
    "text": "functions to define is the source of the taint so we basically use anything that the",
    "start": "2987119",
    "end": "2993690"
  },
  {
    "text": "Dominic says Vicky kind of well notes as a source this is for example everything",
    "start": "2993690",
    "end": "2999539"
  },
  {
    "text": "that is the URL that is ref era that is cookies post message window name local",
    "start": "2999539",
    "end": "3007339"
  },
  {
    "text": "storage I'm missing something so I think basically that almost",
    "start": "3007339",
    "end": "3013190"
  },
  {
    "text": "everything that is not necessarily like easily controllable by the user for example a cookie isn't something that",
    "start": "3013190",
    "end": "3018410"
  },
  {
    "text": "you can as an attacker easily craft right but we still consider these to be to be so it looks like there's gonna be",
    "start": "3018410",
    "end": "3025039"
  },
  {
    "text": "I guess false positives in those cases where you retrieve some data from cookie or from web storage or those places",
    "start": "3025039",
    "end": "3031910"
  },
  {
    "text": "because those can be just regular data right record innocent data without",
    "start": "3031910",
    "end": "3036940"
  },
  {
    "text": "actually user able to control their content yes so I think that well in in",
    "start": "3036940",
    "end": "3043549"
  },
  {
    "text": "many cases so in we we actually found what by kind of manually looking at that some vulnerabilities where we actually",
    "start": "3043549",
    "end": "3050270"
  },
  {
    "text": "had kind of a flow to a cookie and then in the next page reload it would actually evil the cookie for I don't",
    "start": "3050270",
    "end": "3055730"
  },
  {
    "text": "know what reasons this would I totally agree sir is it possible to - for those",
    "start": "3055730",
    "end": "3061849"
  },
  {
    "text": "food to contain taint but it's also possible that for those case those those",
    "start": "3061849",
    "end": "3067369"
  },
  {
    "text": "fields not contain tainted all right like those few are now controlled by",
    "start": "3067369",
    "end": "3072770"
  },
  {
    "text": "attacker at all so so it depends yes so we have those cases where we have flows into for example local storage and out",
    "start": "3072770",
    "end": "3079279"
  },
  {
    "text": "of local storage again and have cross-site scripting because of that but I think it also depends on on the",
    "start": "3079279",
    "end": "3084410"
  },
  {
    "text": "attacker model you're looking at so for example recently I found XSS on on",
    "start": "3084410",
    "end": "3089990"
  },
  {
    "text": "Wikipedia which was a lot so what they did is they cache a jQuery version in",
    "start": "3089990",
    "end": "3096890"
  },
  {
    "text": "their in their local storage so they thought well why load jQuery at each page float we could just saw in local",
    "start": "3096890",
    "end": "3103010"
  },
  {
    "text": "storage so this is not really exploitable at first sight but sing-off for example during the wireless LAN at",
    "start": "3103010",
    "end": "3108680"
  },
  {
    "text": "the train station and somebody you have an active network attacker and you know",
    "start": "3108680",
    "end": "3113900"
  },
  {
    "text": "it because you're in a train station you wouldn't log into your Wikipedia account but what the attacker could do we could just",
    "start": "3113900",
    "end": "3119480"
  },
  {
    "text": "inject the frame and change that jQuery entry and put like this a little bit",
    "start": "3119480",
    "end": "3125270"
  },
  {
    "text": "like a cache poisoning attack so he could change that that that thing as an active network attacker then you go home",
    "start": "3125270",
    "end": "3131750"
  },
  {
    "text": "with your laptop and you're in the secure Network again and sync yeah now I can use my password in my email address",
    "start": "3131750",
    "end": "3137720"
  },
  {
    "text": "to log in but then there is that code already that Wikipedia just evolved in",
    "start": "3137720",
    "end": "3142940"
  },
  {
    "text": "the context of their application so this is something where where you could argue there's an uncontrollable local storage",
    "start": "3142940",
    "end": "3149630"
  },
  {
    "text": "value but it's still kind of exploitable depending on the attacker model okay so what about the students as ancient",
    "start": "3149630",
    "end": "3155750"
  },
  {
    "text": "functions so do you consider client-side sanitation's well I mean so in the end",
    "start": "3155750",
    "end": "3161420"
  },
  {
    "text": "if you use for example and called UI component or something and you pass something that their world here so you",
    "start": "3161420",
    "end": "3167030"
  },
  {
    "text": "have a string then you do a called UI component on it and then you do it or you use escape it's a better example and then you pass it to evolve right so as",
    "start": "3167030",
    "end": "3173870"
  },
  {
    "text": "like like the example short like VAR a equals and thing then actually it still taint it but you can't because you're",
    "start": "3173870",
    "end": "3181130"
  },
  {
    "text": "now using a sanitization function you can't break out of the string definition so you can execute any JavaScript so we",
    "start": "3181130",
    "end": "3187460"
  },
  {
    "text": "do well it's not like there is no way that any built-in functionality would",
    "start": "3187460",
    "end": "3192920"
  },
  {
    "text": "automatically clear the taint there is in our implementation or means where you can actively as a as a developer you",
    "start": "3192920",
    "end": "3199610"
  },
  {
    "text": "could say I want to lose the taint information now but then if you do that then it's it's your own fault right right so to answer the question surely",
    "start": "3199610",
    "end": "3206930"
  },
  {
    "text": "so so we didn't regard in these experiments we didn't regard client-side temptation we just said if it is if we",
    "start": "3206930",
    "end": "3213230"
  },
  {
    "text": "detect sanitizer we say it's safe we assume that when somebody uses sanitizer it's correct but that's in reality",
    "start": "3213230",
    "end": "3220010"
  },
  {
    "text": "that's not really the case so I think that's an open point where we could improve the detection capabilities to also write a I told agree and I think",
    "start": "3220010",
    "end": "3228020"
  },
  {
    "text": "the problem is how to how would you define a sanitizer could there could be just a user-defined function to loop",
    "start": "3228020",
    "end": "3233900"
  },
  {
    "text": "through the string a look at some do something that I think that we the really hard part yeah it's it's it's",
    "start": "3233900",
    "end": "3239080"
  },
  {
    "text": "very difficult and I think we we have we have a new version of this engine and I think in a new version we are kind of",
    "start": "3239080",
    "end": "3245619"
  },
  {
    "text": "able to do it but it's very difficult because what if for example C is people",
    "start": "3245619",
    "end": "3250780"
  },
  {
    "text": "use rec axis for URL pausing and they also use red Xs for sanitizers so if you",
    "start": "3250780",
    "end": "3256869"
  },
  {
    "text": "can bypass a certain red X this is now that you bypass the sanitizer that you just bypass the like the URL pausing",
    "start": "3256869",
    "end": "3262810"
  },
  {
    "text": "function that extracts parameter from from the URL so this is difficult we",
    "start": "3262810",
    "end": "3268030"
  },
  {
    "text": "have kind of ideas to do that cool all right one more question so is your taint",
    "start": "3268030",
    "end": "3274510"
  },
  {
    "text": "tracking on the pipe level on a string level or on object so basically the implementation works such that we can so",
    "start": "3274510",
    "end": "3282520"
  },
  {
    "text": "far for each string that is in memory we kind of allocate the exact same amount of bytes behind the string and we have",
    "start": "3282520",
    "end": "3288369"
  },
  {
    "text": "kind of a support from basically for the first character they would in order to get that information you would go to first character plus length of string",
    "start": "3288369",
    "end": "3295030"
  },
  {
    "text": "retrieve that byte and in that byte we actually have kind of encoded the the source so for example is the location is",
    "start": "3295030",
    "end": "3301600"
  },
  {
    "text": "it the hash or something else as well as the three built in County functionalities so there is actually a",
    "start": "3301600",
    "end": "3306880"
  },
  {
    "text": "bit that is being flipped on and off for example if you call escape then you can actually can actually still see the flow",
    "start": "3306880",
    "end": "3313540"
  },
  {
    "text": "of data and then in the end see okay this went through escape at some point so it's it's encoded so this is on a for",
    "start": "3313540",
    "end": "3320290"
  },
  {
    "text": "each for each byte or for each character in the string there's one body allocated which holds this the state information",
    "start": "3320290",
    "end": "3326970"
  },
  {
    "text": "so do also record-holder the flow or only the source in the sink party do you",
    "start": "3326970",
    "end": "3332170"
  },
  {
    "text": "do you record a hold in a flow of how it changes stream problem so our new engine does that actually be the old one",
    "start": "3332170",
    "end": "3339369"
  },
  {
    "text": "doesn't but in the new engine we actually swear we just having it or we just in submission over of a paper that",
    "start": "3339369",
    "end": "3345820"
  },
  {
    "text": "kind of focuses on just that to also find out how often there's a string touched between between source and sink",
    "start": "3345820",
    "end": "3351490"
  },
  {
    "text": "and I think the maximum case is 290 times so it's one another operations on the string and so this would also be",
    "start": "3351490",
    "end": "3358330"
  },
  {
    "text": "very interesting to see whether static analysis will actually do a good job in these cases or it would not so but this",
    "start": "3358330",
    "end": "3364150"
  },
  {
    "text": "is something that is basically upcoming in the new version okay very cool thanks that's another",
    "start": "3364150",
    "end": "3369430"
  },
  {
    "text": "question to your left I hope you talk",
    "start": "3369430",
    "end": "3376270"
  },
  {
    "text": "tomorrow cross-site scripting attacks is",
    "start": "3376270",
    "end": "3383740"
  },
  {
    "text": "something that web application firewalls which protect manual application protect",
    "start": "3383740",
    "end": "3388780"
  },
  {
    "text": "against the a he's one of the vectors that you managed to to bypass the XSS",
    "start": "3388780",
    "end": "3395350"
  },
  {
    "text": "audit or was done on application that was protected with occasion firewall I",
    "start": "3395350",
    "end": "3402120"
  },
  {
    "text": "mean I I guess so so we called a lot of websites but we did that in an",
    "start": "3402120",
    "end": "3407290"
  },
  {
    "text": "completely automated fashion so we didn't check all the cases manually so so yeah we have a lot of vulnerabilities",
    "start": "3407290",
    "end": "3415390"
  },
  {
    "text": "that actually not triggered so we generated roughly about 180,000 exploits and we triggered on 90 thousand of the",
    "start": "3415390",
    "end": "3424720"
  },
  {
    "text": "exploits but it's also an open research what happened to the other ninety thousand to why they didn't did not",
    "start": "3424720",
    "end": "3430630"
  },
  {
    "text": "trigger so maybe this is one of the cases where but also one important fact",
    "start": "3430630",
    "end": "3436030"
  },
  {
    "text": "to note is that oftentimes the payload is stored in the hash of the of the UL",
    "start": "3436030",
    "end": "3441220"
  },
  {
    "text": "and the hash isn't actually sent to the server so the web application file but even on the server side in the log files you won't see anything because it's in",
    "start": "3441220",
    "end": "3447700"
  },
  {
    "text": "the hash which is not which is not being sent to to the server and even then so",
    "start": "3447700",
    "end": "3453730"
  },
  {
    "text": "I'm not sure well I I recently found a cross on scripting vulnerability don't make cellphone ability that was in a",
    "start": "3453730",
    "end": "3459370"
  },
  {
    "text": "search so you get parameter which was definitely being sent to the server in a well how do I call it like a large",
    "start": "3459370",
    "end": "3466570"
  },
  {
    "text": "online vendor I don't want to be too specific here and I'm pretty sure that",
    "start": "3466570",
    "end": "3472210"
  },
  {
    "text": "they have something like that in place right so they will have some form of web application firewall that tries to",
    "start": "3472210",
    "end": "3477670"
  },
  {
    "text": "detect these these payloads and in this case it went through I can't really say I don't know why couldn't I could ask",
    "start": "3477670",
    "end": "3483100"
  },
  {
    "text": "them so hey do we have a web application firewall but my my most well the most famous example of a web application",
    "start": "3483100",
    "end": "3489700"
  },
  {
    "text": "firewall fail that I found was the most vulnerability we were trying to exploit and it didn't work in an automated",
    "start": "3489700",
    "end": "3495010"
  },
  {
    "text": "fashion because the the web application I would actually block us but then I looked at the UL and there was a second parameter would look a lot",
    "start": "3495010",
    "end": "3500990"
  },
  {
    "text": "like base64 and it turns out that they would actually have this parameter that was also really in the get parameter and",
    "start": "3500990",
    "end": "3508280"
  },
  {
    "text": "inside the client-side JavaScript code they were decode the base64 and then Evol it and obviously the the Web",
    "start": "3508280",
    "end": "3514520"
  },
  {
    "text": "Application Firewall has no way of determining that this is actually basics before it has to decode it and so on and so forth so again I think of application",
    "start": "3514520",
    "end": "3521210"
  },
  {
    "text": "firewall does not really help in these these edge cases at least but yeah I",
    "start": "3521210",
    "end": "3526220"
  },
  {
    "text": "mean we we don't know it would be interesting to see whether we would actually get arrows from a Web",
    "start": "3526220",
    "end": "3531740"
  },
  {
    "text": "Application Firewall if it triggered or if you try to trigger something it's a good question this is something that we",
    "start": "3531740",
    "end": "3537470"
  },
  {
    "text": "can definitely think about Thanks thank you okay with any more questions so I",
    "start": "3537470",
    "end": "3547400"
  },
  {
    "text": "have seen you have implement you have even on a internet explorer so you do it",
    "start": "3547400",
    "end": "3553610"
  },
  {
    "text": "as a plugin so we didn't so the the you mean these statistics right here right",
    "start": "3553610",
    "end": "3560120"
  },
  {
    "text": "the XSS you have implemented sorry no I'm blind",
    "start": "3560120",
    "end": "3566500"
  },
  {
    "text": "sorry okay so we didn't it's okay so",
    "start": "3566500",
    "end": "3573110"
  },
  {
    "text": "just again for the cross-site scripting detection in the Internet Explorer are",
    "start": "3573110",
    "end": "3579620"
  },
  {
    "text": "you detecting it right by implementing as a in for Internet Explorer so for",
    "start": "3579620",
    "end": "3586160"
  },
  {
    "text": "this we didn't try to do anything with IE what we did do so for for previous",
    "start": "3586160",
    "end": "3591560"
  },
  {
    "text": "work we kind of had vulnerabilities that would only trigger in Internet Explorer because Internet Explorer doesn't encode for example the gap parameters are not",
    "start": "3591560",
    "end": "3597980"
  },
  {
    "text": "encoded automatically in IE and what we basically did is we opened can wait one crawler site that would just open a",
    "start": "3597980",
    "end": "3605270"
  },
  {
    "text": "pop-up and the payload would then be to send a post message from this pop-up if the payload trigger back to our our main",
    "start": "3605270",
    "end": "3612320"
  },
  {
    "text": "window to to validate it but we didn't do any kind of like a development for for a or something but the XSS filter in",
    "start": "3612320",
    "end": "3618500"
  },
  {
    "text": "IE is kind of shipped from from Microsoft directly I see",
    "start": "3618500",
    "end": "3623500"
  },
  {
    "text": "well it's 4:30 then let's go back to the cat picture no all right well then thank",
    "start": "3625750",
    "end": "3633140"
  },
  {
    "text": "you very much hope you enjoyed the talk",
    "start": "3633140",
    "end": "3636760"
  }
]