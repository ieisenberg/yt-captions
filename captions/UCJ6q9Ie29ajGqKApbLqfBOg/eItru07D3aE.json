[
  {
    "start": "0",
    "end": "67000"
  },
  {
    "text": "[Music] [Laughter]",
    "start": "1610",
    "end": "10260"
  },
  {
    "text": "here in the breaking things track uh tonight's sorry this morning speaker is Rafal voids Chuck on his",
    "start": "10639",
    "end": "17680"
  },
  {
    "text": "speech is a stitch in [Music]",
    "start": "17680",
    "end": "23279"
  },
  {
    "text": "time good morning ladies and gentlemen yeah this stock will be",
    "start": "23279",
    "end": "28960"
  },
  {
    "text": "about a very unique case of vulnerability that affected multiple operating system and was discovered",
    "start": "28960",
    "end": "36440"
  },
  {
    "text": "earlier this this year so the agenda is first we'll do very quick high level",
    "start": "36440",
    "end": "42399"
  },
  {
    "text": "overview of the vulnerability then I will refresh your memory how exceptions and cisal behave",
    "start": "42399",
    "end": "49000"
  },
  {
    "text": "on x86 64 architecture in order to be able to understand the details of the",
    "start": "49000",
    "end": "54480"
  },
  {
    "text": "vulnerability then we'll talk about the techniques necessar necessary to exploit",
    "start": "54480",
    "end": "59680"
  },
  {
    "text": "the issue and then we will finish off with some more or less related musings which hopefully you will find",
    "start": "59680",
    "end": "66600"
  },
  {
    "text": "interesting so it's promised very high altitude",
    "start": "66600",
    "end": "71759"
  },
  {
    "start": "67000",
    "end": "67000"
  },
  {
    "text": "overview this vulnerability has been assigned identifier CV",
    "start": "71759",
    "end": "77799"
  },
  {
    "text": "201227 and respective C vulnerability note number and the letter description",
    "start": "77799",
    "end": "85119"
  },
  {
    "text": "of the letter goes like this C 64bit operating system privilege escalation vulnerable",
    "start": "85119",
    "end": "90840"
  },
  {
    "text": "on Intel CPU Hardware so just to make it clear it's a",
    "start": "90840",
    "end": "96320"
  },
  {
    "text": "privilege escalation vulnerability not a remote code execution and the impact is",
    "start": "96320",
    "end": "101799"
  },
  {
    "text": "untrusted unprivileged user mode code can get Kel privileges so full control over the",
    "start": "101799",
    "end": "107640"
  },
  {
    "text": "machine and the root cause of the problem is that on Intel CPU uh the semantics of the assist",
    "start": "107640",
    "end": "114360"
  },
  {
    "text": "instruction is a little bit counterintuitive uh it happen that when",
    "start": "114360",
    "end": "119399"
  },
  {
    "text": "this instru is executed with nonic non canonical return address in rcx register",
    "start": "119399",
    "end": "124759"
  },
  {
    "text": "it throws an exception in ring zero so don't worry more details are coming for now we just in know keywords",
    "start": "124759",
    "end": "132319"
  },
  {
    "text": "mode high level over and the PES were released on 12 June this year so not a",
    "start": "132319",
    "end": "137640"
  },
  {
    "text": "zero day in any way the affected systems",
    "start": "137640",
    "end": "142680"
  },
  {
    "text": "once again only 64bit versions of the OS is running on Intel CPUs are vulnerable",
    "start": "142680",
    "end": "148480"
  },
  {
    "text": "so 32bit OS running or running on AMD CPUs they are not",
    "start": "148480",
    "end": "154480"
  },
  {
    "text": "vulnerable so exam with PG guests is vulnerable and that's quite notable I",
    "start": "154480",
    "end": "160120"
  },
  {
    "text": "would say because as far as I know this is the first vulnerability in the core of the xen",
    "start": "160120",
    "end": "165560"
  },
  {
    "text": "hypervisor uh that allows totally unprivileged non driver domain to break",
    "start": "165560",
    "end": "170640"
  },
  {
    "text": "out of the VM confinement to get caral privileges so really something very",
    "start": "170640",
    "end": "176400"
  },
  {
    "text": "unique and other effective systems are Windows 7 Windows 2008 are2 3 BSD netbsd",
    "start": "176400",
    "end": "182840"
  },
  {
    "text": "vulnerabilities in these systems are much more common but still",
    "start": "182840",
    "end": "188080"
  },
  {
    "text": "this vulnerability is pretty unique in itself worth",
    "start": "188080",
    "end": "193120"
  },
  {
    "start": "193000",
    "end": "193000"
  },
  {
    "text": "studying and as you may imagine it's not that straightforward to coordinate patches relases with four different",
    "start": "193120",
    "end": "199720"
  },
  {
    "text": "vendors all of them have different priorities different schedules etc etc",
    "start": "199720",
    "end": "205560"
  },
  {
    "text": "so the conversation started with Zen security team and in fact it was pretty fruitful also from a technical point of",
    "start": "205560",
    "end": "211519"
  },
  {
    "text": "view they have provided quite quite a lot of insight then other affective",
    "start": "211519",
    "end": "217000"
  },
  {
    "text": "software vendors were were contacted and then the situation got a bit complicated because you know differences in your",
    "start": "217000",
    "end": "223040"
  },
  {
    "text": "opinion when to relase Patches and then Intel user broing guys tried to help and",
    "start": "223040",
    "end": "229280"
  },
  {
    "text": "then alls well that ends well uh every vendor has released patches on the same day so that was the goal of the",
    "start": "229280",
    "end": "237439"
  },
  {
    "start": "237000",
    "end": "237000"
  },
  {
    "text": "exercise yeah the list of known nonaffected systems is even more interesting Apple OSX is not vulnerable",
    "start": "237439",
    "end": "244720"
  },
  {
    "text": "at least that's what they say to C in an official statement I did not investigate",
    "start": "244720",
    "end": "250200"
  },
  {
    "text": "and nther open BSD 5 or newer is not vulnerable but the tiny thing is that uh",
    "start": "250200",
    "end": "257880"
  },
  {
    "text": "they fixed the last remaining exploitation vector by accident during the code cleanup not really knowing that",
    "start": "257880",
    "end": "263800"
  },
  {
    "text": "the problem is really there so my reaction to that was lucky bastards it was really close this time right",
    "start": "263800",
    "end": "270680"
  },
  {
    "text": "but but on reflection when you think about it it's not just dumb black right",
    "start": "270680",
    "end": "276199"
  },
  {
    "text": "if you reduce the entry points into the kernel make the security critical code more uniform then sometimes you are",
    "start": "276199",
    "end": "284039"
  },
  {
    "text": "justly rewarded so not really a case of total dumb black this time but it really",
    "start": "284039",
    "end": "289720"
  },
  {
    "text": "pays in in comparison with the Linux case because uh Linux Kel developers fixed the issue consciously purposefully",
    "start": "289720",
    "end": "296759"
  },
  {
    "text": "really knowing what's going on six years ago they have even assigned CV number for",
    "start": "296759",
    "end": "303240"
  },
  {
    "text": "that so this is even even more shocking you can imagine my my jaw literally",
    "start": "303240",
    "end": "308560"
  },
  {
    "text": "dropping to the floor because I thought I have discovered something really unique and then I learned that this is",
    "start": "308560",
    "end": "314199"
  },
  {
    "text": "in fact six years old vulnerability not a pleasant",
    "start": "314199",
    "end": "319440"
  },
  {
    "text": "experience so the main question here is why so many systems were left vulnerable",
    "start": "319440",
    "end": "325120"
  },
  {
    "text": "after 2006 all the remaining operating systems Maybe the exception of windows",
    "start": "325120",
    "end": "330840"
  },
  {
    "text": "were vulnerable throughout all of this time right and one possible explanation is",
    "start": "330840",
    "end": "338280"
  },
  {
    "start": "335000",
    "end": "335000"
  },
  {
    "text": "some you know problems with communication of the issue Linux developers have this habit of you know",
    "start": "338280",
    "end": "343479"
  },
  {
    "text": "not shouting from the rooftops about security issues right they just fix it they just you know make a proper",
    "start": "343479",
    "end": "349800"
  },
  {
    "text": "statement in get Comet but but nothing about that and for instance when when you have a look at the cve entry",
    "start": "349800",
    "end": "356680"
  },
  {
    "text": "assigned for this Linux vulnerability you see all the symptoms are there right",
    "start": "356680",
    "end": "362720"
  },
  {
    "text": "C instruction is mentioned the exception Handler running on the own stock etc etc",
    "start": "362720",
    "end": "368240"
  },
  {
    "text": "but it's still well not clear that it might affect other system only Linux Kel is",
    "start": "368240",
    "end": "373720"
  },
  {
    "text": "mentioned so it's really difficult and also impact is not specified",
    "start": "373720",
    "end": "379199"
  },
  {
    "text": "explicitly so if you're an developer of other operating system you look at the CD entry you see ah just something Linux",
    "start": "379199",
    "end": "386840"
  },
  {
    "text": "specific no impact so it's not not very interesting even more uh when you look",
    "start": "386840",
    "end": "392759"
  },
  {
    "text": "at the security Focus database and the item 17541 it's title Linux scner",
    "start": "392759",
    "end": "399000"
  },
  {
    "text": "denial uh of service vulnerability so apparently it was not clear for everyone",
    "start": "399000",
    "end": "404160"
  },
  {
    "text": "that this issue is actually exploitable and we will see in in in you",
    "start": "404160",
    "end": "410000"
  },
  {
    "text": "know excruciating details that this is not only a denial of service issue so",
    "start": "410000",
    "end": "415800"
  },
  {
    "text": "apparently other vendors did not not know is a problem immediately were're",
    "start": "415800",
    "end": "421080"
  },
  {
    "text": "not warned in an explicit way and that resulted in in you know all the system",
    "start": "421080",
    "end": "426240"
  },
  {
    "text": "remaining exploitable for 6 years so this is an explanation of the title of",
    "start": "426240",
    "end": "431479"
  },
  {
    "text": "of the talk a stitching time in 2006 could have saved the four operating",
    "start": "431479",
    "end": "436720"
  },
  {
    "text": "systems right so it's also the reason for for the talk just to make you know it",
    "start": "436720",
    "end": "443599"
  },
  {
    "text": "explicit for everyone who follows some security events that the semantics of the sist instruction on Intel CPUs is",
    "start": "443599",
    "end": "449960"
  },
  {
    "text": "really weird so developers beware right okay and final finally are",
    "start": "449960",
    "end": "458400"
  },
  {
    "text": "privilege escalations vulnerability even worth talking about right because again",
    "start": "458400",
    "end": "463840"
  },
  {
    "text": "first you have to be on the system to exploit it right so on server systems",
    "start": "463840",
    "end": "469280"
  },
  {
    "text": "when you have untrusted users then obviously it's very relevant right you don't want to allow every possible user",
    "start": "469280",
    "end": "476599"
  },
  {
    "text": "on your system to get full control over much machine but even even maybe it's",
    "start": "476599",
    "end": "482280"
  },
  {
    "text": "not obvious but even on desktop systems which are commonly only you know single user uh systems they this kind of vulner",
    "start": "482280",
    "end": "490560"
  },
  {
    "text": "vulnerabilities are also very relevant because they allow to escape from many sand boxing Solutions and sandboxing are",
    "start": "490560",
    "end": "498000"
  },
  {
    "text": "you know omnipresent at the moment you have security enhanced Linux you have capsicum on on BSD Chrome",
    "start": "498000",
    "end": "504720"
  },
  {
    "text": "sandbox Adobe Reader also runs in a sandbox and in many cases all these s",
    "start": "504720",
    "end": "511599"
  },
  {
    "text": "boxing Solutions can be broken by abusing a single kernal",
    "start": "511599",
    "end": "516760"
  },
  {
    "text": "vulnerability at least a proper one and you can read on on Chrome's blog",
    "start": "516760",
    "end": "522360"
  },
  {
    "text": "about you know really crazy things that researchers have been doing to break out of chrome sandbox like you have to chain",
    "start": "522360",
    "end": "528160"
  },
  {
    "text": "10 or 14 different vulnerabilities right to get a full bypass of of the Chrome sandbox but in fact a single Cal",
    "start": "528160",
    "end": "534600"
  },
  {
    "text": "vulnerability is enough so I think it's it's very relevant and also multiple",
    "start": "534600",
    "end": "540360"
  },
  {
    "text": "issues like this are very rare so it's again I think worth talking",
    "start": "540360",
    "end": "546160"
  },
  {
    "start": "546000",
    "end": "546000"
  },
  {
    "text": "about okay so as promised now we'll dive into some details about cisal and",
    "start": "546160",
    "end": "552279"
  },
  {
    "text": "exceptions on x86 64 I hope I hope most of you are more or less you know",
    "start": "552279",
    "end": "558279"
  },
  {
    "text": "familiar with the subject because uh the chapter exceptions and interrupts occupies occupies about 70 pages in",
    "start": "558279",
    "end": "565680"
  },
  {
    "text": "indel manual so it's impossible to you know do an exhaustive production so just",
    "start": "565680",
    "end": "571120"
  },
  {
    "text": "highlight a couple of most important fact required to understand the nature",
    "start": "571120",
    "end": "576880"
  },
  {
    "start": "572000",
    "end": "572000"
  },
  {
    "text": "of the vulnerab okay so the first slide is about what happens when exception is",
    "start": "576880",
    "end": "582399"
  },
  {
    "text": "raised in while we are in ring zero uh so you see okay CS is the ring",
    "start": "582399",
    "end": "590839"
  },
  {
    "text": "01 uh instruction pointers points to some kernel memory and this instruction is about to throw an exception and the",
    "start": "590839",
    "end": "597720"
  },
  {
    "text": "stack pointer points to some kernels generally the red color means user mode memory the green color means uh Kel",
    "start": "597720",
    "end": "606000"
  },
  {
    "text": "memory and then if this instruction throws an exception in this case it will be illegal op code what",
    "start": "606000",
    "end": "613160"
  },
  {
    "text": "happens control is transferred to the exception Handler and some information",
    "start": "613160",
    "end": "618519"
  },
  {
    "text": "about the processor state is pushed on the current kernel stack right so that",
    "start": "618519",
    "end": "625000"
  },
  {
    "text": "the Handler can execute do its job and then possibly restore execution based on this processor Contex",
    "start": "625000",
    "end": "632480"
  },
  {
    "text": "context uh and when you look at it it's very similar how a normal procedure calls operates right when you do the",
    "start": "632480",
    "end": "639079"
  },
  {
    "text": "call instruction then the control is transferred somewhere and the information about the processor State",
    "start": "639079",
    "end": "646399"
  },
  {
    "text": "return address is pushed on the current kernel stock okay and",
    "start": "646399",
    "end": "652920"
  },
  {
    "text": "now case number two exception while we are in user mode in ring three so this",
    "start": "652920",
    "end": "659040"
  },
  {
    "text": "time uh we are in ring three instruction pointers points to the same ud2",
    "start": "659040",
    "end": "665680"
  },
  {
    "text": "instruction that will throw an exception in in a moment and the RSP register points to some user mode stack then what",
    "start": "665680",
    "end": "672760"
  },
  {
    "text": "happens when the exception is triggered there is something very very different from the previous case the first thing",
    "start": "672760",
    "end": "678959"
  },
  {
    "text": "that processor does is to switch the stack pointer processor switches a stack",
    "start": "678959",
    "end": "684240"
  },
  {
    "text": "pointer to some dedicated location in the kernel area this is address is",
    "start": "684240",
    "end": "689560"
  },
  {
    "text": "controllable by the operating system only and then uh it switches to to ring",
    "start": "689560",
    "end": "695399"
  },
  {
    "text": "zero of course because exception handlers running in ining zero then as as as it previously pushes the exception",
    "start": "695399",
    "end": "701120"
  },
  {
    "text": "record on the stack and transfer control to the exception",
    "start": "701120",
    "end": "706839"
  },
  {
    "text": "Handler so there's something very very different in this case the stack switch",
    "start": "706839",
    "end": "712000"
  },
  {
    "text": "right and why is it important um we will see more details in a while but for now",
    "start": "712000",
    "end": "718720"
  },
  {
    "text": "let's say it's it's a necessary security measure right because uh what would happen if there was no stack stack",
    "start": "718720",
    "end": "725399"
  },
  {
    "text": "switch just imagine for for a second and in such case malicious user mode code",
    "start": "725399",
    "end": "732040"
  },
  {
    "text": "could set stack pointer to something invalid that's only one one possible case of of problem but for instance",
    "start": "732040",
    "end": "738120"
  },
  {
    "text": "assign zero to to RSP and then then when exception would happen and there would be no stack switch then the processor",
    "start": "738120",
    "end": "744360"
  },
  {
    "text": "would try to push the exception record on the current stock which points to some in un ma memory and that generally",
    "start": "744360",
    "end": "751279"
  },
  {
    "text": "means trouble for the operating system what kind of trouble precisely depends on the implementation but it usually",
    "start": "751279",
    "end": "757519"
  },
  {
    "text": "results in double fault and system shut so what processor what processor does is",
    "start": "757519",
    "end": "763480"
  },
  {
    "text": "first it ensures it has the same stack right regardless what the stack was at the moment of the exception and then",
    "start": "763480",
    "end": "769720"
  },
  {
    "text": "carries on pushes the exception record on the stack uh in other words when we are in",
    "start": "769720",
    "end": "776120"
  },
  {
    "text": "ring zero the current value of the stack pointer is somehow trusted right processor trusts that if the ring zero",
    "start": "776120",
    "end": "784440"
  },
  {
    "text": "code throws an exception it knows what what it's doing right there is no need to adjust the stack pointer it must",
    "start": "784440",
    "end": "790440"
  },
  {
    "text": "point to the well same location in in in the kernel kernel",
    "start": "790440",
    "end": "795560"
  },
  {
    "text": "memory but as as you probably are aware when the word trust appears then things",
    "start": "795560",
    "end": "802160"
  },
  {
    "text": "are almost guaranteed to go always sooner or later particularly if we are",
    "start": "802160",
    "end": "808199"
  },
  {
    "text": "in ring zero and somehow stack pointer is not sayane if it's controlled by the",
    "start": "808199",
    "end": "814959"
  },
  {
    "text": "untrusted user mode then we must be very careful to not allow an exception to happen right because if you are in ring",
    "start": "814959",
    "end": "822480"
  },
  {
    "text": "zero then there is no stack switch during the exception and the stack pointer must be same uh at the moment",
    "start": "822480",
    "end": "829399"
  },
  {
    "text": "when the exception happens and generally uh it's it's very",
    "start": "829399",
    "end": "834800"
  },
  {
    "text": "unusual if a ring zero code runs with a stack controlled by the user mode right",
    "start": "834800",
    "end": "841839"
  },
  {
    "text": "stack pointer is a very you know crucial component of the execution state so normally all all say kernel code should",
    "start": "841839",
    "end": "847920"
  },
  {
    "text": "run with the same kernel St",
    "start": "847920",
    "end": "854399"
  },
  {
    "start": "852000",
    "end": "852000"
  },
  {
    "text": "okay yeah I I have already said that there's one one more thing uh there",
    "start": "854399",
    "end": "860759"
  },
  {
    "text": "is mechanism named interrupt stack table which allows to force the task switch",
    "start": "860759",
    "end": "866680"
  },
  {
    "text": "even when an exception happens in ring zero right but Intel's manual suggest that this",
    "start": "866680",
    "end": "872240"
  },
  {
    "text": "feature should be used only from really catastrophic events like machine check exception double fault or nmi and that's",
    "start": "872240",
    "end": "878959"
  },
  {
    "text": "exactly what normal operating system do they don't use it feature don't use this feature for for normal Exceptions there",
    "start": "878959",
    "end": "886199"
  },
  {
    "text": "are problems is this with this approach for instance recursive exceptions are not handled well etc",
    "start": "886199",
    "end": "893160"
  },
  {
    "text": "etc okay and now let's have a look how a cisal instruction behaves the purp",
    "start": "893160",
    "end": "899040"
  },
  {
    "start": "894000",
    "end": "894000"
  },
  {
    "text": "purpose of this instruction is to you know enter kernel mode in an efficient manner so that the kernel can execute",
    "start": "899040",
    "end": "905040"
  },
  {
    "text": "the system call right just just as a name indicates so so what",
    "start": "905040",
    "end": "912320"
  },
  {
    "text": "happens we are in ring three the instruction pointer points to the cisal instruction it's to bites actually and",
    "start": "912440",
    "end": "919720"
  },
  {
    "text": "let's say that the stack is in in user mode memory then when this instruction",
    "start": "919720",
    "end": "925880"
  },
  {
    "text": "is executed we switch to ring zero right uh because",
    "start": "925880",
    "end": "933680"
  },
  {
    "text": "uh generally system called Handler must must run in zero but observe again",
    "start": "933680",
    "end": "939199"
  },
  {
    "text": "instruction pointer is changed to the Cisco handr but observe that the stack is not switched right and this is really",
    "start": "939199",
    "end": "947079"
  },
  {
    "text": "really something that sticks out at least at the entry of the cisal Handler the stack stays the same it's it",
    "start": "947079",
    "end": "955079"
  },
  {
    "text": "has a user mode value and it works because this the cisal instruction itself doesn't put any context on the",
    "start": "955079",
    "end": "961120"
  },
  {
    "text": "stack right for instance the return address which is usually you know after the cisal instruction is put in the rcx",
    "start": "961120",
    "end": "967839"
  },
  {
    "text": "register here but again it it is really a bizarre",
    "start": "967839",
    "end": "973440"
  },
  {
    "text": "situation we have a ring zero code running with the stack controlled by the user",
    "start": "973440",
    "end": "979959"
  },
  {
    "text": "mode and that particular means as I have already mentioned that",
    "start": "979959",
    "end": "986079"
  },
  {
    "start": "980000",
    "end": "980000"
  },
  {
    "text": "this is a dangerous situation but particularly uh the Cisco",
    "start": "986079",
    "end": "991600"
  },
  {
    "text": "Handler cannot call any higher level code functions like C code functions",
    "start": "991600",
    "end": "997279"
  },
  {
    "text": "right because in order to call a function it must put the return address on the stack so the first thing that the",
    "start": "997279",
    "end": "1003839"
  },
  {
    "text": "CIS Handler does it saves the user mode RSP somewhere and then assigns some same",
    "start": "1003839",
    "end": "1010360"
  },
  {
    "text": "value to the stack pointer right so as you see the inst The Cisco",
    "start": "1010360",
    "end": "1015519"
  },
  {
    "text": "instruction itself does not uh change the stack but the cisal Handler is is",
    "start": "1015519",
    "end": "1021319"
  },
  {
    "text": "tasked with it right it's the responsibility of the cisal Handler to set RSP to some same value and then when",
    "start": "1021319",
    "end": "1027918"
  },
  {
    "text": "RSP is saying the Cisco hler does its Job Calls function etc etc and then when",
    "start": "1027919",
    "end": "1033438"
  },
  {
    "text": "it's about to return again it must restore the user mode RSP value because",
    "start": "1033439",
    "end": "1039240"
  },
  {
    "text": "the companion Sy instruction that returns to the user mode again does not touch RSP so it must restore the initial",
    "start": "1039240",
    "end": "1047199"
  },
  {
    "text": "uh RSP value and then issue the sist",
    "start": "1047199",
    "end": "1052480"
  },
  {
    "start": "1052000",
    "end": "1052000"
  },
  {
    "text": "instruction okay so again I told it many times if an exception was to happen in a",
    "start": "1052480",
    "end": "1059720"
  },
  {
    "text": "cisal Handler Handler when RSP value is still controlled by the attacker it would be a problem so we may may have a",
    "start": "1059720",
    "end": "1067360"
  },
  {
    "text": "look at at this this instructions in red because they execute with untrusted",
    "start": "1067360",
    "end": "1072640"
  },
  {
    "text": "stack pointer and is it possible that an exception will be raised and assignments to RSP just move",
    "start": "1072640",
    "end": "1081640"
  },
  {
    "text": "instructions right assuming the same configuration of the OS nothing bad can happen but how about the CIS instruction",
    "start": "1081640",
    "end": "1089640"
  },
  {
    "text": "itself again as you see the cisr instruction is executed again with user",
    "start": "1089640",
    "end": "1095720"
  },
  {
    "text": "mode RSP so can a sister instruction throw an",
    "start": "1095720",
    "end": "1101000"
  },
  {
    "text": "exception so let's have a look at the relevant manual entry about the CIS",
    "start": "1101000",
    "end": "1108200"
  },
  {
    "text": "instruction and as you see there are a couple of of cases when it throws an exception but if you look closely they",
    "start": "1108200",
    "end": "1114840"
  },
  {
    "text": "are really not relevant they can happen when the processor is too old to support the C instruction or when the CIS",
    "start": "1114840",
    "end": "1122120"
  },
  {
    "text": "instruction is executed in not in ring zero etc etc etc so the conclusion is no",
    "start": "1122120",
    "end": "1128520"
  },
  {
    "text": "C thre cannot throw an exception so we cool there is no problem here right",
    "start": "1128520",
    "end": "1134000"
  },
  {
    "text": "except for a tiny fact that you see this is an AMD manual right so yes on AMD",
    "start": "1134000",
    "end": "1140320"
  },
  {
    "text": "processors CIS does not show an exception but how about Intel processors well everybody knows they are compatible",
    "start": "1140320",
    "end": "1147120"
  },
  {
    "text": "right they license the technology so it should behave the same right so let's have a look and again you see the",
    "start": "1147120",
    "end": "1155480"
  },
  {
    "start": "1152000",
    "end": "1152000"
  },
  {
    "text": "exceptions are possible if the system is misconfigured but then there is",
    "start": "1155480",
    "end": "1160840"
  },
  {
    "text": "another very very explicit explicit check if the ECX register contains a",
    "start": "1160840",
    "end": "1166880"
  },
  {
    "text": "non-canonical address so the CIS instruction would try to return to a non-canonical address then an exception",
    "start": "1166880",
    "end": "1173480"
  },
  {
    "text": "is raised by the CIS instruction itself right the GP is raised General",
    "start": "1173480",
    "end": "1179000"
  },
  {
    "text": "protection General protection F so it is slight deviation from you",
    "start": "1179000",
    "end": "1185200"
  },
  {
    "text": "know the semantics observed on AMD processors very very slight one it doesn't happen in real life ever but the",
    "start": "1185200",
    "end": "1194039"
  },
  {
    "start": "1194000",
    "end": "1194000"
  },
  {
    "text": "impact of of the slight you know change of semantics is is total compromise of",
    "start": "1194039",
    "end": "1199600"
  },
  {
    "text": "the security of the systems total ring three to ring zero at the",
    "start": "1199600",
    "end": "1204640"
  },
  {
    "text": "escalation okay so that was few details now now let's have a look how precisely",
    "start": "1205559",
    "end": "1211880"
  },
  {
    "start": "1206000",
    "end": "1206000"
  },
  {
    "text": "we can can we exploit this fact that the C instruction throws an exception while it is still in ring zero mode but the",
    "start": "1211880",
    "end": "1218400"
  },
  {
    "text": "stack pointer is controlled by the user mode just a quick reminder again I hope",
    "start": "1218400",
    "end": "1225440"
  },
  {
    "start": "1223000",
    "end": "1223000"
  },
  {
    "text": "most of you know it what is a non-canonical address um so on x86",
    "start": "1225440",
    "end": "1232480"
  },
  {
    "text": "64 systems the pointers are obviously 64 bit Longs but in fact not all",
    "start": "1232480",
    "end": "1239159"
  },
  {
    "text": "64bit virtual address SPAC is supported because that would require too many levels of page tables and it will be",
    "start": "1239159",
    "end": "1245200"
  },
  {
    "text": "inefficient so instead the pointers you can set only lower 48 bits of the of the",
    "start": "1245200",
    "end": "1251280"
  },
  {
    "text": "pointer in an arbitrary way and if the pointer is supposed to be canonical valid then the top 16 bits of the",
    "start": "1251280",
    "end": "1257840"
  },
  {
    "text": "pointer must be the same as the bit number 47 it must be all all ones or all zero",
    "start": "1257840",
    "end": "1266120"
  },
  {
    "text": "so there are two ranges of canonical addresses right from 0 to one shifted 47",
    "start": "1266120",
    "end": "1271799"
  },
  {
    "text": "so all top 17 bits are zero and the other one symmetrical at the end of the address space all the top 17 bits are",
    "start": "1271799",
    "end": "1280240"
  },
  {
    "text": "R1 and if uh the pointer who has a value from this black hole range is referenced",
    "start": "1280240",
    "end": "1287440"
  },
  {
    "text": "then the processor does not allow it it immediately throws General protection",
    "start": "1287440",
    "end": "1292640"
  },
  {
    "text": "exception so in fact again the address space is 48 bit long 48 bits long split",
    "start": "1292640",
    "end": "1298880"
  },
  {
    "text": "into these two two ranges the valid valid range of virtual",
    "start": "1298880",
    "end": "1305120"
  },
  {
    "text": "addresses so why we have seen that you know there is a case when the CIS",
    "start": "1305120",
    "end": "1311000"
  },
  {
    "text": "instruction throws GP exception so why it normally never happens because normally uh the Cisco instruction is is",
    "start": "1311000",
    "end": "1319120"
  },
  {
    "text": "somewhere in the middle of of the of this first canonical range so the address immediately following it right",
    "start": "1319120",
    "end": "1325440"
  },
  {
    "text": "so where the processor tries to return is also canonical right so the return",
    "start": "1325440",
    "end": "1331039"
  },
  {
    "text": "addresses is usually always canonical but what we can",
    "start": "1331039",
    "end": "1336320"
  },
  {
    "text": "do is to place the cisal instruction at the very end of the canonical address",
    "start": "1336320",
    "end": "1342279"
  },
  {
    "start": "1337000",
    "end": "1337000"
  },
  {
    "text": "range right so the processor will try to return to address one shifted left 47",
    "start": "1342279",
    "end": "1348039"
  },
  {
    "text": "just after this cisal instruction and that address is non-conical",
    "start": "1348039",
    "end": "1353600"
  },
  {
    "text": "and okay that's again I hope you you you are following",
    "start": "1355279",
    "end": "1361799"
  },
  {
    "text": "that this is a problem with the exception is raised in ring zero uh but with an untrusted value of the Kel",
    "start": "1361799",
    "end": "1369279"
  },
  {
    "text": "stack the tiny problem is that uh normally operating system reserves some",
    "start": "1369279",
    "end": "1374640"
  },
  {
    "text": "range of addresses for user mode and the other part for for the Kel so the",
    "start": "1374640",
    "end": "1380120"
  },
  {
    "text": "question is can an untrusted user mode uh map a page and this address one",
    "start": "1380120",
    "end": "1385960"
  },
  {
    "text": "shifted left 47 and place an instruction there and jump jump into it and it",
    "start": "1385960",
    "end": "1391240"
  },
  {
    "text": "happens that on Linux windows and Bs open BSD net BSD no kernel does not",
    "start": "1391240",
    "end": "1396360"
  },
  {
    "text": "allow user mode to map this V address but on FreeBSD and on xen with P guests",
    "start": "1396360",
    "end": "1402120"
  },
  {
    "text": "yes it is allowed so for now let's have a look at the FreeBSD case",
    "start": "1402120",
    "end": "1409400"
  },
  {
    "text": "uh denial of service is really straightforward as as mentioned previously we map memory at this end of",
    "start": "1409559",
    "end": "1416679"
  },
  {
    "text": "canonical address range at one Shi 47 you place a cisal",
    "start": "1416679",
    "end": "1423320"
  },
  {
    "text": "instruction at the very end of of this page set RSP to something unmapped for instance zero and jum jump to the cisal",
    "start": "1423320",
    "end": "1430720"
  },
  {
    "text": "instruction then when the cisal H will try to return it will get an exception",
    "start": "1430720",
    "end": "1435919"
  },
  {
    "text": "and that will result in double fault and immediate shut down of the the system but we can do better we can",
    "start": "1435919",
    "end": "1444039"
  },
  {
    "text": "really get code execution in zero observation is here that",
    "start": "1444039",
    "end": "1450120"
  },
  {
    "text": "um okay when the CIS instruction throws an exception it's actually a right",
    "start": "1450120",
    "end": "1455760"
  },
  {
    "text": "operation right because there will be a memory right to the address specified by",
    "start": "1455760",
    "end": "1462760"
  },
  {
    "text": "the current value of the RSP register so one possible trick is before",
    "start": "1462760",
    "end": "1468360"
  },
  {
    "text": "before executing sisol we will set RSP to point to some very important kernel",
    "start": "1468360",
    "end": "1474399"
  },
  {
    "text": "structure right very important kernel structure so when GP is raised the processor will try to store",
    "start": "1474399",
    "end": "1481480"
  },
  {
    "text": "the exception record on the stack and it means it will override this very important caness structure and also the",
    "start": "1481480",
    "end": "1489760"
  },
  {
    "text": "GP Handler will start to run because this time that the value of the stock is is valid and an exception record can be",
    "start": "1489760",
    "end": "1496120"
  },
  {
    "text": "put on it but any subsequent stock pushes for instance when calling an instruction or saving a register will",
    "start": "1496120",
    "end": "1502279"
  },
  {
    "text": "override this very important can structure as well so again the point is that if CIS",
    "start": "1502279",
    "end": "1510360"
  },
  {
    "text": "instruction throws an exception it's a right instruction and we control the address of the right right because the",
    "start": "1510360",
    "end": "1516000"
  },
  {
    "text": "user mode code can control the value of the RSP",
    "start": "1516000",
    "end": "1520679"
  },
  {
    "text": "register the problem is that uh we must select this override Target very",
    "start": "1522679",
    "end": "1527960"
  },
  {
    "text": "carefully it cannot be you know anything because again usually the purpose of the",
    "start": "1527960",
    "end": "1533640"
  },
  {
    "text": "GP Handler when it is invoked from an unexpected location in ring zero is to shut down the machine right the Kel see",
    "start": "1533640",
    "end": "1540120"
  },
  {
    "text": "that something wrong is going on and the sensible thing is to shut out the machine Linux is a notable exception it",
    "start": "1540120",
    "end": "1547039"
  },
  {
    "text": "can you know whenever it gets even a very fital exception while while if it's not in interrupt it just you know",
    "start": "1547039",
    "end": "1552960"
  },
  {
    "text": "reports and oops in in the in the in the logs and Caron but all the other systems behave this",
    "start": "1552960",
    "end": "1558960"
  },
  {
    "text": "way also there is another element of the execution environment which is",
    "start": "1558960",
    "end": "1564720"
  },
  {
    "text": "unexpected in this case it's the base of the GS GS register and I will not you know dwell",
    "start": "1564720",
    "end": "1572360"
  },
  {
    "text": "into details about that you know it's this the stock is complicated enough but",
    "start": "1572360",
    "end": "1578159"
  },
  {
    "text": "just just not bear in mind that there's another another problem with the GS register and because of that uh in case",
    "start": "1578159",
    "end": "1585480"
  },
  {
    "text": "of BSD the GP Handler would crash very soon like about 10 instructions whenever it",
    "start": "1585480",
    "end": "1592080"
  },
  {
    "text": "will try try to reference memory with GS prefix it it will generate a page fold",
    "start": "1592080",
    "end": "1598600"
  },
  {
    "text": "so again if there is a page fold in the GP Handler it's again again",
    "start": "1598600",
    "end": "1604559"
  },
  {
    "text": "problem and we should we should well the exploit must be prepared for for this",
    "start": "1604559",
    "end": "1611039"
  },
  {
    "start": "1611000",
    "end": "1611000"
  },
  {
    "text": "situation okay and the solution to all these problems is to overwrite the interrupt descriptor table",
    "start": "1611039",
    "end": "1618799"
  },
  {
    "text": "because uh IDT holds the address of the pageold Handler so this we will allow the GP",
    "start": "1618799",
    "end": "1627320"
  },
  {
    "text": "Handler to run we will allow it to throw the pageold exception but when when the",
    "start": "1627320",
    "end": "1633120"
  },
  {
    "text": "pageold exception will be triggered we will already control the the ID so again to sum up the the whole",
    "start": "1633120",
    "end": "1639919"
  },
  {
    "text": "scenario is uh it's a little bit cut so again we",
    "start": "1639919",
    "end": "1645720"
  },
  {
    "text": "allocate memory at address one shft left 47 minus page size we place a cisal instruction at the end of this",
    "start": "1645720",
    "end": "1653120"
  },
  {
    "text": "region uh we exit and we set RSP to point in the middle of the",
    "start": "1653120",
    "end": "1659399"
  },
  {
    "text": "IDT then the cisal instruction is executed the cisal Handler Handler",
    "start": "1659399",
    "end": "1664840"
  },
  {
    "text": "starts to run and when it's about to when when it execute CIS uh another",
    "start": "1664840",
    "end": "1670399"
  },
  {
    "text": "exception is raised and then we arrive at the situation at",
    "start": "1670399",
    "end": "1675880"
  },
  {
    "text": "the on the right right hand side the GP Handler is running while it stack is in",
    "start": "1675880",
    "end": "1681679"
  },
  {
    "text": "the middle of the ID right so again pushing of the uh exception record and any stack pushes",
    "start": "1681679",
    "end": "1689480"
  },
  {
    "text": "done by the general protection fold Handler will overwrite ID and after",
    "start": "1689480",
    "end": "1695159"
  },
  {
    "text": "about 10 instruction the GP Handler will throw a pageold and because the address",
    "start": "1695159",
    "end": "1700960"
  },
  {
    "text": "of the pageold Handler has been overwritten uh have been overwritten with the",
    "start": "1700960",
    "end": "1706919"
  },
  {
    "text": "address of the kernel shell code then arbitrary code execution is is possible and it happens this is pretty",
    "start": "1706919",
    "end": "1715120"
  },
  {
    "start": "1714000",
    "end": "1714000"
  },
  {
    "text": "reliable method there are some cor cases but really really ignorable and one one",
    "start": "1715120",
    "end": "1723360"
  },
  {
    "text": "feature of this is that uh we don't need any absolute addresses of Kernel data",
    "start": "1723360",
    "end": "1728720"
  },
  {
    "text": "structures right for instance if if exploit is executed in a in a jail right so we have no access to actual kernel",
    "start": "1728720",
    "end": "1735960"
  },
  {
    "text": "binary and it's not easy to determine you know the exact binary version we",
    "start": "1735960",
    "end": "1742320"
  },
  {
    "text": "don't need it all we need is the address of IDT and it it's it's possible to obtain it via Sid instruction so again",
    "start": "1742320",
    "end": "1749720"
  },
  {
    "text": "this exploit is reliable does not require any prior knowledge",
    "start": "1749720",
    "end": "1756840"
  },
  {
    "text": "and generally this ID overwrite is a very generic method okay so let's try to have a look",
    "start": "1756840",
    "end": "1763240"
  },
  {
    "text": "if it works really I think at the moment there are",
    "start": "1763240",
    "end": "1768960"
  },
  {
    "text": "public exploits on GitHub for for FreeBSD so it's really nothing very",
    "start": "1768960",
    "end": "1775679"
  },
  {
    "text": "spectacular but anyway let's have a",
    "start": "1775679",
    "end": "1781480"
  },
  {
    "text": "look where's my mouse pointer okay so this",
    "start": "1783840",
    "end": "1791080"
  },
  {
    "text": "is really FreeBSD 9.0 uh let's find exploit somewhere and",
    "start": "1791080",
    "end": "1799320"
  },
  {
    "text": "the user is unprivileged right that's a really really unprivileged user I could run it in",
    "start": "1799320",
    "end": "1805640"
  },
  {
    "text": "truth I could run in jail it's it's it's all the same uh of course I don't have any you",
    "start": "1805640",
    "end": "1811600"
  },
  {
    "text": "know sleeky exploitation framework like canvas one so we don't have a nice guey",
    "start": "1811600",
    "end": "1817039"
  },
  {
    "text": "all we can do is just you know execute the exploit and get a hash prompt",
    "start": "1817039",
    "end": "1823720"
  },
  {
    "text": "right and even not that you don't get a hash prompt but it's it's just the way",
    "start": "1823720",
    "end": "1829000"
  },
  {
    "text": "how how explo and BSD work how how the shared credential structure is handled",
    "start": "1829000",
    "end": "1834640"
  },
  {
    "text": "we can just see that this time really we are Ro right so it really",
    "start": "1834640",
    "end": "1840840"
  },
  {
    "text": "works in reliable way if you just type A AG then you can get your hash prompt",
    "start": "1840840",
    "end": "1846399"
  },
  {
    "text": "right everything is right so again this is exploit is is",
    "start": "1846399",
    "end": "1851720"
  },
  {
    "text": "very reliable D due to the well fact how how General protection f Handler uh behaves",
    "start": "1851720",
    "end": "1859600"
  },
  {
    "text": "on on FreeBSD okay so the case of FreeBSD we",
    "start": "1859600",
    "end": "1866279"
  },
  {
    "text": "have covered",
    "start": "1866279",
    "end": "1872760"
  },
  {
    "text": "now the presentation is totally gone for some",
    "start": "1877320",
    "end": "1882600"
  },
  {
    "text": "reason uh h H weird Okay so this this was a case of",
    "start": "1885240",
    "end": "1893399"
  },
  {
    "text": "3bd now uh maybe let's start with this with this this one you remember that uh",
    "start": "1893399",
    "end": "1901279"
  },
  {
    "text": "on other operating systems particularly windows it's not possible to map this range of memory this very end of of",
    "start": "1901279",
    "end": "1908880"
  },
  {
    "text": "canonical address range how so how how can we try to exploit the issue on for",
    "start": "1908880",
    "end": "1915320"
  },
  {
    "text": "instance on Windows uh where",
    "start": "1915320",
    "end": "1921159"
  },
  {
    "text": "we yeah the point so um okay we cannot",
    "start": "1921159",
    "end": "1927360"
  },
  {
    "start": "1922000",
    "end": "1922000"
  },
  {
    "text": "map the we cannot map the relevant address of canonical addresses range so maybe",
    "start": "1927360",
    "end": "1934000"
  },
  {
    "text": "there's any other way to force the kernel to execute the CIS instruction with noncanonical",
    "start": "1934000",
    "end": "1940600"
  },
  {
    "text": "address and it's actually possible uh not not only on Windows but it's a",
    "start": "1940600",
    "end": "1946360"
  },
  {
    "text": "general idea and Yan B of sus has spotted in first in in xen context he",
    "start": "1946360",
    "end": "1952240"
  },
  {
    "text": "was preparing the patch for for for xan and he has figured out that at least on",
    "start": "1952240",
    "end": "1957440"
  },
  {
    "text": "Gan there is a special hyper call and the user can uh control the address when the CIS",
    "start": "1957440",
    "end": "1965639"
  },
  {
    "text": "instruction returns to generally there are two two system",
    "start": "1965639",
    "end": "1970880"
  },
  {
    "text": "calls for instance this sig turn which is specific for for Unix and an continue which is specific for uh window window",
    "start": "1970880",
    "end": "1978320"
  },
  {
    "text": "but they both behave the same it's a system call that provides to the kernel the whole execution contents right the",
    "start": "1978320",
    "end": "1984120"
  },
  {
    "text": "contents of all register including RP and the kernel is supposed to resume execution at the context provided by",
    "start": "1984120",
    "end": "1990080"
  },
  {
    "text": "this instruction so that looks promising because we can set RSP in in the arguments to some nonic noncanonical",
    "start": "1990080",
    "end": "1996960"
  },
  {
    "text": "address and then execute for instance NT continue system call and it will really",
    "start": "1996960",
    "end": "2003559"
  },
  {
    "text": "try to return to this non-canonical address right the trouble is that these",
    "start": "2003559",
    "end": "2009080"
  },
  {
    "text": "both csols do not use cisr to return to user mode they must use ired and",
    "start": "2009080",
    "end": "2014840"
  },
  {
    "text": "exercise for audion to figure out why why precisely but the general idea is so",
    "start": "2014840",
    "end": "2019880"
  },
  {
    "text": "let's search for instance the windows kernel for all the occurrences of the siset instruction and let's see what",
    "start": "2019880",
    "end": "2025639"
  },
  {
    "text": "what can be done with it and that's how I become aware of the",
    "start": "2025639",
    "end": "2031399"
  },
  {
    "start": "2028000",
    "end": "2028000"
  },
  {
    "text": "thing named Windows user mode Schuler which I had no idea it existed before",
    "start": "2031399",
    "end": "2036799"
  },
  {
    "text": "again the purp of this technology is is not very relevant at the moment all that",
    "start": "2036799",
    "end": "2041919"
  },
  {
    "text": "is important is that when a thread enters user mode scheduling the the way",
    "start": "2041919",
    "end": "2048240"
  },
  {
    "text": "how system calls are treated in the ums worker threats is changed so normally",
    "start": "2048240",
    "end": "2053398"
  },
  {
    "text": "when when a thread executes a CIS and CIS finishes then it is it is exactly",
    "start": "2053399",
    "end": "2059358"
  },
  {
    "text": "the moment when the kernel makes a scheduling decision right it looks did it did this thread use up all its",
    "start": "2059359",
    "end": "2065720"
  },
  {
    "text": "Quantum of time if no so let let's let's just resume with ex execution if if if not when they switch to another sh again",
    "start": "2065720",
    "end": "2073200"
  },
  {
    "text": "it's the kernel that made the scheduling decision but ifs is activated when the",
    "start": "2073200",
    "end": "2078720"
  },
  {
    "text": "ums worker thread executes a CIS call it never returns to the ums thread",
    "start": "2078720",
    "end": "2085679"
  },
  {
    "text": "directly instead the context is changed to the ums schedular",
    "start": "2085679",
    "end": "2091079"
  },
  {
    "text": "thread which is supposed to make the scheduling decision so this time it's",
    "start": "2091079",
    "end": "2096638"
  },
  {
    "text": "not the Kel who ules the threats the execution is always transferred to ums thread and it is supposed to make the",
    "start": "2096639",
    "end": "2103560"
  },
  {
    "text": "scheduling decision uh the address of the schedular",
    "start": "2103560",
    "end": "2109520"
  },
  {
    "text": "procedure so at exactly what RP we are supposed to uh resume execution at and",
    "start": "2109520",
    "end": "2115640"
  },
  {
    "text": "the stack for the uh ums schedular Pro is taken from the thread environment",
    "start": "2115640",
    "end": "2121680"
  },
  {
    "text": "block of the ums schedu thread so this these two information RP and RSP are in",
    "start": "2121680",
    "end": "2129880"
  },
  {
    "text": "the user mode and guess what they are not sanitized in anyway so what we can do is set RP to",
    "start": "2129880",
    "end": "2137119"
  },
  {
    "text": "some nonic noncanonical address set RSP in in this TB to anything we want then",
    "start": "2137119",
    "end": "2144599"
  },
  {
    "text": "execute anys worker thread and when it executes a CIS call we'll arrive at the",
    "start": "2144599",
    "end": "2150640"
  },
  {
    "text": "situation as before right there will be a general General protection fault raised by the S instruction and we",
    "start": "2150640",
    "end": "2156440"
  },
  {
    "text": "control RP which is good the only that is before",
    "start": "2156440",
    "end": "2165680"
  },
  {
    "text": "that that's what we can do we can trigger GP Handler running with arbitrary RSP the tiny problem is that",
    "start": "2165680",
    "end": "2172480"
  },
  {
    "text": "Windows uses more stack space in its General protection H it's obvious that",
    "start": "2172480",
    "end": "2177640"
  },
  {
    "text": "Windows must use more stack space right uh so this time this this trick of",
    "start": "2177640",
    "end": "2183079"
  },
  {
    "text": "pointing RSP to IDT is a bit problematic because um",
    "start": "2183079",
    "end": "2188880"
  },
  {
    "text": "because Windows allocates more more space on on the stock it will means we'll you know corrupt the memory above",
    "start": "2188880",
    "end": "2196640"
  },
  {
    "text": "the ID right the during the execution of the uh GP Handler on FreeBSD all the",
    "start": "2196640",
    "end": "2202720"
  },
  {
    "text": "stock always fits in the IDT so so it's not not a problem but in case of Windows the stack goes out of of the IDT this",
    "start": "2202720",
    "end": "2209880"
  },
  {
    "text": "memory before the IDT gets corrupted and at least potentially it's it's a problem",
    "start": "2209880",
    "end": "2215400"
  },
  {
    "text": "perhaps we can live with that but uh Pro probably it would require us to",
    "start": "2215400",
    "end": "2220760"
  },
  {
    "text": "restore the um the the memory corrupted before the",
    "start": "2220760",
    "end": "2227680"
  },
  {
    "text": "ID okay so another idea another exploitation method uh okay let's not",
    "start": "2227680",
    "end": "2233599"
  },
  {
    "text": "Point RSP to the kernel mode at all so we won't attempt to override kernel",
    "start": "2233599",
    "end": "2239240"
  },
  {
    "text": "memory with you know pushes of exception record let's just point it to the user",
    "start": "2239240",
    "end": "2244560"
  },
  {
    "text": "mode area so GP h ER will execute with the with it stack being in the legal",
    "start": "2244560",
    "end": "2251960"
  },
  {
    "text": "user mode memory and we can preload it with a you know really evil stuff non non-conical pointers integer that will",
    "start": "2251960",
    "end": "2258480"
  },
  {
    "start": "2258000",
    "end": "2258000"
  },
  {
    "text": "wrap or you know whatever you can imagine so again that's that's the scenario GP Handler runs with the ring",
    "start": "2258480",
    "end": "2266200"
  },
  {
    "text": "zero and the stack is in the user mode memory so the difference this time is",
    "start": "2266200",
    "end": "2272280"
  },
  {
    "text": "that we can somehow initialize this memory before triggering the exploit",
    "start": "2272280",
    "end": "2277599"
  },
  {
    "text": "that's that's the idea because again this is user mode memory accessible uh",
    "start": "2277599",
    "end": "2283280"
  },
  {
    "text": "for the user mode the problem is that initializing this stock before triing an exploit will",
    "start": "2283280",
    "end": "2290720"
  },
  {
    "text": "not do us any good because normally uh the stack is treated as an uninitialized",
    "start": "2290720",
    "end": "2296400"
  },
  {
    "text": "memory right by by Anyan code code never read never reads from any location of",
    "start": "2296400",
    "end": "2302079"
  },
  {
    "text": "the stack before writing to it and if you really craft a code at least in C",
    "start": "2302079",
    "end": "2307200"
  },
  {
    "text": "that really tries to read an ini initialized value from the stock the compiler will warn you about it right and and you",
    "start": "2307200",
    "end": "2314800"
  },
  {
    "text": "should fix your code so again whatever we put uh on into this user memory uh",
    "start": "2314800",
    "end": "2321200"
  },
  {
    "text": "will not be used by the general protection Hunter so what we need to do we need to override some stack locations",
    "start": "2321200",
    "end": "2328720"
  },
  {
    "text": "after it was initialized by the GP Handler right but before it is actually used by it",
    "start": "2328720",
    "end": "2335800"
  },
  {
    "text": "right uh we will see we'll see exactly the scenario in a while but what it",
    "start": "2335800",
    "end": "2341079"
  },
  {
    "text": "means we we have to create a race condition we will run another thread concurrent with the exploit thread and",
    "start": "2341079",
    "end": "2347960"
  },
  {
    "text": "this another thread will just continuously Hammer at the stack locations with with rights so again it's",
    "start": "2347960",
    "end": "2353960"
  },
  {
    "text": "a race condition we will need multiple threads so it works only on SMP system so the scenario goes like this",
    "start": "2353960",
    "end": "2361160"
  },
  {
    "start": "2358000",
    "end": "2358000"
  },
  {
    "text": "well GP Handler starts to run and at some point of time it will call some function right",
    "start": "2361160",
    "end": "2368960"
  },
  {
    "text": "this meaning that it has to put the return address on the stack on the stack that is in user mode memory but we",
    "start": "2368960",
    "end": "2376079"
  },
  {
    "text": "control this some function does its job and then when it's when it's done it returns by popping the return address",
    "start": "2376079",
    "end": "2383160"
  },
  {
    "text": "from the stack and this other overwriterz",
    "start": "2383160",
    "end": "2388079"
  },
  {
    "text": "right to the same same location in this St and if you are lucky and this this right in this thread happens while the",
    "start": "2397599",
    "end": "2405119"
  },
  {
    "text": "function is executed then we at home right we'll write to the stack after it",
    "start": "2405119",
    "end": "2410200"
  },
  {
    "text": "was initialized by the GP Handler by putting the uh rain address but before",
    "start": "2410200",
    "end": "2417000"
  },
  {
    "text": "it is used right so again it's it's a normal race",
    "start": "2417000",
    "end": "2424560"
  },
  {
    "text": "condition we have some right by the GP Handler then we over overwrite this value in our second thread and then this",
    "start": "2424560",
    "end": "2431760"
  },
  {
    "text": "overwritten value is used and again of course we'll overwrite it with an address of the shell",
    "start": "2431760",
    "end": "2436839"
  },
  {
    "text": "go again the point is why why why it works because uh at this stage the stack",
    "start": "2436839",
    "end": "2443680"
  },
  {
    "text": "is in user mode memory again again something very bizarre we have a kernel code that runs in ring zero but the",
    "start": "2443680",
    "end": "2449880"
  },
  {
    "text": "stack is in user mode memory and un trusted user mode can can mess with",
    "start": "2449880",
    "end": "2455880"
  },
  {
    "text": "it okay so so does it work at all well this",
    "start": "2455880",
    "end": "2461640"
  },
  {
    "text": "overwritting the very short time window right depending on how many instruction",
    "start": "2461640",
    "end": "2467560"
  },
  {
    "text": "this uh some function executes well we have more more or less",
    "start": "2467560",
    "end": "2474280"
  },
  {
    "text": "time but again it's very very short time time window but again it's only one assembly",
    "start": "2474280",
    "end": "2479960"
  },
  {
    "start": "2478000",
    "end": "2478000"
  },
  {
    "text": "instruction in Loop that's continuously Hammer the stack through the same right at the same",
    "start": "2479960",
    "end": "2485400"
  },
  {
    "text": "location and also this This Thread must be scheduled to run when GP Handler runs",
    "start": "2485400",
    "end": "2491119"
  },
  {
    "text": "right because it's just just another thread if uh if it's not scheduled to run if it has been you know the context",
    "start": "2491119",
    "end": "2498720"
  },
  {
    "text": "which has happened and this thread is actually not running then we don't have rise condition but we can spawn a lot of",
    "start": "2498720",
    "end": "2505200"
  },
  {
    "text": "these overwrites right assuming we have like four-way SMP system then we write",
    "start": "2505200",
    "end": "2510480"
  },
  {
    "text": "run exploit on one core and devote all all three other cores uh for this overrider threats",
    "start": "2510480",
    "end": "2518880"
  },
  {
    "text": "and it's should work right the tiny problem is that again we",
    "start": "2518880",
    "end": "2525960"
  },
  {
    "text": "have only one shot because if we lose this race condition and GP Handler goes",
    "start": "2525960",
    "end": "2532240"
  },
  {
    "text": "past this uh this uh this place again its purpose would be to back check the",
    "start": "2532240",
    "end": "2538319"
  },
  {
    "text": "machine right and as far as I could test the",
    "start": "2538319",
    "end": "2543960"
  },
  {
    "text": "exploit works almost 100 100% on the bare metal machine right in other words",
    "start": "2543960",
    "end": "2549200"
  },
  {
    "text": "I never saw it fail right it always work for me on on on a real machine but when",
    "start": "2549200",
    "end": "2555000"
  },
  {
    "text": "it's running VM which will happen in a moment there are some problems very rarely like you know one one in 20 runs",
    "start": "2555000",
    "end": "2562520"
  },
  {
    "text": "it fails which I'm not sure why it happens but it happens you have been",
    "start": "2562520",
    "end": "2568520"
  },
  {
    "text": "warned generally so now let's let's let's have",
    "start": "2568520",
    "end": "2574559"
  },
  {
    "text": "a look whether it it works this time",
    "start": "2574559",
    "end": "2579119"
  },
  {
    "text": "so this time again it's a Windows machine it's a Windows 7 system again the same",
    "start": "2582440",
    "end": "2591200"
  },
  {
    "text": "notorious cracker named mortal it's an unprivileged user even what we can do",
    "start": "2591200",
    "end": "2596680"
  },
  {
    "text": "even one more tiny thing we can execute a shell in a low Integrity mode",
    "start": "2596680",
    "end": "2603559"
  },
  {
    "text": "right this PSX minus L does exactly that execute a shell in in a low Integrity",
    "start": "2603559",
    "end": "2610319"
  },
  {
    "text": "mode H so for instance if you",
    "start": "2610319",
    "end": "2615119"
  },
  {
    "text": "issue yeah it will tell permission denied right because we're in low Integrity mode there is no permission to",
    "start": "2616720",
    "end": "2622040"
  },
  {
    "text": "do it and if we try to exploit it let's see if it's",
    "start": "2622040",
    "end": "2628040"
  },
  {
    "text": "work keep your fingers closed yeah maybe maybe",
    "start": "2629000",
    "end": "2635480"
  },
  {
    "text": "maybe not really yeah but okay at this moment this",
    "start": "2635520",
    "end": "2643079"
  },
  {
    "text": "machine is is spinning in 100% CPUs but fear not I will try to show show it on",
    "start": "2643079",
    "end": "2649000"
  },
  {
    "text": "on the bare metal machine and supposed to be more reliable anyway that's you",
    "start": "2649000",
    "end": "2654359"
  },
  {
    "text": "know denial of service exploit demonstrated this RDP session is is that",
    "start": "2654359",
    "end": "2662400"
  },
  {
    "text": "moment okay so I'll show you that exploit on on",
    "start": "2662400",
    "end": "2668760"
  },
  {
    "text": "Windows in a moment let me just shut down this this",
    "start": "2668760",
    "end": "2675880"
  },
  {
    "text": "machine until it's uh bur down all the",
    "start": "2675880",
    "end": "2683000"
  },
  {
    "text": "Cycles yeah you can even see that it's somehow",
    "start": "2683440",
    "end": "2690640"
  },
  {
    "text": "corrupted okay so we continue with Windows 7 demonstration at at the end",
    "start": "2692480",
    "end": "2698640"
  },
  {
    "text": "and uh what no 15 minutes left",
    "start": "2698640",
    "end": "2703359"
  },
  {
    "start": "2708000",
    "end": "2708000"
  },
  {
    "text": "okay okay some related research there's a really fantastic article by Derek sder",
    "start": "2708280",
    "end": "2714240"
  },
  {
    "text": "named vmw emulation flow x64 guest privilege escalation from 2008 and it",
    "start": "2714240",
    "end": "2720000"
  },
  {
    "text": "discusses very similar issues right which were possible to trigger only on",
    "start": "2720000",
    "end": "2726200"
  },
  {
    "text": "on VMware it was doing the binary translation but again the the situation was very similar that",
    "start": "2726200",
    "end": "2733960"
  },
  {
    "text": "uh how to exploit an exception Handler triggered in an unexpected location and",
    "start": "2735040",
    "end": "2742079"
  },
  {
    "text": "there is another CV item for BSD 2008 3890 by Nate Eldridge again the problem",
    "start": "2742079",
    "end": "2748440"
  },
  {
    "text": "was very similar there was an exception thrown by the IR instruction but in both these two cases",
    "start": "2748440",
    "end": "2756680"
  },
  {
    "text": "uh the exploitation method was totally different they both focus on uh abusing",
    "start": "2756680",
    "end": "2761720"
  },
  {
    "text": "the desynchronization of the GS base and again I'm totally you know skipping over",
    "start": "2761720",
    "end": "2767359"
  },
  {
    "text": "over the subject of the GS Bas you can have a look at the paper on the conference CD if you want the more",
    "start": "2767359",
    "end": "2773760"
  },
  {
    "text": "details or just just have a look at these two articles because",
    "start": "2773760",
    "end": "2780160"
  },
  {
    "text": "uh in in this case it's more important that untrusted user mode can control the",
    "start": "2780160",
    "end": "2785800"
  },
  {
    "text": "stack and and it's possibly it's thinkable that this Cy",
    "start": "2785800",
    "end": "2792119"
  },
  {
    "text": "issue can be also exploited uh by well properly abusing the GS basing except",
    "start": "2792119",
    "end": "2798000"
  },
  {
    "text": "that for instance xen does not use swap GS at all so the the method of you know",
    "start": "2798000",
    "end": "2803880"
  },
  {
    "text": "messing with a GS base would not work in Zen case at all there's another thing",
    "start": "2803880",
    "end": "2810280"
  },
  {
    "text": "because uh control of the stack gives some very special abilities for the",
    "start": "2810280",
    "end": "2815359"
  },
  {
    "text": "attacker we'll talk about about it in in in a second okay so so related musings we'll",
    "start": "2815359",
    "end": "2822480"
  },
  {
    "start": "2819000",
    "end": "2819000"
  },
  {
    "text": "start with a nice and cozy witch hand so generally whose fault is it right so many operating systems it looks like",
    "start": "2822480",
    "end": "2829119"
  },
  {
    "text": "that at for each of them including Linux and open BSD at certain moment of time",
    "start": "2829119",
    "end": "2835000"
  },
  {
    "text": "every 64-bit system was vulnerable right so that's that's really unusual so I'll",
    "start": "2835000",
    "end": "2840319"
  },
  {
    "text": "give you three answers three view three viewpoints and your task is to find the one that is actually a joke so the",
    "start": "2840319",
    "end": "2847119"
  },
  {
    "text": "answer number one is the all fault of the security researchers right they are leeches right the world would be",
    "start": "2847119",
    "end": "2853880"
  },
  {
    "text": "generally better without them I guess you recognize this quotations so no security research no security problems",
    "start": "2853880",
    "end": "2860359"
  },
  {
    "text": "right that's very interesting Viewpoint another another possible answer how",
    "start": "2860359",
    "end": "2868160"
  },
  {
    "text": "about OS developers really the semantics of the sister instruction is explicitly",
    "start": "2868160",
    "end": "2873839"
  },
  {
    "text": "documented in Intel SDM we have seen except from it really you should know the behavior of",
    "start": "2873839",
    "end": "2879720"
  },
  {
    "text": "the platform you write operating system for right you should read the [Music] manuals and additionally after the Linux",
    "start": "2879720",
    "end": "2887800"
  },
  {
    "text": "problem 6 years ago well theoretically all developers could",
    "start": "2887800",
    "end": "2892920"
  },
  {
    "text": "just well get to know all the details and check whether it applies to to V 's",
    "start": "2892920",
    "end": "2899599"
  },
  {
    "text": "right so that's another view point and the",
    "start": "2899599",
    "end": "2904640"
  },
  {
    "text": "third one how about Intel because frankly allowing the suet instruction to raise an exception while with the user",
    "start": "2904640",
    "end": "2910800"
  },
  {
    "text": "controlled stack is a design error it frankly doesn't make sense at all it is somehow coherent with the behavior of",
    "start": "2910800",
    "end": "2918000"
  },
  {
    "text": "other instruction that throw General protection fa but again raing raising an exception while the stack is untrusted",
    "start": "2918000",
    "end": "2925559"
  },
  {
    "text": "this is really really really a bad idea and similarly you can imagine that in a perfect world after this Linux case",
    "start": "2925559",
    "end": "2932920"
  },
  {
    "text": "Intel would realize the problem you know there are clueful people in there and he",
    "start": "2932920",
    "end": "2940000"
  },
  {
    "text": "could try to notify everyone just like Intel tried to help with this case and",
    "start": "2940000",
    "end": "2945400"
  },
  {
    "text": "perhaps update SDM with an explicit warning right that really this semantics",
    "start": "2945400",
    "end": "2950599"
  },
  {
    "text": "is is dangerous so developers should should be really given a chance to to notice notice the",
    "start": "2950599",
    "end": "2958079"
  },
  {
    "text": "problem okay another issues how about mitigation right so we have some you",
    "start": "2958079",
    "end": "2965000"
  },
  {
    "start": "2959000",
    "end": "2959000"
  },
  {
    "text": "know execution context corruption in in the kernel so it doesn't mean that it should ultimately be be exploitable",
    "start": "2965000",
    "end": "2972400"
  },
  {
    "text": "right and there are various mitigation techniques which are thinkable and",
    "start": "2972400",
    "end": "2977520"
  },
  {
    "text": "implemented but I would like to talk about particular one maybe about two of",
    "start": "2977520",
    "end": "2983440"
  },
  {
    "text": "them the first one is named s supervisor mode execu execution",
    "start": "2983440",
    "end": "2990920"
  },
  {
    "text": "prevention it was introduced I know a year ago or some something like that in",
    "start": "2990920",
    "end": "2997040"
  },
  {
    "text": "the Intel manuals but as far as I know the first platform that actually support this feature is the third third",
    "start": "2997040",
    "end": "3003720"
  },
  {
    "text": "generation of core processors IV Bridge list in the second quarter of of this year so very very new",
    "start": "3003720",
    "end": "3011160"
  },
  {
    "text": "thing and this feature would prevent both these exploitation",
    "start": "3011160",
    "end": "3016599"
  },
  {
    "text": "scenarios that were presented right because in both these cases the goal of",
    "start": "3016599",
    "end": "3021839"
  },
  {
    "text": "an attacker is to execute arbitrary code which is stored in the user mode page",
    "start": "3021839",
    "end": "3028559"
  },
  {
    "text": "with the current privileges and why it is stored in the user mode page because it's a convenient location you know the",
    "start": "3028559",
    "end": "3033920"
  },
  {
    "text": "address when your shell code is you you can really initialize it any way you like so it's a natural choice for for an",
    "start": "3033920",
    "end": "3040480"
  },
  {
    "text": "exploit run run the code that is stored in the user REM mode page and this",
    "start": "3040480",
    "end": "3046000"
  },
  {
    "text": "feature prevents exactly that when when uh Kel mode code tries to jump into the",
    "start": "3046000",
    "end": "3052400"
  },
  {
    "text": "user mode page then exception is is triggered instead of allowing to execute",
    "start": "3052400",
    "end": "3057520"
  },
  {
    "text": "this uh potentially undusted code so that sounds nice um again it",
    "start": "3057520",
    "end": "3063920"
  },
  {
    "text": "would prevent both these attacks and for instance xen turns on by default since a",
    "start": "3063920",
    "end": "3070240"
  },
  {
    "text": "long a long time ago uh but the problem with",
    "start": "3070240",
    "end": "3075440"
  },
  {
    "text": "this mitigation technique is it's very similar to NX and DP right because both",
    "start": "3075440",
    "end": "3082400"
  },
  {
    "text": "NX and DP uh what they do is allow execution of",
    "start": "3082400",
    "end": "3087520"
  },
  {
    "text": "data pages right and that's very similar do not allow execution of pages which should not contain the code you are",
    "start": "3087520",
    "end": "3094359"
  },
  {
    "text": "supposed to to to to execute uh but again very similar bypass",
    "start": "3094359",
    "end": "3100040"
  },
  {
    "text": "techniques are applicable in in this case we can use return oriented programming not to run arbitrary code",
    "start": "3100040",
    "end": "3106960"
  },
  {
    "text": "stored in the user mode pages but just to jump through the location in in the in the kernel code there are a lot of Publications",
    "start": "3106960",
    "end": "3114079"
  },
  {
    "text": "about return oriented programming really so you can you can uh deepen your knowledge in that aspect but it's it's",
    "start": "3114079",
    "end": "3121480"
  },
  {
    "text": "really a step step in the right direction um because it really it's",
    "start": "3121480",
    "end": "3126880"
  },
  {
    "text": "bypassable at least in in the general case but it really makes the life of an attacker more miserable because he has",
    "start": "3126880",
    "end": "3133200"
  },
  {
    "text": "to know the exact version of the binary of the kernel right he has to know exactly the the addresses of the user",
    "start": "3133200",
    "end": "3139160"
  },
  {
    "text": "useful function in the kernel uh in some cases for instance if I were some you",
    "start": "3139160",
    "end": "3144599"
  },
  {
    "text": "know cloud services provider and I build my own xen version and it's not you know published anywhere it may be very",
    "start": "3144599",
    "end": "3151359"
  },
  {
    "text": "difficult for an attacker to obtain the addresses of you know useful code pieces in in the in the",
    "start": "3151359",
    "end": "3157079"
  },
  {
    "text": "K so again something by passible still a step in the right direction uh but that that brings us to",
    "start": "3157079",
    "end": "3164640"
  },
  {
    "text": "to the final final Point Lessons Learned right uh to the state of the mindline",
    "start": "3164640",
    "end": "3170720"
  },
  {
    "text": "Kel security and again it's my gut feeling only but not only mine",
    "start": "3170720",
    "end": "3176960"
  },
  {
    "text": "that uh there are really problems with the current Mainline cels and there are",
    "start": "3176960",
    "end": "3183160"
  },
  {
    "text": "reasons for that because these canels are very large mon monolithical pieces",
    "start": "3183160",
    "end": "3188680"
  },
  {
    "text": "of codes right and you have large large pieces of code that all runs with the high privileges in zero it implies many",
    "start": "3188680",
    "end": "3198119"
  },
  {
    "text": "vulnerabilities and uh it happens they are often reliably exploitable and the",
    "start": "3198119",
    "end": "3203319"
  },
  {
    "text": "reasons for that is that there is in sufficient separation between Cal mode",
    "start": "3203319",
    "end": "3208799"
  },
  {
    "text": "and and user mode at least that's it's the impression of many people for instance uh the virtual memory is shared",
    "start": "3208799",
    "end": "3215119"
  },
  {
    "text": "normally right and this is the reason why why it is so",
    "start": "3215119",
    "end": "3221559"
  },
  {
    "text": "easy to store kernel kernel Shell Code in user mode and it will be valid when when we are in kernel mode right it's it",
    "start": "3221559",
    "end": "3228760"
  },
  {
    "text": "very simplifies and and and exploitation uh so again it's upd that",
    "start": "3228760",
    "end": "3236079"
  },
  {
    "text": "for inance Intel tries to provide some tools like which again make exploitation",
    "start": "3236079",
    "end": "3241839"
  },
  {
    "text": "more difficult but in fact my my my feeling is it's really attacking the problem from the wrong end right A lot",
    "start": "3241839",
    "end": "3248440"
  },
  {
    "text": "of people have simply totally gave up on on caral security and instead uh people",
    "start": "3248440",
    "end": "3255040"
  },
  {
    "text": "are trying to use other mechanisms for instance based on virtualization to totally encapsulate",
    "start": "3255040",
    "end": "3261680"
  },
  {
    "text": "the untrusted code within the VM and uh",
    "start": "3261680",
    "end": "3266920"
  },
  {
    "text": "that way provide some some sort of sandboxing to to limit the damage",
    "start": "3266920",
    "end": "3273400"
  },
  {
    "text": "U that happens when the issue is exploited so particularly we saw this",
    "start": "3273400",
    "end": "3278839"
  },
  {
    "text": "cbsd exploit a moment ago uh and it in fact it was running in the VM right so",
    "start": "3278839",
    "end": "3286440"
  },
  {
    "text": "if it was really malicious codes then not theoretically in a perfect world no harm should be done to the host",
    "start": "3286440",
    "end": "3292760"
  },
  {
    "text": "operating system right so you know the statement what happens in Vega what happens in Vegas stays in Vegas right so",
    "start": "3292760",
    "end": "3298520"
  },
  {
    "text": "perfectly ideally it should be what happens in VM stays in VM right you can get ring zero privileges in VM but again",
    "start": "3298520",
    "end": "3305760"
  },
  {
    "text": "we shouldn't care because you are you are",
    "start": "3305760",
    "end": "3309680"
  },
  {
    "text": "sandboxed yeah so so again Hardware assisted virtualization used for sandboxing has has lot of",
    "start": "3310960",
    "end": "3317960"
  },
  {
    "text": "potential at is in my opinion okay that's almost all please",
    "start": "3317960",
    "end": "3324160"
  },
  {
    "text": "provide feedback to organizers uh we have five more minutes so we will",
    "start": "3324160",
    "end": "3329520"
  },
  {
    "text": "skip the the topic of xen I have an exploit for xen as well it's it's quite reliable but it's very specific for for",
    "start": "3329520",
    "end": "3336359"
  },
  {
    "text": "Zen so these two previously shown shown techniques so overwriting of IDT and you",
    "start": "3336359",
    "end": "3341839"
  },
  {
    "text": "know race condition over the user mode stack are very generic and should be applicable to",
    "start": "3341839",
    "end": "3347119"
  },
  {
    "text": "other to other system but Zen case is very specific that they they use the stack",
    "start": "3347119",
    "end": "3353240"
  },
  {
    "text": "pointer in a very special way but just believe me it's it's totally exploitable and also I saw yesterday that the",
    "start": "3353240",
    "end": "3359760"
  },
  {
    "text": "company named ven which provides exploit and Analysis for you know some",
    "start": "3359760",
    "end": "3365160"
  },
  {
    "text": "government clients has has also announced that uh they have released exploits for all the affected systems",
    "start": "3365160",
    "end": "3371440"
  },
  {
    "text": "for Windows bsds and Zen so so these issues are really",
    "start": "3371440",
    "end": "3377720"
  },
  {
    "text": "exploited okay again we are almost down so let's try to run the windows exploit",
    "start": "3377720",
    "end": "3385240"
  },
  {
    "text": "um and bare metal so no we won't have an any exam",
    "start": "3385240",
    "end": "3393760"
  },
  {
    "text": "demonstration [Music]",
    "start": "3394319",
    "end": "3401319"
  },
  {
    "text": "yeah okay so this is this runs on you know on the bare metal do you see",
    "start": "3401319",
    "end": "3408240"
  },
  {
    "text": "anything I can try to make the font font larger right 3 minutes left plenty of",
    "start": "3408240",
    "end": "3416039"
  },
  {
    "text": "time",
    "start": "3416039",
    "end": "3418240"
  },
  {
    "text": "this one bit okay so as as before let's try",
    "start": "3421720",
    "end": "3429318"
  },
  {
    "text": "to uh minus",
    "start": "3430319",
    "end": "3433960"
  },
  {
    "text": "L gra it pops up a non-privileged shell in",
    "start": "3438599",
    "end": "3444480"
  },
  {
    "text": "low Integrity but here okay and now again all we we",
    "start": "3444480",
    "end": "3451039"
  },
  {
    "text": "do run the X binary and cre will work this",
    "start": "3451039",
    "end": "3456960"
  },
  {
    "text": "time H it works again it the problem is it's an extended desktop and it pops a",
    "start": "3459039",
    "end": "3466319"
  },
  {
    "text": "shell on the other desktop here it is this time it",
    "start": "3466319",
    "end": "3472720"
  },
  {
    "text": "runs as a system",
    "start": "3472920",
    "end": "3477720"
  },
  {
    "text": "right sometimes it works right again again on on Bal I have never seen it",
    "start": "3479480",
    "end": "3485000"
  },
  {
    "text": "fail there is some issue with scheduling within the VM I'm not sure how what the",
    "start": "3485000",
    "end": "3490079"
  },
  {
    "text": "reason again I'm pretty sure it can be can be improved okay so very quickly questions",
    "start": "3490079",
    "end": "3496720"
  },
  {
    "text": "we have like two three minutes left any",
    "start": "3496720",
    "end": "3501640"
  },
  {
    "text": "questions no okay that should be it thank you",
    "start": "3503160",
    "end": "3510078"
  },
  {
    "text": "[Applause]",
    "start": "3512410",
    "end": "3515089"
  }
]