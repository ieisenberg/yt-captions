[
  {
    "text": "[Music]",
    "start": "860",
    "end": "9840"
  },
  {
    "text": "hello everyone my name is jonghyun lin i",
    "start": "9840",
    "end": "13120"
  },
  {
    "text": "am a phd student from penn state my",
    "start": "13120",
    "end": "16080"
  },
  {
    "text": "research focuses on exploitation and",
    "start": "16080",
    "end": "18560"
  },
  {
    "text": "defense on complex software",
    "start": "18560",
    "end": "20880"
  },
  {
    "text": "today i'm going to talk about",
    "start": "20880",
    "end": "22480"
  },
  {
    "text": "exploitation in linux kernel",
    "start": "22480",
    "end": "24560"
  },
  {
    "text": "specifically how it turns unexploitable",
    "start": "24560",
    "end": "27359"
  },
  {
    "text": "box into explorable ones",
    "start": "27359",
    "end": "29679"
  },
  {
    "text": "and how we utilize the same method to",
    "start": "29679",
    "end": "32238"
  },
  {
    "text": "find the exploit primitive automatically",
    "start": "32239",
    "end": "35680"
  },
  {
    "text": "we will demonstrate this on the",
    "start": "35680",
    "end": "37600"
  },
  {
    "text": "exploitation of a real world kernel bug",
    "start": "37600",
    "end": "39840"
  },
  {
    "text": "in centaurus kernel",
    "start": "39840",
    "end": "41840"
  },
  {
    "text": "this work is done with the help of my",
    "start": "41840",
    "end": "44719"
  },
  {
    "text": "collaborator uh turn my advisor sir",
    "start": "44719",
    "end": "47520"
  },
  {
    "text": "using who are from penn state as well",
    "start": "47520",
    "end": "50559"
  },
  {
    "text": "and my mentor currently from i do",
    "start": "50559",
    "end": "53039"
  },
  {
    "text": "research usa",
    "start": "53039",
    "end": "56000"
  },
  {
    "text": "i'm going to start with a bug example",
    "start": "57120",
    "end": "59760"
  },
  {
    "text": "that shows different memory corruption",
    "start": "59760",
    "end": "61920"
  },
  {
    "text": "in two kernel sites",
    "start": "61920",
    "end": "63760"
  },
  {
    "text": "and then i will introduce the definition",
    "start": "63760",
    "end": "66240"
  },
  {
    "text": "of multiple arrow behavior of bugs",
    "start": "66240",
    "end": "69360"
  },
  {
    "text": "after this i will talk about a new",
    "start": "69360",
    "end": "71280"
  },
  {
    "text": "approach to turning unexploitable",
    "start": "71280",
    "end": "74240"
  },
  {
    "text": "trash bags between two exploitable ones",
    "start": "74240",
    "end": "78080"
  },
  {
    "text": "with this approach i will show how an",
    "start": "78080",
    "end": "81280"
  },
  {
    "text": "ignored trash bag in central's kernel",
    "start": "81280",
    "end": "84320"
  },
  {
    "text": "was successfully turned into an",
    "start": "84320",
    "end": "86159"
  },
  {
    "text": "exploitable one",
    "start": "86159",
    "end": "87600"
  },
  {
    "text": "which in reality has powerful memory",
    "start": "87600",
    "end": "89840"
  },
  {
    "text": "corruption abilities like",
    "start": "89840",
    "end": "91759"
  },
  {
    "text": "leaking kernel data and hijacking kernel",
    "start": "91759",
    "end": "94320"
  },
  {
    "text": "control flow",
    "start": "94320",
    "end": "95840"
  },
  {
    "text": "and finally i will talk about the",
    "start": "95840",
    "end": "98640"
  },
  {
    "text": "implication of multiple behavior to",
    "start": "98640",
    "end": "100960"
  },
  {
    "text": "kernel security",
    "start": "100960",
    "end": "103840"
  },
  {
    "text": "before moving to the example of bug i",
    "start": "105119",
    "end": "108079"
  },
  {
    "text": "would like to discuss what it means in",
    "start": "108079",
    "end": "110399"
  },
  {
    "text": "terms of unexploitable in this talk",
    "start": "110399",
    "end": "115280"
  },
  {
    "text": "in general an unexploitable back is a",
    "start": "115280",
    "end": "118000"
  },
  {
    "text": "bug that is likely to exploit",
    "start": "118000",
    "end": "120880"
  },
  {
    "text": "to exploit the back we usually start",
    "start": "120880",
    "end": "123759"
  },
  {
    "text": "from an arrow",
    "start": "123759",
    "end": "125520"
  },
  {
    "text": "the arrow allows you to create another",
    "start": "125520",
    "end": "127680"
  },
  {
    "text": "arrow",
    "start": "127680",
    "end": "128720"
  },
  {
    "text": "eventually",
    "start": "128720",
    "end": "130239"
  },
  {
    "text": "you achieve your goal from an arrow you",
    "start": "130239",
    "end": "132480"
  },
  {
    "text": "created",
    "start": "132480",
    "end": "133680"
  },
  {
    "text": "for example you want to hijack kernel",
    "start": "133680",
    "end": "136239"
  },
  {
    "text": "execution you start from a memory",
    "start": "136239",
    "end": "138800"
  },
  {
    "text": "overflow arrow",
    "start": "138800",
    "end": "140400"
  },
  {
    "text": "then you utilize the overflow to",
    "start": "140400",
    "end": "142560"
  },
  {
    "text": "override function pointer",
    "start": "142560",
    "end": "145360"
  },
  {
    "text": "which results in another arrow and this",
    "start": "145360",
    "end": "147599"
  },
  {
    "text": "provides you the kernel execution",
    "start": "147599",
    "end": "149599"
  },
  {
    "text": "hijacking",
    "start": "149599",
    "end": "152239"
  },
  {
    "text": "when we say unexploitable we basically",
    "start": "152640",
    "end": "155440"
  },
  {
    "text": "mean that the arrow we found is not able",
    "start": "155440",
    "end": "158319"
  },
  {
    "text": "to propagate to other arrows that will",
    "start": "158319",
    "end": "160879"
  },
  {
    "text": "lead to our exploitation goal",
    "start": "160879",
    "end": "163680"
  },
  {
    "text": "the difficulty of propagating arrows",
    "start": "163680",
    "end": "167519"
  },
  {
    "text": "is one",
    "start": "167519",
    "end": "168800"
  },
  {
    "text": "is com comes is from the block of",
    "start": "168800",
    "end": "171440"
  },
  {
    "text": "mitigation and the limitation of",
    "start": "171440",
    "end": "174000"
  },
  {
    "text": "original errors",
    "start": "174000",
    "end": "175519"
  },
  {
    "text": "for example making memory at zero",
    "start": "175519",
    "end": "177440"
  },
  {
    "text": "address is not allowed in this kernel",
    "start": "177440",
    "end": "179920"
  },
  {
    "text": "which blocks the propagation of a num",
    "start": "179920",
    "end": "182000"
  },
  {
    "text": "point of the reference error accessing",
    "start": "182000",
    "end": "184720"
  },
  {
    "text": "memory address not in page table is not",
    "start": "184720",
    "end": "186800"
  },
  {
    "text": "allowed as well",
    "start": "186800",
    "end": "188959"
  },
  {
    "text": "so arrows like general protection faults",
    "start": "188959",
    "end": "191840"
  },
  {
    "text": "and non-pointed derivance cannot",
    "start": "191840",
    "end": "193519"
  },
  {
    "text": "propagate",
    "start": "193519",
    "end": "196080"
  },
  {
    "text": "sometimes the arrow doesn't have memory",
    "start": "196640",
    "end": "198720"
  },
  {
    "text": "corruption ability like warning bygone",
    "start": "198720",
    "end": "201760"
  },
  {
    "text": "arrow",
    "start": "201760",
    "end": "202879"
  },
  {
    "text": "these are kernel debugging features they",
    "start": "202879",
    "end": "205360"
  },
  {
    "text": "will generate a warning message without",
    "start": "205360",
    "end": "207519"
  },
  {
    "text": "corrupting kernel state so it cannot",
    "start": "207519",
    "end": "210080"
  },
  {
    "text": "propagate as well",
    "start": "210080",
    "end": "213840"
  },
  {
    "text": "compared to other arrows they will",
    "start": "214640",
    "end": "216560"
  },
  {
    "text": "demonstrate severe memory corrupting",
    "start": "216560",
    "end": "218640"
  },
  {
    "text": "ability",
    "start": "218640",
    "end": "219920"
  },
  {
    "text": "less likely to exploit arrows get less",
    "start": "219920",
    "end": "222400"
  },
  {
    "text": "attention from the community",
    "start": "222400",
    "end": "225200"
  },
  {
    "text": "here is the statistic from historical",
    "start": "225200",
    "end": "228319"
  },
  {
    "text": "kernel cves",
    "start": "228319",
    "end": "230159"
  },
  {
    "text": "the uf auto bond double free arrows make",
    "start": "230159",
    "end": "233680"
  },
  {
    "text": "up the larger portion of cves",
    "start": "233680",
    "end": "236239"
  },
  {
    "text": "the second largest one is arrows",
    "start": "236239",
    "end": "239120"
  },
  {
    "text": "with limited memory corruption abilities",
    "start": "239120",
    "end": "241360"
  },
  {
    "text": "like general protection fault",
    "start": "241360",
    "end": "243760"
  },
  {
    "text": "and 9.0 reference which account for 31",
    "start": "243760",
    "end": "248000"
  },
  {
    "text": "of cves",
    "start": "248000",
    "end": "250080"
  },
  {
    "text": "arrows without memory corruption only",
    "start": "250080",
    "end": "252159"
  },
  {
    "text": "make up one percent savings",
    "start": "252159",
    "end": "255840"
  },
  {
    "text": "other than smaller portion the cvss",
    "start": "255840",
    "end": "258400"
  },
  {
    "text": "score for this type of airbag",
    "start": "258400",
    "end": "260959"
  },
  {
    "text": "is lower as well",
    "start": "260959",
    "end": "264079"
  },
  {
    "text": "the average services score for uf auto",
    "start": "264639",
    "end": "267600"
  },
  {
    "text": "bond double three arrows is 6.17",
    "start": "267600",
    "end": "271600"
  },
  {
    "text": "while the average score for general",
    "start": "271600",
    "end": "273440"
  },
  {
    "text": "protection fault 9.3 reference is",
    "start": "273440",
    "end": "277080"
  },
  {
    "text": "5.48",
    "start": "277080",
    "end": "278639"
  },
  {
    "text": "and the nets for warning is 3.75",
    "start": "278639",
    "end": "283160"
  },
  {
    "text": "so they get less attention when we see",
    "start": "284320",
    "end": "287040"
  },
  {
    "text": "an arrow like warning or 9.3 reference",
    "start": "287040",
    "end": "290479"
  },
  {
    "text": "we may think they are unexploitable in",
    "start": "290479",
    "end": "293040"
  },
  {
    "text": "other words they are trash bags because",
    "start": "293040",
    "end": "295840"
  },
  {
    "text": "their memory corruption ability is",
    "start": "295840",
    "end": "297600"
  },
  {
    "text": "limited",
    "start": "297600",
    "end": "298880"
  },
  {
    "text": "but most exploitation requires memory",
    "start": "298880",
    "end": "301440"
  },
  {
    "text": "corruption",
    "start": "301440",
    "end": "304000"
  },
  {
    "text": "however",
    "start": "305840",
    "end": "307039"
  },
  {
    "text": "this may not always be true",
    "start": "307039",
    "end": "309520"
  },
  {
    "text": "this is a real kernel back being fixed",
    "start": "309520",
    "end": "312000"
  },
  {
    "text": "in absolutely silently",
    "start": "312000",
    "end": "314160"
  },
  {
    "text": "here are some code snippets of the block",
    "start": "314160",
    "end": "317280"
  },
  {
    "text": "there are three functions contributing",
    "start": "317280",
    "end": "319280"
  },
  {
    "text": "to the arrow let's go through it one by",
    "start": "319280",
    "end": "321360"
  },
  {
    "text": "one",
    "start": "321360",
    "end": "324320"
  },
  {
    "text": "the first one is the time attach",
    "start": "324320",
    "end": "326479"
  },
  {
    "text": "function",
    "start": "326479",
    "end": "327759"
  },
  {
    "text": "the time flag here is controlled by",
    "start": "327759",
    "end": "330080"
  },
  {
    "text": "users",
    "start": "330080",
    "end": "331120"
  },
  {
    "text": "in this function",
    "start": "331120",
    "end": "332560"
  },
  {
    "text": "if the young api flag is enabled which",
    "start": "332560",
    "end": "335759"
  },
  {
    "text": "means",
    "start": "335759",
    "end": "336720"
  },
  {
    "text": "if condition is satisfied it will",
    "start": "336720",
    "end": "339120"
  },
  {
    "text": "initialize a timer and link current api",
    "start": "339120",
    "end": "342000"
  },
  {
    "text": "to the list of the device",
    "start": "342000",
    "end": "344080"
  },
  {
    "text": "otherwise there will be no timer and",
    "start": "344080",
    "end": "346880"
  },
  {
    "text": "kernel api will not be linked into the",
    "start": "346880",
    "end": "349039"
  },
  {
    "text": "device",
    "start": "349039",
    "end": "352039"
  },
  {
    "text": "the second function we need to look at",
    "start": "352720",
    "end": "354639"
  },
  {
    "text": "is the time detach function",
    "start": "354639",
    "end": "356720"
  },
  {
    "text": "these two are pair attach and detach",
    "start": "356720",
    "end": "360080"
  },
  {
    "text": "here if the api flag is enabled",
    "start": "360080",
    "end": "363440"
  },
  {
    "text": "it will cancel the timer from the api",
    "start": "363440",
    "end": "366319"
  },
  {
    "text": "object",
    "start": "366319",
    "end": "367360"
  },
  {
    "text": "and remove the api from the list",
    "start": "367360",
    "end": "370319"
  },
  {
    "text": "otherwise the kernel thinks the api",
    "start": "370319",
    "end": "372800"
  },
  {
    "text": "functionality is not enabled and it will",
    "start": "372800",
    "end": "374800"
  },
  {
    "text": "not cancel the timer",
    "start": "374800",
    "end": "376560"
  },
  {
    "text": "and we will not delete",
    "start": "376560",
    "end": "378880"
  },
  {
    "text": "the linked list",
    "start": "378880",
    "end": "380560"
  },
  {
    "text": "but eventually it will destroy the file",
    "start": "380560",
    "end": "383440"
  },
  {
    "text": "which will free the memory of the api",
    "start": "383440",
    "end": "386080"
  },
  {
    "text": "object",
    "start": "386080",
    "end": "388478"
  },
  {
    "text": "the last one is the function to free the",
    "start": "389759",
    "end": "392240"
  },
  {
    "text": "device",
    "start": "392240",
    "end": "393280"
  },
  {
    "text": "when it's called it will go through the",
    "start": "393280",
    "end": "395759"
  },
  {
    "text": "api list and see which one is still in",
    "start": "395759",
    "end": "398479"
  },
  {
    "text": "the list and destroy them one by one",
    "start": "398479",
    "end": "402560"
  },
  {
    "text": "now let's look at how the bug will",
    "start": "405039",
    "end": "407360"
  },
  {
    "text": "happen",
    "start": "407360",
    "end": "409840"
  },
  {
    "text": "since the time flag is controlled by",
    "start": "410880",
    "end": "413120"
  },
  {
    "text": "users users can specify inconsistent",
    "start": "413120",
    "end": "416240"
  },
  {
    "text": "flags between the tongue attached and",
    "start": "416240",
    "end": "418240"
  },
  {
    "text": "the time detach function",
    "start": "418240",
    "end": "420319"
  },
  {
    "text": "specifically if you also disable the api",
    "start": "420319",
    "end": "423680"
  },
  {
    "text": "flag intent attach function",
    "start": "423680",
    "end": "427440"
  },
  {
    "text": "the timer in the",
    "start": "427520",
    "end": "429039"
  },
  {
    "text": "api object will not be initialized",
    "start": "429039",
    "end": "433919"
  },
  {
    "text": "and the api will be nopi will not be in",
    "start": "433919",
    "end": "436560"
  },
  {
    "text": "the list",
    "start": "436560",
    "end": "439039"
  },
  {
    "text": "and then the user enable the api flag",
    "start": "440720",
    "end": "444560"
  },
  {
    "text": "and in a time detach",
    "start": "444560",
    "end": "447599"
  },
  {
    "text": "it will cancel the timer",
    "start": "448639",
    "end": "451840"
  },
  {
    "text": "and inside the timer cancel function it",
    "start": "452319",
    "end": "455039"
  },
  {
    "text": "will dereference a pointer in the timer",
    "start": "455039",
    "end": "457440"
  },
  {
    "text": "object",
    "start": "457440",
    "end": "459919"
  },
  {
    "text": "but since the timer is not initialized",
    "start": "460000",
    "end": "462800"
  },
  {
    "text": "so there will be no valid pointer in the",
    "start": "462800",
    "end": "465360"
  },
  {
    "text": "timer object",
    "start": "465360",
    "end": "466800"
  },
  {
    "text": "so the kernel will dereference a num",
    "start": "466800",
    "end": "468639"
  },
  {
    "text": "pointer and generate a pointer",
    "start": "468639",
    "end": "470960"
  },
  {
    "text": "dereference error",
    "start": "470960",
    "end": "473840"
  },
  {
    "text": "a question for this is whether this",
    "start": "475039",
    "end": "477199"
  },
  {
    "text": "arrow is exploitable",
    "start": "477199",
    "end": "480560"
  },
  {
    "text": "the execution always leads to access of",
    "start": "481759",
    "end": "484879"
  },
  {
    "text": "the timer object but the timer object is",
    "start": "484879",
    "end": "488000"
  },
  {
    "text": "not initialized which is full of zero",
    "start": "488000",
    "end": "491360"
  },
  {
    "text": "so it will always dereference a num",
    "start": "491360",
    "end": "493759"
  },
  {
    "text": "pointer",
    "start": "493759",
    "end": "495599"
  },
  {
    "text": "however mapping memory at zero address",
    "start": "495599",
    "end": "498160"
  },
  {
    "text": "is not allowed in this current",
    "start": "498160",
    "end": "501039"
  },
  {
    "text": "so this arrow is less likely to exploit",
    "start": "501039",
    "end": "506680"
  },
  {
    "text": "the back could actually have a totally",
    "start": "507680",
    "end": "510240"
  },
  {
    "text": "different arrow behavior if we trigger",
    "start": "510240",
    "end": "512560"
  },
  {
    "text": "it differently",
    "start": "512560",
    "end": "514399"
  },
  {
    "text": "this time we enable the api flag",
    "start": "514399",
    "end": "517919"
  },
  {
    "text": "in a time",
    "start": "517919",
    "end": "519120"
  },
  {
    "text": "in the time attach function",
    "start": "519120",
    "end": "522320"
  },
  {
    "text": "and we will have a timer initialized and",
    "start": "522320",
    "end": "525040"
  },
  {
    "text": "the current learning api will be linked",
    "start": "525040",
    "end": "526880"
  },
  {
    "text": "in the list",
    "start": "526880",
    "end": "530120"
  },
  {
    "text": "next we disable the api flag in the time",
    "start": "534399",
    "end": "537120"
  },
  {
    "text": "detach function",
    "start": "537120",
    "end": "540000"
  },
  {
    "text": "so",
    "start": "540240",
    "end": "541120"
  },
  {
    "text": "the api will be still in the list but it",
    "start": "541120",
    "end": "544320"
  },
  {
    "text": "will destroy it",
    "start": "544320",
    "end": "546000"
  },
  {
    "text": "by the file",
    "start": "546000",
    "end": "549320"
  },
  {
    "text": "next we free the device and the kernel",
    "start": "553440",
    "end": "556160"
  },
  {
    "text": "will go over the api list",
    "start": "556160",
    "end": "558399"
  },
  {
    "text": "and access to the navr object",
    "start": "558399",
    "end": "563080"
  },
  {
    "text": "which was",
    "start": "563279",
    "end": "564959"
  },
  {
    "text": "which was freed in a time detached",
    "start": "564959",
    "end": "566720"
  },
  {
    "text": "function and this will result in a uf",
    "start": "566720",
    "end": "569120"
  },
  {
    "text": "arrow",
    "start": "569120",
    "end": "571519"
  },
  {
    "text": "the arrow becomes different how about",
    "start": "573200",
    "end": "575360"
  },
  {
    "text": "the exploitability",
    "start": "575360",
    "end": "577680"
  },
  {
    "text": "exploiting this uf is straightforward",
    "start": "577680",
    "end": "581440"
  },
  {
    "text": "the vulnerable object is allocated in",
    "start": "581440",
    "end": "583920"
  },
  {
    "text": "general case which means attackers can",
    "start": "583920",
    "end": "586720"
  },
  {
    "text": "allocate another type of object in the",
    "start": "586720",
    "end": "589200"
  },
  {
    "text": "same cache",
    "start": "589200",
    "end": "591839"
  },
  {
    "text": "looking at the definition of the object",
    "start": "592080",
    "end": "594720"
  },
  {
    "text": "it contains an escape buff object",
    "start": "594720",
    "end": "599439"
  },
  {
    "text": "so when freeing the unapi struct object",
    "start": "599600",
    "end": "602880"
  },
  {
    "text": "it will free the sk buff inside",
    "start": "602880",
    "end": "607279"
  },
  {
    "text": "an attacker can get a control hijacking",
    "start": "607839",
    "end": "610640"
  },
  {
    "text": "ability when freeing sk buff",
    "start": "610640",
    "end": "614480"
  },
  {
    "text": "because the free of sk buff will",
    "start": "614480",
    "end": "616800"
  },
  {
    "text": "dereference a function pointer inside",
    "start": "616800",
    "end": "619200"
  },
  {
    "text": "the sk buff",
    "start": "619200",
    "end": "620640"
  },
  {
    "text": "by spraying memory attacker can temper",
    "start": "620640",
    "end": "623519"
  },
  {
    "text": "the sk bar pointer to a fake object",
    "start": "623519",
    "end": "626560"
  },
  {
    "text": "where the function pointer can be",
    "start": "626560",
    "end": "628079"
  },
  {
    "text": "controlled",
    "start": "628079",
    "end": "629200"
  },
  {
    "text": "after this attacker can obtain a control",
    "start": "629200",
    "end": "631680"
  },
  {
    "text": "for hijacking ability",
    "start": "631680",
    "end": "634959"
  },
  {
    "text": "in this case we successfully turned the",
    "start": "635440",
    "end": "638480"
  },
  {
    "text": "i exploitable crash",
    "start": "638480",
    "end": "640560"
  },
  {
    "text": "to an exploitable uf for the same bug",
    "start": "640560",
    "end": "644399"
  },
  {
    "text": "the uf doesn't require complicated",
    "start": "644399",
    "end": "646720"
  },
  {
    "text": "exploitation methods you spread the",
    "start": "646720",
    "end": "649040"
  },
  {
    "text": "memory and you will be able to hijack",
    "start": "649040",
    "end": "651279"
  },
  {
    "text": "the kernel execution flow",
    "start": "651279",
    "end": "652820"
  },
  {
    "text": "[Music]",
    "start": "652820",
    "end": "655120"
  },
  {
    "text": "why this is possible to kernel box",
    "start": "655120",
    "end": "659959"
  },
  {
    "text": "because kernel bugs are complicated",
    "start": "660399",
    "end": "663120"
  },
  {
    "text": "the same bug could cause different crash",
    "start": "663120",
    "end": "665279"
  },
  {
    "text": "behaviors that we call them multiple",
    "start": "665279",
    "end": "667519"
  },
  {
    "text": "arrow behaviors of bugs",
    "start": "667519",
    "end": "670079"
  },
  {
    "text": "when the bug is triggered differently it",
    "start": "670079",
    "end": "672399"
  },
  {
    "text": "shows different arrow behaviors in this",
    "start": "672399",
    "end": "675040"
  },
  {
    "text": "case",
    "start": "675040",
    "end": "676000"
  },
  {
    "text": "it's different inconsistency",
    "start": "676000",
    "end": "678880"
  },
  {
    "text": "of conflag between the tile attached",
    "start": "678880",
    "end": "680959"
  },
  {
    "text": "function and the tiny patch function",
    "start": "680959",
    "end": "682900"
  },
  {
    "text": "[Music]",
    "start": "682900",
    "end": "685040"
  },
  {
    "text": "arrow behaviors demonstrate the bug",
    "start": "685040",
    "end": "687440"
  },
  {
    "text": "effects which indeed is the memory",
    "start": "687440",
    "end": "690320"
  },
  {
    "text": "corruption ability",
    "start": "690320",
    "end": "692320"
  },
  {
    "text": "when we expose multiviral behaviors of",
    "start": "692320",
    "end": "695040"
  },
  {
    "text": "bugs we will be able to figure out the",
    "start": "695040",
    "end": "697440"
  },
  {
    "text": "memory corruption ability of the bug for",
    "start": "697440",
    "end": "700160"
  },
  {
    "text": "example we'll be able to know the bug",
    "start": "700160",
    "end": "703279"
  },
  {
    "text": "could cause a uf other than a nonpointed",
    "start": "703279",
    "end": "706160"
  },
  {
    "text": "reference arrow",
    "start": "706160",
    "end": "708879"
  },
  {
    "text": "different bug effects represent",
    "start": "709279",
    "end": "711760"
  },
  {
    "text": "different exploit potential",
    "start": "711760",
    "end": "714000"
  },
  {
    "text": "when we see a kernel always crash with",
    "start": "714000",
    "end": "716560"
  },
  {
    "text": "with",
    "start": "716560",
    "end": "717519"
  },
  {
    "text": "a 9.0 reference arrow the bug might be",
    "start": "717519",
    "end": "720240"
  },
  {
    "text": "less likely to exploit",
    "start": "720240",
    "end": "722240"
  },
  {
    "text": "however",
    "start": "722240",
    "end": "723440"
  },
  {
    "text": "when we find the new inputs that will",
    "start": "723440",
    "end": "725440"
  },
  {
    "text": "cause kernel to generate a uf arrow we",
    "start": "725440",
    "end": "728560"
  },
  {
    "text": "might be able to to utilize the uf to do",
    "start": "728560",
    "end": "731680"
  },
  {
    "text": "exploitation",
    "start": "731680",
    "end": "734480"
  },
  {
    "text": "so with different bug effects exposed we",
    "start": "734880",
    "end": "738160"
  },
  {
    "text": "will be able to find bug effects that is",
    "start": "738160",
    "end": "740880"
  },
  {
    "text": "most likely to exploit to have a better",
    "start": "740880",
    "end": "743440"
  },
  {
    "text": "estimation of exploitability",
    "start": "743440",
    "end": "745920"
  },
  {
    "text": "and we probably will turn unexploitable",
    "start": "745920",
    "end": "749040"
  },
  {
    "text": "bugs to exploitable ones",
    "start": "749040",
    "end": "751200"
  },
  {
    "text": "but how to do this",
    "start": "751200",
    "end": "754320"
  },
  {
    "text": "first of all to find the multiple error",
    "start": "754800",
    "end": "757040"
  },
  {
    "text": "behaviors of bugs",
    "start": "757040",
    "end": "758880"
  },
  {
    "text": "coverage based on buzzing is not",
    "start": "758880",
    "end": "760720"
  },
  {
    "text": "suitable",
    "start": "760720",
    "end": "761839"
  },
  {
    "text": "because we need to trigger the same bug",
    "start": "761839",
    "end": "764000"
  },
  {
    "text": "differently to expose their multiplier",
    "start": "764000",
    "end": "766720"
  },
  {
    "text": "behaviors",
    "start": "766720",
    "end": "767920"
  },
  {
    "text": "which need to test on the same piece of",
    "start": "767920",
    "end": "770160"
  },
  {
    "text": "code over and over again however",
    "start": "770160",
    "end": "773120"
  },
  {
    "text": "coverage-based advisor by design will",
    "start": "773120",
    "end": "776000"
  },
  {
    "text": "try to test all new code as much as",
    "start": "776000",
    "end": "778160"
  },
  {
    "text": "possible",
    "start": "778160",
    "end": "779519"
  },
  {
    "text": "intuitively this is contrary to our goal",
    "start": "779519",
    "end": "783360"
  },
  {
    "text": "so",
    "start": "783360",
    "end": "784959"
  },
  {
    "text": "we propose an object-driven kernel",
    "start": "784959",
    "end": "787760"
  },
  {
    "text": "function",
    "start": "787760",
    "end": "789120"
  },
  {
    "text": "the inside of our approach is to use",
    "start": "789120",
    "end": "791680"
  },
  {
    "text": "kernel objects to bundle the fusing",
    "start": "791680",
    "end": "793760"
  },
  {
    "text": "scope",
    "start": "793760",
    "end": "794720"
  },
  {
    "text": "we use the reachability of the kernel",
    "start": "794720",
    "end": "797360"
  },
  {
    "text": "objects as an additional function",
    "start": "797360",
    "end": "799200"
  },
  {
    "text": "feedback this feedback allows us to",
    "start": "799200",
    "end": "802160"
  },
  {
    "text": "differentiate inputs when the bug is",
    "start": "802160",
    "end": "804399"
  },
  {
    "text": "triggered differently",
    "start": "804399",
    "end": "807279"
  },
  {
    "text": "we implement our approach as a",
    "start": "807279",
    "end": "809120"
  },
  {
    "text": "customized puzzle based on this caller",
    "start": "809120",
    "end": "814440"
  },
  {
    "text": "specifically our first step is to find",
    "start": "816480",
    "end": "819519"
  },
  {
    "text": "the kernel objects",
    "start": "819519",
    "end": "821440"
  },
  {
    "text": "we take the crash report as input",
    "start": "821440",
    "end": "824639"
  },
  {
    "text": "we start from the code where the crash",
    "start": "824639",
    "end": "827199"
  },
  {
    "text": "happens then we backward analyze the dev",
    "start": "827199",
    "end": "830240"
  },
  {
    "text": "use sharing of the data along the way",
    "start": "830240",
    "end": "833760"
  },
  {
    "text": "we collect the type of information of",
    "start": "833760",
    "end": "835360"
  },
  {
    "text": "the data flow",
    "start": "835360",
    "end": "838079"
  },
  {
    "text": "here is the example of how we identified",
    "start": "838800",
    "end": "841440"
  },
  {
    "text": "the object for buzzing in this case it's",
    "start": "841440",
    "end": "844639"
  },
  {
    "text": "a non-pointed reference in timer active",
    "start": "844639",
    "end": "847120"
  },
  {
    "text": "function",
    "start": "847120",
    "end": "849279"
  },
  {
    "text": "we backward analyze and first find the",
    "start": "849279",
    "end": "852000"
  },
  {
    "text": "timer structure",
    "start": "852000",
    "end": "855040"
  },
  {
    "text": "then we follow the data flow and we find",
    "start": "855120",
    "end": "857760"
  },
  {
    "text": "the api struct and time file structure",
    "start": "857760",
    "end": "860560"
  },
  {
    "text": "in the time detach function",
    "start": "860560",
    "end": "864000"
  },
  {
    "text": "with the objects on hands we then use a",
    "start": "864480",
    "end": "867279"
  },
  {
    "text": "customized compiler to instrument the",
    "start": "867279",
    "end": "870240"
  },
  {
    "text": "basic block which are involved with the",
    "start": "870240",
    "end": "873040"
  },
  {
    "text": "operation of these objects the",
    "start": "873040",
    "end": "875199"
  },
  {
    "text": "instrumented code will send object",
    "start": "875199",
    "end": "877440"
  },
  {
    "text": "feedback to the fuzzer when it's",
    "start": "877440",
    "end": "879360"
  },
  {
    "text": "executed",
    "start": "879360",
    "end": "880720"
  },
  {
    "text": "so in addition to code coverage we also",
    "start": "880720",
    "end": "883680"
  },
  {
    "text": "have object coverage as a feedback to",
    "start": "883680",
    "end": "886240"
  },
  {
    "text": "buzzer",
    "start": "886240",
    "end": "887680"
  },
  {
    "text": "we also have a new seed selection and a",
    "start": "887680",
    "end": "890639"
  },
  {
    "text": "new input mutation approach based on the",
    "start": "890639",
    "end": "893120"
  },
  {
    "text": "feedback of object",
    "start": "893120",
    "end": "897320"
  },
  {
    "text": "our tool and other details will be",
    "start": "898160",
    "end": "900240"
  },
  {
    "text": "released soon",
    "start": "900240",
    "end": "903120"
  },
  {
    "text": "kernel objects kernel box",
    "start": "905040",
    "end": "907199"
  },
  {
    "text": "have multiple arrow behaviors which",
    "start": "907199",
    "end": "909519"
  },
  {
    "text": "represent different exploit potential as",
    "start": "909519",
    "end": "912560"
  },
  {
    "text": "such a bug with seemingly low security",
    "start": "912560",
    "end": "915440"
  },
  {
    "text": "arrow",
    "start": "915440",
    "end": "916560"
  },
  {
    "text": "could have other severe arrows that",
    "start": "916560",
    "end": "918639"
  },
  {
    "text": "result in exploitation",
    "start": "918639",
    "end": "920560"
  },
  {
    "text": "so what does this mean",
    "start": "920560",
    "end": "923760"
  },
  {
    "text": "two kernel vendors don't rely on single",
    "start": "923839",
    "end": "926000"
  },
  {
    "text": "error behavior to estimate the",
    "start": "926000",
    "end": "927600"
  },
  {
    "text": "exploitability of bug",
    "start": "927600",
    "end": "929519"
  },
  {
    "text": "when you see a bug shows warning arrow",
    "start": "929519",
    "end": "932720"
  },
  {
    "text": "the bug might be able to cause a uf",
    "start": "932720",
    "end": "935360"
  },
  {
    "text": "somewhere else",
    "start": "935360",
    "end": "936800"
  },
  {
    "text": "relying on single arrow behavior of bug",
    "start": "936800",
    "end": "939519"
  },
  {
    "text": "could underestimate the consequence of",
    "start": "939519",
    "end": "941759"
  },
  {
    "text": "them",
    "start": "941759",
    "end": "942639"
  },
  {
    "text": "so please fix all the bugs if there has",
    "start": "942639",
    "end": "945600"
  },
  {
    "text": "a patch from upstream you'll never know",
    "start": "945600",
    "end": "948240"
  },
  {
    "text": "whether a trivial fix is a critical",
    "start": "948240",
    "end": "950320"
  },
  {
    "text": "security fix or not",
    "start": "950320",
    "end": "954000"
  },
  {
    "text": "and to offensive technique researchers",
    "start": "954000",
    "end": "956720"
  },
  {
    "text": "a similar trash bag could result in",
    "start": "956720",
    "end": "959040"
  },
  {
    "text": "exploitation",
    "start": "959040",
    "end": "960480"
  },
  {
    "text": "you'll see a warning report for a bug",
    "start": "960480",
    "end": "962880"
  },
  {
    "text": "you might be able to see a uf arrow if",
    "start": "962880",
    "end": "965199"
  },
  {
    "text": "you expose the other arrow behaviors of",
    "start": "965199",
    "end": "968079"
  },
  {
    "text": "their back",
    "start": "968079",
    "end": "969199"
  },
  {
    "text": "other than that",
    "start": "969199",
    "end": "970800"
  },
  {
    "text": "exposing arrow behavior also help you",
    "start": "970800",
    "end": "973440"
  },
  {
    "text": "find better primitives for exploitation",
    "start": "973440",
    "end": "976639"
  },
  {
    "text": "for example",
    "start": "976639",
    "end": "977920"
  },
  {
    "text": "you already find the uf",
    "start": "977920",
    "end": "980000"
  },
  {
    "text": "exposing other error behaviors will tell",
    "start": "980000",
    "end": "982560"
  },
  {
    "text": "you other primitive this uf has",
    "start": "982560",
    "end": "986800"
  },
  {
    "text": "lastly there may be a lot of unfixed",
    "start": "988000",
    "end": "991440"
  },
  {
    "text": "exploitable bug in vendors kernel",
    "start": "991440",
    "end": "994399"
  },
  {
    "text": "these unfixed bugs may look like",
    "start": "994399",
    "end": "996959"
  },
  {
    "text": "non-security back firstly but if you",
    "start": "996959",
    "end": "999759"
  },
  {
    "text": "expose their other bug effects you might",
    "start": "999759",
    "end": "1002240"
  },
  {
    "text": "be able to observe severe memory",
    "start": "1002240",
    "end": "1004240"
  },
  {
    "text": "corruption ability",
    "start": "1004240",
    "end": "1007360"
  },
  {
    "text": "we have a perfect example for this",
    "start": "1007920",
    "end": "1011120"
  },
  {
    "text": "this cve was fixed in upstream back in",
    "start": "1011120",
    "end": "1014320"
  },
  {
    "text": "march 2020",
    "start": "1014320",
    "end": "1016320"
  },
  {
    "text": "it was first discovered by this caller",
    "start": "1016320",
    "end": "1018720"
  },
  {
    "text": "with a warning arrow",
    "start": "1018720",
    "end": "1021759"
  },
  {
    "text": "but in reality it could result in severe",
    "start": "1021759",
    "end": "1024480"
  },
  {
    "text": "uf arrow if the bug is triggered",
    "start": "1024480",
    "end": "1027120"
  },
  {
    "text": "differently",
    "start": "1027120",
    "end": "1029678"
  },
  {
    "text": "we investigated whether it's fixed",
    "start": "1031120",
    "end": "1034000"
  },
  {
    "text": "inventor's kernel it turns out by august",
    "start": "1034000",
    "end": "1037199"
  },
  {
    "text": "2021",
    "start": "1037199",
    "end": "1038720"
  },
  {
    "text": "it's a zero day in central sevens kernel",
    "start": "1038720",
    "end": "1041918"
  },
  {
    "text": "and other central space distros like",
    "start": "1041919",
    "end": "1044558"
  },
  {
    "text": "tencent oils and early os",
    "start": "1044559",
    "end": "1048558"
  },
  {
    "text": "all right let's look at the bug",
    "start": "1050400",
    "end": "1052720"
  },
  {
    "text": "so on the right side it's a is the error",
    "start": "1052720",
    "end": "1056000"
  },
  {
    "text": "message generated by case",
    "start": "1056000",
    "end": "1058480"
  },
  {
    "text": "it details logs the allocation entry of",
    "start": "1058480",
    "end": "1061120"
  },
  {
    "text": "the vulnerable object for the uf",
    "start": "1061120",
    "end": "1063760"
  },
  {
    "text": "the vulnerable object is allocated by k0",
    "start": "1063760",
    "end": "1067440"
  },
  {
    "text": "in road for change function",
    "start": "1067440",
    "end": "1069760"
  },
  {
    "text": "and",
    "start": "1069760",
    "end": "1070640"
  },
  {
    "text": "it's free the backward queue in rows for",
    "start": "1070640",
    "end": "1072640"
  },
  {
    "text": "delete filter and it turns out the free",
    "start": "1072640",
    "end": "1075679"
  },
  {
    "text": "work was queued by root for chain",
    "start": "1075679",
    "end": "1077919"
  },
  {
    "text": "function as well",
    "start": "1077919",
    "end": "1079760"
  },
  {
    "text": "so",
    "start": "1079760",
    "end": "1080480"
  },
  {
    "text": "the vulnerable object is allocated and",
    "start": "1080480",
    "end": "1083360"
  },
  {
    "text": "freed by the same function",
    "start": "1083360",
    "end": "1085600"
  },
  {
    "text": "and the leo f arrow is triggered after",
    "start": "1085600",
    "end": "1088160"
  },
  {
    "text": "the free object is accessed in another",
    "start": "1088160",
    "end": "1090880"
  },
  {
    "text": "function",
    "start": "1090880",
    "end": "1093880"
  },
  {
    "text": "so what does road fall change do",
    "start": "1095280",
    "end": "1098480"
  },
  {
    "text": "it basically does two things",
    "start": "1098480",
    "end": "1100960"
  },
  {
    "text": "the first thing to is to allocate a road",
    "start": "1100960",
    "end": "1104320"
  },
  {
    "text": "for filter object",
    "start": "1104320",
    "end": "1106080"
  },
  {
    "text": "when users requires a new filter to",
    "start": "1106080",
    "end": "1108799"
  },
  {
    "text": "kernel it allocates the object and",
    "start": "1108799",
    "end": "1111919"
  },
  {
    "text": "initialize it properly",
    "start": "1111919",
    "end": "1114960"
  },
  {
    "text": "the second thing it does is to update",
    "start": "1114960",
    "end": "1118320"
  },
  {
    "text": "the road for filter object",
    "start": "1118320",
    "end": "1120799"
  },
  {
    "text": "for users requires to modify the rows",
    "start": "1120799",
    "end": "1123440"
  },
  {
    "text": "for filter it first allocate a new one",
    "start": "1123440",
    "end": "1126880"
  },
  {
    "text": "and then copy the content of the old one",
    "start": "1126880",
    "end": "1129360"
  },
  {
    "text": "to a new one and finally it will re you",
    "start": "1129360",
    "end": "1132240"
  },
  {
    "text": "will remove the new one and freeze",
    "start": "1132240",
    "end": "1136000"
  },
  {
    "text": "the role for object is managed by",
    "start": "1136000",
    "end": "1139039"
  },
  {
    "text": "managed in the linked list",
    "start": "1139039",
    "end": "1142880"
  },
  {
    "text": "so when updating the correct operation",
    "start": "1142880",
    "end": "1146160"
  },
  {
    "text": "to delete the other route for object is",
    "start": "1146160",
    "end": "1149039"
  },
  {
    "text": "to remove it from the linked list then",
    "start": "1149039",
    "end": "1151760"
  },
  {
    "text": "for it",
    "start": "1151760",
    "end": "1153120"
  },
  {
    "text": "it's wrong if we remove the new one from",
    "start": "1153120",
    "end": "1155840"
  },
  {
    "text": "the linked list and freely old one",
    "start": "1155840",
    "end": "1159760"
  },
  {
    "text": "and this is exactly how this bug",
    "start": "1160400",
    "end": "1163440"
  },
  {
    "text": "happened and how the",
    "start": "1163440",
    "end": "1165440"
  },
  {
    "text": "how the bug is fixed",
    "start": "1165440",
    "end": "1167919"
  },
  {
    "text": "here is the patch to fix the bug",
    "start": "1167919",
    "end": "1170480"
  },
  {
    "text": "the code in red is the root cause of the",
    "start": "1170480",
    "end": "1173200"
  },
  {
    "text": "bug and then the code in green is what",
    "start": "1173200",
    "end": "1175760"
  },
  {
    "text": "is fixed",
    "start": "1175760",
    "end": "1177760"
  },
  {
    "text": "the bug only removes the new allocated",
    "start": "1177760",
    "end": "1180400"
  },
  {
    "text": "object from the list and then the old",
    "start": "1180400",
    "end": "1182880"
  },
  {
    "text": "one gets freed in the following",
    "start": "1182880",
    "end": "1185840"
  },
  {
    "text": "so we will have a free object in the",
    "start": "1185840",
    "end": "1188400"
  },
  {
    "text": "linked list",
    "start": "1188400",
    "end": "1191799"
  },
  {
    "text": "this is a bug report that the state's",
    "start": "1193679",
    "end": "1195760"
  },
  {
    "text": "caller first identified this bug",
    "start": "1195760",
    "end": "1198400"
  },
  {
    "text": "it shows a warning arrow that happens at",
    "start": "1198400",
    "end": "1201200"
  },
  {
    "text": "calling rcu",
    "start": "1201200",
    "end": "1202799"
  },
  {
    "text": "it requires collision to trigger",
    "start": "1202799",
    "end": "1205200"
  },
  {
    "text": "so the first glance of this factory",
    "start": "1205200",
    "end": "1207360"
  },
  {
    "text": "probe will give you the sense that the",
    "start": "1207360",
    "end": "1209520"
  },
  {
    "text": "trigger of this bug is very unstable",
    "start": "1209520",
    "end": "1212240"
  },
  {
    "text": "because a lot of unreproducible bugs are",
    "start": "1212240",
    "end": "1215039"
  },
  {
    "text": "related with rco operations",
    "start": "1215039",
    "end": "1219480"
  },
  {
    "text": "however based on this bug report using",
    "start": "1220000",
    "end": "1223200"
  },
  {
    "text": "our tool we are able to find its other",
    "start": "1223200",
    "end": "1226159"
  },
  {
    "text": "other error behaviors and discover other",
    "start": "1226159",
    "end": "1229440"
  },
  {
    "text": "exploit primitives automatically",
    "start": "1229440",
    "end": "1233039"
  },
  {
    "text": "this is the uf arrow trigger when the",
    "start": "1233039",
    "end": "1235280"
  },
  {
    "text": "free object is accessed in the root for",
    "start": "1235280",
    "end": "1237840"
  },
  {
    "text": "get function",
    "start": "1237840",
    "end": "1240559"
  },
  {
    "text": "and",
    "start": "1242159",
    "end": "1243120"
  },
  {
    "text": "this is another uf arrow triggered when",
    "start": "1243120",
    "end": "1245760"
  },
  {
    "text": "the freed object is accessed in the root",
    "start": "1245760",
    "end": "1248559"
  },
  {
    "text": "destroy function",
    "start": "1248559",
    "end": "1249520"
  },
  {
    "text": "[Music]",
    "start": "1249520",
    "end": "1252320"
  },
  {
    "text": "and this is another uf arrow found file",
    "start": "1252320",
    "end": "1255440"
  },
  {
    "text": "tool automatically",
    "start": "1255440",
    "end": "1257520"
  },
  {
    "text": "in the root for dump function",
    "start": "1257520",
    "end": "1260720"
  },
  {
    "text": "different uf arrows in different",
    "start": "1260720",
    "end": "1262640"
  },
  {
    "text": "functions represents different exploit",
    "start": "1262640",
    "end": "1265520"
  },
  {
    "text": "primitives when doing exploitation",
    "start": "1265520",
    "end": "1268159"
  },
  {
    "text": "these automatically discovered",
    "start": "1268159",
    "end": "1270000"
  },
  {
    "text": "primitives are very useful in the",
    "start": "1270000",
    "end": "1271760"
  },
  {
    "text": "exploitation of this bug",
    "start": "1271760",
    "end": "1273760"
  },
  {
    "text": "let me show you how we use them to",
    "start": "1273760",
    "end": "1276159"
  },
  {
    "text": "exploit this bar",
    "start": "1276159",
    "end": "1279200"
  },
  {
    "text": "so",
    "start": "1280799",
    "end": "1281600"
  },
  {
    "text": "for example we could utilize the",
    "start": "1281600",
    "end": "1283600"
  },
  {
    "text": "automatically discovered primitive to",
    "start": "1283600",
    "end": "1286159"
  },
  {
    "text": "bypass kslr",
    "start": "1286159",
    "end": "1288960"
  },
  {
    "text": "looking at the uf arrow found in roots",
    "start": "1288960",
    "end": "1290960"
  },
  {
    "text": "for dump function the function has",
    "start": "1290960",
    "end": "1293440"
  },
  {
    "text": "several calls to",
    "start": "1293440",
    "end": "1295120"
  },
  {
    "text": "a push function which will send current",
    "start": "1295120",
    "end": "1297679"
  },
  {
    "text": "data to user space",
    "start": "1297679",
    "end": "1299600"
  },
  {
    "text": "and this means",
    "start": "1299600",
    "end": "1301039"
  },
  {
    "text": "there are some data fields in a",
    "start": "1301039",
    "end": "1303200"
  },
  {
    "text": "vulnerable object will be leaked to user",
    "start": "1303200",
    "end": "1305520"
  },
  {
    "text": "space through the root photon function",
    "start": "1305520",
    "end": "1308640"
  },
  {
    "text": "to bypass ksr we can spray kernel",
    "start": "1308640",
    "end": "1311679"
  },
  {
    "text": "pointers",
    "start": "1311679",
    "end": "1312799"
  },
  {
    "text": "in the leaked field",
    "start": "1312799",
    "end": "1314480"
  },
  {
    "text": "and then trigger the root for dump",
    "start": "1314480",
    "end": "1316159"
  },
  {
    "text": "function took to read kernel pointers to",
    "start": "1316159",
    "end": "1319120"
  },
  {
    "text": "user space",
    "start": "1319120",
    "end": "1321840"
  },
  {
    "text": "to hijack control flow in the",
    "start": "1323520",
    "end": "1324960"
  },
  {
    "text": "exploitation we could also utilize the",
    "start": "1324960",
    "end": "1327520"
  },
  {
    "text": "automatically discovered uf arrow in the",
    "start": "1327520",
    "end": "1330400"
  },
  {
    "text": "root for destroy function",
    "start": "1330400",
    "end": "1332720"
  },
  {
    "text": "the function will queue a kernel rco",
    "start": "1332720",
    "end": "1335440"
  },
  {
    "text": "work",
    "start": "1335440",
    "end": "1336320"
  },
  {
    "text": "in which a function to handle the work",
    "start": "1336320",
    "end": "1338720"
  },
  {
    "text": "will be stored in object",
    "start": "1338720",
    "end": "1340799"
  },
  {
    "text": "specifically looking at the definition",
    "start": "1340799",
    "end": "1343120"
  },
  {
    "text": "of root for filter structure",
    "start": "1343120",
    "end": "1345600"
  },
  {
    "text": "there is a nested data structure called",
    "start": "1345600",
    "end": "1348640"
  },
  {
    "text": "rco work",
    "start": "1348640",
    "end": "1350480"
  },
  {
    "text": "which stores the information of the rco",
    "start": "1350480",
    "end": "1353520"
  },
  {
    "text": "world and inside the rco work structure",
    "start": "1353520",
    "end": "1356880"
  },
  {
    "text": "there is a structure called work",
    "start": "1356880",
    "end": "1358840"
  },
  {
    "text": "structure which contains a function",
    "start": "1358840",
    "end": "1361120"
  },
  {
    "text": "pointer to handle the work",
    "start": "1361120",
    "end": "1363600"
  },
  {
    "text": "so indeed there is a function pointer",
    "start": "1363600",
    "end": "1365760"
  },
  {
    "text": "inside the vulnerable object",
    "start": "1365760",
    "end": "1368400"
  },
  {
    "text": "attackers could spread kernel memory to",
    "start": "1368400",
    "end": "1370799"
  },
  {
    "text": "overwrite the function point of the",
    "start": "1370799",
    "end": "1372720"
  },
  {
    "text": "queue in the rco world",
    "start": "1372720",
    "end": "1375120"
  },
  {
    "text": "and eventually attacker will obtain a",
    "start": "1375120",
    "end": "1377440"
  },
  {
    "text": "control flow hijacking primitive from",
    "start": "1377440",
    "end": "1379840"
  },
  {
    "text": "this uf arrow happened in root for",
    "start": "1379840",
    "end": "1382480"
  },
  {
    "text": "destroy function",
    "start": "1382480",
    "end": "1385520"
  },
  {
    "text": "in summary facts has multiplier",
    "start": "1386880",
    "end": "1389600"
  },
  {
    "text": "behaviors when they are triggered",
    "start": "1389600",
    "end": "1391200"
  },
  {
    "text": "differently for example bug may generate",
    "start": "1391200",
    "end": "1394400"
  },
  {
    "text": "a num point the reference arrow and may",
    "start": "1394400",
    "end": "1396480"
  },
  {
    "text": "generate a f error",
    "start": "1396480",
    "end": "1398720"
  },
  {
    "text": "with multiple arrow behaviors of bug",
    "start": "1398720",
    "end": "1400960"
  },
  {
    "text": "exposed we will be able to find the",
    "start": "1400960",
    "end": "1403840"
  },
  {
    "text": "worst bug effects to determine the",
    "start": "1403840",
    "end": "1406159"
  },
  {
    "text": "exploitability of the bug",
    "start": "1406159",
    "end": "1408559"
  },
  {
    "text": "in addition",
    "start": "1408559",
    "end": "1409919"
  },
  {
    "text": "we can also utilize it to help discover",
    "start": "1409919",
    "end": "1412559"
  },
  {
    "text": "exploit primitives",
    "start": "1412559",
    "end": "1414240"
  },
  {
    "text": "and find the inputs for it automatically",
    "start": "1414240",
    "end": "1417919"
  },
  {
    "text": "in this example we are able to",
    "start": "1417919",
    "end": "1420000"
  },
  {
    "text": "automatically find the exploit",
    "start": "1420000",
    "end": "1421520"
  },
  {
    "text": "primitives that help bypass kslr and",
    "start": "1421520",
    "end": "1424720"
  },
  {
    "text": "obtain control for hijacking ability",
    "start": "1424720",
    "end": "1429400"
  },
  {
    "text": "in addition to utilizing automatically",
    "start": "1431120",
    "end": "1433520"
  },
  {
    "text": "discovered primitive to exploit the",
    "start": "1433520",
    "end": "1435679"
  },
  {
    "text": "spark i would like to talk about a",
    "start": "1435679",
    "end": "1438240"
  },
  {
    "text": "generic exploitation method for",
    "start": "1438240",
    "end": "1440320"
  },
  {
    "text": "exploiting uaf in linux kernel",
    "start": "1440320",
    "end": "1444480"
  },
  {
    "text": "the exploitation only requires free",
    "start": "1444480",
    "end": "1446799"
  },
  {
    "text": "ability from the uaf",
    "start": "1446799",
    "end": "1449360"
  },
  {
    "text": "specifically uf should be able to free",
    "start": "1449360",
    "end": "1452400"
  },
  {
    "text": "the vulnerable object again after",
    "start": "1452400",
    "end": "1455039"
  },
  {
    "text": "spraying another object to occupy the",
    "start": "1455039",
    "end": "1457200"
  },
  {
    "text": "memory slot",
    "start": "1457200",
    "end": "1459760"
  },
  {
    "text": "also i will utilize the universal spray",
    "start": "1459760",
    "end": "1462960"
  },
  {
    "text": "objects to achieve leaking and ranking",
    "start": "1462960",
    "end": "1465360"
  },
  {
    "text": "ability",
    "start": "1465360",
    "end": "1467919"
  },
  {
    "text": "so to apply this technique in exploiting",
    "start": "1468880",
    "end": "1471840"
  },
  {
    "text": "this bug we first free the vulnerable",
    "start": "1471840",
    "end": "1474720"
  },
  {
    "text": "object",
    "start": "1474720",
    "end": "1477200"
  },
  {
    "text": "out after freeing the memory is free but",
    "start": "1478559",
    "end": "1482320"
  },
  {
    "text": "there has a dangling point referencing",
    "start": "1482320",
    "end": "1484400"
  },
  {
    "text": "it",
    "start": "1484400",
    "end": "1487039"
  },
  {
    "text": "then we spray the universal spray object",
    "start": "1487039",
    "end": "1490880"
  },
  {
    "text": "to occupy the memory slot",
    "start": "1490880",
    "end": "1493440"
  },
  {
    "text": "here we use the message structure",
    "start": "1493440",
    "end": "1496559"
  },
  {
    "text": "it's a flexible structure so it can be",
    "start": "1496559",
    "end": "1498960"
  },
  {
    "text": "allocated in any general cache",
    "start": "1498960",
    "end": "1501600"
  },
  {
    "text": "depending on user control",
    "start": "1501600",
    "end": "1504960"
  },
  {
    "text": "then we free the spread object to the",
    "start": "1505840",
    "end": "1508480"
  },
  {
    "text": "vulnerable",
    "start": "1508480",
    "end": "1509679"
  },
  {
    "text": "through the vulnerability this is the",
    "start": "1509679",
    "end": "1511840"
  },
  {
    "text": "place where we utilize the ability of",
    "start": "1511840",
    "end": "1514080"
  },
  {
    "text": "the vulnerability",
    "start": "1514080",
    "end": "1515679"
  },
  {
    "text": "after freeing the message object becomes",
    "start": "1515679",
    "end": "1518720"
  },
  {
    "text": "free",
    "start": "1518720",
    "end": "1521120"
  },
  {
    "text": "after this we spray a victim object",
    "start": "1521840",
    "end": "1525200"
  },
  {
    "text": "which contains pointers",
    "start": "1525200",
    "end": "1527520"
  },
  {
    "text": "it could be function pointers or heap",
    "start": "1527520",
    "end": "1529760"
  },
  {
    "text": "pointers",
    "start": "1529760",
    "end": "1532400"
  },
  {
    "text": "then we we call the store message",
    "start": "1534080",
    "end": "1536640"
  },
  {
    "text": "function",
    "start": "1536640",
    "end": "1537679"
  },
  {
    "text": "which will copy the content of the",
    "start": "1537679",
    "end": "1539919"
  },
  {
    "text": "object message to user space",
    "start": "1539919",
    "end": "1542880"
  },
  {
    "text": "and this will leak the content of the",
    "start": "1542880",
    "end": "1545520"
  },
  {
    "text": "victim object to user space",
    "start": "1545520",
    "end": "1548400"
  },
  {
    "text": "so we will be able to leak current data",
    "start": "1548400",
    "end": "1552960"
  },
  {
    "text": "and we could also temper the function",
    "start": "1554720",
    "end": "1556799"
  },
  {
    "text": "pointer inside through the message",
    "start": "1556799",
    "end": "1559200"
  },
  {
    "text": "objects to get control flow hijacking",
    "start": "1559200",
    "end": "1561679"
  },
  {
    "text": "ability",
    "start": "1561679",
    "end": "1562880"
  },
  {
    "text": "the whole process is very standard and",
    "start": "1562880",
    "end": "1565679"
  },
  {
    "text": "it has a potential to be developed as an",
    "start": "1565679",
    "end": "1568080"
  },
  {
    "text": "automatic exploit generation approach",
    "start": "1568080",
    "end": "1570159"
  },
  {
    "text": "for you exploiting uf in kernel",
    "start": "1570159",
    "end": "1573200"
  },
  {
    "text": "i have implemented the exploitation",
    "start": "1573200",
    "end": "1575279"
  },
  {
    "text": "method exploiting this ui this cve",
    "start": "1575279",
    "end": "1579200"
  },
  {
    "text": "and i believe a lot of code can be",
    "start": "1579200",
    "end": "1581679"
  },
  {
    "text": "reviewed can be reused exploiting other",
    "start": "1581679",
    "end": "1584640"
  },
  {
    "text": "uf's in kernel",
    "start": "1584640",
    "end": "1587840"
  },
  {
    "text": "there is one more thing about",
    "start": "1588799",
    "end": "1590320"
  },
  {
    "text": "exploitation",
    "start": "1590320",
    "end": "1591760"
  },
  {
    "text": "sometimes we have the controllable",
    "start": "1591760",
    "end": "1593919"
  },
  {
    "text": "hijacking ability but we cannot control",
    "start": "1593919",
    "end": "1596720"
  },
  {
    "text": "the arguments of the control flow",
    "start": "1596720",
    "end": "1599279"
  },
  {
    "text": "for example the argument is always a",
    "start": "1599279",
    "end": "1601440"
  },
  {
    "text": "keeper address",
    "start": "1601440",
    "end": "1604320"
  },
  {
    "text": "and we cannot hijack ctrl to run command",
    "start": "1604720",
    "end": "1607919"
  },
  {
    "text": "function",
    "start": "1607919",
    "end": "1608880"
  },
  {
    "text": "because the argument is not pointing to",
    "start": "1608880",
    "end": "1611440"
  },
  {
    "text": "a stream buffer that we can control",
    "start": "1611440",
    "end": "1614400"
  },
  {
    "text": "and we cannot call to native red cr4",
    "start": "1614400",
    "end": "1617360"
  },
  {
    "text": "function",
    "start": "1617360",
    "end": "1618320"
  },
  {
    "text": "because the first argument is a heap",
    "start": "1618320",
    "end": "1620880"
  },
  {
    "text": "address which cannot help us disable",
    "start": "1620880",
    "end": "1623440"
  },
  {
    "text": "smap and smep",
    "start": "1623440",
    "end": "1627240"
  },
  {
    "text": "in this situation we can try some",
    "start": "1628000",
    "end": "1630480"
  },
  {
    "text": "function gauges in kernel",
    "start": "1630480",
    "end": "1632640"
  },
  {
    "text": "for example the install",
    "start": "1632640",
    "end": "1635039"
  },
  {
    "text": "execute credits function before kernel",
    "start": "1635039",
    "end": "1637679"
  },
  {
    "text": "5.8 or the commit on a set",
    "start": "1637679",
    "end": "1641279"
  },
  {
    "text": "after kernel 5.7",
    "start": "1641279",
    "end": "1645240"
  },
  {
    "text": "these two functions contains contain",
    "start": "1646640",
    "end": "1649520"
  },
  {
    "text": "perfect gadgets that will change the",
    "start": "1649520",
    "end": "1651600"
  },
  {
    "text": "credential of current process",
    "start": "1651600",
    "end": "1654000"
  },
  {
    "text": "specifically looking at the install sql",
    "start": "1654000",
    "end": "1656799"
  },
  {
    "text": "credits function",
    "start": "1656799",
    "end": "1658240"
  },
  {
    "text": "as long as we can set the credit field",
    "start": "1658240",
    "end": "1660799"
  },
  {
    "text": "of the argument to indeed credit which",
    "start": "1660799",
    "end": "1663600"
  },
  {
    "text": "is a global variable we are able to",
    "start": "1663600",
    "end": "1666240"
  },
  {
    "text": "change the credential of our current",
    "start": "1666240",
    "end": "1668159"
  },
  {
    "text": "process to root",
    "start": "1668159",
    "end": "1671279"
  },
  {
    "text": "the code is available in my github repo",
    "start": "1673279",
    "end": "1675840"
  },
  {
    "text": "you are welcome to take a look at it",
    "start": "1675840",
    "end": "1679600"
  },
  {
    "text": "finally i would like to summarize",
    "start": "1681520",
    "end": "1683840"
  },
  {
    "text": "several takeaways here",
    "start": "1683840",
    "end": "1686080"
  },
  {
    "text": "first a kernel box could have multiple",
    "start": "1686080",
    "end": "1688880"
  },
  {
    "text": "error behaviors",
    "start": "1688880",
    "end": "1690399"
  },
  {
    "text": "so when you see a trash bank it could",
    "start": "1690399",
    "end": "1692960"
  },
  {
    "text": "result in severe memory corruption",
    "start": "1692960",
    "end": "1695520"
  },
  {
    "text": "if other error behavior is exposed",
    "start": "1695520",
    "end": "1698880"
  },
  {
    "text": "so for vendors please adopt fixes from",
    "start": "1698880",
    "end": "1702320"
  },
  {
    "text": "upstream even if it fixes trash box",
    "start": "1702320",
    "end": "1707200"
  },
  {
    "text": "second",
    "start": "1707200",
    "end": "1708320"
  },
  {
    "text": "we could utilize the tool to find him to",
    "start": "1708320",
    "end": "1711200"
  },
  {
    "text": "find multiple behaviors of bug and",
    "start": "1711200",
    "end": "1713440"
  },
  {
    "text": "define the exploit primitives",
    "start": "1713440",
    "end": "1715440"
  },
  {
    "text": "automatically",
    "start": "1715440",
    "end": "1716960"
  },
  {
    "text": "as shown in the example we are able to",
    "start": "1716960",
    "end": "1719919"
  },
  {
    "text": "find primitives of bypassing kslr and",
    "start": "1719919",
    "end": "1722960"
  },
  {
    "text": "hijacking control flow automatically",
    "start": "1722960",
    "end": "1726320"
  },
  {
    "text": "lastly",
    "start": "1726320",
    "end": "1727520"
  },
  {
    "text": "there might be other unfixed exploitable",
    "start": "1727520",
    "end": "1730159"
  },
  {
    "text": "bugs in vendors kernel because most",
    "start": "1730159",
    "end": "1733120"
  },
  {
    "text": "vendors only fix cve bugs",
    "start": "1733120",
    "end": "1735760"
  },
  {
    "text": "but a lot of bugs don't have cves and",
    "start": "1735760",
    "end": "1738640"
  },
  {
    "text": "their exploitability are unknown to them",
    "start": "1738640",
    "end": "1741760"
  },
  {
    "text": "these bugs could be very severe but look",
    "start": "1741760",
    "end": "1744399"
  },
  {
    "text": "like",
    "start": "1744399",
    "end": "1745440"
  },
  {
    "text": "trash box so they get ignored",
    "start": "1745440",
    "end": "1748480"
  },
  {
    "text": "checking by the vendor's adult fixes",
    "start": "1748480",
    "end": "1750559"
  },
  {
    "text": "from upstream could be a great way to",
    "start": "1750559",
    "end": "1752640"
  },
  {
    "text": "hunt for zero days",
    "start": "1752640",
    "end": "1755840"
  },
  {
    "text": "that's all of my talk",
    "start": "1756960",
    "end": "1758640"
  },
  {
    "text": "this is john palin from penn state my",
    "start": "1758640",
    "end": "1761120"
  },
  {
    "text": "research focuses on exploitation and",
    "start": "1761120",
    "end": "1763279"
  },
  {
    "text": "defense you can find my other",
    "start": "1763279",
    "end": "1765600"
  },
  {
    "text": "information from my personal website",
    "start": "1765600",
    "end": "1768640"
  },
  {
    "text": "i'm looking for internship for next",
    "start": "1768640",
    "end": "1770480"
  },
  {
    "text": "summer so if you know there is any",
    "start": "1770480",
    "end": "1773039"
  },
  {
    "text": "opportunity",
    "start": "1773039",
    "end": "1774240"
  },
  {
    "text": "feel free to send me a message",
    "start": "1774240",
    "end": "1776559"
  },
  {
    "text": "here is my twitter and you can find my",
    "start": "1776559",
    "end": "1778799"
  },
  {
    "text": "other contact information from my",
    "start": "1778799",
    "end": "1780559"
  },
  {
    "text": "personal website as well",
    "start": "1780559",
    "end": "1782559"
  },
  {
    "text": "it's a great honor being here to share",
    "start": "1782559",
    "end": "1784640"
  },
  {
    "text": "my work now i'm happy to take questions",
    "start": "1784640",
    "end": "1789200"
  },
  {
    "text": "[Music]",
    "start": "1789200",
    "end": "1798819"
  },
  {
    "text": "you",
    "start": "1799360",
    "end": "1801440"
  }
]