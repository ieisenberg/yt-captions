[
  {
    "start": "0",
    "end": "33000"
  },
  {
    "text": "[Music]",
    "start": "4310",
    "end": "17869"
  },
  {
    "text": "good morning ladies and gentlemen and welcome to my talk about http request smuggling in 2020",
    "start": "18480",
    "end": "25279"
  },
  {
    "text": "my name is amit klein you can read more about me in this slide and today we're going to talk",
    "start": "25279",
    "end": "31119"
  },
  {
    "text": "about the http request smuggling which is an attack that involves three actors one is the attacker who",
    "start": "31119",
    "end": "38480"
  },
  {
    "start": "33000",
    "end": "33000"
  },
  {
    "text": "who is a practically a client and the other one and is there a proxy or firewall and the",
    "start": "38480",
    "end": "45200"
  },
  {
    "text": "third actor is a web server or it can be a chain of proxies and firewalls leading to a web",
    "start": "45200",
    "end": "50320"
  },
  {
    "text": "to finally to a web server and the attack involves the attacker connecting over port 80 tcp",
    "start": "50320",
    "end": "58640"
  },
  {
    "text": "to the proxy and sending the proxy uh an http stream consisting of three um",
    "start": "58640",
    "end": "65920"
  },
  {
    "text": "chunks or three parts a followed by b followed by c and we designate the a",
    "start": "65920",
    "end": "73280"
  },
  {
    "text": "part in red the b part in green and the c part in blue the proxy interprets this stream as the",
    "start": "73280",
    "end": "79759"
  },
  {
    "text": "first request being a followed by b and the second request is c and it forwards those two requests to",
    "start": "79759",
    "end": "87600"
  },
  {
    "text": "the web server and the web server however interprets those two requests as the stream i'm sorry as a request first",
    "start": "87600",
    "end": "95439"
  },
  {
    "text": "quest a followed by a second request b and c and thus it responds with uh the",
    "start": "95439",
    "end": "102320"
  },
  {
    "text": "responses for a and for bc and the proxy then caches",
    "start": "102320",
    "end": "107520"
  },
  {
    "text": "uh for a b the response for that the web server provided for a",
    "start": "107520",
    "end": "112799"
  },
  {
    "text": "and more importantly the proxy caches for c the response that the web server",
    "start": "112799",
    "end": "119200"
  },
  {
    "text": "generated for the data for the messages bc and that latter part is exactly where",
    "start": "119200",
    "end": "126079"
  },
  {
    "text": "http request smuggling takes effect and ends up in web cache poisoning in",
    "start": "126079",
    "end": "132239"
  },
  {
    "text": "this example this the http request smuggling attack is also called the",
    "start": "132239",
    "end": "138480"
  },
  {
    "text": "http dsync attack per james cattle's recent research",
    "start": "138480",
    "end": "146000"
  },
  {
    "start": "146000",
    "end": "146000"
  },
  {
    "text": "just to illustrate this in more detail this is the street this is an example",
    "start": "146160",
    "end": "151360"
  },
  {
    "text": "string where a the red part is is the first uh chunk that uh the proxy",
    "start": "151360",
    "end": "159599"
  },
  {
    "text": "receives uh in green we see the second chunk and in blue we see the third chunk",
    "start": "159599",
    "end": "165280"
  },
  {
    "text": "and let's say that uh the proxy uh interprets the or or uses the last",
    "start": "165280",
    "end": "172080"
  },
  {
    "text": "content sent header in such case the proxy will interpret this stream as two http requests one with",
    "start": "172080",
    "end": "180319"
  },
  {
    "text": "44 bytes body consisting of the red part followed by the green part and the second one is the blue part",
    "start": "180319",
    "end": "186239"
  },
  {
    "text": "which is entirely new http request um",
    "start": "186239",
    "end": "191280"
  },
  {
    "text": "so from the proxy's perspective the proxy will see the first request for",
    "start": "191280",
    "end": "197599"
  },
  {
    "text": "hello php and the second request for target html whereas say we have a web server",
    "start": "197599",
    "end": "205360"
  },
  {
    "text": "with that interprets the uh or that uses the first content length",
    "start": "205360",
    "end": "210480"
  },
  {
    "text": "header in such case we'll see the first request being the red part uh which is a a request with",
    "start": "210480",
    "end": "217360"
  },
  {
    "text": "zero body lens followed by another request green and blue parts so from the web",
    "start": "217360",
    "end": "223440"
  },
  {
    "text": "servers perspective the first request will be to hello php with zero bytes in the body and the second request will be for the",
    "start": "223440",
    "end": "230640"
  },
  {
    "text": "poison html um resource with some extra headers in blue",
    "start": "230640",
    "end": "236560"
  },
  {
    "text": "and as you can see the proxy will therefore cache for the target html url the data that",
    "start": "236560",
    "end": "244080"
  },
  {
    "text": "the web server provided for the poison html url and thereby we achieve a",
    "start": "244080",
    "end": "249840"
  },
  {
    "text": "web cache poisoning uh a short history of http request",
    "start": "249840",
    "end": "255599"
  },
  {
    "start": "252000",
    "end": "252000"
  },
  {
    "text": "smuggling as we can see in 2005 that's a decade and a half ago uh the seminal paper http request",
    "start": "255599",
    "end": "261759"
  },
  {
    "text": "muggling was published it was followed by several air research uh",
    "start": "261759",
    "end": "268240"
  },
  {
    "text": "small papers uh and then for almost a decade there was no",
    "start": "268240",
    "end": "273440"
  },
  {
    "text": "substantial uh research in http request mark in the https request muggling area there were of",
    "start": "273440",
    "end": "279759"
  },
  {
    "text": "course vulnerabilities published but no no significant research as far as",
    "start": "279759",
    "end": "284960"
  },
  {
    "text": "i know in 2015 2016 regis leroy published his hiding rookies",
    "start": "284960",
    "end": "292800"
  },
  {
    "text": "in http reviving the interest in this area and in 2019 james kettle uh published his",
    "start": "292800",
    "end": "299840"
  },
  {
    "text": "series of papers around http dsync attacks in blackett usa and in black at",
    "start": "299840",
    "end": "307120"
  },
  {
    "text": "europe so given all this my question is is http request smuggling",
    "start": "307120",
    "end": "312800"
  },
  {
    "start": "309000",
    "end": "309000"
  },
  {
    "text": "still a thing this is 2020 and we we are after all aware of the attack for",
    "start": "312800",
    "end": "318639"
  },
  {
    "text": "uh over a decade and a half uh it was back to the limelight in recent years thanks to james kettle and regis leroy",
    "start": "318639",
    "end": "326560"
  },
  {
    "text": "and our so our mainstream weapon proxy server is still vulnerable",
    "start": "326560",
    "end": "332000"
  },
  {
    "text": "uh this the scope of my research is the usual suspects and you'd expect them to be all immune",
    "start": "332000",
    "end": "337600"
  },
  {
    "text": "by now but since i'm here in blackhead the answer is no",
    "start": "337600",
    "end": "343919"
  },
  {
    "start": "342000",
    "end": "342000"
  },
  {
    "text": "let's see some interesting variants first is a header followed by space or card return",
    "start": "343919",
    "end": "349520"
  },
  {
    "text": "followed by some junk for example content length header followed by the content length followed by space",
    "start": "349520",
    "end": "355600"
  },
  {
    "text": "followed by abcd with a value of 20 and as it happens squids",
    "start": "355600",
    "end": "360800"
  },
  {
    "text": "squid ignores this header completely but it forwards it as is whereas abyss x1 web server converts it",
    "start": "360800",
    "end": "367600"
  },
  {
    "text": "uh into just the header part without the space or or the junk so cache web cache",
    "start": "367600",
    "end": "373919"
  },
  {
    "text": "poisoning attack with squid in front of uh of abyss may cons maybe uh um constructed as",
    "start": "373919",
    "end": "381520"
  },
  {
    "text": "following we have this the legitimate content length header with 41 bytes and uh followed by uh this uh",
    "start": "381520",
    "end": "389280"
  },
  {
    "text": "um not so legit content length header with space and junk with the value of three",
    "start": "389280",
    "end": "394880"
  },
  {
    "text": "uh squid uses the valid content length header and ignores the invalid header so",
    "start": "394880",
    "end": "400720"
  },
  {
    "text": "from squid's perspective we're talking about a body length for 41 bytes",
    "start": "400720",
    "end": "405840"
  },
  {
    "text": "whereas abyss uses the second a content length header which is which",
    "start": "405840",
    "end": "412240"
  },
  {
    "text": "has the value of three from abuses point of view so abyss will see the second request for poison html",
    "start": "412240",
    "end": "418639"
  },
  {
    "text": "and serve it whereas um squid will see the second request as get",
    "start": "418639",
    "end": "424800"
  },
  {
    "text": "welcome html so it will cache uh the content of the poison url",
    "start": "424800",
    "end": "430800"
  },
  {
    "text": "served by abyss to the url",
    "start": "430800",
    "end": "436319"
  },
  {
    "text": "html and now what if we don't like this to feed the abyss with two content",
    "start": "436319",
    "end": "443520"
  },
  {
    "start": "438000",
    "end": "438000"
  },
  {
    "text": "songs headers uh what if we suspect that this will fix this soon so we discovered an interesting",
    "start": "443520",
    "end": "451840"
  },
  {
    "text": "abyss behavior something that is also exhibited by other web servers which is",
    "start": "451840",
    "end": "457840"
  },
  {
    "text": "if the request is partial it may still be fulfilled by the web server and by partial i mean",
    "start": "457840",
    "end": "464000"
  },
  {
    "text": "that the the full body bytes uh was were not yet uh",
    "start": "464000",
    "end": "469759"
  },
  {
    "text": "received so um abyss in such case will wait 30 seconds and then",
    "start": "469759",
    "end": "475120"
  },
  {
    "text": "it will invoke the back-end script and provide the proxy or the client with the data that",
    "start": "475120",
    "end": "480400"
  },
  {
    "text": "this script generated and after additional bytes are received",
    "start": "480400",
    "end": "485840"
  },
  {
    "text": "on the in the tcp connection they will be silently discarded until the full body is red and then and",
    "start": "485840",
    "end": "493360"
  },
  {
    "text": "then abyss will start parsing the next request so how would what would an attack uh",
    "start": "493360",
    "end": "498720"
  },
  {
    "text": "look like uh in this case uh we have just the connection the the invalid",
    "start": "498720",
    "end": "504000"
  },
  {
    "text": "uh content length header uh in which case uh squid will interpret this as a zero length uh body request",
    "start": "504000",
    "end": "511280"
  },
  {
    "text": "and will only send the headers to to abyss abyss will weight 30 abyss expects 39",
    "start": "511280",
    "end": "517680"
  },
  {
    "text": "bytes in the body it waits for 30 seconds then invoke hello invokes hello php hello php generates",
    "start": "517680",
    "end": "523839"
  },
  {
    "text": "some answer this is forwarded to squid and then squid sends the next request",
    "start": "523839",
    "end": "529120"
  },
  {
    "text": "that for its from its point of view this is a get welcome and so forth",
    "start": "529120",
    "end": "534959"
  },
  {
    "text": "and then abyss will silently discard the 39 bytes that belong to the first request form's perspective",
    "start": "534959",
    "end": "540640"
  },
  {
    "text": "and start serving the second request which is get poison html so again web cache poisoning",
    "start": "540640",
    "end": "549839"
  },
  {
    "start": "548000",
    "end": "548000"
  },
  {
    "text": "some variants interesting variants i discovered relate to how mod security plus crs",
    "start": "550320",
    "end": "557200"
  },
  {
    "text": "behave specifically this community rule set uh mod security plus",
    "start": "557200",
    "end": "563839"
  },
  {
    "text": "plus crs is actually a free and open source web application firewall it provides us some rudimentary direct",
    "start": "563839",
    "end": "570880"
  },
  {
    "text": "protection against http request smuggling uh it has the perennial levels uh it",
    "start": "570880",
    "end": "576240"
  },
  {
    "text": "runs by default in paranormal level one and it can it has some more strict rules",
    "start": "576240",
    "end": "582800"
  },
  {
    "text": "in parallel level three or four but these generate a lot of false positives so they practically cannot be used in in",
    "start": "582800",
    "end": "589680"
  },
  {
    "text": "production environments and our bypass works for paranormal levels one and two",
    "start": "589680",
    "end": "596720"
  },
  {
    "text": "so let's let's look at it let's review uh what",
    "start": "597040",
    "end": "604160"
  },
  {
    "text": "what the challenges were and how we uh we overcame them um so the problem with uh",
    "start": "604160",
    "end": "610959"
  },
  {
    "text": "the problem with mod security plus crs is that our http request smangling payloads",
    "start": "610959",
    "end": "616480"
  },
  {
    "text": "got blocked by the http response splitting attack rules so for example uh we have two",
    "start": "616480",
    "end": "624399"
  },
  {
    "text": "rules uh a 921 130 that looks for a pattern of http slash",
    "start": "624399",
    "end": "633839"
  },
  {
    "text": "091011 and we have another one that looks for character 10 and line feed in argument",
    "start": "633959",
    "end": "639600"
  },
  {
    "text": "names both are geared towards blocking http response",
    "start": "639600",
    "end": "644839"
  },
  {
    "text": "splitting unfortunately for us they also work against our http request",
    "start": "644839",
    "end": "650640"
  },
  {
    "text": "smuggling payloads uh walking around the last one the 150 is trivial",
    "start": "650640",
    "end": "656240"
  },
  {
    "text": "we just moved the attack from the what what what security considers as the",
    "start": "656240",
    "end": "661680"
  },
  {
    "text": "argument name to the argument value by prepending the n argument if a bogus or fake argument name x y equals",
    "start": "661680",
    "end": "669839"
  },
  {
    "text": "something and then we move away from being an argument name as for the 130",
    "start": "669839",
    "end": "677600"
  },
  {
    "start": "675000",
    "end": "675000"
  },
  {
    "text": "the trick is to use http 1 2 instead of http 1011",
    "start": "677600",
    "end": "682640"
  },
  {
    "text": "and as it happens iis apache engines node.js and the bs respect http 1 2",
    "start": "682640",
    "end": "688160"
  },
  {
    "text": "and they treat it as http 1 1 and in their in their proxy head squid h a proxy kdn",
    "start": "688160",
    "end": "695360"
  },
  {
    "text": "traffic respect http 1 2 but converts them into http 1 1. there's still a small problem with rule",
    "start": "695360",
    "end": "702000"
  },
  {
    "text": "150 uh which is uh triggered because the the payload contains",
    "start": "702000",
    "end": "709040"
  },
  {
    "text": "something that looks like a unix direct command execution the space followed by slash but that can",
    "start": "709040",
    "end": "715360"
  },
  {
    "text": "be walked around too by using the full proxy url as you can see below",
    "start": "715360",
    "end": "722560"
  },
  {
    "start": "723000",
    "end": "723000"
  },
  {
    "text": "and then we discovered a much more funny bypass which is to use content sense",
    "start": "723440",
    "end": "730720"
  },
  {
    "text": "text plain uh this one in paranoia levels one or two simply makes uh the content rules community",
    "start": "730720",
    "end": "738480"
  },
  {
    "text": "rule set uh to disregard the body entirely and so we can get our http request smuggling",
    "start": "738480",
    "end": "745360"
  },
  {
    "text": "attack uh nicely through the through mod security plus series",
    "start": "745360",
    "end": "752639"
  },
  {
    "text": "and the fifth variant is actually um is documented",
    "start": "752639",
    "end": "758959"
  },
  {
    "start": "753000",
    "end": "753000"
  },
  {
    "text": "somewhere in burps http request smuggling module as a 0drap but i don't think i have seen any",
    "start": "758959",
    "end": "765440"
  },
  {
    "text": "successful use of that until today",
    "start": "765440",
    "end": "770800"
  },
  {
    "text": "so we discovered that squid ignores a header propended by a kurd return",
    "start": "770800",
    "end": "775920"
  },
  {
    "text": "it's it just forward it as is and abuse respects this header and here's an example of an http request",
    "start": "775920",
    "end": "783120"
  },
  {
    "text": "smuggling attack ending in web cache poisoning uh using the wait for it",
    "start": "783120",
    "end": "788639"
  },
  {
    "text": "trick again so we just feed this this invalid content length header squid",
    "start": "788639",
    "end": "795839"
  },
  {
    "text": "ignores it and abyss respects it",
    "start": "795839",
    "end": "801839"
  },
  {
    "start": "802000",
    "end": "802000"
  },
  {
    "text": "one last tip for overriding existing cache items so sometimes a page is cached and you want to poison it",
    "start": "802000",
    "end": "808560"
  },
  {
    "text": "you can use a cache control no cache for the request that that involves this page and the header",
    "start": "808560",
    "end": "815519"
  },
  {
    "text": "may be moved around so you need to be careful about it when you calculate the uh payload lengths and and offsets",
    "start": "815519",
    "end": "823920"
  },
  {
    "text": "uh let's see this uh those variants in action",
    "start": "824240",
    "end": "829839"
  },
  {
    "text": "we can see we can start with the abyss web server version as you can see it's",
    "start": "833199",
    "end": "838959"
  },
  {
    "text": "pretty recent followed by the squid version which you can see it's fully patched for",
    "start": "838959",
    "end": "845440"
  },
  {
    "text": "at the time of testing and then let's see now variant one we first",
    "start": "845440",
    "end": "851680"
  },
  {
    "text": "load uh the target page uh the original target target page which",
    "start": "851680",
    "end": "857040"
  },
  {
    "text": "makes it also which makes squid cache it",
    "start": "857040",
    "end": "863040"
  },
  {
    "text": "and then we run the smuggling script to see our options we use now the",
    "start": "865519",
    "end": "874560"
  },
  {
    "text": "first variant",
    "start": "874560",
    "end": "884880"
  },
  {
    "text": "and now we load the same target page in a different browser to avoid the",
    "start": "884880",
    "end": "890079"
  },
  {
    "text": "browser caching issues and we see indeed that it is poisoned",
    "start": "890079",
    "end": "899839"
  },
  {
    "text": "moving to var into the second variant again we load the url we see that the page is cached correctly",
    "start": "900000",
    "end": "908079"
  },
  {
    "text": "now we run the second variant",
    "start": "908079",
    "end": "913839"
  },
  {
    "text": "the time fast forwards for 30 seconds",
    "start": "921120",
    "end": "926560"
  },
  {
    "text": "and we check that the page again from a different browser",
    "start": "926560",
    "end": "931600"
  },
  {
    "text": "instance and we see that it's poisoned",
    "start": "931600",
    "end": "935519"
  },
  {
    "text": "finally we run the fifth variant again we load your the target url now it's cached in the in",
    "start": "938000",
    "end": "944720"
  },
  {
    "text": "squid we're on the fifth variant",
    "start": "944720",
    "end": "950399"
  },
  {
    "text": "time is fast forwarding 30 seconds",
    "start": "952399",
    "end": "958160"
  },
  {
    "text": "and we load this url again so this for the proxy and we see that it",
    "start": "958800",
    "end": "965040"
  },
  {
    "text": "is cached it is poisoned so uh i reported all those",
    "start": "965040",
    "end": "972959"
  },
  {
    "text": "variants to squid and abyss and and osp community rule set it was fixed in abyss and in wasp",
    "start": "972959",
    "end": "980720"
  },
  {
    "text": "community rule set and hopefully by the time this presentation",
    "start": "980720",
    "end": "985920"
  },
  {
    "text": "is is screened uh uh squid will also fix those",
    "start": "985920",
    "end": "992959"
  },
  {
    "text": "issues in its product",
    "start": "992959",
    "end": "997839"
  },
  {
    "text": "and after seeing that the issue is still real i started considering what the possible",
    "start": "998000",
    "end": "1004160"
  },
  {
    "text": "solutions may be first i want to",
    "start": "1004160",
    "end": "1011360"
  },
  {
    "start": "1008000",
    "end": "1008000"
  },
  {
    "text": "discuss some flawed approaches for protection against hp request smuggling",
    "start": "1011360",
    "end": "1017360"
  },
  {
    "text": "for example some people claim that normalization of outbound http headers for proxy servers",
    "start": "1017360",
    "end": "1023360"
  },
  {
    "text": "is a solution and i think that obviously it's a solution for the http",
    "start": "1023360",
    "end": "1028720"
  },
  {
    "text": "devices behind the proxy but it's completely ineffective for all the tasks that take place between the proxy and",
    "start": "1028720",
    "end": "1034880"
  },
  {
    "text": "the devices in front of it so for example if you are a client and there is a proxy p1",
    "start": "1034880",
    "end": "1041038"
  },
  {
    "text": "and then your proxy p2 in this chain and finally there is a web server then and p1 uses say the first",
    "start": "1041039",
    "end": "1048799"
  },
  {
    "text": "contentment header and p2 uses the last content length header then the then you can mount an http",
    "start": "1048799",
    "end": "1054960"
  },
  {
    "text": "request smuggling between p1 and p2 now if you ask whether this is uh whether p2",
    "start": "1054960",
    "end": "1060880"
  },
  {
    "text": "is to be blamed or to to shoulder part of the blame think of the p2 to the web server",
    "start": "1060880",
    "end": "1068160"
  },
  {
    "text": "connection as an abstraction for web server ws prime so now the client is communicating",
    "start": "1068160",
    "end": "1075600"
  },
  {
    "text": "through a single proxy p1 to web server ws prime and ws primer c accepts multiple content length headers",
    "start": "1075600",
    "end": "1082320"
  },
  {
    "text": "and uses the last one now would you say in this case the ws prime is vulnerable to http request",
    "start": "1082320",
    "end": "1087600"
  },
  {
    "text": "smuggling because if you say yes then obviously p2 is vulnerable to http request smuggling",
    "start": "1087600",
    "end": "1093120"
  },
  {
    "text": "because ws the original ws can be fully 100 percent rfc compliant",
    "start": "1093120",
    "end": "1099760"
  },
  {
    "text": "and yet http request smart and web cache poisoning can take place so if you accept the premise that in",
    "start": "1099760",
    "end": "1106480"
  },
  {
    "text": "such case a web server is vulnerable to http request smuggling then obviously a proxy is two",
    "start": "1106480",
    "end": "1114799"
  },
  {
    "text": "same argument applies to having a tcp connection per each outbound request again something that",
    "start": "1115039",
    "end": "1122160"
  },
  {
    "text": "proxy servers can do it's good for http devices behind the proxy but it's not effective for",
    "start": "1122160",
    "end": "1128880"
  },
  {
    "text": "http devices in front of the proxy so uh moving back to uh finding a",
    "start": "1128880",
    "end": "1136559"
  },
  {
    "start": "1132000",
    "end": "1132000"
  },
  {
    "text": "solution so my first stop was obviously with mod security plus the crs",
    "start": "1136559",
    "end": "1142160"
  },
  {
    "text": "it has some obvious pros like being a true web application firewall being free and being open source but it",
    "start": "1142160",
    "end": "1148480"
  },
  {
    "text": "also has some some serious cons which is it only supports a small subset of web servers and it only",
    "start": "1148480",
    "end": "1156240"
  },
  {
    "text": "has a rudimentary defense uh against http request smuggling so from my perspective",
    "start": "1156240",
    "end": "1161760"
  },
  {
    "text": "it's not good enough so i started thinking about what is an",
    "start": "1161760",
    "end": "1168320"
  },
  {
    "start": "1164000",
    "end": "1164000"
  },
  {
    "text": "ideal solution would look like and my concept is something lightweight and simple and",
    "start": "1168320",
    "end": "1175360"
  },
  {
    "text": "easy not a fully fledged dwarf it should be it should focus on specific protocol attacks like http request",
    "start": "1175360",
    "end": "1181760"
  },
  {
    "text": "smuggling and maybe additional attacks it should be secure obviously and i want to develop a proof of concept",
    "start": "1181760",
    "end": "1188799"
  },
  {
    "text": "that doesn't need to be production quality it just need to demonstrate a concept that then",
    "start": "1188799",
    "end": "1194400"
  },
  {
    "text": "vendors can take and implement in their products or third-party",
    "start": "1194400",
    "end": "1199440"
  },
  {
    "text": "security providers can uh implement as a production and",
    "start": "1199440",
    "end": "1206080"
  },
  {
    "text": "production uh solution production grade solution",
    "start": "1206080",
    "end": "1211200"
  },
  {
    "start": "1211000",
    "end": "1211000"
  },
  {
    "text": "and more specifically the architecture would be or or the the solution would revolve around",
    "start": "1211440",
    "end": "1218720"
  },
  {
    "text": "having a very strict validation of small subset of the http standards so i'm talking about anything that can",
    "start": "1218720",
    "end": "1225120"
  },
  {
    "text": "affect the request length uh specifically the content length header and the transfer encoding header",
    "start": "1225120",
    "end": "1231520"
  },
  {
    "text": "and having unambiguous line ends and header block end and of course monitoring the request",
    "start": "1231520",
    "end": "1236799"
  },
  {
    "text": "line for uh for verb names it should be unambiguous because the verb name sometimes dictates that their",
    "start": "1236799",
    "end": "1243760"
  },
  {
    "text": "the request mustn't have a body or or typically doesn't have a body",
    "start": "1243760",
    "end": "1248880"
  },
  {
    "text": "and an ambiguous protocol designation is in order to avoid the htp-09 the http 09",
    "start": "1248880",
    "end": "1255120"
  },
  {
    "text": "syndrome and maybe other headers that i haven't thought about yet",
    "start": "1255120",
    "end": "1260480"
  },
  {
    "start": "1260000",
    "end": "1260000"
  },
  {
    "text": "i want my solution to be generic so it doesn't tie to specific technology or product or platform so",
    "start": "1260720",
    "end": "1268000"
  },
  {
    "text": "specifically i don't want to rely on windows lsp or wfp and it would be nice to have that",
    "start": "1268000",
    "end": "1275200"
  },
  {
    "text": "that it can be extended beyond the http like having a power decrypted the https",
    "start": "1275200",
    "end": "1282000"
  },
  {
    "text": "traffic and maybe other protocols and of course it should be secure so i think that",
    "start": "1282000",
    "end": "1287360"
  },
  {
    "text": "the only way to do that is with in-path monitoring and not something based on sniffing and",
    "start": "1287360",
    "end": "1294240"
  },
  {
    "text": "architecturally the solution i arrived to was is the good all the function",
    "start": "1294240",
    "end": "1301360"
  },
  {
    "text": "hooking for in this case for for the socket layer uh functions so a few words about",
    "start": "1301360",
    "end": "1309760"
  },
  {
    "start": "1308000",
    "end": "1308000"
  },
  {
    "text": "function hooking uh while completely non-standard it's de facto",
    "start": "1309760",
    "end": "1314960"
  },
  {
    "text": "uh used very commonly in major operating systems like windows and linux",
    "start": "1314960",
    "end": "1320400"
  },
  {
    "text": "and there are even cross-platform function hooking libraries like fan hook that i use in my in my project",
    "start": "1320400",
    "end": "1327600"
  },
  {
    "text": "stability and robustness may be an issue but again this is a proof of concept library it's not a full product",
    "start": "1327600",
    "end": "1335600"
  },
  {
    "text": "and uh and hooking is just one piece of of the game and one needs still to",
    "start": "1335600",
    "end": "1341919"
  },
  {
    "text": "inject the code or at least an initial code in windows this can be done by using a standard dll",
    "start": "1341919",
    "end": "1348799"
  },
  {
    "text": "injection in linux you can use ld preload again problem with stability and again i don't",
    "start": "1348799",
    "end": "1354799"
  },
  {
    "text": "care about this at this for this project and the way i implemented my project is",
    "start": "1354799",
    "end": "1361200"
  },
  {
    "start": "1358000",
    "end": "1358000"
  },
  {
    "text": "using two layers one is the socket obstruction layer and the other one is the actual firewall",
    "start": "1361200",
    "end": "1368159"
  },
  {
    "text": "and the socket abstraction layer allows me to abstract a native socket into standard open read close view",
    "start": "1368159",
    "end": "1375919"
  },
  {
    "text": "so i need to manage the sockets from cradle to to death and i need of course to maintain a map",
    "start": "1375919",
    "end": "1382559"
  },
  {
    "text": "from this socket file descriptor to to a user object that handles",
    "start": "1382559",
    "end": "1387919"
  },
  {
    "text": "each socket each socket gets its own instance of a user object and i don't want to interfere with the",
    "start": "1387919",
    "end": "1394400"
  },
  {
    "text": "system operation so there's no buffering at all that that i am allowed to introduce",
    "start": "1394400",
    "end": "1401360"
  },
  {
    "text": "and i signal to the user object important actions by using the contract the constructor to",
    "start": "1401360",
    "end": "1407919"
  },
  {
    "text": "signal a socket open an on-rate invocation which signals the socket read and the",
    "start": "1407919",
    "end": "1414559"
  },
  {
    "text": "destructor signals the socket closed i provide the user object with",
    "start": "1414559",
    "end": "1419600"
  },
  {
    "text": "the socket file descriptor so the user object can interact with the socket",
    "start": "1419600",
    "end": "1426000"
  },
  {
    "text": "and the user object signals back to me in the return value whether it i should forcibly close the socket",
    "start": "1426000",
    "end": "1433200"
  },
  {
    "start": "1433000",
    "end": "1433000"
  },
  {
    "text": "so what do i need to hook you can see that in windows i just need to hook",
    "start": "1433200",
    "end": "1439440"
  },
  {
    "text": "seven functions to get to cover the full functionality of the usual suspects",
    "start": "1439440",
    "end": "1445919"
  },
  {
    "text": "and same goes for linux tested in 64 bits again a nice area of of",
    "start": "1445919",
    "end": "1453520"
  },
  {
    "start": "1446000",
    "end": "1446000"
  },
  {
    "text": "web servers is car is covered by hooking uh seven functions only",
    "start": "1453520",
    "end": "1460480"
  },
  {
    "start": "1460000",
    "end": "1460000"
  },
  {
    "text": "while implementing this the socket obstruction layer i learned a lot about",
    "start": "1460480",
    "end": "1465520"
  },
  {
    "text": "the internals of of web servers and and in sockets",
    "start": "1465520",
    "end": "1471279"
  },
  {
    "text": "of course especially in linux worker processes and forking must be supported this is not fully functional",
    "start": "1471279",
    "end": "1478720"
  },
  {
    "text": "yet in my library i just run a single process instance of the web server for",
    "start": "1478720",
    "end": "1484880"
  },
  {
    "text": "testing uh locking of the socket management table is also desired so far i haven't implemented it",
    "start": "1484880",
    "end": "1492159"
  },
  {
    "text": "preserving the correct error state is mandatory you can easily crash a system",
    "start": "1492159",
    "end": "1498320"
  },
  {
    "text": "or or make the system malfunction if you do not preserve erno last error and wsa last",
    "start": "1498320",
    "end": "1504720"
  },
  {
    "text": "error std out and std error are not always available so write your own log file",
    "start": "1504720",
    "end": "1511120"
  },
  {
    "text": "for some bizarre reason squid on linux doesn't like f claws so i had to resort to using the direct i o",
    "start": "1511120",
    "end": "1518799"
  },
  {
    "text": "functions statistically linked executables with stripped symbols",
    "start": "1518799",
    "end": "1524320"
  },
  {
    "text": "are a serious problem for my approach so compiled go products like traffic and",
    "start": "1524320",
    "end": "1529919"
  },
  {
    "text": "credit are not supported at this time interestingly enough linux receive implementation",
    "start": "1529919",
    "end": "1535600"
  },
  {
    "text": "actually invokes the receive from cisco this is a bit surprising accept or accept for are sometimes",
    "start": "1535600",
    "end": "1542799"
  },
  {
    "text": "invoked with address being now this is valid but also surprising and node.js uses a",
    "start": "1542799",
    "end": "1549200"
  },
  {
    "text": "library called uv lib which invokes the syscalls directly",
    "start": "1549200",
    "end": "1554320"
  },
  {
    "text": "so you can't i can't hook uh there's no point in hooking the uh usual socket functions i need to hook",
    "start": "1554320",
    "end": "1561279"
  },
  {
    "text": "specifically the uv accept four function in this case in order to get the full functionality on top of the",
    "start": "1561279",
    "end": "1569039"
  },
  {
    "start": "1568000",
    "end": "1568000"
  },
  {
    "text": "socket obstruction layer i implemented another class called the request smuggling firewall",
    "start": "1569039",
    "end": "1575679"
  },
  {
    "text": "that that uses the socket obstruction layer to implement the request smartening firewall",
    "start": "1575679",
    "end": "1582159"
  },
  {
    "text": "surprisingly and in it enforces the strict rfc 2616 on the relevant parts of the http",
    "start": "1582159",
    "end": "1588000"
  },
  {
    "text": "request like request line format header name format uh content sense transfer encoding",
    "start": "1588000",
    "end": "1593679"
  },
  {
    "text": "header end of line chunk body format it it operates with the default deny policy",
    "start": "1593679",
    "end": "1599279"
  },
  {
    "text": "it only buffers is a single partial line uh internally it it always sends",
    "start": "1599279",
    "end": "1605520"
  },
  {
    "text": "the data immediately to the application to the web server but it buffers a single partially a partial single line",
    "start": "1605520",
    "end": "1612880"
  },
  {
    "text": "and so that there's no there's never a full line with violation transmitted",
    "start": "1612880",
    "end": "1619760"
  },
  {
    "text": "to the web server so it stops immediately upon the first violation",
    "start": "1619760",
    "end": "1625360"
  },
  {
    "text": "and the violation can cause it to send a 400 response as we'll see in a moment and to terminate the connection and",
    "start": "1625360",
    "end": "1633520"
  },
  {
    "text": "let's see a demo okay demo",
    "start": "1633520",
    "end": "1641840"
  },
  {
    "text": "so we run squid with the rsfw library and then we try",
    "start": "1644880",
    "end": "1652080"
  },
  {
    "text": "the first we first load the target page to squids cache as we usually do",
    "start": "1652080",
    "end": "1660799"
  },
  {
    "text": "now we run the first variant",
    "start": "1660799",
    "end": "1665679"
  },
  {
    "text": "we can see that it fails with a 400 response and if we load the target page again",
    "start": "1667279",
    "end": "1673360"
  },
  {
    "text": "this time we can see that it's actually not poisoned",
    "start": "1673360",
    "end": "1680640"
  },
  {
    "text": "now we run the second variant if you remember it should run for 30 seconds",
    "start": "1680640",
    "end": "1685840"
  },
  {
    "text": "but actually it just exited immediately and same with the fifth variant",
    "start": "1685840",
    "end": "1693278"
  },
  {
    "text": "so during my http request smuggling research i bumped into some interesting",
    "start": "1695440",
    "end": "1701840"
  },
  {
    "start": "1700000",
    "end": "1700000"
  },
  {
    "text": "promising or suspicious anomalies in some http devices for which i can describe a",
    "start": "1701840",
    "end": "1708960"
  },
  {
    "text": "matching behavior so if i found something interesting in a web server i could describe a matching",
    "start": "1708960",
    "end": "1714159"
  },
  {
    "text": "behavior in a proxy server that leads to http request smuggling however i could not",
    "start": "1714159",
    "end": "1719279"
  },
  {
    "text": "find this matching behavior in my zoo of products so far",
    "start": "1719279",
    "end": "1725120"
  },
  {
    "text": "just to illustrate let's say we go back to 2005 and i noticed a web server which takes",
    "start": "1725120",
    "end": "1730799"
  },
  {
    "text": "the first header in a double content length request a matching behavior would be",
    "start": "1730799",
    "end": "1736720"
  },
  {
    "text": "then a proxy server that takes the last content in such a request but keeps both headers but let's say",
    "start": "1736720",
    "end": "1744320"
  },
  {
    "text": "that in my lab back then i could only find proxy servers that either take the first header or reject the request then in 2005 this",
    "start": "1744320",
    "end": "1752880"
  },
  {
    "text": "would have been a very interesting and relevant example naturally in 2020 this isn't uh there",
    "start": "1752880",
    "end": "1760320"
  },
  {
    "text": "are probably no web server proxy server that behaves so naively but you get the idea",
    "start": "1760320",
    "end": "1768559"
  },
  {
    "text": "so courage return in a header name is interpreted as a hyphen so uh",
    "start": "1768559",
    "end": "1775520"
  },
  {
    "start": "1769000",
    "end": "1769000"
  },
  {
    "text": "just like i mentioned one web server treats this contents kerger 10 length as the header",
    "start": "1775520",
    "end": "1782240"
  },
  {
    "text": "content length i suspect this is due to a quick and dirty upper casing using all with",
    "start": "1782240",
    "end": "1787600"
  },
  {
    "text": "ox 20. so if you or ox20 with a card return you get a hyphen",
    "start": "1787600",
    "end": "1795200"
  },
  {
    "text": "the matching proxy behavior is to simply ignore this header and forward it as is and the attack in this case would be",
    "start": "1795200",
    "end": "1801520"
  },
  {
    "text": "the having a web server expect a body and using a get request the web server will immediately forward",
    "start": "1801520",
    "end": "1808080"
  },
  {
    "text": "the request to the application without a body and this and on the other hand the",
    "start": "1808080",
    "end": "1813440"
  },
  {
    "text": "matching proxy uh will uh so the matching proxy will treat it",
    "start": "1813440",
    "end": "1818559"
  },
  {
    "text": "as a zero length body and the web server expects a body of a certain length and",
    "start": "1818559",
    "end": "1824399"
  },
  {
    "text": "therefore a web cache poisoning ensues unfortunately for me it is an attacker all proxy",
    "start": "1824399",
    "end": "1831279"
  },
  {
    "text": "servers i have either rejected with a 400 response or modify their",
    "start": "1831279",
    "end": "1836320"
  },
  {
    "text": "their request this is this may be uh fixed",
    "start": "1836320",
    "end": "1843200"
  },
  {
    "text": "by the time this presentation is aired so i urge you to to get updates",
    "start": "1843200",
    "end": "1850000"
  },
  {
    "text": "on my uh for the white paper uh so i'll be able to hopefully i'll be",
    "start": "1850000",
    "end": "1856960"
  },
  {
    "text": "able to update and to name the a relevant web server",
    "start": "1856960",
    "end": "1862159"
  },
  {
    "text": "in the white paper signed content length i'm talking about adding a plus sign in",
    "start": "1862159",
    "end": "1868240"
  },
  {
    "start": "1864000",
    "end": "1864000"
  },
  {
    "text": "front of the value obviously it's non-rfc behavior because the content length only allowed digits some",
    "start": "1868240",
    "end": "1876320"
  },
  {
    "text": "proxy implementations use the api like a2i that does accept the sign",
    "start": "1876320",
    "end": "1881919"
  },
  {
    "text": "uh the matching web server behavior is to simply ignore this header and the attack is obvious the web server has",
    "start": "1881919",
    "end": "1887279"
  },
  {
    "text": "defacto content length zero whereas the proxy servers is one two three four",
    "start": "1887279",
    "end": "1892960"
  },
  {
    "text": "this doesn't work of course if the proxy normalizes the content limit header before forwarding it to the web server all the",
    "start": "1892960",
    "end": "1900320"
  },
  {
    "text": "web servers i have either reject or honor this request as is so no good here",
    "start": "1900320",
    "end": "1906799"
  },
  {
    "text": "uh and the vendor the i reported it to several proxy vendors it was fixed by",
    "start": "1906799",
    "end": "1911840"
  },
  {
    "text": "squid abyss and go content length value with space so i'm",
    "start": "1911840",
    "end": "1919440"
  },
  {
    "start": "1916000",
    "end": "1916000"
  },
  {
    "text": "talking about content length one two space three four again it's non rfc engines ignores this",
    "start": "1919440",
    "end": "1926159"
  },
  {
    "text": "header what i look what i want to find is a proxy that uses one of the values one two three four one",
    "start": "1926159",
    "end": "1933120"
  },
  {
    "text": "two or three four and four the request a header is is the attack is obvious",
    "start": "1933120",
    "end": "1938640"
  },
  {
    "text": "all the proxy servers i have either reject or remove this header i reported this to engines and they say",
    "start": "1938640",
    "end": "1944880"
  },
  {
    "text": "they won't fix it because it doesn't look like vulnerability in engines the requests in question",
    "start": "1944880",
    "end": "1950399"
  },
  {
    "text": "cannot be passed through a compliant http proxy with the header interpreted as a content length header so they say",
    "start": "1950399",
    "end": "1957840"
  },
  {
    "start": "1957000",
    "end": "1957000"
  },
  {
    "text": "finally there's one web server that simply",
    "start": "1957840",
    "end": "1962880"
  },
  {
    "text": "ignores transfer encoding even in http one one obviously this is not an rfc compliant behavior",
    "start": "1962880",
    "end": "1970480"
  },
  {
    "text": "what i look for is a proxy server that prefers transfer encoding over content length but does not modify",
    "start": "1970480",
    "end": "1976399"
  },
  {
    "text": "the request and the attack would be to send a request with both transfer encoding and content length where the",
    "start": "1976399",
    "end": "1982640"
  },
  {
    "text": "proxy would use the transfer encoding header and the web server would use the content links",
    "start": "1982640",
    "end": "1987919"
  },
  {
    "text": "header all the proxies i have normalize the request either per the content link",
    "start": "1987919",
    "end": "1993200"
  },
  {
    "text": "letter or per the transfer encoding header so this becomes a non-relevant so i",
    "start": "1993200",
    "end": "1998240"
  },
  {
    "text": "cannot exploit it in my lab",
    "start": "1998240",
    "end": "2002080"
  },
  {
    "text": "to conclude uh we see that http request smuggling is",
    "start": "2003279",
    "end": "2008559"
  },
  {
    "text": "still a thing in 2020 in common off-the-shelf software uh existing open source",
    "start": "2008559",
    "end": "2014640"
  },
  {
    "text": "solutions are lacking there's there is a more robust approach for defending against atp request smuggling and it is",
    "start": "2014640",
    "end": "2020880"
  },
  {
    "text": "feasible i'm talking about implementing a lightweight solutions specifically tailored for http request",
    "start": "2020880",
    "end": "2027840"
  },
  {
    "text": "modeling in path it can be applied by vendros or third-party",
    "start": "2027840",
    "end": "2033279"
  },
  {
    "text": "security software and there are still some interesting challenges in this area thank you very much",
    "start": "2033279",
    "end": "2046159"
  },
  {
    "text": "right um so thank you very much for attending my session uh",
    "start": "2046159",
    "end": "2053760"
  },
  {
    "text": "right now i see there is one question but uh what a question this is uh the",
    "start": "2053760",
    "end": "2059919"
  },
  {
    "text": "question is uh let me read it for everyone are there good fuzzing frameworks for",
    "start": "2059919",
    "end": "2067040"
  },
  {
    "text": "testing for http requests smuggling besides manual testing eg through burp or zap",
    "start": "2067040",
    "end": "2073679"
  },
  {
    "text": "so to the best of my knowledge some web application scanners",
    "start": "2073679",
    "end": "2080638"
  },
  {
    "text": "have uh http requests smuggling testing attacks incorporated",
    "start": "2080639",
    "end": "2087679"
  },
  {
    "text": "in them uh having said that i think that there are some obvious",
    "start": "2087679",
    "end": "2095520"
  },
  {
    "text": "hurdles in automatically testing for http request smuggling as some of",
    "start": "2095760",
    "end": "2102160"
  },
  {
    "text": "the uh people on the on the chat mentioned so in essence one needs to be",
    "start": "2102160",
    "end": "2110720"
  },
  {
    "text": "very careful about um the impact of the attack which can be very tricky in the",
    "start": "2110720",
    "end": "2115760"
  },
  {
    "text": "case of http request smuggling including a long lasting effect on the uh on the cash",
    "start": "2115760",
    "end": "2122960"
  },
  {
    "text": "um and uh at large i think this attack is somewhat",
    "start": "2122960",
    "end": "2129520"
  },
  {
    "text": "more difficult to control or to predict the uh the outcome of the exact",
    "start": "2129520",
    "end": "2137760"
  },
  {
    "text": "attack or the variant compared to other application vulnerabilities or",
    "start": "2137760",
    "end": "2143280"
  },
  {
    "text": "application tax um i think james cattle in his uh",
    "start": "2143280",
    "end": "2149119"
  },
  {
    "text": "last year's blackhead presentation touched uh some of the issues about uh",
    "start": "2149119",
    "end": "2155520"
  },
  {
    "text": "securely and safely testing for http requests smuggling but obviously it's uh it's non-trivial so",
    "start": "2155520",
    "end": "2163680"
  },
  {
    "text": "the network the net answer or the the bottom line uh with respect to this question from at",
    "start": "2163680",
    "end": "2170000"
  },
  {
    "text": "least from what i know is that some automatic application scanners do test for it",
    "start": "2170000",
    "end": "2176240"
  },
  {
    "text": "but there are in some inherent problems in automatic and large-scale testing",
    "start": "2176240",
    "end": "2183359"
  },
  {
    "text": "uh that perhaps prevent a large scale and and and and",
    "start": "2183359",
    "end": "2190079"
  },
  {
    "text": "and intensive fuzzing around this uh around http request",
    "start": "2190079",
    "end": "2196960"
  },
  {
    "text": "smuggling okay and i see that there is now another question uh",
    "start": "2196960",
    "end": "2204079"
  },
  {
    "text": "right so okay i got an excellent question here when you showed the",
    "start": "2209599",
    "end": "2214960"
  },
  {
    "text": "poisoned page and on the demo uh it looked like an attacker injected it there",
    "start": "2214960",
    "end": "2220000"
  },
  {
    "text": "i missed the beginning and you but the the question says you can only",
    "start": "2220000",
    "end": "2225839"
  },
  {
    "text": "use the http request modeling to access pages already on the web server right not for an attacker to introduce new",
    "start": "2225839",
    "end": "2232400"
  },
  {
    "text": "content absolutely or you're 100 correct um but think about it this way",
    "start": "2232400",
    "end": "2240160"
  },
  {
    "text": "an attacker can still save on on some sides there are attacker-controlled content like uh",
    "start": "2240160",
    "end": "2248000"
  },
  {
    "text": "comments or blogs or or or personal areas in the website which",
    "start": "2248000",
    "end": "2254320"
  },
  {
    "text": "the attacker has a lot of control over uh",
    "start": "2254320",
    "end": "2260079"
  },
  {
    "text": "and also think about this about this say let's say that there's a hot",
    "start": "2260079",
    "end": "2266800"
  },
  {
    "text": "news about some uh i don't know kovit 19",
    "start": "2266800",
    "end": "2271920"
  },
  {
    "text": "vaccine being tested by by company xyz uh and then you you uh",
    "start": "2271920",
    "end": "2280160"
  },
  {
    "text": "replace quote unquote or make this a to make the url be cached with the content about the",
    "start": "2280160",
    "end": "2286800"
  },
  {
    "text": "same company having an earlier vaccine variant shown",
    "start": "2286800",
    "end": "2294560"
  },
  {
    "text": "ineffective and that can that can have impact on on that company and on the on",
    "start": "2294560",
    "end": "2301119"
  },
  {
    "text": "the share price of that company and so what i'm saying is even if",
    "start": "2301119",
    "end": "2307359"
  },
  {
    "text": "the attacker cannot uh have his or her own page on the website",
    "start": "2307359",
    "end": "2313280"
  },
  {
    "text": "so that the url uh the cached url uh is uh is cached together of the content",
    "start": "2313280",
    "end": "2321119"
  },
  {
    "text": "from the attacker's controlled page the attacker can still uh incur a lot of damage by having one url",
    "start": "2321119",
    "end": "2329839"
  },
  {
    "text": "caching the pay the content from another page which is not intended for that url",
    "start": "2329839",
    "end": "2335359"
  },
  {
    "text": "so um so yes but technically you're absolutely right you can only do this attack with",
    "start": "2335359",
    "end": "2342480"
  },
  {
    "text": "a page with a poison page that is already on the website absolutely right",
    "start": "2342480",
    "end": "2355839"
  },
  {
    "text": "actually i don't see any further questions right now",
    "start": "2358320",
    "end": "2364160"
  },
  {
    "text": "okay",
    "start": "2366839",
    "end": "2369839"
  },
  {
    "text": "all right there's another question here but i think that we can just uh",
    "start": "2377359",
    "end": "2383920"
  },
  {
    "text": "now so there's a question here sorry there's a question here about the variance uh i demonstrated the attack against uh",
    "start": "2384160",
    "end": "2393440"
  },
  {
    "text": "the testing against proxies the wasps built in-house no the attacks were against a combination of",
    "start": "2393440",
    "end": "2399599"
  },
  {
    "text": "common off-the-shelf two common off-the-shelf pieces of software one is the squid proxy and another one",
    "start": "2399599",
    "end": "2406160"
  },
  {
    "text": "is at the abyss x1 server could http poisoning work",
    "start": "2406160",
    "end": "2413440"
  },
  {
    "text": "in tandem with a url redirect attack to another site i guess the answer to that is",
    "start": "2413440",
    "end": "2421520"
  },
  {
    "text": "no because the the attacker we are talking about here about http",
    "start": "2421520",
    "end": "2428480"
  },
  {
    "text": "requests that are generated by the attacker if there's a redirect in the website i",
    "start": "2428480",
    "end": "2435119"
  },
  {
    "text": "don't think it affects the attack it only redirect works at the browser level and we are talking here",
    "start": "2435119",
    "end": "2441040"
  },
  {
    "text": "about http level so it's a bit a bit more raw if you if you get my meaning",
    "start": "2441040",
    "end": "2447200"
  },
  {
    "text": "uh how do you see the light weight implementation of your suggested fixes with hooks on large-scale proxy",
    "start": "2447200",
    "end": "2455200"
  },
  {
    "text": "networks like cds excellent questions obviously cdns are not going to incorporate my code this was more like",
    "start": "2455200",
    "end": "2461760"
  },
  {
    "text": "a wake-up call for vendors and security vendors",
    "start": "2461760",
    "end": "2466800"
  },
  {
    "text": "to show them that http request smuggling protection is possible and i think the",
    "start": "2466800",
    "end": "2473040"
  },
  {
    "text": "way to do it is by focusing on http request smuggling and providing a excellent security",
    "start": "2473040",
    "end": "2479760"
  },
  {
    "text": "specifically against this attack instead of trying a catch-all solution like uh",
    "start": "2479760",
    "end": "2485200"
  },
  {
    "text": "application firewall which which has its problems and and has its drawbacks now",
    "start": "2485200",
    "end": "2490319"
  },
  {
    "text": "i'm not saying this is not a useful product but obviously it's more difficult to deploy than a point solution against",
    "start": "2490319",
    "end": "2497440"
  },
  {
    "text": "http request smuggling um let's see",
    "start": "2497440",
    "end": "2504640"
  },
  {
    "text": "anything else okay where can you find the content of",
    "start": "2504640",
    "end": "2513599"
  },
  {
    "text": "your test scripts it i shared the url in the chat room uh",
    "start": "2513599",
    "end": "2519200"
  },
  {
    "text": "early in my presentation uh so and there's a it will be of course uh in",
    "start": "2519200",
    "end": "2524800"
  },
  {
    "text": "a link in my white paper that will be published tonight",
    "start": "2524800",
    "end": "2530160"
  },
  {
    "text": "all right now i think i think we are done here and you can contact me directly for if you have",
    "start": "2533680",
    "end": "2540720"
  },
  {
    "text": "additional questions thank you very much it was a pleasure uh",
    "start": "2540720",
    "end": "2547280"
  },
  {
    "text": "providing giving you this presentation in blackhead and answering your questions thank you",
    "start": "2547280",
    "end": "2556960"
  }
]